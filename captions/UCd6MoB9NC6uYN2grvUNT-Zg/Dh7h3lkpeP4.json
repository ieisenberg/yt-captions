[
  {
    "text": "[Music]",
    "start": "410",
    "end": "7000"
  },
  {
    "text": "hi my name is Andy Catz I'm here to",
    "start": "7000",
    "end": "9599"
  },
  {
    "text": "introduce AWS step functions a service",
    "start": "9599",
    "end": "12679"
  },
  {
    "text": "from AWS that makes it easy to",
    "start": "12679",
    "end": "14320"
  },
  {
    "text": "coordinate the components of distributed",
    "start": "14320",
    "end": "16600"
  },
  {
    "text": "applications and microservices using",
    "start": "16600",
    "end": "19080"
  },
  {
    "text": "visual workflows microservices are",
    "start": "19080",
    "end": "21840"
  },
  {
    "text": "processes that communicate with each",
    "start": "21840",
    "end": "23199"
  },
  {
    "text": "other over a network to complete a",
    "start": "23199",
    "end": "25119"
  },
  {
    "text": "larger goal applications built as a",
    "start": "25119",
    "end": "27279"
  },
  {
    "text": "collection of microservices are more",
    "start": "27279",
    "end": "29320"
  },
  {
    "text": "resilient and easier to scale a very",
    "start": "29320",
    "end": "32238"
  },
  {
    "text": "simple microservice even serverless in",
    "start": "32239",
    "end": "34760"
  },
  {
    "text": "this case can be deployed with an AWS",
    "start": "34760",
    "end": "37200"
  },
  {
    "text": "Lambda function and you can do a lot",
    "start": "37200",
    "end": "39120"
  },
  {
    "text": "with just one Lambda",
    "start": "39120",
    "end": "40640"
  },
  {
    "text": "function sometimes however your",
    "start": "40640",
    "end": "42719"
  },
  {
    "text": "application requires more than one",
    "start": "42719",
    "end": "45200"
  },
  {
    "text": "function they're many combinations and",
    "start": "45200",
    "end": "47360"
  },
  {
    "text": "patterns of two or three functions for",
    "start": "47360",
    "end": "49920"
  },
  {
    "text": "example you may want a second function",
    "start": "49920",
    "end": "51879"
  },
  {
    "text": "to always follow a first and only run if",
    "start": "51879",
    "end": "54920"
  },
  {
    "text": "and when the first succeeds you may want",
    "start": "54920",
    "end": "57280"
  },
  {
    "text": "to execute two functions in parallel and",
    "start": "57280",
    "end": "59039"
  },
  {
    "text": "feed the combined results into a third",
    "start": "59039",
    "end": "61239"
  },
  {
    "text": "or maybe you would like to choose",
    "start": "61239",
    "end": "62559"
  },
  {
    "text": "between two functions based on the",
    "start": "62559",
    "end": "64280"
  },
  {
    "text": "output of a first function you could",
    "start": "64280",
    "end": "67000"
  },
  {
    "text": "write a lot of code to choreograph the",
    "start": "67000",
    "end": "68560"
  },
  {
    "text": "interaction of your microservices or you",
    "start": "68560",
    "end": "71080"
  },
  {
    "text": "could use AWS step functions to",
    "start": "71080",
    "end": "72799"
  },
  {
    "text": "coordinate your workflows it's easy to",
    "start": "72799",
    "end": "75479"
  },
  {
    "text": "get started with step functions you",
    "start": "75479",
    "end": "77479"
  },
  {
    "text": "declaratively define your workflows in",
    "start": "77479",
    "end": "79240"
  },
  {
    "text": "the form of a state machine step",
    "start": "79240",
    "end": "81600"
  },
  {
    "text": "function visualizes your workflow",
    "start": "81600",
    "end": "83640"
  },
  {
    "text": "including task performed in sequence or",
    "start": "83640",
    "end": "86200"
  },
  {
    "text": "in parallel branching logic based on",
    "start": "86200",
    "end": "88560"
  },
  {
    "text": "task results or other input and timers",
    "start": "88560",
    "end": "91159"
  },
  {
    "text": "step functions manages each execution",
    "start": "91159",
    "end": "93759"
  },
  {
    "text": "keeping track of each step in a central",
    "start": "93759",
    "end": "95439"
  },
  {
    "text": "audit Trail and managing task timeouts",
    "start": "95439",
    "end": "98360"
  },
  {
    "text": "retries and error messages with built-in",
    "start": "98360",
    "end": "101560"
  },
  {
    "text": "try catch finally",
    "start": "101560",
    "end": "104119"
  },
  {
    "text": "patterns some examples of the kinds of",
    "start": "104119",
    "end": "106320"
  },
  {
    "text": "repetitive processes that you can",
    "start": "106320",
    "end": "107600"
  },
  {
    "text": "reliably automate with step functions",
    "start": "107600",
    "end": "109479"
  },
  {
    "text": "include active synchronization of two",
    "start": "109479",
    "end": "112079"
  },
  {
    "text": "Amazon S3 buckets requesting a human",
    "start": "112079",
    "end": "115360"
  },
  {
    "text": "approval by email and waiting till the",
    "start": "115360",
    "end": "117039"
  },
  {
    "text": "authorized person responds before",
    "start": "117039",
    "end": "118840"
  },
  {
    "text": "continuing with the workflow image",
    "start": "118840",
    "end": "120680"
  },
  {
    "text": "processing of photos creating a",
    "start": "120680",
    "end": "122119"
  },
  {
    "text": "thumbnail and tagging image features",
    "start": "122119",
    "end": "123880"
  },
  {
    "text": "using Amazon recognition in parallel",
    "start": "123880",
    "end": "127000"
  },
  {
    "text": "step functions helps increase your",
    "start": "127000",
    "end": "129039"
  },
  {
    "text": "productive time spent on business logic",
    "start": "129039",
    "end": "131319"
  },
  {
    "text": "instead of Plumbing makes your",
    "start": "131319",
    "end": "133239"
  },
  {
    "text": "applications more agile and provides",
    "start": "133239",
    "end": "135200"
  },
  {
    "text": "resilience at scale learn more about AWS",
    "start": "135200",
    "end": "138400"
  },
  {
    "text": "step functions by visiting our console",
    "start": "138400",
    "end": "141040"
  },
  {
    "text": "today",
    "start": "141040",
    "end": "143060"
  },
  {
    "text": "[Music]",
    "start": "143060",
    "end": "148830"
  }
]