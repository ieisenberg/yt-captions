[
  {
    "start": "0",
    "end": "14000"
  },
  {
    "text": "hello and welcome to today's AWS webinar Journey Through the cloud today we're discussing managing your Cloud assets",
    "start": "880",
    "end": "8000"
  },
  {
    "text": "and my name is Ryan shuttleworth and I'm a technical evangelist at AWS and I'll be taking you through the agenda today",
    "start": "8000",
    "end": "14400"
  },
  {
    "start": "14000",
    "end": "177000"
  },
  {
    "text": "so the journey through the cloud series is all about taking you through some common use cases and stepping stones",
    "start": "14400",
    "end": "19720"
  },
  {
    "text": "into the AWS Cloud where you can learn from the common points in the journey that other customers have experienced",
    "start": "19720",
    "end": "25760"
  },
  {
    "text": "and what they've done and how they've learned so that you can get best practices to bootstrap your projects and help you along your journey into the",
    "start": "25760",
    "end": "32279"
  },
  {
    "text": "cloud and today's is all about managing your Cloud assets and really getting to",
    "start": "32279",
    "end": "37280"
  },
  {
    "text": "grips with systems spraw that can occur in an unconstrained environment like AWS where you can tap into unlimited",
    "start": "37280",
    "end": "44079"
  },
  {
    "text": "potential resources then you can find yourself in a situation where you have resources in the cloud and you're",
    "start": "44079",
    "end": "49520"
  },
  {
    "text": "struggling to manage those assets and we're going to look at how you can leverage some management Frameworks in",
    "start": "49520",
    "end": "54600"
  },
  {
    "text": "order to take control over those assets and ultimately help you choose some systems in AWS that suit your te",
    "start": "54600",
    "end": "61399"
  },
  {
    "text": "technology delivery style so whether you be a developer Centric organization or an operation Centric organization we can",
    "start": "61399",
    "end": "68119"
  },
  {
    "text": "give you some ideas of how you can get to grips with those toolings so the agenda we going to start",
    "start": "68119",
    "end": "74200"
  },
  {
    "text": "by setting the scene and talk about a spectrum if you like of um approaches to managing Assets in the cloud and then at",
    "start": "74200",
    "end": "81320"
  },
  {
    "text": "one end of that Spectrum we'll look at a shrink trapped approach using elastic bean store car uh application framework",
    "start": "81320",
    "end": "87159"
  },
  {
    "text": "management platform in AWS the other end of the Spectrum we'll talk about fine grain control asserting declarative",
    "start": "87159",
    "end": "93439"
  },
  {
    "text": "control using cloud formation templating and then we'll introduce the new opsworks framework which really sits in",
    "start": "93439",
    "end": "99399"
  },
  {
    "text": "the middle of those two approaches so setting the scene and why",
    "start": "99399",
    "end": "105200"
  },
  {
    "text": "is this sort of sprawl of resources occurring more in the cloud than would do in traditional facilities and I think",
    "start": "105200",
    "end": "111320"
  },
  {
    "text": "it's driven really the fact that cloud assets are growing quickly because we're defining more and more architectural",
    "start": "111320",
    "end": "116719"
  },
  {
    "text": "patterns for the use of cloud and certainly if you go to AWS Amon am.com architecture you'll find a whole range",
    "start": "116719",
    "end": "122759"
  },
  {
    "text": "of those deriving things from batch processing web apps highly fault tolerant highly available application",
    "start": "122759",
    "end": "128520"
  },
  {
    "text": "deployments and as a result more applications are being deployed more data is resident in the cloud and that",
    "start": "128520",
    "end": "134480"
  },
  {
    "text": "itself has a certain gravity Associated to it so it's easier to re to move",
    "start": "134480",
    "end": "140000"
  },
  {
    "text": "applications towards the data um and as a result you end up having more services in the cloud and the cloud fundamentally",
    "start": "140000",
    "end": "147280"
  },
  {
    "text": "gives you greater agility so these environments tend to be much faster moving as a result they tend to iterate",
    "start": "147280",
    "end": "153480"
  },
  {
    "text": "more you tend to get more versions of things going up you tend to take more um agile approaches with the assets you",
    "start": "153480",
    "end": "160120"
  },
  {
    "text": "have in the cloud and all of that means that cloud assets are growing quickly and you need a way to control it that",
    "start": "160120",
    "end": "165440"
  },
  {
    "text": "you wouldn't have had or it's an order of magnitude more complicated or um uh",
    "start": "165440",
    "end": "170920"
  },
  {
    "text": "diverse the problem that you have in the cloud versus a constrained physical on- premise",
    "start": "170920",
    "end": "177080"
  },
  {
    "start": "177000",
    "end": "328000"
  },
  {
    "text": "facility so how do you maintain control over what is deployed in the cloud and as I mentioned I'm going to talk about",
    "start": "177080",
    "end": "182840"
  },
  {
    "text": "two ends of a spectrum and I like to think of those ends of the spectrum is one end is about Controlled Chaos and",
    "start": "182840",
    "end": "189519"
  },
  {
    "text": "then the other end of that Spectrum being meticulous management so if you think about a spectrum of ways in which",
    "start": "189519",
    "end": "195080"
  },
  {
    "text": "you would manage your environment in order to control of um the chaos that might be occurring versus how you",
    "start": "195080",
    "end": "200640"
  },
  {
    "text": "meticulously management every moving part of an environment so what do I mean by control chaos well if you think about",
    "start": "200640",
    "end": "206280"
  },
  {
    "text": "what might happen in a developer Centric a small developer team light on resources you might prototype an app and",
    "start": "206280",
    "end": "213080"
  },
  {
    "text": "then you deploy it to an instance it go straight into a bunch of test and Dev cycles and then that instance probably",
    "start": "213080",
    "end": "218879"
  },
  {
    "text": "gets promoted into production when you're ready and happy you might then deploy more instances from it from Amis",
    "start": "218879",
    "end": "224640"
  },
  {
    "text": "for example get to the point of needing RDS databases deploy those stick load balances across the top and then maybe",
    "start": "224640",
    "end": "231040"
  },
  {
    "text": "add Auto scaling and start flushing instances out into Autos scaling groups and then you might take a breath and sit",
    "start": "231040",
    "end": "237040"
  },
  {
    "text": "back and say well what is it do I actually have in my environment and it can quickly become a developer or devops",
    "start": "237040",
    "end": "243280"
  },
  {
    "text": "nightmare when you have small teams and particularly when you're running at a very fastpaced of development or",
    "start": "243280",
    "end": "248360"
  },
  {
    "text": "innovation um you can get out of control so that's what I call about sort of Controlled Chaos at the other end of the",
    "start": "248360",
    "end": "254840"
  },
  {
    "text": "spectrum we have meticulous management and the approach here might be much more uh formal in terms of your prototype an",
    "start": "254840",
    "end": "261759"
  },
  {
    "text": "app and off the back of that you plan the infrastructure required Implement some build and deployment standards and",
    "start": "261759",
    "end": "267360"
  },
  {
    "text": "deploy those environments manage things through Change Control Implement formal processes wrap in formal tools maybe",
    "start": "267360",
    "end": "274240"
  },
  {
    "text": "using things like Chef puppet to do that to create something that's quite tightly controlled um and efficient and",
    "start": "274240",
    "end": "280360"
  },
  {
    "text": "automated but can be a lot of effort to achieve okay so two ends of the the Spectrum and the things that really help",
    "start": "280360",
    "end": "287800"
  },
  {
    "text": "you between these move between these two ends or control where you sit upon that Spectrum are fundamentally people your",
    "start": "287800",
    "end": "293840"
  },
  {
    "text": "people are your best assets they're what make your tools sing for you but you also have processors and control control",
    "start": "293840",
    "end": "299800"
  },
  {
    "text": "so whether you have strict processes um or informal processes in terms of how",
    "start": "299800",
    "end": "305320"
  },
  {
    "text": "you manage your deployment or your application assets whether you have a tight security controls maybe around",
    "start": "305320",
    "end": "311320"
  },
  {
    "text": "what you can and cannot do or authorization controls because you having to adhere to some sort of",
    "start": "311320",
    "end": "317160"
  },
  {
    "text": "external audited standard versus loose controls and of course the tools that",
    "start": "317160",
    "end": "322319"
  },
  {
    "text": "you have form an essential part in supporting your people your processes and implementing those controls and it's",
    "start": "322319",
    "end": "328919"
  },
  {
    "start": "328000",
    "end": "430000"
  },
  {
    "text": "those tools that we'll have a look at today and if you think about what we mean then by all the desire out of tools",
    "start": "328919",
    "end": "335680"
  },
  {
    "text": "that we want for controlling chaos I think of it as managing at a high level",
    "start": "335680",
    "end": "341120"
  },
  {
    "text": "a shrinked wrapped app and the tools that we want in that space that's what we're after we're after something that's",
    "start": "341120",
    "end": "346160"
  },
  {
    "text": "going to manage the assets that we deploy under the applications so that if I'm iterating fast on application I know",
    "start": "346160",
    "end": "351840"
  },
  {
    "text": "the the the infrastructure below is taken care of because ultimately it might be I just want my app to run and I",
    "start": "351840",
    "end": "357600"
  },
  {
    "text": "only want access to those machines of a really need to versus the meticulous management where we're looking for fine",
    "start": "357600",
    "end": "364560"
  },
  {
    "text": "grain declarative control over the assets that are created in the cloud so",
    "start": "364560",
    "end": "370039"
  },
  {
    "text": "you might have a a a philosophy or desire where you want to Source control the entire virtual data center just like",
    "start": "370039",
    "end": "376479"
  },
  {
    "text": "you would an Apache config or a piece of code so that you can create an environment that's tightly controlled",
    "start": "376479",
    "end": "382840"
  },
  {
    "text": "and auditable and the tools that we have the Frameworks that we have that enable to do that one end we have elastic beans",
    "start": "382840",
    "end": "389479"
  },
  {
    "text": "stalk the other end we have cloud formation and we'll look at both of those in turn today but recently we also",
    "start": "389479",
    "end": "395639"
  },
  {
    "text": "um released a middle ground framework if you like and this is AWS opsworks where",
    "start": "395639",
    "end": "401120"
  },
  {
    "text": "really we're enabling people to interact with the level of abstraction away from AWS resources that you can achieve with",
    "start": "401120",
    "end": "407319"
  },
  {
    "text": "beant stalk in terms of managing layers of an application but you can also dive",
    "start": "407319",
    "end": "412360"
  },
  {
    "text": "down into the fine grain detail and get declarative control through that framework using things like Chef so the",
    "start": "412360",
    "end": "419599"
  },
  {
    "text": "middle ground AWS opsw works we'll also look at last today that gives you a bit of both worlds and and maybe helps you",
    "start": "419599",
    "end": "425520"
  },
  {
    "text": "along that sort of spectrum so the first one we'll look at today is elastic beant so elastic beant stalk um is",
    "start": "425520",
    "end": "433360"
  },
  {
    "start": "430000",
    "end": "475000"
  },
  {
    "text": "summarized by this graphic and elastic Bean is all about taking an application version the Cubes at the top and",
    "start": "433360",
    "end": "439360"
  },
  {
    "text": "managing their deployments into an environment down the black boxes at the right so there I've got two environments",
    "start": "439360",
    "end": "445319"
  },
  {
    "text": "I've got test environment and I've got production environment and each of those en requirements has differences so one",
    "start": "445319",
    "end": "451080"
  },
  {
    "text": "has different instance sizes we have different Auto scaling properties one is single availability Zone one is multi-",
    "start": "451080",
    "end": "456759"
  },
  {
    "text": "availability Zone and one is using a test database and one is using a production database and bean stalk is",
    "start": "456759",
    "end": "463000"
  },
  {
    "text": "all about taking an application version of some sort of code and deploying it into a managed application environment",
    "start": "463000",
    "end": "469319"
  },
  {
    "text": "that adheres to all the best practice architectural principles that AWS um talks",
    "start": "469319",
    "end": "474919"
  },
  {
    "text": "about now obviously if you're in a deployment application you need to know what sort of container it's going to run",
    "start": "474919",
    "end": "480039"
  },
  {
    "start": "475000",
    "end": "519000"
  },
  {
    "text": "in so therefore you can choose what code to write in or match it to what you're doing today and the range of containers",
    "start": "480039",
    "end": "485599"
  },
  {
    "text": "that Beanstalk supports are net PHP Java python Ruby and node.js and we're adding",
    "start": "485599",
    "end": "490840"
  },
  {
    "text": "new containers all the time so there's a really great place that you can keep updated on this and this applies to all",
    "start": "490840",
    "end": "496319"
  },
  {
    "text": "of the services inside AWS if you take an RSS feed from",
    "start": "496319",
    "end": "501400"
  },
  {
    "text": "aws.com my colleague Jeff and the states will blog regularly as new features new",
    "start": "501400",
    "end": "506919"
  },
  {
    "text": "services are released and updated and that's the gospel truth of where you can get details of the upto-date releases",
    "start": "506919",
    "end": "512479"
  },
  {
    "text": "and every morning in your inbox you'll get um a Blog article talking about some new things getting on in",
    "start": "512479",
    "end": "518479"
  },
  {
    "text": "AWS so back to Beanstalk then in terms of this web application package of some",
    "start": "518479",
    "end": "523599"
  },
  {
    "text": "sort whether it be a net package whether it be a PHP application or so on deploying that into a beant stalk what",
    "start": "523599",
    "end": "529519"
  },
  {
    "text": "actually goes on under the covers well if you think about the container itself as a generalized view of the container",
    "start": "529519",
    "end": "535519"
  },
  {
    "text": "there's the user application that you're deploying on top there Al ultimately going to run on an ec2 host at the",
    "start": "535519",
    "end": "541920"
  },
  {
    "text": "bottom and then stuff in between is what's managed by Beanstalk so we have an application service we're going to",
    "start": "541920",
    "end": "546959"
  },
  {
    "text": "have some sort of HTTP Handler for a web app some sort of language interpreter so it's going to support the type of",
    "start": "546959",
    "end": "554040"
  },
  {
    "text": "application that you're deploying at the top and it's going to sit on an operating system either Linux or or",
    "start": "554040",
    "end": "559120"
  },
  {
    "text": "Windows and then that's going to be deployed onto an ec2 instance in order to run and that's would be a managed if",
    "start": "559120",
    "end": "565399"
  },
  {
    "text": "you like container inside beanock so looking at how the bean stalk",
    "start": "565399",
    "end": "571680"
  },
  {
    "start": "569000",
    "end": "632000"
  },
  {
    "text": "environment is managed around those ec2 containers the first thing that we can look at that's deployed by Bean stalkers",
    "start": "571680",
    "end": "577640"
  },
  {
    "text": "and elastic low balancer because we're going to spread these containers across ultimately a group of resources under",
    "start": "577640",
    "end": "584200"
  },
  {
    "text": "Autos scaling we're going to need some way of low balancing the web requests across the top so elastic low balances",
    "start": "584200",
    "end": "589440"
  },
  {
    "text": "are created and behind those we'll create an auto scaling group Define to your properties so we could have for",
    "start": "589440",
    "end": "595560"
  },
  {
    "text": "example a minimum of two maximum of 10 defined in the bean stalk definition and",
    "start": "595560",
    "end": "601040"
  },
  {
    "text": "then within that Al scaling group we'll push those ec2 instances that are running the container of your choice and",
    "start": "601040",
    "end": "607760"
  },
  {
    "text": "have your application deployed to it so here I've got two instances created in that AOS scaling group and then we'll",
    "start": "607760",
    "end": "613519"
  },
  {
    "text": "wire that up into the be. framework and then we'll publish that under a c name so that you can map that DNS name so you",
    "start": "613519",
    "end": "620360"
  },
  {
    "text": "can root web requests to it so ultimately HTP requests will come in they'll hit the elastic load balancer be",
    "start": "620360",
    "end": "625880"
  },
  {
    "text": "load balanced across your containers running on ec2 instances and we'll get the response back to your",
    "start": "625880",
    "end": "632120"
  },
  {
    "text": "users with logs we also consolidate from those ec2 instances into S3 so shown",
    "start": "632120",
    "end": "637720"
  },
  {
    "text": "here as a diagram where I have my logs from all the application containers pushed out into S3 and you can view those via the console or I can go and",
    "start": "637720",
    "end": "644160"
  },
  {
    "text": "access those buckets directly but we also store the file versions the application versions you're deploying an",
    "start": "644160",
    "end": "650120"
  },
  {
    "text": "S3 so you can stack up different versions of an app via the console and then you can choose to deploy the app or",
    "start": "650120",
    "end": "656120"
  },
  {
    "text": "roll back that app and then we'll push that container that code to the containers across your ec2 instances and",
    "start": "656120",
    "end": "662639"
  },
  {
    "text": "we'll do a seamless roll out with zero downtime if you look at that container",
    "start": "662639",
    "end": "668360"
  },
  {
    "start": "666000",
    "end": "706000"
  },
  {
    "text": "then for different languages they differ depending upon the language and we try to choose the the most industry standard",
    "start": "668360",
    "end": "674680"
  },
  {
    "text": "and high performance configurations that we can widely supported stuff so take",
    "start": "674680",
    "end": "679959"
  },
  {
    "text": "python for example we're using mod wsgi to hook up the Apache HTTP interpreter",
    "start": "679959",
    "end": "685839"
  },
  {
    "text": "to the Python language so commonly accepted as the best way of doing that for Ruby we're using engine X um and",
    "start": "685839",
    "end": "692880"
  },
  {
    "text": "passenger so a common Ruby setup for rails applications so you can see that",
    "start": "692880",
    "end": "698000"
  },
  {
    "text": "the containers differ slightly depending on what we're deploying and of course the host will differ if we're deploying",
    "start": "698000",
    "end": "703040"
  },
  {
    "text": "a net application it will be a Windows host but what about the data so I've",
    "start": "703040",
    "end": "708720"
  },
  {
    "start": "706000",
    "end": "769000"
  },
  {
    "text": "deployed an application here I'm like okayy I can deploy a a web server and a web tier but why why can't I you know",
    "start": "708720",
    "end": "714600"
  },
  {
    "text": "where's my relational database platform behind the scenes which is what you're going to need typically",
    "start": "714600",
    "end": "720200"
  },
  {
    "text": "so if you look at um deploying an application such as a ruby rails application or a python Jango these",
    "start": "720200",
    "end": "726240"
  },
  {
    "text": "applications contain models so you define in your code your classes they generate a relational model under covers",
    "start": "726240",
    "end": "733040"
  },
  {
    "text": "and then they'll want to go and squirt those into a relational database at some point when you deploy the application",
    "start": "733040",
    "end": "738760"
  },
  {
    "text": "now using something uh like Beanstalk you can deploy your rails or Jango out to git you can do a git push into",
    "start": "738760",
    "end": "745199"
  },
  {
    "text": "Beanstalk and then configure Bean stalk to run a common command um in order to",
    "start": "745199",
    "end": "750760"
  },
  {
    "text": "generate a relational database so here for rails it would be a rate command and for Jango it would be a sync DB and",
    "start": "750760",
    "end": "757079"
  },
  {
    "text": "automatically when you do your deployment will create the relational database service the rdms say am my SQL",
    "start": "757079",
    "end": "763240"
  },
  {
    "text": "database running under RDS behind the scenes to manage the data model for your",
    "start": "763240",
    "end": "768320"
  },
  {
    "text": "app so how do you create an app for AWS elastic B Store what you have to do then is a different from others well it's",
    "start": "768320",
    "end": "774279"
  },
  {
    "start": "769000",
    "end": "837000"
  },
  {
    "text": "just like any other application in that you can take a piece of code that you're running with locally on your local let's",
    "start": "774279",
    "end": "780160"
  },
  {
    "text": "say lamp stack you're running with it you upload that maybe via the AWS console deploy into the atic Beanstalk",
    "start": "780160",
    "end": "787120"
  },
  {
    "text": "and run it you can then download that s very same source that has been pushed into S3 for example on the beant stalk",
    "start": "787120",
    "end": "793800"
  },
  {
    "text": "and then download that and pop that back into your local application and it will run there is absolutely no difference you don't have to write to any specific",
    "start": "793800",
    "end": "800160"
  },
  {
    "text": "apis to make this work at all so looking up packaging packaging up",
    "start": "800160",
    "end": "806240"
  },
  {
    "text": "would be done as normal so look at the black line there I might have a Java War file that I've uploaded to the console I",
    "start": "806240",
    "end": "812320"
  },
  {
    "text": "produce maybe a Microsoft web deploy package from Visual Studio might have a zip file containing PHP or python code",
    "start": "812320",
    "end": "819440"
  },
  {
    "text": "all of these can be pushed up into the console um as an upload operation but I've also got the ability to do things",
    "start": "819440",
    "end": "825959"
  },
  {
    "text": "like use IDE plugins for clips and visual studio or to use things like git",
    "start": "825959",
    "end": "831000"
  },
  {
    "text": "integration to push from git into my balk stack and I'll show you some of those samples in a",
    "start": "831000",
    "end": "837120"
  },
  {
    "start": "837000",
    "end": "870000"
  },
  {
    "text": "moment so in the con you can upload a new version of an application and this is a view of a beanstalk that I'm",
    "start": "837120",
    "end": "843880"
  },
  {
    "text": "running that's got various versions that have been deployed in the past and I'm not going to upload a new version I simply click upload new version and I'll",
    "start": "843880",
    "end": "850199"
  },
  {
    "text": "be asked to choose the archive file to upload and then I can choose an environment to push it to so I could",
    "start": "850199",
    "end": "857720"
  },
  {
    "text": "upload an application but not deploy it yet and then choose to deploy that later or I could deploy it straight into uh",
    "start": "857720",
    "end": "863320"
  },
  {
    "text": "running Bean stalk environment that's a really simple way for you to manage your application and what's deployed into a",
    "start": "863320",
    "end": "869800"
  },
  {
    "text": "beanock you can use command line tools and wizards as well so you can script this stuff up maybe from bash or",
    "start": "869800",
    "end": "875199"
  },
  {
    "start": "870000",
    "end": "904000"
  },
  {
    "text": "something like that in that you can check things like the application status create an environment using classic",
    "start": "875199",
    "end": "881480"
  },
  {
    "text": "command line tools or you can use a nice wrapped up wizard called EB um where you can do an EB in it and it will take you",
    "start": "881480",
    "end": "887279"
  },
  {
    "text": "for all the steps required to create your application just as you would do in the console so you can create a load of",
    "start": "887279",
    "end": "892800"
  },
  {
    "text": "automation around being stalk using those sorts of tools but you can also create this as an enir environment for",
    "start": "892800",
    "end": "899480"
  },
  {
    "text": "running um you as a server from uh something like Eclipse so this is an eclipse um ID plugin where I can choose",
    "start": "899480",
    "end": "906680"
  },
  {
    "start": "904000",
    "end": "992000"
  },
  {
    "text": "in a bean stalk environment here I've got Tomcat 6 but you can see I can support Tomcat 7 as well manually",
    "start": "906680",
    "end": "912040"
  },
  {
    "text": "defining a server to run my app on I can step through a wizard choose the region",
    "start": "912040",
    "end": "917160"
  },
  {
    "text": "I'm going to run I'm going to choose an SSH keypad to deploy um I can set some properties up for this then um in terms",
    "start": "917160",
    "end": "924320"
  },
  {
    "text": "of um the application name and host and ultimately it published into a beanstalk",
    "start": "924320",
    "end": "930079"
  },
  {
    "text": "just like I could do with a visual studio so visual studio again choosing Beanstalk as my new application template",
    "start": "930079",
    "end": "937680"
  },
  {
    "text": "deploy against give it a name step through some of the properties I need to Define choose to run it on 2008 Windows",
    "start": "937680",
    "end": "944480"
  },
  {
    "text": "running I 7.5 on an instance type of Micro Target runtime. net version 4 here",
    "start": "944480",
    "end": "950920"
  },
  {
    "text": "now I can run through it's going to create an RDS database here for example for this app so it's going to create some security groups for that summarize",
    "start": "950920",
    "end": "958000"
  },
  {
    "text": "the property and then bingo in a few minutes I've got an environment that's healthy and is running and is manageable",
    "start": "958000",
    "end": "963600"
  },
  {
    "text": "from my visual studio environment that's worth noting with something like this you can um manage everything going on",
    "start": "963600",
    "end": "969720"
  },
  {
    "text": "inside AWS and the visual studio plugin is quite quite comprehensive and you can see here that I can connect to an",
    "start": "969720",
    "end": "975319"
  },
  {
    "text": "instance underneath my beant stalk I could rebuild the environment I could terminate it and so on and so forth and",
    "start": "975319",
    "end": "980399"
  },
  {
    "text": "there's the URL that this particular example app environment is deployed onto and then you can map that using",
    "start": "980399",
    "end": "986199"
  },
  {
    "text": "something like Route 53 and off your going straight from the visual studio developer",
    "start": "986199",
    "end": "991480"
  },
  {
    "text": "workbench but if you're a git user um shown here is uh deploying some PHP using a g AWS push and it's pushing",
    "start": "991480",
    "end": "998839"
  },
  {
    "start": "992000",
    "end": "1008000"
  },
  {
    "text": "Deltas out into my elastic Bean stalk running in the E and then it's completed",
    "start": "998839",
    "end": "1004759"
  },
  {
    "text": "and off I go I've updated my application now the container itself you",
    "start": "1004759",
    "end": "1010279"
  },
  {
    "start": "1008000",
    "end": "1048000"
  },
  {
    "text": "can configure in the console as well so once you've got a beanock running you can have a look at things like the server that's deployed against the load",
    "start": "1010279",
    "end": "1016000"
  },
  {
    "text": "balancing and so on so here I've got an ec2 instance t P1 micro running underneath the covers I can set load",
    "start": "1016000",
    "end": "1022240"
  },
  {
    "text": "balancer just like oh if I was creating an elb by hand I can choose things like",
    "start": "1022240",
    "end": "1027360"
  },
  {
    "text": "application health check intervals where the Ping is going to be pushed to to make sure these are healthy I can set",
    "start": "1027360",
    "end": "1032839"
  },
  {
    "text": "Autos scaling Rule and here saying that Min of two Max of four across two availability zones and like if depending",
    "start": "1032839",
    "end": "1039280"
  },
  {
    "text": "on the container there will be specific things about the container so here putting environment properties out for",
    "start": "1039280",
    "end": "1044720"
  },
  {
    "text": "Java for example but fundamentally you get the full admin",
    "start": "1044720",
    "end": "1051480"
  },
  {
    "text": "access to all the underlying resources so whether it be an ec2 instance you created Amis autoscaling groups all of",
    "start": "1051480",
    "end": "1058559"
  },
  {
    "text": "these can be inspected and changed if you want to so we're not hiding any of the resources all we're doing is managing them through Bean framework and",
    "start": "1058559",
    "end": "1065200"
  },
  {
    "text": "you don't pay for be stalk itself you only pay for the resources created under the covers so on the other end of that",
    "start": "1065200",
    "end": "1072240"
  },
  {
    "text": "Spectrum then and that's elastic beans talk about high level shrink trapped environments if you want to get really fine grained and declarative over the",
    "start": "1072240",
    "end": "1078760"
  },
  {
    "text": "control that you assert across your Cloud resources cloud formation as the tool to use so if you think about what",
    "start": "1078760",
    "end": "1084159"
  },
  {
    "text": "happens under the covers of beant stalk when you create an application and deploy it into Beanstalk then certain",
    "start": "1084159",
    "end": "1091400"
  },
  {
    "text": "set of actions are going to happen inside AWS like creating a security group creating an autoscaling policy",
    "start": "1091400",
    "end": "1097200"
  },
  {
    "text": "creating load balances adding instances installing some software on those instances and then consolidating the logs on the regular basis and what Bean",
    "start": "1097200",
    "end": "1104080"
  },
  {
    "text": "stalk is actually doing is it's marshalling a series of calls into AWS in order to create resources or",
    "start": "1104080",
    "end": "1110200"
  },
  {
    "text": "configure resources and it's calling into an underlying framework under the covers um which is enabling you to set",
    "start": "1110200",
    "end": "1116640"
  },
  {
    "text": "up things like comput scaling databases storage load balancing all the things that go on inside AWS is where cloud",
    "start": "1116640",
    "end": "1123120"
  },
  {
    "text": "formation wraps all of those as a framework in order to give you a standard sort of interface for creating",
    "start": "1123120",
    "end": "1129679"
  },
  {
    "text": "resources configuring those resources but most importantly for the life cycle managing of those resources using",
    "start": "1129679",
    "end": "1136320"
  },
  {
    "text": "scripts so the creation of resources the destruction of those resources the",
    "start": "1136320",
    "end": "1141520"
  },
  {
    "text": "update of those resources based upon a templating or scripting language the components that make up",
    "start": "1141520",
    "end": "1148600"
  },
  {
    "start": "1146000",
    "end": "1372000"
  },
  {
    "text": "cloud formation is the cloud formation framework itself and this deals with the creation of what we call Stacks so",
    "start": "1148600",
    "end": "1154679"
  },
  {
    "text": "stacks on the right what come out of cloud formation and these are configured set of AWS resources where we have um",
    "start": "1154679",
    "end": "1161880"
  },
  {
    "text": "comprehensive support of the services in Amazon web services that you can use it's customizable it's aent aware in",
    "start": "1161880",
    "end": "1168799"
  },
  {
    "text": "that if things go wrong it reports back to the cloud formation uh framework and then you drive that framework from a",
    "start": "1168799",
    "end": "1175240"
  },
  {
    "text": "template which is a Json formatted file on the left so you drop in a file which can have parameter definitions so you",
    "start": "1175240",
    "end": "1181000"
  },
  {
    "text": "can drive user defined properties throughout these templates that ultimately create resources and then can",
    "start": "1181000",
    "end": "1187760"
  },
  {
    "text": "perform configuration actions on those resources all performed by the cloud formation framework that has a",
    "start": "1187760",
    "end": "1194559"
  },
  {
    "text": "transactionality with it so that if some point of the stack doesn't doesn't create properly you want to be sure that",
    "start": "1194559",
    "end": "1200120"
  },
  {
    "text": "the whole thing rolls back and you don't end up with something that's broken and we take care of all of that under the cloud formation",
    "start": "1200120",
    "end": "1205600"
  },
  {
    "text": "framework so there's some Snippets here that show how these template files work so here's a parameter being defined and",
    "start": "1205600",
    "end": "1213320"
  },
  {
    "text": "I've shown the create stack template um console uh UI at the bottom right so",
    "start": "1213320",
    "end": "1219960"
  },
  {
    "text": "using a template with this snippet in it would drive this console UI for your users and in this case it deres a",
    "start": "1219960",
    "end": "1226559"
  },
  {
    "text": "parameter of key pair so this is driving the key pair to use to enable SSH access",
    "start": "1226559",
    "end": "1231760"
  },
  {
    "text": "for an instance that might be created so I could type in the key pair name here and then you cture that property that",
    "start": "1231760",
    "end": "1237400"
  },
  {
    "text": "parameter and use it elsewhere in my scripts likewise I could create a resource so here I'm creating an RS",
    "start": "1237400",
    "end": "1244640"
  },
  {
    "text": "instance and I'm creating a database instance of size M1 small of engine",
    "start": "1244640",
    "end": "1250080"
  },
  {
    "text": "MySQL with a master username and password now they could have been properties that are parameters that I",
    "start": "1250080",
    "end": "1255600"
  },
  {
    "text": "gathered using this previous example to drive the the username and password and then I can also configure resources so",
    "start": "1255600",
    "end": "1263280"
  },
  {
    "text": "here is a cloud formation um in it using yum on a Linux instance to insert to",
    "start": "1263280",
    "end": "1269720"
  },
  {
    "text": "install MySQL Apache and PHP tools so this creates a lamp stack essentially",
    "start": "1269720",
    "end": "1275440"
  },
  {
    "text": "using yum on initialization of this instance using the script but it also downloads some sources and unpacks some",
    "start": "1275440",
    "end": "1281840"
  },
  {
    "text": "information into vub dub HTML so I'm going to S3 into a bucket to access a",
    "start": "1281840",
    "end": "1287720"
  },
  {
    "text": "zip to download my PHP application so using this snippet some point in the",
    "start": "1287720",
    "end": "1293279"
  },
  {
    "text": "template will install the software that I need to install and it will download some source and just as easily you might",
    "start": "1293279",
    "end": "1298799"
  },
  {
    "text": "be diving into your HTTP config and editing the files for example using cloud formation as well to configure the",
    "start": "1298799",
    "end": "1304799"
  },
  {
    "text": "resources are running so the benefit of a templated environment is that it's procedural",
    "start": "1304799",
    "end": "1310080"
  },
  {
    "text": "definition right so you can Define stuff and remove humans from the loop you can also create this programmatically so",
    "start": "1310080",
    "end": "1316159"
  },
  {
    "text": "think about a build cycle that generates Ates cloud formation templates out the back so you might have a variant of your",
    "start": "1316159",
    "end": "1322799"
  },
  {
    "text": "template for test a variant of your template for load testing a variant of your template for pre-production and",
    "start": "1322799",
    "end": "1329120"
  },
  {
    "text": "production so you can create these programmatically and alter these templates and then stick them into Source",
    "start": "1329120",
    "end": "1334679"
  },
  {
    "text": "control they're parameter driven um so they're very flexible they can be very dynamic in their nature and ultimately",
    "start": "1334679",
    "end": "1341640"
  },
  {
    "text": "they're just text files so you can share templates of these they are just fil you can email them around you can grab Snippets off online communities and so",
    "start": "1341640",
    "end": "1348320"
  },
  {
    "text": "on and because of that text file nature and and plain sort of Json format is that there are no configuration you can",
    "start": "1348320",
    "end": "1354679"
  },
  {
    "text": "actually Source control so you could generate these things programmatically you could drop them into your Source control platform and have them",
    "start": "1354679",
    "end": "1361840"
  },
  {
    "text": "associated with an application version so if you need to roll back and recreate an environment for a particular version the templates all there in the source",
    "start": "1361840",
    "end": "1368480"
  },
  {
    "text": "control and you can diff your virtual data center even now a company that's using cloud",
    "start": "1368480",
    "end": "1375039"
  },
  {
    "start": "1372000",
    "end": "1411000"
  },
  {
    "text": "formation heavily and they used it recently for the curios Rover is NASA JPL so amongst a whole bunch of other",
    "start": "1375039",
    "end": "1382240"
  },
  {
    "text": "services um they were using to do some NASA TV streaming of the initial Landing",
    "start": "1382240",
    "end": "1387600"
  },
  {
    "text": "of the rover Curiosity on Mars so live images that were pushed from from the Rover via deep space satellite networks",
    "start": "1387600",
    "end": "1395039"
  },
  {
    "text": "all the way to NASA JPL were landing on their websites and ultimately on our desktops at the same time as the engineers were seeing it we were able to",
    "start": "1395039",
    "end": "1401919"
  },
  {
    "text": "tune in early images and early movies and so on so how did they do that and handle the demand that came out to",
    "start": "1401919",
    "end": "1408080"
  },
  {
    "text": "exceptional demand for everyone tuning in to see this thing land well they defined a template in cloud formation",
    "start": "1408080",
    "end": "1413960"
  },
  {
    "start": "1411000",
    "end": "1458000"
  },
  {
    "text": "and their stack consisted of 100 plus server instances with low balances with",
    "start": "1413960",
    "end": "1419520"
  },
  {
    "text": "DNS registrations and this was to deal with their video caching infrastructure and as they watch the load come in from",
    "start": "1419520",
    "end": "1425919"
  },
  {
    "text": "different parts of the world they use cloud formation with one click to be able to deploy and choose where they",
    "start": "1425919",
    "end": "1431240"
  },
  {
    "text": "deploy a unit of 100 plus servers anywhere in the world choosing the region the availability Zone and once",
    "start": "1431240",
    "end": "1436720"
  },
  {
    "text": "the load subit subsided they were able to then delete the stack and have those resources torn down so one guy one Mouse",
    "start": "1436720",
    "end": "1444520"
  },
  {
    "text": "one click deploying a complete stack of 100 plus servers in a few minutes and taking them away again when it was done",
    "start": "1444520",
    "end": "1451200"
  },
  {
    "text": "okay so transforming what was possible for these guys in terms of managing that amount of resources within the",
    "start": "1451200",
    "end": "1457919"
  },
  {
    "text": "cloud now you can go and get more information there's quite loads of Snippets that I mentioned online and",
    "start": "1457919",
    "end": "1463039"
  },
  {
    "text": "there's loads of full Stacks that you can go and have a look at that talk about everything from Windows server and",
    "start": "1463039",
    "end": "1468799"
  },
  {
    "text": "SharePoint through to configuring a Dynamo DB table or setting up a cloud uh",
    "start": "1468799",
    "end": "1473960"
  },
  {
    "text": "setting up a WordPress instance for example an ha configuration so if you go to cloudformation AWS cloudformation",
    "start": "1473960",
    "end": "1479799"
  },
  {
    "text": "templates you'll find them there but you can also download something called cloudformer which is an ec2 application",
    "start": "1479799",
    "end": "1485440"
  },
  {
    "text": "that you can download and run in your account and it'll have a look at what's in your account and your'll set up your security groups and all this sort of",
    "start": "1485440",
    "end": "1490799"
  },
  {
    "text": "good stuff and try and form a basis of a cloud formation template which you can",
    "start": "1490799",
    "end": "1496000"
  },
  {
    "text": "then use to fill in the gaps on so it's a useful tool if you've got a load of assets and you want to start going down",
    "start": "1496000",
    "end": "1501399"
  },
  {
    "text": "this automation route you don't want to start from scratch maybe this will give you some um guidance on how to get to where you want to",
    "start": "1501399",
    "end": "1508000"
  },
  {
    "start": "1508000",
    "end": "1594000"
  },
  {
    "text": "be now the services support are the comprehensive so we're always adding the services that we released cloud",
    "start": "1508000",
    "end": "1514399"
  },
  {
    "text": "formations so that you can template them up and wield them so everything from setting up SNS subscriptions Route 53",
    "start": "1514399",
    "end": "1521279"
  },
  {
    "text": "DNS records um setting up Cloud watch alarms or even controlling who can do",
    "start": "1521279",
    "end": "1526320"
  },
  {
    "text": "what using IM all these things are there and supported above and beyond the good old sort of meat and bones which is",
    "start": "1526320",
    "end": "1532279"
  },
  {
    "text": "elastic load balancing eect security groups Auto scaling and that sort of stuff one thing to note is that cloud",
    "start": "1532279",
    "end": "1539200"
  },
  {
    "text": "formation also supports AWS elastic Bean stalk and this is where it brings these two together in an interesting way",
    "start": "1539200",
    "end": "1544919"
  },
  {
    "text": "because if you go back to this sort of spectrum of highlevel shrink trapped versus fine grain declarative control",
    "start": "1544919",
    "end": "1551120"
  },
  {
    "text": "and we have elastic be St at one end the cloud formation the other they don't necessarily have to sit at two ends of",
    "start": "1551120",
    "end": "1556240"
  },
  {
    "text": "the spectrum they can sit close to together because with elastic Bean stalk and cloud formation you can drive the",
    "start": "1556240",
    "end": "1562159"
  },
  {
    "text": "bean stalk with cloud formation so not only can you have nice little environments they' got high level shrink",
    "start": "1562159",
    "end": "1568679"
  },
  {
    "text": "wrapped um abstractions for your developers where they can work from their ID workbench but you can put those",
    "start": "1568679",
    "end": "1574919"
  },
  {
    "text": "into a wider organizational context where everything is cloud formed and controlled and templated so you can",
    "start": "1574919",
    "end": "1579960"
  },
  {
    "text": "create developer sandboxes that are ultimately production ready infrastructure they're templated in a way that is best practice but you can",
    "start": "1579960",
    "end": "1586480"
  },
  {
    "text": "still control comprehensively all the aspects of the infrastructure so you can bring these two together in a nice way",
    "start": "1586480",
    "end": "1592080"
  },
  {
    "text": "and there's some smart things you can do with both but I mentioned also this Middle Ground which is the latest um",
    "start": "1592080",
    "end": "1597799"
  },
  {
    "start": "1594000",
    "end": "1616000"
  },
  {
    "text": "addition to the AWS product family which is AWS opsw works and this brings together The Best of Both Worlds it",
    "start": "1597799",
    "end": "1603960"
  },
  {
    "text": "gives you a high level abstraction in terms of managing application deployments and versions of applications",
    "start": "1603960",
    "end": "1609159"
  },
  {
    "text": "just like Beanstalk but it also gives you the ability to dive under the covers and get fine grain declarative",
    "start": "1609159",
    "end": "1615520"
  },
  {
    "text": "control so the components of of Ops works really start at a similar basis to",
    "start": "1615520",
    "end": "1620840"
  },
  {
    "start": "1616000",
    "end": "1706000"
  },
  {
    "text": "cloud formation that you have a stack which is your managed environment so this is a definition of environment such",
    "start": "1620840",
    "end": "1626279"
  },
  {
    "text": "as a production environment or a test environment so a stack is then comprised",
    "start": "1626279",
    "end": "1631679"
  },
  {
    "text": "of collections of resources which are organized into layers so these are a blueprint of collection of resources",
    "start": "1631679",
    "end": "1637760"
  },
  {
    "text": "that contain like ec2 instances with EBS volumes elastic IPS Associated and so on",
    "start": "1637760",
    "end": "1643039"
  },
  {
    "text": "and you might have layers that support low balancing application containers database layers and so on we then have",
    "start": "1643039",
    "end": "1650000"
  },
  {
    "text": "the application itself so like Beanstalk you deploy a package and it would deploy",
    "start": "1650000",
    "end": "1655320"
  },
  {
    "text": "into your beanock here we Define an application and where those assets should be pulled from in beanock you",
    "start": "1655320",
    "end": "1662480"
  },
  {
    "text": "might have pushed it from git in opsworks you can also get from git but you can do things like SVN or download",
    "start": "1662480",
    "end": "1669000"
  },
  {
    "text": "from S3 and then the application will ultimately deployed into a container running in one of your app players in",
    "start": "1669000",
    "end": "1676200"
  },
  {
    "text": "your stack we're also giving them the tools to manage um scaling uh cloning",
    "start": "1676200",
    "end": "1682799"
  },
  {
    "text": "how users can access these instances or not properties like self-healing which are slightly different to the way that",
    "start": "1682799",
    "end": "1688799"
  },
  {
    "text": "bean stalk and cloud formation would describe resources and these are the fundamental components in an opsw work",
    "start": "1688799",
    "end": "1695279"
  },
  {
    "text": "support and under the covers this is all driven with Chef so Chef recipes Drive",
    "start": "1695279",
    "end": "1700720"
  },
  {
    "text": "the configuration of the assets in your layers and control the deployment of your",
    "start": "1700720",
    "end": "1705799"
  },
  {
    "text": "applications so classic layers if you were producing a simple lamp stack would be low balancing application container",
    "start": "1705799",
    "end": "1711480"
  },
  {
    "start": "1706000",
    "end": "1769000"
  },
  {
    "text": "and database layer so at the bottom of the database layer we have a MySQL data base that you can Define by default we",
    "start": "1711480",
    "end": "1717480"
  },
  {
    "text": "have application containers currently supported in there uh that are templated out like static apps nodejs rails apps",
    "start": "1717480",
    "end": "1723760"
  },
  {
    "text": "or PHP and at the top we have load balancing and load balancing in Ops Works um unlike elastic Bean stalk which",
    "start": "1723760",
    "end": "1730919"
  },
  {
    "text": "is using the elastic load balancer uh load balancing an Ops Works uses ha proxy to perform an insulation an XA",
    "start": "1730919",
    "end": "1737919"
  },
  {
    "text": "proxy on an ec2 instance in an availability zone so this kind of templated sort of architecture that we",
    "start": "1737919",
    "end": "1743799"
  },
  {
    "text": "have here is that you would run an application stack um that span availability zones so that your ha proxy",
    "start": "1743799",
    "end": "1751080"
  },
  {
    "text": "insulation would occur in three availability zones say and then you would load balance using um DNS like",
    "start": "1751080",
    "end": "1757240"
  },
  {
    "text": "Route 53 across those three end points that were the roote in the proxy rout into your application containers down",
    "start": "1757240",
    "end": "1763720"
  },
  {
    "text": "below where you'd have elastic resources that were growing and shrinking in each availability",
    "start": "1763720",
    "end": "1768799"
  },
  {
    "text": "zone now you can of course Define custom layers using chef but there's also layers like mcash d that you can stick",
    "start": "1768799",
    "end": "1774760"
  },
  {
    "start": "1769000",
    "end": "1785000"
  },
  {
    "text": "in front of your dat base or you could stick a ganglia layer in there as well so you can extend these things and we'll",
    "start": "1774760",
    "end": "1780039"
  },
  {
    "text": "be adding to all these things um more and more over time as defaults inside the",
    "start": "1780039",
    "end": "1785279"
  },
  {
    "start": "1785000",
    "end": "1844000"
  },
  {
    "text": "console now Auto scaling um and auto healing are slightly different in opsw",
    "start": "1785279",
    "end": "1791480"
  },
  {
    "text": "works as they are to something like elastic beant stalk or cloud formation so Auto healing introduces is the idea",
    "start": "1791480",
    "end": "1798039"
  },
  {
    "text": "that you can have a number of resources running regardless of any scaling thresholds so if you think about an",
    "start": "1798039",
    "end": "1803720"
  },
  {
    "text": "Autos scaling group in Bean stalk or in classic AWS you would set a minimum",
    "start": "1803720",
    "end": "1808840"
  },
  {
    "text": "threshold so let's say you had three availability zones in E and you wanted to always maintain one instance in each",
    "start": "1808840",
    "end": "1815720"
  },
  {
    "text": "availability Zone here we would have three uh ec2 instances under opsw works",
    "start": "1815720",
    "end": "1821679"
  },
  {
    "text": "that were Auto healing enabled and then would always be there regardless of what happened in Beanstalk um if an instance",
    "start": "1821679",
    "end": "1828600"
  },
  {
    "text": "were to fail any sort of fundamental health checks uh the elb would detect that take that out of service the Autos",
    "start": "1828600",
    "end": "1835880"
  },
  {
    "text": "scaling group would replace that and bring it back into service inss behind the elb and this Auto healing achieves a",
    "start": "1835880",
    "end": "1842519"
  },
  {
    "text": "similar goal then there are two different types of scaling that you can apply to instances under opsw works the first is",
    "start": "1842519",
    "end": "1849240"
  },
  {
    "start": "1844000",
    "end": "1879000"
  },
  {
    "text": "you can create a time-based um scaling for instance so this would run an ec2 instance on a given schedule so similar",
    "start": "1849240",
    "end": "1855519"
  },
  {
    "text": "to setting up Auto scaling in a WS with a schedule where you can set turn instances on and off given times of the",
    "start": "1855519",
    "end": "1862200"
  },
  {
    "text": "day versus load based scaling where this will add remove instances from a layer based upon some load rules such as when",
    "start": "1862200",
    "end": "1868880"
  },
  {
    "text": "CPU goes over 80% so again this is similar to a policy using Cloud watch to",
    "start": "1868880",
    "end": "1874519"
  },
  {
    "text": "drive Autos scaling in classic ec2 or beanock so if you look at when you",
    "start": "1874519",
    "end": "1880720"
  },
  {
    "text": "create an instance under opsw works you can choose the scaling type in addition to like the instance size the",
    "start": "1880720",
    "end": "1886000"
  },
  {
    "text": "availability Zone the re and you're going to run in this on so here we have um a scaling type of 24x7 which will",
    "start": "1886000",
    "end": "1892360"
  },
  {
    "text": "always be running this will never go off so this is where you'd add for example 24x7 instance with auto healing so it",
    "start": "1892360",
    "end": "1898519"
  },
  {
    "text": "automatically kept replacing itself and then we had uh time based and load based",
    "start": "1898519",
    "end": "1904039"
  },
  {
    "start": "1904000",
    "end": "1979000"
  },
  {
    "text": "so time based and low based example shots shown here so low based at the top I've got a very simple rule here to",
    "start": "1904039",
    "end": "1910559"
  },
  {
    "text": "scale up in units of one and scale down in one and scaling up if a threshold is",
    "start": "1910559",
    "end": "1916360"
  },
  {
    "text": "exceeded for 50% CPU for greater than 1 minute so this is a pretty aggressive Rule and not something that would",
    "start": "1916360",
    "end": "1922039"
  },
  {
    "text": "normally put in production however it will scale up aggressively and then it will ignore any other future events for",
    "start": "1922039",
    "end": "1928880"
  },
  {
    "text": "5 minutes after scaling up so I can scale up aggressively using that rule scale down is slightly slower here so",
    "start": "1928880",
    "end": "1934679"
  },
  {
    "text": "I've got scale down in one if the threshold of less than 30% of CPU is",
    "start": "1934679",
    "end": "1941639"
  },
  {
    "text": "Achieve for 10 minutes and then I'll ignore any other actions for 10 minutes so scale of progressively scale down",
    "start": "1941639",
    "end": "1946799"
  },
  {
    "text": "slow simple load based PHP app server rule here for my app time based on this",
    "start": "1946799",
    "end": "1953000"
  },
  {
    "text": "instance uh name here I can set times hours in the day where this instance will run versus not so every day this",
    "start": "1953000",
    "end": "1959600"
  },
  {
    "text": "instance will start at 7: a.m. and it will stop at uh 7 p.m. UTC so I can set",
    "start": "1959600",
    "end": "1965799"
  },
  {
    "text": "a time base rule across the top of my instances as well and I can mix and match all these different instance sites so I can have some of the 24x7 some of",
    "start": "1965799",
    "end": "1972720"
  },
  {
    "text": "the load based some of the time based and as such I can layer up those sort of aut a scaling",
    "start": "1972720",
    "end": "1978880"
  },
  {
    "text": "policies when I get an app I'm going to choose where I'm going to get it from so I Define an application type and here",
    "start": "1978880",
    "end": "1985120"
  },
  {
    "text": "I've got a PHP app that I might get from git just as easily I could pull it from subversion or I could grab something say",
    "start": "1985120",
    "end": "1992320"
  },
  {
    "text": "from S3 so I've got an S3 bundle here defined which is um a zip file of a PHP",
    "start": "1992320",
    "end": "1999000"
  },
  {
    "text": "application sitting in my S3 bucket um and you provide your access key secret key and it go off to s3e and get it",
    "start": "1999000",
    "end": "2005279"
  },
  {
    "text": "incidentally that application there is the same one I've used in my ec2 masterclass demonstrations that are on YouTube if you want to go and grab",
    "start": "2005279",
    "end": "2013080"
  },
  {
    "start": "2013000",
    "end": "2028000"
  },
  {
    "text": "it um you can then do deployment operations like deploy you could undeploy an application you could",
    "start": "2013080",
    "end": "2019120"
  },
  {
    "text": "restart the web servers all of these things surrounding the application tier of your simple application in this case",
    "start": "2019120",
    "end": "2025559"
  },
  {
    "text": "my app defined as a PHP app now under the covers all of this is",
    "start": "2025559",
    "end": "2030639"
  },
  {
    "start": "2028000",
    "end": "2079000"
  },
  {
    "text": "running as Chef recipes and shown here are some of the default recipes for my PHP app player so I've got some maybe",
    "start": "2030639",
    "end": "2037279"
  },
  {
    "text": "deploy uh recipes there deploy PHP that will go off and grab my resources from",
    "start": "2037279",
    "end": "2042519"
  },
  {
    "text": "S3 and push them across any nose that are running in the app tier likewise I got configure there that will go off and",
    "start": "2042519",
    "end": "2048200"
  },
  {
    "text": "do mod PHP 5 setup on Apache or go and configure some php. in properties for",
    "start": "2048200",
    "end": "2054398"
  },
  {
    "text": "this particular instance now I got my startup deploy shutdowns and so on the point is that you can go in and",
    "start": "2054399",
    "end": "2060240"
  },
  {
    "text": "configure your cookbooks and add recipes to do any configuration you like and rather than you go in and configuring",
    "start": "2060240",
    "end": "2067000"
  },
  {
    "text": "via maybe traditional bootstrapping and user data on instances you do it all via Chef recipes here so that's how you",
    "start": "2067000",
    "end": "2074240"
  },
  {
    "text": "configure resources underneath AWS opsworks so in summary um it's all about",
    "start": "2074240",
    "end": "2081679"
  },
  {
    "start": "2079000",
    "end": "2111000"
  },
  {
    "text": "getting started fast with beant stalk um and giving your developers a way to use a model environment but keep control of",
    "start": "2081679",
    "end": "2088240"
  },
  {
    "text": "the chaos because all of these are templated model environments and you can take fine grain control of the under Spectrum with cloud formation where you",
    "start": "2088240",
    "end": "2094760"
  },
  {
    "text": "can create auditable environmental spec with these templates and in the middle we have the ability to manage layers of",
    "start": "2094760",
    "end": "2102119"
  },
  {
    "text": "abstraction with recipes of Chef to be able to Define more complex configuration and resources so control",
    "start": "2102119",
    "end": "2108359"
  },
  {
    "text": "with Chef customization using opsworks now you can find out more at slban stcloud for/ opsworks there's a",
    "start": "2108359",
    "end": "2116280"
  },
  {
    "start": "2111000",
    "end": "2157000"
  },
  {
    "text": "wealth of information in there and in the user guides you'll often find a getting started and Sample applications",
    "start": "2116280",
    "end": "2121720"
  },
  {
    "text": "so you can get started and have a go with this stuff really easily and you can have a go with it under the fre tier so things like Beanstalk you don't pay",
    "start": "2121720",
    "end": "2128640"
  },
  {
    "text": "for the underlying resources so if things like Beanstalk you don't pay for the Beanstalk",
    "start": "2128640",
    "end": "2134359"
  },
  {
    "text": "framework you only pay for the underlying resources used so if you're new and you haven't set up account you can set up an account and for the first",
    "start": "2134359",
    "end": "2140560"
  },
  {
    "text": "year you'll access a bunch of things inside AWS free so a great place to get started and try out some of those",
    "start": "2140560",
    "end": "2146240"
  },
  {
    "text": "resources so once again thanks for joining me for this webinar and see you all",
    "start": "2146240",
    "end": "2151319"
  },
  {
    "text": "soon so once again thank you very much as always find out more at aws.amazon.com",
    "start": "2151319",
    "end": "2157839"
  }
]