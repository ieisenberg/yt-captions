[
  {
    "start": "0",
    "end": "17000"
  },
  {
    "text": "now let's take a look at you know some",
    "start": "6560",
    "end": "10230"
  },
  {
    "text": "best practices that may help you when",
    "start": "10230",
    "end": "13320"
  },
  {
    "text": "you're implementing DynamoDB solutions",
    "start": "13320",
    "end": "16590"
  },
  {
    "text": "the first is something that we saw a",
    "start": "16590",
    "end": "18449"
  },
  {
    "start": "17000",
    "end": "93000"
  },
  {
    "text": "little bit earlier with the device ID",
    "start": "18449",
    "end": "20910"
  },
  {
    "text": "and and time and so on so imagine that",
    "start": "20910",
    "end": "24660"
  },
  {
    "text": "you're trying to store time series data",
    "start": "24660",
    "end": "27769"
  },
  {
    "text": "okay and so a good example of this is",
    "start": "27769",
    "end": "30990"
  },
  {
    "text": "event logging so a time series data",
    "start": "30990",
    "end": "33059"
  },
  {
    "text": "you're capturing something that happens",
    "start": "33059",
    "end": "34890"
  },
  {
    "text": "at a given time okay and generally it",
    "start": "34890",
    "end": "38040"
  },
  {
    "text": "tends to run from very hot data meaning",
    "start": "38040",
    "end": "40469"
  },
  {
    "text": "it's very valuable very useful and over",
    "start": "40469",
    "end": "43200"
  },
  {
    "text": "time the hotness the temperature of that",
    "start": "43200",
    "end": "45960"
  },
  {
    "text": "data tends to decrease so the latest",
    "start": "45960",
    "end": "48629"
  },
  {
    "text": "data may be the hottest and the oldest",
    "start": "48629",
    "end": "51180"
  },
  {
    "text": "data will be the coldest and the least",
    "start": "51180",
    "end": "53190"
  },
  {
    "text": "useful and so one of the things that you",
    "start": "53190",
    "end": "56699"
  },
  {
    "text": "should design for is not to mix hot and",
    "start": "56699",
    "end": "61500"
  },
  {
    "text": "cold data why because with dynamo you",
    "start": "61500",
    "end": "64830"
  },
  {
    "text": "have the ability to assign specific",
    "start": "64830",
    "end": "67220"
  },
  {
    "text": "throughput capacity requirements to a",
    "start": "67220",
    "end": "69659"
  },
  {
    "text": "table and so if you have data that",
    "start": "69659",
    "end": "72510"
  },
  {
    "text": "requires a high level of throughput you",
    "start": "72510",
    "end": "74750"
  },
  {
    "text": "can create a table that supports that if",
    "start": "74750",
    "end": "77909"
  },
  {
    "text": "you have older data that requires less",
    "start": "77909",
    "end": "80369"
  },
  {
    "text": "you can have a table with lower",
    "start": "80369",
    "end": "83280"
  },
  {
    "text": "requirements this translates to lower",
    "start": "83280",
    "end": "86040"
  },
  {
    "text": "cost so your cost optimizing based on",
    "start": "86040",
    "end": "89939"
  },
  {
    "text": "the mix of data that your application",
    "start": "89939",
    "end": "92369"
  },
  {
    "text": "needs to support let's go on to the",
    "start": "92369",
    "end": "94079"
  },
  {
    "start": "93000",
    "end": "336000"
  },
  {
    "text": "second scenario and that is how do you",
    "start": "94079",
    "end": "97040"
  },
  {
    "text": "optimally query for large items so we'll",
    "start": "97040",
    "end": "100110"
  },
  {
    "text": "use a messaging app as the use case here",
    "start": "100110",
    "end": "102770"
  },
  {
    "text": "messaging apps are popping up everywhere",
    "start": "102770",
    "end": "105390"
  },
  {
    "text": "either standalone messaging apps or it",
    "start": "105390",
    "end": "107280"
  },
  {
    "text": "can be part of a social network it could",
    "start": "107280",
    "end": "110670"
  },
  {
    "text": "be part of a online game and so on okay",
    "start": "110670",
    "end": "113909"
  },
  {
    "text": "so let's take this use case you have a",
    "start": "113909",
    "end": "116310"
  },
  {
    "text": "messaging platform and you want to",
    "start": "116310",
    "end": "119009"
  },
  {
    "text": "display the inbox and so the most",
    "start": "119009",
    "end": "121079"
  },
  {
    "text": "obvious way to implement this is to have",
    "start": "121079",
    "end": "122729"
  },
  {
    "text": "a messages table the message table will",
    "start": "122729",
    "end": "124799"
  },
  {
    "text": "contain the subject the recipient the",
    "start": "124799",
    "end": "127619"
  },
  {
    "text": "send",
    "start": "127619",
    "end": "128099"
  },
  {
    "text": "and the subject body and so now when we",
    "start": "128099",
    "end": "131730"
  },
  {
    "text": "want to display the inbox we issue a",
    "start": "131730",
    "end": "133769"
  },
  {
    "text": "query such as this this happens to be",
    "start": "133769",
    "end": "135510"
  },
  {
    "text": "sequel just using this for example but",
    "start": "135510",
    "end": "137639"
  },
  {
    "text": "this is not how you issue a query in",
    "start": "137639",
    "end": "138989"
  },
  {
    "text": "secret and Dunwoody but basically you",
    "start": "138989",
    "end": "141989"
  },
  {
    "text": "issue this query select all the messages",
    "start": "141989",
    "end": "143879"
  },
  {
    "text": "where the recipient is david and limit",
    "start": "143879",
    "end": "147000"
  },
  {
    "text": "by 50 you order by date descending okay",
    "start": "147000",
    "end": "149639"
  },
  {
    "text": "and then you do something now for the",
    "start": "149639",
    "end": "151769"
  },
  {
    "text": "sent items table okay",
    "start": "151769",
    "end": "153810"
  },
  {
    "text": "so pretty straightforward now here's the",
    "start": "153810",
    "end": "157439"
  },
  {
    "text": "table the messages table it has a",
    "start": "157439",
    "end": "159389"
  },
  {
    "text": "partition key of recipient and has a",
    "start": "159389",
    "end": "161700"
  },
  {
    "text": "sort key of date imagine that each item",
    "start": "161700",
    "end": "165090"
  },
  {
    "text": "is 256 kilobytes and you want to show 50",
    "start": "165090",
    "end": "170219"
  },
  {
    "text": "items in the inbox and 50 items in sent",
    "start": "170219",
    "end": "172799"
  },
  {
    "text": "items okay so what does that translate",
    "start": "172799",
    "end": "175709"
  },
  {
    "text": "to that translate to about 1600 are see",
    "start": "175709",
    "end": "179040"
  },
  {
    "text": "use per user every time you want to",
    "start": "179040",
    "end": "181709"
  },
  {
    "text": "display the inbox or sent items 1600 in",
    "start": "181709",
    "end": "186150"
  },
  {
    "text": "and of itself is not a big deal but at",
    "start": "186150",
    "end": "189900"
  },
  {
    "text": "scale that could turn out to be a lot of",
    "start": "189900",
    "end": "192000"
  },
  {
    "text": "hours to use that you simply don't need",
    "start": "192000",
    "end": "193620"
  },
  {
    "text": "why is that",
    "start": "193620",
    "end": "195000"
  },
  {
    "text": "well you know when you display an inbox",
    "start": "195000",
    "end": "197009"
  },
  {
    "text": "you just want to show the metadata to",
    "start": "197009",
    "end": "199290"
  },
  {
    "text": "the to the user and the subject bought",
    "start": "199290",
    "end": "202379"
  },
  {
    "text": "and the message bodies not really",
    "start": "202379",
    "end": "203790"
  },
  {
    "text": "required until they click on it when",
    "start": "203790",
    "end": "205560"
  },
  {
    "text": "they click on an email message you can",
    "start": "205560",
    "end": "207359"
  },
  {
    "text": "then go fetch the actual message body",
    "start": "207359",
    "end": "210120"
  },
  {
    "text": "and display that but the way that the",
    "start": "210120",
    "end": "212759"
  },
  {
    "text": "table is organized now the message body",
    "start": "212759",
    "end": "215819"
  },
  {
    "text": "is one of the attributes of that table",
    "start": "215819",
    "end": "218970"
  },
  {
    "text": "so every time you do a read you're doing",
    "start": "218970",
    "end": "221669"
  },
  {
    "text": "a read for the entire item including the",
    "start": "221669",
    "end": "224099"
  },
  {
    "text": "message body which you may or may not",
    "start": "224099",
    "end": "225870"
  },
  {
    "text": "need to show okay and so what we do is",
    "start": "225870",
    "end": "228959"
  },
  {
    "text": "we can partition this table and this is",
    "start": "228959",
    "end": "232139"
  },
  {
    "text": "a technique that's been used for years",
    "start": "232139",
    "end": "233459"
  },
  {
    "text": "for relational databases or other no",
    "start": "233459",
    "end": "236099"
  },
  {
    "text": "sequel databases and the idea here is to",
    "start": "236099",
    "end": "238439"
  },
  {
    "text": "separate the large attributes from the",
    "start": "238439",
    "end": "241769"
  },
  {
    "text": "smaller ones okay so now we have a",
    "start": "241769",
    "end": "245129"
  },
  {
    "text": "messages table that contains the message",
    "start": "245129",
    "end": "247139"
  },
  {
    "text": "body as well as all the other attributes",
    "start": "247139",
    "end": "249659"
  },
  {
    "text": "but we have an inbox GSI okay the inbox",
    "start": "249659",
    "end": "254729"
  },
  {
    "text": "GSI just contains the metadata for a",
    "start": "254729",
    "end": "257909"
  },
  {
    "text": "particular email including a recipient a",
    "start": "257909",
    "end": "260130"
  },
  {
    "text": "sender subject and then it also contains",
    "start": "260130",
    "end": "262770"
  },
  {
    "text": "a message ID which will index back into",
    "start": "262770",
    "end": "265320"
  },
  {
    "text": "the actual body of the message okay so",
    "start": "265320",
    "end": "267930"
  },
  {
    "text": "now we can display the inbox by",
    "start": "267930",
    "end": "270360"
  },
  {
    "text": "basically using one RCU or a few RC use",
    "start": "270360",
    "end": "273660"
  },
  {
    "text": "way less than 1600 RC use showing how",
    "start": "273660",
    "end": "278430"
  },
  {
    "text": "the GS eyes look in dynamo DB again",
    "start": "278430",
    "end": "282060"
  },
  {
    "text": "pretty straightforward you set up inbox",
    "start": "282060",
    "end": "283680"
  },
  {
    "text": "and send items you specify the partition",
    "start": "283680",
    "end": "286740"
  },
  {
    "text": "key the sort key and then the attributes",
    "start": "286740",
    "end": "289290"
  },
  {
    "text": "that you want projected and DynamoDB",
    "start": "289290",
    "end": "292200"
  },
  {
    "text": "basically creates a parallel table for",
    "start": "292200",
    "end": "294000"
  },
  {
    "text": "you and so now when you want to display",
    "start": "294000",
    "end": "295950"
  },
  {
    "text": "the inbox or send items you query the",
    "start": "295950",
    "end": "299640"
  },
  {
    "text": "inbox GSI or you query the sent items",
    "start": "299640",
    "end": "302280"
  },
  {
    "text": "GSI items again pretty straightforward",
    "start": "302280",
    "end": "305010"
  },
  {
    "text": "you simply select all the messages where",
    "start": "305010",
    "end": "306810"
  },
  {
    "text": "the sender is David limit by 50 so now",
    "start": "306810",
    "end": "308940"
  },
  {
    "text": "this is a much better way to model your",
    "start": "308940",
    "end": "312840"
  },
  {
    "text": "messaging application than what we had",
    "start": "312840",
    "end": "314730"
  },
  {
    "text": "before so here we have main messages",
    "start": "314730",
    "end": "316950"
  },
  {
    "text": "table which contains the largest items",
    "start": "316950",
    "end": "318780"
  },
  {
    "text": "lesson here is that you want to",
    "start": "318780",
    "end": "320790"
  },
  {
    "text": "distribute or basically separate your",
    "start": "320790",
    "end": "323070"
  },
  {
    "text": "large items or attributes from the",
    "start": "323070",
    "end": "326310"
  },
  {
    "text": "smaller ones when you do this you can",
    "start": "326310",
    "end": "328050"
  },
  {
    "text": "save a lot of you know RC use and GSIS",
    "start": "328050",
    "end": "331740"
  },
  {
    "text": "will help you model the sort of the many",
    "start": "331740",
    "end": "333810"
  },
  {
    "text": "de mini relationship that you saw here",
    "start": "333810",
    "end": "336330"
  },
  {
    "start": "336000",
    "end": "586000"
  },
  {
    "text": "the scenario that we'll use here is",
    "start": "336330",
    "end": "338400"
  },
  {
    "text": "multiplayer online gaming so imagine",
    "start": "338400",
    "end": "342240"
  },
  {
    "text": "that you have a games table which is",
    "start": "342240",
    "end": "346080"
  },
  {
    "text": "partitioned on game ID and so what I",
    "start": "346080",
    "end": "349290"
  },
  {
    "text": "want to do is I want to see all the",
    "start": "349290",
    "end": "351690"
  },
  {
    "text": "games where Bob is the opponent and",
    "start": "351690",
    "end": "355620"
  },
  {
    "text": "where the games are in progress and so",
    "start": "355620",
    "end": "358920"
  },
  {
    "text": "with this table that query becomes a",
    "start": "358920",
    "end": "363270"
  },
  {
    "text": "little bit more complex that it needs to",
    "start": "363270",
    "end": "364800"
  },
  {
    "text": "be the issue here is that you know with",
    "start": "364800",
    "end": "366780"
  },
  {
    "text": "dynamo it provides a partition and a",
    "start": "366780",
    "end": "369270"
  },
  {
    "text": "sort but you know if you want to do",
    "start": "369270",
    "end": "371640"
  },
  {
    "text": "query for some other items that are not",
    "start": "371640",
    "end": "373950"
  },
  {
    "text": "part of the opportunity to sort how do",
    "start": "373950",
    "end": "375660"
  },
  {
    "text": "you do it and how do you do it",
    "start": "375660",
    "end": "376710"
  },
  {
    "text": "efficiently well the answer again is to",
    "start": "376710",
    "end": "379740"
  },
  {
    "text": "use a GSI and here what we'll do is",
    "start": "379740",
    "end": "382380"
  },
  {
    "text": "we'll create another table where we have",
    "start": "382380",
    "end": "385520"
  },
  {
    "text": "opponent as the partition key and date",
    "start": "385520",
    "end": "389130"
  },
  {
    "text": "as the sort key so now we can get all",
    "start": "389130",
    "end": "392970"
  },
  {
    "text": "the",
    "start": "392970",
    "end": "393330"
  },
  {
    "text": "items where Bob is the opponent right",
    "start": "393330",
    "end": "396449"
  },
  {
    "text": "and then we can just filter out the ones",
    "start": "396449",
    "end": "399479"
  },
  {
    "text": "that we need in this case what we want",
    "start": "399479",
    "end": "402479"
  },
  {
    "text": "to do is we want to filter on status",
    "start": "402479",
    "end": "404129"
  },
  {
    "text": "where status equals pending okay and",
    "start": "404129",
    "end": "407310"
  },
  {
    "text": "this works pretty well when we use this",
    "start": "407310",
    "end": "410340"
  },
  {
    "text": "technique what happens is the filtering",
    "start": "410340",
    "end": "412319"
  },
  {
    "text": "happens on the dynamo side and so dynamo",
    "start": "412319",
    "end": "416219"
  },
  {
    "text": "read three items you'll be charged for",
    "start": "416219",
    "end": "419280"
  },
  {
    "text": "three SARC use but it filtered out one",
    "start": "419280",
    "end": "424110"
  },
  {
    "text": "of the items the third one in this",
    "start": "424110",
    "end": "425550"
  },
  {
    "text": "example and it only sends back two so it",
    "start": "425550",
    "end": "428280"
  },
  {
    "text": "sends back less data it'll simplify your",
    "start": "428280",
    "end": "430500"
  },
  {
    "text": "application code because it's less",
    "start": "430500",
    "end": "432090"
  },
  {
    "text": "filtering that you have in your code",
    "start": "432090",
    "end": "433379"
  },
  {
    "text": "here we have a very simple example but",
    "start": "433379",
    "end": "436080"
  },
  {
    "text": "imagine that this query generated",
    "start": "436080",
    "end": "438539"
  },
  {
    "text": "instead of three rows or three items it",
    "start": "438539",
    "end": "441120"
  },
  {
    "text": "generated three thousand and then it",
    "start": "441120",
    "end": "444569"
  },
  {
    "text": "filters out to maybe just three hundred",
    "start": "444569",
    "end": "447900"
  },
  {
    "text": "so in terms of efficiency if your index",
    "start": "447900",
    "end": "450419"
  },
  {
    "text": "isn't entirely selective you may want to",
    "start": "450419",
    "end": "452819"
  },
  {
    "text": "use a different technique and that is",
    "start": "452819",
    "end": "454740"
  },
  {
    "text": "the composite key with the composite key",
    "start": "454740",
    "end": "457469"
  },
  {
    "text": "what you do is you take two attributes",
    "start": "457469",
    "end": "459569"
  },
  {
    "text": "in this case status and date and you",
    "start": "459569",
    "end": "462419"
  },
  {
    "text": "concatenate them into a new attribute",
    "start": "462419",
    "end": "464669"
  },
  {
    "text": "known as status date with status date",
    "start": "464669",
    "end": "467699"
  },
  {
    "text": "what we have is a secondary index very",
    "start": "467699",
    "end": "470430"
  },
  {
    "text": "similar to the one we saw earlier where",
    "start": "470430",
    "end": "472650"
  },
  {
    "text": "we have opponent as the partition key",
    "start": "472650",
    "end": "474779"
  },
  {
    "text": "now status date as a sword key now with",
    "start": "474779",
    "end": "478650"
  },
  {
    "text": "this in place what we can do is we can",
    "start": "478650",
    "end": "480569"
  },
  {
    "text": "issue this query that says give me all",
    "start": "480569",
    "end": "483330"
  },
  {
    "text": "the games where Bob is the opponent and",
    "start": "483330",
    "end": "486319"
  },
  {
    "text": "status date begins with pending okay",
    "start": "486319",
    "end": "490319"
  },
  {
    "text": "this will give us exactly the data that",
    "start": "490319",
    "end": "492870"
  },
  {
    "text": "we want and so the reason it does that",
    "start": "492870",
    "end": "494819"
  },
  {
    "text": "is because well you know the status is",
    "start": "494819",
    "end": "496949"
  },
  {
    "text": "sorted by state and then it's sorted by",
    "start": "496949",
    "end": "499949"
  },
  {
    "text": "the actual date itself another feature",
    "start": "499949",
    "end": "503879"
  },
  {
    "text": "you may want to take advantage of is",
    "start": "503879",
    "end": "505440"
  },
  {
    "text": "sparse indexes so imagine that you have",
    "start": "505440",
    "end": "508919"
  },
  {
    "text": "a game scores table out of those",
    "start": "508919",
    "end": "511050"
  },
  {
    "text": "millions of items which are gamers",
    "start": "511050",
    "end": "514190"
  },
  {
    "text": "there's a small subset who have received",
    "start": "514190",
    "end": "517560"
  },
  {
    "text": "awards and you need to display all the",
    "start": "517560",
    "end": "521099"
  },
  {
    "text": "users that are received awards if you",
    "start": "521099",
    "end": "525240"
  },
  {
    "text": "just had this table that would be",
    "start": "525240",
    "end": "527370"
  },
  {
    "text": "very tedious thing to do because you",
    "start": "527370",
    "end": "529560"
  },
  {
    "text": "simply can't filter on on Awards by",
    "start": "529560",
    "end": "532260"
  },
  {
    "text": "itself okay so what we recommend is that",
    "start": "532260",
    "end": "535170"
  },
  {
    "text": "you create in Awards GSI where the",
    "start": "535170",
    "end": "538350"
  },
  {
    "text": "partition key is award when you do that",
    "start": "538350",
    "end": "541860"
  },
  {
    "text": "the GSI will only contain the items",
    "start": "541860",
    "end": "545820"
  },
  {
    "text": "where there is a value for the attribute",
    "start": "545820",
    "end": "550410"
  },
  {
    "text": "award so it's a sparse index so now when",
    "start": "550410",
    "end": "554040"
  },
  {
    "text": "you want to show all the users that have",
    "start": "554040",
    "end": "555570"
  },
  {
    "text": "won awards you simply scan the awards",
    "start": "555570",
    "end": "557880"
  },
  {
    "text": "GSI and bam there you have it",
    "start": "557880",
    "end": "559980"
  },
  {
    "text": "so it's a very efficient way to get at",
    "start": "559980",
    "end": "562200"
  },
  {
    "text": "that data you can certainly filter use",
    "start": "562200",
    "end": "564480"
  },
  {
    "text": "the filter operator to get at data that",
    "start": "564480",
    "end": "567480"
  },
  {
    "text": "may not be in a highly selective index",
    "start": "567480",
    "end": "569720"
  },
  {
    "text": "you can take advantage of composite keys",
    "start": "569720",
    "end": "573029"
  },
  {
    "text": "and you know concatenate two attributes",
    "start": "573029",
    "end": "575670"
  },
  {
    "text": "to get a composite key that can give you",
    "start": "575670",
    "end": "578670"
  },
  {
    "text": "much higher selectivity okay and use",
    "start": "578670",
    "end": "581970"
  },
  {
    "text": "other of these techniques when you",
    "start": "581970",
    "end": "583050"
  },
  {
    "text": "optimize the query as much as possible",
    "start": "583050",
    "end": "585900"
  },
  {
    "text": "earlier we talked about the problem of",
    "start": "585900",
    "end": "588240"
  },
  {
    "start": "586000",
    "end": "772000"
  },
  {
    "text": "heavy reads what about heavy writes so",
    "start": "588240",
    "end": "592650"
  },
  {
    "text": "imagine that you're going to implement",
    "start": "592650",
    "end": "594570"
  },
  {
    "text": "an app that may be supporting an",
    "start": "594570",
    "end": "597180"
  },
  {
    "text": "election or maybe you're supporting a",
    "start": "597180",
    "end": "598740"
  },
  {
    "text": "game show where you you know contestants",
    "start": "598740",
    "end": "601410"
  },
  {
    "text": "are voted on to be the winner",
    "start": "601410",
    "end": "603959"
  },
  {
    "text": "now here's what your dynamodb tables",
    "start": "603959",
    "end": "606150"
  },
  {
    "text": "look like you have you know many",
    "start": "606150",
    "end": "609120"
  },
  {
    "text": "different candidates but with any",
    "start": "609120",
    "end": "611160"
  },
  {
    "text": "election you know you have a number of",
    "start": "611160",
    "end": "613410"
  },
  {
    "text": "candidates but usually only a small",
    "start": "613410",
    "end": "616140"
  },
  {
    "text": "subset of them will actually get the",
    "start": "616140",
    "end": "617520"
  },
  {
    "text": "majority of votes so here we have a",
    "start": "617520",
    "end": "620010"
  },
  {
    "text": "table that it's provisioned with two",
    "start": "620010",
    "end": "622140"
  },
  {
    "text": "hundred thousand right capacity units",
    "start": "622140",
    "end": "624240"
  },
  {
    "text": "okay but what we're seeing in reality is",
    "start": "624240",
    "end": "627570"
  },
  {
    "text": "that all the votes nearly all the votes",
    "start": "627570",
    "end": "630810"
  },
  {
    "text": "are going to two candidates Canada is",
    "start": "630810",
    "end": "633270"
  },
  {
    "text": "getting seventy thousand rights per",
    "start": "633270",
    "end": "635160"
  },
  {
    "text": "second in Canada B is getting fifty",
    "start": "635160",
    "end": "636750"
  },
  {
    "text": "thousand bytes per second the rest are",
    "start": "636750",
    "end": "638400"
  },
  {
    "text": "not seeing much action at all so what do",
    "start": "638400",
    "end": "640620"
  },
  {
    "text": "we do about this well we're gonna use a",
    "start": "640620",
    "end": "642810"
  },
  {
    "text": "well-worn technique that has been proven",
    "start": "642810",
    "end": "645330"
  },
  {
    "text": "to scale to billions of Rights per",
    "start": "645330",
    "end": "648390"
  },
  {
    "text": "second and that is basically right",
    "start": "648390",
    "end": "650580"
  },
  {
    "text": "sharding with y sharding instead of",
    "start": "650580",
    "end": "653100"
  },
  {
    "text": "writing to a single table you'll write",
    "start": "653100",
    "end": "655230"
  },
  {
    "text": "to many tables so in the case of",
    "start": "655230",
    "end": "657209"
  },
  {
    "text": "candidate a",
    "start": "657209",
    "end": "658470"
  },
  {
    "text": "you can create a small set of tables for",
    "start": "658470",
    "end": "661890"
  },
  {
    "text": "candidate a so when a vote comes in for",
    "start": "661890",
    "end": "664740"
  },
  {
    "text": "candidate a what your application will",
    "start": "664740",
    "end": "667050"
  },
  {
    "text": "do is it'll select a table for candidate",
    "start": "667050",
    "end": "669930"
  },
  {
    "text": "a based on our random suffix so the",
    "start": "669930",
    "end": "673050"
  },
  {
    "text": "random suffix in this case is gonna be a",
    "start": "673050",
    "end": "674910"
  },
  {
    "text": "range of numbers from 1 to 8 will",
    "start": "674910",
    "end": "677190"
  },
  {
    "text": "already have tables that span for",
    "start": "677190",
    "end": "680130"
  },
  {
    "text": "kanaday from 1 to 8 and so your",
    "start": "680130",
    "end": "681990"
  },
  {
    "text": "application will pick a random table",
    "start": "681990",
    "end": "684120"
  },
  {
    "text": "it'll write to that table and then you",
    "start": "684120",
    "end": "686820"
  },
  {
    "text": "know if you provision enough write",
    "start": "686820",
    "end": "688290"
  },
  {
    "text": "capacity units for all these tables you",
    "start": "688290",
    "end": "690570"
  },
  {
    "text": "can easily support a very high level of",
    "start": "690570",
    "end": "693390"
  },
  {
    "text": "throughput for that particular candidate",
    "start": "693390",
    "end": "695610"
  },
  {
    "text": "you give you the same thing for other",
    "start": "695610",
    "end": "696900"
  },
  {
    "text": "candidates as well so this will enable",
    "start": "696900",
    "end": "698820"
  },
  {
    "text": "you to scale the writes to a huge level",
    "start": "698820",
    "end": "702630"
  },
  {
    "text": "of throughput the caveat here though is",
    "start": "702630",
    "end": "705420"
  },
  {
    "text": "that now your reads become a little bit",
    "start": "705420",
    "end": "707520"
  },
  {
    "text": "more complex that's because with any",
    "start": "707520",
    "end": "709980"
  },
  {
    "text": "sort of voting system or any scenario",
    "start": "709980",
    "end": "711570"
  },
  {
    "text": "like this you want to know at any given",
    "start": "711570",
    "end": "713190"
  },
  {
    "text": "time who's the leading vote-getter and",
    "start": "713190",
    "end": "717000"
  },
  {
    "text": "so if you had a single table that's easy",
    "start": "717000",
    "end": "719340"
  },
  {
    "text": "to figure out but now you have multiple",
    "start": "719340",
    "end": "721530"
  },
  {
    "text": "tables and so what you'll need is a",
    "start": "721530",
    "end": "723930"
  },
  {
    "text": "process that will scan if this is sort",
    "start": "723930",
    "end": "727500"
  },
  {
    "text": "of a scatter gather picnic where your",
    "start": "727500",
    "end": "729420"
  },
  {
    "text": "little scan a bunch of tables and",
    "start": "729420",
    "end": "731180"
  },
  {
    "text": "aggregate that data into a table such as",
    "start": "731180",
    "end": "736140"
  },
  {
    "text": "the votes table okay and so you need to",
    "start": "736140",
    "end": "739560"
  },
  {
    "text": "do this periodically so you can get you",
    "start": "739560",
    "end": "740880"
  },
  {
    "text": "know real-time updates but basically",
    "start": "740880",
    "end": "742860"
  },
  {
    "text": "what you're doing is you are trading off",
    "start": "742860",
    "end": "745470"
  },
  {
    "text": "read cost and if for right scalability",
    "start": "745470",
    "end": "747990"
  },
  {
    "text": "and this is important because you know",
    "start": "747990",
    "end": "750000"
  },
  {
    "text": "if you go back to what we talked about",
    "start": "750000",
    "end": "751080"
  },
  {
    "text": "earlier when you provision WCU's it is",
    "start": "751080",
    "end": "754890"
  },
  {
    "text": "for the entire table it's not for",
    "start": "754890",
    "end": "757230"
  },
  {
    "text": "partition per partition",
    "start": "757230",
    "end": "759000"
  },
  {
    "text": "it's equal among the partitions okay and",
    "start": "759000",
    "end": "762480"
  },
  {
    "text": "so if you're seeing a hot partition when",
    "start": "762480",
    "end": "764220"
  },
  {
    "text": "it comes to writes you'll have to use a",
    "start": "764220",
    "end": "765870"
  },
  {
    "text": "technique such as this to mitigate that",
    "start": "765870",
    "end": "768420"
  },
  {
    "text": "and ensure that your tables can support",
    "start": "768420",
    "end": "770790"
  },
  {
    "text": "the rights that you need so those are",
    "start": "770790",
    "end": "772380"
  },
  {
    "start": "772000",
    "end": "802000"
  },
  {
    "text": "some of the techniques that we've seen",
    "start": "772380",
    "end": "773700"
  },
  {
    "text": "work again and again with many of our",
    "start": "773700",
    "end": "776760"
  },
  {
    "text": "customers and so definitely take those",
    "start": "776760",
    "end": "778950"
  },
  {
    "text": "into account when you're designing your",
    "start": "778950",
    "end": "780930"
  },
  {
    "text": "dynamodb applications so with that let",
    "start": "780930",
    "end": "784350"
  },
  {
    "text": "me dive into a feature of dynamo DB that",
    "start": "784350",
    "end": "787380"
  },
  {
    "text": "enables a whole bunch of other",
    "start": "787380",
    "end": "789260"
  },
  {
    "text": "capabilities and that is stream",
    "start": "789260",
    "end": "792660"
  },
  {
    "text": "what done about DB streams you get a",
    "start": "792660",
    "end": "795720"
  },
  {
    "text": "change log of any modifications to your",
    "start": "795720",
    "end": "798119"
  },
  {
    "text": "table these modifications are captured",
    "start": "798119",
    "end": "800309"
  },
  {
    "text": "in the stream",
    "start": "800309",
    "end": "800999"
  },
  {
    "text": "they are asynchronous so whenever a",
    "start": "800999",
    "end": "803249"
  },
  {
    "start": "802000",
    "end": "853000"
  },
  {
    "text": "change is made to a table it's captured",
    "start": "803249",
    "end": "805439"
  },
  {
    "text": "asynchronously in the stream the change",
    "start": "805439",
    "end": "807989"
  },
  {
    "text": "is captured exactly once and it is",
    "start": "807989",
    "end": "811079"
  },
  {
    "text": "strictly ordered at the item level okay",
    "start": "811079",
    "end": "814350"
  },
  {
    "text": "and the change is available to you for",
    "start": "814350",
    "end": "816779"
  },
  {
    "text": "24 hours to read and process and do with",
    "start": "816779",
    "end": "820259"
  },
  {
    "text": "it what you would like you don't have to",
    "start": "820259",
    "end": "823079"
  },
  {
    "text": "worry about the durability of the stream",
    "start": "823079",
    "end": "826019"
  },
  {
    "text": "or the scalability of the stream it's",
    "start": "826019",
    "end": "827699"
  },
  {
    "text": "all taken care of for you by dynamo and",
    "start": "827699",
    "end": "830819"
  },
  {
    "text": "and Kinesis which is a product you may",
    "start": "830819",
    "end": "834239"
  },
  {
    "text": "be familiar with or not but it's",
    "start": "834239",
    "end": "835949"
  },
  {
    "text": "actually the streams are using the",
    "start": "835949",
    "end": "838309"
  },
  {
    "text": "Kinesis as the underlying mechanism for",
    "start": "838309",
    "end": "841799"
  },
  {
    "text": "capturing the changelog data from the",
    "start": "841799",
    "end": "844139"
  },
  {
    "text": "table and generally you're going to see",
    "start": "844139",
    "end": "847129"
  },
  {
    "text": "sub-second latency in what appears in",
    "start": "847129",
    "end": "850529"
  },
  {
    "text": "the stream when a change is made to the",
    "start": "850529",
    "end": "852269"
  },
  {
    "text": "table now when you set up streams what",
    "start": "852269",
    "end": "855149"
  },
  {
    "start": "853000",
    "end": "898000"
  },
  {
    "text": "you'll have to do is you have to pick up",
    "start": "855149",
    "end": "856170"
  },
  {
    "text": "view type a view type specifies what",
    "start": "856170",
    "end": "858540"
  },
  {
    "text": "data is captured in the stream so do you",
    "start": "858540",
    "end": "861989"
  },
  {
    "text": "want the old image and the new image do",
    "start": "861989",
    "end": "864749"
  },
  {
    "text": "you just want the old image do you want",
    "start": "864749",
    "end": "866489"
  },
  {
    "text": "just the new image or do you just want",
    "start": "866489",
    "end": "868259"
  },
  {
    "text": "the keys the reason why this is",
    "start": "868259",
    "end": "869669"
  },
  {
    "text": "important is when you read the stream",
    "start": "869669",
    "end": "871559"
  },
  {
    "text": "you're going to be charged a recap asset",
    "start": "871559",
    "end": "874350"
  },
  {
    "text": "a unit and so you don't want to read",
    "start": "874350",
    "end": "875759"
  },
  {
    "text": "more information than you have to so if",
    "start": "875759",
    "end": "877799"
  },
  {
    "text": "you just want to do replication you want",
    "start": "877799",
    "end": "879179"
  },
  {
    "text": "to create a customized replication",
    "start": "879179",
    "end": "880529"
  },
  {
    "text": "application then you just want maybe the",
    "start": "880529",
    "end": "882749"
  },
  {
    "text": "new image if you're doing something that",
    "start": "882749",
    "end": "885869"
  },
  {
    "text": "requires that's in the auditing",
    "start": "885869",
    "end": "887669"
  },
  {
    "text": "compliance field you may want both the",
    "start": "887669",
    "end": "890790"
  },
  {
    "text": "new and the old image so be careful in",
    "start": "890790",
    "end": "893399"
  },
  {
    "text": "terms of you know what you type you pick",
    "start": "893399",
    "end": "895199"
  },
  {
    "text": "because it can impact the cost to read",
    "start": "895199",
    "end": "897389"
  },
  {
    "text": "the stream how does this all work well",
    "start": "897389",
    "end": "899910"
  },
  {
    "start": "898000",
    "end": "951000"
  },
  {
    "text": "as a dynamodb application is making",
    "start": "899910",
    "end": "902910"
  },
  {
    "text": "changes to your table",
    "start": "902910",
    "end": "905069"
  },
  {
    "text": "those changes are going to be captured",
    "start": "905069",
    "end": "907559"
  },
  {
    "text": "in the stream a stream is made out of",
    "start": "907559",
    "end": "910649"
  },
  {
    "text": "many different shards we use sharding",
    "start": "910649",
    "end": "912869"
  },
  {
    "text": "for a number of reasons for scalability",
    "start": "912869",
    "end": "914610"
  },
  {
    "text": "for for durability and then those are",
    "start": "914610",
    "end": "917579"
  },
  {
    "text": "the data in the shards are going to be",
    "start": "917579",
    "end": "918989"
  },
  {
    "text": "available to you for 24 hours at this",
    "start": "918989",
    "end": "922169"
  },
  {
    "text": "point you can reap the stream using the",
    "start": "922169",
    "end": "925690"
  },
  {
    "text": "bori be streams API or better yet you",
    "start": "925690",
    "end": "929770"
  },
  {
    "text": "can use a Kinesis client library worker",
    "start": "929770",
    "end": "932410"
  },
  {
    "text": "to do that the Kinesis client library",
    "start": "932410",
    "end": "935380"
  },
  {
    "text": "worker are sort of a higher-level way to",
    "start": "935380",
    "end": "937270"
  },
  {
    "text": "deal with streams it provides a number",
    "start": "937270",
    "end": "939370"
  },
  {
    "text": "of features such as the ability to",
    "start": "939370",
    "end": "940750"
  },
  {
    "text": "checkpointing so that if the process",
    "start": "940750",
    "end": "943450"
  },
  {
    "text": "reading the stream dies when it comes",
    "start": "943450",
    "end": "945820"
  },
  {
    "text": "back up again",
    "start": "945820",
    "end": "946720"
  },
  {
    "text": "it can pick up where it left off so it",
    "start": "946720",
    "end": "948610"
  },
  {
    "text": "does do a little bit of state management",
    "start": "948610",
    "end": "949930"
  },
  {
    "text": "for you one of the things that streams",
    "start": "949930",
    "end": "951640"
  },
  {
    "start": "951000",
    "end": "1013000"
  },
  {
    "text": "enables is replication and we provide a",
    "start": "951640",
    "end": "955630"
  },
  {
    "text": "replication library for you that's",
    "start": "955630",
    "end": "957460"
  },
  {
    "text": "available on github so if you wanted to",
    "start": "957460",
    "end": "960190"
  },
  {
    "text": "do your own custom replication you can",
    "start": "960190",
    "end": "962260"
  },
  {
    "text": "start there okay",
    "start": "962260",
    "end": "963790"
  },
  {
    "text": "or better yet if you simply want to",
    "start": "963790",
    "end": "965710"
  },
  {
    "text": "replicate DynamoDB to another region or",
    "start": "965710",
    "end": "968110"
  },
  {
    "text": "multiple regions we have a cloud",
    "start": "968110",
    "end": "970270"
  },
  {
    "text": "formation template that you can launch",
    "start": "970270",
    "end": "972180"
  },
  {
    "text": "it'll launch a ec2 instance the ec2",
    "start": "972180",
    "end": "975940"
  },
  {
    "text": "instance will present a replication",
    "start": "975940",
    "end": "977950"
  },
  {
    "text": "console you can configure it and you can",
    "start": "977950",
    "end": "980410"
  },
  {
    "text": "specify which table you want to",
    "start": "980410",
    "end": "981670"
  },
  {
    "text": "replicate into what region and then",
    "start": "981670",
    "end": "983800"
  },
  {
    "text": "it'll do the replication for you this is",
    "start": "983800",
    "end": "986380"
  },
  {
    "text": "one way of replication so if your",
    "start": "986380",
    "end": "987880"
  },
  {
    "text": "dynamodb table sits in northern virginia",
    "start": "987880",
    "end": "991270"
  },
  {
    "text": "you could tell it to replicate to oregon",
    "start": "991270",
    "end": "993760"
  },
  {
    "text": "or to dublin or to tokyo or you know all",
    "start": "993760",
    "end": "997390"
  },
  {
    "text": "the regions that we support ok all the",
    "start": "997390",
    "end": "1000600"
  },
  {
    "text": "DB all the region I should say that",
    "start": "1000600",
    "end": "1001830"
  },
  {
    "text": "dynamodb is supported in ok and so this",
    "start": "1001830",
    "end": "1004860"
  },
  {
    "text": "is pretty straightforward and if you",
    "start": "1004860",
    "end": "1006450"
  },
  {
    "text": "wanted to do multi master replication",
    "start": "1006450",
    "end": "1008400"
  },
  {
    "text": "that's something that you can implement",
    "start": "1008400",
    "end": "1009870"
  },
  {
    "text": "yourself via the libraries that we",
    "start": "1009870",
    "end": "1013020"
  },
  {
    "start": "1013000",
    "end": "1057000"
  },
  {
    "text": "provide genom ODB also integrates with",
    "start": "1013020",
    "end": "1015210"
  },
  {
    "text": "lambda so it lambda you get the ability",
    "start": "1015210",
    "end": "1017220"
  },
  {
    "text": "to specify code that's executed without",
    "start": "1017220",
    "end": "1021180"
  },
  {
    "text": "having to deploy any infrastructure",
    "start": "1021180",
    "end": "1022920"
  },
  {
    "text": "yourself so lambda today supports Java",
    "start": "1022920",
    "end": "1026030"
  },
  {
    "text": "JavaScript as well as Python and as long",
    "start": "1026030",
    "end": "1029490"
  },
  {
    "text": "as you can express what you want to do",
    "start": "1029490",
    "end": "1031140"
  },
  {
    "text": "in any of those three languages you can",
    "start": "1031140",
    "end": "1033390"
  },
  {
    "text": "basically get a dynamodb stream to",
    "start": "1033390",
    "end": "1038490"
  },
  {
    "text": "interact with that and do whatever you",
    "start": "1038490",
    "end": "1040050"
  },
  {
    "text": "want",
    "start": "1040050",
    "end": "1040560"
  },
  {
    "text": "so in this example all we're doing is",
    "start": "1040560",
    "end": "1042688"
  },
  {
    "text": "whenever a stream item is available it",
    "start": "1042689",
    "end": "1045089"
  },
  {
    "text": "calls a lambda function and the lambda",
    "start": "1045089",
    "end": "1047220"
  },
  {
    "text": "function simply displays the the item",
    "start": "1047220",
    "end": "1051510"
  },
  {
    "text": "that's in the stream so the idea is that",
    "start": "1051510",
    "end": "1053070"
  },
  {
    "text": "you can replace that with any code that",
    "start": "1053070",
    "end": "1054690"
  },
  {
    "text": "you want and when you do that you know",
    "start": "1054690",
    "end": "1057450"
  },
  {
    "start": "1057000",
    "end": "1131000"
  },
  {
    "text": "you can get things like triggers",
    "start": "1057450",
    "end": "1059370"
  },
  {
    "text": "so dynamodb supports triggers and it",
    "start": "1059370",
    "end": "1061890"
  },
  {
    "text": "uses lamda to implement that so what",
    "start": "1061890",
    "end": "1064890"
  },
  {
    "text": "triggers in place what you can do is",
    "start": "1064890",
    "end": "1066740"
  },
  {
    "text": "when a change happens to a table that",
    "start": "1066740",
    "end": "1069870"
  },
  {
    "text": "change is captured in a stream that",
    "start": "1069870",
    "end": "1071760"
  },
  {
    "text": "stream will invoke a lambda function the",
    "start": "1071760",
    "end": "1074670"
  },
  {
    "text": "lambda function can then be used to",
    "start": "1074670",
    "end": "1076290"
  },
  {
    "text": "create things like a derivative table so",
    "start": "1076290",
    "end": "1078270"
  },
  {
    "text": "for example if you had a JSON attribute",
    "start": "1078270",
    "end": "1081600"
  },
  {
    "text": "you may want to index the JSON document",
    "start": "1081600",
    "end": "1085800"
  },
  {
    "text": "on items that are not at the root level",
    "start": "1085800",
    "end": "1088440"
  },
  {
    "text": "and so you can use their lambda function",
    "start": "1088440",
    "end": "1091260"
  },
  {
    "text": "to do just that in a derivative table",
    "start": "1091260",
    "end": "1093060"
  },
  {
    "text": "okay you could also use it to update",
    "start": "1093060",
    "end": "1096390"
  },
  {
    "text": "your cache earlier we talked about using",
    "start": "1096390",
    "end": "1098970"
  },
  {
    "text": "caching as a way to alleviate a huge",
    "start": "1098970",
    "end": "1102870"
  },
  {
    "text": "amount of reads unnecessary reads to to",
    "start": "1102870",
    "end": "1105150"
  },
  {
    "text": "dynamodb so if a product gets updated",
    "start": "1105150",
    "end": "1109170"
  },
  {
    "text": "well you can trigger so that the cache",
    "start": "1109170",
    "end": "1113520"
  },
  {
    "text": "gets updated with the latest project",
    "start": "1113520",
    "end": "1115020"
  },
  {
    "text": "information okay you can also keep your",
    "start": "1115020",
    "end": "1118020"
  },
  {
    "text": "search indexes up-to-date and you can",
    "start": "1118020",
    "end": "1120300"
  },
  {
    "text": "also call out to external systems you",
    "start": "1120300",
    "end": "1122940"
  },
  {
    "text": "can send an email send a text or you can",
    "start": "1122940",
    "end": "1124770"
  },
  {
    "text": "trigger a workflow you can do pretty",
    "start": "1124770",
    "end": "1126690"
  },
  {
    "text": "much anything you can do as long as you",
    "start": "1126690",
    "end": "1128790"
  },
  {
    "text": "can specify it in code so with that what",
    "start": "1128790",
    "end": "1131040"
  },
  {
    "start": "1131000",
    "end": "1335000"
  },
  {
    "text": "I'll do is I want to wrap up by talking",
    "start": "1131040",
    "end": "1133140"
  },
  {
    "text": "about an emerging architecture that has",
    "start": "1133140",
    "end": "1137100"
  },
  {
    "text": "been made possible by the continued",
    "start": "1137100",
    "end": "1139680"
  },
  {
    "text": "maturation of the services that are part",
    "start": "1139680",
    "end": "1141990"
  },
  {
    "text": "of AWS and that is what we call service",
    "start": "1141990",
    "end": "1144530"
  },
  {
    "text": "event-driven applications the idea",
    "start": "1144530",
    "end": "1147360"
  },
  {
    "text": "behind this is that today it becomes",
    "start": "1147360",
    "end": "1149820"
  },
  {
    "text": "very possible to create very",
    "start": "1149820",
    "end": "1152280"
  },
  {
    "text": "sophisticated applications without",
    "start": "1152280",
    "end": "1154440"
  },
  {
    "text": "managing any infrastructure so what this",
    "start": "1154440",
    "end": "1157950"
  },
  {
    "text": "means is that you know without deploying",
    "start": "1157950",
    "end": "1160170"
  },
  {
    "text": "ec2 or RDS and having to think about the",
    "start": "1160170",
    "end": "1163410"
  },
  {
    "text": "size of ec2 instances and how much",
    "start": "1163410",
    "end": "1165060"
  },
  {
    "text": "memory BBS and all this other stuff and",
    "start": "1165060",
    "end": "1168030"
  },
  {
    "text": "think about auto scaling and load",
    "start": "1168030",
    "end": "1169620"
  },
  {
    "text": "balancing you can do away with all of",
    "start": "1169620",
    "end": "1171570"
  },
  {
    "text": "that and use services that automatically",
    "start": "1171570",
    "end": "1175080"
  },
  {
    "text": "scale that have durability and",
    "start": "1175080",
    "end": "1177950"
  },
  {
    "text": "availability built in okay so this is an",
    "start": "1177950",
    "end": "1181740"
  },
  {
    "text": "example of an application created by",
    "start": "1181740",
    "end": "1183630"
  },
  {
    "text": "some SA colleagues of mine it's a survey",
    "start": "1183630",
    "end": "1186240"
  },
  {
    "text": "form application it uses for example",
    "start": "1186240",
    "end": "1191460"
  },
  {
    "text": "s/3 s/3",
    "start": "1191460",
    "end": "1192740"
  },
  {
    "text": "the ability to host web pages so the",
    "start": "1192740",
    "end": "1195950"
  },
  {
    "text": "front end of the survey is an HTML page",
    "start": "1195950",
    "end": "1198110"
  },
  {
    "text": "written in a modern JavaScript framework",
    "start": "1198110",
    "end": "1201080"
  },
  {
    "text": "such as angular or ember or bootstrap",
    "start": "1201080",
    "end": "1203480"
  },
  {
    "text": "and so it can do a very sophisticated UI",
    "start": "1203480",
    "end": "1206780"
  },
  {
    "text": "but even better it can make callbacks to",
    "start": "1206780",
    "end": "1210190"
  },
  {
    "text": "back-end services in this case we're",
    "start": "1210190",
    "end": "1213170"
  },
  {
    "text": "calling into API gateway API gateway can",
    "start": "1213170",
    "end": "1216410"
  },
  {
    "text": "call into lambda lambda can execute",
    "start": "1216410",
    "end": "1218960"
  },
  {
    "text": "functions and code and then in this case",
    "start": "1218960",
    "end": "1221750"
  },
  {
    "text": "what we'll do is we'll take Survey data",
    "start": "1221750",
    "end": "1223130"
  },
  {
    "text": "process it and then store",
    "start": "1223130",
    "end": "1226780"
  },
  {
    "text": "personally-identifiable information into",
    "start": "1226780",
    "end": "1229429"
  },
  {
    "text": "s3 an encrypted format and then non",
    "start": "1229429",
    "end": "1233059"
  },
  {
    "text": "encrypted or non PII data into DynamoDB",
    "start": "1233059",
    "end": "1236030"
  },
  {
    "text": "of course you can do the same thing if",
    "start": "1236030",
    "end": "1237860"
  },
  {
    "text": "you want to store conference information",
    "start": "1237860",
    "end": "1239780"
  },
  {
    "text": "DynamoDB you could simply do that by",
    "start": "1239780",
    "end": "1241070"
  },
  {
    "text": "encrypting the data in a via lambda",
    "start": "1241070",
    "end": "1244309"
  },
  {
    "text": "before it gets stored in dynamo now what",
    "start": "1244309",
    "end": "1247790"
  },
  {
    "text": "you're seeing here is the ability to",
    "start": "1247790",
    "end": "1250000"
  },
  {
    "text": "have applications that require no",
    "start": "1250000",
    "end": "1253580"
  },
  {
    "text": "servers okay so that means it's less",
    "start": "1253580",
    "end": "1256520"
  },
  {
    "text": "administration less patching less",
    "start": "1256520",
    "end": "1258740"
  },
  {
    "text": "upgrades and less administration on your",
    "start": "1258740",
    "end": "1261470"
  },
  {
    "text": "part and it makes the life a whole lot",
    "start": "1261470",
    "end": "1263210"
  },
  {
    "text": "easier and you're gonna see more and",
    "start": "1263210",
    "end": "1265070"
  },
  {
    "text": "more examples of this emerge over the",
    "start": "1265070",
    "end": "1268220"
  },
  {
    "text": "next few months and in years because",
    "start": "1268220",
    "end": "1269870"
  },
  {
    "text": "they're gonna be more services that are",
    "start": "1269870",
    "end": "1271940"
  },
  {
    "text": "going to require really no services on",
    "start": "1271940",
    "end": "1274010"
  },
  {
    "text": "your part to maintain and dynamo is",
    "start": "1274010",
    "end": "1277730"
  },
  {
    "text": "going to be a social part of that",
    "start": "1277730",
    "end": "1279470"
  },
  {
    "text": "because unlike other databases like",
    "start": "1279470",
    "end": "1282470"
  },
  {
    "text": "relational databases Dynamo is accessed",
    "start": "1282470",
    "end": "1285290"
  },
  {
    "text": "via api's ok",
    "start": "1285290",
    "end": "1287570"
  },
  {
    "text": "and these api's can be called from a web",
    "start": "1287570",
    "end": "1290929"
  },
  {
    "text": "page so you can have a web page that",
    "start": "1290929",
    "end": "1293420"
  },
  {
    "text": "simply stores data into dynamo directly",
    "start": "1293420",
    "end": "1297290"
  },
  {
    "text": "without going through a web server for",
    "start": "1297290",
    "end": "1300650"
  },
  {
    "text": "example okay so dynamo is directly",
    "start": "1300650",
    "end": "1304010"
  },
  {
    "text": "accessible wherever you can make a HTTP",
    "start": "1304010",
    "end": "1307429"
  },
  {
    "text": "call and we have client-side JavaScript",
    "start": "1307429",
    "end": "1309400"
  },
  {
    "text": "applications and SDKs that can help you",
    "start": "1309400",
    "end": "1312290"
  },
  {
    "text": "with that",
    "start": "1312290",
    "end": "1312830"
  },
  {
    "text": "ok so this is a new emerging paradigm",
    "start": "1312830",
    "end": "1315110"
  },
  {
    "text": "and you know dynamo is a core part of",
    "start": "1315110",
    "end": "1318140"
  },
  {
    "text": "that and hopefully you know with today's",
    "start": "1318140",
    "end": "1320600"
  },
  {
    "text": "session you understood some of the",
    "start": "1320600",
    "end": "1321860"
  },
  {
    "text": "basics of dynamo and some of the use",
    "start": "1321860",
    "end": "1323330"
  },
  {
    "text": "cases and how to optimize for",
    "start": "1323330",
    "end": "1325639"
  },
  {
    "text": "particular scenarios that you may",
    "start": "1325639",
    "end": "1327139"
  },
  {
    "text": "encounter",
    "start": "1327139",
    "end": "1329320"
  }
]