[
  {
    "start": "0",
    "end": "142000"
  },
  {
    "text": "[Music]",
    "start": "380",
    "end": "4410"
  },
  {
    "text": "hello i'm ron picarida and i'm an enterprise support lead at aws and i'm based out of austin texas",
    "start": "6160",
    "end": "12639"
  },
  {
    "text": "welcome to aws supports you where we share best practices and troubleshooting tips from aws support",
    "start": "12639",
    "end": "18640"
  },
  {
    "text": "joining me today is rob yank and mike percy from aws support can you give us a quick introduction rob",
    "start": "18640",
    "end": "24960"
  },
  {
    "text": "and then mike sure hello everybody my name is rob yang i'm a technical account manager located",
    "start": "24960",
    "end": "30960"
  },
  {
    "text": "in calgary alberta canada help you need a blast enterprise for customers be successful in the cloud",
    "start": "30960",
    "end": "37120"
  },
  {
    "text": "i'm also a specialist in management and governance focusing on cloud financial management can't wait to",
    "start": "37120",
    "end": "43200"
  },
  {
    "text": "talk about few things about lambda cause optimization to the audience here today mike thanks rob yeah uh my name is mike",
    "start": "43200",
    "end": "50640"
  },
  {
    "text": "piercy and i'm an enterprise support lead i'm also based out of calgary alberta canada and uh one of the responsibilities",
    "start": "50640",
    "end": "58320"
  },
  {
    "text": "that we have as technical account managers is to help our customers optimize their costs and i'm really excited to talk to you today",
    "start": "58320",
    "end": "64640"
  },
  {
    "text": "about how you'll be able to to do this with aws lambda environments so thanks",
    "start": "64640",
    "end": "70799"
  },
  {
    "text": "great thanks for the intros so today we'll be introducing you as you mentioned to cost optimization best practices for lambda",
    "start": "70799",
    "end": "75840"
  },
  {
    "text": "as well as some architectural best practices to optimize performance but before we get into the details just",
    "start": "75840",
    "end": "81280"
  },
  {
    "text": "a quick note of the attendees online please feel free to use the chat window on the right hand side of your screen",
    "start": "81280",
    "end": "86479"
  },
  {
    "text": "to share your thoughts and ask questions today of rob and mike they're here to answer them and kind of give you that uh one-on-one option to chat with them",
    "start": "86479",
    "end": "93680"
  },
  {
    "text": "so i really look forward to hearing from you all so mike can you walk us through we're gonna be talking about today",
    "start": "93680",
    "end": "99439"
  },
  {
    "text": "yeah so today we're going to be focusing on cost savings with aws lambda primarily and we'll be looking at",
    "start": "99439",
    "end": "107840"
  },
  {
    "text": "uh cost optimization and management from a number of different angles including code optimization and how we",
    "start": "107840",
    "end": "114640"
  },
  {
    "text": "can profile lambda functions to optimize performance and rob's going to take a look at cost",
    "start": "114640",
    "end": "120640"
  },
  {
    "text": "explorer and tagging practices and then discuss some of the architectural best practices to help ensure optimal performance of",
    "start": "120640",
    "end": "127520"
  },
  {
    "text": "your serverless environments so let's uh get started",
    "start": "127520",
    "end": "133360"
  },
  {
    "text": "so when we are talking about serverless what do we mean by by that and",
    "start": "133360",
    "end": "140879"
  },
  {
    "text": "when we say serverless we're really talking about applications that are built with technologies that eliminate the need to manage servers",
    "start": "140879",
    "end": "147520"
  },
  {
    "start": "142000",
    "end": "142000"
  },
  {
    "text": "that can scale to nearly infinite automatically and you pay for what value you get out",
    "start": "147520",
    "end": "154080"
  },
  {
    "text": "of it pricing model and these systems are also highly available automatically",
    "start": "154080",
    "end": "159599"
  },
  {
    "text": "and this strategy is often referred to as a serverless operational model and enables you to really drastically",
    "start": "159599",
    "end": "165920"
  },
  {
    "text": "reduce the time spent on things that aren't core to your business so you can reduce that undifferentiated heavy lifting",
    "start": "165920",
    "end": "172400"
  },
  {
    "text": "and focus on the products that really drive value for your business and we've got a number of customers that",
    "start": "172400",
    "end": "178080"
  },
  {
    "text": "have made the decision to achieve this value through a serverless first strategy and",
    "start": "178080",
    "end": "185360"
  },
  {
    "text": "or a decision to use serverless services as a preference and unless there's a use case for it",
    "start": "185360",
    "end": "192560"
  },
  {
    "text": "that the workload really demands that they choose otherwise some of these customers like irobot",
    "start": "192560",
    "end": "197599"
  },
  {
    "text": "alma media and fender are all serverless first and when we start out and developers are",
    "start": "197599",
    "end": "204159"
  },
  {
    "text": "toying around uh and getting started with lambda functions or using it for cron jobs",
    "start": "204159",
    "end": "209519"
  },
  {
    "text": "they're they're probably incurring such low cost that the pricing model doesn't really have a lot of impact on the business",
    "start": "209519",
    "end": "215760"
  },
  {
    "text": "but as you start to adopt a serverless first strategy or start using serverless more you might",
    "start": "215760",
    "end": "222080"
  },
  {
    "text": "need to recalibrate and rather than overpaying for pre-provisioned servers",
    "start": "222080",
    "end": "227200"
  },
  {
    "text": "your costs align to usage and now you really need to start thinking about how you're using your systems in",
    "start": "227200",
    "end": "233599"
  },
  {
    "text": "parallel to managing your costs so",
    "start": "233599",
    "end": "240480"
  },
  {
    "text": "when we're talking about serverless we're also talking about more than just compute and while lambda is typically the service you think of when we",
    "start": "240480",
    "end": "246720"
  },
  {
    "start": "241000",
    "end": "241000"
  },
  {
    "text": "mentioned serverless uh we have many other services across different layers of the stack that",
    "start": "246720",
    "end": "252159"
  },
  {
    "text": "that will be connecting to aws lambda and for data storage we often see things",
    "start": "252159",
    "end": "258479"
  },
  {
    "text": "like amazon s3 amazon aurora serverless and amazon dynamodb as data stores",
    "start": "258479",
    "end": "264639"
  },
  {
    "text": "from an integra integration point of view we typically leverage amazon api gateway",
    "start": "264639",
    "end": "270400"
  },
  {
    "text": "to publish our apis and leverage amazon event bridge amazon and sqs",
    "start": "270400",
    "end": "275759"
  },
  {
    "text": "amazon sns and aws step functions to help with communication and orchestra orchestration of the solutions for a",
    "start": "275759",
    "end": "283120"
  },
  {
    "text": "discussion today we're really going to be focusing on aws lambda but we'll also touch on some of these integration points",
    "start": "283120",
    "end": "289520"
  },
  {
    "text": "in the architecture section and how to best integrate with these other services such",
    "start": "289520",
    "end": "294720"
  },
  {
    "text": "as s3 and api gateway and while lambda offers many key",
    "start": "294720",
    "end": "300320"
  },
  {
    "text": "advantages for our customers it's really when all of these components surrounding lambda come together that we really see",
    "start": "300320",
    "end": "307120"
  },
  {
    "text": "much bigger benefits messaging orchestration storage and compute all together are really the",
    "start": "307120",
    "end": "312240"
  },
  {
    "text": "secret sauce that that make serverless magical",
    "start": "312240",
    "end": "317600"
  },
  {
    "text": "during our presentation today we're really going to discuss how to optimize and manage costs with aws lambda and how",
    "start": "317680",
    "end": "323759"
  },
  {
    "text": "that integrates into some of those those other servers technologies that we just described uh rob did you want to maybe take a",
    "start": "323759",
    "end": "330240"
  },
  {
    "text": "moment and start us off with the management and governance side sure uh",
    "start": "330240",
    "end": "335440"
  },
  {
    "text": "thanks for the intro mike let's start by talking about cost optimization for serverless based",
    "start": "335440",
    "end": "340880"
  },
  {
    "text": "on our well architected framework as covered in the aws software architect",
    "start": "340880",
    "end": "346240"
  },
  {
    "text": "framework the increased flexibility and the reality that cloud enables encourages innovation fast-paced",
    "start": "346240",
    "end": "352400"
  },
  {
    "text": "development and deployment as well italy eliminates the manual process and time associated",
    "start": "352400",
    "end": "358720"
  },
  {
    "text": "with provisioning on premises infrastructure infrastructure including identify your",
    "start": "358720",
    "end": "363759"
  },
  {
    "text": "hardware specification negotiating price quotations matching purchase orders scheduling shipment and",
    "start": "363759",
    "end": "369600"
  },
  {
    "text": "so on so we can't really start talking about cost and cost optimization without the",
    "start": "369600",
    "end": "375919"
  },
  {
    "start": "372000",
    "end": "372000"
  },
  {
    "text": "mechanisms of being aware of the cost first allocating it and owning it as your",
    "start": "375919",
    "end": "381520"
  },
  {
    "text": "serverless architecture grows the number of lambda functions apis stages and other assets will multiply most of",
    "start": "381520",
    "end": "389600"
  },
  {
    "text": "these architectures need to be budgeted and forecasted for in terminal in terms of cost and resource management and tagging",
    "start": "389600",
    "end": "397520"
  },
  {
    "text": "can be can help you rather you can allocate this cost from your aws build to",
    "start": "397520",
    "end": "403039"
  },
  {
    "text": "individual functions and apis and obtain a granulated view of your cost based",
    "start": "403039",
    "end": "408880"
  },
  {
    "text": "per project or application your readable cost explorer a good implementation is to share the",
    "start": "408880",
    "end": "415840"
  },
  {
    "text": "same key value tag for assets belong to the same project or the application programmatically and",
    "start": "415840",
    "end": "422800"
  },
  {
    "text": "create customer report based on the tags that you have created this feature will help you not only",
    "start": "422800",
    "end": "428479"
  },
  {
    "text": "allocate your cost but also identify which resources belong to which projects after",
    "start": "428479",
    "end": "434240"
  },
  {
    "text": "that you can show back or charge back to your business unit depending on your internal accounting model",
    "start": "434240",
    "end": "439520"
  },
  {
    "text": "so the owner of the projects and application is aware and responsible for the cost in the end the",
    "start": "439520",
    "end": "445199"
  },
  {
    "text": "whole process drives responsibility and efficient behavior",
    "start": "445199",
    "end": "450479"
  },
  {
    "text": "so let's take a look of course explorer many of you may be familiar with cost explorer already",
    "start": "450479",
    "end": "455840"
  },
  {
    "start": "452000",
    "end": "452000"
  },
  {
    "text": "which has an easy to use interface that let you visualize understand and match your rate less cost",
    "start": "455840",
    "end": "461360"
  },
  {
    "text": "and usage over time on the right hand side i've got the filters for causing explorer on the",
    "start": "461360",
    "end": "467199"
  },
  {
    "text": "screen i'm going to show a quick example i feel tongue filtered down the cost by",
    "start": "467199",
    "end": "473759"
  },
  {
    "text": "several services including dynamodb lambda s3 and going down there there's a filter for",
    "start": "473759",
    "end": "480560"
  },
  {
    "text": "tag here's where you can select your tag related to a specific project or application as we talked",
    "start": "480560",
    "end": "486879"
  },
  {
    "text": "before important note the tag keys listed here are not any tag",
    "start": "486879",
    "end": "493360"
  },
  {
    "text": "they need to be cause allocation tags so in your aws building console on the screenshot on the left you can",
    "start": "493360",
    "end": "500639"
  },
  {
    "text": "actively activate regular text to be a cost allocation tags for example if you have never used calls",
    "start": "500639",
    "end": "507360"
  },
  {
    "text": "allocation tags in your abs account before and you tag your s3 bucket with the key",
    "start": "507360",
    "end": "512800"
  },
  {
    "text": "as project and value as serverless experiments for example you need to enable the tag project in",
    "start": "512800",
    "end": "520479"
  },
  {
    "text": "causing allocation text before it can be used as a tag filtering causing slower",
    "start": "520479",
    "end": "525680"
  },
  {
    "text": "uh once that one last note like tags are case sensitive so project with a capital p is different",
    "start": "525680",
    "end": "532480"
  },
  {
    "text": "than the project with a lowercase p so just be aware of that",
    "start": "532480",
    "end": "538320"
  },
  {
    "text": "um rob h do we have any questions from the audience",
    "start": "538640",
    "end": "545680"
  },
  {
    "text": "hey rob yeah we don't have any questions from the audience right now so audience please make sure to put your questions in if you have any about our aws lambda",
    "start": "545680",
    "end": "552080"
  },
  {
    "text": "but i do have a question uh geometric taggings uh what's the best way to tag existing",
    "start": "552080",
    "end": "557839"
  },
  {
    "text": "lambda functions in batch all right so uh for existing",
    "start": "557839",
    "end": "563839"
  },
  {
    "text": "functions that you haven't tagged so uh the easiest way would be to go into resource group and",
    "start": "563839",
    "end": "569839"
  },
  {
    "text": "tag editor so if in the search bar after login to aws console search for resource group and",
    "start": "569839",
    "end": "575279"
  },
  {
    "text": "tag editor so in there you can tag your resources in batch i think up to five 500 resources a time",
    "start": "575279",
    "end": "583200"
  },
  {
    "text": "so that's a good way you can tag existing lambda functions or any other resources for this matter great thanks rob",
    "start": "583200",
    "end": "590320"
  },
  {
    "text": "appreciate it back over here",
    "start": "590320",
    "end": "593760"
  },
  {
    "text": "there we go all right yep looking for the mute button uh for code optimization uh let's let's spend a few minutes and",
    "start": "597440",
    "end": "604000"
  },
  {
    "text": "look at what we can do here uh to get start out with let's",
    "start": "604000",
    "end": "609040"
  },
  {
    "start": "608000",
    "end": "608000"
  },
  {
    "text": "just do a level set on how is lambda priced and when we launched lambda a little bit",
    "start": "609040",
    "end": "614640"
  },
  {
    "text": "over five years ago we had two different pricing dimensions so it's really based around requests",
    "start": "614640",
    "end": "619680"
  },
  {
    "text": "and duration and you're charged based on the number of requests of your function uh and the duration and",
    "start": "619680",
    "end": "625440"
  },
  {
    "text": "the time it takes for that code to run so lambda counts each request each time",
    "start": "625440",
    "end": "631600"
  },
  {
    "text": "it starts executing in response to an event notification or an invoke call and this includes tests invocations from",
    "start": "631600",
    "end": "638880"
  },
  {
    "text": "the console and duration is calculated from the time your code begins executing",
    "start": "638880",
    "end": "645120"
  },
  {
    "text": "until it returns or otherwise terminates um and this is now based on per second",
    "start": "645120",
    "end": "651680"
  },
  {
    "text": "uh sorry per millisecond uh billing so uh the the the total amount of time",
    "start": "651680",
    "end": "657920"
  },
  {
    "text": "is is calculated for each invocation",
    "start": "657920",
    "end": "662160"
  },
  {
    "text": "basically the other piece to this is you allocate the amount of memory uh you want to your function and as that",
    "start": "663360",
    "end": "671040"
  },
  {
    "text": "is allocated you're also allocating a proportional cpu and other resources to that lambda",
    "start": "671040",
    "end": "677760"
  },
  {
    "text": "function and so we'll look at how that impacts the performance of of the overall function and how fast it is able to",
    "start": "677760",
    "end": "684160"
  },
  {
    "text": "execute an increase in memory size triggers an equivalent increase in cpu that's",
    "start": "684160",
    "end": "689519"
  },
  {
    "text": "available and we'll look at how that can can improve the performance",
    "start": "689519",
    "end": "694560"
  },
  {
    "text": "and mike don't forget about free tier pricing yeah yeah absolutely we do have a free tier",
    "start": "694560",
    "end": "699839"
  },
  {
    "text": "available as well and you're able to get uh 1 million free requests per month as a starting point",
    "start": "699839",
    "end": "706079"
  },
  {
    "text": "and you get 400 000 gigabit uh seconds of compute time and you know we're really going to focus",
    "start": "706079",
    "end": "713440"
  },
  {
    "text": "a lot of our cost optimization discussions here really around uh the",
    "start": "713440",
    "end": "719279"
  },
  {
    "text": "duration and memory sizing as as our area to focus today because",
    "start": "719279",
    "end": "724720"
  },
  {
    "text": "the requests are going to typically be part of your architecture point of view but the duration is something that we",
    "start": "724720",
    "end": "730079"
  },
  {
    "text": "can have a lot of control over and and we can look at some ways that we can uh streamline that",
    "start": "730079",
    "end": "736880"
  },
  {
    "start": "738000",
    "end": "738000"
  },
  {
    "text": "so when we look at this uh let's talk a little bit about global scope and",
    "start": "738000",
    "end": "745120"
  },
  {
    "text": "each time a lambda is executed there's two sections uh that that are executed",
    "start": "745120",
    "end": "751200"
  },
  {
    "text": "the first part here is what i'm calling the global section and the global section is only launched",
    "start": "751200",
    "end": "757120"
  },
  {
    "text": "the first time that the the lambda function is uh invoked and so the next time",
    "start": "757120",
    "end": "763279"
  },
  {
    "text": "after it executes the first time it sits there and it waits for a follow-up uh initialization to see if it's going",
    "start": "763279",
    "end": "770000"
  },
  {
    "text": "to get used again and then if it is then it will uh only execute the handler function portion",
    "start": "770000",
    "end": "776720"
  },
  {
    "text": "uh and so that will allow the the second part of the the code to to run through each time um",
    "start": "776720",
    "end": "786079"
  },
  {
    "text": "once so this allows the global scope to handle kind of the more expensive one-off",
    "start": "786079",
    "end": "792399"
  },
  {
    "text": "operations and you know some examples of this would be things like connections to databases or",
    "start": "792399",
    "end": "798480"
  },
  {
    "text": "initialization logic and that sort of stuff when we're able to put that into the",
    "start": "798480",
    "end": "803760"
  },
  {
    "text": "global section it'll it'll persist and then the next time we don't have to have that expensive operation uh in the",
    "start": "803760",
    "end": "811279"
  },
  {
    "text": "global section we'll handle it inside of the handler function instead",
    "start": "811279",
    "end": "816480"
  },
  {
    "text": "so let's take a look at what this looks like and so what we've done is we've created a two lambda",
    "start": "816480",
    "end": "824000"
  },
  {
    "start": "822000",
    "end": "822000"
  },
  {
    "text": "functions so we've got two identical lambda functions and we're going to basically erase these two",
    "start": "824000",
    "end": "830000"
  },
  {
    "text": "functions against each other just to see what kind of difference this makes so these lambda functions are going to make a call to a dynamodb",
    "start": "830000",
    "end": "836480"
  },
  {
    "text": "table uh and inside the dynamodb table we've got a a list of movies that uh are available",
    "start": "836480",
    "end": "843600"
  },
  {
    "text": "in there and we're just going to retrieve at random a year and pull the movies from from this this",
    "start": "843600",
    "end": "849279"
  },
  {
    "text": "table the only difference that we're going to have with this code is where the the dynamodb connection initializer",
    "start": "849279",
    "end": "856240"
  },
  {
    "text": "is located so we're just going to move it from the the handler function and the get movies into the",
    "start": "856240",
    "end": "862240"
  },
  {
    "text": "uh global area for the get movies underscore global",
    "start": "862240",
    "end": "867920"
  },
  {
    "text": "all right so we'll get started here and we'll open up the aws console",
    "start": "867920",
    "end": "875519"
  },
  {
    "text": "okay and first thing we're going to do in here we're going to go in and we're going to open up the uh the lambda console",
    "start": "877040",
    "end": "886720"
  },
  {
    "text": "go and we've got uh our two functions listed here and we've got movie by ear and movie by",
    "start": "887920",
    "end": "894560"
  },
  {
    "text": "year global so we'll open these up in tabs here",
    "start": "894560",
    "end": "901199"
  },
  {
    "text": "okay perfect okay we'll open up the code",
    "start": "904320",
    "end": "912480"
  },
  {
    "text": "okay so in here you can see we've got our lambda initialization in the query movie function",
    "start": "912480",
    "end": "918160"
  },
  {
    "text": "and we're going to call that in our lambda handler and there's the dynamodb initialization",
    "start": "918160",
    "end": "925519"
  },
  {
    "text": "string so that's going to be every time we run through this it's going to create a new connection to dynamo",
    "start": "925519",
    "end": "933759"
  },
  {
    "text": "so what we'll do we're going to just run a couple test runs here so the first one is going to be a cold start",
    "start": "933759",
    "end": "939519"
  },
  {
    "text": "most likely and so this is going to show our duration for our initial run time so",
    "start": "939519",
    "end": "944880"
  },
  {
    "text": "this one took 2500 milliseconds uh to execute and you can see that there",
    "start": "944880",
    "end": "951360"
  },
  {
    "text": "and you can see here on the size of this one it's a 128 megabyte lambda function and we're using about",
    "start": "951360",
    "end": "958880"
  },
  {
    "text": "96 megabytes on this one so let's run it again this should be a reuse of the",
    "start": "958880",
    "end": "965360"
  },
  {
    "text": "environment here and if we look at our duration here we can see that that drops quite significantly we're down to about",
    "start": "965360",
    "end": "971519"
  },
  {
    "text": "uh 537 milliseconds and no change in terms of the the size",
    "start": "971519",
    "end": "977759"
  },
  {
    "text": "of the function or or really the amount of memory used is pretty similar",
    "start": "977759",
    "end": "983839"
  },
  {
    "text": "okay so next let's switch over and look at the the movie by year with in the global",
    "start": "984079",
    "end": "990959"
  },
  {
    "text": "function so you can see here that we've basically moved only the one",
    "start": "990959",
    "end": "996000"
  },
  {
    "text": "line here we just move this up into the global section and you can see we've commented it out",
    "start": "996000",
    "end": "1001440"
  },
  {
    "text": "inside of the query movie so this is only going to initialize on the the the first time we run it",
    "start": "1001440",
    "end": "1007040"
  },
  {
    "text": "and then subsequent times it will not so let's run a test here",
    "start": "1007040",
    "end": "1013199"
  },
  {
    "text": "we'll scroll down here so we can see the cold start here took about 1229 milliseconds",
    "start": "1015360",
    "end": "1022800"
  },
  {
    "text": "still 128 megabyte size lambda and 97 megabytes this time",
    "start": "1022800",
    "end": "1029600"
  },
  {
    "text": "and then we'll run it again here and so this one ran much quicker it took 146 milliseconds",
    "start": "1029600",
    "end": "1035520"
  },
  {
    "text": "this time and you can see here again memory is is",
    "start": "1035520",
    "end": "1040558"
  },
  {
    "text": "basically the same so that that's interesting but let's actually go and uh take a look at a much",
    "start": "1040559",
    "end": "1047199"
  },
  {
    "text": "broader data set because this will let us see what happens over uh quite a bit of time so we'll open up cloudwatch and we're going to go into",
    "start": "1047199",
    "end": "1054000"
  },
  {
    "text": "cloudwatch insights and we'll take a look at averages of uh you know several thousand runs",
    "start": "1054000",
    "end": "1060400"
  },
  {
    "text": "uh of each of the functions so we can see how they they perform differently and get an idea of it as it scales over",
    "start": "1060400",
    "end": "1066720"
  },
  {
    "text": "time so we'll go into cloudwatch open up login sites",
    "start": "1066720",
    "end": "1073520"
  },
  {
    "text": "and i've got some saved queries here so let's look at the uh the movies by",
    "start": "1074640",
    "end": "1080960"
  },
  {
    "text": "year first",
    "start": "1080960",
    "end": "1083679"
  },
  {
    "text": "okay and i'll expand this out here okay and i'm just going to remove this",
    "start": "1086000",
    "end": "1091200"
  },
  {
    "text": "last line here this just would put it into per hour buckets so that we could see how it averages per hour but",
    "start": "1091200",
    "end": "1096799"
  },
  {
    "text": "we want to look at this as a as a whole and we'll change this to let's say a",
    "start": "1096799",
    "end": "1105760"
  },
  {
    "text": "week okay and we'll run the query here",
    "start": "1106840",
    "end": "1111679"
  },
  {
    "text": "so this is pulling back about 4000 different requests and it's going to give us an average run",
    "start": "1114559",
    "end": "1121360"
  },
  {
    "text": "time here of 506 milliseconds so this is for the unoptimized version",
    "start": "1121360",
    "end": "1129280"
  },
  {
    "text": "at this point so let's do the same thing now for",
    "start": "1129280",
    "end": "1135679"
  },
  {
    "text": "the movie by year with it in the global function keep it one week we're going to delete",
    "start": "1135679",
    "end": "1141919"
  },
  {
    "text": "out the the bin again and this time we're going to get about",
    "start": "1141919",
    "end": "1148799"
  },
  {
    "text": "3000 executions and you can see here just by moving that one line of code we've got an average",
    "start": "1148799",
    "end": "1154960"
  },
  {
    "text": "run time now of 220 milliseconds so you know we've gone to uh to below 50",
    "start": "1154960",
    "end": "1160880"
  },
  {
    "text": "percent of the runtime uh on on just by moving that",
    "start": "1160880",
    "end": "1166080"
  },
  {
    "text": "uh lambda or dynamodb initialization string uh into the global function area yeah",
    "start": "1166080",
    "end": "1174960"
  },
  {
    "text": "so what does that mean in terms of cost um so i think if if we uh",
    "start": "1176240",
    "end": "1183039"
  },
  {
    "text": "switch back to our powerpoint presentation now we can look at the the example of the cost difference so",
    "start": "1183039",
    "end": "1188559"
  },
  {
    "start": "1187000",
    "end": "1187000"
  },
  {
    "text": "let's let's use some some theoretical numbers here let's let's imagine that for our movie database we had a hundred thousand users",
    "start": "1188559",
    "end": "1195919"
  },
  {
    "text": "uh that that were using our application and we've got 20 invocations happening per day",
    "start": "1195919",
    "end": "1201679"
  },
  {
    "text": "and with 30 days in the month uh that's going to generate 60 million invocations",
    "start": "1201679",
    "end": "1207600"
  },
  {
    "text": "and so that's our first part and you remember that we've kind of got the the number of of requests and then we've",
    "start": "1207600",
    "end": "1213760"
  },
  {
    "text": "got our durations so um for the request side of things we would take our 60 million",
    "start": "1213760",
    "end": "1219679"
  },
  {
    "text": "invocations it's 20 cents per 1 million requests so that would work out to 12 uh",
    "start": "1219679",
    "end": "1226240"
  },
  {
    "text": "for the month for for for this function so that's fine now let's look at what it actually costs",
    "start": "1226240",
    "end": "1232480"
  },
  {
    "text": "to run with the different uh performance or different speeds so",
    "start": "1232480",
    "end": "1237760"
  },
  {
    "text": "at 506 milliseconds uh we've got 60 million invocations time 506",
    "start": "1237760",
    "end": "1243440"
  },
  {
    "text": "milliseconds and then our cost for a lambda function with 128",
    "start": "1243440",
    "end": "1249600"
  },
  {
    "text": "megabytes uh is this very small fraction of a penny here uh",
    "start": "1249600",
    "end": "1255520"
  },
  {
    "text": "per millisecond uh so that works out to 63.75",
    "start": "1255520",
    "end": "1262480"
  },
  {
    "text": "cents so if we add the 12 to the 63 dollars uh we end up with",
    "start": "1262480",
    "end": "1268720"
  },
  {
    "text": "about a 75 and 75.6 cents",
    "start": "1268720",
    "end": "1274320"
  },
  {
    "text": "so if we look at the global variable by moving the school into the global variable side of things",
    "start": "1274320",
    "end": "1279919"
  },
  {
    "text": "we still pay the 12 for all of our invocations because that isn't going to change but what we do see change is our cost",
    "start": "1279919",
    "end": "1287360"
  },
  {
    "text": "drops down to 27 dollars and 72 cents and we end up with",
    "start": "1287360",
    "end": "1292720"
  },
  {
    "text": "a total cost then of 39.72 so",
    "start": "1292720",
    "end": "1298159"
  },
  {
    "text": "total reduction in cost is uh works out to about 48 and all we've done is we've moved one",
    "start": "1298159",
    "end": "1304720"
  },
  {
    "text": "line of code the dynamo uh boto3 uh initialization piece",
    "start": "1304720",
    "end": "1309919"
  },
  {
    "text": "um a few lines up in our code in order to get that optimization",
    "start": "1309919",
    "end": "1315039"
  },
  {
    "text": "and when we look at lambda it's a small um",
    "start": "1315039",
    "end": "1321600"
  },
  {
    "text": "effect on this one function but if you have hundreds thousands tens of thousands of",
    "start": "1321600",
    "end": "1327280"
  },
  {
    "text": "lambda functions in your environment these small effects compound on each",
    "start": "1327280",
    "end": "1332320"
  },
  {
    "text": "other and add up over time that's very impressive",
    "start": "1332320",
    "end": "1337760"
  },
  {
    "text": "so in addition to this so let's uh talk a little bit about another",
    "start": "1339120",
    "end": "1345360"
  },
  {
    "text": "way that we can also improve performance in our environment so in addition to",
    "start": "1345360",
    "end": "1353679"
  },
  {
    "start": "1346000",
    "end": "1346000"
  },
  {
    "text": "being cost-effective by leveraging the global scope another way that we can go about being",
    "start": "1353679",
    "end": "1359919"
  },
  {
    "text": "cost effective is also being really careful about how we select libraries and uh what we load",
    "start": "1359919",
    "end": "1367440"
  },
  {
    "text": "into our land environment so again when it initializes it's going to have more um",
    "start": "1367440",
    "end": "1374240"
  },
  {
    "text": "overhead the with more or the the more the libraries that we load into it so a good",
    "start": "1374240",
    "end": "1379679"
  },
  {
    "text": "example of this uh here where we're using our uh javascript uh sdk we're loading in the",
    "start": "1379679",
    "end": "1386480"
  },
  {
    "text": "entire aws sdk in our first section here and creating a connection back to",
    "start": "1386480",
    "end": "1393120"
  },
  {
    "text": "dynamodb if you are just going to be talking to dynamodb",
    "start": "1393120",
    "end": "1398400"
  },
  {
    "text": "we don't need all of that extra overhead from the full aws sdk so if we change our code and we load",
    "start": "1398400",
    "end": "1404480"
  },
  {
    "text": "in just the dynamodb client we're able to again further speed up and",
    "start": "1404480",
    "end": "1409520"
  },
  {
    "text": "optimize our our lambda environment and remember that because you're paying per millisecond",
    "start": "1409520",
    "end": "1415200"
  },
  {
    "text": "every time you save a millisecond it's money that you're you're keeping in your pocket and so to give you an example i'm not",
    "start": "1415200",
    "end": "1422320"
  },
  {
    "text": "going to run through and do an example on this uh today with the the loading the libraries but we ran through and did",
    "start": "1422320",
    "end": "1428559"
  },
  {
    "text": "the same sort of experiment here and we were able to reduce uh the cost of the function by 25 percent",
    "start": "1428559",
    "end": "1435600"
  },
  {
    "text": "uh on this and basically reduce the run time from 175 or 77 milliseconds uh to 133",
    "start": "1435600",
    "end": "1442840"
  },
  {
    "text": "milliseconds um in the in the test run throughs that we did so again",
    "start": "1442840",
    "end": "1448400"
  },
  {
    "text": "a very small change that you can implement into your code get your developers uh using",
    "start": "1448400",
    "end": "1454880"
  },
  {
    "text": "that can have uh good good returns for you across your your lambda environment sorry",
    "start": "1454880",
    "end": "1464880"
  },
  {
    "text": "uh do i have any questions from the audience rob h hey rob mike thanks yes we actually did",
    "start": "1466320",
    "end": "1473200"
  },
  {
    "text": "have one that just came in from uh ray underscore db222 uh ray wanted to know can i load my own",
    "start": "1473200",
    "end": "1480720"
  },
  {
    "text": "libraries yeah yeah do you want to take a rob or",
    "start": "1480720",
    "end": "1486480"
  },
  {
    "text": "sure um okay yeah so i think the yes you can the short-term series and uh",
    "start": "1486480",
    "end": "1491919"
  },
  {
    "text": "you can do that in several ways so one way is to you know you load your library and you zip it up and upload to lambda",
    "start": "1491919",
    "end": "1498799"
  },
  {
    "text": "or alternatively you can use uh layers in lambda so you load your uh your own library in a",
    "start": "1498799",
    "end": "1505679"
  },
  {
    "text": "lambda layer and you use that in your lambda function make anything to add no i think that",
    "start": "1505679",
    "end": "1512240"
  },
  {
    "text": "covers it well great right thanks that's all for right now",
    "start": "1512240",
    "end": "1517679"
  },
  {
    "text": "all right okay so uh let's talk a little bit about how we",
    "start": "1518080",
    "end": "1524000"
  },
  {
    "start": "1519000",
    "end": "1519000"
  },
  {
    "text": "can profile an optimizer lambda functions and we've got a tool inside of aws",
    "start": "1524000",
    "end": "1530640"
  },
  {
    "text": "aws compute optimizer which is designed to recommend optimal aws resources for your workloads",
    "start": "1530640",
    "end": "1537360"
  },
  {
    "text": "and reduce costs and improve performance by using machine learning to analyze your",
    "start": "1537360",
    "end": "1542400"
  },
  {
    "text": "historical utilization metrics and it's going to look at over provisioning",
    "start": "1542400",
    "end": "1547919"
  },
  {
    "text": "of resources that can lead to unnecessary infrastructure costs and under provisioning of resources that",
    "start": "1547919",
    "end": "1552960"
  },
  {
    "text": "can lead to poor application performance and compute optimizer helps you choose the optimal configuration",
    "start": "1552960",
    "end": "1559679"
  },
  {
    "text": "for three different types of aws resources so ec2 instances amazon ebs",
    "start": "1559679",
    "end": "1565919"
  },
  {
    "text": "volumes and lambda functions and it's all based on your utilization",
    "start": "1565919",
    "end": "1570960"
  },
  {
    "text": "data so uh if in my account i went through and i i ran this and it was able to identify",
    "start": "1570960",
    "end": "1576720"
  },
  {
    "text": "two um under provisioned uh lambda functions that i had so uh by going in and increasing the",
    "start": "1576720",
    "end": "1583200"
  },
  {
    "text": "size on these it would improve the performance of of my lambda environment so this is a",
    "start": "1583200",
    "end": "1589200"
  },
  {
    "text": "really powerful tool there's no cost associated by enabling it in your account uh and it can give you some good",
    "start": "1589200",
    "end": "1596240"
  },
  {
    "text": "guidance as to how to to to optimize your your uh serverless compute",
    "start": "1596240",
    "end": "1604799"
  },
  {
    "start": "1607000",
    "end": "1607000"
  },
  {
    "text": "so we've got another tool that i wanted to talk to you about that's available and this is an open source tool that's",
    "start": "1607840",
    "end": "1613520"
  },
  {
    "text": "available on github aws lambda power tuning is is a state",
    "start": "1613520",
    "end": "1618799"
  },
  {
    "text": "machine powered by aws step functions that helps with optimizing your lambda function for cost",
    "start": "1618799",
    "end": "1625200"
  },
  {
    "text": "or performance in a really data-driven way and at aws that's one of our our",
    "start": "1625200",
    "end": "1631200"
  },
  {
    "text": "favorite ways to uh to drive decisions so uh we'll talk about how we can go",
    "start": "1631200",
    "end": "1636720"
  },
  {
    "text": "through and deploy this in your environment but it's basically a step function that will invoke your lambda functions",
    "start": "1636720",
    "end": "1643760"
  },
  {
    "text": "at different configuration sizes and you can go through and specify uh the size of the different lambda",
    "start": "1643760",
    "end": "1648960"
  },
  {
    "text": "functions you want to test it and it's going to come back with suggestions to maximize performance or to minimize",
    "start": "1648960",
    "end": "1654480"
  },
  {
    "text": "costs on this and this will actually use real requests against your lambda",
    "start": "1654480",
    "end": "1660480"
  },
  {
    "text": "function so it can really see how it's performing and give you some ideas as to what you",
    "start": "1660480",
    "end": "1666559"
  },
  {
    "text": "should do in terms of sizing on this uh the nice thing too is this also",
    "start": "1666559",
    "end": "1671760"
  },
  {
    "text": "can create some really great visualization so you can see what is happening uh in your lambda function as you change",
    "start": "1671760",
    "end": "1677919"
  },
  {
    "text": "the size of the uh the the the compute power or or the",
    "start": "1677919",
    "end": "1683120"
  },
  {
    "text": "memory on on your lab to function so if we look at uh this i ran our get",
    "start": "1683120",
    "end": "1689760"
  },
  {
    "text": "movies function through the the tool here and i'll show you what the output on this looks like",
    "start": "1689760",
    "end": "1696000"
  },
  {
    "start": "1694000",
    "end": "1694000"
  },
  {
    "text": "we've got basically two lines that it generates and so the red line is our execution time so we can see as",
    "start": "1696000",
    "end": "1703279"
  },
  {
    "text": "we increase the amount of memory on this uh the the first data point here is our 128 megs",
    "start": "1703279",
    "end": "1710640"
  },
  {
    "text": "or megabytes of memory of 256 uh and then we are 512 i think",
    "start": "1710640",
    "end": "1718640"
  },
  {
    "text": "yeah 256 512 and then 1024. we can see how that the the run time",
    "start": "1718640",
    "end": "1724240"
  },
  {
    "text": "decreases and that's going to be partly related to adding more uh memory to it and then when we add more",
    "start": "1724240",
    "end": "1730799"
  },
  {
    "text": "memory that adds more network resources it adds more cpu resources the blue line shows us the",
    "start": "1730799",
    "end": "1739520"
  },
  {
    "text": "cost benefit on it so we can kind of look at this and we can figure out where our best cost is",
    "start": "1739520",
    "end": "1746080"
  },
  {
    "text": "based on that and we can see here that our lowest cost point is at the 256 megabyte size",
    "start": "1746080",
    "end": "1752720"
  },
  {
    "text": "uh so that is where our our best cost performance is for this particular function",
    "start": "1752720",
    "end": "1758480"
  },
  {
    "text": "anything beyond that we start to to creep up in cost and uh you start to get minimal returns",
    "start": "1758480",
    "end": "1764960"
  },
  {
    "text": "on in terms of how fast it completes function",
    "start": "1764960",
    "end": "1770480"
  },
  {
    "text": "so let's maybe take a few moments and what we'll do is we will just give me a second here",
    "start": "1771600",
    "end": "1780480"
  },
  {
    "text": "and what we'll do is we'll go through we're going to do a demo on how to deploy this",
    "start": "1780480",
    "end": "1786960"
  },
  {
    "text": "tool to your environment and we will run our other lambda function",
    "start": "1786960",
    "end": "1794159"
  },
  {
    "text": "through this and see how the global function looks",
    "start": "1794159",
    "end": "1800080"
  },
  {
    "text": "okay perfect so we're gonna go into the aws management console",
    "start": "1800559",
    "end": "1805600"
  },
  {
    "text": "and in here we're going to open up the serverless application repository",
    "start": "1805600",
    "end": "1813200"
  },
  {
    "text": "okay and then in here we're going to go into available applications",
    "start": "1820080",
    "end": "1825360"
  },
  {
    "text": "and we're going to do a search in here for aws lambda power tuning",
    "start": "1825360",
    "end": "1831120"
  },
  {
    "text": "okay and one of the things if you don't see it make sure you've checked off the box there",
    "start": "1832559",
    "end": "1838159"
  },
  {
    "text": "because it does create im rolls it won't show up otherwise",
    "start": "1838159",
    "end": "1843440"
  },
  {
    "text": "okay perfect so we're in here so now we've got a bunch of application settings that we can set for",
    "start": "1845200",
    "end": "1851919"
  },
  {
    "text": "for this and they're described in the readme file on the left uh we're going to check off that we",
    "start": "1851919",
    "end": "1858080"
  },
  {
    "text": "acknowledge it's going to create im roles and then we will start the deployment",
    "start": "1858080",
    "end": "1865200"
  },
  {
    "text": "and we can also set some some security boundaries around this because it is going to run our lambda functions we can",
    "start": "1865200",
    "end": "1870399"
  },
  {
    "text": "set what lambda resources are it's allowed to use uh we can also set some permission",
    "start": "1870399",
    "end": "1875440"
  },
  {
    "text": "boundaries as well to help control and prevent problems",
    "start": "1875440",
    "end": "1881120"
  },
  {
    "text": "and so while this is provisioning here we'll look and see okay yeah deployment is running and",
    "start": "1881279",
    "end": "1889600"
  },
  {
    "text": "so this is going to take about 45 seconds and so the serverless application",
    "start": "1890080",
    "end": "1896960"
  },
  {
    "text": "repository is a managed repository uh for our serverless applications and",
    "start": "1896960",
    "end": "1902240"
  },
  {
    "text": "it enables teams and individual developers to store and share reusable applications",
    "start": "1902240",
    "end": "1908240"
  },
  {
    "text": "and easily assemble and deploy serverless architectures in in new ways and using the",
    "start": "1908240",
    "end": "1915279"
  },
  {
    "text": "serverless application repository you don't need to clone build package or publish source code to",
    "start": "1915279",
    "end": "1921840"
  },
  {
    "text": "aws before deploying it instead you can just go and grab pre-built applications from from sar",
    "start": "1921840",
    "end": "1928880"
  },
  {
    "text": "and each application is packaged with an aws serverless application model templates",
    "start": "1928880",
    "end": "1934320"
  },
  {
    "text": "so sam that defines the aws resources used if it's publicly shared it's also going",
    "start": "1934320",
    "end": "1941360"
  },
  {
    "text": "to include links to the application source code so so that it'll be accepted or",
    "start": "1941360",
    "end": "1948080"
  },
  {
    "text": "accessible to you so let's just see where we're at here",
    "start": "1948080",
    "end": "1954480"
  },
  {
    "text": "should be done here in a second",
    "start": "1955120",
    "end": "1958720"
  },
  {
    "text": "there we go completed and so now what we're going to do let's",
    "start": "1960880",
    "end": "1966480"
  },
  {
    "text": "go over and open up step functions",
    "start": "1966480",
    "end": "1977440"
  },
  {
    "text": "and we'll see in here we will have our power tuning state machine",
    "start": "1977440",
    "end": "1984159"
  },
  {
    "text": "okay all right and so let's go in and we will start an execution",
    "start": "1986480",
    "end": "1992159"
  },
  {
    "text": "and what we'll do is we will uh copy and paste uh our json file in here so this is going to use a json file to define",
    "start": "1992159",
    "end": "1999039"
  },
  {
    "text": "what we're testing and we can see here that we've got the the lambda",
    "start": "1999039",
    "end": "2004799"
  },
  {
    "text": "function id we can pick and choose the sizes of the the power values we want to test and",
    "start": "2004799",
    "end": "2012159"
  },
  {
    "text": "if it requires a payload we can put the payload in here for the lambda function ours don't and then we can set a",
    "start": "2012159",
    "end": "2018960"
  },
  {
    "text": "strategy so we can choose either a cost allocations optimization strategy we can",
    "start": "2018960",
    "end": "2025679"
  },
  {
    "text": "choose a performance or we can choose a balanced option in here we're going to choose cost because that's what we're concerned about today",
    "start": "2025679",
    "end": "2033840"
  },
  {
    "text": "and now we'll let this run and so while this is running through uh it's going to it's going to",
    "start": "2033919",
    "end": "2040559"
  },
  {
    "text": "initialize each of those lambda functions a number of times to to come up with our metrics here",
    "start": "2040559",
    "end": "2047039"
  },
  {
    "text": "and because this is a step function and it's all json driven we can look at this tool and",
    "start": "2047039",
    "end": "2053679"
  },
  {
    "text": "we can integrate this into our ci cd pipelines so as your developers are going and",
    "start": "2053679",
    "end": "2058960"
  },
  {
    "text": "deploying new lambda functions into the environment or updating them it can go through and as part of that",
    "start": "2058960",
    "end": "2065679"
  },
  {
    "text": "process optimize and figure out what the the best size is for for the function and automatically size",
    "start": "2065679",
    "end": "2073118"
  },
  {
    "text": "them appropriately so uh it can be a great uh mechanism for you to uh to save some some money automatically",
    "start": "2073119",
    "end": "2083118"
  },
  {
    "text": "so we've completed the execution on this and so if we go to our execution output",
    "start": "2083280",
    "end": "2088320"
  },
  {
    "text": "up above here we'll see uh the output from this so it'll show us the",
    "start": "2088320",
    "end": "2093599"
  },
  {
    "text": "the size that it's recommending what the cost is to run the function and it gives us a link here that we can",
    "start": "2093599",
    "end": "2101040"
  },
  {
    "text": "go and look at the chart that we had previously seen",
    "start": "2101040",
    "end": "2106640"
  },
  {
    "text": "earlier and so we'll put this into our browser",
    "start": "2106640",
    "end": "2111920"
  },
  {
    "text": "there we go and so we can see here what uh the the footprint or or the",
    "start": "2113359",
    "end": "2118480"
  },
  {
    "text": "thumbprint of this uh lambda functions performance looks like so we can see here in this case",
    "start": "2118480",
    "end": "2124079"
  },
  {
    "text": "from a cost perspective this one actually works out better at the 128 megabytes uh for it it's kind of interesting to",
    "start": "2124079",
    "end": "2131920"
  },
  {
    "text": "see how this one differs from the uh the previous example in that for the 256",
    "start": "2131920",
    "end": "2140079"
  },
  {
    "text": "megabyte size it actually performs slower than the 128 megabyte or the the 512",
    "start": "2140079",
    "end": "2146720"
  },
  {
    "text": "so uh it's kind of interesting you can't necessarily assume how the lambda",
    "start": "2146720",
    "end": "2152880"
  },
  {
    "text": "function is going to perform so this is a really great tool to go and get a good",
    "start": "2152880",
    "end": "2158000"
  },
  {
    "text": "understanding of what it looks like and where to size things so",
    "start": "2158000",
    "end": "2163200"
  },
  {
    "text": "really easy to use there you can also give your developers",
    "start": "2164240",
    "end": "2169440"
  },
  {
    "text": "the ability to go into the step function they can put their own json file in there",
    "start": "2169440",
    "end": "2174640"
  },
  {
    "text": "uh but the the uh on the github link that is accessible",
    "start": "2174640",
    "end": "2181440"
  },
  {
    "text": "you can actually go in there and create a web uh front end for this as",
    "start": "2181440",
    "end": "2187280"
  },
  {
    "text": "well if you want to give your developers that sort of access so they can profile functions through development",
    "start": "2187280",
    "end": "2192800"
  },
  {
    "text": "so some some great tools for them",
    "start": "2192800",
    "end": "2200480"
  },
  {
    "text": "all right uh thanks mike for the demos so now i'd like to go through i'd like",
    "start": "2200480",
    "end": "2206079"
  },
  {
    "text": "to go through a few architectural designs on serverless and how builders can be aware of the",
    "start": "2206079",
    "end": "2211280"
  },
  {
    "text": "cause of them so adopting uh the guidance can enable you to build and operate",
    "start": "2211280",
    "end": "2217200"
  },
  {
    "text": "cost aware systems that achieve business outcomes and minimize cost allowing your business to maximize its",
    "start": "2217200",
    "end": "2224240"
  },
  {
    "text": "return on investment and generally speaking uh serverless architectures tend to reduce the cost",
    "start": "2224240",
    "end": "2230000"
  },
  {
    "text": "because some of the services such as aws lambda don't really cost anything while they're",
    "start": "2230000",
    "end": "2235359"
  },
  {
    "text": "idle however following certain best practices and making trade-offs will help you reduce the cost",
    "start": "2235359",
    "end": "2241520"
  },
  {
    "text": "of these solutions even more um i'd like to go through some scenario",
    "start": "2241520",
    "end": "2247760"
  },
  {
    "start": "2245000",
    "end": "2245000"
  },
  {
    "text": "with you uh about waiting in lambda functions that's the first one i'd like to talk",
    "start": "2247760",
    "end": "2253200"
  },
  {
    "text": "about this is something you might want to be aware cost-wise within a",
    "start": "2253200",
    "end": "2258240"
  },
  {
    "text": "single lambda function uh you want to ensure any potential concurrent activities are not scheduled",
    "start": "2258240",
    "end": "2263680"
  },
  {
    "text": "synchronously for example a lambda function might write to an s3 bucket and then write to",
    "start": "2263680",
    "end": "2269200"
  },
  {
    "text": "a dyno db table the two-way states shown in the right on the diagram",
    "start": "2269200",
    "end": "2274960"
  },
  {
    "text": "are compounded because activities are sequential so how do you break the pattern",
    "start": "2274960",
    "end": "2282400"
  },
  {
    "start": "2282000",
    "end": "2282000"
  },
  {
    "text": "well if the tasks are independent that means it can be run in parallel",
    "start": "2282400",
    "end": "2288480"
  },
  {
    "text": "running in parallel would result in the total wait time being set by the single longest running test",
    "start": "2288480",
    "end": "2294240"
  },
  {
    "text": "not added together now uh the s3 put object and dynamo right item calls",
    "start": "2294240",
    "end": "2301359"
  },
  {
    "text": "are running independently of each other and in parallel so the weight duration is reduced",
    "start": "2301359",
    "end": "2308160"
  },
  {
    "text": "now you may ask what if my second test is dependent on the completion of the first text so my dynamodb writing",
    "start": "2308160",
    "end": "2314720"
  },
  {
    "text": "needs to be done after i make sure i reproduce completely i can't really start a second one if you",
    "start": "2314720",
    "end": "2321200"
  },
  {
    "text": "can make sure the first one is absolutely complete uh well so in that case",
    "start": "2321200",
    "end": "2327520"
  },
  {
    "start": "2326000",
    "end": "2326000"
  },
  {
    "text": "uh where the second one depends on the completion of the first one you may be able to still reduce the",
    "start": "2327520",
    "end": "2333839"
  },
  {
    "text": "total waiting time and the cost of the execution by uh splitting the lambda functions",
    "start": "2333839",
    "end": "2339599"
  },
  {
    "text": "in this design the first lambda function responds immediately after putting the object to a three",
    "start": "2339599",
    "end": "2345920"
  },
  {
    "text": "bucket the s3 service invokes the second lambda function which then writes data to the dynamodb",
    "start": "2345920",
    "end": "2353359"
  },
  {
    "text": "table in this approach it minimizes the cost wait time in the lambda function runs",
    "start": "2353359",
    "end": "2361520"
  },
  {
    "start": "2361000",
    "end": "2361000"
  },
  {
    "text": "secondly this model doesn't adopt well for serverless uh",
    "start": "2364079",
    "end": "2370720"
  },
  {
    "text": "development so i think a simple e-commerce application this time consists of three",
    "start": "2370720",
    "end": "2376720"
  },
  {
    "text": "lambda functions that process and other uh first one create an second one process payment and then the",
    "start": "2376720",
    "end": "2383040"
  },
  {
    "text": "third one produce a pdf invoice uh cost wise with lambda you pay",
    "start": "2383040",
    "end": "2389359"
  },
  {
    "text": "for the duration of an invocation so in this example while the creatine invoice function the",
    "start": "2389359",
    "end": "2395520"
  },
  {
    "text": "third one runs the two other functions are also running in a weight state showing right on the diagram now most",
    "start": "2395520",
    "end": "2402560"
  },
  {
    "text": "programming languages support the concept of code synchronously calling functions within codebase",
    "start": "2402560",
    "end": "2408720"
  },
  {
    "text": "in this case the caller waits until the function returns a response this happens on a traditional server or",
    "start": "2408720",
    "end": "2415119"
  },
  {
    "text": "vm your operating system scheduler switch to other available work since there are the",
    "start": "2415119",
    "end": "2421040"
  },
  {
    "text": "code encode on the server or vm whether the cpu right 0 or 100 doesn't really affect the overall",
    "start": "2421040",
    "end": "2427839"
  },
  {
    "text": "cost of your your application you're just paying for the fixed cost of owning and operating a",
    "start": "2427839",
    "end": "2433119"
  },
  {
    "text": "server however in serverless world um example of the three functions here",
    "start": "2433119",
    "end": "2438720"
  },
  {
    "text": "while this synchronous flow may work within a single application on a server it introduced several available",
    "start": "2438720",
    "end": "2445440"
  },
  {
    "text": "avoidable uh problems in a uh distributed serverless architecture",
    "start": "2445440",
    "end": "2450800"
  },
  {
    "text": "and one of the biggest problem is cost with lambda you pay for the duration of an invocation so in",
    "start": "2450800",
    "end": "2456640"
  },
  {
    "text": "this example right you introduce lots of weighting as during the rate",
    "start": "2456640",
    "end": "2462240"
  },
  {
    "text": "and there are also other problems such as the tight coupling of these functions i usually",
    "start": "2462240",
    "end": "2467599"
  },
  {
    "text": "introduce scaling problems and error handling problems so uh let's take a look at the cost so",
    "start": "2467599",
    "end": "2474400"
  },
  {
    "text": "how do we redesign it well you can decoupling using uh",
    "start": "2474400",
    "end": "2480800"
  },
  {
    "start": "2478000",
    "end": "2478000"
  },
  {
    "text": "amazon sqs or using aws step functions so there are two common approaches to",
    "start": "2480800",
    "end": "2486480"
  },
  {
    "text": "avoid this patterns right sqsq would be one so you add a sql sql",
    "start": "2486480",
    "end": "2491920"
  },
  {
    "text": "between your lambda functions especially decouple the two functions that you know introducing your weight states",
    "start": "2491920",
    "end": "2498880"
  },
  {
    "text": "if a downstream process is slower than the app stream process the queue durably persists in this",
    "start": "2498880",
    "end": "2505520"
  },
  {
    "text": "example create other function published a message to aws or amazon sqsq",
    "start": "2505520",
    "end": "2511520"
  },
  {
    "text": "and the process payment function consume the message from the queue the wait time is reduced as the first",
    "start": "2511520",
    "end": "2518319"
  },
  {
    "text": "function create order is no longer waiting for the downstream function to complete cutting unnecessary running time the",
    "start": "2518319",
    "end": "2524880"
  },
  {
    "text": "second function process payment will then publish its response to an uh to a sql sq whether the payment is",
    "start": "2524880",
    "end": "2532079"
  },
  {
    "text": "successful processed and the invoice is successfully successfully created",
    "start": "2532079",
    "end": "2537359"
  },
  {
    "text": "you need to design a mechanism to check the status of them right you can further decoupling your third",
    "start": "2537359",
    "end": "2543839"
  },
  {
    "text": "your second and third functions using the same technique with sqs that being said",
    "start": "2543839",
    "end": "2549359"
  },
  {
    "text": "uh when your system or business logic get complex handling the response checking after decoupling all the functions may",
    "start": "2549359",
    "end": "2556000"
  },
  {
    "text": "become sort of unmanageable then you can use the second common approach which i mentioned earlier aws step",
    "start": "2556000",
    "end": "2562560"
  },
  {
    "text": "functions for complex process with multiple types of failures and retry logic step",
    "start": "2562560",
    "end": "2568480"
  },
  {
    "text": "functions can help reduce the amount of customer custom code needed to oxidate your entire workflow as a",
    "start": "2568480",
    "end": "2576160"
  },
  {
    "text": "result step function observes the work and the robustly handle errors and retries",
    "start": "2576160",
    "end": "2581680"
  },
  {
    "text": "and then your lambda functions uh contains only the bitch's logic not the uh the waiting uh so let's have a quick",
    "start": "2581680",
    "end": "2589440"
  },
  {
    "start": "2589000",
    "end": "2589000"
  },
  {
    "text": "look of step functions you can try implement the design without waiting in",
    "start": "2589440",
    "end": "2594720"
  },
  {
    "text": "lambda at all using aws step functions step functions is a serverless function orchestrator",
    "start": "2594720",
    "end": "2601440"
  },
  {
    "text": "that makes it easy to sequence aws lambda functions and multiple aws services into a business",
    "start": "2601440",
    "end": "2607920"
  },
  {
    "text": "critical application as in the previous e-commerce application example",
    "start": "2607920",
    "end": "2613599"
  },
  {
    "text": "it has long-running process tasks such as processing payment for example whether where you may need to wait for",
    "start": "2613599",
    "end": "2621440"
  },
  {
    "text": "the text completion before processing to the next step this switch state may be uh implemented",
    "start": "2621440",
    "end": "2626960"
  },
  {
    "text": "within the lambda code but is far more efficient to either transform the asynchronous",
    "start": "2626960",
    "end": "2632079"
  },
  {
    "text": "processing using sqs or implement the wait state using the step function shown here",
    "start": "2632079",
    "end": "2638160"
  },
  {
    "text": "for this example in this step function state machine we pull the payment process",
    "start": "2638160",
    "end": "2646240"
  },
  {
    "text": "and review it states every 30 seconds just as an example we can do more",
    "start": "2646240",
    "end": "2651359"
  },
  {
    "text": "frequent than that to see if it has finished so instead of coding this weight within the lambda function we",
    "start": "2651359",
    "end": "2657440"
  },
  {
    "text": "implement this pool decider and with states implementing a weight state with step functions won't",
    "start": "2657440",
    "end": "2664000"
  },
  {
    "text": "incur any further cost as a process as a pricing model for step functions it's based on the number of transitions",
    "start": "2664000",
    "end": "2670160"
  },
  {
    "text": "between the states not on the time spent within the state so waiting in state doesn't cost you anything for step function",
    "start": "2670160",
    "end": "2676880"
  },
  {
    "text": "depending on the integration you have to wait steps functions can also wait synchronously before moving to",
    "start": "2676880",
    "end": "2683119"
  },
  {
    "text": "the next task saving you an additional transition so if the e-commerce application needs",
    "start": "2683119",
    "end": "2689119"
  },
  {
    "text": "to make make sure the payment is processed successfully successfully the invoice is generated and the order",
    "start": "2689119",
    "end": "2696720"
  },
  {
    "text": "is created in the system before sending out an email confirmation so rather than pulling the result",
    "start": "2696720",
    "end": "2702720"
  },
  {
    "text": "at the wait for the final confirmation can also be done within the state machine before it ends",
    "start": "2702720",
    "end": "2710240"
  },
  {
    "text": "there's one last example i'd like to show which is the recursive",
    "start": "2711440",
    "end": "2718240"
  },
  {
    "start": "2715000",
    "end": "2715000"
  },
  {
    "text": "pattern that may cause your lambda function runs away generally as server service or resource",
    "start": "2718240",
    "end": "2724720"
  },
  {
    "text": "that invokes the lambda function should be different to the service or resource that the function",
    "start": "2724720",
    "end": "2730240"
  },
  {
    "text": "outputs to so failure to manage this can result in infinite loops or run away lambda functions and drive up",
    "start": "2730240",
    "end": "2736960"
  },
  {
    "text": "your cost in this example a lambda function raised an",
    "start": "2736960",
    "end": "2742240"
  },
  {
    "text": "object to an s3 bucket which in turn invokes the same lambda function via a put event the invocation",
    "start": "2742240",
    "end": "2749280"
  },
  {
    "text": "causes the second object to be written to the bucket which invokes the same lambda function",
    "start": "2749280",
    "end": "2754400"
  },
  {
    "text": "and it goes on this happens because triggering a lambda function with where an object is created in the",
    "start": "2754400",
    "end": "2761119"
  },
  {
    "text": "s3 bucket uh this this is the same case for dynamodb when a table is updated",
    "start": "2761119",
    "end": "2766800"
  },
  {
    "text": "so having the function modify the data in place will trigger the same function lambda function again so effectively an",
    "start": "2766800",
    "end": "2773920"
  },
  {
    "text": "infinite loop again so both lambda s3 and dynamodb automatically scale based on the traffic",
    "start": "2773920",
    "end": "2780319"
  },
  {
    "text": "so the loop may cause your lambda to scale up really much and consume all the available",
    "start": "2780319",
    "end": "2786079"
  },
  {
    "text": "concurrency s3 uh and that's three will continue to write objects and generate more events",
    "start": "2786079",
    "end": "2791119"
  },
  {
    "text": "for lambda right so what can be done to avoid this situation in the event of your",
    "start": "2791119",
    "end": "2797119"
  },
  {
    "text": "func uh it happens to you and you discover that the lambda function is running away",
    "start": "2797119",
    "end": "2802640"
  },
  {
    "text": "you want to stop it running first right so use this throttle button in your lambda console",
    "start": "2802640",
    "end": "2808480"
  },
  {
    "text": "to scale the function concurrency down to zero it effectively effectively breaks the",
    "start": "2808480",
    "end": "2813839"
  },
  {
    "text": "recursion cycle it's like pressing an emerging stop button this example uses s3 but the risk",
    "start": "2813839",
    "end": "2821119"
  },
  {
    "text": "recursive risk of recursive loops also exists in dynamodb as sqs and other services",
    "start": "2821119",
    "end": "2829280"
  },
  {
    "text": "in most cases it's safer to separate the resources and produce that and consume events from",
    "start": "2829280",
    "end": "2835520"
  },
  {
    "text": "lambda so i use a new s3 bucket to store and",
    "start": "2835520",
    "end": "2840720"
  },
  {
    "text": "modify the output file from the lambda function this would be simply solution as as three storage",
    "start": "2840720",
    "end": "2847839"
  },
  {
    "text": "cost is by the size across all your buckets in account not by the number of buckets you have if",
    "start": "2847839",
    "end": "2854559"
  },
  {
    "text": "you have specific use case that you need a lambda function to write data back to the same resources that",
    "start": "2854559",
    "end": "2860000"
  },
  {
    "text": "invokes the same function ensure that you use a positive trigger for example",
    "start": "2860000",
    "end": "2865040"
  },
  {
    "text": "and that's really triggered may use a naming convention or a meta tag that is only",
    "start": "2865040",
    "end": "2870079"
  },
  {
    "text": "triggered on the first invocation so this prevents objects written from your lambda",
    "start": "2870079",
    "end": "2875440"
  },
  {
    "text": "function invoking the same lambda function again right and there are some other techniques",
    "start": "2875440",
    "end": "2880880"
  },
  {
    "text": "techniques can help you with this kind of scenario so you can use reserve",
    "start": "2880880",
    "end": "2886240"
  },
  {
    "text": "concurrency reserve concurrence you set your function with reserve concurrency to a lower limit that prevents the",
    "start": "2886240",
    "end": "2893040"
  },
  {
    "text": "function from scaling scaling up beyond that limit it does not really prevent the recursion but",
    "start": "2893040",
    "end": "2899520"
  },
  {
    "text": "it limits your resource consumed by uh like uh using a safe safety magnums so this can",
    "start": "2899520",
    "end": "2906079"
  },
  {
    "text": "be useful during uh deployment or test phase so for example if you set your reserve concurrency to 10 for as an",
    "start": "2906079",
    "end": "2913680"
  },
  {
    "text": "example the lambda function will not scale beyond 10 running concurrent",
    "start": "2913680",
    "end": "2919119"
  },
  {
    "text": "or third you can use uh uh a cloud watch monitoring and alarming you can send some set up some logic once",
    "start": "2919119",
    "end": "2926160"
  },
  {
    "text": "your cloud watch triggers an arm when it detects your concurrency",
    "start": "2926160",
    "end": "2931280"
  },
  {
    "text": "went uh beyond a certain point you can do some automation like such a as an automated ram book to",
    "start": "2931280",
    "end": "2937839"
  },
  {
    "text": "to actually scale down your lambda function prevent this from happening",
    "start": "2937839",
    "end": "2943839"
  },
  {
    "text": "um there are two important links that we'd like to share today and guide you through your journey to",
    "start": "2943839",
    "end": "2949200"
  },
  {
    "text": "us or less and lambda we still have a few minutes to take any questions you may have",
    "start": "2949200",
    "end": "2957520"
  },
  {
    "text": "rob h any questions from the audience hey yes we do have one question that",
    "start": "2957520",
    "end": "2963359"
  },
  {
    "text": "came in from mon ramon357 welcome back uh is there a charge for deploying",
    "start": "2963359",
    "end": "2968480"
  },
  {
    "text": "functions as containers in aws lambda perfect yeah i can take that one rob uh",
    "start": "2968480",
    "end": "2975599"
  },
  {
    "text": "yeah so uh containers support has been added to lambda so you can",
    "start": "2975599",
    "end": "2981440"
  },
  {
    "text": "deploy lambda functions as container images up to 10 gigabit gigabytes in size uh in terms of costs",
    "start": "2981440",
    "end": "2988559"
  },
  {
    "text": "around those um there there is no additional cost for using that feature uh but you do pay for uh the the ecr",
    "start": "2988559",
    "end": "2995040"
  },
  {
    "text": "repository and then your your normal uh lambda pricing so uh duration and uh",
    "start": "2995040",
    "end": "3002640"
  },
  {
    "text": "number of uh um requests",
    "start": "3002640",
    "end": "3007838"
  },
  {
    "text": "great thanks mike appreciate that so everyone today we looked at cost management for aws serverless",
    "start": "3009040",
    "end": "3014319"
  },
  {
    "text": "technologies we looked at primarily looking at the cost savings for aws lambda as well as some recommended architectures that can help",
    "start": "3014319",
    "end": "3020720"
  },
  {
    "text": "you to optimize costs and improve performance if there's any questions that were not answered",
    "start": "3020720",
    "end": "3026000"
  },
  {
    "text": "today you can post your questions on forums.aws.amazon.com and please feel free to email us any",
    "start": "3026000",
    "end": "3031839"
  },
  {
    "text": "feedback or show topics to aws supports you at amazon.com we really want to hear",
    "start": "3031839",
    "end": "3037359"
  },
  {
    "text": "from you tell us what you think do would really like to see here uh and thank you again for joining us at aws supports you",
    "start": "3037359",
    "end": "3043599"
  },
  {
    "text": "happy cloud computing thanks everyone yeah",
    "start": "3043599",
    "end": "3051440"
  }
]