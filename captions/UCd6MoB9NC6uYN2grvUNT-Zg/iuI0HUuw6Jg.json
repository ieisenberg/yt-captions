[
  {
    "text": "hi I'm Chad Tindall and I'm a principal",
    "start": "359",
    "end": "2700"
  },
  {
    "text": "nosql specialist solution architect here",
    "start": "2700",
    "end": "4680"
  },
  {
    "text": "at AWS I've been here four years I'm",
    "start": "4680",
    "end": "7259"
  },
  {
    "text": "based out of New York City and I spend",
    "start": "7259",
    "end": "8760"
  },
  {
    "text": "most of my time working with Financial",
    "start": "8760",
    "end": "10200"
  },
  {
    "text": "Service institution customers helping",
    "start": "10200",
    "end": "12719"
  },
  {
    "text": "them to migrate their apps to dynamodb",
    "start": "12719",
    "end": "14820"
  },
  {
    "text": "and optimize their apps once they're in",
    "start": "14820",
    "end": "16800"
  },
  {
    "text": "production",
    "start": "16800",
    "end": "17760"
  },
  {
    "text": "I'll have my colleague introduce himself",
    "start": "17760",
    "end": "19440"
  },
  {
    "text": "and then we'll dive right into the",
    "start": "19440",
    "end": "20760"
  },
  {
    "text": "presentation",
    "start": "20760",
    "end": "22560"
  },
  {
    "text": "hi my name is Sean Shriver and I'm a",
    "start": "22560",
    "end": "25080"
  },
  {
    "text": "dynamodb Solutions architect I have been",
    "start": "25080",
    "end": "27779"
  },
  {
    "text": "with AWS for about nine and a half years",
    "start": "27779",
    "end": "30359"
  },
  {
    "text": "and focused on dynmo DB for about six",
    "start": "30359",
    "end": "33660"
  },
  {
    "text": "and a half years of that time I am based",
    "start": "33660",
    "end": "36239"
  },
  {
    "text": "in Dallas and I work with all sizes of",
    "start": "36239",
    "end": "39360"
  },
  {
    "text": "companies from small businesses all the",
    "start": "39360",
    "end": "42420"
  },
  {
    "text": "way up to Enterprises and help them to",
    "start": "42420",
    "end": "44460"
  },
  {
    "text": "be successful on dynamodb",
    "start": "44460",
    "end": "47640"
  },
  {
    "text": "okay today we're going to be talking",
    "start": "47640",
    "end": "49200"
  },
  {
    "text": "about the cost optimization pillar of",
    "start": "49200",
    "end": "51539"
  },
  {
    "text": "the well architected lens dynamodb is",
    "start": "51539",
    "end": "54300"
  },
  {
    "text": "unique in the sense that it not only",
    "start": "54300",
    "end": "56039"
  },
  {
    "text": "allows you to scale up to meet any",
    "start": "56039",
    "end": "57719"
  },
  {
    "text": "requirements that your applications may",
    "start": "57719",
    "end": "59520"
  },
  {
    "text": "have but it also allows you to very",
    "start": "59520",
    "end": "61320"
  },
  {
    "text": "rapidly scale back down even scaling",
    "start": "61320",
    "end": "63539"
  },
  {
    "text": "your iops down to zero so that you can",
    "start": "63539",
    "end": "65820"
  },
  {
    "text": "really optimize your costs when you're",
    "start": "65820",
    "end": "67740"
  },
  {
    "text": "not using the database very heavily",
    "start": "67740",
    "end": "70200"
  },
  {
    "text": "let's very quickly look at a few design",
    "start": "70200",
    "end": "72720"
  },
  {
    "text": "considerations that we're going to dive",
    "start": "72720",
    "end": "74460"
  },
  {
    "text": "more deeply into as we jump into this",
    "start": "74460",
    "end": "76680"
  },
  {
    "text": "presentation",
    "start": "76680",
    "end": "77880"
  },
  {
    "text": "the most important design consideration",
    "start": "77880",
    "end": "79680"
  },
  {
    "text": "is how you configure Your Capacity mode",
    "start": "79680",
    "end": "82080"
  },
  {
    "text": "for dynamodb there's two capacity modes",
    "start": "82080",
    "end": "84540"
  },
  {
    "text": "on demand capacity and provision",
    "start": "84540",
    "end": "85920"
  },
  {
    "text": "capacity but we always recommend that",
    "start": "85920",
    "end": "88140"
  },
  {
    "text": "customers are either running with",
    "start": "88140",
    "end": "89460"
  },
  {
    "text": "provision capacity with auto scaling",
    "start": "89460",
    "end": "91380"
  },
  {
    "text": "turned on or in the on demand capacity",
    "start": "91380",
    "end": "94259"
  },
  {
    "text": "mode this allows you to have your cost",
    "start": "94259",
    "end": "96180"
  },
  {
    "text": "scale up and down with your applications",
    "start": "96180",
    "end": "98159"
  },
  {
    "text": "utilization of the database",
    "start": "98159",
    "end": "100380"
  },
  {
    "text": "and if you go with the provision",
    "start": "100380",
    "end": "101880"
  },
  {
    "text": "capacity mode you can use this Reserve",
    "start": "101880",
    "end": "104460"
  },
  {
    "text": "capacity which is a reservation bought",
    "start": "104460",
    "end": "107040"
  },
  {
    "text": "in one or three year terms and we'll dig",
    "start": "107040",
    "end": "109860"
  },
  {
    "text": "into that in a little bit but it does",
    "start": "109860",
    "end": "111540"
  },
  {
    "text": "lower your total cost per unit in the",
    "start": "111540",
    "end": "113939"
  },
  {
    "text": "provision capacity mode",
    "start": "113939",
    "end": "115920"
  },
  {
    "text": "there's an alternate storage class you",
    "start": "115920",
    "end": "117899"
  },
  {
    "text": "can use if you have storage which is",
    "start": "117899",
    "end": "120540"
  },
  {
    "text": "kept for long periods of time but",
    "start": "120540",
    "end": "122820"
  },
  {
    "text": "infrequently accessed it's called the",
    "start": "122820",
    "end": "124500"
  },
  {
    "text": "infrequent access storage class and this",
    "start": "124500",
    "end": "126780"
  },
  {
    "text": "is something you want to use if your",
    "start": "126780",
    "end": "127979"
  },
  {
    "text": "storage costs exceed 50 or more of your",
    "start": "127979",
    "end": "131280"
  },
  {
    "text": "throughput cost so we'll look at some",
    "start": "131280",
    "end": "133020"
  },
  {
    "text": "graphs explaining this when we get to",
    "start": "133020",
    "end": "134640"
  },
  {
    "text": "that slide then there are a couple of",
    "start": "134640",
    "end": "136440"
  },
  {
    "text": "design considerations you can use when",
    "start": "136440",
    "end": "138420"
  },
  {
    "text": "you're structuring your data in dynamodb",
    "start": "138420",
    "end": "140459"
  },
  {
    "text": "these are the front-end decisions you",
    "start": "140459",
    "end": "142200"
  },
  {
    "text": "make when you figure out what are my",
    "start": "142200",
    "end": "143760"
  },
  {
    "text": "keys what's my data structure so for",
    "start": "143760",
    "end": "146520"
  },
  {
    "text": "instance you could separate the",
    "start": "146520",
    "end": "148500"
  },
  {
    "text": "frequently changing data such as pricing",
    "start": "148500",
    "end": "150420"
  },
  {
    "text": "information from the metadata such as",
    "start": "150420",
    "end": "153300"
  },
  {
    "text": "links to the images into separate items",
    "start": "153300",
    "end": "155879"
  },
  {
    "text": "under the same partition key or you can",
    "start": "155879",
    "end": "158640"
  },
  {
    "text": "consider separating the less frequently",
    "start": "158640",
    "end": "161220"
  },
  {
    "text": "read attributes into separate rows and",
    "start": "161220",
    "end": "163620"
  },
  {
    "text": "in either way through the data structure",
    "start": "163620",
    "end": "165959"
  },
  {
    "text": "in the design of your schema you can",
    "start": "165959",
    "end": "168840"
  },
  {
    "text": "control your costs and your read",
    "start": "168840",
    "end": "170519"
  },
  {
    "text": "capacity required to read and write your",
    "start": "170519",
    "end": "172500"
  },
  {
    "text": "data in dynamodb because your costs in",
    "start": "172500",
    "end": "175080"
  },
  {
    "text": "dynamodb are based on the size of the",
    "start": "175080",
    "end": "177239"
  },
  {
    "text": "items that you read and write from your",
    "start": "177239",
    "end": "178860"
  },
  {
    "text": "table you want to minimize the size of",
    "start": "178860",
    "end": "181620"
  },
  {
    "text": "those items or rows as much as you can",
    "start": "181620",
    "end": "183540"
  },
  {
    "text": "which means if you have large binary",
    "start": "183540",
    "end": "185459"
  },
  {
    "text": "blobs it might be more cost efficient to",
    "start": "185459",
    "end": "188099"
  },
  {
    "text": "keep those binary blobs somewhere else",
    "start": "188099",
    "end": "189840"
  },
  {
    "text": "in S3 and just store the metadata about",
    "start": "189840",
    "end": "192420"
  },
  {
    "text": "those blobs that you want to display in",
    "start": "192420",
    "end": "194640"
  },
  {
    "text": "your API or on your website or have",
    "start": "194640",
    "end": "197099"
  },
  {
    "text": "people allowed to search and filter on",
    "start": "197099",
    "end": "199019"
  },
  {
    "text": "keep those in dynamodb for very rapid",
    "start": "199019",
    "end": "201780"
  },
  {
    "text": "access and then when they actually need",
    "start": "201780",
    "end": "203760"
  },
  {
    "text": "to see The Blob or download the blob or",
    "start": "203760",
    "end": "206220"
  },
  {
    "text": "whatever it is then you can go to S3 for",
    "start": "206220",
    "end": "208319"
  },
  {
    "text": "that",
    "start": "208319",
    "end": "209159"
  },
  {
    "text": "and also consider the dynamodb item",
    "start": "209159",
    "end": "211860"
  },
  {
    "text": "structure as we'll cover here in a",
    "start": "211860",
    "end": "213659"
  },
  {
    "text": "little bit when we look at a Dynamo DB",
    "start": "213659",
    "end": "215700"
  },
  {
    "text": "item the attribute name is stored",
    "start": "215700",
    "end": "218159"
  },
  {
    "text": "locally at every item so if you have a",
    "start": "218159",
    "end": "220560"
  },
  {
    "text": "hundred byte item that's going to",
    "start": "220560",
    "end": "222360"
  },
  {
    "text": "include the size for your primary key",
    "start": "222360",
    "end": "224400"
  },
  {
    "text": "your attribute names along with the",
    "start": "224400",
    "end": "226680"
  },
  {
    "text": "values so if you actually shrink down",
    "start": "226680",
    "end": "229140"
  },
  {
    "text": "the name of your attributes from say",
    "start": "229140",
    "end": "231599"
  },
  {
    "text": "something like full name quote unquote",
    "start": "231599",
    "end": "233819"
  },
  {
    "text": "to just two letters FN you're going to",
    "start": "233819",
    "end": "236159"
  },
  {
    "text": "shrink that item size and considering",
    "start": "236159",
    "end": "237840"
  },
  {
    "text": "you might have millions or even billions",
    "start": "237840",
    "end": "239459"
  },
  {
    "text": "of items in your dynamodb table that",
    "start": "239459",
    "end": "241680"
  },
  {
    "text": "cost savings adds up to shrink down your",
    "start": "241680",
    "end": "244260"
  },
  {
    "text": "attribute names",
    "start": "244260",
    "end": "245580"
  },
  {
    "text": "and the last bullet point in this slide",
    "start": "245580",
    "end": "247379"
  },
  {
    "text": "is basically pointing out that if you",
    "start": "247379",
    "end": "249480"
  },
  {
    "text": "have large items one way to shrink their",
    "start": "249480",
    "end": "252120"
  },
  {
    "text": "size and therefore reduce your cost is",
    "start": "252120",
    "end": "254220"
  },
  {
    "text": "to compress some of the attributes in",
    "start": "254220",
    "end": "256079"
  },
  {
    "text": "those items that don't need to be",
    "start": "256079",
    "end": "257760"
  },
  {
    "text": "searched or indexed on to make the item",
    "start": "257760",
    "end": "260160"
  },
  {
    "text": "smaller so we have a feature in dynamodb",
    "start": "260160",
    "end": "262979"
  },
  {
    "text": "called time to live and we'll once again",
    "start": "262979",
    "end": "265440"
  },
  {
    "text": "touch on that in a little bit but TTL is",
    "start": "265440",
    "end": "268199"
  },
  {
    "text": "a great feature to control the size of",
    "start": "268199",
    "end": "270360"
  },
  {
    "text": "your table and to remove unwanted data",
    "start": "270360",
    "end": "272820"
  },
  {
    "text": "at no additional cost to you and that's",
    "start": "272820",
    "end": "275639"
  },
  {
    "text": "something that you may want to consider",
    "start": "275639",
    "end": "276900"
  },
  {
    "text": "instead of deleting items which do incur",
    "start": "276900",
    "end": "279240"
  },
  {
    "text": "cost if you do that directly if you're",
    "start": "279240",
    "end": "281460"
  },
  {
    "text": "taking backups of your dynamodb table",
    "start": "281460",
    "end": "283380"
  },
  {
    "text": "one of the features of AWS backup is",
    "start": "283380",
    "end": "285780"
  },
  {
    "text": "called a backup life cycle this allows",
    "start": "285780",
    "end": "287699"
  },
  {
    "text": "you to take backups that roll over to",
    "start": "287699",
    "end": "290340"
  },
  {
    "text": "cheaper storage after a certain period",
    "start": "290340",
    "end": "292139"
  },
  {
    "text": "of time so if you are keeping those",
    "start": "292139",
    "end": "293820"
  },
  {
    "text": "backups for long periods of time then",
    "start": "293820",
    "end": "295979"
  },
  {
    "text": "moving them to cheaper storage may help",
    "start": "295979",
    "end": "297600"
  },
  {
    "text": "you save money in the long run dynamodb",
    "start": "297600",
    "end": "299940"
  },
  {
    "text": "also supports a feature that's common in",
    "start": "299940",
    "end": "303000"
  },
  {
    "text": "other AWS Services where we allow you to",
    "start": "303000",
    "end": "305400"
  },
  {
    "text": "apply tags to your dynamodb table to",
    "start": "305400",
    "end": "308100"
  },
  {
    "text": "allocate costs to different cost centers",
    "start": "308100",
    "end": "310320"
  },
  {
    "text": "and then in the cost and billing",
    "start": "310320",
    "end": "312419"
  },
  {
    "text": "dashboard Aggregate and group data by",
    "start": "312419",
    "end": "315240"
  },
  {
    "text": "those cost allocation tags so we would",
    "start": "315240",
    "end": "317460"
  },
  {
    "text": "consider that you want to use those as",
    "start": "317460",
    "end": "319680"
  },
  {
    "text": "you're structuring your data and",
    "start": "319680",
    "end": "320699"
  },
  {
    "text": "building your tables in Dynamo we'll",
    "start": "320699",
    "end": "323100"
  },
  {
    "text": "look at some examples of using Lambda",
    "start": "323100",
    "end": "325139"
  },
  {
    "text": "event filtering essentially to reduce",
    "start": "325139",
    "end": "327419"
  },
  {
    "text": "the number of Lambda invocations on your",
    "start": "327419",
    "end": "330300"
  },
  {
    "text": "dynamodb and Kinesis stream events",
    "start": "330300",
    "end": "332940"
  },
  {
    "text": "triggered by changes in your dynamodb",
    "start": "332940",
    "end": "335039"
  },
  {
    "text": "table consider using Dax for read heavy",
    "start": "335039",
    "end": "338639"
  },
  {
    "text": "workloads there is a certain trade-off",
    "start": "338639",
    "end": "340800"
  },
  {
    "text": "that our customers find where by using",
    "start": "340800",
    "end": "343440"
  },
  {
    "text": "docs they can provision fewer read",
    "start": "343440",
    "end": "345720"
  },
  {
    "text": "capacity units so down to be accelerator",
    "start": "345720",
    "end": "348180"
  },
  {
    "text": "or in memory right through cash service",
    "start": "348180",
    "end": "350639"
  },
  {
    "text": "is something that you should consider",
    "start": "350639",
    "end": "352500"
  },
  {
    "text": "using to lower your read costs",
    "start": "352500",
    "end": "354660"
  },
  {
    "text": "when you're running queries in dynamodb",
    "start": "354660",
    "end": "357120"
  },
  {
    "text": "you want to maximize the use of a highly",
    "start": "357120",
    "end": "360360"
  },
  {
    "text": "selective key condition expression",
    "start": "360360",
    "end": "362220"
  },
  {
    "text": "essentially this just Narrows down the",
    "start": "362220",
    "end": "365160"
  },
  {
    "text": "number of items that dynamodb needs to",
    "start": "365160",
    "end": "367320"
  },
  {
    "text": "touch while it's building your result",
    "start": "367320",
    "end": "369000"
  },
  {
    "text": "set for the queries that you run and so",
    "start": "369000",
    "end": "371039"
  },
  {
    "text": "the more highly selective your query is",
    "start": "371039",
    "end": "372840"
  },
  {
    "text": "the cheaper your queries are to run when",
    "start": "372840",
    "end": "375060"
  },
  {
    "text": "you build indexes in dynamodb you can",
    "start": "375060",
    "end": "377160"
  },
  {
    "text": "control which attributes from your base",
    "start": "377160",
    "end": "379139"
  },
  {
    "text": "table get copied or projected into the",
    "start": "379139",
    "end": "381840"
  },
  {
    "text": "index so you can actually make your",
    "start": "381840",
    "end": "383699"
  },
  {
    "text": "items in the index smaller than they are",
    "start": "383699",
    "end": "385500"
  },
  {
    "text": "in the base table this allows you to",
    "start": "385500",
    "end": "387539"
  },
  {
    "text": "really control your cost because perhaps",
    "start": "387539",
    "end": "389699"
  },
  {
    "text": "your items in your base table let's say",
    "start": "389699",
    "end": "391620"
  },
  {
    "text": "are 10 or 20 kilobytes So reading them",
    "start": "391620",
    "end": "393720"
  },
  {
    "text": "will have a certain cost associated with",
    "start": "393720",
    "end": "395340"
  },
  {
    "text": "them but if you project them smaller by",
    "start": "395340",
    "end": "397380"
  },
  {
    "text": "stripping out unnecessary attributes",
    "start": "397380",
    "end": "399360"
  },
  {
    "text": "depending on the axis pattern you can",
    "start": "399360",
    "end": "401520"
  },
  {
    "text": "reduce your cost significantly by making",
    "start": "401520",
    "end": "403259"
  },
  {
    "text": "the rows in the index smaller",
    "start": "403259",
    "end": "405300"
  },
  {
    "text": "and you want to keep an eye on what",
    "start": "405300",
    "end": "408300"
  },
  {
    "text": "indexes you have and which ones you're",
    "start": "408300",
    "end": "409979"
  },
  {
    "text": "actually using it's possible that maybe",
    "start": "409979",
    "end": "412259"
  },
  {
    "text": "you needed an index for a certain access",
    "start": "412259",
    "end": "414419"
  },
  {
    "text": "pattern and then a few years go by and",
    "start": "414419",
    "end": "417060"
  },
  {
    "text": "that access pattern gets taken out of",
    "start": "417060",
    "end": "418740"
  },
  {
    "text": "the application but the index that was",
    "start": "418740",
    "end": "420419"
  },
  {
    "text": "built to service it might not get taken",
    "start": "420419",
    "end": "422220"
  },
  {
    "text": "out and it can be sitting there costing",
    "start": "422220",
    "end": "424080"
  },
  {
    "text": "you money even though you're not using",
    "start": "424080",
    "end": "426000"
  },
  {
    "text": "it yeah that's certainly something I've",
    "start": "426000",
    "end": "428039"
  },
  {
    "text": "seen in many of my customers tables as",
    "start": "428039",
    "end": "430740"
  },
  {
    "text": "we review them and we find these indexes",
    "start": "430740",
    "end": "433020"
  },
  {
    "text": "that they actually don't know who made",
    "start": "433020",
    "end": "435000"
  },
  {
    "text": "them and then one thing to consider is",
    "start": "435000",
    "end": "437880"
  },
  {
    "text": "using vpcnpoints dynamodbe today offers",
    "start": "437880",
    "end": "441539"
  },
  {
    "text": "VPC Gateway endpoints to connect your",
    "start": "441539",
    "end": "444419"
  },
  {
    "text": "VPC to the dynamodbe service and that's",
    "start": "444419",
    "end": "447840"
  },
  {
    "text": "provided at no additional cost to you so",
    "start": "447840",
    "end": "450180"
  },
  {
    "text": "you create the VPC Gateway endpoint",
    "start": "450180",
    "end": "452039"
  },
  {
    "text": "attach it to your VPC and then send it",
    "start": "452039",
    "end": "454380"
  },
  {
    "text": "down to be traffic to the down DV",
    "start": "454380",
    "end": "456240"
  },
  {
    "text": "service and that way you don't have to",
    "start": "456240",
    "end": "458099"
  },
  {
    "text": "pay for a Nat Gateway or for any not",
    "start": "458099",
    "end": "461340"
  },
  {
    "text": "instance or anything like that to be",
    "start": "461340",
    "end": "464759"
  },
  {
    "text": "aware though that vpcn points are only",
    "start": "464759",
    "end": "466740"
  },
  {
    "text": "available for dynamodb not for the",
    "start": "466740",
    "end": "469259"
  },
  {
    "text": "download DB streams API it's not",
    "start": "469259",
    "end": "471360"
  },
  {
    "text": "accessible that API is not accessible",
    "start": "471360",
    "end": "473280"
  },
  {
    "text": "over VPC endpoints",
    "start": "473280",
    "end": "475319"
  },
  {
    "text": "okay let's jump into some of the details",
    "start": "475319",
    "end": "477479"
  },
  {
    "text": "for each of these design considerations",
    "start": "477479",
    "end": "479039"
  },
  {
    "text": "and drill down a level deeper we talked",
    "start": "479039",
    "end": "482039"
  },
  {
    "text": "about choosing the right capacity mode",
    "start": "482039",
    "end": "483479"
  },
  {
    "text": "this is Far and Away the most important",
    "start": "483479",
    "end": "485520"
  },
  {
    "text": "decision you have to make in terms of",
    "start": "485520",
    "end": "487199"
  },
  {
    "text": "controlling your costs and optimizing",
    "start": "487199",
    "end": "489060"
  },
  {
    "text": "your costs in dynamodb there's two modes",
    "start": "489060",
    "end": "491460"
  },
  {
    "text": "provision capacity and on-demand",
    "start": "491460",
    "end": "493139"
  },
  {
    "text": "capacity so with provision capacity",
    "start": "493139",
    "end": "495180"
  },
  {
    "text": "you're telling dynamodb at any moment in",
    "start": "495180",
    "end": "497460"
  },
  {
    "text": "time how many reads and writes you want",
    "start": "497460",
    "end": "499919"
  },
  {
    "text": "to be able to service from your table",
    "start": "499919",
    "end": "501720"
  },
  {
    "text": "and we have a functionality that's",
    "start": "501720",
    "end": "504240"
  },
  {
    "text": "paired up with that which is called Auto",
    "start": "504240",
    "end": "505860"
  },
  {
    "text": "scaling so you can tell dynamodb as your",
    "start": "505860",
    "end": "509160"
  },
  {
    "text": "workload increases your reads go up or",
    "start": "509160",
    "end": "511319"
  },
  {
    "text": "your rights go up that auto scaling",
    "start": "511319",
    "end": "513360"
  },
  {
    "text": "should increase the amount that's",
    "start": "513360",
    "end": "514740"
  },
  {
    "text": "provisioned for your table and with on",
    "start": "514740",
    "end": "517020"
  },
  {
    "text": "demand you don't need to tell dynamodb",
    "start": "517020",
    "end": "519719"
  },
  {
    "text": "how much capacity you're going to use",
    "start": "519719",
    "end": "522020"
  },
  {
    "text": "dynamodb just watches your workload and",
    "start": "522020",
    "end": "524760"
  },
  {
    "text": "figures it out unlike provision capacity",
    "start": "524760",
    "end": "527279"
  },
  {
    "text": "where you pay for what you tell dynamodb",
    "start": "527279",
    "end": "529560"
  },
  {
    "text": "to provision for you in on demand mode",
    "start": "529560",
    "end": "531720"
  },
  {
    "text": "you just pay for what you use so if your",
    "start": "531720",
    "end": "533760"
  },
  {
    "text": "workload goes up your costs go up up and",
    "start": "533760",
    "end": "535800"
  },
  {
    "text": "if your workload goes down your iops",
    "start": "535800",
    "end": "537899"
  },
  {
    "text": "cost goes down even including all the",
    "start": "537899",
    "end": "539760"
  },
  {
    "text": "way to zero so if you have periods of",
    "start": "539760",
    "end": "542220"
  },
  {
    "text": "time where you're not servicing any",
    "start": "542220",
    "end": "543839"
  },
  {
    "text": "requests then on demand mode can help",
    "start": "543839",
    "end": "545700"
  },
  {
    "text": "you save money because during those",
    "start": "545700",
    "end": "547140"
  },
  {
    "text": "times you you'll be paying nothing from",
    "start": "547140",
    "end": "548940"
  },
  {
    "text": "an iops perspective yeah and if you're",
    "start": "548940",
    "end": "551339"
  },
  {
    "text": "unsure about which capacity mode to",
    "start": "551339",
    "end": "553500"
  },
  {
    "text": "start with go ahead and begin with on",
    "start": "553500",
    "end": "555600"
  },
  {
    "text": "demand and then monitor the table's",
    "start": "555600",
    "end": "557820"
  },
  {
    "text": "consumption look at the traffic at any",
    "start": "557820",
    "end": "560040"
  },
  {
    "text": "point you can switch back to the",
    "start": "560040",
    "end": "561899"
  },
  {
    "text": "provision mode if you're on on demand",
    "start": "561899",
    "end": "563519"
  },
  {
    "text": "but you know be aware you can only",
    "start": "563519",
    "end": "565380"
  },
  {
    "text": "switch to the on-demand mode hop over",
    "start": "565380",
    "end": "567839"
  },
  {
    "text": "from provision to on-demand mode once",
    "start": "567839",
    "end": "569940"
  },
  {
    "text": "per calendar day yeah it's not uncommon",
    "start": "569940",
    "end": "571920"
  },
  {
    "text": "for new applications to start an",
    "start": "571920",
    "end": "573540"
  },
  {
    "text": "on-demand mode especially if they know",
    "start": "573540",
    "end": "575339"
  },
  {
    "text": "they're going to be lower utilized or",
    "start": "575339",
    "end": "576720"
  },
  {
    "text": "have periods of less downtime and kind",
    "start": "576720",
    "end": "578760"
  },
  {
    "text": "of watch it for a month or two then you",
    "start": "578760",
    "end": "580860"
  },
  {
    "text": "can make a decision whether it makes",
    "start": "580860",
    "end": "582300"
  },
  {
    "text": "sense to switch over or not there's also",
    "start": "582300",
    "end": "584339"
  },
  {
    "text": "workloads for example that have a large",
    "start": "584339",
    "end": "587519"
  },
  {
    "text": "bulk access pattern maybe once a day you",
    "start": "587519",
    "end": "590160"
  },
  {
    "text": "get a nightly drop from another system",
    "start": "590160",
    "end": "592080"
  },
  {
    "text": "and you need to ingest it so we've seen",
    "start": "592080",
    "end": "594420"
  },
  {
    "text": "workloads where they run in on demand",
    "start": "594420",
    "end": "596459"
  },
  {
    "text": "most of the time during the day and then",
    "start": "596459",
    "end": "599100"
  },
  {
    "text": "when they go to run that large bulk job",
    "start": "599100",
    "end": "601320"
  },
  {
    "text": "they'll switch to provision capacity for",
    "start": "601320",
    "end": "603420"
  },
  {
    "text": "some period of time while they do that",
    "start": "603420",
    "end": "605339"
  },
  {
    "text": "maybe it's just for an hour and they'll",
    "start": "605339",
    "end": "607440"
  },
  {
    "text": "do their large bulk job and then they'll",
    "start": "607440",
    "end": "609480"
  },
  {
    "text": "switch back to on-demand mode when that",
    "start": "609480",
    "end": "611760"
  },
  {
    "text": "job is over again like Sean said you're",
    "start": "611760",
    "end": "614339"
  },
  {
    "text": "allowed to do a round trip on demand to",
    "start": "614339",
    "end": "616560"
  },
  {
    "text": "provision capacity and back to On Demand",
    "start": "616560",
    "end": "618480"
  },
  {
    "text": "once every 24 hours",
    "start": "618480",
    "end": "620700"
  },
  {
    "text": "the provision capacity mode is often and",
    "start": "620700",
    "end": "624779"
  },
  {
    "text": "highly recommended that it be used with",
    "start": "624779",
    "end": "626940"
  },
  {
    "text": "the auto scaling feature so what you",
    "start": "626940",
    "end": "629339"
  },
  {
    "text": "normally talk about provision capacity",
    "start": "629339",
    "end": "631080"
  },
  {
    "text": "with auto scaling enabled you can enable",
    "start": "631080",
    "end": "633420"
  },
  {
    "text": "it on the base table and on the global",
    "start": "633420",
    "end": "635519"
  },
  {
    "text": "secondary index",
    "start": "635519",
    "end": "637560"
  },
  {
    "text": "as you configure it you'll have to make",
    "start": "637560",
    "end": "640320"
  },
  {
    "text": "some considerations for example what",
    "start": "640320",
    "end": "643200"
  },
  {
    "text": "should your target utilization be which",
    "start": "643200",
    "end": "645540"
  },
  {
    "text": "is about where the the auto scaling",
    "start": "645540",
    "end": "648360"
  },
  {
    "text": "service wants to have your utilization",
    "start": "648360",
    "end": "649980"
  },
  {
    "text": "at when it looks at your consumed and",
    "start": "649980",
    "end": "652079"
  },
  {
    "text": "provisioned you also want to consider",
    "start": "652079",
    "end": "653880"
  },
  {
    "text": "how much you want to spend which is your",
    "start": "653880",
    "end": "655740"
  },
  {
    "text": "maximum capacity the kind of the upper",
    "start": "655740",
    "end": "657959"
  },
  {
    "text": "limit of the scaling of the table as",
    "start": "657959",
    "end": "660180"
  },
  {
    "text": "well as the minimum capacity and those",
    "start": "660180",
    "end": "662279"
  },
  {
    "text": "three settings the minimum the maximum",
    "start": "662279",
    "end": "663899"
  },
  {
    "text": "the utilization are something that",
    "start": "663899",
    "end": "665940"
  },
  {
    "text": "you're going to adjust over time because",
    "start": "665940",
    "end": "668160"
  },
  {
    "text": "we don't want you to under provision the",
    "start": "668160",
    "end": "671399"
  },
  {
    "text": "table in a way where you could have",
    "start": "671399",
    "end": "673500"
  },
  {
    "text": "search requests and get throttled or",
    "start": "673500",
    "end": "676140"
  },
  {
    "text": "over provision the table say going with",
    "start": "676140",
    "end": "678779"
  },
  {
    "text": "something like a 20 utilization or going",
    "start": "678779",
    "end": "681959"
  },
  {
    "text": "with a high minimum capacity relative to",
    "start": "681959",
    "end": "684779"
  },
  {
    "text": "your normal workload and potentially pay",
    "start": "684779",
    "end": "686820"
  },
  {
    "text": "for a lot of provision capacity that",
    "start": "686820",
    "end": "688440"
  },
  {
    "text": "you're not using so it is definitely a",
    "start": "688440",
    "end": "691079"
  },
  {
    "text": "process that takes work and time but",
    "start": "691079",
    "end": "694260"
  },
  {
    "text": "over time as you get familiar with your",
    "start": "694260",
    "end": "696959"
  },
  {
    "text": "workload you'll be able to tweak your",
    "start": "696959",
    "end": "699300"
  },
  {
    "text": "settings for provision capacity mode to",
    "start": "699300",
    "end": "701579"
  },
  {
    "text": "get the most out of your capacity units",
    "start": "701579",
    "end": "703200"
  },
  {
    "text": "and to limit any waste that you might",
    "start": "703200",
    "end": "705720"
  },
  {
    "text": "see in your unused capacity",
    "start": "705720",
    "end": "708600"
  },
  {
    "text": "and now the rules of thumb for how to",
    "start": "708600",
    "end": "710339"
  },
  {
    "text": "choose from on demand or provision",
    "start": "710339",
    "end": "712260"
  },
  {
    "text": "capacity is that generally speaking new",
    "start": "712260",
    "end": "714600"
  },
  {
    "text": "workloads go with on demand and if",
    "start": "714600",
    "end": "716579"
  },
  {
    "text": "you're unsure about the consumption",
    "start": "716579",
    "end": "718079"
  },
  {
    "text": "patterns then on demand is a great first",
    "start": "718079",
    "end": "720300"
  },
  {
    "text": "choice if you know that your workload is",
    "start": "720300",
    "end": "722880"
  },
  {
    "text": "going to be very bursty in a way where",
    "start": "722880",
    "end": "725519"
  },
  {
    "text": "Auto scaling can't keep up with the",
    "start": "725519",
    "end": "727980"
  },
  {
    "text": "bursts that are coming in then on demand",
    "start": "727980",
    "end": "729959"
  },
  {
    "text": "is a good choice and if you're just sort",
    "start": "729959",
    "end": "732120"
  },
  {
    "text": "of willing to say I don't I just don't",
    "start": "732120",
    "end": "734459"
  },
  {
    "text": "want to think about it and so I'm",
    "start": "734459",
    "end": "736019"
  },
  {
    "text": "willing to pay a little bit of a higher",
    "start": "736019",
    "end": "737519"
  },
  {
    "text": "rate to avoid having to manage my",
    "start": "737519",
    "end": "739320"
  },
  {
    "text": "capacity at all then on demand can be",
    "start": "739320",
    "end": "741240"
  },
  {
    "text": "the right choice provision capacity",
    "start": "741240",
    "end": "743040"
  },
  {
    "text": "works really well if you have workloads",
    "start": "743040",
    "end": "745320"
  },
  {
    "text": "with predictable traffic patterns so you",
    "start": "745320",
    "end": "747420"
  },
  {
    "text": "know what those traffic patterns are",
    "start": "747420",
    "end": "748680"
  },
  {
    "text": "going to be and those patterns have",
    "start": "748680",
    "end": "750540"
  },
  {
    "text": "smooth ramps up and down in a sort of a",
    "start": "750540",
    "end": "753360"
  },
  {
    "text": "sinusoidal type motion where your",
    "start": "753360",
    "end": "755760"
  },
  {
    "text": "customers wake up in the morning and",
    "start": "755760",
    "end": "757680"
  },
  {
    "text": "traffic gradually ramps up and it Peaks",
    "start": "757680",
    "end": "760200"
  },
  {
    "text": "during the day or or in the evening and",
    "start": "760200",
    "end": "762480"
  },
  {
    "text": "then at night when your customers are",
    "start": "762480",
    "end": "764399"
  },
  {
    "text": "signing off or going to sleep traffic",
    "start": "764399",
    "end": "766079"
  },
  {
    "text": "goes back down and if it has this smooth",
    "start": "766079",
    "end": "769019"
  },
  {
    "text": "ramps up and down then provision",
    "start": "769019",
    "end": "770820"
  },
  {
    "text": "capacity with auto scaling generally",
    "start": "770820",
    "end": "772800"
  },
  {
    "text": "works very very well because the auto",
    "start": "772800",
    "end": "774420"
  },
  {
    "text": "scaling has time to react to the traffic",
    "start": "774420",
    "end": "776459"
  },
  {
    "text": "increases that are coming in a smooth",
    "start": "776459",
    "end": "778380"
  },
  {
    "text": "motion and one thing that we see",
    "start": "778380",
    "end": "780540"
  },
  {
    "text": "customers ask us about is if I have a",
    "start": "780540",
    "end": "784440"
  },
  {
    "text": "bulk load that's happening at some point",
    "start": "784440",
    "end": "786240"
  },
  {
    "text": "in the future can I use provision",
    "start": "786240",
    "end": "788279"
  },
  {
    "text": "capacity with auto scaling and the",
    "start": "788279",
    "end": "790320"
  },
  {
    "text": "answer is yes because you can schedule",
    "start": "790320",
    "end": "792360"
  },
  {
    "text": "this scale using the apis for",
    "start": "792360",
    "end": "795600"
  },
  {
    "text": "application Auto scaling dynamodb Auto",
    "start": "795600",
    "end": "797760"
  },
  {
    "text": "scaling uses application Auto scaling so",
    "start": "797760",
    "end": "800880"
  },
  {
    "text": "if you know at midnight of every day",
    "start": "800880",
    "end": "803279"
  },
  {
    "text": "you're going to have a bulk load you can",
    "start": "803279",
    "end": "805320"
  },
  {
    "text": "still use a provision mode by putting a",
    "start": "805320",
    "end": "808019"
  },
  {
    "text": "scheduled action onto the auto scaling",
    "start": "808019",
    "end": "810720"
  },
  {
    "text": "service and that way the table's minimum",
    "start": "810720",
    "end": "814139"
  },
  {
    "text": "capacity will be adjusted so it's not a",
    "start": "814139",
    "end": "817380"
  },
  {
    "text": "I have a spiky workload or I have an ETL",
    "start": "817380",
    "end": "820740"
  },
  {
    "text": "and I need to use on demand kind of",
    "start": "820740",
    "end": "822600"
  },
  {
    "text": "decision",
    "start": "822600",
    "end": "823519"
  },
  {
    "text": "oftentimes the provision capacity with",
    "start": "823519",
    "end": "825899"
  },
  {
    "text": "auto scaling mode can still be used in",
    "start": "825899",
    "end": "828360"
  },
  {
    "text": "the those cases it really just depends",
    "start": "828360",
    "end": "830700"
  },
  {
    "text": "how big is that Spike and how",
    "start": "830700",
    "end": "833160"
  },
  {
    "text": "predictable is that bulk load speaking",
    "start": "833160",
    "end": "835980"
  },
  {
    "text": "of provision capacity we offer",
    "start": "835980",
    "end": "838920"
  },
  {
    "text": "reservations at one or three year terms",
    "start": "838920",
    "end": "841560"
  },
  {
    "text": "to lower your total cost per unit it",
    "start": "841560",
    "end": "843959"
  },
  {
    "text": "requires an upfront commitment and an",
    "start": "843959",
    "end": "847139"
  },
  {
    "text": "upfront cost it can be difficult to",
    "start": "847139",
    "end": "850680"
  },
  {
    "text": "decide how much capacity you need to",
    "start": "850680",
    "end": "852839"
  },
  {
    "text": "purchase but we do have tools available",
    "start": "852839",
    "end": "854940"
  },
  {
    "text": "for you some that are open source that",
    "start": "854940",
    "end": "858300"
  },
  {
    "text": "are going to look at your cost and usage",
    "start": "858300",
    "end": "860579"
  },
  {
    "text": "report data and make a recommendation",
    "start": "860579",
    "end": "862740"
  },
  {
    "text": "about how much reserved capacity you",
    "start": "862740",
    "end": "864779"
  },
  {
    "text": "need to own now if you're familiar with",
    "start": "864779",
    "end": "867600"
  },
  {
    "text": "ec2 Reserve capacity reservations that",
    "start": "867600",
    "end": "871079"
  },
  {
    "text": "knowledge will apply in large part over",
    "start": "871079",
    "end": "873660"
  },
  {
    "text": "to dynamodb but be aware of some",
    "start": "873660",
    "end": "876860"
  },
  {
    "text": "considerations now the first thing is",
    "start": "876860",
    "end": "880019"
  },
  {
    "text": "that these reservations are only",
    "start": "880019",
    "end": "882120"
  },
  {
    "text": "available for provision mode and not for",
    "start": "882120",
    "end": "885060"
  },
  {
    "text": "the on-demand mode in addition Reserve",
    "start": "885060",
    "end": "888480"
  },
  {
    "text": "reservations only apply in the region",
    "start": "888480",
    "end": "891180"
  },
  {
    "text": "where they are purchased so unlike ec2",
    "start": "891180",
    "end": "894180"
  },
  {
    "text": "where you get decide availability Zone",
    "start": "894180",
    "end": "896480"
  },
  {
    "text": "and instance type with dynamodb it is",
    "start": "896480",
    "end": "899760"
  },
  {
    "text": "simply region and capacity mode is",
    "start": "899760",
    "end": "902579"
  },
  {
    "text": "either right units or read units",
    "start": "902579",
    "end": "904199"
  },
  {
    "text": "speaking of right units Reserve capacity",
    "start": "904199",
    "end": "907079"
  },
  {
    "text": "is not available for Global tables which",
    "start": "907079",
    "end": "909120"
  },
  {
    "text": "use an rwcu unit in addition they're not",
    "start": "909120",
    "end": "912300"
  },
  {
    "text": "available for the standard IA table",
    "start": "912300",
    "end": "914459"
  },
  {
    "text": "class so if you have a dynamodb reserve",
    "start": "914459",
    "end": "917040"
  },
  {
    "text": "capacity reservation you cannot apply",
    "start": "917040",
    "end": "919860"
  },
  {
    "text": "that to any tables that are in the",
    "start": "919860",
    "end": "922500"
  },
  {
    "text": "standard IA table class so Reserve",
    "start": "922500",
    "end": "924959"
  },
  {
    "text": "capacity is a great way to save up to",
    "start": "924959",
    "end": "927240"
  },
  {
    "text": "about 74 percent at the three-year term",
    "start": "927240",
    "end": "929459"
  },
  {
    "text": "with the reservation and overall it's",
    "start": "929459",
    "end": "932279"
  },
  {
    "text": "going to allow you to have a lower cost",
    "start": "932279",
    "end": "935100"
  },
  {
    "text": "per unit and that's what you need to",
    "start": "935100",
    "end": "937079"
  },
  {
    "text": "know about Reserve capacity now speaking",
    "start": "937079",
    "end": "939600"
  },
  {
    "text": "of standard IA Chad do you have some",
    "start": "939600",
    "end": "943199"
  },
  {
    "text": "information for us about standard IA",
    "start": "943199",
    "end": "945300"
  },
  {
    "text": "there are two what we call table classes",
    "start": "945300",
    "end": "948360"
  },
  {
    "text": "inside of dynamodb there is the standard",
    "start": "948360",
    "end": "951180"
  },
  {
    "text": "table class which is the normal one",
    "start": "951180",
    "end": "953339"
  },
  {
    "text": "that's what you get by default and then",
    "start": "953339",
    "end": "955199"
  },
  {
    "text": "there's the standard IA or infrequent",
    "start": "955199",
    "end": "957480"
  },
  {
    "text": "access table class the standard IA table",
    "start": "957480",
    "end": "960240"
  },
  {
    "text": "class allows for lower storage costs in",
    "start": "960240",
    "end": "962820"
  },
  {
    "text": "fact 60 percent lower storage cost than",
    "start": "962820",
    "end": "965279"
  },
  {
    "text": "the standard tablecloth class it",
    "start": "965279",
    "end": "967079"
  },
  {
    "text": "provides the same performance so there's",
    "start": "967079",
    "end": "968820"
  },
  {
    "text": "no performance trade-off here this is",
    "start": "968820",
    "end": "970860"
  },
  {
    "text": "literally just a cost model and deciding",
    "start": "970860",
    "end": "973260"
  },
  {
    "text": "how you want to pay for things so the",
    "start": "973260",
    "end": "974940"
  },
  {
    "text": "same performance durability availability",
    "start": "974940",
    "end": "977100"
  },
  {
    "text": "scalability it's all identical if you",
    "start": "977100",
    "end": "979560"
  },
  {
    "text": "switch between standard and standard IA",
    "start": "979560",
    "end": "981720"
  },
  {
    "text": "you won't notice any performance",
    "start": "981720",
    "end": "983339"
  },
  {
    "text": "trade-off even temporarily and there's",
    "start": "983339",
    "end": "985320"
  },
  {
    "text": "no overhead for doing this so this is",
    "start": "985320",
    "end": "987000"
  },
  {
    "text": "just an administrator's choice this",
    "start": "987000",
    "end": "989100"
  },
  {
    "text": "doesn't affect your developers or how",
    "start": "989100",
    "end": "990720"
  },
  {
    "text": "they build their applications or how you",
    "start": "990720",
    "end": "992279"
  },
  {
    "text": "model data you can just point and click",
    "start": "992279",
    "end": "994019"
  },
  {
    "text": "with a single change in the dynamodb",
    "start": "994019",
    "end": "995760"
  },
  {
    "text": "console to switch between standard and",
    "start": "995760",
    "end": "998040"
  },
  {
    "text": "standard IA table class it is fairly",
    "start": "998040",
    "end": "1000500"
  },
  {
    "text": "common for applications to see their",
    "start": "1000500",
    "end": "1002300"
  },
  {
    "text": "storage costs grow over time usually",
    "start": "1002300",
    "end": "1004399"
  },
  {
    "text": "when applications start there's no or",
    "start": "1004399",
    "end": "1006680"
  },
  {
    "text": "very little data inside your dynamodb",
    "start": "1006680",
    "end": "1008600"
  },
  {
    "text": "table and then after a few years of",
    "start": "1008600",
    "end": "1010759"
  },
  {
    "text": "running your application your storage",
    "start": "1010759",
    "end": "1012980"
  },
  {
    "text": "grows and grows as you accumulate more",
    "start": "1012980",
    "end": "1015199"
  },
  {
    "text": "and more data so if when you're looking",
    "start": "1015199",
    "end": "1017000"
  },
  {
    "text": "at your cost and usage report your",
    "start": "1017000",
    "end": "1018860"
  },
  {
    "text": "storage cost exceeds 50 percent of your",
    "start": "1018860",
    "end": "1021740"
  },
  {
    "text": "throughput costs that's sort of the",
    "start": "1021740",
    "end": "1023660"
  },
  {
    "text": "break-even point here and that's when",
    "start": "1023660",
    "end": "1025220"
  },
  {
    "text": "you would want to consider switching",
    "start": "1025220",
    "end": "1026780"
  },
  {
    "text": "from standard to standard IA and that",
    "start": "1026780",
    "end": "1029540"
  },
  {
    "text": "should help lower your total costs over",
    "start": "1029540",
    "end": "1031220"
  },
  {
    "text": "time because presumably your storage",
    "start": "1031220",
    "end": "1033319"
  },
  {
    "text": "costs will continue to grow and grow and",
    "start": "1033319",
    "end": "1035240"
  },
  {
    "text": "grow if this is the situation that you",
    "start": "1035240",
    "end": "1037220"
  },
  {
    "text": "find yourself in",
    "start": "1037220",
    "end": "1038480"
  },
  {
    "text": "all right Chad let's have a conversation",
    "start": "1038480",
    "end": "1040160"
  },
  {
    "text": "about storing large items in dynamodb",
    "start": "1040160",
    "end": "1042500"
  },
  {
    "text": "one of the questions I ask my customers",
    "start": "1042500",
    "end": "1045020"
  },
  {
    "text": "even though it may seem pretty basic is",
    "start": "1045020",
    "end": "1047660"
  },
  {
    "text": "do you actually need to store this data",
    "start": "1047660",
    "end": "1049520"
  },
  {
    "text": "in dynamodb meaning does it need to be",
    "start": "1049520",
    "end": "1051799"
  },
  {
    "text": "persisted in three locations do you need",
    "start": "1051799",
    "end": "1054080"
  },
  {
    "text": "a single digit millisecond latency for",
    "start": "1054080",
    "end": "1056120"
  },
  {
    "text": "retrieval and do you need the durability",
    "start": "1056120",
    "end": "1058220"
  },
  {
    "text": "that dynamodb provides and if we can't",
    "start": "1058220",
    "end": "1061520"
  },
  {
    "text": "check all those boxes then perhaps",
    "start": "1061520",
    "end": "1063799"
  },
  {
    "text": "steinmodb isn't the right place so Chad",
    "start": "1063799",
    "end": "1066080"
  },
  {
    "text": "how would you start it out what are some",
    "start": "1066080",
    "end": "1068120"
  },
  {
    "text": "of the things that you would check to",
    "start": "1068120",
    "end": "1069980"
  },
  {
    "text": "consider is dynamodb the right place",
    "start": "1069980",
    "end": "1072080"
  },
  {
    "text": "maybe is there ways that we can fit the",
    "start": "1072080",
    "end": "1074059"
  },
  {
    "text": "data for an item into dynamodb yeah well",
    "start": "1074059",
    "end": "1077780"
  },
  {
    "text": "obviously we always start this",
    "start": "1077780",
    "end": "1079039"
  },
  {
    "text": "conversation with what is the data model",
    "start": "1079039",
    "end": "1081020"
  },
  {
    "text": "and what are the access patterns is this",
    "start": "1081020",
    "end": "1083419"
  },
  {
    "text": "data that you're going to use frequently",
    "start": "1083419",
    "end": "1084860"
  },
  {
    "text": "and do you need it retrieved very",
    "start": "1084860",
    "end": "1086780"
  },
  {
    "text": "quickly when you do need to use it",
    "start": "1086780",
    "end": "1088340"
  },
  {
    "text": "that's always where we're going to start",
    "start": "1088340",
    "end": "1089539"
  },
  {
    "text": "if it doesn't need to be used frequently",
    "start": "1089539",
    "end": "1091820"
  },
  {
    "text": "or it's okay if it takes a little bit",
    "start": "1091820",
    "end": "1094220"
  },
  {
    "text": "longer to retrieve the large attribute",
    "start": "1094220",
    "end": "1096380"
  },
  {
    "text": "values then potentially you could store",
    "start": "1096380",
    "end": "1098179"
  },
  {
    "text": "those in S3 and just keep the metadata",
    "start": "1098179",
    "end": "1101780"
  },
  {
    "text": "about them in dynamodb so that you can",
    "start": "1101780",
    "end": "1103940"
  },
  {
    "text": "show data about those attributes in your",
    "start": "1103940",
    "end": "1106940"
  },
  {
    "text": "user interface or allow users to search",
    "start": "1106940",
    "end": "1109340"
  },
  {
    "text": "and filter on them that's why you want",
    "start": "1109340",
    "end": "1110960"
  },
  {
    "text": "that stuff in dynamodb and then when",
    "start": "1110960",
    "end": "1112700"
  },
  {
    "text": "they actually go to download or view the",
    "start": "1112700",
    "end": "1114980"
  },
  {
    "text": "large item right then you can pull it",
    "start": "1114980",
    "end": "1116840"
  },
  {
    "text": "from S3 if you do need to keep it inside",
    "start": "1116840",
    "end": "1119480"
  },
  {
    "text": "of dynamodb then sometimes it can be",
    "start": "1119480",
    "end": "1122000"
  },
  {
    "text": "advantageous to split your item into",
    "start": "1122000",
    "end": "1123980"
  },
  {
    "text": "multiple items or multiple rows where",
    "start": "1123980",
    "end": "1126320"
  },
  {
    "text": "you might have the large attributes in a",
    "start": "1126320",
    "end": "1129080"
  },
  {
    "text": "row that isn't written to or read very",
    "start": "1129080",
    "end": "1131660"
  },
  {
    "text": "frequently and then you have the",
    "start": "1131660",
    "end": "1133400"
  },
  {
    "text": "attributes which are written to or read",
    "start": "1133400",
    "end": "1135559"
  },
  {
    "text": "more frequently in a separate row that",
    "start": "1135559",
    "end": "1138080"
  },
  {
    "text": "way when you're reading and writing",
    "start": "1138080",
    "end": "1139640"
  },
  {
    "text": "you're reading and writing a very small",
    "start": "1139640",
    "end": "1141620"
  },
  {
    "text": "row that's the stuff that gets used",
    "start": "1141620",
    "end": "1143360"
  },
  {
    "text": "frequently and then you only need to",
    "start": "1143360",
    "end": "1145520"
  },
  {
    "text": "access the large row which has a higher",
    "start": "1145520",
    "end": "1148160"
  },
  {
    "text": "cost you only need to access that row",
    "start": "1148160",
    "end": "1150080"
  },
  {
    "text": "infrequently and that'll help you save",
    "start": "1150080",
    "end": "1151940"
  },
  {
    "text": "money dynamodb has this concept of",
    "start": "1151940",
    "end": "1154340"
  },
  {
    "text": "grouping items under the same partition",
    "start": "1154340",
    "end": "1156380"
  },
  {
    "text": "key",
    "start": "1156380",
    "end": "1157280"
  },
  {
    "text": "so it's possible to group them here as",
    "start": "1157280",
    "end": "1159860"
  },
  {
    "text": "as you see on the the image on the right",
    "start": "1159860",
    "end": "1162020"
  },
  {
    "text": "hand side they're grouped under the same",
    "start": "1162020",
    "end": "1163760"
  },
  {
    "text": "partition key with different sort keys",
    "start": "1163760",
    "end": "1165740"
  },
  {
    "text": "and that allows me to access both items",
    "start": "1165740",
    "end": "1169520"
  },
  {
    "text": "together if I need to read them both out",
    "start": "1169520",
    "end": "1171559"
  },
  {
    "text": "and I can say get me all the items that",
    "start": "1171559",
    "end": "1173539"
  },
  {
    "text": "have this same partition key and I get",
    "start": "1173539",
    "end": "1175940"
  },
  {
    "text": "all of the items back including the the",
    "start": "1175940",
    "end": "1178700"
  },
  {
    "text": "large item or I can say just get me the",
    "start": "1178700",
    "end": "1181400"
  },
  {
    "text": "item with the metadata sort key and that",
    "start": "1181400",
    "end": "1184160"
  },
  {
    "text": "gets me the small item back when I don't",
    "start": "1184160",
    "end": "1186200"
  },
  {
    "text": "actually need the large blob",
    "start": "1186200",
    "end": "1188660"
  },
  {
    "text": "now let's talk about the shrinking of",
    "start": "1188660",
    "end": "1191419"
  },
  {
    "text": "attribute names every item in dynamodb",
    "start": "1191419",
    "end": "1194059"
  },
  {
    "text": "has a full copy of the attribute names",
    "start": "1194059",
    "end": "1197120"
  },
  {
    "text": "it is like a Json document when we store",
    "start": "1197120",
    "end": "1199520"
  },
  {
    "text": "it in dynamodb and when we bill you it",
    "start": "1199520",
    "end": "1202520"
  },
  {
    "text": "is billed based on the size of that",
    "start": "1202520",
    "end": "1204620"
  },
  {
    "text": "document so in this example what we do",
    "start": "1204620",
    "end": "1207140"
  },
  {
    "text": "is we take something that has full name",
    "start": "1207140",
    "end": "1210140"
  },
  {
    "text": "birth date and home address which are",
    "start": "1210140",
    "end": "1212360"
  },
  {
    "text": "long altitude names and we shrink those",
    "start": "1212360",
    "end": "1214160"
  },
  {
    "text": "down and although for a small number of",
    "start": "1214160",
    "end": "1217220"
  },
  {
    "text": "items in the thousands that byte savings",
    "start": "1217220",
    "end": "1219799"
  },
  {
    "text": "doesn't add up it will quickly add up if",
    "start": "1219799",
    "end": "1222380"
  },
  {
    "text": "say you have a billion items so in this",
    "start": "1222380",
    "end": "1224059"
  },
  {
    "text": "example we shrink these attribute names",
    "start": "1224059",
    "end": "1226400"
  },
  {
    "text": "down which takes our item size from 66",
    "start": "1226400",
    "end": "1228860"
  },
  {
    "text": "bytes down to 44 bytes which leads to a",
    "start": "1228860",
    "end": "1232460"
  },
  {
    "text": "substantial savings and cost and if",
    "start": "1232460",
    "end": "1235100"
  },
  {
    "text": "you're looking to figure out how much",
    "start": "1235100",
    "end": "1236660"
  },
  {
    "text": "would I potentially save in bytes there",
    "start": "1236660",
    "end": "1239299"
  },
  {
    "text": "are some item size calculators out there",
    "start": "1239299",
    "end": "1241340"
  },
  {
    "text": "that you can search for one is the Zack",
    "start": "1241340",
    "end": "1244760"
  },
  {
    "text": "Charles Zac Charles item size calculator",
    "start": "1244760",
    "end": "1248780"
  },
  {
    "text": "uh or you can search for some other ones",
    "start": "1248780",
    "end": "1250700"
  },
  {
    "text": "even our documentation for dynamodb",
    "start": "1250700",
    "end": "1252679"
  },
  {
    "text": "explains the relationship between the",
    "start": "1252679",
    "end": "1255559"
  },
  {
    "text": "length of your attributes and the item",
    "start": "1255559",
    "end": "1257299"
  },
  {
    "text": "size and dynamodb",
    "start": "1257299",
    "end": "1259760"
  },
  {
    "text": "and adjusting your attribute names to be",
    "start": "1259760",
    "end": "1262760"
  },
  {
    "text": "smaller can have a large knock-on effect",
    "start": "1262760",
    "end": "1265039"
  },
  {
    "text": "in this example we see an item that",
    "start": "1265039",
    "end": "1268100"
  },
  {
    "text": "shrank below the 1wc boundary which in",
    "start": "1268100",
    "end": "1270860"
  },
  {
    "text": "dynamodb is 1024 bytes that's what's",
    "start": "1270860",
    "end": "1275120"
  },
  {
    "text": "equal to 1wcu and so the item size",
    "start": "1275120",
    "end": "1278240"
  },
  {
    "text": "shrinks from 1025 bytes to 995 bytes by",
    "start": "1278240",
    "end": "1282320"
  },
  {
    "text": "by going from attribute names like full",
    "start": "1282320",
    "end": "1284179"
  },
  {
    "text": "name down to FN so instead of requiring",
    "start": "1284179",
    "end": "1286100"
  },
  {
    "text": "two wcus to update an item we now only",
    "start": "1286100",
    "end": "1288980"
  },
  {
    "text": "need one wcu and as you can see in this",
    "start": "1288980",
    "end": "1291980"
  },
  {
    "text": "example this leads to a 50 reduction in",
    "start": "1291980",
    "end": "1295220"
  },
  {
    "text": "the right capacity units required on",
    "start": "1295220",
    "end": "1297679"
  },
  {
    "text": "this table so imagine you can say hey I",
    "start": "1297679",
    "end": "1300860"
  },
  {
    "text": "decreased my right class by 50 and that",
    "start": "1300860",
    "end": "1303740"
  },
  {
    "text": "can be done in this example by shrinking",
    "start": "1303740",
    "end": "1306440"
  },
  {
    "text": "your attributes so they're just a little",
    "start": "1306440",
    "end": "1308360"
  },
  {
    "text": "bit smaller so consider the bigger",
    "start": "1308360",
    "end": "1310640"
  },
  {
    "text": "impact that your item structure has on",
    "start": "1310640",
    "end": "1313700"
  },
  {
    "text": "the item size and how that will affect",
    "start": "1313700",
    "end": "1315740"
  },
  {
    "text": "not only your storage and your bytes but",
    "start": "1315740",
    "end": "1319100"
  },
  {
    "text": "also you Your Capacity units and allow",
    "start": "1319100",
    "end": "1321740"
  },
  {
    "text": "you to more efficiently use the capacity",
    "start": "1321740",
    "end": "1323360"
  },
  {
    "text": "units that you have",
    "start": "1323360",
    "end": "1325940"
  },
  {
    "text": "if you have a data model that naturally",
    "start": "1325940",
    "end": "1328100"
  },
  {
    "text": "expires data after a certain amount of",
    "start": "1328100",
    "end": "1330320"
  },
  {
    "text": "time and you want that data to be",
    "start": "1330320",
    "end": "1331820"
  },
  {
    "text": "removed from dynamodb when it's no",
    "start": "1331820",
    "end": "1333799"
  },
  {
    "text": "longer necessary the best way to do that",
    "start": "1333799",
    "end": "1335840"
  },
  {
    "text": "is to use our TTL our time to live",
    "start": "1335840",
    "end": "1338240"
  },
  {
    "text": "feature",
    "start": "1338240",
    "end": "1339440"
  },
  {
    "text": "essentially what you're allowed to do is",
    "start": "1339440",
    "end": "1341240"
  },
  {
    "text": "you're allowed to set an expiration time",
    "start": "1341240",
    "end": "1343400"
  },
  {
    "text": "on a per item basis to tell dynamodb",
    "start": "1343400",
    "end": "1346820"
  },
  {
    "text": "when a particular item should be",
    "start": "1346820",
    "end": "1348380"
  },
  {
    "text": "considered as expired and dynamodb will",
    "start": "1348380",
    "end": "1351500"
  },
  {
    "text": "automatically remove this item from your",
    "start": "1351500",
    "end": "1353600"
  },
  {
    "text": "table after it's considered expired at",
    "start": "1353600",
    "end": "1356179"
  },
  {
    "text": "no cost to you so this is a very very",
    "start": "1356179",
    "end": "1359059"
  },
  {
    "text": "good way to reduce your bill if you have",
    "start": "1359059",
    "end": "1361700"
  },
  {
    "text": "data which you can automatically delete",
    "start": "1361700",
    "end": "1363740"
  },
  {
    "text": "after a certain amount of time",
    "start": "1363740",
    "end": "1366520"
  },
  {
    "text": "dynamodb is supported by the AWS backup",
    "start": "1366520",
    "end": "1369919"
  },
  {
    "text": "service through advanced backups which",
    "start": "1369919",
    "end": "1372380"
  },
  {
    "text": "allow you to schedule and have policies",
    "start": "1372380",
    "end": "1375320"
  },
  {
    "text": "for retaining backups for a certain",
    "start": "1375320",
    "end": "1377720"
  },
  {
    "text": "amount of time in addition it allows you",
    "start": "1377720",
    "end": "1380539"
  },
  {
    "text": "to put retention policies to do cold",
    "start": "1380539",
    "end": "1383480"
  },
  {
    "text": "storage transitions it will allow you to",
    "start": "1383480",
    "end": "1387200"
  },
  {
    "text": "choose your own encryption key in",
    "start": "1387200",
    "end": "1389059"
  },
  {
    "text": "addition to things like copying backups",
    "start": "1389059",
    "end": "1390919"
  },
  {
    "text": "to other Adas accounts or other regions",
    "start": "1390919",
    "end": "1393740"
  },
  {
    "text": "now a cost consideration with the AWS",
    "start": "1393740",
    "end": "1396799"
  },
  {
    "text": "Advanced backups for dynamodbe is that",
    "start": "1396799",
    "end": "1399320"
  },
  {
    "text": "if you need to use cold storage you can",
    "start": "1399320",
    "end": "1401120"
  },
  {
    "text": "do that and it's going to lower your",
    "start": "1401120",
    "end": "1402679"
  },
  {
    "text": "cost per backup however be aware that if",
    "start": "1402679",
    "end": "1406100"
  },
  {
    "text": "you use the cold storage backups you",
    "start": "1406100",
    "end": "1407780"
  },
  {
    "text": "need to retain those for at least 90",
    "start": "1407780",
    "end": "1409820"
  },
  {
    "text": "days so as backups provides a lot more",
    "start": "1409820",
    "end": "1413659"
  },
  {
    "text": "control on where your data is stored in",
    "start": "1413659",
    "end": "1416539"
  },
  {
    "text": "your account or in other accounts or in",
    "start": "1416539",
    "end": "1418640"
  },
  {
    "text": "other AWS regions and it automates the",
    "start": "1418640",
    "end": "1421100"
  },
  {
    "text": "backups for you in addition to lowering",
    "start": "1421100",
    "end": "1423980"
  },
  {
    "text": "your cost for those Cold Storage backups",
    "start": "1423980",
    "end": "1426080"
  },
  {
    "text": "which you need to keep for longer than",
    "start": "1426080",
    "end": "1427580"
  },
  {
    "text": "90 days so be aware of that and how it",
    "start": "1427580",
    "end": "1430340"
  },
  {
    "text": "can help you to lower your cost and also",
    "start": "1430340",
    "end": "1433460"
  },
  {
    "text": "provide you a peace of mind that your",
    "start": "1433460",
    "end": "1436100"
  },
  {
    "text": "data is backed up and reliably stored in",
    "start": "1436100",
    "end": "1440299"
  },
  {
    "text": "encryption in an as backup Vault well",
    "start": "1440299",
    "end": "1443299"
  },
  {
    "text": "dynamodb has this ability to put change",
    "start": "1443299",
    "end": "1446360"
  },
  {
    "text": "event records into either dynamodb",
    "start": "1446360",
    "end": "1448760"
  },
  {
    "text": "stream or into a Kinesis data stream",
    "start": "1448760",
    "end": "1450679"
  },
  {
    "text": "which allows you to trigger Lambda",
    "start": "1450679",
    "end": "1453140"
  },
  {
    "text": "functions anytime your table changes",
    "start": "1453140",
    "end": "1455080"
  },
  {
    "text": "it's not uncommon to only want to",
    "start": "1455080",
    "end": "1457760"
  },
  {
    "text": "trigger Lambda functions on certain",
    "start": "1457760",
    "end": "1459980"
  },
  {
    "text": "types of Events maybe you only want to",
    "start": "1459980",
    "end": "1462260"
  },
  {
    "text": "do a Lambda function when an item gets",
    "start": "1462260",
    "end": "1464840"
  },
  {
    "text": "deleted from your table so that you can",
    "start": "1464840",
    "end": "1466640"
  },
  {
    "text": "archive it over to S3 or something like",
    "start": "1466640",
    "end": "1468860"
  },
  {
    "text": "that but whatever it is if you only want",
    "start": "1468860",
    "end": "1471559"
  },
  {
    "text": "to trigger Lambda functions on certain",
    "start": "1471559",
    "end": "1473299"
  },
  {
    "text": "events you can use this feature of",
    "start": "1473299",
    "end": "1474740"
  },
  {
    "text": "Lambda which is called event filtering",
    "start": "1474740",
    "end": "1476419"
  },
  {
    "text": "which allows you to Define filter",
    "start": "1476419",
    "end": "1478460"
  },
  {
    "text": "criteria so that your Lambda functions",
    "start": "1478460",
    "end": "1480919"
  },
  {
    "text": "only trigger and run on certain events",
    "start": "1480919",
    "end": "1483679"
  },
  {
    "text": "but not all of the events and this can",
    "start": "1483679",
    "end": "1485780"
  },
  {
    "text": "help you lower your bill by just",
    "start": "1485780",
    "end": "1487880"
  },
  {
    "text": "invoking fewer Lambda functions over",
    "start": "1487880",
    "end": "1489559"
  },
  {
    "text": "time",
    "start": "1489559",
    "end": "1491600"
  },
  {
    "text": "when you start the process of applying",
    "start": "1491600",
    "end": "1493760"
  },
  {
    "text": "this well architected lens to your",
    "start": "1493760",
    "end": "1496039"
  },
  {
    "text": "workload these are some questions that",
    "start": "1496039",
    "end": "1497720"
  },
  {
    "text": "you want to ask yourself as you go",
    "start": "1497720",
    "end": "1499580"
  },
  {
    "text": "through that so again the first thing",
    "start": "1499580",
    "end": "1501500"
  },
  {
    "text": "that you want to think about is how do",
    "start": "1501500",
    "end": "1503120"
  },
  {
    "text": "you choose Your Capacity mode for your",
    "start": "1503120",
    "end": "1504620"
  },
  {
    "text": "dynamodb tables and frequently this will",
    "start": "1504620",
    "end": "1507080"
  },
  {
    "text": "be based around the traffic pattern",
    "start": "1507080",
    "end": "1509179"
  },
  {
    "text": "that's coming into your workload is it",
    "start": "1509179",
    "end": "1511760"
  },
  {
    "text": "relatively predictable with smooth ramps",
    "start": "1511760",
    "end": "1513919"
  },
  {
    "text": "up and down in traffic then you might",
    "start": "1513919",
    "end": "1516260"
  },
  {
    "text": "prefer provision capacity with auto",
    "start": "1516260",
    "end": "1518360"
  },
  {
    "text": "scaling turned on is your workload",
    "start": "1518360",
    "end": "1520340"
  },
  {
    "text": "unpredictable and spiky then you",
    "start": "1520340",
    "end": "1523340"
  },
  {
    "text": "probably want to use on-demand capacity",
    "start": "1523340",
    "end": "1525080"
  },
  {
    "text": "and if something changes then you can",
    "start": "1525080",
    "end": "1527480"
  },
  {
    "text": "change which capacity mode you're using",
    "start": "1527480",
    "end": "1529159"
  },
  {
    "text": "that's not a problem there's no cost to",
    "start": "1529159",
    "end": "1530960"
  },
  {
    "text": "change it you're allowed to change it",
    "start": "1530960",
    "end": "1532279"
  },
  {
    "text": "back and forth once a day so you could",
    "start": "1532279",
    "end": "1534200"
  },
  {
    "text": "always start with one and then",
    "start": "1534200",
    "end": "1535520"
  },
  {
    "text": "transition to another if you feel like",
    "start": "1535520",
    "end": "1537320"
  },
  {
    "text": "that's more appropriate you want to",
    "start": "1537320",
    "end": "1539179"
  },
  {
    "text": "consider how you will store maybe older",
    "start": "1539179",
    "end": "1542240"
  },
  {
    "text": "data or colder data in dynamodb and",
    "start": "1542240",
    "end": "1545000"
  },
  {
    "text": "consider using the standard IA table",
    "start": "1545000",
    "end": "1546980"
  },
  {
    "text": "class",
    "start": "1546980",
    "end": "1548360"
  },
  {
    "text": "does your workload have a lot of update",
    "start": "1548360",
    "end": "1550279"
  },
  {
    "text": "operations to get applied to the data if",
    "start": "1550279",
    "end": "1552860"
  },
  {
    "text": "so you might want to consider splitting",
    "start": "1552860",
    "end": "1555080"
  },
  {
    "text": "those items that have a lot of updates",
    "start": "1555080",
    "end": "1557059"
  },
  {
    "text": "into two parts the part that changes",
    "start": "1557059",
    "end": "1560000"
  },
  {
    "text": "frequently and the part that doesn't",
    "start": "1560000",
    "end": "1561679"
  },
  {
    "text": "change frequently and this can allow you",
    "start": "1561679",
    "end": "1563539"
  },
  {
    "text": "to lower your right cost by having the",
    "start": "1563539",
    "end": "1565279"
  },
  {
    "text": "item that changes frequently be as small",
    "start": "1565279",
    "end": "1567320"
  },
  {
    "text": "as possible",
    "start": "1567320",
    "end": "1568460"
  },
  {
    "text": "and consider the life cycle of data in",
    "start": "1568460",
    "end": "1570860"
  },
  {
    "text": "your dynamodb table if you have unwanted",
    "start": "1570860",
    "end": "1573799"
  },
  {
    "text": "data that you want to remove consider",
    "start": "1573799",
    "end": "1575480"
  },
  {
    "text": "using TTL",
    "start": "1575480",
    "end": "1576860"
  },
  {
    "text": "and dynamodb will remove that data from",
    "start": "1576860",
    "end": "1579440"
  },
  {
    "text": "your table at no additional cost",
    "start": "1579440",
    "end": "1581659"
  },
  {
    "text": "speaking of cost in order to monitor",
    "start": "1581659",
    "end": "1584600"
  },
  {
    "text": "usage and cost for dynamodb enable the",
    "start": "1584600",
    "end": "1587120"
  },
  {
    "text": "costs and usage reports which provide",
    "start": "1587120",
    "end": "1589400"
  },
  {
    "text": "data on how you are spending money on",
    "start": "1589400",
    "end": "1591679"
  },
  {
    "text": "dynamodb which is important for making",
    "start": "1591679",
    "end": "1593419"
  },
  {
    "text": "decisions like should I be using a",
    "start": "1593419",
    "end": "1595340"
  },
  {
    "text": "standard IA table class the dynamodb",
    "start": "1595340",
    "end": "1597980"
  },
  {
    "text": "billing data can be visualized in the",
    "start": "1597980",
    "end": "1600500"
  },
  {
    "text": "cost Explorer and the cost allocation",
    "start": "1600500",
    "end": "1602900"
  },
  {
    "text": "tags will allow you to group your data",
    "start": "1602900",
    "end": "1604580"
  },
  {
    "text": "and visualize and allocate your cost for",
    "start": "1604580",
    "end": "1607340"
  },
  {
    "text": "a dynamodb table to a particular",
    "start": "1607340",
    "end": "1609320"
  },
  {
    "text": "application or business unit",
    "start": "1609320",
    "end": "1611779"
  },
  {
    "text": "understanding your backup policy is",
    "start": "1611779",
    "end": "1613820"
  },
  {
    "text": "important for optimizing the costs of",
    "start": "1613820",
    "end": "1616460"
  },
  {
    "text": "those backups for example how often do",
    "start": "1616460",
    "end": "1618320"
  },
  {
    "text": "you need to take the backups and how",
    "start": "1618320",
    "end": "1619760"
  },
  {
    "text": "long do you need to retain them for if",
    "start": "1619760",
    "end": "1622100"
  },
  {
    "text": "you have backups that need to be",
    "start": "1622100",
    "end": "1623419"
  },
  {
    "text": "retained for 90 days or more it can be",
    "start": "1623419",
    "end": "1625640"
  },
  {
    "text": "cost effective to transition those",
    "start": "1625640",
    "end": "1627140"
  },
  {
    "text": "backups over to cold storage and this is",
    "start": "1627140",
    "end": "1629480"
  },
  {
    "text": "something that the AWS Backup Service",
    "start": "1629480",
    "end": "1630980"
  },
  {
    "text": "can help you achieve considered using",
    "start": "1630980",
    "end": "1633140"
  },
  {
    "text": "dynodeb accelerator or Dax for heavily",
    "start": "1633140",
    "end": "1636500"
  },
  {
    "text": "read skewed workloads so if you have a",
    "start": "1636500",
    "end": "1639799"
  },
  {
    "text": "lot of reads on frequently accessed data",
    "start": "1639799",
    "end": "1642740"
  },
  {
    "text": "consider using Darwin DB accelerator for",
    "start": "1642740",
    "end": "1644960"
  },
  {
    "text": "that usually when you go and map out all",
    "start": "1644960",
    "end": "1647720"
  },
  {
    "text": "the access patterns for your application",
    "start": "1647720",
    "end": "1649279"
  },
  {
    "text": "some of those access patterns get used",
    "start": "1649279",
    "end": "1651140"
  },
  {
    "text": "more frequently than others and you",
    "start": "1651140",
    "end": "1653600"
  },
  {
    "text": "really want to take a look at the most",
    "start": "1653600",
    "end": "1655340"
  },
  {
    "text": "frequently used access patterns and make",
    "start": "1655340",
    "end": "1657500"
  },
  {
    "text": "sure they are using the most highly",
    "start": "1657500",
    "end": "1659659"
  },
  {
    "text": "efficient key condition expression to",
    "start": "1659659",
    "end": "1662240"
  },
  {
    "text": "avoid expensive scan and filter",
    "start": "1662240",
    "end": "1663919"
  },
  {
    "text": "operations when running queries for",
    "start": "1663919",
    "end": "1666080"
  },
  {
    "text": "those access patterns and at the end of",
    "start": "1666080",
    "end": "1668360"
  },
  {
    "text": "your optimizations once you have enough",
    "start": "1668360",
    "end": "1671000"
  },
  {
    "text": "billing data to see what your normal",
    "start": "1671000",
    "end": "1673400"
  },
  {
    "text": "utilization will be in the provision",
    "start": "1673400",
    "end": "1675020"
  },
  {
    "text": "mode consider purchasing reserved",
    "start": "1675020",
    "end": "1677419"
  },
  {
    "text": "capacity using the tooling that AWS has",
    "start": "1677419",
    "end": "1680059"
  },
  {
    "text": "provided to find the right amount",
    "start": "1680059",
    "end": "1681980"
  },
  {
    "text": "capacity to own to lower your total cost",
    "start": "1681980",
    "end": "1684559"
  },
  {
    "text": "per unit on dynamodb tables remembering",
    "start": "1684559",
    "end": "1688279"
  },
  {
    "text": "that standard IA cannot use Reserve",
    "start": "1688279",
    "end": "1691220"
  },
  {
    "text": "capacity nor can Global tables or of",
    "start": "1691220",
    "end": "1693919"
  },
  {
    "text": "course on-demand usage",
    "start": "1693919",
    "end": "1695960"
  },
  {
    "text": "optimizing your cost is an important",
    "start": "1695960",
    "end": "1697880"
  },
  {
    "text": "part of using any AWS service dynamodb",
    "start": "1697880",
    "end": "1700279"
  },
  {
    "text": "included and it involves a mixture of",
    "start": "1700279",
    "end": "1702200"
  },
  {
    "text": "proper schema design based on your",
    "start": "1702200",
    "end": "1704360"
  },
  {
    "text": "access patterns so that you can service",
    "start": "1704360",
    "end": "1706400"
  },
  {
    "text": "those access patterns most efficiently",
    "start": "1706400",
    "end": "1708200"
  },
  {
    "text": "as well as using the proper table",
    "start": "1708200",
    "end": "1710000"
  },
  {
    "text": "settings based on your application's",
    "start": "1710000",
    "end": "1711799"
  },
  {
    "text": "requirements thanks for listening and",
    "start": "1711799",
    "end": "1714140"
  },
  {
    "text": "hopefully you picked up a few tricks to",
    "start": "1714140",
    "end": "1715460"
  },
  {
    "text": "save some money along the way",
    "start": "1715460",
    "end": "1718480"
  }
]