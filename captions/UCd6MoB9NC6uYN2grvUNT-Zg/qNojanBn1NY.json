[
  {
    "start": "0",
    "end": "16000"
  },
  {
    "text": "[Music]",
    "start": "430",
    "end": "4430"
  },
  {
    "text": "hi i'm jane from amazon web services",
    "start": "6170",
    "end": "8960"
  },
  {
    "text": "today i'm going to walk you through how",
    "start": "8960",
    "end": "11160"
  },
  {
    "text": "to use AWS glue to manage the metadata",
    "start": "11160",
    "end": "13710"
  },
  {
    "text": "associated with your data on AWS AWS",
    "start": "13710",
    "end": "17340"
  },
  {
    "start": "16000",
    "end": "54000"
  },
  {
    "text": "glue is a serverless fully managed and",
    "start": "17340",
    "end": "19830"
  },
  {
    "text": "cloud optimized extract transform and",
    "start": "19830",
    "end": "22350"
  },
  {
    "text": "load or ETL service it provides",
    "start": "22350",
    "end": "24390"
  },
  {
    "text": "automatic schema inference for your semi",
    "start": "24390",
    "end": "27000"
  },
  {
    "text": "structured and structured data sets glue",
    "start": "27000",
    "end": "29580"
  },
  {
    "text": "will help you understand your data",
    "start": "29580",
    "end": "30779"
  },
  {
    "text": "suggest transformations and generate ETL",
    "start": "30779",
    "end": "33690"
  },
  {
    "text": "scripts for you so you spend less time",
    "start": "33690",
    "end": "35489"
  },
  {
    "text": "hand coding glue will also run your ETL",
    "start": "35489",
    "end": "38219"
  },
  {
    "text": "jobs automatically provisioning and",
    "start": "38219",
    "end": "40050"
  },
  {
    "text": "scaling the resources needed to complete",
    "start": "40050",
    "end": "42000"
  },
  {
    "text": "them I'm going to focus on how glue",
    "start": "42000",
    "end": "44610"
  },
  {
    "text": "automatically identifies data formats",
    "start": "44610",
    "end": "46620"
  },
  {
    "text": "and schemas and then builds a metadata",
    "start": "46620",
    "end": "48780"
  },
  {
    "text": "repository thereby eliminating the need",
    "start": "48780",
    "end": "51390"
  },
  {
    "text": "to manually define and maintain schemas",
    "start": "51390",
    "end": "54230"
  },
  {
    "start": "54000",
    "end": "82000"
  },
  {
    "text": "let's look at an example assume that I'm",
    "start": "54230",
    "end": "57480"
  },
  {
    "text": "a data scientist for an airline and I've",
    "start": "57480",
    "end": "59489"
  },
  {
    "text": "been asked to analyze flight data to",
    "start": "59489",
    "end": "61260"
  },
  {
    "text": "determine the popularity of various",
    "start": "61260",
    "end": "62910"
  },
  {
    "text": "airports",
    "start": "62910",
    "end": "63660"
  },
  {
    "text": "I've files stored in Amazon s3",
    "start": "63660",
    "end": "65909"
  },
  {
    "text": "containing flight data for the year 2016",
    "start": "65909",
    "end": "68700"
  },
  {
    "text": "the flights are partitioned by month to",
    "start": "68700",
    "end": "71250"
  },
  {
    "text": "help organize the data and make it easy",
    "start": "71250",
    "end": "73080"
  },
  {
    "text": "and fast to access the data is stored in",
    "start": "73080",
    "end": "75930"
  },
  {
    "text": "CSV format and is organized according to",
    "start": "75930",
    "end": "78150"
  },
  {
    "text": "fields such as year flight date airline",
    "start": "78150",
    "end": "80220"
  },
  {
    "text": "ID and flight number let's see how Glu",
    "start": "80220",
    "end": "83729"
  },
  {
    "text": "can automatically infer the data format",
    "start": "83729",
    "end": "85770"
  },
  {
    "text": "schema and partitions of this data and",
    "start": "85770",
    "end": "87659"
  },
  {
    "text": "create a corresponding table entry in",
    "start": "87659",
    "end": "89640"
  },
  {
    "text": "the Glu data catalog the data catalog is",
    "start": "89640",
    "end": "92310"
  },
  {
    "text": "a metadata repository that can also",
    "start": "92310",
    "end": "94110"
  },
  {
    "text": "serve as a drop-in replacement for hive",
    "start": "94110",
    "end": "96090"
  },
  {
    "text": "meta store crawlers or programs that run",
    "start": "96090",
    "end": "98820"
  },
  {
    "text": "through your data and infer their",
    "start": "98820",
    "end": "100350"
  },
  {
    "text": "schemas and partitions let's get started",
    "start": "100350",
    "end": "103110"
  },
  {
    "text": "by logging into the AWS management",
    "start": "103110",
    "end": "104820"
  },
  {
    "text": "console and navigate to Glu first I'm",
    "start": "104820",
    "end": "110700"
  },
  {
    "text": "going to create a crawler for my flight",
    "start": "110700",
    "end": "112470"
  },
  {
    "text": "data I'll name the crawler flights",
    "start": "112470",
    "end": "114810"
  },
  {
    "text": "crawler I'll pick the I am role for the",
    "start": "114810",
    "end": "117869"
  },
  {
    "text": "crawler this role provides the crawler",
    "start": "117869",
    "end": "120149"
  },
  {
    "text": "with permissions to access the data",
    "start": "120149",
    "end": "121950"
  },
  {
    "text": "store crawlers can infer the schemas of",
    "start": "121950",
    "end": "125040"
  },
  {
    "text": "several popular data formats including",
    "start": "125040",
    "end": "127140"
  },
  {
    "text": "JSON park' csv and those of relational",
    "start": "127140",
    "end": "130349"
  },
  {
    "text": "stores if i have a custom file format",
    "start": "130349",
    "end": "132870"
  },
  {
    "text": "that",
    "start": "132870",
    "end": "133270"
  },
  {
    "text": "doesn't recognize by default I can",
    "start": "133270",
    "end": "135400"
  },
  {
    "text": "create a classifier with a croc",
    "start": "135400",
    "end": "136900"
  },
  {
    "text": "expression and associated with the",
    "start": "136900",
    "end": "139060"
  },
  {
    "text": "crawler right now I'm dealing with the",
    "start": "139060",
    "end": "141070"
  },
  {
    "text": "CSV data that glue recognizes so I'm not",
    "start": "141070",
    "end": "143860"
  },
  {
    "text": "going to add a custom classifier next",
    "start": "143860",
    "end": "146680"
  },
  {
    "text": "I'm going to specify the Amazon s3 path",
    "start": "146680",
    "end": "149260"
  },
  {
    "text": "where my data is located I can use the",
    "start": "149260",
    "end": "152200"
  },
  {
    "text": "s3 picker for this or just paste the",
    "start": "152200",
    "end": "154330"
  },
  {
    "text": "path if my data exists across multiple",
    "start": "154330",
    "end": "157360"
  },
  {
    "text": "sources for example s3 Amazon RDS and",
    "start": "157360",
    "end": "160840"
  },
  {
    "text": "Amazon redshift I could add additional",
    "start": "160840",
    "end": "162820"
  },
  {
    "text": "data stores to the crawler for now let",
    "start": "162820",
    "end": "165700"
  },
  {
    "text": "me stick with s3 I can choose to run",
    "start": "165700",
    "end": "169000"
  },
  {
    "text": "this crawler on demand or on schedule",
    "start": "169000",
    "end": "171250"
  },
  {
    "text": "automatically scheduling a crawler helps",
    "start": "171250",
    "end": "173590"
  },
  {
    "text": "me identify any changes to the data and",
    "start": "173590",
    "end": "175630"
  },
  {
    "text": "keeps the data catalog up to date which",
    "start": "175630",
    "end": "177880"
  },
  {
    "text": "is especially helpful for change data",
    "start": "177880",
    "end": "179680"
  },
  {
    "text": "management I'll run it on demand for now",
    "start": "179680",
    "end": "182170"
  },
  {
    "text": "I want my inferred tables to be created",
    "start": "182170",
    "end": "185710"
  },
  {
    "text": "in flights DB database which I will",
    "start": "185710",
    "end": "188470"
  },
  {
    "text": "create now a database is a container of",
    "start": "188470",
    "end": "191800"
  },
  {
    "text": "tables in the data catalog I'm going to",
    "start": "191800",
    "end": "194800"
  },
  {
    "text": "specify a prefix flights so all the",
    "start": "194800",
    "end": "198130"
  },
  {
    "text": "tables created by the crawler contain",
    "start": "198130",
    "end": "199840"
  },
  {
    "text": "this prefix for easy identification I'd",
    "start": "199840",
    "end": "202690"
  },
  {
    "text": "like to call out one important feature",
    "start": "202690",
    "end": "204400"
  },
  {
    "text": "here crawlers can handle changes to the",
    "start": "204400",
    "end": "206860"
  },
  {
    "text": "schemas this ensures my metadata is",
    "start": "206860",
    "end": "209500"
  },
  {
    "text": "always in sync with the underlying data",
    "start": "209500",
    "end": "211320"
  },
  {
    "text": "the default settings allow my crawlers",
    "start": "211320",
    "end": "213940"
  },
  {
    "text": "to modify my catalogue schemas if the",
    "start": "213940",
    "end": "216010"
  },
  {
    "text": "underlying data is updated or deleted I",
    "start": "216010",
    "end": "218260"
  },
  {
    "text": "could choose to set my crawler to ignore",
    "start": "218260",
    "end": "220870"
  },
  {
    "text": "these schema changes instead let's",
    "start": "220870",
    "end": "223480"
  },
  {
    "text": "review the crawler specifications and",
    "start": "223480",
    "end": "225430"
  },
  {
    "text": "create the crawler the crawler has been",
    "start": "225430",
    "end": "228550"
  },
  {
    "text": "created let's run it the crawler is now",
    "start": "228550",
    "end": "232780"
  },
  {
    "text": "running its status is starting 13",
    "start": "232780",
    "end": "237550"
  },
  {
    "text": "seconds have elapsed the crawler has",
    "start": "237550",
    "end": "241060"
  },
  {
    "text": "completed running and it created one",
    "start": "241060",
    "end": "243400"
  },
  {
    "text": "table in the data catalog the table is a",
    "start": "243400",
    "end": "246250"
  },
  {
    "text": "metadata representation of data and",
    "start": "246250",
    "end": "248260"
  },
  {
    "text": "points to the location where the data is",
    "start": "248260",
    "end": "250300"
  },
  {
    "text": "physically located let's find that table",
    "start": "250300",
    "end": "252820"
  },
  {
    "text": "and take a look at its schema the",
    "start": "252820",
    "end": "254830"
  },
  {
    "text": "inferred schema matches the schema of",
    "start": "254830",
    "end": "256630"
  },
  {
    "text": "the data we saw in the CSV file I can",
    "start": "256630",
    "end": "259840"
  },
  {
    "text": "edit the schema let me change the data",
    "start": "259840",
    "end": "262210"
  },
  {
    "text": "type of column year from big int to int",
    "start": "262210",
    "end": "265910"
  },
  {
    "text": "I'm saving this to create a new version",
    "start": "265910",
    "end": "267890"
  },
  {
    "text": "of the table I can also compare schemas",
    "start": "267890",
    "end": "270680"
  },
  {
    "text": "between two different versions here I",
    "start": "270680",
    "end": "272780"
  },
  {
    "text": "can see the change that I made to the",
    "start": "272780",
    "end": "274340"
  },
  {
    "text": "data type I can also view the partitions",
    "start": "274340",
    "end": "278150"
  },
  {
    "text": "associated with the table and the",
    "start": "278150",
    "end": "279530"
  },
  {
    "text": "properties of those partitions now that",
    "start": "279530",
    "end": "281450"
  },
  {
    "text": "my table is defined in catalog I can",
    "start": "281450",
    "end": "283850"
  },
  {
    "text": "query it using Amazon Athena or Amazon",
    "start": "283850",
    "end": "286520"
  },
  {
    "text": "redshift spectrum both products allow",
    "start": "286520",
    "end": "288920"
  },
  {
    "text": "you to query data in s3 we've seen how",
    "start": "288920",
    "end": "291770"
  },
  {
    "start": "290000",
    "end": "320000"
  },
  {
    "text": "glue makes it easy to crawl data and",
    "start": "291770",
    "end": "293570"
  },
  {
    "text": "maintain metadata information in the",
    "start": "293570",
    "end": "295460"
  },
  {
    "text": "data catalog however there are other",
    "start": "295460",
    "end": "297830"
  },
  {
    "text": "ways to populate your catalog with",
    "start": "297830",
    "end": "299480"
  },
  {
    "text": "tables you can manually define the table",
    "start": "299480",
    "end": "302030"
  },
  {
    "text": "import from an external hive meta store",
    "start": "302030",
    "end": "304340"
  },
  {
    "text": "or you can run hive data definition",
    "start": "304340",
    "end": "306710"
  },
  {
    "text": "language queries to learn more please",
    "start": "306710",
    "end": "309380"
  },
  {
    "text": "visit aws.amazon.com slash glue thanks",
    "start": "309380",
    "end": "313520"
  },
  {
    "text": "for watching",
    "start": "313520",
    "end": "316030"
  },
  {
    "text": "you",
    "start": "317460",
    "end": "317920"
  },
  {
    "text": "[Music]",
    "start": "317920",
    "end": "321629"
  }
]