[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "3960"
  },
  {
    "text": "hello my name is Pierce tech Meyer I am",
    "start": "6109",
    "end": "9780"
  },
  {
    "text": "a Solutions Architect for Amazon Web",
    "start": "9780",
    "end": "11700"
  },
  {
    "text": "Services in New York City today I'm",
    "start": "11700",
    "end": "14880"
  },
  {
    "text": "going to show you how you can use Amazon",
    "start": "14880",
    "end": "17160"
  },
  {
    "text": "Cloud watch to track metrics from your",
    "start": "17160",
    "end": "20010"
  },
  {
    "text": "containers running on Amazon Elastic",
    "start": "20010",
    "end": "22020"
  },
  {
    "text": "container service Amazon Elastic",
    "start": "22020",
    "end": "24240"
  },
  {
    "start": "23000",
    "end": "47000"
  },
  {
    "text": "container service is a highly scalable",
    "start": "24240",
    "end": "26359"
  },
  {
    "text": "high-performance container management",
    "start": "26359",
    "end": "28380"
  },
  {
    "text": "service that supports docker containers",
    "start": "28380",
    "end": "30689"
  },
  {
    "text": "and allows you to easily run",
    "start": "30689",
    "end": "32730"
  },
  {
    "text": "applications on a managed cluster of ec2",
    "start": "32730",
    "end": "35880"
  },
  {
    "text": "instances or with Amazon Fergie as you",
    "start": "35880",
    "end": "38969"
  },
  {
    "text": "run containers being able to push",
    "start": "38969",
    "end": "41219"
  },
  {
    "text": "metrics into cloud watch lets you",
    "start": "41219",
    "end": "43050"
  },
  {
    "text": "monitor the performance and health of",
    "start": "43050",
    "end": "45030"
  },
  {
    "text": "your services it also allows you to set",
    "start": "45030",
    "end": "48270"
  },
  {
    "start": "47000",
    "end": "59000"
  },
  {
    "text": "alarms that can take proactive actions",
    "start": "48270",
    "end": "50489"
  },
  {
    "text": "based on the status of your containers",
    "start": "50489",
    "end": "52469"
  },
  {
    "text": "and the load they are experiencing",
    "start": "52469",
    "end": "54660"
  },
  {
    "text": "including triggering out auto scaling or",
    "start": "54660",
    "end": "57300"
  },
  {
    "text": "other functions within AWS let's take a",
    "start": "57300",
    "end": "60539"
  },
  {
    "start": "59000",
    "end": "91000"
  },
  {
    "text": "look at the ECS console right away",
    "start": "60539",
    "end": "63210"
  },
  {
    "text": "you'll notice that some metrics are",
    "start": "63210",
    "end": "66119"
  },
  {
    "text": "displayed CPU utilization and memory",
    "start": "66119",
    "end": "69090"
  },
  {
    "text": "utilization let us look deeper into one",
    "start": "69090",
    "end": "72299"
  },
  {
    "text": "of these clusters you might be familiar",
    "start": "72299",
    "end": "75299"
  },
  {
    "text": "with this page let's go to metrics tab",
    "start": "75299",
    "end": "79070"
  },
  {
    "text": "on this tab you will find euros a ssin",
    "start": "79070",
    "end": "82290"
  },
  {
    "text": "and reservation for two dimensions CPU",
    "start": "82290",
    "end": "85740"
  },
  {
    "text": "and memory so what is the difference",
    "start": "85740",
    "end": "89009"
  },
  {
    "text": "between the two utilization is the",
    "start": "89009",
    "end": "92130"
  },
  {
    "start": "91000",
    "end": "134000"
  },
  {
    "text": "amount of resources being used by the",
    "start": "92130",
    "end": "94140"
  },
  {
    "text": "containers that are currently running",
    "start": "94140",
    "end": "96229"
  },
  {
    "text": "whereas reservation refers to the values",
    "start": "96229",
    "end": "99390"
  },
  {
    "text": "that were entered in the test definition",
    "start": "99390",
    "end": "101369"
  },
  {
    "text": "you can think of it as what is being",
    "start": "101369",
    "end": "104070"
  },
  {
    "text": "consumed versus what was asked for let",
    "start": "104070",
    "end": "107670"
  },
  {
    "text": "us visit the cloud watch console now the",
    "start": "107670",
    "end": "110310"
  },
  {
    "text": "metrics you found in the ECS console are",
    "start": "110310",
    "end": "112409"
  },
  {
    "text": "also available here you can look at",
    "start": "112409",
    "end": "114570"
  },
  {
    "text": "metrics along two dimensions one way is",
    "start": "114570",
    "end": "119460"
  },
  {
    "text": "per service per cluster here you will",
    "start": "119460",
    "end": "124500"
  },
  {
    "text": "find utilization",
    "start": "124500",
    "end": "127440"
  },
  {
    "text": "looking at metrics per cluster you will",
    "start": "127440",
    "end": "130990"
  },
  {
    "text": "see both utilization and reservation",
    "start": "130990",
    "end": "133420"
  },
  {
    "text": "we recommend using reservation metrics",
    "start": "133420",
    "end": "136060"
  },
  {
    "start": "134000",
    "end": "194000"
  },
  {
    "text": "for scaling the ECS cluster for example",
    "start": "136060",
    "end": "138970"
  },
  {
    "text": "you can create an alarm that will scale",
    "start": "138970",
    "end": "141430"
  },
  {
    "text": "out your cluster by adding more ec2",
    "start": "141430",
    "end": "143590"
  },
  {
    "text": "instances if memory reservation gets",
    "start": "143590",
    "end": "145930"
  },
  {
    "text": "higher than 80% cloud watch is also home",
    "start": "145930",
    "end": "149380"
  },
  {
    "text": "to cloud watch logs here you can find",
    "start": "149380",
    "end": "151840"
  },
  {
    "text": "logs that were produced by containers",
    "start": "151840",
    "end": "154000"
  },
  {
    "text": "running on ECS it is easy to enable",
    "start": "154000",
    "end": "159190"
  },
  {
    "text": "containers to send logs to cloud watch",
    "start": "159190",
    "end": "162930"
  },
  {
    "text": "first you need to make sure that the",
    "start": "163920",
    "end": "166600"
  },
  {
    "text": "test definition is allowed to send logs",
    "start": "166600",
    "end": "168820"
  },
  {
    "text": "to cloud watch by giving it an IM role",
    "start": "168820",
    "end": "173459"
  },
  {
    "text": "second you need to indicate AWS logs as",
    "start": "174750",
    "end": "178269"
  },
  {
    "text": "the log driver for your container",
    "start": "178269",
    "end": "180540"
  },
  {
    "text": "looking into one of these test",
    "start": "180540",
    "end": "183100"
  },
  {
    "text": "definitions I will expand the container",
    "start": "183100",
    "end": "186070"
  },
  {
    "text": "and you see here that the log driver is",
    "start": "186070",
    "end": "190330"
  },
  {
    "text": "AWS logs and a few parameters have been",
    "start": "190330",
    "end": "193080"
  },
  {
    "text": "specified elastic container service and",
    "start": "193080",
    "end": "196510"
  },
  {
    "start": "194000",
    "end": "221000"
  },
  {
    "text": "cloud watch work together so you can see",
    "start": "196510",
    "end": "198970"
  },
  {
    "text": "service and cluster metrics you can",
    "start": "198970",
    "end": "201340"
  },
  {
    "text": "scale the cluster based on these and use",
    "start": "201340",
    "end": "203890"
  },
  {
    "text": "cloud watch logs to troubleshoot your",
    "start": "203890",
    "end": "205630"
  },
  {
    "text": "applications for more information on",
    "start": "205630",
    "end": "207880"
  },
  {
    "text": "using cloud watch with Amazon ECS please",
    "start": "207880",
    "end": "210370"
  },
  {
    "text": "see the AWS documentation thanks for",
    "start": "210370",
    "end": "213400"
  },
  {
    "text": "watching",
    "start": "213400",
    "end": "215760"
  },
  {
    "text": "[Music]",
    "start": "216230",
    "end": "219230"
  },
  {
    "text": "you",
    "start": "219230",
    "end": "221290"
  }
]