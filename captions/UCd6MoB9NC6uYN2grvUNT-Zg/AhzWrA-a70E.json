[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": "hello everyone my name is raj jain i'm a",
    "start": "1040",
    "end": "3840"
  },
  {
    "text": "software development manager here at",
    "start": "3840",
    "end": "5680"
  },
  {
    "text": "amazon and i'm going to describe a",
    "start": "5680",
    "end": "8080"
  },
  {
    "text": "solution architecture",
    "start": "8080",
    "end": "9920"
  },
  {
    "text": "where we will discuss how we can enhance",
    "start": "9920",
    "end": "12080"
  },
  {
    "text": "the security of aws app mesh deployments",
    "start": "12080",
    "end": "15599"
  },
  {
    "text": "with mutual tls where the certificates",
    "start": "15599",
    "end": "17920"
  },
  {
    "text": "for mutual tls are managed by acm pca",
    "start": "17920",
    "end": "21520"
  },
  {
    "text": "so as we",
    "start": "21520",
    "end": "22880"
  },
  {
    "text": "uh covered this topic let's discuss some",
    "start": "22880",
    "end": "24960"
  },
  {
    "start": "23000",
    "end": "223000"
  },
  {
    "text": "basics",
    "start": "24960",
    "end": "26640"
  },
  {
    "text": "aws app mesh is basically a service mesh",
    "start": "26640",
    "end": "29679"
  },
  {
    "text": "based on the open source envoy project",
    "start": "29679",
    "end": "33280"
  },
  {
    "text": "and what aws has done is they have",
    "start": "33280",
    "end": "36960"
  },
  {
    "text": "offered a custom envoy container image",
    "start": "36960",
    "end": "39520"
  },
  {
    "text": "as well as",
    "start": "39520",
    "end": "40960"
  },
  {
    "text": "built a managed control plane for the",
    "start": "40960",
    "end": "44079"
  },
  {
    "text": "app mesh",
    "start": "44079",
    "end": "45200"
  },
  {
    "text": "network so that's what the aws app mesh",
    "start": "45200",
    "end": "47680"
  },
  {
    "text": "services",
    "start": "47680",
    "end": "48960"
  },
  {
    "text": "and",
    "start": "48960",
    "end": "49840"
  },
  {
    "text": "as we know for any service mesh products",
    "start": "49840",
    "end": "53760"
  },
  {
    "text": "basically the traffic within these app",
    "start": "53760",
    "end": "55680"
  },
  {
    "text": "meshes is described as east-west traffic",
    "start": "55680",
    "end": "58719"
  },
  {
    "text": "which is in contrast with north-south",
    "start": "58719",
    "end": "60960"
  },
  {
    "text": "traffic that we discuss when we discuss",
    "start": "60960",
    "end": "63520"
  },
  {
    "text": "external facing apis",
    "start": "63520",
    "end": "65760"
  },
  {
    "text": "or client-server communication",
    "start": "65760",
    "end": "68080"
  },
  {
    "text": "uh east-west traffic basically refers to",
    "start": "68080",
    "end": "70640"
  },
  {
    "text": "a bunch of microservices deployed in a",
    "start": "70640",
    "end": "72640"
  },
  {
    "text": "given service mesh",
    "start": "72640",
    "end": "74640"
  },
  {
    "text": "and then these services are connecting",
    "start": "74640",
    "end": "76720"
  },
  {
    "text": "with each other",
    "start": "76720",
    "end": "78080"
  },
  {
    "text": "for very various business",
    "start": "78080",
    "end": "80000"
  },
  {
    "text": "workflows",
    "start": "80000",
    "end": "81280"
  },
  {
    "text": "and not every service should be",
    "start": "81280",
    "end": "82799"
  },
  {
    "text": "connecting with everything else i mean",
    "start": "82799",
    "end": "84400"
  },
  {
    "text": "there is a security problem if that",
    "start": "84400",
    "end": "86400"
  },
  {
    "text": "happens that's the kind of problem",
    "start": "86400",
    "end": "88000"
  },
  {
    "text": "service meshes solve in general",
    "start": "88000",
    "end": "90320"
  },
  {
    "text": "and by adding mutual dls to the mix",
    "start": "90320",
    "end": "93119"
  },
  {
    "text": "we can enhance that security even",
    "start": "93119",
    "end": "94799"
  },
  {
    "text": "further",
    "start": "94799",
    "end": "95840"
  },
  {
    "text": "so",
    "start": "95840",
    "end": "97119"
  },
  {
    "text": "the",
    "start": "97119",
    "end": "98000"
  },
  {
    "text": "mtls or mutual tls basically what it",
    "start": "98000",
    "end": "100640"
  },
  {
    "text": "does is it adds this bi-directional",
    "start": "100640",
    "end": "102479"
  },
  {
    "text": "authentication property",
    "start": "102479",
    "end": "104399"
  },
  {
    "text": "between two communicating entities",
    "start": "104399",
    "end": "107040"
  },
  {
    "text": "uh basically two micro services in a in",
    "start": "107040",
    "end": "109520"
  },
  {
    "text": "a service mesh network",
    "start": "109520",
    "end": "111840"
  },
  {
    "text": "and",
    "start": "111840",
    "end": "113040"
  },
  {
    "text": "in contrast with one way tls in which",
    "start": "113040",
    "end": "115600"
  },
  {
    "text": "the client authenticates the server the",
    "start": "115600",
    "end": "117520"
  },
  {
    "text": "server sends client its own certificate",
    "start": "117520",
    "end": "120640"
  },
  {
    "text": "which the client has been pre-configured",
    "start": "120640",
    "end": "122240"
  },
  {
    "text": "to trust",
    "start": "122240",
    "end": "123439"
  },
  {
    "text": "through the",
    "start": "123439",
    "end": "125200"
  },
  {
    "text": "ca chain of that certificate",
    "start": "125200",
    "end": "128479"
  },
  {
    "text": "now that",
    "start": "128479",
    "end": "129759"
  },
  {
    "text": "authentication is only unidirectional",
    "start": "129759",
    "end": "131680"
  },
  {
    "text": "because only the client authenticates",
    "start": "131680",
    "end": "133280"
  },
  {
    "text": "the server but with mutual tls what we",
    "start": "133280",
    "end": "135440"
  },
  {
    "text": "do is we do",
    "start": "135440",
    "end": "136959"
  },
  {
    "text": "a bi-directional authentication where in",
    "start": "136959",
    "end": "138640"
  },
  {
    "text": "addition to the client authenticating",
    "start": "138640",
    "end": "140080"
  },
  {
    "text": "with the server",
    "start": "140080",
    "end": "141360"
  },
  {
    "text": "the server will now authenticate the",
    "start": "141360",
    "end": "143120"
  },
  {
    "text": "client",
    "start": "143120",
    "end": "144160"
  },
  {
    "text": "so the tls handshake protocol runs a",
    "start": "144160",
    "end": "146080"
  },
  {
    "text": "little longer",
    "start": "146080",
    "end": "148000"
  },
  {
    "text": "at the end of the client getting the",
    "start": "148000",
    "end": "149280"
  },
  {
    "text": "server side certificate the server turns",
    "start": "149280",
    "end": "151280"
  },
  {
    "text": "around and basically asks the client",
    "start": "151280",
    "end": "154080"
  },
  {
    "text": "to provide its own certificate and only",
    "start": "154080",
    "end": "156720"
  },
  {
    "text": "if the server",
    "start": "156720",
    "end": "158000"
  },
  {
    "text": "trusts",
    "start": "158000",
    "end": "159280"
  },
  {
    "text": "the client certificate that's when the",
    "start": "159280",
    "end": "161360"
  },
  {
    "text": "mutual dls exchange will uh",
    "start": "161360",
    "end": "164080"
  },
  {
    "text": "will come into existence",
    "start": "164080",
    "end": "166720"
  },
  {
    "text": "so",
    "start": "166720",
    "end": "167760"
  },
  {
    "text": "we will deploy mutual dls concept in aws",
    "start": "167760",
    "end": "171360"
  },
  {
    "text": "app mesh",
    "start": "171360",
    "end": "172640"
  },
  {
    "text": "but",
    "start": "172640",
    "end": "174000"
  },
  {
    "text": "as with any certificate deployment",
    "start": "174000",
    "end": "176640"
  },
  {
    "text": "certificate management is complexity",
    "start": "176640",
    "end": "179680"
  },
  {
    "text": "and for that we will use acm private",
    "start": "179680",
    "end": "181680"
  },
  {
    "text": "certificate authority to actually issue",
    "start": "181680",
    "end": "184080"
  },
  {
    "text": "certificates",
    "start": "184080",
    "end": "185360"
  },
  {
    "text": "and use that as a managed pki for",
    "start": "185360",
    "end": "187440"
  },
  {
    "text": "managing the certificates in app mesh",
    "start": "187440",
    "end": "189760"
  },
  {
    "text": "now the communication inside the app",
    "start": "189760",
    "end": "192159"
  },
  {
    "text": "mesh is basically",
    "start": "192159",
    "end": "195440"
  },
  {
    "text": "doesn't require external public",
    "start": "195440",
    "end": "197360"
  },
  {
    "text": "certificates",
    "start": "197360",
    "end": "198800"
  },
  {
    "text": "so what we need to have in app mesh",
    "start": "198800",
    "end": "201040"
  },
  {
    "text": "mutual tls exchange is basically private",
    "start": "201040",
    "end": "203200"
  },
  {
    "text": "certificates",
    "start": "203200",
    "end": "204480"
  },
  {
    "text": "and for that reason the acm private",
    "start": "204480",
    "end": "206480"
  },
  {
    "text": "certificate authority",
    "start": "206480",
    "end": "208560"
  },
  {
    "text": "is is a perfect fit for actually getting",
    "start": "208560",
    "end": "211680"
  },
  {
    "text": "those certificates managed within the",
    "start": "211680",
    "end": "213200"
  },
  {
    "text": "acm pca and then getting them deployed",
    "start": "213200",
    "end": "215920"
  },
  {
    "text": "into the app mesh and kind of take care",
    "start": "215920",
    "end": "218000"
  },
  {
    "text": "of all of that complexity for us",
    "start": "218000",
    "end": "220159"
  },
  {
    "text": "so the system that i'm going to describe",
    "start": "220159",
    "end": "223360"
  },
  {
    "text": "is a",
    "start": "223360",
    "end": "224720"
  },
  {
    "text": "simple system with two communicating",
    "start": "224720",
    "end": "226640"
  },
  {
    "text": "entities which will engage in a mtls",
    "start": "226640",
    "end": "228959"
  },
  {
    "text": "exchange",
    "start": "228959",
    "end": "230080"
  },
  {
    "text": "where the certificates are derived from",
    "start": "230080",
    "end": "232159"
  },
  {
    "text": "acm pca",
    "start": "232159",
    "end": "233599"
  },
  {
    "text": "the two entities are basically known as",
    "start": "233599",
    "end": "235519"
  },
  {
    "text": "color gateway in my examples and color",
    "start": "235519",
    "end": "238400"
  },
  {
    "text": "teller",
    "start": "238400",
    "end": "239519"
  },
  {
    "text": "and customers who are familiar with app",
    "start": "239519",
    "end": "241840"
  },
  {
    "text": "mesh and the aws github projects on app",
    "start": "241840",
    "end": "244640"
  },
  {
    "text": "mesh",
    "start": "244640",
    "end": "245680"
  },
  {
    "text": "will know that",
    "start": "245680",
    "end": "247439"
  },
  {
    "text": "the app mesh examples have consistently",
    "start": "247439",
    "end": "250080"
  },
  {
    "text": "used this pattern a color gateway and",
    "start": "250080",
    "end": "252159"
  },
  {
    "text": "color teller designed to walk",
    "start": "252159",
    "end": "255760"
  },
  {
    "text": "customers through various kinds of",
    "start": "255760",
    "end": "257120"
  },
  {
    "text": "examples",
    "start": "257120",
    "end": "258320"
  },
  {
    "text": "so i'm going to stick with the same",
    "start": "258320",
    "end": "259519"
  },
  {
    "text": "pattern and use the same",
    "start": "259519",
    "end": "261680"
  },
  {
    "text": "example to demonstrate this this",
    "start": "261680",
    "end": "263919"
  },
  {
    "text": "solution",
    "start": "263919",
    "end": "265199"
  },
  {
    "text": "so i'm going to walk us through a",
    "start": "265199",
    "end": "266880"
  },
  {
    "text": "detailed overview of what the solution",
    "start": "266880",
    "end": "268479"
  },
  {
    "text": "architecture is and then walk us through",
    "start": "268479",
    "end": "270639"
  },
  {
    "text": "the aws management console",
    "start": "270639",
    "end": "273120"
  },
  {
    "text": "to show",
    "start": "273120",
    "end": "274400"
  },
  {
    "text": "how the acm pc and app mesh have been",
    "start": "274400",
    "end": "276479"
  },
  {
    "text": "configured",
    "start": "276479",
    "end": "277759"
  },
  {
    "text": "and then i'll close with a small demo",
    "start": "277759",
    "end": "279759"
  },
  {
    "text": "where i will actually send a request",
    "start": "279759",
    "end": "281280"
  },
  {
    "text": "from the outside into the mesh",
    "start": "281280",
    "end": "283759"
  },
  {
    "text": "and we will see how an mdls exchange",
    "start": "283759",
    "end": "286240"
  },
  {
    "text": "happens",
    "start": "286240",
    "end": "287360"
  },
  {
    "text": "and we can prove it by looking at envoy",
    "start": "287360",
    "end": "289440"
  },
  {
    "text": "statistics",
    "start": "289440",
    "end": "291199"
  },
  {
    "text": "so let's dig deeper into the",
    "start": "291199",
    "end": "292479"
  },
  {
    "start": "292000",
    "end": "681000"
  },
  {
    "text": "architecture",
    "start": "292479",
    "end": "293680"
  },
  {
    "text": "so",
    "start": "293680",
    "end": "294639"
  },
  {
    "text": "to set up the system what we will do",
    "start": "294639",
    "end": "296720"
  },
  {
    "text": "first is we will create two independent",
    "start": "296720",
    "end": "298960"
  },
  {
    "text": "certificate authorities",
    "start": "298960",
    "end": "300800"
  },
  {
    "text": "the first certificate authority shown",
    "start": "300800",
    "end": "302560"
  },
  {
    "text": "here is the color gateway certificate",
    "start": "302560",
    "end": "304880"
  },
  {
    "text": "authority",
    "start": "304880",
    "end": "306080"
  },
  {
    "text": "and as you can follow the",
    "start": "306080",
    "end": "308240"
  },
  {
    "text": "notation in this diagram and the color",
    "start": "308240",
    "end": "310000"
  },
  {
    "text": "scheme what you can see is that",
    "start": "310000",
    "end": "312400"
  },
  {
    "text": "the",
    "start": "312400",
    "end": "314320"
  },
  {
    "text": "the the chain here is basically",
    "start": "314320",
    "end": "316000"
  },
  {
    "text": "comprised of the root ca certificate for",
    "start": "316000",
    "end": "318000"
  },
  {
    "text": "the color gateway and one end point or",
    "start": "318000",
    "end": "320639"
  },
  {
    "text": "end entity certificate that will sit",
    "start": "320639",
    "end": "323280"
  },
  {
    "text": "within the on voip proxy for that color",
    "start": "323280",
    "end": "325520"
  },
  {
    "text": "gateway service node likewise we have a",
    "start": "325520",
    "end": "328880"
  },
  {
    "text": "color teller certificate authority which",
    "start": "328880",
    "end": "331520"
  },
  {
    "text": "has a root c and an endpoint certificate",
    "start": "331520",
    "end": "333680"
  },
  {
    "text": "derived from it",
    "start": "333680",
    "end": "335919"
  },
  {
    "text": "the best practices for creating",
    "start": "335919",
    "end": "337840"
  },
  {
    "text": "certificate hierarchies is to use",
    "start": "337840",
    "end": "339360"
  },
  {
    "text": "intermediate cas",
    "start": "339360",
    "end": "341039"
  },
  {
    "text": "and not directly issue endpoint",
    "start": "341039",
    "end": "342479"
  },
  {
    "text": "certificates from root cas but for the",
    "start": "342479",
    "end": "344400"
  },
  {
    "text": "matter of explaining and for simplicity",
    "start": "344400",
    "end": "347360"
  },
  {
    "text": "we have chosen to derive endpoint",
    "start": "347360",
    "end": "348960"
  },
  {
    "text": "certificates from the root ca",
    "start": "348960",
    "end": "350560"
  },
  {
    "text": "certificates directly so",
    "start": "350560",
    "end": "353440"
  },
  {
    "text": "the idea behind also choosing two",
    "start": "353440",
    "end": "355120"
  },
  {
    "text": "independent certificate authorities is",
    "start": "355120",
    "end": "356800"
  },
  {
    "text": "to fully demonstrate how",
    "start": "356800",
    "end": "358880"
  },
  {
    "text": "if the proper",
    "start": "358880",
    "end": "360400"
  },
  {
    "text": "configuration is achieved by configuring",
    "start": "360400",
    "end": "362720"
  },
  {
    "text": "the certificate chains within the",
    "start": "362720",
    "end": "364080"
  },
  {
    "text": "respective components we can actually do",
    "start": "364080",
    "end": "366880"
  },
  {
    "text": "a full tls mtls exchange",
    "start": "366880",
    "end": "369680"
  },
  {
    "text": "and demonstrate that these are two",
    "start": "369680",
    "end": "371280"
  },
  {
    "text": "independent root cas basically so step",
    "start": "371280",
    "end": "373759"
  },
  {
    "text": "number one and two is basically showing",
    "start": "373759",
    "end": "376319"
  },
  {
    "text": "aws certificate manager and acm pca",
    "start": "376319",
    "end": "378880"
  },
  {
    "text": "configured with",
    "start": "378880",
    "end": "380400"
  },
  {
    "text": "two certificate authorities and two",
    "start": "380400",
    "end": "382080"
  },
  {
    "text": "endpoint certificates",
    "start": "382080",
    "end": "383840"
  },
  {
    "text": "now what happens is when the system is",
    "start": "383840",
    "end": "385759"
  },
  {
    "text": "being configured and we have shown all",
    "start": "385759",
    "end": "387600"
  },
  {
    "text": "of this code in our",
    "start": "387600",
    "end": "390639"
  },
  {
    "text": "github repo which the link of which",
    "start": "390639",
    "end": "393280"
  },
  {
    "text": "exists on the next slide",
    "start": "393280",
    "end": "395280"
  },
  {
    "text": "the as the system is coming up the aws",
    "start": "395280",
    "end": "398400"
  },
  {
    "text": "there is a lambda function what that",
    "start": "398400",
    "end": "400319"
  },
  {
    "text": "will do is that'll",
    "start": "400319",
    "end": "403280"
  },
  {
    "text": "be responsible for actually extracting",
    "start": "403280",
    "end": "405120"
  },
  {
    "text": "the client side certificate from the",
    "start": "405120",
    "end": "407759"
  },
  {
    "text": "acm pca",
    "start": "407759",
    "end": "409680"
  },
  {
    "text": "and ingesting that into aws appmesh",
    "start": "409680",
    "end": "413199"
  },
  {
    "text": "now",
    "start": "413199",
    "end": "414080"
  },
  {
    "text": "the server side certificates are",
    "start": "414080",
    "end": "415919"
  },
  {
    "text": "actually natively integrated between the",
    "start": "415919",
    "end": "417840"
  },
  {
    "text": "app mesh and the acm so we will not",
    "start": "417840",
    "end": "421039"
  },
  {
    "text": "need to kind of dig into that because",
    "start": "421039",
    "end": "422400"
  },
  {
    "text": "that's a native integration",
    "start": "422400",
    "end": "424080"
  },
  {
    "text": "what this solution architecture really",
    "start": "424080",
    "end": "425759"
  },
  {
    "text": "describes is how to integrate the",
    "start": "425759",
    "end": "427440"
  },
  {
    "text": "client-side certificates and kind of",
    "start": "427440",
    "end": "429199"
  },
  {
    "text": "complete the picture",
    "start": "429199",
    "end": "430720"
  },
  {
    "text": "when it comes to mtls exchange so in",
    "start": "430720",
    "end": "433120"
  },
  {
    "text": "step number three what this lambda is",
    "start": "433120",
    "end": "434720"
  },
  {
    "text": "doing is it's basically talking to",
    "start": "434720",
    "end": "436400"
  },
  {
    "text": "secrets manager over a simple api called",
    "start": "436400",
    "end": "438800"
  },
  {
    "text": "get random password",
    "start": "438800",
    "end": "440720"
  },
  {
    "text": "and the whole idea here is to get a",
    "start": "440720",
    "end": "443360"
  },
  {
    "text": "random string with sufficient entropy",
    "start": "443360",
    "end": "446319"
  },
  {
    "text": "and a sufficient policy policy meaning",
    "start": "446319",
    "end": "448639"
  },
  {
    "text": "you know how many characters we want in",
    "start": "448639",
    "end": "450000"
  },
  {
    "text": "the past phrase",
    "start": "450000",
    "end": "451520"
  },
  {
    "text": "and a mix of alphabets and special",
    "start": "451520",
    "end": "453599"
  },
  {
    "text": "characters and numerals",
    "start": "453599",
    "end": "455599"
  },
  {
    "text": "um so once we get that basically what we",
    "start": "455599",
    "end": "458080"
  },
  {
    "text": "will do is we will use this passphrase",
    "start": "458080",
    "end": "459919"
  },
  {
    "text": "to",
    "start": "459919",
    "end": "460880"
  },
  {
    "text": "export",
    "start": "460880",
    "end": "462400"
  },
  {
    "text": "the client-side certificate from the acm",
    "start": "462400",
    "end": "466160"
  },
  {
    "text": "and we will provide this passphrase to",
    "start": "466160",
    "end": "467919"
  },
  {
    "text": "the acm so that acm can actually package",
    "start": "467919",
    "end": "470000"
  },
  {
    "text": "up the public material the root ca for",
    "start": "470000",
    "end": "472960"
  },
  {
    "text": "example and the endpoint certificate for",
    "start": "472960",
    "end": "475120"
  },
  {
    "text": "the color gateway",
    "start": "475120",
    "end": "476879"
  },
  {
    "text": "but since we also need the private key",
    "start": "476879",
    "end": "478720"
  },
  {
    "text": "for actually running the dls stack",
    "start": "478720",
    "end": "480319"
  },
  {
    "text": "inside the envoy",
    "start": "480319",
    "end": "482000"
  },
  {
    "text": "the private key will need to be",
    "start": "482000",
    "end": "483759"
  },
  {
    "text": "transported from the acm into the app",
    "start": "483759",
    "end": "486000"
  },
  {
    "text": "mesh secret in a confidential fashion",
    "start": "486000",
    "end": "488560"
  },
  {
    "text": "such that none of these entities",
    "start": "488560",
    "end": "489919"
  },
  {
    "text": "actually get exposed to it",
    "start": "489919",
    "end": "491680"
  },
  {
    "text": "so what the acm will do is it will",
    "start": "491680",
    "end": "493599"
  },
  {
    "text": "encrypt the private key with the",
    "start": "493599",
    "end": "494879"
  },
  {
    "text": "passphrase that we have provided",
    "start": "494879",
    "end": "497039"
  },
  {
    "text": "and that comes back from",
    "start": "497039",
    "end": "500319"
  },
  {
    "text": "acm and step number five that",
    "start": "500319",
    "end": "502879"
  },
  {
    "text": "the root ca came out",
    "start": "502879",
    "end": "504879"
  },
  {
    "text": "the endpoint certificate of color",
    "start": "504879",
    "end": "506319"
  },
  {
    "text": "gateway came out",
    "start": "506319",
    "end": "508000"
  },
  {
    "text": "and the private key for the client",
    "start": "508000",
    "end": "510639"
  },
  {
    "text": "certificate this is exported in an",
    "start": "510639",
    "end": "513279"
  },
  {
    "text": "encrypted fashion",
    "start": "513279",
    "end": "514719"
  },
  {
    "text": "so the next thing that the lambda does",
    "start": "514719",
    "end": "516479"
  },
  {
    "text": "is it stores this information into aws",
    "start": "516479",
    "end": "519279"
  },
  {
    "text": "secrets manager",
    "start": "519279",
    "end": "520800"
  },
  {
    "text": "because we are dealing with a passphrase",
    "start": "520800",
    "end": "522399"
  },
  {
    "text": "and we need to",
    "start": "522399",
    "end": "523919"
  },
  {
    "text": "maintain confidentiality over it so aws",
    "start": "523919",
    "end": "526720"
  },
  {
    "text": "secrets manager serves as the right",
    "start": "526720",
    "end": "528720"
  },
  {
    "text": "service for handling that information",
    "start": "528720",
    "end": "531920"
  },
  {
    "text": "now as the service mesh is coming up",
    "start": "531920",
    "end": "536480"
  },
  {
    "text": "it will then begin to talk to",
    "start": "536480",
    "end": "539120"
  },
  {
    "text": "aws secrets manager because of a custom",
    "start": "539120",
    "end": "541839"
  },
  {
    "text": "startup script that we have placed in",
    "start": "541839",
    "end": "543360"
  },
  {
    "text": "the envoy proxy container",
    "start": "543360",
    "end": "545440"
  },
  {
    "text": "and it will also begin to talk to aws",
    "start": "545440",
    "end": "547440"
  },
  {
    "text": "certificate manager",
    "start": "547440",
    "end": "549040"
  },
  {
    "text": "now one thing to note here is that acm",
    "start": "549040",
    "end": "551279"
  },
  {
    "text": "has",
    "start": "551279",
    "end": "552320"
  },
  {
    "text": "certain rate limits on how many export",
    "start": "552320",
    "end": "555600"
  },
  {
    "text": "certificate api calls",
    "start": "555600",
    "end": "558160"
  },
  {
    "text": "it can accept",
    "start": "558160",
    "end": "559680"
  },
  {
    "text": "and that number is five transactions per",
    "start": "559680",
    "end": "562399"
  },
  {
    "text": "second",
    "start": "562399",
    "end": "563680"
  },
  {
    "text": "so acm can accept five transactions per",
    "start": "563680",
    "end": "566240"
  },
  {
    "text": "second export certificate calls so that",
    "start": "566240",
    "end": "568959"
  },
  {
    "text": "means if you have a hundred node app",
    "start": "568959",
    "end": "571120"
  },
  {
    "text": "mesh",
    "start": "571120",
    "end": "572080"
  },
  {
    "text": "expect",
    "start": "572080",
    "end": "573279"
  },
  {
    "text": "that to take 20 seconds for all these",
    "start": "573279",
    "end": "575920"
  },
  {
    "text": "certificates to get exported from acm",
    "start": "575920",
    "end": "578240"
  },
  {
    "text": "and ingested into the app mesh on voip",
    "start": "578240",
    "end": "580399"
  },
  {
    "text": "proxies",
    "start": "580399",
    "end": "581680"
  },
  {
    "text": "so",
    "start": "581680",
    "end": "582720"
  },
  {
    "text": "that's just a word of caution for people",
    "start": "582720",
    "end": "584240"
  },
  {
    "text": "who are designing very large meshes so",
    "start": "584240",
    "end": "586720"
  },
  {
    "text": "be aware of this limitation that this",
    "start": "586720",
    "end": "588480"
  },
  {
    "text": "much time can be spent in bringing up",
    "start": "588480",
    "end": "590720"
  },
  {
    "text": "the system for the very first time this",
    "start": "590720",
    "end": "592560"
  },
  {
    "text": "delay is only at startup it doesn't",
    "start": "592560",
    "end": "595760"
  },
  {
    "text": "translate into runtime delays or",
    "start": "595760",
    "end": "597360"
  },
  {
    "text": "anything like that",
    "start": "597360",
    "end": "599519"
  },
  {
    "text": "so in step number eight and nine what's",
    "start": "599519",
    "end": "601200"
  },
  {
    "text": "happening is the on voip proxies are",
    "start": "601200",
    "end": "602720"
  },
  {
    "text": "coming up and they're retrieving their",
    "start": "602720",
    "end": "605120"
  },
  {
    "text": "server-side certificates through the",
    "start": "605120",
    "end": "606560"
  },
  {
    "text": "native integration",
    "start": "606560",
    "end": "608000"
  },
  {
    "text": "from the acm",
    "start": "608000",
    "end": "609680"
  },
  {
    "text": "so if you follow the color coding of",
    "start": "609680",
    "end": "611360"
  },
  {
    "text": "these certificates the certificates that",
    "start": "611360",
    "end": "613440"
  },
  {
    "text": "are moving into these proxies are shown",
    "start": "613440",
    "end": "615279"
  },
  {
    "text": "by the color for example in this case",
    "start": "615279",
    "end": "617600"
  },
  {
    "text": "the color gate phase getting this blue",
    "start": "617600",
    "end": "619519"
  },
  {
    "text": "root ca which is actually the color",
    "start": "619519",
    "end": "621279"
  },
  {
    "text": "tellers",
    "start": "621279",
    "end": "622480"
  },
  {
    "text": "root ca because at some point we need to",
    "start": "622480",
    "end": "624000"
  },
  {
    "text": "trust that certificate during the tls",
    "start": "624000",
    "end": "625680"
  },
  {
    "text": "handshake",
    "start": "625680",
    "end": "627360"
  },
  {
    "text": "and so after this the system is",
    "start": "627360",
    "end": "629120"
  },
  {
    "text": "basically up and running",
    "start": "629120",
    "end": "630959"
  },
  {
    "text": "and you will see in the demo that i have",
    "start": "630959",
    "end": "633600"
  },
  {
    "text": "later on in this presentation that",
    "start": "633600",
    "end": "636160"
  },
  {
    "text": "we will",
    "start": "636160",
    "end": "637200"
  },
  {
    "text": "send a request into the color gateway",
    "start": "637200",
    "end": "638959"
  },
  {
    "text": "from the outside the curl request",
    "start": "638959",
    "end": "641040"
  },
  {
    "text": "basically",
    "start": "641040",
    "end": "642320"
  },
  {
    "text": "and what that will do is it will",
    "start": "642320",
    "end": "643600"
  },
  {
    "text": "initiate basically the tls handshake",
    "start": "643600",
    "end": "645839"
  },
  {
    "text": "from the color gateway onward proxy",
    "start": "645839",
    "end": "648959"
  },
  {
    "text": "to the color tiller on my proxy",
    "start": "648959",
    "end": "651360"
  },
  {
    "text": "so in the first part of the tls",
    "start": "651360",
    "end": "652880"
  },
  {
    "text": "handshake we will see the server",
    "start": "652880",
    "end": "654240"
  },
  {
    "text": "certificate coming back to the client",
    "start": "654240",
    "end": "656640"
  },
  {
    "text": "and in the second step of the taylor's",
    "start": "656640",
    "end": "658480"
  },
  {
    "text": "handshake because this is a mutual tls",
    "start": "658480",
    "end": "660399"
  },
  {
    "text": "setup",
    "start": "660399",
    "end": "661440"
  },
  {
    "text": "we will see that the server is asking",
    "start": "661440",
    "end": "663600"
  },
  {
    "text": "the client to provide its own",
    "start": "663600",
    "end": "665120"
  },
  {
    "text": "certificate",
    "start": "665120",
    "end": "666320"
  },
  {
    "text": "which comes over onto the server and",
    "start": "666320",
    "end": "669200"
  },
  {
    "text": "only when that exchange succeeds",
    "start": "669200",
    "end": "671600"
  },
  {
    "text": "that the mtls session will come into",
    "start": "671600",
    "end": "673279"
  },
  {
    "text": "existence",
    "start": "673279",
    "end": "674399"
  },
  {
    "text": "and we will then basically run a simple",
    "start": "674399",
    "end": "676240"
  },
  {
    "text": "http request on top of that mtls session",
    "start": "676240",
    "end": "679120"
  },
  {
    "text": "that has been established through the",
    "start": "679120",
    "end": "680560"
  },
  {
    "text": "step",
    "start": "680560",
    "end": "682160"
  },
  {
    "start": "681000",
    "end": "786000"
  },
  {
    "text": "now let's talk about certificate",
    "start": "682160",
    "end": "684000"
  },
  {
    "text": "renewals so a complex",
    "start": "684000",
    "end": "686880"
  },
  {
    "text": "um issue in certificate management is",
    "start": "686880",
    "end": "689839"
  },
  {
    "text": "certificate renewal",
    "start": "689839",
    "end": "691519"
  },
  {
    "text": "and",
    "start": "691519",
    "end": "692800"
  },
  {
    "text": "what makes it even more interesting is",
    "start": "692800",
    "end": "694560"
  },
  {
    "text": "that how do we do certificate renewal",
    "start": "694560",
    "end": "696240"
  },
  {
    "text": "without any downtime",
    "start": "696240",
    "end": "698320"
  },
  {
    "text": "so",
    "start": "698320",
    "end": "699120"
  },
  {
    "text": "acm has a mechanism through which it can",
    "start": "699120",
    "end": "702160"
  },
  {
    "text": "actually send events to cloud watch",
    "start": "702160",
    "end": "705040"
  },
  {
    "text": "long before a certificate is approaching",
    "start": "705040",
    "end": "706959"
  },
  {
    "text": "expiration so in step number one we what",
    "start": "706959",
    "end": "709600"
  },
  {
    "text": "we do is we pick up this event",
    "start": "709600",
    "end": "711760"
  },
  {
    "text": "from the aws certificate manager and",
    "start": "711760",
    "end": "714000"
  },
  {
    "text": "bring it over to cloudwatch now in",
    "start": "714000",
    "end": "716079"
  },
  {
    "text": "cloudwatch what we do is we define a",
    "start": "716079",
    "end": "717600"
  },
  {
    "text": "custom trigger which is basically a",
    "start": "717600",
    "end": "719600"
  },
  {
    "text": "lambda function also part of the github",
    "start": "719600",
    "end": "722240"
  },
  {
    "text": "aws open source project",
    "start": "722240",
    "end": "724560"
  },
  {
    "text": "the link is shown here on the left",
    "start": "724560",
    "end": "726800"
  },
  {
    "text": "and this lambda function what it will do",
    "start": "726800",
    "end": "728560"
  },
  {
    "text": "is it will basically",
    "start": "728560",
    "end": "730800"
  },
  {
    "text": "renew the certificate with the",
    "start": "730800",
    "end": "733440"
  },
  {
    "text": "acm export that renewed certificate",
    "start": "733440",
    "end": "736880"
  },
  {
    "text": "bring it over and store it in aws",
    "start": "736880",
    "end": "739440"
  },
  {
    "text": "secrets manager",
    "start": "739440",
    "end": "741040"
  },
  {
    "text": "and then it will basically trigger the",
    "start": "741040",
    "end": "742720"
  },
  {
    "text": "ecs because our app mesh is running",
    "start": "742720",
    "end": "745040"
  },
  {
    "text": "inside the ecs fargate",
    "start": "745040",
    "end": "747360"
  },
  {
    "text": "containers",
    "start": "747360",
    "end": "748720"
  },
  {
    "text": "it will trigger the ecs basically for a",
    "start": "748720",
    "end": "750639"
  },
  {
    "text": "blue green deployment so that basically",
    "start": "750639",
    "end": "752880"
  },
  {
    "text": "whatever containers are running and",
    "start": "752880",
    "end": "754399"
  },
  {
    "text": "handling requests",
    "start": "754399",
    "end": "756000"
  },
  {
    "text": "can retire gracefully and as new app",
    "start": "756000",
    "end": "759279"
  },
  {
    "text": "mesh nodes are coming up with new on y",
    "start": "759279",
    "end": "761440"
  },
  {
    "text": "proxies starting up",
    "start": "761440",
    "end": "763680"
  },
  {
    "text": "they will go and fetch their server side",
    "start": "763680",
    "end": "765839"
  },
  {
    "text": "certificates from",
    "start": "765839",
    "end": "768160"
  },
  {
    "text": "certificate manager and their",
    "start": "768160",
    "end": "769600"
  },
  {
    "text": "client-side certificates from the",
    "start": "769600",
    "end": "770880"
  },
  {
    "text": "secrets manager",
    "start": "770880",
    "end": "772560"
  },
  {
    "text": "so with that established as the",
    "start": "772560",
    "end": "774720"
  },
  {
    "text": "architectural overview next thing i will",
    "start": "774720",
    "end": "777040"
  },
  {
    "text": "get into is a aws management console",
    "start": "777040",
    "end": "779920"
  },
  {
    "text": "walkthrough",
    "start": "779920",
    "end": "780959"
  },
  {
    "text": "and a small demo",
    "start": "780959",
    "end": "784600"
  },
  {
    "text": "you",
    "start": "786800",
    "end": "788880"
  }
]