[
  {
    "start": "0",
    "end": "122000"
  },
  {
    "text": "- [Stefan] Hello, and\nwelcome to Microsoft on AWS Modernization series part two,",
    "start": "720",
    "end": "7340"
  },
  {
    "text": "Monolith to Microservices.",
    "start": "7340",
    "end": "8713"
  },
  {
    "text": "As we progress through this video series, we will center on a fictional company, AcmeFinancial DataServices, AFDS,",
    "start": "13910",
    "end": "21320"
  },
  {
    "text": "to demonstrate key\nmodernization practices. The practices here have been performed",
    "start": "21320",
    "end": "26810"
  },
  {
    "text": "with actual companies and\nhave been reproduced here and applied to AcmeFinancial DataServices.",
    "start": "26810",
    "end": "31593"
  },
  {
    "text": "So, where is AFDS in their journey? Well, so far, in phase one,",
    "start": "33090",
    "end": "39760"
  },
  {
    "text": "they have completed a\nlift and shift to AWS, using standard practices like CloudEndure,",
    "start": "39760",
    "end": "46890"
  },
  {
    "text": "and have pretty much what\nthey had on-prem in the cloud. In phase two, they performed a series",
    "start": "46890",
    "end": "54320"
  },
  {
    "text": "of optimization efforts on\ntheir AWS infrastructure. This was also covered in\nan earlier video series,",
    "start": "54320",
    "end": "62163"
  },
  {
    "text": "Windows on AWS Optimization series.",
    "start": "63270",
    "end": "67253"
  },
  {
    "text": "So, what now? Well, as part of phase three, we're gonna all talking\nabout modernization",
    "start": "68560",
    "end": "75440"
  },
  {
    "text": "of legacy applications to maximize the benefits of being in the cloud.",
    "start": "75440",
    "end": "80423"
  },
  {
    "text": "So what is it that we're gonna modernize? Well, AFDS has a platform\ncalled OneVision,",
    "start": "83200",
    "end": "89333"
  },
  {
    "text": "and you are tasked with assisting\nAcmeFinancial DataServices to modernize their OneVision platform.",
    "start": "90930",
    "end": "96603"
  },
  {
    "text": "This represents a legacy\nmonolithic application, which is now on AWS, but is pretty much as it\nwas when it was on-prem.",
    "start": "97950",
    "end": "107340"
  },
  {
    "text": "It is used to manage customer accounts, customer invoices,",
    "start": "107400",
    "end": "112632"
  },
  {
    "text": "and inventory associated with the above. So, a question now is, why modernize?",
    "start": "113500",
    "end": "121162"
  },
  {
    "start": "122000",
    "end": "122000"
  },
  {
    "text": "Well, covered in video one,\nwhich was Why Modernize?,",
    "start": "122280",
    "end": "127280"
  },
  {
    "text": "we talked about migrating large legacy applications to the cloud, centering around operational costs,",
    "start": "128150",
    "end": "134280"
  },
  {
    "text": "i.e., the costs associated with running the infrastructure and how you can save, or how you focus on where\nyou can make savings.",
    "start": "134280",
    "end": "142190"
  },
  {
    "text": "Workforce productivity, how\neffectively are you able to get your services to market? I.e., as market changes are implemented,",
    "start": "142190",
    "end": "150269"
  },
  {
    "text": "or you want to respond to market changes, how can you effectively\nrespond to those changes?",
    "start": "150270",
    "end": "156360"
  },
  {
    "text": "Cost avoidance, i.e., the\ncreation of an environment that doesn't create unnecessary costs. Have you trimmed the fat off your,",
    "start": "156360",
    "end": "163620"
  },
  {
    "text": "see for example on-prem infrastructure when you migrated it to AWS\nin a lift and shift effort,",
    "start": "163620",
    "end": "169840"
  },
  {
    "text": "and being able to run the most\ncost-optimized infrastructure as you did the optimization effort?",
    "start": "169840",
    "end": "177293"
  },
  {
    "text": "Operational resilience. The reduction of your\norganization's risk profile and risk of migration and mitigation.",
    "start": "178880",
    "end": "188480"
  },
  {
    "text": "For example, are you using\nthe best of the cloud with regard to failover, high\nHA, and disaster recovery?",
    "start": "188480",
    "end": "196350"
  },
  {
    "text": "Business agility. The ability to react quickly\nto changing market conditions.",
    "start": "198450",
    "end": "204570"
  },
  {
    "text": "Is your infrastructure and the way you have organized your infrastructure",
    "start": "204570",
    "end": "209430"
  },
  {
    "text": "allow you to respond to market changes? Time to value.",
    "start": "210540",
    "end": "216099"
  },
  {
    "text": "The opportunity cost of\ndelaying migration for re-architecture or refactoring activities.",
    "start": "216100",
    "end": "221653"
  },
  {
    "text": "The modernization journey. And we will break it down with regard to monolithic and microservices.",
    "start": "224180",
    "end": "231720"
  },
  {
    "text": "For example, monolithic, as you will know, having done this for many years, it makes deployment simple.",
    "start": "231720",
    "end": "238620"
  },
  {
    "text": "It's just one large bunch\nof code that is deployed, and there are typically\nbinary failure modes.",
    "start": "238620",
    "end": "247890"
  },
  {
    "text": "So for example, if you have 10 services inside your monolithic application, the thing is that if one service fails,",
    "start": "247890",
    "end": "255160"
  },
  {
    "text": "everything has to fail as well. So there is little failure options.",
    "start": "255160",
    "end": "261163"
  },
  {
    "text": "Inter-module refactoring. So for example, if you have to change one service,",
    "start": "263160",
    "end": "269000"
  },
  {
    "text": "potentially that could\nimpact another service or another service beyond that. So there's a lot of coupling\nthat you have to worry about.",
    "start": "269000",
    "end": "276873"
  },
  {
    "text": "You also have a technology monoculture. What does that mean? Effectively what that means is",
    "start": "277740",
    "end": "283210"
  },
  {
    "text": "the database or, example, the application has to be written in a\nsingle language, C#, Python,",
    "start": "283210",
    "end": "290844"
  },
  {
    "text": "and everybody has to work and adhere to that single technology.",
    "start": "290844",
    "end": "295493"
  },
  {
    "text": "Restricted scaling. So for example, there's a service like invoicing or accounting that\nyou need to be able to scale.",
    "start": "297680",
    "end": "304860"
  },
  {
    "text": "If there's additional demand or load, then you have to scale as a whole, as opposed to being able to scale",
    "start": "304860",
    "end": "311789"
  },
  {
    "text": "a single service horizontally. It is more challenging\ndeploying microservices,",
    "start": "311790",
    "end": "317790"
  },
  {
    "text": "but it allows you to then\nhave partial deployment. So you can basically only\ndeploy an upgrade or a change",
    "start": "317790",
    "end": "325460"
  },
  {
    "text": "to a specific service rather\nthan have to deploy as a whole. Also you have the graceful degradation.",
    "start": "325460",
    "end": "332570"
  },
  {
    "text": "So for example, if a service fails, it should not impact\nother dependent services",
    "start": "332570",
    "end": "338030"
  },
  {
    "text": "or other services that are as\ndependent as they were before.",
    "start": "338030",
    "end": "342483"
  },
  {
    "text": "Also, you want to have\nstrong module boundaries. This talks back to graceful degradation.",
    "start": "343750",
    "end": "349820"
  },
  {
    "text": "So, for example, if one\nservice is having some issues, it does not impact the application\nor platform as a whole.",
    "start": "349820",
    "end": "357543"
  },
  {
    "text": "Technology diversity. By having microservices or\nusing microservice practices,",
    "start": "358990",
    "end": "365240"
  },
  {
    "text": "you can then use the most ideal technology or language or architecture",
    "start": "365240",
    "end": "371910"
  },
  {
    "text": "for the microservice\nthat is being developed or being refactored.",
    "start": "371910",
    "end": "378600"
  },
  {
    "text": "Independent scalability. By having independent scalability, you are able to horizontally scale, load,",
    "start": "380100",
    "end": "387360"
  },
  {
    "text": "launch additional microservices, as you anticipate additional\nload on certain services",
    "start": "387360",
    "end": "394560"
  },
  {
    "text": "without impacting or needing\nto have additional services that aren't needed to be scaled.",
    "start": "394560",
    "end": "400163"
  },
  {
    "start": "401000",
    "end": "401000"
  },
  {
    "text": "Independent deployability is key. What does that mean?",
    "start": "402490",
    "end": "407650"
  },
  {
    "text": "Independent deployability is the idea that we can make a change to a microservice and deploy\nit into production environment",
    "start": "408500",
    "end": "415898"
  },
  {
    "text": "without having to utilize\nany other service. You also need to get into the\nhabit of releasing changes",
    "start": "415898",
    "end": "423579"
  },
  {
    "text": "to a single service into production without having to deploy anything else.",
    "start": "423579",
    "end": "427703"
  },
  {
    "text": "And also to guarantee\nindependent deployability, we need to ensure our\nservices are loosely coupled.",
    "start": "429210",
    "end": "436600"
  },
  {
    "text": "In other words, we need to\nbe able to change one service without having to change anything else.",
    "start": "436600",
    "end": "441833"
  },
  {
    "text": "So the desire for loosely coupled service with stable interfaces guides our thinking about how we find service\nboundaries in the first place.",
    "start": "443020",
    "end": "450723"
  },
  {
    "text": "Next, let's talk about\ncoupling and cohesion. First of all, we wanna reduce coupling.",
    "start": "451990",
    "end": "458350"
  },
  {
    "start": "452000",
    "end": "452000"
  },
  {
    "text": "Monolithic services can\nhave quite high coupling. Tight coupling of\nunrelated services is bad.",
    "start": "458350",
    "end": "465270"
  },
  {
    "text": "So for example, in a case\nof monolithic service, services that might be coupled\nare hard to basically scale,",
    "start": "465270",
    "end": "472170"
  },
  {
    "text": "like we said before,\namong other challenges. And also, it is expensive to change code",
    "start": "472170",
    "end": "478990"
  },
  {
    "text": "in applications which are tightly coupled because one change to a service might need you to have to change a service",
    "start": "478990",
    "end": "486060"
  },
  {
    "text": "which is unrelated, but the way it was written\nrequires that change.",
    "start": "486060",
    "end": "490533"
  },
  {
    "text": "And also multiple changes\nacross unrelated services. As well as multi deployment.",
    "start": "491740",
    "end": "497860"
  },
  {
    "text": "So for example, if you wanna\ncan update to one service, you might end up having to redeploy",
    "start": "497860",
    "end": "503272"
  },
  {
    "text": "three or four other services, which have not changed, therefore, increasing your chance of having issues",
    "start": "503272",
    "end": "510447"
  },
  {
    "text": "when you move those\nchanges into production. Cohesion.",
    "start": "510447",
    "end": "515820"
  },
  {
    "text": "What we need to do is increase cohesion. What does that mean? Code that changes together stays together.",
    "start": "515820",
    "end": "522643"
  },
  {
    "text": "Also, cohesion is how you\ngroup your code together.",
    "start": "525220",
    "end": "528763"
  },
  {
    "text": "And what you will need to think about is bring together tightly related code.",
    "start": "531820",
    "end": "536283"
  },
  {
    "text": "This moves on to the next\nstatement by Martin Fowler. \"If you do a big bang rewrite,",
    "start": "537610",
    "end": "543007"
  },
  {
    "text": "\"the only thing you're\ncertain of is a big bang.\" So we need to think about this as we start to do our\nmodernization journey.",
    "start": "543007",
    "end": "549780"
  },
  {
    "text": "We have discussed key factors\nlike coupling, cohesion, and independent deployability.",
    "start": "549780",
    "end": "554660"
  },
  {
    "start": "550000",
    "end": "550000"
  },
  {
    "text": "Let's use this chart to\nguide where possible places to start modernizing are for AFDS.",
    "start": "555660",
    "end": "561380"
  },
  {
    "text": "We will use this chart to (voice muffling) possible services. Let's place them on the map based on",
    "start": "561380",
    "end": "567500"
  },
  {
    "text": "where we feel they fit best. Also, make sure you work\nwith both business sponsors",
    "start": "567500",
    "end": "573330"
  },
  {
    "text": "and chief architects\nto populate this chart. The X axis focuses on services",
    "start": "573330",
    "end": "580240"
  },
  {
    "text": "which are easy to extract\nfrom the monolith. For example, they have lower dependencies and lower coupling.",
    "start": "580240",
    "end": "585472"
  },
  {
    "text": "The Y axis will focus on services, which provide the greatest benefit from both a business and or\ntechnical learning perspective.",
    "start": "586510",
    "end": "595810"
  },
  {
    "text": "Having discussed with business sponsors and technical architects, we feel that shopping is\nrelatively easy to extract,",
    "start": "595970",
    "end": "602930"
  },
  {
    "text": "but the business benefit is low, but for the accounting service,",
    "start": "602930",
    "end": "608100"
  },
  {
    "text": "we feel that it is both easy to extract, and the benefits of extracting it",
    "start": "608100",
    "end": "614910"
  },
  {
    "text": "will also provide the greatest benefit. Payroll will be hard to extract,",
    "start": "614910",
    "end": "621380"
  },
  {
    "text": "and the benefits of extracting it from both a business and\narchitectural perspective are low.",
    "start": "621380",
    "end": "627543"
  },
  {
    "text": "Inventory will be less easy to extract, but the benefits of extracting it",
    "start": "628610",
    "end": "634000"
  },
  {
    "text": "will be great from a technical\nand business perspective. And finally, invoicing.",
    "start": "634000",
    "end": "640773"
  },
  {
    "text": "We feel it will be both easy to extract as well as the benefits of\nextracting it for the business,",
    "start": "641800",
    "end": "650009"
  },
  {
    "text": "as well as for technical\nlearning will also be high. Having assessed the business\nand technical drivers for AFDS,",
    "start": "650010",
    "end": "657260"
  },
  {
    "text": "you have selected which\nservices to modernize using access chart shown.",
    "start": "657260",
    "end": "662920"
  },
  {
    "text": "The yellow box indicates\nservices which have high cohesion and should all be considered",
    "start": "662920",
    "end": "668800"
  },
  {
    "text": "in an initial phase of modernization. Prior to any modernization\nand architectural change,",
    "start": "668800",
    "end": "676230"
  },
  {
    "text": "an organizational change\nwithin your company is key to ensuring success.",
    "start": "676230",
    "end": "680963"
  },
  {
    "start": "682000",
    "end": "682000"
  },
  {
    "text": "Changes in functionality are primarily about changes in business functionality,",
    "start": "682080",
    "end": "687540"
  },
  {
    "text": "and they should not be\ndriven by technical drivers, but here our business\nfunctionality is in effect",
    "start": "687540",
    "end": "693670"
  },
  {
    "text": "spread across all three tiers, thus increasing the chance\nthat a change in functionality",
    "start": "693670",
    "end": "699280"
  },
  {
    "text": "will also impact all the layers. This is an architecture in\nwhich we have high cohesion",
    "start": "699280",
    "end": "707240"
  },
  {
    "text": "of related technology, but a low cohesion of\nbusiness functionality. If we want to make it easier\nto make changes, instead,",
    "start": "707240",
    "end": "715450"
  },
  {
    "text": "we need to change how we group code. We should choose cohesion of business.",
    "start": "715450",
    "end": "722087"
  },
  {
    "text": "So here you can see the account service, the invoicing service,\nand the inventory service",
    "start": "722087",
    "end": "727820"
  },
  {
    "text": "are actually crossing\nacross three swim lanes impacting the API Team, the Business Logic\nteam, and the Data Team.",
    "start": "727820",
    "end": "735203"
  },
  {
    "text": "What does that mean? So in terms of typical\nmonolithic ownership,",
    "start": "736340",
    "end": "742225"
  },
  {
    "start": "738000",
    "end": "738000"
  },
  {
    "text": "organizations are broken down\nby technical competencies.",
    "start": "742225",
    "end": "747225"
  },
  {
    "text": "Historically teams are organized\nby technical competency and siloed, for example,\nall DBAs sit together,",
    "start": "747760",
    "end": "757040"
  },
  {
    "text": "all UI developers sit together, and so on. Product sponsors are the spokesmen",
    "start": "757940",
    "end": "764220"
  },
  {
    "text": "for the business and users. Therefore, each team\nimplements what they believe",
    "start": "764220",
    "end": "769940"
  },
  {
    "text": "is being requested by the product sponsor. Teams should be grouped\nbased on business function.",
    "start": "769940",
    "end": "776200"
  },
  {
    "text": "For example, accounts,\ninventory, invoicing, and closer to the business sponsor.",
    "start": "776200",
    "end": "782570"
  },
  {
    "text": "So this example here shows users conveying their requests\nto the product sponsor.",
    "start": "782570",
    "end": "787980"
  },
  {
    "text": "The user could be external users, or it could be internal users. But key thing is, is that the requests",
    "start": "787980",
    "end": "795730"
  },
  {
    "text": "are channeled through a product sponsor. Between a product sponsor and\nthe actual development teams,",
    "start": "795730",
    "end": "802326"
  },
  {
    "text": "you have what is sometimes referred to as the land of confusion. Therefore, the product\nsponsor will make his requests",
    "start": "802327",
    "end": "811012"
  },
  {
    "text": "through the so-called land of confusion. Once it passes through there,",
    "start": "811012",
    "end": "816279"
  },
  {
    "text": "it will then be conveyed\nin different understandings to the UI Team, the App\nLogic Team, and the DBA Team.",
    "start": "816280",
    "end": "824800"
  },
  {
    "text": "So what you see here is the organizational structure is replicating the application structure.",
    "start": "824800",
    "end": "832985"
  },
  {
    "start": "833000",
    "end": "833000"
  },
  {
    "text": "A key approach to developing microservices is to reorganize your team\nto align with services,",
    "start": "833240",
    "end": "839470"
  },
  {
    "text": "to meet the needs of the business rather than focus on\ntechnical limitations,",
    "start": "839470",
    "end": "844800"
  },
  {
    "text": "which are being placed on them. So as you see here, once you\nstart breaking off services,",
    "start": "844800",
    "end": "851570"
  },
  {
    "text": "you need to actually\nhave dedicated API Teams, Business Logic Teams, and Data Teams",
    "start": "851570",
    "end": "856970"
  },
  {
    "text": "dedicated to a particular account service. In this case team A. Likewise, for invoicing service, team B,",
    "start": "856970",
    "end": "865200"
  },
  {
    "text": "you need to have a dedicated API Team, a Business Logic Team, and a Data Team.",
    "start": "865200",
    "end": "870820"
  },
  {
    "text": "This is reflected here where\nwe have dedicated teams for the accounts, a dedicated\nteam, so for example,",
    "start": "870820",
    "end": "877649"
  },
  {
    "start": "871000",
    "end": "871000"
  },
  {
    "text": "retail, which is also responsible\nfor the inventory service,",
    "start": "877650",
    "end": "882650"
  },
  {
    "text": "an eCommerce team which is responsible for the shopping service. And as you can see here, each has its own dedicated API Team,",
    "start": "882810",
    "end": "890649"
  },
  {
    "text": "Data Team, and Business Logic Team. To further augment this you should have a\ndedicated product sponsor.",
    "start": "890650",
    "end": "898500"
  },
  {
    "text": "Therefore, there is no\nloss of communication in terms of interpreting",
    "start": "898500",
    "end": "903750"
  },
  {
    "text": "what is being requested from the user. So therefore, by organizing teams into specific business-focused teams,",
    "start": "903750",
    "end": "911150"
  },
  {
    "text": "and having their own\ndedicated technical resource and each having direct access\nto the business sponsor",
    "start": "911150",
    "end": "917100"
  },
  {
    "text": "they can better respond to the ever-changing\nexpectations of the business.",
    "start": "917100",
    "end": "922420"
  },
  {
    "text": "Conway's Law applies to\nmodular software systems and states that, \"Any organization that designs a system,",
    "start": "922420",
    "end": "928677"
  },
  {
    "text": "\"defined more broadly here\nthan just information systems, \"will inevitably produce a design",
    "start": "928677",
    "end": "934387"
  },
  {
    "text": "\"whose structure is a copy \"of the organization's\ncommunication structure.\"",
    "start": "934387",
    "end": "939660"
  },
  {
    "text": "Let's start now by talking about modernization failure modes.",
    "start": "939660",
    "end": "944680"
  },
  {
    "text": "Along with picking suitable\ncandidates to modernize, AFDS need to understand\nmodernization failure modes",
    "start": "944680",
    "end": "953079"
  },
  {
    "text": "and make adjustments in a decision making and a desired end state to avoid some of these common pitfalls.",
    "start": "953080",
    "end": "960503"
  },
  {
    "start": "963000",
    "end": "963000"
  },
  {
    "text": "Let's start with recreating\nold problems in newer ways. By changing historical\napproaches and mindsets,",
    "start": "963800",
    "end": "971562"
  },
  {
    "text": "and exploring the potential of the cloud, you can avoid recreating\nsmaller monoliths.",
    "start": "971562",
    "end": "977553"
  },
  {
    "text": "By ensuring you have explored a way to fully monitor all the new\nlayers you are introducing",
    "start": "978400",
    "end": "982860"
  },
  {
    "text": "and consolidating your\nlogging and monitoring you can avoid adding to\ntroubleshooting nightmares.",
    "start": "983720",
    "end": "989603"
  },
  {
    "text": "Also, by growing\nincrementally and carefully, you can avoid incrementally\nbloating operational burden.",
    "start": "991090",
    "end": "998443"
  },
  {
    "text": "Misaligned organizational\nand cultural practices can be avoided by forming a\nCloud Center of Excellence",
    "start": "1001540",
    "end": "1010270"
  },
  {
    "text": "and pooling your guidance\nand best practice through it. And then, performing\nre-organizational changes",
    "start": "1010270",
    "end": "1018990"
  },
  {
    "text": "into service teams you\ncan avoid large teams without clear ownership.",
    "start": "1018990",
    "end": "1024012"
  },
  {
    "text": "By breaking the monolith you can move away from big bang releases, as we discussed earlier in this video.",
    "start": "1025500",
    "end": "1031600"
  },
  {
    "text": "And then also by assigning\ndedicated product sponsors to each service team, you can\navoid disconnected customers.",
    "start": "1031600",
    "end": "1040620"
  },
  {
    "text": "Theatrical innovation scheme. Again, by having a\ndedicated product sponsor,",
    "start": "1040710",
    "end": "1046800"
  },
  {
    "text": "as well as forming a\nCloud Center of Excellence and pooling guidance and\nbest practices through it,",
    "start": "1046800",
    "end": "1052149"
  },
  {
    "text": "you can avoid siloed innovation teams and innovation drama with\nmisaligned business values,",
    "start": "1052150",
    "end": "1058513"
  },
  {
    "text": "Transformation fatigue and\nunclear business value. Again, by forming a Cloud\nCenter of Excellence",
    "start": "1059930",
    "end": "1066809"
  },
  {
    "text": "and pooling guidance and\nbest practices through it, you can avoid piped\nvision with business value",
    "start": "1066810",
    "end": "1073200"
  },
  {
    "text": "and unclear and delayed\nbusiness value realization.",
    "start": "1073201",
    "end": "1077833"
  },
  {
    "text": "Again, by closer coordination\nwith product sponsors and moving to a microservices\ndelivery approach,",
    "start": "1078860",
    "end": "1085179"
  },
  {
    "text": "you can avoid a multi-year wait and biting off more than can be chewed.",
    "start": "1085180",
    "end": "1090303"
  },
  {
    "text": "Let's now talk about migration strategies.",
    "start": "1092440",
    "end": "1094539"
  },
  {
    "start": "1098000",
    "end": "1098000"
  },
  {
    "text": "The following are some .NET application migration strategies. Let's take the source\ntechnology as ASP.NET Framework",
    "start": "1100170",
    "end": "1107900"
  },
  {
    "text": "hosted on an IIS server. And this server is on-prem.",
    "start": "1107900",
    "end": "1112752"
  },
  {
    "text": "Let's go through some activities\nand target architectures and target technologies that we have",
    "start": "1113590",
    "end": "1118840"
  },
  {
    "text": "with regard to these migration strategies. For example, re-host.",
    "start": "1118840",
    "end": "1124630"
  },
  {
    "text": "That can be done by re-hosting\nonto an Amazon EC2 instance.",
    "start": "1124630",
    "end": "1129630"
  },
  {
    "text": "The target technology would then be ASP.NET Framework hosted on IIS. This is almost a lift and\nshift type of approach.",
    "start": "1132240",
    "end": "1140743"
  },
  {
    "text": "Next is a re-platform, where you could basically\ntake the existing framework",
    "start": "1141930",
    "end": "1147080"
  },
  {
    "text": "and just place it onto\nAmazon AWS Elastic Beanstalk,",
    "start": "1147080",
    "end": "1152080"
  },
  {
    "text": "which would also be ASP.NET hosted on IIS.",
    "start": "1152860",
    "end": "1157860"
  },
  {
    "text": "Next would be a potential\nre-platform/rewrite option, where we could leverage Amazon ECS,",
    "start": "1157900",
    "end": "1164529"
  },
  {
    "text": "the container technology. The target technology would then be either",
    "start": "1164530",
    "end": "1170620"
  },
  {
    "text": "a re-platform with ASP.NET\nFramework hosted on IIS,",
    "start": "1170620",
    "end": "1175620"
  },
  {
    "text": "or it could involve a rewrite\nimporting it to ASP.NET Core,",
    "start": "1176210",
    "end": "1181210"
  },
  {
    "text": "hosting on Linux, thus\nsaving licensing costs for the Windows OS.",
    "start": "1181600",
    "end": "1186803"
  },
  {
    "text": "Again, another option would\nbe to re-platform and rewrite to Amazon EKS, which is the Kubernetes",
    "start": "1188500",
    "end": "1196000"
  },
  {
    "text": "orchestration approach. And that would be similar\nin the sense it would be a re-platform on ASP.NET\nFramework hosted on IIS,",
    "start": "1196940",
    "end": "1206780"
  },
  {
    "text": "within a Windows container. Or it could be a rewrite to\nASP.NET Core hosted on Linux",
    "start": "1207260",
    "end": "1214200"
  },
  {
    "text": "using the boarding tool\nthat is available from AWS.",
    "start": "1214640",
    "end": "1217677"
  },
  {
    "text": "Next option would be more challenging, which would be a rewrite where you could host on AWS Fargate.",
    "start": "1220390",
    "end": "1227323"
  },
  {
    "text": "And this would give\nyou a target technology of ASP.NET Core hosted on Linux,",
    "start": "1228620",
    "end": "1234720"
  },
  {
    "text": "where you would've port\nthe legacy.net framework onto .NET Core.",
    "start": "1234720",
    "end": "1240423"
  },
  {
    "text": "Again, the final option would be to basically go with serverless,\nwhich is AWS Lambda,",
    "start": "1241530",
    "end": "1248159"
  },
  {
    "text": "and that would then entail\nporting it to ASP.NET Core hosted in a Lambda environment.",
    "start": "1248160",
    "end": "1254073"
  },
  {
    "start": "1257000",
    "end": "1257000"
  },
  {
    "text": "So let's recap some of\nthe migration options. For example, bring your servers.",
    "start": "1258240",
    "end": "1264610"
  },
  {
    "text": "In this case, AFDS have\ncompleted this journey,",
    "start": "1264610",
    "end": "1269610"
  },
  {
    "text": "they leveraged CloudEndure Agent on-prem. They then performed the replication.",
    "start": "1270140",
    "end": "1275340"
  },
  {
    "text": "They tagged their AMIs according to how they would sit within AWS and then deployed using AWS CloudFormation",
    "start": "1275340",
    "end": "1283510"
  },
  {
    "text": "or CloudEndure, if they went\nthe whole CloudEndure route.",
    "start": "1283510",
    "end": "1287683"
  },
  {
    "text": "Alternatively, if you have\nmade the container journey, you could bring that or you\ncould just bring your code.",
    "start": "1288960",
    "end": "1296480"
  },
  {
    "text": "In that case, you would\nleverage AWS App2Container. You would then use AWS ECR\nfor storing your images,",
    "start": "1296480",
    "end": "1305240"
  },
  {
    "text": "which is the Amazon container registry.",
    "start": "1305240",
    "end": "1310240"
  },
  {
    "text": "You could then deploy using a combination of CloudFormation for infrastructure",
    "start": "1310320",
    "end": "1315850"
  },
  {
    "text": "and DevOps for deploying your containers.",
    "start": "1315850",
    "end": "1320313"
  },
  {
    "text": "Finally, you can use approaches\nlike Blue/Green deployments",
    "start": "1322290",
    "end": "1327290"
  },
  {
    "text": "to get your code into production. And finally, bring your functional specs.",
    "start": "1327400",
    "end": "1333233"
  },
  {
    "text": "That would then mean\nleveraging AWS Lambda. That would entail, if you were\nusing legacy.net framework,",
    "start": "1334380",
    "end": "1342030"
  },
  {
    "text": "to port to .NET Core. You would then select the\nAWS Lambda and API gateway,",
    "start": "1342030",
    "end": "1350720"
  },
  {
    "text": "which would then involve\nrefactor and deploy using SAM.",
    "start": "1350890",
    "end": "1355573"
  },
  {
    "text": "From the left to right, you\ncan see which option is simple, going to the right, becoming more complex.",
    "start": "1358430",
    "end": "1365173"
  },
  {
    "text": "So bring your servers is what\nwe typically call a rehost. Bringing your existing containers or code",
    "start": "1367360",
    "end": "1374789"
  },
  {
    "text": "would be a replatform. Importing to .NET Core would\nbe typically called a refactor.",
    "start": "1374790",
    "end": "1381430"
  },
  {
    "text": "Let's talk about .NET\napplication migration strategies. So for example, deploying your existing",
    "start": "1383260",
    "end": "1389597"
  },
  {
    "text": ".NET Framework apps as is to EC2, for example, every app can have custom server configurations,",
    "start": "1389597",
    "end": "1396210"
  },
  {
    "text": "different .NET Framework versions, and IIS configurations and dependencies. And that would be moving your code as is",
    "start": "1396210",
    "end": "1403210"
  },
  {
    "text": "into a VM or EC2. Next would be to containerize\ninto Windows Container,",
    "start": "1403210",
    "end": "1411870"
  },
  {
    "text": "which would mean that you\nwould not port .NET Core, but leave your existing framework in place",
    "start": "1411870",
    "end": "1416880"
  },
  {
    "text": "and leverage Windows containers and orchestrate with AWS,\nECS, or container servers.",
    "start": "1416880",
    "end": "1422583"
  },
  {
    "text": "Again, this supports different\nlegacy.net frameworks, IIS configurations, and\nunderlying dependencies,",
    "start": "1423927",
    "end": "1430480"
  },
  {
    "text": "and also can reduce your licensing costs by only charging for the host for the container orchestration.",
    "start": "1430480",
    "end": "1437263"
  },
  {
    "text": "Next, you could then\nuse the AWS porting tool and port to .NET Core and\nrun in either ECS or EKS,",
    "start": "1439270",
    "end": "1448910"
  },
  {
    "text": "the Kubernetes orchestration\nframework, or Fargate, and run as Linux containers.",
    "start": "1449691",
    "end": "1457250"
  },
  {
    "text": "In this case, there are\nno OS licensing costs, and you would result in smaller containers",
    "start": "1457250",
    "end": "1462580"
  },
  {
    "text": "having moved to Lambda\nversus Windows Containers.",
    "start": "1462580",
    "end": "1466742"
  },
  {
    "text": "Finally, you can port the .NET Core and run a serverless in Lambda.",
    "start": "1467790",
    "end": "1473103"
  },
  {
    "text": "So from going from top to bottom, you can see the first option is easier",
    "start": "1475060",
    "end": "1481090"
  },
  {
    "text": "with more challenge and\nmore level of effort as you move down to serverless\nand porting to .NET Core.",
    "start": "1481090",
    "end": "1487223"
  },
  {
    "start": "1489000",
    "end": "1489000"
  },
  {
    "text": "So the question now is\nwhen should you refactor? When the original product\nwas way off the mark,",
    "start": "1489392",
    "end": "1495310"
  },
  {
    "text": "didn't achieve goals, i.e.,\nthere was no user adoption.",
    "start": "1495310",
    "end": "1498803"
  },
  {
    "text": "The original product\ndoes not have traction. There has been significant deviation from the original intent of the product,",
    "start": "1500430",
    "end": "1507620"
  },
  {
    "text": "or you are going after a new market share. Technology is holding you back,",
    "start": "1507620",
    "end": "1513580"
  },
  {
    "text": "Mainframe, Visual Basic\nis overtly customized, using things like SFDC or AEM.",
    "start": "1513580",
    "end": "1521323"
  },
  {
    "text": "Or you wish to redefine\nthe business process around your new system.",
    "start": "1524292",
    "end": "1529112"
  },
  {
    "text": "We will now talk about\nbreaking the monolith, and in this case, AFDS OneVision platform.",
    "start": "1531870",
    "end": "1538002"
  },
  {
    "start": "1541000",
    "end": "1541000"
  },
  {
    "text": "A typical monolithic\nor distributed monolith is effectively a monolithic architecture",
    "start": "1542090",
    "end": "1547120"
  },
  {
    "text": "spread over multiple machines or an architecture which\nneeds to be deployed with other services due to coupling.",
    "start": "1547120",
    "end": "1553323"
  },
  {
    "text": "A distributed monolith is a system that consists of multiple\nservices, but for whatever reason, the entire system has\nto be deployed together.",
    "start": "1554580",
    "end": "1562330"
  },
  {
    "text": "This is a case with\nAFDS OneVision platform, which we are modernizing.",
    "start": "1562330",
    "end": "1567400"
  },
  {
    "text": "Here the account, inventory,\nand shopping service need to be deployed together\ndue to their tight coupling.",
    "start": "1567400",
    "end": "1573923"
  },
  {
    "text": "A distributed monolith may\nwell meet the definition of a service-orientated architecture,",
    "start": "1574860",
    "end": "1580220"
  },
  {
    "text": "but too often fails to\ndeliver on the promise of SOA. Distributed monoliths\nhave all the disadvantages",
    "start": "1580220",
    "end": "1587169"
  },
  {
    "text": "of a distributed system\nand the disadvantages of a single process monolith",
    "start": "1587170",
    "end": "1592180"
  },
  {
    "text": "without having enough upsides of either.",
    "start": "1592180",
    "end": "1596113"
  },
  {
    "text": "So let's talk about what it means to break the monolith for\nAcmeFinancial DataServices",
    "start": "1598460",
    "end": "1604110"
  },
  {
    "text": "and why are they looking at this? AFDS have a tremendous amount of resources",
    "start": "1604110",
    "end": "1609210"
  },
  {
    "text": "invested in their existing\nmonolithic application. AFDS are looking for a sane way to capture",
    "start": "1609210",
    "end": "1615150"
  },
  {
    "text": "the benefits of containers\nand orchestration without having to completely rewrite.",
    "start": "1615150",
    "end": "1619872"
  },
  {
    "text": "AWS provides a path\nforward for microservices based on apps in the future, with the various services that they have.",
    "start": "1622108",
    "end": "1628990"
  },
  {
    "text": "As well as AWS provides familiarity and a microservices proving ground, with the many years in this space.",
    "start": "1630030",
    "end": "1637773"
  },
  {
    "start": "1640000",
    "end": "1640000"
  },
  {
    "text": "Now let's look at breaking the monolith using something which called\nthe Strangler Fig pattern.",
    "start": "1640231",
    "end": "1645283"
  },
  {
    "text": "The Strangler Fig is a form of vine which comes from the natural\ngrowth around the host tree.",
    "start": "1646490",
    "end": "1653040"
  },
  {
    "text": "Gradually roots wrap around the host tree, widen and slowly form a lattice work",
    "start": "1653040",
    "end": "1658640"
  },
  {
    "text": "that surrounds the trunk's host. As you can see here, in\nred is the strangler fig and brown is the original host tree.",
    "start": "1658640",
    "end": "1666490"
  },
  {
    "text": "We can think of the vine\nas the modernization effort and the horse tree as a legacy monolith.",
    "start": "1666490",
    "end": "1671373"
  },
  {
    "text": "Eventually the host tree is replaced, leaving the fig with a hollow trunk.",
    "start": "1672521",
    "end": "1677173"
  },
  {
    "text": "Now let's look at this from\na modernization perspective. This modernization method is based on",
    "start": "1679570",
    "end": "1684690"
  },
  {
    "text": "incrementally replacing\nexisting functionalities of the old legacy system",
    "start": "1684690",
    "end": "1689769"
  },
  {
    "text": "with new applications and\nservices in a phase approach until the new application\neventually replaces all",
    "start": "1689770",
    "end": "1697560"
  },
  {
    "text": "or the old part of the\nlegacy systems features. So for example, here, as we introduce microservices\nin the form of a fig vine,",
    "start": "1697560",
    "end": "1707140"
  },
  {
    "text": "and we introduce more of\nthem, i.e., for example, we replace more of the legacy monolith with more microservices,",
    "start": "1707140",
    "end": "1713403"
  },
  {
    "text": "we can then strangle the host tree to the point where eventually",
    "start": "1714463",
    "end": "1719980"
  },
  {
    "text": "the monolithic application has been fully replaced by microservices.",
    "start": "1719980",
    "end": "1724833"
  },
  {
    "text": "Strangling means incrementally\nreplacing functionality in an app with something better,",
    "start": "1728380",
    "end": "1733560"
  },
  {
    "text": "therefore, cheaper, faster,\nand easier to maintain. So what we have here is a\ntypical three-tier architecture",
    "start": "1733560",
    "end": "1740200"
  },
  {
    "text": "with a UI, the original monolith, and a database to service a data store.",
    "start": "1740200",
    "end": "1745563"
  },
  {
    "text": "As function is replaced,\ndead parts of the monolith can be removed or retired. So as you can see here, by\ninserting a proxy between the UI",
    "start": "1747690",
    "end": "1755920"
  },
  {
    "text": "and the original monolithic code, you can then call out to the service. What is also shown here is\na portion of the database",
    "start": "1755920",
    "end": "1764090"
  },
  {
    "text": "has also been extracted and made into a dedicated data\nstore for this new service.",
    "start": "1764090",
    "end": "1770083"
  },
  {
    "text": "This includes new functionality\nduring strangulation to make it more attractive\nto business stakeholders. So this is the continuation\nof strangling the monolith",
    "start": "1771050",
    "end": "1779429"
  },
  {
    "text": "for another service and\nanother dedicated data store. Therefore, if you continue this process,",
    "start": "1779430",
    "end": "1786420"
  },
  {
    "text": "you'll eventually remove\nthe original monolith or have it down to a point where",
    "start": "1786420",
    "end": "1791440"
  },
  {
    "text": "it only features functionality which no longer needs to be replaced.",
    "start": "1791440",
    "end": "1795883"
  },
  {
    "start": "1796000",
    "end": "1796000"
  },
  {
    "text": "Now let's discuss when to\nuse the Strangler Pattern.",
    "start": "1798240",
    "end": "1801163"
  },
  {
    "text": "The following guidance will ensure that you don't have to redeploy the entire monolith application regularly.",
    "start": "1803770",
    "end": "1809970"
  },
  {
    "text": "And by breaking services out, it will allow you to independently scale and deploy the application more smoothly.",
    "start": "1809970",
    "end": "1816303"
  },
  {
    "text": "First, select a component\nwhich has good test coverage and less technical debt\nassociated with it.",
    "start": "1817510",
    "end": "1823520"
  },
  {
    "text": "Starting with this\ncomponent can give teams a lot of confidence during\nthe modernization process.",
    "start": "1823520",
    "end": "1828703"
  },
  {
    "text": "Next select components which\nhave scalability requirements. Start with one of these components.",
    "start": "1829730",
    "end": "1835573"
  },
  {
    "text": "Finally, select a component which has frequent business\nrequirement changes and more frequent deployments.",
    "start": "1836710",
    "end": "1842143"
  },
  {
    "start": "1846000",
    "end": "1846000"
  },
  {
    "text": "Now let's go back to the\nAFDS OneVision platform, which we discussed earlier,",
    "start": "1848350",
    "end": "1853450"
  },
  {
    "text": "and the services we identified\nas possible candidates to strangle from the monolith.",
    "start": "1853450",
    "end": "1857833"
  },
  {
    "text": "And now we will discuss how we'll do this by leveraging branch by abstraction.",
    "start": "1858950",
    "end": "1863583"
  },
  {
    "text": "Branch by abstraction is a technique for making a large scale change to a software system in a gradual way",
    "start": "1864720",
    "end": "1871090"
  },
  {
    "text": "that allows to release\nthe system regularly while the change is still in progress.",
    "start": "1871090",
    "end": "1877299"
  },
  {
    "text": "So here we have the account service, the invoicing service,\nand inventory service, as we identified as having\nloose coupling and high cohesion",
    "start": "1877300",
    "end": "1886770"
  },
  {
    "text": "and good candidates for modernization. Now let's go walk through the process",
    "start": "1887040",
    "end": "1892600"
  },
  {
    "text": "of branch by abstraction. First, we will introduce\nan anti-corruption layer",
    "start": "1892600",
    "end": "1898810"
  },
  {
    "text": "in the form of an interface. This will create an\nabstraction point for us.",
    "start": "1898810",
    "end": "1904150"
  },
  {
    "text": "We will introduce it between the invoicing and inventory service and the account and inventory service.",
    "start": "1904150",
    "end": "1910673"
  },
  {
    "text": "Then we will remove existing calls from the invoicing to\nthe inventory service, as well as the account\nand inventory service,",
    "start": "1913540",
    "end": "1921240"
  },
  {
    "text": "and we will work on a new\nservice implementation. The service implementation\nis effectively client code",
    "start": "1921240",
    "end": "1927970"
  },
  {
    "text": "inside the monolith that\nwill allow calls out to a new microservice. The service implementation will\nimplement the same service.",
    "start": "1927970",
    "end": "1935382"
  },
  {
    "text": "The functionality inside\nthe inventory service will be copied into the\nnew inventory microservice",
    "start": "1936270",
    "end": "1941870"
  },
  {
    "text": "if there's no need to\nchange the legacy code.",
    "start": "1941870",
    "end": "1944973"
  },
  {
    "text": "We will implement the switch\nover by pushing all this, including the new interface,\nthe service implementation,",
    "start": "1948140",
    "end": "1954679"
  },
  {
    "text": "and the new service,\nfirst into QA for testing the service implementation\nand the new inventory service",
    "start": "1954680",
    "end": "1961300"
  },
  {
    "text": "via the existing monolith, and finally into production\nfor full evaluation.",
    "start": "1961300",
    "end": "1966623"
  },
  {
    "text": "Once we are happy with the stability and performance of the\nnew inventory service, we can perform a cleanup.",
    "start": "1967510",
    "end": "1973309"
  },
  {
    "text": "This can involve cleaning the monolith by removing the legacy inventory service.",
    "start": "1973310",
    "end": "1978233"
  },
  {
    "start": "1982000",
    "end": "1982000"
  },
  {
    "text": "So now let's look at strangling\nthe monolith at scale. This example shows how you\ncan implement a new service,",
    "start": "1983470",
    "end": "1990193"
  },
  {
    "text": "Including its own dedicated data store, while ensuring you can still\ncommunicate with a monolith",
    "start": "1992430",
    "end": "1997600"
  },
  {
    "text": "by the use of our anti-corruption layer. So, as we discussed before,",
    "start": "1997600",
    "end": "2003110"
  },
  {
    "text": "we isolate the different\nsubsystems by placing anti-corruption layer between them.",
    "start": "2003110",
    "end": "2007253"
  },
  {
    "text": "This layer translates communication\nbetween the two systems, allowing one system to remain unchanged while avoiding a compromise in its design",
    "start": "2008200",
    "end": "2015260"
  },
  {
    "text": "and technological approach. So as we break out more services,",
    "start": "2015260",
    "end": "2021450"
  },
  {
    "text": "in this case, the user service, and introduce an anti-corruption layer, we can also have the user service",
    "start": "2021450",
    "end": "2026910"
  },
  {
    "text": "have its own dedicated user database.",
    "start": "2026910",
    "end": "2030213"
  },
  {
    "text": "Again, we can do this for the cart service and introduce an anti-corruption layer,",
    "start": "2032050",
    "end": "2038430"
  },
  {
    "text": "and then also have an\nits dedicated data store. Likewise for the account service.",
    "start": "2038430",
    "end": "2044009"
  },
  {
    "text": "The introduction of an\nanti-corruption layer and a dedicated account database.",
    "start": "2044010",
    "end": "2048693"
  },
  {
    "text": "So as you can see here, not only are we strangling the monolithic application,",
    "start": "2049528",
    "end": "2056010"
  },
  {
    "text": "but potentially strangling\nthe monolithic database by introducing dedicated data\nstores for each microservice.",
    "start": "2056010",
    "end": "2064450"
  },
  {
    "text": "So finally, as you can see here, as we continue to break off microservices from monolithic application,",
    "start": "2064450",
    "end": "2071790"
  },
  {
    "start": "2065000",
    "end": "2065000"
  },
  {
    "text": "including creating a dedicated data store for each of the microservice, we can eventually eliminate\nthe monolith altogether",
    "start": "2071790",
    "end": "2078200"
  },
  {
    "text": "and the monolithic\ndatabase that supported it. We will now delve into\nleveraging the principles",
    "start": "2078200",
    "end": "2085149"
  },
  {
    "text": "of domain-driven design\nto guide the process of breaking the monolith and the use of the Strangler Pattern.",
    "start": "2085150",
    "end": "2091023"
  },
  {
    "start": "2093000",
    "end": "2093000"
  },
  {
    "text": "Domain-driven design. Domain-driven design is an\napproach to developing software for complex needs by deeply\nconnecting the implementation",
    "start": "2093930",
    "end": "2103650"
  },
  {
    "text": "of an evolving model of\nthe core business concepts.",
    "start": "2103650",
    "end": "2107573"
  },
  {
    "text": "Its premise is place the\nproject's primary focus on the core domain and domain logic.",
    "start": "2109040",
    "end": "2114920"
  },
  {
    "text": "Base complex designs on a model. Since we already have a\ncomplete application in place,",
    "start": "2114920",
    "end": "2121130"
  },
  {
    "text": "we need to work backwards\nfrom the monolith. It is via this premise we will\nleverage a Strangler Pattern",
    "start": "2121130",
    "end": "2127309"
  },
  {
    "text": "to guide the breaking of the monolith and arrive at which services to strangle, hence the term domain-driven strangler.",
    "start": "2127310",
    "end": "2135133"
  },
  {
    "text": "Strangling the monolith, follow the data. In some cases, we may\nhave a legacy application",
    "start": "2136510",
    "end": "2142569"
  },
  {
    "text": "with unclear, hidden, and\nhard to follow dependencies. It is, therefore, not\nclear what the impact",
    "start": "2142570",
    "end": "2148800"
  },
  {
    "text": "of strangling certain services will have on the other remaining services\nand the monolith as a whole.",
    "start": "2148800",
    "end": "2155340"
  },
  {
    "text": "By following and collect the data in the running application, we can better form an understanding",
    "start": "2155340",
    "end": "2160820"
  },
  {
    "text": "of the dependencies,\ncoupling, and cohesion, and achieve independent deployability",
    "start": "2160820",
    "end": "2166906"
  },
  {
    "text": "for the services we plan to strangle. So as you can see here, we need to study the\ntraffic around the system.",
    "start": "2166906",
    "end": "2173923"
  },
  {
    "text": "Therefore, by following\nand collecting the data in the running application, we can better form an understanding",
    "start": "2179730",
    "end": "2186410"
  },
  {
    "text": "of dependencies, coupling, and cohesion, and achieve independent deployabilities",
    "start": "2186410",
    "end": "2191884"
  },
  {
    "text": "for the services we plan to strangle. Distributor tracing. Modern applications and\nsites increasingly use",
    "start": "2191884",
    "end": "2199039"
  },
  {
    "text": "many interconnected services. An application architecture\nthat relies on many services",
    "start": "2199040",
    "end": "2204880"
  },
  {
    "text": "or microservices is often referred to as a distributed system.",
    "start": "2204880",
    "end": "2209143"
  },
  {
    "text": "Distributed tracing is a\nprocess of tracking the activity resulting from a request\nto an application.",
    "start": "2210243",
    "end": "2215763"
  },
  {
    "text": "So what do you need to discover? Trace the path of the request as it travels across the complex system,",
    "start": "2216830",
    "end": "2225329"
  },
  {
    "text": "discovers the latency of the\ncomponents along that path, and know which components in the path",
    "start": "2225330",
    "end": "2232410"
  },
  {
    "text": "is creating a bottleneck. Let's use this example as a typical",
    "start": "2232410",
    "end": "2237790"
  },
  {
    "text": "multi-tier web application\nwithin an AWS VPC and two availability zones.",
    "start": "2237790",
    "end": "2244460"
  },
  {
    "text": "At present the user accesses a system via an elastic load balancer.",
    "start": "2244460",
    "end": "2248063"
  },
  {
    "start": "2250000",
    "end": "2250000"
  },
  {
    "text": "We will introduce a path through proxy by adding an API Gateway between the users",
    "start": "2250460",
    "end": "2255910"
  },
  {
    "text": "and elastic load balancer, to trace and record\nrequests to the application.",
    "start": "2255910",
    "end": "2260563"
  },
  {
    "start": "2261000",
    "end": "2261000"
  },
  {
    "text": "We can then leverage AWS x-ray to trace and study the requests being passed into API Gateway,",
    "start": "2262720",
    "end": "2270073"
  },
  {
    "text": "AWS X-Ray traces user requests as they travel through your entire system.",
    "start": "2272820",
    "end": "2278370"
  },
  {
    "text": "It aggregates the data generated by individual services and resources that make up your application,",
    "start": "2278370",
    "end": "2284750"
  },
  {
    "text": "providing you an end-to-end view of how your application is performing.",
    "start": "2284750",
    "end": "2288863"
  },
  {
    "text": "This shows a service map. AWS X-Ray creates a map\nof your services used",
    "start": "2289860",
    "end": "2295530"
  },
  {
    "text": "by your application with trace data that you can use to drill into\nspecific services or issues.",
    "start": "2295530",
    "end": "2302270"
  },
  {
    "text": "This provides a view of\nconnections between services in your application and\naggregated data for each service,",
    "start": "2302270",
    "end": "2308510"
  },
  {
    "text": "including average latency\nand failure rates. You can create dependency trees,",
    "start": "2308510",
    "end": "2313720"
  },
  {
    "text": "perform cross availability zone, a region called detections, and more.",
    "start": "2313720",
    "end": "2318223"
  },
  {
    "text": "We will study latency\nand performance issues and errors for improvement.",
    "start": "2320110",
    "end": "2323820"
  },
  {
    "text": "We can see the details of each service.",
    "start": "2327700",
    "end": "2330203"
  },
  {
    "start": "2338000",
    "end": "2338000"
  },
  {
    "text": "So to recap, by using distributor tracing, we can make more informed decisions about the possible dependencies\nof underlying services",
    "start": "2339920",
    "end": "2347030"
  },
  {
    "text": "and the potential difficulty\nof strangling them out of the monolith.",
    "start": "2347030",
    "end": "2350632"
  },
  {
    "text": "So to recap, we evaluated these services and plotted them onto our chart.",
    "start": "2360453",
    "end": "2366912"
  },
  {
    "text": "We then established these core services are good candidates for modernization.",
    "start": "2369790",
    "end": "2374273"
  },
  {
    "start": "2382000",
    "end": "2382000"
  },
  {
    "text": "Now that we have\nstrangled our new service, we need to think about DevOps and a suitable deployment model, which will cause minimal business impact.",
    "start": "2385830",
    "end": "2392753"
  },
  {
    "start": "2403000",
    "end": "2403000"
  },
  {
    "text": "Here are two DevOps deployment approaches. Blue/Green is immediate\nswitching to the new service.",
    "start": "2404790",
    "end": "2410950"
  },
  {
    "text": "Here you are confident the new service can be fully released to production and will cause no impact to the business.",
    "start": "2410950",
    "end": "2418250"
  },
  {
    "text": "On other hand, if you wish\nto do a phased deployment, you can consider a Canary Release",
    "start": "2418250",
    "end": "2423560"
  },
  {
    "text": "and leverage API Gateway to channel, at most, 10% of the\ncalls to the new service",
    "start": "2423560",
    "end": "2430617"
  },
  {
    "text": "to evaluate it under a lower\nload and increase traffic over time while keeping a\nclose eye on its performance.",
    "start": "2430617",
    "end": "2439359"
  },
  {
    "text": "If you notice any performance degradation, you can reconfigure API Gateway\nto return 100% of the load",
    "start": "2439360",
    "end": "2446179"
  },
  {
    "text": "back to the legacy system.",
    "start": "2446179",
    "end": "2448153"
  },
  {
    "text": "Canary Release. So in a Canary Deployment, you send a small percentage of requests",
    "start": "2457240",
    "end": "2464000"
  },
  {
    "text": "to your new application\nas a way of testing it without exposing the\nmajority of your users",
    "start": "2464000",
    "end": "2469840"
  },
  {
    "text": "to this new and untested application. If the app performs well,",
    "start": "2469840",
    "end": "2475819"
  },
  {
    "text": "you can continue to increase\nthe percentage of requests that it receives until finally you have promoted it to\nreceive 100% of the requests.",
    "start": "2475820",
    "end": "2484153"
  },
  {
    "start": "2486000",
    "end": "2486000"
  },
  {
    "text": "Here we are leveraging a Canary Release of the new inventory microservice",
    "start": "2487130",
    "end": "2492744"
  },
  {
    "text": "in the form of a Lambda function. We increase 10% of the traffic",
    "start": "2492744",
    "end": "2498089"
  },
  {
    "text": "to the new service every hour, while keeping a close eye on performance.",
    "start": "2498090",
    "end": "2503130"
  },
  {
    "text": "We can invoke additional Lambda functions as we increase traffic.",
    "start": "2503130",
    "end": "2507203"
  },
  {
    "text": "We are also leveraging the\nAWS Data Migration Service to pass inventory-specific data",
    "start": "2509150",
    "end": "2516220"
  },
  {
    "text": "to the inventory microservice\ndedicated data store, which is now DynamoDB in real time.",
    "start": "2516220",
    "end": "2521713"
  },
  {
    "text": "In this video, we talked extensively about making the monolith and how to migrate your .Net applications.",
    "start": "2525050",
    "end": "2531920"
  },
  {
    "text": "I would also like to\nhighlight a couple of other very important videos in the series,",
    "start": "2531920",
    "end": "2538410"
  },
  {
    "text": "the next one being part three, which is Serverless and\nContainer .NET Best Practices. Here you will learn how to\nbuild modern architectures",
    "start": "2538410",
    "end": "2545650"
  },
  {
    "text": "with AWS Lambda, Amazon\nAPI Gateway, AWS Fargate,",
    "start": "2545650",
    "end": "2550650"
  },
  {
    "text": "and Amplify around .NET in Serverless. A later video you should\ndefinitely consider watching",
    "start": "2551060",
    "end": "2558190"
  },
  {
    "text": "is part six, Modernized\nDevOps for Serverless and Container Pipelines.",
    "start": "2558190",
    "end": "2563680"
  },
  {
    "text": "Here you will learn how to establish a continuous DevOps CI/CD pipeline to build, test, and deploy\nthe .NET Core services",
    "start": "2563680",
    "end": "2571790"
  },
  {
    "text": "you strangled here. An area we touched on but\nnever dived into it very deeply",
    "start": "2571790",
    "end": "2576970"
  },
  {
    "start": "2575000",
    "end": "2575000"
  },
  {
    "text": "is another monolith, and that is the centralized database. The challenge of strangling\nthe monolith database",
    "start": "2576970",
    "end": "2584280"
  },
  {
    "text": "is also a very major challenge to achieving lesser coupling\nand higher cohesion.",
    "start": "2584280",
    "end": "2589863"
  },
  {
    "text": "\"Seldom database fits the needs \"of multiple distinct use cases. \"The days of one size fits\nall monolith databases",
    "start": "2592797",
    "end": "2600276"
  },
  {
    "text": "\"are behind us, and the\ndevelopers are now building \"highly distributed applications \"using a multitude of business databases.\"",
    "start": "2600277",
    "end": "2607670"
  },
  {
    "text": "This is a quote from Werner\nVogels, CTO to Amazon.com.",
    "start": "2607670",
    "end": "2612670"
  },
  {
    "text": "AWS offers many services\nwhich offer an alternative to storing your strangled data,",
    "start": "2616530",
    "end": "2621839"
  },
  {
    "text": "and also to best fit the data type, which will be used by the\nnew strangled service.",
    "start": "2621840",
    "end": "2628390"
  },
  {
    "text": "Careful evaluation of the\nnature of the data being stored may help you select the best fit",
    "start": "2628390",
    "end": "2635060"
  },
  {
    "text": "from available AWS data store services. So in relation to this,",
    "start": "2635060",
    "end": "2640490"
  },
  {
    "start": "2639000",
    "end": "2639000"
  },
  {
    "text": "I also recommend part four, Migrate and Modernized Database Workloads.",
    "start": "2640490",
    "end": "2646049"
  },
  {
    "text": "Here you will learn how to\nstrangle the data stores for the new microservices you did here.",
    "start": "2646050",
    "end": "2651619"
  },
  {
    "text": "We will look at examples found within AcmeFinancial DataServices and explain the\nmigration/modernization journey",
    "start": "2651620",
    "end": "2658925"
  },
  {
    "text": "around customer examples. In part five around data lakes,",
    "start": "2658925",
    "end": "2663963"
  },
  {
    "text": "a final leg of the modernization journey can be the creation of a data lake.",
    "start": "2663964",
    "end": "2669143"
  },
  {
    "text": "Data lake is a centralized,\ncurated, and secured repository that stores all your data,\nboth in its original raw form",
    "start": "2670280",
    "end": "2677770"
  },
  {
    "text": "and then a processed form for analysis. A data lake enables you to\nbreak down the data silos",
    "start": "2677770",
    "end": "2684040"
  },
  {
    "text": "and combine different types of analytics to gain insights and\nbetter business decisions.",
    "start": "2684040",
    "end": "2689183"
  },
  {
    "text": "Using in combination with ETL and other data transformation services, it serves as a powerful\noffering to feed into data silos",
    "start": "2690570",
    "end": "2697870"
  },
  {
    "text": "labored by independently\ndeployable microservices.",
    "start": "2697870",
    "end": "2700723"
  },
  {
    "text": "So now bring this video to an end, and I hope it was useful\nand provide good for thought on your modernization efforts.",
    "start": "2704210",
    "end": "2710133"
  }
]