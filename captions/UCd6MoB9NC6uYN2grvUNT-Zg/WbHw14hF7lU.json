[
  {
    "text": "hey everybody happy good afternoon thanks for coming out to this session",
    "start": "1340",
    "end": "6540"
  },
  {
    "text": "this is Ian t-33 to getting started with service computing using AWS lambda my",
    "start": "6540",
    "end": "12780"
  },
  {
    "text": "name's Chris Munz I'm joined here by Nikki Joshi from Capital One who's gonna talk a little bit later about some of",
    "start": "12780",
    "end": "18330"
  },
  {
    "text": "Capital One's journey towards using server lists but first I'm gonna talk a little bit about lambda and about some",
    "start": "18330",
    "end": "25320"
  },
  {
    "text": "architectural concepts how you can get started using lambda including some of the things that you you probably already",
    "start": "25320",
    "end": "30779"
  },
  {
    "text": "heard today during Vernors keynote so you know my name is Chris Mullins I'm currently a senior developer advocate",
    "start": "30779",
    "end": "36809"
  },
  {
    "text": "for server lists from AWS being at AWS now for a little over five years across",
    "start": "36809",
    "end": "42000"
  },
  {
    "text": "the number of different roles but probably best of my time at AWS I was",
    "start": "42000",
    "end": "47100"
  },
  {
    "text": "pretty much a traditional sysadmin IT DevOps operations type of person but in the",
    "start": "47100",
    "end": "52410"
  },
  {
    "text": "last two years or so I've kind of seen how server list is completely changing the way that people think about building",
    "start": "52410",
    "end": "57840"
  },
  {
    "text": "applications and actually kind of replacing a lot of what I did in my earlier years in my career so really excited about server lists and",
    "start": "57840",
    "end": "64170"
  },
  {
    "text": "definitely see it as the future of application development so why are we",
    "start": "64170",
    "end": "69420"
  },
  {
    "text": "here today what is this server list thing what is lambda again this week you've probably seen and heard a whole",
    "start": "69420",
    "end": "74729"
  },
  {
    "text": "lot about lambda a whole lot about server lists and it's not just because we wanted to just only talk about this",
    "start": "74729",
    "end": "81689"
  },
  {
    "text": "it's because what we're seeing across the industry is just an unbelievable interest in service architectures and",
    "start": "81689",
    "end": "87960"
  },
  {
    "text": "applications so what does service mean for us here at AWS it kind of comes down to four kind of key characteristics the",
    "start": "87960",
    "end": "95820"
  },
  {
    "text": "first is that there's no servers to manage or provision at all this includes nothing that would be bare metal and",
    "start": "95820",
    "end": "100829"
  },
  {
    "text": "nothing that's virtual nothing that's a container anything that involves you managing a host patching a host or",
    "start": "100829",
    "end": "106020"
  },
  {
    "text": "dealing with anything on an operating system level is not something you should have to do in the service world so a",
    "start": "106020",
    "end": "111689"
  },
  {
    "text": "matically scale with usage so as requests come in whatever we're doing on the backend should be able to automatically scale for you so that",
    "start": "111689",
    "end": "117600"
  },
  {
    "text": "those requests can be responded to going along with this is never happy to pay for idle so idle comes in when people",
    "start": "117600",
    "end": "124619"
  },
  {
    "text": "have to do things like capacity planning so today in many enterprise organizations they are less than 20",
    "start": "124619",
    "end": "130860"
  },
  {
    "text": "percent utilized on most of their this means that they have 80% of their infrastructure sitting idle that they're",
    "start": "130860",
    "end": "136690"
  },
  {
    "text": "spending money on not getting any value from it and so with serverless platforms you've never are paying for idle at all",
    "start": "136690",
    "end": "144670"
  },
  {
    "text": "that's one of our key characteristics and then lastly availability and fault tolerance built-in so here at AWS we",
    "start": "144670",
    "end": "149710"
  },
  {
    "text": "have this concept of regions regions are made up of availability zones in the world of survey lists you should never",
    "start": "149710",
    "end": "154840"
  },
  {
    "text": "have to think about making things multi a-z that's just going to be inherent and built into the product so we're gonna talk about so now we talk about what a",
    "start": "154840",
    "end": "163060"
  },
  {
    "text": "service application is it's typically made up of kind of three components so sort of an event source a double s",
    "start": "163060",
    "end": "169900"
  },
  {
    "text": "lambda we're going to talk a lot about here and then whatever it is that lambda might be talking to so whether this be a",
    "start": "169900",
    "end": "175090"
  },
  {
    "text": "database or data store another API endpoint some sort of other service that",
    "start": "175090",
    "end": "180310"
  },
  {
    "text": "it might be interacting with or it could just be that your business logic is completely self-contained in that lambda function and it's not actually talking",
    "start": "180310",
    "end": "186220"
  },
  {
    "text": "to anything else but effectively this is what a service application looks like",
    "start": "186220",
    "end": "191620"
  },
  {
    "text": "just from the very very high level now lambda is a compute product so it is actually kind of in the same vein as ec2",
    "start": "191620",
    "end": "198100"
  },
  {
    "text": "and ECS and things like Fargate which we announced this week it helps basically manage compute resources so that you",
    "start": "198100",
    "end": "204490"
  },
  {
    "text": "never have to think about it and what happens is we run very very massive fleets of compute resources and when an",
    "start": "204490",
    "end": "211600"
  },
  {
    "text": "event source is invoked whether it be from a change in a state a request to an endpoint or change in some sort of",
    "start": "211600",
    "end": "217300"
  },
  {
    "text": "resource state we basically do is look at your higher lambda function has been configured by you take your application",
    "start": "217300",
    "end": "223780"
  },
  {
    "text": "code bring it down to our compute environment execute that lambda function for you and you only paid or for the",
    "start": "223780",
    "end": "230140"
  },
  {
    "text": "duration of that function and again there's no resource management that you think of there's no need for you to have",
    "start": "230140",
    "end": "235330"
  },
  {
    "text": "a certain number of hosts sitting around waiting for traffic it all taken care of on our side on the fly so serve list is",
    "start": "235330",
    "end": "243370"
  },
  {
    "text": "a very very real thing again there's kind of a reason why we've been talking about us so much this week this is kind of a fun little a chart of all the",
    "start": "243370",
    "end": "250120"
  },
  {
    "text": "organizations that have been publicly talking about their usage of service on AWS and so these are everything from",
    "start": "250120",
    "end": "257880"
  },
  {
    "text": "fairly old-school traditional enterprises to very new startups and getting kind of everything in between",
    "start": "257880",
    "end": "263710"
  },
  {
    "text": "lots of different use cases these are all production workloads that we're talking about here not just Devin tests not just",
    "start": "263710",
    "end": "270160"
  },
  {
    "text": "exploration when it comes to all the different use cases these companies are doing we find that there's basically",
    "start": "270160",
    "end": "275830"
  },
  {
    "text": "kind of six big buckets that we can put those into roughly the first is web",
    "start": "275830",
    "end": "281080"
  },
  {
    "text": "applications so we're seeing people moving towards things like static websites whether they be done with say",
    "start": "281080",
    "end": "288190"
  },
  {
    "text": "reactive frameworks or things like view things like single page applications where you're gonna use lambda and",
    "start": "288190",
    "end": "293349"
  },
  {
    "text": "something like API gateway behind the scenes to power the business logic of that web application we also see this",
    "start": "293349",
    "end": "299169"
  },
  {
    "text": "with backends so things like true micro-services that exist inside of an organization as part of some sort of application workflow data processing",
    "start": "299169",
    "end": "306669"
  },
  {
    "text": "which is actually the biggest use case that we see our customers using lambda for today things extreme analysis batch",
    "start": "306669",
    "end": "311770"
  },
  {
    "text": "processing MapReduce there's a lot of a lot of big data digesting that goes on",
    "start": "311770",
    "end": "316960"
  },
  {
    "text": "inside of lambda chatbots changing how companies are thinking about interfacing with their customers",
    "start": "316960",
    "end": "322560"
  },
  {
    "text": "interfacing internally we see chat BOTS show up all over the place Amazon Alexa so when you ask Alexa to do",
    "start": "322560",
    "end": "329229"
  },
  {
    "text": "something the fulfillment of what it is that you're asking Alexa to do is very often run on a lambda function so I",
    "start": "329229",
    "end": "335889"
  },
  {
    "text": "believe it was back in October we said that Alexa had something like 25,000 skills many of those skills are actually",
    "start": "335889",
    "end": "342009"
  },
  {
    "text": "surplice and then lastly where many people kind of dip their toes into service applications is IT automation so",
    "start": "342009",
    "end": "350259"
  },
  {
    "text": "being able to take a lambda function and attach it to one of the many development and management tools that we have at AWS",
    "start": "350259",
    "end": "355979"
  },
  {
    "text": "or you know interfacing with it for all sorts of different things I actually had a customer that was using lambda to",
    "start": "355979",
    "end": "362320"
  },
  {
    "text": "manage on-prem networking equipment built an API get in front of on prime networking equipment so these are kind",
    "start": "362320",
    "end": "368650"
  },
  {
    "text": "of the main six buckets that we see people use again there are some things that would be six the outside of it but for the most part this is",
    "start": "368650",
    "end": "375009"
  },
  {
    "text": "representational that now a little bit more here about lambda so what we've",
    "start": "375009",
    "end": "380979"
  },
  {
    "text": "seen over say the last five or so years is this move towards micro services and",
    "start": "380979",
    "end": "386139"
  },
  {
    "text": "then we're seeing micro services start to become event-based so what this is is changing the dynamic of how applications",
    "start": "386139",
    "end": "393219"
  },
  {
    "text": "are built and how you think about logic and workflow into those applications we find that is that event-driven compute",
    "start": "393219",
    "end": "399669"
  },
  {
    "text": "aligns very very well with functions as a service based application models and then lambda",
    "start": "399669",
    "end": "405819"
  },
  {
    "text": "sits at the core of this which is a server list functions as a service service so again completely managed",
    "start": "405819",
    "end": "413529"
  },
  {
    "text": "completely kind of abstracted away from you in an event-driven model functions as the paradigm for how you do",
    "start": "413529",
    "end": "419860"
  },
  {
    "text": "application development so now with lambda how do you how do you work how do",
    "start": "419860",
    "end": "425169"
  },
  {
    "text": "you do things with it so and actually now this slide is out of date as of this morning but today four",
    "start": "425169",
    "end": "431199"
  },
  {
    "text": "languages that are supported inside of it so we've got no js' Java Python c-sharp soon we'll have go in a couple",
    "start": "431199",
    "end": "438099"
  },
  {
    "text": "of weeks and then c-sharp not dotnet Core 2 also coming out soon and now with",
    "start": "438099",
    "end": "444039"
  },
  {
    "text": "this you could bring your own library so you can bring in things like NPM packages or pip packages maven nougat",
    "start": "444039",
    "end": "449649"
  },
  {
    "text": "depending on again your language that you're using standard programming models that you would build any sort of other application and with lambda there's",
    "start": "449649",
    "end": "456879"
  },
  {
    "text": "basically just kind of one knob that you turn in terms of deciding how lambda is going to provision compute resources for",
    "start": "456879",
    "end": "463300"
  },
  {
    "text": "you and that's by the amount of memory that your function has available to it so today we now support everything from",
    "start": "463300",
    "end": "468939"
  },
  {
    "text": "128 megabytes all the way up to 3 gigabytes and that was one of the other announcements from today now with that memory knob as you turn it",
    "start": "468939",
    "end": "475839"
  },
  {
    "text": "you also bring a rat with a proportional amount of CPU and networking resources and previously when we only supported up",
    "start": "475839",
    "end": "481930"
  },
  {
    "text": "to 1.5 gigabytes that would give you a full CPU core now with 3 gigabytes you actually get two CPU cores behind the",
    "start": "481930",
    "end": "487599"
  },
  {
    "text": "scenes so for customers that are doing things like data processing where they're pulling in big data files or",
    "start": "487599",
    "end": "494229"
  },
  {
    "text": "even things like machine learning where they're bringing in big data models this will be very useful from again more CPU",
    "start": "494229",
    "end": "499839"
  },
  {
    "text": "more memory in terms of use cases and we'll go a little deeper into this here in a moment there's both synchronous and",
    "start": "499839",
    "end": "505089"
  },
  {
    "text": "asynchronous use cases for lambda as well as a stream processing which we'll talk about and then last but definitely",
    "start": "505089",
    "end": "512018"
  },
  {
    "text": "not least on this slide flexible authorization so we think about security as being kind of the top priority for",
    "start": "512019",
    "end": "519490"
  },
  {
    "text": "how we build products at AWS it's not a bolt-on it's something that we think about from the very day one of building",
    "start": "519490",
    "end": "524500"
  },
  {
    "text": "a product and so lambda is definitely file as I model as well so you have the",
    "start": "524500",
    "end": "529720"
  },
  {
    "text": "ability to do things like put lambda into V pcs and control the networking model you have the ability to control who it",
    "start": "529720",
    "end": "536690"
  },
  {
    "text": "is I can invoke a lambda function and then what it is that a lambda function can do when it is invoked when it comes",
    "start": "536690",
    "end": "543380"
  },
  {
    "text": "to building lambda functions and writing them you can do it in what basically any",
    "start": "543380",
    "end": "548540"
  },
  {
    "text": "tool that you want so whether you are a visual studio person an eclipse person a VI person and WordPad person however it",
    "start": "548540",
    "end": "556460"
  },
  {
    "text": "is that you want to write code you can write code just like you've always been doing and then I it basically package",
    "start": "556460",
    "end": "562130"
  },
  {
    "text": "that up into a zip file today and send it up to the lambda service and we've got a number of third-party plugins that",
    "start": "562130",
    "end": "567980"
  },
  {
    "text": "exist to how big it's easier for you monitoring logging is another thing we consider a core tenet of lambda and",
    "start": "567980",
    "end": "574820"
  },
  {
    "text": "service applications we want to make monitoring and logging really really straightforward for you and so in lambda",
    "start": "574820",
    "end": "580340"
  },
  {
    "text": "today if you want to create a log and have it centralized all you do is output text so you do the equivalent of a",
    "start": "580340",
    "end": "586970"
  },
  {
    "text": "console log or a printf statement or whatever it might be in the language that you're using and we do is take that",
    "start": "586970",
    "end": "592220"
  },
  {
    "text": "text capture it and send it into cloud watch logic so you can very easily go and find that we also have a number of",
    "start": "592220",
    "end": "598340"
  },
  {
    "text": "cloud watch metrics that we generate for you so things like invocation count duration and then earlier today we",
    "start": "598340",
    "end": "604640"
  },
  {
    "text": "announced a concurrency metric that goes along with a currency throttling capability so a couple different metric",
    "start": "604640",
    "end": "611090"
  },
  {
    "text": "settings just there from the programming model so every mention how the CPU and",
    "start": "611090",
    "end": "616340"
  },
  {
    "text": "networking are aligned with memory so you have the ability to do things like have threads fork processes interface",
    "start": "616340",
    "end": "622580"
  },
  {
    "text": "with the temporary storage that exists on the underlying host that again is kind of abstracted from you we today put",
    "start": "622580",
    "end": "629330"
  },
  {
    "text": "our SDKs in for Python and node.js for those language versions but with Java and c-sharp you have to bring in the SDK",
    "start": "629330",
    "end": "637580"
  },
  {
    "text": "as part of the packaging process and then lastly and this is one of the most important aspects of how lambda works is",
    "start": "637580",
    "end": "643640"
  },
  {
    "text": "that it is a stateless service so unlike if you managed an ec2 instance or you had a container running somewhere that",
    "start": "643640",
    "end": "650000"
  },
  {
    "text": "was running for a long period of time lambda instances are incredibly short-lived compared to those and",
    "start": "650000",
    "end": "656570"
  },
  {
    "text": "there's really no such thing as affinity there's no such thing as sticky sessions so while you can store data in the",
    "start": "656570",
    "end": "662540"
  },
  {
    "text": "temporary space you have no way of assuring that one a the next request comes in that you will land on",
    "start": "662540",
    "end": "667820"
  },
  {
    "text": "same compute resource that you had stored that data on and so again very",
    "start": "667820",
    "end": "673280"
  },
  {
    "text": "transient compute model kind of comes and goes and you never have to think about the underlying management of it",
    "start": "673280",
    "end": "678620"
  },
  {
    "text": "but when it comes to storing state you want to do that someplace off of lambda so from a pricing model again we had",
    "start": "678620",
    "end": "686030"
  },
  {
    "text": "said earlier that you never pay for idle with lambda and that's true but how we actually build for it is in the hundreds of milliseconds so if you think about",
    "start": "686030",
    "end": "692870"
  },
  {
    "text": "building an API based service where your requests are typically maybe in the hundreds of milliseconds maybe a second",
    "start": "692870",
    "end": "698990"
  },
  {
    "text": "or two most this pricing model aligns very very well with these very small function based applications that you're",
    "start": "698990",
    "end": "705440"
  },
  {
    "text": "going to build as opposed to a a larger model or even doing things that are second based is too much for many lambda",
    "start": "705440",
    "end": "712010"
  },
  {
    "text": "workloads now I talked a little bit about the execution model before I'll go",
    "start": "712010",
    "end": "717080"
  },
  {
    "text": "a little bit deeper here into what we support and how it works so again three kind of models for how you can invoke",
    "start": "717080",
    "end": "723050"
  },
  {
    "text": "lambda the first the synchronous so an example here is using API gateway where an API request comes into API gateway",
    "start": "723050",
    "end": "729620"
  },
  {
    "text": "it's then going to invoke a lambda function in response to that take the response of that lambda function and",
    "start": "729620",
    "end": "735650"
  },
  {
    "text": "reply back to you and that's kind of in the model that you'd have with a web application or a mobile application where you immediately want that response",
    "start": "735650",
    "end": "742720"
  },
  {
    "text": "the second is an asynchronous version so this is an example for s3 SNS number of",
    "start": "742720",
    "end": "749450"
  },
  {
    "text": "other services where you're going to maybe send a message into a senesce topic put an object into an s3 bucket",
    "start": "749450",
    "end": "755420"
  },
  {
    "text": "and then what's going to happen is those services are then going to pass the information about either the object and",
    "start": "755420",
    "end": "761300"
  },
  {
    "text": "where it's stored or the full message from s and s into a lambda functions so that I could do something with it",
    "start": "761300",
    "end": "766520"
  },
  {
    "text": "maybe it's going to take that object that was uploaded in s3 and it's going to use the recognition service to find",
    "start": "766520",
    "end": "771980"
  },
  {
    "text": "out what that is in that photo or it's going to take information from SNS and",
    "start": "771980",
    "end": "777110"
  },
  {
    "text": "put it into a database and so in this case you're not expecting an immediate response back from say s through your",
    "start": "777110",
    "end": "783560"
  },
  {
    "text": "SNS with whatever it is that lambdas doing but it's something that maybe your application is looking at later again",
    "start": "783560",
    "end": "789110"
  },
  {
    "text": "it's not the kind of thing where you need a synchronous response the lastly the stream based model which today we",
    "start": "789110",
    "end": "795770"
  },
  {
    "text": "support this with DynamoDB in Kinesis what we have is basically a model where lambda is",
    "start": "795770",
    "end": "801200"
  },
  {
    "text": "pulling those services looking to pull information off of them so with Canisius we've got customers",
    "start": "801200",
    "end": "806720"
  },
  {
    "text": "that are doing massive ingest of information whether it be things like click tracking IOT sensor data",
    "start": "806720",
    "end": "813250"
  },
  {
    "text": "collecting things like logging information in through Kinesis and then what happens is across the shards that",
    "start": "813250",
    "end": "819290"
  },
  {
    "text": "you can use to stream might have will invoke lambda functions against that and it'll pull in those records and then process them for you with dynamodb what",
    "start": "819290",
    "end": "826880"
  },
  {
    "text": "we see people doing is using this for database triggers so as records are written to a database lambda functions",
    "start": "826880",
    "end": "833450"
  },
  {
    "text": "will be invoked for whatever business logic it is that you might have to do and we've got a number of different",
    "start": "833450",
    "end": "840530"
  },
  {
    "text": "services that have this integration and actually this is not anywhere near the the number of them it's much more just",
    "start": "840530",
    "end": "846380"
  },
  {
    "text": "kind of an example of the grouping and I think if I had to rewrite the slide after this last couple days the total",
    "start": "846380",
    "end": "852920"
  },
  {
    "text": "number of services that we have is well above 30 that can invoke lambda so we have data stores we have endpoints",
    "start": "852920",
    "end": "859060"
  },
  {
    "text": "development management tools as well as our event messaging services and there's all sorts of again different use cases",
    "start": "859060",
    "end": "865430"
  },
  {
    "text": "in ways that you can invoke lambda again going back to kind of the six main use cases that I talked about before let's",
    "start": "865430",
    "end": "873470"
  },
  {
    "text": "go back and touch again on security with lambda so again with lambda I had mentioned that there are number of",
    "start": "873470",
    "end": "878840"
  },
  {
    "text": "different ways that you could secure your lambda functions everything from controlling where it sits inside of say V PC if you need to as well as what are",
    "start": "878840",
    "end": "886070"
  },
  {
    "text": "called execution policies and function policies any of the differences between these is that your lambda function is a",
    "start": "886070",
    "end": "892790"
  },
  {
    "text": "compute resource and so we give you the ability to assign to it an I am role such that it could go ahead and say",
    "start": "892790",
    "end": "898010"
  },
  {
    "text": "access a s3 bucket or a dynamodb table or write to some sort of other service",
    "start": "898010",
    "end": "903950"
  },
  {
    "text": "then the other is who can invoke that lambda function so unlike in a traditional web application where you",
    "start": "903950",
    "end": "910400"
  },
  {
    "text": "are building maybe off higher up the application stack what we can actually do is say the only service I can invoke",
    "start": "910400",
    "end": "915950"
  },
  {
    "text": "this lambda function is API gateway or maybe only Kinesis can invoke it in that case you're not dealing with the",
    "start": "915950",
    "end": "921980"
  },
  {
    "text": "authentication and authorization between the two services beyond just what's built into how lambda is able to take",
    "start": "921980",
    "end": "928790"
  },
  {
    "text": "that so you don't necessarily have to pass a authorization or authentication into Kinesis then",
    "start": "928790",
    "end": "934640"
  },
  {
    "text": "have it be able to invoke lambda it's just gonna be part of the policy as its configured so you can get really really fine-grained with these policies and",
    "start": "934640",
    "end": "941330"
  },
  {
    "text": "lock lambda down really really tightly something that we also just announced today is in cloud trail there's a",
    "start": "941330",
    "end": "948980"
  },
  {
    "text": "concept of data events and so last year we launched cloud shell date events for s3 what this means is that we log the",
    "start": "948980",
    "end": "954920"
  },
  {
    "text": "API calls for any time that you do a put or get or a delete on an s3 object well",
    "start": "954920",
    "end": "960770"
  },
  {
    "text": "we've done now for lambda today is announced eight events for lambda and Cloud trail and what it now stores actually is the API call of the",
    "start": "960770",
    "end": "967130"
  },
  {
    "text": "invocation against your lambda function so maybe you have a lambda function that can be invoked by a couple different",
    "start": "967130",
    "end": "973130"
  },
  {
    "text": "services but you want to be able to look and say okay across these different services that have been vote that could",
    "start": "973130",
    "end": "978860"
  },
  {
    "text": "invoke my lambda function who has done it when have they done it are there any potential maybe violations or the thing",
    "start": "978860",
    "end": "984770"
  },
  {
    "text": "is that you need to tweak and so from an audit abilities perspective you can see kind of the full chain of activity that",
    "start": "984770",
    "end": "991040"
  },
  {
    "text": "have happened from a requesting service into lamda lamda is also going to have",
    "start": "991040",
    "end": "996140"
  },
  {
    "text": "logs for every execution that it has so you can really get a whole lot of information about your process in a service world these days now lambda is",
    "start": "996140",
    "end": "1005080"
  },
  {
    "text": "not the only product that exists inside of our our server list portfolio of products here at AWS so Amazon API",
    "start": "1005080",
    "end": "1010930"
  },
  {
    "text": "gateway is another close kind of sibling of lambda and Amazon API gateway is just",
    "start": "1010930",
    "end": "1017590"
  },
  {
    "text": "like it sounds it's any pay gateway so what this is really useful for is fronting any sort of API that you're",
    "start": "1017590",
    "end": "1022840"
  },
  {
    "text": "looking to build and I've actually been recommending to AWS customers for years even before we launched this that you",
    "start": "1022840",
    "end": "1028689"
  },
  {
    "text": "must have some sort of API gateway product if you're building api's and the reason I say must is because if you",
    "start": "1028690",
    "end": "1034630"
  },
  {
    "text": "don't you're spending development cycles doing things that API gateways have already built into them for you so for",
    "start": "1034630",
    "end": "1041170"
  },
  {
    "text": "example things like authentication and authorization caching things like protection for things like DDoS is",
    "start": "1041170",
    "end": "1049560"
  },
  {
    "text": "things like data transformations there's all sorts of things the API gateways do",
    "start": "1049560",
    "end": "1054580"
  },
  {
    "text": "for our view and again our API gateway is not the only one that exists out in the market but again if",
    "start": "1054580",
    "end": "1059950"
  },
  {
    "text": "you're building an API you're thinking about those things you don't want to be developing that code it's already a solved problem so again what you've got",
    "start": "1059950",
    "end": "1067030"
  },
  {
    "text": "gateway does is it allows you to have a unified interface across all of your api's lots of different capabilities",
    "start": "1067030",
    "end": "1072840"
  },
  {
    "text": "built into it again around authentication authorization caching transforms earlier this week we",
    "start": "1072840",
    "end": "1078960"
  },
  {
    "text": "announced Canary deploys for API gateway so this allows you to have your new deployment receive a percentage of your",
    "start": "1078960",
    "end": "1084420"
  },
  {
    "text": "overall traffic and then be able to you know roll that out or increase it or completely flop over 200% we have a",
    "start": "1084420",
    "end": "1091200"
  },
  {
    "text": "couple different models for API gateway so the first what we launched API gateway with about two and a half years",
    "start": "1091200",
    "end": "1096270"
  },
  {
    "text": "ago was with what we call edge endpoints these were end points that were fronted by cloud front our CDN service so",
    "start": "1096270",
    "end": "1103350"
  },
  {
    "text": "anytime you made a request the API it would go into cloud front into the API gateway and then into the backend this",
    "start": "1103350",
    "end": "1109020"
  },
  {
    "text": "was really great and is still really great for mobile applications for things like web applications that are backed by",
    "start": "1109020",
    "end": "1115200"
  },
  {
    "text": "an API and then about maybe a month and a half to two months ago we announced something called regional endpoints",
    "start": "1115200",
    "end": "1120450"
  },
  {
    "text": "these are endpoints that exist just inside of a region without cloud front in front of them this became much more",
    "start": "1120450",
    "end": "1126240"
  },
  {
    "text": "useful for say traffic between services that existed just inside of a region or maybe if you were exposing a service to",
    "start": "1126240",
    "end": "1132510"
  },
  {
    "text": "other AWS customers that would also be inside of a region or if you want to bring your own CDN configuration with",
    "start": "1132510",
    "end": "1138179"
  },
  {
    "text": "you and then today in Vernors keynote we announced VPC integration with api gateway",
    "start": "1138179",
    "end": "1143190"
  },
  {
    "text": "what this now allows you to do is have a completely private back into your API inside of a V PC where your API is still",
    "start": "1143190",
    "end": "1150030"
  },
  {
    "text": "exposed out to the Internet but the service that's your API gateway is in front of can now be private inside of",
    "start": "1150030",
    "end": "1156150"
  },
  {
    "text": "your V PC or it could actually be something that is private inside of your own data center connected to a V PC over",
    "start": "1156150",
    "end": "1162090"
  },
  {
    "text": "a Direct Connect or a VPN tunnel and so there's lots of different things now that you can do with API gateway in terms of again all the benefits that you",
    "start": "1162090",
    "end": "1169410"
  },
  {
    "text": "see listed here and a number of others another kind of sibling product in the",
    "start": "1169410",
    "end": "1174929"
  },
  {
    "text": "space that we have for service here is step functions so step functions is a workflow management service for lambda",
    "start": "1174929",
    "end": "1180980"
  },
  {
    "text": "we first launched lambda we saw a lot of customers doing was decomposing applications into very very very micro",
    "start": "1180980",
    "end": "1188130"
  },
  {
    "text": "micro services actually just like to call it's a it's a nano service model and we'd have people having lambda",
    "start": "1188130",
    "end": "1194100"
  },
  {
    "text": "functions invoke other lambda functions have all sorts of business logic around how they would call one lambda function",
    "start": "1194100",
    "end": "1199950"
  },
  {
    "text": "or another and so people were spending a lot time putting code into their functions that was not business logic but workflow",
    "start": "1199950",
    "end": "1206580"
  },
  {
    "text": "logic and so what step functions allows you to do is take all of that code that you would have had saying again in your",
    "start": "1206580",
    "end": "1211740"
  },
  {
    "text": "lambda function and pass it up to it as a managed service so in step functions you get to set the layout for what a",
    "start": "1211740",
    "end": "1219480"
  },
  {
    "text": "workflow would look like as part of a business workflow so we see kind of here a very basic example where I have the",
    "start": "1219480",
    "end": "1225990"
  },
  {
    "text": "start of my workflow I have and all the green boxes here represent a lambda function I'm going to extract some image",
    "start": "1225990",
    "end": "1233100"
  },
  {
    "text": "metadata and then I'm gonna check what type of image it is based on the metadata and then I have a choice that's",
    "start": "1233100",
    "end": "1239100"
  },
  {
    "text": "there and then I'm gonna go down and store that image metadata and then after this I can call recognition and create a",
    "start": "1239100",
    "end": "1245370"
  },
  {
    "text": "thumbnail in parallel after recognition I'm gonna add say tags to the object and then my workflow ends now all of the",
    "start": "1245370",
    "end": "1253110"
  },
  {
    "text": "controls around what stuff happens next if there have been a failure in these steps so if one of these for example",
    "start": "1253110",
    "end": "1259620"
  },
  {
    "text": "lambda functions didn't work stuff sorry step functions has the ability to do retries exponential back-off s' all",
    "start": "1259620",
    "end": "1266190"
  },
  {
    "text": "sorts of interesting things so all that logic that you would have play into your lambda functions to do this you can now exist up at the step",
    "start": "1266190",
    "end": "1272460"
  },
  {
    "text": "functions level and now what this does is it means your lambda functions become just business logic no workflow need so",
    "start": "1272460",
    "end": "1279150"
  },
  {
    "text": "that's pretty cool so I'll talk about some other use cases that we have here so Amazon Lex is a one of kind of the",
    "start": "1279150",
    "end": "1286830"
  },
  {
    "text": "key services that we have in our AI suite these days and it's a natural language understanding service so",
    "start": "1286830",
    "end": "1291990"
  },
  {
    "text": "basically what it is is you send it text and it understands how to pull apart that text to be useful in things like",
    "start": "1291990",
    "end": "1298170"
  },
  {
    "text": "chatbots it's also one of the core technologies behind alexa and so when you have an",
    "start": "1298170",
    "end": "1303960"
  },
  {
    "text": "amazon lex chat bot there is this concept that's called fulfillment and that's basically you've told the chat",
    "start": "1303960",
    "end": "1309930"
  },
  {
    "text": "bot to do something it's now going to do that thing so when i say alexa order me a pizza the actual aspect",
    "start": "1309930",
    "end": "1317520"
  },
  {
    "text": "of ordering the pizza is considered a fulfillment and that's something that Lex will then go and invoke a lambda function on so if we want to kind of",
    "start": "1317520",
    "end": "1324990"
  },
  {
    "text": "visualize this a little bit here imagine that I had a chat bot or an Alexa skill or some sort of other voice bot and I",
    "start": "1324990",
    "end": "1332070"
  },
  {
    "text": "said booked a hotel in New York City the speech recognition is going to pull apart those various words the natural",
    "start": "1332070",
    "end": "1338039"
  },
  {
    "text": "language understanding inside of Lex is going to say okay I have an intent of booking a hotel and I know that there's",
    "start": "1338039",
    "end": "1344250"
  },
  {
    "text": "some sort of information about it which is that I want to book this hotel in New York City that's called a slot and so",
    "start": "1344250",
    "end": "1349950"
  },
  {
    "text": "what can happen then is I have this intent and slot model and what Lex and",
    "start": "1349950",
    "end": "1355350"
  },
  {
    "text": "then lambda will do is basically say okay there are other slots that I need to fill and if there are then it will",
    "start": "1355350",
    "end": "1360389"
  },
  {
    "text": "come back and ask me for more information such as when do I want to check in when do I want to check out and",
    "start": "1360389",
    "end": "1366480"
  },
  {
    "text": "so a lot of that logic is handled inside of Lex but then when it comes time to actually maybe save this booking",
    "start": "1366480",
    "end": "1371490"
  },
  {
    "text": "somewhere that's when Lex would invoke a lambda function so this gives you the ability to build really really powerful",
    "start": "1371490",
    "end": "1377039"
  },
  {
    "text": "chat or voice based interfaces again without having to run any servers that I have to worry about scale without having",
    "start": "1377039",
    "end": "1383250"
  },
  {
    "text": "a patch operating systems a Kinesis which has a couple of different",
    "start": "1383250",
    "end": "1388710"
  },
  {
    "text": "components to it these days streaming firehose analytics and then we just launched streaming video processing",
    "start": "1388710",
    "end": "1395210"
  },
  {
    "text": "earlier this week has the ability to invoke lambda also and so we see",
    "start": "1395210",
    "end": "1400230"
  },
  {
    "text": "customers doing a lot of near real-time data processing with this sometimes in",
    "start": "1400230",
    "end": "1405659"
  },
  {
    "text": "very very high levels of concurrency and so we can see an example here where I have an Amazon Kinesis stream and",
    "start": "1405659",
    "end": "1411179"
  },
  {
    "text": "streams can actually be processed by multiple different lambda functions and so I've got one lambda function that's",
    "start": "1411179",
    "end": "1416580"
  },
  {
    "text": "taking data off the stream putting it into s3 and then I have another lambda function that's taking that data off the",
    "start": "1416580",
    "end": "1422789"
  },
  {
    "text": "stream and putting it into dynamo dB and then maybe writing some metrics into Cloud watch or treating an alarm if it",
    "start": "1422789",
    "end": "1429600"
  },
  {
    "text": "sees that there's data that it considers bad and so again with this whole kind of mini architecture that you have here no",
    "start": "1429600",
    "end": "1435779"
  },
  {
    "text": "servers to manage nothing that you have to take care of in terms of scaling and quite a lot of capability and what can",
    "start": "1435779",
    "end": "1441120"
  },
  {
    "text": "be done so I've talked about how you can interface with lambda for various different services but one the other",
    "start": "1441120",
    "end": "1447299"
  },
  {
    "text": "thing that we see people doing is just working with lambda in the raw so it is an API based service you can call it",
    "start": "1447299",
    "end": "1452669"
  },
  {
    "text": "directly on its API and do all sorts of interesting things and what this has allowed some companies to do is build",
    "start": "1452669",
    "end": "1457830"
  },
  {
    "text": "really sophisticated computes distribute compute models using lambda so some",
    "start": "1457830",
    "end": "1464669"
  },
  {
    "text": "really smart folks and UC Berkeley wrote a tool called pi Ren which does just that distributed compute what",
    "start": "1464669",
    "end": "1470909"
  },
  {
    "text": "they were able to do with about 2,800 simultaneous functions is between six to eighty gigabit of processing power this",
    "start": "1470909",
    "end": "1479460"
  },
  {
    "text": "is a whole lot of processing power on a completely transient distributed cluster that they did nothing to configure",
    "start": "1479460",
    "end": "1485309"
  },
  {
    "text": "nothing to have to you know pre provision or manage or install software on and again we're able to do some",
    "start": "1485309",
    "end": "1492480"
  },
  {
    "text": "pretty impressive things lastly one thing that we're really excited about",
    "start": "1492480",
    "end": "1498240"
  },
  {
    "text": "this year is that we were able to get lambda and actually almost all of the core components in the server list suite",
    "start": "1498240",
    "end": "1503759"
  },
  {
    "text": "covered by both PCI and HIPAA so we already have a number of organizations in the finance world the number of",
    "start": "1503759",
    "end": "1509999"
  },
  {
    "text": "healthcare organizations building service architectures for everything from processing financial transactions",
    "start": "1509999",
    "end": "1516869"
  },
  {
    "text": "to in the healthcare world where people are building things like IOT enabled healthcare devices or even doing things",
    "start": "1516869",
    "end": "1522629"
  },
  {
    "text": "like record processing all while meeting kind of the compliance needs that their business might have so where do you get",
    "start": "1522629",
    "end": "1530519"
  },
  {
    "text": "started with this so we've talked again a lot about the capabilities of lamda some of its sibling services and and how",
    "start": "1530519",
    "end": "1536820"
  },
  {
    "text": "you kind of think about architectural aspects but if you're completely new to lamda and it's your day one using the product where do you start",
    "start": "1536820",
    "end": "1543440"
  },
  {
    "text": "my advice is typically to find a framework that fits the need that you're looking for so you could just go into",
    "start": "1543440",
    "end": "1549450"
  },
  {
    "text": "the console start coding figure it out that way but we actually have is a really awesome ecosystem of partner",
    "start": "1549450",
    "end": "1556080"
  },
  {
    "text": "companies as well as just open source projects that make it really really easy to get started with lamda I even tell us",
    "start": "1556080",
    "end": "1562409"
  },
  {
    "text": "some of our more sophisticated customers that you should look at these frameworks because they just do so much for you and I'm gonna talk about two of them here",
    "start": "1562409",
    "end": "1568409"
  },
  {
    "text": "but again there's a lot of different capabilities across all of these so well the ones that I'll talk about that's a",
    "start": "1568409",
    "end": "1574529"
  },
  {
    "text": "pretty popular tool is called Claudia Jas as the name might suggest this is a JavaScript framework and so Claudia Jas",
    "start": "1574529",
    "end": "1581820"
  },
  {
    "text": "is really useful for building API based application so again that one bucket of a use case and so we see here is",
    "start": "1581820",
    "end": "1588389"
  },
  {
    "text": "basically about five-ish or so lines of actual code some of its kind of wrapped around and then if I call the command",
    "start": "1588389",
    "end": "1595019"
  },
  {
    "text": "that's down here on the bottom right hand side of the slide I will get an API endpoint",
    "start": "1595019",
    "end": "1600260"
  },
  {
    "text": "now I never need to go into the 80s console I never need to you know click around or run the CLI basically I can",
    "start": "1600260",
    "end": "1607790"
  },
  {
    "text": "just write this into a text editor call back command down below and what it's going to do is configure API gateway",
    "start": "1607790",
    "end": "1613340"
  },
  {
    "text": "configure lamda configure all the iam policies for it and get this up and running again with very basic kind of",
    "start": "1613340",
    "end": "1620690"
  },
  {
    "text": "slash flow API call but there's all sorts of capabilities around authentication authorization and more",
    "start": "1620690",
    "end": "1627350"
  },
  {
    "text": "that can be done another framework pretty similar though is chalice chalice",
    "start": "1627350",
    "end": "1632840"
  },
  {
    "text": "is a Python framework actually came out of the AWS SDKs team and what they were",
    "start": "1632840",
    "end": "1637850"
  },
  {
    "text": "doing was looking to build a tool that they could use to manage their infrastructure using lambda and API",
    "start": "1637850",
    "end": "1643010"
  },
  {
    "text": "gateway internally and they're very heavy Python users they write and manage our boto framework which powers our CLI",
    "start": "1643010",
    "end": "1649370"
  },
  {
    "text": "a number of our other tools and so they were looking for a really straightforward simple Python framework and so a couple of people on the team",
    "start": "1649370",
    "end": "1655940"
  },
  {
    "text": "over weekend actually whip this up and now it's a very popular open source project so very similar to Claudia Jaso",
    "start": "1655940",
    "end": "1662929"
  },
  {
    "text": "we've got here's about five lines of code and a command line that we run and again this is going to give us an API",
    "start": "1662929",
    "end": "1668059"
  },
  {
    "text": "gateway a lambda function all the iam things that are necessary to glue this all together without you having to know",
    "start": "1668059",
    "end": "1675260"
  },
  {
    "text": "how it works without you going into the console and without you having to get involved in you know some of the complexity that can exist here so pretty",
    "start": "1675260",
    "end": "1681980"
  },
  {
    "text": "cool stuff toughly encourage you to check it out now what if you want to build a service application you don't",
    "start": "1681980",
    "end": "1688580"
  },
  {
    "text": "want to do some of the API specific some of these frameworks are specific to workloads and maybe you actually feel pretty comfortable working with some of",
    "start": "1688580",
    "end": "1694910"
  },
  {
    "text": "the more complicated features that we have in AWS so we last year actually",
    "start": "1694910",
    "end": "1700820"
  },
  {
    "text": "right before reinvent announced a tool called Sam and this is our service mask",
    "start": "1700820",
    "end": "1705890"
  },
  {
    "text": "guy here Sam the squirrel well you see Sam kind of been all sorts of presentations and things that we do and actually I Tim Wagner who's the general",
    "start": "1705890",
    "end": "1713630"
  },
  {
    "text": "manager of service at AWS kind of the Godfather of this space I was actually running around Aria yesterday in a",
    "start": "1713630",
    "end": "1719720"
  },
  {
    "text": "squirrel costume so it wasn't just because he's strange it was because Sam here's our mascot for service so with",
    "start": "1719720",
    "end": "1727130"
  },
  {
    "text": "Sam stands for is service application models and what this is is an extension today on top of CloudFormation",
    "start": "1727130",
    "end": "1733850"
  },
  {
    "text": "that also greatly streamlines what's necessary to build service applications and so an example of what this looks",
    "start": "1733850",
    "end": "1739910"
  },
  {
    "text": "like and again now what this does is nothing about our code it's everything about managing the AWS resources and so",
    "start": "1739910",
    "end": "1746390"
  },
  {
    "text": "I won't expect you to read all of the the lines inside of this but really take away that there's kind of three sections",
    "start": "1746390",
    "end": "1751429"
  },
  {
    "text": "to it the first is just kind of a general header and that basically defines what this template is and then",
    "start": "1751429",
    "end": "1757370"
  },
  {
    "text": "what I have are two different resources the first is a service function and then the next is what's called a simple table",
    "start": "1757370",
    "end": "1763039"
  },
  {
    "text": "now the simple table is just going to provision a DynamoDB table with basic read and write units and now with",
    "start": "1763039",
    "end": "1769159"
  },
  {
    "text": "DynamoDB auto-scaling you don't have to really think about that too much the service function what this is going to",
    "start": "1769159",
    "end": "1774770"
  },
  {
    "text": "do is define a lambda function for me and then a little further down I have here an event structure which is",
    "start": "1774770",
    "end": "1780409"
  },
  {
    "text": "actually going to map to an API and so when I take this template file but it's going to do is configure again lambda",
    "start": "1780409",
    "end": "1786289"
  },
  {
    "text": "API gateway permissioning my DynamoDB table and since it's actually a",
    "start": "1786289",
    "end": "1791780"
  },
  {
    "text": "CloudFormation template I could include any other AWS resource that I wanted to and so it becomes really easy to again",
    "start": "1791780",
    "end": "1797870"
  },
  {
    "text": "have fine-grained control over how I configure the resources without having to maybe impact my code whereas a lot of",
    "start": "1797870",
    "end": "1804169"
  },
  {
    "text": "the frameworks are actually a little bit more opinionated about how your applications were written so just I",
    "start": "1804169",
    "end": "1809750"
  },
  {
    "text": "think about this in another way here what we have is roughly about 16 or 17 lines of code that generates roughly six",
    "start": "1809750",
    "end": "1815720"
  },
  {
    "text": "different AWS resources where if you were doing this in the console you'd be doing decent amount of clicking or if",
    "start": "1815720",
    "end": "1821780"
  },
  {
    "text": "you were doing this on the CLI you'd be doing quite a bit of typing of CLI",
    "start": "1821780",
    "end": "1827030"
  },
  {
    "text": "commands now just over this past summer he was about August we actually",
    "start": "1827030",
    "end": "1832100"
  },
  {
    "text": "announced a tool called Sam local with Sam local does it looks at your code repository it looks at the Sam template",
    "start": "1832100",
    "end": "1838130"
  },
  {
    "text": "that's inside of that and actually allows you to bundle all that up and inside of a docker container running on",
    "start": "1838130",
    "end": "1844250"
  },
  {
    "text": "your local workstation gives you the ability to mock and test the service application so we can create kind of a",
    "start": "1844250",
    "end": "1850520"
  },
  {
    "text": "fog HTTP interface on your localhost it also has the ability to allow you to test the services that are asynchronous so being",
    "start": "1850520",
    "end": "1858230"
  },
  {
    "text": "able to do asynchronous invocations and basically again gives you the ability to locally build run and debug service",
    "start": "1858230",
    "end": "1864770"
  },
  {
    "text": "applications so this is really pretty cool then just today we announced AWS cloud 9",
    "start": "1864770",
    "end": "1871220"
  },
  {
    "text": "so cloud 9 is an ide that exists inside of AWS now and what this here is an",
    "start": "1871220",
    "end": "1878059"
  },
  {
    "text": "example of a lambda application that I have where on the kind of center pane",
    "start": "1878059",
    "end": "1884059"
  },
  {
    "text": "what you see there is my lambda code but what's really really cool about this if you look at kind of the far right-hand",
    "start": "1884059",
    "end": "1889070"
  },
  {
    "text": "side here what I'm able to do is actually test the API for this directly inside of the IDE in near-real-time",
    "start": "1889070",
    "end": "1896299"
  },
  {
    "text": "so I'm editing my code I hit test I'm able to right away debug and get out",
    "start": "1896299",
    "end": "1901549"
  },
  {
    "text": "plate of dysfunctions execution and so a lot of cool things you can do in cloud 9",
    "start": "1901549",
    "end": "1906889"
  },
  {
    "text": "definitely check it out so with that I'm going to hand it over to nikki here to talk a little bit more about capital",
    "start": "1906889",
    "end": "1912889"
  },
  {
    "text": "ones experience in moving to surplice thank you thanks Chris",
    "start": "1912889",
    "end": "1919509"
  },
  {
    "text": "hello everyone my name is Nikki Joshi I'm a director of software engineering",
    "start": "1919509",
    "end": "1924559"
  },
  {
    "text": "at Capital One I'm here to share our experiences about migrating wonderful",
    "start": "1924559",
    "end": "1929659"
  },
  {
    "text": "web applications to a server less architecture as many of you may know",
    "start": "1929659",
    "end": "1935620"
  },
  {
    "text": "Capital One is a top 10 u.s. bank with assets in the tune of turn of 50 billion",
    "start": "1935620",
    "end": "1942139"
  },
  {
    "text": "US dollars as many of you may not know is a Capital One is a financial",
    "start": "1942139",
    "end": "1948529"
  },
  {
    "text": "institution on the cutting edge of technology we are leading the pack in",
    "start": "1948529",
    "end": "1953929"
  },
  {
    "text": "the move to public cloud an AWS a strategic partner in this process",
    "start": "1953929",
    "end": "1960610"
  },
  {
    "text": "according to alexa.com our primary website capital 1.com is a",
    "start": "1960610",
    "end": "1967129"
  },
  {
    "text": "top hundred us site in terms of web traffic the story I'm going to share",
    "start": "1967129",
    "end": "1972289"
  },
  {
    "text": "today is about our experiences of migrating or capital one auto finance marketing site to a server less",
    "start": "1972289",
    "end": "1979370"
  },
  {
    "text": "architecture our story starts in 2015",
    "start": "1979370",
    "end": "1985000"
  },
  {
    "text": "2015 is when we started to migrate our systems over to AWS for a capital one",
    "start": "1985000",
    "end": "1992929"
  },
  {
    "text": "auto finance site we broke the journey up into two phases the first phase went",
    "start": "1992929",
    "end": "1999500"
  },
  {
    "text": "live in August of 2016 steam and we completed a server list migration in April of this year before",
    "start": "1999500",
    "end": "2008840"
  },
  {
    "text": "starting the migration we took a step back and looked at the holistic requirements of a marketing site we",
    "start": "2008840",
    "end": "2015560"
  },
  {
    "text": "obviously had to migrate the full functionality of the site as well as have advanced capabilities like",
    "start": "2015560",
    "end": "2022570"
  },
  {
    "text": "multivariate testing and a be testing built in we are a financial institution",
    "start": "2022570",
    "end": "2028400"
  },
  {
    "text": "so security was obviously key for us we had to be set up in a resilient active",
    "start": "2028400",
    "end": "2034010"
  },
  {
    "text": "active manner this is a marketing site so the response time had to be very low",
    "start": "2034010",
    "end": "2040130"
  },
  {
    "text": "and we had to be set up in an SEO friendly manner as well we had to be set",
    "start": "2040130",
    "end": "2047210"
  },
  {
    "text": "up in a low maintenance mode with the capabilities for continuous deployments and we didn't want to reinvent the wheel",
    "start": "2047210",
    "end": "2054860"
  },
  {
    "text": "so there were a lot of existing tools and processes in the organization that we wanted to reuse primarily around",
    "start": "2054860",
    "end": "2062300"
  },
  {
    "text": "logging monitoring and deployments this",
    "start": "2062300",
    "end": "2068210"
  },
  {
    "text": "is the architecture that we started from the architecture here is not very",
    "start": "2068210",
    "end": "2073399"
  },
  {
    "text": "different than what many web applications have even today in enterprises while there are many",
    "start": "2073400",
    "end": "2079280"
  },
  {
    "text": "challenges with this architecture there were two issues that were highly limiting for us the first was that since",
    "start": "2079280",
    "end": "2087830"
  },
  {
    "text": "this is an enterprise wide common deployment there was one release calendar that dictated our release cycle",
    "start": "2087830",
    "end": "2094460"
  },
  {
    "text": "as a result of this we had to sometimes have our code developed months in",
    "start": "2094460",
    "end": "2101360"
  },
  {
    "text": "advance before we could release it to production obviously that's not optimal for marketing site in addition to that",
    "start": "2101360",
    "end": "2109070"
  },
  {
    "text": "this is a highly tightly coupled architecture there are times when they",
    "start": "2109070",
    "end": "2114200"
  },
  {
    "text": "were issues in one part of the application that were causing issues in an unrelated part of the application as",
    "start": "2114200",
    "end": "2120440"
  },
  {
    "text": "well obviously that's unacceptable so with that we started our serverless",
    "start": "2120440",
    "end": "2127190"
  },
  {
    "text": "migration and in phase one we accomplished two objectives the FIR",
    "start": "2127190",
    "end": "2133630"
  },
  {
    "text": "was we moved from on-premises data center over to AWS and we created our",
    "start": "2133630",
    "end": "2140349"
  },
  {
    "text": "server less content strategy this is the architecture that we came up for our",
    "start": "2140349",
    "end": "2146529"
  },
  {
    "text": "service content for application we chose a single page application framework",
    "start": "2146529",
    "end": "2152730"
  },
  {
    "text": "angular was a choice of framework for that we created a pre-rendered bundle of",
    "start": "2152730",
    "end": "2158410"
  },
  {
    "text": "the application and deployed that in an s3 bucket and leveraged s3 web hosting",
    "start": "2158410",
    "end": "2164760"
  },
  {
    "text": "we replicated that content from s3 in the East region over to the west region",
    "start": "2164760",
    "end": "2170549"
  },
  {
    "text": "both s3 buckets were fronted with CloudFront where we hosted our ssl certificate for SSL termination cloud",
    "start": "2170549",
    "end": "2179140"
  },
  {
    "text": "front was fronted by route 53 which gives us our resilient active active setup as well",
    "start": "2179140",
    "end": "2184349"
  },
  {
    "text": "in addition to that we were able to leverage an on AWS component like Akamai",
    "start": "2184349",
    "end": "2189400"
  },
  {
    "text": "at the edge for content caching to summarize I would like to call out three",
    "start": "2189400",
    "end": "2195369"
  },
  {
    "text": "points in this architecture the first is by leveraging s3 web hosting we were",
    "start": "2195369",
    "end": "2201430"
  },
  {
    "text": "able to eliminate the need for any ec2 instances by leveraging cloud front and",
    "start": "2201430",
    "end": "2206859"
  },
  {
    "text": "route 53 we were able to meet our security and resiliency requirements and",
    "start": "2206859",
    "end": "2213089"
  },
  {
    "text": "finally we were able to leverage an on AWS component like Akamai as well in our",
    "start": "2213089",
    "end": "2218680"
  },
  {
    "text": "architecture which allowed us to continue to leverage our investment in Akamai as well this is the architecture",
    "start": "2218680",
    "end": "2228700"
  },
  {
    "text": "that we landed on for ap is now our target state was always to go server",
    "start": "2228700",
    "end": "2233980"
  },
  {
    "text": "less however we ran into a few issues internally for us to be able to use",
    "start": "2233980",
    "end": "2239799"
  },
  {
    "text": "lambda functions in production in 2016 as a result of that we had to come up",
    "start": "2239799",
    "end": "2245619"
  },
  {
    "text": "with an alternate ec2 based architecture the first two ec2 instances here are",
    "start": "2245619",
    "end": "2252069"
  },
  {
    "text": "running Apache with security configurations they're acting as a web application firewall to to ec2 is in the",
    "start": "2252069",
    "end": "2259750"
  },
  {
    "text": "back or running Tomcat with the application logic both clusters of ec2",
    "start": "2259750",
    "end": "2265089"
  },
  {
    "text": "is affronted with load balancers this setup is then replicated across three availability zones in the East",
    "start": "2265089",
    "end": "2272319"
  },
  {
    "text": "region and then the entire setup is then replicated again in the West region both",
    "start": "2272319",
    "end": "2278619"
  },
  {
    "text": "regions are then fronted with route 53 for a resilient active active setup now",
    "start": "2278619",
    "end": "2284410"
  },
  {
    "text": "for the functionality that this application has this definitely seems to be a lot of infrastructure for that so",
    "start": "2284410",
    "end": "2292150"
  },
  {
    "text": "in our phase 2 migration I'll talk about how we migrated this over to a service",
    "start": "2292150",
    "end": "2297160"
  },
  {
    "text": "architecture wrapping up our phase 1 migration this is the CI CD process that",
    "start": "2297160",
    "end": "2304180"
  },
  {
    "text": "we built for a Content we store our application angular application",
    "start": "2304180",
    "end": "2309339"
  },
  {
    "text": "templates in github store the corresponding content in a CMS system we",
    "start": "2309339",
    "end": "2315789"
  },
  {
    "text": "have an easy to build server that pulls the templates pulls the content packages",
    "start": "2315789",
    "end": "2321249"
  },
  {
    "text": "them them together and creates a pre-rendered bundle of the application",
    "start": "2321249",
    "end": "2326729"
  },
  {
    "text": "leveraging the AWS CLI we then push that bundle into an s3 bucket for web hosting",
    "start": "2326729",
    "end": "2334859"
  },
  {
    "text": "this gives us two advantages the first it allows your application to be responsive and it solves the SEO issue",
    "start": "2334859",
    "end": "2343809"
  },
  {
    "text": "that angular typically has as well coming to our phase 2 migration this is",
    "start": "2343809",
    "end": "2351249"
  },
  {
    "text": "where we were able to migrate our api's over to lambda functions and we created",
    "start": "2351249",
    "end": "2358059"
  },
  {
    "text": "our CI CD process for our lambda functions as well this is our",
    "start": "2358059",
    "end": "2365049"
  },
  {
    "text": "architecture that we landed on for our AP is the lambda functions in the front",
    "start": "2365049",
    "end": "2370839"
  },
  {
    "text": "are the ones that are hosting the application logic they are also logging",
    "start": "2370839",
    "end": "2375969"
  },
  {
    "text": "to cloud watch since our target enterprise logging infrastructure is",
    "start": "2375969",
    "end": "2381430"
  },
  {
    "text": "Splunk we needed to find a way to be able to get the logs from cloud watch into Splunk for that we were able to",
    "start": "2381430",
    "end": "2389289"
  },
  {
    "text": "leverage another lambda function which is triggered with cloud with logs in cloud watch and that basically takes",
    "start": "2389289",
    "end": "2395259"
  },
  {
    "text": "those and puts them in this block if you look at the diagram at the you'll see something called the capital",
    "start": "2395259",
    "end": "2401550"
  },
  {
    "text": "one enterprise gateway that's very similar to the AWS API gateway that",
    "start": "2401550",
    "end": "2407130"
  },
  {
    "text": "Chris talked about earlier since we already had an API gateway internally we",
    "start": "2407130",
    "end": "2412770"
  },
  {
    "text": "chose to leverage that and hook up our lambda functions to that gateway instead of the API gateway",
    "start": "2412770",
    "end": "2418790"
  },
  {
    "text": "so to summarize I'd like to call out two things here by leveraging the lambda",
    "start": "2418790",
    "end": "2424020"
  },
  {
    "text": "functions we were able to eliminate the need for any ec2 instances for application hosting and we were able to",
    "start": "2424020",
    "end": "2432210"
  },
  {
    "text": "leverage non AWS components like Splunk and our Capital One enterprise gateway",
    "start": "2432210",
    "end": "2437970"
  },
  {
    "text": "in this architecture in a seamless manner as well this is what we've built",
    "start": "2437970",
    "end": "2445890"
  },
  {
    "text": "for our CI CD process for a lambda functions Jenkins is our enterprise build tool of",
    "start": "2445890",
    "end": "2452040"
  },
  {
    "text": "choice we store our lambda function code and github which triggers a build job in",
    "start": "2452040",
    "end": "2458700"
  },
  {
    "text": "Jenkins the Jenkins job takes that code utilizes the AWS CLI to create a",
    "start": "2458700",
    "end": "2465380"
  },
  {
    "text": "deployment bundle and stores that in s3 by leveraging functions like lambda",
    "start": "2465380",
    "end": "2471330"
  },
  {
    "text": "create and lambda update we were able to create an update or lambda functions accordingly",
    "start": "2471330",
    "end": "2477140"
  },
  {
    "text": "other options that we looked at with the serverless application model and the serverless framework that Chris talked",
    "start": "2477140",
    "end": "2483810"
  },
  {
    "text": "about a little bit earlier for us those were a little bit of overkill because what we had was something pretty simple",
    "start": "2483810",
    "end": "2490020"
  },
  {
    "text": "and this suffice for what we were looking for so with that these are the benefits that",
    "start": "2490020",
    "end": "2496950"
  },
  {
    "text": "we saw we landed up with a very super simple architecture it pretty much runs",
    "start": "2496950",
    "end": "2503520"
  },
  {
    "text": "itself it scales itself we have no worries on am a rehydration anymore",
    "start": "2503520",
    "end": "2509760"
  },
  {
    "text": "which is keeping our compliance and operations teams extremely happy and finally cost as a result of this",
    "start": "2509760",
    "end": "2517830"
  },
  {
    "text": "migration we saved about $50,000 a year on a conservative manner we were able to",
    "start": "2517830",
    "end": "2524010"
  },
  {
    "text": "leverage s3 web hosting and runner and functions in lambda and as a result we",
    "start": "2524010",
    "end": "2530760"
  },
  {
    "text": "were able to eliminate about 20 ec2 instances EBS volumes and load balancers from our",
    "start": "2530760",
    "end": "2536760"
  },
  {
    "text": "architecture also we were able to save countless number of hours in terms of",
    "start": "2536760",
    "end": "2542609"
  },
  {
    "text": "operations and managing infrastructure which is a big plus finally coming to",
    "start": "2542609",
    "end": "2549060"
  },
  {
    "text": "our lessons learned migration can be a journey so I would recommend to plan accordingly",
    "start": "2549060",
    "end": "2555020"
  },
  {
    "text": "start small look for the easier parts of your application to migrate first and",
    "start": "2555020",
    "end": "2560670"
  },
  {
    "text": "then go to some of the more complex pieces there's no one-size-fits-all",
    "start": "2560670",
    "end": "2567170"
  },
  {
    "text": "serverless architectures are very flexible and fungible as I've demonstrated we were able to mix and",
    "start": "2567170",
    "end": "2573750"
  },
  {
    "text": "match components and utilize Nonnie w's components pretty seamlessly as well with the architecture try to reuse tools",
    "start": "2573750",
    "end": "2581609"
  },
  {
    "text": "and processes that you already have in your organization don't try to reinvent the wheel and finally I would recommend",
    "start": "2581609",
    "end": "2588600"
  },
  {
    "text": "to get your stakeholders by him early you'll have folks from architectures",
    "start": "2588600",
    "end": "2593720"
  },
  {
    "text": "security operations that you will have to involve as part of the migration and",
    "start": "2593720",
    "end": "2599700"
  },
  {
    "text": "you'd want to keep them involved in the process and I'm sure that they'll be very happy to be a part of the migration",
    "start": "2599700",
    "end": "2607490"
  },
  {
    "text": "so that concludes my piece that I had in our experience as a Capital One so thank",
    "start": "2607490",
    "end": "2613980"
  },
  {
    "text": "you so much and with that I'd like to hand it back over to Chris to wrap up the presentation",
    "start": "2613980",
    "end": "2619940"
  },
  {
    "text": "[Applause]",
    "start": "2620010",
    "end": "2625180"
  },
  {
    "text": "thank you very much Nikki so a a really straightforward at the end of the day",
    "start": "2625180",
    "end": "2630710"
  },
  {
    "text": "kind of example of something very complicated right a transition from both on-prem to the cloud to survey lists",
    "start": "2630710",
    "end": "2637609"
  },
  {
    "text": "where money was saved time is saved resiliency as increased scale abilities increased all by this move to service",
    "start": "2637609",
    "end": "2644630"
  },
  {
    "text": "architectures so just kind of a couple kind of key takeaways here in closing again when we talk about service here at",
    "start": "2644630",
    "end": "2651170"
  },
  {
    "text": "AWS a couple of key factors that define the space for us no servers to manage at all whatsoever whether they begin",
    "start": "2651170",
    "end": "2657410"
  },
  {
    "text": "physical virtual or even containers no cost for idle automatic scaling built-in",
    "start": "2657410",
    "end": "2663020"
  },
  {
    "text": "high availability built in all important key things these days kind of six big buckets for use cases web applications",
    "start": "2663020",
    "end": "2670300"
  },
  {
    "text": "backends data processing chatbots alexa and IT automation and then a",
    "start": "2670300",
    "end": "2677300"
  },
  {
    "text": "number of services that can be used to invoke lambda you probably surprised yourself from you stumble upon it in the",
    "start": "2677300",
    "end": "2682760"
  },
  {
    "text": "console the ability to pass in a lambda functions identifier in response to some",
    "start": "2682760",
    "end": "2688250"
  },
  {
    "text": "sort of an event so if you're using any of these today might be interesting for you to take a look at you know just what",
    "start": "2688250",
    "end": "2694160"
  },
  {
    "text": "it is that lambda can do to help simplify it now a lot of the things that we talked about today are actually",
    "start": "2694160",
    "end": "2699200"
  },
  {
    "text": "covered on the new service landing page this just was refreshed this morning one last thing I want to talk about from a",
    "start": "2699200",
    "end": "2705200"
  },
  {
    "text": "getting started perspective is we also announced today the service application repo which is in preview mode but coming",
    "start": "2705200",
    "end": "2711050"
  },
  {
    "text": "out here hopefully pretty soon you can sign up for that preview as well and should get access here in the coming",
    "start": "2711050",
    "end": "2717859"
  },
  {
    "text": "days and weeks but beyond that what we have off of this page are a ton of resources for getting started a ton of",
    "start": "2717859",
    "end": "2724430"
  },
  {
    "text": "things for reading and learning more on we actually just released two service white papers in the last couple weeks",
    "start": "2724430",
    "end": "2729970"
  },
  {
    "text": "links to our compute blog to all sorts of things so head to this URL if you really want to get deep into this space",
    "start": "2729970",
    "end": "2736839"
  },
  {
    "text": "with that my name is Chris once again I'm a senior developer advocate for server lists at AWS I can be found at",
    "start": "2736839",
    "end": "2742640"
  },
  {
    "text": "Mons and amazon.com always happy to help people figure out things you can also",
    "start": "2742640",
    "end": "2747800"
  },
  {
    "text": "yell at me on Twitter at Chris month and again thank you very much for coming please provide his feedback on this talk",
    "start": "2747800",
    "end": "2754790"
  },
  {
    "text": "we greatly appreciate it have a great rest of the time reinvent hopefully you enjoy the replay party tonight and again thank you for",
    "start": "2754790",
    "end": "2761270"
  },
  {
    "text": "coming [Applause]",
    "start": "2761270",
    "end": "2765789"
  }
]