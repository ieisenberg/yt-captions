[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "text": "[Music]",
    "start": "140",
    "end": "1160"
  },
  {
    "text": "[Applause]",
    "start": "1160",
    "end": "2910"
  },
  {
    "text": "[Music]",
    "start": "2910",
    "end": "6080"
  },
  {
    "text": "hello I'm vetrivel A Cloud support",
    "start": "7400",
    "end": "10139"
  },
  {
    "text": "engineer here at the AWS office in Cape",
    "start": "10139",
    "end": "12599"
  },
  {
    "text": "Town in this video we'll discuss how to",
    "start": "12599",
    "end": "15000"
  },
  {
    "text": "troubleshoot High CPU utilization in",
    "start": "15000",
    "end": "17220"
  },
  {
    "text": "Amazon relational database service for",
    "start": "17220",
    "end": "19080"
  },
  {
    "text": "postgresql or Amazon Aurora postgresql",
    "start": "19080",
    "end": "22080"
  },
  {
    "text": "compatible Edition using Amazon",
    "start": "22080",
    "end": "23939"
  },
  {
    "text": "cloudwatch and enhanced monitoring then",
    "start": "23939",
    "end": "26640"
  },
  {
    "text": "we will leverage postgres equals engine",
    "start": "26640",
    "end": "28740"
  },
  {
    "text": "specific method we use to identify the",
    "start": "28740",
    "end": "31320"
  },
  {
    "text": "bottleneck let's get started",
    "start": "31320",
    "end": "34140"
  },
  {
    "start": "32000",
    "end": "55000"
  },
  {
    "text": "an increase in CPU usage can often be",
    "start": "34140",
    "end": "37320"
  },
  {
    "text": "caused by workload",
    "start": "37320",
    "end": "39480"
  },
  {
    "text": "after identifying CPU spikes using AWS",
    "start": "39480",
    "end": "42780"
  },
  {
    "text": "tools such as Cloud watch and enhanced",
    "start": "42780",
    "end": "45420"
  },
  {
    "text": "monitoring you can use performance",
    "start": "45420",
    "end": "47520"
  },
  {
    "text": "insights and also engine specific",
    "start": "47520",
    "end": "49980"
  },
  {
    "text": "monitoring techniques to find the root",
    "start": "49980",
    "end": "52140"
  },
  {
    "text": "cause of CPU spikes",
    "start": "52140",
    "end": "54840"
  },
  {
    "text": "for this demo I have created a Amazon",
    "start": "54840",
    "end": "57180"
  },
  {
    "start": "55000",
    "end": "190000"
  },
  {
    "text": "RDS instance and generated a workload",
    "start": "57180",
    "end": "60239"
  },
  {
    "text": "that maximized the CPU usage let's check",
    "start": "60239",
    "end": "63600"
  },
  {
    "text": "how we can identify CPU spikes by using",
    "start": "63600",
    "end": "66840"
  },
  {
    "text": "Cloud watch",
    "start": "66840",
    "end": "68520"
  },
  {
    "text": "first login to the AWS Management",
    "start": "68520",
    "end": "70860"
  },
  {
    "text": "console and then navigate to the Amazon",
    "start": "70860",
    "end": "73200"
  },
  {
    "text": "RDS console",
    "start": "73200",
    "end": "75420"
  },
  {
    "text": "then select the DB instances page",
    "start": "75420",
    "end": "79200"
  },
  {
    "text": "select the instance that has high CPU",
    "start": "79200",
    "end": "81900"
  },
  {
    "text": "utilization and then navigate to the",
    "start": "81900",
    "end": "84360"
  },
  {
    "text": "monitoring tab",
    "start": "84360",
    "end": "86460"
  },
  {
    "text": "choose the CPU utilization graph",
    "start": "86460",
    "end": "89460"
  },
  {
    "text": "the graph opens in a pop-up window",
    "start": "89460",
    "end": "93000"
  },
  {
    "text": "select the time periods when you were",
    "start": "93000",
    "end": "95220"
  },
  {
    "text": "facing the high CPU utilization and then",
    "start": "95220",
    "end": "97740"
  },
  {
    "text": "note them",
    "start": "97740",
    "end": "99479"
  },
  {
    "text": "you can use the other filter options to",
    "start": "99479",
    "end": "102360"
  },
  {
    "text": "help narrow down your metric",
    "start": "102360",
    "end": "105119"
  },
  {
    "text": "for example select maximum from the drop",
    "start": "105119",
    "end": "107820"
  },
  {
    "text": "down list to show the maximum values",
    "start": "107820",
    "end": "110040"
  },
  {
    "text": "that the Matrix has reached in that",
    "start": "110040",
    "end": "112200"
  },
  {
    "text": "minute or select a particular time by",
    "start": "112200",
    "end": "115079"
  },
  {
    "text": "hovering over the metrics and selecting",
    "start": "115079",
    "end": "117360"
  },
  {
    "text": "the particular part",
    "start": "117360",
    "end": "119460"
  },
  {
    "text": "and so we have narrowed down the time",
    "start": "119460",
    "end": "121979"
  },
  {
    "text": "period when the value is high for CPU",
    "start": "121979",
    "end": "124560"
  },
  {
    "text": "utilization",
    "start": "124560",
    "end": "126299"
  },
  {
    "text": "now you can use cloud watch metrics to",
    "start": "126299",
    "end": "129239"
  },
  {
    "text": "identify CPU patterns over extended",
    "start": "129239",
    "end": "131580"
  },
  {
    "text": "periods",
    "start": "131580",
    "end": "133319"
  },
  {
    "text": "compare the graphs write iops",
    "start": "133319",
    "end": "137340"
  },
  {
    "text": "read iops",
    "start": "137340",
    "end": "139800"
  },
  {
    "text": "right throughput",
    "start": "139800",
    "end": "142260"
  },
  {
    "text": "and read throughput",
    "start": "142260",
    "end": "145020"
  },
  {
    "text": "with the CPU utilization to find when",
    "start": "145020",
    "end": "147660"
  },
  {
    "text": "the workload caused High CPU",
    "start": "147660",
    "end": "150900"
  },
  {
    "text": "now let's identify CPU spikes using",
    "start": "150900",
    "end": "154440"
  },
  {
    "text": "enhanced monitoring",
    "start": "154440",
    "end": "156780"
  },
  {
    "text": "before we do that let's talk a bit about",
    "start": "156780",
    "end": "159300"
  },
  {
    "text": "enhanced monitoring",
    "start": "159300",
    "end": "161519"
  },
  {
    "text": "in looking at this time frame you can",
    "start": "161519",
    "end": "163800"
  },
  {
    "text": "review the enhanced monitoring data",
    "start": "163800",
    "end": "165720"
  },
  {
    "text": "associated with your DB instance",
    "start": "165720",
    "end": "168660"
  },
  {
    "text": "this allows you to collect data at a",
    "start": "168660",
    "end": "171599"
  },
  {
    "text": "more granular level than with Cloud",
    "start": "171599",
    "end": "173640"
  },
  {
    "text": "watch",
    "start": "173640",
    "end": "175440"
  },
  {
    "text": "enhanced monitoring provides a view at",
    "start": "175440",
    "end": "177900"
  },
  {
    "text": "the operating system or Os level which",
    "start": "177900",
    "end": "180599"
  },
  {
    "text": "can help identify the cost of a high CPU",
    "start": "180599",
    "end": "183360"
  },
  {
    "text": "load",
    "start": "183360",
    "end": "185040"
  },
  {
    "text": "for example you can review the load",
    "start": "185040",
    "end": "187379"
  },
  {
    "text": "average and CPU distribution and you can",
    "start": "187379",
    "end": "190019"
  },
  {
    "start": "190000",
    "end": "310000"
  },
  {
    "text": "view the OS process list and check which",
    "start": "190019",
    "end": "192540"
  },
  {
    "text": "process is causing a high rate of CPU",
    "start": "192540",
    "end": "194819"
  },
  {
    "text": "utilization",
    "start": "194819",
    "end": "196680"
  },
  {
    "text": "by using enhanced monitoring you can",
    "start": "196680",
    "end": "199140"
  },
  {
    "text": "check the load average minute data in",
    "start": "199140",
    "end": "201420"
  },
  {
    "text": "intervals of 1 5 and 15 minutes",
    "start": "201420",
    "end": "205560"
  },
  {
    "text": "if the load average is greater than the",
    "start": "205560",
    "end": "208019"
  },
  {
    "text": "number of vcpus then the instance is",
    "start": "208019",
    "end": "210540"
  },
  {
    "text": "under a heavy load",
    "start": "210540",
    "end": "212580"
  },
  {
    "text": "also if the load average is less than",
    "start": "212580",
    "end": "215580"
  },
  {
    "text": "the number of vcpus for the DB instance",
    "start": "215580",
    "end": "218040"
  },
  {
    "text": "class then CPU throttling might not be",
    "start": "218040",
    "end": "220920"
  },
  {
    "text": "the cause of the application latency",
    "start": "220920",
    "end": "222840"
  },
  {
    "text": "check the load average to avoid false",
    "start": "222840",
    "end": "226379"
  },
  {
    "text": "positives when diagnosing the cost of",
    "start": "226379",
    "end": "228659"
  },
  {
    "text": "CPU usage",
    "start": "228659",
    "end": "230580"
  },
  {
    "text": "open the configuration tab from DB",
    "start": "230580",
    "end": "233159"
  },
  {
    "text": "instance page",
    "start": "233159",
    "end": "234659"
  },
  {
    "text": "copy the resource ID from the",
    "start": "234659",
    "end": "236940"
  },
  {
    "text": "configuration tab",
    "start": "236940",
    "end": "238680"
  },
  {
    "text": "type Cloud watch in the search bar",
    "start": "238680",
    "end": "243019"
  },
  {
    "text": "open the log section from the left",
    "start": "243840",
    "end": "246180"
  },
  {
    "text": "navigation panel",
    "start": "246180",
    "end": "249299"
  },
  {
    "text": "choose RDS OS metrics from the list of",
    "start": "249299",
    "end": "252480"
  },
  {
    "text": "log groups",
    "start": "252480",
    "end": "253980"
  },
  {
    "text": "paste the copied resource ID in the",
    "start": "253980",
    "end": "256380"
  },
  {
    "text": "search bar",
    "start": "256380",
    "end": "257579"
  },
  {
    "text": "open the logs at the timings of high CPU",
    "start": "257579",
    "end": "260400"
  },
  {
    "text": "utilization and you will be able to see",
    "start": "260400",
    "end": "262800"
  },
  {
    "text": "the load average minute data for that",
    "start": "262800",
    "end": "265199"
  },
  {
    "text": "time",
    "start": "265199",
    "end": "266699"
  },
  {
    "text": "you can use Amazon RDS performance",
    "start": "266699",
    "end": "269460"
  },
  {
    "text": "insights to identify the query",
    "start": "269460",
    "end": "271440"
  },
  {
    "text": "responsible for the database load after",
    "start": "271440",
    "end": "274199"
  },
  {
    "text": "checking the SQL tab that corresponds to",
    "start": "274199",
    "end": "277139"
  },
  {
    "text": "a particular time frame",
    "start": "277139",
    "end": "279240"
  },
  {
    "text": "let's go back to the Amazon RDS console",
    "start": "279240",
    "end": "284240"
  },
  {
    "text": "choose performance insights from left",
    "start": "285780",
    "end": "288120"
  },
  {
    "text": "navigation panel",
    "start": "288120",
    "end": "290639"
  },
  {
    "text": "choose your database instance from the",
    "start": "290639",
    "end": "292860"
  },
  {
    "text": "drop down list",
    "start": "292860",
    "end": "294840"
  },
  {
    "text": "select the timings for the last 5",
    "start": "294840",
    "end": "297360"
  },
  {
    "text": "minutes and show the top sequels",
    "start": "297360",
    "end": "301159"
  },
  {
    "text": "now let's see how we can identify the",
    "start": "302820",
    "end": "305820"
  },
  {
    "text": "issue from the database engine",
    "start": "305820",
    "end": "308639"
  },
  {
    "text": "postgresql offers two catalog weaves PG",
    "start": "308639",
    "end": "311880"
  },
  {
    "start": "310000",
    "end": "529000"
  },
  {
    "text": "stat activity for real-time database",
    "start": "311880",
    "end": "314160"
  },
  {
    "text": "session monitoring PG stat statements",
    "start": "314160",
    "end": "317100"
  },
  {
    "text": "created by the PG start statements",
    "start": "317100",
    "end": "319500"
  },
  {
    "text": "extension for tracking planning and",
    "start": "319500",
    "end": "322620"
  },
  {
    "text": "execution statistics of all SQL",
    "start": "322620",
    "end": "325139"
  },
  {
    "text": "statements that are performed by",
    "start": "325139",
    "end": "327360"
  },
  {
    "text": "postgresql engine",
    "start": "327360",
    "end": "329759"
  },
  {
    "text": "the PG stat activity can help you group",
    "start": "329759",
    "end": "332400"
  },
  {
    "text": "the machines clients and IP addresses",
    "start": "332400",
    "end": "335100"
  },
  {
    "text": "that send the most traffic along with",
    "start": "335100",
    "end": "337320"
  },
  {
    "text": "weight event of running session",
    "start": "337320",
    "end": "340259"
  },
  {
    "text": "this information can help you identify",
    "start": "340259",
    "end": "342960"
  },
  {
    "text": "the client responsible for causing High",
    "start": "342960",
    "end": "345240"
  },
  {
    "text": "CPU usage",
    "start": "345240",
    "end": "347400"
  },
  {
    "text": "with PG stat statements you can find how",
    "start": "347400",
    "end": "350580"
  },
  {
    "text": "many times a particular query has been",
    "start": "350580",
    "end": "352560"
  },
  {
    "text": "executed the time it took per execution",
    "start": "352560",
    "end": "355320"
  },
  {
    "text": "total time and I O cost by the query",
    "start": "355320",
    "end": "359699"
  },
  {
    "text": "let us use PG stat activity to see",
    "start": "359699",
    "end": "362639"
  },
  {
    "text": "what's going on in the database",
    "start": "362639",
    "end": "365340"
  },
  {
    "text": "lets see if there are any open",
    "start": "365340",
    "end": "367380"
  },
  {
    "text": "transactions",
    "start": "367380",
    "end": "369300"
  },
  {
    "text": "let's see how long these transactions",
    "start": "369300",
    "end": "371759"
  },
  {
    "text": "have been running for",
    "start": "371759",
    "end": "374039"
  },
  {
    "text": "let's see if there are any queries",
    "start": "374039",
    "end": "376259"
  },
  {
    "text": "running",
    "start": "376259",
    "end": "377940"
  },
  {
    "text": "as we can see there are transactions and",
    "start": "377940",
    "end": "380699"
  },
  {
    "text": "queries running on the database causing",
    "start": "380699",
    "end": "382740"
  },
  {
    "text": "High CPU usage you must investigate from",
    "start": "382740",
    "end": "385979"
  },
  {
    "text": "the application end if the workload is",
    "start": "385979",
    "end": "387900"
  },
  {
    "text": "Meaningful",
    "start": "387900",
    "end": "389639"
  },
  {
    "text": "now let's use PG stack statements to",
    "start": "389639",
    "end": "392819"
  },
  {
    "text": "find top consumers",
    "start": "392819",
    "end": "395280"
  },
  {
    "text": "for more information on PG stat",
    "start": "395280",
    "end": "397500"
  },
  {
    "text": "statements refer to the link in the",
    "start": "397500",
    "end": "399660"
  },
  {
    "text": "knowledge Center article",
    "start": "399660",
    "end": "401759"
  },
  {
    "text": "after setting a PG stat statements check",
    "start": "401759",
    "end": "404819"
  },
  {
    "text": "performance of queries by running a",
    "start": "404819",
    "end": "407160"
  },
  {
    "text": "combination of queries using PG start",
    "start": "407160",
    "end": "409259"
  },
  {
    "text": "statements",
    "start": "409259",
    "end": "410940"
  },
  {
    "text": "let's check queries by total time and",
    "start": "410940",
    "end": "413639"
  },
  {
    "text": "see which query spent most time in the",
    "start": "413639",
    "end": "415860"
  },
  {
    "text": "database",
    "start": "415860",
    "end": "417660"
  },
  {
    "text": "let's check queries with the total",
    "start": "417660",
    "end": "419819"
  },
  {
    "text": "number of calls total rows and rows",
    "start": "419819",
    "end": "422460"
  },
  {
    "text": "returned",
    "start": "422460",
    "end": "424139"
  },
  {
    "text": "let's check queries on a per execution",
    "start": "424139",
    "end": "426780"
  },
  {
    "text": "basis to sample queries over time",
    "start": "426780",
    "end": "430319"
  },
  {
    "text": "to learn how to activate logging refer",
    "start": "430319",
    "end": "432960"
  },
  {
    "text": "to the link in the knowledge Center",
    "start": "432960",
    "end": "434460"
  },
  {
    "text": "article",
    "start": "434460",
    "end": "435960"
  },
  {
    "text": "apart from using PG stat activity and PG",
    "start": "435960",
    "end": "439259"
  },
  {
    "text": "stat statements you can also configure",
    "start": "439259",
    "end": "441720"
  },
  {
    "text": "the log Min duration statement parameter",
    "start": "441720",
    "end": "444180"
  },
  {
    "text": "to intended value so that any queries",
    "start": "444180",
    "end": "447060"
  },
  {
    "text": "running over specified period of time",
    "start": "447060",
    "end": "449340"
  },
  {
    "text": "are logged into postgres equals log file",
    "start": "449340",
    "end": "453120"
  },
  {
    "text": "this helps in finding slow queries that",
    "start": "453120",
    "end": "455819"
  },
  {
    "text": "are degrading performance",
    "start": "455819",
    "end": "458160"
  },
  {
    "text": "after you identify the queries causing",
    "start": "458160",
    "end": "460740"
  },
  {
    "text": "the high CPU usage you can use the",
    "start": "460740",
    "end": "463020"
  },
  {
    "text": "following methods to further lower the",
    "start": "463020",
    "end": "465060"
  },
  {
    "text": "CPU usage",
    "start": "465060",
    "end": "466620"
  },
  {
    "text": "if there are any opportunities for",
    "start": "466620",
    "end": "468900"
  },
  {
    "text": "tuning use explain and explain analyze",
    "start": "468900",
    "end": "472080"
  },
  {
    "text": "to identify caveats and reduce the time",
    "start": "472080",
    "end": "475139"
  },
  {
    "text": "spent by a query",
    "start": "475139",
    "end": "477300"
  },
  {
    "text": "make sure that query planner statistics",
    "start": "477300",
    "end": "479940"
  },
  {
    "text": "are up to date",
    "start": "479940",
    "end": "482160"
  },
  {
    "text": "if there is a query that is running",
    "start": "482160",
    "end": "484199"
  },
  {
    "text": "repeatedly consider using prepared",
    "start": "484199",
    "end": "486720"
  },
  {
    "text": "statements to lower the pressure on your",
    "start": "486720",
    "end": "488699"
  },
  {
    "text": "CPU as repeated execution of prepared",
    "start": "488699",
    "end": "491940"
  },
  {
    "text": "statements will cache a query plan and",
    "start": "491940",
    "end": "494400"
  },
  {
    "text": "any further runs will reduce the time",
    "start": "494400",
    "end": "496500"
  },
  {
    "text": "for planning as plan is already in Cache",
    "start": "496500",
    "end": "501060"
  },
  {
    "text": "if not investigate from the application",
    "start": "501060",
    "end": "503639"
  },
  {
    "text": "to see if the repeatedness is valid",
    "start": "503639",
    "end": "507120"
  },
  {
    "text": "if your workload is Meaningful and you",
    "start": "507120",
    "end": "509759"
  },
  {
    "text": "don't find any tuning opportunities",
    "start": "509759",
    "end": "511620"
  },
  {
    "text": "consider to scale up your instance class",
    "start": "511620",
    "end": "514020"
  },
  {
    "text": "to gain more vcpus to compensate the",
    "start": "514020",
    "end": "516899"
  },
  {
    "text": "increase in workload",
    "start": "516899",
    "end": "519300"
  },
  {
    "text": "so now you know how to troubleshoot High",
    "start": "519300",
    "end": "521880"
  },
  {
    "text": "CPU utilization issues in Amazon RDS for",
    "start": "521880",
    "end": "524820"
  },
  {
    "text": "postgresql or Aurora postgresql",
    "start": "524820",
    "end": "527220"
  },
  {
    "text": "compatible",
    "start": "527220",
    "end": "529019"
  },
  {
    "start": "529000",
    "end": "544000"
  },
  {
    "text": "thanks for watching and happy cloud",
    "start": "529019",
    "end": "530940"
  },
  {
    "text": "computing from all of us here at AWS",
    "start": "530940",
    "end": "534240"
  },
  {
    "text": "foreign",
    "start": "534240",
    "end": "535910"
  },
  {
    "text": "[Music]",
    "start": "535910",
    "end": "539079"
  },
  {
    "text": "[Music]",
    "start": "541120",
    "end": "544299"
  }
]