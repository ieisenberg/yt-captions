[
  {
    "start": "0",
    "end": "64000"
  },
  {
    "text": "okay welcome to dev 309 thanks so much for spending your Tuesday night with me",
    "start": "1159",
    "end": "6870"
  },
  {
    "text": "I'm excited to tell you that we're actually going to do two feature launches tonight so you're gonna hear",
    "start": "6870",
    "end": "12690"
  },
  {
    "text": "about it first here in dev 3:09 let this is the agenda for tonight I'm going to",
    "start": "12690",
    "end": "18960"
  },
  {
    "text": "first talk about an overview of CI CD for modern applications and then I'll",
    "start": "18960",
    "end": "24060"
  },
  {
    "text": "dig into continuous integration continuous deployment and infrastructure is code and then finally I'll do a live",
    "start": "24060",
    "end": "30929"
  },
  {
    "text": "demo for you on both serverless application and a container space application so I mentioned this term",
    "start": "30929",
    "end": "39239"
  },
  {
    "text": "modern application for CI CD what is what is this thing modern application this is a term that you might hear a lot",
    "start": "39239",
    "end": "47100"
  },
  {
    "text": "at reinvent this week and what it really comes from is we were thinking at AWS",
    "start": "47100",
    "end": "52500"
  },
  {
    "text": "about what is it that makes customers successful on new technologies like",
    "start": "52500",
    "end": "58350"
  },
  {
    "text": "containers and server lists why are they adopting these new technologies and so",
    "start": "58350",
    "end": "63570"
  },
  {
    "text": "we came up with a set of goals that a lot of our customers come to us and say these are my goals for adopting cloud",
    "start": "63570",
    "end": "69689"
  },
  {
    "start": "64000",
    "end": "64000"
  },
  {
    "text": "these are my goals for adopting these new compute platforms and we came up",
    "start": "69689",
    "end": "75060"
  },
  {
    "text": "with here are the tools that you can use the best practices that you can use to really achieve these goals so two that",
    "start": "75060",
    "end": "83100"
  },
  {
    "text": "are probably near and dear to this crowd is simplifying environment management with serverless technologies and",
    "start": "83100",
    "end": "89400"
  },
  {
    "text": "reducing the impact of code changes with microservices architectures and these two really go hand in hand for",
    "start": "89400",
    "end": "95790"
  },
  {
    "text": "serverless and containers in AWS we have two serverless options one is of course",
    "start": "95790",
    "end": "101700"
  },
  {
    "text": "ADA boost lambda for serverless functions and the other is far gate for serverless containers so I'm going to",
    "start": "101700",
    "end": "107970"
  },
  {
    "text": "use both of these technologies in the demo tonight and reference both of them as we go through the CI CD process but",
    "start": "107970",
    "end": "115590"
  },
  {
    "text": "of course tonight I'm gonna focus on CI CD and the goal here is accelerating the",
    "start": "115590",
    "end": "121500"
  },
  {
    "text": "delivery of new high quality services with CI CD so let's talk a first about",
    "start": "121500",
    "end": "128280"
  },
  {
    "start": "126000",
    "end": "126000"
  },
  {
    "text": "kind of definition of CI CD when I think about the release process I think about for differ",
    "start": "128280",
    "end": "133560"
  },
  {
    "text": "stages I think about source build tests and production and I define continuous",
    "start": "133560",
    "end": "140849"
  },
  {
    "text": "integration as being really just those first two phases source and billed automatically kicking off the sort",
    "start": "140849",
    "end": "147090"
  },
  {
    "text": "kicking off a release when you have new source in your source code repository and then completing a build and then",
    "start": "147090",
    "end": "153330"
  },
  {
    "text": "test in production are not yet automated for teams that have adopted only continuous integration they're still",
    "start": "153330",
    "end": "159390"
  },
  {
    "text": "doing manual QA and manual deployments to production but then continuous",
    "start": "159390",
    "end": "164849"
  },
  {
    "text": "deployment is where you have the entire release process fully automated so the last time a person actually touches a",
    "start": "164849",
    "end": "172019"
  },
  {
    "text": "code change going to production is when they check it into the source code repository so let's look at what are the",
    "start": "172019",
    "end": "178410"
  },
  {
    "text": "actions that we're taking in each of these source in each of these phases in the source phase we're checking in",
    "start": "178410",
    "end": "184830"
  },
  {
    "text": "source code and hopefully we're doing peer review because if you're doing continuous deployment that's the last",
    "start": "184830",
    "end": "189959"
  },
  {
    "text": "time you're gonna see that code before it goes to production in the build phase compiling code doing unit tests doing",
    "start": "189959",
    "end": "197970"
  },
  {
    "text": "style checkers creating your container images and your function your function",
    "start": "197970",
    "end": "203130"
  },
  {
    "text": "deployment packages in the test phase as opposed to unit tests that we did in the",
    "start": "203130",
    "end": "208799"
  },
  {
    "text": "build phase this is where you're doing integration tests with other systems you might also be doing load testing UI",
    "start": "208799",
    "end": "215850"
  },
  {
    "text": "testing like selenium or security testing like penetration testing and then finally you get to production",
    "start": "215850",
    "end": "223290"
  },
  {
    "text": "you're deploying your new code into that production environment and monitoring that code for any errors that that new",
    "start": "223290",
    "end": "230639"
  },
  {
    "text": "code has introduced into production so after you've adopted continuous",
    "start": "230639",
    "end": "236130"
  },
  {
    "text": "deployment you've automated each of these steps what do you get from this what are the benefits of it so I looked",
    "start": "236130",
    "end": "243720"
  },
  {
    "start": "243000",
    "end": "243000"
  },
  {
    "text": "at this year state of DevOps report to look at what they found for the effects of CI CD this report survey is thousands",
    "start": "243720",
    "end": "251459"
  },
  {
    "text": "of developers across our industry and looks at what are the effects of some of the best practices we talked about here",
    "start": "251459",
    "end": "258150"
  },
  {
    "text": "at reinvent including CI CD so one of the first things that they found was",
    "start": "258150",
    "end": "263190"
  },
  {
    "text": "deployment frequency so how often you deploy - production goes way down from weekly",
    "start": "263190",
    "end": "270660"
  },
  {
    "text": "and monthly for teams that haven't adopted these best practices down to hourly and daily deployments the next",
    "start": "270660",
    "end": "278940"
  },
  {
    "text": "one was changed lead time so this is the time from when a developer checks in their source code to the time that it's",
    "start": "278940",
    "end": "285210"
  },
  {
    "text": "actually delivered to customers that it's in their customer hands into production this goes from 1 to 6 months",
    "start": "285210",
    "end": "292550"
  },
  {
    "text": "maybe 2 to 12 releases a year down to 1",
    "start": "292550",
    "end": "297990"
  },
  {
    "text": "to 7 days so customers are getting bug fixes and new features written by",
    "start": "297990",
    "end": "303539"
  },
  {
    "text": "developers and checked in in under a week and then the change failure rate so",
    "start": "303539",
    "end": "310139"
  },
  {
    "text": "this is when new code does go into production how often does it cause issues in production how often does it",
    "start": "310139",
    "end": "316919"
  },
  {
    "text": "have to be rolled back and how often does it block new changes from going through because you're trying to figure",
    "start": "316919",
    "end": "323220"
  },
  {
    "text": "out what went wrong in that last deployment this goes from about half",
    "start": "323220",
    "end": "328289"
  },
  {
    "text": "half of deployments for these teams cause issues in production and have to be rolled back down to zero to 15% this",
    "start": "328289",
    "end": "337409"
  },
  {
    "text": "one was the most unintuitive to me personally because you would think that as you automate all these things as",
    "start": "337409",
    "end": "344490"
  },
  {
    "text": "you're doing hourly or daily deployments you're breaking a lot more stuff right",
    "start": "344490",
    "end": "349680"
  },
  {
    "text": "but it's actually not true one of the great things is that as you start to deploy more and more often",
    "start": "349680",
    "end": "356490"
  },
  {
    "text": "you're also integrating more often as a team everything's going on to the master",
    "start": "356490",
    "end": "363120"
  },
  {
    "text": "branch and you're doing trunk based development but also you're not having the problem where as changes start to",
    "start": "363120",
    "end": "370710"
  },
  {
    "text": "batch up when you're doing these monthly or biannual deployments something in",
    "start": "370710",
    "end": "376349"
  },
  {
    "text": "there is definitely gonna go - gonna cause a problem right we all have bugs but as you start to release things more",
    "start": "376349",
    "end": "383099"
  },
  {
    "text": "frequently as soon as the developer has checked them in so lower the likelihood that that's actually going to happen and",
    "start": "383099",
    "end": "389310"
  },
  {
    "text": "it's way more easy to figure out what change actually caused problems in production so teams on the left-hand",
    "start": "389310",
    "end": "396659"
  },
  {
    "text": "side are shipping 200 thousand changes have been batching up",
    "start": "396659",
    "end": "402250"
  },
  {
    "text": "in their source code repository for months versus teams who were doing daily or hourly deployments where it's about",
    "start": "402250",
    "end": "409390"
  },
  {
    "text": "one maybe one the three changes per deployment it's really easy to pinpoint what went wrong one of the things that I",
    "start": "409390",
    "end": "417040"
  },
  {
    "text": "really love about this report is how it shows that these results are achievable",
    "start": "417040",
    "end": "423070"
  },
  {
    "text": "by so many teams so they found that almost half of software teams in our",
    "start": "423070",
    "end": "428170"
  },
  {
    "text": "industry had these results from adopting best practices like CI CD so this is not",
    "start": "428170",
    "end": "434290"
  },
  {
    "text": "secret sauce right anybody can adopt these practices and see these results in their organization so in order to show",
    "start": "434290",
    "end": "443110"
  },
  {
    "text": "you how to achieve some of these results and implement them for containers and and server lists I'm gonna walk you",
    "start": "443110",
    "end": "450160"
  },
  {
    "text": "through what I see as really the three pillars of releasing modern applications like server lists and container based",
    "start": "450160",
    "end": "456850"
  },
  {
    "text": "applications so continuous integration continuous deployment and then infrastructure is code so let's first",
    "start": "456850",
    "end": "464740"
  },
  {
    "text": "start with continuous integration so as a reminder this is where you've adopted",
    "start": "464740",
    "end": "470440"
  },
  {
    "text": "continuous integration so you've now automated source phase and build phase you're always automatically kicking off",
    "start": "470440",
    "end": "477610"
  },
  {
    "text": "a build when you check code into your source code repository so there's a couple of different goals here for teams",
    "start": "477610",
    "end": "484360"
  },
  {
    "text": "that are adopting this best practice one is that you're of course automatically kicking off a new release when new code",
    "start": "484360",
    "end": "490780"
  },
  {
    "text": "is checked in no one has to remember to do this on your team the second is that",
    "start": "490780",
    "end": "496300"
  },
  {
    "text": "you're building and testing code in a consistent repeatable environment so not",
    "start": "496300",
    "end": "502030"
  },
  {
    "text": "doing it on your laptop where anything could be installed doing it in a consistent repeatable environment third",
    "start": "502030",
    "end": "509410"
  },
  {
    "text": "is continually having an artifact that's ready for deployment it may not be QA tested yet it may not",
    "start": "509410",
    "end": "515800"
  },
  {
    "text": "have gone through integration tests yet but you always have something that's ready to go for going through the rest",
    "start": "515800",
    "end": "521919"
  },
  {
    "text": "of the process and test in production and then finally continuous integration",
    "start": "521919",
    "end": "527020"
  },
  {
    "text": "allows you to continually close that feedback loop back to the developer when the build fails",
    "start": "527020",
    "end": "532760"
  },
  {
    "text": "so you way more often have a green master branch that builds and runs unit",
    "start": "532760",
    "end": "539510"
  },
  {
    "text": "tests then if you're relying on these monthly or biannual releases to",
    "start": "539510",
    "end": "545630"
  },
  {
    "text": "production so for continuous integration I use AWS code pipeline code pipeline is",
    "start": "545630",
    "end": "552320"
  },
  {
    "text": "a continuous delivery service for fast and reliable application updates and I'll take a minute to really brag about",
    "start": "552320",
    "end": "559070"
  },
  {
    "text": "some of the performance updates that this team did this year they saw up to I",
    "start": "559070",
    "end": "564079"
  },
  {
    "text": "believe 80% reduction in pipeline overhead this year and so the code",
    "start": "564079",
    "end": "569870"
  },
  {
    "text": "pipeline pipelines are truly fast it's amazing to watch them speed through all",
    "start": "569870",
    "end": "575360"
  },
  {
    "text": "of their stages in the pipeline so include pipeline you model and visualize",
    "start": "575360",
    "end": "580760"
  },
  {
    "text": "your release process as a pipeline as different stages in that pipeline and then code pipeline will build test and",
    "start": "580760",
    "end": "588050"
  },
  {
    "text": "deploy your code every time there's new code change and I'll walk through some of the AWS integrations it has but it",
    "start": "588050",
    "end": "594680"
  },
  {
    "text": "also has third-party tools integrated so code pipeline has a few supported",
    "start": "594680",
    "end": "601310"
  },
  {
    "start": "598000",
    "end": "598000"
  },
  {
    "text": "sources so the things that it will automatically trigger a release from on the source code side you can pick a",
    "start": "601310",
    "end": "608839"
  },
  {
    "text": "branch in your source code repository in code commit or github and then you can",
    "start": "608839",
    "end": "613850"
  },
  {
    "text": "also store your code in s3 if you're doing maybe a dump from your on-prem",
    "start": "613850",
    "end": "620449"
  },
  {
    "text": "repository into s3 it'll pick up on any changes to an object or folder but I",
    "start": "620449",
    "end": "627199"
  },
  {
    "text": "feel like there's something missing here there's something missing for containers customers in the room and that is",
    "start": "627199",
    "end": "634120"
  },
  {
    "text": "triggering off of a docker image so many times we have maybe a base image or",
    "start": "634120",
    "end": "640130"
  },
  {
    "text": "sidecar image that we need to bundle into our application or build a new image on top of and I'm super happy to",
    "start": "640130",
    "end": "648319"
  },
  {
    "text": "announce we're doing launch number one AWS code pipeline now uses Amazon",
    "start": "648319",
    "end": "653480"
  },
  {
    "text": "Elastic container registry ECR as a pipeline source",
    "start": "653480",
    "end": "659439"
  },
  {
    "text": "so you now have a third option for what's going to trigger your pipeline and be pulled into that pipeline the",
    "start": "663180",
    "end": "669819"
  },
  {
    "text": "third one is to pick a docker tag so if you have a base image you can pick the release tag from that base image and the",
    "start": "669819",
    "end": "676389"
  },
  {
    "text": "registry and trigger the pipeline on that so what this looks like as I said",
    "start": "676389",
    "end": "682180"
  },
  {
    "text": "if you've got a base image what would typically happen is you've got your source code with your main application",
    "start": "682180",
    "end": "687339"
  },
  {
    "text": "docker file and then your ECR repository with that base image release tag and",
    "start": "687339",
    "end": "692920"
  },
  {
    "text": "both of those can fill it feed into the build stage so you can build your new",
    "start": "692920",
    "end": "698529"
  },
  {
    "text": "application docker image in the build and then deploy it later so there are",
    "start": "698529",
    "end": "705579"
  },
  {
    "text": "other inputs into our release process right other than source code and other than docker images and ECR so code",
    "start": "705579",
    "end": "712870"
  },
  {
    "text": "pipeline has a couple of options for triggering the release on these other inputs into our release process",
    "start": "712870",
    "end": "718959"
  },
  {
    "text": "automatically one is Amazon Cloud watch events any cloud watch event can",
    "start": "718959",
    "end": "724269"
  },
  {
    "text": "actually trigger a pipeline you can do a nightly the release with a scheduled cron job or you can pay attention to any",
    "start": "724269",
    "end": "731439"
  },
  {
    "text": "other service for example AWS health events that are gonna notify you about Fargate platform retirements and then",
    "start": "731439",
    "end": "739000"
  },
  {
    "text": "for third-party services that you might be using code pipeline supports web hooks so services like docker hub quai",
    "start": "739000",
    "end": "746560"
  },
  {
    "text": "and artifactory if you've got a docker image in docker hub that you need to",
    "start": "746560",
    "end": "751600"
  },
  {
    "text": "trigger the pipeline off of or artifactory if for both server lists and containers you've got some libraries",
    "start": "751600",
    "end": "758079"
  },
  {
    "text": "that you want to trigger your pipeline on when new versions are released you can get a web hook URL from code",
    "start": "758079",
    "end": "764529"
  },
  {
    "text": "pipeline and then plug it into any of these third parties or anything else that supports a web hook and that will",
    "start": "764529",
    "end": "770620"
  },
  {
    "text": "automatically trigger your pipeline so let's move on to the build phase of",
    "start": "770620",
    "end": "776620"
  },
  {
    "text": "continuous integration for that I use a tube us code build it's a fully managed",
    "start": "776620",
    "end": "781810"
  },
  {
    "text": "build service that compiles code runs tests like your unit tests or even integration tests and then produces",
    "start": "781810",
    "end": "789130"
  },
  {
    "text": "software packages like those container images like those lambda deployment packages",
    "start": "789130",
    "end": "794610"
  },
  {
    "text": "what I liked about it is that it scales continuously and processes multiple",
    "start": "794610",
    "end": "799780"
  },
  {
    "text": "builds concurrently so you don't have to worry about a build queue you also don't have to worry about any build servers to",
    "start": "799780",
    "end": "806320"
  },
  {
    "text": "manage it is also server lists and you pay by the minute for only the compute resources that you use and then to",
    "start": "806320",
    "end": "813640"
  },
  {
    "text": "complete the feedback loop back to your developers you can monitor builds through claw watch events or code",
    "start": "813640",
    "end": "819430"
  },
  {
    "text": "pipeline will monitor the build for you there's a couple of features that I wanted to call out specifically for",
    "start": "819430",
    "end": "826090"
  },
  {
    "text": "containers and serverless customers so each build runs in a new container for a",
    "start": "826090",
    "end": "831670"
  },
  {
    "text": "consistent immutable environment so that's how it's different from our laptop or from a shared build server",
    "start": "831670",
    "end": "838920"
  },
  {
    "text": "every new build is in a brand-new fresh environment and then both docker and the",
    "start": "838920",
    "end": "845680"
  },
  {
    "text": "AWS CLI are installed in every build environment that's provided by code build and then you can also provide your",
    "start": "845680",
    "end": "853180"
  },
  {
    "text": "own custom build environment if you've got a custom mix of tools that you need to use to build and test your code and",
    "start": "853180",
    "end": "860050"
  },
  {
    "text": "then produce that software package you can create a docker image based on that",
    "start": "860050",
    "end": "865470"
  },
  {
    "text": "so in code build the way that you specify what commands constitute your",
    "start": "865470",
    "end": "870520"
  },
  {
    "text": "build what needs to happen to compile your code or run your unit tests or produce your software package is to",
    "start": "870520",
    "end": "876970"
  },
  {
    "text": "write a build spec so this build spec is an example for lambda that you would put in your source code repository and here",
    "start": "876970",
    "end": "884500"
  },
  {
    "text": "I'm doing a node function so I'm doing NPM CIS who install all of my dependencies NPM tests to run my unit",
    "start": "884500",
    "end": "891010"
  },
  {
    "text": "tests and then I'm doing app a double us confirmation packaged to package up my",
    "start": "891010",
    "end": "896470"
  },
  {
    "text": "server list application and then this is an example for docker so this is all the",
    "start": "896470",
    "end": "903040"
  },
  {
    "text": "commands that you would normally run on your laptop these should be pretty familiar to the containers crowd docker",
    "start": "903040",
    "end": "908860"
  },
  {
    "text": "build tag and push into ECR so it's really anything that you can do on your",
    "start": "908860",
    "end": "914200"
  },
  {
    "text": "laptop anything that you're doing to build your code today you can run in code build so let's review the",
    "start": "914200",
    "end": "922510"
  },
  {
    "start": "921000",
    "end": "921000"
  },
  {
    "text": "continuous integration goals one automatically kick off a new release",
    "start": "922510",
    "end": "927559"
  },
  {
    "text": "when new code is checked in we can do that with code pipeline to build and",
    "start": "927559",
    "end": "932629"
  },
  {
    "text": "test your code in a consistent repeatable environment we can do that and could build with a new docker",
    "start": "932629",
    "end": "938149"
  },
  {
    "text": "container every time third continually have an artifact ready",
    "start": "938149",
    "end": "943309"
  },
  {
    "text": "for deployment so in your code build build you would produce that docker image push it in to ECR or have a",
    "start": "943309",
    "end": "950869"
  },
  {
    "text": "serverless application template that's ready to go and finally continually close the",
    "start": "950869",
    "end": "956059"
  },
  {
    "text": "feedback loop when the build fails which you can do in both code build and code pipeline so let's take a look at now we",
    "start": "956059",
    "end": "964069"
  },
  {
    "text": "finished continuous integration let's take a look at continuous deployment so",
    "start": "964069",
    "end": "969889"
  },
  {
    "text": "in continuous deployment as a refresher this is source build test and production",
    "start": "969889",
    "end": "975740"
  },
  {
    "text": "are all completely automated now so let's look at the goals of this pillar",
    "start": "975740",
    "end": "981069"
  },
  {
    "text": "number one is to automatically deploy new changes to staging environments for testing so in addition to all of the",
    "start": "981069",
    "end": "988519"
  },
  {
    "text": "goals that we saw for continuous integration now we need to go deploy that artifact that's continually ready",
    "start": "988519",
    "end": "994999"
  },
  {
    "text": "for us to deploy to is to deploy to production safely without impacting",
    "start": "994999",
    "end": "1000519"
  },
  {
    "text": "customers there's a lot of fear around adopting continuous deployment and we",
    "start": "1000519",
    "end": "1006100"
  },
  {
    "text": "want to make sure that each and every deployment is as safe as we can make it without any person interacting with it",
    "start": "1006100",
    "end": "1012579"
  },
  {
    "text": "and third is deliver to customers faster this is where we really start to see",
    "start": "1012579",
    "end": "1018639"
  },
  {
    "text": "some of those results in deployment lead time deployment frequency and change",
    "start": "1018639",
    "end": "1024250"
  },
  {
    "text": "failure rate that we saw statistics for earlier so for deploying to staging",
    "start": "1024250",
    "end": "1031329"
  },
  {
    "start": "1028000",
    "end": "1028000"
  },
  {
    "text": "environments and production environments I use AWS code deploy Co deploy automates code deployments to any",
    "start": "1031329",
    "end": "1037688"
  },
  {
    "text": "instance and to lambda it handles all the complexity of updating your",
    "start": "1037689",
    "end": "1042880"
  },
  {
    "text": "applications you don't have to write a lot of code to do that and it avoids downtime during application deployment",
    "start": "1042880",
    "end": "1049750"
  },
  {
    "text": "and it rolls back automatically if any failure is detected so it's say",
    "start": "1049750",
    "end": "1055010"
  },
  {
    "text": "for automating deployments to your production system Soko deploy deploys to",
    "start": "1055010",
    "end": "1061010"
  },
  {
    "text": "easy to lambda and even on-premise instances so let's take a look at for",
    "start": "1061010",
    "end": "1067310"
  },
  {
    "text": "what this looks like for lambda so there's a few unique lambda features that Co deploy uses one is that it uses",
    "start": "1067310",
    "end": "1075080"
  },
  {
    "text": "lambda weighted aliases to shift traffic to your new function code so you can use",
    "start": "1075080",
    "end": "1081440"
  },
  {
    "text": "canary deployments so something like shift 10% of my traffic to live traffic",
    "start": "1081440",
    "end": "1087620"
  },
  {
    "text": "for 10 minutes watch alarms and make sure that nothing's going wrong and then",
    "start": "1087620",
    "end": "1092720"
  },
  {
    "text": "shift the rest this is all completely automated by code deploy so there's no person making this decision along the",
    "start": "1092720",
    "end": "1099050"
  },
  {
    "text": "way or you can choose something like linear where you want to shift 10% more of your traffic every 10 minutes until",
    "start": "1099050",
    "end": "1105620"
  },
  {
    "text": "it's done kotipalli also supports what's called validation hooks at each stage of",
    "start": "1105620",
    "end": "1113240"
  },
  {
    "text": "the deployment you can run this lambda function hook and test that your new",
    "start": "1113240",
    "end": "1118340"
  },
  {
    "text": "function code is working as you expected in this new production environment one",
    "start": "1118340",
    "end": "1124640"
  },
  {
    "text": "of the most exciting things is fast roll back because this is weighted aliases your function code is already still",
    "start": "1124640",
    "end": "1131090"
  },
  {
    "text": "there in lambda from v1 so you can really quickly roll back just dial back",
    "start": "1131090",
    "end": "1136790"
  },
  {
    "text": "to zero for the new function code and go all the way back to 100% for the old function code and then finally code",
    "start": "1136790",
    "end": "1144890"
  },
  {
    "text": "deploy keeps track of the full history of your deployments and then also integrates with how much events and SNS",
    "start": "1144890",
    "end": "1151910"
  },
  {
    "text": "for giving you an update on your deployment status so this is an example",
    "start": "1151910",
    "end": "1158600"
  },
  {
    "text": "of what you had add to your server list application template for lambda you can",
    "start": "1158600",
    "end": "1164180"
  },
  {
    "text": "see the deployment preference Clause there so here I have configured the canary 10% for 10 minutes",
    "start": "1164180",
    "end": "1171790"
  },
  {
    "text": "deployment type and then I'm also watching a clutch alarm I'm having code",
    "start": "1171790",
    "end": "1177410"
  },
  {
    "text": "deploy watch a claw watch alarm for any errors that I've introduced into my function and then some hooks to before",
    "start": "1177410",
    "end": "1185570"
  },
  {
    "text": "traffic is actually shifted to customers invoke that function make sure it's correctly running in my environment so",
    "start": "1185570",
    "end": "1193419"
  },
  {
    "start": "1193000",
    "end": "1193000"
  },
  {
    "text": "this let's walk through an example of what this actually looks like typically",
    "start": "1193419",
    "end": "1198769"
  },
  {
    "text": "it would start out with let's say you have a lambda function behind an API gateway and you have a hundred percent",
    "start": "1198769",
    "end": "1203870"
  },
  {
    "text": "of your traffic going to this v1 function code behind a weighted alias called live so what you would do when",
    "start": "1203870",
    "end": "1212960"
  },
  {
    "text": "you start the deployment is to upload this new function code and at this point you start the deployment and code deploy",
    "start": "1212960",
    "end": "1219710"
  },
  {
    "text": "configures zero percent of your traffic is going to that new function code and a hundred percent is going to the old",
    "start": "1219710",
    "end": "1226700"
  },
  {
    "text": "function code and at this point this is when you have the opportunity to run this validation hook to actually invoke",
    "start": "1226700",
    "end": "1233000"
  },
  {
    "text": "that v2 function and make sure that you get the expected results back from it so",
    "start": "1233000",
    "end": "1239779"
  },
  {
    "text": "then once you've shifted 10 percent of the traffic for this canary deployment you still have 90 percent of your",
    "start": "1239779",
    "end": "1245659"
  },
  {
    "text": "traffic going to the old code you can have good to Polly wait for 10 minutes in the entire time it will monitor your",
    "start": "1245659",
    "end": "1252500"
  },
  {
    "text": "cloud watch alarms if at any time they go into alarm state it'll roll back in seconds to the old code and then once",
    "start": "1252500",
    "end": "1262220"
  },
  {
    "text": "that 10 minutes this is done code deploy will shift the rest of the traffic to v2 and now you've completed the deployment",
    "start": "1262220",
    "end": "1268669"
  },
  {
    "text": "and nothing is going to the old function code but you know I said code deploy",
    "start": "1268669",
    "end": "1274279"
  },
  {
    "text": "deploys to ec2 lambda on premise instances again it feels like there's",
    "start": "1274279",
    "end": "1279559"
  },
  {
    "text": "something missing for containers so I'm super happy to announce feature launch number two a taboos Co deploy now",
    "start": "1279559",
    "end": "1287269"
  },
  {
    "text": "automates blue/green deployments to a debase Fargate and Amazon ECS",
    "start": "1287269",
    "end": "1293740"
  },
  {
    "start": "1297000",
    "end": "1297000"
  },
  {
    "text": "let me walk you through some of the great features that we have here for Bluegreen for containers the first step",
    "start": "1297490",
    "end": "1304610"
  },
  {
    "text": "that code deploy is going to do is provision new green tasks with your new image and then it's gonna flip the",
    "start": "1304610",
    "end": "1311120"
  },
  {
    "text": "traffic at the load balancer once all of those tasks are ready and are passing health checks for the code deploy",
    "start": "1311120",
    "end": "1318830"
  },
  {
    "text": "integration code deploy again supports validation hooks so again you can run a lambda function and make a sample",
    "start": "1318830",
    "end": "1326060"
  },
  {
    "text": "request to this green fleet make sure that you get the response back that you want hopefully a status code 200 before",
    "start": "1326060",
    "end": "1334250"
  },
  {
    "text": "any live traffic is going to that new fleet then of course there's fast",
    "start": "1334250",
    "end": "1340190"
  },
  {
    "text": "rollback within seconds because it keeps the blue tasks around for a period of",
    "start": "1340190",
    "end": "1345350"
  },
  {
    "text": "time that you configure if there's any problems with the green fleet once you once you have live traffic going to it",
    "start": "1345350",
    "end": "1352040"
  },
  {
    "text": "you can very quickly roll back to through a load balancer flip to put all",
    "start": "1352040",
    "end": "1357770"
  },
  {
    "text": "of the live traffic back on the blue fleet again you can monitor status",
    "start": "1357770",
    "end": "1362900"
  },
  {
    "text": "deployment status with code deploy and they list the full deployment history for your ECS service there's also two",
    "start": "1362900",
    "end": "1371720"
  },
  {
    "text": "things that go along with this launch some little bonuses for encode pipeline",
    "start": "1371720",
    "end": "1377120"
  },
  {
    "text": "there's a new action type new deployment action called code deploy ECS to",
    "start": "1377120",
    "end": "1382850"
  },
  {
    "text": "orchestrate all of this for you to start the deployment to register a new task definition in the ECS and then there's",
    "start": "1382850",
    "end": "1389630"
  },
  {
    "text": "also a new command in the AWS CLI for people like jenkins users or other",
    "start": "1389630",
    "end": "1394700"
  },
  {
    "text": "deployment continuous delivery users called AWS ECS deploy so this is a",
    "start": "1394700",
    "end": "1402080"
  },
  {
    "text": "single line command for registering your task definition kicking off the deployment and then monitoring the",
    "start": "1402080",
    "end": "1408650"
  },
  {
    "text": "deployment and returning an exit code if it fails so the way that you instruct",
    "start": "1408650",
    "end": "1416450"
  },
  {
    "text": "code deploy on what it needs to do in this deployment is to create an app spec so in addition to your ECS task",
    "start": "1416450",
    "end": "1423320"
  },
  {
    "text": "definition in your repository you would have an app spec file in your repository as well",
    "start": "1423320",
    "end": "1429090"
  },
  {
    "text": "and that would describe what is the task definition that I'm supposed to deploy what is the load balancer that you want",
    "start": "1429090",
    "end": "1436170"
  },
  {
    "text": "me to do the traffic flip on and then what are all of the hooks that you want me to invoke to test out this new fleet",
    "start": "1436170",
    "end": "1443670"
  },
  {
    "text": "of containers so let me walk you through a visualization of what this looks like",
    "start": "1443670",
    "end": "1449460"
  },
  {
    "text": "when could deploy orchestrates a Bluegreen deployment typically this is your setup today if you're using ECS or",
    "start": "1449460",
    "end": "1456720"
  },
  {
    "text": "Fargate you have an application load balancer then you have a production traffic listener on port 80 you have a",
    "start": "1456720",
    "end": "1463770"
  },
  {
    "text": "target group and then you have a hundred percent of your profit going to this far gate service in order to get set up for",
    "start": "1463770",
    "end": "1471780"
  },
  {
    "text": "code deploy blue green you would add a second test traffic listener let's say",
    "start": "1471780",
    "end": "1478110"
  },
  {
    "text": "on a different port or even on a different path in your application load balancer and then add a second target",
    "start": "1478110",
    "end": "1484800"
  },
  {
    "text": "group as well so what happens when you create this deployment is Kuta filiz",
    "start": "1484800",
    "end": "1490410"
  },
  {
    "text": "going to instruct ECS to spin up a new set of green tasks with your new",
    "start": "1490410",
    "end": "1495960"
  },
  {
    "text": "container image at this point a hundred percent of production traffic is still",
    "start": "1495960",
    "end": "1501690"
  },
  {
    "text": "going to the blue tasks while all of those green tasks are provisioning once",
    "start": "1501690",
    "end": "1507120"
  },
  {
    "text": "they pass all of their health checks in the green fleet then code deploy is going to add a route from the test",
    "start": "1507120",
    "end": "1513660"
  },
  {
    "text": "traffic listener on let's say port 9000 to that second target group and put all",
    "start": "1513660",
    "end": "1519300"
  },
  {
    "text": "of those green tasks behind that target group so now what you have is test traffic you can hit port 9000 of your",
    "start": "1519300",
    "end": "1526740"
  },
  {
    "text": "application load balancer and run real requests end to end through your load balancer down to those green tasks make",
    "start": "1526740",
    "end": "1534300"
  },
  {
    "text": "sure you get your expected result status code 200 and then at this point a",
    "start": "1534300",
    "end": "1540060"
  },
  {
    "text": "hundred percent of prod traffic is still going to the blue tasks while you validate this green task fleet finally",
    "start": "1540060",
    "end": "1547980"
  },
  {
    "text": "once all of that is done and once you've had your validation hooks run code deploy is going to flip the traffic from",
    "start": "1547980",
    "end": "1554610"
  },
  {
    "text": "the production traffic listener down to that second target group so at this point within seconds you have zero",
    "start": "1554610",
    "end": "1562290"
  },
  {
    "text": "of your prophec going to the blue tasks and a hundred percent going to the green",
    "start": "1562290",
    "end": "1567630"
  },
  {
    "text": "tasks at this point you can configure a wait time of as little as a couple of",
    "start": "1567630",
    "end": "1573360"
  },
  {
    "text": "minutes to monitor alarms or you can do multiple hours and throughout that entire period code deploy will monitor",
    "start": "1573360",
    "end": "1580410"
  },
  {
    "text": "your alarms and roll back automatically if there's any issues and then finally",
    "start": "1580410",
    "end": "1586500"
  },
  {
    "text": "once that wait time is done and the deployment is finishing ECS will spin down all of those blue tasks and leave",
    "start": "1586500",
    "end": "1593820"
  },
  {
    "text": "you with just that green task fleet one of the things I want to walk through in",
    "start": "1593820",
    "end": "1600270"
  },
  {
    "start": "1597000",
    "end": "1597000"
  },
  {
    "text": "terms of deployment safety that's really important for containers is tagging for",
    "start": "1600270",
    "end": "1605490"
  },
  {
    "text": "deployment safety so it's really important because in ECS and in other",
    "start": "1605490",
    "end": "1610620"
  },
  {
    "text": "orchestrators docker tags are resolved every time an individual container starts and that doesn't just happen a",
    "start": "1610620",
    "end": "1618210"
  },
  {
    "text": "deployment right that can happen during scale-out when you're scaling up your service and then it can also happen if",
    "start": "1618210",
    "end": "1625650"
  },
  {
    "text": "you're having a scheduled maintenance event or a container dies for whatever reason and gets replaced by ECS so if",
    "start": "1625650",
    "end": "1634140"
  },
  {
    "text": "you're deploying a latest tag or a prod tag what can actually happen is you can end up with untested code and production",
    "start": "1634140",
    "end": "1641130"
  },
  {
    "text": "so let me walk you through how that happens this is an example where a my",
    "start": "1641130",
    "end": "1646530"
  },
  {
    "text": "task definition I'm using the latest tag and I've spun up my Fargate service using that and I have this image whose",
    "start": "1646530",
    "end": "1653910"
  },
  {
    "text": "ID is 1 1 1 1 but is currently tagged to lead us so I have a build that pushes a",
    "start": "1653910",
    "end": "1661350"
  },
  {
    "text": "new latest tag and this is now 2 2 2 2 2 and nothing's changed with my service",
    "start": "1661350",
    "end": "1667050"
  },
  {
    "text": "right all my build did was push in a new image totally safe now my Fargate",
    "start": "1667050",
    "end": "1673770"
  },
  {
    "text": "service in production has a scale-up event I'm handling more traffic and all",
    "start": "1673770",
    "end": "1679440"
  },
  {
    "text": "of a sudden I'm now running this latest tag this new one in production before",
    "start": "1679440",
    "end": "1684960"
  },
  {
    "text": "I've had a chance to run my integration tests potentially before I've had a chance to run unit tests if I pushed",
    "start": "1684960",
    "end": "1690510"
  },
  {
    "text": "before that and so now I've got this mixed bag of tasks running different versions of",
    "start": "1690510",
    "end": "1696240"
  },
  {
    "text": "code and my production environment so one of the things I recommend to teams",
    "start": "1696240",
    "end": "1701550"
  },
  {
    "text": "is to use immutable tags something like a build ID that's unlikely to occur",
    "start": "1701550",
    "end": "1706830"
  },
  {
    "text": "again or even to use the image ID that you see on your if you run docker images",
    "start": "1706830",
    "end": "1712620"
  },
  {
    "text": "that unique image ID which is actually a sha-256 digest for that particular image",
    "start": "1712620",
    "end": "1718470"
  },
  {
    "text": "that particular binary so these are some examples these slides will be published",
    "start": "1718470",
    "end": "1725160"
  },
  {
    "text": "on SlideShare that you can use in your code build build spec or in your other build system to generate that unique",
    "start": "1725160",
    "end": "1732960"
  },
  {
    "text": "build ID or to record that unique sha-256 digest to put in your task",
    "start": "1732960",
    "end": "1739050"
  },
  {
    "text": "definition so let's look through what happens when I'm using build ID for my",
    "start": "1739050",
    "end": "1744540"
  },
  {
    "text": "tasks for my tag so here I have a build that pushes a new image tagged with my",
    "start": "1744540",
    "end": "1751560"
  },
  {
    "text": "new build ID this is a unique UUID let's say and so those two build those two tags don't",
    "start": "1751560",
    "end": "1759000"
  },
  {
    "text": "conflict with each other and in production I'm still running that first build tags that doesn't change even",
    "start": "1759000",
    "end": "1766170"
  },
  {
    "text": "though I've had this new build happen and then once I actually do a deployment that is the time at which the tasks",
    "start": "1766170",
    "end": "1773310"
  },
  {
    "text": "definition gets registered in this service and all of my containers get replaced with my new build image that's",
    "start": "1773310",
    "end": "1780150"
  },
  {
    "text": "already been through a staging environment and through integration tests so let's review the continuous",
    "start": "1780150",
    "end": "1786690"
  },
  {
    "start": "1784000",
    "end": "1784000"
  },
  {
    "text": "deployment goals number one automatically deploy new changes to staging environments for testing you can",
    "start": "1786690",
    "end": "1793710"
  },
  {
    "text": "do that in code pipeline by simply adding a staging stage and environment",
    "start": "1793710",
    "end": "1798870"
  },
  {
    "text": "in your pipeline second is deploying to production safely without impacting",
    "start": "1798870",
    "end": "1804420"
  },
  {
    "text": "customers the code deploys safety features that I talked about validation hooks canary deployments Bluegreen",
    "start": "1804420",
    "end": "1811260"
  },
  {
    "text": "deployments fast roll backs and automatic alarm monitoring are all",
    "start": "1811260",
    "end": "1816450"
  },
  {
    "text": "really great tools for you to use in minimizing impacted customers in production and then finally all of this",
    "start": "1816450",
    "end": "1824190"
  },
  {
    "text": "getting people out of the way and automating it all with pipeline helps us to deliver to",
    "start": "1824190",
    "end": "1829850"
  },
  {
    "text": "customers faster which is really what we're trying to get out of this so now",
    "start": "1829850",
    "end": "1836270"
  },
  {
    "text": "let's look at we looked at continuous deployment now let's look at infrastructure is code",
    "start": "1836270",
    "end": "1841310"
  },
  {
    "text": "haven't really talked about infrastructure as code yet I actually see infrastructure as code is very",
    "start": "1841310",
    "end": "1847970"
  },
  {
    "start": "1845000",
    "end": "1845000"
  },
  {
    "text": "similar to continuous deployment it covers the source phase you're checking in your infrastructure code into your",
    "start": "1847970",
    "end": "1854570"
  },
  {
    "text": "source code repository it may go through a build phase to prepare your infrastructure as code template for",
    "start": "1854570",
    "end": "1861200"
  },
  {
    "text": "deployment and then it's getting deployed into a staging environment and tests and finally getting deployed to",
    "start": "1861200",
    "end": "1867410"
  },
  {
    "text": "production so these are some goals that I have for confer infrastructure is code",
    "start": "1867410",
    "end": "1873170"
  },
  {
    "text": "on my teams at Amazon one is to make infrastructure changes repeatable and",
    "start": "1873170",
    "end": "1879080"
  },
  {
    "text": "predictable and the reason for that is if we're deploying into our staging environment we want to know that the",
    "start": "1879080",
    "end": "1885530"
  },
  {
    "text": "same exact thing is going to happen when we deploy this to production because we want to predict if anything's gonna go",
    "start": "1885530",
    "end": "1891470"
  },
  {
    "text": "wrong that's the whole point of the staging environment and so if we're making ad hoc changes to both of these",
    "start": "1891470",
    "end": "1897800"
  },
  {
    "text": "environments it's really hard to predict what's gonna happen what the impact to production is going to be when we make these infrastructure",
    "start": "1897800",
    "end": "1904790"
  },
  {
    "text": "changes their second is to release infrastructure changes using the exact",
    "start": "1904790",
    "end": "1910640"
  },
  {
    "text": "same tools as code changes and by that I mean storing them in the source code repository doing peer review like pull",
    "start": "1910640",
    "end": "1918170"
  },
  {
    "text": "requests on them sending them out through a pipeline like in code pipeline and having the same staging and test",
    "start": "1918170",
    "end": "1924830"
  },
  {
    "text": "environments and then also running the same integration test in the staging",
    "start": "1924830",
    "end": "1929930"
  },
  {
    "text": "environment to validate the changes that the infrastructure has made and finally",
    "start": "1929930",
    "end": "1935000"
  },
  {
    "text": "I keep referring to staging environment it's important to replicate production environments in a staging environment to",
    "start": "1935000",
    "end": "1942170"
  },
  {
    "text": "enable continuous testing let's dig into what I mean by continuous testing I",
    "start": "1942170",
    "end": "1948070"
  },
  {
    "start": "1946000",
    "end": "1946000"
  },
  {
    "text": "think that for especially for containers and for serverless architectures they're",
    "start": "1948070",
    "end": "1953750"
  },
  {
    "text": "so complex right we're adopting microservices there's a bunch of",
    "start": "1953750",
    "end": "1958820"
  },
  {
    "text": "services and a bunch of manage sir is on top of that that we're calling out to we're probably using cues and step",
    "start": "1958820",
    "end": "1966110"
  },
  {
    "text": "functions and manage databases and then we've got a bunch of micro-services that",
    "start": "1966110",
    "end": "1971779"
  },
  {
    "text": "are talking to each other and so unit tests where we're mocking out dependencies and we're doing static",
    "start": "1971779",
    "end": "1977990"
  },
  {
    "text": "analysis it's still really hard to figure out how is this going to act in production how is it going to act when",
    "start": "1977990",
    "end": "1984649"
  },
  {
    "text": "this other micro service calls me and what assumptions am i making about the",
    "start": "1984649",
    "end": "1989750"
  },
  {
    "text": "micro service that I need to call or the managed service that I need to call so",
    "start": "1989750",
    "end": "1995090"
  },
  {
    "text": "what I've been thinking about more and more often is we really need to validate the entire environment as we're",
    "start": "1995090",
    "end": "2001360"
  },
  {
    "text": "releasing these serverless applications and container based applications into production so one is to run integration",
    "start": "2001360",
    "end": "2009549"
  },
  {
    "text": "tests in a staging environment against real dependencies and real environments I do load testing in a real environment",
    "start": "2009549",
    "end": "2016899"
  },
  {
    "text": "to understand how your lambda function or your infrastructure around that",
    "start": "2016899",
    "end": "2022720"
  },
  {
    "text": "lambda function or container behaves under load doing penetration testing to",
    "start": "2022720",
    "end": "2028330"
  },
  {
    "text": "make sure you haven't leaked any secrets into your staging environment that show up in the environment in lambda or in in",
    "start": "2028330",
    "end": "2035679"
  },
  {
    "text": "Fargate and then finally monitoring to test the impact of deployments on an",
    "start": "2035679",
    "end": "2042279"
  },
  {
    "text": "environment what I see so many times on my teams at Amazon is that deployments",
    "start": "2042279",
    "end": "2048099"
  },
  {
    "text": "are impactful we don't do things like graceful shutdown where we're draining",
    "start": "2048099",
    "end": "2054240"
  },
  {
    "text": "requests that are currently going to a function or a container and so you end",
    "start": "2054240",
    "end": "2059530"
  },
  {
    "text": "up during a deployment with a whole bunch of draft requests and so in a staging environment we're able to",
    "start": "2059530",
    "end": "2065560"
  },
  {
    "text": "monitor that with the same alarms that we have in production to catch any of those problems early in our pipeline so",
    "start": "2065560",
    "end": "2074589"
  },
  {
    "text": "let's look at what it means to use the exact same tools with continuous in a",
    "start": "2074589",
    "end": "2079780"
  },
  {
    "text": "continuous deployment and using them for infrastructure as code so this is an",
    "start": "2079780",
    "end": "2084878"
  },
  {
    "text": "example of what your pipeline overall would look like for continuous deployment of infrastructure one is you",
    "start": "2084879",
    "end": "2092050"
  },
  {
    "text": "would have a source code repository and a master branch that you would check these changes into and then in the build stage",
    "start": "2092050",
    "end": "2098380"
  },
  {
    "text": "you might prepare a template and I'll show you a couple of different tools where you need to prepare a template and",
    "start": "2098380",
    "end": "2103770"
  },
  {
    "text": "then you would have this test stage where you're deploying into this staging environment if you're using code deploy",
    "start": "2103770",
    "end": "2110320"
  },
  {
    "text": "that means creating and executing a change set and then you would do the exact same thing for production the",
    "start": "2110320",
    "end": "2116770"
  },
  {
    "text": "exact same templates are being deployed into your staging environment and are then being deployed into your production",
    "start": "2116770",
    "end": "2122830"
  },
  {
    "text": "environment so let's walk through a couple of different tools for infrastructures code that are specific",
    "start": "2122830",
    "end": "2129640"
  },
  {
    "start": "2125000",
    "end": "2125000"
  },
  {
    "text": "to serverless and containers one is the server this application model for lambda",
    "start": "2129640",
    "end": "2135160"
  },
  {
    "text": "users this is an open source framework for building serverless applications on",
    "start": "2135160",
    "end": "2140170"
  },
  {
    "text": "AWS you can think of this as kind of like a shorthand syntax for expressing",
    "start": "2140170",
    "end": "2146320"
  },
  {
    "text": "your functions that are part of your application your ap is that are coming through API",
    "start": "2146320",
    "end": "2151630"
  },
  {
    "text": "gateway your databases that are managed and your event source mappings and what",
    "start": "2151630",
    "end": "2157690"
  },
  {
    "text": "happens when you deploy these Sam templates is that it all gets expanded",
    "start": "2157690",
    "end": "2163330"
  },
  {
    "text": "out into CloudFormation syntax so because it's based on cloud formation",
    "start": "2163330",
    "end": "2168700"
  },
  {
    "text": "provisioning it supports all the AWS CloudFormation resource types out of the box automatically so this is an example",
    "start": "2168700",
    "end": "2177700"
  },
  {
    "text": "of a Sam template and it's kind of showing that how it's a it's a shorthand syntax for your service applications so",
    "start": "2177700",
    "end": "2185380"
  },
  {
    "text": "I'm expressing a serverless function and I'm expressing the API that this needs",
    "start": "2185380",
    "end": "2190780"
  },
  {
    "text": "to be reached at in an API gateway but notice I don't have to specify that API gateway and then lower down you'll see",
    "start": "2190780",
    "end": "2198550"
  },
  {
    "text": "serverless simple table so these are a pretty pretty short few lines of Yama",
    "start": "2198550",
    "end": "2205360"
  },
  {
    "text": "that actually expand out into a lambda function an API gateway a dynamodb table",
    "start": "2205360",
    "end": "2212590"
  },
  {
    "text": "and then all the I am roles and events worse mappings that hook all of this up together so you can use the Sam CLI to",
    "start": "2212590",
    "end": "2221530"
  },
  {
    "start": "2219000",
    "end": "2219000"
  },
  {
    "text": "package and deploy Sam templates I'm really excited last week",
    "start": "2221530",
    "end": "2227450"
  },
  {
    "text": "we launched Sam build command so this is especially great for Python lambda",
    "start": "2227450",
    "end": "2233240"
  },
  {
    "text": "function users it makes sure that if you have any native dependencies or native extensions as part of your Python",
    "start": "2233240",
    "end": "2239990"
  },
  {
    "text": "application and make sure that you're building those native extensions against the exact right versions of libraries",
    "start": "2239990",
    "end": "2246310"
  },
  {
    "text": "for the function environment and lambda so it's really a great way to package up",
    "start": "2246310",
    "end": "2253010"
  },
  {
    "text": "those Python functions for lambda and then finally you would use Sam package or Sam deploy what this looks like in",
    "start": "2253010",
    "end": "2260480"
  },
  {
    "text": "code pipeline is that Sam package and Sam deploy are wrappers around cloud formation change sets and so you would",
    "start": "2260480",
    "end": "2267560"
  },
  {
    "text": "still use the confirmation actions input pipeline with any Sam application but",
    "start": "2267560",
    "end": "2273890"
  },
  {
    "text": "then in Jenkins it's really easy to use the Sam CLI plugin for Jenkins install",
    "start": "2273890",
    "end": "2279710"
  },
  {
    "text": "that in your Jenkins server and deploy to lambda with serverless applications",
    "start": "2279710",
    "end": "2285250"
  },
  {
    "start": "2285000",
    "end": "2285000"
  },
  {
    "text": "I'm really excited for containers users with for the cloud development kit",
    "start": "2285250",
    "end": "2291020"
  },
  {
    "text": "called the cdk so this is another open source framework but this time instead",
    "start": "2291020",
    "end": "2296150"
  },
  {
    "text": "of yem all it defines cloud infrastructure in typescript so it's literally infrastructure as code it",
    "start": "2296150",
    "end": "2302920"
  },
  {
    "text": "provides a library of higher-level resource types because this is a",
    "start": "2302920",
    "end": "2308420"
  },
  {
    "text": "programming language these are classes they call them constructs but they're",
    "start": "2308420",
    "end": "2313940"
  },
  {
    "text": "higher level abstractions on top of cloud formation so they have all of these aid abuse best practices built-in",
    "start": "2313940",
    "end": "2320510"
  },
  {
    "text": "by default for how to configure these resource types together and then they're just packaged as NPM modules that you",
    "start": "2320510",
    "end": "2327650"
  },
  {
    "text": "can consume in your application that's using infrastructure as code so it",
    "start": "2327650",
    "end": "2332750"
  },
  {
    "text": "provisions all the resources with confirmation you can think of this as generating or compiling down to cloud",
    "start": "2332750",
    "end": "2340220"
  },
  {
    "text": "formation from that typescript and because it's using cloud formation it supports all of the cloud formation",
    "start": "2340220",
    "end": "2346820"
  },
  {
    "text": "resource types out of the box automatically this is an example of a",
    "start": "2346820",
    "end": "2352370"
  },
  {
    "text": "cek template for a Fargate service with a load balancer in front of it just one",
    "start": "2352370",
    "end": "2358250"
  },
  {
    "text": "line easy to be PC now work this is a high-level class for VP C",
    "start": "2358250",
    "end": "2363620"
  },
  {
    "text": "networks so it includes the VP C itself but also the subnets the security groups",
    "start": "2363620",
    "end": "2368810"
  },
  {
    "text": "the internet gateway the nat gateways and route tables so you can imagine how much cloud formation this generates and",
    "start": "2368810",
    "end": "2376210"
  },
  {
    "text": "then there's a high-level Fargate class this includes the e CS service the task",
    "start": "2376210",
    "end": "2381860"
  },
  {
    "text": "definition the application load balancer the listener rule the target group and",
    "start": "2381860",
    "end": "2386870"
  },
  {
    "text": "then optionally even the route 53 alias record so all of this simply simple",
    "start": "2386870",
    "end": "2393620"
  },
  {
    "text": "lines generate a full package load balance far gate service all configured",
    "start": "2393620",
    "end": "2399290"
  },
  {
    "text": "together for you so just these 22 lines of typescript code generates over 400",
    "start": "2399290",
    "end": "2405860"
  },
  {
    "text": "lines of CloudFormation syntax and this is all with the AWS best practices built",
    "start": "2405860",
    "end": "2410870"
  },
  {
    "text": "in on how to configure your Fargate service how to configure your V PC how to configure DNS records for your",
    "start": "2410870",
    "end": "2418520"
  },
  {
    "text": "Fargate service so it's a great time-saver for doing things out of the",
    "start": "2418520",
    "end": "2423620"
  },
  {
    "text": "box really quickly the other side of this is a feature called",
    "start": "2423620",
    "end": "2429410"
  },
  {
    "text": "applets in the CDK this is a yeah mall version of the typescript classes that",
    "start": "2429410",
    "end": "2436490"
  },
  {
    "text": "are part of the cdk so you can use the same constructs for these high-level",
    "start": "2436490",
    "end": "2442060"
  },
  {
    "text": "resource types but in llamo syntax so here I only have a single property just",
    "start": "2442060",
    "end": "2448460"
  },
  {
    "text": "the image that I want to run and this is going to generate all of those same resources the VPC the cluster the",
    "start": "2448460",
    "end": "2455420"
  },
  {
    "text": "Fargate service the task definition the load balancer the listener rolled a target group it's going to generate",
    "start": "2455420",
    "end": "2461780"
  },
  {
    "text": "again those 400 lines of cloud formation the other side of this is modeling your",
    "start": "2461780",
    "end": "2468620"
  },
  {
    "start": "2465000",
    "end": "2465000"
  },
  {
    "text": "pipelines you can also use infrastructures code for your pipelines one of the things that I tend to see on",
    "start": "2468620",
    "end": "2474770"
  },
  {
    "text": "my teams is that ideally we for a new feature we would add a new micro service",
    "start": "2474770",
    "end": "2480380"
  },
  {
    "text": "but it's a huge pain to set up a new pipeline set up all the environments configure the pipeline we've got so many",
    "start": "2480380",
    "end": "2487520"
  },
  {
    "text": "regions now that the pipeline just goes off the page and so that's a huge pain and so one of the things that we've been",
    "start": "2487520",
    "end": "2494120"
  },
  {
    "text": "really adopting at Amazon is using infrastructure as code for the release process as well so codifying all our",
    "start": "2494120",
    "end": "2501740"
  },
  {
    "text": "best practices in code so one of the things about the cdk that i really like",
    "start": "2501740",
    "end": "2507350"
  },
  {
    "text": "is that it minimizes that copy and paste across many many micro-service pipelines",
    "start": "2507350",
    "end": "2513110"
  },
  {
    "text": "by using this object-oriented language so we can define a higher-level class",
    "start": "2513110",
    "end": "2518480"
  },
  {
    "text": "that defines here's what my pipelines generally look like I've got all the AWS",
    "start": "2518480",
    "end": "2524360"
  },
  {
    "text": "regions in them I have a staging environment I have a dev environment and my source code and then you can just use",
    "start": "2524360",
    "end": "2531440"
  },
  {
    "text": "that class across all of your pipelines the cdk also has a lot of high-level",
    "start": "2531440",
    "end": "2537230"
  },
  {
    "text": "constructs for forked pipeline in general so it's really easy to add new actions to your pipeline with the cdk",
    "start": "2537230",
    "end": "2544820"
  },
  {
    "text": "and it will automatically configure all the role policies that you need for that pipeline so this is a truncated example",
    "start": "2544820",
    "end": "2553550"
  },
  {
    "start": "2550000",
    "end": "2550000"
  },
  {
    "text": "of a pipeline class that I could put in my source code repository that defined",
    "start": "2553550",
    "end": "2559460"
  },
  {
    "text": "how I think about releasing my microservice all you're seeing here is that I'm adding a github source action",
    "start": "2559460",
    "end": "2566870"
  },
  {
    "text": "and then beyond this I would have build and test and production because all my pipelines generally look the same and",
    "start": "2566870",
    "end": "2574360"
  },
  {
    "text": "then in my stack that's going to generate a huge cloud formation template",
    "start": "2574360",
    "end": "2580550"
  },
  {
    "text": "for my stack I can just stamp out these microservice pipelines and really easily",
    "start": "2580550",
    "end": "2585650"
  },
  {
    "text": "add a new microservice anytime it's warranted in my architecture so you can",
    "start": "2585650",
    "end": "2592820"
  },
  {
    "start": "2591000",
    "end": "2591000"
  },
  {
    "text": "use the cdk to synthesize and deploy cdk templates there's a command line for it",
    "start": "2592820",
    "end": "2598130"
  },
  {
    "text": "in code pipeline again just like Sam you would use the cloud formation deployment actions to use to synthesis to deploy",
    "start": "2598130",
    "end": "2606200"
  },
  {
    "text": "any synthesize cdk application synthesis and cdks simply means generating the",
    "start": "2606200",
    "end": "2612080"
  },
  {
    "text": "gamal or json CloudFormation template from your typescript code and then using",
    "start": "2612080",
    "end": "2617330"
  },
  {
    "text": "the cdk CLI and Jenkins can really be a time-saver in deploying these applications to production so let's",
    "start": "2617330",
    "end": "2625690"
  },
  {
    "text": "circle back to the infrastructure is code goals make infrastructure changes repeatable and",
    "start": "2625690",
    "end": "2632119"
  },
  {
    "text": "predictable with cloud formation that's really easy because you're deploying the same template from staging to production",
    "start": "2632119",
    "end": "2637910"
  },
  {
    "text": "it'll do the same things number two is releasing infrastructure",
    "start": "2637910",
    "end": "2643190"
  },
  {
    "text": "changes using the same tools as code changes having these infrastructure as code pipelines to deliver infrastructure",
    "start": "2643190",
    "end": "2649970"
  },
  {
    "text": "changes to production I'm finally replicating production environment in a staging environment to enable continuous",
    "start": "2649970",
    "end": "2656420"
  },
  {
    "text": "testing so having that pipeline that has really the exact same shape of your",
    "start": "2656420",
    "end": "2661869"
  },
  {
    "text": "service pipeline with source build test and production but having your",
    "start": "2661869",
    "end": "2667550"
  },
  {
    "text": "infrastructure as code changes flowing through it so now we've looked at infrastructure as code and we've",
    "start": "2667550",
    "end": "2674180"
  },
  {
    "text": "completed all the pillars and now I want to show you a live demo of what this would look like for a container",
    "start": "2674180",
    "end": "2680300"
  },
  {
    "text": "application and a serverless application",
    "start": "2680300",
    "end": "2684310"
  },
  {
    "text": "so for this I have reinvent trivia comm so I can click on any of these cards and",
    "start": "2688390",
    "end": "2697000"
  },
  {
    "text": "of course the answer is it's 2012 I heard correct so this is a",
    "start": "2697000",
    "end": "2705970"
  },
  {
    "text": "static site and it's backed by an API that's serving up all of these trivia",
    "start": "2705970",
    "end": "2711430"
  },
  {
    "text": "questions and the answers and I had a similar application that was running in EC 2 for a while but it was really easy",
    "start": "2711430",
    "end": "2718119"
  },
  {
    "text": "to package it up into a container and put it in Fargate and not have to worry about ec2 so these are this is an",
    "start": "2718119",
    "end": "2724839"
  },
  {
    "text": "example of the API response that I would get from my Fargate service so here we",
    "start": "2724839",
    "end": "2731049"
  },
  {
    "text": "can see in the ECS console I have a test environment a staging environment and",
    "start": "2731049",
    "end": "2736359"
  },
  {
    "text": "then a production environment for my back-end API service and this is an",
    "start": "2736359",
    "end": "2742569"
  },
  {
    "text": "example of the cdk applet Yambol that I would use to define my entire test and",
    "start": "2742569",
    "end": "2749829"
  },
  {
    "text": "production stages so I have I can have an image here a desired count and then I",
    "start": "2749829",
    "end": "2755950"
  },
  {
    "text": "can have even its SSL enabled and so I have a certificate manager certificate",
    "start": "2755950",
    "end": "2761710"
  },
  {
    "text": "and it will create the route 53 aliases for me then I have I thought it would be",
    "start": "2761710",
    "end": "2768940"
  },
  {
    "text": "cool to do a chat bot for this so I integrated with Amazon Lex for natural",
    "start": "2768940",
    "end": "2774160"
  },
  {
    "text": "language processing so I have a chat bot sitting in my slack channel and so I can",
    "start": "2774160",
    "end": "2784170"
  },
  {
    "text": "play with it and so this is a lambda",
    "start": "2784170",
    "end": "2789490"
  },
  {
    "text": "based application that's integrated with Lex one of the cool things about when you use Sam is that it's going to show",
    "start": "2789490",
    "end": "2796150"
  },
  {
    "text": "up as an application in the console and so I can go into one of these like chat",
    "start": "2796150",
    "end": "2802569"
  },
  {
    "text": "bot tests and I can see here's how to get started with my development",
    "start": "2802569",
    "end": "2807849"
  },
  {
    "text": "environment there's cloud 9 there's a visual studio plugin there's an eclipse plugin there's",
    "start": "2807849",
    "end": "2813490"
  },
  {
    "text": "also an IntelliJ in that's on github right now I can see my Sam template that",
    "start": "2813490",
    "end": "2818890"
  },
  {
    "text": "I have deployed and then I can see all the resources that are part of this and",
    "start": "2818890",
    "end": "2824130"
  },
  {
    "text": "then I can also see the deployment history for this application as well as",
    "start": "2824130",
    "end": "2830799"
  },
  {
    "text": "all of the metrics for the resources and so we saw a little bit of that",
    "start": "2830799",
    "end": "2836950"
  },
  {
    "text": "template in the console but this is my server list function application that's",
    "start": "2836950",
    "end": "2842530"
  },
  {
    "text": "written in Sam syntax and then finally I have a whole bunch of pipelines for this",
    "start": "2842530",
    "end": "2849609"
  },
  {
    "text": "I have my static site pipeline infrastructure pipeline I also have a",
    "start": "2849609",
    "end": "2855040"
  },
  {
    "text": "base image base docker image for my Fargate service I've got the chat bot",
    "start": "2855040",
    "end": "2860230"
  },
  {
    "text": "pipeline and the back-end pipeline and then I have all of these defined in CDK",
    "start": "2860230",
    "end": "2866320"
  },
  {
    "text": "so this pipeline class is my sort of shape pipeline class and then I just use",
    "start": "2866320",
    "end": "2872140"
  },
  {
    "text": "it in the rest because I have the same shape of pipeline and everything so",
    "start": "2872140",
    "end": "2877720"
  },
  {
    "text": "let's go let's go release some changes so we can take a look at my base image",
    "start": "2877720",
    "end": "2884380"
  },
  {
    "text": "one I have it blocked for now but you can see I this is really a continuous integration pipeline almost I only have",
    "start": "2884380",
    "end": "2890859"
  },
  {
    "text": "source and build but then we can look at my trivia back-end pipeline and see this",
    "start": "2890859",
    "end": "2899320"
  },
  {
    "text": "is where I'm using that ECR source action include pipeline so anytime that base image pipeline pushes into my ECR",
    "start": "2899320",
    "end": "2906990"
  },
  {
    "text": "repository this pipeline will automatically trigger and then you can see the actual image ID that's flowing",
    "start": "2906990",
    "end": "2913540"
  },
  {
    "text": "through the pipeline and into the build and then of course I have my source up on github so it's tracking that",
    "start": "2913540",
    "end": "2919650"
  },
  {
    "text": "automatically for me and going into the build and then I have a test stage and a prod stage and then we can take a look",
    "start": "2919650",
    "end": "2927490"
  },
  {
    "text": "at the chat bot pipeline so whereas the",
    "start": "2927490",
    "end": "2934980"
  },
  {
    "text": "the back-end pipeline is using Amazon ECS blue/green so we're gonna see the",
    "start": "2934980",
    "end": "2940060"
  },
  {
    "text": "blue-green deployments this pipeline is more of an infrastructure as code pipeline so it's preparing a change set",
    "start": "2940060",
    "end": "2946810"
  },
  {
    "text": "in cloud formation and then executing that change set in cloud formation so I",
    "start": "2946810",
    "end": "2952180"
  },
  {
    "text": "have a change that has been blocked here for a little bit so let's go and enable",
    "start": "2952180",
    "end": "2958359"
  },
  {
    "text": "that and so automatically the change",
    "start": "2958359",
    "end": "2963670"
  },
  {
    "text": "moved to the next stage it's now it's gonna prepare to in CloudFormation for me and then let's",
    "start": "2963670",
    "end": "2971650"
  },
  {
    "text": "go over to this is the back end pipeline so I'm going to enable this transition",
    "start": "2971650",
    "end": "2977740"
  },
  {
    "text": "as well and we can get the blue green deployment going so on the chopped-up",
    "start": "2977740",
    "end": "2986830"
  },
  {
    "text": "pipeline this is now in progress so we can go over here and see that it is",
    "start": "2986830",
    "end": "2993820"
  },
  {
    "text": "preparing this change set for me so it created that one for me and then let's",
    "start": "2993820",
    "end": "3003690"
  },
  {
    "text": "check in on the this one so now I have my prod deployment for blue green to my",
    "start": "3003690",
    "end": "3010470"
  },
  {
    "text": "back end so I can go and click and go right to the deployment and one of the",
    "start": "3010470",
    "end": "3018510"
  },
  {
    "text": "nice things that it the code deploy console has is this visualization of where I am and the deployment so it's",
    "start": "3018510",
    "end": "3025410"
  },
  {
    "text": "showing me that a hundred percent of my traffic is still on that original set of tasks my blue tasks and zero percent is",
    "start": "3025410",
    "end": "3032940"
  },
  {
    "text": "in the replacement or the green tasks so what it's doing right now is it's deploying that task set so what's",
    "start": "3032940",
    "end": "3039360"
  },
  {
    "text": "happening is if we scroll down we can see that in the replacement tasks they're three desired count same as the",
    "start": "3039360",
    "end": "3046530"
  },
  {
    "text": "previous one two are running three are now running and then one was pending and",
    "start": "3046530",
    "end": "3052680"
  },
  {
    "text": "then down here we can see all of the stages at each of these stages I have the opportunity to run a validation hook",
    "start": "3052680",
    "end": "3060590"
  },
  {
    "text": "so I can show you one of those hooks these are just simple lambda functions",
    "start": "3060590",
    "end": "3068450"
  },
  {
    "text": "and then all that I'm doing here is making a request to the URL so the test",
    "start": "3075080",
    "end": "3081080"
  },
  {
    "text": "URL which is on that different port like nine thousand all I'm doing here is",
    "start": "3081080",
    "end": "3086120"
  },
  {
    "text": "really simple I'm just looking for a status code and then I'm looking at the",
    "start": "3086120",
    "end": "3091250"
  },
  {
    "text": "length of the JSON that's returned is what I expect so pretty shallow check here but then at the end of it I go to",
    "start": "3091250",
    "end": "3099110"
  },
  {
    "text": "code deploy and report on the status of this check back to code deploy and then",
    "start": "3099110",
    "end": "3106670"
  },
  {
    "text": "if we go over to the ECS console one of the things we're gonna see in addition to the tasks that are running so now",
    "start": "3106670",
    "end": "3113540"
  },
  {
    "text": "there's six tasks because there's a blue fleet and a green fleet but we'll also see those cloud for those code deployed",
    "start": "3113540",
    "end": "3119780"
  },
  {
    "text": "deployments we can see that this is blue green we can see that this is using this",
    "start": "3119780",
    "end": "3125180"
  },
  {
    "text": "code deploy deployment group I can go here to go see the full deployment history with code deploy and then we can",
    "start": "3125180",
    "end": "3131630"
  },
  {
    "text": "see that this blue green deployment is currently in progress so let's go back",
    "start": "3131630",
    "end": "3136640"
  },
  {
    "text": "to the code employee console so all of the deployment lifecycle events have",
    "start": "3136640",
    "end": "3142250"
  },
  {
    "text": "succeeded what's happening now is that it's waiting for a minute I dialed down that wait time just down to a minute for",
    "start": "3142250",
    "end": "3148970"
  },
  {
    "text": "the demo so what it's doing right now is it's monitoring my cloud which alarms to make sure that this didn't impact any",
    "start": "3148970",
    "end": "3155800"
  },
  {
    "text": "anything in production so at this point if a customer comes to my reinvent",
    "start": "3155800",
    "end": "3163580"
  },
  {
    "text": "trivia API this is currently going to that green fleet but if any problems",
    "start": "3163580",
    "end": "3169430"
  },
  {
    "text": "occurred here if I started seeing five hundreds come out of this application then what would happen is that code",
    "start": "3169430",
    "end": "3174890"
  },
  {
    "text": "deploy would very quickly roll back to that original task set because it's all",
    "start": "3174890",
    "end": "3180050"
  },
  {
    "text": "still sitting there in my service it's just no longer taking production traffic",
    "start": "3180050",
    "end": "3186850"
  },
  {
    "text": "so at this point now the original task set has been terminated a hundred",
    "start": "3186850",
    "end": "3192710"
  },
  {
    "text": "percent of my traffic is now going here so this deployment is succeeded so let's go back to this pipeline",
    "start": "3192710",
    "end": "3203320"
  },
  {
    "text": "so now that succeeded so we've got gotten all the way through the pipeline",
    "start": "3204000",
    "end": "3209260"
  },
  {
    "text": "and we can see that my change is showing up here along with my EC our source let's go back to the chat bot so we now",
    "start": "3209260",
    "end": "3217300"
  },
  {
    "text": "have the change set in progress right now so we can go over to CloudFormation",
    "start": "3217300",
    "end": "3222900"
  },
  {
    "text": "see what's going on so one of the things we see here is that at it as it's",
    "start": "3222900",
    "end": "3228880"
  },
  {
    "text": "updating that alias it's actually triggered a Co deployed appointment from this CloudFormation stack update so I",
    "start": "3228880",
    "end": "3236170"
  },
  {
    "text": "can go over to Co deploy and let's list the deployments that are currently in",
    "start": "3236170",
    "end": "3242590"
  },
  {
    "text": "progress so I can see this one blue green for a Tobias lambda is in progress",
    "start": "3242590",
    "end": "3249580"
  },
  {
    "text": "let's go to that deployment ID and here we're seeing that I'm actually using a canary deployment I'm using 10% of",
    "start": "3249580",
    "end": "3257140"
  },
  {
    "text": "traffic for 10 minutes I think so this probably won't finish in time but it's",
    "start": "3257140",
    "end": "3263440"
  },
  {
    "text": "showing us that 90% of traffic is currently going to the original function code then 10% of traffic is going to the",
    "start": "3263440",
    "end": "3270550"
  },
  {
    "text": "new function code and so at this point if I go into my slack channel I have a",
    "start": "3270550",
    "end": "3276640"
  },
  {
    "text": "10% chance that this is going to go to the new function code and 10% to the old",
    "start": "3276640",
    "end": "3282010"
  },
  {
    "text": "function code",
    "start": "3282010",
    "end": "3284640"
  },
  {
    "text": "so since that's going to take a while I'm gonna finish up here",
    "start": "3289100",
    "end": "3294640"
  },
  {
    "text": "so just to visualize some of the infrastructure that you saw there again I had an application load balancer in",
    "start": "3297820",
    "end": "3304730"
  },
  {
    "text": "front of a far gate service then a dynamo DB table as well behind that and then for the web application in the",
    "start": "3304730",
    "end": "3312320"
  },
  {
    "text": "browser I had just an s3 static site with a route 53 zone on top of it and then for",
    "start": "3312320",
    "end": "3318860"
  },
  {
    "text": "the chat bot I was running that and slack Amazon Lex has a direct integration with slack so I was using",
    "start": "3318860",
    "end": "3324920"
  },
  {
    "text": "that for the natural language processing and then I was using lambda for the",
    "start": "3324920",
    "end": "3330260"
  },
  {
    "text": "actual bot function that was driving the conversation through the game so before",
    "start": "3330260",
    "end": "3338300"
  },
  {
    "start": "3337000",
    "end": "3337000"
  },
  {
    "text": "we finish up today these are some related sessions that I wanted to call out as ivory 325 this is going to have",
    "start": "3338300",
    "end": "3345320"
  },
  {
    "text": "the general managers for Fargate for ECS for lambda and for developer tools all",
    "start": "3345320",
    "end": "3352790"
  },
  {
    "text": "on stage together and they're all gonna walk through a little bit deeper about how we're thinking about DevOps micro",
    "start": "3352790",
    "end": "3360230"
  },
  {
    "text": "services and serverless on functions and containers on Thursday so that's gonna",
    "start": "3360230",
    "end": "3365510"
  },
  {
    "text": "be a really great session it had I can tell you it has a lot of empty seats so you get that you have a great chance of",
    "start": "3365510",
    "end": "3370700"
  },
  {
    "text": "getting in SRV 305 if you are interested in hearing more about how we're thinking",
    "start": "3370700",
    "end": "3377030"
  },
  {
    "text": "about modern applications and where this term comes from and where the goals and the tools come from there's a session",
    "start": "3377030",
    "end": "3384350"
  },
  {
    "text": "called inside AWS technology choices for modern applications that's led by Tim",
    "start": "3384350",
    "end": "3390380"
  },
  {
    "text": "Bray a senior principal at AWS on both Wednesday and Thursday and then finally",
    "start": "3390380",
    "end": "3395390"
  },
  {
    "text": "if you're interested in digging more into infrastructure as code dev 3:27 is",
    "start": "3395390",
    "end": "3400760"
  },
  {
    "text": "beyond the basics advanced infrastructure is code programming on AWS led by the cloud formation team so",
    "start": "3400760",
    "end": "3408110"
  },
  {
    "text": "they can dig more into that so thank you so much thank you for spending your",
    "start": "3408110",
    "end": "3414020"
  },
  {
    "text": "Tuesday night with me I hope that you check out both the new lambda Sam",
    "start": "3414020",
    "end": "3419480"
  },
  {
    "text": "features as well as code to play Bluegreen deployments for ECS and the",
    "start": "3419480",
    "end": "3424720"
  },
  {
    "text": "ECR source action in could pipe line thank you [Applause]",
    "start": "3424720",
    "end": "3433719"
  }
]