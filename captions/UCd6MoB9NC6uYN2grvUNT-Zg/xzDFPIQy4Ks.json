[
  {
    "start": "0",
    "end": "171000"
  },
  {
    "text": "[Music] [Applause]",
    "start": "390",
    "end": "5430"
  },
  {
    "text": "hi i am michael beck and i am an enterprise support manager at aws",
    "start": "7759",
    "end": "13280"
  },
  {
    "text": "and i'm based out of san francisco california welcome to aws knowledge center live where we",
    "start": "13280",
    "end": "19760"
  },
  {
    "text": "share best practices and troubleshooting tips from aws support joining me today is ayden becker off and",
    "start": "19760",
    "end": "27119"
  },
  {
    "text": "louise fox from aws support can you give us a quick introduction ayden",
    "start": "27119",
    "end": "33120"
  },
  {
    "text": "hi my name is iden and i'm an enterprise support lead and senior tam in san jose california",
    "start": "33120",
    "end": "38719"
  },
  {
    "text": "this topic is really interesting to me because best practices keep evolving as features and capabilities are",
    "start": "38719",
    "end": "44079"
  },
  {
    "text": "released and keeping customers well architected and secure is a really big part of being a tam so",
    "start": "44079",
    "end": "49440"
  },
  {
    "text": "i'm excited to share some knowledge here and on a really important aws service",
    "start": "49440",
    "end": "54480"
  },
  {
    "text": "hi i'm louise i'm a cloud support engineer from the dublin team and i work directly with customers",
    "start": "54480",
    "end": "60879"
  },
  {
    "text": "using the iem service and helping them with their overall security posture",
    "start": "60879",
    "end": "66640"
  },
  {
    "text": "thank you louise our topic today is aws identity and access management best",
    "start": "66640",
    "end": "72880"
  },
  {
    "text": "practices which you'll probably hear us refer to a lot today as iam and iam enables you to manage access to",
    "start": "72880",
    "end": "81520"
  },
  {
    "text": "aws services and resources securely iden can you walk us through in a little more detail",
    "start": "81520",
    "end": "87759"
  },
  {
    "text": "what we're going to be talking about today yeah thanks michael so we'll cover the top best practices as",
    "start": "87759",
    "end": "94240"
  },
  {
    "text": "of 2021 to keep your aws environment secure along with a couple quick",
    "start": "94240",
    "end": "100000"
  },
  {
    "text": "iem users and roles demos and if we have time at the end a demo on using aws config for governing",
    "start": "100000",
    "end": "106479"
  },
  {
    "text": "out of compliance iem configurations so we'll also give our recommendations on",
    "start": "106479",
    "end": "113600"
  },
  {
    "text": "common design decisions and um we jumped a couple slides ahead",
    "start": "113600",
    "end": "119119"
  },
  {
    "text": "here let's let's head back to the agenda here but we'll also cover our you know design",
    "start": "119119",
    "end": "125920"
  },
  {
    "text": "decisions some common questions we get from customers like should i be managing users",
    "start": "125920",
    "end": "131520"
  },
  {
    "text": "iem users in iem or federating in from an identity store and what's the right balance between",
    "start": "131520",
    "end": "136879"
  },
  {
    "text": "them or should i be deployed in you know one aws account or within multiple",
    "start": "136879",
    "end": "142080"
  },
  {
    "text": "databus accounts and you know what's the recommended multi-account strategy",
    "start": "142080",
    "end": "147200"
  },
  {
    "text": "and how do i best accomplish cross-account access so you know doing direct",
    "start": "147200",
    "end": "153440"
  },
  {
    "text": "cross-account access role assumptions or building a hub and spoke model with a central identity identity account",
    "start": "153440",
    "end": "160800"
  },
  {
    "text": "so and other topics here but with that said let's jump over to louise",
    "start": "160800",
    "end": "167440"
  },
  {
    "text": "here for refresher thanks leiden um sorry about that",
    "start": "167440",
    "end": "172879"
  },
  {
    "start": "171000",
    "end": "171000"
  },
  {
    "text": "technical glitch there um so to start off we're just gonna do a refresher on exactly what",
    "start": "172879",
    "end": "178319"
  },
  {
    "text": "um identity and access management is so could we just get a virtual hands up",
    "start": "178319",
    "end": "183760"
  },
  {
    "text": "in the group chat for anybody that's new to aws or new to iem",
    "start": "183760",
    "end": "189680"
  },
  {
    "text": "okay yeah i see a few up there so um basically what iam does is",
    "start": "190159",
    "end": "196400"
  },
  {
    "text": "it's a free service that enables you to manage access to your amazon web services and resources securely it's basically to",
    "start": "196400",
    "end": "203680"
  },
  {
    "text": "control who can do what in your aws account so using iem",
    "start": "203680",
    "end": "208720"
  },
  {
    "text": "you can create and manage users groups and roles and use permissions to allow and deny",
    "start": "208720",
    "end": "214319"
  },
  {
    "text": "their access to resources so to start you have an iem user which represents the person or service who is",
    "start": "214319",
    "end": "220959"
  },
  {
    "text": "interacting with your aws environment and this consists of a name a password",
    "start": "220959",
    "end": "226159"
  },
  {
    "text": "to sign into the aws management console and up to two access keys as well to",
    "start": "226159",
    "end": "231280"
  },
  {
    "text": "interact with the api or cli you also have groups so this is basically they're used to",
    "start": "231280",
    "end": "238560"
  },
  {
    "text": "specify permissions for a collection of users with the same responsibilities making those permissions easier to",
    "start": "238560",
    "end": "244239"
  },
  {
    "text": "manage an iem role is similar to a user but instead of being uniquely associated",
    "start": "244239",
    "end": "249920"
  },
  {
    "text": "with one person or service a role is intended to be assumed by anyone who needs it",
    "start": "249920",
    "end": "255120"
  },
  {
    "text": "so rather than having long-term credentials like passwords and access keys associated with it a role can be",
    "start": "255120",
    "end": "260880"
  },
  {
    "text": "assigned to a federated user who signs in using an external identity provider instead of",
    "start": "260880",
    "end": "266160"
  },
  {
    "text": "iem you also have principles so a principle is used in a resource-based policy or a",
    "start": "266160",
    "end": "273040"
  },
  {
    "text": "role trust policy and to specify access to resource the principle can be specified as",
    "start": "273040",
    "end": "279280"
  },
  {
    "text": "anything a user a role a federated user aws service root user or a whole aws",
    "start": "279280",
    "end": "285919"
  },
  {
    "text": "account and lastly you have permissions so permissions let you specify access to",
    "start": "285919",
    "end": "291680"
  },
  {
    "text": "aws resources permissions are granted to im entities users groups or roles",
    "start": "291680",
    "end": "298320"
  },
  {
    "text": "so centralized um im is a centralized service meaning that you can set up all of your permissions in one place",
    "start": "298320",
    "end": "304720"
  },
  {
    "text": "you don't need to go to s3 console to set up s3 permissions or the kms console to set up kms permissions",
    "start": "304720",
    "end": "310960"
  },
  {
    "text": "it can all be done from the iem console and it's fine grained which means that you can specify permissions down to",
    "start": "310960",
    "end": "317360"
  },
  {
    "text": "api level um down to resource level you can actually also use conditions for",
    "start": "317360",
    "end": "322400"
  },
  {
    "text": "more granular control again which i will discuss later on and secure deny by default so yes um",
    "start": "322400",
    "end": "330720"
  },
  {
    "text": "this means that when you first create an im user role it starts with no permissions",
    "start": "330720",
    "end": "335759"
  },
  {
    "text": "so in other words iem entities can do absolutely nothing in aws until you grant them your desired",
    "start": "335759",
    "end": "341199"
  },
  {
    "text": "permissions deny by default until you explicitly allow",
    "start": "341199",
    "end": "346719"
  },
  {
    "start": "347000",
    "end": "347000"
  },
  {
    "text": "so here are some examples of iem policies so the one to the left is a",
    "start": "347840",
    "end": "354320"
  },
  {
    "text": "resource-based policy and the one to the right is a sorry the one to the left is an identity-based policy and the one to the",
    "start": "354320",
    "end": "360800"
  },
  {
    "text": "right is a resource-based policy so here you see on the left effect action and resource",
    "start": "360800",
    "end": "366319"
  },
  {
    "text": "and this is just a helpful hint for reminding you how to actually create the policy and what this",
    "start": "366319",
    "end": "372240"
  },
  {
    "text": "policy does is you attach it to an iem user or role and it allows all iem describe actions",
    "start": "372240",
    "end": "379520"
  },
  {
    "text": "for all resources and then here to the left you have the resource-based policy and what this does",
    "start": "379520",
    "end": "386479"
  },
  {
    "text": "is you attach it to a resource in this case an s3 bucket and you specify the principle which i",
    "start": "386479",
    "end": "392560"
  },
  {
    "text": "mentioned earlier so in this case it's a whole aws account and what this policy is allowing is",
    "start": "392560",
    "end": "398400"
  },
  {
    "text": "allowing you to add an object to an s3 bucket if this condition",
    "start": "398400",
    "end": "403600"
  },
  {
    "text": "is met which means that the acl of the object has to be public read but when you're adding it to the",
    "start": "403600",
    "end": "409759"
  },
  {
    "text": "bucket so that's the difference there between the two types of policies but we'll delve into more on this as well",
    "start": "409759",
    "end": "415280"
  },
  {
    "text": "later on and louise i wanted to give a plug for one of my favorite re invent videos from 2018",
    "start": "415280",
    "end": "422560"
  },
  {
    "text": "on become an iem policy master in 60 minutes or less so you know if someone's tasked you with",
    "start": "422560",
    "end": "429199"
  },
  {
    "text": "auditing hundreds or thousands of i am policies or you yourself want to tighten up your policies",
    "start": "429199",
    "end": "434880"
  },
  {
    "text": "definitely give that video a watch and you know become a policy master in 60 minutes or less",
    "start": "434880",
    "end": "442479"
  },
  {
    "text": "very cool so on to our iem demo here where we're going to be",
    "start": "442880",
    "end": "449440"
  },
  {
    "text": "creating an iem user and a role so to get started we're going to create an iem user",
    "start": "449440",
    "end": "455520"
  },
  {
    "text": "um so here we go add user and you're adding a user here this user has to be unique within the",
    "start": "455520",
    "end": "461599"
  },
  {
    "text": "aws account so as you can see here the username was already taken so i'm just going to go",
    "start": "461599",
    "end": "466639"
  },
  {
    "text": "ahead and add user to the end of that and next access type so you can add programmatic access or you can add",
    "start": "466639",
    "end": "473759"
  },
  {
    "text": "console and yeah console access so programmatic access is where you basically get an access key",
    "start": "473759",
    "end": "480400"
  },
  {
    "text": "id and a secret access key to interact with the api or cli and you can have up to two of those",
    "start": "480400",
    "end": "485680"
  },
  {
    "text": "for a user and console access is where you generate a password and your username to",
    "start": "485680",
    "end": "490800"
  },
  {
    "text": "authenticate into the console so with this you can have auto-generated passwords or custom passwords",
    "start": "490800",
    "end": "497680"
  },
  {
    "text": "and in this case we'd usually recommend an auto-generated password just because this means that the",
    "start": "497680",
    "end": "503199"
  },
  {
    "text": "administrator who's actually creating the user isn't going to be using their own password or password that they know so",
    "start": "503199",
    "end": "508800"
  },
  {
    "text": "it's just more secure and you can also require a password reset which means that the user will be",
    "start": "508800",
    "end": "514159"
  },
  {
    "text": "prompted to create a new password when they go to log into the console for the first time",
    "start": "514159",
    "end": "519200"
  },
  {
    "text": "and when this happens we have to add the iem user change password policy to the users that they're authorized to",
    "start": "519200",
    "end": "525600"
  },
  {
    "text": "actually change their own password so moving on here to permissions",
    "start": "525600",
    "end": "533440"
  },
  {
    "text": "you can add a user to a group which i mentioned earlier so a group is basically where",
    "start": "533440",
    "end": "540240"
  },
  {
    "text": "a group is basically where you have a collection of users and they all have the same responsibilities so for example if you want to add your",
    "start": "540240",
    "end": "547600"
  },
  {
    "text": "user to the admin group you can add them all to that and they will all inherit the same permissions and this way if you want to make any",
    "start": "547600",
    "end": "554000"
  },
  {
    "text": "change it's so much easier in terms of organization organization um just because you can",
    "start": "554000",
    "end": "559519"
  },
  {
    "text": "actually change for all users or you can attach an existing policy um so here you have customer managed",
    "start": "559519",
    "end": "566320"
  },
  {
    "text": "policies and you have aws managed policies so the difference is that an aws managed",
    "start": "566320",
    "end": "572160"
  },
  {
    "text": "policy is created and managed by aws and",
    "start": "572160",
    "end": "577279"
  },
  {
    "text": "whenever there's any changes at all aws manages all of this so they're free to use and there's there's multiple policies",
    "start": "577279",
    "end": "583360"
  },
  {
    "text": "for every service and then a customer managed policy is a policy that is",
    "start": "583360",
    "end": "588399"
  },
  {
    "text": "created by you um so it can be more custom to your use case and you might have it for um yeah",
    "start": "588399",
    "end": "596000"
  },
  {
    "text": "whatever suits your use case basically so for this we're here we're looking up config and",
    "start": "596000",
    "end": "601120"
  },
  {
    "text": "we are going to attach a config managed policy for the sake of this",
    "start": "601120",
    "end": "606560"
  },
  {
    "text": "so as you can see here these are all config policies and we're going to attach the aws config user policy",
    "start": "606560",
    "end": "614079"
  },
  {
    "text": "um and we're also going to attach a cloud wash policy so as you can see there's loads of policies here",
    "start": "614880",
    "end": "622079"
  },
  {
    "text": "so there we go",
    "start": "624720",
    "end": "633839"
  },
  {
    "text": "sorry i think there's another glitch there slightly so now we're attaching a cloud watch policy again",
    "start": "636079",
    "end": "641519"
  },
  {
    "text": "sorry about that so catch full access there we go and next down to permission",
    "start": "641519",
    "end": "646880"
  },
  {
    "text": "boundaries so this is an advanced feature of iem where basically you can set the maximum",
    "start": "646880",
    "end": "652000"
  },
  {
    "text": "permissions that a user can have so how does it work is that if you attach cloud watch full access",
    "start": "652000",
    "end": "657839"
  },
  {
    "text": "as your permission boundary just as an example it means that no matter what permissions are added to your user only cloudwatch full access",
    "start": "657839",
    "end": "666160"
  },
  {
    "text": "is actually what your user is the maximum permissions that your user can actually have so that can be really convenient",
    "start": "666160",
    "end": "671839"
  },
  {
    "text": "for different use cases as you can add tags if you're interested in tag-based access control",
    "start": "671839",
    "end": "677920"
  },
  {
    "text": "and here you go just to review your user that you created programmatic and console access",
    "start": "677920",
    "end": "683440"
  },
  {
    "text": "auto-generated and here are the three policies as well that you've attached so you can go ahead and create that user",
    "start": "683440",
    "end": "692480"
  },
  {
    "text": "and it should be created within seconds yeah there we go and here's all of the credentials that's been generated that",
    "start": "693200",
    "end": "698480"
  },
  {
    "text": "you can download in a csv file and over here is a custom sign-in link as well that you can actually",
    "start": "698480",
    "end": "704640"
  },
  {
    "text": "create your own custom sign-in link for your users so quickly moving on to roles so creating a role there we go",
    "start": "704640",
    "end": "712240"
  },
  {
    "text": "so there are four types of trusted entities that you can have when you create a role um so the first basically a role",
    "start": "712240",
    "end": "719279"
  },
  {
    "text": "can be assumed by anyone and and also non-human things like ec2 instances",
    "start": "719279",
    "end": "724800"
  },
  {
    "text": "so this means that aws service can perform an action on your behalf without any manual intervention by you",
    "start": "724800",
    "end": "731600"
  },
  {
    "text": "and here is a full list of all of the services that support this next another aws account so this",
    "start": "731600",
    "end": "739839"
  },
  {
    "text": "is where another account can perform actions in your own account so this would be really handy if you",
    "start": "739839",
    "end": "745600"
  },
  {
    "text": "have a multiple accounts set up like aws organizations next you have web identities so this is",
    "start": "745600",
    "end": "752720"
  },
  {
    "text": "good if you manage user identities outside of aws and you can use iem identity providers",
    "start": "752720",
    "end": "758880"
  },
  {
    "text": "instead of creating im users in your aws account so with an identity provider you can",
    "start": "758880",
    "end": "764800"
  },
  {
    "text": "manage your user identities outside of aws and give these external user identities to you permissions to use aws resources",
    "start": "764800",
    "end": "772399"
  },
  {
    "text": "in your account so this would be really useful if your organization already has its own identity system such as maybe a",
    "start": "772399",
    "end": "778880"
  },
  {
    "text": "corporate user identity or maybe you're using amazon cognito for web authentication",
    "start": "778880",
    "end": "784880"
  },
  {
    "text": "and lastly saml 2.0 so this is where you can allow your users um that are federated with saml 2.0 to",
    "start": "784880",
    "end": "791839"
  },
  {
    "text": "assume a role in your account um yeah so for this example we're going to go with another aws account",
    "start": "791839",
    "end": "799360"
  },
  {
    "text": "and i'm going to specify the account id here and next require external id so",
    "start": "799360",
    "end": "805839"
  },
  {
    "text": "this is a piece of data that you can actually specify and it'll be passed",
    "start": "805839",
    "end": "810959"
  },
  {
    "text": "with the assume role api to designate who can assume the role so to provide an external id when you",
    "start": "810959",
    "end": "818000"
  },
  {
    "text": "assume the role you have to use the cli or api and when you need to grant access to",
    "start": "818000",
    "end": "823440"
  },
  {
    "text": "your aws resources through a third party using an iem rule with an external id is",
    "start": "823440",
    "end": "828560"
  },
  {
    "text": "a best practice and also here we have require mfa multi-factor authentication",
    "start": "828560",
    "end": "833680"
  },
  {
    "text": "this is another layer of security for your account as well so that's another best practice",
    "start": "833680",
    "end": "839440"
  },
  {
    "text": "so next moving on to permissions",
    "start": "840959",
    "end": "844880"
  },
  {
    "text": "and here same as using a user you can add permissions as well here at custom or manage permissions and so and also you",
    "start": "847440",
    "end": "855279"
  },
  {
    "text": "can set a permission boundary so yep the same thing an advanced feature of not iem for setting maximum",
    "start": "855279",
    "end": "861199"
  },
  {
    "text": "permissions uh just for the sake of this we're going to use administrator access and you can add tags again if you wish",
    "start": "861199",
    "end": "867600"
  },
  {
    "text": "and here is where we define the role name and just review all the settings and configurations that we just made",
    "start": "867600",
    "end": "873680"
  },
  {
    "text": "so again i'll call this role there we go and create role and your role be created",
    "start": "873680",
    "end": "879120"
  },
  {
    "text": "within seconds again and there we go",
    "start": "879120",
    "end": "885839"
  },
  {
    "text": "thanks louise for that demonstration uh we do have a question from the audience",
    "start": "888560",
    "end": "896240"
  },
  {
    "text": "which is from princeton girl 21 what is the difference between managed",
    "start": "896240",
    "end": "901680"
  },
  {
    "text": "and inline policies oh um so the difference there is that a",
    "start": "901680",
    "end": "907680"
  },
  {
    "text": "managed policy is created and managed by aws so this can be really",
    "start": "907680",
    "end": "913040"
  },
  {
    "text": "convenient if you're new to iem and you're not sure of where to start",
    "start": "913040",
    "end": "918079"
  },
  {
    "text": "and also it means that if any service or api is being introduced after you created the policy aws manages",
    "start": "918079",
    "end": "924720"
  },
  {
    "text": "all of that for you and then there's also outside this custom and there's managed policies",
    "start": "924720",
    "end": "930240"
  },
  {
    "text": "they're both under that title and then you also have inline policies which are",
    "start": "930240",
    "end": "935279"
  },
  {
    "text": "basically a one-to-one relationship with iem so this might be convenient for example if",
    "start": "935279",
    "end": "941199"
  },
  {
    "text": "you have a user that you want to have a very specific policy only for that user and you don't want the policy to be added to",
    "start": "941199",
    "end": "947440"
  },
  {
    "text": "any other user or role this would be a really good reason to use an inline policy and it also means that if your",
    "start": "947440",
    "end": "952959"
  },
  {
    "text": "user or role is deleted the inline policy will be deleted with the role as well we'll actually go",
    "start": "952959",
    "end": "958320"
  },
  {
    "text": "more into this throughout the session all right great thank you very much",
    "start": "958320",
    "end": "964399"
  },
  {
    "start": "965000",
    "end": "965000"
  },
  {
    "text": "so moving on to top iem best practices so for starters um the root user so",
    "start": "966160",
    "end": "972959"
  },
  {
    "text": "we always recommend to reduce or remove the use of the root user this every use when a root user is when",
    "start": "972959",
    "end": "978880"
  },
  {
    "text": "you first create an aws account you begin with only the root user and this user has complete access to all aws",
    "start": "978880",
    "end": "985759"
  },
  {
    "text": "services and resources in your account we strongly recommend that you do not use the root user for",
    "start": "985759",
    "end": "991040"
  },
  {
    "text": "your everyday tasks not even administrative tasks just to reduce the potential for a misuse of",
    "start": "991040",
    "end": "996240"
  },
  {
    "text": "credentials also throw away any root access keys that are used with the cli",
    "start": "996240",
    "end": "1001279"
  },
  {
    "text": "or sdk just again to reduce any security risks or mistakes",
    "start": "1001279",
    "end": "1008000"
  },
  {
    "text": "and there are only certain tasks that require root user credentials such as changing your account settings closing your aws",
    "start": "1008000",
    "end": "1014160"
  },
  {
    "text": "account so these would be the only reasons that we recommend using root",
    "start": "1014160",
    "end": "1020000"
  },
  {
    "text": "mfa so enable mfa for your users the mfa is what i mentioned earlier",
    "start": "1020880",
    "end": "1026480"
  },
  {
    "text": "multi-factor authentication it's an additional layer of security to prevent any unauthorized access",
    "start": "1026480",
    "end": "1032240"
  },
  {
    "text": "in your aws account so your users will then have their username and password which is something that they know",
    "start": "1032240",
    "end": "1038160"
  },
  {
    "text": "as well as an mfa token that generates one-time passwords something that they have so supplements",
    "start": "1038160",
    "end": "1044000"
  },
  {
    "text": "authentication and you can have hardware or software mfa devices for your users",
    "start": "1044000",
    "end": "1049039"
  },
  {
    "text": "enrolls users create individual users this is",
    "start": "1049039",
    "end": "1054480"
  },
  {
    "text": "recommended to enforce separation of duties so uh basically separate credentials for",
    "start": "1054480",
    "end": "1060320"
  },
  {
    "text": "different jobs so that way there is no elevated unnecessary permissions",
    "start": "1060320",
    "end": "1066320"
  },
  {
    "text": "yeah so unique credentials for your users unique in individual credential rotation means",
    "start": "1066320",
    "end": "1071440"
  },
  {
    "text": "that your users have control over rotating their credentials and individual permissions",
    "start": "1071440",
    "end": "1077840"
  },
  {
    "text": "roles use roles for short-term credentials we always recommend using short-term credentials where possible it",
    "start": "1078240",
    "end": "1084880"
  },
  {
    "text": "means that credentials will not need to be stored and they will expire after a specific amount of time",
    "start": "1084880",
    "end": "1090240"
  },
  {
    "text": "so you can create an iem role that has different permissions assigned and users can assume these roles to carry out",
    "start": "1090240",
    "end": "1095919"
  },
  {
    "text": "tasks as well as aws credentials users can authenticate into roles using like federation things like",
    "start": "1095919",
    "end": "1102640"
  },
  {
    "text": "that so there's no need to share credentials there's no need to store credentials and it can be used for cross-account um",
    "start": "1102640",
    "end": "1109840"
  },
  {
    "text": "intra-account delegation and federation",
    "start": "1109840",
    "end": "1114080"
  },
  {
    "text": "and permissions so another security best practice of ours is always granting lease privilege",
    "start": "1114880",
    "end": "1120240"
  },
  {
    "text": "which basically means rather than full access only grant what's needed so with iem as i mentioned before it's",
    "start": "1120240",
    "end": "1126160"
  },
  {
    "text": "fine-grained you can specify services and resources and this means that there's less chance of anyone",
    "start": "1126160",
    "end": "1132240"
  },
  {
    "text": "making mistakes and it's more granular control over to you item thanks louise",
    "start": "1132240",
    "end": "1139840"
  },
  {
    "text": "so next best practice to really talk about is the use of conditions and conditions really restrict the",
    "start": "1139840",
    "end": "1146640"
  },
  {
    "text": "privileged access further and it's an optional element if you recall that",
    "start": "1146640",
    "end": "1151840"
  },
  {
    "text": "json text json code before it's an optional element of the iam policy it really helps you",
    "start": "1151840",
    "end": "1158799"
  },
  {
    "text": "tighten the effective permissions and when you hear somebody say i only want to grant some",
    "start": "1158799",
    "end": "1163840"
  },
  {
    "text": "to access to something that just screams the use of a condition conditions can be",
    "start": "1163840",
    "end": "1169120"
  },
  {
    "text": "built with condition operators so that's like equal then or less than",
    "start": "1169120",
    "end": "1174640"
  },
  {
    "text": "to match the exact key and value so um key could be like string equals",
    "start": "1174640",
    "end": "1180799"
  },
  {
    "text": "ec2 instance type value can be like t4g um you know that the test instance",
    "start": "1180799",
    "end": "1186559"
  },
  {
    "text": "say just in your development account and this is great this can be enabled for any aws service api",
    "start": "1186559",
    "end": "1193280"
  },
  {
    "text": "and um i strongly recommend use of conditions to really tighten your policies down",
    "start": "1193280",
    "end": "1200559"
  },
  {
    "text": "next is using groups really so you might be seeing a trend here the",
    "start": "1200640",
    "end": "1206240"
  },
  {
    "text": "easier something is to manage the more secure and and less chance of errors you have to make here and",
    "start": "1206240",
    "end": "1212320"
  },
  {
    "text": "you know a group is just a collection of iem users and it's it's a way to attach policies",
    "start": "1212320",
    "end": "1217760"
  },
  {
    "text": "to multiple users at once and you know this allows you to manage access centrally by changing just",
    "start": "1217760",
    "end": "1224240"
  },
  {
    "text": "a a group's membership instead of updating say all the individual policies you know",
    "start": "1224240",
    "end": "1230799"
  },
  {
    "text": "when a user needs access to be changed definitely use groups in in your in your iem usage here",
    "start": "1230799",
    "end": "1237919"
  },
  {
    "text": "next if you have to configure a password which you know for console access we'll",
    "start": "1237919",
    "end": "1243440"
  },
  {
    "text": "talk about password usage shortly but if you have to configure it configure a strong password policy",
    "start": "1243440",
    "end": "1249840"
  },
  {
    "text": "and that means things like setting a minimum length having high password strength and",
    "start": "1249840",
    "end": "1255760"
  },
  {
    "text": "expiration and you know preventing reuse and more there's actually even more options",
    "start": "1255760",
    "end": "1261200"
  },
  {
    "text": "to select for a password policy in iam and this all helps prevent the you know uh",
    "start": "1261200",
    "end": "1268400"
  },
  {
    "text": "prevents you from compromising from from from your data it protects your data essentially so",
    "start": "1268400",
    "end": "1273760"
  },
  {
    "text": "um use a strong password policy next is to rotate your credentials",
    "start": "1273760",
    "end": "1280080"
  },
  {
    "text": "regularly if you do have long-lived long-lived credentials um you know like",
    "start": "1280080",
    "end": "1285360"
  },
  {
    "text": "access keys and passwords and you can't use roles you know to that automatically rotate",
    "start": "1285360",
    "end": "1291600"
  },
  {
    "text": "make sure you are rotating regularly so that reduces the whole business impact",
    "start": "1291600",
    "end": "1297039"
  },
  {
    "text": "if you're compromised and um you know we recommend using another service aws config",
    "start": "1297039",
    "end": "1303919"
  },
  {
    "text": "it has a managed rule to check for your your credential age and we'll also talk about this in",
    "start": "1303919",
    "end": "1309520"
  },
  {
    "text": "monitoring and how to make sure you you know you you are actually rotating if you think you're rotating",
    "start": "1309520",
    "end": "1316000"
  },
  {
    "text": "so lastly here is to monitor definitely be monitoring your",
    "start": "1316000",
    "end": "1321520"
  },
  {
    "text": "iem access and usage so we provide a whole host of",
    "start": "1321520",
    "end": "1326799"
  },
  {
    "text": "purpose-built tools for this like access analyzer and cloudtrail and cloudwatch",
    "start": "1326799",
    "end": "1332080"
  },
  {
    "text": "to give you you know alarms and alerts and awareness about this but one of the my favorite things about the",
    "start": "1332080",
    "end": "1337760"
  },
  {
    "text": "cloud is that you have full environmental access awareness there's there's no more hidden computer under a",
    "start": "1337760",
    "end": "1344159"
  },
  {
    "text": "desk somewhere in an office because you you can now enable full traceability and accountability",
    "start": "1344159",
    "end": "1350240"
  },
  {
    "text": "um of all of your your access to resources so um we'll also cover that shortly in",
    "start": "1350240",
    "end": "1357520"
  },
  {
    "text": "monitoring versus remediation but um yeah that's that's it for me for a sec",
    "start": "1357520",
    "end": "1364240"
  },
  {
    "text": "um thanks leiden so what we're going to go through now in this session is basically",
    "start": "1364480",
    "end": "1371039"
  },
  {
    "text": "design uh decisions as i didn't mention so when to use wash in your account",
    "start": "1371039",
    "end": "1377440"
  },
  {
    "text": "and it's not even often used one over the other it can often be used both so it really depends on your use case",
    "start": "1377440",
    "end": "1383520"
  },
  {
    "text": "here we have several frequently asked questions from our iem customers so we plan to go through each of these",
    "start": "1383520",
    "end": "1389600"
  },
  {
    "text": "with you and help you understand when to use one over the other or when to use both before we go ahead michael is there any",
    "start": "1389600",
    "end": "1396720"
  },
  {
    "text": "questions in the group chat uh hi louise yeah we do have a few",
    "start": "1396720",
    "end": "1404559"
  },
  {
    "text": "questions going on here uh we had uh joe desmond asking about",
    "start": "1404559",
    "end": "1409679"
  },
  {
    "text": "what happens if you lose or break your mfa device and i was able to",
    "start": "1409679",
    "end": "1415280"
  },
  {
    "text": "link them to an article about that in which they would have to possibly work with their",
    "start": "1415280",
    "end": "1420720"
  },
  {
    "text": "their account owner because they'll need access to the email and the phone number that was used to",
    "start": "1420720",
    "end": "1426320"
  },
  {
    "text": "register that account um actually just just to add there yeah it's your iem user or",
    "start": "1426320",
    "end": "1432640"
  },
  {
    "text": "role that actually um would say lose their brakes or mfa device if you just contact your administrator",
    "start": "1432640",
    "end": "1438880"
  },
  {
    "text": "they should be able to actually deactivate it for you and then you can just re-enable it again it's more if it's your your route",
    "start": "1438880",
    "end": "1444960"
  },
  {
    "text": "account or an administrator user that we do have a dedicated mfa team that you can fill out a form and they",
    "start": "1444960",
    "end": "1450720"
  },
  {
    "text": "should call you so yeah as michael said you need to have a phone number ready um for that but yeah",
    "start": "1450720",
    "end": "1457120"
  },
  {
    "text": "and then there's uh there's another question going back to the policies i don't know if you're going to be",
    "start": "1457120",
    "end": "1462400"
  },
  {
    "text": "covering this later or not but the spec 007 with regards to policies can you please",
    "start": "1462400",
    "end": "1468400"
  },
  {
    "text": "tell me what is the difference between global and service specific conditions",
    "start": "1468400",
    "end": "1474960"
  },
  {
    "text": "i didn't you want to so on global condition keys um",
    "start": "1474960",
    "end": "1482559"
  },
  {
    "text": "i don't have a smooth answer for this one actually uh louise do you wanna do you wanna give this one a stab yeah yeah um so so",
    "start": "1482559",
    "end": "1488960"
  },
  {
    "text": "basically global conditions are conditions that can be used by um loads",
    "start": "1488960",
    "end": "1494240"
  },
  {
    "text": "of different services as long as the services actually support them and they usually start with them",
    "start": "1494240",
    "end": "1499600"
  },
  {
    "text": "a prefix like aws where service specific conditions are created specifically for those",
    "start": "1499600",
    "end": "1505919"
  },
  {
    "text": "services so for example we have a lot of conditions that are specific to ec2 only",
    "start": "1505919",
    "end": "1512240"
  },
  {
    "text": "so they would have a prefix of ec2 in front of it or rds might have service specific conditions with rds in front of it so",
    "start": "1512240",
    "end": "1518960"
  },
  {
    "text": "the difference is that uh you can use service specific conditions for the service they are created for",
    "start": "1518960",
    "end": "1524559"
  },
  {
    "text": "you can use global conditions for multiple services as long as the service supports so we have loads of",
    "start": "1524559",
    "end": "1530080"
  },
  {
    "text": "documentation on what's supported and where per api which we can add into the group",
    "start": "1530080",
    "end": "1535279"
  },
  {
    "text": "chat as well all right great thank you very much",
    "start": "1535279",
    "end": "1541520"
  },
  {
    "text": "okay cool yeah thanks louise thanks michael and um thanks to the audience for your",
    "start": "1541520",
    "end": "1546640"
  },
  {
    "start": "1543000",
    "end": "1543000"
  },
  {
    "text": "questions let's hit one of my favorite topics here on you know iem users and federated users",
    "start": "1546640",
    "end": "1553200"
  },
  {
    "text": "and overwhelmingly i recommend use federated users where possible",
    "start": "1553200",
    "end": "1559840"
  },
  {
    "text": "federation means the creation of a trust relationship between an external identity provider and aws",
    "start": "1559840",
    "end": "1567120"
  },
  {
    "text": "and a federated user means instead of creating an iem user you're you can use your already existing",
    "start": "1567120",
    "end": "1573840"
  },
  {
    "text": "extern identities with your identity provider your idp and and so really we recommend you know",
    "start": "1573840",
    "end": "1580960"
  },
  {
    "text": "if you are if you're sticking to aim users that's only for the simplest environments where you don't you know say for example you have",
    "start": "1580960",
    "end": "1587279"
  },
  {
    "text": "a single aws account and you don't already have like a corporate identity provider",
    "start": "1587279",
    "end": "1592880"
  },
  {
    "text": "um active directory or our partners octa or ping",
    "start": "1592880",
    "end": "1598000"
  },
  {
    "text": "you know you can also use aws sso single sign-on as your identity store but really the the message here is to",
    "start": "1598000",
    "end": "1605279"
  },
  {
    "text": "avoid managing human users through to aws iem",
    "start": "1605279",
    "end": "1610400"
  },
  {
    "text": "you know im users are still acceptable here for um on-premise apps that need to access",
    "start": "1610400",
    "end": "1616080"
  },
  {
    "text": "aws apis and services and there's that case still exists",
    "start": "1616080",
    "end": "1621440"
  },
  {
    "text": "um but overall we provide a host of of tools to make this really really easy and on to that general theme of the",
    "start": "1621440",
    "end": "1628640"
  },
  {
    "text": "easier it is to manage the less chance for for issues to pop up so having an external source of truth your",
    "start": "1628640",
    "end": "1636000"
  },
  {
    "text": "identity provider like from your active directory or single sign-on um you know is is a strong benefit for",
    "start": "1636000",
    "end": "1643600"
  },
  {
    "text": "making you know so much easier to use and and and one password to remember instead of say",
    "start": "1643600",
    "end": "1649520"
  },
  {
    "text": "like 20 or 30. so that keeps you secure essentially",
    "start": "1649520",
    "end": "1654799"
  },
  {
    "text": "there's two other important use cases to mention here which is like your mobile apps or web app access",
    "start": "1654799",
    "end": "1660240"
  },
  {
    "text": "and those should always be federated so that's you know say scalable up to like millions of users",
    "start": "1660240",
    "end": "1665679"
  },
  {
    "text": "and you can use something like amazon cognito which uses like login with facebook or log in with google",
    "start": "1665679",
    "end": "1672000"
  },
  {
    "text": "log in with amazon through the security through saml 2.0 that that security assertion markup",
    "start": "1672000",
    "end": "1678720"
  },
  {
    "text": "language and the last kind of use case to talk about here generally is",
    "start": "1678720",
    "end": "1684559"
  },
  {
    "text": "you know delegating access to multiple accounts that's going to be using a federated users to assume iam roles",
    "start": "1684559",
    "end": "1692399"
  },
  {
    "text": "and um you know if i get any message across here it's um never share your security credentials",
    "start": "1692399",
    "end": "1699520"
  },
  {
    "text": "um it's so tempting and even in a small you know single adabus account with multiple devs you you want to share and",
    "start": "1699520",
    "end": "1705600"
  },
  {
    "text": "save you know credentials into your your password sharer but please create separate separate",
    "start": "1705600",
    "end": "1711919"
  },
  {
    "text": "users if if whatever you use im users or federated users strong preference to federated users but",
    "start": "1711919",
    "end": "1717039"
  },
  {
    "text": "please do not share the security credentials so just to illustrate this here this is",
    "start": "1717039",
    "end": "1723200"
  },
  {
    "start": "1722000",
    "end": "1722000"
  },
  {
    "text": "like your corporate user federation through aws single sign-on and you've got your idp your external",
    "start": "1723200",
    "end": "1729360"
  },
  {
    "text": "source of truth for all your identities and the bottom left here and your",
    "start": "1729360",
    "end": "1734399"
  },
  {
    "text": "your basically your user can log in and they're presented with their password they're presented",
    "start": "1734399",
    "end": "1739600"
  },
  {
    "text": "and they can access the aws single sign-on portal and here this already knows which",
    "start": "1739600",
    "end": "1746559"
  },
  {
    "text": "organizational unit they're in say they have access to their developer they have access to um",
    "start": "1746559",
    "end": "1753200"
  },
  {
    "text": "edit say two aws accounts here and they'll see that immediately listed there in their in",
    "start": "1753200",
    "end": "1759120"
  },
  {
    "text": "their single sign on portal they you know just one click and you can get acts management console access to",
    "start": "1759120",
    "end": "1764720"
  },
  {
    "text": "both of those accounts and what's also really really cool is you can give immediate access to the business",
    "start": "1764720",
    "end": "1771760"
  },
  {
    "text": "cloud apps they need say like slack or zoom and they're already logged in they still they haven't entered a separate",
    "start": "1771760",
    "end": "1777120"
  },
  {
    "text": "password anywhere yet and um lastly you can extend this as well to",
    "start": "1777120",
    "end": "1783279"
  },
  {
    "text": "any custom saml applications say you have your own internal applications or ones that aren't listed you know in",
    "start": "1783279",
    "end": "1790320"
  },
  {
    "text": "the the predefined lists as long as they're saml enabled um you can have",
    "start": "1790320",
    "end": "1795440"
  },
  {
    "text": "you can have that same single sign on access and the real benefit here is you may have heard of password fatigue",
    "start": "1795440",
    "end": "1800720"
  },
  {
    "text": "it this just gives the users a way way better user experience so it reduces that",
    "start": "1800720",
    "end": "1805919"
  },
  {
    "text": "security risk of you know i can't manage 30 passwords properly i mean it's it's a lot to manage so",
    "start": "1805919",
    "end": "1813600"
  },
  {
    "text": "this really takes away that that away next this is what i mentioned the mobile",
    "start": "1813600",
    "end": "1819840"
  },
  {
    "start": "1817000",
    "end": "1817000"
  },
  {
    "text": "app federation and um this is scalable up to millions and millions of users",
    "start": "1819840",
    "end": "1824960"
  },
  {
    "text": "where you know instead of creating millions of iem users um for for all of your your users you're",
    "start": "1824960",
    "end": "1832159"
  },
  {
    "text": "using uh essentially using amazon cognito to manage the um the tokenization and the authorization here",
    "start": "1832159",
    "end": "1838720"
  },
  {
    "text": "so step one in your mobile app or web app you redirect your your user to reuse an existing login they have say log in",
    "start": "1838720",
    "end": "1845600"
  },
  {
    "text": "with amazon if they're at an amazon account and um your app redirects them to",
    "start": "1845600",
    "end": "1851360"
  },
  {
    "text": "to exchange an id token for cognito token and this again is exchanged for a um",
    "start": "1851360",
    "end": "1858399"
  },
  {
    "text": "amazon sorry an aws security token service token um so the temporary credentials are given right at no point are permanent",
    "start": "1858399",
    "end": "1865840"
  },
  {
    "text": "credentials stored on their on their phone or on the device and lastly um",
    "start": "1865840",
    "end": "1871919"
  },
  {
    "text": "this this temporary credentials give you access to aws services such as in this case dynamodb to actually write to your",
    "start": "1871919",
    "end": "1878559"
  },
  {
    "text": "backend datastore and you can even do uh item level access to dynamodb based",
    "start": "1878559",
    "end": "1886399"
  },
  {
    "text": "on an on a cognito id so really secure just for that user to access exactly what they need to and it's all",
    "start": "1886399",
    "end": "1893039"
  },
  {
    "text": "parameterized and tokenized and it's a really really clean flow scalable up to millions of users so cool",
    "start": "1893039",
    "end": "1901679"
  },
  {
    "text": "let's quickly talk about access keys and passwords so if you have to use these long-lived",
    "start": "1901679",
    "end": "1907600"
  },
  {
    "text": "credentials um you know we've i've already established just how much",
    "start": "1907600",
    "end": "1912960"
  },
  {
    "text": "our strong preference for using federation or using roles for those temporary security credentials but if you do have to use you know these",
    "start": "1912960",
    "end": "1919519"
  },
  {
    "text": "long live security credentials let's quickly talk about these so um next slide please if you have an iam",
    "start": "1919519",
    "end": "1927760"
  },
  {
    "text": "user that you want to grant cox console access to they must have a password",
    "start": "1927760",
    "end": "1932880"
  },
  {
    "text": "created so that that that is requirement there um and if you have say",
    "start": "1932880",
    "end": "1939440"
  },
  {
    "text": "you know you have to give like my example of um an on-premise application that needs",
    "start": "1939440",
    "end": "1945120"
  },
  {
    "text": "to talk to aws um you want to grant programmatic access then then that's",
    "start": "1945120",
    "end": "1950240"
  },
  {
    "text": "that's via an access key and that can be done via api cli or sdks and that's where you'd give",
    "start": "1950240",
    "end": "1956559"
  },
  {
    "text": "that access key access to so in either case whatever you do",
    "start": "1956559",
    "end": "1961600"
  },
  {
    "text": "whichever one you you do need access to you can do either or or both and um make sure you do rotate the",
    "start": "1961600",
    "end": "1968880"
  },
  {
    "text": "credentials regularly so that means using to inform yourselves using the credential report you know to",
    "start": "1968880",
    "end": "1974640"
  },
  {
    "text": "regularly audit that um configuring that strong password policy and configuring you know the users to rotate",
    "start": "1974640",
    "end": "1981679"
  },
  {
    "text": "that uh their credentials themselves and and lastly i'm using our managed service aws config for a manage rule",
    "start": "1981679",
    "end": "1989039"
  },
  {
    "text": "to actually check and govern and make sure that you're governed correctly that you're not out of compliance there",
    "start": "1989039",
    "end": "1995919"
  },
  {
    "text": "this is simply showing you a sample policy the and some steps to to rotate your access keys here i won't",
    "start": "1996240",
    "end": "2002960"
  },
  {
    "text": "drill into this entirely but essentially it's it's how to safely um retire the existing credentials",
    "start": "2002960",
    "end": "2009279"
  },
  {
    "text": "and then update to use the new credentials and set the first credentials to be inactive and um and deleting the very first set",
    "start": "2009279",
    "end": "2015519"
  },
  {
    "text": "of credentials so this this would be created for that iem user and",
    "start": "2015519",
    "end": "2020720"
  },
  {
    "text": "um at the i do definitely recommend creating that config manage rule um default is 90 days um some companies",
    "start": "2020720",
    "end": "2029279"
  },
  {
    "text": "like 180 days etc it's it is a preference there um but we'll if we have time at the end",
    "start": "2029279",
    "end": "2035840"
  },
  {
    "text": "we'll also show you how some of this credential and that that config manage rule can um can alert you to out of",
    "start": "2035840",
    "end": "2042399"
  },
  {
    "text": "compliance configurations so over t louise thanks aidan um",
    "start": "2042399",
    "end": "2049200"
  },
  {
    "text": "so this question was asked earlier but just to go over it again the difference between inline policies and managed",
    "start": "2049200",
    "end": "2054638"
  },
  {
    "text": "policies and when to use one or the other so an inline policy as i mentioned it's a strict",
    "start": "2054639",
    "end": "2060320"
  },
  {
    "start": "2057000",
    "end": "2057000"
  },
  {
    "text": "one-to-one relationship between the policy and the principle so that just basically means that the",
    "start": "2060320",
    "end": "2065440"
  },
  {
    "text": "policy is dedicated to that principle whether it's a user or role and you can't attach the policy to any",
    "start": "2065440",
    "end": "2071440"
  },
  {
    "text": "other principles which means that you can't ever attach the policy um if you don't want to like in if it's wrong or anything like that",
    "start": "2071440",
    "end": "2078800"
  },
  {
    "text": "and uh yeah it also means that when the principal is deleted then the policy will also be deleted then a managed policy it's",
    "start": "2078800",
    "end": "2086240"
  },
  {
    "text": "reusable so that means that if you create the policy many different users and roles can",
    "start": "2086240",
    "end": "2092158"
  },
  {
    "text": "actually use the policy and when you change that policy the change is applied to all principles that",
    "start": "2092159",
    "end": "2097680"
  },
  {
    "text": "the policy is attached to so that's central change management as well and there's versioning",
    "start": "2097680",
    "end": "2104000"
  },
  {
    "text": "in rollback which means that when you actually save your policy you have different versions of it so if there's ever a reason why you would need to go",
    "start": "2104000",
    "end": "2110400"
  },
  {
    "text": "back to previous version that's possible to do um with managed policies aws managed policies i",
    "start": "2110400",
    "end": "2117760"
  },
  {
    "text": "mentioned this as well previously where basically you have uh if if there's any change if there's any",
    "start": "2117760",
    "end": "2124240"
  },
  {
    "text": "policy that needs to be updated or if there's any new service or api introduced amazon takes care of all of that and",
    "start": "2124240",
    "end": "2130000"
  },
  {
    "text": "they update the policies on your behalf so there's no work there required of you and also a larger policy size so",
    "start": "2130000",
    "end": "2137920"
  },
  {
    "text": "managed policies have a limitation of 6 000 characters whereas in-line policies are 2048 characters so",
    "start": "2137920",
    "end": "2145680"
  },
  {
    "text": "this means that if you ever hit the limit with inline policies we suggest switching to manage policies",
    "start": "2145680",
    "end": "2151680"
  },
  {
    "text": "and adding managed policies instead so that would be another reason as well besides the one-to-one relationship",
    "start": "2151680",
    "end": "2160160"
  },
  {
    "text": "and when should i use identity-based policies and resource-based policies so i mentioned this earlier when",
    "start": "2160480",
    "end": "2166560"
  },
  {
    "text": "i gave the policy examples but basically the difference here is that identity-based policies are applied",
    "start": "2166560",
    "end": "2174800"
  },
  {
    "start": "2174000",
    "end": "2174000"
  },
  {
    "text": "oh sorry i'll start resource based policies so they are applied directly to a resource so whether that",
    "start": "2174800",
    "end": "2180160"
  },
  {
    "text": "resource is an s3 bucket policy sqsq policy sms topic policy kms key",
    "start": "2180160",
    "end": "2186079"
  },
  {
    "text": "policy there's there's so many different types of resource-based policies and you basically can control access to",
    "start": "2186079",
    "end": "2192400"
  },
  {
    "text": "those resources then an identity-based policy is a policy that you would attach to an iem",
    "start": "2192400",
    "end": "2198000"
  },
  {
    "text": "user role or group and this can be managed or inline as we just saw previously",
    "start": "2198000",
    "end": "2203760"
  },
  {
    "text": "and this basically means that you are controlling what the user or role is authorized to",
    "start": "2203760",
    "end": "2209520"
  },
  {
    "text": "actually do and then the resource-based policy is controlling who has access to that resource so they",
    "start": "2209520",
    "end": "2216240"
  },
  {
    "text": "can actually work together really well um as you saw previously there was an iem policy",
    "start": "2216240",
    "end": "2221440"
  },
  {
    "text": "for an iem user and there was a resource-based policy for an s3 bucket and they can all be used together",
    "start": "2221440",
    "end": "2226880"
  },
  {
    "text": "to define whether or not the user has access to access the bucket and both these types of policies can be",
    "start": "2226880",
    "end": "2233599"
  },
  {
    "text": "used for same account or across account and to you aiden thanks louise so",
    "start": "2233599",
    "end": "2242160"
  },
  {
    "text": "another uh big topic here is um having one aws account or multiple aws accounts",
    "start": "2242160",
    "end": "2249040"
  },
  {
    "text": "and um you know really a single aws account should be for when you are",
    "start": "2249040",
    "end": "2254160"
  },
  {
    "text": "dealing with the simplest environments and you know this is when next slide please this is when you have",
    "start": "2254160",
    "end": "2260800"
  },
  {
    "text": "no need to isolate your projects products and teams and you know you have no real need for",
    "start": "2260800",
    "end": "2265920"
  },
  {
    "text": "for needing to break up that break up your cost if you have multiple apps and teams working in one account what comes to mind is say",
    "start": "2265920",
    "end": "2275839"
  },
  {
    "text": "having a dev test or like a hobby account and or you're a contractor and you've you're",
    "start": "2275839",
    "end": "2281760"
  },
  {
    "text": "delivering a full stack app that will be you know later invited to your customers aws organization",
    "start": "2281760",
    "end": "2287680"
  },
  {
    "text": "so those are some cases where a single a single account makes sense for most customers multiple accounts is",
    "start": "2287680",
    "end": "2293920"
  },
  {
    "text": "the right way to go and this gives you that full isolation between projects teams and environments and",
    "start": "2293920",
    "end": "2301440"
  },
  {
    "text": "you know for example even if you have a central logging account that gives you access to your your",
    "start": "2301440",
    "end": "2307119"
  },
  {
    "text": "auditing data like writing your cloud trail cloud shell trails and also",
    "start": "2307119",
    "end": "2312320"
  },
  {
    "text": "you know your backups your critical backups can be written to a separate aws account and um you know this also",
    "start": "2312320",
    "end": "2318400"
  },
  {
    "text": "gives you consolidated billing you know you can have a payer account um with nothing in it except your your bill that all the other",
    "start": "2318400",
    "end": "2324720"
  },
  {
    "text": "accounts are linked to and it also helps you",
    "start": "2324720",
    "end": "2330160"
  },
  {
    "text": "break out your costs you know separate business unit did spent this much what was the cost of",
    "start": "2330160",
    "end": "2335200"
  },
  {
    "text": "goods etc so let's jump to the next slide here and i'll talk about some you know",
    "start": "2335200",
    "end": "2342000"
  },
  {
    "start": "2341000",
    "end": "2341000"
  },
  {
    "text": "cross-account access consideration let's say we have decided to go across account and um we'll use multiple accounts",
    "start": "2342000",
    "end": "2348880"
  },
  {
    "text": "there's two major models we see with respect to like iam role fed at ryan roles and federation",
    "start": "2348880",
    "end": "2355599"
  },
  {
    "text": "um the first is a direct um a direct model and this is where you",
    "start": "2355599",
    "end": "2362000"
  },
  {
    "text": "have your users directly assume roles into sub aws accounts after being",
    "start": "2362000",
    "end": "2367040"
  },
  {
    "text": "authenticated from an identity provider and the second is a hub and spoke model",
    "start": "2367040",
    "end": "2373440"
  },
  {
    "text": "where you have a central identity account and and users assume federated roles first into that identity",
    "start": "2373440",
    "end": "2380000"
  },
  {
    "text": "account and then perform a second role assumption into sub-accounts",
    "start": "2380000",
    "end": "2385280"
  },
  {
    "text": "so i recommend the direct model for for most because it is it's much",
    "start": "2385280",
    "end": "2390640"
  },
  {
    "text": "simpler to configure and allows you to treat your corporate identity provider as the source of truth as opposed to having",
    "start": "2390640",
    "end": "2397920"
  },
  {
    "text": "you know access relationships defined in that one hub aws account",
    "start": "2397920",
    "end": "2403119"
  },
  {
    "text": "it's also less of a hop it's one less hop assuming two roles to get your credentials",
    "start": "2403119",
    "end": "2408560"
  },
  {
    "text": "needed for for operating in that account and even some even simpler your users only",
    "start": "2408560",
    "end": "2413839"
  },
  {
    "text": "need to bookmark one item as opposed to to multiple hub the the hub does have its benefits",
    "start": "2413839",
    "end": "2420240"
  },
  {
    "text": "though if you're creating lots of beta bus accounts in an automated fashion we're talking you know say hundreds of",
    "start": "2420240",
    "end": "2426800"
  },
  {
    "text": "accounts and and these may be short-lived accounts like an account vending machine for",
    "start": "2426800",
    "end": "2431839"
  },
  {
    "text": "example um style that you know creates and destroys accounts frequently",
    "start": "2431839",
    "end": "2437200"
  },
  {
    "text": "you you only have to manage update roles in that one hub account and um really this is if you've",
    "start": "2437200",
    "end": "2443280"
  },
  {
    "text": "built a lot of strong automation to alleviate some of the added complexity and trade-offs i mentioned",
    "start": "2443280",
    "end": "2448400"
  },
  {
    "text": "of the direct model and um and you want to centralize access into aws with you know and you",
    "start": "2448400",
    "end": "2454480"
  },
  {
    "text": "say you don't even want to use an idp so that's where the hub model would fit in um",
    "start": "2454480",
    "end": "2460079"
  },
  {
    "text": "another consideration is when you're mapping all of your your your cloudtrail events here um",
    "start": "2460079",
    "end": "2468960"
  },
  {
    "text": "it's it's you have to you have to take that a little bit of an extra mental step to um to see which api",
    "start": "2468960",
    "end": "2475680"
  },
  {
    "text": "events were created within your federated role um it also generates a much larger cloudtrail event",
    "start": "2475680",
    "end": "2481440"
  },
  {
    "text": "and that you need to factor in the recipient account id as opposed to just seeing like the the direct sample api request that's you",
    "start": "2481440",
    "end": "2488319"
  },
  {
    "text": "know say right in your in your one um cloudtrail bucket so i recommend using amazon athena to",
    "start": "2488319",
    "end": "2496880"
  },
  {
    "text": "query your cloudtrail because you can write more specific sql queries um and a single query can span you know",
    "start": "2496880",
    "end": "2503040"
  },
  {
    "text": "all your aws accounts so um yeah uh",
    "start": "2503040",
    "end": "2508319"
  },
  {
    "text": "lastly the last consideration here is roll chaining durations um it's a one-hour duration limit um if",
    "start": "2508319",
    "end": "2515599"
  },
  {
    "text": "you're if you're chaining across across accounts uh via cli or api um",
    "start": "2515599",
    "end": "2520800"
  },
  {
    "text": "so be aware of that but that that that one hour duration does not apply if it's im rolls",
    "start": "2520800",
    "end": "2526480"
  },
  {
    "text": "um running on an ec2 instance so your app is running on ec2 and",
    "start": "2526480",
    "end": "2533520"
  },
  {
    "start": "2533000",
    "end": "2533000"
  },
  {
    "text": "just really quick illustration of of cross account the simplest example of cross account access um i",
    "start": "2533520",
    "end": "2539440"
  },
  {
    "text": "could i could find here and you know we're simply here we want the developers in the developers group to be able to",
    "start": "2539440",
    "end": "2546800"
  },
  {
    "text": "access a production s3 bucket in a different account so three steps",
    "start": "2546800",
    "end": "2552400"
  },
  {
    "text": "you know you in the first part in you create a role in your production account and you",
    "start": "2552400",
    "end": "2559040"
  },
  {
    "text": "this role is used to establish that trust relationship between the developer account and the",
    "start": "2559040",
    "end": "2564480"
  },
  {
    "text": "production account and you create the role create the policy and",
    "start": "2564480",
    "end": "2570079"
  },
  {
    "text": "next you have to grant step step two you have to grant access to this role and you make sure that it's only",
    "start": "2570079",
    "end": "2575599"
  },
  {
    "text": "specifying your developers group not your testers group you may have multiple groups in your",
    "start": "2575599",
    "end": "2580960"
  },
  {
    "text": "in your development account and lastly is to test this is to test this scenario",
    "start": "2580960",
    "end": "2588160"
  },
  {
    "text": "out by switching the roles in your development account and um",
    "start": "2588160",
    "end": "2593359"
  },
  {
    "text": "we've created a role that the update app role that you see here and um you can test via the console or",
    "start": "2593359",
    "end": "2600079"
  },
  {
    "text": "the cli or the api and just verify that definitely i have access to the the bucket but only for",
    "start": "2600079",
    "end": "2607920"
  },
  {
    "text": "the developers group and not the testers group and the link here has a quick tutorial on how to",
    "start": "2607920",
    "end": "2613520"
  },
  {
    "text": "accomplish this in like 10 15 minutes it's really straightforward simple example here",
    "start": "2613520",
    "end": "2619200"
  },
  {
    "text": "um this is a little bit more complicated example of the um a more fleshed out example here of",
    "start": "2619200",
    "end": "2627119"
  },
  {
    "text": "the hub and spoke that i mentioned before and here we're seeing yeah the central security account we're",
    "start": "2627119",
    "end": "2634640"
  },
  {
    "text": "seeing a user get authorized externally via their external identity provider",
    "start": "2634640",
    "end": "2640240"
  },
  {
    "text": "and um you know he does have to do the extra hop to get to his role a in a different aws",
    "start": "2640240",
    "end": "2646960"
  },
  {
    "text": "accounts and the orange line you're seeing on the the right hand side there",
    "start": "2646960",
    "end": "2652560"
  },
  {
    "text": "that's an example of that roll chaining with that one hour one hour duration",
    "start": "2652560",
    "end": "2658000"
  },
  {
    "text": "there so just to illustrate a little bit of it he's accessing his ec2 his s3 and his",
    "start": "2658000",
    "end": "2665520"
  },
  {
    "text": "dynamodb assets in different accounts here great so let's jump to",
    "start": "2665520",
    "end": "2673920"
  },
  {
    "start": "2672000",
    "end": "2672000"
  },
  {
    "text": "monitoring and remediation so monitoring is all about detection and",
    "start": "2673920",
    "end": "2679119"
  },
  {
    "text": "awareness and everyone should have monitoring in place for for their aws accounts it's a really",
    "start": "2679119",
    "end": "2685040"
  },
  {
    "text": "important really important process and you know the general steps here is like",
    "start": "2685040",
    "end": "2690640"
  },
  {
    "text": "monitor detect and respond and and usually um you know remediation",
    "start": "2690640",
    "end": "2696319"
  },
  {
    "text": "uh at from the get-go is is oftentimes a manual process and um you know that this is i",
    "start": "2696319",
    "end": "2703280"
  },
  {
    "text": "in my opinion is like an evolution that the more cloud mature you become or you're the higher your compliance requirements you you work",
    "start": "2703280",
    "end": "2709599"
  },
  {
    "text": "your way up to more of these automated remediation and preventions so aws has a number of great tools to",
    "start": "2709599",
    "end": "2716480"
  },
  {
    "text": "help here like i am access analyzer to give you awareness to external",
    "start": "2716480",
    "end": "2721599"
  },
  {
    "text": "principles that access that are outside of your zone of trust and so outside of your aws organization",
    "start": "2721599",
    "end": "2728079"
  },
  {
    "text": "or outside of your account so external principles um also",
    "start": "2728079",
    "end": "2733440"
  },
  {
    "text": "i am access advisor so your last access reports in in conjunction with your credential reports really important to",
    "start": "2733440",
    "end": "2740720"
  },
  {
    "text": "help you build and tighten up your all of your iem configuration so that's that's awareness",
    "start": "2740720",
    "end": "2748079"
  },
  {
    "text": "and what's also really important is so cloudtrail gives you all your api access right you can use this in",
    "start": "2748079",
    "end": "2755440"
  },
  {
    "text": "conjunction with cloudwatch alarms so this can give you real-time awareness of all your api",
    "start": "2755440",
    "end": "2761119"
  },
  {
    "text": "calls like for example someone's logged in with root you want to be alerted of this or",
    "start": "2761119",
    "end": "2766560"
  },
  {
    "text": "someone has disabled mfa you want to be alerted of this and i just want to call out there's",
    "start": "2766560",
    "end": "2772160"
  },
  {
    "text": "purpose built services that we have such as database config for",
    "start": "2772160",
    "end": "2777440"
  },
  {
    "text": "for configuration rule management amazon macy for s3 private information",
    "start": "2777440",
    "end": "2784400"
  },
  {
    "text": "personal identifiable information awareness aws guard duty to to monitor",
    "start": "2784400",
    "end": "2789520"
  },
  {
    "text": "your dns logs vpc full logs um etc and security hub to kind of tie",
    "start": "2789520",
    "end": "2795359"
  },
  {
    "text": "everything together and aggregate we should talk about prevention",
    "start": "2795359",
    "end": "2802160"
  },
  {
    "text": "you know control tower we have a whole suite of also dedicated governance tools control tower",
    "start": "2802160",
    "end": "2809200"
  },
  {
    "text": "you know service catalog organizational secure control policies systems manager these are all dedicated",
    "start": "2809200",
    "end": "2816720"
  },
  {
    "text": "services that help manage and give you good really good guardrails here and that's a part of prevention",
    "start": "2816720",
    "end": "2824560"
  },
  {
    "text": "but also remediation prevention it brings up event driven architectures where you",
    "start": "2824560",
    "end": "2829920"
  },
  {
    "text": "combine multiple services and data sources with automation and",
    "start": "2829920",
    "end": "2836240"
  },
  {
    "text": "and you know this example you know your your sources could be like cloudtrail",
    "start": "2836240",
    "end": "2841359"
  },
  {
    "text": "um or config and if we go to the next slide i can show us a really cool architecture of involving",
    "start": "2841359",
    "end": "2847920"
  },
  {
    "start": "2847000",
    "end": "2847000"
  },
  {
    "text": "mediation here and basically you've got new objects",
    "start": "2847920",
    "end": "2853680"
  },
  {
    "text": "being written in a user portal your customers are uploading they're uploading say forms for you and",
    "start": "2853680",
    "end": "2862079"
  },
  {
    "text": "this triggers a cloudwatch event formerly or an event eventbridge event formerly",
    "start": "2862079",
    "end": "2867280"
  },
  {
    "text": "cloudwatch events and that can invoke a lambda and this can create a sensitive um this",
    "start": "2867280",
    "end": "2873280"
  },
  {
    "text": "data discovery job so you say you you want to make sure that there's no credit card numbers or social security numbers or anything",
    "start": "2873280",
    "end": "2880000"
  },
  {
    "text": "inappropriate in the uploads and um you know before this this sensitive data",
    "start": "2880000",
    "end": "2885839"
  },
  {
    "text": "gets spilled into say hundreds of servers or tons of different workflows",
    "start": "2885839",
    "end": "2891119"
  },
  {
    "text": "and also you can have sns to inform the rest of the pipeline to stop it once the",
    "start": "2891119",
    "end": "2896400"
  },
  {
    "text": "results of the macy discovery job are there so um there's a there's a whole re",
    "start": "2896400",
    "end": "2901440"
  },
  {
    "text": "invent our video from a fellow tam on this topic event data driven security using amazon macy so just shout",
    "start": "2901440",
    "end": "2908800"
  },
  {
    "text": "out to that in the links if this interests you this topic with macy",
    "start": "2908800",
    "end": "2914000"
  },
  {
    "text": "um but at this point i think we have enough time for our um let's see let's see actually",
    "start": "2914000",
    "end": "2921520"
  },
  {
    "text": "michael do we have questions at this point um",
    "start": "2921520",
    "end": "2926640"
  },
  {
    "text": "let's see so no it looks like we have answered all of the questions",
    "start": "2930880",
    "end": "2936000"
  },
  {
    "text": "please feel free to drop a question in the chat if uh if i did not",
    "start": "2936000",
    "end": "2941760"
  },
  {
    "text": "and or if uh louise or ayden did not so i'm i think uh we've got just enough",
    "start": "2941760",
    "end": "2949440"
  },
  {
    "text": "time here to to maybe squeeze in that last demo",
    "start": "2949440",
    "end": "2954400"
  },
  {
    "text": "great i'll just get it up there",
    "start": "2955359",
    "end": "2971838"
  },
  {
    "text": "okay so here is our demo oh sorry can you see that",
    "start": "2979200",
    "end": "2985839"
  },
  {
    "text": "yes okay so here is our demo on config and",
    "start": "2989760",
    "end": "2997520"
  },
  {
    "text": "let me just try get rid of that buy right there for a second yep um so yeah so this",
    "start": "2997520",
    "end": "3004960"
  },
  {
    "text": "config is our service where basically you can have it's like a managed compliance service",
    "start": "3004960",
    "end": "3011520"
  },
  {
    "text": "it monitors and records your aws resources configurations and allows you to create rules for",
    "start": "3011520",
    "end": "3017440"
  },
  {
    "text": "evaluation which is what we're going to be doing now on the rules page here and so what you can do is you can create",
    "start": "3017440",
    "end": "3023280"
  },
  {
    "text": "a rule against your resources and it will let you know if it's compliant with your desired",
    "start": "3023280",
    "end": "3029280"
  },
  {
    "text": "configurations so for the purpose of this we're going to create an iem one",
    "start": "3029280",
    "end": "3034319"
  },
  {
    "text": "and we're going to do uh so you're going to go up here and click add rule and specify rule type so you can have",
    "start": "3034319",
    "end": "3041760"
  },
  {
    "text": "aws managed uh yeah you can have custom rules or you can have aws manage",
    "start": "3041760",
    "end": "3048240"
  },
  {
    "text": "rules so custom rules like custom policies you can make specific to your account using your own script and a lambda",
    "start": "3048240",
    "end": "3054160"
  },
  {
    "text": "function here we're going to use access keys rotated so this is um this is basically it checks",
    "start": "3054160",
    "end": "3061040"
  },
  {
    "text": "whether the iem active keys associated with your user are rotated within a specific number of",
    "start": "3061040",
    "end": "3066480"
  },
  {
    "text": "days so let's say you want to make sure for compliance reasons that all access keys are rotated within 90 days",
    "start": "3066480",
    "end": "3072720"
  },
  {
    "text": "you can use this rule to make sure that you're compliant with this throughout your whole account for",
    "start": "3072720",
    "end": "3077920"
  },
  {
    "text": "all of your users so here we're going to create a rule and we can specify the frequency for",
    "start": "3077920",
    "end": "3083280"
  },
  {
    "text": "config to check this so we're going to say 12 hours and we're going to have as 90 days so the maximum you can go without rotating",
    "start": "3083280",
    "end": "3089920"
  },
  {
    "text": "your keys would be 90 days that's the rule added there and now we're going to add a remediation for",
    "start": "3089920",
    "end": "3096160"
  },
  {
    "text": "this so we click back into the rule and we're going to go up to actions",
    "start": "3096160",
    "end": "3101599"
  },
  {
    "text": "on the right side and manage remediation so here you have automatic or manual",
    "start": "3101599",
    "end": "3107920"
  },
  {
    "text": "remediation we're going to click automatic and we're going to click sns publish sns",
    "start": "3107920",
    "end": "3113599"
  },
  {
    "text": "notification so what this is going to do is it's going to notify us whenever a user has gone 90 days without",
    "start": "3113599",
    "end": "3120240"
  },
  {
    "text": "um without rotating their keys so as you can see here it's already",
    "start": "3120240",
    "end": "3125920"
  },
  {
    "text": "pre-filled in so here is your topic arn for sns",
    "start": "3125920",
    "end": "3132720"
  },
  {
    "text": "and your message so we're going to say rotate your access keys and then also your roles so the role",
    "start": "3133599",
    "end": "3140559"
  },
  {
    "text": "here is at aws service role for config remediation and i'm actually just going to swap this out and add the arn this",
    "start": "3140559",
    "end": "3147520"
  },
  {
    "text": "should always be the role a or n so there we go that's saved and now you can see the config rule here",
    "start": "3147520",
    "end": "3153920"
  },
  {
    "text": "and this is all so 90 days it should be rotated that's the maximum we can do",
    "start": "3153920",
    "end": "3159760"
  },
  {
    "text": "before getting notified and if you click into the remediation action here",
    "start": "3159760",
    "end": "3164800"
  },
  {
    "text": "it's going to show you that within 90 days the sns topic is going to notify you",
    "start": "3164800",
    "end": "3172079"
  },
  {
    "text": "uh via email that's the end point that a user's keys have not been rotated",
    "start": "3172079",
    "end": "3178839"
  },
  {
    "text": "so yep there we go",
    "start": "3178839",
    "end": "3183040"
  },
  {
    "text": "all right louise thank you very much and ayden as well for talking to us today about aws identity and access",
    "start": "3192160",
    "end": "3200319"
  },
  {
    "text": "management best practices we've covered a lot of different topics from",
    "start": "3200319",
    "end": "3205359"
  },
  {
    "text": "monitoring and remediation talking about iam users and federation access keys inline",
    "start": "3205359",
    "end": "3212000"
  },
  {
    "text": "policies bandage policies resource policies identity policy and multiple account structures",
    "start": "3212000",
    "end": "3218319"
  },
  {
    "text": "we've really covered the gamut that was definitely a a lot of content to cover and thank",
    "start": "3218319",
    "end": "3224480"
  },
  {
    "text": "you both very much for doing such a great job doing it uh for all of you if there are any",
    "start": "3224480",
    "end": "3230079"
  },
  {
    "text": "questions which we did not answer today you can post your questions",
    "start": "3230079",
    "end": "3235200"
  },
  {
    "text": "on forums.aws.amazon.com or email us at the",
    "start": "3235200",
    "end": "3242400"
  },
  {
    "text": "address shown on the screen there casey dash live at amazon.com we do want to hear from",
    "start": "3242400",
    "end": "3249119"
  },
  {
    "text": "you so tell us what else you would like to see for future topics",
    "start": "3249119",
    "end": "3254240"
  },
  {
    "text": "on the show thanks for joining aws knowledge center live happy cloud computing",
    "start": "3254240",
    "end": "3261440"
  },
  {
    "text": "thank you bye",
    "start": "3261520",
    "end": "3264880"
  }
]