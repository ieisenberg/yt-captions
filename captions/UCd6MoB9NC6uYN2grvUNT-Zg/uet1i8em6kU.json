[
  {
    "text": "In this video, you’ll see how to simplify app refactoring\nwith AWS Migration Hub Refactor Spaces.",
    "start": "80",
    "end": "5154"
  },
  {
    "text": "With this feature, you can quickly set up an infrastructure\nfor refactoring, rewriting and rearchitecting apps,",
    "start": "5709",
    "end": "11036"
  },
  {
    "text": "operate these apps at scale\nregardless of app changes",
    "start": "11036",
    "end": "13742"
  },
  {
    "text": "and focus on delivering value from refactoring \nwithout having to create the environment.",
    "start": "13742",
    "end": "17486"
  },
  {
    "text": "To get started, let’s navigate to AWS \nMigration Hub and open Refactor Spaces.",
    "start": "19726",
    "end": "24000"
  },
  {
    "text": "AWS Migration Hub Refactor Spaces is the starting point\nfor incremental application refactoring to microservices.",
    "start": "26837",
    "end": "32603"
  },
  {
    "text": "Before we create our refactor environment,\nlet’s look at the application we are going to refactor.",
    "start": "32885",
    "end": "37045"
  },
  {
    "text": "For the purposes of this example, our application \nis an online store called The Unicorn Shop.",
    "start": "38025",
    "end": "42345"
  },
  {
    "text": "The Unicorn Shop is a typical monolithic application,\nand we’d like to break out two pieces of key functionality.",
    "start": "43254",
    "end": "48496"
  },
  {
    "text": "The first is the catalog of products for sale.",
    "start": "48876",
    "end": "50996"
  },
  {
    "text": "The second is the shopping cart.",
    "start": "51336",
    "end": "52694"
  },
  {
    "text": "We want these two services to be independent of each\nother for scalability and development purposes.",
    "start": "53363",
    "end": "57503"
  },
  {
    "text": "Let’s go back to Refactor Spaces \nand create an environment.",
    "start": "58146",
    "end": "60745"
  },
  {
    "text": "An environment is a multi-account \nnetwork fabric consisting of peered VPCs.",
    "start": "63000",
    "end": "66857"
  },
  {
    "text": "We’ll call this environment “UniShop.”",
    "start": "67484",
    "end": "69310"
  },
  {
    "text": "We’ll call our application “UnicornStore.”",
    "start": "74126",
    "end": "76206"
  },
  {
    "text": "Next, we’ll select the application’s proxy VPC.",
    "start": "79438",
    "end": "81998"
  },
  {
    "text": "The proxy lets the front-end application use a \nsingle endpoint to contact multiple services.",
    "start": "82716",
    "end": "87000"
  },
  {
    "text": "If an application is made up of multiple AWS accounts,",
    "start": "89215",
    "end": "91962"
  },
  {
    "text": "we can share the refractor environment and\nits application with other AWS principals.",
    "start": "91962",
    "end": "95883"
  },
  {
    "text": "Refactor Spaces then sets up the networking fabric\nthat allows those services to communicate seamlessly.",
    "start": "96468",
    "end": "100987"
  },
  {
    "text": "In this case, let’s move on \nand create the environment.",
    "start": "101797",
    "end": "103908"
  },
  {
    "text": "Now that our environment and application have \nbeen created, let’s drill into the application.",
    "start": "111467",
    "end": "115096"
  },
  {
    "text": "The first thing we want to do is create a proxy\nthat will pass through to the existing monolith.",
    "start": "116866",
    "end": "120590"
  },
  {
    "text": "To do that, let’s create a service.",
    "start": "120717",
    "end": "122255"
  },
  {
    "text": "We’ll call it “Legacy.”",
    "start": "124515",
    "end": "125622"
  },
  {
    "text": "Next, we’ll select the VPC where our current service\nresides and specify the existing service endpoint.",
    "start": "129668",
    "end": "134476"
  },
  {
    "text": "Now we’ll set this as the application’s \ndefault route and create the service.",
    "start": "138167",
    "end": "141391"
  },
  {
    "text": "We’ve created our proxy, but our default route is simply routing\ntraffic straight through our monolithic application as before.",
    "start": "142374",
    "end": "147573"
  },
  {
    "text": "Let’s return to the application.",
    "start": "148645",
    "end": "149925"
  },
  {
    "text": "The development team for The Unicorn Store has been busy refactoring\nout the application’s catalog and shopping cart capabilities.",
    "start": "153264",
    "end": "159024"
  },
  {
    "text": "The new microservices were deployed into our serverless\ncontainer service, Amazon ECS on AWS Fargate.",
    "start": "159632",
    "end": "165158"
  },
  {
    "text": "Let’s navigate to Amazon Elastic Container\nService (Amazon ECS) and take a look.",
    "start": "165820",
    "end": "169918"
  },
  {
    "text": "Next, we’ll specify the VPC \nendpoint for the catalog service.",
    "start": "172046",
    "end": "175203"
  },
  {
    "text": "Here are our cart service and catalog service.",
    "start": "176645",
    "end": "178805"
  },
  {
    "text": "Next, we’ll begin routing the functionality in our monolithic\napplication to these distinct microservices.",
    "start": "179360",
    "end": "184362"
  },
  {
    "text": "Before that, let's quickly define what \nwe mean by microservices and monolith.",
    "start": "187007",
    "end": "190920"
  },
  {
    "text": "In this context, our Unicorn store is a legacy monolith application\nwhere all the functionality and components are tied together,",
    "start": "191406",
    "end": "197491"
  },
  {
    "text": "and thus must be deployed together.",
    "start": "197491",
    "end": "198933"
  },
  {
    "text": "As part of this demonstration, we're splitting out key components of\nthis legacy monolith and creating independently deployable microservices,",
    "start": "199586",
    "end": "205966"
  },
  {
    "text": "so we're able to easily scale those\nindividual components as needed.",
    "start": "205966",
    "end": "209086"
  },
  {
    "text": "To create these microservices, let’s go back \nto Refactor Spaces to start the process.",
    "start": "211996",
    "end": "216142"
  },
  {
    "text": "We’ll call this one “Catalog service.”",
    "start": "218844",
    "end": "220553"
  },
  {
    "text": "Let’s select a VPC to add to the \nenvironment’s network bridge.",
    "start": "224435",
    "end": "227315"
  },
  {
    "text": "Let’s also add a health check \nendpoint for this service.",
    "start": "229494",
    "end": "231843"
  },
  {
    "text": "Let’s enter a source path for \nthe route and create the service.",
    "start": "237685",
    "end": "240325"
  },
  {
    "text": "Now that the route has been provisioned,",
    "start": "243605",
    "end": "245045"
  },
  {
    "text": "let’s go to The Unicorn Shop and refresh the \npage to ensure our catalog is still working.",
    "start": "245045",
    "end": "249000"
  },
  {
    "text": "Our catalog is still being serviced,",
    "start": "250435",
    "end": "252275"
  },
  {
    "text": "but let’s verify that it’s with the new \nservice we just provisioned and not the old.",
    "start": "252275",
    "end": "255668"
  },
  {
    "text": "To do that, we’ll navigate to CloudWatch\nand take a look at our logs.",
    "start": "256195",
    "end": "259132"
  },
  {
    "text": "Let’s find the latest log.",
    "start": "268624",
    "end": "269824"
  },
  {
    "text": "Here we can see that our health \ncheck endpoints are working properly.",
    "start": "276774",
    "end": "279289"
  },
  {
    "text": "Here’s our new catalog service.",
    "start": "279804",
    "end": "281255"
  },
  {
    "text": "We see that it issued a request to \nthe database to get all unicorns.",
    "start": "284124",
    "end": "287421"
  },
  {
    "text": "The response has been written here and completed.",
    "start": "289833",
    "end": "291831"
  },
  {
    "text": "Now that we’ve confirmed that our \ncatalog is using our new microservice,",
    "start": "296546",
    "end": "299426"
  },
  {
    "text": "let’s go back to Refractor Spaces.",
    "start": "299426",
    "end": "301074"
  },
  {
    "text": "Next, let’s get our unicorn store to leverage our new\nmicroservice for the shopping cart functionality.",
    "start": "302776",
    "end": "307096"
  },
  {
    "text": "Let’s create another service.",
    "start": "308064",
    "end": "309373"
  },
  {
    "text": "We’ll call this one “cart service.”",
    "start": "312505",
    "end": "314093"
  },
  {
    "text": "Let’s specify the VPC, endpoint, \nand health check endpoint.",
    "start": "317836",
    "end": "320843"
  },
  {
    "text": "Here we’ll specify the source path \nfor our shopping cart functionality.",
    "start": "330415",
    "end": "333375"
  },
  {
    "text": "Next, we’ll go to The Unicorn Shop and \ntest our shopping cart functionality.",
    "start": "335768",
    "end": "339187"
  },
  {
    "text": "Let’s add some items to the cart.",
    "start": "339654",
    "end": "341094"
  },
  {
    "text": "The items have appeared in the cart.",
    "start": "349475",
    "end": "350915"
  },
  {
    "text": "Let’s take a look at our developer tools to \nconfirm how things are going behind the scenes.",
    "start": "351514",
    "end": "355194"
  },
  {
    "text": "If we ring up the cart, we go to \nour proxy URL with our user ID.",
    "start": "356144",
    "end": "359584"
  },
  {
    "text": "Once again, it’s not apparent where\nthis request is being serviced.",
    "start": "365364",
    "end": "368249"
  },
  {
    "text": "We could inspect the CloudWatch logs again, but instead let’s try\nto find the relevant entries in our database, Amazon DynamoDB.",
    "start": "368667",
    "end": "375150"
  },
  {
    "text": "This entry should correspond to our user ID.",
    "start": "379555",
    "end": "381794"
  },
  {
    "text": "Here are the two unicorns we added to the cart.",
    "start": "384314",
    "end": "386314"
  },
  {
    "text": "There’s the ID for one unicorn.",
    "start": "388163",
    "end": "389763"
  },
  {
    "text": "Here’s the ID for the other unicorn.",
    "start": "392883",
    "end": "394563"
  },
  {
    "text": "We’ve confirmed that our application’s catalog and shopping cart\nfunctionalities are now running out of Amazon ECS on AWS Fargate.",
    "start": "400502",
    "end": "406711"
  },
  {
    "text": "We were able to move the traffic from our monolithic\napplication into these new microservices",
    "start": "409453",
    "end": "413660"
  },
  {
    "text": "without having to configure any networking infrastructure and\nwhile keeping the architecture changes transparent to app consumers.",
    "start": "413660",
    "end": "419278"
  },
  {
    "text": "You've just seen how to quickly set up app refactoring\nwith AWS Migration Hub Refactor Spaces.",
    "start": "422323",
    "end": "426963"
  },
  {
    "text": "You can learn more about this topic in \nthe description and links for this video.",
    "start": "428044",
    "end": "431038"
  },
  {
    "text": "Thanks for watching.\nNow it’s your turn to try.",
    "start": "431194",
    "end": "433046"
  }
]