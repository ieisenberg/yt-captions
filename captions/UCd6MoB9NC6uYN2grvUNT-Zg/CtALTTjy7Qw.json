[
  {
    "text": "all right welcome everybody thanks for coming out today uh my name is Nate Slater I'm a senior manager in the AWS",
    "start": "1319",
    "end": "6560"
  },
  {
    "text": "Solutions architecture uh Team I work in the San Francisco Bay Area uh and uh",
    "start": "6560",
    "end": "11840"
  },
  {
    "text": "we're lucky enough to have one of our Premier customers in the Bay Area instacart uh joining us today to talk",
    "start": "11840",
    "end": "18039"
  },
  {
    "text": "about how they've been able to use the Amazon ECS Service uh in their environment uh we're going to be talking",
    "start": "18039",
    "end": "23599"
  },
  {
    "text": "about running microservices on Amazon ECS and with that I'll Jump Right In",
    "start": "23599",
    "end": "30960"
  },
  {
    "text": "so today uh we're going to talk about a few things uh first we'll review microservices and uh we'll talk about how it differs from monolithic",
    "start": "31199",
    "end": "37640"
  },
  {
    "text": "architectures uh we'll examine some of the challenges in running these microservices at scale so one of the",
    "start": "37640",
    "end": "43239"
  },
  {
    "text": "things uh you'll notice uh when you're running lots of different Services is that as you begin to scale them out uh",
    "start": "43239",
    "end": "48280"
  },
  {
    "text": "it it literally becomes impossible to do things manually uh we'll talk a little bit about how you can run these",
    "start": "48280",
    "end": "53600"
  },
  {
    "text": "microsurfaces on ECS uh and then we'll explore uh the instacart use case",
    "start": "53600",
    "end": "61000"
  },
  {
    "text": "so let's jump into an overview of microservices architecture so this is a definition uh",
    "start": "61320",
    "end": "68720"
  },
  {
    "text": "in uh Wikipedia I think it is about what a microservice actually is and I'm not going to read this whole thing but the",
    "start": "68720",
    "end": "74280"
  },
  {
    "text": "the key uh terms in this particular document are small independent and",
    "start": "74280",
    "end": "80439"
  },
  {
    "text": "decoupled right a microservice uh needs to be those three",
    "start": "80439",
    "end": "85840"
  },
  {
    "text": "things and if we look at the difference between uh these three architect Cal Styles monolithic SOA or microservices",
    "start": "85840",
    "end": "94119"
  },
  {
    "text": "uh you'll see as we move from monolithic towards microservices uh the uh Services",
    "start": "94119",
    "end": "99320"
  },
  {
    "text": "themselves become more and more fine grained and one of the things that I like to point out in in this particular slide is that uh you know people ask a",
    "start": "99320",
    "end": "106840"
  },
  {
    "text": "lot about what's the difference between SOA and microservices and uh there's a lot of overlap between the two and in many ways I I feel like microservices",
    "start": "106840",
    "end": "113360"
  },
  {
    "text": "are really just uh a natural evolution of s SOA uh if you look at the S SOA uh",
    "start": "113360",
    "end": "118960"
  },
  {
    "text": "diagram in the middle there you're still going to have service boundaries with SOA so whether you're dealing with microservices or S SOA one of the first",
    "start": "118960",
    "end": "125399"
  },
  {
    "text": "thing that you're going to really need to identify is what are the service boundaries or domains that exist in my business and which Services belong in",
    "start": "125399",
    "end": "132120"
  },
  {
    "text": "those domains the difference is that on the microservice side uh the services themselves are are smaller and more coar",
    "start": "132120",
    "end": "138400"
  },
  {
    "text": "grained another big difference uh between SOA and microservices and this is something I encountered in in my past",
    "start": "138400",
    "end": "144480"
  },
  {
    "text": "life uh as a career software engineer was uh SOA tends to rely heavily on on",
    "start": "144480",
    "end": "149519"
  },
  {
    "text": "Middle so uh s SOA will often times have some kind of Enterprise service bus involved",
    "start": "149519",
    "end": "155560"
  },
  {
    "text": "and uh while it does a nice job decomposing the monolith into coarser grained uh uh services or rather finer",
    "start": "155560",
    "end": "162599"
  },
  {
    "text": "grained Services uh often times what happens is is that the uh middleware itself kind of becomes the monolith",
    "start": "162599",
    "end": "168480"
  },
  {
    "text": "right you end up with a lot of business logic logic around how messages are being routed business rules engines and",
    "start": "168480",
    "end": "173959"
  },
  {
    "text": "other things uh and that's a key difference between SOA and microservices microservices you have uh queuing and",
    "start": "173959",
    "end": "180280"
  },
  {
    "text": "you have asynchronous processing and you have patterns like pubsub but you don't really have a ton of logic those are really just transport mechanisms they're",
    "start": "180280",
    "end": "186720"
  },
  {
    "text": "not actually applying logic uh to the routing of messages between services so a monolithic architecture uh",
    "start": "186720",
    "end": "194080"
  },
  {
    "text": "everything exists in a single unit right so in this case we're looking at uh probably some kind of CRM or Erp",
    "start": "194080",
    "end": "199879"
  },
  {
    "text": "application where you have an order UI a user UI and uh shipping UI uh those uis",
    "start": "199879",
    "end": "205640"
  },
  {
    "text": "are backed by Services uh and those Services talk to a data access component uh and in this monolithic architecture",
    "start": "205640",
    "end": "212080"
  },
  {
    "text": "what happens is is that if you need to scale this you've got to scale the monolithic unit right so uh even if it's",
    "start": "212080",
    "end": "218239"
  },
  {
    "text": "just the user UI for example that is under high load and it would make sense right maybe your user UI involves a",
    "start": "218239",
    "end": "224760"
  },
  {
    "text": "mobile app and you know you're going to have potentially tens of thousands maybe even hundreds of thousands of client clients accessing that portion of",
    "start": "224760",
    "end": "231519"
  },
  {
    "text": "application you know the other pieces like the shipping UI and others maybe much smaller maybe even internal use",
    "start": "231519",
    "end": "236799"
  },
  {
    "text": "only problem is you have to scale the entire app right so you got to Stamp Out one copy of the whole",
    "start": "236799",
    "end": "242760"
  },
  {
    "text": "monolith and the development cycle looks like this right youve got a bunch of developers over uh on the left hand side",
    "start": "242760",
    "end": "248599"
  },
  {
    "text": "there uh and uh they're working on this big monolithic app so they're all committing their changes into you know",
    "start": "248599",
    "end": "254640"
  },
  {
    "text": "possibly like a single uh code repository uh and then you've got to do a build when you're ready to uh uh do a",
    "start": "254640",
    "end": "261880"
  },
  {
    "text": "deployment either for testing or for even production you got to go through testing and then you got to do a release",
    "start": "261880",
    "end": "267080"
  },
  {
    "text": "and uh you know this is very complicated right you got all these Developers that are making all these changes so you have uh a lot of Just trickiness Around",
    "start": "267080",
    "end": "273160"
  },
  {
    "text": "merging your code and managing the code itself uh the builds themselves can be time consuming and expensive uh testing",
    "start": "273160",
    "end": "279759"
  },
  {
    "text": "obviously is T difficult because even if you're trying to localize your changes as much as possible you probably have regression risk that you're introducing",
    "start": "279759",
    "end": "285880"
  },
  {
    "text": "into the application uh in areas that you're you know not sure of or not positive about and then finally you you",
    "start": "285880",
    "end": "291680"
  },
  {
    "text": "have this release and it's usually like a big bang kind of release right you know you've got to take downtime you have Engineers coming in on a Saturday",
    "start": "291680",
    "end": "298280"
  },
  {
    "text": "to do it you know the systems are off line for five or six hours right not really the optimal uh way of actually doing",
    "start": "298280",
    "end": "305400"
  },
  {
    "text": "things so in a microservices architecture we actually decompose these uh Services into individual units right",
    "start": "306039",
    "end": "312600"
  },
  {
    "text": "so we have the same exact services and uis that we had before but they're independent of one another we have our",
    "start": "312600",
    "end": "318319"
  },
  {
    "text": "order UI user UI shipping UI uh and the associated services and if we want to scale these you can see uh you know we",
    "start": "318319",
    "end": "325440"
  },
  {
    "text": "can scale out these things independently right so going back to the example of the user uh component maybe that needs",
    "start": "325440",
    "end": "330919"
  },
  {
    "text": "to scale at a different rate uh than the others and with a microservices architecture you can do this and this is",
    "start": "330919",
    "end": "336360"
  },
  {
    "text": "a key advantage of microservices microservice development",
    "start": "336360",
    "end": "341680"
  },
  {
    "text": "cycle uh looks uh you know somewhat similar in that you're going to have a whole bunch of developers uh but the difference is that instead of each sort",
    "start": "341680",
    "end": "348240"
  },
  {
    "text": "of this development team all checking their code into a single monolithic uh repository uh they're going to be",
    "start": "348240",
    "end": "353960"
  },
  {
    "text": "working on lots of different services and each of those Services can have their own versioning their own code repos uh and the amount of code in each",
    "start": "353960",
    "end": "360479"
  },
  {
    "text": "service is is presumably a lot smaller than the than the monolith itself uh what this means of course is that now",
    "start": "360479",
    "end": "366360"
  },
  {
    "text": "you're going to have to uh do your uh build and deployment pipeline individually on across all of these",
    "start": "366360",
    "end": "372039"
  },
  {
    "text": "Services right so uh chances are you're not going to uh wait to deploy service a",
    "start": "372039",
    "end": "378520"
  },
  {
    "text": "uh until service B is ready right you know you if you're doing that then you're going to take a long time to get",
    "start": "378520",
    "end": "383680"
  },
  {
    "text": "builds out if you have to wait for all the dependencies to be complete so what you would do is you would actually you know deploy things independently",
    "start": "383680",
    "end": "391560"
  },
  {
    "text": "so these six uh characteristics of microservices uh are are are important",
    "start": "392039",
    "end": "397080"
  },
  {
    "text": "we have decentralized right this basically means uh there's no sort of Monolithic central processing uh brain",
    "start": "397080",
    "end": "403599"
  },
  {
    "text": "like service that does everything right they're they're independent uh from one another uh",
    "start": "403599",
    "end": "408680"
  },
  {
    "text": "they're black box Black Box means that uh when service a calls service B uh",
    "start": "408680",
    "end": "413720"
  },
  {
    "text": "really they speak whatever language uh that you've chosen maybe it's rest maybe it's a protocol buffer and that's all",
    "start": "413720",
    "end": "419360"
  },
  {
    "text": "they know about one another they just know about that public interface they don't know about the the guts of the service they don't share libraries right",
    "start": "419360",
    "end": "426360"
  },
  {
    "text": "they don't uh share databases even uh polyglot this is something that we haven't mentioned yet but uh it's a a",
    "start": "426360",
    "end": "432960"
  },
  {
    "text": "powerful uh advantage of microservices in that uh oftentimes you may find that one programming language is better than",
    "start": "432960",
    "end": "438960"
  },
  {
    "text": "another uh for a certain type of task right maybe if you're doing number crunching uh python might be the right",
    "start": "438960",
    "end": "444120"
  },
  {
    "text": "choice uh but if you're doing something that's uh uid driven nodejs may be better and because because these",
    "start": "444120",
    "end": "449800"
  },
  {
    "text": "services are independent and because they're you know their own independent Cod lines versioned separately built",
    "start": "449800",
    "end": "455599"
  },
  {
    "text": "separately deployed separately you can actually now use the language that's right for the service you certainly",
    "start": "455599",
    "end": "461440"
  },
  {
    "text": "don't want to use lots of different languages for the sake of using lots of different languages uh and you know we",
    "start": "461440",
    "end": "466639"
  },
  {
    "text": "do see customers that have standardized on certain languages for microservice development but the option is there to be polyglot if you need to uh do one",
    "start": "466639",
    "end": "474319"
  },
  {
    "text": "thing well right again your service should be uh very specific and constrained in what it's actually doing",
    "start": "474319",
    "end": "479800"
  },
  {
    "text": "right it should not have side effects if it's doing authorization for example it should not also be updating user profile",
    "start": "479800",
    "end": "485360"
  },
  {
    "text": "information right it should just be handling the authorization component uh and then finally this is something we really take to heart at Amazon which is",
    "start": "485360",
    "end": "491720"
  },
  {
    "text": "you build it you run it right so uh Gone are the days of having uh you know a separate QA team and separate Ops teams",
    "start": "491720",
    "end": "498199"
  },
  {
    "text": "where you lob your code over to QA and then they lob it over to Ops uh really uh when you're do doing micro Services",
    "start": "498199",
    "end": "504440"
  },
  {
    "text": "uh you are going to be responsible for the whole uh development life cycle everything from the architecture through",
    "start": "504440",
    "end": "511280"
  },
  {
    "text": "the coding through the testing uh and then through the uh the operational pieces of it uh which today we really",
    "start": "511280",
    "end": "516839"
  },
  {
    "text": "talk about as devops okay let's talk about some of the challenges uh and as we go through this",
    "start": "516839",
    "end": "523518"
  },
  {
    "text": "you'll see that really the theme uh and all the challenges is doing things at scale so first uh Resource Management",
    "start": "523519",
    "end": "529560"
  },
  {
    "text": "right what you're looking at here is a diagram that shows you three different availability zones in one of our regions uh and a bunch of ec2 instances and so",
    "start": "529560",
    "end": "536720"
  },
  {
    "text": "you can you can see right here uh as your Fleet grows uh managing this by hand just becomes impossible right how",
    "start": "536720",
    "end": "542040"
  },
  {
    "text": "do you know what resources are available uh on a given host right if you have a service that needs uh you know memory uh",
    "start": "542040",
    "end": "549120"
  },
  {
    "text": "how do you know which host to put it on right with a small Fleet you can maybe manage this by hand you can maybe keep a database uh but as as your Fleet grows",
    "start": "549120",
    "end": "555880"
  },
  {
    "text": "this becomes really really challenging monitoring challenging for the same way right you've got uh",
    "start": "555880",
    "end": "561440"
  },
  {
    "text": "potentially tens hundreds thousands maybe in 10 thousands of Individual Services so you know simple questions",
    "start": "561440",
    "end": "566760"
  },
  {
    "text": "like how do you know if a service is healthy uh is difficult to answer how do you measure the performance of an individual service and how do you",
    "start": "566760",
    "end": "572640"
  },
  {
    "text": "troubleshoot and debug a service that may be throwing some errors service Discovery so service",
    "start": "572640",
    "end": "578279"
  },
  {
    "text": "Discovery is is basically how one service learns about another uh you know it's unlikely that uh you're going to",
    "start": "578279",
    "end": "584920"
  },
  {
    "text": "have a a microservices architecture where each Service uh basically does everything it needs to do and never has",
    "start": "584920",
    "end": "590800"
  },
  {
    "text": "to call other services right uh so if service a needs to talk to service B how does it know where service B is uh and",
    "start": "590800",
    "end": "597480"
  },
  {
    "text": "in particular how does it know where service B is if if services are scaling up and down independently from one another uh load balancers can help with",
    "start": "597480",
    "end": "604519"
  },
  {
    "text": "this but still uh you know it's not not the end solution uh and then finally when a service comes online how does it",
    "start": "604519",
    "end": "609920"
  },
  {
    "text": "announce itself to the world saying hey I'm available I'm here I can take requests deployment same problem really",
    "start": "609920",
    "end": "617279"
  },
  {
    "text": "uh as the other three challenges right uh we've got uh tens hundreds thousands tens of thousands of services each one",
    "start": "617279",
    "end": "623440"
  },
  {
    "text": "is being developed by a team of developers uh you know they're all going to have their own timelines for when they develop and test and push these out",
    "start": "623440",
    "end": "630399"
  },
  {
    "text": "how are you going to how are you going to manage this right maybe you have different programming languages that you're using so you've got different build scripts that need to run um and",
    "start": "630399",
    "end": "637000"
  },
  {
    "text": "then finally once you're able to actually accomplish a build how do you decide which host to put the service on",
    "start": "637000",
    "end": "645279"
  },
  {
    "text": "right okay so let's introduce Amazon ECS Amazon ECS is a fully managed elastic",
    "start": "645320",
    "end": "650839"
  },
  {
    "text": "service so you don't actually need to run anything uh ECS will uh scale with",
    "start": "650839",
    "end": "655920"
  },
  {
    "text": "with your microservices architecture right uh it's got something called shared State optimistic scheduling uh",
    "start": "655920",
    "end": "661639"
  },
  {
    "text": "and there's some interesting research around different scheduling types uh force uh uh containers uh and shared",
    "start": "661639",
    "end": "667880"
  },
  {
    "text": "State optimistic scheduling is one of the more efficient is one of the one of the uh the key uh attributes there um it",
    "start": "667880",
    "end": "674000"
  },
  {
    "text": "has a fully acid compliant resource and State Management uh component to it uh this is important right uh in a",
    "start": "674000",
    "end": "680040"
  },
  {
    "text": "distributed system uh you know oftentimes databases are going to have eventual consistency in them but with a",
    "start": "680040",
    "end": "685680"
  },
  {
    "text": "with a cluster of resources you really want to have an up-to-date view of what's available in the cluster at all",
    "start": "685680",
    "end": "691720"
  },
  {
    "text": "times without having to worry about consistency uh issues uh and so ECS uh State Management and and resource",
    "start": "691720",
    "end": "698240"
  },
  {
    "text": "management is is acid compliant we've got integration with cloudwatch uh so if you're used to using cloudwatch already",
    "start": "698240",
    "end": "704240"
  },
  {
    "text": "for monitoring ec2 instances and you know all the other services uh that we support in cloudwatch uh you know ECS",
    "start": "704240",
    "end": "710519"
  },
  {
    "text": "has a a familiar uh integration uh and then finally uh you can integrate with the code star services so those are",
    "start": "710519",
    "end": "716399"
  },
  {
    "text": "things like code commit code deploy code pipeline uh you can do cicd through those",
    "start": "716399",
    "end": "721519"
  },
  {
    "text": "Services uh to ECS so let's look at what the uh ECS",
    "start": "721519",
    "end": "726720"
  },
  {
    "text": "architecture uh consists of so uh this uh diagram here this architecture diagram shows you uh really two two",
    "start": "726720",
    "end": "734279"
  },
  {
    "text": "different uh sides to the architecture on the VPC container side that's what what you as a customer run right that's",
    "start": "734279",
    "end": "741199"
  },
  {
    "text": "your VPC in your account uh you've got uh what we call a cluster which is really nothing more than a collection of",
    "start": "741199",
    "end": "747839"
  },
  {
    "text": "ec2 instances that uh share some information about the name of the ECS cluster they belong to that's it right",
    "start": "747839",
    "end": "755240"
  },
  {
    "text": "those container instances are nothing more than uh ec2 instances they're probably running some kind of container",
    "start": "755240",
    "end": "761320"
  },
  {
    "text": "optimized uh Ami uh we have the Amazon Linux Ami for ECS for example uh but",
    "start": "761320",
    "end": "768160"
  },
  {
    "text": "other than that they're really just just ec2 instances uh on the instance itself you have the ECS agent that's what",
    "start": "768160",
    "end": "774680"
  },
  {
    "text": "communicates with the ECS Service uh and then you have uh your container which has either been defined as a task uh or",
    "start": "774680",
    "end": "782440"
  },
  {
    "text": "a service and we'll talk a little bit about the difference between those two a few slides from now so that's the customer side of this so really it's ec2",
    "start": "782440",
    "end": "790519"
  },
  {
    "text": "uh and VPC right all the stuff you're already used to using and all the same uh characteristics of availability and",
    "start": "790519",
    "end": "797360"
  },
  {
    "text": "multi-az and all of that uh apply on the ECS side we're providing",
    "start": "797360",
    "end": "802399"
  },
  {
    "text": "the scheduler and we have uh schedulers uh for uh tasks and services although",
    "start": "802399",
    "end": "807519"
  },
  {
    "text": "with the announcement about blocks uh today today uh the open source uh project uh uh it looks like there",
    "start": "807519",
    "end": "813000"
  },
  {
    "text": "there's going to be you know the opportunity for the open source Community to really contribute different types of schedulers uh to ECS but today",
    "start": "813000",
    "end": "818680"
  },
  {
    "text": "the service itself built into the service is a task and a service scheduler and then you have this resource manager this is the assd",
    "start": "818680",
    "end": "824560"
  },
  {
    "text": "compliant uh data store uh and service that uh provides up-to-date information about the resources that are being used",
    "start": "824560",
    "end": "831399"
  },
  {
    "text": "in your cluster uh at any given time so if you're going to build an application uh that uses ECS uh could",
    "start": "831399",
    "end": "839320"
  },
  {
    "text": "look like this right and this is a relatively simple application uh you've got your ECS clusters uh those are",
    "start": "839320",
    "end": "845320"
  },
  {
    "text": "typically going to be behind some kind of load balancer you can use elb or ALB uh you're probably going to have DNS",
    "start": "845320",
    "end": "852000"
  },
  {
    "text": "right you'll have Route 53 that's uh essentially providing the mapping between the elb C names and uh more",
    "start": "852000",
    "end": "857560"
  },
  {
    "text": "friendly domain names um you might use Amazon API Gateway right maybe you have services that uh are public right or",
    "start": "857560",
    "end": "864360"
  },
  {
    "text": "they're they're used in a mobile application right and uh you can actually put API Gateway in front of those Services uh and uh using the HTTP",
    "start": "864360",
    "end": "872079"
  },
  {
    "text": "proxy integration with API Gateway actually have those call services that live in your ECS cluster so and then it's worth",
    "start": "872079",
    "end": "879480"
  },
  {
    "text": "mentioning you know they you've got databases right you got databases like RDS uh Dynamo DB Aurora right your",
    "start": "879480",
    "end": "885120"
  },
  {
    "text": "services can talk to other uh AWS database services and then on uh the",
    "start": "885120",
    "end": "890880"
  },
  {
    "text": "other side of the slide you see we've got the uh the manage service component right we've got Amazon ECS that's",
    "start": "890880",
    "end": "896240"
  },
  {
    "text": "providing the scheduling uh and State Management of your your clusters we have Amazon ECR right so again if you're if",
    "start": "896240",
    "end": "902880"
  },
  {
    "text": "you're uh pushing Services out to ECS you're almost certainly creating container images you need to store those",
    "start": "902880",
    "end": "908040"
  },
  {
    "text": "images someplace ECR uh is a really nice way to do that uh and then you have IM am integration as well right and the",
    "start": "908040",
    "end": "914720"
  },
  {
    "text": "nice thing about IAM integration with ECS is that uh you can actually apply uh IM am uh roles down to the service or",
    "start": "914720",
    "end": "921639"
  },
  {
    "text": "task level right they don't just live at the host level uh so you have very fine grained control of of permissions and privileges",
    "start": "921639",
    "end": "929120"
  },
  {
    "text": "monitoring with cloudwatch uh we do one minute increments you've got basically four key metrics that you're looking at",
    "start": "929120",
    "end": "935279"
  },
  {
    "text": "uh CPU reservation memory reservation CPU utilization and memory utilization uh and the combination of these four",
    "start": "935279",
    "end": "941680"
  },
  {
    "text": "really show you essentially what's uh what's being used and what's available uh in your cluster and you can break",
    "start": "941680",
    "end": "947920"
  },
  {
    "text": "these down by cluster name or by service name so you can see them across two different dimensions graphs and charts look a lot",
    "start": "947920",
    "end": "955160"
  },
  {
    "text": "like you know our standard cloudwatch uh so these are just showing you uh some of the uh graphs that you see for these",
    "start": "955160",
    "end": "961519"
  },
  {
    "text": "these metrics this is an architecture that shows uh just how uh the ALB uh Service",
    "start": "961519",
    "end": "969680"
  },
  {
    "text": "uh offers some interesting uh solutions for service Discovery uh and basically",
    "start": "969680",
    "end": "974839"
  },
  {
    "text": "uh if you can see here it's a little bit small but you can see that ALB essentially will route requests to",
    "start": "974839",
    "end": "980959"
  },
  {
    "text": "different Target groups Target groups are hosts uh that are are able to",
    "start": "980959",
    "end": "986639"
  },
  {
    "text": "respond to requests of the same type basically basically uh that live behind the load balancer and so uh you can see",
    "start": "986639",
    "end": "992880"
  },
  {
    "text": "that in the path information uh we have an off uh path and we have a SL weather",
    "start": "992880",
    "end": "998040"
  },
  {
    "text": "path and the ALB knows how to route based on that path information to uh the",
    "start": "998040",
    "end": "1003199"
  },
  {
    "text": "hosts uh behind it that are that are running those Services uh how does that help with service Discovery well as long",
    "start": "1003199",
    "end": "1009279"
  },
  {
    "text": "as service a knows the pathing information for service B how to construct a URL using the path",
    "start": "1009279",
    "end": "1014720"
  },
  {
    "text": "information uh it basically you know just needs to know that and then the ALB takes uh uh responsibility for making sure it",
    "start": "1014720",
    "end": "1021399"
  },
  {
    "text": "gets the hosts that are actually running that service uh so this uh this is something where um you know the layer 7",
    "start": "1021399",
    "end": "1027079"
  },
  {
    "text": "load balancing that we have with ALB can help Okay so uh we talked a little bit a",
    "start": "1027079",
    "end": "1033199"
  },
  {
    "text": "few slides ago about the types of schedulers uh that we have with ECS we had the task scheduler and the service",
    "start": "1033199",
    "end": "1038798"
  },
  {
    "text": "scheduler task scheduler is going to run the batch jobs uh these are tasks that run once they do some work and then they",
    "start": "1038799",
    "end": "1045480"
  },
  {
    "text": "exit uh you have two different ways that you can run these you can do run task which basically just randomly places it",
    "start": "1045480",
    "end": "1051480"
  },
  {
    "text": "in the cluster uh based on the the resource requirements of that task defa or you can do start Task which gives you",
    "start": "1051480",
    "end": "1057200"
  },
  {
    "text": "a little bit more control over where it actually runs uh for long running apps we call these Services these would be things",
    "start": "1057200",
    "end": "1063919"
  },
  {
    "text": "like rest end points for example uh this uh we have the service scheduler and uh the service scheduler provides some",
    "start": "1063919",
    "end": "1070640"
  },
  {
    "text": "functionality around Health Management right if you have a long running app you want to make sure it's up and running you want to if if for some reason your",
    "start": "1070640",
    "end": "1076640"
  },
  {
    "text": "service dies it'd be nice to have the schedule or start it that's exactly what the ECS service scheduler does uh it has",
    "start": "1076640",
    "end": "1082760"
  },
  {
    "text": "some scale up and SC down scale down capabilities as well it is AZ aware right so if you say hey I need four",
    "start": "1082760",
    "end": "1089080"
  },
  {
    "text": "copies of this service you probably don't want all four of them landing on the same container instance in a single a that's not that's not really going to",
    "start": "1089080",
    "end": "1096039"
  },
  {
    "text": "help you from an availability standpoint so it'll do its best effort to try and distribute them across azs uh and then",
    "start": "1096039",
    "end": "1101760"
  },
  {
    "text": "it also has a notion of grouped containers right so you can write a service that that uh definition that basically says I need uh you know an",
    "start": "1101760",
    "end": "1108320"
  },
  {
    "text": "engine proxy and I need a nodejs Express container and they need to they need to",
    "start": "1108320",
    "end": "1113360"
  },
  {
    "text": "be together they they depend on one another so uh when you go to uh schedule",
    "start": "1113360",
    "end": "1120159"
  },
  {
    "text": "a container uh you know and you have a new version of your your app that you're putting out or your endpoint that you're",
    "start": "1120159",
    "end": "1125720"
  },
  {
    "text": "putting out uh and this really should uh these these uh captions are are probably not not quite as accurate as they should",
    "start": "1125720",
    "end": "1132159"
  },
  {
    "text": "be they should really be service one through Service uh 4 you can see in step one we've got you know the green uh",
    "start": "1132159",
    "end": "1138320"
  },
  {
    "text": "service that's our current version let's say uh and uh we now want to deploy service 2 well what we can do is we can",
    "start": "1138320",
    "end": "1145720"
  },
  {
    "text": "use these attributes minimum healthy percent and maximum uh uh percent maximum healthy percent to say you know",
    "start": "1145720",
    "end": "1151960"
  },
  {
    "text": "we're okay with as few as 50% of our Target uh Services running uh and as as",
    "start": "1151960",
    "end": "1158640"
  },
  {
    "text": "many as 100% And so what that means is that when you go to deploy your next version and step two you can actually uh",
    "start": "1158640",
    "end": "1164960"
  },
  {
    "text": "take down two uh up to two of the the existing version and the the service schedule will still",
    "start": "1164960",
    "end": "1170720"
  },
  {
    "text": "consider it healthy and then you can deploy the two new ones and then in step three you eventually you know get rid of",
    "start": "1170720",
    "end": "1176360"
  },
  {
    "text": "the old version and roll out the new one long running app uh this is uh",
    "start": "1176360",
    "end": "1182240"
  },
  {
    "text": "basically uh just the the the converse of what we just talked about instead of uh decreasing the number of services",
    "start": "1182240",
    "end": "1187919"
  },
  {
    "text": "we're going to actually increase so you can also say well I need 100% at minimum uh but I can go as high as 200% and so",
    "start": "1187919",
    "end": "1194520"
  },
  {
    "text": "in this case you can see we actually just at in step two have twice as many of these running uh as uh as we did in",
    "start": "1194520",
    "end": "1201679"
  },
  {
    "text": "the uh in the previous step uh and then finally in step three uh we uh get rid",
    "start": "1201679",
    "end": "1206880"
  },
  {
    "text": "of them uh the extra ones and go back to 100% you can also do uh blue green",
    "start": "1206880",
    "end": "1213480"
  },
  {
    "text": "deployments right so uh standard blue green right you have two different load balancers maybe even two different ECS",
    "start": "1213480",
    "end": "1219760"
  },
  {
    "text": "clusters you know the blue cluster and the green cluster uh you deploy to your",
    "start": "1219760",
    "end": "1225400"
  },
  {
    "text": "new code to the uh non uh produ C cluster or the one that's not handling",
    "start": "1225400",
    "end": "1231159"
  },
  {
    "text": "any traffic uh and you can do whatever acceptance testing you need to do there uh and then when you're happy with that",
    "start": "1231159",
    "end": "1237840"
  },
  {
    "text": "you can just use Route 53 uh weighted routing policies to essentially start to",
    "start": "1237840",
    "end": "1243039"
  },
  {
    "text": "send traffic uh from one uh to",
    "start": "1243039",
    "end": "1247799"
  },
  {
    "text": "another uh continuous delivery so uh Jenkins tool that U many many customers",
    "start": "1248159",
    "end": "1254240"
  },
  {
    "text": "use uh you know if you're already using Jenkins for non-containerized uh build process you know really containerizing",
    "start": "1254240",
    "end": "1260720"
  },
  {
    "text": "or application often is as simple as just doing the build as you normally do today and then having a Docker file that",
    "start": "1260720",
    "end": "1266840"
  },
  {
    "text": "lives in the top level of your project that essentially includes the build artifact into the container and so uh",
    "start": "1266840",
    "end": "1273000"
  },
  {
    "text": "the the output of a containerized build process uh is going to be uh basically a",
    "start": "1273000",
    "end": "1278640"
  },
  {
    "text": "container image and uh once the image has been created using the docker file on the project you would then push that",
    "start": "1278640",
    "end": "1284159"
  },
  {
    "text": "image to ECR which is the icon at the top of the screen and then for the Contin delivery process you're basically",
    "start": "1284159",
    "end": "1290240"
  },
  {
    "text": "going to uh probably have some kind of trigger that sits on top of uh the ECR",
    "start": "1290240",
    "end": "1296400"
  },
  {
    "text": "uh uh event itself or the the the push of the container to the registry uh and",
    "start": "1296400",
    "end": "1301440"
  },
  {
    "text": "that will trigger uh uh something that a job or something that's going to then pull the container out and push it uh to",
    "start": "1301440",
    "end": "1307360"
  },
  {
    "text": "the cluster and we've seen examples of customers doing this where uh the deployment is basically you get the",
    "start": "1307360",
    "end": "1313640"
  },
  {
    "text": "container and then you make a bunch of API calls to uh the ECS Service uh either calling uh you know run task or",
    "start": "1313640",
    "end": "1320840"
  },
  {
    "text": "run Service uh telling it I want to run this so you know again uh Jenkins uh not",
    "start": "1320840",
    "end": "1328880"
  },
  {
    "text": "uh not a whole lot different uh when you're dealing with containers uh really the key is that the the final artifact",
    "start": "1328880",
    "end": "1333919"
  },
  {
    "text": "from the build process is a container image uh and it's that image that is used uh for the deployment",
    "start": "1333919",
    "end": "1340799"
  },
  {
    "text": "itself okay great and with that I will introduce Nick from instacart he's going",
    "start": "1340799",
    "end": "1346320"
  },
  {
    "text": "to talk about how instacart is uh using",
    "start": "1346320",
    "end": "1350519"
  },
  {
    "text": "CS thanks so much Nate I really appreciate it so I'm Nick Elser I'm an",
    "start": "1355520",
    "end": "1360559"
  },
  {
    "text": "early engineer and now a director of engineering at instacart instacart uh was founded in",
    "start": "1360559",
    "end": "1367559"
  },
  {
    "text": "2012 to provide delivery in as fast as 1 hour from the local grocery stores you",
    "start": "1367559",
    "end": "1373799"
  },
  {
    "text": "already use and love we're a relatively small yet Nimble engineering team",
    "start": "1373799",
    "end": "1379039"
  },
  {
    "text": "and we've stayed Nimble through one of our core values which is every minute counts and so we try to live this value",
    "start": "1379039",
    "end": "1385799"
  },
  {
    "text": "and our customers we're trying to save you time we're trying to save you minutes from going to the grocery store we also live up value in our engineering",
    "start": "1385799",
    "end": "1392000"
  },
  {
    "text": "we want to iterate rapidly we want to solve for our customers as quickly as possible uh so i' like to talk to you",
    "start": "1392000",
    "end": "1398760"
  },
  {
    "text": "briefly a little bit about how we leverage ECS to do just that how we do that to iterate quickly to solve",
    "start": "1398760",
    "end": "1405039"
  },
  {
    "text": "problems quickly for engineering team as well as the to share a little bit to make concrete some solutions to",
    "start": "1405039",
    "end": "1412240"
  },
  {
    "text": "some of the problems that Nate highlighted earlier little background on our stack",
    "start": "1412240",
    "end": "1419120"
  },
  {
    "text": "uh unlike any other startup founded in 2012 we use Ruby on Rails uh however we",
    "start": "1419120",
    "end": "1424520"
  },
  {
    "text": "are a polygot shop as you can imagine as we've moved into the service uh the microservices world we've broken apart",
    "start": "1424520",
    "end": "1431159"
  },
  {
    "text": "our monolith and and so for things like machine learning for recommendations suggested items and such we're using",
    "start": "1431159",
    "end": "1437799"
  },
  {
    "text": "Python and the data science libraries there and for stuff like web apis we're",
    "start": "1437799",
    "end": "1443480"
  },
  {
    "text": "using Ruby on Rails um so it's a polygot domain we've divided our product our engineering platform uh you know the",
    "start": "1443480",
    "end": "1450440"
  },
  {
    "text": "instant car product as a whole from an engineering perspective into a few what we call domains uh and each of these",
    "start": "1450440",
    "end": "1456159"
  },
  {
    "text": "domains has the same SLA and and is more or less responsible for a large swath",
    "start": "1456159",
    "end": "1461559"
  },
  {
    "text": "there's a huge domain of responsibility so an example would be our catalog domain responsible for ingesting",
    "start": "1461559",
    "end": "1468000"
  },
  {
    "text": "Millions of items from our Retail Partners every single day adding beautiful imagery and bringing them to",
    "start": "1468000",
    "end": "1473039"
  },
  {
    "text": "our storefront or our Logistics domain responsible for running heuristics and taking orders from our customer domain",
    "start": "1473039",
    "end": "1479600"
  },
  {
    "text": "and assigning it to a shopper that makes the most sense from an efficiency standpoint as well as to get the order",
    "start": "1479600",
    "end": "1484720"
  },
  {
    "text": "to our customers on time so each of these domains is comprised of a few microservices uh and each domain of",
    "start": "1484720",
    "end": "1491679"
  },
  {
    "text": "course talks to each other uh through a service Discovery mechanism that I'll talk about a little bit later we develop",
    "start": "1491679",
    "end": "1498000"
  },
  {
    "text": "an monor repo that is to say all of our code is more or less effectively in one big git repo and this is kind somewhat",
    "start": "1498000",
    "end": "1505640"
  },
  {
    "text": "counterintuitively allowed us to move a lot faster as a result of having really easily refactor code between different",
    "start": "1505640",
    "end": "1512720"
  },
  {
    "text": "domains between different applications ensuring consistency and how we do libraries and having shared libraries",
    "start": "1512720",
    "end": "1519440"
  },
  {
    "text": "and enabling all the developers are on the same page about what people are working on and honestly as you scale out",
    "start": "1519440",
    "end": "1524559"
  },
  {
    "text": "your organization that's helped us immensely we developed code on a custom",
    "start": "1524559",
    "end": "1529600"
  },
  {
    "text": "platform as a service uh and so I'm going to talk about that now and then talk about how that helped us move from",
    "start": "1529600",
    "end": "1535320"
  },
  {
    "text": "ec2 to ECS and how we leverage that uh to do all the engineering effort on",
    "start": "1535320",
    "end": "1541320"
  },
  {
    "text": "ECS so the instacar platform as a service it's really stupid really simple",
    "start": "1541320",
    "end": "1546600"
  },
  {
    "text": "but it works really effectively it's basically a set of libraries and code we've written in Python that talk to two",
    "start": "1546600",
    "end": "1552640"
  },
  {
    "text": "things one is the Amazon apis you know apis to do ec2 uh to do EC s and another",
    "start": "1552640",
    "end": "1559720"
  },
  {
    "text": "set of apis to talk to our uh infrastructure RDS postgress database and essentially what we're recording in",
    "start": "1559720",
    "end": "1565960"
  },
  {
    "text": "the database is changes that our developers have requested whether that's a new deployment a new configuration",
    "start": "1565960",
    "end": "1571880"
  },
  {
    "text": "change a size up of their their Fleet whatever it is we're recording it there and then job systems are running in the",
    "start": "1571880",
    "end": "1578399"
  },
  {
    "text": "cloud as Nate talked about earlier uh taking those requests and making them real calling out to ECS calling out to",
    "start": "1578399",
    "end": "1584520"
  },
  {
    "text": "cloud form uh cloud formation whatever we need to do and it's noting that these libraries are also running on every",
    "start": "1584520",
    "end": "1591240"
  },
  {
    "text": "single developer's machine it's rarely used for the average developer to do this directly but allows us to bootstrap",
    "start": "1591240",
    "end": "1597840"
  },
  {
    "text": "the entire fleet the entire instances anything you want to run you can run against the same apis on your local",
    "start": "1597840",
    "end": "1603480"
  },
  {
    "text": "developer environment as well as in the cloud which means that if you're making some changes as an infrastructure team",
    "start": "1603480",
    "end": "1609320"
  },
  {
    "text": "uh you're using the exact same tooling that would be running in the cloud to make changes to the various systems that are running those jobs which has been",
    "start": "1609320",
    "end": "1615679"
  },
  {
    "text": "very powerful us so we're constantly developing against the the same epis that are making the same changes in the",
    "start": "1615679",
    "end": "1621320"
  },
  {
    "text": "cloud uh so why not ec2 we went through this migration over the last year um and",
    "start": "1621320",
    "end": "1627640"
  },
  {
    "text": "ec2 is great we were deploying uh to a fleet of services over code deploy uh",
    "start": "1627640",
    "end": "1632679"
  },
  {
    "text": "and things were pretty good however again going back to our core value that every minute counts it was a little too",
    "start": "1632679",
    "end": "1638919"
  },
  {
    "text": "slow for us you kind of have to make a choice when you're doing ec2 uh deployments to ec2 Via code deploy uh",
    "start": "1638919",
    "end": "1645919"
  },
  {
    "text": "and that's whether or not you want true blue green deployments in which case you have to wait for a new Fleet of",
    "start": "1645919",
    "end": "1651320"
  },
  {
    "text": "instances to boot up or you want to do rolling deploys which is faster because you're using existing instances but it",
    "start": "1651320",
    "end": "1658360"
  },
  {
    "text": "means it could fail halfway through and then you have to roll back or use some process there uh and we didn't really",
    "start": "1658360",
    "end": "1663399"
  },
  {
    "text": "want to have to make that choice we wanted to have the best of both worlds uh and ECS allows us to do that and I'll",
    "start": "1663399",
    "end": "1669080"
  },
  {
    "text": "talk about that and that relates to the fact that these deployments are not Atomic you know they could fail halfway",
    "start": "1669080",
    "end": "1674679"
  },
  {
    "text": "through and you know that's not a great situation for some of our services and as a final note as a smaller note uh",
    "start": "1674679",
    "end": "1681480"
  },
  {
    "text": "you are constrained but worth noting is that you are constrained to ec2 instant sizes when deploying your application uh",
    "start": "1681480",
    "end": "1688480"
  },
  {
    "text": "which means that often times your application will be underutilized or over utilized uh for across you know the",
    "start": "1688480",
    "end": "1694640"
  },
  {
    "text": "various use cases obviously Amazon is adding new instance types all the time and there are various times when you",
    "start": "1694640",
    "end": "1700120"
  },
  {
    "text": "need that whole instance or you want to specialize instance so we still support uh doing deployments to ec2 through our",
    "start": "1700120",
    "end": "1706080"
  },
  {
    "text": "apis but it's worth noting that it's really really nice to have your application developer say hey I need",
    "start": "1706080",
    "end": "1711240"
  },
  {
    "text": "this application to just need it just needs you know 500 megabytes 512 megabytes of RAM and one core we don't",
    "start": "1711240",
    "end": "1717440"
  },
  {
    "text": "need but I also want like a lot of bandwidth and the ECS allows you to do that uh by virtue of deploying those to",
    "start": "1717440",
    "end": "1723519"
  },
  {
    "text": "containers on larger machines that have access to that uh you know high bandwidth and you know block storage or",
    "start": "1723519",
    "end": "1728640"
  },
  {
    "text": "whatever they need so we migrated from ec2 to ECS uh",
    "start": "1728640",
    "end": "1733960"
  },
  {
    "text": "it was actually a relatively painless process and we tried to make it even more painless for our developers uh by",
    "start": "1733960",
    "end": "1740480"
  },
  {
    "text": "kind of cheating a little bit and that's to make them completely transparent to the developer and the engineer uh at our",
    "start": "1740480",
    "end": "1745960"
  },
  {
    "text": "company whether or not it's a container or an instance uh and we did this by you know as Nate mentioned earlier you know",
    "start": "1745960",
    "end": "1752799"
  },
  {
    "text": "the ECS Fleet it's just normal ec2 instances what we did was we attached static IPS to them uh made our own uh",
    "start": "1752799",
    "end": "1760200"
  },
  {
    "text": "DNS routing by virtue of the fact that we know where those containers are from the ECS",
    "start": "1760200",
    "end": "1765399"
  },
  {
    "text": "metadata and gave them gave essentially using IP tables and the DS DNS entry",
    "start": "1765399",
    "end": "1771080"
  },
  {
    "text": "gave each container its own DNS entry allowing developers to SSH into them and",
    "start": "1771080",
    "end": "1776360"
  },
  {
    "text": "you know we treat them more or less exactly like a normal uh virtual machine um whether that's best practices for",
    "start": "1776360",
    "end": "1782760"
  },
  {
    "text": "Docker or not I'm I'm not going to tell you that's the case but it's been really productive and really great for us to",
    "start": "1782760",
    "end": "1788000"
  },
  {
    "text": "iterate quickly especially as we evolved from ec2 to ECS so deployment uh as I mentioned",
    "start": "1788000",
    "end": "1795760"
  },
  {
    "text": "we've got a set of jobs uh when deploys are triggered and I'll talk about how we trigger those deploys whether through a",
    "start": "1795760",
    "end": "1802559"
  },
  {
    "text": "developer pushing to a Sandbox instance or our uh continuous delivery pipeline",
    "start": "1802559",
    "end": "1808480"
  },
  {
    "text": "uh it's Atomic um we get the best of both worlds you can you can essentially request a big number of instances as you",
    "start": "1808480",
    "end": "1815880"
  },
  {
    "text": "want they're thrown onto our ECS Fleet um as fresh instances you know so we",
    "start": "1815880",
    "end": "1821080"
  },
  {
    "text": "have the blue green system going uh and the old instances are running alongside them so it's and it's it's really really",
    "start": "1821080",
    "end": "1827320"
  },
  {
    "text": "fast as a result of using ECS throwing an image on to ECS is is you know matter of seconds uh at most minutes uh",
    "start": "1827320",
    "end": "1835000"
  },
  {
    "text": "compared to creating a new Fleet of ec2 instances uh I'll talk a little bit later about how this makes our rollbacks",
    "start": "1835000",
    "end": "1841720"
  },
  {
    "text": "instant enables a lot of things there of course this is possible with ec2 as well but the primary driver for all of this",
    "start": "1841720",
    "end": "1847919"
  },
  {
    "text": "was to make those initial deploys as fast and as possible that our developers are never blocked especially when",
    "start": "1847919",
    "end": "1853360"
  },
  {
    "text": "pushing out to sandbox and staging we can do custom policies for calling old",
    "start": "1853360",
    "end": "1858679"
  },
  {
    "text": "nodes depending on the workload and the type of the application uh so this could be you know a batch processing job maybe",
    "start": "1858679",
    "end": "1865320"
  },
  {
    "text": "we can call it at any time if we want to have placement for our front-end web servers or maybe we want to keep",
    "start": "1865320",
    "end": "1871919"
  },
  {
    "text": "multiple copies of our front-end web services running we want to garbage collect them very rarely to allow us to roll back to maybe one or maybe two",
    "start": "1871919",
    "end": "1878840"
  },
  {
    "text": "revisions ago U which is really powerful uh and finally our applications",
    "start": "1878840",
    "end": "1885360"
  },
  {
    "text": "are sized correctly because with with uh ECA yes you can request as granular as",
    "start": "1885360",
    "end": "1890639"
  },
  {
    "text": "down to the megabyte or to the core as much of a size of an application you need task or service it's incredibly",
    "start": "1890639",
    "end": "1898000"
  },
  {
    "text": "powerful and allows us to bin pack really effectively all of our applications no longer do you have to make a trade-off between Network and",
    "start": "1898000",
    "end": "1904840"
  },
  {
    "text": "bandwidth and size and cores and all the you don't have to think about developer doesn't have to think about this they just say hey uh you know instacart",
    "start": "1904840",
    "end": "1911760"
  },
  {
    "text": "infrastructure system I need 2 GB of memory and two cores easy and it's",
    "start": "1911760",
    "end": "1917240"
  },
  {
    "text": "enabled because of this speed this rapid pace of development it's enabled continuous delivery at",
    "start": "1917240",
    "end": "1923080"
  },
  {
    "text": "instacar so how does our deployment pipelin work as uh you know Nate alluded to",
    "start": "1923080",
    "end": "1930600"
  },
  {
    "text": "we're using a pretty standard process uh G pushes trigger web hooks our Jenkins servers pick those up build an artifact",
    "start": "1930600",
    "end": "1937480"
  },
  {
    "text": "throw it up to the to the registry uh and our job systems detect uh at the",
    "start": "1937480",
    "end": "1943200"
  },
  {
    "text": "same time that you know a build has occurred they'll run continuous integration on it ensure that it's",
    "start": "1943200",
    "end": "1948840"
  },
  {
    "text": "healthy it's it's passing all the tests uh record all of those things into our infrastructure database we have workers",
    "start": "1948840",
    "end": "1955200"
  },
  {
    "text": "that are looking at the results of all of that if it's all positive all green ready to go uh we end up rolling that",
    "start": "1955200",
    "end": "1961039"
  },
  {
    "text": "through ECS API calls and pipeline it out uh to 10% of our users so this is",
    "start": "1961039",
    "end": "1966880"
  },
  {
    "text": "for front-end Services obviously for backend Services it goes to 100% all the time uh and if those things are healthy",
    "start": "1966880",
    "end": "1974320"
  },
  {
    "text": "and we do that by having another job system that's continuously monitored ing the metrics for that deploy and if it",
    "start": "1974320",
    "end": "1980000"
  },
  {
    "text": "trips some threshold for which we look at primarily just 500s and latency although we also look at errors for a",
    "start": "1980000",
    "end": "1986679"
  },
  {
    "text": "few of them uh just generic with our error error checking system if any of",
    "start": "1986679",
    "end": "1991760"
  },
  {
    "text": "those thresholds are tripped it will do an immediate roll back um but otherwise it'll pipeline it out to the next uh 90%",
    "start": "1991760",
    "end": "1998120"
  },
  {
    "text": "of users and that's worked really well for us in ensuring that our API is always available always healthy and",
    "start": "1998120",
    "end": "2004159"
  },
  {
    "text": "there's trust in it from the developers they know that there's these systems looking at it looking at the metrics so",
    "start": "2004159",
    "end": "2009559"
  },
  {
    "text": "I can't emphasize enough that if you're doing continuous delivery especially on containers like this that you have trust",
    "start": "2009559",
    "end": "2016039"
  },
  {
    "text": "in your metrics and then you understand when your application is healthy and you have automated systems looking at that",
    "start": "2016039",
    "end": "2021240"
  },
  {
    "text": "and doing those health checks for you um so we're doing blue green deployments as I mentioned before we get",
    "start": "2021240",
    "end": "2027519"
  },
  {
    "text": "a whole fresh set of instances out on our service when we do new deployments and we're using the new elb albs uh",
    "start": "2027519",
    "end": "2035000"
  },
  {
    "text": "which allows you to S of separate these very F grain Target groups um so every",
    "start": "2035000",
    "end": "2040399"
  },
  {
    "text": "new deploy gets a randomized port assigned to it uh for a specific application and for front-end deployers",
    "start": "2040399",
    "end": "2047039"
  },
  {
    "text": "as I mentioned we always keep one running at least one sometimes again pursuant to the garbage collection",
    "start": "2047039",
    "end": "2053638"
  },
  {
    "text": "policy sometimes more than one available for more or less instant roll back so basically the API commands to Al are",
    "start": "2053639",
    "end": "2060560"
  },
  {
    "text": "like hey new deploy came out switch you know service X to Port blah blah blah if",
    "start": "2060560",
    "end": "2066560"
  },
  {
    "text": "a roll back needs to happen you just go back to the old Port it's a matter of seconds users will never notice",
    "start": "2066560",
    "end": "2072079"
  },
  {
    "text": "hopefully uh and because we're using separate ports you can do constraints on this such that it's more efficient to",
    "start": "2072079",
    "end": "2077720"
  },
  {
    "text": "roll out your your your nodes so you can have two versions of the same application running on the same host",
    "start": "2077720",
    "end": "2083520"
  },
  {
    "text": "instance uh but also stripe those across availability zones and across different nodes for high availability so it's both",
    "start": "2083520",
    "end": "2090398"
  },
  {
    "text": "efficient as well as robust reliable it's fast there's a lot of trust in it from our developers and it works really",
    "start": "2090399",
    "end": "2096200"
  },
  {
    "text": "well uh last I'd love to talk a little bit about how we do service Discovery and",
    "start": "2096200",
    "end": "2102720"
  },
  {
    "text": "service communication so luckily or by chance uh we came up with this system",
    "start": "2102720",
    "end": "2108560"
  },
  {
    "text": "far before we migrated to Containers uh and essentially what how we how the",
    "start": "2108560",
    "end": "2113720"
  },
  {
    "text": "instacart service communication and service Discovery layer works is we have a set of independent rabid mq nodes and",
    "start": "2113720",
    "end": "2120359"
  },
  {
    "text": "I say independent as in these are not clustered they're totally just separate stateless kind of dumb rabid mq nodes uh",
    "start": "2120359",
    "end": "2126960"
  },
  {
    "text": "that we running on ec2 directly and every front-end service",
    "start": "2126960",
    "end": "2132320"
  },
  {
    "text": "that is you know a server um sorry a service that's responding to customer",
    "start": "2132320",
    "end": "2137520"
  },
  {
    "text": "requests or shopper requests connects to one of these rabbits completely at random but at the",
    "start": "2137520",
    "end": "2143880"
  },
  {
    "text": "same time our backend Services all of those responding to those requests uh connect at least one instance at least",
    "start": "2143880",
    "end": "2150920"
  },
  {
    "text": "one uh version of that service is connected to every single one of the rabbits which means that when we do",
    "start": "2150920",
    "end": "2156720"
  },
  {
    "text": "maintenance or a fail fail over happens or something like that uh the very good client libraries that are available for",
    "start": "2156720",
    "end": "2162359"
  },
  {
    "text": "mqp mean that it'll be transparently retried to another rabbit and be routed to one of our back ends um this also",
    "start": "2162359",
    "end": "2169400"
  },
  {
    "text": "enables really really easy service Discovery even between services that might be still on ec2 whether or not",
    "start": "2169400",
    "end": "2176119"
  },
  {
    "text": "because uh they're Legacy or because they need specialized resources like gpus or block storage or whatnot uh it's",
    "start": "2176119",
    "end": "2183359"
  },
  {
    "text": "all done through client libraries there there's no load balancer involved there's no external resources involved",
    "start": "2183359",
    "end": "2189000"
  },
  {
    "text": "it's all whether or not your service can connect to this rabbitmq node we do service Discovery through cues uh so",
    "start": "2189000",
    "end": "2196119"
  },
  {
    "text": "it's really when you're communicating with other services hey I put my message in this queue someone one of the backend",
    "start": "2196119",
    "end": "2201480"
  },
  {
    "text": "services will pull it out and give you a response uh it's worked surprisingly performant and and very very robust",
    "start": "2201480",
    "end": "2208119"
  },
  {
    "text": "we've had very little problems with this um so again this is this was kind of instrumental in allowing us to go from",
    "start": "2208119",
    "end": "2214640"
  },
  {
    "text": "ec2 to ECS is have this kind of agnostic system for how our different Services",
    "start": "2214640",
    "end": "2220200"
  },
  {
    "text": "communicate as a final couple notes uh a couple of the other positive points of using this system are you're can have",
    "start": "2220200",
    "end": "2227280"
  },
  {
    "text": "instant registration and health checks by virtue of your application connecting to uh the rabit mq node you kind of know",
    "start": "2227280",
    "end": "2234480"
  },
  {
    "text": "that it's reached a point in its boot phase and of course we do some checks internal to that that it's healthy there's no external uh s you know",
    "start": "2234480",
    "end": "2242079"
  },
  {
    "text": "possible system checking that making sure that it's healthy the applications by virtue of connecting are healthy",
    "start": "2242079",
    "end": "2248240"
  },
  {
    "text": "and as a as a as a flip note if it gets disconnected if that node dies or the container is moved or whatnot something",
    "start": "2248240",
    "end": "2255240"
  },
  {
    "text": "happens it'll be very transparently disconnected from the queue and another uh endpoint will pick up that work uh",
    "start": "2255240",
    "end": "2261680"
  },
  {
    "text": "and it'll be again totally transparent to the front end Services which has worked really well for us of course the one con to that is",
    "start": "2261680",
    "end": "2268880"
  },
  {
    "text": "that there's no way to remove a service other than just killing the service outright uh and that's all for me thank",
    "start": "2268880",
    "end": "2276040"
  },
  {
    "text": "you very much much appreciated if you have any other questions I'm going to be standing chilling out over here and thanks so much for your time",
    "start": "2276040",
    "end": "2284599"
  }
]