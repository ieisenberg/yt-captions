[
  {
    "start": "0",
    "end": "116000"
  },
  {
    "text": "good afternoon everyone my name is andy katz i'm a product manager at AWS I'm joined",
    "start": "30",
    "end": "6029"
  },
  {
    "text": "today by Scott Julia from Yelp he's tech lead there and we're talking",
    "start": "6029",
    "end": "11040"
  },
  {
    "text": "today about step functions but first I would like to start with a short survey first question how many of you have",
    "start": "11040",
    "end": "18150"
  },
  {
    "text": "already tried step functions today ok maybe 15% of you how many you built an",
    "start": "18150",
    "end": "27029"
  },
  {
    "text": "application having tried step functions so more than one of the demos even even",
    "start": "27029",
    "end": "32640"
  },
  {
    "text": "fewer okay my goal by the end of today is that all of you have tried step",
    "start": "32640",
    "end": "39149"
  },
  {
    "text": "functions build your first workflow running successfully and are inspired to",
    "start": "39149",
    "end": "44219"
  },
  {
    "text": "do more so today we're going to talk about the benefits of using",
    "start": "44219",
    "end": "49980"
  },
  {
    "text": "orchestration in a distributed environment a little bit about how step functions works so we're not going to go",
    "start": "49980",
    "end": "55620"
  },
  {
    "text": "too deep into the stores but give you enough to get context and we talked a lot a lot about what customers have done",
    "start": "55620",
    "end": "63120"
  },
  {
    "text": "using step functions to give you some ideas about what you do in your applications so we're gonna begin with a",
    "start": "63120",
    "end": "69750"
  },
  {
    "text": "story I know it's crazy busy this week and you want to make a reservation in a",
    "start": "69750",
    "end": "76020"
  },
  {
    "text": "restaurant you have on your phone an app let's say maybe one from Yelp you take",
    "start": "76020",
    "end": "83310"
  },
  {
    "text": "out your phone and you search for restaurants and you may filter by those",
    "start": "83310",
    "end": "88350"
  },
  {
    "text": "that take reservations and that have tables available for the time you want to eat you pick a restaurant maybe a",
    "start": "88350",
    "end": "95549"
  },
  {
    "text": "vegan steakhouse and then you select a time and maybe the app asks you for how",
    "start": "95549",
    "end": "100860"
  },
  {
    "text": "many people prompts you for a phone number maybe an email address and you",
    "start": "100860",
    "end": "106079"
  },
  {
    "text": "have a reservation and voila you've completed a workflow so how do you build",
    "start": "106079",
    "end": "112259"
  },
  {
    "text": "this in a distribute environment like AWS well workflows always describe a",
    "start": "112259",
    "end": "119250"
  },
  {
    "start": "116000",
    "end": "157000"
  },
  {
    "text": "series of steps so let's take a look at just two steps step a step B and you want step a to happen before step B for",
    "start": "119250",
    "end": "129330"
  },
  {
    "text": "example you may need to pick a time before the application check two restaurants that are have open tables during that time so",
    "start": "129330",
    "end": "137160"
  },
  {
    "text": "your first choice is whether are you building this as a monolithic application and putting both steps in the same instance or the same container",
    "start": "137160",
    "end": "142920"
  },
  {
    "text": "or whether you want to build it as a distributed application where you have different instances and different containers taking care of different",
    "start": "142920",
    "end": "148890"
  },
  {
    "text": "tasks in your application as you can imagine we recommend a distributed application for availability of scale",
    "start": "148890",
    "end": "156650"
  },
  {
    "text": "now by separating these steps and connected them for example the queue you can scale each horizontally",
    "start": "156980",
    "end": "162599"
  },
  {
    "start": "157000",
    "end": "196000"
  },
  {
    "text": "independently of each other so if the first step is handling customers and it's a busy week like this week in Las",
    "start": "162599",
    "end": "168569"
  },
  {
    "text": "Vegas you can scale out step a on the other hand as Las Vegas grows and people",
    "start": "168569",
    "end": "173640"
  },
  {
    "text": "add more restaurants you can scale out to handle the more tables that your app requires to support but suppose the",
    "start": "173640",
    "end": "181200"
  },
  {
    "text": "logic is different suppose your app only requires a phone number or an email address or maybe you want to reserve the",
    "start": "181200",
    "end": "187709"
  },
  {
    "text": "table and collect the customer contact information simultaneously so do things",
    "start": "187709",
    "end": "192840"
  },
  {
    "text": "your or or in parallel you can do this with queues but now you have many points",
    "start": "192840",
    "end": "199590"
  },
  {
    "start": "196000",
    "end": "223000"
  },
  {
    "text": "of contact to maintain well if you started accepting fingerprint scans as part of the customer identification in",
    "start": "199590",
    "end": "205530"
  },
  {
    "text": "your app as your workflow changes you have multiple points to update and a bunch of components to maintain and now",
    "start": "205530",
    "end": "212760"
  },
  {
    "text": "the workflow logic is intermingled with your application logic",
    "start": "212760",
    "end": "217549"
  },
  {
    "start": "223000",
    "end": "269000"
  },
  {
    "text": "at all these points of change you're also going to find you have repetitive patterns you may want to retry when a",
    "start": "223650",
    "end": "229990"
  },
  {
    "text": "task fails do it again you may want to run things in a sequence we talked about do a then B you may want to select what",
    "start": "229990",
    "end": "236890"
  },
  {
    "text": "task follows based on the outcome of the first task so do B or C depending on what a found out like tables available",
    "start": "236890",
    "end": "243280"
  },
  {
    "text": "tables not available 7:00 p.m. is not around but 7:30 is you may want to run tasks in parallel contact the customer",
    "start": "243280",
    "end": "249820"
  },
  {
    "text": "and the restaurant at the same time you may want try catch finally pattern so try this",
    "start": "249820",
    "end": "255040"
  },
  {
    "text": "if successful great if not do something else now certainly you can maintain all",
    "start": "255040",
    "end": "260470"
  },
  {
    "text": "this code along with your business logic or you could choose to separate the things that orchestrate your workflow",
    "start": "260470",
    "end": "265570"
  },
  {
    "text": "from the business logic that makes your application unique we call this a separation of concerns so instead of",
    "start": "265570",
    "end": "272680"
  },
  {
    "start": "269000",
    "end": "309000"
  },
  {
    "text": "each element of your application having a combination of business logic and workflow logic separate the two you can",
    "start": "272680",
    "end": "279040"
  },
  {
    "text": "make your task stateless and folks that when doing one thing well single deterministic tasks and then you keep",
    "start": "279040",
    "end": "285520"
  },
  {
    "text": "track of the state of your workflow in a separate layer of your application this layer takes care of the overhead of",
    "start": "285520",
    "end": "291670"
  },
  {
    "text": "retry timeouts error handling and conditional branches and parallel steps",
    "start": "291670",
    "end": "296880"
  },
  {
    "text": "and it doesn't need to work exclusively with your compute resources you can also",
    "start": "296880",
    "end": "302050"
  },
  {
    "text": "leverage AWS resources as your task list workers so how do you do this step",
    "start": "302050",
    "end": "310060"
  },
  {
    "start": "309000",
    "end": "320000"
  },
  {
    "text": "functions a davis step functions is designed to make it easy to coordinate components of distributed applications",
    "start": "310060",
    "end": "316210"
  },
  {
    "text": "and we do this in the form of visual workflows the point of using step",
    "start": "316210",
    "end": "322000"
  },
  {
    "start": "320000",
    "end": "416000"
  },
  {
    "text": "functions is make your life easier we want to make you more productive as a",
    "start": "322000",
    "end": "328300"
  },
  {
    "text": "fully managed service we take care of the workflow infrastructure for you this allows you to spend more time thinking",
    "start": "328300",
    "end": "334090"
  },
  {
    "text": "about and innovating the business logic that makes your application unique and your applications are easier to operate",
    "start": "334090",
    "end": "340720"
  },
  {
    "text": "and maintain step functions are chords on event log of every workflow execution",
    "start": "340720",
    "end": "346270"
  },
  {
    "text": "so you can review it all in one place all the events in sequence in one location you can scale from a single",
    "start": "346270",
    "end": "353740"
  },
  {
    "text": "execution to hundreds of thousands of concurrent executions especially when you use with other",
    "start": "353740",
    "end": "359050"
  },
  {
    "text": "resources such as a tortoise lambda Amazon s3 and Amazon DynamoDB",
    "start": "359050",
    "end": "364710"
  },
  {
    "text": "with step functions you only pay for what you use when you use it scales with",
    "start": "364710",
    "end": "370030"
  },
  {
    "text": "your application it supports automatic air handling for retries and graceful exits and operates",
    "start": "370030",
    "end": "377110"
  },
  {
    "text": "at scale without you needing to configure or manage any of that underlying workflow infrastructure fully managed by us now last year at reinvent",
    "start": "377110",
    "end": "385690"
  },
  {
    "text": "we launched that functions and we took a selfie with the audience if you will indulge me we'll begin a tradition and",
    "start": "385690",
    "end": "392950"
  },
  {
    "text": "do it again I'm going to ask everybody",
    "start": "392950",
    "end": "400240"
  },
  {
    "text": "to smile and wave for the camera hello",
    "start": "400240",
    "end": "408470"
  },
  {
    "text": "[Music] all right thank you now why do we do",
    "start": "408470",
    "end": "415150"
  },
  {
    "text": "this well suppose you're building a photo sharing site what might we do with",
    "start": "415150",
    "end": "420820"
  },
  {
    "text": "a picture I just took we could upload and we convert it into different formats we could extract and transform information in that photograph and we",
    "start": "420820",
    "end": "427540"
  },
  {
    "text": "might do this for many many photos so this is an example of a photo processing workflow in this case you take a photo",
    "start": "427540",
    "end": "434830"
  },
  {
    "text": "upload it and then in parallel make a thumbnail and use Amazon recognition to",
    "start": "434830",
    "end": "440229"
  },
  {
    "text": "identify features of the photo hopefully in this case it finds people not necessarily mountains or snow today and",
    "start": "440229",
    "end": "447700"
  },
  {
    "text": "you might then do this for many many photos the flow chart on the right is an",
    "start": "447700",
    "end": "452740"
  },
  {
    "text": "actual step functions graph each stage this workflow is represented by a state and you have different types of States",
    "start": "452740",
    "end": "459010"
  },
  {
    "text": "you can see task States which is the workhorse they do work choice States at",
    "start": "459010",
    "end": "464770"
  },
  {
    "text": "branching logic if it's the wrong kind of image you can go to a fail state to exit with an error condition of your",
    "start": "464770",
    "end": "471310"
  },
  {
    "text": "choosing and then you have parallel States to do work that's decoupled and can be run in parallel for efficiency",
    "start": "471310",
    "end": "477000"
  },
  {
    "text": "now you may recognize this diagram as a finite state machine workflows and step",
    "start": "477000",
    "end": "483039"
  },
  {
    "text": "functions are defined as finite state machines now you declare workflows in",
    "start": "483039",
    "end": "489970"
  },
  {
    "start": "487000",
    "end": "550000"
  },
  {
    "text": "jason using what we call amazon states language it's declarative and this is",
    "start": "489970",
    "end": "495490"
  },
  {
    "text": "what that previous workflow looks like in ASL you can see that it starts at the",
    "start": "495490",
    "end": "501160"
  },
  {
    "text": "first stage which this case was extract image metadata and each state is connected by a field that says next so",
    "start": "501160",
    "end": "507940"
  },
  {
    "text": "literally state next state next in each state you can put tryouts retry and catch",
    "start": "507940",
    "end": "514959"
  },
  {
    "text": "clauses so you can see whoops excuse me wrong button",
    "start": "514959",
    "end": "520409"
  },
  {
    "text": "I'd probably stammered you can see a catch statement an array of catch",
    "start": "520409",
    "end": "525490"
  },
  {
    "text": "elements so if you get certain kinds of errors you can go to different parts your workflow you can also see retry policy that says if you get an error try",
    "start": "525490",
    "end": "532209"
  },
  {
    "text": "to state again you can put in exponential back-off to back off and retry and you do this state by state in your workflow this makes the code",
    "start": "532209",
    "end": "539800"
  },
  {
    "text": "contain your business logic in your task states whether they be lambda containers or ec2 instances or even",
    "start": "539800",
    "end": "545470"
  },
  {
    "text": "on-premise servers much simpler to develop and maintain your workflow is",
    "start": "545470",
    "end": "552940"
  },
  {
    "start": "550000",
    "end": "644000"
  },
  {
    "text": "going to have a lot of task states step function supports two types lambda tasks and activity tasks lambda task states",
    "start": "552940",
    "end": "561670"
  },
  {
    "text": "you see on the bottom here push work to a lambda function for you when a step",
    "start": "561670",
    "end": "566770"
  },
  {
    "text": "function state machine execution lands in a lambda task state it will give the",
    "start": "566770",
    "end": "572050"
  },
  {
    "text": "state data as input to a lambda function it will dispatch it automatically synchronous of that function and wait",
    "start": "572050",
    "end": "577870"
  },
  {
    "text": "for the function to return a result take that payload and then transitions to the",
    "start": "577870",
    "end": "583150"
  },
  {
    "text": "next state in the state machine activity task states work with all kinds of",
    "start": "583150",
    "end": "588670"
  },
  {
    "text": "compute such as Amazon ec2 instances ECS containers even on-prem resources such",
    "start": "588670",
    "end": "594130"
  },
  {
    "text": "as your laptop or mobile phone however they work differently they're",
    "start": "594130",
    "end": "600280"
  },
  {
    "text": "more like a queue they hold on to each task until the compute resource comes along and calls in and says hey do you",
    "start": "600280",
    "end": "606820"
  },
  {
    "text": "have any work for me of this type and when step functions has a state machine looking for a worker to do that work it says yes I do here you go call me back",
    "start": "606820",
    "end": "614290"
  },
  {
    "text": "when you're done and that's useful because an activity task state can remain open for up to one year so very",
    "start": "614290",
    "end": "622000"
  },
  {
    "text": "long-running jobs not necessarily computing for a whole year if you don't need to but you can do things like human",
    "start": "622000",
    "end": "627880"
  },
  {
    "text": "approval steps but also some people are doing things in things like big data or bioinformatics where they do have",
    "start": "627880",
    "end": "634030"
  },
  {
    "text": "compute jobs that last for hours step functions can watch that work and retry and pond failure when these workflows",
    "start": "634030",
    "end": "646330"
  },
  {
    "start": "644000",
    "end": "688000"
  },
  {
    "text": "are running you can monitor them from the console from the AWS CLI or through",
    "start": "646330",
    "end": "651640"
  },
  {
    "text": "the step functions API with the exception of the graph that you're seeing here all the information that's",
    "start": "651640",
    "end": "656890"
  },
  {
    "text": "in the console is also available from the CLI or from the API so all three",
    "start": "656890",
    "end": "662140"
  },
  {
    "text": "interfaces you can retrieve general status information of your workflows they'll give you the input you gave to a",
    "start": "662140",
    "end": "667420"
  },
  {
    "text": "particular workflow execution in the form of the JSON key value pairs it can be the final output of your Oracle",
    "start": "667420",
    "end": "672910"
  },
  {
    "text": "execution you can achieve the event log which we call internally the exit in history and see the inputs and",
    "start": "672910",
    "end": "678810"
  },
  {
    "text": "outputs of that execution history state-by-state and this is really really useful when you need to debug when",
    "start": "678810",
    "end": "685110"
  },
  {
    "text": "something unexpected occurs so that's a brief background you can certainly",
    "start": "685110",
    "end": "691410"
  },
  {
    "text": "discover more by visiting the console so let's talk now about what customers are",
    "start": "691410",
    "end": "696450"
  },
  {
    "text": "built with step functions we're talking about three broad use cases or three",
    "start": "696450",
    "end": "701580"
  },
  {
    "text": "broad categories of use cases first automating daily weekly or monthly tasks",
    "start": "701580",
    "end": "707330"
  },
  {
    "text": "we're talking about coordinating components of distributed applications and then we talked about building",
    "start": "707330",
    "end": "714120"
  },
  {
    "text": "sometimes service micro services which themselves may be part of a bigger distributed application and these are",
    "start": "714120",
    "end": "721530"
  },
  {
    "text": "examples of some of the customers we're going to be talking about today folks like yourselves some of you may even be",
    "start": "721530",
    "end": "727290"
  },
  {
    "text": "in the room so let's start with automation of daily weekly and monthly",
    "start": "727290",
    "end": "732510"
  },
  {
    "text": "tasks so our first example comes from home 24 24 is the market leader in",
    "start": "732510",
    "end": "740880"
  },
  {
    "start": "735000",
    "end": "780000"
  },
  {
    "text": "online shopping for home and living products they run their entire data analytics platform on AWS and they",
    "start": "740880",
    "end": "746610"
  },
  {
    "text": "analyze multiple data sources including marketing data social media data search analytics their internal ERP systems and",
    "start": "746610",
    "end": "753480"
  },
  {
    "text": "they bring all this data together to a single resource they run this on AWS services like s3 Kinesis redshift EMR",
    "start": "753480",
    "end": "759630"
  },
  {
    "text": "and DynamoDB to ingest process and analyze all this data and they're importing a regular basis about 50",
    "start": "759630",
    "end": "766260"
  },
  {
    "text": "gigabytes of data daily and then you turn into a format that they can consume and query over a double step functions",
    "start": "766260",
    "end": "773670"
  },
  {
    "text": "is used by the data team which made it very very easy for home 24 to build an ELT pipeline and they lower their costs",
    "start": "773670",
    "end": "782280"
  },
  {
    "start": "780000",
    "end": "820000"
  },
  {
    "text": "99 percent while doing it but more importantly their engineers are now more",
    "start": "782280",
    "end": "787530"
  },
  {
    "text": "productive they're able to easily integrate new data sources in a very short time sometimes about five days so",
    "start": "787530",
    "end": "794760"
  },
  {
    "text": "today they've got about 20 plus data sources they process in this step functions workflow and they can add as",
    "start": "794760",
    "end": "799800"
  },
  {
    "text": "they need it's made them more agile and more able to quickly develop pipelines to perform new transformations and new",
    "start": "799800",
    "end": "806460"
  },
  {
    "text": "analytics the platform is also more resilient and more reliable because it handles the",
    "start": "806460",
    "end": "812040"
  },
  {
    "text": "API failures of all their different data sources because step functions will automatically retry when the data is not available until it can get the data the",
    "start": "812040",
    "end": "821519"
  },
  {
    "start": "820000",
    "end": "870000"
  },
  {
    "text": "architecture looks like this it's a data Lake on s3 and they use the day lake to",
    "start": "821519",
    "end": "827399"
  },
  {
    "text": "store both raw and refined data so this is actually an ELT job they extract they load to s3 then they transform their",
    "start": "827399",
    "end": "835379"
  },
  {
    "text": "workflow is completely serverless so they actually chunk the data into bite-sized pieces they can be processed by symbol single lambda function so",
    "start": "835379",
    "end": "841920"
  },
  {
    "text": "lambda functions great and useful but they can process only for five minutes of time so how do you deal with a bigger file so in this case you iterate and you",
    "start": "841920",
    "end": "849089"
  },
  {
    "text": "to chunk at a time and so they they they start the workflow on a schedule using cloud launch events download the data",
    "start": "849089",
    "end": "856019"
  },
  {
    "text": "from the 20-plus sources break it up into chunks and air it over each chunk to refine it into the format that they",
    "start": "856019",
    "end": "861209"
  },
  {
    "text": "can consume and build their second bucket on s3 which becomes the resource that they can use in a common data",
    "start": "861209",
    "end": "866339"
  },
  {
    "text": "structure another example this one ETL",
    "start": "866339",
    "end": "872879"
  },
  {
    "start": "870000",
    "end": "1014000"
  },
  {
    "text": "for subscription fulfilment by the Guardian The Guardian is a British newspaper founded about 200 years ago",
    "start": "872879",
    "end": "879179"
  },
  {
    "text": "with nearly 200 thousand daily sales and they have several workflows running on",
    "start": "879179",
    "end": "884189"
  },
  {
    "text": "step functions in this example they're managing their home delivery list every morning they need to give their home",
    "start": "884189",
    "end": "890309"
  },
  {
    "text": "delivery fulfillment vendors a list of active subscribers they need to know",
    "start": "890309",
    "end": "895350"
  },
  {
    "text": "who's newly subscribed who may have canceled subscription who's on vacation doesn't want delivery and that list needs to be updated every day for the",
    "start": "895350",
    "end": "902009"
  },
  {
    "text": "delivery cycle before they had a workflow that took place wholly within a",
    "start": "902009",
    "end": "907799"
  },
  {
    "text": "Salesforce script so there was custom Apex code we should all the file generation and it would occasionally",
    "start": "907799",
    "end": "912929"
  },
  {
    "text": "blow up on them and they would lose their subscription list it also was selecting over synchronized data set and",
    "start": "912929",
    "end": "918179"
  },
  {
    "text": "sync wasn't reliable so they had spotty accuracy and their information and they",
    "start": "918179",
    "end": "923639"
  },
  {
    "text": "had a limited number of people that knew how to manage this code so they made a decision to rewrite the process and and",
    "start": "923639",
    "end": "929549"
  },
  {
    "text": "do it in a developer environment that they had more developed familiar with they chose an ETL paradigm and 1/10 of",
    "start": "929549",
    "end": "935009"
  },
  {
    "text": "the landscape those familiar most developers using AWS and so they built a state machine very simple four steps but",
    "start": "935009",
    "end": "942269"
  },
  {
    "text": "now the fulfillment files are pre generated and they're very fast and download for their supplier they use s3 versioning",
    "start": "942269",
    "end": "949100"
  },
  {
    "text": "which makes the process item potent so it's very easy for them to recover from failure and they're actually able to",
    "start": "949100",
    "end": "954170"
  },
  {
    "text": "make a rolling five-day projection of deliveries they can update every day and work around national holidays which",
    "start": "954170",
    "end": "960230"
  },
  {
    "text": "makes their accurate delivery much greater and so their workflow looks like",
    "start": "960230",
    "end": "966860"
  },
  {
    "text": "this every morning they need to give their suppliers this list of five days schedule and they host or suppliers are",
    "start": "966860",
    "end": "972830"
  },
  {
    "text": "sorry their subscribers in Zorah as it which is a third party SAS platform they",
    "start": "972830",
    "end": "979130"
  },
  {
    "text": "have a schedule and cloud which events that every morning at 7:30 starts kicks off the state machine which goes and says decor hey give me the list of",
    "start": "979130",
    "end": "985399"
  },
  {
    "text": "current subscribers the need delivery today or tomorrow or the next day and then waits waiting is cheap on step",
    "start": "985399",
    "end": "993350"
  },
  {
    "text": "functions and they wait for the zora query to complete they pull the data off Sora put it on s3 they called another lambda",
    "start": "993350",
    "end": "999589"
  },
  {
    "text": "function that transforms it into a format they can load onto Salesforce for consumption by their delivery service",
    "start": "999589",
    "end": "1006120"
  },
  {
    "text": "supplier logs in select the date range you're interested in pulls down one to five files of the forecast and they're",
    "start": "1006120",
    "end": "1011680"
  },
  {
    "text": "good to go for that day another example of a regular regular workflow this is a",
    "start": "1011680",
    "end": "1018579"
  },
  {
    "start": "1014000",
    "end": "1099000"
  },
  {
    "text": "weekly task perhaps business continuity zero is important particularly when have",
    "start": "1018579",
    "end": "1024339"
  },
  {
    "text": "a mission-critical workload on a double u.s. and a lot of things are backed by an EBS volume and a good practice is to",
    "start": "1024339",
    "end": "1031000"
  },
  {
    "text": "back up that EBS volume on a regular basis take snapshots store them in your region store them in a disaster recovery region this is a way to automate that",
    "start": "1031000",
    "end": "1039010"
  },
  {
    "text": "and how do you do without servers step functions this is an example of two",
    "start": "1039010",
    "end": "1044319"
  },
  {
    "text": "service workflows one in your primary region one in your disaster recovery region each workflow looks for a cloud",
    "start": "1044319",
    "end": "1051910"
  },
  {
    "text": "watch eventual says hey an EBS snapshot volume was created that kicks off a workflow that does four things it says",
    "start": "1051910",
    "end": "1057790"
  },
  {
    "text": "there's a new snapshot tag it counts how many there are start the disaster recovery copy to the",
    "start": "1057790",
    "end": "1064240"
  },
  {
    "text": "dr region and then counts what's there and says anything that's out of date delete it does the way of keeping a steady state",
    "start": "1064240",
    "end": "1069790"
  },
  {
    "text": "number of snapshots that are all fresh and cleans out and curates stale snapshots and the second state machine",
    "start": "1069790",
    "end": "1075400"
  },
  {
    "text": "the your disaster recovery region does the same thing when the copy over the dr region is complete cloud watch events",
    "start": "1075400",
    "end": "1081080"
  },
  {
    "text": "kicks off a second state machine tags it Cal Sameer there deletes the old state machines and then both of them send a",
    "start": "1081080",
    "end": "1087230"
  },
  {
    "text": "message around S&S let's say we're done and you're up to date it's a nice way to automate a daily tasks or weekly tasks",
    "start": "1087230",
    "end": "1094070"
  },
  {
    "text": "in this case here's an example of",
    "start": "1094070",
    "end": "1101450"
  },
  {
    "start": "1099000",
    "end": "1239000"
  },
  {
    "text": "simplifying a monthly task so suppose you're managing a website as a website owner you want to update your Production",
    "start": "1101450",
    "end": "1108620"
  },
  {
    "text": "website without all the changes with all the changes you've made in a reliable and fast way without having necessary to",
    "start": "1108620",
    "end": "1116510"
  },
  {
    "text": "delete the entire bucket and copy over everything you've changed in the website so this is a way to do a differential",
    "start": "1116510",
    "end": "1124150"
  },
  {
    "text": "this workflow does three things first it copies all files from a source bucket",
    "start": "1124150",
    "end": "1130010"
  },
  {
    "text": "into a destination bucket but doesn't move objects that are already present in",
    "start": "1130010",
    "end": "1135230"
  },
  {
    "text": "the destination bucket for efficiency so it only copies what's new then it looks in the destination bucket and says",
    "start": "1135230",
    "end": "1140390"
  },
  {
    "text": "anything in this destination bucket is not present in the source bucket it deletes and then it just keeps track of",
    "start": "1140390",
    "end": "1146420"
  },
  {
    "text": "all these objects regardless of how many are in each bucket so it synchronizes the two buckets this is a way of actually moving from a dev bucket to a",
    "start": "1146420",
    "end": "1151850"
  },
  {
    "text": "prod bucket in website live quickly this",
    "start": "1151850",
    "end": "1156920"
  },
  {
    "text": "is an example of a use case we have posted on github so if you want to try it yourself feel free to try just caveat",
    "start": "1156920",
    "end": "1162860"
  },
  {
    "text": "emptor deletions on s3 are pretty much a one-way door so be careful with what you connect to the state machine and now",
    "start": "1162860",
    "end": "1171410"
  },
  {
    "text": "here's an example of a task you never want to run this workflow automates the",
    "start": "1171410",
    "end": "1176690"
  },
  {
    "text": "response to an accidental public accidental exposure of your I am keys so",
    "start": "1176690",
    "end": "1181850"
  },
  {
    "text": "AWS health is a service that monitors things like github to see if somebody's accidentally put your your IM keys and",
    "start": "1181850",
    "end": "1188810"
  },
  {
    "text": "if it has it sends an event in this case it triggers a workflow that does three things first it goes in and quickly goes",
    "start": "1188810",
    "end": "1194900"
  },
  {
    "text": "and says delete that key pair it's been exposed as compromised second it goes to",
    "start": "1194900",
    "end": "1200000"
  },
  {
    "text": "cloud trail and says how they're pretty any recent API calls or any suspicious activity associated with that key pair",
    "start": "1200000",
    "end": "1205070"
  },
  {
    "text": "and then finally gather that information sends it on the security saying there was a breach here the cloud trail go take a look and make",
    "start": "1205070",
    "end": "1211460"
  },
  {
    "text": "securities review faster and easier but you'll see it also has in it a catch",
    "start": "1211460",
    "end": "1216470"
  },
  {
    "text": "date more says if for any reason it has trouble to leave that keep air maybe somebody else detected and deleted it themselves it's still notify security",
    "start": "1216470",
    "end": "1222590"
  },
  {
    "text": "and says I found something anomalous so you you're guaranteed that security gets notified one way or other either with",
    "start": "1222590",
    "end": "1228110"
  },
  {
    "text": "full information or the partial information that is available again you don't want to run this but it's there",
    "start": "1228110",
    "end": "1234919"
  },
  {
    "text": "and runs when you need it so these are",
    "start": "1234919",
    "end": "1241880"
  },
  {
    "text": "our samples of daily weekly and monthly tasks that you can automate and in some cases these are workloads that you could",
    "start": "1241880",
    "end": "1248120"
  },
  {
    "text": "imagine running at scale in other cases they were simple enough to consider replacing a shell script for greater",
    "start": "1248120",
    "end": "1253220"
  },
  {
    "text": "resilience now look at something some things that are a bit bigger distribute",
    "start": "1253220",
    "end": "1258500"
  },
  {
    "text": "applications built on step functions will start with drones drones are",
    "start": "1258500",
    "end": "1264980"
  },
  {
    "start": "1262000",
    "end": "1366000"
  },
  {
    "text": "interesting sky catch provides drone data to industrial enterprises they do",
    "start": "1264980",
    "end": "1271660"
  },
  {
    "text": "machine machine automation to do inspection of building sites to provide",
    "start": "1271660",
    "end": "1276950"
  },
  {
    "text": "their partners metrics on what's going on during construction of a building they have a scalable data processing",
    "start": "1276950",
    "end": "1283610"
  },
  {
    "text": "platform that's cloud-based prayut airy photo processing and they can custom",
    "start": "1283610",
    "end": "1288980"
  },
  {
    "text": "tune that processing for the specific requirements of their of their customers and their machine learning algorithm to",
    "start": "1288980",
    "end": "1293990"
  },
  {
    "text": "do things like count trees remove objects identify targets and this all runs in the cloud",
    "start": "1293990",
    "end": "1299590"
  },
  {
    "text": "they have several state machines the one that's interesting is they use the state machine to pick the resource they want",
    "start": "1299590",
    "end": "1305630"
  },
  {
    "text": "to use to compute the job and they save 60% on their costs and improve their SLA",
    "start": "1305630",
    "end": "1311330"
  },
  {
    "text": "x' for their customers at the same time the state machine chooses between a spot",
    "start": "1311330",
    "end": "1318350"
  },
  {
    "text": "ec2 instance and on-demand instance and they can give up on the spot auction if they're running out of time to complete",
    "start": "1318350",
    "end": "1323390"
  },
  {
    "text": "the job so they first go into a first state which says how big is this job",
    "start": "1323390",
    "end": "1328520"
  },
  {
    "text": "when does it do and if there's enough time go to a spot auction and if the spot auction doesn't yield an instance",
    "start": "1328520",
    "end": "1334130"
  },
  {
    "text": "in time they can default over to an on-demand instance to complete the job on time but by managing their computer",
    "start": "1334130",
    "end": "1339320"
  },
  {
    "text": "sources in this way they pick the right instance at the right time you know for the right job they also",
    "start": "1339320",
    "end": "1345230"
  },
  {
    "text": "found that by using state machines in their workflows they can simplify several stages their operation they",
    "start": "1345230",
    "end": "1350720"
  },
  {
    "text": "simplified error analysis because not every drone photo is perfect sometimes the drone takes picture the sky and that",
    "start": "1350720",
    "end": "1356390"
  },
  {
    "text": "can interfere with the workflow this allows them to resume processing images with a consistent protocol whenever they",
    "start": "1356390",
    "end": "1362390"
  },
  {
    "text": "find an error in the data set that they're they're processing in this case",
    "start": "1362390",
    "end": "1367850"
  },
  {
    "start": "1366000",
    "end": "1401000"
  },
  {
    "text": "the architecture is pretty simple you have a lambda function that values the job it makes a choice Tate says do I go",
    "start": "1367850",
    "end": "1373549"
  },
  {
    "text": "for the on demand instance or do I go for the spot auction once I've got the instance up and running it runs an image",
    "start": "1373549",
    "end": "1379070"
  },
  {
    "text": "processing workflow which is another step function state machine and what it's all done they can take down take",
    "start": "1379070",
    "end": "1385370"
  },
  {
    "text": "down the Machine and they monitor these things using they can use an asynchronous polling loop we call job",
    "start": "1385370",
    "end": "1391640"
  },
  {
    "text": "status polar and the templates on step functions to watch asynchronous tasks that are running and things like ec2 for",
    "start": "1391640",
    "end": "1402200"
  },
  {
    "start": "1401000",
    "end": "1430000"
  },
  {
    "text": "a second example we've invited a customer to tell you about of themselves it's fine if I tell you stories it's",
    "start": "1402200",
    "end": "1407809"
  },
  {
    "text": "better form you hear it from a customer so Scott trillion at Yelp he's here to share their experiences building",
    "start": "1407809",
    "end": "1414470"
  },
  {
    "text": "distribute applications with AWS that functions",
    "start": "1414470",
    "end": "1418720"
  },
  {
    "text": "all right thanks Andy I'm here to talk a little bit about how Yelp uses stuff",
    "start": "1424400",
    "end": "1429720"
  },
  {
    "text": "functions so to do that I'm gonna be introducing you to the concept of",
    "start": "1429720",
    "end": "1435090"
  },
  {
    "text": "subscription billing as it exists at Yelp and in particular we're gonna be",
    "start": "1435090",
    "end": "1440160"
  },
  {
    "text": "talking about this use case where you have an old cold codebase something that",
    "start": "1440160",
    "end": "1445530"
  },
  {
    "text": "maybe doesn't look quite like you want it to something where you can think of some rough edges that have emerged over",
    "start": "1445530",
    "end": "1451680"
  },
  {
    "text": "the course of say the last 10 years and the reality is that all of our older",
    "start": "1451680",
    "end": "1458010"
  },
  {
    "text": "code bases tend toward something like this right they tend toward spaghetti and we essentially have this problem",
    "start": "1458010",
    "end": "1465720"
  },
  {
    "text": "where we want to fix that we want to take this code that isn't quite how we think it should be to a better place",
    "start": "1465720",
    "end": "1472440"
  },
  {
    "text": "maybe use some of the cool concepts that you've been hearing about here to re-invent but we need to do so safely",
    "start": "1472440",
    "end": "1478890"
  },
  {
    "text": "and effectively so what we're going to talk about is the monthly invoicing",
    "start": "1478890",
    "end": "1484020"
  },
  {
    "text": "process for advertising accounts that Yelp and this is a really business",
    "start": "1484020",
    "end": "1489690"
  },
  {
    "text": "critical process it works over about over a hundred thousand accounts as of",
    "start": "1489690",
    "end": "1495000"
  },
  {
    "text": "this year and it's something that's scaled up over a long time it's changed",
    "start": "1495000",
    "end": "1500370"
  },
  {
    "text": "over a long time but it's still responsible for the majority of the revenue that Yelp collects so if I'm",
    "start": "1500370",
    "end": "1506820"
  },
  {
    "text": "gonna go in and make a large architectural change I need to have a lot of confidence that that change is not going to break anything so I can",
    "start": "1506820",
    "end": "1515610"
  },
  {
    "text": "contextualize this process within a much longer job out to the left and the right",
    "start": "1515610",
    "end": "1521040"
  },
  {
    "text": "of this diagram is a nightly job it runs for these days around seven hours",
    "start": "1521040",
    "end": "1526230"
  },
  {
    "text": "roughly and it does a lot of stuff it's very important the responsibilities of that long process are not solely",
    "start": "1526230",
    "end": "1533150"
  },
  {
    "text": "according to my team but within it right in the middle we have these three important steps and these correspond to",
    "start": "1533150",
    "end": "1540900"
  },
  {
    "text": "the collection of money from advertisers so first we go over all of the accounts",
    "start": "1540900",
    "end": "1546180"
  },
  {
    "text": "that we're discussing over a hundred thousand of them and we're essentially trying to figure out what does each advertiser owed to us that's the bill",
    "start": "1546180",
    "end": "1552840"
  },
  {
    "text": "account step and then after that we're gonna make invoices and we're gonna collect money from those accounts but as we were scaling",
    "start": "1552840",
    "end": "1560020"
  },
  {
    "text": "this up we hit a complex problem we started to feel the pain of an old process running on old code that maybe",
    "start": "1560020",
    "end": "1566770"
  },
  {
    "text": "we didn't understand like we wanted to that bill all accounts step is running over a lot of different accounts and if",
    "start": "1566770",
    "end": "1573850"
  },
  {
    "text": "one of them maybe you're 25% of the way through the workload fails you would",
    "start": "1573850",
    "end": "1579880"
  },
  {
    "text": "stop the whole process it would halt it would pay John call may be nice and early something like 5 a.m. and it would",
    "start": "1579880",
    "end": "1587080"
  },
  {
    "text": "tell us something kind of uninformative it would say hey Scot it's 5 a.m. wake up please and then it would tell me",
    "start": "1587080",
    "end": "1594310"
  },
  {
    "text": "something went wrong with the billing of all accounts right an error occurred were 25% of the way through everybody's",
    "start": "1594310",
    "end": "1601360"
  },
  {
    "text": "waiting for us to finish the other 75% of the accounts good luck and that was",
    "start": "1601360",
    "end": "1606970"
  },
  {
    "text": "essentially the job we gave to our on-call engineers and that's a pretty rough situation to be in so we wanted to",
    "start": "1606970",
    "end": "1612820"
  },
  {
    "text": "make it better we want to make it more resilient we want to make it more observable and understandable",
    "start": "1612820",
    "end": "1618720"
  },
  {
    "text": "now we zoomed in and we said we're just gonna target this first section because we think we can do a better job if we",
    "start": "1618720",
    "end": "1625390"
  },
  {
    "text": "focus a little bit but it turns out that focusing on just the billing of accounts",
    "start": "1625390",
    "end": "1630790"
  },
  {
    "text": "just deciding what people owe wasn't enough to make this an easy problem we still couldn't observe the tasks that we",
    "start": "1630790",
    "end": "1638050"
  },
  {
    "text": "had to do here we still didn't understand what would fail or why and it was older code it was tangled and it was",
    "start": "1638050",
    "end": "1644200"
  },
  {
    "text": "still complex so luckily we could use step functions to make that all possible",
    "start": "1644200",
    "end": "1650220"
  },
  {
    "start": "1650000",
    "end": "1692000"
  },
  {
    "text": "now we've heard a lot of cool concept if you were at the Aria yesterday you were exposed to a lot of serverless concepts",
    "start": "1650220",
    "end": "1657120"
  },
  {
    "text": "things like api gateway things like amazon lambda and these are really cool",
    "start": "1657120",
    "end": "1662230"
  },
  {
    "text": "tools and we thought maybe they'd be relevant for us but they weren't quite things that we thought we could apply",
    "start": "1662230",
    "end": "1667510"
  },
  {
    "text": "right away no good api existed for this code so it wasn't gonna work to put it behind api gateway and as far as the",
    "start": "1667510",
    "end": "1674770"
  },
  {
    "text": "complexity and the granularity of the functions nothing was really small enough that it felt like lambda was",
    "start": "1674770",
    "end": "1680440"
  },
  {
    "text": "really relevant for us we're not factored into these small nice pieces so",
    "start": "1680440",
    "end": "1685510"
  },
  {
    "text": "we're left in a spot where we know we want to maybe make progress in this direction but we can't use these tools",
    "start": "1685510",
    "end": "1690580"
  },
  {
    "text": "directly now our old code looked roughly something like this this is the process",
    "start": "1690580",
    "end": "1697390"
  },
  {
    "start": "1692000",
    "end": "1730000"
  },
  {
    "text": "for billing every account that we need to go through we would take this large side of accounts and we break it into",
    "start": "1697390",
    "end": "1703090"
  },
  {
    "text": "chunks we had a homegrown parallelism framework that allowed us to do some amount of",
    "start": "1703090",
    "end": "1709290"
  },
  {
    "text": "concurrency within each chunk so we weren't literally serially working through a hundred thousand accounts but",
    "start": "1709290",
    "end": "1715660"
  },
  {
    "text": "then the real meat of it the logic that we cared about was this Bill account method and this is where we decided how much to bill whether someone had used",
    "start": "1715660",
    "end": "1723100"
  },
  {
    "text": "used adds this month or not and concerns like that so that was where all the logic was and this is where we started",
    "start": "1723100",
    "end": "1730230"
  },
  {
    "text": "now our first choice was how are we going to migrate this onto step functions at all so we went ahead and",
    "start": "1730230",
    "end": "1736000"
  },
  {
    "text": "decided and this luckily was something that felt pretty correct and pretty easy but the right granularity was to bill a",
    "start": "1736000",
    "end": "1742240"
  },
  {
    "text": "single account in a single execution and so our executions were gonna basically map on to that bill account function",
    "start": "1742240",
    "end": "1749140"
  },
  {
    "text": "that we just talked about now we still had to trigger all of these right we had to have some sort of master",
    "start": "1749140",
    "end": "1755110"
  },
  {
    "text": "process that was responsible for starting a lot of different executions and so we kept just a very thin layer of",
    "start": "1755110",
    "end": "1761140"
  },
  {
    "text": "code that was responsible for starting the executions as fast as possible and we let Amazon go ahead and handle the",
    "start": "1761140",
    "end": "1767920"
  },
  {
    "text": "concurrency handle the monitoring of all these different executions in flight and keep track of them for us and something",
    "start": "1767920",
    "end": "1776410"
  },
  {
    "start": "1775000",
    "end": "1817000"
  },
  {
    "text": "really nice that we saw right off the bat with that was we were able to start acting a little more like a service right we had a bunch of code sitting in",
    "start": "1776410",
    "end": "1783730"
  },
  {
    "text": "a monolith it was not nicely refactored behind some sort of API but step",
    "start": "1783730",
    "end": "1788770"
  },
  {
    "text": "functions when we were starting these executions required data and we were able to start acting as if we were",
    "start": "1788770",
    "end": "1793840"
  },
  {
    "text": "communicating with a service far in advance of actually having that built out so we specified what it means to",
    "start": "1793840",
    "end": "1799630"
  },
  {
    "text": "start billing for a single account you have to supply an account ID in a date and something like that and now our",
    "start": "1799630",
    "end": "1805060"
  },
  {
    "text": "clients are nice and decoupled from the implementation of the workflow so if we need to change how billing works for",
    "start": "1805060",
    "end": "1811450"
  },
  {
    "text": "this particular execution we can do that in the future and our clients are none the wiser but we had another problem",
    "start": "1811450",
    "end": "1819450"
  },
  {
    "start": "1817000",
    "end": "1868000"
  },
  {
    "text": "Andy talked earlier about the sort of distinction of how you do your tasks can either be pushing data into lambdas",
    "start": "1819450",
    "end": "1826330"
  },
  {
    "text": "and we've already said that doesn't feel like it's immediately an option for us or you can be pulling work with activity",
    "start": "1826330",
    "end": "1832630"
  },
  {
    "text": "tasks and so this was really nice for us we could actually add just a little bit of glue code just enough code to ask",
    "start": "1832630",
    "end": "1838960"
  },
  {
    "text": "Amazon should I build an account and after we were done to be able to tell Amazon that it worked or it didn't work",
    "start": "1838960",
    "end": "1845410"
  },
  {
    "text": "and we were able to wrap the existing functionality we already had with minimal refactoring remember the reason",
    "start": "1845410",
    "end": "1851950"
  },
  {
    "text": "we weren't making this better in the first place is it was dangerous to change the code so we don't want to",
    "start": "1851950",
    "end": "1857020"
  },
  {
    "text": "change the functionality of Bill account before we're ready to but we can just wrap a little layer around the outside",
    "start": "1857020",
    "end": "1862510"
  },
  {
    "text": "and we can go ahead and have it integrated into our very very simple workflow so you might be wondering Scott",
    "start": "1862510",
    "end": "1871600"
  },
  {
    "start": "1868000",
    "end": "2340000"
  },
  {
    "text": "you've described a workflow here with a single activity task in it that doesn't sound super compelling I don't",
    "start": "1871600",
    "end": "1877390"
  },
  {
    "text": "understand why this is even valuable yet and it turned out that there were a few things we got right off the bat just by",
    "start": "1877390",
    "end": "1883510"
  },
  {
    "text": "integrating with step functions the first of those was a real boost in concurrency so I talked earlier that we",
    "start": "1883510",
    "end": "1891250"
  },
  {
    "text": "already had some in-house method of parallelizing billing across all these accounts and we were now relying on step",
    "start": "1891250",
    "end": "1897670"
  },
  {
    "text": "functions to manage the parallel billing of all these different accounts and what we found was that that parallelism",
    "start": "1897670",
    "end": "1903610"
  },
  {
    "text": "factor was really easy to change so we can either kick off more simultaneous executions or we can tune that down and",
    "start": "1903610",
    "end": "1910510"
  },
  {
    "text": "maybe even kick them off in serial and at the extreme but maybe more importantly for us it actually offered",
    "start": "1910510",
    "end": "1916210"
  },
  {
    "text": "significant speed ups so this is what might look like a fairly boring graph but it's actually really exciting to us",
    "start": "1916210",
    "end": "1922770"
  },
  {
    "text": "we're plotting on the x-axis time so about the three-hour period where we're doing all these executions and on the",
    "start": "1922770",
    "end": "1929560"
  },
  {
    "text": "y-axis we're plotting how many executions we are starting over that time and what we saw with step functions",
    "start": "1929560",
    "end": "1935620"
  },
  {
    "text": "was basically it soaked up these executions as fast as we were able to send them and this is true over the",
    "start": "1935620",
    "end": "1941740"
  },
  {
    "text": "entire three-hour period of the batch process now our old process wanted to do",
    "start": "1941740",
    "end": "1947110"
  },
  {
    "text": "the same thing but had some degradation in parallelism over time and so this was actually a big boost in the overall",
    "start": "1947110",
    "end": "1952570"
  },
  {
    "text": "efficiency of billing all these hundred thousand-plus accounts and we've actually written",
    "start": "1952570",
    "end": "1957700"
  },
  {
    "text": "some of this into a blog post if you look on yelps engineering blog or Google Yelp step functions you can see a little",
    "start": "1957700",
    "end": "1964180"
  },
  {
    "text": "more detail on how it worked before and why this was a big improvement but it",
    "start": "1964180",
    "end": "1970450"
  },
  {
    "text": "wasn't just that performance that we got from this right that wasn't the only benefit we saw a lot of improvements",
    "start": "1970450",
    "end": "1976750"
  },
  {
    "text": "around observability and if you remember back to the original problem the reason this code was dangerous for us to touch",
    "start": "1976750",
    "end": "1983740"
  },
  {
    "text": "this is actually a really central issue knowing whether or not I've successfully build a single account and in particular",
    "start": "1983740",
    "end": "1990940"
  },
  {
    "text": "knowing whether or not I've successfully built all of the accounts is a really really important problem and it's going",
    "start": "1990940",
    "end": "1996250"
  },
  {
    "text": "to get even more important for us to know as we start to change the logic and refactor the internals of this process",
    "start": "1996250",
    "end": "2001940"
  },
  {
    "text": "so we were able to explicitly handle success and failure modes and we were",
    "start": "2001940",
    "end": "2007410"
  },
  {
    "text": "able actually to represent those in the workflow itself so this gives us a nice way to start to detangle all of the",
    "start": "2007410",
    "end": "2014280"
  },
  {
    "text": "responsibilities of Bill account we're able to pull out things like retries things like timeouts things like what do",
    "start": "2014280",
    "end": "2020820"
  },
  {
    "text": "you do in the success or the failure case out of that single mega function and into these other activity tasks or",
    "start": "2020820",
    "end": "2027210"
  },
  {
    "text": "the step functions workflow itself and maybe most importantly we now have",
    "start": "2027210",
    "end": "2032250"
  },
  {
    "text": "failure at the granularity of a single account if we remember back to that",
    "start": "2032250",
    "end": "2037440"
  },
  {
    "text": "on-call engineer's problem they were woken up at 5 a.m. told that the entirety of the process had failed",
    "start": "2037440",
    "end": "2044070"
  },
  {
    "text": "and it was currently making no progress on any accounts right and that might have been because a single account had",
    "start": "2044070",
    "end": "2049919"
  },
  {
    "text": "an issue that might have been because 10% of accounts were having issues but the point was everything stopped the",
    "start": "2049919",
    "end": "2056730"
  },
  {
    "text": "whole world stopped while that on-call engineer woke up diagnosed a pretty vague problem and tried to restart the",
    "start": "2056730",
    "end": "2063120"
  },
  {
    "text": "process successfully so when we break the granularity of failure down to a single execution we",
    "start": "2063120",
    "end": "2068760"
  },
  {
    "text": "can have 5 or 10 accounts that are having problems today they'll have",
    "start": "2068760",
    "end": "2073770"
  },
  {
    "text": "really clear feedback signals to us we can tell that something went wrong and the other of 99% of the accounts that",
    "start": "2073770",
    "end": "2081000"
  },
  {
    "text": "are working just fine carry on in parallel so decoupling those two is a big win for us",
    "start": "2081000",
    "end": "2087800"
  },
  {
    "text": "and I talked a little bit about timeouts we didn't have a concept of timeouts in the original system it was happy to chug",
    "start": "2088330",
    "end": "2095379"
  },
  {
    "text": "along and keep working for as long as we let it this led to a really painful post-mortem sometime last year where we",
    "start": "2095380",
    "end": "2102730"
  },
  {
    "text": "had the billing process get way way way slower for about 10% of our accounts",
    "start": "2102730",
    "end": "2108250"
  },
  {
    "text": "that we were doing billing for and the way that we figured this out was not any timely feedback hey your code is getting",
    "start": "2108250",
    "end": "2114790"
  },
  {
    "text": "slow we figured it out at 2:00 p.m. when the job was supposed to have been done for hours and it turns out it was way at",
    "start": "2114790",
    "end": "2121060"
  },
  {
    "text": "the start of its workload so we wanted to speed up those feedback cycles we wanted to be told immediately when we",
    "start": "2121060",
    "end": "2126430"
  },
  {
    "text": "were having problems with things running slowly or not completing and we were able to put that into place with the timeouts that step function supports",
    "start": "2126430",
    "end": "2133090"
  },
  {
    "text": "they're very flexible we can say that an entire activity might be really slow for a large account like 20 minutes and we",
    "start": "2133090",
    "end": "2140560"
  },
  {
    "text": "can still dial in those heartbeats and say if I don't check in with you regularly every minute something has",
    "start": "2140560",
    "end": "2145570"
  },
  {
    "text": "gone horribly wrong please treat it as a failure and if we want to retry on these we can build that into the workflow and",
    "start": "2145570",
    "end": "2151390"
  },
  {
    "text": "if we want to hard fail we can choose to do that too and we've talked a lot about",
    "start": "2151390",
    "end": "2157800"
  },
  {
    "text": "observability and improvements in the reliability of the process and this is where it really starts to pay for itself",
    "start": "2157800",
    "end": "2163780"
  },
  {
    "text": "we've gotten on to Amazon step functions we've been able to start using these very simplistic workflows and now we can",
    "start": "2163780",
    "end": "2171310"
  },
  {
    "text": "start making the real refactorings that we had originally wanted to do safely and with confidence so we can say that",
    "start": "2171310",
    "end": "2177970"
  },
  {
    "text": "hey that bill account step it looked a little large it still had a lot of functionality packed into it let's break",
    "start": "2177970",
    "end": "2183760"
  },
  {
    "text": "out different steps for bookkeeping for the different types of products that Yelp cells and we can do this in",
    "start": "2183760",
    "end": "2189070"
  },
  {
    "text": "parallel which is something that step functions supports and we can maybe run this side by side with the old state",
    "start": "2189070",
    "end": "2194500"
  },
  {
    "text": "machine and gain confidence that it's working correctly that's working successfully before we roll it out all",
    "start": "2194500",
    "end": "2200560"
  },
  {
    "text": "the way and this is something that wouldn't have been possible with the old system I couldn't have told you whether",
    "start": "2200560",
    "end": "2205930"
  },
  {
    "text": "or not things were working reliably or correctly until I tried it one day and this gives us a much more realistic",
    "start": "2205930",
    "end": "2211570"
  },
  {
    "text": "method to roll these concepts out and to make more refactor refactoring",
    "start": "2211570",
    "end": "2217240"
  },
  {
    "text": "improvements down the line so I want to kind of take a step back",
    "start": "2217240",
    "end": "2222710"
  },
  {
    "text": "and talk about overall the benefits that we've seen now I don't know about all of",
    "start": "2222710",
    "end": "2228020"
  },
  {
    "text": "you I don't know where the code that you work with is on this spectrum from kind of a monolithic world to services or",
    "start": "2228020",
    "end": "2235370"
  },
  {
    "text": "micro services or even all the way over to functions like lambdas but I can say for myself my code it tends more toward",
    "start": "2235370",
    "end": "2243620"
  },
  {
    "text": "the monolithic side it's somewhere somewhere in between monolithic and micro services and so having a execution",
    "start": "2243620",
    "end": "2250130"
  },
  {
    "text": "model having a tool like step functions that can flexibly support me where my code is at and give me the sort of power",
    "start": "2250130",
    "end": "2257060"
  },
  {
    "text": "and leverage I want to maybe move more into micro services direction is really really valuable and we saw",
    "start": "2257060",
    "end": "2263780"
  },
  {
    "text": "that it can support us all the way at the fully monolithic side and incrementally as we move more and more",
    "start": "2263780",
    "end": "2268880"
  },
  {
    "text": "distributed and the other side of this is it's really incrementally valuable to",
    "start": "2268880",
    "end": "2276200"
  },
  {
    "text": "us I can't go to my bosses or my product managers and propose a six month long",
    "start": "2276200",
    "end": "2282440"
  },
  {
    "text": "engineering trek with four engineers and have them sign off on that right I can't",
    "start": "2282440",
    "end": "2287480"
  },
  {
    "text": "tell them you're not gonna see any value until six months are over and then the whole thing is gonna work great I promise",
    "start": "2287480",
    "end": "2293290"
  },
  {
    "text": "instead we need something that's gonna work right off the bat give us value and",
    "start": "2293290",
    "end": "2298300"
  },
  {
    "text": "benefits immediately and then continue to deliver those over time as we make the system better and better and right",
    "start": "2298300",
    "end": "2304940"
  },
  {
    "text": "off the bat we saw really great improvements in decoupling our clients",
    "start": "2304940",
    "end": "2309980"
  },
  {
    "text": "we're now unaware of how the workflow itself was processing we saw really good benefits in terms of parallelism we",
    "start": "2309980",
    "end": "2316850"
  },
  {
    "text": "talked about the concurrency going up the overall throughput of the process improving and crucially we saw those",
    "start": "2316850",
    "end": "2323360"
  },
  {
    "text": "improvements in observability so we were able to go from maybe not totally knowing if the system was working or not",
    "start": "2323360",
    "end": "2329120"
  },
  {
    "text": "to quick feedback loops very clear cycles a system that we could",
    "start": "2329120",
    "end": "2334190"
  },
  {
    "text": "incremental e improve and incrementally understand and all that's really valuable and that's kind of been yelps",
    "start": "2334190",
    "end": "2342290"
  },
  {
    "text": "experience so far with step functions it's a platform that's flexible it can",
    "start": "2342290",
    "end": "2347540"
  },
  {
    "text": "support our oldest applications with minimal modifications but it's going to deliver those",
    "start": "2347540",
    "end": "2353720"
  },
  {
    "text": "observability those performance benefits right away and that's going to give us",
    "start": "2353720",
    "end": "2358730"
  },
  {
    "text": "leverage right it's going to allow us to make the changes we want to make change our architecture in the ways we think",
    "start": "2358730",
    "end": "2364160"
  },
  {
    "text": "would be improved and step function is is right there supporting us along the way and before I hand it off back to",
    "start": "2364160",
    "end": "2372140"
  },
  {
    "start": "2370000",
    "end": "2411000"
  },
  {
    "text": "Andy I want to just walk through each of those steps in sequence because I think it's really interesting to see the kind of iterative improvement and evolution",
    "start": "2372140",
    "end": "2378650"
  },
  {
    "text": "of a workflow over time so we started off with one very very simple workflow",
    "start": "2378650",
    "end": "2384290"
  },
  {
    "text": "and essentially the idea here was all I wanted to do was to start using step",
    "start": "2384290",
    "end": "2389330"
  },
  {
    "text": "functions I don't want to change code we're just gonna set it all right there in the middle as the sole step in a",
    "start": "2389330",
    "end": "2394430"
  },
  {
    "text": "workflow but we get the concurrency benefits and we get the observability and after that we can start to",
    "start": "2394430",
    "end": "2400970"
  },
  {
    "text": "instrument it for better observability we can start to decouple error handling logging metrics failure modes into their",
    "start": "2400970",
    "end": "2408440"
  },
  {
    "text": "own tasks and that can give us even more confidence going forward as we start to build the kind of system that we think",
    "start": "2408440",
    "end": "2414590"
  },
  {
    "start": "2411000",
    "end": "2462000"
  },
  {
    "text": "ought to actually exist here we can break down larger functions into smaller sub steps we can run them in parallel",
    "start": "2414590",
    "end": "2420680"
  },
  {
    "text": "for efficiency purposes and all of this is being done with the kind of observability and confidence that we",
    "start": "2420680",
    "end": "2426770"
  },
  {
    "text": "gained from using step functions in the first place and then maybe if at some",
    "start": "2426770",
    "end": "2432020"
  },
  {
    "text": "point we feel ready for it we think it's right for our use cases we can selectively move some or all of these",
    "start": "2432020",
    "end": "2437660"
  },
  {
    "text": "tasks over to a push model with AWS lambda and having that be ready for us",
    "start": "2437660",
    "end": "2443960"
  },
  {
    "text": "when we decide it's correct and having set functions to work with us over the whole process has been super valuable so",
    "start": "2443960",
    "end": "2451940"
  },
  {
    "text": "with that thanks for listening and I'll hand it back off to Andy",
    "start": "2451940",
    "end": "2456070"
  },
  {
    "text": "hmm",
    "start": "2457180",
    "end": "2460180"
  },
  {
    "text": "so that's pretty cool a monolith transformed into distributed workflows",
    "start": "2463469",
    "end": "2470769"
  },
  {
    "text": "simply by adding step functions again I",
    "start": "2470769",
    "end": "2476649"
  },
  {
    "text": "think that's pretty neat again that blog if you want to search for it if you just search step functions Yelp or Yelp step functions it will come",
    "start": "2476649",
    "end": "2482829"
  },
  {
    "text": "up that's brand spanking new finally I want to share with you the third use case some examples of",
    "start": "2482829",
    "end": "2489759"
  },
  {
    "text": "customers building micro services using step functions to back behind the API so",
    "start": "2489759",
    "end": "2496779"
  },
  {
    "start": "2496000",
    "end": "2517000"
  },
  {
    "text": "first as an example from Ellie Mae Ellie Mae is a cloud-based platform provider for the mortgage and finance",
    "start": "2496779",
    "end": "2502569"
  },
  {
    "text": "industry the process is almost 40% of u.s. mortgages every year they created",
    "start": "2502569",
    "end": "2509349"
  },
  {
    "text": "an internal self-service API to run performance tests on their application development and managed infrastructure",
    "start": "2509349",
    "end": "2514359"
  },
  {
    "text": "in order to reduce costs they created something they called pop the",
    "start": "2514359",
    "end": "2520179"
  },
  {
    "start": "2517000",
    "end": "2623000"
  },
  {
    "text": "performance orchestration platform to reduce cost they saved nearly ten thousand dollars a month doing so and what's their approach",
    "start": "2520179",
    "end": "2526509"
  },
  {
    "text": "is step functions this is going to look similar to what you saw a little bit",
    "start": "2526509",
    "end": "2531879"
  },
  {
    "text": "with sky catch is they calculate and set the number of tasks they want to run on ECS so now they're using containers and",
    "start": "2531879",
    "end": "2539579"
  },
  {
    "text": "they deploy these containers and then one of the containers actually goes and listens to step functions for a task",
    "start": "2539579",
    "end": "2545729"
  },
  {
    "text": "which then represents the job they want to test deploys the infrastructure runs",
    "start": "2545729",
    "end": "2551169"
  },
  {
    "text": "the test tears down the infrastructure report the result so it's actually in some ways a state machine pulling itself",
    "start": "2551169",
    "end": "2556749"
  },
  {
    "text": "up by the bootstraps because it's going to deploy in the form of containers the activity workers that it's going to use",
    "start": "2556749",
    "end": "2562329"
  },
  {
    "text": "downstream in the execution one of the team had some really interesting",
    "start": "2562329",
    "end": "2567699"
  },
  {
    "text": "outcomes from this they told us that in the course of billions project they had fantastic sprint demos they had a lot of",
    "start": "2567699",
    "end": "2574419"
  },
  {
    "text": "fun week over week showing what they had accomplished they actually wrote less code they obviously save money in",
    "start": "2574419",
    "end": "2581739"
  },
  {
    "text": "infrastructure and they now have an app that a CSD ready for automating test results they learned a lot of lessons",
    "start": "2581739",
    "end": "2589329"
  },
  {
    "text": "along the way their recommendation our recommendation breakdown tasks into deterministic steps if you use",
    "start": "2589329",
    "end": "2596990"
  },
  {
    "text": "lambda mind it can be very easy to debug especially if there's simple single task functions when you have large documents",
    "start": "2596990",
    "end": "2605270"
  },
  {
    "text": "to pass through your state machine store those an s3 past the object key through the state machine that's a way to manage a big documents we want to move",
    "start": "2605270",
    "end": "2611000"
  },
  {
    "text": "megabytes and gigabytes through a state machine you saw home 24 drinks something like that as well",
    "start": "2611000",
    "end": "2616600"
  },
  {
    "text": "and finally use activity tasks wherever you have something that runs for a very long period of time this is what their",
    "start": "2616600",
    "end": "2624290"
  },
  {
    "start": "2623000",
    "end": "2658000"
  },
  {
    "text": "architecture looks like a little bit elaborate but essentially the job they want to run they put on s3 they add the",
    "start": "2624290",
    "end": "2631820"
  },
  {
    "text": "job to a dyno table that dynamo table is picked up on a schedule from cloud watch events takes that input from dynamodb",
    "start": "2631820",
    "end": "2638330"
  },
  {
    "text": "runs the workflow that calls CloudFormation to scale up an ECS cluster validates that new new",
    "start": "2638330",
    "end": "2644540"
  },
  {
    "text": "infrastructure runs the test publisher the results user gets the results back",
    "start": "2644540",
    "end": "2650210"
  },
  {
    "text": "to the API and they take down the infrastructure so it's ephemeral testing frameworks at scale another example this",
    "start": "2650210",
    "end": "2660410"
  },
  {
    "start": "2658000",
    "end": "2708000"
  },
  {
    "text": "one comes from out systems mount systems if you go online and look at our talk on step functions last year presented on a",
    "start": "2660410",
    "end": "2666050"
  },
  {
    "text": "varying use case there a creating alarms so their engineers went waking up the middle of night this year",
    "start": "2666050",
    "end": "2671690"
  },
  {
    "text": "AB system shared something new they built a micro service that in this case",
    "start": "2671690",
    "end": "2676850"
  },
  {
    "text": "manages migrating off of one RDS instance into another out systems is a",
    "start": "2676850",
    "end": "2682330"
  },
  {
    "text": "company that provides low code platform for development of mobile applications",
    "start": "2682330",
    "end": "2688370"
  },
  {
    "text": "and and this challenge of their customers were outgrowing their RDS instances they have a single tenant",
    "start": "2688370",
    "end": "2694010"
  },
  {
    "text": "platform everybody gets an RDS instance and they had to pick a size that will fit everybody but eventually some",
    "start": "2694010",
    "end": "2700970"
  },
  {
    "text": "customers were outgrowing so they had over-provision everybody the handful the small number of people that were growing so you stepped on should dress the",
    "start": "2700970",
    "end": "2707960"
  },
  {
    "text": "challenge they actually built a workflow that would decommission an old RDS",
    "start": "2707960",
    "end": "2714020"
  },
  {
    "start": "2708000",
    "end": "2751000"
  },
  {
    "text": "instance create a new RDS instance with a bigger volume and move the data over and to do so they took advantage of a",
    "start": "2714020",
    "end": "2721910"
  },
  {
    "text": "capability on RDS that allows you to backup your database on to s3 and then restore it so",
    "start": "2721910",
    "end": "2727260"
  },
  {
    "text": "this case they've built it's very hard to see but that's a state machine that goes through a series of steps that takes down that at RDS instance moves",
    "start": "2727260",
    "end": "2733560"
  },
  {
    "text": "the data s3 deploys into instance with a bigger volume and then restores and by",
    "start": "2733560",
    "end": "2739260"
  },
  {
    "text": "doing so they were able to reduce their storage cost sixty percent by moving from a base instance of a terabyte down",
    "start": "2739260",
    "end": "2746550"
  },
  {
    "text": "to four hundred gigabytes and then scaling as their customers needed this",
    "start": "2746550",
    "end": "2752010"
  },
  {
    "start": "2751000",
    "end": "2800000"
  },
  {
    "text": "is what their reference architecture looks like again API gateway calls put the task into Dino and starts a state",
    "start": "2752010",
    "end": "2758430"
  },
  {
    "text": "machine first they check that they have all the requirements and they wait for an approval to get going",
    "start": "2758430",
    "end": "2764670"
  },
  {
    "text": "they then cut off network access to the database instance except for a single IP address so they put a bottleneck they",
    "start": "2764670",
    "end": "2770970"
  },
  {
    "text": "backup the date of the existing database onto s3 they create a new database",
    "start": "2770970",
    "end": "2776400"
  },
  {
    "text": "instance with that larger storage volume they start the backup they wait for the backup and restore to complete they then",
    "start": "2776400",
    "end": "2784230"
  },
  {
    "text": "configure some things that are specific to their architecture they swap the names they restore network access to the",
    "start": "2784230",
    "end": "2790680"
  },
  {
    "text": "new instance and they tear down the old instance and so you know hands-free from the operator done through an API call so",
    "start": "2790680",
    "end": "2801180"
  },
  {
    "start": "2800000",
    "end": "2870000"
  },
  {
    "text": "these customer use cases we've gone through six should give you an idea of the wide range of ways you can use step",
    "start": "2801180",
    "end": "2807060"
  },
  {
    "text": "functions again to increase your productivity your agility and your resilience of scale and whether you're",
    "start": "2807060",
    "end": "2812970"
  },
  {
    "text": "replacing a brittle shell script or running a huge workflow like Scott does it Yelp or other customers step",
    "start": "2812970",
    "end": "2819870"
  },
  {
    "text": "functions offers you an easy and fun way to add resilience to your applications and we have more sessions this week",
    "start": "2819870",
    "end": "2826680"
  },
  {
    "text": "including this one that will be online soon so we're overlapping right now with a",
    "start": "2826680",
    "end": "2831900"
  },
  {
    "text": "chalk talk but we have coming up a workshop tomorrow and for those want to",
    "start": "2831900",
    "end": "2837270"
  },
  {
    "text": "do a deep dive into serverless architectures on step functions we have one on Thursday state machines in the wild with even more customer examples",
    "start": "2837270",
    "end": "2844200"
  },
  {
    "text": "there also will be at the service kiosk in the expo so come feel free to talk to",
    "start": "2844200",
    "end": "2850440"
  },
  {
    "text": "us understand that not just serving us but we also speak containers and instances and on-premise servers so",
    "start": "2850440",
    "end": "2856410"
  },
  {
    "text": "bring anything in all questions to us but also you get started by visit",
    "start": "2856410",
    "end": "2861470"
  },
  {
    "text": "our URL step function slash reinvent for blogs reference architectures tutorials",
    "start": "2861470",
    "end": "2866990"
  },
  {
    "text": "to get started today what I'll encourage you to do and I told you my goal at the",
    "start": "2866990",
    "end": "2873530"
  },
  {
    "start": "2870000",
    "end": "3006000"
  },
  {
    "text": "beginning was to get everybody in this room to build a state machine and I'd ask of you to build a state machine this week there are three if you go to the",
    "start": "2873530",
    "end": "2880820"
  },
  {
    "text": "console the easiest one is this canonical hello world you saw Scott used it to build out micro",
    "start": "2880820",
    "end": "2887210"
  },
  {
    "text": "services at Yelp there are three flavours the first one you can build in five minutes actually in two minutes use",
    "start": "2887210",
    "end": "2894320"
  },
  {
    "text": "a pass state you can also build it with a lambda function as a lambda hello",
    "start": "2894320",
    "end": "2899359"
  },
  {
    "text": "world or you can build with an activity task state all three are in our developer guide with step by step",
    "start": "2899359",
    "end": "2904520"
  },
  {
    "text": "tutorials and you get started the console will do it easily and all will fit in the free tier when you get done",
    "start": "2904520",
    "end": "2911210"
  },
  {
    "text": "playing with app where you can explore retry and catch statements and maybe go to the second one which is a task timer we reintroduce a wait state and wait for",
    "start": "2911210",
    "end": "2918740"
  },
  {
    "text": "some period of time and then call a lambda function that puts a message on an SNS topic send yourself an email that",
    "start": "2918740",
    "end": "2925609"
  },
  {
    "text": "one takes about five minutes to put together and starts to expose you to some of the power of step functions to do long-running task with lambda",
    "start": "2925609",
    "end": "2931760"
  },
  {
    "text": "functions and then finally if you want something more advanced and interesting the job status polar lets you manage a",
    "start": "2931760",
    "end": "2939020"
  },
  {
    "text": "job on AWS patch and synchrony our a secrecy calls batch descends a job and",
    "start": "2939020",
    "end": "2944810"
  },
  {
    "text": "poll set job status until it's complete and then eggs of the workflow execution again all three of these are in the",
    "start": "2944810",
    "end": "2950510"
  },
  {
    "text": "developer guide we have step-by-step tutorials and all three in terms of use",
    "start": "2950510",
    "end": "2956720"
  },
  {
    "text": "of step functions use of lambda will fit in the free tier you can run a couple",
    "start": "2956720",
    "end": "2962390"
  },
  {
    "text": "hundred executions and stay well within the free tier so feel free to try with",
    "start": "2962390",
    "end": "2967700"
  },
  {
    "text": "with no fear of incurring the bill and then finally tell us what you built",
    "start": "2967700",
    "end": "2974980"
  },
  {
    "text": "hash tag step functions please post what you built show us picture state machine",
    "start": "2974980",
    "end": "2980780"
  },
  {
    "text": "tell us what you liked and we'll keep an eye on it and who knows if somebody posts something really interesting we",
    "start": "2980780",
    "end": "2986780"
  },
  {
    "text": "may be reaching out to you and inviting you to be here with us next year on stage we look forward to hearing from",
    "start": "2986780",
    "end": "2993109"
  },
  {
    "text": "you thank you for your time it's cotton I'll be in the corner here happy to answer any and all questions",
    "start": "2993109",
    "end": "2998130"
  },
  {
    "text": "you may have for the next few minutes thanks again [Applause]",
    "start": "2998130",
    "end": "3008679"
  }
]