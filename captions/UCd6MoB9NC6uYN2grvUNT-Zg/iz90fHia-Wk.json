[
  {
    "start": "0",
    "end": "73000"
  },
  {
    "text": "good afternoon everybody Welcome to svr 305 if you're looking at the name of the",
    "start": "480",
    "end": "7000"
  },
  {
    "text": "session and you're expecting us to play Contra games up here then I'm sorry you're in the wrong",
    "start": "7000",
    "end": "12120"
  },
  {
    "text": "room the the intent of this talk is to be Lambda cheat codes or what are the",
    "start": "12120",
    "end": "18480"
  },
  {
    "text": "special things that you could do with Lambda to optimize that last minute last mile of performance that you can get out",
    "start": "18480",
    "end": "23920"
  },
  {
    "text": "of your system uh a little bit about myself uh",
    "start": "23920",
    "end": "29199"
  },
  {
    "text": "my name is vom Gran I'm manager on the product management team at AWS",
    "start": "29199",
    "end": "35480"
  },
  {
    "text": "Lambda I was here up on stage last year talking at talking about what Lambda is and how you could build applications and",
    "start": "35480",
    "end": "41680"
  },
  {
    "text": "different architecture patterns using Lambda and I'm really excited to see the enthusiasm that you you folks have shown",
    "start": "41680",
    "end": "48760"
  },
  {
    "text": "in helping us build the feature set for Lambda and building a better ecosystem that you could",
    "start": "48760",
    "end": "54160"
  },
  {
    "text": "use today we have with us here Rick the VP for data scientist data service",
    "start": "54160",
    "end": "60480"
  },
  {
    "text": "and the also the chief data scientist at Hurst who's going to be sharing some of his experiences of how Hurst technology",
    "start": "60480",
    "end": "68439"
  },
  {
    "text": "uses uh AWS Lambda in their ecosystem so what to expect from this uh",
    "start": "68439",
    "end": "74159"
  },
  {
    "start": "73000",
    "end": "73000"
  },
  {
    "text": "from this uh uh from this talk we'll do a very quick recap of how you could",
    "start": "74159",
    "end": "79520"
  },
  {
    "text": "build applications using Lambda how you could work with Lambda I don't want to spend too much of time here I would",
    "start": "79520",
    "end": "85200"
  },
  {
    "text": "rather go deep into the best practices but we'll have Rick come on stage and share what he has built at his company",
    "start": "85200",
    "end": "92560"
  },
  {
    "text": "on specifically around the her clickstream and data pipeline which he'll share more details about and then",
    "start": "92560",
    "end": "99119"
  },
  {
    "text": "we'll do a walkth through of best practices and hacks and tips and tricks across the entire life cycle of building",
    "start": "99119",
    "end": "106119"
  },
  {
    "text": "a Lambda function right from development and testing through deployment and application life cycle management",
    "start": "106119",
    "end": "112159"
  },
  {
    "text": "through security scaling debugging operations so we'll do the full walkth through of what are the things that you",
    "start": "112159",
    "end": "117759"
  },
  {
    "text": "as a developer could do to increase the productivity of your own team to increase what your Lambda",
    "start": "117759",
    "end": "123399"
  },
  {
    "text": "function can do and unlock new use cases hopefully we should leave time for Q&A",
    "start": "123399",
    "end": "128560"
  },
  {
    "text": "at the end either way if we we'll be at the stage afterwards to to take some more",
    "start": "128560",
    "end": "134440"
  },
  {
    "text": "questions so let's get started with working with AWS Lambda if you have already attended a few sessions here",
    "start": "134440",
    "end": "140160"
  },
  {
    "text": "today then you might have seen some of these slides before but I'll do a quick walk through for those of you who",
    "start": "140160",
    "end": "146720"
  },
  {
    "start": "142000",
    "end": "142000"
  },
  {
    "text": "haven't the way to think of Lambda functions the way to work with AWS Lambda is to think of these three",
    "start": "146720",
    "end": "153360"
  },
  {
    "text": "different blocks there is the input to the Lambda function the Lambda functions would run",
    "start": "153360",
    "end": "159480"
  },
  {
    "text": "every time there is a trigger there is an Event Source associated with it that",
    "start": "159480",
    "end": "164840"
  },
  {
    "text": "Event Source could be different types of events it could be changes in data state",
    "start": "164840",
    "end": "171080"
  },
  {
    "text": "if you you have new data that's coming in and you want to process your your Lambda the data on the on the live then",
    "start": "171080",
    "end": "178040"
  },
  {
    "text": "you can go and build a Lambda function to process that data you could have data coming in as request to endpoints the",
    "start": "178040",
    "end": "184000"
  },
  {
    "text": "data could be changes in resource States in your own infrastructure so that's the input which",
    "start": "184000",
    "end": "189200"
  },
  {
    "text": "triggers the Lambda function the Lambda function itself is a piece of code which you write and upload to the cloud and we",
    "start": "189200",
    "end": "195000"
  },
  {
    "text": "will execute that piece of code for you in response to that trigger and we have four languages which",
    "start": "195000",
    "end": "201120"
  },
  {
    "text": "we support today hopefully we'll have more languages coming soon and then the output is what you do",
    "start": "201120",
    "end": "206879"
  },
  {
    "text": "with that data now once you have that data or once you have that trigger coming in you want to take some action",
    "start": "206879",
    "end": "212480"
  },
  {
    "text": "based on it Lambda can be that compute engine for you and then you go Downstream and either store that data",
    "start": "212480",
    "end": "219560"
  },
  {
    "text": "somewhere else after some transformation or you go and call some endpoint or you go and take some action based on that",
    "start": "219560",
    "end": "227000"
  },
  {
    "text": "input the benefits that Lambda would would would give you in this in this scenario is that it allow you to focus",
    "start": "227000",
    "end": "234400"
  },
  {
    "start": "231000",
    "end": "231000"
  },
  {
    "text": "more of your efforts on writing that logic rather than maintaining the whole",
    "start": "234400",
    "end": "240200"
  },
  {
    "text": "infrastructure that goes behind that so you no longer have to go and figure out",
    "start": "240200",
    "end": "245760"
  },
  {
    "text": "how many servers do I need to run here how am I going to scale them how am I going to go and figure out what the",
    "start": "245760",
    "end": "251360"
  },
  {
    "text": "right uh setup for these INF for this instances are is the right is the environment the right place is the the",
    "start": "251360",
    "end": "257600"
  },
  {
    "text": "operating system in the right place all of this infrastructure management is go goes away you just have to write the",
    "start": "257600",
    "end": "263560"
  },
  {
    "text": "code and that code will execute in response to the trigger it also makes it very cost- effective and efficient to",
    "start": "263560",
    "end": "269360"
  },
  {
    "text": "run these these Lambda functions to run your code because you no longer have to maintain a fleet of servers which are",
    "start": "269360",
    "end": "274600"
  },
  {
    "text": "waiting there for a request to come in Lambda is going to only run when there is something to do so effectively out of",
    "start": "274600",
    "end": "281520"
  },
  {
    "text": "the box you're getting 100% utilization and the third thing is bring your own code now as we add more",
    "start": "281520",
    "end": "287840"
  },
  {
    "text": "languages you'll you no longer have to learn any new paradigms there's no new language to run or there's no new",
    "start": "287840",
    "end": "294080"
  },
  {
    "text": "Frameworks to learn to have to use a Lambda function you can take an existing code which you have upload it and it",
    "start": "294080",
    "end": "299960"
  },
  {
    "text": "should work and then talking of event sources",
    "start": "299960",
    "end": "305199"
  },
  {
    "start": "303000",
    "end": "303000"
  },
  {
    "text": "there are multiple event sources which trigger Lambda functions and you there are different categories which we have put them into but you can categorize",
    "start": "305199",
    "end": "311120"
  },
  {
    "text": "them as you want there could be data stores which are invoking a Lambda function there's new data coming in and",
    "start": "311120",
    "end": "316800"
  },
  {
    "text": "that new data is going to be the trigger of the Lambda function you could have different endpoints that are triggering",
    "start": "316800",
    "end": "323199"
  },
  {
    "text": "the Lambda function you know if you're something coming in from a voice endpoint or a web or mobile app request",
    "start": "323199",
    "end": "329360"
  },
  {
    "text": "that's coming in could trigger the Lambda function or even devices who are sending in information about their own",
    "start": "329360",
    "end": "335080"
  },
  {
    "text": "state or what's going on in their surroundings could be the trigger to the Lambda function we have configuration",
    "start": "335080",
    "end": "341840"
  },
  {
    "text": "repositories and also event and message services and this makes up what the infrastructure automation story would",
    "start": "341840",
    "end": "347199"
  },
  {
    "text": "look like so if you have things which are changing in your environment and",
    "start": "347199",
    "end": "352240"
  },
  {
    "text": "those could become the triggers for Lambda functions and if you you can very quickly map what event sources are",
    "start": "352240",
    "end": "359000"
  },
  {
    "text": "supported to what use cases you can think about think of so we have seen three key scenarios that customers are",
    "start": "359000",
    "end": "365440"
  },
  {
    "start": "361000",
    "end": "361000"
  },
  {
    "text": "using AWS Lambda for and this is just a categorization that doesn't mean that if your workload doesn't fit this scenario",
    "start": "365440",
    "end": "371680"
  },
  {
    "text": "then you shouldn't be using Lambda this is just the most common ones is as we have data data sources as",
    "start": "371680",
    "end": "378520"
  },
  {
    "text": "event as triggers you could do near realtime data processing so instead of",
    "start": "378520",
    "end": "384039"
  },
  {
    "text": "waiting for data to accumulate and then processing it as a whole batch just let the data stream in every file that gets",
    "start": "384039",
    "end": "390560"
  },
  {
    "text": "uploaded every request that comes in just treat it as an independent source of data run a Lambda function against",
    "start": "390560",
    "end": "396360"
  },
  {
    "text": "that data and you can you can then start processing you can generating insights out of that data and you heard in the in",
    "start": "396360",
    "end": "403479"
  },
  {
    "text": "the announcement today like finra for example uses this pattern where they process half a trillion such data points",
    "start": "403479",
    "end": "410599"
  },
  {
    "text": "per day using Lambda functions the other scenario I talked about is these user interactions every",
    "start": "410599",
    "end": "417840"
  },
  {
    "text": "time there is somebody who is calling in into the into the cloud who is waiting",
    "start": "417840",
    "end": "423280"
  },
  {
    "text": "for a response from the cloud and is trying to take some action based on that user request and that's where you think",
    "start": "423280",
    "end": "429800"
  },
  {
    "text": "of app back ends it's a mobile and web app where you can integrate through API Gateway or it's a iot device which you",
    "start": "429800",
    "end": "436120"
  },
  {
    "text": "can integrate through the AWS iot or just even a uh a chatbot which you can integrate through Amazon Lex which we",
    "start": "436120",
    "end": "443039"
  },
  {
    "text": "announced to this morning or it's even a voice command which is coming through an uh Amazon uh the Amazon Alexa",
    "start": "443039",
    "end": "450319"
  },
  {
    "text": "that also triggers the Lambda function and the third use case is to build control systems and this is the",
    "start": "450319",
    "end": "457120"
  },
  {
    "text": "infrastructure automation piece you have changes in your infrastructure The Event",
    "start": "457120",
    "end": "462240"
  },
  {
    "text": "Source is some other machine in your own setup it's some other device it's some",
    "start": "462240",
    "end": "467280"
  },
  {
    "text": "other thing which you control as an infrastructure and you want to create custom workflows and you want to create",
    "start": "467280",
    "end": "473960"
  },
  {
    "text": "your entire application pattern that responds to these changes in state in your environment",
    "start": "473960",
    "end": "481360"
  },
  {
    "text": "and we have customers like Netflix who have now built great applications around",
    "start": "481360",
    "end": "486560"
  },
  {
    "text": "this space for example they have their entire fleet of instances they are planning to add a layer of management",
    "start": "486560",
    "end": "494560"
  },
  {
    "text": "and infrastructure control using Lambda functions which separate out the application stack from the actual",
    "start": "494560",
    "end": "500479"
  },
  {
    "text": "infrastructure by by keeping all of this automated and then we have customers who",
    "start": "500479",
    "end": "505759"
  },
  {
    "text": "have tried to do all of these use cases put together and Hurst is very good example of that and we'll have Rick on",
    "start": "505759",
    "end": "511840"
  },
  {
    "text": "stage who comes who comes and talks specifically about their data processing application but he can also share",
    "start": "511840",
    "end": "517120"
  },
  {
    "text": "insights on what what his vision is on using Lambda in different application use cases so Rick I'd like to welcome",
    "start": "517120",
    "end": "524039"
  },
  {
    "text": "you on stage",
    "start": "524039",
    "end": "530279"
  },
  {
    "text": "thanks H thanks viam uh hello Rick",
    "start": "530279",
    "end": "537440"
  },
  {
    "text": "McFarland um quickly what I'm going to be talking about today is I'm going to share with you a practical example of",
    "start": "537440",
    "end": "544959"
  },
  {
    "text": "using lambdas at Hurst uh and how we took our click stream and our old click stream which we",
    "start": "544959",
    "end": "552680"
  },
  {
    "text": "presented at the last reinvent in 2015 which was a Chon based clickstream and",
    "start": "552680",
    "end": "558079"
  },
  {
    "text": "we what I called lamb defied it uh and I'll share with you some tips and tricks",
    "start": "558079",
    "end": "564440"
  },
  {
    "text": "along the way if you're planning on doing it on uh on your at your home",
    "start": "564440",
    "end": "571360"
  },
  {
    "start": "570000",
    "end": "570000"
  },
  {
    "text": "uh before I get started on on Lambda i' quick introduction how many of you have ever heard of Hurst",
    "start": "571920",
    "end": "578560"
  },
  {
    "text": "before all right good of those of you that have heard of it um what business",
    "start": "578560",
    "end": "584839"
  },
  {
    "text": "is it in that's the question I usually ask what business are we in a lot of people start that when they answer that",
    "start": "584839",
    "end": "591720"
  },
  {
    "text": "they usually say publishing but I'm going to try to position a different case for you before I get into the",
    "start": "591720",
    "end": "597839"
  },
  {
    "text": "Lambda stuff here on on our business and our business model because that's important to understand why Lambda",
    "start": "597839",
    "end": "604640"
  },
  {
    "text": "Lambda has helped us achieve better results so uh Hurst is a company that",
    "start": "604640",
    "end": "612480"
  },
  {
    "text": "owns a lot of different magazines across the world you might recognize some of these we have uh 20 magazines in the US",
    "start": "612480",
    "end": "620600"
  },
  {
    "text": "and 300 titles internationally um we have newspapers",
    "start": "620600",
    "end": "626120"
  },
  {
    "text": "across the country so many of our uh sites collect data or provide",
    "start": "626120",
    "end": "631279"
  },
  {
    "text": "information uh for newspapers we also have 30 broadcasting stations across the across the",
    "start": "631279",
    "end": "639279"
  },
  {
    "text": "country and we're also into businessto business data our company owns uh fit",
    "start": "639279",
    "end": "645399"
  },
  {
    "text": "ratings if you're in the financial service business uh blackbook in the automotive business and uh also a lot of",
    "start": "645399",
    "end": "651560"
  },
  {
    "text": "healthc care data um so I would argue that Hurst is more than a publisher I think that Hurst",
    "start": "651560",
    "end": "657720"
  },
  {
    "text": "is really a a data is a data creation business we're",
    "start": "657720",
    "end": "665000"
  },
  {
    "text": "in the business of creating data our websites our editors our properties are",
    "start": "665000",
    "end": "670120"
  },
  {
    "text": "creating content that is driving the internet driving your apps driving the social media across the uh across the",
    "start": "670120",
    "end": "678920"
  },
  {
    "text": "globe um so being in the in the data business",
    "start": "678920",
    "end": "685200"
  },
  {
    "text": "uh it's important that you have to have a good handle on on the big data because that's that's where our data is we're in",
    "start": "685200",
    "end": "691320"
  },
  {
    "text": "the petabyte scale size data and as we all know big data is a lot different",
    "start": "691320",
    "end": "697680"
  },
  {
    "text": "than regular data it's uh coming from many different sources it's",
    "start": "697680",
    "end": "704079"
  },
  {
    "text": "unstructured it's super fast it's streaming now it's not in batch",
    "start": "704079",
    "end": "709639"
  },
  {
    "text": "mode and the expertise you need to manipulate and manage this data is quite",
    "start": "709639",
    "end": "715519"
  },
  {
    "text": "different you need Cloud engineering and machine learning and uh people with",
    "start": "715519",
    "end": "721160"
  },
  {
    "text": "computer science backgrounds and Underneath It All the thing that's driving our big data platform at Hearst",
    "start": "721160",
    "end": "727880"
  },
  {
    "text": "is what we call the clickstream and uh our",
    "start": "727880",
    "end": "734800"
  },
  {
    "text": "clickstream is I in our previous presentation uh I'm going to show you uh",
    "start": "734800",
    "end": "739880"
  },
  {
    "text": "from last year what it's how it's built and what it's made of but it's a Chron based clickstream at the beginning of",
    "start": "739880",
    "end": "747360"
  },
  {
    "start": "745000",
    "end": "745000"
  },
  {
    "text": "2016 after the last re event so our clickstream basically collects",
    "start": "747360",
    "end": "752680"
  },
  {
    "text": "data from all of the 300 plus websites around the world uh we're collecting 100 terabytes",
    "start": "752680",
    "end": "760800"
  },
  {
    "text": "of data in a year across all the different properties and streaming it into a Kinesis",
    "start": "760800",
    "end": "767519"
  },
  {
    "text": "stream and then we're performing ETL on it in a spark cluster and then we do our data science",
    "start": "767519",
    "end": "774399"
  },
  {
    "text": "where we manipulate the data and create new variables and and enrichment on it",
    "start": "774399",
    "end": "779639"
  },
  {
    "text": "and then we pump that into a Dynamo database with an API Gateway front end",
    "start": "779639",
    "end": "785160"
  },
  {
    "text": "so we can feed applications and products uh in real time across the hear",
    "start": "785160",
    "end": "792560"
  },
  {
    "text": "Network this was our click stream at the start of",
    "start": "792560",
    "end": "798120"
  },
  {
    "text": "2016 we had about 100 gigabyt of data coming in uh the ETL process takes about 30",
    "start": "798440",
    "end": "806360"
  },
  {
    "text": "seconds we had 100 seconds worth of machine machine learning and and data science performed on it 5 seconds into",
    "start": "806360",
    "end": "813040"
  },
  {
    "text": "the into the API Gateway and in about 2 minutes we're able to push data from the",
    "start": "813040",
    "end": "818320"
  },
  {
    "text": "front end of our websites all the way through the API back door and feed",
    "start": "818320",
    "end": "823480"
  },
  {
    "text": "applications across Hurst now the the clickstream at the",
    "start": "823480",
    "end": "831800"
  },
  {
    "text": "start of 2016 was governed the process was governed by crons which are essentially little",
    "start": "831800",
    "end": "837759"
  },
  {
    "text": "clocks that manage the the throughput of the data or the Shepherds of this",
    "start": "837759",
    "end": "842800"
  },
  {
    "text": "process and they run on 5 minute increments or at least they used to you",
    "start": "842800",
    "end": "848680"
  },
  {
    "text": "have a cron that runs at the very beginning of the of the gate and it then",
    "start": "848680",
    "end": "853880"
  },
  {
    "text": "is regulated by a follow-up cron on the Kinesis stream that dumps the data into an ETL process the ETL shoves it into a",
    "start": "853880",
    "end": "861880"
  },
  {
    "text": "a data science phase the data science KRON then runs and shoves it into uh the",
    "start": "861880",
    "end": "868040"
  },
  {
    "text": "Dynamo database with an API application on the front",
    "start": "868040",
    "end": "873959"
  },
  {
    "text": "end well that was that was a quick recap of where we were after the last",
    "start": "876360",
    "end": "881839"
  },
  {
    "text": "reinvent and as you know the big Lambda announcement in the last reinvent got us very intrigued at Hurst and uh we met",
    "start": "881839",
    "end": "891160"
  },
  {
    "text": "with the AWS team and said we would really like to lamby our um our uh or or clickstream",
    "start": "891160",
    "end": "901360"
  },
  {
    "text": "mainly because the problem with crons is that the speed at which you can",
    "start": "901360",
    "end": "907240"
  },
  {
    "text": "transfer data through the process is limited by the clock and you're not really able to",
    "start": "907240",
    "end": "912360"
  },
  {
    "text": "speed it up any faster because the clock has to finish running in addition the crons are housed",
    "start": "912360",
    "end": "920399"
  },
  {
    "text": "on servers or on ec2 boxes and those servers need CIS admins and people to",
    "start": "920399",
    "end": "927040"
  },
  {
    "text": "manage them and we were very intrigued by the prospect of lambdas because it does it does have the",
    "start": "927040",
    "end": "934319"
  },
  {
    "text": "ability to free us up of servers it's a serverless process and uh it also had",
    "start": "934319",
    "end": "940199"
  },
  {
    "text": "the promise of being uh more robust and also the trigger based idea",
    "start": "940199",
    "end": "945519"
  },
  {
    "text": "the concept of triggers made us very excited because we feel like now we don't have to wait for",
    "start": "945519",
    "end": "951319"
  },
  {
    "text": "the clock to stop before the next clock runs we can just let the process dictate",
    "start": "951319",
    "end": "956440"
  },
  {
    "text": "its own speed and so therefore it's it's like a bunch of dominoes falling so I'm going to show you the now",
    "start": "956440",
    "end": "964959"
  },
  {
    "text": "I'm going to share with you the process over the last year of how we evolved our Chron based click stream into a Lambda",
    "start": "964959",
    "end": "971440"
  },
  {
    "text": "based click stream a trigger based clickstream and I'm going to share with you kind of the pains the growth pains",
    "start": "971440",
    "end": "976600"
  },
  {
    "text": "that we had uh and some of the tricks and tips that we had that maybe if you're going to do this will save you a",
    "start": "976600",
    "end": "983319"
  },
  {
    "text": "lot of time uh as you shift possibly your environment to a Lambda based",
    "start": "983319",
    "end": "988600"
  },
  {
    "text": "environment so this is the core of the clickstream",
    "start": "988600",
    "end": "994600"
  },
  {
    "text": "really has three main four main components the uh Kinesis stream",
    "start": "994600",
    "end": "999639"
  },
  {
    "text": "onboarding the data the massive amount of data into the stream you have to process the data you have to do data",
    "start": "999639",
    "end": "1006199"
  },
  {
    "text": "science on it and you have to shove it into an API and store",
    "start": "1006199",
    "end": "1011959"
  },
  {
    "text": "it so the first thing we wanted to do is we the first cron we built was was an",
    "start": "1013440",
    "end": "1019160"
  },
  {
    "text": "experimental cron or the first Lambda we built was an experimental Lambda on the",
    "start": "1019160",
    "end": "1024760"
  },
  {
    "text": "offload of the data from the Kinesis stream into S3 for permanent storage that was our a very simple Lambda and we",
    "start": "1024760",
    "end": "1032520"
  },
  {
    "text": "wanted to start simple and see what we could learn and so the first first thing we built was the",
    "start": "1032520",
    "end": "1039438"
  },
  {
    "text": "Kinesis fire hose to S3 Lambda which is triggered by data going into the Kinesis",
    "start": "1039439",
    "end": "1045640"
  },
  {
    "text": "stream and it flows into S3 for permanent storage uh and we discovered one of the first",
    "start": "1045640",
    "end": "1052320"
  },
  {
    "text": "little issues about lambdas is they have a 5minute run time and if they don't run",
    "start": "1052320",
    "end": "1058120"
  },
  {
    "text": "in 5 minutes they fail and uh we we noted that because our next",
    "start": "1058120",
    "end": "1065520"
  },
  {
    "text": "step in the Lambda ification of our clickstream is the ETL process and the ETL process basically takes the data in",
    "start": "1065520",
    "end": "1072960"
  },
  {
    "text": "this in the click stream in this in the Kinesis stream and pre-processes it",
    "start": "1072960",
    "end": "1078360"
  },
  {
    "text": "cleans it up and uh shoves it back into S3 as well so we created an ETL",
    "start": "1078360",
    "end": "1085720"
  },
  {
    "text": "Lambda and the uh thing we started noticing is every once in a while the",
    "start": "1085720",
    "end": "1091600"
  },
  {
    "text": "lambdas would fail because they would take longer than 5 minutes to run and U we we noticed that there were",
    "start": "1091600",
    "end": "1099440"
  },
  {
    "text": "some holes in our data uh so the first tip I have is that",
    "start": "1099440",
    "end": "1105320"
  },
  {
    "text": "we my team decided that we need to actually have a watchdog so if you're if your process",
    "start": "1105320",
    "end": "1113880"
  },
  {
    "text": "relies on data not having holes and having continuity one of the tricks that we did was we added a second Lambda",
    "start": "1113880",
    "end": "1121880"
  },
  {
    "text": "that's named almost the exact same name as the main Lambda and we called it a watchdog and it's basically a crown",
    "start": "1121880",
    "end": "1127960"
  },
  {
    "text": "based Lambda that looks to see if there's a failure and if it is or if there's a hole in the data for example",
    "start": "1127960",
    "end": "1133880"
  },
  {
    "text": "it'll run its it'll run on its own and fill in the gaps we call these the",
    "start": "1133880",
    "end": "1139080"
  },
  {
    "text": "Watchdog lambdas so if you're going to make a production system I think one of my",
    "start": "1139080",
    "end": "1145159"
  },
  {
    "text": "first recommendations is to think about having a watchdog uh and that helps eliminate the",
    "start": "1145159",
    "end": "1152159"
  },
  {
    "text": "need for a CIS admin 90% of the CIS admin's jobs is to fix holes uh and this little Watchdog Lambda",
    "start": "1152159",
    "end": "1159400"
  },
  {
    "text": "is pretty cool because it fixes a lot of the holes so the next Lambda we created was",
    "start": "1159400",
    "end": "1164640"
  },
  {
    "text": "a uh data science step Lambda that contains some machine learning and some enrichment calculations that we're doing",
    "start": "1164640",
    "end": "1171600"
  },
  {
    "text": "we're actually translating a lot of our worldwide uh content into English and so",
    "start": "1171600",
    "end": "1179559"
  },
  {
    "text": "we have actually a translator in there and we also noticed that there were holes in there and so we created a",
    "start": "1179559",
    "end": "1184760"
  },
  {
    "text": "watchdog for that um and then finally we had a Lambda",
    "start": "1184760",
    "end": "1190559"
  },
  {
    "text": "that actually pushes the data into Dynamo and another Lambda that pushes it into the API gate that runs within the",
    "start": "1190559",
    "end": "1196880"
  },
  {
    "text": "API Gateway so one of the things that I probably you'll first notice is as you lamb toy a",
    "start": "1196880",
    "end": "1204760"
  },
  {
    "text": "clickstream um you'll probably find that you have a lot of little lambdas a lot more lambdas than you have kons and",
    "start": "1204760",
    "end": "1211080"
  },
  {
    "text": "that's basically because you take apart a process uh due to the 5 minute runtime",
    "start": "1211080",
    "end": "1216880"
  },
  {
    "text": "increments and the Watchdog features and you have to really break it into its very small components and think of them",
    "start": "1216880",
    "end": "1223840"
  },
  {
    "text": "as do dominoes",
    "start": "1223840",
    "end": "1227360"
  },
  {
    "text": "the other tip that we have is in this process you you have to have triggers because they you want the process to run",
    "start": "1229120",
    "end": "1235919"
  },
  {
    "text": "like Domino's falling so when one finishes the next one starts and one of the things that Von mentioned is the",
    "start": "1235919",
    "end": "1242400"
  },
  {
    "text": "trigger based mechanism and one of the things that we did is we have our lambda's writing files back to S3 which",
    "start": "1242400",
    "end": "1249080"
  },
  {
    "text": "are detected by the next Lambda and triggers the running of the the next Lambda in the chain and one of the tips",
    "start": "1249080",
    "end": "1256559"
  },
  {
    "text": "I have there for a governance point of view we I started noticing a lot",
    "start": "1256559",
    "end": "1262159"
  },
  {
    "text": "of um people using trigger names that",
    "start": "1262159",
    "end": "1267240"
  },
  {
    "text": "are very random all across my S3 resources because everybody started playing with lambdas and you can't have",
    "start": "1267240",
    "end": "1274840"
  },
  {
    "text": "the same trigger names executing two lambdas so you have to be very careful about the usage of your triggers and so",
    "start": "1274840",
    "end": "1282240"
  },
  {
    "text": "one of the governance tips I have for you is to uh try to name your triggers",
    "start": "1282240",
    "end": "1287480"
  },
  {
    "text": "the same name as the lamb and be very precise with the naming of your triggers uh because you can't have",
    "start": "1287480",
    "end": "1293480"
  },
  {
    "text": "any you have to be very careful about overlaps um and in uh triggering lambdas",
    "start": "1293480",
    "end": "1300320"
  },
  {
    "text": "if you have a lot of people doing lambdas and writing D",
    "start": "1300320",
    "end": "1304600"
  },
  {
    "start": "1304000",
    "end": "1304000"
  },
  {
    "text": "3 uh the next thing I want to talk about is as people started getting comfortable",
    "start": "1306520",
    "end": "1312320"
  },
  {
    "text": "with lambdas I noticed that my team everybody was writing lambdas and I was getting feedback as we",
    "start": "1312320",
    "end": "1319559"
  },
  {
    "text": "were doing this of some of the challenges of writing lambas I was trying to find out why people were",
    "start": "1319559",
    "end": "1325400"
  },
  {
    "text": "having problems and what some barriers were and the thing that really projected",
    "start": "1325400",
    "end": "1331799"
  },
  {
    "text": "lambdas across my organization and made everybody start to use it was the introduction of what we call Lambda",
    "start": "1331799",
    "end": "1338400"
  },
  {
    "text": "Frameworks at Hurst I'll talk about that for a really quick second here",
    "start": "1338400",
    "end": "1344360"
  },
  {
    "text": "so the problem with using lambas to trigger different AWS functions I don't",
    "start": "1344360",
    "end": "1350440"
  },
  {
    "text": "know if you have ever done that and you use python as your source code that's our language of choice you need a lot of",
    "start": "1350440",
    "end": "1356760"
  },
  {
    "text": "credentials stored somewhere to enable you to take data from S3 and shove it",
    "start": "1356760",
    "end": "1363679"
  },
  {
    "text": "into red shift or however you're going to do it you need to have the credentials and modules",
    "start": "1363679",
    "end": "1369880"
  },
  {
    "text": "stored uh and reusable and I and one of the problems was that people would always have to",
    "start": "1369880",
    "end": "1375960"
  },
  {
    "text": "reconfigure these modules and pull them out cuz they don't comes standard in Python 2.7 which is what comes off the",
    "start": "1375960",
    "end": "1382720"
  },
  {
    "text": "shelf on the lambdas um people would always kind of ask me hey Rick what what what module",
    "start": "1382720",
    "end": "1389080"
  },
  {
    "text": "did you use to do that or they'd ask each other on our little Network what module can you use to write from S3 to a",
    "start": "1389080",
    "end": "1397400"
  },
  {
    "text": "uh to a server um and we started noticing there's a whole bunch of modules like",
    "start": "1397400",
    "end": "1402520"
  },
  {
    "text": "Botto that allows you to write to S3 if you're going to write a zipped file into S3 you need gzip psychop PG is needed if",
    "start": "1402520",
    "end": "1409720"
  },
  {
    "text": "you're going to do anything with red shift uh PG pass is a great Library if",
    "start": "1409720",
    "end": "1415840"
  },
  {
    "text": "you're going to store passwords and put them in your code or you don't want to put your passwords in your code um and",
    "start": "1415840",
    "end": "1422640"
  },
  {
    "text": "so forth and so on and so we notice there's a lot of these modules so one of these guys I we had on",
    "start": "1422640",
    "end": "1428559"
  },
  {
    "text": "our team decided why don't we package all these modules up into one single framework called the heurst",
    "start": "1428559",
    "end": "1437960"
  },
  {
    "text": "Master framework and basically this is a master environment that we for all of our",
    "start": "1438720",
    "end": "1446440"
  },
  {
    "text": "Lambda functions load into S3 or into the Lambda into the Lambda",
    "start": "1446440",
    "end": "1452760"
  },
  {
    "text": "console and nobody has to actually hunt for all the modules they're already pre-loaded into one single framework and",
    "start": "1452760",
    "end": "1459279"
  },
  {
    "text": "all you got to do is include that framework in the top of your python code and you're able to quickly write",
    "start": "1459279",
    "end": "1465600"
  },
  {
    "text": "and do anything you want with all the different AWS res sources that we have at Hurst and it's just in one single zip",
    "start": "1465600",
    "end": "1473320"
  },
  {
    "text": "file and all you have to do is take your Lambda function and stick it into that zip file and push it into the Lambda and",
    "start": "1473320",
    "end": "1480440"
  },
  {
    "text": "it runs everything and that had the effect of",
    "start": "1480440",
    "end": "1487200"
  },
  {
    "text": "simplifying the writing of python code of writing all the code that you could",
    "start": "1487200",
    "end": "1492720"
  },
  {
    "text": "write to make a whole bunch of Lambda functions very easy",
    "start": "1492720",
    "end": "1498799"
  },
  {
    "start": "1497000",
    "end": "1497000"
  },
  {
    "text": "and here's a quick example of our what we call our red shift framework if you're familiar with python that's the",
    "start": "1498919",
    "end": "1505919"
  },
  {
    "text": "language of choice that we've chosen you just have a single line of code in the top of your python in the top of your",
    "start": "1505919",
    "end": "1513000"
  },
  {
    "text": "python code saying load the Frameworks and that grabs all the PG passes all the psycho pgs and all the little python",
    "start": "1513000",
    "end": "1520399"
  },
  {
    "text": "modules and sticks them in the memory and you",
    "start": "1520399",
    "end": "1526159"
  },
  {
    "text": "can you can simply exit start a you could start a red shift uh session by",
    "start": "1526159",
    "end": "1531840"
  },
  {
    "text": "simply typing in the host the port the database and the username you don't need to put your password you can actually write a query",
    "start": "1531840",
    "end": "1539360"
  },
  {
    "text": "in just one single line of code and use macro",
    "start": "1539360",
    "end": "1544799"
  },
  {
    "text": "variables uh you can execute a file in S3 you can pull a data from you can",
    "start": "1544799",
    "end": "1550039"
  },
  {
    "text": "stick a file in S3 and execute it on a Lambda without having to worry about",
    "start": "1550039",
    "end": "1555240"
  },
  {
    "text": "Botto and configuring Botto uh and you can save the data to a Json",
    "start": "1555240",
    "end": "1562360"
  },
  {
    "text": "object which if you're going to shove the data into P into Dynamo DB and use it in as an API Gateway you could it",
    "start": "1562360",
    "end": "1569799"
  },
  {
    "text": "really helps to have things in a Json format we also made a helpers",
    "start": "1569799",
    "end": "1576679"
  },
  {
    "start": "1572000",
    "end": "1572000"
  },
  {
    "text": "framework which if you're familiar with if you've worked with Botto or any of those things and you want to take data",
    "start": "1576679",
    "end": "1582919"
  },
  {
    "text": "and shove it from S3 into your Lambda environment and then push it back into",
    "start": "1582919",
    "end": "1587960"
  },
  {
    "text": "S3 you need to have you know it's kind of a pain to work with some of the Python",
    "start": "1587960",
    "end": "1595000"
  },
  {
    "text": "modules so we just made a nice simple framework that everybody could follow and in this example",
    "start": "1595000",
    "end": "1602640"
  },
  {
    "text": "here it's simply uh writing a it's writing a data frame into a",
    "start": "1602640",
    "end": "1609120"
  },
  {
    "text": "CSV um you can download an S3 file upload an S3 file you can check and see",
    "start": "1609120",
    "end": "1615039"
  },
  {
    "text": "if a file exists in redshift or if it exists in s three um I skipped ahead but I hope you",
    "start": "1615039",
    "end": "1623919"
  },
  {
    "text": "can see if you're a python programmer and you've ever tried to do a lot of stuff with the intercommunication of all",
    "start": "1623919",
    "end": "1630559"
  },
  {
    "text": "the different uh Amazon functions and capabilities the difficulty of that",
    "start": "1630559",
    "end": "1636279"
  },
  {
    "text": "having it all wrapped up into a nice neat little package uh if you're going to run a team",
    "start": "1636279",
    "end": "1641880"
  },
  {
    "text": "has really empowered the team to do a lot more and focus Less on the packages the modules and on just simply writing",
    "start": "1641880",
    "end": "1649440"
  },
  {
    "text": "code and and to do things that are actually Building",
    "start": "1649440",
    "end": "1655520"
  },
  {
    "text": "Products so let me show you our our current uh as of today serverless",
    "start": "1655520",
    "end": "1664320"
  },
  {
    "text": "clickstream we have the data onboarding off of all 300 websites we have pulses",
    "start": "1664320",
    "end": "1670240"
  },
  {
    "text": "every 5 Seconds coming off of every one of our websites all across the world dumping into the Kinesis stream",
    "start": "1670240",
    "end": "1676360"
  },
  {
    "text": "triggering a Lambda that dumps the data into S3 storage the when it hits a when it sees",
    "start": "1676360",
    "end": "1683760"
  },
  {
    "text": "a little file it triggers the ETL Lambda and the ETL Lambda has a",
    "start": "1683760",
    "end": "1690679"
  },
  {
    "text": "lovely little Watchdog a CIS admin kind of following it along every day and it",
    "start": "1690679",
    "end": "1695720"
  },
  {
    "text": "shoves data into red shift we have a data science phase that's doing a lot of",
    "start": "1695720",
    "end": "1701159"
  },
  {
    "text": "stuff heavy lifting um and enrichment and red",
    "start": "1701159",
    "end": "1706399"
  },
  {
    "text": "shift we're using actually Google Translate to translate our content in",
    "start": "1706399",
    "end": "1711760"
  },
  {
    "text": "real time as it loads with a Lambda function and shoving that back into S3",
    "start": "1711760",
    "end": "1716799"
  },
  {
    "text": "that sets off another trigger that offloads that little file into a Dynamo",
    "start": "1716799",
    "end": "1723799"
  },
  {
    "text": "table and the Dynamo table has a has an API Gateway on top of it and",
    "start": "1723799",
    "end": "1731679"
  },
  {
    "text": "we're feeding all this data in real time out through the API in the front end and",
    "start": "1731679",
    "end": "1736960"
  },
  {
    "text": "it's empowering it's powering a lot of the new products that Hurst technology is",
    "start": "1736960",
    "end": "1742320"
  },
  {
    "text": "building um and connecting the worldwide data into a single console for editors",
    "start": "1742320",
    "end": "1748200"
  },
  {
    "text": "to make decisions at Hurst so some quick Lessons",
    "start": "1748200",
    "end": "1754600"
  },
  {
    "start": "1752000",
    "end": "1752000"
  },
  {
    "text": "Learned the the way our model ran before was a crown based model we're kind of",
    "start": "1754600",
    "end": "1760159"
  },
  {
    "text": "limited to a 5 minute window to throughput uh latency because of the kons you can't really go outside of a",
    "start": "1760159",
    "end": "1767159"
  },
  {
    "text": "Cron's timer the timer is the the limit and we had uh infrastructure costs",
    "start": "1767159",
    "end": "1773840"
  },
  {
    "text": "in terms of ec2 boxes and things that we had to pay for by moving to a Lambda model we got",
    "start": "1773840",
    "end": "1780480"
  },
  {
    "text": "rid of some ec2 boxes we reduced our CIS admin costs we",
    "start": "1780480",
    "end": "1786080"
  },
  {
    "text": "also sped it up so that now the latency is down under 2 minutes because you're not stuck to a",
    "start": "1786080",
    "end": "1793880"
  },
  {
    "text": "clock it's dominoes falling and the faster the trigger happens the faster",
    "start": "1793880",
    "end": "1800000"
  },
  {
    "text": "the throughput and I guess there's fewer",
    "start": "1800000",
    "end": "1805080"
  },
  {
    "text": "dollar signs on that bottom one they're still dollar signs um so finally um I",
    "start": "1805080",
    "end": "1812799"
  },
  {
    "text": "think a lamb the Lambda in 2016 has really helped our helped us do a lot",
    "start": "1812799",
    "end": "1819039"
  },
  {
    "text": "more with less in our click stream we've really what I think of has optimized our",
    "start": "1819039",
    "end": "1824159"
  },
  {
    "text": "click stream from 2015 to 2016 you don't really you can do things with",
    "start": "1824159",
    "end": "1830600"
  },
  {
    "text": "a lot less of a team we had CIS admin and a few other folks dedicated to the",
    "start": "1830600",
    "end": "1836440"
  },
  {
    "text": "servers that we've eliminated not not their position we they've shifted their function to focus more on programming",
    "start": "1836440",
    "end": "1843320"
  },
  {
    "text": "and building products but we don't need a big team now to monitor these lambdas",
    "start": "1843320",
    "end": "1849240"
  },
  {
    "text": "if you build the Watchdog smartly uh or uh you could find one",
    "start": "1849240",
    "end": "1855919"
  },
  {
    "text": "person that knows all this stuff and uh anyway that's that's uh my",
    "start": "1855919",
    "end": "1863279"
  },
  {
    "text": "session my part of the session so I think I'll ask beond back to start the",
    "start": "1863279",
    "end": "1868519"
  },
  {
    "text": "next section thank",
    "start": "1868519",
    "end": "1874120"
  },
  {
    "text": "you thanks Rick so we saw how how Enterprises like",
    "start": "1876360",
    "end": "1882799"
  },
  {
    "text": "Hurst have started to adopt Lambda in a very serious way but let's let's walk",
    "start": "1882799",
    "end": "1888039"
  },
  {
    "text": "through some of the best practices and hacks across the life cycle of how you can optimize some of these benefits of",
    "start": "1888039",
    "end": "1894679"
  },
  {
    "text": "AWS Lambda so I'll go through the whole cycle as I talked about and we'll start",
    "start": "1894679",
    "end": "1900519"
  },
  {
    "start": "1898000",
    "end": "1898000"
  },
  {
    "text": "start with the development and testing some of the few quick Recaps when we talk of bring your own code we",
    "start": "1900519",
    "end": "1906880"
  },
  {
    "text": "support four four languages uh the the resource model for",
    "start": "1906880",
    "end": "1911919"
  },
  {
    "text": "using a Lambda function is very simple now you don't have to go and configure six different knobs of how much disc and",
    "start": "1911919",
    "end": "1918039"
  },
  {
    "text": "how much CPU and how much memory and how much uh how much IO you want there's one",
    "start": "1918039",
    "end": "1923279"
  },
  {
    "text": "single knob it's called the it's called the memory setting because that's the easiest to understand and that knob goes",
    "start": "1923279",
    "end": "1928679"
  },
  {
    "text": "from 128 MB to 1.5gb you just increase that one knob and you can think of that",
    "start": "1928679",
    "end": "1933880"
  },
  {
    "text": "as the power level of your function all of the other resources scale automatically according to what that",
    "start": "1933880",
    "end": "1938919"
  },
  {
    "text": "setting is you can think of how you can use Lambda we talked about the event sources",
    "start": "1938919",
    "end": "1946399"
  },
  {
    "text": "but you can think of two different invocation modes for AWS Lambda there is a synchronous which is you invoke the",
    "start": "1946399",
    "end": "1953840"
  },
  {
    "text": "function the function will go and execute the code it'll send a response back meanwhile the client is waiting for",
    "start": "1953840",
    "end": "1959639"
  },
  {
    "text": "a response and it it'll accept the response from the Lambda function which is very useful when you're trying to",
    "start": "1959639",
    "end": "1965039"
  },
  {
    "text": "build a web back end because there's a client out there at the at the tail end of the browser who is waiting for",
    "start": "1965039",
    "end": "1970960"
  },
  {
    "text": "something from the cloud and there's a asynchronous mode which is the fire and forget mode which is very useful when",
    "start": "1970960",
    "end": "1977200"
  },
  {
    "text": "you're doing data processing now you just upload the data you don't have to wait for the data to be completely",
    "start": "1977200",
    "end": "1983880"
  },
  {
    "text": "processed before uploading the second piece of data you just you keep uploading the data and it kind of works in that fire and forget mode and the",
    "start": "1983880",
    "end": "1991480"
  },
  {
    "text": "integration with other AWS Services you don't even have to think of these things if it's S3 we know it's data processing",
    "start": "1991480",
    "end": "1997559"
  },
  {
    "text": "it's going to come in an asynchronous mode if it's if it's a API Gateway you we know it's synchronous it'll come in a synchronous",
    "start": "1997559",
    "end": "2003679"
  },
  {
    "text": "mode the thing to remember is that Lambda functions are stateless so you you cannot persist anything on the",
    "start": "2003679",
    "end": "2010480"
  },
  {
    "text": "Lambda function itself any anything which you need to persist should go should go to some external storage",
    "start": "2010480",
    "end": "2016440"
  },
  {
    "text": "because there's no Affinity to underlying infrastructure and the reason for that is this allows us to scale out",
    "start": "2016440",
    "end": "2023120"
  },
  {
    "text": "horizontally very very quickly because we don't have to gather all the existing state information and then push that out",
    "start": "2023120",
    "end": "2029760"
  },
  {
    "text": "if there are thousand files that you upload we we'll very quickly fan out to thousand different copies of the Lambda",
    "start": "2029760",
    "end": "2036080"
  },
  {
    "text": "function and execute all, together for you let's start let's start breaking",
    "start": "2036080",
    "end": "2042399"
  },
  {
    "start": "2040000",
    "end": "2040000"
  },
  {
    "text": "down the anatomy of the Lambda function now for most of you have written Lambda functions these things you must have",
    "start": "2042399",
    "end": "2047880"
  },
  {
    "text": "been through but I'll do a quick walk through the Handler function you can think of that as the entry point this is",
    "start": "2047880",
    "end": "2054679"
  },
  {
    "text": "where Lambda function starts execution of your function anything you write outside the",
    "start": "2054679",
    "end": "2060560"
  },
  {
    "text": "Handler function in in in Lambda will be executed once when the function starts",
    "start": "2060560",
    "end": "2066118"
  },
  {
    "text": "the very first time and then then we will see that after that the only the parts inside the Handler is executed so",
    "start": "2066119",
    "end": "2072320"
  },
  {
    "text": "you can start using some Global variables on global names spaces you can Define outside the Handler",
    "start": "2072320",
    "end": "2078320"
  },
  {
    "text": "function the request that comes in whe what whether it's know a direct API call",
    "start": "2078320",
    "end": "2084839"
  },
  {
    "text": "request in which whatever your header is or it's some Event Source which is triggering the function the entire",
    "start": "2084839",
    "end": "2091079"
  },
  {
    "text": "request will come as an object that your Handler function is supposed to accept and that's called the event object so we",
    "start": "2091079",
    "end": "2098160"
  },
  {
    "text": "have pred predefined objects uh the object format for all existing AWS",
    "start": "2098160",
    "end": "2103680"
  },
  {
    "text": "events and Integrations and remember these objects are normally typed uh",
    "start": "2103680",
    "end": "2108880"
  },
  {
    "text": "typed Json but if you're using simple data types are also allowed so if you",
    "start": "2108880",
    "end": "2113960"
  },
  {
    "text": "are doing something with all you want to pass is an integer you can you can do that but you also can pass POS pojos and",
    "start": "2113960",
    "end": "2120520"
  },
  {
    "text": "pocos for Java and C respectively the context object is something which people quite often uh",
    "start": "2120520",
    "end": "2127920"
  },
  {
    "text": "don't use but it has a lot of very important properties and methods which you can make use of to optimize some of",
    "start": "2127920",
    "end": "2134599"
  },
  {
    "text": "the functions settings for example Lambda has a max time out of five 5",
    "start": "2134599",
    "end": "2140200"
  },
  {
    "text": "minutes but you can see inside your function how much time is left in current execution before this function",
    "start": "2140200",
    "end": "2147280"
  },
  {
    "text": "is going to time out and you can start taking actions based on how much time is left for your function you just have to",
    "start": "2147280",
    "end": "2152680"
  },
  {
    "text": "call the get remaining time in milliseconds uh object uh the method and you can you can get that",
    "start": "2152680",
    "end": "2158160"
  },
  {
    "text": "inside your code similarly you have things like the AWS request ID now you",
    "start": "2158160",
    "end": "2164079"
  },
  {
    "text": "are trying to build item poent functions you know anytime you're trying to build code one thing to keep keep keep in mind",
    "start": "2164079",
    "end": "2169160"
  },
  {
    "text": "is that you want item potency Lambda is designed to be an at least once delivery",
    "start": "2169160",
    "end": "2174319"
  },
  {
    "text": "service so if you're handling objects you want to make sure you're not processing the same file again you you",
    "start": "2174319",
    "end": "2179359"
  },
  {
    "text": "want to make sure you're not processing the same transaction twice and charging your customer twice or even double",
    "start": "2179359",
    "end": "2185280"
  },
  {
    "text": "counting your data you can use the a w s request ID as that unique identifier of",
    "start": "2185280",
    "end": "2191000"
  },
  {
    "text": "this is the request ID that Lambda got for this data for this piece of",
    "start": "2191000",
    "end": "2196560"
  },
  {
    "text": "data you can also get things like the invoked function on what is the what",
    "start": "2196560",
    "end": "2202480"
  },
  {
    "text": "function is currently running like let's say you want to share the same piece of code across hundreds of functions your code needs to know which",
    "start": "2202480",
    "end": "2210000"
  },
  {
    "text": "function am do I belong to which function am I currently running and you can get that as an invoked function AR",
    "start": "2210000",
    "end": "2215560"
  },
  {
    "text": "property inside the Lambda function so you can look up a lot of these different properties look I'd recommend to go and",
    "start": "2215560",
    "end": "2221280"
  },
  {
    "text": "look at the context object see which are the things which you can use there are lots of interesting stuff in there which might be able to help you",
    "start": "2221280",
    "end": "2228800"
  },
  {
    "text": "optimize the other thing is the function metadata so we talked about the function itself now look at what the metadata of",
    "start": "2228800",
    "end": "2234640"
  },
  {
    "start": "2229000",
    "end": "2229000"
  },
  {
    "text": "the function is and there are three objects which I'd like to call out everything else is a standard name",
    "start": "2234640",
    "end": "2239680"
  },
  {
    "text": "description size what the code code size the code sha all of those are important",
    "start": "2239680",
    "end": "2244720"
  },
  {
    "text": "things but the three I'd like to call out is a VPC config the VPC config allows you to specify",
    "start": "2244720",
    "end": "2252079"
  },
  {
    "text": "which VPC you you want your Lambda function to be able to access Lambda",
    "start": "2252079",
    "end": "2257520"
  },
  {
    "text": "functions when they run as a default mode they do run inside a VPC it's just as our VPC so this is not a security",
    "start": "2257520",
    "end": "2263640"
  },
  {
    "text": "feature this is more of a access to my VPC feature so when you set this up you",
    "start": "2263640",
    "end": "2269839"
  },
  {
    "text": "will be able to connect to the VPC and then access the private resources in a very secured manner that only you will",
    "start": "2269839",
    "end": "2276280"
  },
  {
    "text": "be able to access nobody can L scan and when you said this Lambda will set up an eni it'll take an eni from your account",
    "start": "2276280",
    "end": "2283200"
  },
  {
    "text": "it'll take a private IP from the subnet you provide it and then Connect into your VPC to access these",
    "start": "2283200",
    "end": "2289079"
  },
  {
    "text": "resources another thing we announced this morning is uh the dead letter config what the dead letter config can",
    "start": "2289079",
    "end": "2295000"
  },
  {
    "text": "do is as Rick mentioned an important thing is to make sure that when your object when the Lambda function fails",
    "start": "2295000",
    "end": "2301760"
  },
  {
    "text": "you want to make sure the data isn't lost so this is available in the asynchronous mode today",
    "start": "2301760",
    "end": "2307960"
  },
  {
    "text": "where you can specify an SNS topic or an sqs Q as a dead letter q for your Lambda",
    "start": "2307960",
    "end": "2315160"
  },
  {
    "text": "function and then when Lambda tries to execute the function and it",
    "start": "2315160",
    "end": "2320240"
  },
  {
    "text": "cannot it'll write that event message onto the dead letter Q which will allow",
    "start": "2320240",
    "end": "2325760"
  },
  {
    "text": "you to then redrive those messages in a way you want so now you have that uh the durability of your data that it's either",
    "start": "2325760",
    "end": "2333000"
  },
  {
    "text": "going to get processed or it's going to be returned back to me in the dead letter Q which I can redrive on my",
    "start": "2333000",
    "end": "2339400"
  },
  {
    "text": "own and the new one that we announced a couple of weeks ago is the environment variable this allows you to pass custom",
    "start": "2339400",
    "end": "2346119"
  },
  {
    "text": "key value pairs as part of configuration so you can add things like",
    "start": "2346119",
    "end": "2351800"
  },
  {
    "text": "know if you want to reuse the code across different stages then you can add things like well this function is going",
    "start": "2351800",
    "end": "2359040"
  },
  {
    "text": "is is my test function so it it needs to access a certain list of checkpoints or",
    "start": "2359040",
    "end": "2364079"
  },
  {
    "text": "certain list of endpoints that it's going to talk to so all of those those parameters can go as your environment",
    "start": "2364079",
    "end": "2370079"
  },
  {
    "text": "variable or even if you want to add things like your logging level you can run the same function either in the no",
    "start": "2370079",
    "end": "2376599"
  },
  {
    "text": "prod mode or in the debug mode and what you log inside the function depends on what environment you pass in in in here",
    "start": "2376599",
    "end": "2384200"
  },
  {
    "text": "and not that environment variables are encrypted with the KMS key that you specify so these these variables are",
    "start": "2384200",
    "end": "2390400"
  },
  {
    "text": "going to be encrypted at rest when on on the function a couple of limits to keep in",
    "start": "2390400",
    "end": "2395839"
  },
  {
    "text": "mind I don't I'm not going to walk through all of the limits but the thing to know is that there are certain SC uh",
    "start": "2395839",
    "end": "2401680"
  },
  {
    "text": "certain limits on what are the types of things you can and cannot pass to the function so it's always good to know",
    "start": "2401680",
    "end": "2407119"
  },
  {
    "text": "what these limits are for example when you're doing a function invocation in a given request you cannot pass more than",
    "start": "2407119",
    "end": "2413839"
  },
  {
    "text": "6 megabytes of data know a given function size cannot be more than 50 megabytes and this allows us to maintain",
    "start": "2413839",
    "end": "2421160"
  },
  {
    "text": "the whole latency uh of of invoking the Lambda functions the thing I want to call out",
    "start": "2421160",
    "end": "2426800"
  },
  {
    "text": "is that some limits are flexible we have a default throttle limit which gives you",
    "start": "2426800",
    "end": "2432760"
  },
  {
    "text": "a ability to safeguard against a Runway function and this is the soft limit now",
    "start": "2432760",
    "end": "2438480"
  },
  {
    "text": "if if you want Lambda to scale if you know that your function is set up in a mode where it's not going to be",
    "start": "2438480",
    "end": "2444560"
  },
  {
    "text": "accidentally run away this is know in a in an environment where nobody can touch then you can request you can create a",
    "start": "2444560",
    "end": "2450079"
  },
  {
    "text": "support ticket and we'll increase this limit for you also to think about is what happens",
    "start": "2450079",
    "end": "2457040"
  },
  {
    "start": "2455000",
    "end": "2455000"
  },
  {
    "text": "behind the scenes what what is a Lambda function and I'd like to talk of the container model for it that a Lambda",
    "start": "2457040",
    "end": "2463200"
  },
  {
    "text": "function effectively is a Linux container running on Amazon Linux and we try to reuse this container",
    "start": "2463200",
    "end": "2469680"
  },
  {
    "text": "as many times as possible for the first time you call the function we'll create this container we'll do all that scaling for you it's it's it's all AWS",
    "start": "2469680",
    "end": "2476720"
  },
  {
    "text": "infrastructure in AWS management you don't have to worry about container management at all but what does happen is that the",
    "start": "2476720",
    "end": "2483040"
  },
  {
    "text": "containers get reused so that we can get better and faster response Es as more",
    "start": "2483040",
    "end": "2488560"
  },
  {
    "text": "data needs to be processed and you can actually make use of this container",
    "start": "2488560",
    "end": "2494079"
  },
  {
    "text": "reuse policy anything which you write to the SL temp will be available if you end",
    "start": "2494079",
    "end": "2499400"
  },
  {
    "text": "up on the same container the next time how do you use it you can set up some things like a local cache right",
    "start": "2499400",
    "end": "2505839"
  },
  {
    "text": "right there inside your Lambda function anything which you write to a global Nam space in memory is going to be there so",
    "start": "2505839",
    "end": "2511440"
  },
  {
    "text": "you can start adding things if you have to pull down configuration if you have to pull down some special libraries just",
    "start": "2511440",
    "end": "2517000"
  },
  {
    "text": "pull them down once into your code in the in it or outside the Handler function and then that stays in the",
    "start": "2517000",
    "end": "2522079"
  },
  {
    "text": "container as long as that container runs and we've heard a lot of about cold start so I want to touch upon that a",
    "start": "2522079",
    "end": "2528160"
  },
  {
    "text": "little bit a cold start effectively is a Time taken for us to start a new",
    "start": "2528160",
    "end": "2533480"
  },
  {
    "text": "container and you will see cold occasional cold starts when Lambda is",
    "start": "2533480",
    "end": "2538760"
  },
  {
    "text": "scaling up on your behalf the way to think of these cold starts is if I'm scaling up then there's",
    "start": "2538760",
    "end": "2545200"
  },
  {
    "text": "a new container which needs to be created and that's the time it takes but there are a couple of ways in",
    "start": "2545200",
    "end": "2550599"
  },
  {
    "text": "which you can reduce these cold starts so first as I said there's one lever more memory means more power to",
    "start": "2550599",
    "end": "2557119"
  },
  {
    "text": "the function to execute so the more memory you allocate the faster we'll be able to load the",
    "start": "2557119",
    "end": "2562400"
  },
  {
    "text": "function uh that might reduce your cold start and often times memory more memory might not necessarily mean more money",
    "start": "2562400",
    "end": "2568680"
  },
  {
    "text": "even if the pricing is in terms of GB seconds if you're increasing the GB but the faster memory is going to make you",
    "start": "2568680",
    "end": "2574920"
  },
  {
    "text": "consume fewer seconds you might end up paying the same thing but getting the results faster smaller zip files will also mean",
    "start": "2574920",
    "end": "2582599"
  },
  {
    "text": "that we there's less of stuff to load if you don't package all of your libraries for every code but you only customize",
    "start": "2582599",
    "end": "2589119"
  },
  {
    "text": "what libraries you need and there are tools for shrinking the size of your zip and you can you can just package all the",
    "start": "2589119",
    "end": "2594839"
  },
  {
    "text": "libraries you need and that's going to take less time for Lambda to to load and then there are some language",
    "start": "2594839",
    "end": "2600720"
  },
  {
    "text": "properties there are some runtime properties node and python interpreted languages like node and python start",
    "start": "2600720",
    "end": "2606280"
  },
  {
    "text": "faster than then uh compiled languages like Java and C because we we don't have to boot a whole jvm or boot the Whole",
    "start": "2606280",
    "end": "2613079"
  },
  {
    "text": "Net core framework so if you have an application which is cold start where you cannot handle any cold starts you",
    "start": "2613079",
    "end": "2619720"
  },
  {
    "text": "might consider using a language which doesn't have that problem the other thing to think of is",
    "start": "2619720",
    "end": "2626680"
  },
  {
    "start": "2625000",
    "end": "2625000"
  },
  {
    "text": "the execution environment where does a Lambda function run and again I'll not go through the specifics of each item",
    "start": "2626680",
    "end": "2634079"
  },
  {
    "text": "the thing to remember is that behind the scenes it's an Amazon Linux Ami so anything which you can compile",
    "start": "2634079",
    "end": "2640559"
  },
  {
    "text": "against this Amazon Linux Ami and include in your zip file can be run as a Lambda function you just have to add a",
    "start": "2640559",
    "end": "2646960"
  },
  {
    "text": "wrapper in one of the known languages that Forks out to that process and remember that all of these",
    "start": "2646960",
    "end": "2653400"
  },
  {
    "text": "things keep changing whether it's the underlying Os or it's the the libraries which we include as a default all of",
    "start": "2653400",
    "end": "2660319"
  },
  {
    "text": "these will change over time behind the scenes what otherwise you would have to do if you are managing your own",
    "start": "2660319",
    "end": "2665359"
  },
  {
    "text": "infrastructure here Lambda is doing for you we will keep updating the libraries we will keep moving to the newer",
    "start": "2665359",
    "end": "2670720"
  },
  {
    "text": "versions as things comes out for the sbks for the for the runtime",
    "start": "2670720",
    "end": "2675880"
  },
  {
    "text": "languages so what you should do is just keep a note I have a link in here you'll be able to get it when the when the",
    "start": "2675880",
    "end": "2681680"
  },
  {
    "text": "slides are published and go and look at what the current supported versions are and keep yourself update inside the code",
    "start": "2681680",
    "end": "2688240"
  },
  {
    "text": "but if you do need a specific Library you can always include it as part of the zip file like that you can override that",
    "start": "2688240",
    "end": "2694440"
  },
  {
    "text": "library and you say I want to use a specific word version of the of the SDK because I have some dependencies on",
    "start": "2694440",
    "end": "2701640"
  },
  {
    "text": "it so that's about development and testing so now let's look a little bit about the deployment and",
    "start": "2701640",
    "end": "2708040"
  },
  {
    "start": "2703000",
    "end": "2703000"
  },
  {
    "text": "Alm when you build a deployment package effectively what you are doing is a",
    "start": "2708040",
    "end": "2713520"
  },
  {
    "text": "independent set of code and libraries which the Lambda function can execute",
    "start": "2713520",
    "end": "2719440"
  },
  {
    "text": "without anything and having to call out to anything else you can still make outbound API",
    "start": "2719440",
    "end": "2724880"
  },
  {
    "text": "calls but you need to have all the code which you are bringing in so with with nodejs and python it's",
    "start": "2724880",
    "end": "2731079"
  },
  {
    "text": "it's kind of easy you can start do an npm or pip of all of these libraries install everything into one zip folder and upload it and we'll run the whole",
    "start": "2731079",
    "end": "2737920"
  },
  {
    "text": "thing with Java you can do the same thing you can upload a zip or a jar but the benefit of java is you can use the",
    "start": "2737920",
    "end": "2744280"
  },
  {
    "text": "existing ID plugins like mavens and and eclipse and you can include not just the",
    "start": "2744280",
    "end": "2749359"
  },
  {
    "text": "compiled class files but also all the required jars into that lip directory and we'll include everything when we are",
    "start": "2749359",
    "end": "2755119"
  },
  {
    "text": "running the Lambda function same thing when we with the with C that we announced this morning you can include a",
    "start": "2755119",
    "end": "2761079"
  },
  {
    "text": "zip file or you can bring in a standalone dll but with with V with uh C what most",
    "start": "2761079",
    "end": "2767920"
  },
  {
    "text": "developers are used to is the V is a visual studio and we have provided the full integration for an end to end",
    "start": "2767920",
    "end": "2773559"
  },
  {
    "text": "package and deploy right inside of visual studio so from Visual Studio you don't have to worry about the packaging",
    "start": "2773559",
    "end": "2779440"
  },
  {
    "text": "you don't have to worry about which Library I need to call you just declare the libraries and visual studio when it",
    "start": "2779440",
    "end": "2784880"
  },
  {
    "text": "does the package it'll include all the new get packages automatically and deploy it including all the platform",
    "start": "2784880",
    "end": "2790680"
  },
  {
    "text": "specific uh libraries automatically managed by the visual studio plugins the other thing to think of is",
    "start": "2790680",
    "end": "2797520"
  },
  {
    "start": "2797000",
    "end": "2797000"
  },
  {
    "text": "managing continuous delivery we had a session not long ago on in in in this uh in this track which you can go and look",
    "start": "2797520",
    "end": "2803480"
  },
  {
    "text": "at later which talks of how you could set up a continuous delivery pipeline for your Lambda",
    "start": "2803480",
    "end": "2809680"
  },
  {
    "text": "functions so the standard we have what we recommend is to have a code commit as",
    "start": "2809680",
    "end": "2814880"
  },
  {
    "text": "the source of your repo uh code build is a new service which we",
    "start": "2814880",
    "end": "2819920"
  },
  {
    "text": "launched this morning which will allow you to take your existing code all of your existing libraries and create an",
    "start": "2819920",
    "end": "2826720"
  },
  {
    "text": "completely uh complete ZIP file which has the build version of which does the npm and pip install which does the Java",
    "start": "2826720",
    "end": "2832599"
  },
  {
    "text": "compilation and the the the the program of uh for you and then you can set up a",
    "start": "2832599",
    "end": "2837920"
  },
  {
    "text": "code pipeline that gets triggered every time there's a change in the in the in the code commit repo so that this",
    "start": "2837920",
    "end": "2844200"
  },
  {
    "text": "becomes an automated endtoend uh Repository where your code commit is a reflection",
    "start": "2844200",
    "end": "2849880"
  },
  {
    "text": "of all of your Lambda functions the moment you update a new one it kind of gets through the whole Pipeline and",
    "start": "2849880",
    "end": "2855280"
  },
  {
    "text": "it'll deploy it as a Lambda function but those are the AWS tools you have lots of other tools which you could use too like",
    "start": "2855280",
    "end": "2861640"
  },
  {
    "text": "they are op so you can have a GitHub as your if you're using GitHub as your code Source you could still use code build",
    "start": "2861640",
    "end": "2867160"
  },
  {
    "text": "and and code pipeline or you could start looking at other third party Frameworks such as Jenkins and we have a Jenkins",
    "start": "2867160",
    "end": "2872640"
  },
  {
    "text": "plug-in which will allow you to do the build and test and there are third part body there are lots of Partners who we",
    "start": "2872640",
    "end": "2878839"
  },
  {
    "text": "are working with such as Cod ship who can do that final deploy for a Lambda function we also have the AWS serverless",
    "start": "2878839",
    "end": "2885200"
  },
  {
    "text": "application model which you can use in this space similarly we can you can start",
    "start": "2885200",
    "end": "2890680"
  },
  {
    "text": "building your own thing as well if you want you can use Amazon S3 as a source and use Lambda functions to do all of these steps like all of these steps at",
    "start": "2890680",
    "end": "2897240"
  },
  {
    "text": "the end of the day is just new compute which you need to run you can run them as Lambda",
    "start": "2897240",
    "end": "2902359"
  },
  {
    "text": "functions in terms of tools and Frameworks we have lots of tools which we could we like to talk about the cloud",
    "start": "2902359",
    "end": "2907720"
  },
  {
    "start": "2904000",
    "end": "2904000"
  },
  {
    "text": "formation uh announced the new AWS seress application model or AWS Sam",
    "start": "2907720",
    "end": "2913640"
  },
  {
    "text": "which provides new serverless resources such as apis functions and tables in an",
    "start": "2913640",
    "end": "2918839"
  },
  {
    "text": "open specification which allows you to very easily and quickly deploy Lambda functions and deploy the whole",
    "start": "2918839",
    "end": "2924280"
  },
  {
    "text": "serverless stack chalice is a is another AWS framework which which works the same",
    "start": "2924280",
    "end": "2930160"
  },
  {
    "text": "thing which is a python microservices framework and you can quickly create and deploy applications using that framework",
    "start": "2930160",
    "end": "2935799"
  },
  {
    "text": "or there are third party tools which have which have actually provided a lot of value to our customers on how they",
    "start": "2935799",
    "end": "2941440"
  },
  {
    "text": "can package and build these Lambda functions when you are again deploying",
    "start": "2941440",
    "end": "2947359"
  },
  {
    "start": "2946000",
    "end": "2946000"
  },
  {
    "text": "the Lambda functions you need to think about function versioning and aliases remember a version is an immutable copy",
    "start": "2947359",
    "end": "2954760"
  },
  {
    "text": "of code plus configuration so you can either keep developing the function and keep updating the dollar latest so you",
    "start": "2954760",
    "end": "2961839"
  },
  {
    "text": "can say my function dollar latest and just keep updating that or you can actually go and say I want to publish a",
    "start": "2961839",
    "end": "2967920"
  },
  {
    "text": "version I want to create a snapshot of the state of things as of now and automatically create something called my",
    "start": "2967920",
    "end": "2973400"
  },
  {
    "text": "function colon one and then that becomes a frozen snapshot which no longer has to",
    "start": "2973400",
    "end": "2978799"
  },
  {
    "text": "change you can continue iterating on dollar latest and you can publish the second version whenever you need to also you",
    "start": "2978799",
    "end": "2986240"
  },
  {
    "text": "could set up aliases which allow you to point to a specific version of the Lambda function and you can go in and",
    "start": "2986240",
    "end": "2992599"
  },
  {
    "text": "say my function colon prod is the alest that I want to point to so that my client code always",
    "start": "2992599",
    "end": "2998960"
  },
  {
    "text": "just points to this one Function One Alias and then behind the scenes I can point that Alias to any version number that I",
    "start": "2998960",
    "end": "3006200"
  },
  {
    "text": "want so moving to security and scaling Lambda has these two two modes in which",
    "start": "3006280",
    "end": "3011520"
  },
  {
    "text": "you would run most of the cases Lambda is there is going to be this external trigger which",
    "start": "3011520",
    "end": "3017920"
  },
  {
    "text": "invokes the Lambda function which we'd like to call the the push model so here",
    "start": "3017920",
    "end": "3023280"
  },
  {
    "text": "we make it easier by allowing you to specify a resource policy a resource policy allows you to Grant",
    "start": "3023280",
    "end": "3029520"
  },
  {
    "text": "permissions to the uh to the downstream resource to to be able to you grant a",
    "start": "3029520",
    "end": "3035200"
  },
  {
    "text": "permission on on uh to your Lambda function that determines which service",
    "start": "3035200",
    "end": "3040359"
  },
  {
    "text": "will be able to invoke it so you grant say you have a resource policy that to to Lambda that says allow me to be",
    "start": "3040359",
    "end": "3045920"
  },
  {
    "text": "invoked by S3 S3 invoke S3 puts and the other side of it is a pull",
    "start": "3045920",
    "end": "3052280"
  },
  {
    "text": "model if you're reading data off of Kinesis or from Dynamo DB streams then then Lambda is actually reaching out and",
    "start": "3052280",
    "end": "3058839"
  },
  {
    "text": "trying to fetch the data from these two streams so there you have to give an AM",
    "start": "3058839",
    "end": "3064000"
  },
  {
    "text": "role to the Lambda function that says allow this function to go and read off",
    "start": "3064000",
    "end": "3069040"
  },
  {
    "text": "our Downstream resource so just keep make sure you keep you're aware of those two different",
    "start": "3069040",
    "end": "3075400"
  },
  {
    "text": "modes the other thing to think about is throttling so how do we what is a",
    "start": "3075400",
    "end": "3080839"
  },
  {
    "start": "3077000",
    "end": "3077000"
  },
  {
    "text": "concurrent execution and what is throttling so concurrent executions are effectively how many parallel copies of",
    "start": "3080839",
    "end": "3086839"
  },
  {
    "text": "Lambda are running right now and that's what we throttle based on",
    "start": "3086839",
    "end": "3093079"
  },
  {
    "text": "so the way to think of it is if I have X number of requests per second and each",
    "start": "3093079",
    "end": "3099119"
  },
  {
    "text": "request is taking y seconds to execute then on an average at a given point in time I have x * y functions running at",
    "start": "3099119",
    "end": "3107599"
  },
  {
    "text": "on my code so what happens when you do get throttle because that's a throttle limit",
    "start": "3107599",
    "end": "3112680"
  },
  {
    "text": "that's a limit of 100 as a default and you can get that increased what happens if you do get",
    "start": "3112680",
    "end": "3117799"
  },
  {
    "text": "throttled for stream Based Services for kinas and Dynamo DB if you do get",
    "start": "3117799",
    "end": "3122880"
  },
  {
    "text": "throttled if you happen to do get throttled you forget to raise your limits it gets automatically retried you don't even have to worry about it it",
    "start": "3122880",
    "end": "3128920"
  },
  {
    "text": "just means that it'll be a little bit of while before we can get to your function again for asynchronous invocations we",
    "start": "3128920",
    "end": "3136040"
  },
  {
    "text": "will keep retrying throttled invocations for up to 6 hours so this allows you to send in a huge burst of data way higher",
    "start": "3136040",
    "end": "3143240"
  },
  {
    "text": "than what your limits are on concurrent executions because you want to protect your function against runaway and let",
    "start": "3143240",
    "end": "3149880"
  },
  {
    "text": "let Lambda get throttled even if it does get throttled it just means that behind the scenes there's this queue which is",
    "start": "3149880",
    "end": "3154960"
  },
  {
    "text": "backing up and then Lambda will slowly process through that Queue at the rate that your",
    "start": "3154960",
    "end": "3161520"
  },
  {
    "text": "concurrent executions allow and for synchronous invocations a throttle because we don't know it's a",
    "start": "3161520",
    "end": "3168119"
  },
  {
    "text": "client waiting there like we can't keep retrying when a client has sent submitted a get request and we can't",
    "start": "3168119",
    "end": "3173319"
  },
  {
    "text": "keep retrying in the back end so we send a 4 to9 and let the client decide what it wants to do we do recommend that the",
    "start": "3173319",
    "end": "3179319"
  },
  {
    "text": "client can put in even if it's a client browser SDK put in a few retry automatic retry inside the SDK and we'll retry",
    "start": "3179319",
    "end": "3185520"
  },
  {
    "text": "that for you from there other things to think about when",
    "start": "3185520",
    "end": "3190559"
  },
  {
    "start": "3189000",
    "end": "3189000"
  },
  {
    "text": "scaling for Lambda itself as we talked about a throttle is not an error in most cases if you do get",
    "start": "3190559",
    "end": "3197559"
  },
  {
    "text": "throttled then that just means that your processing is delayed by a few seconds the moment your the the queue gets",
    "start": "3197559",
    "end": "3203280"
  },
  {
    "text": "complet it's emptied you're going to be executing in real time again so it's okay to get throttled but if you do that",
    "start": "3203280",
    "end": "3209680"
  },
  {
    "text": "you see that you are continuously getting throttled and you're always falling behind then you can submit a limit increase request and we'll",
    "start": "3209680",
    "end": "3215280"
  },
  {
    "text": "increase that limit for you and therefore if you expect these sudden spikes in invocations then you",
    "start": "3215280",
    "end": "3221680"
  },
  {
    "text": "can you can consider asynchronous invocations you can consider that fire and forget mode especially if you are",
    "start": "3221680",
    "end": "3227040"
  },
  {
    "text": "not trying to get data from the cloud in get data you have to be synchronous but if you're just putting data on the cloud",
    "start": "3227040",
    "end": "3232640"
  },
  {
    "text": "if you have somebody feeding data into you use the asynchronous mode so that way even if if you do get throttled you",
    "start": "3232640",
    "end": "3238000"
  },
  {
    "text": "don't really have to worry too much about it and if you're expecting a huge limit increase then always reach out to",
    "start": "3238000",
    "end": "3243319"
  },
  {
    "text": "AWS support the other thing to think about is upstream and downstream Services now Lambda is designed to scale out",
    "start": "3243319",
    "end": "3249640"
  },
  {
    "text": "horizontally very very quickly now we respond often times in low two-digit milliseconds is that the type of",
    "start": "3249640",
    "end": "3255359"
  },
  {
    "text": "responses customers have told us that they are getting that might not be the the type of responses which all of your systems",
    "start": "3255359",
    "end": "3262280"
  },
  {
    "text": "are designed for so you have to be remember that you have to build in the retry logic you have to build it the",
    "start": "3262280",
    "end": "3268040"
  },
  {
    "text": "client application the the back off logic not just in your Upstream in your uh in the function that's invoking the",
    "start": "3268040",
    "end": "3274040"
  },
  {
    "text": "Lambda but also in the Lambda itself is it has to be sure that inside the code you sometimes have to retry you have to",
    "start": "3274040",
    "end": "3280119"
  },
  {
    "text": "do some sort of back off because if you're talking to something which doesn't scale horizontally like a like a",
    "start": "3280119",
    "end": "3286000"
  },
  {
    "text": "relational database table or you're calling an internal endpoint which is used only to a few transactions per",
    "start": "3286000",
    "end": "3291240"
  },
  {
    "text": "second then that might not scale to the same limits of Lambda and you always try to limit your",
    "start": "3291240",
    "end": "3297319"
  },
  {
    "text": "concurrency therefore when you're talking to relational databases the last thing I want to talk",
    "start": "3297319",
    "end": "3302880"
  },
  {
    "text": "about is debugging in operate and what you would do in in that case so let's talk about errors what are the type of",
    "start": "3302880",
    "end": "3308640"
  },
  {
    "start": "3303000",
    "end": "3303000"
  },
  {
    "text": "errors that you could get so if the function executes in the right way you'll get a 2xx type of response a 200",
    "start": "3308640",
    "end": "3315920"
  },
  {
    "text": "or a 202 response but if it fails you could either see a 4xx client error",
    "start": "3315920",
    "end": "3321839"
  },
  {
    "text": "which often times can be fixed by the developer these are often things like well you're invoking you're trying to to invoke a function which doesn't exist or",
    "start": "3321839",
    "end": "3328559"
  },
  {
    "text": "the request payload is larger than 6 MB and therefore I can't process it or you could get a 5xx error which could be",
    "start": "3328559",
    "end": "3335760"
  },
  {
    "text": "fixed by your admin but some in some cases might not might you might need to reach out to AWS support for that but",
    "start": "3335760",
    "end": "3342160"
  },
  {
    "text": "most of these errors around EC toi management when you are running inside the VPC mode so what's the retry policy",
    "start": "3342160",
    "end": "3349079"
  },
  {
    "text": "there so we saw for throttles we'll continue to retry but if if there's an error for stream Based Services we do",
    "start": "3349079",
    "end": "3355839"
  },
  {
    "text": "the exact same thing we continue to retry because there we cannot skip over",
    "start": "3355839",
    "end": "3360920"
  },
  {
    "text": "data for asynchronous invocations what we what we do is we'll retri two extra",
    "start": "3360920",
    "end": "3366520"
  },
  {
    "text": "times after that we'll write to a dlq and similarly for synchronous invocations we'll we'll let the client",
    "start": "3366520",
    "end": "3371920"
  },
  {
    "text": "decide it's it's up to you what you want to do for for tracking and tracing the",
    "start": "3371920",
    "end": "3377640"
  },
  {
    "start": "3374000",
    "end": "3374000"
  },
  {
    "text": "other thing you could do is we have an upcoming integration with x-ray which is going to allow to allow you to look",
    "start": "3377640",
    "end": "3383799"
  },
  {
    "text": "inside of your function to look inside not just the Upstream function not just the Lambda function not just the downstream but a complete picture of",
    "start": "3383799",
    "end": "3391039"
  },
  {
    "text": "what's going on inside of your function inside your entire setup where each of each request is taking how much of",
    "start": "3391039",
    "end": "3398599"
  },
  {
    "text": "time the other thing which is available today is an integration with cloud trail every request is going to be integrated",
    "start": "3398599",
    "end": "3404359"
  },
  {
    "text": "with cloud trail so uh all the requests all control and apis are going to be uh",
    "start": "3404359",
    "end": "3410960"
  },
  {
    "text": "uh be tracked so the invoke API for example might might not be tracked but everything else which is going to be",
    "start": "3410960",
    "end": "3416280"
  },
  {
    "text": "creating a function if you see some sort of errors on your function if you see any new functions created or any objects",
    "start": "3416280",
    "end": "3422119"
  },
  {
    "text": "which are uh uh anybody's changing your function code all of those can be Cloud",
    "start": "3422119",
    "end": "3427520"
  },
  {
    "text": "will be logged to cloud trail and you can see what you can start debugging what's going on there for for normal troubleshooting and",
    "start": "3427520",
    "end": "3434799"
  },
  {
    "start": "3434000",
    "end": "3434000"
  },
  {
    "text": "monitoring know we have uh everything goes to Cloud watch logs and Cloud watch",
    "start": "3434799",
    "end": "3439880"
  },
  {
    "text": "metrics we have a default log system where we have a start an end and a report as a default log which goes",
    "start": "3439880",
    "end": "3447880"
  },
  {
    "text": "in plus inside the function depending on the runtime we have different ways in",
    "start": "3447880",
    "end": "3453000"
  },
  {
    "text": "which you can submit the logs now for for node for example it's console.log for C it's Lambda logger.log so you find",
    "start": "3453000",
    "end": "3460000"
  },
  {
    "text": "out what the right method for calling is anything which you which you annotate with that is going to go inside",
    "start": "3460000",
    "end": "3465440"
  },
  {
    "text": "cloudwatch logs to and metrics we have a we have a few",
    "start": "3465440",
    "end": "3471160"
  },
  {
    "text": "default metrics which we which we give out such as number of invocations that you are running the duration average",
    "start": "3471160",
    "end": "3477760"
  },
  {
    "text": "duration of invocations if if there's any throttles or any errors those are all default metrics that you get out of",
    "start": "3477760",
    "end": "3483640"
  },
  {
    "text": "the box but remember you can build your own additional metrics and the Lambda function the benefit is that it's your",
    "start": "3483640",
    "end": "3489559"
  },
  {
    "text": "code how difficult is it to write the code for publishing to cloudwatch metrics it's it's one line of code it's",
    "start": "3489559",
    "end": "3494640"
  },
  {
    "text": "one API you call on cloudwatch metrics so start publishing your own metric such as things like your business Centric",
    "start": "3494640",
    "end": "3501559"
  },
  {
    "text": "metrics so these are all operational metrics but you can start submitting things if you're getting for example",
    "start": "3501559",
    "end": "3506880"
  },
  {
    "text": "requests from different clients you can every time you find a unique client ID coming in from the request you can say",
    "start": "3506880",
    "end": "3513359"
  },
  {
    "text": "this is a new customer is served so you can have your own metric of customers served today which Lambda never knows",
    "start": "3513359",
    "end": "3519880"
  },
  {
    "text": "but your code does also you can go inside your logs and you can create",
    "start": "3519880",
    "end": "3525000"
  },
  {
    "text": "filters that'll automatically uh deploy your uh different tags as",
    "start": "3525000",
    "end": "3530599"
  },
  {
    "text": "metrics so hopefully that that was uh that gave you some value the key takeaway I want to get out of this",
    "start": "3530599",
    "end": "3536640"
  },
  {
    "text": "session is that Lambda has now become a core component of the AWS serverless platform over the last years what we",
    "start": "3536640",
    "end": "3543680"
  },
  {
    "text": "have seen is multiple different features and uh environments have been the whole",
    "start": "3543680",
    "end": "3549440"
  },
  {
    "text": "support system has been increased to make Lambda be part of your production production systems we do recommend to",
    "start": "3549440",
    "end": "3555839"
  },
  {
    "text": "stay in touch with the stay in touch with us through the complete on the compute blog or check our detail Pages",
    "start": "3555839",
    "end": "3561200"
  },
  {
    "text": "Lambda forums all are good ways of getting in touch with us since we out of time on stage I'll do Q&A at the side",
    "start": "3561200",
    "end": "3568039"
  },
  {
    "text": "but uh hope you had a good time and uh the request remember to complete your",
    "start": "3568039",
    "end": "3573400"
  },
  {
    "text": "evaluations uh go through some other sessions see you at the replay party",
    "start": "3573400",
    "end": "3580240"
  }
]