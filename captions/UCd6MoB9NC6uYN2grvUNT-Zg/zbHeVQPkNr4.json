[
  {
    "start": "0",
    "end": "41000"
  },
  {
    "text": "thank you for coming my name is deepak singh I run container services at AWS and I've actually had the luxury",
    "start": "240",
    "end": "7919"
  },
  {
    "text": "pleasure of being a database for eight years been with ec2 pretty much it's a day I walked in and working on compute",
    "start": "7919",
    "end": "14160"
  },
  {
    "text": "which means that I've had and eight years ago was 2008 when it'll be us are",
    "start": "14160",
    "end": "19260"
  },
  {
    "text": "still very young for those of you who are who weren't around or using it address in those days and are very",
    "start": "19260",
    "end": "25560"
  },
  {
    "text": "familiar with where things are today there was no EBS VPC didn't exist you",
    "start": "25560",
    "end": "30689"
  },
  {
    "text": "basically had c1 instances and an m1 instances in ec2 and your s3 and I think",
    "start": "30689",
    "end": "36300"
  },
  {
    "text": "that was it so things have changed a lot but what that has meant is that over",
    "start": "36300",
    "end": "41310"
  },
  {
    "start": "41000",
    "end": "57000"
  },
  {
    "text": "those years we've seen a lot of changes in the ways of people scared their applications from the very early days of",
    "start": "41310",
    "end": "48000"
  },
  {
    "text": "AWS there was a very common pattern to scaling these applications and fleets in",
    "start": "48000",
    "end": "53490"
  },
  {
    "text": "general but you know ec2 instance is an application the pretty much synonymous a very common way of doing that would be",
    "start": "53490",
    "end": "59940"
  },
  {
    "text": "to write an application with different components wrap it up in something like a war file or a rails app run that rails",
    "start": "59940",
    "end": "66359"
  },
  {
    "text": "app on an ec2 instance that you thought would be a good instance for the you know good sized instance for the",
    "start": "66359",
    "end": "71490"
  },
  {
    "text": "application and then you would horizontally scale that application across availability zones in the AWS",
    "start": "71490",
    "end": "78420"
  },
  {
    "start": "73000",
    "end": "124000"
  },
  {
    "text": "case where you had you know multiple az's very application was running to get availability and then you would put it",
    "start": "78420",
    "end": "84270"
  },
  {
    "text": "in an order scaling group which wasn't also not around in 2008 people at that menu sort of manually but later auto",
    "start": "84270",
    "end": "91109"
  },
  {
    "text": "scaling came and the most common and it's still probably the most common way of doing things today is you put your",
    "start": "91109",
    "end": "96119"
  },
  {
    "text": "applications and not a scaling group or and you do two things with it either you manage the size of your fleet without a",
    "start": "96119",
    "end": "101460"
  },
  {
    "text": "scaling by saying hey I want 20 instances running all the time or the scaling please manage it for me or you",
    "start": "101460",
    "end": "107969"
  },
  {
    "text": "wanted to reactively scale to traffic and you would horizontally scale those on the instances that you're running",
    "start": "107969",
    "end": "113039"
  },
  {
    "text": "your application on well and good but the way people were writing applications started changing and there are many many",
    "start": "113039",
    "end": "119399"
  },
  {
    "text": "examples of this you've heard folks like Netflix give many many talks about about",
    "start": "119399",
    "end": "125039"
  },
  {
    "start": "124000",
    "end": "147000"
  },
  {
    "text": "this pattern is they started breaking these components that were part of their application out essentially into their",
    "start": "125039",
    "end": "130890"
  },
  {
    "text": "own little but allocations and you know five years ago is to call them single purpose services",
    "start": "130890",
    "end": "136680"
  },
  {
    "text": "or a service that you could run with one person or something like that but this had a number of implications into the",
    "start": "136680",
    "end": "142710"
  },
  {
    "text": "way people were thinking of scaling the fleet's and operating these their overall application which is one in",
    "start": "142710",
    "end": "148800"
  },
  {
    "text": "theory you could write each component in its own language use and run and deploy it the way you thought fit you could",
    "start": "148800",
    "end": "155580"
  },
  {
    "text": "also scale each component independently so Tom and pattern that started emerging was you would have an application you're",
    "start": "155580",
    "end": "161460"
  },
  {
    "text": "probably running into something like a JVM the JVM would just run one service you would either have 2 or 3 j.b I'm",
    "start": "161460",
    "end": "167250"
  },
  {
    "text": "running on us on an instance or you would run smaller instances and then just run many of them and would have",
    "start": "167250",
    "end": "172680"
  },
  {
    "text": "many such sort of fleets that he would order scale independently and that was all working really well and into this",
    "start": "172680",
    "end": "179130"
  },
  {
    "text": "world of almost exactly three years ago",
    "start": "179130",
    "end": "184440"
  },
  {
    "text": "just over three years ago step docker and it's difficult to say if it's you",
    "start": "184440",
    "end": "190290"
  },
  {
    "text": "know which one came first but I think darker coming into the sort of microservices architecture one fuel the",
    "start": "190290",
    "end": "197430"
  },
  {
    "text": "other and I think they ever had a symbiotic relationship since then but let's talk about why doctor works really",
    "start": "197430",
    "end": "202800"
  },
  {
    "text": "well for these kinds of applications for those of you who are not familiar my guess is so who in this room has",
    "start": "202800",
    "end": "209700"
  },
  {
    "start": "204000",
    "end": "314000"
  },
  {
    "text": "actually run containers on a single machine good how many of you have run",
    "start": "209700",
    "end": "215550"
  },
  {
    "text": "containers across many many machines smaller number could make the talk",
    "start": "215550",
    "end": "220620"
  },
  {
    "text": "useful then so doc at the former what they call operating containers are a",
    "start": "220620",
    "end": "226080"
  },
  {
    "text": "form of what they call operating system virtualization virtualize a virtual machine in the sort of classic vm sense",
    "start": "226080",
    "end": "231959"
  },
  {
    "text": "virtualize this hardware you have many copies of your operating system internal on the same hardware and each of them is",
    "start": "231959",
    "end": "238470"
  },
  {
    "text": "isolated from each other containers work more in user space we essentially getting isolation between user space",
    "start": "238470",
    "end": "245340"
  },
  {
    "text": "processes using things like see groups and namespaces but gives you a very clear and clean way of separating the",
    "start": "245340",
    "end": "251280"
  },
  {
    "text": "services are these processes out and containers have been around for a long time from the very early days of AWS",
    "start": "251280",
    "end": "257700"
  },
  {
    "text": "customers like Heroku have been running or their platforms on either directly on",
    "start": "257700",
    "end": "263610"
  },
  {
    "text": "things like see groups or truth or on things like Alexi I but it wasn't until docker came around",
    "start": "263610",
    "end": "269400"
  },
  {
    "text": "that these things became very popular with the broader base and the reason was that you had a you are you actually had",
    "start": "269400",
    "end": "276450"
  },
  {
    "text": "a way of packaging up these containers which is the docker image describing it declarative literature the docker file",
    "start": "276450",
    "end": "281910"
  },
  {
    "text": "so now you had a way of writing up what you want to the application to be what dependencies you wanted it to have and",
    "start": "281910",
    "end": "287190"
  },
  {
    "text": "you could package that up in an image and then using the docker CLI and the darker tools you could then run and",
    "start": "287190",
    "end": "293370"
  },
  {
    "text": "deploy these these containers and the moment you could do that you could automate a whole bunch of things so it",
    "start": "293370",
    "end": "299220"
  },
  {
    "text": "is it what Dhaka did was essentially take all the capabilities that containers had and made them super easy",
    "start": "299220",
    "end": "304770"
  },
  {
    "text": "to use and put them in a sort of packaging and run and run type format that made them accessible to a much broader audience and I think that's part",
    "start": "304770",
    "end": "312210"
  },
  {
    "text": "of the reason things exploded but as a result of those properties you got a few",
    "start": "312210",
    "end": "317220"
  },
  {
    "start": "314000",
    "end": "377000"
  },
  {
    "text": "other things docker and Linux containers are a feature of Linux so they're relatively portable you can run them on",
    "start": "317220",
    "end": "323280"
  },
  {
    "text": "any machine that runs the modern linux kernel you can run the same thing in a virtual machine on your Mac and then run",
    "start": "323280",
    "end": "330150"
  },
  {
    "text": "it on ec2 instance I they are pretty flexible you can describe them in different ways you can put have two",
    "start": "330150",
    "end": "337020"
  },
  {
    "text": "containers you can run a red hat container on top of our 12 operating system you know there's a lot of things that you can do because you don't have",
    "start": "337020",
    "end": "343770"
  },
  {
    "text": "to boot the full operating system you're running on the colonel things move really fast second most of these images",
    "start": "343770",
    "end": "349650"
  },
  {
    "text": "are really small are tens of megabytes I've seen gigabyte sized images but that's usually not the case so they boot",
    "start": "349650",
    "end": "355950"
  },
  {
    "text": "very quickly and because they're getting fine grained isolation you're also using your systems are more efficiently your",
    "start": "355950",
    "end": "361620"
  },
  {
    "text": "hosts are much better packed in theory you getting back a number of containers under host use the system resources way",
    "start": "361620",
    "end": "367560"
  },
  {
    "text": "better than you could when you're trying to manage those processes on their own on on an operating system so you had all",
    "start": "367560",
    "end": "375180"
  },
  {
    "text": "these properties you could move fast you could move quickly which made container is a really really good fit for micro",
    "start": "375180",
    "end": "380430"
  },
  {
    "start": "377000",
    "end": "459000"
  },
  {
    "text": "services because of the way you could write your dacha files and you could run essentially one service per container or",
    "start": "380430",
    "end": "386610"
  },
  {
    "text": "on a small set of containers you got the ability to model these services in in",
    "start": "386610",
    "end": "391650"
  },
  {
    "text": "there's a number of ways that in the docker world that you can do so and we'll talk about one in a bit you are",
    "start": "391650",
    "end": "397530"
  },
  {
    "text": "not restricted by an application or a language you could write your application in whatever language you wanted to you had",
    "start": "397530",
    "end": "404160"
  },
  {
    "text": "versioning kind of built into the platform your image is your version they're mostly mutable I say mostly",
    "start": "404160",
    "end": "409800"
  },
  {
    "text": "because there are a couple of the latest tag in my opinion mixing somewhat immutable but you essentially could",
    "start": "409800",
    "end": "416159"
  },
  {
    "text": "every time we created a new image version it was a new version of your image you could test and deploy the same",
    "start": "416159",
    "end": "421860"
  },
  {
    "text": "artifact I think this is one of the things that people like a lot about docker hey I'm running this on my laptop",
    "start": "421860",
    "end": "427110"
  },
  {
    "text": "I'm going to run in production the same container should run without too many changes or any at all and then because",
    "start": "427110",
    "end": "433259"
  },
  {
    "text": "most applications and services in this world are stateless you could do things like a new version is essentially a",
    "start": "433259",
    "end": "438720"
  },
  {
    "text": "completely new deployment and you're not trying to replace an earlier one or update it you basically launch one in",
    "start": "438720",
    "end": "444120"
  },
  {
    "text": "parallel and then you kill the old one it made the managing change much much",
    "start": "444120",
    "end": "449699"
  },
  {
    "text": "much more easy now none of these things are things that people would were not doing before containers came around but",
    "start": "449699",
    "end": "455880"
  },
  {
    "text": "containers and dr. in particular just made this whole thing a lot easier so",
    "start": "455880",
    "end": "461000"
  },
  {
    "text": "just ask how many people have done containers on a single machine and a number of hands went up because it's",
    "start": "461000",
    "end": "466650"
  },
  {
    "text": "pretty easy there's a number of books out there that teacher to get started with docker and you can probably get",
    "start": "466650",
    "end": "471870"
  },
  {
    "text": "started in you know half a night of work and that's not very hard but we started",
    "start": "471870",
    "end": "477000"
  },
  {
    "text": "you know about two and a half years ago we started having customers come to us and say hey we want you to build a",
    "start": "477000",
    "end": "482009"
  },
  {
    "text": "docker service and I was an ec2 product management at the time and it was kind",
    "start": "482009",
    "end": "487020"
  },
  {
    "text": "of head-scratching like dhaka runs fine on ec2 like my i launched a container or two yesterday wise why do people want us",
    "start": "487020",
    "end": "492870"
  },
  {
    "text": "to build a service so we started talking to them out what they really wanted to do and became quick pretty clear to us",
    "start": "492870",
    "end": "499139"
  },
  {
    "text": "that people who wanted to run doc and production weren't talking about running doc on a single laptop they were wanted",
    "start": "499139",
    "end": "504930"
  },
  {
    "start": "504000",
    "end": "556000"
  },
  {
    "text": "were thinking of running containers much the way that run their ec2 instances which means they want their applications",
    "start": "504930",
    "end": "510659"
  },
  {
    "text": "to span availability zones they want to manage the availability of these applications they want they want these",
    "start": "510659",
    "end": "515880"
  },
  {
    "text": "applications to scale based on various triggers and metrics like things that you put in cloud watch they wanted you",
    "start": "515880",
    "end": "521969"
  },
  {
    "text": "they want it to be able to decide what applications fanzones which ones can get packed into an availability zone all",
    "start": "521969",
    "end": "529140"
  },
  {
    "text": "these other feature all these things that you think about when you're running at scale deployments",
    "start": "529140",
    "end": "534230"
  },
  {
    "text": "updates you know how do I Rob traffic how do i put these behind the load",
    "start": "534230",
    "end": "540269"
  },
  {
    "text": "balancer all these questions started coming up and a big and people have started trying to do this on their own and it was proving to be hard because no",
    "start": "540269",
    "end": "547829"
  },
  {
    "text": "one really wants to run their own control plane and that's one of the things that people want to avoid when they start using it will be us in the",
    "start": "547829",
    "end": "554069"
  },
  {
    "text": "first place so we build ecs so ETS was",
    "start": "554069",
    "end": "559319"
  },
  {
    "start": "556000",
    "end": "628000"
  },
  {
    "text": "announced in November of 2014 Adrian mine and we launched a preview at that",
    "start": "559319",
    "end": "566100"
  },
  {
    "text": "time and then we went GA in april of last year so just over a year ago and we",
    "start": "566100",
    "end": "571790"
  },
  {
    "text": "there are few things that we wanted to do one was that we wanted to build a container management service so all the",
    "start": "571790",
    "end": "577290"
  },
  {
    "text": "management aspect of containers hey you should not need to run your own control plane there should be a set of api's",
    "start": "577290",
    "end": "582839"
  },
  {
    "text": "much the way you have a DC too much the way you are with other AWS services that allow you to manage the lifecycle and",
    "start": "582839",
    "end": "589649"
  },
  {
    "text": "launch stopping getting the state of your system from your containers right",
    "start": "589649",
    "end": "595949"
  },
  {
    "text": "without actually having to run anything second ecs is also a scheduling platform",
    "start": "595949",
    "end": "601079"
  },
  {
    "text": "it is allows you through the built-in schedulers to schedule these containers on a fleet of ec2 instances and the",
    "start": "601079",
    "end": "609029"
  },
  {
    "text": "third part was we don't know everything we don't understand every piece of way that people want to run these containers",
    "start": "609029",
    "end": "615029"
  },
  {
    "text": "so we should be we should allow our customers to rent right and run their own schedulers so there was one of the three things that ecs is but we had some",
    "start": "615029",
    "end": "623069"
  },
  {
    "text": "specific goals that we wanted to solve based on what we had heard from the people that we had spoken to the first",
    "start": "623069",
    "end": "629040"
  },
  {
    "text": "one was to do container management at any scale and what does that mean the first one is something I've already",
    "start": "629040",
    "end": "634259"
  },
  {
    "text": "spoken about a lot of our customers were using some software package or writing their own they were essentially building",
    "start": "634259",
    "end": "640529"
  },
  {
    "text": "their own control planes which is fine if you're running a small set but if you in an organization with many",
    "start": "640529",
    "end": "645809"
  },
  {
    "text": "applications tens of users all of whom are deploying and running software whenever and whether in the ways they",
    "start": "645809",
    "end": "651720"
  },
  {
    "text": "want to perhaps multiple organizations within the same larger company you want",
    "start": "651720",
    "end": "657209"
  },
  {
    "text": "of you don't want to run your own and operate a own control plane you don't want to figure out how do how do i scale when I'm running ten thousand containers",
    "start": "657209",
    "end": "664290"
  },
  {
    "text": "across 5,000 hosts or you know and more hundreds of thousands of containers how do i scale my back-end",
    "start": "664290",
    "end": "669670"
  },
  {
    "text": "infrastructure hardware scale my state management system bin want people to worry about that so that was girl number one second we wanted to make sure that",
    "start": "669670",
    "end": "677440"
  },
  {
    "text": "you got a very very accurate state of the system at whenever you wanted it instead of trying to huge up other ways",
    "start": "677440",
    "end": "683620"
  },
  {
    "text": "of doing it that's a hard problem we wanted to give you very fine-grained control and monitoring capabilities and",
    "start": "683620",
    "end": "688779"
  },
  {
    "text": "then last but not the least whether you're running one or you know 100,000",
    "start": "688779",
    "end": "694420"
  },
  {
    "text": "containers you shouldn't really have to change the way you and interacting with the service the same API is to just work",
    "start": "694420",
    "end": "699870"
  },
  {
    "text": "so there was girl number one goal number two was we wanted to have a lot of",
    "start": "699870",
    "end": "705670"
  },
  {
    "start": "702000",
    "end": "750000"
  },
  {
    "text": "flexibility in how you actually place those containers or which you know you many people wanted to run long running",
    "start": "705670",
    "end": "711339"
  },
  {
    "text": "applications that these are services and applications that need to be highly available that need to be always",
    "start": "711339",
    "end": "717070"
  },
  {
    "text": "available you need to be able to update them without taking down time you know",
    "start": "717070",
    "end": "722740"
  },
  {
    "text": "applications are many of you in this room probably run today but people also wanted to run bad jobs these are jobs",
    "start": "722740",
    "end": "728769"
  },
  {
    "text": "that you've run once and they may not restart again or they may run on a schedule and in any organization you",
    "start": "728769",
    "end": "735069"
  },
  {
    "text": "have multiple types of applications with different characteristics we you want to run them all at the same time on the",
    "start": "735069",
    "end": "740380"
  },
  {
    "text": "same infrastructure and not run a different you know cluster for each one of them so we wanted to be able to",
    "start": "740380",
    "end": "745779"
  },
  {
    "text": "support all of that and you'll talk a little bit more about how we do that and",
    "start": "745779",
    "end": "750930"
  },
  {
    "start": "750000",
    "end": "810000"
  },
  {
    "text": "the third critical one was integration with the overall broad AWS platform which is how do i put my containers",
    "start": "750930",
    "end": "758230"
  },
  {
    "text": "behind a knee lb and brought traffic to them how do I manage health checks or do I drain connections how do I manage it",
    "start": "758230",
    "end": "764139"
  },
  {
    "text": "when i'm updating a new version of their application can I you know have persistent storage at EBS can I run all",
    "start": "764139",
    "end": "771370"
  },
  {
    "text": "of this inside a VPC I won't be able to monitor this cloud watch log changes to",
    "start": "771370",
    "end": "777940"
  },
  {
    "text": "cloud trail be able to use I am these are some of the features that we have today see that it's a much broader",
    "start": "777940",
    "end": "783760"
  },
  {
    "text": "question which is a dubious is a much bigger platform and I want my containerized applications to get the same benefits as you get with ec2",
    "start": "783760",
    "end": "790029"
  },
  {
    "text": "instances to put it somewhat simply so I'll talk about all of these things a little more detail talk a little bit",
    "start": "790029",
    "end": "796449"
  },
  {
    "text": "about the architecture of the system why we went by we have designs things the way we have and some of the",
    "start": "796449",
    "end": "802150"
  },
  {
    "text": "core sort of features and capabilities of the system and then we will talk a little bit about other manifest into",
    "start": "802150",
    "end": "808900"
  },
  {
    "text": "running larger applications so the first thing I want talk about is container management which is sort of the core",
    "start": "808900",
    "end": "814180"
  },
  {
    "start": "810000",
    "end": "825000"
  },
  {
    "text": "when we launched in preview this is pretty much all we did we did not have any fancy schedulers we didn't even have",
    "start": "814180",
    "end": "819490"
  },
  {
    "text": "a console we had a core set of AP is that really really tried to give you a very robust container management and",
    "start": "819490",
    "end": "825150"
  },
  {
    "start": "825000",
    "end": "890000"
  },
  {
    "text": "what does a container manager need and for those of you who are thinking of going from one lap one you know running",
    "start": "825150",
    "end": "830710"
  },
  {
    "text": "on one host to running on many many hosts and running production applications in containers this is something you will have to think about",
    "start": "830710",
    "end": "836740"
  },
  {
    "text": "at some point it is an essential requirement what you want to do you have a set of resources across all your",
    "start": "836740",
    "end": "842770"
  },
  {
    "text": "machines you want to be able to know what resources you have to use you want to be able to track how the use of these",
    "start": "842770",
    "end": "849940"
  },
  {
    "text": "resources changes over time and anybody running a containerized infrastructure and who has one knows that the these",
    "start": "849940",
    "end": "856630"
  },
  {
    "text": "systems are very very dynamic your containers have life cycles that some of them will run for days and others may",
    "start": "856630",
    "end": "861910"
  },
  {
    "text": "write run for seconds and you have all of them happening at the same time your container manager needs to be able to",
    "start": "861910",
    "end": "867820"
  },
  {
    "text": "accept or reject requests for resources and last but not the least you need to make sure that all of this information",
    "start": "867820",
    "end": "874150"
  },
  {
    "text": "is giving being given to you accurately and that is and it's consistent you can't have a resource request and a",
    "start": "874150",
    "end": "881140"
  },
  {
    "text": "second one come in and because because system is not consistent you say hey this resources are still available but",
    "start": "881140",
    "end": "887140"
  },
  {
    "text": "actually not result in very very bad things and here are some of the",
    "start": "887140",
    "end": "893860"
  },
  {
    "start": "890000",
    "end": "924000"
  },
  {
    "text": "resources that you can track and just to give you an idea what the resources could be CPU memory network ports disk",
    "start": "893860",
    "end": "901060"
  },
  {
    "text": "space these are the ones that we do today we don't do this guy off but you could think of this guy often and the",
    "start": "901060",
    "end": "906400"
  },
  {
    "text": "same is true for network bandwidth as resources that you want to manage but really they could be any resource that",
    "start": "906400",
    "end": "911770"
  },
  {
    "text": "is finite that you want to be able to track and manage and control you could defy you know there could be some",
    "start": "911770",
    "end": "917440"
  },
  {
    "text": "arbitrary resource or something that you care about like GPUs that we don't explicitly track today so the way we do",
    "start": "917440",
    "end": "925690"
  },
  {
    "start": "924000",
    "end": "990000"
  },
  {
    "text": "it in ecss via the ecs agent the ecs agent is available on github it's an Apache License service up project",
    "start": "925690",
    "end": "934920"
  },
  {
    "text": "it's written in go you run it in ETS it runs inside docker container but really",
    "start": "934920",
    "end": "940300"
  },
  {
    "text": "you can build your own ecs Amazon machine image or army today we provide",
    "start": "940300",
    "end": "946270"
  },
  {
    "text": "you with one by default that comes with agent installed and comes with an optimized version of diamonds on Linux",
    "start": "946270",
    "end": "951970"
  },
  {
    "text": "ami but really can use any Linux OS that has the right version of the Linux",
    "start": "951970",
    "end": "957130"
  },
  {
    "text": "kernel it has darker running on it and it and all you need to make it run with dcs is to have that agent running you",
    "start": "957130",
    "end": "963010"
  },
  {
    "text": "could run make it part of the army you could run it inside a container you could bootstrap it once it comes up it's",
    "start": "963010",
    "end": "968740"
  },
  {
    "text": "it checks in and then the services under management of ecs what the agent does is",
    "start": "968740",
    "end": "974830"
  },
  {
    "text": "essentially it tracks these it manage it maintains these resources for you it also tracks all the changes to the",
    "start": "974830",
    "end": "981430"
  },
  {
    "text": "resources and it does so by using Linux cgroups constructs for the most part as exposed by Daka does a few other things",
    "start": "981430",
    "end": "987730"
  },
  {
    "text": "as well so here's kind of how it works when an instant spins up with the agent",
    "start": "987730",
    "end": "994450"
  },
  {
    "start": "990000",
    "end": "1022000"
  },
  {
    "text": "on it it registers itself against our control plane it basically says hey I am",
    "start": "994450",
    "end": "999790"
  },
  {
    "text": "an instance I have 2048 is amount of CPU shares that essentially means it's got",
    "start": "999790",
    "end": "1005580"
  },
  {
    "text": "two virtual CPUs on it 1024 shares is one virtual CPU and you basically this",
    "start": "1005580",
    "end": "1012150"
  },
  {
    "text": "is just a cpu part you'll have memory you'll have other capabilities that are capable that are available through on an",
    "start": "1012150",
    "end": "1019140"
  },
  {
    "text": "instance that you want to register against the service but you can even do more interesting things let's say you",
    "start": "1019140",
    "end": "1024329"
  },
  {
    "start": "1022000",
    "end": "1055000"
  },
  {
    "text": "have built a an OS and you're running an agent on it of your own or some other process that you don't want to be",
    "start": "1024329",
    "end": "1030589"
  },
  {
    "text": "counted as a resources that you want to track these are like these are reserved resources I want to keep them out of the",
    "start": "1030589",
    "end": "1036300"
  },
  {
    "text": "system you can actually modify them you can reserve them and say hey 32 gigs of",
    "start": "1036300",
    "end": "1041459"
  },
  {
    "text": "ram these are these UDP ports these the TCP ports please don't manage them I",
    "start": "1041459",
    "end": "1047699"
  },
  {
    "text": "have them reserved for other purposes because you may be running some non containerized application on that instance as well so and we won't manage",
    "start": "1047699",
    "end": "1054150"
  },
  {
    "text": "it but then you start modeling your applications into this world and the way in the good old days you modeled it was",
    "start": "1054150",
    "end": "1060240"
  },
  {
    "start": "1055000",
    "end": "1058000"
  },
  {
    "text": "you had a virtual machine you had full operating system and you ran your applications inside that but now you're",
    "start": "1060240",
    "end": "1066240"
  },
  {
    "text": "moving too much smaller slices something that could be made up of one or more container this is your little",
    "start": "1066240",
    "end": "1072030"
  },
  {
    "text": "service a single user application it could be just a single container or it could be multiple containers typically",
    "start": "1072030",
    "end": "1078990"
  },
  {
    "start": "1075000",
    "end": "1108000"
  },
  {
    "text": "we see two to three containers but what we call a task definition and a task definition is nothing but a decorative",
    "start": "1078990",
    "end": "1085460"
  },
  {
    "text": "Jason syntax we love Jason so if you see in cloud formation now if you've seen any CS class definition you basically",
    "start": "1085460",
    "end": "1091860"
  },
  {
    "text": "define the properties of all the containers that make up the task definition and it's volumes that you",
    "start": "1091860",
    "end": "1096900"
  },
  {
    "text": "might be using for it and any other properties are all defined there and basically that is the information you're giving our control plane to say hey this",
    "start": "1096900",
    "end": "1104190"
  },
  {
    "text": "is what I want this task to do please find a way place to do it so and then",
    "start": "1104190",
    "end": "1110430"
  },
  {
    "text": "you basically launch these tasks definitions onto a container instance and a running instantiation of that task",
    "start": "1110430",
    "end": "1116220"
  },
  {
    "text": "definition is called a task and you can have one task or a million tasks so which is just a copy of the same class",
    "start": "1116220",
    "end": "1121590"
  },
  {
    "text": "definition running on your cluster and everything in ecs happens in the context of a cluster which is just a set of ec2",
    "start": "1121590",
    "end": "1128910"
  },
  {
    "text": "instances that get pulled together to form basically this blob of resources for you the way you start a task is",
    "start": "1128910",
    "end": "1134820"
  },
  {
    "start": "1133000",
    "end": "1159000"
  },
  {
    "text": "either the user using a star plus KP I or a scheduler which is much more",
    "start": "1134820",
    "end": "1139980"
  },
  {
    "text": "automated and has a fancy business logic in it basically calls a star task API",
    "start": "1139980",
    "end": "1145230"
  },
  {
    "text": "the start task API basically says here's a task definition I want here is the number of copies that I need to run",
    "start": "1145230",
    "end": "1151160"
  },
  {
    "text": "cluster management engine is there a place for me to run them the cluster management engine essentially sends this",
    "start": "1151160",
    "end": "1157740"
  },
  {
    "text": "on to and what we call the agent communication service which writes it out to a web socket which is how the",
    "start": "1157740",
    "end": "1163320"
  },
  {
    "start": "1159000",
    "end": "1201000"
  },
  {
    "text": "agent communicates with the service and says hey do you have resources that I need and it it actually knows where all",
    "start": "1163320",
    "end": "1169980"
  },
  {
    "text": "the resources are so it'll go to the right instance the agent will then act that the the the the task has been",
    "start": "1169980",
    "end": "1176670"
  },
  {
    "text": "launched or if for some reason it can't launch that task it'll let the control plane know the cluster manager know that",
    "start": "1176670",
    "end": "1182580"
  },
  {
    "text": "that has not happened and you can proceed on to the next request once the",
    "start": "1182580",
    "end": "1187650"
  },
  {
    "text": "task runs and this is kind of what it is it essentially submits a state change and the API is very intelligently called",
    "start": "1187650",
    "end": "1193650"
  },
  {
    "text": "submit task chain submit state change and you know it basically registers that",
    "start": "1193650",
    "end": "1199020"
  },
  {
    "text": "against the cluster management engine you also want to again this is just how",
    "start": "1199020",
    "end": "1204570"
  },
  {
    "text": "you make a resource request but you also want to change track all the changes in this resource request and that can get",
    "start": "1204570",
    "end": "1210779"
  },
  {
    "start": "1210000",
    "end": "1216000"
  },
  {
    "text": "interesting again this is all managed through the agent that I just talked about on this system but what happens",
    "start": "1210779",
    "end": "1217470"
  },
  {
    "start": "1216000",
    "end": "1310000"
  },
  {
    "text": "when your ec2 instance is no longer available so the happy case is that you",
    "start": "1217470",
    "end": "1223799"
  },
  {
    "text": "shut down everything yourself you submit a stop task API call it gracefully shuts",
    "start": "1223799",
    "end": "1229350"
  },
  {
    "text": "down all the tasks clears out all the instances you could even shut down your instance after that and basically say everything is clean you clear it out of",
    "start": "1229350",
    "end": "1236250"
  },
  {
    "text": "the state of the system everything works well but you have a network partition you're running across to availability",
    "start": "1236250",
    "end": "1241770"
  },
  {
    "text": "zones and one zone for some reason is goes offline the task could be happily",
    "start": "1241770",
    "end": "1247409"
  },
  {
    "text": "running but you essentially your agent has basically said you lose status the the cluster manager when it falls",
    "start": "1247409",
    "end": "1253350"
  },
  {
    "text": "agencies can't find it so I don't even know what's happening what we've decided to do in ecs was the ecs service itself",
    "start": "1253350",
    "end": "1261480"
  },
  {
    "text": "does not make any decisions for you because we don't know what you want to do do you want to restart it do you want to let it die do you want to let it",
    "start": "1261480",
    "end": "1267210"
  },
  {
    "text": "continue that is something we've left to the scheduling layer to decide that's where you write your business logic or",
    "start": "1267210",
    "end": "1273360"
  },
  {
    "text": "the scheduler is that we have written have some logic you may choose to have some other logic but all of that is taken care in the scheduler what is",
    "start": "1273360",
    "end": "1279779"
  },
  {
    "text": "cluster manager is telling you is I have no idea what's going on here please let me know what you want to do and the",
    "start": "1279779",
    "end": "1285840"
  },
  {
    "text": "third the third there's probably more cases more more examples of what could happen the third one is where you",
    "start": "1285840",
    "end": "1291450"
  },
  {
    "text": "actually you know there's some problem with the instance but you know that so you can again do grace you you can do",
    "start": "1291450",
    "end": "1297870"
  },
  {
    "text": "the cleanup very gracefully for the most part so you have all these changes happening again with a single task not a",
    "start": "1297870",
    "end": "1304860"
  },
  {
    "text": "problem it's not that hard you probably run a small database track all those changes there and everything would run",
    "start": "1304860",
    "end": "1309960"
  },
  {
    "text": "just fine but what happens when you're running many many hosts and you have a very dynamic system things are changing",
    "start": "1309960",
    "end": "1315029"
  },
  {
    "start": "1310000",
    "end": "1319000"
  },
  {
    "text": "every few seconds how do you guarantee accuracy and consistency so we will talk",
    "start": "1315029",
    "end": "1321210"
  },
  {
    "start": "1319000",
    "end": "1361000"
  },
  {
    "text": "about how EGS works underneath the hood so we built we implemented ecs on top of one of Amazon's core distributed systems",
    "start": "1321210",
    "end": "1327330"
  },
  {
    "text": "sort of primitives it's something we've built over the years to meet the needs that not just ccs where many of other",
    "start": "1327330",
    "end": "1333960"
  },
  {
    "text": "services do and it's app access based transactional journal data store so the way it works",
    "start": "1333960",
    "end": "1338970"
  },
  {
    "text": "is so any right that you do any right to the data store is committed as a",
    "start": "1338970",
    "end": "1344640"
  },
  {
    "text": "transaction on the journal and it gets a specific order based ID and the state of the system is basically the Summa font",
    "start": "1344640",
    "end": "1350340"
  },
  {
    "text": "all transactions and that's what's reported to you and a reed is just a snapshot in time of this of the state of",
    "start": "1350340",
    "end": "1357210"
  },
  {
    "text": "your system which is basically a sum of all changes that you made over a period of time so what this means is for a",
    "start": "1357210",
    "end": "1365549"
  },
  {
    "text": "right to succeed the proposed right must be the latest transaction since the last read so if you've made up if you have a",
    "start": "1365549",
    "end": "1371880"
  },
  {
    "text": "read that just happened any of a few bunch of Rights coming in that happened along the way if the ID is not after the",
    "start": "1371880",
    "end": "1378600"
  },
  {
    "text": "last read they'll basically be rejected in it to retry so what does this allow you to do one it allows it this takes",
    "start": "1378600",
    "end": "1385169"
  },
  {
    "text": "care of all our availability and scaling requirements because it's a primitive that we talk to but also allows us to build a completely optimistically",
    "start": "1385169",
    "end": "1391289"
  },
  {
    "text": "concurrent system which is super useful in a dynamic environment where you don't want crashes and you want clashes to be",
    "start": "1391289",
    "end": "1396929"
  },
  {
    "text": "resolved very cleanly so it's I think one reason that ecs is able to do things",
    "start": "1396929",
    "end": "1402570"
  },
  {
    "start": "1402000",
    "end": "1472000"
  },
  {
    "text": "like scale the way it does because nothing is pessimistically locked this is a something that we did about this",
    "start": "1402570",
    "end": "1407700"
  },
  {
    "text": "time last year so it's relatively old data it's two days we go from something like 200 instances to over a thousand",
    "start": "1407700",
    "end": "1414269"
  },
  {
    "text": "and the two lines you see our 50th percentile a PR agency and a 99th percentile agency and as you can see",
    "start": "1414269",
    "end": "1420750"
  },
  {
    "text": "once the system stabilizers and you have enough statistically you have enough data you stabilize to about 25",
    "start": "1420750",
    "end": "1426899"
  },
  {
    "text": "milliseconds on the 50th percentile and about 75 milliseconds on the 70 to 75 on",
    "start": "1426899",
    "end": "1433350"
  },
  {
    "text": "the 99th percentile and that sort of stay stable independent of the size of the cluster and you can take you know",
    "start": "1433350",
    "end": "1438960"
  },
  {
    "text": "you can build much larger clusters and these are thousand hosts not containers",
    "start": "1438960",
    "end": "1443970"
  },
  {
    "text": "you're running many many many more containers but you get very very good performance characteristics because of",
    "start": "1443970",
    "end": "1449279"
  },
  {
    "text": "the transactional nature of the backend which you don't have to worry about it's just what we've chosen to build it on",
    "start": "1449279",
    "end": "1455100"
  },
  {
    "text": "you have to worry about how to scale it you ran to worry about hey how am I going to run my what happens if I'm",
    "start": "1455100",
    "end": "1460230"
  },
  {
    "text": "running my state management system in single ag and that is he goes away what do I do there's all things that we take",
    "start": "1460230",
    "end": "1465480"
  },
  {
    "text": "care of for you the next thing that we track is next thing we'll talk",
    "start": "1465480",
    "end": "1473910"
  },
  {
    "start": "1472000",
    "end": "1481000"
  },
  {
    "text": "about is scheduling and again scheduling calendars as I found out is a very very hard problem which is why you hire other",
    "start": "1473910",
    "end": "1480630"
  },
  {
    "text": "people to do it sometimes but what is the scheduler schedulers at their hard to few simple things they determine the",
    "start": "1480630",
    "end": "1487260"
  },
  {
    "start": "1481000",
    "end": "1502000"
  },
  {
    "text": "desired state of the system they check against the current state and then they perform some action based on hopefully",
    "start": "1487260",
    "end": "1492900"
  },
  {
    "text": "on something you've told it to do and I will talk about schedulers in general but i'll use the ecs service scheduler",
    "start": "1492900",
    "end": "1499200"
  },
  {
    "text": "which is pretty much the way most people use dcs as an example of how this works so we call it a service scheduler what",
    "start": "1499200",
    "end": "1506400"
  },
  {
    "start": "1502000",
    "end": "1601000"
  },
  {
    "text": "is the service a service models a long-running application so you define a task definition hello okay it could be",
    "start": "1506400",
    "end": "1514470"
  },
  {
    "text": "like a front-end an application server may be a small database all things that you want to place together this it",
    "start": "1514470",
    "end": "1520920"
  },
  {
    "text": "basically maintains a desired state of the service you tell it I want 20 copies of this running and make sure that",
    "start": "1520920",
    "end": "1526410"
  },
  {
    "text": "there's 20 copies of it running by doing this sort of checking and making sure that things are working and you can",
    "start": "1526410",
    "end": "1532920"
  },
  {
    "text": "optionally run all of it behind a load balancer and you'll be to route traffic appropriately and so when you go into",
    "start": "1532920",
    "end": "1538590"
  },
  {
    "text": "using the service scheduler you go into a console you see a much prettier version of this in this case you're",
    "start": "1538590",
    "end": "1544020"
  },
  {
    "text": "basically saying my desired state is five I have zero pending and have zero running now let's say that's what you",
    "start": "1544020",
    "end": "1550140"
  },
  {
    "text": "enter I want five copies of a of service number pcs service version one you can",
    "start": "1550140",
    "end": "1555720"
  },
  {
    "text": "tell it that I want fifty percent minimum has the percentage and I can have maximum have the percentage of 200",
    "start": "1555720",
    "end": "1561510"
  },
  {
    "text": "that's probably what you said as you go in and it's a very simple state machine you have a steady state you determine",
    "start": "1561510",
    "end": "1568350"
  },
  {
    "text": "your placement options so for example a few months ago we launched the ability to be AZ aware which means when you",
    "start": "1568350",
    "end": "1575070"
  },
  {
    "text": "launch a new task it's aware of the fact that you are your cluster could be spanning multiple availability zones and",
    "start": "1575070",
    "end": "1581040"
  },
  {
    "text": "it will honor that in fact the default behavior is if you're running in three AZ you'll try and keep the number of",
    "start": "1581040",
    "end": "1586860"
  },
  {
    "text": "tasks running balanced across all three and that's one example of replacement option and as you can imagine you can do",
    "start": "1586860",
    "end": "1593130"
  },
  {
    "text": "a lot of interesting things there and last but and then it deploys the task if",
    "start": "1593130",
    "end": "1598290"
  },
  {
    "text": "it you know make sure that things are working so it's a very simple state machine but what if you want to make some",
    "start": "1598290",
    "end": "1603360"
  },
  {
    "start": "1601000",
    "end": "1672000"
  },
  {
    "text": "changes and a change could be as described here you want to launch a new version service version ecs service",
    "start": "1603360",
    "end": "1609450"
  },
  {
    "text": "version 2 and you want to scale the service from five copies to 10 copies now in this particular case because a",
    "start": "1609450",
    "end": "1616800"
  },
  {
    "text": "minimum healthy percentage is 50 and your maximum is 200 your five existing",
    "start": "1616800",
    "end": "1622220"
  },
  {
    "text": "tasks can keep running and you can actually launch all you can launch you",
    "start": "1622220",
    "end": "1630030"
  },
  {
    "text": "know you can have 10 TAS running at the same time I actually took more than 10 because you're saying your desired state",
    "start": "1630030",
    "end": "1635160"
  },
  {
    "text": "is ten and two hundred percent of that is okay and so and then basically once all any new tasks are running of your",
    "start": "1635160",
    "end": "1641430"
  },
  {
    "text": "new version it'll drain connections from the original five to us from the original five tasks and then move the",
    "start": "1641430",
    "end": "1647400"
  },
  {
    "text": "year be over to the new one and do it in a relatively graceful way so that you can do these sort of zero downtime time",
    "start": "1647400",
    "end": "1654630"
  },
  {
    "text": "deployments and we've got right now it's not you know there's this whole process",
    "start": "1654630",
    "end": "1659700"
  },
  {
    "text": "is controlled by our update API you can do some other clever things if you integrate with other services like and",
    "start": "1659700",
    "end": "1664950"
  },
  {
    "text": "and this is just a way that the cluster manager is basically automating this for you it nodes the difference is it nodes",
    "start": "1664950",
    "end": "1670170"
  },
  {
    "text": "needs to know it knows what state to get into and basically it's implementing this cake machine it's just one",
    "start": "1670170",
    "end": "1676230"
  },
  {
    "start": "1672000",
    "end": "1680000"
  },
  {
    "text": "additional branch on your additional state machine but that's something simple I kind of went ahead of myself",
    "start": "1676230",
    "end": "1681510"
  },
  {
    "text": "and talk to buddy lbs you may have you want to register and be there just against TL B's you have permissions and",
    "start": "1681510",
    "end": "1687420"
  },
  {
    "text": "error handling that you might want to do is the node even healthy you might want to look at the health of your running tasks and based do things based on those",
    "start": "1687420",
    "end": "1694200"
  },
  {
    "text": "you might want to scale down and scaling down is important because you may want to do it in a way that doesn't create any any conflicts you may want to",
    "start": "1694200",
    "end": "1702840"
  },
  {
    "text": "introduce some entropy into the system to make sure its function or behaving properly and this state machine is one",
    "start": "1702840",
    "end": "1708660"
  },
  {
    "start": "1706000",
    "end": "1712000"
  },
  {
    "text": "fit into one slide so here the cartoons so that's a single scheduler but I think",
    "start": "1708660",
    "end": "1713970"
  },
  {
    "start": "1712000",
    "end": "1779000"
  },
  {
    "text": "I talked about the fact that is one of the core goals that we see assisted on multiple schedulers this could mean two things you have three different teams or",
    "start": "1713970",
    "end": "1720660"
  },
  {
    "text": "three different applications or three different services all using the service scheduler being launched on the same infrastructure or what's actually",
    "start": "1720660",
    "end": "1727770"
  },
  {
    "text": "sometimes more common is you have a service and a set of bath jobs that you want to launch on to the same same same",
    "start": "1727770",
    "end": "1735289"
  },
  {
    "text": "so the way this works is that each scheduler will basically periodically query the current cluster state to check",
    "start": "1735289",
    "end": "1741480"
  },
  {
    "text": "the check for resource availability so let's take your in this case you're sort",
    "start": "1741480",
    "end": "1746999"
  },
  {
    "text": "of orange scheduler it makes a claim for any further resources that it needs the scheduler basically updates the state of",
    "start": "1746999",
    "end": "1753509"
  },
  {
    "text": "the system as a and basically this is a new transaction into that data store that I talks about and when this next",
    "start": "1753509",
    "end": "1760559"
  },
  {
    "text": "scheduler it has an old view of the system because it pulled it it already folded and it's and it's trying to claim",
    "start": "1760559",
    "end": "1766230"
  },
  {
    "text": "resources and the system will basically say hey you don't have a correct state of the system so you need to retry then",
    "start": "1766230",
    "end": "1772799"
  },
  {
    "text": "it will have to pick up a new state and then it can then it can make a claim for new some new resources so in general",
    "start": "1772799",
    "end": "1778919"
  },
  {
    "text": "this will always work you can do this with many many schedulers the more differences between your individual",
    "start": "1778919",
    "end": "1785730"
  },
  {
    "start": "1779000",
    "end": "1834000"
  },
  {
    "text": "schedulers better this will work but as normally they're doing retries you should be able to launch have multiple",
    "start": "1785730",
    "end": "1791340"
  },
  {
    "text": "schedulers running without having conflicts and these could trigger things like auto scaling groups so we have a bunch of cloud watch metrics at the task",
    "start": "1791340",
    "end": "1798629"
  },
  {
    "text": "at the service and cluster level that will basically say hey seventy percent of my cluster CPU is utilized I need no",
    "start": "1798629",
    "end": "1805649"
  },
  {
    "text": "new hosts and you could have you know as your scheduler start scheduling tasks on to the cluster you may start running out",
    "start": "1805649",
    "end": "1812070"
  },
  {
    "text": "of CPU and news ec2 instances of popping up underneath the hood to give you me more resources to to get for your",
    "start": "1812070",
    "end": "1818580"
  },
  {
    "text": "applications then you can decide which service actually triggers an order scaling action and others that we say",
    "start": "1818580",
    "end": "1824999"
  },
  {
    "text": "and the service is not important not that important I don't spend more money on it so don't order scale if you if it",
    "start": "1824999",
    "end": "1831570"
  },
  {
    "text": "can't find resources that's fine so what did we talk about today we basically",
    "start": "1831570",
    "end": "1838200"
  },
  {
    "start": "1838000",
    "end": "1863000"
  },
  {
    "text": "talked about the fact that as we think about new applications containers add a number of interesting properties that",
    "start": "1838200",
    "end": "1844379"
  },
  {
    "text": "make them super useful you can break your applications up into tasks and we",
    "start": "1844379",
    "end": "1849929"
  },
  {
    "text": "call them class definitions there's you know it's basically a declarative way of saying here these two or three or up to",
    "start": "1849929",
    "end": "1855360"
  },
  {
    "text": "10 containers that basically describe map lakay shun I want to place all of these as one entity somewhere and",
    "start": "1855360",
    "end": "1862950"
  },
  {
    "text": "basically it's declarative and because it's declarative we have the ability to find the resources",
    "start": "1862950",
    "end": "1868720"
  },
  {
    "start": "1863000",
    "end": "1869000"
  },
  {
    "text": "for it based on this complex architecture but the best part about ecs",
    "start": "1868720",
    "end": "1873790"
  },
  {
    "start": "1869000",
    "end": "1901000"
  },
  {
    "text": "is you don't have to build this complex architecture you don't have to worry about the key value store you don't have",
    "start": "1873790",
    "end": "1879100"
  },
  {
    "text": "to worry about the cluster management engine you don't have to design any AP is these are all just things that are available to you and what you have to",
    "start": "1879100",
    "end": "1885760"
  },
  {
    "text": "worry about is what should your task definition look like and what kind of scheduler do you want to use if you're",
    "start": "1885760",
    "end": "1891820"
  },
  {
    "text": "using the ecs service scheduler you don't have to think about that either but if you want to write your own",
    "start": "1891820",
    "end": "1896860"
  },
  {
    "text": "scheduler you can do so and run that and then you said with ecs and if you are if you're a complex you know if your large",
    "start": "1896860",
    "end": "1902980"
  },
  {
    "start": "1901000",
    "end": "1960000"
  },
  {
    "text": "organization with multiple multiple kinds of applications that works for you know you can do that as well and we have",
    "start": "1902980",
    "end": "1910120"
  },
  {
    "text": "a number of customers who do that a good example of a customer that's built their own scheduling system is meteor so media",
    "start": "1910120",
    "end": "1916840"
  },
  {
    "text": "runs the service called me to galaxy it's their a platform version of meteor Jas and a day built their own scheduler",
    "start": "1916840",
    "end": "1923440"
  },
  {
    "text": "on top of ecs so because they have certain business requirements that need to fulfill Coursera did something very",
    "start": "1923440",
    "end": "1929170"
  },
  {
    "text": "similar they have a very calm very cool batch processing system built on top of ecs for giving people tests they also",
    "start": "1929170",
    "end": "1936640"
  },
  {
    "text": "happen to for car agent because they have some very specific requirements because they don't trust any of their",
    "start": "1936640",
    "end": "1941860"
  },
  {
    "text": "customers because they are students who take taking tests so you know writing and writing code which makes them very",
    "start": "1941860",
    "end": "1948550"
  },
  {
    "text": "dangerous so these are just examples of customers who built their own sort of",
    "start": "1948550",
    "end": "1953890"
  },
  {
    "text": "scheduling systems most of our customers just use the native schedulers as they are and maybe add a thing or two here or",
    "start": "1953890",
    "end": "1959710"
  },
  {
    "text": "there",
    "start": "1959710",
    "end": "1961860"
  }
]