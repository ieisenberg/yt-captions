[
  {
    "start": "0",
    "end": "36000"
  },
  {
    "text": "hello everyone welcome to the session on taking service to the edge thank you all",
    "start": "1280",
    "end": "8040"
  },
  {
    "text": "for joining us today I know a lot of you are almost all of you are away from work away from home so",
    "start": "8040",
    "end": "15269"
  },
  {
    "text": "we really appreciate you being here at Green wind and attending our session in particular my name is Jorge John I'm a",
    "start": "15269",
    "end": "21990"
  },
  {
    "text": "product manager in the lambda at the edge team with me we have Benjamin Fabri",
    "start": "21990",
    "end": "27150"
  },
  {
    "text": "who's the co-founder and CTO of data dome and Wilson Clair a senior Solutions",
    "start": "27150",
    "end": "33210"
  },
  {
    "text": "Architect with AWS so AWS lambda since",
    "start": "33210",
    "end": "39120"
  },
  {
    "start": "36000",
    "end": "98000"
  },
  {
    "text": "its launch almost three years ago has enabled service computing ways that was never possible before now with lambda at",
    "start": "39120",
    "end": "46469"
  },
  {
    "text": "the edge that when GA a few months ago to be exact July of 2017 this year has",
    "start": "46469",
    "end": "53789"
  },
  {
    "text": "made lambda functions even more powerful over the next 16 minutes or so what we're gonna do is we're gonna take a",
    "start": "53789",
    "end": "59699"
  },
  {
    "text": "look at why it makes sense or what is the benefit of running applications at the edge whether whether it's either",
    "start": "59699",
    "end": "65610"
  },
  {
    "text": "extending your applications to the edge or running complete truly server less applications to the edge we'll take a",
    "start": "65610",
    "end": "72210"
  },
  {
    "text": "look at how lambda at the edge can help you with that so will is gonna walk you through several popular use cases he's",
    "start": "72210",
    "end": "79110"
  },
  {
    "text": "gonna share some code samples and it's gonna do a couple of demonstrations of how you can leverage lambda at the edge",
    "start": "79110",
    "end": "84990"
  },
  {
    "text": "for running an application at the edge and then we're excited to have Dale Adam",
    "start": "84990",
    "end": "90450"
  },
  {
    "text": "share the use case of how they have been helping their customers with real-time bot protection using lambda at the edge",
    "start": "90450",
    "end": "96650"
  },
  {
    "text": "so with that let's get started so this is the 300 level talk I'm assuming a lot",
    "start": "96650",
    "end": "102509"
  },
  {
    "text": "of you know what's our list services but let me just quickly go over it so Ovilus really means that you can run your code",
    "start": "102509",
    "end": "110040"
  },
  {
    "text": "without the need to set up servers configure provision or manage servers or",
    "start": "110040",
    "end": "115560"
  },
  {
    "text": "that is done for you by lambda so you just provide a piece of code that you won't execute it's even driven compute",
    "start": "115560",
    "end": "122610"
  },
  {
    "text": "model so you have to provide the code as well as the event or trigger for the function now lambda can scale",
    "start": "122610",
    "end": "129300"
  },
  {
    "text": "automatically so now you don't have to worry about about questions like do I have enough",
    "start": "129300",
    "end": "135209"
  },
  {
    "text": "capacity for the next six months do I need to set up more virtual machines or ec2 instances do I need to set up more",
    "start": "135209",
    "end": "142379"
  },
  {
    "text": "containers or that is abstracted away from mu because lambda the lambda can scale automatically in response to",
    "start": "142379",
    "end": "148950"
  },
  {
    "text": "requests you do not pay for cold or idle servers you are only charged for the resources you consume and finally there",
    "start": "148950",
    "end": "156299"
  },
  {
    "text": "it is that's building availability and fault tolerance meaning that you do not need to be distributing system experts",
    "start": "156299",
    "end": "161730"
  },
  {
    "text": "to make sure your applications run in a highly fault-tolerant manner and lambda",
    "start": "161730",
    "end": "169169"
  },
  {
    "text": "today is available in all Adobe's regions so as a customer of lambda you can select the region you want and you",
    "start": "169169",
    "end": "174959"
  },
  {
    "text": "can run your functions in the region you choose and that works perfectly fine for many of the use cases but imagine what",
    "start": "174959",
    "end": "182129"
  },
  {
    "text": "if you could take that to the next step right what if you could run your lambda functions at the edge so the edge in",
    "start": "182129",
    "end": "188849"
  },
  {
    "start": "186000",
    "end": "268000"
  },
  {
    "text": "this context refers to cloud flings global infrastructure the cloud front is",
    "start": "188849",
    "end": "194340"
  },
  {
    "text": "a CDN a content distribution network offering from AWS was launched in 2009",
    "start": "194340",
    "end": "199949"
  },
  {
    "text": "so it's been around for or sorry 2008 and of 2008 it's been around for close",
    "start": "199949",
    "end": "205109"
  },
  {
    "text": "to nine years now and over the years we have been adding new capabilities and features and also expanding its",
    "start": "205109",
    "end": "210689"
  },
  {
    "text": "infrastructure so today we have 107 points of presence so a point the",
    "start": "210689",
    "end": "216689"
  },
  {
    "text": "present can either be an edge location or a regional edge cache an edge location is essentially a global network",
    "start": "216689",
    "end": "223859"
  },
  {
    "text": "of data centers that CloudFront has and that uses to distribute the store and",
    "start": "223859",
    "end": "228989"
  },
  {
    "text": "distribute your content so if you're using cloud front to say serve your website for example cloud front to be",
    "start": "228989",
    "end": "235379"
  },
  {
    "text": "leveraging its global location to serve the content and similarly we have regional edge caches so regional edge",
    "start": "235379",
    "end": "242879"
  },
  {
    "text": "caches a mid tier cache that sits between an edge location and an origin and these are available to you at no",
    "start": "242879",
    "end": "249449"
  },
  {
    "text": "additional cost of the Cloud Print customer and the key difference here is that regional edge caches if you look at",
    "start": "249449",
    "end": "255479"
  },
  {
    "text": "the the map here are located in AWS regions meaning that we have a lot more",
    "start": "255479",
    "end": "261000"
  },
  {
    "text": "capacity which translate to better cache width and cache hit ratio for you if you are a cloud friend",
    "start": "261000",
    "end": "267440"
  },
  {
    "text": "so lambda the edge is really about running your lambda functions at CloudFront locations so now you are not",
    "start": "267440",
    "end": "274020"
  },
  {
    "start": "268000",
    "end": "281000"
  },
  {
    "text": "in one region but instead your functions are replicated across multiple aw",
    "start": "274020",
    "end": "279270"
  },
  {
    "text": "locations and all the benefits of lambda we talked about earlier are also",
    "start": "279270",
    "end": "285300"
  },
  {
    "start": "281000",
    "end": "338000"
  },
  {
    "text": "available with lambda at the edge because lambda the edge is nothing but an extension of aw is lambda but a key",
    "start": "285300",
    "end": "291560"
  },
  {
    "text": "benefit and key additional benefit you get is the global distribution so what",
    "start": "291560",
    "end": "297210"
  },
  {
    "text": "do I mean by global distribution right again the error based locations I have",
    "start": "297210",
    "end": "302430"
  },
  {
    "text": "here is not the full set it's just a subset of the location I have but for simplicity I just selected a few",
    "start": "302430",
    "end": "308160"
  },
  {
    "text": "locations it's essentially today the functions you write as part of lambda at the edge needs to be ordered in not",
    "start": "308160",
    "end": "314850"
  },
  {
    "text": "Virginia or US East one region and so it's the same experience as any regular",
    "start": "314850",
    "end": "320400"
  },
  {
    "text": "lambda functions you have the same capabilities but once you publish the version what happens is we automatically",
    "start": "320400",
    "end": "327180"
  },
  {
    "text": "and transparently replicate the function to multiple locations worldwide right so",
    "start": "327180",
    "end": "332490"
  },
  {
    "text": "what is it what is the benefit to you know get good your functions are now across the globe but how does it really help to answer that question let's take",
    "start": "332490",
    "end": "339150"
  },
  {
    "text": "a look at what a typical web application of web site is made of power right typically there is some sort of compute",
    "start": "339150",
    "end": "345480"
  },
  {
    "text": "it could be virtual machine like an ec2 instance it could be a container it could be a function there is some sort",
    "start": "345480",
    "end": "351690"
  },
  {
    "text": "of storage the storage again can be an s3 bucket if you are a website you would",
    "start": "351690",
    "end": "358200"
  },
  {
    "text": "probably put all your static content like images JavaScript HTML CSS or that",
    "start": "358200",
    "end": "364320"
  },
  {
    "text": "in every bucket it could be a file storage and then you have some sort of database whether it's relational or",
    "start": "364320",
    "end": "369450"
  },
  {
    "text": "non-relational so these are the three typical components that make up any application now what cloud front is",
    "start": "369450",
    "end": "376170"
  },
  {
    "text": "enabled you to do is move the storage so if you look at the the location there",
    "start": "376170",
    "end": "382320"
  },
  {
    "text": "you can see that storage icon it's pretty small sorry if you cannot read it but the point here is that your storage",
    "start": "382320",
    "end": "387360"
  },
  {
    "text": "just now be moved to multiple locations worldwide with CloudFront because your data is now cached at locations closer",
    "start": "387360",
    "end": "394260"
  },
  {
    "text": "to your viewers so in this scenario let's say you have your application",
    "start": "394260",
    "end": "399360"
  },
  {
    "text": "hosted in our region in us East one which is Virginia and you have users trying to",
    "start": "399360",
    "end": "405340"
  },
  {
    "text": "access your content from everywhere in the world so for a user who's trying to access your data from Australia for",
    "start": "405340",
    "end": "411640"
  },
  {
    "text": "example due to the fact that CloudFront caches the content closer to them the",
    "start": "411640",
    "end": "416650"
  },
  {
    "text": "request will automatically from that user would automatically get routed to a location in Australia meaning that the",
    "start": "416650",
    "end": "423010"
  },
  {
    "text": "request can be merely served back from Australia instead of back hauling it all the way back in the origin which could",
    "start": "423010",
    "end": "429250"
  },
  {
    "text": "be us so that is what CloudFront has enabled you right because a story just moved now what lambda th does is that",
    "start": "429250",
    "end": "435670"
  },
  {
    "text": "you can now move your compute to your Eid locations right so it's not the storage you can extend your compute",
    "start": "435670",
    "end": "442180"
  },
  {
    "text": "meaning that some parts of your application can now be at the locations",
    "start": "442180",
    "end": "447220"
  },
  {
    "text": "closer to the viewer so means that going back to the scenario I was talking about before let's say the same user who's in",
    "start": "447220",
    "end": "453040"
  },
  {
    "text": "Australia are trying to access or makes a request to your web site or web application let's say some sort of",
    "start": "453040",
    "end": "458710"
  },
  {
    "text": "dynamic content meaning that the request has to be there's some sort of compute that needs to run for the request to be",
    "start": "458710",
    "end": "464830"
  },
  {
    "text": "fulfilled with lambda at the edge being now globally distributed your compute can be closer to the user and the",
    "start": "464830",
    "end": "471310"
  },
  {
    "text": "request can be now served from a location that's closest to him or her and that means that if you want a",
    "start": "471310",
    "end": "477280"
  },
  {
    "text": "website owner or if you have application your end users are going to see great performance because the request is",
    "start": "477280",
    "end": "483700"
  },
  {
    "text": "served from a location that's approximately to him or her let's take a",
    "start": "483700",
    "end": "490000"
  },
  {
    "start": "488000",
    "end": "710000"
  },
  {
    "text": "look at the different CloudFront events so lambda is event-driven compute model",
    "start": "490000",
    "end": "495010"
  },
  {
    "text": "meaning there needs to be event or a trigger for your functions to execute with lambda at the edge the functions",
    "start": "495010",
    "end": "501100"
  },
  {
    "text": "that you run can have four CloudFront triggers or events but before we get",
    "start": "501100",
    "end": "507130"
  },
  {
    "text": "into that let's just take a look at this the picture here so on the left side you have your users they could be located",
    "start": "507130",
    "end": "513250"
  },
  {
    "text": "anywhere in the world on the right side it's your origin your origin could be in AWS like an s3 bucket or load balancer",
    "start": "513250",
    "end": "521080"
  },
  {
    "text": "or ec2 instance or it could also be your own it should be server running your",
    "start": "521080",
    "end": "526120"
  },
  {
    "text": "data center of code Safin is really agnostic to where the origin runs and in the middle you have",
    "start": "526120",
    "end": "531689"
  },
  {
    "text": "the CloudFront cash so when a user tries to access for simplicity here let's",
    "start": "531689",
    "end": "536850"
  },
  {
    "text": "assume you have a website you're trying to serve through CloudFront so when the user tries to access your website cloud",
    "start": "536850",
    "end": "542699"
  },
  {
    "text": "friend has latency based algorithms where it can automatically route the HTTP requests to the location that's",
    "start": "542699",
    "end": "548579"
  },
  {
    "text": "closest to the user and once they request lands in the cache if the data is already present it's called a cache",
    "start": "548579",
    "end": "554850"
  },
  {
    "text": "hit CloudFront can immediately serve the response back if the data is not present then cloud phone would fetch the data",
    "start": "554850",
    "end": "560610"
  },
  {
    "text": "from the origin you configure automatically and then it caches the content and sends the request back to the viewer so the next time the request",
    "start": "560610",
    "end": "567689"
  },
  {
    "text": "comes in it's gonna be a cache miss B cache hit because the data is cached now",
    "start": "567689",
    "end": "572970"
  },
  {
    "text": "this is a request respond floor a flow for a typical cloud friend request now let's see how let's look at the",
    "start": "572970",
    "end": "580800"
  },
  {
    "text": "different triggers or events for lambda functions that are part of lambda at the edge",
    "start": "580800",
    "end": "585899"
  },
  {
    "text": "the first one is viewer request so if you want to run some sort of computer some logic before the request does a",
    "start": "585899",
    "end": "593370"
  },
  {
    "text": "cache look up or before it hits the cache then viewer request is a right event or trigger point for you so for",
    "start": "593370",
    "end": "600689"
  },
  {
    "text": "example if you want to do some sort of cache key manipulation or let's say every time a request comes in you want",
    "start": "600689",
    "end": "605910"
  },
  {
    "text": "to make a call to your authentication server which is located maybe in a data center or somewhere else or you another",
    "start": "605910",
    "end": "612059"
  },
  {
    "text": "use case would be your serving premium payable content so each time a request comes in you want to check hey does this",
    "start": "612059",
    "end": "618000"
  },
  {
    "text": "user have permissions before to serve the content back so it could be any of these these are this subset of the use",
    "start": "618000",
    "end": "623339"
  },
  {
    "text": "cases but if you have these kind of use cases then via request is the right trigger for you then we have origin",
    "start": "623339",
    "end": "631290"
  },
  {
    "text": "request origin requests gets triggered right before the request is sent to the",
    "start": "631290",
    "end": "636329"
  },
  {
    "text": "origin in the case of a cache miss a popular example use case for that would",
    "start": "636329",
    "end": "642089"
  },
  {
    "text": "be URL rewrites so let's say before you send the request to the origin you probably want to manipulate the request",
    "start": "642089",
    "end": "648629"
  },
  {
    "text": "maybe rewrite the URL or insert a header you could use origin request for that",
    "start": "648629",
    "end": "655130"
  },
  {
    "text": "the next one is origin response this gets triggered right before the",
    "start": "655130",
    "end": "660400"
  },
  {
    "text": "sponsors cashed so let's say one example a common example we have seen as inserting security headers may be HSTs",
    "start": "660400",
    "end": "667330"
  },
  {
    "text": "header right you want to insert that header to the response you want to cache it so you can either do it at the origin",
    "start": "667330",
    "end": "673120"
  },
  {
    "text": "or you could do it the the origin response even using lambda at the edge and the last trigger or even here is",
    "start": "673120",
    "end": "682120"
  },
  {
    "text": "viewer response this gets triggered right before we send the response back and to back to the user so you can use",
    "start": "682120",
    "end": "689410"
  },
  {
    "text": "you can set up your CloudFront distribution you can hook your lambda functions to one or all of these four",
    "start": "689410",
    "end": "694450"
  },
  {
    "text": "events that is that or that is available to you today and will during this",
    "start": "694450",
    "end": "700090"
  },
  {
    "text": "section is going to walk you through more real-world examples it's going to share some code samples of how you can",
    "start": "700090",
    "end": "705700"
  },
  {
    "text": "actually make use of each of these events so let's take a look at some of",
    "start": "705700",
    "end": "712690"
  },
  {
    "start": "710000",
    "end": "728000"
  },
  {
    "text": "the key capabilities of lambda at the edge the first one is complete response generation at the edge meaning that you",
    "start": "712690",
    "end": "719350"
  },
  {
    "text": "can do full HTTP body generation at the edge without the need to go back to an",
    "start": "719350",
    "end": "724450"
  },
  {
    "text": "Origin server and we have enhanced on that last week we made a bunch of",
    "start": "724450",
    "end": "729970"
  },
  {
    "start": "728000",
    "end": "946000"
  },
  {
    "text": "announcements for example now you can do your lambda functions can support binary",
    "start": "729970",
    "end": "735490"
  },
  {
    "text": "data so a common use case there is image manipulation on the fly we've heard customers who say that when a request",
    "start": "735490",
    "end": "741970"
  },
  {
    "text": "comes in they want to look take a look at the user agent header depending on the end-user device type they probably",
    "start": "741970",
    "end": "747220"
  },
  {
    "text": "want to serve a smaller a compressed version of the image or serve different versions of the image and now with",
    "start": "747220",
    "end": "753610"
  },
  {
    "text": "support for binary you can actually do the image cropping or image manipulation image compression on the fly directly at",
    "start": "753610",
    "end": "760270"
  },
  {
    "text": "an edge location closer to the viewer instead of sending the request all the way back to the origin we support larger",
    "start": "760270",
    "end": "766360"
  },
  {
    "text": "lambda functions now we can go up before it used to be 128 megabytes that was",
    "start": "766360",
    "end": "771370"
  },
  {
    "text": "only function size we supported but now we can support much larger there are larger limits there we support large or",
    "start": "771370",
    "end": "778930"
  },
  {
    "text": "HTTP response so these are responses that you create directly at the edge for the origin events we support up to one",
    "start": "778930",
    "end": "785770"
  },
  {
    "text": "megabyte larger deployment packages and longer I'm out all these limits are in our documentation if you want to take a look",
    "start": "785770",
    "end": "791470"
  },
  {
    "text": "at them after decision they are available for you're available for you there the next unique capability is the",
    "start": "791470",
    "end": "799899"
  },
  {
    "text": "ability to make Network calls meaning your lambda functions closer at the locations that are close to the viewers",
    "start": "799899",
    "end": "806200"
  },
  {
    "text": "can actually make a network call to any HTTP endpoint this doesn't have to be an AWS it can be your own authentication it",
    "start": "806200",
    "end": "813399"
  },
  {
    "text": "can be your own servers now we use the support we support it's still support or from launch we support for the origin",
    "start": "813399",
    "end": "821230"
  },
  {
    "text": "events meaning origin request an origin response and we have an improved on that now you can actually make or make",
    "start": "821230",
    "end": "829269"
  },
  {
    "text": "Network call from the viewer facing events and Benjamin is going to talk about how their use case is leveraging",
    "start": "829269",
    "end": "835480"
  },
  {
    "text": "that and finally we announce content based routing last week meaning that now",
    "start": "835480",
    "end": "842170"
  },
  {
    "text": "you can do layer 7 request routing you can take a look at the HTTP requests you",
    "start": "842170",
    "end": "847510"
  },
  {
    "text": "can look at the headers if you want you can look at the query string parameters you can look at the cookies and based on",
    "start": "847510",
    "end": "853180"
  },
  {
    "text": "that you can decide to send the request to any origin any dynamic origin at that point of time it's a common use case for",
    "start": "853180",
    "end": "859420"
  },
  {
    "text": "that would be let's say you have a multiple origin or multiple data center set up spread across multiple geographies and you want to make sure",
    "start": "859420",
    "end": "866110"
  },
  {
    "text": "all users who are coming in from us are sent to your data center in the u.s. your users from let's say Europe you",
    "start": "866110",
    "end": "872230"
  },
  {
    "text": "want to send them to another origin you have in Europe so you can do those kind of proxy dream approximately based",
    "start": "872230",
    "end": "878320"
  },
  {
    "text": "routing using lambda the edge with content based routing another popular example there is on how to handle web",
    "start": "878320",
    "end": "886870"
  },
  {
    "text": "crawlers we have heard from customers who have a separate origin or it could even be a third-party service who's",
    "start": "886870",
    "end": "892810"
  },
  {
    "text": "serving a pre-rendered version of the website with a search engine optimized and for the regular users they want to",
    "start": "892810",
    "end": "898600"
  },
  {
    "text": "send to another origin so now with content based routing what you can do is you can inspect it could be user agent",
    "start": "898600",
    "end": "903760"
  },
  {
    "text": "now you can take a look at the requests at any request property and then decide if it's a web crawler I'm going to send",
    "start": "903760",
    "end": "909279"
  },
  {
    "text": "him to this origin if he's a regular user I'm gonna send him to me at my other origin and another popular example",
    "start": "909279",
    "end": "914350"
  },
  {
    "text": "is on Bluegreen deployments and a/b testing so now you can have multiple versions you could have of your",
    "start": "914350",
    "end": "920709"
  },
  {
    "text": "application running a different origin and you can use carbon-based routings as a request comes in you could probably take a look at a cookie if the cookie is",
    "start": "920709",
    "end": "927250"
  },
  {
    "text": "not said there's a request coming in for the first time you can based on the logic you have you can send it to either",
    "start": "927250",
    "end": "933010"
  },
  {
    "text": "one of the origins and you can set a cookie so that subsequent times or subsequent requests are now router to the right origin based on the cuckoo",
    "start": "933010",
    "end": "939340"
  },
  {
    "text": "cookie I've said before these are some of the key capabilities that I want to call out today on lamda the edge with",
    "start": "939340",
    "end": "947320"
  },
  {
    "start": "946000",
    "end": "1013000"
  },
  {
    "text": "that let me hand it over to will is going to walk you through some real popular use cases of how you can",
    "start": "947320",
    "end": "952780"
  },
  {
    "text": "leverage lamda at the edge for solving some of these challenges thank you George",
    "start": "952780",
    "end": "959190"
  },
  {
    "text": "so let's talk use cases am I am I on cool so let's talk to use cases if",
    "start": "963360",
    "end": "972610"
  },
  {
    "text": "you're looking at a typical model with a web application you have your end users accessing you know an elastic load balancer hitting your back-end servers",
    "start": "972610",
    "end": "980190"
  },
  {
    "text": "usually hitting some sort of cache for persistence some sort of object or file store for user uploads and assets and",
    "start": "980190",
    "end": "986770"
  },
  {
    "text": "other content you know it's some sort of database you know the system of record for persistence and you're implementing",
    "start": "986770",
    "end": "992080"
  },
  {
    "text": "you know all sorts of functions across your different applications yeah but that are in common your authentication",
    "start": "992080",
    "end": "997840"
  },
  {
    "text": "and authorization content management in processing how do I handle user uploads how do I bring code images how do I",
    "start": "997840",
    "end": "1004200"
  },
  {
    "text": "resize images etc or localization internationalization personalization you know how do I respond differently",
    "start": "1004200",
    "end": "1010710"
  },
  {
    "text": "depending on the user what the context is and in the monolithic application though this is all baked into your code",
    "start": "1010710",
    "end": "1016410"
  },
  {
    "start": "1013000",
    "end": "1037000"
  },
  {
    "text": "if you're using a certain authentication mechanism you're going to use the same library you know in the same language",
    "start": "1016410",
    "end": "1023070"
  },
  {
    "text": "but you're in a need a different library for a different language you're going to need to you know tailor depending on each application and so they could be a",
    "start": "1023070",
    "end": "1029640"
  },
  {
    "text": "lot of redundant code across your various model attic applications so as a",
    "start": "1029640",
    "end": "1034829"
  },
  {
    "text": "result we see a lot of customers migrating to micro services and I want to talk a little bit about how you can use lambda edged implement some of those",
    "start": "1034830",
    "end": "1040770"
  },
  {
    "start": "1037000",
    "end": "1056000"
  },
  {
    "text": "micro services you know how do you implement authentication authorization at the edge how do I offload some of my",
    "start": "1040770",
    "end": "1046350"
  },
  {
    "text": "content management and processing or take that out of my application and move it closer to the edge or how do i you",
    "start": "1046350",
    "end": "1051480"
  },
  {
    "text": "know localize internationalized personalized content for my end-users so it storix mention there's four hooks",
    "start": "1051480",
    "end": "1058370"
  },
  {
    "start": "1056000",
    "end": "1068000"
  },
  {
    "text": "where you can insert a lambda function in the request/response lifecycle for lambda edge the first one I want to talk",
    "start": "1058370",
    "end": "1065250"
  },
  {
    "text": "about just going in order is viewer request just to recap really quick if your request is executed on every request",
    "start": "1065250",
    "end": "1071220"
  },
  {
    "start": "1068000",
    "end": "1101000"
  },
  {
    "text": "before cloud friends cache is checked in this request you can modify the",
    "start": "1071220",
    "end": "1076700"
  },
  {
    "text": "parameters that will be used for the cache key so this is your URL this is your cookies headers query strings you",
    "start": "1076700",
    "end": "1083010"
  },
  {
    "text": "can perform authentication authorization checks you know this is going to be executed on every request regardless of whether or not it's a cache hit or miss",
    "start": "1083010",
    "end": "1089060"
  },
  {
    "text": "you could make external Network calls this is a new feature and you can generate responses directly to the end",
    "start": "1089060",
    "end": "1095190"
  },
  {
    "text": "user that will not be cached these are personal to the end user it is all occurring before the cache so one common",
    "start": "1095190",
    "end": "1101400"
  },
  {
    "start": "1101000",
    "end": "1138000"
  },
  {
    "text": "example is what if I want to do stateless authentication you know I have my user agent typically you'll have some",
    "start": "1101400",
    "end": "1107250"
  },
  {
    "text": "sort of identity provider in this case the user is going to present some sort of credential and get back a JSON web token in response and so I'm going to",
    "start": "1107250",
    "end": "1114060"
  },
  {
    "text": "pass this JWT to my cloud foreign distribution cloud front configured normally we can pass that JWT right",
    "start": "1114060",
    "end": "1119400"
  },
  {
    "text": "along the origin application will then use the public key to evaluated and then make an access decision what if I have",
    "start": "1119400",
    "end": "1125250"
  },
  {
    "text": "another origin or I have a legacy application that doesn't support j2 BT off or I have an s3 bucket you know I",
    "start": "1125250",
    "end": "1131100"
  },
  {
    "text": "could use sign cookies but maybe I just want to use the same JDBC for all their all that how do I get to an access decision here I can actually do that by",
    "start": "1131100",
    "end": "1138390"
  },
  {
    "start": "1138000",
    "end": "1152000"
  },
  {
    "text": "you're taking advantage of some of the extensibility and JWT so in this case",
    "start": "1138390",
    "end": "1143640"
  },
  {
    "text": "I've just added some private claims making an asset for making an asset access dishes decision that will be",
    "start": "1143640",
    "end": "1150030"
  },
  {
    "text": "evaluated at the edge and now instead of passing that right along to the origin",
    "start": "1150030",
    "end": "1155580"
  },
  {
    "start": "1152000",
    "end": "1171000"
  },
  {
    "text": "we're first going to hook into a viewer-request event your request event has the copy of the public key it takes",
    "start": "1155580",
    "end": "1161730"
  },
  {
    "text": "the JWT pass along in the header makes an access decision then either forwards it to the correct origin or returns a",
    "start": "1161730",
    "end": "1168150"
  },
  {
    "text": "correct error message with and now with the ability to make external Network",
    "start": "1168150",
    "end": "1174180"
  },
  {
    "start": "1171000",
    "end": "1188000"
  },
  {
    "text": "calls from viewer requests events I can actually implement stateful off now so this is actually very useful if you're saying you know web publisher that has",
    "start": "1174180",
    "end": "1180840"
  },
  {
    "text": "you know some sort of external entitlement service that's going to determine whether or not a given cookie or session ID has access to a given",
    "start": "1180840",
    "end": "1187050"
  },
  {
    "text": "piece of content so here we're just going to invoke our cloud friend just invoke our viewer request event from a cloud front",
    "start": "1187050",
    "end": "1192620"
  },
  {
    "text": "distribution you know assume we're passing in a cookie or something to make an HTTP request out to our entitlement",
    "start": "1192620",
    "end": "1197780"
  },
  {
    "text": "service we're gonna come to an access this isn't there then either board that",
    "start": "1197780",
    "end": "1203000"
  },
  {
    "text": "on to the origin or you know return a custom response this could be a you know 403 or redirect to your identity",
    "start": "1203000",
    "end": "1209000"
  },
  {
    "text": "provider or it could be something custom like a paywall message you know please please login please subscribe to our",
    "start": "1209000",
    "end": "1214400"
  },
  {
    "text": "service you know you can push this out particular if you have a lot of different origins you know if you're a publisher you may have different",
    "start": "1214400",
    "end": "1219470"
  },
  {
    "text": "properties different verticals different CMS's you know you can now factor all this out into land at the edge move on",
    "start": "1219470",
    "end": "1228140"
  },
  {
    "start": "1227000",
    "end": "1246000"
  },
  {
    "text": "to the next set of use cases origin requests events we got quite a few for these so just to recap an origin request",
    "start": "1228140",
    "end": "1234470"
  },
  {
    "text": "event occurs after the cache is checked since it's only gonna be on cache miss and before you hit the origin but you",
    "start": "1234470",
    "end": "1241340"
  },
  {
    "text": "also have the ability to bypass the origin altogether and return a custom response again devalue mate on cache",
    "start": "1241340",
    "end": "1248420"
  },
  {
    "text": "miss you can make one or more external network calls within your time limit you",
    "start": "1248420",
    "end": "1253490"
  },
  {
    "text": "can dynamically select an origin based on request headers this should actually say new new feature you can implement",
    "start": "1253490",
    "end": "1259550"
  },
  {
    "text": "pretty URLs say you want to create a single logical URL scheme and then you",
    "start": "1259550",
    "end": "1264590"
  },
  {
    "text": "know feed that out to more no more legacy origins where you can't modify the URL you can rewrite your URL there",
    "start": "1264590",
    "end": "1269690"
  },
  {
    "text": "and the big thing is generate responses that can be cached the cache key is going to be based on the request URL not",
    "start": "1269690",
    "end": "1276140"
  },
  {
    "text": "the URL you eventually rewrite it to and you can also generate responses costs in a custom way that will be cached one",
    "start": "1276140",
    "end": "1284660"
  },
  {
    "text": "quick and dirty example of this is you know just being able to synthesize an entire HTTP response body so in this",
    "start": "1284660",
    "end": "1291020"
  },
  {
    "text": "case I've just got a simple mustache template and then you know combine that with a JSON object from you know",
    "start": "1291020",
    "end": "1297710"
  },
  {
    "text": "database like MongoDB or Dino DV your application combine that into a single",
    "start": "1297710",
    "end": "1302929"
  },
  {
    "text": "page really simply just go in your cache behavior is going to hook into an origin",
    "start": "1302929",
    "end": "1309170"
  },
  {
    "start": "1305000",
    "end": "1324000"
  },
  {
    "text": "request event I'm gonna make an ex external Network call to an s3 bucket",
    "start": "1309170",
    "end": "1314230"
  },
  {
    "text": "big an external network call to a diner a DB table then return the render template which can then be cached for",
    "start": "1314230",
    "end": "1321120"
  },
  {
    "text": "subsequent requests and just a really quick example of what the code for this",
    "start": "1321120",
    "end": "1326940"
  },
  {
    "start": "1324000",
    "end": "1365000"
  },
  {
    "text": "looks like you know here we you know set up our constants are you know s3 bucket",
    "start": "1326940",
    "end": "1332070"
  },
  {
    "text": "with our templates in it are anyway DB table with our blog posts in it I mean require our libraries we're using",
    "start": "1332070",
    "end": "1339030"
  },
  {
    "text": "mustache for templating you know connect our creator handlers for us three of DynamoDB I sort of create the skeleton",
    "start": "1339030",
    "end": "1347820"
  },
  {
    "text": "for our response then we're going to make a call to dynamo DB identify the template ID that we ordered the template",
    "start": "1347820",
    "end": "1354809"
  },
  {
    "text": "file name that we'd like to pull out and then actually call the template to pull",
    "start": "1354809",
    "end": "1361050"
  },
  {
    "text": "the template from s3 execute the mustache template with the content we just do a really quick demo you're here",
    "start": "1361050",
    "end": "1373260"
  },
  {
    "start": "1365000",
    "end": "1442000"
  },
  {
    "text": "again this is the code it's similar code that what I just demonstrated and here's a little bit more filled out template",
    "start": "1373260",
    "end": "1379410"
  },
  {
    "text": "this case we're just pulling out title and date we just want to inline the post here I've got some CSS to style it a",
    "start": "1379410",
    "end": "1385230"
  },
  {
    "text": "really simple blogging engine using dynamo DB as our back-end so in this",
    "start": "1385230",
    "end": "1391110"
  },
  {
    "text": "case I've just got hello world our paragraph have a couple a to do that's",
    "start": "1391110",
    "end": "1396540"
  },
  {
    "text": "what's new posts in here so we just try it go to my cloud front console get my",
    "start": "1396540",
    "end": "1404300"
  },
  {
    "text": "demo URL hello - world",
    "start": "1404300",
    "end": "1409850"
  },
  {
    "text": "shrim connected to you Nanette there we go Oh world now now we're generating custom HTTP responses from",
    "start": "1412730",
    "end": "1418920"
  },
  {
    "text": "lammed at the edge they pull in a little bigger piece here",
    "start": "1418920",
    "end": "1425059"
  },
  {
    "text": "and so all this is being generated at the edge for the purpose of this demo I'm not caching it but you would",
    "start": "1430520",
    "end": "1435540"
  },
  {
    "text": "obviously want to set cache control headers when you do this for real there",
    "start": "1435540",
    "end": "1443070"
  },
  {
    "start": "1442000",
    "end": "1485000"
  },
  {
    "text": "are some other things I might want to do I can create pretty URLs for a consistent user API experience one",
    "start": "1443070",
    "end": "1448830"
  },
  {
    "text": "example of this that came up recently was map tiles there's a fairly standard",
    "start": "1448830",
    "end": "1454410"
  },
  {
    "text": "way to you know create a standard URL scheme for map tiles but you want to decouple it from the way you're probably",
    "start": "1454410",
    "end": "1460110"
  },
  {
    "text": "storing or generating those tiles on the backend you want to present this to your end user but then you might have different origins you might have one or",
    "start": "1460110",
    "end": "1466470"
  },
  {
    "text": "more s3 buckets for different versions of your tiles you might have a legacy service that generates these an elastic",
    "start": "1466470",
    "end": "1471840"
  },
  {
    "text": "load balancer maybe you have different origins for different parts of the world for whatever reason you know but you",
    "start": "1471840",
    "end": "1477270"
  },
  {
    "text": "always want to present that unified interface to the end-user without having to you know make changes to your origin if that's going to be painful or",
    "start": "1477270",
    "end": "1483030"
  },
  {
    "text": "difficult for you to do here's an example so I just want to in this case I'm storing all of my tiles in s3 as",
    "start": "1483030",
    "end": "1490309"
  },
  {
    "start": "1485000",
    "end": "1599000"
  },
  {
    "text": "sha-256 versions of the URL URL path this allows me to a get more concurrent",
    "start": "1490309",
    "end": "1495840"
  },
  {
    "text": "rights test3 when I'm generating new tiles but I want it to be cached at the URL if the user is presenting so in this",
    "start": "1495840",
    "end": "1502200"
  },
  {
    "text": "case we respond from the cloud rip we rewrite the URL to make the origin request cloud front caches the response",
    "start": "1502200",
    "end": "1508530"
  },
  {
    "text": "under the requested key and then the user never sees the backend similarly we",
    "start": "1508530",
    "end": "1516059"
  },
  {
    "text": "can also use an Origin request to do custom image processing if you're using a CMS or an e-commerce website you have",
    "start": "1516059",
    "end": "1522120"
  },
  {
    "text": "you often need to get the same image with different thumbnail sizes without having to pre generate them so in this",
    "start": "1522120",
    "end": "1527820"
  },
  {
    "text": "case we can build a architecture using origin request events to you know try to",
    "start": "1527820",
    "end": "1533490"
  },
  {
    "text": "find something from an existing s3 bucket maybe we don't find it we in that case use api gateway to invoke another",
    "start": "1533490",
    "end": "1539280"
  },
  {
    "text": "lambda function this is going to pull the image originals from that s3 bucket you know actually execute that resize",
    "start": "1539280",
    "end": "1545070"
  },
  {
    "text": "re-encoding operation put it in the root it in the s3 bucket for thumbnails for",
    "start": "1545070",
    "end": "1550410"
  },
  {
    "text": "later use and then return that to the original request",
    "start": "1550410",
    "end": "1555860"
  },
  {
    "text": "we're imagine for a second that you're a SAS provider so he obviously are you know I'm operating a single endpoint at",
    "start": "1555860",
    "end": "1563299"
  },
  {
    "text": "example.com and let's say I'm currently deployed in a single region you know all my customers are customers in region a",
    "start": "1563299",
    "end": "1569570"
  },
  {
    "text": "and they're going to my deployment in region a but as a when it would span worldwide how do i you know deploy in",
    "start": "1569570",
    "end": "1575450"
  },
  {
    "text": "another region you know have my customers from region b go to that region but i want to make that transparent you know i don't want to",
    "start": "1575450",
    "end": "1581179"
  },
  {
    "text": "have to redirect them or i want to be able to load balanced maybe across different regions the united states you know i can now use a content based",
    "start": "1581179",
    "end": "1589159"
  },
  {
    "text": "routing in an origin request event to inspect the actual request and get an idea of what you know where this user",
    "start": "1589159",
    "end": "1595999"
  },
  {
    "text": "belongs and then push them all onto the right origin so for an example if I start my SAS business out of us East one",
    "start": "1595999",
    "end": "1602239"
  },
  {
    "text": "you know that's gonna be you know give me pretty good performance the United States you know not so good in Europe",
    "start": "1602239",
    "end": "1608330"
  },
  {
    "text": "and particularly in Asia you know maybe neck my next step is to move all of my customers to the Europe",
    "start": "1608330",
    "end": "1614749"
  },
  {
    "text": "region I spun up and then from there penis you know crisp it up another one in Japan and then all the way down under",
    "start": "1614749",
    "end": "1621409"
  },
  {
    "text": "you know bring them into their own region and now everyone has talking to a local version of the SAS SAS service with their own data located in their own",
    "start": "1621409",
    "end": "1627769"
  },
  {
    "text": "country so how do I do this you know if I'm looking at the login flow for my SAS application you know I",
    "start": "1627769",
    "end": "1634940"
  },
  {
    "start": "1629000",
    "end": "1712000"
  },
  {
    "text": "have a user database that's going to you know determine you know what where my user what accounts many users belong to",
    "start": "1634940",
    "end": "1641269"
  },
  {
    "text": "you know authenticate them if their passwords in this case Jane is going to login we're gonna return 200 okay so I'm",
    "start": "1641269",
    "end": "1648139"
  },
  {
    "text": "gonna do is take my user database and add a column to it with their home region this case I've deployed to three regions and then when Jane logs in we",
    "start": "1648139",
    "end": "1655159"
  },
  {
    "text": "now know okay Jane you belong in Europe so we're gonna set that cookie when she first logs into EU and so now on",
    "start": "1655159",
    "end": "1662450"
  },
  {
    "text": "subsequent requests connect to you the distribution you know in this case we're",
    "start": "1662450",
    "end": "1668299"
  },
  {
    "text": "still keeping our user database in our home region or our original region and all of our login requests are going to",
    "start": "1668299",
    "end": "1673879"
  },
  {
    "text": "go back to that home region you're not gonna hit the login page very often if it's a little slow worldwide and that's okay and then when they log in we're",
    "start": "1673879",
    "end": "1680840"
  },
  {
    "text": "going to set the cookie and then on all subsequent requests as a logged in user they were Chandra quest event will be",
    "start": "1680840",
    "end": "1687470"
  },
  {
    "text": "invoked and then make a decision on which origin to send the user to they're based in North America we're gonna go to North American origin",
    "start": "1687470",
    "end": "1693529"
  },
  {
    "text": "where they have you know customer data in their database maybe they're in Europe maybe they're in your Pacific so this is",
    "start": "1693529",
    "end": "1700970"
  },
  {
    "text": "very useful particularly for you know distributing your customers across multiple regions being able to make that",
    "start": "1700970",
    "end": "1707390"
  },
  {
    "text": "change transparently in a way that's not necessarily going to break their experience as George mentioned earlier",
    "start": "1707390",
    "end": "1714440"
  },
  {
    "start": "1712000",
    "end": "1725000"
  },
  {
    "text": "there's other use cases routing based on user agent you might have different origins for your you know mobile web",
    "start": "1714440",
    "end": "1721340"
  },
  {
    "text": "sites you might have different origins for your search engines etc or you might wonder if generate a redirect for the",
    "start": "1721340",
    "end": "1727340"
  },
  {
    "start": "1725000",
    "end": "1756000"
  },
  {
    "text": "purposes of internationalization so if you you know inspect the accept language header or the conference user your",
    "start": "1727340",
    "end": "1732649"
  },
  {
    "text": "country header and maybe we know in this case that this user is going to be you know going to prefer to the German",
    "start": "1732649",
    "end": "1737870"
  },
  {
    "text": "version of the web site so let's go ahead and send a redirect to Germany and then maybe they decide to override that",
    "start": "1737870",
    "end": "1743000"
  },
  {
    "text": "you know I'm bon vacation in Germany and all of a sudden the whole insta whole Internet's in German you know if I click on English I want to set a cookie so",
    "start": "1743000",
    "end": "1749059"
  },
  {
    "text": "that subsequently all of my requests are going to be forwarded to the know English origin here's an example of the",
    "start": "1749059",
    "end": "1758240"
  },
  {
    "text": "the code you'd use to do this in this case we're doing something different we were setting up in the request actually",
    "start": "1758240",
    "end": "1764659"
  },
  {
    "text": "weird quest object there is a new a new field that appeared a few days ago for",
    "start": "1764659",
    "end": "1771260"
  },
  {
    "text": "the you for the origin so you can go and you can set that to either customer s 3 in this case we're just going to reset",
    "start": "1771260",
    "end": "1779269"
  },
  {
    "text": "the domain name to the domain name of the origin we've selected and we just have sort of a stub choose origin function there let me do a demonstration",
    "start": "1779269",
    "end": "1786559"
  },
  {
    "text": "real quick",
    "start": "1786559",
    "end": "1789190"
  },
  {
    "text": "so I've set up three origins you can sort of see the text there US East one",
    "start": "1792190",
    "end": "1798220"
  },
  {
    "text": "AP North East one EU West one each of these you just go there is gonna tell",
    "start": "1798220",
    "end": "1804020"
  },
  {
    "text": "you you I'm logged into the Japan region I'm logged in for Europe region and I have the cloud for distribution and if I",
    "start": "1804020",
    "end": "1813500"
  },
  {
    "text": "just go to the root of that it's going to see that I've not authenticated it's gonna ask me to choose my preferred",
    "start": "1813500",
    "end": "1818810"
  },
  {
    "text": "origin so in this case I'd like my preferred origin to be Europe we push this in here I know on subsequent",
    "start": "1818810",
    "end": "1826310"
  },
  {
    "text": "requests instead of being redirected back to choose I'm being you know being sent that you are logged into Europe message in this case I know it's hard to",
    "start": "1826310",
    "end": "1833210"
  },
  {
    "text": "see I try to figure out how to make this bigger but we've now set the cookie the region cookie to EU s Duan so I can go",
    "start": "1833210",
    "end": "1839090"
  },
  {
    "text": "ahead and clear that cookie out and you'll log out then go in hit Japan you",
    "start": "1839090",
    "end": "1846950"
  },
  {
    "text": "know even if I open up in your window Japan it's obviously my new preferred origin so I've just implement this",
    "start": "1846950",
    "end": "1854000"
  },
  {
    "text": "fairly simply on the back end on each origin I have a simple flask application",
    "start": "1854000",
    "end": "1859060"
  },
  {
    "text": "you know we're just looking into the you know index here you know we're going to",
    "start": "1859060",
    "end": "1864230"
  },
  {
    "text": "say you know return you know you are located in the you know XYZ region and then we implement two resources here for",
    "start": "1864230",
    "end": "1872180"
  },
  {
    "text": "choose you know on the on the get we're just going to prompt them with the form",
    "start": "1872180",
    "end": "1877820"
  },
  {
    "text": "to change their preferred region and on post we're gonna set that cookie to region and in the lambda function have",
    "start": "1877820",
    "end": "1884420"
  },
  {
    "text": "some helper functions here but the big thing is we get the request URI if it's",
    "start": "1884420",
    "end": "1889640"
  },
  {
    "text": "you know slash choose then we just go ahead and pass that request through yeah we want to know a lot of user to change their region if not we're gonna check to",
    "start": "1889640",
    "end": "1897560"
  },
  {
    "text": "see you know were we able to parse you know where we Ola parse the cookies was the rate was the region cookie said in",
    "start": "1897560",
    "end": "1903290"
  },
  {
    "text": "this case we're actually going to directly override the origin object I'm",
    "start": "1903290",
    "end": "1910310"
  },
  {
    "text": "using the parts cookie and then I'm just constructing a URL directly out of that so you'd want to do something more",
    "start": "1910310",
    "end": "1915860"
  },
  {
    "text": "complex with you for a typical SAS application but this is a good demo for to get a feel for how it works",
    "start": "1915860",
    "end": "1922029"
  },
  {
    "start": "1928000",
    "end": "1944000"
  },
  {
    "text": "moving on along we have origin response events so we've now you know in origin response",
    "start": "1928129",
    "end": "1935250"
  },
  {
    "text": "event we've you know the viewer request has come in we've you know definitely had a cache miss we've made a request of",
    "start": "1935250",
    "end": "1941759"
  },
  {
    "text": "the origin and then that origin response has been returned it's executed on cache miss in here we can make external",
    "start": "1941759",
    "end": "1948629"
  },
  {
    "start": "1944000",
    "end": "1971000"
  },
  {
    "text": "network calls and we can modify the response headers prior to caching so this is a good place to do all of your",
    "start": "1948629",
    "end": "1955529"
  },
  {
    "text": "origin fix up stop maybe you're trying to standardize the cache headers from an origin that you can't really control or",
    "start": "1955529",
    "end": "1961019"
  },
  {
    "text": "maybe you're trying to you know piece together a coherent application for multiple different origins if you need to rewrite the headers for any reason",
    "start": "1961019",
    "end": "1966960"
  },
  {
    "text": "you know you know fix content type etc this is the place to do it one common",
    "start": "1966960",
    "end": "1972539"
  },
  {
    "start": "1971000",
    "end": "1994000"
  },
  {
    "text": "use case is we hear from customers that they'd like to set HTTP security headers across all of their different",
    "start": "1972539",
    "end": "1977850"
  },
  {
    "text": "applications and some of them are legacy there are different teams it's not always it's not always easier trivial to",
    "start": "1977850",
    "end": "1983700"
  },
  {
    "text": "find all of your different dependencies and you know modify the headers that they're writing out so in this case we can just write away in a function that",
    "start": "1983700",
    "end": "1989190"
  },
  {
    "text": "says I want to set start transport security you know we're all on HTTPS we",
    "start": "1989190",
    "end": "1994830"
  },
  {
    "start": "1994000",
    "end": "2006000"
  },
  {
    "text": "could also do this for other headers so I mentioned cache control content security policy is another big one that's gonna be the primary use case for",
    "start": "1994830",
    "end": "2001070"
  },
  {
    "text": "origin response again we also have",
    "start": "2001070",
    "end": "2007700"
  },
  {
    "start": "2006000",
    "end": "2021000"
  },
  {
    "text": "viewer response events so a viewer responds this is going to be after a you",
    "start": "2007700",
    "end": "2014240"
  },
  {
    "text": "know after we've returned from the origin and we've you know cached the response or after a response has been returned from the cache so this is",
    "start": "2014240",
    "end": "2021769"
  },
  {
    "start": "2021000",
    "end": "2043000"
  },
  {
    "text": "primarily useful because it's executed on all requests after the responses received from the origin or cache we can",
    "start": "2021769",
    "end": "2029210"
  },
  {
    "text": "modify the response headers without caching the results so this is going to be for you know content personalization you know whatever response we generate",
    "start": "2029210",
    "end": "2035539"
  },
  {
    "text": "here or whatever headers we fix here are going to be unique to that end user we",
    "start": "2035539",
    "end": "2040879"
  },
  {
    "text": "can also make external Network calls here the primary use cases we're going to want to set user cookies for you know",
    "start": "2040879",
    "end": "2046429"
  },
  {
    "text": "various reasons you know maybe we just want to you know assign a unique identifier tend users that we in our",
    "start": "2046429",
    "end": "2051618"
  },
  {
    "text": "analytics we can track you know unique engagements or maybe I want to",
    "start": "2051619",
    "end": "2058099"
  },
  {
    "text": "you know sort my group users up into different groups for a/b testing in that case are your response event you have",
    "start": "2058099",
    "end": "2064638"
  },
  {
    "text": "checks the CloudFront cash you know on cash mister a in a return response you're going to invoke it and in this",
    "start": "2064639",
    "end": "2071179"
  },
  {
    "text": "case all we're doing is we're generating a UID v4 and then setting that in the user cookie you know again you can set",
    "start": "2071179",
    "end": "2077059"
  },
  {
    "text": "different cookies you could set various headers there depending on your application but this is going to be unique to the end user and invoked on",
    "start": "2077059",
    "end": "2082549"
  },
  {
    "text": "every request so those are some of the primary use cases we've seen and heard",
    "start": "2082549",
    "end": "2089089"
  },
  {
    "text": "about now I want to talk about very important use case and you give the",
    "start": "2089089",
    "end": "2094999"
  },
  {
    "text": "floor over to Benjamin from data dome hi",
    "start": "2094999",
    "end": "2107589"
  },
  {
    "text": "can you hear me yeah I'm very glad to be here today we are going to talk about",
    "start": "2107589",
    "end": "2113329"
  },
  {
    "text": "bot protection and how we moved it to the edge I'm Benjamin data I'm",
    "start": "2113329",
    "end": "2119960"
  },
  {
    "text": "co-founder and CTO you're here to discover a use case on how to integrate",
    "start": "2119960",
    "end": "2125359"
  },
  {
    "text": "lamda at the edge inside your architecture and by the way I'm from Paris but you probably notice that this",
    "start": "2125359",
    "end": "2134239"
  },
  {
    "text": "is an expert conference so I guess you expect some cut and some architecture design that's what we are going to see",
    "start": "2134239",
    "end": "2140839"
  },
  {
    "text": "in a minute but let's start with some context so what is days Adam date Adam",
    "start": "2140839",
    "end": "2148549"
  },
  {
    "text": "is an intelligent data protection for websites and ap is protect from what",
    "start": "2148549",
    "end": "2156039"
  },
  {
    "text": "from the bot activity as you are expert you may know some what is the robot",
    "start": "2156039",
    "end": "2162019"
  },
  {
    "text": "robot are some small software that's called the Internet to either scrap the",
    "start": "2162019",
    "end": "2168170"
  },
  {
    "text": "content try to inject SQL or to AK",
    "start": "2168170",
    "end": "2173839"
  },
  {
    "text": "websites our job is to protect websites and api's from this bot activity how do",
    "start": "2173839",
    "end": "2182239"
  },
  {
    "text": "we do that first by running a real-time analysis and providing",
    "start": "2182239",
    "end": "2188180"
  },
  {
    "text": "action tools those tools although our customers do we decide which kind of",
    "start": "2188180",
    "end": "2193490"
  },
  {
    "text": "rubber they want to allow to block Auto ready rates so what can you expect from",
    "start": "2193490",
    "end": "2201859"
  },
  {
    "start": "2199000",
    "end": "2219000"
  },
  {
    "text": "this session first I will share with you the challenge of running the real time but protection then we will see how to",
    "start": "2201859",
    "end": "2210740"
  },
  {
    "text": "protect the origin and last but not least how we moved it to the edge first",
    "start": "2210740",
    "end": "2220550"
  },
  {
    "start": "2219000",
    "end": "2230000"
  },
  {
    "text": "let me ask you a question in percentage what is the volume of the boat traffic",
    "start": "2220550",
    "end": "2228700"
  },
  {
    "text": "this may come as a surprise but more than 50% of the website traffic is not",
    "start": "2229960",
    "end": "2235940"
  },
  {
    "start": "2230000",
    "end": "2239000"
  },
  {
    "text": "your energy by human but by robots and those brats are more and more clever",
    "start": "2235940",
    "end": "2243369"
  },
  {
    "start": "2239000",
    "end": "2269000"
  },
  {
    "text": "using very basic technology a few years ago without any JavaScript rendering",
    "start": "2243369",
    "end": "2249109"
  },
  {
    "text": "they moved to more clever solution like phantoms years of Casper yes we report",
    "start": "2249109",
    "end": "2255079"
  },
  {
    "text": "JavaScript rendering and lately they use something great for copper which is",
    "start": "2255079",
    "end": "2261589"
  },
  {
    "text": "comet less it means that you can run come inside a common line and but are",
    "start": "2261589",
    "end": "2270109"
  },
  {
    "text": "massively distributed using hundreds thousand millions of IPs and today we",
    "start": "2270109",
    "end": "2277460"
  },
  {
    "text": "are talking about for billions of ipv4 but let's think when they will use completely ipv6 with billions of",
    "start": "2277460",
    "end": "2284210"
  },
  {
    "text": "billions of billions of IPs so in order to detect and to block those",
    "start": "2284210",
    "end": "2289250"
  },
  {
    "text": "robots there is just one solution detect and block them in a real-time and we",
    "start": "2289250",
    "end": "2295730"
  },
  {
    "text": "have fixed the target to 2 millisecond so let's take a look on how to protect",
    "start": "2295730",
    "end": "2301280"
  },
  {
    "start": "2298000",
    "end": "2303000"
  },
  {
    "text": "the origin so this is basically how datum is working we are taking a look to",
    "start": "2301280",
    "end": "2308450"
  },
  {
    "text": "the incoming traffic detect if it's robot or human and when it's a bot is it",
    "start": "2308450",
    "end": "2314089"
  },
  {
    "text": "a good one a bad one or a commercial one the good one our Google but Facebook",
    "start": "2314089",
    "end": "2320900"
  },
  {
    "text": "Yahoo 3 the but one of the bots that try to inject to act brute force and you want",
    "start": "2320900",
    "end": "2327710"
  },
  {
    "text": "to blog that kind of robot and the commercial one are the robot that scrap the content to analyze it and to send it",
    "start": "2327710",
    "end": "2336160"
  },
  {
    "text": "you can take a look here at the standard infrastructure-as-a-service integration",
    "start": "2336160",
    "end": "2341540"
  },
  {
    "text": "we provide modules for web servers like Apache IAS engineer's of varnish our",
    "start": "2341540",
    "end": "2348680"
  },
  {
    "text": "module we'll look the incoming traffic send it to our API and into millisecond",
    "start": "2348680",
    "end": "2354350"
  },
  {
    "text": "we'll get the answer should we allow or block this traffic or send fake content",
    "start": "2354350",
    "end": "2360790"
  },
  {
    "start": "2360000",
    "end": "2385000"
  },
  {
    "text": "so as you can see data Dom is in the critical path that means we have two",
    "start": "2360790",
    "end": "2366170"
  },
  {
    "text": "huge challenges the first one is the latency because every time visitors come",
    "start": "2366170",
    "end": "2371720"
  },
  {
    "text": "on the website it will make a call today to Dom API so we are be as fast as possible as the second one is a",
    "start": "2371720",
    "end": "2378740"
  },
  {
    "text": "scalability because we have to scale up and scale down at the same time our customer does we have work on splitting",
    "start": "2378740",
    "end": "2386960"
  },
  {
    "text": "the detection in three stage the first one in real time in the synchronous process the second one this is the fast",
    "start": "2386960",
    "end": "2395120"
  },
  {
    "text": "trimming in giant and the last one in a few minutes which is the behavior",
    "start": "2395120",
    "end": "2401030"
  },
  {
    "text": "detection synchronous and asynchronous in terms of architecture you can see",
    "start": "2401030",
    "end": "2408170"
  },
  {
    "start": "2405000",
    "end": "2422000"
  },
  {
    "text": "here that the traffic is coming from one of our module we are going through an elastic Beanstalk with all our API",
    "start": "2408170",
    "end": "2416120"
  },
  {
    "text": "servers and we have this infrastructure in many datacenter in the global",
    "start": "2416120",
    "end": "2423650"
  },
  {
    "start": "2422000",
    "end": "2465000"
  },
  {
    "text": "detection capability shared across all Amazon data centers we are using Kafka",
    "start": "2423650",
    "end": "2430040"
  },
  {
    "text": "and we are using Frink as a streaming engine and finally there is also a",
    "start": "2430040",
    "end": "2436580"
  },
  {
    "text": "global detection for the behavioral analysis using some machine learning algorithm so what we have been able to",
    "start": "2436580",
    "end": "2444710"
  },
  {
    "text": "achieve so far first we are running this real-time detection below 2 milliseconds",
    "start": "2444710",
    "end": "2449950"
  },
  {
    "text": "then we are sharing our detection capability across a few data centers",
    "start": "2449950",
    "end": "2455450"
  },
  {
    "text": "and finally we are able to detect and to protect more than 15 billion each per",
    "start": "2455450",
    "end": "2462650"
  },
  {
    "text": "month now let's take a look at the age",
    "start": "2462650",
    "end": "2468609"
  },
  {
    "start": "2465000",
    "end": "2610000"
  },
  {
    "text": "so first why lambda at the age why does it make sense for us to use lambda at",
    "start": "2468609",
    "end": "2475280"
  },
  {
    "text": "the age let me back in the past it was last summer we're ready in Paris Amazon",
    "start": "2475280",
    "end": "2480589"
  },
  {
    "text": "submit and we had a discussion with some great Amazon architect and when they",
    "start": "2480589",
    "end": "2485869"
  },
  {
    "text": "discover our use case they image that TD say you have to try lambda at the edge",
    "start": "2485869",
    "end": "2491000"
  },
  {
    "text": "because it could be a great way to integrate your solution to the largest Claude front users so we got in touch",
    "start": "2491000",
    "end": "2500450"
  },
  {
    "text": "with the lambda G H beta program we join it and we have start to implement our",
    "start": "2500450",
    "end": "2506480"
  },
  {
    "text": "module using lambda so you saw club on",
    "start": "2506480",
    "end": "2511579"
  },
  {
    "text": "cloud phone distribute your content through thousand of web servers this is great because that when you content will",
    "start": "2511579",
    "end": "2517970"
  },
  {
    "text": "be deliver fast to all users using all amazon capability but on the other side",
    "start": "2517970",
    "end": "2524299"
  },
  {
    "text": "it means start to be difficult to protect your content because it will be cash in thousands of different web",
    "start": "2524299",
    "end": "2531710"
  },
  {
    "text": "servers so in order to protect it we can use lambda so here is how the",
    "start": "2531710",
    "end": "2540290"
  },
  {
    "text": "integration is working so we are using an amazon lamb that you will request",
    "start": "2540290",
    "end": "2546260"
  },
  {
    "text": "that means every time there is an incoming request to your cloud from",
    "start": "2546260",
    "end": "2551329"
  },
  {
    "text": "distribution the lambda function will be executed this lambda code will reach",
    "start": "2551329",
    "end": "2557450"
  },
  {
    "text": "data mapi and based on the answer the number code will decide either to reach",
    "start": "2557450",
    "end": "2564230"
  },
  {
    "text": "the cloud from standard process or to block it and to send the response that",
    "start": "2564230",
    "end": "2571030"
  },
  {
    "text": "mean that our API will be rich by all cloud from web servers all around the",
    "start": "2571030",
    "end": "2577549"
  },
  {
    "text": "world so in order to have a great latency we had to deploy our infrastructure in as many Amazon data",
    "start": "2577549",
    "end": "2584180"
  },
  {
    "text": "center as possible that's what we did so now we have eleven point presence second point the lambda",
    "start": "2584180",
    "end": "2594560"
  },
  {
    "text": "function will reach our API so we have to use a single endpoint so you use for",
    "start": "2594560",
    "end": "2600470"
  },
  {
    "text": "that route 53 route 53 will resolve to the closest data dump point of presence so",
    "start": "2600470",
    "end": "2611570"
  },
  {
    "start": "2610000",
    "end": "2657000"
  },
  {
    "text": "now let's take a look to the global process so here we are seeing a",
    "start": "2611570",
    "end": "2622250"
  },
  {
    "text": "legitimate human request so the traffic is coming from a browser the viewer",
    "start": "2622250",
    "end": "2627920"
  },
  {
    "text": "request is triggered and the call is made to date on an API our API we return",
    "start": "2627920",
    "end": "2633380"
  },
  {
    "text": "here two hundred code that mean it's the signer to the lambda function that",
    "start": "2633380",
    "end": "2638420"
  },
  {
    "text": "lambda should continue the regular process and there are two option the first one is lambda and CloudFront we",
    "start": "2638420",
    "end": "2644930"
  },
  {
    "text": "serve the content from the cache and the second one is the cache is not fresh or",
    "start": "2644930",
    "end": "2650380"
  },
  {
    "text": "the cache should not be used and we will reach the origin now let's take a look",
    "start": "2650380",
    "end": "2656750"
  },
  {
    "text": "to originate image but request here on the picture it's quite obvious that this",
    "start": "2656750",
    "end": "2662720"
  },
  {
    "start": "2657000",
    "end": "2715000"
  },
  {
    "text": "is a rabbit but in the real life robots are more clever than that and there will be more like a human but well you",
    "start": "2662720",
    "end": "2670640"
  },
  {
    "text": "understand their ID so then the viewer request is triggered with some this fingerprint to date a Dom API our API",
    "start": "2670640",
    "end": "2678860"
  },
  {
    "text": "will return a four-three code because it decide that even if it looks like a human it's a robot and that our customer",
    "start": "2678860",
    "end": "2686210"
  },
  {
    "text": "decide to block it so we will send back this information to the lambda code and we will quit completely the cloud front",
    "start": "2686210",
    "end": "2693320"
  },
  {
    "text": "process and we will send back an answer and in our case we are using the full",
    "start": "2693320",
    "end": "2699800"
  },
  {
    "text": "generation capability because the lambda function will generate a full page embedding CAPTCHA because we never",
    "start": "2699800",
    "end": "2707660"
  },
  {
    "text": "completely block the request we will send back a CAPTCHA to avoid any false",
    "start": "2707660",
    "end": "2712940"
  },
  {
    "text": "positive now let's take a look to the code our modules regular modules are in",
    "start": "2712940",
    "end": "2719900"
  },
  {
    "start": "2715000",
    "end": "2731000"
  },
  {
    "text": "C or C++ so here as from our lambda the age only support not",
    "start": "2719900",
    "end": "2725689"
  },
  {
    "text": "GS we had to redevelop our modules but it was actually pretty easy let's take a",
    "start": "2725689",
    "end": "2731449"
  },
  {
    "start": "2731000",
    "end": "2757000"
  },
  {
    "text": "look to the code so here we are at the viewer request we are learning a few",
    "start": "2731449",
    "end": "2738049"
  },
  {
    "text": "external libraries and we are making the ink on all incoming requests we are",
    "start": "2738049",
    "end": "2744289"
  },
  {
    "text": "storing the informations and allowing the request inside a constant why",
    "start": "2744289",
    "end": "2749689"
  },
  {
    "text": "because in order to make this bad detection we have to collect almost all either's from the incoming requests this",
    "start": "2749689",
    "end": "2757939"
  },
  {
    "text": "is where we are collecting all these Eaters we are storing here the protocol the requests the methods or either like",
    "start": "2757939",
    "end": "2765409"
  },
  {
    "text": "AWS user agent referrer X etc then we",
    "start": "2765409",
    "end": "2771140"
  },
  {
    "start": "2770000",
    "end": "2831000"
  },
  {
    "text": "are preparing the request to to the external call to our API you can see here that we are using API lambda and to",
    "start": "2771140",
    "end": "2778130"
  },
  {
    "text": "end point which will resolve to the closest API servers we prepare the",
    "start": "2778130",
    "end": "2783979"
  },
  {
    "text": "request and we send it here based on the",
    "start": "2783979",
    "end": "2789259"
  },
  {
    "text": "answer of the API server we will either in case of 200 code let the regular",
    "start": "2789259",
    "end": "2795019"
  },
  {
    "text": "clothes on process continue or in case of for free read the response from the",
    "start": "2795019",
    "end": "2801949"
  },
  {
    "text": "API and generate a new body response and stop the regular process so it's pretty",
    "start": "2801949",
    "end": "2809689"
  },
  {
    "text": "easy just three steps first we extract information from the incoming request",
    "start": "2809689",
    "end": "2815140"
  },
  {
    "text": "then we prepare and send the fingerprint to the closest data Dom API server and",
    "start": "2815140",
    "end": "2821049"
  },
  {
    "text": "then depending on the answer we will allow block the request or send fake",
    "start": "2821049",
    "end": "2829249"
  },
  {
    "text": "contents so what next this is the first step of using lambda",
    "start": "2829249",
    "end": "2836059"
  },
  {
    "text": "agh but we have many things that we would like to do now that we discover how powerful is it first we can serve a",
    "start": "2836059",
    "end": "2843919"
  },
  {
    "text": "specific capture using a browser detection we have capture for a desktop",
    "start": "2843919",
    "end": "2849140"
  },
  {
    "text": "for mobile and also for native application then we can use",
    "start": "2849140",
    "end": "2855440"
  },
  {
    "text": "in caching policy based on the bird statue it's mean that when it's a robot a good one for instance Google or",
    "start": "2855440",
    "end": "2862460"
  },
  {
    "text": "Facebook we can save the content from the cache and when it's a human we can save it from the origin then we can use",
    "start": "2862460",
    "end": "2872089"
  },
  {
    "text": "the origin request to select a different origin for instance let's say it's a",
    "start": "2872089",
    "end": "2879170"
  },
  {
    "text": "human you will want to save it from the application to have a very fresh content when it's a bot let's say Google what",
    "start": "2879170",
    "end": "2886849"
  },
  {
    "text": "you may want to use an alternative origin with content from vanish for",
    "start": "2886849",
    "end": "2892310"
  },
  {
    "text": "instance to save it as fast as possible and finally using the viewer response",
    "start": "2892310",
    "end": "2899680"
  },
  {
    "text": "you may want to generate fake content for scrappers for instance so what we",
    "start": "2899680",
    "end": "2908300"
  },
  {
    "start": "2906000",
    "end": "2945000"
  },
  {
    "text": "have been able to achieve first thanks to lambda now the item can be set up",
    "start": "2908300",
    "end": "2914480"
  },
  {
    "text": "without any modules for varnish Apache for web servers then we can be set up in",
    "start": "2914480",
    "end": "2921410"
  },
  {
    "text": "any server less architecture and that big trend we are seeing to all our customers and last and this is probably",
    "start": "2921410",
    "end": "2929210"
  },
  {
    "text": "the most powerful feature is that we can protect the content from the but activity even when it's served from the",
    "start": "2929210",
    "end": "2936619"
  },
  {
    "text": "cache so thanks to lambda GH datum is now the first intelligent data",
    "start": "2936619",
    "end": "2942710"
  },
  {
    "text": "protection all over the world so thank you for your time we have a free trial",
    "start": "2942710",
    "end": "2949099"
  },
  {
    "start": "2945000",
    "end": "2959000"
  },
  {
    "text": "and we will be very happy to hear your feedback let's connect and we will be available in the room if you have any further",
    "start": "2949099",
    "end": "2955280"
  },
  {
    "text": "question thank you [Applause]",
    "start": "2955280",
    "end": "2960429"
  }
]