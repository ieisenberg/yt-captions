[
  {
    "start": "0",
    "end": "150000"
  },
  {
    "text": "can you hear me microphones working everyone at the back here so I want to start off by saying",
    "start": "9740",
    "end": "15750"
  },
  {
    "text": "I'm hugely sorry to everyone that's crammed at the back everyone that's sitting on the floor like there's a lot",
    "start": "15750",
    "end": "22350"
  },
  {
    "text": "of bin packing jokes that apply to this scenario so I huge apologies to everyone",
    "start": "22350",
    "end": "28680"
  },
  {
    "text": "who's crammed in that's on us and sorry we need a bigger we need a bigger room",
    "start": "28680",
    "end": "35960"
  },
  {
    "text": "yeah all like rooms that can Auto scale if there's a start-up anyway here that III would help with VC funding there",
    "start": "35960",
    "end": "43250"
  },
  {
    "text": "okay so this is the ECS deep dive session my name is Paul Maddox I'm a",
    "start": "43250",
    "end": "50190"
  },
  {
    "text": "specialist Solutions Architect at AWS my official job title is developer",
    "start": "50190",
    "end": "55440"
  },
  {
    "text": "technologies which kind of means a mix of serve as containers see ICD etc and",
    "start": "55440",
    "end": "61199"
  },
  {
    "text": "I've got an interesting job I might be a bit biased but I work with everything from tiny startups to huge enterprises",
    "start": "61199",
    "end": "67650"
  },
  {
    "text": "and work with development teams to help optimize development on the cloud so bit",
    "start": "67650",
    "end": "74220"
  },
  {
    "text": "of background about me 16 years of experience in the industry started off as a software developer developing PHP",
    "start": "74220",
    "end": "81470"
  },
  {
    "text": "but don't judge me so sites officer",
    "start": "81470",
    "end": "86580"
  },
  {
    "text": "developer got fed up of fixing other people's bugs basically and decided I wanted to travel the world a beer and so",
    "start": "86580",
    "end": "92640"
  },
  {
    "text": "I got into the operations side ran an ops team an SRE team for a while and then decided actually I wanted to talk",
    "start": "92640",
    "end": "99390"
  },
  {
    "text": "about this stuff rather than doing this stuff anymore so I became an architect and so so this bit of background about",
    "start": "99390",
    "end": "108030"
  },
  {
    "text": "me until very recently I could probably say I held all eight all seven AWS",
    "start": "108030",
    "end": "113130"
  },
  {
    "text": "certifications we've just added the security specialists one and now I've got that tough decision of do I want to",
    "start": "113130",
    "end": "118890"
  },
  {
    "text": "go and do that just so I can say I've got them all I don't know so yeah I'm",
    "start": "118890",
    "end": "124740"
  },
  {
    "text": "still an active developer always a software engineer at heart I do a lot of development these days and go also some",
    "start": "124740",
    "end": "131700"
  },
  {
    "text": "other stuff in like Java see and no to I can't use those so my",
    "start": "131700",
    "end": "137160"
  },
  {
    "text": "contact details here Twitter Email you have any questions where I'm containers serverless etc feel free to reach out to",
    "start": "137160",
    "end": "144209"
  },
  {
    "text": "me there the slides are going to be shared my contact details will be back up at the end so what are we going to",
    "start": "144209",
    "end": "150989"
  },
  {
    "start": "150000",
    "end": "257000"
  },
  {
    "text": "cover today so these build a day's event the brief that we got as presenters and",
    "start": "150989",
    "end": "156870"
  },
  {
    "text": "speakers was don't make this a session that's full of marketing slides and I",
    "start": "156870",
    "end": "162030"
  },
  {
    "text": "was like yeah we're gonna get deep I'm actually gonna rather than walk you through all the individual features of",
    "start": "162030",
    "end": "168060"
  },
  {
    "text": "ECS one by one and so droll on like that I'm actually gonna turn this around and talk about a use case so we're gonna",
    "start": "168060",
    "end": "174750"
  },
  {
    "text": "build an application a mic services architecture together today for",
    "start": "174750",
    "end": "179970"
  },
  {
    "text": "analyzing Twitter streams it's just the first used case that came to mind we're",
    "start": "179970",
    "end": "185819"
  },
  {
    "text": "gonna build a couple of micro services that collect a stream of tweets from Twitter and then process them so using",
    "start": "185819",
    "end": "192030"
  },
  {
    "text": "go using RPC between micro services and using a couple of other AWS services",
    "start": "192030",
    "end": "198690"
  },
  {
    "text": "like parameter store for sequence management and Kinesis firehose for sort of batching those tweets during the",
    "start": "198690",
    "end": "206579"
  },
  {
    "text": "process of talking through this my goal here is that by the end of this talk you",
    "start": "206579",
    "end": "212250"
  },
  {
    "text": "understand and know how to at least the first steps towards all of these things so how best to deploy ECS what about",
    "start": "212250",
    "end": "220290"
  },
  {
    "text": "monitoring maintaining availability what about things like cost optimization and making sure your workloads are is cost",
    "start": "220290",
    "end": "226560"
  },
  {
    "text": "efficient as possible but can also scale efficiently and securely what the best practices around",
    "start": "226560",
    "end": "232680"
  },
  {
    "text": "security and then things like monitoring and logging and that kind of stuff so the kind of what do I need to take a container from my dev laptop to",
    "start": "232680",
    "end": "240239"
  },
  {
    "text": "production with ECS and that's my goal to convey that across today so if you",
    "start": "240239",
    "end": "247500"
  },
  {
    "text": "have questions by the way we're trying to QA again at the end would have saved bit a time at the end for Q&A if you do",
    "start": "247500",
    "end": "252870"
  },
  {
    "text": "have an urgent boning question put your hand up and we'll try to get a microphone to you so I did say this was",
    "start": "252870",
    "end": "258870"
  },
  {
    "start": "257000",
    "end": "392000"
  },
  {
    "text": "going to be a deep dive session I need to spend like two minutes baselining on some common terms that we're going to",
    "start": "258870",
    "end": "263940"
  },
  {
    "text": "use so if you're using ECS already to apologies this is this will be over quickly if you're new to ETS this might",
    "start": "263940",
    "end": "270599"
  },
  {
    "text": "be quite useful so ECS itself is a container orchestration and management system you feed it in task definitions",
    "start": "270599",
    "end": "278279"
  },
  {
    "text": "and a task definition is a JSON document that says okay I've got these containers they make up my application you submit",
    "start": "278279",
    "end": "285689"
  },
  {
    "text": "that in two ECS and ECS is going to look across your various clusters of container instances and say okay where",
    "start": "285689",
    "end": "292949"
  },
  {
    "text": "can I fit this in where can I fit this container in where can I run it that respects all of the scheduling",
    "start": "292949",
    "end": "298830"
  },
  {
    "text": "conditions that might be set like it maybe it needs a GPU or maybe it must run on Windows that kind of stuff it's",
    "start": "298830",
    "end": "304620"
  },
  {
    "text": "gonna share to all that container on one of your container instances and optionally if it's a long-running service it's gonna keep it there and",
    "start": "304620",
    "end": "310590"
  },
  {
    "text": "keep it running and keep it highly available like in a self-healing manner so what are these container instances at",
    "start": "310590",
    "end": "317939"
  },
  {
    "text": "the bottom these are just ec2 hosts these are Windows or Linux machines in",
    "start": "317939",
    "end": "324330"
  },
  {
    "text": "your control you deploy them you maintain manage and operate them and we give you some nice tooling to help you",
    "start": "324330",
    "end": "330300"
  },
  {
    "text": "do that but ultimately these are just ec2 instances the actual back plane of the ECS system the ETS container service",
    "start": "330300",
    "end": "337740"
  },
  {
    "text": "here this is free this is something we provide for free the whole container",
    "start": "337740",
    "end": "343439"
  },
  {
    "text": "scheduling orchestration it's a huge multi tenant container orchestration",
    "start": "343439",
    "end": "348810"
  },
  {
    "text": "backplane so you don't need to worry around scaling etc you've also got the",
    "start": "348810",
    "end": "354360"
  },
  {
    "text": "container registry here really really easy convenient place to put your containers your container images once",
    "start": "354360",
    "end": "360569"
  },
  {
    "text": "they've been built we're going to talk through all these in more and more detail but I just want to give you a bird's eye view of how it all fitted",
    "start": "360569",
    "end": "366449"
  },
  {
    "text": "together in some of the terminology how does far gate fit into this oh yeah it",
    "start": "366449",
    "end": "372060"
  },
  {
    "text": "kind of sits down here in the architecture so far gate is a deployment option where you can take your task",
    "start": "372060",
    "end": "378149"
  },
  {
    "text": "definition and when you deploy it using ecs you can say deploy to far gate or to",
    "start": "378149",
    "end": "384210"
  },
  {
    "text": "an ec2 container instance so that's kind of how far gate fits into this picture Abby's gonna be deep diving on far gate",
    "start": "384210",
    "end": "390719"
  },
  {
    "text": "later today so one of the questions that comes up a lot when you first start working with ECS is where's the boundary",
    "start": "390719",
    "end": "398069"
  },
  {
    "start": "392000",
    "end": "466000"
  },
  {
    "text": "of shared responsibility at AWS we talk a lot about shared responsibility so normally if you're",
    "start": "398069",
    "end": "404610"
  },
  {
    "text": "looking at something like ec2 we talked about how AWS is responsible for operations of the cloud but you're",
    "start": "404610",
    "end": "411509"
  },
  {
    "text": "responsible for the operations in the cloud and the security of the applications that you run in the cloud",
    "start": "411509",
    "end": "416549"
  },
  {
    "text": "it's this shared model of responsibility so I want to talk through these core components of ECS and just highlight",
    "start": "416549",
    "end": "423389"
  },
  {
    "text": "some of the tasks that sit on our side of the fence that we manage and carried a pager for and some of the things that",
    "start": "423389",
    "end": "428610"
  },
  {
    "text": "you'll need to do as a customer so starting off with ECS the actual container orchestration backplane this",
    "start": "428610",
    "end": "435569"
  },
  {
    "text": "is a managed service it's a free service you only pay for the container instances the ec2 hosts and we're taking care of",
    "start": "435569",
    "end": "442739"
  },
  {
    "text": "the security of the service the monitoring the patching the availability the scaling in the cost control that's",
    "start": "442739",
    "end": "448800"
  },
  {
    "text": "all on us as a customer all you need to do is deploy your cluster so that could",
    "start": "448800",
    "end": "454259"
  },
  {
    "text": "be as simple as a command line script just AWS ECS create cluster or you could",
    "start": "454259",
    "end": "460199"
  },
  {
    "text": "do that by a cloud formation or automation we're going to talk to a load of options there when we start talking about deployment easy on our managed",
    "start": "460199",
    "end": "469139"
  },
  {
    "text": "container registry and we're gonna be looking after the monitoring availability scaling and patching of the",
    "start": "469139",
    "end": "475889"
  },
  {
    "text": "registry right so you're not gonna have to worry about how do I run my container registry in a highly available fashion",
    "start": "475889",
    "end": "481469"
  },
  {
    "text": "we're automatically gonna be scaling it for you we're gonna be worrying about the availability for you et cetera and",
    "start": "481469",
    "end": "486989"
  },
  {
    "text": "there are still some things that you need to take care of here so when you put your container images into",
    "start": "486989",
    "end": "493610"
  },
  {
    "text": "ECR you're probably going to need some automation in place to put those container images in there whenever you",
    "start": "493610",
    "end": "499589"
  },
  {
    "text": "build one so something like AWS code pipeline you're probably going to want to think a bit about cost control",
    "start": "499589",
    "end": "505709"
  },
  {
    "text": "especially if you're building lots and lots of container images and you don't want to get into the scenario where",
    "start": "505709",
    "end": "511559"
  },
  {
    "text": "you're keeping every single image every single version etc if you're doing like thousands or hundreds of builds a day",
    "start": "511559",
    "end": "517709"
  },
  {
    "text": "right that's going to rack up cost very quickly so there are some building blocks that we provide within ECR things",
    "start": "517709",
    "end": "523948"
  },
  {
    "text": "like lifecycle policies so you could say auto delete any untagged container images that are older than 30 days for",
    "start": "523949",
    "end": "530790"
  },
  {
    "text": "example so a lot of these bits at the bottom here the customers responsibility side we do provide building blocks to help you The",
    "start": "530790",
    "end": "539910"
  },
  {
    "start": "538000",
    "end": "568000"
  },
  {
    "text": "Container instances the actual ec2 instances that run your containers this",
    "start": "539910",
    "end": "545520"
  },
  {
    "text": "is where that division really starts to shift over to your side and one of our main motivations for building Fargate is",
    "start": "545520",
    "end": "550890"
  },
  {
    "text": "because today if you want to deploy a nice es cluster with ec2 instances to run your containers you need to worry",
    "start": "550890",
    "end": "557640"
  },
  {
    "text": "about deploying those container instances yourselves right you need to think about how do I deploy those how do",
    "start": "557640",
    "end": "563070"
  },
  {
    "text": "I do cost control patching monitoring blah blah blah there's quite a bit on the customer side there so the good news",
    "start": "563070",
    "end": "569610"
  },
  {
    "start": "568000",
    "end": "613000"
  },
  {
    "text": "is there's a whole load of building blocks in the AWS platform that actually make this easy for you things like auto",
    "start": "569610",
    "end": "577200"
  },
  {
    "text": "scaling groups are gonna help you with scaling in and out your container instances they're gonna take care of the",
    "start": "577200",
    "end": "583260"
  },
  {
    "text": "availability if one of them dies the auto scaling group is going to automatically bring it back up again",
    "start": "583260",
    "end": "588410"
  },
  {
    "text": "security you've got tools like I am and I'm as an inspector that can do automated vulnerability scans on your",
    "start": "588410",
    "end": "594690"
  },
  {
    "text": "container instances so a lot of these building blocks are there for you and we",
    "start": "594690",
    "end": "599910"
  },
  {
    "text": "have some some pretty good prescriptive advice that I'll share with you later on on each of these things ultimately",
    "start": "599910",
    "end": "606150"
  },
  {
    "text": "though this is this is what Fargate solves this when you're running foggy a lot of this goes away the final",
    "start": "606150",
    "end": "615029"
  },
  {
    "start": "613000",
    "end": "701000"
  },
  {
    "text": "component is toss is tasking containers so these the actual containers and images that you need to run on AWS and",
    "start": "615029",
    "end": "622459"
  },
  {
    "text": "ECS is going to take care of deployment of them for you so it's going to do things like an automatic zero downtime",
    "start": "622459",
    "end": "628320"
  },
  {
    "text": "rolling update to your images that are running on the platform it's going to take care of actually taking the",
    "start": "628320",
    "end": "634110"
  },
  {
    "text": "container from the registry getting it onto the ec2 instance running it making sure that the availability stays up if",
    "start": "634110",
    "end": "640140"
  },
  {
    "text": "you select it to be a long-running service in ECS if a container crashes or dies or you know blows its heap space or",
    "start": "640140",
    "end": "646410"
  },
  {
    "text": "your application or something then ECS is automatically gonna restart it and you get these nice self-healing",
    "start": "646410",
    "end": "651930"
  },
  {
    "text": "architectures that means wherever possible you're not going to get woken up in the middle of night there are",
    "start": "651930",
    "end": "657750"
  },
  {
    "text": "still a few things you need to think about so scaling of your containers how many of your containers do you want",
    "start": "657750",
    "end": "663959"
  },
  {
    "text": "running at any one time what's your scaling metric is it CPU memory etc and that's normally",
    "start": "663959",
    "end": "669579"
  },
  {
    "text": "dependent on the application you have things like logging I'm going to show you some nice patterns for getting",
    "start": "669579",
    "end": "674889"
  },
  {
    "text": "automatic centralized centralized logging in a minute security this is something that not",
    "start": "674889",
    "end": "680740"
  },
  {
    "text": "enough customers asked me about to be frank right the security of what's inside your container images so we're",
    "start": "680740",
    "end": "687009"
  },
  {
    "text": "going to talk through some best practices there that you can put in place in your CI CD pipelines etc to do",
    "start": "687009",
    "end": "692019"
  },
  {
    "text": "things like vulnerability scanning inside your containers and then patching",
    "start": "692019",
    "end": "697300"
  },
  {
    "text": "of your containers obviously you're the one building your containers okay so",
    "start": "697300",
    "end": "703660"
  },
  {
    "start": "701000",
    "end": "717000"
  },
  {
    "text": "let's let's start talking through a few of these best practices and then we'll start building an application and",
    "start": "703660",
    "end": "709660"
  },
  {
    "text": "deploying it onto AWS so the first thing that you need to do when starting with ECS is deploy your cluster so how should",
    "start": "709660",
    "end": "718329"
  },
  {
    "start": "717000",
    "end": "770000"
  },
  {
    "text": "you do this and there's there's a number of ways because hey we like to be flexible and the first one is to use the",
    "start": "718329",
    "end": "724329"
  },
  {
    "text": "AWS management console it's a really really good way of learning about ECS right you can go and get a visual wizard",
    "start": "724329",
    "end": "730660"
  },
  {
    "text": "and it will help you create your first cluster and you can do things like do I want on-demand pricing or spot fleet",
    "start": "730660",
    "end": "736959"
  },
  {
    "text": "pricing etc I can choose how many instances I want in my cluster what instance sighs you know how much CPU",
    "start": "736959",
    "end": "742660"
  },
  {
    "text": "memory etc so this does make it really really easy to get a cluster up and running if you're running in production",
    "start": "742660",
    "end": "749519"
  },
  {
    "text": "you're probably gonna want multiple environments like multiple clusters one for development one for production etc",
    "start": "749519",
    "end": "754660"
  },
  {
    "text": "you know if someone comes up to you and says hey we need a new test cluster you probably don't want to be doing this all",
    "start": "754660",
    "end": "760540"
  },
  {
    "text": "by hand right human error lack of repeatability etc etc so you want to automate this",
    "start": "760540",
    "end": "766750"
  },
  {
    "text": "right AWS is API CLI driven how should I do this so one approach and you know if",
    "start": "766750",
    "end": "773439"
  },
  {
    "start": "770000",
    "end": "876000"
  },
  {
    "text": "you've got a Linux background like myself you think you're the king of the bash one-liners",
    "start": "773439",
    "end": "778839"
  },
  {
    "text": "okay I'm gonna script this I'm gonna write a bash script and it's gonna deploy my whole environment for me so",
    "start": "778839",
    "end": "784930"
  },
  {
    "text": "there's a really really rubbish example don't use this code like I threw this together on a train it probably doesn't",
    "start": "784930",
    "end": "790389"
  },
  {
    "text": "even run so for a lot of people scripting this kind of stuff is kind of",
    "start": "790389",
    "end": "796149"
  },
  {
    "text": "the de-facto I'm gonna I'm gonna go and script this like next stage it's a number of fundamental problems",
    "start": "796149",
    "end": "802450"
  },
  {
    "text": "with this that I want to try and help you avoid if you're thinking of taking this route number one is what happens if",
    "start": "802450",
    "end": "809110"
  },
  {
    "text": "your script that deploys your whole environment fails halfway through are you really gonna put safety checks in at",
    "start": "809110",
    "end": "814630"
  },
  {
    "text": "every stage of your script what if an API call to AWS fails for whatever reason you lose connectivity halfway",
    "start": "814630",
    "end": "820449"
  },
  {
    "text": "through etc how do you how do you get out of that scenario how do you revert",
    "start": "820449",
    "end": "825550"
  },
  {
    "text": "back from that scenario when you're in a half broken half working State some API",
    "start": "825550",
    "end": "831279"
  },
  {
    "text": "calls in AWS are asynchronous things like creating an instance when you run an instance the CL is gonna return",
    "start": "831279",
    "end": "837250"
  },
  {
    "text": "immediately to you that instance isn't actually going to be booted up for a couple of minutes so you know a couple of seconds or minutes whatever it is so",
    "start": "837250",
    "end": "844660"
  },
  {
    "text": "how do you deal with that you just like throw a weight or asleep into your script if so how long for right and then",
    "start": "844660",
    "end": "851260"
  },
  {
    "text": "once you've got your script working it's the most beautiful script ever and oh my goodness with their bops how do you then",
    "start": "851260",
    "end": "857740"
  },
  {
    "text": "move on how do you get on to the next version of your architecture and infrastructure do you write an update",
    "start": "857740",
    "end": "863110"
  },
  {
    "text": "script that updates it from your old version to your new version or if I want to skip three versions this is a hard",
    "start": "863110",
    "end": "869170"
  },
  {
    "text": "problem to solve with scripting so I don't recommend attacking this with",
    "start": "869170",
    "end": "874930"
  },
  {
    "text": "scripting yourself instead have a step back and think about what we want from",
    "start": "874930",
    "end": "880300"
  },
  {
    "text": "deployments ultimately in most cases we want a self-contained deployable unit so",
    "start": "880300",
    "end": "885699"
  },
  {
    "text": "I mean that I can just cookie-cutter deploy over and over again and repeat something that when someone comes up to",
    "start": "885699",
    "end": "891250"
  },
  {
    "text": "me and says hey we need 10 new environments I don't go oh my goodness that's a month's worth of work thank you",
    "start": "891250",
    "end": "896310"
  },
  {
    "text": "we want something that's auditable so as an organization I probably want to know which environments have got at any point",
    "start": "896310",
    "end": "903339"
  },
  {
    "text": "in time when they were spun up who they were spun up by how do I find out the owner etc and ideally I want my",
    "start": "903339",
    "end": "909760"
  },
  {
    "text": "deployments to be self documenting I speak to far too many customers who have Excel spreadsheets of subnets and IP",
    "start": "909760",
    "end": "916149"
  },
  {
    "text": "ranges or wiki pages on confluence or something or other wiki brands apply so",
    "start": "916149",
    "end": "921569"
  },
  {
    "text": "the trouble with that is as we all know they get out of date almost immediately right and they're useless to everyone",
    "start": "921569",
    "end": "928029"
  },
  {
    "text": "then so this is where things like infrastructure as code come in and hands up if you're using cloud formation",
    "start": "928029",
    "end": "934000"
  },
  {
    "text": "terraform today okay most of the room but not enough so this is an example of",
    "start": "934000",
    "end": "941950"
  },
  {
    "text": "a cloud formation script it allows you to define pretty much any AWS architecture right subnets load",
    "start": "941950",
    "end": "948220"
  },
  {
    "text": "balancers containers etc in a JSON or Yama format what this means is you can",
    "start": "948220",
    "end": "955360"
  },
  {
    "text": "take your whole architecture your infrastructure definition and put it in a template in your source code repo",
    "start": "955360",
    "end": "961260"
  },
  {
    "text": "right you can a version control on your architecture you can go back to any point in time and say ok we had an",
    "start": "961260",
    "end": "967900"
  },
  {
    "text": "outage that day I can see the day before Bob added a firewall rule security group rule let's go find Bob but not too much",
    "start": "967900",
    "end": "975700"
  },
  {
    "text": "because we're a blameless culture so when you have a cloud formation template",
    "start": "975700",
    "end": "982660"
  },
  {
    "start": "980000",
    "end": "1055000"
  },
  {
    "text": "for example for deploying an ACS environment you can just run AWS CloudFormation create stack or use the",
    "start": "982660",
    "end": "989830"
  },
  {
    "text": "AWS console management console and deploy this template over and over again and you can just give it a stack name",
    "start": "989830",
    "end": "995950"
  },
  {
    "text": "like pre-production in this case and then point it at the template file it's gonna go away and it's gonna create your",
    "start": "995950",
    "end": "1001080"
  },
  {
    "text": "whole architecture for you when it's time to update your architecture you can just run an update stack cloud formation",
    "start": "1001080",
    "end": "1007710"
  },
  {
    "text": "is going to deal with ok I know that the architecture is in that state and I need to get it to this state I'm just going",
    "start": "1007710",
    "end": "1013020"
  },
  {
    "text": "to do whatever I need to to get it to that state and if you ever need a new environment [Music]",
    "start": "1013020",
    "end": "1020900"
  },
  {
    "text": "and that's it thank you [Applause]",
    "start": "1020900",
    "end": "1027300"
  },
  {
    "text": "yeah spoiler we're not indeed this is",
    "start": "1031160",
    "end": "1036209"
  },
  {
    "text": "you happy you're in so much trouble okay so when a new environment is needed you",
    "start": "1036209",
    "end": "1043589"
  },
  {
    "text": "can just give it a different stack name and you're gonna get a whole separate environment brought up alongside so really really useful if you want to",
    "start": "1043589",
    "end": "1049530"
  },
  {
    "text": "deploy infrastructure and architectures and then tear them down a minute later",
    "start": "1049530",
    "end": "1055370"
  },
  {
    "start": "1055000",
    "end": "1074000"
  },
  {
    "text": "when it comes to deploying these ECS resources they're really really simple in most cases to deploy with cloud",
    "start": "1056150",
    "end": "1062400"
  },
  {
    "text": "formation so an ECR repository for storing your images there's an example of the CLI here and then we've got the",
    "start": "1062400",
    "end": "1069030"
  },
  {
    "text": "cloud formation we just need to say what type is it it's a repository and give it a name if you're using ECR container",
    "start": "1069030",
    "end": "1078210"
  },
  {
    "start": "1074000",
    "end": "1119000"
  },
  {
    "text": "registry there's a nice little tip here when you go to the login ECR works with",
    "start": "1078210",
    "end": "1083280"
  },
  {
    "text": "iam permission so you get really granular permissions on your container registry so like this development team",
    "start": "1083280",
    "end": "1088410"
  },
  {
    "text": "can push images that development team can pull images and one of the side effects of this is you need to log in",
    "start": "1088410",
    "end": "1094230"
  },
  {
    "text": "before you can do a docker pull so there's a command here that I pulled from the AWS documentation that",
    "start": "1094230",
    "end": "1099630"
  },
  {
    "text": "basically logs in and then pulls an image to avoid you having to do this every single time you want to interact",
    "start": "1099630",
    "end": "1105000"
  },
  {
    "text": "with ECR there's a credential helper plug-in on github there's actually a docker plugin that will basically run",
    "start": "1105000",
    "end": "1111630"
  },
  {
    "text": "this automatically for you behind the scenes so then you can just do docker pool so it's just a handy little utility",
    "start": "1111630",
    "end": "1117030"
  },
  {
    "text": "to have a similar story for deploying your cluster again you've got the CLI",
    "start": "1117030",
    "end": "1123300"
  },
  {
    "start": "1119000",
    "end": "1127000"
  },
  {
    "text": "version on the left and cloud formation on the right fairly straightforward where this gets a bit more complicated",
    "start": "1123300",
    "end": "1129450"
  },
  {
    "start": "1127000",
    "end": "1235000"
  },
  {
    "text": "is when you actually start to think about the container instances that are going to run your containers what I've",
    "start": "1129450",
    "end": "1135990"
  },
  {
    "text": "got here is an architecture diagram for what a a best-practice ECS deployment",
    "start": "1135990",
    "end": "1141120"
  },
  {
    "text": "looks like in terms of the container instances so I'm gonna walk through this a bit in a minute but essentially we've",
    "start": "1141120",
    "end": "1147240"
  },
  {
    "text": "got a V PC in a region as our outer box there and then we've got to availability zones so you may have to you may have",
    "start": "1147240",
    "end": "1153490"
  },
  {
    "text": "three ma of six whatever you choose in terms of your availability profile there these availability zones are separate",
    "start": "1153490",
    "end": "1160000"
  },
  {
    "text": "data centers right so each availability zone is one or more data center separated by low latency normally under",
    "start": "1160000",
    "end": "1165850"
  },
  {
    "text": "under two milliseconds is the official terminology there so we got our availability zones and then we've got",
    "start": "1165850",
    "end": "1172059"
  },
  {
    "text": "public and private subnet right we probably don't want to put our containers directly onto the internet we",
    "start": "1172059",
    "end": "1177490"
  },
  {
    "text": "want some sort of middle tier and in this case we're using an application low bouncer and we got a few other bits in",
    "start": "1177490",
    "end": "1183309"
  },
  {
    "text": "there so let's let's cut this architecture diagram out a bit and step through it bit by bit because it's a bit of a busy diagram there so the front end",
    "start": "1183309",
    "end": "1191679"
  },
  {
    "text": "of our containers we've got traffic coming in from our users it comes in via the internet gateway on the V PC and",
    "start": "1191679",
    "end": "1197290"
  },
  {
    "text": "then in this case we're using an application load balancer so the alb is a really really nice way of getting",
    "start": "1197290",
    "end": "1203530"
  },
  {
    "text": "traffic to containers with e CS so it does path for host base routing so I can",
    "start": "1203530",
    "end": "1209950"
  },
  {
    "text": "have one load balancer and say okay if anyone goes to slash products send it to that ECS service if anyone comes to",
    "start": "1209950",
    "end": "1216790"
  },
  {
    "text": "slash customers send it to that ECS service and it will do that for you so when a container comes up it's gonna",
    "start": "1216790",
    "end": "1223330"
  },
  {
    "text": "automatically register it in the alb for you and if the kind of container disappears it's gonna take it out of the",
    "start": "1223330",
    "end": "1229300"
  },
  {
    "text": "load balancer for you it's a very low touch way of getting low balancing across your containers the other thing",
    "start": "1229300",
    "end": "1237460"
  },
  {
    "start": "1235000",
    "end": "1257000"
  },
  {
    "text": "we had on that diagram is the outbound traffic from your containers and container instances so it may well be",
    "start": "1237460",
    "end": "1244000"
  },
  {
    "text": "that your containers need to speak out to the internet if they're in a private subnet they haven't got a public IP address there needs to be some sort of",
    "start": "1244000",
    "end": "1250210"
  },
  {
    "text": "natan's through the public subnet so in this case we've got NAT gateways in our",
    "start": "1250210",
    "end": "1255520"
  },
  {
    "text": "public subnets and then the final bit is at the bottom here logging so you",
    "start": "1255520",
    "end": "1261850"
  },
  {
    "start": "1257000",
    "end": "1282000"
  },
  {
    "text": "probably want some sort of centralized logging setup so both for the logs on your instances and also your containers",
    "start": "1261850",
    "end": "1267550"
  },
  {
    "text": "as well because if you're if your pool of containers is coming and going constantly you need some way of",
    "start": "1267550",
    "end": "1273130"
  },
  {
    "text": "collecting those back so they're not lost when a container dies so in this case we're using cloud which logs and we're gonna dive into that in a bit more",
    "start": "1273130",
    "end": "1279429"
  },
  {
    "text": "detail as we go through so that to long I fell asleep while you were talking",
    "start": "1279429",
    "end": "1285640"
  },
  {
    "start": "1282000",
    "end": "1304000"
  },
  {
    "text": "Pulver of this is all of this is provided for you as a reference architecture there's",
    "start": "1285640",
    "end": "1291460"
  },
  {
    "text": "a github URL here ECS reference architecture cloud formation we can actually go to this",
    "start": "1291460",
    "end": "1297130"
  },
  {
    "text": "github page click Launch stack and it's going to create you everything I just showed you with some example",
    "start": "1297130",
    "end": "1302890"
  },
  {
    "text": "micro-services so at this point let's actually do this let's go through and",
    "start": "1302890",
    "end": "1308890"
  },
  {
    "start": "1304000",
    "end": "1747000"
  },
  {
    "text": "let's deploy our first cluster so yes",
    "start": "1308890",
    "end": "1316450"
  },
  {
    "text": "reference okay cool since the repository",
    "start": "1316450",
    "end": "1328270"
  },
  {
    "text": "I was mentioning a minute ago in here you'll find a whole load of cloud formation templates so if I go into infrastructure for example there's one",
    "start": "1328270",
    "end": "1335290"
  },
  {
    "text": "that deploys the VPC one that deploys EECS cluster so you can go in here you can fork this repo you can rip this",
    "start": "1335290",
    "end": "1341440"
  },
  {
    "text": "stuff out and customize it if you want and if we look down here there's a couple of buttons you know one for each",
    "start": "1341440",
    "end": "1346900"
  },
  {
    "text": "region that just allows you to really quickly deploy this so if I go into London for example and launch a cluster",
    "start": "1346900",
    "end": "1353950"
  },
  {
    "text": "there just accept the defaults I get to give my cluster a name so I'm going to",
    "start": "1353950",
    "end": "1359530"
  },
  {
    "text": "call this pre production and I think I may have one called that already so",
    "start": "1359530",
    "end": "1365380"
  },
  {
    "text": "we'll suffix it and just accept the",
    "start": "1365380",
    "end": "1370450"
  },
  {
    "text": "defaults there's a tick box you have to tick here just to say this cloud formation template is gonna mess with I",
    "start": "1370450",
    "end": "1376450"
  },
  {
    "text": "am a bit it's gonna create some I am roles so you just need to accept that and I have a look through if you're",
    "start": "1376450",
    "end": "1382870"
  },
  {
    "text": "worried and have a look through your IM roles included within those templates but you just need to give CloudFormation permission to create those roles so if I",
    "start": "1382870",
    "end": "1391900"
  },
  {
    "text": "look now this this cluster is going to come up this takes about seven to eight minutes so we're just going to sit in",
    "start": "1391900",
    "end": "1397300"
  },
  {
    "text": "silence and watch if that's okay and I'll just check my facebook no we're not going to do that I've got one I prepared",
    "start": "1397300",
    "end": "1403390"
  },
  {
    "text": "earlier so you'll see this when you play around with this and deploy this takes about six or seven minutes you'll see",
    "start": "1403390",
    "end": "1408790"
  },
  {
    "text": "the VPC being created the cluster etc etc and after around ten minutes if I go",
    "start": "1408790",
    "end": "1416650"
  },
  {
    "text": "and look in another region where I deployed this previously okay this is what you'll see so here",
    "start": "1416650",
    "end": "1423400"
  },
  {
    "text": "we've got a cluster we've got the various different nested templates that create all the resources and if I look",
    "start": "1423400",
    "end": "1430060"
  },
  {
    "text": "at the outputs from the template I can see a couple of example micro-services so in this case there's a product",
    "start": "1430060",
    "end": "1436810"
  },
  {
    "text": "service that's been deployed and this is just a really simple JSON API right of",
    "start": "1436810",
    "end": "1442090"
  },
  {
    "text": "products the other the other microservice is a website and this is",
    "start": "1442090",
    "end": "1450130"
  },
  {
    "text": "the best website ever I promise they just list these products right so really really simple but the example is there",
    "start": "1450130",
    "end": "1456430"
  },
  {
    "text": "in the repo to show you how to get micro services to communicate with each other with the load balancer so have a look in",
    "start": "1456430",
    "end": "1463480"
  },
  {
    "text": "there have a have a dig around and play with it feel free to fork it or submit back any changes you want to see in",
    "start": "1463480",
    "end": "1468640"
  },
  {
    "text": "there so open source after all okay cool",
    "start": "1468640",
    "end": "1477370"
  },
  {
    "text": "so this this point nice at this point um",
    "start": "1477370",
    "end": "1483970"
  },
  {
    "text": "we got a cluster up and running or we will have in a few minutes anyway at this point we can start creating our",
    "start": "1483970",
    "end": "1489610"
  },
  {
    "text": "applications and container izing our applications and creating something real and tangible deploying it so that's what",
    "start": "1489610",
    "end": "1495280"
  },
  {
    "text": "we're gonna do I'm gonna",
    "start": "1495280",
    "end": "1499920"
  },
  {
    "text": "yeah did you say turning mirroring on/off",
    "start": "1507760",
    "end": "1514210"
  },
  {
    "text": "would help basically whatever it's not",
    "start": "1514210",
    "end": "1521410"
  },
  {
    "text": "now yeah let's just try okay",
    "start": "1521410",
    "end": "1529590"
  },
  {
    "text": "let's try that see if that's any better",
    "start": "1541800",
    "end": "1545600"
  },
  {
    "text": "a hardware problem is that what we're going with",
    "start": "1561430",
    "end": "1566770"
  },
  {
    "text": "it's a hardware problem it's des dns",
    "start": "1566770",
    "end": "1574120"
  },
  {
    "text": "over HDMI okay so we've got something",
    "start": "1574120",
    "end": "1589210"
  },
  {
    "text": "there grab the other one make sure it's",
    "start": "1589210",
    "end": "1608590"
  },
  {
    "text": "not the connection down here",
    "start": "1608590",
    "end": "1611610"
  },
  {
    "text": "okay what I'm what I might just do is not put this into presentation mode",
    "start": "1626360",
    "end": "1633010"
  },
  {
    "text": "let's let's leave it like this for a minute and if it does it again I'll switch dongle",
    "start": "1633010",
    "end": "1639490"
  },
  {
    "text": "what's here guys okay so what we're going to build is a Twitter analysis Bob",
    "start": "1640700",
    "end": "1647600"
  },
  {
    "text": "this is going to subscribe to a Twitter search stream and it's gonna collect",
    "start": "1647600",
    "end": "1653960"
  },
  {
    "text": "tweets in a micro service called tweet collector tweet collector is a simple service that subscribes to the Twitter",
    "start": "1653960",
    "end": "1659450"
  },
  {
    "text": "API receives tweets and then forwards them on to another service called the tweet archiver now the tweet collector",
    "start": "1659450",
    "end": "1667429"
  },
  {
    "text": "needs a few things it needs to know my Twitter API credentials and believe it or not I wasn't very comfortable putting",
    "start": "1667429",
    "end": "1673519"
  },
  {
    "text": "those on screen for everyone to see and as per best practices I probably don't want to bacon them into my container",
    "start": "1673519",
    "end": "1679580"
  },
  {
    "text": "either so the AWS SSM parameter store is a really really nice place to store",
    "start": "1679580",
    "end": "1685789"
  },
  {
    "text": "container secrets and configuration data it's hidden away in the ec2 console if",
    "start": "1685789",
    "end": "1691010"
  },
  {
    "text": "you go into the ec2 page it's near the bottom parameters store but it's a it's a simple API that allows you to put",
    "start": "1691010",
    "end": "1696679"
  },
  {
    "text": "configuration data in and get configuration data back out and optionally encrypt it with a kms key of",
    "start": "1696679",
    "end": "1702590"
  },
  {
    "text": "your choice so then you can define with I am policies who and which containers",
    "start": "1702590",
    "end": "1707960"
  },
  {
    "text": "can actually read and decrypt those secrets so it's a really really nice way of doing secrets for anything from",
    "start": "1707960",
    "end": "1713899"
  },
  {
    "text": "server lists containers ec2 etc etc so top tip there so tweets are then going",
    "start": "1713899",
    "end": "1720289"
  },
  {
    "text": "to go into the tweet archiver and then we're going to use Kinesis firehose to actually archive these tweets to s3 you",
    "start": "1720289",
    "end": "1727340"
  },
  {
    "text": "know maybe I want to train some sort of machine learning model later down the line I want to have an archive of these tweets and maybe I want to use something",
    "start": "1727340",
    "end": "1734090"
  },
  {
    "text": "like elasticsearch to do analysis and graphing of these tweets and maybe I'm going to tie into lambda as well and do",
    "start": "1734090",
    "end": "1740929"
  },
  {
    "text": "real-time alerts and notifications etc so this is my basic architecture and I",
    "start": "1740929",
    "end": "1747220"
  },
  {
    "text": "actually did the classic bad developer thing of finding a new technology and then thinking of something I could",
    "start": "1747220",
    "end": "1753049"
  },
  {
    "text": "develop to play with the new technology so this architecture uses for communication between containers",
    "start": "1753049",
    "end": "1759800"
  },
  {
    "text": "and between our microservices library is released recently by twitch did anyone",
    "start": "1759800",
    "end": "1765140"
  },
  {
    "text": "see this it's quite interesting who hears heard of Geo PC ok fair few people",
    "start": "1765140",
    "end": "1771530"
  },
  {
    "text": "so geo PC is a way of communicating between services without using rest so",
    "start": "1771530",
    "end": "1778940"
  },
  {
    "text": "using binary protocols and using something like protobufs to actually define your contracts between your micro",
    "start": "1778940",
    "end": "1784550"
  },
  {
    "text": "services so it makes the quite a nice way of communicating between micro versus much lighter weight than",
    "start": "1784550",
    "end": "1790010"
  },
  {
    "text": "traditional rest and HTTP HTTPS but there's a couple of downsides with G RPC the first is it's pretty heavy weight",
    "start": "1790010",
    "end": "1796670"
  },
  {
    "text": "has a lot of features and functionality and most people don't need all of them it's also not compatible with HTTP 1",
    "start": "1796670",
    "end": "1803210"
  },
  {
    "text": "which means you can't use it behind any of the AWS load balancers because I",
    "start": "1803210",
    "end": "1808910"
  },
  {
    "text": "sorry it needs HTTP 2 for G RPC and our low bouncers don't support HTTP 2",
    "start": "1808910",
    "end": "1814640"
  },
  {
    "text": "through to the backend sorry",
    "start": "1814640",
    "end": "1820040"
  },
  {
    "text": "no application in low bouncer supports HTTP 2 from the browser to the load balancer but not back to the origin to",
    "start": "1820040",
    "end": "1826910"
  },
  {
    "text": "my knowledge ok that must be pretty new then since since I lost you ok I'm so",
    "start": "1826910",
    "end": "1834760"
  },
  {
    "text": "twitch released an open source library that they've been using for quite a while to do micro service communication",
    "start": "1834760",
    "end": "1840980"
  },
  {
    "text": "and it solves a lot of these challenges so it works with protobufs but if you just want to diagnose and",
    "start": "1840980",
    "end": "1847100"
  },
  {
    "text": "debug and you know troubleshoot your microcircuit is you probably don't want to use protobufs which is a binary",
    "start": "1847100",
    "end": "1852170"
  },
  {
    "text": "protocol you probably want to use JSON instead so twitch twitches library twerp",
    "start": "1852170",
    "end": "1857530"
  },
  {
    "text": "actually supports JSON as well so you can use your normal tooling so we're gonna use this for communication between",
    "start": "1857530",
    "end": "1863210"
  },
  {
    "text": "our microcircuits but you could just as easily use rest if you wanted to so the",
    "start": "1863210",
    "end": "1868640"
  },
  {
    "text": "weight which twitches library works I really struggle saying twitch TWRP the weight which is library works is you",
    "start": "1868640",
    "end": "1874940"
  },
  {
    "text": "define a protobuf definition so in this case we've got a service called Twitter archive and it's got one RPC method",
    "start": "1874940",
    "end": "1882140"
  },
  {
    "text": "called create and it takes a create request and returns to create response and those messages are defined down here",
    "start": "1882140",
    "end": "1889190"
  },
  {
    "text": "so when we create a new message to the Twitter archiver we're providing a name so who did the",
    "start": "1889190",
    "end": "1894620"
  },
  {
    "text": "tweet and the actual message of the tweet as well so from this definition the twitch library will generate for you",
    "start": "1894620",
    "end": "1901220"
  },
  {
    "text": "automatically that all the code needed to run a server and also a client library as well so it will generate the",
    "start": "1901220",
    "end": "1907580"
  },
  {
    "text": "clients for you so to look at these too",
    "start": "1907580",
    "end": "1914179"
  },
  {
    "start": "1911000",
    "end": "1958000"
  },
  {
    "text": "much services the tweet collector that actually gets the tweets from Twitter uses the Twitter API as I mentioned we",
    "start": "1914179",
    "end": "1921080"
  },
  {
    "text": "want to be able to configure this at runtime we don't want to bake in configuration parameters into our",
    "start": "1921080",
    "end": "1926179"
  },
  {
    "text": "containers right we want to follow the 1212 factor application patterns and passed up in by our environment",
    "start": "1926179",
    "end": "1931789"
  },
  {
    "text": "variables so in this case I'm passing in a couple of configuration items so the search terms to search Twitter for and",
    "start": "1931789",
    "end": "1938629"
  },
  {
    "text": "also the archive HTTP endpoint for the other service we're gonna give it an IM",
    "start": "1938629",
    "end": "1943850"
  },
  {
    "text": "role so ACS allows you to assign I am roles to individual tasks and containers",
    "start": "1943850",
    "end": "1948860"
  },
  {
    "text": "so you can actually scope down your I am permissions to the specific services and then it's going to forward on tweets to",
    "start": "1948860",
    "end": "1955250"
  },
  {
    "text": "the other service using the auto-generated SDK so on the other side of it the archive is service this hosts",
    "start": "1955250",
    "end": "1962240"
  },
  {
    "start": "1958000",
    "end": "1984000"
  },
  {
    "text": "the RPC server it's going to send tweets on to Amazon Kinesis after it does some",
    "start": "1962240",
    "end": "1967279"
  },
  {
    "text": "filtering and maybe some modifications and again it's configured with an environment variable just telling it",
    "start": "1967279",
    "end": "1972649"
  },
  {
    "text": "which Kinesis stream should it put those tweets on and we're gonna give this an IM role that can mean it come right to",
    "start": "1972649",
    "end": "1978649"
  },
  {
    "text": "Kinesis and then it responds with the Kinesis sequence number or an error so",
    "start": "1978649",
    "end": "1984980"
  },
  {
    "start": "1984000",
    "end": "2047000"
  },
  {
    "text": "what's my development workflow gonna look like this how should I actually develop this and there's a couple of different options and different ways of",
    "start": "1984980",
    "end": "1990950"
  },
  {
    "text": "doing this the way I've got comfortable and used to doing is when I'm running locally and developing locally use",
    "start": "1990950",
    "end": "1996289"
  },
  {
    "text": "docker compose right it's part of docker it allows you to have your container specify them in a docker compose file",
    "start": "1996289",
    "end": "2002230"
  },
  {
    "text": "and very easily bring it up and down on your laptop things like logs are gonna be sent to your laptop standard out and",
    "start": "2002230",
    "end": "2008500"
  },
  {
    "text": "standard error so really easy to diagnose while you're debugging and developing and also it's going to make",
    "start": "2008500",
    "end": "2013990"
  },
  {
    "text": "use of things like your local AWS credentials and it allows you to push in build containers into your registry I'm",
    "start": "2013990",
    "end": "2020200"
  },
  {
    "text": "not going to use a CI CD pipeline in this example but that would probably be the next step after doing this",
    "start": "2020200",
    "end": "2025340"
  },
  {
    "text": "on the AWS side when we deploy it I'm actually going to use cloud formation to deploy this so much like we did with our",
    "start": "2025340",
    "end": "2031940"
  },
  {
    "text": "actual infrastructure earlier we're going to deploy our task definitions and container definitions with cloud",
    "start": "2031940",
    "end": "2037999"
  },
  {
    "text": "formation we're going to centralize our logs in cloud trail and we're going to use I am task was to assign those I am",
    "start": "2037999",
    "end": "2044539"
  },
  {
    "text": "permissions to the containers so this is all open source",
    "start": "2044539",
    "end": "2050089"
  },
  {
    "start": "2047000",
    "end": "2075000"
  },
  {
    "text": "this whole RPC project you can go on to get hub and have a look it's just on my",
    "start": "2050089",
    "end": "2057829"
  },
  {
    "text": "personal github but as the archiver and collector service and you can go in there and have a look so feel free to",
    "start": "2057829",
    "end": "2064339"
  },
  {
    "text": "have a play with this afterwards so it's",
    "start": "2064339",
    "end": "2070368"
  },
  {
    "text": "go in and actually look at how we'd develop this locally and how we'd deploy it so I've got my actual services here",
    "start": "2070369",
    "end": "2079490"
  },
  {
    "start": "2075000",
    "end": "2391000"
  },
  {
    "text": "if I look at my folder layout for example I've got the archiver and collector services I'm not going to go",
    "start": "2079490",
    "end": "2085669"
  },
  {
    "text": "too deep on these because it's kind of just basically auto-generated code a lot of it from that Twitter model but you",
    "start": "2085669",
    "end": "2091429"
  },
  {
    "text": "can see we've got the same Twitter model here that I showed earlier then we've got a go application that actually runs",
    "start": "2091429",
    "end": "2097128"
  },
  {
    "text": "that Twitter twerp server so within each of my micro services here I've got a",
    "start": "2097129",
    "end": "2102410"
  },
  {
    "text": "docker file and in this case I'm using the standard go doc of docker image",
    "start": "2102410",
    "end": "2107750"
  },
  {
    "text": "that's published to docker hub it's probably not best practice we'd go like one of the nice benefits of go is that",
    "start": "2107750",
    "end": "2113780"
  },
  {
    "text": "it builds static binaries they're normally very small couple of megabytes in most cases whereas with this it's got",
    "start": "2113780",
    "end": "2119480"
  },
  {
    "text": "a whole operating system and actually compiles my application in the resulting dock file docker image is a couple of",
    "start": "2119480",
    "end": "2124790"
  },
  {
    "text": "hundred makes so fine for testing playing around debugging production you'd probably want to start from",
    "start": "2124790",
    "end": "2130220"
  },
  {
    "text": "scratch or something and use a different method so I got my docker file in each of my microcircuits is here I've got a",
    "start": "2130220",
    "end": "2137300"
  },
  {
    "text": "docker compose valve and in this compose file I define my two containers so I say",
    "start": "2137300",
    "end": "2142880"
  },
  {
    "text": "okay I've got my collector service and I've got my archiver service and the build build parameter in here is just",
    "start": "2142880",
    "end": "2150619"
  },
  {
    "text": "going to tell docker compose when I run it with - slash build to actually go into that directory and build using the",
    "start": "2150619",
    "end": "2156319"
  },
  {
    "text": "dock file that's in that directory when I push it push it to that location and that long URL there is an ECR",
    "start": "2156319",
    "end": "2163039"
  },
  {
    "text": "registry URL and then I defined my environment variables so in this case my search term but I want to subscribe to",
    "start": "2163039",
    "end": "2169099"
  },
  {
    "text": "and actually follow all the tweets I put Amazon this took me quite a while to",
    "start": "2169099",
    "end": "2174380"
  },
  {
    "text": "find a search term but I felt comfortable showing on screen in front of a whole lot of people where it could",
    "start": "2174380",
    "end": "2180260"
  },
  {
    "text": "potentially lose my job so caveat if while I'm doing this something absolutely horrific comes up on screen",
    "start": "2180260",
    "end": "2186019"
  },
  {
    "text": "please don't tell my manager I like my job and then configure the other",
    "start": "2186019",
    "end": "2191450"
  },
  {
    "text": "parameters there and then we've got the same similar story for the archive a service below so one of the nice things",
    "start": "2191450",
    "end": "2197839"
  },
  {
    "text": "about docker composes it makes network communication between services really really easy so my my containers have got",
    "start": "2197839",
    "end": "2205460"
  },
  {
    "text": "name archiver and collector and actually I can just use those as host names so within my application I can just talk to",
    "start": "2205460",
    "end": "2211789"
  },
  {
    "text": "collector as a DNS name and docker compose is going to set that up for me automatically so if I open up a terminal",
    "start": "2211789",
    "end": "2219079"
  },
  {
    "text": "now is that big enough at the back ish",
    "start": "2219079",
    "end": "2229269"
  },
  {
    "text": "so I'm in my directory for on docker compose up it's gonna bring up my two",
    "start": "2229269",
    "end": "2236359"
  },
  {
    "text": "services and they're gonna run and it's gonna subscribe to a whole load of tweets and output the tweets and I'm",
    "start": "2236359",
    "end": "2242180"
  },
  {
    "text": "going to stop that before it shows something highly inappropriate because twitter is like that so these are my",
    "start": "2242180",
    "end": "2248630"
  },
  {
    "text": "services up and running you can see I've got messages coming from my archive a service and I've got my collector running as well my two Mike receivers",
    "start": "2248630",
    "end": "2255170"
  },
  {
    "text": "are talking together locally so in it I can now continue develop iterate and work on my services locally and just run",
    "start": "2255170",
    "end": "2261109"
  },
  {
    "text": "them in docker compose whenever I want to whenever I want to run them so the",
    "start": "2261109",
    "end": "2266210"
  },
  {
    "text": "other thing I can do is push and actually push these up to ECS I need to",
    "start": "2266210",
    "end": "2272329"
  },
  {
    "text": "authenticate using that command line I showed you earlier because I haven't plugin installed but this this will",
    "start": "2272329",
    "end": "2278809"
  },
  {
    "text": "allow you straight from docker compose just to push up to ECR when you're ready so the flip side of",
    "start": "2278809",
    "end": "2284329"
  },
  {
    "text": "this now is actually getting this running within AWS so for this I'm using cloud formation",
    "start": "2284329",
    "end": "2290880"
  },
  {
    "text": "so here I've got a cloud formation template and this is copied from the repository I showed you earlier the",
    "start": "2290880",
    "end": "2297240"
  },
  {
    "text": "reference architecture that comes with the two sample micro-services you can actually rip the one straight out of",
    "start": "2297240",
    "end": "2302790"
  },
  {
    "text": "there and just add in your image so in this case I've got an e CS service and I've got my task definition that's got",
    "start": "2302790",
    "end": "2311070"
  },
  {
    "text": "my containers in so this is very similar to the docker compose file and I pass in things like environment variables in",
    "start": "2311070",
    "end": "2317100"
  },
  {
    "text": "here etc I set up some centralized logging so one of the cool things about",
    "start": "2317100",
    "end": "2323460"
  },
  {
    "text": "using e CS is it's got really tight integration with cloud which logs so",
    "start": "2323460",
    "end": "2329130"
  },
  {
    "text": "cloud watch logs just by specifying some log configuration here so a lot of group",
    "start": "2329130",
    "end": "2334530"
  },
  {
    "text": "and a region to send my logs to I can automatically get all of my logs aggregated from all of my containers",
    "start": "2334530",
    "end": "2339810"
  },
  {
    "text": "standard out and standard error into cloud watch logs so in order to deploy",
    "start": "2339810",
    "end": "2344880"
  },
  {
    "text": "this I could just run AWS CloudFormation create stack give it a stack name so",
    "start": "2344880",
    "end": "2353850"
  },
  {
    "text": "production tweets in this case and then pass in my template file so that's going",
    "start": "2353850",
    "end": "2359550"
  },
  {
    "text": "to go away and that's going to start creating my my stack and deploying it onto AWS if I go and look and here now",
    "start": "2359550",
    "end": "2368100"
  },
  {
    "text": "within cloud formation okay I can see my services started creating if I look at",
    "start": "2368100",
    "end": "2373440"
  },
  {
    "text": "the resources that cloud formation is working on I can see ok it's creating my centralized login group it's created a",
    "start": "2373440",
    "end": "2378690"
  },
  {
    "text": "Kinesis stream for me and very shortly that will actually start deploying the ECS services as well so if i go away and",
    "start": "2378690",
    "end": "2386190"
  },
  {
    "text": "look in ECS for example I can see here",
    "start": "2386190",
    "end": "2393600"
  },
  {
    "start": "2391000",
    "end": "2612000"
  },
  {
    "text": "I've got my production cluster that we deployed with cloud formation and at the",
    "start": "2393600",
    "end": "2398610"
  },
  {
    "text": "moment the service hasn't appeared there we go so we've got our production tweet service now we can see there's a desired",
    "start": "2398610",
    "end": "2405300"
  },
  {
    "text": "task of one so what this is doing right now is pulling that container images contain an image from ECR so as I",
    "start": "2405300",
    "end": "2412080"
  },
  {
    "text": "mentioned it's a couple hundred Meg's it's going to take a few seconds there just to pull that and what we'll be able",
    "start": "2412080",
    "end": "2418290"
  },
  {
    "text": "to see is if we go in and look at the tasks and see we've got one task pending",
    "start": "2418290",
    "end": "2424440"
  },
  {
    "text": "and shortly that's gonna pull the container engine it will be up and running so give that a second",
    "start": "2424440",
    "end": "2435528"
  },
  {
    "text": "we're going to cloud watch and look at the cloud walks log section and search",
    "start": "2441410",
    "end": "2448580"
  },
  {
    "text": "for production okay so because I set up the centralized logging within my AWS",
    "start": "2448580",
    "end": "2454250"
  },
  {
    "text": "account within the task definition I can now go into production tweets there's a log group and have a look and see okay",
    "start": "2454250",
    "end": "2460550"
  },
  {
    "text": "that actual logs from my container so I can see the archivist service and you",
    "start": "2460550",
    "end": "2465710"
  },
  {
    "text": "get the same experience as docker compose locally I can go and look at all the containers across all my hosts as",
    "start": "2465710",
    "end": "2471140"
  },
  {
    "text": "they scale out of scale in and actually see the logs probably no one tried to",
    "start": "2471140",
    "end": "2476900"
  },
  {
    "text": "get a tweet up there cheaply so before",
    "start": "2476900",
    "end": "2482630"
  },
  {
    "text": "we continue any further who it knows what metric filters are in cloud watch",
    "start": "2482630",
    "end": "2488390"
  },
  {
    "text": "logs a couple of people this is a serve this a part of car watch logs that we",
    "start": "2488390",
    "end": "2493880"
  },
  {
    "text": "don't really talk enough about I think it provides a really really nice way to create alarms and graphs and and",
    "start": "2493880",
    "end": "2500650"
  },
  {
    "text": "programmatic events that fire when something in cloud watch logs happens so",
    "start": "2500650",
    "end": "2505820"
  },
  {
    "text": "as an application developer or ops person I probably want to know if my containers output anything with the word",
    "start": "2505820",
    "end": "2511490"
  },
  {
    "text": "error right and I want to be alerted on that and I want to be able to visually track that in a graph so within cloud",
    "start": "2511490",
    "end": "2517340"
  },
  {
    "text": "watch logs you can do that by setting up a metric filter so if I take my production tweets log groups so all of",
    "start": "2517340",
    "end": "2522920"
  },
  {
    "text": "my micro services create a metric filter here I could search for the word error",
    "start": "2522920",
    "end": "2529010"
  },
  {
    "text": "and or just error I can test that and at the moment okay out of a sample of 50",
    "start": "2529010",
    "end": "2534560"
  },
  {
    "text": "events out of my log there are no lines mentioning error good cool but at some point there might be so I can then give",
    "start": "2534560",
    "end": "2541820"
  },
  {
    "text": "this metric a name errors in tweets can",
    "start": "2541820",
    "end": "2547520"
  },
  {
    "text": "create that I can then go and create cloud watch alarms based on that so maybe I want to trigger you know a hook",
    "start": "2547520",
    "end": "2554240"
  },
  {
    "text": "into an agonal system or Promethea system or something that I'm running somewhere else or maybe I want to email someone and alert someone whenever",
    "start": "2554240",
    "end": "2560360"
  },
  {
    "text": "something like that happens the other thing you can do is if I just load this",
    "start": "2560360",
    "end": "2566300"
  },
  {
    "text": "up here this is a graph that shows all of the incoming requests to our Twitter service you can see we're shortly",
    "start": "2566300",
    "end": "2572600"
  },
  {
    "text": "earlier this morning I actually kill before the demo but there's some previous historic logs there if any",
    "start": "2572600",
    "end": "2578089"
  },
  {
    "text": "errors appear in here right because I created that metric they're gonna appear in here they're gonna be automatically",
    "start": "2578089",
    "end": "2583280"
  },
  {
    "text": "graphs for me I can actually go and click this little page icon up here and",
    "start": "2583280",
    "end": "2588700"
  },
  {
    "text": "view logs in the time range so I could select this specific time period where the error occurred and then straight",
    "start": "2588700",
    "end": "2595460"
  },
  {
    "text": "away go straight down and see the container logs at that particular time across all the containers in my",
    "start": "2595460",
    "end": "2601039"
  },
  {
    "text": "architecture so really really nice easy way of setting up programmatic alerts and diving quickly into the relevant",
    "start": "2601039",
    "end": "2607099"
  },
  {
    "text": "area the logs okay I've just put this in",
    "start": "2607099",
    "end": "2617390"
  },
  {
    "start": "2612000",
    "end": "2657000"
  },
  {
    "text": "fullscreen we'll see how this goes so next steps here we've created this",
    "start": "2617390",
    "end": "2623000"
  },
  {
    "text": "service it's up and running it's collecting tweets next steps are probably to do things like integrate",
    "start": "2623000",
    "end": "2629180"
  },
  {
    "text": "with Kinesis or maybe you want to build a dashboard to show various search terms etc and build graphs except sure the",
    "start": "2629180",
    "end": "2635869"
  },
  {
    "text": "good news is you don't have to do any of that because we made it forward Yui and you just need to click a button it's going to deploy for you so there's a",
    "start": "2635869",
    "end": "2642049"
  },
  {
    "text": "blog post that we published recently URL their slides are going to be shared that",
    "start": "2642049",
    "end": "2647359"
  },
  {
    "text": "has a cloud formation template you can actually deploy this straightaway and start analyzing tweets it's a good use",
    "start": "2647359",
    "end": "2653510"
  },
  {
    "text": "case for machine learning here they use it to try and predict patterns etc okay",
    "start": "2653510",
    "end": "2659510"
  },
  {
    "start": "2657000",
    "end": "2673000"
  },
  {
    "text": "so we've got our service up and running we thrown it into e CSEC s is now running in it's a long-running service",
    "start": "2659510",
    "end": "2664549"
  },
  {
    "text": "so it's automatically gonna be restarted if it fails self-healing architecture etc etc what are the other things that",
    "start": "2664549",
    "end": "2670819"
  },
  {
    "text": "we need for production cost optimization we haven't talked about cost at all yet",
    "start": "2670819",
    "end": "2676670"
  },
  {
    "start": "2673000",
    "end": "2686000"
  },
  {
    "text": "so I've got my service I know I probably want to be running it all the time right because I want it to be collecting",
    "start": "2676670",
    "end": "2682880"
  },
  {
    "text": "tweets all the time what's the best way of optimizing costs there so if you're",
    "start": "2682880",
    "end": "2687920"
  },
  {
    "start": "2686000",
    "end": "2735000"
  },
  {
    "text": "deploying with e CS onto ec2 instances there's a couple of options available for you because they're just ec2",
    "start": "2687920",
    "end": "2693770"
  },
  {
    "text": "instances you can take advantage of some of the pricing mechanisms that come with ec2 so things like reserved instances so",
    "start": "2693770",
    "end": "2700910"
  },
  {
    "text": "our eyes reserved instances allow you to tell us hey Amazon I'm probably going to want that instance for you know",
    "start": "2700910",
    "end": "2707960"
  },
  {
    "text": "year or three years in return we'll give you a cost saving by committing to that it helps us plan so these are our eyes",
    "start": "2707960",
    "end": "2716330"
  },
  {
    "text": "really good strategy here is to reserve your baseline capacity so if I know that on any normal day I get an average of",
    "start": "2716330",
    "end": "2723530"
  },
  {
    "text": "five instances I need running my containers but actually I have peaks and troughs I could reserve those five",
    "start": "2723530",
    "end": "2729380"
  },
  {
    "text": "instances full-time and then when I pick up I can just use on demand pricing for that another really cool way of saving",
    "start": "2729380",
    "end": "2737720"
  },
  {
    "start": "2735000",
    "end": "2838000"
  },
  {
    "text": "costs is to spot flee so spot is a way of you bidding on unused capacity in our datacenter you know you see you can get",
    "start": "2737720",
    "end": "2744980"
  },
  {
    "text": "really really good cost savings by doing this up to about ninety ninety-five percent in some cases and basically",
    "start": "2744980",
    "end": "2751160"
  },
  {
    "text": "you're bidding on that unused capacity and you set your bid price and we have a price that we think is like the market",
    "start": "2751160",
    "end": "2757400"
  },
  {
    "text": "demand price for that particular instance type or family and if your bid price is above our market price you get",
    "start": "2757400",
    "end": "2763460"
  },
  {
    "text": "that instance the flip side of that is we could take that instance away if there's a run in our in our availability",
    "start": "2763460",
    "end": "2770720"
  },
  {
    "text": "zones or regions for a particular instance type and the price shoots up that could go above your bid price when",
    "start": "2770720",
    "end": "2777230"
  },
  {
    "text": "that happens you're gonna get two minutes warning and then we're gonna take the instance away so you need to",
    "start": "2777230",
    "end": "2782300"
  },
  {
    "text": "bear this in mind it's not suitable for all use cases if you have transient workloads batch workloads devtest work",
    "start": "2782300",
    "end": "2788900"
  },
  {
    "text": "clothes it's gonna save you a lot of money for production workloads there are things you can do to minimize the risk",
    "start": "2788900",
    "end": "2794450"
  },
  {
    "text": "of losing your instances like normally with spot you basically bid on an",
    "start": "2794450",
    "end": "2799670"
  },
  {
    "text": "instance type so see for large and you bid on it in a particular easy that's",
    "start": "2799670",
    "end": "2805640"
  },
  {
    "text": "not a very diverse bidding strategy there's something called spot fleet in AWS that integrates well with ECS as",
    "start": "2805640",
    "end": "2811160"
  },
  {
    "text": "well where you basically say I don't really care what availability zone I don't really care what instance family",
    "start": "2811160",
    "end": "2816800"
  },
  {
    "text": "or type AWS I just want this much CPU or this much memory and I want it spread out as much as possible so this is a",
    "start": "2816800",
    "end": "2823700"
  },
  {
    "text": "really nice way of diversifying your bid reducing greatly reducing the risk of losing those instances and I've got",
    "start": "2823700",
    "end": "2830630"
  },
  {
    "text": "customers in financial services that run production workloads with ECS on spot but it is an individual risk",
    "start": "2830630",
    "end": "2836060"
  },
  {
    "text": "conversation for you to think about so ECS clusters within AWS are really",
    "start": "2836060",
    "end": "2843470"
  },
  {
    "start": "2838000",
    "end": "2887000"
  },
  {
    "text": "really easy to create right it's one command normally you can have those clusters up and running so don't limit yourself to just one",
    "start": "2843470",
    "end": "2849410"
  },
  {
    "text": "cluster it's really common to have like a prod cluster and a non-pro cluster maybe you have PCI certified workloads",
    "start": "2849410",
    "end": "2856609"
  },
  {
    "text": "for handling with credit cards and you want to minimize the scope of any PCI audit so you want to have a separate",
    "start": "2856609",
    "end": "2862099"
  },
  {
    "text": "cluster that runs your PCI work clothes again a common use case they can use different pricing strategies as well so",
    "start": "2862099",
    "end": "2868970"
  },
  {
    "text": "you could have a dev cluster that uses spottily a production cluster that uses reserved instances and and flows into on",
    "start": "2868970",
    "end": "2875390"
  },
  {
    "text": "demand for those peaks and maybe you've got a batch processing cluster that takes advantage of GPUs or something for",
    "start": "2875390",
    "end": "2881030"
  },
  {
    "text": "example you know that was a separate cluster as well so don't don't limit yourself to just one cluster it's a",
    "start": "2881030",
    "end": "2888710"
  },
  {
    "start": "2887000",
    "end": "2988000"
  },
  {
    "text": "little bit about scaling when we deployed we didn't actually define any scaling properties for our services there's two ways of auto scaling with",
    "start": "2888710",
    "end": "2895460"
  },
  {
    "text": "ECS the first is the container instances again if you're using Fargate you don't",
    "start": "2895460",
    "end": "2901010"
  },
  {
    "text": "need to worry about this but if you're using ec2 you're probably gonna want to scale in and out that pool of compute so",
    "start": "2901010",
    "end": "2907849"
  },
  {
    "text": "auto scaling applies here right you can use normal ec2 auto scaling these are just ec2 instances so",
    "start": "2907849",
    "end": "2913250"
  },
  {
    "text": "you can scale in and out a really good metric here is the memory reservation metric for ECS so how much memory have I",
    "start": "2913250",
    "end": "2921619"
  },
  {
    "text": "reserved for my containers for my tasks and scale in and out based on that I metric that's that's a good one a lot of",
    "start": "2921619",
    "end": "2929180"
  },
  {
    "text": "customers use successfully the other scaling mechanism is application auto",
    "start": "2929180",
    "end": "2935299"
  },
  {
    "text": "scaling and this is at the container level not the host level so yeah your your pool will compute my scale in and",
    "start": "2935299",
    "end": "2941270"
  },
  {
    "text": "out automatically but you maybe you've got a scenario where you have an engine X container for example and you know",
    "start": "2941270",
    "end": "2946730"
  },
  {
    "text": "that that nginx container can handle 30,000 connections a second arbitrary number you probably want to scale in and",
    "start": "2946730",
    "end": "2953779"
  },
  {
    "text": "out the number of nginx containers you're running based on the incoming connection rate so that's where the",
    "start": "2953779",
    "end": "2958910"
  },
  {
    "text": "application auto scaling comes in so when you deploy a service into ECS you can set up your auto scaling there and",
    "start": "2958910",
    "end": "2964789"
  },
  {
    "text": "again you can choose which metric you want to scale based on so you can scale on CPU or memory usage or even a custom",
    "start": "2964789",
    "end": "2972260"
  },
  {
    "text": "metric number of sales made per second or something all these are possible options",
    "start": "2972260",
    "end": "2977599"
  },
  {
    "text": "this one I can't give you an easy you know go-to recommendation for what your scaling metric can be this one is going",
    "start": "2977599",
    "end": "2983660"
  },
  {
    "text": "to be very specific to your applications and workloads okay next security haven't",
    "start": "2983660",
    "end": "2991880"
  },
  {
    "start": "2988000",
    "end": "3068000"
  },
  {
    "text": "spoken much about security either yet let's talk through some options around best practices with when it comes to security so the first thing that a lot",
    "start": "2991880",
    "end": "2999650"
  },
  {
    "text": "of people ask me is okay we've deployed our ECS instances now how do we patch them how do we do that without any",
    "start": "2999650",
    "end": "3006430"
  },
  {
    "text": "downtime if you're using the cloud formation reference architecture I shared earlier or cloud formation or",
    "start": "3006430",
    "end": "3012069"
  },
  {
    "text": "terraform for example this is pretty easy within cloud formation there's something called an auto scaling rolling",
    "start": "3012069",
    "end": "3019329"
  },
  {
    "text": "update policy an auto scaling rolling update policy within your cloud",
    "start": "3019329",
    "end": "3025480"
  },
  {
    "text": "formation template it's going to tell it don't take down all my instances at once do it in a rolling fashion so what we've",
    "start": "3025480",
    "end": "3033309"
  },
  {
    "text": "got in this case is a cloud formation template with an AMI and this is the",
    "start": "3033309",
    "end": "3038319"
  },
  {
    "text": "idea of you know the base operating system and if we ever want to change that if we add in this update policy to",
    "start": "3038319",
    "end": "3044559"
  },
  {
    "text": "our template as well the auto scaling group is automatically going to take down you know one instance at a time or",
    "start": "3044559",
    "end": "3050710"
  },
  {
    "text": "however whatever speed you choose to do this at you can take that one upgrade it make sure it comes back online all right",
    "start": "3050710",
    "end": "3056319"
  },
  {
    "text": "and then move on to the next one so it's a really really easy way of rolling out those automated updates with zero",
    "start": "3056319",
    "end": "3061839"
  },
  {
    "text": "downtime across your fleet of ec2 instances the other side to security",
    "start": "3061839",
    "end": "3070329"
  },
  {
    "start": "3068000",
    "end": "3196000"
  },
  {
    "text": "with containers is what actually happens inside the containers I mentioned earlier this is one area that I don't",
    "start": "3070329",
    "end": "3075400"
  },
  {
    "text": "actually get asked about enough which worries me so what's going on inside your containers so with containers it",
    "start": "3075400",
    "end": "3083589"
  },
  {
    "text": "often worries security teams there's a perception of lack of visibility right maybe you're used to operating systems",
    "start": "3083589",
    "end": "3089170"
  },
  {
    "text": "an ami is an anti-virus etc and you have predefined security policies around those in place to a security person the",
    "start": "3089170",
    "end": "3096069"
  },
  {
    "text": "container can look like this opaque shipping container that they lose visibility with there's some really nice",
    "start": "3096069",
    "end": "3101680"
  },
  {
    "text": "options out there in the market for actually solving this problem it's not something that you need to reinvent yourself in most cases so the two main players in",
    "start": "3101680",
    "end": "3109219"
  },
  {
    "text": "this market that I'm aware of a twistlock who I'm showing off on screen here and also aqua security and",
    "start": "3109219",
    "end": "3115099"
  },
  {
    "text": "both of these companies have products that sit in your CI CD pipeline so when a developer commits a new docker file it",
    "start": "3115099",
    "end": "3122719"
  },
  {
    "text": "will actually go away and it will build that image and it will do a vulnerability scan on that image and look at all the packages held within",
    "start": "3122719",
    "end": "3129079"
  },
  {
    "text": "that image within the operating system etc within your container image look for things like CVA vulnerabilities etc and",
    "start": "3129079",
    "end": "3135259"
  },
  {
    "text": "actually reject it in the pipeline if there's any vulnerabilities you can set your risk threshold etc there and so",
    "start": "3135259",
    "end": "3141559"
  },
  {
    "text": "this is a really nice way of making sure nothing sneaks into production and if you've got security teams in your organization that are worried about",
    "start": "3141559",
    "end": "3147859"
  },
  {
    "text": "containers or maybe you're the security guy and you're here because you're worried about containers solutions like",
    "start": "3147859",
    "end": "3153559"
  },
  {
    "text": "twist lock and aqua are really really nice ways of attacking this problem",
    "start": "3153559",
    "end": "3159189"
  },
  {
    "text": "another top security tip is to minimize the surface attack area within your containers so this is something that I",
    "start": "3162400",
    "end": "3168410"
  },
  {
    "text": "didn't pay respect to when I built my demo earlier and I have my three or four hundred make container wherever possible",
    "start": "3168410",
    "end": "3173749"
  },
  {
    "text": "try and keep your containers as small as possible so when in docker you have the scratch container it's a really good",
    "start": "3173749",
    "end": "3179569"
  },
  {
    "text": "option if you're building go applications by the way go builds like near static binaries so you don't",
    "start": "3179569",
    "end": "3184819"
  },
  {
    "text": "actually need a full operating system in your container just to run a go binary so building from the scratch container",
    "start": "3184819",
    "end": "3190069"
  },
  {
    "text": "is great in many cases or just trying to minimize that as attack surface in general last slide of security as I am",
    "start": "3190069",
    "end": "3200150"
  },
  {
    "start": "3196000",
    "end": "3263000"
  },
  {
    "text": "roles permissions do not bake AWS credentials into your containers ever",
    "start": "3200150",
    "end": "3205489"
  },
  {
    "text": "full stop period don't do that there are better options so I am roles",
    "start": "3205489",
    "end": "3212119"
  },
  {
    "text": "I am rows have existed within ec2 for a long time they allow you to assign I am permissions to an ec2 instance you can",
    "start": "3212119",
    "end": "3219739"
  },
  {
    "text": "do that with ECS you can do it an instance level the downside to that is any container that runs on that instance",
    "start": "3219739",
    "end": "3226160"
  },
  {
    "text": "is going to get those same permissions so there are times when you might want that to happen things like maybe some",
    "start": "3226160",
    "end": "3232069"
  },
  {
    "text": "sort of logging solution or some sort of monitoring solution every container on the house should have those same",
    "start": "3232069",
    "end": "3237170"
  },
  {
    "text": "permissions most of the time oh you you want to scope those I am rolls more granular down to an individual container",
    "start": "3237170",
    "end": "3243850"
  },
  {
    "text": "or task and this is where you select the I am role per task so this is an option in your task definition JSON file or in",
    "start": "3243850",
    "end": "3251080"
  },
  {
    "text": "the UI when you deploy your container by the AWS management console so make sure you're using these don't bake",
    "start": "3251080",
    "end": "3258010"
  },
  {
    "text": "credentials in ideally not even with environment variables this is a nicer solution finally monitoring and logging",
    "start": "3258010",
    "end": "3266130"
  },
  {
    "start": "3263000",
    "end": "3296000"
  },
  {
    "text": "built-in to ECS you have built-in monitoring so it integrates with cloud",
    "start": "3266130",
    "end": "3271960"
  },
  {
    "text": "watch and you're gonna get graphs for things like CPU and memory utilization on your ECS cluster and hosts so really",
    "start": "3271960",
    "end": "3279550"
  },
  {
    "text": "really useful you don't need to do anything to get that up and running it's there by default and you can dig a bit deeper as well and look at things like",
    "start": "3279550",
    "end": "3285520"
  },
  {
    "text": "load balancers and see what's my average latency for this service or how many 500",
    "start": "3285520",
    "end": "3290590"
  },
  {
    "text": "errors am I getting and dive in I showed you earlier how you can dig in specifically to log items as well from",
    "start": "3290590",
    "end": "3295630"
  },
  {
    "text": "here if you don't want to use cloud watch that's cool there are other options out there as well maybe you're",
    "start": "3295630",
    "end": "3301960"
  },
  {
    "start": "3296000",
    "end": "3315000"
  },
  {
    "text": "running something like Prometheus already there's a handy plugin for Prometheus that someone wrote that actually exports all of your ECS metrics",
    "start": "3301960",
    "end": "3308980"
  },
  {
    "text": "straight to Prometheus so if you're using Prometheus this is a nice option",
    "start": "3308980",
    "end": "3314670"
  },
  {
    "start": "3315000",
    "end": "3345000"
  },
  {
    "text": "I mentioned centralized logging you get this just by adding these lines to your task definition I mentioned it with",
    "start": "3316360",
    "end": "3323260"
  },
  {
    "text": "cloud watch using the AWS logs docker plug-in there are other options there as well so things like syslog fluent base",
    "start": "3323260",
    "end": "3330490"
  },
  {
    "text": "plant Gelf etcetera all common options and you can just switch out the",
    "start": "3330490",
    "end": "3335500"
  },
  {
    "text": "definition in the task definition so instead of using AWS logs for cloud watch you can actually use Dockers",
    "start": "3335500",
    "end": "3341230"
  },
  {
    "text": "built-in plug-ins for those other logging solutions so when you use the",
    "start": "3341230",
    "end": "3347170"
  },
  {
    "text": "AWS logs one it's going to pull all those logs back centrally like I showed you in the console a minute and metric",
    "start": "3347170",
    "end": "3352870"
  },
  {
    "text": "filters are the key bit that allow you to take log items and turn them into alerts searches and filters and alarms",
    "start": "3352870",
    "end": "3361710"
  },
  {
    "text": "so I've kind of blasted through a whole load of different best practices everything it like a million miles an",
    "start": "3361740",
    "end": "3368680"
  },
  {
    "start": "3362000",
    "end": "3418000"
  },
  {
    "text": "hour and you like if you like me when you're watching these talks you'll probably take away 10% of if you're gonna take away anything from",
    "start": "3368680",
    "end": "3374750"
  },
  {
    "text": "this talk make it this slide this is the one you want to take a picture of this the one that you want to look at there's",
    "start": "3374750",
    "end": "3381110"
  },
  {
    "text": "a github repository created by one of our developer advocates Nathan Peck it's called awesome",
    "start": "3381110",
    "end": "3386330"
  },
  {
    "text": "ECS it contains everything about everything you need to know about containers and ECS and containers on AWS",
    "start": "3386330",
    "end": "3394010"
  },
  {
    "text": "so in that repo in the readme there's loads of sections like how to do service",
    "start": "3394010",
    "end": "3399230"
  },
  {
    "text": "meshes service discovery how to do Bluegreen deployments versus rolling deployments etc this is a really really",
    "start": "3399230",
    "end": "3406220"
  },
  {
    "text": "useful github repository and if there's anything that I mentioned during this talk and you find yourself months later",
    "start": "3406220",
    "end": "3411920"
  },
  {
    "text": "thinking what's that thing that guide from AWS was talking about chances are it's all on this page so at this point",
    "start": "3411920",
    "end": "3420800"
  },
  {
    "start": "3418000",
    "end": "3599000"
  },
  {
    "text": "I'm gonna hand over to QA and give you a chance to ask any question you want",
    "start": "3420800",
    "end": "3425840"
  },
  {
    "text": "about ACS and I'll try and answer it",
    "start": "3425840",
    "end": "3430900"
  },
  {
    "text": "have you at the microphone abhi huh",
    "start": "3430930",
    "end": "3434950"
  },
  {
    "text": "this is your moment any questions does",
    "start": "3438400",
    "end": "3445570"
  },
  {
    "text": "anyone have a question for Paul back around gotta get my okay well this is",
    "start": "3445570",
    "end": "3456790"
  },
  {
    "text": "impossible you talked about yeah he",
    "start": "3456790",
    "end": "3466780"
  },
  {
    "text": "talked about PPC networking idea for container so is that available for ECS",
    "start": "3466780",
    "end": "3474370"
  },
  {
    "text": "yes it is so one of the networking modes in ECS you you have bridge networking",
    "start": "3474370",
    "end": "3479770"
  },
  {
    "text": "mode which we use the docker bridge you have host networking mode which will just map ports onto the instance host",
    "start": "3479770",
    "end": "3484990"
  },
  {
    "text": "you have none which no network filled container the other one in the new one is a WSB PC that's the term to search",
    "start": "3484990",
    "end": "3492070"
  },
  {
    "text": "for on Google with that every task that comes up is going to get its own native IP address within the V PC and you'll",
    "start": "3492070",
    "end": "3499180"
  },
  {
    "text": "you'll find they can just communicate right there's no overlay network no encapsulation etc so yeah that's",
    "start": "3499180",
    "end": "3504490"
  },
  {
    "text": "absolutely an option right so does it need to remember the port of the host so",
    "start": "3504490",
    "end": "3510010"
  },
  {
    "text": "like for each of my container does it need to attach a specific port no that's",
    "start": "3510010",
    "end": "3516580"
  },
  {
    "text": "a really good question so in terms of the host when it creates the en I for your task definition your ports will be",
    "start": "3516580",
    "end": "3523870"
  },
  {
    "text": "mapped onto that so if I have a container for nginx that listens on port 80 that single IP address for my task",
    "start": "3523870",
    "end": "3529750"
  },
  {
    "text": "port 80 is going to be that container if I have other containers they're all going to map onto that single ini IP",
    "start": "3529750",
    "end": "3535960"
  },
  {
    "text": "address and what you'll find is that if you want to communicate between containers in a task definition they can",
    "start": "3535960",
    "end": "3542620"
  },
  {
    "text": "all just use that local host or that eni address and they can communicate between each other so it gets away from that",
    "start": "3542620",
    "end": "3548830"
  },
  {
    "text": "scenario where you can't run multiple versions of the same thing on port 80 on the same host you don't need to worry",
    "start": "3548830",
    "end": "3555370"
  },
  {
    "text": "about that with with the AWS VPC networking mode nice and are they available on Windows container as well",
    "start": "3555370",
    "end": "3563130"
  },
  {
    "text": "part I'd need to check fine find me afterwards and we can we can check the documentation okay thank you",
    "start": "3563130",
    "end": "3572160"
  },
  {
    "text": "there's a question at the front Abby just so that you get your full workout today and by the way we're gonna cover",
    "start": "3572510",
    "end": "3580549"
  },
  {
    "text": "possibly exhaustively networking in the Fargate one because I love a good",
    "start": "3580549",
    "end": "3586069"
  },
  {
    "text": "networking conversation so hi thanks and is it possible to pre-bake your image",
    "start": "3586069",
    "end": "3594829"
  },
  {
    "text": "for the container and deliver it through service catalog to our devs yes so the",
    "start": "3594829",
    "end": "3601700"
  },
  {
    "text": "quiz so yes you can so your ACS",
    "start": "3601700",
    "end": "3608559"
  },
  {
    "text": "container instances that run the actual containers you can actually bake containers into the ami and it just",
    "start": "3608559",
    "end": "3615290"
  },
  {
    "text": "means that docker is not going to have to pull it from your registry when it starts up that can be a lot of overhead",
    "start": "3615290",
    "end": "3620420"
  },
  {
    "text": "though it's not a it's not a way of working that I'd normally recommend simply because whenever you need to",
    "start": "3620420",
    "end": "3626750"
  },
  {
    "text": "change your version of any of your containers you have to bake another ami and publish it etc and roll your cluster",
    "start": "3626750",
    "end": "3632599"
  },
  {
    "text": "and it's it's gonna add to quite a bit of overhead docker itself will cache the image so the first time it pulls that",
    "start": "3632599",
    "end": "3638900"
  },
  {
    "text": "version of the image it's going to be cached locally on the ECS instance so any further pools of that same version",
    "start": "3638900",
    "end": "3644359"
  },
  {
    "text": "with the same char hash I'm not gonna pull over the network again so they were just in caching they're ultimately if",
    "start": "3644359",
    "end": "3650450"
  },
  {
    "text": "you need superfast scaling and you've got super large container images you may",
    "start": "3650450",
    "end": "3655579"
  },
  {
    "text": "take that route it's it's more baking in compliance so that the devs don't do bad things okay so I would normally",
    "start": "3655579",
    "end": "3663829"
  },
  {
    "text": "recommend fixing that in your CI CD pipeline so getting automated in checks checks in place there to give feedback",
    "start": "3663829",
    "end": "3670609"
  },
  {
    "text": "earlier than deployment back to developers so using things like twist lock if you're using cloud formation",
    "start": "3670609",
    "end": "3676280"
  },
  {
    "text": "using things like CFN nag which is a cloud formation static analysis plug-in that's available on github and using",
    "start": "3676280",
    "end": "3683000"
  },
  {
    "text": "those sort of tools to get into the CI CD pipeline just to reduce that feedback loop if the developers gotta wait until",
    "start": "3683000",
    "end": "3688309"
  },
  {
    "text": "like it's all the way in nearly at production before they receive that then they're probably switch context and so",
    "start": "3688309",
    "end": "3695240"
  },
  {
    "text": "wherever possible try not do it that late but happy to dive a bit deeper on specifics if you want to chat about",
    "start": "3695240",
    "end": "3701720"
  },
  {
    "text": "specific requirements can we just like while creating the subs",
    "start": "3701720",
    "end": "3710619"
  },
  {
    "text": "continue let's say we create the container can we just specify the exact",
    "start": "3710619",
    "end": "3715779"
  },
  {
    "text": "port rather than the dynamic port yeah so so when you specify in your task",
    "start": "3715779",
    "end": "3721839"
  },
  {
    "text": "definition the ports for each container normally you specify it with a host port",
    "start": "3721839",
    "end": "3727299"
  },
  {
    "text": "in a container port when you're using the BPC networking mode you don't need to specify the host port you just",
    "start": "3727299",
    "end": "3733569"
  },
  {
    "text": "specify the container port when you're using the application load balancer you don't need to specify the host port you",
    "start": "3733569",
    "end": "3739269"
  },
  {
    "text": "can just let it automatically generate one for you and the application load balancer is going to know and it's going",
    "start": "3739269",
    "end": "3744309"
  },
  {
    "text": "to map that through for you automatically the the only time when you need to actually specify the host port is when",
    "start": "3744309",
    "end": "3750880"
  },
  {
    "text": "you're using like host networking mode or bridge mode and you want to actually not use the load application mode Bansal",
    "start": "3750880",
    "end": "3758259"
  },
  {
    "text": "or you're not using the Adobe PC mode",
    "start": "3758259",
    "end": "3762180"
  },
  {
    "text": "next one like it's kind of like problem which I'm facing normally like container",
    "start": "3773640",
    "end": "3780489"
  },
  {
    "text": "fire up on the docker compose kind of things when I just try to deploy it",
    "start": "3780489",
    "end": "3785890"
  },
  {
    "text": "right there is a problem but the problem is not like on the operating system",
    "start": "3785890",
    "end": "3792130"
  },
  {
    "text": "level it's the problem is on the application label like let's say on my case I know I just specify 64 right with",
    "start": "3792130",
    "end": "3800170"
  },
  {
    "text": "yeah it's just like we just need like more than that and it took like some",
    "start": "3800170",
    "end": "3805329"
  },
  {
    "text": "kind of like it took quite a long time to figure out that problem is there any way like we can't diagnose easily so if",
    "start": "3805329",
    "end": "3813969"
  },
  {
    "text": "you deploy a container into ecs and for whatever reason it fails to start due to like a configuration error or something",
    "start": "3813969",
    "end": "3820119"
  },
  {
    "text": "it's just is gonna keep retrying exactly that's the problem because in order to",
    "start": "3820119",
    "end": "3825519"
  },
  {
    "text": "diagnose I need to log on right so the answers to that a centralized logging so",
    "start": "3825519",
    "end": "3830709"
  },
  {
    "text": "that you're not going in and having to introspect each container and try and work out get the logs centralized back",
    "start": "3830709",
    "end": "3835809"
  },
  {
    "text": "to a central place that you can diagnose for logging that way but also the EECS console gives you a whole load of debugging information if you go into the",
    "start": "3835809",
    "end": "3842680"
  },
  {
    "text": "individual tasks in the ECS console it's really web UI you can see reasons on why it failed to start I mean you can use a",
    "start": "3842680",
    "end": "3849550"
  },
  {
    "text": "CLI as well to get the information but I'm talking about the application kind of let's say it is open which is working",
    "start": "3849550",
    "end": "3855670"
  },
  {
    "text": "perfectly fine but inside that container I have something right which is purling inside that container itself yeah and at",
    "start": "3855670",
    "end": "3863770"
  },
  {
    "text": "that time like you'll have the problem so is there any way to centralize",
    "start": "3863770",
    "end": "3869500"
  },
  {
    "text": "logging would be my main recommendation there but you you can also try for example if you're running on ec2 you can",
    "start": "3869500",
    "end": "3876760"
  },
  {
    "text": "just SSH into the hosts and you can inspect a running docker container there with the normal docker CLI tooling that",
    "start": "3876760",
    "end": "3884220"
  },
  {
    "text": "popular opinion here though but if if you're running into a problem where it's passing health checks but your",
    "start": "3885510",
    "end": "3890560"
  },
  {
    "text": "application is as messed up I generally feel like that's something that should have been diagnosed earlier in the local",
    "start": "3890560",
    "end": "3897670"
  },
  {
    "text": "process because it's it's preventing your application from functioning so that's something that it sounds like maybe you need tests earlier in the",
    "start": "3897670",
    "end": "3903760"
  },
  {
    "text": "process to catch an error like that so that you're not in a situation where you're trying to SSH you into a",
    "start": "3903760",
    "end": "3909040"
  },
  {
    "text": "production host to diagnose something so it sounds like a case for more unit and",
    "start": "3909040",
    "end": "3914200"
  },
  {
    "text": "integration tests earlier on in the development process",
    "start": "3914200",
    "end": "3918180"
  },
  {
    "text": "yeah I think it's a common problem as works on my machine and then you need a",
    "start": "3924150",
    "end": "3931120"
  },
  {
    "text": "you need a local environment that it matches more closely your production environments that you can debug where that is she's coming from okay thank you",
    "start": "3931120",
    "end": "3941080"
  },
  {
    "text": "everyone [Applause]",
    "start": "3941080",
    "end": "3946010"
  }
]