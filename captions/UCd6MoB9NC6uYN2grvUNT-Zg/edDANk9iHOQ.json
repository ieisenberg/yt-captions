[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "In this video, you’ll see how to implement \nAWS Control Tower Account Factory",
    "start": "71",
    "end": "4057"
  },
  {
    "text": "Customization with Cisco Secure Firewall.",
    "start": "4057",
    "end": "6511"
  },
  {
    "text": "With this solution, enterprises can \ndeploy Cisco Secure Firewall in an",
    "start": "7127",
    "end": "10853"
  },
  {
    "text": "AWS hub account and then inspect \ntraffic flowing into spoke VPCs (referred",
    "start": "10853",
    "end": "15694"
  },
  {
    "text": "to as ingress inspection), out of the \nVPCs (referred to as egress inspection),",
    "start": "15694",
    "end": "20403"
  },
  {
    "text": "and between workloads (referred to \nas east-west inspection) to protect",
    "start": "20403",
    "end": "24318"
  },
  {
    "text": "against threats and unwanted access.",
    "start": "24318",
    "end": "26247"
  },
  {
    "start": "27000",
    "end": "76000"
  },
  {
    "text": "Let’s take a quick look at the solution architecture.",
    "start": "27208",
    "end": "29450"
  },
  {
    "text": "From the AWS Control Tower interface, the \nuser selects hub and spoke products to deploy.",
    "start": "30138",
    "end": "34796"
  },
  {
    "text": "The hub blueprint provisions the \nCisco Firewall stack in the hub account",
    "start": "35579",
    "end": "38892"
  },
  {
    "text": "utilizing AWS best practices.",
    "start": "38893",
    "end": "41191"
  },
  {
    "text": "The spoke blueprint provisions the \nspoke product in one or more spoke",
    "start": "41891",
    "end": "45051"
  },
  {
    "text": "accounts where the application \nworkloads will reside.",
    "start": "45051",
    "end": "47420"
  },
  {
    "text": "Once traffic is flowing, each spoke \naccount redirects its traffic into the",
    "start": "48393",
    "end": "51782"
  },
  {
    "text": "hub account for inspection.",
    "start": "51782",
    "end": "53152"
  },
  {
    "text": "This video will focus on the \ningress inspection use case.",
    "start": "54314",
    "end": "57312"
  },
  {
    "text": "Internet traffic entering a spoke account \nis redirected to the AWS Gateway Load",
    "start": "58000",
    "end": "62030"
  },
  {
    "text": "Balancer, inspected by the Cisco Firewall\nappliances based on a defined policy,",
    "start": "62030",
    "end": "66548"
  },
  {
    "text": "and then sent back into the \nspoke account and its destination.",
    "start": "66548",
    "end": "69519"
  },
  {
    "text": "To get started, let’s go to AWS Control \nTower to see the account creation process.",
    "start": "70302",
    "end": "74522"
  },
  {
    "start": "76000",
    "end": "149000"
  },
  {
    "text": "First, we’ll create a new hub account.",
    "start": "76775",
    "end": "78550"
  },
  {
    "text": "This screen includes a section for \nAccount Factory Customization.",
    "start": "79049",
    "end": "82144"
  },
  {
    "text": "Here, the user specifies the AWS Service \nCatalog account where their blueprints",
    "start": "83413",
    "end": "87175"
  },
  {
    "text": "have been published and \nselects the hub product to deploy.",
    "start": "87175",
    "end": "89789"
  },
  {
    "text": "For this example, we’ve already specified\n a Service Catalog account, a hub",
    "start": "90904",
    "end": "94528"
  },
  {
    "text": "blueprint product, and the parameters \nneeded to deploy the hub blueprint.",
    "start": "94528",
    "end": "97904"
  },
  {
    "text": "Let’s create the account.",
    "start": "98770",
    "end": "100061"
  },
  {
    "text": "Let’s look at our new hub account.",
    "start": "101674",
    "end": "103121"
  },
  {
    "text": "We can see that a series of CloudFormation \ntemplates deployed successfully.",
    "start": "105837",
    "end": "109207"
  },
  {
    "text": "Next, let’s see the process \nof creating a spoke account.",
    "start": "109681",
    "end": "112384"
  },
  {
    "text": "As with the hub account, the user enters\ntheir spoke account information here.",
    "start": "115148",
    "end": "118792"
  },
  {
    "text": "We’ve already entered the parameters \nassociated with the spoke blueprint,",
    "start": "119918",
    "end": "122774"
  },
  {
    "text": "so let’s create the account.",
    "start": "122774",
    "end": "124097"
  },
  {
    "text": "Here’s the spoke account we \ncreated, with the spoke blueprint.",
    "start": "127367",
    "end": "130080"
  },
  {
    "text": "Now let’s test our ingress \ninspection architecture.",
    "start": "130709",
    "end": "133192"
  },
  {
    "text": "To do that, we’ll return to the hub account.",
    "start": "133382",
    "end": "135173"
  },
  {
    "text": "We’ll log into the management UI of our \nfirewall instances to validate what we",
    "start": "138000",
    "end": "141590"
  },
  {
    "text": "deployed in the hub account.",
    "start": "141590",
    "end": "142948"
  },
  {
    "start": "149000",
    "end": "235000"
  },
  {
    "text": "We’ll navigate to the Cisco Defense \nOrchestrator to find the new cloud-",
    "start": "149268",
    "end": "152296"
  },
  {
    "text": "delivered Firewall Management Center.",
    "start": "152296",
    "end": "154216"
  },
  {
    "text": "We’ll look at the tenant configuration.",
    "start": "155841",
    "end": "157471"
  },
  {
    "text": "Let’s navigate to Device Management.",
    "start": "159594",
    "end": "161424"
  },
  {
    "text": "We have two instances under the \nIEAutoScaleGroup, representing two devices.",
    "start": "166429",
    "end": "170504"
  },
  {
    "text": "We also have two instances \nfor the east-west group.",
    "start": "171654",
    "end": "174156"
  },
  {
    "text": "The errors are due to the fact that \nno traffic is running on the devices.",
    "start": "174701",
    "end": "177889"
  },
  {
    "text": "The VNIs aren’t receiving packets yet \nbecause we’re not generating traffic.",
    "start": "182230",
    "end": "185702"
  },
  {
    "text": "At the moment, these are simple devices\nwith a simple Access Control policy on",
    "start": "186781",
    "end": "190337"
  },
  {
    "text": "them that allows everything.",
    "start": "190337",
    "end": "191777"
  },
  {
    "text": "Let’s navigate to Event Logging \nso we can see the ingress traffic.",
    "start": "192880",
    "end": "196000"
  },
  {
    "text": "Let’s search for the two IP addresses \nassociated with our EC2 instances.",
    "start": "198064",
    "end": "201717"
  },
  {
    "text": "For the purposes of this example, we’ve now \ngenerated some test traffic against those devices.",
    "start": "202061",
    "end": "206269"
  },
  {
    "text": "Let’s take a look at the live event data.",
    "start": "207455",
    "end": "209162"
  },
  {
    "text": "Under UserAgent, we can see that \ntraffic was generated through our",
    "start": "214048",
    "end": "216766"
  },
  {
    "text": "Chrome client WebKit-based browser.",
    "start": "216766",
    "end": "218913"
  },
  {
    "text": "Here are the events of our CIS workloads.",
    "start": "222530",
    "end": "224602"
  },
  {
    "text": "Right now, we’re only seeing the \nApplication Load Balancer IP address",
    "start": "224981",
    "end": "228047"
  },
  {
    "text": "because we’re not using the ingress route.",
    "start": "228047",
    "end": "229859"
  },
  {
    "text": "Later on, we’ll set that up so we can \nsee the real IP address of the customer.",
    "start": "230547",
    "end": "234140"
  },
  {
    "text": "Let’s take a look at the built-in \nSecureX ribbon, which can be used",
    "start": "235635",
    "end": "238623"
  },
  {
    "text": "to scan through the observables.",
    "start": "238623",
    "end": "240239"
  },
  {
    "text": "Notice that there are some \npublic IP addresses in the traffic.",
    "start": "241330",
    "end": "244049"
  },
  {
    "text": "Let’s select one and \ninvestigate it in Threat Response.",
    "start": "244429",
    "end": "247145"
  },
  {
    "text": "From Threat Response, we can view \nCisco’s intelligence on this IP address.",
    "start": "248212",
    "end": "251875"
  },
  {
    "text": "For instance, we can see the \nverdicts for this IP address.",
    "start": "253025",
    "end": "255691"
  },
  {
    "text": "We can see additional insights \nthrough SecureX integrations.",
    "start": "256830",
    "end": "259733"
  },
  {
    "text": "If this IP address were known to be \nassociated with anything malicious,",
    "start": "261548",
    "end": "264617"
  },
  {
    "text": "it would be noted on this page.",
    "start": "264617",
    "end": "266000"
  },
  {
    "text": "We can also pivot straight into the \nTalos Intelligence website from here.",
    "start": "268882",
    "end": "272085"
  },
  {
    "text": "Here we can see some details \nabout this particular IP address.",
    "start": "273769",
    "end": "276613"
  },
  {
    "start": "278000",
    "end": "351000"
  },
  {
    "text": "Next, let’s return to Cisco Defense Orchestrator \nto review some additional information.",
    "start": "278771",
    "end": "282725"
  },
  {
    "text": "The cloud-delivered Firewall \nManagement Center also has a",
    "start": "283899",
    "end": "286388"
  },
  {
    "text": "built-in Dynamic Attributes Connector.",
    "start": "286389",
    "end": "288314"
  },
  {
    "text": "Our AWS account is included here, \nalong with an associated query.",
    "start": "289441",
    "end": "292842"
  },
  {
    "text": "Let’s filter for a custom key \ncontaining the value “www.”",
    "start": "294000",
    "end": "297436"
  },
  {
    "text": "We haven’t designated any workload \ntags, so nothing is showing up here.",
    "start": "302991",
    "end": "306212"
  },
  {
    "text": "Let’s launch an EC2 instance in the \nAWS Region the Dynamic Attributes",
    "start": "307079",
    "end": "310489"
  },
  {
    "text": "Connector is configured for.",
    "start": "310489",
    "end": "311909"
  },
  {
    "text": "Next, we’ll select the new \ninstance and add a tag to it.",
    "start": "336979",
    "end": "339632"
  },
  {
    "text": "We’ll specify the key as “CSDAC” \nand the value as “www.”",
    "start": "345324",
    "end": "349762"
  },
  {
    "start": "351000",
    "end": "401000"
  },
  {
    "text": "Now we’ll return to the Dynamic Attributes \nConnector and check the query again.",
    "start": "352466",
    "end": "355932"
  },
  {
    "text": "The filter has detected the \ninstance we just launched.",
    "start": "362611",
    "end": "365007"
  },
  {
    "text": "When you define the name of an \nattribute filter, it becomes the name",
    "start": "368482",
    "end": "371130"
  },
  {
    "text": "of a dynamic object in the \nFirewall Management Center.",
    "start": "371131",
    "end": "373773"
  },
  {
    "text": "Let’s navigate to Object Management \nto see the dynamic object we created.",
    "start": "379600",
    "end": "382966"
  },
  {
    "text": "Here’s our test object.",
    "start": "388000",
    "end": "389113"
  },
  {
    "text": "And here’s the IP address associated\n with the instance we launched.",
    "start": "391295",
    "end": "394257"
  },
  {
    "text": "Let’s associate this object with a policy.",
    "start": "397151",
    "end": "399141"
  },
  {
    "start": "401000",
    "end": "463000"
  },
  {
    "text": "Let’s use the EWAutoScaleACP policy.",
    "start": "402474",
    "end": "405181"
  },
  {
    "text": "We’ll add an Access Control rule \nto allow traffic from the test source",
    "start": "406189",
    "end": "409079"
  },
  {
    "text": "address to some destinations.",
    "start": "409079",
    "end": "410764"
  },
  {
    "text": "We have many options here.",
    "start": "411820",
    "end": "413022"
  },
  {
    "text": "For instance, we can define a dynamic \nobject as a destination, or we can define",
    "start": "413378",
    "end": "417637"
  },
  {
    "text": "a rule against the dynamic object as a destination.",
    "start": "417637",
    "end": "420278"
  },
  {
    "text": "Let’s block any traffic to our set of \ndynamically changing IP addresses.",
    "start": "420943",
    "end": "424439"
  },
  {
    "text": "As you spin up instances using the custom \ntag, the policy is automatically applied.",
    "start": "430266",
    "end": "434242"
  },
  {
    "text": "Let’s save our changes to \nthe Access Control policy.",
    "start": "435677",
    "end": "438000"
  },
  {
    "text": "This object is dynamically updated, so we don't \nneed to push or deploy it on the firewall itself.",
    "start": "439494",
    "end": "444081"
  },
  {
    "text": "You’ve just seen how to implement \nAWS Control Tower Account Factory",
    "start": "447224",
    "end": "451453"
  },
  {
    "text": "Customization with Cisco Secure \nFirewall for an ingress inspection use case.",
    "start": "451453",
    "end": "454395"
  },
  {
    "text": "You can learn more about this topic in \nthe description and links for this video.",
    "start": "456352",
    "end": "459387"
  },
  {
    "text": "Thanks for watching. Now it’s your turn to try.",
    "start": "459577",
    "end": "461510"
  }
]