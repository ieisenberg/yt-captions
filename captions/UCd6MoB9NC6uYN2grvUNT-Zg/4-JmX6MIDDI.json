[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "text": "welcome my name is said I'm a Solutions Architect with AWS I've been with AWS",
    "start": "60",
    "end": "6899"
  },
  {
    "text": "for around 4 and 1/2 years now and I'm joined by my colleague hi i'm kuba",
    "start": "6899",
    "end": "13200"
  },
  {
    "text": "Boychuk i'm a principal engineer in AWS where i work with simple q service",
    "start": "13200",
    "end": "19410"
  },
  {
    "text": "simple notification service amazon mq and also step functions and simple",
    "start": "19410",
    "end": "24510"
  },
  {
    "text": "workflow and I've been with AWS for 3 and a half years now and today we're going to talk about messaging the",
    "start": "24510",
    "end": "32308"
  },
  {
    "text": "importance of messaging in your software solutions different use cases and how",
    "start": "32309",
    "end": "37770"
  },
  {
    "text": "they map to different messaging services we have in the cloud and we're also going to see some demos and how those",
    "start": "37770",
    "end": "45329"
  },
  {
    "text": "messaging services work let's start with a bold statement that my colleague Tim",
    "start": "45329",
    "end": "51149"
  },
  {
    "text": "Bray made so from our experience these",
    "start": "51149",
    "end": "59670"
  },
  {
    "text": "are the three things that move you towards messaging being cloud native being large-scale distributed and not",
    "start": "59670",
    "end": "66930"
  },
  {
    "text": "having messaging in these cases seems like a bug in your architecture and it makes sense when you think about it when",
    "start": "66930",
    "end": "73350"
  },
  {
    "text": "you used to have a big monolith application all the communication happened internally and you didn't need",
    "start": "73350",
    "end": "78600"
  },
  {
    "text": "an extra component for that and as you move towards micro services there are new communication paths which now you",
    "start": "78600",
    "end": "86340"
  },
  {
    "text": "messaging can feel very well and solve the problem of communication between",
    "start": "86340",
    "end": "91380"
  },
  {
    "text": "components for you so we like to think",
    "start": "91380",
    "end": "96960"
  },
  {
    "text": "about messaging as the fourth pillar on which you build your mobile app modern",
    "start": "96960",
    "end": "103229"
  },
  {
    "text": "applications let's talk about some basics in messaging we deal with passing",
    "start": "103229",
    "end": "112740"
  },
  {
    "start": "110000",
    "end": "135000"
  },
  {
    "text": "messages around the systems that send messages will typically be called message producers the systems will",
    "start": "112740",
    "end": "120090"
  },
  {
    "text": "consume these messages and work on them our message consumers and what is passed",
    "start": "120090",
    "end": "125310"
  },
  {
    "text": "around our messages so what are messages well it's whatever you want to send between two systems here's an example",
    "start": "125310",
    "end": "132500"
  },
  {
    "text": "of of a message explaining a hotel booking in hotel booking system and the",
    "start": "132500",
    "end": "140240"
  },
  {
    "start": "135000",
    "end": "217000"
  },
  {
    "text": "developers chose Jason as the format for messages you can pass the same around of",
    "start": "140240",
    "end": "146240"
  },
  {
    "text": "information using whatever format you would like and here's the same message and described in XML and when you send",
    "start": "146240",
    "end": "158030"
  },
  {
    "text": "messages around it's up to the producer and consumer service to establish what the format will be and what the contents",
    "start": "158030",
    "end": "164510"
  },
  {
    "text": "of the messages are but you also can send attributes along with your messages",
    "start": "164510",
    "end": "170870"
  },
  {
    "text": "and attributes are just key values of whatever you want to attach to your message they can have a business meaning",
    "start": "170870",
    "end": "178810"
  },
  {
    "text": "they can have some technical meaning so you may ask yourself a question for this",
    "start": "178810",
    "end": "184910"
  },
  {
    "text": "particular piece of data where should I put it should it go into the payload or should I attach it as an attribute to the",
    "start": "184910",
    "end": "191000"
  },
  {
    "text": "message and the answer for that one is the payload can get encrypted the",
    "start": "191000",
    "end": "198830"
  },
  {
    "text": "attributes are never encrypted the attribute can be used for filtering messages out for routing them between",
    "start": "198830",
    "end": "205340"
  },
  {
    "text": "your services so looking at a particular piece of information this is like the",
    "start": "205340",
    "end": "210860"
  },
  {
    "text": "distinction you can make does it go into attributes or goes into the message payload and the name W as we have a",
    "start": "210860",
    "end": "219769"
  },
  {
    "start": "217000",
    "end": "277000"
  },
  {
    "text": "bunch of systems and services for providing messaging services to you",
    "start": "219769",
    "end": "225190"
  },
  {
    "text": "we've got sqs for queues we've got SNS for topics we've got Kinesis for data",
    "start": "225190",
    "end": "231200"
  },
  {
    "text": "streams and last year that we invent we've launched Amazon MQ and MSN MQ is a",
    "start": "231200",
    "end": "240130"
  },
  {
    "text": "hosted activemq broker and we're not going to talk about Amazon MQ in this",
    "start": "240130",
    "end": "245510"
  },
  {
    "text": "session because the purpose of Amazon MQ is to enable you to move your existing software into the cloud to move your",
    "start": "245510",
    "end": "252470"
  },
  {
    "text": "existing software that talks to some on-premise broker and basically point it",
    "start": "252470",
    "end": "257959"
  },
  {
    "text": "towards a hosted activemq instance in the cloud in this talk we're going to focus on",
    "start": "257959",
    "end": "263740"
  },
  {
    "text": "messaging services provided by sqs SNS and Kinesis",
    "start": "263740",
    "end": "269310"
  },
  {
    "text": "and i'm gonna hand it over to Syd to talk about customer use cases for",
    "start": "269310",
    "end": "275020"
  },
  {
    "text": "messaging thanks kuba so we'll talk",
    "start": "275020",
    "end": "280600"
  },
  {
    "start": "277000",
    "end": "302000"
  },
  {
    "text": "about for customers we'll look at the use cases why they needed a messaging platform to begin",
    "start": "280600",
    "end": "286780"
  },
  {
    "text": "with what the requirements were they look at which AWS service fits their",
    "start": "286780",
    "end": "292810"
  },
  {
    "text": "requirements and finally bring it all together by looking at their actual architecture these are real customer use",
    "start": "292810",
    "end": "298750"
  },
  {
    "text": "cases and real architectures who here",
    "start": "298750",
    "end": "303910"
  },
  {
    "start": "302000",
    "end": "344000"
  },
  {
    "text": "has sharp groceries from Amazon fresh arrays of hands oh that's less than what I expected for",
    "start": "303910",
    "end": "313810"
  },
  {
    "text": "those of you who don't know Amazon fresh is grocery delivery service in select cities in the United States now if you",
    "start": "313810",
    "end": "321370"
  },
  {
    "text": "go and look at the Amazon fresh website you'll realize that the products vary",
    "start": "321370",
    "end": "327430"
  },
  {
    "text": "based on which city you are in and that's because customers like locally sourced fresh products and product which",
    "start": "327430",
    "end": "334240"
  },
  {
    "text": "are in season which means the Amazon fresh team has to continuously update",
    "start": "334240",
    "end": "340060"
  },
  {
    "text": "the catalog based on customer feedback so for that they build a product",
    "start": "340060",
    "end": "347470"
  },
  {
    "start": "344000",
    "end": "358000"
  },
  {
    "text": "selection portal and the idea is a selection manager browses through this portal on a daily basis and makes",
    "start": "347470",
    "end": "353800"
  },
  {
    "text": "changes now from an architecture",
    "start": "353800",
    "end": "360190"
  },
  {
    "start": "358000",
    "end": "416000"
  },
  {
    "text": "standpoint any change made to their portal has to be automatically pushed to a retail and",
    "start": "360190",
    "end": "367540"
  },
  {
    "text": "purchase system which would restock inventory now what better way to",
    "start": "367540",
    "end": "373830"
  },
  {
    "text": "decouple or connect to loosely sir loosely coupled systems than to use a",
    "start": "373830",
    "end": "379270"
  },
  {
    "text": "messaging platform now let's look at what requirements they had they wanted a",
    "start": "379270",
    "end": "385300"
  },
  {
    "text": "durable persistent and highly available system the system should scale so",
    "start": "385300",
    "end": "392740"
  },
  {
    "text": "whether you are sending one message of 1 million messages you don't you don't have to care about that let the messaging platform handle that",
    "start": "392740",
    "end": "400020"
  },
  {
    "text": "lastly it should be easy to manage all this feature should not come at the cost",
    "start": "400020",
    "end": "405880"
  },
  {
    "text": "of complexity so I'll let kuba talk to us on what's the right messaging platform in this year's case Thanks",
    "start": "405880",
    "end": "414930"
  },
  {
    "start": "416000",
    "end": "697000"
  },
  {
    "text": "let's talk about Amazon SQL standard queues they've been on available in AWS",
    "start": "416280",
    "end": "422410"
  },
  {
    "text": "since it'll be its launch ready in the middle you can see how you should think about an SQ a standard queue it's",
    "start": "422410",
    "end": "430000"
  },
  {
    "text": "a collection of messages kind of ordered but not really on the left-hand side",
    "start": "430000",
    "end": "435490"
  },
  {
    "text": "you're gonna see producers that will send messages into the queue and on the right hand side you will see consumers",
    "start": "435490",
    "end": "441520"
  },
  {
    "text": "consuming from this queue and let's see how a standard sqs queue behaves when",
    "start": "441520",
    "end": "447670"
  },
  {
    "text": "you start sending messages to it and receiving from it to understand how it behaves for your service so let's say",
    "start": "447670",
    "end": "454210"
  },
  {
    "text": "the first producer attempts to send message a into the queue calls send",
    "start": "454210",
    "end": "463030"
  },
  {
    "text": "message on sqs and SQS stores the",
    "start": "463030",
    "end": "468160"
  },
  {
    "text": "message durably multiple copies that you don't really see when you're gonna start receiving the message but when you see",
    "start": "468160",
    "end": "473919"
  },
  {
    "text": "an okay response from sqs you can be sure that the message is not lost like it's stored in multiple copies across",
    "start": "473919",
    "end": "479530"
  },
  {
    "text": "available results what happens when another producer sends a message B into",
    "start": "479530",
    "end": "485140"
  },
  {
    "text": "the queue call send message now in this scenario let's imagine that there was",
    "start": "485140",
    "end": "490690"
  },
  {
    "text": "some kind of a networking problem when the second producer was calling same message sqs saw the call and stored the",
    "start": "490690",
    "end": "499240"
  },
  {
    "text": "message durably but the producer saw some kind of a socket timeout he kind of",
    "start": "499240",
    "end": "504310"
  },
  {
    "text": "doesn't know whether sqs got the message or didn't so what the producer will do is he'll retry the send and because of",
    "start": "504310",
    "end": "514210"
  },
  {
    "text": "that retry SQ standard cannot actually detect that is a duplicate message it will store another copy for you so",
    "start": "514210",
    "end": "521380"
  },
  {
    "text": "that's one of the reasons why you can see sometimes duplicates in a standard sqs queue it's enough that the sender",
    "start": "521380",
    "end": "528670"
  },
  {
    "text": "retries because it's so calm some connectivity issue so let's see how a standard Q behaves",
    "start": "528670",
    "end": "535610"
  },
  {
    "text": "when you want to consume messages from it now one of the most important",
    "start": "535610",
    "end": "541440"
  },
  {
    "text": "features is sqs is the first s in the name simple when you want to consume",
    "start": "541440",
    "end": "546480"
  },
  {
    "text": "messages the only thing you need to do is to call receive message and provide the qrl you don't get to tell sqs which",
    "start": "546480",
    "end": "554730"
  },
  {
    "text": "message you want to receive is the responsibility of ask us to select the next best message to give out to you so",
    "start": "554730",
    "end": "562260"
  },
  {
    "text": "the first consumer calls receive message",
    "start": "562260",
    "end": "567300"
  },
  {
    "text": "and SQS selects the message to return and hands it back to the consumer and",
    "start": "567300",
    "end": "572960"
  },
  {
    "text": "the consumer can start working on it now notice that the message is still in the queue it's not immediately removed it's",
    "start": "572960",
    "end": "580830"
  },
  {
    "text": "invisible and the you can you can control the invisibility timeout and",
    "start": "580830",
    "end": "587240"
  },
  {
    "text": "this invisibility timeout make sure that if another consumer wants to fetch",
    "start": "587600",
    "end": "593400"
  },
  {
    "text": "another message sqs won't give out this particular message because someone is already working on it",
    "start": "593400",
    "end": "599780"
  },
  {
    "text": "so the second consumer call sushis",
    "start": "599780",
    "end": "605490"
  },
  {
    "text": "message and for the second one ask us decided to give out this other message and again start the invisibility timeout",
    "start": "605490",
    "end": "612500"
  },
  {
    "text": "what happens when you successfully process the message so the first consumer is done with the message he's",
    "start": "612500",
    "end": "618990"
  },
  {
    "text": "now supposed to call delete message on this on the message handle that he got",
    "start": "618990",
    "end": "624630"
  },
  {
    "text": "which actually causes the removal of the message from the queue so only when the",
    "start": "624630",
    "end": "630600"
  },
  {
    "text": "consumer acknowledges that he successfully processed the message and calls the deed message the message is",
    "start": "630600",
    "end": "636180"
  },
  {
    "text": "gone this guarantees that you will process the message at least once you",
    "start": "636180",
    "end": "641430"
  },
  {
    "text": "will always get it so what happens when consumer has a problem consuming the message she cannot understand the",
    "start": "641430",
    "end": "647310"
  },
  {
    "text": "message there's a code back something is wrong the easiest solution for the",
    "start": "647310",
    "end": "652380"
  },
  {
    "text": "consumer is just to forget about the message and do nothing doesn't even need to tell ask us anything it can be just",
    "start": "652380",
    "end": "660630"
  },
  {
    "text": "an exception in your code or maybe the machine just fried and stopped processing anything what happens next is the invisibility",
    "start": "660630",
    "end": "668250"
  },
  {
    "text": "timeout on the message that he was working on expires and the message is",
    "start": "668250",
    "end": "673290"
  },
  {
    "text": "available for consumption again let me",
    "start": "673290",
    "end": "678660"
  },
  {
    "text": "illustrate this behavior using a pre-recorded demo that I've prepared and",
    "start": "678660",
    "end": "684050"
  },
  {
    "text": "just so it's like visible what's happening in the queue the demo has a",
    "start": "684050",
    "end": "689069"
  },
  {
    "text": "lot of thread dot sleep in it so it's running way slower than the actual service does so in the middle we have",
    "start": "689069",
    "end": "698930"
  },
  {
    "start": "697000",
    "end": "844000"
  },
  {
    "text": "the queue you're going to start a program to see the query the contents of",
    "start": "698930",
    "end": "704100"
  },
  {
    "text": "the queue and we can see that currently the queue has no messages in it on the",
    "start": "704100",
    "end": "712259"
  },
  {
    "text": "right-hand side we have a first consumer started and since there are no messages",
    "start": "712259",
    "end": "718800"
  },
  {
    "text": "he's not receiving any messages yet from the queue we start another consumer so",
    "start": "718800",
    "end": "724470"
  },
  {
    "text": "we have both consumers that try to pull for the next message from the queue let's start the producer we connect this",
    "start": "724470",
    "end": "730769"
  },
  {
    "text": "one we'll send messages labeled a so he's sending sequential messages and on",
    "start": "730769",
    "end": "738540"
  },
  {
    "text": "the right-hand side you can see how both consumers in parallel are just grabbing the next available message there's no",
    "start": "738540",
    "end": "745440"
  },
  {
    "text": "coordination the processing happens out of order let's start sending messages",
    "start": "745440",
    "end": "750600"
  },
  {
    "text": "labeled B so now you see how both",
    "start": "750600",
    "end": "759300"
  },
  {
    "text": "consumers just compete over any available message next from the backlog there is no ordering happening the",
    "start": "759300",
    "end": "764339"
  },
  {
    "text": "numbers go up and down they just it's a bag of messages that is an sqs queue",
    "start": "764339",
    "end": "769730"
  },
  {
    "text": "what's nice about it is when you start the third consumer or any number of",
    "start": "769730",
    "end": "775079"
  },
  {
    "text": "consumers you just increase the throughput of consumers it's super elastic so now we have three just",
    "start": "775079",
    "end": "782250"
  },
  {
    "text": "competing over available backlog let's",
    "start": "782250",
    "end": "787500"
  },
  {
    "text": "have a third producer into the mix",
    "start": "787500",
    "end": "791029"
  },
  {
    "text": "and immediately you see how all the three consumers are just processing",
    "start": "794940",
    "end": "800050"
  },
  {
    "text": "through the backlog and it's important to note here that the number of",
    "start": "800050",
    "end": "806920"
  },
  {
    "text": "producers you can have in an SQL standard queue the number of consumers you can have the number of messages you can send through a queue is close to",
    "start": "806920",
    "end": "814590"
  },
  {
    "text": "unlimited you don't have to provision anything anything you throw it and ask you a standard Q the Q will gladly",
    "start": "814590",
    "end": "820240"
  },
  {
    "text": "accept and serve you so it's very elastic and allows you to scale well that comes at a specific cost and the",
    "start": "820240",
    "end": "826900"
  },
  {
    "text": "cost is sometimes you will most likely get messages out of order you will get",
    "start": "826900",
    "end": "832300"
  },
  {
    "text": "sometimes duplicate messages so let's hear from Sid how the customer used and SQ standard q and how they solve the",
    "start": "832300",
    "end": "838900"
  },
  {
    "text": "problem of duplicates and message reordering",
    "start": "838900",
    "end": "842760"
  },
  {
    "start": "844000",
    "end": "926000"
  },
  {
    "text": "so Amazon fresh decided to use sqs Q now",
    "start": "844110",
    "end": "849760"
  },
  {
    "text": "one key thing to understand is that every message is independent and self-contained it contains a product ID",
    "start": "849760",
    "end": "857410"
  },
  {
    "text": "in this case milk and how much inventory has to be stocked up",
    "start": "857410",
    "end": "863460"
  },
  {
    "text": "so let's come to the two characteristics kuba mentioned which is out of order",
    "start": "863460",
    "end": "869350"
  },
  {
    "text": "messages so in this case let's say there was a second message which was for",
    "start": "869350",
    "end": "874390"
  },
  {
    "text": "restocking of some candies and now the",
    "start": "874390",
    "end": "880390"
  },
  {
    "text": "message is flipped and you got the milk message first that's not a problem because each message is self-contained",
    "start": "880390",
    "end": "886720"
  },
  {
    "text": "if we restock up the milk before candies I don't think anybody complaints except",
    "start": "886720",
    "end": "891730"
  },
  {
    "text": "maybe the kids now the second attribute duplicates so let's say we got the candy",
    "start": "891730",
    "end": "900490"
  },
  {
    "text": "message twice that's not a problem 12,000 candies is anyways better than 6000 candies problem solve now I'm just",
    "start": "900490",
    "end": "907570"
  },
  {
    "text": "kidding so the way the consumer tackles this problem is by keeping a timestamp",
    "start": "907570",
    "end": "912730"
  },
  {
    "text": "of the last a record of the last seen time stamp for a given product ID and it",
    "start": "912730",
    "end": "919060"
  },
  {
    "text": "discards any message it receives with a timestamp which is a duplicate or an older one",
    "start": "919060",
    "end": "926310"
  },
  {
    "start": "926000",
    "end": "969000"
  },
  {
    "text": "now let's look at the complete architecture for the perk selection portal they went completely serverless",
    "start": "926310",
    "end": "933519"
  },
  {
    "text": "they hosted their website on s3 using the s3 starting host static hosting",
    "start": "933519",
    "end": "938589"
  },
  {
    "text": "website they were using client-side scripting like JavaScript to make API",
    "start": "938589",
    "end": "944829"
  },
  {
    "text": "calls to API gateway which would in turn launch lambda functions and this would dynamically update their website they",
    "start": "944829",
    "end": "952990"
  },
  {
    "text": "were storing their per catalog on RDS and any change made to IDs what would",
    "start": "952990",
    "end": "958600"
  },
  {
    "text": "eventually trigger or immediately trigger a lambda function which would then write the message to the sqs queue",
    "start": "958600",
    "end": "967320"
  },
  {
    "text": "let's talk about a second use case Comcast comcast is a global",
    "start": "968730",
    "end": "973930"
  },
  {
    "start": "969000",
    "end": "984000"
  },
  {
    "text": "telecommunications corporation many of us have Comcast Xfinity devices",
    "start": "973930",
    "end": "979690"
  },
  {
    "text": "which provide Internet and television to our homes their use case involved a CRM",
    "start": "979690",
    "end": "986890"
  },
  {
    "start": "984000",
    "end": "1091000"
  },
  {
    "text": "data management system a bunch of customer changes for example a customer",
    "start": "986890",
    "end": "993220"
  },
  {
    "text": "requests the new internet connection they buy a new internet modem a work order is generated for an engineer to go",
    "start": "993220",
    "end": "999730"
  },
  {
    "text": "and install the Internet service so all of those changes are being absorbed by",
    "start": "999730",
    "end": "1004890"
  },
  {
    "text": "Comcast and then they have to be processed by a target CRM system but",
    "start": "1004890",
    "end": "1010829"
  },
  {
    "text": "they wanted to store all these messages in a message platform in a message queue which were pending and still had to be",
    "start": "1010829",
    "end": "1018300"
  },
  {
    "text": "processed so let's look at some of the requirements",
    "start": "1018300",
    "end": "1023660"
  },
  {
    "text": "yeah so they required in order processing for a given customer ID so we",
    "start": "1031460",
    "end": "1039319"
  },
  {
    "text": "had to make sure that the customer messages were processed in order",
    "start": "1039320",
    "end": "1045520"
  },
  {
    "text": "secondly for distributed processing multiple customer messages can be processed parallely so they can have",
    "start": "1045520",
    "end": "1051680"
  },
  {
    "text": "thousands of customer messages coming in for different customer IDs and they are all processed by parallel threads and",
    "start": "1051680",
    "end": "1059080"
  },
  {
    "text": "they also required only once processing of a change now all that translates to these",
    "start": "1059080",
    "end": "1066410"
  },
  {
    "text": "requirements on a messaging platform durable scalable persistence that's given and expected but in addition we",
    "start": "1066410",
    "end": "1074300"
  },
  {
    "text": "needed first-in first-out kind of functionality and we cannot have message",
    "start": "1074300",
    "end": "1079640"
  },
  {
    "text": "duplicates now I'll hand it over to kuba to explain which a doubler service they",
    "start": "1079640",
    "end": "1087050"
  },
  {
    "text": "went with Thanks so here we're going to talk about a new type of queue that was",
    "start": "1087050",
    "end": "1094100"
  },
  {
    "start": "1091000",
    "end": "1408000"
  },
  {
    "text": "introduced in sqs two years ago as qs5 for queues and immediately looking at the image you can see the difference the",
    "start": "1094100",
    "end": "1101000"
  },
  {
    "text": "messages are ordered but it's not just one sequence of ordered messages and this image we see three and it's exactly",
    "start": "1101000",
    "end": "1108350"
  },
  {
    "text": "to solve this particular use case where you don't really need strict ordering of everything in your system because that",
    "start": "1108350",
    "end": "1114800"
  },
  {
    "text": "would limit your scalability to purchase things in a single sequence you can have just one consumer working on them",
    "start": "1114800",
    "end": "1122470"
  },
  {
    "text": "typically what you need is you need to process things in sequence for a",
    "start": "1122470",
    "end": "1128390"
  },
  {
    "text": "specific subgroup of messages like a customer account ID but you want to work",
    "start": "1128390",
    "end": "1133700"
  },
  {
    "text": "on multiple accounts in parallel so let's see how ask us FIFO does it and it again starts let's again start with",
    "start": "1133700",
    "end": "1139790"
  },
  {
    "text": "producers so now the first producers wants to send a message to send a message to the FIFO queue the producer",
    "start": "1139790",
    "end": "1145790"
  },
  {
    "text": "needs to tell us what is the message group for which is a message belongs to now what's nice about it is just a",
    "start": "1145790",
    "end": "1152510"
  },
  {
    "text": "string tag you put on a message you don't have to pre create this group you can send as many as you like there's no",
    "start": "1152510",
    "end": "1158540"
  },
  {
    "text": "limitation and you don't need to explicitly create them it's just a tag on a message so the producer called sendmessage and",
    "start": "1158540",
    "end": "1165470"
  },
  {
    "text": "SQS fifo and SQS five four stores it in",
    "start": "1165470",
    "end": "1170720"
  },
  {
    "text": "an ordered way to the particular group and again",
    "start": "1170720",
    "end": "1175789"
  },
  {
    "text": "messages stored durably with multiple copies across aziz you don't see that but like once you've seen okay from us",
    "start": "1175789",
    "end": "1182330"
  },
  {
    "text": "the message is persisted durably what happens when the second producer sends a",
    "start": "1182330",
    "end": "1188510"
  },
  {
    "text": "message this time to a group g3 similar",
    "start": "1188510",
    "end": "1193730"
  },
  {
    "text": "case network broke we have a socket timeout on the producer asked you I saw",
    "start": "1193730",
    "end": "1198890"
  },
  {
    "text": "the sent call appended the message to appropriate group but the producer",
    "start": "1198890",
    "end": "1204679"
  },
  {
    "text": "doesn't know that so he retries now the",
    "start": "1204679",
    "end": "1210740"
  },
  {
    "text": "case with Aeschylus 5o cues is that it keeps track of the last five minutes of",
    "start": "1210740",
    "end": "1216260"
  },
  {
    "text": "all the identifiers of the messages you send to it even if they were consumed",
    "start": "1216260",
    "end": "1221270"
  },
  {
    "text": "already and is able to detect that this is a retried sent for the same message B",
    "start": "1221270",
    "end": "1226970"
  },
  {
    "text": "that goes into the queue so in SQ is five okay's now duplicate is",
    "start": "1226970",
    "end": "1233600"
  },
  {
    "text": "introduced we just returned and okay to the producer because we already have that message as long as you retry within",
    "start": "1233600",
    "end": "1239990"
  },
  {
    "text": "five minutes you're good no duplicate appears in the queue okay so now we saw",
    "start": "1239990",
    "end": "1245960"
  },
  {
    "text": "how messages are sent to FIFO let's see how the consumers now use a FIFO queue",
    "start": "1245960",
    "end": "1253870"
  },
  {
    "text": "language standard queues it's very simple you just call receive a message on and SQS FIFO queue you don't get to",
    "start": "1253870",
    "end": "1261289"
  },
  {
    "text": "tell which message you want to receive you cannot even say which group you want to receive from it's the responsibility",
    "start": "1261289",
    "end": "1267530"
  },
  {
    "text": "of the S key is 5oq to pick to pick the next best message for you to work on so",
    "start": "1267530",
    "end": "1273770"
  },
  {
    "text": "the first consumer calls receive and fifl decides to hand out message from",
    "start": "1273770",
    "end": "1279169"
  },
  {
    "text": "group g1 for him to consume and see starts working on it like in a standard",
    "start": "1279169",
    "end": "1286220"
  },
  {
    "text": "queues the message is still there in the queue is invisible but there's one extra change if this message is being worked",
    "start": "1286220",
    "end": "1293720"
  },
  {
    "text": "on from group g1 no other consumer can receive any other messages from Jaguar this is how we",
    "start": "1293720",
    "end": "1300840"
  },
  {
    "text": "preserve the ordering of messages within a group the entire group is kind of locked for you until the first consumer",
    "start": "1300840",
    "end": "1307740"
  },
  {
    "text": "is done with the first message so when another consumer calls receive message",
    "start": "1307740",
    "end": "1313350"
  },
  {
    "text": "on an SPS FIFO asked us five four can decide I'm gonna give you the first message from group t3 to work on so we",
    "start": "1313350",
    "end": "1321600"
  },
  {
    "text": "can start working on it what happens when you successfully process a message like an SQ a standard",
    "start": "1321600",
    "end": "1329399"
  },
  {
    "text": "you're supposed to call delete message to acknowledge that you're done with it which removes the message from the from",
    "start": "1329399",
    "end": "1336990"
  },
  {
    "text": "the queue and at that point it done blocks further processing of group g1",
    "start": "1336990",
    "end": "1342590"
  },
  {
    "text": "and other consumer can receive next message so if the third consumer calls",
    "start": "1342590",
    "end": "1350669"
  },
  {
    "text": "receive message he may be the one getting next the second message from group g1 so it's important to know that",
    "start": "1350669",
    "end": "1358320"
  },
  {
    "text": "you're still processing messages strictly ordered there's no other word processing happening but you don't have",
    "start": "1358320",
    "end": "1365610"
  },
  {
    "text": "any sort of guarantees who's gonna get the next message for a particular group all of your consumers can get message",
    "start": "1365610",
    "end": "1372059"
  },
  {
    "text": "from any available group so you don't have any type of consumer affinity",
    "start": "1372059",
    "end": "1377630"
  },
  {
    "text": "what happens when you fail to process a message similar to a skew standard you",
    "start": "1381950",
    "end": "1387320"
  },
  {
    "text": "can just forget about this message don't keep track of it and when they",
    "start": "1387320",
    "end": "1393049"
  },
  {
    "text": "invisibility timeout on the message expires the group is available for consumption again so let's see how this",
    "start": "1393049",
    "end": "1401690"
  },
  {
    "text": "all works in a demo again with pauses introduced so we can see what's happening",
    "start": "1401690",
    "end": "1408039"
  },
  {
    "start": "1408000",
    "end": "1565000"
  },
  {
    "text": "so like previously in the in the middle we have the queue itself and it's empty",
    "start": "1408549",
    "end": "1420279"
  },
  {
    "text": "let's start the first consumer and the only thing we need to tell the consumer",
    "start": "1420279",
    "end": "1426529"
  },
  {
    "text": "is just a identifier of the queue start another consumer queue is empty so",
    "start": "1426529",
    "end": "1432980"
  },
  {
    "text": "obviously they don't get any messages yet but now the interesting part starts",
    "start": "1432980",
    "end": "1438590"
  },
  {
    "text": "let's start the producer sending messages labelled a into the queue so",
    "start": "1438590",
    "end": "1448490"
  },
  {
    "text": "both consumers are always pulling for messages but you as you can see immediately only one of them is working",
    "start": "1448490",
    "end": "1454220"
  },
  {
    "text": "on the next available message from the queue when we start another producer sending messages labeled B now we have a",
    "start": "1454220",
    "end": "1463460"
  },
  {
    "text": "situation where both consumers are able to work on something because there are two groups that can be worked on and the",
    "start": "1463460",
    "end": "1471100"
  },
  {
    "text": "who works on which group can actually dynamically change if we start a third",
    "start": "1471100",
    "end": "1476360"
  },
  {
    "text": "consumer he will do some useful work but because because on we only have two",
    "start": "1476360",
    "end": "1482360"
  },
  {
    "text": "message groups in the queue only two out of three are actually doing anything in order to preserve ordering so if you",
    "start": "1482360",
    "end": "1494630"
  },
  {
    "text": "start this third producer sending messages with the label C we now have",
    "start": "1494630",
    "end": "1502250"
  },
  {
    "text": "three groups so three consumers can do useful work but again there's no affinity and you can see how like the",
    "start": "1502250",
    "end": "1508039"
  },
  {
    "text": "ownership of who's working on next changes dynamically what this means is",
    "start": "1508039",
    "end": "1513490"
  },
  {
    "text": "it's very elastic when it comes to adding more consumers in in a typical",
    "start": "1513490",
    "end": "1520090"
  },
  {
    "text": "use case where the messages describe changes to a customer account you have",
    "start": "1520090",
    "end": "1526680"
  },
  {
    "text": "preserved order but you can work on millions of different users and keep throwing more consumers at the FIFO",
    "start": "1526680",
    "end": "1533530"
  },
  {
    "text": "queue there is a limitation though a single FIFO queue has a limited",
    "start": "1533530",
    "end": "1538810"
  },
  {
    "text": "throughput the max it can get to is three hundreds of each of send receive",
    "start": "1538810",
    "end": "1544660"
  },
  {
    "text": "and delete per second so with batching you can get up to three thousand messages per second and let's",
    "start": "1544660",
    "end": "1551200"
  },
  {
    "text": "hear from said how the customer utilized message groups and how they worked",
    "start": "1551200",
    "end": "1556870"
  },
  {
    "text": "around this limitation of the throughput of a single type of you all right so",
    "start": "1556870",
    "end": "1566860"
  },
  {
    "start": "1565000",
    "end": "1616000"
  },
  {
    "text": "let's plug in sqs FIFO into the architecture now what Comcast did was",
    "start": "1566860",
    "end": "1573970"
  },
  {
    "text": "all messages for a given customer account number was sent to a different",
    "start": "1573970",
    "end": "1580240"
  },
  {
    "text": "message group inside and SQS FIFO queue",
    "start": "1580240",
    "end": "1584940"
  },
  {
    "text": "additionally they were able to use multiple sqs FIFO cues to get very high",
    "start": "1585270",
    "end": "1592000"
  },
  {
    "text": "throughput and they did this by shutting customer account numbers across multiple",
    "start": "1592000",
    "end": "1597070"
  },
  {
    "text": "message groups over different sqs FIFO queues and they kept a mapping of which",
    "start": "1597070",
    "end": "1605530"
  },
  {
    "text": "account number belongs to which message group in which sqs FIFO queue in a",
    "start": "1605530",
    "end": "1611650"
  },
  {
    "text": "dynamo DB database let's talk about our",
    "start": "1611650",
    "end": "1617410"
  },
  {
    "start": "1616000",
    "end": "1637000"
  },
  {
    "text": "next use case octa is an integrated identity and mobility management service",
    "start": "1617410",
    "end": "1623350"
  },
  {
    "text": "it lets users access their applications from anywhere anyplace anytime securely",
    "start": "1623350",
    "end": "1630640"
  },
  {
    "text": "by using services like single sign-on",
    "start": "1630640",
    "end": "1635010"
  },
  {
    "text": "octa captures bunch of events these are user events like authentication single",
    "start": "1637080",
    "end": "1643630"
  },
  {
    "text": "sign-on etc and they want to use these to perform streaming analysis to create",
    "start": "1643630",
    "end": "1652690"
  },
  {
    "text": "real-time dashboards as well as batch analysis now they wanted to use a",
    "start": "1652690",
    "end": "1659200"
  },
  {
    "text": "messaging platform which would store all of this even data and then the Apache a",
    "start": "1659200",
    "end": "1664570"
  },
  {
    "text": "storm computational platform would read from this messaging queue and perform",
    "start": "1664570",
    "end": "1669610"
  },
  {
    "text": "sliding-window analysis from a",
    "start": "1669610",
    "end": "1675070"
  },
  {
    "text": "requirement standpoint again durable scalable persistent but there's",
    "start": "1675070",
    "end": "1680169"
  },
  {
    "text": "a key difference here every message is not independent they wanted the ability",
    "start": "1680169",
    "end": "1687429"
  },
  {
    "text": "to go back and look at a bunch of messages to do analysis and detect",
    "start": "1687429",
    "end": "1695020"
  },
  {
    "text": "anomalies and create alerts so they wanted some kind of a message replay to",
    "start": "1695020",
    "end": "1701049"
  },
  {
    "text": "go back in time and look at them and do streaming analysis so I'll let kuba talk",
    "start": "1701049",
    "end": "1708789"
  },
  {
    "start": "1707000",
    "end": "2159000"
  },
  {
    "text": "about the ADA bliss service for this use case so here we can see a Kinesis data",
    "start": "1708789",
    "end": "1713950"
  },
  {
    "text": "stream and the first glance it looks kind of exactly I can ask you is FIFO queue but we'll see the differences as",
    "start": "1713950",
    "end": "1720880"
  },
  {
    "text": "we go along through how you send and receive from a Kinesis data stream so",
    "start": "1720880",
    "end": "1726549"
  },
  {
    "text": "again you have in here so let me take a step back and say for data streaming",
    "start": "1726549",
    "end": "1733330"
  },
  {
    "text": "typically a different vocabulary is used and when you talk about sending things",
    "start": "1733330",
    "end": "1738340"
  },
  {
    "text": "into a data stream you typically talk about putting records into a data stream and you talk about reading the stream",
    "start": "1738340",
    "end": "1745980"
  },
  {
    "text": "the back and what we see here is two shards where each shard has a provision",
    "start": "1745980",
    "end": "1751960"
  },
  {
    "text": "throughput so you can expect certain megabytes per second and records per second from a char and you can create as",
    "start": "1751960",
    "end": "1758230"
  },
  {
    "text": "many chars as you need when you work with the Keeney's data stream but chars need to be pre created they are not",
    "start": "1758230",
    "end": "1765010"
  },
  {
    "text": "created for you dynamically and you basically have to say I want 10 shards",
    "start": "1765010",
    "end": "1770679"
  },
  {
    "text": "12 shards so let's see how this works again through going through the cases of",
    "start": "1770679",
    "end": "1776320"
  },
  {
    "text": "sending and consuming the first producer wants to send message",
    "start": "1776320",
    "end": "1782320"
  },
  {
    "text": "a and in order for kinases data stream",
    "start": "1782320",
    "end": "1787660"
  },
  {
    "text": "to select which shard should be used you tagged your message with something",
    "start": "1787660",
    "end": "1793000"
  },
  {
    "text": "called a partition key which is very similar to the message group identifier",
    "start": "1793000",
    "end": "1798670"
  },
  {
    "text": "in FIFO it's just a string the partition key is not something you need to pre create is just a string you tag your",
    "start": "1798670",
    "end": "1804280"
  },
  {
    "text": "message with so the producer calls put record and now Kinesis looks at what was",
    "start": "1804280",
    "end": "1813130"
  },
  {
    "text": "supplied and needs to decide to which of these shards this new record should be",
    "start": "1813130",
    "end": "1818410"
  },
  {
    "text": "appended to and the way it's done is through hashing so imagine a hashing",
    "start": "1818410",
    "end": "1826390"
  },
  {
    "text": "algorithm which as output gives you a number what happens here is each shard",
    "start": "1826390",
    "end": "1833080"
  },
  {
    "text": "on the subset of those hash keys so we now know see how the first shot has the",
    "start": "1833080",
    "end": "1840520"
  },
  {
    "text": "first half of heart space and the second shot has the second half of heart space what Kinesis now does is calculates the",
    "start": "1840520",
    "end": "1849220"
  },
  {
    "text": "hash key for your particular partition key so p2 maps to this value which now clearly means that this record should be",
    "start": "1849220",
    "end": "1856450"
  },
  {
    "text": "appended to the first chart and again when it's appended it's stored in multiple copies durably",
    "start": "1856450",
    "end": "1863140"
  },
  {
    "text": "across availability sounds when you see and okay the message is good like it's",
    "start": "1863140",
    "end": "1868180"
  },
  {
    "text": "not gonna get lost and at that point we can return okay back to the producer so",
    "start": "1868180",
    "end": "1877510"
  },
  {
    "text": "I can previous examples let's see what happens when B sends the payload sends a record into a key nice data stream we go",
    "start": "1877510",
    "end": "1884860"
  },
  {
    "text": "through the same steps calculate the hash value this time the partition key",
    "start": "1884860",
    "end": "1891880"
  },
  {
    "text": "maps to a different value because it's a different partition key and it ends up",
    "start": "1891880",
    "end": "1896950"
  },
  {
    "text": "going to the second chart again start",
    "start": "1896950",
    "end": "1902440"
  },
  {
    "text": "durably and like in previous examples what happens if there was a networking",
    "start": "1902440",
    "end": "1907999"
  },
  {
    "text": "problem between the producer and kinases data stream when the call was made the second producer will retry the call",
    "start": "1907999",
    "end": "1914899"
  },
  {
    "text": "and in case of Kinesis data streams",
    "start": "1914899",
    "end": "1919629"
  },
  {
    "text": "what's going to happen is the result of the hashing function is going to be the same value so yes there will be a",
    "start": "1923350",
    "end": "1929749"
  },
  {
    "text": "duplicate but it's always going to go to the same shard as the previous version so when you start thinking about",
    "start": "1929749",
    "end": "1936320"
  },
  {
    "text": "consuming data from a stream it's easier to reason about how can I detect",
    "start": "1936320",
    "end": "1941480"
  },
  {
    "text": "duplicates when I'm reading back the data it's always going to the same chart",
    "start": "1941480",
    "end": "1947289"
  },
  {
    "text": "so I mentioned how you can have as many shards as you want and each shard has a",
    "start": "1947619",
    "end": "1953779"
  },
  {
    "text": "limited throughput what happens when you need more and you already had data in",
    "start": "1953779",
    "end": "1959720"
  },
  {
    "text": "your Keeney's data stream what happens is you can what you can do what is called a shard split",
    "start": "1959720",
    "end": "1965779"
  },
  {
    "text": "so you're basically selecting one of these and making two out of them so you",
    "start": "1965779",
    "end": "1971779"
  },
  {
    "text": "divide the existing hash space for a particular shard into two shards with a subset of keys and that's how you can",
    "start": "1971779",
    "end": "1978679"
  },
  {
    "text": "scale the throughput of a Kinesis data stream again almost infinitely by adding as many shots as you would like",
    "start": "1978679",
    "end": "1985480"
  },
  {
    "text": "so recharging means it doesn't influence existing data the moment you do the",
    "start": "1985480",
    "end": "1992360"
  },
  {
    "text": "retarding new shards appear and new data gets appended to the new shards and",
    "start": "1992360",
    "end": "1999490"
  },
  {
    "text": "there is a new easy to work with API now where you can just say for this",
    "start": "1999490",
    "end": "2004629"
  },
  {
    "text": "particular keaney's data stream I just want that many shards you don't have to pick specifically which charge you wanna",
    "start": "2004629",
    "end": "2010749"
  },
  {
    "text": "split and how so let's talk about",
    "start": "2010749",
    "end": "2015990"
  },
  {
    "text": "consuming from a kinases data stream so the key difference here will be remember",
    "start": "2015990",
    "end": "2022119"
  },
  {
    "text": "how in like sqs the only thing you needed to do was to call receive message and provide the cue URL and the rest was",
    "start": "2022119",
    "end": "2028330"
  },
  {
    "text": "on sqs which Kinesis data streams the responsibility of selecting from which",
    "start": "2028330",
    "end": "2034299"
  },
  {
    "text": "shard your reading and which record you reading is on consumers this is your code that needs",
    "start": "2034299",
    "end": "2040390"
  },
  {
    "text": "to does do this so in order for the consumer to start reading from it it first needs to query Kinesis what are",
    "start": "2040390",
    "end": "2048040"
  },
  {
    "text": "the available charts pick a shard and start reading from it using an iterator",
    "start": "2048040",
    "end": "2053879"
  },
  {
    "text": "something that resembles something like that so you immediately see another key",
    "start": "2053880",
    "end": "2062440"
  },
  {
    "text": "difference you get consumer affinity all the sequential entries in a shard end up",
    "start": "2062440",
    "end": "2070929"
  },
  {
    "text": "always being read by the consumer that is reading from it so it's easy to perform analysis of consecutive entries",
    "start": "2070929",
    "end": "2079560"
  },
  {
    "text": "you can also see that when you consume from a Kinesis data stream you're not",
    "start": "2081300",
    "end": "2087100"
  },
  {
    "text": "deleting anything which now means that you can start multiple different",
    "start": "2087100",
    "end": "2092260"
  },
  {
    "text": "applications consuming from the same stream in like a fan-out pattern and doing doing all sorts of different types",
    "start": "2092260",
    "end": "2097840"
  },
  {
    "text": "of analysis on the data stream but again as the number of chars grow and you",
    "start": "2097840",
    "end": "2104800"
  },
  {
    "text": "perform these splits of shards the complexity of the code on the consumer",
    "start": "2104800",
    "end": "2110680"
  },
  {
    "text": "increases because it's kind of on the client-side code to keep track of who's reading from which chart how far is it",
    "start": "2110680",
    "end": "2116320"
  },
  {
    "text": "and to checkpoint the progress of reading through it somewhere and because",
    "start": "2116320",
    "end": "2121330"
  },
  {
    "text": "of that instead of using Kinesis api is directly for consuming I would recommend",
    "start": "2121330",
    "end": "2128530"
  },
  {
    "text": "everyone to just use an existing client-side library called KCl kinases",
    "start": "2128530",
    "end": "2135400"
  },
  {
    "text": "client library it does all the complex management of shards of electing who's",
    "start": "2135400",
    "end": "2141850"
  },
  {
    "text": "reading from which chart of tracking progress of your reads and you only focus on the actual code that processes",
    "start": "2141850",
    "end": "2149050"
  },
  {
    "text": "the records from the stream ok let's see",
    "start": "2149050",
    "end": "2155500"
  },
  {
    "text": "how this behaves in the demo so in the middle we see aki-nee's data",
    "start": "2155500",
    "end": "2164440"
  },
  {
    "start": "2159000",
    "end": "2335000"
  },
  {
    "text": "stream and it has two charts we start",
    "start": "2164440",
    "end": "2170680"
  },
  {
    "text": "the first consumer and because we can have multiple consumers reading from the same set of data we identify consumers",
    "start": "2170680",
    "end": "2177670"
  },
  {
    "text": "this is application one that will be now consumed and as the consumers start up",
    "start": "2177670",
    "end": "2183900"
  },
  {
    "text": "through Kinesis client library they elect who's gonna own which chart for",
    "start": "2183900",
    "end": "2189730"
  },
  {
    "text": "consumption so they have exclusive ownership of a particular chart industry and we can see how both consumers and",
    "start": "2189730",
    "end": "2196900"
  },
  {
    "text": "the double-acting unique chars from the data stream let's start the first producer and we can see how partition",
    "start": "2196900",
    "end": "2207940"
  },
  {
    "text": "key a gets mapped through the hashing function to shards zero and it's only the first consumer that is seeing these",
    "start": "2207940",
    "end": "2214930"
  },
  {
    "text": "messages starting the second producer B hashes to shard one so the second",
    "start": "2214930",
    "end": "2220720"
  },
  {
    "text": "consumer sees these entries what that also means that because we have two charts if we start a third consumer he's",
    "start": "2220720",
    "end": "2230410"
  },
  {
    "text": "not going to do anything because both charts already have exclusive owners if",
    "start": "2230410",
    "end": "2236020"
  },
  {
    "text": "we start the third producer again we have two charts so the third consumer",
    "start": "2236020",
    "end": "2243309"
  },
  {
    "text": "does nothing here and the messages labeled C get appended to shard zero and",
    "start": "2243309",
    "end": "2249339"
  },
  {
    "text": "because we process the shard in sequence we will start seeing messages labeled C",
    "start": "2249339",
    "end": "2254470"
  },
  {
    "text": "when we reach a 150 around that time so",
    "start": "2254470",
    "end": "2262750"
  },
  {
    "text": "let's stop the third consumer who's not doing any valuable work and start them again but identify them as a separate",
    "start": "2262750",
    "end": "2268960"
  },
  {
    "text": "application so this is application 2 and let's start to consumers for application",
    "start": "2268960",
    "end": "2274750"
  },
  {
    "text": "2",
    "start": "2274750",
    "end": "2276930"
  },
  {
    "text": "they also elect oh now we see right the started seeing records labeled see in",
    "start": "2282049",
    "end": "2289589"
  },
  {
    "text": "the first consumer an application to elected who owns which chart and consumes the same stream from the",
    "start": "2289589",
    "end": "2296999"
  },
  {
    "text": "beginning all the rows since the beginning so we can see how its kind of doing a fan out one application does one",
    "start": "2296999",
    "end": "2304199"
  },
  {
    "text": "thing on the stream the other one does something else and it processes things",
    "start": "2304199",
    "end": "2309269"
  },
  {
    "text": "in sequence but in order to scale consumers you have to pre shard things if data is already in the stream and it",
    "start": "2309269",
    "end": "2315599"
  },
  {
    "text": "was starting five shards that beta can only be consumed by five consumers like there's no way to speed it up in any way",
    "start": "2315599",
    "end": "2322499"
  },
  {
    "text": "at that point that it's kind of already too late the data is assigned to shards already so let's hear from CID how the",
    "start": "2322499",
    "end": "2329670"
  },
  {
    "text": "customer used Kinesis for the analysis all right so let's plug in Kinesis",
    "start": "2329670",
    "end": "2336959"
  },
  {
    "start": "2335000",
    "end": "2395000"
  },
  {
    "text": "streams into an architecture so all the optech events were spread across multiple shards in a Kinesis stream for",
    "start": "2336959",
    "end": "2350849"
  },
  {
    "text": "the batch analysis they were actually using a different flavor of Kinesis it's called Kinesis data firehose which",
    "start": "2350849",
    "end": "2357119"
  },
  {
    "text": "lets you in real time push data to a storage service like s3 once data made",
    "start": "2357119",
    "end": "2363719"
  },
  {
    "text": "it to s3 then it was consumed into a redshift cluster to do advanced sequel",
    "start": "2363719",
    "end": "2369749"
  },
  {
    "text": "analysis now for the alerts they were",
    "start": "2369749",
    "end": "2375150"
  },
  {
    "text": "actually triggering lambda function when the data was written into s3 and this lambda function was checking for",
    "start": "2375150",
    "end": "2381900"
  },
  {
    "text": "specific attributes in the message which was in s3 and sending notifications to",
    "start": "2381900",
    "end": "2387959"
  },
  {
    "text": "end users if it was identified as an alert now let's talk about a final use",
    "start": "2387959",
    "end": "2397979"
  },
  {
    "start": "2395000",
    "end": "2515000"
  },
  {
    "text": "case Edmonds is a shopping website making car buying and selling extremely",
    "start": "2397979",
    "end": "2403229"
  },
  {
    "text": "simple have a huge amount of used and new car",
    "start": "2403229",
    "end": "2410869"
  },
  {
    "text": "listings by different car dealers om franchisees and then these entities make",
    "start": "2410869",
    "end": "2416810"
  },
  {
    "text": "any changes or add new listings that has to be updated to the Edmunds website",
    "start": "2416810",
    "end": "2424690"
  },
  {
    "text": "so they built a platform to make this happen so let's look at their architecture so these vendors were",
    "start": "2429590",
    "end": "2438140"
  },
  {
    "text": "writing all the changes to source systems and they wanted to decouple",
    "start": "2438140",
    "end": "2443180"
  },
  {
    "text": "their source systems from their target systems using a messaging platform these",
    "start": "2443180",
    "end": "2453290"
  },
  {
    "text": "target systems were the back end of their website now let's look at the",
    "start": "2453290",
    "end": "2458900"
  },
  {
    "text": "requirements one is this entire pipeline this entire platform has to be event-driven that helps them save costs",
    "start": "2458900",
    "end": "2465740"
  },
  {
    "text": "adds efficiency the regular requirements",
    "start": "2465740",
    "end": "2471650"
  },
  {
    "text": "from the message platform durable scalable highly available but in",
    "start": "2471650",
    "end": "2477410"
  },
  {
    "text": "addition they wanted the ability to write the same message to multiple",
    "start": "2477410",
    "end": "2482870"
  },
  {
    "text": "target systems so multiple consumers should receive the same message from the",
    "start": "2482870",
    "end": "2488870"
  },
  {
    "text": "messaging platform but in addition they also wanted message filtering so based",
    "start": "2488870",
    "end": "2493970"
  },
  {
    "text": "on some message attributes they can say only send this message to two systems or send this message to all the five",
    "start": "2493970",
    "end": "2500240"
  },
  {
    "text": "systems so they needed that flexibility and all of this has to be done with",
    "start": "2500240",
    "end": "2506930"
  },
  {
    "text": "minimal minimal latency so I'll let kuba talk to us about the messaging platform",
    "start": "2506930",
    "end": "2511970"
  },
  {
    "text": "Thanks so what's key here is that in",
    "start": "2511970",
    "end": "2518780"
  },
  {
    "start": "2515000",
    "end": "2915000"
  },
  {
    "text": "their architecture they wanted to send something and deliver to multiple destinations and when we talk about this",
    "start": "2518780",
    "end": "2525310"
  },
  {
    "text": "yeah it's typically called a pop sub model where you publish something and you have",
    "start": "2525310",
    "end": "2530720"
  },
  {
    "text": "multiple subscribers and the way you achieve perhaps have been AWS like native messaging services is through SNS",
    "start": "2530720",
    "end": "2537650"
  },
  {
    "text": "topics so here's how we're going to think about an SNS topic notice that",
    "start": "2537650",
    "end": "2542840"
  },
  {
    "text": "there are no consumers on this image and it's going to be clear in a second why",
    "start": "2542840",
    "end": "2548830"
  },
  {
    "text": "so this image represents a single SNS topic and what you can do with the topic",
    "start": "2548830",
    "end": "2555770"
  },
  {
    "text": "is you can publish things to a topic and you can configure subscriptions that's",
    "start": "2555770",
    "end": "2561620"
  },
  {
    "text": "in to where the messages need to be delivered from a topic so what what what what kind of destinations can you",
    "start": "2561620",
    "end": "2568450"
  },
  {
    "text": "configure one type of destination is an",
    "start": "2568450",
    "end": "2574060"
  },
  {
    "text": "Amazon s qsq today SNS topics port SQ",
    "start": "2574060",
    "end": "2580150"
  },
  {
    "text": "standard queues they don't support FIFO queue yet so you use this type of",
    "start": "2580150",
    "end": "2586540"
  },
  {
    "text": "destination for integrating systems together next one is lambda so you can",
    "start": "2586540",
    "end": "2593950"
  },
  {
    "text": "easily hook up lambda function as a destination of of your SNS topic which",
    "start": "2593950",
    "end": "2600370"
  },
  {
    "text": "basically means that when you publish something is going to invoke a lambda function for you the third one is an",
    "start": "2600370",
    "end": "2608740"
  },
  {
    "text": "HTTP endpoint this is how you can achieve a push based model for messaging",
    "start": "2608740",
    "end": "2614500"
  },
  {
    "text": "you implement the service you expose an API and you can configure SNS to invoke",
    "start": "2614500",
    "end": "2621370"
  },
  {
    "text": "your API when a delivery needs to be made and what's really interesting here",
    "start": "2621370",
    "end": "2626830"
  },
  {
    "text": "is that you can control the rate of retries and basically because SNS has is",
    "start": "2626830",
    "end": "2634750"
  },
  {
    "text": "very scalable to prevent an outage of your system if there's a huge spike of invocations going through the HTTP",
    "start": "2634750",
    "end": "2640570"
  },
  {
    "text": "delivery channel and we also have different types of destinations",
    "start": "2640570",
    "end": "2646530"
  },
  {
    "text": "typically geared more towards end users than system to system integration which",
    "start": "2646530",
    "end": "2652900"
  },
  {
    "text": "is like mobile application push notifications we've got SMS text messages and you've got email also as a",
    "start": "2652900",
    "end": "2659470"
  },
  {
    "text": "delivery target what's new in Amazon SNS",
    "start": "2659470",
    "end": "2665530"
  },
  {
    "text": "topics is you can also configure filters on each destination so it's a simple",
    "start": "2665530",
    "end": "2672040"
  },
  {
    "text": "function that can look at the attributes of your message and decide whether the",
    "start": "2672040",
    "end": "2678010"
  },
  {
    "text": "message is allowed to be delivered to the destination or not so let's see how",
    "start": "2678010",
    "end": "2683170"
  },
  {
    "text": "it works when you publish things to an SNS topic",
    "start": "2683170",
    "end": "2689280"
  },
  {
    "text": "publisher calls producer calls publish sending payload a and immediately",
    "start": "2690150",
    "end": "2698490"
  },
  {
    "text": "the messages stored durably in SNS across multiple availability zones so",
    "start": "2698490",
    "end": "2705430"
  },
  {
    "text": "and immediately the producer is acknowledged that we got the message before we even attempt to start",
    "start": "2705430",
    "end": "2711910"
  },
  {
    "text": "deliveries to all destinations what this means is you will see the same low",
    "start": "2711910",
    "end": "2718720"
  },
  {
    "text": "latency of publishing vocations whether you have one destination or a million",
    "start": "2718720",
    "end": "2724630"
  },
  {
    "text": "destinations on your SNS topic the latency you observe on a publisher is going to be the same so what happens",
    "start": "2724630",
    "end": "2732100"
  },
  {
    "text": "next is behind the scenes you already saw one okay from your point of view the message is published but now",
    "start": "2732100",
    "end": "2737730"
  },
  {
    "text": "internally inside SNS we perform the",
    "start": "2737730",
    "end": "2744280"
  },
  {
    "text": "fan-out so for each subscribe destination we will end up sending a copy in this",
    "start": "2744280",
    "end": "2752470"
  },
  {
    "text": "example we see how the filtering function the second one actually prevented the message from going out to",
    "start": "2752470",
    "end": "2758380"
  },
  {
    "text": "this destination and you can think about this stage as multiple internal cues",
    "start": "2758380",
    "end": "2765280"
  },
  {
    "text": "inside SNS that you don't even see in that keep track of each individual destination for you so the fan-out",
    "start": "2765280",
    "end": "2772030"
  },
  {
    "text": "happened and now we need to deliver five copies of this message to those different destinations and behind the",
    "start": "2772030",
    "end": "2779830"
  },
  {
    "text": "scenes SNS now attempts the delivery what happens if one of those channels",
    "start": "2779830",
    "end": "2785320"
  },
  {
    "text": "fails for whatever reason let's say the reason is it was an HTTP endpoint and",
    "start": "2785320",
    "end": "2790840"
  },
  {
    "text": "your web server was not running what's going to happen is we will remember that",
    "start": "2790840",
    "end": "2796780"
  },
  {
    "text": "those delivered notifications are already good but we still keep track of the one that needs to be delivered to",
    "start": "2796780",
    "end": "2802600"
  },
  {
    "text": "the endpoint that failed and we will keep retrying how many times depends on",
    "start": "2802600",
    "end": "2808960"
  },
  {
    "text": "the destination for all intents and purposes when you subscribe and SQS",
    "start": "2808960",
    "end": "2814960"
  },
  {
    "text": "queue or a lambda function to an SNS topic you can think of those retries is",
    "start": "2814960",
    "end": "2820630"
  },
  {
    "text": "happening forever like it's going to get delivered for your own HTTP endpoints you're in",
    "start": "2820630",
    "end": "2826569"
  },
  {
    "text": "control of how many times the retry needs to be made what's the back of retry time and basically at what rate",
    "start": "2826569",
    "end": "2834130"
  },
  {
    "text": "the retries happen and for how long so",
    "start": "2834130",
    "end": "2840490"
  },
  {
    "text": "when the second producer sends message to the topic again SNS sees the sent",
    "start": "2840490",
    "end": "2847420"
  },
  {
    "text": "attempt stores it durably across multiple AZ's and confirms to the producer immediately that we got it and",
    "start": "2847420",
    "end": "2853809"
  },
  {
    "text": "the same situation happens again what a fan out in this particular case the",
    "start": "2853809",
    "end": "2860079"
  },
  {
    "text": "first filtering function didn't allow the message through the second allowed it through and again behind-the-scenes",
    "start": "2860079",
    "end": "2866160"
  },
  {
    "text": "delivery attempt is made and now one of these destinations actually have has two messages to go through so what's key",
    "start": "2866160",
    "end": "2873309"
  },
  {
    "text": "here is that it's very elastic similar to standard sqs cues it doesn't matter",
    "start": "2873309",
    "end": "2880450"
  },
  {
    "text": "what your send through send radius can be 10 TPS can be 10,000 cents per second",
    "start": "2880450",
    "end": "2887049"
  },
  {
    "text": "SNS top I will handle it and the key here is you will always observe the same",
    "start": "2887049",
    "end": "2892720"
  },
  {
    "text": "low publish latency because you're not waiting for the actual deliveries to happen so it's a very nice integration",
    "start": "2892720",
    "end": "2900250"
  },
  {
    "text": "platform where just you just call publish once and all the different destinations configured on a topic get a",
    "start": "2900250",
    "end": "2906730"
  },
  {
    "text": "copy of the message delivered so let's hear from Sid how it solved the customers problem so Edmonds decided to",
    "start": "2906730",
    "end": "2917920"
  },
  {
    "start": "2915000",
    "end": "3028000"
  },
  {
    "text": "use SNS with a fan-out to multiple SQS queues for the architecture now we still",
    "start": "2917920",
    "end": "2925390"
  },
  {
    "text": "have a server which is going to read from the sqs queues and then write it to",
    "start": "2925390",
    "end": "2930519"
  },
  {
    "text": "the target systems and we don't like servers do we so let's bring in our",
    "start": "2930519",
    "end": "2935920"
  },
  {
    "text": "serverless champion a SS lambda now sq sq has native integration with a",
    "start": "2935920",
    "end": "2941470"
  },
  {
    "text": "tubeless lambda what that means is that the area plus lambda service does all",
    "start": "2941470",
    "end": "2947349"
  },
  {
    "text": "the underlying heavy lifting poles sq sq and invokes a lambda function when it",
    "start": "2947349",
    "end": "2952930"
  },
  {
    "text": "sees a message in the sqs queue additionally it also takes care of",
    "start": "2952930",
    "end": "2959170"
  },
  {
    "text": "scaling so if the number of messages increases in the sqs queue it will automatically increase the number of",
    "start": "2959170",
    "end": "2966100"
  },
  {
    "text": "simultaneous lambda invocations up to a thousand simultaneous lambda invocations",
    "start": "2966100",
    "end": "2971580"
  },
  {
    "text": "so now for this architecture we can have different lambda functions get triggered for different sqs queues and these",
    "start": "2971580",
    "end": "2980020"
  },
  {
    "text": "lambda functions write data to different target systems so let's plug this in to our architecture perfect",
    "start": "2980020",
    "end": "2988750"
  },
  {
    "text": "now one requirement still remains that this entire architecture has to be event",
    "start": "2988750",
    "end": "2994060"
  },
  {
    "text": "driven so for that what Edmonds did was they launched the lambda function every",
    "start": "2994060",
    "end": "3000600"
  },
  {
    "text": "time something was written to the source systems this was a synchronous invocation which basically went and",
    "start": "3000600",
    "end": "3006780"
  },
  {
    "text": "wrote data to an Amazon s3 bucket the Amazon s3 bucket was configured in such",
    "start": "3006780",
    "end": "3012690"
  },
  {
    "text": "a way that a put even notification would automatically send a message to SNS so",
    "start": "3012690",
    "end": "3019050"
  },
  {
    "text": "we have so we have that native integration between Amazon s3 and s nos",
    "start": "3019050",
    "end": "3026090"
  },
  {
    "start": "3028000",
    "end": "3161000"
  },
  {
    "text": "so let's recap we saw Amazon SQL standard the focus was simplicity the",
    "start": "3028010",
    "end": "3035070"
  },
  {
    "text": "producer writes a message to the queue the receiver reads it processes it and then deletes it from the queue and the",
    "start": "3035070",
    "end": "3042359"
  },
  {
    "text": "queue by itself is literally infinitely scalable one messages or million",
    "start": "3042359",
    "end": "3047400"
  },
  {
    "text": "messages the queue adapts the work workload but two things to consider one",
    "start": "3047400",
    "end": "3053300"
  },
  {
    "text": "messages can be out of order and two you can have duplicate messages now if your",
    "start": "3053300",
    "end": "3059760"
  },
  {
    "text": "application cannot adapt to this characteristics you can use sqs FIFO queue which guarantees in order delivery",
    "start": "3059760",
    "end": "3067020"
  },
  {
    "text": "of messages as well as only single message so no duplicates and you also have the flexibility of spreading your",
    "start": "3067020",
    "end": "3073200"
  },
  {
    "text": "messages across multiple message groups and within a given message group you are guaranteed to have in order processing",
    "start": "3073200",
    "end": "3080460"
  },
  {
    "text": "of messages we also have Kinesis which",
    "start": "3080460",
    "end": "3085980"
  },
  {
    "text": "is for streaming analysis of data so you can go back in time and look at a bunch of messages together",
    "start": "3085980",
    "end": "3092880"
  },
  {
    "text": "you have the shard I traitor through which you can control how back in time can you go you can look from the latest",
    "start": "3092880",
    "end": "3100330"
  },
  {
    "text": "records or go from the first record as we saw in the demo with Kenny says the",
    "start": "3100330",
    "end": "3105430"
  },
  {
    "text": "messages don't get deleted once it's processed so they are there for the entire retention time",
    "start": "3105430",
    "end": "3111510"
  },
  {
    "text": "additionally in Kinesis you can have multiple consumers read the same message as well as customer affinity so you can",
    "start": "3111510",
    "end": "3119800"
  },
  {
    "text": "have shards and you can have one consumer read all the message of a shard hence giving that consumer affinity",
    "start": "3119800",
    "end": "3126900"
  },
  {
    "text": "finally we saw Amazon SNS which is a fan out kind of architecture where you have",
    "start": "3126900",
    "end": "3134290"
  },
  {
    "text": "one message which can be distributed and delivered to multiple endpoints and we",
    "start": "3134290",
    "end": "3139480"
  },
  {
    "text": "also have filtering in build so you don't have to send the same message to everyone you can filter and put some",
    "start": "3139480",
    "end": "3145900"
  },
  {
    "text": "kind of a logic then sending these messages thank you and we'll take any",
    "start": "3145900",
    "end": "3152980"
  },
  {
    "text": "mess any questions you have [Applause]",
    "start": "3152980",
    "end": "3163030"
  }
]