[
  {
    "start": "0",
    "end": "120000"
  },
  {
    "text": "hi welcome to Con 302 my name's Jeremy Cowen and we're here for the session",
    "start": "1140",
    "end": "8490"
  },
  {
    "text": "building a CI CD pipeline for containers on Amazon",
    "start": "8490",
    "end": "13650"
  },
  {
    "text": "ECS my count I'm a Solutions Architect and presenting with me today is a",
    "start": "13650",
    "end": "20850"
  },
  {
    "text": "Jaedong car from Edmunds who's going to tell you all about how they're using ECS",
    "start": "20850",
    "end": "26730"
  },
  {
    "text": "to help folks like you and me find the perfect car so before we get to that",
    "start": "26730",
    "end": "33000"
  },
  {
    "text": "however here's what you can expect from this session first we're going to establish a baseline by reviewing the",
    "start": "33000",
    "end": "40320"
  },
  {
    "text": "definitions of continuous delivery a continuous deployment and continuous integration once we get through that",
    "start": "40320",
    "end": "47070"
  },
  {
    "text": "we'll explore each of the stages and the pipeline and the ways that you can",
    "start": "47070",
    "end": "52129"
  },
  {
    "text": "create automated CI CD pipelines with ECS will then have a look at a few",
    "start": "52129",
    "end": "58649"
  },
  {
    "text": "reference reference architectures before I finally hand the baton to ad JIT",
    "start": "58649",
    "end": "64619"
  },
  {
    "text": "alright so let's begin so it's useful to define a few terms",
    "start": "64619",
    "end": "70500"
  },
  {
    "text": "that I'm going to be using throughout today's presentation the first is continuous integration",
    "start": "70500",
    "end": "75710"
  },
  {
    "text": "continuous integration is the practice that involves integrating your code into",
    "start": "75710",
    "end": "80909"
  },
  {
    "text": "a shared repository multiple times a day these check-ins are verified through a build process that allows you to detect",
    "start": "80909",
    "end": "88439"
  },
  {
    "text": "defects in your code now the idea is that by doing small frequent releases",
    "start": "88439",
    "end": "93750"
  },
  {
    "text": "you eventually spend less time troubleshooting and more time building new features now for teams that are",
    "start": "93750",
    "end": "100650"
  },
  {
    "text": "doing iterative software development continuous integration is really essential continuous delivery on the",
    "start": "100650",
    "end": "107880"
  },
  {
    "text": "other hand is an approach that involves creating a deployable asset that can be",
    "start": "107880",
    "end": "113579"
  },
  {
    "text": "released to different environments at any time from test to staging and then",
    "start": "113579",
    "end": "118979"
  },
  {
    "text": "on to production so if continuous continuous delivery",
    "start": "118979",
    "end": "124200"
  },
  {
    "start": "120000",
    "end": "120000"
  },
  {
    "text": "involves building a deployable asset that can automatically be deployed to say an on production environment what's",
    "start": "124200",
    "end": "130800"
  },
  {
    "text": "the difference between continuous delivery and continuous employment well under continuous delivery a developer or a member of the",
    "start": "130800",
    "end": "138550"
  },
  {
    "text": "development team usually determines whether that update should be a push to production whereas continuous deployment",
    "start": "138550",
    "end": "145260"
  },
  {
    "text": "the release to production happens automatically without explicit approval from a human now this is generally done",
    "start": "145260",
    "end": "152980"
  },
  {
    "text": "only after the update has passed an exhaustive battery of tests now",
    "start": "152980",
    "end": "158170"
  },
  {
    "text": "the graphic on this slide helps illustrate what we've been talking about here you can see which phases of the",
    "start": "158170",
    "end": "165010"
  },
  {
    "text": "development cycle are part of continuous integration continuous delivery and continuous deployment with continuous",
    "start": "165010",
    "end": "172420"
  },
  {
    "text": "delivery there's a manual approval step or a gate before the update is released to the production environment now the",
    "start": "172420",
    "end": "179380"
  },
  {
    "text": "important thing here is the opportunity for getting fast frequent feedback which",
    "start": "179380",
    "end": "185230"
  },
  {
    "text": "occurs throughout the development cycle and it's this feedback that helps organizations adopt an iterative",
    "start": "185230",
    "end": "191110"
  },
  {
    "text": "approach to development so what problems does CIC CD address first it shortens",
    "start": "191110",
    "end": "199810"
  },
  {
    "text": "your time to delivery because it automates the build tests and deployment phases of the software release cycle and",
    "start": "199810",
    "end": "205890"
  },
  {
    "text": "accelerating your release cycle is especially advantageous in today's climate where disruption through",
    "start": "205890",
    "end": "211720"
  },
  {
    "text": "innovative software has become commonplace now see ICD reduces uncertainty around changes because the",
    "start": "211720",
    "end": "218980"
  },
  {
    "text": "changes tend to be smaller and they've gone through an extensive battery of tests before they're released to",
    "start": "218980",
    "end": "225010"
  },
  {
    "text": "production additionally frequent check-ins and builds give you the opportunity to get",
    "start": "225010",
    "end": "230980"
  },
  {
    "text": "near instantaneous feedback which you can use to fix issues earlier in the release cycle so oh that's great but how",
    "start": "230980",
    "end": "239530"
  },
  {
    "text": "do containers relate to continuous delivery for starters containers can be",
    "start": "239530",
    "end": "245320"
  },
  {
    "text": "deployed quickly and the reason for this is really threefold first container images are comprised of filesystem",
    "start": "245320",
    "end": "252100"
  },
  {
    "text": "layers that get cached on on to docker hosts and when you update a container only layers that have changed are pushed",
    "start": "252100",
    "end": "259810"
  },
  {
    "text": "to the hosts and pushing only the deltas rather than the whole image reduces the",
    "start": "259810",
    "end": "265300"
  },
  {
    "text": "amount of time needed to push an up eight-second containers share the OS",
    "start": "265300",
    "end": "270669"
  },
  {
    "text": "kernel of the host that they're running on so they tend to be significantly smaller than virtual machines and they",
    "start": "270669",
    "end": "277360"
  },
  {
    "text": "start a lot faster because they're not running a full operating system and",
    "start": "277360",
    "end": "282910"
  },
  {
    "text": "third all of your application dependencies and configuration are packaged in the container so you don't",
    "start": "282910",
    "end": "288190"
  },
  {
    "text": "need to spend a lot of time writing complex scripts to install and configure the application when you deploy a",
    "start": "288190",
    "end": "294040"
  },
  {
    "text": "container to an environment now docker also allows you to apply tags to",
    "start": "294040",
    "end": "300100"
  },
  {
    "text": "containers which you can use to track a variety of things such as the build version the git hash the stage that the",
    "start": "300100",
    "end": "307870"
  },
  {
    "text": "container is currently in the latest version of Dockers image man it's image",
    "start": "307870",
    "end": "314530"
  },
  {
    "text": "manifest specification now allows you to separate and images tags from the secure",
    "start": "314530",
    "end": "321220"
  },
  {
    "text": "the secure hash of the images layers effectively giving you the ability to update and images tags in place this",
    "start": "321220",
    "end": "330280"
  },
  {
    "text": "gives you an opportunity to build automation that simply updates and images tags when the image is ready to",
    "start": "330280",
    "end": "337240"
  },
  {
    "text": "be promoted to the next stage in the development cycle and your pipeline can",
    "start": "337240",
    "end": "342550"
  },
  {
    "text": "look at these tags to determine which environment to deploy the container to and then finally containers run",
    "start": "342550",
    "end": "349479"
  },
  {
    "text": "consistently when they're deployed across different environments precisely because all of the application",
    "start": "349479",
    "end": "355150"
  },
  {
    "text": "dependencies configuration are packaged along with the container now a common",
    "start": "355150",
    "end": "361450"
  },
  {
    "text": "workflow for docker involves three three stages essentially build test and",
    "start": "361450",
    "end": "366820"
  },
  {
    "text": "deployment and adherence to these stages allows applications to quickly travel",
    "start": "366820",
    "end": "372610"
  },
  {
    "text": "through the whole lifecycle it also simplifies the adoption of DevOps from a",
    "start": "372610",
    "end": "378639"
  },
  {
    "text": "build standpoint docker provides a standardized and consistent way to build",
    "start": "378639",
    "end": "383800"
  },
  {
    "text": "containers using docker build this differs from traditional deployments where you typically had to package an",
    "start": "383800",
    "end": "392350"
  },
  {
    "text": "application before it could be deployed for those of you have worked with her before you may have heard how containers",
    "start": "392350",
    "end": "399820"
  },
  {
    "text": "are analogous to shipping containers and I think it's actually a useful analogy because before",
    "start": "399820",
    "end": "405700"
  },
  {
    "text": "the advent of shipping containers Goods loaded onto ships in a particular order",
    "start": "405700",
    "end": "411670"
  },
  {
    "text": "because the containers were of different sizes and shapes when when that was",
    "start": "411670",
    "end": "420040"
  },
  {
    "text": "standardized with shipping containers the order in which ships were loaded",
    "start": "420040",
    "end": "426120"
  },
  {
    "text": "really became irrelevant because goods",
    "start": "426120",
    "end": "431650"
  },
  {
    "text": "were now packaged in a standard in a standard way so although docker doesn't provide a",
    "start": "431650",
    "end": "439950"
  },
  {
    "text": "built-in framework for for testing containers it's relatively easy to perform tests both inside the container",
    "start": "439950",
    "end": "447190"
  },
  {
    "text": "and against the container which we'll have a look at a little later in the presentation another nice thing about",
    "start": "447190",
    "end": "453490"
  },
  {
    "text": "containers is that they're they're lightweight that is that they consume",
    "start": "453490",
    "end": "458940"
  },
  {
    "text": "relatively few resources on your machine so you can often smoke cast your whole",
    "start": "458940",
    "end": "464230"
  },
  {
    "text": "application stack on your laptop which is really convenient as a developer",
    "start": "464230",
    "end": "469830"
  },
  {
    "text": "moreover once once container passes all your tests it should run consistently as",
    "start": "469830",
    "end": "475300"
  },
  {
    "text": "it's moved from environment to environment because the artifact that you deploy into a testing environment is",
    "start": "475300",
    "end": "481000"
  },
  {
    "text": "the same artifact that you deploy to production and developers like containers because they insulate them",
    "start": "481000",
    "end": "489430"
  },
  {
    "text": "from how services work and how they're deployed also their their builds effectively become a version container",
    "start": "489430",
    "end": "496840"
  },
  {
    "text": "image that's easily transportable and deployed through a container",
    "start": "496840",
    "end": "501850"
  },
  {
    "text": "orchestration service like ecs now as you can see the the docker workflow",
    "start": "501850",
    "end": "507850"
  },
  {
    "text": "aligns really nicely with continuous integration and delivery a typical CI CD",
    "start": "507850",
    "end": "513370"
  },
  {
    "text": "cycle is comprised of forced agent source build test and production the",
    "start": "513370",
    "end": "518560"
  },
  {
    "text": "source phase involves checking in your code into a shared code repository like git or AWS code commit and during the",
    "start": "518560",
    "end": "527050"
  },
  {
    "text": "build stage your application code is compiled and a docker file is used to copy the compiled asset into the",
    "start": "527050",
    "end": "533530"
  },
  {
    "text": "container Dockers add or copy commands a docker image is then built from docker file and",
    "start": "533530",
    "end": "540430"
  },
  {
    "text": "then pushed to a container registry like docker hub or the elastic container",
    "start": "540430",
    "end": "545500"
  },
  {
    "text": "registry or ECR during the testing phase you can perform tests that both run",
    "start": "545500",
    "end": "551709"
  },
  {
    "text": "inside or against the container and then finally when you reach the the deployment phase it means that your",
    "start": "551709",
    "end": "558160"
  },
  {
    "text": "testing is complete and your Update is ready to be released to production so",
    "start": "558160",
    "end": "563879"
  },
  {
    "start": "562000",
    "end": "562000"
  },
  {
    "text": "let's have a look at each of the stages a little more closely the source phase involves checking in your code into a",
    "start": "563879",
    "end": "571509"
  },
  {
    "text": "shared code repository like git or code commit which is a fully managed",
    "start": "571509",
    "end": "576670"
  },
  {
    "text": "compatible service from AWS with Co commit all the files that you push to a",
    "start": "576670",
    "end": "583209"
  },
  {
    "text": "code commit repository are encrypted using a KMS key for added security not",
    "start": "583209",
    "end": "589839"
  },
  {
    "text": "surprisingly it integrates with other AWS services like cloud watch events which you can use to trigger actions as",
    "start": "589839",
    "end": "597850"
  },
  {
    "text": "code is being checked in to the to the repository so for example using cloud",
    "start": "597850",
    "end": "603939"
  },
  {
    "text": "watch events you can can you can trigger a function to do a build on a future branch instead of waiting until that",
    "start": "603939",
    "end": "611319"
  },
  {
    "text": "feature is merged into the into the main and as of last week code commits now",
    "start": "611319",
    "end": "616480"
  },
  {
    "text": "supports pull requests which you can you can use to integrate changes from from",
    "start": "616480",
    "end": "622899"
  },
  {
    "text": "other people on your team you could also use I am for assigning granular",
    "start": "622899",
    "end": "628870"
  },
  {
    "text": "permissions to your repositories and another advantage to using these source control tools is that they allow you to",
    "start": "628870",
    "end": "635470"
  },
  {
    "text": "audit changes to your code over time and of course there are other solutions",
    "start": "635470",
    "end": "640839"
  },
  {
    "text": "besides code commit that you could use here like github enterprise and bitbucket",
    "start": "640839",
    "end": "647880"
  },
  {
    "start": "647000",
    "end": "647000"
  },
  {
    "text": "so doing frequent check-ins a day it's a core principle of CI CD this helps keep",
    "start": "647880",
    "end": "655389"
  },
  {
    "text": "your change rate low which ups reduce the overall risk associated ooh Singh changes with fewer changes in each",
    "start": "655389",
    "end": "663639"
  },
  {
    "text": "release at least it's theoretically easier to on earth bugs before they get released to",
    "start": "663639",
    "end": "670000"
  },
  {
    "text": "production it also gives you an opportunity to get feedback about your changes relatively quickly and change",
    "start": "670000",
    "end": "677410"
  },
  {
    "text": "course if necessary as for best practices consider storing your docker",
    "start": "677410",
    "end": "682779"
  },
  {
    "text": "file in the same repository as your application code commingling them by",
    "start": "682779",
    "end": "688720"
  },
  {
    "text": "commingling them together you don't have to evaluate which version of various",
    "start": "688720",
    "end": "694300"
  },
  {
    "text": "repositories can be used together moreover by keeping them together you can rebuild any container version you",
    "start": "694300",
    "end": "699850"
  },
  {
    "text": "may need at any time if you're using a compiled language like Java store that",
    "start": "699850",
    "end": "705660"
  },
  {
    "text": "in a separate version repository and then use Dockers copy command to copy",
    "start": "705660",
    "end": "711250"
  },
  {
    "text": "the asset into the image at Build time lots of build tools this like Jenkins",
    "start": "711250",
    "end": "717490"
  },
  {
    "text": "for example and then finally and this may seem overly obvious but keep code",
    "start": "717490",
    "end": "722740"
  },
  {
    "text": "for building your container infrastructure and your pipeline separate from your application code AWS",
    "start": "722740",
    "end": "731980"
  },
  {
    "start": "729000",
    "end": "729000"
  },
  {
    "text": "offers a variety of services to help you build automated sed pipelines including code build which is a managed build",
    "start": "731980",
    "end": "739240"
  },
  {
    "text": "service that compiles your source code you can use it to run unit tests and",
    "start": "739240",
    "end": "744579"
  },
  {
    "text": "then create assets that are ready to be deployed including doctor containers we",
    "start": "744579",
    "end": "751089"
  },
  {
    "text": "recently released the V PC endpoint for code build which is important for customers who are using private source",
    "start": "751089",
    "end": "757450"
  },
  {
    "text": "code repositories and their V pcs and and don't want their traffic to traverse an Internet gateway that said there are",
    "start": "757450",
    "end": "764410"
  },
  {
    "text": "lots of other build systems aside from code build that you could use here like Jenkins which has variety of",
    "start": "764410",
    "end": "770560"
  },
  {
    "text": "plugins for integrating with different systems and when you use code build you",
    "start": "770560",
    "end": "777220"
  },
  {
    "text": "provide it with a build specification that build specification includes a list of instructions for building the asset",
    "start": "777220",
    "end": "783690"
  },
  {
    "text": "these instructions are divided into several phases that can include instructions for say logging into a",
    "start": "783690",
    "end": "790959"
  },
  {
    "text": "docker registry and then tagging and pushing the container to the registry once the image is built you also run",
    "start": "790959",
    "end": "798130"
  },
  {
    "text": "unit tests like mocha as part of your build as well",
    "start": "798130",
    "end": "804070"
  },
  {
    "start": "802000",
    "end": "802000"
  },
  {
    "text": "and here's an example of what a typical build specification for a container would look like during the pre build",
    "start": "804070",
    "end": "810070"
  },
  {
    "text": "phase code build gets credentials for logging into the container registry in",
    "start": "810070",
    "end": "815410"
  },
  {
    "text": "this example we're logging into EC our next it builds and tags the container",
    "start": "815410",
    "end": "820630"
  },
  {
    "text": "and then pushes that to a docker registry during the post build phase so",
    "start": "820630",
    "end": "828730"
  },
  {
    "start": "826000",
    "end": "826000"
  },
  {
    "text": "when building containers are a handful of best practices that you should or try",
    "start": "828730",
    "end": "833889"
  },
  {
    "text": "to adhere do first is to tag output artifacts to source control revisions in",
    "start": "833889",
    "end": "839920"
  },
  {
    "text": "other words tag your containers with the get sha or the the version generated by the build system try to avoid using",
    "start": "839920",
    "end": "847380"
  },
  {
    "text": "latest or production tags as these can mask what version is actually deployed and make it harder to roll back to an",
    "start": "847380",
    "end": "855250"
  },
  {
    "text": "earlier version optimize your build by removing non-essential files from your",
    "start": "855250",
    "end": "861519"
  },
  {
    "text": "containers and you could do this by adding a docker ignore file to the same directory as your docker file when you",
    "start": "861519",
    "end": "868180"
  },
  {
    "text": "use docker ignore you're basically telling docker which files and directories to exclude from the build",
    "start": "868180",
    "end": "873630"
  },
  {
    "text": "which will increase your builds performance you should also try to organize your docker file in such a way",
    "start": "873630",
    "end": "881019"
  },
  {
    "text": "that the layers that frequently change appear at the bottom of the file and",
    "start": "881019",
    "end": "886120"
  },
  {
    "text": "also try to co-locate the build system with its artifact repository so you",
    "start": "886120",
    "end": "891220"
  },
  {
    "text": "don't have to push or pull data over long distances then finally be sure to",
    "start": "891220",
    "end": "897279"
  },
  {
    "text": "scan your images for common vulnerabilities docker is beginning to do this if you've looked at docker hub",
    "start": "897279",
    "end": "902290"
  },
  {
    "text": "recently and rebuild your container images when the base image changes",
    "start": "902290",
    "end": "908519"
  },
  {
    "start": "908000",
    "end": "908000"
  },
  {
    "text": "testing allows you to to verify application updates across a variety of",
    "start": "908880",
    "end": "914170"
  },
  {
    "text": "different dimensions for instance you can you can do unit tests or load tests",
    "start": "914170",
    "end": "919630"
  },
  {
    "text": "integration tests and so forth fortunately testing a docker container is not much more complicated than",
    "start": "919630",
    "end": "926220"
  },
  {
    "text": "testing the application itself because all the application dependencies are packaged with the container the primary",
    "start": "926220",
    "end": "932740"
  },
  {
    "text": "purpose of all of this testing is to help validate application updates preemptively discover issues before",
    "start": "932740",
    "end": "938100"
  },
  {
    "text": "they're released to a production environment now they're basically two types of tests you can perform when",
    "start": "938100",
    "end": "945000"
  },
  {
    "text": "working with containers you can either run a test inside the container or you",
    "start": "945000",
    "end": "950160"
  },
  {
    "text": "could run tests and catch mode or outside of the container to run a test inside the container you build the",
    "start": "950160",
    "end": "956760"
  },
  {
    "text": "container and invoke the test suite from inside the container this can be accomplished by passed commands to a",
    "start": "956760",
    "end": "963720"
  },
  {
    "text": "docker to the docker CLI during the post build phase as we saw when we looked at",
    "start": "963720",
    "end": "969120"
  },
  {
    "text": "the build specification for for code build and in this example here I'm I'm",
    "start": "969120",
    "end": "976020"
  },
  {
    "text": "calling a script that I've copied to the container to run a series of tests and then I can look at the output from that",
    "start": "976020",
    "end": "982140"
  },
  {
    "text": "script to see whether the test was successful or whether it failed now besides running tests inside the",
    "start": "982140",
    "end": "990270"
  },
  {
    "start": "986000",
    "end": "986000"
  },
  {
    "text": "container you often want to run tests against your containers for example when",
    "start": "990270",
    "end": "995850"
  },
  {
    "text": "doing load a performance test where you're playing bad asset the set of set of transactions this requires you to",
    "start": "995850",
    "end": "1002149"
  },
  {
    "text": "deploy the containers to a test environment where those tests can be performed and as we'll see shortly",
    "start": "1002149",
    "end": "1007630"
  },
  {
    "text": "ECS is really well equipped to handle the deployment of your containers across the set of instances where they can be",
    "start": "1007630",
    "end": "1013970"
  },
  {
    "text": "tested with tools like selenium or jmeter or run scope if your application",
    "start": "1013970",
    "end": "1020420"
  },
  {
    "text": "has external dependencies and if those dependencies are environment specific like say for example your service has a",
    "start": "1020420",
    "end": "1027890"
  },
  {
    "text": "dependency on a database and the connection string for that database changes from environment to environment",
    "start": "1027890",
    "end": "1034240"
  },
  {
    "text": "consider storing those environment variables in a key value store like the ec2 parameter store or in a third party",
    "start": "1034240",
    "end": "1041990"
  },
  {
    "text": "solution like console and then write your application to fetch these key value pairs at runtime rather than hard",
    "start": "1041990",
    "end": "1049340"
  },
  {
    "text": "coding them into your into your application so now onto deployment and",
    "start": "1049340",
    "end": "1055040"
  },
  {
    "text": "the eventual release to production deployment should be a repeatable process that produces consistent and",
    "start": "1055040",
    "end": "1061880"
  },
  {
    "text": "predictable results as we've heard containers make deployments simple because of the of the container model",
    "start": "1061880",
    "end": "1069720"
  },
  {
    "text": "tenure is effectively a standard box with an own set of dimensions that can be deployed by an orchestration service",
    "start": "1069720",
    "end": "1076049"
  },
  {
    "text": "like UCS or kubernetes or Mesa dos none of these tools really care about what's",
    "start": "1076049",
    "end": "1081059"
  },
  {
    "text": "in the container what matters here is the consistent format that docker provides and when it comes to deployment",
    "start": "1081059",
    "end": "1088679"
  },
  {
    "text": "there are several different options which we'll explore further in the in the upcoming slides these include things",
    "start": "1088679",
    "end": "1094590"
  },
  {
    "text": "like rolling deployments Bluegreen deployments and canary style deployments",
    "start": "1094590",
    "end": "1100580"
  },
  {
    "text": "before we look at deployment pipelines for ECS there are a couple of concepts",
    "start": "1100580",
    "end": "1106860"
  },
  {
    "text": "that are needing further explanation the first is a task definition so a task",
    "start": "1106860",
    "end": "1113190"
  },
  {
    "text": "definition is a set of configuration settings for a container or a related",
    "start": "1113190",
    "end": "1118409"
  },
  {
    "text": "stative set of containers that are meant to be deployed as a as a unit for those of you who work with docker before task",
    "start": "1118409",
    "end": "1125399"
  },
  {
    "text": "definition is similar to say docker compose file in that it includes the",
    "start": "1125399",
    "end": "1131100"
  },
  {
    "text": "names of each of the container images along with things like memory CPU ports",
    "start": "1131100",
    "end": "1136409"
  },
  {
    "text": "and other runtime parameters for running the containers service definition on the",
    "start": "1136409",
    "end": "1141450"
  },
  {
    "text": "other hand is a declarative set of instructions for running long-running casts like an API or a web front-end it",
    "start": "1141450",
    "end": "1149100"
  },
  {
    "text": "typically includes the name and version of the task definition minimum minimum",
    "start": "1149100",
    "end": "1154409"
  },
  {
    "text": "and maximum number of healthy instances as well as auto scaling parameters you know it could also include some",
    "start": "1154409",
    "end": "1160320"
  },
  {
    "text": "information about the load balancer that's fronting the service and creating",
    "start": "1160320",
    "end": "1165899"
  },
  {
    "text": "a deployment pipeline for ECS typically involves updating the task definition",
    "start": "1165899",
    "end": "1171299"
  },
  {
    "text": "with the latest version of the container image followed by an update to the",
    "start": "1171299",
    "end": "1176669"
  },
  {
    "text": "service definition to use the new task definition now to help you get started",
    "start": "1176669",
    "end": "1182639"
  },
  {
    "text": "building a ccd pipeline for running containers on ECS several of my peers have built reference architectures that",
    "start": "1182639",
    "end": "1189750"
  },
  {
    "text": "can be found on AWS labs in github this reference architecture that you're",
    "start": "1189750",
    "end": "1195330"
  },
  {
    "text": "seeing here builds an automated CI CD pipeline using github code pipeline",
    "start": "1195330",
    "end": "1203010"
  },
  {
    "text": "code build in an ECR when a change is pushed to github it triggers the",
    "start": "1203010",
    "end": "1208050"
  },
  {
    "text": "pipeline pipeline fetches code from github and then passes it to code build code build then builds a container from",
    "start": "1208050",
    "end": "1215250"
  },
  {
    "text": "the instructions that are in the docker file and then pushes the docker image to an ECR registry and then in the final",
    "start": "1215250",
    "end": "1222060"
  },
  {
    "text": "step the pipeline calls a cloud formation step that updates the tasks and service definitions which triggers a",
    "start": "1222060",
    "end": "1228390"
  },
  {
    "text": "rolling deployment of a new tack new tasks across the cluster and you'll see",
    "start": "1228390",
    "end": "1233580"
  },
  {
    "text": "that I've also included Jenkins here to show that in addition to using code build there are other options available",
    "start": "1233580",
    "end": "1240690"
  },
  {
    "text": "to you now there are several reasons why",
    "start": "1240690",
    "end": "1246090"
  },
  {
    "text": "you might want to consider using code pipeline to orchestrate your container pipelines the first is its deep",
    "start": "1246090",
    "end": "1253050"
  },
  {
    "text": "integration with the rest of the code star services like code commit and code build the second is its integration with",
    "start": "1253050",
    "end": "1259890"
  },
  {
    "text": "DCs so until recently you had to use a confirmation action or you had to",
    "start": "1259890",
    "end": "1265530"
  },
  {
    "text": "develop a custom action to update your ECS tasks and service definitions now",
    "start": "1265530",
    "end": "1271560"
  },
  {
    "text": "for for many and I know this certainly is applicable for me learning cloud",
    "start": "1271560",
    "end": "1278700"
  },
  {
    "text": "formation is a fairly long and arduous process and it can hinder the rapid",
    "start": "1278700",
    "end": "1285540"
  },
  {
    "text": "development of pipelines for ECS so i'm happy to announce that code pipeline",
    "start": "1285540",
    "end": "1291030"
  },
  {
    "text": "we'll be adding an action explicitly for ECS which takes a set of input",
    "start": "1291030",
    "end": "1296250"
  },
  {
    "text": "parameters like the URL and login credential or a docker registry along",
    "start": "1296250",
    "end": "1301290"
  },
  {
    "text": "with the names of the service and task definitions to update when it when a new",
    "start": "1301290",
    "end": "1306560"
  },
  {
    "text": "container image is pushed to the registry our hope is that this will",
    "start": "1306560",
    "end": "1312960"
  },
  {
    "text": "simplify creating pipelines for deploying services onto ECS now that",
    "start": "1312960",
    "end": "1319830"
  },
  {
    "text": "we've finished exploring how to build and test containers let's have a look at the knobs that we have to control how",
    "start": "1319830",
    "end": "1324990"
  },
  {
    "text": "your containers are deployed when you create an ECS service you specify",
    "start": "1324990",
    "end": "1330000"
  },
  {
    "text": "minimum and maximum number of healthy instances and these values are used to control the number of tasks that are",
    "start": "1330000",
    "end": "1336420"
  },
  {
    "text": "replayed at once for example say you have you've",
    "start": "1336420",
    "end": "1341610"
  },
  {
    "text": "configured a service to run four instances of a task with a minimum healthy percent of 50 and a maximum",
    "start": "1341610",
    "end": "1347100"
  },
  {
    "text": "health a percent of a hundred when you deploy an update service ECS will terminate two of the four containers and",
    "start": "1347100",
    "end": "1354270"
  },
  {
    "text": "replace them with two instances of the new task once those containers reach a healthy state the remainder of the older",
    "start": "1354270",
    "end": "1361799"
  },
  {
    "text": "tasks are replaced with the new version of the task now be aware that when the",
    "start": "1361799",
    "end": "1366900"
  },
  {
    "text": "schedule it employs a new version of the task your connections to ask are",
    "start": "1366900",
    "end": "1371970"
  },
  {
    "text": "gracefully drained first before the tasks are terminated and replaced with the new version of the task and to",
    "start": "1371970",
    "end": "1378539"
  },
  {
    "text": "trigger a deployment all you really need to do is call the update service API and this can be done a variety of ways",
    "start": "1378539",
    "end": "1384679"
  },
  {
    "text": "directly through the API itself or through the CLI or through confirmation",
    "start": "1384679",
    "end": "1390029"
  },
  {
    "text": "or even the new ECS now these next few",
    "start": "1390029",
    "end": "1395309"
  },
  {
    "text": "slides illustrate what I was talking about by manipulating the minimum and maximum healthy instances you can",
    "start": "1395309",
    "end": "1401850"
  },
  {
    "text": "control how many instances are once so here in this example we start asks instead of the four I used in my",
    "start": "1401850",
    "end": "1408000"
  },
  {
    "text": "previous example be aware that by setting the minimum 50% you're reducing",
    "start": "1408000",
    "end": "1413760"
  },
  {
    "text": "your services capacity I'll be briefly during the deployment there's also a",
    "start": "1413760",
    "end": "1419039"
  },
  {
    "text": "brief period when both versions of the service are serving requests at once",
    "start": "1419039",
    "end": "1425100"
  },
  {
    "text": "at least until ecs finishes deploying the new version of the TAT we'll talk about how you can do Bluegreen",
    "start": "1425100",
    "end": "1430710"
  },
  {
    "text": "deployments here momentarily so once the connections to the old tasks are drained",
    "start": "1430710",
    "end": "1437570"
  },
  {
    "text": "the new version of the task is deployed and it registers itself with a load",
    "start": "1437570",
    "end": "1442620"
  },
  {
    "text": "balancer bringing the service back to a hundred percent healthy once the new task is in a healthy State",
    "start": "1442620",
    "end": "1448760"
  },
  {
    "text": "the remaining old task is then terminated placed with a new version of",
    "start": "1448760",
    "end": "1455490"
  },
  {
    "text": "the task so we've seen how the ECF scheduler performs rolling deployments",
    "start": "1455490",
    "end": "1462029"
  },
  {
    "start": "1456000",
    "end": "1456000"
  },
  {
    "text": "of your tasks across the cluster and while this works for a majority of use cases may not be suitable for all",
    "start": "1462029",
    "end": "1467960"
  },
  {
    "text": "especially if you want to ensure that only one version of your service is serving",
    "start": "1467960",
    "end": "1473750"
  },
  {
    "text": "production traffic at once this often requires a Bluegreen style deployment where the new version of your service is",
    "start": "1473750",
    "end": "1480440"
  },
  {
    "text": "deployed alongside the old version but not serving production traffic Bluegreen",
    "start": "1480440",
    "end": "1486230"
  },
  {
    "text": "deployments have several advantages over rolling deployments including the ability to test the new version without",
    "start": "1486230",
    "end": "1493610"
  },
  {
    "text": "impacting production and then quickly rolling back to a previous version when issues are discovered with the new",
    "start": "1493610",
    "end": "1500390"
  },
  {
    "text": "version this can usually be accomplished by manipulating DNS records or through",
    "start": "1500390",
    "end": "1507740"
  },
  {
    "text": "the application load balancer which we'll see next so in in this reference",
    "start": "1507740",
    "end": "1513260"
  },
  {
    "text": "architecture we'll show you how to perform blue green style deployments using the application look balancer",
    "start": "1513260",
    "end": "1519230"
  },
  {
    "text": "in this scenario we have two services each with their own target group behind the same application load balancer and",
    "start": "1519230",
    "end": "1525170"
  },
  {
    "text": "we use the application load balancers host based routing rules to route request to each version we're ready to",
    "start": "1525170",
    "end": "1532010"
  },
  {
    "text": "promote the new version of the service to production we simply swap the listener rules for the two target groups",
    "start": "1532010",
    "end": "1539320"
  },
  {
    "text": "here you can see the different host based routing rules for each of the target groups the blue service is",
    "start": "1539320",
    "end": "1545330"
  },
  {
    "text": "serving requests at example.com whereas the Green Service is responding to",
    "start": "1545330",
    "end": "1550490"
  },
  {
    "text": "requests at next example.com after we're done testing the green version we call a",
    "start": "1550490",
    "end": "1557060"
  },
  {
    "text": "function to swap the listener rules on the alb which starts sending traffic for",
    "start": "1557060",
    "end": "1563660"
  },
  {
    "text": "example com2 the green version of the service once we're satisfied that the",
    "start": "1563660",
    "end": "1569780"
  },
  {
    "text": "green version is working as expected we can then kill the blue version of the service and its associated target group",
    "start": "1569780",
    "end": "1576470"
  },
  {
    "text": "and canary style deployments are another",
    "start": "1576470",
    "end": "1581630"
  },
  {
    "text": "type of deployment that it's useful when you want to divert portion of your traffic to a new version of your service",
    "start": "1581630",
    "end": "1588740"
  },
  {
    "text": "they either randomly or based on a user's attributes now Canaries are often",
    "start": "1588740",
    "end": "1594020"
  },
  {
    "text": "deployed often employed to do a/b tests",
    "start": "1594020",
    "end": "1599200"
  },
  {
    "text": "where you're trying to identify changes to webpages that increase or Maxima",
    "start": "1599200",
    "end": "1604310"
  },
  {
    "text": "particular outcome for example click-through rate for a banner ad based",
    "start": "1604310",
    "end": "1610490"
  },
  {
    "text": "on the results of your test you can either replace the current running version with the new version of the",
    "start": "1610490",
    "end": "1615740"
  },
  {
    "text": "service or you can keep the current version in place in this reference",
    "start": "1615740",
    "end": "1622340"
  },
  {
    "start": "1620000",
    "end": "1620000"
  },
  {
    "text": "architecture here we leverage route 53 weights to adjust the traffic flow from one ECS service to another we start by",
    "start": "1622340",
    "end": "1630770"
  },
  {
    "text": "deploying the green service alongside the blue service each behind its own application load balancer and then we",
    "start": "1630770",
    "end": "1637490"
  },
  {
    "text": "use step functions to gradually transition the traffic from the blue alb to the green alb if the step function",
    "start": "1637490",
    "end": "1644870"
  },
  {
    "text": "detects a an issue it'll automatically roll back its original configuration now",
    "start": "1644870",
    "end": "1652760"
  },
  {
    "text": "if you rather not use these reference architectures or build your own solution we have some great partners who have who",
    "start": "1652760",
    "end": "1660200"
  },
  {
    "text": "have integrated CI CD solutions for Amazon UCS a handful of which appear on the slide and I'd encourage you to visit",
    "start": "1660200",
    "end": "1667490"
  },
  {
    "text": "them at the part Expo while you're here in town and now that you've seen several",
    "start": "1667490",
    "end": "1673670"
  },
  {
    "text": "of those reference architectures for building CD pipelines for ECS I'd encourage you to give them a try",
    "start": "1673670",
    "end": "1680510"
  },
  {
    "text": "yourself we welcome all feedback of course including issues and pull requests you",
    "start": "1680510",
    "end": "1686420"
  },
  {
    "text": "should also consider joining our slack channel at Amazon - ECS slack calm and",
    "start": "1686420",
    "end": "1695540"
  },
  {
    "start": "1695000",
    "end": "1695000"
  },
  {
    "text": "with that I'd like to introduce Jim who's going to tell you how Edmonds is using ECS to help folks like you and me",
    "start": "1695540",
    "end": "1702230"
  },
  {
    "text": "find the perfect car Thank You Jeremy",
    "start": "1702230",
    "end": "1706660"
  },
  {
    "text": "hello everyone can you hear me okay",
    "start": "1713380",
    "end": "1719890"
  },
  {
    "text": "check good now oh thanks hello everyone at eight months we love",
    "start": "1720610",
    "end": "1727820"
  },
  {
    "text": "helping people find the right car I'm sure many of you have gone there those who have not check us out we have a lot",
    "start": "1727820",
    "end": "1733640"
  },
  {
    "text": "of inventory for you guys out there I am a GTR Gawker I'm executive director at Edmonds I manage infrastructure",
    "start": "1733640",
    "end": "1739670"
  },
  {
    "text": "operations production operations and I also lead in type of practice as a red mats so I've kept some information for",
    "start": "1739670",
    "end": "1749420"
  },
  {
    "text": "you here my goal is to give you as much information as you can grasp and build your own CI CD we have been doing CGI CD",
    "start": "1749420",
    "end": "1758150"
  },
  {
    "text": "Redmon's for over five years now and we have learned some hard lessons hopefully by sharing those you can avoid some of",
    "start": "1758150",
    "end": "1764090"
  },
  {
    "text": "the mistakes that we did so a couple things here on the agenda quickly giving",
    "start": "1764090",
    "end": "1770150"
  },
  {
    "text": "you the context of who we are what we do what's what has been our journey into",
    "start": "1770150",
    "end": "1775910"
  },
  {
    "text": "AWS and to clouds our journey into containers and how this all fits into making CI CD very efficient system for",
    "start": "1775910",
    "end": "1783679"
  },
  {
    "text": "us so some of the interesting numbers that I've collected for you here that",
    "start": "1783679",
    "end": "1789320"
  },
  {
    "text": "means we serve about 200 million page views a month we have about 20 million unique visitors coming to us every month",
    "start": "1789320",
    "end": "1795170"
  },
  {
    "text": "we have thousands of partners and franchisee and we have over active or 5",
    "start": "1795170",
    "end": "1801200"
  },
  {
    "text": "million active and went raving any given point of time on the website over quarter billion unique visitors visit us",
    "start": "1801200",
    "end": "1808130"
  },
  {
    "text": "every year which means and 59% of car shoppers they visit Edmunds so in in all",
    "start": "1808130",
    "end": "1814100"
  },
  {
    "text": "about six out of ten people be influenced I went to visit and their buying decision Edmonds has been into",
    "start": "1814100",
    "end": "1822770"
  },
  {
    "start": "1819000",
    "end": "1819000"
  },
  {
    "text": "clouds for a little bit we started exploring virtualization back in 2011",
    "start": "1822770",
    "end": "1828230"
  },
  {
    "text": "with Zen we started changing we deployed our own private cloud and then late in",
    "start": "1828230",
    "end": "1833960"
  },
  {
    "text": "2013 we started exploring AWS and we thought we'll be migrating in over in",
    "start": "1833960",
    "end": "1840290"
  },
  {
    "text": "three years fully we are all in AWS customer and we we",
    "start": "1840290",
    "end": "1846770"
  },
  {
    "text": "basically went into a taboo as much ahead at the time by middle of - by",
    "start": "1846770",
    "end": "1852710"
  },
  {
    "text": "middle of 2008 2014-15 timeframe since then we have been serving all over production traffic from AWS and in 2016",
    "start": "1852710",
    "end": "1860960"
  },
  {
    "text": "we shut down our data centers and as you can see there so the reason is why many",
    "start": "1860960",
    "end": "1869240"
  },
  {
    "text": "people ask why clouds and some of the reasons are pretty obvious the business growth has been really aggressive for us",
    "start": "1869240",
    "end": "1876640"
  },
  {
    "text": "product we wanted to roll out much faster rate so we can reach out to our end users for the demands that you mean",
    "start": "1876640",
    "end": "1883630"
  },
  {
    "text": "we also have a desire for doing rapid experimentation so in the world school getting hardware provision into Data",
    "start": "1883630",
    "end": "1890750"
  },
  {
    "text": "store data center used to take six eight weeks and so all of that is gone and also dynamic infrastructure changes so",
    "start": "1890750",
    "end": "1897170"
  },
  {
    "text": "even with auto scaling in our private cloud we still had to invest a lot of capital into maintaining extra hardware so that",
    "start": "1897170",
    "end": "1904340"
  },
  {
    "text": "increased our ongoing infrastructure cost we have a public history out there",
    "start": "1904340",
    "end": "1909650"
  },
  {
    "text": "we are saving about 70% of our cost by going to AWS those who are interested in checking that out so then once we were",
    "start": "1909650",
    "end": "1917600"
  },
  {
    "text": "into clouds containers came in and why containers so first of all it's immutable object once",
    "start": "1917600",
    "end": "1925340"
  },
  {
    "text": "you build it it will run same on your laptop onto that bench work bench or in",
    "start": "1925340",
    "end": "1930530"
  },
  {
    "text": "integration environment or in production so there's a consistent behavior when you're debugging when you are trying to",
    "start": "1930530",
    "end": "1937490"
  },
  {
    "text": "troubleshoot it makes it easy when deployments are super fast to give to",
    "start": "1937490",
    "end": "1943220"
  },
  {
    "text": "give us some understanding of what fast means before containers when we were serving artifacts on ec2 containers",
    "start": "1943220",
    "end": "1950809"
  },
  {
    "text": "sorry easy to host an artifact that would take about anywhere from 11 to 17",
    "start": "1950809",
    "end": "1955850"
  },
  {
    "text": "minutes to get bootstrap come and get ready to serve traffic now takes about 22 seconds so that's a magnitude of",
    "start": "1955850",
    "end": "1963470"
  },
  {
    "text": "change when it yeah when we look at faster deployment the faster deployment also helps us with better HS so if",
    "start": "1963470",
    "end": "1970130"
  },
  {
    "text": "something crashed another container comes up and container management software's a pretty good",
    "start": "1970130",
    "end": "1975260"
  },
  {
    "text": "for that and we are using ecs not only that we are also using different",
    "start": "1975260",
    "end": "1981559"
  },
  {
    "text": "placement strategies like bin pack and is a distribution with all of that we are saving about 30 30 percent plus cost",
    "start": "1981559",
    "end": "1988940"
  },
  {
    "text": "by going to his containerization we are using a CSS our container orchestration",
    "start": "1988940",
    "end": "1996440"
  },
  {
    "text": "and management platform so basically we migrated all of our services about 95",
    "start": "1996440",
    "end": "2001840"
  },
  {
    "text": "percent of our services that used to run on ec2 are now running on docker and ECS",
    "start": "2001840",
    "end": "2007169"
  },
  {
    "text": "ECS is managing all the underlying infrastructure deployments auto scaling",
    "start": "2007169",
    "end": "2013030"
  },
  {
    "text": "all of that once the image is already there put into VCR and we use cloud",
    "start": "2013030",
    "end": "2020620"
  },
  {
    "text": "formation and ops words to provision ECS cluster that he offers is also helping",
    "start": "2020620",
    "end": "2028960"
  },
  {
    "text": "us configure the logging the agents APM agents are configurable and then I would",
    "start": "2028960",
    "end": "2038679"
  },
  {
    "text": "say except a few exceptions where some of the core infrastructure like elastic and everything else now we be run",
    "start": "2038679",
    "end": "2046299"
  },
  {
    "text": "on docker nowadays we also looked at a",
    "start": "2046299",
    "end": "2051310"
  },
  {
    "text": "couple container orchestration platform we are all in AWS customer we didn't",
    "start": "2051310",
    "end": "2056770"
  },
  {
    "text": "have a hybrid solution we are not multi-cloud either so ECS matter on age",
    "start": "2056770",
    "end": "2062368"
  },
  {
    "text": "it has automatic scaling it has AZ distribution scaling I told you it's",
    "start": "2062369",
    "end": "2068470"
  },
  {
    "text": "pretty fast and then it's been very well integrated with other services so in our",
    "start": "2068470",
    "end": "2073810"
  },
  {
    "text": "case it worked out pretty well the downtime of the deployment that usually",
    "start": "2073810",
    "end": "2079270"
  },
  {
    "text": "used to happen before CICE and container was pretty dramatically reduced now and",
    "start": "2079270",
    "end": "2085030"
  },
  {
    "text": "the ami upgrades that keep on coming in to improve the docker new version that is very easy with ECS as well so now",
    "start": "2085030",
    "end": "2094179"
  },
  {
    "text": "that we were in cloud we have darker and occurs we wanted to revamp our CI CD - let's see to see if we can get even more",
    "start": "2094179",
    "end": "2101590"
  },
  {
    "text": "out of our infrastructure the need for CD was again faster feedback I don't want to repeat what",
    "start": "2101590",
    "end": "2107860"
  },
  {
    "text": "Jeremy said that some of the important things have a faster feedback low risk and how do we identify bottlenecks",
    "start": "2107860",
    "end": "2116320"
  },
  {
    "text": "as soon as possible as soon as the code is in so those were primary drivers for us to do this is a conceptual overview",
    "start": "2116320",
    "end": "2123580"
  },
  {
    "text": "of what we wanted to do and I will get to in couple minutes next slides where",
    "start": "2123580",
    "end": "2129100"
  },
  {
    "text": "we ended up so this was our overview of what we wanted to do with CI Syria admins the idea was simple as soon as",
    "start": "2129100",
    "end": "2137080"
  },
  {
    "text": "you write the code you check in and the automated routine should kick in and then deployment should happen in a",
    "start": "2137080",
    "end": "2143350"
  },
  {
    "text": "manner that is that does not impact the services and once it's out there how do",
    "start": "2143350",
    "end": "2149230"
  },
  {
    "text": "we manage it so there's a continuous feedback loop going in to the development wing and loeb understanding",
    "start": "2149230",
    "end": "2157780"
  },
  {
    "text": "of how we are structured on our infrastructure side we are multi CDN and we are multi Izzi multi-region",
    "start": "2157780",
    "end": "2163840"
  },
  {
    "text": "deployment engine X is sitting at the top and then basically then different",
    "start": "2163840",
    "end": "2171250"
  },
  {
    "text": "environments or in different region that we serve traffic through we also do latency based routing so people who are",
    "start": "2171250",
    "end": "2178750"
  },
  {
    "text": "coming from different region they're served from a different region now",
    "start": "2178750",
    "end": "2184540"
  },
  {
    "text": "getting into some of the details of how our implementation is and what we needed",
    "start": "2184540",
    "end": "2190090"
  },
  {
    "text": "to do before we got to a smooth experience on CI CD so getting a CI and",
    "start": "2190090",
    "end": "2197320"
  },
  {
    "text": "CD part is easy that's orchestration you can plumb different tools together and you have a",
    "start": "2197320",
    "end": "2202600"
  },
  {
    "text": "CI CT pipeline working there some of the important concerns are do I have a CI CD",
    "start": "2202600",
    "end": "2208840"
  },
  {
    "text": "that is really going to catch defects that's going to prevent miss happenings in production but it deploy artifacts in",
    "start": "2208840",
    "end": "2215560"
  },
  {
    "text": "a way that are graceful deployments and when there are things going bad then are",
    "start": "2215560",
    "end": "2221710"
  },
  {
    "text": "they going to remove the bad nodes graceful manner so there is no user impact so to be able to do that we",
    "start": "2221710",
    "end": "2229390"
  },
  {
    "text": "needed to work and do some heavy lifting to make our platform ready for that so as you see in the picture",
    "start": "2229390",
    "end": "2236180"
  },
  {
    "text": "cloud formation is used to provision the host underlined house when the host comes and we configure the logging there",
    "start": "2236180",
    "end": "2242749"
  },
  {
    "text": "we configure darker agents ECS agents and then configure rules so there is a",
    "start": "2242749",
    "end": "2248900"
  },
  {
    "text": "guarantee that all all of hosts look similar now we also use AWS inspector just in",
    "start": "2248900",
    "end": "2254509"
  },
  {
    "text": "case we want to run the scanning for security purposes then we as Jeremy",
    "start": "2254509",
    "end": "2260989"
  },
  {
    "text": "mentioned CloudFormation gets very long and very complex so we ended up using a",
    "start": "2260989",
    "end": "2266059"
  },
  {
    "text": "small tool and it's pretty much API that we trigger so if a developer wants to deploy something it's a little - they",
    "start": "2266059",
    "end": "2273380"
  },
  {
    "text": "come and add different details and automatically creates the task the service definitions the auto scaling so",
    "start": "2273380",
    "end": "2279170"
  },
  {
    "text": "we are instead of using cloud formation we we are using that most of the",
    "start": "2279170",
    "end": "2284299"
  },
  {
    "text": "templates we standardized something that Jeremy mentioned containers by",
    "start": "2284299",
    "end": "2289729"
  },
  {
    "text": "standardizing the whole shipping industry change we took we took that little bit to the heart yeah what we did",
    "start": "2289729",
    "end": "2297529"
  },
  {
    "text": "was before moving to container eyes containers from ec2 we looked at all of our artifacts different applications",
    "start": "2297529",
    "end": "2303619"
  },
  {
    "text": "that get deployed and we looked at them in different ways one is what type of artifacts they are whether they Java",
    "start": "2303619",
    "end": "2309859"
  },
  {
    "text": "note or something else now are they web app or their standalone applications their back office or their",
    "start": "2309859",
    "end": "2315979"
  },
  {
    "text": "public facing so all of those and we came up with multiple templates and for each application we standardized the",
    "start": "2315979",
    "end": "2322849"
  },
  {
    "text": "idea was once the templates are ready then the migration will be smooth and that really worked in our favor so by",
    "start": "2322849",
    "end": "2329209"
  },
  {
    "text": "spending about a month in coming up template izing logging all of that it was ready and once we start migrating we",
    "start": "2329209",
    "end": "2335390"
  },
  {
    "text": "were up and running in no time so I would HIGHLY emphasize those of you who are looking at migrating to",
    "start": "2335390",
    "end": "2341509"
  },
  {
    "text": "containers and to invest in time and try to standardize and that will help you a lot we also used an configuration by",
    "start": "2341509",
    "end": "2349670"
  },
  {
    "start": "2347000",
    "end": "2347000"
  },
  {
    "text": "default it's also known as conflict by exception so our containers are",
    "start": "2349670",
    "end": "2355819"
  },
  {
    "text": "environment aware so if you learn run on your laptop it knows that oh it's a laptop versus a managed environment and",
    "start": "2355819",
    "end": "2361249"
  },
  {
    "text": "based on that we can invoke and the database connection so production environment should connect to a",
    "start": "2361249",
    "end": "2366679"
  },
  {
    "text": "particular database connections or particular caching layer and so is",
    "start": "2366679",
    "end": "2371940"
  },
  {
    "text": "the different DNS settings so that helps a lot at the development team you don't",
    "start": "2371940",
    "end": "2378210"
  },
  {
    "text": "have to worry about changing runtime properties so that's part of our",
    "start": "2378210",
    "end": "2383280"
  },
  {
    "text": "templates as well auto scaling auto",
    "start": "2383280",
    "end": "2389099"
  },
  {
    "start": "2387000",
    "end": "2387000"
  },
  {
    "text": "scaling is important piece many consider this is a operationalizing aspect I consider this as a CI CD aspect if even",
    "start": "2389099",
    "end": "2398040"
  },
  {
    "text": "in pre-production environment you cannot deploy a artifact in a way that you're going to deploy in production then",
    "start": "2398040",
    "end": "2403260"
  },
  {
    "text": "you're not doing the right thing you want to be having the consistent behavior so there's a little bit of",
    "start": "2403260",
    "end": "2409590"
  },
  {
    "text": "neurons involved in auto scaling we try different things CPU based memory based and that sort of",
    "start": "2409590",
    "end": "2416790"
  },
  {
    "text": "pretty well and but our services were fronted with ELB is until be migrated to",
    "start": "2416790",
    "end": "2422220"
  },
  {
    "text": "a always by the way that's another really strong thing that you should look at we are looking at realizing about",
    "start": "2422220",
    "end": "2428000"
  },
  {
    "text": "$100,000 but just by consolidating and moving to a Obi's so as soon as we",
    "start": "2428000",
    "end": "2434130"
  },
  {
    "text": "started our opting to a elby's we started getting new metric like target base request count so now we have the",
    "start": "2434130",
    "end": "2442950"
  },
  {
    "text": "request ground base scaling so if a particular container is getting more requests than we scale based on that we",
    "start": "2442950",
    "end": "2448560"
  },
  {
    "text": "also have CPU based and memory by scaling but they are in a back seat just in case of something is needed and we",
    "start": "2448560",
    "end": "2455220"
  },
  {
    "text": "also have scheduled base scaling so you can have multiple combinations and depending on the situation one of it",
    "start": "2455220",
    "end": "2461670"
  },
  {
    "text": "will take care of it and that's what is happening in our case we deployed the same configuration is deployed in our",
    "start": "2461670",
    "end": "2467970"
  },
  {
    "text": "pre-production environments as well that's already Phi is our testing we can mimic the production behavior more",
    "start": "2467970",
    "end": "2474660"
  },
  {
    "text": "accurately the downscaling was a little bit of it's pretty interesting there and",
    "start": "2474660",
    "end": "2483359"
  },
  {
    "text": "when you're managing ECS cluster or any docker container cluster now you've got to manage two types of scaling one is",
    "start": "2483359",
    "end": "2489390"
  },
  {
    "text": "the container scaling second is the cluster scaling so for the instance auto scaling to make sure that anytime when",
    "start": "2489390",
    "end": "2497970"
  },
  {
    "text": "we want to container to be auto scale aggressively we are keeping a additional hosts in our cluster that way",
    "start": "2497970",
    "end": "2503859"
  },
  {
    "text": "we can very quickly scale up and not wait for ec2 instance to come up for",
    "start": "2503859",
    "end": "2509530"
  },
  {
    "text": "that when down scaling let's say if you have a scenario when there's a step down",
    "start": "2509530",
    "end": "2516580"
  },
  {
    "text": "and down scaling the down scaling doesn't work very smartly what it does is it randomly it will pull up a note",
    "start": "2516580",
    "end": "2523570"
  },
  {
    "text": "down whether you have the oldest northern us node but it's not aware that I have a container running on it so we",
    "start": "2523570",
    "end": "2530830"
  },
  {
    "text": "need it to work a little bit to deal with downscaling nuances in our testing",
    "start": "2530830",
    "end": "2535869"
  },
  {
    "start": "2532000",
    "end": "2532000"
  },
  {
    "text": "we were constantly seeing throttling so what we do is we have a lambda function that checks how many nodes in the",
    "start": "2535869",
    "end": "2541930"
  },
  {
    "text": "cluster are there that have nothing running before downscaling kicks in we",
    "start": "2541930",
    "end": "2547240"
  },
  {
    "text": "do a termination protection on the nodes that are running and then we allow downscale to happen so basically when",
    "start": "2547240",
    "end": "2553060"
  },
  {
    "text": "downscale happens it's killing only the nose that are nothing and they have no containers running so that that saved us",
    "start": "2553060",
    "end": "2559839"
  },
  {
    "text": "a lot of headache during testing timeframe we also invested in building a",
    "start": "2559839",
    "end": "2567580"
  },
  {
    "start": "2564000",
    "end": "2564000"
  },
  {
    "text": "custom docker build framework so as I mentioned there's templates we have templates",
    "start": "2567580",
    "end": "2573160"
  },
  {
    "text": "everywhere now each artifact has a template where you can mention what Java version you're running how much memory",
    "start": "2573160",
    "end": "2580089"
  },
  {
    "text": "you need our CPU need there are global settings like APM's and others yeah and",
    "start": "2580089",
    "end": "2586920"
  },
  {
    "text": "for the goal here was to how do we allow developers to focus on one area is how",
    "start": "2586920",
    "end": "2592960"
  },
  {
    "text": "do you code well if we can externalize all of this power properties and keep it in the code with the code then there is",
    "start": "2592960",
    "end": "2599560"
  },
  {
    "text": "nothing else that developer needs to do yeah so there's a lot of template",
    "start": "2599560",
    "end": "2604599"
  },
  {
    "text": "ization that we do at that layer as well very soon and the problem was how do we",
    "start": "2604599",
    "end": "2612190"
  },
  {
    "text": "have a registry where what application what type of URL we want to serve so we",
    "start": "2612190",
    "end": "2618190"
  },
  {
    "text": "came up with our own we are calling it a service registry docker or service registry with each application core",
    "start": "2618190",
    "end": "2626790"
  },
  {
    "text": "developer checks in the URL rules as soon as the container comes up with those it registers those URLs on ec2 and",
    "start": "2626790",
    "end": "2633970"
  },
  {
    "text": "in Jay picks it up from there and refreshes it so we didn't have to write another complex service in Discovery layer and",
    "start": "2633970",
    "end": "2641930"
  },
  {
    "text": "it has worked out pretty well for us and down the line we are looking at replacing nginx as ELB matures so we are",
    "start": "2641930",
    "end": "2649340"
  },
  {
    "text": "looking for that as well Canary so now we have quickly checking",
    "start": "2649340",
    "end": "2660740"
  },
  {
    "start": "2652000",
    "end": "2652000"
  },
  {
    "text": "where we are we are in cloud we have containers going we have CICE going we have auto scaling manage that didn't",
    "start": "2660740",
    "end": "2667880"
  },
  {
    "text": "really make us happy only thing we could do was automated deployment with rolling deployments or we do bleed blue green",
    "start": "2667880",
    "end": "2674690"
  },
  {
    "text": "but that's not really what we wanted to do we wanted to have continuous deployment in all of animal and Wyman's",
    "start": "2674690",
    "end": "2679700"
  },
  {
    "text": "a new application gets deployed sent to three percent of traffic if everything goes well then keep increasing the",
    "start": "2679700",
    "end": "2685460"
  },
  {
    "text": "percentage of traffic if it's not looking good then scale it back so this",
    "start": "2685460",
    "end": "2691250"
  },
  {
    "text": "is where we are at with canary and we have any canary services we name them",
    "start": "2691250",
    "end": "2697310"
  },
  {
    "text": "stable and the new version when the new artifacts come up divide by default go",
    "start": "2697310",
    "end": "2702590"
  },
  {
    "text": "to the canary version and I'll show you another picture for your son and then there is an automated increase or",
    "start": "2702590",
    "end": "2709460"
  },
  {
    "text": "decrease of the traffic percentage now we also use a lot of data that we gather",
    "start": "2709460",
    "end": "2715220"
  },
  {
    "text": "from a pre prod and production environments and we have built a little machine learning model on top of it that tells us more accurately the state of",
    "start": "2715220",
    "end": "2723310"
  },
  {
    "text": "state of our artifacts and testing so now tying this all to see ICD back again",
    "start": "2723310",
    "end": "2730930"
  },
  {
    "text": "and this is a standard merge request Rock workflow we use get lab and the",
    "start": "2730930",
    "end": "2739130"
  },
  {
    "text": "idea here is each developer works in a feature branch once there they are ready to check in their code and they check in",
    "start": "2739130",
    "end": "2745070"
  },
  {
    "text": "their code we use Jenkins and code build both Thank You Jeremy for announcing we are looking forward to hammer to code",
    "start": "2745070",
    "end": "2752030"
  },
  {
    "text": "build in our observation code build has been 40 percent faster than Jenkins when",
    "start": "2752030",
    "end": "2757310"
  },
  {
    "text": "it comes to building to occur images so I'm pretty excited going there so developer checks in the code it goes to",
    "start": "2757310",
    "end": "2763640"
  },
  {
    "text": "Jenkins Jenkins builds a darker image one the darker image is really we have something called a sandbox environment",
    "start": "2763640",
    "end": "2770700"
  },
  {
    "text": "that's where it gets deployed it's a stripped-down version of a production environments where developers can show",
    "start": "2770700",
    "end": "2776369"
  },
  {
    "text": "it to buddy buddy of them are sure to product team and they're working on small changes everyone can look at those",
    "start": "2776369",
    "end": "2782549"
  },
  {
    "text": "and when they are satisfied they have done enough testing then they are ready to merge it back to the main line once",
    "start": "2782549",
    "end": "2788069"
  },
  {
    "text": "they merge it to main line then it gets built a new version and then it is deployed to the integration integrated",
    "start": "2788069",
    "end": "2795299"
  },
  {
    "text": "environment with an integration test their load test will mimic and we try to",
    "start": "2795299",
    "end": "2801029"
  },
  {
    "text": "do scale scalability test all of that and then finally through canary it goes to the production environment this model",
    "start": "2801029",
    "end": "2808829"
  },
  {
    "text": "also allows us to have doubly each and all different reviews in architecture",
    "start": "2808829",
    "end": "2815039"
  },
  {
    "text": "leads they review all of the code when the code is already deployed in sandbox",
    "start": "2815039",
    "end": "2821779"
  },
  {
    "text": "our tool set there are lots of tools here some of them are common and that Jeremy mentioned on the gate we and we",
    "start": "2822079",
    "end": "2830009"
  },
  {
    "text": "use get lab and code commit we have Jenkins and code build docker registry is easy our views absorb provision our",
    "start": "2830009",
    "end": "2837299"
  },
  {
    "text": "hosts we have tools that we developed for ECS API so that we can save",
    "start": "2837299",
    "end": "2843900"
  },
  {
    "text": "ourselves from cloud formation on the pipeline orchestration we have Jenkins",
    "start": "2843900",
    "end": "2849210"
  },
  {
    "text": "pipeline blue ocean we also use code deploy we also use code pipeline as well there's a lot of data that's coming in",
    "start": "2849210",
    "end": "2856799"
  },
  {
    "text": "we are all of our artifacts are constantly emitting data that we put into time-series data base we have stats",
    "start": "2856799",
    "end": "2863700"
  },
  {
    "text": "D style data emission and currently we are using wavefront that's a pretty",
    "start": "2863700",
    "end": "2869279"
  },
  {
    "text": "powerful time series database that has that has alerting an anomaly detection",
    "start": "2869279",
    "end": "2875309"
  },
  {
    "text": "as well and finally we use vector ops when things go wrong to alert us so this",
    "start": "2875309",
    "end": "2881549"
  },
  {
    "text": "is correct and today's a representation of where we are with our CI CD so",
    "start": "2881549",
    "end": "2887940"
  },
  {
    "text": "developers work in a feature branch once they are ready to come out in the artifact gets deployed to sandbox and",
    "start": "2887940",
    "end": "2893609"
  },
  {
    "text": "once it's ready to get merged into mainline and then it gets merged into mainline then we deploy to a dev and why",
    "start": "2893609",
    "end": "2899609"
  },
  {
    "text": "that's our first integration environment we run lots of integration tests once",
    "start": "2899609",
    "end": "2904709"
  },
  {
    "text": "those automatic tests have passed artifact is ready to get from audit to qny and that's where we do scalability",
    "start": "2904709",
    "end": "2911400"
  },
  {
    "text": "testing and load testing we used a meter for that and once it's qualified there",
    "start": "2911400",
    "end": "2918599"
  },
  {
    "text": "then in production it opens up a canary branch so code gets deployed through canary as long as on the left on the",
    "start": "2918599",
    "end": "2927319"
  },
  {
    "text": "left side on the below the green dials if canary version shows improvement from",
    "start": "2927319",
    "end": "2932670"
  },
  {
    "text": "the previous version it keeps increasing percentage automatically we use lambda step functions to increase the",
    "start": "2932670",
    "end": "2937920"
  },
  {
    "text": "percentages and if something is not looking good then it starts to gradually decrease it now instead of cutting down",
    "start": "2937920",
    "end": "2944219"
  },
  {
    "text": "straightaway to zero we gradually decrease it so we know at what point it started to go bad so in case if it was a",
    "start": "2944219",
    "end": "2950069"
  },
  {
    "text": "scalability problem then it goes bad at 60% traffic or 70% traffic we can find what's happening there as I mentioned",
    "start": "2950069",
    "end": "2959369"
  },
  {
    "text": "all of the data we store in two time series database the idea is to gather as",
    "start": "2959369",
    "end": "2964890"
  },
  {
    "text": "much data and use it to build modeling's to give an example if you're deploying",
    "start": "2964890",
    "end": "2970319"
  },
  {
    "text": "an artifact right when it comes up it shows a different symptom maybe it's building the cache maybe it's not ready",
    "start": "2970319",
    "end": "2976890"
  },
  {
    "text": "it's it's cold at this time you may be this spring beans are not initialized",
    "start": "2976890",
    "end": "2982319"
  },
  {
    "text": "well yet this time and you might see more number of non 200 but it settles in",
    "start": "2982319",
    "end": "2987839"
  },
  {
    "text": "in couple seconds so we don't want canary to immediately say no something is going wrong so by collecting data now",
    "start": "2987839",
    "end": "2994109"
  },
  {
    "text": "we have and better understanding of what happens when we deploy something so",
    "start": "2994109",
    "end": "2999299"
  },
  {
    "text": "that's just one example there are many others you can see suddenly the number of connections going to a data store",
    "start": "2999299",
    "end": "3005209"
  },
  {
    "text": "increases because there are more number of containers that also gave us the ability to look into how do we scale databases and what kind of provisioning",
    "start": "3005209",
    "end": "3012259"
  },
  {
    "text": "we need so I would highly recommend omit the data as much as you can and build modeling to make your CI CD stable",
    "start": "3012259",
    "end": "3019279"
  },
  {
    "text": "ultimate goal is you check in the code and not worry about anything else and if it's fail it will come back to your desk",
    "start": "3019279",
    "end": "3025660"
  },
  {
    "text": "and it will alert you in our case we alert by all means email form slack when",
    "start": "3025660",
    "end": "3032119"
  },
  {
    "text": "things go wrong be alert developers all possible ways that something is not right at any time this",
    "start": "3032119",
    "end": "3039079"
  },
  {
    "text": "is a dashboard of canary versus table so by omitting the data we know now this is",
    "start": "3039079",
    "end": "3044599"
  },
  {
    "text": "a stable version expected behavior when canary is large we see them side by side and there's anomaly detection enabled on",
    "start": "3044599",
    "end": "3051680"
  },
  {
    "text": "it when things are not looking good it fires events and alerts and if it's looking good then we keep on increasing",
    "start": "3051680",
    "end": "3057049"
  },
  {
    "text": "the percentage that's a that has saved",
    "start": "3057049",
    "end": "3063440"
  },
  {
    "text": "us a lot earlier we used to monitor it and then let's increase the percentage let's increase the percentage someone",
    "start": "3063440",
    "end": "3068960"
  },
  {
    "text": "had to babysit and monitor it now we don't have to as you can see the Green Line here in most of them not the not",
    "start": "3068960",
    "end": "3077809"
  },
  {
    "text": "the graph but most of the line charts the Green Line is the new version and it shows improvement so in this case it",
    "start": "3077809",
    "end": "3083809"
  },
  {
    "text": "will keep going increasing the percentage to canary version so with",
    "start": "3083809",
    "end": "3089900"
  },
  {
    "start": "3088000",
    "end": "3088000"
  },
  {
    "text": "there was a dashboard it's a simple example but we gather a lot more data the idea is to use AI for decision",
    "start": "3089900",
    "end": "3096799"
  },
  {
    "text": "making eventually I think from DevOps we all are going to move to AI ops if",
    "start": "3096799",
    "end": "3102589"
  },
  {
    "text": "that's a new term yeah but the the goal here is not to worry about those and let",
    "start": "3102589",
    "end": "3108349"
  },
  {
    "text": "you see ICD framework take care of everything from your check-in and everything after that so",
    "start": "3108349",
    "end": "3115900"
  },
  {
    "text": "currently we are using AI to find track and remove anomalies we find them and it",
    "start": "3115900",
    "end": "3121579"
  },
  {
    "text": "gives us action items right there many are times we find those in QA and there are very few things that we",
    "start": "3121579",
    "end": "3126920"
  },
  {
    "text": "uncover in production and really have these deep learning data guide your",
    "start": "3126920",
    "end": "3133700"
  },
  {
    "text": "decision-making so before we had all of",
    "start": "3133700",
    "end": "3139430"
  },
  {
    "text": "these we would have a lot of scalability and availability driven problems I would call them a p1 type of issues where",
    "start": "3139430",
    "end": "3146059"
  },
  {
    "text": "there is an outage and there are people impacted we can't serve webpages to webs to the web users that used to happen",
    "start": "3146059",
    "end": "3153019"
  },
  {
    "text": "about one every two week and knock-on worth we are going strong eight nine",
    "start": "3153019",
    "end": "3158359"
  },
  {
    "text": "months without any so that's the power of applying these tools and",
    "start": "3158359",
    "end": "3163720"
  },
  {
    "text": "containerization the right auto scaling policy is having right right strategies for deployment",
    "start": "3163720",
    "end": "3170690"
  },
  {
    "text": "including packaging policies and distribution policies now as I mentioned",
    "start": "3170690",
    "end": "3178279"
  },
  {
    "text": "orchestration is just one part of the puzzle but to be able to do CI CD to",
    "start": "3178279",
    "end": "3183529"
  },
  {
    "text": "place where it's successful there are fundamental things that I believe are the true pillars of success first is in",
    "start": "3183529",
    "end": "3191059"
  },
  {
    "text": "western better engineering practices bearing bad out if you don't have a code that's really well written and well",
    "start": "3191059",
    "end": "3198319"
  },
  {
    "text": "structured the logic is wrong then that's what is going to stall the CD here a lot with many of my peers as well",
    "start": "3198319",
    "end": "3205099"
  },
  {
    "text": "we have a CD but it's always star it's not orchestration engine that stall it's the code that's hard and we all write it",
    "start": "3205099",
    "end": "3212119"
  },
  {
    "text": "so make sure that you have team that's investing in right engineering practices the second is really respect the",
    "start": "3212119",
    "end": "3218900"
  },
  {
    "text": "failures tools don't lie and there's a lot of subjectivity when we look at we",
    "start": "3218900",
    "end": "3224630"
  },
  {
    "text": "try to find no it's failing because and we try to reason at I think instead of reasoning it we need to find the reason",
    "start": "3224630",
    "end": "3231380"
  },
  {
    "text": "why it's failing and invest in those it's 360 degree monitoring sorry it's",
    "start": "3231380",
    "end": "3239000"
  },
  {
    "text": "looking like three hundred thirty six hundred and monitor everything right from hardware to software to code",
    "start": "3239000",
    "end": "3245150"
  },
  {
    "text": "everything also monitor how many times your code is being reviewed when you",
    "start": "3245150",
    "end": "3250400"
  },
  {
    "text": "check in also monitor how many times you're testing the code how many times you're finding the defect is there a",
    "start": "3250400",
    "end": "3256039"
  },
  {
    "text": "coverage gap that's going to make CD successful containerization is not I'm going to make it successful it's just",
    "start": "3256039",
    "end": "3262039"
  },
  {
    "text": "add on to it major baseline and benchmark if you don't measure you don't know if you're improving or not having",
    "start": "3262039",
    "end": "3268819"
  },
  {
    "text": "canary will not necessarily give you benefit if you don't have baseline and benchmarking that you don't measure and",
    "start": "3268819",
    "end": "3276680"
  },
  {
    "text": "then once you have the data use AI as much or ml or simple algorithms even I",
    "start": "3276680",
    "end": "3283069"
  },
  {
    "text": "would say even simplest as anomaly detection to find what's going wrong so you don't have necessarily worry about",
    "start": "3283069",
    "end": "3288819"
  },
  {
    "text": "finding things at a later cycle you can catch them much sooner and most important have commitment from everyone",
    "start": "3288819",
    "end": "3295640"
  },
  {
    "text": "and without that a CD is not successful so you want to have a productive and",
    "start": "3295640",
    "end": "3300650"
  },
  {
    "text": "development team and operations team everyone is on board that the idea is once you check in it goes faster and",
    "start": "3300650",
    "end": "3307430"
  },
  {
    "text": "smoother and without any incidents so that's all I have for you guys that I",
    "start": "3307430",
    "end": "3313880"
  },
  {
    "text": "wanted to share but in closing the CI CD",
    "start": "3313880",
    "end": "3319580"
  },
  {
    "text": "the way I look at it the goal is and the objective is to make sure there's a better developer experience there is a",
    "start": "3319580",
    "end": "3325580"
  },
  {
    "text": "feature roll out that smoother you want to make sure that you're doing it in a way that adds to your availability and",
    "start": "3325580",
    "end": "3332030"
  },
  {
    "text": "there is a there's a rock-solid dr built into it and there's a maintainability in",
    "start": "3332030",
    "end": "3339050"
  },
  {
    "text": "it you've been you shouldn't be having to waste any time in managing it and in",
    "start": "3339050",
    "end": "3344570"
  },
  {
    "text": "our case we are saving about 33% of the cost and it's simply working yeah so",
    "start": "3344570",
    "end": "3349640"
  },
  {
    "text": "with of course we had to put in a lot of effort to get our framework in place so",
    "start": "3349640",
    "end": "3355160"
  },
  {
    "text": "that's all I have I have five minutes left for us for any question answer sessions but before you go don't forget",
    "start": "3355160",
    "end": "3361760"
  },
  {
    "text": "to give us an your feedback and surveys are up there on your mobile app so we'll",
    "start": "3361760",
    "end": "3367880"
  },
  {
    "text": "take any questions okay [Applause]",
    "start": "3367880",
    "end": "3372749"
  }
]