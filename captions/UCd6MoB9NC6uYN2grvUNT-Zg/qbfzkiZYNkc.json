[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": "[Music]",
    "start": "140",
    "end": "1160"
  },
  {
    "text": "[Applause]",
    "start": "1160",
    "end": "2910"
  },
  {
    "text": "[Music]",
    "start": "2910",
    "end": "6080"
  },
  {
    "text": "hello I am omkar a cloud support",
    "start": "6859",
    "end": "9660"
  },
  {
    "text": "engineer here at the AWS office in",
    "start": "9660",
    "end": "12300"
  },
  {
    "text": "Dallas Texas today I'm going to show you",
    "start": "12300",
    "end": "14580"
  },
  {
    "text": "how you can run an Amazon antenna query",
    "start": "14580",
    "end": "17220"
  },
  {
    "text": "with a considerably long string length",
    "start": "17220",
    "end": "19800"
  },
  {
    "text": "without facing any errors let's get",
    "start": "19800",
    "end": "21960"
  },
  {
    "text": "started after logging in to the AWS",
    "start": "21960",
    "end": "25320"
  },
  {
    "start": "23000",
    "end": "110000"
  },
  {
    "text": "Management console navigate to the",
    "start": "25320",
    "end": "27720"
  },
  {
    "text": "Athena console type Athena into the",
    "start": "27720",
    "end": "30480"
  },
  {
    "text": "search bar",
    "start": "30480",
    "end": "32099"
  },
  {
    "text": "then select the small slide out window",
    "start": "32099",
    "end": "34260"
  },
  {
    "text": "using the three line icon on the left to",
    "start": "34260",
    "end": "37440"
  },
  {
    "text": "navigate to the query editor here you",
    "start": "37440",
    "end": "40079"
  },
  {
    "text": "can see I have two example queries",
    "start": "40079",
    "end": "42120"
  },
  {
    "text": "amongst which the first query is",
    "start": "42120",
    "end": "44399"
  },
  {
    "text": "performing an alter table operation to",
    "start": "44399",
    "end": "47219"
  },
  {
    "text": "add more partitions to the table",
    "start": "47219",
    "end": "50059"
  },
  {
    "text": "wmr underscore data underscore stores",
    "start": "50059",
    "end": "52980"
  },
  {
    "text": "which resides in the default database",
    "start": "52980",
    "end": "57559"
  },
  {
    "text": "and second query which is trying to",
    "start": "57960",
    "end": "60360"
  },
  {
    "text": "select multiple columns based on some",
    "start": "60360",
    "end": "62879"
  },
  {
    "text": "filters from the table Insurance",
    "start": "62879",
    "end": "65158"
  },
  {
    "text": "metadata values which also resides in",
    "start": "65159",
    "end": "68280"
  },
  {
    "text": "the default database however when I run",
    "start": "68280",
    "end": "70799"
  },
  {
    "text": "these queries separately I see an error",
    "start": "70799",
    "end": "73979"
  },
  {
    "text": "saying query string failed to satisfy",
    "start": "73979",
    "end": "76979"
  },
  {
    "text": "constraint member must have length less",
    "start": "76979",
    "end": "79979"
  },
  {
    "text": "than or equal to",
    "start": "79979",
    "end": "81979"
  },
  {
    "text": "262144 in case of both the queries",
    "start": "81979",
    "end": "86899"
  },
  {
    "text": "this error occurs because our queries",
    "start": "87020",
    "end": "90060"
  },
  {
    "text": "exceed maximum query string length",
    "start": "90060",
    "end": "92460"
  },
  {
    "text": "supported by Athena which is",
    "start": "92460",
    "end": "95600"
  },
  {
    "text": "262144 bytes which is not an adjustable",
    "start": "95600",
    "end": "99000"
  },
  {
    "text": "quota parameter therefore in order to",
    "start": "99000",
    "end": "101700"
  },
  {
    "text": "resolve this error we need to split such",
    "start": "101700",
    "end": "104280"
  },
  {
    "text": "long queries into multiple smaller",
    "start": "104280",
    "end": "106740"
  },
  {
    "text": "queries",
    "start": "106740",
    "end": "107700"
  },
  {
    "text": "let us see how we can do this using",
    "start": "107700",
    "end": "110220"
  },
  {
    "start": "110000",
    "end": "153000"
  },
  {
    "text": "multiple ddl statements let's consider",
    "start": "110220",
    "end": "112799"
  },
  {
    "text": "the first query again and split it into",
    "start": "112799",
    "end": "115320"
  },
  {
    "text": "multiple ddl statements now let's run",
    "start": "115320",
    "end": "118079"
  },
  {
    "text": "each query separately this results in",
    "start": "118079",
    "end": "121079"
  },
  {
    "text": "the same final result table which is",
    "start": "121079",
    "end": "123180"
  },
  {
    "text": "partitioned but does not throw an error",
    "start": "123180",
    "end": "125520"
  },
  {
    "text": "as each query string is not greater than",
    "start": "125520",
    "end": "129200"
  },
  {
    "text": "262144 bytes",
    "start": "129200",
    "end": "131340"
  },
  {
    "text": "also we can confirm that all partitions",
    "start": "131340",
    "end": "134520"
  },
  {
    "text": "were added to the table navigating to",
    "start": "134520",
    "end": "137099"
  },
  {
    "text": "glue console where we can see multiple",
    "start": "137099",
    "end": "139860"
  },
  {
    "text": "partitions have been added successfully",
    "start": "139860",
    "end": "144080"
  },
  {
    "start": "153000",
    "end": "199000"
  },
  {
    "text": "using views let's consider the second",
    "start": "153060",
    "end": "155879"
  },
  {
    "text": "query again which is trying to select",
    "start": "155879",
    "end": "158340"
  },
  {
    "text": "multiple columns based on some filters",
    "start": "158340",
    "end": "160860"
  },
  {
    "text": "and let's create a view of those columns",
    "start": "160860",
    "end": "163800"
  },
  {
    "text": "which the query is trying to select",
    "start": "163800",
    "end": "165900"
  },
  {
    "text": "using Create view statements I already",
    "start": "165900",
    "end": "169440"
  },
  {
    "text": "have this create view statements ready",
    "start": "169440",
    "end": "172340"
  },
  {
    "text": "now let's run select asterisks from view",
    "start": "172340",
    "end": "175680"
  },
  {
    "text": "query to select the values from both the",
    "start": "175680",
    "end": "178560"
  },
  {
    "text": "views together this successfully selects",
    "start": "178560",
    "end": "181260"
  },
  {
    "text": "the same columns and returns filtered",
    "start": "181260",
    "end": "183720"
  },
  {
    "text": "values without any error",
    "start": "183720",
    "end": "187700"
  },
  {
    "start": "199000",
    "end": "268000"
  },
  {
    "text": "using Create table as select ctas let's",
    "start": "199700",
    "end": "203519"
  },
  {
    "text": "consider the second query again which is",
    "start": "203519",
    "end": "206040"
  },
  {
    "text": "trying to select multiple columns based",
    "start": "206040",
    "end": "208739"
  },
  {
    "text": "on some filters and let's create a new",
    "start": "208739",
    "end": "210840"
  },
  {
    "text": "table consisting of those columns which",
    "start": "210840",
    "end": "213780"
  },
  {
    "text": "the query is trying to select using",
    "start": "213780",
    "end": "216480"
  },
  {
    "text": "Create table as select ctask query I",
    "start": "216480",
    "end": "220980"
  },
  {
    "text": "already have this c-task statement",
    "start": "220980",
    "end": "222959"
  },
  {
    "text": "queries ready now let's run select",
    "start": "222959",
    "end": "226080"
  },
  {
    "text": "asterisks from table query to select the",
    "start": "226080",
    "end": "228959"
  },
  {
    "text": "values from both the ctas tables",
    "start": "228959",
    "end": "231780"
  },
  {
    "text": "together",
    "start": "231780",
    "end": "232920"
  },
  {
    "text": "this query successfully runs the same",
    "start": "232920",
    "end": "236040"
  },
  {
    "text": "columns without any error",
    "start": "236040",
    "end": "239940"
  },
  {
    "text": "Additionally you can also shorten table",
    "start": "239940",
    "end": "243120"
  },
  {
    "text": "column and database names to decrease",
    "start": "243120",
    "end": "246120"
  },
  {
    "text": "string length if query string exceeds",
    "start": "246120",
    "end": "249000"
  },
  {
    "text": "the maximum query string length of",
    "start": "249000",
    "end": "252560"
  },
  {
    "text": "262144 bytes",
    "start": "252560",
    "end": "254939"
  },
  {
    "text": "so now you know how to run AWS Athena",
    "start": "254939",
    "end": "258299"
  },
  {
    "text": "queries exceeding maximum query string",
    "start": "258299",
    "end": "260639"
  },
  {
    "text": "length using multiple ways like creating",
    "start": "260639",
    "end": "263759"
  },
  {
    "text": "ddl statements using Athena views or",
    "start": "263759",
    "end": "266820"
  },
  {
    "text": "using CTA statements",
    "start": "266820",
    "end": "268919"
  },
  {
    "start": "268000",
    "end": "285000"
  },
  {
    "text": "thank you for watching and happy cloud",
    "start": "268919",
    "end": "271380"
  },
  {
    "text": "computing from all of us here at AWS",
    "start": "271380",
    "end": "275699"
  },
  {
    "text": "foreign",
    "start": "275699",
    "end": "277370"
  },
  {
    "text": "[Music]",
    "start": "277370",
    "end": "280540"
  },
  {
    "text": "[Music]",
    "start": "282580",
    "end": "285779"
  }
]