[
  {
    "start": "0",
    "end": "100000"
  },
  {
    "text": "now are you one of those enthusiasts who",
    "start": "680",
    "end": "2960"
  },
  {
    "text": "always wanted to try their Hands-On",
    "start": "2960",
    "end": "4799"
  },
  {
    "text": "Amazon Neptune graph database but",
    "start": "4799",
    "end": "7200"
  },
  {
    "text": "struggled at creating your own graph",
    "start": "7200",
    "end": "9080"
  },
  {
    "text": "data models or are you just curious",
    "start": "9080",
    "end": "11400"
  },
  {
    "text": "about how to query a graph data using",
    "start": "11400",
    "end": "14440"
  },
  {
    "text": "graph query language if that's the case",
    "start": "14440",
    "end": "17160"
  },
  {
    "text": "I got you welcome to this next video in",
    "start": "17160",
    "end": "19400"
  },
  {
    "text": "the Amazon Neptune snackable series my",
    "start": "19400",
    "end": "22080"
  },
  {
    "text": "name is chiranjit Mitra and I'm a",
    "start": "22080",
    "end": "24000"
  },
  {
    "text": "specialist solution architect for",
    "start": "24000",
    "end": "25359"
  },
  {
    "text": "databases here at",
    "start": "25359",
    "end": "27439"
  },
  {
    "text": "AWS in this video I will walk you",
    "start": "27439",
    "end": "30160"
  },
  {
    "text": "through a few of the key Concepts that",
    "start": "30160",
    "end": "32238"
  },
  {
    "text": "are vital when it comes to building and",
    "start": "32239",
    "end": "34559"
  },
  {
    "text": "quering a graph data model now although",
    "start": "34559",
    "end": "37559"
  },
  {
    "text": "this isn't an in-depth lesson on a",
    "start": "37559",
    "end": "39520"
  },
  {
    "text": "specific query language but I'm going to",
    "start": "39520",
    "end": "41960"
  },
  {
    "text": "introduce you just enough of Apache",
    "start": "41960",
    "end": "43920"
  },
  {
    "text": "Tinker pops Gremlin as the query",
    "start": "43920",
    "end": "45760"
  },
  {
    "text": "language that you can use to get started",
    "start": "45760",
    "end": "47960"
  },
  {
    "text": "with your first graph data model we are",
    "start": "47960",
    "end": "50600"
  },
  {
    "text": "going to look at the following agenda",
    "start": "50600",
    "end": "52120"
  },
  {
    "text": "today what makes up the graph data model",
    "start": "52120",
    "end": "55559"
  },
  {
    "text": "such as nodes edges and their properties",
    "start": "55559",
    "end": "59079"
  },
  {
    "text": "then we'll take a look into Amazon",
    "start": "59079",
    "end": "60760"
  },
  {
    "text": "Neptune's workbench and Magics followed",
    "start": "60760",
    "end": "64198"
  },
  {
    "text": "by that I will demonstrate how we can",
    "start": "64199",
    "end": "66479"
  },
  {
    "text": "leverage a sample Jupiter notebook with",
    "start": "66479",
    "end": "69000"
  },
  {
    "text": "Gremlin queries to build and query the",
    "start": "69000",
    "end": "71799"
  },
  {
    "text": "English Premier League data set towards",
    "start": "71799",
    "end": "74600"
  },
  {
    "text": "the end of the video I will also share",
    "start": "74600",
    "end": "76799"
  },
  {
    "text": "additional details and resources that",
    "start": "76799",
    "end": "79560"
  },
  {
    "text": "you can follow to have a jump start on",
    "start": "79560",
    "end": "81759"
  },
  {
    "text": "your Amazon Neptune cluster now before I",
    "start": "81759",
    "end": "84520"
  },
  {
    "text": "proceed further if you haven't yet",
    "start": "84520",
    "end": "86759"
  },
  {
    "text": "deployed your first Amazon Neptune",
    "start": "86759",
    "end": "88600"
  },
  {
    "text": "cluster I would highly recommend you to",
    "start": "88600",
    "end": "90520"
  },
  {
    "text": "follow the links from the description",
    "start": "90520",
    "end": "91960"
  },
  {
    "text": "section of the video that will help you",
    "start": "91960",
    "end": "93840"
  },
  {
    "text": "to set up your cluster using the cloud",
    "start": "93840",
    "end": "95720"
  },
  {
    "text": "formation templates and that's it let's",
    "start": "95720",
    "end": "98320"
  },
  {
    "text": "get straight into the world of graph",
    "start": "98320",
    "end": "99560"
  },
  {
    "text": "databases now graph databases are",
    "start": "99560",
    "end": "102040"
  },
  {
    "start": "100000",
    "end": "185000"
  },
  {
    "text": "optimized to store and query the",
    "start": "102040",
    "end": "104040"
  },
  {
    "text": "relationship between different data",
    "start": "104040",
    "end": "106079"
  },
  {
    "text": "items especially in case of Highly",
    "start": "106079",
    "end": "108600"
  },
  {
    "text": "connected relationship between entities",
    "start": "108600",
    "end": "111040"
  },
  {
    "text": "and we are talking about billions of",
    "start": "111040",
    "end": "113439"
  },
  {
    "text": "entities each entity is a vertex",
    "start": "113439",
    "end": "116600"
  },
  {
    "text": "sometimes known as nodes and in case of",
    "start": "116600",
    "end": "119840"
  },
  {
    "text": "of property graphs such as ours each",
    "start": "119840",
    "end": "122159"
  },
  {
    "text": "vertex has its properties and its own",
    "start": "122159",
    "end": "125759"
  },
  {
    "text": "attributes in our example we have nodes",
    "start": "125759",
    "end": "129319"
  },
  {
    "text": "labeled as",
    "start": "129319",
    "end": "130800"
  },
  {
    "text": "cities stadiums teams and English",
    "start": "130800",
    "end": "134519"
  },
  {
    "text": "Premier League now that we have the",
    "start": "134519",
    "end": "136800"
  },
  {
    "text": "nodes we need the relationship between",
    "start": "136800",
    "end": "138920"
  },
  {
    "text": "the vertices and they are called as",
    "start": "138920",
    "end": "141519"
  },
  {
    "text": "edges each Edge has a type and it is",
    "start": "141519",
    "end": "145280"
  },
  {
    "text": "directed from one vertex to another for",
    "start": "145280",
    "end": "148760"
  },
  {
    "text": "example teams are Rel Rel ated with eepl",
    "start": "148760",
    "end": "151040"
  },
  {
    "text": "nodes with league as the label similarly",
    "start": "151040",
    "end": "154680"
  },
  {
    "text": "teams are also related to Stadium node",
    "start": "154680",
    "end": "157519"
  },
  {
    "text": "as where they will be playing",
    "start": "157519",
    "end": "159480"
  },
  {
    "text": "furthermore cities stadiums as well as",
    "start": "159480",
    "end": "163080"
  },
  {
    "text": "the eepl nodes are connected with each",
    "start": "163080",
    "end": "165040"
  },
  {
    "text": "other with appropriate labels in summary",
    "start": "165040",
    "end": "168760"
  },
  {
    "text": "what you're looking at here on the",
    "start": "168760",
    "end": "169959"
  },
  {
    "text": "screen is a small representation of a",
    "start": "169959",
    "end": "172440"
  },
  {
    "text": "graph data model from our use case with",
    "start": "172440",
    "end": "175480"
  },
  {
    "text": "relevant properties and the labels in",
    "start": "175480",
    "end": "178400"
  },
  {
    "text": "context next up let's see how we can",
    "start": "178400",
    "end": "181200"
  },
  {
    "text": "Define these nodes and relationship in",
    "start": "181200",
    "end": "183280"
  },
  {
    "text": "Amazon Neptune graph database Amazon",
    "start": "183280",
    "end": "186440"
  },
  {
    "text": "Neptune supports the popular property",
    "start": "186440",
    "end": "188280"
  },
  {
    "text": "graph languages such as Apache Tinker",
    "start": "188280",
    "end": "190400"
  },
  {
    "text": "poop Gremlin which we will be looking",
    "start": "190400",
    "end": "192480"
  },
  {
    "text": "into shortly and neo4j open Cipher as",
    "start": "192480",
    "end": "196760"
  },
  {
    "text": "well as w3c's rdf query language called",
    "start": "196760",
    "end": "201360"
  },
  {
    "text": "Sparkle first up we will be using the",
    "start": "201360",
    "end": "204280"
  },
  {
    "text": "cell magic for the gremlin query",
    "start": "204280",
    "end": "206280"
  },
  {
    "text": "language and we will insert the nodes",
    "start": "206280",
    "end": "208879"
  },
  {
    "text": "and the relationship but how do we do",
    "start": "208879",
    "end": "210920"
  },
  {
    "text": "that Amazon Neptune comes integrated",
    "start": "210920",
    "end": "213640"
  },
  {
    "text": "with Jupiter notebook which contains the",
    "start": "213640",
    "end": "215720"
  },
  {
    "text": "cells and for each cells we have",
    "start": "215720",
    "end": "217920"
  },
  {
    "text": "predefined cell magic let's have a look",
    "start": "217920",
    "end": "220239"
  },
  {
    "text": "into that let's start by creating the",
    "start": "220239",
    "end": "222400"
  },
  {
    "text": "first node which is the league node we",
    "start": "222400",
    "end": "225400"
  },
  {
    "text": "have the label for the vertex and we",
    "start": "225400",
    "end": "227360"
  },
  {
    "text": "have the properties similarly we will",
    "start": "227360",
    "end": "230159"
  },
  {
    "text": "Define other nodes such as cities teams",
    "start": "230159",
    "end": "234920"
  },
  {
    "text": "and stadiums now that we have the nodes",
    "start": "234920",
    "end": "238000"
  },
  {
    "text": "we need to interconnect them using",
    "start": "238000",
    "end": "239760"
  },
  {
    "text": "appropriate relationships relationships",
    "start": "239760",
    "end": "241920"
  },
  {
    "text": "are defined just as like the nodes in",
    "start": "241920",
    "end": "244680"
  },
  {
    "text": "the gremlin query language as you can",
    "start": "244680",
    "end": "246680"
  },
  {
    "text": "see on the screen we have several edges",
    "start": "246680",
    "end": "248840"
  },
  {
    "text": "added let's take a look one by one these",
    "start": "248840",
    "end": "252360"
  },
  {
    "text": "lines of the edge definitions and how",
    "start": "252360",
    "end": "255200"
  },
  {
    "text": "they interconnect the nodes",
    "start": "255200",
    "end": "257919"
  },
  {
    "text": "together let's start by evaluating three",
    "start": "257919",
    "end": "260519"
  },
  {
    "text": "lines from The Edge definitions the",
    "start": "260519",
    "end": "263639"
  },
  {
    "text": "first one says we are going to create a",
    "start": "263639",
    "end": "266280"
  },
  {
    "text": "relationship we will label it as current",
    "start": "266280",
    "end": "269080"
  },
  {
    "text": "league it'll start from the Arsenal node",
    "start": "269080",
    "end": "271960"
  },
  {
    "text": "and the destination node is",
    "start": "271960",
    "end": "275199"
  },
  {
    "text": "eppl just like that we will add another",
    "start": "275199",
    "end": "278199"
  },
  {
    "text": "relationship we will label it as Stadium",
    "start": "278199",
    "end": "281199"
  },
  {
    "text": "starting from Arsenal to em let's take",
    "start": "281199",
    "end": "284680"
  },
  {
    "text": "one last example that's adding another",
    "start": "284680",
    "end": "286960"
  },
  {
    "text": "Edge labeled as City from em to",
    "start": "286960",
    "end": "292000"
  },
  {
    "start": "292000",
    "end": "481000"
  },
  {
    "text": "London now let's take a look into a",
    "start": "292000",
    "end": "295120"
  },
  {
    "text": "demonstration where I'll walk you",
    "start": "295120",
    "end": "296919"
  },
  {
    "text": "through on how to create these nodes",
    "start": "296919",
    "end": "299680"
  },
  {
    "text": "these edges and the relationship between",
    "start": "299680",
    "end": "301639"
  },
  {
    "text": "them using Jupiter notebooks integrated",
    "start": "301639",
    "end": "304479"
  },
  {
    "text": "with Amazon",
    "start": "304479",
    "end": "307199"
  },
  {
    "text": "Neptune whether you are new to graphs",
    "start": "307639",
    "end": "310000"
  },
  {
    "text": "and want to learn an experiment or you",
    "start": "310000",
    "end": "312240"
  },
  {
    "text": "are experienced and you want to refine",
    "start": "312240",
    "end": "314479"
  },
  {
    "text": "your queries the Neptune workbench",
    "start": "314479",
    "end": "316840"
  },
  {
    "text": "offers an interactive development",
    "start": "316840",
    "end": "318479"
  },
  {
    "text": "environment that can boost your",
    "start": "318479",
    "end": "320280"
  },
  {
    "text": "productivity when you are building graph",
    "start": "320280",
    "end": "322960"
  },
  {
    "text": "applications Neptune provides Jupiter",
    "start": "322960",
    "end": "325319"
  },
  {
    "text": "and Jupiter lab notebooks in the",
    "start": "325319",
    "end": "327160"
  },
  {
    "text": "open-source Neptune graph notebook Pro",
    "start": "327160",
    "end": "329560"
  },
  {
    "text": "project on GitHub I will include the",
    "start": "329560",
    "end": "331880"
  },
  {
    "text": "link to the GitHub projects in the",
    "start": "331880",
    "end": "333800"
  },
  {
    "text": "description section of the video These",
    "start": "333800",
    "end": "336400"
  },
  {
    "text": "notebooks offer you sample application",
    "start": "336400",
    "end": "338360"
  },
  {
    "text": "tutorials and the code Snippets in an",
    "start": "338360",
    "end": "340560"
  },
  {
    "text": "interactive code environment where you",
    "start": "340560",
    "end": "342280"
  },
  {
    "text": "can learn about the graph technology and",
    "start": "342280",
    "end": "344520"
  },
  {
    "text": "Neptune you can use them to walk through",
    "start": "344520",
    "end": "347080"
  },
  {
    "text": "setting up configuring populating and",
    "start": "347080",
    "end": "350280"
  },
  {
    "text": "querying graphs using different query",
    "start": "350280",
    "end": "352000"
  },
  {
    "text": "languages different data sets and even",
    "start": "352000",
    "end": "354400"
  },
  {
    "text": "different databases on the back end you",
    "start": "354400",
    "end": "357000"
  },
  {
    "text": "can host these notebooks in several",
    "start": "357000",
    "end": "358919"
  },
  {
    "text": "different ways and one of the way is",
    "start": "358919",
    "end": "360919"
  },
  {
    "text": "Amazon Neptune's workbench the workbench",
    "start": "360919",
    "end": "363639"
  },
  {
    "text": "lets you run jupyter notebooks in a",
    "start": "363639",
    "end": "365319"
  },
  {
    "text": "fully managed environment hosted in",
    "start": "365319",
    "end": "367360"
  },
  {
    "text": "Amazon Sage maker and automatically",
    "start": "367360",
    "end": "369560"
  },
  {
    "text": "loads the latest release of the Neptune",
    "start": "369560",
    "end": "371479"
  },
  {
    "text": "graph notebook projects for you it is",
    "start": "371479",
    "end": "373599"
  },
  {
    "text": "easy to set up the workbench in the",
    "start": "373599",
    "end": "375440"
  },
  {
    "text": "Neptune console when you can create your",
    "start": "375440",
    "end": "377840"
  },
  {
    "text": "Neptune database first up sign into your",
    "start": "377840",
    "end": "380960"
  },
  {
    "text": "AWS Management console and then open",
    "start": "380960",
    "end": "384039"
  },
  {
    "text": "Neptune console as you can see right now",
    "start": "384039",
    "end": "386840"
  },
  {
    "text": "I have opened my Neptune console I have",
    "start": "386840",
    "end": "389520"
  },
  {
    "text": "already created a database instance in a",
    "start": "389520",
    "end": "392120"
  },
  {
    "text": "serverless mode I'm going to access the",
    "start": "392120",
    "end": "394560"
  },
  {
    "text": "database just to see the endpoints are",
    "start": "394560",
    "end": "396520"
  },
  {
    "text": "ready from the left hand pane I'm",
    "start": "396520",
    "end": "398440"
  },
  {
    "text": "accessing The Notebook page now you can",
    "start": "398440",
    "end": "400599"
  },
  {
    "text": "see that I already have a notebook",
    "start": "400599",
    "end": "403039"
  },
  {
    "text": "available in case you have just freshly",
    "start": "403039",
    "end": "405880"
  },
  {
    "text": "launched your Amazon Neptune cluster you",
    "start": "405880",
    "end": "408520"
  },
  {
    "text": "might need to create a notebook now",
    "start": "408520",
    "end": "410680"
  },
  {
    "text": "creating a notebook takes around like 5",
    "start": "410680",
    "end": "412919"
  },
  {
    "text": "minutes because Amazon Sage maker from",
    "start": "412919",
    "end": "415000"
  },
  {
    "text": "the back end initiates those service",
    "start": "415000",
    "end": "417400"
  },
  {
    "text": "Integrations let's take a look into to",
    "start": "417400",
    "end": "419599"
  },
  {
    "text": "the existing notebook which is nothing",
    "start": "419599",
    "end": "421440"
  },
  {
    "text": "but a sample notebook repository from",
    "start": "421440",
    "end": "423639"
  },
  {
    "text": "the",
    "start": "423639",
    "end": "425800"
  },
  {
    "text": "GitHub once you have selected The",
    "start": "426080",
    "end": "428160"
  },
  {
    "text": "Notebook from the actions drop down menu",
    "start": "428160",
    "end": "430680"
  },
  {
    "text": "select open Jupiter this should launch a",
    "start": "430680",
    "end": "433360"
  },
  {
    "text": "Jupiter notebook instance for",
    "start": "433360",
    "end": "436918"
  },
  {
    "text": "you here in the jupyter notebook",
    "start": "438120",
    "end": "440360"
  },
  {
    "text": "instance you can see the files and the",
    "start": "440360",
    "end": "442039"
  },
  {
    "text": "directories which are nothing but the",
    "start": "442039",
    "end": "444360"
  },
  {
    "text": "clone of the repository from the GitHub",
    "start": "444360",
    "end": "446520"
  },
  {
    "text": "with all the sample notebooks and the",
    "start": "446520",
    "end": "448720"
  },
  {
    "text": "sample app applications that you can try",
    "start": "448720",
    "end": "450520"
  },
  {
    "text": "on your own we are going to select the",
    "start": "450520",
    "end": "452919"
  },
  {
    "text": "Neptune database directory and we're",
    "start": "452919",
    "end": "455160"
  },
  {
    "text": "going to select the visualizations",
    "start": "455160",
    "end": "458319"
  },
  {
    "text": "subdirectory and from the subdirectory",
    "start": "458319",
    "end": "461080"
  },
  {
    "text": "we will be looking into eepl Gremlin",
    "start": "461080",
    "end": "463440"
  },
  {
    "text": "python notebook now this is The Notebook",
    "start": "463440",
    "end": "465879"
  },
  {
    "text": "that we will be using throughout the",
    "start": "465879",
    "end": "467520"
  },
  {
    "text": "rest of the demo to demonstrate how we",
    "start": "467520",
    "end": "470240"
  },
  {
    "text": "can use Gremlin queries to create nodes",
    "start": "470240",
    "end": "474120"
  },
  {
    "text": "edges and the relationship between the",
    "start": "474120",
    "end": "476479"
  },
  {
    "text": "nodes and how we can query our property",
    "start": "476479",
    "end": "479039"
  },
  {
    "text": "graph using Gremlin query language once",
    "start": "479039",
    "end": "482120"
  },
  {
    "start": "481000",
    "end": "863000"
  },
  {
    "text": "you are connected through the English",
    "start": "482120",
    "end": "484000"
  },
  {
    "text": "Premier League teams and stadiums you",
    "start": "484000",
    "end": "486039"
  },
  {
    "text": "can go ahead and check all the different",
    "start": "486039",
    "end": "488039"
  },
  {
    "text": "line Magics and cell magic line Magics",
    "start": "488039",
    "end": "490879"
  },
  {
    "text": "are the built-in commands that helps you",
    "start": "490879",
    "end": "493240"
  },
  {
    "text": "for example to understand what's the",
    "start": "493240",
    "end": "495000"
  },
  {
    "text": "notebook version that you're using also",
    "start": "495000",
    "end": "497360"
  },
  {
    "text": "to have a configuration check for your",
    "start": "497360",
    "end": "499720"
  },
  {
    "text": "notebooks whether they are connected to",
    "start": "499720",
    "end": "501280"
  },
  {
    "text": "the Amazon Neptune cluster or",
    "start": "501280",
    "end": "504360"
  },
  {
    "text": "not here I can see that my notebook is",
    "start": "504360",
    "end": "507319"
  },
  {
    "text": "connected to the Neptune database and I",
    "start": "507319",
    "end": "509720"
  },
  {
    "text": "can go further on to check what's the",
    "start": "509720",
    "end": "511520"
  },
  {
    "text": "status of my cluster just by running the",
    "start": "511520",
    "end": "514039"
  },
  {
    "text": "line magic called percentage",
    "start": "514039",
    "end": "518120"
  },
  {
    "text": "status as the status is now being shown",
    "start": "518120",
    "end": "520560"
  },
  {
    "text": "as healthy I can proceed further to",
    "start": "520560",
    "end": "522760"
  },
  {
    "text": "create nodes and",
    "start": "522760",
    "end": "525519"
  },
  {
    "text": "relationships here we are going to use",
    "start": "525519",
    "end": "527560"
  },
  {
    "text": "the cell magic which specifies the query",
    "start": "527560",
    "end": "530040"
  },
  {
    "text": "language that we're using today to",
    "start": "530040",
    "end": "531560"
  },
  {
    "text": "interact with the database and that's",
    "start": "531560",
    "end": "534560"
  },
  {
    "text": "Gremlin we are going to create the",
    "start": "534560",
    "end": "536720"
  },
  {
    "text": "league",
    "start": "536720",
    "end": "537640"
  },
  {
    "text": "node as well as the team",
    "start": "537640",
    "end": "540880"
  },
  {
    "text": "nodes notice that we are having all the",
    "start": "540880",
    "end": "543440"
  },
  {
    "text": "labels and the properties just like we",
    "start": "543440",
    "end": "545399"
  },
  {
    "text": "discussed during our",
    "start": "545399",
    "end": "548279"
  },
  {
    "text": "presentation further we will create the",
    "start": "548880",
    "end": "551200"
  },
  {
    "text": "stadium",
    "start": "551200",
    "end": "553600"
  },
  {
    "text": "node and lastly the cities",
    "start": "553640",
    "end": "558200"
  },
  {
    "text": "node next up we have to create the edges",
    "start": "558480",
    "end": "562040"
  },
  {
    "text": "and you can see each line corresponds to",
    "start": "562040",
    "end": "564480"
  },
  {
    "text": "one",
    "start": "564480",
    "end": "566399"
  },
  {
    "text": "relationship now let's go ahead and run",
    "start": "566399",
    "end": "568839"
  },
  {
    "text": "this cell to make sure that our nodes",
    "start": "568839",
    "end": "571800"
  },
  {
    "text": "and our relationships are",
    "start": "571800",
    "end": "575800"
  },
  {
    "text": "created once the execution has completed",
    "start": "580040",
    "end": "582920"
  },
  {
    "text": "you can check the results by scrolling",
    "start": "582920",
    "end": "585000"
  },
  {
    "text": "down to the bottom of the cell the",
    "start": "585000",
    "end": "588000"
  },
  {
    "text": "results indicate the edge has been",
    "start": "588000",
    "end": "590040"
  },
  {
    "text": "created with a unique ID also shows the",
    "start": "590040",
    "end": "592920"
  },
  {
    "text": "last executed statement that the Carol",
    "start": "592920",
    "end": "596120"
  },
  {
    "text": "Road stadium city has been connected to",
    "start": "596120",
    "end": "599800"
  },
  {
    "text": "City of norch with the relationship",
    "start": "599800",
    "end": "601839"
  },
  {
    "text": "labeled as City now let's have a look at",
    "start": "601839",
    "end": "605440"
  },
  {
    "text": "how we can count the number of nodes",
    "start": "605440",
    "end": "607640"
  },
  {
    "text": "that has been created the gremlin query",
    "start": "607640",
    "end": "610279"
  },
  {
    "text": "for that is simple as getting all the",
    "start": "610279",
    "end": "612200"
  },
  {
    "text": "vertices grouping them for a account",
    "start": "612200",
    "end": "615160"
  },
  {
    "text": "with the",
    "start": "615160",
    "end": "616720"
  },
  {
    "text": "label here you can see we have the",
    "start": "616720",
    "end": "619079"
  },
  {
    "text": "stadiums node leagues node teams and the",
    "start": "619079",
    "end": "622079"
  },
  {
    "text": "city nodes and their respective count",
    "start": "622079",
    "end": "624920"
  },
  {
    "text": "just as same as for the nodes you can",
    "start": "624920",
    "end": "626680"
  },
  {
    "text": "also check the count of the edges",
    "start": "626680",
    "end": "629720"
  },
  {
    "text": "cities there are 20",
    "start": "629720",
    "end": "632440"
  },
  {
    "text": "edges current league there are 20 edges",
    "start": "632440",
    "end": "635600"
  },
  {
    "text": "and the stadium there are 20",
    "start": "635600",
    "end": "638279"
  },
  {
    "text": "edges now let's work our way through",
    "start": "638279",
    "end": "640720"
  },
  {
    "text": "building a visualization for our graph",
    "start": "640720",
    "end": "643639"
  },
  {
    "text": "which will show us all the nodes and all",
    "start": "643639",
    "end": "645440"
  },
  {
    "text": "the relationships in one place for that",
    "start": "645440",
    "end": "648120"
  },
  {
    "text": "we have another cell Magic available",
    "start": "648120",
    "end": "650000"
  },
  {
    "text": "which plots out the graph nodes and the",
    "start": "650000",
    "end": "652680"
  },
  {
    "text": "relationship with their proper",
    "start": "652680",
    "end": "654720"
  },
  {
    "text": "labels once the query has been executed",
    "start": "654720",
    "end": "657519"
  },
  {
    "text": "you can select the graph tab and you can",
    "start": "657519",
    "end": "659800"
  },
  {
    "text": "visualize the graph Network you can use",
    "start": "659800",
    "end": "662320"
  },
  {
    "text": "the zoom in and zoom out buttons to",
    "start": "662320",
    "end": "664680"
  },
  {
    "text": "further inspect the details of the nodes",
    "start": "664680",
    "end": "667079"
  },
  {
    "text": "and the",
    "start": "667079",
    "end": "668160"
  },
  {
    "text": "relationships Amazon Neptune supports",
    "start": "668160",
    "end": "670600"
  },
  {
    "text": "several different graph exploration tool",
    "start": "670600",
    "end": "673040"
  },
  {
    "text": "the one that comes by default is called",
    "start": "673040",
    "end": "675880"
  },
  {
    "text": "Amazon Neptune graph Explorer now the",
    "start": "675880",
    "end": "678560"
  },
  {
    "text": "graph Explorer tool is not in the scope",
    "start": "678560",
    "end": "680680"
  },
  {
    "text": "of this video however if you are",
    "start": "680680",
    "end": "683160"
  },
  {
    "text": "interested to know more about the graph",
    "start": "683160",
    "end": "684920"
  },
  {
    "text": "Explorer tool please write into the",
    "start": "684920",
    "end": "686920"
  },
  {
    "text": "comments and we will release a new video",
    "start": "686920",
    "end": "688760"
  },
  {
    "text": "for for",
    "start": "688760",
    "end": "689839"
  },
  {
    "text": "that now that we have our graph data",
    "start": "689839",
    "end": "692279"
  },
  {
    "text": "model ready with appropriate nodes and",
    "start": "692279",
    "end": "694639"
  },
  {
    "text": "edges let's continue to query the graph",
    "start": "694639",
    "end": "698120"
  },
  {
    "text": "there are several examples in this",
    "start": "698120",
    "end": "699839"
  },
  {
    "text": "sample notebook that can give you a good",
    "start": "699839",
    "end": "702000"
  },
  {
    "text": "idea on how the queries are written and",
    "start": "702000",
    "end": "704120"
  },
  {
    "text": "you can also build your own for instance",
    "start": "704120",
    "end": "707040"
  },
  {
    "text": "if we want to know how many teams we're",
    "start": "707040",
    "end": "709279"
  },
  {
    "text": "playing in that league in that season we",
    "start": "709279",
    "end": "711800"
  },
  {
    "text": "can extract the nodes with the label",
    "start": "711800",
    "end": "714959"
  },
  {
    "text": "team or query the leagues for the nodes",
    "start": "714959",
    "end": "718399"
  },
  {
    "text": "they are asso associated",
    "start": "718399",
    "end": "721480"
  },
  {
    "text": "with there were 20 teams which were",
    "start": "721880",
    "end": "724480"
  },
  {
    "text": "playing in eepl 2019 and 20 the same",
    "start": "724480",
    "end": "728720"
  },
  {
    "text": "information as you can see can be",
    "start": "728720",
    "end": "730480"
  },
  {
    "text": "fetched just by quering the node and the",
    "start": "730480",
    "end": "732959"
  },
  {
    "text": "associated relationships with other",
    "start": "732959",
    "end": "736120"
  },
  {
    "text": "nodes in case you want to fetch the team",
    "start": "736120",
    "end": "738760"
  },
  {
    "text": "information we can also use another",
    "start": "738760",
    "end": "741079"
  },
  {
    "text": "example here which we are fetching all",
    "start": "741079",
    "end": "743000"
  },
  {
    "text": "the vertices with the label team and all",
    "start": "743000",
    "end": "745959"
  },
  {
    "text": "the",
    "start": "745959",
    "end": "747360"
  },
  {
    "text": "properties the result shows name of the",
    "start": "747360",
    "end": "750560"
  },
  {
    "text": "teams and also the nicknames and all the",
    "start": "750560",
    "end": "753199"
  },
  {
    "text": "related",
    "start": "753199",
    "end": "754399"
  },
  {
    "text": "properties let's go further and in case",
    "start": "754399",
    "end": "757120"
  },
  {
    "text": "you want to find information about the",
    "start": "757120",
    "end": "759040"
  },
  {
    "text": "team and as well as the stadium at which",
    "start": "759040",
    "end": "761399"
  },
  {
    "text": "they played you can create more filters",
    "start": "761399",
    "end": "764519"
  },
  {
    "text": "here we're going to try to fetch node",
    "start": "764519",
    "end": "766760"
  },
  {
    "text": "information team and we want to display",
    "start": "766760",
    "end": "769120"
  },
  {
    "text": "the name the stadium and the city",
    "start": "769120",
    "end": "771360"
  },
  {
    "text": "they're associated",
    "start": "771360",
    "end": "774160"
  },
  {
    "text": "with the result shows exactly the name",
    "start": "774160",
    "end": "777680"
  },
  {
    "text": "the stadium and the City properties we",
    "start": "777680",
    "end": "779760"
  },
  {
    "text": "queried",
    "start": "779760",
    "end": "781279"
  },
  {
    "text": "for here's another example where we are",
    "start": "781279",
    "end": "783760"
  },
  {
    "text": "going to fetch the teams which are based",
    "start": "783760",
    "end": "785480"
  },
  {
    "text": "in London as simple as with on line",
    "start": "785480",
    "end": "787880"
  },
  {
    "text": "query we're going to fetch the city name",
    "start": "787880",
    "end": "790720"
  },
  {
    "text": "which corresponds to London the stadium",
    "start": "790720",
    "end": "793199"
  },
  {
    "text": "which are",
    "start": "793199",
    "end": "794760"
  },
  {
    "text": "associated here you can see we have all",
    "start": "794760",
    "end": "797040"
  },
  {
    "text": "the stadiums located in London listed as",
    "start": "797040",
    "end": "799839"
  },
  {
    "text": "per the",
    "start": "799839",
    "end": "800680"
  },
  {
    "text": "query let's take a look at another",
    "start": "800680",
    "end": "802959"
  },
  {
    "text": "example where we will be filtering the",
    "start": "802959",
    "end": "804800"
  },
  {
    "text": "nodes based on certain characters here",
    "start": "804800",
    "end": "808320"
  },
  {
    "text": "we're going to use the text predicates",
    "start": "808320",
    "end": "809880"
  },
  {
    "text": "to find the substrings this on line",
    "start": "809880",
    "end": "812480"
  },
  {
    "text": "query will fetch us the vertex which has",
    "start": "812480",
    "end": "815040"
  },
  {
    "text": "the label team and the name property",
    "start": "815040",
    "end": "817600"
  },
  {
    "text": "contains the letters o and u let's find",
    "start": "817600",
    "end": "821760"
  },
  {
    "text": "out the name value for such",
    "start": "821760",
    "end": "825360"
  },
  {
    "text": "nodes our example shows Southampton and",
    "start": "825360",
    "end": "828800"
  },
  {
    "text": "burnmouth",
    "start": "828800",
    "end": "831240"
  },
  {
    "text": "another example is finding everything in",
    "start": "832040",
    "end": "835000"
  },
  {
    "text": "the graph that contains every node and",
    "start": "835000",
    "end": "837680"
  },
  {
    "text": "every relationship associated with the",
    "start": "837680",
    "end": "840440"
  },
  {
    "text": "team",
    "start": "840440",
    "end": "842920"
  },
  {
    "text": "Arsenal here we can see the name and the",
    "start": "844000",
    "end": "846720"
  },
  {
    "text": "age of the team Arsenal the stadiums",
    "start": "846720",
    "end": "849920"
  },
  {
    "text": "they're associated with and the city",
    "start": "849920",
    "end": "852759"
  },
  {
    "text": "where the stadium is",
    "start": "852759",
    "end": "854680"
  },
  {
    "text": "located now that concludes our",
    "start": "854680",
    "end": "857000"
  },
  {
    "text": "demonstration for the graph query",
    "start": "857000",
    "end": "858720"
  },
  {
    "text": "language to query graph data from Amazon",
    "start": "858720",
    "end": "862959"
  },
  {
    "text": "Neptune I hope that you found the",
    "start": "862959",
    "end": "865120"
  },
  {
    "start": "863000",
    "end": "920000"
  },
  {
    "text": "demonstration informative and if you",
    "start": "865120",
    "end": "866880"
  },
  {
    "text": "have any further question you can always",
    "start": "866880",
    "end": "868759"
  },
  {
    "text": "write us to the email address that I",
    "start": "868759",
    "end": "870839"
  },
  {
    "text": "have included on the screen along with",
    "start": "870839",
    "end": "872839"
  },
  {
    "text": "it you can also follow the links that I",
    "start": "872839",
    "end": "874839"
  },
  {
    "text": "have mentioned here for starting your",
    "start": "874839",
    "end": "876720"
  },
  {
    "text": "own Neptune database cluster using cloud",
    "start": "876720",
    "end": "878639"
  },
  {
    "text": "formation templates and if you need more",
    "start": "878639",
    "end": "880959"
  },
  {
    "text": "best practices and Hands-On with the",
    "start": "880959",
    "end": "883199"
  },
  {
    "text": "sample codes available from GitHub for",
    "start": "883199",
    "end": "885480"
  },
  {
    "text": "data modeling you can also follow the",
    "start": "885480",
    "end": "887279"
  },
  {
    "text": "link along Amazon Neptune is",
    "start": "887279",
    "end": "889880"
  },
  {
    "text": "increasingly becoming popular for use",
    "start": "889880",
    "end": "891800"
  },
  {
    "text": "cases such as knowledge graphs identity",
    "start": "891800",
    "end": "894240"
  },
  {
    "text": "graphs security graphs fraud detections",
    "start": "894240",
    "end": "896800"
  },
  {
    "text": "and many more if you are interested in",
    "start": "896800",
    "end": "899320"
  },
  {
    "text": "such use cases hop over to our Neptune's",
    "start": "899320",
    "end": "901759"
  },
  {
    "text": "demo Hub page where you can review",
    "start": "901759",
    "end": "903600"
  },
  {
    "text": "several demonstrations to get an",
    "start": "903600",
    "end": "905720"
  },
  {
    "text": "understanding of how you can build graph",
    "start": "905720",
    "end": "907320"
  },
  {
    "text": "data and relationship for similar",
    "start": "907320",
    "end": "909240"
  },
  {
    "text": "application use",
    "start": "909240",
    "end": "911360"
  },
  {
    "text": "cases with that thank you so much if you",
    "start": "911360",
    "end": "914000"
  },
  {
    "text": "have any suggestions to improve these",
    "start": "914000",
    "end": "916000"
  },
  {
    "text": "videos please let us know in the comment",
    "start": "916000",
    "end": "919959"
  },
  {
    "text": "section",
    "start": "919959",
    "end": "922959"
  }
]