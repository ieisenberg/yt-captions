[
  {
    "start": "0",
    "end": "56000"
  },
  {
    "text": "[Music] this is going to be a talk about Empire which is an internal platform as a",
    "start": "11960",
    "end": "18520"
  },
  {
    "text": "service that we built at the company that I work for um and it's based on Docker and AWS",
    "start": "18520",
    "end": "24439"
  },
  {
    "text": "Services um before I start though I want can I just have a quick show of hands who's using Docker in production right",
    "start": "24439",
    "end": "29679"
  },
  {
    "text": "now oh it's actually quite a few what about um ECS in production Yeah couple",
    "start": "29679",
    "end": "38800"
  },
  {
    "text": "cool so I'm going to start um a little bit of background about why we decided to build a platform as a service um and",
    "start": "38960",
    "end": "46120"
  },
  {
    "text": "our path that kind of led us to build Empire um and how we're ultimately leveraging ECS or Amazon ec2 container",
    "start": "46120",
    "end": "53120"
  },
  {
    "text": "service as the back end for Empire so but first a little bit about myself um",
    "start": "53120",
    "end": "58239"
  },
  {
    "start": "56000",
    "end": "75000"
  },
  {
    "text": "my name is Eric Holmes I'm an infrastructure engineer at remind um and I like building things for other",
    "start": "58239",
    "end": "64400"
  },
  {
    "text": "developers I work mostly with go these days um but my background I did a lot with Ruby um I open source a lot of",
    "start": "64400",
    "end": "71040"
  },
  {
    "text": "crazy ideas um on my GitHub which is at EJ homes so I work for this company",
    "start": "71040",
    "end": "76920"
  },
  {
    "start": "75000",
    "end": "129000"
  },
  {
    "text": "called remind um and we build a product for teachers that makes it easy for them",
    "start": "76920",
    "end": "82200"
  },
  {
    "text": "to communicate with students and parents we have three major features um one of those is real-time chat um the other",
    "start": "82200",
    "end": "89479"
  },
  {
    "text": "major feat feature that we have is announcements which allow them to which allow teachers to uh send a fan out",
    "start": "89479",
    "end": "95240"
  },
  {
    "text": "message to all of their class like if they want have homework tomorrow um then we also support files",
    "start": "95240",
    "end": "100799"
  },
  {
    "text": "uh attaching files to both chats and announcements uh so right now we have",
    "start": "100799",
    "end": "106119"
  },
  {
    "text": "about 25 million users um during the back to school period um which is",
    "start": "106119",
    "end": "111759"
  },
  {
    "text": "basically next week um which is when all the kids come back to school we add about 350,000 new users to our product",
    "start": "111759",
    "end": "119039"
  },
  {
    "text": "per day and we send about five million messages per day and we do all this right now with about 50 employees about",
    "start": "119039",
    "end": "126039"
  },
  {
    "text": "30 of which are Engineers so we're growing really fast so a little background about uh the",
    "start": "126039",
    "end": "132080"
  },
  {
    "start": "129000",
    "end": "226000"
  },
  {
    "text": "historical architecture of our application so the product started back in uh 2011 um we had a very kind of",
    "start": "132080",
    "end": "139319"
  },
  {
    "text": "similar feature set to what we have today this is sort of after we discovered what the product really should be but the the the technical",
    "start": "139319",
    "end": "145959"
  },
  {
    "text": "architecture was vastly different from how we are today um we we didn't have lot of users we didn't have a lot of",
    "start": "145959",
    "end": "151480"
  },
  {
    "text": "scale um so we started as like a lot of startups we started as a monolithic Ruby application reals application um and",
    "start": "151480",
    "end": "158800"
  },
  {
    "text": "this single application served our API for our IOS and Android clients um it served our web dashboard uh it handled",
    "start": "158800",
    "end": "166239"
  },
  {
    "text": "all of the message delivery that we did through sidekick cues um and it also handled class widgets which is what we",
    "start": "166239",
    "end": "172400"
  },
  {
    "text": "this a little feature that we have for uh embedding a message stream on users websites so this this architecture",
    "start": "172400",
    "end": "178599"
  },
  {
    "text": "worked out really well uh initially we didn't have a lot of users and iterating on a single monolithic application was",
    "start": "178599",
    "end": "185200"
  },
  {
    "text": "really easy and really fast uh but we we started to grow really quickly um just by Word of Mouth um and during these",
    "start": "185200",
    "end": "192120"
  },
  {
    "text": "back to school periods were getting a little scary because we were adding so many users per day and getting so many requests uh per day so I wanted to show",
    "start": "192120",
    "end": "199840"
  },
  {
    "text": "a graph here what our traffic actually looks like during back to school but I was told that I can actually share the the actual graph but it kind of looks",
    "start": "199840",
    "end": "206720"
  },
  {
    "text": "like this so it's it's very steep it's actually steeper I should I should kind",
    "start": "206720",
    "end": "211799"
  },
  {
    "text": "of like rotate this a little bit um and it goes just really high then it kind of drops off uh in as the school year goes",
    "start": "211799",
    "end": "219760"
  },
  {
    "text": "on um but back to school it's just this huge spike in traffic and spike in new users and and message delivery so during",
    "start": "219760",
    "end": "228360"
  },
  {
    "start": "226000",
    "end": "286000"
  },
  {
    "text": "this back to school period uh with our message delivery still living inside of our single rails code base we started to",
    "start": "228360",
    "end": "234400"
  },
  {
    "text": "run into a lot of problems um one of those being that our psychic cues were constantly backed up um and it was",
    "start": "234400",
    "end": "240079"
  },
  {
    "text": "difficult for us to really scale this out horizontally um because it was really tightly coupled with the rest of the code base um and we were storing a",
    "start": "240079",
    "end": "247560"
  },
  {
    "text": "record of all the deliveries that we made to uh SMS devices or uh",
    "start": "247560",
    "end": "253400"
  },
  {
    "text": "applications um and this was a lot of delivery so and we were storing all this inside of our single postc database that",
    "start": "253400",
    "end": "259720"
  },
  {
    "text": "stored other information about users and groups and we realized that we were either going to have to Shard this or we",
    "start": "259720",
    "end": "265400"
  },
  {
    "text": "were going to have to split it out into a separate service um so we opted for splitting out",
    "start": "265400",
    "end": "272440"
  },
  {
    "text": "into a separate service um which I think was the right decision and we kind of continued this over the past few years",
    "start": "272440",
    "end": "279360"
  },
  {
    "text": "as we've as we've grown um and now we have approximately uh 40 to 50 or so",
    "start": "279360",
    "end": "285120"
  },
  {
    "text": "Production Services up until very recently um we were running all of these services on Heroku and we started using",
    "start": "285120",
    "end": "292720"
  },
  {
    "start": "286000",
    "end": "337000"
  },
  {
    "text": "them back in 2011 um because they were they allowed us to build a product very",
    "start": "292720",
    "end": "298160"
  },
  {
    "text": "quickly and not focus on on building infrastructure to support it like how we would deploy things um Heroku was a",
    "start": "298160",
    "end": "305919"
  },
  {
    "text": "really good decision I think for us initially um because we didn't have to hire a dedicated Ops Team and we just",
    "start": "305919",
    "end": "312160"
  },
  {
    "text": "focused on building the product so but it became clear to us um pretty recently",
    "start": "312160",
    "end": "317759"
  },
  {
    "text": "that there's a lot of constraints that Heroku provides that kind of start to break down for a microservices or a",
    "start": "317759",
    "end": "323520"
  },
  {
    "text": "service oriented architecture uh one of those being that all of our internal Services uh needed",
    "start": "323520",
    "end": "329720"
  },
  {
    "text": "to be exposed publicly um because there's no there's no equivalent to like a VPC uh inside of heroku's um",
    "start": "329720",
    "end": "337759"
  },
  {
    "start": "337000",
    "end": "376000"
  },
  {
    "text": "platform one of the other things was that our databases needed to be opened up to internet traffic and this is",
    "start": "337759",
    "end": "343639"
  },
  {
    "text": "generally not a good idea and we didn't have a lot of visibility into CPU memory and network",
    "start": "343639",
    "end": "349400"
  },
  {
    "text": "performance of the hosts um so if you know if a host is dropping packets we actually wouldn't even know um and we",
    "start": "349400",
    "end": "355560"
  },
  {
    "text": "didn't have any control over the routing layer uh so if we wanted to do custom request IDs or have authentication moved",
    "start": "355560",
    "end": "362759"
  },
  {
    "text": "into a middleware layer that was very difficult to do so about seven months ago uh we kind of took a step back um",
    "start": "362759",
    "end": "371319"
  },
  {
    "text": "and asked ourselves well what do we really want in in internal platform as a",
    "start": "371319",
    "end": "376400"
  },
  {
    "start": "376000",
    "end": "411000"
  },
  {
    "text": "service so one of those things was that we were we were already using a lot of AWS services like Dynamo DB and red",
    "start": "376400",
    "end": "382919"
  },
  {
    "text": "shift uh and kind of through proxy via Heroku um so and the other thing is that",
    "start": "382919",
    "end": "390199"
  },
  {
    "text": "Heroku does a really good job of making uh operations very simple so there's a",
    "start": "390199",
    "end": "395759"
  },
  {
    "text": "lot of operational Simplicity about Heroku things like deploying configuring",
    "start": "395759",
    "end": "401120"
  },
  {
    "text": "uh it's just a couple of SEI commands away so this is something that we really wanted to maintain and thanks to Heroku we were",
    "start": "401120",
    "end": "408280"
  },
  {
    "text": "kind of sold on the constraints of the 12 Factor application model um if you're not familiar with 12f Factor apps it's",
    "start": "408280",
    "end": "415199"
  },
  {
    "start": "411000",
    "end": "429000"
  },
  {
    "text": "kind of like a philosophy or a set of best practices for how you should run uh stateless service applications or",
    "start": "415199",
    "end": "421240"
  },
  {
    "text": "Services uh like configuring VI environment variables and making processes disposable and scaling out",
    "start": "421240",
    "end": "429240"
  },
  {
    "start": "429000",
    "end": "483000"
  },
  {
    "text": "horizontally uh we also wanted to maintain shared patterns for deployment uh so we wanted all of our services to",
    "start": "429240",
    "end": "435080"
  },
  {
    "text": "get deployed exactly the same way which is how we were doing it on Heroku um and this is really good because it lowers",
    "start": "435080",
    "end": "440720"
  },
  {
    "text": "the barrier of Entry uh for somebody getting something into production uh you don't want to get into a scenario where",
    "start": "440720",
    "end": "447759"
  },
  {
    "text": "you know somebody has to make a change to a server but they have no idea how it gets deployed we wanted to maintain uh",
    "start": "447759",
    "end": "454039"
  },
  {
    "text": "very fast build and iteration uh build and release iteration Cycles uh so since we were previously on",
    "start": "454039",
    "end": "460879"
  },
  {
    "text": "Heroku we didn't want to have a dedicated Ops Team we were kind of operating under a noops philosophy prior",
    "start": "460879",
    "end": "468520"
  },
  {
    "text": "to um being on Heroku and we didn't want to end up in a world where we would have",
    "start": "468520",
    "end": "474120"
  },
  {
    "text": "to uh talk to a big Ops Team to get something new into production",
    "start": "474120",
    "end": "479800"
  },
  {
    "text": "so we're also getting really concerned about uh the size of our surface area um like I said before all of these internal",
    "start": "479800",
    "end": "485879"
  },
  {
    "start": "483000",
    "end": "524000"
  },
  {
    "text": "Services need to be exposed publicly on the internet um and we were we we wanted to decrease our surface area and only",
    "start": "485879",
    "end": "493440"
  },
  {
    "text": "expose what actually needed to be public and then the rest of that we wanted to live inside of a VPC so all of our",
    "start": "493440",
    "end": "498720"
  },
  {
    "text": "internal Services would only be accessible within within our internal",
    "start": "498720",
    "end": "504199"
  },
  {
    "text": "VPC and probably most importantly whatever we built for this uh we need it",
    "start": "504199",
    "end": "509840"
  },
  {
    "text": "to be robust and resilient to failure um we're operating a fairly large scale",
    "start": "509840",
    "end": "516039"
  },
  {
    "text": "production system um and downtime is like a very serious thing for us so uh we needed something that wasn't going to",
    "start": "516039",
    "end": "522200"
  },
  {
    "text": "cause downtime uh and ideally we we wanted to",
    "start": "522200",
    "end": "527440"
  },
  {
    "start": "524000",
    "end": "545000"
  },
  {
    "text": "use containers as a unit of deployment uh and I'll talk about some more reasons about that why in the next slide um but",
    "start": "527440",
    "end": "534320"
  },
  {
    "text": "we're actually kind of technically already using containers on Heroku they use a container containerized technology",
    "start": "534320",
    "end": "539880"
  },
  {
    "text": "um but we wanted to take a next step and possibly use Docker if we could so why",
    "start": "539880",
    "end": "546079"
  },
  {
    "start": "545000",
    "end": "596000"
  },
  {
    "text": "containers the reason kind of boils down to speed and cost so containers they can",
    "start": "546079",
    "end": "551240"
  },
  {
    "text": "be built really fast um there's some caveats to this um there's some bugs in Docker that make that kind of hard to do",
    "start": "551240",
    "end": "557440"
  },
  {
    "text": "in a build system but for the most part you can build you can build a container and push it up in you know 30 30 seconds",
    "start": "557440",
    "end": "563480"
  },
  {
    "text": "to a minute which makes it very easy to make a change and then deploy it to production uh they let us isolate",
    "start": "563480",
    "end": "570240"
  },
  {
    "text": "dependencies as a portable easy really easy to distribute package um I think",
    "start": "570240",
    "end": "576120"
  },
  {
    "text": "probably the best way to think about containers is they're they're kind of just like statically linked binaries um",
    "start": "576120",
    "end": "581399"
  },
  {
    "text": "if you're familiar with go go build statically linked binaries and they're very portable um containers are kind of",
    "start": "581399",
    "end": "586800"
  },
  {
    "text": "just the next step uh you can isolate dependencies and they're portable across you know windows and uh Linux systems if",
    "start": "586800",
    "end": "593600"
  },
  {
    "text": "you're running vagrant or something like that uh they also let us build better",
    "start": "593600",
    "end": "599480"
  },
  {
    "text": "development environments and have more Dev prod parity so the same images that we're building in our build system can",
    "start": "599480",
    "end": "605440"
  },
  {
    "text": "be run on a a developer's laptop if they want to debug something or if they even want to set up the entire service",
    "start": "605440",
    "end": "611440"
  },
  {
    "text": "locally on their laptop they can just pull a bunch of Docker images and connect them together they limit the number of moving parts and this just",
    "start": "611440",
    "end": "617760"
  },
  {
    "text": "kind of boils down to immutability infrastructure which I think is a really good idea um the thing if we if we build",
    "start": "617760",
    "end": "625360"
  },
  {
    "text": "a Docker image now and deploy it if we take that image again in 6 months from",
    "start": "625360",
    "end": "630399"
  },
  {
    "text": "now deploy it again there really shouldn't be any change uh and then containers they allow",
    "start": "630399",
    "end": "635760"
  },
  {
    "text": "us to use resources more efficiently so cost was a was an issue for us um and we",
    "start": "635760",
    "end": "641160"
  },
  {
    "text": "can run on average we've been running about 10 to 20 containers on a single host um and that really allows us to",
    "start": "641160",
    "end": "648320"
  },
  {
    "text": "bring in our costs so we decided that we wanted an internal pass um and it turns out we're",
    "start": "648320",
    "end": "655880"
  },
  {
    "text": "not probably not the first company to want something like this um um or to try to build something like this so one of",
    "start": "655880",
    "end": "661959"
  },
  {
    "text": "the most well-known companies that sort of expose the benefits of microservice Architecture is uh is Netflix um and",
    "start": "661959",
    "end": "669440"
  },
  {
    "text": "they have something called Asgard um and they use a lot of ads Services as well",
    "start": "669440",
    "end": "674800"
  },
  {
    "text": "and they they bake Amis I think they might do something a little bit differently now but the last time I read about this is they they bake Amis and",
    "start": "674800",
    "end": "680680"
  },
  {
    "text": "they use that as a unit of deployment so it's kind of similar to like building Docker containers um just at a bigger",
    "start": "680680",
    "end": "686560"
  },
  {
    "text": "scale and it's a lot slower unfortunately um so doer containers allow us to build things a lot faster uh",
    "start": "686560",
    "end": "692959"
  },
  {
    "text": "SoundCloud is another company um that kind of built an internal platform as a service U they call it bazooka um",
    "start": "692959",
    "end": "699639"
  },
  {
    "text": "they're not using containers uh but it's kind of similar to what we wanted where it was a um something akin to Heroku",
    "start": "699639",
    "end": "706639"
  },
  {
    "text": "that provided ease of operation and pretty much every other company inside of our investors",
    "start": "706639",
    "end": "712680"
  },
  {
    "text": "portfolio is trying to do something kind of similar to this so ideally we didn't want to build something if we didn't",
    "start": "712680",
    "end": "718200"
  },
  {
    "text": "have to um um we spent a lot of time researching open source passes um and a",
    "start": "718200",
    "end": "724000"
  },
  {
    "text": "couple of them looked pretty promising at the time uh two of those were Flynn and deis so for for a couple of reasons",
    "start": "724000",
    "end": "731920"
  },
  {
    "start": "726000",
    "end": "755000"
  },
  {
    "text": "we decided that neither of these really fit our requirements probably the biggest reason for that was that we weren't actually aware of any companies",
    "start": "731920",
    "end": "738160"
  },
  {
    "text": "at our scale that were using either of these in production and pretty much every component that each one of these",
    "start": "738160",
    "end": "743360"
  },
  {
    "text": "were using had some kind of alpha or don't use this in production yet uh statement on it which is a little scary",
    "start": "743360",
    "end": "750120"
  },
  {
    "text": "so we wanted we wanted to ideally use a lot of stable components to build something on top of so Empire was born",
    "start": "750120",
    "end": "757360"
  },
  {
    "start": "755000",
    "end": "772000"
  },
  {
    "text": "at the time it was uh about six months ago and it was just an internal unnamed project initially we we started off uh",
    "start": "757360",
    "end": "764160"
  },
  {
    "text": "building on top of Coro us uh using a fleet as auler uh so Fleet is basically a uh ties",
    "start": "764160",
    "end": "773199"
  },
  {
    "start": "772000",
    "end": "824000"
  },
  {
    "text": "ETD together which is a key value store for clusters basically a distributed system D so you could schedule jobs onto",
    "start": "773199",
    "end": "779440"
  },
  {
    "text": "a cluster um cluster of machines uh we had a custom routing layer that was",
    "start": "779440",
    "end": "785920"
  },
  {
    "text": "configured via comd and etsd so whenever a container would start up we had a",
    "start": "785920",
    "end": "792079"
  },
  {
    "text": "something called registrator that would register this key into ETD and then it would update the engine X configuration",
    "start": "792079",
    "end": "798160"
  },
  {
    "text": "so that it knew where this where to connect to the service or where the connect to the docker container and then we were still using",
    "start": "798160",
    "end": "803800"
  },
  {
    "text": "Docker at the time we initially started out by building it um as implementing a a subset of the Heroku platform API um",
    "start": "803800",
    "end": "811680"
  },
  {
    "text": "so we were already really comfortable with using heroku's tools and turns out",
    "start": "811680",
    "end": "817920"
  },
  {
    "text": "you know apis are interfaces so you can swap out implementation details and we can just use the Heroku CLI to do most",
    "start": "817920",
    "end": "823760"
  },
  {
    "text": "of what we want to do this all worked out really well initially um until we",
    "start": "823760",
    "end": "828839"
  },
  {
    "start": "824000",
    "end": "858000"
  },
  {
    "text": "kind of started testing failure modes uh so we we discovered a lot of uh bugs and",
    "start": "828839",
    "end": "834360"
  },
  {
    "text": "Fleet that made us just very wary of actually putting this in production and it became really clear to us that we",
    "start": "834360",
    "end": "840480"
  },
  {
    "text": "needed just a more intelligent scheduler fleet Fleet was very kind of dumb in how it would schedule task onto uh onto",
    "start": "840480",
    "end": "846440"
  },
  {
    "text": "hosts um and it didn't it didn't manage desired State well so if a if a container went down it wouldn't actually",
    "start": "846440",
    "end": "852240"
  },
  {
    "text": "bring a new one up that might change now and actually think Fleet is actually deprecated in favor of something",
    "start": "852240",
    "end": "858320"
  },
  {
    "start": "858000",
    "end": "891000"
  },
  {
    "text": "else um and then in our experience um using ETD for managing cluster cluster",
    "start": "858320",
    "end": "864120"
  },
  {
    "text": "State and um all the machines inside of our cluster uh ETD was fragile um and I",
    "start": "864120",
    "end": "870600"
  },
  {
    "text": "think a lot of the things in this space are kind of fragile and it's just it's not something that you really want to",
    "start": "870600",
    "end": "876759"
  },
  {
    "text": "run because it's a it's a pain to run and it's a pain to Monitor and it's a hard very hard problem to solve and this",
    "start": "876759",
    "end": "883519"
  },
  {
    "text": "was this was back when ETD was um not at a stable release it is now but um doesn't make it really any easier to run",
    "start": "883519",
    "end": "890320"
  },
  {
    "text": "I think so we weren't we weren't really feeling like we were getting the",
    "start": "890320",
    "end": "895560"
  },
  {
    "start": "891000",
    "end": "918000"
  },
  {
    "text": "resilience and the stability that we were trying to achieve and ultimately we didn't really want to",
    "start": "895560",
    "end": "901160"
  },
  {
    "text": "run our own clustering software so we wanted to if if we could you know take a",
    "start": "901160",
    "end": "906320"
  },
  {
    "text": "service that could cluster all of our machines together um and use that so and overall we were just feeling kind of",
    "start": "906320",
    "end": "912800"
  },
  {
    "text": "very frustrated about trying to piece together all these new and just unstable",
    "start": "912800",
    "end": "918160"
  },
  {
    "start": "918000",
    "end": "929000"
  },
  {
    "text": "Technologies so around the same time uh conveniently ECS went generally available and we started looking into",
    "start": "918160",
    "end": "925040"
  },
  {
    "text": "this to serve as our our scheduling backend for the the plat the platform so what is ECS um I'll kind of brush",
    "start": "925040",
    "end": "932319"
  },
  {
    "start": "929000",
    "end": "960000"
  },
  {
    "text": "Breeze through this a little bit um because Chad already talked about it uh so I would say in summary the best way",
    "start": "932319",
    "end": "938880"
  },
  {
    "text": "to describe ECS to people is that it's really the easiest way to just run Docker containers on a on a cluster of",
    "start": "938880",
    "end": "945600"
  },
  {
    "text": "machines um and more specifically it basically pools host together as a single resource um and then it provides",
    "start": "945600",
    "end": "953279"
  },
  {
    "text": "a set of apis to place tasks onto um a container instance that has a",
    "start": "953279",
    "end": "960240"
  },
  {
    "start": "960000",
    "end": "990000"
  },
  {
    "text": "resources so one of the great things is that it supports the concept of services uh for scaling Tas out",
    "start": "960240",
    "end": "966759"
  },
  {
    "text": "horizontally and it integrates this is one of the actually the greatest features I think is that it integrates",
    "start": "966759",
    "end": "972199"
  },
  {
    "text": "with elb for connection draining zero downtime deployments and health checks um that will remove unhealthy containers",
    "start": "972199",
    "end": "979519"
  },
  {
    "text": "so this is really important for us too because in the previous uh implementation we hadn't actually solved zero downtime at all um which is",
    "start": "979519",
    "end": "985920"
  },
  {
    "text": "something that we would actually we really needed to put something like this in production ECS is made of a few",
    "start": "985920",
    "end": "991880"
  },
  {
    "start": "990000",
    "end": "1013000"
  },
  {
    "text": "different components um one of those being the container instance which is essentially just an ec2 instance running an EC ECS",
    "start": "991880",
    "end": "1000040"
  },
  {
    "text": "agent and Docker so the ECS agent is uh it",
    "start": "1000040",
    "end": "1005440"
  },
  {
    "text": "actually runs as a Docker container you you can run it outside of Docker if you want to but um it's usually easiest just",
    "start": "1005440",
    "end": "1011440"
  },
  {
    "text": "to run it as a Docker container and it's the it's the piece that accepts jobs from auler from the ECS service and runs",
    "start": "1011440",
    "end": "1018959"
  },
  {
    "text": "them using the local darker Damon and then it manages the life cycle of that so if the container drops it'll notify",
    "start": "1018959",
    "end": "1024240"
  },
  {
    "text": "ECS um and ECS will reschedule it onto a new host and then the ECS scheduler uh is is",
    "start": "1024240",
    "end": "1030839"
  },
  {
    "text": "the piece that intelligently places containers onto hosts with available CPU and memory so then ECS uh defines a",
    "start": "1030839",
    "end": "1038000"
  },
  {
    "start": "1036000",
    "end": "1066000"
  },
  {
    "text": "couple of different resources and apis for interacting with them um one of those being task definitions which I",
    "start": "1038000",
    "end": "1044000"
  },
  {
    "text": "think you kind of just think of them as uh templates for running containers so you can specify the image some",
    "start": "1044000",
    "end": "1049640"
  },
  {
    "text": "environment variables that you want to run um and then you can use a service to take this task definition link it",
    "start": "1049640",
    "end": "1056160"
  },
  {
    "text": "together with a number of desired instances of it and E uh the service will uh manage those and make sure that",
    "start": "1056160",
    "end": "1063160"
  },
  {
    "text": "the desired state is kept the entire time uh then tasks are just a unit of",
    "start": "1063160",
    "end": "1069120"
  },
  {
    "start": "1066000",
    "end": "1091000"
  },
  {
    "text": "work inside of um ECS EC's terminology um one of the great things about ECS is",
    "start": "1069120",
    "end": "1074559"
  },
  {
    "text": "it provides just a raw API for running tasks um which CH demonstrated for the Bach processing and I think Cora will",
    "start": "1074559",
    "end": "1081960"
  },
  {
    "text": "tun uh then clusters uh and ECS are just they just represent a logical pool of uh",
    "start": "1081960",
    "end": "1088640"
  },
  {
    "text": "of instances that you can schedule tasks into we we tried ECS for quite a while",
    "start": "1088640",
    "end": "1094039"
  },
  {
    "start": "1091000",
    "end": "1118000"
  },
  {
    "text": "um and just to try it out we we we prototyped a backend inside of Empire",
    "start": "1094039",
    "end": "1100120"
  },
  {
    "text": "and we felt like it would be a really good replacement for uh Fleet and uh so the reason for that is that it",
    "start": "1100120",
    "end": "1106600"
  },
  {
    "text": "provided just a set of solid solid Primitives that could serve as our scheduling back end so it's a ECS has a",
    "start": "1106600",
    "end": "1113240"
  },
  {
    "text": "guey but it also has just like all ads services like a really good API behind it and U probably most importantly for",
    "start": "1113240",
    "end": "1120799"
  },
  {
    "start": "1118000",
    "end": "1139000"
  },
  {
    "text": "us is that it was a managed service so all the clustering that we were doing previously that we had to run ourselves",
    "start": "1120799",
    "end": "1126559"
  },
  {
    "text": "we just didn't have to do anymore um and it's something that we didn't have to monitor either so if you know if our",
    "start": "1126559",
    "end": "1133080"
  },
  {
    "text": "cluster went down we we were less concerned about having to run that that piece of software",
    "start": "1133080",
    "end": "1139679"
  },
  {
    "start": "1139000",
    "end": "1183000"
  },
  {
    "text": "and then the the failure modes that we tested they behaved like we would expect them to for something like this so we",
    "start": "1139679",
    "end": "1146159"
  },
  {
    "text": "can bring up a a cluster of hosts and then just kill them all and then let",
    "start": "1146159",
    "end": "1151240"
  },
  {
    "text": "them come back up and you know our entire service would be healthy again in a matter of you know a couple minutes as",
    "start": "1151240",
    "end": "1156960"
  },
  {
    "text": "long as it takes for the ec2 host to come up things like killing killing container like if you log into a machine",
    "start": "1156960",
    "end": "1163159"
  },
  {
    "text": "and you kill the docker container ECS will spin it up spin up a new healthy one um with the ebn integration if you",
    "start": "1163159",
    "end": "1169559"
  },
  {
    "text": "have health checks to a container uh if the container becomes unhealthy uh EB or",
    "start": "1169559",
    "end": "1174600"
  },
  {
    "text": "elb in ECS will uh bring up a new container then kill the old one and register it with the",
    "start": "1174600",
    "end": "1180840"
  },
  {
    "text": "elb and then this also meant that because of the elb integration we could get rid of we can get rid of uh our",
    "start": "1180840",
    "end": "1187360"
  },
  {
    "start": "1183000",
    "end": "1245000"
  },
  {
    "text": "custom routing stack entirely um and we could just do uh service Discovery via",
    "start": "1187360",
    "end": "1192799"
  },
  {
    "text": "standard DNS uh to the elbs um so every every every single service that we bring",
    "start": "1192799",
    "end": "1198480"
  },
  {
    "text": "up inside of our Empire environment uh that has a web process attached to it we attach an elb um and then we just give",
    "start": "1198480",
    "end": "1205559"
  },
  {
    "text": "it uh a DNS record inside of our internal hosted zone so if we have like an API service it'll be available at HTP",
    "start": "1205559",
    "end": "1214240"
  },
  {
    "text": "API um and this is really good because if you change environments so we have a production and a staging environment um",
    "start": "1214240",
    "end": "1219679"
  },
  {
    "text": "it's always available at the exact same location so service Discovery and this is really good uh compared to other",
    "start": "1219679",
    "end": "1226360"
  },
  {
    "text": "service Discovery methods like one of the more popular ones that's talked about recently is like SRV records um",
    "start": "1226360",
    "end": "1232679"
  },
  {
    "text": "but that requires that you change uh a lot about how you how you talk to Services um and one of the benefits of",
    "start": "1232679",
    "end": "1239520"
  },
  {
    "text": "putting a load balancer in front of it uh espe especially elbs is that we get cloudwatch metrics it's a single binary",
    "start": "1239520",
    "end": "1246480"
  },
  {
    "start": "1245000",
    "end": "1278000"
  },
  {
    "text": "so it's really easy to run uh we run Empire just inside of a Docker container",
    "start": "1246480",
    "end": "1251640"
  },
  {
    "text": "and it's only external dependency is postgres and the AWS the Amazon",
    "start": "1251640",
    "end": "1256760"
  },
  {
    "text": "apis uh so it provides an API and a CLI to create apps uh deploy Docker images",
    "start": "1256760",
    "end": "1263679"
  },
  {
    "text": "update configuration run one-off tasks uh and it also it also supports the concept of proc files which if anybody's",
    "start": "1263679",
    "end": "1270400"
  },
  {
    "text": "used Roku uh allows you to specify like a web process a worker process or any other process that uh makes up your",
    "start": "1270400",
    "end": "1276840"
  },
  {
    "text": "single service the question that I always get asked is really like is it is it ready for production um so we've been",
    "start": "1276840",
    "end": "1283640"
  },
  {
    "start": "1278000",
    "end": "1302000"
  },
  {
    "text": "actually running about 15 or so Production Services for the past month and a half um inside of ECS managed via",
    "start": "1283640",
    "end": "1291080"
  },
  {
    "text": "Empire um and so far it's been amazing um ECS has been really stable in our",
    "start": "1291080",
    "end": "1297880"
  },
  {
    "text": "experience um so we've been really happy with it um and one of the important",
    "start": "1297880",
    "end": "1303679"
  },
  {
    "start": "1302000",
    "end": "1332000"
  },
  {
    "text": "things to remember is that Empire itself it doesn't manage it doesn't it doesn't",
    "start": "1303679",
    "end": "1309440"
  },
  {
    "text": "watch anything or try to alter state so it takes a very like hands-off approach once you've deployed an application and",
    "start": "1309440",
    "end": "1315559"
  },
  {
    "text": "then from there it's all AWS services so it's elb ECS uh ec2 um just these existing stable",
    "start": "1315559",
    "end": "1325200"
  },
  {
    "text": "Technologies and one of the great things is we've seen um huge performance improvements moving off of Heroku and",
    "start": "1325200",
    "end": "1331080"
  },
  {
    "text": "directly onto ec2 all right so I'm going to go ahead and jump into the demo now I'm going to",
    "start": "1331080",
    "end": "1337200"
  },
  {
    "start": "1332000",
    "end": "1406000"
  },
  {
    "text": "start with a simple example first uh then I'll show you how you can use Empire's application model to deploy",
    "start": "1337200",
    "end": "1343000"
  },
  {
    "text": "more advanced architectures so before you use an Empire you need to to provision an",
    "start": "1343000",
    "end": "1349080"
  },
  {
    "text": "instance we have a really simple cloud formation stack uh that you can use to",
    "start": "1349080",
    "end": "1354240"
  },
  {
    "text": "uh build an Empire environment this will create all the necessary ECS ads resources and return HTP endpoint for",
    "start": "1354240",
    "end": "1361760"
  },
  {
    "text": "the Empire API URL so all you have to do uh is go to the Empire repo and click",
    "start": "1361760",
    "end": "1369159"
  },
  {
    "text": "launch",
    "start": "1369159",
    "end": "1371520"
  },
  {
    "text": "stack and this is going to bring up the uh Cloud information UI so you just",
    "start": "1375720",
    "end": "1381360"
  },
  {
    "text": "click next and it'll present you with some",
    "start": "1381360",
    "end": "1387080"
  },
  {
    "text": "options you can actually leave most of these blank and when you click next uh It'll ask you a couple more things but",
    "start": "1387080",
    "end": "1393480"
  },
  {
    "text": "once you do that it'll take about 10 minutes or so to create an empire environment um for the sake of the demo",
    "start": "1393480",
    "end": "1399240"
  },
  {
    "text": "I've already done this beforehand because it'll take a little while but I can go ahead and jump into the next into",
    "start": "1399240",
    "end": "1405039"
  },
  {
    "text": "the next section so once we have Empire running one of the great things about Empire is",
    "start": "1405039",
    "end": "1410400"
  },
  {
    "start": "1406000",
    "end": "1833000"
  },
  {
    "text": "it makes it really easy to deploy Docker images so you can deploy any Docker image from the registry so for example I",
    "start": "1410400",
    "end": "1418559"
  },
  {
    "text": "can really easily deploy the engine X image uh to an Empire environment so",
    "start": "1418559",
    "end": "1423960"
  },
  {
    "text": "before we actually do anything we'll have to first set the Empire API URL so it knows where to connect to the Empire",
    "start": "1423960",
    "end": "1430720"
  },
  {
    "text": "uh API so I've already G gone ahead and done that and then we'll need to log in",
    "start": "1430720",
    "end": "1437400"
  },
  {
    "text": "and with the example stack uh the username is fake and there's no password so we can just log",
    "start": "1437400",
    "end": "1444159"
  },
  {
    "text": "in so the next thing we can do is deploy for example just the standard engine",
    "start": "1444159",
    "end": "1450559"
  },
  {
    "text": "X so we can easily deploy the official engine X image to our Empire",
    "start": "1450559",
    "end": "1456320"
  },
  {
    "text": "environment that pulled the entex image from the registry it created the ECS service for the web process and an",
    "start": "1456320",
    "end": "1463520"
  },
  {
    "text": "attached an internal elb to this ECS service by default inside of Empire all",
    "start": "1463520",
    "end": "1469240"
  },
  {
    "text": "services are considered internal and they're only accessible within the",
    "start": "1469240",
    "end": "1475120"
  },
  {
    "text": "VPC it's a lot more interesting if we can actually interact with this service from the internet since this is private",
    "start": "1475120",
    "end": "1480559"
  },
  {
    "text": "we can't do that right now Empire supports uh making a service public by adding a domain to the app I have a",
    "start": "1480559",
    "end": "1488080"
  },
  {
    "text": "sample app that we can deploy called inspector so we can go ahead and deploy",
    "start": "1488080",
    "end": "1493520"
  },
  {
    "text": "that publicly the first thing we'll need to do is create it first",
    "start": "1493520",
    "end": "1499039"
  },
  {
    "text": "and then we're going to add a domain to",
    "start": "1499039",
    "end": "1502320"
  },
  {
    "text": "it and then we can just deploy",
    "start": "1505799",
    "end": "1510000"
  },
  {
    "text": "it and you can even specify tags just like you can when you Docker",
    "start": "1513679",
    "end": "1519399"
  },
  {
    "text": "pull so there we go after just a couple of minutes the E will be available and",
    "start": "1523159",
    "end": "1528840"
  },
  {
    "text": "then we can actually just curl",
    "start": "1528840",
    "end": "1532278"
  },
  {
    "text": "this so let me just show you the uh URL for the inspector",
    "start": "1548919",
    "end": "1554320"
  },
  {
    "text": "first so this is the elb for our inspector application and then we",
    "start": "1554320",
    "end": "1561320"
  },
  {
    "text": "can sorry I already deployed it and then we can go ahead and uh curl",
    "start": "1561480",
    "end": "1568039"
  },
  {
    "text": "this cool so inspector just it just takes the HTP request and then returns",
    "start": "1568760",
    "end": "1574520"
  },
  {
    "text": "it as the response so we can see this is actually working and we're deploying this application inside of our own",
    "start": "1574520",
    "end": "1582000"
  },
  {
    "text": "Empire environment backed by ECS and all these a AWS services",
    "start": "1582000",
    "end": "1588679"
  },
  {
    "text": "so we can actually show what's running so right now we have one web",
    "start": "1588679",
    "end": "1594440"
  },
  {
    "text": "process running and we can go ahead and scale this just like koku we can scale",
    "start": "1594440",
    "end": "1601039"
  },
  {
    "text": "individual processes so we can scale web up to say three",
    "start": "1601039",
    "end": "1606600"
  },
  {
    "text": "processes you can even specify CPU and memory constraints when you scale so this is a go application and it doesn't",
    "start": "1609080",
    "end": "1616039"
  },
  {
    "text": "need a lot of Ram uh so we can actually scale this to maybe 10 megabytes of ram",
    "start": "1616039",
    "end": "1622159"
  },
  {
    "text": "256 so this is 256 CPU shares out of 1,24 just a relative",
    "start": "1622159",
    "end": "1627720"
  },
  {
    "text": "weight and we'll scale it to 10 megabytes of",
    "start": "1627720",
    "end": "1632440"
  },
  {
    "text": "RAM and then just to trigger this we'll have to trigger a deploy",
    "start": "1634960",
    "end": "1641039"
  },
  {
    "text": "again so after a minute or two uh we'll see the new is running this takes a",
    "start": "1644240",
    "end": "1650039"
  },
  {
    "text": "little while just because it's doing a rolling restart of all the processes so we still see there's one web process but",
    "start": "1650039",
    "end": "1656320"
  },
  {
    "text": "after um after just a couple of minutes you'll see uh there'll be three processes here so we can also set",
    "start": "1656320",
    "end": "1662640"
  },
  {
    "text": "environment variables and we can list",
    "start": "1662640",
    "end": "1669518"
  },
  {
    "text": "environment and every every time we deploy or change configuration we'll see a new release",
    "start": "1671600",
    "end": "1679279"
  },
  {
    "text": "so we have four releases and one of the greatest things about Empire is it actually allows for",
    "start": "1680720",
    "end": "1687000"
  },
  {
    "text": "one-off processes so if you have migrations that you need to run like if you're using uh a rails console or",
    "start": "1687000",
    "end": "1693720"
  },
  {
    "text": "python uh you can do that with M run so for example we can just run bash inside",
    "start": "1693720",
    "end": "1699320"
  },
  {
    "text": "of a a container and this will actually connect our terminal to this running instance",
    "start": "1699320",
    "end": "1706440"
  },
  {
    "text": "so we can use we can also use Empire to deploy more advanced architectures this is kind",
    "start": "1710840",
    "end": "1717519"
  },
  {
    "text": "of a trivial example so at REM mind we only expose a single Empire application",
    "start": "1717519",
    "end": "1724279"
  },
  {
    "text": "publicly and this serves as our API Gateway this application is engine X and",
    "start": "1724279",
    "end": "1729880"
  },
  {
    "text": "open resty and it routes to all of our internal services and applications like our public API our web client and our",
    "start": "1729880",
    "end": "1736360"
  },
  {
    "text": "event service I have a GitHub repo that shows a strip down version of this",
    "start": "1736360",
    "end": "1742120"
  },
  {
    "text": "architecture and it's available at EJ Holmes Empire",
    "start": "1742120",
    "end": "1747600"
  },
  {
    "text": "demo and I've already gone ahead and cloned that so we're inside that that repo right now we can bring this up",
    "start": "1747600",
    "end": "1753519"
  },
  {
    "text": "really easily with Docker compose and this is just going to bring it up locally",
    "start": "1753519",
    "end": "1760799"
  },
  {
    "text": "all right so once we have it up we can go ahead and open this in a",
    "start": "1768640",
    "end": "1773440"
  },
  {
    "text": "browser okay and this is just a really simple application to-do application we can create to-dos do the",
    "start": "1782159",
    "end": "1791360"
  },
  {
    "text": "laundry take out the trash",
    "start": "1792519",
    "end": "1797360"
  },
  {
    "text": "okay so when we actually deploy this to production the architecture that we're kind of going for is something like this",
    "start": "1799960",
    "end": "1807080"
  },
  {
    "text": "where we have a public internet facing elb that is backed by our router our",
    "start": "1807080",
    "end": "1813120"
  },
  {
    "text": "engine X router and this is going to this is going to have reverse proxy to our our web uh application which is a",
    "start": "1813120",
    "end": "1820240"
  },
  {
    "text": "ruby application and a ruby application is going to consume an internal uh go",
    "start": "1820240",
    "end": "1826600"
  },
  {
    "text": "API so this internal API is not exposed anywhere outside of the",
    "start": "1826600",
    "end": "1832480"
  },
  {
    "text": "VPC so we can deploy this really easily to Empire by just uh doing a couple of",
    "start": "1832480",
    "end": "1839200"
  },
  {
    "start": "1833000",
    "end": "2210000"
  },
  {
    "text": "commands and I'll show you what those commands are so I have just a little script that will show us what we need to",
    "start": "1839200",
    "end": "1844840"
  },
  {
    "text": "do so the first thing we'll do is we'll we'll create the router application and then we'll add a domain to it so adding",
    "start": "1844840",
    "end": "1850640"
  },
  {
    "text": "the domain makes it public again and then for each one of these applications we're going to build a",
    "start": "1850640",
    "end": "1856919"
  },
  {
    "text": "Docker image we're going to push it to the docker registry and then we're going to deploy",
    "start": "1856919",
    "end": "1862960"
  },
  {
    "text": "that that image to our Empire environment so let me go ahead and do",
    "start": "1862960",
    "end": "1868159"
  },
  {
    "text": "this and I'll just comment these out because I already did this step",
    "start": "1868159",
    "end": "1872840"
  },
  {
    "text": "beforehand all right so we can see that it's starting by building the engine X image this is our router application",
    "start": "1880440",
    "end": "1888720"
  },
  {
    "text": "and right now it's pushing that to the docker",
    "start": "1888840",
    "end": "1893039"
  },
  {
    "text": "registry all right so that one was pushed and then it also it also deployed here so we can see that it created a new",
    "start": "1901480",
    "end": "1907320"
  },
  {
    "text": "release for the router and now it looks like it's",
    "start": "1907320",
    "end": "1913080"
  },
  {
    "text": "building our API",
    "start": "1913080",
    "end": "1916518"
  },
  {
    "text": "all right and it deployed our API created a new release for",
    "start": "1930080",
    "end": "1934398"
  },
  {
    "text": "it and now we're building and pushing our rivy web application",
    "start": "1942399",
    "end": "1948559"
  },
  {
    "text": "Okay cool so we deployed all three images to to our Empire",
    "start": "1966440",
    "end": "1971799"
  },
  {
    "text": "environment so now we can actually see that this is actually running inside of uh Amazon",
    "start": "1971799",
    "end": "1979278"
  },
  {
    "text": "so we can do the same thing take out the",
    "start": "1983159",
    "end": "1987840"
  },
  {
    "text": "trash do the laundry and we can we can expect the",
    "start": "1988320",
    "end": "1993880"
  },
  {
    "text": "processes that are running so let's take a look at the router app so we have one web process running",
    "start": "1993880",
    "end": "2001360"
  },
  {
    "text": "for the router one for web and one for API",
    "start": "2001360",
    "end": "2008399"
  },
  {
    "text": "we can also really easily just make changes to our code uh rebuild the docker image and deploy it to",
    "start": "2008399",
    "end": "2014639"
  },
  {
    "text": "Empire so if I change web let's change one of these views and",
    "start": "2014639",
    "end": "2019799"
  },
  {
    "text": "we'll just change this to say hello",
    "start": "2019799",
    "end": "2026720"
  },
  {
    "text": "world and we'll rebuild this",
    "start": "2027360",
    "end": "2031679"
  },
  {
    "text": "image push that new image to to the docker",
    "start": "2035399",
    "end": "2040279"
  },
  {
    "text": "registry take just a minute or two",
    "start": "2041440",
    "end": "2046200"
  },
  {
    "text": "all right and then we'll deploy this new",
    "start": "2072359",
    "end": "2075919"
  },
  {
    "text": "image cool and now it's deployed let's take a look at what we're",
    "start": "2084760",
    "end": "2090560"
  },
  {
    "text": "running uh let's see I'm just going to go ahe and kill this",
    "start": "2091919",
    "end": "2097440"
  },
  {
    "text": "I might need to scale out this cluster it looks like this one didn't start up yet so this will just take a minute or",
    "start": "2102880",
    "end": "2108680"
  },
  {
    "text": "two for the new release to get deployed in the meantime I can go ahe and show you one of the cool things with EMP run",
    "start": "2108680",
    "end": "2114880"
  },
  {
    "text": "is you can actually uh do something like curl our internal API so one of the",
    "start": "2114880",
    "end": "2120359"
  },
  {
    "text": "annoyances if you're running an internal Services is that they're they're hard to debug uh but it makes it really easy",
    "start": "2120359",
    "end": "2125960"
  },
  {
    "text": "having something like emun to you basically get access into the VPC so we",
    "start": "2125960",
    "end": "2131920"
  },
  {
    "text": "can from the router application we can just curl our internal",
    "start": "2131920",
    "end": "2137680"
  },
  {
    "text": "API and we can see that we don't have any to-dos right now let's see if our web processes have",
    "start": "2141599",
    "end": "2149200"
  },
  {
    "text": "started up for web not yet",
    "start": "2149200",
    "end": "2156079"
  },
  {
    "text": "okay there we go so now we're running the new release of web we can open the",
    "start": "2187240",
    "end": "2192880"
  },
  {
    "text": "router application again oh open router",
    "start": "2192880",
    "end": "2202119"
  },
  {
    "text": "elb all right and we can see that we're running the new version so that concludes the demo you",
    "start": "2203880",
    "end": "2210880"
  },
  {
    "start": "2210000",
    "end": "2238000"
  },
  {
    "text": "can reach out to me um my GitHub again is EJ homes uh Twitter is",
    "start": "2210880",
    "end": "2215960"
  },
  {
    "text": "vesin and uh again the Empire repo is REM one/ Empire and the demo is EJ home/ ire demo",
    "start": "2215960",
    "end": "2225319"
  },
  {
    "text": "and we talked about toctor apps a little bit so if you want to get more familiarized with toctor it's toctor",
    "start": "2225319",
    "end": "2232190"
  },
  {
    "text": "[Music]",
    "start": "2232190",
    "end": "2235280"
  }
]