[
  {
    "text": "[Music]",
    "start": "0",
    "end": "2000"
  },
  {
    "text": "hello and thank you for watching this",
    "start": "2000",
    "end": "3600"
  },
  {
    "text": "video",
    "start": "3600",
    "end": "4160"
  },
  {
    "text": "on how to use amazon simple queue",
    "start": "4160",
    "end": "6399"
  },
  {
    "text": "service with a.net framework",
    "start": "6399",
    "end": "8720"
  },
  {
    "text": "i'm tez hussein a solutions architect",
    "start": "8720",
    "end": "11040"
  },
  {
    "text": "here at amazon web services",
    "start": "11040",
    "end": "13519"
  },
  {
    "text": "amazon's simple queue service also known",
    "start": "13519",
    "end": "15839"
  },
  {
    "text": "as sqs",
    "start": "15839",
    "end": "17199"
  },
  {
    "text": "is a fully managed message carrying",
    "start": "17199",
    "end": "19119"
  },
  {
    "text": "service that enables you to decouple",
    "start": "19119",
    "end": "21279"
  },
  {
    "text": "and scale microservices distributed",
    "start": "21279",
    "end": "23680"
  },
  {
    "text": "systems",
    "start": "23680",
    "end": "24560"
  },
  {
    "text": "and serverless applications sqs works in",
    "start": "24560",
    "end": "27920"
  },
  {
    "text": "the principle that applications known as",
    "start": "27920",
    "end": "30240"
  },
  {
    "text": "producers",
    "start": "30240",
    "end": "31199"
  },
  {
    "text": "send messages to sqsqs hosted on aws",
    "start": "31199",
    "end": "35680"
  },
  {
    "text": "these messages are then persisted on",
    "start": "35680",
    "end": "37840"
  },
  {
    "text": "queues and processed by applications",
    "start": "37840",
    "end": "39840"
  },
  {
    "text": "known as consumers",
    "start": "39840",
    "end": "41280"
  },
  {
    "text": "which may carry out logic such as",
    "start": "41280",
    "end": "43280"
  },
  {
    "text": "loading messages",
    "start": "43280",
    "end": "44320"
  },
  {
    "text": "onto a database or an erp",
    "start": "44320",
    "end": "47920"
  },
  {
    "text": "sqs has some great features to aid",
    "start": "47920",
    "end": "49840"
  },
  {
    "text": "developers such as",
    "start": "49840",
    "end": "51440"
  },
  {
    "text": "first and first out matches to delivery",
    "start": "51440",
    "end": "54800"
  },
  {
    "text": "at least once message processing",
    "start": "54800",
    "end": "57440"
  },
  {
    "text": "encryption",
    "start": "57440",
    "end": "58079"
  },
  {
    "text": "of messages in transit and at rest",
    "start": "58079",
    "end": "60960"
  },
  {
    "text": "redundant infrastructure",
    "start": "60960",
    "end": "62399"
  },
  {
    "text": "providing highly concurrent access to",
    "start": "62399",
    "end": "64400"
  },
  {
    "text": "messages",
    "start": "64400",
    "end": "65600"
  },
  {
    "text": "and matching of message transmission and",
    "start": "65600",
    "end": "67840"
  },
  {
    "text": "deletion",
    "start": "67840",
    "end": "69920"
  },
  {
    "text": "getting started with and using sqs is",
    "start": "69920",
    "end": "72400"
  },
  {
    "text": "easy as",
    "start": "72400",
    "end": "73280"
  },
  {
    "text": "all you will need is an aws account with",
    "start": "73280",
    "end": "75840"
  },
  {
    "text": "no complex networking",
    "start": "75840",
    "end": "77280"
  },
  {
    "text": "setup or long term contracts needed",
    "start": "77280",
    "end": "80560"
  },
  {
    "text": "it is a highly available reliable",
    "start": "80560",
    "end": "82720"
  },
  {
    "text": "scalable and fault tolerance service",
    "start": "82720",
    "end": "85119"
  },
  {
    "text": "as your queues are distributed across",
    "start": "85119",
    "end": "87040"
  },
  {
    "text": "multiple servers and availability zones",
    "start": "87040",
    "end": "90880"
  },
  {
    "text": "you pay per use whether you call it 10",
    "start": "90880",
    "end": "93119"
  },
  {
    "text": "times 100 times or 100 000 times",
    "start": "93119",
    "end": "96000"
  },
  {
    "text": "you never have to worry about the",
    "start": "96000",
    "end": "97520"
  },
  {
    "text": "back-end architecture as the server",
    "start": "97520",
    "end": "99520"
  },
  {
    "text": "scales elastically providing nearly",
    "start": "99520",
    "end": "101680"
  },
  {
    "text": "unlimited throughput",
    "start": "101680",
    "end": "104000"
  },
  {
    "text": "also aws does the undifferentiated heavy",
    "start": "104000",
    "end": "107360"
  },
  {
    "text": "lifting for you",
    "start": "107360",
    "end": "108640"
  },
  {
    "text": "meaning we provision and manage the",
    "start": "108640",
    "end": "110399"
  },
  {
    "text": "infrastructure allowing the user to",
    "start": "110399",
    "end": "112399"
  },
  {
    "text": "focus on your workloads",
    "start": "112399",
    "end": "114640"
  },
  {
    "text": "in modern cloud architecture",
    "start": "114640",
    "end": "116640"
  },
  {
    "text": "applications are decoupled into smaller",
    "start": "116640",
    "end": "119040"
  },
  {
    "text": "independent building blocks that are",
    "start": "119040",
    "end": "120880"
  },
  {
    "text": "easier to develop",
    "start": "120880",
    "end": "122079"
  },
  {
    "text": "deploy and maintain amazon sqs provides",
    "start": "122079",
    "end": "126320"
  },
  {
    "text": "communication",
    "start": "126320",
    "end": "127200"
  },
  {
    "text": "and coordination for these distributed",
    "start": "127200",
    "end": "129200"
  },
  {
    "text": "applications",
    "start": "129200",
    "end": "131039"
  },
  {
    "text": "sqrs can also significantly simplify",
    "start": "131039",
    "end": "133680"
  },
  {
    "text": "coding of decoupled applications",
    "start": "133680",
    "end": "135680"
  },
  {
    "text": "while improving performance reliability",
    "start": "135680",
    "end": "138080"
  },
  {
    "text": "and scalability",
    "start": "138080",
    "end": "139840"
  },
  {
    "text": "this is because sqrs queues allow us to",
    "start": "139840",
    "end": "142560"
  },
  {
    "text": "communicate asynchronously",
    "start": "142560",
    "end": "144800"
  },
  {
    "text": "which means that the endpoints that are",
    "start": "144800",
    "end": "146560"
  },
  {
    "text": "producing and consuming messages",
    "start": "146560",
    "end": "148400"
  },
  {
    "text": "interact with the queue and not each",
    "start": "148400",
    "end": "150160"
  },
  {
    "text": "other this means components within the",
    "start": "150160",
    "end": "153040"
  },
  {
    "text": "ecosystem",
    "start": "153040",
    "end": "153920"
  },
  {
    "text": "don't need to wait for another resulting",
    "start": "153920",
    "end": "156319"
  },
  {
    "text": "in optimized data flow",
    "start": "156319",
    "end": "159040"
  },
  {
    "text": "sqrs can also make your data persistent",
    "start": "159040",
    "end": "161920"
  },
  {
    "text": "for a time",
    "start": "161920",
    "end": "162720"
  },
  {
    "text": "and reduce areas that occur when",
    "start": "162720",
    "end": "164720"
  },
  {
    "text": "different parts of the system",
    "start": "164720",
    "end": "166080"
  },
  {
    "text": "go offline by separating different",
    "start": "166080",
    "end": "168800"
  },
  {
    "text": "components with message queues",
    "start": "168800",
    "end": "170400"
  },
  {
    "text": "you also create fault tolerance if one",
    "start": "170400",
    "end": "173360"
  },
  {
    "text": "part of the system",
    "start": "173360",
    "end": "174319"
  },
  {
    "text": "is ever unreachable the other can",
    "start": "174319",
    "end": "176720"
  },
  {
    "text": "continue to interact with the queue",
    "start": "176720",
    "end": "178800"
  },
  {
    "text": "the queue itself can also be mirrored",
    "start": "178800",
    "end": "180959"
  },
  {
    "text": "for even more availability",
    "start": "180959",
    "end": "183360"
  },
  {
    "text": "also sqs makes it possible to scale",
    "start": "183360",
    "end": "186159"
  },
  {
    "text": "precisely where you need to",
    "start": "186159",
    "end": "188080"
  },
  {
    "text": "when workloads peak multiple instances",
    "start": "188080",
    "end": "190720"
  },
  {
    "text": "of your application",
    "start": "190720",
    "end": "191760"
  },
  {
    "text": "can all add requests to the queue",
    "start": "191760",
    "end": "193760"
  },
  {
    "text": "without risk of collision",
    "start": "193760",
    "end": "196080"
  },
  {
    "text": "with that in mind this video will",
    "start": "196080",
    "end": "197920"
  },
  {
    "text": "demonstrate how easy it is to create an",
    "start": "197920",
    "end": "200159"
  },
  {
    "text": "application",
    "start": "200159",
    "end": "200879"
  },
  {
    "text": "which uses sqs by creating a queue",
    "start": "200879",
    "end": "204560"
  },
  {
    "text": "sending it messages and processing",
    "start": "204560",
    "end": "206799"
  },
  {
    "text": "messages once they are received by the",
    "start": "206799",
    "end": "208720"
  },
  {
    "text": "queue",
    "start": "208720",
    "end": "209760"
  },
  {
    "text": "let's switch over to visual studio and",
    "start": "209760",
    "end": "211680"
  },
  {
    "text": "walk through the code",
    "start": "211680",
    "end": "212879"
  },
  {
    "text": "so let's get started this is a simple",
    "start": "212879",
    "end": "216000"
  },
  {
    "text": "project i have created",
    "start": "216000",
    "end": "217440"
  },
  {
    "text": "to show how easy it is to get started",
    "start": "217440",
    "end": "219599"
  },
  {
    "text": "with amazon sqs",
    "start": "219599",
    "end": "222560"
  },
  {
    "text": "i have the aws toolkit installed in my",
    "start": "222560",
    "end": "225040"
  },
  {
    "text": "visual studio environment",
    "start": "225040",
    "end": "227040"
  },
  {
    "text": "this isn't required but it will make",
    "start": "227040",
    "end": "228879"
  },
  {
    "text": "your life a whole lot easier",
    "start": "228879",
    "end": "230720"
  },
  {
    "text": "as you start to interact with aws",
    "start": "230720",
    "end": "232959"
  },
  {
    "text": "services in the future",
    "start": "232959",
    "end": "235040"
  },
  {
    "text": "you can download this from the visual",
    "start": "235040",
    "end": "237040"
  },
  {
    "text": "studio extensions library",
    "start": "237040",
    "end": "239200"
  },
  {
    "text": "or directly from aws additionally",
    "start": "239200",
    "end": "242959"
  },
  {
    "text": "i have created an aws profile that's",
    "start": "242959",
    "end": "245760"
  },
  {
    "text": "linked to my aws account and my",
    "start": "245760",
    "end": "247840"
  },
  {
    "text": "permission set",
    "start": "247840",
    "end": "249599"
  },
  {
    "text": "this will allow my code to access",
    "start": "249599",
    "end": "251439"
  },
  {
    "text": "resources deployed within my aws",
    "start": "251439",
    "end": "253920"
  },
  {
    "text": "environment let's have a look at the new",
    "start": "253920",
    "end": "257519"
  },
  {
    "text": "get packages used in my solution",
    "start": "257519",
    "end": "261440"
  },
  {
    "text": "the great thing about aws is that all",
    "start": "262639",
    "end": "265280"
  },
  {
    "text": "the resources and services are managed",
    "start": "265280",
    "end": "267440"
  },
  {
    "text": "through apis",
    "start": "267440",
    "end": "268720"
  },
  {
    "text": "and the great thing about being a dotnet",
    "start": "268720",
    "end": "270479"
  },
  {
    "text": "developer using aws",
    "start": "270479",
    "end": "272560"
  },
  {
    "text": "is that aws creates new get packages for",
    "start": "272560",
    "end": "275120"
  },
  {
    "text": "all the different services and resources",
    "start": "275120",
    "end": "277040"
  },
  {
    "text": "available",
    "start": "277040",
    "end": "278000"
  },
  {
    "text": "making it very easy to consume them you",
    "start": "278000",
    "end": "280880"
  },
  {
    "text": "can see",
    "start": "280880",
    "end": "281360"
  },
  {
    "text": "in this solution we are using the",
    "start": "281360",
    "end": "282960"
  },
  {
    "text": "following nuget packages",
    "start": "282960",
    "end": "286319"
  },
  {
    "text": "aws sdk.sqs for interacting with the sqs",
    "start": "286800",
    "end": "291360"
  },
  {
    "text": "apis",
    "start": "291360",
    "end": "293639"
  },
  {
    "text": "newtonsof.json for serializing and",
    "start": "293639",
    "end": "296000"
  },
  {
    "text": "deserializing objects being transmitted",
    "start": "296000",
    "end": "298400"
  },
  {
    "text": "and received by our queue",
    "start": "298400",
    "end": "301039"
  },
  {
    "text": "now let's talk through the flow of code",
    "start": "301039",
    "end": "302880"
  },
  {
    "text": "and how this application works",
    "start": "302880",
    "end": "305120"
  },
  {
    "text": "the code displayed is a console",
    "start": "305120",
    "end": "307039"
  },
  {
    "text": "application written in c-sharp",
    "start": "307039",
    "end": "308880"
  },
  {
    "text": "using the.net core framework it creates",
    "start": "308880",
    "end": "311759"
  },
  {
    "text": "an sqs messaging queue",
    "start": "311759",
    "end": "313759"
  },
  {
    "text": "sends messages to it reads items from",
    "start": "313759",
    "end": "316400"
  },
  {
    "text": "the queue and outputs it to the console",
    "start": "316400",
    "end": "318320"
  },
  {
    "text": "window",
    "start": "318320",
    "end": "319680"
  },
  {
    "text": "this application has two classes",
    "start": "319680",
    "end": "323199"
  },
  {
    "text": "the program.cs class which executes the",
    "start": "323199",
    "end": "325840"
  },
  {
    "text": "logic for this demo",
    "start": "325840",
    "end": "327360"
  },
  {
    "text": "and a demo message model class which is",
    "start": "327360",
    "end": "330240"
  },
  {
    "text": "a custom object i have created",
    "start": "330240",
    "end": "332160"
  },
  {
    "text": "that will be serialized and sent to sqs",
    "start": "332160",
    "end": "334960"
  },
  {
    "text": "as a message",
    "start": "334960",
    "end": "336880"
  },
  {
    "text": "you can replace the demo message",
    "start": "336880",
    "end": "338320"
  },
  {
    "text": "model.cs class in your project with an",
    "start": "338320",
    "end": "340800"
  },
  {
    "text": "object model of your choice",
    "start": "340800",
    "end": "343120"
  },
  {
    "text": "cool let's go back to the program.cs",
    "start": "343120",
    "end": "346000"
  },
  {
    "text": "class and walk through the code",
    "start": "346000",
    "end": "348400"
  },
  {
    "text": "within the program.cs class the main",
    "start": "348400",
    "end": "350960"
  },
  {
    "text": "method orchestrates the flow of this",
    "start": "350960",
    "end": "352639"
  },
  {
    "text": "application with the following steps",
    "start": "352639",
    "end": "355840"
  },
  {
    "text": "first it creates a list of messages to",
    "start": "355840",
    "end": "357919"
  },
  {
    "text": "send to our queue",
    "start": "357919",
    "end": "359360"
  },
  {
    "text": "for the purposes of this demo this was",
    "start": "359360",
    "end": "361440"
  },
  {
    "text": "done by invoking the create messages",
    "start": "361440",
    "end": "364840"
  },
  {
    "text": "method",
    "start": "364840",
    "end": "366880"
  },
  {
    "text": "the create messages method simply loops",
    "start": "366880",
    "end": "369360"
  },
  {
    "text": "100 times",
    "start": "369360",
    "end": "370639"
  },
  {
    "text": "populates a list of 100 demo message",
    "start": "370639",
    "end": "373199"
  },
  {
    "text": "models",
    "start": "373199",
    "end": "374080"
  },
  {
    "text": "assigning each demo message model and id",
    "start": "374080",
    "end": "376880"
  },
  {
    "text": "based on the loop counter",
    "start": "376880",
    "end": "379199"
  },
  {
    "text": "once the loop is finished this list is",
    "start": "379199",
    "end": "381600"
  },
  {
    "text": "returned",
    "start": "381600",
    "end": "382240"
  },
  {
    "text": "and the value is used in our main method",
    "start": "382240",
    "end": "386319"
  },
  {
    "text": "once the messages to transmit are",
    "start": "386960",
    "end": "388880"
  },
  {
    "text": "created we then need to create an sqsq",
    "start": "388880",
    "end": "392160"
  },
  {
    "text": "in the aws",
    "start": "392160",
    "end": "393280"
  },
  {
    "text": "ap south east 2 region also known as",
    "start": "393280",
    "end": "396080"
  },
  {
    "text": "sydney",
    "start": "396080",
    "end": "397039"
  },
  {
    "text": "to do this we first create a new",
    "start": "397039",
    "end": "399120"
  },
  {
    "text": "instance of the amazon sqs client",
    "start": "399120",
    "end": "401919"
  },
  {
    "text": "passing in the region endpoint value of",
    "start": "401919",
    "end": "404479"
  },
  {
    "text": "ap",
    "start": "404479",
    "end": "405039"
  },
  {
    "text": "south east 2. then we invoke the createq",
    "start": "405039",
    "end": "409520"
  },
  {
    "text": "method",
    "start": "409520",
    "end": "410400"
  },
  {
    "text": "passing in three parameters the sqs",
    "start": "410400",
    "end": "413120"
  },
  {
    "text": "client object we just created",
    "start": "413120",
    "end": "415039"
  },
  {
    "text": "a name for our queue and a visibility",
    "start": "415039",
    "end": "417759"
  },
  {
    "text": "timeout setting",
    "start": "417759",
    "end": "418720"
  },
  {
    "text": "of 10 seconds the create queue method",
    "start": "418720",
    "end": "422240"
  },
  {
    "text": "then uses these parameters to create a",
    "start": "422240",
    "end": "424560"
  },
  {
    "text": "new queue in our aws account",
    "start": "424560",
    "end": "426800"
  },
  {
    "text": "inside of the sydney region this is done",
    "start": "426800",
    "end": "430080"
  },
  {
    "text": "by invoking aws apis",
    "start": "430080",
    "end": "432400"
  },
  {
    "text": "via the aws sdk.sqs new kid package",
    "start": "432400",
    "end": "436479"
  },
  {
    "text": "we had installed in this project let's",
    "start": "436479",
    "end": "439599"
  },
  {
    "text": "explore this method further",
    "start": "439599",
    "end": "440960"
  },
  {
    "text": "starting with the parameters passed in",
    "start": "440960",
    "end": "444720"
  },
  {
    "text": "the sqs client helps interactions with",
    "start": "447759",
    "end": "450160"
  },
  {
    "text": "aws services",
    "start": "450160",
    "end": "451520"
  },
  {
    "text": "by containing key configuration",
    "start": "451520",
    "end": "453280"
  },
  {
    "text": "information such as",
    "start": "453280",
    "end": "454880"
  },
  {
    "text": "the region we wish to interact with our",
    "start": "454880",
    "end": "457039"
  },
  {
    "text": "aws credentials",
    "start": "457039",
    "end": "458240"
  },
  {
    "text": "permissions and much more",
    "start": "458240",
    "end": "461440"
  },
  {
    "text": "the purpose of the queue name is pretty",
    "start": "461680",
    "end": "463440"
  },
  {
    "text": "straightforward this is what our new",
    "start": "463440",
    "end": "465680"
  },
  {
    "text": "queue",
    "start": "465680",
    "end": "466080"
  },
  {
    "text": "will be called once created",
    "start": "466080",
    "end": "469680"
  },
  {
    "text": "the visibility timeout is a period of",
    "start": "470080",
    "end": "472319"
  },
  {
    "text": "time measured in seconds",
    "start": "472319",
    "end": "474240"
  },
  {
    "text": "during which amazon sqs prevents other",
    "start": "474240",
    "end": "476879"
  },
  {
    "text": "consuming components",
    "start": "476879",
    "end": "478080"
  },
  {
    "text": "from receiving and processing a message",
    "start": "478080",
    "end": "480879"
  },
  {
    "text": "this is to help multiple consumers not",
    "start": "480879",
    "end": "483039"
  },
  {
    "text": "process the same message twice by",
    "start": "483039",
    "end": "484879"
  },
  {
    "text": "mistake",
    "start": "484879",
    "end": "486639"
  },
  {
    "text": "in this example our timeout is for 10",
    "start": "486639",
    "end": "489280"
  },
  {
    "text": "seconds",
    "start": "489280",
    "end": "490160"
  },
  {
    "text": "if unspecified the default visibility",
    "start": "490160",
    "end": "492720"
  },
  {
    "text": "timeout for sqs is 30 seconds",
    "start": "492720",
    "end": "496639"
  },
  {
    "text": "these parameters are used to create an",
    "start": "496879",
    "end": "498960"
  },
  {
    "text": "sqsq in the sydney aws region",
    "start": "498960",
    "end": "502080"
  },
  {
    "text": "if successful we will be returned a",
    "start": "502080",
    "end": "504800"
  },
  {
    "text": "create queue response object",
    "start": "504800",
    "end": "506879"
  },
  {
    "text": "containing a queue url this url",
    "start": "506879",
    "end": "510400"
  },
  {
    "text": "points to a new messaging queue and can",
    "start": "510400",
    "end": "512320"
  },
  {
    "text": "be used to send messages and read",
    "start": "512320",
    "end": "514159"
  },
  {
    "text": "messages from our new queue",
    "start": "514159",
    "end": "516399"
  },
  {
    "text": "if the createqueue method is successful",
    "start": "516399",
    "end": "519120"
  },
  {
    "text": "we will be returned a queue url",
    "start": "519120",
    "end": "522000"
  },
  {
    "text": "this url will be used by our application",
    "start": "522000",
    "end": "524480"
  },
  {
    "text": "when sending and receiving messages from",
    "start": "524480",
    "end": "526320"
  },
  {
    "text": "sqs",
    "start": "526320",
    "end": "527760"
  },
  {
    "text": "let's move on to sending messages to sqs",
    "start": "527760",
    "end": "531519"
  },
  {
    "text": "in the next step in our code we iterate",
    "start": "531519",
    "end": "533760"
  },
  {
    "text": "through the messages list",
    "start": "533760",
    "end": "535600"
  },
  {
    "text": "serialize messages to json and then",
    "start": "535600",
    "end": "538160"
  },
  {
    "text": "transmit them to sqs by invoking the",
    "start": "538160",
    "end": "540640"
  },
  {
    "text": "send message method",
    "start": "540640",
    "end": "543760"
  },
  {
    "text": "the send message method creates a send",
    "start": "546399",
    "end": "549120"
  },
  {
    "text": "message request",
    "start": "549120",
    "end": "550640"
  },
  {
    "text": "assigns a queue url and message body",
    "start": "550640",
    "end": "554240"
  },
  {
    "text": "in this case our serialized demo message",
    "start": "554240",
    "end": "556800"
  },
  {
    "text": "model",
    "start": "556800",
    "end": "557519"
  },
  {
    "text": "is the message body it then uses the sqs",
    "start": "557519",
    "end": "561440"
  },
  {
    "text": "client",
    "start": "561440",
    "end": "562080"
  },
  {
    "text": "to send messages to our demo sqsq",
    "start": "562080",
    "end": "565440"
  },
  {
    "text": "we had just created in sydney",
    "start": "565440",
    "end": "568560"
  },
  {
    "text": "this call returns a send message",
    "start": "568560",
    "end": "570880"
  },
  {
    "text": "response",
    "start": "570880",
    "end": "572240"
  },
  {
    "text": "which should hopefully contain a http ok",
    "start": "572240",
    "end": "575440"
  },
  {
    "text": "response",
    "start": "575440",
    "end": "576000"
  },
  {
    "text": "from sqs once our messages are sent",
    "start": "576000",
    "end": "580720"
  },
  {
    "text": "we will invoke the receive messages",
    "start": "580720",
    "end": "583120"
  },
  {
    "text": "method to read items from our queue",
    "start": "583120",
    "end": "585519"
  },
  {
    "text": "and display them in our console window",
    "start": "585519",
    "end": "588320"
  },
  {
    "text": "as we have done previously in our",
    "start": "588320",
    "end": "589920"
  },
  {
    "text": "application",
    "start": "589920",
    "end": "590880"
  },
  {
    "text": "we will need to supply this method with",
    "start": "590880",
    "end": "592800"
  },
  {
    "text": "a queue url",
    "start": "592800",
    "end": "593920"
  },
  {
    "text": "pointing to a specific queue and an sqs",
    "start": "593920",
    "end": "596800"
  },
  {
    "text": "client which will be used to invoke",
    "start": "596800",
    "end": "598800"
  },
  {
    "text": "actions against our queue",
    "start": "598800",
    "end": "605839"
  },
  {
    "text": "there are multiple ways to read from a",
    "start": "607440",
    "end": "609440"
  },
  {
    "text": "queue in this example",
    "start": "609440",
    "end": "611279"
  },
  {
    "text": "i have used a simplified method for",
    "start": "611279",
    "end": "613200"
  },
  {
    "text": "learning purposes",
    "start": "613200",
    "end": "619519"
  },
  {
    "text": "we first create a receive message",
    "start": "619519",
    "end": "621760"
  },
  {
    "text": "request",
    "start": "621760",
    "end": "622800"
  },
  {
    "text": "and then find the approximate number of",
    "start": "622800",
    "end": "624720"
  },
  {
    "text": "messages in the queue",
    "start": "624720",
    "end": "627440"
  },
  {
    "text": "this is done by inspecting the",
    "start": "627440",
    "end": "629120"
  },
  {
    "text": "attributes of our sqs",
    "start": "629120",
    "end": "630720"
  },
  {
    "text": "to find the value of the approximate",
    "start": "630720",
    "end": "632959"
  },
  {
    "text": "number of messages attribute",
    "start": "632959",
    "end": "635279"
  },
  {
    "text": "as demonstrated in this function",
    "start": "635279",
    "end": "638480"
  },
  {
    "text": "once the approximate number of messages",
    "start": "638480",
    "end": "640959"
  },
  {
    "text": "in our queue is returned",
    "start": "640959",
    "end": "642720"
  },
  {
    "text": "our application will loop through sqs",
    "start": "642720",
    "end": "646160"
  },
  {
    "text": "read messages one by one and write them",
    "start": "646160",
    "end": "648480"
  },
  {
    "text": "to the console screen",
    "start": "648480",
    "end": "651519"
  },
  {
    "text": "okay let's do a quick summary and then",
    "start": "652640",
    "end": "655040"
  },
  {
    "text": "run the application",
    "start": "655040",
    "end": "656959"
  },
  {
    "text": "so far we've covered off a couple of",
    "start": "656959",
    "end": "658640"
  },
  {
    "text": "things first",
    "start": "658640",
    "end": "660160"
  },
  {
    "text": "we create a list of messages to send to",
    "start": "660160",
    "end": "662160"
  },
  {
    "text": "sqs",
    "start": "662160",
    "end": "663760"
  },
  {
    "text": "then we create a new queue once the",
    "start": "663760",
    "end": "667040"
  },
  {
    "text": "queue is created",
    "start": "667040",
    "end": "668320"
  },
  {
    "text": "we loop through the messages and",
    "start": "668320",
    "end": "670160"
  },
  {
    "text": "transmit each message to our sqsq",
    "start": "670160",
    "end": "672720"
  },
  {
    "text": "created in sydney",
    "start": "672720",
    "end": "674800"
  },
  {
    "text": "those messages are then read by the",
    "start": "674800",
    "end": "676880"
  },
  {
    "text": "received message method",
    "start": "676880",
    "end": "678640"
  },
  {
    "text": "and the outputs are printed to the",
    "start": "678640",
    "end": "680399"
  },
  {
    "text": "console window",
    "start": "680399",
    "end": "682880"
  },
  {
    "text": "let's run this application now and see",
    "start": "682880",
    "end": "684959"
  },
  {
    "text": "what happens step by step",
    "start": "684959",
    "end": "687680"
  },
  {
    "text": "let's run the application and follow the",
    "start": "687680",
    "end": "689839"
  },
  {
    "text": "console outputs to see what's happening",
    "start": "689839",
    "end": "691680"
  },
  {
    "text": "with our sqs",
    "start": "691680",
    "end": "692880"
  },
  {
    "text": "and our application code",
    "start": "692880",
    "end": "696000"
  },
  {
    "text": "as we run the code we can see that our",
    "start": "697040",
    "end": "698959"
  },
  {
    "text": "application creates a queue",
    "start": "698959",
    "end": "700720"
  },
  {
    "text": "and we get a queue url back from our api",
    "start": "700720",
    "end": "703440"
  },
  {
    "text": "call",
    "start": "703440",
    "end": "703839"
  },
  {
    "text": "by the aws sdk",
    "start": "703839",
    "end": "707600"
  },
  {
    "text": "next our application sends our demo data",
    "start": "707920",
    "end": "710480"
  },
  {
    "text": "set to the queue",
    "start": "710480",
    "end": "711440"
  },
  {
    "text": "one by one and we receive a http",
    "start": "711440",
    "end": "714240"
  },
  {
    "text": "response code for each transmission",
    "start": "714240",
    "end": "717839"
  },
  {
    "text": "while this transmission is complete we",
    "start": "718959",
    "end": "721120"
  },
  {
    "text": "will start reading the messages from our",
    "start": "721120",
    "end": "722880"
  },
  {
    "text": "queue",
    "start": "722880",
    "end": "723440"
  },
  {
    "text": "one by one and output them to the",
    "start": "723440",
    "end": "725600"
  },
  {
    "text": "console screen",
    "start": "725600",
    "end": "728240"
  },
  {
    "text": "as each message from the queue is read",
    "start": "728240",
    "end": "730399"
  },
  {
    "text": "they will disappear for 10 seconds",
    "start": "730399",
    "end": "732320"
  },
  {
    "text": "from the sqsq so other consumers cannot",
    "start": "732320",
    "end": "735279"
  },
  {
    "text": "process the same message",
    "start": "735279",
    "end": "738480"
  },
  {
    "text": "you may notice that the order of",
    "start": "738480",
    "end": "739920"
  },
  {
    "text": "messages received back",
    "start": "739920",
    "end": "741519"
  },
  {
    "text": "may not be in the same order we",
    "start": "741519",
    "end": "743200"
  },
  {
    "text": "transmitted them in",
    "start": "743200",
    "end": "744720"
  },
  {
    "text": "this is because we didn't specify that",
    "start": "744720",
    "end": "746720"
  },
  {
    "text": "the queue we had created for this demo",
    "start": "746720",
    "end": "748959"
  },
  {
    "text": "needs to enforce first and first out",
    "start": "748959",
    "end": "752959"
  },
  {
    "text": "in some scenarios message ordering needs",
    "start": "752959",
    "end": "755279"
  },
  {
    "text": "to be respected",
    "start": "755279",
    "end": "756480"
  },
  {
    "text": "so keep fifo in mind when using sqs in",
    "start": "756480",
    "end": "759279"
  },
  {
    "text": "your use cases",
    "start": "759279",
    "end": "760880"
  },
  {
    "text": "you can find further information about",
    "start": "760880",
    "end": "762560"
  },
  {
    "text": "this on the aws developer documentation",
    "start": "762560",
    "end": "765519"
  },
  {
    "text": "for amazon simple queue services",
    "start": "765519",
    "end": "769040"
  },
  {
    "text": "now let's go and have a look at our aws",
    "start": "769040",
    "end": "771200"
  },
  {
    "text": "web console",
    "start": "771200",
    "end": "772399"
  },
  {
    "text": "and see what the queues look like",
    "start": "772399",
    "end": "775920"
  },
  {
    "text": "when logging into the aws management",
    "start": "776639",
    "end": "779040"
  },
  {
    "text": "console",
    "start": "779040",
    "end": "779920"
  },
  {
    "text": "you'll be presented with a standard",
    "start": "779920",
    "end": "781600"
  },
  {
    "text": "landing page",
    "start": "781600",
    "end": "783040"
  },
  {
    "text": "in this search bar you can type in sqs",
    "start": "783040",
    "end": "785839"
  },
  {
    "text": "to go to the amazon simple q servers",
    "start": "785839",
    "end": "788079"
  },
  {
    "text": "dashboard",
    "start": "788079",
    "end": "790000"
  },
  {
    "text": "this dashboard should show us all of the",
    "start": "790000",
    "end": "792560"
  },
  {
    "text": "sqsqs available to us",
    "start": "792560",
    "end": "794639"
  },
  {
    "text": "and as you can see our demo queue is",
    "start": "794639",
    "end": "796959"
  },
  {
    "text": "present",
    "start": "796959",
    "end": "798639"
  },
  {
    "text": "there are 100 messages within the queue",
    "start": "798639",
    "end": "800959"
  },
  {
    "text": "as our code did not delete anything",
    "start": "800959",
    "end": "803279"
  },
  {
    "text": "and so the message count has not reduced",
    "start": "803279",
    "end": "806160"
  },
  {
    "text": "cool",
    "start": "806160",
    "end": "806880"
  },
  {
    "text": "so as you can see we've run our code the",
    "start": "806880",
    "end": "809839"
  },
  {
    "text": "console application has created a new",
    "start": "809839",
    "end": "811760"
  },
  {
    "text": "queue",
    "start": "811760",
    "end": "812320"
  },
  {
    "text": "and populated it with a hundred messages",
    "start": "812320",
    "end": "814880"
  },
  {
    "text": "these messages were read but not deleted",
    "start": "814880",
    "end": "817680"
  },
  {
    "text": "and so after the application has",
    "start": "817680",
    "end": "819440"
  },
  {
    "text": "finished running the message visibility",
    "start": "819440",
    "end": "821760"
  },
  {
    "text": "timeout has expired after 10 seconds",
    "start": "821760",
    "end": "824240"
  },
  {
    "text": "and the messages are now available for",
    "start": "824240",
    "end": "826079"
  },
  {
    "text": "further processing if required",
    "start": "826079",
    "end": "828639"
  },
  {
    "text": "in some instances you may need to think",
    "start": "828639",
    "end": "830720"
  },
  {
    "text": "about how to delete or expire messages",
    "start": "830720",
    "end": "832880"
  },
  {
    "text": "within your queue",
    "start": "832880",
    "end": "834079"
  },
  {
    "text": "so think about what kind of business",
    "start": "834079",
    "end": "835600"
  },
  {
    "text": "logic you need to implement in your",
    "start": "835600",
    "end": "837199"
  },
  {
    "text": "application",
    "start": "837199",
    "end": "838320"
  },
  {
    "text": "to ensure that messages are either only",
    "start": "838320",
    "end": "840480"
  },
  {
    "text": "processed once",
    "start": "840480",
    "end": "841680"
  },
  {
    "text": "or are available for multiple consumers",
    "start": "841680",
    "end": "843680"
  },
  {
    "text": "to process",
    "start": "843680",
    "end": "844720"
  },
  {
    "text": "as part of a business workflow so let's",
    "start": "844720",
    "end": "847600"
  },
  {
    "text": "recap",
    "start": "847600",
    "end": "848720"
  },
  {
    "text": "in today's example we showed you how to",
    "start": "848720",
    "end": "851120"
  },
  {
    "text": "create a queue",
    "start": "851120",
    "end": "852399"
  },
  {
    "text": "send messages to it and then read",
    "start": "852399",
    "end": "854959"
  },
  {
    "text": "messages from the same queue once",
    "start": "854959",
    "end": "856800"
  },
  {
    "text": "transmission is complete",
    "start": "856800",
    "end": "859040"
  },
  {
    "text": "this was done using visual studio",
    "start": "859040",
    "end": "861839"
  },
  {
    "text": "c-sharp",
    "start": "861839",
    "end": "862480"
  },
  {
    "text": "and the.net core framework we also used",
    "start": "862480",
    "end": "866480"
  },
  {
    "text": "the aws sqs sdk which allowed us to",
    "start": "866480",
    "end": "870320"
  },
  {
    "text": "quickly and easily work with aws apis",
    "start": "870320",
    "end": "873519"
  },
  {
    "text": "to carry out the aforementioned steps",
    "start": "873519",
    "end": "876720"
  },
  {
    "text": "as you can see using sqs with c-sharp",
    "start": "876720",
    "end": "879839"
  },
  {
    "text": "is very easy and aws has several new",
    "start": "879839",
    "end": "882800"
  },
  {
    "text": "gear packages to assist with using aws",
    "start": "882800",
    "end": "885199"
  },
  {
    "text": "services",
    "start": "885199",
    "end": "885920"
  },
  {
    "text": "in your.net project i hope you enjoy",
    "start": "885920",
    "end": "889760"
  },
  {
    "text": "this video",
    "start": "889760",
    "end": "890800"
  },
  {
    "text": "and thank you very much for watching if",
    "start": "890800",
    "end": "892800"
  },
  {
    "text": "you have any questions",
    "start": "892800",
    "end": "894000"
  },
  {
    "text": "please reach out to the aws team via the",
    "start": "894000",
    "end": "897320"
  },
  {
    "text": "aws.com website",
    "start": "897320",
    "end": "906480"
  }
]