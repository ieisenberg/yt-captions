[
  {
    "text": "- Hi, my name is Dave Shimko,",
    "start": "60",
    "end": "1859"
  },
  {
    "text": "and I'm a solutions architect\nhere at Amazon Web Services.",
    "start": "1860",
    "end": "5700"
  },
  {
    "text": "In this video, we'll cover\nAmazon DocumentDB integration",
    "start": "5700",
    "end": "9030"
  },
  {
    "text": "with Tableau Desktop.",
    "start": "9030",
    "end": "10769"
  },
  {
    "text": "But first, I'll hand it over",
    "start": "10770",
    "end": "11910"
  },
  {
    "text": "to my colleague, Sourav, to start us off.",
    "start": "11910",
    "end": "13983"
  },
  {
    "text": "- Thanks, Dave. My name is Sourav Biswas.",
    "start": "14880",
    "end": "18360"
  },
  {
    "text": "I'm a specialist solutions architect",
    "start": "18360",
    "end": "19770"
  },
  {
    "text": "here at Amazon Web Services,",
    "start": "19770",
    "end": "21684"
  },
  {
    "text": "and I work with the\nAmazon DocumentDB service.",
    "start": "21684",
    "end": "24993"
  },
  {
    "text": "In today's session, we are going",
    "start": "26844",
    "end": "28950"
  },
  {
    "text": "to give you a brief overview\nof DocumentDB as a service",
    "start": "28950",
    "end": "31800"
  },
  {
    "text": "and its value proposition.",
    "start": "31800",
    "end": "33557"
  },
  {
    "text": "This will be followed by a session",
    "start": "33557",
    "end": "35304"
  },
  {
    "text": "where Dave will be taking\nyou through the process",
    "start": "35304",
    "end": "38210"
  },
  {
    "text": "of integrating Tableau Desktop",
    "start": "38210",
    "end": "40680"
  },
  {
    "text": "with Amazon DocumentDB\nusing the JDBC driver.",
    "start": "40680",
    "end": "43890"
  },
  {
    "text": "We'll also give you a brief demo",
    "start": "43890",
    "end": "45995"
  },
  {
    "text": "of the process just currently described.",
    "start": "45995",
    "end": "48543"
  },
  {
    "text": "Coming to Amazon DocumentDB,",
    "start": "51390",
    "end": "52919"
  },
  {
    "text": "it is a fully managed, highly\nscalable document data store",
    "start": "52919",
    "end": "57675"
  },
  {
    "text": "that is compatible with MongoDB APIs.",
    "start": "57675",
    "end": "62040"
  },
  {
    "text": "Now, let's break that down.",
    "start": "62040",
    "end": "63393"
  },
  {
    "text": "Unlike traditional on-prem software",
    "start": "64620",
    "end": "67710"
  },
  {
    "text": "management and operations, this\nservice comes fully managed.",
    "start": "67710",
    "end": "72710"
  },
  {
    "text": "That is, the hardware and the software",
    "start": "74400",
    "end": "77070"
  },
  {
    "text": "and the patching are done by AWS for you.",
    "start": "77070",
    "end": "80313"
  },
  {
    "text": "When we discuss the\narchitecture in the next slide,",
    "start": "82200",
    "end": "84390"
  },
  {
    "text": "we are going to discuss\nmore about the scalability,",
    "start": "84390",
    "end": "86542"
  },
  {
    "text": "but just so that you know,",
    "start": "86542",
    "end": "88200"
  },
  {
    "text": "we are highly scalable both in the compute",
    "start": "88200",
    "end": "91979"
  },
  {
    "text": "and the storage layer,",
    "start": "91980",
    "end": "93360"
  },
  {
    "text": "and we can achieve that in\na very short amount of time",
    "start": "93360",
    "end": "97050"
  },
  {
    "text": "because of the architecture of separation",
    "start": "97050",
    "end": "99930"
  },
  {
    "text": "of compute and storage.",
    "start": "99930",
    "end": "101670"
  },
  {
    "text": "And finally, we are\nMongoDB API compatible.",
    "start": "101670",
    "end": "104340"
  },
  {
    "text": "That means if you have applications",
    "start": "104340",
    "end": "106352"
  },
  {
    "text": "that use MongoDB tools and drivers,",
    "start": "106352",
    "end": "109229"
  },
  {
    "text": "you can migrate them easily\nover to Amazon DocumentDB.",
    "start": "109230",
    "end": "112680"
  },
  {
    "text": "Having said that, there\nmight be some operators",
    "start": "112680",
    "end": "115027"
  },
  {
    "text": "that not yet supported by DocumentDB.",
    "start": "115027",
    "end": "118143"
  },
  {
    "text": "And in those cases,",
    "start": "118143",
    "end": "120119"
  },
  {
    "text": "we are constantly getting\nfeedback from our customers",
    "start": "120120",
    "end": "122340"
  },
  {
    "text": "on the operators they use in the field.",
    "start": "122340",
    "end": "124560"
  },
  {
    "text": "And based on that, we are\nconstantly adding new features",
    "start": "124560",
    "end": "127710"
  },
  {
    "text": "to our service as well.",
    "start": "127710",
    "end": "128940"
  },
  {
    "text": "So do get in touch with\nus if you do not find",
    "start": "128940",
    "end": "132240"
  },
  {
    "text": "the operator you're\nlooking for in DocumentDB.",
    "start": "132240",
    "end": "134583"
  },
  {
    "text": "Coming to the architecture\nof Amazon DocumentDB,",
    "start": "136140",
    "end": "139117"
  },
  {
    "text": "one thing to keep in mind is we built",
    "start": "139117",
    "end": "141570"
  },
  {
    "text": "a brand new service in 2019.",
    "start": "141570",
    "end": "144870"
  },
  {
    "text": "And the philosophy behind",
    "start": "144870",
    "end": "146220"
  },
  {
    "text": "that was when we create\na cloud-native database,",
    "start": "146220",
    "end": "149130"
  },
  {
    "text": "it should not inherit the challenges",
    "start": "149130",
    "end": "151440"
  },
  {
    "text": "of a monolithic architecture.",
    "start": "151440",
    "end": "153750"
  },
  {
    "text": "Now in monolithic architectures,",
    "start": "153750",
    "end": "155460"
  },
  {
    "text": "whenever you have to scale your compute,",
    "start": "155460",
    "end": "157770"
  },
  {
    "text": "that is your CPU or your\nmemory or your storage,",
    "start": "157770",
    "end": "161190"
  },
  {
    "text": "it will typically involve\na lot of operations,",
    "start": "161190",
    "end": "164190"
  },
  {
    "text": "whereas you have to copy\nthe whole stack over",
    "start": "164190",
    "end": "166890"
  },
  {
    "text": "in order to scale up.",
    "start": "166890",
    "end": "168153"
  },
  {
    "text": "With DocumentDB, we have a decoupling",
    "start": "169740",
    "end": "172620"
  },
  {
    "text": "of storage and compute.",
    "start": "172620",
    "end": "174139"
  },
  {
    "text": "The compute layer where there\nare one or more instances,",
    "start": "174139",
    "end": "177650"
  },
  {
    "text": "and the instances primarily\nhave CPU and compute memory.",
    "start": "177650",
    "end": "182650"
  },
  {
    "text": "And then they interact\nwith the storage layer,",
    "start": "183240",
    "end": "185179"
  },
  {
    "text": "which is a self-hailing,",
    "start": "185179",
    "end": "187770"
  },
  {
    "text": "distributed storage volume",
    "start": "187770",
    "end": "189540"
  },
  {
    "text": "where each copy of data that you write",
    "start": "189540",
    "end": "192120"
  },
  {
    "text": "gets distributed into\nthree availability zones.",
    "start": "192120",
    "end": "195239"
  },
  {
    "text": "And in each availability zone,",
    "start": "195240",
    "end": "196500"
  },
  {
    "text": "we again copy the data twice.",
    "start": "196500",
    "end": "198480"
  },
  {
    "text": "So six total copies across",
    "start": "198480",
    "end": "200190"
  },
  {
    "text": "three availability zones, highly durable.",
    "start": "200190",
    "end": "203220"
  },
  {
    "text": "The compute layer, on the other hand,",
    "start": "203220",
    "end": "204810"
  },
  {
    "text": "takes care of compute-intensive tasks,",
    "start": "204810",
    "end": "207030"
  },
  {
    "text": "like it'll take care of query processing,",
    "start": "207030",
    "end": "209430"
  },
  {
    "text": "it will take care of caching, et cetera,",
    "start": "209430",
    "end": "212549"
  },
  {
    "text": "and it interacts with the storage\nlayer as in when required.",
    "start": "212550",
    "end": "215640"
  },
  {
    "text": "One thing to note here\nalso is that the backups",
    "start": "215640",
    "end": "218700"
  },
  {
    "text": "that we have at DocumentDB does not impact",
    "start": "218700",
    "end": "221760"
  },
  {
    "text": "any computer resources.",
    "start": "221760",
    "end": "223500"
  },
  {
    "text": "That's a great gain for\nespecially high-storage systems",
    "start": "223500",
    "end": "227640"
  },
  {
    "text": "and where you have to\ntake frequent backups.",
    "start": "227640",
    "end": "229770"
  },
  {
    "text": "You do not have to size it\nfor your backup requirements,",
    "start": "229770",
    "end": "233460"
  },
  {
    "text": "you have to only reset the\nretention period of your backups.",
    "start": "233460",
    "end": "237060"
  },
  {
    "text": "Keep in mind, you can\nalso take manual snapshots",
    "start": "237060",
    "end": "239640"
  },
  {
    "text": "if that is the requirement.",
    "start": "239640",
    "end": "241578"
  },
  {
    "text": "Hopefully that will give\nyou a decent overview",
    "start": "241578",
    "end": "244500"
  },
  {
    "text": "of what Amazon DocumentDB is.",
    "start": "244500",
    "end": "246900"
  },
  {
    "text": "Now I'll hand it over to Dave to carry on",
    "start": "246900",
    "end": "249360"
  },
  {
    "text": "with the rest of the presentation.",
    "start": "249360",
    "end": "250939"
  },
  {
    "text": "Thank you, Dave.",
    "start": "250939",
    "end": "252000"
  },
  {
    "text": "Over to you.",
    "start": "252000",
    "end": "252833"
  },
  {
    "text": "- Thanks, Sourav.",
    "start": "254910",
    "end": "256109"
  },
  {
    "text": "The key tool to help\nus integrate DocumentDB",
    "start": "256110",
    "end": "258388"
  },
  {
    "text": "and business intelligence\ntools like Tableau Desktop",
    "start": "258388",
    "end": "260876"
  },
  {
    "text": "is the Amazon DocumentDB JDBC driver.",
    "start": "260876",
    "end": "264423"
  },
  {
    "text": "SQL is a standard for data and analytics",
    "start": "265650",
    "end": "267505"
  },
  {
    "text": "and one of the most popular languages",
    "start": "267505",
    "end": "269191"
  },
  {
    "text": "among data engineers and data analysts.",
    "start": "269191",
    "end": "272220"
  },
  {
    "text": "The JDBC driver provides a SQL interface",
    "start": "272220",
    "end": "274650"
  },
  {
    "text": "that allows SQL-based tools",
    "start": "274650",
    "end": "275985"
  },
  {
    "text": "to easily access JSON\ndata stored in DocumentDB.",
    "start": "275985",
    "end": "279452"
  },
  {
    "text": "With this driver, you\ncan visualize JSON data",
    "start": "280440",
    "end": "282900"
  },
  {
    "text": "with business intelligence tools",
    "start": "282900",
    "end": "284344"
  },
  {
    "text": "and run SQL queries on JSON data",
    "start": "284344",
    "end": "286637"
  },
  {
    "text": "with developer tools like DbVisualizer.",
    "start": "286637",
    "end": "289353"
  },
  {
    "text": "To connect to DocumentDB\nfrom Tableau Desktop,",
    "start": "290610",
    "end": "293009"
  },
  {
    "text": "you must download and install\nthe DocumentDB JDBC driver",
    "start": "293010",
    "end": "296558"
  },
  {
    "text": "and the DocumentDB Tableau connector.",
    "start": "296558",
    "end": "299850"
  },
  {
    "text": "And you can see an example",
    "start": "299850",
    "end": "300930"
  },
  {
    "text": "of both files listed in the asset section",
    "start": "300930",
    "end": "302883"
  },
  {
    "text": "of the version 1.4.5 release shown here.",
    "start": "302883",
    "end": "306813"
  },
  {
    "text": "Download both of those files",
    "start": "309720",
    "end": "311160"
  },
  {
    "text": "and copy them to these directories.",
    "start": "311160",
    "end": "313380"
  },
  {
    "text": "Once that is complete, you'll be able",
    "start": "313380",
    "end": "315060"
  },
  {
    "text": "to see the Amazon DocumentDB",
    "start": "315060",
    "end": "316980"
  },
  {
    "text": "is now available as one of\nthe installed connectors.",
    "start": "316980",
    "end": "319743"
  },
  {
    "text": "And here's an example of what",
    "start": "323070",
    "end": "324420"
  },
  {
    "text": "the JDBC driver configuration looks like.",
    "start": "324420",
    "end": "327690"
  },
  {
    "text": "The General tab contains the\nmain connectivity information",
    "start": "327690",
    "end": "330450"
  },
  {
    "text": "to connect to the cluster.",
    "start": "330450",
    "end": "332490"
  },
  {
    "text": "And under the Advanced tab,",
    "start": "332490",
    "end": "333750"
  },
  {
    "text": "there are some additional options.",
    "start": "333750",
    "end": "336210"
  },
  {
    "text": "Probably the most important setting",
    "start": "336210",
    "end": "337620"
  },
  {
    "text": "to call out here is the Scan Method.",
    "start": "337620",
    "end": "339870"
  },
  {
    "text": "As mentioned before, SQL\nis a standard for many data",
    "start": "339870",
    "end": "342870"
  },
  {
    "text": "and analytics tools like Tableau,",
    "start": "342870",
    "end": "344499"
  },
  {
    "text": "but we need a way to translate\nthe schemaless JSON structure",
    "start": "344499",
    "end": "348270"
  },
  {
    "text": "in DocumentDB to a SQL table structure",
    "start": "348270",
    "end": "350910"
  },
  {
    "text": "that can be used by Tableau.",
    "start": "350910",
    "end": "352443"
  },
  {
    "text": "The JDBC driver performs\nautomatic schema discovery,",
    "start": "353670",
    "end": "356850"
  },
  {
    "text": "mapping collections to tables,",
    "start": "356850",
    "end": "358172"
  },
  {
    "text": "documents to rows, and fields to columns.",
    "start": "358172",
    "end": "361473"
  },
  {
    "text": "Another setting to mention\nunder the Advanced tab",
    "start": "362760",
    "end": "365070"
  },
  {
    "text": "is enabling the SSH tunnel.",
    "start": "365070",
    "end": "366783"
  },
  {
    "text": "DocumentDB is a BPC-only service.",
    "start": "367860",
    "end": "370800"
  },
  {
    "text": "These clusters can be accessed\ndirectly by EC2 instances",
    "start": "370800",
    "end": "374039"
  },
  {
    "text": "or other AWS services that\nare deployed in the same VPC.",
    "start": "374040",
    "end": "377463"
  },
  {
    "text": "But if you need to access\nyour DocumentDB cluster",
    "start": "378600",
    "end": "380670"
  },
  {
    "text": "from your local machine",
    "start": "380670",
    "end": "381739"
  },
  {
    "text": "and you don't have network\nconnectivity set up",
    "start": "381739",
    "end": "384060"
  },
  {
    "text": "through A VPN or direct connect,",
    "start": "384060",
    "end": "386400"
  },
  {
    "text": "then you'll need to create an\nSSH tunnel to an EC2 instance.",
    "start": "386400",
    "end": "389703"
  },
  {
    "text": "But for our purposes today,\nwe'll keep to a simpler scenario",
    "start": "391230",
    "end": "394500"
  },
  {
    "text": "with Tableau desktop\ninstalled in an EC2 instance",
    "start": "394500",
    "end": "397080"
  },
  {
    "text": "in the same VPC as our DocumentDB cluster.",
    "start": "397080",
    "end": "400082"
  },
  {
    "text": "Now let's move on to the demo.",
    "start": "400920",
    "end": "402420"
  },
  {
    "text": "To start us off, I've already\ncreated the EC2 instance",
    "start": "405030",
    "end": "407201"
  },
  {
    "text": "and installed Tableau Desktop.",
    "start": "407201",
    "end": "409860"
  },
  {
    "text": "I've also added the JDBC driver.",
    "start": "409860",
    "end": "412050"
  },
  {
    "text": "And you can see the\nDocumentDB is available",
    "start": "412050",
    "end": "414360"
  },
  {
    "text": "as an additional connector.",
    "start": "414360",
    "end": "415710"
  },
  {
    "text": "Under the General tab,",
    "start": "417930",
    "end": "419070"
  },
  {
    "text": "we've got the main\nconnectivity information.",
    "start": "419070",
    "end": "422190"
  },
  {
    "text": "I'll go ahead and add the password.",
    "start": "422190",
    "end": "424740"
  },
  {
    "text": "And under the Advanced tab,",
    "start": "424740",
    "end": "425720"
  },
  {
    "text": "we can focus in on the Scan\nMethod and the Scan Limit.",
    "start": "425720",
    "end": "429243"
  },
  {
    "text": "With the default settings,",
    "start": "430080",
    "end": "431310"
  },
  {
    "text": "the driver is gonna randomly\nselect 1,000 documents",
    "start": "431310",
    "end": "433919"
  },
  {
    "text": "within the collection\nto determine the schema.",
    "start": "433920",
    "end": "437100"
  },
  {
    "text": "But under the Scan Method,",
    "start": "437100",
    "end": "438360"
  },
  {
    "text": "there's a couple of\nadditional options available.",
    "start": "438360",
    "end": "440559"
  },
  {
    "text": "The driver could sample the documents",
    "start": "440559",
    "end": "443250"
  },
  {
    "text": "by ID both in the forward\nand the reverse direction",
    "start": "443250",
    "end": "447000"
  },
  {
    "text": "or could sample all of the documents",
    "start": "447000",
    "end": "448830"
  },
  {
    "text": "to determine that schema.",
    "start": "448830",
    "end": "450080"
  },
  {
    "text": "Our collection is small,\nthere's only 12 items,",
    "start": "451350",
    "end": "453540"
  },
  {
    "text": "so the defaults will work.",
    "start": "453540",
    "end": "454983"
  },
  {
    "text": "Now let's take a look at the schema",
    "start": "458385",
    "end": "459750"
  },
  {
    "text": "that gets generated by the driver.",
    "start": "459750",
    "end": "462600"
  },
  {
    "text": "And here's our demo database.",
    "start": "462600",
    "end": "465150"
  },
  {
    "text": "And we've got one\ncollection in the database",
    "start": "465150",
    "end": "467527"
  },
  {
    "text": "and that's photographers.",
    "start": "467527",
    "end": "469530"
  },
  {
    "text": "But you can see here that\nfour SQL tables get created.",
    "start": "469530",
    "end": "473106"
  },
  {
    "text": "To understand how these get created,",
    "start": "473106",
    "end": "474970"
  },
  {
    "text": "let's take a look at our source data.",
    "start": "474970",
    "end": "476853"
  },
  {
    "text": "Switching over to the source data,",
    "start": "479610",
    "end": "481020"
  },
  {
    "text": "you can see that we've got\nour list of photographers",
    "start": "481020",
    "end": "483300"
  },
  {
    "text": "and some basic information about each.",
    "start": "483300",
    "end": "485223"
  },
  {
    "text": "The name and the birthdate,\nthese are simple fields,",
    "start": "486180",
    "end": "489419"
  },
  {
    "text": "so these will get mapped to\ncolumns within the main table.",
    "start": "489420",
    "end": "493530"
  },
  {
    "text": "But for complex fields,",
    "start": "493530",
    "end": "495210"
  },
  {
    "text": "things that are arrays or subdocuments,",
    "start": "495210",
    "end": "498120"
  },
  {
    "text": "these are gonna get mapped",
    "start": "498120",
    "end": "498960"
  },
  {
    "text": "to virtual tables within our schema.",
    "start": "498960",
    "end": "501182"
  },
  {
    "text": "So, location, coordinates, subjects,",
    "start": "502410",
    "end": "507030"
  },
  {
    "text": "these are gonna become virtual\ntables within our schema.",
    "start": "507030",
    "end": "510243"
  },
  {
    "text": "And that's what we see here.",
    "start": "512700",
    "end": "514440"
  },
  {
    "text": "Our collection, Photographers,\nbecomes the main table.",
    "start": "514440",
    "end": "517710"
  },
  {
    "text": "And we've got virtual tables for location,",
    "start": "517710",
    "end": "521400"
  },
  {
    "text": "location coordinates,\nand then also subjects.",
    "start": "521400",
    "end": "524643"
  },
  {
    "text": "So let's pull these\ntables into our data model",
    "start": "525750",
    "end": "528180"
  },
  {
    "text": "to take a closer look.",
    "start": "528180",
    "end": "529443"
  },
  {
    "text": "Now we've got the Photographers table.",
    "start": "531030",
    "end": "533310"
  },
  {
    "text": "We'll pull in information from this table",
    "start": "533310",
    "end": "535890"
  },
  {
    "text": "and you can see that name and birthdate",
    "start": "535890",
    "end": "537523"
  },
  {
    "text": "get mapped to columns.",
    "start": "537523",
    "end": "539700"
  },
  {
    "text": "And then the IDs of the documents",
    "start": "539700",
    "end": "541031"
  },
  {
    "text": "get mapped to Photographer's ID.",
    "start": "541031",
    "end": "543363"
  },
  {
    "text": "Now say we want to create a map",
    "start": "544470",
    "end": "546084"
  },
  {
    "text": "of the photographer's\nlocations across the US.",
    "start": "546084",
    "end": "550110"
  },
  {
    "text": "So we're gonna need to pull\nin some additional information",
    "start": "550110",
    "end": "552120"
  },
  {
    "text": "into our data model, starting\nwith the coordinates.",
    "start": "552120",
    "end": "555153"
  },
  {
    "text": "And we'll pull information\nback for this virtual table.",
    "start": "558510",
    "end": "562500"
  },
  {
    "text": "And you can see that the latitude",
    "start": "562500",
    "end": "563790"
  },
  {
    "text": "and longitude get mapped to\ncolumns within this table,",
    "start": "563790",
    "end": "567720"
  },
  {
    "text": "but also, the photographer's\nID gets added as well.",
    "start": "567720",
    "end": "570959"
  },
  {
    "text": "This gets projected\ninto this virtual table",
    "start": "570960",
    "end": "573210"
  },
  {
    "text": "from our main table to maintain",
    "start": "573210",
    "end": "574890"
  },
  {
    "text": "that foreign key relationship.",
    "start": "574890",
    "end": "576393"
  },
  {
    "text": "And let's say we want to add\nthe photographer subjects",
    "start": "577530",
    "end": "580182"
  },
  {
    "text": "to our data model as well.",
    "start": "580182",
    "end": "581940"
  },
  {
    "text": "We can use this in the map.",
    "start": "581940",
    "end": "584010"
  },
  {
    "text": "And you can see that this virtual table",
    "start": "584010",
    "end": "585730"
  },
  {
    "text": "follows the same pattern.",
    "start": "585730",
    "end": "587433"
  },
  {
    "text": "If we pull back some data,",
    "start": "588270",
    "end": "589533"
  },
  {
    "text": "the subjects get added as a column,",
    "start": "589533",
    "end": "592380"
  },
  {
    "text": "and that photographer's ID gets projected",
    "start": "592380",
    "end": "594990"
  },
  {
    "text": "into this table as well.",
    "start": "594990",
    "end": "596403"
  },
  {
    "text": "Now we have all the data that\nwe need to create our map,",
    "start": "597660",
    "end": "600360"
  },
  {
    "text": "so let's get started on that.",
    "start": "600360",
    "end": "601810"
  },
  {
    "text": "To start, we'll just need the latitude",
    "start": "605400",
    "end": "607020"
  },
  {
    "text": "and longitude information,",
    "start": "607020",
    "end": "608460"
  },
  {
    "text": "so we'll go ahead and add that\nto the columns and the rows.",
    "start": "608460",
    "end": "612153"
  },
  {
    "text": "And we just need the dimension.",
    "start": "613560",
    "end": "615423"
  },
  {
    "text": "And now you can see\nthat our 12 data points",
    "start": "624930",
    "end": "627117"
  },
  {
    "text": "are displayed on the map here.",
    "start": "627117",
    "end": "628773"
  },
  {
    "text": "Now say we wanted to add a filter",
    "start": "630300",
    "end": "632730"
  },
  {
    "text": "to filter our photographers\nby their subject focus areas.",
    "start": "632730",
    "end": "636360"
  },
  {
    "text": "We can do that as well",
    "start": "636360",
    "end": "637709"
  },
  {
    "text": "by adding the subjects\nvalue into our filter.",
    "start": "637710",
    "end": "640713"
  },
  {
    "text": "And we'll include all of\nthe options in the filter.",
    "start": "642360",
    "end": "645483"
  },
  {
    "text": "And we'll go ahead and\ndisplay this on the map.",
    "start": "646950",
    "end": "649300"
  },
  {
    "text": "And we can deselect\nall of the options here",
    "start": "652080",
    "end": "654451"
  },
  {
    "text": "and select only the ones\nthat we're interested in,",
    "start": "654451",
    "end": "657899"
  },
  {
    "text": "say, maybe automotive,\nbeaches, and city life.",
    "start": "657900",
    "end": "662193"
  },
  {
    "text": "And here, now the map is\nonly displaying a subset",
    "start": "665100",
    "end": "668160"
  },
  {
    "text": "of photographers just for\nwith these selections.",
    "start": "668160",
    "end": "671793"
  },
  {
    "text": "And if we hover over these data points,",
    "start": "672780",
    "end": "674220"
  },
  {
    "text": "we can see that we're just\ndisplaying location information.",
    "start": "674220",
    "end": "677819"
  },
  {
    "text": "And if we wanna add more data to that,",
    "start": "677820",
    "end": "679710"
  },
  {
    "text": "we can by pulling from our data model.",
    "start": "679710",
    "end": "682083"
  },
  {
    "text": "We can pull in the photographer's name.",
    "start": "683340",
    "end": "685076"
  },
  {
    "text": "And to help us validate the filter,",
    "start": "685076",
    "end": "688350"
  },
  {
    "text": "we can also add their focus subject areas.",
    "start": "688350",
    "end": "691953"
  },
  {
    "text": "And now if we hover\nover these data points,",
    "start": "695340",
    "end": "697350"
  },
  {
    "text": "we can see that we've got the name",
    "start": "697350",
    "end": "699480"
  },
  {
    "text": "and their focus areas,\nso beaches, automotive,",
    "start": "699480",
    "end": "704430"
  },
  {
    "text": "and then city life for\nthese two data points,",
    "start": "704430",
    "end": "707160"
  },
  {
    "text": "so we can validate that our\nfilter is working correctly.",
    "start": "707160",
    "end": "709959"
  },
  {
    "text": "To learn more, take a look\nat the following resources",
    "start": "716100",
    "end": "718402"
  },
  {
    "text": "and please reach out if\nyou have any questions.",
    "start": "718402",
    "end": "720751"
  },
  {
    "text": "Thank you.",
    "start": "722642",
    "end": "723559"
  }
]