[
  {
    "text": "Welcome to Back To Basics. \nI am Gerardo Estaba",
    "start": "5023",
    "end": "8261"
  },
  {
    "text": "and today we're going to talk about \ndeploying your code.",
    "start": "8262",
    "end": "11355"
  },
  {
    "text": "Have you ever deployed \nyour code nervously?",
    "start": "11746",
    "end": "14354"
  },
  {
    "text": "I know I have.",
    "start": "14354",
    "end": "15728"
  },
  {
    "text": "Back in the day before the cloud \nand modern software development practices,",
    "start": "15728",
    "end": "19380"
  },
  {
    "text": "I remember the adrenaline rush \nof manually logging into a server, ",
    "start": "19380",
    "end": "23168"
  },
  {
    "text": "running my deployment scripts \nand just hoping that it works. ",
    "start": "23169",
    "end": "27373"
  },
  {
    "text": "And I remember many of those \ngoing wrong",
    "start": "27373",
    "end": "29962"
  },
  {
    "text": "or upsetting our users \nfor a long period of time ",
    "start": "29962",
    "end": "32822"
  },
  {
    "text": "because we broke the system ",
    "start": "32822",
    "end": "34468"
  },
  {
    "text": "and also scrambling trying to \nroll those changes back.",
    "start": "34468",
    "end": "38274"
  },
  {
    "text": "Fortunately in the cloud, we don't have to \ndeploy with this level of uncertainty.",
    "start": "38684",
    "end": "43184"
  },
  {
    "text": "Thanks to modern software development \npractices and services",
    "start": "43185",
    "end": "46935"
  },
  {
    "text": "that allow us to automate \ncode deployments. ",
    "start": "46935",
    "end": "49935"
  },
  {
    "text": "So let's start with an example.",
    "start": "49935",
    "end": "52232"
  },
  {
    "text": "The simplest architecture \nI can think of ",
    "start": "52701",
    "end": "55326"
  },
  {
    "text": "a single Amazon EC2 Instance \nrunning your code.",
    "start": "55326",
    "end": "58730"
  },
  {
    "text": "But how can we deploy new code \nto this instance?",
    "start": "58730",
    "end": "62670"
  },
  {
    "text": "Well, I can of course connect manually \ninto the instance ",
    "start": "62671",
    "end": "66543"
  },
  {
    "text": "and run my deployment scripts. \nHowever by doing this,",
    "start": "66543",
    "end": "70243"
  },
  {
    "text": "I'm risking something going wrong \nwith my code or the scripts",
    "start": "70244",
    "end": "73807"
  },
  {
    "text": "and potentially disrupting my users",
    "start": "73807",
    "end": "76200"
  },
  {
    "text": "and bring back those hurtful memories \nof manual roll backs. ",
    "start": "76200",
    "end": "81340"
  },
  {
    "text": "Because even if you tested your code \nin a development server, ",
    "start": "81340",
    "end": "85375"
  },
  {
    "text": "there's always a chance that \nthe production server is different. ",
    "start": "85375",
    "end": "89083"
  },
  {
    "text": "This is what's called mutable \ninfrastructure.",
    "start": "89083",
    "end": "92060"
  },
  {
    "text": "Perhaps someone logged in, updated, \nor changed something",
    "start": "92060",
    "end": "96080"
  },
  {
    "text": "and forgot to update \nthe development server. ",
    "start": "96081",
    "end": "98350"
  },
  {
    "text": "So your deployment in one \nmutable server ",
    "start": "98350",
    "end": "101187"
  },
  {
    "text": "may behave differently in another \nmutable server.",
    "start": "101187",
    "end": "104197"
  },
  {
    "text": "It happens. ",
    "start": "104197",
    "end": "105668"
  },
  {
    "text": "So how can we implement control changes \nso that our running code",
    "start": "106676",
    "end": "111028"
  },
  {
    "text": "can be changed in a predictable manner?",
    "start": "111028",
    "end": "113551"
  },
  {
    "text": "We can do this with an\nimmutable infrastructure.",
    "start": "114065",
    "end": "117402"
  },
  {
    "text": "Because with immutable infrastructure \nno changes happens in the production server. ",
    "start": "117532",
    "end": "122878"
  },
  {
    "text": "For example, with two instances, \nwe can have one instance for deployment",
    "start": "122878",
    "end": "128491"
  },
  {
    "text": "while the other one keeps \nserving the traffic. ",
    "start": "128491",
    "end": "130856"
  },
  {
    "text": "An easy way to ensure availability \nand performance",
    "start": "130857",
    "end": "134799"
  },
  {
    "text": "of multiple instances serving traffic, \nis using Auto Scaling.",
    "start": "134799",
    "end": "138782"
  },
  {
    "text": "One of the beautiful things of Auto Scaling \nis that it automates instance creation ",
    "start": "138782",
    "end": "143461"
  },
  {
    "text": "for example, by having pre-baked \nAmazon Machine Images or AMIs.",
    "start": "143462",
    "end": "148225"
  },
  {
    "text": "Because these AMIs include \nthe operating system we need, ",
    "start": "148225",
    "end": "151833"
  },
  {
    "text": "and all the software packages needed \nto run my application.",
    "start": "151833",
    "end": "155215"
  },
  {
    "text": "With Auto Scaling, when an instance fails, \nor we have an increase in traffic,",
    "start": "155216",
    "end": "160247"
  },
  {
    "text": "more instances are quickly created \nbased on that pre-baked AMI.",
    "start": "160247",
    "end": "165547"
  },
  {
    "text": "So now that we have our application \nrunning on our Auto Scaling Group,",
    "start": "165548",
    "end": "170181"
  },
  {
    "text": "how do we deploy code into them\na controlled way?",
    "start": "170181",
    "end": "172951"
  },
  {
    "text": "Well, to minimize risk of deployment, \nand maybe errors,",
    "start": "172951",
    "end": "177454"
  },
  {
    "text": "I'm going to suggest that we use \nautomation. ",
    "start": "177454",
    "end": "179683"
  },
  {
    "text": "There are many great tools \nto help with this.",
    "start": "179684",
    "end": "181717"
  },
  {
    "text": "For our example, we're going to use \nAWS CodeDeploy. ",
    "start": "181717",
    "end": "184496"
  },
  {
    "text": "This is a service that makes it easy \nto automate code deployments, ",
    "start": "184496",
    "end": "187939"
  },
  {
    "text": "but maintaining your application uptime. ",
    "start": "187939",
    "end": "190254"
  },
  {
    "text": "CodeDeploy is very easy to use.",
    "start": "190866",
    "end": "193229"
  },
  {
    "text": "You need to set it up by \ninstalling the agent ",
    "start": "193229",
    "end": "195350"
  },
  {
    "text": "and configuring your \ndeployment configuration.",
    "start": "195350",
    "end": "197652"
  },
  {
    "text": "And then, you can start \ncreating deployments",
    "start": "197652",
    "end": "200353"
  },
  {
    "text": "pointing CodeDeploy to your code. \nThat's it.",
    "start": "200354",
    "end": "203712"
  },
  {
    "text": "But CodeDeploy also has \na couple of mechanisms ",
    "start": "203712",
    "end": "207032"
  },
  {
    "text": "to help us mitigate deployment risks.",
    "start": "207032",
    "end": "209369"
  },
  {
    "text": "For example, configuring a one-at-a-time \nin place deployment ",
    "start": "209369",
    "end": "214233"
  },
  {
    "text": "means that CodeDeploy will deploy the code \nonly to one instance in our Auto Scaling Group",
    "start": "214233",
    "end": "219441"
  },
  {
    "text": "and only after that's been successful \nwill it deploy to another one.",
    "start": "219441",
    "end": "223802"
  },
  {
    "text": "One at a time, you can see \nhow these gradual process ",
    "start": "223802",
    "end": "227426"
  },
  {
    "text": "make deployment much safer.",
    "start": "227426",
    "end": "229278"
  },
  {
    "text": "Another way of mitigating risk of deployment \nis by deploying to paralell environments. ",
    "start": "229279",
    "end": "235525"
  },
  {
    "text": "This is sometimes called \nblue-green deployment. ",
    "start": "235525",
    "end": "238170"
  },
  {
    "text": "CodeDeploy also allows us to choose \nblue-green deployments.",
    "start": "238705",
    "end": "242036"
  },
  {
    "text": "With this, CodeDeploy provisions \na new Auto Scaling Group",
    "start": "242036",
    "end": "245690"
  },
  {
    "text": "let's call it the green environment, ",
    "start": "245690",
    "end": "247658"
  },
  {
    "text": "by copying the original one \nthat we call the blue environment. ",
    "start": "247658",
    "end": "251322"
  },
  {
    "text": "Then CodeDeploy will deploy the new \napplication revision",
    "start": "251322",
    "end": "254104"
  },
  {
    "text": "onto the green environment",
    "start": "254104",
    "end": "255690"
  },
  {
    "text": "and once the deployment is \ndeemed successful, ",
    "start": "255690",
    "end": "258023"
  },
  {
    "text": "CodeDeploy can reroute the traffic. ",
    "start": "258023",
    "end": "260077"
  },
  {
    "text": "CodeDeploy also helps us \nautomate testing",
    "start": "260077",
    "end": "263464"
  },
  {
    "text": "to make sure that our deployment \nactually worked",
    "start": "263464",
    "end": "265814"
  },
  {
    "text": "and automate roll back in case it didn't.",
    "start": "265814",
    "end": "268811"
  },
  {
    "text": "It helps us minimize recovery time, \nbut also manual errors.",
    "start": "268812",
    "end": "273919"
  },
  {
    "text": "We can achieve this by using \nCodeDeploy predeployment ",
    "start": "273919",
    "end": "277264"
  },
  {
    "text": "and plus deployment triggers. ",
    "start": "277264",
    "end": "279549"
  },
  {
    "text": "That for example allow you to trigger \na Lambda function to do functional test.",
    "start": "279549",
    "end": "284699"
  },
  {
    "text": "CodeDeploy can automatically roll back \nwhen the deployment fails ",
    "start": "284699",
    "end": "289479"
  },
  {
    "text": "or when that Lambda function \nreturns an error, ",
    "start": "289479",
    "end": "293054"
  },
  {
    "text": "or when a CloudWatch Alarm is flagged. ",
    "start": "293054",
    "end": "295889"
  },
  {
    "text": "So there you have it.",
    "start": "296100",
    "end": "297331"
  },
  {
    "text": "Nervous deployments are a thing \nof the past.",
    "start": "297331",
    "end": "299609"
  },
  {
    "text": "If you used immutable infrastructure \nperhaps with Auto Scaling,",
    "start": "299609",
    "end": "303631"
  },
  {
    "text": "and you automate your deployments \nperhaps with AWS CodeDeploy,",
    "start": "303631",
    "end": "307203"
  },
  {
    "text": "you can get a lot of piece of mind \nwhen deploying code. ",
    "start": "307203",
    "end": "309989"
  },
  {
    "text": "See you next time. ",
    "start": "309989",
    "end": "311548"
  }
]