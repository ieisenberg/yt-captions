[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "Welcome to another episode of 'Back to Basics'.",
    "start": "6090",
    "end": "8590"
  },
  {
    "text": "Hi, my name is Deval Parikh,",
    "start": "8930",
    "end": "10842"
  },
  {
    "text": "and today we will be talking about",
    "start": "10842",
    "end": "12276"
  },
  {
    "text": "modernizing legacy monolithic applications\ninto microservices",
    "start": "12276",
    "end": "16426"
  },
  {
    "text": "using the cloud strangler pattern.",
    "start": "16426",
    "end": "18750"
  },
  {
    "start": "19000",
    "end": "45000"
  },
  {
    "text": "Legacy monoliths are complex systems\nthat grow over time",
    "start": "19810",
    "end": "23300"
  },
  {
    "text": "to become tightly coupled",
    "start": "23300",
    "end": "24682"
  },
  {
    "text": "and are prone to break easily\nwith new changes.",
    "start": "24682",
    "end": "27960"
  },
  {
    "text": "This goes against the paradigm\nof agile development methodology,",
    "start": "28570",
    "end": "32450"
  },
  {
    "text": "and organizations today are looking at",
    "start": "32450",
    "end": "34892"
  },
  {
    "text": "embracing microservices architecture.",
    "start": "34892",
    "end": "37910"
  },
  {
    "text": "So how do you then break down\na legacy monolith application",
    "start": "38510",
    "end": "42399"
  },
  {
    "text": "into a microservices architecture?",
    "start": "42400",
    "end": "44890"
  },
  {
    "start": "45000",
    "end": "75000"
  },
  {
    "text": "Very often, the answer that you hear",
    "start": "45230",
    "end": "47776"
  },
  {
    "text": "is the cloud strangler pattern.",
    "start": "47776",
    "end": "50103"
  },
  {
    "text": "A strangler pattern is a way of migrating",
    "start": "51170",
    "end": "53753"
  },
  {
    "text": "a legacy monolith application incrementally",
    "start": "53754",
    "end": "56874"
  },
  {
    "text": "by replacing its existing functionalities",
    "start": "56874",
    "end": "59930"
  },
  {
    "text": "with new microservices in a phased approach.",
    "start": "59930",
    "end": "63641"
  },
  {
    "text": "Over time, the new microservices replace",
    "start": "64502",
    "end": "67886"
  },
  {
    "text": "all of the legacy system's features,",
    "start": "67886",
    "end": "70510"
  },
  {
    "text": "strangling the old system",
    "start": "70510",
    "end": "72312"
  },
  {
    "text": "and allowing you to decommission it.",
    "start": "72312",
    "end": "74899"
  },
  {
    "start": "75000",
    "end": "143000"
  },
  {
    "text": "This pattern was coined\nby the legendary Martin Fowler in 2004",
    "start": "76150",
    "end": "80300"
  },
  {
    "text": "after observing the Australian\nstrangler fig vines in the rainforest.",
    "start": "80300",
    "end": "84390"
  },
  {
    "text": "These fig vines intertwine\nand grow around their host tree,",
    "start": "85610",
    "end": "89410"
  },
  {
    "text": "eventually killing it\nto self support themselves.",
    "start": "89410",
    "end": "92626"
  },
  {
    "text": "Let's talk about the approach.",
    "start": "93790",
    "end": "95690"
  },
  {
    "text": "There are a few schools of thought",
    "start": "96270",
    "end": "98133"
  },
  {
    "text": "in how you can break down\nyour monolith into microservices.",
    "start": "98134",
    "end": "101230"
  },
  {
    "text": "One way to approach this problem statement",
    "start": "101730",
    "end": "104106"
  },
  {
    "text": "is to look at the monolith at a high level",
    "start": "104106",
    "end": "106692"
  },
  {
    "text": "and identify\nall business functions it serves.",
    "start": "106692",
    "end": "109950"
  },
  {
    "text": "Assume you have a monolith application",
    "start": "110370",
    "end": "113592"
  },
  {
    "text": "with four main functions, vendor management,",
    "start": "113592",
    "end": "116270"
  },
  {
    "text": "customer management,\ncontent management, and user management.",
    "start": "116270",
    "end": "120270"
  },
  {
    "text": "Therefore, our first iteration\nwill break down the monolith",
    "start": "120270",
    "end": "124126"
  },
  {
    "text": "into four discrete microservices.",
    "start": "124126",
    "end": "126550"
  },
  {
    "text": "This is a highly simplified architecture",
    "start": "126890",
    "end": "129345"
  },
  {
    "text": "for the sake of conceptual simplicity.",
    "start": "129346",
    "end": "131750"
  },
  {
    "text": "In your next iteration cycle,",
    "start": "132630",
    "end": "134450"
  },
  {
    "text": "you can then break down\neach of the microservices",
    "start": "134450",
    "end": "137186"
  },
  {
    "text": "into its own subset of functions",
    "start": "137186",
    "end": "139782"
  },
  {
    "text": "based on principles of autonomy\nand independence.",
    "start": "139782",
    "end": "143130"
  },
  {
    "start": "143000",
    "end": "254000"
  },
  {
    "text": "Of course, there are other ways\nto break down this monolith,",
    "start": "143870",
    "end": "146758"
  },
  {
    "text": "by technical modules",
    "start": "146931",
    "end": "148787"
  },
  {
    "text": "or client groups that serve\na specialized set of functions.",
    "start": "148790",
    "end": "152409"
  },
  {
    "text": "Now, let's take a look\nat an end-to-end architecture.",
    "start": "153470",
    "end": "156430"
  },
  {
    "text": "If you have\nyour monolith application on-prem,",
    "start": "157410",
    "end": "160154"
  },
  {
    "text": "you can choose to host it on\nan Amazon EC2 compute instance,",
    "start": "160154",
    "end": "164382"
  },
  {
    "text": "or you can deploy it as a container image",
    "start": "164382",
    "end": "166798"
  },
  {
    "text": "on Amazon Elastic Container Service.",
    "start": "166798",
    "end": "169380"
  },
  {
    "text": "If you are deploying this on ECS,",
    "start": "169830",
    "end": "172222"
  },
  {
    "text": "you would create a task definition",
    "start": "172222",
    "end": "174382"
  },
  {
    "text": "and a service to host the container instance.",
    "start": "174382",
    "end": "177430"
  },
  {
    "text": "You would also want to employ",
    "start": "178163",
    "end": "179644"
  },
  {
    "text": "an application load balancer\nlike the AWS Elastic Load Balancer",
    "start": "179644",
    "end": "184754"
  },
  {
    "text": "to act as a dispatcher\nbetween your old monolith system",
    "start": "184754",
    "end": "189120"
  },
  {
    "text": "and new microservices.",
    "start": "189120",
    "end": "190857"
  },
  {
    "text": "The ELB will route incoming requests",
    "start": "191390",
    "end": "194502"
  },
  {
    "text": "either to the legacy application\nor to the new services,",
    "start": "194502",
    "end": "197994"
  },
  {
    "text": "and ensures the legacy application\ncontinues to function",
    "start": "198410",
    "end": "202068"
  },
  {
    "text": "side by side with microservices.",
    "start": "202068",
    "end": "204430"
  },
  {
    "text": "Once routing is established,",
    "start": "205130",
    "end": "206826"
  },
  {
    "text": "you can start carving out\nyour old functionality from the monolith",
    "start": "206826",
    "end": "210634"
  },
  {
    "text": "and refactor code to build new microservices.",
    "start": "210634",
    "end": "213970"
  },
  {
    "text": "You would deploy these microservices on ECS",
    "start": "214310",
    "end": "217646"
  },
  {
    "text": "by creating new tasks.",
    "start": "217646",
    "end": "219410"
  },
  {
    "text": "You can also create PAD based rules on ELB",
    "start": "220310",
    "end": "223405"
  },
  {
    "text": "to route incoming requests\neither to the legacy",
    "start": "223406",
    "end": "226418"
  },
  {
    "text": "or the new microservices.",
    "start": "226418",
    "end": "228150"
  },
  {
    "text": "As more features are carved out\nof the monolith into microservices,",
    "start": "228650",
    "end": "233489"
  },
  {
    "text": "the monolith is strangled",
    "start": "233490",
    "end": "235554"
  },
  {
    "text": "and eventually becomes obsolete.",
    "start": "235554",
    "end": "238386"
  },
  {
    "text": "You can then safely retire",
    "start": "238386",
    "end": "240230"
  },
  {
    "text": "or decommission your legacy system.",
    "start": "240230",
    "end": "242459"
  },
  {
    "text": "When building new microservices\nfrom your legacy monolith,",
    "start": "243163",
    "end": "246534"
  },
  {
    "text": "think about separating data domains\nassociated with",
    "start": "246534",
    "end": "249823"
  },
  {
    "text": "each new functionality to be served",
    "start": "249824",
    "end": "251882"
  },
  {
    "text": "by purpose-built databases.",
    "start": "251882",
    "end": "253950"
  },
  {
    "text": "Now, let's take a look\nat some of the anti-patterns",
    "start": "255010",
    "end": "258057"
  },
  {
    "text": "associated with this solution delivery.",
    "start": "258058",
    "end": "260510"
  },
  {
    "text": "Here, breaking up the work into small,\ndiscrete microservices",
    "start": "261330",
    "end": "264974"
  },
  {
    "text": "from the very beginning may be ill-advised.",
    "start": "264974",
    "end": "267490"
  },
  {
    "text": "That's not to say\nyou shouldn't separate tiers",
    "start": "267830",
    "end": "270301"
  },
  {
    "text": "to optimize the frequency\nof change and deployment,",
    "start": "270302",
    "end": "273278"
  },
  {
    "text": "but any premature optimization",
    "start": "273454",
    "end": "276270"
  },
  {
    "text": "and building in unnecessary complexity",
    "start": "276270",
    "end": "279250"
  },
  {
    "text": "isn't the right starting point.",
    "start": "279250",
    "end": "281400"
  },
  {
    "text": "Therefore, you should aim\nto shrink and refactor components",
    "start": "281850",
    "end": "285922"
  },
  {
    "text": "over a period of time with a focus on\ncontinuous improvement.",
    "start": "285922",
    "end": "290410"
  },
  {
    "text": "In addition, you must\nintentionally simplify components",
    "start": "290990",
    "end": "294774"
  },
  {
    "text": "so they can be easily managed by small,",
    "start": "294774",
    "end": "297776"
  },
  {
    "text": "independent, autonomous teams.",
    "start": "297776",
    "end": "300250"
  },
  {
    "text": "Finally, one should seek to apply\nfundamental principles of DevOps",
    "start": "301010",
    "end": "305402"
  },
  {
    "text": "and agile development methodologies",
    "start": "305402",
    "end": "307690"
  },
  {
    "text": "as you iterate over time.",
    "start": "307690",
    "end": "309760"
  },
  {
    "text": "If you'd like to see\na full demo of this solution",
    "start": "310457",
    "end": "313370"
  },
  {
    "text": "and dive deeper into this architecture,",
    "start": "313370",
    "end": "315802"
  },
  {
    "text": "please check out my link below.",
    "start": "315802",
    "end": "317600"
  },
  {
    "text": "Thank you for watching Back to Basics.",
    "start": "317970",
    "end": "320106"
  },
  {
    "text": "See you next time.",
    "start": "320106",
    "end": "321526"
  }
]