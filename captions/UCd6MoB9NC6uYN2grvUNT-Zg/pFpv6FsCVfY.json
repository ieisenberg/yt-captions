[
  {
    "start": "0",
    "end": "162000"
  },
  {
    "text": "okay good morning everybody and let's get started thank you very much for coming in here I know it's a really",
    "start": "350",
    "end": "7140"
  },
  {
    "text": "tough time of the day after the party yesterday so thanks for coming in here and thank you everybody for signing up",
    "start": "7140",
    "end": "13049"
  },
  {
    "text": "for this session this session has been sold out it was so popular that the arraignment team asked us to do a repeat",
    "start": "13049",
    "end": "19500"
  },
  {
    "text": "session since Friday schedule was already full you may have noticed that",
    "start": "19500",
    "end": "24869"
  },
  {
    "text": "the dates here is wrong no the date is actually right since this session has been sold out we were asked to do a repeat session and we",
    "start": "24869",
    "end": "31769"
  },
  {
    "text": "did the repeat session on Wednesday so we took the Amazon time machine service to go back in time do the repeat session",
    "start": "31769",
    "end": "37200"
  },
  {
    "text": "there and this is why the date is wrong anyway don't worry you're gonna get the original content right now and you're",
    "start": "37200",
    "end": "43950"
  },
  {
    "text": "gonna be fine so yeah every year since four years ago we do this session every",
    "start": "43950",
    "end": "51120"
  },
  {
    "text": "year we improve it a little bit we add something new so who was who was here for last year's running lean",
    "start": "51120",
    "end": "56820"
  },
  {
    "text": "architecture session so thank you for coming back I like repeat customers thank you very",
    "start": "56820",
    "end": "61949"
  },
  {
    "text": "much don't worry we have a lot of new content for you so your time is gonna be well-spent here so to be honest my goal",
    "start": "61949",
    "end": "69210"
  },
  {
    "text": "here is to help you save as much money as possible actually I want to I want you to save enough money so that you can",
    "start": "69210",
    "end": "76110"
  },
  {
    "text": "come back to reinvent next year and have all of your expenses paid by the savings you make on AWS today so please bear",
    "start": "76110",
    "end": "82950"
  },
  {
    "text": "with us listen to what we're gonna tell you and you're gonna make a lot of money where you're gonna save a lot of money so that it will be easy to tell your",
    "start": "82950",
    "end": "89640"
  },
  {
    "text": "boss that you want to go to reinvent next year so what are we gonna cover on here we're gonna see a couple of best",
    "start": "89640",
    "end": "95159"
  },
  {
    "text": "practices on how to lower your AWS bill and it turns out that all of these good practices that you can employ on your",
    "start": "95159",
    "end": "101640"
  },
  {
    "text": "architecture to make - to save money are also good practices to help you with scalability and help you build a more",
    "start": "101640",
    "end": "108299"
  },
  {
    "text": "robust and dynamic architecture so they're going to help you in other places as well we'll also save time and",
    "start": "108299",
    "end": "114930"
  },
  {
    "text": "I think time is actually more valuable than money and and so so look at how you",
    "start": "114930",
    "end": "121439"
  },
  {
    "text": "can use these best practices to save time so you can spend more of your time innovating around your own service your",
    "start": "121439",
    "end": "127890"
  },
  {
    "text": "own product and whatever you do at your company we're gonna see a couple of real-world customer examples so that you",
    "start": "127890",
    "end": "133800"
  },
  {
    "text": "oh this is real and not just theoretical stuff and most of these things are easy to implement but you also brought some",
    "start": "133800",
    "end": "140370"
  },
  {
    "text": "pretty advanced but pretty cool tricks that you can use along the way this year",
    "start": "140370",
    "end": "146640"
  },
  {
    "text": "we structured the talk around how companies typically tend to be organized so we have something for you business",
    "start": "146640",
    "end": "152970"
  },
  {
    "text": "folks out there we have something for architecture people we have something for operations people and this is more",
    "start": "152970",
    "end": "158400"
  },
  {
    "text": "or less the structure we're gonna go through so let's start with business so when you talk to your business people or",
    "start": "158400",
    "end": "164970"
  },
  {
    "start": "162000",
    "end": "162000"
  },
  {
    "text": "finance people of course their goal is to pay as little as possible for what you want to use as an architect and this",
    "start": "164970",
    "end": "172440"
  },
  {
    "start": "172000",
    "end": "172000"
  },
  {
    "text": "here is you don't actually have to do anything to save money on AWS and the reason here is we have a slightly",
    "start": "172440",
    "end": "178980"
  },
  {
    "text": "different business model than other IT companies our business model is based on saving money for our customers and this",
    "start": "178980",
    "end": "187260"
  },
  {
    "text": "is how it works every time we see more customers on the AWS platform we see",
    "start": "187260",
    "end": "192270"
  },
  {
    "text": "more AWS usage of course right which gives us a great excuse to build up more infrastructure because otherwise we",
    "start": "192270",
    "end": "198270"
  },
  {
    "text": "couldn't serve those customers as we build more infrastructure we get to enjoy more economies of scale of course",
    "start": "198270",
    "end": "204090"
  },
  {
    "text": "because the larger infrastructure you have the the more you can optimize there and also that leads to lower",
    "start": "204090",
    "end": "210090"
  },
  {
    "text": "infrastructure costs and then we decide to use those lower infrastructure costs to reduce prices for our customers so",
    "start": "210090",
    "end": "216840"
  },
  {
    "text": "that more customers can come on come up on our platform and that creates a",
    "start": "216840",
    "end": "222170"
  },
  {
    "text": "virtuous cycle we call it the Amazon flywheel that helps our customers and it",
    "start": "222170",
    "end": "227489"
  },
  {
    "text": "helps us and it helps everybody and there are two accelerators built in to this virtuous cycle first as we see more",
    "start": "227489",
    "end": "234720"
  },
  {
    "text": "AWS usage we see more partners and open source projects and and other people add",
    "start": "234720",
    "end": "240900"
  },
  {
    "text": "to the to the ecosystem of Amazon Web Services making the platform even more attractive and more useful for everybody",
    "start": "240900",
    "end": "246900"
  },
  {
    "text": "we also get to expand our global footprint and you may have noticed we are right now building four new regions",
    "start": "246900",
    "end": "252900"
  },
  {
    "text": "into our AWS global regional network so that we today we have 14 regions we're",
    "start": "252900",
    "end": "258780"
  },
  {
    "text": "gonna end up with 18 regions pretty soon now and we get to see more features that make the area was platform even more",
    "start": "258780",
    "end": "265650"
  },
  {
    "text": "useful for everybody and you serve the other accelerator is infrastructure innovation and if you've been to James",
    "start": "265650",
    "end": "272940"
  },
  {
    "text": "Hamilton's talk on Tuesday you've seen the the cool things that James is doing to squeeze even more efficiency out of",
    "start": "272940",
    "end": "282120"
  },
  {
    "text": "the platform he's now building his own transatlantic cables how cool is that so",
    "start": "282120",
    "end": "287640"
  },
  {
    "text": "these are the things you can only do at a big scale that can help lower the costs even more and we like to give that",
    "start": "287640",
    "end": "294900"
  },
  {
    "text": "cause back to customers in fact right now we are at 57 price reductions since",
    "start": "294900",
    "end": "300090"
  },
  {
    "text": "2006 since when AWS was was founded and the latest price reductions happened a",
    "start": "300090",
    "end": "305490"
  },
  {
    "text": "couple of weeks ago we reduced prices on our ec2 platform we reduced our storage prices so actually you can get away with",
    "start": "305490",
    "end": "311310"
  },
  {
    "text": "without doing anything and you will save money on AWS but of course if you're in in a business or in the finance",
    "start": "311310",
    "end": "317970"
  },
  {
    "text": "department you want to have a real good plan so if you're planning something on",
    "start": "317970",
    "end": "323280"
  },
  {
    "text": "AWS you can use the a wcco calculator to compare your existing on-premises infrastructure with whatever you want to",
    "start": "323280",
    "end": "329970"
  },
  {
    "text": "do on AWS so to help you do a more or less a post by up earth comparison you",
    "start": "329970",
    "end": "335730"
  },
  {
    "text": "can use the a legacy CO calculator which comes with a lot of really good estimations and metrics you can you can",
    "start": "335730",
    "end": "341070"
  },
  {
    "text": "bring in your own prices for power and cooling and licensing and all of that and and really do a nice comparison",
    "start": "341070",
    "end": "348870"
  },
  {
    "text": "about TCO on your own infrastructure versus AWS so that you can go to your business people and have a reach a good",
    "start": "348870",
    "end": "355080"
  },
  {
    "text": "decision if you're planning something to do something on AWS you could use a simple monthly calculator I know it's",
    "start": "355080",
    "end": "362010"
  },
  {
    "start": "357000",
    "end": "357000"
  },
  {
    "text": "not that simple anymore because with over 70 services it has to sort of grow but it is a very useful tool for you to",
    "start": "362010",
    "end": "368610"
  },
  {
    "text": "project cost into the future and get those budget approvals going on we don't",
    "start": "368610",
    "end": "374040"
  },
  {
    "start": "374000",
    "end": "374000"
  },
  {
    "text": "want you to spend too much money so if you're concerned about your money spending on AWS use the areas billing",
    "start": "374040",
    "end": "379800"
  },
  {
    "text": "alerts you can actually set up your alert in a way that you will automatically get an email when you're a",
    "start": "379800",
    "end": "385380"
  },
  {
    "text": "double spending reaches a certain limit customers or frequently asked us hey can",
    "start": "385380",
    "end": "390540"
  },
  {
    "text": "you get my costs well we could but most of our customers don't want to because",
    "start": "390540",
    "end": "396150"
  },
  {
    "text": "imagine you're running this super successful e-commerce website and you're making a lot of money with your infrastructure on AWS and then",
    "start": "396150",
    "end": "402870"
  },
  {
    "text": "suddenly you reach your cap you don't want us to shut down resources so we prefer to hand over control to you by",
    "start": "402870",
    "end": "409349"
  },
  {
    "text": "using a double billing alerts you can even automate those alerts you can use those alerts to automatically do something with your infrastructure but",
    "start": "409349",
    "end": "416279"
  },
  {
    "text": "we don't want to do it for you we want to reach we want you to reach that decision on your own you can use the ADA",
    "start": "416279",
    "end": "422340"
  },
  {
    "start": "422000",
    "end": "422000"
  },
  {
    "text": "based billing console to drill down deeper into your AWS bill and figure out what are the biggest pieces of my pie",
    "start": "422340",
    "end": "429240"
  },
  {
    "text": "that I want to optimize on so that's a very very useful way just pick the biggest piece of the pie and then look",
    "start": "429240",
    "end": "435960"
  },
  {
    "text": "at the best practices we're gonna share sooner and we we even have an automating",
    "start": "435960",
    "end": "441090"
  },
  {
    "start": "440000",
    "end": "440000"
  },
  {
    "text": "way for you to save money you can use the AWS trusted adviser which comes free",
    "start": "441090",
    "end": "446400"
  },
  {
    "text": "with business or enterprise support and trusted advisor is an automated system that will scan your AWS infrastructure",
    "start": "446400",
    "end": "452819"
  },
  {
    "text": "and it will identify pieces where you can do something better it will scan it for security scan for availability and",
    "start": "452819",
    "end": "460139"
  },
  {
    "text": "even for cost optimization you can actually get a database trusted adviser cost optimization report and it will",
    "start": "460139",
    "end": "467219"
  },
  {
    "text": "tell you where are those idle instances that you may want to shut down how can you save money with reserved instances",
    "start": "467219",
    "end": "473610"
  },
  {
    "text": "and how much money would you be able to say with reserved instances and I'm very happy to announce that we have a free",
    "start": "473610",
    "end": "480569"
  },
  {
    "start": "480000",
    "end": "480000"
  },
  {
    "text": "trusted adviser trial period coming up so beginning December 6 you will be",
    "start": "480569",
    "end": "486180"
  },
  {
    "text": "enjoying the benefits of trusted adviser even if you're not on business support so you can use this to kick-start your",
    "start": "486180",
    "end": "492539"
  },
  {
    "text": "cost savings and read through those trusted advisor reports improve your architecture improve your your cost",
    "start": "492539",
    "end": "499259"
  },
  {
    "text": "efficiency and there's no action required you don't even need to sign up you will automatically get access to AWS",
    "start": "499259",
    "end": "504930"
  },
  {
    "text": "trusted adviser even if you're not on business support of course you want to",
    "start": "504930",
    "end": "510539"
  },
  {
    "text": "be more active in terms of saving money so this is what you can do first the easiest way to save money on AWS is to",
    "start": "510539",
    "end": "517380"
  },
  {
    "text": "look at reserved instances and optimize your spending using reserved instances so reserved instances work very simple",
    "start": "517380",
    "end": "524219"
  },
  {
    "start": "522000",
    "end": "522000"
  },
  {
    "text": "this is a very simple yeah billing thing if you know that you're going to use a",
    "start": "524219",
    "end": "530190"
  },
  {
    "text": "certain amount of ec2 resources down the road you can actually pre pay for those resources and by pre",
    "start": "530190",
    "end": "536740"
  },
  {
    "text": "paying for those resources you enjoy a big discount and that discount can even",
    "start": "536740",
    "end": "542170"
  },
  {
    "text": "be a very high discount more than 50% if you prepay your instances fully for a",
    "start": "542170",
    "end": "547959"
  },
  {
    "text": "full year or for a full three-year period or you can do is something in between you can prepay a little of your",
    "start": "547959",
    "end": "553209"
  },
  {
    "text": "instance and then enjoy a lower per hour price with reserved instances and the",
    "start": "553209",
    "end": "559660"
  },
  {
    "text": "periods for reserved instances are either one-year or three-year but don't think of this as a commitment for one of",
    "start": "559660",
    "end": "565720"
  },
  {
    "text": "three years because the return on investment for reserved instances can happen as early as five months or seven",
    "start": "565720",
    "end": "573100"
  },
  {
    "text": "months for your usage so when you think about reserved instance it's not a one-year commitment it's an opportunity",
    "start": "573100",
    "end": "580000"
  },
  {
    "text": "for you to save money and to reach a return on investment as early as five months down the road you should set up a",
    "start": "580000",
    "end": "588010"
  },
  {
    "text": "spreadsheet and if you are working with one of our AWS account managers they will be glad to set up that worksheet",
    "start": "588010",
    "end": "593829"
  },
  {
    "text": "for you or you can check the trusted advisor report so that you can project your cost into the future but let's",
    "start": "593829",
    "end": "599949"
  },
  {
    "text": "let's start with a real customer so I'm very happy to introduce you to Marcos Ostertag from Team internet he is one of",
    "start": "599949",
    "end": "606730"
  },
  {
    "text": "our most prominent reserved instances customers so Marcos how do you use reserved instances a team internet Thank",
    "start": "606730",
    "end": "613630"
  },
  {
    "text": "You Konstantin yeah like he just mentioned my name is Marco static and I'm the head of development of team Internet and first of all I want to",
    "start": "613630",
    "end": "620410"
  },
  {
    "start": "620000",
    "end": "620000"
  },
  {
    "text": "start with some informations about who is team Internet actually we're one of the leading companies in the domain",
    "start": "620410",
    "end": "626050"
  },
  {
    "text": "monetization business so everything around domain parking domain registration stuff like that we're a",
    "start": "626050",
    "end": "631779"
  },
  {
    "text": "fairly smaller company were only thirty people our headquarters is in Munich Germany and something a little bit",
    "start": "631779",
    "end": "638170"
  },
  {
    "text": "special about is that about us is that we are very very tech focused so we're trying to leverage tech as much as",
    "start": "638170",
    "end": "644709"
  },
  {
    "text": "possible trying to keep the overhead on people very low to be as efficient and",
    "start": "644709",
    "end": "650079"
  },
  {
    "text": "doing cost optimization as good as we can we have two main products one of the product is parking crude comm which is",
    "start": "650079",
    "end": "656800"
  },
  {
    "text": "one of the biggest domain parking platforms out there and the other project which seems to be obvious right",
    "start": "656800",
    "end": "662529"
  },
  {
    "text": "I want to talk about today in more detail is tonic tonic you can",
    "start": "662529",
    "end": "668050"
  },
  {
    "text": "cough as a real-time bidding marketplace for domain traffic we open up to other",
    "start": "668050",
    "end": "673060"
  },
  {
    "text": "traffic sources soon or we already have some but we will open up to more than net and we are seeing multiple ten",
    "start": "673060",
    "end": "680050"
  },
  {
    "text": "thousands requests every second on our API and we need to answer those requests",
    "start": "680050",
    "end": "685360"
  },
  {
    "text": "within 100 to 150 200 milliseconds which means we're a very latency sensitive and",
    "start": "685360",
    "end": "691959"
  },
  {
    "text": "we need to scale out very quickly on and need to be as cost efficient as possible on to keep our margins and that's the",
    "start": "691959",
    "end": "701050"
  },
  {
    "text": "reason why we're a heavy user of recipient census because recent instances as Konstantin just mentioned",
    "start": "701050",
    "end": "706269"
  },
  {
    "text": "are a very very easy way to save money this is a slide where you can see how",
    "start": "706269",
    "end": "712480"
  },
  {
    "text": "many instance hours are backed by a recent instance in our case so the green part of the bars are the researched",
    "start": "712480",
    "end": "719230"
  },
  {
    "text": "instance instance hours and the grey part of the bar are the on-demand instance hours so we're trying to get to",
    "start": "719230",
    "end": "726190"
  },
  {
    "text": "a 100% backed by research instance instance hours in our case and for those",
    "start": "726190",
    "end": "732250"
  },
  {
    "text": "months where you can see that the great part is a little bit bigger then at other months those are the month where",
    "start": "732250",
    "end": "737350"
  },
  {
    "text": "we adding new features new parts of an infrastructure whatever then we're trying out from those instance types",
    "start": "737350",
    "end": "744190"
  },
  {
    "text": "instance families on on-demand and as soon as we know okay this is the right instance family or the right instance",
    "start": "744190",
    "end": "750970"
  },
  {
    "text": "type then we back exactly dead instance via research instances it recently there",
    "start": "750970",
    "end": "757450"
  },
  {
    "start": "757000",
    "end": "757000"
  },
  {
    "text": "was an update on the recent instances um and it's a great update for customers in my opinion because there were two main",
    "start": "757450",
    "end": "763540"
  },
  {
    "text": "changes one change was on AWS decoupled the cost optimization by research",
    "start": "763540",
    "end": "769930"
  },
  {
    "text": "instances from the capacity reservation that means you now don't have to choose",
    "start": "769930",
    "end": "775300"
  },
  {
    "text": "an exact availability zone where you run your research the instance in that was it like it as before now you can change",
    "start": "775300",
    "end": "782649"
  },
  {
    "text": "even your already existing research the instances to the scope of region which means before that update you always had",
    "start": "782649",
    "end": "790149"
  },
  {
    "text": "to tell AWS I want to run this research instance for example in use east 1a now",
    "start": "790149",
    "end": "796690"
  },
  {
    "text": "on and if you started an instance and use its East one see that doesn't matter research instance it wasn't backed by",
    "start": "796690",
    "end": "803119"
  },
  {
    "text": "that now you can just choose the scope region which means in that region that",
    "start": "803119",
    "end": "808189"
  },
  {
    "text": "you bought the research instance in our example use East one for example no matter in what availability zone you're",
    "start": "808189",
    "end": "814009"
  },
  {
    "text": "starting up this specific instance type of the specific instance family you it will be backed by that research instance",
    "start": "814009",
    "end": "821089"
  },
  {
    "text": "you just bought so that gives you more flexibility especially if you think about auto scaling about distributing",
    "start": "821089",
    "end": "827929"
  },
  {
    "text": "your load over several availability zones which you always should do obviously for the high availability that",
    "start": "827929",
    "end": "834439"
  },
  {
    "text": "makes it a lot easier to calculated things and take away this cost optimization there's no downside on that",
    "start": "834439",
    "end": "841970"
  },
  {
    "text": "so besides that you don't have a capacity reservation but for example in our case we don't need the capacity",
    "start": "841970",
    "end": "847220"
  },
  {
    "text": "reservation at all we just use reserved instance for a cost optimization effect so that's a great benefit for us in that",
    "start": "847220",
    "end": "854149"
  },
  {
    "text": "case the other update was the introduction of convertible researched",
    "start": "854149",
    "end": "859759"
  },
  {
    "start": "856000",
    "end": "856000"
  },
  {
    "text": "instances and convertible resist instances have the goal to give us as a",
    "start": "859759",
    "end": "866419"
  },
  {
    "text": "customer even more flexible way of how we deal with research instances because",
    "start": "866419",
    "end": "872779"
  },
  {
    "text": "the standard reserved instances you hadn't a chance to change the instance",
    "start": "872779",
    "end": "878179"
  },
  {
    "text": "family if you bought something for C for whatever you never could change the C",
    "start": "878179",
    "end": "883759"
  },
  {
    "text": "for later on with the convertible one you can do that um and as recently",
    "start": "883759",
    "end": "889129"
  },
  {
    "text": "mentioned the c5 will be there soon that means if you buy today a C for standard",
    "start": "889129",
    "end": "895970"
  },
  {
    "text": "research instance you don't have to change chance to change that to c5 as",
    "start": "895970",
    "end": "901189"
  },
  {
    "text": "soon as they GA with the convertible receptor instance you now can you can exactly use this kind of of sorry this",
    "start": "901189",
    "end": "912949"
  },
  {
    "text": "this this kind of innovation AWS does on the different instance families even",
    "start": "912949",
    "end": "918679"
  },
  {
    "text": "when you have researched instances with the convertible one once as you can see in the red circle on the convertible",
    "start": "918679",
    "end": "925189"
  },
  {
    "text": "ones are only available for three years other than the standard one where you can one year or three years but if you",
    "start": "925189",
    "end": "933049"
  },
  {
    "text": "look at the effective rate convertible received instance the effective rate of a three-year",
    "start": "933049",
    "end": "938660"
  },
  {
    "text": "convertible instance is better then the one year standard one which means if you",
    "start": "938660",
    "end": "945470"
  },
  {
    "text": "already know upfront that you will run an instance and as I said you can change",
    "start": "945470",
    "end": "951290"
  },
  {
    "text": "the instance family and you can change the instance type later on if you know that you will run this for one and a",
    "start": "951290",
    "end": "956870"
  },
  {
    "text": "half or even two years that's totally enough to get break-even at that point you can buy a convertible recent",
    "start": "956870",
    "end": "963199"
  },
  {
    "text": "instance and change that later on if you want to grow out if you want to scale up or if you want to use newly introduced",
    "start": "963199",
    "end": "970250"
  },
  {
    "text": "instance families and so I think that's a great way of dealing with research",
    "start": "970250",
    "end": "975319"
  },
  {
    "text": "instances it's gotten a little bit more complex in my opinion but I think it's still easy enough just to take away this",
    "start": "975319",
    "end": "982970"
  },
  {
    "text": "fifty to up to 60 percent arm of cost savings in that rent and we're saving",
    "start": "982970",
    "end": "988339"
  },
  {
    "text": "multiple thousand dollars just by having our instance suspect where we serve the instances thanks Marcus so that was a",
    "start": "988339",
    "end": "998779"
  },
  {
    "start": "995000",
    "end": "995000"
  },
  {
    "text": "business part and we hope that those were good set of tools for your your business people out there so who's an",
    "start": "998779",
    "end": "1005559"
  },
  {
    "text": "architect okay good number of Architects here so let's talk about architecture",
    "start": "1005559",
    "end": "1010839"
  },
  {
    "text": "and how you can avoid as much waste as possible by architecting smartly and I",
    "start": "1010839",
    "end": "1017980"
  },
  {
    "text": "think this is a great theme because it tires well into the lean movement where you try to avoid waste in order to not",
    "start": "1017980",
    "end": "1025058"
  },
  {
    "text": "have too much clutter around and in this case you're trying to avoid waste so that you don't pay for unnecessary",
    "start": "1025059",
    "end": "1030938"
  },
  {
    "text": "pieces of architecture and the easiest way to do that is to simply turn off unused instances this sounds super",
    "start": "1030939",
    "end": "1038260"
  },
  {
    "start": "1033000",
    "end": "1033000"
  },
  {
    "text": "obvious but you would be surprised at how many instances are out there that are completely idle and not doing",
    "start": "1038260",
    "end": "1044798"
  },
  {
    "text": "anything you'd be surprised at how many storage volumes are out there that are not storing any data and the reason here",
    "start": "1044799",
    "end": "1051669"
  },
  {
    "text": "is that it's so easy to start an instance and then you forget about it so by becoming smarter at managing your",
    "start": "1051669",
    "end": "1057460"
  },
  {
    "text": "instances you can save a lot of money and those instances tend to be developer",
    "start": "1057460",
    "end": "1062620"
  },
  {
    "text": "and test and training instances that typically are only used throughout the day but they are not used",
    "start": "1062620",
    "end": "1068410"
  },
  {
    "text": "tonight or over weekends or while you're traveling to a conference like this so why don't stop why not stop those",
    "start": "1068410",
    "end": "1074290"
  },
  {
    "text": "instances and I work with a lot of enterprise customers as a Solutions Architect and this is something non-obvious to",
    "start": "1074290",
    "end": "1081370"
  },
  {
    "text": "them because they are used to buying a server and then having that server run 24/7 in their data center so the first",
    "start": "1081370",
    "end": "1087430"
  },
  {
    "text": "thing they do on AWS is they started an instance and then they forget about it and then they just use it when they want",
    "start": "1087430",
    "end": "1092860"
  },
  {
    "text": "you can actually treat instances as disposable units of compute and that is",
    "start": "1092860",
    "end": "1099190"
  },
  {
    "text": "the way you should look at it virtual machines in the cloud so here's an",
    "start": "1099190",
    "end": "1104290"
  },
  {
    "start": "1104000",
    "end": "1104000"
  },
  {
    "text": "example of a large software company in Germany that is that has become smarter at stopping their instances for",
    "start": "1104290",
    "end": "1111700"
  },
  {
    "text": "development and test and you can see very nicely on this graph for each instance that they run how this affects",
    "start": "1111700",
    "end": "1117910"
  },
  {
    "text": "their total instance usage over time you can actually make out the the weekend on this graph and the vacation period and",
    "start": "1117910",
    "end": "1124930"
  },
  {
    "text": "that sort of things and in this example this customer is saving 35% on their ec2 cost just by shutting down instances",
    "start": "1124930",
    "end": "1132070"
  },
  {
    "text": "that are no longer used in their development and test environment so if you're not doing this already this is",
    "start": "1132070",
    "end": "1137320"
  },
  {
    "text": "the first thing to look for in cost savings just try to figure out what are your development and test and training",
    "start": "1137320",
    "end": "1143770"
  },
  {
    "text": "instances and how can you stop them over the the night or over the weekend and you can use tagging for it for example",
    "start": "1143770",
    "end": "1150580"
  },
  {
    "text": "to make sure you get the right instances and of course you can use automation to have your program do this automatically",
    "start": "1150580",
    "end": "1158320"
  },
  {
    "start": "1154000",
    "end": "1154000"
  },
  {
    "text": "for you so you can use the area's SDK or command line utility with patch jobs to automatically look out for idle",
    "start": "1158320",
    "end": "1165130"
  },
  {
    "text": "instances that are tagged as development tests or training and automatically stop them during off-hours and over the",
    "start": "1165130",
    "end": "1171880"
  },
  {
    "text": "weekend and you can also automatically start them again so that your users don't even notice that their unit instances have been stopped over the",
    "start": "1171880",
    "end": "1178540"
  },
  {
    "text": "night or over the weekend you can become more sophisticated as you automate your infrastructure and you always should",
    "start": "1178540",
    "end": "1183910"
  },
  {
    "text": "automate your infrastructure you can even start and stop whole architectures using cloud formation templates so if",
    "start": "1183910",
    "end": "1190720"
  },
  {
    "text": "your dev test and training environment is something that is more complicated maybe it's a full web application with",
    "start": "1190720",
    "end": "1195940"
  },
  {
    "text": "the database and ec2 instance and whatever you can automate the whole thing using CloudFormation and then you",
    "start": "1195940",
    "end": "1201220"
  },
  {
    "text": "can shut down the whole data center the whole virtual data center over the weekend and save some money there are some open-source",
    "start": "1201220",
    "end": "1207580"
  },
  {
    "text": "tools out there that you can use Netflix janitor monkey is one example or you can use the cloud lytx ec2 scheduler that",
    "start": "1207580",
    "end": "1213490"
  },
  {
    "text": "does all of this starting stopping based on tags automatically for you or you can",
    "start": "1213490",
    "end": "1218620"
  },
  {
    "text": "use a simple AWS service which is auto-scaling so who in this room is using auto-scaling already very good i",
    "start": "1218620",
    "end": "1226809"
  },
  {
    "text": "see the payoff of my previous talks thank you thank you very much so auto scaling is simple and since many of you",
    "start": "1226809",
    "end": "1233710"
  },
  {
    "start": "1232000",
    "end": "1232000"
  },
  {
    "text": "know about this already actually auto scaling is about having the right size fleet for your demand so",
    "start": "1233710",
    "end": "1240159"
  },
  {
    "text": "it's actually a demand management thing and it makes sure that you always can service all of your requests no matter",
    "start": "1240159",
    "end": "1245440"
  },
  {
    "text": "how much how much traffic you see but on the other end auto scaling can shut down",
    "start": "1245440",
    "end": "1250830"
  },
  {
    "text": "unused instances and that is what cost optimization comes in so if you haven't been using auto scaling yet please do so",
    "start": "1250830",
    "end": "1257590"
  },
  {
    "text": "and auto scaling is something that is easy to program this is the piece of cloud formation that you would use to",
    "start": "1257590",
    "end": "1263080"
  },
  {
    "start": "1261000",
    "end": "1261000"
  },
  {
    "text": "set up a launch configuration basically it's writing into code everything you would enter into the AWS wizard to start",
    "start": "1263080",
    "end": "1270490"
  },
  {
    "text": "a new instance so that cloud for us so that auto scaling knows how to start a new instance on your behalf and then you",
    "start": "1270490",
    "end": "1276220"
  },
  {
    "text": "program your auto scaling group along your own rules so you can set what is the minimum and maximum amount of",
    "start": "1276220",
    "end": "1281710"
  },
  {
    "start": "1277000",
    "end": "1277000"
  },
  {
    "text": "instances you want to have and by what rules you want to scale up or scale down and here's a customer example on how",
    "start": "1281710",
    "end": "1288280"
  },
  {
    "text": "this can look in practice so in this example we are talking about a web fleet that is automatically scaling up as",
    "start": "1288280",
    "end": "1294820"
  },
  {
    "text": "demand grows and it's scaling down and you can see how during the course of a day the demand goes up and the number of",
    "start": "1294820",
    "end": "1301240"
  },
  {
    "text": "instances goes up from about 60 to close to 200 instances and then you can see",
    "start": "1301240",
    "end": "1306940"
  },
  {
    "text": "how it goes down pretty quickly over the night and this is a great example on how you can automatically align demand with",
    "start": "1306940",
    "end": "1314409"
  },
  {
    "text": "supply on ec2 instances and every time this line goes down this customer is saving a lot of money now let's become a",
    "start": "1314409",
    "end": "1322539"
  },
  {
    "text": "bit more sophisticated and one of my favorite subjects is spot instances is",
    "start": "1322539",
    "end": "1327640"
  },
  {
    "start": "1325000",
    "end": "1325000"
  },
  {
    "text": "anybody using spot instances already very good again a little bit of pay off but you can do you can do better here",
    "start": "1327640",
    "end": "1334179"
  },
  {
    "text": "right so spotting says what a spot instances now if you listen to James Hamilton's talk you get a feel about how",
    "start": "1334179",
    "end": "1340630"
  },
  {
    "text": "really mind-boggling Lee large the AWS infrastructures 14 regions and James",
    "start": "1340630",
    "end": "1347020"
  },
  {
    "text": "mentioned that it's not unusual to have an availability zone with hundreds of thousands of servers that are sitting",
    "start": "1347020",
    "end": "1353080"
  },
  {
    "text": "there in our data centers we have to keep a very very large capacity because we never know when customers are gonna",
    "start": "1353080",
    "end": "1359200"
  },
  {
    "text": "start a new instance and we always need to be able to service them so to do that we keep a big overhead of instances we",
    "start": "1359200",
    "end": "1366220"
  },
  {
    "text": "have a lot more instances that our customers actually use so what we what do we do with it so we keep a lot of",
    "start": "1366220",
    "end": "1372190"
  },
  {
    "text": "idle capacity if you will and we have to because we're a utility company so we're doing the same as other utility",
    "start": "1372190",
    "end": "1378790"
  },
  {
    "text": "companies do we resell our excess capacity on the spot market and that's",
    "start": "1378790",
    "end": "1383980"
  },
  {
    "text": "what's what instances are and that means you can bid your own price that you choose on the easy to spot market and",
    "start": "1383980",
    "end": "1391270"
  },
  {
    "text": "then we will take all of the bits from our customers and match it against the excess capacity that we have in our data",
    "start": "1391270",
    "end": "1398020"
  },
  {
    "text": "centers and compute a very finely grained minute-by-minute price of what",
    "start": "1398020",
    "end": "1405100"
  },
  {
    "text": "is the current spot bid price for spot instances and if that current price is",
    "start": "1405100",
    "end": "1411010"
  },
  {
    "text": "below your maximum bid you get to enjoy that instance at the lowest price at the",
    "start": "1411010",
    "end": "1416350"
  },
  {
    "text": "moment and that price difference can be around 90% so it is perfectly possible",
    "start": "1416350",
    "end": "1422200"
  },
  {
    "text": "to launch an ec2 instance under the spot market at only a tenth of the on-demand",
    "start": "1422200",
    "end": "1427630"
  },
  {
    "text": "price so what's the downside here you what you you might ask well the downside is if the price goes up and it crosses",
    "start": "1427630",
    "end": "1434680"
  },
  {
    "text": "your maximum price then we will terminate that instance because we have found somebody else who is willing to",
    "start": "1434680",
    "end": "1440200"
  },
  {
    "text": "pay more for that instance and then we will terminate the instance and give it to somebody else so that sounds a little",
    "start": "1440200",
    "end": "1445480"
  },
  {
    "text": "bit scary at the moment because of course we all want to enjoy great availability so what do you do well you",
    "start": "1445480",
    "end": "1451810"
  },
  {
    "text": "learned about auto scaling right you can have one fleet of instances scale using",
    "start": "1451810",
    "end": "1457870"
  },
  {
    "text": "spot instances saving a lot of money automatically and you can have a second lete of instances that does exactly the",
    "start": "1457870",
    "end": "1465400"
  },
  {
    "text": "same job but it only scales up as the spot instance it goes down because the price is not",
    "start": "1465400",
    "end": "1471519"
  },
  {
    "text": "right at the moment so you can always compensate for any terminated spot instance by having a smarter",
    "start": "1471519",
    "end": "1476710"
  },
  {
    "text": "architecture that automatically adjusts itself so that means that you can get the benefits of both worlds you can",
    "start": "1476710",
    "end": "1482830"
  },
  {
    "text": "enjoy very low prices with spot and you can still have a very highly available",
    "start": "1482830",
    "end": "1487840"
  },
  {
    "text": "architecture so that's great and the other thing is when we terminate an instance on the on the spot model you",
    "start": "1487840",
    "end": "1494470"
  },
  {
    "text": "get a two minute advance notice that's plenty of time to run a script to write down all your data to disk and then to",
    "start": "1494470",
    "end": "1500409"
  },
  {
    "text": "pick up later on so look at spot instances and Verna launched yesterday",
    "start": "1500409",
    "end": "1505740"
  },
  {
    "text": "the new a De Beers batch service which is great it automatically takes",
    "start": "1505740",
    "end": "1510970"
  },
  {
    "text": "advantage of spot instances on your behalf so any batch job that you want to",
    "start": "1510970",
    "end": "1516129"
  },
  {
    "text": "run you can use the batch service to automatically map it onto a spot instance fleet and it will take care of",
    "start": "1516129",
    "end": "1523269"
  },
  {
    "text": "rerunning your batch job if the spot instance price is not really good at the moment and you lost your spot instance",
    "start": "1523269",
    "end": "1529720"
  },
  {
    "text": "so really great way to save money by combining services and combining the aid",
    "start": "1529720",
    "end": "1535389"
  },
  {
    "text": "of his batch service with spot instances here is an example on how the pricing looks like it really looks like the",
    "start": "1535389",
    "end": "1540789"
  },
  {
    "start": "1539000",
    "end": "1539000"
  },
  {
    "text": "stock market a little bit it looks a bit more binary than that but it you you get the idea you can actually download the",
    "start": "1540789",
    "end": "1547450"
  },
  {
    "text": "historic prices for the last six weeks with the spot API you can analyze no",
    "start": "1547450",
    "end": "1552580"
  },
  {
    "text": "surprises and then you can decide what is the best price you want to bid on and as you can see occasionally the price",
    "start": "1552580",
    "end": "1559210"
  },
  {
    "text": "can even be higher than on demand and this is because the same mechanisms take place there are runs on spot instances",
    "start": "1559210",
    "end": "1565240"
  },
  {
    "text": "there are customers who actually are calculating strategies on how to bid on the spot market and they know that they",
    "start": "1565240",
    "end": "1572620"
  },
  {
    "text": "are ok to pay more for an instance under the spot model because they know that over time and as everything averages",
    "start": "1572620",
    "end": "1579490"
  },
  {
    "text": "itself out the average price is always going to be below the on demand so you can get really sophisticated with spot",
    "start": "1579490",
    "end": "1584830"
  },
  {
    "text": "pricing here and have you run into a customer before who fed this everything",
    "start": "1584830",
    "end": "1589929"
  },
  {
    "text": "into a machine running service but that may be a nice idea to to kick around so here are some great use cases for spot",
    "start": "1589929",
    "end": "1596289"
  },
  {
    "start": "1595000",
    "end": "1595000"
  },
  {
    "text": "you can use this for any stateless web and application server fleet just remember to automate around",
    "start": "1596289",
    "end": "1601820"
  },
  {
    "text": "instance termination but to be honest you always need to be prepared for a machine to fail because even even AWS",
    "start": "1601820",
    "end": "1610220"
  },
  {
    "text": "instances are running on real physical hardware we haven't figured out the fully ephemeral part yet so that means",
    "start": "1610220",
    "end": "1616640"
  },
  {
    "text": "that you need to be prepared if the hardware fails you need to restart your instance anyway this is how auto scaling",
    "start": "1616640",
    "end": "1621950"
  },
  {
    "text": "can help you a lot and then it's not a it's not a big difference between an instance failing because the hardware",
    "start": "1621950",
    "end": "1627290"
  },
  {
    "text": "fails or an instance being terminated because the spot price doesn't look right at the moment so you can always compensate for that Amazon Elastic",
    "start": "1627290",
    "end": "1634220"
  },
  {
    "text": "MapReduce is a great example for running bad shots it's a bad use case thing that",
    "start": "1634220",
    "end": "1639440"
  },
  {
    "text": "automatically supports Spore instances you can use it for continuous integration as a customer who is putting",
    "start": "1639440",
    "end": "1645020"
  },
  {
    "text": "the whole continuous integration pipeline on spot saving a lot of money there you can use it for high-performance computing using the new",
    "start": "1645020",
    "end": "1650780"
  },
  {
    "text": "alias batch service and grid computing same here so feel free to check out the",
    "start": "1650780",
    "end": "1656090"
  },
  {
    "text": "spot website lots of good things there including a spot bit advisor the spot bit advisor will tell you for a given",
    "start": "1656090",
    "end": "1663350"
  },
  {
    "start": "1659000",
    "end": "1659000"
  },
  {
    "text": "instance type or for a number of instance types how likely is it going to be to lose that instance under your",
    "start": "1663350",
    "end": "1671270"
  },
  {
    "text": "price because somebody else's outbidding you and if the likelihood is low it",
    "start": "1671270",
    "end": "1676910"
  },
  {
    "text": "means that over the last month's you wouldn't have lost your instance any time you would you would have kept your",
    "start": "1676910",
    "end": "1683480"
  },
  {
    "text": "instance for all the time at your lowest price and and that gives you an indication of what the likelihood is to",
    "start": "1683480",
    "end": "1690440"
  },
  {
    "text": "have an instance termination event so to recap spot instances are very dynamic",
    "start": "1690440",
    "end": "1695900"
  },
  {
    "start": "1693000",
    "end": "1693000"
  },
  {
    "text": "pricing but you have the opportunity to save 80 to 90 percent cost there are",
    "start": "1695900",
    "end": "1701210"
  },
  {
    "text": "some risks but you can mitigate against those risks by being more flexible about the instance choice the bigger the range",
    "start": "1701210",
    "end": "1707840"
  },
  {
    "text": "of instances you are allowed to use or you are allowing us to use with Swissport the bigger the likelihood that",
    "start": "1707840",
    "end": "1713510"
  },
  {
    "text": "you will find an instance of the low price and then you can leverage auto scaling to make sure you always get the",
    "start": "1713510",
    "end": "1718970"
  },
  {
    "text": "capacity you want even at very low prices you can use spots leads to manage",
    "start": "1718970",
    "end": "1724010"
  },
  {
    "text": "thousands of instances under the spot model for you and automate the whole support optimization thing so we talked",
    "start": "1724010",
    "end": "1731600"
  },
  {
    "text": "a lot about instances and a lot of customers tell us what well I have a very small application",
    "start": "1731600",
    "end": "1736910"
  },
  {
    "text": "it's it doesn't even use an instance at all I'm using your smallest instance type and it's still idling most of the",
    "start": "1736910",
    "end": "1743700"
  },
  {
    "text": "time I don't need auto scaling I don't need to scale because it's just a small job so how what can I do there so you",
    "start": "1743700",
    "end": "1750480"
  },
  {
    "text": "can actually leverage the Amazon ec2 container service to save on those very",
    "start": "1750480",
    "end": "1756030"
  },
  {
    "start": "1752000",
    "end": "1752000"
  },
  {
    "text": "very small applications and the way to do that is if you look at your small applications this could be like simple",
    "start": "1756030",
    "end": "1761820"
  },
  {
    "text": "cron jobs or simple DevOps tools that are running they're mostly doing nothing",
    "start": "1761820",
    "end": "1767100"
  },
  {
    "text": "but when they should do something then you always want to have them there you can take a look at all of those",
    "start": "1767100",
    "end": "1772410"
  },
  {
    "text": "applications that are today running on individual instances and then you can consolidate them into a smaller amount",
    "start": "1772410",
    "end": "1778710"
  },
  {
    "text": "of ec2 instances by putting them into docker instances so docker is a way to",
    "start": "1778710",
    "end": "1783960"
  },
  {
    "text": "abstract your operating system in a way so that the application still thinks it's running on its own machine but",
    "start": "1783960",
    "end": "1790230"
  },
  {
    "text": "instead it's running on a docker instance and the great thing about docker is you can have multiple docker containers within the same ec2 instance",
    "start": "1790230",
    "end": "1796890"
  },
  {
    "text": "and so you can consolidate all of those mini scripts into a smaller fleet of poker machines and then save money",
    "start": "1796890",
    "end": "1804660"
  },
  {
    "text": "because you don't need that many real instances and then you can go a step",
    "start": "1804660",
    "end": "1810360"
  },
  {
    "text": "further you can leverage a W lambda so who's using lambda today ok so you're",
    "start": "1810360",
    "end": "1816180"
  },
  {
    "text": "already familiar with lambda a little bit so the ADA is lambda model is simple you just upload your code in a zip file",
    "start": "1816180",
    "end": "1821640"
  },
  {
    "text": "and it gets triggered by events and you don't have to manage any machines anymore and you can use this this lambda",
    "start": "1821640",
    "end": "1829460"
  },
  {
    "start": "1829000",
    "end": "1829000"
  },
  {
    "text": "model to re-architect existing applications so that they run on lambda",
    "start": "1829460",
    "end": "1834780"
  },
  {
    "text": "instead of running on ec2 instances or on docker think of lambda is an even smaller in more lightweight way than",
    "start": "1834780",
    "end": "1842360"
  },
  {
    "text": "docker containers and if you can bring your batch job or your cron job or your",
    "start": "1842360",
    "end": "1847860"
  },
  {
    "text": "small tool inside a lambda function it only consumes money for those",
    "start": "1847860",
    "end": "1853230"
  },
  {
    "text": "milliseconds it's running the lambda pricing is based on hundreds of milliseconds so if your tool just runs a",
    "start": "1853230",
    "end": "1860310"
  },
  {
    "text": "couple of seconds he will only be billed at the second granularity or the 100 milliseconds granularity and the lambda",
    "start": "1860310",
    "end": "1866820"
  },
  {
    "text": "team told me that if you're seeing an epoch today that sees less than 40 percent utilization it's definitely worth",
    "start": "1866820",
    "end": "1872399"
  },
  {
    "text": "looking at how you can really tactic using lambda and then save a lot of money because lambda never lets you pay",
    "start": "1872399",
    "end": "1878460"
  },
  {
    "text": "for idle capacity it's only it's a fully pay per use model at the code level so",
    "start": "1878460",
    "end": "1884159"
  },
  {
    "text": "great great opportunity here so we talked a lot about compute now let's talk about databases and Marco's is",
    "start": "1884159",
    "end": "1891149"
  },
  {
    "text": "really has become really smart over time on how to optimize database utilization so let us know Marcus what are you doing",
    "start": "1891149",
    "end": "1898289"
  },
  {
    "text": "here thank you yeah um like you mentioned optimizing databases or cost optimizing data misses",
    "start": "1898289",
    "end": "1903960"
  },
  {
    "text": "always means optimizing database utilization and one of the very obvious",
    "start": "1903960",
    "end": "1909149"
  },
  {
    "start": "1908000",
    "end": "1908000"
  },
  {
    "text": "things but also very hard things is just cache cache or everything which you have",
    "start": "1909149",
    "end": "1914249"
  },
  {
    "text": "inside of your database we haven't had an application which was directly talking to DynamoDB and amazon Aurora in",
    "start": "1914249",
    "end": "1920399"
  },
  {
    "text": "our case and then we put any less to cache Redis instance between our application in those two databases so",
    "start": "1920399",
    "end": "1927119"
  },
  {
    "text": "every time our application now needs to read from one of the databases it first asks Redis if there is already something",
    "start": "1927119",
    "end": "1932909"
  },
  {
    "text": "in the cache if not only then we're talking directly to the database and save back the result to the cache so",
    "start": "1932909",
    "end": "1939809"
  },
  {
    "text": "that for later on coming same requests we can deliver it directly out of the",
    "start": "1939809",
    "end": "1946200"
  },
  {
    "text": "cache this is the graph arm I'm not sure if you see where we deployed it to the",
    "start": "1946200",
    "end": "1952559"
  },
  {
    "start": "1948000",
    "end": "1948000"
  },
  {
    "text": "cache that's our dynamodb reads on very single table on we saved on this table 3000",
    "start": "1952559",
    "end": "1960720"
  },
  {
    "text": "reads per second and as dynamodb is paid by provision throughput that means that",
    "start": "1960720",
    "end": "1966960"
  },
  {
    "text": "you we just can say scale it down now our person throughput which saves us on",
    "start": "1966960",
    "end": "1971970"
  },
  {
    "text": "our whole database or whole DynamoDB infrastructure on more than 20,000 requests every second and so we're",
    "start": "1971970",
    "end": "1979230"
  },
  {
    "text": "talking about multiple thousand dollars every month we're just saving with this very single realistic cash Redis",
    "start": "1979230",
    "end": "1986549"
  },
  {
    "text": "instance because Redis is in-memory database on which makes it very very fast and so you don't pay it per read or",
    "start": "1986549",
    "end": "1996029"
  },
  {
    "text": "per requests you paid per hour so think about the different way of what you're",
    "start": "1996029",
    "end": "2001490"
  },
  {
    "text": "paying for what actually dynamodb is great to scale out on the proof for provisions",
    "start": "2001490",
    "end": "2007249"
  },
  {
    "text": "throughput so on the throughput thing but if you know you have a very great baseline on throughputs just think about",
    "start": "2007249",
    "end": "2013039"
  },
  {
    "text": "caching and just put an elastic a shred it in front of that arm and it will save you a lot of money but when you are into",
    "start": "2013039",
    "end": "2020749"
  },
  {
    "text": "caching or when you go into caching think about what you can catch and what you should catch when we first deployed",
    "start": "2020749",
    "end": "2028459"
  },
  {
    "text": "our caches we made a mistake we didn't think about negative caching and when I",
    "start": "2028459",
    "end": "2033769"
  },
  {
    "text": "say negative caching what I mean is that we're doing real-time bidding so one of",
    "start": "2033769",
    "end": "2039409"
  },
  {
    "text": "our biggest questions or most asks questions against our databases hey",
    "start": "2039409",
    "end": "2044469"
  },
  {
    "text": "please give me the highest bit for this specific targeting options and many",
    "start": "2044469",
    "end": "2050179"
  },
  {
    "text": "times and that's totally ok for our database us this are answering with I don't have a bit so it's an empty result",
    "start": "2050179",
    "end": "2056388"
  },
  {
    "text": "and it's totally ok but we forgot that this empty result is a very very",
    "start": "2056389",
    "end": "2062599"
  },
  {
    "text": "valuable information because if we ask the same database just a second later exact same question it will again answer",
    "start": "2062599",
    "end": "2069470"
  },
  {
    "text": "with no result but we just hate again for an answer we already know so why not saving this",
    "start": "2069470",
    "end": "2077270"
  },
  {
    "text": "there is no result inside of the cache so that the cache can answer hey the variables will say there is no",
    "start": "2077270",
    "end": "2083450"
  },
  {
    "text": "result and we did exactly that on the left side you see our cached ratio without the negative caching so we had a",
    "start": "2083450",
    "end": "2090169"
  },
  {
    "text": "cache of ratio of 25 to 30% which is not that bad but then on the right side we",
    "start": "2090169",
    "end": "2096559"
  },
  {
    "text": "deployed exactly that small change of hey let's save this no result to cache",
    "start": "2096559",
    "end": "2103369"
  },
  {
    "text": "and we boost up our cash ratio to 89 to 95% so those numbers around means only",
    "start": "2103369",
    "end": "2111559"
  },
  {
    "text": "in five to eleven percent of all our requests we're doing against our database we now actually need to ask the",
    "start": "2111559",
    "end": "2119000"
  },
  {
    "text": "database itself and that saves an additional multiple thousand dollars every month just by this very similar T",
    "start": "2119000",
    "end": "2125900"
  },
  {
    "text": "as tweet and thinking about what should we cache and what can we cache at that point but talking about caching always",
    "start": "2125900",
    "end": "2135200"
  },
  {
    "start": "2133000",
    "end": "2133000"
  },
  {
    "text": "means talking about cache invalidation and there is this very famous quote from for cotton there are only two hard things in",
    "start": "2135200",
    "end": "2141810"
  },
  {
    "text": "computer science cache invalidation and naming things and I think the cotton is",
    "start": "2141810",
    "end": "2147720"
  },
  {
    "text": "right with both so there are two ways to catch one is this cache invalidation so",
    "start": "2147720",
    "end": "2153570"
  },
  {
    "text": "you have a time to lift for example in Redis if you set something if I set a key value pair inside of Redis you",
    "start": "2153570",
    "end": "2160140"
  },
  {
    "text": "always tell Redis okay this should live within the cache for for example 60 seconds so if you're asking reddit",
    "start": "2160140",
    "end": "2167370"
  },
  {
    "text": "within those 60 seconds it would give back exactly that well you under that if you're asking",
    "start": "2167370",
    "end": "2172410"
  },
  {
    "text": "after 6 60 seconds rather the entrepreneur I don't have anything inside of this key but there is another",
    "start": "2172410",
    "end": "2180090"
  },
  {
    "text": "way of thinking about caching and if you are sure that your cache always answers",
    "start": "2180090",
    "end": "2187650"
  },
  {
    "text": "with the right answer which would be inside of the database - you don't need to invalidate at all right because if",
    "start": "2187650",
    "end": "2194430"
  },
  {
    "text": "the cache always knows what is inside of the database you don't need to invalidate at all and for us that's the",
    "start": "2194430",
    "end": "2201420"
  },
  {
    "text": "better way of doing things so think about if you change your application to",
    "start": "2201420",
    "end": "2207330"
  },
  {
    "start": "2203000",
    "end": "2203000"
  },
  {
    "text": "actually not only write to the database to make sure it is inside of the",
    "start": "2207330",
    "end": "2213210"
  },
  {
    "text": "database but also write to the cache at the exact same time for the invent in",
    "start": "2213210",
    "end": "2219270"
  },
  {
    "text": "memory value so that you can still read from the cache all the time because now you know it's in sync all the time and",
    "start": "2219270",
    "end": "2226190"
  },
  {
    "text": "when you using dynamodb and you're using Redis as a cache there's a very nice",
    "start": "2226190",
    "end": "2232230"
  },
  {
    "text": "thing about those two database a databases because both of them are able",
    "start": "2232230",
    "end": "2237570"
  },
  {
    "text": "to result with the after write return value which means if you have for",
    "start": "2237570",
    "end": "2243060"
  },
  {
    "text": "example an incremental counter inside of those two databases both of them will answer with now after I wrote that what",
    "start": "2243060",
    "end": "2251070"
  },
  {
    "text": "you just told me the value is 5 and Redis does exactly the same and then you",
    "start": "2251070",
    "end": "2256680"
  },
  {
    "text": "can compare those two well use inside of your application if the cache is still in sync because now you can 100% sure",
    "start": "2256680",
    "end": "2263790"
  },
  {
    "text": "that your cache is in sync with the database itself so that's a very neat way",
    "start": "2263790",
    "end": "2269070"
  },
  {
    "text": "of maybe sinking those databases or you can invalidate the cache for example if",
    "start": "2269070",
    "end": "2275340"
  },
  {
    "text": "it's running out of sync or you adjust the cache back so that it's back in Sigma so some of you people might now",
    "start": "2275340",
    "end": "2283380"
  },
  {
    "start": "2283000",
    "end": "2283000"
  },
  {
    "text": "say yeah but my application is very late since it's sensitive I don't want to do the whole comparison thing and or I just",
    "start": "2283380",
    "end": "2290310"
  },
  {
    "text": "can't make application on that behalf as we are running in AWS of course there's",
    "start": "2290310",
    "end": "2295590"
  },
  {
    "text": "a solution for that so let a WS do the job for us dynamodb has a feature which is called",
    "start": "2295590",
    "end": "2302460"
  },
  {
    "text": "dynamodb streams and as constantine just mentioned lambda it's a great thing to",
    "start": "2302460",
    "end": "2307740"
  },
  {
    "text": "do it just needs events dynamodb stream exactly omits that events so every time",
    "start": "2307740",
    "end": "2314700"
  },
  {
    "text": "you're writing to a DynamoDB and changing something inside of DynamoDB the DynamoDB stream will trigger a",
    "start": "2314700",
    "end": "2320490"
  },
  {
    "text": "lambda function and this lambda function now can write this value which it is in",
    "start": "2320490",
    "end": "2326400"
  },
  {
    "text": "dynamodb now back to your cache of course you will have a slight delay of",
    "start": "2326400",
    "end": "2331850"
  },
  {
    "text": "up to a second in our experience but if you're cool with that and if that",
    "start": "2331850",
    "end": "2338130"
  },
  {
    "text": "absolutely works with you for you that your cache might have a delay of one second after a ride that's a very neat",
    "start": "2338130",
    "end": "2344640"
  },
  {
    "text": "way without the need of changing your own application to actually keep the",
    "start": "2344640",
    "end": "2350040"
  },
  {
    "text": "cache all every time in sync just by using different AWS services in a great",
    "start": "2350040",
    "end": "2357270"
  },
  {
    "text": "way and a great combination and if you're now thinking yeah but I don't work with dynamodb I work with Amazon",
    "start": "2357270",
    "end": "2363450"
  },
  {
    "text": "Aurora Amazon Aurora had recently an update I think it was end of September beginning of October where they",
    "start": "2363450",
    "end": "2369780"
  },
  {
    "text": "announced stored procedures and stored procedures can trigger lambda functions",
    "start": "2369780",
    "end": "2375690"
  },
  {
    "text": "so if you are on MySQL or as announced at reinvent here on PostgreSQL just",
    "start": "2375690",
    "end": "2381360"
  },
  {
    "text": "switch over to Aurora and then you store procedures to do exactly the same thing",
    "start": "2381360",
    "end": "2386760"
  },
  {
    "text": "and just replace dynamodb in dynamodb streams with Amazon Aurora and to store",
    "start": "2386760",
    "end": "2392250"
  },
  {
    "text": "procedures inside of Amazon Aurora now Constantine with the dynamo DB optimization itself right yeah so that",
    "start": "2392250",
    "end": "2398940"
  },
  {
    "start": "2396000",
    "end": "2396000"
  },
  {
    "text": "that is a that's a that's a great example about how you can save money and at the same",
    "start": "2398940",
    "end": "2404430"
  },
  {
    "text": "time get a better architecture because caching will accelerate your whole application - so as you can see there",
    "start": "2404430",
    "end": "2411030"
  },
  {
    "text": "are a lot of tricks you can do with dynamo DB and they also can help you a lot with performance so I would",
    "start": "2411030",
    "end": "2417480"
  },
  {
    "text": "encourage you to check out the dynamo DB documentation we always update it with the latest the best practices around",
    "start": "2417480",
    "end": "2423540"
  },
  {
    "text": "that and then think about how DynamoDB is priced so the pricing for dynamo DB is around capacity units which",
    "start": "2423540",
    "end": "2430560"
  },
  {
    "text": "essentially tells you how powerful is the database how many reads or writes can it do per second based on those",
    "start": "2430560",
    "end": "2436890"
  },
  {
    "text": "capacity units and if you understand how the billing works for instance if you look at the capacity units that are 4k",
    "start": "2436890",
    "end": "2444330"
  },
  {
    "text": "for reads but only 1k for writes sometimes you can come up with smart strategies on how you can use those",
    "start": "2444330",
    "end": "2450870"
  },
  {
    "text": "larger reads to avoid some of the rights or other the other way around and how",
    "start": "2450870",
    "end": "2456030"
  },
  {
    "text": "that affects your usage one neat trick that our customer shows em came up with actually a couple of years ago is that",
    "start": "2456030",
    "end": "2463530"
  },
  {
    "text": "you can you can actually buffer writes so right now we have talked a lot about",
    "start": "2463530",
    "end": "2468600"
  },
  {
    "text": "caching which is just useful for reading data out of the database what if you want to write data to the database you",
    "start": "2468600",
    "end": "2474270"
  },
  {
    "text": "can actually use Amazon s squares which is a queuing service to buffer",
    "start": "2474270",
    "end": "2479360"
  },
  {
    "text": "writes that don't work because right now the capacity isn't there so if you're",
    "start": "2479360",
    "end": "2484890"
  },
  {
    "text": "right capacity is limited sending you some money and you're trying to write against the dynamodb database and you",
    "start": "2484890",
    "end": "2490650"
  },
  {
    "text": "get an out of capacity exception back you can write that to an sqs kill and",
    "start": "2490650",
    "end": "2496860"
  },
  {
    "text": "then have a daemon retrying those rights after the fact when the load has gone",
    "start": "2496860",
    "end": "2502470"
  },
  {
    "text": "down and the capacity is is there this is exactly what Shazam is doing they blocked it about in there the blog post",
    "start": "2502470",
    "end": "2509070"
  },
  {
    "text": "that is their strategy for surviving the Superbowl so this is something that works at really big scale so during the",
    "start": "2509070",
    "end": "2515820"
  },
  {
    "text": "Superbowl a couple years ago they had the Super Bowl ad telling everybody in the u.s. go download Shazam and try it",
    "start": "2515820",
    "end": "2523500"
  },
  {
    "text": "out now you can imagine the big load that this generated on the DynamoDB database and by having the esq sq buffer",
    "start": "2523500",
    "end": "2532080"
  },
  {
    "text": "all of those excess writes and then writing them after fact they saved a lot of money and they",
    "start": "2532080",
    "end": "2538920"
  },
  {
    "text": "were able to survive that huge Superbowl class load so by using this right",
    "start": "2538920",
    "end": "2545249"
  },
  {
    "text": "buffering mechanism you can actually provision the right capacity based on the average users you're expecting and",
    "start": "2545249",
    "end": "2552029"
  },
  {
    "text": "not based on peak and that saves you a lot of money because you don't have to provision for peak for peak and since",
    "start": "2552029",
    "end": "2558150"
  },
  {
    "text": "DynamoDB supports dynamic adjustments in read and write capacity units you can",
    "start": "2558150",
    "end": "2564630"
  },
  {
    "start": "2559000",
    "end": "2559000"
  },
  {
    "text": "use another neat trick which is a tool called dynamic dynamo DB which is this is an open source tool that a customer",
    "start": "2564630",
    "end": "2570029"
  },
  {
    "text": "of us developed that it's a Python script that will automatically adjust your read and write capacity based on",
    "start": "2570029",
    "end": "2576509"
  },
  {
    "text": "the user so it will essentially consume cloud watch metrics out of your dynamo DB table and based on those metrics",
    "start": "2576509",
    "end": "2583430"
  },
  {
    "text": "calculate what is the best way that the best capacity I should book for dynamo",
    "start": "2583430",
    "end": "2589380"
  },
  {
    "text": "DB think of this as auto scaling for dynamo DB so that it will automatically adjust your dynamo DB tables so that you",
    "start": "2589380",
    "end": "2596489"
  },
  {
    "text": "don't spend too much money with them great tool easy way to save money on dynamo DB so there's another thing you",
    "start": "2596489",
    "end": "2603839"
  },
  {
    "text": "can do with caching we talked about caching in front of the database and you can also catch it from a good application but you can actually wrap",
    "start": "2603839",
    "end": "2609869"
  },
  {
    "text": "your whole web application inside a big worldwide cache by using Amazon CloudFront so cloud front is a network",
    "start": "2609869",
    "end": "2617880"
  },
  {
    "text": "of proxy servers worldwide at about 68 locations right now and those are proxy",
    "start": "2617880",
    "end": "2624719"
  },
  {
    "text": "caches so they will cache web traffic they were automatically cache locally so that read request from your web users",
    "start": "2624719",
    "end": "2631589"
  },
  {
    "text": "don't make it to your application they can be serviced from the cloud phone cache and that means that you get to",
    "start": "2631589",
    "end": "2637200"
  },
  {
    "text": "scale down your back-end infrastructure because a lot of that load has already been taken care of by the cloud phone",
    "start": "2637200",
    "end": "2643619"
  },
  {
    "text": "network so even if you're using a web application and you're not sure about do",
    "start": "2643619",
    "end": "2650099"
  },
  {
    "text": "I really need a content delivery network my users are all in the u.s. anyway and I see a lot of speedy improvements",
    "start": "2650099",
    "end": "2655829"
  },
  {
    "text": "try out if you can save more through cloud font by offloading a lot of the traffic to the cloud phone",
    "start": "2655829",
    "end": "2661979"
  },
  {
    "text": "network so let's move closer to operations so when you have developed an",
    "start": "2661979",
    "end": "2667769"
  },
  {
    "text": "architect if your your solution on AWS what can you do on the operational side well the operation goal",
    "start": "2667769",
    "end": "2675570"
  },
  {
    "start": "2675000",
    "end": "2675000"
  },
  {
    "text": "should be focus on what you do best and let AWS do the rest that rhymes nicely",
    "start": "2675570",
    "end": "2682200"
  },
  {
    "text": "maybe maybe maybe we can come up with a melody here to make it a jingle or something like that but before we do",
    "start": "2682200",
    "end": "2687690"
  },
  {
    "text": "that maybe let's talk about what does it actually mean yeah um that's actually",
    "start": "2687690",
    "end": "2694290"
  },
  {
    "text": "really the part about the talk I like a lot because just let AWS do the rest so",
    "start": "2694290",
    "end": "2699600"
  },
  {
    "text": "let a double let's do all the work and I think it's not only that it's nice to",
    "start": "2699600",
    "end": "2705540"
  },
  {
    "start": "2703000",
    "end": "2703000"
  },
  {
    "text": "sit on a couch and let a doorless do the work it's also very useful to think",
    "start": "2705540",
    "end": "2710820"
  },
  {
    "text": "about pushing more and more things out to the many many services AWS provides",
    "start": "2710820",
    "end": "2716220"
  },
  {
    "text": "to us as a customer because AWS has the expert for every single service even if",
    "start": "2716220",
    "end": "2723840"
  },
  {
    "text": "you're very good at running databases on ec2 even if you have experts inside of your company using or operating MySQL",
    "start": "2723840",
    "end": "2732720"
  },
  {
    "text": "databases or whatever kind of databases AWS runs really really great experts",
    "start": "2732720",
    "end": "2738710"
  },
  {
    "text": "24/7 365 days a year and so pushing out things to AWS from a",
    "start": "2738710",
    "end": "2745830"
  },
  {
    "text": "cost perspective makes sense because you don't want to run or you",
    "start": "2745830",
    "end": "2751560"
  },
  {
    "text": "don't you obviously you need to run databases to your for your application",
    "start": "2751560",
    "end": "2757020"
  },
  {
    "text": "but is that really something that provides and benefit to your customers",
    "start": "2757020",
    "end": "2762240"
  },
  {
    "text": "of course you need to run those databases to run your application but those experts you may have four",
    "start": "2762240",
    "end": "2769020"
  },
  {
    "text": "databases if you switch them over to actually think about your application and not anymore just about databases and",
    "start": "2769020",
    "end": "2776730"
  },
  {
    "text": "running databases makes more sense if you think from the point of view that",
    "start": "2776730",
    "end": "2781770"
  },
  {
    "text": "you want to write something to your customers and that's a great benefit and some months ago I think now it's more",
    "start": "2781770",
    "end": "2788880"
  },
  {
    "text": "more than one of the year and a half we thought about exactly that arm don't do",
    "start": "2788880",
    "end": "2794130"
  },
  {
    "text": "this heavy lifting anymore everything we can push out to AWS let's",
    "start": "2794130",
    "end": "2799440"
  },
  {
    "text": "push it out to AWS um if you running databases think about Amazon RDS",
    "start": "2799440",
    "end": "2804860"
  },
  {
    "text": "all the different databases they have think about holistic service elasticsearch service when you're",
    "start": "2804860",
    "end": "2810200"
  },
  {
    "text": "running elasticsearch on your own queueing system SQS Kinesis all great",
    "start": "2810200",
    "end": "2815360"
  },
  {
    "text": "services you can use and AWS has the experts and got you back on that a very",
    "start": "2815360",
    "end": "2821720"
  },
  {
    "text": "nice side effect of pushing things out to AWS and AWS services means you don't",
    "start": "2821720",
    "end": "2828350"
  },
  {
    "start": "2822000",
    "end": "2822000"
  },
  {
    "text": "need to think about how big is my job and does it make sense to run an own",
    "start": "2828350",
    "end": "2834170"
  },
  {
    "text": "database for it because it obvious runs the database I don't care if my job is",
    "start": "2834170",
    "end": "2839420"
  },
  {
    "text": "very very small and I'm just doing one ride per minute or whatever it doesn't care actually because AWS has this huge",
    "start": "2839420",
    "end": "2847490"
  },
  {
    "text": "scale of things they already do for all of the customers so it doesn't matter if",
    "start": "2847490",
    "end": "2853070"
  },
  {
    "text": "you're having just a very very small job you want to do now and now as you can",
    "start": "2853070",
    "end": "2859370"
  },
  {
    "text": "choose from the broad palette of services you can pick the right tool for",
    "start": "2859370",
    "end": "2864650"
  },
  {
    "text": "the job so small the job maybe think about DynamoDB it's a key value store",
    "start": "2864650",
    "end": "2870470"
  },
  {
    "text": "has scalable throughput which means for example in our case where we need to",
    "start": "2870470",
    "end": "2875750"
  },
  {
    "text": "have a very fixed and current Eid throughput for a table dynamodb is",
    "start": "2875750",
    "end": "2881300"
  },
  {
    "text": "exactly the right choice because we pay for what we read or write against this dynamodb it has very low latency that's",
    "start": "2881300",
    "end": "2889250"
  },
  {
    "text": "great it's very stable arm and works like a charm for us then think about",
    "start": "2889250",
    "end": "2894350"
  },
  {
    "text": "Amazon Aurora MySQL now additional PostgreSQL so if you have more complex",
    "start": "2894350",
    "end": "2900800"
  },
  {
    "text": "data or queries Rene relational data think about using Amazon Aurora why not",
    "start": "2900800",
    "end": "2906350"
  },
  {
    "text": "you may think yeah but I have my MySQL database already running but what are you doing if the EBS volumes you're",
    "start": "2906350",
    "end": "2914000"
  },
  {
    "text": "running on are full then somebody has to do to increase the EBS volumes Amazon",
    "start": "2914000",
    "end": "2920930"
  },
  {
    "text": "Aurora does that automatically so you don't even need to know if you're saving one gigabyte 100 gigabyte 1 terabyte 10",
    "start": "2920930",
    "end": "2929420"
  },
  {
    "text": "terabyte 50 terabyte inside of Amazon Aurora you pay-as-you-go so the more",
    "start": "2929420",
    "end": "2934940"
  },
  {
    "text": "you're saving inside your Aurora the more you pay if you delete data you pay lesser so that's a great thing",
    "start": "2934940",
    "end": "2941930"
  },
  {
    "text": "just a scalable storage without any human intervention on that AWS that's",
    "start": "2941930",
    "end": "2947509"
  },
  {
    "text": "all all those things for us then if you need a data warehouse running queries",
    "start": "2947509",
    "end": "2952549"
  },
  {
    "text": "over multiple gigabytes of data it absolutely makes sense to use Amazon redshift if I need more compute or if I",
    "start": "2952549",
    "end": "2960109"
  },
  {
    "text": "need more storage the very famous vana Vogel's push of the button I push on a",
    "start": "2960109",
    "end": "2965900"
  },
  {
    "text": "button and add additional capacity to my Amazon redshift cluster and then I have",
    "start": "2965900",
    "end": "2971599"
  },
  {
    "text": "more CPU and more storage inside of my cluster it's as easy as that the whole thinking about ok how do i distribute",
    "start": "2971599",
    "end": "2978950"
  },
  {
    "text": "data from now on to get the best performance out of it AWS does that for us why should we care",
    "start": "2978950",
    "end": "2985069"
  },
  {
    "text": "about it we should focus on our product and then they already mention ElastiCache for Redis not only great for",
    "start": "2985069",
    "end": "2992359"
  },
  {
    "text": "caching but also for if thermal data on Alexa cash flow Redis introduced Redis",
    "start": "2992359",
    "end": "2998509"
  },
  {
    "text": "cluster features now so actually you can run multiple inside in instances inside",
    "start": "2998509",
    "end": "3005469"
  },
  {
    "text": "of a cluster and so saving multiple tens of gigabytes in memory very very low",
    "start": "3005469",
    "end": "3012729"
  },
  {
    "text": "latency we're not talking about milliseconds we're talking about microseconds here which is just awesome",
    "start": "3012729",
    "end": "3018579"
  },
  {
    "text": "to not only increase speed for your application and performance but also just save money because it's actually",
    "start": "3018579",
    "end": "3025799"
  },
  {
    "text": "pretty cheap and as I said we had the",
    "start": "3025799",
    "end": "3032799"
  },
  {
    "text": "decision to do about chain of going away from our own hosted database we had a",
    "start": "3032799",
    "end": "3038739"
  },
  {
    "text": "MongoDB cluster not that big but not so small unfortunately and we had our",
    "start": "3038739",
    "end": "3046749"
  },
  {
    "text": "application you can divide in three parts or think about it as kind of micro services we have this tracking API the",
    "start": "3046749",
    "end": "3053109"
  },
  {
    "text": "real-time bidding engine and our using statistics API and all of three parts were directly talking to MongoDB and",
    "start": "3053109",
    "end": "3059499"
  },
  {
    "text": "then we decided yeah that doesn't make any sense we just put everything inside of this huge MongoDB cluster we need to",
    "start": "3059499",
    "end": "3066849"
  },
  {
    "text": "run it on our own if we need to scale we add more and more capacity to our mo",
    "start": "3066849",
    "end": "3071860"
  },
  {
    "text": "many B cluster it's a huge bunch of work and so we decided okay let's divide",
    "start": "3071860",
    "end": "3076900"
  },
  {
    "text": "those things and the tracking API the frakking API yeah and the real-time",
    "start": "3076900",
    "end": "3082180"
  },
  {
    "text": "bidding engine our latency sensitive and need a fixed throughput we know our",
    "start": "3082180",
    "end": "3087850"
  },
  {
    "text": "throughput but we need to make sure we can guarantee it in MongoDB that wasn't possible so now we're using dynamodb",
    "start": "3087850",
    "end": "3094720"
  },
  {
    "text": "Amazon does the job for us on that case and then we're moving the data from the dynamo DB in an uncoupled way to Amazon",
    "start": "3094720",
    "end": "3102730"
  },
  {
    "text": "Aurora and Amazon redshift for our using statistics API so if our user are clicking inside of our user interface",
    "start": "3102730",
    "end": "3108880"
  },
  {
    "text": "and want to know the statistics for several month um in the past more than a year as easy as that because Amazon",
    "start": "3108880",
    "end": "3116680"
  },
  {
    "text": "Aurora is there everything's inside of Amazon Aurora and inside of Amazon redshift for the huge queries and those",
    "start": "3116680",
    "end": "3125050"
  },
  {
    "start": "3124000",
    "end": "3124000"
  },
  {
    "text": "this kind of approach has several advantages for us on the one hand we don't do anymore this very famous",
    "start": "3125050",
    "end": "3131080"
  },
  {
    "text": "undifferentiated heavy lifting which means cost savings we can focus on what we can do best and let's our",
    "start": "3131080",
    "end": "3137890"
  },
  {
    "text": "application that's our real-time bidding that's not running databases AWS",
    "start": "3137890",
    "end": "3142930"
  },
  {
    "text": "operates now the whole database infrastructure for us so we don't need to take care about what we're doing with",
    "start": "3142930",
    "end": "3148330"
  },
  {
    "text": "databases are they're running on the best performance should we thinking about how we move around data between",
    "start": "3148330",
    "end": "3155080"
  },
  {
    "text": "databases or between the parts of the database and a very great advantage for",
    "start": "3155080",
    "end": "3161230"
  },
  {
    "text": "us is this more granular and easier scale out because if our real-time",
    "start": "3161230",
    "end": "3166930"
  },
  {
    "text": "bidding engine has an issue on scaling or we need to scale because of our real-time inning engine we just scale",
    "start": "3166930",
    "end": "3174010"
  },
  {
    "text": "this very single table inside of dynamodb before that we needed to scale",
    "start": "3174010",
    "end": "3179170"
  },
  {
    "text": "the whole MongoDB cluster which obviously is the last a lot more cost intensive than just scaling this very",
    "start": "3179170",
    "end": "3186430"
  },
  {
    "text": "single table which is responsible for exactly that part and think about that if you think about this three different",
    "start": "3186430",
    "end": "3193120"
  },
  {
    "text": "parts we have an hour of application now it's not only three parts in our application we have a whole stack and we",
    "start": "3193120",
    "end": "3199900"
  },
  {
    "text": "here now have three stacks down to the back end so it's we scale what we need to scale",
    "start": "3199900",
    "end": "3207009"
  },
  {
    "text": "and not the whole thing underneath it and that's a lot more cost efficient",
    "start": "3207009",
    "end": "3212589"
  },
  {
    "text": "than doing the whole back-end scaling and not just those wavy parts and then",
    "start": "3212589",
    "end": "3218229"
  },
  {
    "text": "last but not least very important for us there's now absolutely no interference",
    "start": "3218229",
    "end": "3223599"
  },
  {
    "text": "between real-time bidding tracking and user and statistics whatever user does inside of the user interface doesn't",
    "start": "3223599",
    "end": "3229779"
  },
  {
    "text": "interfere with our real-time bidding engine and the other way around and a nice benefit of this three stacks we now",
    "start": "3229779",
    "end": "3237729"
  },
  {
    "text": "have is if there is an issue coming up we exactly know where to search before",
    "start": "3237729",
    "end": "3243549"
  },
  {
    "text": "that if manga Ruby had a problem it's like somewhere in the application we don't know at what point in the",
    "start": "3243549",
    "end": "3250059"
  },
  {
    "text": "application the problem occurs or where we build it in unfortunately now if",
    "start": "3250059",
    "end": "3255940"
  },
  {
    "text": "there is something coming up on on dynamodb table and we see an a huge increase in reads and can't explain that",
    "start": "3255940",
    "end": "3262660"
  },
  {
    "text": "we know where to look at we will know at which part of the code in which part of our application we need to look at so",
    "start": "3262660",
    "end": "3268299"
  },
  {
    "text": "even for debugging purposes it's a lot better to divide even the backend and",
    "start": "3268299",
    "end": "3273549"
  },
  {
    "text": "scale what you need and AWS is a great thing when you think in services and",
    "start": "3273549",
    "end": "3279009"
  },
  {
    "text": "push out or things more and more tre double yes yeah and so we do a recap",
    "start": "3279009",
    "end": "3284019"
  },
  {
    "start": "3284000",
    "end": "3284000"
  },
  {
    "text": "right yeah thank you Marcus so as you as you go back here is your laundry list",
    "start": "3284019",
    "end": "3289420"
  },
  {
    "text": "this is how you save money use those billing tools to be more aware",
    "start": "3289420",
    "end": "3295329"
  },
  {
    "text": "of what you're spending use reserved instances to save money on ec2 almost instantly avoid idle instances and be",
    "start": "3295329",
    "end": "3303519"
  },
  {
    "text": "smart about automating them you spot instances wherever you can when anything looks like a bad job it's a great",
    "start": "3303519",
    "end": "3309880"
  },
  {
    "text": "candidate for spot instances think about docker containers as a way to consolidate smaller workloads",
    "start": "3309880",
    "end": "3316170"
  },
  {
    "text": "optimize the database utilization because that's where a lot of money can be saved and pick the right tool for the",
    "start": "3316170",
    "end": "3323140"
  },
  {
    "text": "job and offload your architecture and as you're sitting in your airplanes going back looking forward to the weekend",
    "start": "3323140",
    "end": "3329949"
  },
  {
    "text": "please take a minute or two to reflect about what you do every day at your",
    "start": "3329949",
    "end": "3335259"
  },
  {
    "text": "company and maybe try to map those activities to two categories one category is what are",
    "start": "3335259",
    "end": "3343320"
  },
  {
    "text": "you doing that is really bringing your own company your own product your own service forward and that is adding a lot",
    "start": "3343320",
    "end": "3350190"
  },
  {
    "text": "more value to your company and what are you doing that is just a chore a house some homework or some other stuff you",
    "start": "3350190",
    "end": "3357510"
  },
  {
    "text": "have to do but it doesn't really directly add value to the business that tends to be operating somebody's",
    "start": "3357510",
    "end": "3363990"
  },
  {
    "text": "software that tends to be managing some database or or running an S running an rabbitmq that you could replace with an",
    "start": "3363990",
    "end": "3371340"
  },
  {
    "text": "AWS service and whenever you find yourself doing something that doesn't directly add value to your business",
    "start": "3371340",
    "end": "3376850"
  },
  {
    "text": "check out the list of AWS services that can help you there because that is our job our job is to remove all of this",
    "start": "3376850",
    "end": "3383010"
  },
  {
    "text": "undifferentiated heavy lifting from you so that you can spend a higher percentage of your time doing what",
    "start": "3383010",
    "end": "3388860"
  },
  {
    "text": "really matters to your company and becoming more competitive here now just",
    "start": "3388860",
    "end": "3394380"
  },
  {
    "text": "before you leave one more thing there simple we actually have a video recording of last year's talk where are",
    "start": "3394380",
    "end": "3401250"
  },
  {
    "text": "some where there are some more tips and tricks that you can use so there's even more tips there are some there's a deep",
    "start": "3401250",
    "end": "3407550"
  },
  {
    "text": "type on DynamoDB global secondary indexes and how you can save money there",
    "start": "3407550",
    "end": "3412790"
  },
  {
    "text": "there are some other things you can do with clouds want to avoid multi-region setups really cool here and we talked",
    "start": "3412790",
    "end": "3420540"
  },
  {
    "text": "about Emma's on a screen and some other things so here are some even more tips and tricks you can use to save money and",
    "start": "3420540",
    "end": "3426390"
  },
  {
    "text": "with that I really hope that you do save enough money to come back here next year and I hope you can do that in as little",
    "start": "3426390",
    "end": "3432540"
  },
  {
    "text": "as a couple of months because of you as you've seen there are so many ways to save money on AWS thank you very much",
    "start": "3432540",
    "end": "3440390"
  }
]