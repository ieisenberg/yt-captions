[
  {
    "start": "0",
    "end": "36000"
  },
  {
    "text": "Welcome to ‘This is My Architecture’ at re:Invent.",
    "start": "7160",
    "end": "9972"
  },
  {
    "text": "We would like to share with you\nsome of our 'This is My Architecture' videos",
    "start": "9972",
    "end": "13837"
  },
  {
    "text": "and some additional information regarding the architecture,\nand the behind the scenes of these videos.",
    "start": "13837",
    "end": "18790"
  },
  {
    "text": "Our first story is Nielsen's DataOut system\nthat can process 55 terabytes of data",
    "start": "18790",
    "end": "24889"
  },
  {
    "text": "using serverless technologies and AWS Lambda.",
    "start": "24889",
    "end": "28151"
  },
  {
    "text": "Join Opher Dubrovsky and myself for this great video",
    "start": "28151",
    "end": "31126"
  },
  {
    "text": "and learn about this architecture\nand the massive scale it's processing.",
    "start": "31127",
    "end": "35200"
  },
  {
    "start": "36000",
    "end": "337000"
  },
  {
    "text": "Welcome to ‘This is My Architecture.’",
    "start": "42673",
    "end": "44468"
  },
  {
    "text": "I'm Boaz and I have with me Opher, \nfrom Nielsen Marketing Cloud.",
    "start": "44468",
    "end": "47829"
  },
  {
    "text": "-Hi, Opher.\n-Hi, Boaz.",
    "start": "47830",
    "end": "49314"
  },
  {
    "text": "Tell us about Nielsen Marketing Cloud.",
    "start": "49314",
    "end": "50904"
  },
  {
    "text": "So, Nielsen Marketing Cloud \nis a data management platform.",
    "start": "50904",
    "end": "53683"
  },
  {
    "text": "We prepare marketing segmentation data\nthat can then be used for campaigns.",
    "start": "53683",
    "end": "58043"
  },
  {
    "text": "So, basically, you're getting files from different resources",
    "start": "58043",
    "end": "60597"
  },
  {
    "text": "and then sending them to the different networks you use?",
    "start": "60597",
    "end": "63023"
  },
  {
    "text": "Right. So, we basically create all the data \nin another part of the system",
    "start": "63023",
    "end": "67128"
  },
  {
    "text": "and then my system, which is called DataOut, \ngets these files, on this side,",
    "start": "67128",
    "end": "73658"
  },
  {
    "text": "and then processes them \nand uploads them to the ad networks",
    "start": "73658",
    "end": "77532"
  },
  {
    "text": "that are partners of ours.",
    "start": "77532",
    "end": "78647"
  },
  {
    "text": "Okay, so let's walk through the system, what it does.",
    "start": "78648",
    "end": "81398"
  },
  {
    "text": "Okay. So, I think the first thing I want to mention\nis that this system runs a huge amount of data.",
    "start": "81398",
    "end": "87107"
  },
  {
    "text": "We process about 250 billion events a day.",
    "start": "87107",
    "end": "91101"
  },
  {
    "text": "-That's a huge scale.\n-Right.",
    "start": "91101",
    "end": "92319"
  },
  {
    "text": "And these events come in files,\neach file has a bunch of events in them,",
    "start": "92319",
    "end": "96197"
  },
  {
    "text": "which are the segmentation data,",
    "start": "96197",
    "end": "98386"
  },
  {
    "text": "it gets processed, and it gets sent to the ad platforms.",
    "start": "98386",
    "end": "102088"
  },
  {
    "text": "The files pretty much come in to the system\nand are written to an S3 bucket,",
    "start": "102088",
    "end": "107124"
  },
  {
    "text": "they get some processing,\nlike transformation and formatting,",
    "start": "107124",
    "end": "110340"
  },
  {
    "text": "by using a Spark EMR cluster,",
    "start": "110340",
    "end": "112914"
  },
  {
    "text": "get written to another S3 bucket,",
    "start": "113306",
    "end": "115445"
  },
  {
    "text": "and from here they go to Lambda functions",
    "start": "115445",
    "end": "118632"
  },
  {
    "text": "that do all the processing of last formatting\nand sending it to the ad platforms.",
    "start": "118632",
    "end": "123585"
  },
  {
    "text": "So, you have your processed data\nand then you just taking it and splitting it with Lambda functions?",
    "start": "123585",
    "end": "129091"
  },
  {
    "text": "Yes, correct. So the Lambda functions \nactually do the last part of the work",
    "start": "129092",
    "end": "132864"
  },
  {
    "text": "of uploading it to all the platforms.",
    "start": "132864",
    "end": "135510"
  },
  {
    "text": "There's additional layer of data here,\nwhich is all the data about the files",
    "start": "135510",
    "end": "139607"
  },
  {
    "text": "and how to manage them.",
    "start": "139607",
    "end": "141149"
  },
  {
    "text": "So, this information goes through here,",
    "start": "141149",
    "end": "143152"
  },
  {
    "text": "and gets written to a Postgres RDS database.",
    "start": "143152",
    "end": "147875"
  },
  {
    "text": "We have a little work manager Lambda \nthat reads the information,",
    "start": "147876",
    "end": "151211"
  },
  {
    "text": "and makes decisions which files need \nto process in which way,",
    "start": "151211",
    "end": "154749"
  },
  {
    "text": "sends it to the Spark cluster,",
    "start": "154749",
    "end": "157661"
  },
  {
    "text": "that gets written back to the database.",
    "start": "158048",
    "end": "162373"
  },
  {
    "text": "So all your metadata is basically stored in RDS,\nand you keep updating it to the flow?",
    "start": "162404",
    "end": "166938"
  },
  {
    "text": "Yes. Correct.",
    "start": "166938",
    "end": "167651"
  },
  {
    "text": "We have a second work manager Lambda that basically\nreads information about the processed files",
    "start": "167651",
    "end": "174274"
  },
  {
    "text": "and then does like a fan-out architecture \nof invoking many, many Lambdas",
    "start": "174274",
    "end": "179154"
  },
  {
    "text": "that then upload it to the networks.",
    "start": "179154",
    "end": "181903"
  },
  {
    "text": "In total, we have over 100 networks we upload data to.",
    "start": "181903",
    "end": "186236"
  },
  {
    "text": "Once these Lambdas are done,\nthey update back through an SQS queue,",
    "start": "186236",
    "end": "191575"
  },
  {
    "text": "and this gets updated back to the database.",
    "start": "191576",
    "end": "194448"
  },
  {
    "text": "Some status that they process this file.",
    "start": "194448",
    "end": "196788"
  },
  {
    "text": "Correct. And if it needs to be retried and stuff like that.",
    "start": "196788",
    "end": "199911"
  },
  {
    "text": "So, this looks like a huge system, \n250 billion requests per day.",
    "start": "199912",
    "end": "204408"
  },
  {
    "text": "I assume you had some challenges with it?",
    "start": "204408",
    "end": "206455"
  },
  {
    "text": "Yeah, so I think the main, the three things\nthat are really interesting about the system",
    "start": "206455",
    "end": "209939"
  },
  {
    "text": "are the following:",
    "start": "209939",
    "end": "211116"
  },
  {
    "text": "One is scale, the other one is rate limiting,",
    "start": "211116",
    "end": "215778"
  },
  {
    "text": "which is something surprising, \nwe didn't expect that we'd have to do.",
    "start": "215778",
    "end": "219767"
  },
  {
    "text": "And the last one, which everybody is worried about always, is cost.",
    "start": "219767",
    "end": "223495"
  },
  {
    "text": "Okay, so obviously 250 billion events a day,\nscale is very, very important.",
    "start": "223495",
    "end": "228338"
  },
  {
    "text": "Let's talk about the scale of the system.",
    "start": "228338",
    "end": "229931"
  },
  {
    "text": "Okay, so our top day ever, \nwe had 55 terabytes of data.",
    "start": "229931",
    "end": "234836"
  },
  {
    "text": "On that day we got 17 million files,",
    "start": "234836",
    "end": "239233"
  },
  {
    "text": "and we had about 30 million Lambda invocations.",
    "start": "239233",
    "end": "242763"
  },
  {
    "text": "-This is one day? Just in a day?\n-Yeah, in one day.",
    "start": "242763",
    "end": "244463"
  },
  {
    "text": "And the system basically managed it without any problems,",
    "start": "244463",
    "end": "247558"
  },
  {
    "text": "we were constantly following it \nand just surprised at how well it worked.",
    "start": "247559",
    "end": "250943"
  },
  {
    "text": "Some of the, in some minutes we had\nsomething around like 3,000 Lambdas up in the air",
    "start": "251337",
    "end": "256790"
  },
  {
    "text": "and concurrently running. ",
    "start": "256791",
    "end": "257949"
  },
  {
    "text": "Okay.",
    "start": "257950",
    "end": "259245"
  },
  {
    "text": "The interesting thing about it is that on a normal day,",
    "start": "259245",
    "end": "263082"
  },
  {
    "text": "the lowest hour in the day has about one terabyte of data,",
    "start": "263082",
    "end": "267306"
  },
  {
    "text": "but the peak hours have about six terabytes of data.",
    "start": "267306",
    "end": "271763"
  },
  {
    "text": "So, the system has to breathe up and down as the data comes in",
    "start": "271763",
    "end": "274939"
  },
  {
    "text": "and, basically, scale up and down throughout the day constantly.",
    "start": "274939",
    "end": "278047"
  },
  {
    "text": "Do you need to do anything to scale it up, scale it down?",
    "start": "278047",
    "end": "280908"
  },
  {
    "text": "This is really the nice thing about it,",
    "start": "280908",
    "end": "282754"
  },
  {
    "text": "so because of the serverless Lambda function architecture,",
    "start": "282754",
    "end": "286616"
  },
  {
    "text": "the system basically does it on its own.",
    "start": "286616",
    "end": "288267"
  },
  {
    "text": "We just invoke a lot of Lambdas, and it scales up,",
    "start": "288267",
    "end": "290750"
  },
  {
    "text": "and as the data dwindles down,\nthe amount of invocations go down.",
    "start": "290750",
    "end": "295721"
  },
  {
    "text": "We pretty much get it “For free.”",
    "start": "295721",
    "end": "298089"
  },
  {
    "text": "-Out of the box?\n-Yeah.",
    "start": "298089",
    "end": "299160"
  },
  {
    "text": "So, I assume with 3,000 Lambdas invocated at the same time,",
    "start": "299160",
    "end": "302016"
  },
  {
    "text": "rate-limiting can be a challenge, both internally and externally.",
    "start": "302016",
    "end": "305692"
  },
  {
    "text": "Can you tell us about what you did \nto prevent those challenges?",
    "start": "305692",
    "end": "309228"
  },
  {
    "text": "So, originally, we didn't think that's an issue,",
    "start": "309228",
    "end": "311363"
  },
  {
    "text": "but we got some emails from some of our partners that,",
    "start": "311363",
    "end": "314660"
  },
  {
    "text": "“Guys, what are you doing, you're killing our servers.”",
    "start": "314660",
    "end": "316930"
  },
  {
    "text": "And we started checking and, obviously, \nwe could handle any burst of data that would come in,",
    "start": "316930",
    "end": "321267"
  },
  {
    "text": "we'd automatically just handle it,\nbut the world doesn't work like this.",
    "start": "321267",
    "end": "324520"
  },
  {
    "text": "So, some of the systems that you send so much data,\nit's kind of like running a DDoS attack against them.",
    "start": "324520",
    "end": "330662"
  },
  {
    "text": "So we had to do something, and just to be good neighbors,\nand we introduced a rate-limiting mechanism.",
    "start": "330662",
    "end": "336926"
  },
  {
    "text": "So, this is a great opportunity to pause and talk about rate limiting.",
    "start": "336926",
    "end": "342347"
  },
  {
    "start": "337000",
    "end": "470000"
  },
  {
    "text": "Rate limiting is something you have to take into account\nwhen building serverless applications.",
    "start": "342347",
    "end": "347780"
  },
  {
    "text": "Especially when your resources are basically unlimited\nand you can scale as much as you want,",
    "start": "347780",
    "end": "352175"
  },
  {
    "text": "but this not necessarily the case on the other side.",
    "start": "352175",
    "end": "355283"
  },
  {
    "text": "And the system you are working with,\nif it's an API or a third party vendor,",
    "start": "355283",
    "end": "359496"
  },
  {
    "text": "or a legacy system\nthat might be running a mainframe behind the scenes,",
    "start": "359497",
    "end": "363894"
  },
  {
    "text": "or a database connection,  can run out of resources\nwhen sending too much information.",
    "start": "363894",
    "end": "368464"
  },
  {
    "text": "In Nielsen's case, they had to implement rate limiting\nto make sure they are not DDos-ing their customers.",
    "start": "368464",
    "end": "374078"
  },
  {
    "text": "And in your case, you have to take this into account\nwhen building your application,",
    "start": "374079",
    "end": "377623"
  },
  {
    "text": "making sure you are not running out of connections,\nif it's a database, API call, or any other system.",
    "start": "377623",
    "end": "382899"
  },
  {
    "text": "Back to the video.",
    "start": "382899",
    "end": "383948"
  },
  {
    "text": "So the way it works is, we have some smarts\nin this work manager Lambda,",
    "start": "385748",
    "end": "389616"
  },
  {
    "text": "it basically invokes a lot of Lambdas,\nso it needs to know about all of them.",
    "start": "389617",
    "end": "391758"
  },
  {
    "text": "-The one that does the fan out?\n-Yeah.",
    "start": "391758",
    "end": "394164"
  },
  {
    "text": "So, it makes some intelligent decisions \nbased on the size of the files",
    "start": "394164",
    "end": "398382"
  },
  {
    "text": "and the number of events in them and so forth.",
    "start": "398382",
    "end": "400435"
  },
  {
    "text": "And we could pretty much rate limit on anything we want\nthat's really important to our partners.",
    "start": "400435",
    "end": "405885"
  },
  {
    "text": "Such as?",
    "start": "405885",
    "end": "406630"
  },
  {
    "text": "We can limit on megabits per second,\nthe amount of HTTP connections open, number of requests,",
    "start": "406630",
    "end": "413134"
  },
  {
    "text": "and a few other things like that.",
    "start": "413856",
    "end": "415082"
  },
  {
    "text": "-And can you actually limit per specific network?\n-Yeah.",
    "start": "415082",
    "end": "417552"
  },
  {
    "text": "So, that's pretty much configured per network,\nand then we adhere to the limits that we set.",
    "start": "417552",
    "end": "422391"
  },
  {
    "text": "So for example, if the limit,  \nwe have one  network that we set a limit for 250 megabits per second,",
    "start": "422391",
    "end": "428513"
  },
  {
    "text": "so if we get more data than that,\nit would just stay in the queue and wait,",
    "start": "428513",
    "end": "433282"
  },
  {
    "text": "and then we'll just gradually send it out.",
    "start": "433282",
    "end": "436009"
  },
  {
    "text": "The other interesting thing about it \nis that we had our own DDoS attack.",
    "start": "436009",
    "end": "439860"
  },
  {
    "text": "So, as the number of invocations of Lambdas grew,",
    "start": "439860",
    "end": "442987"
  },
  {
    "text": "originally we were writing back to the Postgres database,",
    "start": "442988",
    "end": "446200"
  },
  {
    "text": "but we ran into a limit of the number of connections\nyou can open against a database",
    "start": "446200",
    "end": "450060"
  },
  {
    "text": "and it became a choke point.",
    "start": "450060",
    "end": "453123"
  },
  {
    "text": "So, we introduced another queue as a buffer\nthat all the Lambdas report back to the queue,",
    "start": "453123",
    "end": "457952"
  },
  {
    "text": "and we have one Lambda that picks it up in batches of events\nand writes it to the...",
    "start": "457953",
    "end": "463064"
  },
  {
    "text": "And you don't need it in real-time, \nit can wait there for as long as it takes?",
    "start": "463064",
    "end": "465764"
  },
  {
    "text": "Usually, it's a few seconds, but it's fine, \nwe just need an update if the file was successful or not.",
    "start": "465764",
    "end": "470498"
  },
  {
    "start": "470000",
    "end": "669000"
  },
  {
    "text": "So, this is a great point.",
    "start": "471150",
    "end": "472447"
  },
  {
    "text": "And we got a lot of questions\nregarding Nielsen's decision to go with an RDS database.",
    "start": "472447",
    "end": "477457"
  },
  {
    "text": "Why they chose a relational database over, \nfor example, DynamoDB, NoSQL",
    "start": "477458",
    "end": "481188"
  },
  {
    "text": "something that will be maybe faster,\nand maybe give them some additional capabilities,",
    "start": "481188",
    "end": "486347"
  },
  {
    "text": "and works great with AWS Lambda?",
    "start": "486347",
    "end": "489224"
  },
  {
    "text": "The main reason why Nielsen decided to go with a relational database",
    "start": "489224",
    "end": "492079"
  },
  {
    "text": "is that in addition to storing information\nregarding the different transactions happening in the system",
    "start": "492079",
    "end": "496729"
  },
  {
    "text": "they're doing a lot of queries on this data.",
    "start": "496729",
    "end": "499592"
  },
  {
    "text": "And this SQL query language allowed them \nto do complex queries and get a lot of information",
    "start": "499592",
    "end": "504816"
  },
  {
    "text": "regarding the information inside this database.",
    "start": "504816",
    "end": "507327"
  },
  {
    "text": "They constantly checking for other alternatives,\nand they might change it in the future,",
    "start": "507327",
    "end": "510539"
  },
  {
    "text": "but right now, this is the system they are using\nand they are very happy with it.",
    "start": "510539",
    "end": "513929"
  },
  {
    "text": "Let's go back and see the end of the video.",
    "start": "513929",
    "end": "516068"
  },
  {
    "text": "Okay, so let's talk about cost, \nso I assume that size of a system,",
    "start": "516720",
    "end": "520412"
  },
  {
    "text": "many of our customers are looking at it and say,\n“This is pretty, this is probably pretty expensive.”",
    "start": "520413",
    "end": "525434"
  },
  {
    "text": "Right, so I think the main thing we worried about\nas we were building the system",
    "start": "525434",
    "end": "530047"
  },
  {
    "text": "is making sure we have cost under control.",
    "start": "530047",
    "end": "532343"
  },
  {
    "text": "The system today costs us about $1,000 a day,",
    "start": "532343",
    "end": "536405"
  },
  {
    "text": "so that's around $300,000 a year.",
    "start": "536405",
    "end": "540091"
  },
  {
    "text": "And as we were building this,\nwe really wanted to be in control of the cost",
    "start": "540091",
    "end": "545308"
  },
  {
    "text": "so we started measuring cost.",
    "start": "545308",
    "end": "547579"
  },
  {
    "text": "So the way we measure it, we started out by,\nthe costs were about $7.7 per billion events ",
    "start": "547580",
    "end": "555208"
  },
  {
    "text": "and we had a goal to reduce this.",
    "start": "555208",
    "end": "558220"
  },
  {
    "text": "It took us about a year, \ntoday we are at about $4.25 per billion events",
    "start": "558220",
    "end": "563672"
  },
  {
    "text": "and still going.",
    "start": "563672",
    "end": "565675"
  },
  {
    "text": "So can you tell us a bit, \nhow did you get from this $7.7 to $4.25?",
    "start": "565675",
    "end": "570419"
  },
  {
    "text": "Okay, so the nice thing about Lambda as opposed \nto other architecture where you're paying for the servers",
    "start": "570419",
    "end": "574851"
  },
  {
    "text": "and then if you improve your code,\nyou're still paying for the servers.",
    "start": "574851",
    "end": "577761"
  },
  {
    "text": "With Lambdas, the minute you improve your code,\nand the Lambdas are more efficient,",
    "start": "577761",
    "end": "582743"
  },
  {
    "text": "it immediately translates to cost savings.",
    "start": "582743",
    "end": "585102"
  },
  {
    "text": "So we had a few initiatives to reduce cost,",
    "start": "585102",
    "end": "589789"
  },
  {
    "text": "one of them, for example, is that \nwe realized there is a trade-off",
    "start": "589789",
    "end": "592608"
  },
  {
    "text": "between how long the Lambda function runs,\nand the memory footprint.",
    "start": "592608",
    "end": "597019"
  },
  {
    "text": "If you reduce the memory footprint, \nyou save on the cost.",
    "start": "597020",
    "end": "600704"
  },
  {
    "text": "You might increase the length of the time it runs,\nbut it might still be worthwhile.",
    "start": "600704",
    "end": "605404"
  },
  {
    "text": "-You have to find the exact point where it makes sense.\n-Right.",
    "start": "605404",
    "end": "607529"
  },
  {
    "text": "So it's kind of like an optimization problem.",
    "start": "607530",
    "end": "609277"
  },
  {
    "text": "So we wrote a simulator \nthat could simulate different loads on the Lambdas",
    "start": "609277",
    "end": "614063"
  },
  {
    "text": "with different memory sizes,",
    "start": "614063",
    "end": "615265"
  },
  {
    "text": "we experimented with it \nand run a few hundred different combinations,",
    "start": "615265",
    "end": "619551"
  },
  {
    "text": "and found the exact sweet spot \nof where it's going to be optimized,",
    "start": "619551",
    "end": "624225"
  },
  {
    "text": "and then improved our code\n so it'll work exactly in that sweet spot,",
    "start": "624225",
    "end": "627918"
  },
  {
    "text": "and that drove the cost down.",
    "start": "627918",
    "end": "629775"
  },
  {
    "text": "Another thing we did is,\nwe played around with the number of HTTP connections,",
    "start": "629775",
    "end": "633747"
  },
  {
    "text": "or the request we send in each connection,",
    "start": "633747",
    "end": "637192"
  },
  {
    "text": "and we found that, you know,\nthe sweet spot there that, you know, if we send more connections",
    "start": "637192",
    "end": "641449"
  },
  {
    "text": "we're waiting for all of them to complete,\nand it's going to take maybe longer,",
    "start": "641449",
    "end": "645524"
  },
  {
    "text": "but the total cost may be lower,\nbecause we're sending more data at the same time.",
    "start": "645524",
    "end": "650779"
  },
  {
    "text": "So we had a very interesting system here\nwith a huge scale of 250 billion events per day,",
    "start": "650779",
    "end": "656273"
  },
  {
    "text": "rate limits that actually solve some of the problems you had\nduring the implementation of the system,",
    "start": "656273",
    "end": "660800"
  },
  {
    "text": "and, of course, the cost issue\nthat you solve very nicely.",
    "start": "660800",
    "end": "664622"
  },
  {
    "text": "-Thank you very much, Opher.\n-Thank you.",
    "start": "664622",
    "end": "666020"
  },
  {
    "text": "And thank you very much for watching \n'This is My Architecture.'",
    "start": "666020",
    "end": "668185"
  },
  {
    "start": "669000",
    "end": "926000"
  },
  {
    "text": "Next is HSBC.",
    "start": "669781",
    "end": "671889"
  },
  {
    "text": "This episode is about serverless security and banking,",
    "start": "671889",
    "end": "675774"
  },
  {
    "text": "a combination really hard to imagine several years ago.",
    "start": "675774",
    "end": "679146"
  },
  {
    "text": "And today, this is the day-to-day operation of HSBC.",
    "start": "679146",
    "end": "682993"
  },
  {
    "text": "Let's watch the next video.",
    "start": "682993",
    "end": "684444"
  },
  {
    "text": "Welcome to 'This Is My Architecture.'",
    "start": "692084",
    "end": "693652"
  },
  {
    "text": "Today we're talking about banking at scale\nwith Srimanth from HSBC.",
    "start": "693652",
    "end": "697290"
  },
  {
    "text": "What does HSBC do?",
    "start": "697290",
    "end": "698766"
  },
  {
    "text": "HSBC is one of the worlds largest banks,\nand is seventh in terms of market assets and capitalization.",
    "start": "698766",
    "end": "704225"
  },
  {
    "text": "Fantastic. Now, you've solved some really interesting\nscale challenges with your architecture,",
    "start": "704225",
    "end": "708285"
  },
  {
    "text": "tell us about what you've solved here.",
    "start": "708285",
    "end": "710253"
  },
  {
    "text": "We've solved a primary problem of scaling.",
    "start": "710253",
    "end": "712581"
  },
  {
    "text": "One of the biggest problems today, about any institution,\nis how this called scaling.",
    "start": "712581",
    "end": "717684"
  },
  {
    "text": "So, when you usually deploy applications on-prem\nand suddenly you burst out,",
    "start": "717684",
    "end": "722477"
  },
  {
    "text": "you run out of IP addresses and infrastructure.",
    "start": "722477",
    "end": "726282"
  },
  {
    "text": "So what we have done is that\n we have created a smaller CIDR block ",
    "start": "726282",
    "end": "729359"
  },
  {
    "text": "and a larger CIDR block in two different VPC's. ",
    "start": "729359",
    "end": "733067"
  },
  {
    "text": "And, one of the problems is that,\nyou could have created a simple VPC,",
    "start": "733067",
    "end": "737089"
  },
  {
    "text": "gone to the network team and said,\n“Give me an IP rage of 1,000 IPs.”",
    "start": "737089",
    "end": "741252"
  },
  {
    "text": "But guess what, you scale, you run out.",
    "start": "741252",
    "end": "743806"
  },
  {
    "text": "And you scale again, you run out.\nSo you have to draw a line.",
    "start": "743806",
    "end": "746640"
  },
  {
    "text": "So, how we have done it is that,\nwe've entered a network team, call it a smaller CIDR range,",
    "start": "746640",
    "end": "752606"
  },
  {
    "text": "and applied that CIDR range to a set of proxies.",
    "start": "752606",
    "end": "755182"
  },
  {
    "text": "And then we created a larger CIDR block,\nand then we scale out our Lambdas within the larger VPC.",
    "start": "755182",
    "end": "760273"
  },
  {
    "text": "So, you're running big scale workloads here.",
    "start": "760273",
    "end": "762041"
  },
  {
    "text": "You're running lots of Lambdas,\nwhich obviously consume IP addresses,",
    "start": "762041",
    "end": "764503"
  },
  {
    "text": "you're also running EMR clusters, Kinesis,\na whole lot of things,",
    "start": "764503",
    "end": "768175"
  },
  {
    "text": "how does the flow work?",
    "start": "768175",
    "end": "769554"
  },
  {
    "text": "Correct. So what happens is that,\nin this we have created a slash 16 IP address ranging,",
    "start": "769554",
    "end": "774242"
  },
  {
    "text": "which gives us 65,000 IP addresses.",
    "start": "774242",
    "end": "776377"
  },
  {
    "text": "So, any of the services that want to connect back to the bank",
    "start": "776377",
    "end": "779616"
  },
  {
    "text": "actually talk through\nthe private VPC endpoint that we have created,",
    "start": "779616",
    "end": "783884"
  },
  {
    "text": "the private VPC endpoint connects to the proxies,",
    "start": "783884",
    "end": "786808"
  },
  {
    "text": "and the proxies connect via Direct Connect back to the bank.",
    "start": "786809",
    "end": "790571"
  },
  {
    "text": "This way they can all communicate back to the bank\nwith separate segregation,",
    "start": "790571",
    "end": "795446"
  },
  {
    "text": "because you have a larger VPC separately.",
    "start": "795446",
    "end": "798002"
  },
  {
    "text": "So, you've got the ability to deploy workloads,\nbut transit safely in and out of the banks' network environment?",
    "start": "798002",
    "end": "803367"
  },
  {
    "text": "Correct. And guess what?",
    "start": "803367",
    "end": "805058"
  },
  {
    "text": "If we run out of 65,000 IP addresses,\nwe create another VPC and connect it to the proxies.",
    "start": "805058",
    "end": "810622"
  },
  {
    "text": "That way you could just scale-out as...",
    "start": "810622",
    "end": "812127"
  },
  {
    "text": "-You just keep scaling and scaling.\n-Correct.",
    "start": "812127",
    "end": "813893"
  },
  {
    "text": "And what about on this side?",
    "start": "813893",
    "end": "814845"
  },
  {
    "text": "You got an interesting sort of similar pattern going on here.",
    "start": "814845",
    "end": "818537"
  },
  {
    "text": "That is very similar to what we have done here,\nbut on the reverse side.",
    "start": "818538",
    "end": "822564"
  },
  {
    "text": "What that enables us is that,\nthe proxies are actually controlled by separate security team",
    "start": "822564",
    "end": "828598"
  },
  {
    "text": "and the security team whitelist all the domains\nthat the proxies can talk to,",
    "start": "828598",
    "end": "833336"
  },
  {
    "text": "which means then that information flows from Lambdas\nto the VPC endpoint, to the proxies,",
    "start": "833336",
    "end": "838537"
  },
  {
    "text": "to the Internet gateway, which talks out.",
    "start": "838537",
    "end": "841156"
  },
  {
    "text": "A simple example of push notification,",
    "start": "841156",
    "end": "843712"
  },
  {
    "text": "that a service can then talk through that and it goes out.",
    "start": "843712",
    "end": "847217"
  },
  {
    "text": "-So, you can apply this to many different patterns you might have to solve.\n-Correct.",
    "start": "847218",
    "end": "850513"
  },
  {
    "text": "Another distinct advantage of this is that,\nnot every service right now has a VPC endpoint",
    "start": "850513",
    "end": "856589"
  },
  {
    "text": "within AWS.",
    "start": "856589",
    "end": "857932"
  },
  {
    "text": "But then you could implement this pattern\nto whitelist AWS services you want on the proxies,",
    "start": "857932",
    "end": "863519"
  },
  {
    "text": "which means you're still private,\nand you're not connected to the internet.",
    "start": "863519",
    "end": "867451"
  },
  {
    "text": "So, this has solved, for the bank,\na number of challenges around scale",
    "start": "867452",
    "end": "870999"
  },
  {
    "text": "and the ability to have really secure network access,\nthe separation of duties,",
    "start": "870999",
    "end": "875718"
  },
  {
    "text": "but what else has it brought to the table?",
    "start": "875718",
    "end": "878699"
  },
  {
    "text": "What they have done with this is that,\nin terms of deployments,",
    "start": "878699",
    "end": "882815"
  },
  {
    "text": "we have three types of deployments",
    "start": "882815",
    "end": "885162"
  },
  {
    "text": "through Terraform scripts and SAM templates.",
    "start": "885162",
    "end": "887101"
  },
  {
    "text": "The first deployment, it configures the networks,\ndoes the CIDR blocks,",
    "start": "887101",
    "end": "891462"
  },
  {
    "text": "and all the plumbing work.",
    "start": "891462",
    "end": "893469"
  },
  {
    "text": "The second Terraform script builds the infrastructure.",
    "start": "893469",
    "end": "896479"
  },
  {
    "text": "The third Terraform script deploys the code\non top of the infrastructure.",
    "start": "896479",
    "end": "900286"
  },
  {
    "text": "This is done through CICD.",
    "start": "900286",
    "end": "902524"
  },
  {
    "text": "And it's actually built once,\nand then the code is promoted through the environment.",
    "start": "902524",
    "end": "906311"
  },
  {
    "text": "What this has brought to the table\nis that we can grow faster to markets",
    "start": "906311",
    "end": "910524"
  },
  {
    "text": "wherever there's an AWS region.",
    "start": "910525",
    "end": "912336"
  },
  {
    "text": "So, if you want to go to that market,\nif there's an AWS region,",
    "start": "912336",
    "end": "915648"
  },
  {
    "text": "we just deploy the scripts and it's up and running.",
    "start": "915648",
    "end": "917897"
  },
  {
    "text": "-Just a few hours and you're good to go.\n-Brilliant. Correct.",
    "start": "917897",
    "end": "919970"
  },
  {
    "text": "Great solution. ",
    "start": "919971",
    "end": "920716"
  },
  {
    "text": "-Thanks so much for sharing architecture with us today.\n-Welcome.",
    "start": "920716",
    "end": "923335"
  },
  {
    "text": "And thanks for watching, ‘This is My Architecture.’",
    "start": "923335",
    "end": "925794"
  },
  {
    "start": "926000",
    "end": "1173000"
  },
  {
    "text": "Next is, 'Temenos: Building Serverless Banking Software At Scale.'",
    "start": "926806",
    "end": "931729"
  },
  {
    "text": "Join us for this great video.",
    "start": "931729",
    "end": "933655"
  },
  {
    "text": "Welcome to ‘This is My Architecture.’",
    "start": "940938",
    "end": "942811"
  },
  {
    "text": "I'm James, I'm here with Tony Coleman from Temenos.",
    "start": "942811",
    "end": "945509"
  },
  {
    "text": "Thanks for coming, Tony.",
    "start": "945509",
    "end": "946548"
  },
  {
    "text": "Hi, James, glad to be here.",
    "start": "946548",
    "end": "948219"
  },
  {
    "text": "Can you tell me a bit about Temenos, Tony.",
    "start": "948219",
    "end": "950195"
  },
  {
    "text": "Temenos is the world's number one banking software.",
    "start": "950195",
    "end": "952767"
  },
  {
    "text": "We have around 3,000 firms,\nincluding 41 of the top 50 banks around the world,",
    "start": "952767",
    "end": "959798"
  },
  {
    "text": "running the software and relying on Temenos\nto support the interactions and transactions",
    "start": "959798",
    "end": "965076"
  },
  {
    "text": "of around half a billion banking customers.",
    "start": "965076",
    "end": "968377"
  },
  {
    "text": "That's quite a big deal.",
    "start": "968377",
    "end": "969599"
  },
  {
    "text": "So, tell me about some of the problems that you're faced with.",
    "start": "969599",
    "end": "972926"
  },
  {
    "text": "So, there's two stories that we're going to talk about today",
    "start": "972926",
    "end": "975506"
  },
  {
    "text": "and the first one is around the idea of elastic scalability,",
    "start": "975506",
    "end": "979556"
  },
  {
    "text": "automatic elastic scalability.",
    "start": "979556",
    "end": "981642"
  },
  {
    "text": "This is the, some of the drivers we're seeing\nvery unpredictable workloads coming from the market,",
    "start": "981642",
    "end": "987840"
  },
  {
    "text": "and we need a solution and an architecture that will support that.",
    "start": "987840",
    "end": "991633"
  },
  {
    "text": "Not only to burst out when you see those peak loads,",
    "start": "991633",
    "end": "995182"
  },
  {
    "text": "but, as importantly, to scale back down\nso that you are only paying for the infrastructure that you need",
    "start": "995182",
    "end": "1001714"
  },
  {
    "text": "to service those requests.",
    "start": "1001714",
    "end": "1004575"
  },
  {
    "text": "So, that's the first part.",
    "start": "1004575",
    "end": "1006030"
  },
  {
    "text": "The second part is ease of maintenance and manageability.",
    "start": "1006030",
    "end": "1010365"
  },
  {
    "text": "And we're starting to hear phrases like “lights out data center.”",
    "start": "1010365",
    "end": "1014328"
  },
  {
    "text": "A lot of challenger banks\ndon't want an IT department.",
    "start": "1014328",
    "end": "1018463"
  },
  {
    "text": "A huge part of the cost of an IT department is people.",
    "start": "1018463",
    "end": "1023097"
  },
  {
    "text": "And by using and leveraging\na platform and a managed services,",
    "start": "1023097",
    "end": "1027131"
  },
  {
    "text": "a lot of that responsibility is pushed to the cloud platform.",
    "start": "1027132",
    "end": "1031011"
  },
  {
    "text": "Right. These can be hard problems to solve,\nso let's have a look at your architecture and see how you're doing that.",
    "start": "1031012",
    "end": "1035303"
  },
  {
    "text": "Sure.",
    "start": "1035303",
    "end": "1036905"
  },
  {
    "text": "So, all of our requests start and end at the API gateway really.",
    "start": "1036905",
    "end": "1042829"
  },
  {
    "text": "So it doesn't matter whether the request \nis coming from an open banking API,",
    "start": "1042829",
    "end": "1048921"
  },
  {
    "text": "or a customer on a mobile device, or an assisted channel,\nit doesn't matter.",
    "start": "1048921",
    "end": "1053741"
  },
  {
    "text": "Everything is routed through to the API gateway.",
    "start": "1053741",
    "end": "1057208"
  },
  {
    "text": "Obviously, there are some perimeter services\nthat we're not sharing here.",
    "start": "1057208",
    "end": "1061664"
  },
  {
    "text": "The API gateway will then, based on the endpoint,\nroute one of two ways.",
    "start": "1061664",
    "end": "1067326"
  },
  {
    "text": "The first route to talk about\nis this route on the left of Fargate.",
    "start": "1067327",
    "end": "1071372"
  },
  {
    "text": "So, here the first port of call is the API gateway\nuses the Elastic Load Balancer,",
    "start": "1071372",
    "end": "1077865"
  },
  {
    "text": "and this, the load balancers job, here, \nis to route the request through to the correct container image.",
    "start": "1077865",
    "end": "1085386"
  },
  {
    "text": "So, we use Fargate to host our containers",
    "start": "1085386",
    "end": "1088601"
  },
  {
    "text": "and that is where the transaction processing logic sits,",
    "start": "1088602",
    "end": "1093145"
  },
  {
    "text": "and there we persist the data down into RDS.",
    "start": "1093145",
    "end": "1097921"
  },
  {
    "text": "And then normally the response goes back up the chain.",
    "start": "1097921",
    "end": "1101697"
  },
  {
    "text": "In addition, we have this stream along the bottom,",
    "start": "1101697",
    "end": "1104429"
  },
  {
    "text": "where we take the events that are generated as part of that transaction,",
    "start": "1104429",
    "end": "1108293"
  },
  {
    "text": "now that might be data events\nor it might be more complicated business events,",
    "start": "1108293",
    "end": "1112386"
  },
  {
    "text": "but those are pushed through into Kineses.",
    "start": "1112386",
    "end": "1116059"
  },
  {
    "text": "We use Kenises to push through those events in turn to our Lambda.",
    "start": "1116060",
    "end": "1120523"
  },
  {
    "text": "And that Lambda's job here,\nis to take that business event or the data event,",
    "start": "1120523",
    "end": "1126157"
  },
  {
    "text": "and produce a query optimized data model.",
    "start": "1126157",
    "end": "1129073"
  },
  {
    "text": "And that's ultimately where the data ends up,\nover here in Dynamo.",
    "start": "1129073",
    "end": "1133974"
  },
  {
    "text": "And so, why are you using two databases here,\nRDS and DynamoDB?",
    "start": "1133974",
    "end": "1137873"
  },
  {
    "text": "So, over in RDS, this is our OLTP database,",
    "start": "1137873",
    "end": "1141767"
  },
  {
    "text": "it's designed, and the database schema",
    "start": "1141767",
    "end": "1144809"
  },
  {
    "text": "is there to process transactions\nas quickly and as efficiently as possible.",
    "start": "1144810",
    "end": "1149373"
  },
  {
    "text": "Sometimes that means that the queries aren't as great they might be.",
    "start": "1149373",
    "end": "1153337"
  },
  {
    "text": "So we solve this by using a CQRS pattern",
    "start": "1153337",
    "end": "1157289"
  },
  {
    "text": "and offloading the majority or our query workloads\ninto a query optimized database.",
    "start": "1157289",
    "end": "1163827"
  },
  {
    "text": "So, not only is it a query optimized database,\nit's a query optimized data model.",
    "start": "1163828",
    "end": "1168369"
  },
  {
    "text": "So, not all the data ends up in Dynamo,\nonly the things we need there.",
    "start": "1168369",
    "end": "1172403"
  },
  {
    "text": "This is a great example of using the right tool for the job,",
    "start": "1173285",
    "end": "1176680"
  },
  {
    "text": "and in our specific case, the right database.",
    "start": "1176680",
    "end": "1180108"
  },
  {
    "text": "From one hand, we have a SQL database running on RDS,",
    "start": "1180108",
    "end": "1183234"
  },
  {
    "text": "that is taking all the transaction and processing them\nas fast as is as efficient as possible.",
    "start": "1183234",
    "end": "1188704"
  },
  {
    "text": "Form the other end, we're taking a NoSQL database,",
    "start": "1188704",
    "end": "1191928"
  },
  {
    "text": "running on DynamoDB \nand storing only a portion of data on this database",
    "start": "1191928",
    "end": "1196431"
  },
  {
    "text": "and using this database to run queries as fast as possible.",
    "start": "1196431",
    "end": "1200818"
  },
  {
    "text": "And when you're running those queries, you going to get great results\nand great user experience.",
    "start": "1200818",
    "end": "1206144"
  },
  {
    "text": "Let's watch the rest of the video.",
    "start": "1206144",
    "end": "1208134"
  },
  {
    "text": "Perfect. And then what's happening on this side of the diagram?",
    "start": "1209013",
    "end": "1212245"
  },
  {
    "text": "So, for exactly that part of it, a lot of the,\nif not all of the query work right now,",
    "start": "1212245",
    "end": "1218686"
  },
  {
    "text": "gets pushed through, from the API gateway, \ndirectly to the Lambda.",
    "start": "1218686",
    "end": "1222465"
  },
  {
    "text": "And the Lambda does the normal stuff that you'd expect\nto constructs the query to the database,",
    "start": "1222465",
    "end": "1227132"
  },
  {
    "text": "and then simply interrogate the Dynamo to do that.",
    "start": "1227133",
    "end": "1230934"
  },
  {
    "text": "And this gives us a very, very rapid response time,",
    "start": "1230934",
    "end": "1234044"
  },
  {
    "text": "it gives us a very efficient footprint as well.",
    "start": "1234045",
    "end": "1238199"
  },
  {
    "text": "It's very nice. And we can see that across the board here,\nyou're using managed services,",
    "start": "1238199",
    "end": "1242110"
  },
  {
    "text": "which must hugely reduce\nthe amount of work your customers have to do.",
    "start": "1242110",
    "end": "1245616"
  },
  {
    "text": "Absolutely. And as an example of that,",
    "start": "1245616",
    "end": "1248112"
  },
  {
    "text": "one of the deliverables of this architecture\nis a set of CloudFormation scripts.",
    "start": "1248113",
    "end": "1252963"
  },
  {
    "text": "And these are being rolled out and used by  customers,\nand our engineers and pre-sales team alike,",
    "start": "1252963",
    "end": "1258025"
  },
  {
    "text": "to spin up exactly this architecture, you know, \nwith very little skills or knowledge needed.",
    "start": "1258025",
    "end": "1263616"
  },
  {
    "text": "So, it's massively removing and reducing the need \nfor manual steps in that deployment phase.",
    "start": "1263616",
    "end": "1270330"
  },
  {
    "text": "Brilliant. So you said the other challenge that you face",
    "start": "1270330",
    "end": "1273346"
  },
  {
    "text": "is one of scalability\nand being able to elastically scale the system.",
    "start": "1273346",
    "end": "1276878"
  },
  {
    "text": "Can you tell me more about how you're achieving that?",
    "start": "1276879",
    "end": "1280112"
  },
  {
    "text": "So, it's a tale of two sides here.",
    "start": "1280112",
    "end": "1283572"
  },
  {
    "text": "So, the transaction processing engines,\nboth in Fargate and in Lambda's,",
    "start": "1283572",
    "end": "1287661"
  },
  {
    "text": "and the query engines in Lambda's as well,",
    "start": "1287661",
    "end": "1290170"
  },
  {
    "text": "scale pretty much automatically for us.",
    "start": "1290170",
    "end": "1293653"
  },
  {
    "text": "So, in Fargate we did some work\nto expose some custom metrics",
    "start": "1293653",
    "end": "1297448"
  },
  {
    "text": "for the background services workloads,",
    "start": "1297448",
    "end": "1299684"
  },
  {
    "text": "but for the online workloads we use pretty much the standard metrics\nand the scalability of Fargate itself.",
    "start": "1299684",
    "end": "1307003"
  },
  {
    "text": "Fargate is excellent because it enables us to \nnot only scale out the containers,",
    "start": "1307004",
    "end": "1312316"
  },
  {
    "text": "but it also scales the underlying infrastructure as well.",
    "start": "1312316",
    "end": "1315884"
  },
  {
    "text": "This is important, obviously for the burst out,",
    "start": "1315884",
    "end": "1318576"
  },
  {
    "text": "but when the workload goes away,\nwe scale back so the infrastucture is not paid for anymore,",
    "start": "1318576",
    "end": "1324877"
  },
  {
    "text": "meaning you're only paying for the usage that you actually need.",
    "start": "1324877",
    "end": "1329691"
  },
  {
    "text": "So, that's on the Fargate side.",
    "start": "1329692",
    "end": "1332210"
  },
  {
    "text": "That's very important.",
    "start": "1332210",
    "end": "1333313"
  },
  {
    "text": "Now, you told me that you've been running a benchmark on this architecture,\nhow's that going?",
    "start": "1333313",
    "end": "1337548"
  },
  {
    "text": "Very well. So, it's, you know, we're at the point now\nwhere we're talking overall the transaction load we're putting through",
    "start": "1337548",
    "end": "1345673"
  },
  {
    "text": "is around 50,000 transactions a second.",
    "start": "1345673",
    "end": "1348356"
  },
  {
    "text": "It's actually slightly higher.",
    "start": "1348356",
    "end": "1350128"
  },
  {
    "text": "And that's a split between transaction processing happening",
    "start": "1350129",
    "end": "1354219"
  },
  {
    "text": "and also the query workloads that we've put through.",
    "start": "1354219",
    "end": "1358121"
  },
  {
    "text": "But, you know, over 12,500 transactions a second\nare what I would call proper transactions,",
    "start": "1358121",
    "end": "1366308"
  },
  {
    "text": "as opposed to queries, where these are banking transactions,\nthey are moving money,",
    "start": "1366308",
    "end": "1370507"
  },
  {
    "text": "and it's pushing this sort of streaming technology.",
    "start": "1370508",
    "end": "1375435"
  },
  {
    "text": "And it means that,\nit was very important for us to test all of this out,",
    "start": "1375435",
    "end": "1379240"
  },
  {
    "text": "to ensure that the Kinesis streams\nand the Lambda's going into Dynamo",
    "start": "1379240",
    "end": "1383754"
  },
  {
    "text": "was keeping up with the pressure that we applied to Fargate.",
    "start": "1383754",
    "end": "1387852"
  },
  {
    "text": "And it keeps up with it very nicely.",
    "start": "1387852",
    "end": "1391099"
  },
  {
    "text": "One of the things we were very surprised about,\npleasantly surprised,",
    "start": "1391099",
    "end": "1395476"
  },
  {
    "text": "are these very high transaction volumes\nis there was basically nothing we needed to do",
    "start": "1395476",
    "end": "1401639"
  },
  {
    "text": "in the Lambda or even the Dynamo database model.",
    "start": "1401640",
    "end": "1405104"
  },
  {
    "text": "Arguably, we got it right first time,",
    "start": "1405104",
    "end": "1407268"
  },
  {
    "text": "but it was great to see that the Lambda and Dynamo",
    "start": "1407268",
    "end": "1410183"
  },
  {
    "text": "just scaling when we were pushing it through \nto those extreme volumes",
    "start": "1410183",
    "end": "1413822"
  },
  {
    "text": "with very little work at all.",
    "start": "1413822",
    "end": "1415785"
  },
  {
    "text": "That's fantastic, isn't it? Great to hear.",
    "start": "1415785",
    "end": "1417899"
  },
  {
    "text": "Thank you for coming, Tony.",
    "start": "1417899",
    "end": "1419136"
  },
  {
    "text": "And thank you for watching, ‘This is My Architecture.’",
    "start": "1419136",
    "end": "1421693"
  },
  {
    "text": "Whoa, 50,000 transactions a second.",
    "start": "1422971",
    "end": "1425908"
  },
  {
    "text": "Another great example \nof building a serverless architecture at scale.",
    "start": "1425909",
    "end": "1429949"
  },
  {
    "text": "Thank you very much for joining me today\nfor ‘This is My Architecture’ at re:Invent,",
    "start": "1430389",
    "end": "1433938"
  },
  {
    "text": "and see you in the next ‘This is My Architecture’ videos.",
    "start": "1433938",
    "end": "1436472"
  },
  {
    "text": "Bye-bye.",
    "start": "1436472",
    "end": "1437487"
  }
]