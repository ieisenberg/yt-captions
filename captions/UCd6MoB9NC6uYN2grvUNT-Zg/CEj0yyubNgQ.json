[
  {
    "start": "0",
    "end": "18000"
  },
  {
    "text": "Welcome to another episode\nof 'Back to Basics'.",
    "start": "6737",
    "end": "9368"
  },
  {
    "text": "I am Sid, and today we will talk about",
    "start": "9369",
    "end": "11644"
  },
  {
    "text": "using fan out patterns in \ndistributed microservice architectures.",
    "start": "11644",
    "end": "15526"
  },
  {
    "text": "Let's start by talking about\nwhat this term fan out means.",
    "start": "15526",
    "end": "18858"
  },
  {
    "start": "18000",
    "end": "38000"
  },
  {
    "text": "Fan-out is a messaging pattern",
    "start": "18859",
    "end": "20671"
  },
  {
    "text": "where a piece of information\nor a message is distributed",
    "start": "20672",
    "end": "23912"
  },
  {
    "text": "or 'fanned out' to multiple\ndestinations in parallel.",
    "start": "23912",
    "end": "26501"
  },
  {
    "text": "The idea is that each of\nthese destinations can work",
    "start": "26501",
    "end": "29844"
  },
  {
    "text": "and process this message in parallel.",
    "start": "29844",
    "end": "32256"
  },
  {
    "text": "One way to implement\nthe messaging pattern",
    "start": "32256",
    "end": "35116"
  },
  {
    "text": "is to use publisher/subscriber, \nor the pub/sub model.",
    "start": "35116",
    "end": "38769"
  },
  {
    "start": "38000",
    "end": "136000"
  },
  {
    "text": "In the pub/sub model,\nwe define a topic",
    "start": "39368",
    "end": "42039"
  },
  {
    "text": "which is a logical access point\nenabling message communication.",
    "start": "42039",
    "end": "45361"
  },
  {
    "text": "A publisher simply sends\nthe message to the topic.",
    "start": "45361",
    "end": "48997"
  },
  {
    "text": "This message is then\nimmediately fanned out",
    "start": "48997",
    "end": "52203"
  },
  {
    "text": "or pushed out to all\nthe subscribers of this topic.",
    "start": "52203",
    "end": "54975"
  },
  {
    "text": "This message communication is\ncompletely decoupled and asynchronous.",
    "start": "54976",
    "end": "58976"
  },
  {
    "text": "Each component can operate\nand scale individually",
    "start": "58976",
    "end": "62594"
  },
  {
    "text": "without having any strict dependencies\nwith any other components.",
    "start": "62594",
    "end": "65818"
  },
  {
    "text": "The publisher doesn't need to know who is\nusing the information that it is broadcasting.",
    "start": "65818",
    "end": "70673"
  },
  {
    "text": "And the subscribers don't need to\nknow where the message comes from.",
    "start": "70673",
    "end": "74089"
  },
  {
    "text": "If you were to model this using\nstateful point-to-point communication,",
    "start": "74089",
    "end": "78284"
  },
  {
    "text": "every publisher will have to establish and\ntrack connections with every other subscriber.",
    "start": "78284",
    "end": "83868"
  },
  {
    "text": "Additionally, failure handling and retry logic\nwill have to be handled by you in your code.",
    "start": "83869",
    "end": "89734"
  },
  {
    "text": "Now, imagine doing this at scale\nwith tens or hundreds of microservices.",
    "start": "89734",
    "end": "94239"
  },
  {
    "text": "This would make your application\nextremely coupled and convoluted,",
    "start": "94239",
    "end": "98159"
  },
  {
    "text": "and this is exactly what you don't want to do\nwhen building modern applications.",
    "start": "98159",
    "end": "102336"
  },
  {
    "text": "Now, the best way to build pub/sub\nfan out messaging on AWS",
    "start": "102925",
    "end": "106773"
  },
  {
    "text": "is to use Amazon Simple \nNotification Service (Amazon SNS).",
    "start": "106773",
    "end": "111057"
  },
  {
    "text": "Amazon SNS is a fully managed reliable\nand secure pub/sub messaging service.",
    "start": "111057",
    "end": "116020"
  },
  {
    "text": "You can send any number of messages\nat any time to SNS.",
    "start": "116520",
    "end": "120701"
  },
  {
    "text": "Additionally, failure handling and\nretry logic are built into the service.",
    "start": "120701",
    "end": "125170"
  },
  {
    "text": "So, all you need to do in your code\nis send the message to SNS,",
    "start": "125570",
    "end": "129485"
  },
  {
    "text": "and SNS takes care of all the complexity\ninvolved with sending this message",
    "start": "129485",
    "end": "134294"
  },
  {
    "text": "at scale to all your subscribers.",
    "start": "134294",
    "end": "137023"
  },
  {
    "start": "136000",
    "end": "316000"
  },
  {
    "text": "Now, let's look\nat an end-to-end architecture",
    "start": "137023",
    "end": "139386"
  },
  {
    "text": "that leverages this \npub/sub fan out pattern.",
    "start": "139386",
    "end": "141996"
  },
  {
    "text": "Our set-up consists of a distributed application\nthat handles order processing.",
    "start": "141996",
    "end": "146629"
  },
  {
    "text": "First, a customer,\nusing a web or mobile application,",
    "start": "146629",
    "end": "150000"
  },
  {
    "text": "places a successful order.",
    "start": "150000",
    "end": "151929"
  },
  {
    "text": "The web app sends this request to\nan API Gateway endpoint in AWS.",
    "start": "152429",
    "end": "156494"
  },
  {
    "text": "This endpoint is\nthe “front door” of our application.",
    "start": "156494",
    "end": "159947"
  },
  {
    "text": "API Gateway handles all the tasks \ninvolved in accepting and processing",
    "start": "159947",
    "end": "164175"
  },
  {
    "text": "up to hundreds of thousands\nof concurrent API requests",
    "start": "164175",
    "end": "167210"
  },
  {
    "text": "including traffic management, \nauthorization, access control,",
    "start": "167210",
    "end": "170533"
  },
  {
    "text": "throttling, and monitoring.",
    "start": "170533",
    "end": "171961"
  },
  {
    "text": "API Gateway sends the order request\nto the first microservice, ",
    "start": "171961",
    "end": "175477"
  },
  {
    "text": "the acknowledgment microservice.",
    "start": "175477",
    "end": "177061"
  },
  {
    "text": "This microservice leverages \nAWS Lambda for compute.",
    "start": "177061",
    "end": "180456"
  },
  {
    "text": "This microservice does three things.",
    "start": "180456",
    "end": "182711"
  },
  {
    "text": "First, it verifies the request, \ngenerates the confirmation ID,",
    "start": "182711",
    "end": "186580"
  },
  {
    "text": "and posts that in a durable database\nlike DynamoDB.",
    "start": "186580",
    "end": "190141"
  },
  {
    "text": "Given the order detail has been securely\nand durably stored,",
    "start": "190141",
    "end": "193636"
  },
  {
    "text": "Lambda sends a confirmation message\nback to API Gateway.",
    "start": "193636",
    "end": "197132"
  },
  {
    "text": "Finally, it creates a message which will be sent\ndownstream to different microservices.",
    "start": "197132",
    "end": "202135"
  },
  {
    "text": "We have the notification service to send\nemail and SMS notifications to customers.",
    "start": "202135",
    "end": "207580"
  },
  {
    "text": "The shipment processing microservice\nto initiate the shipping workflows.",
    "start": "207580",
    "end": "211793"
  },
  {
    "text": "And Data Lake ingest microservice\nto push the order details",
    "start": "211793",
    "end": "214967"
  },
  {
    "text": "in a data lake for analytics\nand machine learning.",
    "start": "214967",
    "end": "217666"
  },
  {
    "text": "One thing I've seen people try to do,",
    "start": "217666",
    "end": "219853"
  },
  {
    "text": "is to use SQS queues\nto send messages between microservices.",
    "start": "219853",
    "end": "224040"
  },
  {
    "text": "That's a totally valid pattern, \nand allows for efficient batch processing",
    "start": "224041",
    "end": "227852"
  },
  {
    "text": "where the microservices can consume \nmessages from the queues in batch",
    "start": "227852",
    "end": "231547"
  },
  {
    "text": "at a pace that works for them.",
    "start": "231547",
    "end": "233355"
  },
  {
    "text": "But in a fan out pattern, \nthe same message",
    "start": "233355",
    "end": "236056"
  },
  {
    "text": "has to be consumed by\nmultiple microservices simultaneously,",
    "start": "236057",
    "end": "239629"
  },
  {
    "text": "and that is not possible with queues.",
    "start": "239629",
    "end": "242027"
  },
  {
    "text": "So, what you can do is build a hyper design, \nleveraging both SNS and SQS.",
    "start": "242027",
    "end": "247316"
  },
  {
    "text": "You can put individual SQS queues\nin front of microservices,",
    "start": "247317",
    "end": "250967"
  },
  {
    "text": "and use SNS to fan out messages\nto these queues.",
    "start": "250967",
    "end": "254075"
  },
  {
    "text": "Once the data reaches the queues,",
    "start": "254075",
    "end": "255869"
  },
  {
    "text": "AWS Lambda service\nautomatically polls the queues,",
    "start": "255869",
    "end": "258954"
  },
  {
    "text": "extracts the messages in batch,",
    "start": "258954",
    "end": "260803"
  },
  {
    "text": "and invokes Lambda functions\nto process them.",
    "start": "260803",
    "end": "263505"
  },
  {
    "text": "Now, a distributed system not every message\nis required to be sent to every microservice.",
    "start": "263505",
    "end": "268779"
  },
  {
    "text": "Often there are scenarios where you \nconditionally want to forward a message",
    "start": "268779",
    "end": "272884"
  },
  {
    "text": "based on an attribute in the message.",
    "start": "272885",
    "end": "275304"
  },
  {
    "text": "You can achieve this using\nthe SNS filter policy feature.",
    "start": "275304",
    "end": "279491"
  },
  {
    "text": "Let's say you had a different plan\nfor processing digital orders.",
    "start": "279492",
    "end": "283182"
  },
  {
    "text": "Using SNS filter policy, you can route",
    "start": "283182",
    "end": "286093"
  },
  {
    "text": "the right order type \nto the right processing pipeline.",
    "start": "286093",
    "end": "289531"
  },
  {
    "text": "Offloading this message\nfiltering capability to SNS",
    "start": "289532",
    "end": "292886"
  },
  {
    "text": "lets you keep\nyour application code simple,",
    "start": "292886",
    "end": "294931"
  },
  {
    "text": "while letting Amazon SNS\ndo all the heavy lifting.",
    "start": "294931",
    "end": "297634"
  },
  {
    "text": "In this episode, we explored how\nthe fan out patterns with Amazon SNS",
    "start": "298111",
    "end": "301837"
  },
  {
    "text": "can enable asynchronous\nmessage communication",
    "start": "301838",
    "end": "304667"
  },
  {
    "text": "when building distributed\nmicroservice architectures.",
    "start": "304667",
    "end": "307473"
  },
  {
    "text": "Check out the links below\nfor more details.",
    "start": "307473",
    "end": "309904"
  },
  {
    "text": "See you next time.",
    "start": "309904",
    "end": "310904"
  }
]