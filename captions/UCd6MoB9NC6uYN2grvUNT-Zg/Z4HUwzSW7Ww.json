[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "In this video, you’ll see how to use \nAmazon CloudWatch Contributor",
    "start": "0",
    "end": "3911"
  },
  {
    "text": "Insights to analyze traffic \ntrends for your web application.",
    "start": "3911",
    "end": "7474"
  },
  {
    "text": "With this solution, you can create rules that\nanalyze log data and display contributor data",
    "start": "7909",
    "end": "11877"
  },
  {
    "text": "so you can understand contributor impact on \nyour application’s security and performance.",
    "start": "11877",
    "end": "18223"
  },
  {
    "start": "20000",
    "end": "103000"
  },
  {
    "text": "We’re going to be creating two \nrules, for two security use cases.",
    "start": "20227",
    "end": "23530"
  },
  {
    "text": "To get started, let’s open the CloudWatch \nconsole and navigate to Contributor Insights.",
    "start": "23701",
    "end": "28455"
  },
  {
    "text": "Our first rule will integrate Contributor \nInsights with AWS Web Application",
    "start": "32670",
    "end": "36772"
  },
  {
    "text": "Firewall (AWS WAF) to visualize the \ntop IP addresses to our web app.",
    "start": "36772",
    "end": "42336"
  },
  {
    "text": "First, we’ll select the log \ngroup we want to evaluate.",
    "start": "43232",
    "end": "46152"
  },
  {
    "text": "In this case, we have already enabled WAF on \nour resource, so we’ll select our WAF log group.",
    "start": "46390",
    "end": "51502"
  },
  {
    "text": "Next, we’ll select a rule type.",
    "start": "54525",
    "end": "56245"
  },
  {
    "text": "Let’s build a custom rule.",
    "start": "56471",
    "end": "57875"
  },
  {
    "text": "We’ll leave the log format set to JSON.",
    "start": "58895",
    "end": "61068"
  },
  {
    "text": "In the Contribution section, we’ll add a \nnew key from the log group we selected.",
    "start": "62801",
    "end": "66825"
  },
  {
    "text": "The log field key (or a combination of \nkeys) is what defines a “Contributor.”",
    "start": "67210",
    "end": "71896"
  },
  {
    "text": "We can narrow the scope of \nour results by adding a filter.",
    "start": "72905",
    "end": "75695"
  },
  {
    "text": "Let’s add one that counts the \nnumber of actions logged.",
    "start": "76057",
    "end": "78672"
  },
  {
    "text": "We’ll leave Aggregation set to Count.",
    "start": "82950",
    "end": "84701"
  },
  {
    "text": "We’ll name the rule and continue.",
    "start": "86830",
    "end": "88454"
  },
  {
    "text": "Now we’ll review the rule and create it.",
    "start": "92768",
    "end": "94766"
  },
  {
    "text": "It can take up to five minutes \nbefore a rule begins to report data.",
    "start": "98000",
    "end": "101451"
  },
  {
    "start": "103000",
    "end": "151000"
  },
  {
    "text": "While we wait, let’s create a second rule \nthat will visually analyze the top HTTP",
    "start": "104146",
    "end": "109353"
  },
  {
    "text": "method requests to our web application.",
    "start": "109353",
    "end": "111924"
  },
  {
    "text": "We’ll select the same log \ngroup we used for the first rule.",
    "start": "112287",
    "end": "115376"
  },
  {
    "text": "This time, we’ll select a \nsample rule provided by AWS.",
    "start": "119781",
    "end": "123284"
  },
  {
    "text": "The sample rule has filled out the Log format, \nContribution, Filters, and Aggregation fields.",
    "start": "126286",
    "end": "131241"
  },
  {
    "text": "We’ll retain these values \nand go on to the next step.",
    "start": "131467",
    "end": "134053"
  },
  {
    "text": "We’ll name the rule and continue.",
    "start": "135615",
    "end": "137239"
  },
  {
    "text": "Let’s create the rule.",
    "start": "142120",
    "end": "143245"
  },
  {
    "text": "We’ll wait for the rules to begin reporting data.",
    "start": "147378",
    "end": "149574"
  },
  {
    "start": "151000",
    "end": "215000"
  },
  {
    "text": "Now, let’s review the reports for each rule.",
    "start": "152190",
    "end": "154363"
  },
  {
    "text": "The first rule is returning the top contributors \nto our web application over the last hour.",
    "start": "154748",
    "end": "159338"
  },
  {
    "text": "Below the graph, we can see the number of HTTP \nrequests each client IP address has generated.",
    "start": "159644",
    "end": "165315"
  },
  {
    "text": "We can change the settings at the \ntop of the graph to adjust the visual.",
    "start": "166297",
    "end": "169816"
  },
  {
    "text": "Now let’s look at the \nreports for the second rule.",
    "start": "173361",
    "end": "175618"
  },
  {
    "text": "We can see the HTTP request methods\nused by the top three contributors",
    "start": "182133",
    "end": "186665"
  },
  {
    "text": "and the sum of each one’s associated data points.",
    "start": "186665",
    "end": "189405"
  },
  {
    "text": "Monitoring unique contributors and their\n usage can help you find the top talkers",
    "start": "190312",
    "end": "194564"
  },
  {
    "text": "and understand who or what is impacting system performance.",
    "start": "194564",
    "end": "197860"
  },
  {
    "text": "You’ve just seen how to use CloudWatch Contributor \nInsights to analyze traffic trends for your web application.",
    "start": "200374",
    "end": "206056"
  },
  {
    "text": "You can learn more about this topic in \nthe description and links for this video.",
    "start": "207155",
    "end": "210734"
  },
  {
    "text": "Thanks for watching. Now it’s your turn to try.",
    "start": "211006",
    "end": "213700"
  }
]