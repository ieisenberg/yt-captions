[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "in this video you'll see how to use",
    "start": "1120",
    "end": "2760"
  },
  {
    "text": "cloudwatch logs subscription filters",
    "start": "2760",
    "end": "5200"
  },
  {
    "text": "with this capability you can centralize",
    "start": "5200",
    "end": "7040"
  },
  {
    "text": "your cloudwatch logs log events perform",
    "start": "7040",
    "end": "9360"
  },
  {
    "text": "real-time processing of log data and",
    "start": "9360",
    "end": "11360"
  },
  {
    "text": "send log events to thirdparty",
    "start": "11360",
    "end": "13759"
  },
  {
    "text": "Partners we'll begin in cloudwatch logs",
    "start": "13759",
    "end": "16560"
  },
  {
    "text": "where we already have a number of log",
    "start": "16560",
    "end": "18760"
  },
  {
    "text": "groups a log group is a logical",
    "start": "18760",
    "end": "21039"
  },
  {
    "start": "19000",
    "end": "44000"
  },
  {
    "text": "organization of different streams that",
    "start": "21039",
    "end": "22640"
  },
  {
    "text": "share the same retention monitoring and",
    "start": "22640",
    "end": "24680"
  },
  {
    "text": "access control",
    "start": "24680",
    "end": "25880"
  },
  {
    "text": "settings let's find our ECS pet search",
    "start": "25880",
    "end": "28519"
  },
  {
    "text": "log group and take a look at its log",
    "start": "28519",
    "end": "30560"
  },
  {
    "text": "streams we can drill down into any of",
    "start": "30560",
    "end": "32840"
  },
  {
    "text": "the log streams to see the log events",
    "start": "32840",
    "end": "34480"
  },
  {
    "text": "within",
    "start": "34480",
    "end": "36718"
  },
  {
    "text": "it we can also filter the log events",
    "start": "37280",
    "end": "39760"
  },
  {
    "text": "uploaded to this log Group by creating a",
    "start": "39760",
    "end": "41640"
  },
  {
    "text": "subscription",
    "start": "41640",
    "end": "43360"
  },
  {
    "text": "filter subscription filters scan your",
    "start": "43360",
    "end": "45719"
  },
  {
    "start": "44000",
    "end": "121000"
  },
  {
    "text": "logs for a specific pattern and forward",
    "start": "45719",
    "end": "47600"
  },
  {
    "text": "all matches to a destination of your",
    "start": "47600",
    "end": "49239"
  },
  {
    "text": "choice for alerting processing or",
    "start": "49239",
    "end": "51199"
  },
  {
    "text": "storage each log group can have two",
    "start": "51199",
    "end": "53399"
  },
  {
    "text": "subscription",
    "start": "53399",
    "end": "55520"
  },
  {
    "text": "filters let's create a Lambda",
    "start": "55520",
    "end": "57520"
  },
  {
    "text": "subscription filter",
    "start": "57520",
    "end": "60559"
  },
  {
    "text": "we must first select a Lambda function",
    "start": "60559",
    "end": "62079"
  },
  {
    "text": "to stream our log data to we've already",
    "start": "62079",
    "end": "64280"
  },
  {
    "text": "created a Lambda function for this",
    "start": "64280",
    "end": "65760"
  },
  {
    "text": "example so we'll use",
    "start": "65760",
    "end": "68840"
  },
  {
    "text": "that here we can specify the specific",
    "start": "69799",
    "end": "72320"
  },
  {
    "text": "filter pattern to apply for testing",
    "start": "72320",
    "end": "74680"
  },
  {
    "text": "purposes we'll provide a name but leave",
    "start": "74680",
    "end": "76360"
  },
  {
    "text": "the pattern",
    "start": "76360",
    "end": "78479"
  },
  {
    "text": "blank we'll test our blank pattern on",
    "start": "78479",
    "end": "80799"
  },
  {
    "text": "one of our existing log streams",
    "start": "80799",
    "end": "84799"
  },
  {
    "text": "since no pattern was specified the",
    "start": "90680",
    "end": "92520"
  },
  {
    "text": "filter returned every log event in the",
    "start": "92520",
    "end": "96200"
  },
  {
    "text": "Stream let's now specify a filter",
    "start": "96200",
    "end": "98560"
  },
  {
    "text": "pattern that only brings up events",
    "start": "98560",
    "end": "99920"
  },
  {
    "text": "containing the terms puppy and pet",
    "start": "99920",
    "end": "103920"
  },
  {
    "text": "type Let's test the pattern",
    "start": "103960",
    "end": "107840"
  },
  {
    "text": "again this time we see only 13 results",
    "start": "111520",
    "end": "114759"
  },
  {
    "text": "all containing the two terms we",
    "start": "114759",
    "end": "116360"
  },
  {
    "text": "specified let's start streaming data to",
    "start": "116360",
    "end": "118560"
  },
  {
    "text": "the Lambda function",
    "start": "118560",
    "end": "121840"
  },
  {
    "start": "121000",
    "end": "143000"
  },
  {
    "text": "Now log events in this log group that",
    "start": "121840",
    "end": "123600"
  },
  {
    "text": "include the two terms we specified will",
    "start": "123600",
    "end": "125360"
  },
  {
    "text": "be sent to the Lambda function let's",
    "start": "125360",
    "end": "127240"
  },
  {
    "text": "switch to AWS Lambda to take a quick",
    "start": "127240",
    "end": "131200"
  },
  {
    "text": "look let's switch to the monitor",
    "start": "131200",
    "end": "135400"
  },
  {
    "text": "tab here we can see that our Lambda",
    "start": "136000",
    "end": "138120"
  },
  {
    "text": "function was invoked in connection with",
    "start": "138120",
    "end": "139560"
  },
  {
    "text": "the subscription",
    "start": "139560",
    "end": "142160"
  },
  {
    "text": "filter returning to the cloudwatch",
    "start": "142400",
    "end": "144640"
  },
  {
    "start": "143000",
    "end": "186000"
  },
  {
    "text": "console we can also see the invocation",
    "start": "144640",
    "end": "146800"
  },
  {
    "text": "by searching for the Lambda function",
    "start": "146800",
    "end": "148160"
  },
  {
    "text": "among our log groups",
    "start": "148160",
    "end": "151120"
  },
  {
    "text": "let's return to the pet search log group",
    "start": "151120",
    "end": "152800"
  },
  {
    "text": "to create another subscription",
    "start": "152800",
    "end": "155920"
  },
  {
    "text": "filter this time we'll create a Kinesis",
    "start": "157239",
    "end": "159519"
  },
  {
    "text": "fire hose subscription",
    "start": "159519",
    "end": "162640"
  },
  {
    "text": "filter for the purposes of this example",
    "start": "162840",
    "end": "165360"
  },
  {
    "text": "we've already created a delivery stream",
    "start": "165360",
    "end": "167000"
  },
  {
    "text": "and an AWS identity and access",
    "start": "167000",
    "end": "168840"
  },
  {
    "text": "management or am role to use with this",
    "start": "168840",
    "end": "170920"
  },
  {
    "text": "filter so let's specify them both",
    "start": "170920",
    "end": "174959"
  },
  {
    "text": "here we'll give the filter name and",
    "start": "178000",
    "end": "180319"
  },
  {
    "text": "leave the pattern field blank so that",
    "start": "180319",
    "end": "181920"
  },
  {
    "text": "all log events sent to this log group",
    "start": "181920",
    "end": "183560"
  },
  {
    "text": "will be sent to the delivery",
    "start": "183560",
    "end": "185360"
  },
  {
    "text": "stream now let's head to Amazon Kinesis",
    "start": "185360",
    "end": "187879"
  },
  {
    "start": "186000",
    "end": "267000"
  },
  {
    "text": "fire hose to review the initial steps of",
    "start": "187879",
    "end": "189760"
  },
  {
    "text": "setting up a Kinesis delivery",
    "start": "189760",
    "end": "193040"
  },
  {
    "text": "stream here's the delivery stream for",
    "start": "193239",
    "end": "195360"
  },
  {
    "text": "the subscription filter we just set up",
    "start": "195360",
    "end": "197519"
  },
  {
    "text": "notice that its destination is an Amazon",
    "start": "197519",
    "end": "199400"
  },
  {
    "text": "simple storage service or Amazon S3",
    "start": "199400",
    "end": "201519"
  },
  {
    "text": "bucket let's create a new delivery",
    "start": "201519",
    "end": "205200"
  },
  {
    "text": "stream we'll give this delivery stream a",
    "start": "205200",
    "end": "207480"
  },
  {
    "text": "name and retain all the defaults until",
    "start": "207480",
    "end": "209239"
  },
  {
    "text": "we reach the point where we can select a",
    "start": "209239",
    "end": "212760"
  },
  {
    "text": "destination we can use any of these",
    "start": "216760",
    "end": "218680"
  },
  {
    "text": "types of destination for our delivery",
    "start": "218680",
    "end": "220239"
  },
  {
    "text": "stream depending on our needs Amazon S3",
    "start": "220239",
    "end": "223000"
  },
  {
    "text": "buckets are often used to store event",
    "start": "223000",
    "end": "224599"
  },
  {
    "text": "logs in a centralized",
    "start": "224599",
    "end": "227400"
  },
  {
    "text": "location Amazon redshift is an",
    "start": "227400",
    "end": "229560"
  },
  {
    "text": "Enterprise level data warehouse",
    "start": "229560",
    "end": "232599"
  },
  {
    "text": "service Amazon elastic search is useful",
    "start": "232599",
    "end": "235280"
  },
  {
    "text": "for log processing visualization and",
    "start": "235280",
    "end": "237239"
  },
  {
    "text": "querying",
    "start": "237239",
    "end": "239959"
  },
  {
    "text": "a custom HTTP endpoint can also be",
    "start": "239959",
    "end": "243760"
  },
  {
    "text": "used or we can select from a list of",
    "start": "243760",
    "end": "246000"
  },
  {
    "text": "thirdparty service",
    "start": "246000",
    "end": "248720"
  },
  {
    "text": "providers we can then configure our",
    "start": "248720",
    "end": "250720"
  },
  {
    "text": "settings with a few clicks to start",
    "start": "250720",
    "end": "252159"
  },
  {
    "text": "ingesting streaming data to our",
    "start": "252159",
    "end": "253640"
  },
  {
    "text": "specified",
    "start": "253640",
    "end": "255079"
  },
  {
    "text": "destination you've just seen how to use",
    "start": "255079",
    "end": "257040"
  },
  {
    "text": "cloudwatch logs subscription filters you",
    "start": "257040",
    "end": "259919"
  },
  {
    "text": "can learn more about this topic in the",
    "start": "259919",
    "end": "261400"
  },
  {
    "text": "description and links for this video",
    "start": "261400",
    "end": "263320"
  },
  {
    "text": "thanks for watching now it's your turn",
    "start": "263320",
    "end": "264720"
  },
  {
    "text": "to try",
    "start": "264720",
    "end": "267880"
  }
]