[
  {
    "text": "hello everybody thanks for coming today my name is David yanich I'm a software",
    "start": "3199",
    "end": "8200"
  },
  {
    "text": "developer on dynamodb and today we're going to be going talking about how to go from not having used dynamodb or",
    "start": "8200",
    "end": "15559"
  },
  {
    "text": "really knowing how it works to be able to write code with it and actually write write applications you're going to have",
    "start": "15559",
    "end": "21199"
  },
  {
    "text": "some homework at the end of this so uh so I I'll give you some kind of take homework and then I'm also joined by",
    "start": "21199",
    "end": "27279"
  },
  {
    "text": "Jason Lambert from here who's going to describe how uh he and his team have migrated a",
    "start": "27279",
    "end": "34120"
  },
  {
    "text": "very large application onto Dynamo DB and uh he'll be going into like how he",
    "start": "34120",
    "end": "39360"
  },
  {
    "text": "uses it what's he likes what he likes with it and how that migration actually happen so that you might be able to see",
    "start": "39360",
    "end": "45440"
  },
  {
    "text": "maybe how it might fit into your system how Dynamo might fit into your application and how you might be able to",
    "start": "45440",
    "end": "50480"
  },
  {
    "text": "get on there get your current application there or just use it for a new application so for the first part we're",
    "start": "50480",
    "end": "58039"
  },
  {
    "text": "going to talk about Dynamo DB in terms of kind of a history lesson of how did we get there why did we make Dynamo DB",
    "start": "58039",
    "end": "64158"
  },
  {
    "text": "so you can see what it's really designed for and then we'll go into a few",
    "start": "64159",
    "end": "69280"
  },
  {
    "text": "different types of applications like a that you're probably familiar with like a URL shortener image tagging and",
    "start": "69280",
    "end": "76840"
  },
  {
    "text": "tic-tac-toe game so these types of applications are pretty simple but they might also use Dynamo DB in a way that",
    "start": "76840",
    "end": "83479"
  },
  {
    "text": "you and your application might be using it so first this history lesson we'll",
    "start": "83479",
    "end": "89040"
  },
  {
    "text": "talk about databases in the cloud typical database architectures",
    "start": "89040",
    "end": "95000"
  },
  {
    "text": "look kind of like this you have your client tier like the web browser and then the person using the web browser",
    "start": "95000",
    "end": "101320"
  },
  {
    "text": "and that is talking to your application which is probably like a web server or something like that and then that's",
    "start": "101320",
    "end": "107159"
  },
  {
    "text": "talking to a traditional relational database and this database you're using",
    "start": "107159",
    "end": "113280"
  },
  {
    "text": "it for a lot of things it's kind of you're using it as a it's you're asking a lot of it you're doing your real time",
    "start": "113280",
    "end": "118920"
  },
  {
    "text": "transactions the get and put simple stuff you're also maybe doing some analytics or broader queries in the",
    "start": "118920",
    "end": "126960"
  },
  {
    "text": "background and so in the cloud what we do is actually take those each of those",
    "start": "126960",
    "end": "132680"
  },
  {
    "text": "types of use cases and types of queries and use a specialized data store use one",
    "start": "132680",
    "end": "138239"
  },
  {
    "text": "that's really best at that type of query for example the key value and the uh",
    "start": "138239",
    "end": "143560"
  },
  {
    "text": "even just the simple queries single index queries well that's something that Dynam DB is really good at and search is",
    "start": "143560",
    "end": "150800"
  },
  {
    "text": "search you can maybe a search index is best for fulltech search data warehousing Amazon red shift so that you",
    "start": "150800",
    "end": "156920"
  },
  {
    "text": "basically decompose your architecture so instead of using one data store for everything you can use",
    "start": "156920",
    "end": "163879"
  },
  {
    "text": "multiple and of course today we'll be focusing on dynamodb so a history of why we made",
    "start": "163879",
    "end": "170280"
  },
  {
    "text": "dynamodb the way we did well let's talk through amazon.com's history how did",
    "start": "170280",
    "end": "175800"
  },
  {
    "text": "well amazon.com is made is when you go to the website that's made up of thousands of",
    "start": "175800",
    "end": "181480"
  },
  {
    "text": "web services internally that are all providing data to rendering your web pages and those services are",
    "start": "181480",
    "end": "189080"
  },
  {
    "text": "using in the relational era at amazon.com those Services typically just",
    "start": "189080",
    "end": "194640"
  },
  {
    "text": "use the default choice for their data store was a relational database and so this was fine but they had each of these",
    "start": "194640",
    "end": "202080"
  },
  {
    "text": "services at Amazon to power the website does a pretty different type of thing",
    "start": "202080",
    "end": "208400"
  },
  {
    "text": "like the product services they generally do these key value lookups give me the details for this",
    "start": "208400",
    "end": "214159"
  },
  {
    "text": "product the ordering services are pretty right heavy because they have to process your order and a bunch of times while",
    "start": "214159",
    "end": "221120"
  },
  {
    "text": "you're uh while they're fulfilling that and catalog maybe that's more of the product search type of use case where",
    "start": "221120",
    "end": "227200"
  },
  {
    "text": "it's where you're actually searching for products and this in this era this",
    "start": "227200",
    "end": "233239"
  },
  {
    "text": "worked but we kind of had some problems of kind of dealing with these data stores this one size fits all data store",
    "start": "233239",
    "end": "240640"
  },
  {
    "text": "for all of these different use cases we'd have availability scaling problems the high cost of having this one kind of",
    "start": "240640",
    "end": "247920"
  },
  {
    "text": "one size fits-all data store enter the distributed era so here",
    "start": "247920",
    "end": "253040"
  },
  {
    "text": "we made a system called Dynamo Dynamo is a a nosql data store that uses a lot of",
    "start": "253040",
    "end": "259840"
  },
  {
    "text": "distributed systems techniques under the hood to give High availability High scalability",
    "start": "259840",
    "end": "266160"
  },
  {
    "text": "horizontally and so this was fine except now now we had this complex distributed",
    "start": "266160",
    "end": "272039"
  },
  {
    "text": "system that all these teams these service teams had to know how to use and also how to",
    "start": "272039",
    "end": "279560"
  },
  {
    "text": "operate enter the cloud era so this is why we made Dynamo DB we made Dynamo DB",
    "start": "279600",
    "end": "285680"
  },
  {
    "text": "to be a very fast predictable performing highly available database service for",
    "start": "285680",
    "end": "291320"
  },
  {
    "text": "all types of applications who need seamless scaleability without having to deal with administering a complicated",
    "start": "291320",
    "end": "298320"
  },
  {
    "text": "distributed system store we'll handle all that distributed system stuff behind the scenes and give you a simple",
    "start": "298320",
    "end": "305440"
  },
  {
    "text": "API so what is it that goes into a database service well dynamodb is very massively",
    "start": "305440",
    "end": "312320"
  },
  {
    "text": "and seamlessly scalable we'll handle as your data grows in size we will handle",
    "start": "312320",
    "end": "317560"
  },
  {
    "text": "spreading out that data across partitions behind the scenes and as you need more throughput to make more",
    "start": "317560",
    "end": "323360"
  },
  {
    "text": "requests per second to your table we will also add more capacity behind the",
    "start": "323360",
    "end": "328639"
  },
  {
    "text": "scenes Dynamo DB also op automates the operations for you it frees you up from",
    "start": "328639",
    "end": "333880"
  },
  {
    "text": "having to do things like patching like having to deal with down nodes to having",
    "start": "333880",
    "end": "338919"
  },
  {
    "text": "deal with setting up replication and keeping the replication going you just don't have to deal with all that stuff",
    "start": "338919",
    "end": "344360"
  },
  {
    "text": "instead it's happening behind the scenes without affecting the performance of your application Dynamo DB also f is designed",
    "start": "344360",
    "end": "351880"
  },
  {
    "text": "to focus on very consistent predictable performance at any scale so you can see as your this is actually a real graph as",
    "start": "351880",
    "end": "358639"
  },
  {
    "text": "the lat the latency stays the same as the throughput grows es and",
    "start": "358639",
    "end": "363759"
  },
  {
    "text": "flows dynb is also replicated across multiple availability zones this is not",
    "start": "363759",
    "end": "369039"
  },
  {
    "text": "an option it is replicated across availability zones so your data is replicated on disk um before acknow",
    "start": "369039",
    "end": "376840"
  },
  {
    "text": "before rights are acknowledged to the client so durability is at the core of",
    "start": "376840",
    "end": "382319"
  },
  {
    "text": "dynamodb our customers tell us that they save a lot of money using dynamodb it's a ad roll for example has said they",
    "start": "382319",
    "end": "390080"
  },
  {
    "text": "spend more on snacks than they do on Dynamo DB and they actually use a lot of Dynamo DB so they they actually have a",
    "start": "390080",
    "end": "397840"
  },
  {
    "text": "talk customers also tell us that they develop applications quickly this way for example Shazam made a Super Bowl",
    "start": "397840",
    "end": "405080"
  },
  {
    "text": "advertisment scale application in uh three days and that's pretty impressive",
    "start": "405080",
    "end": "411560"
  },
  {
    "text": "to be able to do that without having to have any operations in order to scale up all that capacity for this one event",
    "start": "411560",
    "end": "419759"
  },
  {
    "text": "so that's a database service let's go into how to use it so first let's go into this URL Sher",
    "start": "419759",
    "end": "427840"
  },
  {
    "text": "type of application so this is a pretty simple type of application basically you have a really long URL maybe you want to",
    "start": "427840",
    "end": "434240"
  },
  {
    "text": "send it to somebody in an email it's kind of obnoxiously long and so instead you can send a shorter URL okay yeah I",
    "start": "434240",
    "end": "440960"
  },
  {
    "text": "think you've all used this type of thing the architecture for an application like this looks like this well there's the",
    "start": "440960",
    "end": "447479"
  },
  {
    "text": "client which is the person using the web browser in the middle there and then there's your application on the left and",
    "start": "447479",
    "end": "452840"
  },
  {
    "text": "then the actual site that you're trying to link people to on the right and when somebody visits the site",
    "start": "452840",
    "end": "458759"
  },
  {
    "text": "they don't go directly to the destination they first go to your short URL service and your service looks up",
    "start": "458759",
    "end": "465400"
  },
  {
    "text": "that mapping to say okay here's the short URL what is the long URL that it points to and while it's at it your",
    "start": "465400",
    "end": "471919"
  },
  {
    "text": "application can do some analytics in dynamodb it could just store some usage information maybe you want to know how",
    "start": "471919",
    "end": "477919"
  },
  {
    "text": "many people are visiting each UR okay kind of an aside and then once you give the short",
    "start": "477919",
    "end": "485720"
  },
  {
    "text": "the long URL back to the customer back to the client then the client goes to the destination site and the end user",
    "start": "485720",
    "end": "492400"
  },
  {
    "text": "never sees that long URL it's hidden by the browser okay in Dynamo DB the table",
    "start": "492400",
    "end": "498240"
  },
  {
    "text": "for a schema like this could look like this where you have just a simple URL table this is for storing that map",
    "start": "498240",
    "end": "505759"
  },
  {
    "text": "in and tables have items items are like rows items have attributes notice I",
    "start": "505759",
    "end": "513360"
  },
  {
    "text": "didn't say that tables have attributes even though it looks like this because dynamodb is schema",
    "start": "513360",
    "end": "518959"
  },
  {
    "text": "list that's because we heard from all of you that you don't want to deal with migrating your database schema and",
    "start": "518959",
    "end": "524839"
  },
  {
    "text": "coordinating that deployment with deploying new code to your application so every item can have different",
    "start": "524839",
    "end": "532160"
  },
  {
    "text": "attributes the one exception to this of course is the primary key so you have to say in your table the short URL is the",
    "start": "532160",
    "end": "539640"
  },
  {
    "text": "thing that uniquely identifies every item in the table and actually as of about a month",
    "start": "539640",
    "end": "545200"
  },
  {
    "text": "ago now instead of being these flat Maps items are actually nested documents so",
    "start": "545200",
    "end": "551560"
  },
  {
    "text": "now you can store Json you documents in Dynamo",
    "start": "551560",
    "end": "556760"
  },
  {
    "text": "DB so be you can store data types like strings string sets and actually now",
    "start": "556760",
    "end": "563399"
  },
  {
    "text": "nested Maps nested lists and these types of things every data type that Json has",
    "start": "563399",
    "end": "568440"
  },
  {
    "text": "including Boolean and null which isn't that exciting of a data type but hey you got Jason has it we will also have it",
    "start": "568440",
    "end": "576360"
  },
  {
    "text": "and so dynamodb also supports a superet of Json so you can store binary data and",
    "start": "576360",
    "end": "582079"
  },
  {
    "text": "sets and that sort of thing in Dynamo DB that aren't actually natively supported in",
    "start": "582079",
    "end": "587440"
  },
  {
    "text": "Json also actually we did a lot in the last month that includes increasing the",
    "start": "587440",
    "end": "592519"
  },
  {
    "text": "maximum item size to 400 kilobytes okay so how does this short",
    "start": "592519",
    "end": "598320"
  },
  {
    "text": "URL application actually going to work well it needs to do a few things like add a URL and list the URLs this type of",
    "start": "598320",
    "end": "606560"
  },
  {
    "text": "thing so to add a URL you can use the put item API it's pretty simple this is",
    "start": "606560",
    "end": "612519"
  },
  {
    "text": "using the JavaScript SDK the JavaScript document SDK so here you can see the item it's just a typical JavaScript",
    "start": "612519",
    "end": "618880"
  },
  {
    "text": "object that nested thing and then you just call the put item API great what",
    "start": "618880",
    "end": "623920"
  },
  {
    "text": "about resolving a short URL where you now your your customer is waiting for you to give back the mapping",
    "start": "623920",
    "end": "630399"
  },
  {
    "text": "while there you can just call the get item API you tell us the primary key and we'll give it back to you and the get",
    "start": "630399",
    "end": "637720"
  },
  {
    "text": "item API and the other reads have this optional consistency read consistency",
    "start": "637720",
    "end": "642760"
  },
  {
    "text": "level so you can actually say dynamodb give me back the latest copy of this",
    "start": "642760",
    "end": "648279"
  },
  {
    "text": "item definitely up to date or you can say give me a copy that might be a little bit out of date and the",
    "start": "648279",
    "end": "655160"
  },
  {
    "text": "performance is the same for both but the cost of an eventually consistent read is half so it's just an option it's not",
    "start": "655160",
    "end": "661880"
  },
  {
    "text": "something you set on the table and every request you get to decide whether you want potentially slightly out of date or",
    "start": "661880",
    "end": "667560"
  },
  {
    "text": "definitely not out of date it's pretty handy and listing short URLs uh you can",
    "start": "667560",
    "end": "673760"
  },
  {
    "text": "use the scan API to do a full table scan of the database this isn't something you want to be probably doing all the time",
    "start": "673760",
    "end": "679680"
  },
  {
    "text": "in your application but this is how you get the data out all of the data out scan and also query are paginated apis",
    "start": "679680",
    "end": "687560"
  },
  {
    "text": "it's kind of like reading a book you're flipping through pages in a book one you're reading one page at a time you don't have like a scroll that you're",
    "start": "687560",
    "end": "693920"
  },
  {
    "text": "just kind of you know going through and it's it's separate pages and it's like that in the API in the API you call you",
    "start": "693920",
    "end": "700320"
  },
  {
    "text": "do one request and we'll give you some data back you call back again and we'll give you more some of the sdks actually",
    "start": "700320",
    "end": "706519"
  },
  {
    "text": "abstract this for you so you can actually just have a loop in your code and it'll handle the pagination behind the scenes pretty",
    "start": "706519",
    "end": "713920"
  },
  {
    "text": "convenient and to search a URL search URLs this is again a full table scan but",
    "start": "713920",
    "end": "719800"
  },
  {
    "text": "you can ask dynb to filter out certain items and only give you ones that match actually pretty complex Expressions",
    "start": "719800",
    "end": "726760"
  },
  {
    "text": "again in the last month we added this kind of sqll like expression support and",
    "start": "726760",
    "end": "731800"
  },
  {
    "text": "here you can see it in the scan you can see not now there are actually parentheses you can do use this",
    "start": "731800",
    "end": "737680"
  },
  {
    "text": "expression looks a lot like a SQL query which is probably more convenient for all of you to learn how to use because",
    "start": "737680",
    "end": "743880"
  },
  {
    "text": "it's something that many of you are probably familiar with so here we're asking Dynamo DB to give us to go",
    "start": "743880",
    "end": "749560"
  },
  {
    "text": "through the table the whole table but give us only the URLs that match certain kind of conditions it's pretty",
    "start": "749560",
    "end": "757320"
  },
  {
    "text": "interesting and collecting usage statistics well how would we do that we've talked about reads so far and",
    "start": "757320",
    "end": "762680"
  },
  {
    "text": "putting in new things well we can introduce a new attribute called views where we'll keep track of how many times",
    "start": "762680",
    "end": "768639"
  },
  {
    "text": "a URL has been viewed and then the last visited time so that's storing the yeah",
    "start": "768639",
    "end": "774040"
  },
  {
    "text": "obviously every time we re we visit the site we'll update that and so we'll use the update item API for this and here",
    "start": "774040",
    "end": "782040"
  },
  {
    "text": "the update item API is where you tell dynb hey leave the whole rest of the item alone just update this attribute or",
    "start": "782040",
    "end": "789000"
  },
  {
    "text": "these attributes and you can use a feature called Atomic counters where you can say instead of setting a specific",
    "start": "789000",
    "end": "796279"
  },
  {
    "text": "value for that attribute you can just say add one I don't know what's there right now just add one add one add one",
    "start": "796279",
    "end": "802199"
  },
  {
    "text": "and so that's what we're doing here we're just incrementing the views and setting the last viewed",
    "start": "802199",
    "end": "807480"
  },
  {
    "text": "time now in Dynam ODB all the right operations are also reads for free so",
    "start": "807480",
    "end": "814360"
  },
  {
    "text": "when you do this update operation you say update the item I I don't know what the current value is for views but",
    "start": "814360",
    "end": "820519"
  },
  {
    "text": "update the item add one and then just give me the item back while you're at it and so while updating the item we will",
    "start": "820519",
    "end": "827279"
  },
  {
    "text": "return whatever was there or is there now and we've been looking at the not",
    "start": "827279",
    "end": "834440"
  },
  {
    "text": "only just the regular SDK that we've had before but we also released new sdks that are really kind of we kind of",
    "start": "834440",
    "end": "840440"
  },
  {
    "text": "looked at the SDK experience when we were developing the document feature and wanted to make as natural of a a",
    "start": "840440",
    "end": "846680"
  },
  {
    "text": "programming model as possible so if you're using Dynam Tob for the first time this actually isn't really relevant",
    "start": "846680",
    "end": "852680"
  },
  {
    "text": "it'll just be this really natural development experience I hope now all these examples we've been",
    "start": "852680",
    "end": "858800"
  },
  {
    "text": "going through have actually been screenshots from the dynamodb local JavaScript webshell which again in the",
    "start": "858800",
    "end": "865079"
  },
  {
    "text": "last month is a tool that we released Dynamo Tob local which we've had for a while is something that you can actually",
    "start": "865079",
    "end": "872000"
  },
  {
    "text": "download for free without even signing up for AWS you download a program which",
    "start": "872000",
    "end": "877399"
  },
  {
    "text": "will then basically you run on your laptop I'm running it right now we'll see it in a second you run it on your",
    "start": "877399",
    "end": "882959"
  },
  {
    "text": "laptop and it starts a web server that answers the dynamodb API requests and",
    "start": "882959",
    "end": "888040"
  },
  {
    "text": "gives you back the responses just like the web service and it stores the data locally in a sqlite database this is",
    "start": "888040",
    "end": "894360"
  },
  {
    "text": "Handy for offline development if you are on an airplane and you don't want to have have the Wi-Fi if it's even offered",
    "start": "894360",
    "end": "901079"
  },
  {
    "text": "or if you want to run a bunch of unit tests and not have to create actual Dynamo DB tables it's just a really",
    "start": "901079",
    "end": "906480"
  },
  {
    "text": "convenient handy thing and so to that we added a user interface this JavaScript",
    "start": "906480",
    "end": "912959"
  },
  {
    "text": "webshell so let's take a look at that what what am I even talking about",
    "start": "912959",
    "end": "918199"
  },
  {
    "text": "here so the JavaScript webshell is this where we basically have two sides here",
    "start": "918199",
    "end": "924040"
  },
  {
    "text": "we have the uh the left side this is a nice way to get started is with this thing the left side is a code editor and",
    "start": "924040",
    "end": "929959"
  },
  {
    "text": "then the right side is where we're going to see the output so let's say we want to create a table we have that URL",
    "start": "929959",
    "end": "935759"
  },
  {
    "text": "example going so let's stick with that if we want to create a table this is all it takes to create a table we're just",
    "start": "935759",
    "end": "941160"
  },
  {
    "text": "basically saying what's the hash key okay great so there we've created the table now to list the tables to see what",
    "start": "941160",
    "end": "948079"
  },
  {
    "text": "tables we have here we can just do um start typing here and do control space and then we have a couple of macros or",
    "start": "948079",
    "end": "954600"
  },
  {
    "text": "Snippets there so if I want to list all of the tables I just do that and I'm pressing contr enter to execute these",
    "start": "954600",
    "end": "960120"
  },
  {
    "text": "commands and so here you can see the tables are listed and then you this is another way to execute the command is",
    "start": "960120",
    "end": "965600"
  },
  {
    "text": "with this play button now if we want to put an item this is kind of going through the slides that we just did",
    "start": "965600",
    "end": "970920"
  },
  {
    "text": "basically if you want to put it I've prepared one just because so you don't have to watch me type it but here I'm",
    "start": "970920",
    "end": "976199"
  },
  {
    "text": "going to put the item and execute it that's great that's it and now if we want to scan kind of like that this is",
    "start": "976199",
    "end": "982839"
  },
  {
    "text": "another thing I'll do on the fly if you do scan we actually have a little macro here for pagination so if you want to",
    "start": "982839",
    "end": "988480"
  },
  {
    "text": "scan the entire URL table you just do that and there we go there's actually only one item in the table so that's",
    "start": "988480",
    "end": "995360"
  },
  {
    "text": "basically it so you'll be able to download this uh JavaScript webshell with Dynamo to be local it's all",
    "start": "995360",
    "end": "1001600"
  },
  {
    "text": "packaged up and get started right away so that's kind of part of your homework assignment but only part of it there uh",
    "start": "1001600",
    "end": "1008199"
  },
  {
    "text": "I'll give you some more as we go on so to recap here we talked about this",
    "start": "1008199",
    "end": "1013639"
  },
  {
    "text": "URL shortener application and how it uses dynb to store these documents and then how it uses Dynamo's very fast",
    "start": "1013639",
    "end": "1021000"
  },
  {
    "text": "performance to be able to um serve out these short URL mappings when performance and availability really",
    "start": "1021000",
    "end": "1026959"
  },
  {
    "text": "matters and we also talked about a bunch of new features not even not even going to list them here because we talked",
    "start": "1026959",
    "end": "1032160"
  },
  {
    "text": "about a lot but uh we and then more importantly the API we talked about how to get items put items to replace them",
    "start": "1032160",
    "end": "1038720"
  },
  {
    "text": "and update them okay now another type of",
    "start": "1038720",
    "end": "1044240"
  },
  {
    "text": "application let's go into image tagging different use case for image tagging let's say we have",
    "start": "1044240",
    "end": "1051640"
  },
  {
    "text": "um basically a a cloud of tags and we want to be able to click on a tag and see all of the images which have been",
    "start": "1051640",
    "end": "1057760"
  },
  {
    "text": "tagged with that tag okay so the the application needs to do",
    "start": "1057760",
    "end": "1063919"
  },
  {
    "text": "queries like this it needs to be able to well let's make it social so let's say that users can upload images and then",
    "start": "1063919",
    "end": "1070679"
  },
  {
    "text": "users can tag other users in those images so we have a few different query use cases that we need to plan for here",
    "start": "1070679",
    "end": "1077799"
  },
  {
    "text": "so for this let's start with a pretty simple table let's say this the images table okay so in this table we can store",
    "start": "1077799",
    "end": "1085159"
  },
  {
    "text": "these images for given user so if you remember in the short URL example the short URL was the primary key well now",
    "start": "1085159",
    "end": "1092200"
  },
  {
    "text": "we're going to have a composite primary key of a hash key and a range key so",
    "start": "1092200",
    "end": "1097440"
  },
  {
    "text": "what this means is the hash means that you can come in and do kind of equality queries with that part but then you can",
    "start": "1097440",
    "end": "1103440"
  },
  {
    "text": "everything within a hashkey value is sorted by the range so you can see here everything within Bob is sorted by that",
    "start": "1103440",
    "end": "1110559"
  },
  {
    "text": "range key and so items are uniquely identified though by a combination of",
    "start": "1110559",
    "end": "1116159"
  },
  {
    "text": "the Bob and the image ID the combination of user and image so we can now use the query API in",
    "start": "1116159",
    "end": "1123400"
  },
  {
    "text": "dynamodb because we have the hash and the range so you can just do a query to say given Bob let's say we're looking",
    "start": "1123400",
    "end": "1129840"
  },
  {
    "text": "trying to see um find all of Bob's images well then you can say come in with Bob and say give me all of Bob's",
    "start": "1129840",
    "end": "1136320"
  },
  {
    "text": "images and now they'll all be sorted by their image ID but that isn't actually all that useful",
    "start": "1136320",
    "end": "1141760"
  },
  {
    "text": "of a query I mean maybe it is but being sorted by image ID I mean what are you going to do show all of Bob's images all",
    "start": "1141760",
    "end": "1149039"
  },
  {
    "text": "the time probably not you'll probably again have a paginated API or a paginated interface maybe you only want",
    "start": "1149039",
    "end": "1155280"
  },
  {
    "text": "to see the most recent images of Bob the first 10 or something like that well that query isn't really going to help us",
    "start": "1155280",
    "end": "1161600"
  },
  {
    "text": "because it was giving us all of the images back or they weren't sorted by date so how do we get them ordered by",
    "start": "1161600",
    "end": "1167200"
  },
  {
    "text": "date for this we use a feature called secondary indexes this is a secondary",
    "start": "1167200",
    "end": "1172480"
  },
  {
    "text": "index is essentially another dynamodb table that dynamodb maintains automatically for you behind the scenes",
    "start": "1172480",
    "end": "1179480"
  },
  {
    "text": "but just sorted differently so what am I talking about well there's the same images table but now here's the",
    "start": "1179480",
    "end": "1185400"
  },
  {
    "text": "secondary index on the right so we've put a secondary index where now in Bob",
    "start": "1185400",
    "end": "1191039"
  },
  {
    "text": "everything is sorted by date so given Bob now we we can query by",
    "start": "1191039",
    "end": "1196159"
  },
  {
    "text": "date and get the most recent images so we can come in and do a query given Bob giving me the most recent two images",
    "start": "1196159",
    "end": "1203840"
  },
  {
    "text": "okay great now we have the query it's very efficient and fast and it's selecting exactly the rows that we're",
    "start": "1203840",
    "end": "1209919"
  },
  {
    "text": "looking for this is just like in a relational database using indexes except we're just being pretty explicit about",
    "start": "1209919",
    "end": "1215880"
  },
  {
    "text": "which indexes we're using so that we can give you that really predictable performance no query plan flips you're",
    "start": "1215880",
    "end": "1221320"
  },
  {
    "text": "just going to give you predictable performance of that no surprises with these queries let's go into the other",
    "start": "1221320",
    "end": "1226679"
  },
  {
    "text": "type of use case with image tagging where you want to tag users in images for this there are several ways to do",
    "start": "1226679",
    "end": "1233240"
  },
  {
    "text": "this but let's just use an image tags table this will store a mapping a many",
    "start": "1233240",
    "end": "1238559"
  },
  {
    "text": "to many mapping between images and users so now this again has the hash and",
    "start": "1238559",
    "end": "1244840"
  },
  {
    "text": "range primary key schema it just is storing different things and now let's say we want to show all of the users",
    "start": "1244840",
    "end": "1251880"
  },
  {
    "text": "that are tagged in an image for example at the front of a page where you're looking at an image you can say here are the people tagged so this is the queer",
    "start": "1251880",
    "end": "1258600"
  },
  {
    "text": "query for that web page given an image query all of the users great and then to tag another user",
    "start": "1258600",
    "end": "1266640"
  },
  {
    "text": "you just add another record to this table using the put item API but what about a different type of",
    "start": "1266640",
    "end": "1273159"
  },
  {
    "text": "query where we want to query the images that a user is tagged in it's kind of different than what we've talked about",
    "start": "1273159",
    "end": "1279400"
  },
  {
    "text": "so far for this we'll use a global secondary index it's just a different type of secondary index where now you",
    "start": "1279400",
    "end": "1286720"
  },
  {
    "text": "can instead of specifying a different range key only you can specify a different hash key or a different range",
    "start": "1286720",
    "end": "1292960"
  },
  {
    "text": "key it gives you one more query patterns and this is maintaining a",
    "start": "1292960",
    "end": "1298400"
  },
  {
    "text": "distributed transaction for you behind the scenes so before actually with local secondary indexes we were talking about",
    "start": "1298400",
    "end": "1305880"
  },
  {
    "text": "a different range key for the same hash key so dynamodb can do that all kind of locally the way it stores the data with",
    "start": "1305880",
    "end": "1312000"
  },
  {
    "text": "global secondary indexes now you're asking dynamodb to go partition your data a little differently which is pretty interesting I'm not going to be",
    "start": "1312000",
    "end": "1318200"
  },
  {
    "text": "going into partitioning much here but it's a distributed transaction that we're doing for you behind the scenes",
    "start": "1318200",
    "end": "1324200"
  },
  {
    "text": "but it's another type of index what does it mean to you well you have this table same table as we were talking about the",
    "start": "1324200",
    "end": "1329880"
  },
  {
    "text": "image tags table a global secondary index means we can pick a different hash key so we can take any attribute let's",
    "start": "1329880",
    "end": "1336440"
  },
  {
    "text": "take the range key the user and make that the hash key of the secondary index and now you can come in in query given",
    "start": "1336440",
    "end": "1343679"
  },
  {
    "text": "that user you're trying to answer the question okay I'm a user what images am I tagged in well now this is the the",
    "start": "1343679",
    "end": "1350880"
  },
  {
    "text": "index for that query you want to say given Alice what images is Alice tagged in so now we have that great query we",
    "start": "1350880",
    "end": "1357520"
  },
  {
    "text": "don't have to look through the entire table we have the right query that we're looking for so we talked about for image tagging",
    "start": "1357520",
    "end": "1364480"
  },
  {
    "text": "we're really going into the query API Dynam DB is a lot more than a key Value Store it has these very performant",
    "start": "1364480",
    "end": "1370440"
  },
  {
    "text": "secondary indexes and primary indexes you can do these queries just like you're querying in indexes elsewhere and",
    "start": "1370440",
    "end": "1377080"
  },
  {
    "text": "sorted by the range keyy it's pretty powerful when it comes to actually building applications in",
    "start": "1377080",
    "end": "1383120"
  },
  {
    "text": "practice we also um actually the we already talked about the webshell but",
    "start": "1383120",
    "end": "1388760"
  },
  {
    "text": "this is the next part of your homework assignment is that the webshell actually comes with a demo a tutorial actually",
    "start": "1388760",
    "end": "1396120"
  },
  {
    "text": "and it's a guided tour of this application so basically the stuff that I was running through pretty quickly",
    "start": "1396120",
    "end": "1401880"
  },
  {
    "text": "this is all in a step-by-step tutorial that shows you the code to build this image tagging application that we just",
    "start": "1401880",
    "end": "1408080"
  },
  {
    "text": "talked about out so take it take a look download dynamodb local you can get it from the developer guide run the",
    "start": "1408080",
    "end": "1414000"
  },
  {
    "text": "JavaScript web shell and then you basically just type tutorial. start and it'll go it tells you exactly what to do",
    "start": "1414000",
    "end": "1419799"
  },
  {
    "text": "so just spin up the JavaScript webshell and then you can get started get this tutorial and at the end of it is a",
    "start": "1419799",
    "end": "1425760"
  },
  {
    "text": "working implementation of the image tag demo so it actually shows you the end to",
    "start": "1425760",
    "end": "1431039"
  },
  {
    "text": "end code not just the Snippets so that's a great way to get started on Dynamo to be actually coding",
    "start": "1431039",
    "end": "1439840"
  },
  {
    "text": "next we'll talk about another application another example and we'll talk about concurrency control and how",
    "start": "1439960",
    "end": "1446520"
  },
  {
    "text": "to do how to handle the fact that your own application is concurrent and running on multiple instances at the",
    "start": "1446520",
    "end": "1452000"
  },
  {
    "text": "same time and let's so for the tic tac toe game let's say you have items like this",
    "start": "1452000",
    "end": "1458480"
  },
  {
    "text": "we want to run a tic tac toe game you would have items where the we just need a hash key for each game so let's say",
    "start": "1458480",
    "end": "1465080"
  },
  {
    "text": "each game gets its own ID and then we have the game item where will store who's playing we'll have whose turn it",
    "start": "1465080",
    "end": "1471120"
  },
  {
    "text": "is and the state about the game like which positions people have played in assume people pretty familiar with tic",
    "start": "1471120",
    "end": "1477240"
  },
  {
    "text": "taac toe but let's start a game let's go through walk through a game between Alice and Bob and see how we're going to",
    "start": "1477240",
    "end": "1483120"
  },
  {
    "text": "use dynamodb for that well if it's Alice's turns first and Alice is O well then you your",
    "start": "1483120",
    "end": "1489960"
  },
  {
    "text": "application would use the update item API to say okay remember update item leaves all the other attributes the loan",
    "start": "1489960",
    "end": "1496720"
  },
  {
    "text": "and it just updates specific attributes so we'll say Okay Alice is moving in the",
    "start": "1496720",
    "end": "1501799"
  },
  {
    "text": "top right so we'll set that to O and we'll make it Bob's turn now and now Bob goes and Bob decides well you use the",
    "start": "1501799",
    "end": "1509600"
  },
  {
    "text": "same API to Mark the top left as an X and we'll set it back to Alice's turn",
    "start": "1509600",
    "end": "1515440"
  },
  {
    "text": "but now Bob realizes that by playing that move he realizes he's effectively lost as long as Alice plays correctly so",
    "start": "1515440",
    "end": "1521960"
  },
  {
    "text": "Bob realizes that he's terrible at this game and he decides instead to cheat so",
    "start": "1521960",
    "end": "1527399"
  },
  {
    "text": "employ a different strategy so Bob tries to play three moves at the same time before Alice goes and the way",
    "start": "1527399",
    "end": "1534279"
  },
  {
    "text": "we've described this youd send those requests at the same time the way we've talked through this with the apis and",
    "start": "1534279",
    "end": "1539360"
  },
  {
    "text": "Dynamo Tob this would work we would actually the apis would merge those results together just like they were",
    "start": "1539360",
    "end": "1545240"
  },
  {
    "text": "supposed to so we obviously need a way around that so in order to see how to fix this let's see what's going on well",
    "start": "1545240",
    "end": "1552200"
  },
  {
    "text": "we're using the update item API and so the update item API is saying hey update",
    "start": "1552200",
    "end": "1557240"
  },
  {
    "text": "these specific attributes and leave the rest alone and so when Bob makes all of those requests they're merg merge",
    "start": "1557240",
    "end": "1563840"
  },
  {
    "text": "together and they result in all of those it's Alice's turn now but all of the positions have been",
    "start": "1563840",
    "end": "1569480"
  },
  {
    "text": "played for to fix this we'll use a feature called conditional rights conditional rights are where in your",
    "start": "1569480",
    "end": "1575919"
  },
  {
    "text": "request you ask Dynamo B do this request as long as certain attributes in the",
    "start": "1575919",
    "end": "1582760"
  },
  {
    "text": "item meet my expectations what am I talking about well we can add this expected",
    "start": "1582760",
    "end": "1589840"
  },
  {
    "text": "Clause here to every one of those requests so that top left one there we're saying update the item set it to",
    "start": "1589840",
    "end": "1596640"
  },
  {
    "text": "Alice's turn and set the top left to X as long as it's still Bob's turn and as",
    "start": "1596640",
    "end": "1602840"
  },
  {
    "text": "long as nobody has played in the top left yet okay and so now all of the",
    "start": "1602840",
    "end": "1608279"
  },
  {
    "text": "requests will say that add that expectation and then when they're sent to Dynamo DB they one of them actually",
    "start": "1608279",
    "end": "1615880"
  },
  {
    "text": "will arrive first when it really comes down to it rights to a single item in Dynamo are serialized parallelized",
    "start": "1615880",
    "end": "1623200"
  },
  {
    "text": "across the table but given an item one thing gets there first and so let's say one of them gets there first it sets it",
    "start": "1623200",
    "end": "1629600"
  },
  {
    "text": "to Alice's turn and now all those other requests that we're expecting it to still be Bob's turn will be rejected",
    "start": "1629600",
    "end": "1636320"
  },
  {
    "text": "just like we wanted so now we fixed the concurrency control issue great there's actually one more Edge",
    "start": "1636320",
    "end": "1643520"
  },
  {
    "text": "case here it's a little nuanced but if you the problem is we're not marking the",
    "start": "1643520",
    "end": "1649440"
  },
  {
    "text": "game as complete at the end we're not saying oh actually Alice won now or Bob won now we're having to do that in the",
    "start": "1649440",
    "end": "1656600"
  },
  {
    "text": "next round trip and so that leaves this little window of opportunity for Bob to sneak in a tying move instead of so this",
    "start": "1656600",
    "end": "1663480"
  },
  {
    "text": "is basically the other player can play another move after the win which is let's let's fix that problem and we can",
    "start": "1663480",
    "end": "1669799"
  },
  {
    "text": "just do that by using the same feature but in a slightly different way we'll",
    "start": "1669799",
    "end": "1674880"
  },
  {
    "text": "use the um read modify and write pattern and so this is just a design pattern",
    "start": "1674880",
    "end": "1680320"
  },
  {
    "text": "it's a way of using conditional rights you might be doing this today already basically we'll introduce a version",
    "start": "1680320",
    "end": "1685880"
  },
  {
    "text": "attribute so now every attribute will have this version number that will change every time we update the",
    "start": "1685880",
    "end": "1691640"
  },
  {
    "text": "item the the algorithm is like this I'm going to show you I just wrote it up there just in case but you first you",
    "start": "1691640",
    "end": "1697799"
  },
  {
    "text": "read the item and you keep track of the version number that you just observed now you make your changes in memory",
    "start": "1697799",
    "end": "1704600"
  },
  {
    "text": "you're about to write them to dynamodb and you increment that version number and then when you go and save it to",
    "start": "1704600",
    "end": "1710279"
  },
  {
    "text": "Dynamo DB you you say condition this right as long as the version number",
    "start": "1710279",
    "end": "1715559"
  },
  {
    "text": "hasn't changed in the meantime so every right is changing the version number and all expecting the previous version",
    "start": "1715559",
    "end": "1721399"
  },
  {
    "text": "number to still be the the version number it looks like this let's say we have Bob two Bobs trying to write to the",
    "start": "1721399",
    "end": "1728240"
  },
  {
    "text": "same item in Dynamo DB so they're they first they go that read step so Bob one",
    "start": "1728240",
    "end": "1734440"
  },
  {
    "text": "reads the item and gets back version one Bob two does the same thing and so Bob two gets the same version one now step",
    "start": "1734440",
    "end": "1742200"
  },
  {
    "text": "two is modify so they'll both be doing this update in memory they're making that change and setting the version",
    "start": "1742200",
    "end": "1748120"
  },
  {
    "text": "number to two and then step three is right and they're doing that conditional right so Bob one gets there first and",
    "start": "1748120",
    "end": "1756279"
  },
  {
    "text": "does the does the put as long as the version is still one it still is now the version is two but now Bob 2's request",
    "start": "1756279",
    "end": "1763960"
  },
  {
    "text": "gets there and it arrived second and the version is no longer one so that gets rejected as we'd",
    "start": "1763960",
    "end": "1770000"
  },
  {
    "text": "expect now you don't have to actually write the code to do this pattern it's a design pattern and it's actually",
    "start": "1770000",
    "end": "1776320"
  },
  {
    "text": "codified in the Dynamo Dynamo DB mapper so the mapper you probably if let's say you're in Java you probably already have",
    "start": "1776320",
    "end": "1782679"
  },
  {
    "text": "a class representing games in the in the table so you can just add some annotations to that to say oh this is",
    "start": "1782679",
    "end": "1790279"
  },
  {
    "text": "the version number attribute and some other dynb attrib attributes to say what",
    "start": "1790279",
    "end": "1795600"
  },
  {
    "text": "the table is and now you can use a really simp simple API you don't even have to go to the Dynamo Tob update item",
    "start": "1795600",
    "end": "1801120"
  },
  {
    "text": "or put item API that's all abstracted you just say hey load this game save",
    "start": "1801120",
    "end": "1806480"
  },
  {
    "text": "this game and behind the scenes it's keeping track of that version number and dealing with the conditional rights and",
    "start": "1806480",
    "end": "1811559"
  },
  {
    "text": "everything so it's pretty powerful abstraction that you got there so we talked about game State we talked about",
    "start": "1811559",
    "end": "1818240"
  },
  {
    "text": "concurrency control in your applications and how to use Dynam DB to do to solve these kind of race conditions and also a",
    "start": "1818240",
    "end": "1824640"
  },
  {
    "text": "general pattern for how to do this and the read modify right pattern and even some tools and",
    "start": "1824640",
    "end": "1830760"
  },
  {
    "text": "sdks so I said I would have some more homework for you well here it is we",
    "start": "1830760",
    "end": "1835960"
  },
  {
    "text": "actually have that application the tic-tac-toe game implemented in Python available through the developer guide so",
    "start": "1835960",
    "end": "1843080"
  },
  {
    "text": "you can download that application we have a walkth through in the developer guide that shows all the queries how",
    "start": "1843080",
    "end": "1848200"
  },
  {
    "text": "it's doing conditional rights and we have a way to deploy that we show you how to deploy that using elastic beant",
    "start": "1848200",
    "end": "1854080"
  },
  {
    "text": "stock to real ec2 instances with using real Dynamo DBT so with all the kind of tools that I've",
    "start": "1854080",
    "end": "1860600"
  },
  {
    "text": "given you to get started here now you can learn how to code dynamodb you and you also can deploy and see actual",
    "start": "1860600",
    "end": "1867639"
  },
  {
    "text": "applications with it so just to recap this section and then I'm going to hand it off we talked",
    "start": "1867639",
    "end": "1874519"
  },
  {
    "text": "about kind of how D dynamodb came to be why we built it and also some example",
    "start": "1874519",
    "end": "1879600"
  },
  {
    "text": "applications and different features with those example applications and we have a bunch of",
    "start": "1879600",
    "end": "1885440"
  },
  {
    "text": "tools on how to get started so just keep go to the Dynamo developer guide and get going so now I have Jason here who's",
    "start": "1885440",
    "end": "1893559"
  },
  {
    "text": "going to come up and describe how he has used Dynamo DB to implement an extremely",
    "start": "1893559",
    "end": "1898919"
  },
  {
    "text": "large scale application thanks",
    "start": "1898919",
    "end": "1905518"
  },
  {
    "text": "David hi everyone my name is Jason Lambert and I am a senior engineer at here a Nokia company we're a mapping",
    "start": "1908000",
    "end": "1915320"
  },
  {
    "text": "company and we make extremely uh a lot of use of Amazon web services we're one",
    "start": "1915320",
    "end": "1921519"
  },
  {
    "text": "of the world's largest location clouds so we're running uh all sorts of location based queries and services all",
    "start": "1921519",
    "end": "1928120"
  },
  {
    "text": "out of AWS increasingly more so as we migrate from our own data centers so we serve billions of requests",
    "start": "1928120",
    "end": "1935519"
  },
  {
    "text": "we're using this stuff at you know large production scale we're serving customers like Amazon themselves like if you use",
    "start": "1935519",
    "end": "1941559"
  },
  {
    "text": "the maps on the fir phone you're using out technology uh Microsoft and Yahoo Windows phone is uh you know we used to",
    "start": "1941559",
    "end": "1948159"
  },
  {
    "text": "be part of the the Nokia when they still made phones they have all lot of maps in there as well still Yahoo as well and so",
    "start": "1948159",
    "end": "1955080"
  },
  {
    "text": "uh we're making big use we' got like big data problems I guess you can say so a little high level overview of",
    "start": "1955080",
    "end": "1962840"
  },
  {
    "text": "the data uh based stuff that we do first so we have some use cases I'm just going to highlight a few of them before diving",
    "start": "1962840",
    "end": "1968960"
  },
  {
    "text": "deep into one in particular so we have a geolocation geolocation um geocoding",
    "start": "1968960",
    "end": "1975799"
  },
  {
    "text": "service and what that does is say you're using using our app and you want to click on your favorite restaurant and",
    "start": "1975799",
    "end": "1980919"
  },
  {
    "text": "get an exact uh let long and navigate to that area so what you need to do is Geo",
    "start": "1980919",
    "end": "1986519"
  },
  {
    "text": "geoc code a particular address we get millions and millions and millions of these a day and so a lot of them are",
    "start": "1986519",
    "end": "1993000"
  },
  {
    "text": "very similar and they need to happen very fast so that people can you know start routing right away and not have to worry about us calculating exactly where",
    "start": "1993000",
    "end": "1999240"
  },
  {
    "text": "that is so we use elasticache to sore a few hundred gigabytes of cash of uh let",
    "start": "1999240",
    "end": "2005519"
  },
  {
    "text": "long to geocoded addresses and that serves about 40 million transactions daily and we have no problems with that it's a really great",
    "start": "2005519",
    "end": "2011720"
  },
  {
    "text": "service we use RDS a lot for all of our internal processing metrics or anything",
    "start": "2011720",
    "end": "2017880"
  },
  {
    "text": "where we've got complex queries we're trying to calculate reports analytics things where performance for reads isn't",
    "start": "2017880",
    "end": "2024480"
  },
  {
    "text": "so important we don't want light we don't need lightning fast 10 millisecond reads it might be okay for a few seconds",
    "start": "2024480",
    "end": "2029760"
  },
  {
    "text": "to generate a report so we use RDS for anything in there inside of all our processing pipelines my group uh the",
    "start": "2029760",
    "end": "2036840"
  },
  {
    "text": "street level imagy group that I'll talk about in a little bit we have several of our own that are tens of gigabytes in size and that works well just for",
    "start": "2036840",
    "end": "2044279"
  },
  {
    "text": "us so the last one Dynamo DB what you've learned about my group um I'm going to",
    "start": "2044279",
    "end": "2049800"
  },
  {
    "text": "go into the use case for that we use Dynamo DB in a way that is probably most like the URL shortener application you",
    "start": "2049800",
    "end": "2056200"
  },
  {
    "text": "just saw but we're using it at real scale so my group we have uh Dynamo DB",
    "start": "2056200",
    "end": "2061398"
  },
  {
    "text": "Tales tables that have tens of billions of Records in them I don't know the exact number we have about 10 billion",
    "start": "2061399",
    "end": "2067200"
  },
  {
    "text": "records in one table and that table size is about 10 terabytes and we have a few of those running and we have some other",
    "start": "2067200",
    "end": "2072398"
  },
  {
    "text": "tables as well in that same set they're in the more hundreds of gigabytes or tens of gigabytes range but we use these",
    "start": "2072399",
    "end": "2077560"
  },
  {
    "text": "for high performance reads so all of our customer facing services that where every millisecond counts on that request",
    "start": "2077560",
    "end": "2084240"
  },
  {
    "text": "we're storing these key value pairs in Dynamo DB so all that Dynamo DB work",
    "start": "2084240",
    "end": "2089720"
  },
  {
    "text": "what is it for I mentioned I'm on the street live elimary team and so you might have seen our cars driving around",
    "start": "2089720",
    "end": "2095079"
  },
  {
    "text": "the the world they're driving all over the streets and they have a big arm on the top of them with a camera a RAR",
    "start": "2095079",
    "end": "2100280"
  },
  {
    "text": "sensor and a GPS locator so what they do is they're driving around capturing hundreds of gigabytes of",
    "start": "2100280",
    "end": "2106800"
  },
  {
    "text": "imagery and we uh we had we've had a service running for a few years now we've got a new version that's coming",
    "start": "2106800",
    "end": "2112839"
  },
  {
    "text": "out and basically tripling out coverage and doubling the resolution of Val",
    "start": "2112839",
    "end": "2118400"
  },
  {
    "text": "images so what does that look like well if you go to our website here.com or uh if you use apps that have the street",
    "start": "2119280",
    "end": "2125760"
  },
  {
    "text": "little imagery enabled you'll see that familiar panoramic imagery and you can move around and see what a human eye",
    "start": "2125760",
    "end": "2130960"
  },
  {
    "text": "view might be of the world and so for every panoramic image there's about 58",
    "start": "2130960",
    "end": "2136000"
  },
  {
    "text": "JPEG files that power that have various resolutions so you can get incremental loading and things come up nice and fast",
    "start": "2136000",
    "end": "2142560"
  },
  {
    "text": "but not just imagery but we also have threedimensional buildings that are underneath there and terrains that sort of um guide the road and also our",
    "start": "2142560",
    "end": "2148960"
  },
  {
    "text": "coverage information that you see in the bottom right so all these things come together to combine a service so if",
    "start": "2148960",
    "end": "2154119"
  },
  {
    "text": "we're making up to 518 web requests for one panorama those requests better be fast right if we have to wait five or",
    "start": "2154119",
    "end": "2160640"
  },
  {
    "text": "600 milliseconds for every single one of the requests it'll take an interal knee to download a panorama so of that",
    "start": "2160640",
    "end": "2166560"
  },
  {
    "text": "imagery I think we have two pedabytes of live imagery and we're adding about three more pedabytes so we're in the",
    "start": "2166560",
    "end": "2171599"
  },
  {
    "text": "five pyte range that's a lot for us but some companies might have more but we think that's pretty big bound",
    "start": "2171599",
    "end": "2178160"
  },
  {
    "text": "data so before AWS we were running out of content delivery Network we would get the data off the car um there' be a",
    "start": "2178160",
    "end": "2185000"
  },
  {
    "text": "bunch of Big Image files and then we would grind it up using a bunch of servers into a bunch of individual jpegs and store that on on a Content delivery",
    "start": "2185000",
    "end": "2191400"
  },
  {
    "text": "Network so we would have billions of files that be pushed across a whole bunch of folder systems for cach",
    "start": "2191400",
    "end": "2196599"
  },
  {
    "text": "performance so we had some problems there basically because we were dumping this into a Content uh a CDN file system",
    "start": "2196599",
    "end": "2203160"
  },
  {
    "text": "our API was dictated by that file structure so whenever we told people how to download images it would look like the top there and you would see those",
    "start": "2203160",
    "end": "2209280"
  },
  {
    "text": "underlined pieces and we were basically exposing our caching system through the folder structure four fours are very",
    "start": "2209280",
    "end": "2215119"
  },
  {
    "text": "slow because we um split the world up in chunks and you have to necessarily request the data to see if we have it it",
    "start": "2215119",
    "end": "2221119"
  },
  {
    "text": "has to find that file and see if it exists and that was a slow request and more of the world is not covered by",
    "start": "2221119",
    "end": "2227440"
  },
  {
    "text": "streets than is covered by streets so we do have a lot of four or4 so making that fast is an important piece control and",
    "start": "2227440",
    "end": "2233839"
  },
  {
    "text": "customizability was low because we were on this other system we weren't controlling our own origin servers and our costs for storage were",
    "start": "2233839",
    "end": "2240800"
  },
  {
    "text": "high so we wanted to move to AWS and fix those problems we wanted to stop grinding up the files worked out well",
    "start": "2240800",
    "end": "2247079"
  },
  {
    "text": "for us as a business to heavy everything in big files we wanted to lower our cost and make a future flexible API for new",
    "start": "2247079",
    "end": "2253760"
  },
  {
    "text": "devices so we settled on using Dynamo DB S3 and ec2 a combination of those three",
    "start": "2253760",
    "end": "2259240"
  },
  {
    "text": "to make this all happen so Dynamo DB was going to keep an index of all those files every file that came off the car",
    "start": "2259240",
    "end": "2265839"
  },
  {
    "text": "where it have you know hundreds of thousands of panoramas we would keep an index of that and see exactly inside",
    "start": "2265839",
    "end": "2271079"
  },
  {
    "text": "that file where each one of those ones are we would use S3 to store all those files and ec2 as An Origin service to",
    "start": "2271079",
    "end": "2276520"
  },
  {
    "text": "connect all three together and because they're all working in the same data center they all work very well and very fast",
    "start": "2276520",
    "end": "2283760"
  },
  {
    "text": "together so that was a great plan but we were still on the content delivery service we had to migrate so it took us",
    "start": "2283760",
    "end": "2289839"
  },
  {
    "text": "about it took us a little while to write the software uh maybe a few months and then actually two months of constant",
    "start": "2289839",
    "end": "2295440"
  },
  {
    "text": "running of about 400 machines or so 400 ec2 two extra larges to move index and",
    "start": "2295440",
    "end": "2301920"
  },
  {
    "text": "validate two pedabytes of data but Dynamo DB stayed up and running the entire time and just filled up and",
    "start": "2301920",
    "end": "2307040"
  },
  {
    "text": "filled up filled up as we got into so now we've migrated using that",
    "start": "2307040",
    "end": "2314440"
  },
  {
    "text": "ec2 cluster we've had all those machines running Dynamo BB is now chalk full well we have three more pedabytes that we",
    "start": "2314440",
    "end": "2320319"
  },
  {
    "text": "want to add so what does that process look like now so the car dumps off a big image file in S3 and it may be used from",
    "start": "2320319",
    "end": "2326800"
  },
  {
    "text": "internal validation or something at that point but once we're ready to start publishing that we use an ec2 cluster",
    "start": "2326800",
    "end": "2333920"
  },
  {
    "text": "hooked up to an RDS instance so we all the internal processing metrics reporting of how that processing is",
    "start": "2333920",
    "end": "2339520"
  },
  {
    "text": "going if we want to build reports or heat maps about where all of our data is we can put all that in RDS because no",
    "start": "2339520",
    "end": "2345599"
  },
  {
    "text": "customer ever touches this it's okay if it's a little slow at times RDS does handle our data size but it's not nearly",
    "start": "2345599",
    "end": "2351680"
  },
  {
    "text": "as performant as Dynamo DB so those ec2 instances once they finished doing all their calculations and their heat Maps",
    "start": "2351680",
    "end": "2356880"
  },
  {
    "text": "they put the final result into Dynamo DB the cache we we we essentially treating this as an index or Cache of the entire",
    "start": "2356880",
    "end": "2363839"
  },
  {
    "text": "thing so Dynamo DB is now super full of all this information about what's an S3 so we put an ec2 a",
    "start": "2363839",
    "end": "2371280"
  },
  {
    "text": "certain number of autoscaled ec2 servers across multiple networks the the way to make a good web service on Amazon web",
    "start": "2371280",
    "end": "2377000"
  },
  {
    "text": "services and so we've got that 10 billion records taking up 10 terabytes",
    "start": "2377000",
    "end": "2382440"
  },
  {
    "text": "in Dynamo DB referencing those five pedabytes it's a nice it's a small system and it works really",
    "start": "2382440",
    "end": "2388200"
  },
  {
    "text": "well it's not small in terms of size it's small in terms of complexity it's not very complex so what does our table",
    "start": "2388200",
    "end": "2393920"
  },
  {
    "text": "look like that big 10 terabyte table it's in in ating in size but not in schema so the Panorama table has one",
    "start": "2393920",
    "end": "2400760"
  },
  {
    "text": "hash key and that is what the original file was so before that was hidden behind all those folders now we just",
    "start": "2400760",
    "end": "2406760"
  },
  {
    "text": "have the file as our key we have a length and offset that is where about in",
    "start": "2406760",
    "end": "2411800"
  },
  {
    "text": "the S3 file to look and we have for instance I have a sample one here we have an is3 file big file 8098 and that",
    "start": "2411800",
    "end": "2419520"
  },
  {
    "text": "might have hundreds of thousands of images in it but this particular image is located exactly that bite offset so",
    "start": "2419520",
    "end": "2426800"
  },
  {
    "text": "all our origin server has to do is go to Dynamo DB make a get request first of all we get an instant 404 if that record",
    "start": "2426800",
    "end": "2434640"
  },
  {
    "text": "isn't there we not going to serve it out so we have like a 10 millisecond 404 if it is there it's going to go to",
    "start": "2434640",
    "end": "2440160"
  },
  {
    "text": "S3 and use the S3 API to read that file chunk and serve out that image right",
    "start": "2440160",
    "end": "2446680"
  },
  {
    "text": "away so that's our grand thing uh it's not terribly amazing but uh we were",
    "start": "2446680",
    "end": "2452680"
  },
  {
    "text": "pretty proud of it working so we've learned a few lessons along the way so we want it to be really fault tolerant",
    "start": "2452680",
    "end": "2458800"
  },
  {
    "text": "Dynamo DB is designed for durability but we want it to be extra durable so we keep a hot Dynamo DB standby we have a",
    "start": "2458800",
    "end": "2466240"
  },
  {
    "text": "second table that we write to on a delayed time frame we maybe update that once a month we perform periodic backups",
    "start": "2466240",
    "end": "2473400"
  },
  {
    "text": "of the main table off to a set of side tables it's that get out of jail free card if if we ever see a problem in the",
    "start": "2473400",
    "end": "2480720"
  },
  {
    "text": "Dynamo DB table we can switch off to another one right away the fun thing is in the year of operation in AWS we",
    "start": "2480720",
    "end": "2487319"
  },
  {
    "text": "haven't seen a single problem due to Dynamo DB uh the only downtime we ever had was uh our origin servers were",
    "start": "2487319",
    "end": "2494800"
  },
  {
    "text": "writing logs of all the requests and the S3 appender stopped working and they ran out of hard drive space that was the",
    "start": "2494800",
    "end": "2500760"
  },
  {
    "text": "only thing so now our API is flexible we're",
    "start": "2500760",
    "end": "2506960"
  },
  {
    "text": "able to offer completely backwards compatible API we're able to do all that URL mapping essentially of the old API",
    "start": "2506960",
    "end": "2512240"
  },
  {
    "text": "to the new one and we're able to start supporting some new ones from internal ones for uh multiple new",
    "start": "2512240",
    "end": "2518480"
  },
  {
    "text": "devices and we're really happy with that we've learned some lessons in",
    "start": "2518480",
    "end": "2523800"
  },
  {
    "text": "scaling so Dynamo DB uh the really good things about it are it continues to",
    "start": "2523800",
    "end": "2528880"
  },
  {
    "text": "offer Lightning Fast performance as we increase we're dumping all these records in there up to tens of billions and it",
    "start": "2528880",
    "end": "2534960"
  },
  {
    "text": "still reads like there were only 10 in there we haven't had seen any difference in",
    "start": "2534960",
    "end": "2540400"
  },
  {
    "text": "performance so but it is the right tool for the right job right so we're not putting our relational database schemes",
    "start": "2540400",
    "end": "2545680"
  },
  {
    "text": "in there and can insert into our production table we can have our origin servers reading from these 10 billion",
    "start": "2545680",
    "end": "2552359"
  },
  {
    "text": "record tables and we can have our pipeline pushing new data into these 10 billion size tables and the reads and",
    "start": "2552359",
    "end": "2558280"
  },
  {
    "text": "writes are completely separated and don't affect each other so we don't have to have a complete staging area for this",
    "start": "2558280",
    "end": "2563599"
  },
  {
    "text": "10 billion size table we can just as long as you always update and you don't overwrite you're",
    "start": "2563599",
    "end": "2570079"
  },
  {
    "text": "fine so we have pedabytes but we have to be careful about the kilobytes too so",
    "start": "2570079",
    "end": "2575440"
  },
  {
    "text": "every bite betters coming up with a table scheme when we first started and started putting data",
    "start": "2575440",
    "end": "2580599"
  },
  {
    "text": "in everything seems fine but like I said we have 518 images that make up every Panorama so there is a even S3 colon SL",
    "start": "2580599",
    "end": "2590040"
  },
  {
    "text": "slash being in every single record adds up to a lot of extra bytes over time",
    "start": "2590040",
    "end": "2595760"
  },
  {
    "text": "when you have 10 billion rows so one of the things that we're going to start doing is we're going to evolve our database schema and start creating new",
    "start": "2595760",
    "end": "2603040"
  },
  {
    "text": "uh versions that actually remov all that redundant information because we want a triple out coverage but we figured out",
    "start": "2603040",
    "end": "2608680"
  },
  {
    "text": "some ways across those 518 records compressing things and putting things together to actually reduce our",
    "start": "2608680",
    "end": "2613920"
  },
  {
    "text": "footprint by about 80% so I mean you can never give a perfect design the first time but really",
    "start": "2613920",
    "end": "2619680"
  },
  {
    "text": "give a think to how many btes are in this string versus this long versus this in when you're making your table but",
    "start": "2619680",
    "end": "2625760"
  },
  {
    "text": "we're glad we can we're able to do this refactoring because we gained so much request time in our 98 percentile for",
    "start": "2625760",
    "end": "2631880"
  },
  {
    "text": "our slas because those four or fours are so much faster so in summary aw does work for",
    "start": "2631880",
    "end": "2638160"
  },
  {
    "text": "here um we're S3 continues to be an efficient storage for all of our files Dynamo DB is a lightning fast production",
    "start": "2638160",
    "end": "2645240"
  },
  {
    "text": "ready production test that we've been running for over a year I think uh for a key value index of our file systems and",
    "start": "2645240",
    "end": "2651160"
  },
  {
    "text": "all of our imagery RDS is really good for spinning up and creating all our reports but we don't hook it up to our",
    "start": "2651160",
    "end": "2657280"
  },
  {
    "text": "um external facing services for the latency ec2 is our Workhorse that does",
    "start": "2657280",
    "end": "2662440"
  },
  {
    "text": "everything in between we use it for our migration we use it for our origin servers and the three of them play",
    "start": "2662440",
    "end": "2667720"
  },
  {
    "text": "together really well so that's all I have for us at here",
    "start": "2667720",
    "end": "2673319"
  },
  {
    "text": "thank you for your time and thank you for hosting",
    "start": "2673319",
    "end": "2677838"
  }
]