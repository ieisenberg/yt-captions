[
  {
    "start": "0",
    "end": "101000"
  },
  {
    "text": "hey guys good afternoon welcome to serverless architectural patterns and best practices my name is Drew Dennis",
    "start": "680",
    "end": "6879"
  },
  {
    "text": "I'm a Solutions architect with AWS based in Texas any Texans in the audience all",
    "start": "6879",
    "end": "13320"
  },
  {
    "text": "right uh with me today I have my colleague M TR rangano and also from BMC",
    "start": "13320",
    "end": "19400"
  },
  {
    "text": "a joy Kumar with the R&D group at BMC",
    "start": "19400",
    "end": "25519"
  },
  {
    "text": "okay our agenda today we're going to focus on four common",
    "start": "25519",
    "end": "30560"
  },
  {
    "text": "well adopted in use today by existing AWS customer patterns uh I'm going to",
    "start": "30560",
    "end": "37440"
  },
  {
    "text": "take you through the first couple of patterns which are a three- tier web architecture and batch processing and",
    "start": "37440",
    "end": "43719"
  },
  {
    "text": "then my tray is going to come up and take you guys through stream processing and operations",
    "start": "43719",
    "end": "48800"
  },
  {
    "text": "automation our hopes are that you can take these patterns back with you to",
    "start": "48800",
    "end": "54199"
  },
  {
    "text": "help you identify potential use cases and workloads in your environments where they might be applicable uh next a joy will come up",
    "start": "54199",
    "end": "61280"
  },
  {
    "text": "and talk to you about BMC specific use case of one of these patterns I'm sure you guys have all heard of BMC right and",
    "start": "61280",
    "end": "67840"
  },
  {
    "text": "are familiar with some of their products um and and it's I think it's really a great use case and a great example of",
    "start": "67840",
    "end": "73759"
  },
  {
    "text": "how a customer a large customer like BMC can actually modernize existing products",
    "start": "73759",
    "end": "78880"
  },
  {
    "text": "and applications for their customers um as well as add new features around uh",
    "start": "78880",
    "end": "84159"
  },
  {
    "text": "security operations and compliance uh auditing before we get into those those",
    "start": "84159",
    "end": "90119"
  },
  {
    "text": "items though I want to just do some brief level sets around serverless applications kind of talk a little bit",
    "start": "90119",
    "end": "95960"
  },
  {
    "text": "about what they are um what makes them different from traditional",
    "start": "95960",
    "end": "101280"
  },
  {
    "start": "101000",
    "end": "101000"
  },
  {
    "text": "applications so as the name implies and as I'm sure you're all aware serverless",
    "start": "101280",
    "end": "106360"
  },
  {
    "text": "applications are comprised of services where servers operating systems",
    "start": "106360",
    "end": "112000"
  },
  {
    "text": "containers are completely removed and abstracted from you uh unlike deploying",
    "start": "112000",
    "end": "117479"
  },
  {
    "text": "applications on ec2 where you have to uh you know you don't have to manage the operating system with a serverless",
    "start": "117479",
    "end": "123960"
  },
  {
    "text": "service uh you don't have to make sure it's healthy it's performant all of those types of concerns there's also a",
    "start": "123960",
    "end": "130360"
  },
  {
    "text": "class of services at AWS that we call Managed Services here we being the three of us for this presentation um and these",
    "start": "130360",
    "end": "137640"
  },
  {
    "text": "are services like elastic search and elastic cache RDS or red shift where",
    "start": "137640",
    "end": "143120"
  },
  {
    "text": "servers are still very much a part of the service and the model when you deploy Services uh within those products",
    "start": "143120",
    "end": "151400"
  },
  {
    "text": "you actually are concerned with the number of servers that you deploy potentially the role of those servers",
    "start": "151400",
    "end": "156760"
  },
  {
    "text": "where they're located so servers are still very much there and you need to be concerned with them from a scaling",
    "start": "156760",
    "end": "161840"
  },
  {
    "text": "perspective as well typically with serverless Services you don't have to worry about any of those types of",
    "start": "161840",
    "end": "167680"
  },
  {
    "text": "concerns secondly with serverless Services they're automatically or or",
    "start": "167680",
    "end": "173720"
  },
  {
    "text": "inherently sit at a regional level within AWS infrastructure and what that",
    "start": "173720",
    "end": "179080"
  },
  {
    "text": "means is they automatically aware of all availability zones in a particular region where they're deployed so you",
    "start": "179080",
    "end": "184560"
  },
  {
    "text": "never have to worry about high availability and fault tolerance those types of concerns are taken for you and",
    "start": "184560",
    "end": "189799"
  },
  {
    "text": "that's one of the big reasons why serverless applications are becoming so popular now and then probably the third",
    "start": "189799",
    "end": "196360"
  },
  {
    "text": "important distinction I want to point out uh is the unit of scale with serverless applications is different",
    "start": "196360",
    "end": "203840"
  },
  {
    "text": "it's not servers it's actually functions and particularly Lambda functions so the",
    "start": "203840",
    "end": "209239"
  },
  {
    "text": "forat patterns that we're going to be presenting to you today are actually all very much you know Lambda functions are",
    "start": "209239",
    "end": "215439"
  },
  {
    "text": "very much at the heart of those patterns right and they really are the unit of scale so and before we proceed and go",
    "start": "215439",
    "end": "221439"
  },
  {
    "text": "into the four patterns I want to briefly talk about Lambda a little bit because all of the patterns will leverage",
    "start": "221439",
    "end": "227280"
  },
  {
    "start": "225000",
    "end": "225000"
  },
  {
    "text": "them a Lambda function is a unit of work that's comprised of your code that",
    "start": "227280",
    "end": "233439"
  },
  {
    "text": "responds to individual requests and events now as those events and requests",
    "start": "233439",
    "end": "238879"
  },
  {
    "text": "grow the Lambda functions will grow as well and as they shrink the Lambda functions will shrink so you never run",
    "start": "238879",
    "end": "244879"
  },
  {
    "text": "the risk of over-provisioning or underprovision lamba functions for your application that's a really nice",
    "start": "244879",
    "end": "251599"
  },
  {
    "text": "thing economically that means you never pay for idle that's also very nice and",
    "start": "251599",
    "end": "256759"
  },
  {
    "text": "what I really like about Lambda functions is they really make it easy for you to not worry as much about some",
    "start": "256759",
    "end": "262639"
  },
  {
    "text": "of the mundane and boring aspects of an application like logging and operational monitoring they're facilities built into",
    "start": "262639",
    "end": "269800"
  },
  {
    "text": "Lambda to handle a lot of those things for you and it's very extensible to add additional functionality in those areas",
    "start": "269800",
    "end": "276639"
  },
  {
    "text": "and I think Lambda functions always also take care of some of the really really difficult things about applications",
    "start": "276639",
    "end": "282520"
  },
  {
    "text": "being horizontal horizontal scale in your applications building that out yourself is extremely difficult to do",
    "start": "282520",
    "end": "289759"
  },
  {
    "text": "and it's something that Lambda provides essentially out of the box you could have a lamb to function that's as simple",
    "start": "289759",
    "end": "294960"
  },
  {
    "text": "as a single line of code uh and as a single request comes in that line of code will execute but if a thousand",
    "start": "294960",
    "end": "301800"
  },
  {
    "text": "simultaneous requests come in for that it will scale horizontally to answer and handle all thousand of those requests so",
    "start": "301800",
    "end": "309280"
  },
  {
    "text": "it really allows you to kind of skip the boring parts and skip the hard Parts if you know what I",
    "start": "309280",
    "end": "315039"
  },
  {
    "start": "315000",
    "end": "315000"
  },
  {
    "text": "mean Lambda is also stateless and there's a lot of conjecture about this I think out in the industry right now and",
    "start": "315039",
    "end": "321520"
  },
  {
    "text": "really what that means at a very high level is you should always store State outside of Lambda any state that Lambda",
    "start": "321520",
    "end": "329240"
  },
  {
    "text": "creates or needs to use in order to run use one of our persistent data stores",
    "start": "329240",
    "end": "334720"
  },
  {
    "text": "services like Dynamo DB or S3 as an example to interact with that state information there's no Affinity with the",
    "start": "334720",
    "end": "341560"
  },
  {
    "text": "underlying hardware and Lambda functions or at least you shouldn't assume that and if you have a Lambda function that",
    "start": "341560",
    "end": "347400"
  },
  {
    "text": "interacts with the local file system on the host where it's deployed or spawns a child process or maybe even execute some",
    "start": "347400",
    "end": "355280"
  },
  {
    "text": "of your own custom binaries that you've packaged with the Lambda function which are all possible with Lambda you should",
    "start": "355280",
    "end": "361840"
  },
  {
    "text": "never assume that subsequent invocations of that Lambda function are going to be able to use those things okay so that's",
    "start": "361840",
    "end": "369080"
  },
  {
    "text": "what we mean by Lambda is stateless Lambda functions are deployed inside of a container and when that container is",
    "start": "369080",
    "end": "376919"
  },
  {
    "text": "deployed you know the function will execute and then that container will remain for a period of time now we don't",
    "start": "376919",
    "end": "383720"
  },
  {
    "text": "publicize or or provide information about how long that Lambda function or that container will will be available so",
    "start": "383720",
    "end": "390800"
  },
  {
    "text": "that's why you can't plan on state reusing any of these artifacts that we",
    "start": "390800",
    "end": "396319"
  },
  {
    "text": "mentioned okay when these Lambda functions are deployed inside of containers there's an",
    "start": "400039",
    "end": "407039"
  },
  {
    "text": "initialization phase that happens and that's going to be things like downloading the code and all the code",
    "start": "407039",
    "end": "412520"
  },
  {
    "text": "dependencies from S3 attaching Enis if you want your Lambda function to run inside of a VPC and running the",
    "start": "412520",
    "end": "419800"
  },
  {
    "text": "initialization code we call this a a cold start process now when you define a",
    "start": "419800",
    "end": "425759"
  },
  {
    "text": "Lambda function one of the things you have to Define is the Handler or a function in your code that each",
    "start": "425759",
    "end": "432240"
  },
  {
    "text": "invocation of that Lambda function will execute and we call that kind of a Lambda function that that's warm we'll",
    "start": "432240",
    "end": "438599"
  },
  {
    "text": "just execute that particular function so in this example you see here and this is just example code don't try to reproduce",
    "start": "438599",
    "end": "444879"
  },
  {
    "text": "this I've removed some things so it'll it'll fit on the slide but in this example we're importing in some python",
    "start": "444879",
    "end": "450280"
  },
  {
    "text": "modules at the top of the code and then we actually establish a database connection with a relational database",
    "start": "450280",
    "end": "455879"
  },
  {
    "text": "and we do those things outside of the Handler so those things will execute during a cold start or as that container",
    "start": "455879",
    "end": "462599"
  },
  {
    "text": "is initially deployed onto the host then for every invocation we'll only execute",
    "start": "462599",
    "end": "468280"
  },
  {
    "text": "the code inside that Handler that you see at the bottom of this okay so there's concern sometimes about cold",
    "start": "468280",
    "end": "474879"
  },
  {
    "text": "starts and whether or not they'll affect your application and the answer to that whether not they will affect your",
    "start": "474879",
    "end": "480440"
  },
  {
    "text": "application the answer to that is really you know maybe I mean it depends on your application if your application is",
    "start": "480440",
    "end": "485479"
  },
  {
    "text": "fairly consistent with the number of Lambda functions that it executes and the frequency is reasonable at which it",
    "start": "485479",
    "end": "491759"
  },
  {
    "text": "executes those then you know cold starts and and you know may not be too much of",
    "start": "491759",
    "end": "496879"
  },
  {
    "text": "a concern for you because that's going to be a very small percentage of your overall invocations but if you have a",
    "start": "496879",
    "end": "502560"
  },
  {
    "text": "lot of disparity and you know you you might have 100 Lambda functions and then a thousand right after that and then a",
    "start": "502560",
    "end": "508560"
  },
  {
    "text": "period of a lot of in activity then cold starts can be an issue right so you want to make sure that you you're aware of",
    "start": "508560",
    "end": "515080"
  },
  {
    "text": "you know how the cold starts function if you want to improve your cold start times uh you know minimize the code",
    "start": "515080",
    "end": "521479"
  },
  {
    "text": "outside of the Handler obviously is one approach make your package as small as possible remove any unnecessary",
    "start": "521479",
    "end": "527000"
  },
  {
    "text": "dependencies so that that download from S3 will happen as quickly as possible and VP for VPC support with Enis only",
    "start": "527000",
    "end": "535080"
  },
  {
    "text": "use that if you need that VPC support that's optional and we've certainly seen customers that attach those to Lambda",
    "start": "535080",
    "end": "540959"
  },
  {
    "text": "functions without needing it to be attached so that will just add to the latency of your cold start times and",
    "start": "540959",
    "end": "546519"
  },
  {
    "text": "customers that really need to manage these cold start times one strategy is to keep them warm with cloudwatch events",
    "start": "546519",
    "end": "552079"
  },
  {
    "text": "I'm sure many of you are familiar with cloudwatch events but you can schedule functions and invocations of those functions with that and that's a really",
    "start": "552079",
    "end": "558240"
  },
  {
    "text": "good way and approach to kind of keep them warm if cold starts are a concern for",
    "start": "558240",
    "end": "563839"
  },
  {
    "text": "you from a local file system perspective Lambda functions have access to SL TMP",
    "start": "563839",
    "end": "569959"
  },
  {
    "text": "on the host it's 512 Megs of scratch space that you can pretty much use to do whatever you want to do uh I was working",
    "start": "569959",
    "end": "576640"
  },
  {
    "text": "with a customer a couple months ago and they wanted to take documents PDF files office documents whatever convert that",
    "start": "576640",
    "end": "583079"
  },
  {
    "text": "into text so we downloaded that to /tmp before we send it off to that service to",
    "start": "583079",
    "end": "588839"
  },
  {
    "text": "convert that information into text and that was really nice because if there's an error we don't have to redownload that from S3 we can retry for the",
    "start": "588839",
    "end": "595959"
  },
  {
    "text": "duration of that Lambda function this particular example shows uh node.js example of using an FFM Peg",
    "start": "595959",
    "end": "602760"
  },
  {
    "text": "and taking a video file and extracting a frame to a JPEG is storing that locally",
    "start": "602760",
    "end": "607800"
  },
  {
    "text": "before it uploads it to a service another best practice with",
    "start": "607800",
    "end": "613880"
  },
  {
    "text": "Lambda is to use custom metrics with cloudwatch often overlooked it's really very simple to create cloudwatch custom",
    "start": "613880",
    "end": "620959"
  },
  {
    "text": "metrics just one API call put metric data and you can absolutely store any kind of information that's important to",
    "start": "620959",
    "end": "627120"
  },
  {
    "text": "your application in a cloudwatch custom metric it could be business related it could be",
    "start": "627120",
    "end": "632399"
  },
  {
    "text": "related related to the operations of that function it's completely up to you but this is a very useful thing to do",
    "start": "632399",
    "end": "638800"
  },
  {
    "text": "keep in mind the scale of your application May dictate how you send those custom metrics into cloudwatch um",
    "start": "638800",
    "end": "646880"
  },
  {
    "text": "you here's I've mentioned on this slide a few account limits that are defaults for putting metric data into cloudwatch",
    "start": "646880",
    "end": "653880"
  },
  {
    "text": "so if your scale extends these these can be increased by making a support call into into tech support",
    "start": "653880",
    "end": "660320"
  },
  {
    "text": "another approach for very very large scale ingestion of cloudwatch metrics is to send that information to Kinesis you",
    "start": "660320",
    "end": "667000"
  },
  {
    "text": "know an aggregate it before you deliver that into cloudwatch so that's something we've seen a lot of customers",
    "start": "667000",
    "end": "673480"
  },
  {
    "text": "adopt okay now I'm going to go through the the first of our pattern which is a three- tiered web",
    "start": "673480",
    "end": "681079"
  },
  {
    "start": "680000",
    "end": "680000"
  },
  {
    "text": "application here's an example of the three- tiered web application uh essentially static content is up at the",
    "start": "681120",
    "end": "687200"
  },
  {
    "text": "top you can see in in red Amazon S3 and cloudfront for Content delivery of those",
    "start": "687200",
    "end": "693480"
  },
  {
    "text": "static artifacts that exist in in S3 and then API calls that the client makes go",
    "start": "693480",
    "end": "698800"
  },
  {
    "text": "through API Gateway which in turn can do a lot of things interact with various AWS Services commonly they'll interact",
    "start": "698800",
    "end": "706079"
  },
  {
    "text": "with Lambda functions that do a variety of different things uh in this case and in this example leveraging Dynamo DB is",
    "start": "706079",
    "end": "712399"
  },
  {
    "text": "a persistent data store now there are many variations to this particular pattern you know we're talking about a",
    "start": "712399",
    "end": "718000"
  },
  {
    "text": "web application here and that can take up a lot of different forms it could be a mobile backend as an example and and",
    "start": "718000",
    "end": "723880"
  },
  {
    "text": "you could add SNS to this architecture or pattern to send push notifications to mobile devices uh you know it could be a",
    "start": "723880",
    "end": "731720"
  },
  {
    "text": "microservices application and approach where you have you know hundreds even API Gateway methods def defined and",
    "start": "731720",
    "end": "739079"
  },
  {
    "text": "backed by Lambda functions so you can apply this same pattern to to that use case as",
    "start": "739079",
    "end": "744480"
  },
  {
    "text": "well now when you think about deploying a serverless web application within your",
    "start": "744480",
    "end": "750959"
  },
  {
    "text": "organizations somebody might come up to you and say well what about security right how how does it handle security or",
    "start": "750959",
    "end": "757519"
  },
  {
    "text": "how do you handle operations of that um or hand how do you handle deployments and and versions of deployments to to",
    "start": "757519",
    "end": "765199"
  },
  {
    "text": "that environment the those things are a little bit different right with a serverless application than what you might be traditionally used to for",
    "start": "765199",
    "end": "771639"
  },
  {
    "text": "example a three- tiered web application a traditional three- tiered web application we usually have subnets with",
    "start": "771639",
    "end": "777079"
  },
  {
    "text": "firewalls between the subnets right to restrict access to the different layers so things are a little bit different",
    "start": "777079",
    "end": "782560"
  },
  {
    "text": "with serverless applications so let's talk a little bit about that so here's that same",
    "start": "782560",
    "end": "789839"
  },
  {
    "start": "785000",
    "end": "785000"
  },
  {
    "text": "pattern and from a security perspective with S3 uh you have bucket policies and ACLS as I'm sure you're all aware to",
    "start": "789839",
    "end": "797160"
  },
  {
    "text": "control access to those artifacts that exist on S3 you could limit access for example within a VPC if it's an internal",
    "start": "797160",
    "end": "804240"
  },
  {
    "text": "application cloudfront has a feature called origin access identity which ensures that only cloudfront can get",
    "start": "804240",
    "end": "810920"
  },
  {
    "text": "access to that those S3 resources there's also GE georestriction",
    "start": "810920",
    "end": "816000"
  },
  {
    "text": "capabilities with cloudfront and the ability for cloudfront to deliver private content to your users through",
    "start": "816000",
    "end": "822240"
  },
  {
    "text": "signed URLs or signed cookies and cloudfront has inherent dods protection built",
    "start": "822240",
    "end": "828079"
  },
  {
    "text": "in from an API Gateway perspective there's throttling which can certainly help and if you're using this for",
    "start": "828079",
    "end": "834880"
  },
  {
    "text": "actually delivering an API then there's great features like quotas and usage plans that you can leverage as well but",
    "start": "834880",
    "end": "841279"
  },
  {
    "text": "API Gateway also has some really nice authorization features uh if you want to require some sort of authorization in",
    "start": "841279",
    "end": "847920"
  },
  {
    "text": "order to to get access to the methods delivered by API Gateway then there's three ways to do that one of them is",
    "start": "847920",
    "end": "855279"
  },
  {
    "text": "with IIM using IIM credentials so if you're coming in as a Federated user as an example you can leverage those IIM",
    "start": "855279",
    "end": "861519"
  },
  {
    "text": "credentials to get access to those methods another one is Cognito user pools and Cognito can also be used with",
    "start": "861519",
    "end": "868240"
  },
  {
    "text": "web identity uh Federation providers to provide uh IM IM credentials so you can",
    "start": "868240",
    "end": "873360"
  },
  {
    "text": "get access to your methods and then lastly you can use custom authorizers with API gateways so if you want to you",
    "start": "873360",
    "end": "879959"
  },
  {
    "text": "know include something into an authorization header of a request and then validate that somehow maybe through",
    "start": "879959",
    "end": "885880"
  },
  {
    "text": "a Json web token as an example API Gateway can provide security that way as",
    "start": "885880",
    "end": "891040"
  },
  {
    "text": "well when you put a Lambda function behind uh an API Gateway oh uh next",
    "start": "891040",
    "end": "896079"
  },
  {
    "text": "thing custom domain names can completely be used here both levels uh AWS certificate manager supports cloudfront",
    "start": "896079",
    "end": "902519"
  },
  {
    "text": "and you can import your custom TLS certificates into Amazon API Gateway so that you can have custom domain names",
    "start": "902519",
    "end": "908839"
  },
  {
    "text": "across the the board here for both uh for both types of data that you'll be interacting with and then API Gateway",
    "start": "908839",
    "end": "916199"
  },
  {
    "text": "has a trust policy so that only API Gateway has Authority or the Privileges to invoke Lambda functions the Lambda",
    "start": "916199",
    "end": "923160"
  },
  {
    "text": "function that you designate and then Lambda functions as you probably know also run with execute roles right so you",
    "start": "923160",
    "end": "930120"
  },
  {
    "text": "can ensure that these Lambda functions that are being called only have access to the services that they need so",
    "start": "930120",
    "end": "936240"
  },
  {
    "text": "Securities handled a little bit differently if you need additional Security application layer security at",
    "start": "936240",
    "end": "942480"
  },
  {
    "text": "an API Gateway layer one strategy that that is a common pattern is to create an",
    "start": "942480",
    "end": "948360"
  },
  {
    "text": "additional cloudfront distribution put that in front of API Gateway and attach AWS waft to that for cross- site",
    "start": "948360",
    "end": "955959"
  },
  {
    "text": "scripting attacks or SQL injection attacks and and attacks of that sort to do that obviously cloudfront needs to be",
    "start": "955959",
    "end": "962639"
  },
  {
    "text": "configured to use https to interact with API Gateway on the back end obviously and depending on your handling your",
    "start": "962639",
    "end": "968680"
  },
  {
    "text": "custom domain names you want to make sure that the host header that's a part of that request is not going to be",
    "start": "968680",
    "end": "973759"
  },
  {
    "text": "delivered uh in the back into API Gateway for obvious reasons because of the API Gateway name will most likely be",
    "start": "973759",
    "end": "981120"
  },
  {
    "text": "the the host name will not be the host name that's being",
    "start": "981120",
    "end": "986199"
  },
  {
    "start": "986000",
    "end": "986000"
  },
  {
    "text": "requested from a monitoring perspective let's let's talk about logging and monitoring a little bit with this",
    "start": "986360",
    "end": "991600"
  },
  {
    "text": "pattern cloudfront and S3 they both provide access logs in S3 so you can get",
    "start": "991600",
    "end": "997399"
  },
  {
    "text": "full logs of all the accesses and all the requests that come into the artifacts up in that static",
    "start": "997399",
    "end": "1003600"
  },
  {
    "text": "layer API Gateway and and Lambda they actually log to cloudwatch logs so you",
    "start": "1003600",
    "end": "1009880"
  },
  {
    "text": "kind of get two separate locations for log files in this pattern that that's easily remedied uh you can send both of",
    "start": "1009880",
    "end": "1017000"
  },
  {
    "text": "these locations to elastic search which I think is a great destination for log files you'll get IM you know Amazon's",
    "start": "1017000",
    "end": "1023720"
  },
  {
    "text": "elastic search service will give you a cabana dashboard and IM mediate indexing of those log files as you see fit and",
    "start": "1023720",
    "end": "1030079"
  },
  {
    "text": "certainly there are a lot of good thirdparty products out there as well that can consolidate those log files Dynamo DB has a feature called",
    "start": "1030079",
    "end": "1038000"
  },
  {
    "text": "Dynam DB streams which you can use to provide triggers for your application that's really useful you know depending",
    "start": "1038000",
    "end": "1044400"
  },
  {
    "text": "on your application and the data that it writes to Dynamo DB you might want to be actionable on that and send out notifications or or the like so Dynamo",
    "start": "1044400",
    "end": "1052600"
  },
  {
    "text": "DB streams can be a really important thing to leverage here certainly cloudwatch custom metrics as we",
    "start": "1052600",
    "end": "1058880"
  },
  {
    "text": "discussed with Lambda and then cloud trail for auditing and I don't know if you guys C it but a couple of weeks ago",
    "start": "1058880",
    "end": "1064559"
  },
  {
    "text": "we actually announced that S3 now provides data access auditing events in the cloud trail so if you want to see",
    "start": "1064559",
    "end": "1071320"
  },
  {
    "text": "every time a file in S3 is being accessed through this pattern or even being written to those uh events can",
    "start": "1071320",
    "end": "1078039"
  },
  {
    "text": "show up in cloud Trail now and you can be actionable on those as well how about from a deployment",
    "start": "1078039",
    "end": "1084679"
  },
  {
    "start": "1083000",
    "end": "1083000"
  },
  {
    "text": "perspective well this landscape has grown a lot over the last year I'm sure you guys are familiar with Frameworks",
    "start": "1084679",
    "end": "1090559"
  },
  {
    "text": "like serverless and Apex and Sparta there are a lot of really great third-party Frameworks that are out",
    "start": "1090559",
    "end": "1096880"
  },
  {
    "text": "there and available well a couple weeks ago we actually announced our own it was code named flourish and now the official",
    "start": "1096880",
    "end": "1103840"
  },
  {
    "text": "name is the AWS serverless application model and what it allows you to do is",
    "start": "1103840",
    "end": "1108960"
  },
  {
    "text": "Define a more complex serverless application comprised of multiple Lambda",
    "start": "1108960",
    "end": "1114200"
  },
  {
    "text": "functions multiple API methods and uh Dynamo DB and I IM credentials in a much",
    "start": "1114200",
    "end": "1121400"
  },
  {
    "text": "more efficient syntax it's yaml or Json based so the way this works is locally",
    "start": "1121400",
    "end": "1127280"
  },
  {
    "text": "on a development machine I can kind of Define that template which is represented in yellow here on the far left of this slide and I can combine",
    "start": "1127280",
    "end": "1134600"
  },
  {
    "text": "that or package that with my code for my Lambda functions maybe a Swip file for my API definitions as well as any",
    "start": "1134600",
    "end": "1141840"
  },
  {
    "text": "dependencies and then I can package that and deploy it into S3 through this service when the service does that it",
    "start": "1141840",
    "end": "1149080"
  },
  {
    "text": "produces a new version of your template with specific references to an S3 object",
    "start": "1149080",
    "end": "1155840"
  },
  {
    "text": "for that specific version of the deployment and that's really important so you kind of get this marriage between",
    "start": "1155840",
    "end": "1161600"
  },
  {
    "text": "a new version of that template and an S3 object that represents all your artifacts additional deployments will",
    "start": "1161600",
    "end": "1167480"
  },
  {
    "text": "have its own S3 object so it's very easy to revert back and forth to previous versions and then that serverless",
    "start": "1167480",
    "end": "1174440"
  },
  {
    "text": "template can be submitted into cloud formation one of the really nice things about this product and this framework is",
    "start": "1174440",
    "end": "1180360"
  },
  {
    "text": "it's built on top of cloud formation it's just an extension of that so if you have cicd tools today that interact with",
    "start": "1180360",
    "end": "1187039"
  },
  {
    "text": "cloud formation or the AWS CLI they'll work with this framework we've actually to the AWS CLI",
    "start": "1187039",
    "end": "1194480"
  },
  {
    "text": "added a couple of commands for this uh AWS cloud formation package which is a single command that will take care of",
    "start": "1194480",
    "end": "1200720"
  },
  {
    "text": "all that packaging and produce that new serverless template file that you see in green here that has the references to",
    "start": "1200720",
    "end": "1207559"
  },
  {
    "text": "the specific S3 object uh as well as the AWS cloud formation deploy command which",
    "start": "1207559",
    "end": "1213320"
  },
  {
    "text": "actually creates the change set for cloud information and deploys that and",
    "start": "1213320",
    "end": "1218400"
  },
  {
    "text": "as you know you can get more complex with this by leveraging cicd tools so if you wanted to trigger all of this based",
    "start": "1218400",
    "end": "1224320"
  },
  {
    "text": "on a change in a code repository or if you wanted the uh change set to be",
    "start": "1224320",
    "end": "1229440"
  },
  {
    "text": "approved before it's deployed cicd tools can certainly be beneficial and can be",
    "start": "1229440",
    "end": "1234720"
  },
  {
    "text": "used to achieve more complex workflows around this I also want to talk briefly about a",
    "start": "1234720",
    "end": "1240880"
  },
  {
    "start": "1239000",
    "end": "1239000"
  },
  {
    "text": "couple of features with API Gateway because it's showcased in this pattern uh best practices use mock Integrations",
    "start": "1240880",
    "end": "1247720"
  },
  {
    "text": "for sure if you can especially in the design phase of your API mock Integrations are a very easy way for you",
    "start": "1247720",
    "end": "1253960"
  },
  {
    "text": "to kind of model out your API and allow in you know the front end to kind kind of start its development and its",
    "start": "1253960",
    "end": "1260120"
  },
  {
    "text": "interaction with with your methods a few weeks ago we also",
    "start": "1260120",
    "end": "1265320"
  },
  {
    "text": "announced API Gateway support for binary payloads and and that's really really important but the the size limit there",
    "start": "1265320",
    "end": "1272760"
  },
  {
    "text": "is 10 megabytes right so if you're going to be interacting with API Gateway for binary transfers beyond that 10 megabyte",
    "start": "1272760",
    "end": "1280360"
  },
  {
    "text": "limit maybe really really large images that you're uploading or downloading as an example through API Gateway then the",
    "start": "1280360",
    "end": "1286360"
  },
  {
    "text": "best pattern and way to handle that is to let signed URLs with S3 hand those",
    "start": "1286360",
    "end": "1291919"
  },
  {
    "text": "off to your application and then allow the end user of the application to interact with S3 directly for those",
    "start": "1291919",
    "end": "1297360"
  },
  {
    "text": "large binary transfers uh asynchronous calls for Lambda greater than 30 seconds API",
    "start": "1297360",
    "end": "1304360"
  },
  {
    "text": "Gateway API Gateway is actually built on top of cloud formation right so in this model uh you you still have Cloud",
    "start": "1304360",
    "end": "1311240"
  },
  {
    "text": "formation's limit of 30second transaction so if you have a transaction",
    "start": "1311240",
    "end": "1316320"
  },
  {
    "text": "that extends Beyond 30 seconds we probably need to talk about why it's taking so long but if you do have that",
    "start": "1316320",
    "end": "1322799"
  },
  {
    "text": "need just make sure you make an asynchronous call to that API method so that it can return back and then you can",
    "start": "1322799",
    "end": "1329679"
  },
  {
    "text": "check back later from your client to see if that's",
    "start": "1329679",
    "end": "1333760"
  },
  {
    "start": "1334000",
    "end": "1334000"
  },
  {
    "text": "done now there are a few new API Gateway features that I think also enable some",
    "start": "1335600",
    "end": "1341120"
  },
  {
    "text": "new patterns for deploying web applications through API Gateway um",
    "start": "1341120",
    "end": "1346440"
  },
  {
    "text": "first of all there's something called a greedy path or catchall path variable uh in this case shown by the proxy plus and",
    "start": "1346440",
    "end": "1353360"
  },
  {
    "text": "in the squiggly brackets that essentially is a catchall variable for any child path that you specify in your",
    "start": "1353360",
    "end": "1359840"
  },
  {
    "text": "request it can be located anywhere in your API in this case it's inside of the root we also have an any method in API",
    "start": "1359840",
    "end": "1366480"
  },
  {
    "text": "Gateway which stands for any HTTP verb that you might be calling uh in your",
    "start": "1366480",
    "end": "1371600"
  },
  {
    "text": "method so that's a really easy way to provide you know any types of requests that come in and then there's also proxy",
    "start": "1371600",
    "end": "1378520"
  },
  {
    "text": "integration now with API Gateway which essentially means that your request and your response doesn't have to be",
    "start": "1378520",
    "end": "1384080"
  },
  {
    "text": "transformed we'll take the host headers and the body of the request as it comes in and just pass that on to the back end",
    "start": "1384080",
    "end": "1390679"
  },
  {
    "text": "now in this case in this Slide the back end is a Lambda function that's going to process that request it doesn't have to",
    "start": "1390679",
    "end": "1396240"
  },
  {
    "text": "be to use these features it can certainly be just an https endpoint if you want it to be an ec2 instance or",
    "start": "1396240",
    "end": "1402320"
  },
  {
    "text": "something like that maybe you have an existing API that's deployed on an operating system and and you could",
    "start": "1402320",
    "end": "1407760"
  },
  {
    "text": "certainly use this to front end that and to just pass those requests on through specifically we have a framework called",
    "start": "1407760",
    "end": "1413880"
  },
  {
    "text": "the AWS serverless Express framework you can go out and download that off of GitHub uh in the AWS Labs account um and",
    "start": "1413880",
    "end": "1422760"
  },
  {
    "text": "that allows you to take existing Express applications written in node.js and",
    "start": "1422760",
    "end": "1427799"
  },
  {
    "text": "deploy those directly into Lambda to take advantage of these features so it's probably the simplest way to get a web",
    "start": "1427799",
    "end": "1434520"
  },
  {
    "text": "application up and running if you have an existing expressjs application",
    "start": "1434520",
    "end": "1440440"
  },
  {
    "text": "okay let's talk about pattern two which is batch processing a few characteristics of",
    "start": "1441880",
    "end": "1447720"
  },
  {
    "text": "batch processing very large data sets typically uh handled on a periodic basis",
    "start": "1447720",
    "end": "1453120"
  },
  {
    "text": "maybe a nightly uh basis or an hourly basis uh to to process your data and and",
    "start": "1453120",
    "end": "1458520"
  },
  {
    "text": "that's a broad term processing your data could be performing calculations on your data querying your data Maybe enriching",
    "start": "1458520",
    "end": "1465320"
  },
  {
    "text": "your data in some some respect well very very common to do with ETL workloads and",
    "start": "1465320",
    "end": "1471159"
  },
  {
    "text": "this can certainly be used in LI or in addition to a lot of ETL workloads uh certainly not a replacement for those",
    "start": "1471159",
    "end": "1478320"
  },
  {
    "text": "they're usually very uh not very interactive and long long running and very similar to the Hadoop ecosystems",
    "start": "1478320",
    "end": "1484360"
  },
  {
    "text": "map reduce programming model right so the things you might use map reduce for you might consider this pattern as well",
    "start": "1484360",
    "end": "1490679"
  },
  {
    "text": "to kind of complement or be used instead of some of those let's talk about what that pattern looks like let's say you",
    "start": "1490679",
    "end": "1497320"
  },
  {
    "text": "have an object that's going to be delivered into S3 and it's a really big object you know Lambda has a execution",
    "start": "1497320",
    "end": "1503240"
  },
  {
    "text": "timeout of 5 minutes right so if I give a one terabyte file let's say to a",
    "start": "1503240",
    "end": "1508320"
  },
  {
    "text": "Lambda function it's probably going to take more than five minutes to process that so in this pattern what we do is we",
    "start": "1508320",
    "end": "1514120"
  },
  {
    "text": "create a splitter function so as that file large file is dropped in the S3 bucket this Lambda function's sole job",
    "start": "1514120",
    "end": "1521480"
  },
  {
    "text": "is to take that file and split it up somehow Maybe by size by lines whatever the case may be that you need and then",
    "start": "1521480",
    "end": "1527919"
  },
  {
    "text": "deliver that to cascading mapper functions so these subsets of this file will be delivered to the mapper",
    "start": "1527919",
    "end": "1533640"
  },
  {
    "text": "functions they'll process it do whatever you want the the batch processing application to do and they'll deliver",
    "start": "1533640",
    "end": "1540200"
  },
  {
    "text": "the results into Dynamo DB then you'll have a reducer function that kind of collects all of those results from all",
    "start": "1540200",
    "end": "1546520"
  },
  {
    "text": "of the mapper functions and stores the results somewhere in this case",
    "start": "1546520",
    "end": "1552600"
  },
  {
    "text": "S3 so this model and this pattern is very dependent and and the key to it",
    "start": "1553200",
    "end": "1558559"
  },
  {
    "text": "really as we said before with Lambda functions is cascading those mapper functions those are really the unit of",
    "start": "1558559",
    "end": "1564080"
  },
  {
    "text": "scale in this particular pattern when should you use this pattern over a map ruce or a Hadoop map ruce type type",
    "start": "1564080",
    "end": "1572320"
  },
  {
    "text": "solution well I think a lot of it depends on your where your level of expertise is where your areas of expertise are you know if you have",
    "start": "1572320",
    "end": "1579000"
  },
  {
    "text": "expertise in SQL and and Hadoop and Spark and Presto and those types of services absolutely use those but if you",
    "start": "1579000",
    "end": "1585559"
  },
  {
    "text": "don't if your expertise is more around the Lambda languages like python or node this can be a really great way to kind",
    "start": "1585559",
    "end": "1590840"
  },
  {
    "text": "of achieve the same levels of efficiencies the speed of this pattern is directly proportional to the number",
    "start": "1590840",
    "end": "1597960"
  },
  {
    "text": "of concurrent Lambda functions that you have set in your account and we'll talk about that in in an example here in just",
    "start": "1597960",
    "end": "1603360"
  },
  {
    "text": "a minute you can really use any of our persistent data store Services as that intermediate storage to collect all the",
    "start": "1603360",
    "end": "1609919"
  },
  {
    "text": "results of your MPP mapper functions and we have actually started a new project on our AWS Labs GitHub site uh called",
    "start": "1609919",
    "end": "1618039"
  },
  {
    "text": "the Lambda map produce reference architecture I've provided a link to you uh for you here on this slide to that um",
    "start": "1618039",
    "end": "1625120"
  },
  {
    "text": "that that really builds upon this this same pattern in this same model that particular reference architecture",
    "start": "1625120",
    "end": "1630559"
  },
  {
    "text": "doesn't really use a splitter function uh so that's one difference but it does actually use S3 as the the storage",
    "start": "1630559",
    "end": "1637080"
  },
  {
    "text": "location for all of the the mapper functions to deliver to and the reducer functions to work from so if you need to",
    "start": "1637080",
    "end": "1643360"
  },
  {
    "text": "run all of this inside of a VPC that can be a really good approach",
    "start": "1643360",
    "end": "1649799"
  },
  {
    "start": "1649000",
    "end": "1649000"
  },
  {
    "text": "so lastly I'll just leave you with an example uh of that we did based on this pattern we took a 200 gigabyte Google",
    "start": "1649799",
    "end": "1656760"
  },
  {
    "text": "Ingram the three Ingram data set we normalized it a little bit stored it in an S3 bucket and then we processed that",
    "start": "1656760",
    "end": "1663320"
  },
  {
    "text": "with this pattern so 200 gabyt we did it from an AWS account that had a th000 concurrent Lambda functions and it took",
    "start": "1663320",
    "end": "1670200"
  },
  {
    "text": "nine minutes to go through and to process that entire data set to do some calculations on the data and some",
    "start": "1670200",
    "end": "1676640"
  },
  {
    "text": "summations and return the results so really really efficient and absolutely up to par to the types of performance",
    "start": "1676640",
    "end": "1683320"
  },
  {
    "text": "you would see with some of the inmemory Hadoop ecosystem Solutions like spark and Presto and it all totaled up for a",
    "start": "1683320",
    "end": "1690000"
  },
  {
    "text": "cost of $76 which I think is fairly compelling but also keep in mind this is a pay per",
    "start": "1690000",
    "end": "1696080"
  },
  {
    "text": "execution model right so if you're not doing this if you're doing this on a nightly basis if you're not doing this",
    "start": "1696080",
    "end": "1701480"
  },
  {
    "text": "regularly then you won't pay for those costs okay I'm going to hand it over to",
    "start": "1701480",
    "end": "1706919"
  },
  {
    "text": "my try to take you through the the third [Applause]",
    "start": "1706919",
    "end": "1715409"
  },
  {
    "text": "pattern thank you drew so let's look at some of the common characteristics of stream processing applications so",
    "start": "1715799",
    "end": "1721799"
  },
  {
    "start": "1718000",
    "end": "1718000"
  },
  {
    "text": "imagine that you have a a fleet of sensors out in the field and they're generating measurements every few",
    "start": "1721799",
    "end": "1727600"
  },
  {
    "text": "seconds what you might imagine there is you're going to get messages or readings or measurements at a very high data",
    "start": "1727600",
    "end": "1733799"
  },
  {
    "text": "ingest rate and your requirements might be to take those messages and analyze them in near real time so you want to",
    "start": "1733799",
    "end": "1740559"
  },
  {
    "text": "make sure that the time between ingest and the analytics is as short as possible you may also have spiky traffic",
    "start": "1740559",
    "end": "1746799"
  },
  {
    "text": "so imagine that field of devices is not always connected to the network or they might produce traffic that is spiky in",
    "start": "1746799",
    "end": "1753640"
  },
  {
    "text": "nature and you want to architect Your solution to make sure that you can handle those those transient spikes and",
    "start": "1753640",
    "end": "1760360"
  },
  {
    "text": "valleys right often times when you're dealing with streaming applications you want to make sure that every message",
    "start": "1760360",
    "end": "1766640"
  },
  {
    "text": "that comes in is stored during until you have time to handle them and you can make sure that every message is",
    "start": "1766640",
    "end": "1772159"
  },
  {
    "text": "counted so it's important to do that and very often but not always message ordering is important so imagine that",
    "start": "1772159",
    "end": "1778559"
  },
  {
    "text": "you have a stream of transactions it's important for you to handle those transactions in a sequential Manner and",
    "start": "1778559",
    "end": "1784919"
  },
  {
    "text": "those could be characteristics of a stream processing applications that we see across our customers so how do you",
    "start": "1784919",
    "end": "1790200"
  },
  {
    "text": "handle that in a serverless fashion here's an example architecture that puts",
    "start": "1790200",
    "end": "1795240"
  },
  {
    "start": "1793000",
    "end": "1793000"
  },
  {
    "text": "that together and the use case we imagining here is that you have those same Fleet of sensors in the field",
    "start": "1795240",
    "end": "1801360"
  },
  {
    "text": "they're generating some sort of physical measurement imagine that's a temperature and our requirement here is to aggregate",
    "start": "1801360",
    "end": "1808080"
  },
  {
    "text": "those temperature measurements and average them over a period like 1 minute and generate those aggregated results",
    "start": "1808080",
    "end": "1815679"
  },
  {
    "text": "out every 5 minutes that's the use case we are implementing here and the way we realize that is to use a producer and",
    "start": "1815679",
    "end": "1823640"
  },
  {
    "text": "that's using the kpl library the Kinesis producer library to submit those measurements to a to a Kinesis stream we",
    "start": "1823640",
    "end": "1831679"
  },
  {
    "text": "have defined the Kinesis stream as the Event Source for our processor Lambda function that processor Lambda function",
    "start": "1831679",
    "end": "1838640"
  },
  {
    "text": "performs a one pass through the measurements that are coming in and stores the intermediate results into S3",
    "start": "1838640",
    "end": "1844840"
  },
  {
    "text": "again we're using S3 as the persistent store you could have used Dynamo DB or elastic Ash or any other service like a",
    "start": "1844840",
    "end": "1851519"
  },
  {
    "text": "database for that and then we have the separate path at the bottom and that's the scheduled path that's using",
    "start": "1851519",
    "end": "1858039"
  },
  {
    "text": "cloudwatch events scheduled to run every 5 minutes and that triggers a scheduler function whose sole job is to SP spin",
    "start": "1858039",
    "end": "1865320"
  },
  {
    "text": "off a number of parallel dump functions which go ahead and take the intermediate results and produce final aggregated",
    "start": "1865320",
    "end": "1872320"
  },
  {
    "text": "results in another S3 bucket right so this example here meets the requirement that we had couple of considerations to",
    "start": "1872320",
    "end": "1879679"
  },
  {
    "text": "remember when you're using Kinesis to trigger Lambda functions it's important to note that the number of parallel",
    "start": "1879679",
    "end": "1886039"
  },
  {
    "text": "Lambda invocations that you'll get is equal to the number of shards in your stream so remember that the unit of",
    "start": "1886039",
    "end": "1891679"
  },
  {
    "text": "scale for Kinesis is a Shard and that has a certain amount of capacity so if you have five shards you'll get five",
    "start": "1891679",
    "end": "1898080"
  },
  {
    "text": "concurrent Lambda functions now that means that each concurrent Lambda function needs to keep up with the",
    "start": "1898080",
    "end": "1904679"
  },
  {
    "text": "capacity of a Shard and if if you find that you can't do that then you might want to consider what's called The Fan",
    "start": "1904679",
    "end": "1910080"
  },
  {
    "text": "out pattern where you have the first function and you split the logic into two parts the first function's job is to",
    "start": "1910080",
    "end": "1916399"
  },
  {
    "text": "pick messages off The Shard as fast as it can and then split those messages up into chunks and invoke the second set of",
    "start": "1916399",
    "end": "1922880"
  },
  {
    "text": "Lambda functions in parallel so that you can now increase your throughput but what we've lost as a result is message",
    "start": "1922880",
    "end": "1929600"
  },
  {
    "text": "ordering so it's a trade-off it depends on your application if this is a good pattern or not little bit more about fan out",
    "start": "1929600",
    "end": "1936440"
  },
  {
    "start": "1935000",
    "end": "1935000"
  },
  {
    "text": "pattern the capacity of a stre of a shard in a Kinesis stream comes out to 1,000 records per second or up to 1 mb",
    "start": "1936440",
    "end": "1944519"
  },
  {
    "text": "per second of data so really these are two envelopes that you have have and it's important to see which of these",
    "start": "1944519",
    "end": "1950120"
  },
  {
    "text": "envelopes is a is a consideration for your app and whether Lambda is keeping up with that Peak capacity if you find",
    "start": "1950120",
    "end": "1956320"
  },
  {
    "text": "that you can't keep up with that it's a good place to actually introduce the fan out pattern and if you're looking at",
    "start": "1956320",
    "end": "1962000"
  },
  {
    "text": "implementing the fanout pattern consider using synchronous invocations of Lambda",
    "start": "1962000",
    "end": "1967559"
  },
  {
    "text": "in parallel and if you're using nodejs there's a great project called R coil that lets you do this quite easily and",
    "start": "1967559",
    "end": "1973440"
  },
  {
    "text": "handle errors again it's important to handle errors because you're interested in message d durability and one pattern",
    "start": "1973440",
    "end": "1979360"
  },
  {
    "text": "that you can use for that is to use what's called a dead letter que so any messages that could not be handled you",
    "start": "1979360",
    "end": "1985240"
  },
  {
    "text": "put those in a queue and you handle them in an offline or a separate process so that's a common pattern that we see out",
    "start": "1985240",
    "end": "1991240"
  },
  {
    "text": "there couple of best practices when you configure Kinesis to trigger Lambda",
    "start": "1991240",
    "end": "1996600"
  },
  {
    "text": "there's also something called the blat size what this defines is the number of messages or number of records that will",
    "start": "1996600",
    "end": "2003120"
  },
  {
    "text": "be batched together and submitted to Lambda in one invocation the default is 100",
    "start": "2003120",
    "end": "2008360"
  },
  {
    "text": "but for some high throughput use cases you might want to increase that batch size higher what that does is it it",
    "start": "2008360",
    "end": "2015039"
  },
  {
    "text": "sends more records per invocation and one of the ways that we charge you for Lambda is by the number of invocations",
    "start": "2015039",
    "end": "2022360"
  },
  {
    "text": "so in doing this you can actually reduce your Lambda cost quite a bit another thing to make sure you remember is that",
    "start": "2022360",
    "end": "2028960"
  },
  {
    "text": "you need to tune the memory settings of your Lambda function when you increase the memory setting of your Lambda",
    "start": "2028960",
    "end": "2034159"
  },
  {
    "text": "function you also correspondingly give that Lambda function more CPU so this could be a good way for you to deal with",
    "start": "2034159",
    "end": "2040320"
  },
  {
    "text": "problems where you can't keep up with the load and you can increase the CPU by increasing the memory and you might be",
    "start": "2040320",
    "end": "2045519"
  },
  {
    "text": "able to keep up with the rate of messages coming in and you might avoid the fan out pattern and finally I've",
    "start": "2045519",
    "end": "2051480"
  },
  {
    "text": "talked about this it's always a great idea to use the Kinesis producer Library when you're sending messages to Kinesis",
    "start": "2051480",
    "end": "2058839"
  },
  {
    "text": "because what that does is it it packs multiple messages into one record and lets you efficiently use the capacity of",
    "start": "2058839",
    "end": "2065760"
  },
  {
    "text": "your stream to the fullest extent so if you have very small messages you kind of pack them into one record multiple",
    "start": "2065760",
    "end": "2072358"
  },
  {
    "text": "messages into one record and you can use increase your throughput how do you monitor the stream",
    "start": "2072359",
    "end": "2077800"
  },
  {
    "text": "processing pipeline we talked about of course you have the standard tools at your disposal and one of the important metrics to keep an eye on is the Kinesis",
    "start": "2077800",
    "end": "2085200"
  },
  {
    "text": "iterator age milliseconds metric if you're doing things right the metric will look something like this you have a",
    "start": "2085200",
    "end": "2091158"
  },
  {
    "text": "steady state of zero with very transient spikes that indicate some intermittent problem in handling the data but if you",
    "start": "2091159",
    "end": "2097960"
  },
  {
    "text": "see your metric go like this a staircase function it's a short fire indication that you're not keeping up with your",
    "start": "2097960",
    "end": "2103760"
  },
  {
    "text": "message rate and this is a time when you want to look at optimizing the work that you do in your Lambda function or to",
    "start": "2103760",
    "end": "2109720"
  },
  {
    "text": "consider the fan out pattern the pattern we presented earlier really has Lambda code that you're",
    "start": "2109720",
    "end": "2115200"
  },
  {
    "start": "2112000",
    "end": "2112000"
  },
  {
    "text": "executing but what if you said that look I don't want to write that code then an alternative pattern is to use Kinesis",
    "start": "2115200",
    "end": "2121320"
  },
  {
    "text": "analytics Kinesis analytics is the simplest way for you to analyze data that's streaming in and the way it works",
    "start": "2121320",
    "end": "2127760"
  },
  {
    "text": "is you define an application in Kinesis analytics you define the data source in this case a Kinesis stream the same",
    "start": "2127760",
    "end": "2133960"
  },
  {
    "text": "stream that we had earlier and you define the destination which is an S3 bucket and you represent your processing",
    "start": "2133960",
    "end": "2139599"
  },
  {
    "text": "logic in SQL as you can see in this example so we have the same kind of time window functions and those are",
    "start": "2139599",
    "end": "2145560"
  },
  {
    "text": "represented by the yellow text there what you're doing is you're taking the time stamp floing it down to get the",
    "start": "2145560",
    "end": "2150960"
  },
  {
    "text": "minute that the measurement should belong to and then you're doing the aggregation that's the blue text you're",
    "start": "2150960",
    "end": "2156319"
  },
  {
    "text": "calculating the sum you're calculating the number of messages that you've seen so you can later do an average and",
    "start": "2156319",
    "end": "2162640"
  },
  {
    "text": "you're grouping that by the device ID so this pipeline essentially does the same function that we had in the first",
    "start": "2162640",
    "end": "2168880"
  },
  {
    "text": "pipeline but it does it without having to manage and worry about things like how do I fan out how do I scale to match",
    "start": "2168880",
    "end": "2175319"
  },
  {
    "text": "the needs so it takes on more of the work from you we wanted to do a cost comparison",
    "start": "2175319",
    "end": "2180880"
  },
  {
    "start": "2179000",
    "end": "2179000"
  },
  {
    "text": "between a server less approach and a server based approach and in order to do that we had to send some sort of",
    "start": "2180880",
    "end": "2186000"
  },
  {
    "text": "Representative traffic and we settled on this traffic model this is a 6-hour traffic model which Peaks at 50,000",
    "start": "2186000",
    "end": "2193040"
  },
  {
    "text": "messages per second and it has a steady state base line of 10,000 messages per second and we extrapolated from that 6-h",
    "start": "2193040",
    "end": "2199800"
  },
  {
    "text": "hour run to see what the cost would be over a 30-day month and in this example you see how the cost broke out on the",
    "start": "2199800",
    "end": "2206119"
  },
  {
    "text": "server L side we are using a Kinesis stream with five shards and that was good enough to handle the 50,000",
    "start": "2206119",
    "end": "2211720"
  },
  {
    "text": "messages per second because we packing multiple messages into one record and the cost came out to be a little over",
    "start": "2211720",
    "end": "2217680"
  },
  {
    "text": "$400 a month on the server base side we're using K cfar to actually collect",
    "start": "2217680",
    "end": "2223560"
  },
  {
    "text": "the messages we're using zookeeper to manage the cluster so we have a three note cluster of each of these and we",
    "start": "2223560",
    "end": "2228880"
  },
  {
    "text": "have one consumer that's processing this and the cost on demand comes out to a little over",
    "start": "2228880",
    "end": "2234800"
  },
  {
    "text": "$730 but if you change to the onee reserved instance purchasing model that cost drops down to about $430 $450 right",
    "start": "2234800",
    "end": "2244640"
  },
  {
    "text": "so the key to remember here is when you're using server less model your unit of scale is quite different from servers",
    "start": "2244640",
    "end": "2250880"
  },
  {
    "text": "you're scaling based on the traffic that comes in so if your traffic pattern is variable you come out ahead with the",
    "start": "2250880",
    "end": "2256680"
  },
  {
    "text": "server based side your unit of scale is server so you have to worry about utilization am I using the servers to",
    "start": "2256680",
    "end": "2262760"
  },
  {
    "text": "the fullest extent possible so you also have to worry a lot about operations and I didn't I didn't actually account for",
    "start": "2262760",
    "end": "2268440"
  },
  {
    "text": "the operational cost but ajoy later we'll talk about how that changes in a serverless world AWS provides a number",
    "start": "2268440",
    "end": "2275400"
  },
  {
    "text": "of services that are related so we've talked a bit about Kinesis but there's also sqs and SNS that can let you",
    "start": "2275400",
    "end": "2282079"
  },
  {
    "text": "process messages that are coming in and this I chart here attempts to compare certain attributes of those I'd like to",
    "start": "2282079",
    "end": "2288640"
  },
  {
    "text": "highlight two of those one of those is message ordering so Kinesis guarantees",
    "start": "2288640",
    "end": "2293839"
  },
  {
    "text": "that messages in A Shard will be strictly ordered with sqs you have two choices now the standard cues which do",
    "start": "2293839",
    "end": "2300480"
  },
  {
    "start": "2297000",
    "end": "2297000"
  },
  {
    "text": "best effort ordering and the fif for qes which actually guarantee the message ordering within what is called a message",
    "start": "2300480",
    "end": "2306520"
  },
  {
    "text": "group with SNS of course you don't get message ordering at all another aspect I",
    "start": "2306520",
    "end": "2311560"
  },
  {
    "text": "want to highlight is how the messages are processed you looked at how Kinesis and sqs both need the ability to write a",
    "start": "2311560",
    "end": "2319119"
  },
  {
    "text": "consumer or a reader so with Kinesis you can have that being Lambda with sqs you need to write something that reads",
    "start": "2319119",
    "end": "2324440"
  },
  {
    "text": "messages while SNS actually comes built in with a number of destination types so you can send messages to SMS email even",
    "start": "2324440",
    "end": "2332960"
  },
  {
    "text": "sqs and of course Lambda so which of these is suitable for your use case really depends so use this chart as a",
    "start": "2332960",
    "end": "2339880"
  },
  {
    "text": "way to decide which one's best for you if you're familiar with big data processing there's a concept called",
    "start": "2339880",
    "end": "2345920"
  },
  {
    "text": "Lambda architecture not the same as AWS Lambda but Lambda architecture and the gist of that is you're looking at taking",
    "start": "2345920",
    "end": "2352160"
  },
  {
    "text": "your data pipe processing Pipeline and splitting that up into batch and speed layers and the concept that Drew talked",
    "start": "2352160",
    "end": "2359400"
  },
  {
    "text": "about with batch processing as well as the concept I talked about can be combined to give you a big data Lambda",
    "start": "2359400",
    "end": "2366359"
  },
  {
    "text": "architecture automation now the next pattern this is really a pattern that involves a number of different types of",
    "start": "2366359",
    "end": "2372960"
  },
  {
    "start": "2372000",
    "end": "2372000"
  },
  {
    "text": "use cases so examples would be you need to respond to alarms or events you need to schedule periodic jobs or you need to",
    "start": "2372960",
    "end": "2380440"
  },
  {
    "text": "audit and notify on anomalies that happen in your environment or you want to extend AWS functionality something",
    "start": "2380440",
    "end": "2386880"
  },
  {
    "text": "that we haven't built but you wish that you want to actually control that and you want to do all of these while being",
    "start": "2386880",
    "end": "2392560"
  },
  {
    "text": "making sure that you're highly available and you are scalable right so how do you do that and I'm going to show you a",
    "start": "2392560",
    "end": "2398000"
  },
  {
    "text": "couple of examples of automation patterns they cover the gamut of some of the use cases that we talked about here",
    "start": "2398000",
    "end": "2404000"
  },
  {
    "text": "and the idea is that you get inspired by that and you can apply that to the problems that crop up in your",
    "start": "2404000",
    "end": "2409480"
  },
  {
    "text": "environment the first example is extending AWS functionality so in this",
    "start": "2409480",
    "end": "2414839"
  },
  {
    "start": "2410000",
    "end": "2410000"
  },
  {
    "text": "example you know that when you launch an ec2 instance you get a DNS name but that's not really very friendly because",
    "start": "2414839",
    "end": "2419960"
  },
  {
    "text": "it has an IP address embedded in that but what if you wanted to have a friendly name associated with that ec2",
    "start": "2419960",
    "end": "2425640"
  },
  {
    "text": "instance and you want that name to to be resolvable when the ec2 instance is running but not resolvable when the",
    "start": "2425640",
    "end": "2431599"
  },
  {
    "text": "instance is not running so the way you achieve that Dynamic DNS capacity is by setting up uh an ac2 instance change",
    "start": "2431599",
    "end": "2439119"
  },
  {
    "text": "event that is triggering a cloudwatch events Rule and the cloud do event rule is now going to trigger a Lambda",
    "start": "2439119",
    "end": "2445400"
  },
  {
    "text": "function and the code in the Lambda function is going to call Route 53 apis to add a name a name an a record with",
    "start": "2445400",
    "end": "2452800"
  },
  {
    "text": "the name and the private IP of the ec2 instance that just started or changed state and you can take that name from a",
    "start": "2452800",
    "end": "2459359"
  },
  {
    "text": "tag on that tc2 instance in this example I use the name tag C name whatever the value is that makes it into Route 53 and",
    "start": "2459359",
    "end": "2466400"
  },
  {
    "text": "is resolvable now when the ec2 instance changes state so it goes from running to stopped or running to terminated then",
    "start": "2466400",
    "end": "2473160"
  },
  {
    "text": "you go ahead and remove that entry from Route 53 so you achieve the use case this example also shows us saving some",
    "start": "2473160",
    "end": "2480200"
  },
  {
    "text": "state in Dynamo DB the idea here is that we want to store some metadata because we can then clean up that Route 53 entry",
    "start": "2480200",
    "end": "2487440"
  },
  {
    "text": "when the instance Stops Another example is what we call a S3 driven data flow and in this example",
    "start": "2487440",
    "end": "2495359"
  },
  {
    "text": "the use case is that users are uploading images to an S3 bucket but what you need to do is actually trigger off that",
    "start": "2495359",
    "end": "2502079"
  },
  {
    "text": "upload and process those images to resize them or generate thumbnails or whatever right so in this example you",
    "start": "2502079",
    "end": "2509000"
  },
  {
    "text": "can create a rule in S3 that triggers a Lambda function upon an object upload to",
    "start": "2509000",
    "end": "2514720"
  },
  {
    "text": "the put object that Lambda function does the work required to process that image that just got uploaded so it resizes the",
    "start": "2514720",
    "end": "2521560"
  },
  {
    "text": "images and stores the final output right back into S3 so this is a common pattern",
    "start": "2521560",
    "end": "2526839"
  },
  {
    "text": "and it can be used for many other use cases for example Twitter Periscope uses this to analyze content that's uploaded",
    "start": "2526839",
    "end": "2533880"
  },
  {
    "text": "by users for appropriateness and it rejects any messages that should not be published onto the final streams so",
    "start": "2533880",
    "end": "2540400"
  },
  {
    "text": "that's an example of using S3 data driven workflows and finally I want to talk to",
    "start": "2540400",
    "end": "2546240"
  },
  {
    "start": "2545000",
    "end": "2545000"
  },
  {
    "text": "you about the audit and notification use case and here I would like to highlight the great open source project called",
    "start": "2546240",
    "end": "2552440"
  },
  {
    "text": "Cloud custodian this is a project that's sponsored by Capital One they essentially saw that there were lots of",
    "start": "2552440",
    "end": "2558040"
  },
  {
    "text": "scripts that they were managing to audit their environment so they felt that it would make a lot of sense to create one",
    "start": "2558040",
    "end": "2563160"
  },
  {
    "text": "tool where you could describe all the rules for your environment so example would be of a rule would be that let us",
    "start": "2563160",
    "end": "2570000"
  },
  {
    "text": "say that you want to enforce that all EBS volumes that are ever created are encrypted so you can actually Define",
    "start": "2570000",
    "end": "2576200"
  },
  {
    "text": "that in a template and what cloud custodian will do is take that template and create one or more",
    "start": "2576200",
    "end": "2582480"
  },
  {
    "text": "Lambda functions in your environment those Lambda functions are triggered on various different events for example",
    "start": "2582480",
    "end": "2589359"
  },
  {
    "text": "they could Trier trigger on cloudwatch events they could clear trigger on cloud trail events as well as on cloud watch",
    "start": "2589359",
    "end": "2595960"
  },
  {
    "text": "log log entries and those triggers will trigger the Lambda function the Lambda",
    "start": "2595960",
    "end": "2601000"
  },
  {
    "text": "function continuously checks against the compliance rule that you defined and then if anomalies are found you you can",
    "start": "2601000",
    "end": "2607359"
  },
  {
    "text": "Define actions that it should take so for example in the EBS volume encryption use case you might Define the action as",
    "start": "2607359",
    "end": "2613960"
  },
  {
    "text": "terminate the instance because we don't want any instances with unencrypted EBS volumes you could also Define an action",
    "start": "2613960",
    "end": "2620440"
  },
  {
    "text": "that says notify me and that could be done through SNS so if you're finding yourself creating a lot of scripts you",
    "start": "2620440",
    "end": "2626680"
  },
  {
    "text": "might want to step back and see if Cloud custodian is a good match for your use case couple of best practices when",
    "start": "2626680",
    "end": "2632839"
  },
  {
    "text": "you're dealing with automation do document how you can stop the event flow for your automation so how do you",
    "start": "2632839",
    "end": "2639040"
  },
  {
    "text": "disable the event flow for your automation so that you can troubleshoot your automation when something goes",
    "start": "2639040",
    "end": "2644160"
  },
  {
    "text": "wrong often times when you're doing automation you're calling AWS apis so do be aware that we do throttle apis so you",
    "start": "2644160",
    "end": "2651480"
  },
  {
    "text": "want to handle those API throttle responses in a graceful manner so the",
    "start": "2651480",
    "end": "2656640"
  },
  {
    "text": "usual advice we give people is to have an exponential back off algorithm and if you're using our AWS sdks they will take",
    "start": "2656640",
    "end": "2663680"
  },
  {
    "text": "care of this automatically so it's a great idea to use our AWS sdks and finally like Drew mentioned it's",
    "start": "2663680",
    "end": "2669559"
  },
  {
    "text": "important especially in the case of automation to publish custom cloudwatch metrics which make operational sense for",
    "start": "2669559",
    "end": "2675920"
  },
  {
    "text": "you so if you're having an automation that does periodic snapshotting of EBS volumes it would be a great idea to",
    "start": "2675920",
    "end": "2682200"
  },
  {
    "text": "publish how many volumes were successfully snapshotted how many failed and you can then alarm on those and",
    "start": "2682200",
    "end": "2687800"
  },
  {
    "text": "notify people if something should go wrong now I'd like to invite aoy to talk",
    "start": "2687800",
    "end": "2693480"
  },
  {
    "text": "about how at BMC they realized a serverless pattern for for security and devops automation thank",
    "start": "2693480",
    "end": "2701079"
  },
  {
    "text": "you thank you it feels great to be here and uh be able to tell you the story of",
    "start": "2705559",
    "end": "2711800"
  },
  {
    "text": "our Cloud Journey uh so as you know BMC is has been a pretty well-known player",
    "start": "2711800",
    "end": "2717760"
  },
  {
    "text": "in data center automation Cloud automation but mainly on on premise",
    "start": "2717760",
    "end": "2723079"
  },
  {
    "text": "Solutions next month we are about to release a new Cloud Server Service uh",
    "start": "2723079",
    "end": "2728119"
  },
  {
    "text": "which is uh going to be security and automation as a service in Cloud I'm a",
    "start": "2728119",
    "end": "2734640"
  },
  {
    "text": "joy Kumar and I'm going to talk about our journey in terms of how we build this cloud service in a very agile",
    "start": "2734640",
    "end": "2741200"
  },
  {
    "text": "Manner and how serverless architecture and Lambda Services were a key factor in",
    "start": "2741200",
    "end": "2747520"
  },
  {
    "text": "really uh doing this I'm going to talk about three things uh I'll talk about uh",
    "start": "2747520",
    "end": "2752839"
  },
  {
    "text": "our use case architecture uh and then key learnings uh so let's uh Deep dive",
    "start": "2752839",
    "end": "2758920"
  },
  {
    "text": "on our journey here uh earlier this year we started thinking about uh what what",
    "start": "2758920",
    "end": "2765480"
  },
  {
    "start": "2759000",
    "end": "2759000"
  },
  {
    "text": "what would a cloud uh security and compliance solution would look like based on talking to a few of our",
    "start": "2765480",
    "end": "2772160"
  },
  {
    "text": "customers we had four goals essentially uh and and these are very typical goals",
    "start": "2772160",
    "end": "2777960"
  },
  {
    "text": "of any uh SAS Service uh basically Support rap rapid iteration rapid",
    "start": "2777960",
    "end": "2783520"
  },
  {
    "text": "changes like weekly deliveries scale in terms of number number of tenants amount of data we are uh consuming uh support",
    "start": "2783520",
    "end": "2791880"
  },
  {
    "text": "sophisticated logic applications which you can extend the product and obviously",
    "start": "2791880",
    "end": "2797680"
  },
  {
    "text": "uh economically scalable so let me talk about the specific use case what exactly",
    "start": "2797680",
    "end": "2802800"
  },
  {
    "start": "2798000",
    "end": "2798000"
  },
  {
    "text": "does it mean that you want to do cicd integration uh of compliance into devops",
    "start": "2802800",
    "end": "2809280"
  },
  {
    "text": "pipeline so let me start with what a typical devops pipeline looks like you have a build phase a test phase and a",
    "start": "2809280",
    "end": "2816440"
  },
  {
    "text": "deploy phase and it typically what happens is in each of these phases",
    "start": "2816440",
    "end": "2821480"
  },
  {
    "text": "you're creating a lot of artifacts here uh for example in the build phase you could be creating Docker containers or",
    "start": "2821480",
    "end": "2828720"
  },
  {
    "text": "infrastructure as code like cloud formation template and you really need to understand how are you governing",
    "start": "2828720",
    "end": "2835480"
  },
  {
    "text": "these how are you uh basically making sure uh whatever artifacts you're",
    "start": "2835480",
    "end": "2841119"
  },
  {
    "text": "generating uh they are secure for example uh is my Docker container secure",
    "start": "2841119",
    "end": "2846920"
  },
  {
    "text": "if I am building it out uh through a build process uh if I'm creating cloud formation templates uh am I using the",
    "start": "2846920",
    "end": "2854760"
  },
  {
    "text": "right set of uh instance type for ec2 uh there are all these uh all these really",
    "start": "2854760",
    "end": "2860640"
  },
  {
    "text": "compliance checks which need to be done right after a build just happens that's",
    "start": "2860640",
    "end": "2866480"
  },
  {
    "text": "part of the automation uh use case which we want to uh which we want to build as",
    "start": "2866480",
    "end": "2872000"
  },
  {
    "text": "a part of this service uh this the third part of the phase is really when you deploy your uh software to Cloud uh",
    "start": "2872000",
    "end": "2879599"
  },
  {
    "text": "again here after you have deployed the code you want to check uh did I uh is is",
    "start": "2879599",
    "end": "2885920"
  },
  {
    "text": "my cloud secure did somebody make a change in infrastructure as a code and left a firewall uh Port open uh these",
    "start": "2885920",
    "end": "2893319"
  },
  {
    "text": "are all questions which uh really need to be tackled in this in the devops",
    "start": "2893319",
    "end": "2899280"
  },
  {
    "text": "pipeline and not typically what is done today at in production so that's what",
    "start": "2899280",
    "end": "2904800"
  },
  {
    "text": "that's what is our key really the key key use cases that we are solving uh",
    "start": "2904800",
    "end": "2910319"
  },
  {
    "text": "where we want to consume any type of data from a devops pipeline whether it's",
    "start": "2910319",
    "end": "2916040"
  },
  {
    "text": "uh the container data the metadata about containers uh the cloud uh the test",
    "start": "2916040",
    "end": "2921920"
  },
  {
    "text": "cases and so on or the test case results and be able to uh do some sort of",
    "start": "2921920",
    "end": "2928280"
  },
  {
    "text": "application uh business Logic on that data and then be able to tell you the results uh in terms of what are some of",
    "start": "2928280",
    "end": "2935400"
  },
  {
    "text": "the rules that passed and what what didn't pass uh so that's really the key goal of this use case uh which we are",
    "start": "2935400",
    "end": "2942599"
  },
  {
    "text": "trying to build uh if you see the common pattern across all this from an architecture perspective uh is",
    "start": "2942599",
    "end": "2948960"
  },
  {
    "text": "essentially you want to collect the data and collect at massive scale because you're you're talking about a SAS",
    "start": "2948960",
    "end": "2954720"
  },
  {
    "text": "service collecting from hundreds of tenants each of them running uh dozens of pipelines so you want to collect all",
    "start": "2954720",
    "end": "2961000"
  },
  {
    "text": "this data then you want to really uh build applications on top of it do some",
    "start": "2961000",
    "end": "2966200"
  },
  {
    "text": "processing uh and then show the results uh to the to the customers so then uh we",
    "start": "2966200",
    "end": "2971440"
  },
  {
    "text": "started thinking about building this architecture in a traditional way which is really uh build the some of these",
    "start": "2971440",
    "end": "2978079"
  },
  {
    "text": "clusters here like engin X CFA Cassandra elastic search some of the Zookeeper",
    "start": "2978079",
    "end": "2984040"
  },
  {
    "text": "wall and what we started realizing that we are spending a lot of time in building infrastructure uh and very",
    "start": "2984040",
    "end": "2991799"
  },
  {
    "text": "little time focusing on an application uh the green box there is our real applic ation which is really doing our",
    "start": "2991799",
    "end": "2998960"
  },
  {
    "text": "compliance and Security checks uh but then we realized why are we spending all this time but but that's where we",
    "start": "2998960",
    "end": "3005640"
  },
  {
    "text": "started really looking at uh uh let's start understanding how to build these",
    "start": "3005640",
    "end": "3010880"
  },
  {
    "text": "clusters how we will operate them in production so while we were busy doing that uh and this is really true uh the",
    "start": "3010880",
    "end": "3018160"
  },
  {
    "text": "product management comes back and tells us that hey there are some uh customer validations we need to do and can you",
    "start": "3018160",
    "end": "3024599"
  },
  {
    "text": "get it done in a month so that's when we pivoted on our architecture and we said let's do something uh more disruptive",
    "start": "3024599",
    "end": "3032079"
  },
  {
    "text": "here and let's see how what we can do with lambdas and serverless architecture so what you see here is really uh the",
    "start": "3032079",
    "end": "3039160"
  },
  {
    "text": "architecture which we built uh in a month uh and now we are continuously",
    "start": "3039160",
    "end": "3044359"
  },
  {
    "text": "evolving uh so let me just describe you to you very quickly what this is on the far left uh you see collectors which are",
    "start": "3044359",
    "end": "3050960"
  },
  {
    "text": "collecting data from your devops pipelines from your Cloud uh and all all all kinds of data get getting ingested",
    "start": "3050960",
    "end": "3057359"
  },
  {
    "text": "into API Gateway you do see an ingest Lambda which is pushing all that data",
    "start": "3057359",
    "end": "3062799"
  },
  {
    "text": "into Kinesis so that's the part of data where data is flowing into the Kinesis",
    "start": "3062799",
    "end": "3068079"
  },
  {
    "text": "uh note that this is slightly different from what metria described uh we are not using kpl but we are using a Lambda",
    "start": "3068079",
    "end": "3075240"
  },
  {
    "text": "function essentially to do a lot of data enrichment and tenant context uh uh in",
    "start": "3075240",
    "end": "3082920"
  },
  {
    "text": "that Lambda once once all the data is available on the kinesis you see on the far right uh the green things there",
    "start": "3082920",
    "end": "3089440"
  },
  {
    "text": "which are applications which are like policies rules uh which are running on those that data uh and and once that",
    "start": "3089440",
    "end": "3096559"
  },
  {
    "text": "data the the rules are evaluated it gets stored in Amazon Dynamo DB and S3 and",
    "start": "3096559",
    "end": "3102359"
  },
  {
    "text": "then there is another Lambda function uh which runs on those on that database which is continuously indexing it uh and",
    "start": "3102359",
    "end": "3109240"
  },
  {
    "text": "pushing it into the elastic search so what you see here is the entire data pipeline is really a series of Lambda",
    "start": "3109240",
    "end": "3115599"
  },
  {
    "text": "function in just Lambda application which is also Lambda which is getting triggered as data comes in and then",
    "start": "3115599",
    "end": "3121880"
  },
  {
    "text": "finally I didn't I want to make sure I talk about the API uh this is a completely apid driven system uh so what",
    "start": "3121880",
    "end": "3129200"
  },
  {
    "text": "you see at the far uh bottom uh left uh all our public apis are also follow the",
    "start": "3129200",
    "end": "3135960"
  },
  {
    "text": "pattern of a Gateway and the Lambda functions behind it uh we we we defined",
    "start": "3135960",
    "end": "3141040"
  },
  {
    "text": "all our apis in Swagger and essentially uh this completes basically all the uh",
    "start": "3141040",
    "end": "3146280"
  },
  {
    "text": "the the core architecture of our product now what you see here is the benefits of it are obvious I mean we were able to do",
    "start": "3146280",
    "end": "3153000"
  },
  {
    "text": "this amazingly in in in in less than 4 weeks uh so that's the beauty of Lambda",
    "start": "3153000",
    "end": "3158720"
  },
  {
    "text": "that instead of thinking about infrastructure CFA and Cassandra and",
    "start": "3158720",
    "end": "3164720"
  },
  {
    "text": "managing operating clusters worrying about security patches monitoring uh we",
    "start": "3164720",
    "end": "3171400"
  },
  {
    "text": "are not doing any of that we are just I mean we have a small team of developers thinking about how do I really add",
    "start": "3171400",
    "end": "3178880"
  },
  {
    "text": "business value how do I think about new Services new applications to focus and how do I deliver that functionality",
    "start": "3178880",
    "end": "3186160"
  },
  {
    "text": "continuously so that's what was our aha moment uh when we built this architecture and last 6 months we've had",
    "start": "3186160",
    "end": "3193040"
  },
  {
    "text": "number of Trials uh next month we will be actually going live with this so let's let me just review some of",
    "start": "3193040",
    "end": "3200640"
  },
  {
    "start": "3199000",
    "end": "3199000"
  },
  {
    "text": "the patterns uh the top two patterns which I am thoroughly impressed with is",
    "start": "3200640",
    "end": "3205880"
  },
  {
    "text": "really the uh the API pattern uh which is having an API Gateway and lambdas is",
    "start": "3205880",
    "end": "3212359"
  },
  {
    "text": "amazing you we basically churn out apis uh at an amazing speed here the second",
    "start": "3212359",
    "end": "3218920"
  },
  {
    "text": "most valuable or equally valuable is really ability to build new applications",
    "start": "3218920",
    "end": "3224119"
  },
  {
    "text": "so we have data coming into the Kinesis stream and you have multiple lambdas",
    "start": "3224119",
    "end": "3229520"
  },
  {
    "text": "which are getting uh invoked so that's also an amazing pattern which we have",
    "start": "3229520",
    "end": "3234559"
  },
  {
    "text": "really leveraged here in our architecture I'll skip some of these other things these are pretty obvious",
    "start": "3234559",
    "end": "3240359"
  },
  {
    "text": "the scaling you already heard we use fanouts so uh the scale is really amazing I mean we have uh several",
    "start": "3240359",
    "end": "3248200"
  },
  {
    "text": "hundreds lambdas simultaneously uh ingesting the data as",
    "start": "3248200",
    "end": "3253359"
  },
  {
    "text": "we really scaled from a few tenants to like 50 to 100 tenants in our load",
    "start": "3253359",
    "end": "3258640"
  },
  {
    "text": "testing uh similarly all our applications got scaled up to close to 4",
    "start": "3258640",
    "end": "3263720"
  },
  {
    "text": "500 Lambda so essentially uh we are we are achieving uh massive scalability",
    "start": "3263720",
    "end": "3268920"
  },
  {
    "text": "with this architecture and again I wanted to point out without really doing anything at the infra level because if",
    "start": "3268920",
    "end": "3276000"
  },
  {
    "text": "you did this with servers in a traditional ec2 World you'd be doing a lot of uh things like asgs and thinking",
    "start": "3276000",
    "end": "3283319"
  },
  {
    "text": "about metrics and all that this is all this this just happens automatically so",
    "start": "3283319",
    "end": "3288839"
  },
  {
    "text": "that's really the core core message I wanted to bring about here uh on uh we",
    "start": "3288839",
    "end": "3294559"
  },
  {
    "text": "have been talking about application architect Ure so on the left side of the screen is all the things we have used",
    "start": "3294559",
    "end": "3300319"
  },
  {
    "text": "Beyond lamb Lambda so these are all managed Services again the core principle is the same we don't want to",
    "start": "3300319",
    "end": "3307119"
  },
  {
    "text": "deal with infrastructure we want to do we we want to leave that to Amazon we",
    "start": "3307119",
    "end": "3312200"
  },
  {
    "text": "want to really focus more on our business uh use cases what I wanted to",
    "start": "3312200",
    "end": "3317760"
  },
  {
    "text": "uh talk to you about is in addition to application architecture when our",
    "start": "3317760",
    "end": "3322799"
  },
  {
    "text": "operations architecture is also pretty much serverless so essentially what we are using is",
    "start": "3322799",
    "end": "3329559"
  },
  {
    "text": "cloud watch we are using Lambda we are using logs in Lambda and building",
    "start": "3329559",
    "end": "3335440"
  },
  {
    "text": "application metrics we are passing them into Cloud watch and then we are generating SNS and SS uh events if some",
    "start": "3335440",
    "end": "3344720"
  },
  {
    "text": "some activity uh goes on which is",
    "start": "3344720",
    "end": "3350359"
  },
  {
    "text": "uh which which doesn't align",
    "start": "3352559",
    "end": "3357880"
  },
  {
    "text": "okay okay let me switch to uh operations side here uh so I've been talking about",
    "start": "3359240",
    "end": "3365240"
  },
  {
    "text": "we are doing no infrastructure operations uh there is a myth about no Ops and I wanted to clarify here uh that",
    "start": "3365240",
    "end": "3372440"
  },
  {
    "text": "uh you still need to do operations even though you are using serverless uh essentially now you're doing more",
    "start": "3372440",
    "end": "3379160"
  },
  {
    "text": "application operations so for example is your lambdas or all your services up and",
    "start": "3379160",
    "end": "3385200"
  },
  {
    "text": "running uh whenever data is fed in you really need to watch those kinds of metrics are you getting 5xs errors in",
    "start": "3385200",
    "end": "3392240"
  },
  {
    "text": "your API calls how is my uh lat latency doing so all these are application metrics which you do want to really",
    "start": "3392240",
    "end": "3399680"
  },
  {
    "text": "continuously measure and we we so so you do you do have operations but they are mostly they're all at the application",
    "start": "3399680",
    "end": "3407079"
  },
  {
    "text": "Level uh and none at the infrastructure level so that's the really key benefit we have been deriving our operations",
    "start": "3407079",
    "end": "3413319"
  },
  {
    "text": "team uh at this point is very very small uh essentially because uh when we do",
    "start": "3413319",
    "end": "3420280"
  },
  {
    "text": "devops pipelines every week or every few days and push new versions of our Lambda",
    "start": "3420280",
    "end": "3425839"
  },
  {
    "text": "functions that's all we are really pushing into the production I want to close this with a",
    "start": "3425839",
    "end": "3432400"
  },
  {
    "start": "3431000",
    "end": "3431000"
  },
  {
    "text": "few key learnings of what we have learned uh basically uh using serverless",
    "start": "3432400",
    "end": "3438319"
  },
  {
    "text": "patterns in architecture is really great uh the the the biggest value in my mind",
    "start": "3438319",
    "end": "3444079"
  },
  {
    "text": "is the agility or the speed of innovation so in some sense we are we",
    "start": "3444079",
    "end": "3450160"
  },
  {
    "text": "are all now talking the language or all our conversations are all about how do I",
    "start": "3450160",
    "end": "3456680"
  },
  {
    "text": "what does a customer want and how do I really bring the next feature in by",
    "start": "3456680",
    "end": "3461799"
  },
  {
    "text": "making a new Lambda version and then using our devop cicd automation to push a new Lambda so that's where the whole",
    "start": "3461799",
    "end": "3469640"
  },
  {
    "text": "Innovation angle of uh of Lambda really helps so that's that's really",
    "start": "3469640",
    "end": "3476680"
  },
  {
    "text": "what I see is uh the the the most useful uh or the most impactful feature",
    "start": "3476680",
    "end": "3483240"
  },
  {
    "text": "obviously the we talked about operations where we are really doing App Ops and not not not none at all on",
    "start": "3483240",
    "end": "3490079"
  },
  {
    "text": "infrastructure Ops so no servers no security patching none of that really uh matters security does matter so we are",
    "start": "3490079",
    "end": "3497480"
  },
  {
    "text": "actually uh doing security but again at the application Level at the API Gateway level uh and so on cost savings we are",
    "start": "3497480",
    "end": "3505640"
  },
  {
    "text": "getting huge cost savings because we have a very small devops team we're not managing six clusters or eight clusters",
    "start": "3505640",
    "end": "3511799"
  },
  {
    "text": "like I talked before if we had chosen a different architecture uh we don't have any servers so that's the beauty of this",
    "start": "3511799",
    "end": "3518720"
  },
  {
    "text": "uh if there is no data then if uh then we we are not any incurring any costs as",
    "start": "3518720",
    "end": "3524440"
  },
  {
    "text": "customers uh really are committing to their pipelines we will see more data coming in these lambas really kick in",
    "start": "3524440",
    "end": "3531920"
  },
  {
    "text": "and uh we we generate our results uh so it works really nicely basically in terms of how we have",
    "start": "3531920",
    "end": "3538359"
  },
  {
    "text": "designed the serverless architecture finally I just wanted to uh mention that",
    "start": "3538359",
    "end": "3543559"
  },
  {
    "text": "uh we are really impressed with what we have achieved we have done a lot of load testing next month we will be going live",
    "start": "3543559",
    "end": "3550000"
  },
  {
    "text": "with this service uh to to to do compliance checks in our devops Pipeline and we are looking at really building a",
    "start": "3550000",
    "end": "3556720"
  },
  {
    "text": "lot more additional Services based on our learnings from what we have done in the last 78 months uh of putting",
    "start": "3556720",
    "end": "3564359"
  },
  {
    "text": "together this architecture thank",
    "start": "3564359",
    "end": "3568318"
  },
  {
    "text": "you guys that's pretty much it I want to thank you all very much for sticking it",
    "start": "3572839",
    "end": "3577960"
  },
  {
    "text": "out past 5:00 pm. I know you have a pub crawl to get to these are a few related",
    "start": "3577960",
    "end": "3583400"
  },
  {
    "text": "sessions that I just wanted to point out around serverless Technologies we're going to be doing a repeat of this one",
    "start": "3583400",
    "end": "3588599"
  },
  {
    "text": "on Friday uh chalice is is a really good one it's our serverless python based web",
    "start": "3588599",
    "end": "3594920"
  },
  {
    "text": "framework that you can use to deploy web applications and there's also a workshop building a serverless application that I",
    "start": "3594920",
    "end": "3601799"
  },
  {
    "text": "would strongly recommend going to on Thursday at a couple of different times thank you very much please feel free to",
    "start": "3601799",
    "end": "3608280"
  },
  {
    "text": "complete your evaluations and if you have any questions we're going to hang around up here feel free to come on up",
    "start": "3608280",
    "end": "3613359"
  },
  {
    "text": "thank you [Applause]",
    "start": "3613359",
    "end": "3618420"
  }
]