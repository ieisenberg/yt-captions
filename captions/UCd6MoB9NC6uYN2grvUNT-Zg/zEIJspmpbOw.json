[
  {
    "start": "0",
    "end": "36000"
  },
  {
    "text": "as most of you already know Kaplan test",
    "start": "5540",
    "end": "8099"
  },
  {
    "text": "prep offers preparation for over 90",
    "start": "8099",
    "end": "11190"
  },
  {
    "text": "standardized tests like GMAT GRE MCAT",
    "start": "11190",
    "end": "14880"
  },
  {
    "text": "and other professional exams example",
    "start": "14880",
    "end": "18180"
  },
  {
    "text": "like a nursing exam or a bar exam our",
    "start": "18180",
    "end": "20880"
  },
  {
    "text": "entire platform is designed and targets",
    "start": "20880",
    "end": "23609"
  },
  {
    "text": "online education Kaplan test prep like",
    "start": "23609",
    "end": "26640"
  },
  {
    "text": "other large businesses has successfully",
    "start": "26640",
    "end": "28560"
  },
  {
    "text": "transitioned it from a primary",
    "start": "28560",
    "end": "30210"
  },
  {
    "text": "brick-and-mortar business to a digital",
    "start": "30210",
    "end": "32160"
  },
  {
    "text": "first business with micro services at",
    "start": "32160",
    "end": "35520"
  },
  {
    "text": "the core so our initial business",
    "start": "35520",
    "end": "38579"
  },
  {
    "start": "36000",
    "end": "56000"
  },
  {
    "text": "challenges were reduce time to market",
    "start": "38579",
    "end": "40770"
  },
  {
    "text": "for new products and features and reduce",
    "start": "40770",
    "end": "43739"
  },
  {
    "text": "IT infrastructure and operational costs",
    "start": "43739",
    "end": "46789"
  },
  {
    "text": "improve reliability and scalability of",
    "start": "46789",
    "end": "49530"
  },
  {
    "text": "our horror applications and also improve",
    "start": "49530",
    "end": "52829"
  },
  {
    "text": "engineers overall satisfaction and level",
    "start": "52829",
    "end": "55199"
  },
  {
    "text": "of happiness we had some architectural",
    "start": "55199",
    "end": "57510"
  },
  {
    "start": "56000",
    "end": "78000"
  },
  {
    "text": "challenges also we had large systems to",
    "start": "57510",
    "end": "60270"
  },
  {
    "text": "service ratio more system it was some",
    "start": "60270",
    "end": "62879"
  },
  {
    "text": "more operational overhead and manual",
    "start": "62879",
    "end": "65580"
  },
  {
    "text": "release processes no CI CDs and complex",
    "start": "65580",
    "end": "68909"
  },
  {
    "text": "scripts to maintain legacy monolithic",
    "start": "68909",
    "end": "71520"
  },
  {
    "text": "application and web services needed to",
    "start": "71520",
    "end": "73500"
  },
  {
    "text": "be transformed into infrastructure as a",
    "start": "73500",
    "end": "75479"
  },
  {
    "text": "code andrea architect along the way",
    "start": "75479",
    "end": "77900"
  },
  {
    "text": "previous state of our infrastructure was",
    "start": "77900",
    "end": "80790"
  },
  {
    "start": "78000",
    "end": "140000"
  },
  {
    "text": "complex AWS ec2 server farms maintained",
    "start": "80790",
    "end": "84150"
  },
  {
    "text": "manually code deployments involved four",
    "start": "84150",
    "end": "87150"
  },
  {
    "text": "people and took more than two hours on",
    "start": "87150",
    "end": "89579"
  },
  {
    "text": "average and high infrastructure",
    "start": "89579",
    "end": "91680"
  },
  {
    "text": "maintenance that require a lot of work",
    "start": "91680",
    "end": "93150"
  },
  {
    "text": "and we can't we we looked at different",
    "start": "93150",
    "end": "95460"
  },
  {
    "text": "platforms out there we look at that",
    "start": "95460",
    "end": "97320"
  },
  {
    "text": "Apache mesas we look at the kubernetes",
    "start": "97320",
    "end": "99240"
  },
  {
    "text": "and our decision was to go to build our",
    "start": "99240",
    "end": "102630"
  },
  {
    "text": "own orchestration service in-house and",
    "start": "102630",
    "end": "105119"
  },
  {
    "text": "our platform is Paul s SDR which is a",
    "start": "105119",
    "end": "109740"
  },
  {
    "text": "three tiered service scheduling",
    "start": "109740",
    "end": "111450"
  },
  {
    "text": "discovery and arriving platform",
    "start": "111450",
    "end": "113329"
  },
  {
    "text": "comprised of three node of console",
    "start": "113329",
    "end": "116009"
  },
  {
    "text": "server cluster console is a product from",
    "start": "116009",
    "end": "118380"
  },
  {
    "text": "a ship orb which is a key value store",
    "start": "118380",
    "end": "120840"
  },
  {
    "text": "and AWS ec2",
    "start": "120840",
    "end": "123240"
  },
  {
    "text": "container services and as a front-end",
    "start": "123240",
    "end": "126060"
  },
  {
    "text": "engineer nginx routing cluster each tier",
    "start": "126060",
    "end": "129090"
  },
  {
    "text": "fully usage auto-scaling groups",
    "start": "129090",
    "end": "132270"
  },
  {
    "text": "and is independent to each other so it",
    "start": "132270",
    "end": "134430"
  },
  {
    "text": "skills automatically and horizontally",
    "start": "134430",
    "end": "137490"
  },
  {
    "text": "and it scales down also and then the",
    "start": "137490",
    "end": "141180"
  },
  {
    "start": "140000",
    "end": "163000"
  },
  {
    "text": "reason of the why of the SS dr was there",
    "start": "141180",
    "end": "143580"
  },
  {
    "text": "was a need of orchestration which would",
    "start": "143580",
    "end": "145710"
  },
  {
    "text": "fit our needs and also is based on",
    "start": "145710",
    "end": "148410"
  },
  {
    "text": "CloudFormation capabilities as you guys",
    "start": "148410",
    "end": "150750"
  },
  {
    "text": "are aware we you can build like a json",
    "start": "150750",
    "end": "152930"
  },
  {
    "text": "template and send it to cloud formation",
    "start": "152930",
    "end": "155370"
  },
  {
    "text": "and cloud formation allows you to have",
    "start": "155370",
    "end": "157590"
  },
  {
    "text": "properties which have attributes so it's",
    "start": "157590",
    "end": "160110"
  },
  {
    "text": "easy to query your state of your",
    "start": "160110",
    "end": "161640"
  },
  {
    "text": "infrastructure at any time then pursue",
    "start": "161640",
    "end": "164130"
  },
  {
    "start": "163000",
    "end": "225000"
  },
  {
    "text": "people will store a global state of the",
    "start": "164130",
    "end": "165840"
  },
  {
    "text": "micro services the reason of counsel was",
    "start": "165840",
    "end": "167850"
  },
  {
    "text": "every time that a container comes alive",
    "start": "167850",
    "end": "170340"
  },
  {
    "text": "we want to save the state somewhere and",
    "start": "170340",
    "end": "173070"
  },
  {
    "text": "we are using registration which is an",
    "start": "173070",
    "end": "175290"
  },
  {
    "text": "open source service that as soon as the",
    "start": "175290",
    "end": "179580"
  },
  {
    "text": "service comes online it register itself",
    "start": "179580",
    "end": "182040"
  },
  {
    "text": "in council so if the service is on the",
    "start": "182040",
    "end": "184950"
  },
  {
    "text": "back end on ECS is skilling out and",
    "start": "184950",
    "end": "186930"
  },
  {
    "text": "scaling it it will be it will be added",
    "start": "186930",
    "end": "189180"
  },
  {
    "text": "automatically to console and it will be",
    "start": "189180",
    "end": "191220"
  },
  {
    "text": "it will be removed in base of load and",
    "start": "191220",
    "end": "193200"
  },
  {
    "text": "then at the end nginx for routing",
    "start": "193200",
    "end": "195420"
  },
  {
    "text": "customization and proxy we use console",
    "start": "195420",
    "end": "198150"
  },
  {
    "text": "template to dynamically update our nginx",
    "start": "198150",
    "end": "201720"
  },
  {
    "text": "servers and so to dynamically update our",
    "start": "201720",
    "end": "206220"
  },
  {
    "text": "internet service and the reason of nginx",
    "start": "206220",
    "end": "208110"
  },
  {
    "text": "on the front end of course there is a an",
    "start": "208110",
    "end": "210600"
  },
  {
    "text": "AWS load balancer was because we have",
    "start": "210600",
    "end": "213090"
  },
  {
    "text": "personalised header and we needed a",
    "start": "213090",
    "end": "214710"
  },
  {
    "text": "certain level of personalization which",
    "start": "214710",
    "end": "216410"
  },
  {
    "text": "in that specific case AWS load balancer",
    "start": "216410",
    "end": "220980"
  },
  {
    "text": "was not providing and nginx would do the",
    "start": "220980",
    "end": "224070"
  },
  {
    "text": "work for us now the SSD are key",
    "start": "224070",
    "end": "227160"
  },
  {
    "text": "components again our is based on cloud",
    "start": "227160",
    "end": "229470"
  },
  {
    "text": "formation so we generate CloudFormation",
    "start": "229470",
    "end": "231660"
  },
  {
    "text": "template and then we call AWS api to",
    "start": "231660",
    "end": "235530"
  },
  {
    "text": "build those template for us we use AWS",
    "start": "235530",
    "end": "238290"
  },
  {
    "text": "ec2 container services in we used to use",
    "start": "238290",
    "end": "241380"
  },
  {
    "text": "docker hub and then we move to ECR in",
    "start": "241380",
    "end": "244860"
  },
  {
    "text": "this case for the reason because we can",
    "start": "244860",
    "end": "246480"
  },
  {
    "text": "have control around our variables we can",
    "start": "246480",
    "end": "248760"
  },
  {
    "text": "apply policies and we know what images",
    "start": "248760",
    "end": "250890"
  },
  {
    "text": "are pushed around our environments and",
    "start": "250890",
    "end": "252630"
  },
  {
    "text": "then the container service that as many",
    "start": "252630",
    "end": "255030"
  },
  {
    "text": "of you guys know is orchestration based",
    "start": "255030",
    "end": "258500"
  },
  {
    "text": "AWS service which handles all the",
    "start": "258500",
    "end": "262680"
  },
  {
    "text": "visioning of containers and",
    "start": "262680",
    "end": "263910"
  },
  {
    "text": "orchestration of containers then the AWS",
    "start": "263910",
    "end": "267150"
  },
  {
    "text": "Identity and Access Management we have a",
    "start": "267150",
    "end": "269280"
  },
  {
    "text": "role when we push containers to our",
    "start": "269280",
    "end": "272370"
  },
  {
    "text": "platform each application in this case",
    "start": "272370",
    "end": "274350"
  },
  {
    "text": "is is dedicated to a specific team so in",
    "start": "274350",
    "end": "278699"
  },
  {
    "text": "each team has a specific role when they",
    "start": "278699",
    "end": "281160"
  },
  {
    "text": "provision the application the AWS key",
    "start": "281160",
    "end": "283860"
  },
  {
    "text": "management services the challenge for us",
    "start": "283860",
    "end": "286020"
  },
  {
    "text": "there was on encrypting and decrypting",
    "start": "286020",
    "end": "289130"
  },
  {
    "text": "data that we are passing to container so",
    "start": "289130",
    "end": "292110"
  },
  {
    "text": "what we did in here we leverage the kms",
    "start": "292110",
    "end": "294360"
  },
  {
    "text": "to generate keys private keys for per",
    "start": "294360",
    "end": "297930"
  },
  {
    "text": "team and every time that the container",
    "start": "297930",
    "end": "299910"
  },
  {
    "text": "starts during runtime or an application",
    "start": "299910",
    "end": "302280"
  },
  {
    "text": "start during runtime they can use to do",
    "start": "302280",
    "end": "304199"
  },
  {
    "text": "an encryption decryption to the AWS api",
    "start": "304199",
    "end": "306800"
  },
  {
    "text": "SSD are capabilities so we flip the",
    "start": "306800",
    "end": "309720"
  },
  {
    "start": "307000",
    "end": "394000"
  },
  {
    "text": "ratio of system to services from 3 to 1",
    "start": "309720",
    "end": "312300"
  },
  {
    "text": "to 1 to 15 so one platform for QA one",
    "start": "312300",
    "end": "316289"
  },
  {
    "text": "platform for staging and one platform",
    "start": "316289",
    "end": "318330"
  },
  {
    "text": "for production code deployments now",
    "start": "318330",
    "end": "320580"
  },
  {
    "text": "required one person and takes on average",
    "start": "320580",
    "end": "322490"
  },
  {
    "text": "less than five minutes and that depends",
    "start": "322490",
    "end": "324870"
  },
  {
    "text": "on the AWS API and cloud formation but",
    "start": "324870",
    "end": "327360"
  },
  {
    "text": "the average in our case has been around",
    "start": "327360",
    "end": "329970"
  },
  {
    "text": "2 minutes per application or per",
    "start": "329970",
    "end": "331919"
  },
  {
    "text": "container on AWS and we enable the",
    "start": "331919",
    "end": "334560"
  },
  {
    "text": "service for developers to push code to",
    "start": "334560",
    "end": "336630"
  },
  {
    "text": "QA stage and production our developers",
    "start": "336630",
    "end": "340820"
  },
  {
    "text": "don't know how our infrastructure is",
    "start": "340820",
    "end": "343289"
  },
  {
    "text": "designed and we have a tool that will be",
    "start": "343289",
    "end": "345180"
  },
  {
    "text": "introduced is soon that takes care of of",
    "start": "345180",
    "end": "348539"
  },
  {
    "text": "making that abstraction from Yama file",
    "start": "348539",
    "end": "351690"
  },
  {
    "text": "to to infrastructure as a code an",
    "start": "351690",
    "end": "353820"
  },
  {
    "text": "operational workload has diminished and",
    "start": "353820",
    "end": "356220"
  },
  {
    "text": "improved there these cycles the reason",
    "start": "356220",
    "end": "358229"
  },
  {
    "text": "of that is SSD are being a three-tier",
    "start": "358229",
    "end": "360680"
  },
  {
    "text": "platform nginx console and ECS it scales",
    "start": "360680",
    "end": "364860"
  },
  {
    "text": "out and it scales down automatically as",
    "start": "364860",
    "end": "367110"
  },
  {
    "text": "based on load and on ECS you can scale",
    "start": "367110",
    "end": "370770"
  },
  {
    "text": "out in in based on your cpu credits so",
    "start": "370770",
    "end": "373710"
  },
  {
    "text": "every time that you are provisioning",
    "start": "373710",
    "end": "375180"
  },
  {
    "text": "containers from your platform if you",
    "start": "375180",
    "end": "377280"
  },
  {
    "text": "allocate let's say a CPU of 200 and a",
    "start": "377280",
    "end": "380699"
  },
  {
    "text": "memory or 300 the system automatically",
    "start": "380699",
    "end": "383610"
  },
  {
    "text": "will see if there is enough CPU credits",
    "start": "383610",
    "end": "386190"
  },
  {
    "text": "on the platform and will add more",
    "start": "386190",
    "end": "387690"
  },
  {
    "text": "resources to it and this happened",
    "start": "387690",
    "end": "389789"
  },
  {
    "text": "automatically without an intervention",
    "start": "389789",
    "end": "391380"
  },
  {
    "text": "from the operational side or from the",
    "start": "391380",
    "end": "393240"
  },
  {
    "text": "engineering side the current state of",
    "start": "393240",
    "end": "395219"
  },
  {
    "start": "394000",
    "end": "508000"
  },
  {
    "text": "the infrastructure",
    "start": "395219",
    "end": "396400"
  },
  {
    "text": "so SSD RS goes up and down based on",
    "start": "396400",
    "end": "399220"
  },
  {
    "text": "usage demands again the CPU reservations",
    "start": "399220",
    "end": "401919"
  },
  {
    "text": "and CPU credits and SSD are manageable",
    "start": "401919",
    "end": "405580"
  },
  {
    "text": "via code and has full audit capabilities",
    "start": "405580",
    "end": "408009"
  },
  {
    "text": "we use github so all our code is pushed",
    "start": "408009",
    "end": "410770"
  },
  {
    "text": "and all PRS are approved before anything",
    "start": "410770",
    "end": "413830"
  },
  {
    "text": "being pushed between QA staging and and",
    "start": "413830",
    "end": "417759"
  },
  {
    "text": "production we don't have a dev",
    "start": "417759",
    "end": "419620"
  },
  {
    "text": "environment because all our developers",
    "start": "419620",
    "end": "421600"
  },
  {
    "text": "team are using containers and they are",
    "start": "421600",
    "end": "424240"
  },
  {
    "text": "using docker locally to test their their",
    "start": "424240",
    "end": "427419"
  },
  {
    "text": "patinas and once they are added we just",
    "start": "427419",
    "end": "429370"
  },
  {
    "text": "push them to QA",
    "start": "429370",
    "end": "430419"
  },
  {
    "text": "in this case and once QA passes push to",
    "start": "430419",
    "end": "433000"
  },
  {
    "text": "staging and so on and SSD are can be",
    "start": "433000",
    "end": "436210"
  },
  {
    "text": "updated and maintained through push",
    "start": "436210",
    "end": "437800"
  },
  {
    "text": "button deployments we we are a shut shop",
    "start": "437800",
    "end": "441729"
  },
  {
    "text": "so I would say and all we have an",
    "start": "441729",
    "end": "444130"
  },
  {
    "text": "imaging process for all the three tier",
    "start": "444130",
    "end": "446289"
  },
  {
    "text": "console is CSM nginx and we use our",
    "start": "446289",
    "end": "449620"
  },
  {
    "text": "SPECT and cucumber to do our testing",
    "start": "449620",
    "end": "451960"
  },
  {
    "text": "once an image is fully tested is tagged",
    "start": "451960",
    "end": "455080"
  },
  {
    "text": "with a version which that version can be",
    "start": "455080",
    "end": "457270"
  },
  {
    "text": "pushed to the SSD R and as you guys know",
    "start": "457270",
    "end": "459580"
  },
  {
    "text": "the capabilities of auto scaling group",
    "start": "459580",
    "end": "461530"
  },
  {
    "text": "is you push in a new image out there if",
    "start": "461530",
    "end": "464110"
  },
  {
    "text": "that image passes all the testing it is",
    "start": "464110",
    "end": "466810"
  },
  {
    "text": "successful if it is not it's gonna roll",
    "start": "466810",
    "end": "468669"
  },
  {
    "text": "back automatically so this is something",
    "start": "468669",
    "end": "470560"
  },
  {
    "text": "that is part of our platform but of",
    "start": "470560",
    "end": "472150"
  },
  {
    "text": "course has been provided by the auto",
    "start": "472150",
    "end": "473650"
  },
  {
    "text": "scaling groups and SSD our improves",
    "start": "473650",
    "end": "476320"
  },
  {
    "text": "application security by separation so in",
    "start": "476320",
    "end": "478900"
  },
  {
    "text": "our case we had a challenge because we",
    "start": "478900",
    "end": "480460"
  },
  {
    "text": "had application that we want it to be",
    "start": "480460",
    "end": "482260"
  },
  {
    "text": "internal an application that won't be",
    "start": "482260",
    "end": "484539"
  },
  {
    "text": "external but we couldn't have two",
    "start": "484539",
    "end": "487120"
  },
  {
    "text": "platforms one for internal and external",
    "start": "487120",
    "end": "488620"
  },
  {
    "text": "so what we did is our routing layer",
    "start": "488620",
    "end": "491500"
  },
  {
    "text": "nginx we divided it into Tier one",
    "start": "491500",
    "end": "493690"
  },
  {
    "text": "internal a one external and on front of",
    "start": "493690",
    "end": "496150"
  },
  {
    "text": "them we attached it an internal advance",
    "start": "496150",
    "end": "497740"
  },
  {
    "text": "an external all the back-end on the ECS",
    "start": "497740",
    "end": "500740"
  },
  {
    "text": "in this particular case all the",
    "start": "500740",
    "end": "502060"
  },
  {
    "text": "resources are shared so an application",
    "start": "502060",
    "end": "504070"
  },
  {
    "text": "if is internal external it doesn't",
    "start": "504070",
    "end": "505449"
  },
  {
    "text": "really matter it's just we do the",
    "start": "505449",
    "end": "506740"
  },
  {
    "text": "segmentation on ng next layer so the SSD",
    "start": "506740",
    "end": "509740"
  },
  {
    "start": "508000",
    "end": "552000"
  },
  {
    "text": "R is managed by the engineering team and",
    "start": "509740",
    "end": "512050"
  },
  {
    "text": "it's always they're up and running and",
    "start": "512050",
    "end": "513940"
  },
  {
    "text": "with all our cloud watcher alarm and",
    "start": "513940",
    "end": "516279"
  },
  {
    "text": "there was a need for our developers to",
    "start": "516279",
    "end": "518709"
  },
  {
    "text": "come up with a tool which they could",
    "start": "518709",
    "end": "520779"
  },
  {
    "text": "deploy you know their containers or",
    "start": "520779",
    "end": "522760"
  },
  {
    "text": "their services to into the in our case",
    "start": "522760",
    "end": "525579"
  },
  {
    "text": "on SSD R so we created a tool it's",
    "start": "525579",
    "end": "528250"
  },
  {
    "text": "called you deploys an internal name",
    "start": "528250",
    "end": "529779"
  },
  {
    "text": "so this doesn't have anything to do with",
    "start": "529779",
    "end": "531550"
  },
  {
    "text": "you deploy which is another tool out",
    "start": "531550",
    "end": "533829"
  },
  {
    "text": "there so you deploy act as a translation",
    "start": "533829",
    "end": "536319"
  },
  {
    "text": "layer between infrastructures are called",
    "start": "536319",
    "end": "538389"
  },
  {
    "text": "an SSD are allows define in SSD our",
    "start": "538389",
    "end": "541360"
  },
  {
    "text": "infrastructure using a declarative",
    "start": "541360",
    "end": "542769"
  },
  {
    "text": "language and uses the Ruby SDK to",
    "start": "542769",
    "end": "545680"
  },
  {
    "text": "generate traffic route formation JSON",
    "start": "545680",
    "end": "547600"
  },
  {
    "text": "templates and you deploy is adaptable",
    "start": "547600",
    "end": "550269"
  },
  {
    "text": "and flexible do it the dynamic nature of",
    "start": "550269",
    "end": "552129"
  },
  {
    "start": "552000",
    "end": "603000"
  },
  {
    "text": "Ruby now some of the you deploy features",
    "start": "552129",
    "end": "555279"
  },
  {
    "text": "are llamo configuration file describe in",
    "start": "555279",
    "end": "558459"
  },
  {
    "text": "your micro Service easier that the",
    "start": "558459",
    "end": "560319"
  },
  {
    "text": "adaptability of new AWS services when I",
    "start": "560319",
    "end": "563920"
  },
  {
    "text": "say new AWS services as soon as the AWS",
    "start": "563920",
    "end": "567040"
  },
  {
    "text": "service releases a new service and of",
    "start": "567040",
    "end": "570040"
  },
  {
    "text": "course is available for as a cloud",
    "start": "570040",
    "end": "571990"
  },
  {
    "text": "formation template is easy for us to get",
    "start": "571990",
    "end": "574990"
  },
  {
    "text": "that template translated into Ruby code",
    "start": "574990",
    "end": "579040"
  },
  {
    "text": "and allow developers to use that",
    "start": "579040",
    "end": "580809"
  },
  {
    "text": "immediately and then we have easy",
    "start": "580809",
    "end": "582790"
  },
  {
    "text": "worldwide deployments to multiple",
    "start": "582790",
    "end": "584620"
  },
  {
    "text": "regions so we can deploy from region US",
    "start": "584620",
    "end": "587740"
  },
  {
    "text": "East Coast or North California and we",
    "start": "587740",
    "end": "590199"
  },
  {
    "text": "just need to do just a switch of a",
    "start": "590199",
    "end": "591819"
  },
  {
    "text": "region and repeatability of your",
    "start": "591819",
    "end": "593949"
  },
  {
    "text": "infrastructure we can repeat this",
    "start": "593949",
    "end": "595389"
  },
  {
    "text": "process and time or we can reuse the",
    "start": "595389",
    "end": "598509"
  },
  {
    "text": "same code you know for for for the same",
    "start": "598509",
    "end": "601839"
  },
  {
    "text": "you know scope this is an workflow about",
    "start": "601839",
    "end": "605110"
  },
  {
    "start": "603000",
    "end": "821000"
  },
  {
    "text": "you deploy so if I'm a developer and I",
    "start": "605110",
    "end": "607779"
  },
  {
    "text": "want to deploy something on our so their",
    "start": "607779",
    "end": "609639"
  },
  {
    "text": "platform I don't want to know how our",
    "start": "609639",
    "end": "611769"
  },
  {
    "text": "platform is designed i don't also know",
    "start": "611769",
    "end": "613660"
  },
  {
    "text": "how the infrastructure including VPC",
    "start": "613660",
    "end": "616660"
  },
  {
    "text": "subnets private-public is designed to my",
    "start": "616660",
    "end": "619389"
  },
  {
    "text": "ws so when a developer comes to us it",
    "start": "619389",
    "end": "621819"
  },
  {
    "text": "says we want to deploy something to QA",
    "start": "621819",
    "end": "624100"
  },
  {
    "text": "they are free to do it at any time",
    "start": "624100",
    "end": "626559"
  },
  {
    "text": "without an intervention from the",
    "start": "626559",
    "end": "628389"
  },
  {
    "text": "operational side our engineering team",
    "start": "628389",
    "end": "629889"
  },
  {
    "text": "and all they have to do is fill out the",
    "start": "629889",
    "end": "632259"
  },
  {
    "text": "Yama file definition which you require",
    "start": "632259",
    "end": "634929"
  },
  {
    "text": "certain information and in this case",
    "start": "634929",
    "end": "636850"
  },
  {
    "text": "I'll be going over let's say we have a",
    "start": "636850",
    "end": "639009"
  },
  {
    "text": "matter definition which identifies the",
    "start": "639009",
    "end": "641439"
  },
  {
    "text": "team name the version and the suite",
    "start": "641439",
    "end": "644350"
  },
  {
    "text": "description deployment we support",
    "start": "644350",
    "end": "646540"
  },
  {
    "text": "currently rolling deployments and blue",
    "start": "646540",
    "end": "648429"
  },
  {
    "text": "and green deployments on the SSD our",
    "start": "648429",
    "end": "649809"
  },
  {
    "text": "platform we are looking on Cannery",
    "start": "649809",
    "end": "652509"
  },
  {
    "text": "deployments that will be a new future on",
    "start": "652509",
    "end": "654339"
  },
  {
    "text": "the next few weeks and then if I go",
    "start": "654339",
    "end": "656889"
  },
  {
    "text": "under there is a definition for",
    "start": "656889",
    "end": "659050"
  },
  {
    "text": "container so in this case my container",
    "start": "659050",
    "end": "661300"
  },
  {
    "text": "is called hello",
    "start": "661300",
    "end": "662980"
  },
  {
    "text": "and it has an axis when I say axis I was",
    "start": "662980",
    "end": "666100"
  },
  {
    "text": "talking earlier about internal external",
    "start": "666100",
    "end": "667810"
  },
  {
    "text": "routing in here I can define if my",
    "start": "667810",
    "end": "670240"
  },
  {
    "text": "application needs to be internal to the",
    "start": "670240",
    "end": "671860"
  },
  {
    "text": "corporate net Network or external to the",
    "start": "671860",
    "end": "674440"
  },
  {
    "text": "network and the developer can has two",
    "start": "674440",
    "end": "677260"
  },
  {
    "text": "options internal or external and then",
    "start": "677260",
    "end": "678880"
  },
  {
    "text": "the docker image in this case is a hello",
    "start": "678880",
    "end": "681459"
  },
  {
    "text": "world and also the next part is a port",
    "start": "681459",
    "end": "685779"
  },
  {
    "text": "as you guys know it's container unit it",
    "start": "685779",
    "end": "688120"
  },
  {
    "text": "has a port for us it doesn't really",
    "start": "688120",
    "end": "691089"
  },
  {
    "text": "matter on what language or features that",
    "start": "691089",
    "end": "693670"
  },
  {
    "text": "you are pushing inside your container",
    "start": "693670",
    "end": "695500"
  },
  {
    "text": "you are free to use inside of a",
    "start": "695500",
    "end": "697570"
  },
  {
    "text": "container Ruby Java C++ any language",
    "start": "697570",
    "end": "700089"
  },
  {
    "text": "that you are familiar all we are",
    "start": "700089",
    "end": "701950"
  },
  {
    "text": "interested about having a container and",
    "start": "701950",
    "end": "703690"
  },
  {
    "text": "image and a port so we can take the",
    "start": "703690",
    "end": "705970"
  },
  {
    "text": "container and push it out there for you",
    "start": "705970",
    "end": "708300"
  },
  {
    "text": "then the next part is the docker",
    "start": "708300",
    "end": "710320"
  },
  {
    "text": "registry so as I was mentioning we're",
    "start": "710320",
    "end": "712089"
  },
  {
    "text": "using ECR because we can apply policies",
    "start": "712089",
    "end": "714610"
  },
  {
    "text": "and we want to keep track of all our",
    "start": "714610",
    "end": "715990"
  },
  {
    "text": "images and it was challenging for us to",
    "start": "715990",
    "end": "718779"
  },
  {
    "text": "have everything on docker hub so we",
    "start": "718779",
    "end": "720490"
  },
  {
    "text": "moved everything into ECR and then image",
    "start": "720490",
    "end": "722709"
  },
  {
    "text": "tag in this case an image tag when you",
    "start": "722709",
    "end": "725290"
  },
  {
    "text": "push in an image you you deploy it",
    "start": "725290",
    "end": "729100"
  },
  {
    "text": "supports rolling updates or bluey-green",
    "start": "729100",
    "end": "731339"
  },
  {
    "text": "deployments in that case if you're doing",
    "start": "731339",
    "end": "733839"
  },
  {
    "text": "a blue in green deployments you'll be",
    "start": "733839",
    "end": "735040"
  },
  {
    "text": "pushing two different versions or two",
    "start": "735040",
    "end": "737890"
  },
  {
    "text": "different images with two different tags",
    "start": "737890",
    "end": "739510"
  },
  {
    "text": "and then every time you'll be pulling",
    "start": "739510",
    "end": "741339"
  },
  {
    "text": "our tool you deploy and it will do the",
    "start": "741339",
    "end": "743110"
  },
  {
    "text": "flip there is an advantage there because",
    "start": "743110",
    "end": "745329"
  },
  {
    "text": "when we do a blue-green deployment a lot",
    "start": "745329",
    "end": "747700"
  },
  {
    "text": "of people have challenges about TTL in",
    "start": "747700",
    "end": "750040"
  },
  {
    "text": "this case there is no TTL because what",
    "start": "750040",
    "end": "752529"
  },
  {
    "text": "we do is the front door is just there is",
    "start": "752529",
    "end": "755290"
  },
  {
    "text": "one load bouncer so when we are flipping",
    "start": "755290",
    "end": "757930"
  },
  {
    "text": "we're just taking those containers",
    "start": "757930",
    "end": "759399"
  },
  {
    "text": "they're registering them from the",
    "start": "759399",
    "end": "761290"
  },
  {
    "text": "internal nginx and moving it to the",
    "start": "761290",
    "end": "763450"
  },
  {
    "text": "other one so if there are users there",
    "start": "763450",
    "end": "765610"
  },
  {
    "text": "you know they'll go all the new user",
    "start": "765610",
    "end": "767470"
  },
  {
    "text": "don't come on top automatically to the",
    "start": "767470",
    "end": "769120"
  },
  {
    "text": "audible bouncer or in this case if",
    "start": "769120",
    "end": "771640"
  },
  {
    "text": "you're flipping from blue and green is",
    "start": "771640",
    "end": "773410"
  },
  {
    "text": "the same there is not there is actually",
    "start": "773410",
    "end": "775570"
  },
  {
    "text": "no DNS change so the DNS is always one",
    "start": "775570",
    "end": "778300"
  },
  {
    "text": "load bouncer and then we have a lag log",
    "start": "778300",
    "end": "780940"
  },
  {
    "text": "var folder this is to output all the",
    "start": "780940",
    "end": "783130"
  },
  {
    "text": "logs in the container we this is an an",
    "start": "783130",
    "end": "787390"
  },
  {
    "text": "old implementation of it we we we not",
    "start": "787390",
    "end": "790900"
  },
  {
    "text": "output in any more logs",
    "start": "790900",
    "end": "792610"
  },
  {
    "text": "log entry has an agent that you can",
    "start": "792610",
    "end": "794949"
  },
  {
    "text": "deploy on your ECS if",
    "start": "794949",
    "end": "796520"
  },
  {
    "text": "structure that can listen to the docker",
    "start": "796520",
    "end": "798530"
  },
  {
    "text": "socket and every time a container is is",
    "start": "798530",
    "end": "801860"
  },
  {
    "text": "out putting anything on a CD error or",
    "start": "801860",
    "end": "804170"
  },
  {
    "text": "SED out it will automatically be sent to",
    "start": "804170",
    "end": "806930"
  },
  {
    "text": "log entry so it was it was a it was a",
    "start": "806930",
    "end": "809870"
  },
  {
    "text": "big thing for us because we didn't have",
    "start": "809870",
    "end": "811490"
  },
  {
    "text": "to keep logs locally or rotate logs so",
    "start": "811490",
    "end": "814670"
  },
  {
    "text": "in real time every time when a container",
    "start": "814670",
    "end": "816530"
  },
  {
    "text": "is pushed on our platform the logs that",
    "start": "816530",
    "end": "818600"
  },
  {
    "text": "are being outputted are being sent out",
    "start": "818600",
    "end": "820370"
  },
  {
    "text": "on athlete to log entry then the next",
    "start": "820370",
    "end": "822560"
  },
  {
    "start": "821000",
    "end": "1221000"
  },
  {
    "text": "part is the platform so right now we",
    "start": "822560",
    "end": "824270"
  },
  {
    "text": "support Linux we are working on",
    "start": "824270",
    "end": "826630"
  },
  {
    "text": "supporting Windows on the next release",
    "start": "826630",
    "end": "828710"
  },
  {
    "text": "of our SSD our platform and then we have",
    "start": "828710",
    "end": "831380"
  },
  {
    "text": "environment variables the developer here",
    "start": "831380",
    "end": "833330"
  },
  {
    "text": "is free to define as many environment",
    "start": "833330",
    "end": "835760"
  },
  {
    "text": "variables as they want with their",
    "start": "835760",
    "end": "837410"
  },
  {
    "text": "container then next part is a domain URL",
    "start": "837410",
    "end": "840050"
  },
  {
    "text": "so what we did here is we didn't want",
    "start": "840050",
    "end": "843050"
  },
  {
    "text": "every time that we push the container we",
    "start": "843050",
    "end": "845270"
  },
  {
    "text": "didn't want to go and just create a DNS",
    "start": "845270",
    "end": "846950"
  },
  {
    "text": "record on route 53 so we are asking the",
    "start": "846950",
    "end": "849230"
  },
  {
    "text": "developer here what is the DNS that the",
    "start": "849230",
    "end": "851690"
  },
  {
    "text": "DNS name that you want this DMS that is",
    "start": "851690",
    "end": "854180"
  },
  {
    "text": "been inputted here you deploy once the",
    "start": "854180",
    "end": "857180"
  },
  {
    "text": "container comes alive only once it comes",
    "start": "857180",
    "end": "859400"
  },
  {
    "text": "alive it will go to route 53 and say can",
    "start": "859400",
    "end": "861830"
  },
  {
    "text": "you create me a DNS record and point to",
    "start": "861830",
    "end": "863600"
  },
  {
    "text": "a specific load balancer and this",
    "start": "863600",
    "end": "865250"
  },
  {
    "text": "happens automatically and transparently",
    "start": "865250",
    "end": "867020"
  },
  {
    "text": "without any intervention or without any",
    "start": "867020",
    "end": "869330"
  },
  {
    "text": "request or help that's ticket the next",
    "start": "869330",
    "end": "871490"
  },
  {
    "text": "part is there is a update DNS which we",
    "start": "871490",
    "end": "874610"
  },
  {
    "text": "give the opportunity developers to",
    "start": "874610",
    "end": "876110"
  },
  {
    "text": "update the DNS record always through the",
    "start": "876110",
    "end": "878450"
  },
  {
    "text": "Yama file and then forces a cell so I",
    "start": "878450",
    "end": "881390"
  },
  {
    "text": "was mentioning nginx so as you guys know",
    "start": "881390",
    "end": "885310"
  },
  {
    "text": "on load balancer you can attach one SSL",
    "start": "885310",
    "end": "888980"
  },
  {
    "text": "cert per load balancer but we have",
    "start": "888980",
    "end": "890930"
  },
  {
    "text": "multiple domains so in our case we are",
    "start": "890930",
    "end": "893600"
  },
  {
    "text": "terminating all the SSL on nginx so when",
    "start": "893600",
    "end": "897350"
  },
  {
    "text": "it comes over so we can leverage one",
    "start": "897350",
    "end": "898970"
  },
  {
    "text": "load balancer and the challenge there is",
    "start": "898970",
    "end": "901130"
  },
  {
    "text": "if you have an hundred services you have",
    "start": "901130",
    "end": "903620"
  },
  {
    "text": "to have 100 load balancer which is kind",
    "start": "903620",
    "end": "905750"
  },
  {
    "text": "expensive why not just using one of the",
    "start": "905750",
    "end": "907820"
  },
  {
    "text": "balancer as an entrance point and then",
    "start": "907820",
    "end": "909680"
  },
  {
    "text": "you terminate the SSL on nginx and",
    "start": "909680",
    "end": "912640"
  },
  {
    "text": "that's the option to force SSL so it",
    "start": "912640",
    "end": "915260"
  },
  {
    "text": "will force as a cell for the container",
    "start": "915260",
    "end": "916640"
  },
  {
    "text": "so if I'm a developer and I want to push",
    "start": "916640",
    "end": "918320"
  },
  {
    "text": "a container it needs to be HTTP I can",
    "start": "918320",
    "end": "920660"
  },
  {
    "text": "just say yes true or false or if he",
    "start": "920660",
    "end": "923420"
  },
  {
    "text": "wants to be if we need to make it only",
    "start": "923420",
    "end": "925790"
  },
  {
    "text": "HTTPS then you'll put true and then the",
    "start": "925790",
    "end": "929240"
  },
  {
    "text": "resources there is",
    "start": "929240",
    "end": "930180"
  },
  {
    "text": "as part is very important and we have",
    "start": "930180",
    "end": "931770"
  },
  {
    "text": "this habit every time that we push",
    "start": "931770",
    "end": "933620"
  },
  {
    "text": "containers to QA or staging or",
    "start": "933620",
    "end": "936899"
  },
  {
    "text": "production it's very important that we",
    "start": "936899",
    "end": "938399"
  },
  {
    "text": "run low tests our platform automatically",
    "start": "938399",
    "end": "942060"
  },
  {
    "text": "leveraging placement strategies on ECS",
    "start": "942060",
    "end": "945390"
  },
  {
    "text": "skills out container based in load so",
    "start": "945390",
    "end": "948720"
  },
  {
    "text": "based on load so what happened here is",
    "start": "948720",
    "end": "950850"
  },
  {
    "text": "once you predefined the CPU and memory",
    "start": "950850",
    "end": "953790"
  },
  {
    "text": "100 200 on the back hand when we set the",
    "start": "953790",
    "end": "956910"
  },
  {
    "text": "placement strategies we automate",
    "start": "956910",
    "end": "958770"
  },
  {
    "text": "automatically scale the containers from",
    "start": "958770",
    "end": "960870"
  },
  {
    "text": "at least three containers up to twelve",
    "start": "960870",
    "end": "962940"
  },
  {
    "text": "containers and we ran some intensive",
    "start": "962940",
    "end": "965339"
  },
  {
    "text": "load tests to see how this how this will",
    "start": "965339",
    "end": "968279"
  },
  {
    "text": "perform and what we notice is it was all",
    "start": "968279",
    "end": "971100"
  },
  {
    "text": "up to EC s so when the containers will",
    "start": "971100",
    "end": "974430"
  },
  {
    "text": "be hitting a certain CPU memory",
    "start": "974430",
    "end": "976260"
  },
  {
    "text": "ECS will kick in and will add more more",
    "start": "976260",
    "end": "978630"
  },
  {
    "text": "containers as it needed and it will",
    "start": "978630",
    "end": "980459"
  },
  {
    "text": "scale back and it does this",
    "start": "980459",
    "end": "981930"
  },
  {
    "text": "automatically without an intervention if",
    "start": "981930",
    "end": "984270"
  },
  {
    "text": "during the day we are let's say we",
    "start": "984270",
    "end": "986550"
  },
  {
    "text": "having a test and we have a 10,000",
    "start": "986550",
    "end": "988589"
  },
  {
    "text": "students the system automatically will",
    "start": "988589",
    "end": "991080"
  },
  {
    "text": "add the resources on the ACS layer",
    "start": "991080",
    "end": "993000"
  },
  {
    "text": "because of the CPU reservation and in",
    "start": "993000",
    "end": "995160"
  },
  {
    "text": "here you to see the containers that are",
    "start": "995160",
    "end": "996570"
  },
  {
    "text": "each in the max in this case is a soft",
    "start": "996570",
    "end": "998820"
  },
  {
    "text": "limit CPU will add more containers",
    "start": "998820",
    "end": "1000770"
  },
  {
    "text": "automatically and once the test is done",
    "start": "1000770",
    "end": "1002720"
  },
  {
    "text": "the system in the in the in this case",
    "start": "1002720",
    "end": "1004940"
  },
  {
    "text": "the task scheduler on ECS there is the",
    "start": "1004940",
    "end": "1007760"
  },
  {
    "text": "concept of a service and tasks so each",
    "start": "1007760",
    "end": "1010130"
  },
  {
    "text": "task is a container in this case the ECS",
    "start": "1010130",
    "end": "1012650"
  },
  {
    "text": "will will terminate those containers and",
    "start": "1012650",
    "end": "1015410"
  },
  {
    "text": "at the same time on the backend that",
    "start": "1015410",
    "end": "1017510"
  },
  {
    "text": "auto scaling group will remove this ec2",
    "start": "1017510",
    "end": "1019700"
  },
  {
    "text": "instances that are not needed anymore",
    "start": "1019700",
    "end": "1021290"
  },
  {
    "text": "because there is no need for that load",
    "start": "1021290",
    "end": "1022760"
  },
  {
    "text": "all those behavior or patterns they",
    "start": "1022760",
    "end": "1025250"
  },
  {
    "text": "happen automatically so for us is just",
    "start": "1025250",
    "end": "1027438"
  },
  {
    "text": "more a learning experience on observing",
    "start": "1027439",
    "end": "1029240"
  },
  {
    "text": "how our platform is you know I'll say",
    "start": "1029240",
    "end": "1032089"
  },
  {
    "text": "elastic with load with resourcing cost",
    "start": "1032089",
    "end": "1034579"
  },
  {
    "text": "so is it's been pretty I will say pretty",
    "start": "1034579",
    "end": "1038120"
  },
  {
    "text": "stable so far and the next one is health",
    "start": "1038120",
    "end": "1041780"
  },
  {
    "text": "checks so health checks is we have",
    "start": "1041780",
    "end": "1044150"
  },
  {
    "text": "standards in terms of health checks when",
    "start": "1044150",
    "end": "1045770"
  },
  {
    "text": "a container comes online we ran some",
    "start": "1045770",
    "end": "1049040"
  },
  {
    "text": "health checks and we leveraged console",
    "start": "1049040",
    "end": "1050929"
  },
  {
    "text": "to do that for us if a container is not",
    "start": "1050929",
    "end": "1054020"
  },
  {
    "text": "returning healthy what console will do",
    "start": "1054020",
    "end": "1056690"
  },
  {
    "text": "it will mark it as down and then we'll",
    "start": "1056690",
    "end": "1059120"
  },
  {
    "text": "notify nginx and say your upstream now",
    "start": "1059120",
    "end": "1061700"
  },
  {
    "text": "you had four containers",
    "start": "1061700",
    "end": "1063490"
  },
  {
    "text": "one is down there are three and Don ng",
    "start": "1063490",
    "end": "1065890"
  },
  {
    "text": "next to achieve this instead of",
    "start": "1065890",
    "end": "1067450"
  },
  {
    "text": "restarting it we do a reload doing a",
    "start": "1067450",
    "end": "1069880"
  },
  {
    "text": "restart and nginx is much expensive than",
    "start": "1069880",
    "end": "1071860"
  },
  {
    "text": "doing a reload and if there is any",
    "start": "1071860",
    "end": "1073809"
  },
  {
    "text": "configuration changes or issue the",
    "start": "1073809",
    "end": "1075549"
  },
  {
    "text": "reload will fail and will be notified",
    "start": "1075549",
    "end": "1077470"
  },
  {
    "text": "that that's specifically load on nginx",
    "start": "1077470",
    "end": "1079240"
  },
  {
    "text": "you know didn't go through then the last",
    "start": "1079240",
    "end": "1081789"
  },
  {
    "text": "part is at a scroll which is very",
    "start": "1081789",
    "end": "1083770"
  },
  {
    "text": "important each of our teams they have a",
    "start": "1083770",
    "end": "1085750"
  },
  {
    "text": "specific role on AWS which in this",
    "start": "1085750",
    "end": "1088299"
  },
  {
    "text": "particular case will focus on the KMS",
    "start": "1088299",
    "end": "1090490"
  },
  {
    "text": "and with each role we assigned a KMS key",
    "start": "1090490",
    "end": "1094090"
  },
  {
    "text": "so if I'm a developer and I want to pass",
    "start": "1094090",
    "end": "1097120"
  },
  {
    "text": "environmental variables in there and I",
    "start": "1097120",
    "end": "1099190"
  },
  {
    "text": "want to encrypt them we have a",
    "start": "1099190",
    "end": "1100539"
  },
  {
    "text": "functionality on the tool that you can",
    "start": "1100539",
    "end": "1102880"
  },
  {
    "text": "type the pastor's on the yellow file and",
    "start": "1102880",
    "end": "1104770"
  },
  {
    "text": "when you call our tool our to leverage",
    "start": "1104770",
    "end": "1107799"
  },
  {
    "text": "your role will call KMS and do an",
    "start": "1107799",
    "end": "1110140"
  },
  {
    "text": "encryption on those key on those values",
    "start": "1110140",
    "end": "1111970"
  },
  {
    "text": "and this happened out to met with the",
    "start": "1111970",
    "end": "1113740"
  },
  {
    "text": "developer the challenge there is we",
    "start": "1113740",
    "end": "1116260"
  },
  {
    "text": "encrypt everything but they don't have",
    "start": "1116260",
    "end": "1119409"
  },
  {
    "text": "the permission to decrypt so once those",
    "start": "1119409",
    "end": "1121570"
  },
  {
    "text": "environment available for docker are",
    "start": "1121570",
    "end": "1123220"
  },
  {
    "text": "encrypted and are passing the container",
    "start": "1123220",
    "end": "1125080"
  },
  {
    "text": "we have another tool inside the",
    "start": "1125080",
    "end": "1127029"
  },
  {
    "text": "container which goes calls kms s say can",
    "start": "1127029",
    "end": "1130090"
  },
  {
    "text": "you decrypt this specific password or",
    "start": "1130090",
    "end": "1132460"
  },
  {
    "text": "this ski for me",
    "start": "1132460",
    "end": "1133450"
  },
  {
    "text": "using their their key that is dedicated",
    "start": "1133450",
    "end": "1135640"
  },
  {
    "text": "to them in kms so we have different keys",
    "start": "1135640",
    "end": "1137559"
  },
  {
    "text": "irritations on keys on kms we planning",
    "start": "1137559",
    "end": "1140470"
  },
  {
    "text": "on looking at HSN to switch the private",
    "start": "1140470",
    "end": "1142659"
  },
  {
    "text": "keys to an appliance solution now what",
    "start": "1142659",
    "end": "1145600"
  },
  {
    "text": "happened is once my Yama file is is",
    "start": "1145600",
    "end": "1147669"
  },
  {
    "text": "completed we take that Yama file we",
    "start": "1147669",
    "end": "1150549"
  },
  {
    "text": "leverage Ruby and we generate the",
    "start": "1150549",
    "end": "1152350"
  },
  {
    "text": "CloudFormation template and then we send",
    "start": "1152350",
    "end": "1155409"
  },
  {
    "text": "the template to cloud formation and",
    "start": "1155409",
    "end": "1157149"
  },
  {
    "text": "cloud formation and the way the template",
    "start": "1157149",
    "end": "1159610"
  },
  {
    "text": "is built provisions automatically all",
    "start": "1159610",
    "end": "1162039"
  },
  {
    "text": "those resources on ours as they are",
    "start": "1162039",
    "end": "1163990"
  },
  {
    "text": "platform everything happen automatically",
    "start": "1163990",
    "end": "1165909"
  },
  {
    "text": "as soon as the container or service is",
    "start": "1165909",
    "end": "1168429"
  },
  {
    "text": "created on the ECS that service is",
    "start": "1168429",
    "end": "1171250"
  },
  {
    "text": "reported to nginx and upstream and a",
    "start": "1171250",
    "end": "1173260"
  },
  {
    "text": "virtual server energy next is",
    "start": "1173260",
    "end": "1174370"
  },
  {
    "text": "dynamically added and also on the route",
    "start": "1174370",
    "end": "1177340"
  },
  {
    "text": "53 part is the DNS record as you seen on",
    "start": "1177340",
    "end": "1179830"
  },
  {
    "text": "the previous slide is added automatic so",
    "start": "1179830",
    "end": "1182289"
  },
  {
    "text": "the the developer is you know has this",
    "start": "1182289",
    "end": "1184899"
  },
  {
    "text": "abstraction just a yama definition and",
    "start": "1184899",
    "end": "1187240"
  },
  {
    "text": "then they do not have to worry with this",
    "start": "1187240",
    "end": "1189279"
  },
  {
    "text": "process we are able to deploy the",
    "start": "1189279",
    "end": "1192100"
  },
  {
    "text": "average of cloud formation is less than",
    "start": "1192100",
    "end": "1193870"
  },
  {
    "text": "2 minutes per service we can do almost",
    "start": "1193870",
    "end": "1196059"
  },
  {
    "text": "20",
    "start": "1196059",
    "end": "1196840"
  },
  {
    "text": "as per our per application per team",
    "start": "1196840",
    "end": "1198669"
  },
  {
    "text": "independently so you deploy + SSD are",
    "start": "1198669",
    "end": "1201850"
  },
  {
    "text": "enabled us to provide this service",
    "start": "1201850",
    "end": "1203799"
  },
  {
    "text": "infrastructure which is cost effective",
    "start": "1203799",
    "end": "1206289"
  },
  {
    "text": "easy deployments and repeatable",
    "start": "1206289",
    "end": "1208929"
  },
  {
    "text": "processes so thank you thank you all for",
    "start": "1208929",
    "end": "1212049"
  },
  {
    "text": "being here and I hope everything goes",
    "start": "1212049",
    "end": "1213760"
  },
  {
    "text": "history",
    "start": "1213760",
    "end": "1216150"
  },
  {
    "text": "[Music]",
    "start": "1218890",
    "end": "1222289"
  }
]