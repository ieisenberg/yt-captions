[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "again I'd like to welcome everybody to today's webinar continuous delivery to Amazon ECS our presenter for today is",
    "start": "1000",
    "end": "7520"
  },
  {
    "text": "Jeremy Cohen Jeremy is currently a Solutions architect at AWS where he",
    "start": "7520",
    "end": "12759"
  },
  {
    "text": "specializes in container and directory services with over 20 years of Industry",
    "start": "12759",
    "end": "17880"
  },
  {
    "text": "experience Jeremy comes to AWS after having worked for VMware Microsoft and",
    "start": "17880",
    "end": "24640"
  },
  {
    "text": "IBM today with us we also have drew Dennis and Danielle stopa they're going",
    "start": "24640",
    "end": "30599"
  },
  {
    "text": "to be our webinar moderators today we'll be engaging with you and answer your questions through the Q&A panel Jeremy",
    "start": "30599",
    "end": "37719"
  },
  {
    "text": "at this time I like to welcome you and the floor is yours great thanks Jerry appreciate the",
    "start": "37719",
    "end": "44960"
  },
  {
    "text": "introduction welcome to this AWS webinar on continuous delivery to the Amazon ec2",
    "start": "44960",
    "end": "51520"
  },
  {
    "text": "container service my name is Jeremy Callen and as Jerry said I'm a Solutions architect at AWS for the next hour or so",
    "start": "51520",
    "end": "59000"
  },
  {
    "text": "we're going to be talking about the virtues of containers the different stages of the software development life",
    "start": "59000",
    "end": "64600"
  },
  {
    "text": "cycle and how you can automatically build test and deploy your containers",
    "start": "64600",
    "end": "69640"
  },
  {
    "text": "onto ECS so let's start by looking at continuous",
    "start": "69640",
    "end": "74759"
  },
  {
    "start": "70000",
    "end": "70000"
  },
  {
    "text": "delivery continuous delivery is a software development practice where code changes are automatically built tested",
    "start": "74759",
    "end": "82079"
  },
  {
    "text": "and prepared for a release to production it expands upon continuous integration",
    "start": "82079",
    "end": "87200"
  },
  {
    "text": "by deploying all code changes to a testing environment after the build stage when continuous delivery is",
    "start": "87200",
    "end": "93520"
  },
  {
    "text": "implemented properly developers will always have a Deployable build artifact that's undergone a battery of tests with",
    "start": "93520",
    "end": "101000"
  },
  {
    "text": "continuous delivery every code change is built and then pushed to a test environment there could be multiple",
    "start": "101000",
    "end": "107600"
  },
  {
    "text": "parallel test test stages before a production deployment occurs after which the developer assesses the code's",
    "start": "107600",
    "end": "114360"
  },
  {
    "text": "Readiness for production and decides whether the update ought to be pushed",
    "start": "114360",
    "end": "119520"
  },
  {
    "text": "now this is slightly different from continuous deployment where the push to production happens automatically without",
    "start": "119520",
    "end": "125439"
  },
  {
    "text": "explicit approval from the developer continuous delivery lets developers automate testing Beyond just",
    "start": "125439",
    "end": "132040"
  },
  {
    "text": "unit tests so they can verify application updates across multiple Dimensions before deploying them to a",
    "start": "132040",
    "end": "137879"
  },
  {
    "text": "production environment these tests may include UI testing load testing",
    "start": "137879",
    "end": "143599"
  },
  {
    "text": "integration testing API reliability testing and so forth all of these tests",
    "start": "143599",
    "end": "149959"
  },
  {
    "text": "help developers discover and remediate issues in the development cycle with the cloud it's easy and cost effective to",
    "start": "149959",
    "end": "156640"
  },
  {
    "text": "automate the creation and replication of multiple environments for testing this is often times challenging or cost",
    "start": "156640",
    "end": "163159"
  },
  {
    "text": "prohibitive to do so on premises now a lot of you are probably",
    "start": "163159",
    "end": "168840"
  },
  {
    "start": "166000",
    "end": "166000"
  },
  {
    "text": "familiar with the virtues of using containers but here's a quick summary of why they've become so popular containers",
    "start": "168840",
    "end": "175400"
  },
  {
    "text": "are similar to server virtualization like ec2 however instead of of partitioning the machine into multiple",
    "start": "175400",
    "end": "181879"
  },
  {
    "text": "VMS containers isolate the processes running on a single operating system",
    "start": "181879",
    "end": "187599"
  },
  {
    "text": "containers are portable too in that they can run on different operating systems without modification and because the container",
    "start": "187599",
    "end": "194400"
  },
  {
    "text": "image is consistent and immutable across environments you can move containers from your desktop to production with",
    "start": "194400",
    "end": "201959"
  },
  {
    "text": "relative ease containers also start quickly because the operating system is already running however simply saying",
    "start": "201959",
    "end": "208400"
  },
  {
    "text": "containers are fast or doing them disservice they also accelerate the development process as we'll soon see",
    "start": "208400",
    "end": "214959"
  },
  {
    "text": "you finally containers are efficient in that you can specifically allocate the resources necessary to run your",
    "start": "214959",
    "end": "221200"
  },
  {
    "text": "processes and since containers share the same OS kernel and libraries containers",
    "start": "221200",
    "end": "226239"
  },
  {
    "text": "use less resources than running the same process on different virtual",
    "start": "226239",
    "end": "232120"
  },
  {
    "start": "231000",
    "end": "231000"
  },
  {
    "text": "machines so all that's great but how do containers relate to continuous delivery",
    "start": "232120",
    "end": "237760"
  },
  {
    "text": "well continuous delivery is all without reducing risk and delivering F value",
    "start": "237760",
    "end": "242959"
  },
  {
    "text": "Faster by releasing small discret updates more frequently that requires",
    "start": "242959",
    "end": "248239"
  },
  {
    "text": "that your software be deployment ready throughout the development life cycle requires fast and automated feedback on",
    "start": "248239",
    "end": "254640"
  },
  {
    "text": "the production Readiness of your software whenever you make changes to your code and it requires an ability to",
    "start": "254640",
    "end": "261479"
  },
  {
    "text": "perform push button deployments of any version of the software to any environment containers help you reduce",
    "start": "261479",
    "end": "267960"
  },
  {
    "text": "the risk of introducing errors because they provide a consistent and predictable environment throughout the",
    "start": "267960",
    "end": "273080"
  },
  {
    "text": "different stages of the development life cycle and given their lightweight small and size and start quickly they could",
    "start": "273080",
    "end": "279880"
  },
  {
    "text": "increase your Speed and Agility so this is what a typical",
    "start": "279880",
    "end": "285000"
  },
  {
    "start": "282000",
    "end": "282000"
  },
  {
    "text": "deployment workflow looks like first developers write some code on their machine and push those changes to a code",
    "start": "285000",
    "end": "292360"
  },
  {
    "text": "repository like like git or code commit push triggers are build and",
    "start": "292360",
    "end": "298160"
  },
  {
    "text": "artifacts are built tests are then run and assuming all the tests",
    "start": "298160",
    "end": "304199"
  },
  {
    "text": "pass a new version of the software is deployed to production now orchestration",
    "start": "304199",
    "end": "309800"
  },
  {
    "text": "is the key to this process it controls how the code or your build moves from one stage to the next we'll now dive",
    "start": "309800",
    "end": "317600"
  },
  {
    "text": "deep into each stage and explore where and how containers can be used all right so the first step in the",
    "start": "317600",
    "end": "325080"
  },
  {
    "text": "development process is the source code typically start the development",
    "start": "325080",
    "end": "330440"
  },
  {
    "start": "327000",
    "end": "327000"
  },
  {
    "text": "process on your local machine you write some Code test it locally make some changes until you're satisfied with it",
    "start": "330440",
    "end": "336960"
  },
  {
    "text": "when you're finally done you push it to a code repository this can be a distributed system which allows multiple",
    "start": "336960",
    "end": "343199"
  },
  {
    "text": "developers on the same team to work on the same project together like GitHub so",
    "start": "343199",
    "end": "348240"
  },
  {
    "text": "what what tools can we use for this what can we use to define our",
    "start": "348240",
    "end": "354120"
  },
  {
    "start": "353000",
    "end": "353000"
  },
  {
    "text": "containers when we when we talk about containers we're often referring to Docker containers docker's available for",
    "start": "354120",
    "end": "360600"
  },
  {
    "text": "a lot of modern Linux distributions as well as Mac and windows through the the",
    "start": "360600",
    "end": "365759"
  },
  {
    "text": "docker toolbox and as of a few months ago a Docker beta for OSX and windows",
    "start": "365759",
    "end": "371639"
  },
  {
    "text": "with Docker we can Define the environment an application will be executed in and any additional",
    "start": "371639",
    "end": "376800"
  },
  {
    "text": "dependencies in what's known as a Docker file in this example we start from a",
    "start": "376800",
    "end": "383680"
  },
  {
    "start": "378000",
    "end": "378000"
  },
  {
    "text": "ruby bass image and install some additional packages using the OS package manager app G",
    "start": "383680",
    "end": "390720"
  },
  {
    "text": "then we specify our application dependencies using a gem file and finally we copy our source code this",
    "start": "390720",
    "end": "397280"
  },
  {
    "text": "Docker file can now be used to build a Docker image that we can use to run our containers and we can use the same image",
    "start": "397280",
    "end": "404039"
  },
  {
    "text": "throughout the different life cycle stages a lot of these a lot of the a lot",
    "start": "404039",
    "end": "411360"
  },
  {
    "start": "407000",
    "end": "407000"
  },
  {
    "text": "of people are attracted to Docker because of its growing tools ecosystem one one of these tools is Docker compose",
    "start": "411360",
    "end": "418360"
  },
  {
    "text": "which allows you to run comp applications that are comprised of multiple containers with Docker compos",
    "start": "418360",
    "end": "425199"
  },
  {
    "text": "you first need to create Docker files for each of your application components next capture how these components",
    "start": "425199",
    "end": "431479"
  },
  {
    "text": "interact with each other in a Docker compose yaml file once you have a yaml",
    "start": "431479",
    "end": "436599"
  },
  {
    "text": "file you can use the docker compose up command to deploy and run all the containers that comprise your",
    "start": "436599",
    "end": "443800"
  },
  {
    "start": "443000",
    "end": "443000"
  },
  {
    "text": "app so here we have an example of a Docker composed yaml file with two",
    "start": "443800",
    "end": "449120"
  },
  {
    "text": "servic proxy service and a web service the proxy service is built from the docker",
    "start": "449120",
    "end": "455879"
  },
  {
    "text": "file in the proxy directory it Maps Port 80 on the container to Port 80 on the",
    "start": "455879",
    "end": "461440"
  },
  {
    "text": "host and it's linked to the web service this will allow us to refer to the web service container as web from the proxy",
    "start": "461440",
    "end": "468159"
  },
  {
    "text": "service container the web container is also built from Docker file located in the web directory since it's a rails app",
    "start": "468159",
    "end": "475440"
  },
  {
    "text": "we specify the command we want to be executed it also exposes 3000 to any",
    "start": "475440",
    "end": "481039"
  },
  {
    "text": "Link services that are not on the host machine so now that we made some changes",
    "start": "481039",
    "end": "487120"
  },
  {
    "text": "to our code let's have a look at the setup we have to build new artifacts at this stage containers will",
    "start": "487120",
    "end": "494680"
  },
  {
    "start": "491000",
    "end": "491000"
  },
  {
    "text": "be used in two ways the first is to provide an",
    "start": "494680",
    "end": "501400"
  },
  {
    "text": "execution environment for the build jobs and as an output of the build process itself in a moment we'll see how we can",
    "start": "501400",
    "end": "508599"
  },
  {
    "text": "run our Builds on an ECS cluster and how to produce container images that we can use throughout the",
    "start": "508599",
    "end": "515080"
  },
  {
    "text": "rest of the development life cycle as we start building more apps the",
    "start": "515080",
    "end": "520680"
  },
  {
    "start": "517000",
    "end": "517000"
  },
  {
    "text": "time it takes to execute them will become long enough that we want to distribute their execution across",
    "start": "520680",
    "end": "526480"
  },
  {
    "text": "multiple machines the ec2 container service or ECS can help to distribute",
    "start": "526480",
    "end": "531640"
  },
  {
    "text": "build jobs across a cluster for example if you're using Jenkins with the Cloud B",
    "start": "531640",
    "end": "537120"
  },
  {
    "text": "Jenkins ECS plugin you're able to to run build jobs on an Amazon ECS cluster this",
    "start": "537120",
    "end": "543320"
  },
  {
    "text": "plugin will connect to your ECS cluster create new task definitions for Jenkin slaves execute your job and tear",
    "start": "543320",
    "end": "551120"
  },
  {
    "text": "everything down when the job completes doing things in parallel like this further accelerates the development life",
    "start": "551120",
    "end": "558640"
  },
  {
    "start": "558000",
    "end": "558000"
  },
  {
    "text": "cycle now containers are also the output of the build stage latest code changes",
    "start": "558640",
    "end": "565040"
  },
  {
    "text": "are packaged in a container image and pushed to a repository for instance when you use the cloudbees docker build and",
    "start": "565040",
    "end": "571839"
  },
  {
    "text": "publish plugin for Jenkins Jenkins automatically uh builds container images",
    "start": "571839",
    "end": "577399"
  },
  {
    "text": "and pushes them to a Docker registry you simply have to specify the repository name you want to push the image to",
    "start": "577399",
    "end": "584000"
  },
  {
    "text": "specify a tag for it in this example we're tagging it using the Jenkins build number and then URL of the registry you",
    "start": "584000",
    "end": "591959"
  },
  {
    "text": "want to use in this example we happen to be using um the Amazon ec2 container",
    "start": "591959",
    "end": "597720"
  },
  {
    "start": "594000",
    "end": "594000"
  },
  {
    "text": "registry or ECR ECR is a fully managed Docker container",
    "start": "597720",
    "end": "602839"
  },
  {
    "text": "registry that makes it easy to store manage and deploy your Docker container images and since Amazon ECR is",
    "start": "602839",
    "end": "610440"
  },
  {
    "text": "integrated with the Amazon ec2 container service it further simplifies your development to production workflow by",
    "start": "610440",
    "end": "617640"
  },
  {
    "text": "using ECR you eliminate the need to operate your own container repositories or worry about scaling the underlying",
    "start": "617640",
    "end": "623880"
  },
  {
    "text": "infrastructure for those additionally ECR is backed by S3 which is a highly",
    "start": "623880",
    "end": "629399"
  },
  {
    "text": "durable and scalable storage platform all this allows you to reliably",
    "start": "629399",
    "end": "634440"
  },
  {
    "text": "and consistently deploy containers for your applications using familiar commands like Docker push and pull and",
    "start": "634440",
    "end": "641240"
  },
  {
    "text": "finally ecr's integration with aws's identity and access management service",
    "start": "641240",
    "end": "646920"
  },
  {
    "text": "gives you the ability to apply fine grained access controls to each of your repositories and audit access of those",
    "start": "646920",
    "end": "655639"
  },
  {
    "text": "repositories so once our build is complete now we're ready to run some",
    "start": "655639",
    "end": "661519"
  },
  {
    "text": "tests now you could run tests inside of or against a Docker",
    "start": "661519",
    "end": "667920"
  },
  {
    "start": "666000",
    "end": "666000"
  },
  {
    "text": "container when you run tests inside of a container you can launch the container using Docker commands and parameters as",
    "start": "667920",
    "end": "674959"
  },
  {
    "text": "seen here this Builds on the docker file for the rails application that I showed you earlier in the deck only here we're",
    "start": "674959",
    "end": "681920"
  },
  {
    "text": "adding rake test reals is a good language for testing because it has its",
    "start": "681920",
    "end": "687079"
  },
  {
    "text": "own test framework that produces skeleton test code as you write your app can also simulate browser requests",
    "start": "687079",
    "end": "693440"
  },
  {
    "text": "without a browser now if you have uh a lot of unit",
    "start": "693440",
    "end": "701000"
  },
  {
    "start": "697000",
    "end": "697000"
  },
  {
    "text": "tests that are going to take a long time to execute you may want to run them outside of the container and limit the",
    "start": "701000",
    "end": "706639"
  },
  {
    "text": "number of integration tests you do against the docker image one way to do this is by running your containers in",
    "start": "706639",
    "end": "713160"
  },
  {
    "text": "detach mode with an exposed Port once your app's running you can use an automated testing solution solution like",
    "start": "713160",
    "end": "720279"
  },
  {
    "text": "a pika or Blaze meter or ghost inspector to run browser and other blackbox tests",
    "start": "720279",
    "end": "727200"
  },
  {
    "text": "against your app so now that we've covered the build and test",
    "start": "727200",
    "end": "734519"
  },
  {
    "start": "733000",
    "end": "733000"
  },
  {
    "text": "stages um all that's left to do is deploy our new version onto our production environment on AWS there are",
    "start": "734519",
    "end": "742279"
  },
  {
    "text": "a couple of ways to deploy and run Docker containers the first",
    "start": "742279",
    "end": "747639"
  },
  {
    "start": "745000",
    "end": "745000"
  },
  {
    "text": "way is to use the ec2 container service or ECS ECS is a scalable container",
    "start": "747639",
    "end": "755480"
  },
  {
    "text": "Management Service doesn't matter if you want to run a dozen or a thou thousands",
    "start": "755480",
    "end": "760760"
  },
  {
    "text": "of containers ECS will seamlessly seamlessly scale to provide consistent",
    "start": "760760",
    "end": "766240"
  },
  {
    "text": "performance additionally ECS includes a set of schedulers for running tasks and",
    "start": "766240",
    "end": "771440"
  },
  {
    "text": "services that you can use to place containers on instances within the cluster it also exposes the cluster",
    "start": "771440",
    "end": "778199"
  },
  {
    "text": "State through a set of apis so you can create your own custom schedulers um or use thirdparty",
    "start": "778199",
    "end": "784360"
  },
  {
    "text": "schedulers like MOS ECS is also highly integrated with",
    "start": "784360",
    "end": "789519"
  },
  {
    "text": "other AWS services like cloudwatch IM and autoscaling now for those of you who",
    "start": "789519",
    "end": "795760"
  },
  {
    "text": "are new to ECS here are some basic concepts you ought to know a cluster",
    "start": "795760",
    "end": "801160"
  },
  {
    "text": "simply a collection of Computer Resources container instances are ec2 instances with the ECS agent installed",
    "start": "801160",
    "end": "808199"
  },
  {
    "text": "on them and a task definition defines the configuration of your containers it",
    "start": "808199",
    "end": "813720"
  },
  {
    "text": "includes the system resources like CPU and RAM Network and storage settings and",
    "start": "813720",
    "end": "819519"
  },
  {
    "text": "container images along with their parameters if you're familiar with Docker it's similar to the output that",
    "start": "819519",
    "end": "824839"
  },
  {
    "text": "you get when you run Docker inspect now ECS has had several updates",
    "start": "824839",
    "end": "831560"
  },
  {
    "start": "827000",
    "end": "827000"
  },
  {
    "text": "and feature enhancements over the last few month months that make ECS an even better platform for running your",
    "start": "831560",
    "end": "836839"
  },
  {
    "text": "containers and microservices the first is Task roles task roles allow you to assign an IM Ro to a specific",
    "start": "836839",
    "end": "844199"
  },
  {
    "text": "task by assigning an IM IM rooll to tasks instead of instances you're now",
    "start": "844199",
    "end": "850120"
  },
  {
    "text": "able to run different services on the same ECS cluster without fear of granting elevated privileges to other",
    "start": "850120",
    "end": "856199"
  },
  {
    "text": "services running on the cluster we also introduced an application low balancer",
    "start": "856199",
    "end": "862519"
  },
  {
    "text": "that works in conjunction with ECS to discover the host Port that your containers are dynamically assigned by",
    "start": "862519",
    "end": "868000"
  },
  {
    "text": "docker instead of using a fixed Port you can now use Dynamic ports and let the",
    "start": "868000",
    "end": "873480"
  },
  {
    "text": "ECS scheduler automatically add your tasks to the application blad balancer using this randomly chosen Port",
    "start": "873480",
    "end": "880399"
  },
  {
    "text": "previously you had to define a fixed port for your container in order to use uh in order to use elb to Route traffic",
    "start": "880399",
    "end": "886759"
  },
  {
    "text": "to your application this prevented multiple copies of the same task from running on the same host there was also",
    "start": "886759",
    "end": "893320"
  },
  {
    "text": "a onetoone mapping between ECS services and elbs or lastic Lo balancers which",
    "start": "893320",
    "end": "899120"
  },
  {
    "text": "increase the cost and complexity of running microservices applications on ECS the ALB or application low balancer",
    "start": "899120",
    "end": "907440"
  },
  {
    "text": "can be shared by multiple services using path-based routing too each service can",
    "start": "907440",
    "end": "913320"
  },
  {
    "text": "Define its own URI and that URI routes traffic to that service for example you",
    "start": "913320",
    "end": "919600"
  },
  {
    "text": "can have two Services running on the same cluster where one service is responding to requests on say acme.com",
    "start": "919600",
    "end": "925680"
  },
  {
    "text": "and another service is responding to requests on AC /img for",
    "start": "925680",
    "end": "931759"
  },
  {
    "text": "images another recent enhancement is autoscaling policies for services like Auto scaling for ec2",
    "start": "931759",
    "end": "938480"
  },
  {
    "text": "instances which you can use to dynamically scale the size of your ECS cluster Auto scaling for ECS Services",
    "start": "938480",
    "end": "945720"
  },
  {
    "text": "allow you to use a cloudwatch metric to to dynamically scale the tasks in your",
    "start": "945720",
    "end": "951160"
  },
  {
    "text": "service and finally there's now support for all the different networking modes",
    "start": "951160",
    "end": "956240"
  },
  {
    "text": "that Docker supports Bridge host and none together these allow you to have",
    "start": "956240",
    "end": "961480"
  },
  {
    "text": "greater control over the networks that your applications run on another way to deploy Docker",
    "start": "961480",
    "end": "969000"
  },
  {
    "start": "965000",
    "end": "965000"
  },
  {
    "text": "containers within a pipeline is to use elastic beanock beanock supports a single",
    "start": "969000",
    "end": "974560"
  },
  {
    "text": "container deployment directly on ec2 instance and multicontainer deployments on ECS benefit of using beanock is that",
    "start": "974560",
    "end": "982680"
  },
  {
    "text": "it can manage other resources aside from ECS like your database and your elastic load balancer it also provides mon Ing",
    "start": "982680",
    "end": "989160"
  },
  {
    "text": "and logging for your app and it's easy to set up multiple environments for one application for example you have one",
    "start": "989160",
    "end": "995759"
  },
  {
    "text": "environment for testing for staging and one for production this allows you to quickly",
    "start": "995759",
    "end": "1001519"
  },
  {
    "text": "create an integration stack that's identical to your production stack elastic Bean stocks ideal if you want to",
    "start": "1001519",
    "end": "1007759"
  },
  {
    "text": "leverage the benefits of containers but want or like the Simplicity of deploying applications simply by uploading a",
    "start": "1007759",
    "end": "1014600"
  },
  {
    "text": "container image you can work with ECS directly if you want more fine G control for custom application",
    "start": "1014600",
    "end": "1022600"
  },
  {
    "start": "1022000",
    "end": "1022000"
  },
  {
    "text": "architectures now if you're already using Docker compose you'll be glad to hear that the ECS CLI will allow you to",
    "start": "1024319",
    "end": "1031240"
  },
  {
    "text": "run your application both locally and on an ECS cluster using the same Docker",
    "start": "1031240",
    "end": "1036438"
  },
  {
    "text": "compose yaml file with the ECS CLI you'll be able to run the same Docker compose commands in",
    "start": "1036439",
    "end": "1043520"
  },
  {
    "text": "your local environment and up start stop and PS on ECS",
    "start": "1043520",
    "end": "1049880"
  },
  {
    "text": "ECS CLI is available today plus it's open source so we encourage you to get involved by submitting your own",
    "start": "1049880",
    "end": "1057720"
  },
  {
    "start": "1057000",
    "end": "1057000"
  },
  {
    "text": "enhancements now here's an example of how you configure the ECS CLI on your",
    "start": "1057720",
    "end": "1062919"
  },
  {
    "text": "client machine you can either use AWS environment variables for your AWS",
    "start": "1062919",
    "end": "1068840"
  },
  {
    "text": "access and secret key um or you can specify an AWS profile on your client",
    "start": "1068840",
    "end": "1073960"
  },
  {
    "text": "machine in this example we're creating a new cluster called ECS CLI demo in the",
    "start": "1073960",
    "end": "1081000"
  },
  {
    "text": "US West 2 region and here's an example of how you",
    "start": "1081000",
    "end": "1087799"
  },
  {
    "start": "1084000",
    "end": "1084000"
  },
  {
    "text": "deploy an app as a task or service and how you'd scale that service once it was running we purposefully mimic the docker",
    "start": "1087799",
    "end": "1095320"
  },
  {
    "text": "composed syntax so it'll be easier for folks who are already familiar with Docker to",
    "start": "1095320",
    "end": "1100440"
  },
  {
    "text": "use so now that we've looked at the different stages in a continuous",
    "start": "1100440",
    "end": "1105840"
  },
  {
    "text": "delivery pipeline we're ready to automate it by strating the tasks that are part of each stage there are a",
    "start": "1105840",
    "end": "1111880"
  },
  {
    "text": "variety of ways to do this including building your own solution or buying an office shelf solution from an AWS",
    "start": "1111880",
    "end": "1119440"
  },
  {
    "text": "partner the next few slides illustrate a few ways you can automate your",
    "start": "1119440",
    "end": "1125440"
  },
  {
    "start": "1124000",
    "end": "1124000"
  },
  {
    "text": "pipelines so in this example Jenkins is used to orchestrate the different tasks",
    "start": "1125440",
    "end": "1130919"
  },
  {
    "text": "in the workflow in the first step your code and your Docker files are pushed to a code repository like code commit or",
    "start": "1130919",
    "end": "1137880"
  },
  {
    "text": "GitHub Jenkins then Builds an image from those files and runs a set of test",
    "start": "1137880",
    "end": "1143039"
  },
  {
    "text": "against those images assuming the test passed the image is then pushed to a private Docker",
    "start": "1143039",
    "end": "1148760"
  },
  {
    "text": "registry like ECR or public registry like dockerhub during the last stage Jen can cause the",
    "start": "1148760",
    "end": "1155400"
  },
  {
    "text": "ECS API to update your service with the latest image this triggers a pull from the registry and new instances of the",
    "start": "1155400",
    "end": "1162760"
  },
  {
    "text": "container are deployed onto ECS we'll have a look at a slight variation of this when we get to the demo",
    "start": "1162760",
    "end": "1170720"
  },
  {
    "text": "now Jenkins is a popular choice for automating pipelines because it has a broad ecosystem of plugins and it",
    "start": "1170880",
    "end": "1177520"
  },
  {
    "text": "supports web Hooks and AWS Lambda this makes it relatively easy to integrate Jenkins with the rest of the components",
    "start": "1177520",
    "end": "1184520"
  },
  {
    "text": "in your continuous delivery pipeline for example there's a build and publish",
    "start": "1184520",
    "end": "1189720"
  },
  {
    "text": "plug-in that can build your Docker images for you there's also a plugin for pushing your image to a Docker registry",
    "start": "1189720",
    "end": "1196919"
  },
  {
    "text": "once you've got your pipeline automated you can merge your code updates into the master branch and let Jenkins handle the",
    "start": "1196919",
    "end": "1204919"
  },
  {
    "start": "1203000",
    "end": "1203000"
  },
  {
    "text": "rest here's a A variation of the previous previous example uh only here",
    "start": "1204919",
    "end": "1211520"
  },
  {
    "text": "we're using Code Pipeline and a set of custom actions backed by AWS Lambda",
    "start": "1211520",
    "end": "1216679"
  },
  {
    "text": "functions instead of Jenkins for those of you who are unfamiliar with code pipeline code pipeline is a continuous",
    "start": "1216679",
    "end": "1223440"
  },
  {
    "text": "delivery service for fast and reliable application updates code pipeline builds",
    "start": "1223440",
    "end": "1229640"
  },
  {
    "text": "tests and deploys your code every time there's a Code change based on the release processes that you",
    "start": "1229640",
    "end": "1235960"
  },
  {
    "text": "define this enables you to rapidly and reliably deliver features and updates",
    "start": "1235960",
    "end": "1242320"
  },
  {
    "text": "easily build out an endtoend Solution by using a set of pre-built plugins for popular thirdparty services like GitHub",
    "start": "1242320",
    "end": "1248679"
  },
  {
    "text": "or integrate your own custom plugins into any stage of the Rel the release",
    "start": "1248679",
    "end": "1254120"
  },
  {
    "text": "process as shown here in this pipeline diagram",
    "start": "1254120",
    "end": "1259840"
  },
  {
    "text": "now when new code is merged into the master branch of our GitHub repository",
    "start": "1260280",
    "end": "1265360"
  },
  {
    "text": "code pipeline calls our first Lambda function which is used to create the ec2 instance upon which the docker image is",
    "start": "1265360",
    "end": "1272640"
  },
  {
    "text": "built after the image is pushed to the ec2 container registry or ECR another",
    "start": "1272640",
    "end": "1278400"
  },
  {
    "text": "Lambda function listening for a push event terminates our build instance so we no longer incur costs for running",
    "start": "1278400",
    "end": "1284880"
  },
  {
    "text": "it another Lambda function is responsible for updating the Tas definition for our service after the",
    "start": "1284880",
    "end": "1291000"
  },
  {
    "text": "image is pushed to the repository in the last step a Lambda function updates the service with the",
    "start": "1291000",
    "end": "1297360"
  },
  {
    "text": "new task definition and a new version of the container is deployed onto the ECS",
    "start": "1297360",
    "end": "1304080"
  },
  {
    "start": "1302000",
    "end": "1302000"
  },
  {
    "text": "cluster if you rather not build your own solution some of our partners have created integrated continuous Delivery",
    "start": "1304080",
    "end": "1310520"
  },
  {
    "text": "Solutions with Amazon ECS we've already looked at Jenkins now we'll have a a",
    "start": "1310520",
    "end": "1316120"
  },
  {
    "text": "quick look at a similar solution from",
    "start": "1316120",
    "end": "1320520"
  },
  {
    "start": "1321000",
    "end": "1321000"
  },
  {
    "text": "shippable so shippable is a hosted Cloud platform that provides hosted continuous",
    "start": "1321480",
    "end": "1327440"
  },
  {
    "text": "integration deployment and testing to GitHub and bitbucket repositories you",
    "start": "1327440",
    "end": "1332760"
  },
  {
    "text": "can create and run Amazon ECS services and tasks on your ECS clusters from within the shippable formations module",
    "start": "1332760",
    "end": "1339960"
  },
  {
    "text": "you can also pull and push Docker images from Amazon ECR as part of your shippable sh shippable CI builds and",
    "start": "1339960",
    "end": "1347640"
  },
  {
    "text": "deploy them with SH formations across multiple clusters in Amazon ECS without",
    "start": "1347640",
    "end": "1353120"
  },
  {
    "text": "ever having to manually update a task definition yourself shippable will automatically update your ECS task",
    "start": "1353120",
    "end": "1359840"
  },
  {
    "text": "definitions with the latest image information based on your CI builds and automatically deploy to production or",
    "start": "1359840",
    "end": "1366799"
  },
  {
    "text": "deploy to production with a single click when you're ready with that I'm going to give you a",
    "start": "1366799",
    "end": "1373600"
  },
  {
    "text": "a brief demonstration how you can automate a continuous delivery p",
    "start": "1373600",
    "end": "1379000"
  },
  {
    "text": "line me share my",
    "start": "1379000",
    "end": "1383919"
  },
  {
    "text": "screen okay so in this demonstration I'm going to be pushing",
    "start": "1387760",
    "end": "1393799"
  },
  {
    "text": "code to a GitHub repository that's going to trigger a a",
    "start": "1393799",
    "end": "1399000"
  },
  {
    "text": "build using GitHub support of web hooks the build is going to occur on the jenin",
    "start": "1399000",
    "end": "1406400"
  },
  {
    "text": "server and using the build and deploy plugin for Jenkins it's going to push",
    "start": "1406400",
    "end": "1413400"
  },
  {
    "text": "that image into Amazon ECR as part of our continuous dely",
    "start": "1413400",
    "end": "1420080"
  },
  {
    "text": "pipeline uh Jenkins is also going to update the task definition um for the uh",
    "start": "1420080",
    "end": "1427960"
  },
  {
    "text": "uh for the service that's running within our cluster uh and then finally the service is going to be updated with that",
    "start": "1427960",
    "end": "1434320"
  },
  {
    "text": "new task definition and a new version of that container is going to to be deployed across the cluster now what",
    "start": "1434320",
    "end": "1441440"
  },
  {
    "text": "we're looking at here is a python flask application it's a simple application",
    "start": "1441440",
    "end": "1447320"
  },
  {
    "text": "that accepts user input and stores that input in a Dynamo DB",
    "start": "1447320",
    "end": "1453880"
  },
  {
    "text": "table uh and it looks as if uh a colleague of mine has vandalized this",
    "start": "1453880",
    "end": "1459039"
  },
  {
    "text": "website uh it says the next big thing is not coming I want to change that to read the next big thing is coming so I'm",
    "start": "1459039",
    "end": "1467039"
  },
  {
    "text": "going to up update that file within",
    "start": "1467039",
    "end": "1472880"
  },
  {
    "text": "GitHub contained here within the index file and I'm simply going to",
    "start": "1473360",
    "end": "1482760"
  },
  {
    "text": "oops get it simply going to remove",
    "start": "1482760",
    "end": "1488080"
  },
  {
    "text": "that word from file then I'll commit my changes",
    "start": "1488080",
    "end": "1497840"
  },
  {
    "text": "and if all goes well that's going to trigger a build and I can monitor",
    "start": "1501000",
    "end": "1508279"
  },
  {
    "text": "that see that",
    "start": "1508279",
    "end": "1511840"
  },
  {
    "text": "I I got to click it",
    "start": "1517720",
    "end": "1523600"
  },
  {
    "text": "well the good thing about this is that uh we can trigger a build man oh no there it goes okay so it took a little",
    "start": "1532640",
    "end": "1538720"
  },
  {
    "text": "longer than I expected uh but the build uh did did occur and it was successful",
    "start": "1538720",
    "end": "1545480"
  },
  {
    "text": "um now let's have a look at how how that job is",
    "start": "1545480",
    "end": "1550760"
  },
  {
    "text": "configured come here and we'll step through the different pipeline stages",
    "start": "1550760",
    "end": "1557039"
  },
  {
    "text": "here um first thing I did was I granted Jenkins",
    "start": "1557039",
    "end": "1562679"
  },
  {
    "text": "permission to my uh GitHub repository um I have a set of",
    "start": "1562679",
    "end": "1568039"
  },
  {
    "text": "credentials that I'm using to access that and these are the branches that I",
    "start": "1568039",
    "end": "1573480"
  },
  {
    "text": "want it to uh build from and I've also checked this box under build triggers um",
    "start": "1573480",
    "end": "1580320"
  },
  {
    "text": "so that when um when updates are incorporated into the master Branch um it's going to",
    "start": "1580320",
    "end": "1588600"
  },
  {
    "text": "use GitHub support of web hooks uh to trigger a build then I'm using the cloud",
    "start": "1588600",
    "end": "1596520"
  },
  {
    "text": "B's Docker build and publish plug-in uh to generate a Docker image I'm using the",
    "start": "1596520",
    "end": "1603440"
  },
  {
    "text": "build number as the tag and I'm specifying that I want this image to be",
    "start": "1603440",
    "end": "1608799"
  },
  {
    "text": "stored in the ec2 container registry and then here under the execute",
    "start": "1608799",
    "end": "1615600"
  },
  {
    "text": "shell section uh I am using that that uh build number to update the task",
    "start": "1615600",
    "end": "1622480"
  },
  {
    "text": "definition um that the service uses and then I update the service with the new",
    "start": "1622480",
    "end": "1628640"
  },
  {
    "text": "task definition and the desired count if the desired count is zero then increment it to one and then finally um I use the",
    "start": "1628640",
    "end": "1637480"
  },
  {
    "text": "ECS API or CLI rather um to update",
    "start": "1637480",
    "end": "1642640"
  },
  {
    "text": "update the service and I also um am using the slack",
    "start": "1642640",
    "end": "1649600"
  },
  {
    "text": "plugin for Jenkins to have build messages sent directly to slack so you can see in this Channel that I have",
    "start": "1649600",
    "end": "1657679"
  },
  {
    "text": "several updates from Jenkins these are the latest that correspond to build uh",
    "start": "1657679",
    "end": "1663200"
  },
  {
    "text": "41 now if I come over here and I refresh the",
    "start": "1663200",
    "end": "1668360"
  },
  {
    "text": "page we should see that build 41 is now stored in the",
    "start": "1668360",
    "end": "1674840"
  },
  {
    "text": "registry and I come over here and I refresh the",
    "start": "1674840",
    "end": "1681440"
  },
  {
    "text": "page we'll see that um ECS or rather the um application",
    "start": "1681440",
    "end": "1688120"
  },
  {
    "text": "load balancer that is in front of the service running on ECS is draining the",
    "start": "1688120",
    "end": "1693360"
  },
  {
    "text": "connections uh to the old task that was running within the cluster um and redirecting requests uh to the new task",
    "start": "1693360",
    "end": "1701200"
  },
  {
    "text": "that's part of that that service um now it's important to pay attention to these",
    "start": "1701200",
    "end": "1707120"
  },
  {
    "text": "uh deployment options here you can see that there's a minimum healthy percent of 50 uh this guarantees that uh 50% of",
    "start": "1707120",
    "end": "1716120"
  },
  {
    "text": "the fleet will um continue operating as the deployment is occurring um until the",
    "start": "1716120",
    "end": "1721840"
  },
  {
    "text": "deployment is uh is is sufficiently completed um then uh those those T tasks",
    "start": "1721840",
    "end": "1728000"
  },
  {
    "text": "will be uh de deprovisioned uh maximum percent is is similar only it's",
    "start": "1728000",
    "end": "1733240"
  },
  {
    "text": "specifying the maximum number of tasks that can rup in the cluster and then if we come over here we",
    "start": "1733240",
    "end": "1739640"
  },
  {
    "text": "can monitor the application load balancer you can see that uh it's",
    "start": "1739640",
    "end": "1746200"
  },
  {
    "text": "currently draining connections um to that specific instance uh and it's redirecting",
    "start": "1746200",
    "end": "1753159"
  },
  {
    "text": "requests to uh the new task and if I come back over here to my original",
    "start": "1753159",
    "end": "1760799"
  },
  {
    "text": "page and now it says the next big thing is coming now I'm also",
    "start": "1760799",
    "end": "1766640"
  },
  {
    "text": "using uh gri which is a way for you to visualize the",
    "start": "1766640",
    "end": "1771720"
  },
  {
    "text": "uh tasks that are running within your cluster you can actually see that I've got two versions of uh the task running",
    "start": "1771720",
    "end": "1780519"
  },
  {
    "text": "I've got the old version version 41 and the the new version uh the connections are currently being drained from 41 and",
    "start": "1780519",
    "end": "1787840"
  },
  {
    "text": "uh being directed to 42 and I also have a task uh definition for uh Griffin so",
    "start": "1787840",
    "end": "1794840"
  },
  {
    "text": "if you're not if if you haven't used this before it's a handy way to see not only the different task definitions that",
    "start": "1794840",
    "end": "1801360"
  },
  {
    "text": "are defined for your various services but also um where they're running within the within the",
    "start": "1801360",
    "end": "1808000"
  },
  {
    "text": "cluster so with that uh that concludes my demo Jerry if you can revert back to the",
    "start": "1808000",
    "end": "1816360"
  },
  {
    "text": "slides for me great so I want to thank you all very",
    "start": "1816360",
    "end": "1822279"
  },
  {
    "text": "much for joining us hopefully you enjoyed this session and you'll now go home and start enhancing your continuous",
    "start": "1822279",
    "end": "1828279"
  },
  {
    "text": "delivery pipelines by adding support for containers and and ECS if you have any questions please enter them in the chat",
    "start": "1828279",
    "end": "1834559"
  },
  {
    "text": "window now um we'll do our best to answer them in the time remaining and before leaving I want to remind you to",
    "start": "1834559",
    "end": "1841120"
  },
  {
    "text": "take five minutes or so to complete the survey questions that Jerry talked about at the beginning Jeremy I want to thank",
    "start": "1841120",
    "end": "1848039"
  },
  {
    "text": "you for the great presentation and I want to thank Drew and danieli for the great uh support in our Q&A as",
    "start": "1848039",
    "end": "1854559"
  },
  {
    "text": "moderators today please provide us your feedback on the poll on the left side of the screen I see a lot of folks are",
    "start": "1854559",
    "end": "1859960"
  },
  {
    "text": "already doing that we do appreciate your feedback we do have some time left to",
    "start": "1859960",
    "end": "1865159"
  },
  {
    "text": "answer some Q&A questions so feel free to enter those at the top middle of your screen right above our thank you slide",
    "start": "1865159",
    "end": "1871120"
  },
  {
    "text": "and uh we'll go and respond to those verbally and through the Q&A panel so again thanks to everybody for attending",
    "start": "1871120",
    "end": "1877080"
  },
  {
    "text": "today if you have no further questions feel free to disconnect but we do are we are running our Q&A session at this",
    "start": "1877080",
    "end": "1885158"
  },
  {
    "text": "point okay great so I see question in here from Thomas McCracken about where",
    "start": "1885360",
    "end": "1891200"
  },
  {
    "text": "can I learn more about Griffin so Griffin is an open- source project I don't know what the URL is off hand but",
    "start": "1891200",
    "end": "1897639"
  },
  {
    "text": "if you search uh GitHub for Griffin um you should be able to find additional",
    "start": "1897639",
    "end": "1902840"
  },
  {
    "text": "documentation about uh how to install it onto",
    "start": "1902840",
    "end": "1907720"
  },
  {
    "text": "ECS and there's another question in the queue about how uh blue green is handled",
    "start": "1910120",
    "end": "1917000"
  },
  {
    "text": "within service updates um so you would do that U by using uh the um the Min and",
    "start": "1917000",
    "end": "1925480"
  },
  {
    "text": "Max values that we looked at before during the demonstration um that will",
    "start": "1925480",
    "end": "1930720"
  },
  {
    "text": "ensure that uh you have uh different versions of your service running within",
    "start": "1930720",
    "end": "1936080"
  },
  {
    "text": "the cluster um so that you can uh gradually uh drain connections to the uh",
    "start": "1936080",
    "end": "1943600"
  },
  {
    "text": "old version of your service uh and redirect those to the new service now if you want to have them uh run in in",
    "start": "1943600",
    "end": "1951120"
  },
  {
    "text": "parallel um you potentially uh run those in or",
    "start": "1951120",
    "end": "1957480"
  },
  {
    "text": "across multiple clusters um or um you can you can have",
    "start": "1957480",
    "end": "1964960"
  },
  {
    "text": "um uh you could use the path-based routing potentially uh to do that um",
    "start": "1964960",
    "end": "1972799"
  },
  {
    "text": "yeah i' I'd have to think about that a little further about how you do blue green",
    "start": "1972799",
    "end": "1978799"
  },
  {
    "text": "good question though so I see another question in the",
    "start": "1978880",
    "end": "1983960"
  },
  {
    "text": "queue here from Ian McAlpine it says what are the benefits of running code pipeline alongside or integrated with",
    "start": "1983960",
    "end": "1991000"
  },
  {
    "text": "another CI tool like Jenkins so i' say that there's a lot of overlap",
    "start": "1991000",
    "end": "1998080"
  },
  {
    "text": "between code Pipeline and Jenkins um I'd say that the benefit of using",
    "start": "1998080",
    "end": "2004639"
  },
  {
    "text": "Code pipeline is its integration with the rest of the uh AWS",
    "start": "2004639",
    "end": "2009760"
  },
  {
    "text": "ecosystem um code pipeline has a a pretty good",
    "start": "2009760",
    "end": "2015120"
  },
  {
    "text": "support for a lot of popular continuous delivery tools um as does",
    "start": "2015120",
    "end": "2023000"
  },
  {
    "text": "j i I'd say it's really your your preference if the integration with the",
    "start": "2024200",
    "end": "2029279"
  },
  {
    "text": "rest of the AWS ecosystem is important to you then I would consider using Code pipeline otherwise Jenkins is app",
    "start": "2029279",
    "end": "2037840"
  },
  {
    "text": "so there's a question in the queue here from baroo it says how do I build the promotional pipeline in my registry how",
    "start": "2039399",
    "end": "2046399"
  },
  {
    "text": "can I separate Dev repository from production repository and promote from",
    "start": "2046399",
    "end": "2052158"
  },
  {
    "text": "one to another how can I make sure that I always deploy from Dev repository Dev server and from pod one to pod so if I",
    "start": "2052159",
    "end": "2064440"
  },
  {
    "text": "understand your question uh you want to know how you can promote images from one",
    "start": "2064440",
    "end": "2071679"
  },
  {
    "text": "container registry to the next and deoy those into the appropriate environments",
    "start": "2071679",
    "end": "2077040"
  },
  {
    "text": "so um you can have multiple container registries you can have a registry for",
    "start": "2077040",
    "end": "2082800"
  },
  {
    "text": "um staging and another for production and you can um configure a pipeline such",
    "start": "2082800",
    "end": "2090720"
  },
  {
    "text": "that it stores those images in the uh requisite registry",
    "start": "2090720",
    "end": "2098680"
  },
  {
    "text": "um there may there may be things that uh you can do beyond that within Jenkins",
    "start": "2098680",
    "end": "2105079"
  },
  {
    "text": "and code pipeline but um I'd have to look into that I'd like to spend a special thanks",
    "start": "2105079",
    "end": "2113079"
  },
  {
    "text": "for our presenter today to Jeremy for his time and the great presentation on the content today want to also thank",
    "start": "2113079",
    "end": "2119119"
  },
  {
    "text": "Drew and danieli for answering all the audio question in our Q&A panel so thank you for that today if you have any",
    "start": "2119119",
    "end": "2126000"
  },
  {
    "text": "comments on the previous and upcoming webinars or any suggestions on the topics that you wish AWS to cover in the",
    "start": "2126000",
    "end": "2133040"
  },
  {
    "text": "future webinars please feel free to email us at AWS webcast amazon.com your feedback",
    "start": "2133040",
    "end": "2141359"
  },
  {
    "text": "will help us improve our webinar programming again thanks to everybody for joining in today",
    "start": "2141359",
    "end": "2148000"
  }
]