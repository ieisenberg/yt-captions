[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "[Music]",
    "start": "410",
    "end": "11999"
  },
  {
    "text": "hello my name is aditi and i am a cloud",
    "start": "12480",
    "end": "15360"
  },
  {
    "text": "support engineer",
    "start": "15360",
    "end": "16480"
  },
  {
    "text": "here at the aws office in northern",
    "start": "16480",
    "end": "18640"
  },
  {
    "text": "virginia",
    "start": "18640",
    "end": "20080"
  },
  {
    "text": "in this video i'll show you how to",
    "start": "20080",
    "end": "22320"
  },
  {
    "text": "troubleshoot high replica lag with",
    "start": "22320",
    "end": "24560"
  },
  {
    "text": "amazon relational database service for",
    "start": "24560",
    "end": "26960"
  },
  {
    "text": "mysql let's get started",
    "start": "26960",
    "end": "30320"
  },
  {
    "start": "27000",
    "end": "102000"
  },
  {
    "text": "amazon rds for mysql uses asynchronous",
    "start": "30320",
    "end": "33680"
  },
  {
    "text": "replication sometimes the replica isn't",
    "start": "33680",
    "end": "36960"
  },
  {
    "text": "able to keep up with the primary db",
    "start": "36960",
    "end": "39200"
  },
  {
    "text": "instance",
    "start": "39200",
    "end": "40160"
  },
  {
    "text": "this can cause replication lag",
    "start": "40160",
    "end": "43440"
  },
  {
    "text": "when using amazon rds mysql read replica",
    "start": "43440",
    "end": "46960"
  },
  {
    "text": "with bin log replication",
    "start": "46960",
    "end": "48960"
  },
  {
    "text": "you can monitor replication lag in",
    "start": "48960",
    "end": "51199"
  },
  {
    "text": "amazon cloudwatch by viewing the amazon",
    "start": "51199",
    "end": "54320"
  },
  {
    "text": "rds replica lag metric",
    "start": "54320",
    "end": "56399"
  },
  {
    "text": "the replica lag metric reports the value",
    "start": "56399",
    "end": "59359"
  },
  {
    "text": "of the seconds behind master field of",
    "start": "59359",
    "end": "61760"
  },
  {
    "text": "the show slave status command",
    "start": "61760",
    "end": "64400"
  },
  {
    "text": "the seconds behind master shows the",
    "start": "64400",
    "end": "66479"
  },
  {
    "text": "difference between the current timestamp",
    "start": "66479",
    "end": "69119"
  },
  {
    "text": "on the replica db instance",
    "start": "69119",
    "end": "71280"
  },
  {
    "text": "and the original time stamp logged on",
    "start": "71280",
    "end": "73760"
  },
  {
    "text": "the primary db instance for the event",
    "start": "73760",
    "end": "76400"
  },
  {
    "text": "that's being processed on the replica db",
    "start": "76400",
    "end": "78960"
  },
  {
    "text": "instance",
    "start": "78960",
    "end": "80720"
  },
  {
    "text": "mysql replication works with three",
    "start": "80720",
    "end": "83200"
  },
  {
    "text": "threads",
    "start": "83200",
    "end": "84320"
  },
  {
    "text": "the bin log dump thread the i o thread",
    "start": "84320",
    "end": "87439"
  },
  {
    "text": "and the sql thread",
    "start": "87439",
    "end": "89119"
  },
  {
    "text": "if there is a delay in replication we",
    "start": "89119",
    "end": "91520"
  },
  {
    "text": "must first identify whether the lag is",
    "start": "91520",
    "end": "94079"
  },
  {
    "text": "caused by the replica io thread or the",
    "start": "94079",
    "end": "96880"
  },
  {
    "text": "replica sql thread",
    "start": "96880",
    "end": "98799"
  },
  {
    "text": "then we can identify the root cause of",
    "start": "98799",
    "end": "101360"
  },
  {
    "text": "the lab",
    "start": "101360",
    "end": "103200"
  },
  {
    "start": "102000",
    "end": "180000"
  },
  {
    "text": "let's check this with an example",
    "start": "103200",
    "end": "105520"
  },
  {
    "text": "first i am going to login to the primary",
    "start": "105520",
    "end": "108320"
  },
  {
    "text": "db instance and check which bin log is",
    "start": "108320",
    "end": "111040"
  },
  {
    "text": "being written",
    "start": "111040",
    "end": "112880"
  },
  {
    "text": "from the output we see that it's writing",
    "start": "112880",
    "end": "115920"
  },
  {
    "text": "the log file mysql bin 152",
    "start": "115920",
    "end": "120640"
  },
  {
    "text": "now let's check the progress on the",
    "start": "120640",
    "end": "122960"
  },
  {
    "text": "replica",
    "start": "122960",
    "end": "125960"
  },
  {
    "text": "the primary db instance is writing the",
    "start": "128560",
    "end": "131680"
  },
  {
    "text": "binary logs to the file mysql bin 152",
    "start": "131680",
    "end": "137040"
  },
  {
    "text": "the master log file mysql bin 150",
    "start": "137040",
    "end": "141760"
  },
  {
    "text": "indicates that the replica io thread is",
    "start": "141760",
    "end": "144959"
  },
  {
    "text": "reading from the binary log file mysql",
    "start": "144959",
    "end": "148239"
  },
  {
    "text": "bin 150",
    "start": "148239",
    "end": "150720"
  },
  {
    "text": "this output shows that the replica io",
    "start": "150720",
    "end": "153599"
  },
  {
    "text": "thread is behind by two binary logs",
    "start": "153599",
    "end": "157680"
  },
  {
    "text": "however the relay master log file is",
    "start": "157680",
    "end": "161200"
  },
  {
    "text": "mysql bin 150",
    "start": "161200",
    "end": "164080"
  },
  {
    "text": "which indicates that the replica sql",
    "start": "164080",
    "end": "166640"
  },
  {
    "text": "thread is reading from the same file as",
    "start": "166640",
    "end": "169920"
  },
  {
    "text": "the i o thread",
    "start": "169920",
    "end": "172080"
  },
  {
    "text": "this means that the replica sql thread",
    "start": "172080",
    "end": "175280"
  },
  {
    "text": "is keeping up",
    "start": "175280",
    "end": "176640"
  },
  {
    "text": "but the replica i o thread is lagging",
    "start": "176640",
    "end": "179120"
  },
  {
    "text": "behind",
    "start": "179120",
    "end": "181200"
  },
  {
    "start": "180000",
    "end": "245000"
  },
  {
    "text": "let's look at another example",
    "start": "181200",
    "end": "183360"
  },
  {
    "text": "the primary db instance is writing the",
    "start": "183360",
    "end": "186000"
  },
  {
    "text": "binary logs to the file mysql bin",
    "start": "186000",
    "end": "189760"
  },
  {
    "text": "152",
    "start": "189760",
    "end": "191280"
  },
  {
    "text": "if sql thread is lagging then the",
    "start": "191280",
    "end": "193519"
  },
  {
    "text": "example output shows the master log file",
    "start": "193519",
    "end": "197040"
  },
  {
    "text": "mysql bin",
    "start": "197040",
    "end": "198959"
  },
  {
    "text": "152",
    "start": "198959",
    "end": "200640"
  },
  {
    "text": "this is also the file parameter from the",
    "start": "200640",
    "end": "204159"
  },
  {
    "text": "primary status",
    "start": "204159",
    "end": "205760"
  },
  {
    "text": "which implies that the i o thread is",
    "start": "205760",
    "end": "208080"
  },
  {
    "text": "keeping up with the primary db instance",
    "start": "208080",
    "end": "211680"
  },
  {
    "text": "in the replica output the sql thread is",
    "start": "211680",
    "end": "214959"
  },
  {
    "text": "performing relay master log file mysql",
    "start": "214959",
    "end": "218560"
  },
  {
    "text": "bin 140",
    "start": "218560",
    "end": "221120"
  },
  {
    "text": "this means that the sql thread is",
    "start": "221120",
    "end": "223680"
  },
  {
    "text": "lagging behind by 12 binary logs",
    "start": "223680",
    "end": "227519"
  },
  {
    "text": "typically io thread doesn't cause large",
    "start": "227519",
    "end": "230640"
  },
  {
    "text": "replication delays",
    "start": "230640",
    "end": "232319"
  },
  {
    "text": "because the i o thread reads the binary",
    "start": "232319",
    "end": "235439"
  },
  {
    "text": "logs from the primary",
    "start": "235439",
    "end": "238000"
  },
  {
    "text": "however network connectivity and network",
    "start": "238000",
    "end": "240959"
  },
  {
    "text": "latency can affect the speed of the",
    "start": "240959",
    "end": "243439"
  },
  {
    "text": "reads between the servers",
    "start": "243439",
    "end": "246560"
  },
  {
    "start": "245000",
    "end": "299000"
  },
  {
    "text": "the replica i o thread might be slow due",
    "start": "246560",
    "end": "249439"
  },
  {
    "text": "to high bandwidth usage",
    "start": "249439",
    "end": "252480"
  },
  {
    "text": "in most cases the sql thread is the",
    "start": "252480",
    "end": "255280"
  },
  {
    "text": "source of the replication delays",
    "start": "255280",
    "end": "257600"
  },
  {
    "text": "these delays",
    "start": "257600",
    "end": "259040"
  },
  {
    "text": "might be due to the following reasons",
    "start": "259040",
    "end": "262720"
  },
  {
    "text": "long-running queries on the primary db",
    "start": "262720",
    "end": "265280"
  },
  {
    "text": "instance",
    "start": "265280",
    "end": "266880"
  },
  {
    "text": "insufficient db instance class size or",
    "start": "266880",
    "end": "270000"
  },
  {
    "text": "storage",
    "start": "270000",
    "end": "271600"
  },
  {
    "text": "parallel queries running on the primary",
    "start": "271600",
    "end": "274560"
  },
  {
    "text": "db instance",
    "start": "274560",
    "end": "276560"
  },
  {
    "text": "binary logs synced to the disk on the",
    "start": "276560",
    "end": "279680"
  },
  {
    "text": "replica db instance",
    "start": "279680",
    "end": "282479"
  },
  {
    "text": "bin log format on the replica is set to",
    "start": "282479",
    "end": "286479"
  },
  {
    "text": "row",
    "start": "286479",
    "end": "287840"
  },
  {
    "text": "replica creation lag",
    "start": "287840",
    "end": "290720"
  },
  {
    "text": "for more information about amazon rds",
    "start": "290720",
    "end": "294320"
  },
  {
    "text": "mysql replica lag see the associated",
    "start": "294320",
    "end": "297919"
  },
  {
    "text": "knowledge center article",
    "start": "297919",
    "end": "300560"
  },
  {
    "start": "299000",
    "end": "314000"
  },
  {
    "text": "thanks for watching and happy cloud",
    "start": "300560",
    "end": "302800"
  },
  {
    "text": "computing from all of us here at aws",
    "start": "302800",
    "end": "307330"
  },
  {
    "text": "[Music]",
    "start": "307330",
    "end": "312880"
  },
  {
    "text": "you",
    "start": "312880",
    "end": "314960"
  }
]