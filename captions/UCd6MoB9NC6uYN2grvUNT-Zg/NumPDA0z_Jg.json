[
  {
    "text": "hello my name is Simon Goldberg and I'm",
    "start": "60",
    "end": "2940"
  },
  {
    "text": "a blockchain specialist Solutions",
    "start": "2940",
    "end": "4500"
  },
  {
    "text": "architect at AWS in this video I'm going",
    "start": "4500",
    "end": "8220"
  },
  {
    "text": "to cover the difference between HTTP and",
    "start": "8220",
    "end": "10559"
  },
  {
    "text": "websocket requests and how they can",
    "start": "10559",
    "end": "12240"
  },
  {
    "text": "interact with an ethereum node whether",
    "start": "12240",
    "end": "14639"
  },
  {
    "text": "you are a blockchain Enthusiast or an",
    "start": "14639",
    "end": "16680"
  },
  {
    "text": "aspiring dap developer I will provide",
    "start": "16680",
    "end": "18960"
  },
  {
    "text": "key insights into how applications can",
    "start": "18960",
    "end": "21240"
  },
  {
    "text": "interact with the ethereum network let's",
    "start": "21240",
    "end": "24000"
  },
  {
    "text": "Dive Right In let's start with HTTP",
    "start": "24000",
    "end": "26400"
  },
  {
    "text": "request HTTP or the hypertext transfer",
    "start": "26400",
    "end": "29820"
  },
  {
    "text": "protocol is a foundation of any data",
    "start": "29820",
    "end": "32220"
  },
  {
    "text": "exchange on the web",
    "start": "32220",
    "end": "33780"
  },
  {
    "text": "the communication using HTTP is on a",
    "start": "33780",
    "end": "36899"
  },
  {
    "text": "request response basis meaning that each",
    "start": "36899",
    "end": "39300"
  },
  {
    "text": "request is isolated and does not have",
    "start": "39300",
    "end": "41760"
  },
  {
    "text": "any information from the previous",
    "start": "41760",
    "end": "43379"
  },
  {
    "text": "request when your application",
    "start": "43379",
    "end": "45719"
  },
  {
    "text": "communicates with an ethereum node via",
    "start": "45719",
    "end": "48120"
  },
  {
    "text": "HTTP it will send a request and the node",
    "start": "48120",
    "end": "51420"
  },
  {
    "text": "will process the request and then send",
    "start": "51420",
    "end": "53700"
  },
  {
    "text": "back a response",
    "start": "53700",
    "end": "55260"
  },
  {
    "text": "this is perfect for one-time or",
    "start": "55260",
    "end": "57420"
  },
  {
    "text": "occasional request for example if you",
    "start": "57420",
    "end": "60539"
  },
  {
    "text": "are querying the balance of an ethereum",
    "start": "60539",
    "end": "62699"
  },
  {
    "text": "address or sending a transaction HTTP is",
    "start": "62699",
    "end": "66180"
  },
  {
    "text": "the ideal choice",
    "start": "66180",
    "end": "67740"
  },
  {
    "text": "so how do we send an HTTP request to an",
    "start": "67740",
    "end": "70740"
  },
  {
    "text": "ethereum node let's look at an example",
    "start": "70740",
    "end": "73320"
  },
  {
    "text": "using the Json RPC API to make this type",
    "start": "73320",
    "end": "77159"
  },
  {
    "text": "of request here we are sending a post",
    "start": "77159",
    "end": "79799"
  },
  {
    "text": "request to our Amazon managed blockchain",
    "start": "79799",
    "end": "82140"
  },
  {
    "text": "mainnet ethereum node in the body of the",
    "start": "82140",
    "end": "85080"
  },
  {
    "text": "request we specified a Json RPC version",
    "start": "85080",
    "end": "87780"
  },
  {
    "text": "and the method eth block number which",
    "start": "87780",
    "end": "90420"
  },
  {
    "text": "Returns the most recently created block",
    "start": "90420",
    "end": "93540"
  },
  {
    "text": "I will now send a request to our",
    "start": "93540",
    "end": "95579"
  },
  {
    "text": "ethereum node and we will receive a",
    "start": "95579",
    "end": "97500"
  },
  {
    "text": "response that shows the most recently",
    "start": "97500",
    "end": "99540"
  },
  {
    "text": "created block",
    "start": "99540",
    "end": "100740"
  },
  {
    "text": "as you can see the latest block is 17",
    "start": "100740",
    "end": "103140"
  },
  {
    "text": "million five hundred thirty seven",
    "start": "103140",
    "end": "104880"
  },
  {
    "text": "thousand four hundred and seventy four",
    "start": "104880",
    "end": "107299"
  },
  {
    "text": "HTTP can be inefficient if you need",
    "start": "107299",
    "end": "109860"
  },
  {
    "text": "real-time updates from your ethereum",
    "start": "109860",
    "end": "111659"
  },
  {
    "text": "node because you'll have to keep pulling",
    "start": "111659",
    "end": "113820"
  },
  {
    "text": "the server over and over again in order",
    "start": "113820",
    "end": "115860"
  },
  {
    "text": "to get new information",
    "start": "115860",
    "end": "117899"
  },
  {
    "text": "this is where websockets come into the",
    "start": "117899",
    "end": "120060"
  },
  {
    "text": "picture",
    "start": "120060",
    "end": "121100"
  },
  {
    "text": "websockets provide a persistent",
    "start": "121100",
    "end": "123299"
  },
  {
    "text": "connection between the client and the",
    "start": "123299",
    "end": "125159"
  },
  {
    "text": "server once a websocket connection is",
    "start": "125159",
    "end": "128099"
  },
  {
    "text": "established it will stay open allowing",
    "start": "128099",
    "end": "130319"
  },
  {
    "text": "for real-time data transfer this makes",
    "start": "130319",
    "end": "133020"
  },
  {
    "text": "websockets ideal for situations where",
    "start": "133020",
    "end": "135660"
  },
  {
    "text": "data needs to be pushed from the server",
    "start": "135660",
    "end": "137400"
  },
  {
    "text": "to the client in real time",
    "start": "137400",
    "end": "139379"
  },
  {
    "text": "like getting live updates from your",
    "start": "139379",
    "end": "141120"
  },
  {
    "text": "ethereum node",
    "start": "141120",
    "end": "142760"
  },
  {
    "text": "websockets and ethereum go hand in hand",
    "start": "142760",
    "end": "145500"
  },
  {
    "text": "when it comes to subscribing to events",
    "start": "145500",
    "end": "147540"
  },
  {
    "text": "such as new blocks or transactions",
    "start": "147540",
    "end": "149760"
  },
  {
    "text": "involving specific ethereum addresses",
    "start": "149760",
    "end": "152099"
  },
  {
    "text": "you can establish a websocket connection",
    "start": "152099",
    "end": "154500"
  },
  {
    "text": "and listen for these events receiving",
    "start": "154500",
    "end": "156660"
  },
  {
    "text": "data in real time",
    "start": "156660",
    "end": "158459"
  },
  {
    "text": "the event-based model used in websockets",
    "start": "158459",
    "end": "160860"
  },
  {
    "text": "often proves to be more cost efficient",
    "start": "160860",
    "end": "163200"
  },
  {
    "text": "compared to the poll based strategy",
    "start": "163200",
    "end": "165120"
  },
  {
    "text": "which is inherently found in HTTP",
    "start": "165120",
    "end": "167400"
  },
  {
    "text": "request",
    "start": "167400",
    "end": "168480"
  },
  {
    "text": "although websockets are the only way to",
    "start": "168480",
    "end": "171060"
  },
  {
    "text": "make subscriptions they are also",
    "start": "171060",
    "end": "173220"
  },
  {
    "text": "generally a faster way to query all the",
    "start": "173220",
    "end": "175620"
  },
  {
    "text": "data you can already query with http",
    "start": "175620",
    "end": "178800"
  },
  {
    "text": "let's take a look at an example using",
    "start": "178800",
    "end": "181340"
  },
  {
    "text": "ethers.js a popular ethereum JavaScript",
    "start": "181340",
    "end": "184680"
  },
  {
    "text": "library this script creates a websocket",
    "start": "184680",
    "end": "187200"
  },
  {
    "text": "connection to the ethereum nerd and",
    "start": "187200",
    "end": "189000"
  },
  {
    "text": "subscribes to new block headers",
    "start": "189000",
    "end": "191099"
  },
  {
    "text": "while it is running every new block",
    "start": "191099",
    "end": "193379"
  },
  {
    "text": "number will be printed to the console in",
    "start": "193379",
    "end": "195420"
  },
  {
    "text": "real time",
    "start": "195420",
    "end": "196560"
  },
  {
    "text": "unlike with HTTP request there's no need",
    "start": "196560",
    "end": "199980"
  },
  {
    "text": "to constantly ask the server over and",
    "start": "199980",
    "end": "202200"
  },
  {
    "text": "over again for new data new data gets",
    "start": "202200",
    "end": "205319"
  },
  {
    "text": "pushed to us as soon as it is available",
    "start": "205319",
    "end": "207959"
  },
  {
    "text": "I would like to point out that the",
    "start": "207959",
    "end": "209720"
  },
  {
    "text": "ethers.js library abstracts away some of",
    "start": "209720",
    "end": "213120"
  },
  {
    "text": "the complexity of the Json RPC method",
    "start": "213120",
    "end": "215879"
  },
  {
    "text": "calls that we saw in the previous",
    "start": "215879",
    "end": "217200"
  },
  {
    "text": "example",
    "start": "217200",
    "end": "218819"
  },
  {
    "text": "in many cases you will want to use both",
    "start": "218819",
    "end": "222239"
  },
  {
    "text": "HTTP and websockets in your application",
    "start": "222239",
    "end": "225920"
  },
  {
    "text": "HTTP is commonly used for operations",
    "start": "225920",
    "end": "228720"
  },
  {
    "text": "such as sending a transaction or",
    "start": "228720",
    "end": "231239"
  },
  {
    "text": "checking the balance of an ethereum",
    "start": "231239",
    "end": "233159"
  },
  {
    "text": "account",
    "start": "233159",
    "end": "234480"
  },
  {
    "text": "a websocket connection not only supports",
    "start": "234480",
    "end": "236940"
  },
  {
    "text": "these functionalities but also provides",
    "start": "236940",
    "end": "239700"
  },
  {
    "text": "additional capabilities such as",
    "start": "239700",
    "end": "241500"
  },
  {
    "text": "subscribing to events or new blocks",
    "start": "241500",
    "end": "243540"
  },
  {
    "text": "offering a more versatile communication",
    "start": "243540",
    "end": "246180"
  },
  {
    "text": "model",
    "start": "246180",
    "end": "247560"
  },
  {
    "text": "this combination allows you to leverage",
    "start": "247560",
    "end": "249780"
  },
  {
    "text": "the benefits of both protocols enabling",
    "start": "249780",
    "end": "252599"
  },
  {
    "text": "you to tailor your application to your",
    "start": "252599",
    "end": "254640"
  },
  {
    "text": "specific needs to wrap things up HTTP",
    "start": "254640",
    "end": "258180"
  },
  {
    "text": "requests a request response",
    "start": "258180",
    "end": "259979"
  },
  {
    "text": "Communications which are great for",
    "start": "259979",
    "end": "262260"
  },
  {
    "text": "one-time data retrieval actions on the",
    "start": "262260",
    "end": "265320"
  },
  {
    "text": "other hand websockets provide a",
    "start": "265320",
    "end": "267240"
  },
  {
    "text": "persistent connection which is ideal for",
    "start": "267240",
    "end": "269220"
  },
  {
    "text": "real-time data transfer making it",
    "start": "269220",
    "end": "271560"
  },
  {
    "text": "perfect for subscribing to updates from",
    "start": "271560",
    "end": "273540"
  },
  {
    "text": "an ethereum node that is all for today's",
    "start": "273540",
    "end": "275820"
  },
  {
    "text": "tutorial thank you for joining me in",
    "start": "275820",
    "end": "278160"
  },
  {
    "text": "this expiration between HTTP and",
    "start": "278160",
    "end": "280440"
  },
  {
    "text": "websocket requests and how they can",
    "start": "280440",
    "end": "282180"
  },
  {
    "text": "interact with the ethereum network if",
    "start": "282180",
    "end": "284880"
  },
  {
    "text": "you're interested in deploying your own",
    "start": "284880",
    "end": "286560"
  },
  {
    "text": "ethereum node on Amazon manage",
    "start": "286560",
    "end": "288360"
  },
  {
    "text": "blockchain please check out the links in",
    "start": "288360",
    "end": "290400"
  },
  {
    "text": "the description keep learning and happy",
    "start": "290400",
    "end": "292860"
  },
  {
    "text": "development",
    "start": "292860",
    "end": "295520"
  }
]