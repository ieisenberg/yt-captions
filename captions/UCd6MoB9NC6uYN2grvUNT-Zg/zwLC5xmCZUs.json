[
  {
    "text": "okay hi good afternoon thank you very",
    "start": "3500",
    "end": "9269"
  },
  {
    "text": "much all for joining my name is John Toro I am the senior product manager for",
    "start": "9269",
    "end": "15230"
  },
  {
    "text": "AWS messaging the simple queuing service and the simple notification service and",
    "start": "15230",
    "end": "20720"
  },
  {
    "text": "by the time we're done today you're going to learn about how to build elastic scalable reliable applications",
    "start": "20720",
    "end": "28019"
  },
  {
    "text": "using sqs and SNS so let's get started",
    "start": "28019",
    "end": "33570"
  },
  {
    "text": "in life queues are everywhere if you think about waiting in line for lunch",
    "start": "33570",
    "end": "40440"
  },
  {
    "text": "today it may have been frustrating right because there are more people that can",
    "start": "40440",
    "end": "45600"
  },
  {
    "text": "possibly be served in the unit of time that have arrived and so this long line shows up and it's",
    "start": "45600",
    "end": "53340"
  },
  {
    "text": "so common that we don't notice it unless the line is long and frustrating but",
    "start": "53340",
    "end": "58680"
  },
  {
    "text": "actually queues solve a really important problem they are the only best option to",
    "start": "58680",
    "end": "64500"
  },
  {
    "text": "solve the problem of more people than capacity and they ensure that everybody",
    "start": "64500",
    "end": "70170"
  },
  {
    "text": "ultimately gets served consider the alternative where lots of people rush the desk and nobody gets served and the",
    "start": "70170",
    "end": "77070"
  },
  {
    "text": "guy runs away so queues solve this very fundamental problem in a really clean",
    "start": "77070",
    "end": "83220"
  },
  {
    "text": "and elegant way in life notifications",
    "start": "83220",
    "end": "88380"
  },
  {
    "text": "are everywhere if you think about the sign outside a restaurant that says we're open it's powerful because",
    "start": "88380",
    "end": "94439"
  },
  {
    "text": "everybody who wants to know about that can see it and the restaurant only needs to write it once and everybody who",
    "start": "94439",
    "end": "101490"
  },
  {
    "text": "walked by on the street and doesn't care doesn't have to read it so in like we",
    "start": "101490",
    "end": "107159"
  },
  {
    "text": "see queues and notifications everywhere solving these basic problems and it",
    "start": "107159",
    "end": "113430"
  },
  {
    "text": "turns out they're really important when you're building large distributed applications as well so AWS offers the",
    "start": "113430",
    "end": "121860"
  },
  {
    "text": "simple queueing service and the simple notification service we're going to talk about how they help make your",
    "start": "121860",
    "end": "127680"
  },
  {
    "text": "applications more robust let's start with ask us sqs is designed for environments where",
    "start": "127680",
    "end": "135159"
  },
  {
    "text": "you have producers and consumers a producer sending messages one at a time",
    "start": "135159",
    "end": "140500"
  },
  {
    "text": "or a group at a time that are going to be consumed by a service perhaps to",
    "start": "140500",
    "end": "145659"
  },
  {
    "text": "create thumbnails or do analysis or story in a database and SQS is designed",
    "start": "145659",
    "end": "152079"
  },
  {
    "text": "with the insight that eventually your service will become overloaded by too many requests and if it's not designed",
    "start": "152079",
    "end": "159430"
  },
  {
    "text": "to handle that onslaught it may fail you may drop some messages you may fail to",
    "start": "159430",
    "end": "164950"
  },
  {
    "text": "do the thing that you're trying to accomplish and here's how you can solve that problem with a queue rather than sending",
    "start": "164950",
    "end": "172569"
  },
  {
    "text": "messages directly from the producer to the service that's going to work on it instead you can send those messages to",
    "start": "172569",
    "end": "179709"
  },
  {
    "text": "the Q and the Q can accept them at any rate and at any size and when the",
    "start": "179709",
    "end": "186340"
  },
  {
    "text": "service is ready to consume them it can request the next message or the next group of messages and go to work and the",
    "start": "186340",
    "end": "195669"
  },
  {
    "text": "queue is going to hold on to that message until it's confirmed that the message has been processed by an",
    "start": "195669",
    "end": "201220"
  },
  {
    "text": "explicit request to delete the message so let's talk about it one more time",
    "start": "201220",
    "end": "207540"
  },
  {
    "text": "instead of sending directly from the producer to the service that consumes it",
    "start": "207540",
    "end": "212620"
  },
  {
    "text": "instead we see a chain of messages where the producer sends the consumer receives",
    "start": "212620",
    "end": "219340"
  },
  {
    "text": "and then the consumer deletes and this is powerful because it protects against",
    "start": "219340",
    "end": "225280"
  },
  {
    "text": "overloads and in fact SQS is designed to",
    "start": "225280",
    "end": "231190"
  },
  {
    "text": "be able to support that huge overload scenario and it's designed that it can't",
    "start": "231190",
    "end": "236500"
  },
  {
    "text": "get overloaded itself very high throughput it just works our customers put enormous lehigh numbers of messages",
    "start": "236500",
    "end": "243489"
  },
  {
    "text": "through a queue and in fact if the service on the other side does fall down",
    "start": "243489",
    "end": "250959"
  },
  {
    "text": "does have a backlog does need to be restarted the queue can absorb all those",
    "start": "250959",
    "end": "257560"
  },
  {
    "text": "messages and then when the service comes back online you can suck out the",
    "start": "257560",
    "end": "263260"
  },
  {
    "text": "messages from the just as fast as you're able to accept them so acute a few elements about how",
    "start": "263260",
    "end": "273010"
  },
  {
    "text": "we've designed our cues to help build more robust applications with sqs it's",
    "start": "273010",
    "end": "279610"
  },
  {
    "text": "designed to provide high durability which means you can be sure that the message gets where it's going it will be",
    "start": "279610",
    "end": "285610"
  },
  {
    "text": "delivered it won't get dropped it's going to hold those messages until you",
    "start": "285610",
    "end": "290740"
  },
  {
    "text": "explicitly delete them and it'll hold them in a backlog for up to two weeks",
    "start": "290740",
    "end": "296610"
  },
  {
    "text": "and you can watch this in progress you can use Amazon Cloud watch to study",
    "start": "296610",
    "end": "301690"
  },
  {
    "text": "things like the depth of the queue not just for purposes of tracking your billing but actually for integrating SQS",
    "start": "301690",
    "end": "308590"
  },
  {
    "text": "into your larger application you can talk a bit more about it later but there's a lot of powerful stuff you can",
    "start": "308590",
    "end": "314080"
  },
  {
    "text": "do when you can tell the difference between an empty queue and a very full one we talked about the three major",
    "start": "314080",
    "end": "323830"
  },
  {
    "text": "types of requests that sqs supports send receive and delete and every month the",
    "start": "323830",
    "end": "329440"
  },
  {
    "text": "first hundred thousand are free after that we charge one dollar for every",
    "start": "329440",
    "end": "335590"
  },
  {
    "text": "million requests and we treat batches of up to ten messages with the same price",
    "start": "335590",
    "end": "342790"
  },
  {
    "text": "as we charge for one message so actually you can send ten million messages for",
    "start": "342790",
    "end": "350170"
  },
  {
    "text": "the price of one million messages if you use batching the right way so that's sqs",
    "start": "350170",
    "end": "357340"
  },
  {
    "text": "let's talk about the simple notification service SNS SNS is designed for a",
    "start": "357340",
    "end": "363940"
  },
  {
    "text": "different environment where you have a producer that is sending messages to a service but actually may need to get",
    "start": "363940",
    "end": "371020"
  },
  {
    "text": "that identical message to multiple services and it's designed with the insight that eventually the producer",
    "start": "371020",
    "end": "378160"
  },
  {
    "text": "will become overwhelmed by too many services subscribing to it and that's going to overwhelm the primary work it's",
    "start": "378160",
    "end": "385270"
  },
  {
    "text": "trying to do of creating that information what you can use is the",
    "start": "385270",
    "end": "391930"
  },
  {
    "text": "simple notification service we call them topics and SNS top that decouples the producer and the",
    "start": "391930",
    "end": "398639"
  },
  {
    "text": "services that consume its messages the producer publishes messages to the SNS",
    "start": "398639",
    "end": "405940"
  },
  {
    "text": "topic just once and SNS is designed to fan out identical copies of that message",
    "start": "405940",
    "end": "413169"
  },
  {
    "text": "to each of the services that subscribe to it and when the service is subscribed to an SNS topic they don't interact at",
    "start": "413169",
    "end": "421720"
  },
  {
    "text": "all with the producer so it doesn't care if you have one or a thousand or many thousands subscribing",
    "start": "421720",
    "end": "429330"
  },
  {
    "text": "this gives SNS flexibility to publish to lots of different protocols you can send",
    "start": "429330",
    "end": "435940"
  },
  {
    "text": "in SNS notification to an HTTP endpoint you can send it as an email or an SMS",
    "start": "435940",
    "end": "441849"
  },
  {
    "text": "message and you can even subscribe individual sqs cubes to an SNS topic all",
    "start": "441849",
    "end": "450580"
  },
  {
    "text": "without any special action from the producer other than producing the information that all these endpoints are",
    "start": "450580",
    "end": "456909"
  },
  {
    "text": "going to want to consume so a bit about how we've designed this SNS is designed",
    "start": "456909",
    "end": "464020"
  },
  {
    "text": "for unlimited fan-out with an unbounded number of subscribers pulling down information for the service with",
    "start": "464020",
    "end": "470860"
  },
  {
    "text": "seamless support for the protocols I described either an HTTP endpoint email SMS or even publishing to an sqs queue",
    "start": "470860",
    "end": "477699"
  },
  {
    "text": "and you can define based on the application you're trying to build how many retries and just how fast those",
    "start": "477699",
    "end": "484569"
  },
  {
    "text": "messages can go through there's a built in cloud watch support as well with SNS",
    "start": "484569",
    "end": "492300"
  },
  {
    "text": "we break the pricing into two pieces you are charged for pushing individual",
    "start": "492300",
    "end": "498909"
  },
  {
    "text": "messages from the producer into the topic and secondly there is a different",
    "start": "498909",
    "end": "505960"
  },
  {
    "text": "price to deliver those messages to endpoints that varies according to the protocol that you're using what's pretty",
    "start": "505960",
    "end": "512380"
  },
  {
    "text": "cool is that you can push from SNS into an SNS and into an sqs queue for free so",
    "start": "512380",
    "end": "520120"
  },
  {
    "text": "it creates a pretty powerful scenario that we'll talk about where you can push from one topic to multiple queues",
    "start": "520120",
    "end": "528329"
  },
  {
    "text": "so that's SQS and SNS and there to services but in lots of ways",
    "start": "528930",
    "end": "534880"
  },
  {
    "text": "they work together to store and retrieve any volume of messages at any throughput",
    "start": "534880",
    "end": "540490"
  },
  {
    "text": "or size you'd like to throw at it and because it's a hosted AWS service you do it without any operational burden it",
    "start": "540490",
    "end": "547660"
  },
  {
    "text": "just works and our customers are pretty excited about just how resilient these services have been to the kinds of abuse",
    "start": "547660",
    "end": "554350"
  },
  {
    "text": "that wrote that they've thrown at it here's some of the larger ones that use",
    "start": "554350",
    "end": "560620"
  },
  {
    "text": "our service folks that you'll me here like Netflix and Twilio Shazam Amazon",
    "start": "560620",
    "end": "568870"
  },
  {
    "text": "internally we use sqs and SNS for mission-critical applications like the",
    "start": "568870",
    "end": "574390"
  },
  {
    "text": "Amazon comm order pipeline and on the Kindle we trust a lot in the resilience",
    "start": "574390",
    "end": "580870"
  },
  {
    "text": "and reliability and the scalability of these services and in fact we learned a",
    "start": "580870",
    "end": "586959"
  },
  {
    "text": "lot about how SQS and SNS make broader applications more powerful by speaking",
    "start": "586959",
    "end": "592630"
  },
  {
    "text": "to some of these customers and lots of others and it's helpful to think about",
    "start": "592630",
    "end": "598540"
  },
  {
    "text": "how sqs and SNS can fit into an application so what I'd like to do is",
    "start": "598540",
    "end": "605410"
  },
  {
    "text": "talk about a hypothetical startup that uses some of the best practices our customers tell us about this is the",
    "start": "605410",
    "end": "613329"
  },
  {
    "text": "imaginary startup cup of noodle which is a very simple but powerful app for",
    "start": "613329",
    "end": "619510"
  },
  {
    "text": "ordering food delivery to your house you can download the cup and noodle app and browse menus of local restaurants order",
    "start": "619510",
    "end": "628029"
  },
  {
    "text": "the dish you'd like to get and after it hits your credit card that food will arrive at your door something that is",
    "start": "628029",
    "end": "634779"
  },
  {
    "text": "pretty basic but important to hungry people and they make a promise just like",
    "start": "634779",
    "end": "640360"
  },
  {
    "text": "sqs and SNS make a promise that they're just going to work to both the customers",
    "start": "640360",
    "end": "645490"
  },
  {
    "text": "who order the food and the restaurants who trust them with delivering their business so if you think about the steps",
    "start": "645490",
    "end": "654370"
  },
  {
    "text": "you would need to go through to take food orders and deliver them there are some basic ones you're going to need to",
    "start": "654370",
    "end": "659740"
  },
  {
    "text": "collect credit card numbers you going to need to collect orders and you're going to need to hand them over to the restaurants that will deliver the",
    "start": "659740",
    "end": "666149"
  },
  {
    "text": "food but you may imagine there's lots below the surface too you can think",
    "start": "666149",
    "end": "671339"
  },
  {
    "text": "about reengagement how are we going to get folks who love cup and you love ordering food to come back how am I",
    "start": "671339",
    "end": "678209"
  },
  {
    "text": "going to remember what they've ordered and suggest new orders that they may like and let's say they order a pizza",
    "start": "678209",
    "end": "684329"
  },
  {
    "text": "and want to invite friends over maybe I can invite those friends to come to the house and actually try cup and noodle",
    "start": "684329",
    "end": "689850"
  },
  {
    "text": "themselves the next time they're hungry so lots of work that happens below the surface and lots of things that have to",
    "start": "689850",
    "end": "696420"
  },
  {
    "text": "happen all at once to get this very simple thing to work every single time if you're going to build an app like cup",
    "start": "696420",
    "end": "704850"
  },
  {
    "text": "o noodles you might do it like this with a mobile web application interacting",
    "start": "704850",
    "end": "710190"
  },
  {
    "text": "with an Internet API and three back-end services one for batch processing the",
    "start": "710190",
    "end": "716310"
  },
  {
    "text": "orders one for notifying the restaurants and one for personalizing the experience",
    "start": "716310",
    "end": "722490"
  },
  {
    "text": "in terms of the social network and remembering remembering favorite foods favorite orders that kind of thing so",
    "start": "722490",
    "end": "730410"
  },
  {
    "text": "let's add another layer of detail where this mobile web app or a web-based",
    "start": "730410",
    "end": "736470"
  },
  {
    "text": "client interacts with actually a pretty sophisticated distributed application",
    "start": "736470",
    "end": "742170"
  },
  {
    "text": "and we're going to spend a couple of minutes talking about how sqs and SNS",
    "start": "742170",
    "end": "747899"
  },
  {
    "text": "make this application better some of the things cup a noodle wants to do have to",
    "start": "747899",
    "end": "754740"
  },
  {
    "text": "happen in real time and actually don't interact with any kinds of queues or notifications for example if I want to",
    "start": "754740",
    "end": "761640"
  },
  {
    "text": "pull down the menu of a particular restaurant in my city I'm going to send that request from my mobile client",
    "start": "761640",
    "end": "768740"
  },
  {
    "text": "through an elastic load balancer and the auto scaling group on ec2 and it's going",
    "start": "768740",
    "end": "774540"
  },
  {
    "text": "to hit the database directly because there's no way to predict just what menu I'm going to want just which section of",
    "start": "774540",
    "end": "779850"
  },
  {
    "text": "the menu I'm going to want however even though there are some real-time",
    "start": "779850",
    "end": "785670"
  },
  {
    "text": "activities that have to happen on cup of noodle lots of stuff will happen asynchronously although still very fast",
    "start": "785670",
    "end": "792470"
  },
  {
    "text": "here's an example of that if I'm to save my favorite meal perhaps the meal I just ordered that is going to",
    "start": "792470",
    "end": "800340"
  },
  {
    "text": "happen very quickly but doesn't necessarily need to be ready right away because if I just ordered the dish I'm not going to order it again for it you",
    "start": "800340",
    "end": "807270"
  },
  {
    "text": "know you would guess at least several minutes so instead the food order will",
    "start": "807270",
    "end": "812490"
  },
  {
    "text": "go through the client ELB and auto scaling group into a queue called",
    "start": "812490",
    "end": "817770"
  },
  {
    "text": "favorite meals that's going to hold that now what's cool about this is if I place",
    "start": "817770",
    "end": "823710"
  },
  {
    "text": "an order at a peak ordering time and all the compute resources are busy handling",
    "start": "823710",
    "end": "829230"
  },
  {
    "text": "the critical work flow of those orders the favorite meals queue can hold the order until perhaps the middle of the",
    "start": "829230",
    "end": "836130"
  },
  {
    "text": "night when those compute resources are less expensive and then in the middle of the night that can get processed and the",
    "start": "836130",
    "end": "842850"
  },
  {
    "text": "favorite meal will be ready the next time I'm ready to order here's another",
    "start": "842850",
    "end": "848280"
  },
  {
    "text": "example if I'm going to place an order actually a lot of things have to happen in parallel I'm going to hit a credit",
    "start": "848280",
    "end": "856350"
  },
  {
    "text": "card processing service in real time perhaps to authorize this credit card but I'm also going to notify the",
    "start": "856350",
    "end": "863490"
  },
  {
    "text": "restaurant that has to deliver the food and I'm also going to hit my accounting",
    "start": "863490",
    "end": "869370"
  },
  {
    "text": "system in my data warehouse that I can use to improve the service and run my business so when you think about these",
    "start": "869370",
    "end": "878100"
  },
  {
    "text": "very basic but very powerful features perhaps you're asking why this is hard",
    "start": "878100",
    "end": "883380"
  },
  {
    "text": "well there are three things that we think you want to look for while you're",
    "start": "883380",
    "end": "888630"
  },
  {
    "text": "using a cueing and notification service we think about reliability where the",
    "start": "888630",
    "end": "894330"
  },
  {
    "text": "service is highly available and the messages are designed to be durable meaning they will get where they're",
    "start": "894330",
    "end": "900270"
  },
  {
    "text": "going and they're not going to get dropped we think about AWS caliber",
    "start": "900270",
    "end": "905730"
  },
  {
    "text": "scalability where you can throw any level of throughput at the system at any level of backlog and elasticity in the",
    "start": "905730",
    "end": "914250"
  },
  {
    "text": "sense that you don't need to provision that capacity in advance finally we",
    "start": "914250",
    "end": "920400"
  },
  {
    "text": "think it should be simple enough that you can build this into your application without becoming experts in queueing theory and instead focusing on",
    "start": "920400",
    "end": "926810"
  },
  {
    "text": "value-added work that you bring to your business and then company will brings to it biz its",
    "start": "926810",
    "end": "931890"
  },
  {
    "text": "business so let's talk about each of these four cup of noodle availability is",
    "start": "931890",
    "end": "938280"
  },
  {
    "text": "really important because downtime means lost customers and lost trust now Verner",
    "start": "938280",
    "end": "945420"
  },
  {
    "text": "Vogel's Vogel's just got done earlier today telling us about we should never assume that errors are uncorrelated",
    "start": "945420",
    "end": "953480"
  },
  {
    "text": "right well if cup of noodle system goes down it's not likely to be in the middle",
    "start": "953480",
    "end": "958800"
  },
  {
    "text": "of the night but rather it's likely to be at a peak period where they're going to lose lots of orders and lots of trust",
    "start": "958800",
    "end": "964100"
  },
  {
    "text": "so it's really important that they build high availability into their application",
    "start": "964100",
    "end": "970790"
  },
  {
    "text": "let's see where that plays out here are a couple of examples for example the",
    "start": "970790",
    "end": "978090"
  },
  {
    "text": "credit card billing system way at the top right may have to deal with an external service that is not part of the",
    "start": "978090",
    "end": "985590"
  },
  {
    "text": "AWS application designed by copy noodle and that service may be unreliable or",
    "start": "985590",
    "end": "990960"
  },
  {
    "text": "may be slow we don't want to allow hiccups in that service to stop in order",
    "start": "990960",
    "end": "996510"
  },
  {
    "text": "in its tracks and so you can place an sqs queue in front of it it means you",
    "start": "996510",
    "end": "1002060"
  },
  {
    "text": "can turn low availability services into high availability services with sqs and",
    "start": "1002060",
    "end": "1008030"
  },
  {
    "text": "as soon as the credit card billing system comes back up you can then put",
    "start": "1008030",
    "end": "1013040"
  },
  {
    "text": "the order through we spoke a little bit earlier about saving favorite meals",
    "start": "1013040",
    "end": "1018590"
  },
  {
    "text": "think about crawling that users social network it may add value but the user is",
    "start": "1018590",
    "end": "1024410"
  },
  {
    "text": "going to be frustrated if you hold up their order because say Facebook was delayed so you can then hold the social",
    "start": "1024410",
    "end": "1032209"
  },
  {
    "text": "network crawling instructions until a time when Facebook is available or until",
    "start": "1032210",
    "end": "1037760"
  },
  {
    "text": "a time when your compute resources are less expensive here's one more when we",
    "start": "1037760",
    "end": "1045350"
  },
  {
    "text": "spoke about the pricing for sqs one thing I didn't add a price for is",
    "start": "1045350",
    "end": "1050470"
  },
  {
    "text": "individual Q's because there is no cost to add a queue sending the same number",
    "start": "1050470",
    "end": "1055820"
  },
  {
    "text": "of messages it has an identical cost however many Q's you use and so here cuppa noodle has",
    "start": "1055820",
    "end": "1063130"
  },
  {
    "text": "designed their application with one cue in front of each restaurant that they serve and it's powerful because if there",
    "start": "1063130",
    "end": "1070539"
  },
  {
    "text": "is a delay in restaurant to the orders can still keep flowing through two",
    "start": "1070539",
    "end": "1075880"
  },
  {
    "text": "restaurants one and three and the rest so that's availability durability is",
    "start": "1075880",
    "end": "1083380"
  },
  {
    "text": "really important for cup of noodle too because their customers and the restaurants trust that they're going to",
    "start": "1083380",
    "end": "1088660"
  },
  {
    "text": "do what they said they would do every time and so I need to process the order",
    "start": "1088660",
    "end": "1094690"
  },
  {
    "text": "fully even worse than dropping the order completely would be dropping in the",
    "start": "1094690",
    "end": "1100780"
  },
  {
    "text": "order completely but still charging the customer for it and actually it's pretty frustrating for the merchants if I",
    "start": "1100780",
    "end": "1106780"
  },
  {
    "text": "charge the customer for it and I don't deliver the food so it's really",
    "start": "1106780",
    "end": "1112630"
  },
  {
    "text": "important that the message is going through the queue are durable and let's think about where it's important to use",
    "start": "1112630",
    "end": "1118840"
  },
  {
    "text": "cueing and notifications to avoid losing messages here we can see that cup of",
    "start": "1118840",
    "end": "1126460"
  },
  {
    "text": "noodle has used this SNS topic called orders to fan out each of its messages",
    "start": "1126460",
    "end": "1131919"
  },
  {
    "text": "to the places it's going to have to go one SNS topic called orders sends an",
    "start": "1131919",
    "end": "1137650"
  },
  {
    "text": "identical copy of the order to the restaurant as well as the data warehouse",
    "start": "1137650",
    "end": "1142830"
  },
  {
    "text": "the payments and the billing systems and you can ensure that identical copies of",
    "start": "1142830",
    "end": "1148630"
  },
  {
    "text": "that order will reach each of those queues and because sqs is is designed for high viewer ability you can ensure",
    "start": "1148630",
    "end": "1154929"
  },
  {
    "text": "that the messages will be delivered to the service that is looking for them",
    "start": "1154929",
    "end": "1160408"
  },
  {
    "text": "let's talk about scalability because not every day is the same for company they",
    "start": "1160890",
    "end": "1166150"
  },
  {
    "text": "have to serve orders that come in on a Wednesday afternoon which may be a slow period but they also have to serve",
    "start": "1166150",
    "end": "1172419"
  },
  {
    "text": "orders during the Superbowl which may be a huge spike at Amazon we think about Black Friday and Cyber Monday and those",
    "start": "1172419",
    "end": "1180100"
  },
  {
    "text": "are very different days than a typical day so we think about how to build",
    "start": "1180100",
    "end": "1185289"
  },
  {
    "text": "scalability into applications and you can see that using SQS",
    "start": "1185289",
    "end": "1191090"
  },
  {
    "text": "SNS we can build scalability into company law here each restaurant may be",
    "start": "1191090",
    "end": "1196880"
  },
  {
    "text": "able to hope to handle a maximum of 10 ref 10 orders per minute but because",
    "start": "1196880",
    "end": "1202790"
  },
  {
    "text": "there is a queue in front of the restaurant the orders will build in a",
    "start": "1202790",
    "end": "1208550"
  },
  {
    "text": "backlog until the restaurant is able to handle them and if the restaurant then staffs up and is able to handle now 40",
    "start": "1208550",
    "end": "1215840"
  },
  {
    "text": "orders per minute they can draw down those orders just as fast as they can handle them and ultimately try to",
    "start": "1215840",
    "end": "1223280"
  },
  {
    "text": "achieve the rate of the orders that are coming in so they can serve everybody at",
    "start": "1223280",
    "end": "1230330"
  },
  {
    "text": "the same time as we're thinking about scalability we also have to think about elasticity how can I handle these huge",
    "start": "1230330",
    "end": "1236240"
  },
  {
    "text": "backlogs these huge throughputs without provisioning for them in advance because it would be expensive to provision for",
    "start": "1236240",
    "end": "1242240"
  },
  {
    "text": "example for the Super Bowl on a typical Wednesday afternoon sqs and SNS lets you",
    "start": "1242240",
    "end": "1249350"
  },
  {
    "text": "do this we spoke about how unused queues are free if you think about all of the",
    "start": "1249350",
    "end": "1257570"
  },
  {
    "text": "queues and the topics and the messages that are flowing through them well it's",
    "start": "1257570",
    "end": "1262970"
  },
  {
    "text": "not quite free it's pretty astonishing to think about the fact that this pair",
    "start": "1262970",
    "end": "1268550"
  },
  {
    "text": "of services adds less than one hundredth of a penny to every order that flows",
    "start": "1268550",
    "end": "1274850"
  },
  {
    "text": "through Cup and doodle and it means that you can get this elasticity at a pretty",
    "start": "1274850",
    "end": "1280550"
  },
  {
    "text": "cost-effective rate finally we'll talk",
    "start": "1280550",
    "end": "1285860"
  },
  {
    "text": "about simplicity because couple noodle is great at lots of things they're great at understanding what are the best",
    "start": "1285860",
    "end": "1291710"
  },
  {
    "text": "restaurants in town how to get new ones how to get new customers excited about it how to enter new cities what they",
    "start": "1291710",
    "end": "1298580"
  },
  {
    "text": "don't spend a lot of time thinking about is how to process high volumes of messages in high backlogs and so we've",
    "start": "1298580",
    "end": "1305270"
  },
  {
    "text": "worked really hard to ensure that you can use sqs and SNS simply they are",
    "start": "1305270",
    "end": "1312860"
  },
  {
    "text": "instantly available with no provisioning time and we're going to do a demo that shows that you can access them in every",
    "start": "1312860",
    "end": "1319910"
  },
  {
    "text": "region of AWS 9 globally and they connect automatically to cloud",
    "start": "1319910",
    "end": "1325580"
  },
  {
    "text": "watch so you can watch what's happening and you can build them into your broader applications now it's difficult to show",
    "start": "1325580",
    "end": "1334429"
  },
  {
    "text": "we're on this architectural diagram simplicity is important because simplicity is important everywhere",
    "start": "1334429",
    "end": "1340600"
  },
  {
    "text": "instead what I'd like to do is show a live demo of how sqs and SNS work",
    "start": "1340600",
    "end": "1346580"
  },
  {
    "text": "together and what they can do so I'm going to invite claiming work from the",
    "start": "1346580",
    "end": "1351980"
  },
  {
    "text": "sqs SNS team to take us through that",
    "start": "1351980",
    "end": "1355900"
  },
  {
    "text": "thanks John is this can you guys hear me all right",
    "start": "1360970",
    "end": "1367150"
  },
  {
    "text": "that's a that's impressive I got really loud very quickly so so John has done a",
    "start": "1367150",
    "end": "1373909"
  },
  {
    "text": "good job of taking you through how it's important for messaging systems to be",
    "start": "1373909",
    "end": "1380289"
  },
  {
    "text": "reliable and scalable and simple what I'd like to do is to take a few minutes to using some demo applications that we",
    "start": "1380289",
    "end": "1390950"
  },
  {
    "text": "constructed specifically to kind of show this stuff to you and the AWS sqs and",
    "start": "1390950",
    "end": "1396110"
  },
  {
    "text": "SNS management consoles take you through how that reliability and simplicity and",
    "start": "1396110",
    "end": "1401840"
  },
  {
    "text": "scalability is achieved so to do that so",
    "start": "1401840",
    "end": "1408409"
  },
  {
    "text": "just as a quick overview this is the demo application that we're going to be",
    "start": "1408409",
    "end": "1413539"
  },
  {
    "text": "using for the next few minutes the idea is that we can take a look at a queue in the middle we can analyze the backlog in",
    "start": "1413539",
    "end": "1420980"
  },
  {
    "text": "real time we can modify the producer behavior on the Left see how the",
    "start": "1420980",
    "end": "1427070"
  },
  {
    "text": "producer rate down here and the same thing on the right we can look at the consumer behavior control the rate that",
    "start": "1427070",
    "end": "1433250"
  },
  {
    "text": "consumers are receiving messages and deleting messages now a little bit more",
    "start": "1433250",
    "end": "1438500"
  },
  {
    "text": "info about this application everything you see here today's is actually running completely on AWS we're using all of the",
    "start": "1438500",
    "end": "1445789"
  },
  {
    "text": "publicly available sqs and SNS api's this application is actually a just a",
    "start": "1445789",
    "end": "1451190"
  },
  {
    "text": "java web application deployed to elastic beanstalk running on an ec2 instance",
    "start": "1451190",
    "end": "1456269"
  },
  {
    "text": "so to begin I want to talk about probably the simplest building block which is the single you see no single",
    "start": "1456269",
    "end": "1462720"
  },
  {
    "text": "queue with producers and consumers in the cup of noodle world that would be something like the the credit card",
    "start": "1462720",
    "end": "1467850"
  },
  {
    "text": "billing queue so this is the sqs management console and we'll start by",
    "start": "1467850",
    "end": "1473549"
  },
  {
    "text": "creating the queue so we'll call it credit card billing and as soon as",
    "start": "1473549",
    "end": "1480779"
  },
  {
    "text": "that's created we will then take our queue and begin looking at it now we",
    "start": "1480779",
    "end": "1489299"
  },
  {
    "text": "just created this queue which means that there's no backlog so there's zero messages in it and we can instantly",
    "start": "1489299",
    "end": "1496019"
  },
  {
    "text": "begin placing messages in the queue so this is this is kind of like when a couple noodle starts testing their",
    "start": "1496019",
    "end": "1501419"
  },
  {
    "text": "application right they're sending a couple of messages every second and in the center you can see that there's a backlog growing in the queue before I go",
    "start": "1501419",
    "end": "1509279"
  },
  {
    "text": "further just a quick little aside about the what you're the visualization you're seeing here I'm updating these metrics",
    "start": "1509279",
    "end": "1516450"
  },
  {
    "text": "rather rapidly every one or two seconds and that results in some jitter you'll see a it goes between two and three or",
    "start": "1516450",
    "end": "1522629"
  },
  {
    "text": "the backlog is not exactly consistent when these metrics are pushed to things",
    "start": "1522629",
    "end": "1527669"
  },
  {
    "text": "like cloud watch because it's at you know it's sampled at a lower rate you actually end up with a much smoother set",
    "start": "1527669",
    "end": "1533820"
  },
  {
    "text": "of metrics so imagine then that you know we have these keep this Q and a backlog is growing and then a couple noodle",
    "start": "1533820",
    "end": "1541470"
  },
  {
    "text": "optimizes their ordering process and now it's much faster so now the rate that these producers are in queuing messages",
    "start": "1541470",
    "end": "1547859"
  },
  {
    "text": "goes up and they start in queuing hundreds of messages every second the queue just absorbs that backlog and it",
    "start": "1547859",
    "end": "1554970"
  },
  {
    "text": "continues to grow then as you would imagine you know as John talked about",
    "start": "1554970",
    "end": "1561149"
  },
  {
    "text": "batch sizes if for whatever reason the they start using batching to in queue",
    "start": "1561149",
    "end": "1566580"
  },
  {
    "text": "items as they increase their batch size the throughput that they're achieving from those same number of producers",
    "start": "1566580",
    "end": "1572989"
  },
  {
    "text": "increases so now those same two producers are producing a thousand or so",
    "start": "1572989",
    "end": "1578220"
  },
  {
    "text": "messages every second and then this SQS queue that we created just a minute ago so then you say you know that's awesome",
    "start": "1578220",
    "end": "1584190"
  },
  {
    "text": "but then what happens when the superbowl hits right and all of a sudden you have new producers well as we add new",
    "start": "1584190",
    "end": "1590710"
  },
  {
    "text": "producers right the rate that messages are being in placed in the sqs queue goes up as you would expect",
    "start": "1590710",
    "end": "1599190"
  },
  {
    "text": "correspondingly the backlog size grows at a faster rate so you're thinking this",
    "start": "1599190",
    "end": "1604480"
  },
  {
    "text": "is great we have a way to waste cc2 resources into pay money to sqs to put",
    "start": "1604480",
    "end": "1609760"
  },
  {
    "text": "messages in a queue we don't want but ideally right these are messages that a customer cares about so then what we",
    "start": "1609760",
    "end": "1615820"
  },
  {
    "text": "want to do is we want to spin up a consumer so as we spin up the consumer",
    "start": "1615820",
    "end": "1621730"
  },
  {
    "text": "we can start with one and well how about four then right as you can see right now",
    "start": "1621730",
    "end": "1627130"
  },
  {
    "text": "the producers are producing messages at a higher rate than the consumers are and the backlog continues to grow the ideal",
    "start": "1627130",
    "end": "1634900"
  },
  {
    "text": "situation right is for us to spin up enough consumers that we can quickly drain the backlog and then the consumers",
    "start": "1634900",
    "end": "1641500"
  },
  {
    "text": "will automatically adjust to match the rate of the producers so what we'll do is we'll switch over here and we'll spin",
    "start": "1641500",
    "end": "1646539"
  },
  {
    "text": "up 60 or so consumers instantly now we're consuming twenty or so thousand messages every second and with that the",
    "start": "1646539",
    "end": "1653950"
  },
  {
    "text": "backlog begins to decrease rather than increase as we saw before now we're",
    "start": "1653950",
    "end": "1659799"
  },
  {
    "text": "going to let this drain for a second you know we talked about reliability right every one of these messages that you see",
    "start": "1659799",
    "end": "1665710"
  },
  {
    "text": "is guaranteed durable right it we guarantee that you will not lose that message on top of that right",
    "start": "1665710",
    "end": "1673690"
  },
  {
    "text": "as far as scalability goes we've gone from a queue we created minutes ago to you know having one message or something",
    "start": "1673690",
    "end": "1681159"
  },
  {
    "text": "per second now we're sending tens of thousands of messages every second through it and then thirdly we talk",
    "start": "1681159",
    "end": "1687880"
  },
  {
    "text": "about that elasticity right I didn't have to call up AWS or spin up a bunch of resources and wait for them to get",
    "start": "1687880",
    "end": "1693730"
  },
  {
    "text": "there you just use it and it's available instantly so now that we've drained this backlog the cool thing is that we were",
    "start": "1693730",
    "end": "1700390"
  },
  {
    "text": "consuming at a very high rate the consumers automatically adjust to where now the queue is in equilibrium every",
    "start": "1700390",
    "end": "1706630"
  },
  {
    "text": "message that gets produced is instantly picked up by a consumer the backlog spy's stays at zero messages are",
    "start": "1706630",
    "end": "1712720"
  },
  {
    "text": "processed very quickly and everything is good and of course if at any time your",
    "start": "1712720",
    "end": "1717880"
  },
  {
    "text": "consumers stop for whatever reason the queue is there to protect you and the backlog begins to",
    "start": "1717880",
    "end": "1723950"
  },
  {
    "text": "grow so this is nice but you might be wondering what happens when you know we",
    "start": "1723950",
    "end": "1729740"
  },
  {
    "text": "built up butts this is 500,000 or so messages what what happens when you have a lot of messages",
    "start": "1729740",
    "end": "1735050"
  },
  {
    "text": "does this sqs handle that well so what I did was uh earlier I started a",
    "start": "1735050",
    "end": "1740470"
  },
  {
    "text": "simulation right to build a larger backlog and I want to switch over to that now so this is that simulation so",
    "start": "1740470",
    "end": "1747770"
  },
  {
    "text": "we have a cube that created earlier that now has about 260 million messages in it",
    "start": "1747770",
    "end": "1752830"
  },
  {
    "text": "we have a producer that is in queuing at a rate of a thousand per second unfortunately right when you have a",
    "start": "1752830",
    "end": "1759710"
  },
  {
    "text": "backlog you can't turn the producers off that's why you have the backlog so it's critically important that your queuing",
    "start": "1759710",
    "end": "1765800"
  },
  {
    "text": "system is able to give you the throughput not just to meet your old",
    "start": "1765800",
    "end": "1771050"
  },
  {
    "text": "throughput you know when you were in a steady state but you have to have enough throughput enough scalability and elasticity right that you can quickly",
    "start": "1771050",
    "end": "1777560"
  },
  {
    "text": "catch up to that backlog so let's see what happens when we turn up our consumers back on so in this world we",
    "start": "1777560",
    "end": "1784550"
  },
  {
    "text": "simulate hey we finally got our downstream service fix and everything's better instantly you can see that the",
    "start": "1784550",
    "end": "1791180"
  },
  {
    "text": "backlog instead of continuing to grow it begins to drop at that point right we're",
    "start": "1791180",
    "end": "1797510"
  },
  {
    "text": "now reversing the trend we're no longer growing and we're starting to reduce the size of the backlog as we continue to",
    "start": "1797510",
    "end": "1803660"
  },
  {
    "text": "add more and more consumers what you'll notice is that the rate that you're able to receive messages from the queue",
    "start": "1803660",
    "end": "1809150"
  },
  {
    "text": "continues to increase why is that important because when you're writing",
    "start": "1809150",
    "end": "1815090"
  },
  {
    "text": "your applications when you're designing couple noodle you don't want to think about the scalability of your queuing",
    "start": "1815090",
    "end": "1821420"
  },
  {
    "text": "system right the whole point of a queue is to protect you when something else is going wrong in those situations you just",
    "start": "1821420",
    "end": "1828320"
  },
  {
    "text": "want it to behave exactly like this so unfortunately even at extremely high",
    "start": "1828320",
    "end": "1834200"
  },
  {
    "text": "throughput right it's going to take quite a while to drain this even at 50",
    "start": "1834200",
    "end": "1839420"
  },
  {
    "text": "thousand or 40,000 messages a second it's going to take a while to drain this 265 million message backlog so instead",
    "start": "1839420",
    "end": "1846020"
  },
  {
    "text": "of watching that for the rest of the day what I'd like to do is switch over to",
    "start": "1846020",
    "end": "1851080"
  },
  {
    "text": "the other critical use case that was used by cup of noodle and is used by lots of our customers that use case is",
    "start": "1851080",
    "end": "1857970"
  },
  {
    "text": "integrating SNS and SQS together by doing so what it allows you to do is to",
    "start": "1857970",
    "end": "1865360"
  },
  {
    "text": "take a single stream of messages and to distribute that to as many consumers as",
    "start": "1865360",
    "end": "1870880"
  },
  {
    "text": "care about it now it's some extent right that's kind of this vague theoretical",
    "start": "1870880",
    "end": "1876400"
  },
  {
    "text": "idea but the experience that you've all probably had is you've been a team that produces something that people care",
    "start": "1876400",
    "end": "1881590"
  },
  {
    "text": "about the ordering team or the reservation team or something and some new team spins up oh we want to we want",
    "start": "1881590",
    "end": "1887560"
  },
  {
    "text": "to get all that data so we can put it through the data warehouse and you're like oh now I have to go update my configuration and publish it to a new",
    "start": "1887560",
    "end": "1893800"
  },
  {
    "text": "system sqs and SNS makes it so that that other team doesn't even have to talk to",
    "start": "1893800",
    "end": "1899230"
  },
  {
    "text": "you they can just go get your stream of messages and not and not have to worry about it so to demonstrate that what",
    "start": "1899230",
    "end": "1906040"
  },
  {
    "text": "we'll do is we'll start by creating an SNS topic will use the SNS management console and we'll continue with the",
    "start": "1906040",
    "end": "1912010"
  },
  {
    "text": "orders idea by creating a topic named",
    "start": "1912010",
    "end": "1918400"
  },
  {
    "text": "hoarders topic once we created that we'll place it in a simulation and we'll",
    "start": "1918400",
    "end": "1926770"
  },
  {
    "text": "begin sending you know some messages through it at this point the topic exists right it's instantly available we",
    "start": "1926770",
    "end": "1933220"
  },
  {
    "text": "created a second to go but the messages actually aren't going anywhere because no one subscribed no one's interested so",
    "start": "1933220",
    "end": "1940000"
  },
  {
    "text": "what we'll do is imagine that you know there's a restaurant notification team right for a cup of noodle and they need",
    "start": "1940000",
    "end": "1946660"
  },
  {
    "text": "to get all of the order messages and they want to put them in their queue so",
    "start": "1946660",
    "end": "1953860"
  },
  {
    "text": "that they can process them as quickly or as slowly as they're able to so the",
    "start": "1953860",
    "end": "1959380"
  },
  {
    "text": "restaurant notification team creates their queue and as soon as they do so",
    "start": "1959380",
    "end": "1965020"
  },
  {
    "text": "right nothing's in the queue the reason for that is that there's not as the sqs Cube needs to be subscribed to the SNS",
    "start": "1965020",
    "end": "1972850"
  },
  {
    "text": "topic doing that is super easy all we have to do is go back to the sqs console",
    "start": "1972850",
    "end": "1978690"
  },
  {
    "text": "say subscribe queue to SNS topic click orders topic",
    "start": "1978690",
    "end": "1985080"
  },
  {
    "text": "and we're subscribed as soon as we're subscribed you see the messages that are",
    "start": "1985080",
    "end": "1991780"
  },
  {
    "text": "being published of that topic from a team totally separated or even a different company separated from this",
    "start": "1991780",
    "end": "1996880"
  },
  {
    "text": "other queueing team they're now receiving those messages they didn't have to talk to each other no communication easy the cool thing about",
    "start": "1996880",
    "end": "2004650"
  },
  {
    "text": "this right is that you get all of the same benefits you do with a normal sq sq I can have no consumers I can spend my",
    "start": "2004650",
    "end": "2011250"
  },
  {
    "text": "consumers up and consume my back log as quickly as I like and once I've consumed that back log my consumers automatically",
    "start": "2011250",
    "end": "2018240"
  },
  {
    "text": "adjust to match the rate of my producers so this is great but you might be",
    "start": "2018240",
    "end": "2025170"
  },
  {
    "text": "thinking well we're only looking at one producer and one consumer here how is that any different than what we saw",
    "start": "2025170",
    "end": "2030570"
  },
  {
    "text": "earlier with the queue well it's not where the real value comes in with SNS topics out fanning out to multiple sqs",
    "start": "2030570",
    "end": "2037500"
  },
  {
    "text": "queues is when the data warehouse team wants those same messages right and this",
    "start": "2037500",
    "end": "2045540"
  },
  {
    "text": "is where normally as a developer you're thinking I've got to go to a bunch of config changes in code pushes so we have",
    "start": "2045540",
    "end": "2053250"
  },
  {
    "text": "this new queue it's empty we go back we",
    "start": "2053250",
    "end": "2058290"
  },
  {
    "text": "say okay subscribe",
    "start": "2058290",
    "end": "2061669"
  },
  {
    "text": "and as soon as that's done the data warehouse is getting all the orders or whatever messages are being published",
    "start": "2067010",
    "end": "2073760"
  },
  {
    "text": "that topic and the beautiful thing about this architecture is that the data warehouse team can't affect the producer",
    "start": "2073760",
    "end": "2080540"
  },
  {
    "text": "who's producing the orders nor can it affect the restaurant notification team notice the restaurant under plication",
    "start": "2080540",
    "end": "2085970"
  },
  {
    "text": "team is processing messages just like they were earlier right order comes in they're taking care of it",
    "start": "2085970",
    "end": "2091490"
  },
  {
    "text": "immediately now the data warehouse team something's wrong with their stuff they're building this giant backlog and",
    "start": "2091490",
    "end": "2097070"
  },
  {
    "text": "as soon as they begin to drain their backlog they haven't but they they can",
    "start": "2097070",
    "end": "2102260"
  },
  {
    "text": "do so but they have no effect on anybody else right so you know using these",
    "start": "2102260",
    "end": "2108110"
  },
  {
    "text": "together right you can build extremely powerful architectures these are really just the building blocks and you can",
    "start": "2108110",
    "end": "2113960"
  },
  {
    "text": "have cascading architectures what-have-you but the key is is that",
    "start": "2113960",
    "end": "2119000"
  },
  {
    "text": "using these topics and using them together with queues write all of your messages we've seen here are durable all",
    "start": "2119000",
    "end": "2124160"
  },
  {
    "text": "of this is running on the real system everything is instantly available and it's extremely simple to set up so with",
    "start": "2124160",
    "end": "2131570"
  },
  {
    "text": "that I'm going to hand it back over to John who's going to talk some more about some best practices and some new",
    "start": "2131570",
    "end": "2136910"
  },
  {
    "text": "features and SQS misenus sighs gotta do",
    "start": "2136910",
    "end": "2147230"
  },
  {
    "text": "that clicker clicker",
    "start": "2147230",
    "end": "2151119"
  },
  {
    "text": "Cley thanks a lot what's pretty cool about that demo is it's live on the sqs",
    "start": "2153530",
    "end": "2160680"
  },
  {
    "text": "and SNS features that everyone here can use today and hopefully that inspires",
    "start": "2160680",
    "end": "2166079"
  },
  {
    "text": "you to have a look as I said we learn a lot of cool stuff about how to how to",
    "start": "2166079",
    "end": "2175440"
  },
  {
    "text": "best use we learn a lot of cool stuff",
    "start": "2175440",
    "end": "2180510"
  },
  {
    "text": "about how to best use sqs and SNS from our customers and what I'd like to do is",
    "start": "2180510",
    "end": "2186780"
  },
  {
    "text": "share some of those best practices with you the first is that you can use",
    "start": "2186780",
    "end": "2191940"
  },
  {
    "text": "batching of send receive and delete messages to pack ten messages into one",
    "start": "2191940",
    "end": "2201089"
  },
  {
    "text": "request for the price of one and you can actually do this for lower fees and for",
    "start": "2201089",
    "end": "2207599"
  },
  {
    "text": "higher throughput and higher efficiency and what you'll see is you have to",
    "start": "2207599",
    "end": "2213420"
  },
  {
    "text": "accomplish batching each of these request types in different ways it's",
    "start": "2213420",
    "end": "2218549"
  },
  {
    "text": "probably most straightforward to think about batching a receive request because",
    "start": "2218549",
    "end": "2223890"
  },
  {
    "text": "if there are at least ten messages you can draw down the next ten and similarly",
    "start": "2223890",
    "end": "2229589"
  },
  {
    "text": "if there are at least ten messages in your queue you can delete at least ten",
    "start": "2229589",
    "end": "2235549"
  },
  {
    "text": "when you think about batching your send messages it's a little bit tricky because they may come in one at a time",
    "start": "2235549",
    "end": "2242730"
  },
  {
    "text": "your orders to cup noodle may come in one at a time and so it can be difficult",
    "start": "2242730",
    "end": "2249180"
  },
  {
    "text": "to think about how can I then aggregate those into a batch and some of our customers have actually built special",
    "start": "2249180",
    "end": "2256710"
  },
  {
    "text": "logic that holds on to those messages and automatically groups them for easier batching we'll talk about a better way",
    "start": "2256710",
    "end": "2263400"
  },
  {
    "text": "to accomplish that in just a minute you can also use sqs queues as part of a",
    "start": "2263400",
    "end": "2269880"
  },
  {
    "text": "broader application that scales automatically to efficiently draw down to queue when it's large but can serve",
    "start": "2269880",
    "end": "2277970"
  },
  {
    "text": "resources and expense when the queue is not large and you can use the Amazon AWS cloud",
    "start": "2277970",
    "end": "2286980"
  },
  {
    "text": "watch metric of queue depth that tells you how many messages are waiting as a",
    "start": "2286980",
    "end": "2292140"
  },
  {
    "text": "trigger for your auto scaling group so that when I have 50 messages in the queue for example I may add more",
    "start": "2292140",
    "end": "2298440"
  },
  {
    "text": "consumers and draw it back down to a steady-state batching and auto scaling",
    "start": "2298440",
    "end": "2307099"
  },
  {
    "text": "now it's been a really exciting last couple of months on the messaging payment and we have some new features",
    "start": "2307460",
    "end": "2314190"
  },
  {
    "text": "that we'd like to tell you about that can help achieve those best practices more easily long polling was released",
    "start": "2314190",
    "end": "2323279"
  },
  {
    "text": "about a month ago and solves a very important problem when you send a receive request to your queue if there",
    "start": "2323279",
    "end": "2330720"
  },
  {
    "text": "are no messages you'll get back an empty receive request which is basically wasted right you've asked for something",
    "start": "2330720",
    "end": "2337470"
  },
  {
    "text": "and you've got nothing and nonetheless our customers tell us they can hold the",
    "start": "2337470",
    "end": "2343230"
  },
  {
    "text": "queue at a very high rate because if there is a message that they want to receive they want to get it just as fast",
    "start": "2343230",
    "end": "2349200"
  },
  {
    "text": "as they can if you think about how many",
    "start": "2349200",
    "end": "2354480"
  },
  {
    "text": "of these type of requests you would do in say a 20 second period you could",
    "start": "2354480",
    "end": "2360779"
  },
  {
    "text": "think about the fact that you'd be polling about 20 times per second to get continuous coverage under the old way of",
    "start": "2360779",
    "end": "2367349"
  },
  {
    "text": "doing things long polling fixes that by",
    "start": "2367349",
    "end": "2372779"
  },
  {
    "text": "when it encounters a empty queue persisting up to 20 seconds and then",
    "start": "2372779",
    "end": "2379789"
  },
  {
    "text": "sending through the message just as fast as it arrives in the example I gave",
    "start": "2379789",
    "end": "2386339"
  },
  {
    "text": "where it may be the middle of the night and there may be only one message in a twenty second period but you'd like to",
    "start": "2386339",
    "end": "2392970"
  },
  {
    "text": "know just as fast as you can long polling would actually be a 400x cost",
    "start": "2392970",
    "end": "2399299"
  },
  {
    "text": "saving over using short polling now a lot of situations are going to be less",
    "start": "2399299",
    "end": "2405630"
  },
  {
    "text": "extreme than that because you'll have a higher rate of messages but still our customers who have used long polling",
    "start": "2405630",
    "end": "2412200"
  },
  {
    "text": "already tell us it is extremely effective for them what's cool is it's also extremely easy",
    "start": "2412200",
    "end": "2417800"
  },
  {
    "text": "to use there are two ways to implement long polling at first is a way that",
    "start": "2417800",
    "end": "2423380"
  },
  {
    "text": "actually requires no changes to your application at all you can tag an",
    "start": "2423380",
    "end": "2428690"
  },
  {
    "text": "individual queue with long polling support and it will just work you'll",
    "start": "2428690",
    "end": "2436040"
  },
  {
    "text": "want to check your application to make sure it won't timeout in 20 seconds but",
    "start": "2436040",
    "end": "2441080"
  },
  {
    "text": "if it doesn't there's no other work required at the same time you can get",
    "start": "2441080",
    "end": "2447170"
  },
  {
    "text": "greater flexibility by adding long polling as an attribute to individual",
    "start": "2447170",
    "end": "2452360"
  },
  {
    "text": "requests you can have more flexibility in the way you use long polling versus short polling our customers outside",
    "start": "2452360",
    "end": "2460400"
  },
  {
    "text": "Amazon and also the services within Amazon that rely on sqs tell us that",
    "start": "2460400",
    "end": "2465590"
  },
  {
    "text": "there's almost no reason to use short polling anymore this is just better we're pretty excited about it and it's",
    "start": "2465590",
    "end": "2471440"
  },
  {
    "text": "been released just in the past few weeks the second feature that I'd like to talk",
    "start": "2471440",
    "end": "2478070"
  },
  {
    "text": "about is the sqs rich client which is a bit of client code that sits locally on",
    "start": "2478070",
    "end": "2484220"
  },
  {
    "text": "your server or ec2 instance and it ties together your applications more closely",
    "start": "2484220",
    "end": "2489830"
  },
  {
    "text": "with sqs this has two main benefits the first is send buffering which solves the",
    "start": "2489830",
    "end": "2496280"
  },
  {
    "text": "problem of how can we efficiently and effectively batch our send requests into",
    "start": "2496280",
    "end": "2501860"
  },
  {
    "text": "sqs when you use the rich client and when you enable send buffering it holds",
    "start": "2501860",
    "end": "2509120"
  },
  {
    "text": "outgoing send requests for a user-defined customizable period of time",
    "start": "2509120",
    "end": "2514370"
  },
  {
    "text": "and it watches to see if other send requests are going out if they are it",
    "start": "2514370",
    "end": "2519980"
  },
  {
    "text": "automatically batches them and sends them as a batch to sqs what's cool about",
    "start": "2519980",
    "end": "2526070"
  },
  {
    "text": "this is it doesn't require you to make any other changes to your application your application can continue to send",
    "start": "2526070",
    "end": "2532810"
  },
  {
    "text": "send requests as normal and the rich client will catch them and batch them",
    "start": "2532810",
    "end": "2538000"
  },
  {
    "text": "that's send buffering the rich client also supports receive request",
    "start": "2538000",
    "end": "2543890"
  },
  {
    "text": "prefetching which can cut down on the perceived latency that your application will find",
    "start": "2543890",
    "end": "2550340"
  },
  {
    "text": "waiting for the next batch of messages after it's completed the previous one with prefetching once your application",
    "start": "2550340",
    "end": "2557310"
  },
  {
    "text": "is finished with a batch there will be another one waiting and again this",
    "start": "2557310",
    "end": "2562500"
  },
  {
    "text": "doesn't require any changes to your core application if you use the sqs rich client this has also been released in",
    "start": "2562500",
    "end": "2571020"
  },
  {
    "text": "the past couple of weeks initially for the java sdk and we have other SDKs",
    "start": "2571020",
    "end": "2576990"
  },
  {
    "text": "coming up in the coming weeks so that is",
    "start": "2576990",
    "end": "2582060"
  },
  {
    "text": "long polling and the rich client and today we've spoken about two services",
    "start": "2582060",
    "end": "2589020"
  },
  {
    "text": "which work separately but in some cases work better together the simple queuing service sqs for queuing and pull and the",
    "start": "2589020",
    "end": "2597870"
  },
  {
    "text": "simple notification service SNS for push and fan-out and as a quick review when",
    "start": "2597870",
    "end": "2606000"
  },
  {
    "text": "you're thinking about how to solve the problems of long queues and high fan-out you should look for solutions that have",
    "start": "2606000",
    "end": "2612960"
  },
  {
    "text": "high reliability high scalability and which are simple to implement now we've",
    "start": "2612960",
    "end": "2622110"
  },
  {
    "text": "got a couple of minutes to answer any questions you have at the same time feel",
    "start": "2622110",
    "end": "2627240"
  },
  {
    "text": "free to check out our developer documentation online for sqs and SNS thanks very much that's",
    "start": "2627240",
    "end": "2638380"
  },
  {
    "text": "you",
    "start": "2638380",
    "end": "2640440"
  }
]