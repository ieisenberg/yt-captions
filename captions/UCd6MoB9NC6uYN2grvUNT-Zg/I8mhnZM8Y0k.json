[
  {
    "text": "okay hello everyone can you hear me welcome to the AWS developer theater we",
    "start": "0",
    "end": "6120"
  },
  {
    "text": "still have a few a few seats so come over we are starting in a few seconds so",
    "start": "6120",
    "end": "12269"
  },
  {
    "text": "I'm Alex I'm a Technical Evangelist at AWS and today I want to tell you a",
    "start": "12269",
    "end": "18779"
  },
  {
    "text": "little bit about how you can speed up and increase the productivity or your of your product development as a software",
    "start": "18779",
    "end": "24810"
  },
  {
    "text": "or as a development team in the cloud so we'll talk about service computing we'll",
    "start": "24810",
    "end": "30330"
  },
  {
    "text": "talk about continuous integration and continuous delivery what it means and what how it affects your your workload",
    "start": "30330",
    "end": "36660"
  },
  {
    "text": "and your pipelines your coding pipelines let me tell you a little bit about V",
    "start": "36660",
    "end": "41879"
  },
  {
    "text": "what would I do I'm a software engineer I've been a web developer and I work in a start-up",
    "start": "41879",
    "end": "47430"
  },
  {
    "text": "environment for more than four years between Italy Switzerland and in California so if you have questions",
    "start": "47430",
    "end": "54300"
  },
  {
    "text": "about that I can I can take questions about startups too I'm really into service I'm really into AI in some of",
    "start": "54300",
    "end": "61050"
  },
  {
    "text": "the very cool technologies that we'll talk about today tomorrow and the day after tomorrow in this theater",
    "start": "61050",
    "end": "66770"
  },
  {
    "text": "I've been enable is an AWS customer for a few years and before we go on with the",
    "start": "66770",
    "end": "72869"
  },
  {
    "text": "agenda and what we are going to talk about today I want to ask you some questions about you so raise your hand",
    "start": "72869",
    "end": "79710"
  },
  {
    "text": "if you are a developer because this Avani is easy 99 percent okay now keep",
    "start": "79710",
    "end": "85259"
  },
  {
    "text": "it up if you work for a start-up or for a totally new product or something new",
    "start": "85259",
    "end": "90689"
  },
  {
    "text": "that is not up there yet okay 30 percent keep it up if you think that development",
    "start": "90689",
    "end": "98790"
  },
  {
    "text": "productivity and speed is critical to what you're doing cool that's why we are here today so you",
    "start": "98790",
    "end": "105720"
  },
  {
    "text": "are in the in the place again I'm sharing with you some",
    "start": "105720",
    "end": "111140"
  },
  {
    "text": "insights about service computing and why it matters for you if you're not already using services like AWS lambda in the",
    "start": "111140",
    "end": "119180"
  },
  {
    "text": "AWS cloud I want to share some patterns some best practices some tips for you to",
    "start": "119180",
    "end": "125390"
  },
  {
    "text": "get started quickly and to increase your productivity as soon as possible and then I want to share tips and tricks",
    "start": "125390",
    "end": "131950"
  },
  {
    "text": "about continuous delivery and what we call internally safe deployments about",
    "start": "131950",
    "end": "137300"
  },
  {
    "text": "deploying safely allowing you to sleep at night for example that's that's a good feature and then I want to show you",
    "start": "137300",
    "end": "143330"
  },
  {
    "text": "a demo of what this all looks like in the cloud so let's start with the basics",
    "start": "143330",
    "end": "150230"
  },
  {
    "text": "what is trouble is computing are you familiar with AWS lambda raise your hand it'll be is lambda anybody cool so these",
    "start": "150230",
    "end": "157520"
  },
  {
    "text": "are 30 35 % not bad so AWS lambda is our function as a",
    "start": "157520",
    "end": "163670"
  },
  {
    "text": "service offering so with respect to traditional compute compute services or",
    "start": "163670",
    "end": "171980"
  },
  {
    "text": "compute approaches with service basically you can kind of forget about",
    "start": "171980",
    "end": "178459"
  },
  {
    "text": "the underlying infrastructure so if you were used to starting a new virtual",
    "start": "178459",
    "end": "183739"
  },
  {
    "text": "server a virtual machine or even buying physical Hardware I hope you're not doing that anymore but if that's the",
    "start": "183739",
    "end": "190280"
  },
  {
    "text": "traditional approach with a new way W is lambda servers approach you just forget about the underlying infrastructure we",
    "start": "190280",
    "end": "196160"
  },
  {
    "text": "take care of that for you as the cloud provider so what's left there for you to do is to provide your code and we'll",
    "start": "196160",
    "end": "203660"
  },
  {
    "text": "make sure that your code scales Horizonte that your code is executed and one of the main benefit is that since we",
    "start": "203660",
    "end": "211190"
  },
  {
    "text": "take care of the infrastructure you don't have to pay for that it's there waiting to be used by your functions but",
    "start": "211190",
    "end": "216830"
  },
  {
    "text": "you don't pay for it until something actually happens so your functions your",
    "start": "216830",
    "end": "222380"
  },
  {
    "text": "AWS lambda functions will scale up as needed based on the load and the traffic and the web views",
    "start": "222380",
    "end": "227980"
  },
  {
    "text": "whatever your lambda functions are doing but they will also scale down to zero so that's why we say that you never pay for",
    "start": "227980",
    "end": "236620"
  },
  {
    "text": "your idle compute capacity that you don't really care especially if you are a startup or if you are if you have a",
    "start": "236620",
    "end": "242530"
  },
  {
    "text": "brand-new product maybe your users are not using it 24/7 right maybe you have",
    "start": "242530",
    "end": "248170"
  },
  {
    "text": "spikes maybe you're doing live demos with webinars and you want your your",
    "start": "248170",
    "end": "254890"
  },
  {
    "text": "your your product to scale up nicely without worrying about that especially in the startup phase so we like to say",
    "start": "254890",
    "end": "262180"
  },
  {
    "text": "never pay for idle and all the availability and reliability fault-tolerance",
    "start": "262180",
    "end": "267220"
  },
  {
    "text": "will take care of that for you as well so Ian this morning an hour ago talk",
    "start": "267220",
    "end": "273160"
  },
  {
    "text": "talked about AWS regions and AWS availability zones so those are the",
    "start": "273160",
    "end": "279100"
  },
  {
    "text": "physical data centers the physical places where you can go and spin up new machines and servers and services with",
    "start": "279100",
    "end": "285910"
  },
  {
    "text": "the W is lambda we take care of making sure that your lambda functions are provision in more than one data centers",
    "start": "285910",
    "end": "292120"
  },
  {
    "text": "so that even if one can in entirely the Centers goes down your functions are often running we make sure the",
    "start": "292120",
    "end": "298840"
  },
  {
    "text": "delivering the requests to the function that stay up so that's on us another",
    "start": "298840",
    "end": "305350"
  },
  {
    "text": "very important key concept of service competing is that",
    "start": "305350",
    "end": "311110"
  },
  {
    "text": "you can start thinking of events so you don't think about processes and machines",
    "start": "311110",
    "end": "317710"
  },
  {
    "text": "just waiting for stuff to happen maybe through a socket or through our HTTP request so we do W is lambda you can",
    "start": "317710",
    "end": "324669"
  },
  {
    "text": "finally think and design your infrastructures for event or in an",
    "start": "324669",
    "end": "330250"
  },
  {
    "text": "event-driven fashion so as I mentioned your code doesn't even exist until there is",
    "start": "330250",
    "end": "336639"
  },
  {
    "text": "something to process until there is some event that triggers your lambda functions okay only then your function",
    "start": "336639",
    "end": "342580"
  },
  {
    "text": "will be injected into some sort of runtime or container we take care of",
    "start": "342580",
    "end": "348039"
  },
  {
    "text": "that and it will be given the event that needs to be processed so events are",
    "start": "348039",
    "end": "353590"
  },
  {
    "text": "everything events are HTTP requests are events or it could be messages coming from a",
    "start": "353590",
    "end": "360789"
  },
  {
    "text": "message bus it could be a new file has been created in our Amazon s3 simple",
    "start": "360789",
    "end": "368409"
  },
  {
    "text": "storage service okay you can spin you can trigger them the function when a new file has been triggered and another",
    "start": "368409",
    "end": "375460"
  },
  {
    "text": "great thing is that you can use basically any programming language that",
    "start": "375460",
    "end": "381669"
  },
  {
    "text": "you are comfortable with so you can think of node Python Java dotnet go even",
    "start": "381669",
    "end": "387479"
  },
  {
    "text": "even even PowerShell recently so I'm personally and nodejs and Python guy but",
    "start": "387479",
    "end": "393099"
  },
  {
    "text": "you like Java you like go okay bring your own language bring your own libraries bring your own dependencies",
    "start": "393099",
    "end": "399639"
  },
  {
    "text": "and they will run a lambda and the good",
    "start": "399639",
    "end": "404680"
  },
  {
    "text": "thing is events will trigger your lambda function and you'll of the function will be able to interact with third-party events to store data into database so",
    "start": "404680",
    "end": "411610"
  },
  {
    "text": "you can do and implement any server-side logic even if there is no more server",
    "start": "411610",
    "end": "416740"
  },
  {
    "text": "anymore right what are the use case is almost endless ok so we start from",
    "start": "416740",
    "end": "424030"
  },
  {
    "text": "websites to mobile backends IOT backends all the way to real-time data processing",
    "start": "424030",
    "end": "431560"
  },
  {
    "text": "or data ingestion if you need to manipulate or validate incoming data maybe also coming from a mobile or robot",
    "start": "431560",
    "end": "440440"
  },
  {
    "text": "you might use lambda2 back a chatbot application I don't know if you're familiar with Amazon Alexa so all if you",
    "start": "440440",
    "end": "448240"
  },
  {
    "text": "want to implement an Alexa skill the back end is probably going to be along the function as well so it makes it very",
    "start": "448240",
    "end": "454030"
  },
  {
    "text": "simple very easy very scalable and also very stateless that's one of the",
    "start": "454030",
    "end": "461200"
  },
  {
    "text": "keywords that will will say a lot today other other scene areas more maybe not",
    "start": "461200",
    "end": "468040"
  },
  {
    "text": "in the application layer but made me more about IT automation so if you are more into the operations or or maybe are",
    "start": "468040",
    "end": "474610"
  },
  {
    "text": "the bobs and you want to automate or monitor your infrastructure or just even do something like a cron job maybe just",
    "start": "474610",
    "end": "483130"
  },
  {
    "text": "schedule something to happen once a day once a week once a month okay you can also do that with AWS lambda let me tell",
    "start": "483130",
    "end": "491140"
  },
  {
    "text": "you a little bit about who is using lambda I'm really excited to share with you that with respect to one we started",
    "start": "491140",
    "end": "498430"
  },
  {
    "text": "so lambda was announced in 2014 and then we finally had the first meaningful",
    "start": "498430",
    "end": "504760"
  },
  {
    "text": "integrations like API gateway and S&S and s3 in the next six to 12 months I'm",
    "start": "504760",
    "end": "511750"
  },
  {
    "text": "really happy to share with you that now today nine out of ten of the largest eight of these accounts customers are",
    "start": "511750",
    "end": "518380"
  },
  {
    "text": "using AWS lambda so we have seen that shift from just a new way of doing minor",
    "start": "518380",
    "end": "524800"
  },
  {
    "text": "little features or little enhancements to your system two major best practices",
    "start": "524800",
    "end": "530320"
  },
  {
    "text": "into building these scalable systems so it's not just a little new toy anymore happy to share that with you today let",
    "start": "530320",
    "end": "538450"
  },
  {
    "text": "me tell you about some of the patterns that we see a lot and that we want you to to be aware of when you start",
    "start": "538450",
    "end": "544060"
  },
  {
    "text": "building I already mentioned you can bring your own code and it's not it's",
    "start": "544060",
    "end": "550150"
  },
  {
    "text": "not just about bringing your own one time and your own code like yours your own business logic you can actually",
    "start": "550150",
    "end": "556660"
  },
  {
    "text": "bring any library we provide as a set of libraries already in the runtime but you",
    "start": "556660",
    "end": "562630"
  },
  {
    "text": "can bring your own so if you have note you can install modules if a Python you can pip install",
    "start": "562630",
    "end": "567960"
  },
  {
    "text": "independency and same for other languages too the resource model so how",
    "start": "567960",
    "end": "575490"
  },
  {
    "text": "do you choose the power or the compute power or the memory capabilities of your",
    "start": "575490",
    "end": "582540"
  },
  {
    "text": "under functions I like to call it power because it's basically just a handle a handle so you can choose between 128",
    "start": "582540",
    "end": "589860"
  },
  {
    "text": "megabytes of memory all the way to 3 gigabytes of memory but also remember with that memory also comes more CPU",
    "start": "589860",
    "end": "597420"
  },
  {
    "text": "capabilities and more network capabilities so think of it as a power so depending on how you want to use it",
    "start": "597420",
    "end": "603480"
  },
  {
    "text": "what you need to do if you need to do in memory computation if you need to do basic simple data processing you can",
    "start": "603480",
    "end": "609630"
  },
  {
    "text": "find you the resource of your lambda function there are different ways of",
    "start": "609630",
    "end": "617790"
  },
  {
    "text": "invoking a lambda function so I'm sharing more details about it we say synchronous or asynchronous and I'm",
    "start": "617790",
    "end": "625320"
  },
  {
    "text": "sharing some details in the next slides let's not forget about authorization as well we like to say that security is our",
    "start": "625320",
    "end": "632220"
  },
  {
    "text": "top priority so by default when you create a new lambda function it can do anything ok maybe you can call a",
    "start": "632220",
    "end": "638160"
  },
  {
    "text": "third-party service if you if you integrate if you configure it with the right credentials but if you want to",
    "start": "638160",
    "end": "644520"
  },
  {
    "text": "read a file from s3 our object storage or if you want to read from a database or if you want to do anything literally",
    "start": "644520",
    "end": "652020"
  },
  {
    "text": "anything you have to provide and you can provide you should provide fine-grain permissions to that specific function to",
    "start": "652020",
    "end": "659339"
  },
  {
    "text": "do something so that gives you the power of controlling in your micro services",
    "start": "659339",
    "end": "664680"
  },
  {
    "text": "architecture may be of 2025 functions each one can do one thing really well",
    "start": "664680",
    "end": "669690"
  },
  {
    "text": "with the limited permissions to be owned in that thing so if this function is not supposed to read a file on our honest",
    "start": "669690",
    "end": "676800"
  },
  {
    "text": "tree or a record from your database does don't give it permission to do so and you are kind of improving security with",
    "start": "676800",
    "end": "684779"
  },
  {
    "text": "this lease privilege approach we call it",
    "start": "684779",
    "end": "690740"
  },
  {
    "text": "there are different ways also to to authority lambda functions to",
    "start": "690740",
    "end": "695830"
  },
  {
    "text": "code and to update you lambda functions you can use what you see is what you get editors you can use your own local",
    "start": "695830",
    "end": "702399"
  },
  {
    "text": "additives of course if you're more into the club native kind of movement you may",
    "start": "702399",
    "end": "707769"
  },
  {
    "text": "want to check out our AWS cloud 9 which is a in browser IDE for you to code",
    "start": "707769",
    "end": "714310"
  },
  {
    "text": "directly in the cloud to write and deploy and install dependencies do whatever you want in the cloud I'm",
    "start": "714310",
    "end": "720160"
  },
  {
    "text": "showing you what it looks like layer we like to say that there are a few",
    "start": "720160",
    "end": "726959"
  },
  {
    "text": "universal rights when you when you develop any kind of software and two of them are monitoring and logging so every",
    "start": "726959",
    "end": "734829"
  },
  {
    "text": "time you console.log or print or whatever language you're using every",
    "start": "734829",
    "end": "740680"
  },
  {
    "text": "time you print something just under output all those logs get sent to Amazon Cloud Watch for you to expect to analyze",
    "start": "740680",
    "end": "747670"
  },
  {
    "text": "or to build an elite analytics on top of it and the other universal right is",
    "start": "747670",
    "end": "753430"
  },
  {
    "text": "monitoring so each lambda function comes with with its own metrics of number of invocations everest time of execution",
    "start": "753430",
    "end": "760930"
  },
  {
    "text": "and all these very specific metrics they'll I allow you to do fine-grained monitoring and to understand what's",
    "start": "760930",
    "end": "767380"
  },
  {
    "text": "going on in the system if eventually to build custom alarms to send you emails",
    "start": "767380",
    "end": "772630"
  },
  {
    "text": "when something wrong happens or to build dashboards so that you can monitor the system's overall I mentioned that",
    "start": "772630",
    "end": "780370"
  },
  {
    "text": "stateless is one of the keywords of today remember since we are now kind of",
    "start": "780370",
    "end": "785860"
  },
  {
    "text": "separating the compute power from everything else because now our compute is part of a service you want to make",
    "start": "785860",
    "end": "793120"
  },
  {
    "text": "sure that your computer is as stateless as possible so make sure that the event",
    "start": "793120",
    "end": "798490"
  },
  {
    "text": "comes in and you maybe store the output of your computation somewhere else in a database or in our object storage",
    "start": "798490",
    "end": "804130"
  },
  {
    "text": "anywhere but do not store the state the current state of the system within your",
    "start": "804130",
    "end": "809440"
  },
  {
    "text": "memory or your local filesystem you can do that for caching so you have access to a lot of the local resources",
    "start": "809440",
    "end": "815470"
  },
  {
    "text": "the RAM and the and the local 10 folder for example you can store cached data in",
    "start": "815470",
    "end": "821350"
  },
  {
    "text": "there but don't use it for during the steak that's supposed to be stored somewhere else oh you're",
    "start": "821350",
    "end": "826820"
  },
  {
    "text": "stateless code can scale horizontally without dealing with state in each individual runtime there are so many",
    "start": "826820",
    "end": "835910"
  },
  {
    "text": "different ways to invoke um the function these are some of them so I mentioned a few already maybe you have an object",
    "start": "835910",
    "end": "841670"
  },
  {
    "text": "storage a new file is being created great I want to invoke a lambda function or maybe there is a no sequel database",
    "start": "841670",
    "end": "847670"
  },
  {
    "text": "where a new record has been created okay I want to run another function based on that event too",
    "start": "847670",
    "end": "853220"
  },
  {
    "text": "so there are now more than 30 or 40 different event sources and this is what",
    "start": "853220",
    "end": "859070"
  },
  {
    "text": "this is what they look like on AWS let me mention a few more well Amazon API",
    "start": "859070",
    "end": "864590"
  },
  {
    "text": "gateway if you want to have restful a restful interface on top of your lambda functions API gateway will generate",
    "start": "864590",
    "end": "871820"
  },
  {
    "text": "events HTTP events will pass them to you on the function your function will",
    "start": "871820",
    "end": "876920"
  },
  {
    "text": "generate a response pass it back to API gateway which will pass it back to the client other use cases if you're doing",
    "start": "876920",
    "end": "884090"
  },
  {
    "text": "IRT or alexa chatbots that's a great use case too you can trigger lambda",
    "start": "884090",
    "end": "889670"
  },
  {
    "text": "functions based on the interaction with IOT devices or with Alexa BOTS and then",
    "start": "889670",
    "end": "895370"
  },
  {
    "text": "we have the configuration kind of events as well so maybe you're using code commit to host your code similar to what",
    "start": "895370",
    "end": "902030"
  },
  {
    "text": "you do with github and maybe you want to run a lambda function when someone get push into the repo you can do that or",
    "start": "902030",
    "end": "910850"
  },
  {
    "text": "maybe you have a message queue like Amazon sqs simple queue service or maybe you have email service like Amazon I see",
    "start": "910850",
    "end": "918080"
  },
  {
    "text": "yes simple image service so you can trigger lambda function more or less anywhere here and some of these tools",
    "start": "918080",
    "end": "924560"
  },
  {
    "text": "also help you doing orchestration or doing the coupling of your lambda function so maybe you have two lambda",
    "start": "924560",
    "end": "932120"
  },
  {
    "text": "functions you want the first one to involve the second one okay that's an option but maybe you want to use Amazon",
    "start": "932120",
    "end": "937670"
  },
  {
    "text": "SNS simple notification service to push a notification into a topic and get a",
    "start": "937670",
    "end": "943340"
  },
  {
    "text": "lambda function be triggered when there is a new topic a new message on that topic so that's a nice way to decouple",
    "start": "943340",
    "end": "949490"
  },
  {
    "text": "redundant function to make sure they can be independently updated and debugged",
    "start": "949490",
    "end": "954770"
  },
  {
    "text": "and monitored as well so adding this decouple mechanisms",
    "start": "954770",
    "end": "960389"
  },
  {
    "text": "really lpv agile and be flexible with your infrastructure I mentioned there are two or three different ways actually",
    "start": "960389",
    "end": "966600"
  },
  {
    "text": "to the third one is is just a variation on the second there is the sequin",
    "start": "966600",
    "end": "972870"
  },
  {
    "text": "synchronous way if you think of a RESTful API okay the client so whoever is generating",
    "start": "972870",
    "end": "979529"
  },
  {
    "text": "the event expects a synchronous synchronous invocation synchronous response so in that case for example in",
    "start": "979529",
    "end": "987209"
  },
  {
    "text": "an HTTP request your lambda function is expected to return the result as soon as possible and that they will be synchro's",
    "start": "987209",
    "end": "994649"
  },
  {
    "text": "meaning the one invoking creating the event expects to have a response right now as soon as possible the asynchronous",
    "start": "994649",
    "end": "1001879"
  },
  {
    "text": "invocation on the other hand as I was saying this is more about if you have a",
    "start": "1001879",
    "end": "1007759"
  },
  {
    "text": "queue or if we have a maybe a topic where you want to push messages in that",
    "start": "1007759",
    "end": "1012800"
  },
  {
    "text": "case if you think about it the client put putting the message in the queue or in the topic or maybe uploading a file",
    "start": "1012800",
    "end": "1020149"
  },
  {
    "text": "on a three they don't really they shouldn't care about who is processing that piece of data they shouldn't care",
    "start": "1020149",
    "end": "1026569"
  },
  {
    "text": "about what that new message of that new file is triggering if that triggering along the function or not so that's a",
    "start": "1026569",
    "end": "1033260"
  },
  {
    "text": "nice way to decouple so you have a sort of buffer of requests and we will take care of invoke here lambda functions",
    "start": "1033260",
    "end": "1039620"
  },
  {
    "text": "under the hood and that's useful because since we take care of that we can also take care of retry policies for example",
    "start": "1039620",
    "end": "1046520"
  },
  {
    "text": "so if you're on the function fails maybe there is a third party service you have some rate limiting through another API",
    "start": "1046520",
    "end": "1053270"
  },
  {
    "text": "we take care of worried trying that event at least once and if that doesn't work you can then store the event",
    "start": "1053270",
    "end": "1059570"
  },
  {
    "text": "somewhere maybe in another queue or later reprocessing that's an option the",
    "start": "1059570",
    "end": "1064909"
  },
  {
    "text": "third pattern is to have the stream based it's very similar to the",
    "start": "1064909",
    "end": "1069950"
  },
  {
    "text": "asynchronous one but instead of being given one event at a time you're given a",
    "start": "1069950",
    "end": "1075049"
  },
  {
    "text": "list of records or a stream of records to process you can choose how many the",
    "start": "1075049",
    "end": "1080150"
  },
  {
    "text": "batch size from 1 to I think 500 so it does allows you to do batch processing if you have",
    "start": "1080150",
    "end": "1086500"
  },
  {
    "text": "specific tasks or validation tasks or much may be machine learning kind of",
    "start": "1086500",
    "end": "1091820"
  },
  {
    "text": "compute that work on a batch fashion so that allows you to do that as well and",
    "start": "1091820",
    "end": "1097580"
  },
  {
    "text": "these are the services so maybe you're using dynamo or Amazon kinases that gives you the stream kind of",
    "start": "1097580",
    "end": "1103580"
  },
  {
    "text": "functionality or maybe you're using Amazon SNS or s3 that gives you the coupling between event generator and",
    "start": "1103580",
    "end": "1110990"
  },
  {
    "text": "event consumer I want to spend a few more words about Amazon API gateway",
    "start": "1110990",
    "end": "1118490"
  },
  {
    "text": "because I've mentioned already it's a service that is the service that gives you a restful interface on top of all",
    "start": "1118490",
    "end": "1125000"
  },
  {
    "text": "your lambda functions but it's not just that okay by default API gator it comes",
    "start": "1125000",
    "end": "1130280"
  },
  {
    "text": "with additional features around security and for example DDoS protection so if",
    "start": "1130280",
    "end": "1135560"
  },
  {
    "text": "you if you're using API gateway to reach a global audience around the world there is a built-in CDN a content delivery",
    "start": "1135560",
    "end": "1143360"
  },
  {
    "text": "network inside API gateway they will care of distributing your content and optimizing latency worldwide and in that",
    "start": "1143360",
    "end": "1150410"
  },
  {
    "text": "case it's also protecting you from the distributed denial of service attacks so",
    "start": "1150410",
    "end": "1155660"
  },
  {
    "text": "that's quite a nice thing to have you don't want to be ddos by anybody around the world and it's good to have it built",
    "start": "1155660",
    "end": "1161900"
  },
  {
    "text": "in it also gives you more fine grained control about authentication and authorization so you can really have",
    "start": "1161900",
    "end": "1169610"
  },
  {
    "text": "control about the VUCA invoke this specific API or the specific path or even this specific method of your API",
    "start": "1169610",
    "end": "1176660"
  },
  {
    "text": "you very fine-grained control of that and then it gives you additional controls about short throttling and rate",
    "start": "1176660",
    "end": "1183560"
  },
  {
    "text": "limiting if you want to say ok this user can invoke me but only five times per",
    "start": "1183560",
    "end": "1188570"
  },
  {
    "text": "minute if we date right to invoke it more often throttle there invocation so you have",
    "start": "1188570",
    "end": "1193580"
  },
  {
    "text": "this kind of control as well this is what the API gateway it's a less",
    "start": "1193580",
    "end": "1200750"
  },
  {
    "text": "complicated let me show you piece by piece so there are three different API endpoint",
    "start": "1200750",
    "end": "1206420"
  },
  {
    "text": "types that you can use so the first one is the edge optimized one they wander just described which comes with a",
    "start": "1206420",
    "end": "1213420"
  },
  {
    "text": "built-in CloudFront distribution which is a CDN a content delivery network and",
    "start": "1213420",
    "end": "1219270"
  },
  {
    "text": "what it means why adopt amides because it's optimized for a global audience if",
    "start": "1219270",
    "end": "1224440"
  },
  {
    "text": "you want your API is to be accessed by anywhere in the world there is a second",
    "start": "1224440",
    "end": "1230230"
  },
  {
    "text": "API endpoint type which we call original the one here and this one doesn't come",
    "start": "1230230",
    "end": "1235840"
  },
  {
    "text": "with a CDN so it's meant to be involved by a specific region so if you deploy your lambda function or your API to",
    "start": "1235840",
    "end": "1242770"
  },
  {
    "text": "maybe Dublin or Frankfurt or Paris okay if you call that API from Australia okay",
    "start": "1242770",
    "end": "1249280"
  },
  {
    "text": "their request will have to go all the way to Paris there is no global distribution eventually you can add your",
    "start": "1249280",
    "end": "1255250"
  },
  {
    "text": "own customer managed code from distribution on top and do kind of both access patterns but that's up to you",
    "start": "1255250",
    "end": "1262960"
  },
  {
    "text": "there is a third invocation type API endpoint type which is the private endpoints so the first two they endpoint",
    "start": "1262960",
    "end": "1270940"
  },
  {
    "text": "the we generate they are publicly accessible you are you have all the tools to make sure that people need",
    "start": "1270940",
    "end": "1277330"
  },
  {
    "text": "authorization and authentication to invoke them but by default they are public if you want these endpoints to be",
    "start": "1277330",
    "end": "1282430"
  },
  {
    "text": "private only accessible by specific virtual private network our Amazon VPC",
    "start": "1282430",
    "end": "1289030"
  },
  {
    "text": "service you can define these private endpoints so they are supposed to be used from within an Amazon VPC a virtual",
    "start": "1289030",
    "end": "1296620"
  },
  {
    "text": "private cloud so this is what happens in front on the client side on the on the",
    "start": "1296620",
    "end": "1302590"
  },
  {
    "text": "cast on the API consumer level let's see what happens behind the scenes so this",
    "start": "1302590",
    "end": "1308170"
  },
  {
    "text": "is API gateway and you can optionally add caching mechanisms so you want to",
    "start": "1308170",
    "end": "1314500"
  },
  {
    "text": "cache the response of the API is eventually and there is like a two click configuration for that you have all the",
    "start": "1314500",
    "end": "1319960"
  },
  {
    "text": "built in cloud watch monitoring about which invocations and all the metrics",
    "start": "1319960",
    "end": "1325030"
  },
  {
    "text": "are many invocations Purnima and so on but then under the hood who can be the backend of your api's well",
    "start": "1325030",
    "end": "1331790"
  },
  {
    "text": "today we are talking about AWS lamda up there but basically you can put anything",
    "start": "1331790",
    "end": "1337240"
  },
  {
    "text": "behind your API gateway it could be another service deployed on ec2 it could",
    "start": "1337240",
    "end": "1342530"
  },
  {
    "text": "be another AWS service directly so maybe API gauge we can put data into",
    "start": "1342530",
    "end": "1347930"
  },
  {
    "text": "kinases or write a file into s3 that's also possible but literally any publicly",
    "start": "1347930",
    "end": "1355250"
  },
  {
    "text": "accessible endpoint can become the backend of your API so it's a powerful service it's not only for service",
    "start": "1355250",
    "end": "1362180"
  },
  {
    "text": "applications which is what we're talking about today so think about it eventually you can even have API gateway to stay in",
    "start": "1362180",
    "end": "1369200"
  },
  {
    "text": "front of your private data centers your on-premises applications so it might",
    "start": "1369200",
    "end": "1374990"
  },
  {
    "text": "also be usable for example in a migration scenario you are migrating to the cloud you can add API get you in the",
    "start": "1374990",
    "end": "1380750"
  },
  {
    "text": "middle and make sure that you route the new traffic to your your new deployment",
    "start": "1380750",
    "end": "1386060"
  },
  {
    "text": "in the cloud that's an option okay let me talk about modern applications we",
    "start": "1386060",
    "end": "1394430"
  },
  {
    "text": "have lambda here so but usually you don't have one lambda functions okay maybe you have three at some point you",
    "start": "1394430",
    "end": "1400940"
  },
  {
    "text": "have 15 or 50 and what happens is that some of these functions we'd interact",
    "start": "1400940",
    "end": "1407420"
  },
  {
    "text": "with the database some of these functions will maybe read or write events from a queue maybe some of these",
    "start": "1407420",
    "end": "1414350"
  },
  {
    "text": "will even interact with legacy or on-premises services so it can become kind of interesting to handle to view",
    "start": "1414350",
    "end": "1422750"
  },
  {
    "text": "the system overall to orchestrate the system overall and that's why we release",
    "start": "1422750",
    "end": "1429320"
  },
  {
    "text": "a new open source specification that we call the Amazon States language does allow you to define a state machine what",
    "start": "1429320",
    "end": "1438170"
  },
  {
    "text": "is the state machine something like that okay this is a flow if you if you think about it with a starting point all the",
    "start": "1438170",
    "end": "1444590"
  },
  {
    "text": "way to an end point this type machines allows you to define a kind of you can",
    "start": "1444590",
    "end": "1451490"
  },
  {
    "text": "call to think of it as a data flow or as a logical flow of steps that need to occur or not maybe",
    "start": "1451490",
    "end": "1457830"
  },
  {
    "text": "in parallel maybe with an if condition maybe step fails do you want to go back",
    "start": "1457830",
    "end": "1463260"
  },
  {
    "text": "and do something else so you can implement all these orchestration logic of your individual",
    "start": "1463260",
    "end": "1469410"
  },
  {
    "text": "and the function so each step each green step and white step here is a lambda function you can have weighting States",
    "start": "1469410",
    "end": "1475770"
  },
  {
    "text": "you can have loops you can have retry logics and these are like this service which is Amazon step functions allows",
    "start": "1475770",
    "end": "1483450"
  },
  {
    "text": "you to do orchestration at a higher level so think about it when your application starts to become kind of",
    "start": "1483450",
    "end": "1489710"
  },
  {
    "text": "larger this is an example of what you can do with step functions last year I",
    "start": "1489710",
    "end": "1495420"
  },
  {
    "text": "used step functions to create the state machine to understand how to tune the power of my lambda functions so it's",
    "start": "1495420",
    "end": "1502260"
  },
  {
    "text": "kind of like a recursion here but the idea was that how do I choose if my",
    "start": "1502260",
    "end": "1509850"
  },
  {
    "text": "function in order to be optimal as far as timing and pricing and cost should be it should have a hundred-twenty made 128",
    "start": "1509850",
    "end": "1517260"
  },
  {
    "text": "megabytes or a gigabyte of ram cool let's be data-driven let's build a system that takes a lambda function as",
    "start": "1517260",
    "end": "1522960"
  },
  {
    "text": "input who runs the function a few hundred times with different configuration and comes back with",
    "start": "1522960",
    "end": "1528540"
  },
  {
    "text": "statistics about consumption and pricing and execution time so this allows me allowed me to be more data driven and to",
    "start": "1528540",
    "end": "1537210"
  },
  {
    "text": "use orchestration to to solve this problem and automate it you can use this",
    "start": "1537210",
    "end": "1542220"
  },
  {
    "text": "to automate your data by your CI CD pipelines as well which brings me to the",
    "start": "1542220",
    "end": "1550440"
  },
  {
    "text": "next topic continuous integration and save deployments what we mean by continuous integration it's basically",
    "start": "1550440",
    "end": "1558650"
  },
  {
    "text": "how you think about delivering and bringing your new code your updates your",
    "start": "1558650",
    "end": "1564090"
  },
  {
    "text": "new features your bug fixes anything you're developing as part of your product to production you want this to",
    "start": "1564090",
    "end": "1571200"
  },
  {
    "text": "be safe you want this to be quick hopefully automated so you know you don't have to go and change the",
    "start": "1571200",
    "end": "1577770"
  },
  {
    "text": "production environment manually with a terminal or stuff like that so let me show you what how you",
    "start": "1577770",
    "end": "1584490"
  },
  {
    "text": "do that but first I want I want to agree on the concept of safe because we've",
    "start": "1584490",
    "end": "1589980"
  },
  {
    "text": "been doing this for sincere since software was born right you have a production system you want to update it",
    "start": "1589980",
    "end": "1596510"
  },
  {
    "text": "here today we want to raise this safety kind of bar so let's agree what we mean by safe and",
    "start": "1596510",
    "end": "1602670"
  },
  {
    "text": "what you can do to make this process safer so you can do all sorts of things from pair programming to unit tests to",
    "start": "1602670",
    "end": "1610490"
  },
  {
    "text": "local integration tests all the way to code reviews you know you can add all these best practices to your team and",
    "start": "1610490",
    "end": "1616800"
  },
  {
    "text": "this really helps you you can go all the way to continued integration which means you build automatically and maybe run",
    "start": "1616800",
    "end": "1623610"
  },
  {
    "text": "tests automatically whenever you have a new update all the way to continuous delivery which means you deploy this",
    "start": "1623610",
    "end": "1630960"
  },
  {
    "text": "builds all the way to some sort of a production or pre-production environment",
    "start": "1630960",
    "end": "1638030"
  },
  {
    "text": "maybe you have some pre-production integration or even human semi-automated",
    "start": "1638030",
    "end": "1643170"
  },
  {
    "text": "except intense and then you go on and the the let's say the the final result",
    "start": "1643170",
    "end": "1648630"
  },
  {
    "text": "the ultimate result that you want to achieve is continuous deployment where every change that you get push that you",
    "start": "1648630",
    "end": "1654690"
  },
  {
    "text": "push into your version control system is automatically updated all the way to production without human intervention",
    "start": "1654690",
    "end": "1661140"
  },
  {
    "text": "okay that is the ultimate automation here let's see how we can get there and how we can make it safe there's a",
    "start": "1661140",
    "end": "1669900"
  },
  {
    "text": "problem how many of you in the last I don't know 12 months debugged or fix the",
    "start": "1669900",
    "end": "1677220"
  },
  {
    "text": "production environment manually like SSH nice okay it's not fun okay you do not",
    "start": "1677220",
    "end": "1685380"
  },
  {
    "text": "want to be the guy there okay you probably seen this animation already okay when there is a production system",
    "start": "1685380",
    "end": "1691020"
  },
  {
    "text": "running you don't want to be there trying to fix bugs before the customer hates the problem okay because that's",
    "start": "1691020",
    "end": "1696960"
  },
  {
    "text": "what you end up doing and it's not fun you don't want to be that guy it's fun",
    "start": "1696960",
    "end": "1703679"
  },
  {
    "text": "to watch but when you're there and it's 3:00 a.m. you don't want to be there and you'd then end up doing all sort of",
    "start": "1703679",
    "end": "1709590"
  },
  {
    "text": "tricks and magics there I do in an educational process but you",
    "start": "1709590",
    "end": "1714720"
  },
  {
    "text": "don't want to be there more than once or twice sometimes it goes really well okay",
    "start": "1714720",
    "end": "1719850"
  },
  {
    "text": "you feel like hey I did it it's great you feel like here like a ninja sometimes not really you're like",
    "start": "1719850",
    "end": "1727140"
  },
  {
    "text": "yeah this is what I need to do and just crushes on you and you don't want to be there so let me tell you what the",
    "start": "1727140",
    "end": "1734159"
  },
  {
    "text": "automation pipeline looks like to avoid these kind of situations we like to say there are four different phases from",
    "start": "1734159",
    "end": "1739890"
  },
  {
    "text": "your source control to your automated build to your automated tests all the way to the production environment we",
    "start": "1739890",
    "end": "1747360"
  },
  {
    "text": "when you when we say continuous integration we usually stop at the build phase so if you're using Java or.net or",
    "start": "1747360",
    "end": "1754409"
  },
  {
    "text": "any compiled language you want to build compile build an artifact that is the viable you want to go all the way to",
    "start": "1754409",
    "end": "1762659"
  },
  {
    "text": "continuous delivery usually with a manual step or kind of human intervention step before going to",
    "start": "1762659",
    "end": "1768929"
  },
  {
    "text": "production as we were saying before continuous deployment is where you just",
    "start": "1768929",
    "end": "1774539"
  },
  {
    "text": "deploy all the way how do you do that on AWS there are a few services that help you you can start from AWS code",
    "start": "1774539",
    "end": "1782100"
  },
  {
    "text": "commit or github if you prefer to host your code towards your git repository",
    "start": "1782100",
    "end": "1787980"
  },
  {
    "text": "you want to automate the build and the test steps with AWS code build of course",
    "start": "1787980",
    "end": "1795299"
  },
  {
    "text": "each one of these step is replaceable if you are more familiar with Jenkins or with other tools you can integrate them",
    "start": "1795299",
    "end": "1801630"
  },
  {
    "text": "as well and make them part of the pipeline maybe you have third-party tooling like I don't know Python unit",
    "start": "1801630",
    "end": "1808950"
  },
  {
    "text": "tests or just mean for JavaScript like your own testing framework and you can run your tests with code build as well",
    "start": "1808950",
    "end": "1815690"
  },
  {
    "text": "and then you want to go and finally deploy it to production once you are sure that integration test the unit",
    "start": "1815690",
    "end": "1822120"
  },
  {
    "text": "tests everything is fine in your pre-production or testing environment you want to deploy and we can use AWS",
    "start": "1822120",
    "end": "1827820"
  },
  {
    "text": "code deploy to deploy everything so traditionally called deploy has been used to deploy to traditional",
    "start": "1827820",
    "end": "1834210"
  },
  {
    "text": "environments like Amazon ec2 or Beanstalk but today I will show you that we recently announced that you can use AWS",
    "start": "1834210",
    "end": "1840820"
  },
  {
    "text": "to deploy to deploy your lambda functions as well and that's the trick about making your deployments safe I'm",
    "start": "1840820",
    "end": "1846940"
  },
  {
    "text": "going to show you what it looks like but how do you orchestrate this kind of C",
    "start": "1846940",
    "end": "1852610"
  },
  {
    "text": "ICD pipeline guess what we have a service called AWS pipeline that allows you to define the different staging",
    "start": "1852610",
    "end": "1860590"
  },
  {
    "text": "environment testing environment production environment to understand which tests and which steps need to run",
    "start": "1860590",
    "end": "1866140"
  },
  {
    "text": "before you actually deploy to the environment if this is not enough for",
    "start": "1866140",
    "end": "1871270"
  },
  {
    "text": "you we have customers that needed to have more control around their CI CD pipeline you can use AWS Amazon step",
    "start": "1871270",
    "end": "1879159"
  },
  {
    "text": "functions which is the orchestration tool that I showed you to build your own Orchestra CI see the orchestration",
    "start": "1879159",
    "end": "1885690"
  },
  {
    "text": "pipeline if you're curious there is a link on github and you can check it out",
    "start": "1885690",
    "end": "1891190"
  },
  {
    "text": "maybe customize it and use it to deploy your code to production the way we do",
    "start": "1891190",
    "end": "1897419"
  },
  {
    "text": "infrastructure as code as AWS is through cloud formation ok this is Sam the",
    "start": "1897419",
    "end": "1904270"
  },
  {
    "text": "sample the servlet application model is also Q squirrel but today it's the service application model and Sam is a",
    "start": "1904270",
    "end": "1910929"
  },
  {
    "text": "let's say it's a an expansion of cloud formation there are allows you to do",
    "start": "1910929",
    "end": "1916690"
  },
  {
    "text": "infrastructure as code so you define your application as a template and with that template in your hands you can go",
    "start": "1916690",
    "end": "1923289"
  },
  {
    "text": "and deploy it to different AWS accounts or to different alias regions or to different environments so this allows",
    "start": "1923289",
    "end": "1929679"
  },
  {
    "text": "you to have a standard way of defining the application and reproducible very easy to maintain version of all",
    "start": "1929679",
    "end": "1937590"
  },
  {
    "text": "definition of your application so Sam allows you to go from this very",
    "start": "1937590",
    "end": "1944080"
  },
  {
    "text": "large amount of code to deploy to define your service application to a much simpler easier to read",
    "start": "1944080",
    "end": "1951080"
  },
  {
    "text": "template so this is what the SS service transform looks like you can define your",
    "start": "1951080",
    "end": "1956509"
  },
  {
    "text": "AWS lambda functions you say you specify where is the where is the handler what",
    "start": "1956509",
    "end": "1963889"
  },
  {
    "text": "is the runtime like Python node Java and go what are the access policies without",
    "start": "1963889",
    "end": "1969590"
  },
  {
    "text": "the event triggering a function in this case it would be a proxy meaning every",
    "start": "1969590",
    "end": "1974629"
  },
  {
    "text": "endpoint will be handled by this lambda function and there are three service resources that you can use the service",
    "start": "1974629",
    "end": "1981230"
  },
  {
    "text": "function that gives you a much easier way with respect to the AWS lambda function resource to define your",
    "start": "1981230",
    "end": "1988100"
  },
  {
    "text": "functions the service API which gives you a way to define API gateway kind of",
    "start": "1988100",
    "end": "1993470"
  },
  {
    "text": "resources and methods and so on eventually providing a swagger template so if you are already using testing or",
    "start": "1993470",
    "end": "2001049"
  },
  {
    "text": "API definition tools that use swagger you can just import this swagger template through awsm and then",
    "start": "2001049",
    "end": "2009340"
  },
  {
    "text": "eventually also a simple table which this is a DynamoDB table but with very",
    "start": "2009340",
    "end": "2015309"
  },
  {
    "text": "very simple specification like what your read and write capacity so how many",
    "start": "2015309",
    "end": "2020730"
  },
  {
    "text": "requests read and write request can handle that table but every second so",
    "start": "2020730",
    "end": "2027850"
  },
  {
    "text": "this allows you to simplify your your service application definition if you",
    "start": "2027850",
    "end": "2035230"
  },
  {
    "text": "want to develop locally you have awsm CLI which is a local development and",
    "start": "2035230",
    "end": "2040929"
  },
  {
    "text": "debugging tool it will emulate lambda will emulate API gateway in your local machine so you can do local integration",
    "start": "2040929",
    "end": "2048638"
  },
  {
    "text": "tests or local unit tests on actual API endpoints and actual service functions",
    "start": "2048639",
    "end": "2055378"
  },
  {
    "text": "both awsm and awsm CLI are open source on github so if you want to read the",
    "start": "2055379",
    "end": "2061089"
  },
  {
    "text": "road map or contribute or fix the bag or even notify us of a bag please",
    "start": "2061089",
    "end": "2066280"
  },
  {
    "text": "open a new issue on github ok let's try to now erase the safety bar we want to",
    "start": "2066280",
    "end": "2072608"
  },
  {
    "text": "make sure that this e is the pipeline with all these tools that we are seeing is safe what do we need well we want a",
    "start": "2072609",
    "end": "2079658"
  },
  {
    "text": "way to define all of this in our infrastructure as code so we want to keep that best practice we want to be",
    "start": "2079659",
    "end": "2087339"
  },
  {
    "text": "able to monitor and to look at the metrics and be smart about it maybe react based on the numbers during the",
    "start": "2087339",
    "end": "2093819"
  },
  {
    "text": "deployment we want to have data-driven strategies of different strategies that we can choose to actually do the",
    "start": "2093819",
    "end": "2099910"
  },
  {
    "text": "deployment and maybe we want to customize what the system how the system works and what how the system behaves",
    "start": "2099910",
    "end": "2105640"
  },
  {
    "text": "based on our home cooks so maybe we do that a lot now with the SS services",
    "start": "2105640",
    "end": "2111130"
  },
  {
    "text": "maybe we have a built-in set of features but if you want to extend it we allow you to hook a lambda function and extend",
    "start": "2111130",
    "end": "2118089"
  },
  {
    "text": "the behavior of the service so maybe you want to do that during our deployment as well and maybe and this is key we want",
    "start": "2118089",
    "end": "2126400"
  },
  {
    "text": "to be able to rollback if there is any error during the deployment that's how you manage to sleep at night that's how",
    "start": "2126400",
    "end": "2132400"
  },
  {
    "text": "you can tell your developers just get push worst case scenario we roll back automatically based on errors and",
    "start": "2132400",
    "end": "2139299"
  },
  {
    "text": "metrics and data so that's the safety bar that's how we are raising the safety bar we're going to use the code build",
    "start": "2139299",
    "end": "2145839"
  },
  {
    "text": "service which I already mentioned it allows you to define a specification file echo and build spec file where you",
    "start": "2145839",
    "end": "2154990"
  },
  {
    "text": "define what needs to happen during the build phase and this is what it looks like so you have some environment variable",
    "start": "2154990",
    "end": "2161260"
  },
  {
    "text": "variables as input you have some install comments like NPM install or pip install maybe you want to do linting you want to",
    "start": "2161260",
    "end": "2168579"
  },
  {
    "text": "do testing and once you know you have run everything you want to to generate",
    "start": "2168579",
    "end": "2174630"
  },
  {
    "text": "an artifact that is ready to be deployed so in our case we want to package our",
    "start": "2174630",
    "end": "2180339"
  },
  {
    "text": "functions and our everything our service application through cloud formation and the output of that command will be used",
    "start": "2180339",
    "end": "2187720"
  },
  {
    "text": "by code deployed to actually go and deploy everything for us so today I'm",
    "start": "2187720",
    "end": "2193299"
  },
  {
    "text": "going to demonstrate to you what it looks like what this new feature looks like and this new feature allows AWS",
    "start": "2193299",
    "end": "2199900"
  },
  {
    "text": "code deploy to take your new code and deploy it in parallel with like",
    "start": "2199900",
    "end": "2206830"
  },
  {
    "text": "a completely independent independent version of it and do traffic shifting that's what we call traffic shifting but",
    "start": "2206830",
    "end": "2212860"
  },
  {
    "text": "this picture allows you to do Bluegreen deployment where you have the old version and the new version of the code",
    "start": "2212860",
    "end": "2218440"
  },
  {
    "text": "they're live both of them and you can say ok just send maybe 10% of the new",
    "start": "2218440",
    "end": "2223900"
  },
  {
    "text": "traffic to the new version just to see if it's working well and if it's",
    "start": "2223900",
    "end": "2228940"
  },
  {
    "text": "generating any error since we are doing this we are doing this and we managed",
    "start": "2228940",
    "end": "2234610"
  },
  {
    "text": "that process for you we can also roll back and say ok go 100% back to the",
    "start": "2234610",
    "end": "2240010"
  },
  {
    "text": "original version of the code that used to work mine eventually you can you can",
    "start": "2240010",
    "end": "2245560"
  },
  {
    "text": "add manual trailer tomorrow you can add pre or post deployment triggers through",
    "start": "2245560",
    "end": "2251530"
  },
  {
    "text": "another lambda function so you can say hey before you give any percent of the traffic to the new version run this",
    "start": "2251530",
    "end": "2258460"
  },
  {
    "text": "function just as a whatever you need to do and maybe after when everything went",
    "start": "2258460",
    "end": "2264460"
  },
  {
    "text": "smoothly you want to run another lambda function in the post traffic hook maybe to sync maybe to post a a message on the",
    "start": "2264460",
    "end": "2272230"
  },
  {
    "text": "chat or maybe to sync with a third party deployment management tool or anything that you like how do you actually manage",
    "start": "2272230",
    "end": "2281260"
  },
  {
    "text": "how the deployment and how much of the traffic is given to the new version we have different strategies so for example",
    "start": "2281260",
    "end": "2287980"
  },
  {
    "text": "today we are going to use this linear 10% every one minute what it means is",
    "start": "2287980",
    "end": "2294220"
  },
  {
    "text": "that every minute you give 10% more traffic to the new version okay so in 10",
    "start": "2294220",
    "end": "2300490"
  },
  {
    "text": "minutes we are done if pathway if 30 percent of the traffic",
    "start": "2300490",
    "end": "2305590"
  },
  {
    "text": "there is an error we wrote back to 100% but you can choose other variations for example the cannery you can say give 10%",
    "start": "2305590",
    "end": "2313260"
  },
  {
    "text": "cannery 10 percent 30 minutes you give 10% to the new version for 30 minutes if",
    "start": "2313260",
    "end": "2319480"
  },
  {
    "text": "nothing bad happens you just go all in with a new version so you have different",
    "start": "2319480",
    "end": "2324790"
  },
  {
    "text": "strategies you can even specify and build your own and this is what it looks",
    "start": "2324790",
    "end": "2330100"
  },
  {
    "text": "like in the console so you start rolling out 10% of the traffic to the new version",
    "start": "2330100",
    "end": "2337000"
  },
  {
    "text": "and you have this traffic shifting step that will take a while depending on the strategy at some point you will get to",
    "start": "2337000",
    "end": "2343720"
  },
  {
    "text": "50 60 40 maybe 50 50 all the way to 100 okay this is the everything went fine no",
    "start": "2343720",
    "end": "2351760"
  },
  {
    "text": "bug was introduced phase which is great but you know bad thing happens so I want",
    "start": "2351760",
    "end": "2358480"
  },
  {
    "text": "to show you what it looks like when you deploy about to production and it was not supposed to be there so let me show",
    "start": "2358480",
    "end": "2364990"
  },
  {
    "text": "you what it looks like I need mirroring give me a sir",
    "start": "2364990",
    "end": "2373619"
  },
  {
    "text": "okay so I'm going back to the AWS console I am using AWS cloud 9 which is",
    "start": "2376260",
    "end": "2385380"
  },
  {
    "text": "our cloud native code editor IDE where we have both our code and a terminal",
    "start": "2385380",
    "end": "2391440"
  },
  {
    "text": "that we can use as if we were in our local machine the best feature of cloud 9 is that there is a machine running",
    "start": "2391440",
    "end": "2398310"
  },
  {
    "text": "under the hood that helps us with the terminal by it switches off automatically if I if you don't use it",
    "start": "2398310",
    "end": "2404670"
  },
  {
    "text": "for 30 minutes so what's happening right now is that the machine is spinning up again with my environment with my code",
    "start": "2404670",
    "end": "2410700"
  },
  {
    "text": "with my terminal there we go so here I have an application it's a service",
    "start": "2410700",
    "end": "2417210"
  },
  {
    "text": "application as we were discussing before there is a simple table there is a service function here this service",
    "start": "2417210",
    "end": "2425400"
  },
  {
    "text": "function is triggered with the slash test resource so I will be creating an",
    "start": "2425400",
    "end": "2431460"
  },
  {
    "text": "API with a slash test get method I am configuring the save deployments with a",
    "start": "2431460",
    "end": "2438420"
  },
  {
    "text": "linear 10% every one minute and I'm monitoring the deployment using two alarms so an alarm is something that",
    "start": "2438420",
    "end": "2446010"
  },
  {
    "text": "triggers if a specific matrix hits a specific threshold that you specify so",
    "start": "2446010",
    "end": "2452160"
  },
  {
    "text": "here I'm monitoring the alias and the version just everything that can happen and here I define the two the two alarms",
    "start": "2452160",
    "end": "2460850"
  },
  {
    "text": "and that's all that's my application is not doing anything crazy this is what",
    "start": "2460850",
    "end": "2466260"
  },
  {
    "text": "the code looks like this is a node.js function which is reading from a",
    "start": "2466260",
    "end": "2471390"
  },
  {
    "text": "DynamoDB table and returning back the message so doing nothing crazy but I want to show you what happens when when",
    "start": "2471390",
    "end": "2479760"
  },
  {
    "text": "we deploy about to production so let's start invoking the system to show you",
    "start": "2479760",
    "end": "2486450"
  },
  {
    "text": "what it looks like so save deployments",
    "start": "2486450",
    "end": "2491630"
  },
  {
    "text": "there we go so I have a script that will start polling the system somewhere ok",
    "start": "2493770",
    "end": "2504240"
  },
  {
    "text": "let me go and find the URL so this is my stacking confirmation I have an output this is the URL of my API so I can",
    "start": "2504240",
    "end": "2512760"
  },
  {
    "text": "invoke it and it's going to tell me something to tell me something like message okay that message okay so now",
    "start": "2512760",
    "end": "2520830"
  },
  {
    "text": "I'm going to bash script Paul and I pass",
    "start": "2520830",
    "end": "2527850"
  },
  {
    "text": "the URL so I have this script that will be polling my API maybe a couple of times a second just to show you that",
    "start": "2527850",
    "end": "2534000"
  },
  {
    "text": "it's working and then I have another script that will be tailing a local log",
    "start": "2534000",
    "end": "2543060"
  },
  {
    "text": "file with the output of each individual invocation so message okay everything is",
    "start": "2543060",
    "end": "2548100"
  },
  {
    "text": "going smoothly now let's go and brought and break our code okay let's do",
    "start": "2548100",
    "end": "2553290"
  },
  {
    "text": "something really bad like throw new error okay don't do this in production",
    "start": "2553290",
    "end": "2559100"
  },
  {
    "text": "this is probably not going to happen if you have unit tests and code reviews and pure programming okay people don't do",
    "start": "2559100",
    "end": "2566340"
  },
  {
    "text": "that but we are on stage we have limited time so let me show you what breaking",
    "start": "2566340",
    "end": "2571440"
  },
  {
    "text": "production with the new error looks like so let's just deploy it to production",
    "start": "2571440",
    "end": "2576980"
  },
  {
    "text": "scripts deploy so I'm skipping all the best practices here I'm not asking a",
    "start": "2576980",
    "end": "2583710"
  },
  {
    "text": "peer to review this I'm not asking I'm not doing a code review I'm not even good pushing I'm just deploying so don't",
    "start": "2583710",
    "end": "2590190"
  },
  {
    "text": "do this but I want to show you the worst case scenario ever 100% bug in production without the ICD just to show",
    "start": "2590190",
    "end": "2598350"
  },
  {
    "text": "you what how you can be saved there and be tolerant to that scenario as well so",
    "start": "2598350",
    "end": "2604920"
  },
  {
    "text": "what's going to happen is that this is our confirmation console and in a few",
    "start": "2604920",
    "end": "2611010"
  },
  {
    "text": "seconds I'm going to be shown that okay there is an updating in progress of my stack and if we wait a couple of",
    "start": "2611010",
    "end": "2619140"
  },
  {
    "text": "cycles more there will be a live deployment dashboards for me that I can just click and see",
    "start": "2619140",
    "end": "2625300"
  },
  {
    "text": "what's going on okay there we go the code deployment code deploy deployment",
    "start": "2625300",
    "end": "2631119"
  },
  {
    "text": "started and we can see that we already we should already have ten percent of the traffic allocated to the new version",
    "start": "2631119",
    "end": "2637390"
  },
  {
    "text": "see but now if I go back to my terminal in my polling it's still polling and now",
    "start": "2637390",
    "end": "2644020"
  },
  {
    "text": "I can see that more or less one invocation every ten should be failing right because I am I'm using term linear",
    "start": "2644020",
    "end": "2652000"
  },
  {
    "text": "ten percent every one minute so ten percent of the traffic is going to a new version of my code which fails a hundred",
    "start": "2652000",
    "end": "2659080"
  },
  {
    "text": "percent of the time so more or less ten percent of the invocations we expect them to fail well will happen is that at",
    "start": "2659080",
    "end": "2667210"
  },
  {
    "text": "some point the alarm that we configure will trigger and we'll tell code deploy hey stop there is something wrong",
    "start": "2667210",
    "end": "2674230"
  },
  {
    "text": "just bring the code back to the working version let's see if that happens or",
    "start": "2674230",
    "end": "2679330"
  },
  {
    "text": "when it happens so as you can imagine",
    "start": "2679330",
    "end": "2684339"
  },
  {
    "text": "you want to have you know in a real-world scenario maybe your bugs",
    "start": "2684339",
    "end": "2689920"
  },
  {
    "text": "don't really fail a hundred percent of the time so you will not have ten percent failing invocations in",
    "start": "2689920",
    "end": "2696220"
  },
  {
    "text": "production right maybe your bug failed ten percent of the time so ten percent of ten percent means you have one",
    "start": "2696220",
    "end": "2702339"
  },
  {
    "text": "percent failure rate in production for one minute that's probably acceptable",
    "start": "2702339",
    "end": "2707440"
  },
  {
    "text": "depending on your rate if it's not on your on your load if it is not acceptable you can build a different",
    "start": "2707440",
    "end": "2713950"
  },
  {
    "text": "kind of data-driven approach maybe at Amazon we do like 0.0001 percent of the",
    "start": "2713950",
    "end": "2719920"
  },
  {
    "text": "traffic for a few minutes that's more than enough to see if there is an error that impacts our customers okay you can",
    "start": "2719920",
    "end": "2726339"
  },
  {
    "text": "already see that okay now is happening a hundred percent of the time if we go",
    "start": "2726339",
    "end": "2731710"
  },
  {
    "text": "back here okay we already rolled back a hundred percent to the previous version the deployment is canceled due to an",
    "start": "2731710",
    "end": "2738670"
  },
  {
    "text": "abort request that's what we say and if we keep refreshing our cloud formation",
    "start": "2738670",
    "end": "2745420"
  },
  {
    "text": "stack the rollback is already finished so we safely roll back to the previous",
    "start": "2745420",
    "end": "2750490"
  },
  {
    "text": "version without human intervention just with a data-driven check on their",
    "start": "2750490",
    "end": "2755680"
  },
  {
    "text": "on the live traffic so that's pretty cool as I mentioned this is probably not happening in production because you're a",
    "start": "2755680",
    "end": "2762640"
  },
  {
    "text": "good developer and you have CI CD pipelines you have code reviews so maybe you can tolerate one percent",
    "start": "2762640",
    "end": "2770320"
  },
  {
    "text": "error rate in production to automatically rollback if there is any problem that's what I wanted to show you",
    "start": "2770320",
    "end": "2777100"
  },
  {
    "text": "today I hope you enjoyed breaking production reminder you can get your $200 AWS critic if you got scanned",
    "start": "2777100",
    "end": "2784660"
  },
  {
    "text": "already if you didn't get scan maybe you're out make sure your scan and get and take your $200 credit we're going to",
    "start": "2784660",
    "end": "2792310"
  },
  {
    "text": "have other sessions today and tomorrow and the day after tomorrow so thank you for being here",
    "start": "2792310",
    "end": "2798720"
  },
  {
    "text": "[Applause] you",
    "start": "2798760",
    "end": "2803060"
  }
]