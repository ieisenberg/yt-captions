[
  {
    "start": "0",
    "end": "63000"
  },
  {
    "text": "hello everyone welcome to the session um first of all I'd like to say thank you so much for being here today thank you",
    "start": "320",
    "end": "6000"
  },
  {
    "text": "for your time really appreciate it um my name is Erasan i'm a senior software",
    "start": "6000",
    "end": "11440"
  },
  {
    "text": "engineer at Guilt so it's on behalf of Guilt's lovely engineering team that I'm",
    "start": "11440",
    "end": "16800"
  },
  {
    "text": "here today and I also have here with me Derek Charles from the tech leader team",
    "start": "16800",
    "end": "22000"
  },
  {
    "text": "from AWS and um today we're here because we want to talk to you guys a little bit",
    "start": "22000",
    "end": "28480"
  },
  {
    "text": "about the path that goes from the monolithic world into the microser world",
    "start": "28480",
    "end": "34559"
  },
  {
    "text": "now just before I I begin can I just ask raise your hands who here is on a",
    "start": "34559",
    "end": "41840"
  },
  {
    "text": "monolith today and is looking to go to a microservices or is in the process of doing so raise your hands",
    "start": "41840",
    "end": "48440"
  },
  {
    "text": "please okay there's quite a lot of you guys it's great um so there's going to",
    "start": "48440",
    "end": "54079"
  },
  {
    "text": "be quite a lot of takeaway from this session but for those of you who raise your hand there's going to be even more",
    "start": "54079",
    "end": "59840"
  },
  {
    "text": "so I really hope you guys enjoy um okay so let's get started here so that's what",
    "start": "59840",
    "end": "66000"
  },
  {
    "start": "63000",
    "end": "90000"
  },
  {
    "text": "we're going to be talking about today so why microservices in the first place uh we'll go through the the migration",
    "start": "66000",
    "end": "72400"
  },
  {
    "text": "process and some of the challenges you're going to find in there we're also going to talk to about guilt's journey",
    "start": "72400",
    "end": "78720"
  },
  {
    "text": "right some of the challenges that we've we've found when we went through that migration and how we solved them and",
    "start": "78720",
    "end": "84080"
  },
  {
    "text": "also going to talk about some uh standards and best practices that you can use when you're going through that migration",
    "start": "84080",
    "end": "90520"
  },
  {
    "start": "90000",
    "end": "185000"
  },
  {
    "text": "yourself so let me just start by talking a little bit about guilt and u as I do",
    "start": "90520",
    "end": "96880"
  },
  {
    "text": "so also try and give you guys a glimpse as to you know why does guilt even need a microservices architecture in the",
    "start": "96880",
    "end": "103439"
  },
  {
    "text": "first place right so guilt is a flash sales website what does that mean well",
    "start": "103439",
    "end": "109759"
  },
  {
    "text": "it means that uh we have those special sales that go live every day at noon on",
    "start": "109759",
    "end": "115200"
  },
  {
    "text": "uh US time and these uh these sales they feature different types of products from",
    "start": "115200",
    "end": "120640"
  },
  {
    "text": "different designer luxury brands and they're sold at a pretty good deal so what happens here under the hood is when",
    "start": "120640",
    "end": "127680"
  },
  {
    "text": "these sales they go live we get this huge wave of customers that rush to our",
    "start": "127680",
    "end": "133200"
  },
  {
    "text": "website in order to get a good deal right and oops I'm sorry there this is",
    "start": "133200",
    "end": "139840"
  },
  {
    "text": "what it actually looks like that's the actual graph of our checkout service",
    "start": "139840",
    "end": "145120"
  },
  {
    "text": "over five different days and what you're looking at here is those spikes on user",
    "start": "145120",
    "end": "151280"
  },
  {
    "text": "traffic which happen when we we have those sales going live so this obviously puts quite a bit of stress on our",
    "start": "151280",
    "end": "158160"
  },
  {
    "text": "technical infrastructure and the uh the most important aspect of this is it really hits different parts of our",
    "start": "158160",
    "end": "164959"
  },
  {
    "text": "system differently so some parts are hit way harder than others so there's a",
    "start": "164959",
    "end": "170640"
  },
  {
    "text": "question that you know a lot of you are probably asking yourselves already out of this and it's a question that we had",
    "start": "170640",
    "end": "176879"
  },
  {
    "text": "in our minds at some point in time and we were struggling struggling to find an",
    "start": "176879",
    "end": "183040"
  },
  {
    "text": "answer sorry um so back to the question how can we scale things up independently",
    "start": "183959",
    "end": "191040"
  },
  {
    "start": "185000",
    "end": "227000"
  },
  {
    "text": "right that's pretty important for us um around the same time there's a couple of other questions that we were also",
    "start": "191040",
    "end": "197519"
  },
  {
    "text": "thinking about and trying to find an answer first how can we arrange teams around business initiatives and that's",
    "start": "197519",
    "end": "204480"
  },
  {
    "text": "pretty important because it essentially means giving those initiatives the dedicated resources to keep pushing them",
    "start": "204480",
    "end": "210519"
  },
  {
    "text": "forward also how can you make it easy and fast to push changes to production",
    "start": "210519",
    "end": "216000"
  },
  {
    "text": "again it's pretty important because this really boils down to having the ability",
    "start": "216000",
    "end": "221040"
  },
  {
    "text": "to push features and even bug fixes as well faster to production",
    "start": "221040",
    "end": "227239"
  },
  {
    "start": "227000",
    "end": "297000"
  },
  {
    "text": "so the answer to those questions for us it was",
    "start": "227239",
    "end": "232280"
  },
  {
    "text": "microservices so what did we do about that that's a little bit of our history",
    "start": "232280",
    "end": "238000"
  },
  {
    "text": "so back on the left there back in 2007 we had our old Ruby on Rails um monolith",
    "start": "238000",
    "end": "244959"
  },
  {
    "text": "single data store and all that so from that we decided to break that bad boy",
    "start": "244959",
    "end": "251040"
  },
  {
    "text": "down into a number of Java services and uh front- end applications as well we",
    "start": "251040",
    "end": "257759"
  },
  {
    "text": "did realize at some stage though that a lot of these uh those Java services they actually became monolith themselves so",
    "start": "257759",
    "end": "265199"
  },
  {
    "text": "we broke those further down further down into now real microservices now being",
    "start": "265199",
    "end": "270880"
  },
  {
    "text": "written in Scala we also wrote a ton of new services as well we broke down our",
    "start": "270880",
    "end": "277280"
  },
  {
    "text": "front-end apps into lots of smaller front-end components and uh that's",
    "start": "277280",
    "end": "282720"
  },
  {
    "text": "pretty much where we are today we still have though few of those Java services lingering around and uh our monolith is",
    "start": "282720",
    "end": "288800"
  },
  {
    "text": "still there but it's really just for for the admin part of the site guilt.com is actually running on a microservices",
    "start": "288800",
    "end": "295360"
  },
  {
    "text": "architecture today right so we used to run all of that in a data center right and then we",
    "start": "295360",
    "end": "302400"
  },
  {
    "start": "297000",
    "end": "360000"
  },
  {
    "text": "decided all right let's let's go to the cloud and then we decided to go to AWS the way we've uh we've done this",
    "start": "302400",
    "end": "308800"
  },
  {
    "text": "migration was we took all of those services and we've dropped them into what we called a legacy VPC at the same",
    "start": "308800",
    "end": "316960"
  },
  {
    "text": "time we created a number of other accounts in AWS one for each of our",
    "start": "316960",
    "end": "322039"
  },
  {
    "text": "departments and we assigned teams to those accounts so as those teams were",
    "start": "322039",
    "end": "328560"
  },
  {
    "text": "you know working and writing new services they would write those services to the account that they were now",
    "start": "328560",
    "end": "334160"
  },
  {
    "text": "assigned to at the same times these same teams they were also moving services that they owned from this uh legacy VPC",
    "start": "334160",
    "end": "341520"
  },
  {
    "text": "into the the account that they had been assigned to so the nice thing we get with this is we get this really nice",
    "start": "341520",
    "end": "348479"
  },
  {
    "text": "teams of teams structure where you know we have lots of independence lots of",
    "start": "348479",
    "end": "354080"
  },
  {
    "text": "autonomy and really most importantly we get lots of initiatives happening in",
    "start": "354080",
    "end": "359880"
  },
  {
    "text": "parallel right so I think I can I can safely say that guilt has successfully",
    "start": "359880",
    "end": "366240"
  },
  {
    "text": "gone from what was a monolith to a microservices architecture right but",
    "start": "366240",
    "end": "373120"
  },
  {
    "text": "when you're considering doing that yourself I think it's it's important that you look at both architectural",
    "start": "373120",
    "end": "378720"
  },
  {
    "text": "styles and then you see what you'd get with each of them and then be able to fully visualize what you the advantage",
    "start": "378720",
    "end": "385680"
  },
  {
    "text": "that you're going to get when you go through a microservices architecture right and I think I think this is a pretty good representation of this",
    "start": "385680",
    "end": "392720"
  },
  {
    "text": "because for example there are a couple of things which are actually simpler on on the monolith world for example",
    "start": "392720",
    "end": "399039"
  },
  {
    "text": "deployments and interm module refactoring there's a flip side of that though in which um there's actually",
    "start": "399039",
    "end": "405759"
  },
  {
    "text": "pretty good opportunities with regards to those two things for example in terms of uh in deployment independent",
    "start": "405759",
    "end": "411520"
  },
  {
    "text": "deployment pipelines and strong API definitions in the microser world and",
    "start": "411520",
    "end": "416960"
  },
  {
    "text": "then there are also things where microservices just does give you an advantage for example graceful degradation just being able to much more",
    "start": "416960",
    "end": "424000"
  },
  {
    "text": "easily horizontally scale your services as well and finally with technology diversity just having a wider range of",
    "start": "424000",
    "end": "430319"
  },
  {
    "text": "technologies that you can choose from which for me I think that's that's pretty awesome so that was a little bit of",
    "start": "430319",
    "end": "437360"
  },
  {
    "text": "guilt history how we went from A to B but um how do you guys actually do that",
    "start": "437360",
    "end": "443759"
  },
  {
    "text": "now let's start talking about that and um I'm going to begin this discussion by talking about the organizational changes",
    "start": "443759",
    "end": "450479"
  },
  {
    "text": "that you should see as you move into microservices land all",
    "start": "450479",
    "end": "456360"
  },
  {
    "text": "right okay so that's how things are organized when you're on the monolithic",
    "start": "456360",
    "end": "461680"
  },
  {
    "text": "and probably a lot of you are familiar with this right um essentially your",
    "start": "461680",
    "end": "466880"
  },
  {
    "text": "organizational structure is mirroring your application architecture or or vice",
    "start": "466880",
    "end": "471919"
  },
  {
    "text": "versa then on micros service world things are",
    "start": "471919",
    "end": "477039"
  },
  {
    "start": "473000",
    "end": "498000"
  },
  {
    "text": "quite different now because instead you now have to start thinking about organizing your teams around business",
    "start": "477039",
    "end": "484240"
  },
  {
    "text": "initiatives right for example accounts an accounts team a personalization team",
    "start": "484240",
    "end": "490319"
  },
  {
    "text": "mobile team at guilt we have things like checkout team and email and uh push",
    "start": "490319",
    "end": "495919"
  },
  {
    "text": "notifications team as well so once you organize your teams",
    "start": "495919",
    "end": "501199"
  },
  {
    "start": "498000",
    "end": "581000"
  },
  {
    "text": "that way eventually you'll get to a point where to where you have to start thinking about how do I compose my teams",
    "start": "501199",
    "end": "508160"
  },
  {
    "text": "and when you get to that you have to start thinking about ingredients what are those ingredients frontenders your",
    "start": "508160",
    "end": "514560"
  },
  {
    "text": "backenders data scientists etc and uh keep in mind that um those each team",
    "start": "514560",
    "end": "521599"
  },
  {
    "text": "will have different needs so don't try to come up with a fixed composition for",
    "start": "521599",
    "end": "527279"
  },
  {
    "text": "your teams right instead just focus on putting ingredients together in a way",
    "start": "527279",
    "end": "532880"
  },
  {
    "text": "that makes sense for each team so that each team will have what it needs in order to operate independently so when",
    "start": "532880",
    "end": "540000"
  },
  {
    "text": "you put those ingredients together in terms of size you're really looking at small teams right probably between three",
    "start": "540000",
    "end": "546800"
  },
  {
    "text": "to five people and generally speaking that's true at guilt but it's not really",
    "start": "546800",
    "end": "553920"
  },
  {
    "text": "something that we have set on stone for example that's my team that's",
    "start": "553920",
    "end": "559040"
  },
  {
    "text": "us trying to look normal in a picture trying really hard um so it's the seven of us here right which is considered",
    "start": "559040",
    "end": "566320"
  },
  {
    "text": "slightly large for guild standards but we have all the ingredients we need we have data data scientists and uh",
    "start": "566320",
    "end": "572519"
  },
  {
    "text": "backenders uh we're still small enough as well and we're part of the same initiative so it makes completely sense",
    "start": "572519",
    "end": "579040"
  },
  {
    "text": "for for us to be together as a team right so once then you uh you organize",
    "start": "579040",
    "end": "585360"
  },
  {
    "start": "581000",
    "end": "636000"
  },
  {
    "text": "your teams like that you give them the ingredients that they need really you end up with a number of independent",
    "start": "585360",
    "end": "591120"
  },
  {
    "text": "teams who have full ownership on the service that you're going to be having in production and when I say ownership I",
    "start": "591120",
    "end": "597200"
  },
  {
    "text": "actually mean a list of things for example requirements you're those teams will be able will be responsible for",
    "start": "597200",
    "end": "604160"
  },
  {
    "text": "defining their own road map quality the teams will also be responsible for testing those services making sure that",
    "start": "604160",
    "end": "610399"
  },
  {
    "text": "they're stable in production deployment the team is also responsible for uh",
    "start": "610399",
    "end": "615519"
  },
  {
    "text": "releasing using their versions of the service that they own source code the team owns a source code for each of the",
    "start": "615519",
    "end": "621519"
  },
  {
    "text": "service that they own so changes to that source code have to be reviewed by a member of the team and finally with",
    "start": "621519",
    "end": "627440"
  },
  {
    "text": "technology selection the teams also have some freedom to choose the best set of",
    "start": "627440",
    "end": "632640"
  },
  {
    "text": "technologies that they're going to be using for the service that they own okay I'm sorry again this just keeps on",
    "start": "632640",
    "end": "640079"
  },
  {
    "text": "jumping okay so let's talk a little bit about the architecture changes that you should see in microser world now so",
    "start": "640079",
    "end": "647279"
  },
  {
    "start": "646000",
    "end": "656000"
  },
  {
    "text": "that's how things are on the monolith again a lot of you are probably familiar with this there's not a lot there your",
    "start": "647279",
    "end": "652480"
  },
  {
    "text": "single deployable a number of modules and then your single centralized database on microservices now things",
    "start": "652480",
    "end": "659120"
  },
  {
    "start": "656000",
    "end": "774000"
  },
  {
    "text": "start to change so now you have a much more broken down architecture right you have all these specific services for",
    "start": "659120",
    "end": "666240"
  },
  {
    "text": "specific functionalities so for example an account service a cart service at guilt we have things like a weight list",
    "start": "666240",
    "end": "672800"
  },
  {
    "text": "service a uh checkout service and a few hundred others as well there's a few things to to pay attention to here first",
    "start": "672800",
    "end": "679839"
  },
  {
    "text": "each service has its own private data store uh also each service will have its",
    "start": "679839",
    "end": "685680"
  },
  {
    "text": "own binary so it can be deployed independently finally each service also",
    "start": "685680",
    "end": "690800"
  },
  {
    "text": "has its own load balancer so it's much more easier it's easier for to scale up",
    "start": "690800",
    "end": "696079"
  },
  {
    "text": "or down those services if you're on on AWS you might also consider API gateway as a facade",
    "start": "696079",
    "end": "703839"
  },
  {
    "text": "for your services and with that you get out of the box things like weight control authentication and a few other",
    "start": "703839",
    "end": "711120"
  },
  {
    "text": "things now let's just quickly pop the hood here and look at what a service a service actually looks like so this is",
    "start": "711120",
    "end": "717760"
  },
  {
    "text": "the typical stack for a service at guilt and what we have here is we have DNS",
    "start": "717760",
    "end": "723440"
  },
  {
    "text": "that's the entry point for the service that's how you talk to that service h in a load balancer as well then an",
    "start": "723440",
    "end": "730240"
  },
  {
    "text": "autoscaling group so we get some at least some guarantees with regards to the minimum number of instances that we",
    "start": "730240",
    "end": "736160"
  },
  {
    "text": "want that service to be running on um the a number of EC2 instances obviously",
    "start": "736160",
    "end": "741360"
  },
  {
    "text": "a private data store docker registry and a lot of our teams are using actually ECR for that a cloudatch log group as",
    "start": "741360",
    "end": "749680"
  },
  {
    "text": "well so we can push log messages for that service uh a number of metrics as",
    "start": "749680",
    "end": "754720"
  },
  {
    "text": "well and then on top of those a number of alarms those alarms are hooked up to",
    "start": "754720",
    "end": "760000"
  },
  {
    "text": "an SNS topic and that's per service that SNS topic is then hooked up to our",
    "start": "760000",
    "end": "765680"
  },
  {
    "text": "paging system so when any of those alarms trigger whoever is on call on the team is going to get paged and you know",
    "start": "765680",
    "end": "772240"
  },
  {
    "text": "we'll know production is probably on fire if you're wondering about the size",
    "start": "772240",
    "end": "778240"
  },
  {
    "start": "774000",
    "end": "795000"
  },
  {
    "text": "of those services this is the dist distribution of the instance types for each of our services and as you can see",
    "start": "778240",
    "end": "785079"
  },
  {
    "text": "there the vast vast majority of our services are actually running on a T2",
    "start": "785079",
    "end": "790959"
  },
  {
    "text": "instance which are the the smallest and cheapest instance you'll have in AWS today okay",
    "start": "790959",
    "end": "797000"
  },
  {
    "text": "so that was architecture of microservices in a nutshell",
    "start": "797000",
    "end": "803040"
  },
  {
    "text": "but how do you actually go from the monolith to that nice architecture how do you get there let's talk about that",
    "start": "803040",
    "end": "809600"
  },
  {
    "text": "now and um I'm going to illustrate this process using a pattern called the",
    "start": "809600",
    "end": "814639"
  },
  {
    "text": "strangler pattern um it's a pattern that Martin Fowler has actually written about before on his website so if any of you",
    "start": "814639",
    "end": "822320"
  },
  {
    "text": "are looking for more information about that there's actually a good bit of information on his website about this",
    "start": "822320",
    "end": "827360"
  },
  {
    "text": "pattern the basic idea about the strangler pattern pattern is that you're",
    "start": "827360",
    "end": "832480"
  },
  {
    "text": "going to be building your new system around the edges of your current system",
    "start": "832480",
    "end": "838399"
  },
  {
    "text": "so they will coexist for for some time so that's our monolith here right three",
    "start": "838399",
    "end": "844720"
  },
  {
    "text": "three modules uh the first thing I was going to say is once you're committed to",
    "start": "844720",
    "end": "851360"
  },
  {
    "text": "breaking down your monolith I'm sorry there you go once you're committed to your monolith h if",
    "start": "851360",
    "end": "858079"
  },
  {
    "text": "you have a new feature don't stick it in the monolith right instead just identify",
    "start": "858079",
    "end": "864000"
  },
  {
    "text": "what is the business domain of that feature and then just write a new microser for it outside of your",
    "start": "864000",
    "end": "870040"
  },
  {
    "text": "monolith you may find that uh you may need that microser to talk back to the",
    "start": "870040",
    "end": "876079"
  },
  {
    "text": "monolith and you can achieve that with what's called an anti-corruption layer or ACL and the ACL here really is it's a",
    "start": "876079",
    "end": "884720"
  },
  {
    "text": "translation layer so it's translating types from the microser to the monolith",
    "start": "884720",
    "end": "890639"
  },
  {
    "text": "and vice versa and the key idea here is just to keep your microservices clean",
    "start": "890639",
    "end": "896240"
  },
  {
    "text": "and not polluted with uh with types from the monolith with the API of the",
    "start": "896240",
    "end": "901440"
  },
  {
    "text": "monolith so with that",
    "start": "901440",
    "end": "907000"
  },
  {
    "text": "eventually you'll have to start moving to to actually extract things out of the",
    "start": "907000",
    "end": "913279"
  },
  {
    "text": "the monolith and the key principle here really is just really start simple right",
    "start": "913279",
    "end": "918560"
  },
  {
    "text": "in this case here I've started with the user service because it's got no",
    "start": "918560",
    "end": "923760"
  },
  {
    "text": "dependencies back on the monolith that means I don't have to integrate it back with that monolith the monolith does",
    "start": "923760",
    "end": "929600"
  },
  {
    "text": "need to talk to that service obviously but you can easily achieve that by just",
    "start": "929600",
    "end": "934720"
  },
  {
    "text": "redirecting the requests that were going through your old user module component",
    "start": "934720",
    "end": "940720"
  },
  {
    "text": "or whatever in your model is just redirect the request to now go to your brand new user",
    "start": "940720",
    "end": "947000"
  },
  {
    "text": "microser once you're past that then if it works",
    "start": "947000",
    "end": "955920"
  },
  {
    "text": "uh nope please",
    "start": "955920",
    "end": "960440"
  },
  {
    "start": "960000",
    "end": "1003000"
  },
  {
    "text": "ah sorry i I always forget i have to point there um right once you're past that then you can start taking more",
    "start": "961120",
    "end": "968639"
  },
  {
    "text": "complicated services right so services where you know you will have to talk back to to the monolith and again you",
    "start": "968639",
    "end": "975759"
  },
  {
    "text": "can make use of the u the anti-corruption layer for this keep your microservices clean and and tidy once",
    "start": "975759",
    "end": "983600"
  },
  {
    "text": "you're at that stage really it's just a matter of perseverance just keep pushing",
    "start": "983600",
    "end": "990560"
  },
  {
    "text": "don't give up just keep moving until you have moved you know either everything that you wanted to extract out of the",
    "start": "990560",
    "end": "997199"
  },
  {
    "text": "monolith or you literally strangled the entire monolith yourself and at that",
    "start": "997199",
    "end": "1003160"
  },
  {
    "start": "1003000",
    "end": "1012000"
  },
  {
    "text": "stage really all that's left you just get your services to start pointing and",
    "start": "1003160",
    "end": "1008720"
  },
  {
    "text": "talking directly to each other and with that I'd like to hand it over to Derek",
    "start": "1008720",
    "end": "1015759"
  },
  {
    "start": "1012000",
    "end": "1057000"
  },
  {
    "text": "all right thanks Emerson so next we'd like to talk a little bit about data",
    "start": "1015759",
    "end": "1021000"
  },
  {
    "text": "management um so we've covered sort of the architectural and sort of the the culture and team organization aspects",
    "start": "1021000",
    "end": "1027520"
  },
  {
    "text": "here uh and as soon as you start to think about splitting off a micros service uh and creating an independent",
    "start": "1027520",
    "end": "1032798"
  },
  {
    "text": "entity one of the first things that you're going to need to think about is how you're going to store the data",
    "start": "1032799",
    "end": "1038000"
  },
  {
    "text": "and you know looking backwards for the past few decades at least uh by far the",
    "start": "1038000",
    "end": "1043199"
  },
  {
    "text": "standard here uh for the monolithic architecture has been a big monolithic database uh that sits alongside that big",
    "start": "1043199",
    "end": "1048799"
  },
  {
    "text": "monolithic application so you have lots of people using the same database uh you have a big complicated schema uh you",
    "start": "1048799",
    "end": "1054400"
  },
  {
    "text": "have a lot of people that are sharing that resource and one of the great things",
    "start": "1054400",
    "end": "1059520"
  },
  {
    "start": "1057000",
    "end": "1139000"
  },
  {
    "text": "about moving to a microservices architecture that you want to embrace is this concept of decentralized data",
    "start": "1059520",
    "end": "1064880"
  },
  {
    "text": "stores so one of the fundamental things here is every micros service has its own private data store there's no sharing",
    "start": "1064880",
    "end": "1071039"
  },
  {
    "text": "across services and you're able to realize some great benefits uh by by sort of um agreeing to this uh and the",
    "start": "1071039",
    "end": "1079039"
  },
  {
    "text": "first one and maybe the most important is freedom of choice uh developers love to be able to pick the tools that they",
    "start": "1079039",
    "end": "1084320"
  },
  {
    "text": "want right and so if you're starting with a blank slate uh as a developer as a service team it's really up to you to",
    "start": "1084320",
    "end": "1090000"
  },
  {
    "text": "pick the right technology for the job and of course there's a lot of options uh on AWS so that's",
    "start": "1090000",
    "end": "1095799"
  },
  {
    "text": "great uh another key uh point here is uh you have low impact schema changes so",
    "start": "1095799",
    "end": "1102000"
  },
  {
    "text": "with a big monolithic relational database uh often it can take a long time to get everybody to agree on a",
    "start": "1102000",
    "end": "1107200"
  },
  {
    "text": "schema change agree on a date and everyone's got to move forward at the same time right if there's a problem you're going to have to roll it back uh",
    "start": "1107200",
    "end": "1113520"
  },
  {
    "text": "and that's just going to kill your velocity right so uh as you move forward uh into microservices you're able to",
    "start": "1113520",
    "end": "1120000"
  },
  {
    "text": "change the schema at will right the service team owns the schema nobody else knows about it you could be changing it multiple times a day right so you're",
    "start": "1120000",
    "end": "1126160"
  },
  {
    "text": "able to move much faster and finally you're able to scale independently you may have some of these services that are very small they're",
    "start": "1126160",
    "end": "1132320"
  },
  {
    "text": "just taking a few requests you can save money by having a very small data store on the back",
    "start": "1132320",
    "end": "1138559"
  },
  {
    "start": "1139000",
    "end": "1217000"
  },
  {
    "text": "end uh and next it's uh it's uh interesting to take a look at the different options that are available in",
    "start": "1139799",
    "end": "1144880"
  },
  {
    "text": "AWS uh for storage uh again I think many of us are tempted when we're used to a monolithic model to look at everything",
    "start": "1144880",
    "end": "1150799"
  },
  {
    "text": "in terms of a relational database right that's been the sort of king for the last uh 30 plus years uh and it works",
    "start": "1150799",
    "end": "1156559"
  },
  {
    "text": "very well for uh problems and questions that are well suited to relational queries to SQL queries um but since we",
    "start": "1156559",
    "end": "1163919"
  },
  {
    "text": "have lots of options available to us in AWS what we want to do when we're building a new micros service is think",
    "start": "1163919",
    "end": "1170160"
  },
  {
    "text": "about uh the data access patterns first right how are we going to be writing the data and most importantly uh what are",
    "start": "1170160",
    "end": "1176000"
  },
  {
    "text": "the patterns for reading the data out and then we want to work backwards from that data access and then pick the right",
    "start": "1176000",
    "end": "1182080"
  },
  {
    "text": "technology for the job and in some cases that may be multiple data data storage technologies inside the same service so",
    "start": "1182080",
    "end": "1189039"
  },
  {
    "text": "for example you might be building a shopping cart service that could be lend very well to Dynamob and a key value",
    "start": "1189039",
    "end": "1194960"
  },
  {
    "text": "access pattern so rather than shoehorning that into my SQL use Dynamob right use the right tool for the job uh",
    "start": "1194960",
    "end": "1201200"
  },
  {
    "text": "you may want full text search uh that's something that could be accomplished probably better with elastic search than",
    "start": "1201200",
    "end": "1206240"
  },
  {
    "text": "trying to put that into a relational database uh or you could have object storage for example so uh let the",
    "start": "1206240",
    "end": "1212559"
  },
  {
    "text": "service team pick what works well for them uh could be a single database um could be a a relatively sophisticated",
    "start": "1212559",
    "end": "1220080"
  },
  {
    "start": "1217000",
    "end": "1243000"
  },
  {
    "text": "uh backend with lots and lots of different data technologies they're all talking to each other uh I guess most",
    "start": "1220080",
    "end": "1225520"
  },
  {
    "text": "services are unlikely to have uh this much complexity behind them uh this may be an indication it's time to split that",
    "start": "1225520",
    "end": "1231120"
  },
  {
    "text": "service up uh but certainly if you have some heavy lifting to do in the background uh you could design an arbitrarily uh sophisticated backend for",
    "start": "1231120",
    "end": "1238640"
  },
  {
    "text": "your data storage uh based on what you're looking to",
    "start": "1238640",
    "end": "1243039"
  },
  {
    "start": "1243000",
    "end": "1316000"
  },
  {
    "text": "do so another question that comes up uh from customers as they're going down this path towards microservices is okay",
    "start": "1244200",
    "end": "1251440"
  },
  {
    "text": "so I've broken up my big monolithic database into lots and lots of little pieces you know dozens or hundreds of",
    "start": "1251440",
    "end": "1257039"
  },
  {
    "text": "pieces now I don't want to put it back together again right uh so how do I do that in the old model it was easy right",
    "start": "1257039",
    "end": "1262960"
  },
  {
    "text": "i had a big database i could dump it to a data warehouse or I could just run some queries against it and do my",
    "start": "1262960",
    "end": "1268000"
  },
  {
    "text": "business intelligent intelligence rollup uh for example uh or my analytics so",
    "start": "1268000",
    "end": "1273600"
  },
  {
    "text": "let's talk through a few ways that you can think about doing data inte uh aggregation in this sort of new",
    "start": "1273600",
    "end": "1278960"
  },
  {
    "text": "microservices world um the first way is probably the most simple uh it's the",
    "start": "1278960",
    "end": "1284000"
  },
  {
    "text": "pull model and essentially uh you write your application that needs to do this aggregation work uh and you just have it",
    "start": "1284000",
    "end": "1290480"
  },
  {
    "text": "go through the front door go through the uh APIs pull the data in that it needs and and do the aggregation um I suppose",
    "start": "1290480",
    "end": "1297440"
  },
  {
    "text": "that's the most sort of pure from an architectural standpoint um and it's fine for small amounts of data but if",
    "start": "1297440",
    "end": "1303360"
  },
  {
    "text": "you're going to be pulling a lot of data or all of the data uh that's probably going to put a lot of pressure uh on",
    "start": "1303360",
    "end": "1308480"
  },
  {
    "text": "your APIs right so probably not the most efficient thing to",
    "start": "1308480",
    "end": "1313440"
  },
  {
    "start": "1316000",
    "end": "1361000"
  },
  {
    "text": "Uh so what we see a lot of I would say this is the most common thing that we see is a push model so this requires",
    "start": "1317440",
    "end": "1322880"
  },
  {
    "text": "some collaboration between these different microser teams uh and they're all going to agree to dump this data to",
    "start": "1322880",
    "end": "1328720"
  },
  {
    "text": "the same place very commonly that's S3 s3 super durable uh very inexpensive uh",
    "start": "1328720",
    "end": "1335280"
  },
  {
    "text": "and once data sits in S3 you can do all sorts of analytics on it you can put it in Redshift uh you can do EMR queries",
    "start": "1335280",
    "end": "1341600"
  },
  {
    "text": "for example uh so you can just have all these services agree dump that data to S3 uh you could also think about using",
    "start": "1341600",
    "end": "1347919"
  },
  {
    "text": "Amazon Kinesis and just all push to the same stream if it's log data you could think about pushing all that log data to",
    "start": "1347919",
    "end": "1353360"
  },
  {
    "text": "cloudatch logs so you know pick the technology that works have everybody dump it there and then aggregation becomes very easy",
    "start": "1353360",
    "end": "1361799"
  },
  {
    "start": "1361000",
    "end": "1392000"
  },
  {
    "text": "if you outgrow that model and you need to get a little bit more sophisticated then you can think about a publish",
    "start": "1362000",
    "end": "1367360"
  },
  {
    "text": "subscribe model uh so in this model uh again these uh different services are going to agree uh where they want to",
    "start": "1367360",
    "end": "1373600"
  },
  {
    "text": "push the data but they're going to push to you know different swim lanes or different uh different topics so you",
    "start": "1373600",
    "end": "1379200"
  },
  {
    "text": "could use SNS for this you could use Amazon Kinesis for example uh publish that data to the right topic uh or to",
    "start": "1379200",
    "end": "1386000"
  },
  {
    "text": "the right uh Amazon Kinesis stream and then the folks that need to consume that data can grab",
    "start": "1386000",
    "end": "1392158"
  },
  {
    "text": "it you might be tempted to do this last pattern uh and make a composite service",
    "start": "1392200",
    "end": "1397280"
  },
  {
    "text": "and uh if all else fails you certainly could think about doing this uh we would advise you to think very carefully",
    "start": "1397280",
    "end": "1402960"
  },
  {
    "text": "before building one of these composite service services what you're saying here is I understand the rules which are very",
    "start": "1402960",
    "end": "1409440"
  },
  {
    "text": "tight service boundaries no sharing the data stores uh and we're going to break the rules because uh it makes sense um",
    "start": "1409440",
    "end": "1415919"
  },
  {
    "text": "and so think very carefully about that as soon as you start down this path uh it may be efficient but now you have",
    "start": "1415919",
    "end": "1421679"
  },
  {
    "text": "tight coupling again uh and if the owner of the user service wants to change their schema they're going to have a",
    "start": "1421679",
    "end": "1426880"
  },
  {
    "text": "velocity hit they're going to need to go off to this other service uh and ask them uh to accept a change uh so uh far",
    "start": "1426880",
    "end": "1433200"
  },
  {
    "text": "and away I would say the push model is what we see the most of uh and we would suggest that you start start",
    "start": "1433200",
    "end": "1439600"
  },
  {
    "start": "1440000",
    "end": "1464000"
  },
  {
    "text": "there so next uh let's talk a little bit about a API discovery and API management",
    "start": "1440840",
    "end": "1446960"
  },
  {
    "text": "in a uh microservices model we'll start with API discovery and what we mean by",
    "start": "1446960",
    "end": "1453120"
  },
  {
    "text": "that is simply uh when your service comes online your application logic comes online uh it knows which services",
    "start": "1453120",
    "end": "1458640"
  },
  {
    "text": "it needs to call out to it's got to find them how is it going to do that based on the environment that it finds itself",
    "start": "1458640",
    "end": "1464360"
  },
  {
    "text": "in and the advice here is keep it simple uh if you can uh for example this is the",
    "start": "1464360",
    "end": "1470080"
  },
  {
    "text": "model that guilt use uh uses uh it works very well for them uh and it's simply to use DNS uh when your service comes",
    "start": "1470080",
    "end": "1476400"
  },
  {
    "text": "online it knows the name of the service that it needs to talk to uh it knows that the company name is exampample.com",
    "start": "1476400",
    "end": "1482240"
  },
  {
    "text": "uh and so the only thing it needs to figure out is what environment it's running in and it can construct the DNS name of the service that's typically",
    "start": "1482240",
    "end": "1489200"
  },
  {
    "text": "going to be a CNAME right an alias that's going to point at an elastic load balancer endpoint or an API gateway",
    "start": "1489200",
    "end": "1495360"
  },
  {
    "text": "endpoint uh it's a very simple solution uh very flexible uh as far as how to find what environment you're running in",
    "start": "1495360",
    "end": "1502080"
  },
  {
    "text": "uh you can do things like if you're running on EC2 just push that environment name down into the EC2",
    "start": "1502080",
    "end": "1507919"
  },
  {
    "text": "instance metadata uh at uh at instance launch time uh using the user data uh",
    "start": "1507919",
    "end": "1514159"
  },
  {
    "text": "and the service can check that uh construct that URL and go find what it needs to",
    "start": "1514159",
    "end": "1519880"
  },
  {
    "text": "find uh that may be uh uh not sophisticated enough for your use case you may outgrow that in which case there",
    "start": "1519880",
    "end": "1526080"
  },
  {
    "text": "are a lot of great options out there uh software vendors uh so Netflix for example has Eureka there's CD there's",
    "start": "1526080",
    "end": "1533440"
  },
  {
    "text": "console and of course Apache Zookeeper uh sort of venerable uh solution for this and these have some other",
    "start": "1533440",
    "end": "1538960"
  },
  {
    "text": "advantages as well uh they have some some more sophisticated logic for health checking uh and failover and",
    "start": "1538960",
    "end": "1545120"
  },
  {
    "text": "shortcircuiting uh so if you want to get more sophisticated you can do this uh just keep in mind now somebody's got to",
    "start": "1545120",
    "end": "1551600"
  },
  {
    "text": "uh manage this new service they've got to uh fix it if it breaks uh they've got to make sure that it's performant and",
    "start": "1551600",
    "end": "1556880"
  },
  {
    "text": "that it's scaling well uh so you're you're definitely taking on some complexity and some administrative overhead if you go down this",
    "start": "1556880",
    "end": "1564919"
  },
  {
    "text": "route and this is a pretty straightforward uh uh approach if you go with it uh essentially the service",
    "start": "1564919",
    "end": "1570240"
  },
  {
    "text": "registry is going to be the location uh the repository of knowledge for the location of all the services they know",
    "start": "1570240",
    "end": "1575840"
  },
  {
    "text": "to register when they come online uh and when a client comes online uh it just queries the service registry uh and",
    "start": "1575840",
    "end": "1581919"
  },
  {
    "text": "there can be some uh some logic in that service registry to do uh things like failover if",
    "start": "1581919",
    "end": "1587840"
  },
  {
    "start": "1590000",
    "end": "1699000"
  },
  {
    "text": "needed so let's talk about API management for a minute this is sort of a a grabag topic of different things",
    "start": "1590520",
    "end": "1597039"
  },
  {
    "text": "that you that you sort of ideally have uh inside each of your service APIs and",
    "start": "1597039",
    "end": "1602559"
  },
  {
    "text": "uh again as you move into a community of dozens or hundreds of microservices it becomes important to standardize on some",
    "start": "1602559",
    "end": "1608799"
  },
  {
    "text": "of these things if everybody's picking their own technologies uh things could get complicated very quickly and so",
    "start": "1608799",
    "end": "1614240"
  },
  {
    "text": "these are things to think about uh in terms of API management one of them is enforcing API consistency and making",
    "start": "1614240",
    "end": "1619760"
  },
  {
    "text": "sure that everybody's speaking the same sort of uh um uh patterns for their REST endpoints uh another one is uh to",
    "start": "1619760",
    "end": "1626799"
  },
  {
    "text": "monitor key metrics so there's three metrics that you want to make sure at a minimum all of your services have uh and",
    "start": "1626799",
    "end": "1633679"
  },
  {
    "text": "that's um the uh request rate the request per second the error rate uh and the service latency for each of the",
    "start": "1633679",
    "end": "1640240"
  },
  {
    "text": "method calls super important that everybody is able to collect those and publish them somewhere um ideally you're",
    "start": "1640240",
    "end": "1647520"
  },
  {
    "text": "going to have uh the ability to do read through caching we'll talk a little bit more about that later um but that's a very helpful thing to be able to do uh",
    "start": "1647520",
    "end": "1654400"
  },
  {
    "text": "to take some pressure off of the other services um authentication and authorization commonly needed especially",
    "start": "1654400",
    "end": "1660240"
  },
  {
    "text": "if you're operating in a regulated environment for example uh or if you're looking to bill for for the services",
    "start": "1660240",
    "end": "1665760"
  },
  {
    "text": "that are being called and finally the ability to throttle so that's a defensive mechanism uh if you're if you",
    "start": "1665760",
    "end": "1672080"
  },
  {
    "text": "have a misconfigured client that's hitting your service really hard uh or if you're just overwhelmed with performance and you need to uh take some",
    "start": "1672080",
    "end": "1678640"
  },
  {
    "text": "pressure off so that you can figure out what's going on uh throttling is a great uh ability so uh there are a few ways to",
    "start": "1678640",
    "end": "1686080"
  },
  {
    "text": "go about this you could certainly uh roll your own uh versions of each of these using software off the shelf or",
    "start": "1686080",
    "end": "1691440"
  },
  {
    "text": "build it yourself uh there are also some great software packages out there like Apogee WSO2 uh we have customers that",
    "start": "1691440",
    "end": "1697679"
  },
  {
    "text": "are uh running those as well um but uh uh we'd be remiss if we didn't mention that Amazon API gateway is a",
    "start": "1697679",
    "end": "1704080"
  },
  {
    "start": "1699000",
    "end": "1737000"
  },
  {
    "text": "purpose-built service that offers all of this stuff uh so if you're at the beginning of this journey and you're thinking about how am I going to handle",
    "start": "1704080",
    "end": "1710320"
  },
  {
    "text": "uh the API management we definitely recommend that you take a look at API gateway and see if it can uh suit your",
    "start": "1710320",
    "end": "1715520"
  },
  {
    "text": "needs um it enforces API consistency with Swagger it automatically publishes those key metrics that I mentioned and",
    "start": "1715520",
    "end": "1721520"
  },
  {
    "text": "some other ones uh to Cloudatch so you've got that covered uh you can click a button and have uh read through",
    "start": "1721520",
    "end": "1726760"
  },
  {
    "text": "caching and you can do ooth 2 and IM for authentication authorization and and",
    "start": "1726760",
    "end": "1732559"
  },
  {
    "text": "throttle and meter uh on a per method basis or on a on a per API basis um one other benefit with an API",
    "start": "1732559",
    "end": "1739760"
  },
  {
    "start": "1737000",
    "end": "1781000"
  },
  {
    "text": "gateway pattern that you can uh take advantage of uh if you start off uh by using uh an API gateway uh is Emerson",
    "start": "1739760",
    "end": "1747520"
  },
  {
    "text": "mentioned the strangler pattern so you can see here that uh the clients going forward are all talking to the API",
    "start": "1747520",
    "end": "1753840"
  },
  {
    "text": "gateway uh right that's the first change that you make uh and then behind the API gateway you have your monolith and",
    "start": "1753840",
    "end": "1759360"
  },
  {
    "text": "you're just routing all the traffic to that monolith um and by doing this uh you can start to pick off these microservices move them off uh to be",
    "start": "1759360",
    "end": "1766720"
  },
  {
    "text": "implemented by lambda functions or be lambda uh by implemented by elastic load balancer in EC2 or elastic beantock uh",
    "start": "1766720",
    "end": "1774720"
  },
  {
    "text": "and you can take your time and spit these off in the back end and the client never knows that anything's changing so very powerful uh method",
    "start": "1774720",
    "end": "1781799"
  },
  {
    "start": "1781000",
    "end": "1861000"
  },
  {
    "text": "there and finally on uh APIs uh just a list uh here of some kind of dos and",
    "start": "1781799",
    "end": "1787919"
  },
  {
    "text": "don'ts uh when it comes to versioning this is a question we get a lot right uh you're doing lots and lots of",
    "start": "1787919",
    "end": "1793200"
  },
  {
    "text": "deployments uh which Emerson's going to talk about in a minute here uh you know you're moving super fast uh I want to",
    "start": "1793200",
    "end": "1799279"
  },
  {
    "text": "change my API but I don't want to break break the other folks and so you want to embrace the ability to have lots of",
    "start": "1799279",
    "end": "1805840"
  },
  {
    "text": "velocity here and that means um not having major version changes unless you have to right so it's okay to add new",
    "start": "1805840",
    "end": "1813039"
  },
  {
    "text": "methods new services new parameters new types right that's not going to break anything uh it's okay to mark things as",
    "start": "1813039",
    "end": "1819520"
  },
  {
    "text": "deprecated and and politely ask your neighbors to stop using them um what you don't want to do is have a disruptive",
    "start": "1819520",
    "end": "1825760"
  },
  {
    "text": "change uh without some negotiation in first and keep in mind that every disruptive change every major API",
    "start": "1825760",
    "end": "1831440"
  },
  {
    "text": "version change is going to hit you're going to take a velocity hit everyone's going to have to stop what they're doing and upgrade so think really carefully",
    "start": "1831440",
    "end": "1837440"
  },
  {
    "text": "about those and try to minimize them um and on the other side here uh what you don't want to do is delete methods",
    "start": "1837440",
    "end": "1844159"
  },
  {
    "text": "delete required parameters or add them rename things that's going to break folks uh and uh it's it's certainly not",
    "start": "1844159",
    "end": "1850559"
  },
  {
    "text": "a nice thing to do uh to your neighbors uh so uh negotiate changes when you need to uh release a new major version of",
    "start": "1850559",
    "end": "1856720"
  },
  {
    "text": "your API try to keep it to a minimum so speaking of",
    "start": "1856720",
    "end": "1862760"
  },
  {
    "start": "1861000",
    "end": "1878000"
  },
  {
    "text": "deployment I'll hand it back to Emerson thanks thanks Derek sorry um all right",
    "start": "1862760",
    "end": "1870880"
  },
  {
    "text": "so let's talk about deployments for a bit um pushing things to production",
    "start": "1870880",
    "end": "1876080"
  },
  {
    "text": "hopefully without breaking it so that's how things are on the monolith when it",
    "start": "1876080",
    "end": "1881279"
  },
  {
    "start": "1878000",
    "end": "1894000"
  },
  {
    "text": "comes to deployments so really quick here um one deployment pipeline uh you can have different stages as part of",
    "start": "1881279",
    "end": "1887520"
  },
  {
    "text": "that pipeline and uh your releases with changes across different modules so a lot of you are probably familiar with",
    "start": "1887520",
    "end": "1894440"
  },
  {
    "start": "1894000",
    "end": "1932000"
  },
  {
    "text": "this now in microser world instead now you have to start thinking about having",
    "start": "1894440",
    "end": "1900960"
  },
  {
    "text": "separate deployment pipelines for each of your services those pipelines they can be different so one service can have",
    "start": "1900960",
    "end": "1907919"
  },
  {
    "text": "uh stages that on that pip on on its pipeline that another service doesn't have and that's fine the key idea is",
    "start": "1907919",
    "end": "1915440"
  },
  {
    "text": "still have independent pipelines for your services if you're on AWS you you",
    "start": "1915440",
    "end": "1921120"
  },
  {
    "text": "have quite a lot of options for that you can go with code deploy binto which uh we have used at guilt in the past or",
    "start": "1921120",
    "end": "1927519"
  },
  {
    "text": "code pipeline and you know you can mix it up with a number of other technologies as well",
    "start": "1927519",
    "end": "1933279"
  },
  {
    "start": "1932000",
    "end": "1974000"
  },
  {
    "text": "the uh the nice and important thing about doing these independent pipelines",
    "start": "1933279",
    "end": "1938399"
  },
  {
    "text": "is that you can now then just pace your deployment independently for each of your services right you can go as fast",
    "start": "1938399",
    "end": "1945200"
  },
  {
    "text": "as you want or you have to or as slow as as you want or have to but not only that",
    "start": "1945200",
    "end": "1951600"
  },
  {
    "text": "you can also now deal with a failing service independently for example you can push a fix to a failing service or",
    "start": "1951600",
    "end": "1959039"
  },
  {
    "text": "you can just roll back that service to a previous stable version independently of any other service so this gives quite a",
    "start": "1959039",
    "end": "1967440"
  },
  {
    "text": "lot of flexibility uh freedom you can move really really fast when you have this sort of setup right",
    "start": "1967440",
    "end": "1974200"
  },
  {
    "start": "1974000",
    "end": "1995000"
  },
  {
    "text": "but as good engineers that we are at the end of the day it's still our job to",
    "start": "1974200",
    "end": "1979519"
  },
  {
    "text": "make sure that things are stable in production so it's important to think about independent pipelines but it's",
    "start": "1979519",
    "end": "1985279"
  },
  {
    "text": "also important to think about phase rollout right how can I give my new releases enough traffic that will allow",
    "start": "1985279",
    "end": "1992240"
  },
  {
    "text": "me to evaluate the health of those releases one way we used to do that at guilt was with the idea of blue green",
    "start": "1992240",
    "end": "1999440"
  },
  {
    "start": "1995000",
    "end": "2037000"
  },
  {
    "text": "deployments on top of elastic beantock so we had our own tooling for this actually and the way it worked was let's",
    "start": "1999440",
    "end": "2006000"
  },
  {
    "text": "say I have a current version running in production say 001 um if I wanted to",
    "start": "2006000",
    "end": "2011840"
  },
  {
    "text": "release a new version this tool would go ahead and create a new bin stock environment for that release and then it",
    "start": "2011840",
    "end": "2017600"
  },
  {
    "text": "would slowly migrate traffic from instances of the old environment into",
    "start": "2017600",
    "end": "2022960"
  },
  {
    "text": "instances of the new environment and then would keep on doing that until all traffic had been migrated the old",
    "start": "2022960",
    "end": "2030000"
  },
  {
    "text": "environment would stay there for a while for about an hour just in case you needed to do a roll back but eventually",
    "start": "2030000",
    "end": "2035919"
  },
  {
    "text": "it would be killed today we are doing this phase rollout we're relying mostly",
    "start": "2035919",
    "end": "2042080"
  },
  {
    "start": "2037000",
    "end": "2124000"
  },
  {
    "text": "on code deploy for that our code deploy setup is we have one code deploy application for each of our services and",
    "start": "2042080",
    "end": "2050320"
  },
  {
    "text": "that code deploy application is broken down into three deployment groups we have a development a canary and a",
    "start": "2050320",
    "end": "2056800"
  },
  {
    "text": "production deployment group pay attention here that the canary and the production deployment groups are under",
    "start": "2056800",
    "end": "2063040"
  },
  {
    "text": "the same ELB but our development instance is not so it's got its own load",
    "start": "2063040",
    "end": "2069398"
  },
  {
    "text": "balancer also our development instance is pretty much like a production instance so it's talking directly to",
    "start": "2069399",
    "end": "2075679"
  },
  {
    "text": "production services that and the fact that it's got its own load balancer actually allows us to do some pretty",
    "start": "2075679",
    "end": "2082240"
  },
  {
    "text": "interesting things with regards to not only phase rollouts but also testing things directly in production for",
    "start": "2082240",
    "end": "2089878"
  },
  {
    "text": "example let's say you're back you're an engineer you're working on a backend service right what you can do is you can",
    "start": "2089879",
    "end": "2096800"
  },
  {
    "text": "push your changes directly to a de the development instance of that service",
    "start": "2096800",
    "end": "2102079"
  },
  {
    "text": "manually test your changes directly against production and once you're happy with that you can promote that deploy to",
    "start": "2102079",
    "end": "2108640"
  },
  {
    "text": "a canary deploy you're then going to have some traffic some production traffic received on your deploy and then",
    "start": "2108640",
    "end": "2114800"
  },
  {
    "text": "once you're happy enough you can promote that to a canary deploy again you can do all of that by deploying to the",
    "start": "2114800",
    "end": "2120880"
  },
  {
    "text": "development instance without affecting production traffic we can do something similar with our",
    "start": "2120880",
    "end": "2126320"
  },
  {
    "start": "2124000",
    "end": "2158000"
  },
  {
    "text": "front-end apps as well we have mechanisms where we can say listen I want this request to be served by the",
    "start": "2126320",
    "end": "2132800"
  },
  {
    "text": "development instance of this front-end app and with something like this we can test entire features from the front end",
    "start": "2132800",
    "end": "2140079"
  },
  {
    "text": "all the way to all the backend services involved directly in production without",
    "start": "2140079",
    "end": "2145280"
  },
  {
    "text": "affecting production traffic and without uh exposing those features to our users",
    "start": "2145280",
    "end": "2151920"
  },
  {
    "text": "so let's switch gears here a little bit let's talk about you know looking after your services in",
    "start": "2151920",
    "end": "2158280"
  },
  {
    "start": "2158000",
    "end": "2223000"
  },
  {
    "text": "production let's start with monitoring so monitoring obviously really important",
    "start": "2158280",
    "end": "2164160"
  },
  {
    "text": "in microservices it's what will allow you to judge whether your services are healthy or not in production when you",
    "start": "2164160",
    "end": "2170720"
  },
  {
    "text": "have hundreds or even thousands of services running in production this is crucial it just you just can't live",
    "start": "2170720",
    "end": "2176400"
  },
  {
    "text": "without it and monitoring really is about pushing relevant metrics and",
    "start": "2176400",
    "end": "2181680"
  },
  {
    "text": "making those metrics available for people to look at and see whether your service is doing well or not when it",
    "start": "2181680",
    "end": "2188640"
  },
  {
    "text": "comes to metrics you can think of metrics for example at the instance level so the memory usage on your",
    "start": "2188640",
    "end": "2195119"
  },
  {
    "text": "instances the garbage collection cycles thread count CPU usage and etc you can",
    "start": "2195119",
    "end": "2201359"
  },
  {
    "text": "also think about service level metrics so the throughput on your service the the latency your 95th 90 99th percentile",
    "start": "2201359",
    "end": "2209200"
  },
  {
    "text": "as well the error rate also related to that think about the response times for",
    "start": "2209200",
    "end": "2214560"
  },
  {
    "text": "each of your endpoints also establish reasonable response times for those endpoints as well and make sure you",
    "start": "2214560",
    "end": "2219680"
  },
  {
    "text": "alert when those response times are not being met so this is an example of some of the",
    "start": "2219680",
    "end": "2226160"
  },
  {
    "start": "2223000",
    "end": "2260000"
  },
  {
    "text": "monitoring we have at Guilt and I'm just going to go really quickly through this at the top this is with New Relic by the",
    "start": "2226160",
    "end": "2232480"
  },
  {
    "text": "We use New Relic a lot for this at the top we have the dashboard for one of our services and what what you're seeing in",
    "start": "2232480",
    "end": "2238480"
  },
  {
    "text": "there is we're getting response time for for that service response time for each transaction error rate throughput but",
    "start": "2238480",
    "end": "2245839"
  },
  {
    "text": "the nice thing about this is we can get that not just for the service as a whole but we can get that per instance as well",
    "start": "2245839",
    "end": "2253280"
  },
  {
    "text": "so we can evaluate for example whether a Canary release is doing well or not with something like",
    "start": "2253280",
    "end": "2259480"
  },
  {
    "text": "this we also use Cloudatch for some of our metrics and monitoring as well and",
    "start": "2259480",
    "end": "2265760"
  },
  {
    "text": "the first graph here what I have is this is the remote calls that one of our mobile endpoints is doing and it's",
    "start": "2265760",
    "end": "2271680"
  },
  {
    "text": "keeping track of the time that it takes for each of those remote calls with with something like this you can actually go",
    "start": "2271680",
    "end": "2278160"
  },
  {
    "text": "back at this graph and see if the there's any of those remote calls could",
    "start": "2278160",
    "end": "2283599"
  },
  {
    "text": "be potentially slowing down your service your endpoint which is pretty important when you're doing a lot of remote calls",
    "start": "2283599",
    "end": "2290320"
  },
  {
    "text": "at the bottom there what I have is you can think about business related metrics as well so it's not just technical",
    "start": "2290320",
    "end": "2296480"
  },
  {
    "text": "metrics at the bottom graph I have we keep track of the number of submitted orders for a given time window and uh we",
    "start": "2296480",
    "end": "2303920"
  },
  {
    "text": "can actually alert at guilt when that number is below a reasonable",
    "start": "2303920",
    "end": "2309640"
  },
  {
    "start": "2309000",
    "end": "2351000"
  },
  {
    "text": "value so let's talk about logging now logging along with your metrics and",
    "start": "2309640",
    "end": "2316320"
  },
  {
    "text": "monitoring it's what will allow you to go back to production issues and hopefully debug and find the root cause",
    "start": "2316320",
    "end": "2322240"
  },
  {
    "text": "for those the first thing I would say when it comes to logging is just push your logs outside of your instances",
    "start": "2322240",
    "end": "2327680"
  },
  {
    "text": "right um this means that you know it's easier for for everyone to just look at those logs if they have to it also means",
    "start": "2327680",
    "end": "2334320"
  },
  {
    "text": "that if there's any chance that you're going to lose your logs by your instances going down you eliminate that",
    "start": "2334320",
    "end": "2339920"
  },
  {
    "text": "possibility so you eliminate the possibility of losing crucial information for debugging production issues and in AWS you have a few options",
    "start": "2339920",
    "end": "2346960"
  },
  {
    "text": "for this you can go with S3 Elastic Search Cloudatch as well also have visibility on the whole",
    "start": "2346960",
    "end": "2354000"
  },
  {
    "start": "2351000",
    "end": "2381000"
  },
  {
    "text": "life cycle for example from deployment all the way through your instance startup make sure you know what software",
    "start": "2354000",
    "end": "2359920"
  },
  {
    "text": "is being installed in there your service logs as well and maybe even reasons why your instances are being terminated when",
    "start": "2359920",
    "end": "2366480"
  },
  {
    "text": "things fail in production and they can they can fail at any of those stages it's really important for you to know exactly at which step at any of any of",
    "start": "2366480",
    "end": "2374720"
  },
  {
    "text": "those stages things are failing so you can bring things back you know to to to life again quickly",
    "start": "2374720",
    "end": "2381800"
  },
  {
    "text": "also separate your logs by service and by instance and it's probably better if",
    "start": "2381800",
    "end": "2387040"
  },
  {
    "text": "I illustrate this my next slide so that's the that's the setup we have at",
    "start": "2387040",
    "end": "2392160"
  },
  {
    "text": "guilt the basic setup we have at guilt for pushing logs in AWS so we keep one",
    "start": "2392160",
    "end": "2397440"
  },
  {
    "text": "cloudatch log group for each of our services and then we have one log stream for each of our instances what this",
    "start": "2397440",
    "end": "2404960"
  },
  {
    "text": "means is a lot of times you know which instance is erroring out right so you can just go to the specific log stream",
    "start": "2404960",
    "end": "2412000"
  },
  {
    "text": "of that specific instance and search through those log without having to search through a lot of logs that you",
    "start": "2412000",
    "end": "2417200"
  },
  {
    "text": "don't you really don't have to this setup may not be enough a lot of the times right you may find yourself",
    "start": "2417200",
    "end": "2424320"
  },
  {
    "text": "having the need to gather information not just from different instances from",
    "start": "2424320",
    "end": "2429920"
  },
  {
    "text": "the same service but also different instances from different services so when you have that need you you where",
    "start": "2429920",
    "end": "2436640"
  },
  {
    "text": "you're going to have to have some sort of aggregation layer a place where all of that logging information is just",
    "start": "2436640",
    "end": "2441920"
  },
  {
    "text": "centralized and uh and available for to be searched one way we do that at guilt",
    "start": "2441920",
    "end": "2447920"
  },
  {
    "text": "is we rely on that previous setup I've just talked about and what we can say is",
    "start": "2447920",
    "end": "2453760"
  },
  {
    "text": "we can say I want to aggregate the logs for all of those services so we set up cloudatch events for each log stream of",
    "start": "2453760",
    "end": "2461200"
  },
  {
    "text": "each cloudatch log group of each service that we want to aggregate the logs and",
    "start": "2461200",
    "end": "2466319"
  },
  {
    "text": "whenever we push a log message to any of those streams uh the cloudatch event",
    "start": "2466319",
    "end": "2471359"
  },
  {
    "text": "will kick off a lambda the lambda will have the the log message and then we'll index that log message on a AWS hosted",
    "start": "2471359",
    "end": "2479599"
  },
  {
    "text": "elastic search cluster once that information is in there it's very straightforward with Kibana we can",
    "start": "2479599",
    "end": "2485680"
  },
  {
    "text": "easily search through all of those aggregated logs i do have to say though that information in there will pile up",
    "start": "2485680",
    "end": "2492400"
  },
  {
    "text": "quite quickly in fact it does pile up quite quickly so we have a separate lambda on a schedule which runs on a",
    "start": "2492400",
    "end": "2498960"
  },
  {
    "text": "daily basis and the job of that lambda is to essentially clean up all data and I believe we keep three to four days",
    "start": "2498960",
    "end": "2505680"
  },
  {
    "text": "worth of logs with that I'd like to hand it over again to Derek all right",
    "start": "2505680",
    "end": "2511680"
  },
  {
    "start": "2507000",
    "end": "2559000"
  },
  {
    "text": "thank you so for this uh last section here um we wanted to talk about what we're going",
    "start": "2511680",
    "end": "2518079"
  },
  {
    "text": "to call good citizenship uh and we think this is a very important concept in a microservices world uh in a monolithic",
    "start": "2518079",
    "end": "2525520"
  },
  {
    "text": "application you have one big uh piece of machinery everyone has to move in lock step right deployment either goes out or",
    "start": "2525520",
    "end": "2532000"
  },
  {
    "text": "it doesn't uh and so you can have more of a top- down approach about some decisions but as soon as you start",
    "start": "2532000",
    "end": "2537839"
  },
  {
    "text": "moving into a place where you have dozens or hundreds or maybe even thousand microservices uh all of a",
    "start": "2537839",
    "end": "2543599"
  },
  {
    "text": "sudden you have a community uh of service owners and service teams all doing different stuff deploying into",
    "start": "2543599",
    "end": "2549119"
  },
  {
    "text": "production uh and that means that uh once you're in a community like that it's important to be a good citizen uh",
    "start": "2549119",
    "end": "2554800"
  },
  {
    "text": "and so we're going to talk about some things uh that make uh good citizenship and if you're a service team",
    "start": "2554800",
    "end": "2561839"
  },
  {
    "start": "2559000",
    "end": "2702000"
  },
  {
    "text": "if you're a service owner uh you're going to be wearing two hats pretty much all the time right you're going to be wearing the uh service consumer hat",
    "start": "2561839",
    "end": "2568079"
  },
  {
    "text": "right you're you're calling into my consu my service and you're also going to be a service provider uh and so when",
    "start": "2568079",
    "end": "2574400"
  },
  {
    "text": "you put on these different hats um we think it's important to have tenants uh or sort of key principles that everybody",
    "start": "2574400",
    "end": "2579920"
  },
  {
    "text": "agrees on and these are things that the service teams can get together they can agree to you can write them down you can",
    "start": "2579920",
    "end": "2585359"
  },
  {
    "text": "put them up on a wall uh but when somebody builds a new service you can point to that and say you know it's important that you think about these",
    "start": "2585359",
    "end": "2590640"
  },
  {
    "text": "things these are sort of the rules of the house so one uh if you're thinking about being a cons a consumer of a",
    "start": "2590640",
    "end": "2596079"
  },
  {
    "text": "service uh one principle this is Vern Vogel's uh famous saying everything fails all the",
    "start": "2596079",
    "end": "2601359"
  },
  {
    "text": "time that's absolutely uh the mindset that you want to have when you're when you're a service consumer uh if you're",
    "start": "2601359",
    "end": "2606800"
  },
  {
    "text": "planning to call my service you should assume that uh it may go become unavailable for some number of minutes",
    "start": "2606800",
    "end": "2612160"
  },
  {
    "text": "uh it may start to operate slowly there may be a spike in the error rate and as you're making that service call you",
    "start": "2612160",
    "end": "2618319"
  },
  {
    "text": "should be thinking about what you're going to do in the event of any of those things happening Uh another thing that may happen is you",
    "start": "2618319",
    "end": "2624240"
  },
  {
    "text": "may be throttled uh again if my service is having performance issues I may choose to apply a throttle so I can take",
    "start": "2624240",
    "end": "2630400"
  },
  {
    "text": "some pressure off of it figure out what's wrong fix the performance issue and then lift that throttle again and",
    "start": "2630400",
    "end": "2636640"
  },
  {
    "text": "typically to a caller that means you're getting these HTTP 429s back right slow down uh back off so when you get those",
    "start": "2636640",
    "end": "2644079"
  },
  {
    "text": "messages if you have a retriable uh failure message coming back uh you want to always make sure that you're using",
    "start": "2644079",
    "end": "2650400"
  },
  {
    "text": "exponential back off uh that simply means uh every time you have a failure uh you have some retry period you double",
    "start": "2650400",
    "end": "2657359"
  },
  {
    "text": "it every time that you retry um this is super important because uh the moment that you're having a lot of failures",
    "start": "2657359",
    "end": "2663359"
  },
  {
    "text": "with a service you don't want to be hammering that service as fast as you can with error messages uh that's not going to be helping the situation",
    "start": "2663359",
    "end": "2670640"
  },
  {
    "text": "uh graceful degradation of course really important we'll talk a little more about that uh but think about how you can uh",
    "start": "2670640",
    "end": "2675760"
  },
  {
    "text": "operate in a degraded mode if one of your services that you depend on is is having trouble uh and finally caching",
    "start": "2675760",
    "end": "2682240"
  },
  {
    "text": "and we'll talk a little more about caching here in a second but uh caching is a great way that you can take pressure off of the other services that",
    "start": "2682240",
    "end": "2688720"
  },
  {
    "text": "you're depending on uh so for example if you're looking up uh the the first name and last name for an account uh that's",
    "start": "2688720",
    "end": "2694880"
  },
  {
    "text": "probably something that's not going to change very often uh that may be something you're willing to cash and say uh you know we'll have a time to live of",
    "start": "2694880",
    "end": "2701280"
  },
  {
    "text": "five or 10 minutes so if you put on your service provider hat uh there's some other",
    "start": "2701280",
    "end": "2706640"
  },
  {
    "start": "2702000",
    "end": "2788000"
  },
  {
    "text": "tenants that we think you should think about uh agreeing to uh we think this is a good starting point and you can talk",
    "start": "2706640",
    "end": "2711760"
  },
  {
    "text": "to the other teams about this um one of them is everybody should agree on what are the standard metrics that we all",
    "start": "2711760",
    "end": "2717520"
  },
  {
    "text": "publish to each other um if I'm having a production issue I'd like to be able to go to a common place and see everybody's",
    "start": "2717520",
    "end": "2723359"
  },
  {
    "text": "service status in one place could be Cloudatch it could be New Relic you should pick one and everybody should agree to that uh again publishing logs",
    "start": "2723359",
    "end": "2730800"
  },
  {
    "text": "for a aggregation should be an expectation that everybody should be doing that using a common service uh",
    "start": "2730800",
    "end": "2736640"
  },
  {
    "text": "everyone should be prepared to throttle so uh do yourself a favor start off as",
    "start": "2736640",
    "end": "2742160"
  },
  {
    "text": "you're building out the the skeleton and the frameworks for your microservices have the ability to do throttling",
    "start": "2742160",
    "end": "2747839"
  },
  {
    "text": "builtin you get that for free with API gateway uh you could build it in yourself make sure that you can do that",
    "start": "2747839",
    "end": "2753359"
  },
  {
    "text": "so you can be defensive uh in case you have a misconfigured client that's hammering your service for example uh",
    "start": "2753359",
    "end": "2759839"
  },
  {
    "text": "another tenant for a service provider is uh my service implementation uh details uh are belong to me as soon as you start",
    "start": "2759839",
    "end": "2766960"
  },
  {
    "text": "sharing details about how you've implemented your service people are going to start depending on those and now you're tightly coupled again and",
    "start": "2766960",
    "end": "2772720"
  },
  {
    "text": "you're going to break people when you make changes uh so if folks are starting to say they want to depend on your implementation details don't let that",
    "start": "2772720",
    "end": "2778880"
  },
  {
    "text": "happen finally as we talked about uh maintain backwards compatibility with your APIs be nice to people and force",
    "start": "2778880",
    "end": "2785280"
  },
  {
    "text": "them to accept those changes so another uh key uh aspect of",
    "start": "2785280",
    "end": "2792319"
  },
  {
    "start": "2788000",
    "end": "2885000"
  },
  {
    "text": "being a good citizen in this uh community is to standardize on logging um this may sound simple but again uh",
    "start": "2792319",
    "end": "2798720"
  },
  {
    "text": "once you have 20 50 100 500 services you're going to want to have your logging in order uh up front and so uh",
    "start": "2798720",
    "end": "2806640"
  },
  {
    "text": "do things like standardize on the time format uh ISO8601 is your friend uh",
    "start": "2806640",
    "end": "2811920"
  },
  {
    "text": "standardize on UTC uh uh zero or Zulu time uh again you don't want to have to",
    "start": "2811920",
    "end": "2818160"
  },
  {
    "text": "go and ask 50 service teams to change this once you've gone down the path uh and you may be deploying only in one uh",
    "start": "2818160",
    "end": "2824160"
  },
  {
    "text": "one region today uh but AWS has a lot of regions around the world tomorrow you might be in three different places uh so",
    "start": "2824160",
    "end": "2830800"
  },
  {
    "text": "uh standardizing on time zones is important uh and finally you'll see uh in orange here uh we have the um these",
    "start": "2830800",
    "end": "2836880"
  },
  {
    "text": "UU ids and so those are correlation ids uh and in this big distributed uh system of uh microservices correlation ids are",
    "start": "2836880",
    "end": "2844800"
  },
  {
    "text": "super helpful um and that simply means that when a request first comes into the system into the first service uh that",
    "start": "2844800",
    "end": "2851520"
  },
  {
    "text": "you uh pick a correlation ID could be an order number it could be a unique ID that you generate",
    "start": "2851520",
    "end": "2858000"
  },
  {
    "text": "uh but pick one right into the log file and then pass that correlation ID down the chain to all of the other services",
    "start": "2858000",
    "end": "2864480"
  },
  {
    "text": "that you call everybody agrees that they're going to do the same and they're going to log that correlation ID that",
    "start": "2864480",
    "end": "2869520"
  },
  {
    "text": "makes things super easy when you have some kind of trouble that you're try a problem you're trying to troubleshoot in",
    "start": "2869520",
    "end": "2874560"
  },
  {
    "text": "production you can just uh plug that correlation ID into your uh log aggregation service of choice you'll be",
    "start": "2874560",
    "end": "2880640"
  },
  {
    "text": "able to see all of the log entries that relate to",
    "start": "2880640",
    "end": "2884799"
  },
  {
    "start": "2885000",
    "end": "2914000"
  },
  {
    "text": "that uh another key thing to do is to paralyze anywhere you can uh you we",
    "start": "2885720",
    "end": "2890800"
  },
  {
    "text": "talked to guilt uh for example in their shopping carts or in their checkout service uh they realize that they're making between 15 and 20 service calls",
    "start": "2890800",
    "end": "2897760"
  },
  {
    "text": "uh in order to check somebody out uh and they realize that 30% of those service calls could be done in parallel uh and",
    "start": "2897760",
    "end": "2903920"
  },
  {
    "text": "so if you think about that a little bit up front you can actually squeeze a lot of latency out of the overall system uh",
    "start": "2903920",
    "end": "2909760"
  },
  {
    "text": "so think about how you can parallelize your requests uh and you'll be doing your caller a favor uh a lot of uh languages make this",
    "start": "2909760",
    "end": "2917760"
  },
  {
    "start": "2914000",
    "end": "2923000"
  },
  {
    "text": "really easy this is Scala for example uh and so you can think about u using models that are built",
    "start": "2917760",
    "end": "2924680"
  },
  {
    "text": "in um when you're making parallel calls you're at the mercy of the slowest",
    "start": "2924680",
    "end": "2931520"
  },
  {
    "text": "response right so if you've got 10 responses you're waiting on it's that slowest last one that's gating you on",
    "start": "2931520",
    "end": "2937440"
  },
  {
    "text": "returning to your caller uh and so again uh something we've talked to guilt about is uh if you have a slow responder you",
    "start": "2937440",
    "end": "2946079"
  },
  {
    "text": "should think about does it make sense to keep waiting for that slow responder or does it make sense to return a partial",
    "start": "2946079",
    "end": "2951440"
  },
  {
    "text": "result and so you can categorize these service calls into services service calls that you must have in order to",
    "start": "2951440",
    "end": "2958400"
  },
  {
    "text": "complete the request or service calls that you can actually get by without and if you do that exercise uh if you have a",
    "start": "2958400",
    "end": "2965520"
  },
  {
    "text": "slow responder you can actually decide uh that you're going to return a partial result back to the caller um rather than",
    "start": "2965520",
    "end": "2971280"
  },
  {
    "text": "just giving them a hard error message uh so this is something to think about uh in every service is uh is how you can",
    "start": "2971280",
    "end": "2976960"
  },
  {
    "text": "deal with that that slow response and then uh a little bit more",
    "start": "2976960",
    "end": "2982800"
  },
  {
    "start": "2979000",
    "end": "3034000"
  },
  {
    "text": "about caching so there are a few patterns that you can do here again caching very helpful uh in order to take",
    "start": "2982800",
    "end": "2988640"
  },
  {
    "text": "pressure off of other services uh not make them scale as much so you can save some money uh so you should cache where",
    "start": "2988640",
    "end": "2995280"
  },
  {
    "text": "you can um it may be tempting to do local caching it's certainly the easiest",
    "start": "2995280",
    "end": "3000319"
  },
  {
    "text": "option uh you can have a local cache in the local memory inside your VM or inside your process um there are a few",
    "start": "3000319",
    "end": "3006880"
  },
  {
    "text": "challenges by with doing that though uh the first is if you're running in a VM",
    "start": "3006880",
    "end": "3012240"
  },
  {
    "text": "uh or JVM uh you're going to be causing more pressure on the uh garbage collector uh and that can cause some",
    "start": "3012240",
    "end": "3018319"
  },
  {
    "text": "performance issues it also means that you may need to scale your instance as your cache grows you might say up it's",
    "start": "3018319",
    "end": "3023599"
  },
  {
    "text": "time to change instance sizes now you're spending more money uh so you may be going down that path um and finally it may be a slower",
    "start": "3023599",
    "end": "3030960"
  },
  {
    "text": "startup time if you have now have to do cache warming so a much better approach is to do a look aside cache uh stand up",
    "start": "3030960",
    "end": "3038720"
  },
  {
    "start": "3034000",
    "end": "3057000"
  },
  {
    "text": "an external cache um so elastic makes this very simple uh you can have",
    "start": "3038720",
    "end": "3044240"
  },
  {
    "text": "memcachd or you can have reddus sitting to the side of your service and all of the instances can just go there uh",
    "start": "3044240",
    "end": "3050160"
  },
  {
    "text": "they're aware of that cache location uh they can look for a cache data they can expire it out for example so that's a",
    "start": "3050160",
    "end": "3056160"
  },
  {
    "text": "good model we like that but probably the best uh again is to use a read through cache if you can",
    "start": "3056160",
    "end": "3062559"
  },
  {
    "start": "3057000",
    "end": "3081000"
  },
  {
    "text": "uh the nice thing about this is uh compared to a look aside the caller doesn't need to know about it all",
    "start": "3062559",
    "end": "3067599"
  },
  {
    "text": "they've got to do is make their service call uh and then it's just a configuration option inside your uh your API gateway to be able to say uh this",
    "start": "3067599",
    "end": "3074800"
  },
  {
    "text": "method is cachable for this amount of time uh and it takes care of the",
    "start": "3074800",
    "end": "3080400"
  },
  {
    "start": "3081000",
    "end": "3126000"
  },
  {
    "text": "rest so just to summarize here uh we've talked about sort of the organization and ownership um you know microservices",
    "start": "3082599",
    "end": "3089520"
  },
  {
    "text": "is everything every bit about as much about culture uh change and organization change it is about technology um so",
    "start": "3089520",
    "end": "3096160"
  },
  {
    "text": "again we we recommend that you uh get started by thinking about how you're going to orient your teams around um",
    "start": "3096160",
    "end": "3102640"
  },
  {
    "text": "around business processes uh how you're going to uh populate those teams um then",
    "start": "3102640",
    "end": "3108079"
  },
  {
    "text": "you can think about how you're going to make this architectural change you can make your um your technical decisions",
    "start": "3108079",
    "end": "3113680"
  },
  {
    "text": "and then finally we talked about good citizenship and we really do think that's important so really think about",
    "start": "3113680",
    "end": "3118880"
  },
  {
    "text": "having this conversation between the service teams uh agreeing on what it means to be a good citizen and write",
    "start": "3118880",
    "end": "3124240"
  },
  {
    "text": "those tenants down somewhere so with that I'd like to say thank you uh for attending uh hope this",
    "start": "3124240",
    "end": "3130960"
  },
  {
    "start": "3126000",
    "end": "3137000"
  },
  {
    "text": "was helpful and uh we hope you enjoy uh the rest of the conference thank you",
    "start": "3130960",
    "end": "3137319"
  }
]