[
  {
    "start": "0",
    "end": "163000"
  },
  {
    "text": "my name is Ben Thurgood I'm a Solutions Architect from Sydney Australia and this",
    "start": "350",
    "end": "6359"
  },
  {
    "text": "is scaling up to your first 10 million users does anybody recognize this game",
    "start": "6359",
    "end": "14990"
  },
  {
    "text": "yeah Australian rules football so let's talk",
    "start": "14990",
    "end": "21060"
  },
  {
    "text": "about your goals for the goals for this session who has a web application that",
    "start": "21060",
    "end": "27210"
  },
  {
    "text": "they're building or operating today lots of hands and who has thousands of users",
    "start": "27210",
    "end": "37550"
  },
  {
    "text": "yeah Chloe what about tens of thousands",
    "start": "37550",
    "end": "42590"
  },
  {
    "text": "that's still quite a lot hundreds of thousands cool",
    "start": "42590",
    "end": "49160"
  },
  {
    "text": "millions Wow tens of millions ok make",
    "start": "49160",
    "end": "57870"
  },
  {
    "text": "sure you take note of those hands they've probably got some good tips for you today I might speak to them myself",
    "start": "57870",
    "end": "62910"
  },
  {
    "text": "afterwards today we're going to go over the capabilities of the AWS platform",
    "start": "62910",
    "end": "69420"
  },
  {
    "text": "it's going to enable you to scale no matter where you are on that spectrum",
    "start": "69420",
    "end": "74689"
  },
  {
    "text": "it's a 200 level presentation and it's quite broad we're gonna cover a lot of",
    "start": "74689",
    "end": "80700"
  },
  {
    "text": "material so scaling on AWS we've done a",
    "start": "80700",
    "end": "90090"
  },
  {
    "text": "great job on your application so far unfortunately that means you're gonna",
    "start": "90090",
    "end": "95520"
  },
  {
    "text": "have to scale that's great scaling is a high value problem to have now you may",
    "start": "95520",
    "end": "102810"
  },
  {
    "text": "find you have to deal with sudden increases in scale like one of my customers whose request volumes doubles",
    "start": "102810",
    "end": "109530"
  },
  {
    "text": "every year in September and that's become a new norm every year for four years great problem half really or you",
    "start": "109530",
    "end": "117329"
  },
  {
    "text": "may be experiencing steady state growth constant growth either way what I go",
    "start": "117329",
    "end": "123509"
  },
  {
    "text": "through today is going to help you to deal with that now if you want to know about something if you like me one of",
    "start": "123509",
    "end": "129720"
  },
  {
    "text": "the first thing you do look it up scaling on AWS you're gonna get a lot of",
    "start": "129720",
    "end": "136400"
  },
  {
    "text": "hits and a lot of references to auto scaling now that sounds great doesn't it",
    "start": "136400",
    "end": "143210"
  },
  {
    "text": "turn that on water scaling pretty much done unfortunately it's not the one",
    "start": "143210",
    "end": "150260"
  },
  {
    "text": "thing that fixes everything and there's a lot of other things we need to go through today in order to scale successfully we'll get to that though so",
    "start": "150260",
    "end": "157910"
  },
  {
    "text": "what do we need to do first let's cover some basics one of the first things",
    "start": "157910",
    "end": "163520"
  },
  {
    "start": "163000",
    "end": "163000"
  },
  {
    "text": "you'll use to help you scale is the AWS global infrastructure we have 16 regions",
    "start": "163520",
    "end": "170420"
  },
  {
    "text": "around the world and more to come and in each region we have multiple availability zones each isolated from",
    "start": "170420",
    "end": "178190"
  },
  {
    "text": "one another in terms of power internet geographical risks yet close enough",
    "start": "178190",
    "end": "184070"
  },
  {
    "text": "together to enable single-digit millisecond latency and what that's",
    "start": "184070",
    "end": "189110"
  },
  {
    "text": "going to enable you to do is things like synchronous data replication which you'll see will come in handy also have",
    "start": "189110",
    "end": "196209"
  },
  {
    "text": "over 100 edge locations where you can case your content close to where your users are offloading load from your",
    "start": "196209",
    "end": "204260"
  },
  {
    "text": "service it's going to help you scale as well now AWS is one of the most robust fully",
    "start": "204260",
    "end": "211700"
  },
  {
    "text": "featured technology platforms available and there's many applications and",
    "start": "211700",
    "end": "217070"
  },
  {
    "text": "services available in so many categories to help you do what you need to do now it's not to say you need to use all of",
    "start": "217070",
    "end": "222440"
  },
  {
    "text": "this in day one more say that these facilities are available to you as you",
    "start": "222440",
    "end": "227780"
  },
  {
    "text": "go on this journey and when you find you need a feature or a capability look into",
    "start": "227780",
    "end": "233420"
  },
  {
    "text": "what the Atos platform has to offer and take advantage of that so you don't have to reinvent the wheel",
    "start": "233420",
    "end": "238959"
  },
  {
    "text": "now AWS services come in two flavors those that are managed by AWS on your",
    "start": "238959",
    "end": "245930"
  },
  {
    "text": "behalf and those are inherently highly scalable highly available and fault",
    "start": "245930",
    "end": "252410"
  },
  {
    "text": "tolerant straight out of the box you just use them and they'll do that for you things like cloud front s3 lambda which",
    "start": "252410",
    "end": "259730"
  },
  {
    "text": "we'll cover today and then there are other services that can be highly available highly scalable",
    "start": "259730",
    "end": "267230"
  },
  {
    "text": "and fault tolerant depending on the architecture that you use if you architect them right you can absolutely",
    "start": "267230",
    "end": "272600"
  },
  {
    "text": "do that things like ec2 and a relational database service so some considerations",
    "start": "272600",
    "end": "280520"
  },
  {
    "text": "before we begin scaling on AWS is an evolving story we've given this",
    "start": "280520",
    "end": "286940"
  },
  {
    "text": "talk at reinvent every year and the reason for that is the concepts we go",
    "start": "286940",
    "end": "292130"
  },
  {
    "text": "over are fundamental to the value proposition of the cloud now I'm gonna",
    "start": "292130",
    "end": "299330"
  },
  {
    "text": "talk about a linear journey starting from the beginning of an application all the way up to 10 million users depending",
    "start": "299330",
    "end": "306350"
  },
  {
    "text": "on where you are today on the journey you may decide to skip several of the stages that I talked through",
    "start": "306350",
    "end": "311360"
  },
  {
    "text": "or you may decide as well that you want to go over the top and go to a more sophisticated architecture much earlier",
    "start": "311360",
    "end": "318110"
  },
  {
    "text": "on and these are trade-offs that you'll need to consider you could spend more time Engineering at the beginning that's",
    "start": "318110",
    "end": "324560"
  },
  {
    "text": "going to take away from the time you're gonna spend building functionality into your application for your end users so these kind of trade-offs are what you",
    "start": "324560",
    "end": "331070"
  },
  {
    "text": "need to decide as a team whatever you decide most of these decisions will be",
    "start": "331070",
    "end": "337880"
  },
  {
    "text": "two-way doors they'll be reversible and a lot of what I talk about today will be refactoring",
    "start": "337880",
    "end": "343280"
  },
  {
    "text": "your application in order to improve it as we go so the most important thing is",
    "start": "343280",
    "end": "348680"
  },
  {
    "text": "that you just get building and learn from experience of helping your customers use your application so let's",
    "start": "348680",
    "end": "357890"
  },
  {
    "text": "start from day one in the beginning it's you developer of your application what",
    "start": "357890",
    "end": "366050"
  },
  {
    "text": "do you need to get going well you don't need an ec2 instance something to build",
    "start": "366050",
    "end": "372230"
  },
  {
    "text": "your application run it on IP address domain name route 53 now one of the",
    "start": "372230",
    "end": "378740"
  },
  {
    "text": "easiest ways to get going with that is Amazon Lite sale this is a super",
    "start": "378740",
    "end": "383780"
  },
  {
    "text": "convenient and cost-effective way to get started on our AWS because it gives you access to those types of features",
    "start": "383780",
    "end": "390080"
  },
  {
    "text": "without you having to know all the ins and outs of the airburst platform and it's really easy to burst out from there",
    "start": "390080",
    "end": "397130"
  },
  {
    "text": "and you more fully featured aspects of the a diverse platform as you go and you become more comfortable now whether you",
    "start": "397130",
    "end": "404240"
  },
  {
    "text": "use white sale or ec2 directly one of the first levers you're going to pull from a scalability perspective is the",
    "start": "404240",
    "end": "411560"
  },
  {
    "text": "type of ec2 instance that you use we have many different types of instances in terms of some being more memory",
    "start": "411560",
    "end": "419810"
  },
  {
    "text": "intensive CPU intensive IO intensive we have GPU instances so depending on the",
    "start": "419810",
    "end": "425780"
  },
  {
    "text": "characteristics of your application the type of instance you use and then also the configuration options that you",
    "start": "425780",
    "end": "431840"
  },
  {
    "text": "choose on an instance will affect its performance and you can change that as you go and the other thing is you can",
    "start": "431840",
    "end": "439099"
  },
  {
    "text": "change the size of the instance you use adding a bigger machine to scale up and",
    "start": "439099",
    "end": "444229"
  },
  {
    "text": "and support more volumes of transactions and you can do this anytime just by",
    "start": "444229",
    "end": "449539"
  },
  {
    "text": "stopping your instance changing that configuration parameter and then bringing it bring it up again now I can",
    "start": "449539",
    "end": "456620"
  },
  {
    "text": "give you or we can give you instances with hundreds of CPUs and terabytes of",
    "start": "456620",
    "end": "462020"
  },
  {
    "text": "memory but no matter what you're going to hit an endpoint eventually and can",
    "start": "462020",
    "end": "468020"
  },
  {
    "text": "anyone else think of a problem with just having a single instance as your architecture probably no failover",
    "start": "468020",
    "end": "476440"
  },
  {
    "text": "exactly so no redundancy so this is one of the first things we're going to have",
    "start": "476440",
    "end": "481669"
  },
  {
    "text": "to deal with in our architecture avoid do want to get beyond one user one of",
    "start": "481669",
    "end": "488900"
  },
  {
    "text": "the first things I'm going to suggest we do is separate our web tier from our database tier and this is a constant",
    "start": "488900",
    "end": "496039"
  },
  {
    "text": "principle we'll come back to over and over again there'll be a few of these principles we go through today where",
    "start": "496039",
    "end": "502159"
  },
  {
    "text": "we're separating our aspects of our application so that we can operate and scale them separately because the amount",
    "start": "502159",
    "end": "509270"
  },
  {
    "text": "of load on our web tier might be different to the amount of load on our database tier and vice versa we want to",
    "start": "509270",
    "end": "514729"
  },
  {
    "text": "be able to operate those things independently now if you're going to choose a database you've got a few",
    "start": "514729",
    "end": "521990"
  },
  {
    "start": "519000",
    "end": "519000"
  },
  {
    "text": "options you can simply put the database on the same ec2 instance same type of",
    "start": "521990",
    "end": "527959"
  },
  {
    "text": "ec2 instance or another type and you can pretty much have any database you want now the catch with",
    "start": "527959",
    "end": "534090"
  },
  {
    "text": "that is you're going to have to manage it you have to patch the operating system the database do the backups and",
    "start": "534090",
    "end": "540810"
  },
  {
    "text": "those tasks are going to fall to your team and take away time that they would otherwise spend doing stuff on your",
    "start": "540810",
    "end": "547770"
  },
  {
    "text": "application itself so another option is to go for a managed database so Amazon",
    "start": "547770",
    "end": "553589"
  },
  {
    "text": "relational database service gives you access to many open-source database engines like MySQL Postgres you have",
    "start": "553589",
    "end": "561839"
  },
  {
    "text": "Amazon Aurora which I'll mention in a minute as well proprietary engines like Oracle and",
    "start": "561839",
    "end": "567240"
  },
  {
    "text": "MySQL and Microsoft sequel server a big one and also mention Amazon redshift",
    "start": "567240",
    "end": "573839"
  },
  {
    "text": "which is a petabyte scale data warehouse now you may not use this at this stage",
    "start": "573839",
    "end": "579450"
  },
  {
    "text": "in your application but it's something to be aware of because later on you can offload your analytics and reporting to",
    "start": "579450",
    "end": "588270"
  },
  {
    "text": "a data warehouse take away pressure from your transactional systems let's take a",
    "start": "588270",
    "end": "593460"
  },
  {
    "start": "593000",
    "end": "593000"
  },
  {
    "text": "look at Amazon Aurora so it's a MySQL or PostgreSQL database and it's most",
    "start": "593460",
    "end": "602190"
  },
  {
    "text": "popular services and that's because it's incredibly cost effective but it's also",
    "start": "602190",
    "end": "607260"
  },
  {
    "text": "really highly performant about five times the performance of what you'd expect from a similar MySQL database it",
    "start": "607260",
    "end": "615089"
  },
  {
    "text": "also has this great feature that enables you to automatically scale up your storage this is going to come in handy",
    "start": "615089",
    "end": "620760"
  },
  {
    "text": "as you get bigger and bigger it allows you to have 15 read replicas you'll see",
    "start": "620760",
    "end": "626430"
  },
  {
    "text": "why that's handy in a minute and it's backing up your data six ways across",
    "start": "626430",
    "end": "632790"
  },
  {
    "text": "three availability zones constantly now",
    "start": "632790",
    "end": "638070"
  },
  {
    "text": "another decision you're going to have to make is whether to go noise ql from the beginning now this is no SQL is really",
    "start": "638070",
    "end": "645420"
  },
  {
    "text": "popular today and it's very common for us to choose no SQL early on",
    "start": "645420",
    "end": "651350"
  },
  {
    "text": "we'd actually recommend that you start with a sequel database now the reason",
    "start": "651350",
    "end": "657120"
  },
  {
    "text": "for that is it's a really established and well-worn technology there's lots of existing code",
    "start": "657120",
    "end": "663160"
  },
  {
    "text": "community's books tools available to help you and you're really not going to break this technology in your first",
    "start": "663160",
    "end": "668590"
  },
  {
    "text": "millions of users there's clear patterns of scalability for it which I'll go through as well now the caveat here is",
    "start": "668590",
    "end": "676750"
  },
  {
    "text": "unless you're doing something quite particular and that could be if you've",
    "start": "676750",
    "end": "681760"
  },
  {
    "text": "got lots and lots of data for example now if that you thought oh that's me you said it lots of data let me just",
    "start": "681760",
    "end": "690400"
  },
  {
    "text": "clarify what I mean I'm talking about you know five terabytes or greater in a",
    "start": "690400",
    "end": "696040"
  },
  {
    "text": "year or a really data intensive application then you might want to consider it other reasons you might want",
    "start": "696040",
    "end": "702700"
  },
  {
    "text": "to consider it you have super low latency if you've got very metadata driven data sets you want to have schema",
    "start": "702700",
    "end": "709660"
  },
  {
    "text": "less data you know keep in mind we're not just talking I want to have scheme lists but actual requirement to have",
    "start": "709660",
    "end": "715570"
  },
  {
    "text": "schema less then you these are some of the reasons why you might choose no SQL early on as well another thing you're",
    "start": "715570",
    "end": "723580"
  },
  {
    "text": "going to have to solve when you get past one user is registration sign-in or all",
    "start": "723580",
    "end": "728890"
  },
  {
    "text": "the use cases that go with having more than one user if you like me and you've",
    "start": "728890",
    "end": "734590"
  },
  {
    "text": "got lots of web applications in the past you've built these stories over and over and over again into your applications",
    "start": "734590",
    "end": "739830"
  },
  {
    "text": "now you could do that or another option is you could take advantage of an Amazon",
    "start": "739830",
    "end": "745000"
  },
  {
    "start": "743000",
    "end": "743000"
  },
  {
    "text": "service called Amazon Cognito which enables you to build that functionality into application really easily gives you",
    "start": "745000",
    "end": "752680"
  },
  {
    "text": "sign up and sign in multi-factor authentication a whole range of different features that you'd like to have it also allows you to use federated",
    "start": "752680",
    "end": "760090"
  },
  {
    "text": "identities with popular identity management systems so that's that's an",
    "start": "760090",
    "end": "765760"
  },
  {
    "text": "option to consider that's going to start us towards the journey of aspiring to",
    "start": "765760",
    "end": "771040"
  },
  {
    "text": "hundreds of users now if we're going for hundreds of users I'm going to recommend",
    "start": "771040",
    "end": "777130"
  },
  {
    "text": "that you use the relational database service and we've got a master database here",
    "start": "777130",
    "end": "782700"
  },
  {
    "text": "it'll become apparent why I'm suggesting that as we go through but one of the",
    "start": "782700",
    "end": "788170"
  },
  {
    "text": "first things is as I said it's going to take away that load from your your development so now let's go towards a",
    "start": "788170",
    "end": "796000"
  },
  {
    "text": "thousand users well one of the first things we're going to do in terms of scaling as we get a",
    "start": "796000",
    "end": "801340"
  },
  {
    "text": "little bit bigger is use that other level we have with scaling which is scaling horizontally so now we're",
    "start": "801340",
    "end": "808690"
  },
  {
    "text": "scaling across those availability zones I mentioned earlier here I've depicted too whenever I'm in depicting too",
    "start": "808690",
    "end": "816310"
  },
  {
    "text": "I'm really saying across multiple so this could be across as many availability zones as you have available",
    "start": "816310",
    "end": "822490"
  },
  {
    "text": "in the region you're deploying into and you're gonna scale horizontally to",
    "start": "822490",
    "end": "827500"
  },
  {
    "text": "support the number of users you're seeing and the load that's happening on those servers we're also using a feature",
    "start": "827500",
    "end": "834760"
  },
  {
    "text": "of the relational database service now to have a slave database in one of the",
    "start": "834760",
    "end": "840700"
  },
  {
    "text": "other regions one in other zones and this is going to synchronously replicate",
    "start": "840700",
    "end": "846400"
  },
  {
    "text": "data between those availability zones keeping that data up-to-date for us so that if we have a failure in our master",
    "start": "846400",
    "end": "852610"
  },
  {
    "text": "database the relational database service will automatically failover to that slave for us now we're able to load",
    "start": "852610",
    "end": "860680"
  },
  {
    "text": "balance between the different web instances using a load balancer and",
    "start": "860680",
    "end": "867340"
  },
  {
    "text": "that's enabling us to be able to scale our horizontally we're choosing a load",
    "start": "867340",
    "end": "873940"
  },
  {
    "start": "872000",
    "end": "872000"
  },
  {
    "text": "balancer we have a few options we have an application load balancer a network load balancer and a classic load",
    "start": "873940",
    "end": "880930"
  },
  {
    "text": "balancer you're going to use a classical balancer if you're dealing with a classic ec2 classic network most of you",
    "start": "880930",
    "end": "887530"
  },
  {
    "text": "will probably have a V PC in which case which is just you use either an application load balancer or a network",
    "start": "887530",
    "end": "893170"
  },
  {
    "text": "load balancer the application load balancer has a really helpful feature",
    "start": "893170",
    "end": "899530"
  },
  {
    "start": "896000",
    "end": "896000"
  },
  {
    "text": "which is to keep a health check of your actual service so there's any problems",
    "start": "899530",
    "end": "905260"
  },
  {
    "text": "with your servers it'll detect that and all stop routing traffic to it now the",
    "start": "905260",
    "end": "911080"
  },
  {
    "text": "application load balancer is what we'd recommend for web servers for web applications and that's because it's",
    "start": "911080",
    "end": "917320"
  },
  {
    "text": "routing traffic at layer seven so you can do things like content based routing and advanced features like WebSockets",
    "start": "917320",
    "end": "924870"
  },
  {
    "text": "now if you need to route at layer 4 or you've got extreme performance",
    "start": "924870",
    "end": "930759"
  },
  {
    "start": "926000",
    "end": "926000"
  },
  {
    "text": "requirements ultra-low latency requirements you might want to consider the network load balancer instead so",
    "start": "930759",
    "end": "940629"
  },
  {
    "text": "this gives us those two levers as I mentioned scaling horizontally and vertically that we're going to keep coming back to as we scale up and our",
    "start": "940629",
    "end": "947620"
  },
  {
    "text": "users our volume is increasing we're going to continually revisit these capabilities scaling up vertically by",
    "start": "947620",
    "end": "953860"
  },
  {
    "text": "using the type of instance and scaling horizontally by adding instances into our system that basic architecture is",
    "start": "953860",
    "end": "963129"
  },
  {
    "text": "going to take us to the ability to deal with hundreds of thousands of users and it looks something like this we're going",
    "start": "963129",
    "end": "971199"
  },
  {
    "text": "to scale out increasingly across our availability zones with a number of web",
    "start": "971199",
    "end": "977470"
  },
  {
    "text": "instances to support the number of requests we're seeing we'll also use another feature of the relational",
    "start": "977470",
    "end": "983680"
  },
  {
    "text": "database service some of the engines available on the relational database service allow you to have read replicas",
    "start": "983680",
    "end": "989129"
  },
  {
    "text": "our read replicas allow you to offload the read requests from your web servers",
    "start": "989129",
    "end": "994809"
  },
  {
    "text": "from your master database so again another principle we'll come back to is",
    "start": "994809",
    "end": "1001170"
  },
  {
    "text": "spreading the load across multiple components of your system now we can",
    "start": "1001170",
    "end": "1009029"
  },
  {
    "text": "spread the load around even further we can take the static content from our web instances and serve that from Amazon s3",
    "start": "1009029",
    "end": "1020209"
  },
  {
    "text": "so the static web pages actually host them in s3 and we can do that and we can",
    "start": "1020209",
    "end": "1026159"
  },
  {
    "text": "put Amazon CloudFront in front of that to cache that content close to our end users are reducing the",
    "start": "1026159",
    "end": "1033538"
  },
  {
    "text": "latency that they experience let's have a look at those s3 is one of the most",
    "start": "1033539",
    "end": "1040620"
  },
  {
    "text": "underrated services available on the a diverse platform and that's it's one of",
    "start": "1040620",
    "end": "1046048"
  },
  {
    "text": "those services that you see on architecture diagrams almost every architecture has s3 in it and that's",
    "start": "1046049",
    "end": "1051299"
  },
  {
    "text": "because it's so durable it's designed for 11 nines of durability now that",
    "start": "1051299",
    "end": "1057600"
  },
  {
    "text": "means that if you have 10,000 objects you might lose one of the",
    "start": "1057600",
    "end": "1062730"
  },
  {
    "text": "after 10 million years was pretty durable it's also infinitely scalable but in terms of the storage capacity and",
    "start": "1062730",
    "end": "1070610"
  },
  {
    "text": "request volumes so that's just something you don't have to worry about if you set a contents there it's generally just",
    "start": "1070610",
    "end": "1076650"
  },
  {
    "text": "going to handle it the other service that I mentioned is",
    "start": "1076650",
    "end": "1082049"
  },
  {
    "start": "1079000",
    "end": "1079000"
  },
  {
    "text": "cloud front now this is our content delivery network service where it'll cache the content in those edge",
    "start": "1082049",
    "end": "1088710"
  },
  {
    "text": "locations I mentioned earlier so that's closer to wherever your users are requesting that content from meaning",
    "start": "1088710",
    "end": "1095130"
  },
  {
    "text": "that when that content is requested again it's cached close to that location and your users don't have to take that",
    "start": "1095130",
    "end": "1102450"
  },
  {
    "text": "extra hop and come to your web servers they can or out or s3 they can just get it from that edge you can also use it to",
    "start": "1102450",
    "end": "1110630"
  },
  {
    "text": "speed up your dynamic content because it'll optimize the route to your dynamic",
    "start": "1110630",
    "end": "1115799"
  },
  {
    "text": "content and we can see here that using a",
    "start": "1115799",
    "end": "1121740"
  },
  {
    "text": "content delivery network we can actually reduce the latency in our system we can",
    "start": "1121740",
    "end": "1127230"
  },
  {
    "text": "reduce the response time and reduce that server load because every request that",
    "start": "1127230",
    "end": "1132630"
  },
  {
    "text": "hits cloud front doesn't hit s3 and doesn't hit our web tier so our server",
    "start": "1132630",
    "end": "1138809"
  },
  {
    "text": "load is going to be much reduced this graphic down at the bottom of the screen is showing one of our customers who",
    "start": "1138809",
    "end": "1144450"
  },
  {
    "text": "experienced a scaling event they were ticking away at around 5 10 gigabits per",
    "start": "1144450",
    "end": "1149910"
  },
  {
    "text": "second and they suddenly had a request volume jump up and spiked to around 80",
    "start": "1149910",
    "end": "1155220"
  },
  {
    "text": "gigabits per second now the interesting thing about this is they were able to",
    "start": "1155220",
    "end": "1160770"
  },
  {
    "text": "support that request volume without doing anything in their system their web tier didn't actually see any of that",
    "start": "1160770",
    "end": "1166590"
  },
  {
    "text": "load this is incredibly powerful capability that you have active access",
    "start": "1166590",
    "end": "1171900"
  },
  {
    "text": "to if you put this into your applications now we can shift the load",
    "start": "1171900",
    "end": "1177929"
  },
  {
    "text": "around even further we can cache our requests to our database using Amazon",
    "start": "1177929",
    "end": "1186059"
  },
  {
    "text": "ElastiCache so this is a managed memcache D or Redis cluster it'll scale",
    "start": "1186059",
    "end": "1194490"
  },
  {
    "start": "1188000",
    "end": "1188000"
  },
  {
    "text": "up to many nodes as many as you it'll heal nodes that fail replace them",
    "start": "1194490",
    "end": "1200940"
  },
  {
    "text": "and it's gonna give you single-digit milliseconds beats another way we can",
    "start": "1200940",
    "end": "1207840"
  },
  {
    "text": "shift a load around is by moving our session data into a no SQL database and",
    "start": "1207840",
    "end": "1214130"
  },
  {
    "text": "we could use Amazon DynamoDB for that so",
    "start": "1214130",
    "end": "1219420"
  },
  {
    "text": "Amazon DynamoDB is the managed no SQL database it's allows you to scale your",
    "start": "1219420",
    "end": "1227100"
  },
  {
    "text": "throughput whether it's read through port or write throughput separately you can set that to whatever level you need",
    "start": "1227100",
    "end": "1232710"
  },
  {
    "text": "it to be at and it will even auto scale that for you it's fully distributed and",
    "start": "1232710",
    "end": "1238440"
  },
  {
    "text": "fault tolerant it's gonna scale for you and it'll support JSON items up to 400",
    "start": "1238440",
    "end": "1243960"
  },
  {
    "text": "kilobits now one thing you might want to",
    "start": "1243960",
    "end": "1249480"
  },
  {
    "text": "use when you're looking about moving your data around and we'll talk about refactoring your application as we go",
    "start": "1249480",
    "end": "1255150"
  },
  {
    "text": "you're going to need to move your data around the system between different places as you start to refactor and one",
    "start": "1255150",
    "end": "1261720"
  },
  {
    "text": "of the ways you could do that is by using an AWS database migration service now using this service you can point it",
    "start": "1261720",
    "end": "1268740"
  },
  {
    "text": "at a source database and it will replicate that data to your target",
    "start": "1268740",
    "end": "1275580"
  },
  {
    "text": "database without affecting the performance of your source database heavily so you can even do this in",
    "start": "1275580",
    "end": "1282270"
  },
  {
    "text": "production so you can have the data replicate across and when you're ready you can switch that to be the primary",
    "start": "1282270",
    "end": "1288270"
  },
  {
    "text": "store it's also another service Amazon",
    "start": "1288270",
    "end": "1294540"
  },
  {
    "text": "DynamoDB accelerator and this allows you to cache the content occasionally requests for dynamodb so this is going",
    "start": "1294540",
    "end": "1302220"
  },
  {
    "text": "to further increase your read performance on dynamodb and it's going to lower the cost because you don't need",
    "start": "1302220",
    "end": "1308430"
  },
  {
    "text": "to provision as much read through put on your dynamo DB in that case at this",
    "start": "1308430",
    "end": "1315180"
  },
  {
    "text": "stage architectural II we've actually lightened our our architecture lighten",
    "start": "1315180",
    "end": "1322470"
  },
  {
    "text": "the load across our service we've spread it out so this is going to enable us to revisit something we talked about in the",
    "start": "1322470",
    "end": "1329310"
  },
  {
    "text": "beginning what are scaling this is a typical",
    "start": "1329310",
    "end": "1334860"
  },
  {
    "text": "weekly traffic at amazon.com you see it peeking during the day dropping down at",
    "start": "1334860",
    "end": "1340920"
  },
  {
    "text": "the evening hopefully people are taking a bit of a break night going asleep now if we were going to provision",
    "start": "1340920",
    "end": "1347940"
  },
  {
    "text": "capacity to support that we'd want to have a margin of safety above that you",
    "start": "1347940",
    "end": "1353310"
  },
  {
    "text": "might argue this is actually quite a conservative margin of safety we might have even had double capacity in the old",
    "start": "1353310",
    "end": "1359520"
  },
  {
    "text": "days but what about in November about this month the traffic steadily",
    "start": "1359520",
    "end": "1368250"
  },
  {
    "text": "increases on amazon.com until the end of the month we see these big spikes for",
    "start": "1368250",
    "end": "1374580"
  },
  {
    "text": "Black Friday or Monday so yesterday now if we were going to provision",
    "start": "1374580",
    "end": "1380580"
  },
  {
    "text": "capacity with margin of safety on there we're going to have 76 percent of our",
    "start": "1380580",
    "end": "1385950"
  },
  {
    "text": "provision capacity unutilized for the month that's not a great position to be in what we'd really prefer is to be able",
    "start": "1385950",
    "end": "1394170"
  },
  {
    "text": "to provision just enough capacity to support the load that we're seeing and reduce that capacity whenever we're",
    "start": "1394170",
    "end": "1401940"
  },
  {
    "text": "seeing that load come off now",
    "start": "1401940",
    "end": "1407280"
  },
  {
    "text": "auto-scaling lets us do this and it does it automatically the way it works is it",
    "start": "1407280",
    "end": "1413970"
  },
  {
    "start": "1412000",
    "end": "1412000"
  },
  {
    "text": "lets you specify a minimum and a maximum pool size and then it will automatically",
    "start": "1413970",
    "end": "1419490"
  },
  {
    "text": "scale your cluster to support the volume that you're seeing it's really easy to",
    "start": "1419490",
    "end": "1425490"
  },
  {
    "text": "define an auto scaling group you can see the command example down the bottom and it will scale your cluster dependent on",
    "start": "1425490",
    "end": "1434640"
  },
  {
    "text": "cloud watch metrics that you set okay so you can set a metric to fire an alarm to",
    "start": "1434640",
    "end": "1440940"
  },
  {
    "text": "say whether your CPU is getting too high or you're seeing the request volumes get to a certain level and then it'll",
    "start": "1440940",
    "end": "1447450"
  },
  {
    "text": "automatically add an instance for you and that can be across multiple",
    "start": "1447450",
    "end": "1452700"
  },
  {
    "text": "availability zones and then when it sees that capacity dropping back off another",
    "start": "1452700",
    "end": "1458130"
  },
  {
    "text": "alarm will fire and instances will be turned off and it'll scale back down automatically",
    "start": "1458130",
    "end": "1463350"
  },
  {
    "text": "you having to do anything really handy so this now we've incorporated this type",
    "start": "1463350",
    "end": "1470340"
  },
  {
    "text": "of architecture we're going to be out of support upwards of 500,000 users getting",
    "start": "1470340",
    "end": "1475440"
  },
  {
    "text": "into big leagues now we're using or scaling out using our load balancer we've got offloaded content static",
    "start": "1475440",
    "end": "1483059"
  },
  {
    "text": "content on s3 we're caching we've got our session store and DynamoDB we're",
    "start": "1483059",
    "end": "1488280"
  },
  {
    "text": "using read replicas we've got our standby database multi AZ feature of",
    "start": "1488280",
    "end": "1495150"
  },
  {
    "text": "relational database and now we've got auto scaling across our availability zones but what I prefer is to actually",
    "start": "1495150",
    "end": "1504360"
  },
  {
    "text": "Auto scale automatically across multiple availability zones just to find motors",
    "start": "1504360",
    "end": "1510480"
  },
  {
    "text": "auto scaling group to just provision those instances in whichever zone is is",
    "start": "1510480",
    "end": "1519059"
  },
  {
    "text": "next on the on the list and just keep provisioning out across and that's going to add resiliency into our application",
    "start": "1519059",
    "end": "1524429"
  },
  {
    "text": "as well so if we haven't already with we've done some automation by using auto",
    "start": "1524429",
    "end": "1532020"
  },
  {
    "start": "1527000",
    "end": "1527000"
  },
  {
    "text": "scaling groups we've automated part of application and I would say that the",
    "start": "1532020",
    "end": "1538890"
  },
  {
    "text": "first thing we should be looking at in our architecture is using something that's managed for us so we don't have to do it but if we are going to have to",
    "start": "1538890",
    "end": "1545850"
  },
  {
    "text": "do it then if the next step I would go to is try to automate it so if you haven't already at this stage we're",
    "start": "1545850",
    "end": "1552809"
  },
  {
    "text": "starting to look at automating the infrastructure and the provisioning of our systems an address provides several",
    "start": "1552809",
    "end": "1561240"
  },
  {
    "start": "1561000",
    "end": "1561000"
  },
  {
    "text": "services to help you do that ranging from really convenient ones to more",
    "start": "1561240",
    "end": "1567510"
  },
  {
    "text": "complex but highly controllable ones give you a lot of control so with the",
    "start": "1567510",
    "end": "1573120"
  },
  {
    "text": "convenience end of the spectrum we have elastic beanstalk now that's a great",
    "start": "1573120",
    "end": "1578309"
  },
  {
    "text": "service where you can just point it at your code and it'll provision the AWS resources that are necessary to operate",
    "start": "1578309",
    "end": "1584789"
  },
  {
    "text": "your application on if you want more control of than that and you like",
    "start": "1584789",
    "end": "1590850"
  },
  {
    "text": "configuration management AWS opsworks gives you the ability to use chef or puppet to describe what you'd",
    "start": "1590850",
    "end": "1599620"
  },
  {
    "text": "like your instances to behave like using things like chef recipes and it will",
    "start": "1599620",
    "end": "1604750"
  },
  {
    "text": "handle provisioning those users and configuring them and keeping them configured to the way that you need them",
    "start": "1604750",
    "end": "1609760"
  },
  {
    "text": "to be now going further than that giving you even more control is a diverse",
    "start": "1609760",
    "end": "1614860"
  },
  {
    "text": "CloudFormation now you can use CloudFormation to declaratively describe what your",
    "start": "1614860",
    "end": "1621250"
  },
  {
    "text": "resources need to be in either JSON or Yemma and it's smart enough to be able",
    "start": "1621250",
    "end": "1629620"
  },
  {
    "text": "to provision those resources for you and in the right order and if you change",
    "start": "1629620",
    "end": "1635410"
  },
  {
    "text": "your template it will be able to know exactly what it needs to change in order to make that work it'll also do rolling",
    "start": "1635410",
    "end": "1645400"
  },
  {
    "text": "updates for you as well if you want even more control all of the ADA where services have an API available to you so",
    "start": "1645400",
    "end": "1653140"
  },
  {
    "text": "you can actually automate it anything you want you can make it work the exact way you'd like it to by using the CLI",
    "start": "1653140",
    "end": "1659950"
  },
  {
    "text": "the command line interface or the SDK soft development kit now at this stage",
    "start": "1659950",
    "end": "1666990"
  },
  {
    "text": "we're actually treating our infrastructure as code we're defining the resources of our application in code",
    "start": "1666990",
    "end": "1673420"
  },
  {
    "text": "and as we'd like to with application to have continuous integration and",
    "start": "1673420",
    "end": "1678880"
  },
  {
    "text": "continuous delivery per application code we'd also like to do that with our infrastructure code so a TMS provides",
    "start": "1678880",
    "end": "1685960"
  },
  {
    "text": "some services to help you do that as well we have a diverse code commit which",
    "start": "1685960",
    "end": "1691660"
  },
  {
    "start": "1687000",
    "end": "1687000"
  },
  {
    "text": "is a git repository where you can store your infrastructure code in your application code there's a team of us",
    "start": "1691660",
    "end": "1697870"
  },
  {
    "text": "code build where you can build your application on demand you pay only for the build time that you use you can use",
    "start": "1697870",
    "end": "1706000"
  },
  {
    "text": "third-party tooling to do testing and of course you would actually want to test",
    "start": "1706000",
    "end": "1711220"
  },
  {
    "text": "the scalability of your system just like you'd want to test the security and the functional requirements of your system",
    "start": "1711220",
    "end": "1717550"
  },
  {
    "text": "you'd want to test that scalability and when it comes to deploying a diverse code deploy lets you deploy to thousands",
    "start": "1717550",
    "end": "1724450"
  },
  {
    "text": "of instances now you can orchestrate all of this using AWS code",
    "start": "1724450",
    "end": "1729560"
  },
  {
    "text": "pipeline it'll actually be able to be triggered by your code being checked",
    "start": "1729560",
    "end": "1734630"
  },
  {
    "text": "into code commit and start a pipeline off of building testing and deploying",
    "start": "1734630",
    "end": "1740750"
  },
  {
    "text": "your system automatically so these are really powerful features that you have access to now you will need to actually",
    "start": "1740750",
    "end": "1747770"
  },
  {
    "text": "implement this pipeline and build build out these features using these tools so",
    "start": "1747770",
    "end": "1753020"
  },
  {
    "text": "whilst it's very powerful it's also something that you need to do now to get",
    "start": "1753020",
    "end": "1758330"
  },
  {
    "text": "started with this really easy way is to use another service called AWS code star",
    "start": "1758330",
    "end": "1764110"
  },
  {
    "text": "code star you can think of it as like the blight sale of CI CD development because it lets you start with a",
    "start": "1764110",
    "end": "1771500"
  },
  {
    "text": "template for a given application and it'll put all those building blocks blocks in place for you and label you to",
    "start": "1771500",
    "end": "1776870"
  },
  {
    "text": "get started really quickly with that style development another thing that you",
    "start": "1776870",
    "end": "1783770"
  },
  {
    "text": "want to do at this point if you haven't already is build monitoring and metrics and logging into your application now",
    "start": "1783770",
    "end": "1790820"
  },
  {
    "text": "this isn't something that you want to actually build yourself just utilize the",
    "start": "1790820",
    "end": "1796520"
  },
  {
    "text": "services provided by us things like cloud watch or there's lots of services",
    "start": "1796520",
    "end": "1802460"
  },
  {
    "text": "provided by our our partners as well so the sorts of things you want to log and",
    "start": "1802460",
    "end": "1809980"
  },
  {
    "text": "monitor things like host level metrics to see where are the hosts CPU and",
    "start": "1809980",
    "end": "1815870"
  },
  {
    "text": "memory and all of those types of things how are they performing make sure that that's all going well aggregate level",
    "start": "1815870",
    "end": "1821810"
  },
  {
    "text": "metrics like your response times etc log analysis so you can deep dive into any issues you're having and detect any",
    "start": "1821810",
    "end": "1828500"
  },
  {
    "text": "errors that are occurring and of course it's great to know how your application",
    "start": "1828500",
    "end": "1833870"
  },
  {
    "text": "is performing on the inside but what's most important is the experience that your end-users are having so another",
    "start": "1833870",
    "end": "1842450"
  },
  {
    "start": "1842000",
    "end": "1842000"
  },
  {
    "text": "thing that I wanted to call out with respect to monitoring and logging is feature and cloud watch called cloud",
    "start": "1842450",
    "end": "1848630"
  },
  {
    "text": "watch percentiles one of the problems with always using averages is it can hide anomalies from you so you can give",
    "start": "1848630",
    "end": "1856730"
  },
  {
    "text": "you a false sense of security using things like p90 it's just to say that the data for this",
    "start": "1856730",
    "end": "1864540"
  },
  {
    "text": "particular metric all of it falls below if you say at the 90 percentile 90% of",
    "start": "1864540",
    "end": "1870540"
  },
  {
    "text": "it falls below that mark or p99 99% of it falls below that mark this",
    "start": "1870540",
    "end": "1875880"
  },
  {
    "text": "will enable you to see where you've got anomalies in your system and dive deep and find out what's actually going on to",
    "start": "1875880",
    "end": "1882150"
  },
  {
    "text": "improve the performance and operational characteristics of your system as you go",
    "start": "1882150",
    "end": "1887930"
  },
  {
    "text": "so we've looked at the architecture of our system so far to improve it let's",
    "start": "1887930",
    "end": "1893820"
  },
  {
    "text": "look into the application itself and see what else we can do now I've assumed at",
    "start": "1893820",
    "end": "1899640"
  },
  {
    "start": "1898000",
    "end": "1898000"
  },
  {
    "text": "this point that you've built a monolithic architecture you may have chosen to build to break this down by",
    "start": "1899640",
    "end": "1905880"
  },
  {
    "text": "now but if you haven't already you've got a monolithic architecture you've got your user interface your business logic your data access and many other aspects",
    "start": "1905880",
    "end": "1913710"
  },
  {
    "text": "of your system built into the same codebase maybe the same process so something can",
    "start": "1913710",
    "end": "1919470"
  },
  {
    "text": "help us here is SOA so what's that let's get the browser out again search it up",
    "start": "1919470",
    "end": "1926460"
  },
  {
    "text": "SOA lots of hits some interesting things maybe not quite relevant but one of them",
    "start": "1926460",
    "end": "1934680"
  },
  {
    "text": "is service-oriented architecture so service-oriented architecture is breaking down our application into those",
    "start": "1934680",
    "end": "1942890"
  },
  {
    "text": "individually composable parts that have their own responsibilities and enabling",
    "start": "1942890",
    "end": "1948210"
  },
  {
    "text": "those different parts of application to communicate and coordinate with one another via clear contracts or",
    "start": "1948210",
    "end": "1954840"
  },
  {
    "text": "interfaces and those individual aspects of our application have their own data and their own responsibilities by",
    "start": "1954840",
    "end": "1964800"
  },
  {
    "text": "splitting them up like this it allows us to treat them separately coming back to that principle I mentioned earlier and",
    "start": "1964800",
    "end": "1970220"
  },
  {
    "text": "scale them independently now one of the",
    "start": "1970220",
    "end": "1976020"
  },
  {
    "text": "ways you can take advantage of service-oriented architecture is by using service managed services provided",
    "start": "1976020",
    "end": "1984780"
  },
  {
    "text": "by the AWS to incorporate those features into your application whether you're looking for searching or logging",
    "start": "1984780",
    "end": "1992810"
  },
  {
    "text": "compute you can incorporate these services in your application using their api's and you'll be able to get those",
    "start": "1992810",
    "end": "2001750"
  },
  {
    "text": "features without having to build them yourself one of those is a simple queuing service",
    "start": "2001750",
    "end": "2008140"
  },
  {
    "text": "and that can enable another really important paradigm which is to loosely",
    "start": "2008140",
    "end": "2013180"
  },
  {
    "text": "couple the different components as you're breaking down the components of your application if you loosely couple",
    "start": "2013180",
    "end": "2018550"
  },
  {
    "text": "them they can operate independently of one another and don't necessarily need to be scaled in lockstep one can be sending messages",
    "start": "2018550",
    "end": "2025870"
  },
  {
    "text": "to a queue and the other one can be dealing with that as and when it can",
    "start": "2025870",
    "end": "2031530"
  },
  {
    "text": "another paradigm that's really interesting and can help you here is event-driven computing and you can",
    "start": "2031530",
    "end": "2037930"
  },
  {
    "start": "2032000",
    "end": "2032000"
  },
  {
    "text": "implement a venture of and computing using a service on AWS called lambda this enables you to define functions",
    "start": "2037930",
    "end": "2046090"
  },
  {
    "text": "using your code written in nodejs or Java or Python or C sharp and it will",
    "start": "2046090",
    "end": "2052510"
  },
  {
    "text": "automatically load your code run it and unload it and you only pay for that time",
    "start": "2052510",
    "end": "2058780"
  },
  {
    "text": "that was actually being compute and it can be triggered based on events like",
    "start": "2058780",
    "end": "2064560"
  },
  {
    "text": "changes to your s3 bucket or changes to your dynamo DB database or a Kinesis",
    "start": "2064560",
    "end": "2071620"
  },
  {
    "text": "stream so loose coupling can really set you free and using service computing as",
    "start": "2071620",
    "end": "2079960"
  },
  {
    "text": "well because it can decouple the interactions between your systems and",
    "start": "2079960",
    "end": "2084970"
  },
  {
    "text": "it's and it's something that you don't have to control or operate it'll just automatically scale for you",
    "start": "2084970",
    "end": "2091350"
  },
  {
    "start": "2091000",
    "end": "2091000"
  },
  {
    "text": "another paradigm that's really important to understand you've probably heard about already it's serverless web applications so this",
    "start": "2091350",
    "end": "2099340"
  },
  {
    "text": "is using something we've seen already which is putting our static content in s3 caching it with cloud front and now",
    "start": "2099340",
    "end": "2107800"
  },
  {
    "text": "we're putting out now we're supporting our dynamic content using lambda and we do that by putting the Amazon API",
    "start": "2107800",
    "end": "2114910"
  },
  {
    "text": "gateway in front of it and then lambda can be responsible for doing functions",
    "start": "2114910",
    "end": "2120130"
  },
  {
    "text": "for us it can look after its data in a data store like dynamodb that's almost",
    "start": "2120130",
    "end": "2126280"
  },
  {
    "text": "all what our system now is actually completely servile us we don't have to patch it we don't have to scale up we",
    "start": "2126280",
    "end": "2132369"
  },
  {
    "text": "don't have to manage it in any way ad Busch is going to take care of that for us now you might be asking though where's",
    "start": "2132369",
    "end": "2139690"
  },
  {
    "text": "the user interface where am I going to run the user interface part of my application in this scenario well we're",
    "start": "2139690",
    "end": "2146799"
  },
  {
    "text": "going back to that principle of of two principles one is moving that compute to",
    "start": "2146799",
    "end": "2153039"
  },
  {
    "text": "the edge closer to our end users and also spreading the load around even",
    "start": "2153039",
    "end": "2158410"
  },
  {
    "text": "further this time by utilizing the compute in our users browsers we're",
    "start": "2158410",
    "end": "2164559"
  },
  {
    "text": "running our application our user interface code now in our users browser using a single web page application for",
    "start": "2164559",
    "end": "2172180"
  },
  {
    "text": "example with up one of these frameworks potentially there's many popular",
    "start": "2172180",
    "end": "2177849"
  },
  {
    "text": "frameworks to help you do that so now if you can imagine your user interface running on you users browser either in",
    "start": "2177849",
    "end": "2185529"
  },
  {
    "text": "the mobile device or on their desktop now I haven't drawn in this diagram the",
    "start": "2185529",
    "end": "2192029"
  },
  {
    "text": "static content but you just assume that still there I'm diving deeper now into",
    "start": "2192029",
    "end": "2197049"
  },
  {
    "text": "the actual dynamic content and showing how we can break that down even further using microservices so now we're getting",
    "start": "2197049",
    "end": "2206109"
  },
  {
    "text": "down to having very distinct responsibilities for each component our system and that enables our teams who",
    "start": "2206109",
    "end": "2213849"
  },
  {
    "text": "are building these to focus on those individual characteristics of that particular component of our application",
    "start": "2213849",
    "end": "2220599"
  },
  {
    "text": "the data that it's responsible for and the way that it should be managed",
    "start": "2220599",
    "end": "2225839"
  },
  {
    "text": "now you can instantiate that pattern using those services I've mentioned",
    "start": "2225839",
    "end": "2231940"
  },
  {
    "text": "already so using lambda and API gateway",
    "start": "2231940",
    "end": "2237059"
  },
  {
    "text": "dynamodb for the data store for example and you can you can build a",
    "start": "2237059",
    "end": "2243309"
  },
  {
    "text": "microservices architecture that way now if you're coming from a monolithic architecture background you might be",
    "start": "2243309",
    "end": "2248410"
  },
  {
    "text": "looking at that and saying wow this is going to get complex in my real-world application if I break my application",
    "start": "2248410",
    "end": "2254289"
  },
  {
    "text": "down into those individual functional units I'm gonna have a lot of these how am I going to manage it",
    "start": "2254289",
    "end": "2260110"
  },
  {
    "text": "and that is one of the downsides of the micro-services architecture which is why any mess is created a service called",
    "start": "2260110",
    "end": "2266680"
  },
  {
    "text": "x-ray which enables you to get a visualization of your service core graph at any time and see what's happening in",
    "start": "2266680",
    "end": "2274150"
  },
  {
    "text": "your application it can help you to pinpoint issues and find out what",
    "start": "2274150",
    "end": "2279310"
  },
  {
    "text": "different parts your application are doing one so this is an example it's",
    "start": "2279310",
    "end": "2286090"
  },
  {
    "text": "coming through an ec2 instance doing some work going to another ec2 instance",
    "start": "2286090",
    "end": "2292360"
  },
  {
    "text": "going back to DynamoDB and a simple notification service and we can see the",
    "start": "2292360",
    "end": "2297760"
  },
  {
    "text": "time it's taking at each step and we can dive deeper into each one of those and",
    "start": "2297760",
    "end": "2303040"
  },
  {
    "text": "do a trace of our application and find out what's happening in the call stack we can find out which part of our",
    "start": "2303040",
    "end": "2308590"
  },
  {
    "text": "application is taking longer to do what so these these architectural concepts",
    "start": "2308590",
    "end": "2315190"
  },
  {
    "text": "now are going to help us aspire to get past a million users to do that we're",
    "start": "2315190",
    "end": "2322990"
  },
  {
    "text": "going to use the all the things we've discussed you're gonna use multi AZ use load balancing auto scaling now load",
    "start": "2322990",
    "end": "2332350"
  },
  {
    "text": "balancing and auto scaling you're going to work together because as we scale out the load balancer is going to not only",
    "start": "2332350",
    "end": "2339780"
  },
  {
    "text": "keep track of additional instances but it's also going to keep track of what's healthy and what's not for us we use",
    "start": "2339780",
    "end": "2347800"
  },
  {
    "text": "service-oriented architecture and micro services to break down our application so we can spread that load out and",
    "start": "2347800",
    "end": "2354250"
  },
  {
    "text": "manage it separately we're gonna offload the content and cache it as close to our end users as we can and it's going to",
    "start": "2354250",
    "end": "2364570"
  },
  {
    "text": "look something like this now simplify this diagram a little bit with we're",
    "start": "2364570",
    "end": "2370120"
  },
  {
    "text": "just seeing one availability zone but you can imagine this across multiple availability zones we've got our web",
    "start": "2370120",
    "end": "2375820"
  },
  {
    "text": "tier being Auto scaled get our caching read replicas master and slave we're",
    "start": "2375820",
    "end": "2384190"
  },
  {
    "text": "also using worker instances which are taking work from a cue loosely coupled",
    "start": "2384190",
    "end": "2389590"
  },
  {
    "text": "from the rest of our system doing work in the background for us even using an internal load balancer to",
    "start": "2389590",
    "end": "2395980"
  },
  {
    "text": "load balanced serve services that are working in the backend to provide features of our application using",
    "start": "2395980",
    "end": "2404500"
  },
  {
    "text": "event-driven programming with lambda taking events from our dynamo DB and s3 and we're monitoring the whole thing",
    "start": "2404500",
    "end": "2412840"
  },
  {
    "text": "with cloud wash they've even introduced some emailing with simple emailing service if I add into that our service",
    "start": "2412840",
    "end": "2421390"
  },
  {
    "text": "application development we can start to move some of that functionality off of our servers that we have to manage and",
    "start": "2421390",
    "end": "2428110"
  },
  {
    "text": "scale and operate on to servers we don't have to so what are the next big steps",
    "start": "2428110",
    "end": "2437790"
  },
  {
    "text": "well if we want to go from 1 million to 5 million to 10 million one of the",
    "start": "2437790",
    "end": "2443410"
  },
  {
    "text": "things we're stuck we're going to start to see is contention on our database we're going to see the scale of our",
    "start": "2443410",
    "end": "2449650"
  },
  {
    "text": "database start to be affected now in terms of both its compute and its storage now if we chose Amazon Aurora",
    "start": "2449650",
    "end": "2456580"
  },
  {
    "text": "earlier this is going to help us deal with that but depending on what scale we're looking at there maybe we may be",
    "start": "2456580",
    "end": "2462580"
  },
  {
    "text": "able to we may need to take some action to help us deal with this contention on",
    "start": "2462580",
    "end": "2468340"
  },
  {
    "text": "database we can do that with Federation and sharding and also taking more",
    "start": "2468340",
    "end": "2473770"
  },
  {
    "text": "advantage of no SQL so Federation what that means is breaking our database tier",
    "start": "2473770",
    "end": "2481120"
  },
  {
    "start": "2476000",
    "end": "2476000"
  },
  {
    "text": "down down into individual components based on the domain so for example here",
    "start": "2481120",
    "end": "2487510"
  },
  {
    "text": "we've got the forum's database still using that same pattern of master and",
    "start": "2487510",
    "end": "2492520"
  },
  {
    "text": "slave with read replicas and we're separating that out from our users database and our products database so",
    "start": "2492520",
    "end": "2498640"
  },
  {
    "text": "instead of having more than one database now we've split them out that's Federation we can also use sharding to",
    "start": "2498640",
    "end": "2506170"
  },
  {
    "text": "define a petition of our application based on the users for example or the",
    "start": "2506170",
    "end": "2512410"
  },
  {
    "text": "the individual data that's in our application we can have a petition key and we can say say all the users from a",
    "start": "2512410",
    "end": "2519610"
  },
  {
    "text": "to L are going to be on one petition one shard and all the way users from Mt",
    "start": "2519610",
    "end": "2525710"
  },
  {
    "text": "we'll be on another and we'll use that same familiar pattern master slavery replicas to do that we can also shift",
    "start": "2525710",
    "end": "2534710"
  },
  {
    "start": "2534000",
    "end": "2534000"
  },
  {
    "text": "some that functionality to no SQL so we're going to look into our data sets",
    "start": "2534710",
    "end": "2541670"
  },
  {
    "text": "and into our database to look for opportunities to move that data on to no",
    "start": "2541670",
    "end": "2547160"
  },
  {
    "text": "SQL things that might lend itself well to new SQL like data that's not very",
    "start": "2547160",
    "end": "2554960"
  },
  {
    "text": "schema intensive name value pair type data leaderboards scoring really hot",
    "start": "2554960",
    "end": "2561920"
  },
  {
    "text": "tables or metadata type lookup type tables those are really good candidates",
    "start": "2561920",
    "end": "2568549"
  },
  {
    "text": "for us to look at moving into no sequel and further taking load off our relational database alright so let's do",
    "start": "2568549",
    "end": "2578119"
  },
  {
    "text": "a quick review we've got multi a-z for our",
    "start": "2578119",
    "end": "2585230"
  },
  {
    "text": "infrastructure we're making use of self scaling services and whenever we do that",
    "start": "2585230",
    "end": "2591049"
  },
  {
    "text": "we're going to be able to scale our application up without having to take any action ourselves we're going to",
    "start": "2591049",
    "end": "2599599"
  },
  {
    "text": "build redundancy in at every level in application I've suggested you start",
    "start": "2599599",
    "end": "2604970"
  },
  {
    "text": "with SQL and look at moving to no SQL as it makes sense we want to cache our",
    "start": "2604970",
    "end": "2611359"
  },
  {
    "text": "content as close to our end users as possible and cache our requests whenever",
    "start": "2611359",
    "end": "2617240"
  },
  {
    "text": "possible as well want to build automation into our service so we can provision it and reprovision it as we",
    "start": "2617240",
    "end": "2623270"
  },
  {
    "text": "refactor our application we can do that automatically want to make good use of",
    "start": "2623270",
    "end": "2629690"
  },
  {
    "text": "monitoring metrics and logging split out tiers of our application are split our",
    "start": "2629690",
    "end": "2635990"
  },
  {
    "text": "application down using micro services in SOA we use auto scaling when we're ready",
    "start": "2635990",
    "end": "2641270"
  },
  {
    "text": "for it once you get started with this and it becomes familiar to you you may start incorporating that into",
    "start": "2641270",
    "end": "2646339"
  },
  {
    "text": "application much earlier on don't reinvent the wheel and this is going to",
    "start": "2646339",
    "end": "2653119"
  },
  {
    "text": "enable us to scale up and look at going beyond 10 million users",
    "start": "2653119",
    "end": "2658819"
  },
  {
    "text": "and really to infinity so if we want to",
    "start": "2658819",
    "end": "2663979"
  },
  {
    "text": "go beyond 10 million users this is really a high value problem with this stage and those of you had your hands up",
    "start": "2663979",
    "end": "2670130"
  },
  {
    "text": "earlier would know that you're going to have resources at your disposal to help you deal with this so this is where you",
    "start": "2670130",
    "end": "2677179"
  },
  {
    "text": "have the opportunity to look at more fine-tuning of your application looking more into SOA micro-services going from",
    "start": "2677179",
    "end": "2685519"
  },
  {
    "text": "multi a-z to multi region and you can use that automation to deploy your",
    "start": "2685519",
    "end": "2690769"
  },
  {
    "text": "application automatically in different regions around the world and put it closer to your own users and you could",
    "start": "2690769",
    "end": "2697880"
  },
  {
    "text": "also look at custom solutions at this stage based on what your application behavior is you're going to be able to",
    "start": "2697880",
    "end": "2706130"
  },
  {
    "text": "deep analysis of your entire stack you may look at containers and serval us even more so what's the next steps",
    "start": "2706130",
    "end": "2716989"
  },
  {
    "text": "well now it's over to you to put in practice what I've talked about today there's lots of documentation for you to",
    "start": "2716989",
    "end": "2723829"
  },
  {
    "text": "read terms of architecture there's solutions that we've pre-built and available to you either to use as a",
    "start": "2723829",
    "end": "2730069"
  },
  {
    "text": "reference or a starting point and we have quick starts to help you use many of these technologies there's also a",
    "start": "2730069",
    "end": "2736219"
  },
  {
    "text": "free tier if you're not using a TBS today you can take advantage of that to try out much of this without having to",
    "start": "2736219",
    "end": "2742369"
  },
  {
    "text": "actually what are not having to pay for it now keep in mind you're not alone we",
    "start": "2742369",
    "end": "2749719"
  },
  {
    "start": "2747000",
    "end": "2747000"
  },
  {
    "text": "have forums you can also subscribe to premium support and invite AWS support",
    "start": "2749719",
    "end": "2756259"
  },
  {
    "text": "engineers to be part of your team AWS support is very different to much most",
    "start": "2756259",
    "end": "2761749"
  },
  {
    "text": "support you're probably used to having in that you can actually tap into that to ask questions about how should I do",
    "start": "2761749",
    "end": "2767900"
  },
  {
    "text": "something or is this the right way to go about it not just it's broken how do I fix it you'd have account manager",
    "start": "2767900",
    "end": "2776119"
  },
  {
    "text": "potentially to help you and a Solutions Architect like myself so due to the pace",
    "start": "2776119",
    "end": "2784729"
  },
  {
    "text": "of innovation and scaling on AWS is really an evolving story so no matter",
    "start": "2784729",
    "end": "2791419"
  },
  {
    "text": "where you are on that journey today we'd like to help you scale up to your first 10 million users thank you",
    "start": "2791419",
    "end": "2797780"
  },
  {
    "text": "[Applause]",
    "start": "2797780",
    "end": "2801579"
  }
]