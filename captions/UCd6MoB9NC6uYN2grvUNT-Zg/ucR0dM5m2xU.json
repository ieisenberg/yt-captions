[
  {
    "text": "- Welcome to 'Back to Basics'.",
    "start": "6180",
    "end": "8099"
  },
  {
    "text": "In this episode,",
    "start": "8100",
    "end": "9600"
  },
  {
    "text": "I will walk you through",
    "start": "9600",
    "end": "10500"
  },
  {
    "text": "how to maintain data consistency",
    "start": "10500",
    "end": "12809"
  },
  {
    "text": "in a microservice architecture.",
    "start": "12810",
    "end": "15300"
  },
  {
    "text": "We'll take a closer look",
    "start": "15300",
    "end": "16530"
  },
  {
    "text": "at implementing the Saga pattern",
    "start": "16530",
    "end": "18600"
  },
  {
    "text": "using AWS Step Functions.",
    "start": "18600",
    "end": "21210"
  },
  {
    "text": "Previously, I led a team",
    "start": "21210",
    "end": "23189"
  },
  {
    "text": "in re-architecting a\nmonolithic application",
    "start": "23190",
    "end": "25860"
  },
  {
    "text": "using a microservices approach.",
    "start": "25860",
    "end": "28290"
  },
  {
    "text": "In this instance, we\nseparated the application",
    "start": "28290",
    "end": "31470"
  },
  {
    "text": "into smaller independent services",
    "start": "31470",
    "end": "33809"
  },
  {
    "text": "with each microservice able to define",
    "start": "33810",
    "end": "36090"
  },
  {
    "text": "its own data persistent flare.",
    "start": "36090",
    "end": "38820"
  },
  {
    "text": "This approach allowed\nus to build decoupled",
    "start": "38820",
    "end": "41489"
  },
  {
    "text": "and independent services\nthat can be developed,",
    "start": "41490",
    "end": "44610"
  },
  {
    "text": "deployed, and scaled independently.",
    "start": "44610",
    "end": "47430"
  },
  {
    "text": "This increased our scalability,\nreliability, agility,",
    "start": "47430",
    "end": "51570"
  },
  {
    "text": "and ability to deploy features faster.",
    "start": "51570",
    "end": "54989"
  },
  {
    "text": "This distributed microservices\narchitecture allowed",
    "start": "54990",
    "end": "59160"
  },
  {
    "text": "some business transactions to\nspan multiple web services.",
    "start": "59160",
    "end": "63960"
  },
  {
    "text": "Most of the time they worked as intended",
    "start": "63960",
    "end": "66810"
  },
  {
    "text": "but just like Werner Vogels famously said,",
    "start": "66810",
    "end": "69996"
  },
  {
    "text": "\"Everything fails all the time.\"",
    "start": "69997",
    "end": "72420"
  },
  {
    "text": "These transactions would periodically fail",
    "start": "72420",
    "end": "75240"
  },
  {
    "text": "and we would be left with\npartial transactions.",
    "start": "75240",
    "end": "78240"
  },
  {
    "text": "These failures can happen in any step",
    "start": "78240",
    "end": "81180"
  },
  {
    "text": "within a transaction and\ncause data inconsistencies.",
    "start": "81180",
    "end": "85200"
  },
  {
    "text": "With the data in different databases",
    "start": "85200",
    "end": "87479"
  },
  {
    "text": "it is not easy for you\nto roll back changes.",
    "start": "87480",
    "end": "90330"
  },
  {
    "text": "It is more apparent when\nmicroservices are owned",
    "start": "90330",
    "end": "93060"
  },
  {
    "text": "and maintained by different\nteams that might not be aware",
    "start": "93060",
    "end": "96270"
  },
  {
    "text": "of other affected services.",
    "start": "96270",
    "end": "98189"
  },
  {
    "text": "One anti-pattern we did in\nthe beginning was rolling",
    "start": "98190",
    "end": "101700"
  },
  {
    "text": "back the work inside the same\nmicroservice that failed.",
    "start": "101700",
    "end": "105119"
  },
  {
    "text": "This went against microservices\nbeing loosely coupled.",
    "start": "105120",
    "end": "108930"
  },
  {
    "text": "Adding re-tries is a good idea,",
    "start": "108930",
    "end": "111510"
  },
  {
    "text": "but in some cases you may\nor may not want to re-try",
    "start": "111510",
    "end": "114540"
  },
  {
    "text": "and instead fail fast.",
    "start": "114540",
    "end": "116730"
  },
  {
    "text": "This allows the user to\nget immediate feedback",
    "start": "116730",
    "end": "119370"
  },
  {
    "text": "than waiting for a long while.",
    "start": "119370",
    "end": "121800"
  },
  {
    "text": "So how can you effectively handle failure",
    "start": "121800",
    "end": "124920"
  },
  {
    "text": "in a distributed microservice transaction",
    "start": "124920",
    "end": "127590"
  },
  {
    "text": "and maintain data consistency?",
    "start": "127590",
    "end": "129869"
  },
  {
    "text": "That is where the saga pattern can help.",
    "start": "129870",
    "end": "132599"
  },
  {
    "text": "A saga is defined as a\nsequence of local transactions",
    "start": "132600",
    "end": "136530"
  },
  {
    "text": "with each local transaction\ndoing some work like",
    "start": "136530",
    "end": "139500"
  },
  {
    "text": "updating the database,\npublishing a message,",
    "start": "139500",
    "end": "142800"
  },
  {
    "text": "or an event to trigger the\nnext local transaction.",
    "start": "142800",
    "end": "146100"
  },
  {
    "text": "Here's an example of a\ndistributed business transaction",
    "start": "146100",
    "end": "149940"
  },
  {
    "text": "in a previous project I worked on.",
    "start": "149940",
    "end": "152940"
  },
  {
    "text": "This workflow runs\nthrough a series of steps",
    "start": "152940",
    "end": "155700"
  },
  {
    "text": "to book a flight and rent a car.",
    "start": "155700",
    "end": "158610"
  },
  {
    "text": "Here you see an AWS sStep Function",
    "start": "158610",
    "end": "161340"
  },
  {
    "text": "with a series of Lambda\nfunctions doing work.",
    "start": "161340",
    "end": "164730"
  },
  {
    "text": "The steps are straightforward",
    "start": "164730",
    "end": "166860"
  },
  {
    "text": "with reserving a flight and\na rental, paying for both,",
    "start": "166860",
    "end": "171150"
  },
  {
    "text": "and then confirming the flight and rental.",
    "start": "171150",
    "end": "174269"
  },
  {
    "text": "In most cases, the whole\ntransaction runs successfully",
    "start": "174270",
    "end": "178650"
  },
  {
    "text": "and the user is able to book",
    "start": "178650",
    "end": "180060"
  },
  {
    "text": "for a flight and a rental together.",
    "start": "180060",
    "end": "183060"
  },
  {
    "text": "Sometimes a failure happens",
    "start": "183060",
    "end": "185010"
  },
  {
    "text": "and it doesn't completely go through.",
    "start": "185010",
    "end": "186993"
  },
  {
    "text": "In this case, you end up with paying",
    "start": "187830",
    "end": "190170"
  },
  {
    "text": "for both the flight and\nrental, but we're only",
    "start": "190170",
    "end": "192959"
  },
  {
    "text": "able to confirm the\nflight and not the rental.",
    "start": "192960",
    "end": "196380"
  },
  {
    "text": "The saga pattern mentions that",
    "start": "196380",
    "end": "198480"
  },
  {
    "text": "in the case of a failure,",
    "start": "198480",
    "end": "200310"
  },
  {
    "text": "a set of compensating transactions",
    "start": "200310",
    "end": "202800"
  },
  {
    "text": "can be executed to undo\nthe changes that made",
    "start": "202800",
    "end": "205530"
  },
  {
    "text": "by the preceding local transactions.",
    "start": "205530",
    "end": "208410"
  },
  {
    "text": "Instead of having them\ndo on the same function",
    "start": "208410",
    "end": "211710"
  },
  {
    "text": "you can implement an equivalent",
    "start": "211710",
    "end": "213180"
  },
  {
    "text": "and new step to roll back the changes.",
    "start": "213180",
    "end": "216120"
  },
  {
    "text": "So if any of the steps in the\ndistributed transaction fail",
    "start": "216120",
    "end": "221120"
  },
  {
    "text": "you can revert it back through\ncompensating transactions.",
    "start": "221310",
    "end": "225060"
  },
  {
    "text": "Say it fails while processing a payment.",
    "start": "225060",
    "end": "228150"
  },
  {
    "text": "Decompensating transactions\nwould execute to",
    "start": "228150",
    "end": "231060"
  },
  {
    "text": "refund the payment, cancel\nthe rental reservation,",
    "start": "231060",
    "end": "234930"
  },
  {
    "text": "and cancel the flight reservation.",
    "start": "234930",
    "end": "237092"
  },
  {
    "text": "Ultimately, the saga\npattern guarantees success",
    "start": "238170",
    "end": "241470"
  },
  {
    "text": "for all the steps or\ncompensating transactions are run",
    "start": "241470",
    "end": "245790"
  },
  {
    "text": "to amend a partial execution.",
    "start": "245790",
    "end": "248400"
  },
  {
    "text": "The saga pattern is a way to manage",
    "start": "248400",
    "end": "250860"
  },
  {
    "text": "and mitigate transaction failures.",
    "start": "250860",
    "end": "253470"
  },
  {
    "text": "This helps you ensure consistency in your",
    "start": "253470",
    "end": "255780"
  },
  {
    "text": "distributed applications that\nspan multiple microservices.",
    "start": "255780",
    "end": "260780"
  },
  {
    "text": "This helps your microservices\nstay loosely coupled,",
    "start": "261070",
    "end": "264120"
  },
  {
    "text": "isolated, and independent of one another.",
    "start": "264120",
    "end": "267330"
  },
  {
    "text": "It's essential to maintain\ndata consistency and design",
    "start": "267330",
    "end": "270629"
  },
  {
    "text": "for failure in your distributed\nmicroservice architectures.",
    "start": "270630",
    "end": "274920"
  },
  {
    "text": "Understanding how to\ndesign your transactions",
    "start": "274920",
    "end": "277410"
  },
  {
    "text": "so you can avoid partial transactions",
    "start": "277410",
    "end": "279840"
  },
  {
    "text": "while keeping your microservices\nintact is important",
    "start": "279840",
    "end": "282990"
  },
  {
    "text": "to avoiding the pitfalls\nand complexity over time.",
    "start": "282990",
    "end": "286860"
  },
  {
    "text": "To learn more about the saga pattern",
    "start": "286860",
    "end": "288960"
  },
  {
    "text": "check out the links\nbelow from more details.",
    "start": "288960",
    "end": "291660"
  },
  {
    "text": "Thank you for watching 'Back to Basics'.",
    "start": "291660",
    "end": "293640"
  },
  {
    "text": "See you next time.",
    "start": "293640",
    "end": "295140"
  }
]