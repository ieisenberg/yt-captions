[
  {
    "text": "hello everyone welcome to reinvent my name is Chandra Maurice I'm a senior",
    "start": "30",
    "end": "6180"
  },
  {
    "text": "engineering manager with AWS joining me in this presentation it's Josh Eichorn",
    "start": "6180",
    "end": "11730"
  },
  {
    "text": "he is the CTO of page Li so we are here today to talk about Arora serverless",
    "start": "11730",
    "end": "16740"
  },
  {
    "text": "thank you for joining me so before we get into aurorus herbalists",
    "start": "16740",
    "end": "21810"
  },
  {
    "text": "I wanted to call your attention to a few related breakout sessions that you may want to attend if you want to look at",
    "start": "21810",
    "end": "27180"
  },
  {
    "text": "Arora more broadly outside of the scope of server lists so on Tuesday tomorrow",
    "start": "27180",
    "end": "32430"
  },
  {
    "text": "we have what's new in Amazon Arora 1 p.m. here in the Venetian we also have",
    "start": "32430",
    "end": "38520"
  },
  {
    "text": "at 6:15 p.m. deep dive on Amazon or Ora with my sequel compatibility you may",
    "start": "38520",
    "end": "44190"
  },
  {
    "text": "want to check that one out as well and then on Thursday we have Amazon Aurora storage demystified also here in the",
    "start": "44190",
    "end": "51449"
  },
  {
    "text": "Venetian so please check these out if you're available I think you'll find them very interesting now let's start by",
    "start": "51449",
    "end": "57780"
  },
  {
    "text": "taking a look at what we're going to be covering today in this presentation about Amazon Aurora serverless we're",
    "start": "57780",
    "end": "63809"
  },
  {
    "text": "gonna start briefly by catching everybody up on our dias and Aurora fundamentals then we're going to talk",
    "start": "63809",
    "end": "69659"
  },
  {
    "text": "about Aurora serverless what is it how does it work we're gonna get closer",
    "start": "69659",
    "end": "76110"
  },
  {
    "text": "to the end talking about what's new and Amazon Aurora server lists I'm gonna be talking about some features that we've just recently launched that I think",
    "start": "76110",
    "end": "82920"
  },
  {
    "text": "you're gonna find really useful and then I'm gonna hand it over to Josh who's going to talk about the way that they",
    "start": "82920",
    "end": "89009"
  },
  {
    "text": "use Aurora server lists at Paige Lee so with that let's take a quick look at",
    "start": "89009",
    "end": "95130"
  },
  {
    "text": "what is RDS so Rd S stands for relational database services we offer a",
    "start": "95130",
    "end": "100470"
  },
  {
    "text": "platform that provides management around a whole variety of relational database engines including Amazon Aurora which is",
    "start": "100470",
    "end": "107040"
  },
  {
    "text": "our homegrown cloud native relational database engine but we also do of course support my sequel Maria DB in Postgres",
    "start": "107040",
    "end": "115020"
  },
  {
    "text": "the open source engines and we do of course support sequel server and oracle the commercial database engines now as",
    "start": "115020",
    "end": "121950"
  },
  {
    "text": "part of RDS you get all of these capabilities out of the box without having to do any extra work for them so",
    "start": "121950",
    "end": "128610"
  },
  {
    "text": "let's jump - well what is Amazon Aurora before we get to talking about Aurora surrealists so like I mentioned Amazon Aurora is our",
    "start": "128610",
    "end": "135690"
  },
  {
    "text": "homegrown cloud native relational database engine we made it generally available back in",
    "start": "135690",
    "end": "141780"
  },
  {
    "text": "2015 and we've been really excited by the adoption for it now Amazon Aurora gives you the speed and the availability",
    "start": "141780",
    "end": "148440"
  },
  {
    "text": "of high-end commercial database engines many of you have tried to use it and you've found that with traditional",
    "start": "148440",
    "end": "154560"
  },
  {
    "text": "databases you don't get the kind of availability and performance that you might want Aurora does give you that capability the same way a commercial",
    "start": "154560",
    "end": "161640"
  },
  {
    "text": "database engine might give you but it gives you that with the simplicity and cost-effectiveness of an open source",
    "start": "161640",
    "end": "167550"
  },
  {
    "text": "database engine it is fully drop-in compatible with my sequel and Postgres so you can migrate in and out without",
    "start": "167550",
    "end": "173790"
  },
  {
    "text": "having to change occasion and it's simple pay-as-you-go pricing so there's no vendor lock-in there's no licensing",
    "start": "173790",
    "end": "179640"
  },
  {
    "text": "involved we're in your business every hour of every day this is delivered as part of RDS as a",
    "start": "179640",
    "end": "185730"
  },
  {
    "text": "fully managed service now let's take a quick look at what is the architecture",
    "start": "185730",
    "end": "190830"
  },
  {
    "text": "of Amazon Aurora so the key innovation to Amazon Aurora is our purpose-built",
    "start": "190830",
    "end": "195930"
  },
  {
    "text": "log structured distributed storage layer where what we've done is we've taken the whole storage layer of a relational",
    "start": "195930",
    "end": "201420"
  },
  {
    "text": "database and pulled it out into a multi-tenant process by giving you a highly elastic data volume what we do",
    "start": "201420",
    "end": "208080"
  },
  {
    "text": "behind the scenes as we break down your data into ten gigabyte chunks and we store six copies of it to per",
    "start": "208080",
    "end": "213239"
  },
  {
    "text": "availability zone what that gives you is the ability to survive an entire azy outage without any service disruption",
    "start": "213239",
    "end": "220290"
  },
  {
    "text": "without any performance degradation and without any data loss now the nice thing",
    "start": "220290",
    "end": "226049"
  },
  {
    "text": "you can do about this is you can create your master database and you can also create up to 15 replicas that are both",
    "start": "226049",
    "end": "233190"
  },
  {
    "text": "useful in terms of serving your read traffic but they can also act as failover targets because they're",
    "start": "233190",
    "end": "238440"
  },
  {
    "text": "attached to the same storage volume so you can failover without any data loss but now let's get to talking about what",
    "start": "238440",
    "end": "245010"
  },
  {
    "text": "do we need server lists for in the context of Aurora well one restriction you still have with",
    "start": "245010",
    "end": "251340"
  },
  {
    "text": "Aurora provisioned is that you need to provision your database server you need to decide on what size server do you",
    "start": "251340",
    "end": "256919"
  },
  {
    "text": "want to operate on up front now the industry standard thing to do is to peak for your provision workload a lot of the",
    "start": "256919",
    "end": "263910"
  },
  {
    "text": "time this works sometimes it doesn't work so well for cost efficiency standpoint so one thing",
    "start": "263910",
    "end": "269610"
  },
  {
    "text": "we find our customers often doing is they'll continuously monitor and manually scale up and down their database server as their workload",
    "start": "269610",
    "end": "276360"
  },
  {
    "text": "fluctuates so this is where we get to Aurora serverless so in order to solve",
    "start": "276360",
    "end": "284880"
  },
  {
    "text": "this problem we started by looking at offering a solution where you don't have to monitor your database server anymore",
    "start": "284880",
    "end": "291780"
  },
  {
    "text": "you can simply run your workload and it will automatically adapt to your workload as things change so Aurora",
    "start": "291780",
    "end": "298020"
  },
  {
    "text": "server lists will automatically scale up and down based on the capacity that your workload consumes and you don't have to",
    "start": "298020",
    "end": "303450"
  },
  {
    "text": "think about it when your database becomes idle will automatically shut down your database server when your",
    "start": "303450",
    "end": "308790"
  },
  {
    "text": "workload resumes will automatically spin it back up so this is the core to what we're going to be talking about today",
    "start": "308790",
    "end": "314810"
  },
  {
    "text": "now Aurora server lists we announced it last year reinvent and we made it",
    "start": "314810",
    "end": "319919"
  },
  {
    "text": "generally available this past August three months ago so to really make the",
    "start": "319919",
    "end": "325560"
  },
  {
    "text": "case a little stronger here we took a bunch of workloads from our production fleet here's one example where we saw",
    "start": "325560",
    "end": "331350"
  },
  {
    "text": "this dev test workload now we're looking at right volume right I ups there's a",
    "start": "331350",
    "end": "336870"
  },
  {
    "text": "lot of other metrics you could look at but what was immediately obvious to us is if you were to draw this fake line across this graph and say well this is",
    "start": "336870",
    "end": "343710"
  },
  {
    "text": "what your provisioned for what you would quickly notice is that for the vast majority of the time you have resources",
    "start": "343710",
    "end": "349200"
  },
  {
    "text": "provision that you're never actually using so this is where we started in terms of inspiring us to go build Aurora",
    "start": "349200",
    "end": "355530"
  },
  {
    "text": "server list now let's look at a couple of other sample workloads before we move",
    "start": "355530",
    "end": "360660"
  },
  {
    "text": "on this is an even more typical dev test we see a lot of these in our production fleet today where our customers",
    "start": "360660",
    "end": "366120"
  },
  {
    "text": "provision for their peak workload even for dev test instances but they never actually use it so this creates a huge",
    "start": "366120",
    "end": "373140"
  },
  {
    "text": "opportunity for cost savings now let's",
    "start": "373140",
    "end": "378450"
  },
  {
    "text": "look at some production workloads that we see this is a sample spiky gaming",
    "start": "378450",
    "end": "383700"
  },
  {
    "text": "workload where you have your daily peak coming and going and even in this production workload if we were to draw a",
    "start": "383700",
    "end": "389160"
  },
  {
    "text": "line in terms of what you would provision for you would quickly find that you're paying for a lot more than you're actually using for the majority",
    "start": "389160",
    "end": "395370"
  },
  {
    "text": "of the time and here's zoomed in an e-commerce production workload I promise this is the last one",
    "start": "395370",
    "end": "400680"
  },
  {
    "text": "but it's really the same story so in terms of provisioning your database",
    "start": "400680",
    "end": "406740"
  },
  {
    "text": "cluster you have a few choices to make you can provision for peak and this is sort of the industry standard this is",
    "start": "406740",
    "end": "412020"
  },
  {
    "text": "what you typically do for any production workload that you actually care about or you can under provision now this is",
    "start": "412020",
    "end": "417720"
  },
  {
    "text": "probably not what you for a mission-critical workload because you're gonna have end-user customer impact if",
    "start": "417720",
    "end": "423389"
  },
  {
    "text": "your database server isn't large enough to handle your workload or like I said earlier you can continuously monitor and",
    "start": "423389",
    "end": "429630"
  },
  {
    "text": "scale up and down but this creates risk to your business because every time you do scale up and down there's the",
    "start": "429630",
    "end": "435300"
  },
  {
    "text": "potential for downtime there's a lot of expertise involved there's the risk of data loss and I'm gonna be getting into",
    "start": "435300",
    "end": "440820"
  },
  {
    "text": "the details of what that looks like and then talking about how Amazon Arora serverless solves that so in terms of",
    "start": "440820",
    "end": "448979"
  },
  {
    "text": "database management let's pretend you're gonna go and manually monitor your database fleet and continuously scale it",
    "start": "448979",
    "end": "455220"
  },
  {
    "text": "up and down you might have an architecture that looks a little bit like this you're probably going to have more than one application server but",
    "start": "455220",
    "end": "461070"
  },
  {
    "text": "we'll just have one for the sake of simplicity so a typical scaling operation is going to look like going ahead and",
    "start": "461070",
    "end": "467190"
  },
  {
    "text": "provisioning a larger replication we've quoted a scale target now this is easy",
    "start": "467190",
    "end": "472470"
  },
  {
    "text": "with Amazon Arora because you don't need to worry about replication that's all done for you down at the storage layer but for a traditional database you",
    "start": "472470",
    "end": "479190"
  },
  {
    "text": "actually would have to do that yourself now you're going to go ahead and cut over okay now you've failed over to the",
    "start": "479190",
    "end": "485849"
  },
  {
    "text": "new master now you're running on a larger box but the problem you're gonna run into is that cutting over from your",
    "start": "485849",
    "end": "491099"
  },
  {
    "text": "smaller database server to your larger one can often involve downtime and even after you've done the cut over operation",
    "start": "491099",
    "end": "497370"
  },
  {
    "text": "your performance is going to be compromised for some period of time because now you need to warm up your buffer pool load up your caches and do a",
    "start": "497370",
    "end": "504210"
  },
  {
    "text": "lot of things to get back to the same performance level you were at before now what we see a lot of customers doing to",
    "start": "504210",
    "end": "510479"
  },
  {
    "text": "reduce this problem is they'll add a proxy layer in the middle that basically makes the workload cut over a lot more",
    "start": "510479",
    "end": "516390"
  },
  {
    "text": "seamless so that application servers don't have to worry about rerouting their traffic so a cut over will look a",
    "start": "516390",
    "end": "522328"
  },
  {
    "text": "little bit something like this and as you notice the application server has not had to redirect anything but there's",
    "start": "522329",
    "end": "528180"
  },
  {
    "text": "a couple problems you're still left with having to solve one of them is now you've introduced a new single point of",
    "start": "528180",
    "end": "533820"
  },
  {
    "text": "to your service so yes you can have a multi multiple proxy servers there's a lot of things you can do but it really",
    "start": "533820",
    "end": "540060"
  },
  {
    "text": "adds to the complexity of your operation the proxy solution also doesn't solve for you this problem that after cut over",
    "start": "540060",
    "end": "546720"
  },
  {
    "text": "there's some period of time when your performance is compromised because you are starting from a cold buffer pool so",
    "start": "546720",
    "end": "553740"
  },
  {
    "text": "let's talk about Aurora server lists and how it solves some of these problems as I mentioned earlier Aurora server list",
    "start": "553740",
    "end": "559650"
  },
  {
    "text": "was designed to automatically respond to your application workload it will scale you up and down without any downtime",
    "start": "559650",
    "end": "565820"
  },
  {
    "text": "what we have is a multi-tenant proxy layer that we've added to make sure that",
    "start": "565820",
    "end": "570930"
  },
  {
    "text": "there's no single point of failure introduced you don't have to manage it this is all done for you and finally the scale target has a warm",
    "start": "570930",
    "end": "578280"
  },
  {
    "text": "buffer pool which means your performance does not degrade after cutting over you continue running at least as fast but",
    "start": "578280",
    "end": "584670"
  },
  {
    "text": "probably faster because you're now running on a larger box immediately after cut over and finally when Aurora",
    "start": "584670",
    "end": "590640"
  },
  {
    "text": "server list is not in use the database will just go to sleep so this is really ideal for devtest workloads you can also",
    "start": "590640",
    "end": "596550"
  },
  {
    "text": "use it for your heavier workloads where your traffic is highly variable now when",
    "start": "596550",
    "end": "603480"
  },
  {
    "text": "we announced Aurora server list last year we got a very strong positive reaction from our customers this is one",
    "start": "603480",
    "end": "608730"
  },
  {
    "text": "that I was really happy to share our friends over at Netflix just to use a reference to one of my favorite shows",
    "start": "608730",
    "end": "614370"
  },
  {
    "text": "stranger things check it out if you haven't already so we got a very positive response when we announced",
    "start": "614370",
    "end": "620010"
  },
  {
    "text": "Aurora server lists a lot of customers like you were really excited about it now what I want to get into next is how",
    "start": "620010",
    "end": "627090"
  },
  {
    "text": "does it actually work behind the scenes how does it solve these problems that I've described so what we start out with",
    "start": "627090",
    "end": "634920"
  },
  {
    "text": "is something that looks a little bit similar to what I showed before you've got your application server fleet you've got your database but the first thing we",
    "start": "634920",
    "end": "641910"
  },
  {
    "text": "did was we added this multi-tenant proxy layer where we have thousands of proxy servers that load-balanced horizontally",
    "start": "641910",
    "end": "648300"
  },
  {
    "text": "without introducing any single point of failure the next thing we did was we added a warm pool of database servers so",
    "start": "648300",
    "end": "654990"
  },
  {
    "text": "that when we decide to make a scaling operation we can swap hosts in and out very very quickly",
    "start": "654990",
    "end": "661700"
  },
  {
    "text": "we also added a monitoring service that is going and checking the entire fleet",
    "start": "662149",
    "end": "667170"
  },
  {
    "text": "looking at how are the different database servers performing as anybody starting to exhaust their capacity might",
    "start": "667170",
    "end": "673559"
  },
  {
    "text": "we need to start thinking about scaling them up or down and so when you connect",
    "start": "673559",
    "end": "679019"
  },
  {
    "text": "to your Ora serverless database you're connecting through a proxy layer now I did mention earlier that you can connect",
    "start": "679019",
    "end": "684329"
  },
  {
    "text": "to any one of the multi-tenant proxies and this is not something that you need to worry about because this is handled by a network layer load balancer that",
    "start": "684329",
    "end": "691550"
  },
  {
    "text": "you don't even need to think about you connect to it as though you would any other database now you can distribute",
    "start": "691550",
    "end": "699509"
  },
  {
    "text": "your workload across multiple proxy servers and you don't need to think about it like I mentioned so we have not introduced any single point of failure",
    "start": "699509",
    "end": "707240"
  },
  {
    "text": "now what we look for in terms of making scaling decisions is the monitoring service is sitting there looking out for",
    "start": "707240",
    "end": "713009"
  },
  {
    "text": "any database server that has more than 70% of its CPU capacity utilized or more",
    "start": "713009",
    "end": "718649"
  },
  {
    "text": "than 90% of its maximum connections have been consumed and if it finds a database server living in the state for more than",
    "start": "718649",
    "end": "725459"
  },
  {
    "text": "five minutes it'll go ahead and decide to scale up or down now what you get",
    "start": "725459",
    "end": "731100"
  },
  {
    "text": "with this is you grab a fresh database server out of the warm pool so scaling",
    "start": "731100",
    "end": "736259"
  },
  {
    "text": "operations can be executed very very quickly without having to wait to provision a new server we're able to",
    "start": "736259",
    "end": "742470"
  },
  {
    "text": "transfer the buffer pool to the new cut over target so you don't have to worry about that and you get fast performance",
    "start": "742470",
    "end": "747899"
  },
  {
    "text": "immediately after cut over and finally we look for what we call a safe scale",
    "start": "747899",
    "end": "755009"
  },
  {
    "text": "point which basically means we look for a point where your production workload is up and running but there's no single long mutating transaction that we can't",
    "start": "755009",
    "end": "762389"
  },
  {
    "text": "easily transfer over to the new box so you don't have to disrupt any of your in-flight transactions when you do the",
    "start": "762389",
    "end": "768089"
  },
  {
    "text": "cut over we find the safest point for you to scale so that your application doesn't feel any downtime now when we do",
    "start": "768089",
    "end": "776999"
  },
  {
    "text": "one of these cut aware operations what we're going to do is momentarily freeze your application workload now this",
    "start": "776999",
    "end": "782069"
  },
  {
    "text": "doesn't drop connections it just basically parks all the transactions at the proxy layer and during that brief",
    "start": "782069",
    "end": "787350"
  },
  {
    "text": "period we're going to take all of the transactions that are in flight we're going to take all of the sessions and we're going to move them over to the new",
    "start": "787350",
    "end": "792600"
  },
  {
    "text": "scale scale-up target what this means is that when we resume your workload it looks as",
    "start": "792600",
    "end": "798190"
  },
  {
    "text": "though nothing happened all your application experienced was a very brief spike in latency and because we have the",
    "start": "798190",
    "end": "805750"
  },
  {
    "text": "warm buffer pool as I mentioned before you're not going to see any performance degradation following this cut over now",
    "start": "805750",
    "end": "812680"
  },
  {
    "text": "when the workload becomes idle when your application stops sending traffic to your database server we're going to go",
    "start": "812680",
    "end": "817690"
  },
  {
    "text": "ahead and shut down the database and save you a little bit of money when your workload comes back we're gonna spin up",
    "start": "817690",
    "end": "824140"
  },
  {
    "text": "the database we're gonna take a server out of the warm pool and keep running as if nothing happened",
    "start": "824140",
    "end": "830370"
  },
  {
    "text": "now as I mentioned earlier the proxy layer is designed in such a way that we",
    "start": "831570",
    "end": "836800"
  },
  {
    "text": "have not introduced any single failure we can horizontally distribute your connections across the proxy fleet and",
    "start": "836800",
    "end": "842530"
  },
  {
    "text": "you don't need to worry about introducing anything that's going to take your workload offline should a",
    "start": "842530",
    "end": "847930"
  },
  {
    "text": "single server fail now let's take a look at what this actually looks like in",
    "start": "847930",
    "end": "853300"
  },
  {
    "text": "practice having gone through all this it sounds great doesn't it I want to take a look at some graphs this is an actual",
    "start": "853300",
    "end": "859690"
  },
  {
    "text": "workload that we created we ran it against a server list database what we're seeing here is transactions per",
    "start": "859690",
    "end": "866110"
  },
  {
    "text": "second over time so we're basically going for throughput now this is looking down at the one-second granularity so",
    "start": "866110",
    "end": "871390"
  },
  {
    "text": "you can really get a feel for what this actually looks like as an application server so we go ahead and start running",
    "start": "871390",
    "end": "877000"
  },
  {
    "text": "our synthetic workload and we basically push the box to its maximum capacity and what we see over time is these drops in",
    "start": "877000",
    "end": "884590"
  },
  {
    "text": "transactions per second when we're performing the scale operation and then when it comes back it's up and running at the next level now let's see if our",
    "start": "884590",
    "end": "893500"
  },
  {
    "text": "nifty animation okay it's thinking about it there we go",
    "start": "893500",
    "end": "902070"
  },
  {
    "text": "what we have here is overlaid our transactions per second with the actual capacity that's been provisioned behind",
    "start": "902070",
    "end": "908260"
  },
  {
    "text": "the scenes so you can see how the Aurora server list database is reacting to the synthetic workload that we've created",
    "start": "908260",
    "end": "913900"
  },
  {
    "text": "you can really see the capacity that's being added and each time the scale operation happens you see this momentary",
    "start": "913900",
    "end": "919840"
  },
  {
    "text": "drop in throughput but there are no connections dropped and so from your application standpoint there's a very",
    "start": "919840",
    "end": "925420"
  },
  {
    "text": "brief slow down but things get right back up and running and a small number of seconds now midway",
    "start": "925420",
    "end": "931540"
  },
  {
    "text": "through this we go ahead and slow down the applicant the synthetic workload and we can see Aurora serverless gradually",
    "start": "931540",
    "end": "937300"
  },
  {
    "text": "scaling its capacity back down then finally at the end we go ahead and shut the workload down and we can see the",
    "start": "937300",
    "end": "942970"
  },
  {
    "text": "Aurora serverless database going to sleep now here's a similar overlay where",
    "start": "942970",
    "end": "948880"
  },
  {
    "text": "I'm tracking latency instead of transactions per second so we can see that each time a scale operation happens",
    "start": "948880",
    "end": "954850"
  },
  {
    "text": "there is this very brief jump in latency corresponding to the increase or decrease in serverless database capacity",
    "start": "954850",
    "end": "961080"
  },
  {
    "text": "but it's really not very noticeable to your application because it lasts a very small number of seconds and as I keep",
    "start": "961080",
    "end": "966940"
  },
  {
    "text": "mentioning there are no connection drops and finally just to round out the",
    "start": "966940",
    "end": "972490"
  },
  {
    "text": "picture here what I'm showing you is throughput mapped against latency so we've got transactions per second we've",
    "start": "972490",
    "end": "978940"
  },
  {
    "text": "also got latency in terms of milliseconds and you can see how they correspond now we built all this",
    "start": "978940",
    "end": "987940"
  },
  {
    "text": "we made it generally available in August's and we've been really excited by the response so far but one thing",
    "start": "987940",
    "end": "994240"
  },
  {
    "text": "that our customers have said to us is that Aurora serverless is really just photo scaling for databases and that is actually true a",
    "start": "994240",
    "end": "1001530"
  },
  {
    "text": "lot of what we initially offered it certainly does give you automatic scaling capabilities and it does this in",
    "start": "1001530",
    "end": "1007920"
  },
  {
    "text": "a very seamless way one thing we had not necessarily done was make this really really simple and easy to integrate with",
    "start": "1007920",
    "end": "1014460"
  },
  {
    "text": "other AWS server server lists serverless technologies so that brings us to the",
    "start": "1014460",
    "end": "1021600"
  },
  {
    "text": "what's new of this presentation the first thing that I'm really happy to share with all of you is what we call",
    "start": "1021600",
    "end": "1027839"
  },
  {
    "text": "the RDS data API so what the RDS data API is going to allow you to do is",
    "start": "1027839",
    "end": "1033689"
  },
  {
    "text": "connect to your database without any dedicated JDBC or ODBC connection without any custom configured driver you",
    "start": "1033690",
    "end": "1040709"
  },
  {
    "text": "can actually ascend both queries and mutating operations to your database",
    "start": "1040709",
    "end": "1045990"
  },
  {
    "text": "through a simple web service API protocol now these are actually packaged",
    "start": "1045990",
    "end": "1051210"
  },
  {
    "text": "as HTTP requests you don't need to worry about connection pooling anymore and you can really access your database from",
    "start": "1051210",
    "end": "1057360"
  },
  {
    "text": "anywhere now now we've made it really really easy to access your database from AWS lambda",
    "start": "1057360",
    "end": "1063120"
  },
  {
    "text": "and AWS app sync and I'm gonna describe how that how that was made possible in just a moment you can also access your",
    "start": "1063120",
    "end": "1069870"
  },
  {
    "text": "database from the AWS software development kit or the command-line interface so that's the RDS data API",
    "start": "1069870",
    "end": "1079190"
  },
  {
    "text": "the next thing I'm really thrilled to share with you is the RDS console query editor so many of you have probably used",
    "start": "1079190",
    "end": "1085950"
  },
  {
    "text": "the RDS console before you're quite familiar with it well now you can actually run queries right in the console itself you don't",
    "start": "1085950",
    "end": "1092580"
  },
  {
    "text": "have to go and spin up a dedicated database client you don't have to create an ec2 server to connect to your",
    "start": "1092580",
    "end": "1097830"
  },
  {
    "text": "database anymore you can run your queries right from within the AWS console I'm also really happy to share",
    "start": "1097830",
    "end": "1106919"
  },
  {
    "text": "with you that we have as of last week opened up a preview to support all of the capabilities that I've described not",
    "start": "1106919",
    "end": "1113370"
  },
  {
    "text": "only with my sequel compatibility but also also with Postgres compatibility so I hope you'll go ahead and sign up for",
    "start": "1113370",
    "end": "1119009"
  },
  {
    "text": "the Aurora server list Postgres preview it's available today sorry for the long URL you can also web search it and",
    "start": "1119009",
    "end": "1125820"
  },
  {
    "text": "you'll find the same page we've recently added Aurora serverless support in many",
    "start": "1125820",
    "end": "1132240"
  },
  {
    "text": "many more regions I'm not going to read off the full list but we wanted to make this a truly globally available service",
    "start": "1132240",
    "end": "1137519"
  },
  {
    "text": "as of two weeks ago we made this all available and now what I want to do to",
    "start": "1137519",
    "end": "1143639"
  },
  {
    "text": "tie a lot of these pieces together is to run a little bit of a live demo for you and before I do that I'm gonna describe",
    "start": "1143639",
    "end": "1149340"
  },
  {
    "text": "what's going to happen here so this is going to require some audience participation I'm gonna take an audience",
    "start": "1149340",
    "end": "1155159"
  },
  {
    "text": "poll and see where is it where is everybody from and then I'm gonna show for you the results in the RDS console",
    "start": "1155159",
    "end": "1161669"
  },
  {
    "text": "query editor okay so the way this works is you're all going to take your phone",
    "start": "1161669",
    "end": "1166830"
  },
  {
    "text": "out and send a text message now I'll share with you the phone number in just a moment but you're gonna send a text message and in the body of the text",
    "start": "1166830",
    "end": "1173340"
  },
  {
    "text": "message all you need to do is specify the city that you're from don't worry about country or anything like that now",
    "start": "1173340",
    "end": "1179279"
  },
  {
    "text": "what's gonna happen is we have a lambda service that's going to pick up those text messages and it's gonna send them down into an Aurora serverless database",
    "start": "1179279",
    "end": "1185759"
  },
  {
    "text": "and then I'm gonna go ahead and load that database up and show you the results right in front of your eyes so",
    "start": "1185759",
    "end": "1191700"
  },
  {
    "text": "when you're ready go ahead and send the city that you're from to this number",
    "start": "1191700",
    "end": "1198020"
  },
  {
    "text": "now I'll just give it a moment where everybody sends their text message in",
    "start": "1208140",
    "end": "1213260"
  },
  {
    "text": "okay I hope you all got that now what I have here in front of you is the RTS",
    "start": "1222170",
    "end": "1228170"
  },
  {
    "text": "console oh I got some requests to switch back to the number happy to give it more time there's no rush",
    "start": "1228170",
    "end": "1236950"
  },
  {
    "text": "okay I hope that was enough time for everyone so I'm gonna go ahead and switch over this is the RTS console that",
    "start": "1246710",
    "end": "1253730"
  },
  {
    "text": "many of you are probably familiar with one of the things we've added is the query editor that I'm gonna show you right now so we can go to this query",
    "start": "1253730",
    "end": "1261050"
  },
  {
    "text": "editor it's going to have us choose the database that we want to query against",
    "start": "1261050",
    "end": "1267100"
  },
  {
    "text": "pardon me folks",
    "start": "1274110",
    "end": "1277010"
  },
  {
    "text": "there we go",
    "start": "1294490",
    "end": "1297360"
  },
  {
    "text": "got to choose the cluster there all",
    "start": "1300279",
    "end": "1307269"
  },
  {
    "text": "right now this is the table we're now logged into the database that is storing",
    "start": "1307269",
    "end": "1313210"
  },
  {
    "text": "the results from the text messages that you just sent let's go ahead and show tables see what we get sure enough",
    "start": "1313210",
    "end": "1323830"
  },
  {
    "text": "there's a table called cities so I'm gonna go and look what is in this table now contained in the table is basically",
    "start": "1323830",
    "end": "1329500"
  },
  {
    "text": "the aggregated results of what you will just sent me and by the way I'm going to show all it share all of this code with",
    "start": "1329500",
    "end": "1334690"
  },
  {
    "text": "all of you after the demo let's go ahead",
    "start": "1334690",
    "end": "1339879"
  },
  {
    "text": "and select city and count from cities",
    "start": "1339879",
    "end": "1348179"
  },
  {
    "text": "let me just fix this as count group by",
    "start": "1348179",
    "end": "1356549"
  },
  {
    "text": "it's hard to type when you've got a big audience",
    "start": "1356549",
    "end": "1360929"
  },
  {
    "text": "okay let's see if I typed it correctly there we go so we have a lot of people",
    "start": "1366070",
    "end": "1374410"
  },
  {
    "text": "from Seattle with us here today a pretty good group of us from Boston San Francisco Dallas Los Angeles Denver",
    "start": "1374410",
    "end": "1381060"
  },
  {
    "text": "now what I'm trying to showcase here is the fact that it's now really really simple to build these dynamic scalable",
    "start": "1381060",
    "end": "1387520"
  },
  {
    "text": "applications and then to access your database using Aurora serverless now",
    "start": "1387520",
    "end": "1393970"
  },
  {
    "text": "just to give you a quick sample of what this code looks like this is the kind of",
    "start": "1393970",
    "end": "1403480"
  },
  {
    "text": "code that you would write to access your Aurora serverless database from your lambda application we have shared the",
    "start": "1403480",
    "end": "1410140"
  },
  {
    "text": "complete code for this demo right here on this github link you're welcome to go and download it make it your own do",
    "start": "1410140",
    "end": "1416080"
  },
  {
    "text": "anything with it that you would like to do at this point in the presentation I'd",
    "start": "1416080",
    "end": "1422080"
  },
  {
    "text": "like to go ahead and hand it over to Josh he's going to be talking about how they're able to leverage Aurora",
    "start": "1422080",
    "end": "1427240"
  },
  {
    "text": "serverless and Paige Lee thank you",
    "start": "1427240",
    "end": "1431370"
  },
  {
    "text": "thank you so I'm Josh hi corn CTO at",
    "start": "1435919",
    "end": "1442860"
  },
  {
    "text": "Paige Lee and world managed WordPress hosting company hopefully you've all",
    "start": "1442860",
    "end": "1448019"
  },
  {
    "text": "heard of WordPress last time I looked it Powers 32% of the web and most of that",
    "start": "1448019",
    "end": "1457289"
  },
  {
    "text": "you might think of is it's just used as CMS our blogging platform what a huge number of those sites are also ecommerce",
    "start": "1457289",
    "end": "1463259"
  },
  {
    "text": "sites and fully custom applications so what page we brings to the picture is",
    "start": "1463259",
    "end": "1470450"
  },
  {
    "text": "everything you would need to run WordPress on Amazon at scale without",
    "start": "1470450",
    "end": "1475620"
  },
  {
    "text": "worrying about any of it and not only is that mean we're setting up the platform for you but we're the",
    "start": "1475620",
    "end": "1481200"
  },
  {
    "text": "DevOps engineers who get paged when something invalid goes wrong so you",
    "start": "1481200",
    "end": "1486600"
  },
  {
    "text": "think of us as bringing the peace of mind to running WordPress at scale so we've been in the WordPress market for",
    "start": "1486600",
    "end": "1494490"
  },
  {
    "text": "about a decade now and we've seen a change and grow and where we're focused",
    "start": "1494490",
    "end": "1500279"
  },
  {
    "text": "right now is really on the larger scale of the market enterprise customers people who are doing really interesting",
    "start": "1500279",
    "end": "1505919"
  },
  {
    "text": "things with WordPress but as we talk to our customers we find that our current offerings doesn't always meet their",
    "start": "1505919",
    "end": "1511799"
  },
  {
    "text": "needs because it's really focused around that high-touch white-glove service we",
    "start": "1511799",
    "end": "1517169"
  },
  {
    "text": "take care of everything and sometimes a customer just wants a platform to run things on and so that's why we're we've",
    "start": "1517169",
    "end": "1524909"
  },
  {
    "text": "been building a new product called north deck and so that takes the same service",
    "start": "1524909",
    "end": "1530639"
  },
  {
    "text": "application and concepts that you might get from lambda but instead of putting them at that infrastructure level being",
    "start": "1530639",
    "end": "1536250"
  },
  {
    "text": "able to run a full-blown application like WordPress on that platform so you",
    "start": "1536250",
    "end": "1541259"
  },
  {
    "text": "don't have to worry about any of the servers you get an auto scaling platform that is build in a metered way just like",
    "start": "1541259",
    "end": "1547769"
  },
  {
    "text": "any other Amazon product but you don't have to do all of the work to shoehorn an application that was written almost",
    "start": "1547769",
    "end": "1554129"
  },
  {
    "text": "20 years ago on to the platform now",
    "start": "1554129",
    "end": "1559009"
  },
  {
    "text": "besides just that platform we do have to change a little about how you work to make that work and so north stack also",
    "start": "1559309",
    "end": "1565980"
  },
  {
    "text": "introduces the workflow that's needed so gives concept of doing releases since the only",
    "start": "1565980",
    "end": "1573210"
  },
  {
    "text": "way to make those legacy applications work in a fully serviced way is to give up a little bit and how you work you",
    "start": "1573210",
    "end": "1579300"
  },
  {
    "text": "give us some flexibility and you gain the platform so this is the high level",
    "start": "1579300",
    "end": "1586740"
  },
  {
    "text": "architecture of north deck so it's built on a bunch of Amazon services the biggest ones are ECS and aurora server",
    "start": "1586740",
    "end": "1594810"
  },
  {
    "text": "lists but we also use EFS for places where we need to have shared storage among a bunch of different containers",
    "start": "1594810",
    "end": "1600510"
  },
  {
    "text": "and we use s3 for all of the bulk storage so a an interesting thing is",
    "start": "1600510",
    "end": "1610980"
  },
  {
    "text": "that we have a bunch of different sorts of applications they might run a wordpress and one class of them is that",
    "start": "1610980",
    "end": "1617460"
  },
  {
    "text": "standard CMS use case and the goal there is that you only want to use a very",
    "start": "1617460",
    "end": "1624420"
  },
  {
    "text": "small part of the platform the majority of the time so the very first the",
    "start": "1624420",
    "end": "1629450"
  },
  {
    "text": "application gateway EECS containers they are running our nginx custom caching layer and your goal in the CMS",
    "start": "1629450",
    "end": "1636750"
  },
  {
    "text": "applications is distribute the vast majority of your traffic there because that allows you to do it the cheapest way and only need to use the PHP layer",
    "start": "1636750",
    "end": "1644280"
  },
  {
    "text": "that's running on ECS and the database when it's needed so you want those pieces to be able to",
    "start": "1644280",
    "end": "1652110"
  },
  {
    "text": "stop which is really easy with docker you can just manage the life cycle stop",
    "start": "1652110",
    "end": "1657630"
  },
  {
    "text": "the service when it's now used and have something to start it back up but it's much harder in in the standard database",
    "start": "1657630",
    "end": "1663750"
  },
  {
    "text": "world to do that so the way we work is",
    "start": "1663750",
    "end": "1669120"
  },
  {
    "text": "each production application gets its own Aurora serverless instance and then the",
    "start": "1669120",
    "end": "1677040"
  },
  {
    "text": "non production applications are in a multi-tenant setup so when last year",
    "start": "1677040",
    "end": "1687090"
  },
  {
    "text": "when we heard the announcement for a raw service we were very excited because we were mulling how to solve this problem",
    "start": "1687090",
    "end": "1692280"
  },
  {
    "text": "so having a database that easily scales they can stop is really a hard problem",
    "start": "1692280",
    "end": "1697740"
  },
  {
    "text": "and kind of the classical approach to this might be you you have a master and then you scale out",
    "start": "1697740",
    "end": "1704430"
  },
  {
    "text": "read slaves using auto scaling but WordPress makes this really hard so the standard prep pattern and",
    "start": "1704430",
    "end": "1709800"
  },
  {
    "text": "WordPress is you do a database right and then you immediately do a read to fetch the data any fields that you might be",
    "start": "1709800",
    "end": "1715590"
  },
  {
    "text": "missing around you're right and so that makes it very hard to get more than",
    "start": "1715590",
    "end": "1721050"
  },
  {
    "text": "twenty or thirty percent of your traffic to go to a read slave which means that",
    "start": "1721050",
    "end": "1726630"
  },
  {
    "text": "doesn't really help your scaling problems so you need to look at what the options are for scaling masters so and",
    "start": "1726630",
    "end": "1734430"
  },
  {
    "text": "we do both these options right now have lots of experience doing it so there's the single tenant option say you're",
    "start": "1734430",
    "end": "1741180"
  },
  {
    "text": "running on over provisioned Aurora you have a read slave you resize that and",
    "start": "1741180",
    "end": "1747180"
  },
  {
    "text": "then you do failover to do that it has its problems and you generally have",
    "start": "1747180",
    "end": "1754110"
  },
  {
    "text": "around 30 seconds of outage around your scaling operation that's hard to get away from and it ends up being a very",
    "start": "1754110",
    "end": "1761790"
  },
  {
    "text": "high operational overhead so the other option that we do and it's more common",
    "start": "1761790",
    "end": "1767250"
  },
  {
    "text": "for us is we do multi tenant so if you use very very large instances and have",
    "start": "1767250",
    "end": "1773130"
  },
  {
    "text": "different customers share them then you have a bunch of spare capacity and everybody is sharing that spare capacity",
    "start": "1773130",
    "end": "1780600"
  },
  {
    "text": "so it makes it less expensive on the over-provisioning the downside there is that you have to be very careful to know",
    "start": "1780600",
    "end": "1787680"
  },
  {
    "text": "who those noisy neighbors are because once somebody uses all that spare capacity it's not available for anybody",
    "start": "1787680",
    "end": "1792780"
  },
  {
    "text": "else so if you find somebody who's bursting all the time then they have to be moved off that multi tenant solution",
    "start": "1792780",
    "end": "1798750"
  },
  {
    "text": "to a single tenant solution so again very high operational cost so as I",
    "start": "1798750",
    "end": "1807090"
  },
  {
    "text": "mentioned early were really excited when you heard about Aurora server list because it's the perfect fit for us right it scales the master we don't have",
    "start": "1807090",
    "end": "1813810"
  },
  {
    "text": "to deal with downtime we don't have all that operational overhead and it has an answer to pausing so if you're in that",
    "start": "1813810",
    "end": "1819720"
  },
  {
    "text": "standard CMS use case and the database isn't needed one unless you're adding new content the the solutions built",
    "start": "1819720",
    "end": "1826740"
  },
  {
    "text": "right in so over the last year we've",
    "start": "1826740",
    "end": "1832710"
  },
  {
    "text": "been building out north stack and more in our early testing phases right now with real customers and we had a lot of",
    "start": "1832710",
    "end": "1840749"
  },
  {
    "text": "great success but we've also found some things that you need to watch out for when you're using Aurora server less so",
    "start": "1840749",
    "end": "1848549"
  },
  {
    "text": "I'll go to the end of those from details so the first one is that if you're using",
    "start": "1848549",
    "end": "1854190"
  },
  {
    "text": "pause and that's really the best way to see real money savings in a lot of our use cases that resume time is",
    "start": "1854190",
    "end": "1860909"
  },
  {
    "text": "inconsistent so you need to plan around that and as mentioned earlier Aurora has",
    "start": "1860909",
    "end": "1867149"
  },
  {
    "text": "to pick that safe place to scale but sometimes it's you're slow queries that",
    "start": "1867149",
    "end": "1873840"
  },
  {
    "text": "are causing the load and preventing a safe place to scale so you have to have an answer to that and we noticed that at",
    "start": "1873840",
    "end": "1880049"
  },
  {
    "text": "least in the PHP case we noticed more my sequel has gone away and so you need to",
    "start": "1880049",
    "end": "1886619"
  },
  {
    "text": "take some steps to manage those so in",
    "start": "1886619",
    "end": "1894179"
  },
  {
    "text": "architecture the goal is to stop the whole second half of the design when it's not needed and so that means when a",
    "start": "1894179",
    "end": "1903720"
  },
  {
    "text": "new request comes in first we're gonna wake up a PHP worker it's gonna then connect to Aurora and then Aurora is",
    "start": "1903720",
    "end": "1910169"
  },
  {
    "text": "gonna on pause and then it's going to be able to run the queries and so starting",
    "start": "1910169",
    "end": "1916320"
  },
  {
    "text": "a new task on ECS might take 10 20 seconds and then starting that Aurora on",
    "start": "1916320",
    "end": "1923879"
  },
  {
    "text": "pause and that Aurora instance might take well sometimes it's really quick but oftentimes we'll see 30 or 40",
    "start": "1923879",
    "end": "1929340"
  },
  {
    "text": "seconds and so when you do those two things back-to-back you know you might",
    "start": "1929340",
    "end": "1935429"
  },
  {
    "text": "be looking at 40 seconds on a minute and that starts to get to the point where it's unacceptable and so we had to look",
    "start": "1935429",
    "end": "1942059"
  },
  {
    "text": "at well what are some ways we can reduce that time so obviously we talked to the",
    "start": "1942059",
    "end": "1948200"
  },
  {
    "text": "roar team and hopefully in the future they'll be able to improve that time but",
    "start": "1948200",
    "end": "1953549"
  },
  {
    "text": "we can also improve it in our design so and this is the case of many things like you might not be connected to the",
    "start": "1953549",
    "end": "1959220"
  },
  {
    "text": "database until you need it but if that database is paused immediately is high up in the process as possible you want",
    "start": "1959220",
    "end": "1965549"
  },
  {
    "text": "to connect to it and start waking up and so in our case we have a dedicated service that's",
    "start": "1965549",
    "end": "1971790"
  },
  {
    "text": "running and it's only job is one connection is being sent from our",
    "start": "1971790",
    "end": "1977940"
  },
  {
    "text": "load-balancing layer to our PHP layer it sends a connection request to the database so that our long possible",
    "start": "1977940",
    "end": "1986720"
  },
  {
    "text": "alright so second case the thing you really need to worry about is you got to",
    "start": "1988310",
    "end": "1995280"
  },
  {
    "text": "give it a time you got to give a roar service a place to scale so let me tell",
    "start": "1995280",
    "end": "2000440"
  },
  {
    "text": "you what a little story about WordPress so as I mentioned it's it's a relatively",
    "start": "2000440",
    "end": "2006140"
  },
  {
    "text": "old application and it was designed not as saira with everything was used in my",
    "start": "2006140",
    "end": "2012230"
  },
  {
    "text": "used today in mind and but it did have a lot of flexibility in its design and the",
    "start": "2012230",
    "end": "2017420"
  },
  {
    "text": "biggest part of that flexibility is this table called post meta so a post can be",
    "start": "2017420",
    "end": "2022670"
  },
  {
    "text": "many types but it only has in that table five or six default fields and anytime",
    "start": "2022670",
    "end": "2028760"
  },
  {
    "text": "you want to add optional data maybe that describes an order if you're using",
    "start": "2028760",
    "end": "2034250"
  },
  {
    "text": "WordPress WordPress for e-commerce site or maybe it just describes different",
    "start": "2034250",
    "end": "2039530"
  },
  {
    "text": "sorts of custom content that are being used to show the page they all get stored in this post meta table and if",
    "start": "2039530",
    "end": "2045710"
  },
  {
    "text": "you look at the design of the schema you can say oh well as long as I only access things by post ID or med ID I should be",
    "start": "2045710",
    "end": "2054919"
  },
  {
    "text": "in pretty good shape and the most common access pattern is post ID but you often",
    "start": "2054920",
    "end": "2060350"
  },
  {
    "text": "get cases where the data that's in there is being used for filtering and so",
    "start": "2060350",
    "end": "2067100"
  },
  {
    "text": "instead of querying against those keys you end up querying against either that large varchar' or even more painfully",
    "start": "2067100",
    "end": "2075860"
  },
  {
    "text": "that meta value and because of the way that my sequel handles blobs in the",
    "start": "2075860",
    "end": "2081379"
  },
  {
    "text": "tables any query against this table is going to end up using a temporary table so it's really easy to run on a small",
    "start": "2081380",
    "end": "2088370"
  },
  {
    "text": "instance and everything's fine until you do with that one query that scans this table looking for a specific met eval",
    "start": "2088370",
    "end": "2094010"
  },
  {
    "text": "you and then that query might take if you're on a to the smallest Aurora server site so that quarry might take 10",
    "start": "2094010",
    "end": "2100310"
  },
  {
    "text": "minutes to complete and because it's using that temp table there's no scaling point until it's complete or it's canceled so",
    "start": "2100310",
    "end": "2106970"
  },
  {
    "text": "for ten minutes your database is maxed out but it can't scale but if you would have been at 8h to use during that time",
    "start": "2106970",
    "end": "2113650"
  },
  {
    "text": "that query would have completed in under two seconds so what you need to do is",
    "start": "2113650",
    "end": "2120650"
  },
  {
    "text": "figure out how you're gonna manage those runaway cases like a roast herbalist",
    "start": "2120650",
    "end": "2127010"
  },
  {
    "text": "will give you great results if you're doing lots of small capacities and your",
    "start": "2127010",
    "end": "2132860"
  },
  {
    "text": "load is coming by increasing the number of queries but you have to have an answer if part of your workload could be",
    "start": "2132860",
    "end": "2138320"
  },
  {
    "text": "these queries that take a long time and so I mean the obvious easy answer is you",
    "start": "2138320",
    "end": "2145130"
  },
  {
    "text": "want to start setting some timeouts and as I was researching options for this I",
    "start": "2145130",
    "end": "2150740"
  },
  {
    "text": "was really excited because you look in the documentation and my sequel has support for max execution time",
    "start": "2150740",
    "end": "2156460"
  },
  {
    "text": "unfortunately that's in my sequel 5.7 and Aurora server which doesn't support",
    "start": "2156460",
    "end": "2161720"
  },
  {
    "text": "that yet though hopefully it'll be soon so the long term there's a really nice",
    "start": "2161720",
    "end": "2167330"
  },
  {
    "text": "answer built right into my sequel on a per session basis or globally you can set the timeout but until then you need",
    "start": "2167330",
    "end": "2174080"
  },
  {
    "text": "to set that timeout at your application layer so if you have an application where you can't change anything in it",
    "start": "2174080",
    "end": "2181100"
  },
  {
    "text": "there is a nice option there's a product open source product called proxy sequel and it allows you to set a query timeout",
    "start": "2181100",
    "end": "2187430"
  },
  {
    "text": "and then it manages stopping killing the query when it goes past that timeout and",
    "start": "2187430",
    "end": "2194030"
  },
  {
    "text": "returning an heir to the client but and if you don't want to deal with all the",
    "start": "2194030",
    "end": "2200090"
  },
  {
    "text": "problems that a proxy is single points of failure is managing that most clients have some sort of socket timeout network",
    "start": "2200090",
    "end": "2207260"
  },
  {
    "text": "traffic timeout that you can use as your timeout mechanism so in PHP that's the",
    "start": "2207260",
    "end": "2214070"
  },
  {
    "text": "option you set so in our case most of the time we're setting a 30-second timeout for our workloads with the",
    "start": "2214070",
    "end": "2220760"
  },
  {
    "text": "ability for specific customers to be able to override that for specific sites but it's also very important when you're",
    "start": "2220760",
    "end": "2227300"
  },
  {
    "text": "thinking about those timeouts is you often have a reporting query database",
    "start": "2227300",
    "end": "2233660"
  },
  {
    "text": "import where it might need that a much higher timeout than normal it's just a query",
    "start": "2233660",
    "end": "2238700"
  },
  {
    "text": "that you don't run very often but it is gonna take a long time and so you have to have some application specific",
    "start": "2238700",
    "end": "2246590"
  },
  {
    "text": "awareness about how you apply those timeouts there's no just global solution 20 seconds will always work so then the",
    "start": "2246590",
    "end": "2255320"
  },
  {
    "text": "kind of final wish we ran into is that we'll get a lot of an increased number",
    "start": "2255320",
    "end": "2261320"
  },
  {
    "text": "of my sequence Conway airs that's not entirely clear to me why we see this one",
    "start": "2261320",
    "end": "2268099"
  },
  {
    "text": "theory is that it's just you're connecting against the proxy layer and",
    "start": "2268099",
    "end": "2273490"
  },
  {
    "text": "you have shorter inactivity timeouts than you do when you're connecting to your own RDS and that the my sequel",
    "start": "2273490",
    "end": "2281119"
  },
  {
    "text": "client doesn't manage that well on its own but I think if you're using any",
    "start": "2281119",
    "end": "2287150"
  },
  {
    "text": "language that's using or following the same patterns it's the my sequel C library you're gonna run into the same",
    "start": "2287150",
    "end": "2292970"
  },
  {
    "text": "increased number of servers gone away errors deal to how it's managing timeouts on sockets the nice thing is",
    "start": "2292970",
    "end": "2300050"
  },
  {
    "text": "you just catch the air and reconnect and everything's fine but it is something",
    "start": "2300050",
    "end": "2305960"
  },
  {
    "text": "that you want to test around and be aware of",
    "start": "2305960",
    "end": "2311109"
  },
  {
    "text": "all right that's everything thank you",
    "start": "2312460",
    "end": "2316810"
  },
  {
    "text": "Thank You Josh appreciate your coming on stage and sharing with us your experience of using Aurora server lists",
    "start": "2320950",
    "end": "2326710"
  },
  {
    "text": "we did want to open up the floor to some question and answers we do have",
    "start": "2326710",
    "end": "2331780"
  },
  {
    "text": "microphones set up so in each of the aisles so if you want to go ahead and step up and ask any question you'd like",
    "start": "2331780",
    "end": "2338670"
  },
  {
    "text": "happy to try to answer that for you or any question for Josh for that matter as well so does anyone have any questions",
    "start": "2338670",
    "end": "2345100"
  },
  {
    "text": "they'd like to ask",
    "start": "2345100",
    "end": "2348000"
  },
  {
    "text": "yeah and just as a reminder before we get to questions please make sure to fill out the survey in your mobile",
    "start": "2355560",
    "end": "2360870"
  },
  {
    "text": "application thank you it looks like we have a question right over here yes sir yes question is when we have a down",
    "start": "2360870",
    "end": "2366240"
  },
  {
    "text": "skill the instance what happens to buffer pool what is the strategy of",
    "start": "2366240",
    "end": "2371720"
  },
  {
    "text": "downscaling of the buffer tool so it's the same strategy in that we do pre-warm",
    "start": "2371720",
    "end": "2376950"
  },
  {
    "text": "the buffer pool even when scaling down however we are scaling down to a smaller machine so you have to assume that part",
    "start": "2376950",
    "end": "2383010"
  },
  {
    "text": "of the buffer pool is going to get evicted what we try to do is optimize for loading up the parts of it that are",
    "start": "2383010",
    "end": "2388170"
  },
  {
    "text": "the most used but that is kind of a harder problem to do it course as you can imagine okay thank you yeah you're",
    "start": "2388170",
    "end": "2395070"
  },
  {
    "text": "welcome yes I'll take one from over here what version of Postgres is supported in the",
    "start": "2395070",
    "end": "2400830"
  },
  {
    "text": "server list platform I'll need to check on that to confirm but I believe that it is ten three okay great thanks you're",
    "start": "2400830",
    "end": "2407400"
  },
  {
    "text": "welcome question from here yeah two questions ones quick one the whole thing",
    "start": "2407400",
    "end": "2413910"
  },
  {
    "text": "where it scales off 70% CPU or 90 percent of Mac's connections is that configurable or is that a hard set thing",
    "start": "2413910",
    "end": "2420510"
  },
  {
    "text": "that it does today we don't make it configurable but we've been hearing the requests a lot where customers want to",
    "start": "2420510",
    "end": "2426360"
  },
  {
    "text": "configure it that configure it themselves so that's something we're taking a very hard look at it's not a difficult thing to do to make it",
    "start": "2426360",
    "end": "2432060"
  },
  {
    "text": "configurable so you can expect us to be working on that real soon and then one more question for Joshua right yes yes",
    "start": "2432060",
    "end": "2438900"
  },
  {
    "text": "so when you said that when you have a query that takes ten minutes to run on",
    "start": "2438900",
    "end": "2445320"
  },
  {
    "text": "the two CPU unit one I know you can increase the timeout or set a timeout to",
    "start": "2445320",
    "end": "2451470"
  },
  {
    "text": "prevent issues but what do you do about actually making that query run in a good amount of time you don't want to have",
    "start": "2451470",
    "end": "2456690"
  },
  {
    "text": "your instance at 8 AC use all the time but have you said it to to ECU it goes to 10 minutes so how did you end up",
    "start": "2456690",
    "end": "2462960"
  },
  {
    "text": "fixing that well so in our case we're just allowing the auto scaling to happen",
    "start": "2462960",
    "end": "2468510"
  },
  {
    "text": "there's enough traffic happening against it that pushes it over that 70% we do have some edge cases there that we",
    "start": "2468510",
    "end": "2475920"
  },
  {
    "text": "haven't solved yet which is if that query happens I don't know once or twice",
    "start": "2475920",
    "end": "2481080"
  },
  {
    "text": "a day it may not ever force that scaling event and so we're looking at that we",
    "start": "2481080",
    "end": "2487650"
  },
  {
    "text": "may need to do some application lot specific logging to detect those cases and know to use the API to force",
    "start": "2487650",
    "end": "2494580"
  },
  {
    "text": "the scale but in all the cases we've run into so far there's been enough it",
    "start": "2494580",
    "end": "2501510"
  },
  {
    "text": "pushes up the CPU load enough to force that scale thank you thank you yes sir I",
    "start": "2501510",
    "end": "2508680"
  },
  {
    "text": "have used any more and they have also this auto scaling feature correct but one of the big issue I have seen with",
    "start": "2508680",
    "end": "2514650"
  },
  {
    "text": "that is it will throw provision through put exception for couple of minutes and all the request of the client fails and",
    "start": "2514650",
    "end": "2521790"
  },
  {
    "text": "later it will scale it and then it will work fine which is unacceptable like for",
    "start": "2521790",
    "end": "2527400"
  },
  {
    "text": "my case so what do you have some similar issues with server lists Aurora that",
    "start": "2527400",
    "end": "2533970"
  },
  {
    "text": "okay if suppose my request is very less now and then suddenly there is a biggest spike wait a second",
    "start": "2533970",
    "end": "2541110"
  },
  {
    "text": "sure so it can be challenging to handle that very sudden burst especially if",
    "start": "2541110",
    "end": "2546210"
  },
  {
    "text": "there's a lot of long-running transactions because we're not able to find a safe scaling point but what you are able to do today with Aurora server",
    "start": "2546210",
    "end": "2553020"
  },
  {
    "text": "list is you can always go and explicitly set your capacity to say hey I want to set it at 8 or 32 or 64 right now if you",
    "start": "2553020",
    "end": "2560250"
  },
  {
    "text": "know that that large burst is coming especially if you're gonna be running a in any sort of heavy workload against",
    "start": "2560250",
    "end": "2566730"
  },
  {
    "text": "your application and you know it ahead of time no my case is okay take time latency means instead of one second I'm",
    "start": "2566730",
    "end": "2573810"
  },
  {
    "text": "ready to wait for one minute but I don't want the request to fail that is the",
    "start": "2573810",
    "end": "2578820"
  },
  {
    "text": "only criteria I have right so whether like it will be able to handle it or it will fail well we won't typically fail",
    "start": "2578820",
    "end": "2585780"
  },
  {
    "text": "the request we'll go ahead and do our best to service every transaction that comes our way we want to make it look as",
    "start": "2585780",
    "end": "2591210"
  },
  {
    "text": "much as possible as though you're talking to a traditional relational database engine so that's why we look for a safe scale point if we're not able",
    "start": "2591210",
    "end": "2597690"
  },
  {
    "text": "to find one then we won't scale up but we won't just outright reject the transaction okay thank you you're",
    "start": "2597690",
    "end": "2603270"
  },
  {
    "text": "welcome question from over here yes have you noticed any difference in I ops between",
    "start": "2603270",
    "end": "2610140"
  },
  {
    "text": "RDS my sequel and Aurora my sequel so for a similar workload in you know",
    "start": "2610140",
    "end": "2617670"
  },
  {
    "text": "between artis Postgres and Aurora Postgres we did notice",
    "start": "2617670",
    "end": "2623069"
  },
  {
    "text": "increased IAP Sonora because we are charged per a UPS in Aurora I wanted to",
    "start": "2623069",
    "end": "2628140"
  },
  {
    "text": "understand the story with my salute right so there is a pretty significant difference in terms of how storage",
    "start": "2628140",
    "end": "2633989"
  },
  {
    "text": "volumes work with Aurora which kind of goes to what I spoke about earlier for some specific workloads we can see",
    "start": "2633989",
    "end": "2640680"
  },
  {
    "text": "higher higher I ops on the volume layer it what you can often get away with",
    "start": "2640680",
    "end": "2647039"
  },
  {
    "text": "doing is running on a smaller server because Aurora at the database server level does have much higher performance",
    "start": "2647039",
    "end": "2652140"
  },
  {
    "text": "to offset that cost difference but it's a very workload specific question so I'm not really able to answer it in general",
    "start": "2652140",
    "end": "2658559"
  },
  {
    "text": "terms other than saying you can for certain workloads see higher volume I ops than you do otherwise unfold",
    "start": "2658559",
    "end": "2665729"
  },
  {
    "text": "auto-scaling sorry in terms of downsizing can be configured like can I save the CP",
    "start": "2665729",
    "end": "2672509"
  },
  {
    "text": "utilization is 30% or something right be able to don say yes so the question",
    "start": "2672509",
    "end": "2677849"
  },
  {
    "text": "really is more generally can you configure your auto scaling policies which is not a capability we give you today with Aurora server list but it's",
    "start": "2677849",
    "end": "2684089"
  },
  {
    "text": "something we're taking a very hard look at it's an obvious feature that we get a lot of customers ask us about we did",
    "start": "2684089",
    "end": "2689369"
  },
  {
    "text": "make the service generally available just three months ago we've announced a whole lot of new things so we're working pretty hard at doing everything as our",
    "start": "2689369",
    "end": "2695699"
  },
  {
    "text": "customers asked to do but you can expect that to be coming good thanks you're welcome yes question over here if",
    "start": "2695699",
    "end": "2702660"
  },
  {
    "text": "using the SDK from a lambda function to call serverless yeah are you still",
    "start": "2702660",
    "end": "2708209"
  },
  {
    "text": "required to have the lambda function within a V PC or is that limit you are not required to have the lambda function",
    "start": "2708209",
    "end": "2713430"
  },
  {
    "text": "in a V PC it can be running from anywhere so what the data API gives you is a publicly accessible endpoint you",
    "start": "2713430",
    "end": "2719249"
  },
  {
    "text": "could call it from your desktop you could call it from absolutely anywhere you do not have to be running lambda in",
    "start": "2719249",
    "end": "2724259"
  },
  {
    "text": "a V PC anymore and it also uses like I am roles for the access users what sorry",
    "start": "2724259",
    "end": "2730709"
  },
  {
    "text": "I am roles yes it does use I am roles to authenticate we also use the AWS secrets",
    "start": "2730709",
    "end": "2738239"
  },
  {
    "text": "tour manager to provide your database credentials sorry was there follow-up",
    "start": "2738239",
    "end": "2745380"
  },
  {
    "text": "questions it doesn't natively support i''m roles the way Aurora my sequel does today I",
    "start": "2745380",
    "end": "2751369"
  },
  {
    "text": "mean that you can't use that to solely authenticate but that's something that we're gonna be looking at thank you",
    "start": "2751369",
    "end": "2758210"
  },
  {
    "text": "you're welcome question over here when do you expect the Aurora serverless Postgres sequel to",
    "start": "2758210",
    "end": "2764840"
  },
  {
    "text": "be generally available unfortunately that's not a data I could share with you",
    "start": "2764840",
    "end": "2770180"
  },
  {
    "text": "right now I wish I could we've only just opened up the preview today we're gonna be taking a lot of",
    "start": "2770180",
    "end": "2776000"
  },
  {
    "text": "feedback and building our engineering roadmap based on the feedback that we get if I could give you a date I would",
    "start": "2776000",
    "end": "2781010"
  },
  {
    "text": "but I'm afraid I can't and how about having this available across regions so you want to do cross",
    "start": "2781010",
    "end": "2787760"
  },
  {
    "text": "region replication between Aurora serverless questions yes so that's also something we've heard requests for today",
    "start": "2787760",
    "end": "2793730"
  },
  {
    "text": "unfortunately it's not supported but it is an obvious feature gap that you can imagine we're gonna take a hard look at supporting thank you you're welcome",
    "start": "2793730",
    "end": "2801200"
  },
  {
    "text": "yes question my understanding is that the query performance based on the history and statistics when we do the",
    "start": "2801200",
    "end": "2807710"
  },
  {
    "text": "auto-scaling does it also takes care of the statistics capture the history and cache you know all those things I'm sure",
    "start": "2807710",
    "end": "2815930"
  },
  {
    "text": "it is a capture which captures statistics of what are the queries happening how does the response on the",
    "start": "2815930",
    "end": "2822500"
  },
  {
    "text": "way to look at it I think I'm going internals of the database yes so does it",
    "start": "2822500",
    "end": "2827619"
  },
  {
    "text": "catch I mean take the statistics to that new everything that's in the buffer pool",
    "start": "2827619",
    "end": "2833540"
  },
  {
    "text": "does get carried across okay yeah yes question yes you said there was a",
    "start": "2833540",
    "end": "2840170"
  },
  {
    "text": "forty second start is that and you said also that there was a you know",
    "start": "2840170",
    "end": "2845440"
  },
  {
    "text": "approaching unacceptable that's from from my experience definitely unacceptable and you said but what we're",
    "start": "2845440",
    "end": "2851060"
  },
  {
    "text": "cloud in a production environment are using that has a forty second startup time that's acceptable right so in this",
    "start": "2851060",
    "end": "2856880"
  },
  {
    "text": "case the vast majority of the traffic would be served from the caching layer so you're looking at that slow start",
    "start": "2856880",
    "end": "2862040"
  },
  {
    "text": "would be from an admin logging in and then that's the only case where they see it I see some more about you know behind",
    "start": "2862040",
    "end": "2869810"
  },
  {
    "text": "the scenes uh or a dev environment would be something like that production you're saying some WordPress admin logging into",
    "start": "2869810",
    "end": "2876829"
  },
  {
    "text": "to modify their site that's right and so if you were you know regularly",
    "start": "2876829",
    "end": "2882619"
  },
  {
    "text": "needing to talk to the database it wouldn't be ever be pausing so you wouldn't see it and that's my next question if without the pause is",
    "start": "2882619",
    "end": "2888859"
  },
  {
    "text": "bringing it down far enough reasonable to assume a cost you know to make this",
    "start": "2888859",
    "end": "2894739"
  },
  {
    "text": "cost effective well I'm you know it's it's all relative so you know the the",
    "start": "2894739",
    "end": "2902299"
  },
  {
    "text": "lowest cost runs around well I mean before your I ops and the $40 a month",
    "start": "2902299",
    "end": "2909079"
  },
  {
    "text": "range so for some use cases yes for others no you know if this is a low",
    "start": "2909079",
    "end": "2917299"
  },
  {
    "text": "volume site where you're trying to have hundreds of them and make it work then",
    "start": "2917299",
    "end": "2922549"
  },
  {
    "text": "it might not be the answer but you know it really is relative we are also",
    "start": "2922549",
    "end": "2929329"
  },
  {
    "text": "looking at other options there like where instead of an instance per site it",
    "start": "2929329",
    "end": "2935779"
  },
  {
    "text": "would be per customer and then it would really never be pausing but you would be",
    "start": "2935779",
    "end": "2941059"
  },
  {
    "text": "sharing the load there's always there's multiple ways to address the price problem but there are going to be some",
    "start": "2941059",
    "end": "2947150"
  },
  {
    "text": "cases where an RI t class RDS will be",
    "start": "2947150",
    "end": "2952699"
  },
  {
    "text": "cheaper you just have to find the right model for your use case thank you",
    "start": "2952699",
    "end": "2960190"
  },
  {
    "text": "question over here yeah how good is cloud watch support for Aurora server",
    "start": "2960190",
    "end": "2965359"
  },
  {
    "text": "list we'll be able to monitor this spikes I mean after school activities",
    "start": "2965359",
    "end": "2970789"
  },
  {
    "text": "using cloud which metric alarms yes you will you can get all of the same cloud",
    "start": "2970789",
    "end": "2976099"
  },
  {
    "text": "watch metrics with Aurora server list as you can with provision Deloris so you get the same visibility as you would",
    "start": "2976099",
    "end": "2981680"
  },
  {
    "text": "whether or not you're using server lists through cloud watch okay but the monitoring those spikes would be great",
    "start": "2981680",
    "end": "2988459"
  },
  {
    "text": "to have so you can see those spikes the only caveat there is that cloud watch will sometimes restrict your granularity",
    "start": "2988459",
    "end": "2995869"
  },
  {
    "text": "to one minute for certain metrics so you can't necessarily see them if you're looking at in one minute granularity the",
    "start": "2995869",
    "end": "3002469"
  },
  {
    "text": "most of the metrics that I was showing are taken from the client side where you can sit an arbitrary granularity that's",
    "start": "3002469",
    "end": "3008049"
  },
  {
    "text": "probably the best way to measure throughput and Leigh see in that particular context thank you",
    "start": "3008049",
    "end": "3013089"
  },
  {
    "text": "you're welcome it's question I have three questions about the new instance warming process",
    "start": "3013089",
    "end": "3023170"
  },
  {
    "text": "mm-hm as I understand it it is done in",
    "start": "3023170",
    "end": "3029980"
  },
  {
    "text": "parallel so it doesn't stop the original correct yeah so does it involve reading",
    "start": "3029980",
    "end": "3038769"
  },
  {
    "text": "data from the storage or does that data is pushed from one instance to another",
    "start": "3038769",
    "end": "3045960"
  },
  {
    "text": "right it's actually read directly between database servers it's done so in",
    "start": "3045960",
    "end": "3051670"
  },
  {
    "text": "an asynchronous way so that won't slow down the primary workload and if you think about it it doesn't really matter whether that warm-up process takes 1",
    "start": "3051670",
    "end": "3058299"
  },
  {
    "text": "minute or 10 minutes because you're not down during that time we're just sitting there waiting to find a scale point and",
    "start": "3058299",
    "end": "3063670"
  },
  {
    "text": "warming up the buffer pool but it is directly between database servers to answer your question okay",
    "start": "3063670",
    "end": "3070109"
  },
  {
    "text": "well it's typically gonna take anywhere from no time at all up to maybe five to ten minutes in the worst case for a",
    "start": "3076859",
    "end": "3083769"
  },
  {
    "text": "particularly large database okay yeah thank you you're welcome yes question two questions come to",
    "start": "3083769",
    "end": "3090910"
  },
  {
    "text": "expand on that last question these standby instances I guess mm-hm",
    "start": "3090910",
    "end": "3096519"
  },
  {
    "text": "I mean are they are they free like how does that work right so you don't pay",
    "start": "3096519",
    "end": "3103089"
  },
  {
    "text": "for them we manage the warm pool on your behalf we we absorb the cost of having",
    "start": "3103089",
    "end": "3108519"
  },
  {
    "text": "that standby while it's warming up all we charge you for is the amount of capacity that you have provisioned at",
    "start": "3108519",
    "end": "3114160"
  },
  {
    "text": "any moment so you're not paying extra money for the warm pool or for the hot standby while it's warming up okay so",
    "start": "3114160",
    "end": "3119470"
  },
  {
    "text": "those machines you have different instances just prepared and ready to go and time comes that's right and the",
    "start": "3119470",
    "end": "3125470"
  },
  {
    "text": "second question is for the I guess the cutover point if you have stacking slow",
    "start": "3125470",
    "end": "3131920"
  },
  {
    "text": "queries mm-hmm usually when you have like a undersize server the slow queries will start to pile up and so they're",
    "start": "3131920",
    "end": "3139259"
  },
  {
    "text": "like the snare that Josh had mentioned was a single slow query and I can understand that you set the session timeout BAM no",
    "start": "3139259",
    "end": "3145630"
  },
  {
    "text": "problem that's a kind of a point but if you have these stacking slow queries you don't know when that's going to happen",
    "start": "3145630",
    "end": "3150880"
  },
  {
    "text": "to give you that cutoff point so in that scenario are we out of luck so what well",
    "start": "3150880",
    "end": "3160000"
  },
  {
    "text": "if you have a large number of very long-running transactions in that particular case what we're gonna do is",
    "start": "3160000",
    "end": "3166050"
  },
  {
    "text": "we're probably not gonna be able to find a safe scale point so we're pretty much going to lock you onto the server size",
    "start": "3166050",
    "end": "3171940"
  },
  {
    "text": "that you're currently on so in terms of being out of luck I mean that might be a strong word we won't be able to scale",
    "start": "3171940",
    "end": "3177010"
  },
  {
    "text": "you up or down but but you know you have to accept that limitation we make that",
    "start": "3177010",
    "end": "3182800"
  },
  {
    "text": "compromise because we don't want to start rejecting transactions or disrupt your workload we kind of put the onus as",
    "start": "3182800",
    "end": "3189460"
  },
  {
    "text": "a shared responsibility to say okay you're gonna need to you know tune your workload so that you don't have a lot of",
    "start": "3189460",
    "end": "3195360"
  },
  {
    "text": "long-running transactions in order to get the most out of Aurora server list thanks man thank you yeah you're welcome",
    "start": "3195360",
    "end": "3200740"
  },
  {
    "text": "so we only have five minutes left in the session I'm gonna answer a couple more questions and then you're welcome to",
    "start": "3200740",
    "end": "3205750"
  },
  {
    "text": "approach me afterwards and I'll just answer your question one on one yes one over here what one question about",
    "start": "3205750",
    "end": "3212610"
  },
  {
    "text": "auto-scaling in Aurora is it yeah so",
    "start": "3212610",
    "end": "3218470"
  },
  {
    "text": "currently Aurora serverless only supports vertical auto scaling at this time however if you're using Aurora",
    "start": "3218470",
    "end": "3224590"
  },
  {
    "text": "provisioned what we do offer today is an auto scaling capability to grow or shrink your read replica fleet so you",
    "start": "3224590",
    "end": "3230860"
  },
  {
    "text": "can you can get that with Aurora provisioned already so if we don't have a read write separation I'm correct if",
    "start": "3230860",
    "end": "3240370"
  },
  {
    "text": "you don't have read write separation then it's a good use case if you specifically want to separate your read",
    "start": "3240370",
    "end": "3246310"
  },
  {
    "text": "traffic it's probably not the best fit for you right now okay and you're doing plan to it to have a layer like well",
    "start": "3246310",
    "end": "3253630"
  },
  {
    "text": "that's something we've heard a lot of requests for and we're gonna be looking at for our roadmap unfortunately I'm not able to share any specifics around her",
    "start": "3253630",
    "end": "3260470"
  },
  {
    "text": "when we launch it okay thanks thank you okay last question and then I'm gonna take everything in person right over",
    "start": "3260470",
    "end": "3266170"
  },
  {
    "text": "here yes can we go back to the slides with the preview link like you posted today yeah let me see if I can find it",
    "start": "3266170",
    "end": "3273220"
  },
  {
    "text": "yeah would you like the source code is that no no the prepaid for the pages and all",
    "start": "3273220",
    "end": "3282040"
  },
  {
    "text": "of these slides we will be publishing online so you don't have to you're",
    "start": "3282040",
    "end": "3287079"
  },
  {
    "text": "welcome to take pictures of them of course but we will be publishing these slides and making them available to all of you so we only have three minutes",
    "start": "3287079",
    "end": "3293170"
  },
  {
    "text": "left in the session I'm going to get in trouble if I continue I'm sorry to cut off the questions but I will be right over here to answer any questions that",
    "start": "3293170",
    "end": "3299410"
  },
  {
    "text": "you have thank you very very much [Applause]",
    "start": "3299410",
    "end": "3306420"
  }
]