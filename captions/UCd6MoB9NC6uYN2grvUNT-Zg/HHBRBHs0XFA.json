[
  {
    "text": "In this video, you’ll see how to create\ninfrastructure patterns for your organization",
    "start": "420",
    "end": "4240"
  },
  {
    "text": "using the AWS Cloud Development Kit (AWS CDK).",
    "start": "4240",
    "end": "7710"
  },
  {
    "text": "With patterns, you can define reusable components\nthat represent multiple AWS resources,",
    "start": "8320",
    "end": "13360"
  },
  {
    "text": "configure AWS infrastructure using familiar programming languages,",
    "start": "13360",
    "end": "17199"
  },
  {
    "text": "and share complex configurations like code\nacross your organization.",
    "start": "17200",
    "end": "20820"
  },
  {
    "text": "The AWS CDK allows developers to define reusable\ncloud components known as constructs,",
    "start": "21720",
    "end": "27400"
  },
  {
    "text": "the most complex type of which are known as patterns.",
    "start": "27400",
    "end": "29760"
  },
  {
    "text": "An organization can then re-use these patterns\nin its cloud applications without having to",
    "start": "30300",
    "end": "34559"
  },
  {
    "text": "manually configure and implement resources\nor resource connections.",
    "start": "34560",
    "end": "37820"
  },
  {
    "text": "To get started, let’s navigate to the Cloud9\nintegrated development environment (IDE).",
    "start": "38680",
    "end": "43340"
  },
  {
    "text": "First, let’s ensure the AWS command-line interface (CLI) and CDK are installed on this Cloud9 instance.",
    "start": "44460",
    "end": "50960"
  },
  {
    "text": "As you can see, the AWS CLI is already installed.",
    "start": "51920",
    "end": "55160"
  },
  {
    "text": "The CDK is also installed.",
    "start": "57400",
    "end": "59120"
  },
  {
    "text": "To ensure you have the latest version of the\nCDK, you can use the Node Package Manager",
    "start": "59580",
    "end": "63920"
  },
  {
    "text": "(NPM) to check for and install updates.",
    "start": "63920",
    "end": "66680"
  },
  {
    "text": "You can use the “cdk doctor” command to\nensure the current version of AWS CDK is properly",
    "start": "68500",
    "end": "73580"
  },
  {
    "text": "installed and configured to display relevant\nenvironment variables.",
    "start": "73580",
    "end": "77040"
  },
  {
    "text": "The AWS CDK lets you define your\nAWS cloud infrastructure",
    "start": "77780",
    "end": "81740"
  },
  {
    "text": "in a general-purpose programming language.",
    "start": "81740",
    "end": "83840"
  },
  {
    "text": "Currently, the AWS CDK supports TypeScript,\nJavaScript, Python, Java, and C#.",
    "start": "84620",
    "end": "90640"
  },
  {
    "text": "The specific language you work in has its\nown prerequisites.",
    "start": "91000",
    "end": "93880"
  },
  {
    "text": "For our purposes, we’ll install what we\nneed to use Python, Java, and JavaScript.",
    "start": "94620",
    "end": "98840"
  },
  {
    "text": "To build the Python demonstration application, you must install twine from the Python package index.",
    "start": "99740",
    "end": "105060"
  },
  {
    "text": "Next, to use Java, we’ll install Open JDK version 8.",
    "start": "107640",
    "end": "111720"
  },
  {
    "text": "Next, we’ll configure the Java Runtime Environment and Java Compiler to use the correct binary for execution.",
    "start": "116380",
    "end": "122280"
  },
  {
    "text": "We’ll also download and install Apache Maven,\na Java package manager and build automation tool.",
    "start": "126240",
    "end": "131480"
  },
  {
    "text": "Next, let’s configure our shell environment variables so Maven can execute commands successfully,",
    "start": "139100",
    "end": "144260"
  },
  {
    "text": "and our Path variable to include the Maven binaries.",
    "start": "144260",
    "end": "146900"
  },
  {
    "text": "Let’s confirm that Maven is now installed.",
    "start": "148540",
    "end": "150700"
  },
  {
    "text": "Now that Maven has been installed, let’s\nreturn to the project directory.",
    "start": "153140",
    "end": "156220"
  },
  {
    "text": "Next, let’s create a main project folder\nto house our infrastructure pattern.",
    "start": "157880",
    "end": "161500"
  },
  {
    "text": "We will export artifacts in Python, Java, and JavaScript.",
    "start": "162180",
    "end": "165420"
  },
  {
    "text": "This pattern will serve as a code library\nthat can be used in other AWS CDK applications",
    "start": "166200",
    "end": "170760"
  },
  {
    "text": "that are built in our organization, so we\nwant to name it clearly.",
    "start": "170760",
    "end": "173760"
  },
  {
    "text": "We’ll use the default construct that gets\nscaffolded by the AWS CDK.",
    "start": "174260",
    "end": "178140"
  },
  {
    "text": "The construct is a dead-letter queue for an\nAmazon Simple Notification Service",
    "start": "178560",
    "end": "182360"
  },
  {
    "text": "(Amazon SNS) topic subscription.",
    "start": "182360",
    "end": "184680"
  },
  {
    "text": "Navigate into the main project folder.",
    "start": "186320",
    "end": "188300"
  },
  {
    "text": "Let’s initialize a library in TypeScript,\nusing the command “cdk init lib”",
    "start": "189740",
    "end": "194540"
  },
  {
    "text": "to specify that we are creating a library to be used\nby other applications.",
    "start": "194540",
    "end": "198319"
  },
  {
    "text": "As you can see, the library initialization\ncommand created several necessary files and",
    "start": "204660",
    "end": "209239"
  },
  {
    "text": "folders for the project.",
    "start": "209240",
    "end": "210360"
  },
  {
    "text": "Let's take a look at the package.json file\nto see the default project parameters and",
    "start": "210980",
    "end": "215239"
  },
  {
    "text": "dependencies included in the library scaffolding.",
    "start": "215240",
    "end": "217580"
  },
  {
    "text": "Notice that the AWS CDK and relevant constructs\nfor the sample application",
    "start": "220620",
    "end": "225000"
  },
  {
    "text": "are included as dependencies in the project.",
    "start": "225000",
    "end": "227160"
  },
  {
    "text": "Now let’s look at the lib directory to see the default boilerplate code provided after the initialization.",
    "start": "228200",
    "end": "233200"
  },
  {
    "text": "As you can see, the AWS CDK construct libraries for the default dead-letter-queue application were imported.",
    "start": "234500",
    "end": "240220"
  },
  {
    "text": "A library defines codes for a construct rather\nthan for an application.",
    "start": "241000",
    "end": "244500"
  },
  {
    "text": "For instance, the DeadLetterQueue construct\nextends the base Construct class provided",
    "start": "245180",
    "end": "249060"
  },
  {
    "text": "by the AWS CDK.",
    "start": "249060",
    "end": "250780"
  },
  {
    "text": "The DeadLetterQueue object creates a queue\nwith a 300-second visibility timeout,",
    "start": "251560",
    "end": "255900"
  },
  {
    "text": "creates an SNS topic, and then adds a subscription\nfrom the queue to the topic.",
    "start": "255900",
    "end": "260019"
  },
  {
    "text": "Let’s return to Bash and run the build script\non this project.",
    "start": "260920",
    "end": "263780"
  },
  {
    "text": "As you can see, the build script has successfully\ncompiled our TypeScript code to JavaScript.",
    "start": "267780",
    "end": "272000"
  },
  {
    "text": "Next, let’s use the NPM to install “jsii”\nand “jsii-pacmak,” which are open source",
    "start": "272520",
    "end": "278080"
  },
  {
    "text": "projects that allow other programming languages\nto interface to our TypeScript project construct.",
    "start": "278080",
    "end": "282900"
  },
  {
    "text": "Now that the projects are installed, let’s update the build and package scripts in the package.json files.",
    "start": "283900",
    "end": "289300"
  },
  {
    "text": "The project is now configured to execute the\nappropriate jsii command to package the construct",
    "start": "298060",
    "end": "303000"
  },
  {
    "text": "so that it is available to projects in several\nother languages, such as Python and Java.",
    "start": "303000",
    "end": "307340"
  },
  {
    "text": "You can also add further details about the\nproject to the package.json file",
    "start": "308320",
    "end": "312380"
  },
  {
    "text": "so it can be properly indexed and accessed\nby artifact repositories in Python and Java.",
    "start": "312380",
    "end": "317220"
  },
  {
    "text": "Let’s add \"author\", \"repository', and \"license\" sections.",
    "start": "317740",
    "end": "321080"
  },
  {
    "text": "Next, let’s configure jsii so that it will properly compile the construct to importable Python and Java modules.",
    "start": "329480",
    "end": "335880"
  },
  {
    "text": "The output directory of our jsii-compiled package is the dist directory in our dead-letter-queue project folder.",
    "start": "336980",
    "end": "342760"
  },
  {
    "text": "For Python, you only need to specify the distributed\npackage name and its module identifier.",
    "start": "343220",
    "end": "348080"
  },
  {
    "text": "For Java, you must specify the package name, and since we are using Maven, also the groupId and artifactId.",
    "start": "349180",
    "end": "355020"
  },
  {
    "text": "Under peerDependencies, let’s specify the\nconstructs library as a dependency as well.",
    "start": "359840",
    "end": "364500"
  },
  {
    "text": "The AWS CDK libraries will be automatically\nadded under the peerDependencies section",
    "start": "365060",
    "end": "370020"
  },
  {
    "text": "when the command “npm run build” is executed.",
    "start": "370020",
    "end": "373060"
  },
  {
    "text": "You can see tests associated with the project\nin the test directory.",
    "start": "374060",
    "end": "377220"
  },
  {
    "text": "Since we’re not using SynthUtils to test the construct, let’s remove it from the import in the main test code.",
    "start": "379560",
    "end": "385060"
  },
  {
    "text": "Let’s return to the index file of our construct.",
    "start": "387100",
    "end": "389380"
  },
  {
    "text": "Let’s make all parameters associated with\nthe DeadLetterQueueProps interface “read only,”",
    "start": "392360",
    "end": "396879"
  },
  {
    "text": "since when we move from one language\nto another through the jsii compilation,",
    "start": "396880",
    "end": "400580"
  },
  {
    "text": "we’ll be passing parameters by value.",
    "start": "400580",
    "end": "402379"
  },
  {
    "text": "Return to Bash.",
    "start": "403900",
    "end": "405020"
  },
  {
    "text": "Let’s move the TypeScript configuration\nto a file that will not be read,",
    "start": "408380",
    "end": "411720"
  },
  {
    "text": "since jsii will generate its own configuration when\nit is used to package our construct.",
    "start": "411720",
    "end": "416120"
  },
  {
    "text": "Next, let’s build the construct using the\n“npm run build” command.",
    "start": "417220",
    "end": "420840"
  },
  {
    "text": "That command called the \"build\" script in our package.json file, which has been aliased to jsii.",
    "start": "421940",
    "end": "427480"
  },
  {
    "text": "Now run the package script, which likewise\nhas been aliased to jsii-pacmak.",
    "start": "428600",
    "end": "433340"
  },
  {
    "text": "As you can see, the dist directory we specified\nfor output has been created.",
    "start": "434340",
    "end": "438139"
  },
  {
    "text": "Let’s take a look at its contents.",
    "start": "438500",
    "end": "439980"
  },
  {
    "text": "The Java package has been created with all\nthe data contained within a package skeleton,",
    "start": "443860",
    "end": "447919"
  },
  {
    "text": "as specified by our jsii Java build parameters.",
    "start": "447920",
    "end": "451140"
  },
  {
    "text": "Similarly, the compiled JavaScript has been\ncompiled in a folder.",
    "start": "454040",
    "end": "457200"
  },
  {
    "text": "Since our original code was configured in\nTypeScript, the resulting JavaScript file",
    "start": "457720",
    "end": "461480"
  },
  {
    "text": "was directly compiled and placed in a zipped folder.",
    "start": "461480",
    "end": "464000"
  },
  {
    "text": "Finally, the output Python package has been\ngenerated in the Python folder.",
    "start": "467040",
    "end": "470760"
  },
  {
    "text": "Now that you’ve seen how you can write an\nAWS CDK construct in one language (TypeScript)",
    "start": "471640",
    "end": "476600"
  },
  {
    "text": "and compile it for use in several different languages,",
    "start": "476600",
    "end": "479080"
  },
  {
    "text": "let’s see how we can use the package compiled to Python in a separate application.",
    "start": "479080",
    "end": "482759"
  },
  {
    "text": "Create and enter a directory for the application.",
    "start": "486060",
    "end": "488400"
  },
  {
    "text": "Let’s initialize a Python project in our home directory.",
    "start": "490680",
    "end": "493360"
  },
  {
    "text": "Let’s take a look at the code that was just generated.",
    "start": "495500",
    "end": "497760"
  },
  {
    "text": "Here’s the boilerplate AWS CDK code generated\nby the initialization.",
    "start": "502260",
    "end": "506540"
  },
  {
    "text": "Let’s initialize the virtual environment automatically generated by the “cdk init” command,",
    "start": "511060",
    "end": "516000"
  },
  {
    "text": "and then install all the necessary dependencies\nthrough the Python package manager.",
    "start": "516000",
    "end": "519740"
  },
  {
    "text": "Now, let’s take a look at the CloudFormation template that is generated from",
    "start": "523200",
    "end": "526220"
  },
  {
    "text": "the Python AWS CDK application code.",
    "start": "526220",
    "end": "529120"
  },
  {
    "text": "Note that there are no resources in the template yet.",
    "start": "529740",
    "end": "532000"
  },
  {
    "text": "Next, let’s install the Python module that was generated by Jsii from our TypeScript construct code.",
    "start": "534580",
    "end": "540080"
  },
  {
    "text": "To do so, run the command \"pip install\" along with the path of the wheel file that was generated from Jsii.",
    "start": "540700",
    "end": "546620"
  },
  {
    "text": "Now that the module has been successfully\ninstalled, you can add it to the application",
    "start": "548240",
    "end": "551839"
  },
  {
    "text": "using an import statement at the top of the\nCloudFormation stack .py file.",
    "start": "551840",
    "end": "556180"
  },
  {
    "text": "Let’s add our construct to the stack.",
    "start": "558320",
    "end": "560220"
  },
  {
    "text": "Here, we have defined the Dead Letter Queue object, as defined in our dead-letter-queue project,",
    "start": "566800",
    "end": "571399"
  },
  {
    "text": "in our Python AWS CDK application, passing it a name of \"MyDLQ\" and a visibility timeout of 600 seconds.",
    "start": "571400",
    "end": "578980"
  },
  {
    "text": "Return to Bash.",
    "start": "579960",
    "end": "580840"
  },
  {
    "text": "Now that we’ve instantiated the dead letter queue object in our Python AWS CDK application and saved it,",
    "start": "583840",
    "end": "589700"
  },
  {
    "text": "let’s see the generated CloudFormation template.",
    "start": "589700",
    "end": "592060"
  },
  {
    "text": "As you can see, the dead letter queue object\nhas been successfully defined in the generated",
    "start": "594580",
    "end": "598540"
  },
  {
    "text": "CloudFormation stack template, which indicates\nthat the construct has been read successfully.",
    "start": "598540",
    "end": "602980"
  },
  {
    "text": "You’ve just seen how to create infrastructure\npatterns for your organization using the AWS CDK.",
    "start": "604020",
    "end": "608880"
  },
  {
    "text": "Thanks for watching.",
    "start": "609720",
    "end": "610560"
  },
  {
    "text": "Now it’s your turn to try.",
    "start": "610560",
    "end": "611560"
  }
]