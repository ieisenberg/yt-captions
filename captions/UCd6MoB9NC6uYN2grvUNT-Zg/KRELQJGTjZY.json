[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "in this uh webinar uh we are going to Target some of the basic uh lessons that",
    "start": "160",
    "end": "6520"
  },
  {
    "text": "we have learned on building uh effective Cloud architectures um this presentation",
    "start": "6520",
    "end": "12799"
  },
  {
    "text": "is targeted at architects who are trying to build uh uh cloud architectures in",
    "start": "12799",
    "end": "18279"
  },
  {
    "text": "the AWS cloud and I'm going to talk about some basic best practices um and",
    "start": "18279",
    "end": "23640"
  },
  {
    "text": "unfortunately there is no one Panacea architecture uh that one to rule them",
    "start": "23640",
    "end": "29480"
  },
  {
    "text": "all uh because it really depends on what you are trying to build what is the goal of the of the use case you know whether",
    "start": "29480",
    "end": "36719"
  },
  {
    "text": "it is the cost Effectiveness whether it's speed whether it's high availability and Mission criticalness and so forth or um depending upon what",
    "start": "36719",
    "end": "44399"
  },
  {
    "text": "you're trying to get out of your application architecture so uh so basically from an architect perspective",
    "start": "44399",
    "end": "51719"
  },
  {
    "text": "now it is it's important to understand that it is understanding the tradeoffs and then mastering them with this basic",
    "start": "51719",
    "end": "58800"
  },
  {
    "text": "thought in mind I wanted to bring this up very early and and go into the basic",
    "start": "58800",
    "end": "64239"
  },
  {
    "text": "details about about um learning how to build Cloud",
    "start": "64239",
    "end": "69240"
  },
  {
    "text": "architectures uh all the uh things about this particular webinar is also available in a white paper format it is",
    "start": "69240",
    "end": "76720"
  },
  {
    "start": "70000",
    "end": "70000"
  },
  {
    "text": "uh it's available uh with all the different concepts best practices know",
    "start": "76720",
    "end": "82159"
  },
  {
    "text": "tenants patterns that you can uh know you need to be aware of when you are building Cloud architectures uh one one",
    "start": "82159",
    "end": "90119"
  },
  {
    "text": "thing to to note here is that this particular document is going is a living",
    "start": "90119",
    "end": "95240"
  },
  {
    "text": "document they're going to continuously up to up update this document with the latest stuff that that comes along the",
    "start": "95240",
    "end": "101600"
  },
  {
    "text": "things that we learn the the new best practices that emerge from our customers as well so I highly recommend uh reading",
    "start": "101600",
    "end": "108840"
  },
  {
    "text": "this uh best practices document and it also contains lot of simple trips tips",
    "start": "108840",
    "end": "114479"
  },
  {
    "text": "and and uh and tactics for individual Concepts uh so I highly highly recommend",
    "start": "114479",
    "end": "120439"
  },
  {
    "text": "passing it on to other friends and and colleagues who who would want to learn about Cloud",
    "start": "120439",
    "end": "126039"
  },
  {
    "text": "architectures so let me talk about briefly the technical benefits of uh of",
    "start": "126039",
    "end": "132040"
  },
  {
    "start": "129000",
    "end": "129000"
  },
  {
    "text": "the cloud and and I I I I assume that most of you might already know about the",
    "start": "132040",
    "end": "138080"
  },
  {
    "text": "cloud and and this particular you know five things which I feel are important",
    "start": "138080",
    "end": "143400"
  },
  {
    "text": "from an architect perspective uh to understand and and sort of make it an",
    "start": "143400",
    "end": "149040"
  },
  {
    "text": "intrinsic part part of the application architectures is design and these are some of the things that I like uh from",
    "start": "149040",
    "end": "155879"
  },
  {
    "text": "an architect perspective about the cloud the first thing is know abstract",
    "start": "155879",
    "end": "160959"
  },
  {
    "text": "resources Cloud gives you this uh conceptually infinite um access to uh",
    "start": "160959",
    "end": "167680"
  },
  {
    "text": "all these resources but these resources are really abstract in nature you're not dealing with servers you're not dealing",
    "start": "167680",
    "end": "174440"
  },
  {
    "text": "with hard drives you are dealing with know instances and volumes and these",
    "start": "174440",
    "end": "179480"
  },
  {
    "text": "resources resources are fungible you need to understand that you can if one fails you can quickly get another one",
    "start": "179480",
    "end": "187000"
  },
  {
    "text": "and replace uh the old one to the new one and then keep keep going uh so that",
    "start": "187000",
    "end": "193000"
  },
  {
    "text": "that that's fundamental to the architecture uh principles uh the second important thing is that cloud provides",
    "start": "193000",
    "end": "200080"
  },
  {
    "text": "on demand provisioning and so you can get know as much as you want when",
    "start": "200080",
    "end": "205120"
  },
  {
    "text": "exactly you need it and then you know get rid of it when you exactly don't need it so it's important when you",
    "start": "205120",
    "end": "211400"
  },
  {
    "text": "combine these abstract resources to with the on demand provisioning model you get",
    "start": "211400",
    "end": "216480"
  },
  {
    "text": "this much more powerful Paradigm to work with when it comes to Cloud now the",
    "start": "216480",
    "end": "221840"
  },
  {
    "text": "second the third thing which is is around is around scalability is happening within minutes previously in",
    "start": "221840",
    "end": "227760"
  },
  {
    "text": "the past in the pre- cloud era know it used to take four or five or seven eight months to actually get a server in place",
    "start": "227760",
    "end": "236120"
  },
  {
    "text": "uh now scalability is actually happening in minutes and this actually does change",
    "start": "236120",
    "end": "241319"
  },
  {
    "text": "how you build and design your architectures for example if you are spending you know two days in in",
    "start": "241319",
    "end": "248720"
  },
  {
    "text": "installing and configuring a particular server that does needs to change in the",
    "start": "248720",
    "end": "254439"
  },
  {
    "text": "case of a cloud because you're getting know machine within minutes so that two days of insulation time is is is much",
    "start": "254439",
    "end": "261840"
  },
  {
    "text": "more than uh than what is um possible so in this case you have to understand that",
    "start": "261840",
    "end": "267400"
  },
  {
    "text": "no scalability is happening in minute elas is available so you need to understand that you know take advantage",
    "start": "267400",
    "end": "273639"
  },
  {
    "text": "of those the fourth aspect is know you you have to understand the basic concept",
    "start": "273639",
    "end": "279280"
  },
  {
    "text": "that that you are stop you're actually stop paying um for your resources when",
    "start": "279280",
    "end": "286039"
  },
  {
    "text": "you turn them off so as soon as you optimize your application architecture designs now you you will see the the",
    "start": "286039",
    "end": "294080"
  },
  {
    "text": "results and your savings reflect in your next month bill so this is a continuous",
    "start": "294080",
    "end": "299759"
  },
  {
    "text": "process of optimization and reducing your cost overall so you have to master your tradeoffs as well as make sure that",
    "start": "299759",
    "end": "306919"
  },
  {
    "text": "you're continuously optimizing and last but not the least is the whole automation piece now Cloud gives you",
    "start": "306919",
    "end": "314000"
  },
  {
    "text": "access to scriptable infrastructure so you have to make sure that you automate using the apis the basic ground rule",
    "start": "314000",
    "end": "321440"
  },
  {
    "text": "here is if you're doing know three times a particular thing over and over then it",
    "start": "321440",
    "end": "328479"
  },
  {
    "text": "is it it is a good candidate for you to um uh to automate that process so",
    "start": "328479",
    "end": "334759"
  },
  {
    "text": "investing some time in automation is extremely important so if you make these",
    "start": "334759",
    "end": "339800"
  },
  {
    "text": "basic things inherent about your application and if your application works in a particular way leveraging the",
    "start": "339800",
    "end": "347120"
  },
  {
    "text": "scalable infrastructure both your architecture and your infrastructure Works in concert to give you the",
    "start": "347120",
    "end": "354240"
  },
  {
    "text": "scalability that you are looking for so with that in mind now I want wanted to",
    "start": "354240",
    "end": "360319"
  },
  {
    "start": "360000",
    "end": "360000"
  },
  {
    "text": "quickly zip through the the AWS Cloud uh or the the buffet of services that AWS",
    "start": "360319",
    "end": "367319"
  },
  {
    "text": "provides um Amazon provides regions and each region is having multiple",
    "start": "367319",
    "end": "373520"
  },
  {
    "text": "availability zones availability zones are logical data centers that don't share the same powering cooling flood",
    "start": "373520",
    "end": "379960"
  },
  {
    "text": "panels and fault lines and we have a variety of different Edge locations uh",
    "start": "379960",
    "end": "385840"
  },
  {
    "text": "around the world 18 Edge locations which are uh which will Edge cach static content uh which en close make it closer",
    "start": "385840",
    "end": "393120"
  },
  {
    "text": "to your customers on the top of that infrastructure there are variety of INF infrastructure building blocks and on",
    "start": "393120",
    "end": "399120"
  },
  {
    "text": "the top of that platform on the on on and also there are several know higher",
    "start": "399120",
    "end": "404280"
  },
  {
    "text": "level building blocks which do a specific task for you uh there are V variety of different cross-service",
    "start": "404280",
    "end": "410759"
  },
  {
    "text": "features available which allow you to which allow you to do know things like",
    "start": "410759",
    "end": "416520"
  },
  {
    "text": "monitoring authentication and and automation and then there are variety of different",
    "start": "416520",
    "end": "421800"
  },
  {
    "text": "services available uh to there are variety of different uh tools and and idees and sdks available to access these",
    "start": "421800",
    "end": "429240"
  },
  {
    "text": "Services all the in all the information um is available on this on our website",
    "start": "429240",
    "end": "435639"
  },
  {
    "text": "at aws.amazon.com so I'm not going to spend time talking about the cloud and assume things that you know uh about AWS",
    "start": "435639",
    "end": "443879"
  },
  {
    "text": "uh in in general so now let me quickly go into know uh specifics of of some of",
    "start": "443879",
    "end": "450240"
  },
  {
    "start": "449000",
    "end": "449000"
  },
  {
    "text": "the lessons that we have learned some of the things that we feel are very important uh to address when you are",
    "start": "450240",
    "end": "457639"
  },
  {
    "text": "building uh elastic Cloud architectures so to to get to understand",
    "start": "457639",
    "end": "465400"
  },
  {
    "text": "now these are the basic six things and this is also a part of the white paper so please feel free to read through some",
    "start": "465400",
    "end": "471840"
  },
  {
    "text": "of those as well um so basic concepts and basic lessons that we have learned is design for failure and nothing will",
    "start": "471840",
    "end": "478599"
  },
  {
    "text": "fail and I'm going to talk about in little bit more detail about some of those examples and and and best",
    "start": "478599",
    "end": "486199"
  },
  {
    "text": "practices around these basic uh lessons uh so without any further Ado let's go",
    "start": "486199",
    "end": "491360"
  },
  {
    "text": "into the first one first one is design for failure and nothing fails now it it it's it's very",
    "start": "491360",
    "end": "499199"
  },
  {
    "start": "495000",
    "end": "495000"
  },
  {
    "text": "simple and very easy to understand that if you are the basic rule of thumb is",
    "start": "499199",
    "end": "504759"
  },
  {
    "text": "that be pessimistic when designing architectures in the cloud assume that things will fail and and by assuming",
    "start": "504759",
    "end": "512800"
  },
  {
    "text": "that things will fail always design and Implement and deploy for automat automated recovery from failure in",
    "start": "512800",
    "end": "519719"
  },
  {
    "text": "particular now assume that your Hardware will fail outages will occur assume that some disaster will strike now assume",
    "start": "519719",
    "end": "527200"
  },
  {
    "text": "that you will be slammed with more and more expected number of requests per day someday um or per second someday assume",
    "start": "527200",
    "end": "536000"
  },
  {
    "text": "that your time uh your application uh was WR the software will also fail now",
    "start": "536000",
    "end": "541920"
  },
  {
    "text": "so by being pessimistic you end up thinking about recovery strategies during design time and which helps in",
    "start": "541920",
    "end": "548680"
  },
  {
    "text": "designing an overall system better so if you realize that things fail over time",
    "start": "548680",
    "end": "553959"
  },
  {
    "text": "and you incor incorporate that thinking into your architecture building mechanisms to handle that failure before",
    "start": "553959",
    "end": "560440"
  },
  {
    "text": "disaster strikes to deal with with a scalable infrastructure you end up creating a fall tolerant architecture",
    "start": "560440",
    "end": "567320"
  },
  {
    "text": "that is optimized for the cloud in know in in in know questions that you have to ask are things like what happens if a",
    "start": "567320",
    "end": "574640"
  },
  {
    "text": "node particular node fails in the system how do you recognize that failure how do I replace that particular node what kind",
    "start": "574640",
    "end": "581240"
  },
  {
    "text": "of scenarios do I have to plan for what are the single points of failure if I have a load balancer sitting in front of",
    "start": "581240",
    "end": "587519"
  },
  {
    "text": "an array of application servers what if that load balancer fails if the if there is a Master Slave uh in your",
    "start": "587519",
    "end": "594240"
  },
  {
    "text": "architecture what if the master fails and how do how does it fail over and and how is it how new inst new slave is",
    "start": "594240",
    "end": "600959"
  },
  {
    "text": "instantiated and brought in sync with the master so these are basic things which I feel are very important and if",
    "start": "600959",
    "end": "607480"
  },
  {
    "text": "you make it part of your if you ask these questions it will help you build a better design so let's see some of the",
    "start": "607480",
    "end": "613560"
  },
  {
    "text": "basic tactics of how you can leverage some of the AWS principles AWS services",
    "start": "613560",
    "end": "620640"
  },
  {
    "text": "in in uh know building such AA a and application the first one uh that that I",
    "start": "620640",
    "end": "627560"
  },
  {
    "text": "think is important is to use scalable fault tolerance Services as ingredients",
    "start": "627560",
    "end": "632959"
  },
  {
    "text": "of your app so and a basic example here is that this is a typical you know",
    "start": "632959",
    "end": "639440"
  },
  {
    "text": "single instance uh web application um architecture diagram that is running in",
    "start": "639440",
    "end": "645880"
  },
  {
    "text": "a single availability zone now you have a load balancer you have uh Autos",
    "start": "645880",
    "end": "651240"
  },
  {
    "text": "scaling group your web and app servers are running in an application instance uh you have a database that is running",
    "start": "651240",
    "end": "658760"
  },
  {
    "text": "EBS volume uh I mean that's mounted to an E uh EBS volume is mounted to an ec2",
    "start": "658760",
    "end": "664800"
  },
  {
    "text": "instance and then you are taking periodic snapshots to Amazon S3 uh the",
    "start": "664800",
    "end": "670240"
  },
  {
    "text": "the reason I mention I have uh cloudfront and Amazon S3 in this",
    "start": "670240",
    "end": "675720"
  },
  {
    "text": "particular uh diagram is that is because you can isolate your static load versus",
    "start": "675720",
    "end": "681600"
  },
  {
    "text": "your Dynamic traffic and put all your JavaScript your audio video all your",
    "start": "681600",
    "end": "687240"
  },
  {
    "text": "blob files in S3 and uh and distribute them using Cloud",
    "start": "687240",
    "end": "692639"
  },
  {
    "text": "friend so so your servers or your application server is not really loaded",
    "start": "692639",
    "end": "698720"
  },
  {
    "text": "so by building that kind of a design you have no you're doing a little bit more",
    "start": "698720",
    "end": "703800"
  },
  {
    "text": "you're putting less load on your application server if you want to use more services now services like Amazon",
    "start": "703800",
    "end": "711760"
  },
  {
    "text": "SNS will help you you know notify if some things go wrong in your architect in your infrastructure uh you can take",
    "start": "711760",
    "end": "718880"
  },
  {
    "text": "off some of the load from your application by putting data in uh like key value style data in Amazon simple DB",
    "start": "718880",
    "end": "726800"
  },
  {
    "text": "configuration data in simple DB and you have to keep on monitoring your resources using cloud cloud watch so by",
    "start": "726800",
    "end": "733920"
  },
  {
    "text": "building this basic uh scalable um uh using some of these scalable Services",
    "start": "733920",
    "end": "739880"
  },
  {
    "text": "you are taking load of your application uh servers and then building a better design overall so I believe you know if",
    "start": "739880",
    "end": "747160"
  },
  {
    "text": "you're building a small application this is one way to build a fa to application",
    "start": "747160",
    "end": "752360"
  },
  {
    "text": "so the second principle which I feel that one of the uh things that you should do is you take periodic snapshots",
    "start": "752360",
    "end": "759760"
  },
  {
    "text": "of your EBS volumes and the reason I mentioned this and the reason I feel is is a good best practice for Designing",
    "start": "759760",
    "end": "765959"
  },
  {
    "text": "for failure is that but if if let's say the ec2 EBS volume failed then know you",
    "start": "765959",
    "end": "772560"
  },
  {
    "text": "can quickly take snapshots uh from Amazon S3 and and restore your s",
    "start": "772560",
    "end": "779440"
  },
  {
    "text": "snapshot and connect your ec2 instance uh back to to your database back to your",
    "start": "779440",
    "end": "786279"
  },
  {
    "text": "ec2 instance running the application servers um there are always you know",
    "start": "786279",
    "end": "792600"
  },
  {
    "text": "snapshotting is a great feature in EBS and it's incremental in nature it does",
    "start": "792600",
    "end": "797720"
  },
  {
    "text": "not store the entire SN blob of content all the time it stores incrementally and",
    "start": "797720",
    "end": "804279"
  },
  {
    "text": "it Stores Only the changed bits so if you have lots of data and your data is",
    "start": "804279",
    "end": "811199"
  },
  {
    "text": "actually changing quite often you are recommended to know take periodic",
    "start": "811199",
    "end": "816320"
  },
  {
    "text": "snapshots more frequently let's say every hour but if your data is not so changing often then your your",
    "start": "816320",
    "end": "823360"
  },
  {
    "text": "requirement or your we recommending taking snapshots probably every day um",
    "start": "823360",
    "end": "829240"
  },
  {
    "text": "so these are some of the things that a lot of our customers do another common approach for EBS volume is that they uh",
    "start": "829240",
    "end": "836600"
  },
  {
    "text": "they take a dedicated uh uh EBS volume which is mirrored of another EBS volume",
    "start": "836600",
    "end": "842560"
  },
  {
    "text": "and then snapshots happen on from that dedicated EBS volume uh in order to",
    "start": "842560",
    "end": "848519"
  },
  {
    "text": "increase not affect the performance of the master so in the case of a master master master slave combination uh now",
    "start": "848519",
    "end": "856079"
  },
  {
    "text": "you are taking snapshot of slaves rather than of taking snapshots of Master not",
    "start": "856079",
    "end": "862360"
  },
  {
    "text": "affecting the performance or the io so these are some of the things which I feel are are really important and take",
    "start": "862360",
    "end": "868440"
  },
  {
    "text": "periodics now shots uh overall the other thing which I feel is important is to",
    "start": "868440",
    "end": "874759"
  },
  {
    "text": "build an Amazon machine image of your of your running instance and and making",
    "start": "874759",
    "end": "879959"
  },
  {
    "text": "sure that you are patching your Amazon machine image and not just the instance",
    "start": "879959",
    "end": "885279"
  },
  {
    "text": "so with your with your latest code as well as your latest security patches and so forth there are two types of Amazon",
    "start": "885279",
    "end": "891440"
  },
  {
    "text": "machine images one is the EPS bagged Amazon machine image which boots off from an Eeps volume and then there are",
    "start": "891440",
    "end": "898759"
  },
  {
    "text": "uh S3 bagged Amazon machine image which is um which is coming from S3 and it",
    "start": "898759",
    "end": "904519"
  },
  {
    "text": "loads onto an ec2 instance and then boots up uh for all practical purposes I",
    "start": "904519",
    "end": "910160"
  },
  {
    "text": "like using EPS backed Amazon machine images because they are significantly",
    "start": "910160",
    "end": "915199"
  },
  {
    "text": "faster as well as it it gives you some cool benefits like suspend and and",
    "start": "915199",
    "end": "920279"
  },
  {
    "text": "resume like features uh so I I preferred using EPS bagged Amazon machine",
    "start": "920279",
    "end": "926880"
  },
  {
    "text": "images so the going further now now using Amazon machine images is one way",
    "start": "926880",
    "end": "933000"
  },
  {
    "text": "another thing which you might have noticed is using the Autos scaling group in this particular diagram you see the",
    "start": "933000",
    "end": "939319"
  },
  {
    "text": "dotted line around the ec2 instance signifying that there is an autoscaling group with minimum configuration of one",
    "start": "939319",
    "end": "947920"
  },
  {
    "text": "instance that means uh the hidden Fe it will is going to use this new feature or",
    "start": "947920",
    "end": "953720"
  },
  {
    "text": "or I would say the hidden feature of aut scaling is the maintaining minimum uh Fleet size",
    "start": "953720",
    "end": "959440"
  },
  {
    "text": "uh so in this case I have one if the instance goes away I can uh uh it will",
    "start": "959440",
    "end": "965600"
  },
  {
    "text": "it will UT scaling service will automatically DET detect using health checks and the load balancer and it will",
    "start": "965600",
    "end": "972480"
  },
  {
    "text": "take the Amazon machine image and then bring that new instance up uh uh within",
    "start": "972480",
    "end": "978120"
  },
  {
    "text": "that particular group so by this is essentially Auto scaling for auto",
    "start": "978120",
    "end": "983160"
  },
  {
    "text": "recovery and we highly recommend having at least one Auto scaling group and uh",
    "start": "983160",
    "end": "989839"
  },
  {
    "text": "having with a minimum setting of one uh if you have a very simple application this is another great way",
    "start": "989839",
    "end": "996440"
  },
  {
    "text": "for Designing for failure so it will automatically be resilient because you have autoscaling group set and and a",
    "start": "996440",
    "end": "1002959"
  },
  {
    "text": "launch configuration set um the the other benefit of the Autos scaling group",
    "start": "1002959",
    "end": "1008399"
  },
  {
    "text": "obviously is to horizontally scale your your web tier um and it so based on your",
    "start": "1008399",
    "end": "1016240"
  },
  {
    "text": "CPU load or your um other met that you are monitoring using Cloud watch you can",
    "start": "1016240",
    "end": "1021600"
  },
  {
    "text": "thres you can set your threshold such that I want to uh automatically spawn",
    "start": "1021600",
    "end": "1026678"
  },
  {
    "text": "new ec2 instances you know um U if if certain threshold is already met so by",
    "start": "1026679",
    "end": "1034038"
  },
  {
    "text": "building an order scaling group and managing that it it make it helps you build better application",
    "start": "1034039",
    "end": "1040120"
  },
  {
    "start": "1040000",
    "end": "1040000"
  },
  {
    "text": "architectures the other thing which I usually like to talk about is is using",
    "start": "1040120",
    "end": "1046319"
  },
  {
    "text": "uh a a mirrored uh EB yes volume in another availability Zone and doing a",
    "start": "1046319",
    "end": "1052280"
  },
  {
    "text": "data replication and and high availability is a Continuum of of things",
    "start": "1052280",
    "end": "1057960"
  },
  {
    "text": "that you have to do uh and it will help you build better architectures and depending upon your know recovery time",
    "start": "1057960",
    "end": "1064480"
  },
  {
    "text": "objective and Recovery Point objective you can decide what sort of strategies",
    "start": "1064480",
    "end": "1070120"
  },
  {
    "text": "will work for you and what what needs to be more or what needs to be less and so",
    "start": "1070120",
    "end": "1075440"
  },
  {
    "text": "forth so in this particular case now the scenario is is very simple that you are running um your EBS volume um or your",
    "start": "1075440",
    "end": "1084440"
  },
  {
    "text": "ec2 instance is getting uh know synchronized replicated into an Avail",
    "start": "1084440",
    "end": "1089559"
  },
  {
    "text": "another availability Zone and um in this particular case if your ec2 instance or",
    "start": "1089559",
    "end": "1096520"
  },
  {
    "text": "and your EBS volume dies in that availability Zone you can quickly detect",
    "start": "1096520",
    "end": "1102360"
  },
  {
    "text": "uh the that it is down or it is not responding and fail over to these new",
    "start": "1102360",
    "end": "1108080"
  },
  {
    "text": "availability zone so in this particular scenario you H you are having um um",
    "start": "1108080",
    "end": "1114520"
  },
  {
    "text": "higher fall tolerance because your your applic your volumes are spread across",
    "start": "1114520",
    "end": "1120240"
  },
  {
    "text": "multiple uh availability zones and availability zones are as I mentioned earlier are uh fault tolerance zones",
    "start": "1120240",
    "end": "1128120"
  },
  {
    "text": "overall they don't share the same powering cooling that by reducing your probability of",
    "start": "1128120",
    "end": "1134159"
  },
  {
    "text": "failure the other thing which I I like to uh talk about is if if you feel that",
    "start": "1134159",
    "end": "1139720"
  },
  {
    "text": "you don't you need slightly more better uh fall tolerance as well as high",
    "start": "1139720",
    "end": "1145480"
  },
  {
    "text": "availability you can above and over these General tactics of know or mirroring into a new availability Zone",
    "start": "1145480",
    "end": "1152320"
  },
  {
    "text": "from data replication side you can actually do on demand application provisioning in a different a so in this",
    "start": "1152320",
    "end": "1159919"
  },
  {
    "text": "scenario you're running that the similar to an old scenario where you know you're",
    "start": "1159919",
    "end": "1165400"
  },
  {
    "text": "running a syn you're doing synchronous replication from one availability Zone to another availability Zone and then",
    "start": "1165400",
    "end": "1172280"
  },
  {
    "text": "now in case of let's say the entire fleet of Amazon ec2 instances in one",
    "start": "1172280",
    "end": "1177880"
  },
  {
    "text": "availability zones dies or terminates or it fails you can quickly bring up the",
    "start": "1177880",
    "end": "1183880"
  },
  {
    "text": "the same uh Fleet or similar Fleet in another availability Zone and connect",
    "start": "1183880",
    "end": "1188960"
  },
  {
    "text": "the dots with the load balancer as well as the ec2 instance so that you have",
    "start": "1188960",
    "end": "1195120"
  },
  {
    "text": "higher fall tolerance the the basic benefit of doing this is is the fact",
    "start": "1195120",
    "end": "1200320"
  },
  {
    "text": "that um you can um um you uh you have an",
    "start": "1200320",
    "end": "1205679"
  },
  {
    "text": "ability to spread your your risk across multiple availability zones and you uh",
    "start": "1205679",
    "end": "1211760"
  },
  {
    "text": "you have a better design um the the the higher end on that part also is like",
    "start": "1211760",
    "end": "1217919"
  },
  {
    "text": "multi multi-az application deployment um so in this in the in the previous",
    "start": "1217919",
    "end": "1223760"
  },
  {
    "text": "scenario you were launching your application instances on demand in this",
    "start": "1223760",
    "end": "1229280"
  },
  {
    "text": "particular scenario you are keeping them running all the time and spreading your",
    "start": "1229280",
    "end": "1234320"
  },
  {
    "text": "your uh ec2 footprint across multiple availability zones uh so in this",
    "start": "1234320",
    "end": "1239640"
  },
  {
    "text": "scenario let's say so you you have a typical three tier web application architecture design now you are running",
    "start": "1239640",
    "end": "1246200"
  },
  {
    "text": "your application servers your caching servers and your uh and your databases",
    "start": "1246200",
    "end": "1251240"
  },
  {
    "text": "in a multi-az fashion um if your entire availability Zone uh terminates or you",
    "start": "1251240",
    "end": "1258880"
  },
  {
    "text": "don't have access to that entire availability Zone you are running you can quickly readjust the capacity in",
    "start": "1258880",
    "end": "1266200"
  },
  {
    "text": "another availability zones that are running and then uh and quickly know",
    "start": "1266200",
    "end": "1271520"
  },
  {
    "text": "come come back to speed or instead know reduce uh any or not use the unhealthy",
    "start": "1271520",
    "end": "1278240"
  },
  {
    "text": "availability Zone and keep using the healthy availability zones so by this",
    "start": "1278240",
    "end": "1283279"
  },
  {
    "text": "you are having additional higher availability of your uh of your application and you're building a better",
    "start": "1283279",
    "end": "1289640"
  },
  {
    "text": "design and based on your application um requirements you can decide how much cost versus how much uh",
    "start": "1289640",
    "end": "1297480"
  },
  {
    "text": "know fall tolerance you would want to have and and as I mentioned earlier it's",
    "start": "1297480",
    "end": "1303080"
  },
  {
    "text": "really understanding the trade-offs and then mastering the trade-offs and so forth cost increased significantly here",
    "start": "1303080",
    "end": "1311159"
  },
  {
    "text": "since the excess of compute is always provisioned but the benefits to high availability May warrant this increase",
    "start": "1311159",
    "end": "1317919"
  },
  {
    "text": "in cost so it is extremely important to understand so these are the basic things which I feel you know one can do in when",
    "start": "1317919",
    "end": "1325520"
  },
  {
    "text": "designing for failure and then understanding uh understanding the basic constructs of building a higher",
    "start": "1325520",
    "end": "1332559"
  },
  {
    "text": "availability architecture the the second uh principle which I like to usually talk about is",
    "start": "1332559",
    "end": "1339799"
  },
  {
    "start": "1336000",
    "end": "1336000"
  },
  {
    "text": "the fact that know you have to build Loosely coupled application um in this in this scenario on each other so that",
    "start": "1339799",
    "end": "1346440"
  },
  {
    "text": "if one component were to die fail will sleep not respond know or remain busy or",
    "start": "1346440",
    "end": "1351600"
  },
  {
    "text": "it's just slow to respond for some reason the other components in the system are built so that they continue",
    "start": "1351600",
    "end": "1357640"
  },
  {
    "text": "to work as if the no failure has happened in essence loose coupling now kind of isolates the various layers of",
    "start": "1357640",
    "end": "1365200"
  },
  {
    "text": "the components of your application so that each component interacts asynchronously with the other and treats",
    "start": "1365200",
    "end": "1371919"
  },
  {
    "text": "them as back black box uh so this is a basic principle of a service oriented architecture design which you might have",
    "start": "1371919",
    "end": "1378960"
  },
  {
    "text": "have um uh heard and learned in the past but these are more relevant in the in",
    "start": "1378960",
    "end": "1384000"
  },
  {
    "text": "the cloud speak so to say uh this is reason is that if you define your service and you define your service",
    "start": "1384000",
    "end": "1390440"
  },
  {
    "text": "level agreement and the way it has to you know interact uh then it should be",
    "start": "1390440",
    "end": "1395919"
  },
  {
    "text": "treated as black box and and and all the services are responsible for its own",
    "start": "1395919",
    "end": "1401919"
  },
  {
    "text": "scalability and its own security so by building that better design then the",
    "start": "1401919",
    "end": "1407440"
  },
  {
    "text": "loser they are coup the bigger they will be able to scale one way to achieve that scalability and loose coupless is",
    "start": "1407440",
    "end": "1414279"
  },
  {
    "text": "through tight coupling you can have know tight coupling between controller a and controller B but instead you can take",
    "start": "1414279",
    "end": "1421360"
  },
  {
    "text": "advantage of the cues uh to uh to have loose coupling between those controllers",
    "start": "1421360",
    "end": "1427000"
  },
  {
    "text": "so in this case the cues act as buffers so in case lots of requests are hitting controller a they get buffered and even",
    "start": "1427000",
    "end": "1434200"
  },
  {
    "text": "if let's say the con controller B dies you can quickly resume the state after reading the messages from the queue and",
    "start": "1434200",
    "end": "1441400"
  },
  {
    "text": "bring that new uh controller B quickly up so it has to be more fungible it is",
    "start": "1441400",
    "end": "1446559"
  },
  {
    "text": "not only fungible but it's also resilient to to reboot and relaunches and that brings me to the third uh best",
    "start": "1446559",
    "end": "1455159"
  },
  {
    "start": "1453000",
    "end": "1453000"
  },
  {
    "text": "practice or a lesson that we have learned uh is is the fact that elasticity has to be implemented in in",
    "start": "1455159",
    "end": "1462559"
  },
  {
    "text": "variety of different ways and elasticity is a is fundamental property of the cloud and lots of its",
    "start": "1462559",
    "end": "1469159"
  },
  {
    "text": "of the cloud benefits are driven by uh this uh this elasticity essentially you don't need to",
    "start": "1469159",
    "end": "1476480"
  },
  {
    "text": "run your application your web application if you don't want are not being accessed or users are not using it",
    "start": "1476480",
    "end": "1483679"
  },
  {
    "text": "uh you're building applications that sleep at night uh you are building applications that are following the Sun",
    "start": "1483679",
    "end": "1489880"
  },
  {
    "text": "and only alive during the 9 to 5 period And while know transferring traffic to",
    "start": "1489880",
    "end": "1496039"
  },
  {
    "text": "other parts of the region so you can you can build better architectures by building elastic uh elasticity into your",
    "start": "1496039",
    "end": "1503399"
  },
  {
    "text": "application so how do you build Implement elasticity uh into into your",
    "start": "1503399",
    "end": "1508559"
  },
  {
    "text": "application architecture the one thing which I really like to talk about in this particular scenario is that um you",
    "start": "1508559",
    "end": "1517039"
  },
  {
    "text": "you you have to uh bootstrap your ec2 instances um so by bootstrapping what I",
    "start": "1517039",
    "end": "1523080"
  },
  {
    "text": "mean on boot up know the instance knows what it has to do and and and it it will",
    "start": "1523080",
    "end": "1530440"
  },
  {
    "text": "uh know do the right thing uh it it the the best way to kind of um understand",
    "start": "1530440",
    "end": "1536799"
  },
  {
    "text": "this is uh you have to uh have instances when they come up ask you a question who",
    "start": "1536799",
    "end": "1543159"
  },
  {
    "text": "am I and what is my role and then you pass them a parameter saying you are a web role you have to uh depending upon",
    "start": "1543159",
    "end": "1550919"
  },
  {
    "text": "your web role uh or your any other characteristic you have to start aache",
    "start": "1550919",
    "end": "1556000"
  },
  {
    "text": "you have to start these many things in your as processes and you're bootstrapping it in such a way that it",
    "start": "1556000",
    "end": "1561880"
  },
  {
    "text": "knows which nodes it has to connect to as well so if it's running application server it knows that it has to go and",
    "start": "1561880",
    "end": "1568880"
  },
  {
    "text": "take the connection string and um and uh know connect to the database server and",
    "start": "1568880",
    "end": "1574919"
  },
  {
    "text": "so forth so by building this dynamicity which uh which really helps you build",
    "start": "1574919",
    "end": "1581320"
  },
  {
    "text": "know better architecture designs um one thing which I like to know take",
    "start": "1581320",
    "end": "1586600"
  },
  {
    "text": "advantage is definitely use Auto scaling and elastic load balancing so when you spin up this new instance you don't know",
    "start": "1586600",
    "end": "1593120"
  },
  {
    "text": "where exactly it is now the instance goes does get an IP address dynamically",
    "start": "1593120",
    "end": "1598320"
  },
  {
    "text": "but it does not know what to do and how to talk to other instances in the cluster what is its role what happens",
    "start": "1598320",
    "end": "1604360"
  },
  {
    "text": "when it goes down so if the node is an app server know you can you can give them an instructor instruction that you",
    "start": "1604360",
    "end": "1611279"
  },
  {
    "text": "go have to go and talk to the database server and so so that recognizing that in the cloud World things are much more",
    "start": "1611279",
    "end": "1618360"
  },
  {
    "text": "Dynamic you know realizing that there is much more flexible model due to this on provis on on demand provisioning nature",
    "start": "1618360",
    "end": "1625399"
  },
  {
    "text": "of the cloud and then then things tend to change and does change more faster so",
    "start": "1625399",
    "end": "1630679"
  },
  {
    "text": "if you build mechanism to handle this Dynamic nature and Implement elasticity into your architecture you will see that",
    "start": "1630679",
    "end": "1637480"
  },
  {
    "text": "your your application is cloud aware so in in in this particular",
    "start": "1637480",
    "end": "1643039"
  },
  {
    "text": "scenario um you know you I recommend know three basic things or are four",
    "start": "1643039",
    "end": "1649080"
  },
  {
    "start": "1646000",
    "end": "1646000"
  },
  {
    "text": "things from a software side of things how could your software uh be should how",
    "start": "1649080",
    "end": "1654600"
  },
  {
    "text": "your software should be built within the instance uh so that they are know ready",
    "start": "1654600",
    "end": "1659760"
  },
  {
    "text": "for these types of elasticity and I feel there are four things that it has to be",
    "start": "1659760",
    "end": "1664919"
  },
  {
    "text": "done here uh first it has to be resilient to reboots and relaunches that means uh I want to if I terminate",
    "start": "1664919",
    "end": "1672760"
  },
  {
    "text": "randomly any ec2 instance it should bring up another one and uh boot itself",
    "start": "1672760",
    "end": "1679840"
  },
  {
    "text": "and and and um resume the current operations um I I really like now",
    "start": "1679840",
    "end": "1686159"
  },
  {
    "text": "Netflix um pattern here which is very popular it's called chaos monkey pattern",
    "start": "1686159",
    "end": "1692399"
  },
  {
    "text": "um what what it does is uh it's a simple tool that randomly terminates ec2",
    "start": "1692399",
    "end": "1697799"
  },
  {
    "text": "instances in their Fleet um so so they know and they can test that if it has",
    "start": "1697799",
    "end": "1704519"
  },
  {
    "text": "failed um if if that instance is down it should frequ quickly bring up another ac2 instance and connect the dots and",
    "start": "1704519",
    "end": "1712159"
  },
  {
    "text": "Coes itself into the cluster blend itself into the cluster um the general",
    "start": "1712159",
    "end": "1717960"
  },
  {
    "text": "ground rule that I like to talk about is the is that if you know that your instance is running for more than two or",
    "start": "1717960",
    "end": "1724960"
  },
  {
    "text": "three days then it's the right time to know maybe shut it off and create you",
    "start": "1724960",
    "end": "1730360"
  },
  {
    "text": "know see whether another one comes up and and runs by itself without breaking",
    "start": "1730360",
    "end": "1735399"
  },
  {
    "text": "any slas or or any business slas overall so making sure that it's resilient to",
    "start": "1735399",
    "end": "1740720"
  },
  {
    "text": "reboot and relaunch is fundamental secondly uh know making sure that you're",
    "start": "1740720",
    "end": "1745880"
  },
  {
    "text": "taking out or extracting out all the stateful components and then making your",
    "start": "1745880",
    "end": "1751559"
  },
  {
    "text": "applica making your application stateless and this is very important when building better architectures third",
    "start": "1751559",
    "end": "1758320"
  },
  {
    "text": "and I feel it's more important if you can package it into an Ami or if you can run into run multiple instances of your",
    "start": "1758320",
    "end": "1765000"
  },
  {
    "text": "application on a single ec2 instance or run multiple instances of that on",
    "start": "1765000",
    "end": "1770399"
  },
  {
    "text": "multiple ec2 instances then it is a good candidate for the cloud as well so you can build that into into it and last but",
    "start": "1770399",
    "end": "1777360"
  },
  {
    "text": "not the least of course know being as Loosely coupled as possible so if you have built this basic elasticity into",
    "start": "1777360",
    "end": "1784440"
  },
  {
    "text": "your architecture now you will uh you will get better elasticity overall so as",
    "start": "1784440",
    "end": "1791320"
  },
  {
    "start": "1785000",
    "end": "1785000"
  },
  {
    "text": "you know um there are basic simple um Stacks available right know um cloud",
    "start": "1791320",
    "end": "1798039"
  },
  {
    "text": "allows you to build these Amazon machine images and help you uh know um save a",
    "start": "1798039",
    "end": "1803279"
  },
  {
    "text": "lot of time uh and increase the productivity overall because you can share these pre-configured machine",
    "start": "1803279",
    "end": "1809960"
  },
  {
    "text": "images with others and so you don't have to know do this over and over again and",
    "start": "1809960",
    "end": "1816000"
  },
  {
    "text": "this will help you in building better elastic architecture so I have three different approaches in designing your",
    "start": "1816000",
    "end": "1822000"
  },
  {
    "start": "1817000",
    "end": "1817000"
  },
  {
    "text": "Amazon machine image and depending upon the design depending upon your use case",
    "start": "1822000",
    "end": "1827159"
  },
  {
    "text": "and depending upon your uh know time that you have to Build architecture you should pick and choose the right",
    "start": "1827159",
    "end": "1833960"
  },
  {
    "text": "pattern so I like to call this as three Pizza models and it's very easy to remember as well the frozen pizza model",
    "start": "1833960",
    "end": "1841440"
  },
  {
    "text": "the taken bake model uh and and the made to order model and let me go into a",
    "start": "1841440",
    "end": "1847200"
  },
  {
    "text": "little bit more detail of each one of these now for the frozen pizza model which is basically you know taking",
    "start": "1847200",
    "end": "1853440"
  },
  {
    "start": "1848000",
    "end": "1848000"
  },
  {
    "text": "everything that you have in a stack and then bundling that into an Amazon machine image and then maintaining this",
    "start": "1853440",
    "end": "1859320"
  },
  {
    "text": "inventory of Amazon machine images for you so you can you know take build that",
    "start": "1859320",
    "end": "1865000"
  },
  {
    "text": "Amazon machine image and then share it among your team members this is very easier to do it's simply a right click",
    "start": "1865000",
    "end": "1870919"
  },
  {
    "text": "on the console to create an Amazon machine image and and and so forth so it's very easier to set up but on the",
    "start": "1870919",
    "end": "1878480"
  },
  {
    "text": "downside you if some things change if your code changes if your library changes you have to recreate that Amazon",
    "start": "1878480",
    "end": "1884919"
  },
  {
    "text": "machine images so kind of it is very difficult to to maintain going forward",
    "start": "1884919",
    "end": "1890080"
  },
  {
    "start": "1889000",
    "end": "1889000"
  },
  {
    "text": "so so there are other models there so in this particular second model where it is more takeen bake model you're",
    "start": "1890080",
    "end": "1896519"
  },
  {
    "text": "maintaining only the things that are not really changing into your Amazon machine",
    "start": "1896519",
    "end": "1902919"
  },
  {
    "text": "image so what I call the golden Amazon machine image and all the other things which are know sort of going to change",
    "start": "1902919",
    "end": "1910519"
  },
  {
    "text": "like your libraries or your code know goes out of that Amazon machine image and then when you know manage it you are",
    "start": "1910519",
    "end": "1917200"
  },
  {
    "text": "fetching that on boot time so when your instances ask you a question who am I it",
    "start": "1917200",
    "end": "1922760"
  },
  {
    "text": "says okay you are a web Ser you're are an application server now it boots up it starts off the right know Tom cat or J",
    "start": "1922760",
    "end": "1929840"
  },
  {
    "text": "boss or whatever and then know bundles that know stretches your know War file",
    "start": "1929840",
    "end": "1935480"
  },
  {
    "text": "from your Java code and bundles that know starts that Tomcat processes and so",
    "start": "1935480",
    "end": "1940840"
  },
  {
    "text": "forth and then runs that on demand uh by that you you you are building a better",
    "start": "1940840",
    "end": "1946399"
  },
  {
    "text": "uh elastic model overall because you are fetching on boot time the last but not",
    "start": "1946399",
    "end": "1953320"
  },
  {
    "start": "1951000",
    "end": "1951000"
  },
  {
    "text": "the least to the third model to build and Implement elasticity is what I call",
    "start": "1953320",
    "end": "1958480"
  },
  {
    "text": "the M to order model uh where in this particular case you are bundling only",
    "start": "1958480",
    "end": "1964200"
  },
  {
    "text": "the know the bare minimum operating system that you need and bundling an",
    "start": "1964200",
    "end": "1969679"
  },
  {
    "text": "Amazon bundling a chef agent or a puppet agent onto an Amazon machine image um",
    "start": "1969679",
    "end": "1976639"
  },
  {
    "text": "and and this is just enough operating system and everything else goes above uh",
    "start": "1976639",
    "end": "1981840"
  },
  {
    "text": "everything else goes know outside the uh Amazon machine image uh how this works",
    "start": "1981840",
    "end": "1987279"
  },
  {
    "text": "is very simple but it's sorry it's very difficult to M it's um very easier to",
    "start": "1987279",
    "end": "1992440"
  },
  {
    "text": "maintain but sort of difficult to set up in an initial uh initial uh way but I",
    "start": "1992440",
    "end": "1997919"
  },
  {
    "text": "highly recommend doing and maintaining this particular approach because uh you can what you can do is you can build",
    "start": "1997919",
    "end": "2004120"
  },
  {
    "text": "these recipes you can build these cookbooks these are basically infrastructure scripts that says you if",
    "start": "2004120",
    "end": "2011519"
  },
  {
    "text": "it's an application server install a Pache if it is a sorry if it's a web",
    "start": "2011519",
    "end": "2016679"
  },
  {
    "text": "server install Apache if it's an application server install Tomcat contact uh the database server in this",
    "start": "2016679",
    "end": "2023279"
  },
  {
    "text": "particular way connect the dots now you can script that whole thing into a recipe and you run that recipe on boot",
    "start": "2023279",
    "end": "2029679"
  },
  {
    "text": "time and it will run it for you so you are completely taking advantage of the",
    "start": "2029679",
    "end": "2034799"
  },
  {
    "text": "programmable infrastructure using Scripts so this is a much more Dynamic model and much more preferred model over",
    "start": "2034799",
    "end": "2041360"
  },
  {
    "text": "others uh but it's sort of difficult to maintain and build too so depending upon",
    "start": "2041360",
    "end": "2046760"
  },
  {
    "text": "your right strategy depending upon your use case I believe I I encourage you to take advantage of these tips uh overall",
    "start": "2046760",
    "end": "2054760"
  },
  {
    "text": "the fourth and uh lesson which I feel is important uh to understand is that now",
    "start": "2054760",
    "end": "2062000"
  },
  {
    "start": "2056000",
    "end": "2056000"
  },
  {
    "text": "security has to be built in every single layer Security in the cloud is a sh",
    "start": "2062000",
    "end": "2067720"
  },
  {
    "text": "shared responsibility and and it has to be uh Incorporated um in in everything you do",
    "start": "2067720",
    "end": "2076358"
  },
  {
    "text": "and it is not an optional thing uh so uh with with that in mind I wanted to bring",
    "start": "2076359",
    "end": "2081440"
  },
  {
    "start": "2080000",
    "end": "2080000"
  },
  {
    "text": "up some aspects about the AWS cloud in the in the cloud security is a shared",
    "start": "2081440",
    "end": "2088280"
  },
  {
    "text": "responsibility so there are several things that are uh infrastructure security perspectives so in this case um",
    "start": "2088280",
    "end": "2096720"
  },
  {
    "text": "anything below the hypervisor and to the concrete uh it is the responsibility of",
    "start": "2096720",
    "end": "2102480"
  },
  {
    "text": "Amazon web services to make sure that it is secure physical security making sure that there are enough know surveillance",
    "start": "2102480",
    "end": "2109520"
  },
  {
    "text": "cameras making sure there are enough uh know levels of access before anybody has",
    "start": "2109520",
    "end": "2115599"
  },
  {
    "text": "access to a physical control uh a physical environment uh making sure that",
    "start": "2115599",
    "end": "2121240"
  },
  {
    "text": "light right certification standards are met ISO 27,000 one actually tells what",
    "start": "2121240",
    "end": "2127200"
  },
  {
    "text": "to do while SAS 70 type 2 audit you know shows what we are doing and how we are",
    "start": "2127200",
    "end": "2132839"
  },
  {
    "text": "doing in a different control objective ways and there are how how do we do change management and so forth so these",
    "start": "2132839",
    "end": "2138839"
  },
  {
    "text": "are all available to you on uh on on request so know you can take advantage",
    "start": "2138839",
    "end": "2144520"
  },
  {
    "text": "of that the the other one is PCI DSS 2.0 validated service provider level one",
    "start": "2144520",
    "end": "2150440"
  },
  {
    "text": "compliant know there are s several Services which are compliant PCI Compliant so you can take advantage of",
    "start": "2150440",
    "end": "2158760"
  },
  {
    "text": "know credit card type workloads and the beauty is that even though you don't have credit card workload you still get",
    "start": "2158760",
    "end": "2164680"
  },
  {
    "text": "the same security that you you get with this infrastructure the other thing",
    "start": "2164680",
    "end": "2170520"
  },
  {
    "text": "other part of the pie is that there are several Security Options and features available to you so that you can make",
    "start": "2170520",
    "end": "2177440"
  },
  {
    "text": "the right choice whether it is right for your application um um and so things",
    "start": "2177440",
    "end": "2183000"
  },
  {
    "text": "like you know enforcing using identity and access management policy",
    "start": "2183000",
    "end": "2188240"
  },
  {
    "text": "making sure that you're using multiactor authentication or using VPC or using know features like bucket policies when",
    "start": "2188240",
    "end": "2195160"
  },
  {
    "text": "you're using S3 and and using security groups and so forth these are options",
    "start": "2195160",
    "end": "2200520"
  },
  {
    "text": "that are given to you and we uh routinely provide best practices guidance on how to use these types of",
    "start": "2200520",
    "end": "2207359"
  },
  {
    "text": "services and features available within that environment and last but not the least that the application security it",
    "start": "2207359",
    "end": "2214720"
  },
  {
    "text": "is responsibility of the application developer to build better architectures",
    "start": "2214720",
    "end": "2219839"
  },
  {
    "text": "and and and know encrypt data in transit encrypt data in rest protecting your own",
    "start": "2219839",
    "end": "2225000"
  },
  {
    "text": "AWS credentials making sure that you're rotating your AWS credentials every you know week or so uh securing your own",
    "start": "2225000",
    "end": "2233000"
  },
  {
    "text": "application by making sure that they are know um they they don't they you can",
    "start": "2233000",
    "end": "2239079"
  },
  {
    "text": "prevent SQL injection or know scoss side scripting errors and so forth so by",
    "start": "2239079",
    "end": "2244280"
  },
  {
    "text": "building this understanding this security landscape it is extremely important that security is a shared",
    "start": "2244280",
    "end": "2250400"
  },
  {
    "text": "responsibility and and um know using this in a particular way will make your",
    "start": "2250400",
    "end": "2255640"
  },
  {
    "text": "application much more secure so the fifth one is uh is around now making",
    "start": "2255640",
    "end": "2261000"
  },
  {
    "start": "2259000",
    "end": "2259000"
  },
  {
    "text": "sure that because Cloud gives you access to lots of resources uh know it's very",
    "start": "2261000",
    "end": "2267160"
  },
  {
    "text": "important to understand and think in parallel think in multi-threaded fashion think in multi- node fashion and build",
    "start": "2267160",
    "end": "2274880"
  },
  {
    "text": "that into your architecture design if certain things you are accessing in S3 I would recommend no multi-threading your",
    "start": "2274880",
    "end": "2281599"
  },
  {
    "text": "request or multi-threading your request to simple DB likewise you know if you have a particular task decompose that",
    "start": "2281599",
    "end": "2288520"
  },
  {
    "text": "job into a multiple uh multiple smaller chunks and then run those chunks in uh",
    "start": "2288520",
    "end": "2294480"
  },
  {
    "text": "multiple um uh nodes in parallel or take advantage of Amazon elastic map reduce",
    "start": "2294480",
    "end": "2301960"
  },
  {
    "text": "uh which which takes care of Hadoop uh which uses Hadoop U framework for distribute your parallel and and and",
    "start": "2301960",
    "end": "2309119"
  },
  {
    "text": "Computing your the jobs in parallel you know and taking advantage of you know uh spot instances as well as Hado in Hado",
    "start": "2309119",
    "end": "2316760"
  },
  {
    "text": "EMR uh elastic map reduce uh know framework you can get much more powerful",
    "start": "2316760",
    "end": "2322680"
  },
  {
    "text": "model for your running your um jobs in this case like analyzing your log files",
    "start": "2322680",
    "end": "2327920"
  },
  {
    "text": "or so analyzing massive amounts of data can be done using these",
    "start": "2327920",
    "end": "2333240"
  },
  {
    "text": "techniques and last one but not the least one is the is the is how you",
    "start": "2333240",
    "end": "2338560"
  },
  {
    "start": "2335000",
    "end": "2335000"
  },
  {
    "text": "should know take advantage of the scal ingredients in your application and",
    "start": "2338560",
    "end": "2345200"
  },
  {
    "text": "leverage different um storage options uh know with Cloud uh with storage uh know",
    "start": "2345200",
    "end": "2352400"
  },
  {
    "text": "one size does not fit all fit all now there are different types of storage options available for different types of",
    "start": "2352400",
    "end": "2358640"
  },
  {
    "text": "storage needs now there are as I mentioned earlier in the diagram uh in the presentation that know you have to",
    "start": "2358640",
    "end": "2366040"
  },
  {
    "text": "take off the load uh from your web server by using Amazon S3 and cloudfront",
    "start": "2366040",
    "end": "2372040"
  },
  {
    "text": "combination uh so you have a better application design and you are having you know uh overall know a uh good",
    "start": "2372040",
    "end": "2380000"
  },
  {
    "text": "database uh distribution um likewise um there are know this simple table will",
    "start": "2380000",
    "end": "2386520"
  },
  {
    "start": "2383000",
    "end": "2383000"
  },
  {
    "text": "help you build understand and um know choose the right storage options to use",
    "start": "2386520",
    "end": "2391880"
  },
  {
    "text": "when and like which one is the Right Storage option like you should use Amazon Rd yes for your relational",
    "start": "2391880",
    "end": "2398640"
  },
  {
    "text": "database lookup uh database um uh storage but it's not ideal for simple",
    "start": "2398640",
    "end": "2404079"
  },
  {
    "text": "lookups or even for blob data storage for blob data storage it's ideal to use",
    "start": "2404079",
    "end": "2409319"
  },
  {
    "text": "Amazon S3 and cloudfront together so use this table to understand which storage",
    "start": "2409319",
    "end": "2415800"
  },
  {
    "text": "option to use when so these are the basic best practices basic lessons that we have",
    "start": "2415800",
    "end": "2422079"
  },
  {
    "start": "2418000",
    "end": "2418000"
  },
  {
    "text": "learned um I highly recommend taking a look at some of the the principles that",
    "start": "2422079",
    "end": "2428040"
  },
  {
    "text": "we have uh on our architecture Center uh we we also have our premium support with",
    "start": "2428040",
    "end": "2434960"
  },
  {
    "text": "the Platinum uh Platinum plan which offers architectural guidance to",
    "start": "2434960",
    "end": "2440400"
  },
  {
    "text": "developers and users and customers so highly take advantage of uh uh of the of",
    "start": "2440400",
    "end": "2446079"
  },
  {
    "text": "signing up uh for um premium support Platinum plan and of course know we",
    "start": "2446079",
    "end": "2451760"
  },
  {
    "text": "routinely blog about different architecture patterns that emerge from our customers in our blog so take it and",
    "start": "2451760",
    "end": "2459000"
  },
  {
    "text": "please do sign up for our blog and it will give you more information of how other customers are actually you know",
    "start": "2459000",
    "end": "2465960"
  },
  {
    "text": "utilizing like Netflix and zingga and how they have actually you know um",
    "start": "2465960",
    "end": "2472000"
  },
  {
    "text": "scaled in their in AWS great thanks so much actually janesh",
    "start": "2472000",
    "end": "2477240"
  },
  {
    "text": "if you um obviously give us some next steps for resources um if you could sort of say what you think one of the best",
    "start": "2477240",
    "end": "2483319"
  },
  {
    "text": "next steps is for the individuals who are attending the webinar um you just take them through that real quick great",
    "start": "2483319",
    "end": "2490560"
  },
  {
    "text": "uh so the best thing I would I would start off is of course first sign up for AWS account if you have not already done",
    "start": "2490560",
    "end": "2497319"
  },
  {
    "text": "so uh go to uh aws.amazon.com",
    "start": "2497319",
    "end": "2502440"
  },
  {
    "text": "architectures um this will bring up the architecture Center if you want to understand more about the architecture",
    "start": "2502599",
    "end": "2509319"
  },
  {
    "text": "uh information and of course now there are variety of different white papers I would like uh two white papers um to if",
    "start": "2509319",
    "end": "2517480"
  },
  {
    "text": "you are interested in building and and designing newer architectures that are optimized for the cloud now looking at",
    "start": "2517480",
    "end": "2523640"
  },
  {
    "text": "this first white paper and the second third white paper which is web hosting best practices will help you build",
    "start": "2523640",
    "end": "2529440"
  },
  {
    "text": "better architectures in the later part in the later um um series of these",
    "start": "2529440",
    "end": "2535040"
  },
  {
    "text": "webinars math is going to cover how you can apply these lessons that we talked about in a context of a web application",
    "start": "2535040",
    "end": "2543119"
  },
  {
    "text": "like how does things change in a web application way what are the two tiers three tier models and so forth so this",
    "start": "2543119",
    "end": "2549200"
  },
  {
    "text": "also is part of web application hosting design so in this case know for the",
    "start": "2549200",
    "end": "2554520"
  },
  {
    "text": "cloud architectures paper now you can um go very deep into understanding the cloud and then now there are basic",
    "start": "2554520",
    "end": "2561440"
  },
  {
    "text": "tactics in this gray box which help you understand that these are some of the things that you absolutely have to do",
    "start": "2561440",
    "end": "2568040"
  },
  {
    "text": "for example a simple question that comes up all the time is um should we use",
    "start": "2568040",
    "end": "2573119"
  },
  {
    "text": "private DNS of the server of of the ec2 instance or or to expose and connect to",
    "start": "2573119",
    "end": "2579079"
  },
  {
    "text": "the EBS uh connect to the cames um I would I would highly recommend using",
    "start": "2579079",
    "end": "2584480"
  },
  {
    "text": "elastic IPS or using um elastic load balancers uh in front of the ec2",
    "start": "2584480",
    "end": "2592160"
  },
  {
    "text": "instance which will give you so that it gives you uh not only the power to horizontally scale but also to change",
    "start": "2592160",
    "end": "2599319"
  },
  {
    "text": "your ec2 instances and quickly replace them so janesh we have a question from",
    "start": "2599319",
    "end": "2605240"
  },
  {
    "text": "Jonathan who was talking just about that and actually Matt if you could F this one Jonathan asked how do you map your",
    "start": "2605240",
    "end": "2611559"
  },
  {
    "text": "domain into the cloud and what logic allows it to quickly map to New",
    "start": "2611559",
    "end": "2617119"
  },
  {
    "text": "instances is it simply one elastic IP that is constantly remapping with the",
    "start": "2617119",
    "end": "2622680"
  },
  {
    "text": "low Downer to instances yeah so um by domain usually",
    "start": "2622680",
    "end": "2628400"
  },
  {
    "text": "I'm I'm assuming this is a Windows question that's usually the uh the operating system people refer to when they're talking about domains um yeah so",
    "start": "2628400",
    "end": "2635079"
  },
  {
    "text": "when you run a domain uh inside of a it's very similar to how you'd run a domain in any other uh environment uh",
    "start": "2635079",
    "end": "2641599"
  },
  {
    "text": "you obviously have to have domain controllers set up domain controllers themselves is you can imagine don't lend themselves well to uh to cloning or",
    "start": "2641599",
    "end": "2649000"
  },
  {
    "text": "spouting up alternates um when you're dealing with domain controls you have to launch the manually you know provision",
    "start": "2649000",
    "end": "2654559"
  },
  {
    "text": "them make sure you uh you know promote them as appropriate to a primary domain controller secondary when you set up",
    "start": "2654559",
    "end": "2660680"
  },
  {
    "text": "your environment now when it comes to launching new instances that want to be members of those domains um that is uh",
    "start": "2660680",
    "end": "2667520"
  },
  {
    "text": "certainly scriptable um it does require a little bit more effort um than uh than",
    "start": "2667520",
    "end": "2672680"
  },
  {
    "text": "other operating systems but what you would do is you would pass in um when launching a new instance you'd pass in",
    "start": "2672680",
    "end": "2678760"
  },
  {
    "text": "the IP address um uh information for the primary domain controller um for the",
    "start": "2678760",
    "end": "2683920"
  },
  {
    "text": "domain uh and then the first thing you'd need to do on that instance is actually modify its DNS settings so it knows to",
    "start": "2683920",
    "end": "2689839"
  },
  {
    "text": "look to that domain controller um for domain information and then using uh Powershell scripting uh combined with uh",
    "start": "2689839",
    "end": "2696640"
  },
  {
    "text": "commands like like net.exe uh you would go ahead and actually add that machine",
    "start": "2696640",
    "end": "2701720"
  },
  {
    "text": "dynamically um to The Domain um that will require the machine to uh you know",
    "start": "2701720",
    "end": "2706839"
  },
  {
    "text": "add require a reboot and then once it's um rebooted and then in place and actually joined as a full domain member",
    "start": "2706839",
    "end": "2712920"
  },
  {
    "text": "uh then you know it can on the next pass through it can look to confirm that it's a member and then do what other what",
    "start": "2712920",
    "end": "2718240"
  },
  {
    "text": "other remaining scripting activities you might need uh to go ahead and get that machine operating properly inside the domain um so and of course if you're",
    "start": "2718240",
    "end": "2725640"
  },
  {
    "text": "extending an existing domain out to the cloud um then what you can do as opposed to setting up a domain in the cloud you",
    "start": "2725640",
    "end": "2732040"
  },
  {
    "text": "can use active directory Federation Services um which allow you to actually Federate your active do active directory",
    "start": "2732040",
    "end": "2738200"
  },
  {
    "text": "domain um into a into a non non- internal environment which of course you",
    "start": "2738200",
    "end": "2743720"
  },
  {
    "text": "can use to extend your domain controller out to the cloud for Federation um for getting access for control so there's a",
    "start": "2743720",
    "end": "2749559"
  },
  {
    "text": "couple different approaches you know one being setting up your own custom domain inside the clock um or or a readon trust",
    "start": "2749559",
    "end": "2755319"
  },
  {
    "text": "relationship with a domain in the clock um or using adfs or active main Federation Services as a way to Federate",
    "start": "2755319",
    "end": "2761400"
  },
  {
    "text": "that domain into those are the two models that we've seen customers use most effectively yeah just to add to",
    "start": "2761400",
    "end": "2767160"
  },
  {
    "text": "that point now we have a really good uh adfs paper for single sign on which is",
    "start": "2767160",
    "end": "2772559"
  },
  {
    "text": "very detailed talking about all the different ways in which you can set up adfs on Windows uh using on on ec2 so",
    "start": "2772559",
    "end": "2781200"
  },
  {
    "text": "please do take a look at this 32 page white paper uh that's on uh AWS that I'm",
    "start": "2781200",
    "end": "2787160"
  },
  {
    "text": "amazon.com white papers so janesh um we're we're a little",
    "start": "2787160",
    "end": "2792920"
  },
  {
    "text": "light of questions right now so again everyone please feel free to write in your questions um do you have any type",
    "start": "2792920",
    "end": "2799440"
  },
  {
    "text": "of quick howto or or something you could do along those lines um that references",
    "start": "2799440",
    "end": "2806160"
  },
  {
    "text": "some of the portions of the talk that you just gave and actually showing them how to do",
    "start": "2806160",
    "end": "2811599"
  },
  {
    "text": "that sure uh but let me let me go and one of the typical questions that that",
    "start": "2811599",
    "end": "2817160"
  },
  {
    "text": "that comes uh that that was in the earlier webinars as well is that how can you use now um you know Cloud to your",
    "start": "2817160",
    "end": "2825599"
  },
  {
    "text": "advantage when upgrading to new uh versions of your application um and I",
    "start": "2825599",
    "end": "2831880"
  },
  {
    "text": "think know this is a this is a very good um uh very important to address this",
    "start": "2831880",
    "end": "2837119"
  },
  {
    "text": "that you can take advantage of some of the dynamicity of the cloud uh and you don't have to really you know move uh",
    "start": "2837119",
    "end": "2844640"
  },
  {
    "text": "your um your code from from a staging environment to a production environment",
    "start": "2844640",
    "end": "2849800"
  },
  {
    "text": "and so forth but instead you can actually create uh new instances that",
    "start": "2849800",
    "end": "2855640"
  },
  {
    "text": "itself is your production environment and then terminate your old production environments and use that dynamicity or",
    "start": "2855640",
    "end": "2862480"
  },
  {
    "text": "use elastic IPS to actually map and remap your ec2 instances with the newer",
    "start": "2862480",
    "end": "2868319"
  },
  {
    "text": "version of the software and terminate your old ec2 instances or use elastic load balancing that you are know taking",
    "start": "2868319",
    "end": "2876160"
  },
  {
    "text": "off uh know all the the older version of your instances that are running older",
    "start": "2876160",
    "end": "2882200"
  },
  {
    "text": "version of your application off and then slowly adding newer versions of your",
    "start": "2882200",
    "end": "2887680"
  },
  {
    "text": "application uh in in newer instances and connecting that to the load balancer so",
    "start": "2887680",
    "end": "2892920"
  },
  {
    "text": "by that you can know use instead of moving code from one environment to",
    "start": "2892920",
    "end": "2897960"
  },
  {
    "text": "another environment you can actually recreate the entire environment and use",
    "start": "2897960",
    "end": "2903319"
  },
  {
    "text": "um um an instantiate uh Cloud uh instances overall that's one good best",
    "start": "2903319",
    "end": "2910359"
  },
  {
    "text": "practice overall we got some questions coming in so that's good",
    "start": "2910359",
    "end": "2917200"
  },
  {
    "text": "great you were you were starting to spark them right there which is great um hey Matt there's a question here from",
    "start": "2918200",
    "end": "2924240"
  },
  {
    "text": "Chris he says do you have any tools that will lock a Windows instance so a snapshot won't catch it in the middle of",
    "start": "2924240",
    "end": "2930880"
  },
  {
    "text": "a right locking a Windows instance so a",
    "start": "2930880",
    "end": "2936160"
  },
  {
    "text": "snapshot does doesn't um catch it in the middle of a right uh so yeah I'm guessing so obviously with a Windows",
    "start": "2936160",
    "end": "2941359"
  },
  {
    "text": "machine you certainly the Windows 2008 instances they would be EVS backed um so",
    "start": "2941359",
    "end": "2946400"
  },
  {
    "text": "obviously wanting to to minimize the churn of what's going on in the operating system during uh during the",
    "start": "2946400",
    "end": "2952599"
  },
  {
    "text": "actual snapshotting process you know there's a couple approaches there obviously the safest overall approach is",
    "start": "2952599",
    "end": "2958280"
  },
  {
    "text": "to stop the box and then snapshot it so that of course there no writing would be occurring at that time unfortunately",
    "start": "2958280",
    "end": "2964200"
  },
  {
    "text": "that you know means the machines offline during that period um you know as an alternative approach uh you could look",
    "start": "2964200",
    "end": "2970440"
  },
  {
    "text": "to you know stop several non-essential Services um you know obviously turn off things like Windows update you know",
    "start": "2970440",
    "end": "2977000"
  },
  {
    "text": "various things that have run as background processes um to minimize the amount of children that might be going on in the system at the time um that you",
    "start": "2977000",
    "end": "2983680"
  },
  {
    "text": "might choose to uh call for a snapshot uh those are a couple of things obviously you know the stop being um",
    "start": "2983680",
    "end": "2989920"
  },
  {
    "text": "most intrusive but certainly safest because it brings that machine down while you do the snapshot um but",
    "start": "2989920",
    "end": "2995760"
  },
  {
    "text": "certainly doesn't allow to continue operating during that period um the secondary approach being just simply",
    "start": "2995760",
    "end": "3002000"
  },
  {
    "text": "going through and looking at the services that are running uh and and pausing them as appropriate so that you",
    "start": "3002000",
    "end": "3008119"
  },
  {
    "text": "can actually um reduce the the likely churn um to the to the root disc obviously if it's a Data Drive um that",
    "start": "3008119",
    "end": "3015040"
  },
  {
    "text": "you're snapshotting as opposed to your root volume um with a Data Drive you can use a couple of different approaches uh",
    "start": "3015040",
    "end": "3021000"
  },
  {
    "text": "you could actually um set up a synchronization um process between your primary data Drive maybe an additional",
    "start": "3021000",
    "end": "3027680"
  },
  {
    "text": "Data Drive you attach just for a short period synchronize those two drives uh and then actually snapshot off the",
    "start": "3027680",
    "end": "3034040"
  },
  {
    "text": "secondary synchronized copy as opposed to the primary data drive that allows you to sort of detach that drive um for",
    "start": "3034040",
    "end": "3041079"
  },
  {
    "text": "a short period of time while you do the snapshot that's another way to avoid um that impact but in the root volume short",
    "start": "3041079",
    "end": "3046359"
  },
  {
    "text": "of stopping the machine you can't really guarantee um that the operating system won't sign right down so pausing",
    "start": "3046359",
    "end": "3052480"
  },
  {
    "text": "Services is probably your best pth great thanks Matt J we got a",
    "start": "3052480",
    "end": "3058160"
  },
  {
    "text": "question from Jimmy who's talking uh about is are you able to scale the instances down I.E from an N1 large to a",
    "start": "3058160",
    "end": "3065880"
  },
  {
    "text": "micro uh and and maybe we'll expand that and say you know what what are best practices for scaling uh instances in",
    "start": "3065880",
    "end": "3072000"
  },
  {
    "text": "the cloud that's a great question um I will answer this in two part if you're using",
    "start": "3072000",
    "end": "3078599"
  },
  {
    "text": "just plain Amazon machine Amazon ec2 instances um it will be responsibility",
    "start": "3078599",
    "end": "3085079"
  },
  {
    "text": "of the developer who to to include that you are you know um making sure that you",
    "start": "3085079",
    "end": "3091480"
  },
  {
    "text": "are taking a a 32bit um or a 64bit uh Amazon machine image and then",
    "start": "3091480",
    "end": "3097760"
  },
  {
    "text": "reinstantiate that onto a a newer or a smaller intitute instance um and those",
    "start": "3097760",
    "end": "3104240"
  },
  {
    "text": "are very simple to do task on the console um but if you feel that know on",
    "start": "3104240",
    "end": "3110119"
  },
  {
    "text": "the second part of the answer if from the database aspect you know Amazon RDS and if you're using Amazon RDS know does",
    "start": "3110119",
    "end": "3117599"
  },
  {
    "text": "these things for you uh in a simple setup know you can go to Amazon RDS Tab",
    "start": "3117599",
    "end": "3123280"
  },
  {
    "text": "and then uh know instruct and um an EC to modify um instance call uh by using",
    "start": "3123280",
    "end": "3132040"
  },
  {
    "text": "the command line or use this tab on on onto uh uh on a on a particular already",
    "start": "3132040",
    "end": "3140319"
  },
  {
    "text": "existing uh database and say click modify and this will know by just simply",
    "start": "3140319",
    "end": "3146240"
  },
  {
    "text": "click clicking on know this particular um Tab and then selecting the newer",
    "start": "3146240",
    "end": "3151799"
  },
  {
    "text": "instance Tab and then it will you know do the things underneath uh automatically for you uh at a at a given",
    "start": "3151799",
    "end": "3159880"
  },
  {
    "text": "maintenance window so in this case what's happening behind the scenes is it will take a snapshot of your volume and",
    "start": "3159880",
    "end": "3167000"
  },
  {
    "text": "that snapshot is going to be stored in S3 it will will shut down that ec2 instance it will bring up this new ec2",
    "start": "3167000",
    "end": "3173559"
  },
  {
    "text": "instance with the new brand new MySQL uh running on a higher higher instance",
    "start": "3173559",
    "end": "3179400"
  },
  {
    "text": "types or lower instance type or smaller instance type and then restore that snapshot back onto this newer instance",
    "start": "3179400",
    "end": "3186720"
  },
  {
    "text": "all happens during this maintenance window that you that you specify or you can apply it immediately by just",
    "start": "3186720",
    "end": "3192480"
  },
  {
    "text": "clicking on this check box so this allows you with one click you can go",
    "start": "3192480",
    "end": "3197559"
  },
  {
    "text": "from a two CPU box to a 4 CPU box and sort of vertically scale up um and just",
    "start": "3197559",
    "end": "3203960"
  },
  {
    "text": "the things that we we like to um add rest from a simple ec2 setup is just make sure that you are using the right",
    "start": "3203960",
    "end": "3210640"
  },
  {
    "text": "bit uh uh 32bit versus 64bit so you don't want to get um no there are only",
    "start": "3210640",
    "end": "3216000"
  },
  {
    "text": "certain types of ec2 instance instances available for certain uh uh bit range so",
    "start": "3216000",
    "end": "3221839"
  },
  {
    "text": "if you if you are using make sure that you're know creating the right Amazon machine image on that front did that",
    "start": "3221839",
    "end": "3229559"
  },
  {
    "text": "answer the question Matt do you want to add yeah I was going to add one quick note on there there is a feature that's",
    "start": "3229559",
    "end": "3234680"
  },
  {
    "text": "not exposed inside the console but is a available through our command line apis where you can actually take a running instance you can choose to stop it and",
    "start": "3234680",
    "end": "3241680"
  },
  {
    "text": "then you can change its instance type and then start it again um so you know if you wanted to go from a large to a",
    "start": "3241680",
    "end": "3248319"
  },
  {
    "text": "micro you could actually stop it change it to a micro and start it again um and that would be something doable through",
    "start": "3248319",
    "end": "3254319"
  },
  {
    "text": "the command line um you know that unfortunately creates an interruption in availability for that particular",
    "start": "3254319",
    "end": "3259400"
  },
  {
    "text": "instance and it would change it uh it's IP unless of course you're using elastic IP um so that may not be um preferred",
    "start": "3259400",
    "end": "3265720"
  },
  {
    "text": "Behavior an alternative approach we've seen folks use is instead of uh uh",
    "start": "3265720",
    "end": "3270839"
  },
  {
    "text": "running uh instead of trying to stop and start you know spinning up smaller instances you know at night you decide",
    "start": "3270839",
    "end": "3276599"
  },
  {
    "text": "you want to um shrink your Fleet size um spinning up a smaller replacement instance um you know then making sure",
    "start": "3276599",
    "end": "3283000"
  },
  {
    "text": "that all your data is perhaps not on a on a on the root volume perhaps on a Data Drive and you can you know detach",
    "start": "3283000",
    "end": "3288480"
  },
  {
    "text": "the volume and move it over because it's a smaller machine or even just synchronizing um across between the two",
    "start": "3288480",
    "end": "3293680"
  },
  {
    "text": "and once that synchronization is complete shutting down the larger one and rting all traffic to the smaller box so you can either run them in parallel",
    "start": "3293680",
    "end": "3300559"
  },
  {
    "text": "cut over and shut down the larger box or you can stop change the instance type and then start a machine so you can",
    "start": "3300559",
    "end": "3306880"
  },
  {
    "text": "actually do that as well not available in console great and and yeah the starting",
    "start": "3306880",
    "end": "3312839"
  },
  {
    "text": "and stopping uh feature is only available for EBS bagged Amazon machine images just wanted to bring that up as",
    "start": "3312839",
    "end": "3319240"
  },
  {
    "text": "well any other questions yeah Janes Kevin had a question about uh a slide",
    "start": "3319240",
    "end": "3325240"
  },
  {
    "text": "you are on that I had simple DB on it and saying you were talking about how you could use Simple DB to store",
    "start": "3325240",
    "end": "3330760"
  },
  {
    "text": "instense configurations and he was wondering for some examples of that yeah that's a great question so um I I'm I'm",
    "start": "3330760",
    "end": "3338720"
  },
  {
    "text": "assuming this was oops assuming this was the slide um yeah so uh this is one",
    "start": "3338720",
    "end": "3345119"
  },
  {
    "text": "mechanism that a lot of customers uh like to do is to is to is to store um um",
    "start": "3345119",
    "end": "3352799"
  },
  {
    "text": "uh their configuration data in simple DB this is Essen machine configurations now",
    "start": "3352799",
    "end": "3358520"
  },
  {
    "text": "connection strings uh IDs that they have to connect to you know other username",
    "start": "3358520",
    "end": "3363960"
  },
  {
    "text": "password application Level uh know data uh that is configuration data and so",
    "start": "3363960",
    "end": "3369000"
  },
  {
    "text": "forth all of that goes onto simple DB and then when the ec2 instance boots up",
    "start": "3369000",
    "end": "3374880"
  },
  {
    "text": "the first thing that it does is uh goes and queries this uh domain and in simple",
    "start": "3374880",
    "end": "3381160"
  },
  {
    "text": "DB and and gets all the information right off from that table um and from",
    "start": "3381160",
    "end": "3387640"
  },
  {
    "text": "there it is essentially uh know getting all the role information that you are a web server and you have to connect this",
    "start": "3387640",
    "end": "3394520"
  },
  {
    "text": "to a database server uh and know these are the connection strings and so forth so all the configuration information can",
    "start": "3394520",
    "end": "3401520"
  },
  {
    "text": "be stored in simple VB and this can be very repetitive know you can your ec2",
    "start": "3401520",
    "end": "3406720"
  },
  {
    "text": "instances are very know blank and opaque they don't really have any uh know keys",
    "start": "3406720",
    "end": "3413559"
  },
  {
    "text": "or any other data the things that you have to worry about about is passing the keys in the right uh know um uh secure",
    "start": "3413559",
    "end": "3422000"
  },
  {
    "text": "way so there are some best practices that customers have employed is to encrypt the keys before you send it to",
    "start": "3422000",
    "end": "3429119"
  },
  {
    "text": "the user data parameterized feature uh during the Run instance call and then on",
    "start": "3429119",
    "end": "3435480"
  },
  {
    "text": "boot up uh you decrypt that Keys uh no um put that Keys into your environment",
    "start": "3435480",
    "end": "3441520"
  },
  {
    "text": "variable and then it has access to know the AWS credentials have are aailable able to all the application and that",
    "start": "3441520",
    "end": "3448760"
  },
  {
    "text": "will be used to uh know query simple DB as well so these are some of the things that customers uh do today uh you can",
    "start": "3448760",
    "end": "3456440"
  },
  {
    "text": "you don't have to use Simple TB you can use other features like server tagging and I know that that's available through",
    "start": "3456440",
    "end": "3462920"
  },
  {
    "text": "an API and also through the console that this is a web server and you can tag that server um but the benefits of",
    "start": "3462920",
    "end": "3469039"
  },
  {
    "text": "simple DB is that you can know query uh your your domain and see the current",
    "start": "3469039",
    "end": "3475000"
  },
  {
    "text": "snapshot of your entire topology or your Fleet size like how many servers are",
    "start": "3475000",
    "end": "3480960"
  },
  {
    "text": "currently running now they they C some of the customers also St share or put",
    "start": "3480960",
    "end": "3486920"
  },
  {
    "text": "the state of the current machine on simple DB so that they can get data of",
    "start": "3486920",
    "end": "3492079"
  },
  {
    "text": "the current state of the uh um of the fleet like some instances might go down or some instances are running and so",
    "start": "3492079",
    "end": "3498720"
  },
  {
    "text": "forth um and they can get then a log of certain things later on if they want to",
    "start": "3498720",
    "end": "3503880"
  },
  {
    "text": "which which the console will not give them uh because it's a current point in time while simple DB is a log of data",
    "start": "3503880",
    "end": "3510920"
  },
  {
    "text": "it's a database so these are some of the ways customers use um simple DB for",
    "start": "3510920",
    "end": "3516240"
  },
  {
    "text": "dynamic configuration great thanks shanash U we're a little bit over time but we",
    "start": "3516240",
    "end": "3522559"
  },
  {
    "text": "still have quite a few people on the webinar Matt could you fill one more",
    "start": "3522559",
    "end": "3527400"
  },
  {
    "text": "question sure there you are great this this one uh deals with uh",
    "start": "3527599",
    "end": "3535440"
  },
  {
    "text": "different re G uh and this is from okay uh GUI I'm not sure I'm pronouncing that",
    "start": "3535440",
    "end": "3542480"
  },
  {
    "text": "correctly I apologize if that's incorrect but it he's asking are load balancers Regional if so and I build two",
    "start": "3542480",
    "end": "3550440"
  },
  {
    "text": "similar multi-server infrastructures in two regions each with its own set of",
    "start": "3550440",
    "end": "3555920"
  },
  {
    "text": "load balancers would you be able to fail over from one region to the next with",
    "start": "3555920",
    "end": "3561400"
  },
  {
    "text": "zero downtime yeah so this actually comes up a lot most folks discuss this in terms",
    "start": "3561400",
    "end": "3567160"
  },
  {
    "text": "of uh perhaps having um you know more geolocation based uh um distributed",
    "start": "3567160",
    "end": "3573680"
  },
  {
    "text": "traffic um and a Janes is pulling up the classic slide of kind of the Fall the sun model um so what uh what you can do",
    "start": "3573680",
    "end": "3582280"
  },
  {
    "text": "unfortunately our so our elastic load balances are for a specific region which means that you know it will handle a",
    "start": "3582280",
    "end": "3588280"
  },
  {
    "text": "single elb will handle say the US East or the US West or or the UK or or APAC",
    "start": "3588280",
    "end": "3593760"
  },
  {
    "text": "um so it is it is specific to that region uh now we do not offer a um uh a global",
    "start": "3593760",
    "end": "3600920"
  },
  {
    "text": "load balancing service that balances between regions um but there are companies that do that um Ultra DNS is",
    "start": "3600920",
    "end": "3607079"
  },
  {
    "text": "is one example of of you know probably several different DNS providers that could um give you that kind of a service",
    "start": "3607079",
    "end": "3613000"
  },
  {
    "text": "which would allow you to actually do a couple of different things oftentimes they provide you geolocation type load",
    "start": "3613000",
    "end": "3618319"
  },
  {
    "text": "balancing which says send me to the nearest data center um so if somebody's in California they'd go to to Northern",
    "start": "3618319",
    "end": "3624200"
  },
  {
    "text": "California but if they happen to be in Florida they might end up in the US East right so that's one feature of that um",
    "start": "3624200",
    "end": "3629920"
  },
  {
    "text": "uh set the other thing it can do is also provide failover modes where it says hey if if you know us East is unavailable",
    "start": "3629920",
    "end": "3635680"
  },
  {
    "text": "you're not getting responses you know fail me over to this other side so it actually can um have failure modes and",
    "start": "3635680",
    "end": "3642200"
  },
  {
    "text": "in fact you can even have waiting control some of those we do not have a service that does uh geolocation based",
    "start": "3642200",
    "end": "3648839"
  },
  {
    "text": "DNS um but services that do offer do have the ability to do waiting so there are automatic fail over modes which",
    "start": "3648839",
    "end": "3654720"
  },
  {
    "text": "would enable you to have no down time um and there are ways to change the waiting if you want to distribute people more to",
    "start": "3654720",
    "end": "3661039"
  },
  {
    "text": "one data center versus the other the trick with of course no downtime is how",
    "start": "3661039",
    "end": "3666160"
  },
  {
    "text": "do you keep the data stores in sync across all those various locations so if you have a Us East and a US West um",
    "start": "3666160",
    "end": "3672760"
  },
  {
    "text": "footprint um keeping the actual backend data stores any rights you might be performing or if you have large volumes",
    "start": "3672760",
    "end": "3678839"
  },
  {
    "text": "of reads of data that changes often how do you keep those various regions in sync um and that is a non-trivial",
    "start": "3678839",
    "end": "3685359"
  },
  {
    "text": "problem um and we don't have any services to make that you know any easier than the problem that exists",
    "start": "3685359",
    "end": "3691039"
  },
  {
    "text": "right now of course speed of light propagation of data um so you know you do have a challenge of keeping that in",
    "start": "3691039",
    "end": "3696480"
  },
  {
    "text": "sync but if there's ways to you know slowly propagate or pick subsets of data that have to be in sync across the regions um and then do that as a",
    "start": "3696480",
    "end": "3703039"
  },
  {
    "text": "background process then you could certainly um get away with uh you know hitting an alternate region in case of a",
    "start": "3703039",
    "end": "3709000"
  },
  {
    "text": "of an outage um or a failure of a of a whole region so that's certainly possible we don't provide a service for",
    "start": "3709000",
    "end": "3714960"
  },
  {
    "text": "geolocation balancing at this time so um you'd have to pull that from somewhere else but that's certain",
    "start": "3714960",
    "end": "3721000"
  },
  {
    "text": "possible great well thanks Matt and again that that'll wrap up today's presentation so on behalf of Amazon web",
    "start": "3721000",
    "end": "3727119"
  },
  {
    "text": "services and our presenters again thank you for joining us today to learn about the best practice of architecting in the",
    "start": "3727119",
    "end": "3733720"
  },
  {
    "text": "cloud",
    "start": "3733720",
    "end": "3736279"
  }
]