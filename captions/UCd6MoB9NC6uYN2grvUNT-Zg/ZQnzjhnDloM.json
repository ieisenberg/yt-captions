[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "so once that's done you would want to promote the rds instance your master",
    "start": "1680",
    "end": "7440"
  },
  {
    "text": "and point your application to it so a few best practices when migrating",
    "start": "7440",
    "end": "15280"
  },
  {
    "start": "12000",
    "end": "12000"
  },
  {
    "text": "data so like we discussed you know it's best to take a backup from a replica or a slave",
    "start": "15280",
    "end": "20640"
  },
  {
    "text": "if you can and the obvious thing is to compress your backup so that the transfer to a staging server is",
    "start": "20640",
    "end": "26800"
  },
  {
    "text": "quicker so it's important to consider using a",
    "start": "26800",
    "end": "31920"
  },
  {
    "text": "staging server in the import process primarily because um depending on the size of your data",
    "start": "31920",
    "end": "37760"
  },
  {
    "text": "it's possible that you know like we discussed it could take several hours two days for the import process to complete so if you're using",
    "start": "37760",
    "end": "44000"
  },
  {
    "text": "a process like mysql dom it's possible that due to network flappiness and failures",
    "start": "44000",
    "end": "49280"
  },
  {
    "text": "you know your process could halt and you'll have to start it all over again so you can control for that network",
    "start": "49280",
    "end": "55120"
  },
  {
    "text": "related aspect by uploading your files to an ec2 instance and then loading your data from there to an rds",
    "start": "55120",
    "end": "61760"
  },
  {
    "text": "instance so you would want to use",
    "start": "61760",
    "end": "72960"
  },
  {
    "text": "so you'll have to establish a baseline and load the data first and then you can catch up the delta by setting up",
    "start": "72960",
    "end": "78240"
  },
  {
    "text": "replication so if you have to set up the whole thing through replication you'll need to have all the bin logs from",
    "start": "78240",
    "end": "83840"
  },
  {
    "text": "whenever you started the database which is usually not the case",
    "start": "83840",
    "end": "88798"
  },
  {
    "text": "so you'll also want to use a primary key sort order in order to make your data load process faster",
    "start": "89280",
    "end": "97200"
  },
  {
    "start": "97000",
    "end": "97000"
  },
  {
    "text": "so some of the things that you want to look at on the target side is use more hardware",
    "start": "97200",
    "end": "104320"
  },
  {
    "text": "so if you use a larger instance with more memory and more iops the initial load process could be faster",
    "start": "104320",
    "end": "110320"
  },
  {
    "text": "so the good thing with our rds is it allows vertical scaling up and down so once you're complete with your load",
    "start": "110320",
    "end": "116159"
  },
  {
    "text": "process you can always bring down scale down your instance to save costs",
    "start": "116159",
    "end": "122079"
  },
  {
    "text": "and you would want to disable multi-az you'd also want to disable",
    "start": "122399",
    "end": "127920"
  },
  {
    "text": "binary logging so these are really good best practices that you'd",
    "start": "127920",
    "end": "133680"
  },
  {
    "text": "want to incorporate for production applications however while you're loading data they don't",
    "start": "133680",
    "end": "138879"
  },
  {
    "text": "really help much so you would want to turn it off to reduce the amount of logging",
    "start": "138879",
    "end": "145360"
  },
  {
    "text": "and you would also want to look at a few mysql parameters that can help you",
    "start": "145360",
    "end": "150720"
  },
  {
    "text": "uh make this process faster so in odb flush log a transaction comment is one",
    "start": "150720",
    "end": "156800"
  },
  {
    "text": "auto commit is another so setting these off will enable you to reduce the number of times transactions",
    "start": "156800",
    "end": "164800"
  },
  {
    "text": "are written to the disk this of course comes at a cost in that if your instance crashes",
    "start": "164800",
    "end": "170400"
  },
  {
    "text": "or fails you would lose some transactions again you're dumping data so it's not a huge risk so you want to",
    "start": "170400",
    "end": "178560"
  },
  {
    "text": "set unique checks and foreign checks to zero to speed up the process and the last thing is inode lock file",
    "start": "178560",
    "end": "185599"
  },
  {
    "text": "size so this is something that was not editable using rds in the past we just",
    "start": "185599",
    "end": "190959"
  },
  {
    "text": "made it editable for five six by default it's set at 128 mb",
    "start": "190959",
    "end": "196879"
  },
  {
    "text": "while you're importing data you might want to set it to a higher to a larger value so that the",
    "start": "196879",
    "end": "204400"
  },
  {
    "text": "checkpointing checkpoint flushing is less frequent",
    "start": "204400",
    "end": "209440"
  },
  {
    "text": "another important consideration is uh what input format you want to use",
    "start": "210319",
    "end": "215599"
  },
  {
    "text": "so you can use either a sql input format or a flat file input format to load your data",
    "start": "215599",
    "end": "221519"
  },
  {
    "text": "um mysql dump standard way it generates a sql file you can also use",
    "start": "221519",
    "end": "227280"
  },
  {
    "text": "mysql dump to generate csv files of each of your tables",
    "start": "227280",
    "end": "232720"
  },
  {
    "text": "so the mysql dom essentially loads your schema and data at one go all the constraints are taken",
    "start": "232720",
    "end": "238480"
  },
  {
    "text": "care of all the indexes are taken care of you don't really have to do much when you're using mysql dump in the standard way however if you're",
    "start": "238480",
    "end": "246080"
  },
  {
    "text": "generating flat files you would need to load your schema separately and then your data",
    "start": "246080",
    "end": "253120"
  },
  {
    "text": "um so why would you really want to use flat files so sql execution could be slow it's",
    "start": "253120",
    "end": "259120"
  },
  {
    "text": "sequential you could use flat files especially if you use small files",
    "start": "259120",
    "end": "265199"
  },
  {
    "text": "the load process is faster and you can also parallelize loading multiple files",
    "start": "265199",
    "end": "270240"
  },
  {
    "text": "at the same time so that helps the other thing about mysql dump as we just talked about",
    "start": "270240",
    "end": "276960"
  },
  {
    "text": "is if the process fails excuse me so you'll want to start you'll have to start the process all over again",
    "start": "276960",
    "end": "283919"
  },
  {
    "text": "so if you have two days worth of work that has already been done doing it again just seems very painful",
    "start": "283919",
    "end": "289199"
  },
  {
    "text": "um so the flat file approach you load files each file as a single",
    "start": "289199",
    "end": "295120"
  },
  {
    "text": "transaction so if there's a failure all that fails it is that particular transaction",
    "start": "295120",
    "end": "300720"
  },
  {
    "text": "and you know as a database if a transaction fails it just rolls back so you can just reapply the file from",
    "start": "300720",
    "end": "306800"
  },
  {
    "text": "where you started having errors and continue as you go so",
    "start": "306800",
    "end": "312320"
  },
  {
    "text": "however the sql format is advisable for smaller databases",
    "start": "312320",
    "end": "320080"
  },
  {
    "text": "and the flat file approach is definitely something that you might want to consider for uh large databases",
    "start": "320080",
    "end": "327280"
  },
  {
    "start": "327000",
    "end": "327000"
  },
  {
    "text": "so once you have uh done with once you're done with the initial load process as we discussed",
    "start": "327280",
    "end": "333120"
  },
  {
    "text": "you would want to set replication uh from your master instance to an audio instance",
    "start": "333120",
    "end": "338880"
  },
  {
    "text": "to set that up you need to exactly know what binary law coordinates you need to use",
    "start": "338880",
    "end": "344240"
  },
  {
    "text": "so that mysql can start replication from that point onwards so when you do a mysql dump it's",
    "start": "344240",
    "end": "350160"
  },
  {
    "text": "possible to use an argument that will give you the binary log coordinates so as you can see here",
    "start": "350160",
    "end": "355520"
  },
  {
    "text": "the mysql dump output has mask lock file and master lock position so you would want to record that and",
    "start": "355520",
    "end": "363440"
  },
  {
    "text": "then you would want to set up a replication user on your master instance that can connect",
    "start": "363440",
    "end": "369120"
  },
  {
    "text": "to the rdus instance after that's done you can set up the rds",
    "start": "369120",
    "end": "375280"
  },
  {
    "start": "372000",
    "end": "372000"
  },
  {
    "text": "instance as a slave to an external instance by using a stored procedure that rds has",
    "start": "375280",
    "end": "383919"
  },
  {
    "text": "and arguments for that is the replication user that you just created in the previous step as well as the binary law coordinates",
    "start": "383919",
    "end": "392319"
  },
  {
    "text": "and after that's done you'll want to wait for your rds instance to catch up however",
    "start": "392960",
    "end": "399360"
  },
  {
    "text": "you will want to stop your application at some point so that you can catch up the residual transactions as well",
    "start": "399360",
    "end": "406400"
  },
  {
    "text": "and after the residual transactions are caught up you can stop replication",
    "start": "406400",
    "end": "411680"
  },
  {
    "text": "and then promote your rds instance as a master by calling another rd stored procedure",
    "start": "411680",
    "end": "419199"
  },
  {
    "text": "and after that is done you can point your app to the audios instance",
    "start": "419199",
    "end": "425199"
  },
  {
    "start": "425000",
    "end": "425000"
  },
  {
    "text": "you can also export data using the same process however you just want to reverse the steps you'll want to dump the data from",
    "start": "425199",
    "end": "432240"
  },
  {
    "text": "the audio instance pipe it to your on-premises instance this is possible uh through",
    "start": "432240",
    "end": "440080"
  },
  {
    "text": "mysql dump and after that's done you can set up the on-premise instance",
    "start": "440080",
    "end": "446160"
  },
  {
    "text": "as a slave to your rds instance and catch up the transactions made on the rdus instances",
    "start": "446160",
    "end": "452000"
  },
  {
    "text": "thus far one consideration here is rds provides point in time recovery",
    "start": "452000",
    "end": "457840"
  },
  {
    "text": "functionality and backs up transaction logs and takes them away from the instance and loads them",
    "start": "457840",
    "end": "463599"
  },
  {
    "text": "into s3 every five minutes so this means if your on-premises instance has not",
    "start": "463599",
    "end": "469599"
  },
  {
    "text": "collected those transactions in that time frame they might get moved away from the instance so for that you would want to execute",
    "start": "469599",
    "end": "477039"
  },
  {
    "text": "another stored procedure and increase the bin log retention to a you know much larger value",
    "start": "477039",
    "end": "482560"
  },
  {
    "text": "so that your on-premises instance can catch up",
    "start": "482560",
    "end": "487599"
  },
  {
    "start": "488000",
    "end": "488000"
  },
  {
    "text": "and this the replication setup is only supported for 5.6 so another interesting",
    "start": "488160",
    "end": "495599"
  },
  {
    "text": "thing that a lot of customers have asked is a way to sync their data from rds to",
    "start": "495599",
    "end": "500800"
  },
  {
    "text": "a redshift instance a lot of our customers use redshift for their data warehousing purposes and",
    "start": "500800",
    "end": "506639"
  },
  {
    "text": "rds for their transactional data purposes so we've recently released a",
    "start": "506639",
    "end": "513360"
  },
  {
    "text": "functionality that enables you to set up to change the binlock format from mixed",
    "start": "513360",
    "end": "518959"
  },
  {
    "text": "which is the default with rds to row the row based logging enables you to",
    "start": "518959",
    "end": "525040"
  },
  {
    "text": "look at the change logs associated with updates that have been made and then you can make the same updates on your",
    "start": "525040",
    "end": "530959"
  },
  {
    "text": "redshift instance so you can either apply the bin logs yourself or you can use some of the aws partner",
    "start": "530959",
    "end": "536880"
  },
  {
    "text": "solutions from uh companies such as edge unity and fly data so these solutions enable you to",
    "start": "536880",
    "end": "542800"
  },
  {
    "text": "use a graphical user interface set rds and redshift as a target audio is a source",
    "start": "542800",
    "end": "548959"
  },
  {
    "text": "and then they kind of take care of syncing the changes on the rds instance and keep your redshift instance up to",
    "start": "548959",
    "end": "555200"
  },
  {
    "text": "date so with that best practices around data",
    "start": "555200",
    "end": "561920"
  },
  {
    "text": "migration we're going to look at um some of the best practices around availability and disaster recovery",
    "start": "561920",
    "end": "567680"
  },
  {
    "text": "so as most of you know rda supports what we call as multi as a deployments",
    "start": "567680",
    "end": "573040"
  },
  {
    "start": "569000",
    "end": "569000"
  },
  {
    "text": "so multi-year deployments essentially create a physical synchronous replica in",
    "start": "573040",
    "end": "578720"
  },
  {
    "text": "a different availability zone and physical replication enables us to keep up with the load on the master",
    "start": "578720",
    "end": "586560"
  },
  {
    "text": "unlike logical replication for mysql which is single threaded which means your replica could lag behind",
    "start": "586560",
    "end": "592160"
  },
  {
    "text": "if there is a lot of a lot of load on your master instance and what happens when",
    "start": "592160",
    "end": "600320"
  },
  {
    "text": "there is a failure so we're going to go through the process and the steps that kind of happen behind the scenes when a",
    "start": "600320",
    "end": "606320"
  },
  {
    "text": "multi-asia instance fails over the first part is we'll have to detect a failure whether it's a networking level failure or a",
    "start": "606320",
    "end": "613120"
  },
  {
    "text": "hardware level failure you don't want to unnecessarily fail over very quickly so we take some time",
    "start": "613120",
    "end": "618720"
  },
  {
    "text": "to kind of confirm that the instance is indeed unreachable",
    "start": "618720",
    "end": "624399"
  },
  {
    "text": "and once the failure detection is complete the standby instance is promoted to the",
    "start": "624399",
    "end": "630640"
  },
  {
    "text": "primary and this process takes about five seconds typically",
    "start": "630640",
    "end": "636240"
  },
  {
    "text": "and after that is done rds communicates the change in",
    "start": "636240",
    "end": "643600"
  },
  {
    "text": "the primary to your applications via dns so the cname is updated to point to the",
    "start": "643600",
    "end": "649920"
  },
  {
    "text": "ip address of the secondary instance and as long as you use cnames to connect to the rds instance",
    "start": "649920",
    "end": "655440"
  },
  {
    "text": "this process is kind of very seamless for you your application will have some downtime",
    "start": "655440",
    "end": "660640"
  },
  {
    "text": "while the failover process is complete and after the dns update is done the application just",
    "start": "660640",
    "end": "665680"
  },
  {
    "text": "connects to the instance without you having to do anything behind the scenes um so after a failover along with the",
    "start": "665680",
    "end": "672399"
  },
  {
    "text": "failover we also perform crash recovery on the secondary instance or newly promoted primary instance so",
    "start": "672399",
    "end": "680079"
  },
  {
    "text": "dns update and crash recovery typically takes about 30 seconds so in total the failover time is",
    "start": "680079",
    "end": "686800"
  },
  {
    "text": "ballpark 60 seconds on average this could be higher if for example if you're using magnetic",
    "start": "686800",
    "end": "693040"
  },
  {
    "text": "storage instead of gp2 or provision diop storage so that",
    "start": "693040",
    "end": "698160"
  },
  {
    "text": "tends to increase the crash recovery time which could increase the total failover time",
    "start": "698160",
    "end": "703360"
  },
  {
    "text": "so this used to be three to four times uh last year the failover time used to be three to four times uh this uh this minute uh last year",
    "start": "703360",
    "end": "711519"
  },
  {
    "text": "the team our team worked very hard kind of reducing uh the overall different phases that are",
    "start": "711519",
    "end": "717360"
  },
  {
    "text": "part of the failover and reducing the time substantially",
    "start": "717360",
    "end": "722399"
  },
  {
    "text": "so after the failover is complete your instance returns to the multi configuration you'll have a secondary",
    "start": "722399",
    "end": "727440"
  },
  {
    "text": "instance created behind the scenes for you a lot of our customers also use read",
    "start": "727440",
    "end": "734079"
  },
  {
    "start": "731000",
    "end": "731000"
  },
  {
    "text": "replicas for scaling their read heavy workloads so you can create a read replication to",
    "start": "734079",
    "end": "739839"
  },
  {
    "text": "a multi-year instance like here you can use the read replicas to serve",
    "start": "739839",
    "end": "746160"
  },
  {
    "text": "eventually consistent reads and you can use your primary instance to still serve rights",
    "start": "746160",
    "end": "751360"
  },
  {
    "text": "uh to perform rights as well as serve consistent reads uh you can also scale your read traffic",
    "start": "751360",
    "end": "758639"
  },
  {
    "text": "by adding more replicas and so what happens when a primary",
    "start": "758639",
    "end": "764959"
  },
  {
    "text": "instance fails over what what happens to the replicas so the",
    "start": "764959",
    "end": "770079"
  },
  {
    "text": "replicas simply so the standby instance or secondary gets promoted to the primary",
    "start": "770079",
    "end": "776079"
  },
  {
    "text": "and replica simply connect to the primary instance and continue replicating however this is something that",
    "start": "776079",
    "end": "785040"
  },
  {
    "text": "is uh not exactly the case with five one and five five because of a mysql",
    "start": "785440",
    "end": "790480"
  },
  {
    "text": "limitation we're going to talk about that a little bit however the read replicas essentially can help you increase the availability",
    "start": "790480",
    "end": "797360"
  },
  {
    "text": "as well while your instance is failing over especially if you have a read heavy workload for example a media website so",
    "start": "797360",
    "end": "804480"
  },
  {
    "text": "if you are using read replicas to serve your read traffic and you have architected your application in that way",
    "start": "804480",
    "end": "810399"
  },
  {
    "text": "your site will stay up to serve your retraffic however you won't be able to add new content",
    "start": "810399",
    "end": "816160"
  },
  {
    "text": "until the failover happens so this is another way to kind of increase your availability further",
    "start": "816160",
    "end": "821199"
  },
  {
    "text": "using read replicas so let's go back to the topic of five one and five five so with five one",
    "start": "821199",
    "end": "827600"
  },
  {
    "start": "826000",
    "end": "826000"
  },
  {
    "text": "and five five it's possible that after a multi-user instance fails over you might end up seeing errors like this",
    "start": "827600",
    "end": "834720"
  },
  {
    "text": "with your replicas with your application breaking client requested mastered starter application from impossible position",
    "start": "834720",
    "end": "840880"
  },
  {
    "text": "it's kind of a weird error so this happens because um of a",
    "start": "840880",
    "end": "847760"
  },
  {
    "text": "mysql parameter called called sync bin log and this is by default set to zero in mysql5195 with rds",
    "start": "847760",
    "end": "856399"
  },
  {
    "text": "and what this essentially means is even though mysql writes to the bin log it doesn't flush them to the disk and",
    "start": "856399",
    "end": "862639"
  },
  {
    "text": "leaves to the leaves it to the os to flush the disk you know as it would for any files",
    "start": "862639",
    "end": "868560"
  },
  {
    "text": "so what this means is if your master fails over or performs a crash recovery",
    "start": "868560",
    "end": "874560"
  },
  {
    "text": "it's very likely that it's going to start from start a new binary log however your slave might still be stuck with the old",
    "start": "874560",
    "end": "881199"
  },
  {
    "text": "binary log and the old position so it will start to execute the old position but it doesn't find anything",
    "start": "881199",
    "end": "887839"
  },
  {
    "text": "so that essentially ends up with this particular error and one way to get around this error is",
    "start": "887839",
    "end": "894000"
  },
  {
    "text": "to skip to the next master log and rds has a stored procedure through which you can",
    "start": "894000",
    "end": "899760"
  },
  {
    "text": "do that another option is you can turn sync bin lock to one however with 505.55 there's a",
    "start": "899760",
    "end": "905680"
  },
  {
    "text": "significant performance impact when you turn on sync bin log so this is",
    "start": "905680",
    "end": "910720"
  },
  {
    "text": "something that a lot of customers don't end up doing so they live with the replication issues",
    "start": "910720",
    "end": "916240"
  },
  {
    "text": "uh with five six the good news is uh syncman log is turned to one by default by rds",
    "start": "916240",
    "end": "922639"
  },
  {
    "text": "and it doesn't have the reason why we did that is that it doesn't have as much of a performance hit as it had",
    "start": "922639",
    "end": "929120"
  },
  {
    "text": "in five five one and five five this is because five six has binary log group comment",
    "start": "929120",
    "end": "934160"
  },
  {
    "text": "which essentially means um commits across multiple transactions a kind of",
    "start": "934160",
    "end": "939920"
  },
  {
    "text": "aggregated together and written to the disk so this kind of helps with the performance and mysql five six also has crash save",
    "start": "939920",
    "end": "947519"
  },
  {
    "text": "slaves that's a multiple so in five one and five five the replication coordinates used to be",
    "start": "947519",
    "end": "954320"
  },
  {
    "text": "recorded in my isam table which is not crash safe so five six with five six",
    "start": "954320",
    "end": "960399"
  },
  {
    "text": "that kind of turned into an nrdb table so that kind of helps with replication reliability as well",
    "start": "960399",
    "end": "965839"
  },
  {
    "text": "so this is a chart that a benchmark from oracle which kind of shows that even with sync bin log one",
    "start": "965839",
    "end": "973040"
  },
  {
    "text": "uh the difference between performance um in five six is not uh that much so the",
    "start": "973040",
    "end": "978560"
  },
  {
    "text": "red line and the blue line kind of shows you the performance difference when sync pin log equals zero and one with my sql five six",
    "start": "978560",
    "end": "986560"
  },
  {
    "start": "988000",
    "end": "988000"
  },
  {
    "text": "so you can also use green replicas for disaster recovery purposes apart from scaling and availability",
    "start": "988240",
    "end": "995120"
  },
  {
    "text": "improving improvement so you can have standard multi-ac",
    "start": "995120",
    "end": "1000320"
  },
  {
    "text": "instance in a multi-use application you can use that for ha within a given",
    "start": "1000320",
    "end": "1005360"
  },
  {
    "text": "region you can create a cross-region replica in a different region for disaster recovery purposes and",
    "start": "1005360",
    "end": "1013199"
  },
  {
    "text": "some of our customers also use a cross-region reader applicable for rescaling and providing relocality",
    "start": "1013199",
    "end": "1020320"
  },
  {
    "text": "so for example if one of your users travels from the west coast to the east coast you might want to architect your",
    "start": "1020320",
    "end": "1027038"
  },
  {
    "text": "application such that any data that they're reading is provided through a read replica which is",
    "start": "1027039",
    "end": "1032720"
  },
  {
    "text": "closest to the user and of course if a disaster strikes",
    "start": "1032720",
    "end": "1039678"
  },
  {
    "text": "and the whole region gets affected of course you know this is something that is extremely rare and hasn't happened in",
    "start": "1039679",
    "end": "1044720"
  },
  {
    "text": "the past several years you can promote your standby instance",
    "start": "1044720",
    "end": "1050480"
  },
  {
    "text": "to a primary and for you know business continuity purposes of course the assumption here is you have a",
    "start": "1050480",
    "end": "1055919"
  },
  {
    "text": "multi-region application as well so that you can get started in a different region if something were to happen to a given",
    "start": "1055919",
    "end": "1062000"
  },
  {
    "text": "region so let's talk a little bit about uh scale and performance",
    "start": "1062000",
    "end": "1068000"
  },
  {
    "text": "um after kind of going over the availability aspects so we talked quite a bit about read replicas so we're going to talk about an",
    "start": "1068000",
    "end": "1075280"
  },
  {
    "text": "example through which you can use read replicas for rescaling so so let's take an example of a",
    "start": "1075280",
    "end": "1081840"
  },
  {
    "text": "workload with 90 reads and 10 rights um and let's assume that",
    "start": "1081840",
    "end": "1087200"
  },
  {
    "text": "all most of the resources on your instance is consumed by this workload so if you need to increase any of these",
    "start": "1087200",
    "end": "1092240"
  },
  {
    "text": "dimensions there's no room so here in this particular example we created four re-replicas and",
    "start": "1092240",
    "end": "1099120"
  },
  {
    "text": "distributed the re-traffic across them so you can see that the right traffic however",
    "start": "1099120",
    "end": "1105280"
  },
  {
    "text": "is kind of still getting replicated to the replicas even though your application writes only to your primary instance it still has to",
    "start": "1105280",
    "end": "1112559"
  },
  {
    "text": "get written to your replicas via the asynchronous replication process so there isn't any right scaling here",
    "start": "1112559",
    "end": "1118160"
  },
  {
    "text": "however you're able to scale reads and you have a lot of room to grow",
    "start": "1118160",
    "end": "1124000"
  },
  {
    "text": "so you can scale further twice and still have some room left for this",
    "start": "1124000",
    "end": "1129919"
  },
  {
    "text": "workload you can scale three times and you're kind of pretty much there",
    "start": "1129919",
    "end": "1136799"
  },
  {
    "text": "another example is when what if an application has more rights than the previous one so 20",
    "start": "1136799",
    "end": "1143760"
  },
  {
    "text": "rights versus uh 10 rights in the previous case you can still use the same approach for",
    "start": "1143760",
    "end": "1149039"
  },
  {
    "text": "replicas and scale it two times so here here you're able to scale it twice",
    "start": "1149039",
    "end": "1155679"
  },
  {
    "text": "as opposed to four or three times in the previous example so here is a chart that kind of shows",
    "start": "1155679",
    "end": "1161520"
  },
  {
    "text": "how much scaling you can get based on the right percentage of your workload as",
    "start": "1161520",
    "end": "1167679"
  },
  {
    "text": "you increase the number of replicas so you can see that the",
    "start": "1167679",
    "end": "1172960"
  },
  {
    "text": "dark blue line at the top with 10 percent rights and 90 percent reads you're able",
    "start": "1173840",
    "end": "1179440"
  },
  {
    "text": "to scale it substantially as you add more replicas however the one with",
    "start": "1179440",
    "end": "1184799"
  },
  {
    "text": "50 rights and 50 reads there isn't much scaling that you can get even if you add 32 replicas you're barely getting two",
    "start": "1184799",
    "end": "1191440"
  },
  {
    "text": "times as much scale so of course this essentially means if you have a read heavy workload you can scale it substantially by adding",
    "start": "1191440",
    "end": "1198480"
  },
  {
    "text": "more replicas so another interesting feature that we",
    "start": "1198480",
    "end": "1205120"
  },
  {
    "text": "talked about in the beginning is uh innodb cache warming so this is a native feature of mysql56",
    "start": "1205120",
    "end": "1212960"
  },
  {
    "text": "what it enables you to do is you can dump your buffer pool before a reboot and then load it after",
    "start": "1212960",
    "end": "1220640"
  },
  {
    "text": "a reboot is complete so typically when a reboot is done you're starting from a cold cache this",
    "start": "1220640",
    "end": "1226320"
  },
  {
    "text": "particular functionality enables you to warm up your cache um before you you know start hammering",
    "start": "1226320",
    "end": "1233039"
  },
  {
    "text": "it so dumping the buffer pool essentially you know doesn't dump all your pages it",
    "start": "1233039",
    "end": "1239200"
  },
  {
    "text": "just dumps your address space it's not a very performance intensive operation whereas the loading the buffer pool will",
    "start": "1239200",
    "end": "1245600"
  },
  {
    "text": "you know load the actual pages pages into memory so there is a performance impact there so our benchmarks have shown that",
    "start": "1245600",
    "end": "1253120"
  },
  {
    "text": "turning on the buffer pool can help with you know have helped with four times improvement in tps on average",
    "start": "1253120",
    "end": "1260720"
  },
  {
    "text": "for one of the workloads that we looked at so here is an example of that workload",
    "start": "1260720",
    "end": "1266880"
  },
  {
    "text": "so it's 50 reads 50 rights so the purple line above is the one with the cash warming turned",
    "start": "1266880",
    "end": "1273919"
  },
  {
    "text": "on from the get go and then the yellow line is the one with unwarmed cache",
    "start": "1273919",
    "end": "1279520"
  },
  {
    "text": "so you can see that for about nine minutes there's a huge difference between the transactional throughputs of the",
    "start": "1279520",
    "end": "1286080"
  },
  {
    "text": "instance with the cash warmed versus unwarmed and the difference is about four times",
    "start": "1286080",
    "end": "1292159"
  },
  {
    "text": "on average so if you especially in the beginning the performance of the unwarmed",
    "start": "1292159",
    "end": "1297280"
  },
  {
    "text": "cash instance is substantially lower compared to the warmed cash instance",
    "start": "1297280",
    "end": "1302960"
  },
  {
    "text": "so this is something that you can use to get better performance after reboots",
    "start": "1302960",
    "end": "1309760"
  },
  {
    "start": "1305000",
    "end": "1305000"
  },
  {
    "text": "and it's very simple to enable all you have to do is turn on a couple of parameters and mysql takes care of the",
    "start": "1309760",
    "end": "1314880"
  },
  {
    "text": "rest so you can use a db parameter group to turn on a couple of parameters",
    "start": "1314880",
    "end": "1322159"
  },
  {
    "text": "buffer pull dump at shut down buffer pull dump at stardust and the rest of the stuff is taking care",
    "start": "1322159",
    "end": "1328000"
  },
  {
    "text": "of my sequel the other uh the the thing to consider",
    "start": "1328000",
    "end": "1334000"
  },
  {
    "start": "1331000",
    "end": "1331000"
  },
  {
    "text": "here though is um the turning on those parameters only helps you with plan reboots um with rds if",
    "start": "1334000",
    "end": "1341440"
  },
  {
    "text": "if your instance goes through an unplanned you know failover which of course by default is unplanned um you won't be able to take advantage",
    "start": "1341440",
    "end": "1349440"
  },
  {
    "text": "of this feature if you don't do anything so however we have a stored procedure that allows",
    "start": "1349440",
    "end": "1356000"
  },
  {
    "text": "you to dump the buffer pool at your own you know choose and time frame so here we have an example here",
    "start": "1356000",
    "end": "1362640"
  },
  {
    "text": "where we scheduled an event that um dumps the buffer pool every hour so what",
    "start": "1362640",
    "end": "1368400"
  },
  {
    "text": "this means is if you have a failover after it has been dumped say after 30 minutes",
    "start": "1368400",
    "end": "1373440"
  },
  {
    "text": "after the dump happened you'll still get your cash warmed up but it's going to be 30 minutes stale",
    "start": "1373440",
    "end": "1378799"
  },
  {
    "text": "the performance improvement may not be that you know high as you know as you would get if you were",
    "start": "1378799",
    "end": "1385440"
  },
  {
    "text": "dumping it more frequently so i'm going to take a moment and let",
    "start": "1385440",
    "end": "1390640"
  },
  {
    "text": "you savor this awesome piece of animation that i came up with",
    "start": "1390640",
    "end": "1395600"
  },
  {
    "start": "1397000",
    "end": "1397000"
  },
  {
    "text": "thank you so the next topic we're going to cover",
    "start": "1398159",
    "end": "1405280"
  },
  {
    "text": "is schema changes so as an application developer",
    "start": "1405280",
    "end": "1410880"
  },
  {
    "text": "you know if you leave me to it i would perform schema changes every day to release new features",
    "start": "1410880",
    "end": "1417360"
  },
  {
    "text": "as people managing databases i'm sure some of you in this room can you know will tell me that it's just",
    "start": "1417360",
    "end": "1422880"
  },
  {
    "text": "insane and extremely hard and painful to perform schema changes",
    "start": "1422880",
    "end": "1428480"
  },
  {
    "text": "so the reality is of course somewhere in between um so most of you",
    "start": "1428480",
    "end": "1433919"
  },
  {
    "text": "excuse me are likely dealing with it um so there are three main considerations",
    "start": "1435520",
    "end": "1440880"
  },
  {
    "text": "while performing a schema in terms of the options that you might want to use you want to use an option that is fairly",
    "start": "1440880",
    "end": "1447840"
  },
  {
    "text": "easy to use you would want you wouldn't want too much of a performance impact on your",
    "start": "1447840",
    "end": "1453679"
  },
  {
    "text": "master instance as you perform the schema change you would want it to complete fairly quickly so there are three different",
    "start": "1453679",
    "end": "1460080"
  },
  {
    "text": "options that you can use for performing schema changes with mysql the first one is using read replicas",
    "start": "1460080",
    "end": "1466240"
  },
  {
    "text": "we're going to talk a little bit about that uh you can also use the native five six functionality so",
    "start": "1466240",
    "end": "1472159"
  },
  {
    "text": "this is again you know five six feature that mysql added you can also use third-party tools",
    "start": "1472159",
    "end": "1477760"
  },
  {
    "text": "like percona so using read replicas",
    "start": "1477760",
    "end": "1485760"
  },
  {
    "text": "you have a reader program you can perform this operation on the read replica first but before that you'll have to turn on",
    "start": "1485760",
    "end": "1492080"
  },
  {
    "text": "uh turn that into a read write instance for that you'll have to turn off a parameter called read only",
    "start": "1492080",
    "end": "1497760"
  },
  {
    "text": "you can use database parameter groups for that once you're done with it you can perform a schema change",
    "start": "1497760",
    "end": "1502960"
  },
  {
    "text": "operation on your replica say an auto table operation after the",
    "start": "1502960",
    "end": "1508880"
  },
  {
    "text": "operation is complete which could take the time it takes you could create a replica of",
    "start": "1508880",
    "end": "1514880"
  },
  {
    "text": "it and promote your read replica your master the reason why you would want to",
    "start": "1514880",
    "end": "1520480"
  },
  {
    "text": "create a replica is you want to preserve the state of the deployment as it were before the schema change so creating it ahead helps",
    "start": "1520480",
    "end": "1528080"
  },
  {
    "text": "however this whole process is easier said than done there are a bunch of moving parts",
    "start": "1528080",
    "end": "1533200"
  },
  {
    "text": "and it's not easy because you could perform operations on the",
    "start": "1533200",
    "end": "1538480"
  },
  {
    "text": "replica that could break the replications you'll have to be very careful in terms of what type of schema change operations you're performing",
    "start": "1538480",
    "end": "1545200"
  },
  {
    "text": "and how that's impacting the replication stream the native mysql feature 5 6 feature on",
    "start": "1545200",
    "end": "1552240"
  },
  {
    "text": "the other hand is very easy to use it comes by default if you're using 5.6 and it's in place and most of the",
    "start": "1552240",
    "end": "1559039"
  },
  {
    "text": "operations are don't block writes on your tables",
    "start": "1559039",
    "end": "1564240"
  },
  {
    "text": "however it doesn't come for free you still have some performance impact mysql still needs to organize data even",
    "start": "1564240",
    "end": "1570799"
  },
  {
    "text": "if you add a column within its stable spaces so it does impact the performance on your",
    "start": "1570799",
    "end": "1576320"
  },
  {
    "text": "instance it does allow you to write but it has some performance implications so mysql 56 doesn't have any throttling",
    "start": "1576320",
    "end": "1583520"
  },
  {
    "text": "mechanism for you know the amount of resources it takes up for performing the schema change operation",
    "start": "1583520",
    "end": "1589679"
  },
  {
    "text": "which means it could use a lot of resources that could actually adversely impact the performance on your instance",
    "start": "1589679",
    "end": "1596400"
  },
  {
    "text": "it could also increase the replica lag because replication is single threaded so replica will hold off",
    "start": "1596400",
    "end": "1603279"
  },
  {
    "text": "replicating any other data until the schema change operation is done on the replica uh so the time to complete though given",
    "start": "1603279",
    "end": "1609760"
  },
  {
    "text": "there isn't much throttling on the resource consumption is relatively less the third option that",
    "start": "1609760",
    "end": "1615919"
  },
  {
    "start": "1614000",
    "end": "1614000"
  },
  {
    "text": "we talked about is the percona tool so you can use something like pt online schema change",
    "start": "1615919",
    "end": "1621120"
  },
  {
    "text": "to perform a schema change operation on an rds instance however you'll have to run it from an",
    "start": "1621120",
    "end": "1627840"
  },
  {
    "text": "ec2 instance you can install percona on an ec2 instance or toolkit on an ec2 instance",
    "start": "1627840",
    "end": "1633360"
  },
  {
    "text": "you need perl libraries for that and then after that you can connect to the rds instance remotely and perform the",
    "start": "1633360",
    "end": "1639039"
  },
  {
    "text": "schema change operation this of course needs installation it however has less performance impact",
    "start": "1639039",
    "end": "1646000"
  },
  {
    "text": "because this particular tool considers the load on your master as well as the replication lag into",
    "start": "1646000",
    "end": "1651679"
  },
  {
    "text": "consideration and throttles the resource usage for the schema change operation accordingly",
    "start": "1651679",
    "end": "1659360"
  },
  {
    "text": "on the flip side this means the operation could take longer so here is a comparison between the",
    "start": "1659360",
    "end": "1665520"
  },
  {
    "start": "1663000",
    "end": "1663000"
  },
  {
    "text": "percona option and the native five six options you can see that the performance kind of tanks uh for",
    "start": "1665520",
    "end": "1672320"
  },
  {
    "text": "about 45 minutes or so while the schema change operation is in progress on the percona side you know",
    "start": "1672320",
    "end": "1678320"
  },
  {
    "text": "there isn't that kind of a performance impact however the purchase kit",
    "start": "1678320",
    "end": "1684559"
  },
  {
    "text": "option takes about 1 hour 48 minutes whereas the native option completes within 45 minutes",
    "start": "1684559",
    "end": "1690240"
  },
  {
    "text": "so if time to complete is important you know you might want to consider the native option so here is a quick comparison between",
    "start": "1690240",
    "end": "1696559"
  },
  {
    "start": "1695000",
    "end": "1695000"
  },
  {
    "text": "all the three options so ease of use replicas is you know really difficult given the number of",
    "start": "1696559",
    "end": "1701840"
  },
  {
    "text": "moving parts five six is the most easiest because it's just built in",
    "start": "1701840",
    "end": "1707279"
  },
  {
    "text": "in terms of performance impact re-replicas of course you know you're doing it on the three replica instruments and not the master so you",
    "start": "1707279",
    "end": "1713520"
  },
  {
    "text": "there's no performance impact whatsoever on the master while you perform this operation so it's better if your if performance is",
    "start": "1713520",
    "end": "1721120"
  },
  {
    "text": "the most important to you and the native five six option is kind of you know relatively uh comes last",
    "start": "1721120",
    "end": "1728559"
  },
  {
    "text": "and time taken the five six option you know completes",
    "start": "1728559",
    "end": "1733600"
  },
  {
    "text": "reasonably quickly however the read replica option the time taken probably is immaterial given that it doesn't have any",
    "start": "1733600",
    "end": "1739440"
  },
  {
    "text": "performance impact so it's debatable which one kind of wins there so these are the array of choices you",
    "start": "1739440",
    "end": "1745360"
  },
  {
    "text": "can consider and depending on what's important to you and for your use case you can pick an option that works best",
    "start": "1745360",
    "end": "1753520"
  },
  {
    "start": "1753000",
    "end": "1753000"
  },
  {
    "text": "we're going to look at some of the new instance types that we launched especially the t2",
    "start": "1753520",
    "end": "1759840"
  },
  {
    "text": "family and how you can use that and gp2 the new storage type that we launched",
    "start": "1759840",
    "end": "1766240"
  },
  {
    "text": "to get better performance and get it at a more cost in a more cost",
    "start": "1766240",
    "end": "1772080"
  },
  {
    "text": "effective way so gp2 storage for those of you that do not know is an ssd storage option",
    "start": "1772080",
    "end": "1779440"
  },
  {
    "text": "it provides three iops per gb based performance and you can accumulate credits if you",
    "start": "1779440",
    "end": "1785679"
  },
  {
    "text": "are using lower than the base and you can burst up to 3000 or more iops as you accumulate more",
    "start": "1785679",
    "end": "1793360"
  },
  {
    "text": "credits so t2 is a fairly similar story um however it gives you credits in terms of",
    "start": "1793360",
    "end": "1799279"
  },
  {
    "text": "compute cycles and you can use those credits to burst the cpu usage as well",
    "start": "1799279",
    "end": "1806080"
  },
  {
    "text": "so one of my colleagues here performed a benchmark that compares uh the performance of",
    "start": "1806080",
    "end": "1811600"
  },
  {
    "text": "these instances at different times of the credit usage",
    "start": "1811600",
    "end": "1817279"
  },
  {
    "text": "so as you can see here the first couple of hours the gp2 instance with a t2 instance with",
    "start": "1817279",
    "end": "1823039"
  },
  {
    "text": "gp2 storage uh was able to yield 6000 tps and after that gp2 credits get exhausted",
    "start": "1823039",
    "end": "1830799"
  },
  {
    "text": "and you kind of fall to 3800 tps and that kind of gets you",
    "start": "1830799",
    "end": "1837360"
  },
  {
    "text": "for another four to five hours and once the t2 cpu credits get exhausted your",
    "start": "1837360",
    "end": "1843840"
  },
  {
    "text": "overall performance drops to 2200 which is kind of the baseline that you're gonna get going forward and",
    "start": "1843840",
    "end": "1851919"
  },
  {
    "start": "1851000",
    "end": "1851000"
  },
  {
    "text": "you can also see how your credits are being exhausted um in the using cloud watch so in this",
    "start": "1851919",
    "end": "1857840"
  },
  {
    "text": "particular case you know the orange line kind of displays uh the depletion of credits as time goes",
    "start": "1857840",
    "end": "1863519"
  },
  {
    "text": "by and once all of your credits are depleted your cpu usage kind of drops as seen in the graph",
    "start": "1863519",
    "end": "1872720"
  },
  {
    "text": "so how is all of this going to help you so we've looked at a bunch of instance",
    "start": "1873039",
    "end": "1878480"
  },
  {
    "text": "configurations and compared their price performance ratios so let's kind of go over it and",
    "start": "1878480",
    "end": "1884000"
  },
  {
    "text": "see how it works so we have an m1 medium instance with 200 gb of",
    "start": "1884000",
    "end": "1889279"
  },
  {
    "text": "magnetic storage gives you ballpark 1000 dps and costs you 57 cents per hour",
    "start": "1889279",
    "end": "1897440"
  },
  {
    "text": "now let's take an m3 medium instance this is a newer instance family cost less than the older",
    "start": "1897440",
    "end": "1904240"
  },
  {
    "text": "generation instances and here we have taken a provision iops storage type 200 gig",
    "start": "1904240",
    "end": "1911039"
  },
  {
    "text": "same storage but it has 2000 iops and that kind of costs you 41 cents",
    "start": "1911039",
    "end": "1916159"
  },
  {
    "text": "which is cheaper and gives you more transactions probably twice as much and then",
    "start": "1916159",
    "end": "1924799"
  },
  {
    "text": "this is another instance configuration an m3 large which is you know notch above the m3 medium",
    "start": "1924799",
    "end": "1930799"
  },
  {
    "text": "with the same provision iops storage and this gives you you know few more some",
    "start": "1930799",
    "end": "1937200"
  },
  {
    "text": "more transactions per second but at the same time it also costs a little bit more",
    "start": "1937200",
    "end": "1943120"
  },
  {
    "text": "and this is interesting so there's a t2 medium instance with 200 gb",
    "start": "1943360",
    "end": "1948880"
  },
  {
    "text": "of gp2 storage instead of provisional iop storage so gp2 is significantly cheaper than provision iops",
    "start": "1948880",
    "end": "1955679"
  },
  {
    "text": "so as you can see here it gives you much better performance than all the other options for two hours for",
    "start": "1955679",
    "end": "1961760"
  },
  {
    "text": "the first two hours in the day after that after that it drops to a baseline performance",
    "start": "1961760",
    "end": "1966799"
  },
  {
    "text": "of around you know like 800 tps but the thing is it costs you",
    "start": "1966799",
    "end": "1972080"
  },
  {
    "text": "significantly less 11 cents per hour approximately versus 58 and you know 50 to 51 for the other",
    "start": "1972080",
    "end": "1980080"
  },
  {
    "text": "options so how is it going to help you so if you have a workload that is bursty and requires you know high",
    "start": "1980080",
    "end": "1987120"
  },
  {
    "text": "performance only for a period of day and in this particular case it's two hours this can help you save",
    "start": "1987120",
    "end": "1992960"
  },
  {
    "text": "costs significantly and you know achieve similar performance as the other options for your specific",
    "start": "1992960",
    "end": "1999039"
  },
  {
    "text": "workload let's take another example t2 medium",
    "start": "1999039",
    "end": "2004480"
  },
  {
    "text": "however we've increased the amount of storage so as we have looked at before",
    "start": "2004480",
    "end": "2010960"
  },
  {
    "text": "as you increase the amount of storage for gp2 it gives you more baseline iops so 200 gigs gives you 600 baseline iops",
    "start": "2010960",
    "end": "2018880"
  },
  {
    "text": "1tb gives you 3000 baseline iops and this performs significantly better",
    "start": "2018880",
    "end": "2025760"
  },
  {
    "text": "than any of the other options for not only just the first two hours",
    "start": "2025760",
    "end": "2030799"
  },
  {
    "text": "but for the first 18 hours and then the credits get gets exhausted",
    "start": "2030799",
    "end": "2036000"
  },
  {
    "text": "and it kind of gets to a baseline performance however the interesting thing to note here",
    "start": "2036000",
    "end": "2042000"
  },
  {
    "text": "is the baseline performance is still better than a lot of other options it",
    "start": "2042000",
    "end": "2047600"
  },
  {
    "text": "kind of is close to the you know the most the highest spec options that we have looked at",
    "start": "2047600",
    "end": "2053760"
  },
  {
    "text": "and it still costs you significantly uh low so 23 cents versus 51 or 41 cents",
    "start": "2053760",
    "end": "2061358"
  },
  {
    "text": "so the gist of this essentially is the newer instance types uh and the bursty instance types are an",
    "start": "2061359",
    "end": "2067358"
  },
  {
    "text": "interesting family to look at the gp2 storage is an interesting storage type to look at you should",
    "start": "2067359",
    "end": "2073520"
  },
  {
    "text": "strongly consider these two options and kind of figure out how they work for your workloads and",
    "start": "2073520",
    "end": "2078560"
  },
  {
    "text": "how you can save costs so that is all i have we have about",
    "start": "2078560",
    "end": "2085118"
  },
  {
    "text": "seven minutes left if there are any questions i'm happy to take them",
    "start": "2085119",
    "end": "2090638"
  },
  {
    "text": "sorry could you speak up i think we don't have a mic here",
    "start": "2096399",
    "end": "2103280"
  },
  {
    "text": "to vpc yeah so this has been um you know an ask that we consistently",
    "start": "2103280",
    "end": "2108560"
  },
  {
    "text": "hear from from customers um so today you can do it through",
    "start": "2108560",
    "end": "2113760"
  },
  {
    "text": "you know like a bunch of juggleries that you know you can implement through read replicas we can talk offline",
    "start": "2113760",
    "end": "2120720"
  },
  {
    "text": "however you know it's something that you know we're looking at and planning to support in the future",
    "start": "2120720",
    "end": "2128240"
  },
  {
    "text": "you can use snapshots too but you know of course i'm assuming you're talking about live migration to vpc",
    "start": "2128240",
    "end": "2136160"
  },
  {
    "text": "to recover oh so the question is how long does it",
    "start": "2142720",
    "end": "2148720"
  },
  {
    "text": "take for the first for the t2 options to kind of recover after they've depleted the credits so i",
    "start": "2148720",
    "end": "2155440"
  },
  {
    "text": "think grant",
    "start": "2155440",
    "end": "2159838"
  },
  {
    "text": "is",
    "start": "2184839",
    "end": "2187839"
  },
  {
    "text": "so of course this is a benchmark so you know like you're pushing the instance to the brink in a real world workload",
    "start": "2194960",
    "end": "2202240"
  },
  {
    "text": "you'd probably you know won't push it as much and kind of realize those credits as you go and pick up some performance after",
    "start": "2202240",
    "end": "2208960"
  },
  {
    "text": "it drops to the base",
    "start": "2208960",
    "end": "2215838"
  },
  {
    "text": "um",
    "start": "2226839",
    "end": "2229839"
  },
  {
    "text": "to launch a snapshot to restore from a",
    "start": "2235680",
    "end": "2240400"
  },
  {
    "text": "snapshot",
    "start": "2240839",
    "end": "2243839"
  },
  {
    "text": "um",
    "start": "2254839",
    "end": "2257839"
  },
  {
    "text": "so if you're not using ssd gp2 storage how much is the gain is that is that the question",
    "start": "2295280",
    "end": "2302400"
  },
  {
    "text": "um have we looked at it",
    "start": "2304880",
    "end": "2313838"
  },
  {
    "text": "yeah so in terms of compute especially i mean if you look at r3 versus m2 instance families the compute",
    "start": "2325440",
    "end": "2332160"
  },
  {
    "text": "capacity is a lot more um and the cost is a lot less",
    "start": "2332160",
    "end": "2337280"
  },
  {
    "text": "so we haven't looked at the benchmarks per se but you know the available compute capacity with the newer families is definitely higher",
    "start": "2337280",
    "end": "2344800"
  },
  {
    "text": "any other questions",
    "start": "2345680",
    "end": "2348480"
  },
  {
    "text": "yep",
    "start": "2352839",
    "end": "2355839"
  },
  {
    "text": "instance and 90 some percent of time is pretty stable can",
    "start": "2363440",
    "end": "2369119"
  },
  {
    "text": "um so you're riding from the rds instance to an ec2 instance",
    "start": "2376480",
    "end": "2382640"
  },
  {
    "text": "sure and you end up running into communication issues are you using vpc",
    "start": "2382640",
    "end": "2397599"
  },
  {
    "text": "any other questions folks okay thanks for coming in and please",
    "start": "2397599",
    "end": "2404160"
  },
  {
    "text": "fill up the evaluation forms outside and help us improve for next year",
    "start": "2404160",
    "end": "2411838"
  }
]