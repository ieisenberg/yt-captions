[
  {
    "text": "- Welcome to \"Back to Basics\".",
    "start": "6360",
    "end": "8069"
  },
  {
    "text": "In this episode, I'll\nshare an architecture",
    "start": "8070",
    "end": "10410"
  },
  {
    "text": "to gain near real-time\nanalytics on data stored",
    "start": "10410",
    "end": "13200"
  },
  {
    "text": "in Amazon DynamoDB using Amazon Redshift.",
    "start": "13200",
    "end": "16622"
  },
  {
    "text": "Real-time insights are\ncritical with many use cases,",
    "start": "16622",
    "end": "19710"
  },
  {
    "text": "including personalization,\nfraud detection,",
    "start": "19710",
    "end": "21990"
  },
  {
    "text": "and churn prevention.",
    "start": "21990",
    "end": "23789"
  },
  {
    "text": "The key enabler for the real-time\nuse case is getting access",
    "start": "23790",
    "end": "26760"
  },
  {
    "text": "to the data very quickly, gaining insight,",
    "start": "26760",
    "end": "29070"
  },
  {
    "text": "and taking action at the right moment.",
    "start": "29070",
    "end": "31560"
  },
  {
    "text": "Let's understand this with\nthe help of a use case.",
    "start": "31560",
    "end": "34620"
  },
  {
    "text": "I have worked with\ncustomers in the healthcare",
    "start": "34620",
    "end": "37020"
  },
  {
    "text": "and insurance industries",
    "start": "37020",
    "end": "38760"
  },
  {
    "text": "in which they have developed",
    "start": "38760",
    "end": "40559"
  },
  {
    "text": "incentive-based health challenges,",
    "start": "40560",
    "end": "42570"
  },
  {
    "text": "or quests for their members.",
    "start": "42570",
    "end": "45120"
  },
  {
    "text": "Examples of challenges\ninclude run in a 5K event,",
    "start": "45120",
    "end": "48360"
  },
  {
    "text": "bicycle 15 minutes daily,\nor walk in a charity event.",
    "start": "48360",
    "end": "51303"
  },
  {
    "text": "To understand effectiveness\nof these challenges,",
    "start": "52170",
    "end": "54300"
  },
  {
    "text": "they needed near real-time insights.",
    "start": "54300",
    "end": "57360"
  },
  {
    "text": "Getting insights quickly\nhelps to understand",
    "start": "57360",
    "end": "59730"
  },
  {
    "text": "how members are signing up for quests,",
    "start": "59730",
    "end": "61950"
  },
  {
    "text": "what cohort of members are signing up,",
    "start": "61950",
    "end": "63810"
  },
  {
    "text": "and also blending this data\nwith other enterprise datasets.",
    "start": "63810",
    "end": "67113"
  },
  {
    "text": "Let's see how you go about\ndesigning for this use case.",
    "start": "68010",
    "end": "71100"
  },
  {
    "text": "You have a user-facing\nhealth fitness application",
    "start": "71100",
    "end": "74280"
  },
  {
    "text": "with well-defined access patterns",
    "start": "74280",
    "end": "75900"
  },
  {
    "text": "like creating new challenges,\nnew member signups,",
    "start": "75900",
    "end": "78780"
  },
  {
    "text": "and to track member activity",
    "start": "78780",
    "end": "80430"
  },
  {
    "text": "as they progress through challenges.",
    "start": "80430",
    "end": "82980"
  },
  {
    "text": "We selected DynamoDB as\nan operational data store",
    "start": "82980",
    "end": "85380"
  },
  {
    "text": "as it provides fast and\nconsistent performance",
    "start": "85380",
    "end": "87719"
  },
  {
    "text": "at any scale for online applications.",
    "start": "87720",
    "end": "90480"
  },
  {
    "text": "Access patterns are well defined,",
    "start": "90480",
    "end": "92550"
  },
  {
    "text": "and DynamoDB table designs can be tailored",
    "start": "92550",
    "end": "94950"
  },
  {
    "text": "for those specific query patterns.",
    "start": "94950",
    "end": "97409"
  },
  {
    "text": "But how about analytical\nqueries where you want to slice",
    "start": "97410",
    "end": "99870"
  },
  {
    "text": "and dice across different dimensions?",
    "start": "99870",
    "end": "102450"
  },
  {
    "text": "Or you want to do analysis\nby taking quest member data",
    "start": "102450",
    "end": "105420"
  },
  {
    "text": "and joining with other\nenterprise datasets?",
    "start": "105420",
    "end": "108360"
  },
  {
    "text": "For this, you need Redshift,",
    "start": "108360",
    "end": "110010"
  },
  {
    "text": "a fully managed data warehousing\nsolution that uses SQL",
    "start": "110010",
    "end": "113850"
  },
  {
    "text": "to analyze structured\nand semi-structured data.",
    "start": "113850",
    "end": "117180"
  },
  {
    "text": "So you identify data stores,",
    "start": "117180",
    "end": "118740"
  },
  {
    "text": "DynamoDB for the online health\nfitness application and Redshift",
    "start": "118740",
    "end": "121979"
  },
  {
    "text": "for analytics on the data\ngenerated from the application.",
    "start": "121980",
    "end": "125310"
  },
  {
    "text": "But how do you continuously\nrefresh data from DynamoDB",
    "start": "125310",
    "end": "127491"
  },
  {
    "text": "into Redshift?",
    "start": "127491",
    "end": "129479"
  },
  {
    "text": "Let's look at a pattern",
    "start": "129480",
    "end": "130590"
  },
  {
    "text": "that uses DynamoDB's\nintegration with Kinesis",
    "start": "130590",
    "end": "133500"
  },
  {
    "text": "and Redshift's streaming ingestion.",
    "start": "133500",
    "end": "135903"
  },
  {
    "text": "You have an application built on DynamoDB.",
    "start": "136920",
    "end": "140040"
  },
  {
    "text": "You enable Kinesis\nStreams at a table level.",
    "start": "140040",
    "end": "143310"
  },
  {
    "text": "With this, the table\nsends out a data record",
    "start": "143310",
    "end": "146069"
  },
  {
    "text": "that captures any changes\nto the data in DynamoDB.",
    "start": "146070",
    "end": "149670"
  },
  {
    "text": "This data record includes\nspecific time an item was updated,",
    "start": "149670",
    "end": "152849"
  },
  {
    "text": "item's primary key,\nimages of the item before",
    "start": "152850",
    "end": "155580"
  },
  {
    "text": "and after the modification.",
    "start": "155580",
    "end": "157023"
  },
  {
    "text": "These data records are captured",
    "start": "157890",
    "end": "159420"
  },
  {
    "text": "and published in near\nreal-time to Kinesis.",
    "start": "159420",
    "end": "162240"
  },
  {
    "text": "Next, you use Redshift's\nstreaming ingestion feature",
    "start": "162240",
    "end": "165450"
  },
  {
    "text": "to ingest data directly\nfrom Kinesis into Redshift.",
    "start": "165450",
    "end": "168720"
  },
  {
    "text": "With this, you avoid the intermediate step",
    "start": "168720",
    "end": "171000"
  },
  {
    "text": "of staging data in S3,",
    "start": "171000",
    "end": "172410"
  },
  {
    "text": "and thus reducing overall\nlatency in data refreshes.",
    "start": "172410",
    "end": "176100"
  },
  {
    "text": "Let's see how streaming ingestion works.",
    "start": "176100",
    "end": "178530"
  },
  {
    "text": "Here, Redshift works by acting\nas a Kinesis Stream consumer.",
    "start": "178530",
    "end": "182850"
  },
  {
    "text": "You create a materialized\nview that is the landing area",
    "start": "182850",
    "end": "185580"
  },
  {
    "text": "for data.",
    "start": "185580",
    "end": "186870"
  },
  {
    "text": "Auto-refresh can be turned on,",
    "start": "186870",
    "end": "188370"
  },
  {
    "text": "which loads data from\nthe stream as it arrives.",
    "start": "188370",
    "end": "191519"
  },
  {
    "text": "When the materialized view is refreshed,",
    "start": "191520",
    "end": "193650"
  },
  {
    "text": "Redshift compute nodes\nallocate each data shard",
    "start": "193650",
    "end": "196633"
  },
  {
    "text": "to a compute slice.",
    "start": "196633",
    "end": "198300"
  },
  {
    "text": "Each slice consumes data\nfrom the allocated shards",
    "start": "198300",
    "end": "201900"
  },
  {
    "text": "until the materialized view\nattains parity with the stream.",
    "start": "201900",
    "end": "205620"
  },
  {
    "text": "You don't have to land\nstream data in Amazon S3",
    "start": "205620",
    "end": "208500"
  },
  {
    "text": "because streaming ingestion\ndata goes directly",
    "start": "208500",
    "end": "210810"
  },
  {
    "text": "to the Redshift materialized view.",
    "start": "210810",
    "end": "212313"
  },
  {
    "text": "Once the data is refreshed\nin the materialized view,",
    "start": "213150",
    "end": "215459"
  },
  {
    "text": "you can perform downstream processing",
    "start": "215460",
    "end": "217710"
  },
  {
    "text": "and transformations of\nstreaming data using SQL,",
    "start": "217710",
    "end": "220890"
  },
  {
    "text": "or use your existing BI and analytics tool",
    "start": "220890",
    "end": "223470"
  },
  {
    "text": "for real-time analytics.",
    "start": "223470",
    "end": "225540"
  },
  {
    "text": "With this pattern, you\nget three key benefits.",
    "start": "225540",
    "end": "227627"
  },
  {
    "text": "Redshift can process several\ngigabytes of data per second",
    "start": "227627",
    "end": "231510"
  },
  {
    "text": "from Kinesis Data Streams.",
    "start": "231510",
    "end": "233549"
  },
  {
    "text": "This allows you to experience low latency",
    "start": "233550",
    "end": "236070"
  },
  {
    "text": "and high throughput when\nconsuming streaming data.",
    "start": "236070",
    "end": "239490"
  },
  {
    "text": "So, you can derive insights",
    "start": "239490",
    "end": "241350"
  },
  {
    "text": "from your data in seconds\ninstead of minutes.",
    "start": "241350",
    "end": "244350"
  },
  {
    "text": "Also, it's a straightforward setup.",
    "start": "244350",
    "end": "246360"
  },
  {
    "text": "With few clicks,",
    "start": "246360",
    "end": "247260"
  },
  {
    "text": "you get data continuously\nreplicated to Redshift",
    "start": "247260",
    "end": "249689"
  },
  {
    "text": "without managing complex pipelines.",
    "start": "249690",
    "end": "252240"
  },
  {
    "text": "Finally, you can perform\nrich analytics on data stored",
    "start": "252240",
    "end": "255300"
  },
  {
    "text": "in DynamoDB with Redshift",
    "start": "255300",
    "end": "256980"
  },
  {
    "text": "and using familiar SQL without\nneeding to learn new skills.",
    "start": "256980",
    "end": "260733"
  },
  {
    "text": "Tying back to the health\nfitness application,",
    "start": "261630",
    "end": "263790"
  },
  {
    "text": "when a new member registers",
    "start": "263790",
    "end": "265170"
  },
  {
    "text": "or as a member progresses\nthrough a challenge,",
    "start": "265170",
    "end": "268050"
  },
  {
    "text": "data is made available in Redshift",
    "start": "268050",
    "end": "270000"
  },
  {
    "text": "in near real-time for analysis.",
    "start": "270000",
    "end": "272542"
  },
  {
    "text": "This pattern has the ability to be applied",
    "start": "272542",
    "end": "275130"
  },
  {
    "text": "to many other use cases\nacross other industries.",
    "start": "275130",
    "end": "278010"
  },
  {
    "text": "For example, in the gaming industry,",
    "start": "278010",
    "end": "280530"
  },
  {
    "text": "you will see real-time use cases",
    "start": "280530",
    "end": "282450"
  },
  {
    "text": "to analyze telemetry data\ngenerated from games,",
    "start": "282450",
    "end": "285900"
  },
  {
    "text": "or in the financial sector to determine",
    "start": "285900",
    "end": "288060"
  },
  {
    "text": "if a credit card\ntransaction is fraudulent.",
    "start": "288060",
    "end": "290253"
  },
  {
    "text": "Hopefully, you are able to\ntie this architecture back",
    "start": "291180",
    "end": "293789"
  },
  {
    "text": "to a use case that you may have.",
    "start": "293790",
    "end": "296190"
  },
  {
    "text": "Check out the links\nbelow for more details.",
    "start": "296190",
    "end": "298680"
  },
  {
    "text": "Thanks for watching \"Back to Basics\".",
    "start": "298680",
    "end": "300300"
  },
  {
    "text": "See you next time.",
    "start": "300300",
    "end": "301800"
  }
]