[
  {
    "text": "good afternoon everyone welcome back hope you enjoyed your lunch breaks and",
    "start": "3350",
    "end": "8460"
  },
  {
    "text": "Teresa's keynote a little bit ago we're about to get started just wanted to",
    "start": "8460",
    "end": "13650"
  },
  {
    "text": "remind you all first to make sure you use silence your phones and remember to fill out the evaluation for this session",
    "start": "13650",
    "end": "21630"
  },
  {
    "text": "afterwards we really covet your feedback I want to introduce ray Chang and sandy",
    "start": "21630",
    "end": "27810"
  },
  {
    "text": "hider for this session on serverless architecture thank you welcome",
    "start": "27810",
    "end": "34460"
  },
  {
    "text": "[Applause]",
    "start": "35780",
    "end": "43119"
  },
  {
    "text": "good afternoon everyone so hope everyone's enjoying summit so far thank",
    "start": "45470",
    "end": "52280"
  },
  {
    "text": "you very much for dropping by for this discussion about service architectures I'm reaching the AWS Solutions Architect",
    "start": "52280",
    "end": "59420"
  },
  {
    "text": "and with me as sandy Haider lead developer for a very cool project which",
    "start": "59420",
    "end": "64580"
  },
  {
    "text": "he'll tell you a little bit more about in a little bit called boss DB over at Johns Hopkins University so by way of",
    "start": "64580",
    "end": "73820"
  },
  {
    "text": "signpost excuse me some of the things we'll be talking about today is basically I'm going to be establishing a",
    "start": "73820",
    "end": "81950"
  },
  {
    "text": "baseline laying down groundwork for what it is that we actually call serverless compute here on AWS and then sandy be",
    "start": "81950",
    "end": "90110"
  },
  {
    "text": "here to give you a deep dive into a really cool use case that one of our customers has been able to implement",
    "start": "90110",
    "end": "96020"
  },
  {
    "text": "with the technology so what actually is",
    "start": "96020",
    "end": "102890"
  },
  {
    "text": "this thing called serverless so of course at the end of the day there is an actual server running your application",
    "start": "102890",
    "end": "109729"
  },
  {
    "text": "code but a lot of this follows on from one of the core value propositions have you heard us talk about the AWS platform",
    "start": "109729",
    "end": "116630"
  },
  {
    "text": "which is this idea of subsuming undifferentiated heavy lifting right so",
    "start": "116630",
    "end": "122209"
  },
  {
    "text": "in the application development and compute paradigm what this means is the",
    "start": "122209",
    "end": "127910"
  },
  {
    "text": "thing that differentiates your organization and your mission and mandate from maybe other services or",
    "start": "127910",
    "end": "133730"
  },
  {
    "text": "teams and even your same agency or our organization is at the end of the day",
    "start": "133730",
    "end": "139940"
  },
  {
    "text": "that unique business logic that you have to implement and fulfill for your mission so the value prop of serverless",
    "start": "139940",
    "end": "148250"
  },
  {
    "text": "computing at AWS is to get you the customer to be able to focus more of your time and energy on that unique",
    "start": "148250",
    "end": "155599"
  },
  {
    "text": "logic to differentiate your mission without worrying about things like",
    "start": "155599",
    "end": "160629"
  },
  {
    "text": "provisioning compute infrastructure underneath right we'd the promise of",
    "start": "160629",
    "end": "165920"
  },
  {
    "text": "server lists compute is to get you out of the business of spinning up or",
    "start": "165920",
    "end": "171200"
  },
  {
    "text": "tearing down virtual infrastructure or in some cases if you perience things like peaks or valleys in",
    "start": "171200",
    "end": "178400"
  },
  {
    "text": "your traffic pattern or your applications demand pattern right lead the other the other really good value",
    "start": "178400",
    "end": "185810"
  },
  {
    "text": "prop of serverless at AWS is to get you out of having to manage that scale in and scale out to keep your application",
    "start": "185810",
    "end": "192110"
  },
  {
    "text": "cost efficient and performant finally",
    "start": "192110",
    "end": "198350"
  },
  {
    "text": "there's a it's another very important cost cost optimization capability and",
    "start": "198350",
    "end": "203900"
  },
  {
    "text": "service which is we see that heading there pay for value so one of the really",
    "start": "203900",
    "end": "209780"
  },
  {
    "text": "interesting attributes of service is to allow customers to decouple the cost of",
    "start": "209780",
    "end": "215390"
  },
  {
    "text": "your solution from that from the footprint of that underlying compute infrastructure right when your cost is",
    "start": "215390",
    "end": "221989"
  },
  {
    "text": "coupled to that infrastructure you're paying for that infrastructure whether your application is sitting completely",
    "start": "221989",
    "end": "227630"
  },
  {
    "text": "idle or in which case you're essentially paying for infrastructure that's underutilized or whether your",
    "start": "227630",
    "end": "234110"
  },
  {
    "text": "application exists is experiencing really heavy demand in which case you're paying for that same infrastructure but",
    "start": "234110",
    "end": "239720"
  },
  {
    "text": "also possibly degrading the user experience due to increase latency etc",
    "start": "239720",
    "end": "245260"
  },
  {
    "text": "so a very fundamental and integral attribute of service is to more closely",
    "start": "245260",
    "end": "251540"
  },
  {
    "text": "tie the cost of your solution to actual volume right requests per sec or total",
    "start": "251540",
    "end": "258380"
  },
  {
    "text": "request service if you're running an API or something like a website right actually actually tie your cost closer",
    "start": "258380",
    "end": "266630"
  },
  {
    "text": "to the value you're actually getting out of the solution and of course because",
    "start": "266630",
    "end": "272440"
  },
  {
    "text": "you as a customer your input to your solution is defining that business logic and behavior and characteristics that",
    "start": "272440",
    "end": "278660"
  },
  {
    "text": "you wanted to have the underlying implementation is on AWS teams to implement so you get all the you get all",
    "start": "278660",
    "end": "285620"
  },
  {
    "text": "those best practices rolled in of reference implementations of highly",
    "start": "285620",
    "end": "290930"
  },
  {
    "text": "available secure fault tolerant services on AWS so this is sort of a view of a",
    "start": "290930",
    "end": "300560"
  },
  {
    "text": "lot of the offerings in the AWS platform they're organized here approximately to",
    "start": "300560",
    "end": "306289"
  },
  {
    "text": "give you a view of one way to view them on the spectrum from services that are actually running",
    "start": "306289",
    "end": "312569"
  },
  {
    "text": "on customer deployed and managed ec2 infrastructure ec2 is Elastic Compute",
    "start": "312569",
    "end": "319229"
  },
  {
    "text": "cloud that's one of our core foundational services for running virtual machines on demand at scale and",
    "start": "319229",
    "end": "326520"
  },
  {
    "text": "there are a lot of customers successfully running workloads directly on ec2 but of course that also means",
    "start": "326520",
    "end": "332639"
  },
  {
    "text": "customers are doing things like provisioning virtual machines making",
    "start": "332639",
    "end": "338550"
  },
  {
    "text": "sure security patches are up to date at the virtual operating system level etc etc so there's some other services there",
    "start": "338550",
    "end": "348000"
  },
  {
    "text": "where you start migrating to the other side in the middle there's sort of this category which has been labeled managed",
    "start": "348000",
    "end": "355530"
  },
  {
    "text": "services here where the underlying platform is still ec2 but now customers",
    "start": "355530",
    "end": "362400"
  },
  {
    "text": "are more in the realm of different just consuming the service on ec2 without",
    "start": "362400",
    "end": "367919"
  },
  {
    "text": "having to directly manage it right so for those of you that have consumed",
    "start": "367919",
    "end": "373740"
  },
  {
    "text": "services before like some of the examples up there are Amazon RDS which",
    "start": "373740",
    "end": "379080"
  },
  {
    "text": "is relational database service that's a great example of a relational database",
    "start": "379080",
    "end": "384360"
  },
  {
    "text": "engine that runs on AWS managed compute infrastructure but you're you as the",
    "start": "384360",
    "end": "391590"
  },
  {
    "text": "customer don't have to worry about things like OS patches that said right you just get super user privileges at",
    "start": "391590",
    "end": "397469"
  },
  {
    "text": "the database level and manage the service accordingly finally all the way",
    "start": "397469",
    "end": "403050"
  },
  {
    "text": "in the server will ascend that's primarily what we're here to talk about today that is in my opinion sort of the",
    "start": "403050",
    "end": "410789"
  },
  {
    "text": "natural evolution of consuming higher value services in the stack where you as",
    "start": "410789",
    "end": "416729"
  },
  {
    "text": "the customer no longer I mean you still have visibility into the behavior of",
    "start": "416729",
    "end": "421949"
  },
  {
    "text": "your solution obviously but you're no longer in the realm of managing",
    "start": "421949",
    "end": "427169"
  },
  {
    "text": "infrastructure whatsoever and you're subsuming that or you're allowing AWS to",
    "start": "427169",
    "end": "432449"
  },
  {
    "text": "subsume that undifferentiated heavy lifting",
    "start": "432449",
    "end": "438110"
  },
  {
    "text": "beg your pardon",
    "start": "441889",
    "end": "445039"
  },
  {
    "text": "so this is another way to kind of view what we're talking about here in terms",
    "start": "451389",
    "end": "456969"
  },
  {
    "text": "of value proposition of shifting more towards serverless offerings in the platform so this view is a little bit",
    "start": "456969",
    "end": "465009"
  },
  {
    "text": "more compute centric around the offerings at the bottom of that arrow you see more of what we were talking",
    "start": "465009",
    "end": "470949"
  },
  {
    "text": "about running directly on ec2 infrastructure towards the top of that scale is where we have our serverless",
    "start": "470949",
    "end": "477159"
  },
  {
    "text": "offerings which in the compute world mostly center around the AWS lambda",
    "start": "477159",
    "end": "483639"
  },
  {
    "text": "which is our server list function as a service offering we'll be drilling a little bit more into that in just a",
    "start": "483639",
    "end": "489009"
  },
  {
    "text": "moment one thing that this chart is meant to explicate is these two columns",
    "start": "489009",
    "end": "496090"
  },
  {
    "text": "of different items of operational responsibilities as we said the value",
    "start": "496090",
    "end": "503289"
  },
  {
    "text": "prop of serverless is to try to get AWS to subsume more of that operational",
    "start": "503289",
    "end": "508719"
  },
  {
    "text": "responsibility and as you move towards the serverless end like lambda you can",
    "start": "508719",
    "end": "514510"
  },
  {
    "text": "see those items start to disappear from the customer and then more of them pop up on the AWS end right I don't want to",
    "start": "514510",
    "end": "521198"
  },
  {
    "text": "go through every single one of those bullet points but the general was story told is the closer you get to a true",
    "start": "521199",
    "end": "527680"
  },
  {
    "text": "service offering the more you're once again letting AWS handle that",
    "start": "527680",
    "end": "533560"
  },
  {
    "text": "undifferentiated heavy lifting allowing you as the customer focus on the stuff that's specific to you as an",
    "start": "533560",
    "end": "540699"
  },
  {
    "text": "organization agency business etc so this",
    "start": "540699",
    "end": "546910"
  },
  {
    "text": "limb the thing that we've been talking a lot about what is it so at the end of the day it is a it's it's a function as",
    "start": "546910",
    "end": "555610"
  },
  {
    "text": "a service is one popular way to describe it customers bring their code to the",
    "start": "555610",
    "end": "561490"
  },
  {
    "text": "lambda platform and AWS execute sit customers aren't worried about firing up",
    "start": "561490",
    "end": "567430"
  },
  {
    "text": "virtual compute infrastructure to run this code this code can be event-driven",
    "start": "567430",
    "end": "572640"
  },
  {
    "text": "the ideal use cases are short-lived relatively stateless transactions and we",
    "start": "572640",
    "end": "579699"
  },
  {
    "text": "support a wide variety",
    "start": "579699",
    "end": "583019"
  },
  {
    "text": "language they can think of but we'll get into that in a moment but also some very deep data integrations with the rest of",
    "start": "584860",
    "end": "591970"
  },
  {
    "text": "the AWS platform so aside from the operational responsibility value prop",
    "start": "591970",
    "end": "599410"
  },
  {
    "text": "for things like lambda it's also a good service to look at from the perspective",
    "start": "599410",
    "end": "604750"
  },
  {
    "text": "of increasing the productivity and empowering your application develop teams to get more done right so we we we",
    "start": "604750",
    "end": "614020"
  },
  {
    "text": "support as I said basically any programming runtime now that you can come up with just about but even",
    "start": "614020",
    "end": "620530"
  },
  {
    "text": "out-of-the-box there are some very there's some long-established runtimes that we already supported different",
    "start": "620530",
    "end": "628330"
  },
  {
    "text": "versions of Python nodejs c-sharp for dotnet development Java go Ruby etc we",
    "start": "628330",
    "end": "638050"
  },
  {
    "text": "also don't want to disrupt the productivity of your existing application processes so we we support",
    "start": "638050",
    "end": "644680"
  },
  {
    "text": "essentially the existing popular tool chains out there for for develop application developers to use II's",
    "start": "644680",
    "end": "651010"
  },
  {
    "text": "compilers etc and we can talk we're gonna talk a little bit more about that in just a little bit so just a few",
    "start": "651010",
    "end": "661870"
  },
  {
    "text": "moments ago I mentioned deep integration with other AWS services lambda is at its",
    "start": "661870",
    "end": "669070"
  },
  {
    "text": "core and event-driven programming platform that permits application",
    "start": "669070",
    "end": "674950"
  },
  {
    "text": "developers to start exploring patterns like sync both synchronous and asynchronous event-driven programming",
    "start": "674950",
    "end": "681600"
  },
  {
    "text": "decoupled microservices etc and so this is just a non non complete",
    "start": "681600",
    "end": "688620"
  },
  {
    "text": "representation of different services in the platform that can trigger AWS lambda invitations and it covers of course all",
    "start": "688620",
    "end": "696190"
  },
  {
    "text": "sorts of broad spectrums like you've been just the new data into your simple",
    "start": "696190",
    "end": "702100"
  },
  {
    "text": "storage service or s3 bucket and you can trigger at lambda execution based on that event you've got a code repository",
    "start": "702100",
    "end": "711450"
  },
  {
    "text": "persisted up in our a double use code commit service for example and we can use that to dry",
    "start": "711450",
    "end": "717640"
  },
  {
    "text": "and they WS lamda execution so just about almost every use case you can think of there's a way to use lamda to",
    "start": "717640",
    "end": "725290"
  },
  {
    "text": "run your own custom logic based on that event so very kind of intermediate level",
    "start": "725290",
    "end": "734770"
  },
  {
    "text": "dive into the structure of a lambda function just very briefly here this is essentially a note j/s code snippet for",
    "start": "734770",
    "end": "744310"
  },
  {
    "text": "a lambda function obviously in practice your production lambda functions are",
    "start": "744310",
    "end": "750370"
  },
  {
    "text": "gonna consist of more code and more complex code than that but this slide is really meant to drive home the fact that",
    "start": "750370",
    "end": "756550"
  },
  {
    "text": "it's a straightforward integration right the lambda execution is triggered by a",
    "start": "756550",
    "end": "761710"
  },
  {
    "text": "given event it's got essentially an execution context that goes along with it and then you break your custom",
    "start": "761710",
    "end": "769450"
  },
  {
    "text": "business logic to act on that event in the case of new JS for example those",
    "start": "769450",
    "end": "774970"
  },
  {
    "text": "event both the event and the execution context arrive simply serialized as JSON",
    "start": "774970",
    "end": "780040"
  },
  {
    "text": "objects which then your application development process can then deserialize and process accordingly so some-some",
    "start": "780040",
    "end": "790870"
  },
  {
    "text": "that developer tool chain integration we mentioned earlier there's lots of different options available here and",
    "start": "790870",
    "end": "796780"
  },
  {
    "text": "this is once again a non exhaustive list but we of course have our cloud hosted",
    "start": "796780",
    "end": "802420"
  },
  {
    "text": "IDE called cloud 9 and but there's also integrations with eclipse for example",
    "start": "802420",
    "end": "808750"
  },
  {
    "text": "for your java developers or pycharm if you have Python application developers",
    "start": "808750",
    "end": "813970"
  },
  {
    "text": "using that IDE last year at reinvent we announced Developer Preview for our tool",
    "start": "813970",
    "end": "821350"
  },
  {
    "text": "kit integrations with both IntelliJ and visual codes of Visual Studio code",
    "start": "821350",
    "end": "828450"
  },
  {
    "text": "another feature that we also announced that reinvent last year was the availability of lambda layers so this is",
    "start": "828450",
    "end": "836080"
  },
  {
    "text": "a relatively new addition to the lambda functionality ecosystem this is the ability to define layers of code or",
    "start": "836080",
    "end": "844780"
  },
  {
    "text": "layers of dependencies in your AWS account that can serve as common execution",
    "start": "844780",
    "end": "851200"
  },
  {
    "text": "packages or dependencies for multiple lambda functions so this can greatly simplify the process for example if you",
    "start": "851200",
    "end": "858670"
  },
  {
    "text": "have within your enterprise standardized standardized libraries already for doing",
    "start": "858670",
    "end": "863680"
  },
  {
    "text": "things like authentication or generating uu IDs etc functionality that's going to",
    "start": "863680",
    "end": "869080"
  },
  {
    "text": "be widespread throughout your lambda ecosystem instead of repeating the code",
    "start": "869080",
    "end": "874570"
  },
  {
    "text": "over and over again you can now use layers to deploy a common essentially a",
    "start": "874570",
    "end": "879790"
  },
  {
    "text": "common library across that infrastructure so lambda integrates very",
    "start": "879790",
    "end": "888580"
  },
  {
    "text": "tightly with another service which I want to touch upon briefly in the AWS platform called API gateway much like",
    "start": "888580",
    "end": "896140"
  },
  {
    "text": "how lambda is essentially a server list function execution service API gateway",
    "start": "896140",
    "end": "901630"
  },
  {
    "text": "is essentially a managed server list HTTP endpoint provider for you so",
    "start": "901630",
    "end": "908560"
  },
  {
    "text": "instead of rolling out your own compute infrastructure to expose HTTP end points",
    "start": "908560",
    "end": "913840"
  },
  {
    "text": "for your API for example you can now deploy it onto API gateway and you bring",
    "start": "913840",
    "end": "919360"
  },
  {
    "text": "your own logic you define your own endpoints in well-known formats for example like swagger api's or we have of",
    "start": "919360",
    "end": "927100"
  },
  {
    "text": "course the our own AWS api for you to programmatically build out those definitions if you wish we and a lot of",
    "start": "927100",
    "end": "935980"
  },
  {
    "text": "what we talked about earlier the the management of the infrastructure is not upon you",
    "start": "935980",
    "end": "941350"
  },
  {
    "text": "that's the customers so you don't worry about things like provisioning throttling up and down scaling in and",
    "start": "941350",
    "end": "947500"
  },
  {
    "text": "out for different peaks and valleys in your demand and what you've asked so one",
    "start": "947500",
    "end": "956290"
  },
  {
    "text": "of the notional ways that API gateway can play well with lambda and other services and then AWS architecture is to",
    "start": "956290",
    "end": "963460"
  },
  {
    "text": "use API gateway for example two front requests coming in from the general internet there's some other boxes on",
    "start": "963460",
    "end": "970720"
  },
  {
    "text": "there that we haven't really talked about yet but for example cloud front our scalable content distribution",
    "start": "970720",
    "end": "977650"
  },
  {
    "text": "network solution but this this is essentially what you're looking at is a",
    "start": "977650",
    "end": "984460"
  },
  {
    "text": "you could think of this as a website where the entry point from the general",
    "start": "984460",
    "end": "989740"
  },
  {
    "text": "internet there are no servers there to handle HTTP requests right there's no uptime of boxes for you to worry about",
    "start": "989740",
    "end": "996040"
  },
  {
    "text": "there to keep your services responsive and available now you could have your",
    "start": "996040",
    "end": "1001740"
  },
  {
    "text": "services integrate with other workloads that happen to be hosted on other AWS services like ec2 on the backend but",
    "start": "1001740",
    "end": "1008760"
  },
  {
    "text": "that's completely up to you in terms of freedom to design and implement another",
    "start": "1008760",
    "end": "1018360"
  },
  {
    "text": "kind of good service to mention here is step functions which is a way of coordinating the execution and you know",
    "start": "1018360",
    "end": "1026308"
  },
  {
    "text": "sort of serialization or serializing execution of multiple lambdas step",
    "start": "1026309",
    "end": "1031920"
  },
  {
    "text": "functions the development of a step function workflow is very intuitive what you're creating is essentially a finite",
    "start": "1031920",
    "end": "1038790"
  },
  {
    "text": "state machine where they define start and different transitions the different states which can tie in to executions of",
    "start": "1038790",
    "end": "1046260"
  },
  {
    "text": "your various lambdas and the whole thing after it gets built it will display it to you and the graphical workflow so",
    "start": "1046260",
    "end": "1052890"
  },
  {
    "text": "it's very easy for you to see what even a fairly complex application workflow involving potentially many many lambda",
    "start": "1052890",
    "end": "1060809"
  },
  {
    "text": "functions can look like finally there's",
    "start": "1060809",
    "end": "1068760"
  },
  {
    "text": "a there's a couple other important categories of services for integration here for server list workflows things",
    "start": "1068760",
    "end": "1074760"
  },
  {
    "text": "like security right for anyone here that's worked or deployed any sort of",
    "start": "1074760",
    "end": "1082470"
  },
  {
    "text": "work flows into a double you've probably had to deal with I done the in Access Management already and lambda an API",
    "start": "1082470",
    "end": "1089640"
  },
  {
    "text": "gateway and step functions are no exceptions I am is pretty much where the rubber meets the road in terms of how we",
    "start": "1089640",
    "end": "1096410"
  },
  {
    "text": "control audit and you know permit or deny access to AWS resources",
    "start": "1096410",
    "end": "1102320"
  },
  {
    "text": "Cognito is a handy once again serverless managed user pool that you can use for",
    "start": "1102320",
    "end": "1109950"
  },
  {
    "text": "authenticating your applications and authorizing their access to your back-end",
    "start": "1109950",
    "end": "1114980"
  },
  {
    "text": "systems other points of integration with cloud watch we mentioned that earlier",
    "start": "1114980",
    "end": "1120890"
  },
  {
    "text": "that's essentially a content distribution network they can use to front your services or web sites for",
    "start": "1120890",
    "end": "1128059"
  },
  {
    "text": "example and reduce end latency to even a distributed geographical user base x-ray",
    "start": "1128059",
    "end": "1134540"
  },
  {
    "text": "is a handy tool for troubleshooting or just gaining visibility into and and",
    "start": "1134540",
    "end": "1139640"
  },
  {
    "text": "performance and latency of your of your workflow right so if your users start",
    "start": "1139640",
    "end": "1145490"
  },
  {
    "text": "reporting that certain calls to your services are taking longer than usual x-rays are quite great way to get",
    "start": "1145490",
    "end": "1152210"
  },
  {
    "text": "instant visibility into where exactly those bubbles or lags could be so that's",
    "start": "1152210",
    "end": "1159220"
  },
  {
    "text": "sort of a lot of setup from me and now I want to turn it over to Sandy so he can",
    "start": "1159220",
    "end": "1164419"
  },
  {
    "text": "talk about how Johns Hopkins is doing something really cool with this technology",
    "start": "1164419",
    "end": "1169600"
  },
  {
    "text": "ok so that was a quick introduction of Amazon server list computing what I'm",
    "start": "1175360",
    "end": "1181220"
  },
  {
    "text": "gonna do is actually go through some real-world examples using boss DB boss",
    "start": "1181220",
    "end": "1186530"
  },
  {
    "text": "DB is a neuroscience database for brain research that provides mechanisms for",
    "start": "1186530",
    "end": "1191660"
  },
  {
    "text": "uploading brain images and obtaining the data visualizing it and then actually individual accessing images metadata and",
    "start": "1191660",
    "end": "1199460"
  },
  {
    "text": "objects in the system but to do research it's built entirely in AWS and provides",
    "start": "1199460",
    "end": "1204799"
  },
  {
    "text": "a scalable solution that's highly available a lot of our back-end services are actually in use serverless computing",
    "start": "1204799",
    "end": "1212240"
  },
  {
    "text": "and we're going to go over some examples of that here a quick shout out to our",
    "start": "1212240",
    "end": "1217340"
  },
  {
    "text": "sponsors I ARPA in NIH on the microns project we're actually trying to",
    "start": "1217340",
    "end": "1223480"
  },
  {
    "text": "revolutionize machine learning by re reverse engineering the brain and what",
    "start": "1223480",
    "end": "1229549"
  },
  {
    "text": "we're then going to do is actually try and create neroli inspired artificial intelligence that was started in 2015",
    "start": "1229549",
    "end": "1237350"
  },
  {
    "text": "and out of that work we actually got another new funding from NIH to actually build the community database boss DB and",
    "start": "1237350",
    "end": "1244130"
  },
  {
    "text": "in that is a it's another cloud database we're actually storing electron microscopy and x-ray my chromatography",
    "start": "1244130",
    "end": "1252730"
  },
  {
    "text": "data and both of these are part of the US brain initiative so quickly about me",
    "start": "1252730",
    "end": "1261100"
  },
  {
    "text": "I work for the Applied Physics lab it's a division of Johns Hopkins University we have around 6,000 members 6,000 plus",
    "start": "1261100",
    "end": "1268150"
  },
  {
    "text": "members it's in Laurel Maryland and we work with all of those sponsors down",
    "start": "1268150",
    "end": "1273490"
  },
  {
    "text": "there in that bingo diagram you see so",
    "start": "1273490",
    "end": "1278800"
  },
  {
    "text": "what I want to do is give you a little more detail about how we actually put data and what data is actually stored in",
    "start": "1278800",
    "end": "1284920"
  },
  {
    "text": "the boss and that'll help you understand how we do then our service technologies",
    "start": "1284920",
    "end": "1289960"
  },
  {
    "text": "in in future slides so this boss actually stands for block and object",
    "start": "1289960",
    "end": "1295810"
  },
  {
    "text": "storage service and the Block in this case is a three dimensional array which",
    "start": "1295810",
    "end": "1301510"
  },
  {
    "text": "we call a cuboid and that's a three dimensional chunk of data that we then store spatially indexed in s3 so in this",
    "start": "1301510",
    "end": "1309520"
  },
  {
    "text": "diagram you can actually see there's a microscope which is actually taking slices of brain tissue taking a picture",
    "start": "1309520",
    "end": "1314740"
  },
  {
    "text": "of them we then chop those down into individual tiles and then we take 16",
    "start": "1314740",
    "end": "1320020"
  },
  {
    "text": "context consecutive tiles to actually build a cuboid that we store on s3 the",
    "start": "1320020",
    "end": "1326170"
  },
  {
    "text": "other side of the boss blocking objects store our objects and objects are really",
    "start": "1326170",
    "end": "1332770"
  },
  {
    "text": "Co registered identifiers in this case there's 64 bit identifiers that are",
    "start": "1332770",
    "end": "1339450"
  },
  {
    "text": "identify objects in the system so in this case we're actually identifying different brain cells and you can see on",
    "start": "1339450",
    "end": "1345610"
  },
  {
    "text": "the left we would actually have the image data on the right we've actually identified 3 3 objects in the system and",
    "start": "1345610",
    "end": "1353460"
  },
  {
    "text": "the objects are actually identified as voxels which is a volumetric pixel a",
    "start": "1353460",
    "end": "1359680"
  },
  {
    "text": "three-dimensional pixel all right so that's objects so what I want to do now",
    "start": "1359680",
    "end": "1365470"
  },
  {
    "text": "is actually show you how we actually map connections in the brain so in this example we have a didn't do our picture",
    "start": "1365470",
    "end": "1373600"
  },
  {
    "text": "for some reason let's see if I go back if I can get it to run",
    "start": "1373600",
    "end": "1378270"
  },
  {
    "text": "hmm well I'm gonna just talk about it so in this example we actually were",
    "start": "1378670",
    "end": "1384170"
  },
  {
    "text": "annotating it's an actual movie where we actually go through individual slice and ammount annotate that same section as it",
    "start": "1384170",
    "end": "1390050"
  },
  {
    "text": "changes slowly over time and we can then take that all those identifiers and actually build up a neuron and then also",
    "start": "1390050",
    "end": "1397040"
  },
  {
    "text": "map out where the synapses are which is the connections between neurons so in this example here there was it was small",
    "start": "1397040",
    "end": "1403280"
  },
  {
    "text": "it was about a thousand connections I think in the microns data set we actually are using a cubic millimeter of",
    "start": "1403280",
    "end": "1409100"
  },
  {
    "text": "brain tissue and we ended up having millions and millions of connections in there so it's not something in this",
    "start": "1409100",
    "end": "1414260"
  },
  {
    "text": "example they actually hand coded each one of these identifiers went through in on each image and we can't actually do",
    "start": "1414260",
    "end": "1421370"
  },
  {
    "text": "that with millions and millions of connections so we're actually developing algorithms to actually do those annotations for us and the other thing",
    "start": "1421370",
    "end": "1428900"
  },
  {
    "text": "that's kind of interesting about this is the cubic millimeter we're talking about a brain brain tissue is actually if you",
    "start": "1428900",
    "end": "1435380"
  },
  {
    "text": "were to take an MRI of a brain it would be one pixel in that brain and that ends",
    "start": "1435380",
    "end": "1440480"
  },
  {
    "text": "up being 2 petabytes of data in our system so here are the ways we actually",
    "start": "1440480",
    "end": "1447560"
  },
  {
    "text": "use serverless technology in Boston be there's three categories really tasks that run",
    "start": "1447560",
    "end": "1453380"
  },
  {
    "text": "periodically we don't want hardware running all the time in those cases so we use serverless to do it error",
    "start": "1453380",
    "end": "1459170"
  },
  {
    "text": "reporting it can be very handy to use Amazon SNS to notify you when there's an actual problem in your server and then",
    "start": "1459170",
    "end": "1465710"
  },
  {
    "text": "managing servers so when there is a possible issue we keep them from from",
    "start": "1465710",
    "end": "1472130"
  },
  {
    "text": "progressing into larger problems and so we're going to go over three specific",
    "start": "1472130",
    "end": "1477740"
  },
  {
    "text": "examples of using serverless high-speed ingest downsample and hoshi corpse vault",
    "start": "1477740",
    "end": "1484970"
  },
  {
    "text": "in console servers and we'll explain all of those here in just a few so high",
    "start": "1484970",
    "end": "1491810"
  },
  {
    "text": "speed ingest we have we several images the client that will have several tiles",
    "start": "1491810",
    "end": "1497600"
  },
  {
    "text": "that they want to actually upload but that's not the format we end up wanting it in we want and cuboids and we want to",
    "start": "1497600",
    "end": "1502940"
  },
  {
    "text": "stored an s3 in a dynamo DB index of the infant",
    "start": "1502940",
    "end": "1508480"
  },
  {
    "text": "so we designed the system so it can be",
    "start": "1510980",
    "end": "1516240"
  },
  {
    "text": "so users can kickoff ingest jobs at any time of the day and we don't have to get involved in the system and we wanted the",
    "start": "1516240",
    "end": "1522149"
  },
  {
    "text": "system to actually be able to scale up these data sets can be anywhere from 2 gigabytes to 2 petabytes and data in",
    "start": "1522149",
    "end": "1527399"
  },
  {
    "text": "size and lastly we designed the system to make it so the clients bandwidth will",
    "start": "1527399",
    "end": "1532529"
  },
  {
    "text": "be the pn problem in the solution we want it to scale up until their bandwidth is slowing down the upload and",
    "start": "1532529",
    "end": "1539630"
  },
  {
    "text": "so what I want to do now is actually go through a diagram of how we end up",
    "start": "1539630",
    "end": "1544980"
  },
  {
    "text": "originally setting it up and then we'll talk about some of the problems that we came across while doing it so over on",
    "start": "1544980",
    "end": "1550409"
  },
  {
    "text": "the right is the end goal we want to actually populate the cuboid index and the cuboid bucket and then in order to",
    "start": "1550409",
    "end": "1559110"
  },
  {
    "text": "actually do that though we're gonna need to have temporary storage because the the clients are actually uploading",
    "start": "1559110",
    "end": "1565500"
  },
  {
    "text": "images over and over again and we need to convert those into cuboids so we have these temporary bucket in index which",
    "start": "1565500",
    "end": "1571860"
  },
  {
    "text": "holds all the images I only get 16 I'm not sure why it's going forward here and when we actually get 16 tiles in a row",
    "start": "1571860",
    "end": "1578940"
  },
  {
    "text": "we can actually convert that into a cuboid so when we first start up when",
    "start": "1578940",
    "end": "1585690"
  },
  {
    "text": "the client wants to actually start an ingestion they give us the dimensions XY and Z that they're actually one a load",
    "start": "1585690",
    "end": "1592080"
  },
  {
    "text": "and we then compute all of the tiles that need to get uploaded for the work the ingest job to actually be complete",
    "start": "1592080",
    "end": "1598230"
  },
  {
    "text": "so as we create a step function and to sqs queues the images to upload and the",
    "start": "1598230",
    "end": "1604889"
  },
  {
    "text": "cuboid ready queue and then the step function will actually then populate that all of the actual messages in the",
    "start": "1604889",
    "end": "1611639"
  },
  {
    "text": "the images Q so we fire off a whole bunch of lambdas in parallel to actually populate all these messages and then",
    "start": "1611639",
    "end": "1618419"
  },
  {
    "text": "when we actually see afterwards that we have the correct count we allow the the client to actually I'm gonna go back and",
    "start": "1618419",
    "end": "1625080"
  },
  {
    "text": "show you so you can show that one again right there so the client now",
    "start": "1625080",
    "end": "1634720"
  },
  {
    "text": "does this loop where it basically goes and grabs a message that tells it what tile it needs it goes and finds it on",
    "start": "1634720",
    "end": "1640810"
  },
  {
    "text": "its server and uploads it up to the tile bucket and it continues to there's this over to do this over and over and the",
    "start": "1640810",
    "end": "1648070"
  },
  {
    "text": "nice thing about this is now we've got a solution that if the clients system crashes we know exactly where they are",
    "start": "1648070",
    "end": "1653620"
  },
  {
    "text": "because we've got all the images that need to get uploaded still the client is actually multi-threaded excuse me is",
    "start": "1653620",
    "end": "1659380"
  },
  {
    "text": "actually multi-threaded so and it's also",
    "start": "1659380",
    "end": "1664390"
  },
  {
    "text": "we can actually spin up multiple clients in pair in parallel and actually have them all work on getting this data",
    "start": "1664390",
    "end": "1669820"
  },
  {
    "text": "ingested into our system so when a tile",
    "start": "1669820",
    "end": "1678370"
  },
  {
    "text": "is actually uploaded it automatically fires off the lambda which goes ahead and registers that new mini tile into",
    "start": "1678370",
    "end": "1684700"
  },
  {
    "text": "the tile index and it checks to see do I have 16 16 consecutive tiles and if so",
    "start": "1684700",
    "end": "1691030"
  },
  {
    "text": "it actually puts a new message in the cuboid ready bucket so after it actually",
    "start": "1691030",
    "end": "1700300"
  },
  {
    "text": "does that work it would then go and actually delete the message out of the image queue now a new new lambda is",
    "start": "1700300",
    "end": "1709420"
  },
  {
    "text": "actually fired off of the cuboid ready queue and it goes and grabs all 16 of those images converts them into cuboid",
    "start": "1709420",
    "end": "1715870"
  },
  {
    "text": "and puts the puts it in the end the result of the index and bucket for the system so this ended up working pretty",
    "start": "1715870",
    "end": "1722350"
  },
  {
    "text": "well for us for about six months and then as we expanded and got faster and faster and our research associates got",
    "start": "1722350",
    "end": "1731220"
  },
  {
    "text": "better actual network connections we found out that it actually didn't work so well and here's the the problem that",
    "start": "1731220",
    "end": "1737650"
  },
  {
    "text": "we ran into so the way we have this working now client goes grabs a message out of the message queue uploads it to",
    "start": "1737650",
    "end": "1743920"
  },
  {
    "text": "the bucket the object is triggered and it then deletes the message out of the object well when we hit our concurrent",
    "start": "1743920",
    "end": "1750460"
  },
  {
    "text": "lambda limit I think it defaults to 2,000 you then start throttling and lambdas are actually not firing so",
    "start": "1750460",
    "end": "1756940"
  },
  {
    "text": "they're not actually deleting the messages that are in that image queue and then those messages then become",
    "start": "1756940",
    "end": "1762730"
  },
  {
    "text": "visible after they timeout and the client then grows and grabs it again and it repeats we found this wasn't an ideal solution",
    "start": "1762730",
    "end": "1768700"
  },
  {
    "text": "so we could have just increased the lambda and that's actually what we did for the short term but we ended up",
    "start": "1768700",
    "end": "1774159"
  },
  {
    "text": "redesigning it a little and I'll show you that in just a second how we switched it around the other problem we ran into is we created a dynamo DB",
    "start": "1774159",
    "end": "1780970"
  },
  {
    "text": "global secondary index for the ingest jobid and that ended up causing a hotspot in a",
    "start": "1780970",
    "end": "1787720"
  },
  {
    "text": "single partition because every single write into that global secondary secondary index was hitting the same",
    "start": "1787720",
    "end": "1794049"
  },
  {
    "text": "partition so the way around that was to actually add a pen de random number",
    "start": "1794049",
    "end": "1800470"
  },
  {
    "text": "between 1 and 100 to the ID and then were making sure what we're not hitting that one partition over and over again",
    "start": "1800470",
    "end": "1806460"
  },
  {
    "text": "ok so let me show you how we are final or our final solution for actually doing high-speed ingest ended up being so",
    "start": "1806460",
    "end": "1814890"
  },
  {
    "text": "right right now you spin up a new queue as well and that's the tile queue so now",
    "start": "1814890",
    "end": "1820870"
  },
  {
    "text": "the the client actually does this same loop again it grabs an image from the images queue and it uploads to the tile",
    "start": "1820870",
    "end": "1826570"
  },
  {
    "text": "bucket it then goes ahead and actually uploads a new message to the tile queue and then it it goes and actually deletes",
    "start": "1826570",
    "end": "1833679"
  },
  {
    "text": "the message out of the image image queue so the advantage now is even if our lambdas are throttling we're still",
    "start": "1833679",
    "end": "1839440"
  },
  {
    "text": "deleting messaged we're not duplicating work the other nice thing about this solution is we're actually we actually",
    "start": "1839440",
    "end": "1847210"
  },
  {
    "text": "can see how backed up our system is it's more transparent the tile queue can show us all of the actual messages that",
    "start": "1847210",
    "end": "1853659"
  },
  {
    "text": "haven't been haven't are waiting to be took to be finished so at this point it",
    "start": "1853659",
    "end": "1860260"
  },
  {
    "text": "fires off a new message and really the new lambda in at this point it's really",
    "start": "1860260",
    "end": "1866289"
  },
  {
    "text": "the same as it was working before so it's really we're changing it now that the lambdas are firing off the tile",
    "start": "1866289",
    "end": "1871779"
  },
  {
    "text": "queue in the system ok so this is a diagram of actually ingest speeds so we",
    "start": "1871779",
    "end": "1878890"
  },
  {
    "text": "were able to actually get 200 gigabytes per minute upload speeds when we were actually doing testing in this testing",
    "start": "1878890",
    "end": "1884289"
  },
  {
    "text": "we were actually we eliminated the clients bandwidth we actually used as snowball to upload all of them the tiles",
    "start": "1884289",
    "end": "1891940"
  },
  {
    "text": "to a bucket and then from there we did the ingest through our ingest client directly into the boss so I was pretty",
    "start": "1891940",
    "end": "1897700"
  },
  {
    "text": "good and actually the end was ending was can current lambdas was was slowing down the system so we could have gotten it even",
    "start": "1897700",
    "end": "1903520"
  },
  {
    "text": "faster i think if we needed to so I'm going to take a quick minute and actually talk about Heaviside this is",
    "start": "1903520",
    "end": "1909820"
  },
  {
    "text": "the library open source library we created for dealing with AWS step functions it it has a DSL a",
    "start": "1909820",
    "end": "1919120"
  },
  {
    "text": "domain-specific language and a compiler and it will actually take your your-your-your Heaviside code and",
    "start": "1919120",
    "end": "1926170"
  },
  {
    "text": "actually compile it to an AWS step function in json format and i'll actually verify that at work is working",
    "start": "1926170",
    "end": "1931930"
  },
  {
    "text": "correctly what we found is actually working with step functions is really nice but it can be hard to actually",
    "start": "1931930",
    "end": "1937810"
  },
  {
    "text": "update them over time so we're using our DSL we found it was easier to actually update the code and then compile it down",
    "start": "1937810",
    "end": "1945130"
  },
  {
    "text": "so I'm going to show an example here is our actual delete step functions over on",
    "start": "1945130",
    "end": "1950710"
  },
  {
    "text": "the right is the actual step function in AWS our delete function is kind of complex because we have a lot of foreign",
    "start": "1950710",
    "end": "1956800"
  },
  {
    "text": "keys and we have to make sure we're deleting them all in the proper order over on the left is the example of our",
    "start": "1956800",
    "end": "1962770"
  },
  {
    "text": "delete Heaviside script it's 48 lines long it compiles down to 154 lines JSON",
    "start": "1962770",
    "end": "1970000"
  },
  {
    "text": "step function which can then be imported into AWS okay so now I want to go",
    "start": "1970000",
    "end": "1977110"
  },
  {
    "text": "through an example where we're actually using our step function again and this is down sampling so down sampling after",
    "start": "1977110",
    "end": "1982600"
  },
  {
    "text": "our users have researchers actually uploaded their data the F in town o times want to pull back and see the data",
    "start": "1982600",
    "end": "1988660"
  },
  {
    "text": "from farther away kind of like you would do in Google Maps you sometimes you're",
    "start": "1988660",
    "end": "1993970"
  },
  {
    "text": "looking at the street level oftentimes you want to see the state or a knife nation level you don't want to download all of the streets just when you're",
    "start": "1993970",
    "end": "2000000"
  },
  {
    "text": "looking at the state level so we create these resolution levels and you can see",
    "start": "2000000",
    "end": "2005730"
  },
  {
    "text": "in this example we're taking four tiles four cuboids at resolution zero and combining them into a single one at",
    "start": "2005730",
    "end": "2011670"
  },
  {
    "text": "resolution one so this sort of shows the",
    "start": "2011670",
    "end": "2017060"
  },
  {
    "text": "the amount of levels we actually typically do we usually have six to ten resolution levels depending on the data",
    "start": "2017060",
    "end": "2023940"
  },
  {
    "text": "size and you can see then the size the exercise that we're actually storing in AWS associated with each of these",
    "start": "2023940",
    "end": "2030929"
  },
  {
    "text": "resolution levels so when we designed our downsample we wanted it to wanted it",
    "start": "2030929",
    "end": "2038940"
  },
  {
    "text": "to be in service computing because downsample really only has happens like one percent of the time the users the",
    "start": "2038940",
    "end": "2045479"
  },
  {
    "text": "researchers are uploading their data then they want it down sampled and then they're using their data and actually working with it so it's not something",
    "start": "2045479",
    "end": "2051929"
  },
  {
    "text": "that happens a lot we don't want to have hardware around for it but it does need to scale up very dramatically so with a",
    "start": "2051929",
    "end": "2059940"
  },
  {
    "text": "two petabyte data set we would actually do 37 million writes to s3 and DynamoDB",
    "start": "2059940",
    "end": "2065809"
  },
  {
    "text": "120 hundred and forty-eight million reads to both of those as well so and we",
    "start": "2065809",
    "end": "2072179"
  },
  {
    "text": "also want to set up so users can kick this off at any hour of the day just like with ingest so what we found with",
    "start": "2072179",
    "end": "2077760"
  },
  {
    "text": "benefits with doing service is that we don't need to have servers running all the time it'll just automatically kick",
    "start": "2077760",
    "end": "2084628"
  },
  {
    "text": "off we can actually massively scale up without the administrators giving the",
    "start": "2084629",
    "end": "2089730"
  },
  {
    "text": "loop in the loop and it's highly available automatically that's given to us by using using these features okay so",
    "start": "2089730",
    "end": "2099480"
  },
  {
    "text": "here is our down sampling solution we have we were basically taking four",
    "start": "2099480",
    "end": "2104819"
  },
  {
    "text": "cuboids down sampling them to one so in our first first down at the bottom you can actually see the AWS step function",
    "start": "2104819",
    "end": "2111359"
  },
  {
    "text": "and we have two Q's SQ sqs down sample set and a lambda dl cube dead letter Q",
    "start": "2111359",
    "end": "2119400"
  },
  {
    "text": "so that in the beginning the populate activity actually in parallel populates all of the down samples that have to",
    "start": "2119400",
    "end": "2126539"
  },
  {
    "text": "actually occur into that SQ s4 down sample sets and then when it actually",
    "start": "2126539",
    "end": "2132420"
  },
  {
    "text": "gets them all in the lambda checker activity then fires off a whole bunch of lambdas in parallel and all it's doing",
    "start": "2132420",
    "end": "2138450"
  },
  {
    "text": "is firing off lambdas and telling them to go do work the one thing it does do is it's got a little smarts in there to",
    "start": "2138450",
    "end": "2144480"
  },
  {
    "text": "say our land is throttling and if so they pause for a second let check to make sure lambdas stop throttling and",
    "start": "2144480",
    "end": "2150569"
  },
  {
    "text": "then continue on and at this point those lambdas then go grab net grab a message",
    "start": "2150569",
    "end": "2155730"
  },
  {
    "text": "other than the down sample queue and then they actually go in and grab those",
    "start": "2155730",
    "end": "2161700"
  },
  {
    "text": "four cuboids that they need to work with in birth them into the cuboid for the next resolution level and write them out to",
    "start": "2161700",
    "end": "2167470"
  },
  {
    "text": "the cuboid index and cuboid bucket so the way we actually check that everything is working okay is we use",
    "start": "2167470",
    "end": "2174040"
  },
  {
    "text": "that dead letter Q so if a down if a lambda actually fails it will go into",
    "start": "2174040",
    "end": "2179740"
  },
  {
    "text": "that dead letter Q and we'll know that work didn't get done in the end the lambda checker goes back and looks at",
    "start": "2179740",
    "end": "2186700"
  },
  {
    "text": "the dead letter Q makes sure there's nothing in there and then it also makes sure there's no more work to be done in the down sample set and then we know",
    "start": "2186700",
    "end": "2192760"
  },
  {
    "text": "that the work is all complete so this is a way of taking many millions of operations that need to get run and",
    "start": "2192760",
    "end": "2199300"
  },
  {
    "text": "ensuring that they all get finished in the system so if I were to actually do",
    "start": "2199300",
    "end": "2206230"
  },
  {
    "text": "this again I would actually AWS has improve things and they've actually created now so there's an event source",
    "start": "2206230",
    "end": "2213070"
  },
  {
    "text": "so you can actually tie your down sample set Q so whenever a message goes in",
    "start": "2213070",
    "end": "2219130"
  },
  {
    "text": "there will automatically fire a lambda for you so rather than me having my my lambda checkered activity firing off all",
    "start": "2219130",
    "end": "2226000"
  },
  {
    "text": "these lambdas it can happen automatically by using this event source and setting it up that way and the other",
    "start": "2226000",
    "end": "2231340"
  },
  {
    "text": "cool thing about doing it this way is we can actually say I don't want more than a hundred Lambs to actually fire at once",
    "start": "2231340",
    "end": "2236590"
  },
  {
    "text": "so you can limit the number of lambdas that you want to fire in one time and you can keep it from throttling that way",
    "start": "2236590",
    "end": "2244230"
  },
  {
    "text": "okay for my last example I want to talk about hashey corpse vault in console servers",
    "start": "2244350",
    "end": "2250540"
  },
  {
    "text": "these manage our secrets in the system so when our end point needs to talk to our RDS database we don't want to put",
    "start": "2250540",
    "end": "2257530"
  },
  {
    "text": "those passwords in code we ends up sticking them in the vault into into vault and then vault will we'll pass",
    "start": "2257530",
    "end": "2264580"
  },
  {
    "text": "them out to the endpoint and anybody else who actually needs them so the",
    "start": "2264580",
    "end": "2269860"
  },
  {
    "text": "thing that's kind of tricky about vault main console is they we can't just stick",
    "start": "2269860",
    "end": "2275170"
  },
  {
    "text": "them in an auto scale group they need to be running so console is a distributed database that's used by vault on the",
    "start": "2275170",
    "end": "2280330"
  },
  {
    "text": "back end and it's an in-memory database so we need to have multiple consoles up",
    "start": "2280330",
    "end": "2286750"
  },
  {
    "text": "and we can't have them all get shut down or we lose our data so what we ended up doing was devising a solution which I'll",
    "start": "2286750",
    "end": "2293020"
  },
  {
    "text": "show you in just a sec but I also want to mention vault server it has an issue too when it first comes",
    "start": "2293020",
    "end": "2299320"
  },
  {
    "text": "up it actually needs to get fed the keys to unseal and actually be able to get to the data in console so there's two sort",
    "start": "2299320",
    "end": "2305830"
  },
  {
    "text": "of places where the administrators have to get involved in the system so this is",
    "start": "2305830",
    "end": "2311050"
  },
  {
    "text": "our solution for for managing that we actually in cloud watch we've created events that have that firelamb does",
    "start": "2311050",
    "end": "2317680"
  },
  {
    "text": "every five minutes and it then goes and actually checks does the health check of",
    "start": "2317680",
    "end": "2322750"
  },
  {
    "text": "every server all three of our vault servers and our console service and if there's an issue with any of them it",
    "start": "2322750",
    "end": "2328330"
  },
  {
    "text": "actually notifies us through SNS and then the other thing it does is actually hits route 53 and it changes the weight",
    "start": "2328330",
    "end": "2334810"
  },
  {
    "text": "of DNS to be zero so when it's set that way when we have multiple servers with",
    "start": "2334810",
    "end": "2340270"
  },
  {
    "text": "the same same name it will if the weight is zero it won't supply those DNS names",
    "start": "2340270",
    "end": "2346360"
  },
  {
    "text": "when somebody requests a vault or console service so it's a way of making the rest of the system not use this one",
    "start": "2346360",
    "end": "2352570"
  },
  {
    "text": "piece that's not functioning at the moment so we found that was a way to keep our servers up and running and not",
    "start": "2352570",
    "end": "2359920"
  },
  {
    "text": "run into a problem of possibly losing all our data so in the end I actually",
    "start": "2359920",
    "end": "2365830"
  },
  {
    "text": "want to have a couple takeaways for you all here and that is that it's very",
    "start": "2365830",
    "end": "2371650"
  },
  {
    "text": "easily to actually coordinate and distribute these components and server lists and Mike can create actual micro",
    "start": "2371650",
    "end": "2377170"
  },
  {
    "text": "services you don't wait resources by actually having servers that are running all the time it's highly available and",
    "start": "2377170",
    "end": "2384510"
  },
  {
    "text": "you don't have to have extra resources to have that happen it's given to you automatically and it scales massively on",
    "start": "2384510",
    "end": "2392080"
  },
  {
    "text": "demand as you saw with our downsample where you can just scale up to massive amounts based on the number of lambdas",
    "start": "2392080",
    "end": "2397930"
  },
  {
    "text": "we actually have and then finally it's very easy to actually diagnose and debug",
    "start": "2397930",
    "end": "2403420"
  },
  {
    "text": "problems using these systems so you can sort of build them in kind of like what we did to manage our servers in the",
    "start": "2403420",
    "end": "2409000"
  },
  {
    "text": "Hashi Corp but one other thing I guess I wanted to talk about I'm gonna back up one more on a c-corp so if I were to do",
    "start": "2409000",
    "end": "2415960"
  },
  {
    "text": "this now hashey Corp actually has a new version that will use dynamodb on the backend to manage servers so we're",
    "start": "2415960",
    "end": "2422410"
  },
  {
    "text": "actually in the process of moving over to that and finally I want to mention AWS secrets manager is another thing",
    "start": "2422410",
    "end": "2427900"
  },
  {
    "text": "that just-just was created last year to actually do this same thing in Amazon",
    "start": "2427900",
    "end": "2434119"
  },
  {
    "text": "alright I'm here I just wanted to acknowledge some of the people who worked on our system and give them a shout out and then finally we have the",
    "start": "2434390",
    "end": "2442650"
  },
  {
    "text": "links to our open source projects Heaviside and boss DB and we wanted to",
    "start": "2442650",
    "end": "2449849"
  },
  {
    "text": "say thank you and please fill out the survey any any questions sure",
    "start": "2449849",
    "end": "2458809"
  }
]