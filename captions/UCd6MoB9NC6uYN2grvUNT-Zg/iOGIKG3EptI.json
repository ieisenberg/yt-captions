[
  {
    "start": "0",
    "end": "17000"
  },
  {
    "text": "hello thank you for coming today this morning is my pleasure to introduce you",
    "start": "79",
    "end": "5730"
  },
  {
    "text": "to the AWS SDK for go my name is Michael dally and I'm a software development",
    "start": "5730",
    "end": "11580"
  },
  {
    "text": "engineer and Amazon Web Services where I work on the SDKs and tools team we're",
    "start": "11580",
    "end": "18359"
  },
  {
    "start": "17000",
    "end": "17000"
  },
  {
    "text": "pretty excited about the innovative applications and services and tools that developers are using building and with",
    "start": "18359",
    "end": "24779"
  },
  {
    "text": "the go programming language it's simple syntax strong typing concurrency primitives libraries these things they",
    "start": "24779",
    "end": "31410"
  },
  {
    "text": "allow us to focus on the problem we're trying to solve instead of having to focus on the code since its launch the",
    "start": "31410",
    "end": "38610"
  },
  {
    "text": "go programming language has had an enormous growth trajectory and we've heard from more and more customers that",
    "start": "38610",
    "end": "44579"
  },
  {
    "text": "you wanted an official AWS SDK for go I'm happy to say that we listened to that feedback and we've since shipped an",
    "start": "44579",
    "end": "51930"
  },
  {
    "text": "SDK to support the growing go community and our growing number of go customers",
    "start": "51930",
    "end": "58789"
  },
  {
    "text": "so we aren't quite done yet putting the finishing touches on the SDK but we've come a really long way",
    "start": "58789",
    "end": "64350"
  },
  {
    "text": "so the SDK started out as the AWS go project owned by stripe and it was",
    "start": "64350",
    "end": "70619"
  },
  {
    "text": "coated in a way that's similar to our other SDKs it was model driven it was easy to update and have pretty",
    "start": "70619",
    "end": "76020"
  },
  {
    "text": "consistent interface so along with stripe we decided that the best thing to do for the go community going forward",
    "start": "76020",
    "end": "81900"
  },
  {
    "text": "was to have a single canonical officially supported SDK for go so AWS",
    "start": "81900",
    "end": "89009"
  },
  {
    "text": "took over the project in January of 2015 and in June of 2015 after iterating on",
    "start": "89009",
    "end": "95549"
  },
  {
    "text": "the project adding new features and support for new services we launched a Developer Preview now since then we've",
    "start": "95549",
    "end": "101909"
  },
  {
    "text": "been incorporating customer feedback and adding new features and we really appreciate that feedback because it's",
    "start": "101909",
    "end": "107670"
  },
  {
    "text": "the thing that helps make all of our other SDKs great and it's going to be what we use to help make the go SDK great so please keep that coming so now",
    "start": "107670",
    "end": "117149"
  },
  {
    "text": "I'll show you some links and resources that you can use when you're getting up and running with the SDK and keep in",
    "start": "117149",
    "end": "123090"
  },
  {
    "text": "mind that these slides will be posted after the conference so you'll be able to download this and click through from there",
    "start": "123090",
    "end": "128119"
  },
  {
    "text": "so first up no big surprise the is open-source and it's available on",
    "start": "128119",
    "end": "133310"
  },
  {
    "text": "github we use the issue tracker for things like feature requests and bugs and we're always delighted when we",
    "start": "133310",
    "end": "139100"
  },
  {
    "text": "receive a pull request from the community also available on github is",
    "start": "139100",
    "end": "144830"
  },
  {
    "text": "the getting started guide and this is gonna be your go-to resource when you're getting up and running shows you how to",
    "start": "144830",
    "end": "150890"
  },
  {
    "text": "configure client credentials configuration settings and the basics of how to make a request and the last",
    "start": "150890",
    "end": "159470"
  },
  {
    "text": "resource I'll show you is the API documentation so we host comprehensive API documentation for every one of our",
    "start": "159470",
    "end": "166970"
  },
  {
    "text": "services that we support and it includes the inputs and outputs of that service and all the operations and my favorite",
    "start": "166970",
    "end": "173750"
  },
  {
    "text": "thing about the API documentation is that for each operation there's a little snippet of code that shows you how to",
    "start": "173750",
    "end": "180620"
  },
  {
    "text": "format that that operation the input and then also what the output formats gonna look like so it allows you at a glance",
    "start": "180620",
    "end": "186890"
  },
  {
    "text": "to kind of get an idea of what the structure is of even some of our more complex shapes okay so in the remainder",
    "start": "186890",
    "end": "196910"
  },
  {
    "text": "of this session we'll talk about how to get up and running with the SDK how to build a simple go application with the",
    "start": "196910",
    "end": "203630"
  },
  {
    "text": "SDK and at a higher level we'll talk about how to deploy that application and",
    "start": "203630",
    "end": "208700"
  },
  {
    "text": "scale it with AWS elastic beam stop but the first thing we're gonna talk about is getting up and running we'll talk",
    "start": "208700",
    "end": "215450"
  },
  {
    "text": "about downloading SDK configuring it at giving it credentials and then making a request so just like other go libraries",
    "start": "215450",
    "end": "224720"
  },
  {
    "text": "in order to get the SDK you can use go get and passing in the SDKs import path",
    "start": "224720",
    "end": "230510"
  },
  {
    "text": "and those three dots those tell the go git command to also download the dependencies of the SDK also I should",
    "start": "230510",
    "end": "238250"
  },
  {
    "text": "mention that we used tag releases and this allows you to track specific SDK",
    "start": "238250",
    "end": "243830"
  },
  {
    "text": "versions and pin them to your local copy now since we're still in Developer Preview",
    "start": "243830",
    "end": "249050"
  },
  {
    "text": "we recommend that you vendor the SDK into your application until you're able to pull in that update and test it out",
    "start": "249050",
    "end": "255620"
  },
  {
    "text": "yourself so the SDK is composed of two",
    "start": "255620",
    "end": "261140"
  },
  {
    "start": "258000",
    "end": "258000"
  },
  {
    "text": "main sections under the root import path there's AWS and service so the AWS package it's a",
    "start": "261140",
    "end": "269570"
  },
  {
    "text": "collection of configuration and helper and utility tools that make using the",
    "start": "269570",
    "end": "275000"
  },
  {
    "text": "SDK easier so the configuration structure we'll talk about in this talk there's those are in the AWS package and",
    "start": "275000",
    "end": "282280"
  },
  {
    "text": "next we have the service folder which contains a number of client packages for each one of the clients that we support",
    "start": "282280",
    "end": "288950"
  },
  {
    "text": "in the AWS SDK for go and you'll use these clients to make all of your API",
    "start": "288950",
    "end": "293990"
  },
  {
    "text": "requests to our services and in this example here we're importing s3 but you",
    "start": "293990",
    "end": "299960"
  },
  {
    "text": "could substitute this with things like dynamo DB or whatever client you're using and within the clients package",
    "start": "299960",
    "end": "305330"
  },
  {
    "text": "you'll find all of the input and outputs trucks associated with the operations of that client now that we know how to get",
    "start": "305330",
    "end": "315320"
  },
  {
    "start": "312000",
    "end": "312000"
  },
  {
    "text": "the SDK let's actually talk about how we can configure the SDK before we start making API calls",
    "start": "315320",
    "end": "320870"
  },
  {
    "text": "so the SDK requires two pieces of information before you can start using a client requires a region and credentials",
    "start": "320870",
    "end": "327950"
  },
  {
    "text": "a region is the geographic region that you're going to send your request to and credentials are used to securely",
    "start": "327950",
    "end": "334280"
  },
  {
    "text": "authenticate your requests with our services and the SDK has a default",
    "start": "334280",
    "end": "339650"
  },
  {
    "text": "configuration struct that gets merged into the config struct that you provide to a client and what this means to you",
    "start": "339650",
    "end": "345440"
  },
  {
    "text": "is that you don't have to provide every single option when you're configuring a client just the ones that diverged from the defaults in the SDK it also supports",
    "start": "345440",
    "end": "353420"
  },
  {
    "text": "multiple unique service clients that each take their own copy of configuration and this configuration is",
    "start": "353420",
    "end": "360440"
  },
  {
    "text": "copied by value which means that you can use these safely concurrently so let's",
    "start": "360440",
    "end": "369890"
  },
  {
    "start": "368000",
    "end": "368000"
  },
  {
    "text": "take a look at how the SDK can be configured with your credentials this DK has a few different ways for you to",
    "start": "369890",
    "end": "375350"
  },
  {
    "text": "provide credentials but the most important thing to keep in mind here is that you should never hard code your credentials in source code and that's",
    "start": "375350",
    "end": "382220"
  },
  {
    "text": "just because it's just too easy to accidentally leak those credentials so let's say you accidentally push your",
    "start": "382220",
    "end": "387800"
  },
  {
    "text": "credentials to github suddenly your credentials are the eyes of people that they shouldn't know what your keys are",
    "start": "387800",
    "end": "392810"
  },
  {
    "text": "right so now not only do you need to rotate your credentials you also have to recompile your application and redeploy",
    "start": "392810",
    "end": "397910"
  },
  {
    "text": "it so we can avoid that problem all together by never hard-coding credentials and in fact the static",
    "start": "397910",
    "end": "404250"
  },
  {
    "text": "credential provider in the SDK shouldn't really be used unless you're taking credentials from an external source and",
    "start": "404250",
    "end": "411030"
  },
  {
    "text": "using those at runtime otherwise there's several better options that you can use to get credentials into the SDK and",
    "start": "411030",
    "end": "419040"
  },
  {
    "text": "we'll cover those now so first if you don't supply credentials to a client",
    "start": "419040",
    "end": "425040"
  },
  {
    "text": "we'll use what's called a default credential provider and this credential credential provider is just a series of",
    "start": "425040",
    "end": "430380"
  },
  {
    "text": "credential providers which are basically things that try to get credentials from a specific source so we have a",
    "start": "430380",
    "end": "436860"
  },
  {
    "text": "pre-configured series of these that try one after the other to resolve credentials and a known location and in a known order so first",
    "start": "436860",
    "end": "444780"
  },
  {
    "text": "off if you don't provide credentials the default credential provider will look at environment variables it'll say is the",
    "start": "444780",
    "end": "451680"
  },
  {
    "text": "AWS access key ID and secret key environment variable defined if it is it'll use those short-circuit the rest",
    "start": "451680",
    "end": "459000"
  },
  {
    "text": "of the the chain and those are your credentials now if you can't find environment variable credentials",
    "start": "459000",
    "end": "465120"
  },
  {
    "text": "the next place we'll look is the shared credentials file and this is basically an ini file that lives in your home",
    "start": "465120",
    "end": "471630"
  },
  {
    "text": "directory and it has a number of name profiles that you can use when",
    "start": "471630",
    "end": "477000"
  },
  {
    "text": "configuring the SDK so if you have a shared credentials file and it has a default profile then the SDK will use",
    "start": "477000",
    "end": "484919"
  },
  {
    "text": "that and stop looking for more credentials and finally if the SDK still can't find credentials at this point we",
    "start": "484919",
    "end": "491820"
  },
  {
    "text": "will contact the ec2 instance profile credential server and ask it if it has credentials and what this basically is",
    "start": "491820",
    "end": "499020"
  },
  {
    "text": "is you deploy I am roles to your instances and give those instances",
    "start": "499020",
    "end": "504660"
  },
  {
    "text": "specific capabilities that they can do and which resources they have access to so in fact this is the preferred method",
    "start": "504660",
    "end": "511770"
  },
  {
    "text": "of deploying credentials to your applications if you're running on ec2 so",
    "start": "511770",
    "end": "519930"
  },
  {
    "text": "I mentioned a shared credentials file this is an ini file that lives in your home directory and it is used by all of",
    "start": "519930",
    "end": "526560"
  },
  {
    "text": "the ATF's SDKs and tools including the CLI so if you use this file you're going to get some really good",
    "start": "526560",
    "end": "531820"
  },
  {
    "text": "we use between all of our tools and this file it also has the added benefit of multiple named profiles which are",
    "start": "531820",
    "end": "538690"
  },
  {
    "text": "basically you give a name to a section of the ini file and that can be associated with that name at runtime",
    "start": "538690",
    "end": "544660"
  },
  {
    "text": "when you use it so you can have like a dev and a production profile for example and if you specify the AWS underscore",
    "start": "544660",
    "end": "553210"
  },
  {
    "text": "profile environment variable the SDK will look for that profile when loading the share credentials file here's an",
    "start": "553210",
    "end": "559810"
  },
  {
    "text": "example of one it's pretty simple it's just a 9i file with each section representing a profile you can see we've",
    "start": "559810",
    "end": "565810"
  },
  {
    "text": "got defaults and prod in each one of these sections requires two keys the",
    "start": "565810",
    "end": "571150"
  },
  {
    "text": "access key ID a Tobias access key ID and AWS secret access key alright now that",
    "start": "571150",
    "end": "579970"
  },
  {
    "start": "578000",
    "end": "578000"
  },
  {
    "text": "we know how to configure the SDK let's take a look at how we can actually create a service client and send an API",
    "start": "579970",
    "end": "586000"
  },
  {
    "text": "request to a service so in this example we are going to create an Amazon s3",
    "start": "586000",
    "end": "592450"
  },
  {
    "text": "service client and upload a file to a bucket using a put object operation",
    "start": "592450",
    "end": "598050"
  },
  {
    "text": "first at the top you can see we're importing the AWS package and the s3",
    "start": "598050",
    "end": "603850"
  },
  {
    "text": "service client and in the main function we are calling new on s3 to create our",
    "start": "603850",
    "end": "610660"
  },
  {
    "text": "client and notice that we didn't have to pass in any configuration settings that's actually because we're relying on the default credential provider to",
    "start": "610660",
    "end": "616960"
  },
  {
    "text": "resolve our credentials and I said that we required a region but here we specified that through an environment",
    "start": "616960",
    "end": "623830"
  },
  {
    "text": "variable AWS underscore region so config is not required if you have all of your",
    "start": "623830",
    "end": "629920"
  },
  {
    "text": "configuration setup through these things so after you've created the client you",
    "start": "629920",
    "end": "635500"
  },
  {
    "text": "think all the put object method on the client and each API operation associated",
    "start": "635500",
    "end": "640990"
  },
  {
    "text": "with a service has a corresponding method on a client of the same name and those clients have a similarly named",
    "start": "640990",
    "end": "648010"
  },
  {
    "text": "struc associated with them for the input struct and for their outputs truck so put object input is associated with put",
    "start": "648010",
    "end": "654070"
  },
  {
    "text": "object when this calls and it successfully returns a value you'll get a put object output struct and here",
    "start": "654070",
    "end": "661960"
  },
  {
    "text": "we're passing in some of the values that are required for put object input this is the thing that uploads a file",
    "start": "661960",
    "end": "667180"
  },
  {
    "text": "dest 3 and we're providing a bucket which is my bucket a key and a body now",
    "start": "667180",
    "end": "672340"
  },
  {
    "text": "the body is an i/o reader so that's good because you don't have to load all the data in memory upfront you can just stream it and notice that we are using",
    "start": "672340",
    "end": "679960"
  },
  {
    "text": "AWS string here this is because throughout all of our services we have a",
    "start": "679960",
    "end": "685630"
  },
  {
    "text": "concept of an empty value means we need to be able to actually serialize an empty value send that over a wire and we",
    "start": "685630",
    "end": "692590"
  },
  {
    "text": "need to be able to disambiguate between not being specified at all by a user so in order to do that we're utilizing",
    "start": "692590",
    "end": "698230"
  },
  {
    "text": "pointers which can point at nil values and you know that you can't take the",
    "start": "698230",
    "end": "703330"
  },
  {
    "text": "reference to a string literal without assigning it first to a variable so aw string just kind of wraps all it up for",
    "start": "703330",
    "end": "708820"
  },
  {
    "text": "you nice and succinctly auto define the variable and return a reference to it so it just makes it a little bit neater to",
    "start": "708820",
    "end": "714040"
  },
  {
    "text": "use now after you've sent this operation you're sending your HTTP requests the",
    "start": "714040",
    "end": "721000"
  },
  {
    "text": "SDK does a lot more for you than just that if an error occurs that can be retried the SDK will retry that using",
    "start": "721000",
    "end": "727120"
  },
  {
    "text": "exponential back-off and there's a handler system that you can hook into at different life cycle steps of sending a",
    "start": "727120",
    "end": "733810"
  },
  {
    "text": "request to modify the behavior of the SDK at runtime so there's a whole lot of really cool things that you can do with",
    "start": "733810",
    "end": "739030"
  },
  {
    "text": "the SDK all right so now that we have an",
    "start": "739030",
    "end": "747250"
  },
  {
    "text": "idea about a get the SDK how to use the SDK and how to send a request let's",
    "start": "747250",
    "end": "752620"
  },
  {
    "text": "actually build an application with it so the application we're gonna bill is a",
    "start": "752620",
    "end": "758860"
  },
  {
    "text": "word frequency application and it basically counts the top 10 most mentioned words in a file it's a",
    "start": "758860",
    "end": "765490"
  },
  {
    "text": "business critical application here so we'll take a file we'll upload it to an s3 bucket and we'll process that file by",
    "start": "765490",
    "end": "772090"
  },
  {
    "text": "counting the words in it and once we've counted those words will persist them into the dynamodb for long term storage",
    "start": "772090",
    "end": "777820"
  },
  {
    "text": "and send the resulting information of that result to a downstream sqs queue and the goals of this application are we",
    "start": "777820",
    "end": "786010"
  },
  {
    "text": "want to build something that takes advantage of gos concurrency primitives and shows off how to use that with the SDK we want to build something that's",
    "start": "786010",
    "end": "792850"
  },
  {
    "text": "durable so if a job fails while processing we want to have to be automatically retried without losing",
    "start": "792850",
    "end": "798950"
  },
  {
    "text": "information and we want to build something that's scalable we want to be able to keep throwing nodes at this and sustain heavier traffic and also",
    "start": "798950",
    "end": "807410"
  },
  {
    "text": "mentioning that this is on github at this URL so you can download this and",
    "start": "807410",
    "end": "813410"
  },
  {
    "text": "look at the nitty-gritty details that kind of won't be mentioned in this talk",
    "start": "813410",
    "end": "818470"
  },
  {
    "text": "so here's a high-level overview of the architecture so first we take a file on the top left and we upload it to an",
    "start": "818470",
    "end": "824990"
  },
  {
    "text": "Amazon s3 bucket and then you can configure your s3 bucket to notify an",
    "start": "824990",
    "end": "830570"
  },
  {
    "text": "sqs queue when a file is delivered to it so we've set that up here and it's pushing a message to an sqs queue then",
    "start": "830570",
    "end": "837110"
  },
  {
    "text": "we have a word frequency service that is running and it's it's pulling off of",
    "start": "837110",
    "end": "842450"
  },
  {
    "text": "that queue and then once it sees a message it performs the actual work of streaming the data from s3 and counting",
    "start": "842450",
    "end": "848840"
  },
  {
    "text": "the words and then persisting the data to dynamodb and sending a downstream message to an sqs queue and what that",
    "start": "848840",
    "end": "855530"
  },
  {
    "text": "sqs queue in the end allows is you can hook into that and react to when a files",
    "start": "855530",
    "end": "861380"
  },
  {
    "text": "been processed so for example you might want to delete the file from s3 because",
    "start": "861380",
    "end": "866780"
  },
  {
    "text": "it's no longer needed or in our demo that we're about to show we're actually going to use that to pull the sqs queue",
    "start": "866780",
    "end": "873440"
  },
  {
    "text": "to know when our results are ready so that we can show them from the CLI alright so let's take a look at the",
    "start": "873440",
    "end": "880880"
  },
  {
    "text": "client aspect of this application and look at actually utilizing the client",
    "start": "880880",
    "end": "888550"
  },
  {
    "text": "alright so here I have just to show that I've exported my region a diverse region",
    "start": "889420",
    "end": "896660"
  },
  {
    "text": "and I've got my access key ID and secret access keys exported and we're gonna run this command from our example project",
    "start": "896660",
    "end": "903350"
  },
  {
    "text": "here it's upload s3 may not go executable and we will pass in the name",
    "start": "903350",
    "end": "909500"
  },
  {
    "text": "of the bucket and the path of the file we're gonna upload so right now we're uploading the file to s 3 S 3 is getting",
    "start": "909500",
    "end": "915140"
  },
  {
    "text": "the file sending a message to s us aiesec us is being pulled we're counting the words and then persisting it and",
    "start": "915140",
    "end": "920510"
  },
  {
    "text": "there's our results so we just did all that and our word frequency service",
    "start": "920510",
    "end": "925630"
  },
  {
    "text": "persisted the data we pulled the sq sq and the top-10 most frequently mentioned",
    "start": "925630",
    "end": "931070"
  },
  {
    "text": "words in that file are listed here and there are a bunch of Latin words I'm not gonna try to pronounce but this just shows that it",
    "start": "931070",
    "end": "937470"
  },
  {
    "text": "works and let's actually take a look at the code of this to see how it's done so",
    "start": "937470",
    "end": "945060"
  },
  {
    "text": "from our sample application this is the main go file and this is actual code of",
    "start": "945060",
    "end": "951390"
  },
  {
    "text": "what we just saw so first we do a bunch of imports specifically mentioning here the AWS package the s3 manager which is",
    "start": "951390",
    "end": "958980"
  },
  {
    "text": "a really cool abstraction we'll talk about in just a second and the sqs service client so in the main function",
    "start": "958980",
    "end": "966150"
  },
  {
    "text": "we're gonna take the command-line arguments pretty standard stuff validate them and we're gonna open a file and",
    "start": "966150",
    "end": "973380"
  },
  {
    "text": "we're going to use that as our body to upload and we're just going to stream this because it's an i/o reader now here",
    "start": "973380",
    "end": "980400"
  },
  {
    "text": "we're creating a new uploader and this is an s3 upload manager that is similar",
    "start": "980400",
    "end": "986220"
  },
  {
    "text": "to one of our s 3 clients again we don't have to provide configuration because it uses the same process of resolving your",
    "start": "986220",
    "end": "992430"
  },
  {
    "text": "configuration data and the reason we're using this is because we're not sure how",
    "start": "992430",
    "end": "998400"
  },
  {
    "text": "big these files are going to be what if someone wants to upload a file that's 20",
    "start": "998400",
    "end": "1003470"
  },
  {
    "text": "K that's pretty easy we can just use a put object operation but for an object that's 200 gigabytes 200 terabytes we",
    "start": "1003470",
    "end": "1011900"
  },
  {
    "text": "want something better and luckily s3 offers a really nice feature called multi-part uploads and then allows you",
    "start": "1011900",
    "end": "1017990"
  },
  {
    "text": "to break a file into pieces and send those uploaded it concurrently and then once you're done you say hey s3 I'm done",
    "start": "1017990",
    "end": "1024650"
  },
  {
    "text": "can you put these back together for me and make them a single thing again and then allows you to really quickly and",
    "start": "1024650",
    "end": "1029860"
  },
  {
    "text": "easily upload a large file and you can recover from errors by only having to upload any parts that may have failed",
    "start": "1029860",
    "end": "1036199"
  },
  {
    "text": "not the entire thing so the upload manager here it tracks all that away for",
    "start": "1036200",
    "end": "1041930"
  },
  {
    "text": "you it looks and acts like a put object but it'll it'll pivot on whether or not to use a multi-part or a single put",
    "start": "1041930",
    "end": "1048830"
  },
  {
    "text": "object operation based on the size of the input so it's a really nice abstraction and I would encourage you to use it if you're not sure in the total",
    "start": "1048830",
    "end": "1055670"
  },
  {
    "text": "size of your files so we're calling the upload method and it's got a similar",
    "start": "1055670",
    "end": "1060770"
  },
  {
    "text": "structure upload input bucket key body so if an error occurs",
    "start": "1060770",
    "end": "1066870"
  },
  {
    "text": "we'll exit out otherwise we will wait for a result on the downstream sq sq",
    "start": "1066870",
    "end": "1072930"
  },
  {
    "text": "that we saw in our diagram so let's take a look at how that works so from the command line where we're sitting here",
    "start": "1072930",
    "end": "1079050"
  },
  {
    "text": "we're waiting for the results we can report it to the user and in order to do that we're kicking off a loop and we're calling receive",
    "start": "1079050",
    "end": "1086010"
  },
  {
    "text": "message on SQS and receive messages how you ask a queue do you have any messages",
    "start": "1086010",
    "end": "1091290"
  },
  {
    "text": "and just like put object we are putting in a receive message input giving that",
    "start": "1091290",
    "end": "1098370"
  },
  {
    "text": "URL the queue it we want to receive messages from a visibility timeout and a wait time in seconds a visibility",
    "start": "1098370",
    "end": "1105600"
  },
  {
    "text": "timeout allows you to tell SQS hey I'm gonna try to do this work if I can't finish it before the amount of time that",
    "start": "1105600",
    "end": "1112380"
  },
  {
    "text": "I given you in visibility timeout considered a failure and push it back into my queue so something else can",
    "start": "1112380",
    "end": "1117570"
  },
  {
    "text": "retry it so that's used for recovering from errors and things like that and wait time in seconds tells SQS that if",
    "start": "1117570",
    "end": "1125790"
  },
  {
    "text": "you don't have any messages for me right away lead the socket open for this number of seconds and let's just see if",
    "start": "1125790",
    "end": "1131970"
  },
  {
    "text": "a message arrives and this just makes it utilize the less resources on your end and makes things work for polling and",
    "start": "1131970",
    "end": "1138840"
  },
  {
    "text": "things like this so that's long polling with SQS and once we've received a",
    "start": "1138840",
    "end": "1144330"
  },
  {
    "text": "message we iterate over that because the received message output struct has a",
    "start": "1144330",
    "end": "1150240"
  },
  {
    "text": "messages field that is a list of messages and we're gonna parse those out and build up a job result struct and",
    "start": "1150240",
    "end": "1157410"
  },
  {
    "text": "we'll unmarshal that json data into a job result and then we'll check is this the actual message that we sent is this",
    "start": "1157410",
    "end": "1164730"
  },
  {
    "text": "the same bucket in the same key that we're looking for because you need to do this because if someone else is also",
    "start": "1164730",
    "end": "1170280"
  },
  {
    "text": "doing the exact same thing and they're trying to pull on their message you want to make sure you're not interfering with them so we look for our message when we",
    "start": "1170280",
    "end": "1177570"
  },
  {
    "text": "find it we print out the result and then we're gonna delete the message from sqs because it's no longer needed for our",
    "start": "1177570",
    "end": "1183030"
  },
  {
    "text": "case so that is the the whole process of",
    "start": "1183030",
    "end": "1188160"
  },
  {
    "text": "the client side of this application it's just uploading a file to s3 we're pulling the sq sq and now let's take a",
    "start": "1188160",
    "end": "1196140"
  },
  {
    "text": "look that's the next part of our application so our file is now being uploaded and we",
    "start": "1196140",
    "end": "1204100"
  },
  {
    "text": "have put the file into s/3 s/3 then sent a message to the sqs queue which we can",
    "start": "1204100",
    "end": "1209260"
  },
  {
    "text": "now start polling and we'll talk about the word frequency service that we will deploy to Amazon Elastic Beanstalk so",
    "start": "1209260",
    "end": "1218260"
  },
  {
    "start": "1213000",
    "end": "1213000"
  },
  {
    "text": "here's our our frequency service it's made up of three main stages there's the job message queue there at the top the",
    "start": "1218260",
    "end": "1225340"
  },
  {
    "text": "worker pool and the result collector and each of these stages are run as separate go routines all at the same time and",
    "start": "1225340",
    "end": "1231970"
  },
  {
    "text": "they communicate with each other through channels so our job message queue it's gonna be",
    "start": "1231970",
    "end": "1238360"
  },
  {
    "text": "the thing that's polling SQS to look for new messages which are files that have been delivered to our bucket and it uses",
    "start": "1238360",
    "end": "1244750"
  },
  {
    "text": "a visibility timeout to recover from error and it will then parse the JSON",
    "start": "1244750",
    "end": "1250420"
  },
  {
    "text": "data out of that message extracting the object key in the bucket and then it will build up a job and send that to the",
    "start": "1250420",
    "end": "1257560"
  },
  {
    "text": "job Channel now our job message queue is",
    "start": "1257560",
    "end": "1267190"
  },
  {
    "text": "then pulled on by the worker pool so it's a pool of workers waiting for jobs",
    "start": "1267190",
    "end": "1272200"
  },
  {
    "text": "to arrive in the job channel when a new jobs available the worker then pulls the job off the channel and streams the data",
    "start": "1272200",
    "end": "1279070"
  },
  {
    "text": "from s3 counting the words in the file and finally when the result is it's",
    "start": "1279070",
    "end": "1284170"
  },
  {
    "text": "complete it sends the result data to the result Channel then our result collector",
    "start": "1284170",
    "end": "1290950"
  },
  {
    "text": "is pulling on that channel and it pulls the results off the channel writing successful results - dynamodb if the",
    "start": "1290950",
    "end": "1297790"
  },
  {
    "text": "status of the job is a failure we're not going to delete the message from the originating sqs queue but rather allow",
    "start": "1297790",
    "end": "1302950"
  },
  {
    "text": "it to be retried and we will always send a message to the downstream sqs queue so",
    "start": "1302950",
    "end": "1309430"
  },
  {
    "text": "let's take a look at each of these individual sections and look at the code on how they're implemented so first up",
    "start": "1309430",
    "end": "1316060"
  },
  {
    "text": "is the job message queue and let's look at the code for that",
    "start": "1316060",
    "end": "1321360"
  },
  {
    "text": "so job message queue is in job message queue go of our example project in",
    "start": "1325480",
    "end": "1331809"
  },
  {
    "text": "importing AWS the sqs service client and here's something interesting sqs I face so all of our clients have",
    "start": "1331809",
    "end": "1339200"
  },
  {
    "text": "interfaces that we define for them which you can code to and this allows you to more easily swap that out for mocking so",
    "start": "1339200",
    "end": "1345950"
  },
  {
    "text": "we encourage you to use that whenever you're integrating with the SDK then we have a job message queue struct which",
    "start": "1345950",
    "end": "1351980"
  },
  {
    "text": "has some fields that we're gonna use like the job Channel we're gonna be writing to reading from and the queue",
    "start": "1351980",
    "end": "1359240"
  },
  {
    "text": "URL that we're gonna read and queue visibility let's take a look at the listen method this is what's running in",
    "start": "1359240",
    "end": "1365419"
  },
  {
    "text": "a go routine and the way this works is we set up a big for loop here or we're just going to read from sqs using the",
    "start": "1365419",
    "end": "1373190"
  },
  {
    "text": "receive message method and let's take a look at that method so receive messages",
    "start": "1373190",
    "end": "1379520"
  },
  {
    "text": "define here we create a result of calling receive messages on SQS somewhat",
    "start": "1379520",
    "end": "1385279"
  },
  {
    "text": "of what we just saw earlier using a visibility timeout and wait time in seconds and if we get our messages",
    "start": "1385279",
    "end": "1391100"
  },
  {
    "text": "successfully we'll return those messages to them up to the wrapping method so in this method once we've got our messages",
    "start": "1391100",
    "end": "1397190"
  },
  {
    "text": "if we did not encounter an error we will then parse each message and build up a",
    "start": "1397190",
    "end": "1403279"
  },
  {
    "text": "job structure and then send that job - the job channel so that our worker pool",
    "start": "1403279",
    "end": "1409070"
  },
  {
    "text": "then can then be made aware of it so that's basically how the job message key",
    "start": "1409070",
    "end": "1414380"
  },
  {
    "text": "works we're just reading off of sqs and populating the job channel so and next",
    "start": "1414380",
    "end": "1421909"
  },
  {
    "text": "up let's take a look at no that didn't do it let's take a look at the worker",
    "start": "1421909",
    "end": "1427340"
  },
  {
    "text": "pool which is the thing that is actually reading from the job channel and doing",
    "start": "1427340",
    "end": "1433610"
  },
  {
    "text": "the work for us so the worker pool code is defined in worker dot go this is also",
    "start": "1433610",
    "end": "1439970"
  },
  {
    "text": "running in a go routine and we are importing s3i face here because we want to be able to mock that out easily",
    "start": "1439970",
    "end": "1446230"
  },
  {
    "text": "worker pool is a struct that has n number of workers and a weight group so",
    "start": "1446230",
    "end": "1451880"
  },
  {
    "text": "here's the way you create a worker pool we're going to first initialize the worker pool with our work",
    "start": "1451880",
    "end": "1457170"
  },
  {
    "text": "and therefore each one of our workers we're gonna add to the weight group and we're gonna then initialize the worker",
    "start": "1457170",
    "end": "1463260"
  },
  {
    "text": "and then kick off the workers run method in a go routine so in number of workers",
    "start": "1463260",
    "end": "1468450"
  },
  {
    "text": "running in a go routine when the workers finished its work or the process exits or the channels closed the workers then",
    "start": "1468450",
    "end": "1474690"
  },
  {
    "text": "going to check back in with a weight group and let it know that it's finished decrementing the weight group count so what that allows you to do is to",
    "start": "1474690",
    "end": "1481350"
  },
  {
    "text": "basically block until all of your workers are check back in so that you don't lose any work and that makes it",
    "start": "1481350",
    "end": "1487650"
  },
  {
    "text": "nice because you can then deploy updates to your application and not lose any of the work that you've been performing so",
    "start": "1487650",
    "end": "1494160"
  },
  {
    "text": "in this go routine in each one of these go routines our workers run method is being run so let's take a look at that",
    "start": "1494160",
    "end": "1501200"
  },
  {
    "text": "the run method of a worker is running",
    "start": "1501200",
    "end": "1506490"
  },
  {
    "text": "concurrently with all the other workers and we're gonna do something similar what we saw earlier with a big for loop",
    "start": "1506490",
    "end": "1512070"
  },
  {
    "text": "that's running and it's reading from the job Channel and when it gets a message it's gonna start building up a results",
    "start": "1512070",
    "end": "1518280"
  },
  {
    "text": "dropped which has our job associated with it then we're gonna process that",
    "start": "1518280",
    "end": "1523560"
  },
  {
    "text": "job and build up our map of string of word to number of occurrences of that",
    "start": "1523560",
    "end": "1529350"
  },
  {
    "text": "word in the file so that's gonna be done in the process job method let's take a look at that method process job calls",
    "start": "1529350",
    "end": "1537330"
  },
  {
    "text": "get object on Amazon s3 passing in get object input and that has a bucket and a",
    "start": "1537330",
    "end": "1543990"
  },
  {
    "text": "key and then we're gonna get the body of that object and that's gonna be in an IO",
    "start": "1543990",
    "end": "1549120"
  },
  {
    "text": "reader again and the way that we're gonna count the top words is we're just gonna stream the data from the IO reader",
    "start": "1549120",
    "end": "1554340"
  },
  {
    "text": "counting the words and only taking the top 10 now hourly I mentioned how we can",
    "start": "1554340",
    "end": "1559620"
  },
  {
    "text": "upload massive files with multi-part upload so what this means is that some of our files could be very small and",
    "start": "1559620",
    "end": "1565740"
  },
  {
    "text": "very quick to to process while others might be really large in a way that you can account for this with a visibility",
    "start": "1565740",
    "end": "1571590"
  },
  {
    "text": "timeout is periodically update that visibility timeout as you're streaming the data so we've implemented that in",
    "start": "1571590",
    "end": "1577440"
  },
  {
    "text": "the count top Wars method and you can check out that code on the example",
    "start": "1577440",
    "end": "1583530"
  },
  {
    "text": "project on github now after we've processed the job and we built up our word map",
    "start": "1583530",
    "end": "1589630"
  },
  {
    "text": "you check to see if there's an error if there is we set the status of the job of failure we log that error if it's",
    "start": "1589630",
    "end": "1595630"
  },
  {
    "text": "successful will associate the words that we got with that job with the result and then send the result to the results",
    "start": "1595630",
    "end": "1601960"
  },
  {
    "text": "channel so that's the worker pool we're reading from the job channel and",
    "start": "1601960",
    "end": "1607710"
  },
  {
    "text": "processing the file and sending the results to the result channel and finally let's look at the result",
    "start": "1607710",
    "end": "1615880"
  },
  {
    "text": "collector and this is the thing that's actually doing something with the data that we've built up so the result",
    "start": "1615880",
    "end": "1625150"
  },
  {
    "text": "collector is define end result collector go and it's fairly simple we are going",
    "start": "1625150",
    "end": "1635530"
  },
  {
    "text": "to run the process job result method and this is similar to what we saw it's a",
    "start": "1635530",
    "end": "1640750"
  },
  {
    "text": "big for loop that's reading from the job the results Channel and we're gonna take that result if it's a if it's a",
    "start": "1640750",
    "end": "1647620"
  },
  {
    "text": "successful result we will then try to persist that result to Amazon DynamoDB",
    "start": "1647620",
    "end": "1653320"
  },
  {
    "text": "and in order to do that we're using something called our result recorder",
    "start": "1653320",
    "end": "1658600"
  },
  {
    "text": "here and we'll talk about that in just a second so if the result recorder fails to",
    "start": "1658600",
    "end": "1663700"
  },
  {
    "text": "record the DynamoDB we will mark the job as a failure and not delete the",
    "start": "1663700",
    "end": "1669430"
  },
  {
    "text": "originating sqs message so again that allows us to recover from failure because sqs will resend that message",
    "start": "1669430",
    "end": "1676030"
  },
  {
    "text": "into our queue if it succeeded to record we persisted the data successfully so we",
    "start": "1676030",
    "end": "1681370"
  },
  {
    "text": "know that we're done with our work we then delete the message from sqs and this prevents that that job for being",
    "start": "1681370",
    "end": "1686980"
  },
  {
    "text": "performed again and finally we then notify our downstream sqs queue which",
    "start": "1686980",
    "end": "1693820"
  },
  {
    "text": "allows things like our CLI to be notified whenever the job is complete so",
    "start": "1693820",
    "end": "1701170"
  },
  {
    "text": "the result collector is defined in result collector go and this is it uses",
    "start": "1701170",
    "end": "1708280"
  },
  {
    "text": "a pretty cool abstraction as well it uses the dynamo DB attribute package and",
    "start": "1708280",
    "end": "1714600"
  },
  {
    "text": "we'll talk about that so here's a result collector record method so first we're",
    "start": "1714600",
    "end": "1719770"
  },
  {
    "text": "going to build up a result record sort the record item variable and this is just a simple struct one that you might",
    "start": "1719770",
    "end": "1725980"
  },
  {
    "text": "encounter in your applications where you have some fields that are you know it's fairly simple it's got a file name and",
    "start": "1725980",
    "end": "1731890"
  },
  {
    "text": "then the map of the string to the the number of occurrences but we need to format this for dynamodb it's structure",
    "start": "1731890",
    "end": "1739180"
  },
  {
    "text": "is slightly different than what you would probably utilize in your strokes it has basically the key is things like",
    "start": "1739180",
    "end": "1744790"
  },
  {
    "text": "S which is a string mapping to a string value and B mapping to a boolean so the",
    "start": "1744790",
    "end": "1750070"
  },
  {
    "text": "typing information is sort of in the struct we actually have a really nice abstraction in the sdk called DynamoDB",
    "start": "1750070",
    "end": "1757300"
  },
  {
    "text": "attribute and that has a number of helper methods that allow you to convert your data into this type of structure so",
    "start": "1757300",
    "end": "1764280"
  },
  {
    "text": "the convert to map method is used here to take our struct and automatically",
    "start": "1764280",
    "end": "1771070"
  },
  {
    "text": "marshal it into this attribute value structure and this utilizes json",
    "start": "1771070",
    "end": "1776740"
  },
  {
    "text": "serialization so you can use struct tagging that you might be familiar with and first of all marshal in the json",
    "start": "1776740",
    "end": "1782740"
  },
  {
    "text": "then unmarshal it to the to the attribute value structure and one of the really nice things i want to point out",
    "start": "1782740",
    "end": "1787990"
  },
  {
    "text": "about this abstraction is that it was completely driven and contributed to us by a member of our community in a pull",
    "start": "1787990",
    "end": "1794830"
  },
  {
    "text": "request so that's really awesome it's contributions like that and interactions with our community that helped to make",
    "start": "1794830",
    "end": "1800710"
  },
  {
    "text": "our SDK really nice and easy to use so that is awesome and if you have any more contributions that you want to recommend",
    "start": "1800710",
    "end": "1806800"
  },
  {
    "text": "feel free to open up a pull request or just an issue and we can talk about it so once we've marshaled the a/v that",
    "start": "1806800",
    "end": "1813520"
  },
  {
    "text": "actually beat values trucks we're then gonna call put item on dynamo DB to persist that data and we're gonna build",
    "start": "1813520",
    "end": "1820900"
  },
  {
    "text": "up a put item input passing the table name that you value that we just marshaled and if it's successfully",
    "start": "1820900",
    "end": "1826660"
  },
  {
    "text": "completed we won't return anything failure will let it know so that's the result recorder we're just persisting",
    "start": "1826660",
    "end": "1832450"
  },
  {
    "text": "the data to dynamodb using this nice abstraction and our application is now",
    "start": "1832450",
    "end": "1837730"
  },
  {
    "text": "working we're pulling and pulling from queues and everything's working so now",
    "start": "1837730",
    "end": "1845640"
  },
  {
    "text": "we build our application let's take a look at how we can actually deploy it to elastic Beanstalk",
    "start": "1845640",
    "end": "1852540"
  },
  {
    "start": "1853000",
    "end": "1853000"
  },
  {
    "text": "so the first thing we need to do is create an environment that we can deploy to and scale from and once we've created",
    "start": "1853760",
    "end": "1860060"
  },
  {
    "text": "the environment we can then take a look at deploying it and scaling it AWS",
    "start": "1860060",
    "end": "1865220"
  },
  {
    "start": "1864000",
    "end": "1864000"
  },
  {
    "text": "provides a number of ways that you can get your applications into the AWS cloud and today we're gonna be using elastic",
    "start": "1865220",
    "end": "1872510"
  },
  {
    "text": "Beanstalk to deploy our word frequency service application and with elastic",
    "start": "1872510",
    "end": "1877520"
  },
  {
    "text": "Beanstalk we can create our applications cloud environment we can deploy updates and configure auto scaling groups all",
    "start": "1877520",
    "end": "1883490"
  },
  {
    "text": "automatically through the console so let's take a look at how we can create our environment and deploy to it",
    "start": "1883490",
    "end": "1889280"
  },
  {
    "text": "one other thing to mention Beanstalk is also free of charge you don't have to pay additional costs you just pay for",
    "start": "1889280",
    "end": "1894440"
  },
  {
    "text": "the ADA based resources that you utilize there's a really nice feature and it's really easy to use so we'll look at that",
    "start": "1894440",
    "end": "1899990"
  },
  {
    "text": "now in the console now you can also use the EB tools from the CLI to set all",
    "start": "1899990",
    "end": "1907070"
  },
  {
    "text": "this up but we're gonna be using the console today and the first thing we",
    "start": "1907070",
    "end": "1912830"
  },
  {
    "text": "need to do is at the top right hand in the corner we need to create a new application so let's do that now click",
    "start": "1912830",
    "end": "1918980"
  },
  {
    "text": "on that and we're gonna give our application a name so we'll call this",
    "start": "1918980",
    "end": "1925540"
  },
  {
    "text": "reinvent demo 9000 we don't need to give",
    "start": "1925540",
    "end": "1931190"
  },
  {
    "text": "it a description so now you need to choose your environment and there's a couple of options here there's a worker",
    "start": "1931190",
    "end": "1937940"
  },
  {
    "text": "and a web server and the worker is used",
    "start": "1937940",
    "end": "1943130"
  },
  {
    "text": "to pull messages off an sqs queue to perform work and it's basically an abstraction that dynamo or that",
    "start": "1943130",
    "end": "1949520"
  },
  {
    "text": "Beanstalk provides it's sort of proxies through sqs to your instances and we could use this for application but what",
    "start": "1949520",
    "end": "1956060"
  },
  {
    "text": "we wanted to do was have more control over our queue so that we could control things like visibility timeout and also",
    "start": "1956060",
    "end": "1962210"
  },
  {
    "text": "to showcase some of the features of the sdk so for this talk we're going to be using a web server and on our web server",
    "start": "1962210",
    "end": "1969650"
  },
  {
    "text": "we're gonna choose the environment type now there's a number of environment type set that may work for your application",
    "start": "1969650",
    "end": "1975830"
  },
  {
    "text": "and there's several that work for go applications including the pre-configured go platform there is a",
    "start": "1975830",
    "end": "1982940"
  },
  {
    "text": "docker go platform and a generic docker platform now the Jarett the pre-configured go platform is",
    "start": "1982940",
    "end": "1989800"
  },
  {
    "text": "really easy to use because if you just follow a couple conventions Bienstock will automatically know how to use your",
    "start": "1989800",
    "end": "1995530"
  },
  {
    "text": "application and so we're gonna use that today and then we're going to make sure",
    "start": "1995530",
    "end": "2001140"
  },
  {
    "text": "that our environment type is load balanced and Auto scaled so this make sure that our we have more than one",
    "start": "2001140",
    "end": "2007290"
  },
  {
    "text": "instance deployed and that we can easily scale up and down based on load so now",
    "start": "2007290",
    "end": "2017310"
  },
  {
    "text": "we need to upload our application and this is done by first cross compiling",
    "start": "2017310",
    "end": "2024630"
  },
  {
    "text": "your your application to Linux so that it can run on the elastic Beanstalk and then you need to zip that up zip up the",
    "start": "2024630",
    "end": "2031470"
  },
  {
    "text": "bin slash application folder which is used by bean saw too and then upload that to this dialog here so I'm gonna",
    "start": "2031470",
    "end": "2038940"
  },
  {
    "text": "upload my own and I've already done this because it's probably kind of boring to watch me compile and zip up a file so",
    "start": "2038940",
    "end": "2045390"
  },
  {
    "text": "I'm just gonna upload that this has the application we just took a look at and then you can specify things like",
    "start": "2045390",
    "end": "2051780"
  },
  {
    "text": "deployment limits and this tells Beanstalk hey just upload to 30% of my instances",
    "start": "2051780",
    "end": "2057570"
  },
  {
    "text": "at a time if that succeeds and then continue to upload to the rest and that allows you to deploy in stages so we're",
    "start": "2057570",
    "end": "2063570"
  },
  {
    "text": "gonna just choose the default here's the",
    "start": "2063570",
    "end": "2068940"
  },
  {
    "text": "environment information and the important thing here is we want to make sure that our URL is available so we",
    "start": "2068940",
    "end": "2074940"
  },
  {
    "text": "want to make sure that the reinventing demo 9000 DMV is available let's check the availability and it's green that's",
    "start": "2074940",
    "end": "2080908"
  },
  {
    "text": "good Beanstalk also allows or can also",
    "start": "2080909",
    "end": "2086520"
  },
  {
    "text": "create resources on your behalf so you can create an RDS instance that you can use with your deployment or run your",
    "start": "2086520",
    "end": "2093270"
  },
  {
    "text": "deployment inside of a V PC we're just gonna skip this because we don't need this today and next is configuration",
    "start": "2093270",
    "end": "2103260"
  },
  {
    "text": "details and there's a bunch of stuff you can configure here like the instance",
    "start": "2103260",
    "end": "2108960"
  },
  {
    "text": "type and ec2 key pair I think those are the most important things that we're going to talk about here so first up is the instance type and this determines",
    "start": "2108960",
    "end": "2115560"
  },
  {
    "text": "the processing power of the instances in your application and you can choose from a number of types if",
    "start": "2115560",
    "end": "2122430"
  },
  {
    "text": "your cpu-bound you might want to choose a higher CPU type memory bound you might want to choose a memory in sense we're",
    "start": "2122430",
    "end": "2128250"
  },
  {
    "text": "gonna choose a t1 micro because we're cost conscious and then we're gonna",
    "start": "2128250",
    "end": "2134369"
  },
  {
    "text": "choose key pair now you want to deploy a key part here instances so that you can",
    "start": "2134369",
    "end": "2139559"
  },
  {
    "text": "SSH onto them and treat them just like normal instances so we're gonna use one that I've already created ec2 test",
    "start": "2139559",
    "end": "2145789"
  },
  {
    "text": "there's a bunch of other options that you can check out later and then we're",
    "start": "2145789",
    "end": "2150839"
  },
  {
    "text": "gonna click Next you can tag your instances just skip this for now and",
    "start": "2150839",
    "end": "2156920"
  },
  {
    "text": "permissions those are those allow you to deploy an IM role to your instances and",
    "start": "2156920",
    "end": "2163490"
  },
  {
    "text": "basically you can specify exactly what those instances can do the resources they can utilize but Bienstock will also",
    "start": "2163490",
    "end": "2170099"
  },
  {
    "text": "create a default role for you and this can be used when you're getting up and running we're just going to go ahead and",
    "start": "2170099",
    "end": "2175680"
  },
  {
    "text": "use that today use the default roles and call next so finally here's the review",
    "start": "2175680",
    "end": "2182849"
  },
  {
    "text": "screen so once you've configured your application you can make sure everything",
    "start": "2182849",
    "end": "2188190"
  },
  {
    "text": "looks good if you've made any mistakes you can fix that now by clicking on one of these links everything looks good to",
    "start": "2188190",
    "end": "2193980"
  },
  {
    "text": "me and finally you click Launch and this is gonna launch your instances it's gonna",
    "start": "2193980",
    "end": "2200190"
  },
  {
    "text": "set up your load balancer configure auto scaling and your application is now running in the cloud but this is gonna",
    "start": "2200190",
    "end": "2208349"
  },
  {
    "text": "take a little bit of time and that would probably be boring to watch as well so I've already set up a working deployment",
    "start": "2208349",
    "end": "2214529"
  },
  {
    "text": "of this it's actually the deployment that we contacted earlier from the CLI so we know it works and it's got this",
    "start": "2214529",
    "end": "2220589"
  },
  {
    "text": "big green check box so hopefully you get one of these too when you try to this out and this is kind of your at a glance",
    "start": "2220589",
    "end": "2226500"
  },
  {
    "text": "dashboard of your environment everything looks good you got messages down here that you can look at whenever you're",
    "start": "2226500",
    "end": "2233010"
  },
  {
    "text": "troubleshooting things so the first thing you need to do after you deploy our sample application is setup",
    "start": "2233010",
    "end": "2238710"
  },
  {
    "text": "environment variables that we can use from the actual application so you click on configuration on the left here and",
    "start": "2238710",
    "end": "2244920"
  },
  {
    "text": "then we're gonna go to software configuration there's a number of things you can configure here but I want to",
    "start": "2244920",
    "end": "2251430"
  },
  {
    "text": "point out the environment property and these are going to be used in our application so we need to tell it what",
    "start": "2251430",
    "end": "2256830"
  },
  {
    "text": "queue you're gonna be reading from and the queue you're gonna be writing to and",
    "start": "2256830",
    "end": "2262730"
  },
  {
    "text": "tell it the table name and dynamodb to persist your results too so all this is",
    "start": "2262730",
    "end": "2267780"
  },
  {
    "text": "already configured if you needed to change things you could do that here and then clicking apply would then bounce",
    "start": "2267780",
    "end": "2273300"
  },
  {
    "text": "your environment and restarting some instances and updating them with the new configuration so once you do that your",
    "start": "2273300",
    "end": "2281580"
  },
  {
    "text": "applications then running on elastic Beanstalk and people are uploading files and they're really happy because they",
    "start": "2281580",
    "end": "2287610"
  },
  {
    "text": "know the the frequency of words and those files but what happens if it catches on and like a ton of people hear",
    "start": "2287610",
    "end": "2293280"
  },
  {
    "text": "about your awesome product and they want to they want to start using it then you've got a scaling problem but luckily",
    "start": "2293280",
    "end": "2299370"
  },
  {
    "text": "elastic Beanstalk has really nice auto scaling integration that you can use to automatically scale up and down based on",
    "start": "2299370",
    "end": "2306060"
  },
  {
    "text": "load so you go to configuration go to scaling and from here you can specify",
    "start": "2306060",
    "end": "2312930"
  },
  {
    "text": "things like auto scaling settings so we can say I want to always run with at",
    "start": "2312930",
    "end": "2318570"
  },
  {
    "text": "least one instance or you might want to say I want to have at least ten at a time and you can also set a cap so never",
    "start": "2318570",
    "end": "2325290"
  },
  {
    "text": "have more than four instances you specify other things like availability zones that you want to run in and",
    "start": "2325290",
    "end": "2331460"
  },
  {
    "text": "scaling triggers this is what's interesting to our application now because we're probably gonna be CPU",
    "start": "2331460",
    "end": "2336930"
  },
  {
    "text": "bound with building up all these maps and counting words we're gonna set our trigger to CPU utilization there's a",
    "start": "2336930",
    "end": "2343230"
  },
  {
    "text": "number of other scaling triggers that you can use like Network in and out disk",
    "start": "2343230",
    "end": "2348360"
  },
  {
    "text": "IO type settings we're using CPU utilization and we're gonna set it to be",
    "start": "2348360",
    "end": "2353640"
  },
  {
    "text": "based on a percent just to make it easier to understand what we're scaling on and our upper thresholds gonna be 75",
    "start": "2353640",
    "end": "2359520"
  },
  {
    "text": "percent so if CPU exceeds 75 percent we're gonna start scaling up and",
    "start": "2359520",
    "end": "2365060"
  },
  {
    "text": "fulfilling more traffic now once the CPU then dips between our lower threshold which is here 25% will start scaling",
    "start": "2365060",
    "end": "2372660"
  },
  {
    "text": "back down because there's no need to have that capacity allocated anymore once your CPU dips back down to a",
    "start": "2372660",
    "end": "2377760"
  },
  {
    "text": "reasonable level and that allows you to scale up and down saving money as your",
    "start": "2377760",
    "end": "2383220"
  },
  {
    "text": "load increases and decreases and you can also set up things like time-based scaling if you know like typically your customers want to count",
    "start": "2383220",
    "end": "2390260"
  },
  {
    "text": "words in a file at 3 p.m. and you could set it up to do scaling based on that once you click apply that will then",
    "start": "2390260",
    "end": "2396500"
  },
  {
    "text": "bounce your environment and update your application so that is the application",
    "start": "2396500",
    "end": "2407510"
  },
  {
    "text": "we created it we deployed it today I've shown you how you can download the SDK how you can start using the SDK I'm",
    "start": "2407510",
    "end": "2415400"
  },
  {
    "text": "showing you how you can create a client and send requests and we've highlighted how you can use a service client and",
    "start": "2415400",
    "end": "2421670"
  },
  {
    "text": "elastic Beanstalk to utilize some of gos asynchronous programming model and finally we deployed our word frequency",
    "start": "2421670",
    "end": "2429109"
  },
  {
    "text": "service to an application on an elastic Beanstalk environment so that we can scale it up and down based on load so I",
    "start": "2429109",
    "end": "2436730"
  },
  {
    "text": "want to thank you very much for coming today it's been my pleasure to demonstrate to you the AWS SDK for go and feedback is",
    "start": "2436730",
    "end": "2443690"
  },
  {
    "text": "really important to us here's some ways that you can get in touch with us through github through the issue tracker send us issues let us know what you",
    "start": "2443690",
    "end": "2450710"
  },
  {
    "text": "think pull requests those are really important to us and these are also some links that you can use when you're",
    "start": "2450710",
    "end": "2455990"
  },
  {
    "text": "getting started including at the bottom there again is a sample application you can download so thank you very much for",
    "start": "2455990",
    "end": "2462080"
  },
  {
    "text": "your time",
    "start": "2462080",
    "end": "2464380"
  }
]