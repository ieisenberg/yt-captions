[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "2320"
  },
  {
    "text": "hello",
    "start": "2320",
    "end": "3280"
  },
  {
    "text": "welcome to this video we are going to",
    "start": "3280",
    "end": "5600"
  },
  {
    "text": "talk about incorporating graph databases",
    "start": "5600",
    "end": "8400"
  },
  {
    "text": "in your dotnet applications using amazon",
    "start": "8400",
    "end": "11200"
  },
  {
    "text": "neptune",
    "start": "11200",
    "end": "12880"
  },
  {
    "text": "my name is anil sharma and i am a",
    "start": "12880",
    "end": "15120"
  },
  {
    "text": "solution architect",
    "start": "15120",
    "end": "16160"
  },
  {
    "text": "with aws",
    "start": "16160",
    "end": "18960"
  },
  {
    "start": "19000",
    "end": "67000"
  },
  {
    "text": "amazon neptune is a fast reliable",
    "start": "19760",
    "end": "23119"
  },
  {
    "text": "fully managed craft database service",
    "start": "23119",
    "end": "25519"
  },
  {
    "text": "that makes it easy to build and run",
    "start": "25519",
    "end": "27680"
  },
  {
    "text": "applications",
    "start": "27680",
    "end": "28800"
  },
  {
    "text": "that work with highly connected data",
    "start": "28800",
    "end": "30960"
  },
  {
    "text": "sets",
    "start": "30960",
    "end": "32640"
  },
  {
    "text": "the core of amazon neptune is a",
    "start": "32640",
    "end": "34960"
  },
  {
    "text": "purpose-built",
    "start": "34960",
    "end": "36000"
  },
  {
    "text": "high-performance craft database engine",
    "start": "36000",
    "end": "38960"
  },
  {
    "text": "optimized for storing billions of",
    "start": "38960",
    "end": "40719"
  },
  {
    "text": "relationships",
    "start": "40719",
    "end": "41920"
  },
  {
    "text": "and querying graph with low latency",
    "start": "41920",
    "end": "45280"
  },
  {
    "text": "amazon neptune supports popular graph",
    "start": "45280",
    "end": "47920"
  },
  {
    "text": "models",
    "start": "47920",
    "end": "48960"
  },
  {
    "text": "property graph and w3cs rdf",
    "start": "48960",
    "end": "53120"
  },
  {
    "text": "and their respective query languages",
    "start": "53120",
    "end": "55920"
  },
  {
    "text": "apache think about kremlin",
    "start": "55920",
    "end": "58079"
  },
  {
    "text": "and spark ql allowing you to",
    "start": "58079",
    "end": "61359"
  },
  {
    "text": "easily build queries that navigate",
    "start": "61359",
    "end": "64400"
  },
  {
    "text": "highly connected data sets",
    "start": "64400",
    "end": "67840"
  },
  {
    "text": "amazon neptune is a fully managed",
    "start": "67840",
    "end": "69760"
  },
  {
    "text": "service",
    "start": "69760",
    "end": "70960"
  },
  {
    "text": "as a fully managed service you can use",
    "start": "70960",
    "end": "73760"
  },
  {
    "text": "and configure it",
    "start": "73760",
    "end": "74880"
  },
  {
    "text": "easily via the console you can enable",
    "start": "74880",
    "end": "78640"
  },
  {
    "text": "high availability across multiple",
    "start": "78640",
    "end": "80560"
  },
  {
    "text": "availability zones",
    "start": "80560",
    "end": "82880"
  },
  {
    "text": "provision read replicas to scale reads",
    "start": "82880",
    "end": "85520"
  },
  {
    "text": "and configure",
    "start": "85520",
    "end": "86560"
  },
  {
    "text": "encryption at rest and in transit",
    "start": "86560",
    "end": "90880"
  },
  {
    "text": "now before we go any further let's look",
    "start": "91280",
    "end": "93680"
  },
  {
    "text": "at typical use cases where",
    "start": "93680",
    "end": "95759"
  },
  {
    "text": "neptune can be used neptune powers",
    "start": "95759",
    "end": "100159"
  },
  {
    "start": "97000",
    "end": "178000"
  },
  {
    "text": "craft use cases such as recommendation",
    "start": "100159",
    "end": "102799"
  },
  {
    "text": "engines",
    "start": "102799",
    "end": "103759"
  },
  {
    "text": "fraud detection knowledge graphs",
    "start": "103759",
    "end": "107040"
  },
  {
    "text": "drug discovery and network security",
    "start": "107040",
    "end": "110320"
  },
  {
    "text": "a lot of applications being built today",
    "start": "110320",
    "end": "113439"
  },
  {
    "text": "need to understand and navigate",
    "start": "113439",
    "end": "115280"
  },
  {
    "text": "relationships between",
    "start": "115280",
    "end": "116479"
  },
  {
    "text": "highly connected data",
    "start": "116479",
    "end": "119520"
  },
  {
    "text": "to enable these use cases for example",
    "start": "119520",
    "end": "123439"
  },
  {
    "text": "if you are building a news feed in your",
    "start": "123439",
    "end": "125600"
  },
  {
    "text": "app",
    "start": "125600",
    "end": "126799"
  },
  {
    "text": "you wanted to show updates that are most",
    "start": "126799",
    "end": "129039"
  },
  {
    "text": "relevant",
    "start": "129039",
    "end": "130239"
  },
  {
    "text": "updates from their families friends and",
    "start": "130239",
    "end": "134239"
  },
  {
    "text": "from the people that they like or from",
    "start": "134239",
    "end": "136800"
  },
  {
    "text": "the user",
    "start": "136800",
    "end": "137520"
  },
  {
    "text": "user history if you're building",
    "start": "137520",
    "end": "140319"
  },
  {
    "text": "restaurant recommendation app",
    "start": "140319",
    "end": "142319"
  },
  {
    "text": "you want the app to provide restaurant",
    "start": "142319",
    "end": "144160"
  },
  {
    "text": "recommendations that at least two of",
    "start": "144160",
    "end": "146239"
  },
  {
    "text": "their user friends",
    "start": "146239",
    "end": "147599"
  },
  {
    "text": "have liked if you're building a retail",
    "start": "147599",
    "end": "151120"
  },
  {
    "text": "retail",
    "start": "151120",
    "end": "151760"
  },
  {
    "text": "fraud detection application you want the",
    "start": "151760",
    "end": "154959"
  },
  {
    "text": "application to easily detect",
    "start": "154959",
    "end": "156640"
  },
  {
    "text": "relationship patterns",
    "start": "156640",
    "end": "158480"
  },
  {
    "text": "like multiple people sharing the same ip",
    "start": "158480",
    "end": "161760"
  },
  {
    "text": "address",
    "start": "161760",
    "end": "162560"
  },
  {
    "text": "but residing in different physical",
    "start": "162560",
    "end": "164319"
  },
  {
    "text": "addresses",
    "start": "164319",
    "end": "166160"
  },
  {
    "text": "in all of these use cases because the",
    "start": "166160",
    "end": "168560"
  },
  {
    "text": "data is highly connected",
    "start": "168560",
    "end": "170480"
  },
  {
    "text": "it is easily represented as a graph",
    "start": "170480",
    "end": "174000"
  },
  {
    "text": "and you can use amazon neptune as well",
    "start": "174000",
    "end": "178640"
  },
  {
    "start": "178000",
    "end": "234000"
  },
  {
    "text": "now let's talk about connecting to",
    "start": "178640",
    "end": "181599"
  },
  {
    "text": "amazon neptune in our dot doctrine",
    "start": "181599",
    "end": "183360"
  },
  {
    "text": "applications",
    "start": "183360",
    "end": "185920"
  },
  {
    "text": "an amazon neptune database cluster can",
    "start": "185920",
    "end": "188879"
  },
  {
    "text": "only be created",
    "start": "188879",
    "end": "190480"
  },
  {
    "text": "in an amazon virtual private cloud or",
    "start": "190480",
    "end": "192800"
  },
  {
    "text": "vpc",
    "start": "192800",
    "end": "194560"
  },
  {
    "text": "its endpoints are accessible only within",
    "start": "194560",
    "end": "197920"
  },
  {
    "text": "that ppc",
    "start": "197920",
    "end": "200080"
  },
  {
    "text": "so for the purposes of this demo i set",
    "start": "200080",
    "end": "203120"
  },
  {
    "text": "up an invite environment",
    "start": "203120",
    "end": "204480"
  },
  {
    "text": "as shown in the diagram i provisioned a",
    "start": "204480",
    "end": "207519"
  },
  {
    "text": "neptune cluster",
    "start": "207519",
    "end": "208640"
  },
  {
    "text": "within a vpc within the same vpc",
    "start": "208640",
    "end": "212799"
  },
  {
    "text": "i also provisioned an ec2 instance",
    "start": "212799",
    "end": "215840"
  },
  {
    "text": "from where i will run my.net application",
    "start": "215840",
    "end": "219440"
  },
  {
    "text": "to query the neptune database",
    "start": "219440",
    "end": "223519"
  },
  {
    "text": "i am using visual studio to build",
    "start": "223920",
    "end": "226400"
  },
  {
    "text": "console application",
    "start": "226400",
    "end": "228959"
  },
  {
    "text": "now let's look at my visual studio",
    "start": "228959",
    "end": "231680"
  },
  {
    "text": "application first",
    "start": "231680",
    "end": "234640"
  },
  {
    "start": "234000",
    "end": "471000"
  },
  {
    "text": "before we look at this let's look at",
    "start": "234720",
    "end": "236799"
  },
  {
    "text": "what are the packages that we have",
    "start": "236799",
    "end": "240480"
  },
  {
    "text": "i'll go to manage nuket packages",
    "start": "240480",
    "end": "244319"
  },
  {
    "text": "i go to the installed ones as you can",
    "start": "244319",
    "end": "247040"
  },
  {
    "text": "see i have",
    "start": "247040",
    "end": "247959"
  },
  {
    "text": "kremlin.net package installed",
    "start": "247959",
    "end": "250959"
  },
  {
    "text": "this is the package that i will use to",
    "start": "250959",
    "end": "253599"
  },
  {
    "text": "connect",
    "start": "253599",
    "end": "254159"
  },
  {
    "text": "and query my neptune database",
    "start": "254159",
    "end": "258160"
  },
  {
    "text": "to connect to my neptune database i",
    "start": "260720",
    "end": "263280"
  },
  {
    "text": "created an instance of",
    "start": "263280",
    "end": "265040"
  },
  {
    "text": "gremlin server using my endpoint",
    "start": "265040",
    "end": "269840"
  },
  {
    "text": "the endpoint is what i received when i",
    "start": "269840",
    "end": "272000"
  },
  {
    "text": "provisioned my neptune database cluster",
    "start": "272000",
    "end": "275680"
  },
  {
    "text": "using the kremlin server instance i",
    "start": "275680",
    "end": "278240"
  },
  {
    "text": "created a gremlin client",
    "start": "278240",
    "end": "281040"
  },
  {
    "text": "which is what i will use to query my",
    "start": "281040",
    "end": "283360"
  },
  {
    "text": "database",
    "start": "283360",
    "end": "285840"
  },
  {
    "text": "if i go to the next file you will see",
    "start": "286560",
    "end": "289199"
  },
  {
    "text": "this is how i use my grandin client",
    "start": "289199",
    "end": "291600"
  },
  {
    "text": "to fire various kinds of queries",
    "start": "291600",
    "end": "294960"
  },
  {
    "text": "right now before i did you know",
    "start": "294960",
    "end": "298320"
  },
  {
    "text": "i provisioned a neptune database cluster",
    "start": "298320",
    "end": "302160"
  },
  {
    "text": "and populated it with sample data",
    "start": "302160",
    "end": "305199"
  },
  {
    "text": "the sample data that i used has some",
    "start": "305199",
    "end": "307520"
  },
  {
    "text": "tweets and users",
    "start": "307520",
    "end": "309120"
  },
  {
    "text": "who have made those tweets it also has",
    "start": "309120",
    "end": "312560"
  },
  {
    "text": "data about",
    "start": "312560",
    "end": "313759"
  },
  {
    "text": "who has like tweets from whom",
    "start": "313759",
    "end": "317280"
  },
  {
    "text": "who has who is following other users",
    "start": "317280",
    "end": "320880"
  },
  {
    "text": "retweets mentions etc as you can imagine",
    "start": "320880",
    "end": "325039"
  },
  {
    "text": "it's a highly connected data set",
    "start": "325039",
    "end": "329120"
  },
  {
    "text": "a graph now let's see the code in action",
    "start": "329120",
    "end": "334400"
  },
  {
    "text": "remember that the neptune is accessible",
    "start": "334400",
    "end": "336880"
  },
  {
    "text": "only within aws vpc that it was created",
    "start": "336880",
    "end": "339600"
  },
  {
    "text": "in",
    "start": "339600",
    "end": "340880"
  },
  {
    "text": "i will now go to the ect instance that i",
    "start": "340880",
    "end": "343840"
  },
  {
    "text": "created in the same ppc",
    "start": "343840",
    "end": "347360"
  },
  {
    "text": "this is my ec2 instance i already have",
    "start": "349199",
    "end": "352479"
  },
  {
    "text": "the",
    "start": "352479",
    "end": "354240"
  },
  {
    "text": "console application running in this",
    "start": "354240",
    "end": "357600"
  },
  {
    "text": "sample",
    "start": "357600",
    "end": "358400"
  },
  {
    "text": "we are querying neptune database to find",
    "start": "358400",
    "end": "360639"
  },
  {
    "text": "answers to",
    "start": "360639",
    "end": "361680"
  },
  {
    "text": "three questions that we are asking of it",
    "start": "361680",
    "end": "364639"
  },
  {
    "text": "the first is",
    "start": "364639",
    "end": "365759"
  },
  {
    "text": "how many tweets has the user made let me",
    "start": "365759",
    "end": "368800"
  },
  {
    "text": "select that option",
    "start": "368800",
    "end": "371199"
  },
  {
    "text": "it will ask me for a username or id for",
    "start": "371199",
    "end": "373759"
  },
  {
    "text": "which i want to find out the",
    "start": "373759",
    "end": "375840"
  },
  {
    "text": "number of tweets that the user has made",
    "start": "375840",
    "end": "378560"
  },
  {
    "text": "i'll give it a user id let's say 5",
    "start": "378560",
    "end": "381199"
  },
  {
    "text": "and it will go ahead and tell me how",
    "start": "381199",
    "end": "383120"
  },
  {
    "text": "many tweets has this user made",
    "start": "383120",
    "end": "384720"
  },
  {
    "text": "in this case six tweets the second",
    "start": "384720",
    "end": "388160"
  },
  {
    "text": "question that i'm asking",
    "start": "388160",
    "end": "389520"
  },
  {
    "text": "is how many followers does the user have",
    "start": "389520",
    "end": "393120"
  },
  {
    "text": "again let me choose that option and in",
    "start": "393120",
    "end": "395919"
  },
  {
    "text": "this case",
    "start": "395919",
    "end": "396960"
  },
  {
    "text": "again it will ask me for the user for",
    "start": "396960",
    "end": "398720"
  },
  {
    "text": "which i want to see",
    "start": "398720",
    "end": "400240"
  },
  {
    "text": "the number of followers i give it a user",
    "start": "400240",
    "end": "402479"
  },
  {
    "text": "id",
    "start": "402479",
    "end": "403600"
  },
  {
    "text": "and it tells me that the number of",
    "start": "403600",
    "end": "406080"
  },
  {
    "text": "followers",
    "start": "406080",
    "end": "407360"
  },
  {
    "text": "for that user id is 6d",
    "start": "407360",
    "end": "411039"
  },
  {
    "text": "the third question that we are asking of",
    "start": "411039",
    "end": "412720"
  },
  {
    "text": "this database is how many followers",
    "start": "412720",
    "end": "415199"
  },
  {
    "text": "are common to two specific users",
    "start": "415199",
    "end": "419039"
  },
  {
    "text": "all right this is a typical question",
    "start": "419039",
    "end": "421120"
  },
  {
    "text": "that you might ask of your graph",
    "start": "421120",
    "end": "422560"
  },
  {
    "text": "database",
    "start": "422560",
    "end": "423919"
  },
  {
    "text": "where you want to find out the followers",
    "start": "423919",
    "end": "426960"
  },
  {
    "text": "who are following both user a",
    "start": "426960",
    "end": "428880"
  },
  {
    "text": "and b let's use that option",
    "start": "428880",
    "end": "432319"
  },
  {
    "text": "it'll ask me for this user one it lasts",
    "start": "432319",
    "end": "434960"
  },
  {
    "text": "me for the second user as well",
    "start": "434960",
    "end": "437280"
  },
  {
    "text": "and then it will go ahead and tell me",
    "start": "437280",
    "end": "439120"
  },
  {
    "text": "traverse the graph and tell me",
    "start": "439120",
    "end": "441039"
  },
  {
    "text": "that the number of common followers is",
    "start": "441039",
    "end": "443199"
  },
  {
    "text": "25",
    "start": "443199",
    "end": "445840"
  },
  {
    "text": "so that is how we connect and",
    "start": "445919",
    "end": "449199"
  },
  {
    "text": "query our neptune database",
    "start": "449199",
    "end": "452400"
  },
  {
    "text": "now in today's example i showed you how",
    "start": "452400",
    "end": "454720"
  },
  {
    "text": "to connect",
    "start": "454720",
    "end": "455520"
  },
  {
    "text": "to amazon neptune and how to query",
    "start": "455520",
    "end": "459360"
  },
  {
    "text": "neptune using dotnet framework",
    "start": "459360",
    "end": "462800"
  },
  {
    "text": "i hope you found that useful thank you",
    "start": "462800",
    "end": "465120"
  },
  {
    "text": "for watching",
    "start": "465120",
    "end": "473039"
  }
]