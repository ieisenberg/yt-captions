[
  {
    "text": "hello and welcome to reinvent and welcome to running lean architectures how to optimize for cost efficiency and",
    "start": "1669",
    "end": "8460"
  },
  {
    "text": "thank you very much for choosing this session and for coming here so late in the day and not not going to the pub",
    "start": "8460",
    "end": "16379"
  },
  {
    "text": "crawl so this is really big honor for you to have you here so you're actually",
    "start": "16379",
    "end": "22470"
  },
  {
    "text": "the reason I'm coming to reinvent every year this is the sixth year I'm giving this talk and every year my goal in this",
    "start": "22470",
    "end": "30150"
  },
  {
    "text": "talk is to help you save so much money that you can easily pay for your next reinvent trip and actually I'm very glad",
    "start": "30150",
    "end": "37950"
  },
  {
    "text": "to have JC and Patrick here on stage with me they were actually here last",
    "start": "37950",
    "end": "44010"
  },
  {
    "text": "year attended this session followed some best practices and now they're here on stage presenting about their experience",
    "start": "44010",
    "end": "50370"
  },
  {
    "text": "so if you follow this session and implement those best practices you could be here next year on this stage so my",
    "start": "50370",
    "end": "57690"
  },
  {
    "text": "name is considering Gonzales I'm the principal Solutions Architect with AWS in Germany and let's get started because",
    "start": "57690",
    "end": "63809"
  },
  {
    "text": "there's a lot of stuff to cover now so what are you gonna get out of this session first we're gonna cover some",
    "start": "63809",
    "end": "69119"
  },
  {
    "text": "best practices on how to lower your AWS bill this is why you're here but it will turn out that these best practices can",
    "start": "69119",
    "end": "75479"
  },
  {
    "text": "also help you build a more scalable more robust and more dynamic architecture so it's gonna be a win win it's not a",
    "start": "75479",
    "end": "81420"
  },
  {
    "text": "trade-off this is actually win across the board and it'll also show you how to",
    "start": "81420",
    "end": "88040"
  },
  {
    "text": "create more time to innovate you will save money and time and that will help",
    "start": "88040",
    "end": "93689"
  },
  {
    "text": "you build better architectures better services for your users we're going to",
    "start": "93689",
    "end": "99329"
  },
  {
    "text": "discuss some real-world customer examples and some of them are really easy to implement so ideally you would",
    "start": "99329",
    "end": "105420"
  },
  {
    "text": "leave this session fire up the AWS console app on your phone and start saving money even if you",
    "start": "105420",
    "end": "112710"
  },
  {
    "text": "don't do anything we work really hard to lower our prices so this is our philosophy here whenever",
    "start": "112710",
    "end": "118950"
  },
  {
    "text": "we reduce our prices more customers end up using the iOS platform and that means",
    "start": "118950",
    "end": "124799"
  },
  {
    "text": "we see more AWS users which helps us build more infrastructure which helps us enjoy better economies of scale which",
    "start": "124799",
    "end": "132810"
  },
  {
    "text": "leads to lower infrastructure costs and that helps us reduce our prices even more so",
    "start": "132810",
    "end": "138270"
  },
  {
    "text": "that vicious cycle this flywheel is actually accelerated by an ever-growing community of AWS users the bigger global",
    "start": "138270",
    "end": "146670"
  },
  {
    "text": "footprint new features and new services and the amount of innovation we can put on top of that cost savings into our",
    "start": "146670",
    "end": "153390"
  },
  {
    "text": "platform to be more and more efficient and over time we were able to reduce our",
    "start": "153390",
    "end": "159390"
  },
  {
    "text": "prices 67 times since aw started in 2006 now ADA basis for",
    "start": "159390",
    "end": "166530"
  },
  {
    "text": "builders and you're all builders here in this room and as a builder you build it and you run it you've probably heard",
    "start": "166530",
    "end": "174330"
  },
  {
    "text": "that before but the other thing is you also optimize it and the thing is that in the past when we used to work with",
    "start": "174330",
    "end": "181620"
  },
  {
    "text": "hardware architectures were hard to change you build something and then you",
    "start": "181620",
    "end": "186989"
  },
  {
    "text": "were stuck with it for three to five years now in the cloud you can change architecture all the time so you can",
    "start": "186989",
    "end": "193560"
  },
  {
    "text": "optimize and optimize and optimize and and enjoy more savings and improve your architecture so please do that because",
    "start": "193560",
    "end": "201380"
  },
  {
    "text": "as an architect your biggest strength really is architectural flexibility",
    "start": "201380",
    "end": "207709"
  },
  {
    "text": "don't worry I'm not going to do this post here but the point is enjoy and",
    "start": "207709",
    "end": "213630"
  },
  {
    "text": "also take advantage of the flexibility you have on AWS so when you want to save",
    "start": "213630",
    "end": "220739"
  },
  {
    "text": "money the main goal here is to avoid wasteful cycles and by wasteful cycles I",
    "start": "220739",
    "end": "226890"
  },
  {
    "text": "mean things like unnecessary resources or idling resources could be easy to",
    "start": "226890",
    "end": "233489"
  },
  {
    "text": "instances that are not fully utilized or repetitive work if you catch yourself",
    "start": "233489",
    "end": "238859"
  },
  {
    "text": "doing the same stuff all over again maybe there's an opportunity to be more efficient here so let's take a quick",
    "start": "238859",
    "end": "245820"
  },
  {
    "text": "look at the overall process and it always starts with measuring cost in",
    "start": "245820",
    "end": "250829"
  },
  {
    "text": "this case right you measure something and then you come up with ideas on how to improve the architecture you",
    "start": "250829",
    "end": "255989"
  },
  {
    "text": "architect and then you build and implement those ideas and after you realized a couple of wins you can start",
    "start": "255989",
    "end": "262440"
  },
  {
    "text": "from scratch you can start measuring again coming up with new ideas and it an ever-growing cycle here so let's",
    "start": "262440",
    "end": "268850"
  },
  {
    "text": "start with the measuring bit and a good way to start is by checking your AWS",
    "start": "268850",
    "end": "274580"
  },
  {
    "text": "billing dashboard you probably know that billing dashboard and it'll give you a quick glance on your cost and one thing",
    "start": "274580",
    "end": "281780"
  },
  {
    "text": "you can do is you can check out the AWS budget part of the ledger so just find the aid of this budget",
    "start": "281780",
    "end": "287420"
  },
  {
    "text": "piece on the left side of the dashboard and this allows you to set up a budget a monthly budget and you can create",
    "start": "287420",
    "end": "294910"
  },
  {
    "text": "notifications so that you actually receive e-mails when you're reaching 80 percent of your budget so this gives you",
    "start": "294910",
    "end": "300440"
  },
  {
    "text": "better control over your spending and then you can dive deeper using the Erebus cost Explorer because the cost",
    "start": "300440",
    "end": "307340"
  },
  {
    "text": "Explorer gives you the data that you can slice and dice based on regions based on",
    "start": "307340",
    "end": "313780"
  },
  {
    "text": "services based on instance that based on on many different dimensions so you can analyze where are the big spots you're",
    "start": "313780",
    "end": "320510"
  },
  {
    "text": "spending something with and where could you start optimizing so after measuring let's take a look at some architecture",
    "start": "320510",
    "end": "327680"
  },
  {
    "text": "best practices here and the first thing if you only we should only take one",
    "start": "327680",
    "end": "333410"
  },
  {
    "text": "thing away from this talk is turn off unused instances it sounds super obvious",
    "start": "333410",
    "end": "339560"
  },
  {
    "text": "but you wouldn't believe how many unused instances are running today where people can save money those unused instances",
    "start": "339560",
    "end": "346010"
  },
  {
    "text": "could be developer instances it could be test instances could be training instances and and think of it think",
    "start": "346010",
    "end": "353750"
  },
  {
    "text": "about it you start a test instance you test something you're fine and then you go about your work and you forget about",
    "start": "353750",
    "end": "359720"
  },
  {
    "text": "that test instance very easy to do or maybe you're running a training and don't shut down the instances because you might need them tomorrow and then",
    "start": "359720",
    "end": "366560"
  },
  {
    "text": "those instances are running so try to remind yourself of turning off those unused instances you can simply do the",
    "start": "366560",
    "end": "373550"
  },
  {
    "text": "instant stop thing and the instance is not gonna vanish it's just stopped and you can restart it again next morning and one thing is we recently introduced",
    "start": "373550",
    "end": "381260"
  },
  {
    "text": "this for databases too so if you're running a database on ideas you can turn",
    "start": "381260",
    "end": "386450"
  },
  {
    "text": "off that database again and then turn it off the next morning this used to be not",
    "start": "386450",
    "end": "391940"
  },
  {
    "text": "possible and a couple months ago we introduced this as a feature",
    "start": "391940",
    "end": "398169"
  },
  {
    "text": "the other thing is you can even turn off whole architecture setups if you're using any kind of automation like load",
    "start": "398169",
    "end": "403719"
  },
  {
    "text": "formation or terraform or some other way of scripting your architecture you can set up a big really big architecture",
    "start": "403719",
    "end": "409749"
  },
  {
    "text": "that you're setting up as a test or as a training architecture and when you don't need it anymore you're shut it down completely with all of its resources and",
    "start": "409749",
    "end": "416590"
  },
  {
    "text": "then you started again main point here is in the cloud resources are really",
    "start": "416590",
    "end": "421870"
  },
  {
    "text": "disposable and don't get attached to your resources too much simply get rid",
    "start": "421870",
    "end": "426969"
  },
  {
    "text": "of them when you don't need them and then you can start saving so here's an example from a customer on this graph",
    "start": "426969",
    "end": "432849"
  },
  {
    "text": "the X sorry the y-axis shows you the amount of instances this customer is using over time which is the why the x",
    "start": "432849",
    "end": "439689"
  },
  {
    "text": "axis and you can see how the week plays out over time you can see where Monday",
    "start": "439689",
    "end": "445659"
  },
  {
    "text": "starts you can see how Friday introduces the weekend and then this customers",
    "start": "445659",
    "end": "451389"
  },
  {
    "text": "shutting down a lot of instances you can even make out the end of the vacation season here and in this case this customer is setting 35% of their ec2",
    "start": "451389",
    "end": "458529"
  },
  {
    "text": "bill just by turning off unused instances now after doing this for a",
    "start": "458529",
    "end": "465009"
  },
  {
    "text": "couple of months or so you'll probably become your field bore so you should",
    "start": "465009",
    "end": "470919"
  },
  {
    "text": "start automating stuff so this is probably the other big thing to take away from this talk automate everything",
    "start": "470919",
    "end": "476500"
  },
  {
    "text": "and you can automate the whole start ops thing with SDKs with a command line",
    "start": "476500",
    "end": "483550"
  },
  {
    "text": "interface with formation other tools here or you can use the ec2 auto scaling",
    "start": "483550",
    "end": "491889"
  },
  {
    "text": "mechanism who uses auto scaling already and couple people but still not enough",
    "start": "491889",
    "end": "498149"
  },
  {
    "text": "auto scaling is really a very easy way to automate your infrastructure so how does it work well auto scaling uses",
    "start": "498149",
    "end": "505599"
  },
  {
    "text": "Amazon Cloud watch to collect metrics about your running infrastructure such as latency or CPU or other metrics and",
    "start": "505599",
    "end": "513610"
  },
  {
    "text": "it can use those metrics to get a feel about how much infrastructure you really need and the other component of auto",
    "start": "513610",
    "end": "520360"
  },
  {
    "text": "scaling is it automates the instance provisioning bit so you can set up a launch configuration where you",
    "start": "520360",
    "end": "526110"
  },
  {
    "text": "everything you need to know to launch a new instance and by combining these two things auto-scaling can adjust the",
    "start": "526110",
    "end": "531900"
  },
  {
    "text": "number of instances that are running in your architecture automatically so you you simply set up minimum and maximum",
    "start": "531900",
    "end": "538590"
  },
  {
    "text": "number of instances you hook it up to a measure that helps you understand the load and then it does its thing",
    "start": "538590",
    "end": "545130"
  },
  {
    "text": "automatically and you get three wins win number one is to get automatic capacity",
    "start": "545130",
    "end": "550650"
  },
  {
    "text": "management so our scaling will automatically make sure that you get just the right amount of instances",
    "start": "550650",
    "end": "555870"
  },
  {
    "text": "running in your architecture second witness you also get a more reliable architecture because auto scaling will",
    "start": "555870",
    "end": "561900"
  },
  {
    "text": "automatically replace any broken instances and finally you will save money because if you are running too",
    "start": "561900",
    "end": "568560"
  },
  {
    "text": "many instances and there's not enough load to to justify those instances or a",
    "start": "568560",
    "end": "573870"
  },
  {
    "text": "scaling will automatically terminate those overflow instances so there are",
    "start": "573870",
    "end": "579720"
  },
  {
    "text": "three easy steps to set this up step number one is to set up the launch configuration this is basically a JSON",
    "start": "579720",
    "end": "585780"
  },
  {
    "text": "or a way of collecting all of the necessary data that you need to launch a new instance and then you set up the",
    "start": "585780",
    "end": "592590"
  },
  {
    "text": "actual auto scaling configuration with minimum and maximum and where the load balancers or or other pieces that are",
    "start": "592590",
    "end": "598050"
  },
  {
    "text": "relevant to auto scaling to making a thing and then you can start saving and watch cloud watch as auto scaling",
    "start": "598050",
    "end": "605300"
  },
  {
    "text": "automatically provisions your infrastructure in this graph we can see the number of instances that are provisioned you can see how over the",
    "start": "605300",
    "end": "611700"
  },
  {
    "text": "course of a day is increasing load and it's increasing the number of instances and as the day ends it will shut down",
    "start": "611700",
    "end": "618660"
  },
  {
    "text": "instances and setting your automatic money and the key takeaway here is in",
    "start": "618660",
    "end": "625380"
  },
  {
    "text": "the old IT we used to love our machines we treated our machines like pets we",
    "start": "625380",
    "end": "631890"
  },
  {
    "text": "gave them names and we treated them like individual servers every server was its",
    "start": "631890",
    "end": "637650"
  },
  {
    "text": "own individual thing we did a lot of manual administration and that also",
    "start": "637650",
    "end": "644070"
  },
  {
    "text": "could lead to configuration drift I mean you know you log into the instance you fix something and many times this",
    "start": "644070",
    "end": "651030"
  },
  {
    "text": "doesn't get documented so by doing all that manual administration there's also",
    "start": "651030",
    "end": "656040"
  },
  {
    "text": "potential for error which creates some a lot of work actually so in the new IT",
    "start": "656040",
    "end": "661790"
  },
  {
    "text": "in the automated world of the cloud you should think about your instances and your ec2 resources like cattle I know",
    "start": "661790",
    "end": "669440"
  },
  {
    "text": "these are not real careful these are actually sheep but I like this picture better so the point is try to make them",
    "start": "669440",
    "end": "677960"
  },
  {
    "text": "highly in standardized right every instance should look the same and should",
    "start": "677960",
    "end": "683930"
  },
  {
    "text": "be fully automated which helps you because it carries less error potential",
    "start": "683930",
    "end": "689180"
  },
  {
    "text": "right if everything is automated less potential for error which means less work to do and more efficiency which",
    "start": "689180",
    "end": "696290"
  },
  {
    "text": "also translates into bigger savings you can use auto scaling also for things",
    "start": "696290",
    "end": "701720"
  },
  {
    "text": "like dynamo DB so dynamo DB comes with its own auto scaling engine and as you know the anima DB is built by the amount",
    "start": "701720",
    "end": "708020"
  },
  {
    "text": "of capacity units that you assigned to your database tables on dynamo DB and you can program dynamo DB to adjust",
    "start": "708020",
    "end": "715490"
  },
  {
    "text": "those capacity units automatically for you based on demand and this is how it looks like the blue line is the demand",
    "start": "715490",
    "end": "721730"
  },
  {
    "text": "line and the red line is the amount of capacity units that auto that diamond will be auto scaling automatically",
    "start": "721730",
    "end": "728000"
  },
  {
    "text": "assigned to the tables okay these were the basics let's start with something a",
    "start": "728000",
    "end": "733580"
  },
  {
    "text": "little bit more sophisticated so who is using spot instances today a couple",
    "start": "733580",
    "end": "739190"
  },
  {
    "text": "people great let me tell you a little bit about spot instances so what are spot instances as you probably know AWS",
    "start": "739190",
    "end": "746600"
  },
  {
    "text": "manages a lot of hardware across many many data centers all over the world and",
    "start": "746600",
    "end": "751960"
  },
  {
    "text": "we have to keep a lot of these instances waiting until you hit the launch",
    "start": "751960",
    "end": "758300"
  },
  {
    "text": "instance button or until your architecture starts this automatically so these instances are sitting there",
    "start": "758300",
    "end": "763670"
  },
  {
    "text": "doing nothing waiting to be started by the next customer so what do we do we offer these instances at a steep",
    "start": "763670",
    "end": "770990"
  },
  {
    "text": "discount so these spare capacity instances can be bought at very steep",
    "start": "770990",
    "end": "776000"
  },
  {
    "text": "discounts and we create the price or we",
    "start": "776000",
    "end": "781250"
  },
  {
    "text": "find the price based on supply and demand right so if there's many people who need those spot instances and put in",
    "start": "781250",
    "end": "790760"
  },
  {
    "text": "those spot requests and not a lot of supply then the price will be higher but if there's a lot of",
    "start": "790760",
    "end": "796940"
  },
  {
    "text": "supply and not many people asking for support instances the price will be very very low there is one downside and the",
    "start": "796940",
    "end": "804320"
  },
  {
    "text": "downside is if we need those instances back because we have customers launching instances on demand then we will take",
    "start": "804320",
    "end": "810950"
  },
  {
    "text": "them back from you but there is going to be a two minutes notice and you can program spot instances to hibernate",
    "start": "810950",
    "end": "817550"
  },
  {
    "text": "themselves so that they are not lost they will be restarted again when the price goes lower enough so this is how",
    "start": "817550",
    "end": "824750"
  },
  {
    "text": "spot instances looked like about a year ago so this is a graph that tells you about the price on the spot instance",
    "start": "824750",
    "end": "830450"
  },
  {
    "text": "market and the different colors are different availability zones and as you can see there were very large spikes",
    "start": "830450",
    "end": "835910"
  },
  {
    "text": "those spikes could occasionally be even greater than on demand because people tended to outbid themselves on the spot",
    "start": "835910",
    "end": "842810"
  },
  {
    "text": "market and this was this led to a very unpredictable behavior and created a lot",
    "start": "842810",
    "end": "848300"
  },
  {
    "text": "of uncertainty it was complex to architect around that now spot instances",
    "start": "848300",
    "end": "854030"
  },
  {
    "text": "look a lot better I mean these are the prices here of a lot lower you don't see",
    "start": "854030",
    "end": "859820"
  },
  {
    "text": "any spikes anymore this is very smooth pricing now very predictable and now you",
    "start": "859820",
    "end": "865130"
  },
  {
    "text": "can really depend on spot instances and the price is always going to be lower than on demand and that makes it easy to",
    "start": "865130",
    "end": "872810"
  },
  {
    "text": "manage and easy to work into your architecture setup we also created the easy to spot adviser it will take the",
    "start": "872810",
    "end": "879920"
  },
  {
    "text": "historical pricing of the spot instances and give you a forecast about what is the probability of losing an instance on",
    "start": "879920",
    "end": "886370"
  },
  {
    "text": "spot and that that can help you plan really nicely and there's another tool",
    "start": "886370",
    "end": "891470"
  },
  {
    "text": "you can use which is easy to spot fleet which helps you manage large fleets of spot instances and using them for things",
    "start": "891470",
    "end": "898490"
  },
  {
    "text": "like batch so let's talk to a real spot customer here and I'd like to introduce",
    "start": "898490",
    "end": "903950"
  },
  {
    "text": "you to JC and Patrick and they will tell you their story on how they optimize their spending on AWS and how they found",
    "start": "903950",
    "end": "910610"
  },
  {
    "text": "spot instances and introduce them into their architecture thank you can fifteen well good evening everybody I am very",
    "start": "910610",
    "end": "918140"
  },
  {
    "text": "happy to be here today to talk to you about the cost optimization work that we have done at expiry",
    "start": "918140",
    "end": "924260"
  },
  {
    "text": "so as it was announced last year right here at reinvent we at Expedia are all",
    "start": "924260",
    "end": "930330"
  },
  {
    "text": "in on AWS the challenge we face was the following how can we move quickly but",
    "start": "930330",
    "end": "937020"
  },
  {
    "text": "safely to the cloud one strategy that we adopted is called move in tune in this",
    "start": "937020",
    "end": "943710"
  },
  {
    "text": "two-phase approach we started by moving our application as is without any real architectural and we",
    "start": "943710",
    "end": "950610"
  },
  {
    "text": "started tuning phase measuring and finding what were the optimal changes for improvement our experience showed us",
    "start": "950610",
    "end": "959820"
  },
  {
    "text": "that the biggest return that we got from cast optimization work was the real",
    "start": "959820",
    "end": "964950"
  },
  {
    "text": "architecture that came up with those tuning phases tonight we are here to",
    "start": "964950",
    "end": "971120"
  },
  {
    "text": "share with you the story of two teams at Expedia that walked that path of moving",
    "start": "971120",
    "end": "977190"
  },
  {
    "text": "tune Allen white Patrick to talk to you about his journey in the content systems",
    "start": "977190",
    "end": "982380"
  },
  {
    "text": "team Thank You Jon Cedric I'm really also really happy to be here to share",
    "start": "982380",
    "end": "989340"
  },
  {
    "text": "our story I'm a member of the content system team so when we talk about",
    "start": "989340",
    "end": "997220"
  },
  {
    "text": "content in Expedia we talk about things like media properties a property history",
    "start": "997220",
    "end": "1003760"
  },
  {
    "text": "description paragraph about hotels room and bookable products my team is",
    "start": "1003760",
    "end": "1011810"
  },
  {
    "text": "responsible from one service the content multiple service but one of them is the",
    "start": "1011810",
    "end": "1017330"
  },
  {
    "text": "content distribution service which is the service the return localized content to users like for one",
    "start": "1017330",
    "end": "1024860"
  },
  {
    "text": "of the user is the OTL Expedia Hotel search page and so you see the amount of",
    "start": "1024860",
    "end": "1032959"
  },
  {
    "text": "content that we have if I have to break it down by hotel I will say that it is",
    "start": "1032960",
    "end": "1038870"
  },
  {
    "text": "around like 100 kilobyte of content for for one hotel for one language most of",
    "start": "1038870",
    "end": "1046069"
  },
  {
    "text": "the time like outlines we call our service with one or two languages and with up to 70 hotels",
    "start": "1046070",
    "end": "1052970"
  },
  {
    "text": "for a prayer request so that's that's a lot of content in 2016 we used to have",
    "start": "1052970",
    "end": "1060950"
  },
  {
    "text": "like our application running in the data center the architecture for this",
    "start": "1060950",
    "end": "1066020"
  },
  {
    "text": "application was already five years old it has been designed at a time where the",
    "start": "1066020",
    "end": "1071330"
  },
  {
    "text": "number of OTUs was five five times less and the content for each hotels was was",
    "start": "1071330",
    "end": "1077270"
  },
  {
    "text": "less - so it was it has been built around like a in-memory grid we used to",
    "start": "1077270",
    "end": "1086900"
  },
  {
    "text": "have like a large object that contains like all the content for our line the",
    "start": "1086900",
    "end": "1092000"
  },
  {
    "text": "the localization for one hotel so this object was huge and the full data set",
    "start": "1092000",
    "end": "1098929"
  },
  {
    "text": "was partitioned within the the in-memory great cluster so one issue that we had",
    "start": "1098929",
    "end": "1107390"
  },
  {
    "text": "like one cluster it was only able to handle something like 400 TPS and the",
    "start": "1107390",
    "end": "1112400"
  },
  {
    "text": "service received around 2,000 TPS at that time so what happened is that we",
    "start": "1112400",
    "end": "1118429"
  },
  {
    "text": "had to add more and more clusters we start with two clustering we ended up with with ten as you can imagine",
    "start": "1118429",
    "end": "1126730"
  },
  {
    "text": "managing ten cluster clusters of that size is not an easy task",
    "start": "1126730",
    "end": "1132230"
  },
  {
    "text": "it means like a lot of support for the team like you need we need to deploy",
    "start": "1132230",
    "end": "1137390"
  },
  {
    "text": "monitor and many time we had to reboot cluster because the performance was not",
    "start": "1137390",
    "end": "1143630"
  },
  {
    "text": "good enough on top of that like dos yesterday they were the artwork for the",
    "start": "1143630",
    "end": "1148669"
  },
  {
    "text": "cluster it was expensive and managing the cluster was expensive - so you may",
    "start": "1148669",
    "end": "1154610"
  },
  {
    "text": "wonder why we were still on this architecture given all those issues truth is that it was really hard to test",
    "start": "1154610",
    "end": "1162770"
  },
  {
    "text": "new ideas it was our to get the required hardware to test new architecture and",
    "start": "1162770",
    "end": "1169880"
  },
  {
    "text": "when we were testing like new different ideas and test our stress and",
    "start": "1169880",
    "end": "1176620"
  },
  {
    "text": "environment did not show the same result of what we were seeing in prod making the trying new things like risky if you",
    "start": "1176620",
    "end": "1187610"
  },
  {
    "text": "so then we had the opportunity to move to the cloud so the initial idea was to",
    "start": "1187610",
    "end": "1194580"
  },
  {
    "text": "do a left hand shift meaning that will bring our AV stack up to the cloud and we did that like we had a 1 month type",
    "start": "1194580",
    "end": "1203039"
  },
  {
    "text": "time box we and at the end of the month like it was working like we have been",
    "start": "1203039",
    "end": "1208980"
  },
  {
    "text": "able to lift our old stack or AV stacking up to the cloud it was working",
    "start": "1208980",
    "end": "1215970"
  },
  {
    "text": "but it was like the custom deck stack was really expensive in the cloud two",
    "start": "1215970",
    "end": "1221399"
  },
  {
    "text": "main issues like one of them is that we did not force and first compression",
    "start": "1221399",
    "end": "1228450"
  },
  {
    "text": "either hood as that content is so big and you have to pay for when you",
    "start": "1228450",
    "end": "1233490"
  },
  {
    "text": "transfer like that over like different networks so that that price was really",
    "start": "1233490",
    "end": "1238500"
  },
  {
    "text": "expensive the other issue is that the in-memory that agreed it was using",
    "start": "1238500",
    "end": "1245299"
  },
  {
    "text": "expect expensive ec2 instances so that like the customer that was really like",
    "start": "1245299",
    "end": "1251250"
  },
  {
    "text": "important so after less than a month we just stopped the experiment because it",
    "start": "1251250",
    "end": "1258240"
  },
  {
    "text": "was just too expensive with this new learning like it was now possible for",
    "start": "1258240",
    "end": "1264570"
  },
  {
    "text": "the team to decide something that makes much more sense in the cloud so we work",
    "start": "1264570",
    "end": "1271200"
  },
  {
    "text": "like on like a more native design it basically it's kind of simple like we",
    "start": "1271200",
    "end": "1276899"
  },
  {
    "text": "just let the big object that we have for that content auto-lock and the content",
    "start": "1276899",
    "end": "1282809"
  },
  {
    "text": "in all languages and in to smaller objects for each languages we store that",
    "start": "1282809",
    "end": "1289350"
  },
  {
    "text": "into elastic cache and we use RDS all right in our case as a second layer",
    "start": "1289350",
    "end": "1295620"
  },
  {
    "text": "cache so what happens is the application received the request depending on what",
    "start": "1295620",
    "end": "1302100"
  },
  {
    "text": "what is requested in the the filter and the hotel requested we get the content from memcache D if anything is missing",
    "start": "1302100",
    "end": "1310169"
  },
  {
    "text": "then we fall back on Ora we the application assemble the response do some additional filtering and just",
    "start": "1310169",
    "end": "1316880"
  },
  {
    "text": "return the response so yes like I would",
    "start": "1316880",
    "end": "1322370"
  },
  {
    "text": "say that the the initial version was not that perfect that the response time was that that improve but with few iteration",
    "start": "1322370",
    "end": "1329630"
  },
  {
    "text": "like we have been able to improve that and now we have like an application that suit our needs so for us like a great",
    "start": "1329630",
    "end": "1339530"
  },
  {
    "text": "improvement when we move to the cloud is that we have been able to work on the Oracle tactics architecture and we have",
    "start": "1339530",
    "end": "1346070"
  },
  {
    "text": "been able to simplify this architecture so in my in my the way I'm saying this",
    "start": "1346070",
    "end": "1352730"
  },
  {
    "text": "is that a simpler architecture is easier to maintain and there's there will be less bug on with with such an app such",
    "start": "1352730",
    "end": "1359840"
  },
  {
    "text": "an Archie architecture sorry the other improvement is that we have been able to save on casts so the stack in AWS cost",
    "start": "1359840",
    "end": "1368570"
  },
  {
    "text": "seventy-two percent less than the the evaluated cost that of the same stack in",
    "start": "1368570",
    "end": "1374419"
  },
  {
    "text": "the data center so that's a big improvement the service is I'm sorry so one of the",
    "start": "1374419",
    "end": "1382070"
  },
  {
    "text": "reason for that is now we think the issue about the data compression we force our client to use compression a",
    "start": "1382070",
    "end": "1389330"
  },
  {
    "text": "dress with the we cost for the traffic isn't that as much and we use auto",
    "start": "1389330",
    "end": "1396020"
  },
  {
    "text": "scaling based on CPU to make sure that we always use the right number of instances so that's a big improvement",
    "start": "1396020",
    "end": "1402620"
  },
  {
    "text": "over what we have in the data center before because in the data center you",
    "start": "1402620",
    "end": "1407809"
  },
  {
    "text": "need to have enough hardware to support the maximum load that you can possibly receive so in the cloud you just paid",
    "start": "1407809",
    "end": "1413809"
  },
  {
    "text": "for the instance that we need the great pleasure for the team is to have a",
    "start": "1413809",
    "end": "1418840"
  },
  {
    "text": "product that is easier to support that is much more stable the TTT p99",
    "start": "1418840",
    "end": "1424460"
  },
  {
    "text": "is six times better than what it used to be and it's really stable over time those improvement they have been noticed",
    "start": "1424460",
    "end": "1431419"
  },
  {
    "text": "by our service consumer some of them they used to call our application only",
    "start": "1431419",
    "end": "1437240"
  },
  {
    "text": "once a day and like for us once a day for each hotel and then they used to",
    "start": "1437240",
    "end": "1442460"
  },
  {
    "text": "cache the data so now the the drug or caching they get fresh content every for every",
    "start": "1442460",
    "end": "1448910"
  },
  {
    "text": "time they call our system so with those changes like we now have three times",
    "start": "1448910",
    "end": "1455179"
  },
  {
    "text": "more traffic than what we used to have used to have like two years ago the",
    "start": "1455179",
    "end": "1461840"
  },
  {
    "text": "flexibility of the environment makes it possible to use like to try new ideas",
    "start": "1461840",
    "end": "1467900"
  },
  {
    "text": "ideas so if a developer as an ideas okay I mean you can just try it and if it is",
    "start": "1467900",
    "end": "1472910"
  },
  {
    "text": "better we will measure it and then if it is really better than we are going to use that in prod like we like the move",
    "start": "1472910",
    "end": "1483289"
  },
  {
    "text": "to the AWS has been a success but we still have a service consumer that are running in the data center and we need",
    "start": "1483289",
    "end": "1491480"
  },
  {
    "text": "to be present in the same network as them so what we did is we took our",
    "start": "1491480",
    "end": "1497090"
  },
  {
    "text": "simplifier architecture and we did the lift and shift back to the to the data center so now we have one code base that",
    "start": "1497090",
    "end": "1503809"
  },
  {
    "text": "we run in all environments so that's what I want to share about our move to",
    "start": "1503809",
    "end": "1510230"
  },
  {
    "text": "AWS so now like as we seen the nor that will pass the puck to Johnson Rick so we can talk about the challenge that you",
    "start": "1510230",
    "end": "1516830"
  },
  {
    "text": "had with geography team is Thank You Patrick",
    "start": "1516830",
    "end": "1521710"
  },
  {
    "text": "[Applause] so quite a journey for the content team",
    "start": "1522210",
    "end": "1528350"
  },
  {
    "text": "so to the cloud and back again so what is geography geography it's everywhere",
    "start": "1528350",
    "end": "1534559"
  },
  {
    "text": "it's all around us at Expedia our geography platform is involved in the",
    "start": "1534559",
    "end": "1540380"
  },
  {
    "text": "majority of the business use cases for example when you search for hotels on",
    "start": "1540380",
    "end": "1546380"
  },
  {
    "text": "Expedia our service gets called to find where is your destination on the planet",
    "start": "1546380",
    "end": "1552230"
  },
  {
    "text": "what are the hotels over there and also what's around like airports neighborhood",
    "start": "1552230",
    "end": "1557299"
  },
  {
    "text": "point of interest all that things that are driving your shopping experience",
    "start": "1557299",
    "end": "1562630"
  },
  {
    "text": "because it is so critical for the business we operate in multiple AWS",
    "start": "1562630",
    "end": "1568010"
  },
  {
    "text": "regions and also in our own data center this allow us to be close to our clients",
    "start": "1568010",
    "end": "1575210"
  },
  {
    "text": "and to meet our fast SLA now setting the ground for our cloud",
    "start": "1575210",
    "end": "1581530"
  },
  {
    "text": "migration so when we decided to move to the cloud we agreed that we would keep",
    "start": "1581530",
    "end": "1587890"
  },
  {
    "text": "the same codebase and deployed the same thing everywhere and we also made sure",
    "start": "1587890",
    "end": "1594550"
  },
  {
    "text": "that we would leverage all that commodity those commodity resources at",
    "start": "1594550",
    "end": "1599890"
  },
  {
    "text": "our disposal in the cloud all our service components are fully compatible",
    "start": "1599890",
    "end": "1605080"
  },
  {
    "text": "with AWS so our lift and shift approach was pretty easy to do but one key",
    "start": "1605080",
    "end": "1612310"
  },
  {
    "text": "decision that we made was to embrace DevOps and we'll need to automate everything we invent invested our time",
    "start": "1612310",
    "end": "1620080"
  },
  {
    "text": "in infrastructure as code with cloud formation and we came up with a pipeline that allow us now to have predictable",
    "start": "1620080",
    "end": "1627010"
  },
  {
    "text": "and consistent result this pole ownership model quickly allowed us to",
    "start": "1627010",
    "end": "1632470"
  },
  {
    "text": "test quickly new functionality in the cloud and allowed us also to try out new",
    "start": "1632470",
    "end": "1638190"
  },
  {
    "text": "engineering techniques like chaos testing it also provided us with great",
    "start": "1638190",
    "end": "1643900"
  },
  {
    "text": "visibility on a new reality when you operate in the cloud cast awareness so",
    "start": "1643900",
    "end": "1651070"
  },
  {
    "text": "now let's look at what our architecture looks like once we move to the cloud looked like any typical rest service all",
    "start": "1651070",
    "end": "1658780"
  },
  {
    "text": "balance from front and the toe scaling group that allows us to one in multiple availability zones database at the back",
    "start": "1658780",
    "end": "1666130"
  },
  {
    "text": "and some memcache key nodes for performance purposes now before we move",
    "start": "1666130",
    "end": "1671470"
  },
  {
    "text": "to the cloud we knew we had some limitations with this architecture but because we were operating in a static",
    "start": "1671470",
    "end": "1678250"
  },
  {
    "text": "environment in our own datacenter we were able to mitigate the situation moving to the cloud forced us to do",
    "start": "1678250",
    "end": "1685840"
  },
  {
    "text": "something about it we had to work on our robustness and resiliency so that we",
    "start": "1685840",
    "end": "1692710"
  },
  {
    "text": "could improve and also what we realized quickly is that operating those multiple",
    "start": "1692710",
    "end": "1698470"
  },
  {
    "text": "terabytes memcache the nodes on the elastic cache is quite expensive so this",
    "start": "1698470",
    "end": "1703900"
  },
  {
    "text": "started our tuning phase and we decided to add a second layer of caching in our",
    "start": "1703900",
    "end": "1710320"
  },
  {
    "text": "market sure this new solution with persisted and replicated state would allow us to",
    "start": "1710320",
    "end": "1717450"
  },
  {
    "text": "be more resilient having two layers of cash would provide us the lever to",
    "start": "1717450",
    "end": "1723840"
  },
  {
    "text": "fine-tune the balance between fast access and capacity and we also believe",
    "start": "1723840",
    "end": "1729360"
  },
  {
    "text": "that we could be better to be more cost-effective and save a few bucks along the way some objectives with our",
    "start": "1729360",
    "end": "1738600"
  },
  {
    "text": "project was no it's good to improve on your implementation but we needed to keep it fast without any negative impact",
    "start": "1738600",
    "end": "1746190"
  },
  {
    "text": "on our clients we have a background process that is constantly updating our",
    "start": "1746190",
    "end": "1752280"
  },
  {
    "text": "cache for fresh data so we needed something that would support this right",
    "start": "1752280",
    "end": "1757320"
  },
  {
    "text": "heavy use case on our cache and because of the nature of our service we need",
    "start": "1757320",
    "end": "1762450"
  },
  {
    "text": "also something that would support a variety of payload sizes to implement",
    "start": "1762450",
    "end": "1768840"
  },
  {
    "text": "our solution we tested out a few things we evaluated a degree services like s3",
    "start": "1768840",
    "end": "1774780"
  },
  {
    "text": "Aurora and dynamo DB but we came up to the conclusion that the best solution",
    "start": "1774780",
    "end": "1780780"
  },
  {
    "text": "for us both from a cost and an engineering perspective was to run our own Cassandra clusters ec2 provides all",
    "start": "1780780",
    "end": "1788820"
  },
  {
    "text": "the resources and flexibility to do so and those specialize I three instances",
    "start": "1788820",
    "end": "1794160"
  },
  {
    "text": "with their super fast SSD drive provided all the i/o capacity we needed so here",
    "start": "1794160",
    "end": "1803220"
  },
  {
    "text": "it was Cassandra as our second layer and by doing so we also changed the role of memcache it became our first layer we",
    "start": "1803220",
    "end": "1811170"
  },
  {
    "text": "reduce its capacity and we're now only keeping the latest entries in there the",
    "start": "1811170",
    "end": "1817440"
  },
  {
    "text": "result were pretty good we were able to reduce our cost by over $1,000,000 per",
    "start": "1817440",
    "end": "1823650"
  },
  {
    "text": "year just for the operation of our caching solution while increasing the capacity by 4x that's a little bit more",
    "start": "1823650",
    "end": "1830790"
  },
  {
    "text": "than a few bucks and all this without any negative impact on our clients at",
    "start": "1830790",
    "end": "1837230"
  },
  {
    "text": "that point the team decided that we should do another spin another",
    "start": "1837230",
    "end": "1842610"
  },
  {
    "text": "optimization cycle see if we could get a little bit more out of this solution and it's then that",
    "start": "1842610",
    "end": "1849230"
  },
  {
    "text": "we realize that we were using memcache D an in-memory cache that provides",
    "start": "1849230",
    "end": "1855559"
  },
  {
    "text": "single-digit latency to transmit multiple multiple megabytes of payloads over the network that was not a very",
    "start": "1855559",
    "end": "1862880"
  },
  {
    "text": "clever decision so we decided to put a hard limit on what we put in this first",
    "start": "1862880",
    "end": "1869750"
  },
  {
    "text": "layer to only keep what is less than one megabyte our final tests not only",
    "start": "1869750",
    "end": "1875240"
  },
  {
    "text": "indicated that we were still as fast as before in general but now we were 25%",
    "start": "1875240",
    "end": "1881030"
  },
  {
    "text": "faster on big payloads needless to say that that was a pretty successful",
    "start": "1881030",
    "end": "1886429"
  },
  {
    "text": "project for the G team it was available because ad blue AWS provides all that",
    "start": "1886429",
    "end": "1892730"
  },
  {
    "text": "flexibility but also all that automation that we worked on during our migration",
    "start": "1892730",
    "end": "1898220"
  },
  {
    "text": "paid off in making that possible now let's change gears and talk about",
    "start": "1898220",
    "end": "1904730"
  },
  {
    "text": "another thing that we are using in the Geo team to save money spot instances so",
    "start": "1904730",
    "end": "1912410"
  },
  {
    "text": "like Constantine showed us spot is a great way to save money but it comes",
    "start": "1912410",
    "end": "1918410"
  },
  {
    "text": "with some risk before we starting to use pot we had to change our philosophy to",
    "start": "1918410",
    "end": "1924230"
  },
  {
    "text": "change our mind and take for granted that we would lose those instances so to",
    "start": "1924230",
    "end": "1931520"
  },
  {
    "text": "account for this we figure out some characteristics that our services or",
    "start": "1931520",
    "end": "1936740"
  },
  {
    "text": "processes we're gonna list if they are stateless stateful or background jobs we",
    "start": "1936740",
    "end": "1942830"
  },
  {
    "text": "need to have to support spot and to mitigate the risk of spot we came up",
    "start": "1942830",
    "end": "1949730"
  },
  {
    "text": "with some simple strategy the first one is called fire-and-forget as its name",
    "start": "1949730",
    "end": "1956240"
  },
  {
    "text": "implies we simply configure our auto scaling group to lunch spot instances and we simply hope that nothing will",
    "start": "1956240",
    "end": "1963890"
  },
  {
    "text": "happen so for example we use this process this technique on this",
    "start": "1963890",
    "end": "1969679"
  },
  {
    "text": "background job that is updating our cache as well as daily data jobs that we have that generates feeds for our",
    "start": "1969679",
    "end": "1976100"
  },
  {
    "text": "partners we we have no mitigation in place so if we lose our instances we simply wait for",
    "start": "1976100",
    "end": "1982430"
  },
  {
    "text": "them to come back and this is fine because those are not mission-critical",
    "start": "1982430",
    "end": "1987610"
  },
  {
    "text": "but by being careful clever and by understanding the rules of the game now",
    "start": "1987610",
    "end": "1994820"
  },
  {
    "text": "we can take decision to minimize the probability of losing instances to",
    "start": "1994820",
    "end": "2001120"
  },
  {
    "text": "maximize our supply we decided to only use previous generation instances so",
    "start": "2001120",
    "end": "2007390"
  },
  {
    "text": "when you're all recently migrated to those brand new or five and m5 guess",
    "start": "2007390",
    "end": "2013060"
  },
  {
    "text": "what you left behind a big pool of available instances for us to use and to",
    "start": "2013060",
    "end": "2019510"
  },
  {
    "text": "avoid any issue with the spot price we simply did what AWS recommend and we",
    "start": "2019510",
    "end": "2025420"
  },
  {
    "text": "always bid the on demand price using this strategy we never lost an instance",
    "start": "2025420",
    "end": "2031420"
  },
  {
    "text": "in two years but sometimes this strategy",
    "start": "2031420",
    "end": "2036430"
  },
  {
    "text": "is not applicable because you want to use this specialized type of instance that has more dynamic forces of supply",
    "start": "2036430",
    "end": "2044470"
  },
  {
    "text": "and demand and then we came up with another strategy we call free-falling",
    "start": "2044470",
    "end": "2050230"
  },
  {
    "text": "with a parachute in this strategy we run our instance sunspot but we have a",
    "start": "2050230",
    "end": "2056290"
  },
  {
    "text": "fallback we have a manual trigger that we can use to bring back our instances to under man if needed two key",
    "start": "2056290",
    "end": "2064750"
  },
  {
    "text": "characteristics to use the strategy is that the service or process that you're running that on must be able to sustain",
    "start": "2064750",
    "end": "2073330"
  },
  {
    "text": "failure or interruption without any immediate intervention also another",
    "start": "2073330",
    "end": "2080350"
  },
  {
    "text": "important point is that even though the trigger is manual the recovery mechanism",
    "start": "2080350",
    "end": "2085570"
  },
  {
    "text": "must be full fully automated for consistent results so imagine that",
    "start": "2085570",
    "end": "2091090"
  },
  {
    "text": "you're jumping out of that plane at the moment that you decide to pull that trigger on the parachute you don't want",
    "start": "2091090",
    "end": "2097780"
  },
  {
    "text": "to see a label popping up that says assembly required so remember those",
    "start": "2097780",
    "end": "2104080"
  },
  {
    "text": "Cassandra clusters so we decided to apply this strategy on them and we're on part of our",
    "start": "2104080",
    "end": "2111220"
  },
  {
    "text": "clusters on spot to further reduce our cost of operation Cassandra is fully",
    "start": "2111220",
    "end": "2117490"
  },
  {
    "text": "compatible with this strategy because it is resilient by design and it can run",
    "start": "2117490",
    "end": "2123280"
  },
  {
    "text": "with some node failure the way we did it is that for each Cassandra node we have",
    "start": "2123280",
    "end": "2129339"
  },
  {
    "text": "an auto scaling group backed with a pair of launch configuration that allow us to",
    "start": "2129339",
    "end": "2135059"
  },
  {
    "text": "move back and forth between spot and on-demand prices when we lose an",
    "start": "2135059",
    "end": "2141670"
  },
  {
    "text": "instance whether it comes back on spot or our none the man if we use our",
    "start": "2141670",
    "end": "2147250"
  },
  {
    "text": "fallback we have animation in place that detects the recovery mode makes the node",
    "start": "2147250",
    "end": "2152829"
  },
  {
    "text": "joins back the cluster and automatically we sync all the data so what did we get",
    "start": "2152829",
    "end": "2161260"
  },
  {
    "text": "at the end of all that work that we've done so obviously by running over the",
    "start": "2161260",
    "end": "2167770"
  },
  {
    "text": "quarter of all our instance hours on spot no it comes the savings with it and",
    "start": "2167770",
    "end": "2174700"
  },
  {
    "text": "that allow us to reinvest all that money in other projects but the biggest reward",
    "start": "2174700",
    "end": "2181450"
  },
  {
    "text": "we got is that we all the hard work that",
    "start": "2181450",
    "end": "2187210"
  },
  {
    "text": "we have done to safely use spot Mayr stronger working out this",
    "start": "2187210",
    "end": "2193750"
  },
  {
    "text": "resiliency muscle gave us a big boost so that our services are closer to this",
    "start": "2193750",
    "end": "2199569"
  },
  {
    "text": "ideal of bending but not breaking we are now operating in the state we're losing",
    "start": "2199569",
    "end": "2206470"
  },
  {
    "text": "instances where there is it spot or a deist maintenance or alchek failure is",
    "start": "2206470",
    "end": "2212609"
  },
  {
    "text": "part of our day-to-day routine but most importantly now we have a method we have",
    "start": "2212609",
    "end": "2219400"
  },
  {
    "text": "a pattern that we can reapply across the organization to be more resilient and to",
    "start": "2219400",
    "end": "2225280"
  },
  {
    "text": "save money at scale so all that work was pretty fun to do to be honest but none",
    "start": "2225280",
    "end": "2231880"
  },
  {
    "text": "of this really matters if you are not being careful about your overall top spinning forgotten resources or idled",
    "start": "2231880",
    "end": "2239799"
  },
  {
    "text": "instances can eat up all your save and that could be quite frustrating so",
    "start": "2239799",
    "end": "2245290"
  },
  {
    "text": "this is why at Expedia we have put in place a some cloud cast governing",
    "start": "2245290",
    "end": "2250600"
  },
  {
    "text": "practices our program evolves into around three key pillars the first point",
    "start": "2250600",
    "end": "2256720"
  },
  {
    "text": "is we need good metrics we provide to all the teams at Expedia some cabana",
    "start": "2256720",
    "end": "2262120"
  },
  {
    "text": "dashboards that allow them to deep dive in any dimension the second point we",
    "start": "2262120",
    "end": "2268510"
  },
  {
    "text": "need to set targets so on a regular basis we agree with finance on some forecasts and each team is accountable",
    "start": "2268510",
    "end": "2275770"
  },
  {
    "text": "to stick to those targets the most important point of all this is that all",
    "start": "2275770",
    "end": "2281380"
  },
  {
    "text": "this data is available to anybody for full visibility and transparency this",
    "start": "2281380",
    "end": "2286990"
  },
  {
    "text": "really enables collaboration between teams to find what are the best things that we can do to save money and to",
    "start": "2286990",
    "end": "2293260"
  },
  {
    "text": "track our costs so to conclude the big lessons that I've learned during all my",
    "start": "2293260",
    "end": "2299770"
  },
  {
    "text": "journey is that first we need to treat costs as their limited resources during",
    "start": "2299770",
    "end": "2307840"
  },
  {
    "text": "all the phases of the left decide that the software life cycle the same thing",
    "start": "2307840",
    "end": "2314140"
  },
  {
    "text": "we're doing today with CPU memory and network bandwidth and the other lesson",
    "start": "2314140",
    "end": "2319840"
  },
  {
    "text": "is a counter example so never ever reduce your capacity to be redundant or",
    "start": "2319840",
    "end": "2325420"
  },
  {
    "text": "resilient just for the sake of saving money always be safe first and then you",
    "start": "2325420",
    "end": "2331600"
  },
  {
    "text": "optimize so on this we'll go back to Constantine and learn more tips and",
    "start": "2331600",
    "end": "2337780"
  },
  {
    "text": "tricks on how to save money on AWS thank you thank you",
    "start": "2337780",
    "end": "2345000"
  },
  {
    "text": "Wow 1 million dollars saved well you could have brought your whole family to Las",
    "start": "2345690",
    "end": "2351160"
  },
  {
    "text": "Vegas so think about some use cases where you can apply spot instances on",
    "start": "2351160",
    "end": "2356950"
  },
  {
    "text": "your own container s workloads are great because containers should be stateless and that makes it easier to to run on",
    "start": "2356950",
    "end": "2364240"
  },
  {
    "text": "spot big data is a great application spot for spot elastic MapReduce even C",
    "start": "2364240",
    "end": "2371110"
  },
  {
    "text": "ICD pipelines or any kind of high performance computing including financial simulation or transcoding",
    "start": "2371110",
    "end": "2378520"
  },
  {
    "text": "these are all great ways of using spot instances check out the spot homepage and just a few weeks ago I think two",
    "start": "2378520",
    "end": "2386320"
  },
  {
    "text": "weeks ago or so we introduced a new feature for auto scaling so that you can now mix different purchasing models like",
    "start": "2386320",
    "end": "2393100"
  },
  {
    "text": "spot and on-demand inside the same auto scaling group and you can also mix different instance types so you can take",
    "start": "2393100",
    "end": "2399490"
  },
  {
    "text": "advantage of bigger pools of available instances by mixing different instance types so now you can get the",
    "start": "2399490",
    "end": "2405550"
  },
  {
    "text": "free-falling with a parachute mechanism built in with auto scaling in a very",
    "start": "2405550",
    "end": "2410620"
  },
  {
    "text": "easy-to-use way but many people say ok ok we talked about scaling but what if",
    "start": "2410620",
    "end": "2417640"
  },
  {
    "text": "my application only needs one single instance or what if I have many applications and each of them uses a",
    "start": "2417640",
    "end": "2423730"
  },
  {
    "text": "single instance and I'm not able to scale up and down that much this is where you can leverage containers to",
    "start": "2423730",
    "end": "2430810"
  },
  {
    "text": "consolidate those mini applications into fewer servers so if you have those those",
    "start": "2430810",
    "end": "2437350"
  },
  {
    "text": "small applications that are only using small percentages of ec2 instances you",
    "start": "2437350",
    "end": "2443290"
  },
  {
    "text": "can containerize them and then you can run those same applications on a smaller number of actual easy to instances by",
    "start": "2443290",
    "end": "2450490"
  },
  {
    "text": "using containers as a consolidation mechanism so here's how this works first you should make your application",
    "start": "2450490",
    "end": "2458740"
  },
  {
    "text": "stateless which enables them to be more mobile more flexible and then you can run them on a container",
    "start": "2458740",
    "end": "2465280"
  },
  {
    "text": "platform of your choice it could be easy s it could be eks it could be for gate",
    "start": "2465280",
    "end": "2470380"
  },
  {
    "text": "and then you can start saving by adding them on",
    "start": "2470380",
    "end": "2475390"
  },
  {
    "text": "or using them on spot instances so you can get like two different kinds of",
    "start": "2475390",
    "end": "2480490"
  },
  {
    "text": "settings first by consolidation and second by using them on stock on spot",
    "start": "2480490",
    "end": "2487109"
  },
  {
    "text": "and now surveillance is all the rage right who's using lambda in this room",
    "start": "2487109",
    "end": "2492900"
  },
  {
    "text": "couple people here so lambda is a great way of saving money it also gives you",
    "start": "2492900",
    "end": "2500049"
  },
  {
    "text": "automatic scaling it gives you automatic provisioning and there's no need to manage anything so it's also very easy",
    "start": "2500049",
    "end": "2505869"
  },
  {
    "text": "to use you just bring your code and lambda does the rest the billing works",
    "start": "2505869",
    "end": "2511180"
  },
  {
    "text": "like this you get 1 million free requests per month and then you just pay",
    "start": "2511180",
    "end": "2518319"
  },
  {
    "text": "a very small amount per request and the runtime is built in 100 millisecond increments and as a rule of thumb if",
    "start": "2518319",
    "end": "2525970"
  },
  {
    "text": "you're looking at an application and it uses 40% of an ec2 instance you can",
    "start": "2525970",
    "end": "2531250"
  },
  {
    "text": "instantly save money by simply porting that application to a lambda execution model so the key things remember about",
    "start": "2531250",
    "end": "2539019"
  },
  {
    "text": "server lists here is you never pay for idle which is great but there's a small",
    "start": "2539019",
    "end": "2544509"
  },
  {
    "text": "catch here if you do idle inside of a function like if you're intentionally",
    "start": "2544509",
    "end": "2551069"
  },
  {
    "text": "waiting inside a function then you still pain so you should really avoid weight",
    "start": "2551069",
    "end": "2556539"
  },
  {
    "text": "cycles in your application so here's an example where those wakes weight cycles",
    "start": "2556539",
    "end": "2561730"
  },
  {
    "text": "could be this is a typical lambda function it sends a couple of HTTP",
    "start": "2561730",
    "end": "2566829"
  },
  {
    "text": "requests maybe it's collecting some data so it sends out an HTTP GET request and then it waits for this response and then",
    "start": "2566829",
    "end": "2573309"
  },
  {
    "text": "it sends the second request and it waits for it's each response each HTTP request could be an API call or it could be real",
    "start": "2573309",
    "end": "2580720"
  },
  {
    "text": "data that's flowing here and at the end of the whole thing lambda does its thing",
    "start": "2580720",
    "end": "2586240"
  },
  {
    "text": "you compute something and then you deliver a result as an example this is",
    "start": "2586240",
    "end": "2591339"
  },
  {
    "text": "one function that I use in one of my personal set ups this is a function that collects data from different RSS feeds",
    "start": "2591339",
    "end": "2598630"
  },
  {
    "text": "and then it creates the combined feet and delivers it to some next stage here",
    "start": "2598630",
    "end": "2604390"
  },
  {
    "text": "and over time this function was taking longer and longer and to execute because over time more news",
    "start": "2604390",
    "end": "2612040"
  },
  {
    "text": "piled up and and stuff like that and this actually happened during my vacation until the total run time hits",
    "start": "2612040",
    "end": "2619630"
  },
  {
    "text": "the ceiling of five minutes and then my function fails because it was forcibly terminated by the lambda system now I",
    "start": "2619630",
    "end": "2628290"
  },
  {
    "text": "had to pay for the full five minutes and then the function still failed that wasn't funny especially during my",
    "start": "2628290",
    "end": "2636190"
  },
  {
    "text": "vacation because I got that email from Claude was telling me your function failed right so what what did I do I",
    "start": "2636190",
    "end": "2641530"
  },
  {
    "text": "actually followed my own advice because one year earlier during the same talk I told people don't avoid these things",
    "start": "2641530",
    "end": "2647530"
  },
  {
    "text": "right so I rewrote my code and it actually took me just one hour to do",
    "start": "2647530",
    "end": "2652930"
  },
  {
    "text": "that and I placed my function calls or my the the get HTTP GET request I put",
    "start": "2652930",
    "end": "2659890"
  },
  {
    "text": "them into multi-threaded code so now the execution looks like this I do get get",
    "start": "2659890",
    "end": "2665590"
  },
  {
    "text": "get get get very fast because they are multi-threaded and the waiting happens",
    "start": "2665590",
    "end": "2671350"
  },
  {
    "text": "in parallel so that the total time now becomes a lot shorter and I'm spending a",
    "start": "2671350",
    "end": "2676930"
  },
  {
    "text": "lot more time being productive in my code and a lot less time waiting for HTTP requests so the trick here is you",
    "start": "2676930",
    "end": "2684100"
  },
  {
    "text": "can use parallelization through multi-threading or you can use event-driven languages like nodejs",
    "start": "2684100",
    "end": "2690160"
  },
  {
    "text": "to get rid of wait cycles that can accumulate as a result of network latency or network lag or or other i/o",
    "start": "2690160",
    "end": "2697330"
  },
  {
    "text": "or other weight stuff that you can't really avoid it so you can paralyze wrong that and save time on lambda in my",
    "start": "2697330",
    "end": "2703750"
  },
  {
    "text": "case I was able to save 60% of my execution time simply by introducing",
    "start": "2703750",
    "end": "2708790"
  },
  {
    "text": "multi-threading into my lambda function here yet the thing to avoid is",
    "start": "2708790",
    "end": "2714160"
  },
  {
    "text": "intentional weighting by using things like a sleep function of your operating system so in this case you have lambda",
    "start": "2714160",
    "end": "2721150"
  },
  {
    "text": "function which starts the job and then it sleeps for 10 seconds and then it asks is the job done yet so it's a",
    "start": "2721150",
    "end": "2728050"
  },
  {
    "text": "function that's waiting very common pattern right you could start an easy an elastic MapReduce job and then you wait",
    "start": "2728050",
    "end": "2734650"
  },
  {
    "text": "until the job is complete or you're doing a complex database request and then you wait until the request is done",
    "start": "2734650",
    "end": "2740110"
  },
  {
    "text": "and you can avoid these things by letting something like a double step functions",
    "start": "2740110",
    "end": "2746420"
  },
  {
    "text": "to the waiting for you so ed of your step functions is a very easy service that you can use to implement workflows",
    "start": "2746420",
    "end": "2751999"
  },
  {
    "text": "and in this case you can set up a step functions execution flow where the job submission is at the beginning and then",
    "start": "2751999",
    "end": "2759049"
  },
  {
    "text": "you do the waiting as part of step functions and the great thing is that inside step functions as a workflow engine the waiting is for free so you",
    "start": "2759049",
    "end": "2766940"
  },
  {
    "text": "don't pay for the wait time inside the step functions execution flow so you might think okay considering you're",
    "start": "2766940",
    "end": "2773089"
  },
  {
    "text": "optimizing here on the seconds is it really worth it is does it really save you so much",
    "start": "2773089",
    "end": "2778579"
  },
  {
    "text": "well it adapts over time or it adapts over transactions in this case coca-cola for instance they had a system where for",
    "start": "2778579",
    "end": "2786650"
  },
  {
    "text": "each bottle that they saw through their vending machines they updated the database with the loyalty points that",
    "start": "2786650",
    "end": "2792829"
  },
  {
    "text": "the customer was collecting as a result of buying those bottles right and the lambda function initially sent the",
    "start": "2792829",
    "end": "2799490"
  },
  {
    "text": "update request to the database and then the database kicked off a back-end process to update the loyalty points and",
    "start": "2799490",
    "end": "2806299"
  },
  {
    "text": "a lot of the function waited 90 seconds and then it asked the process okay are",
    "start": "2806299",
    "end": "2811640"
  },
  {
    "text": "we done here with the loyalty thing is everything okay and then it would do its thing and in this case the customer",
    "start": "2811640",
    "end": "2817730"
  },
  {
    "text": "replaced the lambda function with a very simple step functions approach update the points wait 90 seconds inside step",
    "start": "2817730",
    "end": "2825079"
  },
  {
    "text": "functions and then check if everything went through so coca-cola now is saving 90 seconds lambda execution time for",
    "start": "2825079",
    "end": "2832460"
  },
  {
    "text": "every bottle they sell in the vending machines that UPS adds up to quite a lot of savings here so the next thing is I",
    "start": "2832460",
    "end": "2842589"
  },
  {
    "text": "always wanted to have hamsters in my presentations so what does this have to",
    "start": "2842589",
    "end": "2848630"
  },
  {
    "text": "do what what are hamsters really good at well caching right those hamsters they",
    "start": "2848630",
    "end": "2854329"
  },
  {
    "text": "gobble up all that food and they they store the food in those cute little cheeks here so what what should we do",
    "start": "2854329",
    "end": "2861440"
  },
  {
    "text": "well you should be caching like hamsters and Patrick and JC they already used",
    "start": "2861440",
    "end": "2869480"
  },
  {
    "text": "some caching in their architectures and the thing is caching means that you do the expensive",
    "start": "2869480",
    "end": "2875330"
  },
  {
    "text": "stuff only once and then you can reuse it as many times as possible this is a",
    "start": "2875330",
    "end": "2881000"
  },
  {
    "text": "great trick to save money and it also accelerates your architecture a lot and",
    "start": "2881000",
    "end": "2886600"
  },
  {
    "text": "the reason is that memory tends to be a lot cheaper and faster than CPU cycles",
    "start": "2886600",
    "end": "2893560"
  },
  {
    "text": "and you can cache at every level of your application so this is a typical web application you can cache on the edge",
    "start": "2893560",
    "end": "2899930"
  },
  {
    "text": "you can catch on the web tier you can catch on the application tier you can catch on the database tier and you can",
    "start": "2899930",
    "end": "2905810"
  },
  {
    "text": "place caches all over the place and every time you introduce a new cache into a layer you will see more savings",
    "start": "2905810",
    "end": "2912530"
  },
  {
    "text": "and you will see faster execution times because when you cache in in your",
    "start": "2912530",
    "end": "2917540"
  },
  {
    "text": "application whatever is sitting behind the cache can be downsized because if there's less stuff to do as you can",
    "start": "2917540",
    "end": "2924440"
  },
  {
    "text": "cache more and more stuff and the easiest way to introduce caching is by",
    "start": "2924440",
    "end": "2929540"
  },
  {
    "text": "using Amazon CloudFront which is a cache network that sits on the world all over the world and that",
    "start": "2929540",
    "end": "2936410"
  },
  {
    "text": "you can place very easily in front of your application in fact I have a customer who had a problem they had a",
    "start": "2936410",
    "end": "2942350"
  },
  {
    "text": "performance problem with their web application and it was still running on premises right so I had a workshop with",
    "start": "2942350",
    "end": "2948170"
  },
  {
    "text": "them and told them ok why don't you put this into the cloud and yeah but we were worried about downtime ok so use cloud",
    "start": "2948170",
    "end": "2954110"
  },
  {
    "text": "fund and it will cache it'll also gracefully give you the opportunity to move behind the cache and everything so",
    "start": "2954110",
    "end": "2961040"
  },
  {
    "text": "they put cloud phone on top of that and they saved a lot of resources even on premises and that they didn't migrate at",
    "start": "2961040",
    "end": "2968630"
  },
  {
    "text": "all just all of laziness so they they they actually migrated a year later but it bought them a lot of time actually",
    "start": "2968630",
    "end": "2974870"
  },
  {
    "text": "because they were able to manage a lot big higher load with the limited resources they had so you can use cloud",
    "start": "2974870",
    "end": "2981950"
  },
  {
    "text": "run in front of your application very easily and then you can use things like Amazon ElastiCache like Expedia and",
    "start": "2981950",
    "end": "2987830"
  },
  {
    "text": "introduce it into your application it's a very easy to use in memory key value store very high performance and it",
    "start": "2987830",
    "end": "2995570"
  },
  {
    "text": "supports two different engines very simple to use memcache the engine and a more sophisticated Redis engine and it's",
    "start": "2995570",
    "end": "3002680"
  },
  {
    "text": "fully managed so you don't have anything to do you just start the Sukesh service and then you start",
    "start": "3002680",
    "end": "3009530"
  },
  {
    "text": "cashing it's very available highly available and reliable and we work hard",
    "start": "3009530",
    "end": "3014570"
  },
  {
    "text": "to make it very robust so you'll get actually a very robust service out of that and it's very easy to implement if",
    "start": "3014570",
    "end": "3021770"
  },
  {
    "text": "you have a typical application here which is talking to a database you simply put the elastic cache layer in",
    "start": "3021770",
    "end": "3027920"
  },
  {
    "text": "the middle and you modify the application to first ask the cache hey have you seen this request before and",
    "start": "3027920",
    "end": "3033980"
  },
  {
    "text": "the cache can say yes and then you save money and you save time or the care says",
    "start": "3033980",
    "end": "3039050"
  },
  {
    "text": "no I haven't seen that before and then you go to the database and after computing the result of the database you simply store it in the cache so you can",
    "start": "3039050",
    "end": "3045500"
  },
  {
    "text": "reuse it later here's an effect on what you would might see here so this is a customer of mine actually he was on",
    "start": "3045500",
    "end": "3052310"
  },
  {
    "text": "stage last year two presenters and they introduced a caching layer in front of their dynamodb table and they were able",
    "start": "3052310",
    "end": "3059480"
  },
  {
    "text": "to save in the very first attempt 3000 reads per second and then as they aim to",
    "start": "3059480",
    "end": "3065180"
  },
  {
    "text": "introduce this to more and more tables overall they save 20,000 reads per second which allowed them to downsize",
    "start": "3065180",
    "end": "3071390"
  },
  {
    "text": "the table capacity units and save a lot of money here and this customer learned",
    "start": "3071390",
    "end": "3078440"
  },
  {
    "text": "a very powerful lesson you can also cache nothing because at first they",
    "start": "3078440",
    "end": "3085550"
  },
  {
    "text": "didn't realize that they had many requests against a database where the database responded with an empty result",
    "start": "3085550",
    "end": "3091160"
  },
  {
    "text": "set database simply said I don't have an answer for you go away and then they",
    "start": "3091160",
    "end": "3096260"
  },
  {
    "text": "started cashing those negative answers so they cashed all those empty sets the cache even cached errors from the",
    "start": "3096260",
    "end": "3102860"
  },
  {
    "text": "database and that saved them so much because now they went from a hit ratio from 25 to 30 percent to 80 90 to 95",
    "start": "3102860",
    "end": "3111410"
  },
  {
    "text": "percent hit ratio just by caching negative results so think about caching really everything and then they started",
    "start": "3111410",
    "end": "3119330"
  },
  {
    "text": "playing with dynamodb accelerator which is an automatic caching layer that dynamodb has built in since about a year",
    "start": "3119330",
    "end": "3127460"
  },
  {
    "text": "now and this is how the performance looks like without the dynamodb accelerator so you see an average of",
    "start": "3127460",
    "end": "3133430"
  },
  {
    "text": "five milliseconds or six milliseconds response time and consistent performance this is what you",
    "start": "3133430",
    "end": "3139859"
  },
  {
    "text": "get with generally be people love the consistence performance here there's no warming phase we'll get back",
    "start": "3139859",
    "end": "3145319"
  },
  {
    "text": "to that in a minute and you also get detailed metrics per request which is a great feature for debugging and then",
    "start": "3145319",
    "end": "3151979"
  },
  {
    "text": "they switched on the dynamo DB accelerator feature or Dax and the",
    "start": "3151979",
    "end": "3157019"
  },
  {
    "text": "response time went down dramatically to about a tenth now they're seeing 400 to",
    "start": "3157019",
    "end": "3163109"
  },
  {
    "text": "450 microseconds in Dayton see from Dyna will be drastic SLA acceleration here",
    "start": "3163109",
    "end": "3168689"
  },
  {
    "text": "very very consistent performance even the consistency improved a lot here but",
    "start": "3168689",
    "end": "3174269"
  },
  {
    "text": "they need to introduce a warming phase of course right you need to fill up that cache before you can really leverage its",
    "start": "3174269",
    "end": "3180509"
  },
  {
    "text": "performance here and Dax doesn't support detailed metrics on a per request level",
    "start": "3180509",
    "end": "3186479"
  },
  {
    "text": "so in this case do the debugging first and once the application runs nicely",
    "start": "3186479",
    "end": "3191939"
  },
  {
    "text": "then you can switch on the caching feature and then you can start saving money because you can now provision a",
    "start": "3191939",
    "end": "3197699"
  },
  {
    "text": "lot less capacity units and you will have a much faster application overall",
    "start": "3197699",
    "end": "3202759"
  },
  {
    "text": "so finally the last best practice I would like to introduce to you is to",
    "start": "3202759",
    "end": "3207959"
  },
  {
    "text": "avoid unnecessary work and it's good to be lazy here right so what I what do I",
    "start": "3207959",
    "end": "3215549"
  },
  {
    "text": "mean by this well leverage as many existing services as you can avoid reinventing of the",
    "start": "3215549",
    "end": "3221459"
  },
  {
    "text": "wheel which means that if you want to run a database try first to run those",
    "start": "3221459",
    "end": "3226829"
  },
  {
    "text": "databases that Erebus provides is a managed service like RDS dynamo DB",
    "start": "3226829",
    "end": "3231899"
  },
  {
    "text": "redshift and other databases that are already there and they're already",
    "start": "3231899",
    "end": "3237029"
  },
  {
    "text": "managed for you you don't have to invest time and money and effort into managing that stuff same thing goes for stuff",
    "start": "3237029",
    "end": "3243869"
  },
  {
    "text": "like elastic cache same thing our elastic search sorry or messaging using",
    "start": "3243869",
    "end": "3249689"
  },
  {
    "text": "SNS simple notification service or even streaming data services so instead of",
    "start": "3249689",
    "end": "3255509"
  },
  {
    "text": "running a kafka cluster which is quite a lot of work try out if you can get away with kinases first now this looks like a",
    "start": "3255509",
    "end": "3261869"
  },
  {
    "text": "commercial here because I'm mentioning all of these AWS services here but the",
    "start": "3261869",
    "end": "3266999"
  },
  {
    "text": "truth is our job is to take away the undifferentiated heavy lifting you're not gonna compete",
    "start": "3266999",
    "end": "3273369"
  },
  {
    "text": "against your competitor on how well you can manage the database or how well you",
    "start": "3273369",
    "end": "3278890"
  },
  {
    "text": "can manage a streaming service you're gonna compete about the service that you're implementing on top of that and",
    "start": "3278890",
    "end": "3284259"
  },
  {
    "text": "then you can take the advantage of some letting somebody else run it for you in an automated way many more services you",
    "start": "3284259",
    "end": "3293019"
  },
  {
    "text": "can try out here here's an example the same customer that introduced X before they used Amazon Elastic MapReduce to",
    "start": "3293019",
    "end": "3300420"
  },
  {
    "text": "analyze their log files and so they tried out using Amazon Athena instead which is a service that allows you to",
    "start": "3300420",
    "end": "3306579"
  },
  {
    "text": "run SQL queries directly on your s3 data and the result was that the cost went",
    "start": "3306579",
    "end": "3312519"
  },
  {
    "text": "down by 50% just by replacing elastic MapReduce clusters with Amazon Athena",
    "start": "3312519",
    "end": "3318069"
  },
  {
    "text": "and the reason is that if you're running a Hadoop cluster you have to wait until it's started up and it's running and",
    "start": "3318069",
    "end": "3325180"
  },
  {
    "text": "then you start crunching and you get rid of that start time by using the Athena service so the startup phase was the",
    "start": "3325180",
    "end": "3332529"
  },
  {
    "text": "real money sink here and they were able to get rid of it using a female and also",
    "start": "3332529",
    "end": "3338470"
  },
  {
    "text": "the architecture now is a lot more simple and easier to administrate because there's less operations overhead",
    "start": "3338470",
    "end": "3344400"
  },
  {
    "text": "so the other takeaway here is instead of putting everything into a single database that does everything you can",
    "start": "3344400",
    "end": "3351339"
  },
  {
    "text": "now take advantage of different databases because they're also easy to administer don't have to do any",
    "start": "3351339",
    "end": "3356619"
  },
  {
    "text": "administration here so try to split up those use cases among different databases so you can leverage the good",
    "start": "3356619",
    "end": "3363309"
  },
  {
    "text": "bits of each individual data you can leverage all of the strengths of the individual databases you don't have to",
    "start": "3363309",
    "end": "3368319"
  },
  {
    "text": "compromise by putting everything into the same database so you can for instance split up your application into",
    "start": "3368319",
    "end": "3373720"
  },
  {
    "text": "pieces that use NoSQL database and then you can implement that on the animal EP or you can split up the other pieces",
    "start": "3373720",
    "end": "3379390"
  },
  {
    "text": "that want SQL and then you can differentiate between an OLTP system like Amazon Arora",
    "start": "3379390",
    "end": "3384700"
  },
  {
    "text": "or a data warehousing system like Amazon redshift here and that means try to pick",
    "start": "3384700",
    "end": "3392890"
  },
  {
    "text": "the right tool for the job you should be using something like dynamo DB or Cassandra or for key values",
    "start": "3392890",
    "end": "3399309"
  },
  {
    "text": "databases and then you can use a dedicated database for SQL",
    "start": "3399309",
    "end": "3404700"
  },
  {
    "text": "Aurora for online transaction processing or redshift or something like",
    "start": "3404700",
    "end": "3410380"
  },
  {
    "text": "ElastiCache so time to summarize now let's put it all together easiest way is",
    "start": "3410380",
    "end": "3417999"
  },
  {
    "text": "turn off those unused instances make sure you automate as much as possible and the simplest way to automate is by",
    "start": "3417999",
    "end": "3424989"
  },
  {
    "text": "introducing auto scaling into your architecture use spot instances very",
    "start": "3424989",
    "end": "3430779"
  },
  {
    "text": "easy to administer now automatically supported by auto scaling consolidate",
    "start": "3430779",
    "end": "3437229"
  },
  {
    "text": "with containers and when you use serverless lambda try to avoid those",
    "start": "3437229",
    "end": "3444069"
  },
  {
    "text": "wait times that can be introduced by synchronous calls try to go as asynchronous as possible and you can use",
    "start": "3444069",
    "end": "3451599"
  },
  {
    "text": "step functions to do that cache everything you should be becoming little",
    "start": "3451599",
    "end": "3458019"
  },
  {
    "text": "hamsters that are caching all of the results and then avoid all the unnecessary work of recomputing those",
    "start": "3458019",
    "end": "3463390"
  },
  {
    "text": "queries and then avoid be lazy and avoid reinventing wheels and administering",
    "start": "3463390",
    "end": "3468700"
  },
  {
    "text": "everything on your own and leverage those manage services so with that I'm",
    "start": "3468700",
    "end": "3475079"
  },
  {
    "text": "looking forward to next year and seeing you all here again think about the",
    "start": "3475079",
    "end": "3480479"
  },
  {
    "text": "optimization process you can check out a double trusted advisor to get some ideas",
    "start": "3480479",
    "end": "3486700"
  },
  {
    "text": "on where you can save money because stresses advisor it will to take a look at your architecture and highlight those",
    "start": "3486700",
    "end": "3491799"
  },
  {
    "text": "unused instances you can also check out the well architected program there is a whole pillar in well architected with",
    "start": "3491799",
    "end": "3498369"
  },
  {
    "text": "its own white paper for cost optimization and if that isn't enough here are the YouTube videos from",
    "start": "3498369",
    "end": "3504940"
  },
  {
    "text": "previous talks at reinvent from the previous years where Marcus and others are sitting together with me sharing",
    "start": "3504940",
    "end": "3511539"
  },
  {
    "text": "other tips and more ways of saving cost I'm not gonna highlight those repeats",
    "start": "3511539",
    "end": "3516880"
  },
  {
    "text": "because we went through them already but there are some other sessions you can see that are related to even more",
    "start": "3516880",
    "end": "3522489"
  },
  {
    "text": "aspects of cost optimization there's another one tomorrow on cost optimization tooling so with that thank",
    "start": "3522489",
    "end": "3529119"
  },
  {
    "text": "you very much for coming and I hope you save a lot of money [Applause]",
    "start": "3529119",
    "end": "3536929"
  }
]