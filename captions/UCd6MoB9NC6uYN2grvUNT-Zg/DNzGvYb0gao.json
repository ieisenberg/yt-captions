[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "Welcome to 'Back to Basics', \nI'm Adrian De Luca.",
    "start": "6058",
    "end": "8593"
  },
  {
    "text": "Today, we're\ngoing to look at",
    "start": "8593",
    "end": "9981"
  },
  {
    "text": "monitoring and observability of\nyour serverless applications.",
    "start": "9981",
    "end": "13621"
  },
  {
    "text": "Think of monitoring as doing a basic\nhealth check with your doctor.",
    "start": "13621",
    "end": "18312"
  },
  {
    "text": "For your applications\nwe look at things like",
    "start": "18312",
    "end": "20879"
  },
  {
    "text": "if your infrastructure\nis up or down,",
    "start": "20879",
    "end": "22822"
  },
  {
    "text": "or whether your software modules\nare working to expectations.",
    "start": "22822",
    "end": "26369"
  },
  {
    "text": "Observability is\na little bit different.",
    "start": "26369",
    "end": "29168"
  },
  {
    "start": "27000",
    "end": "64000"
  },
  {
    "text": "It's more like doing a\nfitness test with your coach.",
    "start": "29169",
    "end": "32006"
  },
  {
    "text": "Are thing working well together\nto complete a user task?",
    "start": "32006",
    "end": "35028"
  },
  {
    "text": "Well, CloudWatch,\nis the perfect service for this.",
    "start": "35028",
    "end": "39077"
  },
  {
    "text": "It collects, monitors, \nanalyzes, and acts on",
    "start": "39077",
    "end": "43582"
  },
  {
    "text": "all the things going on\nin your system.",
    "start": "43582",
    "end": "46321"
  },
  {
    "text": "So, let's get into it.",
    "start": "46321",
    "end": "47892"
  },
  {
    "text": "Here's a typical\nserverless application",
    "start": "47893",
    "end": "50903"
  },
  {
    "text": "that processes events which\n trigger other AWS services.",
    "start": "50903",
    "end": "54864"
  },
  {
    "text": "Treated as an\nautomic operation,",
    "start": "54864",
    "end": "57696"
  },
  {
    "text": "it's important to trace\nwhat's happening in between,",
    "start": "57696",
    "end": "60618"
  },
  {
    "text": "and identify any problems,\nand why they occur. ",
    "start": "60618",
    "end": "63483"
  },
  {
    "text": "The five things that you'll\nwant to look out for are: ",
    "start": "63483",
    "end": "66682"
  },
  {
    "text": "concurrency limits, errors,\ndead letter queue failures,",
    "start": "66682",
    "end": "71164"
  },
  {
    "text": "destination delivery failures,\nand the age of stream messages.",
    "start": "71164",
    "end": "75858"
  },
  {
    "text": "AWS Lambda makes it really\neasy to meet performance spikes",
    "start": "75858",
    "end": "79927"
  },
  {
    "text": "without any\ncapacity planning.",
    "start": "79927",
    "end": "81458"
  },
  {
    "text": "But you still want to understand \njust how many invocations are going on.",
    "start": "81458",
    "end": "86038"
  },
  {
    "start": "86000",
    "end": "138000"
  },
  {
    "text": "Each AWS account\nhas an account limit",
    "start": "86631",
    "end": "89071"
  },
  {
    "text": "set to default to\n1000 per region.",
    "start": "89071",
    "end": "91677"
  },
  {
    "text": "So, we actually \nwant to understand",
    "start": "91677",
    "end": "92745"
  },
  {
    "text": "how much of this we're\nactually consuming.",
    "start": "92745",
    "end": "94635"
  },
  {
    "text": "We measure this with the\nconcurrent executions metric.",
    "start": "94635",
    "end": "97996"
  },
  {
    "text": "Think about this\nas the unit of scale.",
    "start": "97996",
    "end": "100510"
  },
  {
    "text": "Setting an alert\nat around 80%",
    "start": "100510",
    "end": "103251"
  },
  {
    "text": "is a good way to see when and how often\nyou're getting close to maxing them out.",
    "start": "103251",
    "end": "107970"
  },
  {
    "text": "Depending on your application\nresponse time needs,",
    "start": "107970",
    "end": "111037"
  },
  {
    "text": "you may consider \nthe throttles metric",
    "start": "111037",
    "end": "113253"
  },
  {
    "text": "if you're not using\nreserve concurrency limits.",
    "start": "113253",
    "end": "116348"
  },
  {
    "text": "You need to be\ncareful with this,",
    "start": "116348",
    "end": "118073"
  },
  {
    "text": "as it can provide\nfalse positives as well.",
    "start": "118073",
    "end": "120335"
  },
  {
    "text": "Next, let's look\nat error alerts.",
    "start": "120350",
    "end": "123534"
  },
  {
    "text": "If your Lambda functions\nare throwing too many errors",
    "start": "123535",
    "end": "127259"
  },
  {
    "text": "this can cause a real\ndegredation in user experience,",
    "start": "127259",
    "end": "130440"
  },
  {
    "text": "and make the users\npretty cross too.",
    "start": "130440",
    "end": "133256"
  },
  {
    "text": "Understanding the rate at which these\nerrors are happening is really important. ",
    "start": "133256",
    "end": "137760"
  },
  {
    "start": "138000",
    "end": "180000"
  },
  {
    "text": "Here's the math that CloudWatch\nuses to work out error rates.",
    "start": "138994",
    "end": "143059"
  },
  {
    "text": "Align the alert threshold to\nyour Service Level Agreement.",
    "start": "143059",
    "end": "146853"
  },
  {
    "text": "For example, if your SLA states that\n99% of functions should succeed,",
    "start": "146853",
    "end": "152694"
  },
  {
    "text": "then set the\nerror rate alert to 1%.",
    "start": "152695",
    "end": "156637"
  },
  {
    "text": "Several AWS services, \nlike SNS and S3,",
    "start": "157346",
    "end": "160752"
  },
  {
    "text": "process their events\nasynchronously.",
    "start": "160753",
    "end": "163278"
  },
  {
    "text": "Lambda places the events\nin a dead letter queue, ",
    "start": "163278",
    "end": "166295"
  },
  {
    "text": "and a separate process\nactually reads them off",
    "start": "166295",
    "end": "168903"
  },
  {
    "text": "before sending them\nto your function. ",
    "start": "168903",
    "end": "170731"
  },
  {
    "text": "It tries running it\nthree times",
    "start": "170731",
    "end": "173053"
  },
  {
    "text": "with one minute waits\non the first two attempts,",
    "start": "173053",
    "end": "175881"
  },
  {
    "text": "then three on\nthe third attempt,",
    "start": "175881",
    "end": "178111"
  },
  {
    "text": "before returning\nan error.",
    "start": "178111",
    "end": "179540"
  },
  {
    "text": "Functions can have\npermission errors,",
    "start": "179540",
    "end": "182058"
  },
  {
    "start": "180000",
    "end": "231000"
  },
  {
    "text": "misconfigured resources, \nor hit size limits.",
    "start": "182058",
    "end": "185056"
  },
  {
    "text": "So, watching out for these\nis really important.",
    "start": "185056",
    "end": "187522"
  },
  {
    "text": "Setting up a\ndead letter error metric",
    "start": "187522",
    "end": "189687"
  },
  {
    "text": "allows you to track\nhow many times this happens.",
    "start": "189687",
    "end": "192726"
  },
  {
    "text": "Similar to\ndead letter queues, ",
    "start": "192726",
    "end": "194760"
  },
  {
    "text": "functions can send\nan event to a destination.",
    "start": "194760",
    "end": "197760"
  },
  {
    "text": "These could be\nan SQSQ, an SNS topic,",
    "start": "197760",
    "end": "202478"
  },
  {
    "text": "a Lambda function,\nor an event bus.",
    "start": "202478",
    "end": "204812"
  },
  {
    "text": "These can all fail,\nso setting up an alert",
    "start": "204812",
    "end": "208127"
  },
  {
    "text": "against a destination delivery\nfailure metric is a good idea.",
    "start": "208127",
    "end": "212102"
  },
  {
    "text": "Finally, you want to look at\nthe age of the messages.",
    "start": "212102",
    "end": "215382"
  },
  {
    "text": "For event source mappings\nthat read from services like",
    "start": "215382",
    "end": "219416"
  },
  {
    "text": "Kinesis, Managed Kafka,\nor DynamoDB,",
    "start": "219416",
    "end": "222199"
  },
  {
    "text": "you want to understand\nthe age of the record",
    "start": "222199",
    "end": "225371"
  },
  {
    "text": "to help you understand\nwhether there is some",
    "start": "225371",
    "end": "227214"
  },
  {
    "text": "performance or efficiency\nproblems in your functions.",
    "start": "227214",
    "end": "230110"
  },
  {
    "text": "The iterator age metric\nhelps us understand",
    "start": "230110",
    "end": "233734"
  },
  {
    "start": "231000",
    "end": "272000"
  },
  {
    "text": "the age of the messages\nthat they receive.",
    "start": "233734",
    "end": "235946"
  },
  {
    "text": "When this metric\nstarts to creep up,",
    "start": "236618",
    "end": "238724"
  },
  {
    "text": "it's an indicator that the\nfunction is not keeping pace",
    "start": "238725",
    "end": "241420"
  },
  {
    "text": "with the rate of\nnew messages,",
    "start": "241420",
    "end": "242979"
  },
  {
    "text": "and is\nfalling behind.",
    "start": "242979",
    "end": "244812"
  },
  {
    "text": "At worst, you can\nexperience data loss,",
    "start": "244812",
    "end": "247594"
  },
  {
    "text": "since the data in the streams are\nonly kept for 24 hours by default.",
    "start": "247594",
    "end": "252036"
  },
  {
    "text": "So, set up an alert\nfor iterator age",
    "start": "252037",
    "end": "254517"
  },
  {
    "text": "to detect and rectify\nbefore a disaster.",
    "start": "254517",
    "end": "257053"
  },
  {
    "text": "I've personally used these\npatterns more than once.",
    "start": "257053",
    "end": "259845"
  },
  {
    "text": "Now you can\nuse them too.",
    "start": "259845",
    "end": "261254"
  },
  {
    "text": "Check out the links below\nfor more resources.",
    "start": "261254",
    "end": "264126"
  },
  {
    "text": "Thanks for joining us,\nsee you next time. ",
    "start": "264127",
    "end": "266100"
  }
]