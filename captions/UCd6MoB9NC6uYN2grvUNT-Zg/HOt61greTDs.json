[
  {
    "text": "hi everyone my name is Smitha and I'm a",
    "start": "599",
    "end": "3399"
  },
  {
    "text": "Solutions architect working for Amazon",
    "start": "3399",
    "end": "5359"
  },
  {
    "text": "web services and today I'm going to show",
    "start": "5359",
    "end": "8080"
  },
  {
    "text": "you how you can get important business",
    "start": "8080",
    "end": "10120"
  },
  {
    "text": "insights directly from your database",
    "start": "10120",
    "end": "12360"
  },
  {
    "text": "using gen without even writing a single",
    "start": "12360",
    "end": "15200"
  },
  {
    "text": "line of code or any query statements so",
    "start": "15200",
    "end": "18720"
  },
  {
    "text": "modern businesses use data they use data",
    "start": "18720",
    "end": "21680"
  },
  {
    "text": "for a lot of things they use data to",
    "start": "21680",
    "end": "24000"
  },
  {
    "text": "find out whether certain marketing",
    "start": "24000",
    "end": "26000"
  },
  {
    "text": "campaigns were useful whether certain",
    "start": "26000",
    "end": "28480"
  },
  {
    "text": "products or services are profitable or",
    "start": "28480",
    "end": "31599"
  },
  {
    "text": "to even find out what are their great",
    "start": "31599",
    "end": "34000"
  },
  {
    "text": "greatest",
    "start": "34000",
    "end": "35239"
  },
  {
    "text": "expenses these key metrics often Health",
    "start": "35239",
    "end": "38239"
  },
  {
    "text": "businesses make informed decision about",
    "start": "38239",
    "end": "40320"
  },
  {
    "text": "a lot of use cases like venue",
    "start": "40320",
    "end": "43640"
  },
  {
    "text": "Generation Um limiting their losses and",
    "start": "43640",
    "end": "46520"
  },
  {
    "text": "things like that but most of the times",
    "start": "46520",
    "end": "49320"
  },
  {
    "text": "the data is stored in databases and",
    "start": "49320",
    "end": "52039"
  },
  {
    "text": "quering a structured database like my",
    "start": "52039",
    "end": "54280"
  },
  {
    "text": "SQL or postgress can be hard for",
    "start": "54280",
    "end": "56559"
  },
  {
    "text": "business users there are Tech teams",
    "start": "56559",
    "end": "59519"
  },
  {
    "text": "which the these businesses use business",
    "start": "59519",
    "end": "61440"
  },
  {
    "text": "users can reach out to but again this",
    "start": "61440",
    "end": "64239"
  },
  {
    "text": "effort could take days or even weeks",
    "start": "64239",
    "end": "66360"
  },
  {
    "text": "before business users could use and see",
    "start": "66360",
    "end": "68560"
  },
  {
    "text": "the desired",
    "start": "68560",
    "end": "70280"
  },
  {
    "text": "results imagine a scenario where you",
    "start": "70280",
    "end": "72520"
  },
  {
    "text": "could simply ask a software something",
    "start": "72520",
    "end": "74400"
  },
  {
    "text": "like what was my total orders in last",
    "start": "74400",
    "end": "76759"
  },
  {
    "text": "two weeks in natural language and the",
    "start": "76759",
    "end": "79960"
  },
  {
    "text": "software just replies you back with the",
    "start": "79960",
    "end": "82720"
  },
  {
    "text": "results with the powers of gen models",
    "start": "82720",
    "end": "86119"
  },
  {
    "text": "this is doable and AWS has created many",
    "start": "86119",
    "end": "89520"
  },
  {
    "text": "samp demos for our customers to get",
    "start": "89520",
    "end": "92320"
  },
  {
    "text": "started with their proof of concept very",
    "start": "92320",
    "end": "94759"
  },
  {
    "text": "quickly the idea is that you don't have",
    "start": "94759",
    "end": "97360"
  },
  {
    "text": "to create everything from scratch and",
    "start": "97360",
    "end": "99479"
  },
  {
    "text": "you can leverage the solutions and",
    "start": "99479",
    "end": "101439"
  },
  {
    "text": "customize along the way and one such",
    "start": "101439",
    "end": "104479"
  },
  {
    "text": "solution is",
    "start": "104479",
    "end": "106439"
  },
  {
    "text": "this which help you solve the problem we",
    "start": "106439",
    "end": "109479"
  },
  {
    "text": "just",
    "start": "109479",
    "end": "110280"
  },
  {
    "text": "discussed so without further Ado let's",
    "start": "110280",
    "end": "113280"
  },
  {
    "text": "understand the",
    "start": "113280",
    "end": "115560"
  },
  {
    "text": "solution the solution covers these three",
    "start": "117000",
    "end": "119680"
  },
  {
    "text": "dat",
    "start": "119680",
    "end": "120399"
  },
  {
    "text": "databases Amazon RDS for postgress",
    "start": "120399",
    "end": "123640"
  },
  {
    "text": "Amazon Neptune and Amazon Athena which",
    "start": "123640",
    "end": "126840"
  },
  {
    "text": "is used for quering S3",
    "start": "126840",
    "end": "129679"
  },
  {
    "text": "buckets it also provides or sets up the",
    "start": "129679",
    "end": "132920"
  },
  {
    "text": "respective database pre-populated with",
    "start": "132920",
    "end": "135360"
  },
  {
    "text": "data as part of the stack",
    "start": "135360",
    "end": "137519"
  },
  {
    "text": "deployment I have also linked the schema",
    "start": "137519",
    "end": "139840"
  },
  {
    "text": "of these databases which is um which are",
    "start": "139840",
    "end": "142800"
  },
  {
    "text": "publicly available so that you can have",
    "start": "142800",
    "end": "144920"
  },
  {
    "text": "a look",
    "start": "144920",
    "end": "146319"
  },
  {
    "text": "yourself so Amazon RDS for postris a SQL",
    "start": "146319",
    "end": "150239"
  },
  {
    "text": "based database pre-populated with um DVD",
    "start": "150239",
    "end": "153239"
  },
  {
    "text": "rental sample data set Amazon Neptune",
    "start": "153239",
    "end": "156680"
  },
  {
    "text": "which is a graph database and it's",
    "start": "156680",
    "end": "158239"
  },
  {
    "text": "prepopulated with IMDb sample data set",
    "start": "158239",
    "end": "162159"
  },
  {
    "text": "Amazon Athena which is civils structured",
    "start": "162159",
    "end": "164519"
  },
  {
    "text": "data analytics prepopulated by supply",
    "start": "164519",
    "end": "167200"
  },
  {
    "text": "chain oriented business decision",
    "start": "167200",
    "end": "169760"
  },
  {
    "text": "benchmarking data set both RDS and",
    "start": "169760",
    "end": "173319"
  },
  {
    "text": "Athena uses um use SQL query but",
    "start": "173319",
    "end": "177400"
  },
  {
    "text": "Neptune's query language is either",
    "start": "177400",
    "end": "179280"
  },
  {
    "text": "grimlet or open Cipher and this solution",
    "start": "179280",
    "end": "182599"
  },
  {
    "text": "uses open",
    "start": "182599",
    "end": "185720"
  },
  {
    "text": "Cipher so let's understand the",
    "start": "186799",
    "end": "190840"
  },
  {
    "text": "architecture um this sample uses AWS app",
    "start": "191159",
    "end": "194319"
  },
  {
    "text": "runner for the hosting of the web",
    "start": "194319",
    "end": "196480"
  },
  {
    "text": "app AWS app Runner is a service that",
    "start": "196480",
    "end": "199879"
  },
  {
    "text": "provides customers with a fast simple",
    "start": "199879",
    "end": "202760"
  },
  {
    "text": "and secure way to deploy applications on",
    "start": "202760",
    "end": "205720"
  },
  {
    "text": "AWS without managing any",
    "start": "205720",
    "end": "208680"
  },
  {
    "text": "infrastructure customers simply provide",
    "start": "208680",
    "end": "210840"
  },
  {
    "text": "their source code or container image and",
    "start": "210840",
    "end": "213879"
  },
  {
    "text": "app Runner will automatically build and",
    "start": "213879",
    "end": "216040"
  },
  {
    "text": "deploy the application load balance",
    "start": "216040",
    "end": "218640"
  },
  {
    "text": "Network traffic automatically scale up",
    "start": "218640",
    "end": "221640"
  },
  {
    "text": "or down based on demand monitor health",
    "start": "221640",
    "end": "224640"
  },
  {
    "text": "of the application and it handles",
    "start": "224640",
    "end": "227599"
  },
  {
    "text": "encryption as",
    "start": "227599",
    "end": "229159"
  },
  {
    "text": "well so the entire web app is running in",
    "start": "229159",
    "end": "231840"
  },
  {
    "text": "a runner and app Runner is also acting",
    "start": "231840",
    "end": "234519"
  },
  {
    "text": "as an orchestrator",
    "start": "234519",
    "end": "236920"
  },
  {
    "text": "here so the schemas of the these",
    "start": "236920",
    "end": "240480"
  },
  {
    "text": "databases is actually very very",
    "start": "240480",
    "end": "243040"
  },
  {
    "text": "important and we are saving each",
    "start": "243040",
    "end": "245040"
  },
  {
    "text": "database schema and its metadata in dyb",
    "start": "245040",
    "end": "248519"
  },
  {
    "text": "table which is",
    "start": "248519",
    "end": "250840"
  },
  {
    "text": "here so basically when we get a request",
    "start": "250840",
    "end": "253560"
  },
  {
    "text": "in natural",
    "start": "253560",
    "end": "255120"
  },
  {
    "text": "language the application retrieves the",
    "start": "255120",
    "end": "258040"
  },
  {
    "text": "database schema from Dynamo",
    "start": "258040",
    "end": "261199"
  },
  {
    "text": "DB and then the app creates a prompt",
    "start": "261199",
    "end": "264199"
  },
  {
    "text": "which has the database schema and users",
    "start": "264199",
    "end": "267160"
  },
  {
    "text": "question at the end and it sens a prompt",
    "start": "267160",
    "end": "270240"
  },
  {
    "text": "to cloud model from anthropic available",
    "start": "270240",
    "end": "272919"
  },
  {
    "text": "in Amazon",
    "start": "272919",
    "end": "275600"
  },
  {
    "text": "bedrock and Cloud Model then provides",
    "start": "276639",
    "end": "279840"
  },
  {
    "text": "the database",
    "start": "279840",
    "end": "281080"
  },
  {
    "text": "query in return which will be run",
    "start": "281080",
    "end": "283840"
  },
  {
    "text": "against the",
    "start": "283840",
    "end": "285320"
  },
  {
    "text": "database I'll also show you how um The",
    "start": "285320",
    "end": "288240"
  },
  {
    "text": "Prompt looks like in a minute as",
    "start": "288240",
    "end": "291039"
  },
  {
    "text": "well and these modern generative AI",
    "start": "291039",
    "end": "293680"
  },
  {
    "text": "models like Claude they are very capable",
    "start": "293680",
    "end": "296560"
  },
  {
    "text": "of reasoning and generating both natural",
    "start": "296560",
    "end": "298919"
  },
  {
    "text": "language which is",
    "start": "298919",
    "end": "301160"
  },
  {
    "text": "English and computer programming",
    "start": "301160",
    "end": "303440"
  },
  {
    "text": "language like SQL graphql Gremlin Cipher",
    "start": "303440",
    "end": "307360"
  },
  {
    "text": "does making our task",
    "start": "307360",
    "end": "310638"
  },
  {
    "text": "easier Cloud Model creates a query and",
    "start": "311880",
    "end": "314759"
  },
  {
    "text": "gives",
    "start": "314759",
    "end": "315639"
  },
  {
    "text": "back and the application then execute",
    "start": "315639",
    "end": "318240"
  },
  {
    "text": "the query against the database in",
    "start": "318240",
    "end": "320080"
  },
  {
    "text": "question and gets the result quite",
    "start": "320080",
    "end": "322680"
  },
  {
    "text": "straightforward right but then there can",
    "start": "322680",
    "end": "324960"
  },
  {
    "text": "be many enhancements you can do with",
    "start": "324960",
    "end": "327160"
  },
  {
    "text": "this an enhancement of this can be um",
    "start": "327160",
    "end": "330680"
  },
  {
    "text": "you can actually pass the results that",
    "start": "330680",
    "end": "333319"
  },
  {
    "text": "it is fetching from the database to gen",
    "start": "333319",
    "end": "336080"
  },
  {
    "text": "model again to reply the user in natural",
    "start": "336080",
    "end": "339000"
  },
  {
    "text": "language as",
    "start": "339000",
    "end": "340520"
  },
  {
    "text": "well another enhancement can be um you",
    "start": "340520",
    "end": "343400"
  },
  {
    "text": "can add more databases like red shift or",
    "start": "343400",
    "end": "345680"
  },
  {
    "text": "a third party data store like snow",
    "start": "345680",
    "end": "348440"
  },
  {
    "text": "snowflake mainly which can which",
    "start": "348440",
    "end": "350600"
  },
  {
    "text": "actually use Query",
    "start": "350600",
    "end": "354479"
  },
  {
    "text": "language and another um evolution of",
    "start": "354479",
    "end": "357479"
  },
  {
    "text": "this could be you know make this a chat",
    "start": "357479",
    "end": "359639"
  },
  {
    "text": "board which has a chat",
    "start": "359639",
    "end": "362759"
  },
  {
    "text": "history now again uh we are saving the",
    "start": "362800",
    "end": "366560"
  },
  {
    "text": "schema in the Dynamo DB table but then",
    "start": "366560",
    "end": "369560"
  },
  {
    "text": "you can also use our service AWS glue to",
    "start": "369560",
    "end": "373639"
  },
  {
    "text": "dynamically scrape the schema and um",
    "start": "373639",
    "end": "376759"
  },
  {
    "text": "place it in a Dynamo DB table so in that",
    "start": "376759",
    "end": "379720"
  },
  {
    "text": "case you don't have to statically save",
    "start": "379720",
    "end": "381400"
  },
  {
    "text": "the schema in Dynamo",
    "start": "381400",
    "end": "384400"
  },
  {
    "text": "DB so here are some of the examples of",
    "start": "387280",
    "end": "390319"
  },
  {
    "text": "how you can query the database in this",
    "start": "390319",
    "end": "393199"
  },
  {
    "text": "case the RDS database which is this um",
    "start": "393199",
    "end": "396080"
  },
  {
    "text": "which is the DVD rental database so you",
    "start": "396080",
    "end": "398880"
  },
  {
    "text": "can ask things like what are my top five",
    "start": "398880",
    "end": "401639"
  },
  {
    "text": "bestselling movies in terms of Revenue",
    "start": "401639",
    "end": "404240"
  },
  {
    "text": "you can also ask um who are my top 10",
    "start": "404240",
    "end": "406800"
  },
  {
    "text": "VIP customers giving us highest revenue",
    "start": "406800",
    "end": "409599"
  },
  {
    "text": "and things like",
    "start": "409599",
    "end": "412360"
  },
  {
    "text": "that so with that let's start with the",
    "start": "412360",
    "end": "415240"
  },
  {
    "text": "demo of the",
    "start": "415240",
    "end": "417800"
  },
  {
    "text": "solution okay so before starting the",
    "start": "417879",
    "end": "420960"
  },
  {
    "text": "demo um here is the GitHub uh samples",
    "start": "420960",
    "end": "424440"
  },
  {
    "text": "repo so uh it's actually present under",
    "start": "424440",
    "end": "427520"
  },
  {
    "text": "our AWS samples repository and this is",
    "start": "427520",
    "end": "431639"
  },
  {
    "text": "actually very well documented if you",
    "start": "431639",
    "end": "433639"
  },
  {
    "text": "want to scroll down and have a look this",
    "start": "433639",
    "end": "435120"
  },
  {
    "text": "is the architecture diagram that I just",
    "start": "435120",
    "end": "437360"
  },
  {
    "text": "explained and then this is oneclick",
    "start": "437360",
    "end": "439800"
  },
  {
    "text": "deployment option as well so if you want",
    "start": "439800",
    "end": "441800"
  },
  {
    "text": "to deploy that indirectly in your",
    "start": "441800",
    "end": "443479"
  },
  {
    "text": "account you can just um launch stack",
    "start": "443479",
    "end": "446000"
  },
  {
    "text": "from here and it uses um AWS CD gate to",
    "start": "446000",
    "end": "450319"
  },
  {
    "text": "um to configure the entire",
    "start": "450319",
    "end": "453240"
  },
  {
    "text": "infrastructure there are some",
    "start": "453240",
    "end": "454639"
  },
  {
    "text": "instructions about if you want to",
    "start": "454639",
    "end": "456120"
  },
  {
    "text": "customize this tag as well and these are",
    "start": "456120",
    "end": "459080"
  },
  {
    "text": "some sample questions um basically the",
    "start": "459080",
    "end": "461840"
  },
  {
    "text": "questions that you just to give you an",
    "start": "461840",
    "end": "464039"
  },
  {
    "text": "idea about how you can um ask the",
    "start": "464039",
    "end": "466960"
  },
  {
    "text": "questions to these",
    "start": "466960",
    "end": "469400"
  },
  {
    "text": "databases um just one note of caution",
    "start": "469400",
    "end": "472520"
  },
  {
    "text": "that once you are done with",
    "start": "472520",
    "end": "474599"
  },
  {
    "text": "experimenting and once you are done with",
    "start": "474599",
    "end": "476440"
  },
  {
    "text": "your proof of concept um please feel",
    "start": "476440",
    "end": "479400"
  },
  {
    "text": "free to do the cleanup to avoid um you",
    "start": "479400",
    "end": "481960"
  },
  {
    "text": "getting",
    "start": "481960",
    "end": "483080"
  },
  {
    "text": "charged okay right so I have deployed",
    "start": "483080",
    "end": "485840"
  },
  {
    "text": "that in my account and",
    "start": "485840",
    "end": "489080"
  },
  {
    "text": "um um and once you deploy that um this",
    "start": "489080",
    "end": "494440"
  },
  {
    "text": "is",
    "start": "494440",
    "end": "495680"
  },
  {
    "text": "how um the AWS app rner app would look",
    "start": "495680",
    "end": "499000"
  },
  {
    "text": "like so here if you click on what can I",
    "start": "499000",
    "end": "502319"
  },
  {
    "text": "ask it also gives you the similar",
    "start": "502319",
    "end": "505159"
  },
  {
    "text": "questions um in in all the three",
    "start": "505159",
    "end": "508680"
  },
  {
    "text": "databases",
    "start": "508680",
    "end": "510479"
  },
  {
    "text": "now um I want to show you something in",
    "start": "510479",
    "end": "512800"
  },
  {
    "text": "the AWS console as well before running",
    "start": "512800",
    "end": "515440"
  },
  {
    "text": "this so um if you go to your",
    "start": "515440",
    "end": "519560"
  },
  {
    "text": "um your Dynamo DB table here you can see",
    "start": "519560",
    "end": "524080"
  },
  {
    "text": "that um all the three database schema",
    "start": "524080",
    "end": "527760"
  },
  {
    "text": "are actually added in the Dynamo DB",
    "start": "527760",
    "end": "529800"
  },
  {
    "text": "table so if you click on that the first",
    "start": "529800",
    "end": "533279"
  },
  {
    "text": "one and I'll just go to the Json view",
    "start": "533279",
    "end": "535720"
  },
  {
    "text": "just to make it more uh readable you can",
    "start": "535720",
    "end": "538399"
  },
  {
    "text": "see that the entire ire database schema",
    "start": "538399",
    "end": "540360"
  },
  {
    "text": "of this IMDb um graph database is added",
    "start": "540360",
    "end": "545519"
  },
  {
    "text": "here and so is for um other databases",
    "start": "545519",
    "end": "550040"
  },
  {
    "text": "like uh postest SQL and this is for",
    "start": "550040",
    "end": "552680"
  },
  {
    "text": "Athena so you can have a look as well",
    "start": "552680",
    "end": "555839"
  },
  {
    "text": "now uh before starting the demo I also",
    "start": "555839",
    "end": "557839"
  },
  {
    "text": "want to show you um",
    "start": "557839",
    "end": "560959"
  },
  {
    "text": "that Amazon Bedrock by default logging",
    "start": "560959",
    "end": "563800"
  },
  {
    "text": "is not enabled so it it's it's a very",
    "start": "563800",
    "end": "566519"
  },
  {
    "text": "good thing to start logging and to see",
    "start": "566519",
    "end": "568839"
  },
  {
    "text": "how model invocations look like what",
    "start": "568839",
    "end": "571079"
  },
  {
    "text": "what is the prompt that is going to",
    "start": "571079",
    "end": "572480"
  },
  {
    "text": "Amazon Bedrock to understand the flow so",
    "start": "572480",
    "end": "576160"
  },
  {
    "text": "um if you want to enable loging you have",
    "start": "576160",
    "end": "577680"
  },
  {
    "text": "to go to Amazon",
    "start": "577680",
    "end": "580000"
  },
  {
    "text": "bedrock and um click on the",
    "start": "580000",
    "end": "585399"
  },
  {
    "text": "settings yeah on the just click on this",
    "start": "585399",
    "end": "587839"
  },
  {
    "text": "hamburger and then click on the settings",
    "start": "587839",
    "end": "590399"
  },
  {
    "text": "here and then here you have to enable uh",
    "start": "590399",
    "end": "594720"
  },
  {
    "text": "model invocation logging so once you",
    "start": "594720",
    "end": "597440"
  },
  {
    "text": "enable um you can actually choose what",
    "start": "597440",
    "end": "600079"
  },
  {
    "text": "are the options that you want you can",
    "start": "600079",
    "end": "601959"
  },
  {
    "text": "have an S3 logging a cloudwatch logs and",
    "start": "601959",
    "end": "604800"
  },
  {
    "text": "both uh S3 cloudwatch logs I've just",
    "start": "604800",
    "end": "607160"
  },
  {
    "text": "enabl cloudwatch logs only and I've",
    "start": "607160",
    "end": "609360"
  },
  {
    "text": "given a log group name as Bedrock",
    "start": "609360",
    "end": "611959"
  },
  {
    "text": "logging um and and that's it so once you",
    "start": "611959",
    "end": "614720"
  },
  {
    "text": "enable loging um all the model",
    "start": "614720",
    "end": "616600"
  },
  {
    "text": "invocations will go to this um log group",
    "start": "616600",
    "end": "619480"
  },
  {
    "text": "name cool so let's start giving some",
    "start": "619480",
    "end": "622800"
  },
  {
    "text": "requests some questions to the to our",
    "start": "622800",
    "end": "624640"
  },
  {
    "text": "model so let's start with uh with with",
    "start": "624640",
    "end": "627360"
  },
  {
    "text": "Neptune so um um let me copy this so I'm",
    "start": "627360",
    "end": "631200"
  },
  {
    "text": "going to ask um how many movies has",
    "start": "631200",
    "end": "633760"
  },
  {
    "text": "Robin",
    "start": "633760",
    "end": "634600"
  },
  {
    "text": "Williams starred in by",
    "start": "634600",
    "end": "637760"
  },
  {
    "text": "Jal and if I just click on explore data",
    "start": "637760",
    "end": "640920"
  },
  {
    "text": "um it is giving",
    "start": "640920",
    "end": "642560"
  },
  {
    "text": "me the query the open Cipher query that",
    "start": "642560",
    "end": "647320"
  },
  {
    "text": "uh it asks that it actually gen the the",
    "start": "647320",
    "end": "649480"
  },
  {
    "text": "model generates to be able to execute",
    "start": "649480",
    "end": "652600"
  },
  {
    "text": "against the Neptune database and it's",
    "start": "652600",
    "end": "654880"
  },
  {
    "text": "also giving me the query explanation of",
    "start": "654880",
    "end": "657800"
  },
  {
    "text": "how this model the cloud model was able",
    "start": "657800",
    "end": "660279"
  },
  {
    "text": "to generate this",
    "start": "660279",
    "end": "661720"
  },
  {
    "text": "query uh and this is because we are",
    "start": "661720",
    "end": "664600"
  },
  {
    "text": "actually passing that in our prompt and",
    "start": "664600",
    "end": "666360"
  },
  {
    "text": "I'll show you how the prompt looks like",
    "start": "666360",
    "end": "668399"
  },
  {
    "text": "but then if you look at the result it is",
    "start": "668399",
    "end": "670440"
  },
  {
    "text": "actually telling you all the records",
    "start": "670440",
    "end": "673160"
  },
  {
    "text": "with drama crime comedy and so",
    "start": "673160",
    "end": "675880"
  },
  {
    "text": "on um now if I if you go to the the",
    "start": "675880",
    "end": "679720"
  },
  {
    "text": "model invocations and this is the uh",
    "start": "679720",
    "end": "682160"
  },
  {
    "text": "blog group name so let me go to model",
    "start": "682160",
    "end": "686560"
  },
  {
    "text": "invocations",
    "start": "687959",
    "end": "689800"
  },
  {
    "text": "and let me um just pick up the last",
    "start": "689800",
    "end": "694680"
  },
  {
    "text": "one so here you can",
    "start": "696959",
    "end": "700880"
  },
  {
    "text": "see that um The Prompt how the prompt",
    "start": "700880",
    "end": "703880"
  },
  {
    "text": "looks like so it says that you are",
    "start": "703880",
    "end": "706320"
  },
  {
    "text": "connected to a graph database with",
    "start": "706320",
    "end": "707880"
  },
  {
    "text": "following schema so as mentioned in the",
    "start": "707880",
    "end": "710480"
  },
  {
    "text": "architecture uh when we were discussing",
    "start": "710480",
    "end": "712200"
  },
  {
    "text": "the architecture it adds the schema of",
    "start": "712200",
    "end": "714320"
  },
  {
    "text": "the entire Neptune graph database and",
    "start": "714320",
    "end": "717000"
  },
  {
    "text": "then at the end it is telling uh the the",
    "start": "717000",
    "end": "721360"
  },
  {
    "text": "model that",
    "start": "721360",
    "end": "723519"
  },
  {
    "text": "um write a query to retrieve the data",
    "start": "723519",
    "end": "726079"
  },
  {
    "text": "needed to answer the following question",
    "start": "726079",
    "end": "728000"
  },
  {
    "text": "so it's also um giving you know just",
    "start": "728000",
    "end": "731200"
  },
  {
    "text": "giving some instructions to the model to",
    "start": "731200",
    "end": "734040"
  },
  {
    "text": "answer to answer that that questions",
    "start": "734040",
    "end": "736600"
  },
  {
    "text": "that question and it's also telling that",
    "start": "736600",
    "end": "739120"
  },
  {
    "text": "return the explanation uh in the",
    "start": "739120",
    "end": "742079"
  },
  {
    "text": "explanation in the explanation tag the",
    "start": "742079",
    "end": "744720"
  },
  {
    "text": "query would be enclosed in the query tag",
    "start": "744720",
    "end": "746680"
  },
  {
    "text": "just makes it easier to extract this",
    "start": "746680",
    "end": "748399"
  },
  {
    "text": "information all this information and at",
    "start": "748399",
    "end": "750560"
  },
  {
    "text": "the end you can see that the question is",
    "start": "750560",
    "end": "752360"
  },
  {
    "text": "how many movies has Robin Williams",
    "start": "752360",
    "end": "753959"
  },
  {
    "text": "starred in in uh by Jonah so um that's",
    "start": "753959",
    "end": "758959"
  },
  {
    "text": "the question at the end and when you see",
    "start": "758959",
    "end": "760639"
  },
  {
    "text": "the response you can see that the",
    "start": "760639",
    "end": "762800"
  },
  {
    "text": "explanation is in one tag so um it",
    "start": "762800",
    "end": "766320"
  },
  {
    "text": "actually the model talks about how that",
    "start": "766320",
    "end": "769760"
  },
  {
    "text": "query was generated and then at the end",
    "start": "769760",
    "end": "772880"
  },
  {
    "text": "it is giving um the query so here is the",
    "start": "772880",
    "end": "776360"
  },
  {
    "text": "the query tag that's that's starting",
    "start": "776360",
    "end": "778440"
  },
  {
    "text": "that's start starting and then it's",
    "start": "778440",
    "end": "779639"
  },
  {
    "text": "giving you the query in between so",
    "start": "779639",
    "end": "781480"
  },
  {
    "text": "that's how the model invocation looks",
    "start": "781480",
    "end": "783199"
  },
  {
    "text": "like so let's explore some other",
    "start": "783199",
    "end": "785480"
  },
  {
    "text": "databases as well so um if you do the um",
    "start": "785480",
    "end": "790399"
  },
  {
    "text": "the the postgress auds database let me",
    "start": "790399",
    "end": "793920"
  },
  {
    "text": "ask you know show me the name of the",
    "start": "793920",
    "end": "795440"
  },
  {
    "text": "five customers who rented the most",
    "start": "795440",
    "end": "798000"
  },
  {
    "text": "DVDs and",
    "start": "798000",
    "end": "800399"
  },
  {
    "text": "um let me ask it and I'll change the",
    "start": "800399",
    "end": "803160"
  },
  {
    "text": "database from IMDb to the DVD rentals",
    "start": "803160",
    "end": "806760"
  },
  {
    "text": "and I'll just click on explore data",
    "start": "806760",
    "end": "809800"
  },
  {
    "text": "so um",
    "start": "809800",
    "end": "812920"
  },
  {
    "text": "here let's also go to the cloud watch to",
    "start": "812920",
    "end": "817040"
  },
  {
    "text": "see what is",
    "start": "817040",
    "end": "818839"
  },
  {
    "text": "the uh prompt that's being sent to the",
    "start": "818839",
    "end": "823399"
  },
  {
    "text": "model so here you can see um that the",
    "start": "827720",
    "end": "831360"
  },
  {
    "text": "prompt is is being change so it's",
    "start": "831360",
    "end": "833720"
  },
  {
    "text": "telling that you're connected to a",
    "start": "833720",
    "end": "835600"
  },
  {
    "text": "relational database with the following",
    "start": "835600",
    "end": "837160"
  },
  {
    "text": "schema and now it's fetching the",
    "start": "837160",
    "end": "839519"
  },
  {
    "text": "the schema of the relational database",
    "start": "839519",
    "end": "841480"
  },
  {
    "text": "and at the end again it is appending the",
    "start": "841480",
    "end": "843720"
  },
  {
    "text": "question that show me the name of the",
    "start": "843720",
    "end": "846160"
  },
  {
    "text": "five customers who rented the most DVDs",
    "start": "846160",
    "end": "848320"
  },
  {
    "text": "and then again it's asking the model to",
    "start": "848320",
    "end": "851160"
  },
  {
    "text": "put the explanation and query in the in",
    "start": "851160",
    "end": "853440"
  },
  {
    "text": "the respective tags so um if I go how if",
    "start": "853440",
    "end": "858000"
  },
  {
    "text": "I just want to see what is the",
    "start": "858000",
    "end": "860120"
  },
  {
    "text": "result um it tells me that it gives me",
    "start": "860120",
    "end": "863360"
  },
  {
    "text": "explanation it results it actually",
    "start": "863360",
    "end": "865240"
  },
  {
    "text": "created the uh SQL query it that did all",
    "start": "865240",
    "end": "869040"
  },
  {
    "text": "the joins and things like that and um it",
    "start": "869040",
    "end": "872360"
  },
  {
    "text": "gave me all these um first name last",
    "start": "872360",
    "end": "874720"
  },
  {
    "text": "name of those five customers who rented",
    "start": "874720",
    "end": "877759"
  },
  {
    "text": "the most",
    "start": "877759",
    "end": "879120"
  },
  {
    "text": "DVDs",
    "start": "879120",
    "end": "881320"
  },
  {
    "text": "now um let's try something else so if um",
    "start": "881320",
    "end": "886240"
  },
  {
    "text": "you can see that you can also ask the",
    "start": "886240",
    "end": "889480"
  },
  {
    "text": "question in some other language so let's",
    "start": "889480",
    "end": "892759"
  },
  {
    "text": "let's try that so I am asking this and",
    "start": "892759",
    "end": "895160"
  },
  {
    "text": "if I just put um you know see what is",
    "start": "895160",
    "end": "898120"
  },
  {
    "text": "the translation of that it is asking in",
    "start": "898120",
    "end": "901240"
  },
  {
    "text": "German Which films were rented the",
    "start": "901240",
    "end": "904160"
  },
  {
    "text": "most so if I um just execute the same",
    "start": "904160",
    "end": "908600"
  },
  {
    "text": "query against the DVD rental database",
    "start": "908600",
    "end": "910920"
  },
  {
    "text": "I'll just click on explore",
    "start": "910920",
    "end": "913120"
  },
  {
    "text": "data so Claude is a multilingual model",
    "start": "913120",
    "end": "916360"
  },
  {
    "text": "uh so it can handle many different um",
    "start": "916360",
    "end": "919360"
  },
  {
    "text": "language so um we have asked the",
    "start": "919360",
    "end": "922720"
  },
  {
    "text": "question in German and uh the Claud",
    "start": "922720",
    "end": "926040"
  },
  {
    "text": "model was successful in creating that",
    "start": "926040",
    "end": "928120"
  },
  {
    "text": "SQL query including joints and",
    "start": "928120",
    "end": "930079"
  },
  {
    "text": "everything and it's also giving you a",
    "start": "930079",
    "end": "932560"
  },
  {
    "text": "query explanation in in German as well",
    "start": "932560",
    "end": "935959"
  },
  {
    "text": "so it's telling you how that particular",
    "start": "935959",
    "end": "937759"
  },
  {
    "text": "SQL query was created and then it's",
    "start": "937759",
    "end": "940880"
  },
  {
    "text": "actually giving me um all these all",
    "start": "940880",
    "end": "943560"
  },
  {
    "text": "these the data so we asked uh Which",
    "start": "943560",
    "end": "947040"
  },
  {
    "text": "films were rented the most and it's",
    "start": "947040",
    "end": "949279"
  },
  {
    "text": "telling me that um the bucket",
    "start": "949279",
    "end": "951880"
  },
  {
    "text": "Brotherhood was rented for 34 times and",
    "start": "951880",
    "end": "955240"
  },
  {
    "text": "and Al sorting it by the number of uh",
    "start": "955240",
    "end": "957639"
  },
  {
    "text": "rentals as well as well so this will",
    "start": "957639",
    "end": "960639"
  },
  {
    "text": "also work with um with with some of the",
    "start": "960639",
    "end": "964000"
  },
  {
    "text": "um popular languages it also it it will",
    "start": "964000",
    "end": "967160"
  },
  {
    "text": "also work with um some of the",
    "start": "967160",
    "end": "969040"
  },
  {
    "text": "non-popular languages as well like local",
    "start": "969040",
    "end": "971839"
  },
  {
    "text": "languages but then uh the query",
    "start": "971839",
    "end": "974880"
  },
  {
    "text": "explanation might be you know uh still",
    "start": "974880",
    "end": "978000"
  },
  {
    "text": "generated in English you just have to",
    "start": "978000",
    "end": "980000"
  },
  {
    "text": "have a look how it works but then again",
    "start": "980000",
    "end": "982199"
  },
  {
    "text": "Claude is a multilingual model and",
    "start": "982199",
    "end": "983800"
  },
  {
    "text": "strain with um with many uh",
    "start": "983800",
    "end": "987199"
  },
  {
    "text": "languages so let's let's go",
    "start": "987199",
    "end": "989759"
  },
  {
    "text": "back um let's try the third database",
    "start": "989759",
    "end": "992880"
  },
  {
    "text": "which is",
    "start": "992880",
    "end": "994279"
  },
  {
    "text": "Athena and let let's explore what can I",
    "start": "994279",
    "end": "997680"
  },
  {
    "text": "ask so um I'll I'll ask show me the top",
    "start": "997680",
    "end": "1001519"
  },
  {
    "text": "10 suppliers from Jordan with highest",
    "start": "1001519",
    "end": "1005399"
  },
  {
    "text": "sales um then I click on explore data",
    "start": "1005399",
    "end": "1008519"
  },
  {
    "text": "now again the for Athena it's still as",
    "start": "1008519",
    "end": "1010639"
  },
  {
    "text": "it's telling you that you're connected",
    "start": "1010639",
    "end": "1011920"
  },
  {
    "text": "to Amazon Athena and all this",
    "start": "1011920",
    "end": "1014199"
  },
  {
    "text": "construction is happening um in our app",
    "start": "1014199",
    "end": "1016560"
  },
  {
    "text": "app as well whichever database you want",
    "start": "1016560",
    "end": "1018120"
  },
  {
    "text": "to go query it's actually fetching the",
    "start": "1018120",
    "end": "1019519"
  },
  {
    "text": "database schema and creating the prompt",
    "start": "1019519",
    "end": "1022399"
  },
  {
    "text": "uh based out of that and then the query",
    "start": "1022399",
    "end": "1024240"
  },
  {
    "text": "is at the end um now if I look at the",
    "start": "1024240",
    "end": "1027798"
  },
  {
    "text": "the result it is telling me it's again",
    "start": "1027799",
    "end": "1031000"
  },
  {
    "text": "creating that um that",
    "start": "1031000",
    "end": "1032880"
  },
  {
    "text": "query and it's giving the query",
    "start": "1032880",
    "end": "1034839"
  },
  {
    "text": "explanation it's also giving the the the",
    "start": "1034839",
    "end": "1037480"
  },
  {
    "text": "supplier names right so I hope you like",
    "start": "1037480",
    "end": "1041280"
  },
  {
    "text": "the demo and I hope you can take the",
    "start": "1041280",
    "end": "1044120"
  },
  {
    "text": "advantage of the solution to actually",
    "start": "1044120",
    "end": "1047079"
  },
  {
    "text": "talk to your database and get business",
    "start": "1047079",
    "end": "1049600"
  },
  {
    "text": "insights directly thanks a",
    "start": "1049600",
    "end": "1053799"
  },
  {
    "text": "lot",
    "start": "1060600",
    "end": "1063600"
  }
]