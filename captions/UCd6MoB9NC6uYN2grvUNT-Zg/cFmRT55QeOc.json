[
  {
    "start": "0",
    "end": "18000"
  },
  {
    "text": "in this video you'll see how to monitor",
    "start": "240",
    "end": "1920"
  },
  {
    "text": "your service mesh container environment",
    "start": "1920",
    "end": "3520"
  },
  {
    "text": "using amazon managed service for",
    "start": "3520",
    "end": "5040"
  },
  {
    "text": "prometheus or amp and amazon managed",
    "start": "5040",
    "end": "7359"
  },
  {
    "text": "grafana",
    "start": "7359",
    "end": "8559"
  },
  {
    "text": "with these services you can ingest envoy",
    "start": "8559",
    "end": "10800"
  },
  {
    "text": "metrics from aws appmesh to a managed",
    "start": "10800",
    "end": "13040"
  },
  {
    "text": "solution visualize operational data and",
    "start": "13040",
    "end": "15679"
  },
  {
    "text": "monitor the health and performance of",
    "start": "15679",
    "end": "17039"
  },
  {
    "text": "microservices",
    "start": "17039",
    "end": "19119"
  },
  {
    "start": "18000",
    "end": "98000"
  },
  {
    "text": "this is a cloud 9 environment with the",
    "start": "19119",
    "end": "20720"
  },
  {
    "text": "necessary prerequisites installed",
    "start": "20720",
    "end": "23039"
  },
  {
    "text": "from here we'll run some commands that",
    "start": "23039",
    "end": "24640"
  },
  {
    "text": "use the envoy open source edge and",
    "start": "24640",
    "end": "26400"
  },
  {
    "text": "service proxy to send metrics from app",
    "start": "26400",
    "end": "28240"
  },
  {
    "text": "mesh running on an amazon elastic",
    "start": "28240",
    "end": "29920"
  },
  {
    "text": "kubernetes service or amazon eks cluster",
    "start": "29920",
    "end": "32558"
  },
  {
    "text": "to amp",
    "start": "32559",
    "end": "34079"
  },
  {
    "text": "to get started we'll export a few",
    "start": "34079",
    "end": "35680"
  },
  {
    "text": "environment variables",
    "start": "35680",
    "end": "38719"
  },
  {
    "text": "next we'll copy and save an eks cluster",
    "start": "43200",
    "end": "45280"
  },
  {
    "text": "configuration file",
    "start": "45280",
    "end": "47280"
  },
  {
    "text": "let's check the file to see if the",
    "start": "47280",
    "end": "48559"
  },
  {
    "text": "cluster name and region are correct",
    "start": "48559",
    "end": "52079"
  },
  {
    "text": "now let's create the eks cluster and",
    "start": "56239",
    "end": "58079"
  },
  {
    "text": "service account that will be used by the",
    "start": "58079",
    "end": "59520"
  },
  {
    "text": "aws app mesh controller",
    "start": "59520",
    "end": "63280"
  },
  {
    "text": "we can see that two worker nodes are",
    "start": "67280",
    "end": "68720"
  },
  {
    "text": "available",
    "start": "68720",
    "end": "71200"
  },
  {
    "text": "next we'll run a few commands to get the",
    "start": "71200",
    "end": "72880"
  },
  {
    "text": "custom resource definitions or crds in",
    "start": "72880",
    "end": "75520"
  },
  {
    "text": "place so we can install the appmesh",
    "start": "75520",
    "end": "77280"
  },
  {
    "text": "controller",
    "start": "77280",
    "end": "79840"
  },
  {
    "text": "the appmesh controller helps integrate",
    "start": "81040",
    "end": "82720"
  },
  {
    "text": "the kubernetes cluster with app mesh",
    "start": "82720",
    "end": "84479"
  },
  {
    "text": "components",
    "start": "84479",
    "end": "85600"
  },
  {
    "text": "we can see the controller has been",
    "start": "85600",
    "end": "86880"
  },
  {
    "text": "installed and is running",
    "start": "86880",
    "end": "88640"
  },
  {
    "text": "next let's create the amp workspace",
    "start": "88640",
    "end": "92560"
  },
  {
    "text": "this workspace will be used to ingest",
    "start": "93200",
    "end": "94720"
  },
  {
    "text": "the prometheus metrics collected by",
    "start": "94720",
    "end": "96400"
  },
  {
    "text": "envoy",
    "start": "96400",
    "end": "98880"
  },
  {
    "start": "98000",
    "end": "181000"
  },
  {
    "text": "we can also create an interface vpc",
    "start": "99119",
    "end": "101119"
  },
  {
    "text": "endpoint to securely access the managed",
    "start": "101119",
    "end": "103040"
  },
  {
    "text": "service from resources deployed in our",
    "start": "103040",
    "end": "104640"
  },
  {
    "text": "vpc this ensures that data ingested by",
    "start": "104640",
    "end": "107360"
  },
  {
    "text": "the managed service does not leave the",
    "start": "107360",
    "end": "108880"
  },
  {
    "text": "vpc in our aws account",
    "start": "108880",
    "end": "112640"
  },
  {
    "text": "we need the eks clusters vpc id",
    "start": "113200",
    "end": "116240"
  },
  {
    "text": "to get this we'll navigate to the amazon",
    "start": "116240",
    "end": "118079"
  },
  {
    "text": "eks console",
    "start": "118079",
    "end": "121040"
  },
  {
    "text": "now let's export the vpc id and create",
    "start": "124399",
    "end": "126719"
  },
  {
    "text": "the vpc endpoint",
    "start": "126719",
    "end": "128879"
  },
  {
    "text": "next we'll export the helm chart so we",
    "start": "128879",
    "end": "130720"
  },
  {
    "text": "can install the prometheus server",
    "start": "130720",
    "end": "134239"
  },
  {
    "text": "the environment is set up and now we can",
    "start": "134800",
    "end": "136400"
  },
  {
    "text": "run a script to create the aws identity",
    "start": "136400",
    "end": "138560"
  },
  {
    "text": "and access management or aws iam role",
    "start": "138560",
    "end": "141360"
  },
  {
    "text": "with the permissions the grafana agent",
    "start": "141360",
    "end": "143040"
  },
  {
    "text": "needs to ingest the information to amp",
    "start": "143040",
    "end": "146000"
  },
  {
    "text": "let's download the script",
    "start": "146000",
    "end": "149040"
  },
  {
    "text": "we need to make some configuration",
    "start": "151120",
    "end": "152480"
  },
  {
    "text": "changes in the script so that it",
    "start": "152480",
    "end": "153840"
  },
  {
    "text": "understands the cluster name and other",
    "start": "153840",
    "end": "155360"
  },
  {
    "text": "information",
    "start": "155360",
    "end": "157760"
  },
  {
    "text": "we can copy the cluster name from the",
    "start": "157760",
    "end": "159200"
  },
  {
    "text": "eks console",
    "start": "159200",
    "end": "162239"
  },
  {
    "text": "now let's create the necessary policies",
    "start": "169040",
    "end": "170879"
  },
  {
    "text": "and attach them to the right service",
    "start": "170879",
    "end": "172319"
  },
  {
    "text": "agent",
    "start": "172319",
    "end": "174560"
  },
  {
    "text": "next we'll create a namespace so that",
    "start": "174560",
    "end": "176239"
  },
  {
    "text": "the grafana agent can be installed",
    "start": "176239",
    "end": "179840"
  },
  {
    "start": "181000",
    "end": "277000"
  },
  {
    "text": "let's export the amp workspace and then",
    "start": "181920",
    "end": "184000"
  },
  {
    "text": "confirm that the workspace id was",
    "start": "184000",
    "end": "185599"
  },
  {
    "text": "successfully exported",
    "start": "185599",
    "end": "188720"
  },
  {
    "text": "next we'll export the iam role that will",
    "start": "188720",
    "end": "190640"
  },
  {
    "text": "be used by the grafana agent along with",
    "start": "190640",
    "end": "192640"
  },
  {
    "text": "some other variables and verify that the",
    "start": "192640",
    "end": "194480"
  },
  {
    "text": "exports were successful",
    "start": "194480",
    "end": "198040"
  },
  {
    "text": "now let's create a manifest file with",
    "start": "200400",
    "end": "202080"
  },
  {
    "text": "the scrape configuration to extract the",
    "start": "202080",
    "end": "204000"
  },
  {
    "text": "envoy metrics and deploy the grafana",
    "start": "204000",
    "end": "205840"
  },
  {
    "text": "agent",
    "start": "205840",
    "end": "208159"
  },
  {
    "text": "we'll check to make sure everything",
    "start": "208640",
    "end": "209840"
  },
  {
    "text": "looks good and then deploy the agent",
    "start": "209840",
    "end": "213840"
  },
  {
    "text": "after the grafana agent is deployed it",
    "start": "215920",
    "end": "217840"
  },
  {
    "text": "will collect the metrics and ingest them",
    "start": "217840",
    "end": "219360"
  },
  {
    "text": "into the specified amp workspace",
    "start": "219360",
    "end": "223360"
  },
  {
    "text": "we can see the agent is running and we",
    "start": "223440",
    "end": "225200"
  },
  {
    "text": "can now deploy a sample application on",
    "start": "225200",
    "end": "226959"
  },
  {
    "text": "the eks cluster",
    "start": "226959",
    "end": "230000"
  },
  {
    "text": "the sample application is running now",
    "start": "237519",
    "end": "239680"
  },
  {
    "text": "let's install the appmesh controller",
    "start": "239680",
    "end": "243359"
  },
  {
    "text": "you can see a mesh was created along",
    "start": "243760",
    "end": "245519"
  },
  {
    "text": "with virtual nodes virtual services",
    "start": "245519",
    "end": "247519"
  },
  {
    "text": "virtual routers and services",
    "start": "247519",
    "end": "249680"
  },
  {
    "text": "let's restart the deployment and then",
    "start": "249680",
    "end": "251360"
  },
  {
    "text": "verify the envoys were ingested",
    "start": "251360",
    "end": "255560"
  },
  {
    "text": "two containers are running in each pod",
    "start": "260560",
    "end": "262479"
  },
  {
    "text": "one is the mainstream application and",
    "start": "262479",
    "end": "264080"
  },
  {
    "text": "the other is the envoy container",
    "start": "264080",
    "end": "266800"
  },
  {
    "text": "as you can see the grafana agent is now",
    "start": "266800",
    "end": "268720"
  },
  {
    "text": "ingesting metrics into amp",
    "start": "268720",
    "end": "270960"
  },
  {
    "text": "we can now integrate the metrics with",
    "start": "270960",
    "end": "272560"
  },
  {
    "text": "amazon managed grafana to analyze them",
    "start": "272560",
    "end": "274560"
  },
  {
    "text": "visually and detect performance",
    "start": "274560",
    "end": "276000"
  },
  {
    "text": "slowdowns or disruptions",
    "start": "276000",
    "end": "278080"
  },
  {
    "start": "277000",
    "end": "391000"
  },
  {
    "text": "to do this let's navigate to the aws",
    "start": "278080",
    "end": "280160"
  },
  {
    "text": "grafana console and create an amazon",
    "start": "280160",
    "end": "282080"
  },
  {
    "text": "managed grafana workspace",
    "start": "282080",
    "end": "285520"
  },
  {
    "text": "give the workspace a name and then",
    "start": "286800",
    "end": "288160"
  },
  {
    "text": "proceed to the next step",
    "start": "288160",
    "end": "291280"
  },
  {
    "text": "here you'll define user and data access",
    "start": "292720",
    "end": "294840"
  },
  {
    "text": "permissions you'll need to enable aws",
    "start": "294840",
    "end": "297280"
  },
  {
    "text": "single sign-on or sso for amazon managed",
    "start": "297280",
    "end": "299759"
  },
  {
    "text": "grafana if it's not already enabled",
    "start": "299759",
    "end": "302479"
  },
  {
    "text": "next we'll configure the iam permission",
    "start": "302479",
    "end": "304400"
  },
  {
    "text": "access settings",
    "start": "304400",
    "end": "307199"
  },
  {
    "text": "we'll indicate which data sources we",
    "start": "307360",
    "end": "308880"
  },
  {
    "text": "want to consume and visualize data from",
    "start": "308880",
    "end": "311280"
  },
  {
    "text": "and specify any applicable notification",
    "start": "311280",
    "end": "313360"
  },
  {
    "text": "channels",
    "start": "313360",
    "end": "315758"
  },
  {
    "text": "next we'll review the workspace",
    "start": "317919",
    "end": "319199"
  },
  {
    "text": "configuration and create the",
    "start": "319199",
    "end": "322400"
  },
  {
    "text": "workspace once the workspace is created",
    "start": "322840",
    "end": "325280"
  },
  {
    "text": "you can assign users access to it",
    "start": "325280",
    "end": "328960"
  },
  {
    "text": "we'll make the user an admin",
    "start": "330080",
    "end": "333439"
  },
  {
    "text": "now let's navigate to the grafana",
    "start": "334560",
    "end": "336080"
  },
  {
    "text": "workspace and configure the data source",
    "start": "336080",
    "end": "339840"
  },
  {
    "text": "we'll select amazon managed service for",
    "start": "342880",
    "end": "344720"
  },
  {
    "text": "prometheus as the data source and then",
    "start": "344720",
    "end": "346800"
  },
  {
    "text": "select the region where we configured",
    "start": "346800",
    "end": "348240"
  },
  {
    "text": "the workspace earlier",
    "start": "348240",
    "end": "351880"
  },
  {
    "text": "let's select the app mesh workspace that",
    "start": "354320",
    "end": "356080"
  },
  {
    "text": "we created",
    "start": "356080",
    "end": "358638"
  },
  {
    "text": "to analyze the metrics collected by the",
    "start": "359919",
    "end": "361600"
  },
  {
    "text": "grifana agent we'll import a custom",
    "start": "361600",
    "end": "363600"
  },
  {
    "text": "dashboard",
    "start": "363600",
    "end": "366600"
  },
  {
    "text": "we can see that the grafana agent has",
    "start": "370639",
    "end": "372240"
  },
  {
    "text": "started to collect and send metrics to",
    "start": "372240",
    "end": "373840"
  },
  {
    "text": "amp",
    "start": "373840",
    "end": "375199"
  },
  {
    "text": "the dashboard collects the downstream",
    "start": "375199",
    "end": "376800"
  },
  {
    "text": "rate per second count per second latency",
    "start": "376800",
    "end": "379039"
  },
  {
    "text": "total collections and more",
    "start": "379039",
    "end": "381360"
  },
  {
    "text": "you can configure a grafana alert to be",
    "start": "381360",
    "end": "383199"
  },
  {
    "text": "triggered when a metric increases beyond",
    "start": "383199",
    "end": "384880"
  },
  {
    "text": "the intended threshold",
    "start": "384880",
    "end": "386720"
  },
  {
    "text": "before creating an alert rule we need to",
    "start": "386720",
    "end": "388479"
  },
  {
    "text": "create a notification channel",
    "start": "388479",
    "end": "391840"
  },
  {
    "start": "391000",
    "end": "552000"
  },
  {
    "text": "let's create an sns topic and subscribe",
    "start": "392080",
    "end": "394160"
  },
  {
    "text": "an email address",
    "start": "394160",
    "end": "396960"
  },
  {
    "text": "now let's return to the grafana",
    "start": "401280",
    "end": "402639"
  },
  {
    "text": "workspace to configure the new",
    "start": "402639",
    "end": "403919"
  },
  {
    "text": "notification channel",
    "start": "403919",
    "end": "407560"
  },
  {
    "text": "here we'll enter the notification",
    "start": "409520",
    "end": "410960"
  },
  {
    "text": "channel details",
    "start": "410960",
    "end": "413759"
  },
  {
    "text": "to get the topic we'll navigate to the",
    "start": "414720",
    "end": "416479"
  },
  {
    "text": "eks console to copy the sns arn",
    "start": "416479",
    "end": "421479"
  },
  {
    "text": "next select the auth provider and then",
    "start": "430560",
    "end": "432400"
  },
  {
    "text": "test the new channel",
    "start": "432400",
    "end": "435960"
  },
  {
    "text": "the test notification sent successfully",
    "start": "437919",
    "end": "439840"
  },
  {
    "text": "so we'll save the channel",
    "start": "439840",
    "end": "442560"
  },
  {
    "text": "now let's return to the dashboard to",
    "start": "442560",
    "end": "444080"
  },
  {
    "text": "create the alert",
    "start": "444080",
    "end": "446800"
  },
  {
    "text": "we'll configure an alert for downstream",
    "start": "448960",
    "end": "450639"
  },
  {
    "text": "latency",
    "start": "450639",
    "end": "453199"
  },
  {
    "text": "make sure to select the proper data",
    "start": "454000",
    "end": "455440"
  },
  {
    "text": "source",
    "start": "455440",
    "end": "457759"
  },
  {
    "text": "we'll configure the alert to trigger",
    "start": "462240",
    "end": "463599"
  },
  {
    "text": "when the downstream latency exceeds five",
    "start": "463599",
    "end": "465440"
  },
  {
    "text": "milliseconds in a one minute period",
    "start": "465440",
    "end": "469039"
  },
  {
    "text": "the notification will be sent through",
    "start": "470160",
    "end": "471599"
  },
  {
    "text": "the channel we configured earlier with a",
    "start": "471599",
    "end": "473120"
  },
  {
    "text": "specific message",
    "start": "473120",
    "end": "476520"
  },
  {
    "text": "let's test the rule",
    "start": "481039",
    "end": "483919"
  },
  {
    "text": "everything looks good so we'll save the",
    "start": "484160",
    "end": "485759"
  },
  {
    "text": "rule and then apply it",
    "start": "485759",
    "end": "489560"
  },
  {
    "text": "after refreshing the page we can see",
    "start": "494879",
    "end": "496479"
  },
  {
    "text": "that the alert has been configured and",
    "start": "496479",
    "end": "497919"
  },
  {
    "text": "the status shows as healthy",
    "start": "497919",
    "end": "500400"
  },
  {
    "text": "now let's navigate back to the cloud9",
    "start": "500400",
    "end": "502160"
  },
  {
    "text": "environment and generate a load to",
    "start": "502160",
    "end": "503759"
  },
  {
    "text": "trigger the alert",
    "start": "503759",
    "end": "507160"
  },
  {
    "text": "as you can see the health of the",
    "start": "512880",
    "end": "514080"
  },
  {
    "text": "downstream latency is already",
    "start": "514080",
    "end": "517519"
  },
  {
    "text": "decreasing within a few seconds it goes",
    "start": "518839",
    "end": "521279"
  },
  {
    "text": "to an alerting state",
    "start": "521279",
    "end": "524240"
  },
  {
    "text": "let's go to the alert rule to get more",
    "start": "525360",
    "end": "526959"
  },
  {
    "text": "information",
    "start": "526959",
    "end": "529440"
  },
  {
    "text": "the downstream latency has exceeded the",
    "start": "530399",
    "end": "532160"
  },
  {
    "text": "threshold and has been alerting for a",
    "start": "532160",
    "end": "533519"
  },
  {
    "text": "few seconds triggering an alert to be",
    "start": "533519",
    "end": "535519"
  },
  {
    "text": "sent to the sns topic and subscribers",
    "start": "535519",
    "end": "537519"
  },
  {
    "text": "emails",
    "start": "537519",
    "end": "539360"
  },
  {
    "text": "you've just seen how to monitor your",
    "start": "539360",
    "end": "540640"
  },
  {
    "text": "service mesh container environment using",
    "start": "540640",
    "end": "542399"
  },
  {
    "text": "amp and amazon managed grafana",
    "start": "542399",
    "end": "545440"
  },
  {
    "text": "you can learn more about this topic in",
    "start": "545440",
    "end": "546800"
  },
  {
    "text": "the description and links for this video",
    "start": "546800",
    "end": "548880"
  },
  {
    "text": "thanks for watching now it's your turn",
    "start": "548880",
    "end": "550320"
  },
  {
    "text": "to try",
    "start": "550320",
    "end": "553399"
  }
]