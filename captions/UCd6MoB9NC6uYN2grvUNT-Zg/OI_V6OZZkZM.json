[
  {
    "text": "all right good morning everyone oh come on let's try that again good morning all right my name is Jeremy",
    "start": "840",
    "end": "8679"
  },
  {
    "text": "edberg I am the CEO and founder of mops uh I was previously with Netflix and",
    "start": "8679",
    "end": "13759"
  },
  {
    "text": "with Reddit and today I'm here to talk to you about serverless so in the beginning we had",
    "start": "13759",
    "end": "22160"
  },
  {
    "text": "servers and then we had virtual machines and then we moved to",
    "start": "22160",
    "end": "27480"
  },
  {
    "text": "containers and then we moved into Lambda and serverless so what was great about",
    "start": "27480",
    "end": "35600"
  },
  {
    "text": "physical machines well not a whole lot they took a long time to rack up and uh they were slow to get deployed and they",
    "start": "35600",
    "end": "43360"
  },
  {
    "text": "lasted for a really long time and they weren't very friendly to having lots of different languages or operating systems",
    "start": "43360",
    "end": "49399"
  },
  {
    "text": "or anything like that so then we went to Virtual machines and we solved some of those problems we could deploy them",
    "start": "49399",
    "end": "54840"
  },
  {
    "text": "fairly quickly uh they were kind of you know they were good for multi-tenancy they were polygot friendly",
    "start": "54840",
    "end": "60519"
  },
  {
    "text": "and uh you could deploy them in minutes and they would just live for a couple weeks to years depending on how long you",
    "start": "60519",
    "end": "65840"
  },
  {
    "text": "kept them around then we moved up the abstraction layer we got to Containers so it's even faster to deploy even more",
    "start": "65840",
    "end": "72960"
  },
  {
    "text": "lightweight more multi-tenancy more polygod friendly deploys in seconds",
    "start": "72960",
    "end": "78360"
  },
  {
    "text": "lives for hours minutes sometimes days sometimes weeks and now we're at serverless so",
    "start": "78360",
    "end": "85759"
  },
  {
    "text": "what is serverless serverless is really the smallest level of compute it's it's the end of that abstraction there really",
    "start": "85759",
    "end": "91320"
  },
  {
    "text": "isn't much farther we can go with that abstraction the function is the unit of deployment uh you deploy them in seconds",
    "start": "91320",
    "end": "98840"
  },
  {
    "text": "they run for seconds to minutes uh extremely friendly to lots of different languages very high multi-tenancy",
    "start": "98840",
    "end": "107438"
  },
  {
    "text": "Etc and there's a whole lot of choices in the serverless ecosystem there's Amazon's ecosystem there's a whole bunch",
    "start": "107680",
    "end": "114159"
  },
  {
    "text": "of other services out there that do lots of other things you can mix and match them uh put them together",
    "start": "114159",
    "end": "120479"
  },
  {
    "text": "or you can just stick with uh Amazon's ecosystem and Amazon's actually been doing the serverless thing for a long",
    "start": "120479",
    "end": "126399"
  },
  {
    "text": "time some of their very first products sqs S3 these are all part of the",
    "start": "126399",
    "end": "131640"
  },
  {
    "text": "serverless ecosystem and Lambda is like the glue Lambda is the glue that binds it all",
    "start": "131640",
    "end": "137319"
  },
  {
    "text": "together some of the benefits of Lambda you don't have to you there's no servers to manage you get continuous scaling uh",
    "start": "137319",
    "end": "144280"
  },
  {
    "text": "you don't pay for any of your idle time it's buil in 100 millisecond increments but really the whole Point",
    "start": "144280",
    "end": "150080"
  },
  {
    "text": "here is that Lambda is a core component of modern software whether you're using nothing but Lambda or just a tiny little",
    "start": "150080",
    "end": "156160"
  },
  {
    "text": "bit of it it's it's the glue it helps you bring from one to the next between different servers and server lists and",
    "start": "156160",
    "end": "162280"
  },
  {
    "text": "so on so what is serverless anyway right there's still servers obviously it's",
    "start": "162280",
    "end": "169239"
  },
  {
    "text": "there's no it's not the magic Cloud uh but what it means is that you don't have to manage them anymore you don't have",
    "start": "169239",
    "end": "175800"
  },
  {
    "text": "access to them either so you give up a a little bit of control and exchange for not having to deal with the problems and",
    "start": "175800",
    "end": "182319"
  },
  {
    "text": "those are the old Reddit servers actually under the old Reddit fish tank so so how do you decide right we've got",
    "start": "182319",
    "end": "190319"
  },
  {
    "text": "ec2 where they're virtual machines the machines the unit of scale we've got containers ECS application is the unit",
    "start": "190319",
    "end": "197920"
  },
  {
    "text": "of scale Lambda where the function is the unit of scale and so we ask ourselves these",
    "start": "197920",
    "end": "203360"
  },
  {
    "text": "questions you know do I want to configure machines have control over networking Etc or do I want to just",
    "start": "203360",
    "end": "210120"
  },
  {
    "text": "worry about applications and application configuration and a server configuration or do I want to just check in my code",
    "start": "210120",
    "end": "216159"
  },
  {
    "text": "and run it and give up some of that control and then a big question that",
    "start": "216159",
    "end": "222239"
  },
  {
    "text": "comes up especially amongst Enterprises is what happens if I buy my own software how do I get into serverless uh and the",
    "start": "222239",
    "end": "228599"
  },
  {
    "text": "answer is well you can still put your software in a container and then use Lambda as a way to bring data in and out",
    "start": "228599",
    "end": "235519"
  },
  {
    "text": "and to control how the different pieces of software that you bought work together things like that so even if",
    "start": "235519",
    "end": "241519"
  },
  {
    "text": "you're buying all of your software serverless is still a useful thing serverless is really about speeding up",
    "start": "241519",
    "end": "247760"
  },
  {
    "text": "your deployment by removing the management overhead the idea is to really just get down into the code and",
    "start": "247760",
    "end": "253239"
  },
  {
    "text": "just do code so let's take a quick journey through uh deployment history back in",
    "start": "253239",
    "end": "260440"
  },
  {
    "text": "the 80s we had the main frames they cost a ton of money and it took years to get",
    "start": "260440",
    "end": "265479"
  },
  {
    "text": "them and if you got a Mainframe for a product that didn't work out the company usually went bankrupt so you know not",
    "start": "265479",
    "end": "272479"
  },
  {
    "text": "great for Rapid deployment uh in the '90s we got to the client server thing",
    "start": "272479",
    "end": "278320"
  },
  {
    "text": "uh so costs went down by an order of magnitude you could deploy a lot faster uh cost of failure was just a sea level",
    "start": "278320",
    "end": "285400"
  },
  {
    "text": "and their Department disappearing then we got into agile in the 2000s uh how many of you love and",
    "start": "285400",
    "end": "292320"
  },
  {
    "text": "remember agile oh come on you just don't want to admit it but uh you know the cost of failure",
    "start": "292320",
    "end": "299120"
  },
  {
    "text": "was just a product manager's reputation we had this idea of the waterfalls where the product manager comes up with an",
    "start": "299120",
    "end": "305360"
  },
  {
    "text": "idea the developer writes it it goes to QA then Ops has to deploy what they wrote without any help and then the bi",
    "start": "305360",
    "end": "312680"
  },
  {
    "text": "analytics people tell you if it worked but the important part is as we've been moving along the cost and",
    "start": "312680",
    "end": "319360"
  },
  {
    "text": "risk always kept going down while the speed of deployment went up and that's always been the goal has been to reduce",
    "start": "319360",
    "end": "326360"
  },
  {
    "text": "our our costs and increase our Innovation speed so we started with this idea of having",
    "start": "326360",
    "end": "333199"
  },
  {
    "text": "the single deployment pipeline where all the developers check into one Pipeline",
    "start": "333199",
    "end": "338560"
  },
  {
    "text": "and it creates an application and you had to wait for the build cycle or the release engineer uh and if there was a",
    "start": "338560",
    "end": "345000"
  },
  {
    "text": "problem you had to go and hope you know give a beer to the release engineer and hope they would push your bug fix out before anyone noticed so it wasn't great",
    "start": "345000",
    "end": "352120"
  },
  {
    "text": "it was kind of a pain for a developer and then we came up with this idea of having multiple pipelines right",
    "start": "352120",
    "end": "359039"
  },
  {
    "text": "so we call this microservices and different developer groups would check into different",
    "start": "359039",
    "end": "364479"
  },
  {
    "text": "pipelines and they would all merge up together to create an application something like that but now",
    "start": "364479",
    "end": "371160"
  },
  {
    "text": "we have this idea of services right so we have all these different pipelines committing to all of these different",
    "start": "371160",
    "end": "376479"
  },
  {
    "text": "services and Lambda is really sort of the the the peak of that so now you don't you don't have to all commit into",
    "start": "376479",
    "end": "383520"
  },
  {
    "text": "the same set of services some of you could have some people running on this service and some people are on Lambda",
    "start": "383520",
    "end": "389400"
  },
  {
    "text": "and some are on uh you know some other service outside of Amazon whatever it is and it all ties together into one",
    "start": "389400",
    "end": "396759"
  },
  {
    "text": "application which is great for your developers because all they have to do is write their code and push it to wherever they want it's terrible for",
    "start": "396759",
    "end": "403240"
  },
  {
    "text": "your devops engineers but you know that's their problem I can say that I'm a devops",
    "start": "403240",
    "end": "409639"
  },
  {
    "text": "engineer and so this is a very standard pattern that a lot of companies follow this pattern from monolithic code to",
    "start": "409639",
    "end": "415919"
  },
  {
    "text": "microservices uh Netflix did it all of those companies there where you start with the monolithic codee and then you",
    "start": "415919",
    "end": "421840"
  },
  {
    "text": "break it into a couple of services and then you keep breaking it down and eventually you you're like Netflix and",
    "start": "421840",
    "end": "427560"
  },
  {
    "text": "you have hundreds of microservices and then what do you do right well the first question is why are",
    "start": "427560",
    "end": "434560"
  },
  {
    "text": "you even doing this and the answer is because it works really well for these small distributed teams right as we get",
    "start": "434560",
    "end": "441080"
  },
  {
    "text": "into these bigger or these smaller teams the two Pizza team if you will it's a lot easier for just a few Engineers to",
    "start": "441080",
    "end": "447280"
  },
  {
    "text": "work on one service they don't even have have to talk to the other Engineers if they don't want to the API is the",
    "start": "447280",
    "end": "453199"
  },
  {
    "text": "contract so it's great uh some people call this the cloud native method so it allows you to scale",
    "start": "453199",
    "end": "460879"
  },
  {
    "text": "independently each service can scale up and down as needed so that gives you a nice level of",
    "start": "460879",
    "end": "468520"
  },
  {
    "text": "flexibility here's an example of uh of a microservices organization right this is",
    "start": "468560",
    "end": "474199"
  },
  {
    "text": "the Netflix API so there's a bunch of services talks to an API the request goes in it fans back out and so",
    "start": "474199",
    "end": "481919"
  },
  {
    "text": "different teams are responsible for different groups of services and each one of those is a different VP or a",
    "start": "481919",
    "end": "488120"
  },
  {
    "text": "different uh product group or something like that and so what's nice about microservices is that it ties into the",
    "start": "488120",
    "end": "494759"
  },
  {
    "text": "organization the two are very married together the way that you run your engineering and the way that you run",
    "start": "494759",
    "end": "499919"
  },
  {
    "text": "your code and so what this gives you a nice",
    "start": "499919",
    "end": "505039"
  },
  {
    "text": "benefit of being highly aligned Loosely coupled so you have these small teams of Engineers",
    "start": "505039",
    "end": "510400"
  },
  {
    "text": "and they just have the API they don't even have to speak the same language because as long as they have that API it",
    "start": "510400",
    "end": "515959"
  },
  {
    "text": "works out so it gives you this nice benefit of distributed teams and it also means that your",
    "start": "515959",
    "end": "522000"
  },
  {
    "text": "developers can own endtoend their part of the product they don't have to understand the whole product and how it",
    "start": "522000",
    "end": "527920"
  },
  {
    "text": "all fits together they just need to understand their one piece and the parts to talk to and interact with their one",
    "start": "527920",
    "end": "534680"
  },
  {
    "text": "piece but the problem is when you have all these microservices you have to build this platform that has all of",
    "start": "534680",
    "end": "540279"
  },
  {
    "text": "these different moving Parts with deployment and monitoring and alerting and network configuration service",
    "start": "540279",
    "end": "546360"
  },
  {
    "text": "Discovery and all of that and mature companies I've found",
    "start": "546360",
    "end": "551640"
  },
  {
    "text": "actually spend about 25% of their time on this process where just building that",
    "start": "551640",
    "end": "558079"
  },
  {
    "text": "infrastructure to run their infrastructure which means that 25% of their engineering is going towards",
    "start": "558079",
    "end": "563880"
  },
  {
    "text": "something that never actually helps their product it just helps deploy their product",
    "start": "563880",
    "end": "569480"
  },
  {
    "text": "and they're all building the same thing they're all building these same microservices platforms so they're all wasting the",
    "start": "569480",
    "end": "576680"
  },
  {
    "text": "same amount of time and it's hard right there's a lot of pieces to that and so you know they",
    "start": "576680",
    "end": "584200"
  },
  {
    "text": "stop when it's just good enough because why waste the time to keep going as soon as it works well enough to deploy their",
    "start": "584200",
    "end": "590240"
  },
  {
    "text": "product they stop so none of them are great so why should we go serverless",
    "start": "590240",
    "end": "596880"
  },
  {
    "text": "what is the benefit of serverless over this serverless is still going to be a microservices architecture uh in fact",
    "start": "596880",
    "end": "602440"
  },
  {
    "text": "some people even call it a Nano Services architecture but what's nice is that most of that trouble goes away most of",
    "start": "602440",
    "end": "609279"
  },
  {
    "text": "it is just taken care of for you so you don't have to worry about building that platform and the parts you do have to",
    "start": "609279",
    "end": "614800"
  },
  {
    "text": "worry about some of it is even already taken care of part way uh like security for example you get a nice little boost",
    "start": "614800",
    "end": "621760"
  },
  {
    "text": "of security just by the fact that the lambdas tend to only run for seconds or minutes at most so even if you have a",
    "start": "621760",
    "end": "629320"
  },
  {
    "text": "security flaw in your code and someone finds a way in they only have a few seconds to take advantage of that so you",
    "start": "629320",
    "end": "635600"
  },
  {
    "text": "know it's security by obscurity but it helps a little bit and gives you at least a little bit more of a security",
    "start": "635600",
    "end": "643560"
  },
  {
    "text": "system so if we're looking at a good microservices architecture we've got lots of services running each with their",
    "start": "643560",
    "end": "649600"
  },
  {
    "text": "own data store uh if you're Crossing data stores and you don't really have microservices you just have a headache",
    "start": "649600",
    "end": "655040"
  },
  {
    "text": "and a mess because you're going to have problems with that and when you're managing a good",
    "start": "655040",
    "end": "662200"
  },
  {
    "text": "microservices platform you've got all these different things you have to worry about your containers and your Frameworks and your web servers and all",
    "start": "662200",
    "end": "668079"
  },
  {
    "text": "of that and what do all of those have in common well servers server management",
    "start": "668079",
    "end": "673240"
  },
  {
    "text": "you have to manage all of your servers so with servers come a lot of headaches",
    "start": "673240",
    "end": "678399"
  },
  {
    "text": "they come the access control and utilization and hatching and figuring out the right size and all that",
    "start": "678399",
    "end": "684320"
  },
  {
    "text": "different stuff but with serverless it all goes away we end up with a different set of problems",
    "start": "684320",
    "end": "689800"
  },
  {
    "text": "but some of them are taken care of so they're fully managed continuous scaling and so on so in summary basically serus equals",
    "start": "689800",
    "end": "698480"
  },
  {
    "text": "microservices minus the management now that doesn't mean that all of the problems are solved there's",
    "start": "698480",
    "end": "704920"
  },
  {
    "text": "still problems of course uh you still have to worry about you most of the distributed systems problems uh in fact",
    "start": "704920",
    "end": "711279"
  },
  {
    "text": "most distributed system problems are magnified when you're in this type of environment because you've got a lot more services typically since each",
    "start": "711279",
    "end": "718120"
  },
  {
    "text": "function is its own service so let's talk about all of that stuff we'll do it in a little bit but first",
    "start": "718120",
    "end": "724360"
  },
  {
    "text": "what does Lambda do for you they scale automatically uh you can trigger it with an API uh it ensures that the function",
    "start": "724360",
    "end": "730920"
  },
  {
    "text": "is executed it has logging and monitoring built in uh and the pricing model is really easy so the monitoring",
    "start": "730920",
    "end": "738760"
  },
  {
    "text": "by default they give you a bunch of cloudwatch metrics uh invocation duration errors things like that so",
    "start": "738760",
    "end": "745160"
  },
  {
    "text": "that's all just built right in uh the pricing model is you just pick a memory amount and then Network and CPU",
    "start": "745160",
    "end": "752519"
  },
  {
    "text": "are scaled accordingly so all you have to do is say how much memory your function is going to",
    "start": "752519",
    "end": "758519"
  },
  {
    "text": "need and you don't really need to read this page but the important part here is uh this is the cost of running uh Lambda",
    "start": "759279",
    "end": "767320"
  },
  {
    "text": "for a month with about 3 million requests or 1.2 per second and if you",
    "start": "767320",
    "end": "773399"
  },
  {
    "text": "look that that cost is actually a little bit less than a T2 small so if you're doing 3 million or 1.2 a second and you",
    "start": "773399",
    "end": "781079"
  },
  {
    "text": "do it on Lambda instead of a server you're going to save money excuse",
    "start": "781079",
    "end": "786959"
  },
  {
    "text": "me and you get to pay per request it's build in 100 millisecond increments uh",
    "start": "786959",
    "end": "792399"
  },
  {
    "text": "there's no request charges there's no minimums uh there's no per device fees so it's actually a really simple model",
    "start": "792399",
    "end": "799320"
  },
  {
    "text": "uh my entire company is built on Lambda and serverless and we haven't actually paid anything yet because we've stayed",
    "start": "799320",
    "end": "804880"
  },
  {
    "text": "in the free tier so that's how cheap it is so how do you use Lambda let's actually",
    "start": "804880",
    "end": "812240"
  },
  {
    "text": "get into the guts now and talk about how we use Lambda so we start by authoring our code",
    "start": "812240",
    "end": "820399"
  },
  {
    "text": "uh we have their AWS SDK is built right in so you don't have to worry about that",
    "start": "820399",
    "end": "825839"
  },
  {
    "text": "uh you can use node.js and Python and and now C are supported yeah I used to",
    "start": "825839",
    "end": "832360"
  },
  {
    "text": "tell people the one the one thing about that was better about aure was that they had C and now I can't say that anymore",
    "start": "832360",
    "end": "838519"
  },
  {
    "text": "so uh you can bring any Java language or jvm based language as well uh you can bring",
    "start": "838519",
    "end": "844759"
  },
  {
    "text": "any Library you need to you can even bring files along not just libraries but images or SQL like databases as I'll",
    "start": "844759",
    "end": "852079"
  },
  {
    "text": "show you in a little bit things like that so it's pretty flexible and you even get access to sltm on the",
    "start": "852079",
    "end": "859000"
  },
  {
    "text": "box then you have to choose an event source so Lambda can be triggered a lot of different ways you can see there's I",
    "start": "859000",
    "end": "866040"
  },
  {
    "text": "think 15 16 on there now uh I just had to update the slide a few days ago",
    "start": "866040",
    "end": "871079"
  },
  {
    "text": "because they had added more triggers they're constantly adding more triggers uh the most common triggers are API",
    "start": "871079",
    "end": "877519"
  },
  {
    "text": "Gateway uh S3 or other lambdas but there's lots of other choices sces your Echo and so on",
    "start": "877519",
    "end": "886240"
  },
  {
    "text": "you all have an echo now so you can all do that uh and then you choose your",
    "start": "886240",
    "end": "891279"
  },
  {
    "text": "resources like I said so you have to choose your memory and then everything else is scaled with",
    "start": "891279",
    "end": "896600"
  },
  {
    "text": "it uh and then you choose your authorization model so you have to choose whether you're going to use their",
    "start": "896600",
    "end": "902000"
  },
  {
    "text": "default VPC or you're going to break the glass and put it into your own VPC uh so",
    "start": "902000",
    "end": "907800"
  },
  {
    "text": "we'll talk about the pros and cons of that in a in a little right here actually uh so the pros and cons are",
    "start": "907800",
    "end": "913920"
  },
  {
    "text": "that you get uh you know if you don't break the glass everything sort of just works but it's still in a VPC if you put",
    "start": "913920",
    "end": "919759"
  },
  {
    "text": "it in your own VPC you get access to your own internal resources uh but you do need to worry about things like Enis",
    "start": "919759",
    "end": "927320"
  },
  {
    "text": "and the route table and the security and things like that uh and then you deploy your code so",
    "start": "927320",
    "end": "934000"
  },
  {
    "text": "there's a couple ways to do that you can use Amazon's goey or hang yourself uh",
    "start": "934000",
    "end": "940399"
  },
  {
    "text": "you can upload it directly to S3 or you could use a third party",
    "start": "940399",
    "end": "946360"
  },
  {
    "text": "tool and so when you're using a if you're not using a third party tool you need to take care of all of the these",
    "start": "946360",
    "end": "952560"
  },
  {
    "text": "different parts you got to write your code you have to zip it up you have to get all of your IM am roles correct set",
    "start": "952560",
    "end": "958519"
  },
  {
    "text": "all your permissions correctly test the function Etc so the solution here is if",
    "start": "958519",
    "end": "964000"
  },
  {
    "text": "you use a tool then you're going to get a lot of that taken care of for you and",
    "start": "964000",
    "end": "969079"
  },
  {
    "text": "there's a bunch of tools out there here's just a sampling of some uh each one of them has their pros and cons uh",
    "start": "969079",
    "end": "975759"
  },
  {
    "text": "we've got Kappa which was written by the same person who wrote Botto so if you're into python that's could be a good one",
    "start": "975759",
    "end": "981560"
  },
  {
    "text": "although even the Kappa author now says use Apex uh Apex is really smooth",
    "start": "981560",
    "end": "986600"
  },
  {
    "text": "polished and I'm going to show you a demo of Apex Tex in a little bit here uh and I'm also going to show you a demo of",
    "start": "986600",
    "end": "992519"
  },
  {
    "text": "Kappa uh there's other ones there's serverless which used to be called Jaws open source framework uh that one is",
    "start": "992519",
    "end": "998800"
  },
  {
    "text": "nice because it uses cloud formation so if you're already using cloud formation it ties in really nicely oh and Apex is",
    "start": "998800",
    "end": "1004959"
  },
  {
    "text": "really great if you're already using terraform uh and then uh there's chalice",
    "start": "1004959",
    "end": "1010000"
  },
  {
    "text": "which is from Amazon itself so uh chalice is really great if you want to write python rest apis with API Gateway",
    "start": "1010000",
    "end": "1017480"
  },
  {
    "text": "uh that's the one thing it's good at uh and then there's serverless Express and that's also from Amazon and so that's",
    "start": "1017480",
    "end": "1024079"
  },
  {
    "text": "that's growing the point here though is that uh there is still some work to be",
    "start": "1024079",
    "end": "1029678"
  },
  {
    "text": "done on tooling and deployment around Lambda management around Lambda there's a lot of these tools they're all under",
    "start": "1029679",
    "end": "1035520"
  },
  {
    "text": "active development and growing and getting better uh but there's still some work to be done",
    "start": "1035520",
    "end": "1040918"
  },
  {
    "text": "there and I mentioned the API Gateway so API Gateway and Lambda work really well together they're a great way to build a",
    "start": "1040919",
    "end": "1047240"
  },
  {
    "text": "rest API for the web uh so Amazon Gateway gives you the the benefits of a",
    "start": "1047240",
    "end": "1052720"
  },
  {
    "text": "unified API you get the Dos protection uh as mentioned in the keynote the other",
    "start": "1052720",
    "end": "1059039"
  },
  {
    "text": "day they actually have two levels of it now but you even got it before uh and you can authenticate your requests so it",
    "start": "1059039",
    "end": "1065440"
  },
  {
    "text": "basically makes sure that your lambdas don't get overwhelmed and sort of is the Gateway hence the name to your",
    "start": "1065440",
    "end": "1072600"
  },
  {
    "text": "lambdas so let's talk about some Lambda use cases when would you actually use Lambda there's the application backend",
    "start": "1072600",
    "end": "1078559"
  },
  {
    "text": "use case where you can use it to drive your application uh the data processing use case so if you know remember from",
    "start": "1078559",
    "end": "1085039"
  },
  {
    "text": "the triggers page there's a lot of different triggers around things like Amazon Kinesis and SNS things like that",
    "start": "1085039",
    "end": "1091400"
  },
  {
    "text": "so you can use it for data processing uh command and control so how many of you have that like one special cron box that",
    "start": "1091400",
    "end": "1098240"
  },
  {
    "text": "does all of those those crons man nobody wants to admit to bad practices",
    "start": "1098240",
    "end": "1103320"
  },
  {
    "text": "anymore but uh you can replace all of those with Lambda which is great that's actually what Netflix is using command",
    "start": "1103320",
    "end": "1109159"
  },
  {
    "text": "and control 4 as I found out recently or I mean Lambda 4 uh and really it's great",
    "start": "1109159",
    "end": "1114760"
  },
  {
    "text": "for any functional or event-based system so anytime you have a system where",
    "start": "1114760",
    "end": "1119799"
  },
  {
    "text": "something happens and you do something which is a lot of your systems probably Lambda is a good good use case for",
    "start": "1119799",
    "end": "1127880"
  },
  {
    "text": "it so let's talk about a simple example a data processing example let's say you",
    "start": "1127880",
    "end": "1133240"
  },
  {
    "text": "have files that you want to upload to S3 and once they get there you want to compress them super easy to just set up",
    "start": "1133240",
    "end": "1139240"
  },
  {
    "text": "a trigger so S3 will trigger the Lambda the Lambda will grab the file run your",
    "start": "1139240",
    "end": "1144640"
  },
  {
    "text": "compression upload it back to S3 and now you've got your file there you didn't have to spin up any servers or anything",
    "start": "1144640",
    "end": "1150159"
  },
  {
    "text": "like that it just was taken care of when the file got there lamb is great for serverless",
    "start": "1150159",
    "end": "1156480"
  },
  {
    "text": "websites so recently there's been a big trend of running static net uh websites",
    "start": "1156480",
    "end": "1162080"
  },
  {
    "text": "uh that's actually a different service called netlify that's up there in the corner and uh it was great you could run",
    "start": "1162080",
    "end": "1168559"
  },
  {
    "text": "your static content but you couldn't do anything like have comments or anything like that so with Lambda you you can do",
    "start": "1168559",
    "end": "1174039"
  },
  {
    "text": "an API Gateway call and with some little JavaScript on your static website you call out you trigger a Lambda it stores",
    "start": "1174039",
    "end": "1181159"
  },
  {
    "text": "in a Dynamo and you've got comments on your static website so again you don't have to do any servers you don't have to",
    "start": "1181159",
    "end": "1187200"
  },
  {
    "text": "worry about scaling anything like that you just it's sort of all magic and just works here's a little bit more",
    "start": "1187200",
    "end": "1193480"
  },
  {
    "text": "complicated example of the API Gateway uh where you've got mobile apps and websites and other command line services",
    "start": "1193480",
    "end": "1200880"
  },
  {
    "text": "all talking uh through cloudfront to the API Gateway the API Gateway is actually",
    "start": "1200880",
    "end": "1206720"
  },
  {
    "text": "doing some caching for you because it can do that it's putting logs into cloudwatch it's talking to Lambda",
    "start": "1206720",
    "end": "1212720"
  },
  {
    "text": "functions in the back end it's talking to ec2 servers in the back end so it's extremely flexible around what you can",
    "start": "1212720",
    "end": "1220240"
  },
  {
    "text": "do with Gateway and Lambda and all of that the mobile backend use case is kind",
    "start": "1220240",
    "end": "1226480"
  },
  {
    "text": "of the same you've got your mobile uh let's say you want to send notifications because you're making it the next Tinder",
    "start": "1226480",
    "end": "1232440"
  },
  {
    "text": "clone and so you know you've got the the person does a thing and it triggers a Lambda which puts a bunch of items into",
    "start": "1232440",
    "end": "1238799"
  },
  {
    "text": "the snsq to send notifications to all of the people",
    "start": "1238799",
    "end": "1244440"
  },
  {
    "text": "nearby uh another use case is the real-time analytics engineer uh engine",
    "start": "1244640",
    "end": "1249760"
  },
  {
    "text": "so you've got your say your Twitter stream your watching the hashtag reinvent for example uh and every time",
    "start": "1249760",
    "end": "1256760"
  },
  {
    "text": "you see that you put it into kinesis Kinesis can trigger a Lambda on every event that comes in so Kinesis triggers",
    "start": "1256760",
    "end": "1263559"
  },
  {
    "text": "your Lambda to do some processing stored in Dynamo or whatever and then you provide a website to the user that's you",
    "start": "1263559",
    "end": "1270919"
  },
  {
    "text": "know that so they can look at the the trends and the analytics and all of that",
    "start": "1270919",
    "end": "1276559"
  },
  {
    "text": "stuff uh and then this uh example is important because it points out that you don't have to trigger just one Lambda",
    "start": "1276559",
    "end": "1282919"
  },
  {
    "text": "function from an event you can trigger multiple functions so let's say you're doing some uh live streaming right and",
    "start": "1282919",
    "end": "1289520"
  },
  {
    "text": "you have upload into cloudfront it drops the M the big file into S3 and when",
    "start": "1289520",
    "end": "1295520"
  },
  {
    "text": "you're doing video streaming you have to transcode all of your files to all the different devices that you want to",
    "start": "1295520",
    "end": "1300679"
  },
  {
    "text": "support so you can trigger a bunch of LDA functions all at the same time you can trigger your high quality copy and",
    "start": "1300679",
    "end": "1306760"
  },
  {
    "text": "your 480 copy and your 1080 and your 360 and all so on and if you actually look",
    "start": "1306760",
    "end": "1311960"
  },
  {
    "text": "at the bottom you'll see that one of the things that I've triggered is a third-party thumbnailing service so you",
    "start": "1311960",
    "end": "1317960"
  },
  {
    "text": "can do all this you can glue it all together all of those lambdas are going to run they're all going to drop their",
    "start": "1317960",
    "end": "1323159"
  },
  {
    "text": "files back in S3 uh and then cloudfront streaming will stream all of that back out to all the devices using the correct",
    "start": "1323159",
    "end": "1330640"
  },
  {
    "text": "codecs and correct files so the important message here is you can have a a one to many trigger one event can",
    "start": "1330640",
    "end": "1337120"
  },
  {
    "text": "trigger many things happening in parallel so let me get into uh a demo",
    "start": "1337120",
    "end": "1343440"
  },
  {
    "text": "here so I wrote a little program I'm an engineer but I own a company which means I'm in charge of naming products and",
    "start": "1343440",
    "end": "1349240"
  },
  {
    "text": "companies but I'm not good at that so as an engineer I wrote a program to do it for me uh so I have this program that",
    "start": "1349240",
    "end": "1356480"
  },
  {
    "text": "basically I took an engram database from Google and it generates English looking words you can give it prefixes",
    "start": "1356480",
    "end": "1364360"
  },
  {
    "text": "suffixes and so this is a Kappa example so here's what the Kappa yaml file looks",
    "start": "1364360",
    "end": "1369799"
  },
  {
    "text": "like uh it has some environment variables there and you can actually go very deep into those variables you can",
    "start": "1369799",
    "end": "1375919"
  },
  {
    "text": "Define entire uh schemas of permissions if you really want to but the important",
    "start": "1375919",
    "end": "1381559"
  },
  {
    "text": "part is that last section at the bottom you give it a name you say how much memory you're going to use what your",
    "start": "1381559",
    "end": "1387760"
  },
  {
    "text": "default timeout is going to be and that's pretty much all you have to do we've got the code itself so there's",
    "start": "1387760",
    "end": "1395240"
  },
  {
    "text": "more code to it than that but this is the main Handler so when you define your lambdas you tell uh Lambda this is the",
    "start": "1395240",
    "end": "1402679"
  },
  {
    "text": "function that you call first so whatever was the trigger whatever data was there comes into the function as the event uh",
    "start": "1402679",
    "end": "1410120"
  },
  {
    "text": "and then you do whatever it is you need to do with the event and sometimes a context is passed",
    "start": "1410120",
    "end": "1415919"
  },
  {
    "text": "as well uh this is just a simple Json file for testing and uh this is that engrams",
    "start": "1415919",
    "end": "1422080"
  },
  {
    "text": "database and what's important here is that that's a sqlite database and that sqlite database actually gets packaged",
    "start": "1422080",
    "end": "1428320"
  },
  {
    "text": "up with the function and uploaded so the function never has to reach out outside",
    "start": "1428320",
    "end": "1434360"
  },
  {
    "text": "to the internet or anything to a database it's all right there CU I can do that that I can upload that that SQL",
    "start": "1434360",
    "end": "1440520"
  },
  {
    "text": "light database which is really nice so let's take a look at how that works so we do our Kappa deploy so we've written",
    "start": "1440520",
    "end": "1447320"
  },
  {
    "text": "the code it deploys out and you'll notice that it's creating the policies",
    "start": "1447320",
    "end": "1452480"
  },
  {
    "text": "it's creating the role and you see how it paused on creating function because what it was actually doing was zipping",
    "start": "1452480",
    "end": "1458200"
  },
  {
    "text": "everything up uploading it to S3 calling the right apis to say here's the function so it's taking care of all of",
    "start": "1458200",
    "end": "1464080"
  },
  {
    "text": "that in the background and then we can invoke our tests so we have that test Json on and it just calls it out and a",
    "start": "1464080",
    "end": "1471200"
  },
  {
    "text": "lot of the Frameworks work basically the same way uh in Apex you would uh get your your stats from a different call",
    "start": "1471200",
    "end": "1477480"
  },
  {
    "text": "but you can just tail that in another window but they're all pretty much the same and there we go we've generated a bunch of Ops related words like op",
    "start": "1477480",
    "end": "1484559"
  },
  {
    "text": "sender that's a pretty good one so if you're looking for a company name uh and then let's say that I want",
    "start": "1484559",
    "end": "1492080"
  },
  {
    "text": "more words 10 isn't enough I didn't get a good variety whatever it is right so I just change my thing and I say I would",
    "start": "1492080",
    "end": "1498440"
  },
  {
    "text": "like to see 20 words instead so I'm going to invoke my test again and I'm going to see what happens when I run it",
    "start": "1498440",
    "end": "1505960"
  },
  {
    "text": "and you'll notice that it's taking some time and remember our default timeout was 3 seconds so this errored out",
    "start": "1505960",
    "end": "1512399"
  },
  {
    "text": "because it took more than 3 seconds so we got to fix that well luckily that's",
    "start": "1512399",
    "end": "1517720"
  },
  {
    "text": "really easy to fix we just pull up our emo file change our timeout let's give it 30 seconds to make sure that we've",
    "start": "1517720",
    "end": "1523840"
  },
  {
    "text": "got plenty of time to run uh and then I'm going to do a uh deployment again",
    "start": "1523840",
    "end": "1529200"
  },
  {
    "text": "so we're going to deploy it out and you'll see that it does all of its stuff and then we're going to run our test",
    "start": "1529200",
    "end": "1535679"
  },
  {
    "text": "again uh and this time it's going to take more than 3 seconds but not much more and then we're going to get our",
    "start": "1535679",
    "end": "1541679"
  },
  {
    "text": "results so obsess it's a good one uh and what you'll notice here is when Kappa",
    "start": "1541679",
    "end": "1548240"
  },
  {
    "text": "did its deployment the only thing it did was update the configuration it was smart enough to know that the function",
    "start": "1548240",
    "end": "1554039"
  },
  {
    "text": "didn't change the roles didn't change so it didn't have to do anything there and all of the tooling Frameworks are the",
    "start": "1554039",
    "end": "1559919"
  },
  {
    "text": "same way they're smart enough to know that there's only so much that needed to be changed so the deployment was fairly",
    "start": "1559919",
    "end": "1565120"
  },
  {
    "text": "quick and you'll see here that our runtime duration was 4.2 seconds which is why I timed out the first time and",
    "start": "1565120",
    "end": "1571039"
  },
  {
    "text": "worked the second time so now let's talk over here to",
    "start": "1571039",
    "end": "1576840"
  },
  {
    "text": "Alexa for another demo Alexa ask talk demo",
    "start": "1576840",
    "end": "1583720"
  },
  {
    "text": "hi what is the name of this session",
    "start": "1585919",
    "end": "1590240"
  },
  {
    "text": "what is",
    "start": "1593240",
    "end": "1595559"
  },
  {
    "text": "Lambda okay so how did I oh stop no I",
    "start": "1602720",
    "end": "1609450"
  },
  {
    "text": "[Laughter] said",
    "start": "1609450",
    "end": "1613720"
  },
  {
    "text": "stop all right excellent so how did I do that",
    "start": "1614480",
    "end": "1619520"
  },
  {
    "text": "first I had to use the Alexa console so you define a couple of uh intents you",
    "start": "1619520",
    "end": "1625360"
  },
  {
    "text": "tell it what you wanted to talk about uh if you look in the middle there you'll see list of services so when you're",
    "start": "1625360",
    "end": "1631760"
  },
  {
    "text": "defining a custom uh slot variable is what they're called when you want it to look for a particular word in a sentence",
    "start": "1631760",
    "end": "1638760"
  },
  {
    "text": "uh you have to tell it what words to look for uh so you'll see Lambda in there and you'll see Kinesis in there",
    "start": "1638760",
    "end": "1644360"
  },
  {
    "text": "because I'm going to mention that in a second uh and then down at the bottom you give it some samp utterances which teach it what to",
    "start": "1644360",
    "end": "1651320"
  },
  {
    "text": "do and then this is what an apex deployment looks like you'll notice that it's extremely similar to a cppa",
    "start": "1651320",
    "end": "1657600"
  },
  {
    "text": "deployment but uh basically this is the Apex this is how it's smoother it has an",
    "start": "1657600",
    "end": "1663279"
  },
  {
    "text": "initialization so you don't even have to put your code in the right place first you just say initialize a project and",
    "start": "1663279",
    "end": "1669960"
  },
  {
    "text": "all and it takes care of it all for you it's created the file it's created the IM IM roles it's created the directory",
    "start": "1669960",
    "end": "1675840"
  },
  {
    "text": "structure for you it's created that a test function a hello world so all I did",
    "start": "1675840",
    "end": "1681120"
  },
  {
    "text": "was drop in a replacement for hello world and then I do a deploy and it deploys out my function",
    "start": "1681120",
    "end": "1689000"
  },
  {
    "text": "and I'm all set so Alexa ask talk demo tell me about",
    "start": "1689000",
    "end": "1698720"
  },
  {
    "text": "Kinesis S I didn't okay so we didn't write the code",
    "start": "1698720",
    "end": "1704039"
  },
  {
    "text": "for that yet it didn't work uh one thing to that's really important by the way is that when you are doing these uh Lambda",
    "start": "1704039",
    "end": "1710480"
  },
  {
    "text": "functions you need to go to that third tab the triggers Tab and make sure you set the Alexa skills kit otherwise your",
    "start": "1710480",
    "end": "1717320"
  },
  {
    "text": "tests are going to work perfectly but your your device will never actually talk to your your Lambda this is what",
    "start": "1717320",
    "end": "1723720"
  },
  {
    "text": "actually took me the longest in putting this entire demo together was remembering that so the whole thing took",
    "start": "1723720",
    "end": "1729760"
  },
  {
    "text": "me like 40 minutes to put together and 20 of it was fig figuring out why it wasn't",
    "start": "1729760",
    "end": "1735720"
  },
  {
    "text": "working so let's go and fix fix our problem uh we'll go and edit the function and I'll tell you more about",
    "start": "1735720",
    "end": "1742240"
  },
  {
    "text": "this in a second I've cheated and I've already written the code which is a single line in an array or in a hash I mean uh so I've now",
    "start": "1742240",
    "end": "1750440"
  },
  {
    "text": "added the ability to understand that I run my deployment it takes a little while to update the function because",
    "start": "1750440",
    "end": "1756480"
  },
  {
    "text": "it's got to zip it back up and sometimes there's a little bit of lag with S3 or whatever uh and that's it now we're",
    "start": "1756480",
    "end": "1764039"
  },
  {
    "text": "done so now we say Alexa ask talk demo",
    "start": "1764039",
    "end": "1769480"
  },
  {
    "text": "was",
    "start": "1769480",
    "end": "1771720"
  },
  {
    "text": "up Al Alexa ask talk demo tell me about Amazon",
    "start": "1775559",
    "end": "1782158"
  },
  {
    "text": "Kinesis yes you do tell me about Amazon",
    "start": "1784159",
    "end": "1789480"
  },
  {
    "text": "Kinesis there we go okay so as you can see she doesn't understand English quite",
    "start": "1789919",
    "end": "1796320"
  },
  {
    "text": "so well yet but uh the the code was all there okay you can turn Alexa down now",
    "start": "1796320",
    "end": "1802559"
  },
  {
    "text": "thank you bye Alexa all right so we're all good",
    "start": "1802559",
    "end": "1808960"
  },
  {
    "text": "there this is what you get for doing live demos with Alexa so let's talk about the code what",
    "start": "1808960",
    "end": "1815760"
  },
  {
    "text": "does that code look like uh at the top we've got our Imports uh we've got our intent definitions uh so uh there's some",
    "start": "1815760",
    "end": "1824039"
  },
  {
    "text": "ba default intents that all the lambdas are supposed to support like stop and continue and things like that then we've",
    "start": "1824039",
    "end": "1831120"
  },
  {
    "text": "got uh the thing to do when it's first launched where it says hello and uh a",
    "start": "1831120",
    "end": "1836200"
  },
  {
    "text": "couple of different basically all the different intents and what to do with them and then this is pretty much the",
    "start": "1836200",
    "end": "1842799"
  },
  {
    "text": "bulk of the program so this is handling all the different intents so there you can see where I said stop and it said",
    "start": "1842799",
    "end": "1849559"
  },
  {
    "text": "thank you for coming uh you can say uh I didn't even do the uh the welcome one",
    "start": "1849559",
    "end": "1855240"
  },
  {
    "text": "that says I hope you're learning a lot today uh and uh all the different functionality",
    "start": "1855240",
    "end": "1860880"
  },
  {
    "text": "there uh and then this is the more advanced function the one that has the slots well this is the service name one",
    "start": "1860880",
    "end": "1867720"
  },
  {
    "text": "where I asked it about Lambda and Kinesis uh and so this is where you take the slot data that's passed to you and",
    "start": "1867720",
    "end": "1873440"
  },
  {
    "text": "you do something with the slot data but it's all fairly simple to do and then",
    "start": "1873440",
    "end": "1878679"
  },
  {
    "text": "you do this build speech response at the end so you just put it all together and spit it back out and I'm actually going",
    "start": "1878679",
    "end": "1884159"
  },
  {
    "text": "to put this code up on uh GitHub uh sometime maybe today or tomorrow so you can you can download it and play with it",
    "start": "1884159",
    "end": "1890720"
  },
  {
    "text": "all uh you can Google around for some basic Alexa demos and find all of this most of this code is actually really",
    "start": "1890720",
    "end": "1896360"
  },
  {
    "text": "standard and the same from function to function and here's some example of that",
    "start": "1896360",
    "end": "1902600"
  },
  {
    "text": "logging so as I was saying those words I was generating logs and it was saying here's what happened here's what",
    "start": "1902600",
    "end": "1908440"
  },
  {
    "text": "happened here's how long it took how much you got charged uh if you got an error it'll put the stack Trace into",
    "start": "1908440",
    "end": "1914399"
  },
  {
    "text": "your cloudwatch logs you can output using the built-in logging of python or",
    "start": "1914399",
    "end": "1919480"
  },
  {
    "text": "whatever your favorite language is to put log entries here the only major downside using cloudwatch logs is that",
    "start": "1919480",
    "end": "1925799"
  },
  {
    "text": "there's a little bit of a delay so sometimes you might get an error and then you have to wait 20 30 seconds for it to show up in the log uh which can be",
    "start": "1925799",
    "end": "1932679"
  },
  {
    "text": "a little frustrating when you're trying to rapidly debug but that's about it the important Point here is that I went from",
    "start": "1932679",
    "end": "1939240"
  },
  {
    "text": "the conception of this demo to prod in in just minutes like I said it only took about 40 minutes and 20 of that was",
    "start": "1939240",
    "end": "1944480"
  },
  {
    "text": "figuring out that I forgot to press that one button so it's really quick to deploy these skills now that you all",
    "start": "1944480",
    "end": "1951600"
  },
  {
    "text": "have your Echo dots you can all go back home and try deploying these skills if you",
    "start": "1951600",
    "end": "1956720"
  },
  {
    "text": "want and uh so let's let's dive a little deeper into uh this is an a Kappa config",
    "start": "1956720",
    "end": "1962480"
  },
  {
    "text": "again so you'll notice that I have Dev and prod uh Apex works the same way where you can Define different environments uh Apex is actually really",
    "start": "1962480",
    "end": "1969799"
  },
  {
    "text": "nice you can Define every function can have its own config that supersedes the master config uh so you can have new",
    "start": "1969799",
    "end": "1976519"
  },
  {
    "text": "functionality that you mark As Dev until it's prod or whatever you want to do",
    "start": "1976519",
    "end": "1981880"
  },
  {
    "text": "uh here is a a codebase this is actually the codebase for my company so it's a little bit more advanced a little bit",
    "start": "1981880",
    "end": "1988080"
  },
  {
    "text": "more in depth uh you've got the Capa yaml file with each function so each directory represent represents a",
    "start": "1988080",
    "end": "1994679"
  },
  {
    "text": "different Lambda function within the product uh each one has its own config",
    "start": "1994679",
    "end": "1999799"
  },
  {
    "text": "file uh there I didn't talk about these Json files but these are basically uh environment configurations so if it's",
    "start": "1999799",
    "end": "2006279"
  },
  {
    "text": "Dev use this one if it's prod use this one uh we've got the requirements. text",
    "start": "2006279",
    "end": "2011799"
  },
  {
    "text": "which is a python specific thing that tells it which libraries to use but the other languages have similar stuff the",
    "start": "2011799",
    "end": "2018039"
  },
  {
    "text": "nice thing about having this here is you can have your deployment tooling like Apex automatically uh build uh download",
    "start": "2018039",
    "end": "2025360"
  },
  {
    "text": "and get the requirements and libraries to make sure that you have the correct ones the latest ones whatever is",
    "start": "2025360",
    "end": "2033279"
  },
  {
    "text": "necessary and then these are the actual artifacts that are generated so these are the zip fil that are actually being",
    "start": "2033279",
    "end": "2038639"
  },
  {
    "text": "uploaded to S3 uh and so they're here you can unzip them you can inspect them you can modify them if you want to",
    "start": "2038639",
    "end": "2045519"
  },
  {
    "text": "although that's probably not a good idea uh but you can do whatever you need to so if you're debugging whatever you can",
    "start": "2045519",
    "end": "2051079"
  },
  {
    "text": "actually look at those zip files and then here's another look at that directory structure and you'll",
    "start": "2051079",
    "end": "2057200"
  },
  {
    "text": "notice that those first top functions there are much much bigger than the rest and the reason for that is because they",
    "start": "2057200",
    "end": "2062919"
  },
  {
    "text": "have their own libraries in them and this gets to one of sort of the problems that we still have to deal with which is",
    "start": "2062919",
    "end": "2069520"
  },
  {
    "text": "if you want a particular library for multiple functions you have to include it in each function so you're there's",
    "start": "2069520",
    "end": "2075520"
  },
  {
    "text": "some duplication there you're uploading the same libraries over and over there's a couple of workarounds to that uh one",
    "start": "2075520",
    "end": "2082280"
  },
  {
    "text": "of them is if you're really uh uploading the same Library often you could potentially create a separate Lambda",
    "start": "2082280",
    "end": "2087960"
  },
  {
    "text": "function that just does whatever that Library does but then there's a whole host of other issues with that if it's",
    "start": "2087960",
    "end": "2093000"
  },
  {
    "text": "like a you know a very language specific library or doesn't work well with a Json on API or whatever so it's still a",
    "start": "2093000",
    "end": "2100280"
  },
  {
    "text": "problem something we still have to deal with uh because it does count against your quota multiple times uh I'm sure",
    "start": "2100280",
    "end": "2106320"
  },
  {
    "text": "they'll eventually have some solution to that though so really the whole point of all of this is that it's really easy to",
    "start": "2106320",
    "end": "2113680"
  },
  {
    "text": "get these things up and running quickly it's really easy to get all this deployment hopefully you got a little bit out of those demos to see how easy",
    "start": "2113680",
    "end": "2120839"
  },
  {
    "text": "it is and and you'll go home and try it yourself with your Echo and what's really nice about Lambda",
    "start": "2120839",
    "end": "2127480"
  },
  {
    "text": "is is that it basically lets you manage your infrastructure and your code in the same place now your devops engineers",
    "start": "2127480",
    "end": "2133880"
  },
  {
    "text": "again are going to hate this because it means that there developers are now managing the infrastructure but it",
    "start": "2133880",
    "end": "2139800"
  },
  {
    "text": "actually works out pretty well especially if you make them responsible for answering the pages in the middle of the",
    "start": "2139800",
    "end": "2145200"
  },
  {
    "text": "night so let's talk about some tips and tricks for Lambda some things that I've learned over",
    "start": "2145200",
    "end": "2152559"
  },
  {
    "text": "time so a lot of these tips are actually just distributed systems tips uh because like",
    "start": "2154760",
    "end": "2160839"
  },
  {
    "text": "I mentioned before basically Lambda and serverless exacerbates all of your distributed systems problems so you need",
    "start": "2160839",
    "end": "2168119"
  },
  {
    "text": "to really think about these distributed systems issues uh so the first one is try to use immutable data whenever you",
    "start": "2168119",
    "end": "2174000"
  },
  {
    "text": "can a lot of people don't think about it but if you just step back and think is there a way for me to write this code so",
    "start": "2174000",
    "end": "2180920"
  },
  {
    "text": "that I don't have to keep updating something and instead can keep more of a Time series of this happened this",
    "start": "2180920",
    "end": "2186119"
  },
  {
    "text": "happened this happened so that then you can do a pending only and you don't have to change data because every time you",
    "start": "2186119",
    "end": "2192280"
  },
  {
    "text": "change data you have to worry about synchronization so if you can write your code without changing data then you",
    "start": "2192280",
    "end": "2197480"
  },
  {
    "text": "eliminate that that hassle obviously it doesn't work everywhere but it can work",
    "start": "2197480",
    "end": "2202520"
  },
  {
    "text": "in more places than a lot of people realize and the reason this is important is because uh moving data around is the",
    "start": "2202520",
    "end": "2210520"
  },
  {
    "text": "biggest cost your distributed system will incur and not just monetary cost but complexity cost and time cost as",
    "start": "2210520",
    "end": "2217160"
  },
  {
    "text": "well but you need to move data around for",
    "start": "2217160",
    "end": "2223200"
  },
  {
    "text": "reliability right especially if you're mutating data you got to update all your caches and invalidate them and so on and",
    "start": "2223200",
    "end": "2229040"
  },
  {
    "text": "so forth so it's a trade-off between reliability uh and your cost of moving data around and you have to figure out",
    "start": "2229040",
    "end": "2235960"
  },
  {
    "text": "what that cost balance is but there one of the solutions is to use Q's as much",
    "start": "2235960",
    "end": "2241040"
  },
  {
    "text": "as possible and you can do this when you're doing Lambda you can put uh into a Q and then read from a que uh and now",
    "start": "2241040",
    "end": "2247160"
  },
  {
    "text": "with step functions they take care of a lot of that for you which is awesome uh you can it can take care of a lot of the",
    "start": "2247160",
    "end": "2253680"
  },
  {
    "text": "make sure this gets run and this data gets over here so uh step functions is sort of a form of",
    "start": "2253680",
    "end": "2259280"
  },
  {
    "text": "cues kind of applies the same uh and uh you know basically cue",
    "start": "2259280",
    "end": "2265000"
  },
  {
    "text": "anything when you're writing to a data store so don't just write to your data store put it into a queue to write to your data store this will give you a",
    "start": "2265000",
    "end": "2271599"
  },
  {
    "text": "nice little buffer and it gives you great Insight because you can see the right volume and if your data store is",
    "start": "2271599",
    "end": "2277119"
  },
  {
    "text": "keeping up up and so on although one interesting thing is this is a typical",
    "start": "2277119",
    "end": "2282760"
  },
  {
    "text": "what's my Q depth monitor right if you have a Q you probably have a graph that shows you how many items in the que but",
    "start": "2282760",
    "end": "2289280"
  },
  {
    "text": "my question to you is at second at 12 seconds what happened you can't tell right you have",
    "start": "2289280",
    "end": "2295400"
  },
  {
    "text": "no idea if if a lot of stuff just came in or if your processor slowed down so I",
    "start": "2295400",
    "end": "2301720"
  },
  {
    "text": "I want to introduce you to the concept or remind you if you already know of a cumulative flow diagram I think these",
    "start": "2301720",
    "end": "2307240"
  },
  {
    "text": "are really important what this tells you is how many things come in and leave separately so now you can see at second",
    "start": "2307240",
    "end": "2314119"
  },
  {
    "text": "12 exactly what happened you know that your processor slowed down because things were not departing as quickly as",
    "start": "2314119",
    "end": "2319839"
  },
  {
    "text": "they were arriving so if you aren't using these look it up cumulative flow diagram big",
    "start": "2319839",
    "end": "2327480"
  },
  {
    "text": "fan another uh some other important tips so limit your function size uh so",
    "start": "2328119",
    "end": "2333800"
  },
  {
    "text": "implementation details are supposed to be hidden but in reality it something has to start up and load at least the",
    "start": "2333800",
    "end": "2340000"
  },
  {
    "text": "first time you run that function uh and so remember that uh the function or uh",
    "start": "2340000",
    "end": "2346480"
  },
  {
    "text": "it's it's basically a container right so they're spinning up a container for you to run this function uh so it's going to",
    "start": "2346480",
    "end": "2351640"
  },
  {
    "text": "take a little while if you're using python or node or something it'll take like a second if you're using Java it",
    "start": "2351640",
    "end": "2356920"
  },
  {
    "text": "could take like 15 seconds because the whole jvm has to start up every time uh so this is a much bigger problem with",
    "start": "2356920",
    "end": "2363000"
  },
  {
    "text": "jvm based languages but uh it's it's important to to try to limit that so",
    "start": "2363000",
    "end": "2368280"
  },
  {
    "text": "that the you can get your startup time down uh and then remember that execution is asynchronous unless of course you're",
    "start": "2368280",
    "end": "2374079"
  },
  {
    "text": "using the step functions uh but your functions will run in parallel so it's important to remember because some",
    "start": "2374079",
    "end": "2380400"
  },
  {
    "text": "people think that if they call out to two they're going to run in series but it doesn't work that way uh and if you",
    "start": "2380400",
    "end": "2387040"
  },
  {
    "text": "call one to the next they might the second one might actually finish first uh and then don't assume that that",
    "start": "2387040",
    "end": "2393280"
  },
  {
    "text": "function container is going to be there so on the back end that that container will stick around for a while so",
    "start": "2393280",
    "end": "2398359"
  },
  {
    "text": "subsequent requests to the same function will call the same container sometimes so if you know this you can take",
    "start": "2398359",
    "end": "2404680"
  },
  {
    "text": "advantage of it you can do something like if you had to download a big chunk of data put it into in memory or a",
    "start": "2404680",
    "end": "2410800"
  },
  {
    "text": "global variable or something like that and then go and the next time you run your code see if that variable's already",
    "start": "2410800",
    "end": "2416160"
  },
  {
    "text": "populated because if you got a container reuse it might already be there and it'll save you some execution time of",
    "start": "2416160",
    "end": "2421680"
  },
  {
    "text": "going out and getting that data again uh set up alarms and all your",
    "start": "2421680",
    "end": "2427359"
  },
  {
    "text": "cloudwatch metrics so they give you a bunch of cloudwatch metrics it's really important to look at the alarms especially the error graph uh we we were",
    "start": "2427359",
    "end": "2435480"
  },
  {
    "text": "running without the alarms and all of a sudden I just happened to go look at the graphs and saw that one of the air graphs is off the charts uh so just set",
    "start": "2435480",
    "end": "2443440"
  },
  {
    "text": "up those alarms right away and you'll be much happier uh avoid uh throttling so um",
    "start": "2443440",
    "end": "2451280"
  },
  {
    "text": "when lambdas call directly to other services they're going to be throttled the same way that any like ec2 is or",
    "start": "2451280",
    "end": "2457000"
  },
  {
    "text": "whatever ever but one little trick trick is that SNS sqs they have different limits so to calling these same uh",
    "start": "2457000",
    "end": "2464680"
  },
  {
    "text": "services so if you push it through one of Amazon's queuing systems then you get",
    "start": "2464680",
    "end": "2470000"
  },
  {
    "text": "to take advantage of some higher limits uh and then beware of infinite Loops so this this one bit us uh you can",
    "start": "2470000",
    "end": "2478599"
  },
  {
    "text": "have a Lambda function call another Lambda function and if that second one calls back to the first one then you're",
    "start": "2478599",
    "end": "2484119"
  },
  {
    "text": "having a bad time I I don't have enough money to find what happens if you let it just keep going forever but I assume",
    "start": "2484119",
    "end": "2491119"
  },
  {
    "text": "that it's bad because your pocketbook is not going to like you uh this happened to us we got an infinite Loop we called",
    "start": "2491119",
    "end": "2497240"
  },
  {
    "text": "the function it just was never returning we didn't really know why looked in the cloudwatch graphs and saw the the total",
    "start": "2497240",
    "end": "2503280"
  },
  {
    "text": "counts just going up and up and up we solved it by just deplo redeploying uh one of the functions without the loop uh",
    "start": "2503280",
    "end": "2509599"
  },
  {
    "text": "and fix the bug but uh if you don't notice it can get in real trouble especially if it's like a latent bug that happens later so uh one way to",
    "start": "2509599",
    "end": "2517640"
  },
  {
    "text": "avoid the infinite Loops is to pass a call stack when you're calling one Lambda to the next and then check to see",
    "start": "2517640",
    "end": "2524079"
  },
  {
    "text": "if you you're you are in your own call stack basically uh that's one of the",
    "start": "2524079",
    "end": "2529319"
  },
  {
    "text": "best ways so far that I found to avoid that problem uh you need to store your data",
    "start": "2529319",
    "end": "2535920"
  },
  {
    "text": "properly so Lambda forces you into this habit if you're building microservices on ec2 maybe you might get lazy and put",
    "start": "2535920",
    "end": "2542640"
  },
  {
    "text": "a little bit of data on the local instance and and you know hope no one notices or hope it doesn't go away you can't do that with lambdas lambdas do",
    "start": "2542640",
    "end": "2549920"
  },
  {
    "text": "have that local temp scratch space uh which does last from container to container by the way so you can use it",
    "start": "2549920",
    "end": "2557680"
  },
  {
    "text": "to take advantage of that but don't store any important data there because it could go away at any time so it's",
    "start": "2557680",
    "end": "2564520"
  },
  {
    "text": "great for temp but really you have to make sure that you're putting everything off of your Lambda",
    "start": "2564520",
    "end": "2571039"
  },
  {
    "text": "functions and then there's function scheduling so I mentioned that there's the startup",
    "start": "2571119",
    "end": "2577240"
  },
  {
    "text": "time right and this is a known problem with Lambda it's the warm-up time problem the first time the function is",
    "start": "2577240",
    "end": "2582520"
  },
  {
    "text": "called it's going to take a little while to return it might even time out so you",
    "start": "2582520",
    "end": "2587599"
  },
  {
    "text": "sometimes if if you have even moderate traffic this won't happen because there'll constantly be a container there",
    "start": "2587599",
    "end": "2593000"
  },
  {
    "text": "that's already servicing your your requests but if you have a really low traffic function something that maybe",
    "start": "2593000",
    "end": "2599680"
  },
  {
    "text": "doesn't get called very often but you need it to be very responsive when it does get called uh you can poke it to",
    "start": "2599680",
    "end": "2605839"
  },
  {
    "text": "keep it warm so every minute or whatever you just call that function and then it'll always be running in some",
    "start": "2605839",
    "end": "2611400"
  },
  {
    "text": "container uh if you're going to do that make sure you give it some sort of option or endpoint to call that's very",
    "start": "2611400",
    "end": "2616960"
  },
  {
    "text": "very fast so that you don't get build a lot so you can keep your execution time under 100 milliseconds for your your",
    "start": "2616960",
    "end": "2623640"
  },
  {
    "text": "your health check basically uh and uh one thing that you cannot do is you cannot trigger lambdas",
    "start": "2623640",
    "end": "2629640"
  },
  {
    "text": "off of uh sqs qes so uh but you can pull them so you can set up a timer that runs",
    "start": "2629640",
    "end": "2636040"
  },
  {
    "text": "a function that pulls your queue every minute uh and then or you can use Dynamo",
    "start": "2636040",
    "end": "2641480"
  },
  {
    "text": "DB as your queue which has its pros and cons of using a database as a que but",
    "start": "2641480",
    "end": "2646640"
  },
  {
    "text": "since you can trigger off of Dynamo DB entries that is one workaround for not being able to trigger on",
    "start": "2646640",
    "end": "2653520"
  },
  {
    "text": "Q's uh if you need a more granular timer than 1 minute say you want to pull your queue every 5 Seconds what you can do is",
    "start": "2653520",
    "end": "2659599"
  },
  {
    "text": "schedule a timer to run a function that calls uh that basically has its own",
    "start": "2659599",
    "end": "2664880"
  },
  {
    "text": "timer built in so it just sits in a loop calling every 5 seconds for a minute and then shuts itself down or for 90 seconds",
    "start": "2664880",
    "end": "2672200"
  },
  {
    "text": "and shuts itself down so you get some nice overlap going uh and then uh you can actually",
    "start": "2672200",
    "end": "2679240"
  },
  {
    "text": "get more timers by sort of Fanning this out one calling the next calling the",
    "start": "2679240",
    "end": "2685720"
  },
  {
    "text": "next uh some other really important thing is function versioning so there's versioning built in uh most of the",
    "start": "2685960",
    "end": "2693079"
  },
  {
    "text": "deployment tools have it if you noticed when I did my Apex deploy it's said the version number right next to it uh so",
    "start": "2693079",
    "end": "2699640"
  },
  {
    "text": "using versions is really important uh because you can roll back very easily this way if you have a version that's",
    "start": "2699640",
    "end": "2705680"
  },
  {
    "text": "known good you can roll back to it very easily by just pointing the function Alias back to that particular version uh",
    "start": "2705680",
    "end": "2713040"
  },
  {
    "text": "you can use it for uh traffic shaping so if you you one way to do traffic shaping",
    "start": "2713040",
    "end": "2719160"
  },
  {
    "text": "is to have sort of a traffic cop function uh an outbound caller if you will so when you want to call out to",
    "start": "2719160",
    "end": "2725240"
  },
  {
    "text": "another Lambda instead of calling directly to it you call to your service that says uh you know should this user",
    "start": "2725240",
    "end": "2731200"
  },
  {
    "text": "go to version 20 or 21 or what percent should go here if you want to do uh",
    "start": "2731200",
    "end": "2736280"
  },
  {
    "text": "phase deployment or anything like that uh and you can also use it to if you need to version lock so maybe you have",
    "start": "2736280",
    "end": "2743520"
  },
  {
    "text": "an old client that must stick to an old version of your code you can have them Point directly to an Arn for that",
    "start": "2743520",
    "end": "2750559"
  },
  {
    "text": "particular version instead of the current Alias so it's very powerful it lets you do a lot of different lets you",
    "start": "2750559",
    "end": "2757280"
  },
  {
    "text": "run a lot of your functions next to each other Dev prod so that's kind of",
    "start": "2757280",
    "end": "2762760"
  },
  {
    "text": "nice as I mentioned before there's every Lambda runs in a VPC uh and it's always",
    "start": "2762760",
    "end": "2768920"
  },
  {
    "text": "on but by default it's just a VPC with same defaults and internet access uh if",
    "start": "2768920",
    "end": "2774720"
  },
  {
    "text": "you add it to your VPC it will be able to access all of your private resources but it will no longer have internet",
    "start": "2774720",
    "end": "2781000"
  },
  {
    "text": "access uh even if your security rules allow it to have internet access it still won't have internet access uh",
    "start": "2781000",
    "end": "2787200"
  },
  {
    "text": "unless you have the managed net even if you have an internet gateway it still won't work you must have the managed net",
    "start": "2787200",
    "end": "2792640"
  },
  {
    "text": "running for your Lambda in your private VPC to get internet",
    "start": "2792640",
    "end": "2798480"
  },
  {
    "text": "access uh some problems that people tend to run into uh eni conc uh eni",
    "start": "2799400",
    "end": "2805760"
  },
  {
    "text": "exhaustion so every Lambda that runs concurrently is going to get its own eni",
    "start": "2805760",
    "end": "2811119"
  },
  {
    "text": "uh which means that you need to have enough in the pool to make sure that they can all run simultaneously uh this",
    "start": "2811119",
    "end": "2816319"
  },
  {
    "text": "is if you're man managing yourself uh and putting it in your own bpc uh so you got to make sure you have enough IPS in",
    "start": "2816319",
    "end": "2822559"
  },
  {
    "text": "your pool to do that and enough per a so by default Lambda tries to do the right",
    "start": "2822559",
    "end": "2827760"
  },
  {
    "text": "thing by balancing your Lambda functions equally across as many availability zones as there are in that region but if",
    "start": "2827760",
    "end": "2834559"
  },
  {
    "text": "you don't have enough IPS in one particular Zone it's just going to skip it so you're going to lose out on some",
    "start": "2834559",
    "end": "2839839"
  },
  {
    "text": "reliability and redundancy if you don't have that uh and then uh there's some",
    "start": "2839839",
    "end": "2846119"
  },
  {
    "text": "practices around API Gateway uh using the mock Integrations uh combining with Cognito Amazon Cognito for uh end user",
    "start": "2846119",
    "end": "2854280"
  },
  {
    "text": "control control and access um mapping templates and then Swagger so you can",
    "start": "2854280",
    "end": "2860960"
  },
  {
    "text": "export your API Gateway config into Swagger you can also import it from Swagger so if you are hardcore and no",
    "start": "2860960",
    "end": "2869040"
  },
  {
    "text": "Swagger you can actually build your API that way you can actually build tools that look at your Lambda functions and",
    "start": "2869040",
    "end": "2875280"
  },
  {
    "text": "automatically build your API Gateway configuration as well and some of them already do that uh but even if you're",
    "start": "2875280",
    "end": "2881079"
  },
  {
    "text": "just manually defining your configuration it's a really good idea to save it once you're done so that you can",
    "start": "2881079",
    "end": "2886160"
  },
  {
    "text": "redeploy it if something happens uh and so to make sure to keep that Swagger template up to",
    "start": "2886160",
    "end": "2891359"
  },
  {
    "text": "date or to go cross account sharing or whatever uh so we've mentioned the the",
    "start": "2891359",
    "end": "2897800"
  },
  {
    "text": "versions the consumable names things like that uh naming conventions that are",
    "start": "2897800",
    "end": "2902960"
  },
  {
    "text": "make it really easy to tell what's what that's consumable uh so so you can consumable by a human so a human can",
    "start": "2902960",
    "end": "2909079"
  },
  {
    "text": "look at that function and know this is Dev this is PR this is current Etc uh",
    "start": "2909079",
    "end": "2915400"
  },
  {
    "text": "use IM am whenever you can so you can build your Lambda function to have oth in it the SDK is right there but if you",
    "start": "2915400",
    "end": "2923359"
  },
  {
    "text": "use IM am it's going to be better because then it's all unified uh make sure you have at least privileged in",
    "start": "2923359",
    "end": "2929119"
  },
  {
    "text": "your IM am roles so uh if you're using the tooling they're going to do this for you automatically but if you decide to",
    "start": "2929119",
    "end": "2935440"
  },
  {
    "text": "do it yourself then something to keep in mind uh externalize your configuration so you can use Dynamo uh recently they",
    "start": "2935440",
    "end": "2942960"
  },
  {
    "text": "announced that they actually have a service that'll help store your configuration uh and then uh you know be",
    "start": "2942960",
    "end": "2949200"
  },
  {
    "text": "aware of throttling and uh if you're going to do something big and massive parallel let Amazon know so they don't",
    "start": "2949200",
    "end": "2955000"
  },
  {
    "text": "throttle you so they can give you more resources so that's all I have I got",
    "start": "2955000",
    "end": "2960119"
  },
  {
    "text": "about 10 minutes left for questions if anybody has any I know that a lot of you probably want to run off to another session so uh if you have questions",
    "start": "2960119",
    "end": "2967599"
  },
  {
    "text": "otherwise thank you",
    "start": "2967599",
    "end": "2971200"
  }
]