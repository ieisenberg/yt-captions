[
  {
    "text": "all right welcome everybody this is the ec2 instances deep dive we've got two",
    "start": "1399",
    "end": "7470"
  },
  {
    "text": "presenters today I'm John and this is Anthony we'll introduce ourselves more",
    "start": "7470",
    "end": "13410"
  },
  {
    "text": "throughout the presentation me first",
    "start": "13410",
    "end": "18779"
  },
  {
    "text": "so I'm John I'm I manage the team that defines and ships new instance types and new platform capabilities our team",
    "start": "18779",
    "end": "26130"
  },
  {
    "text": "spends a lot of time talking to customers sifting through usage data and trying to figure out what to build next",
    "start": "26130",
    "end": "32989"
  },
  {
    "text": "we we drive the PR FAQ process which is the amazonian version of the product",
    "start": "32989",
    "end": "39660"
  },
  {
    "text": "requirements document for new ec2 instances and at the end of the day we",
    "start": "39660",
    "end": "44760"
  },
  {
    "text": "we stay up most of the night during launch calls to make sure everything runs smoothly so you have a nice email",
    "start": "44760",
    "end": "50969"
  },
  {
    "text": "the next day with something new from ec2",
    "start": "50969",
    "end": "54949"
  },
  {
    "text": "today we're going to talk about three things the first is what is the ec2",
    "start": "56180",
    "end": "61410"
  },
  {
    "text": "instance platform in a little bit of a virtualization primer Anthony will talk about how to make the most of your ec2",
    "start": "61410",
    "end": "68189"
  },
  {
    "text": "instance experienced to kind of ensure that you walk away with some valuable best practices to get a lot of value out",
    "start": "68189",
    "end": "73200"
  },
  {
    "text": "of this presentation and then I'll jump back in and talk about how we think the future how do you think about the future",
    "start": "73200",
    "end": "78540"
  },
  {
    "text": "of ec2 instances in the platform so",
    "start": "78540",
    "end": "87439"
  },
  {
    "text": "Amazon ec2 is extremely broad back in July I gave a talk at the New York",
    "start": "87439",
    "end": "93240"
  },
  {
    "text": "summit it was the introduction of the ec2 Talk and it turns out that's a really tough talk to give primarily",
    "start": "93240",
    "end": "99299"
  },
  {
    "text": "because there's so much to cover you've got our api's you've got our networking you've got purchase options and pricing",
    "start": "99299",
    "end": "106170"
  },
  {
    "text": "models you've got things like Amazon V PC and EBS then you've got the hardware and the instances themselves and at this",
    "start": "106170",
    "end": "114060"
  },
  {
    "text": "presentation it's gonna be a lot more focused it's actually it's going to be more like hitting the zoom button over",
    "start": "114060",
    "end": "119729"
  },
  {
    "text": "and over again on the hardware until we get into the virtualization layer where you can really understand what's going",
    "start": "119729",
    "end": "125520"
  },
  {
    "text": "on and how to make the most of your ec2 instance experience there are a number",
    "start": "125520",
    "end": "131220"
  },
  {
    "text": "of other important things that are part of the ec2 platform which are not going to be covered and I wanted to give",
    "start": "131220",
    "end": "137010"
  },
  {
    "text": "them a brief call out there's an ec2 networking deep dive and best practices",
    "start": "137010",
    "end": "142770"
  },
  {
    "text": "talk given by Becky Weiss that's today at 3:30 p.m. there's a VPC deep dive by",
    "start": "142770",
    "end": "148650"
  },
  {
    "text": "Kevin Miller that's Friday at 10 a.m. there's a purchasing options deep dive",
    "start": "148650",
    "end": "153720"
  },
  {
    "text": "and best practices provided by Stephen Elliott that is today at 4:30 p.m. and then there's an EBS deep dive presented",
    "start": "153720",
    "end": "161640"
  },
  {
    "text": "by Dougal Valentine and that's tomorrow at 1:15 p.m. so as a review and level",
    "start": "161640",
    "end": "170760"
  },
  {
    "text": "set here's how you should think about ec2 instances ec2 instances are virtual",
    "start": "170760",
    "end": "176160"
  },
  {
    "text": "machines that are spun up when you issue an easy to run instances call or an easy to start instances call we find",
    "start": "176160",
    "end": "183780"
  },
  {
    "text": "available hardware with the right type of capabilities we signal the hypervisor to spin up a virtual machine and we pass",
    "start": "183780",
    "end": "190650"
  },
  {
    "text": "along the SSH key or Windows administrative password so you can do do as you please",
    "start": "190650",
    "end": "195950"
  },
  {
    "text": "the server's often have more resources than the instances need so you can end",
    "start": "195950",
    "end": "201450"
  },
  {
    "text": "up your instance to get up on a host with either more than one instance or one instance depending on the instance",
    "start": "201450",
    "end": "207810"
  },
  {
    "text": "size and today we're going to focus on",
    "start": "207810",
    "end": "214550"
  },
  {
    "text": "this layer but pointing out here that the guest is the ec2 instance zooming in",
    "start": "214550",
    "end": "220500"
  },
  {
    "text": "further when we differentiate and group instances into families and generations",
    "start": "220500",
    "end": "226320"
  },
  {
    "text": "these are the specifications that are the drivers of this differentiation over",
    "start": "226320",
    "end": "233190"
  },
  {
    "text": "time we've built a portfolio of instances optimized on one or more of these dimensions some have more CPU some",
    "start": "233190",
    "end": "241290"
  },
  {
    "text": "have more memory some have lots and lots of storage or I though some have accelerators like GPUs if you take you",
    "start": "241290",
    "end": "249209"
  },
  {
    "text": "take us back to 2006 when we ran the ec2 beta we had one instance type that's the end one small and now we have over 30 to",
    "start": "249209",
    "end": "256560"
  },
  {
    "text": "serve a diversity of workload needs so getting the most out of ec2 comes down",
    "start": "256560",
    "end": "262890"
  },
  {
    "text": "to a lot cheesing the right instance type for your workload need and then focusing on that resource that's that serves as",
    "start": "262890",
    "end": "269849"
  },
  {
    "text": "the bottleneck for you and the specification is mostly reflected in our",
    "start": "269849",
    "end": "276270"
  },
  {
    "text": "API name and this is just a quick review these terms will come up off in the remainder of this presentation but the",
    "start": "276270",
    "end": "281789"
  },
  {
    "text": "first character or two characters the API name signify the instance family which indicates which resources were",
    "start": "281789",
    "end": "289020"
  },
  {
    "text": "optimizing for C for compute optimize and high CPU the second character or",
    "start": "289020",
    "end": "294690"
  },
  {
    "text": "third depending on how many letters are R indicates the generation we use new instance generations to provide you the",
    "start": "294690",
    "end": "300900"
  },
  {
    "text": "latest platform features or technologies that are important to a specific instance family so with the compute",
    "start": "300900",
    "end": "308310"
  },
  {
    "text": "family it's the latest generation technology and processors for memory for storage there will be something else for",
    "start": "308310",
    "end": "314400"
  },
  {
    "text": "GPUs it would be latest GPUs and within each generation or instance type there",
    "start": "314400",
    "end": "320940"
  },
  {
    "text": "multiple sizes and again getting the most out of your ec2 experience means picking the right size for the workload",
    "start": "320940",
    "end": "326880"
  },
  {
    "text": "and the right family for your workload zooming in even further and now we're",
    "start": "326880",
    "end": "333810"
  },
  {
    "text": "we're into the virtualization layer I wanted to provide a brief primer since DC to launch the industry has made some",
    "start": "333810",
    "end": "340440"
  },
  {
    "text": "improvements advancements in virtualization which are important background for understanding issue 2",
    "start": "340440",
    "end": "347969"
  },
  {
    "text": "instances where we take the product first let's look at x86 CPU",
    "start": "347969",
    "end": "353759"
  },
  {
    "text": "virtualization the one of the keys here is that the hypervisor must trap any",
    "start": "353759",
    "end": "360030"
  },
  {
    "text": "instruction that changes the hardware state of the system and the x86 instruction set has a few instructions",
    "start": "360030",
    "end": "367469"
  },
  {
    "text": "that make this challenging before Intel released VTX which is a hardware",
    "start": "367469",
    "end": "372840"
  },
  {
    "text": "assisted virtualization technology there were a couple of options one was to have",
    "start": "372840",
    "end": "378210"
  },
  {
    "text": "the hypervisor scrutinized the instruction stream from each virtual machine look for these instructions and",
    "start": "378210",
    "end": "384360"
  },
  {
    "text": "emulate them using binary translation that was a resource intensive tax so it",
    "start": "384360",
    "end": "390659"
  },
  {
    "text": "at asked so it came with a performance penalty but it meant that you didn't have to change anything in the guest",
    "start": "390659",
    "end": "396750"
  },
  {
    "text": "operating system an alternative to that as you could tell the hypervisor to completely ignore",
    "start": "396750",
    "end": "402360"
  },
  {
    "text": "these challenging instructions and instead replace him with hyper calls this this offered better performance and",
    "start": "402360",
    "end": "410910"
  },
  {
    "text": "is known as para virtualization so this offers better performance but required guest OS modifications until VTX",
    "start": "410910",
    "end": "421160"
  },
  {
    "text": "introduced a new CPU execution mode which meant that you could both get",
    "start": "421160",
    "end": "428040"
  },
  {
    "text": "performance and didn't have and do not have to modify the guest operating system to get that performance so it",
    "start": "428040",
    "end": "433200"
  },
  {
    "text": "came with performance and flexibility and this is actually known as hvm and",
    "start": "433200",
    "end": "438900"
  },
  {
    "text": "you can see this surfaced in our product offering with Amazon machine images para virtualized images and then hvm Amazon",
    "start": "438900",
    "end": "445920"
  },
  {
    "text": "image machine images we we actually support hvm Amazon machine images with",
    "start": "445920",
    "end": "453210"
  },
  {
    "text": "our newest instance types and we support h vm only so you've got T 2 R 3 and I to",
    "start": "453210",
    "end": "460140"
  },
  {
    "text": "that our h vm only instances to reflect this progress in virtualization",
    "start": "460140",
    "end": "465240"
  },
  {
    "text": "technology now another thing to think about with cpu virtualization is the",
    "start": "465240",
    "end": "472320"
  },
  {
    "text": "scheduling choices that you have the naive approach to scheduling v cpus",
    "start": "472320",
    "end": "479280"
  },
  {
    "text": "actually results in variability this is to let the hypervisor schedule physical",
    "start": "479280",
    "end": "486390"
  },
  {
    "text": "CPUs to physical CPUs as needed rather than doing something like direct",
    "start": "486390",
    "end": "491490"
  },
  {
    "text": "assignment or pinning we're providing some other control mechanism to increase",
    "start": "491490",
    "end": "496700"
  },
  {
    "text": "consistency and predictability consistency is very important to us",
    "start": "496700",
    "end": "502410"
  },
  {
    "text": "and we think there's a great opportunity to main consistency whether you're looking to maximize performance through",
    "start": "502410",
    "end": "507960"
  },
  {
    "text": "something like direct pour assignment to a virtual machine or minimize costs so",
    "start": "507960",
    "end": "515969"
  },
  {
    "text": "that's a little bit about x86 CPU virtualization consistent performance is",
    "start": "515970",
    "end": "523650"
  },
  {
    "text": "also one of the challenges of providing IO to virtual machines IO requests from",
    "start": "523650",
    "end": "529650"
  },
  {
    "text": "virtual devices must be scheduled across shared Hardware this hardware and what's commonly used as a",
    "start": "529650",
    "end": "536790"
  },
  {
    "text": "split driver model where hardware specific drivers reside in a control OS",
    "start": "536790",
    "end": "542519"
  },
  {
    "text": "and a simple front-end driver resides in the guest OS and communicates back to",
    "start": "542519",
    "end": "549000"
  },
  {
    "text": "the control OS through a back-end driver it's the responsibility of the host then to multiplex and schedule these i/o",
    "start": "549000",
    "end": "556019"
  },
  {
    "text": "requests from various virtual machines that process can require host resources",
    "start": "556019",
    "end": "561360"
  },
  {
    "text": "and that can also cause some variability one option to deal with this variability",
    "start": "561360",
    "end": "567899"
  },
  {
    "text": "as virtualization technology and landscape has evolved is to do a pass",
    "start": "567899",
    "end": "574110"
  },
  {
    "text": "through a device directly to the virtual machine historically one of the",
    "start": "574110",
    "end": "579329"
  },
  {
    "text": "challenges doing that is direct memory accesses and that that means that advice",
    "start": "579329",
    "end": "585839"
  },
  {
    "text": "can modify system memory without bothering the CPU in a multi-tenant",
    "start": "585839",
    "end": "590970"
  },
  {
    "text": "virtual environment you know you won't that's a little bit dangerous because you want to maintain isolation so what",
    "start": "590970",
    "end": "597120"
  },
  {
    "text": "and the evolution of virtualization technology intel now offers until vtd",
    "start": "597120",
    "end": "602910"
  },
  {
    "text": "which provides for direct pass-through of devices of virtual machines and a not through an i/o memory management unit",
    "start": "602910",
    "end": "609180"
  },
  {
    "text": "among other things so it can do memory address translations through the use of",
    "start": "609180",
    "end": "614790"
  },
  {
    "text": "page tables and this is how we enable PCI pass-through for things like GPU instances and you can you pass through",
    "start": "614790",
    "end": "622260"
  },
  {
    "text": "other devices using similar technologies so what are these trends mean to us and",
    "start": "622260",
    "end": "629060"
  },
  {
    "text": "how do we think about these as they relate to our instance platform we",
    "start": "629060",
    "end": "634170"
  },
  {
    "text": "really have a philosophy of no compromises we want to offer you faster bigger less expensive instances that",
    "start": "634170",
    "end": "642870"
  },
  {
    "text": "offer operating system flexibility and consistent performance our bar is really",
    "start": "642870",
    "end": "649649"
  },
  {
    "text": "bare metal performance and you our customers help us prioritize our roadmap which is the path the bare metal",
    "start": "649649",
    "end": "655260"
  },
  {
    "text": "performance we're going to look at how we respond to these trends Anthony will",
    "start": "655260",
    "end": "660959"
  },
  {
    "text": "come up here in a second through the lens of a couple of recent platforms t2i 2 and C 3",
    "start": "660959",
    "end": "668779"
  },
  {
    "text": "and to guide you through the next section of this presentation you'll see a lot of these pointers this is where we",
    "start": "668779",
    "end": "676470"
  },
  {
    "text": "are going to indicate that we're giving you something we think is valuable to make the most of your ease to experience the tips and tricks for best practices",
    "start": "676470",
    "end": "682819"
  },
  {
    "text": "we care a lot about customers getting the most out of our ec2 instance experience and with that I'll hand it",
    "start": "682819",
    "end": "689850"
  },
  {
    "text": "over to Anthony all right thanks John my",
    "start": "689850",
    "end": "696029"
  },
  {
    "text": "name is Anthony Luger I am a principal engineer in the ec2 kernel and operating system team and I have an awesome job my",
    "start": "696029",
    "end": "704100"
  },
  {
    "text": "job is to make ec2 instances as fast as possible robust and secure and one of",
    "start": "704100",
    "end": "710730"
  },
  {
    "text": "the things that I like the most about my job is talking to customers and helping them get every little bit of performance",
    "start": "710730",
    "end": "717089"
  },
  {
    "text": "possible out of their ec2 instances so for the rest of this talk I'm going to walk through three platforms and make a",
    "start": "717089",
    "end": "725490"
  },
  {
    "text": "couple of suggestions for each platform about how to make sure you get the most out of it but this is really just",
    "start": "725490",
    "end": "731249"
  },
  {
    "text": "scratching the surface and you know I'll be here for the entire week of the",
    "start": "731249",
    "end": "736589"
  },
  {
    "text": "conference and I'd love to have more conversations about how you're using ec2 today and also how you can get the most",
    "start": "736589",
    "end": "742800"
  },
  {
    "text": "out of ec2 so to start with we're gonna",
    "start": "742800",
    "end": "748050"
  },
  {
    "text": "talk about the t2 instance type which Andy talked about a little earlier in his keynote today and t2 is a burstable",
    "start": "748050",
    "end": "756569"
  },
  {
    "text": "performance instance really suited towards general-purpose workloads and it's our bluest cost instance by far the",
    "start": "756569",
    "end": "765660"
  },
  {
    "text": "really interesting thing about t2 is that we offer it in three sizes but the",
    "start": "765660",
    "end": "771240"
  },
  {
    "text": "small and the micro the difference between the amount of CPU available isn't the number of V CPUs as",
    "start": "771240",
    "end": "777929"
  },
  {
    "text": "is the case in most of our instance types but rather the number of CPU credits that you earn per hour and this",
    "start": "777929",
    "end": "784620"
  },
  {
    "text": "is the only instance type today that we talk about in terms of this concept of CPU credits and the very first tip that",
    "start": "784620",
    "end": "793019"
  },
  {
    "text": "we have and I tried to start with a nice easy tip is make sure you understand",
    "start": "793019",
    "end": "798839"
  },
  {
    "text": "what CPU credits are how they affect your work so that you can optimize your workload",
    "start": "798839",
    "end": "804180"
  },
  {
    "text": "and choose the right t2 instance to fit your workload type so there are three",
    "start": "804180",
    "end": "809730"
  },
  {
    "text": "resources that I have on this slide and these slides will be available on SlideShare so you don't have to try to",
    "start": "809730",
    "end": "815430"
  },
  {
    "text": "type all this down Geoff bars blog he had a really nice explanation of how the",
    "start": "815430",
    "end": "820560"
  },
  {
    "text": "burstable performance works on t to the instance documentation for t2 on the",
    "start": "820560",
    "end": "826079"
  },
  {
    "text": "website also has a really good explanation but then also if you just attend the session which you're already",
    "start": "826079",
    "end": "831990"
  },
  {
    "text": "doing you get this tip for free so congratulations you've already implemented one best practice so the way",
    "start": "831990",
    "end": "840300"
  },
  {
    "text": "that the t2 instance performance works is via a mechanism called a credit bucket and the credit buckets the best",
    "start": "840300",
    "end": "848399"
  },
  {
    "text": "way to think of them are like literally if you have a bucket and it's all about",
    "start": "848399",
    "end": "853470"
  },
  {
    "text": "how you place balls into a bucket and pull balls out of a bucket and the rules around how often you put new balls into",
    "start": "853470",
    "end": "860940"
  },
  {
    "text": "a bucket and how often you pull balls out of the bucket and for any computer",
    "start": "860940",
    "end": "866310"
  },
  {
    "text": "science majors in here you spend weeks and weeks and weeks and classes talking about all of the different strategies for implementing these token buckets but",
    "start": "866310",
    "end": "873990"
  },
  {
    "text": "we're just going to focus on the way that we do it within the t2 instance type so the first characteristic",
    "start": "873990",
    "end": "882209"
  },
  {
    "text": "dimension of our credit bucket implementation is the fill rate or the baseline rate so on the t2 micro it",
    "start": "882209",
    "end": "891990"
  },
  {
    "text": "earns at a rate of 6 credits per CPU hours so for every hour you're running you essentially put 6 balls into the",
    "start": "891990",
    "end": "899790"
  },
  {
    "text": "bucket and we call this the baseline performance and we've we very carefully",
    "start": "899790",
    "end": "905370"
  },
  {
    "text": "thought through this baseline performance to make sure that it was a good level of performance for a lot of",
    "start": "905370",
    "end": "910620"
  },
  {
    "text": "workloads however the thing that makes the t2 instance special is the rate that",
    "start": "910620",
    "end": "916829"
  },
  {
    "text": "you can withdraw credits from the bucket and we call this the burst rate now in",
    "start": "916829",
    "end": "922820"
  },
  {
    "text": "the in the best-case scenario when your credit bucket is completely full",
    "start": "922820",
    "end": "928800"
  },
  {
    "text": "you can withdraw credits basically as fast as you as you want to and each credit represents one minute of",
    "start": "928800",
    "end": "936300"
  },
  {
    "text": "cpu time so if you have a completely full bucket and you run flat out at a hundred percent CPU in five minutes you",
    "start": "936300",
    "end": "942959"
  },
  {
    "text": "will withdraw five credits but that's the way that the credit system works now",
    "start": "942959",
    "end": "948209"
  },
  {
    "text": "at some point the bucket is empty and when the bucket is empty the rate that",
    "start": "948209",
    "end": "955079"
  },
  {
    "text": "you can withdraw becomes the rate that new credits are added and one of the",
    "start": "955079",
    "end": "960149"
  },
  {
    "text": "things that we wanted to make sure of when we implemented this mechanism is that you didn't see a sudden drop-off in",
    "start": "960149",
    "end": "966300"
  },
  {
    "text": "performance that if your workload was running and you got to the point where you were running low on credits or ran",
    "start": "966300",
    "end": "972269"
  },
  {
    "text": "out of credits we didn't want the results to be catastrophic so the rate",
    "start": "972269",
    "end": "977310"
  },
  {
    "text": "at which you can withdraw credits is proportionate to the Sai or the fullness of the credit bucket itself the other",
    "start": "977310",
    "end": "986450"
  },
  {
    "text": "characteristic of the bucket worth mentioning is that credits do expire over time and the one of the",
    "start": "986450",
    "end": "993180"
  },
  {
    "text": "characteristics of a bucket is that at some point it gets full and if you keep adding to it it's just gonna spill over",
    "start": "993180",
    "end": "998820"
  },
  {
    "text": "and credit expiration is is our way of attacking that problem that over time",
    "start": "998820",
    "end": "1004370"
  },
  {
    "text": "the credits sort of magically disappear so we did a few other things to try to",
    "start": "1004370",
    "end": "1014660"
  },
  {
    "text": "make sure that your workload or that this mechanism worked very well for a wide variety of workloads we made sure",
    "start": "1014660",
    "end": "1021800"
  },
  {
    "text": "to start your credit allocation with a good fill rate when you launch an",
    "start": "1021800",
    "end": "1027438"
  },
  {
    "text": "instance for the first time you do a lot of things like boot start up your services you tend to do CPU heavy",
    "start": "1027439",
    "end": "1034370"
  },
  {
    "text": "activities early on so we wanted to make sure that you got a really strong credit balance so that you could burst from the",
    "start": "1034370",
    "end": "1041209"
  },
  {
    "text": "very start of day for your application and then the other thing that we did",
    "start": "1041209",
    "end": "1046600"
  },
  {
    "text": "that is also really important is we tried to be extremely transparent about",
    "start": "1046600",
    "end": "1053440"
  },
  {
    "text": "this mechanism not just how it works but also what your current credit balance is and so that you can use this to",
    "start": "1053440",
    "end": "1061309"
  },
  {
    "text": "rationalize about your application and this leads to the second tip and it's actively monitor your credit",
    "start": "1061309",
    "end": "1069260"
  },
  {
    "text": "balance and how it affects the performance of your application so this",
    "start": "1069260",
    "end": "1075230"
  },
  {
    "text": "is a cloud watch graph that I borrowed from Jeff bars blog that just shows you",
    "start": "1075230",
    "end": "1081860"
  },
  {
    "text": "the mapping of instance credit usage",
    "start": "1081860",
    "end": "1086980"
  },
  {
    "text": "versus the size of the bucket and you can see the behavior in this graph",
    "start": "1086980",
    "end": "1092870"
  },
  {
    "text": "I guess the lines are large enough that I described earlier where as you start",
    "start": "1092870",
    "end": "1098600"
  },
  {
    "text": "out with a nice healthy credit balance when the instance launches and then the",
    "start": "1098600",
    "end": "1104389"
  },
  {
    "text": "orange line that sort of peeks and goes down is where Jeff kicked off a heavy CPU workload and you can see that it",
    "start": "1104389",
    "end": "1112190"
  },
  {
    "text": "starts using credits at a at a pretty fast rate and it's abstains that credit credit usage for some period of time and",
    "start": "1112190",
    "end": "1118899"
  },
  {
    "text": "then at some point it's a little hard to see but the credit balance declines and",
    "start": "1118899",
    "end": "1126169"
  },
  {
    "text": "the the rate at which you can pull credits again starts to decline but fortunately the application finishes",
    "start": "1126169",
    "end": "1132860"
  },
  {
    "text": "before you exhausted your credit balance so you've got the burst for pretty much the entire time and you got really",
    "start": "1132860",
    "end": "1138710"
  },
  {
    "text": "really good performance in this workload after this activity has finished the",
    "start": "1138710",
    "end": "1143750"
  },
  {
    "text": "credit balance starts replenishing and within a few hours you get pretty close to where you started from so what you",
    "start": "1143750",
    "end": "1149870"
  },
  {
    "text": "want to look for when you're looking at your application and you're looking at your credit balances and usages is that",
    "start": "1149870",
    "end": "1155600"
  },
  {
    "text": "the peaks that exist in your application whether it's from peak hours or because",
    "start": "1155600",
    "end": "1160880"
  },
  {
    "text": "it's a batch workload where you're running jobs periodically that during those Peaks you're not exhausting your",
    "start": "1160880",
    "end": "1167809"
  },
  {
    "text": "credit balance and running at just the baseline performance",
    "start": "1167809",
    "end": "1172388"
  },
  {
    "text": "so the t2 instances a is really great",
    "start": "1174680",
    "end": "1179690"
  },
  {
    "text": "for a wide variety of workloads particularly ones that benefit from burstable performance on the other side",
    "start": "1179690",
    "end": "1186710"
  },
  {
    "text": "of the spectrum there's the i2 instance which is also one of my favorite instance types and this is our this is",
    "start": "1186710",
    "end": "1194120"
  },
  {
    "text": "our instance designed for high-performance databases particularly no sequel or really any workload that",
    "start": "1194120",
    "end": "1200480"
  },
  {
    "text": "requires really low latency disk access so the largest I to size the 8x large",
    "start": "1200480",
    "end": "1208570"
  },
  {
    "text": "has eight eight hundred gigabyte SSDs attached to it and can drive three",
    "start": "1208570",
    "end": "1215420"
  },
  {
    "text": "hundred and sixty-five thousand i ops which is really just a it's it's a it's an amount of i/o that every time I see",
    "start": "1215420",
    "end": "1222110"
  },
  {
    "text": "it in an instance it still excites me even at this point in time now the thing",
    "start": "1222110",
    "end": "1228440"
  },
  {
    "text": "that's really interesting about a platform like this is that if you just take you know a random Linux",
    "start": "1228440",
    "end": "1236150"
  },
  {
    "text": "distribution or a typical workload the workloads going to be challenged to",
    "start": "1236150",
    "end": "1242120"
  },
  {
    "text": "drive this much i/o it really does require some tuning within the instance",
    "start": "1242120",
    "end": "1247250"
  },
  {
    "text": "to fully make everything you can out of this platform and I wanted to talk a",
    "start": "1247250",
    "end": "1253730"
  },
  {
    "text": "little bit about what the things are that you need to do to really get the most out of a platform like the I to the",
    "start": "1253730",
    "end": "1259610"
  },
  {
    "text": "the first tip is to make sure you're using at least the 3/8 kernel version so",
    "start": "1259610",
    "end": "1265690"
  },
  {
    "text": "the 3.8 kernel introduced a number of features that without those features you",
    "start": "1265690",
    "end": "1271040"
  },
  {
    "text": "you just won't get this I ops rate and fortunately every version of Amazon",
    "start": "1271040",
    "end": "1277340"
  },
  {
    "text": "Linux AMI since 1309 has these features already so if you're an Amazon Linux",
    "start": "1277340",
    "end": "1282500"
  },
  {
    "text": "user you're already covered a boot up into 1404 and later versions also have",
    "start": "1282500",
    "end": "1289880"
  },
  {
    "text": "this feature so if you're in a boot to user using a at least the 1404 version you're covered rel seven which is",
    "start": "1289880",
    "end": "1296420"
  },
  {
    "text": "probably the newest commonly used Linux distribution to add these features also",
    "start": "1296420",
    "end": "1304010"
  },
  {
    "text": "has these features and that also carries over to Sen OS seven and if you're using another distro just",
    "start": "1304010",
    "end": "1309680"
  },
  {
    "text": "make sure that the kernel version is at least 3.8 now this is information that",
    "start": "1309680",
    "end": "1315140"
  },
  {
    "text": "we have on our website and I get a lot of questions about do you really need this kernel version what happens if you",
    "start": "1315140",
    "end": "1321530"
  },
  {
    "text": "don't use it and I wanted to talk a little bit about why we make this recommendation and explain how the underlying technology works so prior to",
    "start": "1321530",
    "end": "1329990"
  },
  {
    "text": "the 3.8 kernel every time your instance wanted to do some i/o for instance at",
    "start": "1329990",
    "end": "1336920"
  },
  {
    "text": "some layer on linux something's going to make a read system call it might be",
    "start": "1336920",
    "end": "1341960"
  },
  {
    "text": "through layers of java library or it might be written in assembly but",
    "start": "1341960",
    "end": "1347420"
  },
  {
    "text": "something is going to do a read system call and it's going to have a memory buffer that says i want to read data to",
    "start": "1347420",
    "end": "1353360"
  },
  {
    "text": "this location in memory now instances don't have direct access to",
    "start": "1353360",
    "end": "1358400"
  },
  {
    "text": "their underlying SSDs this is one of the ways that we secure the platform this is",
    "start": "1358400",
    "end": "1363590"
  },
  {
    "text": "one of the ways that we can offer all the features that we offer but if the",
    "start": "1363590",
    "end": "1369650"
  },
  {
    "text": "instances don't have direct access to the SSDs how do you actually do that i/o to that memory location what we have in",
    "start": "1369650",
    "end": "1377120"
  },
  {
    "text": "ec2 is we have this this this special instance that we call the i/o domain and",
    "start": "1377120",
    "end": "1383170"
  },
  {
    "text": "the i/o domain is the thing that actually has access to the underlying hardware and that can actually do DMA",
    "start": "1383170",
    "end": "1389810"
  },
  {
    "text": "operations to the physical disks and in order for the instance to do i oh the",
    "start": "1389810",
    "end": "1397010"
  },
  {
    "text": "first thing it has to do is it has to give permission to the i/o domain to access the memory that you want to do",
    "start": "1397010",
    "end": "1403190"
  },
  {
    "text": "the DMA operation to by default the i/o domain does not have access to the instances memory so the instance has to",
    "start": "1403190",
    "end": "1409820"
  },
  {
    "text": "explicitly grant permission and because virtualization developers are",
    "start": "1409820",
    "end": "1414860"
  },
  {
    "text": "particularly clever this is called granting and when the i/o domain",
    "start": "1414860",
    "end": "1420020"
  },
  {
    "text": "actually Maps that page and can access it we call that a grant mapping now this",
    "start": "1420020",
    "end": "1428060"
  },
  {
    "text": "is a really cool mechanism it's a it's really fast at moving large amounts of data the challenge though is that every",
    "start": "1428060",
    "end": "1435860"
  },
  {
    "text": "time you do one of these mappings it involves something called a TLB flush and TLB flushes are very very expensive",
    "start": "1435860",
    "end": "1443990"
  },
  {
    "text": "under certain circumstances particularly if you're doing many of them and 360,000",
    "start": "1443990",
    "end": "1450590"
  },
  {
    "text": "per second definitely counts as many TLB flushes and you're doing that many TLB flushes every second you're gonna have",
    "start": "1450590",
    "end": "1456980"
  },
  {
    "text": "problems so as is often the case in",
    "start": "1456980",
    "end": "1463240"
  },
  {
    "text": "computer science the thing that doesn't seem intuitive actually turns out to be better and in this case there's a",
    "start": "1463240",
    "end": "1471140"
  },
  {
    "text": "feature in the 3/8 kernel called persistent grant mappings and the way it works is that instead of giving",
    "start": "1471140",
    "end": "1476660"
  },
  {
    "text": "permission to every single piece of memory that the instance wants to do I owe to it pre agrees with the i/o domain",
    "start": "1476660",
    "end": "1483830"
  },
  {
    "text": "on a pool of memory that the i/o domain always has access to and the instance",
    "start": "1483830",
    "end": "1489679"
  },
  {
    "text": "uses this as effectively a bounce buffer so every time you want to do io instead of granting permission to access that",
    "start": "1489679",
    "end": "1495980"
  },
  {
    "text": "page you pick a location within the persistent grant pool you do a copy into",
    "start": "1495980",
    "end": "1502550"
  },
  {
    "text": "the persistent grant pool and then you tell the i/o domain about that location so instead of doing these TLB flushes",
    "start": "1502550",
    "end": "1509120"
  },
  {
    "text": "you instead are doing data copies it turns out that modern processors are really really good at copying data",
    "start": "1509120",
    "end": "1515210"
  },
  {
    "text": "particularly if it's hot data if it's data that's been recently accessed and there's almost a doubling in AI ops",
    "start": "1515210",
    "end": "1522500"
  },
  {
    "text": "performance using this copying mechanism over the remapping mechanism so this is",
    "start": "1522500",
    "end": "1528290"
  },
  {
    "text": "the main reason why we recommend the 3.8 kernel and you can still have a really",
    "start": "1528290",
    "end": "1533870"
  },
  {
    "text": "great experience on i2 without the 3/8 kernel if your application doesn't need to drive this level of AI ops and you",
    "start": "1533870",
    "end": "1539780"
  },
  {
    "text": "really just care about latency but if you are trying to drive really high ops rates you definitely want to have this",
    "start": "1539780",
    "end": "1545780"
  },
  {
    "text": "feature enabled second thing about I to",
    "start": "1545780",
    "end": "1550940"
  },
  {
    "text": "that I very frequently get asked about is trim so if you've if you have heard",
    "start": "1550940",
    "end": "1557690"
  },
  {
    "text": "about or if you're deep into SSDs you've certainly heard about trim and discard and this is a relatively new operation",
    "start": "1557690",
    "end": "1565760"
  },
  {
    "text": "that was added to support SSDs and in terms of what you need to do it",
    "start": "1565760",
    "end": "1571160"
  },
  {
    "text": "depends somewhat on the armie that you're using but the F is",
    "start": "1571160",
    "end": "1576230"
  },
  {
    "text": "trim command is the easiest way to just go through and issue trims everywhere that needs to be issued trims you want",
    "start": "1576230",
    "end": "1582950"
  },
  {
    "text": "to do this periodically you don't want to do this all the time like once a day or once even once a week will make a big",
    "start": "1582950",
    "end": "1588830"
  },
  {
    "text": "impact to your workload trim support is relatively new in Linux very old kernels",
    "start": "1588830",
    "end": "1595250"
  },
  {
    "text": "do not have trim support so if you're not able to do trim or if you're running",
    "start": "1595250",
    "end": "1600470"
  },
  {
    "text": "Windows the windows drivers today don't support trim then the other option that",
    "start": "1600470",
    "end": "1605660"
  },
  {
    "text": "you can do is something called over-provisioning and it has the same effect as trim and the basic mechanism",
    "start": "1605660",
    "end": "1612080"
  },
  {
    "text": "is you reserve 10% of the disk and you",
    "start": "1612080",
    "end": "1617300"
  },
  {
    "text": "just never touch it so the easiest way to do that in linux is to create a partition and just never touch the",
    "start": "1617300",
    "end": "1622310"
  },
  {
    "text": "partition I'll admit I'm a Linux user I have no idea how to do this on Windows",
    "start": "1622310",
    "end": "1627500"
  },
  {
    "text": "but if I did I'd have some pretty like GUI to create partitions but it's the same basic idea so why do you need to do",
    "start": "1627500",
    "end": "1637640"
  },
  {
    "text": "this why is this important well it turns out that SSDs are really sophisticated devices and it's due to the fact that",
    "start": "1637640",
    "end": "1645380"
  },
  {
    "text": "the underlying technology that's powers SSD is called flash has some interesting",
    "start": "1645380",
    "end": "1652670"
  },
  {
    "text": "physical characteristics namely it wears out over time every time you write to a",
    "start": "1652670",
    "end": "1658940"
  },
  {
    "text": "sector in flash it degrades a little bit and eventually after thousands and thousands and thousands of writes it",
    "start": "1658940",
    "end": "1665900"
  },
  {
    "text": "just stops working now the thing that's really even though that rate is really",
    "start": "1665900",
    "end": "1671780"
  },
  {
    "text": "high if you think about a typical application like a database a database might be rewriting like the transaction",
    "start": "1671780",
    "end": "1678890"
  },
  {
    "text": "log over and over and over and over again for almost every single i/o and if you just took that naive approach to",
    "start": "1678890",
    "end": "1685160"
  },
  {
    "text": "just mapping writes directly to the corresponding sector on the disk you would wear out that sector really",
    "start": "1685160",
    "end": "1690980"
  },
  {
    "text": "quickly relative to everything else so SSDs implement a technology called wear",
    "start": "1690980",
    "end": "1696560"
  },
  {
    "text": "leveling and that's really the source of of all of the interesting things that",
    "start": "1696560",
    "end": "1702860"
  },
  {
    "text": "we're going to talk about here and it really comes - any time you have a large complicated software stack there's always special",
    "start": "1702860",
    "end": "1708829"
  },
  {
    "text": "things that you're gonna have to consider so trim and over-provisioning help avoid garbage collection and if",
    "start": "1708829",
    "end": "1715729"
  },
  {
    "text": "you're a job application developer a ruby application developer then garbage collection should be very familiar and",
    "start": "1715729",
    "end": "1722209"
  },
  {
    "text": "this is essentially what you're trying to avoid with trim and over-provisioning",
    "start": "1722209",
    "end": "1729129"
  },
  {
    "text": "so to really really briefly dive into this given given time constraints the",
    "start": "1729129",
    "end": "1737749"
  },
  {
    "text": "basic way that SSDs work is they take the entire disk and they treat it as a",
    "start": "1737749",
    "end": "1743599"
  },
  {
    "text": "large ring cue and the way to think about a ring queue is if you take a piece of string and you tie it together",
    "start": "1743599",
    "end": "1749029"
  },
  {
    "text": "and then you hold one place in the string and with one hand and hold another place with on the string with",
    "start": "1749029",
    "end": "1754879"
  },
  {
    "text": "the other hand every time you do a write you advance these one fingers this one set of fingers right so every single",
    "start": "1754879",
    "end": "1762169"
  },
  {
    "text": "write that you're doing you're not even if you're writing in place you're not actually writing to that sector instead",
    "start": "1762169",
    "end": "1768440"
  },
  {
    "text": "you're always appending to the end of the ring Q and this is one of the",
    "start": "1768440",
    "end": "1773869"
  },
  {
    "text": "reasons why SSDs have this really cool characteristic that sequential writes are roughly the same as random writes in",
    "start": "1773869",
    "end": "1781070"
  },
  {
    "text": "terms of performance because they're the same thing there is no difference all rights get",
    "start": "1781070",
    "end": "1786409"
  },
  {
    "text": "converted into these append operations to the transaction log now the great",
    "start": "1786409",
    "end": "1793309"
  },
  {
    "text": "thing about this is that it means you very evenly wear out the SSD because",
    "start": "1793309",
    "end": "1798950"
  },
  {
    "text": "every write writes to a new location and you have really really good endurance using this mechanism and as long as",
    "start": "1798950",
    "end": "1807469"
  },
  {
    "text": "there's plenty of space left on the string everything goes well everything solid however in practice at some point",
    "start": "1807469",
    "end": "1815029"
  },
  {
    "text": "you're going to wrap around the string and you're going to have to deal with the fact that you don't can't just write",
    "start": "1815029",
    "end": "1820820"
  },
  {
    "text": "to the end of the SSD anymore and what ends up happening is that you're going",
    "start": "1820820",
    "end": "1827299"
  },
  {
    "text": "to have a certain number of blocks that have data on them you still have to preserve even when you want to do a",
    "start": "1827299",
    "end": "1833719"
  },
  {
    "text": "right at the tail point of the transaction log and you really have two",
    "start": "1833719",
    "end": "1838879"
  },
  {
    "text": "choices here you can search for and you can try to find a free block on the transaction log and obviously that",
    "start": "1838879",
    "end": "1845930"
  },
  {
    "text": "means that you're going to have to do more IO in the disk and the result is going to be a pause it's just like",
    "start": "1845930",
    "end": "1852050"
  },
  {
    "text": "garbage collection and JVM the other thing that potentially has to happen is",
    "start": "1852050",
    "end": "1857450"
  },
  {
    "text": "you might decide to move blocks around to free up space closer to the tail and this is called right amplification where",
    "start": "1857450",
    "end": "1864620"
  },
  {
    "text": "you're doing a single right operation and it might get turned into 2 3 4 etc",
    "start": "1864620",
    "end": "1869990"
  },
  {
    "text": "right operations and obviously that's going to really decrease your right io capabilities now the just like with a",
    "start": "1869990",
    "end": "1880340"
  },
  {
    "text": "JVM if you create an application in Java and you size the heap at one gigabyte",
    "start": "1880340",
    "end": "1886270"
  },
  {
    "text": "you don't want your application to try to allocate one gigabyte of memory if you do you're going to have garbage",
    "start": "1886270",
    "end": "1891710"
  },
  {
    "text": "collection all the time you're going to have really bad performance you try to size your application to only use a",
    "start": "1891710",
    "end": "1897140"
  },
  {
    "text": "percentage of the heap maybe 80% 90% and that gives enough free space that when",
    "start": "1897140",
    "end": "1902300"
  },
  {
    "text": "you need to do an allocation the JVM doesn't have to do that much work to actually do the allocation it's the",
    "start": "1902300",
    "end": "1907640"
  },
  {
    "text": "exact same thing with SSDs over-provisioning it is just leaving the disk with enough headspace that it",
    "start": "1907640",
    "end": "1914060"
  },
  {
    "text": "doesn't have to do garbage collection that often and trimming is really just a way to tell the SSD where free space",
    "start": "1914060",
    "end": "1921770"
  },
  {
    "text": "already is and it has the same effective over-provisioning but it's just more dynamic in practice trimming versus not",
    "start": "1921770",
    "end": "1931190"
  },
  {
    "text": "trimming can double triple even quadruple your right eye ops rates so",
    "start": "1931190",
    "end": "1936620"
  },
  {
    "text": "it's a really important thing to do if you have a write heavy workload on an SSD now continuing with the theme of our",
    "start": "1936620",
    "end": "1948010"
  },
  {
    "text": "high-performance instance types the c3 instance type is our high compute and it",
    "start": "1948010",
    "end": "1953990"
  },
  {
    "text": "is where you can get the most compute cycles today within an AC 2 instance it",
    "start": "1953990",
    "end": "1959180"
  },
  {
    "text": "has a 2.8 gigahertz processor it's 3.2 gigahertz with turbo and it also",
    "start": "1959180",
    "end": "1964340"
  },
  {
    "text": "introduced enhanced networking which can give you the highest possible network performance with an ec2 with the lowest",
    "start": "1964340",
    "end": "1970550"
  },
  {
    "text": "amount of variability and jitter and there's a couple of things that I often",
    "start": "1970550",
    "end": "1977820"
  },
  {
    "text": "find are important to do to really get the most out of a c3 instance the first",
    "start": "1977820",
    "end": "1983910"
  },
  {
    "text": "is to use hvm and this is something that very frequently I get asked about and",
    "start": "1983910",
    "end": "1991230"
  },
  {
    "text": "it's a it's an area where you can really see a big performance improvement with",
    "start": "1991230",
    "end": "1997020"
  },
  {
    "text": "often with very little effort so with Amazon Linux the very first column in",
    "start": "1997020",
    "end": "2003200"
  },
  {
    "text": "the in the matrix is HP M with EBS that's because that's what we want you",
    "start": "2003200",
    "end": "2008210"
  },
  {
    "text": "to use so that's why it's first and it definitely is going to give you the best experience so John talked a bit about",
    "start": "2008210",
    "end": "2016910"
  },
  {
    "text": "hvm versus PV and I would you just wanted to go into why what makes hv m faster why does it actually impact your",
    "start": "2016910",
    "end": "2023480"
  },
  {
    "text": "workload and on a normal bare metal",
    "start": "2023480",
    "end": "2029720"
  },
  {
    "text": "server there's really two privileged modes that the system is running in it's",
    "start": "2029720",
    "end": "2035090"
  },
  {
    "text": "either running in the kernel mode or it's running in a user space mode or application mode and depending on the",
    "start": "2035090",
    "end": "2041000"
  },
  {
    "text": "what your workloads doing it may have to make a large number of requests from the",
    "start": "2041000",
    "end": "2046160"
  },
  {
    "text": "user space application to the kernel either to do i/o for timekeeping purposes for a large number of things",
    "start": "2046160",
    "end": "2052820"
  },
  {
    "text": "and the fortunately Intel has done a really good job optimizing this so it's",
    "start": "2052820",
    "end": "2059419"
  },
  {
    "text": "very very fast today I like to say that you can do the time it takes to do a",
    "start": "2059419",
    "end": "2065929"
  },
  {
    "text": "system call is roughly a handful of division operations so in terms of",
    "start": "2065929",
    "end": "2071300"
  },
  {
    "text": "orders of magnitude often doing math is more expensive than making system calls and a lot of applications have come to",
    "start": "2071300",
    "end": "2078919"
  },
  {
    "text": "rely on this now when virtualization was first introduced when ec2 was first",
    "start": "2078919",
    "end": "2085280"
  },
  {
    "text": "launched we only had these two privileged modes to work with there wasn't any special hardware support for",
    "start": "2085280",
    "end": "2092240"
  },
  {
    "text": "virtualization at the time and particularly for 64-bit PV guests",
    "start": "2092240",
    "end": "2098470"
  },
  {
    "text": "whenever an application needs to talk to the colonel instead of being able to go through this very very fast hardware",
    "start": "2098470",
    "end": "2105940"
  },
  {
    "text": "channel 4 the communication it actually has to talk to the hypervisor and the hypervisor has to mediate the",
    "start": "2105940",
    "end": "2112300"
  },
  {
    "text": "communication between user space in the kernel and this mediation requires a TLB",
    "start": "2112300",
    "end": "2117940"
  },
  {
    "text": "flush and like I mentioned earlier TLB flushes are are generally evil and should be avoided so for some",
    "start": "2117940",
    "end": "2126339"
  },
  {
    "text": "applications it won't make a difference if your application is largely doing user space computation then you might",
    "start": "2126339",
    "end": "2132700"
  },
  {
    "text": "not see a difference between P B and H VM however if you are using a lot of i/o if you're sending a lot of packets over",
    "start": "2132700",
    "end": "2139180"
  },
  {
    "text": "the network if you're making a lot of kernel interactions you can see I've",
    "start": "2139180",
    "end": "2145450"
  },
  {
    "text": "measured as high as a 2 to 3 X performance improvement from using h vm",
    "start": "2145450",
    "end": "2150760"
  },
  {
    "text": "over pv so it really can make a big difference for your application and the",
    "start": "2150760",
    "end": "2159700"
  },
  {
    "text": "the final tip we have for getting the most out of your C 3 instance is to use",
    "start": "2159700",
    "end": "2166000"
  },
  {
    "text": "the TSC as your clock source on linux there's two different time mechanisms to",
    "start": "2166000",
    "end": "2173530"
  },
  {
    "text": "know about clock source and clock events and at a very high level when you do a",
    "start": "2173530",
    "end": "2179589"
  },
  {
    "text": "get time of day you're accessing a clock source I have commands on the screen and you can see",
    "start": "2179589",
    "end": "2185740"
  },
  {
    "text": "it on the slide share after this event that will let you see what your clock sort your current clock source is",
    "start": "2185740",
    "end": "2191970"
  },
  {
    "text": "usually by default it's going to be the Zen clock source the Zen PV clock if",
    "start": "2191970",
    "end": "2199210"
  },
  {
    "text": "you're running on C 3 or if you're running on any of the current generation ec2 platforms you definitely want to use",
    "start": "2199210",
    "end": "2204460"
  },
  {
    "text": "the TSC as your clock source and you can do that by modifying your kernel command",
    "start": "2204460",
    "end": "2209680"
  },
  {
    "text": "line parameter you'll notice that I used Emacs for that and that's also very",
    "start": "2209680",
    "end": "2215410"
  },
  {
    "text": "important because it is the right editor to use you'll be much slower if you do",
    "start": "2215410",
    "end": "2221650"
  },
  {
    "text": "it with the I I swear so timekeeping is a really really",
    "start": "2221650",
    "end": "2227530"
  },
  {
    "text": "fascinating topic if if anybody runs into me in any of the after events I can",
    "start": "2227530",
    "end": "2234609"
  },
  {
    "text": "talk for hours with about it over beer and it would be a great conversation but the important takeaway for this talk",
    "start": "2234609",
    "end": "2240910"
  },
  {
    "text": "is that it's deceptively hard and deceptively hard means there's a lot of",
    "start": "2240910",
    "end": "2247270"
  },
  {
    "text": "software involved in figuring out what the current time is so if you have an",
    "start": "2247270",
    "end": "2252910"
  },
  {
    "text": "application that's doing get time of day or on Windows the equivalent is query performance counter then this will",
    "start": "2252910",
    "end": "2259270"
  },
  {
    "text": "affect you and the types of applications that typically do this if you're doing",
    "start": "2259270",
    "end": "2265330"
  },
  {
    "text": "JVM tracing it does very very heavy good time of day cause if you're doing",
    "start": "2265330",
    "end": "2271690"
  },
  {
    "text": "benchmarking oddly enough benchmarks tend to measure the time of every single IO requests and so benchmarks tend to",
    "start": "2271690",
    "end": "2278440"
  },
  {
    "text": "show this problem more than a lot of applications then this will help you out a lot without going through the gory",
    "start": "2278440",
    "end": "2285790"
  },
  {
    "text": "details about it the TSC is a hardware clock source that basically gets rid of",
    "start": "2285790",
    "end": "2291970"
  },
  {
    "text": "all of the ugly software that typically has to go on top of things and the most important thing is that on linux you can",
    "start": "2291970",
    "end": "2298510"
  },
  {
    "text": "access the TSC without even talking to the kernel and so avoiding that system",
    "start": "2298510",
    "end": "2304660"
  },
  {
    "text": "call can make a big difference for certain workloads now there's a really",
    "start": "2304660",
    "end": "2309700"
  },
  {
    "text": "good reason why the Zen PV clock is the default clock source it's because that's",
    "start": "2309700",
    "end": "2314920"
  },
  {
    "text": "the thing that gives you the best compatibility across a whole wide range of hardware but when you're running on",
    "start": "2314920",
    "end": "2320260"
  },
  {
    "text": "ec2 you know we have very well-defined hardware and our hardware is always",
    "start": "2320260",
    "end": "2326020"
  },
  {
    "text": "going to be compatible with the TSC if you're on a current generation platform at least so with that as I mentioned",
    "start": "2326020",
    "end": "2334720"
  },
  {
    "text": "this is just a small number of the tips we have but I'll turn it over to John to close this out",
    "start": "2334720",
    "end": "2343020"
  },
  {
    "text": "thanks Anthony so we're really just scratching the",
    "start": "2343020",
    "end": "2348280"
  },
  {
    "text": "surface lots of tips and best practices in this presentation you know using a",
    "start": "2348280",
    "end": "2353410"
  },
  {
    "text": "three point eight plus kernel for grant pooling to deliver high i/o getting the",
    "start": "2353410",
    "end": "2358660"
  },
  {
    "text": "right time source is important for especially if you're doing things like benchmarking where we've got a lot to",
    "start": "2358660",
    "end": "2365740"
  },
  {
    "text": "talk about if you wanted to follow up after this come visit us at the developer chat afterwards to hear more and of course visit the ec2 instance",
    "start": "2365740",
    "end": "2372670"
  },
  {
    "text": "document pation for more information more tips and tricks and I wanted to leave you",
    "start": "2372670",
    "end": "2377990"
  },
  {
    "text": "with a final note that kind of brings us back to the surface which is the future of ec2 we we have a platform that allows",
    "start": "2377990",
    "end": "2385190"
  },
  {
    "text": "us to ingest new hardware and new hardware and new technologies and work",
    "start": "2385190",
    "end": "2392150"
  },
  {
    "text": "that smart folks like Anthony does to customers in the form of new instance",
    "start": "2392150",
    "end": "2397220"
  },
  {
    "text": "families and new instance generations with within each family and there are",
    "start": "2397220",
    "end": "2402290"
  },
  {
    "text": "more of those to come in the future so what I'd like to leave you with is just the the requests that you come to us and",
    "start": "2402290",
    "end": "2408800"
  },
  {
    "text": "you tell us what you want the future of ec2 to look like because we have a platform so that we could take your",
    "start": "2408800",
    "end": "2414650"
  },
  {
    "text": "feedback and we use it we take your feedback very seriously to improve our offering thank you very much",
    "start": "2414650",
    "end": "2422380"
  }
]