[
  {
    "start": "0",
    "end": "56000"
  },
  {
    "text": "Welcome to 'Back to Basics'.",
    "start": "4756",
    "end": "5944"
  },
  {
    "text": "I'm Adrian De Luca.",
    "start": "5944",
    "end": "7725"
  },
  {
    "text": "Werner Vogels, Amazon's CTO,\nonce famously said,",
    "start": "7725",
    "end": "11510"
  },
  {
    "text": "\"Everything fails all of the time.\"",
    "start": "11510",
    "end": "13996"
  },
  {
    "text": "That might sound like a scary prophecy,",
    "start": "13996",
    "end": "16608"
  },
  {
    "text": "but what he meant was that\nwe need to build systems",
    "start": "16608",
    "end": "18935"
  },
  {
    "text": "that embrace failure as a natural occurrence,",
    "start": "18935",
    "end": "21783"
  },
  {
    "text": "even when we don't know\nwhat the nature of them are.",
    "start": "21783",
    "end": "24679"
  },
  {
    "text": "In the old days,\ndevelopers used to compile their code,",
    "start": "24679",
    "end": "27570"
  },
  {
    "text": "hand over the applications\nto the operational team",
    "start": "27570",
    "end": "30110"
  },
  {
    "text": "to figure out how to run in production.",
    "start": "30110",
    "end": "32534"
  },
  {
    "text": "Well, it turns out that most\nof the failures were because we didn't invest",
    "start": "32534",
    "end": "37079"
  },
  {
    "text": "in hardening and automating\nthe best practices.",
    "start": "37079",
    "end": "40454"
  },
  {
    "text": "In the cloud world,\nif you build it, you run it.",
    "start": "40454",
    "end": "43961"
  },
  {
    "text": "Today, we're going\nto look at how we do it really well",
    "start": "43962",
    "end": "47400"
  },
  {
    "text": "on Amazon's Elastic Cloud Compute Service,\nor EC2.",
    "start": "47400",
    "end": "52019"
  },
  {
    "text": "We've got a lot to get through,\nso let's dive in.",
    "start": "52019",
    "end": "54361"
  },
  {
    "text": "When you launch your application on EC2,",
    "start": "55392",
    "end": "58154"
  },
  {
    "start": "56000",
    "end": "190000"
  },
  {
    "text": "AWS starts collecting lots of metrics\nin CloudWatch.",
    "start": "58154",
    "end": "62195"
  },
  {
    "text": "Using these services together",
    "start": "62195",
    "end": "63538"
  },
  {
    "text": "makes it really easy to programmatically\nincrease their reliability.",
    "start": "63538",
    "end": "67113"
  },
  {
    "text": "Designing for failure requires you\nto consider a number of key elements.",
    "start": "68256",
    "end": "72215"
  },
  {
    "text": "First, understanding resiliency\nof components.",
    "start": "72216",
    "end": "76096"
  },
  {
    "text": "Second, automating recovery from a failure.",
    "start": "76096",
    "end": "79306"
  },
  {
    "text": "Next, you need to also look\nat scaling to meet demand.",
    "start": "79306",
    "end": "82817"
  },
  {
    "text": "And finally, testing.",
    "start": "82817",
    "end": "85059"
  },
  {
    "text": "Resiliency is basically the ability\nto recover from a service interruption,",
    "start": "85059",
    "end": "89310"
  },
  {
    "text": "and we apply this to the components\nthat make your application usable to users.",
    "start": "89310",
    "end": "93343"
  },
  {
    "text": "And it includes things like compute,\nnetwork, and storage.",
    "start": "93344",
    "end": "96356"
  },
  {
    "text": "Availability is measured in percentage\nusing this formula,",
    "start": "98058",
    "end": "101715"
  },
  {
    "text": "and sometimes referred\nto as the number of nines.",
    "start": "101716",
    "end": "104848"
  },
  {
    "text": "So for example, 99.999% equates\nto around 5 minutes of downtime per year.",
    "start": "104848",
    "end": "111263"
  },
  {
    "text": "Other measures\nthat we use between dependencies",
    "start": "112544",
    "end": "114998"
  },
  {
    "text": "are mean time to failure and mean time\nto recover, which can both be estimated.",
    "start": "114998",
    "end": "120002"
  },
  {
    "text": "But more about this later.",
    "start": "120002",
    "end": "121986"
  },
  {
    "text": "In your application\nrunning on 1 or more EC2s,",
    "start": "121986",
    "end": "125265"
  },
  {
    "text": "you will have multiple dependencies\nwhich affect this.",
    "start": "125265",
    "end": "128302"
  },
  {
    "text": "This could be networks,\nweb servers, databases, or APIs.",
    "start": "128303",
    "end": "133090"
  },
  {
    "text": "I'll cover the most important patterns.",
    "start": "133090",
    "end": "134927"
  },
  {
    "text": "It all starts with some planning.",
    "start": "136069",
    "end": "138523"
  },
  {
    "text": "Deploying your workload\nto multiple locations is a must.",
    "start": "138523",
    "end": "142068"
  },
  {
    "text": "This is the foundational element\nof minimizing the fault boundary",
    "start": "142068",
    "end": "145834"
  },
  {
    "text": "for your applications.",
    "start": "145834",
    "end": "147376"
  },
  {
    "text": "So make sure all your critical resources\nrun across multiple availability zones",
    "start": "147376",
    "end": "152449"
  },
  {
    "text": "because this provides physical isolation.",
    "start": "152449",
    "end": "154935"
  },
  {
    "text": "Service quotas ensure that you have\nenough resources for your application,",
    "start": "156696",
    "end": "161039"
  },
  {
    "text": "as well as don't overstep them.",
    "start": "161039",
    "end": "163391"
  },
  {
    "text": "In any one region, you have\n5 Amazon VPCs with 200 subnets.",
    "start": "163391",
    "end": "169155"
  },
  {
    "text": "For Elastic Block Service, or EBS volumes,\nthat are attached to your EC2 instances,",
    "start": "169155",
    "end": "175112"
  },
  {
    "text": "you can set provisioned IOPS to throttle\nreads and writes of your data.",
    "start": "175112",
    "end": "179443"
  },
  {
    "text": "Amazon EC2 has a limits dashboard\nthat not only allows you to check",
    "start": "179443",
    "end": "183967"
  },
  {
    "text": "on how many resources you're using,\nbut also increase them if necessary.",
    "start": "183967",
    "end": "188144"
  },
  {
    "text": "So let's look at how we recover\nfrom some common failures.",
    "start": "189677",
    "end": "193566"
  },
  {
    "start": "190000",
    "end": "266000"
  },
  {
    "text": "Your application on EC2 can become\nunresponsive for multiple reasons,",
    "start": "193566",
    "end": "198631"
  },
  {
    "text": "perhaps a hardware failure,\nor a software problem.",
    "start": "198631",
    "end": "201748"
  },
  {
    "text": "So the best way to protect yourself\nis to have multiple instances.",
    "start": "201748",
    "end": "206012"
  },
  {
    "text": "Using the Elastic Load Balancer\nor the Application Load Balancer",
    "start": "206012",
    "end": "210461"
  },
  {
    "text": "to route them to the healthy ones\nis the best way to mitigate this.",
    "start": "210462",
    "end": "214355"
  },
  {
    "text": "Listeners check for connection requests\non protocols that you can configure,",
    "start": "214355",
    "end": "219109"
  },
  {
    "text": "like TCP, HTTP, or Websocket ports,\nand route them to the target groups.",
    "start": "219109",
    "end": "225433"
  },
  {
    "text": "Health checks periodically send\nrequests to test their status.",
    "start": "225434",
    "end": "229549"
  },
  {
    "text": "Configured with timeouts,\nthey manage the availability pool.",
    "start": "229549",
    "end": "233379"
  },
  {
    "text": "This is how we reduce\nthe mean time between failure.",
    "start": "233380",
    "end": "236690"
  },
  {
    "text": "Inability to access data\nis another frequent reason for failures.",
    "start": "236690",
    "end": "240781"
  },
  {
    "text": "The volumes that users store data\non can become corrupted, overwritten,",
    "start": "240781",
    "end": "245707"
  },
  {
    "text": "or simply unavailable\nthrough misconfigurations.",
    "start": "245707",
    "end": "248723"
  },
  {
    "text": "So protecting the data volumes\nis really important.",
    "start": "248723",
    "end": "252272"
  },
  {
    "text": "It starts with identifying two things,\nRecovery Time Objective,",
    "start": "252272",
    "end": "256969"
  },
  {
    "text": "this is the maximum tolerable downtime\nfor data to be available again,",
    "start": "256969",
    "end": "261353"
  },
  {
    "text": "and Recovery Point Objective,\nthe amount of data that can be lost.",
    "start": "261353",
    "end": "265972"
  },
  {
    "text": "This determines the back-up schedule\nto implement.",
    "start": "265972",
    "end": "269030"
  },
  {
    "start": "266000",
    "end": "344000"
  },
  {
    "text": "For data that changes frequently\nand needs to be recovered quickly,",
    "start": "269030",
    "end": "272867"
  },
  {
    "text": "you would want to back that up every hour,",
    "start": "272867",
    "end": "274743"
  },
  {
    "text": "whereas for data\nthat doesn't get accessed a lot,",
    "start": "274743",
    "end": "278039"
  },
  {
    "text": "you can afford to back that up,\nsay, daily or weekly.",
    "start": "278039",
    "end": "282163"
  },
  {
    "text": "Here you can take snapshots of EBS volumes\nto the Amazon Simple Storage Service, or S3,",
    "start": "282163",
    "end": "288934"
  },
  {
    "text": "and use the Amazon Data\nLifecycle Manager to automate it.",
    "start": "288934",
    "end": "293840"
  },
  {
    "text": "Versioning helps you track the copies,",
    "start": "293840",
    "end": "296336"
  },
  {
    "text": "and also it's a good idea\nto use S3 to replicate it",
    "start": "296336",
    "end": "299999"
  },
  {
    "text": "to another AWS region, just to keep it safe.",
    "start": "299999",
    "end": "303972"
  },
  {
    "text": "Auto Scale Groups monitor your instances",
    "start": "303972",
    "end": "306439"
  },
  {
    "text": "and automatically adjust capacity",
    "start": "306440",
    "end": "308647"
  },
  {
    "text": "to maintain a steady fleet\nto meet your user demand.",
    "start": "308647",
    "end": "311754"
  },
  {
    "text": "It does this by monitoring\nCloudWatch metrics,",
    "start": "311754",
    "end": "314462"
  },
  {
    "text": "like CPU and memory utilization.",
    "start": "314462",
    "end": "317161"
  },
  {
    "text": "But for more complex applications,\nyou can create your own metrics too.",
    "start": "317161",
    "end": "321404"
  },
  {
    "text": "I strongly recommend that\nyou use target tracking scaling policies",
    "start": "321404",
    "end": "325621"
  },
  {
    "text": "to scale on metrics like\naverage CPU utilization",
    "start": "325622",
    "end": "329984"
  },
  {
    "text": "or request count per target metric,\nwhich the Application Load Balancer uses.",
    "start": "329984",
    "end": "336435"
  },
  {
    "text": "This ensures EC2 Auto Scaling closely follows\nthe demand curve for your application.",
    "start": "336435",
    "end": "342145"
  },
  {
    "text": "You can configure this\nto optimize for availability,",
    "start": "343646",
    "end": "346962"
  },
  {
    "start": "344000",
    "end": "380000"
  },
  {
    "text": "say, keeping capacity at 70%,\nor cost, say, at 40%, or a mix of both.",
    "start": "346963",
    "end": "353827"
  },
  {
    "text": "CloudWatch Alarms allow you to define",
    "start": "353827",
    "end": "356445"
  },
  {
    "text": "upper and lower bounds\nfor scaling in and out,",
    "start": "356445",
    "end": "359532"
  },
  {
    "text": "and using step scaling policies\nto control these size adjustments.",
    "start": "359532",
    "end": "364834"
  },
  {
    "text": "For workloads\nwith consistent traffic patterns,",
    "start": "364834",
    "end": "368332"
  },
  {
    "text": "it's a good idea to enable\npredictive scaling.",
    "start": "368332",
    "end": "371261"
  },
  {
    "text": "This uses machine learning\nto evaluate historic demand",
    "start": "371261",
    "end": "374732"
  },
  {
    "text": "and creates a forecast for the next 48 hours\nto anticipate it.",
    "start": "374732",
    "end": "379906"
  },
  {
    "text": "Designing and deploying resilient\narchitecture is not enough.",
    "start": "379906",
    "end": "384092"
  },
  {
    "start": "380000",
    "end": "475000"
  },
  {
    "text": "You need to test it.",
    "start": "384092",
    "end": "385244"
  },
  {
    "text": "Playbooks are not instruction manuals.",
    "start": "385244",
    "end": "387582"
  },
  {
    "text": "They are proactive planning that you do\nto document reactive actions effectively.",
    "start": "387583",
    "end": "392739"
  },
  {
    "text": "When failure scenarios not covered\nby the playbook are encountered",
    "start": "392739",
    "end": "397003"
  },
  {
    "text": "during the testing and production,\nput out the fire first,",
    "start": "397003",
    "end": "400746"
  },
  {
    "text": "but always make sure\nthat you review processes",
    "start": "400746",
    "end": "404153"
  },
  {
    "text": "and update it with what you've learned.",
    "start": "404153",
    "end": "406420"
  },
  {
    "text": "Deployment needs to be more\nthan just repeatable.",
    "start": "406420",
    "end": "408849"
  },
  {
    "text": "It also needs to be dependable.",
    "start": "408849",
    "end": "411116"
  },
  {
    "text": "This is where CodePipeline can help.",
    "start": "411116",
    "end": "413734"
  },
  {
    "text": "When developers can make changes\nto a source repository,",
    "start": "413734",
    "end": "416941"
  },
  {
    "text": "CodePipeline automatically\ndetects the changes,",
    "start": "416941",
    "end": "419874"
  },
  {
    "text": "building new artifacts required,\nand runs tests.",
    "start": "419874",
    "end": "423514"
  },
  {
    "text": "If testing completes successfully,",
    "start": "423514",
    "end": "425682"
  },
  {
    "text": "the built code is deployed\nto a staging server for further testing.",
    "start": "425682",
    "end": "430451"
  },
  {
    "text": "From the staging server,\nCodePipeline runs even more tests,",
    "start": "430451",
    "end": "434560"
  },
  {
    "text": "such as integration and load testing.",
    "start": "434561",
    "end": "437636"
  },
  {
    "text": "Simulating user behavior is another way\nin which we can anticipate failure.",
    "start": "437636",
    "end": "442180"
  },
  {
    "text": "Canary testing allows us to test\nyour workloads from diverse locations.",
    "start": "442180",
    "end": "447258"
  },
  {
    "text": "Here Amazon CloudWatch Synthetics\nallows you to create canaries",
    "start": "447258",
    "end": "451771"
  },
  {
    "text": "to be able to test your endpoints and APIs.",
    "start": "451771",
    "end": "455009"
  },
  {
    "text": "This is what we call continuous integration\nor continuous deployment.",
    "start": "455009",
    "end": "458801"
  },
  {
    "text": "So now you've learned some\nof my top tips for resiliency with EC2.",
    "start": "460071",
    "end": "464442"
  },
  {
    "text": "Check out the links below for more details.",
    "start": "464442",
    "end": "467244"
  },
  {
    "text": "See you next time.",
    "start": "467244",
    "end": "468401"
  }
]