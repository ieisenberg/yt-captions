[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "thanks for coming to the session This is uh getting started with Amazon Aurora It's an introductory session to help you",
    "start": "80",
    "end": "5680"
  },
  {
    "text": "get up to speed with the Aurora service Um just to get a feel Has anyone here actually used Aurora",
    "start": "5680",
    "end": "13679"
  },
  {
    "text": "already okay fair number Okay so what is Aurora",
    "start": "13880",
    "end": "20720"
  },
  {
    "start": "19000",
    "end": "66000"
  },
  {
    "text": "um Aurora was designed to be uh a managed database that gives you the",
    "start": "20720",
    "end": "25840"
  },
  {
    "text": "speed and the availability of a high-end commercial database um while offering the simplicity and the cost effectiveness and you know the lack of",
    "start": "25840",
    "end": "32480"
  },
  {
    "text": "licensing lock in of an open source database like my SQL Uh Aurora is a",
    "start": "32480",
    "end": "37760"
  },
  {
    "text": "fully MySQL 56 compatible database It's designed to be a drop-in replacement for",
    "start": "37760",
    "end": "43360"
  },
  {
    "text": "um for my SQL so that makes we just want it to be easy for customers to get in and out of Aurora as they need Uh and",
    "start": "43360",
    "end": "50239"
  },
  {
    "text": "Aurora offers uh you know the standard um simple pay as you go pricing model that you would expect from an AWS",
    "start": "50239",
    "end": "55760"
  },
  {
    "text": "service If you need it today you use it you pay for it If you don't need it tomorrow shut it down you don't pay for it",
    "start": "55760",
    "end": "60920"
  },
  {
    "text": "anymore Um so why did we bother to build this why do we need another database",
    "start": "60920",
    "end": "67080"
  },
  {
    "start": "66000",
    "end": "183000"
  },
  {
    "text": "service part of the reason was you know all those characteristics I mentioned um when we were looking at building Aurora",
    "start": "67080",
    "end": "73280"
  },
  {
    "text": "there wasn't really a a viable option for doing that kind of thing on the cloud Um typical database architectures",
    "start": "73280",
    "end": "79520"
  },
  {
    "text": "are relatively monolithic I mean you have a lot of functionality you know SQL transactions caching logging all kind of",
    "start": "79520",
    "end": "84640"
  },
  {
    "text": "crammed into a single machine And you can always buy a bigger machine uh if you need to scale your database but that",
    "start": "84640",
    "end": "89920"
  },
  {
    "text": "does get expensive quickly Um you also have scale out solutions where you can try and grow your database by adding",
    "start": "89920",
    "end": "96320"
  },
  {
    "text": "more machines to the mix Um you know and there you know here are three fairly common uh ways of doing that Um you can",
    "start": "96320",
    "end": "102799"
  },
  {
    "text": "shard your database That's one of the most common Probably a lot of people here have done that um where essentially",
    "start": "102799",
    "end": "108159"
  },
  {
    "text": "you're you know you're you're moving your database across multiple machines and you're connecting them all at the application level Um it can work pretty",
    "start": "108159",
    "end": "114079"
  },
  {
    "text": "well but it does have the downside that things that relational databases used to make easy uh can now become hard Things",
    "start": "114079",
    "end": "119920"
  },
  {
    "text": "like managing transactions across a large number of machines or running a complicated query that has to span a number of machines All of that work has",
    "start": "119920",
    "end": "125840"
  },
  {
    "text": "to be done by the application developer Um you can try a shared nothing approach um where you're essentially um you know",
    "start": "125840",
    "end": "132720"
  },
  {
    "text": "every every node in the in the deployment it owns its set of the data and you connect them at the SQL levels",
    "start": "132720",
    "end": "138720"
  },
  {
    "text": "It's easier on the application developer Um but if you lose a node um you lose the data and so as you scale out across",
    "start": "138720",
    "end": "145040"
  },
  {
    "text": "a larger number of machines you start to get a higher availability and durability risk with this approach Um you can also",
    "start": "145040",
    "end": "151360"
  },
  {
    "text": "try a shared disk approach which is the kind of thing that Oracle rack might do Um where you're essentially fusing at",
    "start": "151360",
    "end": "157200"
  },
  {
    "text": "the cache layer and giving all the nodes access to a shared underlying disk layer And this can also work pretty well",
    "start": "157200",
    "end": "163280"
  },
  {
    "text": "Actually has a lot of scaling potential but uh and it's actually particularly good at things like load balancing Since",
    "start": "163280",
    "end": "168480"
  },
  {
    "text": "all the different nodes have access to the same data you can spread your uh your traffic out pretty well Um but it",
    "start": "168480",
    "end": "173519"
  },
  {
    "text": "has known scaling bottlenecks around things like um there hotkey or hot partition issues Um there also concerns",
    "start": "173519",
    "end": "179519"
  },
  {
    "text": "around distributed locking So when we were looking at",
    "start": "179519",
    "end": "185519"
  },
  {
    "start": "183000",
    "end": "221000"
  },
  {
    "text": "building Aurora we wanted to think about how would we design it in today's more",
    "start": "185519",
    "end": "191120"
  },
  {
    "text": "modern cloud environment The other scaleout solutions I mentioned they work",
    "start": "191120",
    "end": "196239"
  },
  {
    "text": "pretty well and they they were good designs for what they were designed for which was you were probably going to be running your database on a you know",
    "start": "196239",
    "end": "202000"
  },
  {
    "text": "pretty large set of machines that were probably sitting in a data center that you controlled Um but today we would",
    "start": "202000",
    "end": "207760"
  },
  {
    "text": "probably expect to build a database system that you know certainly is scale out but also has a self-healing architecture something that can recover",
    "start": "207760",
    "end": "213840"
  },
  {
    "text": "from failures pretty well Uh and something that leverages a lot of modern cloud services that you can get with AWS",
    "start": "213840",
    "end": "219040"
  },
  {
    "text": "that weren't available 30 years ago So what we did with Aurora was we tried",
    "start": "219040",
    "end": "225920"
  },
  {
    "start": "221000",
    "end": "285000"
  },
  {
    "text": "to take a more serviceoriented approach and rather than cramming everything into um a single machine in terms of like",
    "start": "225920",
    "end": "232879"
  },
  {
    "text": "having every machine able to do you know SQL transactions caching logging storage we tried to look at each layer of the",
    "start": "232879",
    "end": "238159"
  },
  {
    "text": "database and figure out can we make this a more cloud friendly layer can we",
    "start": "238159",
    "end": "243280"
  },
  {
    "text": "separate it out from the main machine and leverage cloud services so one of the most important things that we did with Aurora was we moved the logging in",
    "start": "243280",
    "end": "250400"
  },
  {
    "text": "the storage layer out into its own multi-tenant scaleout storage system It's a log structured storage system",
    "start": "250400",
    "end": "256160"
  },
  {
    "text": "that's really optimized for databases Uh and by moving the logging in the storage layer you know away from all of those",
    "start": "256160",
    "end": "263120"
  },
  {
    "text": "database instance nodes we're able to achieve a lot of availability and performance wins We also integrated",
    "start": "263120",
    "end": "269360"
  },
  {
    "text": "Aurora with a lot of other modern AWS services like EC2 VPC DynamoB Simple Workflow and so on Uh and certainly one",
    "start": "269360",
    "end": "275759"
  },
  {
    "text": "of the most important is that we continuously back up Aurora to S3 which means that Aurora backups can benefit",
    "start": "275759",
    "end": "281280"
  },
  {
    "text": "from S3's 11 9 of durability So we announced Aurora in uh",
    "start": "281280",
    "end": "290639"
  },
  {
    "start": "285000",
    "end": "299000"
  },
  {
    "text": "believe it was November of 2014 and then made had a long beta and made it generally available in uh July of last",
    "start": "290639",
    "end": "297440"
  },
  {
    "text": "year Uh and we've it's been quite humbling actually the response that we've gotten from our customers So it's it's broken um by a fair margin the",
    "start": "297440",
    "end": "305040"
  },
  {
    "start": "299000",
    "end": "312000"
  },
  {
    "text": "growth records for fastest growing AWS service and we've gotten pretty broad adoption across the AWS customer",
    "start": "305040",
    "end": "312479"
  },
  {
    "start": "312000",
    "end": "369000"
  },
  {
    "text": "base As an example Expedia um probably a lot of you have used it to get here Um Expedia is if you don't know it is just",
    "start": "313000",
    "end": "320240"
  },
  {
    "text": "a a massively popular uh travel site You can book hotel rooms um flights cars",
    "start": "320240",
    "end": "326240"
  },
  {
    "text": "things like that Um and they have or they had a SQL server-based um real-time",
    "start": "326240",
    "end": "331919"
  },
  {
    "text": "business intelligence and analytics system um which was basically constantly looking at things like you know how is the price of a hotel room tracking over",
    "start": "331919",
    "end": "338240"
  },
  {
    "text": "time minute by minute and how is it likely to evolve in the future which is pretty important for their business Um",
    "start": "338240",
    "end": "343600"
  },
  {
    "text": "they were concerned about the scale and the performance of that system um particularly with regards to the uh the",
    "start": "343600",
    "end": "348960"
  },
  {
    "text": "licensing costs associated with SQL server Um what they found was that they were able to actually reduce costs and",
    "start": "348960",
    "end": "354320"
  },
  {
    "text": "improve performance when they switched to Aurora and they were hitting on the order of 25,000 inserts inserts per",
    "start": "354320",
    "end": "360560"
  },
  {
    "text": "second uh on a typical day but peaking up at 70,000 which was you know significantly better than what they",
    "start": "360560",
    "end": "367160"
  },
  {
    "text": "needed Now it's not necessarily surprising um that Aurora would have a",
    "start": "367160",
    "end": "372560"
  },
  {
    "start": "369000",
    "end": "404000"
  },
  {
    "text": "cost advantage over say a commercial database you know given the licensing fees involved Um one of the emerging trends that we've seen in the last year",
    "start": "372560",
    "end": "378800"
  },
  {
    "text": "is that for a lot of our customers they're actually seeing lower costs when compared to open source databases uh",
    "start": "378800",
    "end": "384000"
  },
  {
    "text": "which was something that we'd really hope they would be able to achieve So two examples uh safe software and uh",
    "start": "384000",
    "end": "389520"
  },
  {
    "text": "double down uh double down gaming So they both migrated from my SQL and uh",
    "start": "389520",
    "end": "394639"
  },
  {
    "text": "safe.com was actually able to reduce their bill by 40% and double down by 67%",
    "start": "394639",
    "end": "400240"
  },
  {
    "text": "And the reason that they were able to reduce their cost relative to even an open source engine is that Aurora was",
    "start": "400240",
    "end": "406000"
  },
  {
    "text": "designed to significantly outperform my SQL So I mean here we have a quote from one of our customers John Newton who",
    "start": "406000",
    "end": "411600"
  },
  {
    "text": "found a 10x improvement over my SQL But essentially when you when you have a",
    "start": "411600",
    "end": "417600"
  },
  {
    "text": "database that can run a lot faster you can run that database on smaller machines or on fewer machines And so",
    "start": "417600",
    "end": "422720"
  },
  {
    "text": "what we're seeing is a lot of our customers are actually taking a sharded MySQL deployment and collapsing it down",
    "start": "422720",
    "end": "427759"
  },
  {
    "text": "into you know and often cases even just a single Aurora instance and that's that's how they're leveraging Aurora to",
    "start": "427759",
    "end": "432800"
  },
  {
    "text": "save money Um but you know anyone can find an anecdote right so there we should",
    "start": "432800",
    "end": "438319"
  },
  {
    "text": "probably take a look at some more rigorous data on what you know performance really looks like So these are some benchmarking",
    "start": "438319",
    "end": "445919"
  },
  {
    "start": "442000",
    "end": "519000"
  },
  {
    "text": "results that we run We actually run this test pretty rigorously I get these results by email every day Uh we have uh",
    "start": "445919",
    "end": "451759"
  },
  {
    "text": "we're running MySQL cybench on R3.8XL instances So those are fairly beefy instances with 32 cores and uh 244",
    "start": "451759",
    "end": "459440"
  },
  {
    "text": "gigs of RAM So this Aurora instance is able to achieve a little over a 100,000",
    "start": "459440",
    "end": "466240"
  },
  {
    "text": "writes per second and 585,000 reads per second Um so to put that in context we",
    "start": "466240",
    "end": "473199"
  },
  {
    "text": "uh we pushed my SQL about as hard as we could on this machine uh and this is about 5x higher than what we were able",
    "start": "473199",
    "end": "478240"
  },
  {
    "text": "to achieve with my SQL So we were pretty happy with these results and we actually wouldn't launch Aurora until we got you",
    "start": "478240",
    "end": "485680"
  },
  {
    "text": "know we got to the level where we were we were this happy with the performance Um but again we also don't want to",
    "start": "485680",
    "end": "491759"
  },
  {
    "text": "optimize for the one fancy benchmark that just makes us look good Um you know you can find you can find a way to tune",
    "start": "491759",
    "end": "497440"
  },
  {
    "text": "any benchmark to make any database look good under some individual condition Um but the other way that we like to look",
    "start": "497440",
    "end": "503120"
  },
  {
    "text": "at it is um we know that if someone's successful their application's going to grow things are going to change and how",
    "start": "503120",
    "end": "509280"
  },
  {
    "text": "is the performance of the database likely to vary uh as your application grows So we looked at a couple of",
    "start": "509280",
    "end": "515599"
  },
  {
    "text": "dimensions for um how an application growth might change how the database works So here's",
    "start": "515599",
    "end": "523279"
  },
  {
    "start": "519000",
    "end": "589000"
  },
  {
    "text": "an example where we ran Sisbench um but we we varied the number of tables Uh so we started with 10 tables and then we",
    "start": "523279",
    "end": "529279"
  },
  {
    "text": "took it up three orders of magnitude to 10,000 tables just to see how the performance would vary Um the line at",
    "start": "529279",
    "end": "534880"
  },
  {
    "text": "the top is Aurora and below are three flavors of my SQL or three setups of my SQL My SQL running on um SSDs my SQL on",
    "start": "534880",
    "end": "542320"
  },
  {
    "text": "RAM disk and um my SQL running on RDS So two observations here One is that",
    "start": "542320",
    "end": "550240"
  },
  {
    "text": "uh Aurora you know as as you would guess from the previous slide pretty significantly outperformed my SQL Um but",
    "start": "550240",
    "end": "557279"
  },
  {
    "text": "importantly as the you know as the number of tables grew simulating the growth of a of the application using the",
    "start": "557279",
    "end": "563680"
  },
  {
    "text": "database um Aurora held on to its performance better than my SQL did which",
    "start": "563680",
    "end": "569600"
  },
  {
    "text": "is by design So essentially if you look at the you know I know that the the dip",
    "start": "569600",
    "end": "574640"
  },
  {
    "text": "is comparable in terms of absolute value but if you look at the percentage drop in uh in Aurora performance as you go",
    "start": "574640",
    "end": "581279"
  },
  {
    "text": "from say 100 tables to 10,000 it's quite a bit smaller than the drop that you see in all three variants of my",
    "start": "581279",
    "end": "588880"
  },
  {
    "start": "589000",
    "end": "643000"
  },
  {
    "text": "SQL Another variation on this test is to vary the connection count So um and this",
    "start": "590120",
    "end": "596080"
  },
  {
    "text": "is something we see pretty commonly in production as well an application becomes successful the number of connections starts to grow very rapidly",
    "start": "596080",
    "end": "602000"
  },
  {
    "text": "We took it from 50 to 5,000 and um we found that Aurora actually continued to",
    "start": "602000",
    "end": "608800"
  },
  {
    "text": "improve um all the way up to 5,000 My SQL improved significantly from 50 to",
    "start": "608800",
    "end": "613839"
  },
  {
    "text": "500 connections Uh slight degradation going from 500 to 5,000 but not uh not",
    "start": "613839",
    "end": "619600"
  },
  {
    "text": "below where they started So this is actually a good general tip for benchmarking Aurora and squeezing the",
    "start": "619600",
    "end": "625760"
  },
  {
    "text": "most performance out of it Um Aurora is pretty heavily optimized for a large connection count So if you're running",
    "start": "625760",
    "end": "631760"
  },
  {
    "text": "Aurora and you're doing a benchmark on a single a single thread consider taking",
    "start": "631760",
    "end": "636959"
  },
  {
    "text": "it up to say a thousand and see how the performance uh",
    "start": "636959",
    "end": "641519"
  },
  {
    "start": "643000",
    "end": "736000"
  },
  {
    "text": "varies Another one we looked at was the data set size So here we took we started with a 1 gigabyte data set data set",
    "start": "646440",
    "end": "652880"
  },
  {
    "text": "which fits very easily within memory Uh and we took it all the way up to 100 Again same story as before Uh we had",
    "start": "652880",
    "end": "659920"
  },
  {
    "text": "Aurora pretty significantly outperforming actually got up to 67x better when it u when we took it up to",
    "start": "659920",
    "end": "665839"
  },
  {
    "text": "100 gigabytes Um and the gap it's a little hard to see on this graph but the you know as the data set size got bigger",
    "start": "665839",
    "end": "672720"
  },
  {
    "text": "the the gap between Aurora and my SQL also got larger So um I mean as the product manager for",
    "start": "672720",
    "end": "679680"
  },
  {
    "text": "Aurora uh I often get asked what is the performance of Aurora",
    "start": "679680",
    "end": "684720"
  },
  {
    "text": "like how does it compare to my SQL um and I like one of my favorite professors",
    "start": "684720",
    "end": "690399"
  },
  {
    "text": "likes to say um you know the correct answer to any hard question is it depends And you know",
    "start": "690399",
    "end": "698079"
  },
  {
    "text": "here we ran three tests We had one where it got up to 11x faster 18 167 What's",
    "start": "698079",
    "end": "703519"
  },
  {
    "text": "the answer it depends Um what we strongly recommend is that you know you",
    "start": "703519",
    "end": "708560"
  },
  {
    "text": "benchmark any database that you're planning to use You know run the comparison and don't just try and squeeze the maximum that you can get out",
    "start": "708560",
    "end": "715279"
  },
  {
    "text": "of any given machine but think about how for your particular workload um the characteristics of the workload are",
    "start": "715279",
    "end": "721200"
  },
  {
    "text": "likely to vary Um and then run tests across that range of usage characteristics So you understand how",
    "start": "721200",
    "end": "727760"
  },
  {
    "text": "you know when your application gets 10 or 100 times bigger how the database you've chosen is likely to behave",
    "start": "727760",
    "end": "735320"
  },
  {
    "start": "736000",
    "end": "779000"
  },
  {
    "text": "So how do we do this um at a high level we try to do less work and be more efficient about it than other databases",
    "start": "739680",
    "end": "746079"
  },
  {
    "text": "You know doing less work can mean less IO traffic in particular between the database instance and the underlying",
    "start": "746079",
    "end": "751279"
  },
  {
    "text": "storage layer Um and also um sending less traffic across the network We also",
    "start": "751279",
    "end": "756880"
  },
  {
    "text": "try to be more efficient So some of the things that my SQL will do uh synchronously we can actually do in parallel which gives us some advantage",
    "start": "756880",
    "end": "762720"
  },
  {
    "text": "both in terms of performance and also in terms of recovery time Now a lot of these if you're interested will actually",
    "start": "762720",
    "end": "768240"
  },
  {
    "text": "be covered in pretty significant depth uh in a deep dive for Aurora session at 3:30 today I believe Uh one I did want",
    "start": "768240",
    "end": "775200"
  },
  {
    "text": "to call out in particular was fewer",
    "start": "775200",
    "end": "778880"
  },
  {
    "text": "IO So this graph is or this is showing you um IO traffic that occurs within the",
    "start": "780760",
    "end": "786240"
  },
  {
    "text": "database uh for my SQL on the left and Aurora on the right This is what happens when you write into the database With my",
    "start": "786240",
    "end": "792880"
  },
  {
    "text": "SQL when you write there's a lot going on Uh you have to write to the log",
    "start": "792880",
    "end": "798320"
  },
  {
    "text": "records you have to write bin logs you have to write to the you know the data itself you have to write into the double rate buffer And I should clarify that",
    "start": "798320",
    "end": "804560"
  },
  {
    "text": "this is a a multi-availability zone or multi-AZ setup in both cases So we have",
    "start": "804560",
    "end": "810480"
  },
  {
    "text": "uh an instance two instances each in different availability zones So um with my SQL we have a lot of",
    "start": "810480",
    "end": "817360"
  },
  {
    "text": "stuff going on there Uh and part of what we tried to do differently with Aurora was choose a backend architecture that would reduce a lot of this So uh with",
    "start": "817360",
    "end": "824720"
  },
  {
    "text": "Aurora you can see we have a significant amount of log records being written So we Aurora has a log structured storage",
    "start": "824720",
    "end": "830880"
  },
  {
    "text": "system which is very heavily optimized for the data for database workloads Um so we actually have to write more log uh",
    "start": "830880",
    "end": "836800"
  },
  {
    "text": "excuse me more log records than with my SQL given the many copies of the data uh which um Pun is going to talk about in a",
    "start": "836800",
    "end": "843040"
  },
  {
    "text": "bit but because we don't have to do the same level of traffic uh in terms of bin log replication writing the full copy of",
    "start": "843040",
    "end": "849360"
  },
  {
    "text": "the data or writing into the double write buffer what we typically see is an order of magnitude reduction in the",
    "start": "849360",
    "end": "855760"
  },
  {
    "text": "amount of IO traffic um for a given write compared with my SQL",
    "start": "855760",
    "end": "862320"
  },
  {
    "start": "862000",
    "end": "934000"
  },
  {
    "text": "Now to talk a bit about availability uh and some other topics on Aurora I'd like to invite Prenit Agaral who's solutions",
    "start": "862320",
    "end": "868399"
  },
  {
    "text": "architect with AWS which means that he has a lot of experience building production scale systems with our customers",
    "start": "868399",
    "end": "875560"
  },
  {
    "text": "Thanks Dave Uh my name is Puna Graval I'm a solutions architect based in New York Um so talking about Aurora",
    "start": "879199",
    "end": "888079"
  },
  {
    "text": "performance is indeed very good right 5x uh you know compared to my SQL and in",
    "start": "888079",
    "end": "894079"
  },
  {
    "text": "some cases better than that depending on you know what you're looking at you know number of tables number of connections",
    "start": "894079",
    "end": "899760"
  },
  {
    "text": "so on and so forth a lot of customers I work with are adopting Aurora just for",
    "start": "899760",
    "end": "904880"
  },
  {
    "text": "that reason right performance but I think that's just one side of the story",
    "start": "904880",
    "end": "910160"
  },
  {
    "text": "on the other side we see a lot of customers adopting Aurora because of its high availability features and its",
    "start": "910160",
    "end": "916959"
  },
  {
    "text": "usability features We have done quite a few innovations in Aurora that give you",
    "start": "916959",
    "end": "922800"
  },
  {
    "text": "better availability than open source engines uh but also better availability than some commercial engines and that",
    "start": "922800",
    "end": "929680"
  },
  {
    "text": "might come as a surprise So let's take a look at some of those",
    "start": "929680",
    "end": "934800"
  },
  {
    "start": "934000",
    "end": "1153000"
  },
  {
    "text": "features Let's say you are running a database in your own data center and you want to make storage highly available",
    "start": "934839",
    "end": "941519"
  },
  {
    "text": "How would you do that you would probably open another data center uh do some replication on storage layer or do some",
    "start": "941519",
    "end": "948639"
  },
  {
    "text": "replication on database layer you don't have to worry about all that in case of",
    "start": "948639",
    "end": "954120"
  },
  {
    "text": "Aurora in Aurora storage is highly available by default when you make an",
    "start": "954120",
    "end": "961040"
  },
  {
    "text": "insert in the database we make six copies of your data across three",
    "start": "961040",
    "end": "966079"
  },
  {
    "text": "physically isolated data centers that we call availability zones uh so you're",
    "start": "966079",
    "end": "971120"
  },
  {
    "text": "inserting any data it getting replicated six six times automatically You don't",
    "start": "971120",
    "end": "976320"
  },
  {
    "text": "have to provision new hardware in another data center You don't have to do anything So let's say if one disk fails",
    "start": "976320",
    "end": "982160"
  },
  {
    "text": "or one data center failed your database doesn't see an outage You continue to be",
    "start": "982160",
    "end": "987279"
  },
  {
    "text": "up and running at that time Aurora also uses a latency tolerant",
    "start": "987279",
    "end": "993519"
  },
  {
    "text": "corum system for reads and writes And what what that means is let's say you're",
    "start": "993519",
    "end": "999360"
  },
  {
    "text": "making a right We use 4x6 uh chorum system for writes As soon as your right makes it to",
    "start": "999360",
    "end": "1006880"
  },
  {
    "text": "the four disks out of six discs we consider that right to be a stable right So let's say out of six disks if two of",
    "start": "1006880",
    "end": "1014079"
  },
  {
    "text": "my discs are running slow that doesn't slow down the whole database system right and if you were to do the same",
    "start": "1014079",
    "end": "1020320"
  },
  {
    "text": "thing on prem you probably have one uh uh array of disks If discs are running",
    "start": "1020320",
    "end": "1025520"
  },
  {
    "text": "slow that will slow down your whole database So you don't have to worry about that in case of",
    "start": "1025520",
    "end": "1031079"
  },
  {
    "text": "Aurora With Aurora you can also create up to 15 read replicas and these read",
    "start": "1031079",
    "end": "1037678"
  },
  {
    "text": "replicas will share the same storage as your primary server So now your read",
    "start": "1037679",
    "end": "1043760"
  },
  {
    "text": "replicas can also work as an standby database So you don't really need an ideal standby database uh for failover",
    "start": "1043760",
    "end": "1050720"
  },
  {
    "text": "purposes Your read replica will serve that purpose as well",
    "start": "1050720",
    "end": "1055679"
  },
  {
    "text": "um innovation on caching side When we were looking at different layers of the databases and thinking about what layers",
    "start": "1055760",
    "end": "1062160"
  },
  {
    "text": "to take out of the main process caching was one of those layers In case of Aurora we separated",
    "start": "1062160",
    "end": "1070559"
  },
  {
    "text": "the caching layer from the main database engine layer Uh and what that means is",
    "start": "1070559",
    "end": "1075760"
  },
  {
    "text": "if your database engine process crashes due to any reason let's say a deadlock or some other issue your cache process",
    "start": "1075760",
    "end": "1083520"
  },
  {
    "text": "still remains there So when your database engine process comes back up your cache will still warm and you can",
    "start": "1083520",
    "end": "1090880"
  },
  {
    "text": "resume your fully loaded operations very fast Uh as compared to MySQL where if",
    "start": "1090880",
    "end": "1096000"
  },
  {
    "text": "the database engine crashes it will crash the uh cache itself and then you will have to run select queries to",
    "start": "1096000",
    "end": "1101679"
  },
  {
    "text": "replenish that data So that's uh again a big advantage with",
    "start": "1101679",
    "end": "1107559"
  },
  {
    "text": "Aurora Aurora also offers instant crash recovery So in case of my SQL and many",
    "start": "1107559",
    "end": "1114960"
  },
  {
    "text": "other databases when your database crashes the database will replay log in",
    "start": "1114960",
    "end": "1120480"
  },
  {
    "text": "a single threaded operation and depending on how many logs database needs to replay uh your crash recovery",
    "start": "1120480",
    "end": "1127120"
  },
  {
    "text": "can take a while In case of Aurora that's not the case As soon as your database comes back",
    "start": "1127120",
    "end": "1134320"
  },
  {
    "text": "up we make database available to the user and then we replay logs in the back",
    "start": "1134320",
    "end": "1140080"
  },
  {
    "text": "end when you are accessing the data on demand So that makes the crash recovery",
    "start": "1140080",
    "end": "1145760"
  },
  {
    "text": "process itself instantaneous uh parallel and distributed",
    "start": "1145760",
    "end": "1152600"
  },
  {
    "text": "Let's take a look at how Aurora does in terms of failover times right so let's",
    "start": "1154799",
    "end": "1160000"
  },
  {
    "text": "say you have a primary server running in one data center uh one availability zone and you have your standby server running",
    "start": "1160000",
    "end": "1166400"
  },
  {
    "text": "in another availability zone or other another data center How much time would",
    "start": "1166400",
    "end": "1171440"
  },
  {
    "text": "it take for our services to fail over your database from primary to the",
    "start": "1171440",
    "end": "1176559"
  },
  {
    "text": "standby server so let's do uh some comparison Let's look at how it happens in case of",
    "start": "1176559",
    "end": "1183200"
  },
  {
    "text": "RDS MySQL Right now for failure detection uh it takes about 15 to 30",
    "start": "1183200",
    "end": "1188880"
  },
  {
    "text": "seconds The next step is crash recovery which we just learned can take",
    "start": "1188880",
    "end": "1194080"
  },
  {
    "text": "unpredictable amount of time depending on the number of logs database needs to",
    "start": "1194080",
    "end": "1199160"
  },
  {
    "text": "replay In parallel we are also propagating DNS from your primary server to your new new master Uh that was your",
    "start": "1199160",
    "end": "1206799"
  },
  {
    "text": "standby server So overall uh when these processes are done your applications can",
    "start": "1206799",
    "end": "1212640"
  },
  {
    "text": "then connect to the database and can resume operations With Aurora the failure",
    "start": "1212640",
    "end": "1218480"
  },
  {
    "text": "detection time is uh the process of it is similar to what we use with RDS my",
    "start": "1218480",
    "end": "1224000"
  },
  {
    "text": "SQL So your failure detection is still 15 to 30 seconds and we are working on",
    "start": "1224000",
    "end": "1229440"
  },
  {
    "text": "this piece specifically We are trying to reduce the failure detection time to less than 5 seconds for genuine failures",
    "start": "1229440",
    "end": "1237120"
  },
  {
    "text": "So more to come on that The next process is recovery process which is instantaneous and you can further cut",
    "start": "1237120",
    "end": "1244400"
  },
  {
    "text": "down the DNS propagation time from primary to the uh standby using a",
    "start": "1244400",
    "end": "1250559"
  },
  {
    "text": "special connection driver And if you're using this connection driver instead of waiting on DNS to fail over this",
    "start": "1250559",
    "end": "1257760"
  },
  {
    "text": "connection driver will query your database to find out who the new master is Um so with this connection driver",
    "start": "1257760",
    "end": "1265520"
  },
  {
    "text": "your overall end to-end failover time gets reduced to about 30 seconds which is a huge improvement for an automated",
    "start": "1265520",
    "end": "1272880"
  },
  {
    "text": "process and definitely huge improvement over manual process and we hope to bring this time down the failover time down to",
    "start": "1272880",
    "end": "1280240"
  },
  {
    "text": "10 seconds or under 10 seconds if we start doing faster failure",
    "start": "1280240",
    "end": "1286240"
  },
  {
    "start": "1287000",
    "end": "1331000"
  },
  {
    "text": "detection So one of our design intent with Aurora like any other AWS service",
    "start": "1289240",
    "end": "1294480"
  },
  {
    "text": "was to make it really easy to use for our customers Databases tend to be",
    "start": "1294480",
    "end": "1299520"
  },
  {
    "text": "complex There are many tasks that that DBAs need to do in order to make sure your databases are up and running Uh so",
    "start": "1299520",
    "end": "1306720"
  },
  {
    "text": "that was uh one of our design intent to make it really easy to use for our customers Uh Mohammad Raza from United",
    "start": "1306720",
    "end": "1313600"
  },
  {
    "text": "Nations shared with us that they especially like the monitoring uh dashboard of Aurora It really helps them",
    "start": "1313600",
    "end": "1321200"
  },
  {
    "text": "troubleshoot the issues identify the issues much faster So let's take a look at some of the usability features that",
    "start": "1321200",
    "end": "1327679"
  },
  {
    "text": "come with Aurora Let's talk about storage",
    "start": "1327679",
    "end": "1334799"
  },
  {
    "start": "1331000",
    "end": "1519000"
  },
  {
    "text": "management For example storage management in traditional databases is a",
    "start": "1334799",
    "end": "1340159"
  },
  {
    "text": "tedious task right um most of the customers I work with they are worried",
    "start": "1340159",
    "end": "1345600"
  },
  {
    "text": "about their databases running out of storage So what do they do they",
    "start": "1345600",
    "end": "1351120"
  },
  {
    "text": "overallocate storage to their databases right sometimes more than 50% sometimes by 2x 3x and they end up paying more",
    "start": "1351120",
    "end": "1358720"
  },
  {
    "text": "money for that And I don't really blame them for this I have done exactly the",
    "start": "1358720",
    "end": "1364159"
  },
  {
    "text": "same thing as a DBA in my previous life You know I would request as much storage as I can get for my database Um and we",
    "start": "1364159",
    "end": "1371600"
  },
  {
    "text": "do that because we know adding storage to a live system uh will require manual",
    "start": "1371600",
    "end": "1377240"
  },
  {
    "text": "intervention and may also impact availability and performance of my database So why not just overallocate",
    "start": "1377240",
    "end": "1385000"
  },
  {
    "text": "storage in case of Aurora that's not the case",
    "start": "1385000",
    "end": "1390520"
  },
  {
    "text": "Um when you start an Aurora database you are given a 10 gig chunk of storage and",
    "start": "1390520",
    "end": "1396799"
  },
  {
    "text": "you're just paying for 10 gig chunk at that time But as your usage grows we automatically",
    "start": "1396799",
    "end": "1403600"
  },
  {
    "text": "add more 10 gig chunks of uh storage to your database on demand So now in terms",
    "start": "1403600",
    "end": "1410240"
  },
  {
    "text": "of storage management you don't really have to do anything The storage will automatically grow up to 64 tab Um which",
    "start": "1410240",
    "end": "1418559"
  },
  {
    "text": "is by the way another major feature of Aurora It supports up to 64 tab of storage Um and that is about that is",
    "start": "1418559",
    "end": "1426080"
  },
  {
    "text": "more than 10 times of what we support with other RDS engines And 64 terabytes",
    "start": "1426080",
    "end": "1431600"
  },
  {
    "text": "is a huge number right i mean even if you're managing databases of 1 or two terabytes that's a huge database Most",
    "start": "1431600",
    "end": "1438320"
  },
  {
    "text": "enterprise databases that that we see average about you know 800 900 gigabytes",
    "start": "1438320",
    "end": "1444559"
  },
  {
    "text": "or 1 or two terabytes getting an OLTP system 64 terabytes that autoscales up",
    "start": "1444559",
    "end": "1451039"
  },
  {
    "text": "to 64 terabytes That's a pretty beefy very large uh OLTP relational",
    "start": "1451039",
    "end": "1459440"
  },
  {
    "text": "database Let's talk about backups DBs worry about backups also right",
    "start": "1459720",
    "end": "1465960"
  },
  {
    "text": "um in case of Aurora your data is continuously getting backed up to S3 So",
    "start": "1465960",
    "end": "1472640"
  },
  {
    "text": "you don't have to define a backup window You don't have to run any custom scripts to take your database backups Your data",
    "start": "1472640",
    "end": "1479440"
  },
  {
    "text": "is continuously getting backed up to S3 and you don't see a performance impact So finally backups of large databases",
    "start": "1479440",
    "end": "1487200"
  },
  {
    "text": "with no performance impact Um and let's say you're a developer you are releasing",
    "start": "1487200",
    "end": "1492799"
  },
  {
    "text": "a new code in your database you want to take a manual snapshot You can just click a button take a manual snapshot",
    "start": "1492799",
    "end": "1499039"
  },
  {
    "text": "and that snapshot itself is instantaneous because at that point we're just putting a marker in",
    "start": "1499039",
    "end": "1504600"
  },
  {
    "text": "S3 So imagine taking backup of multi- terabytes database in in a second That's",
    "start": "1504600",
    "end": "1511840"
  },
  {
    "text": "really powerful for for large database systems And of course no performance impact when you do that",
    "start": "1511840",
    "end": "1520159"
  },
  {
    "start": "1519000",
    "end": "1584000"
  },
  {
    "text": "Um talking about monitoring uh Aurora is integrated with Amazon Cloudatch our",
    "start": "1521200",
    "end": "1526320"
  },
  {
    "text": "monitoring system and that gives you deep insights into what is going on into the system and the database at that time",
    "start": "1526320",
    "end": "1533840"
  },
  {
    "text": "So you can get access to CPU utilization storage memory and 50 other OS level",
    "start": "1533840",
    "end": "1540480"
  },
  {
    "text": "metrics with 1 to 60 second of granularity You also get access to database level",
    "start": "1540480",
    "end": "1547440"
  },
  {
    "text": "metrics So for example you want to look at number of database connections replication lag uh number of active",
    "start": "1547440",
    "end": "1554640"
  },
  {
    "text": "transactions selects per seconds and many more There are a lot of metrics on",
    "start": "1554640",
    "end": "1559679"
  },
  {
    "text": "the database side that you can get access to using cloudatch And not only you can look at",
    "start": "1559679",
    "end": "1565600"
  },
  {
    "text": "these metrics but you can set up alarms on top of these metrics So let's say you",
    "start": "1565600",
    "end": "1570799"
  },
  {
    "text": "want to get paged when CPU goes above 80% you can create an alarm in cloudatch",
    "start": "1570799",
    "end": "1576240"
  },
  {
    "text": "you can do the same thing with any other metrics number of database connections cache hit ratio",
    "start": "1576240",
    "end": "1583679"
  },
  {
    "start": "1584000",
    "end": "1667000"
  },
  {
    "text": "anything in terms of security we understand security is really important for our customers right um and that's",
    "start": "1586600",
    "end": "1593279"
  },
  {
    "text": "why we have a very strong security posture around Aurora Aurora offers full encryption at",
    "start": "1593279",
    "end": "1599440"
  },
  {
    "text": "rest So all the blocks that are sitting on the disks all the blocks that are in S3 will get encrypted and you can manage",
    "start": "1599440",
    "end": "1607120"
  },
  {
    "text": "those encryption keys yourself using AWS key management",
    "start": "1607120",
    "end": "1612679"
  },
  {
    "text": "system If you wanted to encrypt your data in transit you can connect to Aurora using",
    "start": "1612679",
    "end": "1620158"
  },
  {
    "text": "SSL In terms of network isolation if you have used Amazon VPC before you might",
    "start": "1620440",
    "end": "1625679"
  },
  {
    "text": "know this Um in terms of network isolation all Aurora databases are",
    "start": "1625679",
    "end": "1631360"
  },
  {
    "text": "available in VPC by default Um so that gives you a lot of advantages in terms",
    "start": "1631360",
    "end": "1637520"
  },
  {
    "text": "of security You can use security groups network ACL routing tables private",
    "start": "1637520",
    "end": "1642880"
  },
  {
    "text": "subnets and all that to secure access to your to your database So that's",
    "start": "1642880",
    "end": "1648480"
  },
  {
    "text": "available by default And since Aurora is offered as a managed service there is no direct",
    "start": "1648480",
    "end": "1654480"
  },
  {
    "text": "access to the nodes You cannot SSH into your database box You will connect to your database using a DNS endpoint and a",
    "start": "1654480",
    "end": "1660720"
  },
  {
    "text": "port number and that reduces your attack surface on the database",
    "start": "1660720",
    "end": "1666960"
  },
  {
    "start": "1667000",
    "end": "1690000"
  },
  {
    "text": "itself So I just mentioned Aurora is uh offered as a managed service but what",
    "start": "1668520",
    "end": "1675039"
  },
  {
    "text": "that really means um Aurora is offered as a database engine on our RDS platform which stands",
    "start": "1675039",
    "end": "1681679"
  },
  {
    "text": "for relational database service And if you haven't used RDS before I'll I'll",
    "start": "1681679",
    "end": "1686960"
  },
  {
    "text": "give you a quick idea of what that service does So let's say you have a database in",
    "start": "1686960",
    "end": "1692960"
  },
  {
    "start": "1690000",
    "end": "1718000"
  },
  {
    "text": "your own data center You are responsible for everything right you will procure the hardware Somebody in your team will",
    "start": "1692960",
    "end": "1700799"
  },
  {
    "text": "rack and stack it Um somebody will install the operating system Database",
    "start": "1700799",
    "end": "1705840"
  },
  {
    "text": "software will be responsible for patching And then people will also be responsible for configuring high",
    "start": "1705840",
    "end": "1711880"
  },
  {
    "text": "availability scaling uh you know database backups so on and so",
    "start": "1711880",
    "end": "1718879"
  },
  {
    "start": "1718000",
    "end": "1750000"
  },
  {
    "text": "forth You let's say come to AWS and you start using EC2 you have an option of running your",
    "start": "1719240",
    "end": "1726880"
  },
  {
    "text": "databases on EC2 You can install any database software you would like Um and",
    "start": "1726880",
    "end": "1731919"
  },
  {
    "text": "EC2 is our Linux and virtual Linux and Windowsbased virtual machines Uh if",
    "start": "1731919",
    "end": "1737760"
  },
  {
    "text": "you're running your database on EC2 we take care of the data center portion of it but you're still responsible for",
    "start": "1737760",
    "end": "1744320"
  },
  {
    "text": "patching your OS installing database software and doing other DBA related",
    "start": "1744320",
    "end": "1751039"
  },
  {
    "start": "1750000",
    "end": "1807000"
  },
  {
    "text": "activities But if you choose Amazon RDS we take care of a lot of undifferiated",
    "start": "1751480",
    "end": "1758240"
  },
  {
    "text": "heavy lifting on your behalf Um so everything that you see on the right",
    "start": "1758240",
    "end": "1763440"
  },
  {
    "text": "hand side is taken care of by the automated services in RDS and that gives",
    "start": "1763440",
    "end": "1769039"
  },
  {
    "text": "you a lot of time to focus on your application optimization creating better indexes creating better schema tuning",
    "start": "1769039",
    "end": "1776240"
  },
  {
    "text": "your queries so on and so forth I think one thing is important to remember that even though RDS is taking",
    "start": "1776240",
    "end": "1783360"
  },
  {
    "text": "care of lot of services you still have full control over your database Of course you own your data but you can",
    "start": "1783360",
    "end": "1789760"
  },
  {
    "text": "also see and set up how your high availability looks like You can still",
    "start": "1789760",
    "end": "1795440"
  },
  {
    "text": "define what your backup window is You can still define when you want your DB software patches to to be applied So you",
    "start": "1795440",
    "end": "1801840"
  },
  {
    "text": "still retain that control It's just that you don't have to manage it",
    "start": "1801840",
    "end": "1807120"
  },
  {
    "text": "anymore So um Aurora is offered as a database engine on top of RDS RDS also",
    "start": "1807320",
    "end": "1814960"
  },
  {
    "text": "offered SQL server Oracle Postgress Mariab MySQL and Aurora So all the",
    "start": "1814960",
    "end": "1821600"
  },
  {
    "text": "benefits you saw on the previous slide come out of the box with Aurora",
    "start": "1821600",
    "end": "1827278"
  },
  {
    "text": "also So no product description is uh complete without a discussion on its",
    "start": "1827559",
    "end": "1832799"
  },
  {
    "text": "pricing Does it make sense to use that product aurora is priced at onetenth of",
    "start": "1832799",
    "end": "1839360"
  },
  {
    "text": "the cost of commercial databases So let's say if you're moving from a commercial database engine you will save",
    "start": "1839360",
    "end": "1845600"
  },
  {
    "text": "a lot of money by moving to Aurora Um this is what Aurora's pricing looks",
    "start": "1845600",
    "end": "1853679"
  },
  {
    "start": "1850000",
    "end": "1928000"
  },
  {
    "text": "like in our North Virginia region As expected there are no licenses to buy",
    "start": "1853679",
    "end": "1858799"
  },
  {
    "text": "There is no lock in and you pay only for what you use So let's say you want to",
    "start": "1858799",
    "end": "1864480"
  },
  {
    "text": "run some QA tests or some some development tests uh on your system and",
    "start": "1864480",
    "end": "1869840"
  },
  {
    "text": "you're using your database for 10 hours You just pay for 10 hours That'll be like maybe $2 or $3 u something like",
    "start": "1869840",
    "end": "1877320"
  },
  {
    "text": "that So you don't have to buy the system for the life of the system You can just use it uh for the time being and and and",
    "start": "1877320",
    "end": "1884240"
  },
  {
    "text": "just pay for it accordingly Um but if you do decide to move your applications to Aurora chances are your",
    "start": "1884240",
    "end": "1891200"
  },
  {
    "text": "production applications will run 24 by7 Your database will run you know 24x7 If",
    "start": "1891200",
    "end": "1896720"
  },
  {
    "text": "that's the case you can get significant discount over our ondemand prices Uh for",
    "start": "1896720",
    "end": "1902960"
  },
  {
    "text": "example if you do reserved instances for one year you can get about 44% discount",
    "start": "1902960",
    "end": "1908559"
  },
  {
    "text": "and you can get around 63% discount over uh uh with three-year reserved instances",
    "start": "1908559",
    "end": "1915840"
  },
  {
    "text": "And storage is also priced uh at consumption basis So you don't really",
    "start": "1915840",
    "end": "1921519"
  },
  {
    "text": "pay for a lot of storage You pay for storage as you use the storage and as you do the IOPS on the",
    "start": "1921519",
    "end": "1929200"
  },
  {
    "text": "storage But I think Dave alluded to this before and to a lot of our customers it",
    "start": "1929880",
    "end": "1935279"
  },
  {
    "text": "comes as a surprise that Aurora can save them money over RDS MySQL",
    "start": "1935279",
    "end": "1941000"
  },
  {
    "text": "itself Um let's take an example We'll take a look at an example and see how",
    "start": "1941000",
    "end": "1947600"
  },
  {
    "text": "how that works So this is an example of RDS MySQL configuration running in",
    "start": "1947600",
    "end": "1953720"
  },
  {
    "text": "production Very beefy database 6 tab of storage with 10,000 PI ops So a very",
    "start": "1953720",
    "end": "1960080"
  },
  {
    "text": "large enterprise database of course You have one primary server You have a",
    "start": "1960080",
    "end": "1965840"
  },
  {
    "text": "standby server for high availability And you have two read replicas to scale your",
    "start": "1965840",
    "end": "1971360"
  },
  {
    "text": "reads This configuration in AWS ondemand pricing will cost you about",
    "start": "1971360",
    "end": "1978200"
  },
  {
    "text": "$2342 an hour Let's see how this looks when we",
    "start": "1978200",
    "end": "1985679"
  },
  {
    "text": "move the same system to Aurora In Aurora read replicas can work",
    "start": "1985679",
    "end": "1992080"
  },
  {
    "text": "as your standby databases right so you don't really need an ideal read ideal standby database anymore And storage is",
    "start": "1992080",
    "end": "2000080"
  },
  {
    "text": "priced differently storage is priced on consumption basis So your overall cost",
    "start": "2000080",
    "end": "2005120"
  },
  {
    "text": "for the same type of box R38 extra large uh comes down to",
    "start": "2005120",
    "end": "2011480"
  },
  {
    "text": "$18.35 which gives you about 21% savings over RDS",
    "start": "2011480",
    "end": "2017640"
  },
  {
    "text": "MySQL Let's take this one step further Since Aurora offers you significantly",
    "start": "2017640",
    "end": "2025279"
  },
  {
    "text": "more performance than RDS MySQL you may decide to change the size of your",
    "start": "2025279",
    "end": "2030799"
  },
  {
    "text": "instances from R38 extra large to R34 extra large And if you do that you save",
    "start": "2030799",
    "end": "2038320"
  },
  {
    "text": "about 50% over RDS MySQL So in terms of pricing um you",
    "start": "2038320",
    "end": "2046159"
  },
  {
    "text": "would save a lot of money if you move from a commercial database system Um I think that's pretty clear but in certain",
    "start": "2046159",
    "end": "2052079"
  },
  {
    "text": "scenarios in production systems you may also save a lot of money u as compared",
    "start": "2052079",
    "end": "2057679"
  },
  {
    "text": "to other open-source database engines as well And I think this this is one of the",
    "start": "2057679",
    "end": "2062800"
  },
  {
    "text": "reasons why we see a huge adoption of Aurora across the board Um it's just a",
    "start": "2062800",
    "end": "2068638"
  },
  {
    "text": "very good value proposition So let's say you know we talked about",
    "start": "2068639",
    "end": "2075440"
  },
  {
    "start": "2072000",
    "end": "2132000"
  },
  {
    "text": "pricing we talked about performance high availability so on and so forth You like the new database right and you go back",
    "start": "2075440",
    "end": "2082560"
  },
  {
    "text": "to your offices tomorrow you want to give this database uh a test run The",
    "start": "2082560",
    "end": "2087599"
  },
  {
    "text": "first question you will ask yourself is how do I move my data to Aurora i already have my databases running in",
    "start": "2087599",
    "end": "2093599"
  },
  {
    "text": "production Since Aurora is MySQL compatible migration to Aurora would look like",
    "start": "2093599",
    "end": "2100480"
  },
  {
    "text": "migration to a MySQL database Um if you're running on RDS MySQL right now",
    "start": "2100480",
    "end": "2106640"
  },
  {
    "text": "you can just take a snapshot of RDS MySQL database automatically convert that database into Aurora and that will",
    "start": "2106640",
    "end": "2113599"
  },
  {
    "text": "happen smoothly But we do realize that when you are migrating from other systems on-prem",
    "start": "2113599",
    "end": "2120320"
  },
  {
    "text": "systems or EC2 or other database products migration to another database platform can be a little difficult can",
    "start": "2120320",
    "end": "2127440"
  },
  {
    "text": "be challenging So we introduced two companion services to help you with that The first service is AWS database",
    "start": "2127440",
    "end": "2136160"
  },
  {
    "start": "2132000",
    "end": "2210000"
  },
  {
    "text": "migration service I think it got announced last year and came out in GA two or three months ago",
    "start": "2136160",
    "end": "2142800"
  },
  {
    "text": "Um so with this service you can start your first migration in less than 10 minutes Uh the service will connect to",
    "start": "2142800",
    "end": "2149440"
  },
  {
    "text": "your source database It will connect to your target database Um it will do one-time data copy but it will also do",
    "start": "2149440",
    "end": "2157359"
  },
  {
    "text": "continuous replication from your source database to the target database And that means you don't really",
    "start": "2157359",
    "end": "2164400"
  },
  {
    "text": "have to take a downtime on your source database while your data is getting moved to the target database Right once",
    "start": "2164400",
    "end": "2171520"
  },
  {
    "text": "your data has been completely moved replicated to the target database On a weekend you can take couple of minutes",
    "start": "2171520",
    "end": "2177920"
  },
  {
    "text": "of downtime and point your applications to the target database Um so it supports",
    "start": "2177920",
    "end": "2183280"
  },
  {
    "text": "continuous uh uh replication from source to target This service also supports",
    "start": "2183280",
    "end": "2189680"
  },
  {
    "text": "heterogeneous data movement So if you wanted to move your data from Oracle or SQL server uh to Aurora or Postgress or",
    "start": "2189680",
    "end": "2197520"
  },
  {
    "text": "any other services supported by this tool you can also do that So that's",
    "start": "2197520",
    "end": "2202720"
  },
  {
    "text": "really powerful feature and it will also do replication for heterogeneous databases as",
    "start": "2202720",
    "end": "2210160"
  },
  {
    "start": "2210000",
    "end": "2246000"
  },
  {
    "text": "well So this is just an example how this service works It connects uh you start",
    "start": "2210359",
    "end": "2216640"
  },
  {
    "text": "this service it creates an instance automatically in your VPC uh it will connect to source and target database",
    "start": "2216640",
    "end": "2223760"
  },
  {
    "text": "You will select the tables and the schema that you want to migrate over and",
    "start": "2223760",
    "end": "2228880"
  },
  {
    "text": "it will fill your target database and it will start continuous replication A weekend",
    "start": "2228880",
    "end": "2234920"
  },
  {
    "text": "comes you can switch your applications to the new database and of course you will have to do migration testing user",
    "start": "2234920",
    "end": "2241440"
  },
  {
    "text": "accepting testing so on and so forth So that doesn't change",
    "start": "2241440",
    "end": "2246480"
  },
  {
    "start": "2246000",
    "end": "2306000"
  },
  {
    "text": "So this was about moving data But a challenge in heterogeneous",
    "start": "2246480",
    "end": "2253040"
  },
  {
    "text": "database migrations is how do you move your schema how do you convert your schema from Oracle and SQL Server to a",
    "start": "2253040",
    "end": "2259520"
  },
  {
    "text": "MySQL compliant schema To help with that we introduced",
    "start": "2259520",
    "end": "2265440"
  },
  {
    "text": "AWS schema conversion tool It's a desktopbased tool You can download this tool on your on your machines It will",
    "start": "2265440",
    "end": "2272000"
  },
  {
    "text": "again connect to your source database It will connect to your target database and it will automatically transform most of",
    "start": "2272000",
    "end": "2279680"
  },
  {
    "text": "your schema to MySQL compliant schema It does a lot of heavy lifting for you out",
    "start": "2279680",
    "end": "2287040"
  },
  {
    "text": "of the box automatically But there still will be cases where the tool cannot figure out how to convert",
    "start": "2287040",
    "end": "2293520"
  },
  {
    "text": "your code um into MySQL compliant schema because in some cases maybe my SQL or",
    "start": "2293520",
    "end": "2300320"
  },
  {
    "text": "Aurora doesn't support that feature right that you're using in my uh in Oracle or SQL server So when that",
    "start": "2300320",
    "end": "2308359"
  },
  {
    "start": "2306000",
    "end": "2357000"
  },
  {
    "text": "happens this tool gives you a very detailed migration report In this",
    "start": "2308359",
    "end": "2314320"
  },
  {
    "text": "migration report the tool will tell you things that it wasn't able to do how",
    "start": "2314320",
    "end": "2319760"
  },
  {
    "text": "critical those things are in terms of complexity and it will also give you suggestions on what changes you need to",
    "start": "2319760",
    "end": "2326800"
  },
  {
    "text": "make in order to transform this schema from source to destination And there is a window there",
    "start": "2326800",
    "end": "2333680"
  },
  {
    "text": "You can edit your code there right away and you know apply it to your target database Um most customers I work with u",
    "start": "2333680",
    "end": "2340640"
  },
  {
    "text": "tell us that this tool is able to do 80% of the work for them automatically and",
    "start": "2340640",
    "end": "2345680"
  },
  {
    "text": "it gives them a very good idea of what the rest of 20% work looks like So they",
    "start": "2345680",
    "end": "2351599"
  },
  {
    "text": "know ahead of the time that how much time this database migration is going to",
    "start": "2351599",
    "end": "2357320"
  },
  {
    "start": "2357000",
    "end": "2389000"
  },
  {
    "text": "take With that let me hand it over to Jeffrey Schmidt from Pearson Um as you",
    "start": "2357320",
    "end": "2363280"
  },
  {
    "text": "may know Pearson Education is a leader in online assessment space But what you may not know is Pearson Education did",
    "start": "2363280",
    "end": "2371599"
  },
  {
    "text": "about 15 million assessments um scoring of computer-based tests on AWS",
    "start": "2371599",
    "end": "2377200"
  },
  {
    "text": "infrastructure last year Um Jeff is from Pearson's uh operations team and he will",
    "start": "2377200",
    "end": "2383040"
  },
  {
    "text": "share his experiences uh with Aurora with you Thank you",
    "start": "2383040",
    "end": "2389040"
  },
  {
    "start": "2389000",
    "end": "3311000"
  },
  {
    "text": "[Applause]",
    "start": "2389040",
    "end": "2392500"
  },
  {
    "text": "Hello my name's uh Jeff Schmidt I work at Pearson Education We're based out of Iowa City Um we're primarily a company",
    "start": "2394480",
    "end": "2401760"
  },
  {
    "text": "that uh works on uh Java based apps stacks with my SQL uh backends and we're",
    "start": "2401760",
    "end": "2407680"
  },
  {
    "text": "in the online assessment industry which is basically kids taking tests um on",
    "start": "2407680",
    "end": "2412920"
  },
  {
    "text": "computers So um uh our core business is",
    "start": "2412920",
    "end": "2418000"
  },
  {
    "text": "basically built around kids taking tests on computers largely uh kindergarten through 12th grade kids And um a lot of",
    "start": "2418000",
    "end": "2425200"
  },
  {
    "text": "these kids are high stake or a lot of these tests are pretty high stakes They're the type of tests that uh you",
    "start": "2425200",
    "end": "2431200"
  },
  {
    "text": "give a kid for is this kid going to graduate uh to the next grade or",
    "start": "2431200",
    "end": "2436240"
  },
  {
    "text": "something like that So you know they're they're pretty high stakes The the integrity of the data is paramount Um",
    "start": "2436240",
    "end": "2443119"
  },
  {
    "text": "and uh our platforms typically are composed of three different app and database stacks um uh split out across",
    "start": "2443119",
    "end": "2450800"
  },
  {
    "text": "all our different customers So we'll have one app and database stack that's built around a website that teachers can",
    "start": "2450800",
    "end": "2458720"
  },
  {
    "text": "load students and register students in the system and then start and stop the test sessions We'll have another product",
    "start": "2458720",
    "end": "2465119"
  },
  {
    "text": "that kids actually take tests on and we'll have a back-end product that scores tests generates reports things of",
    "start": "2465119",
    "end": "2470880"
  },
  {
    "text": "that nature Um so three three MySQL databases uh three app stacks sitting in",
    "start": "2470880",
    "end": "2477119"
  },
  {
    "text": "front of them Um and then split out on a customer by customer basis Um uh just",
    "start": "2477119",
    "end": "2483599"
  },
  {
    "text": "for context for the background of of our company and our my SQL usage um we've been pretty heavily invested in my SQL",
    "start": "2483599",
    "end": "2490079"
  },
  {
    "text": "for about five years uh we came from a Oracle stack before my SQL and when we",
    "start": "2490079",
    "end": "2496240"
  },
  {
    "text": "moved into Amazon uh we kind of took that as our opportunity to get on a more open source uh tech stack and um my SQL",
    "start": "2496240",
    "end": "2504720"
  },
  {
    "text": "is what we went with and we rearchitected a lot of our platforms to to run on my SQL based technologies",
    "start": "2504720",
    "end": "2510160"
  },
  {
    "text": "instead of Oracle Um so we first deployed our uh our first line of",
    "start": "2510160",
    "end": "2515520"
  },
  {
    "text": "products into Amazon in 2012 2013 around there Um at the time you know we did a",
    "start": "2515520",
    "end": "2521520"
  },
  {
    "text": "lot of uh investigation into different ways to deploy my SQL Um we looked at RDS at the time We also looked at",
    "start": "2521520",
    "end": "2527920"
  },
  {
    "text": "building um out on our own on EC2 instances and ended up going with uh with building it ourselves Um because",
    "start": "2527920",
    "end": "2534800"
  },
  {
    "text": "RDS uh wasn't wasn't quite as good back then as it is now Um so uh uh also uh in",
    "start": "2534800",
    "end": "2543040"
  },
  {
    "text": "terms of scale like you know I we manage a lot of my SQL servers So I I can't say exactly how many uh but uh it's it's a",
    "start": "2543040",
    "end": "2550480"
  },
  {
    "text": "lot and the majority of them are on EC2 instances with a handful on uh RDS and",
    "start": "2550480",
    "end": "2556880"
  },
  {
    "text": "Aurora right now Um and as I mentioned earlier uh we we basically do uh",
    "start": "2556880",
    "end": "2563119"
  },
  {
    "text": "separate MySQL servers on a per customer basis and a per environment basis So if the customer is XYZ they'll have you",
    "start": "2563119",
    "end": "2570960"
  },
  {
    "text": "know a a separate set of MySQL servers for dev test in staging production um",
    "start": "2570960",
    "end": "2576480"
  },
  {
    "text": "and you know for however many customers we have we'll have a a separate set of my SQL servers um for every single um",
    "start": "2576480",
    "end": "2584000"
  },
  {
    "text": "environment and customer combination And uh finally we've been using Aurora since day one of the Aurora beta So you know",
    "start": "2584000",
    "end": "2590960"
  },
  {
    "text": "we've been pretty pretty in with the product since uh about November 2014 and",
    "start": "2590960",
    "end": "2596079"
  },
  {
    "text": "then when it went into beta was about January 2015 So been in it since the",
    "start": "2596079",
    "end": "2601640"
  },
  {
    "text": "beginning Um so our database needs and priorities Um ACID compliance is first",
    "start": "2601640",
    "end": "2607040"
  },
  {
    "text": "and foremost and of of ACID uh durability is the one that we care about the most We're kind of a bank style use",
    "start": "2607040",
    "end": "2613760"
  },
  {
    "text": "case um you know we can't lose any data If if a kid's entire future is dependent",
    "start": "2613760",
    "end": "2619599"
  },
  {
    "text": "on uh getting a passing grade on a test and then we'd lose five answers um that's a pretty big deal So um we focus",
    "start": "2619599",
    "end": "2628079"
  },
  {
    "text": "on doing as much as we can to to never lose any transaction that uh the",
    "start": "2628079",
    "end": "2633200"
  },
  {
    "text": "application received confirmation of successful commit into the database And from a high availability standpoint if",
    "start": "2633200",
    "end": "2640560"
  },
  {
    "text": "that means that uh we're down a little bit longer um uh during a failover event",
    "start": "2640560",
    "end": "2647280"
  },
  {
    "text": "or hardware failure or whatever so be it Um we'd rather be down for a couple minutes longer uh than uh to recover",
    "start": "2647280",
    "end": "2654960"
  },
  {
    "text": "quickly but lose data on the way along the way And our performance needs just",
    "start": "2654960",
    "end": "2660720"
  },
  {
    "text": "just has to be fast enough you know we have such a large degree of environment and customer isolation that we're not",
    "start": "2660720",
    "end": "2667280"
  },
  {
    "text": "trying to build one database that's going to do everything for everyone So um as long as it's fast enough for",
    "start": "2667280",
    "end": "2673119"
  },
  {
    "text": "whatever the the scope and scale of the customer and the uh application is good",
    "start": "2673119",
    "end": "2678160"
  },
  {
    "text": "enough So um we uh we first started off going",
    "start": "2678160",
    "end": "2683200"
  },
  {
    "text": "through you know before Aurora existed we had to find our own way on uh on",
    "start": "2683200",
    "end": "2688240"
  },
  {
    "text": "other MySQL deployment topologies Um we've tried them all out used them all in various different uh production and",
    "start": "2688240",
    "end": "2694400"
  },
  {
    "text": "non-production uh workloads Um the first one and probably the most popular one",
    "start": "2694400",
    "end": "2700960"
  },
  {
    "text": "would be uh just a typical MySQL master slave topology where you have a one ma MySQL master database and n number of",
    "start": "2700960",
    "end": "2707760"
  },
  {
    "text": "slave databases hanging off it um they changed together using asynchronous replication and if you do it right you",
    "start": "2707760",
    "end": "2714480"
  },
  {
    "text": "can fail over to a slave database uh uh uh in the event of a failure of the",
    "start": "2714480",
    "end": "2720079"
  },
  {
    "text": "master So things we like about it are that it's really simple it's really well supported Um documentation's good Uh you",
    "start": "2720079",
    "end": "2727920"
  },
  {
    "text": "know generally speaking it's it's the what everybody does in the MySQL world Um but you know when you're at the scale",
    "start": "2727920",
    "end": "2734480"
  },
  {
    "text": "that we're at um we've found that you know replication being asynchronous can",
    "start": "2734480",
    "end": "2739839"
  },
  {
    "text": "be burdensome You know it can lag behind You can occasionally have replication just break for one reason or another um",
    "start": "2739839",
    "end": "2747200"
  },
  {
    "text": "which has been quite a thorn in our side um over the years And uh uh from a",
    "start": "2747200",
    "end": "2752960"
  },
  {
    "text": "failover perspective we're always nervous to fail over to a slave uh because if the slave isn't fully caught up with the master database we could",
    "start": "2752960",
    "end": "2759599"
  },
  {
    "text": "lose data during that failover uh which again in some of our products could be incredibly uh important could be a",
    "start": "2759599",
    "end": "2767200"
  },
  {
    "text": "really uh really severe black eye to our customers So um we we very rarely feel",
    "start": "2767200",
    "end": "2772960"
  },
  {
    "text": "comfortable in failover scenarios and my SQL master slave topologies Um so you",
    "start": "2772960",
    "end": "2778480"
  },
  {
    "text": "know something that gives us better high availability uh than master slave topology is glare-based uh product line",
    "start": "2778480",
    "end": "2785200"
  },
  {
    "text": "Um something like extrad cluster from Kona for example Um these things work",
    "start": "2785200",
    "end": "2790240"
  },
  {
    "text": "really well from a high availability high availability standpoint because they're all master master and as long as",
    "start": "2790240",
    "end": "2796319"
  },
  {
    "text": "you tell all your app servers of the existence of all these nodes Um then they they work you know how you would",
    "start": "2796319",
    "end": "2802480"
  },
  {
    "text": "want them to Um but it comes at a cost There's a lot more servers uh that you",
    "start": "2802480",
    "end": "2807599"
  },
  {
    "text": "have to manage Wiring these things together is a pain Uh and performance of these things is not great Um you're only",
    "start": "2807599",
    "end": "2813839"
  },
  {
    "text": "as fast as your slowest server plus network latency uh when you're in a glare cluster um and uh the kind of the",
    "start": "2813839",
    "end": "2820400"
  },
  {
    "text": "serialized nature of the way the transactions are committed means you really have to avoid large transactions which isn't always feasible in every",
    "start": "2820400",
    "end": "2827079"
  },
  {
    "text": "abstract So um you know I'd say management logistics and performance uh",
    "start": "2827079",
    "end": "2834000"
  },
  {
    "text": "kind of make gallera based technologies a little bit tedious Um uh third and uh",
    "start": "2834000",
    "end": "2841040"
  },
  {
    "text": "and probably most obvious to those of you at an Amazon conference is uh my SQL RDS um not to be confused with Aurora",
    "start": "2841040",
    "end": "2848880"
  },
  {
    "text": "which is also on RDS Um uh the pros of it are you know pros and cons largely",
    "start": "2848880",
    "end": "2855119"
  },
  {
    "text": "overlap with what you get from a MySQL master slave topology Um except uh you",
    "start": "2855119",
    "end": "2861119"
  },
  {
    "text": "get the additional benefit of having Amazon manage the infrastructure for you and you know generally speaking do a lot",
    "start": "2861119",
    "end": "2867040"
  },
  {
    "text": "of the heavy lifting so that you can focus on the data and the engine and that sort of thing Um uh and you know I",
    "start": "2867040",
    "end": "2873599"
  },
  {
    "text": "mentioned earlier we tried out RDS uh you know four or five years ago It was a lot uh lot more basic of a platform uh",
    "start": "2873599",
    "end": "2881599"
  },
  {
    "text": "back then It's a lot more up to date now So it is a real contender uh for for a",
    "start": "2881599",
    "end": "2887359"
  },
  {
    "text": "company like us but it it still has the same basic problems that you have with MySQL master slave uh uh plus you're on",
    "start": "2887359",
    "end": "2896079"
  },
  {
    "text": "community edition of my SQL which does not have thread pooling which um as connection counts increase uh for apps",
    "start": "2896079",
    "end": "2903760"
  },
  {
    "text": "uh opening and maintaining connections to the database server connection count increases performance generally tends to",
    "start": "2903760",
    "end": "2908960"
  },
  {
    "text": "decrease on uh uh any version of my SQL community edition RDS uh uh fitting into",
    "start": "2908960",
    "end": "2916160"
  },
  {
    "text": "that camp and uh we also have data size limits in uh MySQL RDS um granted",
    "start": "2916160",
    "end": "2923920"
  },
  {
    "text": "not a not a ton of use cases go up to or over six terabytes but that's something you have to keep in mind as well So um",
    "start": "2923920",
    "end": "2931200"
  },
  {
    "text": "that said we've been kind of looking for something that that's the the best uh fit for us that you know takes takes the",
    "start": "2931200",
    "end": "2937440"
  },
  {
    "text": "best of all these other technologies and push puts them together for us And um Aurora was was a really good fit for us",
    "start": "2937440",
    "end": "2944480"
  },
  {
    "text": "Um oh before I sorry I forgot about this slide Um we also took a look at a couple",
    "start": "2944480",
    "end": "2950319"
  },
  {
    "text": "other MySQL deployment topologies like using block level replication from the",
    "start": "2950319",
    "end": "2955359"
  },
  {
    "text": "master database or the hot standby or semi-sync replication Didn't feel like doing it uh because it was just too far",
    "start": "2955359",
    "end": "2961599"
  },
  {
    "text": "out of the mainstream MySQL use cases So anyway looking for for a better solution than what we could do with galler or uh",
    "start": "2961599",
    "end": "2968960"
  },
  {
    "text": "my SQL master slave and Aurora came along Um uh",
    "start": "2968960",
    "end": "2974520"
  },
  {
    "text": "so why we like Aurora um failover with Aurora is is pretty fast all things",
    "start": "2974520",
    "end": "2980800"
  },
  {
    "text": "considered but more importantly you don't lose data along the way So whereas I was super afraid to pull the trigger",
    "start": "2980800",
    "end": "2986000"
  },
  {
    "text": "uh on doing a failover with a master slave topology Um I don't have those same concerns on Aurora Um and it you",
    "start": "2986000",
    "end": "2992960"
  },
  {
    "text": "know it fails over in 30 seconds a minute something like that you know whatever the time is as long as it fails",
    "start": "2992960",
    "end": "2999440"
  },
  {
    "text": "over and doesn't lose any data along the way that's what I care about and Aurora does that Um performance is is at least",
    "start": "2999440",
    "end": "3006160"
  },
  {
    "text": "as fast if not faster than on EC2 instances In our experience um our workloads aren't necessarily the same",
    "start": "3006160",
    "end": "3012720"
  },
  {
    "text": "workloads as some of the other customers that are uh uh doing like super rapid small in uh inserts across broad",
    "start": "3012720",
    "end": "3019520"
  },
  {
    "text": "spectrums of tables that like the uh Expedia use case earlier So um you know",
    "start": "3019520",
    "end": "3024559"
  },
  {
    "text": "for us it's basically been as fast or faster than what we're used to and that's been perfectly fine for us Um",
    "start": "3024559",
    "end": "3031040"
  },
  {
    "text": "another uh nice benefit of it is that readers don't slow down the writer Uh whereas in a master slave topology um",
    "start": "3031040",
    "end": "3037359"
  },
  {
    "text": "you can have situations where a whole lot of readers connecting to a single writer or a whole lot of slaves",
    "start": "3037359",
    "end": "3042800"
  },
  {
    "text": "connecting to a single master rather um can actually hurt the master Um and that's uh that's a nice feature of",
    "start": "3042800",
    "end": "3049520"
  },
  {
    "text": "Aurora that it doesn't have that And backwards compatibility with my SQL Community Edition 5.6 with Aurora means",
    "start": "3049520",
    "end": "3056240"
  },
  {
    "text": "that if we find something about Aurora that we don't like um we can back out of it We can go to Perona XDB We can go",
    "start": "3056240",
    "end": "3062720"
  },
  {
    "text": "over to MySQL Community Edition We could tech or theoretically go over to uh Maria DB Um and we also have MySQL RDS",
    "start": "3062720",
    "end": "3070720"
  },
  {
    "text": "that we could go over to as well So we got options if if something doesn't work out for us on Aurora for some reason",
    "start": "3070720",
    "end": "3076319"
  },
  {
    "text": "Then there's just the logistics of it You know you get a lot of benefit from having all your infrastructure managed",
    "start": "3076319",
    "end": "3082319"
  },
  {
    "text": "by Amazon Um with you know kind of the the whole you don't have to patch the operating system yourself and all that",
    "start": "3082319",
    "end": "3087760"
  },
  {
    "text": "sort of thing And the fact that you don't actually have to plan ahead for disk storage allocation is super",
    "start": "3087760",
    "end": "3094079"
  },
  {
    "text": "convenient for us because we're always you know going okay we think we need x terabytes for this customer and x",
    "start": "3094079",
    "end": "3099920"
  },
  {
    "text": "gigabytes for this other customer and you know like whatever your projection is ends up being a little bit off and",
    "start": "3099920",
    "end": "3105119"
  },
  {
    "text": "you have to micromanage it You don't really have to do that with Aurora Um nor do you have to worry about",
    "start": "3105119",
    "end": "3110200"
  },
  {
    "text": "babysitting traditional MySQL replication um with Aurora to keep the readers uh running properly They just",
    "start": "3110200",
    "end": "3117119"
  },
  {
    "text": "work And that's great Um so um so our",
    "start": "3117119",
    "end": "3122319"
  },
  {
    "text": "experience with Aurora in production non-production it's been pretty smooth all things considered Um some things",
    "start": "3122319",
    "end": "3128240"
  },
  {
    "text": "we've learned along the way that I thought might be uh beneficial to those of you that haven't used it before or",
    "start": "3128240",
    "end": "3133839"
  },
  {
    "text": "just kind of cutting your teeth on it Um there's a a for Java in Java based technologies there's a specific driver",
    "start": "3133839",
    "end": "3140559"
  },
  {
    "text": "out there uh that's not the Oracle provided um MySQL connector J driver U",
    "start": "3140559",
    "end": "3146319"
  },
  {
    "text": "Maria DB provides a driver that has Aurora specific functionality to it Uh specifically enhances failover",
    "start": "3146319",
    "end": "3152520"
  },
  {
    "text": "capabilities So we recommend using that as a over the MySQL uh community the",
    "start": "3152520",
    "end": "3157920"
  },
  {
    "text": "MySQL connector J driver uh because of enhanced failover support Um next is uh",
    "start": "3157920",
    "end": "3165119"
  },
  {
    "text": "uh you need to test your your application uh before it hits production using Aurora Um there are differences in",
    "start": "3165119",
    "end": "3173760"
  },
  {
    "text": "you know how the engine uh for Aurora and just just general differences in Aurora that make it a good idea to at",
    "start": "3173760",
    "end": "3179680"
  },
  {
    "text": "least hit uh Aurora with your application in some QA or performance",
    "start": "3179680",
    "end": "3185040"
  },
  {
    "text": "environment or just some staging environment something like that before you actually hit production Um you know",
    "start": "3185040",
    "end": "3191119"
  },
  {
    "text": "there's there's it's supposed to be completely dragon uh or drop incompatible but you never know You you",
    "start": "3191119",
    "end": "3197359"
  },
  {
    "text": "might find something that uh that's a rare edge case that breaks to your application and you want to make sure you find that before you go to",
    "start": "3197359",
    "end": "3203240"
  },
  {
    "text": "production Um uh we also recommend failing over regularly in your QA environment You know the only way you",
    "start": "3203240",
    "end": "3208640"
  },
  {
    "text": "can get confident with something like you know uh uh your application failing over uh all the time and not really ever",
    "start": "3208640",
    "end": "3215200"
  },
  {
    "text": "knowing which one's the reader and the writer at any given time is by failing over regularly So we do that in our environments and that's given us a lot",
    "start": "3215200",
    "end": "3221280"
  },
  {
    "text": "of confidence in our failover capabilities Um uh the presenters before me also both talked a fair amount about",
    "start": "3221280",
    "end": "3227520"
  },
  {
    "text": "the performance benefits of Aurora and that's all true Um but uh you also have to uh keep in mind that you know the",
    "start": "3227520",
    "end": "3235880"
  },
  {
    "text": "the there's there's ways to get uh better performance out of Aurora and um",
    "start": "3235880",
    "end": "3241440"
  },
  {
    "text": "you're you're still going to you're still bound by the limitations of my SQL So um if you're running CPU heavy queries",
    "start": "3241440",
    "end": "3249040"
  },
  {
    "text": "against uh Aurora they're still going to be slow on uh my SQL or traditional EC2",
    "start": "3249040",
    "end": "3255839"
  },
  {
    "text": "infrastructure There's probably still going to be just about as slow on Aurora Um you're you're not going to get you",
    "start": "3255839",
    "end": "3261440"
  },
  {
    "text": "know incredibly better uh uh query performance if you're doing a 30 table",
    "start": "3261440",
    "end": "3267119"
  },
  {
    "text": "join on with a billion rows in every table I mean it's still going to suck Um you have to still optimize your code And",
    "start": "3267119",
    "end": "3274079"
  },
  {
    "text": "when it comes to how you use the reader nodes uh you really have to make sure that you're using the reader nodes um",
    "start": "3274079",
    "end": "3279760"
  },
  {
    "text": "for the things that they're best at which in our opinion so far um has been for big heavy queries that you don't",
    "start": "3279760",
    "end": "3286480"
  },
  {
    "text": "want running against the writer node Um you know things that are CPU heavy uh they may be asynchronous they may be for",
    "start": "3286480",
    "end": "3292559"
  },
  {
    "text": "analytics they may be for reports Um so uh you know we've we've basically delegated the the writer node to most uh",
    "start": "3292559",
    "end": "3301920"
  },
  {
    "text": "small OOLTP traffic um and the the readers for failover and for uh reports",
    "start": "3301920",
    "end": "3309200"
  },
  {
    "text": "and kind of heavier query use cases Um other uh other advice that we have on",
    "start": "3309200",
    "end": "3314720"
  },
  {
    "start": "3311000",
    "end": "3379000"
  },
  {
    "text": "performance uh front um if you can get away with not having binary logging turned on don't turn it on Aurora read",
    "start": "3314720",
    "end": "3321680"
  },
  {
    "text": "replicas don't need it to work The only reason you want binary logging turned on is if you're doing asynchronous replication to a MySQL server that is",
    "start": "3321680",
    "end": "3329359"
  },
  {
    "text": "not an Aurora server So um if you want to replicate to an EC2 instance or you",
    "start": "3329359",
    "end": "3334480"
  },
  {
    "text": "want to replicate to a data center or something turn binary logging on for that and uh potentially replicate from",
    "start": "3334480",
    "end": "3340880"
  },
  {
    "text": "Aurora into your data center infrastructure or whatever for a data backup But don't turn it on if you don't",
    "start": "3340880",
    "end": "3347119"
  },
  {
    "text": "need it because it will hurt performance Um also uh leave query cache on In",
    "start": "3347119",
    "end": "3352640"
  },
  {
    "text": "regular MySQL query cache is kind of oftentimes a performance uh poison pill",
    "start": "3352640",
    "end": "3359119"
  },
  {
    "text": "Uh but in Aurora it it at worst does nothing for you and at best helps you out a fair amount at least in our",
    "start": "3359119",
    "end": "3365599"
  },
  {
    "text": "experience So we we recommend leaving query cache on unless you have a reason to turn it off And as I mentioned",
    "start": "3365599",
    "end": "3371040"
  },
  {
    "text": "earlier it's Aurora is not going to fix a bad uh query So for the UDBAs out",
    "start": "3371040",
    "end": "3376960"
  },
  {
    "text": "there you still have to tune your queries Um that said uh our experience",
    "start": "3376960",
    "end": "3382640"
  },
  {
    "start": "3379000",
    "end": "3468000"
  },
  {
    "text": "with Aurora has been great Uh there's a couple things we also wish that it could do that currently can't Um amongst other",
    "start": "3382640",
    "end": "3389200"
  },
  {
    "text": "things we wish it had smaller cheaper instance types Right now it's limited to the R3 tier of instance types Um we wish",
    "start": "3389200",
    "end": "3397119"
  },
  {
    "text": "uh you know that we had smaller ones like T2s or whatever for dev and test environments you know not the sort of",
    "start": "3397119",
    "end": "3402559"
  },
  {
    "text": "stuff we went production with but you know when you're building uh building lots and lots of QA environments uh for",
    "start": "3402559",
    "end": "3409200"
  },
  {
    "text": "different customers and use cases you want smaller instance types Then a couple other ones like uh on the",
    "start": "3409200",
    "end": "3415119"
  },
  {
    "text": "replicas you can't set the transaction isolation level that's hardcoded to repeatable read Kind of wish that it wasn't but it's not a dealbreaker for us",
    "start": "3415119",
    "end": "3422799"
  },
  {
    "text": "And um uh we also wish that we could kind of earmark a replica to be uh be a",
    "start": "3422799",
    "end": "3429359"
  },
  {
    "text": "replica that is not a failover candidate Um right now the the replicas uh they're",
    "start": "3429359",
    "end": "3435440"
  },
  {
    "text": "all potential failover candidates Um you can prioritize which ones you want to fail over to first and second and third",
    "start": "3435440",
    "end": "3441040"
  },
  {
    "text": "but there's still a chance that even your lowest priority uh replica could be failed over to And we we wish that um",
    "start": "3441040",
    "end": "3447839"
  },
  {
    "text": "there was a way to not do that Um uh and um yeah I think uh I think I'm",
    "start": "3447839",
    "end": "3454720"
  },
  {
    "text": "gonna end it here so we can do a little Q&A And thanks to everybody It helps out",
    "start": "3454720",
    "end": "3460000"
  },
  {
    "text": "our Pearson uh uh solutions architects our technical account managers all those",
    "start": "3460000",
    "end": "3465720"
  },
  {
    "text": "guys Yep",
    "start": "3465720",
    "end": "3469599"
  }
]