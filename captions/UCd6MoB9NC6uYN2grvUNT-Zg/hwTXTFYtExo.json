[
  {
    "text": "thanks Rowan and uh good morning everyone so welcome to the uh webinar on four",
    "start": "8580",
    "end": "14880"
  },
  {
    "text": "tips for faster development with dynamodb my role is business development",
    "start": "14880",
    "end": "19920"
  },
  {
    "text": "which means we do a lot of interaction with customers uh and a lot of that is around getting requirements from",
    "start": "19920",
    "end": "26460"
  },
  {
    "text": "customers and feeding them back to the to the service teams for prioritization and implementation but part of it is",
    "start": "26460",
    "end": "34140"
  },
  {
    "text": "also this sort of thing where we take what we've learned from those interactions with customers and we",
    "start": "34140",
    "end": "39540"
  },
  {
    "text": "combine that with new products and information and capabilities coming out of the the service team and share them",
    "start": "39540",
    "end": "46200"
  },
  {
    "text": "with you so we're happy to present uh this today we've got a few areas to cover",
    "start": "46200",
    "end": "51539"
  },
  {
    "text": "and then we will leave plenty of time for Q a so if you have questions you can queue them up at any point any time",
    "start": "51539",
    "end": "57300"
  },
  {
    "text": "during the webinar and we'll get to them as many as we can",
    "start": "57300",
    "end": "62340"
  },
  {
    "text": "so today I'm going to reintroduce dynamodb from a slightly New Perspective we're going to focus on the aspects of",
    "start": "62340",
    "end": "69299"
  },
  {
    "text": "the service that are most important to Performance and specifically reducing",
    "start": "69299",
    "end": "74640"
  },
  {
    "text": "the time to develop new applications I'm going to talk about specifically four areas these areas",
    "start": "74640",
    "end": "82759"
  },
  {
    "text": "where which address challenges that we've seen we've frequently seen where",
    "start": "82759",
    "end": "88259"
  },
  {
    "text": "new users have been uh have faced in building their applications on dynamodb",
    "start": "88259",
    "end": "93299"
  },
  {
    "text": "um so the typical symptoms of these these problems when they do manifest uh when you're getting premature throttling",
    "start": "93299",
    "end": "99180"
  },
  {
    "text": "uncertain costs things like that basically uncertainty uh What uh a",
    "start": "99180",
    "end": "105299"
  },
  {
    "text": "pillar of dynamodb's design is around predictable performance so predictable",
    "start": "105299",
    "end": "110700"
  },
  {
    "text": "other things is also very important to us so quick introduction to database Services",
    "start": "110700",
    "end": "116540"
  },
  {
    "text": "dynamodb is one of the four primary managed services in the database Services team databases are one of the",
    "start": "116540",
    "end": "125219"
  },
  {
    "text": "pillars the three pillars of AWS core services so if you think of compute and",
    "start": "125219",
    "end": "130259"
  },
  {
    "text": "storage as in servers and disks and database you can obviously build them yourself on top of those assets and we",
    "start": "130259",
    "end": "136860"
  },
  {
    "text": "encourage that that's their self-service model so under uh one thing we focus on",
    "start": "136860",
    "end": "143340"
  },
  {
    "text": "heavily is choice and so with the managed Services the difference is and I'll you'll this will this will draw out",
    "start": "143340",
    "end": "149819"
  },
  {
    "text": "throughout the um throughout the webinar as a general theme the managed services are there to",
    "start": "149819",
    "end": "156959"
  },
  {
    "text": "automate a lot of the low-level tasks and effort that you would normally bring",
    "start": "156959",
    "end": "162420"
  },
  {
    "text": "to managing a database so the other services we have relational database service RDS that's the pretty",
    "start": "162420",
    "end": "169860"
  },
  {
    "text": "much the relational database that you know and love you have a choice of MySQL Oracle or SQL Server presently with",
    "start": "169860",
    "end": "177120"
  },
  {
    "text": "Amazon elastic cache we provide in-memory caching Services we recently announced",
    "start": "177120",
    "end": "183300"
  },
  {
    "text": "Reddit support we also support memcache D so that's great for accelerating frequently read data by caching it in",
    "start": "183300",
    "end": "190140"
  },
  {
    "text": "memory two two aspects of both of those",
    "start": "190140",
    "end": "195360"
  },
  {
    "text": "Services is the ability to provide High elasticity and very high tolerance for failure so with Amazon RDS for instance",
    "start": "195360",
    "end": "202260"
  },
  {
    "text": "putting on a production workload there's two specific features that are very powerful there multi-az which basically",
    "start": "202260",
    "end": "209700"
  },
  {
    "text": "replicates your data into another availability Zone synchronously therefore giving a protection as well as",
    "start": "209700",
    "end": "215400"
  },
  {
    "text": "very high failover fast failover the other one is provisioned iops now that's important because that is a very that is",
    "start": "215400",
    "end": "222239"
  },
  {
    "text": "a core concept that actually came from dynamodb was the first service to implement this provisioned iops with RDS",
    "start": "222239",
    "end": "228959"
  },
  {
    "text": "is the ability to what it does it allocates a consistent i o throughput to the instance to the level that you",
    "start": "228959",
    "end": "234540"
  },
  {
    "text": "specify so this can be scaled up and down to align with the predictable patterns in the workload",
    "start": "234540",
    "end": "241019"
  },
  {
    "text": "uh redshift is the data warehouse It's the fastest growing service that we've",
    "start": "241019",
    "end": "246420"
  },
  {
    "text": "that AWS has seen since it launched in February it is a petabyte scale data",
    "start": "246420",
    "end": "252420"
  },
  {
    "text": "warehouse that has specifically been enhanced for the clouds so what it does enables you to enables you to scale your",
    "start": "252420",
    "end": "258299"
  },
  {
    "text": "Warehouse from as little as two terabytes over a petabyte and quickly retrieve the results using your",
    "start": "258299",
    "end": "264419"
  },
  {
    "text": "preferred bi tool we're going to focus today on dynamodb and dynamodb is the default choice for",
    "start": "264419",
    "end": "270960"
  },
  {
    "text": "new application development this is kind of a nosql thing it's very typical of how nosql data stores are being deployed",
    "start": "270960",
    "end": "278040"
  },
  {
    "text": "they're very developer friendly and the and really a lot of what we're going to focus on today is how we can help",
    "start": "278040",
    "end": "284759"
  },
  {
    "text": "accelerate those first steps into dynamodb it's a nosql data store that's",
    "start": "284759",
    "end": "289860"
  },
  {
    "text": "designed for fast predictable performance at any scale so a feature of dynamodb which again we'll cover is the",
    "start": "289860",
    "end": "296759"
  },
  {
    "text": "ability to dial up and dial down throughput now similar to as I described with RDS provisioned iops",
    "start": "296759",
    "end": "303240"
  },
  {
    "text": "now if we look at relational databases and how to scale them they're really",
    "start": "303240",
    "end": "308280"
  },
  {
    "text": "kind of three major steps that are that are undertaken a relational database traditionally scales by scaling it up",
    "start": "308280",
    "end": "315300"
  },
  {
    "text": "and throwing more capacity at the the single Central instance",
    "start": "315300",
    "end": "320580"
  },
  {
    "text": "um that's infrastructure scaling but there's also the other aspects which help it to scale out",
    "start": "320580",
    "end": "327060"
  },
  {
    "text": "um they and you could describe them as read replicas and data sharding which is kind of like right replicas",
    "start": "327060",
    "end": "332960"
  },
  {
    "text": "denormalization is an application scaling function where what you're really doing",
    "start": "332960",
    "end": "338580"
  },
  {
    "text": "is compressing or using utilizing fewer tables for your queries and therefore reducing the number of fetches now why I",
    "start": "338580",
    "end": "346440"
  },
  {
    "text": "put this up is because if you take a relational database and you scale it to a very high levels by implementing read",
    "start": "346440",
    "end": "352259"
  },
  {
    "text": "replicas by implementing sharding and by denormalizing your schema you've effectively built you've described the",
    "start": "352259",
    "end": "359820"
  },
  {
    "text": "core value of a nosql data store you've broken most of the the rule the reasons",
    "start": "359820",
    "end": "366240"
  },
  {
    "text": "that relational is so powerful and versatile but in the interest of performance and scalability that's fine",
    "start": "366240",
    "end": "372180"
  },
  {
    "text": "and so this is in a nutshell where nosql data stores came from",
    "start": "372180",
    "end": "377759"
  },
  {
    "text": "um so the kind of the promise that nosql provides is really to say the sharding the the uh both on regen rights",
    "start": "377759",
    "end": "385380"
  },
  {
    "text": "um is taken care of as part of the design uh the scaling the infrastructure",
    "start": "385380",
    "end": "390960"
  },
  {
    "text": "is really the only aspect that needs to be considered when uh implementing higher scale data stores",
    "start": "390960",
    "end": "398520"
  },
  {
    "text": "so if we look at how this was uh how this journey began with Amazon it's uh",
    "start": "398520",
    "end": "404759"
  },
  {
    "text": "it's a it's a path that moves from relational technology to nosql technology to nosql as a service and",
    "start": "404759",
    "end": "411600"
  },
  {
    "text": "that's a that's a three kind of distinct and very important steps because it is also a journey that more companies are",
    "start": "411600",
    "end": "416639"
  },
  {
    "text": "making these days as their needs evolve for faster inexpensive performance at",
    "start": "416639",
    "end": "422039"
  },
  {
    "text": "increasingly large increasingly uh higher levels of scalability",
    "start": "422039",
    "end": "427080"
  },
  {
    "text": "the original use case therefore for nosql is more relevant than it has been before as the pressure to increase",
    "start": "427080",
    "end": "433380"
  },
  {
    "text": "scalability and the volume of data flowing through these systems increases so Amazon started their path the Dynamo",
    "start": "433380",
    "end": "440039"
  },
  {
    "text": "with as most companies do with a relational databases which by default managed all the use cases this is the",
    "start": "440039",
    "end": "446460"
  },
  {
    "text": "database as a Swiss army knife concept where hundreds of applications are built pushed onto a relational data store the",
    "start": "446460",
    "end": "453840"
  },
  {
    "text": "problem is of course when you get the smaller lighter or simpler applications that just need to scale that's not",
    "start": "453840",
    "end": "461099"
  },
  {
    "text": "optimal for a relational databases and so that created problems with availability scalability and of course",
    "start": "461099",
    "end": "466979"
  },
  {
    "text": "cost to try to overcome that so the internal project within Amazon this goes back almost a decade now to",
    "start": "466979",
    "end": "474360"
  },
  {
    "text": "launch launch a project to really understand what would it look like what would a",
    "start": "474360",
    "end": "479520"
  },
  {
    "text": "data store look like if we if if availability durability and scalability were prioritized and so this is this was",
    "start": "479520",
    "end": "488039"
  },
  {
    "text": "the result of this was what we call the Dynamo technology the Dynamo technology which was which was became public in",
    "start": "488039",
    "end": "494819"
  },
  {
    "text": "2007 uh during uh through the white paper that's that's shown there",
    "start": "494819",
    "end": "500300"
  },
  {
    "text": "this technology was an internal only technology it's never actually been released externally and it's a key Value",
    "start": "500300",
    "end": "507180"
  },
  {
    "text": "Store it has it's really a replicated distributed hash table and has eventually consistent only read",
    "start": "507180",
    "end": "514860"
  },
  {
    "text": "consistency but the problem is of course that it was still as a technology it still required a lot of effort to scale",
    "start": "514860",
    "end": "521459"
  },
  {
    "text": "so scaling infrastructure only may be the thing that the promise of nosql but",
    "start": "521459",
    "end": "528300"
  },
  {
    "text": "that the pressure to scale that infrastructure was was greater than it was previously and more complex and so",
    "start": "528300",
    "end": "534240"
  },
  {
    "text": "this is again a story we hear over and over and why a lot of people are turning to a managed service to solve those",
    "start": "534240",
    "end": "540180"
  },
  {
    "text": "problems so this is where dynamodb evolved from dynamodb as a managed",
    "start": "540180",
    "end": "545339"
  },
  {
    "text": "service provides predictable performance massive scalability and it's fully managed so there's zero administrative",
    "start": "545339",
    "end": "551519"
  },
  {
    "text": "effort and of course it's low cost so if we look at what is uh dynamodb",
    "start": "551519",
    "end": "557700"
  },
  {
    "text": "essentially it's a distributed key value store so when we when we let's pause",
    "start": "557700",
    "end": "562980"
  },
  {
    "text": "these terms a little bit as a highly distributed key value database service it's not just a data",
    "start": "562980",
    "end": "569760"
  },
  {
    "text": "store it's a database service so the distributed nature gives us the ability to scale it massively and so that's the",
    "start": "569760",
    "end": "575820"
  },
  {
    "text": "the principles of scale out where we can you can basically use as many machines and disks that we have available and we",
    "start": "575820",
    "end": "582240"
  },
  {
    "text": "can spread our workload accordingly um so that's a there's nothing different",
    "start": "582240",
    "end": "587760"
  },
  {
    "text": "about that um in in its design but it is designed to be for massive scalability as a key",
    "start": "587760",
    "end": "593820"
  },
  {
    "text": "value store it's the description used to categorize the highest scaling of the nosql Technologies",
    "start": "593820",
    "end": "599760"
  },
  {
    "text": "and so key benefits to the the approach taken by dynamodb are really the Simplicity of the API which is often uh",
    "start": "599760",
    "end": "606839"
  },
  {
    "text": "which is essentially delivered by the fact that it's a service as well so many things you don't have to worry about tuning and optimizing so this the API is",
    "start": "606839",
    "end": "614459"
  },
  {
    "text": "there's 13 operations available we'll look we'll look at that a little later in the in the session as well",
    "start": "614459",
    "end": "620279"
  },
  {
    "text": "amongst other things that also facilitates fast development and this is where we're going to spend most of the",
    "start": "620279",
    "end": "625380"
  },
  {
    "text": "time today as a database service much of the unique value that dynamodb delivers",
    "start": "625380",
    "end": "631019"
  },
  {
    "text": "is with the core design of the service from an operational perspective what I mean by that is that it's built on the",
    "start": "631019",
    "end": "637800"
  },
  {
    "text": "when we say it's built on the primary concept of predictable performance a lot of that value is delivered through the",
    "start": "637800",
    "end": "643860"
  },
  {
    "text": "way that we implement the operations underneath the service so dynamodb is",
    "start": "643860",
    "end": "649620"
  },
  {
    "text": "able to deliver consistent low latency at any level of scale and with absolute durability and so these are these are",
    "start": "649620",
    "end": "656820"
  },
  {
    "text": "very important Concepts and again we'll break them down a little more more as we go through this through the extensive",
    "start": "656820",
    "end": "663600"
  },
  {
    "text": "use of automation dynamodb eliminates is able to eliminate most of the difficult administrative tasks associated with",
    "start": "663600",
    "end": "670560"
  },
  {
    "text": "provisioning and scaling a database so these are this is again overcoming the problem that was discovered from the",
    "start": "670560",
    "end": "676980"
  },
  {
    "text": "original nosql technology unanimous Dynamo so let's uh let's use that also we'll",
    "start": "676980",
    "end": "683880"
  },
  {
    "text": "come back to that later as we wrap it up but the benefits of all this is also",
    "start": "683880",
    "end": "689220"
  },
  {
    "text": "seen in the cost that you paid for throughput",
    "start": "689220",
    "end": "694500"
  },
  {
    "text": "so let's start with the basic structures in dynamodb so we have tables items and",
    "start": "695459",
    "end": "700980"
  },
  {
    "text": "attributes so a table is a collection of items an item is a collection of attributes so these are obviously",
    "start": "700980",
    "end": "708600"
  },
  {
    "text": "containers within each other if we",
    "start": "708600",
    "end": "713700"
  },
  {
    "text": "if we look at how are the how we access these items so a hash key is the only",
    "start": "713700",
    "end": "720360"
  },
  {
    "text": "attribute that is essential in a table it's effectively a table it's a table",
    "start": "720360",
    "end": "725459"
  },
  {
    "text": "level attribute that's required and I'll I'll explain why that is in in a few you",
    "start": "725459",
    "end": "730740"
  },
  {
    "text": "know in a few minutes but the primary key must be unique as most primary as all primary keys are in this case we can",
    "start": "730740",
    "end": "737339"
  },
  {
    "text": "have a hash only primary key or we can Implement implement the range attribute",
    "start": "737339",
    "end": "742920"
  },
  {
    "text": "and now a range attribute is optional it's another attribute that can be used in conjunction with the hash key to say",
    "start": "742920",
    "end": "749100"
  },
  {
    "text": "we have a hash and a range primary key so again the combination is unique but",
    "start": "749100",
    "end": "754320"
  },
  {
    "text": "what this what this starts to enable is relationships between one-to-many",
    "start": "754320",
    "end": "759540"
  },
  {
    "text": "relationships within the table structure itself it also gives us a lot of Versatility now this is really important",
    "start": "759540",
    "end": "765600"
  },
  {
    "text": "because as we start to describe um you know the sort of uh the things",
    "start": "765600",
    "end": "770700"
  },
  {
    "text": "that our top customers are leading users of dynamodb are deploying",
    "start": "770700",
    "end": "776100"
  },
  {
    "text": "um very smart use of a hash range Keys is part of that",
    "start": "776100",
    "end": "782639"
  },
  {
    "text": "foreign so as well as the if we look at the",
    "start": "782639",
    "end": "789360"
  },
  {
    "text": "attributes in the table there is a spouse the notion of sparse",
    "start": "789360",
    "end": "794639"
  },
  {
    "text": "schema is important what this means is that every attribute the attributes are associated with the item rather than the",
    "start": "794639",
    "end": "800639"
  },
  {
    "text": "table so this differs from the definition of a column in a relational database and so the the attributes exist",
    "start": "800639",
    "end": "806760"
  },
  {
    "text": "at the item level so they can be the same as other as in other attributes as in other items",
    "start": "806760",
    "end": "812700"
  },
  {
    "text": "of making pardon or they can be completely different so they are just described and defined at the moment that",
    "start": "812700",
    "end": "818639"
  },
  {
    "text": "they are created um so that allow that is very popular for developers and it's a key design",
    "start": "818639",
    "end": "824639"
  },
  {
    "text": "efficiency if you if you think of the way that you design an application to",
    "start": "824639",
    "end": "830160"
  },
  {
    "text": "make use of a relational database the structure of the relational database requires that you name all those columns",
    "start": "830160",
    "end": "835560"
  },
  {
    "text": "up front and if you want to make a change to that schema you have to add a new column and again that affects all",
    "start": "835560",
    "end": "841680"
  },
  {
    "text": "rows so as these these scales it becomes extremely burdensome because every row",
    "start": "841680",
    "end": "846899"
  },
  {
    "text": "now carries every column now that doesn't happen in a spa schema in a spa schema each individual attribute or Row",
    "start": "846899",
    "end": "854220"
  },
  {
    "text": "the equivalent of a row in a relational database contains just the attributes effectively The Columns that it requires",
    "start": "854220",
    "end": "861120"
  },
  {
    "text": "for that item um so you know it can add new attributes very quickly you can add attributes just",
    "start": "861120",
    "end": "868260"
  },
  {
    "text": "to one or two items because you you happen to have caught that capture that information and it's relevant so you may",
    "start": "868260",
    "end": "873720"
  },
  {
    "text": "as well store it so it enables very fast development um the other the other part of that is",
    "start": "873720",
    "end": "879480"
  },
  {
    "text": "is it doesn't add any overhead to the scale sorry to the storage scale so as",
    "start": "879480",
    "end": "885300"
  },
  {
    "text": "you're storing different attributes you're only storing the ones that are described and so the advantage of not",
    "start": "885300",
    "end": "890699"
  },
  {
    "text": "having a column kind of structure is um is prevalent there",
    "start": "890699",
    "end": "896180"
  },
  {
    "text": "so if we talk about you know some of the um some of the customers who have",
    "start": "896459",
    "end": "901620"
  },
  {
    "text": "experienced dynamodb and and have these uh Implement some of these approaches which we're about to jump into Earth",
    "start": "901620",
    "end": "908699"
  },
  {
    "text": "networks for instance have a have a Weather Bug mobile app that interacts with up to 40 million users every month",
    "start": "908699",
    "end": "916079"
  },
  {
    "text": "um so this was they they claimed they described this as being developed and tested at in in weeks rather than months",
    "start": "916079",
    "end": "921839"
  },
  {
    "text": "and at 1 20th the cost of a traditional database approach now this is a this is",
    "start": "921839",
    "end": "927000"
  },
  {
    "text": "a good uh example of optimal development if you build something designed for the",
    "start": "927000",
    "end": "933240"
  },
  {
    "text": "data stool you're using and it's well designed and you you have implemented efficiently then firstly you can execute",
    "start": "933240",
    "end": "941220"
  },
  {
    "text": "very quickly and and be up and running very fast as in the case of Shazam we described there and secondly it can be",
    "start": "941220",
    "end": "947040"
  },
  {
    "text": "it can reduce cost and give back time and that is that is something that is",
    "start": "947040",
    "end": "952500"
  },
  {
    "text": "often overlooked in this equation in a Shazam case that was a Super Bowl app it's fairly well publicized but I",
    "start": "952500",
    "end": "959579"
  },
  {
    "text": "thought I'd highlight it again it was built basically in three days from design to production ready tested over a",
    "start": "959579",
    "end": "965760"
  },
  {
    "text": "few more and then they ran it live at extremely high um extremely high operations per second",
    "start": "965760",
    "end": "973800"
  },
  {
    "text": "so when we talk about the four tips what are the four tips and these again are based on the challenges that we see",
    "start": "973800",
    "end": "980040"
  },
  {
    "text": "where people building new applications in dynamodb so essentially the four tips uh the",
    "start": "980040",
    "end": "986220"
  },
  {
    "text": "first one is super critical and that is make sure that uh if your application is designed for scale it's great that we",
    "start": "986220",
    "end": "993540"
  },
  {
    "text": "can provide an infrastructure that will scale to any level of throughput required but if the application design",
    "start": "993540",
    "end": "998880"
  },
  {
    "text": "if the schema design doesn't support it it won't get there and so this is uh this is probably the biggest of all the",
    "start": "998880",
    "end": "1005360"
  },
  {
    "text": "four and we'll spend a bit little more time on that than the others the symptoms of poor design for scale or",
    "start": "1005360",
    "end": "1011540"
  },
  {
    "text": "inefficient design are typically over provisioning to achieve throughput so",
    "start": "1011540",
    "end": "1016639"
  },
  {
    "text": "premature throttling is is one downside leveraging range Keys is very important",
    "start": "1016639",
    "end": "1022339"
  },
  {
    "text": "and all the leading proponents of all the leading users of dynamodb are",
    "start": "1022339",
    "end": "1028220"
  },
  {
    "text": "deploying range keys in a very structured and intelligent way that doesn't mean you should use them all the time hash only hash only tables are fine",
    "start": "1028220",
    "end": "1037040"
  },
  {
    "text": "but if to add more versatility and basically bring in the query as a API",
    "start": "1037040",
    "end": "1043280"
  },
  {
    "text": "then range keys are essential um using libraries and tools some of",
    "start": "1043280",
    "end": "1048919"
  },
  {
    "text": "these have been released quite recently some of them have been around for some time so what I want to do is walk",
    "start": "1048919",
    "end": "1054320"
  },
  {
    "text": "through a couple of the popular ones and then show you some locations where we've captured all this information together",
    "start": "1054320",
    "end": "1060500"
  },
  {
    "text": "to a single page and that's a great place to bookmark because that then you can go there see what's new interact",
    "start": "1060500",
    "end": "1066260"
  },
  {
    "text": "with third-party tools as well as tools and and libraries built by Amazon",
    "start": "1066260",
    "end": "1071660"
  },
  {
    "text": "and of course the last Point develop and test locally that's really in response to a lot of feedback from a lot of",
    "start": "1071660",
    "end": "1077419"
  },
  {
    "text": "customers about the way that they interact with their applications so it's obviously a derivative of the lamp stack",
    "start": "1077419",
    "end": "1084200"
  },
  {
    "text": "where everything's on your laptop and uh and disconnected no network requirements",
    "start": "1084200",
    "end": "1090260"
  },
  {
    "text": "is a popular approach so let's talk about designing for scale the common problem here is an efficient",
    "start": "1090260",
    "end": "1097760"
  },
  {
    "text": "and efficient and inefficient schema so what that looks like is that you have",
    "start": "1097760",
    "end": "1102919"
  },
  {
    "text": "hot spots within the the workload so when they hit the the database they're",
    "start": "1102919",
    "end": "1107960"
  },
  {
    "text": "creating uh pretty much what we expose as premature throttling what what it",
    "start": "1107960",
    "end": "1113120"
  },
  {
    "text": "looks like is they're just creating excessive points of of pressure on fewer",
    "start": "1113120",
    "end": "1118460"
  },
  {
    "text": "resources and so you know one item for instance can only as a as a physics problem one item can only scale as high",
    "start": "1118460",
    "end": "1126440"
  },
  {
    "text": "as in throughput as the uh the physical disk that it's sitting on so in our case",
    "start": "1126440",
    "end": "1132500"
  },
  {
    "text": "we're using ssds are very fast but they still have their limits so designing for",
    "start": "1132500",
    "end": "1138140"
  },
  {
    "text": "optimal throughput is essential um at the excessive excessive payloads if you have if you're moving too many",
    "start": "1138140",
    "end": "1144980"
  },
  {
    "text": "items around too many too much data around with the just servicing simple access patterns then you pay for that",
    "start": "1144980",
    "end": "1152240"
  },
  {
    "text": "and you pay for that in a number of ways in dynamodb um we have the concept of recapacity",
    "start": "1152240",
    "end": "1158120"
  },
  {
    "text": "units and rate capacity units um so they they provide boundaries which allow you to calculate allocated",
    "start": "1158120",
    "end": "1164720"
  },
  {
    "text": "capacity so in general uh if you're under the 1K limit for rights and 4K for",
    "start": "1164720",
    "end": "1170240"
  },
  {
    "text": "reads then it's it's operations per second but even if you're not in dynamodb resources are required to move",
    "start": "1170240",
    "end": "1177320"
  },
  {
    "text": "larger than optimal payloads and those resources when when servicing those requests will starve other requests of",
    "start": "1177320",
    "end": "1185660"
  },
  {
    "text": "the of their of their capacity so the design goals when we're after",
    "start": "1185660",
    "end": "1190760"
  },
  {
    "text": "scale the design goals are really to optimize the schema to the access pattern we call this access pattern",
    "start": "1190760",
    "end": "1196760"
  },
  {
    "text": "modeling and that is to say that the schema looks just like the data that the act that the access patent wants uh we",
    "start": "1196760",
    "end": "1203120"
  },
  {
    "text": "don't we don't uh we don't hit multiple tables that's all that's okay by the way but for high scale patterns you want to",
    "start": "1203120",
    "end": "1209780"
  },
  {
    "text": "hit one table put get put get and just do that at a very high rate but we and we certainly want to minimize the",
    "start": "1209780",
    "end": "1215840"
  },
  {
    "text": "payload size for each of the access patterns that we're describing so how we look at this is to",
    "start": "1215840",
    "end": "1222980"
  },
  {
    "text": "um firstly a note on how partitioning Works in dynamodb this is really important to",
    "start": "1222980",
    "end": "1228679"
  },
  {
    "text": "the way you design your hash choose your hash keys and your range Keys dynamodb automatically partitions data by the",
    "start": "1228679",
    "end": "1235400"
  },
  {
    "text": "hash key um now when we the documentation actually says primarily and that's",
    "start": "1235400",
    "end": "1240620"
  },
  {
    "text": "because if you have excessive data more than one partition it will spill onto another partition but it'll still be",
    "start": "1240620",
    "end": "1246860"
  },
  {
    "text": "managed in exactly the same way so for all intents and purposes think of a hash",
    "start": "1246860",
    "end": "1252080"
  },
  {
    "text": "key as a as a physical partition on which that data resides so the hash key",
    "start": "1252080",
    "end": "1257480"
  },
  {
    "text": "is used to spread data and therefore the workload across partitions this is the basis of distributed processing",
    "start": "1257480",
    "end": "1264460"
  },
  {
    "text": "what determines when data gets repartitioned is really two things the size of data so as that grows and it",
    "start": "1264460",
    "end": "1271760"
  },
  {
    "text": "obviously won't fit on the on the SSD partition that is that's containing it it needs to spill to a new one so that",
    "start": "1271760",
    "end": "1278600"
  },
  {
    "text": "will overflow onto another partition and then we'll allocate throughput accordingly the other the other aspect",
    "start": "1278600",
    "end": "1284840"
  },
  {
    "text": "is the throughput provision you could have a very small data set of you know a couple of hundred gigs say but you can",
    "start": "1284840",
    "end": "1290480"
  },
  {
    "text": "allocate that at a couple of hundred thousand writes a second or reads a second what that will do in order to",
    "start": "1290480",
    "end": "1296000"
  },
  {
    "text": "give you that throughput what dynamodb will do is take that data look at the hash key and then spread it across as",
    "start": "1296000",
    "end": "1301640"
  },
  {
    "text": "many machines as many partitions as needed to achieve that throughput so",
    "start": "1301640",
    "end": "1306919"
  },
  {
    "text": "that's that's again the principle of distributed processing um so these are these are the trigger steps for for",
    "start": "1306919",
    "end": "1313539"
  },
  {
    "text": "partitioning what is essential here is that the hash is is well chosen so",
    "start": "1313539",
    "end": "1320000"
  },
  {
    "text": "consider applications ready to scale when they when there is a large number of unique hash Keys okay this is",
    "start": "1320000",
    "end": "1326780"
  },
  {
    "text": "particularly important with um keep that with the hash range with a hash only primary key of course it's",
    "start": "1326780",
    "end": "1333620"
  },
  {
    "text": "it's the uniqueness is enforced so that's okay but um when you're building with range Keys that's that's a very",
    "start": "1333620",
    "end": "1339679"
  },
  {
    "text": "important consideration the uniform distribution of workload across across hash keys are very important if you do",
    "start": "1339679",
    "end": "1345980"
  },
  {
    "text": "get hotspots they can be eliminated um but they that may have to happen at the application Level as well",
    "start": "1345980",
    "end": "1353179"
  },
  {
    "text": "so when we talk about efficient schema design taking advantage of that hash",
    "start": "1353179",
    "end": "1358659"
  },
  {
    "text": "the way the hash is used to do the partitioning access pass modeling really",
    "start": "1358659",
    "end": "1364159"
  },
  {
    "text": "comes down to three things identifying the individual patterns modeling each pattern to its own discrete data set as",
    "start": "1364159",
    "end": "1370100"
  },
  {
    "text": "if it's the only one there and then you stand back and look at the whole thing and then start to do consolidation and",
    "start": "1370100",
    "end": "1375799"
  },
  {
    "text": "so you consolidating data sets into tables and allocating index accordingly",
    "start": "1375799",
    "end": "1381380"
  },
  {
    "text": "so I've got a very brief abbreviated example there where we kind of say here's the access baton here's the",
    "start": "1381380",
    "end": "1387740"
  },
  {
    "text": "schema we're kind of missing the mapping but I think you can see um you can fill in that gap for",
    "start": "1387740",
    "end": "1392780"
  },
  {
    "text": "yourselves in a file sharing scenario the access patterns might be given the",
    "start": "1392780",
    "end": "1398120"
  },
  {
    "text": "user ID return all items by file name or by date created size type date updated",
    "start": "1398120",
    "end": "1403640"
  },
  {
    "text": "now this is this is uh Cloud Drive Amazon Cloud Drive as well as a number of other things and Cloud Drive actually",
    "start": "1403640",
    "end": "1410360"
  },
  {
    "text": "uses dynamodb so it's not a not a foreign concept both internally as well as with many of our customers now how",
    "start": "1410360",
    "end": "1417620"
  },
  {
    "text": "you would implement this the first thing is to ensure uniqueness of course so user ID is great all of those all of",
    "start": "1417620",
    "end": "1424340"
  },
  {
    "text": "those patterns revolve around a you know my data me as the user ID so this is",
    "start": "1424340",
    "end": "1429679"
  },
  {
    "text": "what we call the the multi-tenant design where hash and range are used to enforce multi-tenancy to enable tenants to",
    "start": "1429679",
    "end": "1436760"
  },
  {
    "text": "interact with their data by having the hash as the user ID but then use the range key to enforce uniqueness and of",
    "start": "1436760",
    "end": "1443419"
  },
  {
    "text": "course service other access patterns so in this case File name we're considering that unique for a user so that makes a",
    "start": "1443419",
    "end": "1450679"
  },
  {
    "text": "great range key date Creator does not size does not type does not nor does",
    "start": "1450679",
    "end": "1455780"
  },
  {
    "text": "date updated because both all of these things could be if you think about the same user could create objects with",
    "start": "1455780",
    "end": "1462580"
  },
  {
    "text": "multiple objects with the same attribute there file names are unique so what this",
    "start": "1462580",
    "end": "1468320"
  },
  {
    "text": "looks like in when we look at the table design on the right hand side primary primary hash key in the primary range",
    "start": "1468320",
    "end": "1474500"
  },
  {
    "text": "key user ID and file name good thing we've what we've done we've created indexes to serve those other patterns",
    "start": "1474500",
    "end": "1480679"
  },
  {
    "text": "and this is and I'll talk about local secondary indexes in a minute but essentially what we're doing we're",
    "start": "1480679",
    "end": "1485900"
  },
  {
    "text": "taking the core table the design around the hash and range key the other attributes within that table are",
    "start": "1485900",
    "end": "1491840"
  },
  {
    "text": "available now what happens with the local secondary is we basically project them forward as an alternate range key",
    "start": "1491840",
    "end": "1497059"
  },
  {
    "text": "and that gives us gives us the ability to interact with an index as if it was another table which it essentially is",
    "start": "1497059",
    "end": "1503419"
  },
  {
    "text": "and that it's it's materialized but it's consistent it's managed automatically for you and so that gives you kind of",
    "start": "1503419",
    "end": "1510740"
  },
  {
    "text": "one structure where you can do a great deal of access against",
    "start": "1510740",
    "end": "1516380"
  },
  {
    "text": "foreign so leveraging range keys and this kind of flows from that first case",
    "start": "1516380",
    "end": "1521840"
  },
  {
    "text": "where we're using range Keys range Keys enable one-to-many relationships and so in this case if you I've just dragged",
    "start": "1521840",
    "end": "1528679"
  },
  {
    "text": "some data out of Twitter and I'm saying here's the hash which is let's call the user ID the Twitter Twitter handle range",
    "start": "1528679",
    "end": "1534919"
  },
  {
    "text": "key and a great range key in most cases is date now we'll talk a little bit",
    "start": "1534919",
    "end": "1540440"
  },
  {
    "text": "about what range what else you can do with range Keys basically using the query API but data is often used for",
    "start": "1540440",
    "end": "1546620"
  },
  {
    "text": "that as a great range key associated with the hash now what you've got is user mza so if you recognize that that's",
    "start": "1546620",
    "end": "1553760"
  },
  {
    "text": "Matt Wood and two of his Twitter posts there at different times of different days and you see the attributes the",
    "start": "1553760",
    "end": "1559880"
  },
  {
    "text": "actual posts themselves post text equals different posts but what we're saying what we have is a unique relationship",
    "start": "1559880",
    "end": "1566659"
  },
  {
    "text": "between the hash and the range for each item and so that combination ensures one",
    "start": "1566659",
    "end": "1571700"
  },
  {
    "text": "that we have a uniqueness and two we have the one-to-one relationship represented",
    "start": "1571700",
    "end": "1576799"
  },
  {
    "text": "so okay we just have a quick look at um at the API it's very simple API",
    "start": "1576799",
    "end": "1583419"
  },
  {
    "text": "five five operations for managing tables so generally not used in in the actual",
    "start": "1583419",
    "end": "1589580"
  },
  {
    "text": "interaction of the application with data but very important to to help obviously describe update delete tables things",
    "start": "1589580",
    "end": "1596240"
  },
  {
    "text": "like that so reading and writing items and then reading and writing multiple items so put get update delete batch",
    "start": "1596240",
    "end": "1603620"
  },
  {
    "text": "Batch get batch write query and scan and we're going to focus on the query because query is a function is an",
    "start": "1603620",
    "end": "1610340"
  },
  {
    "text": "operation that's only enabled only possible by using range Keys it is it",
    "start": "1610340",
    "end": "1616100"
  },
  {
    "text": "applies to the range key it requires a hash key of course as hash and range",
    "start": "1616100",
    "end": "1621500"
  },
  {
    "text": "keys do so you say hash equals and you can return everything in sorted order if",
    "start": "1621500",
    "end": "1627559"
  },
  {
    "text": "you don't provide a range key attribute the whole record will come back or you can be more focused on that and say hash",
    "start": "1627559",
    "end": "1633919"
  },
  {
    "text": "equals and range equals or range greater than less than begins with and so on so it gives you a tremendous amount of",
    "start": "1633919",
    "end": "1640100"
  },
  {
    "text": "Versatility and this is why date fields timestamps are very popular as range keys because it's very easy to do",
    "start": "1640100",
    "end": "1647900"
  },
  {
    "text": "greater than or most recent top dates and so on",
    "start": "1647900",
    "end": "1653320"
  },
  {
    "text": "when we look at the queries the other aspect of using query that is often",
    "start": "1653960",
    "end": "1660200"
  },
  {
    "text": "overlooked but extremely important is the efficiency of it now you remember hash and range effectively puts all the",
    "start": "1660200",
    "end": "1666020"
  },
  {
    "text": "data in a co-located situation where it's all sharing the same partition well what query does it treats all items as a",
    "start": "1666020",
    "end": "1672559"
  },
  {
    "text": "single read operation okay so items share the same hash key that's the definition of a hash range",
    "start": "1672559",
    "end": "1678980"
  },
  {
    "text": "construct and a query can only operate against a a single hash key so what",
    "start": "1678980",
    "end": "1684679"
  },
  {
    "text": "happens there is when the query is accessing multiple rows around a common",
    "start": "1684679",
    "end": "1690500"
  },
  {
    "text": "hash key it gathers all that data in a single read operation and then allocates read units afterwards so if you compare",
    "start": "1690500",
    "end": "1698900"
  },
  {
    "text": "that to say Batch get item which is obviously another way of doing bulk reading and Batch get item will read",
    "start": "1698900",
    "end": "1705679"
  },
  {
    "text": "each item in the batch separately the batch get item will enable you to read in parallel from multiple tables",
    "start": "1705679",
    "end": "1712700"
  },
  {
    "text": "multiple different items so that's obviously where it's strong but if you have if in the example here you want to",
    "start": "1712700",
    "end": "1718820"
  },
  {
    "text": "read 100 items in a table all of which share the same hash key then Batch get item will cost you 100 read units what",
    "start": "1718820",
    "end": "1725240"
  },
  {
    "text": "query will cost you three assuming the size is 120 bytes in size and so that's",
    "start": "1725240",
    "end": "1730400"
  },
  {
    "text": "a that's a huge difference and that compression of of of data before allocating the read unit that happens in",
    "start": "1730400",
    "end": "1737659"
  },
  {
    "text": "query it also happens in scan so when we drop the price of when we moved the the",
    "start": "1737659",
    "end": "1742820"
  },
  {
    "text": "boundary from 1K to 4K as we did a few months ago that effectively dropped the price of query and scan operations by 75",
    "start": "1742820",
    "end": "1750820"
  },
  {
    "text": "and that's why I did it because it it uses collocated data and allocates reunits accordingly",
    "start": "1750820",
    "end": "1757580"
  },
  {
    "text": "the other thing you can do with range Keys is local secondary indexes now locals they're called local secondary",
    "start": "1757580",
    "end": "1763220"
  },
  {
    "text": "indexes because they pivot around the common hash key so they're designed for high scale multi-tenant applications",
    "start": "1763220",
    "end": "1768500"
  },
  {
    "text": "they are local to the hash key so effectively think partition think physical physically adjacent data uh",
    "start": "1768500",
    "end": "1775880"
  },
  {
    "text": "What uh with local secondaries you can Define up to five different indexes and most critically there'll be",
    "start": "1775880",
    "end": "1782480"
  },
  {
    "text": "no performance degradation so typically in a database if you have an index then",
    "start": "1782480",
    "end": "1787700"
  },
  {
    "text": "the right to the to the uh the primary the table underlying table will be a bit",
    "start": "1787700",
    "end": "1793340"
  },
  {
    "text": "slower if you have more indexes that those rights will continue to get slower and slower and that could consume 20 to",
    "start": "1793340",
    "end": "1798799"
  },
  {
    "text": "30 percent of increased latency by 20 to 30 percent each time you add a new index well with local secondary indexes you",
    "start": "1798799",
    "end": "1806059"
  },
  {
    "text": "can have up to five different uh indexes on a single table and your right latency",
    "start": "1806059",
    "end": "1811640"
  },
  {
    "text": "experience will be uniform and and very low now why how we do that we do that",
    "start": "1811640",
    "end": "1817340"
  },
  {
    "text": "because again this physical co-location of data so when we're doing things in parallel we're doing them consistently",
    "start": "1817340",
    "end": "1822799"
  },
  {
    "text": "it's all um it's all done with very high proximity so the we're talking about microseconds of additional latency none",
    "start": "1822799",
    "end": "1830360"
  },
  {
    "text": "of which flows back to change the overall perception of the overall latency profile for the upper operation",
    "start": "1830360",
    "end": "1837620"
  },
  {
    "text": "um so the the other thing we do to enforce that is called item collections so if you're implementing a local",
    "start": "1837620",
    "end": "1843200"
  },
  {
    "text": "secondary index on a table then the table and all the indexes must occupy",
    "start": "1843200",
    "end": "1848480"
  },
  {
    "text": "less than 10 gigabytes per hash key and we say per hash key that's a it's a lot",
    "start": "1848480",
    "end": "1853880"
  },
  {
    "text": "of data for a single hash key but the reason that is of course is so we can enforce all that data ensure all that",
    "start": "1853880",
    "end": "1860600"
  },
  {
    "text": "data is on the same partition and therefore that gives us the the benefits of that I described with the performance",
    "start": "1860600",
    "end": "1867020"
  },
  {
    "text": "lsis are like the rest of tables in in imodb they are sparse objects so you can",
    "start": "1867020",
    "end": "1873380"
  },
  {
    "text": "create an index on an attribute that doesn't exist when it does exist in the core table it will be written into the",
    "start": "1873380",
    "end": "1879980"
  },
  {
    "text": "index but if you have only one of those then your index will only have one and it'll be sized accordingly",
    "start": "1879980",
    "end": "1887500"
  },
  {
    "text": "we're just waiting for the slide to refresh so the third besides using range",
    "start": "1895779",
    "end": "1901580"
  },
  {
    "text": "Keys leveraging range fees we want to really encourage the the use of libraries",
    "start": "1901580",
    "end": "1908799"
  },
  {
    "text": "let's push this another one so just having a little slide",
    "start": "1908960",
    "end": "1914480"
  },
  {
    "text": "malfunction here there it is so using libraries and tools is very important is",
    "start": "1914480",
    "end": "1919820"
  },
  {
    "text": "an important way we've had a lot of feedback about I do this can I do that and of course you can but it usually",
    "start": "1919820",
    "end": "1925640"
  },
  {
    "text": "requires a lot of effort because the Primitive State and the API dynamodb is all about kind of low level interaction",
    "start": "1925640",
    "end": "1931700"
  },
  {
    "text": "with the database so what we've done we've released recently a number of libraries and tools",
    "start": "1931700",
    "end": "1937760"
  },
  {
    "text": "and there are also third-party tools out there and libraries that make this uh",
    "start": "1937760",
    "end": "1943279"
  },
  {
    "text": "these sort of problems a lot easier and so we really encourage people to use those so for example the transaction",
    "start": "1943279",
    "end": "1950120"
  },
  {
    "text": "Library gives you the ability to do that the put put transaction sorry begin and",
    "start": "1950120",
    "end": "1956179"
  },
  {
    "text": "transaction commit and roll back as you would in a relational data store so",
    "start": "1956179",
    "end": "1961279"
  },
  {
    "text": "essentially what's happened with the library is doing it's maintaining two different tables under the covers one to track the transactions themselves and",
    "start": "1961279",
    "end": "1967700"
  },
  {
    "text": "two is to track this snapshot grab the data the before image of the of the the",
    "start": "1967700",
    "end": "1973580"
  },
  {
    "text": "modified items now what this does you know the catch here is what happens in a",
    "start": "1973580",
    "end": "1979220"
  },
  {
    "text": "normal relational database because of these is that you do a lot more writing than you otherwise would but again these",
    "start": "1979220",
    "end": "1985399"
  },
  {
    "text": "transaction libraries they're built to scale and and it will give you very high scalability and very high obviously",
    "start": "1985399",
    "end": "1991880"
  },
  {
    "text": "granularity in the in the ability to to manage All or Nothing transactions in multiples",
    "start": "1991880",
    "end": "1998000"
  },
  {
    "text": "geolocation is another Library we released recently it basically takes care of creating and maintaining hash",
    "start": "1998000",
    "end": "2004360"
  },
  {
    "text": "Keys range keys and indexes so that allows you to basically do fast and",
    "start": "2004360",
    "end": "2010240"
  },
  {
    "text": "efficient geolocation based queries so you know essentially what people are",
    "start": "2010240",
    "end": "2015640"
  },
  {
    "text": "doing is adding location awareness to their mobile apps under under the covers what's happening is you know we're",
    "start": "2015640",
    "end": "2022019"
  },
  {
    "text": "creating the virtual grid over the planet each grid cell has an address derived from the location of the cell",
    "start": "2022019",
    "end": "2028299"
  },
  {
    "text": "and then and then what you do you insert Geo points so there are functions and methods provided to to to do this create",
    "start": "2028299",
    "end": "2036940"
  },
  {
    "text": "a geopoint into dynamodb what it's going to do is it's going to generate it's going to compute a geohash and use that",
    "start": "2036940",
    "end": "2042880"
  },
  {
    "text": "and to map the data record to the correct grid cell so what this this looks like inside the the tables created",
    "start": "2042880",
    "end": "2050260"
  },
  {
    "text": "by this Library basically the geohash is stored as an item attribute",
    "start": "2050260",
    "end": "2055480"
  },
  {
    "text": "and so that it preserves the proximity of nearby points and makes for efficient retrieval using this these sort of",
    "start": "2055480",
    "end": "2062320"
  },
  {
    "text": "constructs so essentially under the covers what they what these uh libraries are doing is creating and maintaining",
    "start": "2062320",
    "end": "2068200"
  },
  {
    "text": "completely maintaining um management tables for you so that you don't have to build it yourself in the",
    "start": "2068200",
    "end": "2074980"
  },
  {
    "text": "geolocation example there is a a sample app as well find it as well find yourself so it's a",
    "start": "2074980",
    "end": "2082000"
  },
  {
    "text": "great way to get started and that's on GitHub under the AWS labs location",
    "start": "2082000",
    "end": "2087700"
  },
  {
    "text": "other libraries and tools we have a lot of con contributions from the community two of backup And archiving is is",
    "start": "2087700",
    "end": "2095200"
  },
  {
    "text": "popular but the the most popular by far has been Auto scale um so there's both Dynamic Dynamo and",
    "start": "2095200",
    "end": "2102400"
  },
  {
    "text": "there's dynamodb and then there's Auto scale so what we've done we've put these all these libraries and tools and best",
    "start": "2102400",
    "end": "2109000"
  },
  {
    "text": "practices how to tips and guidelines all on a single page so I'm going to share that link with you shortly autoscale has",
    "start": "2109000",
    "end": "2116140"
  },
  {
    "text": "been extremely popular and it's a big reason we wanted to bring this page to you and basically to put it all in a",
    "start": "2116140",
    "end": "2122320"
  },
  {
    "text": "single place so you have one place to go to to find even third-party tools",
    "start": "2122320",
    "end": "2127540"
  },
  {
    "text": "um customers are also building their own Auto scale you may see some blogs out there it's fairly simple logic and it",
    "start": "2127540",
    "end": "2133599"
  },
  {
    "text": "basically looks like this you know you take the cloud watch data to determine when a limit is under threat so in other",
    "start": "2133599",
    "end": "2139000"
  },
  {
    "text": "words when your use capacity starts to encroach upon your provision capacity and then you initiate a scale-up event",
    "start": "2139000",
    "end": "2144520"
  },
  {
    "text": "and you scale up based on pretty much the the nature of your",
    "start": "2144520",
    "end": "2149980"
  },
  {
    "text": "um your workload so if you're used to very high amplitude spikes in workload",
    "start": "2149980",
    "end": "2155140"
  },
  {
    "text": "you may want to scale up quite aggressively if not you may want to scale up more conservatively but then keep looking you",
    "start": "2155140",
    "end": "2162280"
  },
  {
    "text": "can scale up any number of times now similarly the downscale events are initiated when capacity drops",
    "start": "2162280",
    "end": "2168160"
  },
  {
    "text": "sufficiently below the allocated capacity that it's very safe to scale",
    "start": "2168160",
    "end": "2173500"
  },
  {
    "text": "down into that um finally developing and testing",
    "start": "2173500",
    "end": "2178780"
  },
  {
    "text": "locally we do recommend well let's say it was very it was recommended for us to",
    "start": "2178780",
    "end": "2184300"
  },
  {
    "text": "provide this and we did and we also have third-party libraries the third-party tools that do this as well so",
    "start": "2184300",
    "end": "2190060"
  },
  {
    "text": "essentially what dynamodb local does is provide disconnected development so you get the full API support without",
    "start": "2190060",
    "end": "2196420"
  },
  {
    "text": "incurring network costs or usage costs as low as they may be it's better it's better to have them at zero and it's",
    "start": "2196420",
    "end": "2202660"
  },
  {
    "text": "better to be on a beach one thing we do point out is that of course dynamodb local is for development it is not does",
    "start": "2202660",
    "end": "2209560"
  },
  {
    "text": "not have a durability or availability SLA so we do not encourage you to stand up on an m24xl and throw a production",
    "start": "2209560",
    "end": "2216700"
  },
  {
    "text": "workload at it instead we recommend you leave it on your laptop and go to the beach and do some coding",
    "start": "2216700",
    "end": "2222960"
  },
  {
    "text": "so a few things about dynamodb local it's not exactly the same",
    "start": "2222960",
    "end": "2229359"
  },
  {
    "text": "as the service for a number of Fairly obvious reasons but some things that it does some minor differences it does",
    "start": "2229359",
    "end": "2235960"
  },
  {
    "text": "ignore your provision throughput settings so the value you specify they won't",
    "start": "2235960",
    "end": "2242320"
  },
  {
    "text": "actually they won't be imposed there's no enforcement of provision capacity so it doesn't do throttling or for reads or",
    "start": "2242320",
    "end": "2249280"
  },
  {
    "text": "rights uh the the values you put it's also region independent so it doesn't consider the region or the credentials",
    "start": "2249280",
    "end": "2257260"
  },
  {
    "text": "um they are necessary because the API supports them um but they are not used so uh we do",
    "start": "2257260",
    "end": "2262960"
  },
  {
    "text": "recommend using dummy strings of characters for your secret key there's absolutely no need to put that in",
    "start": "2262960",
    "end": "2268780"
  },
  {
    "text": "um as as it should be put in on on the production service",
    "start": "2268780",
    "end": "2273960"
  },
  {
    "text": "um finally there's there are additional options again on the library for local and local test and development as well",
    "start": "2274480",
    "end": "2280720"
  },
  {
    "text": "as dynamodb local which is really the the latest of these um so our community",
    "start": "2280720",
    "end": "2286000"
  },
  {
    "text": "has been very active in producing these in advance um so fake Dynamo or alternator ddb",
    "start": "2286000",
    "end": "2291940"
  },
  {
    "text": "marking client-side AWS as well as uh guidance on injecting failures using the Java SDK so these are again facilities",
    "start": "2291940",
    "end": "2299920"
  },
  {
    "text": "and resources available on our on the website so when we talk about Foster development",
    "start": "2299920",
    "end": "2305619"
  },
  {
    "text": "and some of the experiences our customers have seen dig built the Dig reader on dynamodb predominantly because",
    "start": "2305619",
    "end": "2312760"
  },
  {
    "text": "they didn't have time to to do the provisioning do the setup so that makes",
    "start": "2312760",
    "end": "2319060"
  },
  {
    "text": "a lot of sense and it's a it's a large part of why customers come to manage services",
    "start": "2319060",
    "end": "2324400"
  },
  {
    "text": "um similarly with right action they wanted to focus on their business rather than on their infrastructure and so",
    "start": "2324400",
    "end": "2329920"
  },
  {
    "text": "that'll enable them to to do so with the managed aspect of dynamodb as a database",
    "start": "2329920",
    "end": "2336880"
  },
  {
    "text": "service there's a number of different unique value points you get as part of",
    "start": "2336880",
    "end": "2343300"
  },
  {
    "text": "the uh the way we Implement operations so in automating the operations traditionally a scalability increases",
    "start": "2343300",
    "end": "2350440"
  },
  {
    "text": "performance to grades that's always a that's a traditional Challenge and it comes from doing these sort of tasks",
    "start": "2350440",
    "end": "2355960"
  },
  {
    "text": "provisioning rebalancing monitoring doing failure management and so on so",
    "start": "2355960",
    "end": "2361420"
  },
  {
    "text": "this requires substantial effort and this these are the things that don't know DB automates it automates it",
    "start": "2361420",
    "end": "2366940"
  },
  {
    "text": "through a concept of predictable performance which is delivered through provision throughput so it's a request",
    "start": "2366940",
    "end": "2373060"
  },
  {
    "text": "based provisioning model where you declare act table creation or update",
    "start": "2373060",
    "end": "2379060"
  },
  {
    "text": "time the the number of region rights per second that you want and of course you can increase that and so on dynamodb",
    "start": "2379060",
    "end": "2386200"
  },
  {
    "text": "under the covers will do what you would do if you're managing a technology yourself but it will do it man it'll do",
    "start": "2386200",
    "end": "2391300"
  },
  {
    "text": "it automatically it'll do it very quickly and it'll do it without any impacted performance or availability so",
    "start": "2391300",
    "end": "2396460"
  },
  {
    "text": "data will be will be partitioned broadly more servers will be allocated and all",
    "start": "2396460",
    "end": "2401859"
  },
  {
    "text": "that will happen in the background and when those resources are available your do the capacity limit will be will be",
    "start": "2401859",
    "end": "2408760"
  },
  {
    "text": "realized dynamodb is also built on a model of durable low latency now what that means",
    "start": "2408760",
    "end": "2414339"
  },
  {
    "text": "is when rights are written to the service they are continuously replicated",
    "start": "2414339",
    "end": "2420220"
  },
  {
    "text": "um so we we have a quorum with three azs uh the final destination for All rights",
    "start": "2420220",
    "end": "2425619"
  },
  {
    "text": "and there's a quorum before a writers acknowledge so that's after after two has have acknowledged and persisted at",
    "start": "2425619",
    "end": "2432040"
  },
  {
    "text": "the desk then the right will be acknowledged so that is extremely durable always consistent on the rights",
    "start": "2432040",
    "end": "2438700"
  },
  {
    "text": "as well by which we have kind of an item Master concept where we we know which uh",
    "start": "2438700",
    "end": "2444400"
  },
  {
    "text": "which is the master version of any item at any point in time and that enables us on the read side to provide either",
    "start": "2444400",
    "end": "2450820"
  },
  {
    "text": "strongly consistent or eventually consistent reads so if you have an eventually consistent read that will",
    "start": "2450820",
    "end": "2456700"
  },
  {
    "text": "take it from one of the replicas that won't by the way there'll be no trade-off in latency there's no difference in the latency",
    "start": "2456700",
    "end": "2462460"
  },
  {
    "text": "characteristics between the different types of breeds throughput is cheaper when you do",
    "start": "2462460",
    "end": "2468280"
  },
  {
    "text": "eventually consistent so when we look at",
    "start": "2468280",
    "end": "2473380"
  },
  {
    "text": "um just like running a benchmark on dynamodb comparing a request volume to",
    "start": "2473380",
    "end": "2479079"
  },
  {
    "text": "latency and this is just a graph to show really to highlight the flatness of the latency profile as well as the the",
    "start": "2479079",
    "end": "2486119"
  },
  {
    "text": "periodicity if you like of the um of the number of requests so this is over a number of days as the request",
    "start": "2486119",
    "end": "2493000"
  },
  {
    "text": "volume cycles and this is this Benchmark was done and you know many many millions of operations as it Cycles up and down",
    "start": "2493000",
    "end": "2500200"
  },
  {
    "text": "you see that the latency profile remains extremely flat",
    "start": "2500200",
    "end": "2505619"
  },
  {
    "text": "um so that's uh that's most of what we have today I wanted to summarize with really three major points one is that",
    "start": "2506200",
    "end": "2512980"
  },
  {
    "text": "efficient design it's not just good practice it's cost effective",
    "start": "2512980",
    "end": "2518560"
  },
  {
    "text": "um had role realized that they're a big advocate of of Highly optimized systems and they spend way less on dynamodb than",
    "start": "2518560",
    "end": "2525579"
  },
  {
    "text": "they do even on food for their for their team um managed services are designed",
    "start": "2525579",
    "end": "2532000"
  },
  {
    "text": "predominantly to reduce the effort the undifferentiated effort that doesn't make your application better or faster",
    "start": "2532000",
    "end": "2537579"
  },
  {
    "text": "or more impressive it just keeps it going and so we automate that away that's the benefit of a managed service",
    "start": "2537579",
    "end": "2543339"
  },
  {
    "text": "and it means you're freeing up really good people to do really good things and overall what you're getting out of this",
    "start": "2543339",
    "end": "2549460"
  },
  {
    "text": "you're giving you're getting time back for the people you're getting costs back and that time is really something we we",
    "start": "2549460",
    "end": "2556540"
  },
  {
    "text": "encourage to be used much more on experimentation on optimization instead of managing low-level",
    "start": "2556540",
    "end": "2563820"
  },
  {
    "text": "administrative tasks so here are the resources I recommended there's an additional one there the",
    "start": "2563820",
    "end": "2570220"
  },
  {
    "text": "mobile development blog which has a couple of great article series of articles about the geolibrary and Amazon",
    "start": "2570220",
    "end": "2576460"
  },
  {
    "text": "on mobile in particular we also have the resource Library I mentioned the best",
    "start": "2576460",
    "end": "2581500"
  },
  {
    "text": "practice how-to and tools under the slash resource link on dynamodb so",
    "start": "2581500",
    "end": "2586900"
  },
  {
    "text": "you'll be able to access all of those local development and testing tools backup archive Auto scale and plenty",
    "start": "2586900",
    "end": "2592540"
  },
  {
    "text": "more so we encourage you very much to go and see that with that we're going to take some",
    "start": "2592540",
    "end": "2597640"
  },
  {
    "text": "questions um and so sure thanks baby we received",
    "start": "2597640",
    "end": "2602680"
  },
  {
    "text": "quite many good questions while we are preparing please take a minute to respond to two",
    "start": "2602680",
    "end": "2608380"
  },
  {
    "text": "quick survey questions",
    "start": "2608380",
    "end": "2611220"
  },
  {
    "text": "there sure um please take a moment to make a choice and hit submit",
    "start": "2620079",
    "end": "2626338"
  },
  {
    "text": "and then we have second question",
    "start": "2637000",
    "end": "2640619"
  },
  {
    "text": "again please take a moment to make a choice and hit submit",
    "start": "2647020",
    "end": "2651599"
  },
  {
    "text": "okay great now um David well",
    "start": "2656800",
    "end": "2660900"
  },
  {
    "text": "yeah sorry I I probably went over a bit longer than I wanted to to give me more time um so let me get through these very",
    "start": "2662319",
    "end": "2668140"
  },
  {
    "text": "quickly as many as I can we do have a lot of questions so um thanks for all that in interest",
    "start": "2668140",
    "end": "2673780"
  },
  {
    "text": "um so first question what is the simplest way to do reporting from dynamodb out of EMR um so good question",
    "start": "2673780",
    "end": "2679359"
  },
  {
    "text": "the EMR has a hive Handler that talks directly to dynamodb what that enables",
    "start": "2679359",
    "end": "2686079"
  },
  {
    "text": "you to do is do basically Rich queries against dynamodb data it also enables you to do complex queries complex joins",
    "start": "2686079",
    "end": "2693040"
  },
  {
    "text": "between data that is say stored in the S3 in CSV format and data that is live",
    "start": "2693040",
    "end": "2698200"
  },
  {
    "text": "and hot in dynamodb so you can join those as if they're just tables doing group buys havings and so on against",
    "start": "2698200",
    "end": "2703540"
  },
  {
    "text": "that so Hive I think is the answer to that question The Hive Handler is is",
    "start": "2703540",
    "end": "2709540"
  },
  {
    "text": "built to to talk to Dynamo and one thing you can do there is when you're doing the map function which is obviously",
    "start": "2709540",
    "end": "2714880"
  },
  {
    "text": "reads out of dynamodb you can allocate a percentage of read capacity to use in",
    "start": "2714880",
    "end": "2720160"
  },
  {
    "text": "that operation so you don't if you initiate an EMR based report you don't starve every every one of all the of all",
    "start": "2720160",
    "end": "2727599"
  },
  {
    "text": "the capacity there um love to see a use case around how online retail might use dynamodb for",
    "start": "2727599",
    "end": "2734200"
  },
  {
    "text": "product catalog link tracking Etc um thanks for that Jim um it's used very",
    "start": "2734200",
    "end": "2739480"
  },
  {
    "text": "broadly for that product catalog we do a lot of these calls in most weeks um it's it's a great you know if you",
    "start": "2739480",
    "end": "2745660"
  },
  {
    "text": "think of product ID is a unique key there and then you could bring in range Keys accordingly it's very popular",
    "start": "2745660",
    "end": "2751599"
  },
  {
    "text": "because it's very low latency and of course durable we see even a lot more in the shopping cart and inventory State",
    "start": "2751599",
    "end": "2757839"
  },
  {
    "text": "and that is because of the really the durable low latency things don't get",
    "start": "2757839",
    "end": "2763240"
  },
  {
    "text": "lost they're not at risk so shopping cart and inventory are good attributes of that we also have conditional rights",
    "start": "2763240",
    "end": "2769300"
  },
  {
    "text": "which enable you to increment and decrement counters with absolute assurance that you're working with the",
    "start": "2769300",
    "end": "2774640"
  },
  {
    "text": "correct number link tracking things like that digital advertising do a lot of this we have",
    "start": "2774640",
    "end": "2780640"
  },
  {
    "text": "some recent workshops and seminars webinars and and even blog content",
    "start": "2780640",
    "end": "2785980"
  },
  {
    "text": "around that it's kind of analogous in what it does it it provides a lot of it",
    "start": "2785980",
    "end": "2791920"
  },
  {
    "text": "basically serves links up to the right people you know it's it's a form of personalization and then the ability for",
    "start": "2791920",
    "end": "2797980"
  },
  {
    "text": "to track the the progress of that user through the through the advertising",
    "start": "2797980",
    "end": "2803200"
  },
  {
    "text": "scenario um",
    "start": "2803200",
    "end": "2808300"
  },
  {
    "text": "what is the best practice to back up data incrementally good question we do have in fact the data pipeline",
    "start": "2808300",
    "end": "2816780"
  },
  {
    "text": "template which enables you to do that under the covers what's happening if you're proficient with EMR mapreduce",
    "start": "2816780",
    "end": "2823180"
  },
  {
    "text": "again I'm using what I described earlier which is the ability to um",
    "start": "2823180",
    "end": "2828520"
  },
  {
    "text": "to read out a dynamodb at very high scale so the good news is that's not",
    "start": "2828520",
    "end": "2834460"
  },
  {
    "text": "necessary for availability the design of dynamodb is it basically makes it",
    "start": "2834460",
    "end": "2841000"
  },
  {
    "text": "extremely robust but it is great for human error and so we do encourage that that practice so if you want that to be",
    "start": "2841000",
    "end": "2847960"
  },
  {
    "text": "super simple then the data pipeline which only runs out of IAD today in",
    "start": "2847960",
    "end": "2853180"
  },
  {
    "text": "Northern Virginia but you can still run it in other regions but you just have to refer to that basically as at the the",
    "start": "2853180",
    "end": "2861180"
  },
  {
    "text": "server this sorry the service running in IAD but it can still Implement cross-region snapshots and copy of",
    "start": "2861180",
    "end": "2868540"
  },
  {
    "text": "dynamodb as well as data unloads and loads",
    "start": "2868540",
    "end": "2873420"
  },
  {
    "text": "uh does dynamodb provide any mechanism for helping us find hot spots that's a it's a great question um not yet but we",
    "start": "2873819",
    "end": "2882040"
  },
  {
    "text": "we do hear that question and we we do want to help um please get in touch with us we can we",
    "start": "2882040",
    "end": "2887560"
  },
  {
    "text": "we have some tools that we can help you with if it's a big problem then we can we can do some things um and we've done that a lot with",
    "start": "2887560",
    "end": "2894040"
  },
  {
    "text": "customers to help you do that um",
    "start": "2894040",
    "end": "2899940"
  },
  {
    "text": "okay we've got a few questions on um things that aren't here like do we plan this or do we plan that so just a",
    "start": "2901780",
    "end": "2907480"
  },
  {
    "text": "general um statement of coverage there we won't talk about road map or Futures uh in",
    "start": "2907480",
    "end": "2912940"
  },
  {
    "text": "this this sort of format um but you you can obviously stay tuned to that if you are if you have an NDA",
    "start": "2912940",
    "end": "2919119"
  },
  {
    "text": "with us as a customer then you can set up a briefing and go through that sort of thing but this feedback please keep",
    "start": "2919119",
    "end": "2924760"
  },
  {
    "text": "asking we we do we do keep this and we do flow it through to the service team so if you do need these things then your",
    "start": "2924760",
    "end": "2931720"
  },
  {
    "text": "votes are always recorded how would you treat date range as a date",
    "start": "2931720",
    "end": "2937720"
  },
  {
    "text": "type in a query we don't have a date type one thing I didn't mention we that the types we have is number string and",
    "start": "2937720",
    "end": "2944819"
  },
  {
    "text": "binary and we have set solve as well so you would probably treat it as a string",
    "start": "2944819",
    "end": "2951460"
  },
  {
    "text": "um using Unix Epoch times is popular that's how we that's how we generally see it done",
    "start": "2951460",
    "end": "2958260"
  },
  {
    "text": "what happens when you add an index do old items get re-indexed so that refers",
    "start": "2959680",
    "end": "2965380"
  },
  {
    "text": "to a sorry I didn't mention that question so it doesn't refer to it we don't currently have online indexing",
    "start": "2965380",
    "end": "2970480"
  },
  {
    "text": "available for dynamodb so when you create an index you have to create it at the time of table creation we don't have",
    "start": "2970480",
    "end": "2976359"
  },
  {
    "text": "online indexing yet so that is something when we announced that feature that we we would definitely be bringing out and",
    "start": "2976359",
    "end": "2982300"
  },
  {
    "text": "that promise is is still being developed and and will be will be delivered",
    "start": "2982300",
    "end": "2988000"
  },
  {
    "text": "I don't have a timeline on that though uh what happens if you go over the 10",
    "start": "2988000",
    "end": "2993160"
  },
  {
    "text": "gig limit per partition now just to be very clear that is only for an item",
    "start": "2993160",
    "end": "2998560"
  },
  {
    "text": "collection and only applicable if you have local secondary indexes and it is per hash key it's not a limit per",
    "start": "2998560",
    "end": "3005220"
  },
  {
    "text": "partition it's a limit per hash key so it's extremely high and I think we've seen it hit once or twice only",
    "start": "3005220",
    "end": "3012119"
  },
  {
    "text": "um basically you'll get a warning um you'll get a you'll get an error message come back to tell you that you've hit that limit uh it's it's quite",
    "start": "3012119",
    "end": "3019560"
  },
  {
    "text": "well documented um eventually after a certain point you won't be able to write to that you will",
    "start": "3019560",
    "end": "3025260"
  },
  {
    "text": "be able you will be able to remove items that take you over that limit and of course that if you remove them from the",
    "start": "3025260",
    "end": "3031380"
  },
  {
    "text": "quartet at the base table they'll flow through and be removed from the index as well so you'll you can reduce quite",
    "start": "3031380",
    "end": "3036420"
  },
  {
    "text": "quickly can you summarize the benefit of using dynamodb versus relational databases",
    "start": "3036420",
    "end": "3043319"
  },
  {
    "text": "um really I think nosql in general is a subset of relational with one difference",
    "start": "3043319",
    "end": "3048420"
  },
  {
    "text": "it scales uh to a very extreme levels and that's because it's simpler simpler",
    "start": "3048420",
    "end": "3054599"
  },
  {
    "text": "use cases and non-relational of course it doesn't have relations so tables are independent when would you use that you",
    "start": "3054599",
    "end": "3060660"
  },
  {
    "text": "would use that we're seeing more and more often these days the question being asked when would you",
    "start": "3060660",
    "end": "3066240"
  },
  {
    "text": "not use it so you wouldn't use nosql or dynamodb in particular if you have the",
    "start": "3066240",
    "end": "3073319"
  },
  {
    "text": "need for a lot of complex transactions that go across tables a very traditional complex data model in a relational",
    "start": "3073319",
    "end": "3079680"
  },
  {
    "text": "database having said that we do have things like the transaction library that facilitate that but in general we look",
    "start": "3079680",
    "end": "3087180"
  },
  {
    "text": "at individual use cases and we encourage you to break down the access patterns of each relational over the years has",
    "start": "3087180",
    "end": "3093420"
  },
  {
    "text": "enabled us to be kind of lazy and we just throw new use cases in it and let it run and if it's not fast we create",
    "start": "3093420",
    "end": "3099119"
  },
  {
    "text": "some indexes and worst case we do some denormalization or some read replicas or shouting but when you put peel back what",
    "start": "3099119",
    "end": "3108599"
  },
  {
    "text": "is underneath there and you look at the use case look at the access patterns and model those that modeling exercise is",
    "start": "3108599",
    "end": "3114059"
  },
  {
    "text": "independent of any database and that's why we encourage it as a best practice so once you do that and you and you have",
    "start": "3114059",
    "end": "3121500"
  },
  {
    "text": "a design that matches your your access pattern you'll be able to see where it where it sits best whether it's",
    "start": "3121500",
    "end": "3126900"
  },
  {
    "text": "relational or not um",
    "start": "3126900",
    "end": "3133760"
  },
  {
    "text": "how should one model many-to-many relationships when designing for scale",
    "start": "3134640",
    "end": "3140040"
  },
  {
    "text": "okay so probably two answers to that one is if you can denormalize as far as you",
    "start": "3140040",
    "end": "3145980"
  },
  {
    "text": "can assuming you can't then you basically have three tables so if you",
    "start": "3145980",
    "end": "3151140"
  },
  {
    "text": "have two tables that have many too many then you have a table in the middle you know in a similar way that that you",
    "start": "3151140",
    "end": "3156180"
  },
  {
    "text": "would for a relational it's it's not it's not really it's not really",
    "start": "3156180",
    "end": "3162480"
  },
  {
    "text": "possible to to take that out of the design if that's needed by the use case and so you can still Implement that you",
    "start": "3162480",
    "end": "3170700"
  },
  {
    "text": "know you can put a full ER diagram you can model that directly into dynamodb and that'll work fine it just instead of",
    "start": "3170700",
    "end": "3177660"
  },
  {
    "text": "the foreign Keys applying within the database you need to do those intersections and interactions within",
    "start": "3177660",
    "end": "3183180"
  },
  {
    "text": "the application but the model itself can sit there fine now one thing I mentioned",
    "start": "3183180",
    "end": "3188339"
  },
  {
    "text": "in the in the presentation was that uh to avoid like you normalize if you",
    "start": "3188339",
    "end": "3194520"
  },
  {
    "text": "can but don't worry if you can't for low scale so if you've got a high scale",
    "start": "3194520",
    "end": "3199619"
  },
  {
    "text": "access pattern that has many to many I would say let's get deeper into that let's get deeper into what are the",
    "start": "3199619",
    "end": "3205740"
  },
  {
    "text": "patterns themselves and model those and what you'll probably find is the many to many",
    "start": "3205740",
    "end": "3210960"
  },
  {
    "text": "um goes away fairly quickly you would still you may still model that through say three tables if you're talking two",
    "start": "3210960",
    "end": "3217079"
  },
  {
    "text": "tables with that many Community relationship however the high scale stuff is what you want to do is is",
    "start": "3217079",
    "end": "3223319"
  },
  {
    "text": "concentrate that more on one table so you have less fetch less transformation and lower payload smaller payloads",
    "start": "3223319",
    "end": "3231079"
  },
  {
    "text": "uh let me see can you please explain the impact of the",
    "start": "3233720",
    "end": "3239460"
  },
  {
    "text": "customer application when attempted use exceeds provision capacity okay a good question so if you're using the SDK",
    "start": "3239460",
    "end": "3246420"
  },
  {
    "text": "which we always recommend the SDK has built-in retry So In traditional databases we're used to the idea of",
    "start": "3246420",
    "end": "3252780"
  },
  {
    "text": "things being queued up and then processed whenever so we see the weight queue you know that's what weight states",
    "start": "3252780",
    "end": "3258180"
  },
  {
    "text": "are in relational and then the queue building up behind it dynamodb doesn't have that inherently in its desire but",
    "start": "3258180",
    "end": "3264839"
  },
  {
    "text": "what it does it builds it into the SDK and this is basically retry with exponential back off so you can actually",
    "start": "3264839",
    "end": "3271559"
  },
  {
    "text": "interact with the parameters and change that as well so after that has expired after all those back offs and those",
    "start": "3271559",
    "end": "3278700"
  },
  {
    "text": "retries have expired you will get an error you can error saying the transaction failed until that point",
    "start": "3278700",
    "end": "3284540"
  },
  {
    "text": "dynamodb will what's called throttling so we encourage you to look at your throttling uh your Cloud watch metrics",
    "start": "3284540",
    "end": "3291420"
  },
  {
    "text": "for throttling and that will tell you because you may not see errors because the retries capturing that retrying and",
    "start": "3291420",
    "end": "3296760"
  },
  {
    "text": "then at some point succeeding before time's up before it retries out and so watch for throttling if you're getting",
    "start": "3296760",
    "end": "3302940"
  },
  {
    "text": "throttling under the limit under when you you think your provision well above your usage then that's that's a case of",
    "start": "3302940",
    "end": "3310020"
  },
  {
    "text": "looking at the design a little more you may have you may just have very spiky workloads which are hard to you know",
    "start": "3310020",
    "end": "3315480"
  },
  {
    "text": "they're impossible really if you've got just hot items that come in as a function of your workload you know that",
    "start": "3315480",
    "end": "3320760"
  },
  {
    "text": "item sits on one thing and one disk in whatever format that disk is um",
    "start": "3320760",
    "end": "3326220"
  },
  {
    "text": "so yeah that's kind of the experience most of most of the time you'll see kind of elevator client latency and",
    "start": "3326220",
    "end": "3331260"
  },
  {
    "text": "throttling come through if you can't uh have that latency then you know you need to",
    "start": "3331260",
    "end": "3336660"
  },
  {
    "text": "um obviously increase your throughput above that to make that go away or accommodate those failures in another",
    "start": "3336660",
    "end": "3341940"
  },
  {
    "text": "way within the app",
    "start": "3341940",
    "end": "3345558"
  },
  {
    "text": "I think we're getting close to uh",
    "start": "3347099",
    "end": "3351740"
  },
  {
    "text": "time I have one more uh if the schema has a table schema for dynamodb fixed um no it's a it's sparse schema so schema",
    "start": "3352140",
    "end": "3359220"
  },
  {
    "text": "is the only thing that affects is really the primary key and that's a hash always and possibly a hash plus range",
    "start": "3359220",
    "end": "3366200"
  },
  {
    "text": "so that's what we",
    "start": "3366200",
    "end": "3369920"
  }
]