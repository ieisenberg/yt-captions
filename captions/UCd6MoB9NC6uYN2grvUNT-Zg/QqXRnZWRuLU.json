[
  {
    "start": "0",
    "end": "178000"
  },
  {
    "text": "hello everyone welcome back we are here again with season 1 of database Deep",
    "start": "359",
    "end": "5600"
  },
  {
    "text": "dive uh We've made it up here to episode 8 now so show is still going strong um",
    "start": "5600",
    "end": "11120"
  },
  {
    "text": "I'm joined today by an amazing guest Mohan but I'll have him introduce himself in a second uh for those of you",
    "start": "11120",
    "end": "16600"
  },
  {
    "text": "who are just tuning in for the first time my name is Nick Walsh and I am a uh",
    "start": "16600",
    "end": "21800"
  },
  {
    "text": "technical evangelist here on the team at AWS and uh I'm here helping to bring this awesome show to life every week oh",
    "start": "21800",
    "end": "28400"
  },
  {
    "text": "we have some audio issues in the chat so uh someone says we have double audio and someone else says that there is no audio",
    "start": "28400",
    "end": "35079"
  },
  {
    "text": "um Chad can you help us okay so uh is the double audio any better right now or",
    "start": "35079",
    "end": "41120"
  },
  {
    "text": "is it worse we have two mics going so trying to okay it's good now so I'll try",
    "start": "41120",
    "end": "46160"
  },
  {
    "text": "to uh speak over into this mic to to try and reduce that so okay cool thank you",
    "start": "46160",
    "end": "51199"
  },
  {
    "text": "chat debugging at its finest PA programming right exactly awesome real",
    "start": "51199",
    "end": "56960"
  },
  {
    "text": "time everything real time real time applications real time debugging exactly real solutions perfect so thank you for",
    "start": "56960",
    "end": "62480"
  },
  {
    "text": "that ID Thief over in the chat so uh yeah again season 1 episode 8 uh today",
    "start": "62480",
    "end": "68520"
  },
  {
    "text": "topic of discussion is going to be reddis and Amazon elasticache yeah yeah",
    "start": "68520",
    "end": "73720"
  },
  {
    "text": "so before we get into that yeah why don't you introduce yourself tell everyone uh why you are the expert that everyone is excited to have on the show",
    "start": "73720",
    "end": "79960"
  },
  {
    "text": "correct uh yeah the expert yes uh good afternoon everyone uh my name is moan",
    "start": "79960",
    "end": "85920"
  },
  {
    "text": "I'm a senior manager in Amazon anas cash team I've been with uh with Amazon for",
    "start": "85920",
    "end": "91439"
  },
  {
    "text": "last 7 years and uh last two years with the elastic cash team and uh Happy",
    "start": "91439",
    "end": "97000"
  },
  {
    "text": "meeting nick uh today and hopefully he's not going to throw some cold balls at me",
    "start": "97000",
    "end": "102240"
  },
  {
    "text": "um so not me the chat though so you got to watch out for chat yeah exactly I'm waiting for it though so um so U the",
    "start": "102240",
    "end": "110640"
  },
  {
    "text": "redis uh and elastic cash uh we have been um in AWS portfolio for last 10",
    "start": "110640",
    "end": "117280"
  },
  {
    "text": "years or so and red has been uh in the open source Community for quite a long",
    "start": "117280",
    "end": "122719"
  },
  {
    "text": "time and my goal today is to talk to you about uh realtime applications and how",
    "start": "122719",
    "end": "128879"
  },
  {
    "text": "you can build them using lus and in particular on elastic cash platform so",
    "start": "128879",
    "end": "134280"
  },
  {
    "text": "that's the goal for today uh hopefully we spend you know next hour uh talking",
    "start": "134280",
    "end": "139760"
  },
  {
    "text": "about RIS and showing some sample code for you and uh and then uh if you have any questions happy to answer as well",
    "start": "139760",
    "end": "146640"
  },
  {
    "text": "okay awesome so happy to be here yeah yeah no we're all excited we we love here on database deep dive",
    "start": "146640",
    "end": "152040"
  },
  {
    "text": "being able to bring in the Resident experts um couldn't think of anyone better for for red l c than you and I",
    "start": "152040",
    "end": "157640"
  },
  {
    "text": "know people are going to come into the chat and have you know specific questions for their use case or or uh",
    "start": "157640",
    "end": "162760"
  },
  {
    "text": "questions along the way so we'll work together to be able to get those anwers got it got it yeah all right sounds good so I heard you have a bit of a",
    "start": "162760",
    "end": "168800"
  },
  {
    "text": "presentation and some stuff we want to walk through does that sound good yes yes uh I have a presentation uh so I'm going to start",
    "start": "168800",
    "end": "175599"
  },
  {
    "text": "with uh the presentation right now and so um so many of you know uh what realtime",
    "start": "175599",
    "end": "184360"
  },
  {
    "start": "178000",
    "end": "178000"
  },
  {
    "text": "applications are uh realtime applications um uh you know uh are the",
    "start": "184360",
    "end": "189920"
  },
  {
    "text": "ones where you know like ride hailing you know media streaming and social apps",
    "start": "189920",
    "end": "195120"
  },
  {
    "text": "uh leaderboards and all of these applications um you know typically consumed by millions of users terabytes",
    "start": "195120",
    "end": "202480"
  },
  {
    "text": "of data um the the primary requirement would be that you need very high",
    "start": "202480",
    "end": "208319"
  },
  {
    "text": "throughput and uh low latency and um you're talking about typically millions",
    "start": "208319",
    "end": "214879"
  },
  {
    "text": "and millions of transactions um uh per second uh and it's consumed from variety",
    "start": "214879",
    "end": "221360"
  },
  {
    "text": "of form factors like mobile devices iot devices and things like that and so the idea is that you know what what type of",
    "start": "221360",
    "end": "229799"
  },
  {
    "text": "data store is useful for you uh if you have requirements like this and so um",
    "start": "229799",
    "end": "236519"
  },
  {
    "text": "and also one of the things that developers look for when they're building these realtime applications is",
    "start": "236519",
    "end": "241840"
  },
  {
    "text": "that they don't want to learn a new uh API um they want to learn uh they want",
    "start": "241840",
    "end": "247560"
  },
  {
    "text": "to use something that's in open source and something they're familiar with and something that uh they use it in their",
    "start": "247560",
    "end": "254400"
  },
  {
    "text": "code on day-to-day basis uh and so something that is very close to that is very uh you know apt for uh realtime",
    "start": "254400",
    "end": "261799"
  },
  {
    "text": "applications uh and so I'm going to talk about reddis um so before we get into Redd specifically so uh every week we've",
    "start": "261800",
    "end": "269120"
  },
  {
    "text": "gone through a different um a different database offering uh and and broadly the basically like the the the problem that",
    "start": "269120",
    "end": "276199"
  },
  {
    "text": "is addressed that is faced by developers on the wild that that solution was purpose built for right and so with",
    "start": "276199",
    "end": "281360"
  },
  {
    "text": "caching in general like everyone a lot of the themes of previous episodes have been okay well how do I access data in a",
    "start": "281360",
    "end": "287320"
  },
  {
    "text": "really intuitive way with like Neptune for a graph database or um how do I you know have to develop my schema for a",
    "start": "287320",
    "end": "294160"
  },
  {
    "text": "relational database or uh so on and so forth and there have been you know iterative improvements for how you can",
    "start": "294160",
    "end": "299720"
  },
  {
    "text": "improve usage and access but I think the big thing with caching is that it is fundamentally uh like a speed require a",
    "start": "299720",
    "end": "305600"
  },
  {
    "text": "speed up requirement that you cannot get with on the sub database like tuning level right yeah exactly okay so I'm",
    "start": "305600",
    "end": "311280"
  },
  {
    "text": "going to talk about caching uh particularly uh there are variety of use cases where R uh can be used and",
    "start": "311280",
    "end": "317800"
  },
  {
    "text": "customers use it in variety of scenarios as well uh but I'm particularly going to talk about caching and uh some ways you",
    "start": "317800",
    "end": "324160"
  },
  {
    "text": "can actually uh build a cache in front of your data store and accelerate your quaries and so will talk about that",
    "start": "324160",
    "end": "330440"
  },
  {
    "text": "sweet and we're going to talk about how reticent last the cash make that exactly exactly um with that said um I'm",
    "start": "330440",
    "end": "338240"
  },
  {
    "start": "338000",
    "end": "338000"
  },
  {
    "text": "assuming many of you know what redus is but if you don't know redus is a key",
    "start": "338240",
    "end": "343600"
  },
  {
    "text": "value data store uh it's it's in memory data store uh and then and the idea is",
    "start": "343600",
    "end": "350080"
  },
  {
    "text": "that you know it's stored in the memory so that you can actually have better throughput and high throughput and low",
    "start": "350080",
    "end": "356080"
  },
  {
    "text": "latency that's the idea behind it and it has been uh uh there in the market for",
    "start": "356080",
    "end": "361160"
  },
  {
    "text": "last eight years plus and uh it has evolved over the time uh and",
    "start": "361160",
    "end": "367840"
  },
  {
    "text": "um if you know stack Overflow which is one of the uh communities where developers spend a lot of time uh redus",
    "start": "367840",
    "end": "374960"
  },
  {
    "text": "is the most LED database for three years in a row number one most loved database for three years in a row and uh if you",
    "start": "374960",
    "end": "381680"
  },
  {
    "text": "look at database ranking in terms of for how it ranks among other data stores it's number seven so it's really loud by",
    "start": "381680",
    "end": "388960"
  },
  {
    "text": "Developers I maybe you're going to get into this a little bit why would you say it's so loved right like I know everyone it's like oh hey I can store my data and",
    "start": "388960",
    "end": "395280"
  },
  {
    "text": "just access it even faster like no one would say no to that right um are there particular things that you think make it",
    "start": "395280",
    "end": "400319"
  },
  {
    "text": "really lovable what either through like developer experience or how easy it is to set up and build like what are those",
    "start": "400319",
    "end": "406039"
  },
  {
    "text": "things you want to talk about like a little later on um I will talk about it but uh in net um as a developer for me",
    "start": "406039",
    "end": "413360"
  },
  {
    "text": "um the most important thing for me is you know uh when I'm writing cord uh I",
    "start": "413360",
    "end": "419879"
  },
  {
    "text": "would like to use apis and interfaces that are very close to the way I write my code I don't like I use in my code uh",
    "start": "419879",
    "end": "428639"
  },
  {
    "text": "when I'm writing applications like realtime applications I use certain data structures right and it's easy for me to",
    "start": "428639",
    "end": "435919"
  },
  {
    "text": "have a data store that I can use with similar data structures so like sorted sets list strings and hashes and that",
    "start": "435919",
    "end": "443560"
  },
  {
    "text": "kind of stuff and so red actually has very rich set of data structures that's one of the reasons why developers l",
    "start": "443560",
    "end": "450240"
  },
  {
    "text": "and then the second reason why people love it is that uh it's open source and also most importantly you know provides",
    "start": "450240",
    "end": "457360"
  },
  {
    "text": "you that high throughput right uh and low latency and you don't have to sort",
    "start": "457360",
    "end": "462560"
  },
  {
    "text": "of uh do quite a few things typically you have to do with other data stor to achieve the same level of performance",
    "start": "462560",
    "end": "469240"
  },
  {
    "text": "and so that's where developers are happy about this awesome I mean I don't think anyone would say to an intuitive developer experience where data",
    "start": "469240",
    "end": "475840"
  },
  {
    "text": "structures you're already natively writing in so that you don't have to learn as much how to make your workflow",
    "start": "475840",
    "end": "481720"
  },
  {
    "text": "work with the tool for example right it's like a cleaner hand off and then second is just the performance and I think we're going to see a lot about",
    "start": "481720",
    "end": "487400"
  },
  {
    "text": "that um very soon from from your slides yeah I have a few slides actually to talk about that uh with that said um uh",
    "start": "487400",
    "end": "496000"
  },
  {
    "text": "let me introduce reddis to you um and uh the very first thing to talk about is I talked about high performance high",
    "start": "496000",
    "end": "502240"
  },
  {
    "text": "throughput and uh low latency several times so um it's obvious it's open",
    "start": "502240",
    "end": "508240"
  },
  {
    "text": "source um uh it's highly available it's built for",
    "start": "508240",
    "end": "514440"
  },
  {
    "text": "applications uh looking to get high availability uh meaning that uh redis",
    "start": "514440",
    "end": "519800"
  },
  {
    "text": "has the concept of uh Masters and replicas and so you can have you know",
    "start": "519800",
    "end": "525600"
  },
  {
    "text": "your master used for reads and writes and you have replicas that uh can U",
    "start": "525600",
    "end": "531720"
  },
  {
    "text": "replicate data so that you can actually have significant number of your transactions going against these",
    "start": "531720",
    "end": "538040"
  },
  {
    "text": "replicas to achieve High throughput um and so and the other important thing is",
    "start": "538040",
    "end": "544399"
  },
  {
    "text": "that because you have master and replica uh with the same same data you can say",
    "start": "544399",
    "end": "549800"
  },
  {
    "text": "when Master fails you can fail over to replica and without losing any availability without having any impact",
    "start": "549800",
    "end": "556360"
  },
  {
    "text": "on availability so that's why redis is designed for highly available applications um also it has significant",
    "start": "556360",
    "end": "563480"
  },
  {
    "text": "number of data structures that you can use that I talked about you can you can also like sort of",
    "start": "563480",
    "end": "569560"
  },
  {
    "text": "take snapshots and uh let's say you want to save that data in that you have in the",
    "start": "569560",
    "end": "576720"
  },
  {
    "text": "uh in the IM memory uh instance and you can take a snapshot and you can restore",
    "start": "576720",
    "end": "582200"
  },
  {
    "text": "that at a later Point uh typically these are R theb files if you know what those are but you know and then and then you",
    "start": "582200",
    "end": "588480"
  },
  {
    "text": "can restore a new instance of redish from that data so you have wide variety of options with radis um uh and it has",
    "start": "588480",
    "end": "595680"
  },
  {
    "text": "transactions too um so so that's radish for you yeah and what drums out to me is",
    "start": "595680",
    "end": "601120"
  },
  {
    "text": "when you say fast you know fast is a very relative uh term but um fast with",
    "start": "601120",
    "end": "606480"
  },
  {
    "text": "response to 1 millisecond is orders of magnitude faster than what a database pulling from dis is going to give you",
    "start": "606480",
    "end": "611600"
  },
  {
    "text": "right right it's it's going to be significantly faster in fact we call that uh if you look at uh some of our",
    "start": "611600",
    "end": "618640"
  },
  {
    "text": "elastic Ash uh blocks and uh few of our documentation sites right we talk about",
    "start": "618640",
    "end": "625120"
  },
  {
    "text": "microsc is The New Normal not milliseconds right yeah so so so really",
    "start": "625120",
    "end": "630279"
  },
  {
    "text": "talking about a significant through put and some of our nodes today uh where we",
    "start": "630279",
    "end": "636120"
  },
  {
    "text": "specially tune reders for AWS uh and some of the instances like R5 we can get",
    "start": "636120",
    "end": "642480"
  },
  {
    "text": "up to 450,000 transactions per second on one single node wow and then if you",
    "start": "642480",
    "end": "648360"
  },
  {
    "text": "distribute your workload across multiple nodes you're talking about millions of transactions uh which is hard to achieve",
    "start": "648360",
    "end": "654920"
  },
  {
    "text": "on other data stores yeah and so I think you just introduced the concept of the open running and managing the open",
    "start": "654920",
    "end": "660959"
  },
  {
    "text": "source variant of reddis versus using um an AWS managed service for redis and so",
    "start": "660959",
    "end": "666720"
  },
  {
    "text": "like what are the like I know obviously it's more challenging to roll your own um but like what are the specific challenges that people that's exactly",
    "start": "666720",
    "end": "672880"
  },
  {
    "text": "I'm going to talk about oh okay wonderful great question um so now now",
    "start": "672880",
    "end": "678519"
  },
  {
    "start": "678000",
    "end": "678000"
  },
  {
    "text": "that you know what wrer says you can say look I can put this on ec2 and manage it for yourself and many of our customers",
    "start": "678519",
    "end": "686399"
  },
  {
    "text": "uh they they tried this too but if you really think about total cost of ownership you know when you're having",
    "start": "686399",
    "end": "693360"
  },
  {
    "text": "Rus or your workload on self-service ec2 uh it's difficult to manage why uh",
    "start": "693360",
    "end": "700920"
  },
  {
    "text": "you want to provision Hardware uh it's not and and you want to configure that in such way that it's it's really",
    "start": "700920",
    "end": "707760"
  },
  {
    "text": "optimized for your application you want to make sure it's compliant with",
    "start": "707760",
    "end": "713000"
  },
  {
    "text": "security so you want to patch the nodes and uh uh you know if you want to let's",
    "start": "713000",
    "end": "718040"
  },
  {
    "text": "say add more replicas or if you want to add more nodes it's hard for you to do it on your own so if you look at all the",
    "start": "718040",
    "end": "724440"
  },
  {
    "text": "things you have to do on on uh you know hosting yourself on ec2 your total cost",
    "start": "724440",
    "end": "730040"
  },
  {
    "text": "of ownership and sheer amount of work that you need to do significantly is higher and so that's where elastic cach",
    "start": "730040",
    "end": "736720"
  },
  {
    "text": "come to the picture right awesome with elastic cach just like uh our other",
    "start": "736720",
    "end": "742519"
  },
  {
    "text": "database Services we are fully managed meaning we are providing you a fully managed solution uh we we are tuning Rus",
    "start": "742519",
    "end": "750959"
  },
  {
    "text": "which is which is unique to elastic Ash for AWS instances what that means is",
    "start": "750959",
    "end": "756160"
  },
  {
    "text": "that for m5s and r5s which are the ones we introduced about uh uh almost like 10",
    "start": "756160",
    "end": "761760"
  },
  {
    "text": "months ago and we specially tuned redis for these instances um and what that",
    "start": "761760",
    "end": "767920"
  },
  {
    "text": "meant is that if you take open source lus and run it on R5 versus if you take",
    "start": "767920",
    "end": "773279"
  },
  {
    "text": "elastic cash this and run it on R5 you're going to have 80% incremental throughput exactly and and that's just a",
    "start": "773279",
    "end": "779399"
  },
  {
    "text": "fundamental tradeoff of building generalizable software right it's like when you want to build software that is applicable in a large number of",
    "start": "779399",
    "end": "785639"
  },
  {
    "text": "environments uh building that compatibility in means that you can't both also specialize in making it ideal",
    "start": "785639",
    "end": "791560"
  },
  {
    "text": "for one Hardware configuration and so at AWS we're able to do that and essentially just get Bank more bank for",
    "start": "791560",
    "end": "797279"
  },
  {
    "text": "your buck for what would be the drop in replacement from from a syntax perspective exactly um for for reddis so",
    "start": "797279",
    "end": "803480"
  },
  {
    "text": "exactly exactly um like I said before you know you can get up to 450,000",
    "start": "803480",
    "end": "809120"
  },
  {
    "text": "transactions per second on a single node on a tuned elastic cash instance um also",
    "start": "809120",
    "end": "815040"
  },
  {
    "text": "fully managed uh obvious for many of our R Services we take care of you know",
    "start": "815040",
    "end": "820600"
  },
  {
    "text": "managing Hardware provisioning uh if you want to add uh new no new replicas you",
    "start": "820600",
    "end": "827199"
  },
  {
    "text": "know you can do it in online fashion you can just say I want to add new replicas we just do that for you uh you can add",
    "start": "827199",
    "end": "834360"
  },
  {
    "text": "new Masters meaning you can distribute your data multiple Masters uh all of that is online um uh and we also manage",
    "start": "834360",
    "end": "843279"
  },
  {
    "text": "um security for you we patch it as required um and most of the times",
    "start": "843279",
    "end": "848720"
  },
  {
    "text": "without any downtime um and if if you uh if you're using elastic cash in a uh",
    "start": "848720",
    "end": "856040"
  },
  {
    "text": "highly available configuration uh what we do is that if your mask goes down for variety of reasons auto fail we auto",
    "start": "856040",
    "end": "862920"
  },
  {
    "text": "fail over and so you don't have to do any of that stuff and so uh you will not have any availability impact um",
    "start": "862920",
    "end": "869600"
  },
  {
    "text": "and most importantly for big Enterprises um and the compliance certifications are",
    "start": "869600",
    "end": "876320"
  },
  {
    "text": "very important like fedra PCI hea we have achieved all of those complete you",
    "start": "876320",
    "end": "881600"
  },
  {
    "text": "know complain certifications and so we manage according to you know each of these compliance uh regimes and you",
    "start": "881600",
    "end": "888440"
  },
  {
    "text": "don't have to take care of any of this yeah and uh I was going to say but you brought it up with with fully managed uh",
    "start": "888440",
    "end": "894279"
  },
  {
    "text": "system anytime you're working with with data um being able to guarantee that those security patches are automatically",
    "start": "894279",
    "end": "900000"
  },
  {
    "text": "applied it's just a huge like benefit like both peace of mind that you don't have to worry about uh you know waking",
    "start": "900000",
    "end": "906000"
  },
  {
    "text": "your devops engineer up in the middle of the night your servers but also uh having to make sure that you are a",
    "start": "906000",
    "end": "911639"
  },
  {
    "text": "leading expert and have to think about that like with a managed service you get to inherit that that expertise from AWS",
    "start": "911639",
    "end": "918759"
  },
  {
    "text": "folks exactly exactly um and iing on the cake is that it's still open open source",
    "start": "918759",
    "end": "924720"
  },
  {
    "text": "compatible so we are not breaking any compatibility so and then we also have every time we have a new version of Rus",
    "start": "924720",
    "end": "931560"
  },
  {
    "text": "we make it available really really fast to customers and So within few weeks and so you don't have to wait too long for",
    "start": "931560",
    "end": "938600"
  },
  {
    "text": "uh for having the new version and you can continue to get all that value you get with open source and and you don't",
    "start": "938600",
    "end": "945519"
  },
  {
    "text": "have to worry about anything set it and forget so easy wonderful so you have me sold um real time data please use cash",
    "start": "945519",
    "end": "953160"
  },
  {
    "text": "reddis elastic cash um but what does this look like out in the wild do you have examples or maybe can we walk",
    "start": "953160",
    "end": "958399"
  },
  {
    "text": "through a use cas of how setting the up would look like exactly um so what I'm",
    "start": "958399",
    "end": "963440"
  },
  {
    "text": "going to run through today is um set of scenarios uh use cases where redis is",
    "start": "963440",
    "end": "969800"
  },
  {
    "text": "used and uh I will talk about some of the sample code also and then explain",
    "start": "969800",
    "end": "976440"
  },
  {
    "text": "why it is used in which way and then some of patterns I would say uh and then obviously there is uh tons of",
    "start": "976440",
    "end": "982800"
  },
  {
    "text": "documentation out there uh regarding elastic cach and then you can just uh go research on a specific topic and then",
    "start": "982800",
    "end": "988959"
  },
  {
    "text": "then you'll have um you know enough documentation for it to launch Something Beautiful let's get into it then all",
    "start": "988959",
    "end": "995120"
  },
  {
    "text": "right so talking about realtime examples right realtime application examples as you know uh you know these applications",
    "start": "995120",
    "end": "1003079"
  },
  {
    "text": "they fall into multiple categories of use cases Uh u in in our own customer",
    "start": "1003079",
    "end": "1008759"
  },
  {
    "text": "base uh caching is um uh is something that's widely used um in terms of",
    "start": "1008759",
    "end": "1015800"
  },
  {
    "start": "1011000",
    "end": "1011000"
  },
  {
    "text": "leveraging Rus um leader boards is another great use case that customers",
    "start": "1015800",
    "end": "1021160"
  },
  {
    "text": "use significantly today um session Stores um and I'll talk about each one",
    "start": "1021160",
    "end": "1026760"
  },
  {
    "text": "of them um uh a little bit more details later but uh leaderboards you know real",
    "start": "1026760",
    "end": "1032720"
  },
  {
    "text": "time analytics and uh geospatial analysis and variety of use cases uh",
    "start": "1032720",
    "end": "1038160"
  },
  {
    "text": "where redis is used uh so let me talk about each one of them um let's start with cashing which you asked me a",
    "start": "1038160",
    "end": "1044319"
  },
  {
    "text": "question before yeah um so so the the",
    "start": "1044319",
    "end": "1049360"
  },
  {
    "text": "the idea here is that you want to accelerate your applications um and you",
    "start": "1049360",
    "end": "1054400"
  },
  {
    "text": "have uh high throughput and low latency needs and typically when you start",
    "start": "1054400",
    "end": "1060640"
  },
  {
    "text": "writing your application or when you're in when you're designing your stack you're picking a data store for a reason",
    "start": "1060640",
    "end": "1067080"
  },
  {
    "text": "and you're picking the data store because the way you organize the data uh typically you can say look you know my",
    "start": "1067080",
    "end": "1073200"
  },
  {
    "text": "data is sort of has uh several entities that I want to connect closely uh you",
    "start": "1073200",
    "end": "1079120"
  },
  {
    "text": "know like you know like the employees addresses and things like that and you might choose to say you know I want to",
    "start": "1079120",
    "end": "1084520"
  },
  {
    "text": "have this in a relational data store um and then what happens is that your realtime application is consuming that",
    "start": "1084520",
    "end": "1090360"
  },
  {
    "text": "data store all of a sudden you have traffic spikes and so now what do you do you need to scale them now when you",
    "start": "1090360",
    "end": "1096640"
  },
  {
    "text": "scale them typically you scale them two different way two different ways one is you have instance based me basically",
    "start": "1096640",
    "end": "1103440"
  },
  {
    "text": "you're going to go add another instance which is cost all right for you",
    "start": "1103440",
    "end": "1109480"
  },
  {
    "text": "um the other way you do that is that if you if you're using an application like Dynamo where you're using Pay As a go",
    "start": "1109480",
    "end": "1116880"
  },
  {
    "text": "and then you are having more transactions on it because of the needs that you have in the application and then also it's not cost effective that",
    "start": "1116880",
    "end": "1123360"
  },
  {
    "text": "way uh what you can do is you can actually take redus put it in front of these data stores in conjunction with",
    "start": "1123360",
    "end": "1130360"
  },
  {
    "text": "those data stores accelerate your C accelerate your transactions and at the same time um it's cost effective for you",
    "start": "1130360",
    "end": "1136960"
  },
  {
    "text": "as well and so that that that's where caching is used significantly so um",
    "start": "1136960",
    "end": "1142679"
  },
  {
    "text": "let's talk about um a sample topology where you know redus is in front of uh a",
    "start": "1142679",
    "end": "1149280"
  },
  {
    "start": "1143000",
    "end": "1143000"
  },
  {
    "text": "data store uh so what you have here is you know RDS is used for storing your",
    "start": "1149280",
    "end": "1156000"
  },
  {
    "text": "data uh or again for this is confusing some people who have never uh seen it together because people always pronounce",
    "start": "1156000",
    "end": "1162480"
  },
  {
    "text": "acronyms in weird ways or different ways right um and so I I have personally like even before I was aware of any of this",
    "start": "1162480",
    "end": "1169000"
  },
  {
    "text": "was like oh is RDS and reddis the same thing Amazon RDS no again RDS Amazon RDS",
    "start": "1169000",
    "end": "1174200"
  },
  {
    "text": "is Amazon relational database Services uh that consists of like my or or Aurora",
    "start": "1174200",
    "end": "1180440"
  },
  {
    "text": "particularly uh so no reddis and RDS are not the same thing even if it sounds like you'd pronounce their acronyms the",
    "start": "1180440",
    "end": "1185720"
  },
  {
    "text": "same way that's a good catch odds and rtis you know um you know the pronunciation is kind of close um yeah",
    "start": "1185720",
    "end": "1192360"
  },
  {
    "text": "ODS is a relational data like Nick talked about and you can have um you know post crest my SQL compatible",
    "start": "1192360",
    "end": "1200600"
  },
  {
    "text": "relational data Stores um you can have even SQL servers articles whatnot Aurora",
    "start": "1200600",
    "end": "1206360"
  },
  {
    "text": "is our own relation data store as well but RDS and redis are different um redis",
    "start": "1206360",
    "end": "1211919"
  },
  {
    "text": "is um elastic cach redis is um is in memory data store you provision this",
    "start": "1211919",
    "end": "1218159"
  },
  {
    "text": "separately you know uh and you can launch your own clusters and all of that right so again an inmemory key value key",
    "start": "1218159",
    "end": "1224840"
  },
  {
    "text": "value data store exactly and you might also have heard about m MCD uh which is",
    "start": "1224840",
    "end": "1230600"
  },
  {
    "text": "another you know in memory data store that we offer in our portfolio uh but redis is lot more rich in terms of data",
    "start": "1230600",
    "end": "1237440"
  },
  {
    "text": "structures and um and uh it's designed for uh you know uh uh High availability",
    "start": "1237440",
    "end": "1244440"
  },
  {
    "text": "so a lot of people find RIS being more useful for their use cases um so going",
    "start": "1244440",
    "end": "1250760"
  },
  {
    "text": "back to the caching use case now you have your data store either in RDS which",
    "start": "1250760",
    "end": "1256240"
  },
  {
    "text": "is relational data store and Dynamo DB which is a key value data store but with infinite scale the idea is that you know",
    "start": "1256240",
    "end": "1263080"
  },
  {
    "text": "you have a client application um you know you know fronted with load",
    "start": "1263080",
    "end": "1268280"
  },
  {
    "text": "balancing and the idea is that you know suddenly traffic spikes and uh it's not",
    "start": "1268280",
    "end": "1275400"
  },
  {
    "text": "cost effective for the reasons that I explained yeah and so to go specifically into why that's not cost effective right",
    "start": "1275400",
    "end": "1281120"
  },
  {
    "text": "like you explained before in the Dynamo world it's like it's per transaction corre um and in the other world you have",
    "start": "1281120",
    "end": "1286400"
  },
  {
    "text": "to manage your connection pool and if you either blow up your connection pool and it's completely flooded and you can't get connections to the database",
    "start": "1286400",
    "end": "1292200"
  },
  {
    "text": "and requests go unfulfilled correct um or you have to scale out to fulfill this sudden spike in traffic correct correct",
    "start": "1292200",
    "end": "1298240"
  },
  {
    "text": "so those are the two reasons and also most importantly uh the performance",
    "start": "1298240",
    "end": "1303440"
  },
  {
    "text": "characteristics of this data stores are also very different obviously for a good reason and you if you organize the data",
    "start": "1303440",
    "end": "1310039"
  },
  {
    "text": "very well obviously it affects how you perform right so the different reasons why the characteristics are different",
    "start": "1310039",
    "end": "1315640"
  },
  {
    "text": "but redish has U you know in memory data store so that's why you're getting uh you know incremental throughput and low",
    "start": "1315640",
    "end": "1322200"
  },
  {
    "text": "latency and so what you do in this case is that um you build a cache and uh and",
    "start": "1322200",
    "end": "1329440"
  },
  {
    "text": "the way you build a cache is two ways and so this is sample code that you're seeing on the screen um so there are two",
    "start": "1329440",
    "end": "1335919"
  },
  {
    "text": "ways to build the cash one is write through what that means is that you know when you're uh writing some piece of",
    "start": "1335919",
    "end": "1343000"
  },
  {
    "text": "data to a data store you would say I'm writing to the data store as well as you're writing to the cash at the same",
    "start": "1343000",
    "end": "1349240"
  },
  {
    "text": "time what that means is that every time you read that data uh you're always going to find that in the cache and it's",
    "start": "1349240",
    "end": "1355320"
  },
  {
    "text": "going to be you know uh you're not going to go to the data store anymore you're always uh available in cash yeah I think",
    "start": "1355320",
    "end": "1362240"
  },
  {
    "text": "this will make a great for a great diagram I don't know how well it will come through but I'm trying to get some eyes here so I think there's three",
    "start": "1362240",
    "end": "1367400"
  },
  {
    "text": "entities here right so we have the client yeah this is this is box number one yeah",
    "start": "1367400",
    "end": "1374039"
  },
  {
    "text": "then we're going to have our cash y so this is going to be either",
    "start": "1374039",
    "end": "1379279"
  },
  {
    "text": "and this this font I know is going to be pretty small so I'm sorry the picture before but yeah so we're going to have",
    "start": "1379279",
    "end": "1385159"
  },
  {
    "text": "our cach here in the middle and then we have our DV which is over here and so we're describing the first scenario",
    "start": "1385159",
    "end": "1391720"
  },
  {
    "text": "which is going to be right through right so",
    "start": "1391720",
    "end": "1397320"
  },
  {
    "text": "um right through we'll do this in green I'm sorry I know Green is probably not",
    "start": "1397360",
    "end": "1402960"
  },
  {
    "text": "going to show up well at all maybe because of the white back actually here let's go let's go to live video okay",
    "start": "1402960",
    "end": "1408760"
  },
  {
    "text": "this is so much easier to see great so we're going to describe right through first right so you said that we're",
    "start": "1408760",
    "end": "1414799"
  },
  {
    "text": "always going to instantly hit the cash in a write through scenario right so let's say client has some piece of data that you want to write yeah so what you",
    "start": "1414799",
    "end": "1421080"
  },
  {
    "text": "do is that you write to DB as well as to the cash okay so that's called Write through okay and so how does that happen",
    "start": "1421080",
    "end": "1427279"
  },
  {
    "text": "does that's not two separate calls that's one call that writes uh to the cash and then that also goes there like",
    "start": "1427279",
    "end": "1434720"
  },
  {
    "text": "how does that work so uh today customers do both ways uh some customers write it from the application itself which is",
    "start": "1434720",
    "end": "1440559"
  },
  {
    "text": "client they say I'm writing to the data store I'm also writing to RS okay yeah so two calls right okay so yeah um and",
    "start": "1440559",
    "end": "1450360"
  },
  {
    "text": "some customers actually what they do is that you know they write to the cash and from cash they have a stream that's",
    "start": "1450360",
    "end": "1456760"
  },
  {
    "text": "going to the data store they also do that but many of the customers actually do this they right to this for right",
    "start": "1456760",
    "end": "1462799"
  },
  {
    "text": "through great and then the idea behind this is that you know when you're reading this data from cash always going",
    "start": "1462799",
    "end": "1468840"
  },
  {
    "text": "to have 100% cash ratio right because you're always going to find it in cash yes and so and it's scaled distributed",
    "start": "1468840",
    "end": "1475919"
  },
  {
    "text": "and so you're going to have that uh significant uh you know throughput from cash yes so that's and that's right",
    "start": "1475919",
    "end": "1482840"
  },
  {
    "text": "through that's right through okay the second uh way of uh spinning up the cash",
    "start": "1482840",
    "end": "1488159"
  },
  {
    "text": "is uh what we call Lazy loading okay uh so what that means is that uh you have a",
    "start": "1488159",
    "end": "1493840"
  },
  {
    "text": "data store data store has you know uh you know significant amount of dat data",
    "start": "1493840",
    "end": "1499200"
  },
  {
    "text": "but you know you might have only uh part of that data that you want um uh that to",
    "start": "1499200",
    "end": "1505799"
  },
  {
    "text": "be hot and part of the data to be it's cold you're not going to read that as much and so in which case there is no",
    "start": "1505799",
    "end": "1511880"
  },
  {
    "text": "point putting all of the data in the cach exactly so what you do is that you say hey very first time somebody if",
    "start": "1511880",
    "end": "1518240"
  },
  {
    "text": "application wants to read the data so you go and say hey cash do you have my data M uh so you make a call and say yep",
    "start": "1518240",
    "end": "1526480"
  },
  {
    "text": "so lazy loading yeah and so so you you go to cash and say hey",
    "start": "1526480",
    "end": "1534000"
  },
  {
    "text": "do I have my my piece of data right and cash says no I don't have it right dat",
    "start": "1534000",
    "end": "1539760"
  },
  {
    "text": "there yeah and then it says I don't have it so then you read from data Store and put it in the",
    "start": "1539760",
    "end": "1545880"
  },
  {
    "text": "Cash correct and then the cash still returns to the and then anywhere afterwards you",
    "start": "1545880",
    "end": "1553360"
  },
  {
    "text": "read that data it's always going to be in the cash but if if application is not",
    "start": "1553360",
    "end": "1558640"
  },
  {
    "text": "reading piece of data called it's still in the data store you're not you know over utilizing putting everything in the",
    "start": "1558640",
    "end": "1565360"
  },
  {
    "text": "cash yeah and and there's reasons why you wouldn't want to just put everything in the cache right like because in theory it's like oh it's so much faster",
    "start": "1565360",
    "end": "1571559"
  },
  {
    "text": "oh it's just a key value access right so why would we not throw that all there um could you explain a little bit about how",
    "start": "1571559",
    "end": "1577399"
  },
  {
    "text": "while memory is much more efficient like how does the cost compare to the equivalent like database sort of",
    "start": "1577399",
    "end": "1582520"
  },
  {
    "text": "structure that runs from on disk right like how do those compare yeah so uh it",
    "start": "1582520",
    "end": "1587919"
  },
  {
    "text": "it first from uh your data storage system to data storage",
    "start": "1587919",
    "end": "1593080"
  },
  {
    "text": "system uh typically in any uh uh you",
    "start": "1593080",
    "end": "1598399"
  },
  {
    "text": "know envir outward environments right reading it from memory means that your data is already read through your I",
    "start": "1598399",
    "end": "1604760"
  },
  {
    "text": "whatever and put it into the memory so reading it from the memory is really fast compared to going to the desk and",
    "start": "1604760",
    "end": "1610840"
  },
  {
    "text": "reading it from the desk now the disk um uh the the type of discs you are",
    "start": "1610840",
    "end": "1617440"
  },
  {
    "text": "available and we BM and ssds they are evolving as well but still reading it",
    "start": "1617440",
    "end": "1622600"
  },
  {
    "text": "from the memory is still way faster than reading it from the disc and that's why you see that performance",
    "start": "1622600",
    "end": "1627919"
  },
  {
    "text": "differentiation yeah and so another thing with uh and I don't know if you're getting into this with best practices for for uh caches is um like there is a",
    "start": "1627919",
    "end": "1636919"
  },
  {
    "text": "performance reason why you don't want to just throw a huge data set into your key value store right like how how do how",
    "start": "1636919",
    "end": "1643000"
  },
  {
    "text": "does how does the size of your cash even though it's key Value Store how does that impact the performance of your",
    "start": "1643000",
    "end": "1648399"
  },
  {
    "text": "caching calls yeah so um as such the size of the cache doesn't impact the",
    "start": "1648399",
    "end": "1654679"
  },
  {
    "text": "performance uh but the nature of all the data in the memory means that you have a",
    "start": "1654679",
    "end": "1661120"
  },
  {
    "text": "memory limit on a node right exactly so you can't load more than what you have on the Node and so you you know and and",
    "start": "1661120",
    "end": "1669799"
  },
  {
    "text": "and the nodes we provide today and AWS platform or you know you have significant amount of memory available",
    "start": "1669799",
    "end": "1675480"
  },
  {
    "text": "and so you you know typically you don't run into case where I can't fit this in the memory if you have a need like that",
    "start": "1675480",
    "end": "1682559"
  },
  {
    "text": "you can also distribute that across multiple nodes and that's where Red is has uh you know the concept of a cluster",
    "start": "1682559",
    "end": "1689000"
  },
  {
    "text": "where you can say my data can be distributed across multiple uh nodes and",
    "start": "1689000",
    "end": "1695080"
  },
  {
    "text": "which means that you can store like today we support up to 250 nodes wow uh",
    "start": "1695080",
    "end": "1700640"
  },
  {
    "text": "which means that if you take our um largest instance size largest instance size we're talking about terabytes and",
    "start": "1700640",
    "end": "1706039"
  },
  {
    "text": "terabytes of data wow okay and then you have that all in memory all that memory so in reality data size is not a limit",
    "start": "1706039",
    "end": "1712360"
  },
  {
    "text": "for customers that are looking to do caching right now correct correct and so there are other things that which I'm going to talk about um when you are in",
    "start": "1712360",
    "end": "1719480"
  },
  {
    "text": "the caching scenario which I can show you in the slide actually true",
    "start": "1719480",
    "end": "1725039"
  },
  {
    "text": "um so so some of the things that you want to pay attention to when you when",
    "start": "1725039",
    "end": "1730640"
  },
  {
    "start": "1729000",
    "end": "1729000"
  },
  {
    "text": "you're writing your application and if you're using uh caching pattern is that uh and and by the way elastic cache we",
    "start": "1730640",
    "end": "1738159"
  },
  {
    "text": "we uh publish several metrics uh about your workload how um um how radus is",
    "start": "1738159",
    "end": "1747640"
  },
  {
    "text": "actually running your workload and so in this particular use case caching use case the things that you want to look at",
    "start": "1747640",
    "end": "1753880"
  },
  {
    "text": "are cash misses and cash hits obviously your cash ratio has to be high then",
    "start": "1753880",
    "end": "1759919"
  },
  {
    "text": "you know then your performance is going to be as expected right so if you don't have a key in the cash obviously it's a",
    "start": "1759919",
    "end": "1766600"
  },
  {
    "text": "cash Miss yes and so this is where these patterns uh are important if you feel like your entire data set is hard you",
    "start": "1766600",
    "end": "1773480"
  },
  {
    "text": "want to keep that in the memory if you feel like look there is a cold data and there is hot data you want to use lazy",
    "start": "1773480",
    "end": "1779320"
  },
  {
    "text": "loading and load it appropriately so that's one way so that's one thing that you want to look at Cash misses and cash",
    "start": "1779320",
    "end": "1785159"
  },
  {
    "text": "heads um then there is the concept of uh freeable memory meaning that you know",
    "start": "1785159",
    "end": "1791120"
  },
  {
    "text": "your cash is consuming x amount of memory and then there is this much of uh",
    "start": "1791120",
    "end": "1796480"
  },
  {
    "text": "memory available for you so if you want to let's say add more data into the cache you can look at them and say do I",
    "start": "1796480",
    "end": "1802159"
  },
  {
    "text": "have enough space for me to add MH uh so that's Al that also helps you um then",
    "start": "1802159",
    "end": "1807399"
  },
  {
    "text": "there is the concept of reclaimed data meaning that you can say uh you have",
    "start": "1807399",
    "end": "1812440"
  },
  {
    "text": "certain set of keys uh key is a very fundamental concept you can say this is the name uh let's say location is the",
    "start": "1812440",
    "end": "1818960"
  },
  {
    "text": "key and you could say value could be Seattle or you know Los Angeles um you",
    "start": "1818960",
    "end": "1824480"
  },
  {
    "text": "can say on this key there is an expiration and um redis what redis does it for you is",
    "start": "1824480",
    "end": "1830600"
  },
  {
    "text": "that you know when there is expiration time it just takes the key out from the memory right so you can also manage your",
    "start": "1830600",
    "end": "1837559"
  },
  {
    "text": "hot and cold data that way uh and also ensuring that the data that you have is",
    "start": "1837559",
    "end": "1842919"
  },
  {
    "text": "is up to dat right yeah and so essentially what you're describing is uh broadly the concept of of your cash",
    "start": "1842919",
    "end": "1849159"
  },
  {
    "text": "policy correct right uh the cash policy again is uh the rules by which data will",
    "start": "1849159",
    "end": "1854559"
  },
  {
    "text": "be either uh I forget the exact term but uh in put into the cash and then I know",
    "start": "1854559",
    "end": "1859600"
  },
  {
    "text": "the other term for getting them out of there is evicting them from the cash right eviction eviction yeah and so uh",
    "start": "1859600",
    "end": "1865279"
  },
  {
    "text": "let's say you have a fixed cache size and that could be for a number of reasons right um based on what your architecture is your cost requirement or",
    "start": "1865279",
    "end": "1871480"
  },
  {
    "text": "just your your data access pattern right let's assume that you know based on your traffic you only have a certain amount of data that will be hot um or that you",
    "start": "1871480",
    "end": "1878320"
  },
  {
    "text": "know you have a predictable pattern for it uh there's no sense in keeping data that you know will be cold even if it's not cold yet right so um essentially",
    "start": "1878320",
    "end": "1885880"
  },
  {
    "text": "these are all examples of being able to visualize the the cash policy um and is",
    "start": "1885880",
    "end": "1891159"
  },
  {
    "text": "there a way to tweak that specifically like I know lru is a very common cash least recently used right so once it",
    "start": "1891159",
    "end": "1897600"
  },
  {
    "text": "becomes cold once it becomes the least recently used one pop that one and evict it yeah yeah yeah yeah so R is uh",
    "start": "1897600",
    "end": "1904080"
  },
  {
    "text": "natively supports uh different ways of ating so lru is the default one",
    "start": "1904080",
    "end": "1909559"
  },
  {
    "text": "basically the default one is that if you have any keys that are expired or set",
    "start": "1909559",
    "end": "1914600"
  },
  {
    "text": "with an expiration uh the default policy is when there is memory pressure it's going",
    "start": "1914600",
    "end": "1920440"
  },
  {
    "text": "to say it's going to go through all those keys and say what are the least recently used keys and then take them out you can also set and say you know",
    "start": "1920440",
    "end": "1927720"
  },
  {
    "text": "what irrespec of the expiration set on this Keys you can just go through the entire keys and say anything that least",
    "start": "1927720",
    "end": "1934720"
  },
  {
    "text": "recently used can also be evicted so there are variety of like five or six different types of uh um you know",
    "start": "1934720",
    "end": "1941799"
  },
  {
    "text": "eviction algorithms available and uh and customers use it widely to manage the",
    "start": "1941799",
    "end": "1948200"
  },
  {
    "text": "the the the expiration date essentially you know is on a you know on a per item",
    "start": "1948200",
    "end": "1953480"
  },
  {
    "text": "basis essentially it's guarantee right even if things new things aren't being pushed into your uh cach you can",
    "start": "1953480",
    "end": "1958880"
  },
  {
    "text": "guarantee that it will no longer be there Beyond a certain time correct which is which is uh important in",
    "start": "1958880",
    "end": "1964519"
  },
  {
    "text": "another use case I'm going to talk about session stores where these sessions are actually valid for a certain amount of",
    "start": "1964519",
    "end": "1969919"
  },
  {
    "text": "time and I mean even if you have like an I don't I don't know if I'm you know like jumping the gun here but like you have an auto scaling red cluster and you",
    "start": "1969919",
    "end": "1976840"
  },
  {
    "text": "know you don't want to have to worry about that scaling you just want to know that like okay I I'm happy to scale this",
    "start": "1976840",
    "end": "1982320"
  },
  {
    "text": "up as much as needed for my customers but then I can also guarantee that all of the data that I put into there has an",
    "start": "1982320",
    "end": "1987799"
  },
  {
    "text": "expiration date and I don't have to worry about uh you know like these these vague Concepts or things that you have to like test essentially you know that",
    "start": "1987799",
    "end": "1994440"
  },
  {
    "text": "there is that hard limit for expiration that it will then hopefully scale back down for exactly exactly um right on",
    "start": "1994440",
    "end": "2000880"
  },
  {
    "text": "money um so okay so let's move on to the um you know other use cases right yeah",
    "start": "2000880",
    "end": "2008000"
  },
  {
    "text": "yeah uh one quick question actually from the stream um so milky way7 Galaxy is",
    "start": "2008000",
    "end": "2013279"
  },
  {
    "text": "asking a little bit about what we were talking about before hi Milky Way yeah so uh why is uh redis uh redus and elasa",
    "start": "2013279",
    "end": "2020519"
  },
  {
    "text": "cache uh can they cash pedabytes of data they missed it so I think this is in reference to the conversation we were saying before with how um redis caches",
    "start": "2020519",
    "end": "2028080"
  },
  {
    "text": "data in memory and then we can have a cluster with redis um and can you can you talk to basically the instance types",
    "start": "2028080",
    "end": "2034039"
  },
  {
    "text": "and how they play in in the cluster and basically how that scales the size of of the data store you can have in redus",
    "start": "2034039",
    "end": "2040480"
  },
  {
    "text": "yeah so uh I believe the question is the capacity you know how does capacity",
    "start": "2040480",
    "end": "2046320"
  },
  {
    "text": "spanning and and what yeah yeah so so the way it works is that you know when you have uh your data uh like I said all",
    "start": "2046320",
    "end": "2055200"
  },
  {
    "text": "the data is stored in the memory now you can say uh you can pick an instance",
    "start": "2055200",
    "end": "2060878"
  },
  {
    "text": "today if you pick a largest instance today let's say R5 instance right and you can store you know significant",
    "start": "2060879",
    "end": "2067720"
  },
  {
    "text": "amount of data uh and you can say I want to have a cluster of X number of nodes",
    "start": "2067720",
    "end": "2076040"
  },
  {
    "text": "and spread your data across all these nodes now if you that's what I was talking we have a 250 nodes limit today",
    "start": "2076040",
    "end": "2082440"
  },
  {
    "text": "which is like a soft limit but uh you can have 250 nodes of your largest side",
    "start": "2082440",
    "end": "2088280"
  },
  {
    "text": "R5 and that's what I was talking about 170 tabes of data uh you can have in one",
    "start": "2088280",
    "end": "2093520"
  },
  {
    "text": "cluster right now now the question is can't can't you scale even further sure",
    "start": "2093520",
    "end": "2099839"
  },
  {
    "text": "is that the question right oh I mean it was just generally uh like they had mentioned maybe on the tail end of our conversation that it could get to that",
    "start": "2099839",
    "end": "2105839"
  },
  {
    "text": "size and they were probably wondering how so I guess really the only limit then is as long as your total size is",
    "start": "2105839",
    "end": "2110880"
  },
  {
    "text": "within 170 terabytes and um obviously I guess like let's imagine a scenario",
    "start": "2110880",
    "end": "2116119"
  },
  {
    "text": "where you have like some obnoxiously long value right like as long as you had yeah you could fit uh that that key in",
    "start": "2116119",
    "end": "2121800"
  },
  {
    "text": "that value for one object on a single node with as large as it can be which is like not a realistic scenario",
    "start": "2121800",
    "end": "2129240"
  },
  {
    "text": "um so reality your upper is just the maximum size of the cluster which is",
    "start": "2129240",
    "end": "2134400"
  },
  {
    "text": "170 correct cool and the way um um that may be the in the question as well is",
    "start": "2134400",
    "end": "2139960"
  },
  {
    "text": "that you know if you're consuming that data you know in a cluster you can say",
    "start": "2139960",
    "end": "2145720"
  },
  {
    "text": "you know uh the there are clients return uh actually for open source clients available for you for the cluster mod R",
    "start": "2145720",
    "end": "2153319"
  },
  {
    "text": "is and then you can actually use these clients to read the data from any of these nodes and uh you know they're",
    "start": "2153319",
    "end": "2161839"
  },
  {
    "text": "specially tuned uh so that it can operate in that mode and you don't have to really know there's one end point you",
    "start": "2161839",
    "end": "2167440"
  },
  {
    "text": "can say I want to get this data from here and you can get it right okay yeah so that was a personal question I had with respect to when you scale out the",
    "start": "2167440",
    "end": "2173599"
  },
  {
    "text": "cluster uh you know like where is the master where is like the end point or the entry point to interacting with the cluster um and is this where having like",
    "start": "2173599",
    "end": "2180560"
  },
  {
    "text": "a multimaster is is significant or uh particularly in a point more pointed question Seattle Fox 7 asks in a cluster",
    "start": "2180560",
    "end": "2188480"
  },
  {
    "text": "does a key need to be fit on a single node so actually I guess that's like more of my previous like crazy scenario",
    "start": "2188480",
    "end": "2194680"
  },
  {
    "text": "where you have a key with a value that could exceed the size of a single node right that's just like I don't know",
    "start": "2194680",
    "end": "2200520"
  },
  {
    "text": "could you think of examples where that happens so yeah I mean this question comes up too which is very rare in the",
    "start": "2200520",
    "end": "2206359"
  },
  {
    "text": "case that you can have a key today a key can only exist in one node it can't span",
    "start": "2206359",
    "end": "2213119"
  },
  {
    "text": "across multiple nodes okay and so the idea is that if you have a key and have value for that key uh that can't fit in",
    "start": "2213119",
    "end": "2221079"
  },
  {
    "text": "one node that means you're not designing your application well you don't want to have so much data it almost like you're",
    "start": "2221079",
    "end": "2227800"
  },
  {
    "text": "putting a database as the value for a given key exactly it's very rare cases actually that is appropriate but many of",
    "start": "2227800",
    "end": "2235200"
  },
  {
    "text": "the cases what you really want to do is that you want to design the you know keys in such a way that it's granular",
    "start": "2235200",
    "end": "2241960"
  },
  {
    "text": "enough for your application uh and you could read it really in a way that you",
    "start": "2241960",
    "end": "2247119"
  },
  {
    "text": "get that hide through Bo yeah so this actually like schema designed for no sequel keys and St Keys we had an",
    "start": "2247119",
    "end": "2252839"
  },
  {
    "text": "amazing episode I think it was uh maybe our second with Rick holahan uh from the uh Dynamo team so all of the things he",
    "start": "2252839",
    "end": "2260200"
  },
  {
    "text": "spoke about with with uh like sort key and index key design all apply here then I guess as well right for it's all key",
    "start": "2260200",
    "end": "2266720"
  },
  {
    "text": "value no SQL esque Tye type format yeah so if you're if you're interested in schema design for um you know for for",
    "start": "2266720",
    "end": "2273599"
  },
  {
    "text": "redus or or or other nosql applications definitely check out episode or Rick hulahan talk from reinvent awesome um",
    "start": "2273599",
    "end": "2280280"
  },
  {
    "text": "it's on it's on YouTube uh it's always pleasure to to talk with him he's he's amazing yeah yeah yeah so we've got some",
    "start": "2280280",
    "end": "2287560"
  },
  {
    "text": "more use cases uh do you want to go through I have more use cases I'm pumped about red I want to see where people are using it out in the wild yeah so another",
    "start": "2287560",
    "end": "2294119"
  },
  {
    "text": "uh uh use case uh that is widely used by our customers is uh session store",
    "start": "2294119",
    "end": "2299760"
  },
  {
    "text": "session store is uh like we just talked about it before um you know typically if",
    "start": "2299760",
    "end": "2305440"
  },
  {
    "text": "you have an application right let's say you have an application that's like website or whatever uh and if you are",
    "start": "2305440",
    "end": "2311640"
  },
  {
    "text": "setting that up in an autoscaling group right so your application code is uh",
    "start": "2311640",
    "end": "2316760"
  },
  {
    "text": "running on different noes you don't know where it is running now you authenticate authorize",
    "start": "2316760",
    "end": "2322760"
  },
  {
    "text": "your users and you have a session establish a session with some time period right and so now you want to",
    "start": "2322760",
    "end": "2328440"
  },
  {
    "text": "store that uh without having to lose that state you want to keep that session alive in respect of where your",
    "start": "2328440",
    "end": "2333960"
  },
  {
    "text": "application is running and so what you can do is that you can spin up a redish instance uh and you can say you know uh",
    "start": "2333960",
    "end": "2342040"
  },
  {
    "text": "which I have the code here uh let's say you have a pH PHP application this is pseudo code not exact code but U you can",
    "start": "2342040",
    "end": "2349160"
  },
  {
    "start": "2343000",
    "end": "2343000"
  },
  {
    "text": "say you know here is the session and I'm going to save there is only one endpoint",
    "start": "2349160",
    "end": "2355400"
  },
  {
    "text": "cluster discover endpoint and you can say hey look you know uh I would like to have this data available um as a session",
    "start": "2355400",
    "end": "2363200"
  },
  {
    "text": "in that store and I want this to be persistent and I would like this to to be you know some s level of time or or",
    "start": "2363200",
    "end": "2369760"
  },
  {
    "text": "whatnot for that end point so but your session State uh is stored on redis and",
    "start": "2369760",
    "end": "2376040"
  },
  {
    "text": "available to you wherever your application uh is running in respect of where it is running yeah so with respect",
    "start": "2376040",
    "end": "2382040"
  },
  {
    "text": "to like and again correct me because this is my interpretation of this Cod snpp right here this does a lot of",
    "start": "2382040",
    "end": "2387200"
  },
  {
    "text": "things that could be really complex under the hood but like right out of the box so first is you're hitting an end point for the cluster that is persistent",
    "start": "2387200",
    "end": "2393920"
  },
  {
    "text": "regardless of the size or where that that key lives on the on the cluster correct that's amazing to begin with we",
    "start": "2393920",
    "end": "2399440"
  },
  {
    "text": "just had the data API released for um for Aurora I think so that that was super powerful similar concept here uh",
    "start": "2399440",
    "end": "2406079"
  },
  {
    "text": "you're defining in a certain way the the uh eviction policy also because you're defining the timeout here correct um the",
    "start": "2406079",
    "end": "2412880"
  },
  {
    "text": "the read timeout as as well well the timeouts I have is sort of you know more",
    "start": "2412880",
    "end": "2418119"
  },
  {
    "text": "like it's a connection timeout because if if you're establishing connection you're saying look you know I I don't",
    "start": "2418119",
    "end": "2423599"
  },
  {
    "text": "want to spend more than 2 seconds to establishing connection um and another time out is for basically when you're",
    "start": "2423599",
    "end": "2429319"
  },
  {
    "text": "reading you don't want to spend too much time okay so that's the time outs but not necessarily for the session the",
    "start": "2429319",
    "end": "2434440"
  },
  {
    "text": "session session use case is that when you start writing session data you can say on this just like keys and",
    "start": "2434440",
    "end": "2440319"
  },
  {
    "text": "expiration that we talked about before you can say for this particular key you know here is the expiration right and",
    "start": "2440319",
    "end": "2446839"
  },
  {
    "text": "then your session only leaves for that long no matter where your application is running and once again this is very",
    "start": "2446839",
    "end": "2452760"
  },
  {
    "text": "popular use case particularly for applications running in ut scaling groups okay awesome yeah and then",
    "start": "2452760",
    "end": "2459160"
  },
  {
    "text": "persistent is number of I guess like the minimum or like the scale down basically want the connections to be connection to",
    "start": "2459160",
    "end": "2464800"
  },
  {
    "text": "be persistent that's what oh so that that's binary that's Z one okay cool yeah um and then U the other use case",
    "start": "2464800",
    "end": "2472960"
  },
  {
    "text": "that's emerging um um is uh analytics use case and the idea here is that uh",
    "start": "2472960",
    "end": "2480119"
  },
  {
    "text": "today we have Kinesis which is a streaming platform today and customers use Kinesis they stream data and and",
    "start": "2480119",
    "end": "2487400"
  },
  {
    "text": "then they have something that is consuming that data and doing something with that typically analytics is one of",
    "start": "2487400",
    "end": "2492839"
  },
  {
    "text": "those use cases where you're you know taking data from the stream and provide analytics on that right and so the idea",
    "start": "2492839",
    "end": "2499839"
  },
  {
    "text": "behind this is that you know streaming typically is very nicy you know you the data is coming from iot devices data is",
    "start": "2499839",
    "end": "2507359"
  },
  {
    "text": "coming from mobile devices you don't have enough time to do any processing",
    "start": "2507359",
    "end": "2513040"
  },
  {
    "text": "there you're streaming it really fast to a platform like Kinesis so so now the idea behind this is that now let's",
    "start": "2513040",
    "end": "2519839"
  },
  {
    "start": "2519000",
    "end": "2519000"
  },
  {
    "text": "assume in this case what you're seeing in the screen is that you know there are two different use cases here one is you",
    "start": "2519839",
    "end": "2525280"
  },
  {
    "text": "have Kinesis data that's coming from your application and you have a Lambda function that is consuming your stream",
    "start": "2525280",
    "end": "2532119"
  },
  {
    "text": "and then now you have a use case here where you know my application that actually is interested in um um",
    "start": "2532119",
    "end": "2539559"
  },
  {
    "text": "analyzing this data uh may not need exactly all the data that is that is in the Stream right and also you might",
    "start": "2539559",
    "end": "2547200"
  },
  {
    "text": "having Ed Case where some of that data needs to be rained somewhere else and so you can actually use redic and say I'm",
    "start": "2547200",
    "end": "2553520"
  },
  {
    "text": "going to take the data Lambda function can read the data from the stream put the data that is absolutely required for",
    "start": "2553520",
    "end": "2559920"
  },
  {
    "text": "analytical purposes in RIS and then your application actually uses radis for",
    "start": "2559920",
    "end": "2565599"
  },
  {
    "text": "analysis um and then you take the data that's required to be retained and you write it to the data St directly so",
    "start": "2565599",
    "end": "2572400"
  },
  {
    "text": "that's the use case here um and so you still you are getting very uh",
    "start": "2572400",
    "end": "2577720"
  },
  {
    "text": "um an analytics um application running with uh really fast and without any",
    "start": "2577720",
    "end": "2584480"
  },
  {
    "text": "performance cups of reading data from the stream and at the same time you're retaining data right uh appropriate to",
    "start": "2584480",
    "end": "2590599"
  },
  {
    "text": "your your application and and again uh you know you have this Lambda here that auto scales to like that that works so",
    "start": "2590599",
    "end": "2597200"
  },
  {
    "text": "well kesis data stream because you don't have to think about the scaling you just know that okay for each uh data or event",
    "start": "2597200",
    "end": "2603200"
  },
  {
    "text": "in my data stream spin up a Lambda and then you get to write all the custom code to determine well what am I going to consider hot data what am I going to",
    "start": "2603200",
    "end": "2609400"
  },
  {
    "text": "consider cold data and then you you know pipe that to elastic cash or or Dynamo exactly and then um the Second Use case",
    "start": "2609400",
    "end": "2617200"
  },
  {
    "text": "is very similar to that in this case slightly different as you can see the data is coming through Kinesis stream",
    "start": "2617200",
    "end": "2623400"
  },
  {
    "start": "2619000",
    "end": "2619000"
  },
  {
    "text": "and then Lambda function is still consuming that data but then what you're really using it here is that you're",
    "start": "2623400",
    "end": "2629599"
  },
  {
    "text": "taking that nicey data and you're actually processing it within the reddis why reddis is useful because you have",
    "start": "2629599",
    "end": "2636240"
  },
  {
    "text": "all this data structure and that is like sorted sets lists hyper log logs and several Rich data structures which can",
    "start": "2636240",
    "end": "2643640"
  },
  {
    "text": "be used to aggregate data dup and and clean the data pretty much so this is",
    "start": "2643640",
    "end": "2650160"
  },
  {
    "text": "sometimes like the part of um like ETL right processing jobs and so the the",
    "start": "2650160",
    "end": "2655520"
  },
  {
    "text": "beauty of this here is that like instead of throwing all your noisy data directly into your database and then telling your",
    "start": "2655520",
    "end": "2661200"
  },
  {
    "text": "you know data engineer like hey deal with that later your data scientist like yeah you worried about cleaning it you can actually have this as part of your",
    "start": "2661200",
    "end": "2666599"
  },
  {
    "text": "pipeline and it's not that hard toble to clean up lambas directly with with yeah",
    "start": "2666599",
    "end": "2673920"
  },
  {
    "text": "particularly like I said the data structures you have like sorted set for example you know you can dup stuff from",
    "start": "2673920",
    "end": "2679839"
  },
  {
    "text": "that you can sort the data and then you can send it to another kesis stream that can be consumed which is more clean",
    "start": "2679839",
    "end": "2685960"
  },
  {
    "text": "version of the data and then analytics application would be lot more you know uh perform uh performs well in that mode",
    "start": "2685960",
    "end": "2694160"
  },
  {
    "text": "uh dealing with the data that it requires then you know again spending time to clean the data exactly on the",
    "start": "2694160",
    "end": "2699480"
  },
  {
    "text": "application CU it's like once if you don't clean it then and there directly through using redis you're putting it",
    "start": "2699480",
    "end": "2704720"
  },
  {
    "text": "into let's say another data store like a database like like I don't know Dynamo or whatever uh and then you then have to",
    "start": "2704720",
    "end": "2711079"
  },
  {
    "text": "still call it back out and it's like kicking the can down the road right it's if you have to clean it eventually and",
    "start": "2711079",
    "end": "2716359"
  },
  {
    "text": "you know that that noise is really just that it's just noise you might as well clean it as efficiently as possible directly off of the data Stream So that",
    "start": "2716359",
    "end": "2723119"
  },
  {
    "text": "you fix the problem as far Upstream as possible correct exactly um now iing on the cake is that uh let's",
    "start": "2723119",
    "end": "2731400"
  },
  {
    "start": "2730000",
    "end": "2730000"
  },
  {
    "text": "say uh here is the use case where let's say all your data the most critical data",
    "start": "2731400",
    "end": "2736920"
  },
  {
    "text": "you need for analysis uh is in redit solve for Vari of reasons um now you can",
    "start": "2736920",
    "end": "2743520"
  },
  {
    "text": "say look instead of using kesis right I want to stream data to my red instance",
    "start": "2743520",
    "end": "2749680"
  },
  {
    "text": "how do you do that there is a data type called stream data type within R itself wow so it's basically built uh B based",
    "start": "2749680",
    "end": "2757240"
  },
  {
    "text": "on radic uh tree basically it's it's optimized for range queries um and then",
    "start": "2757240",
    "end": "2762839"
  },
  {
    "text": "the idea behind that is it's almost like a list so you push and pop from it um and so uh you can have uh Publishers",
    "start": "2762839",
    "end": "2771119"
  },
  {
    "text": "writing stream uh and you have consumers who can consume the data from it uh and",
    "start": "2771119",
    "end": "2776440"
  },
  {
    "text": "so um some sample code here um it's simple for you to add you just say x add",
    "start": "2776440",
    "end": "2783240"
  },
  {
    "start": "2778000",
    "end": "2778000"
  },
  {
    "text": "and you can add a stream in this case example I have is that you have you're tracking device locations uh let's say",
    "start": "2783240",
    "end": "2789680"
  },
  {
    "text": "from iot devices you can say here is the ID for the device here is the lat Longs",
    "start": "2789680",
    "end": "2795440"
  },
  {
    "text": "but I righty so this is uh you know like quite literally going to be like if you have a GPS sensor and it's moving you",
    "start": "2795440",
    "end": "2802440"
  },
  {
    "text": "you know the time that you added the data to the to the redest data stream you want to know what device it is and the ID and then latitude longitude and",
    "start": "2802440",
    "end": "2809079"
  },
  {
    "text": "like once you set this up you have essentially a persistent stream uh for for that data correct exactly great so",
    "start": "2809079",
    "end": "2815280"
  },
  {
    "text": "you add that and then um there is a sequence number that is generated for each of the unique items",
    "start": "2815280",
    "end": "2821520"
  },
  {
    "text": "you add in the Stream by default you don't have to do anything it just generates one or you can have your own",
    "start": "2821520",
    "end": "2826880"
  },
  {
    "text": "but idea is that it generates one you use it and then if you want to read it you read it from the stream very simple",
    "start": "2826880",
    "end": "2833800"
  },
  {
    "text": "you can just say just give me the last last last piece of data that got added or you can say give me the specific one",
    "start": "2833800",
    "end": "2839800"
  },
  {
    "text": "and you get the data from the stream yeah and so consumers just need to know the ID of the stream on reddis to be a",
    "start": "2839800",
    "end": "2845160"
  },
  {
    "text": "to subscribe to it and the data in whatever fashion that they want correct uh in typical use case where you do is",
    "start": "2845160",
    "end": "2851599"
  },
  {
    "text": "that you're reading the last one from the stream so that's pretty simple you especially with real time applications where you want that data to be turned",
    "start": "2851599",
    "end": "2857800"
  },
  {
    "text": "around as quick as possible you're not waiting having the super efficient data store and then like still holding off and doing batch exactly usually exactly",
    "start": "2857800",
    "end": "2864920"
  },
  {
    "text": "and and then the other extension to that is that um you know in certain use cases",
    "start": "2864920",
    "end": "2870599"
  },
  {
    "text": "where the stream is coming and the processing of that stream has to be",
    "start": "2870599",
    "end": "2875960"
  },
  {
    "text": "distributed between multiple different things right like let's say you know part of that data needs to be uh handled",
    "start": "2875960",
    "end": "2882839"
  },
  {
    "text": "by one piece of cod another you know part of the data needs to be another piece of cod so there is this concept of",
    "start": "2882839",
    "end": "2889640"
  },
  {
    "text": "consumer groups so you can say I'm defining consumer group and here is the range I'm going to process and another",
    "start": "2889640",
    "end": "2896000"
  },
  {
    "text": "consumer group process from that range and so you can also have flexibility in terms of how you process the data uh and",
    "start": "2896000",
    "end": "2902559"
  },
  {
    "text": "so the way you do that is you create a consumer group here uh it's X group create and I'm creating a group and I'm",
    "start": "2902559",
    "end": "2908839"
  },
  {
    "text": "saying by default I want to process everything from starting from index zero so in this case and then you know um and",
    "start": "2908839",
    "end": "2917119"
  },
  {
    "text": "then and then what you're doing is that hey I'm reading from that group right and all I'm saying is that give me the",
    "start": "2917119",
    "end": "2922160"
  },
  {
    "text": "latest one that's not delivered to any other consumer part of this group right mhm uh the same way uh you can say one",
    "start": "2922160",
    "end": "2930200"
  },
  {
    "text": "other thing that's very important in streaming uh data type is that all the data that you're streaming is in the",
    "start": "2930200",
    "end": "2936200"
  },
  {
    "text": "memory right yeah and so as I talked about you know you want to be managing how much",
    "start": "2936200",
    "end": "2942319"
  },
  {
    "text": "you're storing in the memory and so the idea is that you know if you acknowledge and say look you know I read this piece",
    "start": "2942319",
    "end": "2948480"
  },
  {
    "text": "of data already uh and that's how we you do it using XA um basically you're",
    "start": "2948480",
    "end": "2954280"
  },
  {
    "text": "acknowledging it once you do that that means that redis is going to go delete that item from the Stream So you you can",
    "start": "2954280",
    "end": "2961200"
  },
  {
    "text": "efficiently manage the memory you have for the stream awesome yeah so um that",
    "start": "2961200",
    "end": "2966960"
  },
  {
    "text": "stream data type and it's uh it got introduced from redis 5.0 which was released uh about 10 months ago and uh",
    "start": "2966960",
    "end": "2975880"
  },
  {
    "text": "uh many of customers use it today wonder I don't I can it's easy to see why right yeah exactly yeah H and once again we",
    "start": "2975880",
    "end": "2983240"
  },
  {
    "start": "2982000",
    "end": "2982000"
  },
  {
    "text": "have metrix um some of the intelligence that we provide to customers is uh you know how much memory you're reserving",
    "start": "2983240",
    "end": "2989720"
  },
  {
    "text": "you know on the Node which is you know to make it efficient what we say is that hey only use 75% of the memory don't use",
    "start": "2989720",
    "end": "2996200"
  },
  {
    "text": "25% % because redis has this concept of replicating data and you need additional",
    "start": "2996200",
    "end": "3002240"
  },
  {
    "text": "memory to process all of that and we want to make sure we're running the instance for in a way that you don't uh",
    "start": "3002240",
    "end": "3009400"
  },
  {
    "text": "have any problems of running out of memory so what we do is that we say hey our guidelines which you asked about",
    "start": "3009400",
    "end": "3016079"
  },
  {
    "text": "before is our guidelines is hey have 75% use use 75% of the memory and keep 25%",
    "start": "3016079",
    "end": "3022400"
  },
  {
    "text": "reserved for all the additional processing you have yeah for replicating data for I guess the other thing is",
    "start": "3022400",
    "end": "3027480"
  },
  {
    "text": "depending on how quickly you expect your um your workloads to spike you could",
    "start": "3027480",
    "end": "3033160"
  },
  {
    "text": "basically give yourself a designated buffer range before you tell the the cluster to scale up right corre or",
    "start": "3033160",
    "end": "3038480"
  },
  {
    "text": "introduce another node for example right so once again there there there is U um there are metrics for you and you can",
    "start": "3038480",
    "end": "3045280"
  },
  {
    "text": "say uh there is a metric that says which I don't have on the slide is called uh bytes um consumed by the cache so you",
    "start": "3045280",
    "end": "3052400"
  },
  {
    "text": "can say hey I want to keep up to uh let's say 75% of the data 70% of the",
    "start": "3052400",
    "end": "3058680"
  },
  {
    "text": "memory for my data you can say number of btes used by the cash is x amount and if",
    "start": "3058680",
    "end": "3064119"
  },
  {
    "text": "it is within the 75 percentage you're great you don't have to do anything but if it's going towards 70% you can say",
    "start": "3064119",
    "end": "3069839"
  },
  {
    "text": "look I want to add a new um you know I wanted to scale it you know scale it out",
    "start": "3069839",
    "end": "3075079"
  },
  {
    "text": "and I want to add a new node and distribute the data across multiple nodes you could do that easily and it's all online you don't have to take any",
    "start": "3075079",
    "end": "3082520"
  },
  {
    "text": "downtime for it it's online online you just come and say I want to add new uh master and we distribute keys for you",
    "start": "3082520",
    "end": "3089799"
  },
  {
    "text": "and uh without any downtime so yeah so uh okay no downtime no no downtime is",
    "start": "3089799",
    "end": "3095160"
  },
  {
    "text": "awesome uh to enable that auto scaling for for reddis cluster how do they do that Beyond like setting the parameters",
    "start": "3095160",
    "end": "3100520"
  },
  {
    "text": "for where scaling happens but like how how would a customer actually enable auto scaling for their so they have apis",
    "start": "3100520",
    "end": "3106280"
  },
  {
    "text": "which is our control plan they can they can call our apis or they can use uh you know cloud formation templates uh or",
    "start": "3106280",
    "end": "3114200"
  },
  {
    "text": "they can go to console you can go to any of these places and say I just want add one more node wonderful so oh so is uh",
    "start": "3114200",
    "end": "3121119"
  },
  {
    "text": "so the adding the node to the cluster is manual or is there Auto scaling uh so",
    "start": "3121119",
    "end": "3126200"
  },
  {
    "text": "it's online scaling it's not Autos scaling okay it's online scaling meaning that you know the application doesn't",
    "start": "3126200",
    "end": "3132839"
  },
  {
    "text": "have to take down time it can continue to access it and the data will be",
    "start": "3132839",
    "end": "3138280"
  },
  {
    "text": "distributed okay uh so that's what we call it online it is not autoscaled okay",
    "start": "3138280",
    "end": "3143640"
  },
  {
    "text": "so again the the the popular ways that people can do this like you just mentioned either an API call to increase the node size in your cluster um through",
    "start": "3143640",
    "end": "3150640"
  },
  {
    "text": "the console you can do that directly through the the elastic has Guy um or",
    "start": "3150640",
    "end": "3156280"
  },
  {
    "text": "over I guess like the sdks right apis sdks that you already cloud formation templates cloud or cloudformation",
    "start": "3156280",
    "end": "3161920"
  },
  {
    "text": "templates okay awesome any of those things right um great so um yeah so",
    "start": "3161920",
    "end": "3167319"
  },
  {
    "text": "that's uh uh that is streaming uh it's emerging uh use case uh in terms of real",
    "start": "3167319",
    "end": "3172400"
  },
  {
    "text": "time applications and then uh several other use cases too um geospatial is another use case uh",
    "start": "3172400",
    "end": "3180000"
  },
  {
    "start": "3174000",
    "end": "3174000"
  },
  {
    "text": "here is where you talked about Neptune right Neptune is tuned for sort of you",
    "start": "3180000",
    "end": "3185520"
  },
  {
    "text": "know quarrying about relationships and things like that and so now let's assume you have a use case where you want to",
    "start": "3185520",
    "end": "3191920"
  },
  {
    "text": "know at any given time your application shows what are the restaurants like by",
    "start": "3191920",
    "end": "3196960"
  },
  {
    "text": "my friends nearby me now you can go query that data in Neptune and say what",
    "start": "3196960",
    "end": "3202960"
  },
  {
    "text": "are the nearby what are the restaurants that like by my friends easy to do it in Neptune but now you want to say how many",
    "start": "3202960",
    "end": "3210760"
  },
  {
    "text": "of these restaurants are in the proximity where I am in and so that is geospatial right and so that type of",
    "start": "3210760",
    "end": "3216960"
  },
  {
    "text": "thing is it's it's hard to do in Neptune so what you can do is that you can take those",
    "start": "3216960",
    "end": "3222119"
  },
  {
    "text": "restaurants uh that liked by your friends and you put it in Rus and you run this command um um you know called",
    "start": "3222119",
    "end": "3230119"
  },
  {
    "start": "3228000",
    "end": "3228000"
  },
  {
    "text": "Geo radius and you say here is the list of restaurants here is my location I would like to get it in 10 mil range and",
    "start": "3230119",
    "end": "3237040"
  },
  {
    "text": "it just tells you what are the ones in 10 miles range wow um this is so interesting because it's like some there",
    "start": "3237040",
    "end": "3243319"
  },
  {
    "text": "are very few features where I look at a feature and say like hey I can imagine exactly who will use this or like an entire entire businesses and and",
    "start": "3243319",
    "end": "3249720"
  },
  {
    "text": "products that are built on top of this like anything like like Maps app applications uh you're looking for you",
    "start": "3249720",
    "end": "3256000"
  },
  {
    "text": "know food recommendations uh this is so core to that type of um to that",
    "start": "3256000",
    "end": "3261799"
  },
  {
    "text": "application that having that enabled as a feature of your data store rather than application code that you have to write",
    "start": "3261799",
    "end": "3268440"
  },
  {
    "text": "and knowing that it's going to be optimized for the data store like that that is so much of the heavy lifting pushed off onto the the the the tool",
    "start": "3268440",
    "end": "3275559"
  },
  {
    "text": "that you're using that's amazing and you're significantly saving time and you're spending more time on writing",
    "start": "3275559",
    "end": "3280760"
  },
  {
    "text": "something specific to your application in your company than than you know you know these these things obvious things",
    "start": "3280760",
    "end": "3286559"
  },
  {
    "text": "that we can power you and again like the whole thing with uh one of the largest value propositions is don't focus on",
    "start": "3286559",
    "end": "3293240"
  },
  {
    "text": "undifferentiated heavy lifting let AWS handle that right your application code and when there are enough developers out",
    "start": "3293240",
    "end": "3300400"
  },
  {
    "text": "in the wild that are writing these the same application code to be able to find entities within radius for that long of",
    "start": "3300400",
    "end": "3307760"
  },
  {
    "text": "X Y um eventually someone at redus was like hey we should throw this directly uh in our in our uh yeah in our",
    "start": "3307760",
    "end": "3314040"
  },
  {
    "text": "application code exactly so that's geospatial another interesting use case",
    "start": "3314040",
    "end": "3319240"
  },
  {
    "start": "3318000",
    "end": "3318000"
  },
  {
    "text": "more closer to uh uh you know uh pitch audience is lit boards and so you have",
    "start": "3319240",
    "end": "3326680"
  },
  {
    "text": "games and you know sales leaderboards game leaderboards and the idea behind this is that you know at any given time",
    "start": "3326680",
    "end": "3333319"
  },
  {
    "text": "you know you have leaders emerging and with some level of scores and you want",
    "start": "3333319",
    "end": "3339359"
  },
  {
    "text": "to know what the ranking is and so uh redish data structures are really tuned",
    "start": "3339359",
    "end": "3344760"
  },
  {
    "text": "for this and so there is a data structure called sorted sets so basically what you do is that in this",
    "start": "3344760",
    "end": "3350520"
  },
  {
    "start": "3347000",
    "end": "3347000"
  },
  {
    "text": "case um I'm adding four different users and their ranking and so so now how is",
    "start": "3350520",
    "end": "3357200"
  },
  {
    "text": "it useful now once I added to sorted set it's already sorted for you and you can just quy as simple as hey get me the um",
    "start": "3357200",
    "end": "3365039"
  },
  {
    "text": "uh you know uh uh the list of uh users uh in the reverse basically what I'm",
    "start": "3365039",
    "end": "3370880"
  },
  {
    "text": "saying is that who has the highest ranking and so what it does in these Cas is that look in this Derek is the",
    "start": "3370880",
    "end": "3377359"
  },
  {
    "text": "highest ranked based on the score and Barry and Andi and call so it's as",
    "start": "3377359",
    "end": "3382960"
  },
  {
    "text": "simple as that now let's say if you want to add um you know for call a new score",
    "start": "3382960",
    "end": "3388720"
  },
  {
    "text": "you just write for call here is the new score if it is already there it just over writes that if it's not there it",
    "start": "3388720",
    "end": "3395119"
  },
  {
    "text": "adds to the soter set and then again you query and say what's the new leaderboard ranking and you get new leaderboard",
    "start": "3395119",
    "end": "3400720"
  },
  {
    "text": "ranking now car is in the top so it's as simple as that many of our customers use it for leaderboards it's very wide very",
    "start": "3400720",
    "end": "3407960"
  },
  {
    "text": "popular among our customers yeah I'm genuinely surprised how many uh clear-cut use cases there are for what",
    "start": "3407960",
    "end": "3414520"
  },
  {
    "text": "are essentially features at the data store level level but are things again that are so widely required uh for for",
    "start": "3414520",
    "end": "3420319"
  },
  {
    "text": "processing your data and displaying it um yeah I just feel like I've never experienced that as much as I have with",
    "start": "3420319",
    "end": "3426079"
  },
  {
    "text": "with RIS in elastic cash year exactly yeah so once again leader boards is very popular use case um and then another one",
    "start": "3426079",
    "end": "3433039"
  },
  {
    "text": "I want to quickly run through is uh chat and messaging now you",
    "start": "3433039",
    "end": "3438200"
  },
  {
    "text": "know for developers out there you know the concept of Publishers and subscribers and that kind of stuff and",
    "start": "3438200",
    "end": "3444119"
  },
  {
    "text": "so in realtime communication it's very important to um sort of publish um um",
    "start": "3444119",
    "end": "3449760"
  },
  {
    "text": "you know set of things that you're interested in and have people consume that if they're interested in that thing",
    "start": "3449760",
    "end": "3456319"
  },
  {
    "text": "so it's it's it's different from streaming because in this case you're not storing data anywhere all you're",
    "start": "3456319",
    "end": "3461640"
  },
  {
    "text": "saying is I'm going to publish it whoever is listening to it you know they can listen to it and so there is the concept of pub and Sub in in uh in RIS",
    "start": "3461640",
    "end": "3469920"
  },
  {
    "text": "and so what you do is that um you know they're categorized into channels you can publish to a specific Channel",
    "start": "3469920",
    "end": "3476200"
  },
  {
    "start": "3471000",
    "end": "3471000"
  },
  {
    "text": "channel uh and consumer can say I'm interested in this channel right and so anytime you know you can say as simple",
    "start": "3476200",
    "end": "3483079"
  },
  {
    "start": "3483000",
    "end": "3483000"
  },
  {
    "text": "as I'm subscribing to in this case somebody subscribing to a sports channel M and somebody's publishing to the",
    "start": "3483079",
    "end": "3490680"
  },
  {
    "text": "sports channel and say p is good team uh perhaps Seahawks is also a good team but uh but uh uh and and then a client who",
    "start": "3490680",
    "end": "3498720"
  },
  {
    "text": "is interested in saying hey I'm interested in this channel so all the messages being posted in that channel",
    "start": "3498720",
    "end": "3504960"
  },
  {
    "text": "are you know stream to um uh to the client interesting and so you know just",
    "start": "3504960",
    "end": "3510200"
  },
  {
    "text": "the taking the one step back here it's like you can programmatically create a",
    "start": "3510200",
    "end": "3515520"
  },
  {
    "text": "channel and you knowing what the result of the channel ID essentially that's assigned to that channel be able to tell",
    "start": "3515520",
    "end": "3521520"
  },
  {
    "text": "your application code to then subscribe to that channel correctly so you know this is you can really make this end to",
    "start": "3521520",
    "end": "3526839"
  },
  {
    "text": "end just from an event driven uh sort of architecture correct especially tuned exactly especially tuned for realtime",
    "start": "3526839",
    "end": "3532920"
  },
  {
    "text": "communication like uh you can build an IFC Channel yeah so like exactly a chat room it gets spun up at a discreet",
    "start": "3532920",
    "end": "3539079"
  },
  {
    "text": "moment and then you want to be able to immediately have one or many subscribers and then you know let's say uh a message",
    "start": "3539079",
    "end": "3546400"
  },
  {
    "text": "has been sent in x amount of time and then you know take the the channel down essentially and then break the subscriptions to it exactly uh once",
    "start": "3546400",
    "end": "3553319"
  },
  {
    "text": "again this is very widely used uh use case among our customers and so um and",
    "start": "3553319",
    "end": "3560000"
  },
  {
    "text": "so that's the last use case I have and I'm sure you know there are wide variety of other use cases where it is uh",
    "start": "3560000",
    "end": "3566599"
  },
  {
    "text": "used um and I have very few of them here but you know for real time needs uh I'm",
    "start": "3566599",
    "end": "3572240"
  },
  {
    "text": "hoping that you can use one of these patterns and really accelerate your application yeah definitely and then I",
    "start": "3572240",
    "end": "3578760"
  },
  {
    "text": "have some customer success stories uh if you're interested or we can take a for questions yeah so I've been watching the",
    "start": "3578760",
    "end": "3583920"
  },
  {
    "text": "chat not too many questions now we had we had a bunch before there was one I answered in chat before but I'll give it another call out here yeah so um dor",
    "start": "3583920",
    "end": "3591039"
  },
  {
    "text": "asked an totally reasonable question here what is the difference between redis and Amazon elastic cash and so I",
    "start": "3591039",
    "end": "3596400"
  },
  {
    "text": "said in chat but feel free to throw in any uh commentary here but essentially uh elastic is the managed service offers",
    "start": "3596400",
    "end": "3603680"
  },
  {
    "text": "offered by Amazon that allows you to use either redis or mcash D as uh backends",
    "start": "3603680",
    "end": "3609520"
  },
  {
    "text": "or drivers essentially for the for the service yeah so elastic cach provides",
    "start": "3609520",
    "end": "3614799"
  },
  {
    "text": "both radis and mcash te in memory data stores and we fully managing that for",
    "start": "3614799",
    "end": "3620920"
  },
  {
    "text": "customers now why how is elastic cach different from RIS uh if remember I",
    "start": "3620920",
    "end": "3626520"
  },
  {
    "text": "talked about uh especially tuning for our instances so if you take open source Stratus and you just put it on uh ec2 uh",
    "start": "3626520",
    "end": "3634839"
  },
  {
    "text": "versus using elastic cash and uh using redis you're going to have 80%",
    "start": "3634839",
    "end": "3640319"
  },
  {
    "text": "incremental you know uh performance benefit in in terms of throughput um and",
    "start": "3640319",
    "end": "3645680"
  },
  {
    "text": "then the other thing that you get with elastic cache uh with redish version on elastic cache is that some of the",
    "start": "3645680",
    "end": "3652599"
  },
  {
    "text": "features that we are we continue to add that are not in open source for example",
    "start": "3652599",
    "end": "3657880"
  },
  {
    "text": "uh you know encryption in transition en encryption in in in rest uh both of them",
    "start": "3657880",
    "end": "3663760"
  },
  {
    "text": "are only available in elastic cash and so uh we we also open sourc it um and so",
    "start": "3663760",
    "end": "3669640"
  },
  {
    "text": "we our goal is to sort of enhance value to redes and at the same time make it uh",
    "start": "3669640",
    "end": "3674880"
  },
  {
    "text": "differentiated experience for running this workloads on elastic cash wonderful and again this is a huge uh point of",
    "start": "3674880",
    "end": "3681640"
  },
  {
    "text": "value for me is maintaining backwards compatibility right so we can make these improvements internally on elasticache",
    "start": "3681640",
    "end": "3688240"
  },
  {
    "text": "uh with using redus bindings still for the developer but the entire point is you should still be able to perform a lift and shift for your existing redus",
    "start": "3688240",
    "end": "3695480"
  },
  {
    "text": "workload of your code and it will work exactly as intended and the way new features are implemented will not break",
    "start": "3695480",
    "end": "3700960"
  },
  {
    "text": "other uh code that you have written for us exactly it still opens as compatible you're using the same data structur you",
    "start": "3700960",
    "end": "3707440"
  },
  {
    "text": "love in that is and there is absolutely uh compatibility perspective you don't have to do anything different awesome so",
    "start": "3707440",
    "end": "3714200"
  },
  {
    "text": "I I think we've got time for probably about 1 customer story yeah is there any one in particular that you're really excited about or um the one I'm really",
    "start": "3714200",
    "end": "3721680"
  },
  {
    "text": "excited about I think very close to you know uh audience on Twitch is epic games",
    "start": "3721680",
    "end": "3727880"
  },
  {
    "text": "uh uh fortnite you know I'm pretty sure everybody knows fortnite yeah no I'm a huge gamer I fortnite I feel a lot of ble Roy it's uh yeah you're you're",
    "start": "3727880",
    "end": "3735480"
  },
  {
    "text": "hitting the right one for for twitch yeah it kind of addresses you know one of the things that we just talked about",
    "start": "3735480",
    "end": "3741359"
  },
  {
    "text": "you know elastic Cas differentiation right and so when fortnite the last version was released they you know the",
    "start": "3741359",
    "end": "3747839"
  },
  {
    "text": "the the epic games team they really wanted to um you know scale it up and",
    "start": "3747839",
    "end": "3755200"
  },
  {
    "text": "they were using number of nodes to uh uh to accelerate uh the workload and what",
    "start": "3755200",
    "end": "3762559"
  },
  {
    "text": "they did was okay instead of using that they used the new RFA instance type uh",
    "start": "3762559",
    "end": "3767799"
  },
  {
    "text": "which we tuned especially for reders and so because of that they got higher throughput uh than the notes they were",
    "start": "3767799",
    "end": "3774039"
  },
  {
    "text": "using before uh because of which they actually reduced their uh cluster size significantly they saved cost and",
    "start": "3774039",
    "end": "3781000"
  },
  {
    "text": "actually had no issue at all in terms of scaling of their traffic and so it's one of very successful stories and we talk",
    "start": "3781000",
    "end": "3788799"
  },
  {
    "text": "about that we're really proud about that yeah and so I mean just like how amazing is it you you you use this open source",
    "start": "3788799",
    "end": "3794920"
  },
  {
    "text": "tool that you know and love and you uh you know hey this should be a drop in replacement so you take your code and",
    "start": "3794920",
    "end": "3800119"
  },
  {
    "text": "you literally just put it on AWS instances that are specialized for reddis through elasticache and you can",
    "start": "3800119",
    "end": "3806359"
  },
  {
    "text": "automatically either sa you basically just save money because you can do the same job with the same throughput um",
    "start": "3806359",
    "end": "3812440"
  },
  {
    "text": "with a smaller number of nodes in your cluster and then you just pay less for it exactly right so it's like it's",
    "start": "3812440",
    "end": "3817760"
  },
  {
    "text": "amazing you know it's like hey small work for a huge gain exactly yeah so that's one of the favorite use cases we",
    "start": "3817760",
    "end": "3823839"
  },
  {
    "text": "have Experia us has you know they have you know millions of transactions uh you",
    "start": "3823839",
    "end": "3830680"
  },
  {
    "text": "know uh U we have grab which is one of the popular right haing",
    "start": "3830680",
    "end": "3836319"
  },
  {
    "text": "use cases uh Pon is another one but leader boards is very important for pel",
    "start": "3836319",
    "end": "3842400"
  },
  {
    "text": "and real time is exactly is uh you know very important there too right because it's like uh nothing breaks the",
    "start": "3842400",
    "end": "3847720"
  },
  {
    "text": "immersion of a competition in in some sort of race if you aren't getting those real time metrics with respect to where",
    "start": "3847720",
    "end": "3854480"
  },
  {
    "text": "you're standing next to everybody else right like the worst would be you have to pedal for five minutes and you know only like 30 seconds delayed after are",
    "start": "3854480",
    "end": "3861240"
  },
  {
    "text": "you getting updated leaderboards right so that that is a completely different experience without all time uh data",
    "start": "3861240",
    "end": "3866520"
  },
  {
    "text": "reads so and then they use elastic cash today so so uh many use cases like that",
    "start": "3866520",
    "end": "3872039"
  },
  {
    "text": "and and I mean if you just look at the customers that we have several customers in different categories you know",
    "start": "3872039",
    "end": "3878160"
  },
  {
    "text": "telecommunications social media you know media and entertainment you know several of those and big names and so we're",
    "start": "3878160",
    "end": "3885160"
  },
  {
    "text": "really proud of what we provide in uh at elastic cash and we hope that customers really you know uh get the benefit out",
    "start": "3885160",
    "end": "3892279"
  },
  {
    "text": "of it yeah I mean again uh we started off with Des desing the the value prop of caching in general and I don't think",
    "start": "3892279",
    "end": "3898400"
  },
  {
    "text": "there's a single subject domain that doesn't stand to gain from from caching there are these you know very specific",
    "start": "3898400",
    "end": "3904680"
  },
  {
    "text": "industries that can just like have immense gains too but ultimately cashing has a place almost everywhere so uh glad",
    "start": "3904680",
    "end": "3910960"
  },
  {
    "text": "to see all of the amazing customers that are using that but um I think we're kind of nearing the end of today's stream so",
    "start": "3910960",
    "end": "3917559"
  },
  {
    "text": "uh if anyone has any questions we're going to stick around for you know another few seconds here would love to",
    "start": "3917559",
    "end": "3923319"
  },
  {
    "text": "answer any of those again uh if you have questions broadly not just about elasticache or reddis uh please email us at databases",
    "start": "3923319",
    "end": "3931039"
  },
  {
    "text": "deepdive amazon.com I'm going to drop that in the chat right",
    "start": "3931039",
    "end": "3936279"
  },
  {
    "text": "now and we will try our best to either respond directly over email or get your",
    "start": "3936279",
    "end": "3942920"
  },
  {
    "text": "your question answered on stream with whatever respective episode um that that will be addressed by so again we've uh",
    "start": "3942920",
    "end": "3951400"
  },
  {
    "text": "open for questions here at the end but if we don't have anything else we'll probably wrap it up so so people are",
    "start": "3951400",
    "end": "3956799"
  },
  {
    "text": "saying thank you in the chat people were saying uh you know uh there was lots of great information and I learned a lot",
    "start": "3956799",
    "end": "3963680"
  },
  {
    "text": "too I I I love caching but uh definitely learned a little bit about streams channels stuff I didn't realize was as",
    "start": "3963680",
    "end": "3970240"
  },
  {
    "text": "as fully uh like a first class feature of redis and and elastic has specifically yeah so yeah it's been fun",
    "start": "3970240",
    "end": "3977279"
  },
  {
    "text": "spending time last one hour with you so awesome yeah all right well uh just lots",
    "start": "3977279",
    "end": "3982440"
  },
  {
    "text": "of people saying thank you uh Mr hex ID Thief Milky Way galaxy Alex uh leopard",
    "start": "3982440",
    "end": "3988680"
  },
  {
    "text": "day um someone was asking about the URL for schema design I will uh as soon as I",
    "start": "3988680",
    "end": "3994359"
  },
  {
    "text": "end the stream stick around in chat I'm going to throw that URL it's a YouTube video directly in there for Milky Way",
    "start": "3994359",
    "end": "3999599"
  },
  {
    "text": "But moan it's been great thank so much everyone enjoyed it but uh thank you again for tuning in to database Deep dive this was episode eight on M or",
    "start": "3999599",
    "end": "4007000"
  },
  {
    "text": "elastic cash and reddis next week uh our co-host Randall will be back hopefully",
    "start": "4007000",
    "end": "4012440"
  },
  {
    "text": "he's recovered he took today off cuz uh unforeseen health health uh issues but",
    "start": "4012440",
    "end": "4018240"
  },
  {
    "text": "uh again thank you again for everyone tuning in and we will see you next week at the same time here at noon on twitch.tv/ AWS thank you thanks for with",
    "start": "4018240",
    "end": "4026720"
  },
  {
    "text": "us today see you again yeah same time noon to 1 p.m. Tuesday yep take it easy everyone have a good week",
    "start": "4026720",
    "end": "4034480"
  },
  {
    "text": "[Music]",
    "start": "4036420",
    "end": "4048199"
  }
]