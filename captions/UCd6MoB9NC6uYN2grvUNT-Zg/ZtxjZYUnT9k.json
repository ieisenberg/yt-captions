[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "In this video, you’ll see how to build SQL \nscripts and queries with Amazon CodeWhisperer.",
    "start": "0",
    "end": "5386"
  },
  {
    "text": "With this AI-powered tool, you can use code \nsuggestions to increase your productivity,",
    "start": "6284",
    "end": "11861"
  },
  {
    "text": "complete complex SQL tasks, and \nmanage a variety of SQL-based databases.",
    "start": "11861",
    "end": "17420"
  },
  {
    "start": "19000",
    "end": "173000"
  },
  {
    "text": "Let’s begin in Visual Studio Code (VS Code), \nwhere we’ll create a SQL Server database.",
    "start": "19353",
    "end": "24838"
  },
  {
    "text": "We’ll write a comment that tells \nCodeWhisperer to create the database.",
    "start": "25538",
    "end": "29209"
  },
  {
    "text": "To accept the statement suggested by \nCodeWhisperer, we’ll press the Tab key on our keyboard.",
    "start": "30837",
    "end": "35581"
  },
  {
    "text": "Next, we’ll press our Enter key to trigger\n CodeWhisperer to suggest another statement.",
    "start": "36220",
    "end": "41104"
  },
  {
    "text": "We’ll accept the suggestion.",
    "start": "42000",
    "end": "43505"
  },
  {
    "text": "Using CodeWhisperer, let’s generate the rest of \nthe statements needed to create the database.",
    "start": "44268",
    "end": "49395"
  },
  {
    "text": "Next, let's write a comment that tells \nCodeWhisperer to create a table named “Authors.”",
    "start": "50643",
    "end": "56235"
  },
  {
    "text": "We’ll specify the columns we want to add, \nincluding the data type and constraints for each.",
    "start": "56585",
    "end": "61978"
  },
  {
    "text": "We’ll accept CodeWhisperer’s code suggestions.",
    "start": "62845",
    "end": "65506"
  },
  {
    "text": "Next, let’s tell CodeWhisperer to \ncreate a table named “Books.”",
    "start": "73891",
    "end": "77493"
  },
  {
    "text": "As requested, CodeWhisperer will now \ngenerate code to create the table,",
    "start": "78255",
    "end": "82735"
  },
  {
    "text": "identifying the primary key and \nreferencing the “Authors” table.",
    "start": "82735",
    "end": "86577"
  },
  {
    "text": "Let's quickly create two more tables.",
    "start": "92527",
    "end": "94456"
  },
  {
    "text": "First, we’ll tell CodeWhisperer to \ncreate a table named “Students.”",
    "start": "94456",
    "end": "98093"
  },
  {
    "text": "Next, we’ll tell CodeWhisperer to \ncreate a table named “Borrows.”",
    "start": "110075",
    "end": "114519"
  },
  {
    "text": "This table will store the books \nborrowed by each student.",
    "start": "114671",
    "end": "117517"
  },
  {
    "text": "Using CodeWhisperer, let’s create insert \nstatements to add a record to each of our tables.",
    "start": "130741",
    "end": "136097"
  },
  {
    "text": "We can also start writing a statement\n and CodeWhisperer will complete it.",
    "start": "151026",
    "end": "154337"
  },
  {
    "text": "Now let's execute this script in \nSQL Server Management Studio.",
    "start": "156498",
    "end": "159646"
  },
  {
    "text": "Our database has been created and \nfour rows of data have been added.",
    "start": "166753",
    "end": "170325"
  },
  {
    "text": "Let’s return to VS Code.",
    "start": "170584",
    "end": "172088"
  },
  {
    "start": "173000",
    "end": "212000"
  },
  {
    "text": "Now let’s tell CodeWhisperer to create a\nselect statement to obtain all borrowed books.",
    "start": "174295",
    "end": "178842"
  },
  {
    "text": "We’ll specify the columns we want returned.",
    "start": "179116",
    "end": "181277"
  },
  {
    "text": "Let’s test this select statement in \nSQL Server Management Studio.",
    "start": "195944",
    "end": "199644"
  },
  {
    "text": "The statement worked as expected.",
    "start": "205914",
    "end": "207629"
  },
  {
    "text": "Let's return to VS Code and \ncreate another statement.",
    "start": "207933",
    "end": "210809"
  },
  {
    "start": "212000",
    "end": "238000"
  },
  {
    "text": "This time, we’ll create an insert statement \nto add another book to our Books table.",
    "start": "212803",
    "end": "217077"
  },
  {
    "text": "Let’s execute the statement.",
    "start": "222647",
    "end": "224058"
  },
  {
    "text": "As expected, the statement \nadded a row to the table.",
    "start": "230632",
    "end": "233726"
  },
  {
    "text": "Let’s return to VS Code and \ncontinue with our testing.",
    "start": "234076",
    "end": "236882"
  },
  {
    "start": "238000",
    "end": "265000"
  },
  {
    "text": "Next, we’ll tell CodeWhisperer to create \na statement to obtain all books that are",
    "start": "239119",
    "end": "243392"
  },
  {
    "text": "not currently borrowed and are available.",
    "start": "243392",
    "end": "245675"
  },
  {
    "text": "Let’s execute the statement.",
    "start": "247106",
    "end": "248551"
  },
  {
    "text": "The query ran successfully.",
    "start": "258687",
    "end": "260430"
  },
  {
    "text": "Now let’s tell CodeWhisperer to \ncreate a more complex query.",
    "start": "261000",
    "end": "264174"
  },
  {
    "text": "This time, we’ll create a statement that uses a left\njoin to obtain all authors who do not have any books.",
    "start": "266365",
    "end": "272054"
  },
  {
    "text": "CodeWhisperer generated a query\n that meets our requirements.",
    "start": "281423",
    "end": "284882"
  },
  {
    "text": "Because we have limited data in our database, \nhowever, this query won't return any results.",
    "start": "285201",
    "end": "290775"
  },
  {
    "text": "Let's look at another complex example.",
    "start": "291186",
    "end": "293272"
  },
  {
    "text": "This time, we’ll tell CodeWhisperer to \ngenerate a cursor to obtain students",
    "start": "294642",
    "end": "298942"
  },
  {
    "text": "who have borrowed books and print \ntheir email and the expected return date.",
    "start": "298942",
    "end": "302626"
  },
  {
    "text": "We can also change the code \ngenerated by CodeWhisperer if needed.",
    "start": "313417",
    "end": "316850"
  },
  {
    "text": "For example, we can print the \nreturn date on a different line.",
    "start": "318000",
    "end": "321000"
  },
  {
    "text": "Now let's test this code.",
    "start": "324668",
    "end": "326107"
  },
  {
    "text": "The code executed successfully and \nprinted the email and expected return",
    "start": "334492",
    "end": "338305"
  },
  {
    "text": "date for the student we added to our database.",
    "start": "338305",
    "end": "340940"
  },
  {
    "start": "342000",
    "end": "385000"
  },
  {
    "text": "We can also use other database engines.",
    "start": "343024",
    "end": "345184"
  },
  {
    "text": "For example, we can create an Oracle \nselect statement for our Books table",
    "start": "345701",
    "end": "349590"
  },
  {
    "text": "and convert the book status to hex.",
    "start": "349590",
    "end": "351758"
  },
  {
    "text": "We can create a similar statement for SQL \nServer to convert the status to a binary data type.",
    "start": "358272",
    "end": "363077"
  },
  {
    "text": "CodeWhisperer can identify the database engine\n we’re using and suggest statements accordingly.",
    "start": "364050",
    "end": "369603"
  },
  {
    "text": "You’ve just seen how to build SQL scripts \nand queries with Amazon CodeWhisperer.",
    "start": "371566",
    "end": "375840"
  },
  {
    "text": "You can learn more about this topic in \nthe description and links for this video.",
    "start": "376936",
    "end": "380654"
  },
  {
    "text": "Thanks for watching. Now it’s your turn to try.",
    "start": "381264",
    "end": "384000"
  }
]