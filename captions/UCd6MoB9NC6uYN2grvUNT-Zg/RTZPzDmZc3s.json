[
  {
    "start": "0",
    "end": "14000"
  },
  {
    "text": "hello I'm Clayton brown a solution",
    "start": "120",
    "end": "2490"
  },
  {
    "text": "architect for Amazon Web Services",
    "start": "2490",
    "end": "4259"
  },
  {
    "text": "working here in the Sydney Australia",
    "start": "4259",
    "end": "5819"
  },
  {
    "text": "office today we're going to take a look",
    "start": "5819",
    "end": "8160"
  },
  {
    "text": "at how you can supercharge your",
    "start": "8160",
    "end": "9510"
  },
  {
    "text": "applications using graph database",
    "start": "9510",
    "end": "11490"
  },
  {
    "text": "technology Amazon Web Services provides",
    "start": "11490",
    "end": "15540"
  },
  {
    "start": "14000",
    "end": "14000"
  },
  {
    "text": "a range of fully managed data base",
    "start": "15540",
    "end": "17100"
  },
  {
    "text": "offerings in the relational database",
    "start": "17100",
    "end": "19439"
  },
  {
    "text": "category Amazon RDS there's a broad",
    "start": "19439",
    "end": "22080"
  },
  {
    "text": "selection of both commercial and",
    "start": "22080",
    "end": "23640"
  },
  {
    "text": "community database such as Oracle",
    "start": "23640",
    "end": "25890"
  },
  {
    "text": "Microsoft sequel through to my sequel",
    "start": "25890",
    "end": "28320"
  },
  {
    "text": "Postgres in Moorea DB as well as our",
    "start": "28320",
    "end": "31380"
  },
  {
    "text": "cloud native optimizations for both my",
    "start": "31380",
    "end": "33270"
  },
  {
    "text": "sequel and Postgres in the aurora",
    "start": "33270",
    "end": "34860"
  },
  {
    "text": "offering for data warehousing Amazon",
    "start": "34860",
    "end": "38250"
  },
  {
    "text": "redshift provides a fully managed",
    "start": "38250",
    "end": "39690"
  },
  {
    "text": "petabyte scale data warehouse service in",
    "start": "39690",
    "end": "41820"
  },
  {
    "text": "the cloud and in the non relational",
    "start": "41820",
    "end": "43829"
  },
  {
    "text": "category there are a number of no sequel",
    "start": "43829",
    "end": "45480"
  },
  {
    "text": "options as well such as Amazon DynamoDB",
    "start": "45480",
    "end": "48149"
  },
  {
    "text": "which provides a fast and flexible non",
    "start": "48149",
    "end": "51090"
  },
  {
    "text": "relational database service for any",
    "start": "51090",
    "end": "52770"
  },
  {
    "text": "scale an Amazon ElastiCache which",
    "start": "52770",
    "end": "55680"
  },
  {
    "text": "provides managed in-memory data stores",
    "start": "55680",
    "end": "57690"
  },
  {
    "text": "with both Redis and memcache engines",
    "start": "57690",
    "end": "59899"
  },
  {
    "text": "today we're going to take a look at the",
    "start": "59899",
    "end": "61859"
  },
  {
    "text": "later Center to this collection Amazon",
    "start": "61859",
    "end": "63660"
  },
  {
    "text": "Neptune which provides a new category of",
    "start": "63660",
    "end": "65880"
  },
  {
    "text": "graph storage and how you can use its",
    "start": "65880",
    "end": "67470"
  },
  {
    "text": "features in your applications Before we",
    "start": "67470",
    "end": "71670"
  },
  {
    "text": "jump in I want to cover a quick intro of",
    "start": "71670",
    "end": "73590"
  },
  {
    "text": "what I'll be covering today when I take",
    "start": "73590",
    "end": "76229"
  },
  {
    "text": "a look at building applications on",
    "start": "76229",
    "end": "77729"
  },
  {
    "text": "highly connected data we're going to",
    "start": "77729",
    "end": "79770"
  },
  {
    "text": "look at types of graphs and how to query",
    "start": "79770",
    "end": "81450"
  },
  {
    "text": "them we're gonna look at a property",
    "start": "81450",
    "end": "83580"
  },
  {
    "text": "graph on an apache tinker pipe friend",
    "start": "83580",
    "end": "85500"
  },
  {
    "text": "recommendation example as well as an RDF",
    "start": "85500",
    "end": "88290"
  },
  {
    "text": "knowledge graph example and then lastly",
    "start": "88290",
    "end": "91350"
  },
  {
    "text": "I'll provide an overview of some of",
    "start": "91350",
    "end": "92880"
  },
  {
    "text": "neptunes fully managed Enterprise ready",
    "start": "92880",
    "end": "94829"
  },
  {
    "text": "features so today's applications need to",
    "start": "94829",
    "end": "100530"
  },
  {
    "text": "process data that's both rich and highly",
    "start": "100530",
    "end": "102720"
  },
  {
    "text": "connected the data is rich in that it's",
    "start": "102720",
    "end": "105180"
  },
  {
    "text": "coming from many different sources",
    "start": "105180",
    "end": "106680"
  },
  {
    "text": "it has heterogeneous data elements and",
    "start": "106680",
    "end": "109259"
  },
  {
    "text": "data attributes and it's the connect",
    "start": "109259",
    "end": "111840"
  },
  {
    "text": "nough sub D data elements that enable",
    "start": "111840",
    "end": "113790"
  },
  {
    "text": "new applications so if you think about a",
    "start": "113790",
    "end": "116640"
  },
  {
    "text": "social network for example it's the",
    "start": "116640",
    "end": "118380"
  },
  {
    "text": "interactions of individuals with",
    "start": "118380",
    "end": "120329"
  },
  {
    "text": "different content and context of",
    "start": "120329",
    "end": "121950"
  },
  {
    "text": "relationships which really provide the",
    "start": "121950",
    "end": "124950"
  },
  {
    "text": "value of the network and similar types",
    "start": "124950",
    "end": "127770"
  },
  {
    "text": "of things are seen in other",
    "start": "127770",
    "end": "129179"
  },
  {
    "text": "recommendation systems in retail fraud",
    "start": "129179",
    "end": "132900"
  },
  {
    "text": "it's the relationships",
    "start": "132900",
    "end": "134319"
  },
  {
    "text": "such as shared accounts or shared",
    "start": "134319",
    "end": "135760"
  },
  {
    "text": "payment mechanisms that provide the",
    "start": "135760",
    "end": "137379"
  },
  {
    "text": "value when building these applications",
    "start": "137379",
    "end": "139409"
  },
  {
    "text": "one of the things about highly connected",
    "start": "139409",
    "end": "141790"
  },
  {
    "text": "data is that it's particularly",
    "start": "141790",
    "end": "143170"
  },
  {
    "text": "well-suited for graph representation and",
    "start": "143170",
    "end": "145540"
  },
  {
    "text": "there are a number of different use",
    "start": "145540",
    "end": "147639"
  },
  {
    "start": "146000",
    "end": "146000"
  },
  {
    "text": "cases for highly connected graph",
    "start": "147639",
    "end": "149260"
  },
  {
    "text": "representations so we talked about",
    "start": "149260",
    "end": "152379"
  },
  {
    "text": "social networking there's also various",
    "start": "152379",
    "end": "155049"
  },
  {
    "text": "types of recommendation systems",
    "start": "155049",
    "end": "156629"
  },
  {
    "text": "knowledge graphs are the types of",
    "start": "156629",
    "end": "158739"
  },
  {
    "text": "application where you use graph",
    "start": "158739",
    "end": "160269"
  },
  {
    "text": "representation to model information that",
    "start": "160269",
    "end": "162969"
  },
  {
    "text": "enable customers to improve their",
    "start": "162969",
    "end": "164709"
  },
  {
    "text": "retrieval or answer questions about data",
    "start": "164709",
    "end": "167700"
  },
  {
    "text": "fraud detection applications also very",
    "start": "167700",
    "end": "170379"
  },
  {
    "text": "common the Life Sciences is a rich space",
    "start": "170379",
    "end": "173709"
  },
  {
    "text": "for graph applications both ranging from",
    "start": "173709",
    "end": "176319"
  },
  {
    "text": "drug discovery to data integration to",
    "start": "176319",
    "end": "178989"
  },
  {
    "text": "precision medicine type use cases and",
    "start": "178989",
    "end": "181620"
  },
  {
    "text": "then of course network and IT operations",
    "start": "181620",
    "end": "184299"
  },
  {
    "text": "are fundamentally graph models and",
    "start": "184299",
    "end": "186340"
  },
  {
    "text": "structures so they map very well into",
    "start": "186340",
    "end": "188290"
  },
  {
    "text": "these kinds of structures and",
    "start": "188290",
    "end": "189549"
  },
  {
    "text": "relationships so let's look at a couple",
    "start": "189549",
    "end": "192159"
  },
  {
    "text": "of examples here we have a",
    "start": "192159",
    "end": "194290"
  },
  {
    "start": "194000",
    "end": "194000"
  },
  {
    "text": "recommendation graph and it's showing",
    "start": "194290",
    "end": "196750"
  },
  {
    "text": "individuals relationships between them",
    "start": "196750",
    "end": "198879"
  },
  {
    "text": "from a social network context",
    "start": "198879",
    "end": "201120"
  },
  {
    "text": "relationships from a transactional",
    "start": "201120",
    "end": "203019"
  },
  {
    "text": "context and also individual interest",
    "start": "203019",
    "end": "205479"
  },
  {
    "text": "models for example people's interests in",
    "start": "205479",
    "end": "207220"
  },
  {
    "text": "various sports so representing this",
    "start": "207220",
    "end": "210099"
  },
  {
    "text": "information in a graph model we can",
    "start": "210099",
    "end": "212019"
  },
  {
    "text": "start to make recommendations we can say",
    "start": "212019",
    "end": "214989"
  },
  {
    "text": "things like people who also follow this",
    "start": "214989",
    "end": "218199"
  },
  {
    "text": "sport purchased this product similarly",
    "start": "218199",
    "end": "221439"
  },
  {
    "text": "we can do things like for social",
    "start": "221439",
    "end": "223090"
  },
  {
    "text": "networks we can make recommendation",
    "start": "223090",
    "end": "224680"
  },
  {
    "text": "based on shared friendships this case is",
    "start": "224680",
    "end": "228939"
  },
  {
    "start": "228000",
    "end": "228000"
  },
  {
    "text": "an example taken from the World Wide Web",
    "start": "228939",
    "end": "231060"
  },
  {
    "text": "Consortium or w3 C's knowledge graph web",
    "start": "231060",
    "end": "234459"
  },
  {
    "text": "page and augmented for this presentation",
    "start": "234459",
    "end": "237299"
  },
  {
    "text": "but we see that we have a picture of a",
    "start": "237299",
    "end": "239709"
  },
  {
    "text": "famous artwork the Mona Lisa along with",
    "start": "239709",
    "end": "242949"
  },
  {
    "text": "information about the museum where it's",
    "start": "242949",
    "end": "244689"
  },
  {
    "text": "located and some further information",
    "start": "244689",
    "end": "247209"
  },
  {
    "text": "about the city overall then we have some",
    "start": "247209",
    "end": "250239"
  },
  {
    "text": "information about users and travel",
    "start": "250239",
    "end": "252459"
  },
  {
    "text": "history representing this information",
    "start": "252459",
    "end": "255669"
  },
  {
    "text": "and a knowledge graph we can start to",
    "start": "255669",
    "end": "257259"
  },
  {
    "text": "answer questions like who painted the",
    "start": "257259",
    "end": "260169"
  },
  {
    "text": "Mona Lisa what museums should Alice",
    "start": "260169",
    "end": "263169"
  },
  {
    "text": "visit while in Paris what artists have",
    "start": "263169",
    "end": "265960"
  },
  {
    "text": "paintings in the Louvre",
    "start": "265960",
    "end": "268620"
  },
  {
    "text": "here is a customer example use case from",
    "start": "268620",
    "end": "271210"
  },
  {
    "text": "Thomson Reuters he participated in the",
    "start": "271210",
    "end": "273010"
  },
  {
    "text": "Amazon Neptune preview this is an",
    "start": "273010",
    "end": "275950"
  },
  {
    "text": "example quote from their own use case",
    "start": "275950",
    "end": "278040"
  },
  {
    "text": "what they're doing is helping customers",
    "start": "278040",
    "end": "280570"
  },
  {
    "text": "to navigate very complex sets of tax",
    "start": "280570",
    "end": "282640"
  },
  {
    "text": "policies and regulations and using a",
    "start": "282640",
    "end": "284770"
  },
  {
    "text": "graph based approach to be able to model",
    "start": "284770",
    "end": "286780"
  },
  {
    "text": "these regulations and help customers",
    "start": "286780",
    "end": "288760"
  },
  {
    "text": "understand how they apply to them and",
    "start": "288760",
    "end": "291310"
  },
  {
    "text": "their circumstance this is a very",
    "start": "291310",
    "end": "293320"
  },
  {
    "text": "interesting use case that we're seeing",
    "start": "293320",
    "end": "294730"
  },
  {
    "text": "more examples of so you've been seen",
    "start": "294730",
    "end": "298660"
  },
  {
    "start": "298000",
    "end": "298000"
  },
  {
    "text": "example applications that you can build",
    "start": "298660",
    "end": "300880"
  },
  {
    "text": "over highly connected data so what are",
    "start": "300880",
    "end": "303670"
  },
  {
    "text": "the types of database systems that you",
    "start": "303670",
    "end": "305290"
  },
  {
    "text": "can choose for this well you could use a",
    "start": "305290",
    "end": "308080"
  },
  {
    "text": "relational database however there are",
    "start": "308080",
    "end": "309970"
  },
  {
    "text": "some challenges in doing this relational",
    "start": "309970",
    "end": "313210"
  },
  {
    "text": "databases are generally designed to",
    "start": "313210",
    "end": "314920"
  },
  {
    "text": "process information that's highly",
    "start": "314920",
    "end": "316450"
  },
  {
    "text": "structured and changes relatively",
    "start": "316450",
    "end": "318550"
  },
  {
    "text": "infrequently the query language is",
    "start": "318550",
    "end": "321340"
  },
  {
    "text": "sequel and if you use this to process",
    "start": "321340",
    "end": "323470"
  },
  {
    "text": "relationships in your data you end up",
    "start": "323470",
    "end": "325690"
  },
  {
    "text": "having to process a large amount of",
    "start": "325690",
    "end": "327340"
  },
  {
    "text": "joins in your queries and this makes",
    "start": "327340",
    "end": "329290"
  },
  {
    "text": "Cruz both cumbersome and awkward over",
    "start": "329290",
    "end": "331750"
  },
  {
    "text": "highly connected information the second",
    "start": "331750",
    "end": "335020"
  },
  {
    "text": "reason is types of i/o demands for",
    "start": "335020",
    "end": "337390"
  },
  {
    "text": "relational workloads versus graph",
    "start": "337390",
    "end": "339100"
  },
  {
    "text": "workloads are very different and",
    "start": "339100",
    "end": "340930"
  },
  {
    "text": "relational databases just aren't",
    "start": "340930",
    "end": "343000"
  },
  {
    "text": "optimized to efficiently process graphs",
    "start": "343000",
    "end": "344980"
  },
  {
    "text": "and the third thing that we see in graph",
    "start": "344980",
    "end": "348070"
  },
  {
    "text": "applications is customers often want to",
    "start": "348070",
    "end": "350440"
  },
  {
    "text": "bring together from many many different",
    "start": "350440",
    "end": "352450"
  },
  {
    "text": "sources so they want to be able to",
    "start": "352450",
    "end": "354370"
  },
  {
    "text": "flexibly ingest and accommodate data",
    "start": "354370",
    "end": "356710"
  },
  {
    "text": "that they didn't initially design their",
    "start": "356710",
    "end": "358930"
  },
  {
    "text": "application for this is a little bit",
    "start": "358930",
    "end": "361060"
  },
  {
    "text": "challenging to do in a relational",
    "start": "361060",
    "end": "362740"
  },
  {
    "text": "database so let's look at a specific",
    "start": "362740",
    "end": "366790"
  },
  {
    "text": "example about how these models differ on",
    "start": "366790",
    "end": "369420"
  },
  {
    "text": "the left hand side you can see a fairly",
    "start": "369420",
    "end": "371830"
  },
  {
    "text": "typical ard or entity relationship",
    "start": "371830",
    "end": "374170"
  },
  {
    "text": "diagram which is a design for a HR",
    "start": "374170",
    "end": "376930"
  },
  {
    "text": "example which was purpose-built to",
    "start": "376930",
    "end": "378610"
  },
  {
    "text": "support HR business process on the right",
    "start": "378610",
    "end": "382030"
  },
  {
    "text": "hand side we have the same model",
    "start": "382030",
    "end": "383440"
  },
  {
    "text": "represented but as a graph in here we",
    "start": "383440",
    "end": "387880"
  },
  {
    "text": "can see that the relationships",
    "start": "387880",
    "end": "389290"
  },
  {
    "text": "themselves are first-class objects so if",
    "start": "389290",
    "end": "392620"
  },
  {
    "text": "we want to ask questions that we hadn't",
    "start": "392620",
    "end": "394360"
  },
  {
    "text": "anticipated so for example what are the",
    "start": "394360",
    "end": "397060"
  },
  {
    "text": "skills that are particularly needed to",
    "start": "397060",
    "end": "398740"
  },
  {
    "text": "build a particular product",
    "start": "398740",
    "end": "400460"
  },
  {
    "text": "to do that over a relational system",
    "start": "400460",
    "end": "402110"
  },
  {
    "text": "would be a very complicated and complex",
    "start": "402110",
    "end": "403669"
  },
  {
    "text": "sequel query but to do that over a graph",
    "start": "403669",
    "end": "406400"
  },
  {
    "text": "would be a fairly natural expression so",
    "start": "406400",
    "end": "409430"
  },
  {
    "text": "it's really about the models and query",
    "start": "409430",
    "end": "411229"
  },
  {
    "text": "semantics which allow you to ask",
    "start": "411229",
    "end": "412610"
  },
  {
    "text": "different questions over the data so",
    "start": "412610",
    "end": "416389"
  },
  {
    "text": "what is a graph database a graph",
    "start": "416389",
    "end": "418910"
  },
  {
    "text": "database is a database that's optimized",
    "start": "418910",
    "end": "421250"
  },
  {
    "text": "for storage and retrieval of graph data",
    "start": "421250",
    "end": "423680"
  },
  {
    "text": "it supports specialized query languages",
    "start": "423680",
    "end": "426530"
  },
  {
    "text": "and api's that are optimized for graph",
    "start": "426530",
    "end": "428660"
  },
  {
    "text": "and it's tuned for the i/o",
    "start": "428660",
    "end": "430539"
  },
  {
    "text": "characteristics that are required to",
    "start": "430539",
    "end": "432530"
  },
  {
    "text": "efficiently process graph applications",
    "start": "432530",
    "end": "436180"
  },
  {
    "text": "there are two leading models for graph",
    "start": "436180",
    "end": "439210"
  },
  {
    "start": "437000",
    "end": "437000"
  },
  {
    "text": "the first is something called property",
    "start": "439210",
    "end": "441740"
  },
  {
    "text": "graphs and a property graph has nodes",
    "start": "441740",
    "end": "444020"
  },
  {
    "text": "and node properties as well as edges and",
    "start": "444020",
    "end": "446840"
  },
  {
    "text": "edge properties and the leading",
    "start": "446840",
    "end": "448669"
  },
  {
    "text": "framework for processing property graphs",
    "start": "448669",
    "end": "450620"
  },
  {
    "text": "is apache tinker pop it provides",
    "start": "450620",
    "end": "453409"
  },
  {
    "text": "something called gremlin which is an",
    "start": "453409",
    "end": "455030"
  },
  {
    "text": "imperative language that lets you",
    "start": "455030",
    "end": "456710"
  },
  {
    "text": "express traversals over your graph for",
    "start": "456710",
    "end": "459289"
  },
  {
    "text": "example a is connected to B and has a",
    "start": "459289",
    "end": "461870"
  },
  {
    "text": "particular attribute with this property",
    "start": "461870",
    "end": "464440"
  },
  {
    "text": "the second major framework is something",
    "start": "464440",
    "end": "467000"
  },
  {
    "text": "called the RDF or resource description",
    "start": "467000",
    "end": "469699"
  },
  {
    "text": "framework RDF is part of a set of World",
    "start": "469699",
    "end": "473389"
  },
  {
    "text": "Wide Web Consortium or w3c standards",
    "start": "473389",
    "end": "476360"
  },
  {
    "text": "collectively known as the Semantic Web",
    "start": "476360",
    "end": "478990"
  },
  {
    "text": "and he has a query language for RDF",
    "start": "478990",
    "end": "481490"
  },
  {
    "text": "which is called sparkle so as we're",
    "start": "481490",
    "end": "484669"
  },
  {
    "start": "484000",
    "end": "484000"
  },
  {
    "text": "designing Evans on Neptune we looked at",
    "start": "484669",
    "end": "486530"
  },
  {
    "text": "some of the alternatives in the graph DB",
    "start": "486530",
    "end": "488360"
  },
  {
    "text": "space and what we found was that",
    "start": "488360",
    "end": "490940"
  },
  {
    "text": "customers often had challenges scaling",
    "start": "490940",
    "end": "493070"
  },
  {
    "text": "up and so it was relatively common that",
    "start": "493070",
    "end": "495620"
  },
  {
    "text": "customers would try a Piercy or a",
    "start": "495620",
    "end": "497750"
  },
  {
    "text": "prototype in application and have quite",
    "start": "497750",
    "end": "500030"
  },
  {
    "text": "a lot of success with it but when they",
    "start": "500030",
    "end": "502070"
  },
  {
    "text": "attempted to put this into production",
    "start": "502070",
    "end": "503479"
  },
  {
    "text": "that experienced a decline in query",
    "start": "503479",
    "end": "506210"
  },
  {
    "text": "performance or operational difficulties",
    "start": "506210",
    "end": "508310"
  },
  {
    "text": "as they tried to scale up the second",
    "start": "508310",
    "end": "511219"
  },
  {
    "text": "thing that we found was that customers",
    "start": "511219",
    "end": "512599"
  },
  {
    "text": "had a lot of difficulty in building and",
    "start": "512599",
    "end": "514039"
  },
  {
    "text": "maintaining high availability",
    "start": "514039",
    "end": "515229"
  },
  {
    "text": "configurations so when they wanted to",
    "start": "515229",
    "end": "517820"
  },
  {
    "text": "take these applications into production",
    "start": "517820",
    "end": "519440"
  },
  {
    "text": "it was challenging for them to set up",
    "start": "519440",
    "end": "521539"
  },
  {
    "text": "and configure these hey CheY features",
    "start": "521539",
    "end": "523190"
  },
  {
    "text": "further that these kinds of feature sets",
    "start": "523190",
    "end": "525589"
  },
  {
    "text": "were not available in the community of",
    "start": "525589",
    "end": "527420"
  },
  {
    "text": "open source editions and required",
    "start": "527420",
    "end": "529310"
  },
  {
    "text": "customers to license Enterprise editions",
    "start": "529310",
    "end": "532120"
  },
  {
    "text": "then finally what we",
    "start": "532120",
    "end": "533990"
  },
  {
    "text": "was that well there were a number of",
    "start": "533990",
    "end": "535430"
  },
  {
    "text": "products that supported both the",
    "start": "535430",
    "end": "536720"
  },
  {
    "text": "property graph and RDF models they",
    "start": "536720",
    "end": "539120"
  },
  {
    "text": "tended to do so with a strong bias for",
    "start": "539120",
    "end": "541010"
  },
  {
    "text": "one or the other so didn't give",
    "start": "541010",
    "end": "543200"
  },
  {
    "text": "customers the choice to choose the right",
    "start": "543200",
    "end": "545150"
  },
  {
    "text": "model for the right application so with",
    "start": "545150",
    "end": "549380"
  },
  {
    "start": "549000",
    "end": "549000"
  },
  {
    "text": "that in mind we designed Amazon Neptune",
    "start": "549380",
    "end": "551450"
  },
  {
    "text": "Amazon Neptune is a fully managed graph",
    "start": "551450",
    "end": "553940"
  },
  {
    "text": "database service Amazon Neptune is fast",
    "start": "553940",
    "end": "557090"
  },
  {
    "text": "and designed for graph applications",
    "start": "557090",
    "end": "559070"
  },
  {
    "text": "which need to have very high throughput",
    "start": "559070",
    "end": "561170"
  },
  {
    "text": "query answering with low latency so you",
    "start": "561170",
    "end": "564080"
  },
  {
    "text": "can query billions of relationships with",
    "start": "564080",
    "end": "566180"
  },
  {
    "text": "millisecond latency Amazon Neptune is",
    "start": "566180",
    "end": "569090"
  },
  {
    "text": "designed to be reliable it offers multi",
    "start": "569090",
    "end": "571790"
  },
  {
    "text": "a-z high availability supports further",
    "start": "571790",
    "end": "574760"
  },
  {
    "text": "horizontal scaling through read",
    "start": "574760",
    "end": "576320"
  },
  {
    "text": "replication and foot supports full",
    "start": "576320",
    "end": "578570"
  },
  {
    "text": "encryption at rest so it has the set of",
    "start": "578570",
    "end": "581120"
  },
  {
    "text": "enterprise features that customers",
    "start": "581120",
    "end": "582800"
  },
  {
    "text": "typically need to put a graph database",
    "start": "582800",
    "end": "584360"
  },
  {
    "text": "into production and it's easy to use by",
    "start": "584360",
    "end": "587780"
  },
  {
    "text": "supporting the most commonly used graph",
    "start": "587780",
    "end": "589430"
  },
  {
    "text": "models the property graph and the RDF",
    "start": "589430",
    "end": "591920"
  },
  {
    "text": "model and by providing support for",
    "start": "591920",
    "end": "593960"
  },
  {
    "text": "gremlin and Sparkle its query languages",
    "start": "593960",
    "end": "596990"
  },
  {
    "text": "we make it easy for you to use these",
    "start": "596990",
    "end": "598580"
  },
  {
    "text": "open api is to access the power of",
    "start": "598580",
    "end": "600920"
  },
  {
    "text": "Amazon Neptune this is a quick view of",
    "start": "600920",
    "end": "604970"
  },
  {
    "start": "604000",
    "end": "604000"
  },
  {
    "text": "the high-level architecture of Amazon",
    "start": "604970",
    "end": "606680"
  },
  {
    "text": "Neptune so if you look across the top",
    "start": "606680",
    "end": "608870"
  },
  {
    "text": "you'll see some of the use cases for",
    "start": "608870",
    "end": "610400"
  },
  {
    "text": "highly connected graph data and moving",
    "start": "610400",
    "end": "613130"
  },
  {
    "text": "down the stack you'll see the open",
    "start": "613130",
    "end": "614600"
  },
  {
    "text": "source and standard API is for property",
    "start": "614600",
    "end": "616610"
  },
  {
    "text": "graph tinkerer pop and gremlin and rdf",
    "start": "616610",
    "end": "619460"
  },
  {
    "text": "sparkle below that you'll see Amazon",
    "start": "619460",
    "end": "622880"
  },
  {
    "text": "Neptune Amazon Neptune is purpose-built",
    "start": "622880",
    "end": "625480"
  },
  {
    "text": "high-performance storage engine that's",
    "start": "625480",
    "end": "627410"
  },
  {
    "text": "optimized for graph it's both durable",
    "start": "627410",
    "end": "630140"
  },
  {
    "text": "and as a compliant providing immediate",
    "start": "630140",
    "end": "632150"
  },
  {
    "text": "consistency in addition to the standard",
    "start": "632150",
    "end": "635120"
  },
  {
    "text": "and open source API we also support",
    "start": "635120",
    "end": "637700"
  },
  {
    "text": "api's for managing the database in",
    "start": "637700",
    "end": "639830"
  },
  {
    "text": "particular we offer a fast parallel bulb",
    "start": "639830",
    "end": "642230"
  },
  {
    "text": "load of data that's stored within s3 in",
    "start": "642230",
    "end": "644840"
  },
  {
    "text": "addition to other database management",
    "start": "644840",
    "end": "646520"
  },
  {
    "text": "functionality then moving along towards",
    "start": "646520",
    "end": "648890"
  },
  {
    "text": "the bottom of the overall architecture",
    "start": "648890",
    "end": "650170"
  },
  {
    "text": "Amazon Neptune rides on a cloud native",
    "start": "650170",
    "end": "652670"
  },
  {
    "text": "storage service and this is what gives",
    "start": "652670",
    "end": "654740"
  },
  {
    "text": "it the ability to offer these sorts of",
    "start": "654740",
    "end": "656540"
  },
  {
    "text": "enterprise features for H a read",
    "start": "656540",
    "end": "658820"
  },
  {
    "text": "replication and encryption at rest so",
    "start": "658820",
    "end": "661220"
  },
  {
    "text": "let's look at both of these types of",
    "start": "661220",
    "end": "662780"
  },
  {
    "text": "graphs and how to create and query them",
    "start": "662780",
    "end": "664760"
  },
  {
    "text": "for a property graph we'll look at a",
    "start": "664760",
    "end": "666830"
  },
  {
    "text": "patch routine",
    "start": "666830",
    "end": "667430"
  },
  {
    "text": "pop and a gremlin query and for",
    "start": "667430",
    "end": "669890"
  },
  {
    "text": "knowledge graph we'll take a look at RDF",
    "start": "669890",
    "end": "671510"
  },
  {
    "text": "in a sparkle crew so you recall that the",
    "start": "671510",
    "end": "674750"
  },
  {
    "start": "674000",
    "end": "674000"
  },
  {
    "text": "first model we talked about was a",
    "start": "674750",
    "end": "676310"
  },
  {
    "text": "property graph and so in this this is",
    "start": "676310",
    "end": "678649"
  },
  {
    "text": "the next level of detail you can see in",
    "start": "678649",
    "end": "681170"
  },
  {
    "text": "a property graph the nodes or vertices",
    "start": "681170",
    "end": "682700"
  },
  {
    "text": "can be used to represent the core pieces",
    "start": "682700",
    "end": "685220"
  },
  {
    "text": "of information much like you would use",
    "start": "685220",
    "end": "687350"
  },
  {
    "text": "tables in a relational database in this",
    "start": "687350",
    "end": "689959"
  },
  {
    "text": "case we have a node which is of type",
    "start": "689959",
    "end": "691610"
  },
  {
    "text": "user and has an attribute name which",
    "start": "691610",
    "end": "694190"
  },
  {
    "text": "indicates to call Bill then we have a",
    "start": "694190",
    "end": "696740"
  },
  {
    "text": "second node or vertices in this case",
    "start": "696740",
    "end": "698510"
  },
  {
    "text": "also a user named Sara and there is a",
    "start": "698510",
    "end": "701600"
  },
  {
    "text": "relationship between called friend and",
    "start": "701600",
    "end": "704330"
  },
  {
    "text": "there is an attribute on this which is",
    "start": "704330",
    "end": "705860"
  },
  {
    "text": "the date of the friendship looking at",
    "start": "705860",
    "end": "708770"
  },
  {
    "text": "that friend relationship properties you",
    "start": "708770",
    "end": "710779"
  },
  {
    "text": "can see on this edge as it's known we",
    "start": "710779",
    "end": "712820"
  },
  {
    "text": "also store information making this as",
    "start": "712820",
    "end": "714830"
  },
  {
    "text": "first class citizen within a graph",
    "start": "714830",
    "end": "716779"
  },
  {
    "text": "database again looks like a table in a",
    "start": "716779",
    "end": "718730"
  },
  {
    "text": "relational database so in this example",
    "start": "718730",
    "end": "722330"
  },
  {
    "text": "of a property graph how would you create",
    "start": "722330",
    "end": "725990"
  },
  {
    "text": "this type of graph using apache tinker",
    "start": "725990",
    "end": "727970"
  },
  {
    "text": "bot in this example we're using three",
    "start": "727970",
    "end": "729740"
  },
  {
    "text": "point three which is the standard",
    "start": "729740",
    "end": "730910"
  },
  {
    "text": "supported by net Amazon Neptune and",
    "start": "730910",
    "end": "733040"
  },
  {
    "text": "you'll see the example of creating a",
    "start": "733040",
    "end": "735709"
  },
  {
    "text": "variable for each user by creating a",
    "start": "735709",
    "end": "738050"
  },
  {
    "text": "vertex or vertices for user one built",
    "start": "738050",
    "end": "740450"
  },
  {
    "text": "and user to Sara we can then create an",
    "start": "740450",
    "end": "743540"
  },
  {
    "text": "edge or relationship in this case of",
    "start": "743540",
    "end": "745550"
  },
  {
    "text": "type friend which is what you see on the",
    "start": "745550",
    "end": "747560"
  },
  {
    "text": "graphical representation here on the",
    "start": "747560",
    "end": "749240"
  },
  {
    "text": "right so the second model for you if you",
    "start": "749240",
    "end": "752480"
  },
  {
    "start": "751000",
    "end": "751000"
  },
  {
    "text": "recall are the RDF graphs RDF graphs are",
    "start": "752480",
    "end": "755660"
  },
  {
    "text": "really described as a collection of",
    "start": "755660",
    "end": "757370"
  },
  {
    "text": "what's called triples a triple consists",
    "start": "757370",
    "end": "760310"
  },
  {
    "text": "of a subject a predicate and an object",
    "start": "760310",
    "end": "763990"
  },
  {
    "text": "so in this case the subject is something",
    "start": "763990",
    "end": "766640"
  },
  {
    "text": "called an IRI",
    "start": "766640",
    "end": "767900"
  },
  {
    "text": "or international resource identifier",
    "start": "767900",
    "end": "769850"
  },
  {
    "text": "which provides unique identity here we",
    "start": "769850",
    "end": "773660"
  },
  {
    "text": "have the example of the predicate",
    "start": "773660",
    "end": "775220"
  },
  {
    "text": "specifying the type of the node which is",
    "start": "775220",
    "end": "777800"
  },
  {
    "text": "a user as per the previous example and",
    "start": "777800",
    "end": "780670"
  },
  {
    "text": "then moving down we have an attribute or",
    "start": "780670",
    "end": "783290"
  },
  {
    "text": "property which is the predicate contact",
    "start": "783290",
    "end": "785270"
  },
  {
    "text": "name which is Bill and that set of",
    "start": "785270",
    "end": "788480"
  },
  {
    "text": "triples describes a node we see on the",
    "start": "788480",
    "end": "790279"
  },
  {
    "text": "right now the third position we see a",
    "start": "790279",
    "end": "793160"
  },
  {
    "text": "triple the object can be either an IRI",
    "start": "793160",
    "end": "795500"
  },
  {
    "text": "or what we call a literal electril in",
    "start": "795500",
    "end": "798170"
  },
  {
    "text": "RDF is very much like a property",
    "start": "798170",
    "end": "800400"
  },
  {
    "text": "and the types of the literals that you",
    "start": "800400",
    "end": "801750"
  },
  {
    "text": "can have correspond to XML data types",
    "start": "801750",
    "end": "804110"
  },
  {
    "text": "you can also have in the object position",
    "start": "804110",
    "end": "806490"
  },
  {
    "text": "and IRI",
    "start": "806490",
    "end": "807450"
  },
  {
    "text": "and when you have an IRI in the object",
    "start": "807450",
    "end": "809790"
  },
  {
    "text": "position it forms what you would think",
    "start": "809790",
    "end": "811380"
  },
  {
    "text": "is an edge in the graph so as you look",
    "start": "811380",
    "end": "814440"
  },
  {
    "text": "across the bottom you can see how I",
    "start": "814440",
    "end": "815820"
  },
  {
    "text": "create a friend relationship where in",
    "start": "815820",
    "end": "818040"
  },
  {
    "text": "the object position I use that IRI",
    "start": "818040",
    "end": "820430"
  },
  {
    "text": "so if we expand this example to a full",
    "start": "820430",
    "end": "823140"
  },
  {
    "text": "graph that we looked at before you can",
    "start": "823140",
    "end": "825360"
  },
  {
    "text": "see how we can define them across the",
    "start": "825360",
    "end": "828510"
  },
  {
    "text": "top we have a set of triples which",
    "start": "828510",
    "end": "829980"
  },
  {
    "text": "defines the node bill or person 1 and",
    "start": "829980",
    "end": "832350"
  },
  {
    "text": "the second triple describes the",
    "start": "832350",
    "end": "834510"
  },
  {
    "text": "relationship the friend relationship",
    "start": "834510",
    "end": "836250"
  },
  {
    "text": "when person 1 connects to person 2 and",
    "start": "836250",
    "end": "838760"
  },
  {
    "text": "the third set of triples on the bottom",
    "start": "838760",
    "end": "841140"
  },
  {
    "text": "describes the second node for sale so",
    "start": "841140",
    "end": "844230"
  },
  {
    "text": "this is an example of how you would",
    "start": "844230",
    "end": "845730"
  },
  {
    "text": "build the same graph but in RDF",
    "start": "845730",
    "end": "849410"
  },
  {
    "text": "so going back to looking at the",
    "start": "849680",
    "end": "851850"
  },
  {
    "start": "851000",
    "end": "851000"
  },
  {
    "text": "relational versus graph modeling in this",
    "start": "851850",
    "end": "853830"
  },
  {
    "text": "case let's look at a fairly typical",
    "start": "853830",
    "end": "855390"
  },
  {
    "text": "order system on the left hand side you",
    "start": "855390",
    "end": "858930"
  },
  {
    "text": "see a relational model ERD",
    "start": "858930",
    "end": "860610"
  },
  {
    "text": "and on the right hand side you see a",
    "start": "860610",
    "end": "863310"
  },
  {
    "text": "graph equivalent of that mol so let's",
    "start": "863310",
    "end": "865650"
  },
  {
    "text": "look at some query examples to",
    "start": "865650",
    "end": "868290"
  },
  {
    "text": "understand the differences here so most",
    "start": "868290",
    "end": "871860"
  },
  {
    "text": "of you are likely familiar with sequel",
    "start": "871860",
    "end": "873750"
  },
  {
    "text": "in this query we want to ask a question",
    "start": "873750",
    "end": "876330"
  },
  {
    "text": "here of find the names of customers who",
    "start": "876330",
    "end": "878640"
  },
  {
    "text": "purchased the echo so as we go through",
    "start": "878640",
    "end": "881940"
  },
  {
    "text": "we are performing multiple joins from",
    "start": "881940",
    "end": "884040"
  },
  {
    "text": "the customer table to the orders table",
    "start": "884040",
    "end": "885870"
  },
  {
    "text": "to the order details and ultimately to",
    "start": "885870",
    "end": "888390"
  },
  {
    "text": "the product before applying a filter on",
    "start": "888390",
    "end": "890910"
  },
  {
    "text": "the product name echo this is a fairly",
    "start": "890910",
    "end": "893400"
  },
  {
    "text": "standard sequel query now if we look at",
    "start": "893400",
    "end": "896040"
  },
  {
    "start": "896000",
    "end": "896000"
  },
  {
    "text": "this in sparkle the declarative graph",
    "start": "896040",
    "end": "898740"
  },
  {
    "text": "query language for rdf rather than",
    "start": "898740",
    "end": "901020"
  },
  {
    "text": "expressing the joins as you would in",
    "start": "901020",
    "end": "902640"
  },
  {
    "text": "sequel what you express is a set of",
    "start": "902640",
    "end": "905580"
  },
  {
    "text": "triple patterns so recall that RDF is",
    "start": "905580",
    "end": "908220"
  },
  {
    "text": "made up of triples so here's the first",
    "start": "908220",
    "end": "911400"
  },
  {
    "text": "thing we expressed is a pattern for the",
    "start": "911400",
    "end": "913020"
  },
  {
    "text": "customer and the order in sparkle the",
    "start": "913020",
    "end": "916350"
  },
  {
    "text": "red variables that start with a question",
    "start": "916350",
    "end": "918030"
  },
  {
    "text": "mark are used across the triple patterns",
    "start": "918030",
    "end": "920130"
  },
  {
    "text": "to create the equivalent of joins in a",
    "start": "920130",
    "end": "922410"
  },
  {
    "text": "relational schema here you can see we",
    "start": "922410",
    "end": "925500"
  },
  {
    "text": "join the order to the order details and",
    "start": "925500",
    "end": "928470"
  },
  {
    "text": "finally we have a filter on the product",
    "start": "928470",
    "end": "930450"
  },
  {
    "text": "name",
    "start": "930450",
    "end": "930860"
  },
  {
    "text": "Iko so this is a sparkle curry example",
    "start": "930860",
    "end": "934280"
  },
  {
    "text": "where we're asking effectively the same",
    "start": "934280",
    "end": "935960"
  },
  {
    "text": "question about finding the names of",
    "start": "935960",
    "end": "937820"
  },
  {
    "text": "customers who've purchased an echo",
    "start": "937820",
    "end": "941350"
  },
  {
    "text": "gremlin provides an imperative traversal",
    "start": "941350",
    "end": "943880"
  },
  {
    "start": "942000",
    "end": "942000"
  },
  {
    "text": "language for the property graph so to",
    "start": "943880",
    "end": "946010"
  },
  {
    "text": "answer the same question finding the",
    "start": "946010",
    "end": "947870"
  },
  {
    "text": "names of customers who purchase an echo",
    "start": "947870",
    "end": "949640"
  },
  {
    "text": "in gremlin we're going to do it as a",
    "start": "949640",
    "end": "951350"
  },
  {
    "text": "graph traversal so first we start with",
    "start": "951350",
    "end": "954020"
  },
  {
    "text": "the product so we find all of the",
    "start": "954020",
    "end": "956090"
  },
  {
    "text": "vertices which have the label product",
    "start": "956090",
    "end": "957890"
  },
  {
    "text": "then we filter on that name for echo",
    "start": "957890",
    "end": "960520"
  },
  {
    "text": "then we start traversing the graph so we",
    "start": "960520",
    "end": "963950"
  },
  {
    "text": "go out to the order details to order to",
    "start": "963950",
    "end": "966770"
  },
  {
    "text": "customers and we find the unique",
    "start": "966770",
    "end": "968720"
  },
  {
    "text": "customer names deduping at the last step",
    "start": "968720",
    "end": "971090"
  },
  {
    "text": "so you can see here the differences here",
    "start": "971090",
    "end": "973070"
  },
  {
    "text": "between these two types of graph models",
    "start": "973070",
    "end": "975170"
  },
  {
    "text": "but how you can use them to answer the",
    "start": "975170",
    "end": "977420"
  },
  {
    "text": "same kind of question so let's look now",
    "start": "977420",
    "end": "981320"
  },
  {
    "text": "at a property graph and an Apache tinker",
    "start": "981320",
    "end": "983600"
  },
  {
    "text": "pop social networking friend",
    "start": "983600",
    "end": "985220"
  },
  {
    "text": "recommendation example the technique",
    "start": "985220",
    "end": "988580"
  },
  {
    "start": "988000",
    "end": "988000"
  },
  {
    "text": "that we're using here is a technique",
    "start": "988580",
    "end": "989870"
  },
  {
    "text": "called traffic closure this is very",
    "start": "989870",
    "end": "992630"
  },
  {
    "text": "similar to triangle counting a triangle",
    "start": "992630",
    "end": "994910"
  },
  {
    "text": "is the smallest fully connected subgraph",
    "start": "994910",
    "end": "996680"
  },
  {
    "text": "in a graph so the idea here is that of",
    "start": "996680",
    "end": "999710"
  },
  {
    "text": "two people we have a friend in common",
    "start": "999710",
    "end": "1001810"
  },
  {
    "text": "but there's not already an edge between",
    "start": "1001810",
    "end": "1004240"
  },
  {
    "text": "them that would represent an opportunity",
    "start": "1004240",
    "end": "1006460"
  },
  {
    "text": "to create a new triangle in the graph as",
    "start": "1006460",
    "end": "1009220"
  },
  {
    "text": "the",
    "start": "1009220",
    "end": "1009520"
  },
  {
    "text": "and could be the basis of a",
    "start": "1009520",
    "end": "1010900"
  },
  {
    "text": "recommendation so this is an example of",
    "start": "1010900",
    "end": "1014200"
  },
  {
    "text": "a triangle or a fully connected sub",
    "start": "1014200",
    "end": "1015820"
  },
  {
    "text": "graph where we everyone already knows",
    "start": "1015820",
    "end": "1017440"
  },
  {
    "text": "each other but let's see if there's an",
    "start": "1017440",
    "end": "1019810"
  },
  {
    "text": "opportunity to create these triangles",
    "start": "1019810",
    "end": "1021670"
  },
  {
    "text": "and make new recommendation so first we",
    "start": "1021670",
    "end": "1025240"
  },
  {
    "text": "start with Terry and we go out and find",
    "start": "1025240",
    "end": "1027670"
  },
  {
    "text": "the friends of Terry then we go out and",
    "start": "1027670",
    "end": "1030160"
  },
  {
    "text": "find the friends of Terry's friends now",
    "start": "1030160",
    "end": "1032709"
  },
  {
    "text": "we see that there is not already a",
    "start": "1032710",
    "end": "1034240"
  },
  {
    "text": "relationship between tearing Sara so",
    "start": "1034240",
    "end": "1036520"
  },
  {
    "text": "this represents our opportunity to make",
    "start": "1036520",
    "end": "1038560"
  },
  {
    "text": "a friend recommendation so we've looked",
    "start": "1038560",
    "end": "1042520"
  },
  {
    "text": "at this graphically now let's look at",
    "start": "1042520",
    "end": "1044770"
  },
  {
    "text": "this through a gremlin traversal here's",
    "start": "1044770",
    "end": "1046780"
  },
  {
    "text": "the overall traversal but now let's step",
    "start": "1046780",
    "end": "1049030"
  },
  {
    "text": "through it first we find Terry then we",
    "start": "1049030",
    "end": "1053320"
  },
  {
    "start": "1053000",
    "end": "1053000"
  },
  {
    "text": "find Friends of Terry then we go out and",
    "start": "1053320",
    "end": "1056170"
  },
  {
    "text": "find friends of these friends where",
    "start": "1056170",
    "end": "1058570"
  },
  {
    "text": "there does not already exist a friend",
    "start": "1058570",
    "end": "1060370"
  },
  {
    "text": "relationship with Terry so this is an",
    "start": "1060370",
    "end": "1063460"
  },
  {
    "text": "example",
    "start": "1063460",
    "end": "1064240"
  },
  {
    "text": "we can use gremlin and a property graph",
    "start": "1064240",
    "end": "1065980"
  },
  {
    "text": "to implement a very basic recommendation",
    "start": "1065980",
    "end": "1068620"
  },
  {
    "text": "mechanism using tragic closure now let's",
    "start": "1068620",
    "end": "1072010"
  },
  {
    "text": "take a look at an RDF knowledge graph",
    "start": "1072010",
    "end": "1073960"
  },
  {
    "text": "example so you'll recall that one of the",
    "start": "1073960",
    "end": "1077049"
  },
  {
    "text": "features of RDF is that it uses these",
    "start": "1077049",
    "end": "1079000"
  },
  {
    "text": "IRI mechanisms so in this example we're",
    "start": "1079000",
    "end": "1081820"
  },
  {
    "text": "going to look at some information that",
    "start": "1081820",
    "end": "1083470"
  },
  {
    "text": "represents companies and geographic",
    "start": "1083470",
    "end": "1086020"
  },
  {
    "text": "locations the company information is",
    "start": "1086020",
    "end": "1088630"
  },
  {
    "text": "taken from something that Thomson",
    "start": "1088630",
    "end": "1090130"
  },
  {
    "text": "Reuters provides which is the perm ID",
    "start": "1090130",
    "end": "1091929"
  },
  {
    "text": "data set and the geographic information",
    "start": "1091929",
    "end": "1094450"
  },
  {
    "text": "is taken from something called geonames",
    "start": "1094450",
    "end": "1096700"
  },
  {
    "text": "which is a publicly available data set",
    "start": "1096700",
    "end": "1098950"
  },
  {
    "text": "of geographic locations and code sets",
    "start": "1098950",
    "end": "1100960"
  },
  {
    "text": "and so here in the first example if you",
    "start": "1100960",
    "end": "1104380"
  },
  {
    "text": "look at the triple that we wanted to say",
    "start": "1104380",
    "end": "1105850"
  },
  {
    "text": "but this particular company we see the",
    "start": "1105850",
    "end": "1108340"
  },
  {
    "text": "euro I for the company and we'll see",
    "start": "1108340",
    "end": "1110350"
  },
  {
    "text": "later that it's actually Netflix has an",
    "start": "1110350",
    "end": "1112330"
  },
  {
    "text": "incorporation relationship with the",
    "start": "1112330",
    "end": "1113890"
  },
  {
    "text": "country so Netflix is incorporated in",
    "start": "1113890",
    "end": "1116380"
  },
  {
    "text": "the USA so there are a couple of nice",
    "start": "1116380",
    "end": "1119200"
  },
  {
    "text": "things to know here regarding RDF and",
    "start": "1119200",
    "end": "1121240"
  },
  {
    "text": "the Euro I or IR formats in particular",
    "start": "1121240",
    "end": "1125020"
  },
  {
    "text": "the standardization in the use of these",
    "start": "1125020",
    "end": "1127480"
  },
  {
    "text": "identifies helps you interchange data",
    "start": "1127480",
    "end": "1130090"
  },
  {
    "text": "with external systems and so that's one",
    "start": "1130090",
    "end": "1132610"
  },
  {
    "text": "of the features that we see most",
    "start": "1132610",
    "end": "1133899"
  },
  {
    "text": "frequently across RDF applications now",
    "start": "1133899",
    "end": "1137260"
  },
  {
    "text": "to take this example a little bit",
    "start": "1137260",
    "end": "1138640"
  },
  {
    "text": "further and look at just a single triple",
    "start": "1138640",
    "end": "1140409"
  },
  {
    "text": "you'll see here we have this again the",
    "start": "1140409",
    "end": "1143679"
  },
  {
    "text": "same statement shown now what we want to",
    "start": "1143679",
    "end": "1146320"
  },
  {
    "text": "look at is adding the property you'll",
    "start": "1146320",
    "end": "1148240"
  },
  {
    "text": "recall that properties are literals in",
    "start": "1148240",
    "end": "1150039"
  },
  {
    "text": "RDF which correspond to XML data types",
    "start": "1150039",
    "end": "1152860"
  },
  {
    "text": "and here you can see that this is how we",
    "start": "1152860",
    "end": "1155860"
  },
  {
    "text": "are expressing the name of the company",
    "start": "1155860",
    "end": "1157740"
  },
  {
    "text": "now if we look at this example as a full",
    "start": "1157740",
    "end": "1160179"
  },
  {
    "text": "set of triples we'll see the first set",
    "start": "1160179",
    "end": "1162370"
  },
  {
    "text": "of triples at the top which represents",
    "start": "1162370",
    "end": "1164740"
  },
  {
    "text": "the incorporation information the next",
    "start": "1164740",
    "end": "1167470"
  },
  {
    "text": "set of triples which describes the name",
    "start": "1167470",
    "end": "1169120"
  },
  {
    "text": "attributes in this case we're also",
    "start": "1169120",
    "end": "1171130"
  },
  {
    "text": "adding phone information and we're",
    "start": "1171130",
    "end": "1172750"
  },
  {
    "text": "pulling iso country code at the bottom",
    "start": "1172750",
    "end": "1174600"
  },
  {
    "text": "so i mentioned the benefits of using our",
    "start": "1174600",
    "end": "1177399"
  },
  {
    "text": "eyes or your eyes and one of the things",
    "start": "1177399",
    "end": "1179679"
  },
  {
    "text": "that this enables you to do is create",
    "start": "1179679",
    "end": "1181270"
  },
  {
    "text": "what is called linked data so this is",
    "start": "1181270",
    "end": "1185140"
  },
  {
    "text": "where you have different data sets which",
    "start": "1185140",
    "end": "1186580"
  },
  {
    "text": "are owned and managed by different",
    "start": "1186580",
    "end": "1187600"
  },
  {
    "text": "organizations but you can use them to",
    "start": "1187600",
    "end": "1190149"
  },
  {
    "text": "create new applications so in this",
    "start": "1190149",
    "end": "1192940"
  },
  {
    "text": "example you saw that we are using the",
    "start": "1192940",
    "end": "1194470"
  },
  {
    "text": "genome service to represent geographic",
    "start": "1194470",
    "end": "1196600"
  },
  {
    "text": "information",
    "start": "1196600",
    "end": "1197680"
  },
  {
    "text": "we can also include things like wiki",
    "start": "1197680",
    "end": "1199600"
  },
  {
    "text": "data which is structured information",
    "start": "1199600",
    "end": "1201040"
  },
  {
    "text": "from the wikimedia foundation by using",
    "start": "1201040",
    "end": "1204070"
  },
  {
    "text": "these IRI concepts we can guarantee",
    "start": "1204070",
    "end": "1205870"
  },
  {
    "text": "uniqueness and identified the different",
    "start": "1205870",
    "end": "1207880"
  },
  {
    "text": "data elements and we can easily use them",
    "start": "1207880",
    "end": "1210340"
  },
  {
    "text": "to bring things together so let's look",
    "start": "1210340",
    "end": "1212950"
  },
  {
    "text": "at some of the example of crewing this",
    "start": "1212950",
    "end": "1214570"
  },
  {
    "text": "kind of data so you'll recall that",
    "start": "1214570",
    "end": "1217720"
  },
  {
    "text": "Sparkle is the query language for rdf",
    "start": "1217720",
    "end": "1219970"
  },
  {
    "text": "it's a w3 standard it's a declarative",
    "start": "1219970",
    "end": "1222760"
  },
  {
    "text": "query language here we want to first",
    "start": "1222760",
    "end": "1226390"
  },
  {
    "text": "issue a sparkle query finding the name",
    "start": "1226390",
    "end": "1228550"
  },
  {
    "text": "of a particular organization with the",
    "start": "1228550",
    "end": "1230410"
  },
  {
    "text": "URI and so in this case you'll see the",
    "start": "1230410",
    "end": "1233560"
  },
  {
    "text": "Select statement at the top and you'll",
    "start": "1233560",
    "end": "1235030"
  },
  {
    "text": "recall from the order example the",
    "start": "1235030",
    "end": "1237190"
  },
  {
    "text": "variables in spark we'll start with the",
    "start": "1237190",
    "end": "1239050"
  },
  {
    "text": "brush mode",
    "start": "1239050",
    "end": "1239650"
  },
  {
    "text": "and this query results in the name of",
    "start": "1239650",
    "end": "1241600"
  },
  {
    "text": "the company been Netflix so if we wanted",
    "start": "1241600",
    "end": "1244810"
  },
  {
    "text": "to expand this out and look at all of",
    "start": "1244810",
    "end": "1246490"
  },
  {
    "text": "the predicates and their values we can",
    "start": "1246490",
    "end": "1248980"
  },
  {
    "text": "do this sort of query pattern which you",
    "start": "1248980",
    "end": "1250450"
  },
  {
    "text": "see at the top so we have a URI and then",
    "start": "1250450",
    "end": "1253330"
  },
  {
    "text": "we have two variables the property and",
    "start": "1253330",
    "end": "1255160"
  },
  {
    "text": "the node and this results in all of the",
    "start": "1255160",
    "end": "1258100"
  },
  {
    "text": "triples about that IRI so we can see the",
    "start": "1258100",
    "end": "1261700"
  },
  {
    "text": "name and the phone number and the",
    "start": "1261700",
    "end": "1263050"
  },
  {
    "text": "location and you recall the location is",
    "start": "1263050",
    "end": "1265630"
  },
  {
    "text": "an IRI itself so this can be further",
    "start": "1265630",
    "end": "1268090"
  },
  {
    "text": "dereferenced now suppose we wanted to",
    "start": "1268090",
    "end": "1271660"
  },
  {
    "text": "find the phone number for a company",
    "start": "1271660",
    "end": "1273340"
  },
  {
    "text": "called Netflix we can also express that",
    "start": "1273340",
    "end": "1275890"
  },
  {
    "text": "as a triple pattern in sparkle so again",
    "start": "1275890",
    "end": "1278980"
  },
  {
    "text": "looking at this query you'll see that",
    "start": "1278980",
    "end": "1280570"
  },
  {
    "text": "the organization native Netflix and we",
    "start": "1280570",
    "end": "1283750"
  },
  {
    "text": "want to find the phone number so this",
    "start": "1283750",
    "end": "1285310"
  },
  {
    "text": "returns both the IRI for the company",
    "start": "1285310",
    "end": "1287260"
  },
  {
    "text": "name Netflix as well as its phone number",
    "start": "1287260",
    "end": "1291240"
  },
  {
    "text": "expanding this further we could look to",
    "start": "1291480",
    "end": "1293470"
  },
  {
    "text": "join this information with additional",
    "start": "1293470",
    "end": "1295390"
  },
  {
    "text": "RDF data sets such as genomes in this",
    "start": "1295390",
    "end": "1298930"
  },
  {
    "text": "example query we take the is",
    "start": "1298930",
    "end": "1300640"
  },
  {
    "text": "incorporated in country name and match",
    "start": "1300640",
    "end": "1303310"
  },
  {
    "text": "this with the geonames data set to",
    "start": "1303310",
    "end": "1305050"
  },
  {
    "text": "include the ISO code in the query result",
    "start": "1305050",
    "end": "1308580"
  },
  {
    "text": "here is a more complex example also",
    "start": "1308580",
    "end": "1311590"
  },
  {
    "text": "adding filters to the query results",
    "start": "1311590",
    "end": "1313800"
  },
  {
    "text": "extracting the company name wiki data",
    "start": "1313800",
    "end": "1316450"
  },
  {
    "text": "URI and location from the perm ID RDF",
    "start": "1316450",
    "end": "1319540"
  },
  {
    "text": "graph data set then filtering by",
    "start": "1319540",
    "end": "1322210"
  },
  {
    "text": "companies with more than 1,000 employees",
    "start": "1322210",
    "end": "1323980"
  },
  {
    "text": "and then matching this with stock",
    "start": "1323980",
    "end": "1326260"
  },
  {
    "text": "exchange information from wiki data then",
    "start": "1326260",
    "end": "1329530"
  },
  {
    "text": "finally extracting both the local",
    "start": "1329530",
    "end": "1331480"
  },
  {
    "text": "and Chinese names for the company given",
    "start": "1331480",
    "end": "1334179"
  },
  {
    "text": "this introduction to knowledge graphs",
    "start": "1334179",
    "end": "1335590"
  },
  {
    "text": "and how they can combine both public and",
    "start": "1335590",
    "end": "1337720"
  },
  {
    "text": "private information to build combined",
    "start": "1337720",
    "end": "1339580"
  },
  {
    "text": "model and then query you can see how",
    "start": "1339580",
    "end": "1342070"
  },
  {
    "text": "through this Semantic Web standard you",
    "start": "1342070",
    "end": "1343750"
  },
  {
    "text": "can build very powerful new applications",
    "start": "1343750",
    "end": "1345639"
  },
  {
    "text": "leveraging this data and relationships",
    "start": "1345639",
    "end": "1347950"
  },
  {
    "text": "within it",
    "start": "1347950",
    "end": "1349409"
  },
  {
    "text": "so to recap Amazon Neptune supports both",
    "start": "1349409",
    "end": "1352929"
  },
  {
    "text": "types of graph models we explored today",
    "start": "1352929",
    "end": "1355059"
  },
  {
    "text": "through examples of property and RDF",
    "start": "1355059",
    "end": "1357100"
  },
  {
    "text": "knowledge graphs along with their open",
    "start": "1357100",
    "end": "1359019"
  },
  {
    "text": "API standards it provides a high",
    "start": "1359019",
    "end": "1361539"
  },
  {
    "text": "availability asset compliant with",
    "start": "1361539",
    "end": "1363519"
  },
  {
    "text": "immediate consistent database service we",
    "start": "1363519",
    "end": "1365649"
  },
  {
    "text": "support for up to 15 read replicas",
    "start": "1365649",
    "end": "1368019"
  },
  {
    "text": "it supports encryption at rest as well",
    "start": "1368019",
    "end": "1370480"
  },
  {
    "text": "as enforcement of TLS as well as it",
    "start": "1370480",
    "end": "1372820"
  },
  {
    "text": "provides many database administration",
    "start": "1372820",
    "end": "1374710"
  },
  {
    "text": "tasks such as backup and restore put in",
    "start": "1374710",
    "end": "1376870"
  },
  {
    "text": "time recovery as well as fast ingestion",
    "start": "1376870",
    "end": "1378970"
  },
  {
    "text": "from datasets hosted within s3 if you",
    "start": "1378970",
    "end": "1382659"
  },
  {
    "text": "wish to continue your learning path with",
    "start": "1382659",
    "end": "1384279"
  },
  {
    "text": "Amazon Neptune or any other Amazon Web",
    "start": "1384279",
    "end": "1386260"
  },
  {
    "text": "Services offerings there is online",
    "start": "1386260",
    "end": "1387970"
  },
  {
    "text": "self-paced digital training as well as",
    "start": "1387970",
    "end": "1390130"
  },
  {
    "text": "in-person classroom based training to",
    "start": "1390130",
    "end": "1391840"
  },
  {
    "text": "support your education journey",
    "start": "1391840",
    "end": "1393279"
  },
  {
    "text": "there is also an hour variety of",
    "start": "1393279",
    "end": "1395139"
  },
  {
    "text": "learning paths and certifications to",
    "start": "1395139",
    "end": "1396730"
  },
  {
    "text": "support your professional development I",
    "start": "1396730",
    "end": "1398559"
  },
  {
    "text": "would recommend if you have not already",
    "start": "1398559",
    "end": "1400600"
  },
  {
    "text": "done so to visit the ADA based training",
    "start": "1400600",
    "end": "1402220"
  },
  {
    "text": "website to explore the various learning",
    "start": "1402220",
    "end": "1404320"
  },
  {
    "text": "paths and formats now available a DBS",
    "start": "1404320",
    "end": "1406960"
  },
  {
    "text": "has a wide partner ecosystem to help you",
    "start": "1406960",
    "end": "1408970"
  },
  {
    "text": "focus on your success and take full",
    "start": "1408970",
    "end": "1410769"
  },
  {
    "text": "advantage of the business benefits that",
    "start": "1410769",
    "end": "1412450"
  },
  {
    "text": "ad bus has to offer learn more about how",
    "start": "1412450",
    "end": "1416110"
  },
  {
    "text": "APN partners can help you and find the",
    "start": "1416110",
    "end": "1418029"
  },
  {
    "text": "right APN partners for your needs visit",
    "start": "1418029",
    "end": "1421299"
  },
  {
    "text": "the ADA base a p.m. booth at our",
    "start": "1421299",
    "end": "1422980"
  },
  {
    "text": "showcase thank you for attending today",
    "start": "1422980",
    "end": "1425559"
  },
  {
    "text": "and we look forward to your feedback on",
    "start": "1425559",
    "end": "1426909"
  },
  {
    "text": "the session",
    "start": "1426909",
    "end": "1429299"
  }
]