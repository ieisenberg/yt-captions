[
  {
    "text": "good morning everybody did you enjoy the party did you like the party was it",
    "start": "960",
    "end": "9280"
  },
  {
    "text": "good first of all thank you so much for coming here even though you were at the",
    "start": "9280",
    "end": "14799"
  },
  {
    "text": "party yesterday and for dragging yourselves out of bed thank you very much this deserves your own Applause here this is really",
    "start": "14799",
    "end": "20800"
  },
  {
    "text": "good I know it's tough welcome to the last day of",
    "start": "20800",
    "end": "26519"
  },
  {
    "text": "reinland and um we hope that we have some very good content for you prepare that makes it worthwhile having dragged",
    "start": "26519",
    "end": "32680"
  },
  {
    "text": "yourselves out of bed welcome to the running lean architecture session and uh",
    "start": "32680",
    "end": "37800"
  },
  {
    "text": "my name is conin Gonzalez I'm a Solutions architect with the Amazon web services Germany team and this is Marcus",
    "start": "37800",
    "end": "44960"
  },
  {
    "text": "artak from our customer Team Internet so this is actually the third time we are",
    "start": "44960",
    "end": "50760"
  },
  {
    "text": "presenting this talk at reinvent so who was here last year for the same talk okay don't worry we brought some",
    "start": "50760",
    "end": "58480"
  },
  {
    "text": "new content for you so why are you here so first of all my goal here is to",
    "start": "58480",
    "end": "66360"
  },
  {
    "text": "help you lower your AWS Bill and actually I want to make it really specific I want you to save at least as",
    "start": "66360",
    "end": "75040"
  },
  {
    "text": "much money as you will need to come to next year's reinvent including flight hotel ticket",
    "start": "75040",
    "end": "81079"
  },
  {
    "text": "whatever and um I'm pretty confident that we can do that so there are so many",
    "start": "81079",
    "end": "86799"
  },
  {
    "text": "ways to save money um we we're going to discuss all of them and even if you",
    "start": "86799",
    "end": "92119"
  },
  {
    "text": "choose just one or two it'll be enough to save for your next year's reinvent ticket but we'll also discuss some",
    "start": "92119",
    "end": "100079"
  },
  {
    "text": "things that you can do to make your architecture more scalable more robust and more Dynamic which is also a good",
    "start": "100079",
    "end": "106240"
  },
  {
    "text": "thing right and you'll also gain some more time to innovate so that you can create new Solutions new stuff for your",
    "start": "106240",
    "end": "114079"
  },
  {
    "text": "customers instead of worrying about infrastructure and other things we're",
    "start": "114079",
    "end": "119640"
  },
  {
    "text": "going to check out some real world customer examples and um a lot of these things are pretty easy to implement so",
    "start": "119640",
    "end": "126000"
  },
  {
    "text": "let's get started actually if you want to be really lazy you can get away with doing",
    "start": "126000",
    "end": "133480"
  },
  {
    "text": "nothing and the reason is that AWS as a company is built on reducing prices and",
    "start": "133480",
    "end": "141599"
  },
  {
    "text": "why well whenever we reduce prices we see more customers joining our platform right and when we see more customers we",
    "start": "141599",
    "end": "148440"
  },
  {
    "text": "see more AWS usage which means that we get to build more infrastructure which in turn means that",
    "start": "148440",
    "end": "154800"
  },
  {
    "text": "we can enjoy better economies of scale quite frankly the more people use AWS",
    "start": "154800",
    "end": "160599"
  },
  {
    "text": "the lower our prices get the better we can negotiate better prices for it equipment for you and that means that we",
    "start": "160599",
    "end": "166519"
  },
  {
    "text": "get to enjoy lower infrastructure costs and that in turn helps us reduce prices and we always choose since we are a",
    "start": "166519",
    "end": "172400"
  },
  {
    "text": "retailer to always reinvest whatever we can save into our customers by lowering",
    "start": "172400",
    "end": "178360"
  },
  {
    "text": "prices and there there are two things that accelerate this virtual cycle one of them is the more people use AWS the",
    "start": "178360",
    "end": "185239"
  },
  {
    "text": "bigger the ecosystem becomes the more Partners come on board the more solutions become available the more features we can create and new services",
    "start": "185239",
    "end": "192799"
  },
  {
    "text": "that we can create out of that and the other thing is it's not just about",
    "start": "192799",
    "end": "198120"
  },
  {
    "text": "getting better deals with your suppliers because the bigger our infrastructure gets the bigger the problems become that",
    "start": "198120",
    "end": "205040"
  },
  {
    "text": "we can tackle we can now start looking at things like more optimized power supply for whole buildings and data",
    "start": "205040",
    "end": "211760"
  },
  {
    "text": "centers we can start engineering bigger components that help us in save even",
    "start": "211760",
    "end": "217519"
  },
  {
    "text": "more money and be more efficient which again helps us reduce prices and since 2006 we were able to reduce our prices",
    "start": "217519",
    "end": "225120"
  },
  {
    "text": "50 times and of course we plan to continue doing so well you can also get away with doing",
    "start": "225120",
    "end": "232720"
  },
  {
    "text": "almost nothing and that means that if you have booked AWS business or Enterprise support you get access to the",
    "start": "232720",
    "end": "238480"
  },
  {
    "text": "AWS trusted advisory tool and trusted advisor is an expert system it's a compl completely automated system that will",
    "start": "238480",
    "end": "245319"
  },
  {
    "text": "scan your infrastructure and point out Improvement opportunities for you improvements in Security in availability",
    "start": "245319",
    "end": "253599"
  },
  {
    "text": "and even in cost optimization so AWS trusted advisor can deliver to you a weekly report pointing out the pieces of",
    "start": "253599",
    "end": "260840"
  },
  {
    "text": "your architecture where you can save money and we have many customers that just by buying business support and",
    "start": "260840",
    "end": "268120"
  },
  {
    "text": "using the AWS trusted advisor service we're able to recoup back the whole costs for business support So",
    "start": "268120",
    "end": "274000"
  },
  {
    "text": "essentially you can get business support for free by just listening to the AWS trusted advisor",
    "start": "274000",
    "end": "280720"
  },
  {
    "text": "recommendations and another thing is important here in the old world of it",
    "start": "282280",
    "end": "287680"
  },
  {
    "text": "when you build something you spend a lot of time planning and negotiating and putting together some sort of",
    "start": "287680",
    "end": "294120"
  },
  {
    "text": "architecture blueprint and then you build something and then eventually after a few months you run it and then",
    "start": "294120",
    "end": "300800"
  },
  {
    "text": "your architecture is pretty much set in stone there are not many things you can optimize at least not cost because if",
    "start": "300800",
    "end": "306919"
  },
  {
    "text": "you end up buying more equipment to optimize something you actually have to pay more in the cloud world this thing",
    "start": "306919",
    "end": "314479"
  },
  {
    "text": "becomes a cycle you can architect the solution you can start small you can build something and then you can monitor",
    "start": "314479",
    "end": "320560"
  },
  {
    "text": "and then you can identify what are the next Improvement opportunities then you can re architect change your",
    "start": "320560",
    "end": "327080"
  },
  {
    "text": "architecture tweak it and become more efficient over time so I would encourage you to see cost optimization as a cycle",
    "start": "327080",
    "end": "334440"
  },
  {
    "text": "and such a cycle can happen in minutes or hours or days whatever at whatever Pace that you",
    "start": "334440",
    "end": "341039"
  },
  {
    "text": "want so I know you're here to learn some more specific ways to re architect and",
    "start": "341039",
    "end": "346120"
  },
  {
    "text": "improve your cost so let's take a look at some seven steps you can take seven specific things you can do to architect",
    "start": "346120",
    "end": "352880"
  },
  {
    "text": "for lower cost and if there's one thing I want you to take away is the best way the easiest",
    "start": "352880",
    "end": "359479"
  },
  {
    "text": "way way to save cost is by turning off unused instances it sounds pretty pretty",
    "start": "359479",
    "end": "365759"
  },
  {
    "text": "basic right but you wouldn't believe how many customers I see who are running are still running AWS instances 24/7 even",
    "start": "365759",
    "end": "373240"
  },
  {
    "text": "though they don't have to and there are so many opportunities you can look at your developer and test and training instances you only need them during the",
    "start": "373240",
    "end": "380680"
  },
  {
    "text": "working hours of weekdays you don't need them at night you don't need them over the weekends you can just switch them off over the weekend and since we are",
    "start": "380680",
    "end": "387440"
  },
  {
    "text": "completely based on a pay-per use model where whenever you switch off an instance you stop paying for it you can",
    "start": "387440",
    "end": "394160"
  },
  {
    "text": "even you can just start with simple instance start and stop in the console or you can tear up and build up whole",
    "start": "394160",
    "end": "400199"
  },
  {
    "text": "architectures at a press of a button using automation techniques such as AWS",
    "start": "400199",
    "end": "405280"
  },
  {
    "text": "cloud formation so think of AWS instances as disposable units of compute that you can throw away when you don't",
    "start": "405280",
    "end": "411520"
  },
  {
    "text": "need them and then save money here's an example of a customer",
    "start": "411520",
    "end": "417039"
  },
  {
    "text": "it's a large software company and uh you can can see in these in this graph what their instance usage is over different",
    "start": "417039",
    "end": "423479"
  },
  {
    "text": "types of instances and if and they do it right they start they consequently they always switch off unused instances for",
    "start": "423479",
    "end": "430440"
  },
  {
    "text": "testing and development and for training and you can see how the weekday become visible in this graph as they turn off",
    "start": "430440",
    "end": "436680"
  },
  {
    "text": "the instance overnight you can see the weekends where the graph goes down and you can even see some holiday patterns",
    "start": "436680",
    "end": "442160"
  },
  {
    "text": "in this graph as you notice how Dynamic their use of AWS ec2",
    "start": "442160",
    "end": "447680"
  },
  {
    "text": "is and in this particular ular case this customer has saved 35% of their ec2 bill",
    "start": "447680",
    "end": "454440"
  },
  {
    "text": "just by thinking smart about when they need their instances and shutting them down when they're not used",
    "start": "454440",
    "end": "461560"
  },
  {
    "text": "anymore so of course you can be a little bit more more Dynamic here a little bit",
    "start": "462160",
    "end": "467759"
  },
  {
    "text": "more sophisticated by automating your setup right and there are many ways to",
    "start": "467759",
    "end": "473039"
  },
  {
    "text": "automate your AWS setup you can use the AWS software development kits you can use the AWS command line interface so",
    "start": "473039",
    "end": "479520"
  },
  {
    "text": "who has used a command line interface before okay I'm a big fan there are great sessions on re about how to",
    "start": "479520",
    "end": "485440"
  },
  {
    "text": "optimize the use of command line interface so you can set up simple scripts that do the start and stop of",
    "start": "485440",
    "end": "490680"
  },
  {
    "text": "unused instances thing for you you can use cloud formation to start and stop",
    "start": "490680",
    "end": "495879"
  },
  {
    "text": "whole architectures and whole data centers at the same time or opsw works and there are some thirdparty tools by",
    "start": "495879",
    "end": "501680"
  },
  {
    "text": "our customers and our partners who can help you be more automatic and and and and be more Dynamic such as the Netflix",
    "start": "501680",
    "end": "508639"
  },
  {
    "text": "janitor monkey which will automatically scan your infrastructure for instances that are not really nicely tagged or",
    "start": "508639",
    "end": "515560"
  },
  {
    "text": "will automatically shut down certain instances based on your rules or you can use the cloud litics ec2 schul which is",
    "start": "515560",
    "end": "521560"
  },
  {
    "text": "kind of like a cron for switching on and off instances there are many ways to automate and I'd like to point out one",
    "start": "521560",
    "end": "527200"
  },
  {
    "text": "specific way which is autoscaling so autoscaling is an AWS",
    "start": "527200",
    "end": "533680"
  },
  {
    "text": "feature that you probably know who uses Auto scaling already this is great last year it was",
    "start": "533680",
    "end": "539279"
  },
  {
    "text": "just just a third of the room and now it's more than half of the room this is great so I see that this talk is working",
    "start": "539279",
    "end": "545399"
  },
  {
    "text": "so Autos scaling works like this you set up your auto scaling group of instances maybe they are web servers or",
    "start": "545399",
    "end": "550480"
  },
  {
    "text": "application servers and you attach them to Amazon cloudwatch metrix which measure the load on your instances or",
    "start": "550480",
    "end": "557079"
  },
  {
    "text": "you can attach them to a scheduled uh to an event scheduler and over time as your",
    "start": "557079",
    "end": "562839"
  },
  {
    "text": "instances are being used more and more the cloudwatch will send an alarm to the",
    "start": "562839",
    "end": "568279"
  },
  {
    "text": "autoscaling group telling telling the Autos scaling group that you need more capacity and then Auto scaling will",
    "start": "568279",
    "end": "573720"
  },
  {
    "text": "automatically launch a new instance attach it to your group and your load balancer and your instance number grows",
    "start": "573720",
    "end": "580160"
  },
  {
    "text": "with demand and the whole system works also backwards because if your instances are not being used anymore that much",
    "start": "580160",
    "end": "587360"
  },
  {
    "text": "this Autos scaling system will automatically shut down unused instances for you and then you will go back to a",
    "start": "587360",
    "end": "593519"
  },
  {
    "text": "smaller instance use so this is a very simple system it's simple to set up you can bring down everything in to code",
    "start": "593519",
    "end": "599920"
  },
  {
    "text": "this is an example in cloud formation on how to set up a launch configuration that contains everything autoscaling",
    "start": "599920",
    "end": "605200"
  },
  {
    "text": "needs to know before starting a new instance and this is how you set up the actual Autos scaling group with the",
    "start": "605200",
    "end": "611720"
  },
  {
    "text": "availability zones you want to be spread across and uh with some other parameters",
    "start": "611720",
    "end": "617120"
  },
  {
    "text": "such as the minimum and maximum size for your Autos scaling group so essentially what autos scaling does it helps you",
    "start": "617120",
    "end": "622800"
  },
  {
    "text": "align Resources with demand and it makes sure that you only spend the the",
    "start": "622800",
    "end": "628399"
  },
  {
    "text": "necessary amount of money because you only start just the necessary amount of ec2 instances for your",
    "start": "628399",
    "end": "636880"
  },
  {
    "text": "job well some people at this point say yeah I get this autoscaling thing but I",
    "start": "636880",
    "end": "642000"
  },
  {
    "text": "have so many applications they are so small I always only need one instance no matter how much load I have and then I",
    "start": "642000",
    "end": "647639"
  },
  {
    "text": "have these other small batch jobs and whatever here and I always need end up using just one instance for my stuff how",
    "start": "647639",
    "end": "653959"
  },
  {
    "text": "can I optimize here and this is where some new stuff comes in that we launched last year",
    "start": "653959",
    "end": "659800"
  },
  {
    "text": "you can use Amazon E2 container service to consolidate small workloads into a",
    "start": "659800",
    "end": "666639"
  },
  {
    "text": "slower amount of instances so just as a quick recap the ec2 container service or Amazon ECS is a service that helps you",
    "start": "666639",
    "end": "674880"
  },
  {
    "text": "easily manage Docker containers it provides for some flexible container",
    "start": "674880",
    "end": "679959"
  },
  {
    "text": "placement it's designed to be used with other AWS services and it is extensible it's easy to use and it helps you manage",
    "start": "679959",
    "end": "687680"
  },
  {
    "text": "Docker containers and the way you can save money with this is by simply looking at all your very small applications that may be running each on",
    "start": "687680",
    "end": "694680"
  },
  {
    "text": "their own individual server and then start consolidating them down into Docker containers that can run on a",
    "start": "694680",
    "end": "701600"
  },
  {
    "text": "smaller amount of servers because essentially in this case we use the docker feature that enables you to sort",
    "start": "701600",
    "end": "708360"
  },
  {
    "text": "of pretend that you're running inside a machine even though it's just a container and that means that you can",
    "start": "708360",
    "end": "713440"
  },
  {
    "text": "isolate your small jobs from each other so that enables you to run multiple",
    "start": "713440",
    "end": "719959"
  },
  {
    "text": "applications on the same AWS instances so this simple example here shows how you can run how you can consolidate down",
    "start": "719959",
    "end": "726920"
  },
  {
    "text": "from six instances to two by wrapping everything into Docker containers so take a look at Amazon ECS if you haven't",
    "start": "726920",
    "end": "733160"
  },
  {
    "text": "already and try to consolidate your smaller applications into Docker",
    "start": "733160",
    "end": "738480"
  },
  {
    "text": "containers now there's an even smaller way to run containers and that is AWS Lambda so here's a very quick example on",
    "start": "738480",
    "end": "745800"
  },
  {
    "text": "how Lambda Works in this case we have an Amazon S3 bucket and if you drop in a new image into this",
    "start": "745800",
    "end": "751959"
  },
  {
    "text": "bucket you can set it up to trigger a Lambda function the Lambda function is where you actual application runs it's",
    "start": "751959",
    "end": "758079"
  },
  {
    "text": "not running in a container anymore it's just a piece of code that you give AWS Lambda that will be executed when an",
    "start": "758079",
    "end": "764399"
  },
  {
    "text": "event happens in this case it was a picture event and then it'll do the picture compression automatically and",
    "start": "764399",
    "end": "770120"
  },
  {
    "text": "then it will shut itself down and I'd like to borrow a phrase from verner's keynote yesterday because there is no",
    "start": "770120",
    "end": "777320"
  },
  {
    "text": "cheaper servers than no servers and actually ads Lambda enables you to set",
    "start": "777320",
    "end": "782920"
  },
  {
    "text": "up a a completely serverless architecture because it it takes automatically care of scaling it takes",
    "start": "782920",
    "end": "789639"
  },
  {
    "text": "care of provisioning you don't need to manage any infrastructure you just bring your own code and you get a million",
    "start": "789639",
    "end": "796040"
  },
  {
    "text": "requests for only 20 cents so a million triggers a million executions of your Lambda function for 20 cents and the",
    "start": "796040",
    "end": "803160"
  },
  {
    "text": "first million are free so the granularity is also another important thing with ec2 to the",
    "start": "803160",
    "end": "809320"
  },
  {
    "text": "granularity is an hour and with Lambda we pay we build you only at a 100 millisecond granularity for executing",
    "start": "809320",
    "end": "816279"
  },
  {
    "text": "your code so this is a great way of not paying for idle time by just porting",
    "start": "816279",
    "end": "822560"
  },
  {
    "text": "your applications into a set of Lambda functions and the Lambda team told us that if you see 40% or less utilization",
    "start": "822560",
    "end": "830839"
  },
  {
    "text": "on your existing ec2 servers that's a great opportunity to save money with Lambda because then you can set up a",
    "start": "830839",
    "end": "836800"
  },
  {
    "text": "Lambda architecture that is dynamic and that does the same thing uh at a lower",
    "start": "836800",
    "end": "842079"
  },
  {
    "text": "cost quick question there are different uh classes",
    "start": "842079",
    "end": "849680"
  },
  {
    "text": "of memory with different classes of pricing and the price this price is the beginning price for the smallest Lambda",
    "start": "849680",
    "end": "856000"
  },
  {
    "text": "function memory so try to think about aw is Lambda and how you can Port your",
    "start": "856000",
    "end": "861440"
  },
  {
    "text": "application to it now the number three thing you can do and this is a bit more on the billing side is you can use",
    "start": "861440",
    "end": "867519"
  },
  {
    "text": "reserved instances so how does reserved instances mean well the normal pricing",
    "start": "867519",
    "end": "872720"
  },
  {
    "text": "scheme is a fully payer use price you just use ec2 and you pay per hour and",
    "start": "872720",
    "end": "878720"
  },
  {
    "text": "that's it but if you know up front how much usage you're expecting you can pay",
    "start": "878720",
    "end": "884279"
  },
  {
    "text": "up front and therefore save a lot of money because reserved instances work like this you reserve a certain amount",
    "start": "884279",
    "end": "890680"
  },
  {
    "text": "of capacity you pay them up front and then you enjoy a very very low a much lower on demand price for that instance",
    "start": "890680",
    "end": "898880"
  },
  {
    "text": "and and in this graph you can see how this can play out over time the blue line is your regular on demand pricing",
    "start": "898880",
    "end": "905199"
  },
  {
    "text": "you can see in the red line which is a one-year reserved instance line that in the first month you get built the",
    "start": "905199",
    "end": "911279"
  },
  {
    "text": "reservation fee which is of course a bit more than the hourly fee but then over time it levels itself out as the hourly",
    "start": "911279",
    "end": "917959"
  },
  {
    "text": "the low hourly price kicks in and then you will end up paying a lot less after",
    "start": "917959",
    "end": "923480"
  },
  {
    "text": "one year or after 2 years I would recommend to only buy one year reserved",
    "start": "923480",
    "end": "928720"
  },
  {
    "text": "in actually because since we like to lower prices all the time you definitely want to be there when we lower our price",
    "start": "928720",
    "end": "935880"
  },
  {
    "text": "and then buy the next reserved instance threee reserved instances have their reason for existing U but this is more",
    "start": "935880",
    "end": "942399"
  },
  {
    "text": "like for billing reasons if you have some accounting policies that are like stretching two three years so for practical reasons I would say onee",
    "start": "942399",
    "end": "949160"
  },
  {
    "text": "reserved instances are The Sweet Spot and as you can see the break even for buying an reserved instance can happen",
    "start": "949160",
    "end": "955199"
  },
  {
    "text": "as early as after 5 months reserved instes are flexible you can",
    "start": "955199",
    "end": "961120"
  },
  {
    "text": "move them between availability zones you can move them between platforms you can modify them so you can really um reuse",
    "start": "961120",
    "end": "968120"
  },
  {
    "text": "them if you happen to change your architecture after having bought some reserved instances and there are some tools that",
    "start": "968120",
    "end": "974560"
  },
  {
    "text": "help you check your savings over time so you can verify that your purchase was a good decision and that can help you",
    "start": "974560",
    "end": "980000"
  },
  {
    "text": "analyze your instance usage so that you can identify where the next best purchase should come from so with that",
    "start": "980000",
    "end": "987360"
  },
  {
    "text": "I'd like to hand it over to Marcus because Marcos at Team Internet he has a pretty good understanding on how to",
    "start": "987360",
    "end": "993480"
  },
  {
    "text": "leverage reserved instances for saving money so here's Marcos yeah thanks Constantine actually um a little bit",
    "start": "993480",
    "end": "999560"
  },
  {
    "text": "about what who is Tim internet um I'm the head of development at Tim internet and we're one of the leading companies",
    "start": "999560",
    "end": "1005120"
  },
  {
    "text": "in the domain monetization business so everything around domain parking domain registration those kind of stuff we are",
    "start": "1005120",
    "end": "1012000"
  },
  {
    "text": "actually only 20 people um so a fairly small company and our headquarters is in Munich Germany and we are a very very",
    "start": "1012000",
    "end": "1018600"
  },
  {
    "text": "Tech focused company that's why we can be so small because we're always trying to scale within Tech and not with people",
    "start": "1018600",
    "end": "1025798"
  },
  {
    "text": "we have two main projects one of the project is parking crew.com which is one of the leading parking platforms of the world and the other one which is the",
    "start": "1025799",
    "end": "1032640"
  },
  {
    "text": "project I want to talk about a little bit more today is DNX DNX is 100% inside",
    "start": "1032640",
    "end": "1038839"
  },
  {
    "text": "of AWS and DNX is kind of a real-time bidding Marketplace for domain traffic",
    "start": "1038839",
    "end": "1045240"
  },
  {
    "text": "so what we are actually doing is if a user enters a domain this URL browser bar um which is parked with a parking",
    "start": "1045240",
    "end": "1051280"
  },
  {
    "text": "company we get a call from this parking company that there is a user right now",
    "start": "1051280",
    "end": "1056960"
  },
  {
    "text": "we're trying to find out some kind of related information targeting information for our Advertiser base our",
    "start": "1056960",
    "end": "1062919"
  },
  {
    "text": "Advertiser base has more than 10,000 advertisers with more than 250,000 campaigns right now and we're trying to",
    "start": "1062919",
    "end": "1068960"
  },
  {
    "text": "find the highest bidder for this specific user the parking platform is asking us for so we're trying to find",
    "start": "1068960",
    "end": "1076000"
  },
  {
    "text": "out okay we're able to pay around 5 us sent for example for this user and then we deliver back this specific bit to the",
    "start": "1076000",
    "end": "1083159"
  },
  {
    "text": "parking platform the parking platform then redirects the user to our tracking platform and we redirect the user",
    "start": "1083159",
    "end": "1088480"
  },
  {
    "text": "directly to the landing page of the advertiser the whole process I just explained needs to take place within 200",
    "start": "1088480",
    "end": "1094280"
  },
  {
    "text": "to 300 milliseconds so um we're talking about a very very fast process and",
    "start": "1094280",
    "end": "1101080"
  },
  {
    "text": "actually right now we're seeing up to 15,000 requests per second from parking platforms so we're also talking about a",
    "start": "1101080",
    "end": "1108840"
  },
  {
    "text": "really huge volume so like Constantin just said we're making a very heavy usage of reserved instance and what you",
    "start": "1108840",
    "end": "1115960"
  },
  {
    "text": "can see here is the green part of the bars are actually our instance hours which are backed by reserved instances",
    "start": "1115960",
    "end": "1122280"
  },
  {
    "text": "and the gray part of the bars are our on demand usage so we're always trying our",
    "start": "1122280",
    "end": "1127559"
  },
  {
    "text": "goal is actually um to get 100% instance hours backed by reserv instances so",
    "start": "1127559",
    "end": "1133960"
  },
  {
    "text": "because obviously we can save 50 to 60% um what we're trying to do is uh we",
    "start": "1133960",
    "end": "1140400"
  },
  {
    "text": "have one rule of thump in our company which fits for our use case at least but maybe that's something you can adapt in",
    "start": "1140400",
    "end": "1146440"
  },
  {
    "text": "your company too if an instance that runs for 24/7 for more than two weeks",
    "start": "1146440",
    "end": "1151960"
  },
  {
    "text": "and can't be stopped right now so in this very moment we buy reserved",
    "start": "1151960",
    "end": "1157039"
  },
  {
    "text": "instance for this instance one for this instance so the idea behind this is um",
    "start": "1157039",
    "end": "1162760"
  },
  {
    "text": "we know from our use case that is if there is an instance which does a job",
    "start": "1162760",
    "end": "1168520"
  },
  {
    "text": "which which seems to be production related so we can't stop it in this very",
    "start": "1168520",
    "end": "1174080"
  },
  {
    "text": "moment then we will use it for at least the next three or four months so that's",
    "start": "1174080",
    "end": "1179880"
  },
  {
    "text": "our experience in our use case and um like Constantine just mentioned um the",
    "start": "1179880",
    "end": "1185200"
  },
  {
    "text": "one-year reft instances are very very good um we only buy one year onee reft",
    "start": "1185200",
    "end": "1191120"
  },
  {
    "text": "instances and so this is kind of our thing how we do it to find out actually",
    "start": "1191120",
    "end": "1196679"
  },
  {
    "text": "what kind of rein instances are right now running of on on on demand you can use the ec2 instance usage report inside",
    "start": "1196679",
    "end": "1204840"
  },
  {
    "text": "of your ec2 console and just select uh the filter on purchase options and select the On Demand only and then you",
    "start": "1204840",
    "end": "1211559"
  },
  {
    "text": "get something like this",
    "start": "1211559",
    "end": "1216480"
  },
  {
    "text": "this oh wait a minute just go back okay yeah this one yeah um so uh I also Group",
    "start": "1216640",
    "end": "1225440"
  },
  {
    "text": "by instance type here so what you see here is that we're running several T2 mediums those are the green bars um we",
    "start": "1225440",
    "end": "1232039"
  },
  {
    "text": "already bought res instances for those um we had one instance the purple part of the bars which we which we stopped in",
    "start": "1232039",
    "end": "1239320"
  },
  {
    "text": "this very moment as it was not production relevant and we started several other it so this is a good way",
    "start": "1239320",
    "end": "1245200"
  },
  {
    "text": "to find out what I'm running right now and what need to what need to be backed",
    "start": "1245200",
    "end": "1250960"
  },
  {
    "text": "by res instances and like I just said we're always trying to have the goal that we're nearly 100% Onre",
    "start": "1250960",
    "end": "1259120"
  },
  {
    "text": "instances um and especially even if you think about okay I buy this res instances for one year there's still",
    "start": "1259120",
    "end": "1265880"
  },
  {
    "text": "always a baseline you run all the time and like Constantine already mentioned",
    "start": "1265880",
    "end": "1271679"
  },
  {
    "text": "you can change availability zones you may even change sizes of instances those kind of stuff and so it's a very very",
    "start": "1271679",
    "end": "1278159"
  },
  {
    "text": "easy way to save money and we save around 50 to 60% only with re of denance",
    "start": "1278159",
    "end": "1283279"
  },
  {
    "text": "like I just said yeah and back to con thank you Marcus so as you can see with",
    "start": "1283279",
    "end": "1289440"
  },
  {
    "text": "Marcus example you can actually save 50% of your ec2 usage just by using reserved",
    "start": "1289440",
    "end": "1295200"
  },
  {
    "text": "instances and uh that should be probably enough for most in this room to pay for their next ticket to reinvent but we",
    "start": "1295200",
    "end": "1301760"
  },
  {
    "text": "have some more stuff for you so one of my favorite things is actually spot",
    "start": "1301760",
    "end": "1306880"
  },
  {
    "text": "instances who uses spot instances already not a lot of people great so",
    "start": "1306880",
    "end": "1312000"
  },
  {
    "text": "that that now there's an opportunity for you to save some cost so spot instances are pretty pretty funny because because",
    "start": "1312000",
    "end": "1319200"
  },
  {
    "text": "as you can imagine at AWS we operate a lot of Hardware we have lots of data",
    "start": "1319200",
    "end": "1325799"
  },
  {
    "text": "centers lots of hardware and we have to buy a lot of hardware and run it because we never know how many customers are",
    "start": "1325799",
    "end": "1332559"
  },
  {
    "text": "going to use our platform so that means if you look at our Hardware utilization we have to keep a Headroom of unused",
    "start": "1332559",
    "end": "1340200"
  },
  {
    "text": "instances because we always have to be ready for the next instance that the customer wants to launch so that means",
    "start": "1340200",
    "end": "1346640"
  },
  {
    "text": "that we end up doing the same as some energy companies do we just resell our",
    "start": "1346640",
    "end": "1352200"
  },
  {
    "text": "Headroom on the market and we call these this spot instances and the way they",
    "start": "1352200",
    "end": "1358679"
  },
  {
    "text": "work is they are completely based on supply and demand so that means that you as a customer you can tell us hey dear",
    "start": "1358679",
    "end": "1365840"
  },
  {
    "text": "AWS I'm okay paying 10 cents for this X1 instance that you just launched and uh",
    "start": "1365840",
    "end": "1372120"
  },
  {
    "text": "because I don't want to pay more than that right and if we have an overc capacity of that instances because of",
    "start": "1372120",
    "end": "1378080"
  },
  {
    "text": "course we need to keep some headro and if you are among the biders who bid the",
    "start": "1378080",
    "end": "1383200"
  },
  {
    "text": "right amount of of of money you'll get access to that large instance for just 10 cents because this is a completely",
    "start": "1383200",
    "end": "1390360"
  },
  {
    "text": "open market you have a lot of biders on one side bidding whatever price they want to pay and then we have the supply",
    "start": "1390360",
    "end": "1396679"
  },
  {
    "text": "on the other side of our Headroom capacity that we match through our spot in instance engine so we match Demand",
    "start": "1396679",
    "end": "1404360"
  },
  {
    "text": "with Supply and then you can just use our over capacity instances so by now you will probably ask so",
    "start": "1404360",
    "end": "1410600"
  },
  {
    "text": "what's the drawback so what's the downside here the downside is that of course the Headroom is there to satisfy",
    "start": "1410600",
    "end": "1417240"
  },
  {
    "text": "demand once any other customer wants to use them at a regular price so when our",
    "start": "1417240",
    "end": "1422880"
  },
  {
    "text": "when our supply goes down we have to claim those instances back so that means",
    "start": "1422880",
    "end": "1428320"
  },
  {
    "text": "that with spot instances you need to be prepared that the instance is going to be terminated as soon as the current",
    "start": "1428320",
    "end": "1434200"
  },
  {
    "text": "spot price crosses your chosen maximum bit price price but the good news is you",
    "start": "1434200",
    "end": "1440600"
  },
  {
    "text": "only pay for the current spot price that is the current price you don't pay your maximum price you only pay the current",
    "start": "1440600",
    "end": "1446159"
  },
  {
    "text": "spot price that which is very Dynamic and um since we just talked about",
    "start": "1446159",
    "end": "1451559"
  },
  {
    "text": "autoscaling Auto scaling is also a great way to make your architecture robust",
    "start": "1451559",
    "end": "1457000"
  },
  {
    "text": "because it will automatically refill your pool with new instances as they are terminated so you can actually mitigate",
    "start": "1457000",
    "end": "1462960"
  },
  {
    "text": "the risk of having your spot instances being terminated because of pricing events",
    "start": "1462960",
    "end": "1469520"
  },
  {
    "text": "so here's an example of how the pricing looks like in this case the regular price for on demand for this instance",
    "start": "1469520",
    "end": "1476000"
  },
  {
    "text": "type in this availability Zone because the prices change per availability Zone they are really based on the locally",
    "start": "1476000",
    "end": "1482279"
  },
  {
    "text": "available pools of instances so the regular price in this example here is 24 cents by instance hour and the current",
    "start": "1482279",
    "end": "1489559"
  },
  {
    "text": "spot price is is about 10% or 11.7% of that price so that means you can save up",
    "start": "1489559",
    "end": "1496000"
  },
  {
    "text": "to 90% of ec2 instance cost by taking advantage of spot pricing but you can",
    "start": "1496000",
    "end": "1501120"
  },
  {
    "text": "also see that the spot pricing can be very Dynamic it can be it can be even bigger than the on demand price and why",
    "start": "1501120",
    "end": "1507039"
  },
  {
    "text": "is that so well some customers say I don't care I want to keep my instances I know that over time the average price",
    "start": "1507039",
    "end": "1514880"
  },
  {
    "text": "will always be much lower than on demand I'm fine paying a lot more just for a few hours because over time the price is",
    "start": "1514880",
    "end": "1522159"
  },
  {
    "text": "going to play out itself the average price that's fine for some customers other customers are a bit more more",
    "start": "1522159",
    "end": "1527600"
  },
  {
    "text": "cautious they will will only submit very small bits and be very careful and and and be very Dynamic here you can choose",
    "start": "1527600",
    "end": "1533600"
  },
  {
    "text": "how you want to play those spot instances but the point here is if you are smart about instance use if you can",
    "start": "1533600",
    "end": "1539520"
  },
  {
    "text": "automate your system enough so that you automatically restart instances that are terminated out of the spot pool and",
    "start": "1539520",
    "end": "1545679"
  },
  {
    "text": "maybe replace them with on demand instances then you can really save a lot of money so here are some use cases that",
    "start": "1545679",
    "end": "1551919"
  },
  {
    "text": "work really well with with spot instances you can use them for stateless web and application server fleets they",
    "start": "1551919",
    "end": "1557720"
  },
  {
    "text": "are great great addition to your Amazon elastic map reduce cluster because elastic map reduce is inherently",
    "start": "1557720",
    "end": "1564279"
  },
  {
    "text": "tolerant of instance termination and that means you can set up your elastic map rce cluster with a set of core",
    "start": "1564279",
    "end": "1569799"
  },
  {
    "text": "instances that you will always keep and you can use on demand and and reserved instance pricing for them and it just",
    "start": "1569799",
    "end": "1576039"
  },
  {
    "text": "add spot instances to your Hadoop cluster and the more instances you add out of the spot pool the faster your",
    "start": "1576039",
    "end": "1583760"
  },
  {
    "text": "cluster is going to be done and the more money you will save because you will also save for the on demand part because",
    "start": "1583760",
    "end": "1589399"
  },
  {
    "text": "you will be done earlier so this is a great way to save with Amazon elastic map reduce you can use them for",
    "start": "1589399",
    "end": "1594760"
  },
  {
    "text": "continuous integration Fleet high performance Computing grid Compu these are all use cases we see customers using with spot instances there's a great",
    "start": "1594760",
    "end": "1602080"
  },
  {
    "text": "webinar explaining all of the spot intricacies on our web page amazon.com",
    "start": "1602080",
    "end": "1607679"
  },
  {
    "text": "ec2s spot and uh I would encourage you to check this out in in more",
    "start": "1607679",
    "end": "1612799"
  },
  {
    "text": "detail there's a new tool called spot bit advisor where you can type in your",
    "start": "1612799",
    "end": "1618279"
  },
  {
    "text": "your favorite region instance type and the kind of pricing you are trying you're you're um you want to bid and it",
    "start": "1618279",
    "end": "1624880"
  },
  {
    "text": "will tell you the probability that you can keep your instance through a long period of time and there's actually a",
    "start": "1624880",
    "end": "1630520"
  },
  {
    "text": "very new feature that we launched just a few days ago and frankly I didn't have the time to create a new slide for that",
    "start": "1630520",
    "end": "1636120"
  },
  {
    "text": "but that is a that new feature is called spot blocks you can actually tell the spot engine dear spot engine I want an",
    "start": "1636120",
    "end": "1643960"
  },
  {
    "text": "instance of this type I want to use it for 3 hours and then I don't care if it's terminated but I want to get those",
    "start": "1643960",
    "end": "1649440"
  },
  {
    "text": "three hours and then the spot block feature will allocate the instance for just those three hours for you and you",
    "start": "1649440",
    "end": "1656360"
  },
  {
    "text": "still get to enjoy spot instance price savings so if you know up front that you only need an instance for a couple of",
    "start": "1656360",
    "end": "1662519"
  },
  {
    "text": "hours you can use the new spot blocks feature to allocate them and save some",
    "start": "1662519",
    "end": "1667720"
  },
  {
    "text": "money there so quick recap it is this is very Dynamic pricing this is a bit",
    "start": "1667720",
    "end": "1673799"
  },
  {
    "text": "sophisticated but if you're smart about using spot instances you can save 80 to 90% of ec2 cost and then check out",
    "start": "1673799",
    "end": "1681679"
  },
  {
    "text": "different prices they vary by availability Zone they vary by region and by instance type and you can",
    "start": "1681679",
    "end": "1686799"
  },
  {
    "text": "leverage Auto scaling you can set up actually two aut scaling groups one with spot instances that saves you a lot of",
    "start": "1686799",
    "end": "1692360"
  },
  {
    "text": "money and the other one with on demand that will compensate for any spot instances that get terminated so you get",
    "start": "1692360",
    "end": "1697840"
  },
  {
    "text": "the best of both worlds and then there's another new feature called spot fleets you can manage thousands of spot",
    "start": "1697840",
    "end": "1703720"
  },
  {
    "text": "instances with a single API call and use them to serious ly save money on large",
    "start": "1703720",
    "end": "1709720"
  },
  {
    "text": "fleets of web servers okay we talked a lot about ec2",
    "start": "1709720",
    "end": "1714960"
  },
  {
    "text": "and compute let's talk about storage now as you know Amazon S3 is the golden",
    "start": "1714960",
    "end": "1720519"
  },
  {
    "text": "standard of cloud storage at AWS it is designed for 11 NES of durability and it",
    "start": "1720519",
    "end": "1726600"
  },
  {
    "text": "delivers 49es of availability for the service and you can even enjoy a service level agreement for that it gives you",
    "start": "1726600",
    "end": "1733320"
  },
  {
    "text": "unlimited storage with high throughput and it's really easy to use and the standard pricing sty s at 3 cents per",
    "start": "1733320",
    "end": "1739480"
  },
  {
    "text": "gigabyte and per month and one good thing is you get automatic discounts I get to meet a lot of very large",
    "start": "1739480",
    "end": "1745799"
  },
  {
    "text": "customers and large Enterprise customers the first thing they say hey I am this really important company can you give me",
    "start": "1745799",
    "end": "1751760"
  },
  {
    "text": "a discount and the answer is yes you get the same discount as everybody and it's on our price list and it is automatic",
    "start": "1751760",
    "end": "1758279"
  },
  {
    "text": "the more you use the less you pay so that's great but you can save even more because we recently launched a new",
    "start": "1758279",
    "end": "1764760"
  },
  {
    "text": "storage class which is called standard infrequent access this storage class is designed for use",
    "start": "1764760",
    "end": "1770840"
  },
  {
    "text": "cases where you want to save a lot of data and you don't necessarily want to read it back all the time and that would",
    "start": "1770840",
    "end": "1777880"
  },
  {
    "text": "be like the classic case in backups or archives because with backups or archives you save them and then you hope",
    "start": "1777880",
    "end": "1784120"
  },
  {
    "text": "you don't need them anymore but still you don't want to pay the full price right so in the new standard infrequent",
    "start": "1784120",
    "end": "1791320"
  },
  {
    "text": "access class we basically save on the retrieval part of the S3 Fleet so that",
    "start": "1791320",
    "end": "1797000"
  },
  {
    "text": "means that you can uh you get a slightly lower availability 99.9% but the pricing drops down to 1.25",
    "start": "1797000",
    "end": "1805679"
  },
  {
    "text": "cents per gigabyte of storage which is a 58% savings on your S3 storage cost",
    "start": "1805679",
    "end": "1812080"
  },
  {
    "text": "there are some small strings attached objects have to be kept for a minimum of 30 days and we build a minimum of",
    "start": "1812080",
    "end": "1819120"
  },
  {
    "text": "128k per object and there's a small retrieval cost but again this is designed for use cases where you save a",
    "start": "1819120",
    "end": "1826600"
  },
  {
    "text": "lot but you don't NE necessarily want to read back a lot of data and so this is perfect for any kind of backup And",
    "start": "1826600",
    "end": "1833159"
  },
  {
    "text": "archiving scenario and then you can leverage Amazon S3 life cycle rules which will automatically transfer",
    "start": "1833159",
    "end": "1840000"
  },
  {
    "text": "objects in S3 into the lower priced infrequent access class after a certain",
    "start": "1840000",
    "end": "1845279"
  },
  {
    "text": "amount of time so you can save your backups to S3 regular and after a month set up a rule that of anything that is",
    "start": "1845279",
    "end": "1852039"
  },
  {
    "text": "older than a month will automatically be transferred into the infrequent access class here and then there is our",
    "start": "1852039",
    "end": "1859559"
  },
  {
    "text": "favorite class which is called the click the Amazon Glacier storage",
    "start": "1859559",
    "end": "1866720"
  },
  {
    "text": "class which is has been there for a couple of years now and this is our latest price reduction actually so we",
    "start": "1866720",
    "end": "1874039"
  },
  {
    "text": "reduced our prices on the glacial storage class so now the glacial storage class presents you with 77% savings over",
    "start": "1874039",
    "end": "1881960"
  },
  {
    "text": "the standard storage but it is a bit colder than the infrequent access class",
    "start": "1881960",
    "end": "1887320"
  },
  {
    "text": "it means if you want to get your data back you have to wait 3 to 5 hours for the retrieval job to bring your data",
    "start": "1887320",
    "end": "1892880"
  },
  {
    "text": "back and but you you get an even lower price of 7 cents per gigabyte of storage",
    "start": "1892880",
    "end": "1899639"
  },
  {
    "text": "so this is great for really cold data this is great for archiving data that you only want to dig up when the auditor",
    "start": "1899639",
    "end": "1906360"
  },
  {
    "text": "comes in once every couple of years or this is great for your oldest backups and again you can leverage S3 life cycle",
    "start": "1906360",
    "end": "1912200"
  },
  {
    "text": "rules you can after one month you put it into standard in frequent access and then maybe after 3 months you put it",
    "start": "1912200",
    "end": "1917639"
  },
  {
    "text": "into to the glacial storage class because the probability that you will actually need it is way way down and",
    "start": "1917639",
    "end": "1922760"
  },
  {
    "text": "then the pricing starts to play out for",
    "start": "1922760",
    "end": "1926720"
  },
  {
    "text": "you click okay maybe the battery is dying here don't save on batteries save on",
    "start": "1929360",
    "end": "1937360"
  },
  {
    "text": "8s so let's become a bit more more uh sophisticated here and I'm very glad to",
    "start": "1937360",
    "end": "1943360"
  },
  {
    "text": "have one of the world's biggest Dynamo DB experts here from our customer side here let's look at Amazon Dynamo DB who uses",
    "start": "1943360",
    "end": "1951200"
  },
  {
    "text": "Amazon Dynamo DB in some way or other great so now this is the piece where you get to enjoy a little more cool stuff",
    "start": "1951200",
    "end": "1957919"
  },
  {
    "text": "here so the way dyb is priced is around capacity units you have to allocate",
    "start": "1957919",
    "end": "1963440"
  },
  {
    "text": "capacity units for read and write capacity and uh this is your opportunity to to optimize your cost here because",
    "start": "1963440",
    "end": "1970519"
  },
  {
    "text": "you can optimize the usage of capacity units but of course there is always a trade-off to make you need to provision",
    "start": "1970519",
    "end": "1976960"
  },
  {
    "text": "enough capacity units so your application runs and doesn't see any out of capacity errors but you don't want to",
    "start": "1976960",
    "end": "1983000"
  },
  {
    "text": "provision too many capacity units because then you will end up paying more than",
    "start": "1983000",
    "end": "1988559"
  },
  {
    "text": "necessary so here are some ways to optimize on Dynamo DB first of all you can use caching and save read capacity",
    "start": "1988559",
    "end": "1995679"
  },
  {
    "text": "units by caching your stuff on the application side or using some other caching things and we we have a whole",
    "start": "1995679",
    "end": "2001000"
  },
  {
    "text": "section on caching coming up in a couple of minutes but the other thing is you can be become smarter at allocating your",
    "start": "2001000",
    "end": "2007440"
  },
  {
    "text": "table and capacity units and there are some great great ideas there in the Dynamo DB documentation you can for",
    "start": "2007440",
    "end": "2014120"
  },
  {
    "text": "instance use multiple tables for different access patterns and then provision capacity units individually",
    "start": "2014120",
    "end": "2019760"
  },
  {
    "text": "for those tables you can look at your time series data and try to map time",
    "start": "2019760",
    "end": "2024880"
  },
  {
    "text": "chunks into its own tables and as you don't need them you can just delete whole tables because deleting single",
    "start": "2024880",
    "end": "2031320"
  },
  {
    "text": "objects in Dynamo DB that eats up on your right capacity units but if you delete a whole table that's a free",
    "start": "2031320",
    "end": "2037320"
  },
  {
    "text": "operation so if you're if you're piling up time based data and then you offload them",
    "start": "2037320",
    "end": "2042799"
  },
  {
    "text": "into some other storage such as S3 by having one table per day or one table",
    "start": "2042799",
    "end": "2047840"
  },
  {
    "text": "per hour or one table per month whatever you can kill the whole table for free without paying for the cost of deleting",
    "start": "2047840",
    "end": "2054760"
  },
  {
    "text": "items in the diamond DB table initially and then of course you can use compression to save some more on on",
    "start": "2054760",
    "end": "2060839"
  },
  {
    "text": "capacity units there's a neat trick that our customer Shazam came up with if you",
    "start": "2060839",
    "end": "2066158"
  },
  {
    "text": "do encounter an AO of capacity error in Dynamo DB because you were really cheap on provisioning right capacity units you",
    "start": "2066159",
    "end": "2073560"
  },
  {
    "text": "can offload you can you can buffer your WR request into an sqsq and then you can have a process in",
    "start": "2073560",
    "end": "2080320"
  },
  {
    "text": "the background that reads back those right request from sqs and retries them",
    "start": "2080320",
    "end": "2085839"
  },
  {
    "text": "on the Dynamo DB table at a later time when capacity becomes available so by",
    "start": "2085839",
    "end": "2091280"
  },
  {
    "text": "using this trick by using sqs essentially as a right buffer into Dynamo DB you can provision just the",
    "start": "2091280",
    "end": "2099240"
  },
  {
    "text": "average amount of capacity unit usage you don't have to provision for maximum capacity and that means that you can",
    "start": "2099240",
    "end": "2105800"
  },
  {
    "text": "save some money with capacity units on Dynamo DB there is a tool called Dynamic Dynamo",
    "start": "2105800",
    "end": "2112320"
  },
  {
    "text": "DB which is on GitHub so you just Google Dynamic dynamodb and then you can download this tool this is a simple",
    "start": "2112320",
    "end": "2118079"
  },
  {
    "text": "python script that helps you automatically figure out the right amount of capacity units so it will",
    "start": "2118079",
    "end": "2124160"
  },
  {
    "text": "automatically adjust the capacity units for your tables B based on the historic use and based on some rules that you can",
    "start": "2124160",
    "end": "2130839"
  },
  {
    "text": "give it and we recently upgraded the cloudwatch metrics for Dynamo DB to be",
    "start": "2130839",
    "end": "2136520"
  },
  {
    "text": "at only one minute granularity which made this tool even more useful because it can now react in very near to the",
    "start": "2136520",
    "end": "2142880"
  },
  {
    "text": "time to your usage so think of this as autoscaling for Dynamo DB which really makes it easy for you to be optimal to",
    "start": "2142880",
    "end": "2151079"
  },
  {
    "text": "to figure out the optimal capacity unit usage okay now I'd like to hand it over",
    "start": "2151079",
    "end": "2156720"
  },
  {
    "text": "to Marcus because he found out a really neat trick on how to save capacity units on DB yeah thanks Constantine yeah to",
    "start": "2156720",
    "end": "2163640"
  },
  {
    "text": "explain a little bit what we did in this tweak actually is uh I need to explain what we're doing with dynamodb um we're",
    "start": "2163640",
    "end": "2170400"
  },
  {
    "text": "talking about a tracking database actually uh so everything which happens during our bidding every view every",
    "start": "2170400",
    "end": "2175800"
  },
  {
    "text": "click every kind of event we are adding rows to a dynami be table just like Constantine mentioned we have several",
    "start": "2175800",
    "end": "2182160"
  },
  {
    "text": "tables one per day and then we add to this um specific day table those",
    "start": "2182160",
    "end": "2188359"
  },
  {
    "text": "um have a size of around 1.5 to 2.5 kiloby and um what we did was we just",
    "start": "2188359",
    "end": "2195000"
  },
  {
    "text": "inserted it to the table um used an Global secondary index uh we used the",
    "start": "2195000",
    "end": "2200599"
  },
  {
    "text": "projection all so we copied over the whole row and then we quered on the global secondary index and um exported",
    "start": "2200599",
    "end": "2206880"
  },
  {
    "text": "the data out of Dynam to transform and work with it so the point now is what",
    "start": "2206880",
    "end": "2212240"
  },
  {
    "text": "internally happens is that if we insert to a table Dynam be copies over the whole row you to the projection all to",
    "start": "2212240",
    "end": "2219520"
  },
  {
    "text": "This Global secondary index which is um actually it is another table so you",
    "start": "2219520",
    "end": "2225000"
  },
  {
    "text": "provision your own throughput on This Global secondary indix separately from the table itself so then we had the",
    "start": "2225000",
    "end": "2231800"
  },
  {
    "text": "system it worked actually but it cost a really a lot of money on the global secondary index and so we looked at",
    "start": "2231800",
    "end": "2239440"
  },
  {
    "text": "actually the pricing of dyam Dynam be again and then we saw ah rights are",
    "start": "2239440",
    "end": "2246280"
  },
  {
    "text": "calculated in one kilobytes per junk so every time we write one row which like I",
    "start": "2246280",
    "end": "2252960"
  },
  {
    "text": "said was 1.5 to 2.5 kilobyte we not paid one ride we paid two or three rides but",
    "start": "2252960",
    "end": "2259319"
  },
  {
    "text": "the reads can be of a size up to 4 kilobyte so then we thought okay the",
    "start": "2259319",
    "end": "2265680"
  },
  {
    "text": "global secondary index is a really really important part and it costs a lot of money so why not change the",
    "start": "2265680",
    "end": "2272599"
  },
  {
    "text": "projection for the global secondary index to Keys only so what Dynam be now",
    "start": "2272599",
    "end": "2277680"
  },
  {
    "text": "does is that it not copies over the whole row which was 1.5 to 2.5 kilobytes",
    "start": "2277680",
    "end": "2283079"
  },
  {
    "text": "but it copies over only the key of the table and the key of the global secondary index so we have now rows",
    "start": "2283079",
    "end": "2290240"
  },
  {
    "text": "which are in the global secondary IND which are smaller than 1 kilobyte so we save one to two one to two rights for",
    "start": "2290240",
    "end": "2297599"
  },
  {
    "text": "the copying over as we already had a process which worked on the global secondary IND Index this process now of",
    "start": "2297599",
    "end": "2304920"
  },
  {
    "text": "course not gets the whole row but that isn't really big deal because we get key",
    "start": "2304920",
    "end": "2310040"
  },
  {
    "text": "for the table out of it and so we can read with this key directly from the table itself so we have more reads here",
    "start": "2310040",
    "end": "2317960"
  },
  {
    "text": "but much lesser rights and the most important Point here is rights are more expensive than reads so this very little",
    "start": "2317960",
    "end": "2326440"
  },
  {
    "text": "tweak without real big issue on developing those things saves us more",
    "start": "2326440",
    "end": "2331880"
  },
  {
    "text": "multiple thousand dollars a month with our throughput and um so yeah as I told",
    "start": "2331880",
    "end": "2337680"
  },
  {
    "text": "my boss okay we will build this and we will save several thousand dollar he said yeah okay you can go gambling at",
    "start": "2337680",
    "end": "2342800"
  },
  {
    "text": "reinvent so that's fine so Marcus already saved like 10",
    "start": "2342800",
    "end": "2349119"
  },
  {
    "text": "years worth of reinvent trips with just by being smart with ec2 and and reserved",
    "start": "2349119",
    "end": "2354359"
  },
  {
    "text": "instances and now Marcos with what you saved here on Dynamo you can actually buy some new LED panels for Z in set",
    "start": "2354359",
    "end": "2361040"
  },
  {
    "text": "right so yeah that would be nice maybe day work then yeah so let let's look at some more ways the other thing you can",
    "start": "2361040",
    "end": "2367480"
  },
  {
    "text": "do is so after being smart about your Dynamo DB usage you can also be smart about do you really need that much",
    "start": "2367480",
    "end": "2374079"
  },
  {
    "text": "infrastructure do you really need a lot of backend stuff running on AWS or are there ways to offload part of the the",
    "start": "2374079",
    "end": "2381400"
  },
  {
    "text": "work there to somebody else at a cheaper cost so let's take a look at three ways you can offload your architecture",
    "start": "2381400",
    "end": "2387599"
  },
  {
    "text": "because the less you need your architecture the less you have to pay for it so three ways are you can",
    "start": "2387599",
    "end": "2393200"
  },
  {
    "text": "introduce caching into your architecture you can use Amazon Cloud front to cache",
    "start": "2393200",
    "end": "2398400"
  },
  {
    "text": "whatever is happening on the web tier of your architecture and you can also use",
    "start": "2398400",
    "end": "2403599"
  },
  {
    "text": "any existing Amazon web service instead of building stuff from scratch for instance oh let's just take a look at",
    "start": "2403599",
    "end": "2410119"
  },
  {
    "text": "that example a bit later but let's start with caching here because that is really a very neat way to to save",
    "start": "2410119",
    "end": "2417920"
  },
  {
    "text": "money so Marcus what what do you do with cashing because that that's now pay attention this is really good oh um yeah",
    "start": "2418280",
    "end": "2425960"
  },
  {
    "text": "actually um when we build up DNX um we just build it up so like trying to be as",
    "start": "2425960",
    "end": "2434400"
  },
  {
    "text": "fast as possible time to Market you all know the drill so um we had some pack servers which are talking to our",
    "start": "2434400",
    "end": "2439640"
  },
  {
    "text": "databases we are using right now mongodb Dynam B and Amazon RDS so when we built",
    "start": "2439640",
    "end": "2445480"
  },
  {
    "text": "the system it was ready it worked everything was great but then it was like yeah it's very expensive so let's try",
    "start": "2445480",
    "end": "2453880"
  },
  {
    "text": "with caching AWS solution architect said yeah I use cas in everything is good okay so we did we implemented an elastic",
    "start": "2453880",
    "end": "2461480"
  },
  {
    "text": "cach radus note um between our backend servers and our databases very easy",
    "start": "2461480",
    "end": "2466880"
  },
  {
    "text": "caching so every time we ask our database we now ask the LSD cach redit is there's already some kind of",
    "start": "2466880",
    "end": "2472960"
  },
  {
    "text": "information for the specific query in it if not we still ask our database and",
    "start": "2472960",
    "end": "2478520"
  },
  {
    "text": "save back the result to the elastic cash ready so for the next time with the same",
    "start": "2478520",
    "end": "2483680"
  },
  {
    "text": "query the cach can answer now so we will reduce hope hopefully our um database",
    "start": "2483680",
    "end": "2490160"
  },
  {
    "text": "load so this is the this is the graph where you can see um two deployments of",
    "start": "2490160",
    "end": "2496359"
  },
  {
    "text": "different caches for our mongodb um the two errors actually and",
    "start": "2496359",
    "end": "2501920"
  },
  {
    "text": "we were able to shut down eight of our mongodb machines sounds not like a big deal but if you think about our mongodb",
    "start": "2501920",
    "end": "2509000"
  },
  {
    "text": "machines costs around 500 bucks per month and this one elastic cach redis node which does all the caching in our",
    "start": "2509000",
    "end": "2516000"
  },
  {
    "text": "system costs only 300 bucks a month so we're talking about savings around um 3",
    "start": "2516000",
    "end": "2521680"
  },
  {
    "text": "th 3,700 bucks the very same elastic cash rdis note was then implemented with",
    "start": "2521680",
    "end": "2528920"
  },
  {
    "text": "dynamodb so what you see here I put an error on it but I think it's pretty obvious where we deployed the cash um we",
    "start": "2528920",
    "end": "2537240"
  },
  {
    "text": "saved for this table you can see the graph here 3,000 reads per second when",
    "start": "2537240",
    "end": "2543160"
  },
  {
    "text": "then we implemented it for all our dynamodb tables and now we are able to save more than 20,000 reads per second",
    "start": "2543160",
    "end": "2550640"
  },
  {
    "text": "which again multiple thousand per month I should really do the gambling",
    "start": "2550640",
    "end": "2556680"
  },
  {
    "text": "right but even after we implemented the caching it was like yeah that's cool we",
    "start": "2556680",
    "end": "2564040"
  },
  {
    "text": "have caching now but we make a very very stupid mistake actually we forgot about",
    "start": "2564040",
    "end": "2569640"
  },
  {
    "text": "negative caching and when I say negative caching what I mean is our database answers sometimes with I don't have a",
    "start": "2569640",
    "end": "2577520"
  },
  {
    "text": "result so result empty we're working on JavaScript and you know it's not typ",
    "start": "2577520",
    "end": "2583599"
  },
  {
    "text": "save so the usual developer would do something like if result then cash it to",
    "start": "2583599",
    "end": "2589839"
  },
  {
    "text": "redis if not everything is good so the problem is if we don't if our database",
    "start": "2589839",
    "end": "2595599"
  },
  {
    "text": "just don't have a result we don't cach it now if you think about what we are",
    "start": "2595599",
    "end": "2600680"
  },
  {
    "text": "actually doing we're asking our database hey database do you have a bit for this",
    "start": "2600680",
    "end": "2606559"
  },
  {
    "text": "specific targeting options and it's totally okay for our database to answer no I'm sorry I don't have a bit for that",
    "start": "2606559",
    "end": "2613960"
  },
  {
    "text": "and actually that's a very very valuable information because if we're now asking",
    "start": "2613960",
    "end": "2619000"
  },
  {
    "text": "in the same second or after several seconds the same question again like with the same targeting options database",
    "start": "2619000",
    "end": "2625880"
  },
  {
    "text": "do you have a bit now for this targeting options the database again will say no I",
    "start": "2625880",
    "end": "2631559"
  },
  {
    "text": "still don't have a kind of bits so it's very very important to save the empty",
    "start": "2631559",
    "end": "2637920"
  },
  {
    "text": "result to the cach because now if we Implement that the cach can answer the questions and we reduce our load on our",
    "start": "2637920",
    "end": "2645640"
  },
  {
    "text": "databases what you can see here in the GPH is um the dark part of the bars are our cach hits so our cach can answer the",
    "start": "2645640",
    "end": "2653880"
  },
  {
    "text": "question and the light blue bars are the misses so we need to ask our databases actually we had a cash hit ratio of",
    "start": "2653880",
    "end": "2660960"
  },
  {
    "text": "around 25 to 30% without negative caching this is it with negative cashing",
    "start": "2660960",
    "end": "2668280"
  },
  {
    "text": "so we rised our cash it ratio to 89 to 95% so now we're talking about around 5",
    "start": "2668280",
    "end": "2676640"
  },
  {
    "text": "to 11% of all our queries we actually really need to ask our database",
    "start": "2676640",
    "end": "2683079"
  },
  {
    "text": "everything else comes out of this very single elastic cash redis note for 300",
    "start": "2683079",
    "end": "2689599"
  },
  {
    "text": "bucks a month so we're still talking with this negative caching implemented",
    "start": "2689599",
    "end": "2694880"
  },
  {
    "text": "we again saved several ,000 a month yeah",
    "start": "2694880",
    "end": "2701040"
  },
  {
    "text": "thank you back to okay so you can also do another level",
    "start": "2701040",
    "end": "2707599"
  },
  {
    "text": "of caching which is cloudfront and the important thing to remember about cloudfront is many people think of",
    "start": "2707599",
    "end": "2713319"
  },
  {
    "text": "cloudfront as being just a cach for web data and it's nice and it accelerates stuff because stuff is local cached on",
    "start": "2713319",
    "end": "2719680"
  },
  {
    "text": "on those noes but the good thing is that cloudfront can also be used for dynamic",
    "start": "2719680",
    "end": "2725000"
  },
  {
    "text": "content you can use cloudfront even with without caching so that means that you can even accelerate your application",
    "start": "2725000",
    "end": "2732440"
  },
  {
    "text": "Readiness your application performance just by putting cloudfront in front of it even if it's a fully Dynamic",
    "start": "2732440",
    "end": "2737680"
  },
  {
    "text": "application that can't be cached because cloudfront comes with a lot of optimizations on a networking side it",
    "start": "2737680",
    "end": "2743520"
  },
  {
    "text": "comes with some TCP optimizations that lower the latency of your request so you can actually use cloudfront to",
    "start": "2743520",
    "end": "2749440"
  },
  {
    "text": "accelerate your web application and on top of it you also get a fleet of proxy",
    "start": "2749440",
    "end": "2755440"
  },
  {
    "text": "caching uh servers that can accelerate and cache your static content and whatever can be cached now Marcos has a",
    "start": "2755440",
    "end": "2763520"
  },
  {
    "text": "neat way of using cloudfront in its Dynamic mode yeah um actually I",
    "start": "2763520",
    "end": "2769559"
  },
  {
    "text": "constantly just said cloudfront is content delivery Network I think that's the very obvious thing everybody does",
    "start": "2769559",
    "end": "2775079"
  },
  {
    "text": "with cloudfront right now um but we thought about before we actually built",
    "start": "2775079",
    "end": "2780640"
  },
  {
    "text": "DTX how should we architect the whole system like I said in the beginning we need to be very very fast with answers",
    "start": "2780640",
    "end": "2787720"
  },
  {
    "text": "so we only have 300 to two 200 to 300 milliseconds that way around um to",
    "start": "2787720",
    "end": "2794079"
  },
  {
    "text": "answer every question we get from the parking companies so Network latency is a huge issue for us if you think about",
    "start": "2794079",
    "end": "2801599"
  },
  {
    "text": "that Network latency can go up to 150 or even 200 milliseconds from for example",
    "start": "2801599",
    "end": "2807319"
  },
  {
    "text": "Australia to the US East or something like that it's very very important for us that we trying to shave off as M much",
    "start": "2807319",
    "end": "2814760"
  },
  {
    "text": "as possible from this network latency so we thought um okay we need to do several",
    "start": "2814760",
    "end": "2820720"
  },
  {
    "text": "regions so typical multi- region setup we need to be in our three important regions which are us EU and Asian",
    "start": "2820720",
    "end": "2828119"
  },
  {
    "text": "Pacific but um we would duplicate or um multiply our whole infrastructure",
    "start": "2828119",
    "end": "2834839"
  },
  {
    "text": "because we need to be in every region and then there is a database in each region so we need to kind do some kind",
    "start": "2834839",
    "end": "2842480"
  },
  {
    "text": "of multimaster thinking everybody whoever did did multimaster thinking NOS",
    "start": "2842480",
    "end": "2847880"
  },
  {
    "text": "it's not fun not at all so then we came up with the idea yeah okay the main",
    "start": "2847880",
    "end": "2855599"
  },
  {
    "text": "point of network latency is from the end user to the entry point of the AWS net",
    "start": "2855599",
    "end": "2863040"
  },
  {
    "text": "and as cloudfront has several Edge locations all over the world more than they actually have regions or",
    "start": "2863040",
    "end": "2868960"
  },
  {
    "text": "availability zones it might work if we put cloudfront in front of our",
    "start": "2868960",
    "end": "2874839"
  },
  {
    "text": "infrastructure and just do Cloud let cloudfront do the job so we don't cash",
    "start": "2874839",
    "end": "2881559"
  },
  {
    "text": "anything on this cloudfront Edge location so we're working with the TTL of zero so the advantage Constantine",
    "start": "2881559",
    "end": "2888559"
  },
  {
    "text": "just mentioned with yeah you get your content out to the cloud to the edge locations and cach it there we don't do",
    "start": "2888559",
    "end": "2894760"
  },
  {
    "text": "that we don't do any caching on the cloudfront edge locations we just use cloudfront as entry point to the AWS net",
    "start": "2894760",
    "end": "2903559"
  },
  {
    "text": "which should be as near as possible for our ENT users and so we built actually",
    "start": "2903559",
    "end": "2909440"
  },
  {
    "text": "this system this is our architecture we're working with it right now so we just use use East one as our main region",
    "start": "2909440",
    "end": "2917760"
  },
  {
    "text": "have only one infrastructure instead of three so Savings of 66% obvious and we",
    "start": "2917760",
    "end": "2924119"
  },
  {
    "text": "just put cloud front in front of it and as we have Cloud front now we're talking not about 150 to 200 milliseconds we",
    "start": "2924119",
    "end": "2931280"
  },
  {
    "text": "only talk around 20 to 30 to the edge locations and from The Edge location to",
    "start": "2931280",
    "end": "2936799"
  },
  {
    "text": "to our own elastic loob balancer AWS optimizes very very much of the whole",
    "start": "2936799",
    "end": "2942520"
  },
  {
    "text": "TCP IP handshaking process everything around it you don't need to take care of that and so we have a total latency not",
    "start": "2942520",
    "end": "2949480"
  },
  {
    "text": "from 200 milliseconds but around 40 to 50 milliseconds from all over the world",
    "start": "2949480",
    "end": "2956200"
  },
  {
    "text": "so my tip here for you is use Ser services not only for the obvious",
    "start": "2956200",
    "end": "2962680"
  },
  {
    "text": "purposes but also for some kind of NY sneaky tricks you can do with the things",
    "start": "2962680",
    "end": "2970040"
  },
  {
    "text": "AWS just gives you and so we use cloud for we're very happy with that and save a lot of money with it thanks",
    "start": "2970040",
    "end": "2977799"
  },
  {
    "text": "Marcus so this conference is called reinvent but it doesn't mean you should reinvent the wheel here right because we",
    "start": "2977799",
    "end": "2985119"
  },
  {
    "text": "you're here to reinvent the way you do business with your customers and what I want to say with this is try to leverage",
    "start": "2985119",
    "end": "2990960"
  },
  {
    "text": "as many existing Services as possible because if you for instance let's take",
    "start": "2990960",
    "end": "2996280"
  },
  {
    "text": "the example example of Amazon Cloud search we just launched Amazon ads",
    "start": "2996280",
    "end": "3001680"
  },
  {
    "text": "elastic search service which makes it really easy for you to set up your own elastic search cluster with kibana and",
    "start": "3001680",
    "end": "3007480"
  },
  {
    "text": "everything by the Press of a button without having to launch instances install software and do all the",
    "start": "3007480",
    "end": "3013240"
  },
  {
    "text": "administration stuff and that's awesome actually elastic search is really awesome you should you should use it",
    "start": "3013240",
    "end": "3019000"
  },
  {
    "text": "thank you and um the point here is when we Implement something as a prean",
    "start": "3019000",
    "end": "3025920"
  },
  {
    "text": "service of course we are going to do all of the work that you that I just showed you for us and make the service really",
    "start": "3025920",
    "end": "3032680"
  },
  {
    "text": "efficient and bring down the cost as much as possible but the other valuable thing you save by using existing",
    "start": "3032680",
    "end": "3038799"
  },
  {
    "text": "Services is you save a lot of time and effort and headaches you don't have to go through the headache of setting up",
    "start": "3038799",
    "end": "3044400"
  },
  {
    "text": "elastic surch anymore you just use the the the ready to use service you don't have to go through the the headache of",
    "start": "3044400",
    "end": "3050319"
  },
  {
    "text": "setting up your own Hadoop cluster with your own Hadoop in uh distribution you don't have to set up your own transcoding stuff don't have to to set",
    "start": "3050319",
    "end": "3056880"
  },
  {
    "text": "up your own queuing system and whatever so try to look through the I I I I admit",
    "start": "3056880",
    "end": "3064200"
  },
  {
    "text": "increasingly big portfolio of existing services and try to pick and match as",
    "start": "3064200",
    "end": "3069839"
  },
  {
    "text": "many building blocks as you can that you don't have to reinvent anymore and then you will not only save money you will",
    "start": "3069839",
    "end": "3075760"
  },
  {
    "text": "save a lot of time that you can put to much better use by Reinventing the way you do business with your customers",
    "start": "3075760",
    "end": "3084640"
  },
  {
    "text": "okay before we wrap this up let's take a quick look at Cost monitoring and Analysis so you can use the awsco",
    "start": "3086680",
    "end": "3093760"
  },
  {
    "text": "calculator if you are thinking about migrating a workload from on premises into the cloud this will help you come",
    "start": "3093760",
    "end": "3100920"
  },
  {
    "text": "at a really Apples to Apples comparison about what it costs to run something on premises versus what it costs to run in",
    "start": "3100920",
    "end": "3107079"
  },
  {
    "text": "the cloud it comes with a very detailed model of U Data Center cost and and that",
    "start": "3107079",
    "end": "3113000"
  },
  {
    "text": "sort of thing so you can create a nice cost projection for your manager and tell them how much money you can save by",
    "start": "3113000",
    "end": "3118599"
  },
  {
    "text": "going into the cloud you can also use the aw simple monthly calculator to project cost in",
    "start": "3118599",
    "end": "3124799"
  },
  {
    "text": "advance for the future and try to figure out so what can I save if I use reserved instances versus regular on demand for",
    "start": "3124799",
    "end": "3132119"
  },
  {
    "text": "this part here and do some cost projections on your own for your existing architectures you can use the AWS",
    "start": "3132119",
    "end": "3138200"
  },
  {
    "text": "building console to identify the first blocks to tackle in your cost optimization exercises just look for the",
    "start": "3138200",
    "end": "3144160"
  },
  {
    "text": "biggest part of the p and drill down and see see where you can optimize that that part",
    "start": "3144160",
    "end": "3149480"
  },
  {
    "text": "further or you can use the AWS cost Explorer to drill down more deeply into",
    "start": "3149480",
    "end": "3154799"
  },
  {
    "text": "time based um time based Trends in your data you can watch either where costs go",
    "start": "3154799",
    "end": "3160599"
  },
  {
    "text": "down or you can watch out for cost that are trending up and then start optimizing before they become a more",
    "start": "3160599",
    "end": "3167440"
  },
  {
    "text": "significant part of your bill and then you can set up aw's billing alerts many customers I talked",
    "start": "3167440",
    "end": "3173440"
  },
  {
    "text": "to especially from the Enterprise set are a bit nervous because they used to buying stuff and then they know their",
    "start": "3173440",
    "end": "3178599"
  },
  {
    "text": "cost and then they know there's not going to be any more cost associated with that and then they get really nervous if if I come with a payper use",
    "start": "3178599",
    "end": "3185160"
  },
  {
    "text": "model that they find it hard to embrace so you can set up ad billing alerts and",
    "start": "3185160",
    "end": "3190400"
  },
  {
    "text": "we recently introduced budgeting support so you can set up your own budget and make sure you always within your budget",
    "start": "3190400",
    "end": "3196400"
  },
  {
    "text": "and you get alerts whenever you're starting to touch the upper levels of your budget so they're really useful",
    "start": "3196400",
    "end": "3202079"
  },
  {
    "text": "tool especially if you have to deal with your accounting department so as a recap",
    "start": "3202079",
    "end": "3207920"
  },
  {
    "text": "here the easiest way to save money is to turn off unused instances you can do it by hand or you can automate the heck of",
    "start": "3207920",
    "end": "3214920"
  },
  {
    "text": "your application and therefore be really smart about just using what you really need for your own particular use case",
    "start": "3214920",
    "end": "3223079"
  },
  {
    "text": "you can use reserved instances and by paying up front you can save a lot of money down the road and uh the the the",
    "start": "3223079",
    "end": "3230480"
  },
  {
    "text": "payoff here starts as early as four to 5 months and Marcus showed you how you can bring down the ec2 Bill about 50% so",
    "start": "3230480",
    "end": "3239160"
  },
  {
    "text": "that should save you couple of trips to reinvent already you can use spot instances and become more sophisticated",
    "start": "3239160",
    "end": "3245920"
  },
  {
    "text": "about optimizing the cost out of ec2 you can leverage storage steering so that you don't have to pay as much for",
    "start": "3245920",
    "end": "3252200"
  },
  {
    "text": "storage for data that you don't plan to use that often you can optimize for Amazon Dynamo DB and uh that helps us",
    "start": "3252200",
    "end": "3259720"
  },
  {
    "text": "help uh Z buy some new panels and repair his DJ setup and then you can offload",
    "start": "3259720",
    "end": "3265240"
  },
  {
    "text": "your architecture and save even more money there so that you can actually throw your own party with the money you saved on AWS",
    "start": "3265240",
    "end": "3273720"
  },
  {
    "text": "today so thank you very much for coming um",
    "start": "3273760",
    "end": "3279160"
  },
  {
    "text": "thanks thanks go to Marcus",
    "start": "3279160",
    "end": "3283760"
  }
]