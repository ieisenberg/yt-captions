[
  {
    "text": "hello welcome to today's aws webinar journey through the cloud",
    "start": "160",
    "end": "5759"
  },
  {
    "text": "today's topic is application services or running and consuming services that wrap",
    "start": "5759",
    "end": "12480"
  },
  {
    "text": "software or traditional software that's installed into environments such as ec2",
    "start": "12480",
    "end": "18480"
  },
  {
    "text": "this is a continuation of our journey through the cloud series and if you wish to find out previous",
    "start": "18480",
    "end": "25519"
  },
  {
    "text": "webinars you can search our youtube channel and see recordings for all of these and these slides and indeed the",
    "start": "25519",
    "end": "31279"
  },
  {
    "text": "recording of this webinar will be available via slideshare and youtube afterwards",
    "start": "31279",
    "end": "37280"
  },
  {
    "text": "my name is ryan and i'm a technical evangelist at aws so i'm going to take you through this webinar today",
    "start": "37280",
    "end": "43120"
  },
  {
    "text": "and you can catch me on twitter at ryan aws",
    "start": "43120",
    "end": "47680"
  },
  {
    "text": "so the journey through the cloud series of webinars is designed really to demonstrate common use cases and",
    "start": "49600",
    "end": "55120"
  },
  {
    "text": "stepping stones that customers have taken into the aws cloud",
    "start": "55120",
    "end": "61038"
  },
  {
    "text": "learning from the customer journeys that others have taken learning from how they've consumed the services in aws to",
    "start": "61199",
    "end": "67760"
  },
  {
    "text": "make take advantage of them in their own projects and picking up a bit of best practice that you may use to bootstrap",
    "start": "67760",
    "end": "73520"
  },
  {
    "text": "your projects and your journey into aws now today's topic is application",
    "start": "73520",
    "end": "78560"
  },
  {
    "text": "services and this is all about building upon the services that have been built for the cloud and that are run by aws on",
    "start": "78560",
    "end": "85360"
  },
  {
    "text": "your behalf and these are services that try to address common pain points in your application architectures such as",
    "start": "85360",
    "end": "91200"
  },
  {
    "text": "operating databases or middleware and the idea is that we can reduce the operational burden placed upon your",
    "start": "91200",
    "end": "98320"
  },
  {
    "text": "cells by managing those software components for you enabling you to focus on the application function that you're",
    "start": "98320",
    "end": "104880"
  },
  {
    "text": "designing and building not the undef undifferentiated heavy lifting associated with running common",
    "start": "104880",
    "end": "110960"
  },
  {
    "text": "application components common middleware data stores and so on",
    "start": "110960",
    "end": "116320"
  },
  {
    "text": "so with that in mind the agenda today is to take a look at why aws is a good",
    "start": "116320",
    "end": "121680"
  },
  {
    "text": "place for consuming application services we're going to dive into the services at a top",
    "start": "121680",
    "end": "127040"
  },
  {
    "text": "level and then select few of those services we're going to deep dive on so we're going to look at how they work",
    "start": "127040",
    "end": "132480"
  },
  {
    "text": "and how they would compare to running those sorts of softwares or services in the cloud yourself and then we'll give",
    "start": "132480",
    "end": "138160"
  },
  {
    "text": "you some ideas on where to go next at the end and we'll drop in case studies where we can so you can get an idea of the sort",
    "start": "138160",
    "end": "144160"
  },
  {
    "text": "of customers that are consuming the sorts of services we're talking about today",
    "start": "144160",
    "end": "149360"
  },
  {
    "text": "so why aws for application services let's start with a definition so what do",
    "start": "149360",
    "end": "155519"
  },
  {
    "text": "we mean by application services i think generally we'll talk about these as being services that wrap software you",
    "start": "155519",
    "end": "162400"
  },
  {
    "text": "commonly install and manage yourself so that could be anything from running a database platform",
    "start": "162400",
    "end": "167840"
  },
  {
    "text": "an email server a search engine a piece of middleware piece of workflow",
    "start": "167840",
    "end": "174560"
  },
  {
    "text": "application services to aws can cover a broad range of topics",
    "start": "174560",
    "end": "179920"
  },
  {
    "text": "such as databases middleware frameworks and analytics and we're going to dive into each of these in turn",
    "start": "179920",
    "end": "185280"
  },
  {
    "text": "through the presentation to look at the types of services we have from rds to emr to",
    "start": "185280",
    "end": "191120"
  },
  {
    "text": "middleware such as simple workflow and sqs now what the challenges that are common",
    "start": "191120",
    "end": "197360"
  },
  {
    "text": "with application services are that those are the common running any sort of application namely scalability",
    "start": "197360",
    "end": "202720"
  },
  {
    "text": "reliability and availability and if you find yourself focusing um",
    "start": "202720",
    "end": "208239"
  },
  {
    "text": "on the task of scaling a framework that you may be running to perform a function within your application rather than",
    "start": "208239",
    "end": "213760"
  },
  {
    "text": "optimizing your code for scalability or your side of the argument for architectural scalability",
    "start": "213760",
    "end": "219680"
  },
  {
    "text": "or if you find yourself suffering from reliability of components",
    "start": "219680",
    "end": "224720"
  },
  {
    "text": "that you're using to build your application that are affecting the overall performance of your application",
    "start": "224720",
    "end": "230560"
  },
  {
    "text": "or you're spending a lot of time scaling middleware and making it highly available and fault tolerant if you like",
    "start": "230560",
    "end": "236080"
  },
  {
    "text": "the glue between application components if you're decoupling your architecture then that glue needs to be as reliable",
    "start": "236080",
    "end": "241680"
  },
  {
    "text": "as the components that surround it and if any of these sort of questions ring true for you then you may consider",
    "start": "241680",
    "end": "248159"
  },
  {
    "text": "running or consuming an application service as opposed to installing and managing that software yourself",
    "start": "248159",
    "end": "255280"
  },
  {
    "text": "another challenge with application services is the operational management it's one thing thinking about the architecture and design and how you make",
    "start": "255280",
    "end": "261519"
  },
  {
    "text": "these things reliable available and scalable but you've got to manage stuff as well so are you spending more time",
    "start": "261519",
    "end": "266880"
  },
  {
    "text": "managing application services than you do building and managing the applications cause your business then",
    "start": "266880",
    "end": "272479"
  },
  {
    "text": "you want to think about consuming these things as a service just as you would maybe consume email",
    "start": "272479",
    "end": "278320"
  },
  {
    "text": "services as a service in your business to use your backend email server rather than running as an email server yourself",
    "start": "278320",
    "end": "284720"
  },
  {
    "text": "think of the components that build your applications in a similar sort of way",
    "start": "284720",
    "end": "290000"
  },
  {
    "text": "when we speak to customers and customers can be anything from the startups through to amazon retail organization",
    "start": "290639",
    "end": "296639"
  },
  {
    "text": "themselves who run on aws we're often brought back to this statistic that",
    "start": "296639",
    "end": "302000"
  },
  {
    "text": "70 percent of the time spent in running an application particularly in on-premise environments is performing",
    "start": "302000",
    "end": "308560"
  },
  {
    "text": "undifferentiated heavy lifting so doing all the the muck associated with making stuff run as opposed to the 30 of your",
    "start": "308560",
    "end": "316000"
  },
  {
    "text": "time focusing on your business and we can flip that with cloud-based infrastructure and in particular when",
    "start": "316000",
    "end": "322080"
  },
  {
    "text": "you start to consume core components as services rather than installing and managing software to do those things",
    "start": "322080",
    "end": "327680"
  },
  {
    "text": "yourselves you spend less time configuring assets in this case cloud assets and more time focusing your",
    "start": "327680",
    "end": "334160"
  },
  {
    "text": "business and this is a common theme that we're going to see through today's webinar when we talk about the",
    "start": "334160",
    "end": "339199"
  },
  {
    "text": "individual services on offer and how they can affect the dynamic in your your devops teams",
    "start": "339199",
    "end": "346639"
  },
  {
    "text": "if you think about how cloud services are constructed everything from compute through security networking monitoring",
    "start": "347440",
    "end": "354639"
  },
  {
    "text": "and so on infrastructure and application services they're building blocks for building applications and they are",
    "start": "354639",
    "end": "360479"
  },
  {
    "text": "designed and built from the ground up for the cloud and available at the end of a web service so just as you would consume",
    "start": "360479",
    "end": "367759"
  },
  {
    "text": "maybe an ec2 instance to perform a particular task and you might consider that instance to be disposable when you",
    "start": "367759",
    "end": "373840"
  },
  {
    "text": "finish that job and you would expect that things like s3 or simple storage platform are built for",
    "start": "373840",
    "end": "379680"
  },
  {
    "text": "very high durability of objects will see the same sort of properties of durability of reliability of",
    "start": "379680",
    "end": "386560"
  },
  {
    "text": "scalability applied to application services such as databases such as",
    "start": "386560",
    "end": "392160"
  },
  {
    "text": "messaging middleware and workflows and that's going to be again a common theme that we'll see through today's",
    "start": "392160",
    "end": "397759"
  },
  {
    "text": "presentation so some of the customers that use application servers in aws there's",
    "start": "397759",
    "end": "403759"
  },
  {
    "text": "there's many and they're varied but i've tried to pick four here that give a good spread so if you look at sega sega focus",
    "start": "403759",
    "end": "409919"
  },
  {
    "text": "on using rds to power their online forums and some of the multiplayer games that they have we'll look at that case",
    "start": "409919",
    "end": "416400"
  },
  {
    "text": "study a bit more detail later shazam the popular music and tagging application use dynamodb so a managed",
    "start": "416400",
    "end": "424560"
  },
  {
    "text": "nosql database to bring on massive capacity and the case study we talked around is",
    "start": "424560",
    "end": "429840"
  },
  {
    "text": "handling a demand peak during the super bowl a huge peak in demand and they were able to scale",
    "start": "429840",
    "end": "435599"
  },
  {
    "text": "up by simply issuing a command to dynamo as opposed to dealing with the operational side of",
    "start": "435599",
    "end": "441280"
  },
  {
    "text": "life of dealing with a nosql cluster themselves smug mug",
    "start": "441280",
    "end": "446400"
  },
  {
    "text": "allow themselves to focus on their application and architecture as opposed to running very large search clusters by",
    "start": "446400",
    "end": "452240"
  },
  {
    "text": "using cloud search so smug mug is a photo sharing and tagging application and in the world of scientific research",
    "start": "452240",
    "end": "459199"
  },
  {
    "text": "sage buyer networks rely on simple workflow to orchestrate some very complicated and heterogeneous scientific",
    "start": "459199",
    "end": "465919"
  },
  {
    "text": "workflows across collaborators and across different companies so coordinating a pipeline of processing to",
    "start": "465919",
    "end": "473039"
  },
  {
    "text": "deal with biomedical research so quite varied from rds from a relational database as a service through",
    "start": "473039",
    "end": "479280"
  },
  {
    "text": "nosql data stores through search engines to workflow and coordination and orchestration",
    "start": "479280",
    "end": "484960"
  },
  {
    "text": "and we're going to look at those services in turn in a moment now you might be able to by consuming a",
    "start": "484960",
    "end": "492160"
  },
  {
    "text": "service reduce costs okay so running software on ec2 can be more expensive",
    "start": "492160",
    "end": "497440"
  },
  {
    "text": "than consuming that same functionality as a service and when we look at some of the examples you'll see some some",
    "start": "497440",
    "end": "502720"
  },
  {
    "text": "obvious ones where you might run and consume a queue and you might need an ec2 instance to run a queuing service to",
    "start": "502720",
    "end": "510000"
  },
  {
    "text": "decouple applications now consuming that queue as part of a service means that you can stop running",
    "start": "510000",
    "end": "515680"
  },
  {
    "text": "that ec2 instance and therefore you save costs so very basic cost saving mechanism there",
    "start": "515680",
    "end": "522959"
  },
  {
    "text": "you can improve reliability because the services we'll talk about are built with inherent multi-azed functionalities so",
    "start": "522959",
    "end": "529680"
  },
  {
    "text": "multi-availability zone regional level services can help improve your overall application reliability",
    "start": "529680",
    "end": "537760"
  },
  {
    "text": "you can scale more easily so these services built at a regional level and built across multi-az and built with",
    "start": "537760",
    "end": "543839"
  },
  {
    "text": "auto scaling in mind mean that they can scale for you and you don't have to put the the effort in designing software and",
    "start": "543839",
    "end": "550959"
  },
  {
    "text": "installing configurations that will scale we take care of that and you don't need to invest in in infrastructure or",
    "start": "550959",
    "end": "557839"
  },
  {
    "text": "software or licenses to do we just take care of that behind the scenes and you can refocus your energies so you",
    "start": "557839",
    "end": "564399"
  },
  {
    "text": "can spend less time doing undifferentiated heavy lifting as a result and spend more time on your",
    "start": "564399",
    "end": "569519"
  },
  {
    "text": "business so an example of that in action",
    "start": "569519",
    "end": "575760"
  },
  {
    "text": "is a queueing so as i just described so take a typical example where we have two applications the two top yellow boxes",
    "start": "575760",
    "end": "583839"
  },
  {
    "text": "that are needing to talk to each other and they are decoupled architecturally via a persistent message queue enabling you to",
    "start": "583839",
    "end": "591519"
  },
  {
    "text": "to create fault tolerance and architectural isolation between the application components that are doing particular tasks so in this case i've",
    "start": "591519",
    "end": "598399"
  },
  {
    "text": "installed some sort of queuing software on the instance and i've installed an instance in an",
    "start": "598399",
    "end": "604240"
  },
  {
    "text": "availability zone so i've effectively got three ec2 instances two of them running my application",
    "start": "604240",
    "end": "609839"
  },
  {
    "text": "components and one of them running a piece of middleware now if i want to make that",
    "start": "609839",
    "end": "614959"
  },
  {
    "text": "fault tolerant and highly available then i would start to spread things across multiple availability zones",
    "start": "614959",
    "end": "622399"
  },
  {
    "text": "where i've got three queues each an individual availability zone running on a server and i've got an implement some",
    "start": "622399",
    "end": "628240"
  },
  {
    "text": "technical process where that queue is shared or clustered across multiple availability",
    "start": "628240",
    "end": "633920"
  },
  {
    "text": "zones so that i can treat my entire application as a whole across the region as being fault tolerant",
    "start": "633920",
    "end": "641839"
  },
  {
    "text": "with a software service and in this case we're going to talk about sqs i can remove the software running on ec2 so i",
    "start": "643760",
    "end": "650480"
  },
  {
    "text": "can get rid of this cues that i've installed i can save myself some ec2 costs and i can replace it with a",
    "start": "650480",
    "end": "656800"
  },
  {
    "text": "regional service running in aws called sqs so i can simplify the operations in",
    "start": "656800",
    "end": "663519"
  },
  {
    "text": "each of the availability zone i don't have to run ec2 instances and manage and",
    "start": "663519",
    "end": "668560"
  },
  {
    "text": "monitor those i've saved some cost and i've improved my overall reliability as result because sqs is by definition a",
    "start": "668560",
    "end": "675760"
  },
  {
    "text": "regional service that's highly durable and highly scalable",
    "start": "675760",
    "end": "681360"
  },
  {
    "text": "so queuing on aws if you did it yourself you might set up and manage some instances you're going to install and",
    "start": "682240",
    "end": "687839"
  },
  {
    "text": "configure some messaging middleware of your chosen flavor you might then have to set up a persistent message store",
    "start": "687839",
    "end": "693279"
  },
  {
    "text": "behind that be that a database or a file system then think about clustering across availability zones so you can",
    "start": "693279",
    "end": "699440"
  },
  {
    "text": "achieve some sort of high availability configuration in best practice and then you might need to start",
    "start": "699440",
    "end": "705120"
  },
  {
    "text": "monitoring the application framework and the queuing system you put on those ec2 instances and then you can start to",
    "start": "705120",
    "end": "711040"
  },
  {
    "text": "consume and use those cues in your applications versus with amazon sqs",
    "start": "711040",
    "end": "716720"
  },
  {
    "text": "simply creating a queue from the console or from the apis or cli tools",
    "start": "716720",
    "end": "722240"
  },
  {
    "text": "and then using an http boot to place messages on the queue when http gets and",
    "start": "722240",
    "end": "727519"
  },
  {
    "text": "recently we've increased supported long polling for sqs to pull messages off the queue and you get all the configuration",
    "start": "727519",
    "end": "734000"
  },
  {
    "text": "in the ui all the command line all the api to handle things like message locking and so on to ensure you get",
    "start": "734000",
    "end": "740079"
  },
  {
    "text": "consistent guaranteed delivery of messages between an application and another so a greatly simplified approach and a",
    "start": "740079",
    "end": "746720"
  },
  {
    "text": "very cost effective and scalable approach let's look at some of the application",
    "start": "746720",
    "end": "752560"
  },
  {
    "text": "services that was an example of sqs but there of course there are other application services in aws",
    "start": "752560",
    "end": "758399"
  },
  {
    "text": "so looking at databases on the left we have a relational database service wrapping a classic rd bms system",
    "start": "758399",
    "end": "766720"
  },
  {
    "text": "and we'll look at that from oracle my sql and ms sql in a second we've got",
    "start": "766720",
    "end": "771760"
  },
  {
    "text": "simple db which is a a lightweight object store that enables you to do a no",
    "start": "771760",
    "end": "778720"
  },
  {
    "text": "sql-like framework but highly indexed so really very flexible and great for small-scale",
    "start": "778720",
    "end": "784399"
  },
  {
    "text": "storing of different things like session states or average sort of size payloads that you",
    "start": "784399",
    "end": "789600"
  },
  {
    "text": "might want to put in a non-relational store through to dynamodb which is a hugely scalable highly scalable nosql",
    "start": "789600",
    "end": "797120"
  },
  {
    "text": "store with a restricted indexing paradigm on top of it so like simple db but going to",
    "start": "797120",
    "end": "802880"
  },
  {
    "text": "a much greater scale um so similar things like mongodb or cassandra",
    "start": "802880",
    "end": "808639"
  },
  {
    "text": "through middleware so we have caching software which is a memcached framework called elasticash so whereas you would",
    "start": "808639",
    "end": "815680"
  },
  {
    "text": "maybe typically install a memcached cluster you can consume memcache as a",
    "start": "815680",
    "end": "822000"
  },
  {
    "text": "service from elasticache and we'll take care of installing the ec2 instances installing the software managing the",
    "start": "822000",
    "end": "828639"
  },
  {
    "text": "cluster across multiple availability zones to give you a highly available performant cache",
    "start": "828639",
    "end": "834160"
  },
  {
    "text": "simple queuing service which you've just seen and so think of simple queuing services replacing the need to",
    "start": "834160",
    "end": "840800"
  },
  {
    "text": "let's say use a jms provider and back that onto a database for example and to make that message store persistent in",
    "start": "840800",
    "end": "847040"
  },
  {
    "text": "your environment through a simple notification service which is a pub sub framework",
    "start": "847040",
    "end": "853199"
  },
  {
    "text": "so similar to some of the concepts you might see in a classic jms or message queueing framework that enables you to",
    "start": "853199",
    "end": "859120"
  },
  {
    "text": "do publish and subscribe simple notification service provides that functionality as a service so you",
    "start": "859120",
    "end": "865040"
  },
  {
    "text": "can subscribe to topics and topics can create alarms that you can drive through",
    "start": "865040",
    "end": "871120"
  },
  {
    "text": "aws and then you can post results to an http endpoint or send emails so you can",
    "start": "871120",
    "end": "876160"
  },
  {
    "text": "drive pub sub with simple notification service simple workflow is the ability for you",
    "start": "876160",
    "end": "882160"
  },
  {
    "text": "to manage long long-running state without having to install software to do that and we've got some specific",
    "start": "882160",
    "end": "887360"
  },
  {
    "text": "examples of simple workflow in this presentation and then there's frameworks so try to",
    "start": "887360",
    "end": "894160"
  },
  {
    "text": "position these as more application level frameworks to perform a specific function in your application so cloud",
    "start": "894160",
    "end": "900959"
  },
  {
    "text": "search replaces things like open search solar lucene type search indexes again",
    "start": "900959",
    "end": "907440"
  },
  {
    "text": "that at scale you have to manage multiple instances and manage clusters and manage the tuning of them",
    "start": "907440",
    "end": "913360"
  },
  {
    "text": "and then simple email service replacing the need for you to install email services",
    "start": "913360",
    "end": "920639"
  },
  {
    "text": "cloudwatch is a monitoring framework so you can leverage cloudwatch to do the",
    "start": "921760",
    "end": "927199"
  },
  {
    "text": "monitoring of your assets within aws from ec2 instances to",
    "start": "927199",
    "end": "933040"
  },
  {
    "text": "load balancing through databases but you can also publish your own data to cloudwatch so maybe rather than",
    "start": "933040",
    "end": "939440"
  },
  {
    "text": "installing a monitoring framework if you're starting from scratch in aws leverage cloud watch from the off and",
    "start": "939440",
    "end": "945519"
  },
  {
    "text": "then you don't have to worry about installing probes or or running servers to deal with cloud watcher with",
    "start": "945519",
    "end": "951440"
  },
  {
    "text": "monitoring framework data and on the far right we have analytics so elastic mapreduce is our hadoop as a",
    "start": "951440",
    "end": "958480"
  },
  {
    "text": "service and the services we're going to drill down on today",
    "start": "958480",
    "end": "964000"
  },
  {
    "text": "are relational database service dynamodb simple workflow cloud search and emr",
    "start": "964000",
    "end": "969440"
  },
  {
    "text": "elastic map produce so we're going to go deep on those services explain the differences between",
    "start": "969440",
    "end": "974800"
  },
  {
    "text": "them and doing it yourself and give you some examples and show you how they work",
    "start": "974800",
    "end": "980480"
  },
  {
    "text": "so the first of those we're going to drop down to is rds amazon relational database service",
    "start": "980880",
    "end": "987120"
  },
  {
    "text": "so if you think about running a database the sorts of things that you need to do or that you get involved with when you",
    "start": "987120",
    "end": "993279"
  },
  {
    "text": "start installing a relational database platform and this is a forrester breakdown of the the effort you'll",
    "start": "993279",
    "end": "998399"
  },
  {
    "text": "expend so the big chunks of time are spent doing backup and recovery tasks",
    "start": "998399",
    "end": "1003759"
  },
  {
    "text": "there twenty percent of your time in gray performance tuning in purple going anti-clockwise and then the installation",
    "start": "1003759",
    "end": "1010480"
  },
  {
    "text": "of service of the the platform upgrade management patching of the um the",
    "start": "1010480",
    "end": "1016480"
  },
  {
    "text": "underlying database platform and performing data migrations to and from different versions",
    "start": "1016480",
    "end": "1022160"
  },
  {
    "text": "so the vast majority of the time is spent doing what we call undifferentiated heavy lifting these are",
    "start": "1022160",
    "end": "1028720"
  },
  {
    "text": "things that don't differentiate you or your application they're simply there to support the maintenance and the running",
    "start": "1028720",
    "end": "1035038"
  },
  {
    "text": "of a database platform they're not there with the database engine sort of content that you want to",
    "start": "1035039",
    "end": "1040319"
  },
  {
    "text": "put in there that drives your application on top so all sorts of tasks that we hear from migration backup and recovery software",
    "start": "1040319",
    "end": "1046798"
  },
  {
    "text": "upgrades frequent server upgrades versus things like schema design query optimization or query construction you",
    "start": "1046799",
    "end": "1053600"
  },
  {
    "text": "want to spend more time focusing on those things the design the construction of the",
    "start": "1053600",
    "end": "1058640"
  },
  {
    "text": "queries the optimization of those queries providing business functionality and logic to your apps",
    "start": "1058640",
    "end": "1064320"
  },
  {
    "text": "versus doing the mark the undifferentiated heavy lifting so migration patching configuration",
    "start": "1064320",
    "end": "1070799"
  },
  {
    "text": "upgrades dealing with hardware problems and so on and so forth now rds allows you to take away that on",
    "start": "1070799",
    "end": "1077919"
  },
  {
    "text": "differentiated heavy lifting so it's a near zero administration platform so effectively you create an aws",
    "start": "1077919",
    "end": "1084880"
  },
  {
    "text": "rds instance and we manage the ec2 instance behind the scenes you choose your database platform it can be oracle",
    "start": "1084880",
    "end": "1091360"
  },
  {
    "text": "mysql or mssql currently and you choose the size and we'll take care of the",
    "start": "1091360",
    "end": "1097360"
  },
  {
    "text": "patching the upgrade of that platform in maintenance windows you define we'll tie the database into our monitoring",
    "start": "1097360",
    "end": "1103840"
  },
  {
    "text": "framework so you can pull a load of metrics and alarms out the database and importantly you can do one click high",
    "start": "1103840",
    "end": "1110480"
  },
  {
    "text": "availability so by choosing a multi-az deployment here",
    "start": "1110480",
    "end": "1116000"
  },
  {
    "text": "is the console for rds we can see that i can choose a multi-az deployment and",
    "start": "1116000",
    "end": "1122000"
  },
  {
    "text": "note also down below there things like my backup window my maintenance windows",
    "start": "1122000",
    "end": "1127360"
  },
  {
    "text": "that i can apply the amount of storage that's allocated whether this database would have an auto miner version upgrade",
    "start": "1127360",
    "end": "1134160"
  },
  {
    "text": "or not but the multi-az deployment takes away the pain",
    "start": "1134160",
    "end": "1139360"
  },
  {
    "text": "of dealing with master slave replication between database engines so with my sql",
    "start": "1139360",
    "end": "1144799"
  },
  {
    "text": "you can choose multi-az and that will be a synchronous replication from the master to the replica and will",
    "start": "1144799",
    "end": "1150960"
  },
  {
    "text": "automatically fail over in the problem state and promote the replica to a master and you can test that failure and",
    "start": "1150960",
    "end": "1157840"
  },
  {
    "text": "it will deploy across multi-azs in line with best practice within aws architectural design",
    "start": "1157840",
    "end": "1164960"
  },
  {
    "text": "now that if you did that yourself can be quite a challenge and it can take quite a bit of time and it can certainly take",
    "start": "1164960",
    "end": "1171280"
  },
  {
    "text": "dedicated resources in your environment so with rds we can take away that pain",
    "start": "1171280",
    "end": "1178000"
  },
  {
    "text": "um you can also push button scale rds so you notice in",
    "start": "1178000",
    "end": "1183360"
  },
  {
    "text": "that screenshot that i've chosen an instance size but you can scale from very small instances and indeed",
    "start": "1183360",
    "end": "1188799"
  },
  {
    "text": "rds is available on the smallest in the free tier for you to get trying but you",
    "start": "1188799",
    "end": "1194000"
  },
  {
    "text": "can go to some of the largest instances with very high i o and indeed you can choose",
    "start": "1194000",
    "end": "1199360"
  },
  {
    "text": "provision diops so if you've got particularly intensive operations on a database and you need consistency from",
    "start": "1199360",
    "end": "1205039"
  },
  {
    "text": "the i o from the underlying storage technologies you can choose to provision",
    "start": "1205039",
    "end": "1211120"
  },
  {
    "text": "particular levels of i o operations per second and of course you can add read replicas at a click of a button so you can",
    "start": "1211120",
    "end": "1218000"
  },
  {
    "text": "offload the reads from a master database and you can integrate with things like elasticash which i mentioned before",
    "start": "1218000",
    "end": "1225039"
  },
  {
    "text": "for performance so these are all things that traditionally would take a db admin",
    "start": "1225039",
    "end": "1230240"
  },
  {
    "text": "sometime to get right and to maintain and to keep up to scratch with rds we take away that pain and do it for you",
    "start": "1230240",
    "end": "1237840"
  },
  {
    "text": "so it's a database as a service no need for you to install or manage databases on ec2 and it's inherently scalable and",
    "start": "1237840",
    "end": "1245120"
  },
  {
    "text": "fault tolerant in this configuration should you choose to click the button so we support as i said my sql sql server",
    "start": "1245120",
    "end": "1251280"
  },
  {
    "text": "and oracle rd bms's you can bring your own licenses for oracle and sql server if you have them",
    "start": "1251280",
    "end": "1257440"
  },
  {
    "text": "already or you can choose to have the incorporated hourly rate on those databases where we take the license",
    "start": "1257440",
    "end": "1263360"
  },
  {
    "text": "pane for you they're pre-configured so you get started instantly just as quickly as you can create an ec2 instance you can",
    "start": "1263360",
    "end": "1269760"
  },
  {
    "text": "create an rds instance and being given an endpoint which you can then start using in your applications we'll take care of",
    "start": "1269760",
    "end": "1276320"
  },
  {
    "text": "the patching the backups the recovery and the failover and the replication to deal with ha deployment take away all",
    "start": "1276320",
    "end": "1282799"
  },
  {
    "text": "the pain points for you so rd bms on aws you can of course go",
    "start": "1282799",
    "end": "1289440"
  },
  {
    "text": "and install and set up one yourself and you would set up and manage the instances and ect to do that you would",
    "start": "1289440",
    "end": "1296080"
  },
  {
    "text": "install and configure the database platform so you might on linux yum install my sql or install an mssql",
    "start": "1296080",
    "end": "1302320"
  },
  {
    "text": "database on a windows instance you then need to think about the backup strategy and create the jobs that are",
    "start": "1302320",
    "end": "1307520"
  },
  {
    "text": "going to go off and uh you know take backups you might need to do housekeeping log management and so on as",
    "start": "1307520",
    "end": "1313280"
  },
  {
    "text": "well at the same time you're going to implement master slave if you want h a so you have to do the",
    "start": "1313280",
    "end": "1318880"
  },
  {
    "text": "the job of dealing with that whether you want synchronous or asynchronous replication um if you want performance",
    "start": "1318880",
    "end": "1324640"
  },
  {
    "text": "offloading of read replicas you're going to need to go and create new ec2 instances and then do installations and configure",
    "start": "1324640",
    "end": "1330720"
  },
  {
    "text": "those to be read replicas and then you're going to need to manage the maintenance of all of those instances you just created not to mention the",
    "start": "1330720",
    "end": "1336799"
  },
  {
    "text": "monitoring with rds and you'll see a theme through this presentation these comparisons you",
    "start": "1336799",
    "end": "1342480"
  },
  {
    "text": "simply create the instance select multi-az if you want it choose your backup retention period choose the",
    "start": "1342480",
    "end": "1347760"
  },
  {
    "text": "maintenance windows and click go and that database platform's then available to you to the instant sizes",
    "start": "1347760",
    "end": "1354559"
  },
  {
    "text": "you've chosen and we'll take care of all the things like backups and failover if we need to",
    "start": "1354559",
    "end": "1360000"
  },
  {
    "text": "fail that database over so sega i mentioned before use um rds so",
    "start": "1360000",
    "end": "1367760"
  },
  {
    "text": "there's any gamers in the audience you probably used some of the sites that are backed by rds so some very popular",
    "start": "1367760",
    "end": "1375919"
  },
  {
    "text": "football games and first person shooter games are backed by rds so not only",
    "start": "1375919",
    "end": "1381120"
  },
  {
    "text": "things like the the forums but also a lot of media content game metadata that drives",
    "start": "1381120",
    "end": "1386960"
  },
  {
    "text": "some of the multiplayer games and the user generated content within those those games is all within",
    "start": "1386960",
    "end": "1393120"
  },
  {
    "text": "amazon rds and sega use a multi-az deployment um and they talk about it",
    "start": "1393120",
    "end": "1398480"
  },
  {
    "text": "taking away the the time consuming database administration tasks and allowing them",
    "start": "1398480",
    "end": "1403520"
  },
  {
    "text": "to focus on business critical applications which to them is world-class content",
    "start": "1403520",
    "end": "1408640"
  },
  {
    "text": "games and continued reliability so that gamers can enjoy the experience whenever they want to and it's always there",
    "start": "1408640",
    "end": "1417480"
  },
  {
    "text": "okay so moving on dynamodb",
    "start": "1418080",
    "end": "1424400"
  },
  {
    "text": "so dynamodb is amazon's nosql high performance data store and it's designed",
    "start": "1424400",
    "end": "1430400"
  },
  {
    "text": "to solve a particular type of problem so if you look at relational databases the performance that we want from a",
    "start": "1430400",
    "end": "1437039"
  },
  {
    "text": "relational database the any scale is consistent so here a straight line that",
    "start": "1437039",
    "end": "1442320"
  },
  {
    "text": "we would like a relational database to provide predictable consistent performance regardless of the",
    "start": "1442320",
    "end": "1449200"
  },
  {
    "text": "scale that that database is operating at regardless of the the number of rows that are in a particular table",
    "start": "1449200",
    "end": "1456000"
  },
  {
    "text": "the the sheer volume of data in terms of gigabytes or terabytes of storage required behind it and the associated",
    "start": "1456000",
    "end": "1462640"
  },
  {
    "text": "indexes that go with it um but in reality as databases relational databases get bigger their performance",
    "start": "1462640",
    "end": "1469440"
  },
  {
    "text": "degrades and we start having to do more work around trying to break that gap and",
    "start": "1469440",
    "end": "1474880"
  },
  {
    "text": "bring it towards the straight line so whether it be more hardware that we need to roll in the sharding of our",
    "start": "1474880",
    "end": "1480159"
  },
  {
    "text": "relational databases across multiple pieces of the hardware implementing caching strategies around it and then",
    "start": "1480159",
    "end": "1486240"
  },
  {
    "text": "you have to deal with all the things around cluster management and then the fault management of a cluster so it becomes quite complicated at very large",
    "start": "1486240",
    "end": "1492720"
  },
  {
    "text": "scales to run relational databases to get consistent performance and i think there's a point in time at which you'll",
    "start": "1492720",
    "end": "1498880"
  },
  {
    "text": "start to see this degradation so dynamodb was designed",
    "start": "1498880",
    "end": "1504960"
  },
  {
    "text": "in order to alleviate that problem and to provide a consistency of performance",
    "start": "1504960",
    "end": "1510240"
  },
  {
    "text": "on a table basis that's predictable at any scale so dynamodb introduces the concept of",
    "start": "1510240",
    "end": "1517679"
  },
  {
    "text": "simply dialing up the provisioned capacity that you so wish behind a particular table",
    "start": "1517679",
    "end": "1523679"
  },
  {
    "text": "and other nosql databases out there such as or cassandra operate on a symbol similar basis so effectively they",
    "start": "1523679",
    "end": "1530720"
  },
  {
    "text": "are non-relational stores of key value pairs with particular types of indexes across",
    "start": "1530720",
    "end": "1537360"
  },
  {
    "text": "them and particular sharding strategies behind the scenes that enable them to provide very high performance at very",
    "start": "1537360",
    "end": "1542960"
  },
  {
    "text": "high scale and if you look at what dynamodb does behind the scenes at a low",
    "start": "1542960",
    "end": "1550240"
  },
  {
    "text": "provision throughput we will take your table definition and we will place it on",
    "start": "1550240",
    "end": "1555919"
  },
  {
    "text": "ssd backed hardware within a region that you chose to run now behind the scenes what we're",
    "start": "1555919",
    "end": "1561919"
  },
  {
    "text": "actually doing is putting multiple copies of that table a partition of that table across",
    "start": "1561919",
    "end": "1567520"
  },
  {
    "text": "replicas in multiple availability zones all backed by ssd hardware but my diagrams will become quite",
    "start": "1567520",
    "end": "1573600"
  },
  {
    "text": "complicated if i keep showing availability zones so think of dynamodb as a regional service that you in create",
    "start": "1573600",
    "end": "1580799"
  },
  {
    "text": "a table within a region and by design and inherently behind the scenes it is replicated and therefore an h a table",
    "start": "1580799",
    "end": "1589120"
  },
  {
    "text": "now as you dial up the desired capacity that you want on a table you simply",
    "start": "1589120",
    "end": "1595600"
  },
  {
    "text": "increasing the number of read writes per second that you wish to receive by issuing a cli command",
    "start": "1595600",
    "end": "1601760"
  },
  {
    "text": "or using the console to dial that performance up what we'll do is we'll create more pattern or re-partition your",
    "start": "1601760",
    "end": "1608240"
  },
  {
    "text": "data and spread it across more physical hardware within a region and again",
    "start": "1608240",
    "end": "1613360"
  },
  {
    "text": "across multiple availability zones with replicas of all these partitions and because it's backed by ssd it's very",
    "start": "1613360",
    "end": "1619600"
  },
  {
    "text": "high performance very low latency and by by doing this we're able to",
    "start": "1619600",
    "end": "1625520"
  },
  {
    "text": "provide a consistency of latency for access to your data so dynamodb operates at",
    "start": "1625520",
    "end": "1632880"
  },
  {
    "text": "single-digit millisecond performance latencies for read writes on average so you can be sure regardless of the",
    "start": "1632880",
    "end": "1639200"
  },
  {
    "text": "volume of data that's in there that if you request a certain provision throughput we'll do the job to make sure",
    "start": "1639200",
    "end": "1645120"
  },
  {
    "text": "that you can get it and that applies as you go right up so if you want a hundred thousand read writes per second on a",
    "start": "1645120",
    "end": "1650960"
  },
  {
    "text": "table versus let's say 10 we will partition again across multiple physical devices all backed by ssds across",
    "start": "1650960",
    "end": "1658159"
  },
  {
    "text": "multiple availability zones in a region now if you were operating a nosql store",
    "start": "1658159",
    "end": "1663200"
  },
  {
    "text": "yourself you would have to do that task yourself you would have to manage a cluster to that degree",
    "start": "1663200",
    "end": "1669760"
  },
  {
    "text": "so dynamodb is a managed nosql data store we",
    "start": "1669760",
    "end": "1675279"
  },
  {
    "text": "you simply interact with it through provision throughput so we ask the number of teams that",
    "start": "1675279",
    "end": "1681360"
  },
  {
    "text": "internally with amazon when we were designing this and they were running the precursors to dynamo software what it",
    "start": "1681360",
    "end": "1687039"
  },
  {
    "text": "was that they wanted in terms of their interaction point was such a service and it was simply the fact that as they",
    "start": "1687039",
    "end": "1693840"
  },
  {
    "text": "required more performance they wanted to turn the knob to turn it up and that's what resulted in the dynamodb service",
    "start": "1693840",
    "end": "1699520"
  },
  {
    "text": "that we offer today so it's predictable performance as i've mentioned you get average single digit millisecond latencies because it's backed on ssd",
    "start": "1699520",
    "end": "1706320"
  },
  {
    "text": "infrastructure and we take care of all of that partitioning of data to ensure you get",
    "start": "1706320",
    "end": "1712240"
  },
  {
    "text": "the consistency that we've um on performance that we've promised it's a strongly consistent data model as",
    "start": "1712240",
    "end": "1718640"
  },
  {
    "text": "well so that you can be ensure that you're reading the most up-to-date values so when you push something in all",
    "start": "1718640",
    "end": "1724399"
  },
  {
    "text": "those replicas are updated before we return your result you can change that model if you so wish if you're not",
    "start": "1724399",
    "end": "1730399"
  },
  {
    "text": "interested in strongly consistent reads it's fault tolerant by design across multiple availability zones so again if",
    "start": "1730399",
    "end": "1736559"
  },
  {
    "text": "you're installing software to do this yourself you'd have to do the multi-az deployment yourself and it's integrated",
    "start": "1736559",
    "end": "1742240"
  },
  {
    "text": "into monitoring it's secure it integrates with iam for access controls and it integrates into elastic map",
    "start": "1742240",
    "end": "1748240"
  },
  {
    "text": "produce which will come on to you later so no sequel on aws the do-it-yourself",
    "start": "1748240",
    "end": "1754320"
  },
  {
    "text": "approach this is what customers go through when they're running things like mongol or cassandra so they'll perform",
    "start": "1754320",
    "end": "1760640"
  },
  {
    "text": "capacity planning determine the number of nodes they're going to require to support a given table or data structure",
    "start": "1760640",
    "end": "1767840"
  },
  {
    "text": "they may then define uh provisioned iops elastic block store volumes so the disks with consistent performance and instance",
    "start": "1767840",
    "end": "1774880"
  },
  {
    "text": "types behind the scene so they'll create an ec2 environment to run this stuff but then set up and manage the instances",
    "start": "1774880",
    "end": "1780480"
  },
  {
    "text": "with the software on top so installing the nosql database of choice then they'll need to start thinking",
    "start": "1780480",
    "end": "1785760"
  },
  {
    "text": "about configuring replica sets across multiple availability zones and if they want scaling to go up and down",
    "start": "1785760",
    "end": "1792640"
  },
  {
    "text": "automatically all of these things will have to be placed in an auto scaling group and the consideration of bootstrapping new instances as they come",
    "start": "1792640",
    "end": "1799120"
  },
  {
    "text": "into services um service comes into play then you get to the point of being able to define a",
    "start": "1799120",
    "end": "1804720"
  },
  {
    "text": "table and define the key strategy which can define the partitioning behind a nosql store",
    "start": "1804720",
    "end": "1810799"
  },
  {
    "text": "versus dynamodb where you simply define a table define the key type that you're",
    "start": "1810799",
    "end": "1815840"
  },
  {
    "text": "going to put across that table and then choose how fast you want that table to work and then you can start consuming",
    "start": "1815840",
    "end": "1821360"
  },
  {
    "text": "the data or pushing data into that table and get advantage of consistently low",
    "start": "1821360",
    "end": "1827039"
  },
  {
    "text": "high performance low latency high performance so you can see the again the the theme",
    "start": "1827039",
    "end": "1833360"
  },
  {
    "text": "here and doing it yourself means you have to do more stuff you have to run things in ec2 you have to manage and",
    "start": "1833360",
    "end": "1839279"
  },
  {
    "text": "monitor and update them versus just simply leveraging it as a service an elastic service at that service that you",
    "start": "1839279",
    "end": "1846000"
  },
  {
    "text": "can start off at a very low level of consumption and therefore price and scale up as you need to go",
    "start": "1846000",
    "end": "1851760"
  },
  {
    "text": "and shazam is an example i mentioned earlier of just that so shazam you know the the popular music tagging",
    "start": "1851760",
    "end": "1858720"
  },
  {
    "text": "and sharing um application you can download for your phone they scaled dynamo to over half a",
    "start": "1858720",
    "end": "1865520"
  },
  {
    "text": "million writes per second during a particular spike in demand for",
    "start": "1865520",
    "end": "1870799"
  },
  {
    "text": "their service around super bowl in the u.s so it gave them the flexibility to bring that capacity on a short period of",
    "start": "1870799",
    "end": "1876399"
  },
  {
    "text": "time they wouldn't have been physically able to do that with their own managed no sql store um simply wouldn't have",
    "start": "1876399",
    "end": "1883120"
  },
  {
    "text": "been time and the the the the way that this demand hit them to do that sort of job um and they also fed emr which i'll",
    "start": "1883120",
    "end": "1891120"
  },
  {
    "text": "come onto later from dynamo with more than one million writes per second so operating at a very very large scale",
    "start": "1891120",
    "end": "1897600"
  },
  {
    "text": "without having to deal with any of the infrastructure a behind the nosql store but also in this case behind a managed",
    "start": "1897600",
    "end": "1904159"
  },
  {
    "text": "hadoop cluster so moving through them moving away from",
    "start": "1904159",
    "end": "1909440"
  },
  {
    "text": "data and then sort of more into middleware i mentioned simple queuing service as an example before but this um",
    "start": "1909440",
    "end": "1915440"
  },
  {
    "text": "i wanted to highlight amazon's simple workflow for you and how this works and the pain that this takes away",
    "start": "1915440",
    "end": "1922080"
  },
  {
    "text": "so simple workflow is a flow framework and it effectively enables you to string together tasks to",
    "start": "1922080",
    "end": "1929200"
  },
  {
    "text": "do particular jobs in your applications so if you've signed up to amazon web services you will have",
    "start": "1929200",
    "end": "1937840"
  },
  {
    "text": "gone through a simple workflow and the simple workflow would have been to authenticate your account you'll get a phone call a little voip call you type",
    "start": "1937919",
    "end": "1944799"
  },
  {
    "text": "in a pin number and then you're identified as actually being a genuine sign up to the aws console",
    "start": "1944799",
    "end": "1951200"
  },
  {
    "text": "and that is implemented as a simple workflow behind the scenes and there's a long-running transaction state that's",
    "start": "1951200",
    "end": "1956960"
  },
  {
    "text": "managed in swf in that case and also the task distribution to particular ec2",
    "start": "1956960",
    "end": "1962480"
  },
  {
    "text": "nodes that do particular jobs so whether it be the web front end handling node that's",
    "start": "1962480",
    "end": "1969279"
  },
  {
    "text": "dealing with ui updates whether it be nodes that are dealing with making a voip call to you",
    "start": "1969279",
    "end": "1974960"
  },
  {
    "text": "and dealing with the interaction over tones when you type in your pin into the phone or dealing with the completion of the",
    "start": "1974960",
    "end": "1981120"
  },
  {
    "text": "transaction and therefore the setup of the account sort of three broad steps they'll all be different task nodes that",
    "start": "1981120",
    "end": "1987519"
  },
  {
    "text": "are managed in that simple workflow and if you look at a typical business workflow workflows are everywhere",
    "start": "1987519",
    "end": "1994000"
  },
  {
    "text": "whether it be managing a multi-player online game and the dealing with an in-game purchase",
    "start": "1994000",
    "end": "1999760"
  },
  {
    "text": "through to a traditional transactional process on e-commerce sites such as this they have multiple",
    "start": "1999760",
    "end": "2006080"
  },
  {
    "text": "steps in them and there's multiple decision points so a decision point here being a dollar or euros what's the order",
    "start": "2006080",
    "end": "2013840"
  },
  {
    "text": "placed in one or other currencies and then that drives different processing routes and then the steps involved do",
    "start": "2013840",
    "end": "2020159"
  },
  {
    "text": "something against some data in some application and typically they're over heterogeneous",
    "start": "2020159",
    "end": "2025519"
  },
  {
    "text": "systems so here we're seeing update inventories on system a versus updating a dollar account at",
    "start": "2025519",
    "end": "2031360"
  },
  {
    "text": "system b and then so on and so forth so ultimately ending up here and sending an",
    "start": "2031360",
    "end": "2036720"
  },
  {
    "text": "email via an email sending system a different application running on different environments typically",
    "start": "2036720",
    "end": "2044480"
  },
  {
    "text": "so state is a thing that's managed typically in the endpoints and such a",
    "start": "2044960",
    "end": "2050320"
  },
  {
    "text": "process so and project logic process logic is typically embedded in",
    "start": "2050320",
    "end": "2056000"
  },
  {
    "text": "the applications at the bottom too so if we look at the state here um shipping an",
    "start": "2056000",
    "end": "2061599"
  },
  {
    "text": "order and system d would manage the state of that that order and the shipment state around the updating of a financial",
    "start": "2061599",
    "end": "2068878"
  },
  {
    "text": "application might be handled by the node that's dealing with the update process logic",
    "start": "2068879",
    "end": "2074398"
  },
  {
    "text": "can be embedded at the back end of an application so updating inventory and then embedding a simple rule that says",
    "start": "2074399",
    "end": "2080800"
  },
  {
    "text": "oh was this a dollar or euro transaction therefore i'll fire off a message to a given system and then you",
    "start": "2080800",
    "end": "2086960"
  },
  {
    "text": "typically implementing middleware um between these things so shown here is a simple queue",
    "start": "2086960",
    "end": "2092240"
  },
  {
    "text": "to isolate system c from system d to handle the carry of the event between",
    "start": "2092240",
    "end": "2097760"
  },
  {
    "text": "the applications so you end up with state managed and end systems a distributed state process logic embedded",
    "start": "2097760",
    "end": "2104640"
  },
  {
    "text": "all over the place and then you're challenged with complex queuing that you might put in between systems to decouple",
    "start": "2104640",
    "end": "2110640"
  },
  {
    "text": "them and then the issues of things like dealing with the message ordering deduplication that might might happen if",
    "start": "2110640",
    "end": "2116160"
  },
  {
    "text": "you get a problem and you get two messages of the same type being generated for a given transaction",
    "start": "2116160",
    "end": "2121839"
  },
  {
    "text": "dependencies between flows as well and scaling and the failover if something goes wrong how do you fail that over and",
    "start": "2121839",
    "end": "2128400"
  },
  {
    "text": "make that highly available across you know multiple physical facilities or multiple availability zones so quite a",
    "start": "2128400",
    "end": "2134560"
  },
  {
    "text": "complex task when you start having complex heterogeneous workflows",
    "start": "2134560",
    "end": "2140079"
  },
  {
    "text": "you can implement that in a simple workflow where simple workflow",
    "start": "2140079",
    "end": "2145280"
  },
  {
    "text": "takes away like all the lines and the decision points into something called a decider so shown there in yellow is all",
    "start": "2145280",
    "end": "2152079"
  },
  {
    "text": "the routing and the flow we embody in something called a decider",
    "start": "2152079",
    "end": "2157680"
  },
  {
    "text": "and that's simply a piece of logic that you write that says if i've got an event type a what do i do with it next",
    "start": "2157680",
    "end": "2164880"
  },
  {
    "text": "and then you implement workers which are the square blocks actually do some sort of task like update inventory update an",
    "start": "2164880",
    "end": "2171520"
  },
  {
    "text": "account ship an order send an email and all the metadata and state relating to",
    "start": "2171520",
    "end": "2177520"
  },
  {
    "text": "any of the transactions that are flowing across a workflow are pushed up into the cloud and was and",
    "start": "2177520",
    "end": "2183760"
  },
  {
    "text": "stored in a highly durable way similar to how we would store s3 data so our sqs",
    "start": "2183760",
    "end": "2189760"
  },
  {
    "text": "data with a simple queuing service so highly durable storage of that metadata and the state of any given",
    "start": "2189760",
    "end": "2195839"
  },
  {
    "text": "implementation of a workflow or execution of a workflow",
    "start": "2195839",
    "end": "2200960"
  },
  {
    "text": "so looking at that slightly differently and see how simple workflow works is that you implement a decider and it",
    "start": "2200960",
    "end": "2206720"
  },
  {
    "text": "simply polls the workflow service to say have you got any decisions for me to make and this is",
    "start": "2206720",
    "end": "2213119"
  },
  {
    "text": "something that you write again you can write it against a number of our apis with a very simple set of apis where you",
    "start": "2213119",
    "end": "2219359"
  },
  {
    "text": "write a logic in the chosen language that you wish to run in so this might be to say that a process step has completed",
    "start": "2219359",
    "end": "2227040"
  },
  {
    "text": "and on based upon the outcome of that processing step the decider will say move this execution onto step a or b as",
    "start": "2227040",
    "end": "2234640"
  },
  {
    "text": "a result and it will post that result to say i've moved and made a decision on and",
    "start": "2234640",
    "end": "2240320"
  },
  {
    "text": "worker tasks polls simple workflows and say have you got anything for me to do so a worker task might be encode video",
    "start": "2240320",
    "end": "2247680"
  },
  {
    "text": "or it might be send email simple worker that's polling to say do you have any",
    "start": "2247680",
    "end": "2252720"
  },
  {
    "text": "jobs of this particular type for me to do because if you do i'll pick one off the queue and i'll do it and i'll tell",
    "start": "2252720",
    "end": "2258079"
  },
  {
    "text": "you when i'm finished and if i don't finish i'll the simple workflow service will handle all those",
    "start": "2258079",
    "end": "2263520"
  },
  {
    "text": "failures and ensure that rollback occurs and i get consistency across the workflow",
    "start": "2263520",
    "end": "2269280"
  },
  {
    "text": "um so workflows on aws you can obviously do this yourself and there are many frameworks for doing this yourself um so",
    "start": "2269280",
    "end": "2276079"
  },
  {
    "text": "again you would set up and manage instances install the software to do the job architect that for high availability and",
    "start": "2276079",
    "end": "2282400"
  },
  {
    "text": "then you get to deal with the implementation of the workflow so this could be visual workflows in a high",
    "start": "2282400",
    "end": "2287599"
  },
  {
    "text": "level uml like language or it could be a bpml definition a complex xml form and",
    "start": "2287599",
    "end": "2293760"
  },
  {
    "text": "then you get to implement the process and the audit around that process to ensure that things are happening to your business's satisfaction and that can get",
    "start": "2293760",
    "end": "2300640"
  },
  {
    "text": "quite difficult and it can become quite complex in terms of having to learn new technologies and particularly languages",
    "start": "2300640",
    "end": "2306720"
  },
  {
    "text": "to define those workflows versus simple workflow when we asked our customers what they wanted from a",
    "start": "2306720",
    "end": "2312800"
  },
  {
    "text": "workflow engine was fundamentally to implement the decision logic in a language of their choice they wanted to",
    "start": "2312800",
    "end": "2318640"
  },
  {
    "text": "use the language that they use for all their other applications to define a simple set of workflow logic a simple",
    "start": "2318640",
    "end": "2323760"
  },
  {
    "text": "decision tree and then to implement task workers against a very simple api to get",
    "start": "2323760",
    "end": "2329280"
  },
  {
    "text": "a job and then to say whether that job is complete or not and that's simple workflow",
    "start": "2329280",
    "end": "2334960"
  },
  {
    "text": "and it's been used in a whole host of use cases but this one's probably the most exciting use case which is the mars",
    "start": "2334960",
    "end": "2340160"
  },
  {
    "text": "rovers and curiosity included in this even though this is the the old rovers",
    "start": "2340160",
    "end": "2345280"
  },
  {
    "text": "and what happened is that these rovers have stereographic cameras on their um",
    "start": "2345280",
    "end": "2350320"
  },
  {
    "text": "on the stalks that you saw there at the top um and they take images from those",
    "start": "2350320",
    "end": "2355599"
  },
  {
    "text": "cameras um and take left and right images and they perform a warping operation and they need to stereo match",
    "start": "2355599",
    "end": "2361040"
  },
  {
    "text": "those images and then produce a 3d map which enables which connect tiled so",
    "start": "2361040",
    "end": "2366240"
  },
  {
    "text": "that operator on earth can get a good grip on where that rover is and make a decision on where that rover should go",
    "start": "2366240",
    "end": "2372640"
  },
  {
    "text": "next and the resulting images um look something like this obviously with 3d goggles they'd look a lot better",
    "start": "2372640",
    "end": "2380079"
  },
  {
    "text": "but that was a simple workflow coordinating various steps in the management images from the rovers and in",
    "start": "2380079",
    "end": "2386960"
  },
  {
    "text": "this case they actually incorporated both ec2 assets to do various tasks in",
    "start": "2386960",
    "end": "2392400"
  },
  {
    "text": "that workflow with existing on-premise assets that were configured to do particular tasks because simply they're",
    "start": "2392400",
    "end": "2399280"
  },
  {
    "text": "polling to the simple workflow work service to get some tasks to perform and that can be an ec2 instances doing that",
    "start": "2399280",
    "end": "2406079"
  },
  {
    "text": "polling or it could be an on-premise server",
    "start": "2406079",
    "end": "2410839"
  },
  {
    "text": "so moving on to more application orientated frameworks amazon cloud search is search wrapped as a service",
    "start": "2413040",
    "end": "2420000"
  },
  {
    "text": "now if you're operating at a low level of scale you know you might want to get away with a very basic search such as this a select",
    "start": "2420000",
    "end": "2427200"
  },
  {
    "text": "statement on a database but as you start getting up the volume tree so you know million hits a day five million objects",
    "start": "2427200",
    "end": "2433760"
  },
  {
    "text": "in a database that doesn't quite cut it and actually searching for things becomes quite a tricky task",
    "start": "2433760",
    "end": "2439440"
  },
  {
    "text": "to perform typical projects would be firstly to do a lot of educational research by a book",
    "start": "2439440",
    "end": "2446000"
  },
  {
    "text": "on search because the search technologies out there particularly open search technology or even the commercial ones are very complicated behind the",
    "start": "2446000",
    "end": "2452000"
  },
  {
    "text": "scenes um you don't have to plan a poc is the search engine going to work for me train",
    "start": "2452000",
    "end": "2457040"
  },
  {
    "text": "some people and how these search engines work buy some hardware install the software on that hardware tune it",
    "start": "2457040",
    "end": "2462720"
  },
  {
    "text": "because everyone's search problems different and the way the indexes need to be managed can be different and then you're into production you need to think",
    "start": "2462720",
    "end": "2468880"
  },
  {
    "text": "about scaling the hardware as your search volumes go up or your data goes up and then you rinse and repeat tune software scale hardware and go around in",
    "start": "2468880",
    "end": "2475040"
  },
  {
    "text": "a circle now with cloud search you can not do all that and",
    "start": "2475040",
    "end": "2480640"
  },
  {
    "text": "you can simply integrate search as a service so integrate some simple endpoints into your application as",
    "start": "2480640",
    "end": "2486000"
  },
  {
    "text": "opposed to having to do all the management of the environment yourself and cloud search is built upon a9 and a9",
    "start": "2486000",
    "end": "2492960"
  },
  {
    "text": "is the same search engine technology that is behind the amazon retail site so what we did is we took the software that",
    "start": "2492960",
    "end": "2499440"
  },
  {
    "text": "we run ourselves and have been doing for 10 years or so and then wrap that in the same",
    "start": "2499440",
    "end": "2504720"
  },
  {
    "text": "principles of aws which is to make it on demand pay as you go elastic behind the scenes so we've taken",
    "start": "2504720",
    "end": "2511599"
  },
  {
    "text": "the a9 technology and called it cloud search by putting it into aws if you look at what a search is",
    "start": "2511599",
    "end": "2518480"
  },
  {
    "text": "search has got a number of um facets to it and facets pardon the pun because facets is",
    "start": "2518480",
    "end": "2524720"
  },
  {
    "text": "one of those aspects if you like so down the bottom left the facet if you go on to amazon retail and search for",
    "start": "2524720",
    "end": "2530319"
  },
  {
    "text": "something you'll see groups of objects by here by department color material and counts of objects that fit into those",
    "start": "2530319",
    "end": "2536800"
  },
  {
    "text": "groups so they're the facets you get fielded so you get groups again a category level you can drill down into",
    "start": "2536800",
    "end": "2543680"
  },
  {
    "text": "you have to deal with the tokenization of the search term to make it effective to be searched across and then of course",
    "start": "2543680",
    "end": "2549839"
  },
  {
    "text": "you get results and then the ranking of those results is important because you might have different data that wants to drive different sorts of ranking you",
    "start": "2549839",
    "end": "2556400"
  },
  {
    "text": "might have promotions you might have user reviews that would drive the ordering of how these things are brought back and",
    "start": "2556400",
    "end": "2562319"
  },
  {
    "text": "displayed to a user so that's the anatomy of a search engine and within",
    "start": "2562319",
    "end": "2568720"
  },
  {
    "text": "aws cloud search all of that functionality is provided through two very simple endpoints so simple",
    "start": "2568720",
    "end": "2575200"
  },
  {
    "text": "endpoints in terms of where you stick data where you upload your documents to be indexed for search",
    "start": "2575200",
    "end": "2581280"
  },
  {
    "text": "and then the endpoint from which you then can search the documents that you've inserted into your cloud search",
    "start": "2581280",
    "end": "2587359"
  },
  {
    "text": "domain and you will get all that faceting all of that fielded",
    "start": "2587359",
    "end": "2593119"
  },
  {
    "text": "rank ordering of results you get a tokenization of the search terms as part and parcel of using the service against",
    "start": "2593280",
    "end": "2599119"
  },
  {
    "text": "the search endpoint um so you can try cloud search and",
    "start": "2599119",
    "end": "2604480"
  },
  {
    "text": "there's a free trial available for cloud search at the moment so if you want to have a go",
    "start": "2604480",
    "end": "2610640"
  },
  {
    "text": "you can upload some documents and you can use the test ui within the console",
    "start": "2610640",
    "end": "2617119"
  },
  {
    "text": "so you can see here that i've created a search against my own search data set on the right i've got my facets being",
    "start": "2617119",
    "end": "2623119"
  },
  {
    "text": "returned and i've got my results in the middle there for a search for",
    "start": "2623119",
    "end": "2628560"
  },
  {
    "text": "over a particular data set and the example that i've just run there was actually behind the scenes is",
    "start": "2628560",
    "end": "2634640"
  },
  {
    "text": "hitting an endpoint against my search domain in this case i've got a toilet in oz search domain for a little mobile",
    "start": "2634640",
    "end": "2640720"
  },
  {
    "text": "application to find the toilet when you're traveling i mean it's hitting a search domain there and firing in a",
    "start": "2640720",
    "end": "2646000"
  },
  {
    "text": "query string and then some search options so a simple web service call that would return",
    "start": "2646000",
    "end": "2651599"
  },
  {
    "text": "a json object so in this case it's returning the hits that's found some information",
    "start": "2651599",
    "end": "2657760"
  },
  {
    "text": "about the computation time around those hits and then the return results can be configured based upon the options that i",
    "start": "2657760",
    "end": "2662880"
  },
  {
    "text": "fire into the search endpoint now cloud search is scalable so if you",
    "start": "2662880",
    "end": "2668400"
  },
  {
    "text": "were implementing search yourself you would have to deal with just like nosql databases deal with a",
    "start": "2668400",
    "end": "2674079"
  },
  {
    "text": "lot of clustering and scaling challenges to make sure that you get consistent performance",
    "start": "2674079",
    "end": "2679839"
  },
  {
    "text": "now with cloud search if you took an example over time and this might be a retail organization a particular peak",
    "start": "2679839",
    "end": "2685839"
  },
  {
    "text": "day within the week where users are coming on and doing a series of online shopping",
    "start": "2685839",
    "end": "2691520"
  },
  {
    "text": "and you need to scale up the capacity you have behind your search engine to keep the performance consistent we might",
    "start": "2691520",
    "end": "2697520"
  },
  {
    "text": "see that i've got a search instance which is managed by cloud search here with a partition",
    "start": "2697520",
    "end": "2702720"
  },
  {
    "text": "and a copy of my data so i've got a single copy of my data and i've got a single partition handling my search",
    "start": "2702720",
    "end": "2708480"
  },
  {
    "text": "index and when that instance hits um or sat below 80 cpu i'm sat on a single",
    "start": "2708480",
    "end": "2715040"
  },
  {
    "text": "instance and when i go above 80 cpu for example um cloud search will",
    "start": "2715040",
    "end": "2720560"
  },
  {
    "text": "automatically create a new copy of my data of that partition and then copy it onto",
    "start": "2720560",
    "end": "2727040"
  },
  {
    "text": "a new instance in this case a small instance so i get two small instances now with two copies of my data so i'm",
    "start": "2727040",
    "end": "2732720"
  },
  {
    "text": "able to create double the the capacity behind my search engine and so on so i get three",
    "start": "2732720",
    "end": "2738560"
  },
  {
    "text": "copies here all spread across instances of small size now these instances could be extra large ec2 instances",
    "start": "2738560",
    "end": "2745040"
  },
  {
    "text": "for even greater capacity the point here is that when i get to midnight and everyone's done with their shopping",
    "start": "2745040",
    "end": "2751200"
  },
  {
    "text": "sport on a friday evening or a monday evening the partitions are all the copies are taken away and i'm reverted",
    "start": "2751200",
    "end": "2757359"
  },
  {
    "text": "to my single small instance which me reducing costs so traditional required capacity if i",
    "start": "2757359",
    "end": "2762800"
  },
  {
    "text": "was doing something like solar i'd have to deal with three instances and the creek copies of my data in order to",
    "start": "2762800",
    "end": "2768880"
  },
  {
    "text": "handle that that capacity demand elastic capacity goes up and down and therefore",
    "start": "2768880",
    "end": "2774800"
  },
  {
    "text": "i make savings in terms of the cost because i'm running less ec2 instances now cloud search manages all of that for",
    "start": "2774800",
    "end": "2780880"
  },
  {
    "text": "you behind the scenes you don't have to touch it and what it actually does is that as your traffic volume and",
    "start": "2780880",
    "end": "2787200"
  },
  {
    "text": "complexity increases and we will create more copies so shown here is search instances that can be of various",
    "start": "2787200",
    "end": "2793119"
  },
  {
    "text": "different sizes up to the large instance types we have running in ec2 it will create n numbers or end copies of your",
    "start": "2793119",
    "end": "2800240"
  },
  {
    "text": "data and spread them across instances to handle the number of requests that are coming in so effectively you know",
    "start": "2800240",
    "end": "2807119"
  },
  {
    "text": "load balancing across search instances all with a copy of the same search index",
    "start": "2807119",
    "end": "2814160"
  },
  {
    "text": "also if your document quantity so you're putting very large volumes of data up into",
    "start": "2814480",
    "end": "2820560"
  },
  {
    "text": "cloud search we will create partitions on the data so here i've got the same",
    "start": "2820560",
    "end": "2826720"
  },
  {
    "text": "data set copy one but a number of partitions spread across instances and this thing goes in the matrix so if you",
    "start": "2826720",
    "end": "2832800"
  },
  {
    "text": "get very large data volumes and very high traffic requests you can end up in the bottom right there where we've got n",
    "start": "2832800",
    "end": "2838160"
  },
  {
    "text": "partitions your data and n copies of your data all managed across ec2 resources behind the scenes and you",
    "start": "2838160",
    "end": "2843839"
  },
  {
    "text": "don't have to manage any of that now doing that yourself you would have to manage that stuff yourself so search on",
    "start": "2843839",
    "end": "2849680"
  },
  {
    "text": "aws doing it yourself you need to again just like a nosql you need to perform capacity planning work out so the size",
    "start": "2849680",
    "end": "2856720"
  },
  {
    "text": "of the indexes that you may have are they going to fit on one instance or not i'm going to set up and manage the",
    "start": "2856720",
    "end": "2861839"
  },
  {
    "text": "required instances install an open search software such as solar maybe across that cluster you're going to need",
    "start": "2861839",
    "end": "2868319"
  },
  {
    "text": "to manage the cluster partitioning of data and size over time and think about whether you want that to auto scale or",
    "start": "2868319",
    "end": "2874640"
  },
  {
    "text": "the scripting you're going to need to increase capacity in the configuration task you have to take to ensure that that cluster is consistent and has",
    "start": "2874640",
    "end": "2881599"
  },
  {
    "text": "integrity and then you need to monitor and find out what's going on whereas cloud search and i encourage you to have a go in the free tier because",
    "start": "2881599",
    "end": "2888560"
  },
  {
    "text": "the the free trial i should say because it's a great service to use great fun to configure and play with you'll create a",
    "start": "2888560",
    "end": "2894800"
  },
  {
    "text": "search domain in the console you simply upload documents and these can live in s3 or you can upload them through the",
    "start": "2894800",
    "end": "2900160"
  },
  {
    "text": "api or the console and then configure the indexes you want to put on it what you want to return the search result and",
    "start": "2900160",
    "end": "2905839"
  },
  {
    "text": "then retrieve the results from the endpoint as defined now behind the scene cloud search will deal with all that",
    "start": "2905839",
    "end": "2911520"
  },
  {
    "text": "scaling re-partitioning of data and it will actually go off and generate elastic mapreduce jobs each time it",
    "start": "2911520",
    "end": "2916800"
  },
  {
    "text": "requires to recomputate the cluster size and re-spread the indexes so a sophisticated set of technologies behind",
    "start": "2916800",
    "end": "2923119"
  },
  {
    "text": "the scenes that's presented to you in a very simple and abstract way to use",
    "start": "2923119",
    "end": "2930000"
  },
  {
    "text": "and smugmug was an example it's a smug mug there's a search box everyone knows what search box looks like but down the",
    "start": "2930000",
    "end": "2935119"
  },
  {
    "text": "left are these facets so just as in amazon retail my umbrella example i had different types and groups of umbrellas",
    "start": "2935119",
    "end": "2941119"
  },
  {
    "text": "and accounts within here i've got the metadata associated with the photos as facets so",
    "start": "2941119",
    "end": "2947200"
  },
  {
    "text": "looking aperture size there the number of photos that have been taken with particular aperture sizes or the date that something was taken",
    "start": "2947200",
    "end": "2954000"
  },
  {
    "text": "so a complete sort of direct mapping really from the technology behind amazon retail into a completely different use case",
    "start": "2954000",
    "end": "2960160"
  },
  {
    "text": "using cloud search now lastly today i'm going to look at",
    "start": "2960160",
    "end": "2965200"
  },
  {
    "text": "amazon elastic map producers another managed framework for doing analytics",
    "start": "2965200",
    "end": "2970559"
  },
  {
    "text": "and it really drives off this equation so one instance for 100 hours equals 100",
    "start": "2970559",
    "end": "2975680"
  },
  {
    "text": "instances for one hours they cost the same on a small instance that's eight dollars so one instance for 100 hours",
    "start": "2975680",
    "end": "2982000"
  },
  {
    "text": "100 instances for one hour so you can use 100 instances for one hour for eight dollars and hadoop is a framework that can take",
    "start": "2982000",
    "end": "2988720"
  },
  {
    "text": "advantage of this and this is a logo for hadoop and we call that elastic mapreduce so elastic mapreduce is a",
    "start": "2988720",
    "end": "2994720"
  },
  {
    "text": "managed hadoop cluster that enables you to split up a computational task across many instances",
    "start": "2994720",
    "end": "3001680"
  },
  {
    "text": "taking advantage of that equation of 100 instances for one hour costing the same",
    "start": "3001680",
    "end": "3007359"
  },
  {
    "text": "as 100 hours of one instance it's a comprehensive framework that supports languages like hive and pig and",
    "start": "3007359",
    "end": "3013359"
  },
  {
    "text": "you can define your logic in various languages and it integrates with spot pricing",
    "start": "3013359",
    "end": "3018800"
  },
  {
    "text": "and that's an important thing that we'll talk about when i go through how it works but what really is emr",
    "start": "3018800",
    "end": "3026400"
  },
  {
    "text": "well it's a framework that splits your data into lots of little pieces spreads those across multiple ec2 instances to",
    "start": "3026400",
    "end": "3033680"
  },
  {
    "text": "allow some sort of processing to occur and then it gathers the results for you",
    "start": "3033680",
    "end": "3038880"
  },
  {
    "text": "to see so the map process is where it splits the data out and processes it the reduce is",
    "start": "3038880",
    "end": "3044559"
  },
  {
    "text": "how it brings the data back together elastic mapreduce so if you take an example of a very",
    "start": "3044559",
    "end": "3050079"
  },
  {
    "text": "large data set you might have an application log click logs user activities on your website in terabytes",
    "start": "3050079",
    "end": "3056800"
  },
  {
    "text": "of size lots of instances of x in there that you want to find out these might be actions",
    "start": "3056800",
    "end": "3062480"
  },
  {
    "text": "by particular users for example you would split that log into many small pieces and spread them across an emr",
    "start": "3062480",
    "end": "3069040"
  },
  {
    "text": "cluster they get processed across those ec2 instances and then they aggregate the results from all the nodes and you get",
    "start": "3069040",
    "end": "3075359"
  },
  {
    "text": "an aggregate view of x and with emr because you could do that",
    "start": "3075359",
    "end": "3080400"
  },
  {
    "text": "on 10 instances 100 instances or a thousand instances you can get that insight in a fraction of the time than",
    "start": "3080400",
    "end": "3087119"
  },
  {
    "text": "you would if you only had one instance to process that very large data set so take advantage of that equation and",
    "start": "3087119",
    "end": "3093680"
  },
  {
    "text": "price so one instance for 100 hours 100 instances for one hour is eight dollars",
    "start": "3093680",
    "end": "3099599"
  },
  {
    "text": "but you can go one instance for a thousand hours or a thousand instead of one hours for the same price as a",
    "start": "3099599",
    "end": "3105599"
  },
  {
    "text": "tenfold increase so on a small instances that's eighty dollars so a thousand instances processing um a data set in",
    "start": "3105599",
    "end": "3113520"
  },
  {
    "text": "parallel will cost you eighty dollars and you can achieve in um an hour what you would normally",
    "start": "3113520",
    "end": "3119280"
  },
  {
    "text": "have to wait a thousand hours to get the result from so looking a bit more detail of how",
    "start": "3119280",
    "end": "3125280"
  },
  {
    "text": "that works um you can take input data from a number of sources but s3 is a common one so s3",
    "start": "3125280",
    "end": "3131359"
  },
  {
    "text": "being the highly durable storage platform simple storage service you pop your data into s3 and then you write a",
    "start": "3131359",
    "end": "3137599"
  },
  {
    "text": "piece of code that you're going to drop into elastic map produce so you can use various different programming languages",
    "start": "3137599",
    "end": "3143359"
  },
  {
    "text": "and this might be a simple routine that's going to count the instances of a particular",
    "start": "3143359",
    "end": "3148800"
  },
  {
    "text": "record type in a log so it might be simply simple screen string searches within a log drop that",
    "start": "3148800",
    "end": "3155280"
  },
  {
    "text": "piece of code into elastic mapreduce and behind the scenes we'll go and create a hadoop name node this is the",
    "start": "3155280",
    "end": "3161760"
  },
  {
    "text": "controller of a cluster and then we'll create an elastic cluster based upon the specification you're saying see if you say i only want 10",
    "start": "3161760",
    "end": "3168079"
  },
  {
    "text": "instances or i want a thousand instances and if you want them to be destroyed automatically at the end you can just",
    "start": "3168079",
    "end": "3173920"
  },
  {
    "text": "set these up in terms of setting a job up in emr those will be populated with the data",
    "start": "3173920",
    "end": "3179839"
  },
  {
    "text": "from s3 across a distributed file system hadoop file system so all those",
    "start": "3179839",
    "end": "3184880"
  },
  {
    "text": "instances have access to the data required to do the job and then you when you've got that set up",
    "start": "3184880",
    "end": "3189920"
  },
  {
    "text": "you can actually use queries against it so you can use that jdbc on top of pig and hive to actually query that",
    "start": "3189920",
    "end": "3195599"
  },
  {
    "text": "distributed data set if you want to but ultimately you're going to process the code that you dropped into emr and",
    "start": "3195599",
    "end": "3202559"
  },
  {
    "text": "generate some sort of output which you can stick into s3 or simple db and it all integrates with dynamodb as",
    "start": "3202559",
    "end": "3209119"
  },
  {
    "text": "well as i mentioned before and what you end up with is that if you say destroy the cluster on complete is that when the",
    "start": "3209119",
    "end": "3214640"
  },
  {
    "text": "job's done you end up with your source data and your output data and you've done it in a time frame that makes sense",
    "start": "3214640",
    "end": "3219839"
  },
  {
    "text": "to you depending on how much you want to spend and if you use spot the perverse thing is that you can actually use spot to get",
    "start": "3219839",
    "end": "3226640"
  },
  {
    "text": "a much reduced price on the instances and because hadoop is inherently fault tolerant",
    "start": "3226640",
    "end": "3232800"
  },
  {
    "text": "you can actually do things quicker for cheaper by using spot pricing for instance types",
    "start": "3232800",
    "end": "3238960"
  },
  {
    "text": "so hadoop on aws again you'd need to configure and manage ec2 instances set up a name node set up some data nodes",
    "start": "3238960",
    "end": "3245760"
  },
  {
    "text": "that are going to do the job create a file system across all those nodes format that file system",
    "start": "3245760",
    "end": "3251520"
  },
  {
    "text": "set up the extras you might want if you want to query with hive or something like that you're going to need to go and set that up across all that cluster you",
    "start": "3251520",
    "end": "3257520"
  },
  {
    "text": "need to prepare your data and push it onto that distributed file system and then execute some sort of job",
    "start": "3257520",
    "end": "3263119"
  },
  {
    "text": "with elastic mapreduce you specify the desired cluster size drop your code in and execute the job and that really is",
    "start": "3263119",
    "end": "3269040"
  },
  {
    "text": "how simple emr is and again you can get going with emr",
    "start": "3269040",
    "end": "3274160"
  },
  {
    "text": "for i'll come on to a program that gives you some credits to have a go with it so yelp uses emr and they pre-process",
    "start": "3274319",
    "end": "3282400"
  },
  {
    "text": "files behind their web application which generate things like the people who viewed this also viewed that review",
    "start": "3282400",
    "end": "3288400"
  },
  {
    "text": "highlights auto-complete files based upon what people are typing so they're constantly running emr jobs to generate",
    "start": "3288400",
    "end": "3295119"
  },
  {
    "text": "content which sits behind their web application to make it look like things are dynamically being generated and they",
    "start": "3295119",
    "end": "3301119"
  },
  {
    "text": "are but they're very computationally intensive jobs on very large data sets that require an emr cluster to produce",
    "start": "3301119",
    "end": "3307359"
  },
  {
    "text": "some effective things that improve the user experience for their web application",
    "start": "3307359",
    "end": "3313119"
  },
  {
    "text": "razorfish do as well and they talk about the ability to use emr to get insight in a timely fashion meant that they're much",
    "start": "3313119",
    "end": "3320000"
  },
  {
    "text": "more effective in the advertising campaigns they run on behalf of their clients and they could do it with no upfront investment in hardware or the",
    "start": "3320000",
    "end": "3327200"
  },
  {
    "text": "dealing with you know finding specialists in managing hadoop clusters and distributed file systems",
    "start": "3327200",
    "end": "3333599"
  },
  {
    "text": "um so where to go next you can go to our type pad blog so all of the stuff here you'll find there's",
    "start": "3333599",
    "end": "3339920"
  },
  {
    "text": "rich blog on aws.typepad.com and my colleagues blog on the technology as it gets released",
    "start": "3339920",
    "end": "3345599"
  },
  {
    "text": "and of course there's white papers on a number of these technologies and approaches to using things like sqs",
    "start": "3345599",
    "end": "3352799"
  },
  {
    "text": "in your architectures in terms of cost optimization angles and using services instead of software",
    "start": "3352799",
    "end": "3358799"
  },
  {
    "text": "but you can also go to power60.com which is a little microsite hosted by intel and aws where you get a",
    "start": "3358799",
    "end": "3366160"
  },
  {
    "text": "hundred dollars of credits for free to try out um doing some computational",
    "start": "3366160",
    "end": "3371760"
  },
  {
    "text": "analysis with emr it's approximately 600 hours of ec2 instances for 100 on a small instance",
    "start": "3371760",
    "end": "3378880"
  },
  {
    "text": "and you can spin up some emr jobs i've mentioned before and to get give you a feel about how you would do that sort of",
    "start": "3378880",
    "end": "3384960"
  },
  {
    "text": "job upload some data that you might have internally and see how you fare so you sort of get",
    "start": "3384960",
    "end": "3390240"
  },
  {
    "text": "into the big data space so 100 of free credits just fill out the simple form at that website",
    "start": "3390240",
    "end": "3396079"
  },
  {
    "text": "and so in summary aws is more than compute and storage and the previous webinars that i've done in",
    "start": "3396079",
    "end": "3402079"
  },
  {
    "text": "this series are really focused in on the use cases about consuming ec2 resources or storing data in the cloud and the",
    "start": "3402079",
    "end": "3408559"
  },
  {
    "text": "application you can build on it and today's webinars really introduce you more to the idea of running databases",
    "start": "3408559",
    "end": "3413760"
  },
  {
    "text": "middleware and complex frameworks as a service so of course you can go off and install and run your own software and",
    "start": "3413760",
    "end": "3419599"
  },
  {
    "text": "you know there'll be software that you need to do that because they aren't wrapped as a service and of course you can do that but i encourage you to look",
    "start": "3419599",
    "end": "3425520"
  },
  {
    "text": "at the the frameworks that we provide as a service because they will reduce the operational burden that are placed upon",
    "start": "3425520",
    "end": "3432720"
  },
  {
    "text": "your teams in running all those ancillary pieces of the software and it gives you access to scalable and",
    "start": "3432720",
    "end": "3438240"
  },
  {
    "text": "sophisticated software without the overheads right so think scalability think reliability of software that you",
    "start": "3438240",
    "end": "3444880"
  },
  {
    "text": "need to build your applications around using them as a service to operate a regional level you will inherit the",
    "start": "3444880",
    "end": "3450720"
  },
  {
    "text": "properties of the aws cloud so just as s3 is a highly durable store for your data things like sqs simple workflow",
    "start": "3450720",
    "end": "3458160"
  },
  {
    "text": "build upon those highly durable storage mechanisms to give you a higher level application functionality at a very low",
    "start": "3458160",
    "end": "3464240"
  },
  {
    "text": "price point and all the elasticity that comes with it and of course aws.amazon.com is where",
    "start": "3464240",
    "end": "3470880"
  },
  {
    "text": "you can go to find out more",
    "start": "3470880",
    "end": "3474599"
  },
  {
    "text": "you",
    "start": "3486799",
    "end": "3488880"
  }
]