[
  {
    "start": "0",
    "end": "200000"
  },
  {
    "text": "[Music] hello everybody and welcome back we are here at for week two of our new series",
    "start": "490",
    "end": "6720"
  },
  {
    "text": "database deep dive with Nik and Randall we have an amazing guest here this week Rick Kula Han we're talking a little bit",
    "start": "6720",
    "end": "12660"
  },
  {
    "text": "about DynamoDB no sequel databases and we're going to dive deep and figure out all the nuts and bolts around how it",
    "start": "12660",
    "end": "18690"
  },
  {
    "text": "works and when to use them but first let's go down the aisle Randall you want introduce yourself quickly everybody my",
    "start": "18690",
    "end": "25199"
  },
  {
    "text": "my name is Randall hun I'm a software engineer and Technical Evangelist at AWS and I worked a lot with Rick in the past",
    "start": "25199",
    "end": "31650"
  },
  {
    "text": "we actually both used to work at MongoDB back in the day and Rick tell us a little bit about you're all sure -",
    "start": "31650",
    "end": "38250"
  },
  {
    "text": "Ricola Hana I'm a principal technologist for no SQL technologies primarily focused on DynamoDB but I work",
    "start": "38250",
    "end": "43620"
  },
  {
    "text": "across stacks I talk a lot about I know SQL data modeling that's really what we're here to talk about today now Rick",
    "start": "43620",
    "end": "48899"
  },
  {
    "text": "I'm here to remind you today that you and I both spent some time in New York and we we speak a little quickly yeah so",
    "start": "48899",
    "end": "56640"
  },
  {
    "text": "not the only one we're on the same page here we understand that or at least I've",
    "start": "56640",
    "end": "62879"
  },
  {
    "text": "received the feedback in the past that perhaps I should speak more slowly so we're gonna try and keep it at a gentle",
    "start": "62879",
    "end": "69240"
  },
  {
    "text": "gentle rate today and then once we get into the deep dive you know you and I we can just go so can you tell us we talked",
    "start": "69240",
    "end": "79950"
  },
  {
    "text": "in our previous episodes about how to choose the right database for the right job we talked about all the different",
    "start": "79950",
    "end": "85200"
  },
  {
    "text": "categories of databases that exist I mean DB engines in 2019 is tracking 329 different database engines and as a",
    "start": "85200",
    "end": "91860"
  },
  {
    "text": "developer as an architect as an engineer it is frustrating and difficult to",
    "start": "91860",
    "end": "97770"
  },
  {
    "text": "ascertain how I'm supposed to choose what the right database is and how I'm supposed to get it right on that first",
    "start": "97770",
    "end": "103500"
  },
  {
    "text": "iteration sure but one of those kind of stores one of those categories is",
    "start": "103500",
    "end": "109920"
  },
  {
    "text": "document stores or key value stores or key blob stores I I'm curious where does",
    "start": "109920",
    "end": "116310"
  },
  {
    "text": "dynamodb fallenness and what is dynamo d yeah yeah absolutely it's a really good question I get that a lot when I talk to customers and everyone wants to know",
    "start": "116310",
    "end": "123000"
  },
  {
    "text": "when should I use a document store when should I use the wide column store what's a key value store and the reality",
    "start": "123000",
    "end": "128129"
  },
  {
    "text": "is it's all no SQL and I think hopefully when we get through some of the data modeling guys we have today people start to",
    "start": "128129",
    "end": "133740"
  },
  {
    "text": "realize that the same patterns apply and the document structure versus the wide column structure is really rather",
    "start": "133740",
    "end": "140130"
  },
  {
    "text": "irrelevant and I think that when people start to get into understanding what what no SQL is about and all of these",
    "start": "140130",
    "end": "146580"
  },
  {
    "text": "technologies generally work the same I always like to say you can treat MongoDB and I know this is getting ahead of",
    "start": "146580",
    "end": "152220"
  },
  {
    "text": "myself a VY treat MongoDB is a partition key only dynamo tit is right we index",
    "start": "152220",
    "end": "158250"
  },
  {
    "text": "the items in MongoDB collection similar to the way we would index the items on a partition the only MongoDB table to",
    "start": "158250",
    "end": "164280"
  },
  {
    "text": "produce the results we need we want those B trees so yeah without going too",
    "start": "164280",
    "end": "171959"
  },
  {
    "text": "deep right away let's talk a little bit more about no skill right so like um how",
    "start": "171959",
    "end": "177750"
  },
  {
    "text": "did it come about how did we arrive at requiring it as another optimized",
    "start": "177750",
    "end": "182940"
  },
  {
    "text": "solution to a set of problems that we faced the developers sure so is a really good kind of talking point here we can't",
    "start": "182940",
    "end": "188430"
  },
  {
    "text": "get into the charts that we brought we talked a little bit about some of the things that you just discussed right",
    "start": "188430",
    "end": "193680"
  },
  {
    "text": "well how did we how did it come about why do we want this why am i concerned with this as a developer so this",
    "start": "193680",
    "end": "199470"
  },
  {
    "text": "presentation is really you know when we'll break it up and talk a little bit to the subject feel free but generally",
    "start": "199470",
    "end": "204720"
  },
  {
    "start": "200000",
    "end": "435000"
  },
  {
    "text": "speaking it's about why and when to use no SQL and how to model your applications for no SQL so we'll talk a",
    "start": "204720",
    "end": "210840"
  },
  {
    "text": "little bit about overview of dynamodb of course but we're really going to get into the meat of things which is the modeling then no SQL data modeling right",
    "start": "210840",
    "end": "217739"
  },
  {
    "text": "that's we maybe we can start at the beginning and kind of think hey why do we build a reason so let's let's talk",
    "start": "217739",
    "end": "229350"
  },
  {
    "text": "about that so let's talk in the timeline of database technology there's been an evolution of what I call peaks and",
    "start": "229350",
    "end": "235260"
  },
  {
    "text": "valleys and data pressure right a series of peaks and valleys and data pressure and any pressure is about the ability of",
    "start": "235260",
    "end": "241049"
  },
  {
    "text": "the system to process the amount of data we're asking to process in a reasonable time or reasonable cost when one of",
    "start": "241049",
    "end": "247080"
  },
  {
    "text": "those dimensions is broken that's a technology trigger and we're going to invent things and we've invented many things over the years so if you look at",
    "start": "247080",
    "end": "252690"
  },
  {
    "text": "the first database is the one between our years it's a really good database is highly available right when my eyes are",
    "start": "252690",
    "end": "257700"
  },
  {
    "text": "open it's always on hopefully hopefully generally speaking",
    "start": "257700",
    "end": "263350"
  },
  {
    "text": "got it right there ability question to be questionable I have no fault tolerance is about zero and you know",
    "start": "263350",
    "end": "269510"
  },
  {
    "text": "it's a single-user system right and and so we actually actually had to invent other things so we invented a system of",
    "start": "269510",
    "end": "274820"
  },
  {
    "text": "ledger accounting which really was the first database right we wrote things down and ledger accounting drove public",
    "start": "274820",
    "end": "279890"
  },
  {
    "text": "and private sector applications for millennia exactly until 1880 US Census",
    "start": "279890",
    "end": "286460"
  },
  {
    "text": "came along and a guy named Herman Hollerith was tasked with processing all of that data the u.s. census runs on",
    "start": "286460",
    "end": "291830"
  },
  {
    "text": "ten-year interval and it took him eight years to process the data from the 1880 census so he kind of figured in 1890",
    "start": "291830",
    "end": "297350"
  },
  {
    "text": "that jobs can be a little bigger than the ten years ago allowed to and he invented a new technology the machine readable punch card in the punch card",
    "start": "297350",
    "end": "303620"
  },
  {
    "text": "sorting machine era of modern data processing was born so rapidly we started to drive through many technical",
    "start": "303620",
    "end": "309440"
  },
  {
    "text": "innovations paper tape magnetic tape distributed block storage random access file systems and around 1975 1980 we",
    "start": "309440",
    "end": "317330"
  },
  {
    "text": "landed on a really new technology has seemed to solve all our problems it was the relational database and we had the",
    "start": "317330",
    "end": "322850"
  },
  {
    "text": "answer to everything right we did but it's important to understand the reason that the relational database was was",
    "start": "322850",
    "end": "327920"
  },
  {
    "text": "invented was to decrease the pressure on storage the storage was the number one",
    "start": "327920",
    "end": "332960"
  },
  {
    "text": "expanse in the data center in 1970 as a matter of fact a four megabyte hard drive cost somewhere around $250,000 in",
    "start": "332960",
    "end": "340010"
  },
  {
    "text": "1974 it was also the size of this team it was also does it cost a lot you have",
    "start": "340010",
    "end": "345530"
  },
  {
    "text": "to buy a bigger building and now obviously we're storing a lot of data on magnetic disk then but just to give you",
    "start": "345530",
    "end": "351950"
  },
  {
    "text": "the example the cost of storage and the relational database did a very good job by you by using a normalized data model",
    "start": "351950",
    "end": "358940"
  },
  {
    "text": "which deduplicated the data on disk it gave us an ad hoc query engine to be able to reproduce the views of the data",
    "start": "358940",
    "end": "365030"
  },
  {
    "text": "that we wanted to see in our applications this was really good in 1975 1980 because",
    "start": "365030",
    "end": "370220"
  },
  {
    "text": "storage was expensive but when we fast forward 30 or 40 years now sudden storage is cheap and this is why we're",
    "start": "370220",
    "end": "376280"
  },
  {
    "text": "looking at no SQL databases no SQL databases use a denormalized data model which is highly tuned to the access",
    "start": "376280",
    "end": "381620"
  },
  {
    "text": "pattern in order to specifically support a given workload and we'll talk a little bit about how we model data that way but",
    "start": "381620",
    "end": "387440"
  },
  {
    "text": "what we're doing is we're reducing the pressure on the CPU and the way we're doing this is by increasing the pressure",
    "start": "387440",
    "end": "392570"
  },
  {
    "text": "on storage but that's okay because storage today is pennies per gigabytes we pay dollars for CPU seconds so we",
    "start": "392570",
    "end": "398810"
  },
  {
    "text": "want to optimize the most expensive resource in the data center and that's what we're doing with no SQL so it's optimization problem in the end we're",
    "start": "398810",
    "end": "405560"
  },
  {
    "text": "storing the same information sometimes where we're duplicating it or we're paying a storage cost in order to get a",
    "start": "405560",
    "end": "413349"
  },
  {
    "text": "CPU benefit right absolutely and that's the key right we want to we know I use technologies are maximizing that the",
    "start": "413349",
    "end": "419629"
  },
  {
    "text": "least expensive resource in the data center we want to maximize the most expensive resource in the day or",
    "start": "419629",
    "end": "425330"
  },
  {
    "text": "optimize the most expensive resource and so where do we stand in the adoption of you know so that's the so right now and",
    "start": "425330",
    "end": "432830"
  },
  {
    "text": "this is really what's true with every technology when we start to look at bringing new technologies in for developers we start to try and use these",
    "start": "432830",
    "end": "439159"
  },
  {
    "start": "435000",
    "end": "690000"
  },
  {
    "text": "technologies the same way we use the old technologies because that's what we know and this is why I see most commonly and no SQL now working with teams I've",
    "start": "439159",
    "end": "445849"
  },
  {
    "text": "worked with thousands of teams literally thousands of teams at this point including a large chunk of Amazon's",
    "start": "445849",
    "end": "451370"
  },
  {
    "text": "internal retail services as we migrated from Oracle to you dynamodb and I've seen it again again we take the",
    "start": "451370",
    "end": "457550"
  },
  {
    "text": "relational models that we're familiar with the normalized data models and we try to translate those to no SQL we have",
    "start": "457550",
    "end": "462889"
  },
  {
    "text": "a miserable experiences that's what this chart is about if you look at the bottom of this it's the adoption curve in the",
    "start": "462889",
    "end": "469039"
  },
  {
    "text": "beginning we have a technology trigger that's forcing some innovation the innovator is going to come up with some sort of solution other people with",
    "start": "469039",
    "end": "475580"
  },
  {
    "text": "similar problems are gonna try and use those solutions and they're gonna fail I'm gonna fail repeatedly they're gonna think that this technology doesn't work",
    "start": "475580",
    "end": "481279"
  },
  {
    "text": "but the reality is is because they didn't really learn how to use the new technology before they deployed it and that's because the skill sets are rare",
    "start": "481279",
    "end": "488029"
  },
  {
    "text": "and so if you look at the adoption curve for no SQL today we're in that early adopter chunk right there still yeah I",
    "start": "488029",
    "end": "497150"
  },
  {
    "text": "think that because of the nature of the skills they are the commodity the commoditization of the skill sets has not yet occurred I talked it way to many",
    "start": "497150",
    "end": "504139"
  },
  {
    "text": "teams today who are still trying to do things the old way when I start talking to more and more teams and I feel I'm",
    "start": "504139",
    "end": "509150"
  },
  {
    "text": "talking to more teams that know how to do it then don't then I'll feel like we're in that early majority so do you",
    "start": "509150",
    "end": "514640"
  },
  {
    "text": "think that we are you know where does where does something like sequel stand it so it's out I'd let it out on the",
    "start": "514640",
    "end": "520099"
  },
  {
    "text": "right in there on the laggard side if you don't know what a join is I can't help you been okay for 30 or 40 so wait",
    "start": "520099",
    "end": "526870"
  },
  {
    "text": "what is what is kind of when do you think sequel and relational storage reach that point how long did it do uh",
    "start": "526870",
    "end": "533350"
  },
  {
    "text": "you know I mean it's funny because I remember back in the day and I might be aging myself out now but I used to",
    "start": "533350",
    "end": "538750"
  },
  {
    "text": "enervate interview developers and ask them what's in their joint you know what",
    "start": "538750",
    "end": "544120"
  },
  {
    "text": "does write me an SQL query to produce a view that combines these three tables",
    "start": "544120",
    "end": "551640"
  },
  {
    "text": "right I mean these were the questions we used to ask developers and developers used to do crazy things with relational",
    "start": "551640",
    "end": "557410"
  },
  {
    "text": "databases right you see the big giant flat tables with a million columns and you know most of the rows had known",
    "start": "557410",
    "end": "562810"
  },
  {
    "text": "values on 90% of the columns right this was the kind of things developers are doing right so we would never do this",
    "start": "562810",
    "end": "569800"
  },
  {
    "text": "today but they eventually learned the skills right it's hard to say when as far as timing this is gonna occur but I",
    "start": "569800",
    "end": "576190"
  },
  {
    "text": "think what we'll know is when I go when we start meeting with customers and they already have an idea of what they're",
    "start": "576190",
    "end": "582160"
  },
  {
    "text": "doing and they're doing their job relatively well with designing notice personally I would have thought we were",
    "start": "582160",
    "end": "588040"
  },
  {
    "text": "an early majority already because the developers I talked to you know they're pretty familiar with no sequel at this point well I think I talk to a lot of",
    "start": "588040",
    "end": "594190"
  },
  {
    "text": "developers as you think they're familiar with one of the big issues here is you",
    "start": "594190",
    "end": "599560"
  },
  {
    "text": "sort of have like a to two separate problem problems that no sequel you need to understand to assess whether no",
    "start": "599560",
    "end": "605050"
  },
  {
    "text": "sequel is right for you the first is sort of like what is your data model that's can be a little bit more objective right you can make a checklist you can say how sparse is my data set",
    "start": "605050",
    "end": "611709"
  },
  {
    "text": "how many different features do I have across the objects in it but then ultimately something that the engineer",
    "start": "611709",
    "end": "617050"
  },
  {
    "text": "has to figure out on their own is what are my access patterns what is what is the read pattern what is the right pattern and there are those aren't",
    "start": "617050",
    "end": "623440"
  },
  {
    "text": "really like binary answers right like hey I read a lot or I write a lot it's like well what is the distribution of those reads and writes and that is a",
    "start": "623440",
    "end": "629140"
  },
  {
    "text": "really tough problem to write generalizable content around because you have to run your own experiment and that's that's the crux of no SQL is not",
    "start": "629140",
    "end": "635200"
  },
  {
    "text": "generalized right you look at relational databases and normalize data models there's a lowest common denominator it's",
    "start": "635200",
    "end": "641320"
  },
  {
    "text": "the third normal form and we can always describe your data set in that kind of third normal form normalized model but when you get into",
    "start": "641320",
    "end": "649000"
  },
  {
    "text": "you know SQL it's so specific to the access patterns you made some really good points when do i optimize for the read versus the right okay that could be",
    "start": "649000",
    "end": "656020"
  },
  {
    "text": "a really big deal if the read Volare velocity is high and the right flow the update velocity is low then I'll",
    "start": "656020",
    "end": "661480"
  },
  {
    "text": "optimize for the read but if the write velocity is really high in the read velocity as low as the other way around and those models are totally different",
    "start": "661480",
    "end": "667690"
  },
  {
    "text": "when you get down to actually storing the data on the table and how I'm gonna put it in there yeah so that was a lot",
    "start": "667690",
    "end": "674020"
  },
  {
    "text": "and I know we'll get more into use cases and examples right because that's just a lot of a theory around of no SQL but um",
    "start": "674020",
    "end": "679750"
  },
  {
    "text": "basically from a broad perspective if you tell us a little bit more about like the apples apples apples comparison sure",
    "start": "679750",
    "end": "685000"
  },
  {
    "text": "when to use one when to use the other sure so we've got a good chart here for that when you talk about no SQL it's",
    "start": "685000",
    "end": "690040"
  },
  {
    "start": "690000",
    "end": "895000"
  },
  {
    "text": "really not for everything no SQL works really well when I have a well-defined access pattern so what does that mean it",
    "start": "690040",
    "end": "696340"
  },
  {
    "text": "really means if I'm looking at transactional applications OLTP online transaction processing where every time",
    "start": "696340",
    "end": "702460"
  },
  {
    "text": "the data gets processed the same things are happening I think Amazon shopping cart right when I when I add things to my cart and I buy",
    "start": "702460",
    "end": "708970"
  },
  {
    "text": "my I order the same process occurs on that data no matter how many times the orders are made it's not that we process",
    "start": "708970",
    "end": "715600"
  },
  {
    "text": "orders differently every time the button gets clicked this is a really good application for no SQL and and it's",
    "start": "715600",
    "end": "721270"
  },
  {
    "text": "actually really good for for us because no SQL or OLTP applications make up about 90% of the common business",
    "start": "721270",
    "end": "728140"
  },
  {
    "text": "processes right that we are coding for today to automate SQL on the other hand works really well for what I don't",
    "start": "728140",
    "end": "734800"
  },
  {
    "text": "understand the access pattern so if I'm looking at analytics workload you all have marketing people are coming in at",
    "start": "734800",
    "end": "739930"
  },
  {
    "text": "the end of the week or the end of the month or the end of the quarter and they have different questions to ask if the data and you know to kind of help plan",
    "start": "739930",
    "end": "746220"
  },
  {
    "text": "budget processing for the business or whatever there's different things we need to know if I don't understand the",
    "start": "746220",
    "end": "751660"
  },
  {
    "text": "access pattern I don't understand what queries might be asked of the data or the nature of those queries is highly diverse and complex then it might",
    "start": "751660",
    "end": "758800"
  },
  {
    "text": "actually be a better idea to look at an SQL database that supports that ad hoc query processing so that's really where",
    "start": "758800",
    "end": "765130"
  },
  {
    "text": "it breaks down for no SQL versus SQL do I understand the access pattern is an OLTP app let's look at no SQL do I not",
    "start": "765130",
    "end": "772510"
  },
  {
    "text": "understand the access pattern is an analytical or an OLAP type of application then maybe we should look at",
    "start": "772510",
    "end": "777880"
  },
  {
    "text": "an SQL back-end for that so what you know when you talk about OLAP just kind",
    "start": "777880",
    "end": "783220"
  },
  {
    "text": "of diverge for a second here there you know even sequel runs into problems with that sometimes because you're trying to",
    "start": "783220",
    "end": "789730"
  },
  {
    "text": "serve join big tables yeah [Laughter] you know you make your query and then",
    "start": "789730",
    "end": "795050"
  },
  {
    "text": "two and a half hours later it's you know you get your three row responses exactly",
    "start": "795050",
    "end": "800120"
  },
  {
    "text": "or it's a computed aggregation or some sort KPI you try and drive out of the system and again this is where no SQL",
    "start": "800120",
    "end": "806000"
  },
  {
    "text": "databases can really help you and we'll do some similar things in SQL as a matter of fact in Amazon's retail organization one of the reasons we",
    "start": "806000",
    "end": "813020"
  },
  {
    "text": "started to look at no SQL in the beginning was because we found ourselves denormalizing the data on the table",
    "start": "813020",
    "end": "818780"
  },
  {
    "text": "right instead of selecting the count for the downloads of given song for Amazon music we were just go ahead every time",
    "start": "818780",
    "end": "824330"
  },
  {
    "text": "someone downloaded the song we pump a counter on a table and so in some when you when someone came to see how many downloads",
    "start": "824330",
    "end": "829940"
  },
  {
    "text": "they were just selecting the counter instead of selecting an actual count which would have ground across the table",
    "start": "829940",
    "end": "835160"
  },
  {
    "text": "and draining the system to a standstill potentially grabbing those you know opportunistic locks and saying hey I've",
    "start": "835160",
    "end": "841910"
  },
  {
    "text": "got to modify one thing so let me just lock the whole row right and then you know you see as you mode as you like",
    "start": "841910",
    "end": "847100"
  },
  {
    "text": "multiple rows in a relational database you can escalate to table level locks which can create deadlock switch we've all had to deal with in the past and",
    "start": "847100",
    "end": "853760"
  },
  {
    "text": "these are really just you know not good situations to be in so when you have these high high volume kind of computed",
    "start": "853760",
    "end": "860810"
  },
  {
    "text": "aggregations oftentimes we can set those up in dynamodb using as streams and lamda process did you change data",
    "start": "860810",
    "end": "866840"
  },
  {
    "text": "capture on the table and modify and update these top level metrics that on the you know in regular items right we",
    "start": "866840",
    "end": "878000"
  },
  {
    "text": "have a couple questions from the stream about table design but before we go into that maybe we can outline the different",
    "start": "878000",
    "end": "884150"
  },
  {
    "text": "core components of dynamic we can see what it is what what a index is what a",
    "start": "884150",
    "end": "889640"
  },
  {
    "text": "tea Bowl is whatever absolutely so let's do that real quick let's talk a little bit about dynamodb what is it it's a",
    "start": "889640",
    "end": "895220"
  },
  {
    "start": "895000",
    "end": "1226000"
  },
  {
    "text": "fully managed NoSQL database and this by far is the is the most valuable aspect of the system I've worked with customers",
    "start": "895220",
    "end": "901400"
  },
  {
    "text": "that have the largest Cassandra clusters in the world the largest MongoDB clusters in the world and they're",
    "start": "901400",
    "end": "906590"
  },
  {
    "text": "running into those problems of having to manage this infrastructure it's not that the technology is broken the technology",
    "start": "906590",
    "end": "911690"
  },
  {
    "text": "is great all no SQL technology is relatively equivalent it's and it will all scale and every one of these",
    "start": "911690",
    "end": "917060"
  },
  {
    "text": "platforms has their use cases and documented you know success stories but the management is something that is kind",
    "start": "917060",
    "end": "923540"
  },
  {
    "text": "of helping that is just pushed off on to the you and it's one thing when I'm managing a single cluster MongoDB replica said",
    "start": "923540",
    "end": "930170"
  },
  {
    "text": "three nodes not a problem now add ten shards 15 charge 20 shots and you and the number goes up and we're",
    "start": "930170",
    "end": "937070"
  },
  {
    "text": "time talk to customers with five hundred nodes in their Cassandra cluster and they have you know 50 60 full-time",
    "start": "937070",
    "end": "942620"
  },
  {
    "text": "engineers running a 724 NOC and all they're doing is rebuilding failed storage arrays and you know racking new",
    "start": "942620",
    "end": "948980"
  },
  {
    "text": "hardware for seven 24/7 right and ultimately running the ops around the database that's not what's providing",
    "start": "948980",
    "end": "954199"
  },
  {
    "text": "your business value it's actually allowing your developers to leverage it in whatever your application is that's exactly right so you're developing a",
    "start": "954199",
    "end": "959930"
  },
  {
    "text": "huge amount of skill in an area that's not valuable to your business right it's kind of same story we talked about back",
    "start": "959930",
    "end": "965750"
  },
  {
    "text": "in the 70s and 80s without the outsourcing do you want to be in the business of managing a data center or do you want to be in the business of",
    "start": "965750",
    "end": "971570"
  },
  {
    "text": "selling your product right so so really offloading that management burden is the",
    "start": "971570",
    "end": "977089"
  },
  {
    "text": "biggest value of dynamodb other than that it's wide column document store we can talk a little bit about the",
    "start": "977089",
    "end": "982430"
  },
  {
    "text": "differences in Y column and document later and we get into data modelling and suffice to say I don't really say",
    "start": "982430",
    "end": "987800"
  },
  {
    "text": "there's consider them to be really all that different yeah it scales to anywhere close fast and consistent a",
    "start": "987800",
    "end": "993889"
  },
  {
    "text": "scale and this is I've never seen NoSQL database scaled out to the level of dynamodb we have single tables running",
    "start": "993889",
    "end": "999440"
  },
  {
    "text": "in excess of seven million transactions per second the I mean we did billions of",
    "start": "999440",
    "end": "1004630"
  },
  {
    "text": "transactions against dynamodb tables on Prime Dave just for Amazon CDO tables it's an amazing system that has proven",
    "start": "1004630",
    "end": "1011350"
  },
  {
    "text": "that no SQL databases can scale to just about any workload out there fine-grained access control now we can",
    "start": "1011350",
    "end": "1017470"
  },
  {
    "text": "control access to items on the table to the tablespace itself to attributes okay and yeah through I M policies and we can",
    "start": "1017470",
    "end": "1024520"
  },
  {
    "text": "control access to individual attributes within the item so I guess on condition conditions exactly so we can have you",
    "start": "1024520",
    "end": "1030548"
  },
  {
    "text": "know some users that might be maybe HR or payroll accounting personnel that need to process Commission data and then",
    "start": "1030549",
    "end": "1037959"
  },
  {
    "text": "we might have order entry clerks that we don't want them to see the salesperson recognition data right so we can see different views of the items on the",
    "start": "1037959",
    "end": "1044438"
  },
  {
    "text": "table that's all done through I am see really right thigh and policy and then boom boom and it just happens exactly",
    "start": "1044439",
    "end": "1050080"
  },
  {
    "text": "and then again it's a backplane service it stands a server list there's no need to provision instances on ec2 to support",
    "start": "1050080",
    "end": "1057220"
  },
  {
    "text": "dynamo dB which means it's perfect for that event-driven programming or serverless programming model that we're trying to",
    "start": "1057220",
    "end": "1062600"
  },
  {
    "text": "push people down and and which is a really powerful model you can stand things up extremely cheap and you don't",
    "start": "1062600",
    "end": "1069230"
  },
  {
    "text": "even have to worry about paying for it until they show up and then again dynamo DBZ elasticity and flexibility is",
    "start": "1069230",
    "end": "1074360"
  },
  {
    "text": "unparalleled in the industry there's no off-the-shelf no SQL technology allows you to scale as quickly and elastically",
    "start": "1074360",
    "end": "1082520"
  },
  {
    "text": "and and pay for what you use right that's a really big deal right when other no SQL databases you",
    "start": "1082520",
    "end": "1087830"
  },
  {
    "text": "provision for peak load it sits there and you basically charge every second that server lives no matter how much of",
    "start": "1087830",
    "end": "1093320"
  },
  {
    "text": "that database you're filling exactly and it's a database so you can never take that server down because trying to stand",
    "start": "1093320",
    "end": "1098390"
  },
  {
    "text": "it back up again means replication these hours and hours or even days and days as a matter of fact I wrote an article",
    "start": "1098390",
    "end": "1103460"
  },
  {
    "text": "recently it's up on LinkedIn where I talked about the most miserable days of my no SQL life spending watching a",
    "start": "1103460",
    "end": "1108950"
  },
  {
    "text": "MongoDB cluster trying to add shard number 15 and saying okay every day and then ops meeting with my customer and",
    "start": "1108950",
    "end": "1114500"
  },
  {
    "text": "saying do we need to throttle or API more to free up more capacity on the clusters so this that's the shard",
    "start": "1114500",
    "end": "1120470"
  },
  {
    "text": "replicates it in the OS yeah yeah that's that's a real problem with no SQL",
    "start": "1120470",
    "end": "1126980"
  },
  {
    "text": "databases at scale dynamodb solves that problem we have a quick question that I think you can answer a Russian bot which",
    "start": "1126980",
    "end": "1134000"
  },
  {
    "text": "is just what is what are the limits",
    "start": "1134000",
    "end": "1141230"
  },
  {
    "text": "around dynamodb so there are some soft limits in the account when you sign up to a AWS service as many of our services",
    "start": "1141230",
    "end": "1148130"
  },
  {
    "text": "are gonna have limits initially the reason we do this is because if you want to exceed those limits you just need to kind of pick up the phone and call",
    "start": "1148130",
    "end": "1154430"
  },
  {
    "text": "support and save and I necessary phone but open up the ticket yeah I see a lot of those tickets are automated now so you judge and so long as you know you",
    "start": "1154430",
    "end": "1161090"
  },
  {
    "text": "it's it's almost to prevent you from shooting yourself in that's exactly right and that's really what it is and also for for shooting us in the foot right I",
    "start": "1161090",
    "end": "1167870"
  },
  {
    "text": "mean if you need you know five million I ops on you dynamodb table I might need to rack some hardware depending on what",
    "start": "1167870",
    "end": "1173510"
  },
  {
    "text": "region you're going to right I mean the clouds great it's elastic but and and it could scale to the ultimate levels but",
    "start": "1173510",
    "end": "1180470"
  },
  {
    "text": "it's not infinite right and so there's there's just basically guardrails around what we're gonna allow customers do",
    "start": "1180470",
    "end": "1185900"
  },
  {
    "text": "right out of the box most of the time when a customer has a large like that we're well aware of it before they even deploy but if you are scaling",
    "start": "1185900",
    "end": "1193730"
  },
  {
    "text": "your your and having success you don't have to worry about upward limit and dynamodb the the biggest table or the",
    "start": "1193730",
    "end": "1200420"
  },
  {
    "text": "fastest table I guess you'd say that I'm aware of is about 7 million WCU's and",
    "start": "1200420",
    "end": "1206030"
  },
  {
    "text": "that is an incredible workload WC uses the right capacity alright so let's see",
    "start": "1206030",
    "end": "1211310"
  },
  {
    "text": "what it what a table is what a wcu is ok so let's get into that DynamoDB like databases has tables they're called",
    "start": "1211310",
    "end": "1218870"
  },
  {
    "text": "different things in different noise kill database is DynamoDB calls them tables MongoDB calls them collections",
    "start": "1218870",
    "end": "1224000"
  },
  {
    "text": "Cassandra calls them key spaces within these tables collections key spaces whatever you want to call them we're",
    "start": "1224000",
    "end": "1229220"
  },
  {
    "start": "1226000",
    "end": "1600000"
  },
  {
    "text": "going to put items these items have attributes not all the items in the table have to have the same attribute",
    "start": "1229220",
    "end": "1234530"
  },
  {
    "text": "but they have to have at least one attribute that uniquely identifies the item and that's the partition key in",
    "start": "1234530",
    "end": "1240200"
  },
  {
    "text": "DynamoDB we call it the partition key cassandra calls of the partition key as well MongoDB calls this the underbar ID",
    "start": "1240200",
    "end": "1247100"
  },
  {
    "text": "field right so this is that uniquely identifies a document in MongoDB or an item in - in dynamo dB so on so forth",
    "start": "1247100",
    "end": "1254150"
  },
  {
    "text": "and dynamodb another why comma databases we also allow you create 8 alternate key",
    "start": "1254150",
    "end": "1259430"
  },
  {
    "text": "called this or key so when we do this what happens is the partition key starts to define like a folder or a bucket in",
    "start": "1259430",
    "end": "1266150"
  },
  {
    "text": "which I'm going to place items and the sort key then defines the uniqueness of the items within that that partition so",
    "start": "1266150",
    "end": "1272060"
  },
  {
    "text": "to speak so we're going to create hierarchies of items inside of these partitions that represent these one-to-many relationships or these",
    "start": "1272060",
    "end": "1278090"
  },
  {
    "text": "entity relationships that we would normally be creating individual tables for you can think of these partitions as",
    "start": "1278090",
    "end": "1283370"
  },
  {
    "text": "collecting the rows that that build the entity that the application wants to consume right so yeah that's generally",
    "start": "1283370",
    "end": "1289820"
  },
  {
    "text": "kind of the relationship we're gonna try and draw here excuse me and then as we",
    "start": "1289820",
    "end": "1296000"
  },
  {
    "text": "start to start to pull out subsets of these rows or whatever for different views that we would want on these",
    "start": "1296000",
    "end": "1301580"
  },
  {
    "text": "entities we're going to use range operators against those sort keys right things like greater than less then",
    "start": "1301580",
    "end": "1306830"
  },
  {
    "text": "between what not to be able to pull out subsets of items so for a simple example here might be orders for a customer I",
    "start": "1306830",
    "end": "1313790"
  },
  {
    "text": "could say you know partition key is a customer ID so our key is the order date if I want all the orders in the last 24",
    "start": "1313790",
    "end": "1319700"
  },
  {
    "text": "hours select star from table customer ID equals x and the ordered a is greater than 24 hours ago and so yeah",
    "start": "1319700",
    "end": "1325730"
  },
  {
    "text": "I'm just going to so this comes this manifests itself in the form of trying to understand the access pattern right right when we're trying to think about",
    "start": "1325730",
    "end": "1331790"
  },
  {
    "text": "having time some sort of time series data date is the obvious thing you're typically want to source your very by",
    "start": "1331790",
    "end": "1337100"
  },
  {
    "text": "and so having that as the specific store key will be really valuable in this use case and depending on what your use case",
    "start": "1337100",
    "end": "1342320"
  },
  {
    "text": "may be time may not be the best sort of key right it could be depend again depending on the use case right if I have a time or",
    "start": "1342320",
    "end": "1347780"
  },
  {
    "text": "use case time would be a really good sort key I might have a use case in which some are more I want items of a",
    "start": "1347780",
    "end": "1353480"
  },
  {
    "text": "certain type for a given customer but then I might have other items that I want date ranged so I might have some",
    "start": "1353480",
    "end": "1358820"
  },
  {
    "text": "items in this partition that would live with a state identifier as the sort key just didn't you know whatever it's",
    "start": "1358820",
    "end": "1363860"
  },
  {
    "text": "completed it's done it's back ordered whatever I might have other items in that same partition that actually have a",
    "start": "1363860",
    "end": "1368870"
  },
  {
    "text": "date as the sort key right there both string sortable yeah and one Curie condition gives me the completed items",
    "start": "1368870",
    "end": "1374660"
  },
  {
    "text": "I'm not gonna get any date range two items one would give me a date range query would give me just the date range two items so they could I could even",
    "start": "1374660",
    "end": "1380630"
  },
  {
    "text": "store the items of different types like we talked about in the table out all the items need to be the same type not all",
    "start": "1380630",
    "end": "1385670"
  },
  {
    "text": "the items in a partition need to be the same type either so we're gonna be playing with these sort key conditions to produce the subsets of the items that",
    "start": "1385670",
    "end": "1392300"
  },
  {
    "text": "we're looking for so let's talk a little bit about the query semantics here okay if I want to query let's say I want to not query I want to fetch a specific",
    "start": "1392300",
    "end": "1399440"
  },
  {
    "text": "item and I have a partition key and a sort key do I need to provide both of those in order to get that specific that specific item you would need to either",
    "start": "1399440",
    "end": "1406220"
  },
  {
    "text": "execute a get item with the with the unique identifying partition and store key values or a query condition that",
    "start": "1406220",
    "end": "1413060"
  },
  {
    "text": "would result in only one item coming back right and so are these different operators the ones like equals equals",
    "start": "1413060",
    "end": "1419810"
  },
  {
    "text": "equals equals would result in one and then you know less so the combination of",
    "start": "1419810",
    "end": "1425660"
  },
  {
    "text": "partition key and sort key are unique the combination and partition and sort key are unique key is must be unique so",
    "start": "1425660",
    "end": "1431360"
  },
  {
    "text": "that equals equals operator would be a query condition that would return touch the one well think depending on if you",
    "start": "1431360",
    "end": "1438320"
  },
  {
    "text": "said sort key equals equals then yes yes but you can use these query conditions also as filter conditions on the",
    "start": "1438320",
    "end": "1444500"
  },
  {
    "text": "extended attributes not just the sort key so I can make a read out of the partition instead of getting everything that has a sort key condition of X and",
    "start": "1444500",
    "end": "1450680"
  },
  {
    "text": "also filter condition of Y in which case the filter condition Eagle Eagle might return many yeah right",
    "start": "1450680",
    "end": "1456950"
  },
  {
    "text": "right but if you put equal equal on a sword key condition that's basically saying there could only be one and then",
    "start": "1456950",
    "end": "1462350"
  },
  {
    "text": "I remember working on other know sequel databases I actually remember writing some code to implement parts of this and",
    "start": "1462350",
    "end": "1467840"
  },
  {
    "text": "different operators have different kind of performance characteristics so is that true it is true it is true and it",
    "start": "1467840",
    "end": "1473480"
  },
  {
    "text": "also depends on the nerve items are coming back from the query there's there's restrictions around how much data you can move in and out of a",
    "start": "1473480",
    "end": "1479960"
  },
  {
    "text": "partition and we have plenty of content online to talk about that if we need to scale beyond that then we're just going",
    "start": "1479960",
    "end": "1485809"
  },
  {
    "text": "to include more logical partitions in the workload but yes there's depending on the nature of the query the number of",
    "start": "1485809",
    "end": "1491450"
  },
  {
    "text": "items are being returned in general almost all of these range key operators and DynamoDB translate to a batch get",
    "start": "1491450",
    "end": "1497059"
  },
  {
    "text": "item under the covers gotcha okay so that's gonna be an a batch get item is gonna be a little bit slower than a get item and it's gonna have a",
    "start": "1497059",
    "end": "1503210"
  },
  {
    "text": "little bit more latency depending on how much you know latency on the storage node there is and then we have",
    "start": "1503210",
    "end": "1509240"
  },
  {
    "text": "attributes these are things that aren't kind of captured by the partition or the stored key correct and if we want to",
    "start": "1509240",
    "end": "1515360"
  },
  {
    "text": "filter query based on those what key is it essentially a table scan at them no no at that point then what we could do",
    "start": "1515360",
    "end": "1521000"
  },
  {
    "text": "is we'd say okay if we already well if we know the partition in which these items live then I could read the partition where the purchased equals x",
    "start": "1521000",
    "end": "1527929"
  },
  {
    "text": "and then use filter conditions on the extended attributes what I'm doing then is I'm reading the entire partition and returning only the items that match the",
    "start": "1527929",
    "end": "1534470"
  },
  {
    "text": "filter conditions but that gets that's a that's a job for the storage layer that's a job restores layer you as the",
    "start": "1534470",
    "end": "1539539"
  },
  {
    "text": "user don't need to know this but you do need to understand what you're doing when you issue those filter queries because again I pay for the I pay for",
    "start": "1539539",
    "end": "1546289"
  },
  {
    "text": "the sort key condition read all right so if I might if my sort key condition is not very selective and my filter",
    "start": "1546289",
    "end": "1552080"
  },
  {
    "text": "conditions are highly selective that I can be reading a lot of data and only returning a few items and so this is",
    "start": "1552080",
    "end": "1557840"
  },
  {
    "text": "again this is a this is a choice we might make in the design to actually query the partition inefficiently because maybe it's a infrequent access",
    "start": "1557840",
    "end": "1565520"
  },
  {
    "text": "pattern right so rather than set up a GSI that allows me to query more efficiently and double my write cost and",
    "start": "1565520",
    "end": "1571820"
  },
  {
    "text": "double my storage cost and I just say you know what I'll just read these partitions inefficiently every now and then when I need to because it's cheaper",
    "start": "1571820",
    "end": "1578539"
  },
  {
    "text": "to do that than it is to maintain the effect or the Selective index so maybe we can talk a little bit more about when",
    "start": "1578539",
    "end": "1583970"
  },
  {
    "text": "you don't want to do that with secondary indexes and local secondary indexes and yeah we get into that modeling well",
    "start": "1583970",
    "end": "1589250"
  },
  {
    "text": "discussion we'll talk a little bit about that absolutely all right so generally speaking we put when we talk about no",
    "start": "1589250",
    "end": "1595340"
  },
  {
    "text": "SQL we're talking about spreading that data out across what we call a key space and we're gonna use the partition key to",
    "start": "1595340",
    "end": "1601100"
  },
  {
    "start": "1600000",
    "end": "1680000"
  },
  {
    "text": "do that so the partition key uniquely identifies the item but it also is used to build this unordered hash index which",
    "start": "1601100",
    "end": "1606649"
  },
  {
    "text": "is a logical key space and we're gonna lay these items out across that key space and the reason we do this and",
    "start": "1606649",
    "end": "1611720"
  },
  {
    "text": "although SQL databases work the same way is that when we want a scale we're going to chop that key space up and we're",
    "start": "1611720",
    "end": "1617299"
  },
  {
    "text": "gonna distribute those items out around to multiple physical nodes this gives me now the ability when I query the system",
    "start": "1617299",
    "end": "1622669"
  },
  {
    "text": "to take that partition key value which is an equality condition and say oh you belong on node in so I",
    "start": "1622669",
    "end": "1628760"
  },
  {
    "text": "know exactly what node to go to and it is logically you can think about this there could be thousands of storage nodes participating in this key space",
    "start": "1628760",
    "end": "1635000"
  },
  {
    "text": "but as soon as you query the system the request router knows exactly which system to go to it doesn't have to query all thousand of them so this is why no",
    "start": "1635000",
    "end": "1641690"
  },
  {
    "text": "SQL databases are fast and consistent in any scale and it doesn't matter how much data is in the system how much",
    "start": "1641690",
    "end": "1647539"
  },
  {
    "text": "throughput is in the system I can always allocate the data across physical devices on the key space and",
    "start": "1647539",
    "end": "1652580"
  },
  {
    "text": "query with the same latency so wrap request router knows exactly which underlying storage nodes it needs to",
    "start": "1652580",
    "end": "1658130"
  },
  {
    "text": "talk to me that's right it has the map of the table space so to speak what sections live on what nodes now it's not",
    "start": "1658130",
    "end": "1663980"
  },
  {
    "text": "always clean where node one is responsible for you know this chunk and then the next chunk and then it usually",
    "start": "1663980",
    "end": "1669140"
  },
  {
    "text": "gets diced up and sliced up and pushed all over these stories nodes but the system doesn't care as long as I give an",
    "start": "1669140",
    "end": "1674450"
  },
  {
    "text": "equality condition on that partition key and those exactly where to go and again these are the optimizations that the",
    "start": "1674450",
    "end": "1679700"
  },
  {
    "text": "user doesn't actually need to know right because like this is done on the databases computer that's correct absolutely you don't need to know that",
    "start": "1679700",
    "end": "1685700"
  },
  {
    "start": "1680000",
    "end": "1748000"
  },
  {
    "text": "although when you query the system there's certain parameters that need to be maintained so if you think of the partition key and DynamoDB it's kind of",
    "start": "1685700",
    "end": "1692149"
  },
  {
    "text": "like the shard key almost in MongoDB in this sense right because that's what we're gonna do this sense it's like it's",
    "start": "1692149",
    "end": "1700580"
  },
  {
    "text": "almost like two to the has two keys that do the same thing one key in in dynamo right but they both you",
    "start": "1700580",
    "end": "1707690"
  },
  {
    "text": "they're used for the same reason so what decide what determines where the data lands in a MongoDB cluster is to sharky",
    "start": "1707690",
    "end": "1713659"
  },
  {
    "text": "what determines where the data lands and or cassandra is actually the partition and it's just a different model but you",
    "start": "1713659",
    "end": "1720180"
  },
  {
    "text": "know you can build one of the things that you taught me actually it was that partition keys do not need to be a",
    "start": "1720180",
    "end": "1726090"
  },
  {
    "text": "scalar that's right it you can combine multiple components and if you know you're always gonna have those two",
    "start": "1726090",
    "end": "1731790"
  },
  {
    "text": "components in your query then you can write your query in such a fashion that you you combine those into a unique",
    "start": "1731790",
    "end": "1740670"
  },
  {
    "text": "partition key right it says we actually have someone who just joined the stream net auerbach so he was coding up a",
    "start": "1740670",
    "end": "1746850"
  },
  {
    "text": "twitch extension to build a multi-tenant polling system okay a multi-tenant voting system and he he called me on the",
    "start": "1746850",
    "end": "1755040"
  },
  {
    "start": "1748000",
    "end": "2129000"
  },
  {
    "text": "phone I don't think he told me that we were on he was streaming this live so he",
    "start": "1755040",
    "end": "1762210"
  },
  {
    "text": "calls me up he goes here and I'll help me figure out how to do this some kind of a TV and so and then there's another",
    "start": "1762210",
    "end": "1767340"
  },
  {
    "text": "viewer we have here Richard Boyd who you know I was in the middle of something I was doing some work and say okay Matt",
    "start": "1767340",
    "end": "1773370"
  },
  {
    "text": "you know just do it like this do it like this and I had to hop off and then Richard Boyd hopped on the phone with him so he was live-streaming this whole",
    "start": "1773370",
    "end": "1779010"
  },
  {
    "text": "thing on Twitter and I I remember I sent him maybe four lines of Python and he",
    "start": "1779010",
    "end": "1785520"
  },
  {
    "text": "said something to the effect of like what do you mean this is all I have to do oh it's working oh wait you know he",
    "start": "1785520",
    "end": "1793560"
  },
  {
    "text": "just totally didn't believe me in a row to this day he doesn't all right so then",
    "start": "1793560",
    "end": "1800670"
  },
  {
    "text": "we get into looking at how the sort key plays here really is our key again we the partition key defines a folder or",
    "start": "1800670",
    "end": "1805770"
  },
  {
    "text": "some sort of bucket the sort key defines the order those items on the bucket and then when we go to read these items off of that partition you're giving me that",
    "start": "1805770",
    "end": "1812280"
  },
  {
    "text": "partition key quality says go here give me a range key these things are all ordered on the stories note it's just a",
    "start": "1812280",
    "end": "1817590"
  },
  {
    "text": "sequential read to match the sort key conditions that's again that's what makes us fast and consistent at any",
    "start": "1817590",
    "end": "1822780"
  },
  {
    "text": "scale and although SQL databases share some sort of mechanism similar to this",
    "start": "1822780",
    "end": "1827910"
  },
  {
    "text": "to provide that kind of performance not just unique to dynamic ensure index exactly so again partition key generated",
    "start": "1827910",
    "end": "1835170"
  },
  {
    "text": "automatically by the compute layer on the database and then sort key defined by the user the partition key is actually defined by the user oh there is",
    "start": "1835170",
    "end": "1842730"
  },
  {
    "text": "no auto-generated auto incrementing keys and dynamodb as a matter of fact that's a common mistake",
    "start": "1842730",
    "end": "1848639"
  },
  {
    "text": "people make when they migrate their applications of a relational database - and no SQL databases as they assume",
    "start": "1848639",
    "end": "1854250"
  },
  {
    "text": "there's value in those auto-generated monotonically yeah and so what they'll do is they'll create partition keys",
    "start": "1854250",
    "end": "1860429"
  },
  {
    "text": "which are like product ID yeah I know but no one ever calls up and says hey you know what I want to order product",
    "start": "1860429",
    "end": "1865950"
  },
  {
    "text": "UUID your product 25 right they say I want to order you know whatever the latest and greatest thing is from",
    "start": "1865950",
    "end": "1871769"
  },
  {
    "text": "sharper image catalog or whatever it is right now that really just launches right into that access that's exactly",
    "start": "1871769",
    "end": "1877409"
  },
  {
    "text": "right yeah that's exactly right so what we want to do is select partition keys that are useful to the application right",
    "start": "1877409",
    "end": "1882840"
  },
  {
    "text": "then they're gonna online well with your access patterns because think of that primary table is like that's your first index really it's it's an it's an",
    "start": "1882840",
    "end": "1889919"
  },
  {
    "text": "inverted index and it's manually loaded and that's so that's one of the things that's kind of we got to start to think about with DynamoDB with all no SQL",
    "start": "1889919",
    "end": "1896700"
  },
  {
    "text": "databases because the indexes are how we're gonna produce joins right so let's talk a little bit about those index before we go into that sure we have a",
    "start": "1896700",
    "end": "1902879"
  },
  {
    "text": "question for mittens the killer bunny which again is there a downside to",
    "start": "1902879",
    "end": "1910200"
  },
  {
    "text": "having locality ie fail over different nodes holding on the different partitions okay so a downside to having",
    "start": "1910200",
    "end": "1917629"
  },
  {
    "text": "locality of the data yeah so I think there's a misunderstanding there like the data isn't replicated to a single",
    "start": "1917629",
    "end": "1924149"
  },
  {
    "text": "physical oh that's right so in dynamodb while there's multiple layers of replication",
    "start": "1924149",
    "end": "1929879"
  },
  {
    "text": "now with global tables yes but every every stories node in dynamo DB is three-way replicated across three AZ's",
    "start": "1929879",
    "end": "1936629"
  },
  {
    "text": "when you write to dynamo DB you're not gonna get any knowledge meant that that right committed until at least one of",
    "start": "1936629",
    "end": "1941789"
  },
  {
    "text": "the secondaries has acknowledged that it replicated so that makes us a durable database reads the dynamo DB by default",
    "start": "1941789",
    "end": "1948000"
  },
  {
    "text": "will go to the secondaries so those are eventually consistent but you as a user have the ability to make that as",
    "start": "1948000",
    "end": "1954179"
  },
  {
    "text": "strongly consistent read which will force the read back to the primary so this is like if you look at dynamo DB",
    "start": "1954179",
    "end": "1959899"
  },
  {
    "text": " DB these are consistent and partition tolerance systems or any concerns great concerns exactly and so",
    "start": "1959899",
    "end": "1967139"
  },
  {
    "text": "we can do both the same things right Cassandra is is it available and partition tolerance",
    "start": "1967139",
    "end": "1972590"
  },
  {
    "text": "system because any node can accept the right that's what they call master master and there'll be some sort of conflict resolution if I say if I write",
    "start": "1972590",
    "end": "1979130"
  },
  {
    "text": "to the same item in both in two different nodes and they get back together there'll be some sort of callback to a conflict resolution",
    "start": "1979130",
    "end": "1985220"
  },
  {
    "text": "algorithm DynamoDB provides this type of functionality as well but globally so",
    "start": "1985220",
    "end": "1990350"
  },
  {
    "text": "when you have a global table and DynamoDB what you're doing is you're replicating your data across regions and those regions can act as master master",
    "start": "1990350",
    "end": "1997340"
  },
  {
    "text": "and they'll all accept rights and then we have a conflict resolution which is time base so we clock sync across the",
    "start": "1997340",
    "end": "2002590"
  },
  {
    "text": "regions if I write to a global table in region a and region B at the same time eventually a replicate and will drop the",
    "start": "2002590",
    "end": "2008800"
  },
  {
    "text": "older data interesting does not receive time in terms of the request it's like if you can hate multi whatever the",
    "start": "2008800",
    "end": "2014320"
  },
  {
    "text": "master is that's closest yeah it depends on the nature of the application a lot of customers that was exactly what they're doing cousin would hop on a",
    "start": "2014320",
    "end": "2020110"
  },
  {
    "text": "plane in the EU he would land in New York and we wanted to work with data locally so all they were doing when he's",
    "start": "2020110",
    "end": "2026230"
  },
  {
    "text": "in the EU his data's replicating over to New York he flies over to New York and now his locality determines hit the local instance awesome yeah and the the",
    "start": "2026230",
    "end": "2034330"
  },
  {
    "text": "kind of follow-on to that is let's see we are not using global tables I think",
    "start": "2034330",
    "end": "2039340"
  },
  {
    "text": "global tables global multi-master is kind of a crazy thing I think it's [Laughter]",
    "start": "2039340",
    "end": "2046680"
  },
  {
    "text": "obviously I use it in a couple of different things I have ridiculous thing",
    "start": "2046680",
    "end": "2052060"
  },
  {
    "text": "was it took me three lines of code to enable and one it was one command line call and I was like hey it is get",
    "start": "2052060",
    "end": "2057879"
  },
  {
    "text": "available regions for everybody be okay create new global table and these regions but it's just working and then I",
    "start": "2057880",
    "end": "2065679"
  },
  {
    "text": "could have you know the the lambda and edge functions going and talking and saying go do this but let's let's go",
    "start": "2065679",
    "end": "2072730"
  },
  {
    "text": "back to that single regional table you talked about consistent reads or eventually consistent reads and I'm",
    "start": "2072730",
    "end": "2078460"
  },
  {
    "text": "curious what is the kind of you know when you talk about read replication or",
    "start": "2078460",
    "end": "2083830"
  },
  {
    "text": "something like that in a lot of know sequel databases people are talking between single digit milliseconds and",
    "start": "2083830",
    "end": "2089770"
  },
  {
    "text": "hundred did sure what does that look like in China yeah that's a good question that we get that a lot so the",
    "start": "2089770",
    "end": "2095050"
  },
  {
    "text": "p99 latency on secondary replication DynamoDB is sub one millisecond",
    "start": "2095050",
    "end": "2101190"
  },
  {
    "text": "so it's fast p99 latency idea and when you talk about we're getting and talking",
    "start": "2101309",
    "end": "2106599"
  },
  {
    "text": "about indexes there's two types of indexes in dynamodb but the index replication for GS is for global",
    "start": "2106599",
    "end": "2111760"
  },
  {
    "text": "secondary indexes is sub 10 milliseconds p99 latency so very very fast even for your secondary indexes but when you when",
    "start": "2111760",
    "end": "2118480"
  },
  {
    "text": "you create those secondary indexes do they have to be kind of write and read scaled to the same okay I get different",
    "start": "2118480",
    "end": "2124029"
  },
  {
    "text": "things every we're getting in there yeah yeah no problem so let's talk about a little bit about indexes there's two types of indexes and DynamoDB you have",
    "start": "2124029",
    "end": "2130270"
  },
  {
    "start": "2129000",
    "end": "2247000"
  },
  {
    "text": "what we call local secondary index and a global global secondary index will talk about locals first locals allow us to",
    "start": "2130270",
    "end": "2135970"
  },
  {
    "text": "restore the data so if you look at the example we had earlier a customer ID and order date right as the store key so",
    "start": "2135970",
    "end": "2142510"
  },
  {
    "text": "customer ID is the partition key order dates or key I might have a secondary access pattern says you know I need to get all the backordered I know orders",
    "start": "2142510",
    "end": "2149470"
  },
  {
    "text": "for this customer so I might then create an LSI which is partitioned on the customer ID which is the same partition",
    "start": "2149470",
    "end": "2155529"
  },
  {
    "text": "key as the table that's required for LSI's again I can't regroup the data I can only resort the data but I'll use an",
    "start": "2155529",
    "end": "2160930"
  },
  {
    "text": "alternate sorkin and that sort key could be order state and now for the primary workflow of customers orders last 24",
    "start": "2160930",
    "end": "2167109"
  },
  {
    "text": "hours I go to the table for customers orders by order state or backordered state I would go to the LSI LSI is allow",
    "start": "2167109",
    "end": "2174549"
  },
  {
    "text": "me again allow me to restore the data all indexes in dynamo DB allow me to project additional attributes on to the",
    "start": "2174549",
    "end": "2180369"
  },
  {
    "text": "indexes this is a key difference between like a dynamo DB and a DB right when a query DB and it's the same",
    "start": "2180369",
    "end": "2186220"
  },
  {
    "text": "kind of semantics it's going to go either you know and it's either gonna find the item write out the collection because I gave it an underbar ID as a",
    "start": "2186220",
    "end": "2191829"
  },
  {
    "text": "condition it's gonna say great I know where that item is or it's gonna say oh I don't know let do I have an index that",
    "start": "2191829",
    "end": "2197230"
  },
  {
    "text": "matches this query but when it queries the index it might have to go back to the table to read those items to",
    "start": "2197230",
    "end": "2202779"
  },
  {
    "text": "populate missing data right if I think the query wants attributes that are not on the index it has to go read the",
    "start": "2202779",
    "end": "2208299"
  },
  {
    "text": "documents so in DynamoDB to avoid that secondary read we allow users to project",
    "start": "2208299",
    "end": "2214930"
  },
  {
    "text": "some or all of the attributes from the items on the table into the index so it's not just interesting yeah it's not",
    "start": "2214930",
    "end": "2220180"
  },
  {
    "text": "just a b-tree lookup right it's a it's a storage mechanism it's an alternative table right so now it makes the lookups",
    "start": "2220180",
    "end": "2226869"
  },
  {
    "text": "much more efficient so if I query a MongoDB collection I want to match these items it goes to the index it looks at",
    "start": "2226869",
    "end": "2233200"
  },
  {
    "text": "this nice efficient query comes back it says you'll see if you analyze the query it'll tell you you know documents scanned right documents",
    "start": "2233200",
    "end": "2239949"
  },
  {
    "text": "returned in document scan something like that right is that that's what it does right when you do it yeah so and a",
    "start": "2239949",
    "end": "2246489"
  },
  {
    "text": "couple other things it'll tell you right but so if I if I if I query for only the",
    "start": "2246489",
    "end": "2251859"
  },
  {
    "text": "attributes to live on the index then it's gonna say document scan 0 documents returned whatever 100 yeah but you'll",
    "start": "2251859",
    "end": "2257769"
  },
  {
    "text": "never see that in MongoDB because we're close are always going to require parts of the the items and and those indexes",
    "start": "2257769",
    "end": "2263589"
  },
  {
    "text": "are just there to look up so what you usually see is document scanned 100 documents returned 100 if you see a",
    "start": "2263589",
    "end": "2269410"
  },
  {
    "text": "larger document scan the doctors return to means you didn't have an index and it detects Qatar so so essentially by being",
    "start": "2269410",
    "end": "2276130"
  },
  {
    "text": "able to have these attributes listed as LSI's the user can still query in a very like intuitive way but the compute layer",
    "start": "2276130",
    "end": "2282339"
  },
  {
    "text": "on the database will actually especially rearrange the query structure under the hood to make it more efficient but we when you create the outside we will",
    "start": "2282339",
    "end": "2289119"
  },
  {
    "text": "rearrange the data to make it to match the pattern that you specify in your house I schema when you query the LSI",
    "start": "2289119",
    "end": "2295119"
  },
  {
    "text": "what's gonna happen is you're gonna match whatever based on the partition and sort key attributes that you specify and then if you need extended attributes",
    "start": "2295119",
    "end": "2301779"
  },
  {
    "text": "and you projected those on the index then when you when the application gets the result set it's not gonna have to go back to the table and say all batch",
    "start": "2301779",
    "end": "2307900"
  },
  {
    "text": "getitem all these things to get me the rest of the data right that's the key you know I use I use dynaread UV quite a",
    "start": "2307900",
    "end": "2313539"
  },
  {
    "text": "bit and I never really realized that you can project other attributes so much",
    "start": "2313539",
    "end": "2323709"
  },
  {
    "text": "values absolutely yeah it's ok a lot of",
    "start": "2323709",
    "end": "2329170"
  },
  {
    "text": "people do the so you can basically you choose keys only which is basically hey give me all the items that match I don't",
    "start": "2329170",
    "end": "2334719"
  },
  {
    "text": "care about the data I just I just care about the match give me some of the attributes because these are the only",
    "start": "2334719",
    "end": "2340239"
  },
  {
    "text": "attributes I need and we'll do this to vertically partition those items I might have like real big attributes in this",
    "start": "2340239",
    "end": "2345459"
  },
  {
    "text": "item and on the index lookup I don't care about that big data I think like a dashboard view for your email right and",
    "start": "2345459",
    "end": "2351880"
  },
  {
    "text": "when I look at my inbox I'm not looking at all the body so when we look at the body why I select the item so different",
    "start": "2351880",
    "end": "2357189"
  },
  {
    "text": "ways to set up the workflow to be able to match your applications quickly required it's very cool so global",
    "start": "2357189",
    "end": "2363130"
  },
  {
    "start": "2362000",
    "end": "2443000"
  },
  {
    "text": "secondary index is the other type of index we have these indexes allow us to regroup the so in the example of again we'll stick",
    "start": "2363130",
    "end": "2369920"
  },
  {
    "text": "with customers and orders my customer makes an order as sales rep sold it and maybe I need to get sales reps orders for last 24 days to rank my salespeople",
    "start": "2369920",
    "end": "2376849"
  },
  {
    "text": "on performance so my one workflow hits the table gives me a quarter the customers orders in the last 24 30 days",
    "start": "2376849",
    "end": "2382940"
  },
  {
    "text": "or whatever the other now I create GSI that's partitioned on the sales rep ID and sorted on the order date and what",
    "start": "2382940",
    "end": "2389150"
  },
  {
    "text": "I've done is I've regrouped the data right so now I have a totally different aggregation of the data and this is good this is really the the if you think of",
    "start": "2389150",
    "end": "2396770"
  },
  {
    "text": "this if I start to index across different types of items and I'm really using my indexes to join this data and",
    "start": "2396770",
    "end": "2402410"
  },
  {
    "text": "this is what all no SQL databases do to produce those joins so to speak is we're",
    "start": "2402410",
    "end": "2407690"
  },
  {
    "text": "just going to decorate the items that you want to show up with the same index attributes and then use a specific query",
    "start": "2407690",
    "end": "2413299"
  },
  {
    "text": "on that index to produce the aggregation that you're looking for the join data set you're looking for do you do you",
    "start": "2413299",
    "end": "2419119"
  },
  {
    "text": "think GSIS are different all right they are they different from views they are",
    "start": "2419119",
    "end": "2426380"
  },
  {
    "text": "views they are there they are views right yeah absolutely that's that's the way I kinda find the GSI so if you're",
    "start": "2426380",
    "end": "2432980"
  },
  {
    "text": "trying to teach what a GSI is to a person with a lot of relational databases I talked about yeah absolutely",
    "start": "2432980",
    "end": "2441010"
  },
  {
    "text": "all right so we can talk a little bit about data modeling and this is where we get into actually looking at how do we",
    "start": "2441010",
    "end": "2447500"
  },
  {
    "start": "2443000",
    "end": "2837000"
  },
  {
    "text": "map the data and one of the things we found in Amazon is that it's it's money but all the data is relational",
    "start": "2447500",
    "end": "2453680"
  },
  {
    "text": "[Laughter] no there's no such thing that's actually",
    "start": "2453680",
    "end": "2459680"
  },
  {
    "text": "a misnomer I thought it's not quick that's actually a marketing term it was built by salespeople who didn't understand well if it's not relational",
    "start": "2459680",
    "end": "2465650"
  },
  {
    "text": "it must be non relational they need to be able to explain it it's actually denormalized the jesus live data store",
    "start": "2465650",
    "end": "2470900"
  },
  {
    "text": "right yeah and so there is really no such thing as an on relational data because all the data is relational or we",
    "start": "2470900",
    "end": "2476089"
  },
  {
    "text": "wouldn't care about it right I mean there is a key value lookup pattern there's no doubt there's a very valuable pattern you know user session data all",
    "start": "2476089",
    "end": "2483200"
  },
  {
    "text": "kinds of examples of where only where non-relational data plays but the reality of it is that data is relational",
    "start": "2483200",
    "end": "2490490"
  },
  {
    "text": "doesn't matter the app you're building social networking document management IT monitoring it doesn't matter it's all relational and the way we've done it in",
    "start": "2490490",
    "end": "2497510"
  },
  {
    "text": "the past is using these normalized data models and I feel like this is a great way for people to waste time exactly you were adding",
    "start": "2497510",
    "end": "2505420"
  },
  {
    "text": "value you were a database administrator and I don't mean to you know take away from anybody's role but I've worked with",
    "start": "2505420",
    "end": "2510730"
  },
  {
    "text": "a lot of folks like this in pretty large businesses with their sole job was let",
    "start": "2510730",
    "end": "2516040"
  },
  {
    "text": "me make this into normal form let me add there's no six different double foreign key tables to create this relation it's",
    "start": "2516040",
    "end": "2522250"
  },
  {
    "text": "a or figure out how to how to index to be able to accelerate my query",
    "start": "2522250",
    "end": "2527470"
  },
  {
    "text": "performance or if it you know whatever right we're what we're trying to do is yeah well so I was gonna say we had that slide before about like where on the",
    "start": "2527470",
    "end": "2533770"
  },
  {
    "text": "curve are we for no sequel technology and like do you really think it's like an awareness issue do like where do you",
    "start": "2533770",
    "end": "2539500"
  },
  {
    "text": "think that this connect really falls with it well it's it's that the chart the height curve chart and who's where",
    "start": "2539500",
    "end": "2545170"
  },
  {
    "text": "it falls people we're way up on that high curve right now where everyone's saying this is the answer this dancer they're all running to it and they're",
    "start": "2545170",
    "end": "2550630"
  },
  {
    "text": "trying to do the same things the same way as the old technology and and you know funny thing no SQL is most",
    "start": "2550630",
    "end": "2557620"
  },
  {
    "text": "effective and most efficient at scale right relational databases worked fine for 30 years doing all kinds of",
    "start": "2557620",
    "end": "2564070"
  },
  {
    "text": "workloads there's nothing wrong with no yes exactly and at 90 percent of applications today don't scale to the",
    "start": "2564070",
    "end": "2570580"
  },
  {
    "text": "point where they actually need no SQL yeah so you can do it really badly and and and not really know it yes this is",
    "start": "2570580",
    "end": "2577090"
  },
  {
    "text": "what's happening right now I think this is what's delaying that evolution of on the adoption curve right is that people",
    "start": "2577090",
    "end": "2583000"
  },
  {
    "text": "are actually getting away with doing it wrong and that's like what we talked about before when I said it's it's kind of a difficult problem to assess because",
    "start": "2583000",
    "end": "2589180"
  },
  {
    "text": "it's not just about hey do I check these boxes it's about well I have to figure out on my own whether my access patterns",
    "start": "2589180",
    "end": "2595240"
  },
  {
    "text": "are properly aligned for this solution that's a hard problem that's exactly if that is it always is the opposite of relational relational",
    "start": "2595240",
    "end": "2601230"
  },
  {
    "text": "database technology we're gonna normalize the model and then we're gonna start writing queries and you know that if you can just jam it into the",
    "start": "2601230",
    "end": "2607000"
  },
  {
    "text": "normalized model that it'll work you can we'll make it work somehow exactly the idea add a couple indexes here and there",
    "start": "2607000",
    "end": "2612010"
  },
  {
    "text": "creates a more efficient nice the most ridiculously complicated ORM in existence sure but it will work right",
    "start": "2612010",
    "end": "2619150"
  },
  {
    "text": "whereas with no SQL it's the absolute opposite we have to understand every access pattern we have to understand the",
    "start": "2619150",
    "end": "2624550"
  },
  {
    "text": "velocity of the workflows we have to understand the nature the data the size of the data the life cycle of data we need to know",
    "start": "2624550",
    "end": "2629660"
  },
  {
    "text": "everything about the workflow in order to be able to optimize it why because we're denormalizing the model we're",
    "start": "2629660",
    "end": "2635480"
  },
  {
    "text": "tuning this specifically to an access pattern that we're wrong it's purpose-built it's yeah it's purpose-built they it's the definition",
    "start": "2635480",
    "end": "2641420"
  },
  {
    "text": "of purpose built right but the thing about it is it's not terrible we go through this all the time I've been through this with a thousand teams it's",
    "start": "2641420",
    "end": "2647270"
  },
  {
    "text": "a very simple process identify your access pattern lets you know define your entity relationship model guess what you",
    "start": "2647270",
    "end": "2652849"
  },
  {
    "text": "don't get away with not doing that we still have to do that the application cares about it and then figure out how to map the model into a denormalized",
    "start": "2652849",
    "end": "2659450"
  },
  {
    "text": "structure to satisfy your access patterns right so it's a pretty straightforward process it's just different than what we're used to",
    "start": "2659450",
    "end": "2665150"
  },
  {
    "text": "so this is our relational database right here we've got product catalog yeah",
    "start": "2665150",
    "end": "2672349"
  },
  {
    "text": "one-to-one relationships between products and albums products and books products and videos one-to-many between",
    "start": "2672349",
    "end": "2677359"
  },
  {
    "text": "albums attracts many demand videos and tracks and that's the list of queries we'd have to run to get a list of my products right no SQL database let's",
    "start": "2677359",
    "end": "2684230"
  },
  {
    "text": "take that hierarchy of tables collapse those rows into a hierarchy of items",
    "start": "2684230",
    "end": "2689319"
  },
  {
    "text": "maybe a hierarchy of items to live in a single partition or in this example items that actually contain all of that",
    "start": "2689319",
    "end": "2695599"
  },
  {
    "text": "data these would basically the product blobs so to speak and now select star from",
    "start": "2695599",
    "end": "2700640"
  },
  {
    "text": "products brings back everything much simpler query and this is what we're trying to do with no SQL databases we",
    "start": "2700640",
    "end": "2707240"
  },
  {
    "text": "want to reduce the query complexity to eliminate joins everything should be",
    "start": "2707240",
    "end": "2712279"
  },
  {
    "text": "select star from where x equals right as long as we can just say star from where x equals that's a simple query even",
    "start": "2712279",
    "end": "2718490"
  },
  {
    "text": "relational databases blaze at those types of queries that's when we start to join the data that the CPU goes crazy right so let's avoid those joints so we",
    "start": "2718490",
    "end": "2727220"
  },
  {
    "text": "get into modeling for dynamodb it's really about two things selecting that partition key and selecting the sort key",
    "start": "2727220",
    "end": "2732680"
  },
  {
    "text": "and you know good examples for partition keys would be you know maybe a customer ID or device ID again we want things to",
    "start": "2732680",
    "end": "2739400"
  },
  {
    "text": "start to map to access patterns so this might not be very good choices if I was actually had no access pattern which",
    "start": "2739400",
    "end": "2744710"
  },
  {
    "text": "would select by customer ID then I wouldn't want to use that by as a sort key but many would the bad examples",
    "start": "2744710",
    "end": "2752480"
  },
  {
    "text": "would be things like status gender binary true/false oh boy that's terrible",
    "start": "2752480",
    "end": "2757700"
  },
  {
    "text": "because now I was sudden I'm limiting the number of stories knows that can participate in the query workload right if there's only two partition keys",
    "start": "2757700",
    "end": "2764260"
  },
  {
    "text": "then there's only two potential storage nodes so the size and scale of your data is gonna be a real problem sort keys",
    "start": "2764260",
    "end": "2770680"
  },
  {
    "text": "it's about that modeling those relationships the one-to-many many-to-many relationships in your application we want to tie design",
    "start": "2770680",
    "end": "2777940"
  },
  {
    "text": "efficient selective query patterns again we don't want complex queries I don't want have to make multiple round trips",
    "start": "2777940",
    "end": "2783670"
  },
  {
    "text": "one of the best ways to know that you're blowing it with no SQL is if I'm getting something like select my customer you",
    "start": "2783670",
    "end": "2790329"
  },
  {
    "text": "know metadata so I can get my customer ID so I go to my orders table and select all the orders to match that customer ID and then I can iterate through those",
    "start": "2790329",
    "end": "2796480"
  },
  {
    "text": "orders and go get for each one of those get the items that belong to that order okay that's a relational pattern we're",
    "start": "2796480",
    "end": "2802089"
  },
  {
    "text": "making a mistake here let's create a partition for this customer this partitioned on customer ID and then",
    "start": "2802089",
    "end": "2807309"
  },
  {
    "text": "maybe it's a composite key for the sort key which might be order ID - item ID all right something like that that's",
    "start": "2807309",
    "end": "2813700"
  },
  {
    "text": "something I noticed a lot of people don't get is those composite keys they don't they don't think about things like that and it's because you would never",
    "start": "2813700",
    "end": "2819640"
  },
  {
    "text": "ever do that in sequel that's like yeah yeah so I think that's something to",
    "start": "2819640",
    "end": "2824680"
  },
  {
    "text": "really kind of drive home for people is what are the real-world examples where you do that stuff and we'll get into",
    "start": "2824680",
    "end": "2831250"
  },
  {
    "text": "that we start talking about so in these examples so if you look at data modeling in the process of data modeling this is",
    "start": "2831250",
    "end": "2836890"
  },
  {
    "text": "what we talked about the difference between relational and and and denormalize data modeling and it's about",
    "start": "2836890",
    "end": "2842500"
  },
  {
    "text": "understanding that use case we need to know what's the nature this application is an OLTP application is an OLAP is",
    "start": "2842500",
    "end": "2848710"
  },
  {
    "text": "this a decision support system that OLAP probably doesn't fit that I could throw it out right there and say that's",
    "start": "2848710",
    "end": "2854260"
  },
  {
    "text": "probably not a good application for your know SQL database now the decision support system might argue might be depending on the nature of the queries",
    "start": "2854260",
    "end": "2861130"
  },
  {
    "text": "then type of latency that you're looking for in the performance you're looking for in the scale but that OLTP workload",
    "start": "2861130",
    "end": "2866529"
  },
  {
    "text": "that's our sweet spot right that's where we want to be we want to find that entity relationship model we want to",
    "start": "2866529",
    "end": "2872140"
  },
  {
    "text": "find that data lifecycle what are the TTL requirements backup archival etc and then the biggest most important part of",
    "start": "2872140",
    "end": "2879190"
  },
  {
    "text": "all of this is identifying your access patterns and so we want it there's going to be some set of access patterns when",
    "start": "2879190",
    "end": "2884410"
  },
  {
    "text": "we start building the application you can you can almost pull them out of your user stories if it's an existing application I can just look at your",
    "start": "2884410",
    "end": "2890079"
  },
  {
    "text": "existing SQL do you find that people go and you know work from their front end the queries that you know the amount of data",
    "start": "2890079",
    "end": "2896560"
  },
  {
    "text": "they need in a single round trip between a user input and what they're gonna render on the screen do people ever go and say okay this is this is how I'm",
    "start": "2896560",
    "end": "2902710"
  },
  {
    "text": "gonna design my schema this is my access pattern is this is what the user is asking for um I find that most people",
    "start": "2902710",
    "end": "2908260"
  },
  {
    "text": "end up breaking it down into a normalized model the people who know what they're doing do exactly what you",
    "start": "2908260",
    "end": "2914230"
  },
  {
    "text": "just said right there's something okay what is the nature of the data I need to be bright bring back to satisfy this access pattern and generally speaking if",
    "start": "2914230",
    "end": "2920770"
  },
  {
    "text": "it's some sort of a user interaction UI paging or whatnot I want that query to be a single query",
    "start": "2920770",
    "end": "2927880"
  },
  {
    "text": "that returns all of the results that I need to populate that dashboard view right I don't want to have to go and query the database ten times or query",
    "start": "2927880",
    "end": "2934750"
  },
  {
    "text": "ten different tables I want to make one query to get that data and we're gonna do that because we're gonna use indexes to aggregate the items and composite",
    "start": "2934750",
    "end": "2941590"
  },
  {
    "text": "keys and all kinds of neat tricks so we're gonna use to be able to stow these items in partitions that are gonna be able to be retrieved in a single query",
    "start": "2941590",
    "end": "2947620"
  },
  {
    "text": "and that's where power that's the power of those good and ultimately the query and filtering is always gonna be more",
    "start": "2947620",
    "end": "2952750"
  },
  {
    "text": "optimal taun on the database than any code you're gonna write yourself so that's not even a matter of like hey you don't wanna write this code it's always",
    "start": "2952750",
    "end": "2958570"
  },
  {
    "text": "just gonna be me it's just a bit better right I think about that right if I have to go through hitter rating from orders to order to order items from for each",
    "start": "2958570",
    "end": "2965020"
  },
  {
    "text": "customer and maybe I got a work code says get me all the orders in the last 24 hours for these ten customers",
    "start": "2965020",
    "end": "2970120"
  },
  {
    "text": "yikes that's gonna be a lot of queries right so you know versus you know hey ten customers I might say okay let's",
    "start": "2970120",
    "end": "2975970"
  },
  {
    "text": "make ten queries so I'm okay with that but I don't want to make you know a thousand queries you're under one thing",
    "start": "2975970",
    "end": "2981400"
  },
  {
    "text": "we Zach and you have to throw it over to race or where ElastiCache or something right exactly so we've only got maybe ten minutes left",
    "start": "2981400",
    "end": "2987820"
  },
  {
    "text": "so what's Cherie and pull through this and we're gonna take all of the customer questions that have been collected okay",
    "start": "2987820",
    "end": "2993190"
  },
  {
    "text": "let me go ahead and pop forward into some of the data modeling sections but go ahead and fire up a couple of",
    "start": "2993190",
    "end": "2998590"
  },
  {
    "text": "questions yeah so one of the questions that richard boyd and a few others asked was and i can't remember the other",
    "start": "2998590",
    "end": "3004470"
  },
  {
    "text": "person but it was uh gira 64 or something asked it seems like you can do",
    "start": "3004470",
    "end": "3011520"
  },
  {
    "text": "everything in a single table do you see people doing stuff with multiple tables there's reasons for it they're rare yeah",
    "start": "3011520",
    "end": "3020460"
  },
  {
    "text": "I mean most of most of the applications I build it's basically one application one table one what I would say one application service",
    "start": "3020460",
    "end": "3026800"
  },
  {
    "text": "table so if I have you know that I definitely draw a boundary around services right I mean inside of Amazon",
    "start": "3026800",
    "end": "3031810"
  },
  {
    "text": "we have 350 for Tier one services those are moneymakers when one of those is down we're losing money every one of",
    "start": "3031810",
    "end": "3037870"
  },
  {
    "text": "those is is comprised of multiple micro services and inside of each one of those",
    "start": "3037870",
    "end": "3045010"
  },
  {
    "text": "I would draw a boundary around the table so almost can you tie the API to the table I guess multiple tables might exist",
    "start": "3045010",
    "end": "3052300"
  },
  {
    "text": "inside of a single service if I had maybe a configuration data lived on one table and it was never you know access",
    "start": "3052300",
    "end": "3057940"
  },
  {
    "text": "on the same pattern as you know the the actual instance data I might store instance data on one table and",
    "start": "3057940",
    "end": "3063640"
  },
  {
    "text": "configuration data on the other if I if the access patterns are completely isolated the data is completely separated then it really having on one",
    "start": "3063640",
    "end": "3070540"
  },
  {
    "text": "table is not a real advantage other than operationally list things right I always",
    "start": "3070540",
    "end": "3076690"
  },
  {
    "text": "like less things right no seriously less complexity less tables less alerts less",
    "start": "3076690",
    "end": "3081790"
  },
  {
    "text": "alarms less capacity allocation less things for the brain database to worry about right so that's why I like single",
    "start": "3081790",
    "end": "3087940"
  },
  {
    "text": "table designs but in certain situations I'm not opposed to multiple tables but I would like to see those access patterns",
    "start": "3087940",
    "end": "3093400"
  },
  {
    "text": "completely separated the nature of the data should be completely separated there shouldn't be any relationship between the two and we have another",
    "start": "3093400",
    "end": "3098530"
  },
  {
    "text": "question from David wells codes which is how what's the developer experience like",
    "start": "3098530",
    "end": "3103540"
  },
  {
    "text": "when you choose the wrong access pattern to miss again if I got a really good question get it I get this a lot so",
    "start": "3103540",
    "end": "3109320"
  },
  {
    "text": "typically what's happening is we're aligning those access patterns to the user stories that you're building your application around so if you pick the",
    "start": "3109320",
    "end": "3116080"
  },
  {
    "text": "wrong access pattern what you're telling me is you pick the wrong user story which is probably means you pick the wrong app the really the biggest issue",
    "start": "3116080",
    "end": "3130180"
  },
  {
    "text": "with no SQL is when I need to add new access patterns and this is it's not typically that we picked the wrong access pattern that does not happen very",
    "start": "3130180",
    "end": "3136600"
  },
  {
    "text": "often but I have lots of teens come back to me say hey Rick you know we did this and this and it works great but you know",
    "start": "3136600",
    "end": "3142510"
  },
  {
    "text": "customers come back and said now they want you know X how do we do X right so X can be added into the system by",
    "start": "3142510",
    "end": "3149470"
  },
  {
    "text": "typically it means decorating the existing items with additional metadata maybe running a table scan and writing",
    "start": "3149470",
    "end": "3154600"
  },
  {
    "text": "back to those items some attributes that you didn't exist originally that you want to exist now because I'm going to",
    "start": "3154600",
    "end": "3160000"
  },
  {
    "text": "be filtering on those I might be indexing on those or I might add new partitions and the types of partitions with",
    "start": "3160000",
    "end": "3165880"
  },
  {
    "text": "relationships to other partitions again it's yes right new GS is again it's",
    "start": "3165880",
    "end": "3171040"
  },
  {
    "text": "really more of an enhancement to the model this is what I've seen 99% of the time it's it's an expansion or an",
    "start": "3171040",
    "end": "3176950"
  },
  {
    "text": "extension of the existing model it's not a reworking of the model if we have to if we're in a situation where we are",
    "start": "3176950",
    "end": "3182920"
  },
  {
    "text": "reworking the model it's probably because we did something wrong when we were identifying the access patterns typically it's not a modeling issue it's",
    "start": "3182920",
    "end": "3189730"
  },
  {
    "text": "more has to do with velocity of the access patterns that's where people miss it most often I didn't think it was",
    "start": "3189730",
    "end": "3195340"
  },
  {
    "text": "going to get hit that hard right right and and so then we're gonna have to do things I start to spread the data out and whatnot and again these are really",
    "start": "3195340",
    "end": "3201280"
  },
  {
    "text": "just kind of tweaks on the model not like you know redesigning the model okay folks so we only have a couple minutes",
    "start": "3201280",
    "end": "3207460"
  },
  {
    "text": "left please get all your questions into the channel I will relay those to Rick and even the ones we can't answer on the stream we'll",
    "start": "3207460",
    "end": "3213250"
  },
  {
    "text": "try and answer asynchronously but Rick let's go ahead and see a couple of these experience here so you know and what I'm",
    "start": "3213250",
    "end": "3218500"
  },
  {
    "text": "gonna do is just gonna roll forward to a an actual model that we built for one of our internal service customers rather",
    "start": "3218500",
    "end": "3224710"
  },
  {
    "text": "than here we go so I don't know how many folks on the phone right now have",
    "start": "3224710",
    "end": "3230100"
  },
  {
    "text": "Kindles and but if we you have a Kindle there we go",
    "start": "3230100",
    "end": "3235120"
  },
  {
    "text": "I should be up on the screen now if you have a Kindle then you have access to the audible ebook versions of your",
    "start": "3235120",
    "end": "3240520"
  },
  {
    "text": "ebooks and if you're a prime user then you actually have access to those audible ebooks for free so go sign up",
    "start": "3240520",
    "end": "3246550"
  },
  {
    "text": "for that service this is the service that actually syncs between the audible ebooks and various points and your",
    "start": "3246550",
    "end": "3252370"
  },
  {
    "text": "various devices within the customers family of objects that they're listening to these ebooks on right so if I Drive",
    "start": "3252370",
    "end": "3258070"
  },
  {
    "text": "into my driveway listening to an e-book on my on my Alexa in my car and I walk",
    "start": "3258070",
    "end": "3264940"
  },
  {
    "text": "in then I start to play that in my house it needs to know where to start okay so this is a I wouldn't say simple but it's",
    "start": "3264940",
    "end": "3272560"
  },
  {
    "text": "relatively straightforward there's this big mapping table in the middle here that map's all these many-to-many relationships between the products which",
    "start": "3272560",
    "end": "3278530"
  },
  {
    "text": "are ebooks and the audio products which are a ebooks and so an e-book can have",
    "start": "3278530",
    "end": "3283840"
  },
  {
    "text": "many audio products and the audio product and belong to many ebooks because an e-book can belong to multiple volume series editions and whatnot and",
    "start": "3283840",
    "end": "3291290"
  },
  {
    "text": "and then there's many types of devices that these audio products can play on so there's many different audio products",
    "start": "3291290",
    "end": "3297230"
  },
  {
    "text": "that actually correlate to the e-book because I might be playing on my Lexus I might be playing on my Kindle I might be playing on my laptop so on and so forth",
    "start": "3297230",
    "end": "3303920"
  },
  {
    "text": "and then there's this little ACR info table it's it's off to the right and that's the sync file record it's saying",
    "start": "3303920",
    "end": "3309230"
  },
  {
    "text": "here's why I stopped how far how far along right and again many too many mappings between all these things we try",
    "start": "3309230",
    "end": "3314720"
  },
  {
    "text": "to products and audio products between ACR info and audio products and so on and so forth and this team was having a",
    "start": "3314720",
    "end": "3320870"
  },
  {
    "text": "real difficult time trying to map all their access patterns into a denormalized data structure because they",
    "start": "3320870",
    "end": "3326180"
  },
  {
    "text": "have a lot of them and so just right yeah just shove it all together right and then you're back to it's a sequel",
    "start": "3326180",
    "end": "3332840"
  },
  {
    "text": "right we're back on one tape no problem so anyways what we did with these guys sat on - okay what are all your access",
    "start": "3332840",
    "end": "3338900"
  },
  {
    "text": "patterns they're an existing application they went through all of the various SQL statements are executing against the system that came out with 20 different",
    "start": "3338900",
    "end": "3344600"
  },
  {
    "text": "access patterns against the the data support variety of dimensions variety of",
    "start": "3344600",
    "end": "3350590"
  },
  {
    "text": "filters and conditions a lot of up street and downstream consumers and and",
    "start": "3350590",
    "end": "3355670"
  },
  {
    "text": "so again there have a very a lot of trouble time map all this data into a single data structure so we took those",
    "start": "3355670",
    "end": "3360980"
  },
  {
    "text": "patterns when we create a base table looked something like this now this is a fairly complex design if you want to",
    "start": "3360980",
    "end": "3366890"
  },
  {
    "text": "understand the ins and outs of this I suggest you watch the DAT 401 in a",
    "start": "3366890",
    "end": "3372230"
  },
  {
    "text": "session from reinvent where we kind of break down a lot of those right that were showing here I'm going to describe",
    "start": "3372230",
    "end": "3377600"
  },
  {
    "text": "this thing at a high level you can see we have two different types of partitions on this table we have an a book partition we have an e book",
    "start": "3377600",
    "end": "3383150"
  },
  {
    "text": "partition the a book partitions are tied to the e-book partitions using these items that live inside of those",
    "start": "3383150",
    "end": "3389090"
  },
  {
    "text": "partitions that have an e book ACR as the sort key value and that's a composite that's that right now is not a",
    "start": "3389090",
    "end": "3394610"
  },
  {
    "text": "composite that's just a simple eBook ACR IDs those higher is the e-book one yeah a book what above is it starts to become",
    "start": "3394610",
    "end": "3400580"
  },
  {
    "text": "now the a book one is interesting because it's version so v-0 is the",
    "start": "3400580",
    "end": "3407180"
  },
  {
    "text": "current version right so as they add new versions and they add very 1 V 2 V 3 they're going to clobber V 0 with a copy",
    "start": "3407180",
    "end": "3413810"
  },
  {
    "text": "of the new version and they're going to maintain the whole version history in this partition I'm not showing that version right here",
    "start": "3413810",
    "end": "3419220"
  },
  {
    "text": "so they can come in they could say hey give me a bookcase er one starts with v 0 it gives them the current metadata for",
    "start": "3419220",
    "end": "3425640"
  },
  {
    "text": "that for that a bookcase er they could say greater than V 0 it gives them all of the history of that a bookcase er so",
    "start": "3425640",
    "end": "3431700"
  },
  {
    "text": "then the the application essentially becomes responsible for adding that query that's exactly right so it's query",
    "start": "3431700",
    "end": "3437040"
  },
  {
    "text": "conditions to return the actual items that you're looking for so if you look at these individual items on this table",
    "start": "3437040",
    "end": "3442260"
  },
  {
    "text": "again we tied the a bookcase er partitions to the e-book ACR using that that edge item this is really a true",
    "start": "3442260",
    "end": "3448619"
  },
  {
    "text": "classic graph right it's an adjacency list right yeah think of these partitions as nodes think of these edges",
    "start": "3448619",
    "end": "3454020"
  },
  {
    "text": "like that e-book a CR edge as the or that item is the e-book a CR item is the edge that connects the two so if I put a",
    "start": "3454020",
    "end": "3461040"
  },
  {
    "text": "GSI up on the sort key you'll see those all the edges they're connected to me right totally",
    "start": "3461040",
    "end": "3467359"
  },
  {
    "text": "it's one side or the other that many-to-many relationship rights is what we're trying to do we also built them",
    "start": "3467359",
    "end": "3472859"
  },
  {
    "text": "one-to-many relationship inside of those a bookcase er partitions using this",
    "start": "3472859",
    "end": "3477980"
  },
  {
    "text": "these these track items right so we have a bookcase er has multiple tracks so",
    "start": "3477980",
    "end": "3484380"
  },
  {
    "text": "it's tied to the e-book a CR is tight and it has here's all the tracks are associated here's the metadata for the a",
    "start": "3484380",
    "end": "3489690"
  },
  {
    "text": "book version history on that item which is what the team needed anyone changes anything they wanted and then we went",
    "start": "3489690",
    "end": "3494819"
  },
  {
    "text": "and created a bookcase er partitions with just a single item and then what we're doing is decorating all of these",
    "start": "3494819",
    "end": "3499829"
  },
  {
    "text": "items on these GSIS with the various attributes that they're being looked up so if you look at this access pattern",
    "start": "3499829",
    "end": "3504930"
  },
  {
    "text": "get this by that get this by that what we're doing is solving every single one using these GS eyes and when you look at",
    "start": "3504930",
    "end": "3511230"
  },
  {
    "text": "the data on the GS is it's like oh wow that's ugly right I mean you wouldn't want to have to kind of sort through",
    "start": "3511230",
    "end": "3516599"
  },
  {
    "text": "this as a human being but it's a good thing that we're not and you know I get this a lot from teams well you know if I need to visualize my data it's such it's",
    "start": "3516599",
    "end": "3523440"
  },
  {
    "text": "so bad I'm like okay I don't know how often you visualize a petabyte of data but I don't honestly what we need to do",
    "start": "3523440",
    "end": "3532020"
  },
  {
    "text": "is get over the fact that there's different data on the table because that's the way no SQL works this is how it's gonna work efficiently and then so",
    "start": "3532020",
    "end": "3537990"
  },
  {
    "text": "you can see the data is distributed across all those GS is various dimensions various types of data and then we're gonna take that and this",
    "start": "3537990",
    "end": "3543869"
  },
  {
    "text": "looks like an eye chart and it is but we're just taking those 20 access patterns we're adding those three columns on the end query this table or",
    "start": "3543869",
    "end": "3550050"
  },
  {
    "text": "this GSI query with these sort key conditions and queer with these filter conditions and this is going to satisfy your access pattern",
    "start": "3550050",
    "end": "3556010"
  },
  {
    "text": "it's a pretty straightforward process it is straightforward but it's also an ingenious design did you come up with",
    "start": "3556010",
    "end": "3563560"
  },
  {
    "text": "this is deceptively simple it's it's incredibly simple but the deceptively",
    "start": "3564670",
    "end": "3571550"
  },
  {
    "text": "complex where you look at the answer you're like oh I understand this then it's like okay now do it again Oh solve",
    "start": "3571550",
    "end": "3576950"
  },
  {
    "text": "it the whole issues I this I just I'm",
    "start": "3576950",
    "end": "3583010"
  },
  {
    "text": "ready to quit the stream because I have to go write a lot of notes I want to change a bunch of things around I've",
    "start": "3583010",
    "end": "3589220"
  },
  {
    "text": "learned a lot today so awesome let's see if we can't answer last few questions from the show here bro so I think we had",
    "start": "3589220",
    "end": "3595790"
  },
  {
    "text": "a question from Sean Hynes given a traditional relational database with a customer table in an orders table what",
    "start": "3595790",
    "end": "3602060"
  },
  {
    "text": "would be the best way to think about situations where the example customer address gets an update a relational DB would handle that easily since",
    "start": "3602060",
    "end": "3607430"
  },
  {
    "text": "one-to-many relation but how would you design a relation like that and the flatten structure of a document TV and I",
    "start": "3607430",
    "end": "3613160"
  },
  {
    "text": "know the answer to this but you can and so I'm this was customers and orders so really",
    "start": "3613160",
    "end": "3620090"
  },
  {
    "text": "what you're gonna have is customer metadata and you have order metadata so I would start to look at was the access pattern here I may be let's assume",
    "start": "3620090",
    "end": "3626450"
  },
  {
    "text": "that's dashboard view customer logs in their portal they want to see the last month's worth of orders so that would be actually my query will say give me",
    "start": "3626450",
    "end": "3632270"
  },
  {
    "text": "everything in this customer partition that has a a sort key attribute that is greater than twenty or thirty days ago",
    "start": "3632270",
    "end": "3638740"
  },
  {
    "text": "the first item I would load in that partition would be the customers metadata item that would have his",
    "start": "3638740",
    "end": "3643940"
  },
  {
    "text": "address name login data all that stuff it's a single item and it would have a sort key value of nine nine nine nine",
    "start": "3643940",
    "end": "3649040"
  },
  {
    "text": "and I think I think one of the things that people don't always get is when you say partition it's really partitions",
    "start": "3649040",
    "end": "3654740"
  },
  {
    "text": "because it's a it's a type of partition but it's a oh right yeah it's multiple",
    "start": "3654740",
    "end": "3660320"
  },
  {
    "text": "partitions yes as well as a customers partition had to be many partitions that belong to many customers right so every",
    "start": "3660320",
    "end": "3665660"
  },
  {
    "text": "customer has their own partition that's identified by their customer ID inside of this partition there's a customer",
    "start": "3665660",
    "end": "3671030"
  },
  {
    "text": "metadata item with the sort key attribute of nine nine nine nine or just nine and then all the other items in",
    "start": "3671030",
    "end": "3676100"
  },
  {
    "text": "there are order items and they have a date as the sort key and then I'd say give me everything that's greater than $24 thirty days ago well guess what nine",
    "start": "3676100",
    "end": "3683570"
  },
  {
    "text": "nine nine 9 is greater is a string sort than 30 days ago so I'm gonna get the first item",
    "start": "3683570",
    "end": "3689540"
  },
  {
    "text": "that comes back is going to be the customers metadata and everything after that's going to be an order so inside the application of logic when the",
    "start": "3689540",
    "end": "3695450"
  },
  {
    "text": "results that comes back it'll process that first item as customer metadata populate address login name all this",
    "start": "3695450",
    "end": "3700730"
  },
  {
    "text": "kind of stuff on the dashboard and then it's can say every item after that goes into the table and describes the actual",
    "start": "3700730",
    "end": "3706370"
  },
  {
    "text": "orders to the customer made and you and I we had a conversation actually about something similar to this on Twitter okay and where you did oh yeah for each",
    "start": "3706370",
    "end": "3715660"
  },
  {
    "text": "yeah just update everything well in this example what I just put out was a little different because we're not actually",
    "start": "3717490",
    "end": "3722840"
  },
  {
    "text": "updating any of the order I they don't contain old customers you know our order address or address data only the",
    "start": "3722840",
    "end": "3728030"
  },
  {
    "text": "metadata item does but I'm creating a query construct or a data content model that allows me to query it with a single",
    "start": "3728030",
    "end": "3734480"
  },
  {
    "text": "query and get the customers metadata and all the orders the same way I would is if I issue to join in a relational",
    "start": "3734480",
    "end": "3739820"
  },
  {
    "text": "database if we probably have a couple of times for maybe for two or three more questions yeah I have one from the chat here from Thomas Whiston so a nice foil",
    "start": "3739820",
    "end": "3746270"
  },
  {
    "text": "to the last class for me had for admin interfaces where a few users need to query data using search or filter fields it may not make sense to define all",
    "start": "3746270",
    "end": "3752840"
  },
  {
    "text": "search fields as access patterns would it make sense in situations like this to scan the table sure I'd well so two",
    "start": "3752840",
    "end": "3758600"
  },
  {
    "text": "things can happen here I have lots of situations like this where we need to do searching on multiple dimensions I don't",
    "start": "3758600",
    "end": "3765470"
  },
  {
    "text": "forget about filter conditions a filter conditions can be your friend here as long as the sort key condition is relatively selective and the filter",
    "start": "3765470",
    "end": "3772190"
  },
  {
    "text": "conditions are just kind of trimming the items out or even if the Soraa key condition returns a lot of items but",
    "start": "3772190",
    "end": "3777890"
  },
  {
    "text": "it's but it's not a high volume right I mean if we're talking about gigabytes of data and filtering down to a few items",
    "start": "3777890",
    "end": "3784280"
  },
  {
    "text": "and that's a problem yeah but if what we're talking about is hey I'm bringing back a megabyte of data and I'm gonna be trimming out you know a couple hundred",
    "start": "3784280",
    "end": "3790120"
  },
  {
    "text": "kilobytes then that's not too much of an issue so filter conditions can work very",
    "start": "3790120",
    "end": "3795140"
  },
  {
    "text": "well the other thing that can happen here again depending on the nature of the access pattern you might want to",
    "start": "3795140",
    "end": "3800180"
  },
  {
    "text": "create a selective index that's specific for the dimensions that you're querying on that'll allow you to kind of create",
    "start": "3800180",
    "end": "3805400"
  },
  {
    "text": "that selective first step and then filter on the rest but typically this is",
    "start": "3805400",
    "end": "3810470"
  },
  {
    "text": "where I start to wonder is this a good pattern for NoSQL data because now if you're talking about",
    "start": "3810470",
    "end": "3816290"
  },
  {
    "text": "querying on a large number of dimensions in a random combination when you're really talking about ad-hoc queries so",
    "start": "3816290",
    "end": "3822350"
  },
  {
    "text": "let's let's let's really look at this and determine whether or not this is a good use case now for a relational",
    "start": "3822350",
    "end": "3827750"
  },
  {
    "text": "database and and maybe the other option here is potentially put in bring in elasticsearch okay so we can query",
    "start": "3827750",
    "end": "3832760"
  },
  {
    "text": "against multiple dimensions elasticsearch and identify the ions we need on the table that could be a really valid architecture as well awesome",
    "start": "3832760",
    "end": "3840020"
  },
  {
    "text": "so I mean we're gonna have to have you back because there are so many things we",
    "start": "3840020",
    "end": "3845390"
  },
  {
    "text": "never even got to see streams oh I love",
    "start": "3845390",
    "end": "3850460"
  },
  {
    "text": "to come back yeah so we're gonna make it I'm gonna work on the schedule get you get you back here maybe sooner than then",
    "start": "3850460",
    "end": "3857270"
  },
  {
    "text": "land then later go so I was good I just wanted to say everyone in the stream has been very kind to you and saying they",
    "start": "3857270",
    "end": "3865760"
  },
  {
    "text": "learned something every time oh yeah that's what I live for so thanks thanks for that that's really cool so thank you",
    "start": "3865760",
    "end": "3871940"
  },
  {
    "text": "so much for coming on and we'll be back next week with another episode yeah it's next Tuesday at noon here at",
    "start": "3871940",
    "end": "3877070"
  },
  {
    "text": "twitch TV slash AWS thanks for tuning in we'll see you next week everyone thanks guys",
    "start": "3877070",
    "end": "3883359"
  },
  {
    "text": "[Music]",
    "start": "3886050",
    "end": "3898409"
  }
]