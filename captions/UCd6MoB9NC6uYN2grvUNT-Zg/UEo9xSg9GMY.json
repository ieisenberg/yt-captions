[
  {
    "text": "hi everyone we're gonna get started um my name is Leo janovski I'm a principal",
    "start": "160",
    "end": "6520"
  },
  {
    "text": "Solutions architect uh here at AWS and uh thank you all for coming um I'm going",
    "start": "6520",
    "end": "12320"
  },
  {
    "text": "to talk to you today about AWS or Amazon cloudwatch logs and AWS Lambda and how",
    "start": "12320",
    "end": "18640"
  },
  {
    "text": "they work together to help you get increased visibility into what's going on with your infrastructure and your",
    "start": "18640",
    "end": "24199"
  },
  {
    "text": "applications and how to uh you know also take action upon uh things that you get",
    "start": "24199",
    "end": "29439"
  },
  {
    "text": "alerts on and so if you're wondering why we have a logging uh talk uh in the",
    "start": "29439",
    "end": "34600"
  },
  {
    "text": "devops track it's because part of devops is visibility for your whole team so",
    "start": "34600",
    "end": "39640"
  },
  {
    "text": "having logging everywhere uh making sure that you have proper alerts set on that logging and making sure that you have",
    "start": "39640",
    "end": "45960"
  },
  {
    "text": "proper actions uh on your logs so as you automate more and more of your apps and",
    "start": "45960",
    "end": "51520"
  },
  {
    "text": "your infrastructure it becomes less and less feasible to manually log into servers to go search for logs manually",
    "start": "51520",
    "end": "59399"
  },
  {
    "text": "and so you have to have centralized logging and you have to have a good alerting setup for that so I'll talk to you about how to do that so just um for",
    "start": "59399",
    "end": "67320"
  },
  {
    "text": "what you should expect from this session uh we're going to talk about some industry trends that we see that impact",
    "start": "67320",
    "end": "73360"
  },
  {
    "text": "monitoring and logging uh we're going to talk about uh Amazon cloudwatch and uh",
    "start": "73360",
    "end": "80400"
  },
  {
    "text": "Amazon cloudwatch logs and what the difference between the two of them are how they work together we're going to",
    "start": "80400",
    "end": "85680"
  },
  {
    "text": "talk about some general U monitoring use cases that we see and and we're going to show you uh how Cloud watch and Lambda",
    "start": "85680",
    "end": "93759"
  },
  {
    "text": "work together uh to help you do a bunch of useful things and so I'm going to",
    "start": "93759",
    "end": "100119"
  },
  {
    "text": "talk about three scenarios in this talk the first one is how to centralize logging so uh with cloudwatch logs right",
    "start": "100119",
    "end": "108600"
  },
  {
    "text": "you can install an agent on any instance to get those logs but how do you",
    "start": "108600",
    "end": "113719"
  },
  {
    "text": "actually centralize logs that you get an S3 so things like uh elb logs in this example or another example would be uh",
    "start": "113719",
    "end": "120520"
  },
  {
    "text": "access logs from cloudfront from our CDN uh so how do you centralize those logs how do you import them into cloudwatch",
    "start": "120520",
    "end": "126039"
  },
  {
    "text": "logs uh we're also going to talk about how to customize alarms and so how do you get alarms from",
    "start": "126039",
    "end": "132720"
  },
  {
    "text": "cloudwatch and how do you make it so those alarms are useful and so that they actually when you get the alarm they",
    "start": "132720",
    "end": "138680"
  },
  {
    "text": "display data that uh you can act on not just hey there's an alarm that's been triggered uh and lastly we're going to",
    "start": "138680",
    "end": "145440"
  },
  {
    "text": "talk about um how do you analyze your log data so how do you take a bunch of",
    "start": "145440",
    "end": "151040"
  },
  {
    "text": "log data how do you spin up on elastic search uh cluster and then do your",
    "start": "151040",
    "end": "156879"
  },
  {
    "text": "analysis and then shut it down so you don't have a long running cluster that you need to pay for so first of all let's let's talk",
    "start": "156879",
    "end": "163760"
  },
  {
    "text": "about a common scenario that I see uh I come from a devops kind of CIS admin background so common scenario I've I've",
    "start": "163760",
    "end": "170440"
  },
  {
    "text": "seen uh both in my previous career uh and you know with a b a bunch of uh uh",
    "start": "170440",
    "end": "175959"
  },
  {
    "text": "just people in the industry so I'm sure I'm sure a lot of you who work in operations or devops are",
    "start": "175959",
    "end": "182599"
  },
  {
    "text": "familiar with the the this is fine dog feeling like this is fine dog and uh so",
    "start": "182599",
    "end": "188480"
  },
  {
    "text": "let's talk through a scenario here that I've seen happen uh way too many times uh so this scenario is you know it's",
    "start": "188480",
    "end": "195080"
  },
  {
    "text": "true I've seen it so you've got an important app uh and then your application it's",
    "start": "195080",
    "end": "202519"
  },
  {
    "text": "down now the first red flag here is you don't know it's down cuz you got it from your monitoring you know it's down",
    "start": "202519",
    "end": "208120"
  },
  {
    "text": "because a customer has uh file the ticket that your your app is down so that's the first bad thing here and so",
    "start": "208120",
    "end": "215000"
  },
  {
    "text": "you've got the onal developer John John gets page through the ticketing system",
    "start": "215000",
    "end": "220239"
  },
  {
    "text": "and again he only knows not because I'm alarm fired but because of this ticket so this is the Blissful ignorance stage",
    "start": "220239",
    "end": "226879"
  },
  {
    "text": "of this incident so you don't know anything that's happened uh except your customers are unhappy so then JN starts",
    "start": "226879",
    "end": "234599"
  },
  {
    "text": "looking at service dashboards JN does see that there's some intermittent availability issues but he doesn't know",
    "start": "234599",
    "end": "241400"
  },
  {
    "text": "where to look uh to assess impact to customers to begin troubleshooting that's another red flag right you don't",
    "start": "241400",
    "end": "247560"
  },
  {
    "text": "know where to look you don't have good dashboards you don't have good monitoring so John decides to escalate",
    "start": "247560",
    "end": "252879"
  },
  {
    "text": "this to the manager so this is the confusion and panic stage of the uh uh",
    "start": "252879",
    "end": "258680"
  },
  {
    "text": "incident and so then you get more more customer tickets are pouring in uh more",
    "start": "258680",
    "end": "263840"
  },
  {
    "text": "customers uh are't happppy the escalation manager Jane joins the event and starts to look at what's going on so",
    "start": "263840",
    "end": "272320"
  },
  {
    "text": "then even worse the CTO notices what happens what's happening and sends an I",
    "start": "272320",
    "end": "277560"
  },
  {
    "text": "am hey what's going on Jane what's wrong with important app app this is where it",
    "start": "277560",
    "end": "283560"
  },
  {
    "text": "starts getting stressful and so because they don't have",
    "start": "283560",
    "end": "289320"
  },
  {
    "text": "really good logging they just start guessing at you know based on previous experience what the issue is so they recall Jane and John recall a recent",
    "start": "289320",
    "end": "296360"
  },
  {
    "text": "issue where there are certain expensive uh operations done by customers that impacted the app so they start diving",
    "start": "296360",
    "end": "303199"
  },
  {
    "text": "into logs to confirm if this is what's going on again because they don't have centralized logging they have to go and",
    "start": "303199",
    "end": "309039"
  },
  {
    "text": "log in to specific production hosts and GP through the logs and it's taking a",
    "start": "309039",
    "end": "314199"
  },
  {
    "text": "while uh and so JN then identifies a suspect customer JN thinks he has something Jane cuts a ticket and",
    "start": "314199",
    "end": "320639"
  },
  {
    "text": "prepares to block that customer's expensive operations but they don't have any concrete data that this is what's",
    "start": "320639",
    "end": "327280"
  },
  {
    "text": "actually causing the issue so this is the uh the false hope uh stage of the",
    "start": "327280",
    "end": "332759"
  },
  {
    "text": "incident and so the other team gets involved um the they indicate that uh",
    "start": "332759",
    "end": "340199"
  },
  {
    "text": "there's nothing that's been changed they indicate that you know this expensive operation isn't actually going on uh and",
    "start": "340199",
    "end": "347280"
  },
  {
    "text": "so even though they they they changed the configuration to block the customer uh the issue is still happening and",
    "start": "347280",
    "end": "355000"
  },
  {
    "text": "so when they've run out of ideas you know you always want to try have you tried rebooting it so they decide to",
    "start": "355000",
    "end": "361080"
  },
  {
    "text": "fail over the database right and so this is the uh desperation",
    "start": "361080",
    "end": "367039"
  },
  {
    "text": "stage and they get lucky and it works rebooting fixes the issue the app",
    "start": "367039",
    "end": "372199"
  },
  {
    "text": "recovers or actually not rebooting but uh failing over to the standby and so then they do the root cause analysis and",
    "start": "372199",
    "end": "378560"
  },
  {
    "text": "it turns out that they show was actually there's a new jdbc version introduced it had a memory leak that this led to Java",
    "start": "378560",
    "end": "385199"
  },
  {
    "text": "Heap exhaustion and so that's why failing over to the standby uh fixed it everything so they fix the leak they add",
    "start": "385199",
    "end": "392479"
  },
  {
    "text": "alarms on memory usage to prevent this harm happening again and they tune their service alarms so this is The",
    "start": "392479",
    "end": "398880"
  },
  {
    "text": "Enlightenment stage they figure out what's wrong but this all really reactive you don't really want to you know uh you know have disasters happen",
    "start": "398880",
    "end": "407160"
  },
  {
    "text": "and then fix things I mean sometimes that happens but you really want to get ahead of the problem usually so we can",
    "start": "407160",
    "end": "413639"
  },
  {
    "text": "definitely do better than this so just some of the red flags here um we have",
    "start": "413639",
    "end": "419800"
  },
  {
    "text": "poor monitoring we didn't have any alarms here uh the the some of the",
    "start": "419800",
    "end": "425000"
  },
  {
    "text": "alarms weren't actionable so they found out hey you know um maybe this previous",
    "start": "425000",
    "end": "431240"
  },
  {
    "text": "issue uh you know with expensive operations caused the problem but they didn't know for sure uh they didn't have",
    "start": "431240",
    "end": "438440"
  },
  {
    "text": "access to the right logs right away they had to access their production hosts the very fact they were logging into their",
    "start": "438440",
    "end": "444319"
  },
  {
    "text": "production host as potentially a problem too um and they didn't have dashboards",
    "start": "444319",
    "end": "449360"
  },
  {
    "text": "right right so again they they depend on customers to let them know they're down so the bottom line is monitoring can be",
    "start": "449360",
    "end": "456599"
  },
  {
    "text": "really hard right you have a lot of data and as apps grow into microservices and get broken down just get more and more",
    "start": "456599",
    "end": "463360"
  },
  {
    "text": "log data and you got to do something useful with it so let's talk about some Trends we see in monitoring so as I",
    "start": "463360",
    "end": "470319"
  },
  {
    "text": "mentioned just now uh we see a transformation in the industry from",
    "start": "470319",
    "end": "476000"
  },
  {
    "text": "monolithic apps to microservices so apps are being broken down into smaller and smaller pieces each of those smaller",
    "start": "476000",
    "end": "482639"
  },
  {
    "text": "pieces ideally operate independently uh as much as they can they each have their own logging uh we see uh applications",
    "start": "482639",
    "end": "490960"
  },
  {
    "text": "shifting more into more uh more and more into a polyglot uh kind of setup so you see different languages across",
    "start": "490960",
    "end": "497319"
  },
  {
    "text": "microservices different Frameworks um we see uh workloads that",
    "start": "497319",
    "end": "502840"
  },
  {
    "text": "are transient right so you can't assume that your app servers or wherever your computer is happening is going to stick",
    "start": "502840",
    "end": "509120"
  },
  {
    "text": "around so whether you're using Auto scaling groups or containers or serverless compute like Lambda um you",
    "start": "509120",
    "end": "516599"
  },
  {
    "text": "know a container or Lambda function might execute it might disappear an instance might disappear you might scale",
    "start": "516599",
    "end": "523159"
  },
  {
    "text": "up you might scale down so you can't assume that any logs you have stored on your compute layer are going to stick",
    "start": "523159",
    "end": "529760"
  },
  {
    "text": "around so you have to have centralized logging and we also see specialization in the persistence tier so we see",
    "start": "529760",
    "end": "535080"
  },
  {
    "text": "customers using uh you know S3 we see customers using EBS for various things",
    "start": "535080",
    "end": "540560"
  },
  {
    "text": "we see customers storing things in Dynamo DB in elasticache whether redus",
    "start": "540560",
    "end": "545800"
  },
  {
    "text": "or mcache um and so you know you have to have logging data and all that as well",
    "start": "545800",
    "end": "551560"
  },
  {
    "text": "and we see applications becoming more Dynamic so as more and more organizations doop",
    "start": "551560",
    "end": "558680"
  },
  {
    "text": "devops uh we see more and more people do continuous integration continuous delivery continuous deployment so",
    "start": "558680",
    "end": "564560"
  },
  {
    "text": "changes are becoming much smaller deploys are becoming much more frequent um as an example in 2011 Amazon",
    "start": "564560",
    "end": "572079"
  },
  {
    "text": "internally we did 50 million deploys across the company I'm sure you know this year it's it's far far more than",
    "start": "572079",
    "end": "578079"
  },
  {
    "text": "that uh and so uh you have to have logging on all your cicd all your builds",
    "start": "578079",
    "end": "584600"
  },
  {
    "text": "all your tests all your deploys um and we see that uh infrastructure needs to",
    "start": "584600",
    "end": "590920"
  },
  {
    "text": "scale as well so we see our customers uh going global so I have customers who",
    "start": "590920",
    "end": "596240"
  },
  {
    "text": "have their application were you know it used to be just in the us so have to worry about us business hours uh now",
    "start": "596240",
    "end": "602720"
  },
  {
    "text": "there's no such thing as an off time for their application so they have deployments in in Asia and South America",
    "start": "602720",
    "end": "609480"
  },
  {
    "text": "and Europe and the Middle East and Africa and so your application is always on it's always in use you can always get",
    "start": "609480",
    "end": "616240"
  },
  {
    "text": "a random Spike of traffic that you can't predict and so your logging infrastructure has to be able to uh give",
    "start": "616240",
    "end": "623800"
  },
  {
    "text": "you a lot of insight for that and lastly we see an increasing role of automation",
    "start": "623800",
    "end": "629720"
  },
  {
    "text": "as applications get bigger in scale you can't just you know manually log into the console or script things you have to",
    "start": "629720",
    "end": "637440"
  },
  {
    "text": "have automation you have to have not just in your deploys and in your code but you have to have Automation in your",
    "start": "637440",
    "end": "643360"
  },
  {
    "text": "infrastructure to treat your infrastructure as code and another Trend that we see is that applications are",
    "start": "643360",
    "end": "650320"
  },
  {
    "text": "having much more of an impact in business outcomes so even as nonte",
    "start": "650320",
    "end": "655600"
  },
  {
    "text": "organizations get more in you they develop mobile apps they have more use of Technology this technology impacts",
    "start": "655600",
    "end": "662880"
  },
  {
    "text": "their revenue and slas matter and customers their expectations are evolving so I remember a few years ago",
    "start": "662880",
    "end": "669800"
  },
  {
    "text": "you know there's um like actually when I went to college we had an application that uh you know it would only work",
    "start": "669800",
    "end": "675880"
  },
  {
    "text": "during business hours if you tried to change your class schedule uh at like 2 a.m. it wouldn't work customers don't",
    "start": "675880",
    "end": "681399"
  },
  {
    "text": "accept that kind of thing anymore right your application has to always be available and has to be rapidly evolving",
    "start": "681399",
    "end": "687680"
  },
  {
    "text": "to for you to gain competitive ad advantage over um your competitors and",
    "start": "687680",
    "end": "693959"
  },
  {
    "text": "so another Trend that we see is that logging and monitoring it's not a",
    "start": "693959",
    "end": "699040"
  },
  {
    "text": "standalone thing anymore it's part of the application life cycle so you know",
    "start": "699040",
    "end": "704160"
  },
  {
    "text": "youve got your provisioning your infrastructure your configuration management monitoring and performance",
    "start": "704160",
    "end": "710079"
  },
  {
    "text": "right which we're talking about here governance and compliance resource optimization monitoring is part of all",
    "start": "710079",
    "end": "715440"
  },
  {
    "text": "of these things right and logging is part of all these things so let's talk specifically about",
    "start": "715440",
    "end": "723040"
  },
  {
    "text": "cloudwatch cloudwatch is a AWS a service and it gives you generated metrics and",
    "start": "723040",
    "end": "730200"
  },
  {
    "text": "logs and events uh over time to understand the behavior of your system so Cloud watch just regular Cloud watch",
    "start": "730200",
    "end": "736880"
  },
  {
    "text": "is metrics right so you get a bunch of built-in metrics with cloudwatch so for example when you're using ec2 you get",
    "start": "736880",
    "end": "742680"
  },
  {
    "text": "metrics for ec2 for things like CPU utilization uh you get metrics on uh how",
    "start": "742680",
    "end": "749279"
  },
  {
    "text": "much Network throughput the instances getting all that kind of stuff uh you can also then put in custom metrics so",
    "start": "749279",
    "end": "754880"
  },
  {
    "text": "you can have a custom metric on things that we can't read off the hypervisor and generate for you automatically so",
    "start": "754880",
    "end": "760079"
  },
  {
    "text": "for example memory utilization or number of threads uh on your Java process or",
    "start": "760079",
    "end": "765519"
  },
  {
    "text": "something like that uh so you can make a custom metric out of really anything uh and then cloudwatch logs is a service",
    "start": "765519",
    "end": "771959"
  },
  {
    "text": "where you there's a logging agent the logging agent gets installed on your instance and you can point it to any logs on that instance and it'll send it",
    "start": "771959",
    "end": "778519"
  },
  {
    "text": "up to the cloud uh log service and it's a centralized logging service",
    "start": "778519",
    "end": "783920"
  },
  {
    "text": "and so you can also do notifications on alarms and Cloud watch and cloudwatch logs so you can set up an alarm for",
    "start": "783920",
    "end": "792199"
  },
  {
    "text": "something like when my CPU utilization on this instance or this group of instances uh is over say 80% for 5",
    "start": "792199",
    "end": "799519"
  },
  {
    "text": "minutes trigger an alarm you can also take an action on that alarm and I'll talk about that as well and in",
    "start": "799519",
    "end": "804560"
  },
  {
    "text": "cloudwatch logs you can do alarms as well so you can inspect your logs and search for let's say uh 404 in your web",
    "start": "804560",
    "end": "811399"
  },
  {
    "text": "access logs and if you get more than a certain amount of 404s you can trigger an alarm on that so you can get pretty",
    "start": "811399",
    "end": "816760"
  },
  {
    "text": "uh customized with alarms um you can also uh inspect navigate zoom in",
    "start": "816760",
    "end": "822360"
  },
  {
    "text": "correlate issues uh across time to investigate what's going on and this is",
    "start": "822360",
    "end": "827959"
  },
  {
    "text": "a fairly new feature so if you generate metrics from your cloudwatch logs you",
    "start": "827959",
    "end": "833440"
  },
  {
    "text": "can jump directly to those logs from the metric and you can also generate additional metrics from your log data so",
    "start": "833440",
    "end": "840399"
  },
  {
    "text": "for example if you're creating a metric on how many 404s you have that's something you you can do before",
    "start": "840399",
    "end": "847320"
  },
  {
    "text": "um so then you can take action and correct issues automatically off of what's going on in your logs so we have",
    "start": "847320",
    "end": "855000"
  },
  {
    "text": "a service called Lambda it is our serverless compute Service uh and you",
    "start": "855000",
    "end": "860079"
  },
  {
    "text": "can trigger a Lambda function off of alarm so uh let's say you um you know",
    "start": "860079",
    "end": "866720"
  },
  {
    "text": "need to fail over so you see oh my app is down so I need to fail over my DNS to point to my copy of my app in another",
    "start": "866720",
    "end": "872880"
  },
  {
    "text": "region you can trigger that off of an alarm uh you can also trigger other",
    "start": "872880",
    "end": "878040"
  },
  {
    "text": "things off of alarms so for example if you just need to scale up right um so",
    "start": "878040",
    "end": "883639"
  },
  {
    "text": "you can you can do an auto scaling trigger off an alarm so you can say oh my CPU utilization is really high I'm",
    "start": "883639",
    "end": "890079"
  },
  {
    "text": "now going to launch more instances and add them to the load balancer and scale up you can do that off of your uh off of",
    "start": "890079",
    "end": "897160"
  },
  {
    "text": "your alarms so let's let's talk about some recent improvements uh within the last year that we've uh changed with the",
    "start": "897160",
    "end": "904480"
  },
  {
    "text": "cloudwatch service so first of all we dro the price on custom metrics so it's",
    "start": "904480",
    "end": "909959"
  },
  {
    "text": "now less expensive to do custom metrics we keep adding metrics from more services uh so example",
    "start": "909959",
    "end": "918920"
  },
  {
    "text": "cloud cloud trail elastic beanock SCS now can all send uh to cloudwatch or",
    "start": "918920",
    "end": "924519"
  },
  {
    "text": "cloudwatch logs uh We've made it simple to navigate from your Metro back to the originating",
    "start": "924519",
    "end": "930360"
  },
  {
    "text": "logs that generated those metrics so you can you can see which specific events triggered a metric and it used to be",
    "start": "930360",
    "end": "935680"
  },
  {
    "text": "that cloudwatch only retain data for two weeks it is now up to 15 months so it retains data for a lot",
    "start": "935680",
    "end": "941759"
  },
  {
    "text": "longer uh we also added support for arbitr arbitrary uh metric percentiles",
    "start": "941759",
    "end": "947600"
  },
  {
    "text": "uh we released a collect D plugin uh to uh simplify metric collection so collect",
    "start": "947600",
    "end": "953120"
  },
  {
    "text": "D is an open source uh tool so you can use that to generate custom metrics really easily uh we we' improved the web",
    "start": "953120",
    "end": "960160"
  },
  {
    "text": "console and dashboards uh in a bunch of ways over the past year and so outside",
    "start": "960160",
    "end": "966839"
  },
  {
    "text": "of our services uh again it's not just about Cloud watch it's about our partner ecosystem for logs as well uh so again",
    "start": "966839",
    "end": "974240"
  },
  {
    "text": "monitoring is hard and every team is going to have unique needs so I have customers who use just like our services",
    "start": "974240",
    "end": "979920"
  },
  {
    "text": "for monitoring and logging uh I I have customers who use partner services so",
    "start": "979920",
    "end": "984959"
  },
  {
    "text": "they use you know things like Sumo logic or Splunk uh um those are all really",
    "start": "984959",
    "end": "990399"
  },
  {
    "text": "common to I see a lot of elastic search so elk Stacks as well uh so we have a Rich Partner ecosystem uh we have a lot",
    "start": "990399",
    "end": "997279"
  },
  {
    "text": "of solutions that are integrated directly with AWS and with AWS logs so there's products that consume uh elb",
    "start": "997279",
    "end": "1004319"
  },
  {
    "text": "logs or cloudfront logs cloud trail logs help you analyze those as well most of our customers use some mix of our",
    "start": "1004319",
    "end": "1010880"
  },
  {
    "text": "services and uh partner Services as well uh and so AWS is all API driven so we",
    "start": "1010880",
    "end": "1017120"
  },
  {
    "text": "give you the flexibility to make and match and and script against all of our services as you need to to accomplish",
    "start": "1017120",
    "end": "1022759"
  },
  {
    "text": "your job so in terms of cloudwatch logs uh again cloudwatch logs is a",
    "start": "1022759",
    "end": "1028199"
  },
  {
    "text": "centralized logging service it allows you to search your logs monitor those logs uh stream the logs out to various",
    "start": "1028199",
    "end": "1035079"
  },
  {
    "text": "places retain logs U and cloudwatch logs actually doesn't have a limit of 15 months with cloudwatch logs you can",
    "start": "1035079",
    "end": "1041160"
  },
  {
    "text": "store your logs as long as you want uh and it is all encrypted at rest uh and in transit with the how the agent",
    "start": "1041160",
    "end": "1047918"
  },
  {
    "text": "communicates to the service uh and so in terms of getting things into cloudwatch logs uh ec2 has uh you",
    "start": "1047919",
    "end": "1054679"
  },
  {
    "text": "know you just install the agent to get anything on ec2 instance up to cloudwatch logs uh cloud trail has",
    "start": "1054679",
    "end": "1060640"
  },
  {
    "text": "native integration you can push your cloud trail logs up to cloudwatch logs uh Lambda also has uh Native integration",
    "start": "1060640",
    "end": "1068039"
  },
  {
    "text": "with cloudwatch logs so if you want to see the output of your Lambda functions it automatically gets streamed to cloudwatch logs and uh ECS has a logging",
    "start": "1068039",
    "end": "1075360"
  },
  {
    "text": "agent as well so if you're using our container service uh you can just install the the logging uh agent and it",
    "start": "1075360",
    "end": "1081640"
  },
  {
    "text": "will send up to cloudwatch logs now how do we get data out of cloudwatch logs so you can export data uh into S3 and then",
    "start": "1081640",
    "end": "1089400"
  },
  {
    "text": "from S3 you can import it into something else like uh Splunk or some partner solution once it's an S3 you can do a",
    "start": "1089400",
    "end": "1094799"
  },
  {
    "text": "lot of things with it uh you can also uh have your cloudwatch logs uh trigger",
    "start": "1094799",
    "end": "1101360"
  },
  {
    "text": "Lambda functions uh you can also have your cloudwatch logs streamed directly to our",
    "start": "1101360",
    "end": "1109000"
  },
  {
    "text": "manage the elastic search service or you can also do the same thing but with an elk stack where you manage it as well",
    "start": "1109000",
    "end": "1115840"
  },
  {
    "text": "and lastly you can send cloudwatch logs to Kinesis which is our um live streaming",
    "start": "1115840",
    "end": "1122559"
  },
  {
    "text": "service so let's just quickly summarize what Lambda is before diving a little",
    "start": "1122559",
    "end": "1127919"
  },
  {
    "text": "bit deeper here so again Lambda is our serverless compute uh Service uh it the",
    "start": "1127919",
    "end": "1133440"
  },
  {
    "text": "way it works is that it currently supports Java node.js uh Python and and",
    "start": "1133440",
    "end": "1139400"
  },
  {
    "text": "c and so you basically write a function in any of those languages you send it to",
    "start": "1139400",
    "end": "1144880"
  },
  {
    "text": "the Lambda service and then you executed either on a schedule uh arbitrarily or",
    "start": "1144880",
    "end": "1149960"
  },
  {
    "text": "based off of an event so an event would be uh something being dropped in S3 or",
    "start": "1149960",
    "end": "1155120"
  },
  {
    "text": "you can trigger it off of an SNS uh function or an SNS notification uh so there's a lot of events that can trigger",
    "start": "1155120",
    "end": "1161559"
  },
  {
    "text": "a l a function to be executed so we see customers building serverless apps so",
    "start": "1161559",
    "end": "1167000"
  },
  {
    "text": "that you have an app that has like link Lambda and Dynamo DB for its persistent tier and S3 as well and so then you",
    "start": "1167000",
    "end": "1172840"
  },
  {
    "text": "don't even need to spin up any instances but in this case we're just going to talk about how to use Lambda to take",
    "start": "1172840",
    "end": "1178360"
  },
  {
    "text": "actions uh based on your uh alarms so first of all let's go through",
    "start": "1178360",
    "end": "1184720"
  },
  {
    "text": "our first use case here so let's talk about how do you centralize logs from an elb um using S3 bucket triggers so if",
    "start": "1184720",
    "end": "1193240"
  },
  {
    "text": "you use if you need web access logs right typically you have those access logs they're on each instance if you",
    "start": "1193240",
    "end": "1199159"
  },
  {
    "text": "have an auto scaling group you can have three instances you can have nine instances you can have 100 instances depending on the traffic and so it's not",
    "start": "1199159",
    "end": "1205760"
  },
  {
    "text": "really convenient to have your web access logs spread out across all those instances because you have to either be",
    "start": "1205760",
    "end": "1211880"
  },
  {
    "text": "you know um I mean you can run the the cloudwatch logs agent but it's still",
    "start": "1211880",
    "end": "1217120"
  },
  {
    "text": "it's an extra agent that you have to run so what you can do instead is uh if you have an elb in front of all your web",
    "start": "1217120",
    "end": "1222880"
  },
  {
    "text": "servers or an ALB uh you basically can enable uh you can enable",
    "start": "1222880",
    "end": "1229360"
  },
  {
    "text": "it has a logging feature those there generates web access logs those access logs are dumped into an S3 bucket if",
    "start": "1229360",
    "end": "1236159"
  },
  {
    "text": "you're choosing uh so how do we get something from an S3 bucket into",
    "start": "1236159",
    "end": "1241280"
  },
  {
    "text": "cloudwatch log so that we can search it and filter it and have a central place where it's all stored",
    "start": "1241280",
    "end": "1247559"
  },
  {
    "text": "so what we do here is again we have the elb delivers logs to S3 bucket um S3 has",
    "start": "1247559",
    "end": "1254600"
  },
  {
    "text": "this feature called event notification so you can be notified of an event",
    "start": "1254600",
    "end": "1259960"
  },
  {
    "text": "anytime an object is created deleted updated any of that so in this case we're going to have an event",
    "start": "1259960",
    "end": "1265400"
  },
  {
    "text": "notification that triggers from an object's creation so when the log file gets dropped into the S3 bucket it's",
    "start": "1265400",
    "end": "1271080"
  },
  {
    "text": "going to notify Lambda so Lambda knows hey something just got dropped into this S3 bucket Lambda is going to trigger a",
    "start": "1271080",
    "end": "1278039"
  },
  {
    "text": "function the function is going to read from the elb log and publish the contents of that log uh from S3 into",
    "start": "1278039",
    "end": "1284919"
  },
  {
    "text": "cloudwatch logs so the way this works is we would Prov three instances um running",
    "start": "1284919",
    "end": "1291120"
  },
  {
    "text": "Apache or is or enginex or whatever web server you prefer uh we would configure",
    "start": "1291120",
    "end": "1296880"
  },
  {
    "text": "a load balancer could be an elb it could be an ALB it doesn't matter in this case it's an ALB so application load balancer",
    "start": "1296880",
    "end": "1304480"
  },
  {
    "text": "uh we create a Target group that contains those three Apache web",
    "start": "1304480",
    "end": "1309840"
  },
  {
    "text": "servers we would then enable elb log delivery to S3 so again it's just a check mark you can also do all this in",
    "start": "1309840",
    "end": "1315960"
  },
  {
    "text": "the CLI so in here we created an e an S3 bucket called Apache elb logs we've",
    "start": "1315960",
    "end": "1322679"
  },
  {
    "text": "enabled the collection of those logs in there and then we're going to configure that S3 bucket where the logs are being",
    "start": "1322679",
    "end": "1329159"
  },
  {
    "text": "dropped to trigger a Lambda function so whenever something hits the Apache elb",
    "start": "1329159",
    "end": "1335159"
  },
  {
    "text": "logs bucket for the event type an object being created uh it's going to trigger",
    "start": "1335159",
    "end": "1340960"
  },
  {
    "text": "my S3 or my Lambda function and the Lambda function what it basically does",
    "start": "1340960",
    "end": "1346360"
  },
  {
    "text": "is it uses the S3 get object API to download the log file and read it and it",
    "start": "1346360",
    "end": "1352279"
  },
  {
    "text": "then uses the cloudwatch logs put logs event API uh to post that log into",
    "start": "1352279",
    "end": "1359440"
  },
  {
    "text": "cloudwatch logs uh don't worry about um you know this code it's uh it's on our",
    "start": "1359440",
    "end": "1364520"
  },
  {
    "text": "GitHub page there's going to be a link at the end of the presentation where you can download all of it and so then we go",
    "start": "1364520",
    "end": "1371120"
  },
  {
    "text": "to this uh our web page here so that generates some logs because we've gone to the web page and generated some",
    "start": "1371120",
    "end": "1376480"
  },
  {
    "text": "access logs and we verif that those logs are now indeed in S3 they get delivered",
    "start": "1376480",
    "end": "1381760"
  },
  {
    "text": "in a minute or so basically to S3 uh and then we go into our cloudwatch",
    "start": "1381760",
    "end": "1389000"
  },
  {
    "text": "logs console and now we not only are they in S3 they're actually in cloudwatch logs as well so that's great",
    "start": "1389000",
    "end": "1394720"
  },
  {
    "text": "so now we have centralized logging all set up what are some useful things that we can do with it well we can filter so",
    "start": "1394720",
    "end": "1402400"
  },
  {
    "text": "I here I'm filtering by gets so I don't care about puts I just want HTTP gets for the last day",
    "start": "1402400",
    "end": "1408960"
  },
  {
    "text": "so I can do that pretty easily my query is just get HTTP uh I can create a pattern that",
    "start": "1408960",
    "end": "1416559"
  },
  {
    "text": "requests things like what is a request with more than one millisecond of latency so I create a filter pattern and",
    "start": "1416559",
    "end": "1424159"
  },
  {
    "text": "it shows me only those entries and logs where it's higher latency than 1",
    "start": "1424159",
    "end": "1429679"
  },
  {
    "text": "millisecond and so now I want to create a metric so I want to know if there's a lot of requests that create more than",
    "start": "1429679",
    "end": "1435200"
  },
  {
    "text": "one uh that have more than one millisecond of latency and so I can create a metric I write a filter pattern",
    "start": "1435200",
    "end": "1441320"
  },
  {
    "text": "for it and so now it's going to trigger that uh that metric so I can click on the metric and see how many times has",
    "start": "1441320",
    "end": "1446960"
  },
  {
    "text": "this happened and then I can view a graph for EB latency and so then uh what I can do",
    "start": "1446960",
    "end": "1453279"
  },
  {
    "text": "from here is create an alarm off of this and I can do various actions off the alarm and I'll show you how to do that",
    "start": "1453279",
    "end": "1459159"
  },
  {
    "text": "next and so just some key takeaways here um anything in S3 can be streamed into",
    "start": "1459159",
    "end": "1465840"
  },
  {
    "text": "cloudwatch logs so it doesn't have to be an EB log could be a a cloudfront log could be any anything in general that",
    "start": "1465840",
    "end": "1473000"
  },
  {
    "text": "gets sent to an S3 bucket and it's pretty easy to send things to S3 in general uh and then you can search and",
    "start": "1473000",
    "end": "1479000"
  },
  {
    "text": "extract metrics from those logs in near real time so the the it doesn't take a",
    "start": "1479000",
    "end": "1484640"
  },
  {
    "text": "long time for something to show up in cloud cloudwatch logs so now let's talk about customizing",
    "start": "1484640",
    "end": "1490559"
  },
  {
    "text": "alarms so you get an alarm and you don't want to know that",
    "start": "1490559",
    "end": "1496559"
  },
  {
    "text": "hey something this alarm is triggered you want to know what exactly has what what has actually triggered this alarm",
    "start": "1496559",
    "end": "1502760"
  },
  {
    "text": "uh what's information that I need in the alarm text for it to be useful for you",
    "start": "1502760",
    "end": "1508679"
  },
  {
    "text": "so what we're going to do here is we have cloudwatch logs uh we have an alarm configured in",
    "start": "1508679",
    "end": "1514640"
  },
  {
    "text": "cloudwatch logs that triggers an SNS topic SNS is our simple notification service and the",
    "start": "1514640",
    "end": "1522559"
  },
  {
    "text": "SNS topic triggers a Lambda function and Lambda what it does is it looks at that",
    "start": "1522559",
    "end": "1529360"
  },
  {
    "text": "specific alarm it gets the filtered logs from cloudwatch logs and it emails you",
    "start": "1529360",
    "end": "1536520"
  },
  {
    "text": "the logs the actual logs that triggered the alarm in your email now it doesn't",
    "start": "1536520",
    "end": "1541679"
  },
  {
    "text": "have to be email I could also have Lambda you know post to my slack or my",
    "start": "1541679",
    "end": "1546760"
  },
  {
    "text": "hip chat or really do anything it's API driven anything has an API you can trigger with it so you can deliver those",
    "start": "1546760",
    "end": "1552279"
  },
  {
    "text": "logs on some other method as well and so what we're going to do here is we are",
    "start": "1552279",
    "end": "1557320"
  },
  {
    "text": "going to provision an ec2 instance with Tomcat running on it uh we're going to",
    "start": "1557320",
    "end": "1562880"
  },
  {
    "text": "install the cloudwatch logs agent on that instance and we're going to verify",
    "start": "1562880",
    "end": "1567919"
  },
  {
    "text": "that that agent is actually sending the uh Tomcat logs to cloudwatch",
    "start": "1567919",
    "end": "1573320"
  },
  {
    "text": "logs and then we're going to configure a pattern so in this pattern we're looking for unauthorized access requests so 401",
    "start": "1573320",
    "end": "1580039"
  },
  {
    "text": "status code 401s so we're going to create a filter pattern to only extract four",
    "start": "1580039",
    "end": "1585240"
  },
  {
    "text": "ones uh we're going to create a metric for that filter uh",
    "start": "1585240",
    "end": "1590279"
  },
  {
    "text": "pattern uh and we're going to create an alarm for that metric so if I get more than five uh unauthorized uh accesses or",
    "start": "1590279",
    "end": "1598159"
  },
  {
    "text": "4 ones in 5 minutes uh it's going to trigger an",
    "start": "1598159",
    "end": "1603399"
  },
  {
    "text": "alarm the alarm trigger the way it works is it's going to send a notification to an SNS topic now again I'll show you",
    "start": "1603399",
    "end": "1610480"
  },
  {
    "text": "what that topic text looks like it's not super useful it you know it shows you hey this alarm has been triggered it doesn't show you what's actually going",
    "start": "1610480",
    "end": "1615960"
  },
  {
    "text": "on so what we're going to do next is we're going to trigger we're going to create a Lambda function that Lambda function is going to be triggered by",
    "start": "1615960",
    "end": "1621919"
  },
  {
    "text": "that SNS topic so the SNS topic that that is triggered by my cloudwatch logs alarm uh is going to trigger this Lambda",
    "start": "1621919",
    "end": "1629200"
  },
  {
    "text": "function and the Lambda function it's going to get the metric information by using the uh cloudwatch logs describe",
    "start": "1629200",
    "end": "1636679"
  },
  {
    "text": "metric filters API it is going to get the relevant log data so it's going to pull the actual",
    "start": "1636679",
    "end": "1642720"
  },
  {
    "text": "log data using again another API and cloudwatch logs and that is going to use",
    "start": "1642720",
    "end": "1648399"
  },
  {
    "text": "SCS it's going to use SCS as API to email me that relevant log data so to",
    "start": "1648399",
    "end": "1654960"
  },
  {
    "text": "actually trigger this we would go to our server trigger a 401 uh so this is what the alarm looks",
    "start": "1654960",
    "end": "1661919"
  },
  {
    "text": "like that you get from SNS so because you can see it says oh well your threshold for an alarm has been crossed",
    "start": "1661919",
    "end": "1668760"
  },
  {
    "text": "so we're going to email you this alarm so you know what the monitored metric is and that it's been triggered not much",
    "start": "1668760",
    "end": "1675320"
  },
  {
    "text": "else that's not super useful but then when you get the email from the Lambda function that's far more useful so here",
    "start": "1675320",
    "end": "1682120"
  },
  {
    "text": "we've configured it so that it shows me the alarm name it can link to a runbook",
    "start": "1682120",
    "end": "1687360"
  },
  {
    "text": "I have so if I know this error shows up you know uh kind of frequently you can have a runbook ready to go for your",
    "start": "1687360",
    "end": "1693600"
  },
  {
    "text": "operators to click on to see what to do in this case you can include things I blanked it out here uh but you can put",
    "start": "1693600",
    "end": "1699320"
  },
  {
    "text": "your specific account ID so a lot of our customers have multiple ads accounts which region it's in and then you can",
    "start": "1699320",
    "end": "1705240"
  },
  {
    "text": "actually dive deep into the actual log so we see what instance has triggered the log we see what IP address has",
    "start": "1705240",
    "end": "1711080"
  },
  {
    "text": "triggered this event and then you can do something like um you know as another action after this you can probably",
    "start": "1711080",
    "end": "1716600"
  },
  {
    "text": "script it to use our web application firewall service and block this IP address automatically right so it gets",
    "start": "1716600",
    "end": "1721679"
  },
  {
    "text": "blocked from even reaching the web servers so there's all kinds of things you can do here and so some key",
    "start": "1721679",
    "end": "1726799"
  },
  {
    "text": "takeaways here are that alarms can be customized to you know add specific details about your actual issue uh so",
    "start": "1726799",
    "end": "1735440"
  },
  {
    "text": "when you see a spike in a metric you can see what's triggering that Spike and the Lambda function can be extended to add",
    "start": "1735440",
    "end": "1742080"
  },
  {
    "text": "in other information that you would find useful such as runbooks or really anything else in that notification and",
    "start": "1742080",
    "end": "1748080"
  },
  {
    "text": "actually in practice I see this being done way more in as like chat Ops so in",
    "start": "1748080",
    "end": "1753440"
  },
  {
    "text": "things like slack notifications than emails because emails can be overwhelming and you know putting it in your slack is probably a little bit more",
    "start": "1753440",
    "end": "1759440"
  },
  {
    "text": "useful so lastly let's talk about log analysis so the problem here is that we",
    "start": "1759440",
    "end": "1767640"
  },
  {
    "text": "want to analyze some of our logs um but we don't want to leave the cluster running all the time so um you",
    "start": "1767640",
    "end": "1775679"
  },
  {
    "text": "can configure your cloudwatch logs to stream out to an Amazon elastic search cluster it just built in you can right",
    "start": "1775679",
    "end": "1782320"
  },
  {
    "text": "click on any log stream and say I want to stream out to elastic search but that assumes that your elastic search cluster",
    "start": "1782320",
    "end": "1788640"
  },
  {
    "text": "is running all the time you might not need it to run all the time uh so you want to save money so you want to have a temporary cluster",
    "start": "1788640",
    "end": "1795480"
  },
  {
    "text": "so you also don't want to spin up your own elastic search cluster it's allot",
    "start": "1795480",
    "end": "1800519"
  },
  {
    "text": "undened heavy lifting you don't want to to manage that cluster maintain it up time um and so you want to build an on-",
    "start": "1800519",
    "end": "1808519"
  },
  {
    "text": "demand Amazon elastic search cluster and you want to analyze not just like the live stream of all your data you want to",
    "start": "1808519",
    "end": "1814600"
  },
  {
    "text": "analyze data from a specific time period so you had some incident happen you only need to have certain logs so the way",
    "start": "1814600",
    "end": "1820440"
  },
  {
    "text": "that we would do this is uh we would export logs from a specific time frame from cloudwatch logs to S3 we would",
    "start": "1820440",
    "end": "1827000"
  },
  {
    "text": "again use the same object uh create event notification to Lambda Lambda would then has to take those logs and",
    "start": "1827000",
    "end": "1833760"
  },
  {
    "text": "transform them into Json so that they're useful for elastic search so we're going to have Lambda do that and send them to",
    "start": "1833760",
    "end": "1840039"
  },
  {
    "text": "an elastic search service so in this case what we're going to do here is VPC",
    "start": "1840039",
    "end": "1846000"
  },
  {
    "text": "flow logs so VPC flow logs they are logs basically uh Network logs what's going",
    "start": "1846000",
    "end": "1851679"
  },
  {
    "text": "on your VPC so they have things in them like uh the source IP address",
    "start": "1851679",
    "end": "1856919"
  },
  {
    "text": "destination IP address uh Port protocol basically everything except the contents of the packet in",
    "start": "1856919",
    "end": "1862600"
  },
  {
    "text": "terms of network data that going on in your VPC so we're going to configure uh VPC flow logs in this case we're not you",
    "start": "1862600",
    "end": "1869279"
  },
  {
    "text": "can configure them for your whole VPC uh we're just going to configure them for specific elastic network interface so we",
    "start": "1869279",
    "end": "1875159"
  },
  {
    "text": "see some weird traffic on an instance and we want to investigate that instance's Network traffic so we're going to turn them on uh and as soon as",
    "start": "1875159",
    "end": "1883600"
  },
  {
    "text": "you turn them on they VPC flow logs automatically work with cloudwatch logs so this is the data that you would get",
    "start": "1883600",
    "end": "1889279"
  },
  {
    "text": "so again this is Source IP address destination IP address um whether the",
    "start": "1889279",
    "end": "1895200"
  },
  {
    "text": "request was a accept it or not um so on and so then we're going to create an",
    "start": "1895200",
    "end": "1900559"
  },
  {
    "text": "elastic search cluster and again this can all be scripted as well so we're going to create a an elastic search cluster with just one node uh it's going",
    "start": "1900559",
    "end": "1907760"
  },
  {
    "text": "to be temporary and so then what we're going to do is we're going to read the",
    "start": "1907760",
    "end": "1912880"
  },
  {
    "text": "flow logs from S3 by again using this get object uh API so our Lambda function",
    "start": "1912880",
    "end": "1918799"
  },
  {
    "text": "is going to read the actual flow logs it's going to transform the flow logs into",
    "start": "1918799",
    "end": "1923880"
  },
  {
    "text": "Json and it's going to insert the logs into elastic search by going to its HTTP",
    "start": "1923880",
    "end": "1929960"
  },
  {
    "text": "end point and so once that's all set up all we have to do is again this is just built in you",
    "start": "1929960",
    "end": "1936679"
  },
  {
    "text": "can right click on any uh any cloudwatch log stream and Export it within a",
    "start": "1936679",
    "end": "1942200"
  },
  {
    "text": "certain time range out to an S3 bucket and that S3 bucket can be in your account it could be in another either",
    "start": "1942200",
    "end": "1948880"
  },
  {
    "text": "account and so then uh it's exported to S3 so we can see it here this the way it",
    "start": "1948880",
    "end": "1954679"
  },
  {
    "text": "looks like there's a different folder for each and so as soon as that happens it gets injected into elastic search and",
    "start": "1954679",
    "end": "1960679"
  },
  {
    "text": "that's what it looks like so this is the raw data in elastic search and elastic search gives you a",
    "start": "1960679",
    "end": "1966320"
  },
  {
    "text": "lot of nice stuff like different dashboards uh there's some on our GitHub page there's some uh builtin uh",
    "start": "1966320",
    "end": "1973000"
  },
  {
    "text": "dashboards you can download for Cabana um to load into your elastic search to make sense of things like flow logs and",
    "start": "1973000",
    "end": "1980039"
  },
  {
    "text": "again here's another summary of the um dashboard so you can get things like top 10 destination or Source IP addresses um",
    "start": "1980039",
    "end": "1987120"
  },
  {
    "text": "all kinds of useful stuff here that would be hard to just get from the ra loog files and so the key takeaway here",
    "start": "1987120",
    "end": "1993679"
  },
  {
    "text": "is that we can send historical data uh within a within any given time frame on",
    "start": "1993679",
    "end": "1999559"
  },
  {
    "text": "demand to the elastic search Service uh this reduces cost because I don't have",
    "start": "1999559",
    "end": "2005000"
  },
  {
    "text": "my elastic search cluster running all the time it because it's a managed service I don't have to worry about like manually setting up elastic search I can",
    "start": "2005000",
    "end": "2011440"
  },
  {
    "text": "just spin it up kill it when I need to and it makes troubleshooting a lot easier for you so just to recap before I",
    "start": "2011440",
    "end": "2018440"
  },
  {
    "text": "take some questions here um so monitoring is still really hard the tools I've talked about here hopefully",
    "start": "2018440",
    "end": "2024799"
  },
  {
    "text": "can make it easier for you uh and cloudwatch logs and Lambda are both",
    "start": "2024799",
    "end": "2030240"
  },
  {
    "text": "powerful tools they're very open-ended tools especially Lambda that will allow you to do a lot of flexible things uh to",
    "start": "2030240",
    "end": "2037360"
  },
  {
    "text": "make of your logs so just some useful links um we got full documentation for",
    "start": "2037360",
    "end": "2044840"
  },
  {
    "text": "uh for cloudwatch and and Lambda up on our website uh these uh Lambda functions",
    "start": "2044840",
    "end": "2050800"
  },
  {
    "text": "that I've used here they're on our GitHub page so if you just you know if you don't want the full URL just go to",
    "start": "2050800",
    "end": "2056440"
  },
  {
    "text": "our it's github.com AWS laabs we've got a bunch of repos in there if you just search for a cloudwatch logs in the",
    "start": "2056440",
    "end": "2062679"
  },
  {
    "text": "repos there's all kinds of useful stuff there uh um we also have a Blog where we",
    "start": "2062679",
    "end": "2069919"
  },
  {
    "text": "post uh both you know example use cases and uh and also um you know customer use",
    "start": "2069919",
    "end": "2076919"
  },
  {
    "text": "cases uh what customers are doing with Cloud watch and Lambda and so that's all I have for you",
    "start": "2076919",
    "end": "2083398"
  },
  {
    "text": "so just remember to complete your evaluations and uh I'm just going to take questions off to the side so if",
    "start": "2083399",
    "end": "2088919"
  },
  {
    "text": "anybody has a question just come up here right but thank you for thank you for coming and enjoy the rest of the summit",
    "start": "2088919",
    "end": "2096598"
  }
]