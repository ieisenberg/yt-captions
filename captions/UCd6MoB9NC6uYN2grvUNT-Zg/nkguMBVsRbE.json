[
  {
    "text": "good afternoon everyone thank you for coming I really appreciate it this is my third reinventing I'm always like",
    "start": "240",
    "end": "6410"
  },
  {
    "text": "staggered by the size of this conference every time it's amazing so again thanks",
    "start": "6410",
    "end": "12660"
  },
  {
    "text": "so much for coming my name's Brandon Chavez I'm a Solutions Architect and I work on the Amazon Partner Network team so that means I work with our technology",
    "start": "12660",
    "end": "19710"
  },
  {
    "text": "partners to help architect solutions that solve problems for our customers so",
    "start": "19710",
    "end": "26630"
  },
  {
    "text": "today what we want to talk about is your options for managing containers on AWS",
    "start": "26630",
    "end": "31740"
  },
  {
    "text": "and there's quite a few of them so we're gonna cover some solutions that allow",
    "start": "31740",
    "end": "37500"
  },
  {
    "text": "you to manage containers at scale and see how you can easily get started with these options so it's my intention to",
    "start": "37500",
    "end": "44370"
  },
  {
    "text": "give you the information you need to basically get started on your journey and evaluating these different options",
    "start": "44370",
    "end": "49890"
  },
  {
    "text": "and I really hope to present this in a very objective way and leave out really any of any subjective opinions of my own",
    "start": "49890",
    "end": "55680"
  },
  {
    "text": "because I don't believe it's possible for me to make recommendations that are applicable for you know any of you in",
    "start": "55680",
    "end": "61230"
  },
  {
    "text": "this crowd right now there's just too many different use cases and everyone has to make this decision on their own",
    "start": "61230",
    "end": "66380"
  },
  {
    "text": "so what I want to do is kind of get started by understanding what is orchestration and why you might need it",
    "start": "66380",
    "end": "73560"
  },
  {
    "text": "and maybe give some context for why we thought this talk was necessary at all in the first place right so let's go",
    "start": "73560",
    "end": "80280"
  },
  {
    "text": "ahead and get started here so when we think about running containers on AWS",
    "start": "80280",
    "end": "85710"
  },
  {
    "text": "very on and very very early on in that journey you might think this is just a really straightforward thing we've all",
    "start": "85710",
    "end": "90780"
  },
  {
    "text": "kind of used docker before if you're sitting in this room probably you've played with docker CLI you might have built a composed file you might have",
    "start": "90780",
    "end": "97259"
  },
  {
    "text": "built your own image and so early on you might just think you know I just got to run some containers on some ec2",
    "start": "97259",
    "end": "103860"
  },
  {
    "text": "instances right I spin up some instances I log into the instances I spin up the containers what's the big deal",
    "start": "103860",
    "end": "110340"
  },
  {
    "text": "and you probably really like the deployment flexibility and the consistency of the packaging model and",
    "start": "110340",
    "end": "117240"
  },
  {
    "text": "you really want to leverage this in a way that also kind of dovetails with the advantages of running containers on the",
    "start": "117240",
    "end": "122490"
  },
  {
    "text": "cloud so I think early on in that",
    "start": "122490",
    "end": "128849"
  },
  {
    "text": "journey it's really easy you're getting started you run couple of containers you can manage them",
    "start": "128849",
    "end": "136680"
  },
  {
    "text": "manually you might even write your own orchestration I talked to a lot of customers who do things like well we",
    "start": "136680",
    "end": "142020"
  },
  {
    "text": "just read it all in CloudFormation and we do our orchestration that way and it seems to work you know right now for the scale that we're at but we're worried",
    "start": "142020",
    "end": "148560"
  },
  {
    "text": "about how it might scale in the future because we're expecting you know rapid growth of our service so maybe we need",
    "start": "148560",
    "end": "154710"
  },
  {
    "text": "something purpose-built for this we're not sure and that's a good thing to start thinking about early on because",
    "start": "154710",
    "end": "160430"
  },
  {
    "text": "once your deployments start looking like this I think it's safe to say once you",
    "start": "160430",
    "end": "166380"
  },
  {
    "text": "are once you're running a lot of machines and a lot of containers things get a lot more difficult and that's",
    "start": "166380",
    "end": "171480"
  },
  {
    "text": "because this generally implies that you're managing a cluster you're running a cluster of instances and cluster",
    "start": "171480",
    "end": "177600"
  },
  {
    "text": "management isn't the most trivial thing to do so I would say I would wager that",
    "start": "177600",
    "end": "184440"
  },
  {
    "text": "you're probably not writing your own cluster management solution and I've also wager that it's probably not the best way for you to spend your",
    "start": "184440",
    "end": "190260"
  },
  {
    "text": "engineering cycles you don't need to reinvent the wheel you don't need to go and build your own orchestration platform you can totally do this with",
    "start": "190260",
    "end": "197250"
  },
  {
    "text": "bash scripts and CloudFormation and you know solve some of these problems on your own but I'd recommend against it if I may so",
    "start": "197250",
    "end": "206360"
  },
  {
    "text": "you need a way basically to intelligently place containers on your instances that have the resources",
    "start": "206360",
    "end": "212430"
  },
  {
    "text": "available to run those containers so in order to do this you have to know the state of everything in your system so",
    "start": "212430",
    "end": "219750"
  },
  {
    "text": "that means tracking and aggregating all the individual resources from all the machines in your cluster and then making",
    "start": "219750",
    "end": "226200"
  },
  {
    "text": "them available maybe the common simple API to run your jobs so some information",
    "start": "226200",
    "end": "232290"
  },
  {
    "text": "you might have to track that would include you know that machine up there in the corner is it up and running what",
    "start": "232290",
    "end": "239610"
  },
  {
    "text": "about that machine down there does it have the resources needed to run my job what about that job I submitted earlier",
    "start": "239610",
    "end": "245520"
  },
  {
    "text": "this day is it still running what are the results of the task did a task down",
    "start": "245520",
    "end": "250980"
  },
  {
    "text": "here terminate unexpectedly how do I figure out what happened do I have to log into that machine and look at logs directly",
    "start": "250980",
    "end": "256790"
  },
  {
    "text": "so there's a lot of things that happen as you as you grow in scale and it can be pretty daunting so we really need to",
    "start": "256790",
    "end": "262560"
  },
  {
    "text": "find an appropriate tool to handle the for us so you know early on in your",
    "start": "262560",
    "end": "270229"
  },
  {
    "text": "journey you're looking around for options and it's you know quite literally chaos out there and there's like a giant cephalopod throwing your",
    "start": "270229",
    "end": "276889"
  },
  {
    "text": "containers into the water and other animals playing next to like a commuter rail train so it's very dangerous right",
    "start": "276889",
    "end": "284470"
  },
  {
    "text": "so AWS is probably out here somewhere in the middle of your container strategy",
    "start": "284800",
    "end": "290270"
  },
  {
    "text": "and you might not be sure kind of how all these things fit together how do I get started and this can lead to quite a",
    "start": "290270",
    "end": "295819"
  },
  {
    "text": "bit of frustration right early on it can be difficult to figure out where to start on which product meets your meets",
    "start": "295819",
    "end": "301580"
  },
  {
    "text": "your needs so I would like to you know console you just a little bit and",
    "start": "301580",
    "end": "307789"
  },
  {
    "text": "suggest that you're not not alone here this is not a reflection on your capabilities or intelligence is a very",
    "start": "307789",
    "end": "313460"
  },
  {
    "text": "reasonable problem to have you know I might I'm focused on this space and",
    "start": "313460",
    "end": "318560"
  },
  {
    "text": "there's new solutions that come up every other week and it kind of feels like you're really being left behind if you're not playing with like the new",
    "start": "318560",
    "end": "323659"
  },
  {
    "text": "hotness right you're not touching the coolest new container tools and you know what if I'm being left behind what if I",
    "start": "323659",
    "end": "329630"
  },
  {
    "text": "choose the wrong thing that's obsolete next week you know it's probably not gonna be the case we need to identify",
    "start": "329630",
    "end": "334669"
  },
  {
    "text": "what's good for our particular use cases here so you know I love this tweet from Brian Cantrell he's objectively a very",
    "start": "334669",
    "end": "340460"
  },
  {
    "text": "smart dude he's the CTO of giant and he posed this question some time last year you know are we at peak confusion yet",
    "start": "340460",
    "end": "347060"
  },
  {
    "text": "you know he believes no the confusion still accelerating every single time that you look at you know hacker news",
    "start": "347060",
    "end": "352610"
  },
  {
    "text": "there's something else out there that you're supposed to take a look at and if you're not using in production then oh my gosh",
    "start": "352610",
    "end": "357729"
  },
  {
    "text": "so valid question we need to get to the muck so maybe the first question that we",
    "start": "357729",
    "end": "363919"
  },
  {
    "text": "need to answer is where we gonna run our containers you might say okay we're gonna run them on AWS which is a great",
    "start": "363919",
    "end": "369620"
  },
  {
    "text": "choice and there's a lot of precedent for that there's a lot of customers running different container workloads in",
    "start": "369620",
    "end": "374840"
  },
  {
    "text": "AWS and a variety of different ways just about every way you can think of for a number of different use cases so what",
    "start": "374840",
    "end": "382580"
  },
  {
    "text": "I'm gonna do is just leave this flow chart on the screen go get some lunch check back about 45 minutes if you guys",
    "start": "382580",
    "end": "387919"
  },
  {
    "text": "have questions and hopefully you're good so I don't really think I really don't",
    "start": "387919",
    "end": "393589"
  },
  {
    "text": "think this is a good approach I don't think like this has to be some sadistic choose your own adventure game we're",
    "start": "393589",
    "end": "399259"
  },
  {
    "text": "like the first step is literally evaluating your personal preference for pain and suffering yeah I don't think",
    "start": "399259",
    "end": "404780"
  },
  {
    "text": "that's a productive way of going about this so let's look at some of the options and see what we can do to help",
    "start": "404780",
    "end": "411979"
  },
  {
    "text": "alleviate some of this struggle for you early on and present some of the options that might answer some of these",
    "start": "411979",
    "end": "419210"
  },
  {
    "text": "questions for you so I think a really important aspect early on in this in",
    "start": "419210",
    "end": "425180"
  },
  {
    "text": "this process is understanding that AWS has a massive a really robust partner",
    "start": "425180",
    "end": "432500"
  },
  {
    "text": "ecosystem that can help you with a variety of different challenges during your container journey so because I work",
    "start": "432500",
    "end": "438919"
  },
  {
    "text": "for the partner ecosystem this is my chance for kind of doting on some of the partners here and talking about the cool things that they're doing if we walk",
    "start": "438919",
    "end": "446509"
  },
  {
    "text": "through some of the categories here the first category here is foundation and that's partners like maybe docker who",
    "start": "446509",
    "end": "451909"
  },
  {
    "text": "build the docker engine that you know you know and love and they build an orchestration framework and they build a registry or maybe core OS would be in",
    "start": "451909",
    "end": "459080"
  },
  {
    "text": "foundation also they build container runtime called rocket they build an operating system optimized for running",
    "start": "459080",
    "end": "464150"
  },
  {
    "text": "containers they also build a container orchestration framework souza lots of",
    "start": "464150",
    "end": "470570"
  },
  {
    "text": "props for a logo that looks good on a black background in this case they build an OS optimized for ec2 container",
    "start": "470570",
    "end": "476389"
  },
  {
    "text": "service Rancher builds an OS optimized for containers they also build an",
    "start": "476389",
    "end": "482690"
  },
  {
    "text": "orchestration framework that works in AWS in the monitoring category here we have companies like sista and data dog",
    "start": "482690",
    "end": "489949"
  },
  {
    "text": "and their specialty is giving you very granular metrics about your containers with some historical perspective because",
    "start": "489949",
    "end": "496729"
  },
  {
    "text": "your containers change to come up and down so frequently and they're very dynamic in nature it might be hard to",
    "start": "496729",
    "end": "502699"
  },
  {
    "text": "correlate logs for a particular error you were seeing yesterday and that container hasn't existed for 18 hours right so data dog or sista allow you to",
    "start": "502699",
    "end": "510169"
  },
  {
    "text": "kind of retro actively look and correlate errors and and metrics with",
    "start": "510169",
    "end": "515510"
  },
  {
    "text": "maybe what was happening in your infrastructure at that time so looking at the container looking at the application level logs in CI CD you know",
    "start": "515510",
    "end": "523039"
  },
  {
    "text": "it's in this journey it's it eventually becomes very important to figure out a continuous integration and continuous deployment strategy and we have a number",
    "start": "523039",
    "end": "530060"
  },
  {
    "text": "of partners that help you with that shippable Solano labs circle CI maybe",
    "start": "530060",
    "end": "535640"
  },
  {
    "text": "cloud leaves are the enterprise Jenkins company they're run by the founder of Jenkins the open source Jenkins and they",
    "start": "535640",
    "end": "542510"
  },
  {
    "text": "have you know integrations with a variety of AWS services they can help you deploy directly ECS or mesa Sphere",
    "start": "542510",
    "end": "549910"
  },
  {
    "text": "kubernetes whatever it is that you're choosing to run your containers on in the platform as a service category we",
    "start": "549910",
    "end": "555890"
  },
  {
    "text": "have companies like con Vox which is a a",
    "start": "555890",
    "end": "562130"
  },
  {
    "text": "pass offering that kind of helps you build containerized applications on top of multiple AWS services so it runs on",
    "start": "562130",
    "end": "568610"
  },
  {
    "text": "ECS underneath for running your containers and then it also hooks into other AWS services that are useful like",
    "start": "568610",
    "end": "573830"
  },
  {
    "text": "km/s or RDS for persistence and kind of abstract sus all away under a very",
    "start": "573830",
    "end": "579050"
  },
  {
    "text": "convenient API so this is this feels like a little bit of a digression in this talk and it is but I think the",
    "start": "579050",
    "end": "585590"
  },
  {
    "text": "point I'm really trying to get get through here is that the AWS partner ecosystem is here for you and if there's",
    "start": "585590",
    "end": "592010"
  },
  {
    "text": "a problem you need to solve in terms of containers chances are one of these partners has something that can help you",
    "start": "592010",
    "end": "597560"
  },
  {
    "text": "out and this is critical you don't have to you know blaze your own Trail every single time you encounter a new problem",
    "start": "597560",
    "end": "604209"
  },
  {
    "text": "so let's get into the actual meat and potatoes of this presentation here let's talk about if you want to do if you want",
    "start": "604540",
    "end": "612470"
  },
  {
    "text": "an orchestration framework on AWS what are your primary options and I've chose four to cover today and I think these",
    "start": "612470",
    "end": "618590"
  },
  {
    "text": "are the four most common that we see on AWS in no particular order here we'll cover Amazon ECS or ec2 container",
    "start": "618590",
    "end": "624560"
  },
  {
    "text": "service which is the service we've built for running containers at scale we'll talk about a kubernetes distribution",
    "start": "624560",
    "end": "630410"
  },
  {
    "text": "which is tectonic by core OS and kubernetes is extremely popular in AWS",
    "start": "630410",
    "end": "636890"
  },
  {
    "text": "rapidly growing and a lot of customers are using this we're also going to talk about Mesa spheres DC OS which is based",
    "start": "636890",
    "end": "644000"
  },
  {
    "text": "on the Masons framework and then we're going to talk about docker datacenter which is the docker native offering so",
    "start": "644000",
    "end": "651620"
  },
  {
    "text": "maybe that we've talked about what we're gonna cover today let's address the original question of what is",
    "start": "651620",
    "end": "659240"
  },
  {
    "text": "orchestration what problems does it solve for me why do I need it",
    "start": "659240",
    "end": "664839"
  },
  {
    "text": "so if I was gonna read you a definition for my slide notes which I will I would define orchestration as continuous",
    "start": "664839",
    "end": "671449"
  },
  {
    "text": "automated scheduling coordination and management of complex systems of containerized components and the",
    "start": "671449",
    "end": "677449"
  },
  {
    "text": "resources they consume so looking at this diagram here it's good to envision",
    "start": "677449",
    "end": "684110"
  },
  {
    "text": "this as an orchestration layer that spans and aggregates your underlying compute resources and provides a layer",
    "start": "684110",
    "end": "690170"
  },
  {
    "text": "of abstraction here that helps you to deploy and manage your applications and services and not care so much about the",
    "start": "690170",
    "end": "697069"
  },
  {
    "text": "individual instances that are underneath the orchestration layer so the",
    "start": "697069",
    "end": "708559"
  },
  {
    "text": "functional result of having an orchestration layer is it exposes a single API to facilitate interaction",
    "start": "708559",
    "end": "715579"
  },
  {
    "text": "with your services and your cluster so you don't have to know about any of these resources here on the right hand",
    "start": "715579",
    "end": "720949"
  },
  {
    "text": "side you simply specify your job requirements generally in some declarative format and you call the",
    "start": "720949",
    "end": "728540"
  },
  {
    "text": "orchestration platforms API and the orchestration platform uses its knowledge of the resources that are",
    "start": "728540",
    "end": "733699"
  },
  {
    "text": "available and the constraints of your job and it finds an optimal place to run this work so if we expand the",
    "start": "733699",
    "end": "745519"
  },
  {
    "text": "orchestration layer a little bit and look at maybe break it out by what the three main responsibilities are",
    "start": "745519",
    "end": "750769"
  },
  {
    "text": "I think the first here would be service management so this would probably be a you know a general set of capabilities",
    "start": "750769",
    "end": "757670"
  },
  {
    "text": "to let you manage distributed applications at scale so some of the functionalities that are required here I",
    "start": "757670",
    "end": "763759"
  },
  {
    "text": "would say some logic to ensure application availability so maybe knowing the desired state of your",
    "start": "763759",
    "end": "769549"
  },
  {
    "text": "application and ensuring it stays in that state maybe I need for of this particular container to run across AZ's",
    "start": "769549",
    "end": "775669"
  },
  {
    "text": "those are some constraints I've set so I need my orchestration layer to help me maintain that desired state we also need",
    "start": "775669",
    "end": "782749"
  },
  {
    "text": "functionality to help us manage the life cycle of that service so helping us to upgrade or downgrade containers across",
    "start": "782749",
    "end": "789110"
  },
  {
    "text": "our fleet when we're making changes to our application and that's something that you might do dozens or hundreds of",
    "start": "789110",
    "end": "795019"
  },
  {
    "text": "times a day depending on how quickly deploy because when you deploy when you make new commits you'll be",
    "start": "795019",
    "end": "800170"
  },
  {
    "text": "building new containers and then deploying those containers to your infrastructure so you need a way of doing that in a streamlined fashion and",
    "start": "800170",
    "end": "807340"
  },
  {
    "text": "then finally we also need some way of managing the discoverability of this service so this could be by checking",
    "start": "807340",
    "end": "813130"
  },
  {
    "text": "containers into a load balancer maybe updating a key value store exposing",
    "start": "813130",
    "end": "819490"
  },
  {
    "text": "health checks for our service generally providing a way of saying like hey I'm over here I'm alive and I'm ready to",
    "start": "819490",
    "end": "825700"
  },
  {
    "text": "take traffic at this particular location either doing that in a public facing way or to other services in your",
    "start": "825700",
    "end": "832330"
  },
  {
    "text": "architecture so second is scheduling and",
    "start": "832330",
    "end": "838780"
  },
  {
    "text": "scheduling is the functionality in an orchestration platform that allows work to actually be given to the cluster so",
    "start": "838780",
    "end": "845740"
  },
  {
    "text": "there's a lot of different scheduling algorithms available but they all essentially boil down to I have a job it",
    "start": "845740",
    "end": "853600"
  },
  {
    "text": "has these requirements they might be resource specific requirements availability requirements like always",
    "start": "853600",
    "end": "861160"
  },
  {
    "text": "prefer a multi az deployment of work or something like an exclusivity",
    "start": "861160",
    "end": "866920"
  },
  {
    "text": "requirement which says that these two jobs that can never run together because they step on each other's toes and the",
    "start": "866920",
    "end": "872350"
  },
  {
    "text": "scheduler submits these requirements to the cluster manager so schedulers can also help you make changes to the state",
    "start": "872350",
    "end": "879190"
  },
  {
    "text": "of a currently running service and perform actions like upgrades or rollbacks and then determining how these",
    "start": "879190",
    "end": "885670"
  },
  {
    "text": "changes should happen so you might be able to give it some constraints about how you do a blue/green deploy how much",
    "start": "885670",
    "end": "891790"
  },
  {
    "text": "of a new container can roll out at a given time do you want to split your new deployment 50/50 with your old",
    "start": "891790",
    "end": "897880"
  },
  {
    "text": "deployments so you can see if you're introducing errors your scheduler provides the logic that allows you to do these kind of things schedulers also",
    "start": "897880",
    "end": "907150"
  },
  {
    "text": "generally understand scaling so that would be changing the amount of current running containers in your service in",
    "start": "907150",
    "end": "914950"
  },
  {
    "text": "order to handle load fluctuations and they might do this in a response to metrics that are admitted from like cloud watch for example",
    "start": "914950",
    "end": "922529"
  },
  {
    "text": "and then finally your orchestration platform provides resource management so",
    "start": "924500",
    "end": "929900"
  },
  {
    "text": "the resource manager will understand what resources are in its domain and then aggregate all these resources into",
    "start": "929900",
    "end": "936110"
  },
  {
    "text": "a single pool and we usually call a single pool a cluster and that cluster",
    "start": "936110",
    "end": "941240"
  },
  {
    "text": "might be divided into different parts for different workloads but the ultimate goal here of a resource manager is to",
    "start": "941240",
    "end": "946580"
  },
  {
    "text": "help you abstract away your entire data center or a bunch of instances and allocate resources to those to those",
    "start": "946580",
    "end": "954170"
  },
  {
    "text": "underlying instances in a really fine grained manner so if I can quote the mesas paper real quick cluster computing",
    "start": "954170",
    "end": "960800"
  },
  {
    "text": "frameworks simplify programming in the cluster so some of the resource attributes or some of the resources that",
    "start": "960800",
    "end": "968000"
  },
  {
    "text": "you might be allocating here are different attributes like memory CPU imports in some cases GPUs may be disks",
    "start": "968000",
    "end": "975880"
  },
  {
    "text": "these are the three primarily primary ones and then finally let's have a quick",
    "start": "975880",
    "end": "981170"
  },
  {
    "text": "blurb on schedulers different types of schedulers so I think scheduling is a pretty important concept to understand",
    "start": "981170",
    "end": "987070"
  },
  {
    "text": "because it's really central to all orchestration frameworks so a cluster",
    "start": "987070",
    "end": "992330"
  },
  {
    "text": "scheduler has a couple of different goals here one is to use the clusters resources efficiently it has to work",
    "start": "992330",
    "end": "998540"
  },
  {
    "text": "within the user-supplied constraints of your job and then it has to schedule applications rapidly to not leave them",
    "start": "998540",
    "end": "1005110"
  },
  {
    "text": "in a pending state so you can understand which resources are available in a given time scheduler should also have a degree",
    "start": "1005110",
    "end": "1011740"
  },
  {
    "text": "of fairness and then finally they should be robust to errors and highly available",
    "start": "1011740",
    "end": "1017220"
  },
  {
    "text": "so there's three main types here the first is a monolithic scheduler and this",
    "start": "1017220",
    "end": "1022390"
  },
  {
    "text": "is composed of a single scheduling agent that handles all of the requests and they're really commonly used in like",
    "start": "1022390",
    "end": "1028240"
  },
  {
    "text": "high-performance computing the monolithic scheduler handles one job at a time and it controls all the",
    "start": "1028240",
    "end": "1033400"
  },
  {
    "text": "underlying resources kubernetes is a type of advanced monolithic scheduler",
    "start": "1033400",
    "end": "1038579"
  },
  {
    "text": "there's also a type called a two-level scheduler which is what maysa uses and",
    "start": "1038580",
    "end": "1043839"
  },
  {
    "text": "this is where a resource manager basically partitions the underlying cluster and makes offers two different",
    "start": "1043840",
    "end": "1050380"
  },
  {
    "text": "schedulers based on these partitions so this means that something called pessimistic locking is used during off",
    "start": "1050380",
    "end": "1057919"
  },
  {
    "text": "which ensures that resources are not available that are not taken before a",
    "start": "1057919",
    "end": "1063830"
  },
  {
    "text": "job confirms that it needs those resources and then finally the last type here is shared state or optimistic",
    "start": "1063830",
    "end": "1070760"
  },
  {
    "text": "concurrency which is basically using an atomic locking mechanism and this allows multiple schedulers to see the full",
    "start": "1070760",
    "end": "1076760"
  },
  {
    "text": "state of the resources in the cluster and the way that this works is essentially the first up-to-date claim",
    "start": "1076760",
    "end": "1082580"
  },
  {
    "text": "on resources wins and secures those resources and this is the model that ECS uses so these concepts are really",
    "start": "1082580",
    "end": "1089540"
  },
  {
    "text": "outlined in depth from like Google's Borg paper which I suggest reading if you're looking for more information",
    "start": "1089540",
    "end": "1094549"
  },
  {
    "text": "about this but really I'm just bringing that up because it's a nice segue into our first orchestration framework that",
    "start": "1094549",
    "end": "1099590"
  },
  {
    "text": "we're going to talk about today which is kubernetes and kubernetes is not Borg but it was based upon a lot of the learnings from Google running their",
    "start": "1099590",
    "end": "1106940"
  },
  {
    "text": "applications at scale on the board platform so I think our customers a lot",
    "start": "1106940",
    "end": "1113450"
  },
  {
    "text": "of our customers love kubernetes there are huge numbers of kubernetes clusters running on AWS and it's really rapidly",
    "start": "1113450",
    "end": "1119150"
  },
  {
    "text": "rapidly growing to summarize kubernetes if you're unfamiliar it's a platform for",
    "start": "1119150",
    "end": "1124280"
  },
  {
    "text": "running microservices and it's as bare minimum I don't really want to tell you too much about like why you should or",
    "start": "1124280",
    "end": "1130880"
  },
  {
    "text": "shouldn't use it but if I have to call out some pluses or minuses here in this case I think in terms of plusses it",
    "start": "1130880",
    "end": "1137960"
  },
  {
    "text": "really excels that application lifecycle management I think it gives you a lot of nice control over how your application",
    "start": "1137960",
    "end": "1145160"
  },
  {
    "text": "lifecycle is defined and a lot of a lot of granular control over that I think the downsides is are that I",
    "start": "1145160",
    "end": "1152480"
  },
  {
    "text": "think the kubernetes community would generally agree that it's not necessarily easy to get started with or",
    "start": "1152480",
    "end": "1158720"
  },
  {
    "text": "to manage especially if you're a small team and you're unfamiliar with it they're making strides in the",
    "start": "1158720",
    "end": "1164390"
  },
  {
    "text": "open-source community to address this but you know right off the bat it's not always the easiest so talking about the",
    "start": "1164390",
    "end": "1172940"
  },
  {
    "text": "architecture here up on the top right at CD is the backend data store for the cluster which is a distributed key-value",
    "start": "1172940",
    "end": "1178580"
  },
  {
    "text": "store the API server here is kind of the core of the system and it's responsible",
    "start": "1178580",
    "end": "1185270"
  },
  {
    "text": "for processing requests and manipulating the underlying state objects and then the rest of the cluster management logic",
    "start": "1185270",
    "end": "1190940"
  },
  {
    "text": "are basically a bunch of microservices that work with the API server so on all",
    "start": "1190940",
    "end": "1196730"
  },
  {
    "text": "the nodes runs something called the couplet which is an agent there's also something called the coop proxy which",
    "start": "1196730",
    "end": "1202310"
  },
  {
    "text": "does things like connecting your apps to the outside world or forwarding requests to the right place in the cluster and",
    "start": "1202310",
    "end": "1207350"
  },
  {
    "text": "then of course there's docker as the runtime here your applications are",
    "start": "1207350",
    "end": "1212720"
  },
  {
    "text": "scheduled together as pods which can be one or more containers that run together in the same context so they all land in",
    "start": "1212720",
    "end": "1217970"
  },
  {
    "text": "the same instance right the same kubernetes worker and so kubernetes",
    "start": "1217970",
    "end": "1227210"
  },
  {
    "text": "upstream or the open source project itself it really provides you a bunch of things right out of the box so it's got",
    "start": "1227210",
    "end": "1232460"
  },
  {
    "text": "a command-line coop cuddle it's got horizontal scaling across multiple instances in a single lazy kind",
    "start": "1232460",
    "end": "1239780"
  },
  {
    "text": "of sum niceties like service discovery and load balancing built-in but we think",
    "start": "1239780",
    "end": "1244970"
  },
  {
    "text": "that if you're gonna run kubernetes in production we recommend that you try to make things a little bit easier on yourself and consider something other",
    "start": "1244970",
    "end": "1252020"
  },
  {
    "text": "than just running the upstream open source version and I think our recommendation here is tectonic from core OS because it's basically upstream",
    "start": "1252020",
    "end": "1260210"
  },
  {
    "text": "kubernetes with some nice wrappers around it to make installing and managing kubernetes on AWS much more",
    "start": "1260210",
    "end": "1266390"
  },
  {
    "text": "intuitive it does a lot of the heavy lifting for you so some of these features are really important for running kubernetes in production in my",
    "start": "1266390",
    "end": "1272390"
  },
  {
    "text": "opinion so tecktonik provides things like an installer a GUI for management if you like gooeys integration with like",
    "start": "1272390",
    "end": "1281000"
  },
  {
    "text": "LDAP and provides role based access control and then some tooling for managing the actual cluster itself",
    "start": "1281000",
    "end": "1288460"
  },
  {
    "text": "so on AWS specifically tectonic helps tie kubernetes into auto-scaling it's tied into some of our monitoring",
    "start": "1291649",
    "end": "1298559"
  },
  {
    "text": "and logging and alerting systems and you can use the tectonic management console",
    "start": "1298559",
    "end": "1303629"
  },
  {
    "text": "to manage multiple clusters of kubernetes all running in AWS tectonic",
    "start": "1303629",
    "end": "1309690"
  },
  {
    "text": "also comes packaged with core OS as you might have guessed given that it's produced by core OS so this is an",
    "start": "1309690",
    "end": "1314909"
  },
  {
    "text": "operating system packaged with docker and kind of vetted against the version of docker that's running in the release which is actually a really nice thing",
    "start": "1314909",
    "end": "1320479"
  },
  {
    "text": "you really want to make sure docker is vetted against the OS that you're running because debugging some bizarre",
    "start": "1320479",
    "end": "1327389"
  },
  {
    "text": "kernel panic that no one's seen before on stack overflow at like 3:00 in the morning and it's your production system",
    "start": "1327389",
    "end": "1333029"
  },
  {
    "text": "is probably not for the faint of heart so that's something that I would advise and then core OS also provides some",
    "start": "1333029",
    "end": "1339089"
  },
  {
    "text": "stuff like core core update which allows you to do rolling updates of the cluster itself so managing the actual kubernetes",
    "start": "1339089",
    "end": "1345929"
  },
  {
    "text": "infrastructure with some of these tools kind of alleviates a lot of the heavy lifting for you and some other",
    "start": "1345929",
    "end": "1355710"
  },
  {
    "text": "functionality on AWS I mentioned the installer but this is great because it really bakes in a lot of AWS common",
    "start": "1355710",
    "end": "1362249"
  },
  {
    "text": "sense into this installer so it gets you to mostly a production ready state right off the bat which is nice and then this",
    "start": "1362249",
    "end": "1369299"
  },
  {
    "text": "kubernetes installation is configured in a self-hosted fashion which basically means using kubernetes to schedule its",
    "start": "1369299",
    "end": "1375119"
  },
  {
    "text": "own components across the cluster and that's nice because then you can use kubernetes lifecycle management tools to",
    "start": "1375119",
    "end": "1380729"
  },
  {
    "text": "manage the actual components of the cluster which is pretty cool and then some other stuff like backing up the EDD",
    "start": "1380729",
    "end": "1387570"
  },
  {
    "text": "key value store to s3 automatic encryption of secrets and kms that stuff",
    "start": "1387570",
    "end": "1393839"
  },
  {
    "text": "is really great the tool that allows you to take advantage of this is Kubb AWS and it's basically what provides a lot",
    "start": "1393839",
    "end": "1400049"
  },
  {
    "text": "of the integration so it essentially takes a config file in which you specify some values so things like what your dns",
    "start": "1400049",
    "end": "1406859"
  },
  {
    "text": "endpoint should be you know which KMS key did you create for us to use and",
    "start": "1406859",
    "end": "1412139"
  },
  {
    "text": "then it generates a CloudFormation template for you so based on this config that you've specified it spins up a",
    "start": "1412139",
    "end": "1417749"
  },
  {
    "text": "cloud formation template creates the user data for all the instances in basically in about ten minutes you can",
    "start": "1417749",
    "end": "1423509"
  },
  {
    "text": "log in and check out your cluster and you're ready to start placing tasks on kubernetes which is great so we have a reference",
    "start": "1423509",
    "end": "1431940"
  },
  {
    "text": "customer for tecktonik here this is planet labs they do some boring stuff like launching satellites and taking",
    "start": "1431940",
    "end": "1437970"
  },
  {
    "text": "pictures of the earth but really it's a they have a very challenging use case right so they're taking a whole earth",
    "start": "1437970",
    "end": "1444150"
  },
  {
    "text": "dataset lots of images lots of data and you know they were experiencing a lot of",
    "start": "1444150",
    "end": "1450360"
  },
  {
    "text": "growth in their business so it's putting a lot of pressure on their systems originally and on their teams so they were experiencing challenges with things",
    "start": "1450360",
    "end": "1456120"
  },
  {
    "text": "like application version drift inconsistent packaging inconsistent",
    "start": "1456120",
    "end": "1461820"
  },
  {
    "text": "deployment mechanisms across different teams and so they decided to move to",
    "start": "1461820",
    "end": "1468480"
  },
  {
    "text": "tectonic and adopt kubernetes is their primary platform for deploying on AWS so",
    "start": "1468480",
    "end": "1473640"
  },
  {
    "text": "the result was they really streamlined their application packaging and their deployment model but it gave their teams the flexibility they really wanted it",
    "start": "1473640",
    "end": "1480630"
  },
  {
    "text": "improved their ability to manage dependencies and really at the end of the day they spent a lot less time thinking about infrastructure and the",
    "start": "1480630",
    "end": "1487770"
  },
  {
    "text": "engineering teams could focus on their primary goal which was writing software",
    "start": "1487770",
    "end": "1492860"
  },
  {
    "text": "so I'm gonna try my best to make some generic recommendations here I forgot to mention everyone should if you have a QR",
    "start": "1494630",
    "end": "1500580"
  },
  {
    "text": "code reader there will be QR codes that you can use to get routed to the best",
    "start": "1500580",
    "end": "1506130"
  },
  {
    "text": "place to get started running this particular platform on AWS so I think if you want a kubernetes experience",
    "start": "1506130",
    "end": "1514350"
  },
  {
    "text": "tailored for AWS we would encourage you to consider tectonic it's also a good",
    "start": "1514350",
    "end": "1519929"
  },
  {
    "text": "option if you want to purchase support for kubernetes which if you don't have a ton of IT resources to manage a Cooper Nettie's cluster this might be a good",
    "start": "1519929",
    "end": "1525870"
  },
  {
    "text": "option and then finally if you want to consider an alternate container runtime like rocket bike or OS this might be one",
    "start": "1525870",
    "end": "1532200"
  },
  {
    "text": "of the only options at the present that allow you to take advantage of that so I'm gonna pause for a second hopefully everyone's got their QR codes here I can",
    "start": "1532200",
    "end": "1539549"
  },
  {
    "text": "come back at the end and we'll look at this but this should take you to the documentation for getting the Kubb AWS tool and getting started running this",
    "start": "1539549",
    "end": "1546210"
  },
  {
    "text": "and playing on a team of AWS so if anyone has it up and running by the end of the talk let me know I have stickers",
    "start": "1546210",
    "end": "1553280"
  },
  {
    "text": "so let's move on let's look at docker data center I will the doctor datacenter is probably the",
    "start": "1553280",
    "end": "1559230"
  },
  {
    "text": "relative newcomer here in this space and doctor datacenter is the offering from",
    "start": "1559230",
    "end": "1564660"
  },
  {
    "text": "docker themselves so DBC is kind of a package deal that's built around first",
    "start": "1564660",
    "end": "1569970"
  },
  {
    "text": "of all the docker engine which is the docker runtime that you already know and love but a commercially supported",
    "start": "1569970",
    "end": "1576330"
  },
  {
    "text": "version of that it also has",
    "start": "1576330",
    "end": "1582380"
  },
  {
    "text": "orchestration platform called Universal control plane and then it's also packaged with their own private registry",
    "start": "1582380",
    "end": "1587640"
  },
  {
    "text": "called docker trusted registry and so DDC is kind of all of these things wrapped together the actual orchestration framework though is",
    "start": "1587640",
    "end": "1593070"
  },
  {
    "text": "universal control plane so breaking down like the main components here UCP and",
    "start": "1593070",
    "end": "1600240"
  },
  {
    "text": "DTR UCP is what the is the is the cluster manager and so like kubernetes it also uses at CD for state management",
    "start": "1600240",
    "end": "1606840"
  },
  {
    "text": "it uses docker swarm for scheduling and it also packages up some really nice features like LDAP some load balancers",
    "start": "1606840",
    "end": "1614460"
  },
  {
    "text": "and like native docker service discovery and then docker trusted registry here runs as a cluster of three instances and",
    "start": "1614460",
    "end": "1622530"
  },
  {
    "text": "again has things like LDAP support content signing and support for like s3 is the backend so you can store your",
    "start": "1622530",
    "end": "1628620"
  },
  {
    "text": "images in s3 through DTR which is a really nice feature so if I have to",
    "start": "1628620",
    "end": "1636750"
  },
  {
    "text": "generalize about GDC I would suggest that it really includes a lot of bleeding edge features especially in the",
    "start": "1636750",
    "end": "1642390"
  },
  {
    "text": "container networking space I think that's you know the one thing one of the impressions that this product has really left on me so if we break this down a",
    "start": "1642390",
    "end": "1648809"
  },
  {
    "text": "little bit look at the architecture the UCP controllers here there's three five or seven of them and they all run the",
    "start": "1648809",
    "end": "1654240"
  },
  {
    "text": "UCP manager container and then all of the swarm nodes or the UCP workers in",
    "start": "1654240",
    "end": "1659340"
  },
  {
    "text": "this diagram here all run a container for the agent the UCP agent we need to",
    "start": "1659340",
    "end": "1665190"
  },
  {
    "text": "deploy services they are running on your swarm cluster although the UCP managers also can run services for you and so",
    "start": "1665190",
    "end": "1673919"
  },
  {
    "text": "when you deploy services to the ends of the swarm cluster they're automatically checked into an ELB if you're running out not on AWS and then they're made",
    "start": "1673919",
    "end": "1681210"
  },
  {
    "text": "available across the swarm routing mesh which is a layer 4 load balancer that basically allows you to receive traffic",
    "start": "1681210",
    "end": "1687570"
  },
  {
    "text": "on any node in the swarm cluster on the published service port for that",
    "start": "1687570",
    "end": "1693959"
  },
  {
    "text": "particular service and then have it forwarded to the appropriate VIP for the",
    "start": "1693959",
    "end": "1698989"
  },
  {
    "text": "for the instance that that service actually runs on so it'll just automatically forward your request to",
    "start": "1698989",
    "end": "1704339"
  },
  {
    "text": "the appropriate node in the cluster which is nice there's also kind of a new experimental feature called the HTTP routing mesh which allows you to do",
    "start": "1704339",
    "end": "1710399"
  },
  {
    "text": "things like forward l7 HTTP virtual hosts to the published VIP for the",
    "start": "1710399",
    "end": "1715979"
  },
  {
    "text": "services so you can configure services to have C names when a request comes in for that C name the routing mesh",
    "start": "1715979",
    "end": "1721469"
  },
  {
    "text": "automatically forwards it to the service listening on the right note at the right port which is quite nice diving into UCP",
    "start": "1721469",
    "end": "1735119"
  },
  {
    "text": "a little bit more the control plane itself I think it has a really nice acuity which is kind of a shallow thing but I think it's really nice to look at",
    "start": "1735119",
    "end": "1740969"
  },
  {
    "text": "now maybe my personal favorite here I mean you can do all the management of your cluster through the GUI if that's something that you want to do to manage",
    "start": "1740969",
    "end": "1747690"
  },
  {
    "text": "it through the docker CLI there's a nice little thing where you can download a bundle which gives you certificates that",
    "start": "1747690",
    "end": "1752789"
  },
  {
    "text": "you plug into your local docker CLI and all of a sudden you're communicating with your UCP cluster manager and so when you do docker run it's actually",
    "start": "1752789",
    "end": "1758819"
  },
  {
    "text": "scheduling it for you up in your cluster which is pretty cool other interesting",
    "start": "1758819",
    "end": "1764069"
  },
  {
    "text": "things there's a built in content trust mechanism which verifies the publisher of an image and ensures only signed",
    "start": "1764069",
    "end": "1770309"
  },
  {
    "text": "images can run which is a really nice feature for security and then UCP also allows you to use custom SSL",
    "start": "1770309",
    "end": "1775919"
  },
  {
    "text": "Certificates LDAP support role based access control it has a built in diagnostic control",
    "start": "1775919",
    "end": "1781440"
  },
  {
    "text": "tool which allows you to basically dump the logs from all the nodes in this swarm cluster and look at them in one",
    "start": "1781440",
    "end": "1786929"
  },
  {
    "text": "place and then of course logging of everything is supported with AWS cloud",
    "start": "1786929",
    "end": "1792209"
  },
  {
    "text": "watch logs actually I should note that if you're running docker at all there's an integrated driver for AWS cloud watch",
    "start": "1792209",
    "end": "1797729"
  },
  {
    "text": "logs so even if you're just running docker run from the command line you can push your logs all the standard air standard output to cloud watch logs",
    "start": "1797729",
    "end": "1803609"
  },
  {
    "text": "which is great so we actually have a quick start for docker data center and",
    "start": "1803609",
    "end": "1809699"
  },
  {
    "text": "QuickStart is a program that we run that we work with partners to build kind of like a reference implementation of their",
    "start": "1809699",
    "end": "1815699"
  },
  {
    "text": "product on AWS so we kind of go through the motions of standing up this product in kind of a best-practice way so you",
    "start": "1815699",
    "end": "1822839"
  },
  {
    "text": "can impress your boss by clicking the stack button it's a cloud formation template and have it up and running in a couple of minutes prob about 20 minutes",
    "start": "1822839",
    "end": "1829410"
  },
  {
    "text": "on average so when we deploy DTR I'm sorry DD C into AWS we deploy it",
    "start": "1829410",
    "end": "1837270"
  },
  {
    "text": "into a V PC so we create a V PC or you can use your existing V PC there's two availability zones with to public and to",
    "start": "1837270",
    "end": "1844200"
  },
  {
    "text": "private subnets across them there's elastic load balancers there's three one for the front-end of doctor trusted registry one for the front-end",
    "start": "1844200",
    "end": "1850500"
  },
  {
    "text": "of UCP and then a aniele be functioning in TCP pass-through mode two forward",
    "start": "1850500",
    "end": "1856320"
  },
  {
    "text": "requests to your services running on the swarm cluster and then all the necessary networking underlying stuff like NAT",
    "start": "1856320",
    "end": "1863100"
  },
  {
    "text": "gateways and we take care of all that for you so we're going to zoom in here on the private subnet and look at what",
    "start": "1863100",
    "end": "1868560"
  },
  {
    "text": "the configuration of the ec2 instances look like we have by default three DTR",
    "start": "1868560",
    "end": "1873990"
  },
  {
    "text": "controller's three UCP controllers and they're kind of async irregularly distributed across the availability",
    "start": "1873990",
    "end": "1879180"
  },
  {
    "text": "zones here and then the swarm nodes run in a scaling group across both of the AZ's so cool stuff oh I didn't give you",
    "start": "1879180",
    "end": "1888630"
  },
  {
    "text": "guys a chance nevermind just kidding thought I missed the QR code I didn't our reference customer for docker data",
    "start": "1888630",
    "end": "1895200"
  },
  {
    "text": "center is ATP and they were really interested in gaining more efficiencies reuse of code by moving away from the",
    "start": "1895200",
    "end": "1901830"
  },
  {
    "text": "monolithic model of deployment they were using previously they were running on OpenStack or are running on OpenStack for their private cloud and they use AWS",
    "start": "1901830",
    "end": "1908460"
  },
  {
    "text": "for their public cloud so they needed a platform to help them migrate you know hundreds of monoliths that served",
    "start": "1908460",
    "end": "1915240"
  },
  {
    "text": "hundreds of thousands of customers to a microsurgical also while migrating to",
    "start": "1915240",
    "end": "1921870"
  },
  {
    "text": "the cloud so docker data center enabled them to start implementing some micro",
    "start": "1921870",
    "end": "1927900"
  },
  {
    "text": "services and continuous deployment continuous integration practices get their DevOps teams up and running while",
    "start": "1927900",
    "end": "1933840"
  },
  {
    "text": "running simultaneously on-premise in an AWS so my recommendations here you",
    "start": "1933840",
    "end": "1941700"
  },
  {
    "text": "should use docker data center if I think the docker native stack is very important to you if you want something that's all built by docker this is",
    "start": "1941700",
    "end": "1948540"
  },
  {
    "text": "obviously your option if your development workflow is built around docker compose on a dr. CLI this is",
    "start": "1948540",
    "end": "1954450"
  },
  {
    "text": "another this is another reason you might really consider this the ease of plugging in UCP is a cluster manager",
    "start": "1954450",
    "end": "1959550"
  },
  {
    "text": "behind the local doctor CLI is great and then finally if you want commercial support for the docker engine this is",
    "start": "1959550",
    "end": "1964920"
  },
  {
    "text": "basically one of their only options at this point so QR code for docker data center the QuickStart on AWS this will",
    "start": "1964920",
    "end": "1971910"
  },
  {
    "text": "take you to the QuickStart page there's a deployment guy in a CloudFormation template and this can have it up and running at about I think 20 minutes or",
    "start": "1971910",
    "end": "1979080"
  },
  {
    "text": "so so the next framework we're going to",
    "start": "1979080",
    "end": "1987929"
  },
  {
    "text": "talk about is meso sand marathon and Mesa sauce was originally developed to perform",
    "start": "1987929",
    "end": "1993420"
  },
  {
    "text": "fine-grained sharing of resources across different frameworks and it was built",
    "start": "1993420",
    "end": "1998820"
  },
  {
    "text": "because this is kind of a tough problem to solve so the purpose of Mesa was to provide a scalable and efficient system",
    "start": "1998820",
    "end": "2005630"
  },
  {
    "text": "that supported a wide array of different frameworks and so some of those frameworks might be used for running docker applications like marathon for",
    "start": "2005630",
    "end": "2012530"
  },
  {
    "text": "example and other frameworks are focused on Big Data so you can run things like",
    "start": "2012530",
    "end": "2017540"
  },
  {
    "text": "spark or a dupe or elasticsearch on top of Hadoop or on top of mesas",
    "start": "2017540",
    "end": "2024100"
  },
  {
    "text": "so there's four elements main elements here to a mesas cluster the back-end",
    "start": "2024100",
    "end": "2029660"
  },
  {
    "text": "data store is zookeeper which is a which is serves as a persistence layer it",
    "start": "2029660",
    "end": "2034880"
  },
  {
    "text": "helps with leader election for a master",
    "start": "2034880",
    "end": "2038440"
  },
  {
    "text": "marathon here is the framework that we use that starts and monitors and scales your applications running in containers",
    "start": "2040240",
    "end": "2045920"
  },
  {
    "text": "and then the Mesa master here is what's responsible for aggregating resource",
    "start": "2045920",
    "end": "2052878"
  },
  {
    "text": "offers from all the nodes all the agent nodes in the cluster are the meso slaves here and providing them to the",
    "start": "2052879",
    "end": "2059540"
  },
  {
    "text": "registered frameworks so when the Masons master fails maybe it crashes or goes",
    "start": "2059540",
    "end": "2066138"
  },
  {
    "text": "offline for some reason a standby maysa master is promoted automatically without",
    "start": "2066139",
    "end": "2071240"
  },
  {
    "text": "disturbing any of the running services and zookeeper is kind of responsible for rapidly electing a new leader and",
    "start": "2071240",
    "end": "2077510"
  },
  {
    "text": "essentially it can survive failure of the master node with very little disruption the meso slaves of the agents",
    "start": "2077510",
    "end": "2085510"
  },
  {
    "text": "pretty clearly are where your actual services are running in the cluster where your frameworks running tasks a task is the",
    "start": "2085510",
    "end": "2093990"
  },
  {
    "text": "core unit of work that's scheduled by mesas framework and executed on one of the slaves so DC OS or datacenter OS is",
    "start": "2093990",
    "end": "2104609"
  },
  {
    "text": "an orchestration tool built around mesas as the backend state management tool and it's packaged with a docker scheduling",
    "start": "2104609",
    "end": "2110309"
  },
  {
    "text": "framework called marathon so marathon gives you a GUI for managing services and other frameworks on DCOs",
    "start": "2110309",
    "end": "2116250"
  },
  {
    "text": "and there's a pretty cool DC u.s. CLI that allows you to manage the cluster and the things that are going on within",
    "start": "2116250",
    "end": "2121950"
  },
  {
    "text": "marathon so other interesting components of DCOs I would call out the admin router which is like an open source",
    "start": "2121950",
    "end": "2127710"
  },
  {
    "text": "engine X configuration that provides like authentication and proxy to your DC OS services there's a tool called the",
    "start": "2127710",
    "end": "2135569"
  },
  {
    "text": "exhibitor which configured zookeeper during installation and then it provides like a little web UI to zookeeper",
    "start": "2135569",
    "end": "2142230"
  },
  {
    "text": "there's a tool called mesas dn which provides service discovery so it allows",
    "start": "2142230",
    "end": "2147630"
  },
  {
    "text": "your apps and your services to find each other by using DNS there's also something called Minuteman which is an",
    "start": "2147630",
    "end": "2153839"
  },
  {
    "text": "internal like layer for load balancer that ships with this service I think the",
    "start": "2153839",
    "end": "2159359"
  },
  {
    "text": "most unique thing about DC OS in this case is the universe which is the first thing we're calling out on the slide here and this basically allows you to",
    "start": "2159359",
    "end": "2165780"
  },
  {
    "text": "install a number of different frameworks onto DCOs so you can run Cassandra or Jenkins or Hadoop as I was mentioning",
    "start": "2165780",
    "end": "2171569"
  },
  {
    "text": "earlier on the same cluster you're running your docker containers all your micro services this is a really unique",
    "start": "2171569",
    "end": "2177390"
  },
  {
    "text": "thing and this is not something you can do with any of the other frameworks right now so if you're really focused on having one cluster that runs everything",
    "start": "2177390",
    "end": "2183359"
  },
  {
    "text": "and like really hammering home on the efficient resource utilization or you",
    "start": "2183359",
    "end": "2189240"
  },
  {
    "text": "know resource density approach then you know DC OS is kind of stands alone in that regard and so this is unique",
    "start": "2189240",
    "end": "2198119"
  },
  {
    "text": "because generally you would have a cluster for SPARC a cluster for Kafka a cluster for Cassandra and that's because",
    "start": "2198119",
    "end": "2203640"
  },
  {
    "text": "these are distributed systems themselves and they really have their own scheduling logic and they really want to",
    "start": "2203640",
    "end": "2208650"
  },
  {
    "text": "be able to grow and shrink their footprint so they usually get their own cluster because you want to avoid resource conflicts so it's very",
    "start": "2208650",
    "end": "2213900"
  },
  {
    "text": "interesting that DC OS allows you to do this so the DC OS approach they turn",
    "start": "2213900",
    "end": "2219119"
  },
  {
    "text": "your whole data center or a big group of resources into basically one giant computer",
    "start": "2219119",
    "end": "2224289"
  },
  {
    "text": "and then all the components of your app can be pulled so again it's interesting if you want to run all these things",
    "start": "2224289",
    "end": "2229819"
  },
  {
    "text": "together very unique finally I'd say",
    "start": "2229819",
    "end": "2235910"
  },
  {
    "text": "that Macy's has been around for quite some time the Macy's paper itself was published in 2010 the May one of the my sister",
    "start": "2235910",
    "end": "2243049"
  },
  {
    "text": "co-founders published this while at Berkeley and this paper kind of applied",
    "start": "2243049",
    "end": "2248210"
  },
  {
    "text": "a lot of lessons that were learned at Google and Facebook on some of their internal large-scale platforms so then",
    "start": "2248210",
    "end": "2255109"
  },
  {
    "text": "the technology the mesas project was applied at Twitter was applied at Airbnb",
    "start": "2255109",
    "end": "2260230"
  },
  {
    "text": "where a couple of the other co-founders of Mesa sphere applied the technology to",
    "start": "2260230",
    "end": "2265430"
  },
  {
    "text": "resolve different infrastructure challenges so you have all these people coming together who have had experience with this tool at large scale and",
    "start": "2265430",
    "end": "2271160"
  },
  {
    "text": "different companies realizing that it solves a bunch of problems and they came together to form Mesa sphere and the DC",
    "start": "2271160",
    "end": "2278779"
  },
  {
    "text": "West project and to use it to uh you know solve your challenges of running containers at scale so Mason's itself",
    "start": "2278779",
    "end": "2286549"
  },
  {
    "text": "has been in use at a large number of enterprises a variety of different use cases even before the DC West project",
    "start": "2286549",
    "end": "2291710"
  },
  {
    "text": "was launched I think in 2015 DCOs launched its open-source Apache 2.0 and",
    "start": "2291710",
    "end": "2298400"
  },
  {
    "text": "it's been contributed to by something like sixty different companies which is quite interesting and then finally",
    "start": "2298400",
    "end": "2306079"
  },
  {
    "text": "autodesk is our reference customer for DC OS and so Autodesk has essentially built an internal cloud platform on top",
    "start": "2306079",
    "end": "2312170"
  },
  {
    "text": "of DCOs and on top of AWS that allows them to get extremely efficient resource utilization and so they run this",
    "start": "2312170",
    "end": "2319220"
  },
  {
    "text": "internal cloud platform that a bunch of different teams deploy to many times a day across three different AWS regions",
    "start": "2319220",
    "end": "2325520"
  },
  {
    "text": "so DCOs help them first of all streamline this deployment process they",
    "start": "2325520",
    "end": "2330890"
  },
  {
    "text": "can deploy new builds of software in about 40 seconds and it also gave them",
    "start": "2330890",
    "end": "2337299"
  },
  {
    "text": "dramatic cost savings so this is a metric that we really like moving to the internal Autodesk cloud platform by",
    "start": "2337299",
    "end": "2343609"
  },
  {
    "text": "building this they were able to increase their infrastructure density or move to",
    "start": "2343609",
    "end": "2349849"
  },
  {
    "text": "about 66 percent less instances and they had originally and then reduce their overall spend by 57 percent so we love",
    "start": "2349849",
    "end": "2355640"
  },
  {
    "text": "Talk about successful cost-saving measures and so I will say this first one is",
    "start": "2355640",
    "end": "2362430"
  },
  {
    "text": "definitely in jest but if you prefer technology that's kind of been around for a while and it's been in production in a bunch of different large",
    "start": "2362430",
    "end": "2368130"
  },
  {
    "text": "enterprises definitely take a look at D cos if you want to take advantage of the D cos universe and manage big data",
    "start": "2368130",
    "end": "2374520"
  },
  {
    "text": "applications on the same cluster they're running your micro services DCOs really stands alone in that regard so QR code",
    "start": "2374520",
    "end": "2381420"
  },
  {
    "text": "take a look this brings you to a cloud formation stack that will launch DCOs",
    "start": "2381420",
    "end": "2386450"
  },
  {
    "text": "fairly quickly for you I think it's about 10 minutes and that'll be up and running in your AWS account and then",
    "start": "2386450",
    "end": "2395580"
  },
  {
    "text": "finally last but not least this brings us Amazon ECS which is a tool that we've built to help customers manage",
    "start": "2395580",
    "end": "2401820"
  },
  {
    "text": "containers at scale on AWS so we built Li CS to kind of help address some",
    "start": "2401820",
    "end": "2406940"
  },
  {
    "text": "common issues with running containers at scale and then plugging those containers into the rest of the AWS platform which",
    "start": "2406940",
    "end": "2413280"
  },
  {
    "text": "is challenging to do in some cases so we want containers to be first-class",
    "start": "2413280",
    "end": "2419010"
  },
  {
    "text": "citizens in AWS and we feel like ECS is the vehicle to elevate them to that status eventually so looking at this",
    "start": "2419010",
    "end": "2425340"
  },
  {
    "text": "infrastructure diagram here the first thing I need to point out is that ECS is a managed service so AWS runs the state",
    "start": "2425340",
    "end": "2433020"
  },
  {
    "text": "management engine and exposes all the information about your cluster through an API so in the bottom box here all of",
    "start": "2433020",
    "end": "2440370"
  },
  {
    "text": "these things run in AWS and then in the dotted line boxes all of these things",
    "start": "2440370",
    "end": "2445620"
  },
  {
    "text": "run inside of your V PC and you can configure the networking in the instances as you like but one thing to",
    "start": "2445620",
    "end": "2451740"
  },
  {
    "text": "point out is that all the instances in ECS need the ECS agent installed on them which runs as a container and then it",
    "start": "2451740",
    "end": "2457680"
  },
  {
    "text": "facilitates communication between the ECS API back-end and the doctor daemon",
    "start": "2457680",
    "end": "2463140"
  },
  {
    "text": "locally and all the instances in your cluster the EC has optimized Amazon",
    "start": "2463140",
    "end": "2468150"
  },
  {
    "text": "Linux ami includes this pre-installed as do a couple of other different OS",
    "start": "2468150",
    "end": "2474240"
  },
  {
    "text": "options including souza rancher OS and core OS so they all have the ECS agent pre-baked",
    "start": "2474240",
    "end": "2480020"
  },
  {
    "text": "so you see us as a service that will scale with you it's managed we've run some scale tests that show I think over",
    "start": "2480020",
    "end": "2485940"
  },
  {
    "text": "a 36 hour period or was it a 72 hour period we were able to scale our cluster up to like 1500 instances with basically no",
    "start": "2485940",
    "end": "2492109"
  },
  {
    "text": "impact on the response times of the API so that API is really built to scale with you and then because we we expose",
    "start": "2492109",
    "end": "2498950"
  },
  {
    "text": "the cluster state to you via API is you really have full control over your cluster and how your container is run on that cluster and then finally because",
    "start": "2498950",
    "end": "2505999"
  },
  {
    "text": "it's a managed service we provide all sorts of hooks into other AWS services with ECS so you've probably seen this",
    "start": "2505999",
    "end": "2512690"
  },
  {
    "text": "recently with some of the things like IM roles the tasks level integration with auto scaling for scaling your services",
    "start": "2512690",
    "end": "2519130"
  },
  {
    "text": "integration with the application load balancer cloud watch logs and so on so",
    "start": "2519130",
    "end": "2525469"
  },
  {
    "text": "we intend we intend to continue to add these types of features and as I stated just a little bit ago we really want",
    "start": "2525469",
    "end": "2531109"
  },
  {
    "text": "containers to be first-class citizens in AWS so looking over some of the components of VCs starting the top left",
    "start": "2531109",
    "end": "2538160"
  },
  {
    "text": "here there's a task which is defines what containers should run and how they should run and all the containers in a",
    "start": "2538160",
    "end": "2545119"
  },
  {
    "text": "task run on the same instance the task definition allows you to define sorry so",
    "start": "2545119",
    "end": "2550609"
  },
  {
    "text": "a task definition is the definition of how all your containers should run the task is the actual running implementation of that the cluster you",
    "start": "2550609",
    "end": "2558710"
  },
  {
    "text": "can have multiple clusters in ECS they're each their own namespace and they're just essentially a pool of ec2",
    "start": "2558710",
    "end": "2564140"
  },
  {
    "text": "resources that run together there's a cluster manager that aggregates all the cluster resources in the backend and the",
    "start": "2564140",
    "end": "2570200"
  },
  {
    "text": "state of all the tasks we have a scheduler that actually places tasks and considers your availability requirements",
    "start": "2570200",
    "end": "2576589"
  },
  {
    "text": "for your service and the state of your cluster and then finally the agent again is what actually coordinates the ec2",
    "start": "2576589",
    "end": "2583039"
  },
  {
    "text": "instances and communicates with the back-end agent and the backend services",
    "start": "2583039",
    "end": "2588940"
  },
  {
    "text": "the basic workflow of running tasks on ECS are you take a task definition you",
    "start": "2589660",
    "end": "2596119"
  },
  {
    "text": "call the run task API or you tell the service scheduler to create a service for you the scheduler confers what the",
    "start": "2596119",
    "end": "2604640"
  },
  {
    "text": "manager asks I have this job with these requirements where should I run it the manager then forwards the requirements",
    "start": "2604640",
    "end": "2610609"
  },
  {
    "text": "to the cluster the ECS agent parses the task definition unpacks all the docker commands and then runs it locally on the",
    "start": "2610609",
    "end": "2617210"
  },
  {
    "text": "instance so a couple of case studies first of all",
    "start": "2617210",
    "end": "2623559"
  },
  {
    "text": "as Expedia they run a tool called primer which is their internal deployment platform on top of ETS and this platform",
    "start": "2623559",
    "end": "2628960"
  },
  {
    "text": "supports like 200 different micro services and internal applications across a couple different ECS clusters",
    "start": "2628960",
    "end": "2635380"
  },
  {
    "text": "that scale and responds their performance needs so they've built a continuous integration platform that",
    "start": "2635380",
    "end": "2641200"
  },
  {
    "text": "allows them to deploy directly ECS very quickly across a bunch of different teams I probably won't dive too deeply into",
    "start": "2641200",
    "end": "2648069"
  },
  {
    "text": "this if you want to learn more about how Expedia uses ECS they spoke about their infrastructure and their continuous",
    "start": "2648069",
    "end": "2653890"
  },
  {
    "text": "deployment pipeline that are at reinvent last year so you can definitely find that on YouTube and then one more case",
    "start": "2653890",
    "end": "2663520"
  },
  {
    "text": "study just because I have a little bit of time here the Amazon personalization team is a team that's responsible for",
    "start": "2663520",
    "end": "2670150"
  },
  {
    "text": "when you log into amazon.com and you get recommendations for a book you might want to buy there the team that's",
    "start": "2670150",
    "end": "2675700"
  },
  {
    "text": "crunching all these big data sets about customers and what they've bought and what what products are available and",
    "start": "2675700",
    "end": "2682990"
  },
  {
    "text": "then makes recommendations to you based on what you might actually want they're actually generating these recommendations using GPU instances and",
    "start": "2682990",
    "end": "2689799"
  },
  {
    "text": "scheduling this work via ECS so they're running ECS clusters full of GPU",
    "start": "2689799",
    "end": "2695170"
  },
  {
    "text": "instances and they're throwing these massively parallel big data jobs onto",
    "start": "2695170",
    "end": "2700359"
  },
  {
    "text": "these clusters and then having the output data stored in s3 which is very interesting so we've written a blog post",
    "start": "2700359",
    "end": "2705670"
  },
  {
    "text": "that demonstrates how you can use GPUs from within containers and we've got a CloudFormation template that",
    "start": "2705670",
    "end": "2710770"
  },
  {
    "text": "demonstrates how you can kind of package all the necessary nvidia cuda libraries inside the container and on the host to",
    "start": "2710770",
    "end": "2717369"
  },
  {
    "text": "allow your containers to communicate with GPUs so finally my recommendations",
    "start": "2717369",
    "end": "2723250"
  },
  {
    "text": "for ECS you should use ezs if you want to manage services skills with you if you want to leverage more of the native",
    "start": "2723250",
    "end": "2729640"
  },
  {
    "text": "AWS integrations like I am roles or application load balancers ECS is a good option if you really want to build",
    "start": "2729640",
    "end": "2736510"
  },
  {
    "text": "around the AWS native tooling like the AWS CLI SDKs CloudFormation ECS might be",
    "start": "2736510",
    "end": "2742390"
  },
  {
    "text": "for you and then if you want to leverage the UCS partner ecosystem it might be a good choice as well so if I have to make",
    "start": "2742390",
    "end": "2750369"
  },
  {
    "text": "a conclusion here I think I will I'll just say AWS is a very rich system we support every major",
    "start": "2750369",
    "end": "2755540"
  },
  {
    "text": "orchestration framework and we see customers being successful with whatever orchestration framework they're using on",
    "start": "2755540",
    "end": "2761150"
  },
  {
    "text": "AWS whether using ECS or a partner build solution really our goal is to build the",
    "start": "2761150",
    "end": "2768319"
  },
  {
    "text": "offer you the best possible solution on AWS and so if you are running container workloads",
    "start": "2768319",
    "end": "2773960"
  },
  {
    "text": "please think AWS first so we have a little bit of time about 15 minutes left I'm just gonna hang out down here D mic",
    "start": "2773960",
    "end": "2780319"
  },
  {
    "text": "take some Q&A and I have some stickers for our new open source project blocks",
    "start": "2780319",
    "end": "2785569"
  },
  {
    "text": "thanks everyone [Applause]",
    "start": "2785569",
    "end": "2791839"
  }
]