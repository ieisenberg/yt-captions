[
  {
    "text": "so welcome everyone it's great to see such a fantastic turnout and a big thank",
    "start": "1719",
    "end": "6720"
  },
  {
    "text": "you for those of you who are watching us via the live stream so in light of opening the new",
    "start": "6720",
    "end": "13599"
  },
  {
    "text": "region here to",
    "start": "13599",
    "end": "16799"
  },
  {
    "text": "today I thought it would be a perfect opportunity to kind of cover some of the design principles for architecting best",
    "start": "21039",
    "end": "28359"
  },
  {
    "text": "practices so the five things that I'm going to cover today are",
    "start": "28359",
    "end": "33520"
  },
  {
    "text": "elasticity designing for failure uh designing Loosely coupled",
    "start": "33520",
    "end": "39440"
  },
  {
    "text": "systems we'll touch on security and then I'll finish off with looking at",
    "start": "39440",
    "end": "45399"
  },
  {
    "text": "performance and um you know as any technical presentation wouldn't really be complete without a live demonstration",
    "start": "45399",
    "end": "52000"
  },
  {
    "text": "uh fingers crossed assuming that the the sort of the Ticky Gods will will allow us I'm going to do a few live",
    "start": "52000",
    "end": "57440"
  },
  {
    "text": "demonstrations today as well so let's get started so in terms of",
    "start": "57440",
    "end": "63879"
  },
  {
    "text": "elasticity I'm going to talk about a few Services which help customers produce highly elastic",
    "start": "63879",
    "end": "71159"
  },
  {
    "text": "systems the first one that comes to mind is obviously ec2 our elastic compute",
    "start": "72119",
    "end": "79320"
  },
  {
    "text": "service this allows customers to install any manner of operating systems Windows",
    "start": "79520",
    "end": "84880"
  },
  {
    "text": "Linux the Enterprise versions but also this the community supported versions too on top of a virtual compute resource",
    "start": "84880",
    "end": "92720"
  },
  {
    "text": "and run that in our AWS Cloud the second component of Rel",
    "start": "92720",
    "end": "99200"
  },
  {
    "text": "architecting for elasticity is the Amazon cloudwatch service so the Amazon",
    "start": "99200",
    "end": "105040"
  },
  {
    "text": "cloudwatch service allows us to monitor key metrics inside of our resources such",
    "start": "105040",
    "end": "111119"
  },
  {
    "text": "as for example if we were looking at ec2 it could be what's the io to disk what's",
    "start": "111119",
    "end": "118280"
  },
  {
    "text": "the CPU and even better than that we can actually look across groups of servers",
    "start": "118280",
    "end": "124320"
  },
  {
    "text": "so we can look at things like statistical averages maximum and minimum values across a group of",
    "start": "124320",
    "end": "132520"
  },
  {
    "text": "servers uh the the third service which is often used to design highly elastic",
    "start": "133640",
    "end": "139280"
  },
  {
    "text": "architectures or systems is the autoscaling service and this allows us",
    "start": "139280",
    "end": "144360"
  },
  {
    "text": "to scale up and to scale down or out and in uh ec2 resources",
    "start": "144360",
    "end": "150720"
  },
  {
    "text": "depending upon environmental conditions such as for example increased load on your website or something",
    "start": "150720",
    "end": "158959"
  },
  {
    "text": "similar so by combining our cloudwatch service ec2 and autoscaling we can",
    "start": "159840",
    "end": "166640"
  },
  {
    "text": "actually create a highly scalable uh",
    "start": "166640",
    "end": "171560"
  },
  {
    "text": "architecture now as our web sery tier let's say scales out we need some way to",
    "start": "172560",
    "end": "178840"
  },
  {
    "text": "decouple the consumer the client behind their browser and that web Ser here now",
    "start": "178840",
    "end": "184519"
  },
  {
    "text": "that's commonly done in a traditional sense by using a laow balancing service now AWS provides an elastic law",
    "start": "184519",
    "end": "191640"
  },
  {
    "text": "balancing service and this allows us to distribute traffic across all regions",
    "start": "191640",
    "end": "197599"
  },
  {
    "text": "sorry all availability zones within a given",
    "start": "197599",
    "end": "202239"
  },
  {
    "text": "region so by placing the elastic law balancing service in front of our web",
    "start": "204440",
    "end": "209519"
  },
  {
    "text": "team as the web tier scales out and scales back in we have that kind of constant",
    "start": "209519",
    "end": "215439"
  },
  {
    "text": "end point for our customers to connect to so let's take a look at what might",
    "start": "215439",
    "end": "221680"
  },
  {
    "text": "happen through maybe a typical day for an e-commerce customer so maybe at 6:00",
    "start": "221680",
    "end": "227040"
  },
  {
    "text": "a.m. in the morning the load on the system can be sufficiently uh catered",
    "start": "227040",
    "end": "232840"
  },
  {
    "text": "For with a single web server as the day progresses and now we",
    "start": "232840",
    "end": "238400"
  },
  {
    "text": "get to say 10:00 a.m. in the morning we find that the average CPU across that one single server maybe is now",
    "start": "238400",
    "end": "246319"
  },
  {
    "text": "80% Now using autoscaling we can define a rule which states when the average CPU",
    "start": "246319",
    "end": "252640"
  },
  {
    "text": "gets to say 80% add another resource to our autoscaling",
    "start": "252640",
    "end": "259440"
  },
  {
    "text": "group so the autoscaling rule has triggered we've created a new web server",
    "start": "260000",
    "end": "265720"
  },
  {
    "text": "and we've now placed it behind the low balancer obviously the first thing we need to do is some sort of a health",
    "start": "265720",
    "end": "271320"
  },
  {
    "text": "check to ensure that before we deliver our production traffic to that web",
    "start": "271320",
    "end": "276600"
  },
  {
    "text": "server that it will be able to handle that so the low balancing service actually has that feature we can do",
    "start": "276600",
    "end": "283120"
  },
  {
    "text": "health checks once the health checks have been passed the law balancer then distributes",
    "start": "283120",
    "end": "290160"
  },
  {
    "text": "traffic to both of those web servers and consequently because we're Distributing traffic across them both the average CPU",
    "start": "290160",
    "end": "298080"
  },
  {
    "text": "now has come down so if it was 80% logically now it's about",
    "start": "298080",
    "end": "304240"
  },
  {
    "text": "40% now this is great for scaling up but if all you ever did with your architectures was scaled up then you're",
    "start": "304240",
    "end": "310560"
  },
  {
    "text": "missing some real economies uh some real sort of cost saving",
    "start": "310560",
    "end": "315840"
  },
  {
    "text": "opportunities so let's fast forward now to 700 p.m. in the evening and we find",
    "start": "315840",
    "end": "321199"
  },
  {
    "text": "that the average utilization has now decreased significantly maybe it's now say 50% across the two web servers so we",
    "start": "321199",
    "end": "330440"
  },
  {
    "text": "could have a rule which states when the average CPU gets to 50% remove one of those",
    "start": "330440",
    "end": "337319"
  },
  {
    "text": "resources the instance is terminated and then the low balancer continues to serve",
    "start": "338160",
    "end": "343479"
  },
  {
    "text": "customers by Distributing all of the traffic now to the last remaining web",
    "start": "343479",
    "end": "349639"
  },
  {
    "text": "server okay so part Warner of the demonstration so so today I'm going to",
    "start": "354800",
    "end": "361560"
  },
  {
    "text": "demonstrate autoscaling by using the services that I've just introduced so the law",
    "start": "361560",
    "end": "367039"
  },
  {
    "text": "balancing service autoscaling Cloud watch and ec2 and I'm going to apply some load to",
    "start": "367039",
    "end": "376400"
  },
  {
    "text": "my autoscaling groups uh by using something called bees but these",
    "start": "376400",
    "end": "382599"
  },
  {
    "text": "are no ordinary bees these bees have machine",
    "start": "382599",
    "end": "387479"
  },
  {
    "text": "guns they're killer okay so um what we're going to do now is",
    "start": "388000",
    "end": "394240"
  },
  {
    "text": "just have a look at some historical data just in case the demonstration doesn't work and you'll see what I hope to replicate in the next few",
    "start": "394240",
    "end": "401120"
  },
  {
    "text": "minutes so this page here is showing my two web servers that I currently have in",
    "start": "401120",
    "end": "407319"
  },
  {
    "text": "my Autos scaling group here you can see a history of uh",
    "start": "407319",
    "end": "415280"
  },
  {
    "text": "some uh previous testing that I did yesterday to demonstrate how the Autos scaling rules actually keep the average",
    "start": "415280",
    "end": "423000"
  },
  {
    "text": "CPU across my web server tier you know between sort of 75 and 100% so this is",
    "start": "423000",
    "end": "429919"
  },
  {
    "text": "the average CPU we're looking at on the next slide here shows the",
    "start": "429919",
    "end": "437199"
  },
  {
    "text": "cumulative CPU across all of those web servers throughout that time and as we",
    "start": "437199",
    "end": "442800"
  },
  {
    "text": "can see it varies from less than 300 right to over 500 at its",
    "start": "442800",
    "end": "451520"
  },
  {
    "text": "Peak okay so let's see if we can replicate this today in half an",
    "start": "451800",
    "end": "457400"
  },
  {
    "text": "hour so I'm now logged on to an ec2 instance uh in the AWS",
    "start": "457400",
    "end": "463919"
  },
  {
    "text": "cloud and what I'm going to do is I'm going to first of all check that my bees",
    "start": "463919",
    "end": "471120"
  },
  {
    "text": "are ready to attack my AWS elb endo and they",
    "start": "471120",
    "end": "477560"
  },
  {
    "text": "are so so I'm now just about to instruct them to all attack this a la balancer um",
    "start": "478240",
    "end": "486800"
  },
  {
    "text": "and actually no so I'm now going to instruct them all to",
    "start": "486800",
    "end": "494360"
  },
  {
    "text": "attack a given low balancer and once that's complete they will then go back to rest and await further",
    "start": "494360",
    "end": "501560"
  },
  {
    "text": "instructions okay so the bees are being assembled and they're getting ready to",
    "start": "501840",
    "end": "507440"
  },
  {
    "text": "to fire their machine guns so let's come back to this maybe in sort of 20 25 minutes later and fingers crossed we'll",
    "start": "507440",
    "end": "513640"
  },
  {
    "text": "have some results to share",
    "start": "513640",
    "end": "520760"
  },
  {
    "text": "okay",
    "start": "521000",
    "end": "524000"
  },
  {
    "text": "oops so the next thing we need to look at is designing for",
    "start": "526480",
    "end": "532000"
  },
  {
    "text": "failure uh so you know as verer vles our CTO of amazon.com has actually said you",
    "start": "532000",
    "end": "537279"
  },
  {
    "text": "know everything fails all of the time so the way to avoid failure is to design",
    "start": "537279",
    "end": "542480"
  },
  {
    "text": "for it so your goal when you're running an application on AWS should be that the",
    "start": "542480",
    "end": "548760"
  },
  {
    "text": "application should continue to function even if the underlying physical Hardware",
    "start": "548760",
    "end": "553839"
  },
  {
    "text": "fails or it's removed or it's",
    "start": "553839",
    "end": "558360"
  },
  {
    "text": "replaced so in a similar way to what we do in a physical environment or a virtual environment where we look",
    "start": "559320",
    "end": "565200"
  },
  {
    "text": "through for single points of failure there may be Network switches web application servers database servers Etc",
    "start": "565200",
    "end": "572399"
  },
  {
    "text": "we need to look for these single points of failure in our",
    "start": "572399",
    "end": "576880"
  },
  {
    "text": "architecture and then by assuming that everything fails we can design backwards",
    "start": "577720",
    "end": "583200"
  },
  {
    "text": "so if we assume that half of our architecture will actually fail at any one given point we need to be able to to",
    "start": "583200",
    "end": "589800"
  },
  {
    "text": "ensure that um service is still provided to our",
    "start": "589800",
    "end": "594480"
  },
  {
    "text": "customers one of our services that really helps customer design highly available uh architectures",
    "start": "596240",
    "end": "602480"
  },
  {
    "text": "is our relational database service RDS now while customers have you know quite entitled to run whatever database",
    "start": "602480",
    "end": "609320"
  },
  {
    "text": "service they wish on top of ec2 uh for those customers that want to consume a managed database service we have RDS so",
    "start": "609320",
    "end": "617320"
  },
  {
    "text": "as a few of the speakers have talked about today this comes in three variations it's a managed Oracle database SQL Server a",
    "start": "617320",
    "end": "626160"
  },
  {
    "text": "MySQL so let's take a very simple uh web uh database architecture we have our web",
    "start": "627880",
    "end": "634320"
  },
  {
    "text": "server we have our database server if we wish to make this public",
    "start": "634320",
    "end": "640279"
  },
  {
    "text": "usually we would attach a fixed public IP so an elastic IP address and then we can create a DNS",
    "start": "640279",
    "end": "648639"
  },
  {
    "text": "record which maps www.mydomain.com to that web",
    "start": "648639",
    "end": "656199"
  },
  {
    "text": "server while you're entitled to use whatever DNS service you wish you can actually use Route 53 which is our",
    "start": "656279",
    "end": "662120"
  },
  {
    "text": "domain name service so you can Define your C names and a records Etc and allow",
    "start": "662120",
    "end": "667600"
  },
  {
    "text": "our highly durable highly scalable infrastructure to provide those DNS",
    "start": "667600",
    "end": "673600"
  },
  {
    "text": "services so this is how it changes our architecture now I'm sure you're",
    "start": "673639",
    "end": "679000"
  },
  {
    "text": "thinking well you know Daniel's already introduced the concept of a low balancer so I think we can probably do a little",
    "start": "679000",
    "end": "684399"
  },
  {
    "text": "bit better than this so let's take a look at the web server",
    "start": "684399",
    "end": "689720"
  },
  {
    "text": "tier in the event where the web server fails what we need to do is fail across this elastic IP address uh and then",
    "start": "689720",
    "end": "697279"
  },
  {
    "text": "obviously there'll be a small um momentary disruption to service and then we can continue providing service to our",
    "start": "697279",
    "end": "705880"
  },
  {
    "text": "customers I like to tackle this problem with a slightly better solution which is to use the elastic law balancer because",
    "start": "706320",
    "end": "713200"
  },
  {
    "text": "if at all possible you don't want to have any outages of your particular web service",
    "start": "713200",
    "end": "720480"
  },
  {
    "text": "and well so this will protect us in the case where one of those web servers is terminated for some reason but what",
    "start": "721000",
    "end": "726800"
  },
  {
    "text": "happens if both of them do or what happens if our website comes at an increasing load",
    "start": "726800",
    "end": "733360"
  },
  {
    "text": "well you know we really should think about using Autos scaling effectively here not just to protect from increased",
    "start": "733360",
    "end": "740399"
  },
  {
    "text": "load but also to provide a selfhealing architecture",
    "start": "740399",
    "end": "746560"
  },
  {
    "text": "so now we have you a relatively simple uh web app that uses autoscaling",
    "start": "750040",
    "end": "756560"
  },
  {
    "text": "it's got redundancy at the low balance a tier but there are still a few single points of",
    "start": "756560",
    "end": "762320"
  },
  {
    "text": "failure the relational database service RDS allows us to uh to deploy a multi-az",
    "start": "762320",
    "end": "770240"
  },
  {
    "text": "solution and what this means is that we can have a master database server in one availability Zone and have synchronous",
    "start": "770240",
    "end": "776839"
  },
  {
    "text": "replication over to a slave database server in a secondary availability",
    "start": "776839",
    "end": "782240"
  },
  {
    "text": "zone so in the event where for example the master database server is",
    "start": "782240",
    "end": "787880"
  },
  {
    "text": "unavailable or you needed to change the size of that database service we can fail across to the slave which is a",
    "start": "787880",
    "end": "794320"
  },
  {
    "text": "synchronous copy and service is uh",
    "start": "794320",
    "end": "799480"
  },
  {
    "text": "maintained in the event that we've had a failure we then simply create a new",
    "start": "799760",
    "end": "804839"
  },
  {
    "text": "slave which is then once again a synchronous copy of the new Master server",
    "start": "804839",
    "end": "811120"
  },
  {
    "text": "the availability Zone B is looking a little bit bare though so let's look to stretch our other resources across both",
    "start": "813160",
    "end": "820720"
  },
  {
    "text": "availability zones so one of the benefits of order scaling groups is that we can actually stretch these resources",
    "start": "820720",
    "end": "826480"
  },
  {
    "text": "across multiple availability zones within a given region and because the",
    "start": "826480",
    "end": "831560"
  },
  {
    "text": "elastic low balancing service is inherently false tolerant we're now able to have an architecture that can operate",
    "start": "831560",
    "end": "838519"
  },
  {
    "text": "both Sim ously and independently of failure of a given availability",
    "start": "838519",
    "end": "845680"
  },
  {
    "text": "Zone okay so let's now take a closer look at the Amazon cloudwatch alarms so",
    "start": "850279",
    "end": "858079"
  },
  {
    "text": "so far we've been using cloudwatch to generate trigger points to do scale up and scale down events and these are",
    "start": "858079",
    "end": "864720"
  },
  {
    "text": "really good if we want to automate processes scaling up scaling down",
    "start": "864720",
    "end": "871040"
  },
  {
    "text": "Etc as you can see here we're actually looking at what the CPU utilization is",
    "start": "871160",
    "end": "876480"
  },
  {
    "text": "across a given ec2 instance we can provide you know histories of these uh this this data and",
    "start": "876480",
    "end": "884199"
  },
  {
    "text": "we can also uh create what's called custom uh metrics as well so for example",
    "start": "884199",
    "end": "890160"
  },
  {
    "text": "imagine if you wanted to track and to monitor what the memory utilization is",
    "start": "890160",
    "end": "895240"
  },
  {
    "text": "of an ec2 instance by using a custom cloudwatch metric we can actually do",
    "start": "895240",
    "end": "902040"
  },
  {
    "text": "that um so there's a large degree a large selection of metrics that we can",
    "start": "903959",
    "end": "909000"
  },
  {
    "text": "choose when we're creating our alarms so in this simple example here we're actually going to take uh we're going to",
    "start": "909000",
    "end": "914680"
  },
  {
    "text": "look at Network IO and we're going to create an alarm when the io goes above 8",
    "start": "914680",
    "end": "920800"
  },
  {
    "text": "megab per second throughput and alarms can be sent to um",
    "start": "920800",
    "end": "927320"
  },
  {
    "text": "either like an email recip using our simple notification Service uh they can also be sent to uh HTTP endpoints um and",
    "start": "927320",
    "end": "937000"
  },
  {
    "text": "they can also be sent to our sqs service our simple queuing service in this simple example we're going to send an",
    "start": "937000",
    "end": "943720"
  },
  {
    "text": "example of our cloudwatch alarm to an email",
    "start": "943720",
    "end": "948519"
  },
  {
    "text": "address an alarm will have some sort of uh some sort of a metric which will",
    "start": "950839",
    "end": "957440"
  },
  {
    "text": "cause the alarm to trigger and it may be in the case of this if the network IO is",
    "start": "957440",
    "end": "963279"
  },
  {
    "text": "above 8 megabytes per second for a period of say 5 or 10 minutes then",
    "start": "963279",
    "end": "968519"
  },
  {
    "text": "trigger the alarm and here you can see what a",
    "start": "968519",
    "end": "975480"
  },
  {
    "text": "typical alarm would look like if it was sent to an email recipient now it's very",
    "start": "975480",
    "end": "980800"
  },
  {
    "text": "powerful being able to receive an email when there's a change in state within your environment but what's even more",
    "start": "980800",
    "end": "986560"
  },
  {
    "text": "powerful if you start to integrate these alarm services and these notification services with um automated web services",
    "start": "986560",
    "end": "996120"
  },
  {
    "text": "so imagine you have a monitoring service within your Enterprise environment and",
    "start": "996120",
    "end": "1001319"
  },
  {
    "text": "when one of these alarms trigger it actually receives a notification message instead of a",
    "start": "1001319",
    "end": "1008160"
  },
  {
    "text": "human Okay so as was mentioned earlier we have",
    "start": "1012440",
    "end": "1018240"
  },
  {
    "text": "you know over 30 different sort of services that we provide and they're you know mostly they are in",
    "start": "1018240",
    "end": "1026240"
  },
  {
    "text": "inherently fault tolerant as Services however you you should be aware when",
    "start": "1026240",
    "end": "1031360"
  },
  {
    "text": "architecting systems that that services like like a single",
    "start": "1031360",
    "end": "1036839"
  },
  {
    "text": "instance of ec2 like that's a specific resource of ec2 we need to design for",
    "start": "1036839",
    "end": "1043199"
  },
  {
    "text": "failure from that specific instance because while the service itself is tolerant to failure that particular",
    "start": "1043199",
    "end": "1049880"
  },
  {
    "text": "instance is sitting on physical Hardware somewhere inside of the AWS infrastructure and as Vera said",
    "start": "1049880",
    "end": "1056000"
  },
  {
    "text": "everything fails all of the time so it's important to know which services are inherently fault tolerant and which ones",
    "start": "1056000",
    "end": "1062480"
  },
  {
    "text": "we actually need to pay some attention to when we're architecting our",
    "start": "1062480",
    "end": "1067400"
  },
  {
    "text": "systems customers like the likes of Netflix um have obviously created very",
    "start": "1069360",
    "end": "1075120"
  },
  {
    "text": "highly scalable highly durable architectures on top of aw us using these sort of basic building",
    "start": "1075120",
    "end": "1081559"
  },
  {
    "text": "blocks and one of the cool things that's come out of the Netflix Team to help them design and test for failure is the",
    "start": "1081559",
    "end": "1089080"
  },
  {
    "text": "chaos monkey so the chaos monkey is a way for us to uh to",
    "start": "1089080",
    "end": "1095520"
  },
  {
    "text": "introduce failure into our architecture so um the way the chaos",
    "start": "1095520",
    "end": "1101320"
  },
  {
    "text": "monkey works is you tell the chaos monkey how frequent to run every minute",
    "start": "1101320",
    "end": "1106520"
  },
  {
    "text": "every hour and then you tell it what's the probability that you will terminate a single instance within an",
    "start": "1106520",
    "end": "1114320"
  },
  {
    "text": "ultra scaling group okay and hopefully if you've configured the chaos monkey",
    "start": "1114320",
    "end": "1119919"
  },
  {
    "text": "correctly it won't cause complete sort of Havoc within your infrastructure",
    "start": "1119919",
    "end": "1126840"
  },
  {
    "text": "so um I'd highly encourage anybody here today who is really interested in sort",
    "start": "1126840",
    "end": "1132039"
  },
  {
    "text": "of ssops to actually take a closer look at the chaos monkey um they open sourced this so it's now available on GitHub um",
    "start": "1132039",
    "end": "1138919"
  },
  {
    "text": "and I'd highly encourage you to check out the official blog of the Netflix",
    "start": "1138919",
    "end": "1145000"
  },
  {
    "text": "Team okay demonstration part two so first of all let's take a look at what's",
    "start": "1145440",
    "end": "1151559"
  },
  {
    "text": "been happening with our bees with machine guns and maybe let's introduce the chaos",
    "start": "1151559",
    "end": "1157720"
  },
  {
    "text": "monkey to the",
    "start": "1157720",
    "end": "1161080"
  },
  {
    "text": "demonstration okay so let's go back to my summary page",
    "start": "1162799",
    "end": "1170640"
  },
  {
    "text": "H good so we can currently see that there are now three web servers running",
    "start": "1171039",
    "end": "1176280"
  },
  {
    "text": "in my Autos scaling group and if we look at the if I'll just",
    "start": "1176280",
    "end": "1183480"
  },
  {
    "text": "zoom in here if I look at the last hours worth of data you can see this here is the",
    "start": "1183480",
    "end": "1191200"
  },
  {
    "text": "average CPU there's quite a significant Spike has occurred in the last sort of 15 minutes since I instructed the B is",
    "start": "1191200",
    "end": "1198960"
  },
  {
    "text": "to attack my elastic law balancing service and the average there is pretty",
    "start": "1198960",
    "end": "1205880"
  },
  {
    "text": "close to 100% I think you'd agree if I now look at the cumulative",
    "start": "1205880",
    "end": "1214240"
  },
  {
    "text": "CPU you'll see that the cumulative CPU has gone way above 100% and it's",
    "start": "1214240",
    "end": "1219480"
  },
  {
    "text": "actually peaked there over way over 200% so so far so",
    "start": "1219480",
    "end": "1225679"
  },
  {
    "text": "good so let's make the autoscaling service work even harder uh and let's introduce the chaos",
    "start": "1225679",
    "end": "1233320"
  },
  {
    "text": "monkey okay",
    "start": "1236440",
    "end": "1240399"
  },
  {
    "text": "so just excuse me for a moment so the way the chaos monkey is",
    "start": "1244280",
    "end": "1251280"
  },
  {
    "text": "going to work is every minute so every minute the chaos monkey",
    "start": "1251280",
    "end": "1258960"
  },
  {
    "text": "will start and it will look to destroy one of those resources which I hope will",
    "start": "1258960",
    "end": "1264360"
  },
  {
    "text": "increase in the coming minutes with a probability of 10% so for the remaining part of today's",
    "start": "1264360",
    "end": "1270279"
  },
  {
    "text": "session we probably should see maybe two possibly even three uh instances being",
    "start": "1270279",
    "end": "1275600"
  },
  {
    "text": "terminated by the chaos monkey",
    "start": "1275600",
    "end": "1279760"
  },
  {
    "text": "and to to ensure that we see what happens I'm going to disil a log file",
    "start": "1300400",
    "end": "1306840"
  },
  {
    "text": "that's being created by the chaos monkey okay let's get back to the presentation",
    "start": "1306840",
    "end": "1314840"
  },
  {
    "text": "okay so part three the third design uh principle for architecting for the AWS Cloud it's around loose",
    "start": "1320480",
    "end": "1329480"
  },
  {
    "text": "coupling so the idea is for us to build Loosely coupled systems because the more Loosely coupled systems are the bigger",
    "start": "1329520",
    "end": "1337159"
  },
  {
    "text": "they can scale so if at all possi we wish to",
    "start": "1337159",
    "end": "1344600"
  },
  {
    "text": "create independent components I'll give you an example of a tightly sort of coupled system imagine as your web",
    "start": "1344600",
    "end": "1351000"
  },
  {
    "text": "server scales up your application server needs to scale up as well so you'll have a onetoone mapping between web and",
    "start": "1351000",
    "end": "1357720"
  },
  {
    "text": "application server that's not really going to scale very well it's very tightly",
    "start": "1357720",
    "end": "1363640"
  },
  {
    "text": "coupled when you are designing systems try and think of them as publishing them as",
    "start": "1363640",
    "end": "1369080"
  },
  {
    "text": "Services um and also consuming Services as black boxes so I don't need to know",
    "start": "1369080",
    "end": "1374520"
  },
  {
    "text": "the inner workings of how the elastic law balancing service works I just need to know what the feature set is and",
    "start": "1374520",
    "end": "1381960"
  },
  {
    "text": "basically what the API set",
    "start": "1381960",
    "end": "1385480"
  },
  {
    "text": "is let's take a a look at a common uh decoupling challenge so imagine we have",
    "start": "1387880",
    "end": "1394159"
  },
  {
    "text": "a website that uh that allows users to upload multimedia the multimedia then",
    "start": "1394159",
    "end": "1399480"
  },
  {
    "text": "gets encoded and then the encoded version is then uh stored in the",
    "start": "1399480",
    "end": "1405600"
  },
  {
    "text": "cloud if we have a receiver pushing jobs to an encoder and publisher this is another example of a very tightly",
    "start": "1405600",
    "end": "1412080"
  },
  {
    "text": "coupled system so let's make things a bit more interesting and a bit more flexible let's introduce a Quee to this",
    "start": "1412080",
    "end": "1419240"
  },
  {
    "text": "architecture so now when the receiver receives a job to encode a for example a video we place a job on the Queue and",
    "start": "1419240",
    "end": "1427440"
  },
  {
    "text": "then the transcoder and publisher pulls those jobs off the queue as quickly as it can the key thing to note here is the",
    "start": "1427440",
    "end": "1435279"
  },
  {
    "text": "rate at which jobs are placed on the Queue is actually different or it can be different to the rate which they taken",
    "start": "1435279",
    "end": "1441039"
  },
  {
    "text": "off that queue so imagine that we develop our uh",
    "start": "1441039",
    "end": "1446480"
  },
  {
    "text": "receiver service in Java uh we could deploy the uh the Java app in the",
    "start": "1446480",
    "end": "1451840"
  },
  {
    "text": "elastic beant stalk service and when the user uploads some content it interacts with the",
    "start": "1451840",
    "end": "1458919"
  },
  {
    "text": "application running on beanock and then beanock pushes the content out to",
    "start": "1458919",
    "end": "1465720"
  },
  {
    "text": "S3 so how are we going to implement the queuing component of this architecture well we can use the Amazon simple",
    "start": "1467080",
    "end": "1473520"
  },
  {
    "text": "queuing service sqs so once the content has been",
    "start": "1473520",
    "end": "1479399"
  },
  {
    "text": "uploaded to S3 we create we Define a new job and we place it into the",
    "start": "1479399",
    "end": "1486000"
  },
  {
    "text": "queue and then using a combination of ec2 Auto scaling and Cloud watch and",
    "start": "1486159",
    "end": "1492399"
  },
  {
    "text": "maybe cloudwatch will be monitoring the size or the number of items on the Queue",
    "start": "1492399",
    "end": "1497520"
  },
  {
    "text": "we can then scale out and scale in our transcod and Publishing uh",
    "start": "1497520",
    "end": "1504000"
  },
  {
    "text": "instances now that's all very good for a very simple process flow that involves",
    "start": "1504559",
    "end": "1510120"
  },
  {
    "text": "receiving and and transcoding and Publishing but real life is a bit more complicated than that so for a real life",
    "start": "1510120",
    "end": "1517080"
  },
  {
    "text": "example we need to do different things like check the video size is it too long",
    "start": "1517080",
    "end": "1522360"
  },
  {
    "text": "if it is we need to shorten it check the content is it appropriate is it spam um um and after those te those sort",
    "start": "1522360",
    "end": "1531279"
  },
  {
    "text": "of checks have been passed then we undertake the process of transcoding and Publishing the",
    "start": "1531279",
    "end": "1538200"
  },
  {
    "text": "content so let's see how this relatively simple",
    "start": "1542279",
    "end": "1547640"
  },
  {
    "text": "architecture would change if we needed to have all those different steps so you know while this is still a",
    "start": "1547640",
    "end": "1555080"
  },
  {
    "text": "viable architecture on AWS we now have four different cues and each",
    "start": "1555080",
    "end": "1560640"
  },
  {
    "text": "cue basically contains um a series of tasks that need to be",
    "start": "1560640",
    "end": "1566840"
  },
  {
    "text": "completed it's starting to look a little bit complicated",
    "start": "1566840",
    "end": "1571679"
  },
  {
    "text": "though it's going to be pretty hard to maintain if we ever need to make a change to the process that's a business",
    "start": "1572360",
    "end": "1578159"
  },
  {
    "text": "process we're going to need to deploy additional resources it's going to be a little bit tricky to audit and actually",
    "start": "1578159",
    "end": "1584720"
  },
  {
    "text": "see how an a specific job flows through the entire queue and for those of you that have worked",
    "start": "1584720",
    "end": "1589960"
  },
  {
    "text": "with sqs it's a great service but it's probably a little bit too low level for this particular use",
    "start": "1589960",
    "end": "1596039"
  },
  {
    "text": "case so what are we actually trying to do here so if we look at the process flow what we see is that it consists of",
    "start": "1596039",
    "end": "1604440"
  },
  {
    "text": "a series of uh tasks and also a series",
    "start": "1604440",
    "end": "1609919"
  },
  {
    "text": "of decisions and it would be great also if we could have a history of jobs as they",
    "start": "1609919",
    "end": "1616720"
  },
  {
    "text": "sort of flow through our process and if we can make the whole",
    "start": "1616720",
    "end": "1622360"
  },
  {
    "text": "thing stateless that's even better because we all know that stateless scales",
    "start": "1622360",
    "end": "1630520"
  },
  {
    "text": "horizontally how we can solve this is using the Amazon simple workflow service",
    "start": "1630919",
    "end": "1637279"
  },
  {
    "text": "swf so swf works by keeping a track of state it allows us to uh have executed",
    "start": "1637279",
    "end": "1645880"
  },
  {
    "text": "tasks keeps track of things like timeouts and errors so it's very easy to",
    "start": "1645880",
    "end": "1651440"
  },
  {
    "text": "audit and how it does this is it has basically three components we have our",
    "start": "1651440",
    "end": "1656919"
  },
  {
    "text": "deci uh component which basically makes decisions based on the history of a given job in a",
    "start": "1656919",
    "end": "1663559"
  },
  {
    "text": "workflow we also have these worker components which um actually carry out",
    "start": "1663559",
    "end": "1669440"
  },
  {
    "text": "the work and then we have the simple workflow service part that that's basically stores the state for each one",
    "start": "1669440",
    "end": "1676720"
  },
  {
    "text": "of these jobs in the cube",
    "start": "1676720",
    "end": "1680120"
  },
  {
    "text": "so the deciders the way that they work is they pull for work on a decision from a decision list they evaluate the",
    "start": "1682240",
    "end": "1689720"
  },
  {
    "text": "workflow execution history and then they return a decision to the Amazon simple workflow",
    "start": "1689720",
    "end": "1697080"
  },
  {
    "text": "service and when they finished they go back to the beginning and then just do the the whole thing all over",
    "start": "1698600",
    "end": "1705120"
  },
  {
    "text": "again the the worker components they work by pulling for a uh job from a a",
    "start": "1705120",
    "end": "1711399"
  },
  {
    "text": "specific task list they execute the particular task in mind and it could be encoding a video it",
    "start": "1711399",
    "end": "1718320"
  },
  {
    "text": "could be pushing that content to S3 it could be doing some sort of shortening of a",
    "start": "1718320",
    "end": "1723480"
  },
  {
    "text": "video and then they return either a success or a failure and that goes back to the actual State history for a given",
    "start": "1723480",
    "end": "1730080"
  },
  {
    "text": "job flow okay so let's see how this can",
    "start": "1730080",
    "end": "1736880"
  },
  {
    "text": "simplify our architecture",
    "start": "1736880",
    "end": "1740039"
  },
  {
    "text": "so now all we need to do is install our worker and aider components on in this",
    "start": "1746080",
    "end": "1752120"
  },
  {
    "text": "case here ec2 instances and we've now uh that now allows us to replace a",
    "start": "1752120",
    "end": "1758640"
  },
  {
    "text": "significant proportion of the complexity that we saw in the previous architecture and we'll take a closer look at this in",
    "start": "1758640",
    "end": "1764519"
  },
  {
    "text": "a moment one of the great things about the simple workflow service is that all of",
    "start": "1764519",
    "end": "1770519"
  },
  {
    "text": "the scalability best practices that I've talked about and and you can find on our on our website they all apply equally",
    "start": "1770519",
    "end": "1777399"
  },
  {
    "text": "well here so there's nothing stopping as placing our worker nodes these are the",
    "start": "1777399",
    "end": "1783840"
  },
  {
    "text": "things which obviously execute tasks inside of autoscaling",
    "start": "1783840",
    "end": "1789480"
  },
  {
    "text": "groups similarly for when we have the case of large numbers of jobs it may",
    "start": "1789480",
    "end": "1795440"
  },
  {
    "text": "also make sense to have our um decision making uh components also inside of",
    "start": "1795440",
    "end": "1800840"
  },
  {
    "text": "autoscaling groups and hey while we're at it we might as well distribute our load across",
    "start": "1800840",
    "end": "1807080"
  },
  {
    "text": "multiple availability zones within a given region this allows for obviously fault tolerance in the event where we",
    "start": "1807080",
    "end": "1813559"
  },
  {
    "text": "have a partial disruption to service in a single",
    "start": "1813559",
    "end": "1818919"
  },
  {
    "text": "AZ the simple workflow service isn't just restricted to the uh AWS",
    "start": "1821760",
    "end": "1828480"
  },
  {
    "text": "uh environment so if you wish you can install and you can use a simple workflow service inside of your existing",
    "start": "1828480",
    "end": "1835360"
  },
  {
    "text": "Enterprise architecture or infrastructure today and you can either run it wholly from inside of there",
    "start": "1835360",
    "end": "1841760"
  },
  {
    "text": "basically consuming the web service or if you wish you can have a hybrid",
    "start": "1841760",
    "end": "1846840"
  },
  {
    "text": "solution so in the case of needing to burst into the cloud maybe we we can",
    "start": "1846840",
    "end": "1852200"
  },
  {
    "text": "have one or more of our worker nodes running on ec2 inside of the AWS cloud",
    "start": "1852200",
    "end": "1859919"
  },
  {
    "text": "so by using the simple workflow service we can take a relatively complex difficult to manage architecture like",
    "start": "1863360",
    "end": "1870960"
  },
  {
    "text": "this and replace it with something that resembles",
    "start": "1870960",
    "end": "1876159"
  },
  {
    "text": "this one of the great things about the simple workflow service is we don't require you to learn a new programming",
    "start": "1879000",
    "end": "1884799"
  },
  {
    "text": "language so if you're a Java or net developer PHP Pearl whatever it is you",
    "start": "1884799",
    "end": "1890159"
  },
  {
    "text": "can still continue to use those languages with a simple workflow",
    "start": "1890159",
    "end": "1895639"
  },
  {
    "text": "service however if you are a Java developer there are some benefits so we",
    "start": "1895880",
    "end": "1901039"
  },
  {
    "text": "developed this thing called the AWS flow framework and that allows you to develop",
    "start": "1901039",
    "end": "1906440"
  },
  {
    "text": "your entire workflow and express it in sequential code so if you if this is of",
    "start": "1906440",
    "end": "1912360"
  },
  {
    "text": "interest to you I'd highly recommend you check out the swf section of our website",
    "start": "1912360",
    "end": "1919840"
  },
  {
    "text": "okay so how do we decide whether to choose sqs or to use Simple workflow",
    "start": "1920760",
    "end": "1928880"
  },
  {
    "text": "um there's no real right and wrong answer here um I'm going to give you some guidance though if your process",
    "start": "1928880",
    "end": "1935480"
  },
  {
    "text": "flow requires some element of making a decision then it's good practice to use",
    "start": "1935480",
    "end": "1941120"
  },
  {
    "text": "a simple workflow service however if there is no decision logic in your architecture then a simple queue will",
    "start": "1941120",
    "end": "1948080"
  },
  {
    "text": "probably",
    "start": "1948080",
    "end": "1950440"
  },
  {
    "text": "suffice okay section four security Now AWS treats security as our number one",
    "start": "1953720",
    "end": "1960679"
  },
  {
    "text": "priority and I simply cannot cover off security in as much detail as I'd like to within the remaining sort of 10 or 15",
    "start": "1960679",
    "end": "1967480"
  },
  {
    "text": "minutes that I have so I'm going to cover off a few of the key areas and then recommend that you go to the",
    "start": "1967480",
    "end": "1973399"
  },
  {
    "text": "security section of our website uh for certainly for further details I either that I'll come and have a chat with",
    "start": "1973399",
    "end": "1979200"
  },
  {
    "text": "myself or some of the other members of the sa team over in the booth at the end of the",
    "start": "1979200",
    "end": "1985320"
  },
  {
    "text": "session um so as uh as Andy jasse mentioned earlier we have a service",
    "start": "1986760",
    "end": "1992080"
  },
  {
    "text": "called identity and access management am and that allows us to basically restrict",
    "start": "1992080",
    "end": "1998519"
  },
  {
    "text": "access to resources to users and groups and roles within your",
    "start": "1998519",
    "end": "2003720"
  },
  {
    "text": "organization so when you create an AWS account you'll have a user name uh and a",
    "start": "2003720",
    "end": "2009639"
  },
  {
    "text": "password and that will obviously have full control over the resources that you own with I am what we can do in this",
    "start": "2009639",
    "end": "2017159"
  },
  {
    "text": "case here is create three separate groups there's one group for admins and they may have full access to resources",
    "start": "2017159",
    "end": "2023919"
  },
  {
    "text": "there's another group for developers and maybe we'll only allow the developers to stop and start ec2 instances but never",
    "start": "2023919",
    "end": "2030159"
  },
  {
    "text": "to terminate them or to create new ones and then maybe there's a test group and maybe we'll only allow those those guys",
    "start": "2030159",
    "end": "2036760"
  },
  {
    "text": "to actually start new instances um am uh provides multiactor",
    "start": "2036760",
    "end": "2046559"
  },
  {
    "text": "authentication so uh you can use one of these galto Keys like I have here today",
    "start": "2046559",
    "end": "2051800"
  },
  {
    "text": "or you can use uh any software um application that supports the or top uh",
    "start": "2051800",
    "end": "2058040"
  },
  {
    "text": "um uh protocol and that's uh readily available for Android and iPhone",
    "start": "2058040",
    "end": "2065398"
  },
  {
    "text": "Etc so security groups so security groups uh think of",
    "start": "2066520",
    "end": "2072200"
  },
  {
    "text": "these as like firewalls at the hypervisor layer um the layer that controls access to resources inside of",
    "start": "2072200",
    "end": "2078158"
  },
  {
    "text": "AWS and if we take we consider a traditional or a typical sort of three tier architecture what we would",
    "start": "2078159",
    "end": "2084358"
  },
  {
    "text": "typically do is create security groups for each one of those tiers so we would have a security group for the web tier",
    "start": "2084359",
    "end": "2090878"
  },
  {
    "text": "one for the application tier and also one for the database tier and then we would restrict access to each one",
    "start": "2090879",
    "end": "2099280"
  },
  {
    "text": "so for example we may only allow our elastic law balancer to talk directly to",
    "start": "2099280",
    "end": "2104839"
  },
  {
    "text": "our web server tier on Port 80 and Port 443 and never allow it to talk directly",
    "start": "2104839",
    "end": "2111599"
  },
  {
    "text": "to the application tier or to the database here similarly we may uh have a security",
    "start": "2111599",
    "end": "2119400"
  },
  {
    "text": "group rule which only allows the web server tier to talk to say port 8080 on",
    "start": "2119400",
    "end": "2125000"
  },
  {
    "text": "our application server tier and never have the direct contact to our database",
    "start": "2125000",
    "end": "2131240"
  },
  {
    "text": "tier uh certification and accreditation",
    "start": "2133040",
    "end": "2138400"
  },
  {
    "text": "um in the past we've we've published multiple reports for sas70 type 2 uh",
    "start": "2138400",
    "end": "2143960"
  },
  {
    "text": "we're now publishing reports for sock one uh compliance basically the service organization's controls in accordance",
    "start": "2143960",
    "end": "2150599"
  },
  {
    "text": "with the SSA e 16 and the SAE 342 we are Isa 27 01 certified and we",
    "start": "2150599",
    "end": "2159880"
  },
  {
    "text": "have a PCI DSS level one uh uh compliance so that's the that's the the",
    "start": "2159880",
    "end": "2165480"
  },
  {
    "text": "uh credit card um C industry compliance now it is a shared",
    "start": "2165480",
    "end": "2170560"
  },
  {
    "text": "responsibility when you use AWS services and it's very important to remember that when you're architecting your systems we",
    "start": "2170560",
    "end": "2176920"
  },
  {
    "text": "give you the tools to architect highly available highly secure systems but it",
    "start": "2176920",
    "end": "2182000"
  },
  {
    "text": "really is up to you to actually use those tools effectively and we have canonical architectures and best",
    "start": "2182000",
    "end": "2187880"
  },
  {
    "text": "practice white papers to help you do that and finally we have some other",
    "start": "2187880",
    "end": "2193200"
  },
  {
    "text": "certifications that are probably more relevant to to the US market such as fsma and the diap",
    "start": "2193200",
    "end": "2200560"
  },
  {
    "text": "certification okay and to to finish off we're going to take a look at uh",
    "start": "2203160",
    "end": "2208839"
  },
  {
    "text": "performance I've talked about scaling out and scaling in uh we can also scale up in AWS so as of today we have over a",
    "start": "2208839",
    "end": "2217160"
  },
  {
    "text": "dozen different ec2 instance types ranging from virtual machines with small",
    "start": "2217160",
    "end": "2223040"
  },
  {
    "text": "amounts of compute and and uh say almost 700 megabytes of memory right through to",
    "start": "2223040",
    "end": "2229680"
  },
  {
    "text": "very very large instances such as these cluster compute instances you can see",
    "start": "2229680",
    "end": "2234760"
  },
  {
    "text": "here so these have two Intel xon uh sandybridge U architectures eight cores",
    "start": "2234760",
    "end": "2242040"
  },
  {
    "text": "60 GB of memory and over 3 terab of local storage",
    "start": "2242040",
    "end": "2248599"
  },
  {
    "text": "for those applications that would benefit from a general purpose uh graphical processing unit we also have",
    "start": "2248640",
    "end": "2254599"
  },
  {
    "text": "the uh cluster GPU instance types these once again are are dual uh Zeon quad",
    "start": "2254599",
    "end": "2261319"
  },
  {
    "text": "core nalen processors and each one of them has an Nvidia Tesla fmy uh graphics",
    "start": "2261319",
    "end": "2269078"
  },
  {
    "text": "card another area where people can benefit from performance is to C and to",
    "start": "2272800",
    "end": "2278440"
  },
  {
    "text": "buffer between the application tier and the database tier obviously relational databases don't scale really really well",
    "start": "2278440",
    "end": "2286119"
  },
  {
    "text": "um unlike things like for example the Dynamo DB service so we want to try and obviously cache as many of the the reads",
    "start": "2286119",
    "end": "2293160"
  },
  {
    "text": "as possible so what we can do is introduce an in-memory cing service and we have a meme compliant service called",
    "start": "2293160",
    "end": "2299920"
  },
  {
    "text": "elastic C so what we're able to do is instead of",
    "start": "2299920",
    "end": "2306119"
  },
  {
    "text": "interrogating the uh relational database every time we need to do an SQL query we",
    "start": "2306119",
    "end": "2312040"
  },
  {
    "text": "can store Common queries inside of the elastic Cas service and we hit that in memory database first without having to",
    "start": "2312040",
    "end": "2319040"
  },
  {
    "text": "go to the uh the relational database and finally search",
    "start": "2319040",
    "end": "2326359"
  },
  {
    "text": "engines so um I know an organization that's quite experienced at uh at um",
    "start": "2326359",
    "end": "2332000"
  },
  {
    "text": "developing you know highly available highly scalable search uh engines um so",
    "start": "2332000",
    "end": "2337440"
  },
  {
    "text": "so you can see here really any any sort of properties of of a search engine it needs to have the ability to do things",
    "start": "2337440",
    "end": "2343720"
  },
  {
    "text": "like relevance and ranking we need to be able to do a",
    "start": "2343720",
    "end": "2349079"
  },
  {
    "text": "faceted search so select a subset of the total uh objects that we can search from",
    "start": "2349079",
    "end": "2355800"
  },
  {
    "text": "maybe in this case here only search from um products from the gardening",
    "start": "2355800",
    "end": "2362800"
  },
  {
    "text": "section being also able to uh to search based on Range so for example uh what's",
    "start": "2362800",
    "end": "2369400"
  },
  {
    "text": "the average user rating or maybe the the cost of the",
    "start": "2369400",
    "end": "2375160"
  },
  {
    "text": "item and to do so we've we provided a an Amazon Cloud search service so this came",
    "start": "2376760",
    "end": "2382640"
  },
  {
    "text": "out of A9 which is a wholly owned subsidiary of",
    "start": "2382640",
    "end": "2387760"
  },
  {
    "text": "Amazon and basically allows us to do democratized search so basically for the cost of you",
    "start": "2387760",
    "end": "2394839"
  },
  {
    "text": "know almost $100 per month we're able to provide a fully managed search service",
    "start": "2394839",
    "end": "2400520"
  },
  {
    "text": "in the cloud that can be set up and running in less than an hour and it will scale automatically to your needs as the",
    "start": "2400520",
    "end": "2407760"
  },
  {
    "text": "amount of data that it needs to index grows but also the traffic to your um",
    "start": "2407760",
    "end": "2413359"
  },
  {
    "text": "service grows as",
    "start": "2413359",
    "end": "2416359"
  },
  {
    "text": "well the way Cloud search works is we have two endpoints one is a document",
    "start": "2419040",
    "end": "2424400"
  },
  {
    "text": "upload endpoint which is where we send our content to and then we also have a search endpoint",
    "start": "2424400",
    "end": "2429880"
  },
  {
    "text": "this is where we basically make API calls to do the",
    "start": "2429880",
    "end": "2435760"
  },
  {
    "text": "searches and as we can see here as the the amount of data grows and also the amount of traffic grows AWS",
    "start": "2436319",
    "end": "2442880"
  },
  {
    "text": "automatically scales out our um Cloud search",
    "start": "2442880",
    "end": "2449039"
  },
  {
    "text": "service okay so let's go back to our um say our e-commerce uh site and as the",
    "start": "2449119",
    "end": "2456319"
  },
  {
    "text": "throughout the course of the today our autoscaling group for our web server tier grows and",
    "start": "2456319",
    "end": "2462520"
  },
  {
    "text": "shrinks um but that doesn't really help us if there's a s search component of this particular",
    "start": "2462520",
    "end": "2469240"
  },
  {
    "text": "architecture so what we can do is by sending our content to our Cloud search",
    "start": "2469240",
    "end": "2476760"
  },
  {
    "text": "uh service we're able to index that that content and then provide that search",
    "start": "2476760",
    "end": "2482520"
  },
  {
    "text": "functionality to customers consuming our website",
    "start": "2482520",
    "end": "2488040"
  },
  {
    "text": "now one of a large number of canonical or blueprint architectures that we have and we publish in the architecture",
    "start": "2490160",
    "end": "2497119"
  },
  {
    "text": "section of our website is media sharing let's see now how we can take the media sharing architecture and evolve it to",
    "start": "2497119",
    "end": "2505040"
  },
  {
    "text": "add a search component so with any media type of",
    "start": "2505040",
    "end": "2511599"
  },
  {
    "text": "sharing solution we' probably be uploading PDFs multimedia images MP3 3es",
    "start": "2511599",
    "end": "2518160"
  },
  {
    "text": "Etc so we convert these to the search document format post the content to the upload",
    "start": "2518160",
    "end": "2526839"
  },
  {
    "text": "endpoint and then we can introduce Cloud search into this architecture and allow",
    "start": "2526839",
    "end": "2532079"
  },
  {
    "text": "our customers now to search based on the uh the content of the shared media",
    "start": "2532079",
    "end": "2539519"
  },
  {
    "text": "platform okay just to round things out let's take a look at the demonstration and see what Havoc the chaos monkey has",
    "start": "2540119",
    "end": "2546960"
  },
  {
    "text": "called caused so we can see here that the chaos",
    "start": "2546960",
    "end": "2553040"
  },
  {
    "text": "monkey has actually terminated two of my instances so the chaos monkey has been doing its",
    "start": "2553040",
    "end": "2560400"
  },
  {
    "text": "job let's take a look at the number of ec2 instances that we",
    "start": "2560559",
    "end": "2566400"
  },
  {
    "text": "have okay great we can see the two terminations but we can also now see four running instances so the",
    "start": "2566400",
    "end": "2572599"
  },
  {
    "text": "autoscaling rules have now kicked have been kicking in they've been replacing those terminated instances uh not just",
    "start": "2572599",
    "end": "2579400"
  },
  {
    "text": "by the chaos monkey but also uh from the additional load provided by uh Cloud",
    "start": "2579400",
    "end": "2584520"
  },
  {
    "text": "bees so thank you to the uh the demonstration gods they allowed me to do the demonstration",
    "start": "2584520",
    "end": "2591240"
  },
  {
    "text": "today so just rounding this out what I would say",
    "start": "2591240",
    "end": "2598319"
  },
  {
    "text": "is AWS really you should think of our services like a collection of Lego",
    "start": "2598319",
    "end": "2603559"
  },
  {
    "text": "building blocks you pick and choose whatever makes the most sense for the architecture that you're building and all the best architectures",
    "start": "2603559",
    "end": "2611000"
  },
  {
    "text": "evolve over time so make some pragmatic decisions today and then you know return",
    "start": "2611000",
    "end": "2616319"
  },
  {
    "text": "to your architecture over time and over time it will evolve and and improve and become more highly available uh as your",
    "start": "2616319",
    "end": "2623720"
  },
  {
    "text": "as your business scales to meet the demands of your customers thank you for listening",
    "start": "2623720",
    "end": "2629330"
  },
  {
    "text": "[Applause]",
    "start": "2629330",
    "end": "2633909"
  }
]