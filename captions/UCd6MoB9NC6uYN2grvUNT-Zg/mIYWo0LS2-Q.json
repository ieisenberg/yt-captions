[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "[Music]",
    "start": "650",
    "end": "1010"
  },
  {
    "text": "[Applause]",
    "start": "1010",
    "end": "4088"
  },
  {
    "text": "[Music]",
    "start": "4960",
    "end": "11440"
  },
  {
    "text": "hello everyone my name is aarti parupuri",
    "start": "11440",
    "end": "13920"
  },
  {
    "text": "and i am a technical account manager",
    "start": "13920",
    "end": "15519"
  },
  {
    "text": "here at aws office in northern virginia",
    "start": "15519",
    "end": "18880"
  },
  {
    "text": "today i'm going to talk about one of the",
    "start": "18880",
    "end": "20720"
  },
  {
    "text": "most predominantly asked questions by",
    "start": "20720",
    "end": "22720"
  },
  {
    "text": "customers about a lambda function with",
    "start": "22720",
    "end": "24640"
  },
  {
    "text": "an sqs event source",
    "start": "24640",
    "end": "26720"
  },
  {
    "text": "why isn't my land function with an sqs",
    "start": "26720",
    "end": "28800"
  },
  {
    "text": "even source scaling optimally",
    "start": "28800",
    "end": "31279"
  },
  {
    "text": "how do i make sure that my function",
    "start": "31279",
    "end": "33200"
  },
  {
    "text": "scales to the optimal concurrency when",
    "start": "33200",
    "end": "35600"
  },
  {
    "text": "configured with an sqsq as the event",
    "start": "35600",
    "end": "37920"
  },
  {
    "text": "source let's get started let's first",
    "start": "37920",
    "end": "40239"
  },
  {
    "start": "40000",
    "end": "111000"
  },
  {
    "text": "start by understanding how lambda scales",
    "start": "40239",
    "end": "42239"
  },
  {
    "text": "for a standard queue lambda uses long",
    "start": "42239",
    "end": "44559"
  },
  {
    "text": "polling to poll a queue continuously for",
    "start": "44559",
    "end": "46879"
  },
  {
    "text": "messages and invokes the configured",
    "start": "46879",
    "end": "48800"
  },
  {
    "text": "lambda function synchronously with an",
    "start": "48800",
    "end": "51199"
  },
  {
    "text": "event that contains queue messages",
    "start": "51199",
    "end": "54000"
  },
  {
    "text": "lender reads the messages in patches and",
    "start": "54000",
    "end": "56239"
  },
  {
    "text": "invokes your function once for each",
    "start": "56239",
    "end": "58480"
  },
  {
    "text": "patch",
    "start": "58480",
    "end": "59600"
  },
  {
    "text": "when messages are available in the queue",
    "start": "59600",
    "end": "61840"
  },
  {
    "text": "lambda starts with reading up to five",
    "start": "61840",
    "end": "64080"
  },
  {
    "text": "patches in parallel and sends them to",
    "start": "64080",
    "end": "66320"
  },
  {
    "text": "the lambda function",
    "start": "66320",
    "end": "67760"
  },
  {
    "text": "that means up to five concurrent",
    "start": "67760",
    "end": "70080"
  },
  {
    "text": "instances",
    "start": "70080",
    "end": "71280"
  },
  {
    "text": "if an increasing q depth is detected",
    "start": "71280",
    "end": "73680"
  },
  {
    "text": "lambda increases the number of processes",
    "start": "73680",
    "end": "76080"
  },
  {
    "text": "reading the batches by up to 60 more",
    "start": "76080",
    "end": "78320"
  },
  {
    "text": "instances per minute and the scaling",
    "start": "78320",
    "end": "80880"
  },
  {
    "text": "continues until either lambda",
    "start": "80880",
    "end": "83600"
  },
  {
    "text": "concurrency reaches 1000 now please note",
    "start": "83600",
    "end": "87119"
  },
  {
    "text": "that this limit can be increased",
    "start": "87119",
    "end": "89759"
  },
  {
    "text": "account concurrency limit reaches",
    "start": "89759",
    "end": "92400"
  },
  {
    "text": "or per function concurrency limit",
    "start": "92400",
    "end": "94479"
  },
  {
    "text": "reaches",
    "start": "94479",
    "end": "95840"
  },
  {
    "text": "having understood how the scaling",
    "start": "95840",
    "end": "97680"
  },
  {
    "text": "happens let's talk about reasons why a",
    "start": "97680",
    "end": "100560"
  },
  {
    "text": "function would not scale as expected",
    "start": "100560",
    "end": "103520"
  },
  {
    "text": "reason one if there are continuous",
    "start": "103520",
    "end": "105840"
  },
  {
    "text": "lambda function errors noticed these",
    "start": "105840",
    "end": "108399"
  },
  {
    "text": "could be invocation errors or function",
    "start": "108399",
    "end": "110640"
  },
  {
    "text": "execution errors",
    "start": "110640",
    "end": "112560"
  },
  {
    "start": "111000",
    "end": "261000"
  },
  {
    "text": "check for errors in the lambda console",
    "start": "112560",
    "end": "114399"
  },
  {
    "text": "you can go to the lambda console under",
    "start": "114399",
    "end": "116880"
  },
  {
    "text": "monitor and metrics you could see the",
    "start": "116880",
    "end": "119840"
  },
  {
    "text": "error count and success and here's where",
    "start": "119840",
    "end": "121840"
  },
  {
    "text": "you would see the errors",
    "start": "121840",
    "end": "123520"
  },
  {
    "text": "is there any invocation or throttle",
    "start": "123520",
    "end": "125680"
  },
  {
    "text": "errors you would see those errors under",
    "start": "125680",
    "end": "128160"
  },
  {
    "text": "this metric",
    "start": "128160",
    "end": "129759"
  },
  {
    "text": "alternatively you can also click on view",
    "start": "129759",
    "end": "132560"
  },
  {
    "text": "logs in cloud watch",
    "start": "132560",
    "end": "135840"
  },
  {
    "text": "and check for the log details here",
    "start": "135840",
    "end": "139599"
  },
  {
    "text": "to prevent errors from happening at",
    "start": "140319",
    "end": "142239"
  },
  {
    "text": "scale lambda decreases the rate of",
    "start": "142239",
    "end": "144480"
  },
  {
    "text": "invocations when errors occur so these",
    "start": "144480",
    "end": "147920"
  },
  {
    "text": "errors must be identified and resolved",
    "start": "147920",
    "end": "150400"
  },
  {
    "text": "to allow lambda to scale the function",
    "start": "150400",
    "end": "153360"
  },
  {
    "text": "reason 2 if the lambda function is not",
    "start": "153360",
    "end": "156080"
  },
  {
    "text": "configured with optimal concurrency for",
    "start": "156080",
    "end": "158560"
  },
  {
    "text": "the use case",
    "start": "158560",
    "end": "160080"
  },
  {
    "text": "to check the function's concurrency on",
    "start": "160080",
    "end": "162480"
  },
  {
    "text": "the lambda console you can go to",
    "start": "162480",
    "end": "164319"
  },
  {
    "text": "configuration",
    "start": "164319",
    "end": "165680"
  },
  {
    "text": "under concurrency you would see the",
    "start": "165680",
    "end": "168080"
  },
  {
    "text": "functions concurrency currently this",
    "start": "168080",
    "end": "170800"
  },
  {
    "text": "function is using the unreserved account",
    "start": "170800",
    "end": "172959"
  },
  {
    "text": "concurrency which would mean that the",
    "start": "172959",
    "end": "175120"
  },
  {
    "text": "lambda function would share the",
    "start": "175120",
    "end": "176959"
  },
  {
    "text": "concurrency with the other lambda",
    "start": "176959",
    "end": "178879"
  },
  {
    "text": "functions in the account",
    "start": "178879",
    "end": "181760"
  },
  {
    "text": "if you configured the reserved",
    "start": "181760",
    "end": "183360"
  },
  {
    "text": "concurrency on your function then your",
    "start": "183360",
    "end": "185519"
  },
  {
    "text": "function is throttled when it reaches",
    "start": "185519",
    "end": "187519"
  },
  {
    "text": "the reserved value",
    "start": "187519",
    "end": "189440"
  },
  {
    "text": "it's a best practice to make sure that",
    "start": "189440",
    "end": "192080"
  },
  {
    "text": "the amount of concurrency reserved for",
    "start": "192080",
    "end": "194640"
  },
  {
    "text": "your function is at least 1000 for",
    "start": "194640",
    "end": "198239"
  },
  {
    "text": "standard amazon queues or at least the",
    "start": "198239",
    "end": "201040"
  },
  {
    "text": "number of active message groups or",
    "start": "201040",
    "end": "202959"
  },
  {
    "text": "higher for fifo queues",
    "start": "202959",
    "end": "205360"
  },
  {
    "text": "if you haven't configured reserved",
    "start": "205360",
    "end": "207040"
  },
  {
    "text": "concurrency on your function then your",
    "start": "207040",
    "end": "209280"
  },
  {
    "text": "function has a default unreserved",
    "start": "209280",
    "end": "211280"
  },
  {
    "text": "concurrency of 1000 which is shared with",
    "start": "211280",
    "end": "214319"
  },
  {
    "text": "other functions in the same aws account",
    "start": "214319",
    "end": "216879"
  },
  {
    "text": "and region",
    "start": "216879",
    "end": "218319"
  },
  {
    "text": "if there's at least 1 000 unreserved",
    "start": "218319",
    "end": "220400"
  },
  {
    "text": "concurrency available in your functions",
    "start": "220400",
    "end": "222560"
  },
  {
    "text": "region then the function continues to",
    "start": "222560",
    "end": "224799"
  },
  {
    "text": "scale until it reaches the maximum",
    "start": "224799",
    "end": "226959"
  },
  {
    "text": "concurrency",
    "start": "226959",
    "end": "228959"
  },
  {
    "text": "invocations are throttled when all of",
    "start": "228959",
    "end": "231120"
  },
  {
    "text": "your unreserved concurrency is in use",
    "start": "231120",
    "end": "234879"
  },
  {
    "text": "to scale up additional concurrent",
    "start": "234879",
    "end": "237040"
  },
  {
    "text": "invocations your account must not be",
    "start": "237040",
    "end": "239760"
  },
  {
    "text": "near the service quota for scaling or",
    "start": "239760",
    "end": "242239"
  },
  {
    "text": "burst concurrency in the region",
    "start": "242239",
    "end": "244640"
  },
  {
    "text": "you can request a service quota increase",
    "start": "244640",
    "end": "246720"
  },
  {
    "text": "in the service quotas console if you",
    "start": "246720",
    "end": "248799"
  },
  {
    "text": "need a higher concurrency for a specific",
    "start": "248799",
    "end": "250799"
  },
  {
    "text": "region",
    "start": "250799",
    "end": "252080"
  },
  {
    "text": "and finally the most obvious reason",
    "start": "252080",
    "end": "254560"
  },
  {
    "text": "preventing a lambda function from",
    "start": "254560",
    "end": "256320"
  },
  {
    "text": "scaling is if there are not enough",
    "start": "256320",
    "end": "258720"
  },
  {
    "text": "messages in the sql sq",
    "start": "258720",
    "end": "261440"
  },
  {
    "start": "261000",
    "end": "301000"
  },
  {
    "text": "if an amazon sql sq is configured to",
    "start": "261440",
    "end": "264000"
  },
  {
    "text": "invoke a lambda function then lambda",
    "start": "264000",
    "end": "266320"
  },
  {
    "text": "will scale invocations only if there are",
    "start": "266320",
    "end": "268800"
  },
  {
    "text": "messages in the queue to check how many",
    "start": "268800",
    "end": "271120"
  },
  {
    "text": "messages in your sqs queue still need to",
    "start": "271120",
    "end": "273600"
  },
  {
    "text": "be processed review the approximate",
    "start": "273600",
    "end": "276080"
  },
  {
    "text": "number of messages visible metric you",
    "start": "276080",
    "end": "278479"
  },
  {
    "text": "can check that data in your sqs console",
    "start": "278479",
    "end": "281040"
  },
  {
    "text": "by going to the monitoring section and",
    "start": "281040",
    "end": "283280"
  },
  {
    "text": "checking the approximate number of",
    "start": "283280",
    "end": "284800"
  },
  {
    "text": "messages visible metric",
    "start": "284800",
    "end": "286960"
  },
  {
    "text": "if the metric is low or is at zero your",
    "start": "286960",
    "end": "289680"
  },
  {
    "text": "lambda function will not scale",
    "start": "289680",
    "end": "291919"
  },
  {
    "text": "and if the metric is high and there are",
    "start": "291919",
    "end": "293919"
  },
  {
    "text": "no invocation errors you can try",
    "start": "293919",
    "end": "296160"
  },
  {
    "text": "increasing the patch size on your event",
    "start": "296160",
    "end": "298160"
  },
  {
    "text": "notification",
    "start": "298160",
    "end": "299520"
  },
  {
    "text": "now",
    "start": "299520",
    "end": "300320"
  },
  {
    "text": "please note that the maximum batch size",
    "start": "300320",
    "end": "302320"
  },
  {
    "start": "301000",
    "end": "332000"
  },
  {
    "text": "for a standard amazon sql sql is 10 000",
    "start": "302320",
    "end": "305120"
  },
  {
    "text": "records",
    "start": "305120",
    "end": "306400"
  },
  {
    "text": "you can update the event source",
    "start": "306400",
    "end": "308479"
  },
  {
    "text": "maximum batching window in seconds to",
    "start": "308479",
    "end": "310720"
  },
  {
    "text": "the desired value",
    "start": "310720",
    "end": "312320"
  },
  {
    "text": "and for fifo queues the maximum batch",
    "start": "312320",
    "end": "314720"
  },
  {
    "text": "size is 10 records",
    "start": "314720",
    "end": "317440"
  },
  {
    "text": "thank you for watching and happy cloud",
    "start": "317440",
    "end": "319280"
  },
  {
    "text": "computing from all of us here at ews",
    "start": "319280",
    "end": "322780"
  },
  {
    "text": "[Applause]",
    "start": "322780",
    "end": "325860"
  },
  {
    "text": "[Music]",
    "start": "329740",
    "end": "331039"
  },
  {
    "text": "you",
    "start": "331039",
    "end": "333120"
  }
]