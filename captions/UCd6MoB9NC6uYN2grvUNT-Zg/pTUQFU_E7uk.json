[
  {
    "text": "(upbeat music)",
    "start": "0",
    "end": "2667"
  },
  {
    "text": "- Hi everyone. My name's Chris.",
    "start": "4200",
    "end": "5217"
  },
  {
    "text": "I'm a Solution Architect here at AWS.",
    "start": "5217",
    "end": "8550"
  },
  {
    "text": "Who out there is a customer of Trainline?",
    "start": "8550",
    "end": "11130"
  },
  {
    "text": "I bet there's lots of you",
    "start": "11130",
    "end": "12180"
  },
  {
    "text": "because Trainline is an incredible company",
    "start": "12180",
    "end": "15150"
  },
  {
    "text": "and is a household name for\nthose of us here in the UK.",
    "start": "15150",
    "end": "18960"
  },
  {
    "text": "Well, we have an opportunity now",
    "start": "18960",
    "end": "20550"
  },
  {
    "text": "to actually hear from the Trainline",
    "start": "20550",
    "end": "22230"
  },
  {
    "text": "about how they migrated\nto Amazon DynamoDB.",
    "start": "22230",
    "end": "26039"
  },
  {
    "text": "So to start the story,",
    "start": "26040",
    "end": "27450"
  },
  {
    "text": "I would like to welcome\nJamie from Trainline.",
    "start": "27450",
    "end": "29310"
  },
  {
    "text": "And Jamie, I'd like to ask,",
    "start": "29310",
    "end": "30570"
  },
  {
    "text": "can you introduce yourself and\ntell us about the Trainline?",
    "start": "30570",
    "end": "33030"
  },
  {
    "text": "- My name is Jamie Beaumont.",
    "start": "33030",
    "end": "34379"
  },
  {
    "text": "I'm Director of Architecture\nand Engineering at Trainline",
    "start": "34380",
    "end": "36987"
  },
  {
    "text": "and also Chief Architect.",
    "start": "36987",
    "end": "39120"
  },
  {
    "text": "I'm here to talk about\nhow we're using DynamoDB",
    "start": "39120",
    "end": "42360"
  },
  {
    "text": "to improve reliability and\nscalability of our platform.",
    "start": "42360",
    "end": "46080"
  },
  {
    "text": "But first we'll talk a\nlittle bit about Trainline.",
    "start": "46080",
    "end": "49350"
  },
  {
    "text": "Trainline is Europe's leading\nindependent rail platform",
    "start": "49350",
    "end": "53309"
  },
  {
    "text": "with over 5 billion in net\nticket sales each year.",
    "start": "53310",
    "end": "56490"
  },
  {
    "text": "Our purpose is to empower\ngreener travel choices,",
    "start": "56490",
    "end": "59370"
  },
  {
    "text": "connecting people in places.",
    "start": "59370",
    "end": "61860"
  },
  {
    "text": "For all of you regular\ntrain users, well done.",
    "start": "61860",
    "end": "65250"
  },
  {
    "text": "You're all eco heroes.",
    "start": "65250",
    "end": "66840"
  },
  {
    "text": "If you travel by train,",
    "start": "66840",
    "end": "68340"
  },
  {
    "text": "you produce on average\nseven times less CO2",
    "start": "68340",
    "end": "71939"
  },
  {
    "text": "than if you were to travel in car",
    "start": "71940",
    "end": "74070"
  },
  {
    "text": "and over 20 times that if\nyou were to travel by plane.",
    "start": "74070",
    "end": "78750"
  },
  {
    "text": "But how complicated can selling\ntrain tickets actually be?",
    "start": "78750",
    "end": "81720"
  },
  {
    "text": "Well, it turns out, more\ncomplicated than you'd think.",
    "start": "81720",
    "end": "84420"
  },
  {
    "text": "So, Trainline is Europe's\nnumber one rail travel app,",
    "start": "85320",
    "end": "89760"
  },
  {
    "text": "retailing tickets for\nover 300 different rail",
    "start": "89760",
    "end": "92820"
  },
  {
    "text": "and coach companies across Europe.",
    "start": "92820",
    "end": "95909"
  },
  {
    "text": "We handle on average 3 million unique",
    "start": "95910",
    "end": "98790"
  },
  {
    "text": "origin-destination\ncombinations each month,",
    "start": "98790",
    "end": "103080"
  },
  {
    "text": "managing the complexity of\ntimetables, routing options,",
    "start": "103080",
    "end": "107940"
  },
  {
    "text": "rail fair structures\nand quota-based pricing.",
    "start": "107940",
    "end": "110823"
  },
  {
    "text": "And we don't just sell\ntrain tickets either.",
    "start": "111780",
    "end": "114479"
  },
  {
    "text": "We also deal with the complexities",
    "start": "114480",
    "end": "117060"
  },
  {
    "text": "of real time travel updates by\nintegrating into the network.",
    "start": "117060",
    "end": "120632"
  },
  {
    "text": "We're also not just a\nconsumer business, too,",
    "start": "121680",
    "end": "124440"
  },
  {
    "text": "we offer rail travel booking solutions",
    "start": "124440",
    "end": "127110"
  },
  {
    "text": "to businesses large and small,",
    "start": "127110",
    "end": "129210"
  },
  {
    "text": "and we're also a white\nlabel train booking platform",
    "start": "129210",
    "end": "133410"
  },
  {
    "text": "to the train operating companies.",
    "start": "133410",
    "end": "135900"
  },
  {
    "text": "So here's some numbers that\nhighlight our complexity",
    "start": "135900",
    "end": "138930"
  },
  {
    "text": "in terms of our technology landscape.",
    "start": "138930",
    "end": "140609"
  },
  {
    "text": "We moved to AWS in 2016,",
    "start": "140610",
    "end": "143040"
  },
  {
    "text": "but largely this was a lift\nand shift to virtual machines,",
    "start": "143040",
    "end": "145680"
  },
  {
    "text": "keeping our previous SQL\nserver estate largely intact.",
    "start": "145680",
    "end": "148439"
  },
  {
    "text": "Once there, we went through\na significant replatforming",
    "start": "148440",
    "end": "151170"
  },
  {
    "text": "to a microservice architecture,\nas everybody does,",
    "start": "151170",
    "end": "154080"
  },
  {
    "text": "ready for our IPO in 2019.",
    "start": "154080",
    "end": "156270"
  },
  {
    "text": "But again, to reduce the risk of delivery,",
    "start": "156270",
    "end": "159210"
  },
  {
    "text": "we largely kept our\nexisting infrastructure",
    "start": "159210",
    "end": "162270"
  },
  {
    "text": "and database technologies.",
    "start": "162270",
    "end": "163530"
  },
  {
    "text": "One of our biggest recent challenges",
    "start": "163530",
    "end": "165780"
  },
  {
    "text": "has been growth in traffic volumes,",
    "start": "165780",
    "end": "167730"
  },
  {
    "text": "which have over doubled since pre-COVID.",
    "start": "167730",
    "end": "169920"
  },
  {
    "text": "These volumes have been largely driven",
    "start": "169920",
    "end": "172200"
  },
  {
    "text": "by the adoption of digital\ntickets on the network,",
    "start": "172200",
    "end": "175290"
  },
  {
    "text": "but also the shift in\nflexible working practices,",
    "start": "175290",
    "end": "178680"
  },
  {
    "text": "where people are buying\nfewer season tickets",
    "start": "178680",
    "end": "182250"
  },
  {
    "text": "and more likely to move\non-the-day walkup tickets.",
    "start": "182250",
    "end": "185430"
  },
  {
    "text": "The key number to remember of this talk",
    "start": "185430",
    "end": "187079"
  },
  {
    "text": "is those 150 SQL server databases,",
    "start": "187080",
    "end": "190500"
  },
  {
    "text": "of which around about\n40 were mission critical",
    "start": "190500",
    "end": "193290"
  },
  {
    "text": "when we started on this journey.",
    "start": "193290",
    "end": "195060"
  },
  {
    "text": "So onto our journey in leveraging\nthe benefits of DynamoDB.",
    "start": "195060",
    "end": "198750"
  },
  {
    "text": "Let's talk about our starting point.",
    "start": "198750",
    "end": "200400"
  },
  {
    "text": "We had a suitably large\nmaintenance overhead",
    "start": "200400",
    "end": "203730"
  },
  {
    "text": "and had a large database\nteam to manage these.",
    "start": "203730",
    "end": "206817"
  },
  {
    "text": "Our DBAs were focused mainly\non housekeeping activities",
    "start": "206817",
    "end": "210060"
  },
  {
    "text": "and trying to optimize\nthe performance to try",
    "start": "210060",
    "end": "212099"
  },
  {
    "text": "and support the increasing\nscale of traffic volumes.",
    "start": "212100",
    "end": "215190"
  },
  {
    "text": "These SQL server databases\nbecame increasingly difficult",
    "start": "215190",
    "end": "218100"
  },
  {
    "text": "to scale as traffic volumes increased,",
    "start": "218100",
    "end": "220590"
  },
  {
    "text": "and led to a number of\nsignificant stability problems.",
    "start": "220590",
    "end": "225120"
  },
  {
    "text": "This culminated in a number\nof high-profile outages",
    "start": "225120",
    "end": "228659"
  },
  {
    "text": "caused by database failures,",
    "start": "228660",
    "end": "230520"
  },
  {
    "text": "and when databases fail,",
    "start": "230520",
    "end": "232050"
  },
  {
    "text": "they tend to take a while to recover.",
    "start": "232050",
    "end": "234090"
  },
  {
    "text": "Using a SQL server for everything meant",
    "start": "234090",
    "end": "236069"
  },
  {
    "text": "that we're using it for things\nthat it isn't optimized for,",
    "start": "236070",
    "end": "239250"
  },
  {
    "text": "like storing large JSON documents",
    "start": "239250",
    "end": "242400"
  },
  {
    "text": "and acting as complex search indexes.",
    "start": "242400",
    "end": "245280"
  },
  {
    "text": "We've also had problems\nwith the use of DynamoDB",
    "start": "245280",
    "end": "248280"
  },
  {
    "text": "on the fringes of our stack",
    "start": "248280",
    "end": "250709"
  },
  {
    "text": "with instances of DynamoDB\nbeing used largely",
    "start": "250710",
    "end": "254880"
  },
  {
    "text": "as relational databases.",
    "start": "254880",
    "end": "256739"
  },
  {
    "text": "All of this led to a general desire",
    "start": "256740",
    "end": "259739"
  },
  {
    "text": "to gain the benefits of\nplatform-as-a-service databases",
    "start": "259740",
    "end": "264740"
  },
  {
    "text": "based upon collective experiences of",
    "start": "264990",
    "end": "267569"
  },
  {
    "text": "these type of technologies\nin previous companies.",
    "start": "267570",
    "end": "270150"
  },
  {
    "text": "So let's talk about our approach.",
    "start": "270150",
    "end": "271680"
  },
  {
    "text": "Rather than allowing every single engineer",
    "start": "271680",
    "end": "273780"
  },
  {
    "text": "to pick their own preferred database tech,",
    "start": "273780",
    "end": "276420"
  },
  {
    "text": "we took a cloud-first approach",
    "start": "276420",
    "end": "277920"
  },
  {
    "text": "and identified a single AWS\nnative cloud database technology",
    "start": "277920",
    "end": "282720"
  },
  {
    "text": "for each database type,",
    "start": "282720",
    "end": "284430"
  },
  {
    "text": "allowing us to operationally harden",
    "start": "284430",
    "end": "286530"
  },
  {
    "text": "and become real experts\nin these technologies.",
    "start": "286530",
    "end": "288900"
  },
  {
    "text": "We identified a number\nof pathfinder projects",
    "start": "288900",
    "end": "291419"
  },
  {
    "text": "bringing together product, database,",
    "start": "291420",
    "end": "294240"
  },
  {
    "text": "and infrastructure engineering experts",
    "start": "294240",
    "end": "296160"
  },
  {
    "text": "to prove out these technologies\nwith support from AWS",
    "start": "296160",
    "end": "299340"
  },
  {
    "text": "to accelerate and help us along the way.",
    "start": "299340",
    "end": "302190"
  },
  {
    "text": "We're now three quarters of the way",
    "start": "302190",
    "end": "303810"
  },
  {
    "text": "through a really punchy two-year target",
    "start": "303810",
    "end": "305910"
  },
  {
    "text": "to migrate 75% of our\nmission critical databases",
    "start": "305910",
    "end": "310020"
  },
  {
    "text": "onto a mixture of DynamoDB\nand Aurora Postgres.",
    "start": "310020",
    "end": "313979"
  },
  {
    "text": "That's around 30 operational databases,",
    "start": "313980",
    "end": "316710"
  },
  {
    "text": "storing around 44 terabytes\nof data across the estate.",
    "start": "316710",
    "end": "320220"
  },
  {
    "text": "Chris, please tell me a little\nbit more about DynamoDB.",
    "start": "320220",
    "end": "322650"
  },
  {
    "text": "- Yeah, sure.",
    "start": "322650",
    "end": "324120"
  },
  {
    "text": "It's very interesting to hear about",
    "start": "324120",
    "end": "325620"
  },
  {
    "text": "some of the challenges\nthat Trainline has faced",
    "start": "325620",
    "end": "327780"
  },
  {
    "text": "because they sound familiar\nto those of us at Amazon.",
    "start": "327780",
    "end": "331560"
  },
  {
    "text": "We experienced something\nsimilar back in 2004.",
    "start": "331560",
    "end": "334000"
  },
  {
    "text": "So if we rewind back to then,",
    "start": "334000",
    "end": "336210"
  },
  {
    "text": "Amazon experienced a multi-hour outage",
    "start": "336210",
    "end": "338639"
  },
  {
    "text": "during peak retail time.",
    "start": "338640",
    "end": "341370"
  },
  {
    "text": "Our engineers performed a deep dive",
    "start": "341370",
    "end": "343410"
  },
  {
    "text": "to find out what the root\ncause was of the issue,",
    "start": "343410",
    "end": "345840"
  },
  {
    "text": "and our conclusion, even\nthough we were running",
    "start": "345840",
    "end": "348780"
  },
  {
    "text": "on what was considered\nto be the gold standard",
    "start": "348780",
    "end": "351300"
  },
  {
    "text": "of relational databases for that time,",
    "start": "351300",
    "end": "353729"
  },
  {
    "text": "we felt that we had reached\npeak relational database.",
    "start": "353730",
    "end": "357750"
  },
  {
    "text": "A close look at how we used our databases",
    "start": "357750",
    "end": "360330"
  },
  {
    "text": "produced some interesting insights.",
    "start": "360330",
    "end": "362849"
  },
  {
    "text": "So, the first is that\nfor 70% of the operations",
    "start": "362850",
    "end": "366120"
  },
  {
    "text": "that we were performing on\nour relational databases,",
    "start": "366120",
    "end": "369270"
  },
  {
    "text": "we would use a primary key",
    "start": "369270",
    "end": "370949"
  },
  {
    "text": "and we would get back a single row.",
    "start": "370950",
    "end": "372783"
  },
  {
    "text": "For a further 20%, we\nwould get a set of rows,",
    "start": "373830",
    "end": "377069"
  },
  {
    "text": "but they would come from the same table.",
    "start": "377070",
    "end": "379740"
  },
  {
    "text": "So for 90% of our operations\non our relational databases,",
    "start": "379740",
    "end": "384150"
  },
  {
    "text": "we were not taking\nadvantage of the strengths",
    "start": "384150",
    "end": "386699"
  },
  {
    "text": "that relational databases bring.",
    "start": "386700",
    "end": "388830"
  },
  {
    "text": "So we embarked on a journey to\nbuild a new kind of database,",
    "start": "388830",
    "end": "392189"
  },
  {
    "text": "a database whose strengths\naligned to the 90% of operations",
    "start": "392190",
    "end": "396420"
  },
  {
    "text": "that we were actually performing.",
    "start": "396420",
    "end": "398070"
  },
  {
    "text": "That database would be Amazon DynamoDB.",
    "start": "399120",
    "end": "402690"
  },
  {
    "text": "So what is Amazon DynamoDB?",
    "start": "402690",
    "end": "404370"
  },
  {
    "text": "It's a fully managed, serverless,",
    "start": "404370",
    "end": "406590"
  },
  {
    "text": "key value, NoSQL database.",
    "start": "406590",
    "end": "409110"
  },
  {
    "text": "It's API driven.",
    "start": "409110",
    "end": "410550"
  },
  {
    "text": "You create tables, you modify tables,",
    "start": "410550",
    "end": "413250"
  },
  {
    "text": "you write data to tables\nand read data from tables",
    "start": "413250",
    "end": "416940"
  },
  {
    "text": "all over a HTTP based API.",
    "start": "416940",
    "end": "420420"
  },
  {
    "text": "You use an SDK, the one that is",
    "start": "420420",
    "end": "423060"
  },
  {
    "text": "for your chosen programming language,",
    "start": "423060",
    "end": "425160"
  },
  {
    "text": "but it uses HTTP API requests.",
    "start": "425160",
    "end": "429000"
  },
  {
    "text": "Under the hood, we've\nbuilt a highly resilient,",
    "start": "429000",
    "end": "431700"
  },
  {
    "text": "scalable, distributed system\nto service those API requests.",
    "start": "431700",
    "end": "436700"
  },
  {
    "text": "That distributed system is\nmade up of multiple components,",
    "start": "437910",
    "end": "441000"
  },
  {
    "text": "like request routers and storage nodes.",
    "start": "441000",
    "end": "444630"
  },
  {
    "text": "The way to think about a request router",
    "start": "444630",
    "end": "446670"
  },
  {
    "text": "is it's a node that receives your request",
    "start": "446670",
    "end": "449700"
  },
  {
    "text": "and it understands where it should go,",
    "start": "449700",
    "end": "452160"
  },
  {
    "text": "and then it forwards it on\nto the relevant storage node.",
    "start": "452160",
    "end": "455433"
  },
  {
    "text": "Storage nodes actually\nstore your table data",
    "start": "456510",
    "end": "459990"
  },
  {
    "text": "and there are a huge number of these.",
    "start": "459990",
    "end": "462479"
  },
  {
    "text": "A storage node holds a piece,",
    "start": "462480",
    "end": "464880"
  },
  {
    "text": "what we call a partition, of your table.",
    "start": "464880",
    "end": "468360"
  },
  {
    "text": "But all that's transparent for you.",
    "start": "468360",
    "end": "470310"
  },
  {
    "text": "You see an API, we handle the rest.",
    "start": "470310",
    "end": "473553"
  },
  {
    "text": "Today, DynamoDB is a tier 0\nservice powering most of Amazon.",
    "start": "474540",
    "end": "479540"
  },
  {
    "text": "If that little bit of insight\nas to how DynamoDB works",
    "start": "481230",
    "end": "484380"
  },
  {
    "text": "under the hood has gained your interest,",
    "start": "484380",
    "end": "486990"
  },
  {
    "text": "there's a QR code here on the slide",
    "start": "486990",
    "end": "489030"
  },
  {
    "text": "and a link in the description below",
    "start": "489030",
    "end": "490950"
  },
  {
    "text": "that you can follow\nthat'll take you to a paper",
    "start": "490950",
    "end": "493500"
  },
  {
    "text": "that was written by the\nDynamoDB Service Team",
    "start": "493500",
    "end": "495750"
  },
  {
    "text": "a couple of years ago that gives you",
    "start": "495750",
    "end": "497220"
  },
  {
    "text": "lots of interesting detail",
    "start": "497220",
    "end": "498960"
  },
  {
    "text": "about how DynamoDB works under the hood.",
    "start": "498960",
    "end": "501840"
  },
  {
    "text": "But let's explore what DynamoDB\nhas to offer a little more.",
    "start": "501840",
    "end": "506580"
  },
  {
    "text": "What are its core characteristics?",
    "start": "506580",
    "end": "508500"
  },
  {
    "text": "Well, the first characteristic\nis performance at scale.",
    "start": "508500",
    "end": "511680"
  },
  {
    "text": "When you use DynamoDB,",
    "start": "511680",
    "end": "513180"
  },
  {
    "text": "you will get consistent\nsingle-digit millisecond read",
    "start": "513180",
    "end": "516510"
  },
  {
    "text": "and write performance at any scale",
    "start": "516510",
    "end": "519599"
  },
  {
    "text": "with virtually unlimited\nthroughput and storage.",
    "start": "519600",
    "end": "523440"
  },
  {
    "text": "And we have lots of public\nexamples of DynamoDB handling",
    "start": "523440",
    "end": "526500"
  },
  {
    "text": "that kind of huge scale\nfrom customers like Amazon,",
    "start": "526500",
    "end": "529980"
  },
  {
    "text": "but also customers like Disney+, Netflix,",
    "start": "529980",
    "end": "533279"
  },
  {
    "text": "Dropbox, Snap, Zoom and more.",
    "start": "533280",
    "end": "536790"
  },
  {
    "text": "So again, I've got a QR code on the slide",
    "start": "536790",
    "end": "538980"
  },
  {
    "text": "and another link down in the description.",
    "start": "538980",
    "end": "540899"
  },
  {
    "text": "If you follow that, you can get to",
    "start": "540900",
    "end": "543000"
  },
  {
    "text": "lots of our public examples of customers",
    "start": "543000",
    "end": "545070"
  },
  {
    "text": "who are using DynamoDB in\nlots of interesting ways.",
    "start": "545070",
    "end": "548700"
  },
  {
    "text": "What's the next interesting\ncharacteristic of DynamoDB?",
    "start": "548700",
    "end": "551340"
  },
  {
    "text": "Well, it's secure and resilient.",
    "start": "551340",
    "end": "554160"
  },
  {
    "text": "It's highly available by design.",
    "start": "554160",
    "end": "557009"
  },
  {
    "text": "You don't think about availability zones",
    "start": "557010",
    "end": "559410"
  },
  {
    "text": "or placing instances",
    "start": "559410",
    "end": "561389"
  },
  {
    "text": "or having readers and\nwriters and replicas.",
    "start": "561390",
    "end": "564810"
  },
  {
    "text": "You create tables, you see tables,",
    "start": "564810",
    "end": "567720"
  },
  {
    "text": "and under the hood, we\nwrite all of your data",
    "start": "567720",
    "end": "570600"
  },
  {
    "text": "from your tables to\nthree availability zones,",
    "start": "570600",
    "end": "572819"
  },
  {
    "text": "making DynamoDB highly\navailable by design.",
    "start": "572820",
    "end": "576330"
  },
  {
    "text": "It also comes with data\nencryption at rest,",
    "start": "576330",
    "end": "578700"
  },
  {
    "text": "where you can choose what\nlevel of control you want",
    "start": "578700",
    "end": "581520"
  },
  {
    "text": "over the key that has been\nused for that encryption.",
    "start": "581520",
    "end": "584610"
  },
  {
    "text": "It comes with fine-grained access control",
    "start": "584610",
    "end": "586709"
  },
  {
    "text": "with AWS IAM and resource policies.",
    "start": "586710",
    "end": "589710"
  },
  {
    "text": "If you're already using AWS,",
    "start": "589710",
    "end": "591540"
  },
  {
    "text": "those should be very familiar to you.",
    "start": "591540",
    "end": "594000"
  },
  {
    "text": "It does multi-writer global replication.",
    "start": "594000",
    "end": "596910"
  },
  {
    "text": "When you create a DynamoDB table,",
    "start": "596910",
    "end": "598620"
  },
  {
    "text": "you choose the AWS region",
    "start": "598620",
    "end": "600029"
  },
  {
    "text": "that you want your table to exist in.",
    "start": "600030",
    "end": "602460"
  },
  {
    "text": "If you want to, you can\nchoose to extend that table",
    "start": "602460",
    "end": "605040"
  },
  {
    "text": "into other AWS regions.",
    "start": "605040",
    "end": "607320"
  },
  {
    "text": "Amazon will deal with\nreplicating your data",
    "start": "607320",
    "end": "609390"
  },
  {
    "text": "to those other regions,",
    "start": "609390",
    "end": "610860"
  },
  {
    "text": "and then you can read and\nwrite to any of the regions",
    "start": "610860",
    "end": "614160"
  },
  {
    "text": "where your table exists,",
    "start": "614160",
    "end": "616199"
  },
  {
    "text": "and DynamoDB will deal with\nreplicating those changes",
    "start": "616200",
    "end": "619320"
  },
  {
    "text": "into your other regions.",
    "start": "619320",
    "end": "621660"
  },
  {
    "text": "And all of this is backed by an SLA,",
    "start": "621660",
    "end": "623550"
  },
  {
    "text": "four nines if your table\nexists in a single region,",
    "start": "623550",
    "end": "626459"
  },
  {
    "text": "five nines if it exists\nin more than one region.",
    "start": "626460",
    "end": "629283"
  },
  {
    "text": "DynamoDB is also serverless.",
    "start": "631590",
    "end": "633570"
  },
  {
    "text": "We speak to customers all the time",
    "start": "633570",
    "end": "635100"
  },
  {
    "text": "who have need for performance at scale,",
    "start": "635100",
    "end": "637620"
  },
  {
    "text": "but there are some customers",
    "start": "637620",
    "end": "638453"
  },
  {
    "text": "who don't need performance at scale.",
    "start": "638453",
    "end": "640020"
  },
  {
    "text": "Maybe they don't need it today,",
    "start": "640020",
    "end": "641280"
  },
  {
    "text": "maybe they won't need it ever.",
    "start": "641280",
    "end": "643050"
  },
  {
    "text": "But we still see those customers\nchoosing to use DynamoDB",
    "start": "643050",
    "end": "646230"
  },
  {
    "text": "because it's truly serverless.",
    "start": "646230",
    "end": "648360"
  },
  {
    "text": "What does that mean?",
    "start": "648360",
    "end": "649380"
  },
  {
    "text": "There's no infrastructure\nfor you to provision.",
    "start": "649380",
    "end": "651360"
  },
  {
    "text": "You don't need to think about clusters,",
    "start": "651360",
    "end": "652920"
  },
  {
    "text": "you don't need to think about\ninstances or instance sizes.",
    "start": "652920",
    "end": "656130"
  },
  {
    "text": "You don't need to think\nabout instance placement",
    "start": "656130",
    "end": "657840"
  },
  {
    "text": "or readers and writers and replicas.",
    "start": "657840",
    "end": "660510"
  },
  {
    "text": "You just create tables\nand you work with tables.",
    "start": "660510",
    "end": "663570"
  },
  {
    "text": "Those tables can come\nwith automated scaling.",
    "start": "663570",
    "end": "665910"
  },
  {
    "text": "They will scale up to meet\nthe needs of your workload",
    "start": "665910",
    "end": "669000"
  },
  {
    "text": "and they will scale down again.",
    "start": "669000",
    "end": "671310"
  },
  {
    "text": "If your table scale on three\nindependent dimensions,",
    "start": "671310",
    "end": "675210"
  },
  {
    "text": "read throughput, write\nthroughput, and storage.",
    "start": "675210",
    "end": "678210"
  },
  {
    "text": "If any of those scale to zero,",
    "start": "678210",
    "end": "680460"
  },
  {
    "text": "you pay zero for that dimension.",
    "start": "680460",
    "end": "683280"
  },
  {
    "text": "There is no maintenance\nwindows or version updates.",
    "start": "683280",
    "end": "686010"
  },
  {
    "text": "You won't have to go\nthrough upgrade cycles again",
    "start": "686010",
    "end": "688020"
  },
  {
    "text": "if you use Amazon DynamoDB.",
    "start": "688020",
    "end": "690450"
  },
  {
    "text": "If a new feature comes along,",
    "start": "690450",
    "end": "691980"
  },
  {
    "text": "we just add it to the API and\nit's ready for you to consume.",
    "start": "691980",
    "end": "695760"
  },
  {
    "text": "And if you don't want to\nthink about read throughput",
    "start": "695760",
    "end": "697650"
  },
  {
    "text": "and write throughput, you\njust want to have a table,",
    "start": "697650",
    "end": "699960"
  },
  {
    "text": "you write to that table and\nyou read from that table",
    "start": "699960",
    "end": "703170"
  },
  {
    "text": "and Amazon bills you for what you",
    "start": "703170",
    "end": "704700"
  },
  {
    "text": "actually read and actually write,",
    "start": "704700",
    "end": "706590"
  },
  {
    "text": "you can have that with on-demand tables.",
    "start": "706590",
    "end": "709053"
  },
  {
    "text": "DynamoDB also comes with\nbuilt-in integrations",
    "start": "711300",
    "end": "713700"
  },
  {
    "text": "with other AWS services.",
    "start": "713700",
    "end": "715530"
  },
  {
    "text": "A database doesn't have to\nbe a standalone component.",
    "start": "715530",
    "end": "718560"
  },
  {
    "text": "It can contribute more\nto your architecture",
    "start": "718560",
    "end": "720779"
  },
  {
    "text": "through native integrations.",
    "start": "720780",
    "end": "723300"
  },
  {
    "text": "DynamoDB has too many native integrations",
    "start": "723300",
    "end": "725940"
  },
  {
    "text": "for me to cover in any detail",
    "start": "725940",
    "end": "727710"
  },
  {
    "text": "in the time that we have today.",
    "start": "727710",
    "end": "729390"
  },
  {
    "text": "But here are a few highlights.",
    "start": "729390",
    "end": "731580"
  },
  {
    "text": "Logging, monitoring and\nanalytics with Amazon CloudWatch,",
    "start": "731580",
    "end": "734487"
  },
  {
    "text": "AWS CloudTrail and Amazon\nCloudWatch Insights.",
    "start": "734487",
    "end": "737910"
  },
  {
    "text": "Change streams through DynamoDB streams",
    "start": "737910",
    "end": "740550"
  },
  {
    "text": "or through native integration",
    "start": "740550",
    "end": "742019"
  },
  {
    "text": "with Amazon Kinesis Data Streams.",
    "start": "742020",
    "end": "744240"
  },
  {
    "text": "You make the configuration\nto have a data stream",
    "start": "744240",
    "end": "746640"
  },
  {
    "text": "and every change that you\nmake to the data in your table",
    "start": "746640",
    "end": "749100"
  },
  {
    "text": "will just appear in that stream,",
    "start": "749100",
    "end": "750870"
  },
  {
    "text": "meaning that you can do things",
    "start": "750870",
    "end": "752160"
  },
  {
    "text": "like event driven architectures",
    "start": "752160",
    "end": "754350"
  },
  {
    "text": "or notify downstream systems",
    "start": "754350",
    "end": "756240"
  },
  {
    "text": "or just write those changes to somewhere",
    "start": "756240",
    "end": "758040"
  },
  {
    "text": "as an archive, perhaps.",
    "start": "758040",
    "end": "759750"
  },
  {
    "text": "It also comes with zero-ETL integrations",
    "start": "759750",
    "end": "761760"
  },
  {
    "text": "for other AWS databases.",
    "start": "761760",
    "end": "763680"
  },
  {
    "text": "So if you want to leverage the strengths",
    "start": "763680",
    "end": "765630"
  },
  {
    "text": "of Amazon OpenSearch or Amazon Redshift,",
    "start": "765630",
    "end": "768600"
  },
  {
    "text": "you configure zero-ETL\nand Amazon will deal",
    "start": "768600",
    "end": "770940"
  },
  {
    "text": "with replicating your\ndata into those databases",
    "start": "770940",
    "end": "773670"
  },
  {
    "text": "so that you can take\nadvantage of your data there.",
    "start": "773670",
    "end": "777000"
  },
  {
    "text": "And lastly, we have import\nand export data to Amazon S3.",
    "start": "777000",
    "end": "781050"
  },
  {
    "text": "With a simple API call, you ask DynamoDB",
    "start": "781050",
    "end": "783690"
  },
  {
    "text": "to export your data to S3,",
    "start": "783690",
    "end": "786360"
  },
  {
    "text": "DynamoDB will do that with\nno impact on your tables",
    "start": "786360",
    "end": "789930"
  },
  {
    "text": "and once your data is in S3,",
    "start": "789930",
    "end": "791820"
  },
  {
    "text": "you can do whatever you wish with it.",
    "start": "791820",
    "end": "794820"
  },
  {
    "text": "So that's a short tour of Amazon DynamoDB.",
    "start": "794820",
    "end": "796947"
  },
  {
    "text": "And with that I'm going\nto hand back to Jamie",
    "start": "796947",
    "end": "799260"
  },
  {
    "text": "and ask, we've heard about Trainline,",
    "start": "799260",
    "end": "801450"
  },
  {
    "text": "we heard about some of your challenges,",
    "start": "801450",
    "end": "803610"
  },
  {
    "text": "what did Trainline do\nand how did you do it?",
    "start": "803610",
    "end": "806130"
  },
  {
    "text": "- Thanks, Chris.",
    "start": "806130",
    "end": "806963"
  },
  {
    "text": "So, what have we learned along the way?",
    "start": "808380",
    "end": "811140"
  },
  {
    "text": "So I guess the first\npoint is, you really need,",
    "start": "811140",
    "end": "814320"
  },
  {
    "text": "I can't overstate enough\nhow important it is,",
    "start": "814320",
    "end": "816960"
  },
  {
    "text": "to really understand your access patterns,",
    "start": "816960",
    "end": "818700"
  },
  {
    "text": "how data is used and how it's accessed.",
    "start": "818700",
    "end": "822570"
  },
  {
    "text": "It's critical to make the right decision",
    "start": "822570",
    "end": "824310"
  },
  {
    "text": "when choosing a technology.",
    "start": "824310",
    "end": "825690"
  },
  {
    "text": "You also need to re-look\nat your architecture",
    "start": "825690",
    "end": "827580"
  },
  {
    "text": "to really get the full\nbenefits of this technology.",
    "start": "827580",
    "end": "831030"
  },
  {
    "text": "We found that moving from SQL has meant",
    "start": "831030",
    "end": "833190"
  },
  {
    "text": "that we are using different database types",
    "start": "833190",
    "end": "836040"
  },
  {
    "text": "for reads and writes, for\nsupporting complex search,",
    "start": "836040",
    "end": "840750"
  },
  {
    "text": "for data management, and\nfor analytic scenarios.",
    "start": "840750",
    "end": "844200"
  },
  {
    "text": "You can also significantly\nreduce the development effort",
    "start": "844200",
    "end": "847290"
  },
  {
    "text": "you have to invest by using\nthe out-of-the-box integrations",
    "start": "847290",
    "end": "850860"
  },
  {
    "text": "and capabilities like auto data expiry.",
    "start": "850860",
    "end": "853980"
  },
  {
    "text": "Like Chris mentioned,\nwe found that about 80%",
    "start": "853980",
    "end": "857220"
  },
  {
    "text": "of our use cases are looking like",
    "start": "857220",
    "end": "858870"
  },
  {
    "text": "they're going to be moving towards NoSQL.",
    "start": "858870",
    "end": "861660"
  },
  {
    "text": "I also can't emphasize enough the need",
    "start": "861660",
    "end": "864060"
  },
  {
    "text": "to be able to invest in\nengineering enablement",
    "start": "864060",
    "end": "866730"
  },
  {
    "text": "and the required shift in thinking.",
    "start": "866730",
    "end": "868532"
  },
  {
    "text": "Getting NoSQL database\ndesign right is challenging",
    "start": "869520",
    "end": "873510"
  },
  {
    "text": "and engineers need to\nunlearn a lot of the things",
    "start": "873510",
    "end": "876540"
  },
  {
    "text": "that they had previously learned",
    "start": "876540",
    "end": "878910"
  },
  {
    "text": "when using SQL server technologies.",
    "start": "878910",
    "end": "881282"
  },
  {
    "text": "AWS support and training has\nreally helped us with this.",
    "start": "882750",
    "end": "885450"
  },
  {
    "text": "Finally, data migrations\nis always challenging.",
    "start": "885450",
    "end": "888660"
  },
  {
    "text": "Moving data is hard, especially\nmission critical databases",
    "start": "888660",
    "end": "892470"
  },
  {
    "text": "with zero downtime requirements.",
    "start": "892470",
    "end": "894600"
  },
  {
    "text": "It's also costly.",
    "start": "894600",
    "end": "896040"
  },
  {
    "text": "So looking at costs and\nfactoring those into projects",
    "start": "896040",
    "end": "899250"
  },
  {
    "text": "is really important.",
    "start": "899250",
    "end": "900690"
  },
  {
    "text": "I'm going to walk\nthrough a simplified view",
    "start": "900690",
    "end": "903480"
  },
  {
    "text": "of our orders migration,",
    "start": "903480",
    "end": "905310"
  },
  {
    "text": "and how it's been improved",
    "start": "905310",
    "end": "906510"
  },
  {
    "text": "by the adoption of AWS technologies.",
    "start": "906510",
    "end": "909060"
  },
  {
    "text": "After working in commerce\nfor around about 10 years",
    "start": "909060",
    "end": "911910"
  },
  {
    "text": "and seeing this in\nvarious other companies,",
    "start": "911910",
    "end": "914310"
  },
  {
    "text": "this is pretty much a go-to design",
    "start": "914310",
    "end": "916710"
  },
  {
    "text": "built upon a combination",
    "start": "916710",
    "end": "917910"
  },
  {
    "text": "of event sourcing and CQRS patterns.",
    "start": "917910",
    "end": "920100"
  },
  {
    "text": "It's architected around three subsystems.",
    "start": "920100",
    "end": "922529"
  },
  {
    "text": "The first one is order processing,",
    "start": "922530",
    "end": "924570"
  },
  {
    "text": "where each action on an\norder is captured as an event",
    "start": "924570",
    "end": "928020"
  },
  {
    "text": "and stored in an event\nrecord in a database.",
    "start": "928020",
    "end": "931950"
  },
  {
    "text": "So there are things like\norder creation, payment taken,",
    "start": "931950",
    "end": "935070"
  },
  {
    "text": "train canceled and rebooked in\nour case, and ticket issued.",
    "start": "935070",
    "end": "938970"
  },
  {
    "text": "All events are then fired into\nthe order projection service",
    "start": "938970",
    "end": "943620"
  },
  {
    "text": "which uses all previous\nevents to calculate",
    "start": "943620",
    "end": "946410"
  },
  {
    "text": "the current state of an order,",
    "start": "946410",
    "end": "948089"
  },
  {
    "text": "and that is updated within\nthe order projection database.",
    "start": "948090",
    "end": "950940"
  },
  {
    "text": "Finally, all of this data is taken",
    "start": "951810",
    "end": "955830"
  },
  {
    "text": "from the order projection database",
    "start": "955830",
    "end": "957420"
  },
  {
    "text": "and added to a search\nindex to allow customers",
    "start": "957420",
    "end": "960450"
  },
  {
    "text": "to be able to get access to their tickets",
    "start": "960450",
    "end": "962070"
  },
  {
    "text": "by order ID or on customer ID,",
    "start": "962070",
    "end": "964620"
  },
  {
    "text": "or for complex search scenarios\nin the contact center.",
    "start": "964620",
    "end": "968190"
  },
  {
    "text": "So walking through the\nprevious implementation,",
    "start": "968190",
    "end": "971040"
  },
  {
    "text": "where are the problems?",
    "start": "971040",
    "end": "972240"
  },
  {
    "text": "So the first issue is\nthe SQL server instances",
    "start": "972240",
    "end": "975120"
  },
  {
    "text": "that are masquerading\nas queuing technology.",
    "start": "975120",
    "end": "979050"
  },
  {
    "text": "That's just additional\ndatabase management overhead.",
    "start": "979050",
    "end": "982833"
  },
  {
    "text": "The next thing is around\nwithin the order processing",
    "start": "983790",
    "end": "986850"
  },
  {
    "text": "and order projection,",
    "start": "986850",
    "end": "988170"
  },
  {
    "text": "it needs to write to both\nthe transaction database",
    "start": "988170",
    "end": "991050"
  },
  {
    "text": "and to the event database\nto be able to move on",
    "start": "991050",
    "end": "994470"
  },
  {
    "text": "to the next step of the architecture.",
    "start": "994470",
    "end": "997680"
  },
  {
    "text": "And failure scenario sort of\noutages between those services",
    "start": "997680",
    "end": "1001580"
  },
  {
    "text": "can lead to the platform\nbeing in an interim state,",
    "start": "1001580",
    "end": "1004040"
  },
  {
    "text": "which all need to be\nengineered and handled.",
    "start": "1004040",
    "end": "1006440"
  },
  {
    "text": "Problem two, these transactional databases",
    "start": "1006440",
    "end": "1008990"
  },
  {
    "text": "and projection databases\nare huge databases now",
    "start": "1008990",
    "end": "1012260"
  },
  {
    "text": "in our world.",
    "start": "1012260",
    "end": "1013910"
  },
  {
    "text": "Built on SQL, they're just complicated,",
    "start": "1013910",
    "end": "1017839"
  },
  {
    "text": "and difficult to scale and manage.",
    "start": "1017840",
    "end": "1019730"
  },
  {
    "text": "Problem three is this\norder search database,",
    "start": "1019730",
    "end": "1022579"
  },
  {
    "text": "which is a complex search database",
    "start": "1022580",
    "end": "1025970"
  },
  {
    "text": "built on Microsoft's SQL server.",
    "start": "1025970",
    "end": "1028583"
  },
  {
    "text": "The indexes in this database\nare three times the size",
    "start": "1029420",
    "end": "1032510"
  },
  {
    "text": "of the data stored within them.",
    "start": "1032510",
    "end": "1034970"
  },
  {
    "text": "And all this is fine at a certain scale,",
    "start": "1034970",
    "end": "1037370"
  },
  {
    "text": "but it increasingly struggles",
    "start": "1037370",
    "end": "1039500"
  },
  {
    "text": "as data access volumes increase.",
    "start": "1039500",
    "end": "1042113"
  },
  {
    "text": "In our cases, this was\nsignificantly compounded",
    "start": "1043070",
    "end": "1045829"
  },
  {
    "text": "as we introduced more\nreal-time experiences",
    "start": "1045830",
    "end": "1047959"
  },
  {
    "text": "into the platform where customers",
    "start": "1047960",
    "end": "1050210"
  },
  {
    "text": "and our systems were frequently checking",
    "start": "1050210",
    "end": "1053029"
  },
  {
    "text": "the status of orders to understand,",
    "start": "1053030",
    "end": "1055430"
  },
  {
    "text": "in the event of trade status updates",
    "start": "1055430",
    "end": "1057800"
  },
  {
    "text": "or disruptions, which customers\nneeded to be notified.",
    "start": "1057800",
    "end": "1061910"
  },
  {
    "text": "So here you can see the\nnew simplified architecture",
    "start": "1061910",
    "end": "1066050"
  },
  {
    "text": "leveraging the native\ncapabilities of DynamoDB",
    "start": "1066050",
    "end": "1068780"
  },
  {
    "text": "and its integration\ninto the AWS ecosystem.",
    "start": "1068780",
    "end": "1071753"
  },
  {
    "text": "There's a single right to the\norder transaction database",
    "start": "1072590",
    "end": "1075799"
  },
  {
    "text": "and we're using Amazon Dynamo streams",
    "start": "1075800",
    "end": "1079040"
  },
  {
    "text": "to be able to pick up all those events",
    "start": "1079040",
    "end": "1081530"
  },
  {
    "text": "and move on to the order projection state.",
    "start": "1081530",
    "end": "1084860"
  },
  {
    "text": "The order projection state gets",
    "start": "1084860",
    "end": "1086059"
  },
  {
    "text": "all the previous order events,",
    "start": "1086060",
    "end": "1088160"
  },
  {
    "text": "recalculates the state of the order,",
    "start": "1088160",
    "end": "1090110"
  },
  {
    "text": "and saves that into the\norder protection database.",
    "start": "1090110",
    "end": "1095110"
  },
  {
    "text": "We've taken the opportunity here,",
    "start": "1095480",
    "end": "1097160"
  },
  {
    "text": "because DynamoDB is such\na scalable platform,",
    "start": "1097160",
    "end": "1100520"
  },
  {
    "text": "to move all the customer interactions",
    "start": "1100520",
    "end": "1102740"
  },
  {
    "text": "by customer ID or order ID",
    "start": "1102740",
    "end": "1105620"
  },
  {
    "text": "onto this order projection database,",
    "start": "1105620",
    "end": "1108530"
  },
  {
    "text": "which improves the scale of the platform.",
    "start": "1108530",
    "end": "1111650"
  },
  {
    "text": "And now we're using DynamoDB streams",
    "start": "1111650",
    "end": "1116450"
  },
  {
    "text": "to pick up those updates",
    "start": "1116450",
    "end": "1118370"
  },
  {
    "text": "and publish those into\nthe order search database.",
    "start": "1118370",
    "end": "1121340"
  },
  {
    "text": "And now with only 7% of order access left",
    "start": "1121340",
    "end": "1123950"
  },
  {
    "text": "on this order search database",
    "start": "1123950",
    "end": "1125820"
  },
  {
    "text": "handling all of those more\ncomplicated order queries,",
    "start": "1126800",
    "end": "1130190"
  },
  {
    "text": "we can downgrade this from\na mission critical database.",
    "start": "1130190",
    "end": "1135190"
  },
  {
    "text": "We're also considering using zero-ETL",
    "start": "1135260",
    "end": "1138770"
  },
  {
    "text": "to reduce the amount of code further here.",
    "start": "1138770",
    "end": "1141410"
  },
  {
    "text": "Chris, that's our architecture.",
    "start": "1141410",
    "end": "1144020"
  },
  {
    "text": "Can we look at a DynamoDB implementation",
    "start": "1144020",
    "end": "1146420"
  },
  {
    "text": "in a bit more detail?",
    "start": "1146420",
    "end": "1147560"
  },
  {
    "text": "- Absolutely, yeah.",
    "start": "1147560",
    "end": "1148550"
  },
  {
    "text": "Let's take a look at\nwhat that would look like",
    "start": "1148550",
    "end": "1150500"
  },
  {
    "text": "as DynamoDB tables.",
    "start": "1150500",
    "end": "1152810"
  },
  {
    "text": "So I have to emphasize, this\nis not Trainline's tables,",
    "start": "1152810",
    "end": "1156710"
  },
  {
    "text": "this is purely fictional just\nso we can cover the concept",
    "start": "1156710",
    "end": "1159890"
  },
  {
    "text": "and look at that.",
    "start": "1159890",
    "end": "1162290"
  },
  {
    "text": "So DynamoDB, just like\nevery other database",
    "start": "1162290",
    "end": "1164780"
  },
  {
    "text": "that I've ever worked with in my career,",
    "start": "1164780",
    "end": "1167270"
  },
  {
    "text": "you have a table, and you\nput records into that table.",
    "start": "1167270",
    "end": "1170360"
  },
  {
    "text": "We call those items in DynamoDB.",
    "start": "1170360",
    "end": "1173030"
  },
  {
    "text": "And every one of those\nhas to have a primary key,",
    "start": "1173030",
    "end": "1175760"
  },
  {
    "text": "and that primary key has to be unique.",
    "start": "1175760",
    "end": "1178820"
  },
  {
    "text": "In DynamoDB, for this table,",
    "start": "1178820",
    "end": "1180799"
  },
  {
    "text": "we've got two parts to our primary key.",
    "start": "1180800",
    "end": "1183890"
  },
  {
    "text": "We have a partition key and a sort key.",
    "start": "1183890",
    "end": "1186770"
  },
  {
    "text": "For the partition key,\nI'm using the order ID.",
    "start": "1186770",
    "end": "1190070"
  },
  {
    "text": "And the way to think about a partition key",
    "start": "1190070",
    "end": "1192110"
  },
  {
    "text": "is the value will tell DynamoDB",
    "start": "1192110",
    "end": "1194750"
  },
  {
    "text": "which storage node this\nitem should live on.",
    "start": "1194750",
    "end": "1198710"
  },
  {
    "text": "The second part of the\nprimary key is the sort key.",
    "start": "1198710",
    "end": "1201590"
  },
  {
    "text": "For that I've used the date\nand the time of the event",
    "start": "1201590",
    "end": "1204320"
  },
  {
    "text": "that is coming in.",
    "start": "1204320",
    "end": "1205580"
  },
  {
    "text": "The way to think about the\nsort key is it tells DynamoDB",
    "start": "1205580",
    "end": "1209617"
  },
  {
    "text": "how to order these items\nunder this partition key",
    "start": "1209617",
    "end": "1213830"
  },
  {
    "text": "on the chosen storage nodes",
    "start": "1213830",
    "end": "1215330"
  },
  {
    "text": "so that we can do some\nefficient retrieval with them.",
    "start": "1215330",
    "end": "1218720"
  },
  {
    "text": "So, that's our primary key.",
    "start": "1218720",
    "end": "1220193"
  },
  {
    "text": "Alongside the primary key,\nwe have additional data.",
    "start": "1221870",
    "end": "1224150"
  },
  {
    "text": "If you're from the\nrelational database world,",
    "start": "1224150",
    "end": "1225950"
  },
  {
    "text": "think of that as like the\ncolumns in your relational table.",
    "start": "1225950",
    "end": "1229250"
  },
  {
    "text": "We call those attributes in DynamoDB.",
    "start": "1229250",
    "end": "1232010"
  },
  {
    "text": "And you can see here for this\ntable I've got two attributes.",
    "start": "1232010",
    "end": "1234980"
  },
  {
    "text": "I've got the event type",
    "start": "1234980",
    "end": "1236840"
  },
  {
    "text": "and I've got some additional data",
    "start": "1236840",
    "end": "1238279"
  },
  {
    "text": "that came in with that event.",
    "start": "1238280",
    "end": "1240713"
  },
  {
    "text": "We've then got five events in this table",
    "start": "1241880",
    "end": "1244490"
  },
  {
    "text": "and that's split across two orders.",
    "start": "1244490",
    "end": "1247100"
  },
  {
    "text": "So the first order begins\nwith the order ID ABC,",
    "start": "1247100",
    "end": "1250039"
  },
  {
    "text": "and the second order begins\nwith the order ID XYZ.",
    "start": "1250040",
    "end": "1253730"
  },
  {
    "text": "There's three events for the first order.",
    "start": "1253730",
    "end": "1255770"
  },
  {
    "text": "There's two events for the second order.",
    "start": "1255770",
    "end": "1259190"
  },
  {
    "text": "So now we want to work\nwith that DynamoDB table.",
    "start": "1259190",
    "end": "1261799"
  },
  {
    "text": "So we're going to look\nat some of the operations",
    "start": "1261800",
    "end": "1263210"
  },
  {
    "text": "that you can perform.",
    "start": "1263210",
    "end": "1264409"
  },
  {
    "text": "So the first one is GetItem.",
    "start": "1264410",
    "end": "1267410"
  },
  {
    "text": "Kind of self describing, really.",
    "start": "1267410",
    "end": "1269390"
  },
  {
    "text": "You provide the primary key",
    "start": "1269390",
    "end": "1271220"
  },
  {
    "text": "and then that's going to\nreturn zero or one items",
    "start": "1271220",
    "end": "1274010"
  },
  {
    "text": "depending on whether or not an item exists",
    "start": "1274010",
    "end": "1275840"
  },
  {
    "text": "with that primary key.",
    "start": "1275840",
    "end": "1277850"
  },
  {
    "text": "So you can see here on the slide,",
    "start": "1277850",
    "end": "1280039"
  },
  {
    "text": "we've provided the order\nID and an event date time,",
    "start": "1280040",
    "end": "1282830"
  },
  {
    "text": "and we're going to get\nback a single event.",
    "start": "1282830",
    "end": "1286370"
  },
  {
    "text": "This operation is single-digit\nmillisecond latency",
    "start": "1286370",
    "end": "1289190"
  },
  {
    "text": "at any scale.",
    "start": "1289190",
    "end": "1290840"
  },
  {
    "text": "This is what Amazon was doing",
    "start": "1290840",
    "end": "1292190"
  },
  {
    "text": "for 70% of its operations\non its relational database.",
    "start": "1292190",
    "end": "1296602"
  },
  {
    "text": "The next operation that\nwe're going to look at",
    "start": "1298070",
    "end": "1299419"
  },
  {
    "text": "is called Query.",
    "start": "1299420",
    "end": "1300290"
  },
  {
    "text": "This is a super powerful\noperation in DynamoDB.",
    "start": "1300290",
    "end": "1304580"
  },
  {
    "text": "We provide the value\nfor the partition key.",
    "start": "1304580",
    "end": "1307429"
  },
  {
    "text": "So in this case we're going\nto provide the order ID",
    "start": "1307430",
    "end": "1309980"
  },
  {
    "text": "and that tells DynamoDB which storage node",
    "start": "1309980",
    "end": "1312380"
  },
  {
    "text": "to go to and work with.",
    "start": "1312380",
    "end": "1314510"
  },
  {
    "text": "And then optionally,",
    "start": "1314510",
    "end": "1315680"
  },
  {
    "text": "we can provide some\ndetail for the sort key.",
    "start": "1315680",
    "end": "1318050"
  },
  {
    "text": "So we can provide a condition\nto get back a set of items,",
    "start": "1318050",
    "end": "1321740"
  },
  {
    "text": "or we can say nothing at\nall about the sort key",
    "start": "1321740",
    "end": "1323780"
  },
  {
    "text": "and get back all of the items",
    "start": "1323780",
    "end": "1325670"
  },
  {
    "text": "that live under that partition key.",
    "start": "1325670",
    "end": "1327590"
  },
  {
    "text": "So in this example, I've\nprovided the order ID,",
    "start": "1327590",
    "end": "1330350"
  },
  {
    "text": "that's the partition key,",
    "start": "1330350",
    "end": "1331789"
  },
  {
    "text": "and it's going to return all of the events",
    "start": "1331790",
    "end": "1333590"
  },
  {
    "text": "for that order from the table.",
    "start": "1333590",
    "end": "1336740"
  },
  {
    "text": "This is also millisecond\nlatency at any scale,",
    "start": "1336740",
    "end": "1339740"
  },
  {
    "text": "and this is what Amazon was doing",
    "start": "1339740",
    "end": "1341270"
  },
  {
    "text": "for the other 20% of its operations.",
    "start": "1341270",
    "end": "1344303"
  },
  {
    "text": "So tables are great, we can\nnow read from those tables,",
    "start": "1346010",
    "end": "1348530"
  },
  {
    "text": "but of course we have to\nbe able to get some data",
    "start": "1348530",
    "end": "1350240"
  },
  {
    "text": "into those tables.",
    "start": "1350240",
    "end": "1351890"
  },
  {
    "text": "So the next operation\nwe're going to look at",
    "start": "1351890",
    "end": "1353570"
  },
  {
    "text": "is called PutItem,",
    "start": "1353570",
    "end": "1355070"
  },
  {
    "text": "again, really well self-describing.",
    "start": "1355070",
    "end": "1357889"
  },
  {
    "text": "We can put a new item into the table.",
    "start": "1357890",
    "end": "1361580"
  },
  {
    "text": "So this is going to be\nsingle-digit millisecond latency",
    "start": "1361580",
    "end": "1364519"
  },
  {
    "text": "at any scale.",
    "start": "1364520",
    "end": "1365750"
  },
  {
    "text": "We choose our data, we\nchoose our primary key,",
    "start": "1365750",
    "end": "1367850"
  },
  {
    "text": "and we're going to write\nthat into the table",
    "start": "1367850",
    "end": "1369710"
  },
  {
    "text": "using the PutItem operation.",
    "start": "1369710",
    "end": "1372232"
  },
  {
    "text": "As Jamie was covering in\nthe Trainline architecture,",
    "start": "1373160",
    "end": "1376220"
  },
  {
    "text": "if we've got a DynamoDB stream\nconfigured for that table,",
    "start": "1376220",
    "end": "1380030"
  },
  {
    "text": "once that write happens,",
    "start": "1380030",
    "end": "1381380"
  },
  {
    "text": "that item gets inserted into the table,",
    "start": "1381380",
    "end": "1383450"
  },
  {
    "text": "we're going to get a corresponding event",
    "start": "1383450",
    "end": "1385610"
  },
  {
    "text": "in our change stream.",
    "start": "1385610",
    "end": "1386900"
  },
  {
    "text": "And you can see that on the\nright-hand side of this slide.",
    "start": "1386900",
    "end": "1389660"
  },
  {
    "text": "So this is a JSON payload\nthat appears in your stream",
    "start": "1389660",
    "end": "1393860"
  },
  {
    "text": "and it contains plenty\nof useful information.",
    "start": "1393860",
    "end": "1396559"
  },
  {
    "text": "For example, it will have the event ID,",
    "start": "1396560",
    "end": "1398840"
  },
  {
    "text": "so that you can uniquely\nidentify this event.",
    "start": "1398840",
    "end": "1401659"
  },
  {
    "text": "It will have the event name,",
    "start": "1401660",
    "end": "1403010"
  },
  {
    "text": "which will communicate\nwhether this was an insert,",
    "start": "1403010",
    "end": "1405275"
  },
  {
    "text": "an update, or a delete.",
    "start": "1405275",
    "end": "1407360"
  },
  {
    "text": "And it will have other metadata,",
    "start": "1407360",
    "end": "1409309"
  },
  {
    "text": "like the approximate creation\ndate time of the event.",
    "start": "1409310",
    "end": "1413270"
  },
  {
    "text": "It will then also contain\nsome additional detail.",
    "start": "1413270",
    "end": "1415910"
  },
  {
    "text": "So, it will contain the primary key",
    "start": "1415910",
    "end": "1417800"
  },
  {
    "text": "of the item that was affected",
    "start": "1417800",
    "end": "1419810"
  },
  {
    "text": "so you can go and look at that item.",
    "start": "1419810",
    "end": "1422150"
  },
  {
    "text": "And then as a customer you can choose",
    "start": "1422150",
    "end": "1423860"
  },
  {
    "text": "what additional detail you want.",
    "start": "1423860",
    "end": "1425630"
  },
  {
    "text": "Do you want to see what\nthe item looked like",
    "start": "1425630",
    "end": "1427400"
  },
  {
    "text": "before the change?",
    "start": "1427400",
    "end": "1428690"
  },
  {
    "text": "What the item looked\nlike after the change?",
    "start": "1428690",
    "end": "1430610"
  },
  {
    "text": "Or do you want to see\nboth before and after?",
    "start": "1430610",
    "end": "1433880"
  },
  {
    "text": "With a configuration change,",
    "start": "1433880",
    "end": "1435140"
  },
  {
    "text": "you can choose which one\nof those three you want.",
    "start": "1435140",
    "end": "1438080"
  },
  {
    "text": "And then again, just like in\nthe Trainline architecture,",
    "start": "1438080",
    "end": "1441440"
  },
  {
    "text": "you can configure Lambda\nthrough a native integration",
    "start": "1441440",
    "end": "1444470"
  },
  {
    "text": "to consume the events from that stream",
    "start": "1444470",
    "end": "1446630"
  },
  {
    "text": "and apply your business logic.",
    "start": "1446630",
    "end": "1448760"
  },
  {
    "text": "And with that integration you\ndon't have to get involved",
    "start": "1448760",
    "end": "1451250"
  },
  {
    "text": "in spinning up infrastructure or scaling,",
    "start": "1451250",
    "end": "1455030"
  },
  {
    "text": "Lambda will deal with that for you.",
    "start": "1455030",
    "end": "1457283"
  },
  {
    "text": "So, that's the event table.",
    "start": "1459320",
    "end": "1461419"
  },
  {
    "text": "But Jamie also mentioned\nan order projection table.",
    "start": "1461420",
    "end": "1464030"
  },
  {
    "text": "So we can see here on the slide,",
    "start": "1464030",
    "end": "1466640"
  },
  {
    "text": "we've got the events table at the top",
    "start": "1466640",
    "end": "1468710"
  },
  {
    "text": "with the DynamoDB stream\nand a Lambda function",
    "start": "1468710",
    "end": "1471049"
  },
  {
    "text": "consuming that stream.",
    "start": "1471050",
    "end": "1472370"
  },
  {
    "text": "And then it's going to\ncreate the order projection.",
    "start": "1472370",
    "end": "1474830"
  },
  {
    "text": "So inside the stream we're\ngoing to see the primary key",
    "start": "1474830",
    "end": "1477019"
  },
  {
    "text": "of an event that has occurred.",
    "start": "1477020",
    "end": "1478970"
  },
  {
    "text": "We can use the Query operation\nto go to the events table",
    "start": "1478970",
    "end": "1481970"
  },
  {
    "text": "and retrieve all of the\nevents for that order,",
    "start": "1481970",
    "end": "1484970"
  },
  {
    "text": "and then apply our business logic",
    "start": "1484970",
    "end": "1486679"
  },
  {
    "text": "to create a current view of that order.",
    "start": "1486680",
    "end": "1490250"
  },
  {
    "text": "So we can roll things up",
    "start": "1490250",
    "end": "1491690"
  },
  {
    "text": "and put all the detail that we want.",
    "start": "1491690",
    "end": "1493549"
  },
  {
    "text": "And we can see that in the\nbottom-right table here,",
    "start": "1493550",
    "end": "1496100"
  },
  {
    "text": "where we've got two items,",
    "start": "1496100",
    "end": "1497390"
  },
  {
    "text": "one for each order that\nwas in the events table,",
    "start": "1497390",
    "end": "1500870"
  },
  {
    "text": "and it's showing the current state.",
    "start": "1500870",
    "end": "1504110"
  },
  {
    "text": "So I've worked with customers in the past",
    "start": "1504110",
    "end": "1505880"
  },
  {
    "text": "who've had a table for\nsomething like orders,",
    "start": "1505880",
    "end": "1509840"
  },
  {
    "text": "or products, or something like that,",
    "start": "1509840",
    "end": "1511970"
  },
  {
    "text": "and they want to make changes\nto the data in that table.",
    "start": "1511970",
    "end": "1515179"
  },
  {
    "text": "And then they also want\nto store an audit log",
    "start": "1515180",
    "end": "1518030"
  },
  {
    "text": "of the changes that were made,",
    "start": "1518030",
    "end": "1519770"
  },
  {
    "text": "why, by who, and how.",
    "start": "1519770",
    "end": "1523340"
  },
  {
    "text": "With this pattern that\nJamie has shown us today,",
    "start": "1523340",
    "end": "1525890"
  },
  {
    "text": "that problem's solved.",
    "start": "1525890",
    "end": "1526970"
  },
  {
    "text": "We've effectively inverted it.",
    "start": "1526970",
    "end": "1528590"
  },
  {
    "text": "The events kind of are our audit log.",
    "start": "1528590",
    "end": "1531650"
  },
  {
    "text": "So, that problem is solved for us.",
    "start": "1531650",
    "end": "1534350"
  },
  {
    "text": "So Jamie, I wanted to ask\nyou a couple of questions",
    "start": "1534350",
    "end": "1536480"
  },
  {
    "text": "about your architecture, actually.",
    "start": "1536480",
    "end": "1538520"
  },
  {
    "text": "I think what I've just\nshown here is basically",
    "start": "1538520",
    "end": "1541190"
  },
  {
    "text": "the event sourcing implementation.",
    "start": "1541190",
    "end": "1544129"
  },
  {
    "text": "But earlier on, you mentioned CQRS.",
    "start": "1544130",
    "end": "1547310"
  },
  {
    "text": "Could you tell me a little\nbit more about what that is",
    "start": "1547310",
    "end": "1549590"
  },
  {
    "text": "and how it works here?",
    "start": "1549590",
    "end": "1551150"
  },
  {
    "text": "- So, CQRS is command query\nresponsibility segregation,",
    "start": "1551150",
    "end": "1555530"
  },
  {
    "text": "and it's really about separating",
    "start": "1555530",
    "end": "1557600"
  },
  {
    "text": "your reads from your writes.",
    "start": "1557600",
    "end": "1558799"
  },
  {
    "text": "So in our instance, actually,",
    "start": "1558800",
    "end": "1561410"
  },
  {
    "text": "the first part of the\nprojection into the orders",
    "start": "1561410",
    "end": "1563780"
  },
  {
    "text": "is a sort of CQRS.",
    "start": "1563780",
    "end": "1567110"
  },
  {
    "text": "But the more traditional pattern",
    "start": "1567110",
    "end": "1569059"
  },
  {
    "text": "is when you are publishing\nthe order projection,",
    "start": "1569060",
    "end": "1572240"
  },
  {
    "text": "which is all the data,\ninto your search index.",
    "start": "1572240",
    "end": "1575270"
  },
  {
    "text": "And that is publishing to a read view.",
    "start": "1575270",
    "end": "1580270"
  },
  {
    "text": "- And you say you've seen\nthis kind of pattern before.",
    "start": "1581510",
    "end": "1583310"
  },
  {
    "text": "So if I was to, say,",
    "start": "1583310",
    "end": "1584810"
  },
  {
    "text": "I'm sure lots of our customers are used",
    "start": "1584810",
    "end": "1586090"
  },
  {
    "text": "to the idea of stock and\nwarehouses and that kind of thing.",
    "start": "1586090",
    "end": "1589970"
  },
  {
    "text": "How would that apply with\nthis kind of pattern?",
    "start": "1589970",
    "end": "1592370"
  },
  {
    "text": "- Yeah, I mean event sourcing",
    "start": "1592370",
    "end": "1593600"
  },
  {
    "text": "is a great implementation pattern",
    "start": "1593600",
    "end": "1595910"
  },
  {
    "text": "for the stock management systems",
    "start": "1595910",
    "end": "1598310"
  },
  {
    "text": "where you might have an online platform",
    "start": "1598310",
    "end": "1600530"
  },
  {
    "text": "which has got a up-to-date view",
    "start": "1600530",
    "end": "1603110"
  },
  {
    "text": "as far as the customer's concerned",
    "start": "1603110",
    "end": "1604580"
  },
  {
    "text": "of what stock is available.",
    "start": "1604580",
    "end": "1606620"
  },
  {
    "text": "And all the time that's changing,",
    "start": "1606620",
    "end": "1609653"
  },
  {
    "text": "products are being added to basket,",
    "start": "1610550",
    "end": "1611930"
  },
  {
    "text": "or people start checking out,",
    "start": "1611930",
    "end": "1613460"
  },
  {
    "text": "and then they might expire as they go out.",
    "start": "1613460",
    "end": "1616669"
  },
  {
    "text": "So you're constantly recalculating",
    "start": "1616670",
    "end": "1618800"
  },
  {
    "text": "the current state of your stock levels.",
    "start": "1618800",
    "end": "1621680"
  },
  {
    "text": "But somewhere in a warehouse somewhere,",
    "start": "1621680",
    "end": "1623300"
  },
  {
    "text": "they'll have an overnight process",
    "start": "1623300",
    "end": "1625160"
  },
  {
    "text": "where you'll be going through",
    "start": "1625160",
    "end": "1627860"
  },
  {
    "text": "and doing a stock check at\nsome point in the morning,",
    "start": "1627860",
    "end": "1631220"
  },
  {
    "text": "more than likely.",
    "start": "1631220",
    "end": "1632570"
  },
  {
    "text": "And then maybe an hour or two later,",
    "start": "1632570",
    "end": "1635720"
  },
  {
    "text": "you end up getting all of that sent",
    "start": "1635720",
    "end": "1637490"
  },
  {
    "text": "from the warehouse management system",
    "start": "1637490",
    "end": "1639440"
  },
  {
    "text": "into the online platform\nwhere you've got to go back",
    "start": "1639440",
    "end": "1641419"
  },
  {
    "text": "and recalculate the stock\nview from the point in time",
    "start": "1641420",
    "end": "1644720"
  },
  {
    "text": "where that stock view was taken.",
    "start": "1644720",
    "end": "1646669"
  },
  {
    "text": "And that works really well",
    "start": "1646670",
    "end": "1648050"
  },
  {
    "text": "because within the event sourcing pattern,",
    "start": "1648050",
    "end": "1649880"
  },
  {
    "text": "you might have an hour or two hours",
    "start": "1649880",
    "end": "1651920"
  },
  {
    "text": "of increment/decrement stock,",
    "start": "1651920",
    "end": "1654473"
  },
  {
    "text": "people checking out, people\nexpiring those events,",
    "start": "1655460",
    "end": "1659330"
  },
  {
    "text": "and you can replay and\nrecalculate your current stock",
    "start": "1659330",
    "end": "1662480"
  },
  {
    "text": "from exactly the point in time",
    "start": "1662480",
    "end": "1664429"
  },
  {
    "text": "when the warehouse stock check was taken.",
    "start": "1664430",
    "end": "1668510"
  },
  {
    "text": "- So, I could ask you a\nmillion more questions,",
    "start": "1668510",
    "end": "1670760"
  },
  {
    "text": "we could be here for hours",
    "start": "1670760",
    "end": "1671810"
  },
  {
    "text": "because it's such an interesting pattern,",
    "start": "1671810",
    "end": "1673580"
  },
  {
    "text": "but I think we need to get on.",
    "start": "1673580",
    "end": "1674929"
  },
  {
    "text": "Could you tell us a little bit about",
    "start": "1674930",
    "end": "1676460"
  },
  {
    "text": "what's next for Trainline?",
    "start": "1676460",
    "end": "1678023"
  },
  {
    "text": "- Okay, brilliant.",
    "start": "1679160",
    "end": "1680120"
  },
  {
    "text": "So, what has all this\nactually meant for Trainline?",
    "start": "1680120",
    "end": "1683870"
  },
  {
    "text": "So the first thing is\nthat we're really seeing",
    "start": "1683870",
    "end": "1686720"
  },
  {
    "text": "an improvement in\nreliability of our platform.",
    "start": "1686720",
    "end": "1689630"
  },
  {
    "text": "We are seeing it more as we move",
    "start": "1689630",
    "end": "1691490"
  },
  {
    "text": "to the cloud native databases\ninto DynamoDB and AuroraDB,",
    "start": "1691490",
    "end": "1694752"
  },
  {
    "text": "that it is causing our\nplatform to be more stable.",
    "start": "1694753",
    "end": "1699753"
  },
  {
    "text": "We're also seeing that our\ndatabase engineering teams",
    "start": "1701540",
    "end": "1704690"
  },
  {
    "text": "are spending less time\nmanaging the infrastructure",
    "start": "1704690",
    "end": "1708350"
  },
  {
    "text": "and so are able to be more engaged",
    "start": "1708350",
    "end": "1710809"
  },
  {
    "text": "with our product engineering communities.",
    "start": "1710810",
    "end": "1713150"
  },
  {
    "text": "So they are more proactive\nin supporting the platform",
    "start": "1713150",
    "end": "1716480"
  },
  {
    "text": "and making it more scalable.",
    "start": "1716480",
    "end": "1718700"
  },
  {
    "text": "But they're also able to work",
    "start": "1718700",
    "end": "1721039"
  },
  {
    "text": "with our product engineering folk",
    "start": "1721040",
    "end": "1722720"
  },
  {
    "text": "on coming up with new and\nmore innovative features",
    "start": "1722720",
    "end": "1725240"
  },
  {
    "text": "for our customers.",
    "start": "1725240",
    "end": "1726679"
  },
  {
    "text": "And then finally, we're\nalso starting to see",
    "start": "1726680",
    "end": "1729410"
  },
  {
    "text": "a 20% reduction in the\ncost of our databases",
    "start": "1729410",
    "end": "1732170"
  },
  {
    "text": "and database-related infrastructure,",
    "start": "1732170",
    "end": "1734630"
  },
  {
    "text": "which at our scale is a massive win.",
    "start": "1734630",
    "end": "1736673"
  },
  {
    "text": "- Awesome. Right.",
    "start": "1738380",
    "end": "1739370"
  },
  {
    "text": "Well, thank you for that, Jamie.",
    "start": "1739370",
    "end": "1741140"
  },
  {
    "text": "So, there's a QR code",
    "start": "1741140",
    "end": "1744110"
  },
  {
    "text": "and a link below for those of you",
    "start": "1744110",
    "end": "1745820"
  },
  {
    "text": "who are interested in exploring\nDynamoDB a little bit more.",
    "start": "1745820",
    "end": "1748909"
  },
  {
    "text": "That'll take you to all kinds\nof interesting resources.",
    "start": "1748910",
    "end": "1752180"
  },
  {
    "text": "And the last thing from me",
    "start": "1752180",
    "end": "1753350"
  },
  {
    "text": "is just to say thank you\nto Jamie and Trainline",
    "start": "1753350",
    "end": "1755840"
  },
  {
    "text": "for taking the time and energy",
    "start": "1755840",
    "end": "1757640"
  },
  {
    "text": "and investing into this\nto share this story",
    "start": "1757640",
    "end": "1759800"
  },
  {
    "text": "with everybody out there.",
    "start": "1759800",
    "end": "1760820"
  },
  {
    "text": "- Thanks, Chris.\n- Thank you.",
    "start": "1760820",
    "end": "1762074"
  },
  {
    "text": "(upbeat music)",
    "start": "1762074",
    "end": "1764741"
  }
]