[
  {
    "start": "0",
    "end": "39000"
  },
  {
    "text": "thanks for taking the time to come out and hear me talk a little bit about DynamoDB today today I'm gonna talk a",
    "start": "0",
    "end": "5670"
  },
  {
    "text": "little bit about the kind of adaptive capacity features and functionality of the platform and it's really actually a",
    "start": "5670",
    "end": "11429"
  },
  {
    "text": "really good timing for me personally to be doing this particular talk because I just came out of the war room from Black",
    "start": "11429",
    "end": "16590"
  },
  {
    "text": "Friday and Cyber Monday where I watched this platform perform in every way and",
    "start": "16590",
    "end": "22949"
  },
  {
    "text": "deliver on every single feature that I'm going to talk to you about today so it was really really cool to see the",
    "start": "22949",
    "end": "28529"
  },
  {
    "text": "validation in real time of a system that can scale so dynamically like dynamo so",
    "start": "28529",
    "end": "33660"
  },
  {
    "text": "today we're going to talk a little bit about got that the wrong way we're gonna",
    "start": "33660",
    "end": "40350"
  },
  {
    "start": "39000",
    "end": "117000"
  },
  {
    "text": "talk about the traditional approaches to database scaling the way things used to work and then we're gonna get into how",
    "start": "40350",
    "end": "46289"
  },
  {
    "text": "no SQL database is actually scale when compared to relational databases and why",
    "start": "46289",
    "end": "51870"
  },
  {
    "text": "it's really interesting for us to actually look at this new technology because we are now starting to develop applications that are exceeding the",
    "start": "51870",
    "end": "57690"
  },
  {
    "text": "capacity of relational systems now we're developing new technologies to extend the life of the relational database but",
    "start": "57690",
    "end": "64830"
  },
  {
    "text": "the reality is we're soon gonna overwhelm the processing capacity of the single instance relational database so",
    "start": "64830",
    "end": "71040"
  },
  {
    "text": "we're gonna need to look at next-generation solutions like no SQL and so we understand so understanding how they scale is actually pretty",
    "start": "71040",
    "end": "77369"
  },
  {
    "text": "important we'll talk a little bit about that and then we're going to get into the evolution of dinamo dynamodb and how",
    "start": "77369",
    "end": "83790"
  },
  {
    "text": "it actually provides the adaptive capacity and and this dynamic platform that is so well suited to today's kind",
    "start": "83790",
    "end": "90720"
  },
  {
    "text": "of application environment where we want to you know align the infrastructure",
    "start": "90720",
    "end": "96060"
  },
  {
    "text": "behind the demand for an application right we don't want to have to you know provision this fixed infrastructure at",
    "start": "96060",
    "end": "102750"
  },
  {
    "text": "peak capacity we want to have systems that can scale to meet that demand and then go away right for some period of",
    "start": "102750",
    "end": "109320"
  },
  {
    "text": "time when that demand is no longer there and dynamo provides that ability and we'll talk about how that actually",
    "start": "109320",
    "end": "114509"
  },
  {
    "text": "happens so the first thing to understand",
    "start": "114509",
    "end": "120180"
  },
  {
    "start": "117000",
    "end": "172000"
  },
  {
    "text": "with databases is that capacity planning is hard right how much do I need and win",
    "start": "120180",
    "end": "126060"
  },
  {
    "text": "and typically the typical approach is to kind of do this in layers right is the demand starts to increase from my applications and services I'm going to",
    "start": "126060",
    "end": "132390"
  },
  {
    "text": "get a bigger box like an increase more capacity provision more instances of my database and what you end up with",
    "start": "132390",
    "end": "139110"
  },
  {
    "text": "inevitably is a curve that looks something like this we've talked about this is this kind of AWS and Amazon have",
    "start": "139110",
    "end": "144210"
  },
  {
    "text": "talked about this particular aspect of provisioning infrastructure right if you if you're under provisioned or if you're",
    "start": "144210",
    "end": "150300"
  },
  {
    "text": "over provisioned you're paying too much if you're under provisioned your customers aren't happy and you're missing opportunities so the key is to",
    "start": "150300",
    "end": "157680"
  },
  {
    "text": "try and maintain some happy medium between the amount of infrastructure I have deployed behind my applications and",
    "start": "157680",
    "end": "163860"
  },
  {
    "text": "the amount of capacity that's available for users to actually consume my services and it's a fine balance it's",
    "start": "163860",
    "end": "170070"
  },
  {
    "text": "hard to maintain and and really when you scale the relational database when you",
    "start": "170070",
    "end": "175590"
  },
  {
    "start": "172000",
    "end": "228000"
  },
  {
    "text": "start out and and in my career I've scaled many relational databases I'm sure many of us have you start out with",
    "start": "175590",
    "end": "181410"
  },
  {
    "text": "a small little instance that supports an application in your service and over time the demand for that service starts",
    "start": "181410",
    "end": "187230"
  },
  {
    "text": "to increase and so you get a bigger box and this is how you have to actually scale the relational database and sooner",
    "start": "187230",
    "end": "192960"
  },
  {
    "text": "or later that demand exceeds the capacity of that box and now I have to get a bigger box and I have worked with",
    "start": "192960",
    "end": "198540"
  },
  {
    "text": "customers over the years that have gone through single instance servers servers",
    "start": "198540",
    "end": "203670"
  },
  {
    "text": "to you know Oracle RAC deployments to large large scale instances that cost",
    "start": "203670",
    "end": "209520"
  },
  {
    "text": "you know half a million dollars to deploy and they and they go to the mssql teams or Oracle teams and they say you",
    "start": "209520",
    "end": "216120"
  },
  {
    "text": "know how do i you know I'm running out of capacity my latencies are increasing on my queries and then the answer is get",
    "start": "216120",
    "end": "221220"
  },
  {
    "text": "a bigger box right and that answer doesn't work at some point right they the scale of the application is too big",
    "start": "221220",
    "end": "227220"
  },
  {
    "text": "I can't get a bigger box so what do people do and I've done this before as well you partition right we start to",
    "start": "227220",
    "end": "233250"
  },
  {
    "start": "228000",
    "end": "319000"
  },
  {
    "text": "partition the database maybe by time or by sector or by category right these users go to this instance those users go",
    "start": "233250",
    "end": "239610"
  },
  {
    "text": "to that instance and there's all kinds of technologies out there that do this for you right in Postgres in MySQL even",
    "start": "239610",
    "end": "244920"
  },
  {
    "text": "in the commercial our DMS platforms they have technologies to allow you to partition and just and and spread your",
    "start": "244920",
    "end": "251820"
  },
  {
    "text": "queries across multiple instances of the database but again you're still dealing with the same problem right there just",
    "start": "251820",
    "end": "257519"
  },
  {
    "text": "silos it's collections of silos and eventually you're gonna overrun the capacity now when you look at the",
    "start": "257520",
    "end": "262740"
  },
  {
    "text": "next-generation database technologies that are coming out you look at this new thing new SQL it's it's kind of",
    "start": "262740",
    "end": "268020"
  },
  {
    "text": "the idea that we're gonna we're gonna we're gonna run this partition relational store and we're gonna overlay",
    "start": "268020",
    "end": "273780"
  },
  {
    "text": "some sort of paxos algorithm or something that's going to control consistency across these instances and",
    "start": "273780",
    "end": "279690"
  },
  {
    "text": "distributed locking and what you're really starting to look at is another layer of overhead okay and the reality",
    "start": "279690",
    "end": "285659"
  },
  {
    "text": "is the relational database was designed to minimize the footprint of data on",
    "start": "285659",
    "end": "290879"
  },
  {
    "text": "disk it was it's agnostic to every access pattern right which means it's optimized for none there's a lot of CPU",
    "start": "290879",
    "end": "297330"
  },
  {
    "text": "overhead involved in building the views that the application layer actually consumes now if I could store the data",
    "start": "297330",
    "end": "302610"
  },
  {
    "text": "in that form that the application actually uses it then I can dumb down the queries to simple selects and I can scale better and and the idea of new SQL",
    "start": "302610",
    "end": "310380"
  },
  {
    "text": "is great it's going to give us more scale for a relational databases but again it's going to come at a cost an excessive cost and no SQL is a better",
    "start": "310380",
    "end": "318419"
  },
  {
    "text": "solution so no SQL leverages denormalization right and and shards within the",
    "start": "318419",
    "end": "324509"
  },
  {
    "start": "319000",
    "end": "360000"
  },
  {
    "text": "applications or across a key space to provide horizontal scale that delivers",
    "start": "324509",
    "end": "330120"
  },
  {
    "text": "near nearly unbounded throughput in storage and we have applications that",
    "start": "330120",
    "end": "335159"
  },
  {
    "text": "prove it both internally and externally our customers have deployed massive applications on DynamoDB 7080 terabyte",
    "start": "335159",
    "end": "342479"
  },
  {
    "text": "tables exist on dynamodb internal to services we have over 12,000 services at",
    "start": "342479",
    "end": "348599"
  },
  {
    "text": "AWS many many many of those services use dynamodb a great scale is really an",
    "start": "348599",
    "end": "353699"
  },
  {
    "text": "amazing platform and no SQL technology in general is an amazing technology for delivering that type of scaled",
    "start": "353699",
    "end": "359849"
  },
  {
    "text": "performance so how it is it all different and what it comes down to for those of you familiar with the cap",
    "start": "359849",
    "end": "365940"
  },
  {
    "start": "360000",
    "end": "523000"
  },
  {
    "text": "theorem right I'd said I've often called Brewers theorem but the concept here is that we have three kind of points of the",
    "start": "365940",
    "end": "372569"
  },
  {
    "text": "triangle if you're familiar with product management you know the Iron Triangle you get it good you get it fast or you get it cheap right well data has its own",
    "start": "372569",
    "end": "378569"
  },
  {
    "text": "Iron Triangle and it's called cap it's about consistency availability and partition tolerance okay so when we",
    "start": "378569",
    "end": "385620"
  },
  {
    "text": "first talk about consistency this is about that all all clients will always",
    "start": "385620",
    "end": "392190"
  },
  {
    "text": "have the same view of the data in the database right if I'm connected to the database instance and I read the data",
    "start": "392190",
    "end": "397889"
  },
  {
    "text": "another client reading that same data at the same time will always read the same data and that means the database is",
    "start": "397889",
    "end": "403740"
  },
  {
    "text": "consistent okay it's available if all clients that are connected to the database can always read and write all",
    "start": "403740",
    "end": "410580"
  },
  {
    "text": "right that means that the database is available and it's partition tolerant if the system functions well when network",
    "start": "410580",
    "end": "417570"
  },
  {
    "text": "partitions are inserted within the storage layer okay so there's three",
    "start": "417570",
    "end": "422820"
  },
  {
    "text": "aspects here and you get two relational databases have traditionally picked and only have always picked consistency and",
    "start": "422820",
    "end": "428940"
  },
  {
    "text": "availability right when they're online all clients can read and write and then all clients will always view the same",
    "start": "428940",
    "end": "434790"
  },
  {
    "text": "data and they do it by maintaining that data in a single instance a big giant box all right when we introduced",
    "start": "434790",
    "end": "441720"
  },
  {
    "text": "partition tolerance you have two choices you can be consistent and partition tolerant which means that my users will",
    "start": "441720",
    "end": "449010"
  },
  {
    "text": "always be able to have the same view of data but they might not always be able to read and write when there's a partition inside the data layer right I",
    "start": "449010",
    "end": "455280"
  },
  {
    "text": "might not I might have to restrict writes and let people only read they might not always be able to have access",
    "start": "455280",
    "end": "461070"
  },
  {
    "text": "to the data or I can be available in partition tolerance I say everybody can write everywhere but I might not always",
    "start": "461070",
    "end": "466080"
  },
  {
    "text": "be able to read the same amount of data read the same data different clients read different data depending on which head know what I'm talking to different",
    "start": "466080",
    "end": "472110"
  },
  {
    "text": "no SQL databases choose different technologies or different approaches to solving the problem and some know SQL",
    "start": "472110",
    "end": "478950"
  },
  {
    "text": "databases like DynamoDB or cassandra actually or and I'm sorry MongoDB actually gives you the ability to kind",
    "start": "478950",
    "end": "485100"
  },
  {
    "text": "of play both sides right you can enable secondary reads in dynamo dB you can enable secondary reads in",
    "start": "485100",
    "end": "491160"
  },
  {
    "text": "MongoDB this gives you kind of an ability to get what you can almost say the AP approach right CP is I'm always",
    "start": "491160",
    "end": "497550"
  },
  {
    "text": "talking to the primary my reads and writes are always going through the primary node in a replicated datastore",
    "start": "497550",
    "end": "502800"
  },
  {
    "text": "right now I'm now I'm consistent okay so this is the game we play to try and determine how we're going to be able to",
    "start": "502800",
    "end": "508890"
  },
  {
    "text": "scale the database right do I scale within a single instance or do i scale across multiple partitions and then I",
    "start": "508890",
    "end": "514620"
  },
  {
    "text": "mean that'll tell me where I played how I scale across multiple partitions gonna tell me which type of flavor I am am i",
    "start": "514620",
    "end": "520950"
  },
  {
    "text": "CP or am ia P okay so in a relational",
    "start": "520950",
    "end": "526320"
  },
  {
    "start": "523000",
    "end": "577000"
  },
  {
    "text": "store what we're going to use is to normalize data structure we're going to take in this particular example I got a",
    "start": "526320",
    "end": "531360"
  },
  {
    "text": "product catalog it has a example of all the common relationships that I typically see in a relational database one-to-many",
    "start": "531360",
    "end": "538750"
  },
  {
    "text": "one-to-one many of the many relationships you can see how many queries you can imagine how many queries",
    "start": "538750",
    "end": "545380"
  },
  {
    "text": "it takes to produce a list of my database or my products in my catalog",
    "start": "545380",
    "end": "550750"
  },
  {
    "text": "right select star from inner join inner join through a mapping table to get the many diminish and and just think about",
    "start": "550750",
    "end": "557710"
  },
  {
    "text": "how much work that CPU is doing to assemble the view that the application needs to consume to provide that list of",
    "start": "557710",
    "end": "565300"
  },
  {
    "text": "all my products and and how many independent queries it actually has to run at least three right I have to get",
    "start": "565300",
    "end": "571570"
  },
  {
    "text": "all my books I have to get all my albums I have to get all my videos and that's going to occur in three separate queries if I usually denormalized data stores a",
    "start": "571570",
    "end": "579340"
  },
  {
    "start": "577000",
    "end": "673000"
  },
  {
    "text": "different approach I'm gonna try and flatten that hierarchy I'm gonna try and push all that data into a set of",
    "start": "579340",
    "end": "585220"
  },
  {
    "text": "documents or a set of items or collections of items that I would put on the table and now to get all of my",
    "start": "585220",
    "end": "591160"
  },
  {
    "text": "products isolate I say select star from where x equals L I could say select star",
    "start": "591160",
    "end": "596710"
  },
  {
    "text": "from products and I get every product I want all my books I say select star from where the type equals book right it's a",
    "start": "596710",
    "end": "603220"
  },
  {
    "text": "much simpler query the system does not have to work so hard to produce the view that the application is consuming",
    "start": "603220",
    "end": "610060"
  },
  {
    "text": "therefore I'm using a lot less CPU which is important because the CPU is the most important is the most expensive resource",
    "start": "610060",
    "end": "616120"
  },
  {
    "text": "in the data center today right 3040 years ago not so much 3040 years ago the",
    "start": "616120",
    "end": "621190"
  },
  {
    "text": "most expensive resource in the data center was actually the disk so that's why the relational database was actually",
    "start": "621190",
    "end": "626650"
  },
  {
    "text": "invented if you talk to people who are actually dealing with data and generating you know reports and analytics and things like this back in",
    "start": "626650",
    "end": "632950"
  },
  {
    "text": "the 70s right they all used comma separated value flat files grep awk said",
    "start": "632950",
    "end": "639360"
  },
  {
    "text": "this is what people use to process the day of the relational database came along to minimize the amount of storage",
    "start": "639360",
    "end": "645790"
  },
  {
    "text": "that those processes were consuming right 40 years later it's the flipside",
    "start": "645790",
    "end": "651040"
  },
  {
    "text": "the CPU is the most expensive resource the storage is the cheapest thing in the data center so why would I use a",
    "start": "651040",
    "end": "656290"
  },
  {
    "text": "technology that is optimizing the cheapest resource in the data center and and making me pay for the most expensive",
    "start": "656290",
    "end": "663010"
  },
  {
    "text": "thing right I actually want to go the other way too I want I want queries that are simple queries I don't want queries that are complex",
    "start": "663010",
    "end": "668560"
  },
  {
    "text": "okay so this is where no SQL really starts to Excel so when you scale NoSQL",
    "start": "668560",
    "end": "675340"
  },
  {
    "start": "673000",
    "end": "763000"
  },
  {
    "text": "database it's about adding capacity incrementally it's not about having to get a bigger box right you make a bigger",
    "start": "675340",
    "end": "681670"
  },
  {
    "text": "array of instances right so you start off with one instance you add some more",
    "start": "681670",
    "end": "687010"
  },
  {
    "text": "capacity by adding another instance you add additional capacity by adding more instances but as I do this right I am",
    "start": "687010",
    "end": "693580"
  },
  {
    "text": "NOT throwing away the old boxes I'm expanding the new and by adding",
    "start": "693580",
    "end": "699010"
  },
  {
    "text": "additional boxes now as as you do this underneath the covers what's going on is there's a replication process right I",
    "start": "699010",
    "end": "705250"
  },
  {
    "text": "add new instances into this array what I'm doing is I'm adding a new shard to my cluster and that shard now is going",
    "start": "705250",
    "end": "712000"
  },
  {
    "text": "to give me additional capacity but it's only going to give me additional capacity when the items are distributed evenly across from the other shards so",
    "start": "712000",
    "end": "719650"
  },
  {
    "text": "there's this background process that's happening that's replicating the data okay this is important when you get into",
    "start": "719650",
    "end": "724990"
  },
  {
    "text": "actually managing this yourself because if you want to deploy NoSQL databases you need to understand what is the",
    "start": "724990",
    "end": "730900"
  },
  {
    "text": "background consumption that you're going to occur in managing the system okay I have customers they've deployed you know",
    "start": "730900",
    "end": "737860"
  },
  {
    "text": "MongoDB clusters that literally can't add capacity for weeks because it takes",
    "start": "737860",
    "end": "744010"
  },
  {
    "text": "that long to replicate from all of the shards right we have a similar issues in",
    "start": "744010",
    "end": "749380"
  },
  {
    "text": "DynamoDB we have to deal with that replication but there's a managed service it's something we do for you it's not something you have to worry",
    "start": "749380",
    "end": "755350"
  },
  {
    "text": "about you don't have to provision extra capacity because I'm going to be adding a shard in six months right we kind of",
    "start": "755350",
    "end": "761920"
  },
  {
    "text": "do that we take care of all of that anyways so when do I use no SQL over SQL",
    "start": "761920",
    "end": "768580"
  },
  {
    "start": "763000",
    "end": "842000"
  },
  {
    "text": "what it comes down to is if I understand the access patterns of the application then I'm gonna be way better off using a",
    "start": "768580",
    "end": "774670"
  },
  {
    "text": "denormalized data store that stores the data in the way the application actually uses it so OLTP applications are great",
    "start": "774670",
    "end": "781300"
  },
  {
    "text": "because they always use the same data you'll use the data the same way all the time so I'm building an application and",
    "start": "781300",
    "end": "787300"
  },
  {
    "text": "I know it's an oil TPF and every time somebody hits the order button they're going to commit those items they're going to commit that purchase they're",
    "start": "787300",
    "end": "793240"
  },
  {
    "text": "going to do whatever right then NoSQL database is great now if it's a ad-hoc queries that I'm looking for bi",
    "start": "793240",
    "end": "800560"
  },
  {
    "text": "analytics Ola workloads and you know the type of things that I don't know how people are",
    "start": "800560",
    "end": "805839"
  },
  {
    "text": "gonna use this data then maybe an SQL database might be a better store for you again couple options here you can even",
    "start": "805839",
    "end": "812650"
  },
  {
    "text": "look at no SQL the back the OLAP workloads but it's kind of like the data Lake we push this stuff out there we run",
    "start": "812650",
    "end": "818080"
  },
  {
    "text": "an EMR cluster or some MapReduce engine on top of this thing maybe we load some hive or spark or",
    "start": "818080",
    "end": "823920"
  },
  {
    "text": "presto library on top of that we can run SQL queries but when we're storing the",
    "start": "823920",
    "end": "829210"
  },
  {
    "text": "data in a no SQL database but those are kind of long-running queries if I need real-time ad hoc queries SQL is a good",
    "start": "829210",
    "end": "835570"
  },
  {
    "text": "solution for you but it's not going to scale as well as something like a no SQL database certainly",
    "start": "835570",
    "end": "841740"
  },
  {
    "text": "all right so Amazon DynamoDB for those of you who are not familiar with it it's",
    "start": "841740",
    "end": "847120"
  },
  {
    "start": "842000",
    "end": "975000"
  },
  {
    "text": "a managed no SQL database service this is one of the biggest value points of the service you know anyone who's tried",
    "start": "847120",
    "end": "853960"
  },
  {
    "text": "to manage no SQL at scale knows how difficult it is to keep these things up and running right you've got a whole",
    "start": "853960",
    "end": "859900"
  },
  {
    "text": "bunch of servers you've got a bunch of OS patching you've got a bunch of database patching all kinds of stuff you",
    "start": "859900",
    "end": "866170"
  },
  {
    "text": "have to worry about and then when hardware starts failing I have to re replicate I have to administrate and operate this IT",
    "start": "866170",
    "end": "871750"
  },
  {
    "text": "infrastructure that is not necessarily core to my business and at scale this becomes very complex I mean it's one",
    "start": "871750",
    "end": "877990"
  },
  {
    "text": "thing when I'm running a single replica set it's another thing entirely when I run in 15 shards right so you know when",
    "start": "877990",
    "end": "885490"
  },
  {
    "text": "you think about the ability to actually offload all the management of all of that infrastructure because no SQL database is you know they're they're",
    "start": "885490",
    "end": "892209"
  },
  {
    "text": "great they scale fantastically but there's a lot of work that goes into it and it's not something that's easy so if",
    "start": "892209",
    "end": "898209"
  },
  {
    "text": "you don't actually need to scale then I would actually say let's let's let's use a relational store you get a lot more",
    "start": "898209",
    "end": "903610"
  },
  {
    "text": "flexibility out of it a lot of people talked about no SQL is if it's a very flexible datastore and it is but it also",
    "start": "903610",
    "end": "909940"
  },
  {
    "text": "requires a lot of rigidity right in the data structure so in order to be",
    "start": "909940",
    "end": "915610"
  },
  {
    "text": "effective you can't really run ad-hoc queries I can only run these these access patterns that I actually",
    "start": "915610",
    "end": "921220"
  },
  {
    "text": "understand and know so if I don't have if I need it if I need to you know run",
    "start": "921220",
    "end": "926620"
  },
  {
    "text": "patterns that are more ad hoc you know I want to run a relational store anyway so",
    "start": "926620",
    "end": "932430"
  },
  {
    "text": "dynamodb is fast and consistent any scales designed to deliver high performance for any",
    "start": "932430",
    "end": "938340"
  },
  {
    "text": "workload scales independently for reads and writes and your provision capacity independently for reads and writes fully",
    "start": "938340",
    "end": "944340"
  },
  {
    "text": "integrated access control and fine-grained so at the item level at the table level and at the attribute level I",
    "start": "944340",
    "end": "950130"
  },
  {
    "text": "can create users and X and assign permissions to those users that would be able to read only parts of the items",
    "start": "950130",
    "end": "956400"
  },
  {
    "text": "right so I could have like say an order entry application with an HR overlay and only my HR users would CD the extended",
    "start": "956400",
    "end": "963300"
  },
  {
    "text": "metadata that's associated with the HR functions right and and order entry",
    "start": "963300",
    "end": "968390"
  },
  {
    "text": "applications would see only OS tile attributes so one thing about no SQL on",
    "start": "968390",
    "end": "977190"
  },
  {
    "start": "975000",
    "end": "1030000"
  },
  {
    "text": "the way that we actually distribute data NoSQL and all know SQL databases use this same approach is there's some sort",
    "start": "977190",
    "end": "982350"
  },
  {
    "text": "of partition key shard key some attribute it's a mandatory attribute that must be provided in the item it's",
    "start": "982350",
    "end": "988800"
  },
  {
    "text": "the only mandatory attributed uniquely identifies the item and what we're gonna do is we're gonna hash that attribute",
    "start": "988800",
    "end": "994050"
  },
  {
    "text": "value and create this unordered hash index and lay these items out across this arbitrary key space now once we've",
    "start": "994050",
    "end": "1000470"
  },
  {
    "text": "done this as you add capacity or you increase the storage and add more items into the table we're gonna start",
    "start": "1000470",
    "end": "1007040"
  },
  {
    "text": "splitting that thing up across physical boxes ok so this is how dynamodb scales this is how MongoDB scales this is how",
    "start": "1007040",
    "end": "1014600"
  },
  {
    "text": "cassandra scales this is how no SQL in general scales all no SQL technology shares this same approach to scaling you",
    "start": "1014600",
    "end": "1021950"
  },
  {
    "text": "create an arbitrary key space you lay the items out across that key space and you chop it up and put it out on to",
    "start": "1021950",
    "end": "1027530"
  },
  {
    "text": "different physical boxes to be able to scale up partitions are 3-way replicated in dynamodb in most no SQL databases",
    "start": "1027530",
    "end": "1034730"
  },
  {
    "start": "1030000",
    "end": "1078000"
  },
  {
    "text": "there's some sort of replication to ensure durability of the data in dynamodb they're 3-way replicated across",
    "start": "1034730",
    "end": "1040640"
  },
  {
    "text": "three AZ's every region in AWS has at least three AZ's whether you see them or",
    "start": "1040640",
    "end": "1047240"
  },
  {
    "text": "not as because a dynamo DB is a tier 0 service no other service deploys without it so we can't no region stands up",
    "start": "1047240",
    "end": "1054380"
  },
  {
    "text": "without it so we can't and dynamo DB requires 3-way replication so even if you're only seeing one AZ like in some",
    "start": "1054380",
    "end": "1060590"
  },
  {
    "text": "of our new regions like in china for a while there was only one AZ there's really three but there's that's for the",
    "start": "1060590",
    "end": "1065930"
  },
  {
    "text": "@ that's for the backplane infrastructure that we run things like dynamo DB and that replication is automatic",
    "start": "1065930",
    "end": "1071530"
  },
  {
    "text": "there's nothing you need to enable when you define a table it's just going to get replicated across those three a Z's",
    "start": "1071530",
    "end": "1077910"
  },
  {
    "text": "now behind the scenes and this is where things start to get really interesting and start to get really different when",
    "start": "1077910",
    "end": "1083170"
  },
  {
    "start": "1078000",
    "end": "1210000"
  },
  {
    "text": "you look at dynamodb behind the scenes we run a basically a massively",
    "start": "1083170",
    "end": "1088750"
  },
  {
    "text": "multi-tenant infrastructure all right we have stories nodes and request routers",
    "start": "1088750",
    "end": "1093790"
  },
  {
    "text": "and control plane infrastructure and it's all basically serving up requests for many many many customers right so",
    "start": "1093790",
    "end": "1100180"
  },
  {
    "text": "when you deploy DynamoDB tables we don't roll out dedicated infrastructure for you we actually claim capacity on",
    "start": "1100180",
    "end": "1106390"
  },
  {
    "text": "existing infrastructure and what we're doing is we're taking your table and your data and we're chopping it up into",
    "start": "1106390",
    "end": "1112960"
  },
  {
    "text": "all these partitions and we're spreading it out all over this infrastructure and we're sharing that infrastructure with other people's tables right might be",
    "start": "1112960",
    "end": "1119440"
  },
  {
    "text": "yours might be other customers these things are logically isolated nobody can touch anybody else's tables right your",
    "start": "1119440",
    "end": "1125140"
  },
  {
    "text": "data is completely and totally isolated from other users the interesting thing here is that we don't take full servers",
    "start": "1125140",
    "end": "1131860"
  },
  {
    "text": "and chunk them up and put them into your tablespace right that would be expensive",
    "start": "1131860",
    "end": "1136929"
  },
  {
    "text": "and many of our competitors this is what they do I mean the minimum you know bar to enter on some of our competitors",
    "start": "1136929",
    "end": "1143920"
  },
  {
    "text": "products is very high as because really they're taking dedicated servers and they're throwing them into that you know",
    "start": "1143920",
    "end": "1149380"
  },
  {
    "text": "out therefore you can think of these things as ec2 instances in DynamoDB our partitions are really small ok they're",
    "start": "1149380",
    "end": "1156280"
  },
  {
    "text": "small for a lot of reasons bottom line is you every single partition you you have on your table is going to give you",
    "start": "1156280",
    "end": "1161559"
  },
  {
    "text": "1,000 WCU's or 3,000 Darcy use these are read and write capacity units or some",
    "start": "1161559",
    "end": "1167230"
  },
  {
    "text": "mix of those to you and up to 10 gigabytes of storage now why do we do this because we want to scale and we",
    "start": "1167230",
    "end": "1173500"
  },
  {
    "text": "want to scale fast and that means that I can't spend my time replicating data out of these partitions if I need to split",
    "start": "1173500",
    "end": "1179740"
  },
  {
    "text": "these partitions I don't want to have to copy a petabyte of data right I copy 5",
    "start": "1179740",
    "end": "1184870"
  },
  {
    "text": "gigabytes of data and I've split the partition so it happens really fast and I've seen this in real time it's an",
    "start": "1184870",
    "end": "1190660"
  },
  {
    "text": "amazing thing to watch a table go from 2 to 4 to 8 partitions in in minutes and be able to scale from you know 2,000 are",
    "start": "1190660",
    "end": "1198760"
  },
  {
    "text": "you know wcu peak bursts to 8400 sent capacity increase in minutes who",
    "start": "1198760",
    "end": "1204100"
  },
  {
    "text": "does that what database can do that there's only one in the world right it's dynamodb all right so when",
    "start": "1204100",
    "end": "1211029"
  },
  {
    "text": "you scale dynamodb it looks like this it doesn't look like get a bigger box get a bigger box and when your load goes away",
    "start": "1211029",
    "end": "1217690"
  },
  {
    "text": "wow I'm stuck with this big box right when DynamoDB when the load goes away",
    "start": "1217690",
    "end": "1222880"
  },
  {
    "text": "you can dial it down and when the load comes in you can dial it up and it happens really fast okay I mean",
    "start": "1222880",
    "end": "1229480"
  },
  {
    "text": "literally I sat there on Cyber Monday in the war room I watched these tables going you know ballistic and I was",
    "start": "1229480",
    "end": "1235659"
  },
  {
    "text": "watching the peak rush you know we monitored over 2000 tables I run the DynamoDB Black Belt team we monitored",
    "start": "1235659",
    "end": "1241600"
  },
  {
    "text": "over 2000 DynamoDB tables for what we call the Amazon CDO that's our commercial digital and other development",
    "start": "1241600",
    "end": "1248019"
  },
  {
    "text": "teams right through Black Friday and Cyber Monday and I'm watching the tables go into a hot state throttling the",
    "start": "1248019",
    "end": "1253510"
  },
  {
    "text": "provisions capacity throttling peak throughput throttling bursts rattling and I'm looking at the teams I'm saying",
    "start": "1253510",
    "end": "1260289"
  },
  {
    "text": "increase the capacity on these tables split these tables we need to increase your burst capacity and I'm watching all",
    "start": "1260289",
    "end": "1266289"
  },
  {
    "text": "of this happen in real time dozens of instances right things that would take businesses down and we're able to",
    "start": "1266289",
    "end": "1272350"
  },
  {
    "text": "withstand this because we have this dynamic backplane that could increase capacity on the fly in such an amazing",
    "start": "1272350",
    "end": "1279220"
  },
  {
    "text": "way all right so what you end up with with this system now is something is highly exact you do not have to operate",
    "start": "1279220",
    "end": "1285460"
  },
  {
    "start": "1280000",
    "end": "1327000"
  },
  {
    "text": "in whole server increments anymore you get capacity fast right it's quick you",
    "start": "1285460",
    "end": "1290649"
  },
  {
    "text": "know in minutes you're gonna have the additional capacity you need right you're gonna have some account level limits those are soft limits there's",
    "start": "1290649",
    "end": "1296590"
  },
  {
    "text": "table level limits again soft limits if you if you talk to our support teams and let us know how much capacity you need",
    "start": "1296590",
    "end": "1302320"
  },
  {
    "text": "we'll dial you right up right and you can claim any amount of capacity that you need we just need to know right",
    "start": "1302320",
    "end": "1308110"
  },
  {
    "text": "you're gonna you're going to deploy with a certain amount anything within that is is available to you above that just let",
    "start": "1308110",
    "end": "1313929"
  },
  {
    "text": "us know again fully elastic up and down whenever you need this thing to go it",
    "start": "1313929",
    "end": "1319389"
  },
  {
    "text": "you know you just set it you know you can dial it up and dial it down both manually and automatically you know",
    "start": "1319389",
    "end": "1325000"
  },
  {
    "text": "some great technology for you there we'll talk about in a few minutes but what this allows you to do is maximize your applications availability minimize",
    "start": "1325000",
    "end": "1331240"
  },
  {
    "start": "1327000",
    "end": "1388000"
  },
  {
    "text": "your cost right no downtime and we've got great examples of I've got an application is a survey form",
    "start": "1331240",
    "end": "1337390"
  },
  {
    "text": "processing application we wrote for Amazon's for AWS professional services in the SAT when you interact with us you",
    "start": "1337390",
    "end": "1344500"
  },
  {
    "text": "can get an email at the bottom that email will be a little link it says what do you think of this interaction when you click that link it pulls down a web",
    "start": "1344500",
    "end": "1351010"
  },
  {
    "text": "form out of an s3 bucket if you post that form it hits API gateway API gateway it calls lambda lambda process",
    "start": "1351010",
    "end": "1357460"
  },
  {
    "text": "at the forum and shoves the results into DynamoDB notifies the manager the survey came in this app runs it we host it's",
    "start": "1357460",
    "end": "1364420"
  },
  {
    "text": "three cents a month right I mean how many surveys do we process maybe a couple hundred a month but the reality",
    "start": "1364420",
    "end": "1369670"
  },
  {
    "text": "is if a million users showed up tomorrow all I need to do is dial up the capacity on that DynamoDB table and I can support",
    "start": "1369670",
    "end": "1375850"
  },
  {
    "text": "them so you know what other kind of technology can give you that kind of flexibility right with the when you",
    "start": "1375850",
    "end": "1381040"
  },
  {
    "text": "combine server lists with dynamo it is amazing what the possibilities are",
    "start": "1381040",
    "end": "1386530"
  },
  {
    "text": "so anyways results hundreds of thousands of customers millions of requests per",
    "start": "1386530",
    "end": "1392320"
  },
  {
    "start": "1388000",
    "end": "1415000"
  },
  {
    "text": "second I think on prime day we peaked at around thirty four point five million requests per second you know across",
    "start": "1392320",
    "end": "1398080"
  },
  {
    "text": "regions we had hundreds of billions of items we store on our tables petabytes",
    "start": "1398080",
    "end": "1403990"
  },
  {
    "text": "of storage literally there's nothing that operates at the scale of dynamodb",
    "start": "1403990",
    "end": "1409270"
  },
  {
    "text": "it's an incredible system when you really get to look at it there's nothing and nobody in the world has deployed",
    "start": "1409270",
    "end": "1414700"
  },
  {
    "text": "anything like this so it's getting to adaptive capacity you know we want",
    "start": "1414700",
    "end": "1420310"
  },
  {
    "start": "1415000",
    "end": "1430000"
  },
  {
    "text": "adaptive capacity because when you get capacity planning right right nobody cares but when it's wrong boy everybody",
    "start": "1420310",
    "end": "1427210"
  },
  {
    "text": "everybody's on the phone so we don't want that we want we want things to be able to scale up and scale down so let's",
    "start": "1427210",
    "end": "1432610"
  },
  {
    "start": "1430000",
    "end": "1604000"
  },
  {
    "text": "talk about how that works with DynamoDB when you first deploy a table in this particular example we're gonna deploy a table has 500 WCU's 1500 hours to use",
    "start": "1432610",
    "end": "1440110"
  },
  {
    "text": "that's going to give us a single partition okay that single partition sitting there it's got those partition level limits now those partition level",
    "start": "1440110",
    "end": "1446800"
  },
  {
    "text": "limits are actually soft limits all right every table in DynamoDB gets five minutes of burst capacity what we cause",
    "start": "1446800",
    "end": "1452440"
  },
  {
    "text": "unused capacity for for and it's available for burst so let's say his table sat there for five minutes and it",
    "start": "1452440",
    "end": "1458560"
  },
  {
    "text": "was unused it would end up with a with a",
    "start": "1458560",
    "end": "1464130"
  },
  {
    "text": "450,000 r/c use and 150,000 WCU's sitting in its burst get available for use now since it has",
    "start": "1464430",
    "end": "1472179"
  },
  {
    "text": "only one partition a single partition can give me up to a thousand WCU's or three thousand hours to use so the burst",
    "start": "1472179",
    "end": "1478330"
  },
  {
    "text": "capacity of this table is up to five minutes of sustained traffic at 1000",
    "start": "1478330",
    "end": "1483520"
  },
  {
    "text": "WCU's and three thousand hours to use because it's a single partition so you look at that take that five minutes of",
    "start": "1483520",
    "end": "1489070"
  },
  {
    "text": "unused capacity here's my burst bucket add the capacity that I have provisioned how long does it take me to drain my",
    "start": "1489070",
    "end": "1495700"
  },
  {
    "text": "burst bucket based on how many partitions I have on my table in this particular case five minutes right so",
    "start": "1495700",
    "end": "1500890"
  },
  {
    "text": "let's say we go along we start to add more data to the table we get up over 10 gigabytes right 10 gigabytes partition",
    "start": "1500890",
    "end": "1506919"
  },
  {
    "text": "splits we start to see some interesting things happen now we have two partitions",
    "start": "1506919",
    "end": "1513090"
  },
  {
    "text": "so we haven't increased our throughput at all they have the same out throughput",
    "start": "1513090",
    "end": "1518410"
  },
  {
    "text": "so that throughput is actually evenly divided across the two partitions and it's put there so now these partitions each one has a soft limit at 250 WCU's",
    "start": "1518410",
    "end": "1526450"
  },
  {
    "text": "and 750 RC use but what's interesting here is I've actually doubled my burst capacity right my burst throughput",
    "start": "1526450",
    "end": "1532780"
  },
  {
    "text": "capacity since I now have two partitions and in each one of those can give me up to a thousand WCU's or two or three",
    "start": "1532780",
    "end": "1538870"
  },
  {
    "text": "thousand hours to use the burst throughput of the table is increased from one thousand two thousand WCU's and from 3,000 to 6,000 RC use right and now",
    "start": "1538870",
    "end": "1547809"
  },
  {
    "text": "I can get up to one hundred seconds instead of five minutes because I'm bursting at a higher rate I'll drain my",
    "start": "1547809",
    "end": "1552970"
  },
  {
    "text": "burst bucket faster I can get up to 100 seconds of wcu RCU burst",
    "start": "1552970",
    "end": "1558850"
  },
  {
    "text": "alright so pretty straightforward the more partitions you have the higher the burst throughput capacity of the table",
    "start": "1558850",
    "end": "1565540"
  },
  {
    "text": "right I always have five minutes of unused capacity so we go on we split add more data again we start to dilute we",
    "start": "1565540",
    "end": "1572410"
  },
  {
    "text": "split again we add more data we start to dilute right and so what's happening as you can see these partition level soft",
    "start": "1572410",
    "end": "1578650"
  },
  {
    "text": "limits they're kind of falling right and so you say well gee what happens if I get over if I don't have a fully evenly",
    "start": "1578650",
    "end": "1584410"
  },
  {
    "text": "distributed load right I mean now I'm split out to four partitions that's great I have a really really hot table",
    "start": "1584410",
    "end": "1590440"
  },
  {
    "text": "that can deliver a lot of capacity on burst but you know I mean what happens if I actually need one to deliver more",
    "start": "1590440",
    "end": "1596470"
  },
  {
    "text": "than hundred twenty-five wcu and I'm out of bursts right so in this particular case",
    "start": "1596470",
    "end": "1603390"
  },
  {
    "text": "what ends up happening we'll talk about let's just talk about a work real scenario so in this particular",
    "start": "1603870",
    "end": "1610150"
  },
  {
    "start": "1604000",
    "end": "1668000"
  },
  {
    "text": "application let's say you're hired by the Statistics Canada Bureau to build a census application and you decide that",
    "start": "1610150",
    "end": "1616210"
  },
  {
    "text": "you're going to use the following schema for that application you're going to partition on the province you're going",
    "start": "1616210",
    "end": "1621970"
  },
  {
    "text": "to sort on the users ID so that's great seems pretty even no problem lots of",
    "start": "1621970",
    "end": "1628330"
  },
  {
    "text": "provinces in Canada lots of people live in Canada what you didn't really realize when you made that choice is that 50% of",
    "start": "1628330",
    "end": "1635530"
  },
  {
    "text": "people and Canada actually live below the latitude of Seattle okay",
    "start": "1635530",
    "end": "1640570"
  },
  {
    "text": "so it's kind of a very uneven distribution of population right we have one or two provinces in Canada actually",
    "start": "1640570",
    "end": "1647110"
  },
  {
    "text": "have all the people nobody else has any people so when you start to load the data into the table let's say we provision this table out there at 100",
    "start": "1647110",
    "end": "1653590"
  },
  {
    "text": "WCU's and we start to take our census data we're soft limited out at 25 per",
    "start": "1653590",
    "end": "1659230"
  },
  {
    "text": "partition and boy we're loading data into that Ontario and Quebec you know partition really really hot and",
    "start": "1659230",
    "end": "1666430"
  },
  {
    "text": "it's then it's getting too hot so what actually starts to happen in dynamodb so",
    "start": "1666430",
    "end": "1672330"
  },
  {
    "start": "1668000",
    "end": "1750000"
  },
  {
    "text": "this is a real table a real situation you know we just took this out of the you know the from cloud watch but the",
    "start": "1672330",
    "end": "1680200"
  },
  {
    "text": "what happens is you're gonna see that soft limit start to be exceeded and at",
    "start": "1680200",
    "end": "1685450"
  },
  {
    "text": "that point there might be a little bit of throttling on the table because we're exceeding the soft limit and we've",
    "start": "1685450",
    "end": "1690970"
  },
  {
    "text": "exceeded the burst bucket and now we're trying to figure out does this table actually need some additional throughput",
    "start": "1690970",
    "end": "1696670"
  },
  {
    "text": "once we detect that this soft limit is a sustained burst it's not just a transient condition we're going to",
    "start": "1696670",
    "end": "1702580"
  },
  {
    "text": "enable what we call adaptive throughput on the table that then will cause all of those soft limits to be eliminated to a",
    "start": "1702580",
    "end": "1709180"
  },
  {
    "text": "certain extent the read and write ratios will be increased on those particular table partitions and they will be able",
    "start": "1709180",
    "end": "1714490"
  },
  {
    "text": "to effectively borrow capacity from their unused partitions all right what they're really doing is they're using",
    "start": "1714490",
    "end": "1720100"
  },
  {
    "text": "background capacity that's on the storage no they're deployed on right we don't want to enable this on every table by default because we have to actually",
    "start": "1720100",
    "end": "1726610"
  },
  {
    "text": "orchestrate these workloads somewhat to make sure that we have the capacity available to start to to resolve these",
    "start": "1726610",
    "end": "1731800"
  },
  {
    "text": "burst requests right these adaptive throughput requests but when we see tables that have this condition we will put them into",
    "start": "1731800",
    "end": "1738289"
  },
  {
    "text": "that adaptive throughput mode which allows them to borrow their capacity you can see how that now causes that nice",
    "start": "1738289",
    "end": "1743450"
  },
  {
    "text": "even slope for the demand on the table so if we look at the per partition throughput while this is happening you",
    "start": "1743450",
    "end": "1749539"
  },
  {
    "text": "can see very clearly what's happening so each one of these little lines on that graph is one of the partitions on this",
    "start": "1749539",
    "end": "1754850"
  },
  {
    "start": "1750000",
    "end": "1848000"
  },
  {
    "text": "table that red line is the 25 rights per partition that's the soft limit we can see that the the ontario partition is",
    "start": "1754850",
    "end": "1762139"
  },
  {
    "text": "starting to flame beyond 25 rights you know per partition so we see a sustained throttling situation and at some point",
    "start": "1762139",
    "end": "1769100"
  },
  {
    "text": "adaptive throughput is enabled and now all of a sudden that partition can start to borrow from the other other",
    "start": "1769100",
    "end": "1774230"
  },
  {
    "text": "partitions now it's not going to give you more than what you have allocated on the table right if you you're only going",
    "start": "1774230",
    "end": "1780200"
  },
  {
    "text": "to get adaptive throughput if there's capacity left in your on your table if you provision 100 WCU's and you're using",
    "start": "1780200",
    "end": "1786440"
  },
  {
    "text": "100 WC use it won't matter you know what partition is too hot you're just not going to get any more",
    "start": "1786440",
    "end": "1791869"
  },
  {
    "text": "but if you have capacity on the table you're not going to get throttled first for you know it's for sustained periods",
    "start": "1791869",
    "end": "1799039"
  },
  {
    "text": "you're gonna get adaptive throughput enabled and those partitions are gonna be able to now start to borrow from each",
    "start": "1799039",
    "end": "1804679"
  },
  {
    "text": "other so this is great I mean to tell you the truth this helped a lot of tables on prime day over 2,800 Amazon",
    "start": "1804679",
    "end": "1811879"
  },
  {
    "text": "tables would have throttled on prime date and we have had tens of thousands",
    "start": "1811879",
    "end": "1817039"
  },
  {
    "text": "of customer tables that have benefited from this right this guy turned on about six months ago customers didn't even",
    "start": "1817039",
    "end": "1822200"
  },
  {
    "text": "know it was being turned on so there are customers that previously would have been throttling based on these partition",
    "start": "1822200",
    "end": "1827899"
  },
  {
    "text": "level limits who have been benefiting from adaptive throughput for months they don't even know because the tables",
    "start": "1827899",
    "end": "1832909"
  },
  {
    "text": "aren't even throttling it's it's it's again this is the evolution of our platform we saw the way people used the",
    "start": "1832909",
    "end": "1841369"
  },
  {
    "text": "technology and we're improving the way the technology performs to meet the",
    "start": "1841369",
    "end": "1846440"
  },
  {
    "text": "requirements of our users all right so everybody wants a hands-off experience right I can't wait for this",
    "start": "1846440",
    "end": "1853700"
  },
  {
    "start": "1848000",
    "end": "1858000"
  },
  {
    "text": "I want a fully automated car I don't want to drive my car anymore I'm tired of it but we gave you that hands-off",
    "start": "1853700",
    "end": "1859220"
  },
  {
    "start": "1858000",
    "end": "2101000"
  },
  {
    "text": "experience for DynamoDB right there's a technology we have out there called auto scaling some of you may be familiar with",
    "start": "1859220",
    "end": "1865210"
  },
  {
    "text": "there was a library around for many years this is now an integrated part of the platform that you can able and and it's a really cool solution",
    "start": "1865210",
    "end": "1873350"
  },
  {
    "text": "because it allows you to eliminate that that that let's provision for peak type",
    "start": "1873350",
    "end": "1879020"
  },
  {
    "text": "of mindset right what you do with auto scaling is you set a high-water mark and a low-water mark at which point the",
    "start": "1879020",
    "end": "1884510"
  },
  {
    "text": "system will increase or decrease capacity based on the load and you know you can set those thresholds at a low",
    "start": "1884510",
    "end": "1891140"
  },
  {
    "text": "level at a a 20% give them double my load because I'm going to expect the rush or hey I have a soft curve that I",
    "start": "1891140",
    "end": "1897350"
  },
  {
    "text": "know what so don't don't increase to 70 till 70% consumption it's all up to you",
    "start": "1897350",
    "end": "1902590"
  },
  {
    "text": "but you can see the chart on the left here you've got a table that in the in the past would be provision for peak",
    "start": "1902590",
    "end": "1908149"
  },
  {
    "text": "capacity in all that area under the line all that white space that's just wasted money okay and then when you look at the",
    "start": "1908149",
    "end": "1914419"
  },
  {
    "text": "chart on the right with auto scaling enabled now all of a sudden you've got provision throughput that is that's",
    "start": "1914419",
    "end": "1919700"
  },
  {
    "text": "following the demand and if you took the area under that under that red line you know all the white space it's going to",
    "start": "1919700",
    "end": "1925549"
  },
  {
    "text": "be a heck of a lot less than the area on the left so you can save a lot by being able to do this now again watching this",
    "start": "1925549",
    "end": "1934039"
  },
  {
    "text": "happened now the way I actually advise teams on prime day and and on Cyber Monday and Black Friday was to use kind",
    "start": "1934039",
    "end": "1941059"
  },
  {
    "text": "of auto scaling as the insurance policy right you set your floor at the highest you expect at my peak expected level",
    "start": "1941059",
    "end": "1946970"
  },
  {
    "text": "because heck we know the traffic's coming so why do i why do i want to stand on the train tracks and stare down the Train and make sure I can jump off",
    "start": "1946970",
    "end": "1953240"
  },
  {
    "text": "fast enough right and we want to we want if I know the train is coming then let's make sure it's got room right so I tell",
    "start": "1953240",
    "end": "1960320"
  },
  {
    "text": "the teens to provision auto scaling at the high level and use it if you get an unexpected burst or demand right and",
    "start": "1960320",
    "end": "1966110"
  },
  {
    "text": "then auto scaling can kick in and increase additional capacity over the top now we had three teams do that and one team on prime day was huge",
    "start": "1966110",
    "end": "1973010"
  },
  {
    "text": "this was the you know the team that manages the deal box on the front of the of the webpage right what are the hot",
    "start": "1973010",
    "end": "1979250"
  },
  {
    "text": "current deals well you know they got they got three hundred percent demand you know they needed three hundred",
    "start": "1979250",
    "end": "1985760"
  },
  {
    "text": "percent capacity of what they expected you know they they'd provision their auto scaling out there and and the",
    "start": "1985760",
    "end": "1991159"
  },
  {
    "text": "ability of the system to respond to that was actually just incredible to watch in real time within 10 minutes these guys",
    "start": "1991159",
    "end": "1996830"
  },
  {
    "text": "had requested double the capacity it wasn't enough they requested another 50% of the capacity on top of that and",
    "start": "1996830",
    "end": "2002620"
  },
  {
    "text": "within 20 minutes that table went from a hundred thousand RC use to three hundred thousand RC use",
    "start": "2002620",
    "end": "2009310"
  },
  {
    "text": "and in real time so you just can't do that with a regular database all right",
    "start": "2009310",
    "end": "2015550"
  },
  {
    "text": "if I'm deployed with a MongoDB cluster or a Cassandra cluster oh my gosh I'm just gonna be I'm stuck for the duration",
    "start": "2015550",
    "end": "2021940"
  },
  {
    "text": "right that's as much as I'm getting and there is no more because even if I added a shard I'm actually going to be not",
    "start": "2021940",
    "end": "2027880"
  },
  {
    "text": "doing myself any favors because when you add the shard to a traditional no SQL database what happens the throughput",
    "start": "2027880",
    "end": "2034210"
  },
  {
    "text": "goes down until that shard is replicated right I'm actually consuming capacity",
    "start": "2034210",
    "end": "2039400"
  },
  {
    "text": "from the cluster to replicate the data to the new shard and I have seen",
    "start": "2039400",
    "end": "2044470"
  },
  {
    "text": "customers that are under load if they don't if they get it to if they if they if they run the they run too close to the ragged edge and they let the",
    "start": "2044470",
    "end": "2050889"
  },
  {
    "text": "utilization of their cluster get too high then the replication will fail right because the the replication log",
    "start": "2050890",
    "end": "2057700"
  },
  {
    "text": "will roll before the cluster can actually get caught up and at that point it has to start over again so I have seen customers to have to go into an API",
    "start": "2057700",
    "end": "2064030"
  },
  {
    "text": "throttling stage or state because they can't let the database get beyond 70 or",
    "start": "2064030",
    "end": "2070000"
  },
  {
    "text": "80 percent utilization because the replication lag starts to crush them and they have and they'll never get another",
    "start": "2070000",
    "end": "2075159"
  },
  {
    "text": "shard right so literally customers now starting to add shards at 50 percent total capacity they just start adding",
    "start": "2075160",
    "end": "2080950"
  },
  {
    "text": "shards because they know in two or three weeks when it's available they're gonna need it okay so if that's the game you",
    "start": "2080950",
    "end": "2086020"
  },
  {
    "text": "want to play that's okay but I think that what you really want is something that's going to be adaptive reactive and",
    "start": "2086020",
    "end": "2092740"
  },
  {
    "text": "meet the needs of your you know your applications in a very elastic way and there's very few services out there that",
    "start": "2092740",
    "end": "2098410"
  },
  {
    "text": "can do that dynamodb does it in a very very effective way and many customers rely on it I mean big customers right I",
    "start": "2098410",
    "end": "2104980"
  },
  {
    "start": "2101000",
    "end": "2155000"
  },
  {
    "text": "mean you see the logos on here Major League Baseball advanced media these guys do the stat cast right if you're",
    "start": "2104980",
    "end": "2110320"
  },
  {
    "text": "familiar if you're baseball fan you ever watched some of those replays and shows you know here's was his acceleration",
    "start": "2110320",
    "end": "2115510"
  },
  {
    "text": "here's how fast he was running here was the shortest distance to the ball here's the path he took and how long it took",
    "start": "2115510",
    "end": "2120730"
  },
  {
    "text": "all that data is being processed on AWS infrastructure is being stored in dynamo DB and again a great use case for auto",
    "start": "2120730",
    "end": "2128830"
  },
  {
    "text": "scaling right the ability to when the games are play and they need it I mean the games aren't play and they don't",
    "start": "2128830",
    "end": "2133990"
  },
  {
    "text": "need it so why pay for it right and that's a stable a lot of customers saving a lot of money that way you know Expedia can and Under",
    "start": "2133990",
    "end": "2142539"
  },
  {
    "text": "Armor BMW you name it I mean there's they're just and this is just a sampling of the logos right we have thousands and",
    "start": "2142539",
    "end": "2148809"
  },
  {
    "text": "thousands and thousands of customers using dynamodb in huge ways and so next",
    "start": "2148809",
    "end": "2155920"
  },
  {
    "start": "2155000",
    "end": "2229000"
  },
  {
    "text": "feature we could talk a little bit about which is really cool TTL you know this gives you the ability to kind of scale",
    "start": "2155920",
    "end": "2161109"
  },
  {
    "text": "your capacity down automatically and you know so as you start to increase you",
    "start": "2161109",
    "end": "2167589"
  },
  {
    "text": "know process data against a table of many applications the data might get stale maybe it's event data that after",
    "start": "2167589",
    "end": "2172990"
  },
  {
    "text": "your a week or two weeks I really don't care about anymore I want that data to clear off the table so maybe when I insert the items on the",
    "start": "2172990",
    "end": "2178990"
  },
  {
    "text": "table what I'm gonna do is add a little attribute called TTL it's gonna have a timestamp in there when that timestamp",
    "start": "2178990",
    "end": "2184630"
  },
  {
    "text": "is expired there's a sweeper that comes along he's gotta clear those items off the table for you so the nice thing",
    "start": "2184630",
    "end": "2191920"
  },
  {
    "text": "about this is you can really reduce your costs right I mean why store all that data on the table if I don't need it",
    "start": "2191920",
    "end": "2197160"
  },
  {
    "text": "TTL items are going to show up on what we call the dynamodb stream a stream is",
    "start": "2197160",
    "end": "2202180"
  },
  {
    "text": "like the running change log of write operations against the table so when a TTL delete occurs that item is going to",
    "start": "2202180",
    "end": "2207849"
  },
  {
    "text": "actually show up on the DynamoDB stream and it can be processed by a lambda function so it'll read the item it's going to say hey this was a system",
    "start": "2207849",
    "end": "2213940"
  },
  {
    "text": "delete that indicates it was a TTL operation to clean that thing off the table and you can decide I want to archive this maybe I want to put it on a",
    "start": "2213940",
    "end": "2219910"
  },
  {
    "text": "cold table or whatever you want to do with that data but basically get it off the table",
    "start": "2219910",
    "end": "2225339"
  },
  {
    "text": "because you don't want to store it unless you're actually going to use it and and customers have really benefited",
    "start": "2225339",
    "end": "2231039"
  },
  {
    "start": "2229000",
    "end": "2301000"
  },
  {
    "text": "from this right we had tune was one customer purged 85 terabytes of data just by enabling TTL they ran a table",
    "start": "2231039",
    "end": "2236950"
  },
  {
    "text": "scan added that TTL attribute to all of their items when we--when defeat and they actually did that I think well before the feature was delivered and",
    "start": "2236950",
    "end": "2242950"
  },
  {
    "text": "then when the feature was actually enabled in the regions where they had those tables have just picked up that TTL attribute and swept off those items",
    "start": "2242950",
    "end": "2249549"
  },
  {
    "text": "eighty five terabytes save 200 thousand dollars a year a cloud watch our internal service for monitoring all of",
    "start": "2249549",
    "end": "2256690"
  },
  {
    "text": "our AWS services reduced overall provision throughput by seventy five percent and the reason why was because",
    "start": "2256690",
    "end": "2263079"
  },
  {
    "text": "they were actually using some inefficient queries they were querying using filter conditions filtering",
    "start": "2263079",
    "end": "2269019"
  },
  {
    "text": "editions caused you to read all of the items in a given part and then filter the items only that match well when their partitions got big",
    "start": "2269019",
    "end": "2275560"
  },
  {
    "text": "with a bunch of stale data they were reading a whole bunch of data they didn't care about and they were applying a filter condition to knock him out and",
    "start": "2275560",
    "end": "2281230"
  },
  {
    "text": "so they kept on increasing capacity increasing capacity finally they realized what was going on they enabled",
    "start": "2281230",
    "end": "2286480"
  },
  {
    "text": "TTL reduced their provision throughput by 75% now either gonna save millions of dollars right for Amazon over the next",
    "start": "2286480",
    "end": "2293830"
  },
  {
    "text": "year or two so I mean huge features that allow you to kind of dynamically scale the",
    "start": "2293830",
    "end": "2299500"
  },
  {
    "text": "database both up and down and the bottom line is when you get into you know",
    "start": "2299500",
    "end": "2304900"
  },
  {
    "start": "2301000",
    "end": "2499000"
  },
  {
    "text": "managing databases it's not easy anyone who's done it knows it's not easy",
    "start": "2304900",
    "end": "2310720"
  },
  {
    "text": "you've got servers right servers need to be you know you've got capacity planning behind that infrastructure you've got",
    "start": "2310720",
    "end": "2316450"
  },
  {
    "text": "provisioning you have OS patches you've got monitoring of that infrastructure you know I've talked to customers that",
    "start": "2316450",
    "end": "2322450"
  },
  {
    "text": "have entire IT organizations dedicated to managing their database clusters",
    "start": "2322450",
    "end": "2328020"
  },
  {
    "text": "they're not in the business of managing database clusters I mean in some cases",
    "start": "2328020",
    "end": "2333580"
  },
  {
    "text": "these guys are in some of the most you know non-technical industries yet",
    "start": "2333580",
    "end": "2339700"
  },
  {
    "text": "they're having to maintain a very high level of technical skills in IT operations to maintain this infrastructure so don't do it you know",
    "start": "2339700",
    "end": "2346690"
  },
  {
    "text": "you've got database you know software upgrades security patches and scaling",
    "start": "2346690",
    "end": "2353830"
  },
  {
    "text": "issues right monitoring performance tuning re replication you know I mean you deploy all this infrastructure when",
    "start": "2353830",
    "end": "2360010"
  },
  {
    "text": "you've got fifteen shards out there and you got all these servers running anytime anything fails it's step up a",
    "start": "2360010",
    "end": "2365710"
  },
  {
    "text": "new server step down that secondary replicate this is a constant process right that replication steals capacity",
    "start": "2365710",
    "end": "2372310"
  },
  {
    "text": "and this is really one of the things that's important about DynamoDB so you don't need to allocate any of that capacity right we it's all priced in you",
    "start": "2372310",
    "end": "2380080"
  },
  {
    "text": "turn on the table you say here's how much capacity I want and you're gonna get a hundred percent of that capacity",
    "start": "2380080",
    "end": "2385600"
  },
  {
    "text": "for your app you're not gonna have to burn any of that capacity to take care of background management not any",
    "start": "2385600",
    "end": "2391600"
  },
  {
    "text": "replication none of that stuff is your responsibility that's all our responsibility and that's what we do you",
    "start": "2391600",
    "end": "2397420"
  },
  {
    "text": "tell us what you need for your application and it makes it so nice because capacity planning is reduced to",
    "start": "2397420",
    "end": "2403480"
  },
  {
    "text": "simple math if you come to my dat 403 session I go through you know some you know design",
    "start": "2403480",
    "end": "2409270"
  },
  {
    "text": "patterns on right sharding and and I talk about you know how to determine how many partitions I need to be able to",
    "start": "2409270",
    "end": "2415870"
  },
  {
    "text": "meet the the query load that I'm putting against these partition keys and it",
    "start": "2415870",
    "end": "2421960"
  },
  {
    "text": "comes down to it's very simple math right how many requests per second how big or my items right how many am i",
    "start": "2421960",
    "end": "2427750"
  },
  {
    "text": "putting in a single partition okay I mean it's it's very simple math versus this this is complex and you can do all",
    "start": "2427750",
    "end": "2435970"
  },
  {
    "text": "this yourself and you're gonna do it with zero downtime right no you're not",
    "start": "2435970",
    "end": "2441460"
  },
  {
    "text": "okay most organizations never achieve this we have and and and it's because we",
    "start": "2441460",
    "end": "2448360"
  },
  {
    "text": "operate at a scale that's well beyond what most people would ever even dream of operating if you look at Amazon's",
    "start": "2448360",
    "end": "2454800"
  },
  {
    "text": "DynamoDB you know processing plain there's not a enterprise in this world",
    "start": "2454800",
    "end": "2460720"
  },
  {
    "text": "that matches what we have deployed and it serves what we serve petabytes of data millions of requests per second",
    "start": "2460720",
    "end": "2467400"
  },
  {
    "text": "it's a fully managed fully adapted database service and now with the with the features that we've just released I",
    "start": "2467400",
    "end": "2473560"
  },
  {
    "text": "mean this thing is really ready for primetime you know the the the the scalability the adaptive nature the",
    "start": "2473560",
    "end": "2480460"
  },
  {
    "text": "elasticity of the system you're just not it's it's not I have looked at everything I have worked at other no SQL",
    "start": "2480460",
    "end": "2487600"
  },
  {
    "text": "technology providers there's nothing in the world that matches the performance and the capabilities of this system and",
    "start": "2487600",
    "end": "2492760"
  },
  {
    "text": "I would recommend that you try it it's a it's a fantastic system alright I know we're a little ahead of time here but I",
    "start": "2492760",
    "end": "2498970"
  },
  {
    "text": "don't think I've got much more content for you thank you for taking the time out of your day to come listen to me if",
    "start": "2498970",
    "end": "2504310"
  },
  {
    "start": "2499000",
    "end": "2521000"
  },
  {
    "text": "you have any questions step up the microphone and fire away [Applause]",
    "start": "2504310",
    "end": "2511109"
  },
  {
    "text": "[Applause]",
    "start": "2513670",
    "end": "2517788"
  },
  {
    "start": "2521000",
    "end": "2607000"
  },
  {
    "text": "what advice do you have for folks who end up in a situation where scaling up",
    "start": "2522059",
    "end": "2527190"
  },
  {
    "text": "causes partition splits and then they want to scale back down to where they",
    "start": "2527190",
    "end": "2532469"
  },
  {
    "text": "were at the table level but yep they have less capacity per partition yeah so this is exactly why we've we've",
    "start": "2532469",
    "end": "2538469"
  },
  {
    "text": "introduced adapt your throughput right so those those partition level limits now it's my name's I refer to you in the",
    "start": "2538469",
    "end": "2543839"
  },
  {
    "text": "presentation of soft limits they're no longer the hard limits they used to be these are so now what you can do is you",
    "start": "2543839",
    "end": "2549690"
  },
  {
    "text": "can scale your yeah I wouldn't say scale out and split without even thinking about it right we don't want those partition levels to drop down to like",
    "start": "2549690",
    "end": "2555930"
  },
  {
    "text": "one RCU right but we don't need to be so worried about those partition level",
    "start": "2555930",
    "end": "2561119"
  },
  {
    "text": "limits dropping because with adaptive throughput if the workload starts to flame above the the limit the soft limit",
    "start": "2561119",
    "end": "2567269"
  },
  {
    "text": "you're gonna borrow from the other partition so as long as you're below your table capacity you should be okay and that kicks in after about ten",
    "start": "2567269",
    "end": "2574559"
  },
  {
    "text": "minutes five minutes for high enabled we need to see one cloud watch cycle and then it'll go ahead and kick it on and",
    "start": "2574559",
    "end": "2580619"
  },
  {
    "text": "then what starts happening is it starts adjusting the ratio right it'll start seeing that okay you need one when maybe",
    "start": "2580619",
    "end": "2585630"
  },
  {
    "text": "you need one point one to one ratio now I need one point two and so on so forth it would increase all the way to 3,000",
    "start": "2585630",
    "end": "2590789"
  },
  {
    "text": "to one but that would mean that you'd have a really really diluted partition so we want to avoid that situations just",
    "start": "2590789",
    "end": "2599489"
  },
  {
    "text": "curious I'm sorry oh no we don't we do",
    "start": "2599489",
    "end": "2608190"
  },
  {
    "start": "2607000",
    "end": "2681000"
  },
  {
    "text": "we don't ever reduce the number of partitions but they said that was the question question was when we scale back down do we reduce the number of",
    "start": "2608190",
    "end": "2614039"
  },
  {
    "text": "partitions no we keep the number of partitions the same the soft limits get reduced and then adaptive throughputs",
    "start": "2614039",
    "end": "2619200"
  },
  {
    "text": "gonna kick in faster that's what ends up happening just curious about the prime",
    "start": "2619200",
    "end": "2624239"
  },
  {
    "text": "day for the prime day ten millions requests per seconds how many of equals in how where are you doing needed to",
    "start": "2624239",
    "end": "2630989"
  },
  {
    "text": "support that kind of I'm sorry I'm not understanding the question so the prime day for the prime date that kind of a big huge amount of throughput how much",
    "start": "2630989",
    "end": "2638430"
  },
  {
    "text": "how we were talking about to support I can know how much hardware yeah I mean",
    "start": "2638430",
    "end": "2643469"
  },
  {
    "text": "to the customer inside with it's an abstract concept right you just say I need X RC you xwc operation to support",
    "start": "2643469",
    "end": "2650400"
  },
  {
    "text": "that kind of theory I couldn't tell you I have no idea how much hardware it takes to support million RC user million WCU's that",
    "start": "2650400",
    "end": "2656789"
  },
  {
    "text": "probably a better question for the backplane engineers but like I said preferred for the customers perspective",
    "start": "2656789",
    "end": "2661859"
  },
  {
    "text": "that's just not something you need to be aware of right because you're just getting a bunch of 10 gigabyte partitions that can do 1k RC or 1 k WC u",
    "start": "2661859",
    "end": "2668880"
  },
  {
    "text": "3k r seu so if you need a million / right 1k and that's how many right",
    "start": "2668880",
    "end": "2674339"
  },
  {
    "text": "partitions you're going to get so I think I've got some questions over there",
    "start": "2674339",
    "end": "2681179"
  },
  {
    "start": "2681000",
    "end": "2971000"
  },
  {
    "text": "so back in engineer at tinder our access pattern is very some people swipe a lot",
    "start": "2681179",
    "end": "2687869"
  },
  {
    "text": "more than others and so we get a lot of hot sharding right my question is how",
    "start": "2687869",
    "end": "2695339"
  },
  {
    "text": "quickly does adaptive capacity kick in when you're getting throttled on a shard okay so what's going to end up happening",
    "start": "2695339",
    "end": "2701609"
  },
  {
    "text": "with adaptive throughput is the first time it's enabled it's never getting it turned off right unless your workflow",
    "start": "2701609",
    "end": "2706769"
  },
  {
    "text": "access pattern completely changes so if you're if you're seeing hotkeys there's a couple things that could be happening",
    "start": "2706769",
    "end": "2712169"
  },
  {
    "text": "we probably want to talk actually is you know it could be that you're seeing peak bursts through throttling which",
    "start": "2712169",
    "end": "2719039"
  },
  {
    "text": "would mean you're asking more than a thousand WCU's or three thousand dollars to use per second per partition if",
    "start": "2719039",
    "end": "2724259"
  },
  {
    "text": "that's happening then there's no all bets are off adaptive droop is not gonna help you and maybe what we need to do is actually split your table and give you",
    "start": "2724259",
    "end": "2730739"
  },
  {
    "text": "more partitions like I talked about how you get more throughput so I'd want to know are you burst throttling and then I",
    "start": "2730739",
    "end": "2736049"
  },
  {
    "text": "would want to look at if you're not burst throttling then are you hot keying right I would almost I would wonder I would",
    "start": "2736049",
    "end": "2742109"
  },
  {
    "text": "say with your use case would be hard to see how you'd be hot keying but I want to understand your access patterns a little better bottom line is with",
    "start": "2742109",
    "end": "2748259"
  },
  {
    "text": "adaptive throughput five minutes to turn it on it's going to start load leveling you it'll never turn off it'll go all",
    "start": "2748259",
    "end": "2753929"
  },
  {
    "text": "the way down to one mate which is effectively turned off but it's always going to be watching your table at that",
    "start": "2753929",
    "end": "2759209"
  },
  {
    "text": "point and so it would be able to kick on really fast when you say split the table do you mean actually two separate table",
    "start": "2759209",
    "end": "2764699"
  },
  {
    "text": "definitions when I say split the table I mean double the number of partitions oh god check out yes to give you a give you more burst throughput right well we",
    "start": "2764699",
    "end": "2771239"
  },
  {
    "text": "what we're currently doing is we just increase the provision throughput by like 20 or 30 percent higher than our",
    "start": "2771239",
    "end": "2777089"
  },
  {
    "text": "consume capacity and ends up costing us more money though are you running",
    "start": "2777089",
    "end": "2782999"
  },
  {
    "text": "generally speaking you're running a 70 80 % consume yeah pretty much okay so now that's that's a pretty good and I always tell people with that at",
    "start": "2782999",
    "end": "2789450"
  },
  {
    "text": "that level you're gonna start seeing random and spurious throttling right because you you know it's across the key space and it could be that this slight",
    "start": "2789450",
    "end": "2795869"
  },
  {
    "text": "imbalance of requests is starting to hit this partition a little bit more than this partition so my bet would be your",
    "start": "2795869",
    "end": "2801960"
  },
  {
    "text": "Peaks rattling you know and what we'd want to do is we do want to get the capacity bump because as 7080 percent",
    "start": "2801960",
    "end": "2809190"
  },
  {
    "text": "it's just at that level where you can see spurious throttling now you could you instrument the application to do a",
    "start": "2809190",
    "end": "2814410"
  },
  {
    "text": "back off retry right yeah yeah we do that okay and that should resolve I would imagine that should be resolving",
    "start": "2814410",
    "end": "2819480"
  },
  {
    "text": "most of your your issue our error rate is really low it's more the costs okay yeah no I get you so and you know what",
    "start": "2819480",
    "end": "2825480"
  },
  {
    "text": "you probably do yeah you guys have enterprise support I'd say let's get a consultation set up with the with the",
    "start": "2825480",
    "end": "2831630"
  },
  {
    "text": "specialist sa team I know I think we've got an EB C with your team actually we do yeah and so if you maybe talk to I",
    "start": "2831630",
    "end": "2838140"
  },
  {
    "text": "think Shawn Schreiber might be the one who's gonna be in that so go ahead and and ask this question of him and if you need to I'm happy to engage as well I",
    "start": "2838140",
    "end": "2844140"
  },
  {
    "text": "run the black belt team so we can we can sit down and talk with your team about how you're using it and see maybe there's a better access pattern okay",
    "start": "2844140",
    "end": "2850109"
  },
  {
    "text": "sounds good alright thanks a lot my name is saya have a question so the latency for reads",
    "start": "2850109",
    "end": "2856920"
  },
  {
    "text": "is is going to remain constant I'm just",
    "start": "2856920",
    "end": "2861960"
  },
  {
    "text": "thinking how does it compare with say something like elastic cache can we can",
    "start": "2861960",
    "end": "2867690"
  },
  {
    "text": "we remove elastic cache and rely completely on dynamite because I get different freezer so at first off I",
    "start": "2867690",
    "end": "2874020"
  },
  {
    "text": "would say now with with the introduction of Dax which is dynamodb accelerator it's a fully integrated front-end distributed cache for dynamodb I would",
    "start": "2874020",
    "end": "2880319"
  },
  {
    "text": "stay away from ElastiCache because that's kind of side cash implementation that you have to manage right so DynamoDB Dax if it's available in the",
    "start": "2880319",
    "end": "2886859"
  },
  {
    "text": "regions that you're deployed I believe it's available should be available in all regions now you might want to verify that I would just go with that as you're",
    "start": "2886859",
    "end": "2893430"
  },
  {
    "text": "caching front-end that's going to give you sub 1 millisecond latency and then you won't have to worry about cache population right because all your reads",
    "start": "2893430",
    "end": "2899819"
  },
  {
    "text": "and writes are going to go through that cache instance with the last two cache the cache sits on the side and what you do is you hit the cache if it's not",
    "start": "2899819",
    "end": "2905849"
  },
  {
    "text": "there I go read the table and then I have to stick it in the cache right with Dax I just read that I read Dax if it's",
    "start": "2905849",
    "end": "2911220"
  },
  {
    "text": "not there Dax goes and gets it so it's a much better solution than the last and reads okay if you're looking for full",
    "start": "2911220",
    "end": "2918780"
  },
  {
    "text": "consistency then there's a couple of scenarios if you've got a single Dax head node and all reads and writes are going through the Dax head node then you're guaranteed",
    "start": "2918780",
    "end": "2925570"
  },
  {
    "text": "consistency on your item writes now query result sets are cached independently so you want to set the TTL",
    "start": "2925570",
    "end": "2931240"
  },
  {
    "text": "for your query results very short and if you need full read consistency and you have a distributed and you have too much",
    "start": "2931240",
    "end": "2937360"
  },
  {
    "text": "data set in a single Dax instance and you have to run distributed then if what's your latency requirement you need",
    "start": "2937360",
    "end": "2943240"
  },
  {
    "text": "sub one millisecond or is low single-digit millisecond okay okay then you don't even need cash I just go hit",
    "start": "2943240",
    "end": "2948820"
  },
  {
    "text": "the table because if you do by default dynamo DB operates in what eventual",
    "start": "2948820",
    "end": "2955150"
  },
  {
    "text": "consistency in eventual consistent reads but you can turn on consistent reads once you turn that on it's gonna double",
    "start": "2955150",
    "end": "2961060"
  },
  {
    "text": "your read cost but it's going to give you a consistent read and it's gave you a low single-digit millisecond response time on average so I would go with that",
    "start": "2961060",
    "end": "2969150"
  },
  {
    "text": "okay so you mentioned that dynamo DB stable is the database that can be both",
    "start": "2969690",
    "end": "2976210"
  },
  {
    "start": "2971000",
    "end": "3098000"
  },
  {
    "text": "CP and ap so can you give some more information sure so it was kind of",
    "start": "2976210",
    "end": "2981280"
  },
  {
    "text": "similar discussion right so by default a dynamo DB is well it's architected via CP system right so it means that all",
    "start": "2981280",
    "end": "2987640"
  },
  {
    "text": "rights go to the primary they're gonna get replicated just secondary before they are gonna be acknowledged to the client and and and you know in the the",
    "start": "2987640",
    "end": "2996220"
  },
  {
    "text": "default read condition would be to read from secondary okay that's what gives it kind of an AP flavor but it's not really",
    "start": "2996220",
    "end": "3002070"
  },
  {
    "text": "a P it's still CP because all rights it's a single master right so all rights go to the single primary unit within the",
    "start": "3002070",
    "end": "3008220"
  },
  {
    "text": "region now a technology like Cassandra okay that's true ap because it's it's it's headless master master right",
    "start": "3008220",
    "end": "3014520"
  },
  {
    "text": "there's there's no there's no single master node that all the clients must talk to I can write to any node in a Cassandra ring right now there's",
    "start": "3014520",
    "end": "3020880"
  },
  {
    "text": "different conditions around that right I might give a quorum right whatnot but bottom line is any any node in the",
    "start": "3020880",
    "end": "3027000"
  },
  {
    "text": "Cassandra cluster can take the right so that's what makes it ap alright because if they if there's a partition between",
    "start": "3027000",
    "end": "3032100"
  },
  {
    "text": "the nodes then I have a client talking to node a client talking to node B and there's a partition well guess what",
    "start": "3032100",
    "end": "3037290"
  },
  {
    "text": "they're both going to be able to read and write so it's available and it's partition tolerant but it's not going to",
    "start": "3037290",
    "end": "3042570"
  },
  {
    "text": "be consistent right because those two clients once they start writing the data they ain't reading the same data no more right so that's what makes it ap vs. CPU",
    "start": "3042570",
    "end": "3050130"
  },
  {
    "text": "now Dynamo can never be truly ap and neither can either  right now when you get global",
    "start": "3050130",
    "end": "3057030"
  },
  {
    "text": "tables global tables is like global master master now all of a sudden dynamo can start talking about being it an AP",
    "start": "3057030",
    "end": "3064170"
  },
  {
    "text": "system because I can have a right to region a and a right to region B they could occur on two different tables and",
    "start": "3064170",
    "end": "3069630"
  },
  {
    "text": "then they're gonna have to resolve at some points so to summarize basically you always write to the master shirts",
    "start": "3069630",
    "end": "3075450"
  },
  {
    "text": "and yeah well within the region the rights are always going to the primary of the replica and you read from every",
    "start": "3075450",
    "end": "3081600"
  },
  {
    "text": "shirt you can read from any one now yeah you can when you enable EC reads you read from secondaries only there's to",
    "start": "3081600",
    "end": "3087240"
  },
  {
    "text": "secondaries when you enable consistent reads you read only from the primary there's one primary so IEC reads or half the cost cuz I got twice the read",
    "start": "3087240",
    "end": "3093720"
  },
  {
    "text": "capacity okay thanks cool do you always",
    "start": "3093720",
    "end": "3099090"
  },
  {
    "start": "3098000",
    "end": "3217000"
  },
  {
    "text": "split partitions on equal halves in terms of provision throughput do we always I'm sorry do we always split",
    "start": "3099090",
    "end": "3105600"
  },
  {
    "text": "partitions oh do me equally and well there's two ways partition split and dynamodb one is by capacity and one is",
    "start": "3105600",
    "end": "3111900"
  },
  {
    "text": "by size when a partition splits by size it's gonna be the one that grew too big all right so this one's bigger than ten",
    "start": "3111900",
    "end": "3117690"
  },
  {
    "text": "gigabytes and it's not if there's no hard line at ten gig it actually there's a hard line at 20 so on the system on",
    "start": "3117690",
    "end": "3124260"
  },
  {
    "text": "the backplane we're gonna decide somewhere between 10 and 20 gigabytes this guy's got a split what he gets to 20 is gonna split okay all right so",
    "start": "3124260",
    "end": "3131400"
  },
  {
    "text": "that's that's one way to it splits the other way it splits the spice is by capacity so when you dial up the capacity you provision the table there's",
    "start": "3131400",
    "end": "3137580"
  },
  {
    "text": "a little bit of math we go through to figure out how many partitions you're gonna get initially when you dial the capacity beyond that point we don't",
    "start": "3137580",
    "end": "3144240"
  },
  {
    "text": "really know how to allocate it so what we do is we just double the number of partitions and divide the capacity that",
    "start": "3144240",
    "end": "3149730"
  },
  {
    "text": "you've allocated across those partitions and call that the new soft limit so if I have 10 partitions on my table let's say",
    "start": "3149730",
    "end": "3154920"
  },
  {
    "text": "I deploy the table with 10,000 WCU's it's got 10 partitions and I provision to 11,000 it's going to end up splitting",
    "start": "3154920",
    "end": "3161280"
  },
  {
    "text": "to Doug to 20 partitions and dividing 11,000 WCU's across those 20 partitions",
    "start": "3161280",
    "end": "3166500"
  },
  {
    "text": "okay so that's why that partition level throughput used to be really deadly all right because you really needed to",
    "start": "3166500",
    "end": "3172020"
  },
  {
    "text": "know when you when you created the table what your maximum throughput would ever be because if you ever dialed it up above that oh boy you could have your",
    "start": "3172020",
    "end": "3178440"
  },
  {
    "text": "partition level limits in a heartbeat and not know it right but now with adaptive throughput not so painful I",
    "start": "3178440",
    "end": "3184320"
  },
  {
    "text": "actually have been recommending people to split their tables for burst throughput capacity quite frequently",
    "start": "3184320",
    "end": "3189750"
  },
  {
    "text": "lately and it's been awesome because I mean I've been very closely watching all of those tables to make sure that I'm",
    "start": "3189750",
    "end": "3195360"
  },
  {
    "text": "not getting him into a bad state right because you know it's not something I was normally recommending and now I am",
    "start": "3195360",
    "end": "3200550"
  },
  {
    "text": "and it's been great to watch how the system's performed with it I just see those read write ratios increase on those tables adaptive throughput comes",
    "start": "3200550",
    "end": "3206820"
  },
  {
    "text": "through and and now they've doubled their burst capacity and it doesn't even matter that they've got a lower soft",
    "start": "3206820",
    "end": "3212010"
  },
  {
    "text": "limit on the table on the partition level so that's that's kind of where you go with that right just to clarify like",
    "start": "3212010",
    "end": "3218400"
  },
  {
    "text": "in in the past in the given point if that on off time all partitions had",
    "start": "3218400",
    "end": "3224550"
  },
  {
    "text": "always the same provision that throughput not always so when they split by size they're gonna well again with",
    "start": "3224550",
    "end": "3233760"
  },
  {
    "text": "adaptive throughput your statement is generally accurate absolutely because adapter throughput will compensate for",
    "start": "3233760",
    "end": "3239730"
  },
  {
    "text": "any partition that is lower than the others but the soft limits may vary all right depending on what we call the",
    "start": "3239730",
    "end": "3245100"
  },
  {
    "text": "split generation of the partition if all the split generations are even are the same they're gonna have the same",
    "start": "3245100",
    "end": "3251040"
  },
  {
    "text": "partition level throughput if the split generations are different meaning these split by size then these split by capacity you see what I'm saying",
    "start": "3251040",
    "end": "3257700"
  },
  {
    "text": "the ones that split by size well they're going to take the limit that came from the parent they're gonna divide it between the two okay right so they smell",
    "start": "3257700",
    "end": "3264270"
  },
  {
    "text": "those those might have a little bit lower limit than the ones above on the generation previous right so it's it's",
    "start": "3264270",
    "end": "3270090"
  },
  {
    "text": "not quite as clean as the you know there's no real clean formula to determine it again the the leveling",
    "start": "3270090",
    "end": "3275910"
  },
  {
    "text": "factor here and all of this is adaptive throughput right now that that's in play you know all this other stuff it's just",
    "start": "3275910",
    "end": "3282210"
  },
  {
    "text": "soft limits it's more interesting to us than you right because we just need to know where the soft limits are so we can turn on the adapter throughput for you",
    "start": "3282210",
    "end": "3288450"
  },
  {
    "text": "guys it's like okay sooner or later it's gonna get turned on if I need it and I don't have to do anything to make it",
    "start": "3288450",
    "end": "3293610"
  },
  {
    "text": "happen right so this this whole worrying about partition level limits thing is just it's becoming a non-issue which is",
    "start": "3293610",
    "end": "3301620"
  },
  {
    "text": "yeah but make it good yes and they gets enabled after five minutes during this",
    "start": "3301620",
    "end": "3308900"
  },
  {
    "text": "during the first five minutes you'll see throttling right so I would enable that yeah I would I would recommend in your",
    "start": "3308900",
    "end": "3313980"
  },
  {
    "text": "application layer and I always do that you implement a throttle retry algorithm right so when you see that right",
    "start": "3313980",
    "end": "3319290"
  },
  {
    "text": "throttling on the tail you're gonna you're gonna wait 100 milliseconds you can try again you can wait 500 milliseconds you could try again if you're still arrowing out",
    "start": "3319290",
    "end": "3325620"
  },
  {
    "text": "erroring out maybe throw it in a queue and try again if your workflow allows right or throw the application layer",
    "start": "3325620",
    "end": "3330750"
  },
  {
    "text": "error after you've throttled 2 or 3 times don't don't do it right away right this way if you can queue up those",
    "start": "3330750",
    "end": "3336240"
  },
  {
    "text": "requests that throttling and they eventually go away thank you very much no problem",
    "start": "3336240",
    "end": "3341400"
  },
  {
    "start": "3341000",
    "end": "3397000"
  },
  {
    "text": "can you talk a little bit about how we should think about the play between auto scaling and reserve capacity ok so well",
    "start": "3341400",
    "end": "3351180"
  },
  {
    "text": "reserve capacity is really just a bit pricing discussion right it's like how",
    "start": "3351180",
    "end": "3356670"
  },
  {
    "text": "much throughput do you expect to need on your table then you should buy some reserve capacity and I would always",
    "start": "3356670",
    "end": "3361710"
  },
  {
    "text": "recommend to people that you don't hesitate to buy reserve capacity if you have production app and you're deployed and you know you're deployed by reserve",
    "start": "3361710",
    "end": "3366960"
  },
  {
    "text": "capacity is just a big savings it's not like instances right when you get reserved instances you're kind of and I",
    "start": "3366960",
    "end": "3372900"
  },
  {
    "text": "actually think this is even better now but because you can upgrade reserve our eyes now but it used to be with our eyes",
    "start": "3372900",
    "end": "3378090"
  },
  {
    "text": "that an ec2 that you're kind of stuck with that instance for the duration of your contract with with reserve capacity it's its capacity right so it doesn't",
    "start": "3378090",
    "end": "3385410"
  },
  {
    "text": "it's not ever gonna become obsolete right so you can buy half what you need now another half in six months and",
    "start": "3385410",
    "end": "3391440"
  },
  {
    "text": "another half in six months or whatever and it's not gonna you know it's not a problem you're never gonna so if we have",
    "start": "3391440",
    "end": "3398010"
  },
  {
    "start": "3397000",
    "end": "3432000"
  },
  {
    "text": "like daily bursting you know do you recommend like buying the lower level for reserve capacity and then like you",
    "start": "3398010",
    "end": "3406200"
  },
  {
    "text": "know not purchasing anything for me I say it's a counting decision for you right I mean if you're comfortable buying a three-year reserve capacity",
    "start": "3406200",
    "end": "3411390"
  },
  {
    "text": "because you know hey I'm happy I'm loving dynamo and I'm not gonna go anywhere else if you're that way did ya",
    "start": "3411390",
    "end": "3417000"
  },
  {
    "text": "go for the maximum discount if you're thinking well you know I'm trying it out and I don't know then maybe a 1 year",
    "start": "3417000",
    "end": "3422490"
  },
  {
    "text": "might be the way to go but I would always say if you're going to production with an application you should be doing it on reserve capacity it's just save",
    "start": "3422490",
    "end": "3427980"
  },
  {
    "text": "money yep question or partitions and lo",
    "start": "3427980",
    "end": "3433950"
  },
  {
    "start": "3432000",
    "end": "3492000"
  },
  {
    "text": "testing so we have a bunch of tables in our load testing environments and they either have zero traffic or they have a",
    "start": "3433950",
    "end": "3440250"
  },
  {
    "text": "couple tens of thousands or hundred thousands units that are that are being used and so with respect to partitions",
    "start": "3440250",
    "end": "3446850"
  },
  {
    "text": "are wondering if you recommend blowing away those tables between tests that's fine or yeah boy boy yeah",
    "start": "3446850",
    "end": "3453410"
  },
  {
    "text": "matter depends on you your I mean it can take a while to create large tables right so you might wanna round because",
    "start": "3453410",
    "end": "3460400"
  },
  {
    "text": "they've been created but you can deep revision them right so like when I'm not running my test let's do provisional",
    "start": "3460400",
    "end": "3465440"
  },
  {
    "text": "these things down to like ten hours to use or whatever it's that I don't have to worry about it maybe they can have a thousand partitions but whatever right",
    "start": "3465440",
    "end": "3470930"
  },
  {
    "text": "and then when you run your tests pin them up so they can have the capacity you need in that way you can happen fast",
    "start": "3470930",
    "end": "3476540"
  },
  {
    "text": "right so like if you have like an automated build integration test or something like that you don't want that thing to be waiting around for ten or",
    "start": "3476540",
    "end": "3481730"
  },
  {
    "text": "fifteen minutes while the tables being created right so maybe instead of blowing away the table when it's done",
    "start": "3481730",
    "end": "3486950"
  },
  {
    "text": "you just dump the data or something like that it's up to you thanks yeah is there",
    "start": "3486950",
    "end": "3492800"
  },
  {
    "start": "3492000",
    "end": "3562000"
  },
  {
    "text": "a way for us to see the number of partitions on our tables I wish there was unfortunately right now the only way",
    "start": "3492800",
    "end": "3498500"
  },
  {
    "text": "for you to be able to get that information is contact AWS support they're pretty quick about getting back to you and and we will be providing",
    "start": "3498500",
    "end": "3505010"
  },
  {
    "text": "partition level metrics you know there was a big push this year and if you've been following dynamodb just been",
    "start": "3505010",
    "end": "3511640"
  },
  {
    "text": "amazing about features that we have released this year and and it's all been things that customers have really been screaming for you know auto-scaling TTL",
    "start": "3511640",
    "end": "3519340"
  },
  {
    "text": "VPC endpoints you know adaptive throughput snapshot restore I mean it's",
    "start": "3519340",
    "end": "3525260"
  },
  {
    "text": "like it's crazy the amount of features that have been released right global tables and and and but but partition",
    "start": "3525260",
    "end": "3532160"
  },
  {
    "text": "level metrics have been the biggest requests and if I think there was a lot of hey let's get the adapter throughput",
    "start": "3532160",
    "end": "3537680"
  },
  {
    "text": "out there because it's gonna lessen the heat right for partition level metrics and and now though we're gonna be that's",
    "start": "3537680",
    "end": "3543740"
  },
  {
    "text": "obviously starting to rise up the list so I would expect to see that information in the form it's gonna be coming in is probably in your cloud",
    "start": "3543740",
    "end": "3549200"
  },
  {
    "text": "watch view you're gonna open up and you say here's my table metrics and maybe you drill down and it'll give you the partition level of each one of the table",
    "start": "3549200",
    "end": "3556670"
  },
  {
    "text": "metrics right and it might give you a total count and things like that alright thank you could you recommend",
    "start": "3556670",
    "end": "3563090"
  },
  {
    "start": "3562000",
    "end": "3600000"
  },
  {
    "text": "some resources for data modeling best practices for yeah if you can make it to",
    "start": "3563090",
    "end": "3569180"
  },
  {
    "text": "my session tomorrow we are those charts would be available dat 403 we also have",
    "start": "3569180",
    "end": "3575090"
  },
  {
    "text": "the DynamoDB deep dive from last year it has a lot of the same information on going tomorrow is very design pattern",
    "start": "3575090",
    "end": "3580100"
  },
  {
    "text": "focus and the we my team is actually",
    "start": "3580100",
    "end": "3585590"
  },
  {
    "text": "reworking the docks the public-facing docs for dynamodb will be refreshed probably sometime q1 next year",
    "start": "3585590",
    "end": "3591019"
  },
  {
    "text": "maybe late q1 I'm trying to get it done but I'm resource constrained right now a lot of the public facing Doc's are",
    "start": "3591019",
    "end": "3596240"
  },
  {
    "text": "actually written before GSIS were published or available so the tag the the design guidance is not great so your",
    "start": "3596240",
    "end": "3604190"
  },
  {
    "text": "best bet is to search for the deep dives on DynamoDB look for those decks whatnot and then if you if you need to engage",
    "start": "3604190",
    "end": "3610849"
  },
  {
    "text": "the SI team and we have some really great resources on the specialist team and as well as my team the blackbell",
    "start": "3610849",
    "end": "3616279"
  },
  {
    "text": "team that you can engage with is one thanks I've tried numerous times to do a",
    "start": "3616279",
    "end": "3621920"
  },
  {
    "text": "full table scan on large tables and never had it looked like it would",
    "start": "3621920",
    "end": "3627799"
  },
  {
    "text": "complete with my lifetime yeah it doesn't matter what the provisioning is it the metrics page never shows any",
    "start": "3627799",
    "end": "3635180"
  },
  {
    "text": "throttling but it'll after a few minutes it'll go to like tens of items per",
    "start": "3635180",
    "end": "3641990"
  },
  {
    "text": "second oh the latency will be in the hundreds of milliseconds my first question is what are your table scanning",
    "start": "3641990",
    "end": "3647990"
  },
  {
    "text": "for if I need to do a maintenance I property or something okay so your gear",
    "start": "3647990",
    "end": "3655609"
  },
  {
    "text": "so you're actually modifying the items each item you're gonna be mod so if it's table scan to modify or just read I mean",
    "start": "3655609",
    "end": "3663019"
  },
  {
    "text": "right I mean why would the reason I ask the question is I have a great design pattern to actually select all the items on a table that me to meet a particular",
    "start": "3663019",
    "end": "3669410"
  },
  {
    "text": "condition which is what people most often table scan for but I don't actually have to do a table scan I use a",
    "start": "3669410",
    "end": "3675170"
  },
  {
    "text": "GSI to do it and and it's done very efficiently without having to burn a whole bunch of RC use but it sounds like",
    "start": "3675170",
    "end": "3681349"
  },
  {
    "text": "if your use case is I actually need to find these items because I'm gonna be modifying the schema or I'm gonna be modifying some property of the items and",
    "start": "3681349",
    "end": "3688490"
  },
  {
    "text": "you're doing it to every item then you need the table scan and so the condition",
    "start": "3688490",
    "end": "3693829"
  },
  {
    "text": "you're describing is it's just never completing well when it drops to you know a few rare items per second I have",
    "start": "3693829",
    "end": "3700759"
  },
  {
    "text": "a hundred million yeah no that's that's never gonna finish so we got to figure out why is it dropping so low I guess my",
    "start": "3700759",
    "end": "3706789"
  },
  {
    "text": "question would be our GS is do you have GSI is on the table yes and so you're",
    "start": "3706789",
    "end": "3712279"
  },
  {
    "text": "modifying this data are you projecting those modifications GSI well just this morning I tried to do it I was looking",
    "start": "3712279",
    "end": "3718190"
  },
  {
    "text": "for a few bad records in the table sure and I got through about 1% of the table right before it started slowing",
    "start": "3718190",
    "end": "3724430"
  },
  {
    "text": "down yeah this why I'm asking you does do so and there were no modifications I",
    "start": "3724430",
    "end": "3729650"
  },
  {
    "text": "guess but if you see what's happening I think I don't know but I think what may be happening is that when you modify the",
    "start": "3729650",
    "end": "3735710"
  },
  {
    "text": "item your that modification is being projected back to the GSI the GSI then",
    "start": "3735710",
    "end": "3741770"
  },
  {
    "text": "consumes one wcu - or whatever the size the item is how big are your items okay",
    "start": "3741770",
    "end": "3747740"
  },
  {
    "text": "okay so under okay so it's gonna consume one wcu to update the GSI so if you've increased the through put on the table to handle this",
    "start": "3747740",
    "end": "3753680"
  },
  {
    "text": "but you haven't increased the write throughput on the GSI then what's going to end up happening is sooner or later",
    "start": "3753680",
    "end": "3758690"
  },
  {
    "text": "you're gonna fill the buffer between the GSI and the table and is going to cause GSI back pressure so you might be getting throttled at the rate that your",
    "start": "3758690",
    "end": "3765140"
  },
  {
    "text": "GSI can accept the writes do you see what I'm saying yeah so I had the problem this morning where I hadn't",
    "start": "3765140",
    "end": "3771320"
  },
  {
    "text": "performed a single right oh so you're just reading I was just reading I hadn't found the bad wreck oh yeah it's just I",
    "start": "3771320",
    "end": "3778870"
  },
  {
    "text": "don't know if I can give you an answer right now but what you probably want to do is engage AWS support because that should not be happening what you're",
    "start": "3778870",
    "end": "3785150"
  },
  {
    "text": "describing is absolutely not a condition that is normal and it could be that maybe you had maybe you have a bad",
    "start": "3785150",
    "end": "3790220"
  },
  {
    "text": "partition or something on that table but it's what you're describing is just not something that should be happening okay",
    "start": "3790220",
    "end": "3795380"
  },
  {
    "text": "that's how I would open a support ticket absolutely",
    "start": "3795380",
    "end": "3799510"
  }
]