[
  {
    "text": "alright we're going to get this going let's get this kick-started first of all most important thing thank you all for",
    "start": "20",
    "end": "6060"
  },
  {
    "text": "coming out to be at the last session of the day before the party it's definitely",
    "start": "6060",
    "end": "11130"
  },
  {
    "text": "not lost on us that we're between everyone here and getting through the party or grabbing a beverage or doing",
    "start": "11130",
    "end": "16500"
  },
  {
    "text": "whatever it is to decompress at the end of the day this is service integration delivery and automation using Amazon ecs",
    "start": "16500",
    "end": "23640"
  },
  {
    "text": "so we're going to talk about a couple things we're gonna talk about what's going on with different things around",
    "start": "23640",
    "end": "30779"
  },
  {
    "text": "just container deployments things that here has learned actually is what we're going to bring up the here folks I've",
    "start": "30779",
    "end": "37230"
  },
  {
    "text": "worked with them now for pretty much the larger part of this year and I've learned a lot about what they've been",
    "start": "37230",
    "end": "43200"
  },
  {
    "text": "building and they're going to come up and talk to you about it so you should expect to see a lot about different types of services that are being",
    "start": "43200",
    "end": "49950"
  },
  {
    "text": "deployed along with ecs inside of containers we're going to show you some of those I'm going to give you a quick",
    "start": "49950",
    "end": "55559"
  },
  {
    "text": "little overview of some popular ones Apache foundation services that have interesting dependencies and then like I",
    "start": "55559",
    "end": "63030"
  },
  {
    "text": "said here's going to come up and do an overview of their open delivery platform and they're going to talk about their practices they're open location platform",
    "start": "63030",
    "end": "69780"
  },
  {
    "text": "sorry and their delivery practices that they've actually learned over a couple of years and then some best practices",
    "start": "69780",
    "end": "76979"
  },
  {
    "text": "they really the guys were talking to me little earlier they really don't want anybody else to make some of the painful",
    "start": "76979",
    "end": "82140"
  },
  {
    "text": "arduous mistakes that they kind of went through early on so best practices are",
    "start": "82140",
    "end": "88259"
  },
  {
    "text": "often relative and also complexity right is often relative like what you consider",
    "start": "88259",
    "end": "93360"
  },
  {
    "text": "to be easy or hard is sort of a basis of your experience so some of this stuff we",
    "start": "93360",
    "end": "99299"
  },
  {
    "text": "would consider you know obvious things that you need to be thinking about and for some of you maybe you're just getting into containerized deployments",
    "start": "99299",
    "end": "105750"
  },
  {
    "text": "and and it feels like this is pretty deep and advanced if you have questions we'll have some time hopefully at the",
    "start": "105750",
    "end": "111240"
  },
  {
    "text": "end or you can hang out after and talk to us the ecosystem is moving fast so",
    "start": "111240",
    "end": "116729"
  },
  {
    "text": "these things do continue to evolve they continue to change so we do have to keep coming back in learning more right I",
    "start": "116729",
    "end": "123329"
  },
  {
    "text": "think that's probably one of the biggest lessons as i joined AWS two and a half years ago like this is this is a",
    "start": "123329",
    "end": "129179"
  },
  {
    "text": "learning job like everything is about what's coming what's new what value does it",
    "start": "129179",
    "end": "134220"
  },
  {
    "text": "and that's a key and last kind of a follow-on to that you know these things are not frozen in time all right PS a",
    "start": "134220",
    "end": "141570"
  },
  {
    "text": "public service announcement as it relates to DevOps I won't read this out to you all it's everybody kind of get through it",
    "start": "141570",
    "end": "148730"
  },
  {
    "text": "at least a few chuckles before I try to move on right agility speed thinking",
    "start": "154790",
    "end": "162829"
  },
  {
    "text": "about things in containers is a big part of that journey for a lot of customers right now so on its face",
    "start": "162829",
    "end": "170260"
  },
  {
    "text": "containerisation thinking of a layer of abstraction looking for all the benefits",
    "start": "170260",
    "end": "175310"
  },
  {
    "text": "of portability looking for you know speed to launch all the things that you hear about what container sounds sort of",
    "start": "175310",
    "end": "182060"
  },
  {
    "text": "relatively simple kind of obvious but then then you know it creeps a little bit right there's a bit of a leaky",
    "start": "182060",
    "end": "188359"
  },
  {
    "text": "abstraction problem you start seeing configuration of the types of services that you're deploying being a challenge",
    "start": "188359",
    "end": "194930"
  },
  {
    "text": "right all the stuff that runs inside of the container still needs to be managed and operated its scale and potentially",
    "start": "194930",
    "end": "202760"
  },
  {
    "text": "you're going to deal with a lot of challenges as you start to get get these things moving and start dealing with",
    "start": "202760",
    "end": "208639"
  },
  {
    "text": "different types of complex systems that have dependencies service discovery common issue that you hear about how do",
    "start": "208639",
    "end": "214939"
  },
  {
    "text": "i register something that's available and can be found and then I can actually",
    "start": "214939",
    "end": "220970"
  },
  {
    "text": "sort of move those things around because the idea of containers is that things are are very dynamic right stuffs kind",
    "start": "220970",
    "end": "227659"
  },
  {
    "text": "of popping around popping in popping out adding stuff so how how does how do those things probably found how does",
    "start": "227659",
    "end": "233959"
  },
  {
    "text": "stuff get removed how do I not start routing to ports that are no longer existent so the volume the scalability a",
    "start": "233959",
    "end": "240919"
  },
  {
    "text": "che challenges these are these are the things that start to kind of show up when you try to production alized what's",
    "start": "240919",
    "end": "247099"
  },
  {
    "text": "going on with your containerization deployments and and that's where I think the lessons you're going to hear from",
    "start": "247099",
    "end": "252319"
  },
  {
    "text": "here are going to be very very helpful so not everybody is super familiar with all of these apache foundation services",
    "start": "252319",
    "end": "259250"
  },
  {
    "text": "so i'll take a quick minute or so to explain what each one of them are kafka",
    "start": "259250",
    "end": "265130"
  },
  {
    "text": "you know it's a it's a service for a piece of software for doing streaming",
    "start": "265130",
    "end": "270940"
  },
  {
    "text": "streaming software your streaming solutions so bringing in you know those massive amounts of data ingesting",
    "start": "270940",
    "end": "277550"
  },
  {
    "text": "massive amounts of data and and you'll see very much why that's a critical component to the here solutions it takes",
    "start": "277550",
    "end": "284270"
  },
  {
    "text": "a dependency on zookeeper and you were probably going to notice a theme here a lot of things take depend seize on zookeeper right and zookeeper",
    "start": "284270",
    "end": "291469"
  },
  {
    "text": "in its own right has complexity right it's got a che challenges it's got latency sensitivity and that can be sort",
    "start": "291469",
    "end": "299779"
  },
  {
    "text": "of your Achilles heel if that isn't operated and managed well and then storm and storm has a lot of continuity as far",
    "start": "299779",
    "end": "306799"
  },
  {
    "text": "as taking and building out topologies and spouts that can can find the",
    "start": "306799",
    "end": "312679"
  },
  {
    "text": "incoming data that's through Kafka and these three work together to give you",
    "start": "312679",
    "end": "318829"
  },
  {
    "text": "solutions and when you start to take these and put them into a containerized deployment you've added a layer in",
    "start": "318829",
    "end": "324709"
  },
  {
    "text": "between what these are looking for to operate and you have to figure out kind",
    "start": "324709",
    "end": "330049"
  },
  {
    "text": "of what are the best mechanics for dealing with that inside of containers and then you think about ecs service",
    "start": "330049",
    "end": "338419"
  },
  {
    "text": "discovery let's baseline on this real quick and the first thing I'll say is rights finding services we kind of have",
    "start": "338419",
    "end": "344479"
  },
  {
    "text": "a solution for that don't we dns dns is a bit of a dated kind of a solution and",
    "start": "344479",
    "end": "350389"
  },
  {
    "text": "it obviously has latency challenges refresh challenges remember what I said a couple minutes ago it's dynamic things",
    "start": "350389",
    "end": "357829"
  },
  {
    "text": "are changing rapidly I can't deal with some of these kinds of challenges that DNS brings to the table so I you know I",
    "start": "357829",
    "end": "364429"
  },
  {
    "text": "need I need a solution for this and I need a way to register I need a way to check on health I need a way to go",
    "start": "364429",
    "end": "370669"
  },
  {
    "text": "across different service boundaries so you know containers so to have not",
    "start": "370669",
    "end": "375709"
  },
  {
    "text": "introduced this challenge service discovery certainly still relevant outside of containerized deployments but",
    "start": "375709",
    "end": "381919"
  },
  {
    "text": "it certainly has amplified the need and now you see this as a pretty early phase",
    "start": "381919",
    "end": "387729"
  },
  {
    "text": "necessity for customers that are going to production with container deployments so how would you do this on AWS and I",
    "start": "387729",
    "end": "395899"
  },
  {
    "text": "will I will qualify this and tell you that it was a few things that make it possible but this is really if you're",
    "start": "395899",
    "end": "402319"
  },
  {
    "text": "just getting started and you're looking for a solution to get out there and start looking forward you know in a",
    "start": "402319",
    "end": "408079"
  },
  {
    "text": "closed system right we've got route 53 it's a closed system dns solution that you can control right so so it's not",
    "start": "408079",
    "end": "415539"
  },
  {
    "text": "it's not a wrong model to leverage that for service discovery but there's a bit",
    "start": "415539",
    "end": "421069"
  },
  {
    "text": "of a distribution kind of challenge there and that you've got you got to figure out how to manage it now we've we've published some things you can go",
    "start": "421069",
    "end": "427370"
  },
  {
    "text": "out and find them online there's ways that you can use cloud watch and lambda to sort of register and unregister",
    "start": "427370",
    "end": "432500"
  },
  {
    "text": "events and I want to show you the actual there's a go agent that was written and",
    "start": "432500",
    "end": "437570"
  },
  {
    "text": "published out to github not long ago that one of my colleagues has worked on that they'll actually look at the docker",
    "start": "437570",
    "end": "442700"
  },
  {
    "text": "events and be able to register or on register services inside of of a",
    "start": "442700",
    "end": "447950"
  },
  {
    "text": "registry right now what about health checks right there's other things that you still may be looking for and there",
    "start": "447950",
    "end": "453200"
  },
  {
    "text": "might be you know other benefits that i'll let the here folks tell you about because there's solutions from from",
    "start": "453200",
    "end": "459200"
  },
  {
    "text": "hoshi corp console for example that they're going to talk about that give you a centralized model and potentially",
    "start": "459200",
    "end": "464330"
  },
  {
    "text": "a little more advantages as you start to scale this is some code like grand white",
    "start": "464330",
    "end": "471140"
  },
  {
    "text": "background might have been a poor choice hopefully everybody can see it this the key thing you're seeing there is the end",
    "start": "471140",
    "end": "476660"
  },
  {
    "text": "point at the top is listening in on the incoming events the doctor events and",
    "start": "476660",
    "end": "482000"
  },
  {
    "text": "then this function is able to execute this function is basically going to call the AP is against all 53 to register an",
    "start": "482000",
    "end": "490010"
  },
  {
    "text": "unregistered things all right so this is able to do an effective job of getting",
    "start": "490010",
    "end": "495770"
  },
  {
    "text": "those services out of rotation when you're looking for that service discovery solution kind of in the early",
    "start": "495770",
    "end": "501890"
  },
  {
    "text": "phases last but not least this is my last slide another factor and this kind",
    "start": "501890",
    "end": "507020"
  },
  {
    "text": "of comes into the centralization versus using separate services discussion configuration data also a big challenge",
    "start": "507020",
    "end": "514219"
  },
  {
    "text": "mentioned the configuration is part of what makes these things hard you know how do i get least you know least",
    "start": "514219",
    "end": "520969"
  },
  {
    "text": "privileged mode access into configuration data in AWS well you get that with i am rolls right we've had the",
    "start": "520969",
    "end": "528020"
  },
  {
    "text": "ability to do you see two roles and be able to do that at the host level well but then you got to think about it with containers because now we're trying to",
    "start": "528020",
    "end": "533990"
  },
  {
    "text": "densely packed containers into hosts and fortunately you know the ecs team is",
    "start": "533990",
    "end": "539210"
  },
  {
    "text": "brought on I am roles for tasks so now you can get the granularity that you're looking for you can get that kind of you",
    "start": "539210",
    "end": "546620"
  },
  {
    "text": "know access privilege management and you can go ahead and pull the configuration data in there's other advantages we do",
    "start": "546620",
    "end": "552560"
  },
  {
    "text": "have things like s3 endpoints so if you're storing your configuration and has three you can start to lock down the routes to",
    "start": "552560",
    "end": "557990"
  },
  {
    "text": "that data again mind you this is the idea of how would I start to pull this stuff together if I was going to use",
    "start": "557990",
    "end": "563120"
  },
  {
    "text": "just exclusively AWS services to do this so all the goodness is still there",
    "start": "563120",
    "end": "569120"
  },
  {
    "text": "rotated credentials the things you know where the metadata services called back and and that's how you know you've done",
    "start": "569120",
    "end": "575930"
  },
  {
    "text": "security across ec2 to other things in AWS for a long time okay so that's kind",
    "start": "575930",
    "end": "582560"
  },
  {
    "text": "of the introduction now what I want to do is I want to bring up Pascal home the director of cloud architecture at here",
    "start": "582560",
    "end": "588199"
  },
  {
    "text": "he's going to talk about the open location platform and some of the work they've been doing I manage the mic ok",
    "start": "588199",
    "end": "603860"
  },
  {
    "text": "not ok i'm going to start covering first what here actually does so here's a",
    "start": "603860",
    "end": "608870"
  },
  {
    "text": "location company we've been in mapping for the last two decades i think at this",
    "start": "608870",
    "end": "614480"
  },
  {
    "text": "point i've not been with the company for quite that long but I've been there for the open location platform from day one",
    "start": "614480",
    "end": "621100"
  },
  {
    "text": "what the target of the open location platform is is to pull data from various different data producers make it",
    "start": "621100",
    "end": "628399"
  },
  {
    "text": "available to data consumers and n able to developers to really use that data so what we're doing with automotive which",
    "start": "628399",
    "end": "635839"
  },
  {
    "text": "is the first customer base we're working with right now and also coincidentally our owners is that we're taking in data",
    "start": "635839",
    "end": "643010"
  },
  {
    "text": "from vehicles and we make it available across different manufacturers so we're a third party we take in the sensor data",
    "start": "643010",
    "end": "649519"
  },
  {
    "text": "and we then create location experience would be that predicting the time that you can arrive of a car be that",
    "start": "649519",
    "end": "655610"
  },
  {
    "text": "improving traffic data be that figuring out that hey there's like a dangerous situation on the road and making others",
    "start": "655610",
    "end": "662060"
  },
  {
    "text": "aware of it so to do that like every data that comes from a vehicle is always",
    "start": "662060",
    "end": "669019"
  },
  {
    "text": "do you spatially bound so what this means is all these sensors without actually knowing the location of them",
    "start": "669019",
    "end": "674569"
  },
  {
    "text": "they they don't give you any value if you're a location company you have a lot of experience is making sure that",
    "start": "674569",
    "end": "679970"
  },
  {
    "text": "sensors are actually placed on the map correctly that you can do the geospatial operations you need to and that's really",
    "start": "679970",
    "end": "685100"
  },
  {
    "text": "where here comes in and why we're having this very targeted analytics platform for this domain so there's four phases of all the",
    "start": "685100",
    "end": "693890"
  },
  {
    "text": "experiences we're creating so the very first one that I just talked about is the ingestion so if you have millions of",
    "start": "693890",
    "end": "699110"
  },
  {
    "text": "vehicles and you need to get the data into a into a giant data pool this this",
    "start": "699110",
    "end": "704120"
  },
  {
    "text": "brings scaling challenger so it's Tom sad Kafka's one of the components we were using as a data transport here we",
    "start": "704120",
    "end": "710360"
  },
  {
    "text": "learned a lot about scaling Kafka but I'm not going to go into that and in this talk once it comes in you need to",
    "start": "710360",
    "end": "717140"
  },
  {
    "text": "enrich the data so it's nice to have a sensory GPS coordinate but how much does that actually help you like what people",
    "start": "717140",
    "end": "724220"
  },
  {
    "text": "actually need in this case is like hey what what link of the road is this on is this a highway is this not a highway is",
    "start": "724220",
    "end": "730010"
  },
  {
    "text": "this like maybe during like a rainy phase or during a different weather like really the the metadata you can add to",
    "start": "730010",
    "end": "736610"
  },
  {
    "text": "this sensor data that is geospatial data and a lot of cases data that we already have is what people start getting a lot",
    "start": "736610",
    "end": "743000"
  },
  {
    "text": "of value out of when they jump to the next step like you want to process all that sensor data so when a customer has",
    "start": "743000",
    "end": "749029"
  },
  {
    "text": "the data pulled across multiple manufacturers and they actually want to start running an aggregation job like",
    "start": "749029",
    "end": "755000"
  },
  {
    "text": "they rely on the map data to be consistent across all manufacturers which from experience I can tell you",
    "start": "755000",
    "end": "760279"
  },
  {
    "text": "when we take the data and that's not always the case I'm going to jump into processing quite a bit and how we do",
    "start": "760279",
    "end": "765740"
  },
  {
    "text": "that part and that's also going to be a bit of the focus of the system itself in this talk the last planet path is",
    "start": "765740",
    "end": "771709"
  },
  {
    "text": "publishing like yes you have a map layer at some point that shows you all the traffic globally or wherever we got the",
    "start": "771709",
    "end": "777470"
  },
  {
    "text": "sensor data from if I try to pump all that data to every vehicle that is connected to this platform we're going",
    "start": "777470",
    "end": "783199"
  },
  {
    "text": "to break the bank and transport and this is also not going to scale at all so we have relatively smart publishing systems",
    "start": "783199",
    "end": "788480"
  },
  {
    "text": "that are again geospatially enabled that just replay the data to the cars that is actually required and so on and so forth",
    "start": "788480",
    "end": "795339"
  },
  {
    "text": "to jump into the actual data processing we have a tool called the analytics",
    "start": "795339",
    "end": "801199"
  },
  {
    "text": "execution environment so what this does is enable people to really simply do",
    "start": "801199",
    "end": "807320"
  },
  {
    "text": "analytics on data that they already uploaded to the platform so this is things like hey I want to manage a bucket of data yes you can do this in",
    "start": "807320",
    "end": "814459"
  },
  {
    "text": "AWS with s3 but not everybody actually knows everything about permission management",
    "start": "814459",
    "end": "819699"
  },
  {
    "text": "is related to that about data cleaning about how you actually manage all this in detail in its scale you might want to",
    "start": "819699",
    "end": "826389"
  },
  {
    "text": "share that bucket with just a different users so do you want to figure out how the IAM roles work for somebody that just tries to do analytics which most of",
    "start": "826389",
    "end": "832989"
  },
  {
    "text": "the time is the data scientist it's way too much then you want to manage processing clusters you need to be able",
    "start": "832989",
    "end": "838689"
  },
  {
    "text": "to look at the data that you have access to you need to manage processing chains which is like if I get a new data set",
    "start": "838689",
    "end": "844569"
  },
  {
    "text": "that comes in from a vehicle I actually want to attach it to this processing chain that n can calculate I don't know",
    "start": "844569",
    "end": "850359"
  },
  {
    "text": "how many vehicles drove on this road over the last day or two and then you want to make do user management it's",
    "start": "850359",
    "end": "855910"
  },
  {
    "text": "like you want to give access to your colleague to look at the cluster you have and to look at some of the data that you prepare for him you might want",
    "start": "855910",
    "end": "862029"
  },
  {
    "text": "to give them access to your data bucket you might want to show them the experiences that you're currently iterating on then also operational",
    "start": "862029",
    "end": "869230"
  },
  {
    "text": "services are a big thing here like if you run this and it becomes a security relevant system for automotive you",
    "start": "869230",
    "end": "875319"
  },
  {
    "text": "really want to make sure this is up and running and not just from time to time but actually reliably so we're also",
    "start": "875319",
    "end": "880959"
  },
  {
    "text": "dealing with monitoring with like insight into costs that obviously is being created as you use the platform",
    "start": "880959",
    "end": "885999"
  },
  {
    "text": "the performance of everything that the latency of the sensor changes where you expect it to be and so on and so forth",
    "start": "885999",
    "end": "891929"
  },
  {
    "text": "at a very high level the architecture we're talking about is really layered on",
    "start": "891929",
    "end": "897069"
  },
  {
    "text": "top of a lot of different AWS services and this is a very stripped down list of",
    "start": "897069",
    "end": "903069"
  },
  {
    "text": "services that we're using but if we go from bottom up I just showed you a brief screenshot of the UI the UI itself is",
    "start": "903069",
    "end": "909399"
  },
  {
    "text": "built on a UI framework so as our internal teams are starting to create different experiences in this in this UI",
    "start": "909399",
    "end": "914889"
  },
  {
    "text": "we kind of give them the red the ready-made building stones to just put it together easily so it looks consistently and it's also developed in",
    "start": "914889",
    "end": "921309"
  },
  {
    "text": "the same way to everybody surprised the UI framework sits on top of a REST API",
    "start": "921309",
    "end": "926350"
  },
  {
    "text": "think this is a pattern everybody knows in and out underneath all of this we",
    "start": "926350",
    "end": "931480"
  },
  {
    "text": "have a service deployment API so when it comes to creating a processing chain when it comes to creating a batch",
    "start": "931480",
    "end": "936850"
  },
  {
    "text": "cluster when it comes from creating real time chains we have a an API and a framework underneath that is doing all",
    "start": "936850",
    "end": "943089"
  },
  {
    "text": "this deployment for us that wraps around things like ecs as Jeremy is going to show in a little bit s 3lb EMR and so on",
    "start": "943089",
    "end": "949779"
  },
  {
    "text": "and so forth also we we have a very strong user and",
    "start": "949779",
    "end": "955690"
  },
  {
    "text": "authentication component in this so as you can imagine we we can't have a situation where Audi suddenly would see",
    "start": "955690",
    "end": "962490"
  },
  {
    "text": "BMWs data to pick an example by accident and they could basically start loading",
    "start": "962490",
    "end": "967510"
  },
  {
    "text": "their data they could do whatever they want with it if this is not intended we really have to make sure this works properly so we have a research",
    "start": "967510",
    "end": "973840"
  },
  {
    "text": "management API that actually federates here users into a double yes so we can take your identity we can give them the",
    "start": "973840",
    "end": "980110"
  },
  {
    "text": "appropriate access in a double yes and we do that very seamlessly in an automated fashion all that on top of I",
    "start": "980110",
    "end": "986050"
  },
  {
    "text": "am obviously with that I'm going to let Jeremy really take a look on how does here actually deliver these services is",
    "start": "986050",
    "end": "992650"
  },
  {
    "text": "you can imagine this is a multitude of micro services that this is all built out of and there's a lot of complexity",
    "start": "992650",
    "end": "997990"
  },
  {
    "text": "to actually managing this platform at scale and the Jeremy is going to give you a deep dive on that hi my name is",
    "start": "997990",
    "end": "1014520"
  },
  {
    "text": "Jerry Brown and I'm a lead engineer here working on service delivery and",
    "start": "1014520",
    "end": "1019940"
  },
  {
    "text": "orchestration of service delivery um let's see I think my notes will come",
    "start": "1019940",
    "end": "1027930"
  },
  {
    "text": "through better here um as Pascal was telling you at here we",
    "start": "1027930",
    "end": "1034959"
  },
  {
    "text": "run a complicated microservices architecture to perform data processing and service delivery this includes",
    "start": "1034959",
    "end": "1041470"
  },
  {
    "text": "deploying already hundreds and potentially thousands of docker containers in all the AWS we want to",
    "start": "1041470",
    "end": "1049450"
  },
  {
    "text": "share some several high-level principles and strategies that we discovered that make dealing with this kind of scale",
    "start": "1049450",
    "end": "1054580"
  },
  {
    "text": "reasonable as you can imagine we learned a lot of lessons on the way we made some small mistakes some of the small",
    "start": "1054580",
    "end": "1060460"
  },
  {
    "text": "mistakes that we made led to big headaches and we'd like to be able to share some simple strategies to help you",
    "start": "1060460",
    "end": "1066549"
  },
  {
    "text": "guys avoid some of that headache at the core there's really nothing overly",
    "start": "1066549",
    "end": "1072669"
  },
  {
    "text": "complicated about these strategies and that's actually why we like them and we wanted to share them with the group because they're relatively easy to",
    "start": "1072669",
    "end": "1079480"
  },
  {
    "text": "implement and reason about I suspect that most of you have worked on systems",
    "start": "1079480",
    "end": "1085240"
  },
  {
    "text": "that ended up becoming a lot more complicated than they had to be and that the situation was frustrating slow and",
    "start": "1085240",
    "end": "1091030"
  },
  {
    "text": "impeded your development so I hope you can use some of these strategies to",
    "start": "1091030",
    "end": "1097000"
  },
  {
    "text": "avoid the frustration here you see an",
    "start": "1097000",
    "end": "1104110"
  },
  {
    "text": "architectural diagram of our service delivery so here we created the service",
    "start": "1104110",
    "end": "1110110"
  },
  {
    "text": "delivery architecture to simplify and automate and organize our deployments we",
    "start": "1110110",
    "end": "1115780"
  },
  {
    "text": "wrote a simple tool called Hana into our standard tool called Canada cannon to automate deploy strategies it runs the",
    "start": "1115780",
    "end": "1123400"
  },
  {
    "text": "deployment update and unemployment of containers to AWS and it automates configuration and secrets changes one",
    "start": "1123400",
    "end": "1130900"
  },
  {
    "text": "really important aspect of deployment tooling is the idea of item potency that",
    "start": "1130900",
    "end": "1136480"
  },
  {
    "text": "means if a deploy runs one or at two or three or four times with the same configurations and container versions",
    "start": "1136480",
    "end": "1143770"
  },
  {
    "text": "the deployments not changed it just updates the state to whatever the",
    "start": "1143770",
    "end": "1149280"
  },
  {
    "text": "application configuration was set to it doesn't go ahead and deploy a whole bunch of extra extra stuff that you",
    "start": "1149280",
    "end": "1155679"
  },
  {
    "text": "didn't want we also wrote a pretty simple tool called optic to update the",
    "start": "1155679",
    "end": "1161890"
  },
  {
    "text": "parent image tags and dr. files this was so that in CA CD we could easily promote updates of",
    "start": "1161890",
    "end": "1168530"
  },
  {
    "text": "bass containers and trigger builds all",
    "start": "1168530",
    "end": "1173690"
  },
  {
    "text": "of our contain 12 our containers are deployed now to ecs clusters in a standard AWS VPC capable of holding a",
    "start": "1173690",
    "end": "1181610"
  },
  {
    "text": "like a thousand hosts inside the VPC we run a hash we're on a hash carp cluster",
    "start": "1181610",
    "end": "1188000"
  },
  {
    "text": "with console and vault and in our made production cluster we run an s3 back",
    "start": "1188000",
    "end": "1193040"
  },
  {
    "text": "doctor registry one really important aspect is that all of the environments",
    "start": "1193040",
    "end": "1198200"
  },
  {
    "text": "are production like the only thing that changes between the cluster is configurations that are stored in the",
    "start": "1198200",
    "end": "1204020"
  },
  {
    "text": "role and they're just in different AWS regions and they have dev and prod roles we run different clusters for dev and",
    "start": "1204020",
    "end": "1211130"
  },
  {
    "text": "prod and we run different clusters for different portfolios right now we've run about 20 of these none of them are",
    "start": "1211130",
    "end": "1217400"
  },
  {
    "text": "completely full but this is potentially a lot of services to basically manage so",
    "start": "1217400",
    "end": "1225530"
  },
  {
    "text": "Tom earlier he outlined some of the importance of service discovery and this",
    "start": "1225530",
    "end": "1230810"
  },
  {
    "text": "is a critical component when running a lot of micro services so first I want to",
    "start": "1230810",
    "end": "1238760"
  },
  {
    "text": "do a little bit more detailed talk about console in Vault console is a",
    "start": "1238760",
    "end": "1243920"
  },
  {
    "text": "distributed and highly available service registry whenever we have a container that comes up in our environment it",
    "start": "1243920",
    "end": "1250910"
  },
  {
    "text": "registers itself to console and makes itself available to other applications that would like to integrate with it",
    "start": "1250910",
    "end": "1256480"
  },
  {
    "text": "this is really important because in our system normally you think about a service to a node as being a one-to-one",
    "start": "1256480",
    "end": "1263270"
  },
  {
    "text": "relationship and really in our system a service to a node is a many-to-many relationship so each node runs many",
    "start": "1263270",
    "end": "1269780"
  },
  {
    "text": "services and each service potentially runs on many nodes for a che purposes",
    "start": "1269780",
    "end": "1275200"
  },
  {
    "text": "the service discovery also includes DNS so you can just do standard DNS discovery and this is very good when",
    "start": "1275200",
    "end": "1281510"
  },
  {
    "text": "you're doing things like forwarding from an ELB to a service it also includes kV",
    "start": "1281510",
    "end": "1287390"
  },
  {
    "text": "storage we store most of all most all of our mutable configuration in the kV store this is really valuable because",
    "start": "1287390",
    "end": "1294770"
  },
  {
    "text": "you can go to the kV store you can easily update any configuration and tooling that we have right in the",
    "start": "1294770",
    "end": "1300279"
  },
  {
    "text": "container will update a templated file with a new configuration and restart the service and I can literally change",
    "start": "1300279",
    "end": "1305529"
  },
  {
    "text": "configuration and a web UI can see my changes right in the application I was",
    "start": "1305529",
    "end": "1310779"
  },
  {
    "text": "literally using this earlier today to troubleshoot some configuration problems we were having with the deployment it",
    "start": "1310779",
    "end": "1316059"
  },
  {
    "text": "just makes it really easy to troubleshoot things and then most importantly health checks so because we",
    "start": "1316059",
    "end": "1321789"
  },
  {
    "text": "have many versions of a service or we have many copies of service running on many nodes we want to be able to have",
    "start": "1321789",
    "end": "1327669"
  },
  {
    "text": "round robin DNS if a node goes unhealthy in an H a fashion we want to stop",
    "start": "1327669",
    "end": "1333700"
  },
  {
    "text": "routing traffic to it and if we have a health check that can fail the health checks are highly configurable and you",
    "start": "1333700",
    "end": "1338859"
  },
  {
    "text": "can just take a note out of service we can fire an alert into our NOC and a technician can go and try to",
    "start": "1338859",
    "end": "1345129"
  },
  {
    "text": "troubleshoot the problem meanwhile most users don't even know anything happened and then there's volt we used vault as a",
    "start": "1345129",
    "end": "1352749"
  },
  {
    "text": "distributed a che secrets management tool I don't think that I need to tell",
    "start": "1352749",
    "end": "1357789"
  },
  {
    "text": "anyone the importance of security it just provides an encrypted kb store it",
    "start": "1357789",
    "end": "1362830"
  },
  {
    "text": "works great with a templating mechanism we use console template there's some other tooling that you can use that",
    "start": "1362830",
    "end": "1368109"
  },
  {
    "text": "works just as well vault is also really good at generating secrets and certificates and also revoking those",
    "start": "1368109",
    "end": "1374830"
  },
  {
    "text": "secrets of certificates and enforcing time to live on certificates um I want",
    "start": "1374830",
    "end": "1383859"
  },
  {
    "text": "to talk a little bit about service registration and discovery in detail it's not only important to register",
    "start": "1383859",
    "end": "1391989"
  },
  {
    "text": "services dynamically when they come up and go out of an environment it's really important to organize them in a clean",
    "start": "1391989",
    "end": "1397509"
  },
  {
    "text": "manner we learned some lessons around this and what we decided to finally do",
    "start": "1397509",
    "end": "1403119"
  },
  {
    "text": "in the end was was organized our services into namespaces and service name so you can see an outline here",
    "start": "1403119",
    "end": "1410139"
  },
  {
    "text": "there's a typical Tomcat my sequel stack that we all know about we could have",
    "start": "1410139",
    "end": "1415899"
  },
  {
    "text": "multiple versions of the stack running team won and team too as you can see can have their own version of the stack and",
    "start": "1415899",
    "end": "1422669"
  },
  {
    "text": "the Tomcat and then discover it's my sequel by just looking in its own base namespace for the my sequel that's",
    "start": "1422669",
    "end": "1429159"
  },
  {
    "text": "registered to that base space we can construe the the configuration and the passwords for",
    "start": "1429159",
    "end": "1434350"
  },
  {
    "text": "discreet deployments that these paths it just works in a really nice fashion just like a file system to organize all the",
    "start": "1434350",
    "end": "1442000"
  },
  {
    "text": "services and it makes it really easy to reason about it makes it really easy to do pattern recognition and just find",
    "start": "1442000",
    "end": "1449080"
  },
  {
    "text": "what you're looking for so here we can see the similar set of applications just",
    "start": "1449080",
    "end": "1456610"
  },
  {
    "text": "rendered out into a tree and you can see how it just we land with like a nice",
    "start": "1456610",
    "end": "1461710"
  },
  {
    "text": "neat organization and it's not difficult to find anything everything is easy to",
    "start": "1461710",
    "end": "1467260"
  },
  {
    "text": "reason about and it just kind of makes sense this relates really nicely to",
    "start": "1467260",
    "end": "1473800"
  },
  {
    "text": "policies and security so here you can see an eye on policy that's been written",
    "start": "1473800",
    "end": "1480010"
  },
  {
    "text": "out that basically allows ecs access on a specific cluster that's named after an",
    "start": "1480010",
    "end": "1487420"
  },
  {
    "text": "application that runs in a namespace so it ties up really nicely to to the",
    "start": "1487420",
    "end": "1492640"
  },
  {
    "text": "registered service name and you don't have to do any kind of mini too many or",
    "start": "1492640",
    "end": "1498600"
  },
  {
    "text": "strange mappings between policies and what you're going to end up in forcing and where those policies are run and",
    "start": "1498600",
    "end": "1504940"
  },
  {
    "text": "managed similarly there's a console policy so you can see the same idiom",
    "start": "1504940",
    "end": "1511180"
  },
  {
    "text": "right here basically we reinforce the private configuration for the node and",
    "start": "1511180",
    "end": "1517090"
  },
  {
    "text": "its secrets on the private path so a specific application that runs in the team one dev app one namespace is given",
    "start": "1517090",
    "end": "1524110"
  },
  {
    "text": "right access so it can read and write based on that path and it's allowed to",
    "start": "1524110",
    "end": "1529660"
  },
  {
    "text": "register itself to team one dev app one so nobody can come in and spoof the system and register themselves in a",
    "start": "1529660",
    "end": "1535270"
  },
  {
    "text": "place that they don't belong so we use",
    "start": "1535270",
    "end": "1541930"
  },
  {
    "text": "this to basically make zookeeper Kafka and storm work really nicely with our",
    "start": "1541930",
    "end": "1547240"
  },
  {
    "text": "deployments we wanted to be able to deploy any number of zookeeper Kafka and",
    "start": "1547240",
    "end": "1552880"
  },
  {
    "text": "storm stacks for our CI CD purposes we wanted to develop her to be able to throw up their own copy and know exactly",
    "start": "1552880",
    "end": "1559150"
  },
  {
    "text": "what was happening in their stack so how this works is that first a zookeeper containers start up",
    "start": "1559150",
    "end": "1566470"
  },
  {
    "text": "and they register themselves to console in this case is team one dev app one zookeeper one through n usually we run",
    "start": "1566470",
    "end": "1573730"
  },
  {
    "text": "three to five zookeepers and then they look for all of the other team one dev app one zookeepers and they can",
    "start": "1573730",
    "end": "1581290"
  },
  {
    "text": "configure themselves they can get the IP addresses that they need right out of console and we can bootstrap the",
    "start": "1581290",
    "end": "1587049"
  },
  {
    "text": "zookeeper cluster and it's up and going and it's running in its own namespace after that we start up Kafka it comes up",
    "start": "1587049",
    "end": "1593950"
  },
  {
    "text": "and it looks for zookeeper cluster in the same namespace and then it registers its brokers as team one dev app one",
    "start": "1593950",
    "end": "1600760"
  },
  {
    "text": "Kafka one two three four and it finds it super clusters everyone's happy and",
    "start": "1600760",
    "end": "1606370"
  },
  {
    "text": "after that storm comes online and it configures and spouts to listen to all the topics on team one dev app one Kafka",
    "start": "1606370",
    "end": "1615760"
  },
  {
    "text": "and all the cues that run there so you can see how we can very quickly segregate teams environments separate",
    "start": "1615760",
    "end": "1623559"
  },
  {
    "text": "applications in the environments everybody gets their own copy of the environment someone throws away their environment they don't want it anymore",
    "start": "1623559",
    "end": "1629620"
  },
  {
    "text": "it doesn't affect everybody anybody else you automatically know what's being used by who container management is also an",
    "start": "1629620",
    "end": "1641799"
  },
  {
    "text": "extremely important thing when you're running a lot of micro services so when",
    "start": "1641799",
    "end": "1648580"
  },
  {
    "text": "configuring containers at runtime we basically came across that there's a couple different strategies for how to",
    "start": "1648580",
    "end": "1654010"
  },
  {
    "text": "do it you can kind of gray things out and go sort of into the middle the first",
    "start": "1654010",
    "end": "1660460"
  },
  {
    "text": "strategy is basically completely configurable containers and you see this strategy on the public docker registry",
    "start": "1660460",
    "end": "1667510"
  },
  {
    "text": "where the containers are completely agnostic of the scheduler that they run",
    "start": "1667510",
    "end": "1672940"
  },
  {
    "text": "on and how they get their configuration it all just comes in via e flags this is",
    "start": "1672940",
    "end": "1678280"
  },
  {
    "text": "great because it's really easy to reason about the containers completely decoupled from the environment it runs in and it puts all the impetus of the",
    "start": "1678280",
    "end": "1685679"
  },
  {
    "text": "basically the configuration right on the person who calls or the scheduler that calls docker run on the other side",
    "start": "1685679",
    "end": "1692679"
  },
  {
    "text": "there's self configuring containers and this is when a container comes up and it uses a runtime templating",
    "start": "1692679",
    "end": "1699230"
  },
  {
    "text": "mechanism and reads its config out of a key value store it could be a database it could be an s3 bucket it can be",
    "start": "1699230",
    "end": "1705650"
  },
  {
    "text": "whatever you want we use console and vault container comes up and it reads its secrets right out of pass right that",
    "start": "1705650",
    "end": "1713030"
  },
  {
    "text": "are basically linked to its name space that we talked about the most important message I think to come across from this",
    "start": "1713030",
    "end": "1719090"
  },
  {
    "text": "is to be very deliberate about how you choose your use case here on the one",
    "start": "1719090",
    "end": "1728810"
  },
  {
    "text": "hand a self configuring configurable containers are really easy to implement",
    "start": "1728810",
    "end": "1734300"
  },
  {
    "text": "the containers are immutable they're easy to think about local developments easy because you just inject all the",
    "start": "1734300",
    "end": "1740630"
  },
  {
    "text": "configuration and the run command on the other hand we realize that you know n VARs aren't a very secure way to inject",
    "start": "1740630",
    "end": "1747320"
  },
  {
    "text": "secrets into a container we didn't want to do that any time you want to update a config on a container requires a",
    "start": "1747320",
    "end": "1753590"
  },
  {
    "text": "complete restart of the container and your scheduler also ends up being your configuration manager so if you have a",
    "start": "1753590",
    "end": "1759620"
  },
  {
    "text": "ton of configuration it basically Jenkins has to know about all the configuration it has to know about all",
    "start": "1759620",
    "end": "1765260"
  },
  {
    "text": "the secrets and Jenkins is not a very good place to store secrets unfortunately especially when they're",
    "start": "1765260",
    "end": "1771590"
  },
  {
    "text": "injected as parameters into the Jenkins build and end up in n bars in the container your secrets might not be safe",
    "start": "1771590",
    "end": "1780130"
  },
  {
    "text": "self configuring containers also have pros and cons as well how we implement",
    "start": "1782860",
    "end": "1789170"
  },
  {
    "text": "it our base containers have code that basically retrieves the app configuration from console and vault you",
    "start": "1789170",
    "end": "1798470"
  },
  {
    "text": "could you also use at CD key Wiz is another secret store that you could use there there's also comedy that you could",
    "start": "1798470",
    "end": "1806990"
  },
  {
    "text": "use instead of console template if you wanted to the pros of this and I've seen",
    "start": "1806990",
    "end": "1812000"
  },
  {
    "text": "the effects of it repeatedly is that containers and processes can be updated on the fly this is really nice for",
    "start": "1812000",
    "end": "1818140"
  },
  {
    "text": "configuring storm spouts and bolts at runtime if you want to or kafka queues",
    "start": "1818140",
    "end": "1824080"
  },
  {
    "text": "engine X is also a great use case where we use this where if you want to perform an update you can literally write out a",
    "start": "1824080",
    "end": "1830540"
  },
  {
    "text": "new contact new engine X config you can do an engine X reload and all the new",
    "start": "1830540",
    "end": "1835880"
  },
  {
    "text": "requests will take the new configuration and you can implement connection draining right on engine X just by",
    "start": "1835880",
    "end": "1841850"
  },
  {
    "text": "rewriting template and doing an engine X reload secrets are stored pretty",
    "start": "1841850",
    "end": "1847670"
  },
  {
    "text": "securely it's an audit band process it's not tightly linked to the deployment they're kept in console they're kept in",
    "start": "1847670",
    "end": "1854870"
  },
  {
    "text": "vaults securely and the configs can be easily viewed by the people who want to view them you're not going into the",
    "start": "1854870",
    "end": "1860330"
  },
  {
    "text": "Jenkins job and trying to figure out what job ran that deployed which container and what configurations were in that you just go to the namespace and",
    "start": "1860330",
    "end": "1867650"
  },
  {
    "text": "console or the namespace and vault you look at what's in there you can make a change you can update it and you can go",
    "start": "1867650",
    "end": "1873080"
  },
  {
    "text": "check and see if your configuration change worked out the downside of this is that it takes a lot more work upfront",
    "start": "1873080",
    "end": "1878750"
  },
  {
    "text": "to implement local development becomes a little bit more complex because",
    "start": "1878750",
    "end": "1884420"
  },
  {
    "text": "basically you end up running console and vault on your dev machines so it takes a little bit more time to get developers",
    "start": "1884420",
    "end": "1890690"
  },
  {
    "text": "up to speed and how they're going to develop the containers",
    "start": "1890690",
    "end": "1894910"
  },
  {
    "text": "another really important thing that we came across is how do we manage container releases in hierarchies at",
    "start": "1898119",
    "end": "1903789"
  },
  {
    "text": "scale so when you have many many containers that are inheriting from many versions of another container how do you",
    "start": "1903789",
    "end": "1911529"
  },
  {
    "text": "make sure that everything's sensible and changes in updates at the base container for example for security end up in the",
    "start": "1911529",
    "end": "1917439"
  },
  {
    "text": "places that you need them without a tedious mail about a manual work and tracking this is where we came up with a",
    "start": "1917439",
    "end": "1924339"
  },
  {
    "text": "simple tool called optic and it's only about two thousand lines of code in Python there's not a lot of complexity",
    "start": "1924339",
    "end": "1931599"
  },
  {
    "text": "to it maybe will potentially try to let it out into the public someday but I",
    "start": "1931599",
    "end": "1936999"
  },
  {
    "text": "think just any you know senior you know decent developer could implement this themselves relatively easily the first",
    "start": "1936999",
    "end": "1945759"
  },
  {
    "text": "thing that we do is we register our docker images for updates you can see like for example here everything",
    "start": "1945759",
    "end": "1951489"
  },
  {
    "text": "inherits from here CentOS 7 and here console and docker registry and Java 8",
    "start": "1951489",
    "end": "1959109"
  },
  {
    "text": "they're all basically downstream containers tomcat for example as a downstream container of Java 8 and we",
    "start": "1959109",
    "end": "1967419"
  },
  {
    "text": "just registered the mall in an XML file and we have a tool that iterates over the xml file it knows where to go look",
    "start": "1967419",
    "end": "1973299"
  },
  {
    "text": "in the git repo for the the source code and find the docker file for the application um basically we can iterate",
    "start": "1973299",
    "end": "1982239"
  },
  {
    "text": "over this document and we can go about and we can look at the doctor files and we can just discover the versions and",
    "start": "1982239",
    "end": "1987609"
  },
  {
    "text": "the relationships that are in the git repository so you can see for example here we've got from CentOS 7 in the Java",
    "start": "1987609",
    "end": "1997659"
  },
  {
    "text": "8 and then if you look in tomcat Tomcats from Java 8 we can see the versions that change we can inspect the doctor",
    "start": "1997659",
    "end": "2006809"
  },
  {
    "text": "registry and we can find all the versions basically that we pushed out to the registry and easily just doing some",
    "start": "2006809",
    "end": "2015569"
  },
  {
    "text": "pattern matching on the docker image tag we can go ahead and we can find out what",
    "start": "2015569",
    "end": "2020849"
  },
  {
    "text": "to update all of our docker files to so",
    "start": "2020849",
    "end": "2027359"
  },
  {
    "text": "once that runs we basically trigger a set of patch sets or a set of pull requests if you use github",
    "start": "2027359",
    "end": "2034320"
  },
  {
    "text": "we use Garrett so we just have patch sets that we just inject into the the",
    "start": "2034320",
    "end": "2040679"
  },
  {
    "text": "code review system and basically someone comes along they can accept the change so here you can just see a sequence of",
    "start": "2040679",
    "end": "2046620"
  },
  {
    "text": "diffs that were kicked off by a new version of CentOS 7 version 4 in the",
    "start": "2046620",
    "end": "2051839"
  },
  {
    "text": "Java 8 doctor file we upgrade it to the next version Python the next version",
    "start": "2051839",
    "end": "2057349"
  },
  {
    "text": "that series of updates happens someone commits it into the repository kicks off",
    "start": "2057349",
    "end": "2062490"
  },
  {
    "text": "the CI CD process builds the new versions of CentOS 7 build sorry builds the new versions of Java 8 and Python",
    "start": "2062490",
    "end": "2069750"
  },
  {
    "text": "and pushes those out to the doctor repository and that triggers the next set of iterations where basically we",
    "start": "2069750",
    "end": "2075929"
  },
  {
    "text": "update the upstream java and the upstream python into the downstream Tomcats and flask applications and at",
    "start": "2075929",
    "end": "2084960"
  },
  {
    "text": "that point the developers can just accept the review and it just pumps back into the CIC d process and the layers of",
    "start": "2084960",
    "end": "2091079"
  },
  {
    "text": "updates can kind of continue versioning",
    "start": "2091079",
    "end": "2097829"
  },
  {
    "text": "is also very important so each master verify build or each commit to master",
    "start": "2097829",
    "end": "2103800"
  },
  {
    "text": "that we do results in a new doctor image that gets tagged as testing so in our an",
    "start": "2103800",
    "end": "2109020"
  },
  {
    "text": "RFC ICD process we just use testing with a semantic version and a timestamp in a",
    "start": "2109020",
    "end": "2115079"
  },
  {
    "text": "get rev so that we can always track back to the commit or the time of the build that any docker container was basically",
    "start": "2115079",
    "end": "2123260"
  },
  {
    "text": "tracked to this also results in a nice clean natural order and it just works",
    "start": "2123260",
    "end": "2129810"
  },
  {
    "text": "out quite well once the doctor image passes all the acceptance tests we just retag it as stable and you can always",
    "start": "2129810",
    "end": "2137430"
  },
  {
    "text": "pick the newest stable tag off the top of the stack and you could update the next system and move forward from there",
    "start": "2137430",
    "end": "2145400"
  },
  {
    "text": "so this leads into the next topic which is managing the service releases that scale this all relates to how we go out",
    "start": "2146869",
    "end": "2159630"
  },
  {
    "text": "and promote docker containers so you see the example for the zookeeper kafka storm stack here",
    "start": "2159630",
    "end": "2165420"
  },
  {
    "text": "so once we have a collection of image that pass acceptance testing together they get released by pushing a bill of",
    "start": "2165420",
    "end": "2171930"
  },
  {
    "text": "materials out to an artifact repository now we can just take this bomb and we",
    "start": "2171930",
    "end": "2177329"
  },
  {
    "text": "can use it to update any environment based on its own specific configs that are already stored in console and vault",
    "start": "2177329",
    "end": "2185780"
  },
  {
    "text": "we heavily rely on CI CD to perform this process so our CI CD pipeline looks like",
    "start": "2187400",
    "end": "2196140"
  },
  {
    "text": "a pre submit verify so when we have a pre submit verify look for example for like a java application will run all the",
    "start": "2196140",
    "end": "2203760"
  },
  {
    "text": "unit tests if the if the if the tests against the jar the built jar fast will",
    "start": "2203760",
    "end": "2209549"
  },
  {
    "text": "build the jar and run some tests against that but usually it's just unit tests that run and it notifies the code review",
    "start": "2209549",
    "end": "2215369"
  },
  {
    "text": "system we use Garrett Master verify runs whenever we merge a patch set to master",
    "start": "2215369",
    "end": "2222859"
  },
  {
    "text": "after that we run all the unit tests again and we build a docker image we",
    "start": "2222859",
    "end": "2230400"
  },
  {
    "text": "read product acceptance tests on the docker image these are usually run in like natural language style testing like",
    "start": "2230400",
    "end": "2237000"
  },
  {
    "text": "cucumber and this is to actually verify the build artifact locally against mock",
    "start": "2237000",
    "end": "2243960"
  },
  {
    "text": "dependencies so a lot of times we'll have jars that will have mock dependencies like right in the jars that",
    "start": "2243960",
    "end": "2249420"
  },
  {
    "text": "we can use for the PT test sometimes we'll just throw up simple mocks out of",
    "start": "2249420",
    "end": "2254460"
  },
  {
    "text": "band or we'll use other services run in mock mode after we run the product",
    "start": "2254460",
    "end": "2263309"
  },
  {
    "text": "acceptance tests we run a set of system acceptance tests and these are feature based tests they run against the application that's deployed to the",
    "start": "2263309",
    "end": "2269790"
  },
  {
    "text": "development environment like I showed in the earlier slide all these environments",
    "start": "2269790",
    "end": "2277349"
  },
  {
    "text": "are exactly the same as the production environments the only thing that changes is the configuration and the type of",
    "start": "2277349",
    "end": "2282510"
  },
  {
    "text": "namespaces that we use inside them we also run other tests on a case-by-case",
    "start": "2282510",
    "end": "2288990"
  },
  {
    "text": "basis in these environments product failure testing product performance testing traffic for contesting is very",
    "start": "2288990",
    "end": "2297030"
  },
  {
    "text": "important so we'll use a tool called gore that's a right on github to traffic to capture real-time traffic and we'll",
    "start": "2297030",
    "end": "2303030"
  },
  {
    "text": "throw it back against the the new version of the application and see if performance has been affected once we",
    "start": "2303030",
    "end": "2312359"
  },
  {
    "text": "have system acceptance tests run we usually we have that bomb run and then",
    "start": "2312359",
    "end": "2318000"
  },
  {
    "text": "we can take that bomb file that I showed earlier and we can push a version of the bomb out to a CIT environment it's just",
    "start": "2318000",
    "end": "2323430"
  },
  {
    "text": "another production like environment that we run and we allow customers to do",
    "start": "2323430",
    "end": "2329010"
  },
  {
    "text": "integration and staging testing there and then when that passes we can push the same bottom file right out to",
    "start": "2329010",
    "end": "2334290"
  },
  {
    "text": "production so it just makes for a nice and tidy easy to reason about system",
    "start": "2334290",
    "end": "2340579"
  },
  {
    "text": "some statistics on speed of deployment so we started using docker before ecs",
    "start": "2343700",
    "end": "2350160"
  },
  {
    "text": "was ready so we had some of our custom tooling that used cloud formation and docker and it worked fairly well first",
    "start": "2350160",
    "end": "2357060"
  },
  {
    "text": "but it was kind of slow and it was prone to some errors while we bootstrapped nodes and got them ready to basically",
    "start": "2357060",
    "end": "2363150"
  },
  {
    "text": "run docker containers it took about 12 to 15 minutes to perform deployment we",
    "start": "2363150",
    "end": "2368700"
  },
  {
    "text": "had about a ninety-five percent success rate because we would run into a lot of issues with the version of docker",
    "start": "2368700",
    "end": "2375510"
  },
  {
    "text": "changing just all kinds of different things because we ran bootstrap code on the node via cloud formation and and",
    "start": "2375510",
    "end": "2382410"
  },
  {
    "text": "user data once we switched over to ecs our deployment success and iteration",
    "start": "2382410",
    "end": "2387869"
  },
  {
    "text": "time went way down to about thirty to sixty seconds and ninety-nine percent",
    "start": "2387869",
    "end": "2393359"
  },
  {
    "text": "success rate we're failures are basically uncommon now and that's that's",
    "start": "2393359",
    "end": "2403500"
  },
  {
    "text": "what I had to share [Applause]",
    "start": "2403500",
    "end": "2410570"
  }
]