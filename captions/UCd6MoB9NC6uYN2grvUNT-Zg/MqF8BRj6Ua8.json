[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "hello my name is biff gott i'm going to",
    "start": "560",
    "end": "3040"
  },
  {
    "text": "take a few minutes to introduce you to",
    "start": "3040",
    "end": "4640"
  },
  {
    "text": "aws solutions constructs",
    "start": "4640",
    "end": "6799"
  },
  {
    "text": "if you're not familiar with solutions",
    "start": "6799",
    "end": "8080"
  },
  {
    "text": "constructs this is going to be fun",
    "start": "8080",
    "end": "10240"
  },
  {
    "text": "in short they're a set of reusable",
    "start": "10240",
    "end": "12240"
  },
  {
    "text": "architecture components",
    "start": "12240",
    "end": "13519"
  },
  {
    "text": "that allow you to create better",
    "start": "13519",
    "end": "14799"
  },
  {
    "text": "infrastructure as code stacks and create",
    "start": "14799",
    "end": "16880"
  },
  {
    "text": "them faster than you do now",
    "start": "16880",
    "end": "19119"
  },
  {
    "text": "you're probably thinking that you've",
    "start": "19119",
    "end": "20320"
  },
  {
    "text": "heard promises like these before and",
    "start": "20320",
    "end": "22240"
  },
  {
    "text": "what makes these different",
    "start": "22240",
    "end": "24800"
  },
  {
    "start": "24000",
    "end": "44000"
  },
  {
    "text": "let's talk about infrastructure as code",
    "start": "24800",
    "end": "27279"
  },
  {
    "text": "at aws",
    "start": "27279",
    "end": "28160"
  },
  {
    "text": "that starts with aws cloud formation our",
    "start": "28160",
    "end": "30720"
  },
  {
    "text": "infrastructure is code service",
    "start": "30720",
    "end": "32960"
  },
  {
    "text": "cloud formation allows you to define",
    "start": "32960",
    "end": "34719"
  },
  {
    "text": "complete cloud architectures",
    "start": "34719",
    "end": "36320"
  },
  {
    "text": "using declarative yaml or json templates",
    "start": "36320",
    "end": "39600"
  },
  {
    "text": "these templates are amazingly powerful",
    "start": "39600",
    "end": "41680"
  },
  {
    "text": "mechanisms to create infrastructure as",
    "start": "41680",
    "end": "43520"
  },
  {
    "text": "code",
    "start": "43520",
    "end": "45360"
  },
  {
    "text": "here's a snippet of json that defines an",
    "start": "45360",
    "end": "47520"
  },
  {
    "text": "sqsq and cloud formation",
    "start": "47520",
    "end": "50480"
  },
  {
    "text": "now these templates can grow very long",
    "start": "50480",
    "end": "52239"
  },
  {
    "text": "and very complex",
    "start": "52239",
    "end": "53920"
  },
  {
    "text": "plus by nature they're static so to vary",
    "start": "53920",
    "end": "56559"
  },
  {
    "text": "the infrastructure based on deployment",
    "start": "56559",
    "end": "58239"
  },
  {
    "text": "conditions is a challenge",
    "start": "58239",
    "end": "60640"
  },
  {
    "text": "fortunately there's a better way to",
    "start": "60640",
    "end": "62320"
  },
  {
    "text": "create these cloud formation templates",
    "start": "62320",
    "end": "64080"
  },
  {
    "text": "than your text editor",
    "start": "64080",
    "end": "65518"
  },
  {
    "start": "65000",
    "end": "85000"
  },
  {
    "text": "the aws cloud development kit or cdk",
    "start": "65519",
    "end": "69439"
  },
  {
    "text": "the cdk provides a layer of abstraction",
    "start": "69439",
    "end": "72000"
  },
  {
    "text": "over confirmation templates",
    "start": "72000",
    "end": "73520"
  },
  {
    "text": "that allows you to define your",
    "start": "73520",
    "end": "74720"
  },
  {
    "text": "infrastructure using conventional",
    "start": "74720",
    "end": "76320"
  },
  {
    "text": "programming languages",
    "start": "76320",
    "end": "77520"
  },
  {
    "text": "rather than declarative markup this",
    "start": "77520",
    "end": "80320"
  },
  {
    "text": "makes defining cloud formation stacks",
    "start": "80320",
    "end": "82080"
  },
  {
    "text": "easier",
    "start": "82080",
    "end": "82720"
  },
  {
    "text": "as well as giving you more power in cdk",
    "start": "82720",
    "end": "86159"
  },
  {
    "start": "85000",
    "end": "128000"
  },
  {
    "text": "defining a new cue looks like this",
    "start": "86159",
    "end": "89280"
  },
  {
    "text": "you simply instantiate a new queue",
    "start": "89280",
    "end": "91200"
  },
  {
    "text": "object but since it's a programming",
    "start": "91200",
    "end": "93439"
  },
  {
    "text": "language",
    "start": "93439",
    "end": "93920"
  },
  {
    "text": "you can create things more dynamically",
    "start": "93920",
    "end": "95920"
  },
  {
    "text": "for instance",
    "start": "95920",
    "end": "97040"
  },
  {
    "text": "if you only want to create a resource",
    "start": "97040",
    "end": "98799"
  },
  {
    "text": "under certain conditions",
    "start": "98799",
    "end": "100159"
  },
  {
    "text": "you can wrap it in a conditional if you",
    "start": "100159",
    "end": "103200"
  },
  {
    "text": "want multiple resources",
    "start": "103200",
    "end": "104560"
  },
  {
    "text": "based upon runtime values you can wrap",
    "start": "104560",
    "end": "106960"
  },
  {
    "text": "the instantiation in a loop",
    "start": "106960",
    "end": "109920"
  },
  {
    "text": "this example is written in typescript",
    "start": "109920",
    "end": "111600"
  },
  {
    "text": "but you can also use the cdk with",
    "start": "111600",
    "end": "113640"
  },
  {
    "text": "python.net and java",
    "start": "113640",
    "end": "116560"
  },
  {
    "text": "at the heart of all this is still cloud",
    "start": "116560",
    "end": "118159"
  },
  {
    "text": "formation but this abstraction over the",
    "start": "118159",
    "end": "120320"
  },
  {
    "text": "raw cloud formation",
    "start": "120320",
    "end": "121680"
  },
  {
    "text": "alleviates the need for authoring yaml",
    "start": "121680",
    "end": "123520"
  },
  {
    "text": "or json and makes your cloud formation",
    "start": "123520",
    "end": "125600"
  },
  {
    "text": "stacks",
    "start": "125600",
    "end": "126159"
  },
  {
    "text": "more dynamic now",
    "start": "126159",
    "end": "129440"
  },
  {
    "text": "aws talks to a lot of customers and we",
    "start": "129440",
    "end": "131920"
  },
  {
    "text": "launch a lot of infrastructure as code",
    "start": "131920",
    "end": "133760"
  },
  {
    "text": "stacks ourselves",
    "start": "133760",
    "end": "135120"
  },
  {
    "text": "so we know there are simple architecture",
    "start": "135120",
    "end": "136879"
  },
  {
    "text": "patterns that get deployed all the time",
    "start": "136879",
    "end": "139680"
  },
  {
    "text": "it just doesn't make sense for each",
    "start": "139680",
    "end": "141200"
  },
  {
    "text": "customer to re-implement the wheel",
    "start": "141200",
    "end": "143200"
  },
  {
    "text": "when they want to launch something that",
    "start": "143200",
    "end": "144640"
  },
  {
    "text": "has been launched thousands of times",
    "start": "144640",
    "end": "146000"
  },
  {
    "text": "before",
    "start": "146000",
    "end": "147280"
  },
  {
    "text": "things like api gateway invoking a",
    "start": "147280",
    "end": "149040"
  },
  {
    "text": "lambda function a lambda function",
    "start": "149040",
    "end": "151120"
  },
  {
    "text": "accessing a dynamodb",
    "start": "151120",
    "end": "152400"
  },
  {
    "text": "table or eventbridge kicking off a step",
    "start": "152400",
    "end": "154959"
  },
  {
    "text": "functions state machine",
    "start": "154959",
    "end": "157840"
  },
  {
    "start": "157000",
    "end": "184000"
  },
  {
    "text": "aws solutions constructs are",
    "start": "158319",
    "end": "160000"
  },
  {
    "text": "implementations of common architectural",
    "start": "160000",
    "end": "161760"
  },
  {
    "text": "patterns like these",
    "start": "161760",
    "end": "162959"
  },
  {
    "text": "that you can plug into your cdk stacks",
    "start": "162959",
    "end": "165360"
  },
  {
    "text": "either on their own or connected to",
    "start": "165360",
    "end": "167040"
  },
  {
    "text": "other solutions constructs",
    "start": "167040",
    "end": "168959"
  },
  {
    "text": "they are all built on top of the cdk and",
    "start": "168959",
    "end": "171200"
  },
  {
    "text": "therefore on top of cloud formation",
    "start": "171200",
    "end": "172800"
  },
  {
    "text": "underneath that",
    "start": "172800",
    "end": "174400"
  },
  {
    "text": "they not only save you time and code but",
    "start": "174400",
    "end": "176720"
  },
  {
    "text": "they deploy the pattern using best",
    "start": "176720",
    "end": "178400"
  },
  {
    "text": "practices",
    "start": "178400",
    "end": "179200"
  },
  {
    "text": "and include architectural elements you",
    "start": "179200",
    "end": "180879"
  },
  {
    "text": "may neglect if you were building your",
    "start": "180879",
    "end": "182400"
  },
  {
    "text": "stack from scratch",
    "start": "182400",
    "end": "184879"
  },
  {
    "start": "184000",
    "end": "217000"
  },
  {
    "text": "let's look at aws sqs lambda a construct",
    "start": "184879",
    "end": "187920"
  },
  {
    "text": "that deploys an sqsq",
    "start": "187920",
    "end": "189680"
  },
  {
    "text": "along with a lambda function that's",
    "start": "189680",
    "end": "191280"
  },
  {
    "text": "invoked whenever a message is stored in",
    "start": "191280",
    "end": "192720"
  },
  {
    "text": "the queue",
    "start": "192720",
    "end": "194159"
  },
  {
    "text": "here's how you would deploy that in your",
    "start": "194159",
    "end": "195519"
  },
  {
    "text": "cdk program just by instantiating an sqs",
    "start": "195519",
    "end": "198480"
  },
  {
    "text": "to lambda object",
    "start": "198480",
    "end": "200319"
  },
  {
    "text": "it appears pretty straightforward the",
    "start": "200319",
    "end": "202480"
  },
  {
    "text": "construct deploys a queue and a lambda",
    "start": "202480",
    "end": "204400"
  },
  {
    "text": "function",
    "start": "204400",
    "end": "205360"
  },
  {
    "text": "but the interaction of these two",
    "start": "205360",
    "end": "206720"
  },
  {
    "text": "services actually requires several other",
    "start": "206720",
    "end": "208879"
  },
  {
    "text": "resources to be both functional and",
    "start": "208879",
    "end": "210840"
  },
  {
    "text": "secure",
    "start": "210840",
    "end": "212319"
  },
  {
    "text": "the construct actually launches eight",
    "start": "212319",
    "end": "214080"
  },
  {
    "text": "services for you automatically",
    "start": "214080",
    "end": "217680"
  },
  {
    "start": "217000",
    "end": "245000"
  },
  {
    "text": "now earlier i promised better",
    "start": "218159",
    "end": "219840"
  },
  {
    "text": "architectures in addition to faster",
    "start": "219840",
    "end": "221360"
  },
  {
    "text": "architectures",
    "start": "221360",
    "end": "222640"
  },
  {
    "text": "that's because solutions constructs all",
    "start": "222640",
    "end": "224480"
  },
  {
    "text": "default to recommended or best practices",
    "start": "224480",
    "end": "227360"
  },
  {
    "text": "some of the areas where you'll see this",
    "start": "227360",
    "end": "228959"
  },
  {
    "text": "are your resources which are all",
    "start": "228959",
    "end": "230799"
  },
  {
    "text": "encrypted by default",
    "start": "230799",
    "end": "232640"
  },
  {
    "text": "iim roles and policies follow the",
    "start": "232640",
    "end": "234400"
  },
  {
    "text": "principle of least privilege",
    "start": "234400",
    "end": "236319"
  },
  {
    "text": "restricting allowed actions and",
    "start": "236319",
    "end": "238080"
  },
  {
    "text": "targeting resources",
    "start": "238080",
    "end": "240080"
  },
  {
    "text": "error handling architecture is set up",
    "start": "240080",
    "end": "242319"
  },
  {
    "text": "architecture such as dead letter queues",
    "start": "242319",
    "end": "245760"
  },
  {
    "start": "245000",
    "end": "256000"
  },
  {
    "text": "there are currently over 35 solutions",
    "start": "245760",
    "end": "247599"
  },
  {
    "text": "constructs published in the library with",
    "start": "247599",
    "end": "249280"
  },
  {
    "text": "more on the way",
    "start": "249280",
    "end": "250720"
  },
  {
    "text": "here's just a sampling of the kinds of",
    "start": "250720",
    "end": "252159"
  },
  {
    "text": "patterns you will find",
    "start": "252159",
    "end": "255840"
  },
  {
    "text": "even better you can use multiple",
    "start": "257040",
    "end": "258880"
  },
  {
    "text": "solutions constructs to create complex",
    "start": "258880",
    "end": "260880"
  },
  {
    "text": "architectures",
    "start": "260880",
    "end": "262079"
  },
  {
    "text": "here's a simple data ingestion system",
    "start": "262079",
    "end": "264240"
  },
  {
    "text": "where external actors store data in an",
    "start": "264240",
    "end": "266080"
  },
  {
    "text": "sqs queue",
    "start": "266080",
    "end": "267840"
  },
  {
    "text": "the queue triggers a lambda function to",
    "start": "267840",
    "end": "269520"
  },
  {
    "text": "process the data and save the process",
    "start": "269520",
    "end": "271680"
  },
  {
    "text": "data to a dynamodb table",
    "start": "271680",
    "end": "274240"
  },
  {
    "text": "to launch this using solutions",
    "start": "274240",
    "end": "275600"
  },
  {
    "text": "constructs is nearly trivial",
    "start": "275600",
    "end": "278080"
  },
  {
    "text": "you can create this architecture using",
    "start": "278080",
    "end": "280240"
  },
  {
    "text": "two solutions constructs aws",
    "start": "280240",
    "end": "282639"
  },
  {
    "text": "sqs lambda and aws lambda dynamodb",
    "start": "282639",
    "end": "286960"
  },
  {
    "text": "these constructs can be connected",
    "start": "286960",
    "end": "288639"
  },
  {
    "text": "through the lambda function to create",
    "start": "288639",
    "end": "290400"
  },
  {
    "text": "the desired architecture",
    "start": "290400",
    "end": "293199"
  },
  {
    "start": "292000",
    "end": "319000"
  },
  {
    "text": "this short video just scratches the",
    "start": "293199",
    "end": "295040"
  },
  {
    "text": "surface of what you can accomplish with",
    "start": "295040",
    "end": "296560"
  },
  {
    "text": "aws solutions constructs",
    "start": "296560",
    "end": "298240"
  },
  {
    "text": "and the aws sdk",
    "start": "298240",
    "end": "301360"
  },
  {
    "text": "check out the documentation blog post or",
    "start": "301360",
    "end": "303199"
  },
  {
    "text": "talk from this year's re event to learn",
    "start": "303199",
    "end": "304880"
  },
  {
    "text": "more",
    "start": "304880",
    "end": "307199"
  },
  {
    "text": "thanks for tuning in today be sure to",
    "start": "307360",
    "end": "309199"
  },
  {
    "text": "check out the other great videos we have",
    "start": "309199",
    "end": "310720"
  },
  {
    "text": "on building with aws solutions",
    "start": "310720",
    "end": "312320"
  },
  {
    "text": "constructs",
    "start": "312320",
    "end": "313280"
  },
  {
    "text": "see you next time",
    "start": "313280",
    "end": "321199"
  }
]