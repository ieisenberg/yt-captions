[
  {
    "text": "well good evening everyone and welcome to embracing change without breaking the",
    "start": "0",
    "end": "5370"
  },
  {
    "text": "world it's awesome to see so many people passionate about API design you know it",
    "start": "5370",
    "end": "12660"
  },
  {
    "text": "can be a bit of a dry subject but hopefully hopefully you'll learn something here today my name is Kyle Thompson and this is Jim",
    "start": "12660",
    "end": "18480"
  },
  {
    "text": "Flanagan and we're both engineers with AWS I work on the AWS SDK team so we've",
    "start": "18480",
    "end": "25170"
  },
  {
    "text": "end library sits in front of AWS services and Jim is on the cryptography",
    "start": "25170",
    "end": "31560"
  },
  {
    "text": "service team and those two roles are going to kind of come up a little bit as we're talking about how you change your",
    "start": "31560",
    "end": "38489"
  },
  {
    "text": "api's and libraries today so there's really two sides to everything so there's the the service side and and",
    "start": "38489",
    "end": "44160"
  },
  {
    "text": "Jim's kind of gonna play the Hat of service owner and then there's the client side the libraries that your",
    "start": "44160",
    "end": "49469"
  },
  {
    "text": "customers used to actually talk to those web api and i'm gonna i'm gonna kind of",
    "start": "49469",
    "end": "54629"
  },
  {
    "text": "play that role so AWS has in the last decade released 90 plus services",
    "start": "54629",
    "end": "62129"
  },
  {
    "text": "probably more than that after this week and we regularly deploy several updates",
    "start": "62129",
    "end": "67890"
  },
  {
    "text": "a week often daily sometimes multiple times daily reinvent and we've kind of",
    "start": "67890",
    "end": "73979"
  },
  {
    "text": "learned over the years that backwards compatibility is is a big deal it's",
    "start": "73979",
    "end": "79020"
  },
  {
    "text": "something that's important it helps customers who are using your api's understand that this thing is",
    "start": "79020",
    "end": "85259"
  },
  {
    "text": "stable and you know one of the core well there's one call premise of AWS is",
    "start": "85259",
    "end": "91790"
  },
  {
    "text": "security and privacy is number one but very closely after that is availability",
    "start": "91790",
    "end": "97680"
  },
  {
    "text": "and reliability and we kind of consider backwards compatibility to be part of",
    "start": "97680",
    "end": "103020"
  },
  {
    "text": "that reliability promise and we have kind of really strong feelings about that we we don't like breaking customers",
    "start": "103020",
    "end": "110009"
  },
  {
    "text": "and if we deploy a new service API that is backwards incompatible or we deploy a",
    "start": "110009",
    "end": "116189"
  },
  {
    "text": "new client version which again is backwards incompatible then we've broken our customers and we consider that to be",
    "start": "116189",
    "end": "121829"
  },
  {
    "text": "part of our reliability promise so it's a big deal to us and we take it very very seriously so",
    "start": "121829",
    "end": "129110"
  },
  {
    "text": "who are we like what gives us the right to kind of talk on this subject neither Jim nor myself are PhDs in API",
    "start": "129110",
    "end": "137090"
  },
  {
    "text": "design I'm not actually sure if that exists but we're not uh-hum but who so",
    "start": "137090",
    "end": "142400"
  },
  {
    "text": "who in the audience has heard the term bar ather okay so a bar raiser just to",
    "start": "142400",
    "end": "148280"
  },
  {
    "text": "give you a brief is kind of an amazonian term for someone whose role it is to improve the quality of thumping usually",
    "start": "148280",
    "end": "155570"
  },
  {
    "text": "it's applied to hiring so any any person that gets interviewed goes has a bar",
    "start": "155570",
    "end": "160610"
  },
  {
    "text": "raiser as part of their interview loop and that person is kind of responsible for ensuring that everyone we we fire",
    "start": "160610",
    "end": "165830"
  },
  {
    "text": "into Amazon is raising the quality bar but we have bar raises but other things as well and about 18 months ago when",
    "start": "165830",
    "end": "173750"
  },
  {
    "text": "kind of AWS innovation were it was kind of escalating and we were releasing more",
    "start": "173750",
    "end": "180740"
  },
  {
    "text": "and more changes it kind of became obvious that we needed a mechanism to ensure that our api's were high quality",
    "start": "180740",
    "end": "188270"
  },
  {
    "text": "and consistent and continually improving and so the API review bar raised the group was born and it's a group of",
    "start": "188270",
    "end": "195680"
  },
  {
    "text": "people who are passionate about designing api's and they kind of have to have experience in this domain and",
    "start": "195680",
    "end": "202090"
  },
  {
    "text": "publish a set of internal standards for service themes and these service teams then use these standards when they're",
    "start": "202090",
    "end": "209000"
  },
  {
    "text": "making changes to their a POS to kind of understand what we consider to be legal backwards compatible versus things that",
    "start": "209000",
    "end": "215600"
  },
  {
    "text": "are potentially going to break customers so there's really two I guess two course",
    "start": "215600",
    "end": "222110"
  },
  {
    "text": "things that we want you to take away from this today the first is kind of an understanding of what some of these",
    "start": "222110",
    "end": "228019"
  },
  {
    "text": "rules are so that you can understand when you're interacting with AWS services what we might change and what",
    "start": "228019",
    "end": "234050"
  },
  {
    "text": "we will not change or what we will try not to change so that's kind of giving you some information about how to",
    "start": "234050",
    "end": "239510"
  },
  {
    "text": "consume AWS services and then the second side of it is when you're designing your own api's and libraries kind of using",
    "start": "239510",
    "end": "246019"
  },
  {
    "text": "some of these these techniques that we've learned over the years so we're going to look at some some definitions",
    "start": "246019",
    "end": "252049"
  },
  {
    "text": "what does backwards compatibility really mean and then we're going to kind of go through an example service that that",
    "start": "252049",
    "end": "258739"
  },
  {
    "text": "we've used for the purpose of illustration and then we're going to look at some kind of edge cases so how to deal with",
    "start": "258739",
    "end": "264800"
  },
  {
    "text": "validation and constraints how to deal with the exceptions and then at the end we've kind of distilled this down into a",
    "start": "264800",
    "end": "269960"
  },
  {
    "text": "single slide with a set of rules for do's and don'ts so with that Jim do you",
    "start": "269960",
    "end": "276650"
  },
  {
    "text": "want to kind of take us through what our service is gonna look like that we gonna talk about stuff tonight you bet let's build up to defining that",
    "start": "276650",
    "end": "282980"
  },
  {
    "text": "service and before we do that we when we talk about evolving an API over time",
    "start": "282980",
    "end": "290150"
  },
  {
    "text": "obviously we need a starting point so this is our starting point the orange box is our web service API and the",
    "start": "290150",
    "end": "297170"
  },
  {
    "text": "degree the blue box is our clients that we've developed to talk to that API and so it's been in use for a while and our",
    "start": "297170",
    "end": "304670"
  },
  {
    "text": "customers are enjoying it they're asking us for four features you'll see that soon and so we release another version",
    "start": "304670",
    "end": "312650"
  },
  {
    "text": "of this API and we release another version of the client to talk to that API people are still using the original",
    "start": "312650",
    "end": "318680"
  },
  {
    "text": "client to talk to the original version of the API and they're using the new client to talk to the new version of the",
    "start": "318680",
    "end": "324830"
  },
  {
    "text": "API so over time we'll add more features and will develop more clients and we end",
    "start": "324830",
    "end": "332750"
  },
  {
    "text": "up in this situation where we're running multiple versions of our API and maybe taking more resources than we did care",
    "start": "332750",
    "end": "339650"
  },
  {
    "text": "to and we also if there are issues that we need to fix we have to figure out",
    "start": "339650",
    "end": "345110"
  },
  {
    "text": "which versions of the service to fix them in and what versions of the client to redistribute to customers and it",
    "start": "345110",
    "end": "351590"
  },
  {
    "text": "becomes difficult to reason about if we don't if we're not caring about backwards compatibility we're just",
    "start": "351590",
    "end": "356720"
  },
  {
    "text": "releasing version after version and maintaining all of these versions of the service and the client so we have a word",
    "start": "356720",
    "end": "362480"
  },
  {
    "text": "in technology for this it comes to us from the Italian this means difficult to",
    "start": "362480",
    "end": "368090"
  },
  {
    "text": "reason about spaghetti and you may see this a little bit in the future as well so if we if we want to avoid that",
    "start": "368090",
    "end": "376490"
  },
  {
    "text": "situation and not have multiple versions of our service we can start out with our",
    "start": "376490",
    "end": "383410"
  },
  {
    "text": "initial version of our service and then instead of having v2 I represent this with API Prime this is just our API with",
    "start": "383410",
    "end": "390590"
  },
  {
    "text": "the new features and if the API is backwards compatible and the client is",
    "start": "390590",
    "end": "396050"
  },
  {
    "text": "for is compatible then the old client can talk to the new API and pretend that the",
    "start": "396050",
    "end": "402750"
  },
  {
    "text": "new features don't exist and then if someone wants to take advantage of the new features they can just upgrade to",
    "start": "402750",
    "end": "407790"
  },
  {
    "text": "the new client so if that's the case we only really need to maintain a single",
    "start": "407790",
    "end": "413130"
  },
  {
    "text": "version of our service and that becomes much more easy to work with both for",
    "start": "413130",
    "end": "419040"
  },
  {
    "text": "people who are consuming it and the people who are providing it so what does",
    "start": "419040",
    "end": "428550"
  },
  {
    "text": "the API do an API manages resources and so our toy API that we're going to work",
    "start": "428550",
    "end": "435540"
  },
  {
    "text": "with today is going to be for managing travel and so the core resource for that is going to be a trip and a trip is",
    "start": "435540",
    "end": "442890"
  },
  {
    "text": "going to have you know some data associated with it a list of travelers a",
    "start": "442890",
    "end": "447960"
  },
  {
    "text": "description and some more fields that we may add as we add features and so we",
    "start": "447960",
    "end": "454260"
  },
  {
    "text": "refer to the the data structures that go back and forth on our API as shapes and",
    "start": "454260",
    "end": "460340"
  },
  {
    "text": "those shapes have members and a service might and will might manage multiple",
    "start": "460340",
    "end": "466610"
  },
  {
    "text": "resources so here's that here's a flight that goes along with the trip and those resources are often related in some way",
    "start": "466610",
    "end": "472950"
  },
  {
    "text": "so here's a containment relationship so that's sort of the nouns of our service",
    "start": "472950",
    "end": "478020"
  },
  {
    "text": "what the service is what the API is managing so how do we go about managing that we want some way to act on those",
    "start": "478020",
    "end": "485160"
  },
  {
    "text": "resources so we call the the way that we act on them operations so here's the",
    "start": "485160",
    "end": "491340"
  },
  {
    "text": "three operations that we're going to play with today put trip get trip and less trips and if you're of a more",
    "start": "491340",
    "end": "499080"
  },
  {
    "text": "restful frame this is the this is the same three operations sort of cast into a restful path structure each operation",
    "start": "499080",
    "end": "508230"
  },
  {
    "text": "is going to take some input and return some output either of those can be a",
    "start": "508230",
    "end": "514830"
  },
  {
    "text": "scaler a complex shape or empty so here I'm taking in a trip ID which is a",
    "start": "514830",
    "end": "520740"
  },
  {
    "text": "scalar integer to get trip and I returned the trip that I'm currently on right now this is a trip one two three",
    "start": "520740",
    "end": "527640"
  },
  {
    "text": "for me and we call that the input shape and then refer to the output is the output shape operations can also return",
    "start": "527640",
    "end": "536460"
  },
  {
    "text": "error types error shapes so here if I haven't I haven't set up the trip three",
    "start": "536460",
    "end": "542760"
  },
  {
    "text": "to one I asked for it resource not found so the resources are the things or the",
    "start": "542760",
    "end": "548220"
  },
  {
    "text": "nouns that we operate on we call those we model them as shapes which is",
    "start": "548220",
    "end": "553410"
  },
  {
    "text": "structures with members who have input shapes and output shapes and backwards compatibility concerns can sometimes",
    "start": "553410",
    "end": "561320"
  },
  {
    "text": "rely you know only on inputs and sometimes on outputs and then we have",
    "start": "561320",
    "end": "567870"
  },
  {
    "text": "the operations to operate on them so what does it mean to change an API one",
    "start": "567870",
    "end": "574950"
  },
  {
    "text": "of the elements of the API that we're going to change is this so we're we're",
    "start": "574950",
    "end": "583050"
  },
  {
    "text": "when we talk about changing here's our our trip that we had before has the",
    "start": "583050",
    "end": "588780"
  },
  {
    "text": "travelers in the description and we want to add an origin field your customers",
    "start": "588780",
    "end": "594060"
  },
  {
    "text": "have asked for that and we're gonna we're gonna add that yep and so when we think about a client an old client",
    "start": "594060",
    "end": "600390"
  },
  {
    "text": "operating on this new shape it doesn't know about origin so if it's written if",
    "start": "600390",
    "end": "606180"
  },
  {
    "text": "it's built in a in a forwards compatible manner it can work with the backwards compatible API and this is a change",
    "start": "606180",
    "end": "612660"
  },
  {
    "text": "that's fine to make right just to go through some changes that are not fine",
    "start": "612660",
    "end": "618060"
  },
  {
    "text": "to make if we remove a member from a shape a client trying to an old client",
    "start": "618060",
    "end": "624089"
  },
  {
    "text": "trying to use that is gonna have a bad time so that's not gonna fly similarly",
    "start": "624089",
    "end": "631710"
  },
  {
    "text": "if we rename a shape that's the same as removing one and adding a different one",
    "start": "631710",
    "end": "637040"
  },
  {
    "text": "and also if we change the type of a member that's not going to be good",
    "start": "637040",
    "end": "642450"
  },
  {
    "text": "especially if in a language where it's compiled and is expecting a certain type to come back over the wire",
    "start": "642450",
    "end": "648810"
  },
  {
    "text": "so that's a breaking change so now we're going to take a look at how adding and",
    "start": "648810",
    "end": "655800"
  },
  {
    "text": "removing things affects the climb side of things sure so typically what happens to AWS - service is launching or",
    "start": "655800",
    "end": "663150"
  },
  {
    "text": "whether adding a new feature they'll come to my team which is the SDK team and say hey we want we want to bend",
    "start": "663150",
    "end": "669000"
  },
  {
    "text": "client for this we want our customers to be able to interact with this service within their application and so a",
    "start": "669000",
    "end": "674790"
  },
  {
    "text": "service team will come to us with a model and this is this is the model that we're going to kind of play with today",
    "start": "674790",
    "end": "680250"
  },
  {
    "text": "and in Jim's handed this over the wall to me and we're gonna look at some options for how we might actually write",
    "start": "680250",
    "end": "686220"
  },
  {
    "text": "the code that represents this thing so I'm gonna use Java this afternoon for a",
    "start": "686220",
    "end": "691440"
  },
  {
    "text": "few reasons one is the bow so hopefully even if you're not familiar with Java you can kind of understand what's going",
    "start": "691440",
    "end": "697470"
  },
  {
    "text": "on here because it's there's there's lots of description about what what things are and then the second is being",
    "start": "697470",
    "end": "703650"
  },
  {
    "text": "a compiled language it gives us some interesting properties when it comes to understanding a little bit about",
    "start": "703650",
    "end": "708870"
  },
  {
    "text": "forwards compatible clients so this might be a way that we would model the",
    "start": "708870",
    "end": "716310"
  },
  {
    "text": "trip object so we've got two properties a list of strings and a description and",
    "start": "716310",
    "end": "723089"
  },
  {
    "text": "we just pass them in to the constructor and we have some getters and setters to",
    "start": "723089",
    "end": "728550"
  },
  {
    "text": "get those things now it's a nice immutable representation I create it",
    "start": "728550",
    "end": "733650"
  },
  {
    "text": "using the constructor and of a standard Java app and this is something that Java",
    "start": "733650",
    "end": "740550"
  },
  {
    "text": "developers would expect and would be familiar with so who who thinks that this is you know a good way to design",
    "start": "740550",
    "end": "746970"
  },
  {
    "text": "out trip object didn't trick anyone no hands so there's a problem with this",
    "start": "746970",
    "end": "755400"
  },
  {
    "text": "approach and that is when we go to change our API we've you know the",
    "start": "755400",
    "end": "760410"
  },
  {
    "text": "service team has come to us Jim's team has come to us and say hey our customers are asking for origin we want to introduce origin then we've got a little",
    "start": "760410",
    "end": "768150"
  },
  {
    "text": "bit of a problem so what we contentiously do is we can add that to the constructor as the new constructor",
    "start": "768150",
    "end": "774420"
  },
  {
    "text": "argument but the problem is that's going to break customers who are using the old",
    "start": "774420",
    "end": "780210"
  },
  {
    "text": "constructor and when we talk about forwards compatibility when it comes to clients what I would expect as their as",
    "start": "780210",
    "end": "787530"
  },
  {
    "text": "an engineer who's consuming a client is that if by to upgrade to a new minor version of a",
    "start": "787530",
    "end": "794339"
  },
  {
    "text": "library it shouldn't break my existing code I should just get new features all my original code should still compile so",
    "start": "794339",
    "end": "800940"
  },
  {
    "text": "this is not the case here so that we can't do that that's that's not that's not gonna fly to use that terrible joke",
    "start": "800940",
    "end": "808350"
  },
  {
    "text": "again so what can we do we then overload the constructor so",
    "start": "808350",
    "end": "813720"
  },
  {
    "text": "we'll just add origin as a second constructor now so we've got one constructor that takes all three",
    "start": "813720",
    "end": "818850"
  },
  {
    "text": "arguments and the original constructor will now just delegate to that constructor and pass null for origin",
    "start": "818850",
    "end": "824730"
  },
  {
    "text": "because you don't know what it is and this this is going to work because customers who are using the old version",
    "start": "824730",
    "end": "830910"
  },
  {
    "text": "of the constructor will be Otakon you to do so and customers who want to take",
    "start": "830910",
    "end": "836579"
  },
  {
    "text": "advantage of that origin feature or within the application they want to you know have some areas where they use the origin feature they can do that so who",
    "start": "836579",
    "end": "845459"
  },
  {
    "text": "again who thinks this is this is going to work is this is this a good approach no one who thinks this is a terrible",
    "start": "845459",
    "end": "854279"
  },
  {
    "text": "idea so one of the one of the things that you need to keep in mind here is",
    "start": "854279",
    "end": "860010"
  },
  {
    "text": "that when we're operating at the scale of AWS we can't hand craft these things",
    "start": "860010",
    "end": "866339"
  },
  {
    "text": "we need to be able to automatically generate the code for representing these models and so as soon as we've done",
    "start": "866339",
    "end": "871980"
  },
  {
    "text": "something like this we need to understand the history the evolution of our API because we need to know what a",
    "start": "871980",
    "end": "877410"
  },
  {
    "text": "shape used to look like what it looks like in today's version so we know what constructors to provide and that's kind",
    "start": "877410",
    "end": "884639"
  },
  {
    "text": "of getting messy because then we need to understand we need to do dips between versions and that's really ugly of course there's another option which",
    "start": "884639",
    "end": "891300"
  },
  {
    "text": "is that we can just do overloads at the constructor for every possible combination of the of the properties you",
    "start": "891300",
    "end": "899130"
  },
  {
    "text": "know this seems the theme of spying right I think they know what's coming so we're getting back into this this",
    "start": "899130",
    "end": "906240"
  },
  {
    "text": "technical term that Jim was talking about when we go down this road because customers now have to deal with many",
    "start": "906240",
    "end": "912360"
  },
  {
    "text": "many different constructors trying to figure out which one's the right one and there's actually an even bigger problem with this approach and that is when we",
    "start": "912360",
    "end": "919500"
  },
  {
    "text": "go to add the origin parameter web we",
    "start": "919500",
    "end": "924720"
  },
  {
    "text": "can't do because in a compiled language these two things have the same method signature they both take a single string",
    "start": "924720",
    "end": "931470"
  },
  {
    "text": "you know the compiler doesn't really care that one of them is called description and the other spilled origin it won't let you do this so we can't do",
    "start": "931470",
    "end": "937320"
  },
  {
    "text": "the generate every constructor approach so if we're in a language where you",
    "start": "937320",
    "end": "944880"
  },
  {
    "text": "could have default values on constructors then you could just do that with putting new properties on",
    "start": "944880",
    "end": "950250"
  },
  {
    "text": "constructors and any new arguments that get added we just have some sort of sensible default and customers that",
    "start": "950250",
    "end": "955290"
  },
  {
    "text": "didn't care about it just would have set that thing but unfortunately or the examples that we're doing here are in",
    "start": "955290",
    "end": "961260"
  },
  {
    "text": "Java Java doesn't have this feature yet and so we can't we can't do that we need to come up with a different approach so",
    "start": "961260",
    "end": "968130"
  },
  {
    "text": "let's do take two we've got a trip object again and it's got two properties",
    "start": "968130",
    "end": "974970"
  },
  {
    "text": "but we've got a no eyes constructive so we're not we're not stating anything by the constructor and we do it all through",
    "start": "974970",
    "end": "981810"
  },
  {
    "text": "setters and when I go to create one of these things I knew it up and then I call set on it",
    "start": "981810",
    "end": "986970"
  },
  {
    "text": "to step travelers and then I call set on it to set the description and you know",
    "start": "986970",
    "end": "992760"
  },
  {
    "text": "this allows me to add properties because I can kind of just you know customers",
    "start": "992760",
    "end": "999030"
  },
  {
    "text": "who are using this thing won't use those setters and it has another nice property as well and that's in an IDE you get the",
    "start": "999030",
    "end": "1006710"
  },
  {
    "text": "ability to kind of explore this API a little bit so I can do new trip I can",
    "start": "1006710",
    "end": "1011720"
  },
  {
    "text": "call you know adopt something and it will list out all of the properties on that object and you know that's a nice",
    "start": "1011720",
    "end": "1017840"
  },
  {
    "text": "way to explore the API in code as I",
    "start": "1017840",
    "end": "1022850"
  },
  {
    "text": "mentioned it's safe to add properties we can do that so who thinks this is is a",
    "start": "1022850",
    "end": "1027920"
  },
  {
    "text": "reasonable approach but a modeling a trip object you have okay this is",
    "start": "1027920",
    "end": "1034370"
  },
  {
    "text": "actually how the Java SDK does it today so the version 1 of the Java SDK that we've been doubt to customers does this",
    "start": "1034370",
    "end": "1041300"
  },
  {
    "text": "approach today and of course there's dead us on there so there's are some other nice properties about this and",
    "start": "1041300",
    "end": "1046910"
  },
  {
    "text": "that is that it follows what we call in Java line the beam spec which is a way",
    "start": "1046910",
    "end": "1052340"
  },
  {
    "text": "for libraries to kind of understand that this thing is a data object and how to",
    "start": "1052340",
    "end": "1057410"
  },
  {
    "text": "get the data out of that everything that the property is going to have a setter and together and I know how to kind of interact with those",
    "start": "1057410",
    "end": "1062779"
  },
  {
    "text": "things so libraries like Jackson can do serialization to to Jason representation",
    "start": "1062779",
    "end": "1069080"
  },
  {
    "text": "for example nice and easily it's kind of a common pattern that's something that again Java developers are going to",
    "start": "1069080",
    "end": "1074690"
  },
  {
    "text": "expect but there's a difference between this one and the very first example that",
    "start": "1074690",
    "end": "1080840"
  },
  {
    "text": "we did and that's that the models are mutable and what I mean by that is I can",
    "start": "1080840",
    "end": "1087289"
  },
  {
    "text": "change the properties of an individual instance at any time and in concurrency",
    "start": "1087289",
    "end": "1093200"
  },
  {
    "text": "land we got multiple threads immutable mutability can become a problem because basically the world can count under your",
    "start": "1093200",
    "end": "1099649"
  },
  {
    "text": "feet so what we really want was to go back to the the very first option we had",
    "start": "1099649",
    "end": "1105559"
  },
  {
    "text": "which was a nice immutable structure it wasn't going to change under me yeah and therefore its threads day and we get",
    "start": "1105559",
    "end": "1112940"
  },
  {
    "text": "enough that we get a set of nice advantages with that approach so how can we how can we get something that's",
    "start": "1112940",
    "end": "1120200"
  },
  {
    "text": "immutable but also board compatible there's something that I can safely add",
    "start": "1120200",
    "end": "1125380"
  },
  {
    "text": "properties to without breaking existing customers so the Builder pattern is the",
    "start": "1125380",
    "end": "1131899"
  },
  {
    "text": "answer here so this is really a combination of both approaches so you have a builder object which is the thing",
    "start": "1131899",
    "end": "1139070"
  },
  {
    "text": "that you used to build up the state over time so this is a immutable structure that you can set various properties on",
    "start": "1139070",
    "end": "1146840"
  },
  {
    "text": "and then you call build at the end which is kind of the very last line of visible code there and that's going to give you",
    "start": "1146840",
    "end": "1152330"
  },
  {
    "text": "back a trip object so the members of trip itself are final and so this class",
    "start": "1152330",
    "end": "1159350"
  },
  {
    "text": "is immutable and the constructor is private so as a library developer I'm free to kind of add things in their",
    "start": "1159350",
    "end": "1165529"
  },
  {
    "text": "customers shouldn't be using that constructor because they can't sleep they can actually see it so to use this",
    "start": "1165529",
    "end": "1172100"
  },
  {
    "text": "thing as a customer is still fairly fairly easy we can kind of call we can",
    "start": "1172100",
    "end": "1177740"
  },
  {
    "text": "expose the static method on it to get a handle on that builder then you can set properties over time and you call build",
    "start": "1177740",
    "end": "1184279"
  },
  {
    "text": "and it also has this nice kind of IDE exploration property that alfetta",
    "start": "1184279",
    "end": "1191010"
  },
  {
    "text": "that option did as well so I can kind of once I get access to that builder I can",
    "start": "1191010",
    "end": "1196260"
  },
  {
    "text": "see the things that I can possibly set on it of course adding properties to",
    "start": "1196260",
    "end": "1201780"
  },
  {
    "text": "this thing is okay the whole reason we went down this road and so B bits de lis if we could do that and we just add",
    "start": "1201780",
    "end": "1208170"
  },
  {
    "text": "those properties for the Builder and expose them on the object itself so",
    "start": "1208170",
    "end": "1214830"
  },
  {
    "text": "that's kind of how we're going to model Java based objects in the new version of",
    "start": "1214830",
    "end": "1221100"
  },
  {
    "text": "the Java SDK which is currently in development review so that's kind of two options for for how you can go about",
    "start": "1221100",
    "end": "1226790"
  },
  {
    "text": "modeling a complex type within within Java although this Pat can apply to",
    "start": "1226790",
    "end": "1232290"
  },
  {
    "text": "other compiled languages as well so now that we talked a little bit about adding",
    "start": "1232290",
    "end": "1238320"
  },
  {
    "text": "and we know that adding is legal I've had customers come to me they're using",
    "start": "1238320",
    "end": "1243330"
  },
  {
    "text": "the trip they're using the trip API they're using the origin and so what",
    "start": "1243330",
    "end": "1249060"
  },
  {
    "text": "they really want is to add a destination as well pretty important makes sense",
    "start": "1249060",
    "end": "1254190"
  },
  {
    "text": "right but the other thing they want is they want that to be a required field they want a mandatory because a trip",
    "start": "1254190",
    "end": "1260370"
  },
  {
    "text": "doesn't really make sense unless you're going somewhere and you know I said I'd come to you and ask you if we could do",
    "start": "1260370",
    "end": "1265380"
  },
  {
    "text": "that sure let's take a look at what that looks like so we talked about adding",
    "start": "1265380",
    "end": "1272030"
  },
  {
    "text": "items which are required we're talking about constraints on inputs and so",
    "start": "1272030",
    "end": "1278790"
  },
  {
    "text": "required as a constraint and if you don't supply this on input you're gonna get a validation error from the API",
    "start": "1278790",
    "end": "1285270"
  },
  {
    "text": "right you didn't supply the destination which is required so old clients will",
    "start": "1285270",
    "end": "1291330"
  },
  {
    "text": "not be able to use this API anymore because they don't know about the required fields so we call these things",
    "start": "1291330",
    "end": "1298080"
  },
  {
    "text": "like required constraints on inputs and we model them in AWS as such and so our",
    "start": "1298080",
    "end": "1306150"
  },
  {
    "text": "models will say hey this is a required field other sorts of constraints that get validated our length constraints on",
    "start": "1306150",
    "end": "1313200"
  },
  {
    "text": "strings for example ranges on integers and dates and regular expressions we can",
    "start": "1313200",
    "end": "1319470"
  },
  {
    "text": "support all of those in AWS services in general it expanding constraints is is okay so if",
    "start": "1319470",
    "end": "1328110"
  },
  {
    "text": "you're going from a string that's 50 characters and now accepting a string that's 120 characters that's perfectly",
    "start": "1328110",
    "end": "1333570"
  },
  {
    "text": "fine if you go the other way by tightening constraints it will break existing clients in the field because",
    "start": "1333570",
    "end": "1339660"
  },
  {
    "text": "they were happy sending 120 character strings and now they can't do that anymore so another kind of constraint on",
    "start": "1339660",
    "end": "1348930"
  },
  {
    "text": "strings we call an enumeration and that's a simply the the the values that",
    "start": "1348930",
    "end": "1353970"
  },
  {
    "text": "would be accepted as input so here we have our flight we have the airline which is a string we have the status",
    "start": "1353970",
    "end": "1360360"
  },
  {
    "text": "which is a flight status enumeration and the enumeration will accept as input",
    "start": "1360360",
    "end": "1365940"
  },
  {
    "text": "these four values it starts as requested it goes into processing and would will",
    "start": "1365940",
    "end": "1372810"
  },
  {
    "text": "either become booked or rejected and this is an enumeration that represents a lifecycle and so clients that are",
    "start": "1372810",
    "end": "1379560"
  },
  {
    "text": "interested in this lifecycle what are they going to be doing they're going to be pulling to see eventually whether my",
    "start": "1379560",
    "end": "1386730"
  },
  {
    "text": "flight got booked and I'll take code path a or my flight got rejected and taken code path B right so we called",
    "start": "1386730",
    "end": "1394440"
  },
  {
    "text": "these two states the ones that are at the end terminal States so we've got",
    "start": "1394440",
    "end": "1400890"
  },
  {
    "text": "customers using this API and you know I've had customers come to me and they said they there's a there's a couple of",
    "start": "1400890",
    "end": "1406530"
  },
  {
    "text": "things they want out of this data that they think the first is that rejected is",
    "start": "1406530",
    "end": "1412200"
  },
  {
    "text": "like a really broad bucket and a lot of the time it's either because as some sort of error occurred during the booking process or for some other reason",
    "start": "1412200",
    "end": "1418860"
  },
  {
    "text": "what they really want is the ability to distinguish between an error rejection and some other kind of rejection so you",
    "start": "1418860",
    "end": "1425550"
  },
  {
    "text": "know they really want another state to represent that and then the other thing that they've kind of given giving us",
    "start": "1425550",
    "end": "1431010"
  },
  {
    "text": "some feedback on is that it takes a long time to get from requested to processing they don't really know what's going on",
    "start": "1431010",
    "end": "1437130"
  },
  {
    "text": "inside there so you know are there some states in the middle there that would make sense that we can kind of give like a review state for you sure okay um well",
    "start": "1437130",
    "end": "1444810"
  },
  {
    "text": "do you want the bad news first or the good news even the bad need so let's",
    "start": "1444810",
    "end": "1450120"
  },
  {
    "text": "imagine we've added a third terminal state like we said we've split rejected into rejected an error",
    "start": "1450120",
    "end": "1455920"
  },
  {
    "text": "so if we think about what an old client is doing pulling on this if it's looking",
    "start": "1455920",
    "end": "1462100"
  },
  {
    "text": "for booked or rejected and receives error just gonna pull forever it's never gonna it's never gonna accept that state",
    "start": "1462100",
    "end": "1468670"
  },
  {
    "text": "so that's a breaking change so adding terminal states or adding Forks and a workflow something that will break",
    "start": "1468670",
    "end": "1475900"
  },
  {
    "text": "clients that that are in the field the good news we can't have era yep the good",
    "start": "1475900",
    "end": "1482800"
  },
  {
    "text": "news is if we want to insert a state between requested and processing like review a client that expects something",
    "start": "1482800",
    "end": "1491020"
  },
  {
    "text": "to start it requested and expects it eventually to go through processing is not if it is if it is forward compatible",
    "start": "1491020",
    "end": "1498190"
  },
  {
    "text": "it's not going to be bothered by this this extra review state because it's eventually going to get to where it",
    "start": "1498190",
    "end": "1503740"
  },
  {
    "text": "needs to be so we can have review we can have the intermediate state but we can't have a new terminal state yep okay so",
    "start": "1503740",
    "end": "1512230"
  },
  {
    "text": "let's take a look at how clients deal with operations so yeah so we've got this state model we've got these",
    "start": "1512230",
    "end": "1517780"
  },
  {
    "text": "enumerations and you know it might be tempting to to model an enumeration in",
    "start": "1517780",
    "end": "1524020"
  },
  {
    "text": "the language construct for an enumeration so you know Java has got an enum type and many other languages have",
    "start": "1524020",
    "end": "1531880"
  },
  {
    "text": "enum type constructs so it's kind of tempting to use those and I think it's",
    "start": "1531880",
    "end": "1537670"
  },
  {
    "text": "what customers would expect and it's obvious so one way that we might want to model our flight status in a flight",
    "start": "1537670",
    "end": "1544300"
  },
  {
    "text": "object in general is in this way so we've got the the airline string course",
    "start": "1544300",
    "end": "1550030"
  },
  {
    "text": "and then our enumeration to represent flight status exposed as an enumeration",
    "start": "1550030",
    "end": "1556300"
  },
  {
    "text": "so when I call get status I get done at numeration type and as the customer I know that this thing is the enum and I",
    "start": "1556300",
    "end": "1563680"
  },
  {
    "text": "know that therefore it has some possible values to it so who thinks this seems",
    "start": "1563680",
    "end": "1569650"
  },
  {
    "text": "reasonable or is this a bad idea what why is this why is that the bad idea so",
    "start": "1569650",
    "end": "1576910"
  },
  {
    "text": "the problem happens where we want to introduce a new state so when we go to add the review state which is a",
    "start": "1576910",
    "end": "1583390"
  },
  {
    "text": "perfectly legal and back of federal thing to do from an API point of view when I receive that response from the",
    "start": "1583390",
    "end": "1590860"
  },
  {
    "text": "service with that new state in it and trying in my sdk or in my client trying to serialize that into this flight",
    "start": "1590860",
    "end": "1597610"
  },
  {
    "text": "object i'm gonna have a bit of a problem because i don't know what review is and so i can't create an enum to represent",
    "start": "1597610",
    "end": "1604660"
  },
  {
    "text": "that so so that's not going to work we can't expose things as an enum in this",
    "start": "1604660",
    "end": "1610210"
  },
  {
    "text": "way what can we do so we can expose status as a string on the wire it's just",
    "start": "1610210",
    "end": "1617530"
  },
  {
    "text": "the string so you know maybe maybe it's not so bad it kind of makes sense that that we can expose this thing as a",
    "start": "1617530",
    "end": "1624220"
  },
  {
    "text": "string will still generate the the enum property for for our customers but they'll need to go and find it and kind",
    "start": "1624220",
    "end": "1631420"
  },
  {
    "text": "of do that pausing themselves and handle the Erica difference become with it so",
    "start": "1631420",
    "end": "1636460"
  },
  {
    "text": "again who thinks this is a terrible idea I'm not too many people that's good",
    "start": "1636460",
    "end": "1641500"
  },
  {
    "text": "because this is how this current version of the door SDK does it so that's my SDK",
    "start": "1641500",
    "end": "1648420"
  },
  {
    "text": "but we know this isn't this isn't great for a few reasons but kind of pushing the burden of handling the fact that new",
    "start": "1648420",
    "end": "1655330"
  },
  {
    "text": "states might get introduced onto customers and we really want to make life easy for customers they're using",
    "start": "1655330",
    "end": "1660340"
  },
  {
    "text": "these SDKs so that they can interact with services in a way that's simple and they don't need to worry about kind of",
    "start": "1660340",
    "end": "1666070"
  },
  {
    "text": "parsing to and from the the wire protocol so you know that's problem one",
    "start": "1666070",
    "end": "1672250"
  },
  {
    "text": "and problem two which is potentially the bigger problem is that by looking at the flight object itself we talked before",
    "start": "1672250",
    "end": "1679480"
  },
  {
    "text": "about how customers explore the API through the object that are available to them and if you were to look at this",
    "start": "1679480",
    "end": "1684970"
  },
  {
    "text": "flight object you might necessarily realize that status was something that was actually enumerated and that there",
    "start": "1684970",
    "end": "1690610"
  },
  {
    "text": "were multiple known possible values and so we've kind of got a bit of a discoverability problem here so I think",
    "start": "1690610",
    "end": "1698770"
  },
  {
    "text": "we can do better so let's have another go at modeling our enumeration in code",
    "start": "1698770",
    "end": "1703860"
  },
  {
    "text": "so if we introduced a new kind of placeholder state into our enumeration",
    "start": "1703860",
    "end": "1709570"
  },
  {
    "text": "and in this case we've called SDA unknown we can use that to represent",
    "start": "1709570",
    "end": "1714620"
  },
  {
    "text": "when the case where we've received a value from the service that this version",
    "start": "1714620",
    "end": "1720500"
  },
  {
    "text": "of the client doesn't understand and so what that gives us the ability to do",
    "start": "1720500",
    "end": "1726020"
  },
  {
    "text": "then is to expose flight status as a top-level property again and customers",
    "start": "1726020",
    "end": "1731179"
  },
  {
    "text": "get all of the nice things that come with that so I know by looking at the flight object that status is enumerated",
    "start": "1731179",
    "end": "1737540"
  },
  {
    "text": "because it's right there on the type itself and we're kind of handling that validation problem or the case of us",
    "start": "1737540",
    "end": "1745309"
  },
  {
    "text": "getting a type that the SDK doesn't understand on behalf of customers and sticking everything in the SDK unknown",
    "start": "1745309",
    "end": "1753350"
  },
  {
    "text": "bucket but there's one kind of wrinkle and that is we've now lost the state if",
    "start": "1753350",
    "end": "1759940"
  },
  {
    "text": "unknown and so it kind of makes sense for us to expose a way for customers to be able to get at the underlying unknown",
    "start": "1759940",
    "end": "1767059"
  },
  {
    "text": "value if they need it you know maybe they want to to understand what things their client doesn't know so that they can decide",
    "start": "1767059",
    "end": "1773929"
  },
  {
    "text": "whether they want to upgrade their client version to a new version to kind of take advantage of that property for that feature so this it's a little bit",
    "start": "1773929",
    "end": "1781550"
  },
  {
    "text": "ugly because you've got two methods to represent the same property but I think it gives us the best of both worlds in",
    "start": "1781550",
    "end": "1787970"
  },
  {
    "text": "terms of discoverability and flexibility to be kind of forwards compatible and so this allows customers to do code like",
    "start": "1787970",
    "end": "1794450"
  },
  {
    "text": "this I can do a switch on it because they know it's an enumeration and I can look for specific statuses and if I'm",
    "start": "1794450",
    "end": "1800690"
  },
  {
    "text": "only actually looking for one state then I don't ever really even need to care about the yet status of string property",
    "start": "1800690",
    "end": "1806690"
  },
  {
    "text": "I just deal with this thing as an enumeration as if that was all I was worried about so that's kind of what",
    "start": "1806690",
    "end": "1813770"
  },
  {
    "text": "we're thinking in terms of modeling enumeration in code in the new version of the door SDK so while we're talking",
    "start": "1813770",
    "end": "1822470"
  },
  {
    "text": "about validation and enumeration constraint is something that can be validated I want to do a little aside",
    "start": "1822470",
    "end": "1828500"
  },
  {
    "text": "I'm talking about client-side validation so services exposed models those models",
    "start": "1828500",
    "end": "1835220"
  },
  {
    "text": "have those constraints kind of documented so the fact that you know the",
    "start": "1835220",
    "end": "1840500"
  },
  {
    "text": "travelers list can't be empty for example the travels just must have one thing in it and only one thing in it or that a string",
    "start": "1840500",
    "end": "1846740"
  },
  {
    "text": "might be a specific length and so it's kind of tempting to apply those",
    "start": "1846740",
    "end": "1851809"
  },
  {
    "text": "validations on the client side as well because then what we can do is we can save customers from having to make a",
    "start": "1851809",
    "end": "1858200"
  },
  {
    "text": "wire call to the service to understand that the value that they've specified is not valid and it's not going to be",
    "start": "1858200",
    "end": "1864500"
  },
  {
    "text": "accepted there's kind of tempting to be able to do this this client side validation and then we",
    "start": "1864500",
    "end": "1870620"
  },
  {
    "text": "also know again in our in our service definition we know what properties of an API are required versus optional and so",
    "start": "1870620",
    "end": "1878539"
  },
  {
    "text": "we could potentially annotate things with this not null annotation here and this kind of tells consumers a very go",
    "start": "1878539",
    "end": "1885350"
  },
  {
    "text": "like hey this thing's not going to be now the little code snippet there on the right hand side is a Kotlin snippet I",
    "start": "1885350",
    "end": "1891440"
  },
  {
    "text": "don't know if people have used pot line before but Kotlin has some special handling for null and it will actually",
    "start": "1891440",
    "end": "1898370"
  },
  {
    "text": "expose things differently if it knows something is not going to be no burst of something that could possibly be null so",
    "start": "1898370",
    "end": "1905600"
  },
  {
    "text": "now we've got a couple of problems if we implement this sort of validation the first is we're limiting our ability for",
    "start": "1905600",
    "end": "1912679"
  },
  {
    "text": "the client to be forward compatible so let's take for example ec2 instance IDs",
    "start": "1912679",
    "end": "1918230"
  },
  {
    "text": "ec2 instance IDs originally were eight characters in length and I don't know if",
    "start": "1918230",
    "end": "1923960"
  },
  {
    "text": "you know easy to become pretty popular and so we've got you know we came to a",
    "start": "1923960",
    "end": "1929120"
  },
  {
    "text": "situation where we had to increase the length of that of that ID and because we didn't do client-side validation we were",
    "start": "1929120",
    "end": "1936799"
  },
  {
    "text": "able to do that without too much pain had we been validating on the client-side that an instance ID was only",
    "start": "1936799",
    "end": "1942529"
  },
  {
    "text": "eight characters then we'd have a big problem because any time before we actually implemented this change we'd have to do a big campaign to get all of",
    "start": "1942529",
    "end": "1949070"
  },
  {
    "text": "our customers to upgrade their versions to kind of loosen that constraint so",
    "start": "1949070",
    "end": "1954409"
  },
  {
    "text": "that's the first kind of I guess gotcha about doing client-side validation and the second one is we talked about the",
    "start": "1954409",
    "end": "1962029"
  },
  {
    "text": "fact that loosening constraints is the legal thing to do and one of the things that's included in that is a service",
    "start": "1962029",
    "end": "1967940"
  },
  {
    "text": "could say that a field that was previously mandatory was required can actually become optional so hey actually",
    "start": "1967940",
    "end": "1973669"
  },
  {
    "text": "we don't really need that thing anymore so you can specify it if you want to but you don't need to we've lose than that of strength but by doing that",
    "start": "1973669",
    "end": "1980780"
  },
  {
    "text": "if we were to use these annotations to kind of specify in the code what was required and what wasn't",
    "start": "1980780",
    "end": "1986720"
  },
  {
    "text": "then Kotlin for example is going to break so you'll see it might be a little bit subtle but on the right hand side or",
    "start": "1986720",
    "end": "1993140"
  },
  {
    "text": "sorry on this on this one where it's not where it's annotated with not now I can do description dot length and Kotlin",
    "start": "1993140",
    "end": "1998299"
  },
  {
    "text": "doesn't need to do any special handling to understand these things it knows it's never going to be now but now once I've",
    "start": "1998299",
    "end": "2004390"
  },
  {
    "text": "kind of upgraded my client version I need to deal with this differently in poplin I've got that question mark operator so in Kotlin you need to at",
    "start": "2004390",
    "end": "2011500"
  },
  {
    "text": "compile time handle your null checking so if we do this we're going to break",
    "start": "2011500",
    "end": "2016690"
  },
  {
    "text": "customers if we loosen these constraints so this isn't a hard buster this is this is not necessarily don't do this ever",
    "start": "2016690",
    "end": "2023230"
  },
  {
    "text": "but it's kind of a warning it's a it's a dangerous area and you need to understand why you might want to do that",
    "start": "2023230",
    "end": "2030909"
  },
  {
    "text": "client-side validation and what the implications of it are and as it happens the predominantly the AWS SDKs that we",
    "start": "2030909",
    "end": "2038440"
  },
  {
    "text": "Bend out do not do client-side validation and we'll defer all of that validation to the service so what we're",
    "start": "2038440",
    "end": "2045970"
  },
  {
    "text": "talking about clients I wanted to kind of wrap this up with one other type of compatibility that is specific to",
    "start": "2045970",
    "end": "2053378"
  },
  {
    "text": "clients and that is so so let's let's imagine that we have a trip client which",
    "start": "2053379",
    "end": "2060460"
  },
  {
    "text": "represents all of the things that I can do in the trip API and as Jim pointed out we have three operations exposed",
    "start": "2060460",
    "end": "2066490"
  },
  {
    "text": "we've got to put trip a get trip and it get trips and put trip in our service",
    "start": "2066490",
    "end": "2072099"
  },
  {
    "text": "model doesn't return anything it's blank and so it makes sense from a double point of view to have that as a void",
    "start": "2072099",
    "end": "2078669"
  },
  {
    "text": "function there's no return type there so why would we model one customers can interact with that thing in this way so",
    "start": "2078669",
    "end": "2085839"
  },
  {
    "text": "I you know have my instance of a trip client I call put trip there's no response so I can't explain it to anything and then maybe I go and get",
    "start": "2085839",
    "end": "2092260"
  },
  {
    "text": "that trip in a subsequent request but down the line the service team Jim Jim",
    "start": "2092260",
    "end": "2097630"
  },
  {
    "text": "decides that we need we want to introduce a trip ID when you put a trip because that makes sense",
    "start": "2097630",
    "end": "2103990"
  },
  {
    "text": "customers want to be able to understand what the idea is that this thing that you've just created and so now we have",
    "start": "2103990",
    "end": "2109089"
  },
  {
    "text": "to change the return of that operation so who thinks this",
    "start": "2109089",
    "end": "2114470"
  },
  {
    "text": "code is going to compile when we make this change okay this code actually will",
    "start": "2114470",
    "end": "2119990"
  },
  {
    "text": "compile and that is what we call source compatible so at compile time the fact",
    "start": "2119990",
    "end": "2126290"
  },
  {
    "text": "that there's no return type or that there is a return type doesn't matter at the source level however there's a",
    "start": "2126290",
    "end": "2133160"
  },
  {
    "text": "different type of compatibility that you need to be aware of and that is what we call binary compatibility so if we were",
    "start": "2133160",
    "end": "2139280"
  },
  {
    "text": "to instead of recompiling our application when we bring down the new version of the client if we were just to take that client library and drop it",
    "start": "2139280",
    "end": "2146720"
  },
  {
    "text": "straight into our existing application that had already been compiled then at this point this code is going to break",
    "start": "2146720",
    "end": "2154100"
  },
  {
    "text": "because at the point that we try and call put trip the bytecode that's been generated at compile time is looking for",
    "start": "2154100",
    "end": "2160490"
  },
  {
    "text": "something with a specific signature and the signature includes the original return type and so what we're going to",
    "start": "2160490",
    "end": "2166130"
  },
  {
    "text": "get is uh no such method exception here and so we can't do that and so in the",
    "start": "2166130",
    "end": "2171770"
  },
  {
    "text": "case of the Java SDK we always always have return types for operations even if",
    "start": "2171770",
    "end": "2176840"
  },
  {
    "text": "the return type at the moment is empty because it leaves the door open for us",
    "start": "2176840",
    "end": "2182030"
  },
  {
    "text": "to be able to add things in the future when when the past wasn't before okay so",
    "start": "2182030",
    "end": "2191270"
  },
  {
    "text": "Jim you know we've got this thing out in the wild we're putting flights happily and I've got customers coming to me and",
    "start": "2191270",
    "end": "2196910"
  },
  {
    "text": "saying that they're getting validation errors because they're specifying the wrong Airport code and at the moment",
    "start": "2196910",
    "end": "2202550"
  },
  {
    "text": "validation errors just got a message on it so for in order for them to kind of figure that out and handle it they need",
    "start": "2202550",
    "end": "2207620"
  },
  {
    "text": "to parse it with a reg X and you know I thought it might be a good idea for us to introduce a new exception type that",
    "start": "2207620",
    "end": "2213950"
  },
  {
    "text": "specifies that the error code is invalid do you think that's something we could potentially add I think it's gonna make it easier for customers in this case I",
    "start": "2213950",
    "end": "2220490"
  },
  {
    "text": "don't have any good news so and once again I'm gonna ask you to think from",
    "start": "2220490",
    "end": "2225830"
  },
  {
    "text": "the the point of view of the original client before we make this change let me",
    "start": "2225830",
    "end": "2231620"
  },
  {
    "text": "ask you are you going to make any changes to the put flight request when you make this change so we're not out in",
    "start": "2231620",
    "end": "2236930"
  },
  {
    "text": "the fields to that so get for the same input a client that was always used to getting a",
    "start": "2236930",
    "end": "2243609"
  },
  {
    "text": "validation error is now potentially going to get an unknown airport error actually it's going to get that most of",
    "start": "2243609",
    "end": "2249069"
  },
  {
    "text": "the time now and depending on the sophistication of the application or what kind of exception handling they",
    "start": "2249069",
    "end": "2255099"
  },
  {
    "text": "have I could have lots of different effects including crashing application so that's not necessarily something that",
    "start": "2255099",
    "end": "2262779"
  },
  {
    "text": "we can do so existing customer or existing clients that are looking for that validation error and we thought the",
    "start": "2262779",
    "end": "2267969"
  },
  {
    "text": "Rings new era might very well yep but the reason I asked you about making",
    "start": "2267969",
    "end": "2273519"
  },
  {
    "text": "changes to put flight requests um is that there is a way to add new exceptions if you at the same time add a",
    "start": "2273519",
    "end": "2281380"
  },
  {
    "text": "new feature that that has to be exercised to to get that new exception so let's take a look at our flight",
    "start": "2281380",
    "end": "2287890"
  },
  {
    "text": "request before the change we have an airline that's a string and if that",
    "start": "2287890",
    "end": "2293319"
  },
  {
    "text": "string isn't value valid for whatever reason it's too long it's too short we get a validation error and so clients",
    "start": "2293319",
    "end": "2299979"
  },
  {
    "text": "are used to that and let's say with that we add a date to our to our put flight",
    "start": "2299979",
    "end": "2305109"
  },
  {
    "text": "request and we want to get a different validation error for that well that's",
    "start": "2305109",
    "end": "2310479"
  },
  {
    "text": "totally fine because the customer has opted in to getting that new exception",
    "start": "2310479",
    "end": "2315640"
  },
  {
    "text": "by exercising in the new feature but if they don't have to do anything new or novel to get that new exception they're",
    "start": "2315640",
    "end": "2322029"
  },
  {
    "text": "gonna be the old clients are gonna be broken so what about my customers who want to understand that the airport ok",
    "start": "2322029",
    "end": "2329349"
  },
  {
    "text": "with the airline that they gave was invalid what can we do okay so right now we're just giving them a validation",
    "start": "2329349",
    "end": "2334689"
  },
  {
    "text": "error so if you get this validation error what have you learned your request was bad and you should feel bad right",
    "start": "2334689",
    "end": "2341679"
  },
  {
    "text": "that's all that's all that's all we can tell the customer what we might be able to put something in in the exception",
    "start": "2341679",
    "end": "2346809"
  },
  {
    "text": "message to help them differentiate why the exception was thrown but that doesn't that's not a terribly",
    "start": "2346809",
    "end": "2352179"
  },
  {
    "text": "good idea because now you've extended the surface area of your API in your contract with your users to the string",
    "start": "2352179",
    "end": "2359199"
  },
  {
    "text": "that's in your error message and you have to be careful about changing that and my customers don't really like dealing with records anyway right so",
    "start": "2359199",
    "end": "2366130"
  },
  {
    "text": "what we can do is we can treat error responses just like the normal data responses we can add as much data to",
    "start": "2366130",
    "end": "2372910"
  },
  {
    "text": "these responses as we and old clients can simply ignore it they're not going to be broken they're",
    "start": "2372910",
    "end": "2378930"
  },
  {
    "text": "gonna get the same exception new clients can say oh there's this new there are these new members on the the error what",
    "start": "2378930",
    "end": "2386070"
  },
  {
    "text": "what is it well the field airport code we can say airport code was invalid and we can actually add another enumeration",
    "start": "2386070",
    "end": "2392700"
  },
  {
    "text": "that says it was invalid because of a that we didn't know what the airport was",
    "start": "2392700",
    "end": "2398340"
  },
  {
    "text": "so an unknown airport so when I talked about forcing customers to parse",
    "start": "2398340",
    "end": "2406260"
  },
  {
    "text": "exception strings that's and and and sort of unintentionally creating adding",
    "start": "2406260",
    "end": "2411990"
  },
  {
    "text": "to your surface area of your contract with with the end user we have discovered over the years that people if",
    "start": "2411990",
    "end": "2420900"
  },
  {
    "text": "you don't give them the hooks to to make decisions in code they will find ways",
    "start": "2420900",
    "end": "2426440"
  },
  {
    "text": "and behaviors they latch on to the behaviors of your of your API and",
    "start": "2426440",
    "end": "2431550"
  },
  {
    "text": "they'll expect that they'll expect the exception message to always be the same and if you change it not thinking that",
    "start": "2431550",
    "end": "2437400"
  },
  {
    "text": "oh this was not part of the model that's gonna that's potentially going to break people so some other ways that you can",
    "start": "2437400",
    "end": "2446160"
  },
  {
    "text": "accidentally add sort of undocumented features that people will figure out",
    "start": "2446160",
    "end": "2451640"
  },
  {
    "text": "let's take a look at pagination so for a list operation I have a request that",
    "start": "2451640",
    "end": "2456660"
  },
  {
    "text": "takes in optionally a next token and the result actually has a next token in it",
    "start": "2456660",
    "end": "2462600"
  },
  {
    "text": "and the the goal of that is we make our first list types of requests we get a",
    "start": "2462600",
    "end": "2469410"
  },
  {
    "text": "list of items which may be incomplete and if it isn't complete we get a next token page - and then we take that and",
    "start": "2469410",
    "end": "2475560"
  },
  {
    "text": "we put it into the next request to get the second page so it's pretty obvious how this token is composed it's the word",
    "start": "2475560",
    "end": "2481440"
  },
  {
    "text": "page with the page number I want so what happens when developers start to get",
    "start": "2481440",
    "end": "2487080"
  },
  {
    "text": "clever about what page they want and you weren't really prepared for this in the implementation of your API the results",
    "start": "2487080",
    "end": "2494250"
  },
  {
    "text": "could be undefined and that that doesn't help anybody it doesn't help your your customers who are getting a timeout or a",
    "start": "2494250",
    "end": "2502710"
  },
  {
    "text": "500 or exception from the service and it doesn't help you the other way that this causes issues",
    "start": "2502710",
    "end": "2511070"
  },
  {
    "text": "for for you as someone designing an API is is it removes the flexibility to",
    "start": "2511070",
    "end": "2517190"
  },
  {
    "text": "change what is in that token so as you add features to your API you may want to modify the shape of that token and so in",
    "start": "2517190",
    "end": "2524990"
  },
  {
    "text": "we've we've updated our API to say oh this is the page range instead of the page number or the element range but",
    "start": "2524990",
    "end": "2533150"
  },
  {
    "text": "someone who's constructing that token by just slamming page and the page number they want they're gonna miss out on this",
    "start": "2533150",
    "end": "2539300"
  },
  {
    "text": "new feature and they're actually going to get an exception from the service this is I don't know what to do with",
    "start": "2539300",
    "end": "2544910"
  },
  {
    "text": "that token so it constrains your ability to add features to your to your API so",
    "start": "2544910",
    "end": "2550370"
  },
  {
    "text": "what can you do that's busted what we recommend here is if you're passing data",
    "start": "2550370",
    "end": "2557240"
  },
  {
    "text": "to the customer that's going to that they're gonna send you back that has meaning make it opaque make it so that",
    "start": "2557240",
    "end": "2563990"
  },
  {
    "text": "they can't figure out what's in there it may result in you having to maintain a little State on your service for a short",
    "start": "2563990",
    "end": "2569870"
  },
  {
    "text": "amount of time or do some other tricks but it's really well worth it to not",
    "start": "2569870",
    "end": "2576200"
  },
  {
    "text": "accidentally expose these things so the other thing that you can do to constrain",
    "start": "2576200",
    "end": "2582770"
  },
  {
    "text": "your ability to make backwards-compatible changes to your API is to think like an object-oriented",
    "start": "2582770",
    "end": "2590300"
  },
  {
    "text": "developer and try to you reuse stuff as much as possible a little dig so here we",
    "start": "2590300",
    "end": "2598730"
  },
  {
    "text": "have an update flight operation it takes as input the flight shape and it gives as in as output in the flight shape",
    "start": "2598730",
    "end": "2604910"
  },
  {
    "text": "seems perfectly reasonable and so we want to make a change to the service",
    "start": "2604910",
    "end": "2612140"
  },
  {
    "text": "that your customer right yeah so my customers are kind of polling on this flight status enumeration of waiting for the flavors to change and what they",
    "start": "2612140",
    "end": "2618710"
  },
  {
    "text": "really want to know is did this thing get stuck and what they're thinking is can I figure out when the last time this",
    "start": "2618710",
    "end": "2623870"
  },
  {
    "text": "thing changed is that I mean I think that might help them understand that progress is being made so a little bit of metadata for the API",
    "start": "2623870",
    "end": "2630290"
  },
  {
    "text": "to help them do that and that's not data that the end user owns that's data that",
    "start": "2630290",
    "end": "2635870"
  },
  {
    "text": "the service there there injured the service is injecting that data in there and so now",
    "start": "2635870",
    "end": "2642020"
  },
  {
    "text": "if we think about our flight operation having or flight shape having that that",
    "start": "2642020",
    "end": "2647299"
  },
  {
    "text": "date field last modified field on input and output can I set that yeah that's",
    "start": "2647299",
    "end": "2654410"
  },
  {
    "text": "something I can set so they might get a validation air saying hey I don't expect the date on input or they might it might",
    "start": "2654410",
    "end": "2662150"
  },
  {
    "text": "get ignored and they say hey I keep trying to update this but but it's just ignored and it still has the last update",
    "start": "2662150",
    "end": "2668480"
  },
  {
    "text": "date that that was in there so what we generally recommend here is go crazy",
    "start": "2668480",
    "end": "2674750"
  },
  {
    "text": "create a shape for every you so don't don't try and share shapes within the input and output because things may not",
    "start": "2674750",
    "end": "2682339"
  },
  {
    "text": "be appropriate in either one of those directions avoid sharing shapes across",
    "start": "2682339",
    "end": "2690190"
  },
  {
    "text": "API operations and even across AP is one thing you can do is you can you could",
    "start": "2690190",
    "end": "2696500"
  },
  {
    "text": "use a flight as part of the update flight request and then and then or you",
    "start": "2696500",
    "end": "2702890"
  },
  {
    "text": "could switch this around and have an update flight response that contain the metadata as well as a flight so you can",
    "start": "2702890",
    "end": "2708500"
  },
  {
    "text": "add you can use containment to help with that okay so now that we've kind of",
    "start": "2708500",
    "end": "2715279"
  },
  {
    "text": "looked at some of the things that you need to think about when designing both your API the service API and the client",
    "start": "2715279",
    "end": "2722299"
  },
  {
    "text": "it's time to gather distill this down into a set of rules and this is basically everything that we've just",
    "start": "2722299",
    "end": "2728569"
  },
  {
    "text": "talked about in the last 45 minutes or so so the good things on the left hand side these are things that won't break",
    "start": "2728569",
    "end": "2735440"
  },
  {
    "text": "customers they're their forwards if they're their backwards compatible these are things that we here at AWS consider",
    "start": "2735440",
    "end": "2741529"
  },
  {
    "text": "to be legal changes through an API and so you can expect that when you're",
    "start": "2741529",
    "end": "2747140"
  },
  {
    "text": "consuming ad on AWS services these things will happen and then on the right",
    "start": "2747140",
    "end": "2752779"
  },
  {
    "text": "hand side other don't these are the illegal things these are the bad things these are things that through our",
    "start": "2752779",
    "end": "2759470"
  },
  {
    "text": "experience is going to cause potential problem in the future when you start changing things and so you won't see",
    "start": "2759470",
    "end": "2767089"
  },
  {
    "text": "these changes come out of AWS services and hopefully when you're designing your",
    "start": "2767089",
    "end": "2772359"
  },
  {
    "text": "own API is and libraries then kind of take into account them these rules as well so with that I think we've got a",
    "start": "2772359",
    "end": "2779410"
  },
  {
    "text": "few minutes left the questions there's some mics in the aisle or if you don't",
    "start": "2779410",
    "end": "2785109"
  },
  {
    "text": "do that you can kind of come up to Jim and I a little bit later we'll be just about the front so thank you very much [Applause]",
    "start": "2785109",
    "end": "2793260"
  }
]