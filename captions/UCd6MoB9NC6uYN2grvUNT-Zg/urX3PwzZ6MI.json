[
  {
    "start": "0",
    "end": "121000"
  },
  {
    "text": "all right we'll go ahead and get started uh it's just past 11 o'clock so",
    "start": "1280",
    "end": "6879"
  },
  {
    "text": "thank you very much for uh coming to this session uh this morning uh glad to see everyone here uh go ahead",
    "start": "6879",
    "end": "13360"
  },
  {
    "text": "and we'll go ahead and do introductions so my name is nihar bihani i'm a product manager at amazon i work on the",
    "start": "13360",
    "end": "20880"
  },
  {
    "text": "amazon cloudfront team uh which is our cdn service uh hi i'm dhruv parkway i'm a solutions",
    "start": "20880",
    "end": "27920"
  },
  {
    "text": "architect and i focus heavily on media services as well and my name is jerome byring",
    "start": "27920",
    "end": "33680"
  },
  {
    "text": "i'm the co-founder and original developer of jw player",
    "start": "33680",
    "end": "39040"
  },
  {
    "text": "all right so i'll go ahead and get started",
    "start": "39040",
    "end": "44879"
  },
  {
    "text": "so just a quick run through the agenda um i'll talk for the first few minutes what i'll go over",
    "start": "44879",
    "end": "50160"
  },
  {
    "text": "is um some of the uh so so the session is out of secure media",
    "start": "50160",
    "end": "55840"
  },
  {
    "text": "delivery so we'll talk a lot about media delivery and the security components and security aspects of how",
    "start": "55840",
    "end": "61520"
  },
  {
    "text": "you can deliver your content to end users",
    "start": "61520",
    "end": "67360"
  },
  {
    "text": "with the right set of security aspects in place so first i'll talk about when i uh when",
    "start": "67360",
    "end": "73119"
  },
  {
    "text": "i talk to different customers what i hear in terms of what their needs are for uh security and those needs are",
    "start": "73119",
    "end": "79920"
  },
  {
    "text": "generally based on the type of content that they're delivering and the value of that content then i'll talk about aws and some of the",
    "start": "79920",
    "end": "87920"
  },
  {
    "text": "aws services and components that allow customers to make sure that",
    "start": "87920",
    "end": "93600"
  },
  {
    "text": "those security components are in place then jerome will talk about jw player a",
    "start": "93600",
    "end": "98880"
  },
  {
    "text": "little bit and then dhruv will do a demo on the on on two different types of",
    "start": "98880",
    "end": "107439"
  },
  {
    "text": "streams we'll do a video on demand a secure video on demand stream and then also a secure live stream now",
    "start": "107439",
    "end": "113840"
  },
  {
    "text": "we'll do a demo and explain how those things work and go over the architecture of how we've configured those",
    "start": "113840",
    "end": "120479"
  },
  {
    "start": "121000",
    "end": "121000"
  },
  {
    "text": "so from a security perspective and then you know delivering your media to end",
    "start": "122479",
    "end": "127520"
  },
  {
    "text": "users you know this is a busy chart but what i really want you to take away from this",
    "start": "127520",
    "end": "133120"
  },
  {
    "text": "is that there are different types of use cases and the type of security that you would",
    "start": "133120",
    "end": "140080"
  },
  {
    "text": "want for your media content should be commensurate with the value of that content",
    "start": "140080",
    "end": "145840"
  },
  {
    "text": "so you don't necessarily need to put the highest levels of security on something like the nightly news which",
    "start": "145840",
    "end": "151920"
  },
  {
    "text": "will expire you know or become stale very quickly or something like you know if you look at the first use",
    "start": "151920",
    "end": "158000"
  },
  {
    "text": "case they are the public user generated content right frequently you'll find that that",
    "start": "158000",
    "end": "163440"
  },
  {
    "text": "it's just openly available for everyone to access but on the other end of the spectrum",
    "start": "163440",
    "end": "168560"
  },
  {
    "text": "when you have premium content that you're monetizing or if you have pre-release content",
    "start": "168560",
    "end": "174879"
  },
  {
    "text": "such as first-run hollywood movies you know something that you would want to protect",
    "start": "174879",
    "end": "180400"
  },
  {
    "text": "from getting leaked before it's supposed to go out there you would want some of the highest levels of security so you",
    "start": "180400",
    "end": "186000"
  },
  {
    "text": "look at some of the media distributors putting things like encryption",
    "start": "186000",
    "end": "191440"
  },
  {
    "text": "watermarking digital rights management and potentially other things to make sure that the content is as secure as",
    "start": "191440",
    "end": "197760"
  },
  {
    "text": "possible and then there's a whole spectrum in between right it just depends on what your use case is who you're trying to deliver your",
    "start": "197760",
    "end": "203519"
  },
  {
    "text": "content to and how valuable is that content",
    "start": "203519",
    "end": "208159"
  },
  {
    "start": "208000",
    "end": "208000"
  },
  {
    "text": "this slide really i just wanted to put it up there because just to get a level set on what are some of these different",
    "start": "209280",
    "end": "215200"
  },
  {
    "text": "components when it comes to securing your media delivery right so there are several different options available",
    "start": "215200",
    "end": "221280"
  },
  {
    "text": "uh you know there are things like token or signed urls where um the the security components are",
    "start": "221280",
    "end": "228000"
  },
  {
    "text": "actually in a policy statement in the url itself and only users that have a valid signed url can access your",
    "start": "228000",
    "end": "234560"
  },
  {
    "text": "content and you can sign that url based on where the user is coming from or how",
    "start": "234560",
    "end": "240720"
  },
  {
    "text": "long of a duration do you want that user to have access to that content you have aes encryption where you're",
    "start": "240720",
    "end": "246799"
  },
  {
    "text": "actually encrypting the bits it's themselves so even if a user can get somehow access to a content that should",
    "start": "246799",
    "end": "253439"
  },
  {
    "text": "be secure they won't be able to view it without having the key",
    "start": "253439",
    "end": "258880"
  },
  {
    "text": "digital rights management that's similar to es encryption but you can put some business logic in place there as well",
    "start": "258880",
    "end": "263919"
  },
  {
    "text": "such as you know the user can have access only for a certain amount of time after",
    "start": "263919",
    "end": "269680"
  },
  {
    "text": "they're viewed at the first time geo blocking this becomes important when you have",
    "start": "269680",
    "end": "276080"
  },
  {
    "text": "different licensing rights for viewers in different geo locations so if you have licensing rights to deliver",
    "start": "276080",
    "end": "282400"
  },
  {
    "text": "video only in the united states then you can geo block users that are coming from outside the united states",
    "start": "282400",
    "end": "287759"
  },
  {
    "text": "if you have traveled internationally and tried to access netflix for instance you may have seen that that you're not able to access",
    "start": "287759",
    "end": "294400"
  },
  {
    "text": "and then watermarking um that's another way to sort of uniquely identify to put like a marker",
    "start": "294400",
    "end": "300160"
  },
  {
    "text": "on the video itself and you can have a unique marker for each of your partners or each customer",
    "start": "300160",
    "end": "306080"
  },
  {
    "text": "so that if that video does get leaked out then you know exactly you know what the source of that was",
    "start": "306080",
    "end": "311680"
  },
  {
    "text": "who had access to the original video there so i want to talk a little bit about the",
    "start": "311680",
    "end": "317680"
  },
  {
    "text": "aws services that you can use to",
    "start": "317680",
    "end": "322880"
  },
  {
    "text": "not only deliver your video but actually sort of manage your video or your media content end to end so",
    "start": "323039",
    "end": "328560"
  },
  {
    "text": "there's a lot more than just delivery right you you ingest your content into aws you process",
    "start": "328560",
    "end": "334400"
  },
  {
    "text": "it you store it you process it and then there's the delivery of getting it to your end users and aws has",
    "start": "334400",
    "end": "342000"
  },
  {
    "text": "multiple component services that you can use and sort of build different workflows",
    "start": "342000",
    "end": "348560"
  },
  {
    "text": "based on what your needs are so we wouldn't go through all of those but i you know we'll talk about a few",
    "start": "348560",
    "end": "353600"
  },
  {
    "text": "services in details we'll talk about amazon cloudfront today which is for delivering the content to the end users talk about amazon elastic",
    "start": "353600",
    "end": "360080"
  },
  {
    "text": "transporter for transcoding your media content talk about s3 for storage and then ec2",
    "start": "360080",
    "end": "366800"
  },
  {
    "text": "when we talk about live streaming how you can run media servers on ec2",
    "start": "366800",
    "end": "372800"
  },
  {
    "text": "and you know transcode your live content and then deliver that to",
    "start": "372800",
    "end": "378000"
  },
  {
    "text": "end users so how can you put some of these",
    "start": "378000",
    "end": "383199"
  },
  {
    "start": "380000",
    "end": "380000"
  },
  {
    "text": "services together on aws i wanted to start off with a simple architecture diagram both for",
    "start": "383199",
    "end": "388560"
  },
  {
    "text": "video on demand as well as live so on the on-demand side you have a media file that you can upload to s3",
    "start": "388560",
    "end": "394880"
  },
  {
    "text": "then you can send it through amazon elastic transcoder to transcode that file into different formats send it back to s3 so your transported",
    "start": "394880",
    "end": "402479"
  },
  {
    "text": "file is now stored in s3 and this s3 bucket can serve as a origin for uh cloudfront distribution so",
    "start": "402479",
    "end": "410160"
  },
  {
    "text": "cloudfront can then cache this content and deliver it to end users that are spread globally around the world from a security perspective you",
    "start": "410160",
    "end": "417440"
  },
  {
    "text": "can lock down the amazon s3 bucket so only cloudfront can have access to that bucket and then",
    "start": "417440",
    "end": "422800"
  },
  {
    "text": "you can also deploy things like assigned urls or ssl",
    "start": "422800",
    "end": "429280"
  },
  {
    "text": "for end users accessing your content via cloudfront for live you have a device that's",
    "start": "429280",
    "end": "436479"
  },
  {
    "text": "capturing the live video you can send that live stream into an",
    "start": "436479",
    "end": "442880"
  },
  {
    "text": "amazon ec2 instance that's running a media server that media server could be something like a valsa",
    "start": "442880",
    "end": "448960"
  },
  {
    "text": "media server or adobe media server and then that ec2 instance",
    "start": "448960",
    "end": "454560"
  },
  {
    "text": "that media server becomes the origin for cloudfront again so cloudform will be pulling the live chunks the live bits from ec2",
    "start": "454560",
    "end": "461440"
  },
  {
    "text": "and delivering it out to end users one thing that i did want to point out here is using a cdn such as",
    "start": "461440",
    "end": "466960"
  },
  {
    "text": "cloudfront even for live delivery can be really beneficial because cloudfront will",
    "start": "466960",
    "end": "472319"
  },
  {
    "text": "collapse multiple users requests that are coming in for the same chunks of that live video and send fewer",
    "start": "472319",
    "end": "478479"
  },
  {
    "text": "requests back to the ec2 instance to your media server so that can help um",
    "start": "478479",
    "end": "484800"
  },
  {
    "text": "decrease the load on your ec2 instance while platform is handling the scale you can also set cache control headers on cloudform for",
    "start": "484800",
    "end": "491199"
  },
  {
    "text": "your ts files or for your m3u hit manifest file so that platform can actually cache those files maybe even for a second or two",
    "start": "491199",
    "end": "498080"
  },
  {
    "text": "so that if you all of a sudden have a million users coming to watch your live stream platform can cache that and then deliver",
    "start": "498080",
    "end": "503440"
  },
  {
    "text": "it from its local cache so you know for live i mentioned that",
    "start": "503440",
    "end": "510639"
  },
  {
    "text": "you can run things like wowza or adobe media server on ec2",
    "start": "510639",
    "end": "516000"
  },
  {
    "text": "you could also run things like or you could also work with some of our other marketplace partners such as buy drm",
    "start": "516000",
    "end": "521039"
  },
  {
    "text": "easy drm or express express play for some of the security components",
    "start": "521039",
    "end": "526720"
  },
  {
    "text": "you know in your live or on demand workflow so i wanted to spend a couple of minutes",
    "start": "526720",
    "end": "533440"
  },
  {
    "text": "diving deep on some of the services uh particularly cloudfront and elastic transporter so cloudfront is a content",
    "start": "533440",
    "end": "539600"
  },
  {
    "text": "delivery service we have 52 edge locations around the world uh supports both on demand as well as",
    "start": "539600",
    "end": "544800"
  },
  {
    "text": "live streaming and different formats http as well as rtmp for on demand",
    "start": "544800",
    "end": "551839"
  },
  {
    "text": "from an http perspective you can do hds hls uh and there's also native support",
    "start": "551839",
    "end": "557760"
  },
  {
    "text": "for smooth streaming when you're using cloudfront for delivery you can also you know as i",
    "start": "557760",
    "end": "563040"
  },
  {
    "text": "explained you can also set custom ttls for different types of content so for your",
    "start": "563040",
    "end": "569120"
  },
  {
    "text": "chunks versus the manifest file cloudfront also has tcp optimizations with the origin server",
    "start": "569120",
    "end": "574720"
  },
  {
    "text": "keeps persistent connections scales up the the window size just to optimize the the network paths",
    "start": "574720",
    "end": "580880"
  },
  {
    "text": "so that we can get the content as quickly as possible from the origin and deliver it to to the end users",
    "start": "580880",
    "end": "588480"
  },
  {
    "text": "particularly important in a live streaming use case where you don't want any buffering or any delays",
    "start": "588480",
    "end": "593519"
  },
  {
    "text": "and then you can also configure cloudfront to support things like customization based on what",
    "start": "593519",
    "end": "599279"
  },
  {
    "text": "devices the end users are using to access your media or download your media",
    "start": "599279",
    "end": "604399"
  },
  {
    "text": "where they're located in terms of geo location and so forth from a security perspective you can have",
    "start": "604399",
    "end": "611839"
  },
  {
    "start": "609000",
    "end": "609000"
  },
  {
    "text": "your own ssl certificate with cloudfront so you can use your own domain name even if you are delivering",
    "start": "611839",
    "end": "617440"
  },
  {
    "text": "content over ssl you can enforce https only delivery to",
    "start": "617440",
    "end": "623920"
  },
  {
    "text": "end users with cloudfront or you can also redirect http to https to make sure that your content is",
    "start": "623920",
    "end": "630480"
  },
  {
    "text": "encrypted as it's going along the path um s3 can be secured with",
    "start": "630480",
    "end": "638640"
  },
  {
    "text": "what we call private content and a part of private content is origin access identities",
    "start": "638640",
    "end": "643839"
  },
  {
    "text": "where only cloudfront is allowed to have access to the s3 bucket that has your media files so that the end user you can see that x",
    "start": "643839",
    "end": "650480"
  },
  {
    "text": "there and users can directly go to s3 to download that file you can also sign the urls as",
    "start": "650480",
    "end": "656959"
  },
  {
    "text": "i described earlier with cloudfront so that the end user also needs to have a valid",
    "start": "656959",
    "end": "662079"
  },
  {
    "text": "signed url to download content from uh from an from a cloud for edge location and then",
    "start": "662079",
    "end": "669120"
  },
  {
    "text": "when ec2 is the origin you can also have security groups around your ec2 instance such that only cloudfront has access to",
    "start": "669120",
    "end": "675200"
  },
  {
    "text": "your ec2 or media server running on ec2",
    "start": "675200",
    "end": "679760"
  },
  {
    "text": "finally cloudfront does record access logs into amazon s3 so you can get users data about your",
    "start": "681839",
    "end": "688399"
  },
  {
    "text": "about your viewers after they have downloaded content from from cloudfront",
    "start": "688399",
    "end": "694800"
  },
  {
    "text": "talk a little bit about elastic transcoder so the amazon elastic transcoder service",
    "start": "695279",
    "end": "700839"
  },
  {
    "text": "is is uh for transcoding your media files from one format to another",
    "start": "700839",
    "end": "707120"
  },
  {
    "text": "it's a highly scalable and a cost-effective service it includes the cost of you know some of",
    "start": "707120",
    "end": "713279"
  },
  {
    "text": "the licensing for different codecs and things like that so you don't have to worry about that it integrates with other aws services",
    "start": "713279",
    "end": "719279"
  },
  {
    "text": "such as s3 and you saw that in the architecture diagram where you can store your",
    "start": "719279",
    "end": "726000"
  },
  {
    "text": "you know your media files in s3 use elastic transporter to transcode it and then store the",
    "start": "726000",
    "end": "731600"
  },
  {
    "text": "output form the output again into s3 buckets the outputs that are supported by elastic transcoder",
    "start": "731600",
    "end": "738720"
  },
  {
    "text": "you know some of the popular output formats such as mp4 with h264 and aac when i talk to customers",
    "start": "738720",
    "end": "745040"
  },
  {
    "text": "you know these are this is typically how uh you know sort of the industry standard what customers are doing today",
    "start": "745040",
    "end": "751600"
  },
  {
    "text": "also webm with vp8 and wordpress and then trans electric transmitter also",
    "start": "751600",
    "end": "757839"
  },
  {
    "text": "supports adaptive bitrate formats such as hls and smooth streaming can generate the hls manifest file for you",
    "start": "757839",
    "end": "765200"
  },
  {
    "text": "you can also use transcoder for audio only transcoding both inputs as well as outputs and then",
    "start": "765200",
    "end": "772160"
  },
  {
    "text": "it's a pretty feature-rich service we've recently you know about a little over a year ago is when we launched the service",
    "start": "772160",
    "end": "778079"
  },
  {
    "text": "and it's already a fairly featured service service in that it supports captions uh visual",
    "start": "778079",
    "end": "783920"
  },
  {
    "text": "watermarks clipping and things like that",
    "start": "783920",
    "end": "788800"
  },
  {
    "text": "from a security perspective the transcoder service is coming soon with a number of",
    "start": "789200",
    "end": "794720"
  },
  {
    "text": "security features specifically we're adding support for amazon has three encryption at rest the",
    "start": "794720",
    "end": "801600"
  },
  {
    "text": "amazon uh the elastic transcoder service will also allow sending an encrypted media file",
    "start": "801600",
    "end": "807920"
  },
  {
    "text": "decrypting it uh transcoding it and then encrypting the output so that's coming soon as well",
    "start": "807920",
    "end": "816160"
  },
  {
    "text": "the aws key management service that was announced yesterday elastic transcoder will integrate with that in the near future",
    "start": "816160",
    "end": "823120"
  },
  {
    "text": "to protect the keys that are used for the encryption and decryption and then finally the service will add",
    "start": "823120",
    "end": "829519"
  },
  {
    "text": "support for hls streams and encryption in that it'll",
    "start": "829519",
    "end": "835040"
  },
  {
    "text": "you'll be able to specif or it'll include the uris for the key file in the manifest for",
    "start": "835040",
    "end": "840079"
  },
  {
    "text": "your hls streams so all of these features are coming soon and we'll actually show you in the demo",
    "start": "840079",
    "end": "846320"
  },
  {
    "text": "we do later today drew will be able to show you the the manifest output and see what it looks like",
    "start": "846320",
    "end": "853360"
  },
  {
    "start": "853000",
    "end": "853000"
  },
  {
    "text": "just a quick note also about the the mpaa security best practices so when it comes to media and delivering",
    "start": "853839",
    "end": "860079"
  },
  {
    "text": "media content with aws aws has alignment with the mpa security",
    "start": "860079",
    "end": "866480"
  },
  {
    "text": "best practices and multiple services are covered as you can see here",
    "start": "866480",
    "end": "871600"
  },
  {
    "text": "as well as multiple content types are covered there's a lot more you can read about this on our website i just wanted to",
    "start": "871600",
    "end": "877600"
  },
  {
    "text": "point this out just so you're aware and beyond just the mpaa best practices",
    "start": "877600",
    "end": "885199"
  },
  {
    "text": "alignment aws services also have numerous",
    "start": "885199",
    "end": "890480"
  },
  {
    "text": "security certifications and compliance requirements that our various services meet",
    "start": "890480",
    "end": "896480"
  },
  {
    "text": "you know some of these are stock one stock two stock three compliance requirements iso 27001",
    "start": "896480",
    "end": "901680"
  },
  {
    "text": "pci compliance fedramp in the public sector the federal space um again you can read a lot more about",
    "start": "901680",
    "end": "907839"
  },
  {
    "text": "this on our security center and a lot of this stuff is uh you know already covered in some of the other",
    "start": "907839",
    "end": "913920"
  },
  {
    "text": "sessions at the conference and the last point i'd make when it",
    "start": "913920",
    "end": "919519"
  },
  {
    "text": "comes to the aws components that you can use for your media delivery is i'd like to call out identity and",
    "start": "919519",
    "end": "925199"
  },
  {
    "text": "access management because when it comes to securing your media content",
    "start": "925199",
    "end": "931600"
  },
  {
    "text": "you know you can put all of the encryption and drm and everything in place but if unauthorized users can have",
    "start": "931600",
    "end": "936639"
  },
  {
    "text": "access to your aws resources you know that doesn't really help",
    "start": "936639",
    "end": "941839"
  },
  {
    "text": "because they can then still go and access your content so identity and access management allows",
    "start": "941839",
    "end": "947040"
  },
  {
    "text": "you to create im roles so that only authorized users are able to access your resources within aws",
    "start": "947040",
    "end": "954160"
  },
  {
    "text": "and also only you know take specific actions within aws services",
    "start": "954160",
    "end": "960320"
  },
  {
    "text": "so im integrates with amazon s3 where you can set policies on specific objects or buckets iem also",
    "start": "960320",
    "end": "967360"
  },
  {
    "text": "integrates with cloudfront where you can set resource level permissions and so on",
    "start": "967360",
    "end": "973199"
  },
  {
    "text": "so at this point uh i'd like to invite jerome and talk a little bit about jw player",
    "start": "974079",
    "end": "979680"
  },
  {
    "text": "and just players in general and the importance of players when it comes to delivering delivering your video content to end",
    "start": "979680",
    "end": "986720"
  },
  {
    "text": "users you know and and sort of their first impression because the first thing that they're doing is interacting with the",
    "start": "986720",
    "end": "992880"
  },
  {
    "text": "player uh so sure thank you",
    "start": "992880",
    "end": "997839"
  },
  {
    "text": "um so if you're if you're thinking about uh aws is handling the back end and then at",
    "start": "998240",
    "end": "1004480"
  },
  {
    "text": "the front end you need a video player so a lot of people use something like youtube or vimeo but",
    "start": "1004480",
    "end": "1010880"
  },
  {
    "text": "there you don't have control over branding and over what other types of content is available",
    "start": "1010880",
    "end": "1016480"
  },
  {
    "text": "or you can build a video player yourself the third option would be to to actually grab a white label video player",
    "start": "1016480",
    "end": "1023600"
  },
  {
    "text": "like jw player so we offer for developers and very easy to use but very extensive",
    "start": "1023600",
    "end": "1030000"
  },
  {
    "text": "packaged for playback of all kinds of content we used to do that only on the internet",
    "start": "1030000",
    "end": "1035760"
  },
  {
    "text": "in flash and html5 but we're increasingly also moving into areas like mobile native",
    "start": "1035760",
    "end": "1043199"
  },
  {
    "text": "ios and android and then also ott platforms as platforms like chromecast and the apple",
    "start": "1043199",
    "end": "1048799"
  },
  {
    "text": "tv are popping up and we now see the the new fire tv boxes so there's there's definitely a lot of movement in",
    "start": "1048799",
    "end": "1054799"
  },
  {
    "text": "that area and and typically jw player is is offered as a replacement",
    "start": "1054799",
    "end": "1060640"
  },
  {
    "text": "for the built-in component an html5 that would be the video tag and on something like android it's the",
    "start": "1060640",
    "end": "1067440"
  },
  {
    "text": "android media player and there we offer a single set of apis",
    "start": "1067440",
    "end": "1072799"
  },
  {
    "text": "or a single set of functionalities across platforms that that gives you consistent things for",
    "start": "1072799",
    "end": "1078559"
  },
  {
    "text": "user experience adaptive streaming uh monetization through video",
    "start": "1078559",
    "end": "1083840"
  },
  {
    "text": "advertising uh something we call casting so you have an ipad you can actually cast a video to your apple tv",
    "start": "1083840",
    "end": "1090640"
  },
  {
    "text": "or you have an android device you can cast that video to your um to your chromecast um we're really",
    "start": "1090640",
    "end": "1097679"
  },
  {
    "text": "working on standardizing and extending that ecosystem and and then the last part is video and all that is to really see hey how are",
    "start": "1097679",
    "end": "1104400"
  },
  {
    "text": "your videos doing and and then for the purposes of this demo we're we're really looking at",
    "start": "1104400",
    "end": "1110480"
  },
  {
    "start": "1106000",
    "end": "1106000"
  },
  {
    "text": "um uh content um streaming to a web player um there",
    "start": "1110480",
    "end": "1117039"
  },
  {
    "text": "you basically can see the jw player as a replacement of the video tag and what we're then doing is kind of",
    "start": "1117039",
    "end": "1122400"
  },
  {
    "text": "like smoothing out all the glitches or the the lacks of supported components",
    "start": "1122400",
    "end": "1127440"
  },
  {
    "text": "in in the browsers today a very good example is internet explorer",
    "start": "1127440",
    "end": "1132640"
  },
  {
    "text": "8. no html5 support yet but still five percent of the market is using it",
    "start": "1132640",
    "end": "1139280"
  },
  {
    "text": "the second component is what we what we call a premium user interface uh you want your videos to be as nice",
    "start": "1139280",
    "end": "1145679"
  },
  {
    "text": "and as good looking as those on netflix and hulu and but not necessarily spent the thousands",
    "start": "1145679",
    "end": "1152320"
  },
  {
    "text": "of hours of engineering time to really polish that experience and that's something that jw player gives",
    "start": "1152320",
    "end": "1158240"
  },
  {
    "text": "you and then the third part and this is something that is fairly unique to jw",
    "start": "1158240",
    "end": "1163919"
  },
  {
    "text": "player is that the apple hls streaming protocol the protocol that we're going to use in the demo today",
    "start": "1163919",
    "end": "1170160"
  },
  {
    "text": "is actually played back by jw player and desktop browsers so what that means is that you can set",
    "start": "1170160",
    "end": "1175840"
  },
  {
    "text": "up a workflow with one single protocol and stream it out to desktop and mobile",
    "start": "1175840",
    "end": "1181360"
  },
  {
    "text": "devices so that saves you a lot of the hassle of like two or three protocols to to reach",
    "start": "1181360",
    "end": "1186640"
  },
  {
    "text": "your platforms um and not only do we like support that protocol",
    "start": "1186640",
    "end": "1192480"
  },
  {
    "text": "at its baseline but we'll also do things like multiple audio tracks so you can switch",
    "start": "1192480",
    "end": "1198720"
  },
  {
    "text": "languages captioning or is something that's that's supported by jw player and we",
    "start": "1198720",
    "end": "1206159"
  },
  {
    "text": "put a lot of effort into fast making the video player startup fast making the video appear on your screen",
    "start": "1206159",
    "end": "1212159"
  },
  {
    "text": "fast every second that that the video is not popping up you'll lose",
    "start": "1212159",
    "end": "1217440"
  },
  {
    "text": "almost 10 of your audience so it's very important that that video is fast and beautiful so the other part of that",
    "start": "1217440",
    "end": "1223919"
  },
  {
    "text": "is quality if your video is very high quality then your customers or your viewers will stick around longer",
    "start": "1223919",
    "end": "1232880"
  },
  {
    "start": "1232000",
    "end": "1232000"
  },
  {
    "text": "then last in terms of security functionality um geoplayer supports tokening for all the",
    "start": "1233520",
    "end": "1238799"
  },
  {
    "text": "major cdns including cloudfront um there's not that much that that we're doing as a client-side player we're just",
    "start": "1238799",
    "end": "1244559"
  },
  {
    "text": "making sure that in the scripting layer we're not mangling the token urls for example",
    "start": "1244559",
    "end": "1250400"
  },
  {
    "text": "due to encoding or decoding digital player offers domain restriction",
    "start": "1250400",
    "end": "1255760"
  },
  {
    "text": "so if you have a video that is sitting on yourdomain.com somebody grabs that video player and",
    "start": "1255760",
    "end": "1262080"
  },
  {
    "text": "embeds it on hisdomain.com you can actually block that down and make sure that that does not happen",
    "start": "1262080",
    "end": "1268080"
  },
  {
    "text": "uh the third part is the hls encryption so that's the standard where the the",
    "start": "1268080",
    "end": "1273760"
  },
  {
    "text": "when somebody gets hold of your media files they can actually not play it they need the keys to play",
    "start": "1273760",
    "end": "1278880"
  },
  {
    "text": "it judo player understands that mechanism and also",
    "start": "1278880",
    "end": "1284000"
  },
  {
    "text": "can decode in the client up to hd quality content and then the last part um this is not",
    "start": "1284000",
    "end": "1291200"
  },
  {
    "text": "something that jr player supports today um it's something that um is like",
    "start": "1291200",
    "end": "1296960"
  },
  {
    "text": "implemented in browsers um in like the last couple years other browsers are still working on it",
    "start": "1296960",
    "end": "1303520"
  },
  {
    "text": "it's a standard called encrypted media extensions um it allows for drm it allows basically",
    "start": "1303520",
    "end": "1309840"
  },
  {
    "text": "for the widely used drm platforms to be played back by the browsers themselves",
    "start": "1309840",
    "end": "1315440"
  },
  {
    "text": "it's something that with jw blair we're in like sync step with those uh with those platforms and",
    "start": "1315440",
    "end": "1320480"
  },
  {
    "text": "and we really want to get all the browsers on there so studio content can play native html5",
    "start": "1320480",
    "end": "1327760"
  },
  {
    "text": "and as you can see the market is um two-thirds there at this point uh chrome supports it safari supports it",
    "start": "1327760",
    "end": "1335679"
  },
  {
    "text": "in the latest yosemite release uh internet explorer supports it in the latest 11 release",
    "start": "1335679",
    "end": "1341760"
  },
  {
    "text": "and firefox um it does not support eme yet but uh there is progress in this area",
    "start": "1341760",
    "end": "1349520"
  },
  {
    "text": "with that i'd like to hand it over to dhruv to do the actual demo all right thank you so much soon all",
    "start": "1349520",
    "end": "1355039"
  },
  {
    "text": "right so um for the demo that we're gonna show today what we're gonna do is really mainly focus on using",
    "start": "1355039",
    "end": "1361760"
  },
  {
    "text": "aws services for the video on demand piece so usually what you have is a whole host",
    "start": "1361760",
    "end": "1367280"
  },
  {
    "text": "of different pieces that you have to look through but for today's demo we're going to use s3 for storage",
    "start": "1367280",
    "end": "1372400"
  },
  {
    "text": "we're going to use elastic transcoder for the transcoding and the encryption as well uh we're",
    "start": "1372400",
    "end": "1377840"
  },
  {
    "text": "going to use amazon cloudfront for the actual delivery of the content to the end user",
    "start": "1377840",
    "end": "1383200"
  },
  {
    "text": "and uh in the overall platform we're also going to be engaging the key management service for the",
    "start": "1383200",
    "end": "1389200"
  },
  {
    "text": "actual encryption piece for uh elastic transcoder and we'll discuss that in the architecture itself",
    "start": "1389200",
    "end": "1395360"
  },
  {
    "text": "we're going to use jw player for the playback of the actual video and really the benefit of all of",
    "start": "1395360",
    "end": "1401679"
  },
  {
    "text": "this is that we want you to have the avail the high availability the scalability and the low cost that we can",
    "start": "1401679",
    "end": "1407120"
  },
  {
    "text": "offer you from using services rather than servers right uh if you have to imagine having a whole fleet of different transcoding",
    "start": "1407120",
    "end": "1413679"
  },
  {
    "text": "servers encryption servers and a whole host of other things that you need to take care of with using just services we can reduce",
    "start": "1413679",
    "end": "1420080"
  },
  {
    "text": "that to just when you actually need to transcode and encrypt your data so let's really quickly before we",
    "start": "1420080",
    "end": "1426159"
  },
  {
    "start": "1425000",
    "end": "1425000"
  },
  {
    "text": "actually show the demo talk about what that looks like from a transcoding piece right so you as",
    "start": "1426159",
    "end": "1432880"
  },
  {
    "text": "the media owner would first obviously upload your content into s3",
    "start": "1432880",
    "end": "1438000"
  },
  {
    "text": "right this s3 bucket that you have can be completely locked down to just you as the owner having access to it",
    "start": "1438000",
    "end": "1445039"
  },
  {
    "text": "and no one else so that would be your unencrypted media file right at that point in time",
    "start": "1445039",
    "end": "1451440"
  },
  {
    "text": "what you can do is you can send a key file to the key management service now this",
    "start": "1451440",
    "end": "1457120"
  },
  {
    "text": "key file will be encrypted okay and basically we will use the key management service",
    "start": "1457120",
    "end": "1463360"
  },
  {
    "text": "to encrypt the the key file that will actually eventually encrypt your uh video file okay the",
    "start": "1463360",
    "end": "1469520"
  },
  {
    "text": "reason for this is really because protecting the key file is just as important as protecting the content",
    "start": "1469520",
    "end": "1476880"
  },
  {
    "text": "right if we were to allow for that key file to be available at any point in time the the entire",
    "start": "1476880",
    "end": "1483039"
  },
  {
    "text": "purpose of this is invalid at that point right so we want to encrypt it and have that stored in a secure location",
    "start": "1483039",
    "end": "1488080"
  },
  {
    "text": "so you'd have a master key file that would be in the key management service which would then wrap your key file",
    "start": "1488080",
    "end": "1494240"
  },
  {
    "text": "that's used for encryption uh with another encrypted layer right so that's sent back to you",
    "start": "1494240",
    "end": "1499760"
  },
  {
    "text": "in an encrypted form right you can then call elastic transcoder you can send the",
    "start": "1499760",
    "end": "1506320"
  },
  {
    "text": "encrypted key that was received by you from the key management service",
    "start": "1506320",
    "end": "1511600"
  },
  {
    "text": "to elastic transcoder elastic transporter would have a role",
    "start": "1511600",
    "end": "1516799"
  },
  {
    "text": "that role or an iem role would allow for access to two things the s3 bucket with",
    "start": "1516799",
    "end": "1523360"
  },
  {
    "text": "the content right so this is a locked bucket that you have control over and the key management service right so",
    "start": "1523360",
    "end": "1531039"
  },
  {
    "text": "once you give access to elastic transcoder to access both these different pieces uh the unencrypted key and",
    "start": "1531039",
    "end": "1538799"
  },
  {
    "text": "the the actual unencrypted video can be sent to elastic transporter elastic transcoder will handle the",
    "start": "1538799",
    "end": "1545360"
  },
  {
    "text": "transcoding and the encryption and then what you'll get is an encrypted file that will be stored",
    "start": "1545360",
    "end": "1550960"
  },
  {
    "text": "in an s3 bucket for you okay from that point you can use a jw player",
    "start": "1550960",
    "end": "1557440"
  },
  {
    "text": "or any uh standard player to actually request for that content uh that content will be delivered from",
    "start": "1557440",
    "end": "1563679"
  },
  {
    "text": "uh cloudfront so at this point in time what i'm gonna do is i'm gonna move over to the demo itself what we've done is we've actually",
    "start": "1563679",
    "end": "1569679"
  },
  {
    "text": "pre-baked the video we've pre-encrypted it and we're going to show you this this in",
    "start": "1569679",
    "end": "1574880"
  },
  {
    "text": "in effect right now so let's quickly log",
    "start": "1574880",
    "end": "1578640"
  },
  {
    "text": "in okay all right so what we've got right now is",
    "start": "1582840",
    "end": "1589600"
  },
  {
    "text": "basically um the encrypted data stored in s3 right um i'm going to quickly show you what",
    "start": "1589600",
    "end": "1595760"
  },
  {
    "text": "the manifest output looks like so once uh elastic transcoder completes the",
    "start": "1595760",
    "end": "1601520"
  },
  {
    "text": "the conversion into ts segments it will also generate the m3u8 manifest file right if you look",
    "start": "1601520",
    "end": "1608240"
  },
  {
    "text": "through this you will also see that there is a uri that you can define you can define this uri to whatever you like",
    "start": "1608240",
    "end": "1614720"
  },
  {
    "text": "right and this would actually point to the key file that's being used if you notice there's also an initiation",
    "start": "1614720",
    "end": "1620480"
  },
  {
    "text": "vector that's defined for different parts of the key file depending upon the ts file that's being called",
    "start": "1620480",
    "end": "1626400"
  },
  {
    "text": "all right so this is all done for you and managed by elastic transcoder",
    "start": "1626400",
    "end": "1631679"
  },
  {
    "text": "from a video perspective what i've got right now is i've got a domain that's defined and pointed to cloudfront which",
    "start": "1631679",
    "end": "1637520"
  },
  {
    "text": "is looking at the s3 bucket which has the content the content is protected with oai or",
    "start": "1637520",
    "end": "1643279"
  },
  {
    "text": "origin access controls and basically at that point in time we",
    "start": "1643279",
    "end": "1648399"
  },
  {
    "text": "can just load the stream and what we should see is the video playing back now",
    "start": "1648399",
    "end": "1654000"
  },
  {
    "text": "if we look at the network elements what you'll see is that at every call of the ts file there's also a key",
    "start": "1654000",
    "end": "1659600"
  },
  {
    "text": "file that's been called right that's being used by the player to decrypt the content and to play it back",
    "start": "1659600",
    "end": "1665120"
  },
  {
    "text": "on the screen at this point to call jerome to maybe talk about a little bit more about the inner workings of jw player and how",
    "start": "1665120",
    "end": "1672000"
  },
  {
    "text": "that's uh being handled under the hood great yeah um so yeah what you can see here at the bottom is that actually the",
    "start": "1672000",
    "end": "1678480"
  },
  {
    "text": "fragments of the video are being loaded as well as the key files so every other fragment or i don't know",
    "start": "1678480",
    "end": "1683919"
  },
  {
    "text": "exactly what the interval is every couple of fragments you're loading the key file and then the player knows like hey i",
    "start": "1683919",
    "end": "1691039"
  },
  {
    "text": "used this key to decrypt the fragments this window also nicely shows what it",
    "start": "1691039",
    "end": "1696159"
  },
  {
    "text": "means that the stream is adaptive the videos are being loaded in small chunks the video player glues them",
    "start": "1696159",
    "end": "1702640"
  },
  {
    "text": "together not only across the timeline but also across different video quality so the video",
    "start": "1702640",
    "end": "1708240"
  },
  {
    "text": "end user always sees the highest quality content you can see that here where with jw",
    "start": "1708240",
    "end": "1714080"
  },
  {
    "text": "player you can actually see the five bit rates of this video",
    "start": "1714080",
    "end": "1719679"
  },
  {
    "text": "automatically by default the geo the player itself will switch up and down you can choose to either select a low",
    "start": "1719679",
    "end": "1725679"
  },
  {
    "text": "bid rate for yourself if you want to free up your internal network like your your emails are not coming",
    "start": "1725679",
    "end": "1731120"
  },
  {
    "text": "through or you want to actually go to a higher quality and don't mind waiting for the",
    "start": "1731120",
    "end": "1736840"
  },
  {
    "text": "content and then if we go a little bit lower we actually see the embed code of the",
    "start": "1736840",
    "end": "1742960"
  },
  {
    "text": "gw player there's two components to that at the top you'll see the library that's being loaded and at the bottom you'll see the",
    "start": "1742960",
    "end": "1749440"
  },
  {
    "text": "chunk of javascript that's called to set up the video player instance",
    "start": "1749440",
    "end": "1754720"
  },
  {
    "text": "the library is something that you can you can download from our site put that on your own server serve it up",
    "start": "1754720",
    "end": "1760080"
  },
  {
    "text": "from your own server again like with everything else make sure that that is deployed in a scalable way so put your",
    "start": "1760080",
    "end": "1766640"
  },
  {
    "text": "content on put your data player instance on an s3 bucket put the cloudfront on top of it so it",
    "start": "1766640",
    "end": "1773360"
  },
  {
    "text": "always like can manage large loads you can also use what we call our",
    "start": "1773360",
    "end": "1779120"
  },
  {
    "text": "hosted version of the player basically that's our version of jw player that is hosted on s3 and served up through",
    "start": "1779120",
    "end": "1785360"
  },
  {
    "text": "cloudfront in terms of the embed code a lot of it is fairly straightforward you can set",
    "start": "1785360",
    "end": "1790960"
  },
  {
    "text": "the dimensions of the video player both like statically or responsively",
    "start": "1790960",
    "end": "1797279"
  },
  {
    "text": "you can set the mode of the video player if you want to prefer flash versus html5 for platforms that play both",
    "start": "1797279",
    "end": "1803520"
  },
  {
    "text": "and then the last one this one is an item to uh to to take note of is this is an",
    "start": "1803520",
    "end": "1809919"
  },
  {
    "text": "option where you can say hey i really want to play hls content on android devices",
    "start": "1809919",
    "end": "1814960"
  },
  {
    "text": "now on android for hls um there is a it's a bit of a gray area",
    "start": "1814960",
    "end": "1820960"
  },
  {
    "text": "in in terms of what platforms support it and what platforms do not support it",
    "start": "1820960",
    "end": "1826159"
  },
  {
    "text": "the older versions of android and then you're really looking at gingerbread and and lower they do not support hls at",
    "start": "1826159",
    "end": "1833600"
  },
  {
    "text": "all should you have content that you want to deploy across all of android it's always",
    "start": "1833600",
    "end": "1839360"
  },
  {
    "text": "good to set up a separate mp4 file and then jro player will use that one",
    "start": "1839360",
    "end": "1844640"
  },
  {
    "text": "for your for your older androids in this case because our stream is encrypted and we only do",
    "start": "1844640",
    "end": "1850000"
  },
  {
    "text": "hls that's not happening so on android gingerbreads this won't work",
    "start": "1850000",
    "end": "1855520"
  },
  {
    "text": "an ice cream sandwich and jelly bean so then we're talking 4 0 through 4 3 and kind of the biggest",
    "start": "1855520",
    "end": "1862720"
  },
  {
    "text": "chunk of the android market um hls support is there in encryption",
    "start": "1862720",
    "end": "1868480"
  },
  {
    "text": "playback is there but there's there's quite a lot of loading and buffering in the android framework um what we're",
    "start": "1868480",
    "end": "1875440"
  },
  {
    "text": "doing with this true is actually telling jw player that hey if you're an ice cream sandwich",
    "start": "1875440",
    "end": "1880720"
  },
  {
    "text": "or if you're on jelly bean i still want to play the hls video on android so that way you extend your device reach",
    "start": "1880720",
    "end": "1887519"
  },
  {
    "text": "to android to those android 2 versions um luckily the higher versions of android",
    "start": "1887519",
    "end": "1893760"
  },
  {
    "text": "kitkat and in particular jelly bean have really good hls support so over time this problem should go away",
    "start": "1893760",
    "end": "1902158"
  },
  {
    "text": "so you want to move on to the live demo thank you so much actually i've got a couple more slides to show",
    "start": "1902240",
    "end": "1908559"
  },
  {
    "text": "uh before that in the presentation itself before we move on to the live demo um so at this point this is basically",
    "start": "1908559",
    "end": "1914559"
  },
  {
    "text": "what we showed you right now we've actually already handled off this process and controlled it now uh like i said",
    "start": "1914559",
    "end": "1920880"
  },
  {
    "text": "earlier uh if if the key gets exposed uh it's potentially not as good as what it",
    "start": "1920880",
    "end": "1926799"
  },
  {
    "text": "was before that right so you really want to look at protecting that key so as a best practice what we recommend",
    "start": "1926799",
    "end": "1932880"
  },
  {
    "text": "is once the playback is actually happening you could look to actually have a couple",
    "start": "1932880",
    "end": "1937919"
  },
  {
    "text": "of ec2 instances which would deliver the key to the end user now if you remember earlier i mentioned that",
    "start": "1937919",
    "end": "1945039"
  },
  {
    "text": "within the m3u8 you can define the uri that calls the key right so let's assume here that we've",
    "start": "1945039",
    "end": "1952559"
  },
  {
    "text": "got an application you've been able to log into it now within elastic transcoder you can define whichever uri you want",
    "start": "1952559",
    "end": "1958960"
  },
  {
    "text": "it doesn't have to directly point to the key so this could actually point to an application that would then deliver the key to the",
    "start": "1958960",
    "end": "1965519"
  },
  {
    "text": "end user okay so in this case what we have right now is as an example you could use dynamodb",
    "start": "1965519",
    "end": "1972000"
  },
  {
    "text": "to store the encrypted key value the one that was returned to you from elastic transcoder",
    "start": "1972000",
    "end": "1978720"
  },
  {
    "text": "i'm sorry from the key management server right uh once that's with you you can actually put that into",
    "start": "1978720",
    "end": "1984399"
  },
  {
    "text": "say a dynamodb table right uh at that point whenever a request comes for the file for the key itself you could actually",
    "start": "1984399",
    "end": "1991840"
  },
  {
    "text": "send a request from the ec2 instance to the key management service right the key management service will",
    "start": "1991840",
    "end": "1998559"
  },
  {
    "text": "hand back to you the unencrypted key now obviously you don't want to keep doing that",
    "start": "1998559",
    "end": "2004000"
  },
  {
    "text": "all the time for every single request so one of the recommendations we have is maybe you can think about hosting it in",
    "start": "2004000",
    "end": "2009600"
  },
  {
    "text": "memory right for a certain amount of time so you can deliver that as a local cache as well right post that",
    "start": "2009600",
    "end": "2016640"
  },
  {
    "text": "you can just wipe it and then you've got a secure location for that key itself",
    "start": "2016640",
    "end": "2022320"
  },
  {
    "text": "okay so a few best practices one of the things that we talked about was allowing only the cdn",
    "start": "2023760",
    "end": "2030640"
  },
  {
    "start": "2024000",
    "end": "2024000"
  },
  {
    "text": "to access the source content this is very very important you want to make sure that the host is not ex the",
    "start": "2030640",
    "end": "2036480"
  },
  {
    "text": "source is not exposed to the entire internet right so control the source you can use",
    "start": "2036480",
    "end": "2042320"
  },
  {
    "text": "s3 bucket policies with cloudfront right and just make sure that only cloudfront has access to s3",
    "start": "2042320",
    "end": "2048398"
  },
  {
    "text": "um the other thing is that with vod content um you can define a high ttl setting or",
    "start": "2048399",
    "end": "2054638"
  },
  {
    "text": "a time to live setting for your content right the content isn't changing so you",
    "start": "2054639",
    "end": "2060079"
  },
  {
    "text": "can actually just define a very high ttl we'll cache it for more time so you can actually allow it to get",
    "start": "2060079",
    "end": "2065679"
  },
  {
    "text": "cached at the edges you get better service to your customers and your origin reduces and requests that are hitting it",
    "start": "2065679",
    "end": "2072000"
  },
  {
    "text": "if you have a requirement you can geo block your stream as well right uh we spoke about that earlier and",
    "start": "2072000",
    "end": "2077520"
  },
  {
    "text": "another thing that you can think about doing is defining uh your 400 and 500 error caching",
    "start": "2077520",
    "end": "2083358"
  },
  {
    "text": "ttls right this is actually a setting that we have within cloudfront one of the recommendations we have for",
    "start": "2083359",
    "end": "2089280"
  },
  {
    "text": "video especially is to reduce that ttl to as low as you feel necessary the reason for this is let's say that",
    "start": "2089280",
    "end": "2096878"
  },
  {
    "text": "there's an edge case where you have a cms that has published the content but the content isn't actually",
    "start": "2096879",
    "end": "2103040"
  },
  {
    "text": "available for uh consumption uh this has more to do with live than than with uh",
    "start": "2103040",
    "end": "2108480"
  },
  {
    "text": "vod but it still applies here um you can actually get a 404 at that point in time if you see a",
    "start": "2108480",
    "end": "2115359"
  },
  {
    "text": "404 what would happen with the cdn standard is basically it would cache that 404",
    "start": "2115359",
    "end": "2121760"
  },
  {
    "text": "right so if we define a lower ttl for the uh the error you would then be able to",
    "start": "2121760",
    "end": "2127599"
  },
  {
    "text": "pull the file much faster and i'll actually be able to show that to you in the live streaming demo",
    "start": "2127599",
    "end": "2133680"
  },
  {
    "text": "in fact let's move on to that right now so for the live streaming demo like neha mentioned earlier there are",
    "start": "2133680",
    "end": "2139119"
  },
  {
    "start": "2135000",
    "end": "2135000"
  },
  {
    "text": "multiple options for sending your rtmp stream into amazon web services and then",
    "start": "2139119",
    "end": "2144160"
  },
  {
    "text": "delivering that out but for this particular demo what i decided to do was use pure open source uh software right",
    "start": "2144160",
    "end": "2151839"
  },
  {
    "text": "so what we're running is an ec2 instance running nginx with a plug-in called nginx rtmp module",
    "start": "2151839",
    "end": "2158640"
  },
  {
    "text": "now it sounds like it's only going to be working in rtip but this particular module actually supports output in both hls as",
    "start": "2158640",
    "end": "2165680"
  },
  {
    "text": "well as dash and of course rtmp right we're going to transcode using ffmpeg okay which is another open",
    "start": "2165680",
    "end": "2173440"
  },
  {
    "text": "source tool again ffmpeg was compiled with the rtmp module as well for ffmpeg",
    "start": "2173440",
    "end": "2180960"
  },
  {
    "text": "uh if you need more information about the particular plugin that we're using for nginx that last github repository is",
    "start": "2180960",
    "end": "2187520"
  },
  {
    "text": "actually the repository that it was used from okay so let's look at the setup itself before we actually show the demo um so",
    "start": "2187520",
    "end": "2194880"
  },
  {
    "start": "2191000",
    "end": "2191000"
  },
  {
    "text": "what we're going to do is we have an rtmp stream right we can use route 53's failover dns",
    "start": "2194880",
    "end": "2202480"
  },
  {
    "text": "to send the the data to the uh instance that's being used at that point in time the reason i chose to use failover dns",
    "start": "2202480",
    "end": "2209119"
  },
  {
    "text": "for this particular setup uh is because since nginx is also handling the encryption and the key management",
    "start": "2209119",
    "end": "2215760"
  },
  {
    "text": "itself um if you actually sent it to two different instances you could potentially have different keys and",
    "start": "2215760",
    "end": "2221920"
  },
  {
    "text": "basically playback would fail at that point in time so we want to send it to one instance but we want to have a failover of some",
    "start": "2221920",
    "end": "2227839"
  },
  {
    "text": "sort so if there is an issue with the instance uh route 53 would start uh sending data",
    "start": "2227839",
    "end": "2233440"
  },
  {
    "text": "to the other instance itself and you can continue your stream from there uh from that point on you can call your",
    "start": "2233440",
    "end": "2239599"
  },
  {
    "text": "client whichever that might be in this case we're going to use jw player and um",
    "start": "2239599",
    "end": "2245599"
  },
  {
    "text": "from the output itself we're going to send it from cloudfront so i'll stop there i'll switch over and what i'm going to do right now is i'm going to use my",
    "start": "2245599",
    "end": "2252160"
  },
  {
    "text": "phone as the rtmp stream and i'm going to stream you guys so you can wave at me",
    "start": "2252160",
    "end": "2258240"
  },
  {
    "text": "for a second let's switch over okay all right so it's going to take a",
    "start": "2258240",
    "end": "2265200"
  },
  {
    "text": "couple of seconds to actually publish but i am publishing right now and what i'm going to do is i'll show",
    "start": "2265200",
    "end": "2271680"
  },
  {
    "text": "you what happens basically before it starts is you if you look right now you see that there's a 404",
    "start": "2271680",
    "end": "2277280"
  },
  {
    "text": "now if i hadn't defined that setting of a low ttl what would happen is this would stay on",
    "start": "2277280",
    "end": "2283359"
  },
  {
    "text": "screen for five minutes because that's the default uh caching mechanism for a 404 error",
    "start": "2283359",
    "end": "2289839"
  },
  {
    "text": "it'll stay for five minutes but what i've defined is a much lower ttl so now you see that it should start streaming and there",
    "start": "2289839",
    "end": "2296160"
  },
  {
    "text": "you go we're actually streaming the room right now so this is using complete open source components",
    "start": "2296160",
    "end": "2301440"
  },
  {
    "text": "and basically my phone is the broadcaster now this could be anything you want it to be this could be um an open broadcasting",
    "start": "2301440",
    "end": "2308640"
  },
  {
    "text": "system it could be a professional broadcasting system it could be your transcoder itself on premises whatever you want to use you can use for",
    "start": "2308640",
    "end": "2315599"
  },
  {
    "text": "this and uh just to show you that it's actually using keys if we can pull up the network there you",
    "start": "2315599",
    "end": "2322720"
  },
  {
    "text": "go so if you see there's um a demo key that's being pulled regularly",
    "start": "2322720",
    "end": "2327760"
  },
  {
    "text": "now what i'm doing with this is i'm actually rotating the keys and we'll talk about that in a second as well so we basically have a completely open",
    "start": "2327760",
    "end": "2334480"
  },
  {
    "text": "source platform that you have available to you that you can use to stream um",
    "start": "2334480",
    "end": "2340720"
  },
  {
    "text": "any any live event you want so i just stopped the stream so it might start stopping right now so i'm",
    "start": "2340720",
    "end": "2347200"
  },
  {
    "text": "going to switch back and talk about a best practice as well for this as well",
    "start": "2347200",
    "end": "2352560"
  },
  {
    "text": "so once the stream actually hits your um your player uh before that",
    "start": "2352560",
    "end": "2358880"
  },
  {
    "text": "hopefully we're looking at having an application that's wrapping that around so you have some way of authenticating your users this is",
    "start": "2358880",
    "end": "2365760"
  },
  {
    "text": "an extremely important piece you don't want to just have a url that points to your to your stream",
    "start": "2365760",
    "end": "2372880"
  },
  {
    "text": "you want to have some layer of authentication some way of getting a cookie so you can actually define who gets access to your",
    "start": "2372880",
    "end": "2379440"
  },
  {
    "text": "m3u8 files right or to your video files i should say so it's very important to have an",
    "start": "2379440",
    "end": "2385839"
  },
  {
    "text": "application that makes sure you're handling authentication properly so this would be an overall setup this would be for both",
    "start": "2385839",
    "end": "2393040"
  },
  {
    "text": "the vod as well as the live stream itself from a best practices perspective you",
    "start": "2393040",
    "end": "2400560"
  },
  {
    "text": "want to limit access to port 1935 to only trusted sources so what is port",
    "start": "2400560",
    "end": "2405839"
  },
  {
    "text": "1935 port 1935 is the default port for our tmp streams",
    "start": "2405839",
    "end": "2411119"
  },
  {
    "text": "okay if you have another port that you're using again restrict access to that to the ec2",
    "start": "2411119",
    "end": "2417680"
  },
  {
    "text": "instance right only allow the trusted source to have access to the ec2 instance at that",
    "start": "2417680",
    "end": "2423200"
  },
  {
    "text": "point in time define your ttl settings for your ts files and your m3u8 files so",
    "start": "2423200",
    "end": "2429440"
  },
  {
    "text": "in this particular case we don't want to have extremely long ttls and the reason for that is that the",
    "start": "2429440",
    "end": "2436000"
  },
  {
    "text": "m3u8 never closes it's constantly being updated that's how hls works so",
    "start": "2436000",
    "end": "2441920"
  },
  {
    "text": "you want to define a very short ttl for m3uits and if you want a fairly long one for ts",
    "start": "2441920",
    "end": "2447599"
  },
  {
    "text": "files if you need to you can geoblock your stream um again you want to define that",
    "start": "2447599",
    "end": "2453440"
  },
  {
    "text": "400 and 500 error as you saw before if you if you allow it to just be a default it will take five",
    "start": "2453440",
    "end": "2459440"
  },
  {
    "text": "minutes before it actually starts playing back your video so if you have a live stream and it's coming up you want to make sure that you",
    "start": "2459440",
    "end": "2465040"
  },
  {
    "text": "keep that very low uh randomize the ts file name so uh this",
    "start": "2465040",
    "end": "2470560"
  },
  {
    "text": "is really really useful when you have um an open stream which means that it's",
    "start": "2470560",
    "end": "2475839"
  },
  {
    "text": "not being encrypted right so if you had um an open stream and it was just basically following",
    "start": "2475839",
    "end": "2482240"
  },
  {
    "text": "a standard pattern of the next file getting the next number what could potentially happen is people",
    "start": "2482240",
    "end": "2487680"
  },
  {
    "text": "could just basically make their own manifest files right if you understand a pattern you can generate your own m308",
    "start": "2487680",
    "end": "2493520"
  },
  {
    "text": "and then your stream is leaking you don't want that so you want to have just a random name showing up for your file name okay",
    "start": "2493520",
    "end": "2501040"
  },
  {
    "text": "and the other thing is you want to rotate the key file as often as possible this is very very important with live",
    "start": "2501040",
    "end": "2507839"
  },
  {
    "text": "because if the key does get exposed at whatever point it doesn't matter it's just for two segments or three segments or whatever",
    "start": "2507839",
    "end": "2513280"
  },
  {
    "text": "you define it for it's the the key file is only used as for as many files as you want it to be",
    "start": "2513280",
    "end": "2518400"
  },
  {
    "text": "used for and you can define that within the configuration so as i said earlier",
    "start": "2518400",
    "end": "2523520"
  },
  {
    "text": "this would be what a typical security group would look like you'd want to have http and https open to the world but for",
    "start": "2523520",
    "end": "2529920"
  },
  {
    "text": "your rtmp stream you want to define it and lock it down as much as possible so that only the the rtmp source",
    "start": "2529920",
    "end": "2538319"
  },
  {
    "text": "has access to it this is a little bit small but if you notice over here",
    "start": "2538319",
    "end": "2543760"
  },
  {
    "text": "we have defined a minimum ttl this is actually the cloudfront console we've defined a minimum ttl for the m3ua",
    "start": "2543760",
    "end": "2549520"
  },
  {
    "text": "to be extremely low right so it's at two seconds and you can define this to whatever you want",
    "start": "2549520",
    "end": "2554640"
  },
  {
    "text": "depending upon what your use case is from a geo restrictions perspective this",
    "start": "2554640",
    "end": "2559760"
  },
  {
    "text": "is again our console you can then define which countries you want to have access to the content",
    "start": "2559760",
    "end": "2565599"
  },
  {
    "text": "it's all in our console and available on our api and sdk for the the error pages and the response",
    "start": "2565599",
    "end": "2572560"
  },
  {
    "text": "codes you provide again over here you see i defined 403 404 and 500s to have a very very",
    "start": "2572560",
    "end": "2578079"
  },
  {
    "text": "low ttl and this is again just to adjust to the point that we mentioned earlier",
    "start": "2578079",
    "end": "2584240"
  },
  {
    "start": "2583000",
    "end": "2583000"
  },
  {
    "text": "um from an nginx rtmp hls configuration um i'm not going to go through the entire nginx configuration that we have",
    "start": "2584480",
    "end": "2591040"
  },
  {
    "text": "but just a few specific points uh the number one is obviously we want to turn on encryption it's literally hls underscore keys on",
    "start": "2591040",
    "end": "2599040"
  },
  {
    "text": "um the next one is the the thing i mentioned about uh changing the naming convention right so",
    "start": "2599040",
    "end": "2605440"
  },
  {
    "text": "i used a time stamp and i rotated that at 250 milliseconds right so it actually multiplied with the",
    "start": "2605440",
    "end": "2612240"
  },
  {
    "text": "time stamp to provide a random name um for your key path you can define",
    "start": "2612240",
    "end": "2617839"
  },
  {
    "text": "whichever key you'd like or sorry whichever part you'd like and",
    "start": "2617839",
    "end": "2623040"
  },
  {
    "text": "then you can again define your url or the uri for your keys that would be generated into your",
    "start": "2623040",
    "end": "2629200"
  },
  {
    "text": "manifest so it's literally hls underscore key underscore url and then you define the uri within that",
    "start": "2629200",
    "end": "2635440"
  },
  {
    "text": "um the the rotation of the the key file itself that's defined by hls fragments",
    "start": "2635440",
    "end": "2641359"
  },
  {
    "text": "per key right so in my use case i basically used uh a key file for two fragments right so",
    "start": "2641359",
    "end": "2648480"
  },
  {
    "text": "you can have it for five fragments for 10 fragments whatever you'd like a fragment is basically a ts file",
    "start": "2648480",
    "end": "2654000"
  },
  {
    "text": "okay and then if you have a use case where you don't need encryption and you want to have a highly available",
    "start": "2654000",
    "end": "2660640"
  },
  {
    "text": "setup what you could potentially do is use hls fragment slicing aligned",
    "start": "2660640",
    "end": "2666079"
  },
  {
    "text": "this is again a setting which basically means that it will look at the rtmp streams time stamp okay and then slice",
    "start": "2666079",
    "end": "2673359"
  },
  {
    "text": "it at exactly the points where it needs to be sliced so you could actually transcode on two servers at the same time and",
    "start": "2673359",
    "end": "2680160"
  },
  {
    "text": "ensure that the output is exactly the same okay and then of course you'd want to have a clean up and basically after that",
    "start": "2680160",
    "end": "2686400"
  },
  {
    "text": "you're done okay and that's all we have right now um so thank you so much for showing up",
    "start": "2686400",
    "end": "2692319"
  },
  {
    "text": "and if you have any questions we'll be out the back so thank you",
    "start": "2692319",
    "end": "2700480"
  }
]