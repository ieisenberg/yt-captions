[
  {
    "text": "[Music]",
    "start": "0",
    "end": "2080"
  },
  {
    "text": "hello everyone",
    "start": "2080",
    "end": "3520"
  },
  {
    "text": "in this session we are going to learn",
    "start": "3520",
    "end": "5440"
  },
  {
    "text": "how to add a caching layer for",
    "start": "5440",
    "end": "7919"
  },
  {
    "text": "net applications using amazon elastic",
    "start": "7919",
    "end": "10800"
  },
  {
    "text": "cache for release",
    "start": "10800",
    "end": "12480"
  },
  {
    "text": "my name is srivan tattanayaka and i'm a",
    "start": "12480",
    "end": "14719"
  },
  {
    "text": "senior partner solution architect at",
    "start": "14719",
    "end": "16720"
  },
  {
    "text": "emerson",
    "start": "16720",
    "end": "17359"
  },
  {
    "text": "focusing around microsoft technologies",
    "start": "17359",
    "end": "21359"
  },
  {
    "text": "we will first learn why we need caching",
    "start": "22160",
    "end": "24480"
  },
  {
    "text": "by going through some use cases",
    "start": "24480",
    "end": "26640"
  },
  {
    "text": "and then learn about amazon elastic",
    "start": "26640",
    "end": "28480"
  },
  {
    "text": "cache",
    "start": "28480",
    "end": "29679"
  },
  {
    "text": "we will then focus on how to create an",
    "start": "29679",
    "end": "32000"
  },
  {
    "text": "amazon dynasty cache cluster for radius",
    "start": "32000",
    "end": "34640"
  },
  {
    "text": "and learn how to use it in our dot net",
    "start": "34640",
    "end": "36559"
  },
  {
    "text": "applications",
    "start": "36559",
    "end": "38559"
  },
  {
    "text": "why we need caching imagine you are",
    "start": "38559",
    "end": "41840"
  },
  {
    "text": "doing an",
    "start": "41840",
    "end": "42399"
  },
  {
    "text": "expensive read operation from a data",
    "start": "42399",
    "end": "44960"
  },
  {
    "text": "store",
    "start": "44960",
    "end": "45600"
  },
  {
    "text": "that takes a lot of time if you can",
    "start": "45600",
    "end": "48559"
  },
  {
    "text": "store the result in a cache",
    "start": "48559",
    "end": "50879"
  },
  {
    "text": "when you query for the same data set",
    "start": "50879",
    "end": "53199"
  },
  {
    "text": "later",
    "start": "53199",
    "end": "54160"
  },
  {
    "text": "you can access it quickly reducing the",
    "start": "54160",
    "end": "56640"
  },
  {
    "text": "latency",
    "start": "56640",
    "end": "57520"
  },
  {
    "text": "increasing the speed and more",
    "start": "57520",
    "end": "59520"
  },
  {
    "text": "importantly",
    "start": "59520",
    "end": "60559"
  },
  {
    "text": "reducing the load in the data store in",
    "start": "60559",
    "end": "63199"
  },
  {
    "text": "this example",
    "start": "63199",
    "end": "64878"
  },
  {
    "text": "when the application sees a cache miss",
    "start": "64879",
    "end": "67600"
  },
  {
    "text": "it reads from the data store",
    "start": "67600",
    "end": "69760"
  },
  {
    "text": "store the result in a cache when you",
    "start": "69760",
    "end": "72720"
  },
  {
    "text": "access the data next time",
    "start": "72720",
    "end": "74720"
  },
  {
    "text": "you can access the data directly from",
    "start": "74720",
    "end": "77200"
  },
  {
    "text": "the cache",
    "start": "77200",
    "end": "79759"
  },
  {
    "text": "what i discussed before is only one use",
    "start": "79759",
    "end": "82799"
  },
  {
    "text": "case",
    "start": "82799",
    "end": "83759"
  },
  {
    "text": "there are many such use cases for",
    "start": "83759",
    "end": "86400"
  },
  {
    "text": "example",
    "start": "86400",
    "end": "87439"
  },
  {
    "text": "in gaming industry we use caching for",
    "start": "87439",
    "end": "90320"
  },
  {
    "text": "player leaderboards",
    "start": "90320",
    "end": "91600"
  },
  {
    "text": "and in machine learning we use caching",
    "start": "91600",
    "end": "94079"
  },
  {
    "text": "to store",
    "start": "94079",
    "end": "94720"
  },
  {
    "text": "pre-calculated models",
    "start": "94720",
    "end": "98079"
  },
  {
    "text": "at emerson we don't believe in one size",
    "start": "98799",
    "end": "101759"
  },
  {
    "text": "fits all databases",
    "start": "101759",
    "end": "103600"
  },
  {
    "text": "developers are now building highly",
    "start": "103600",
    "end": "106000"
  },
  {
    "text": "distributed applications",
    "start": "106000",
    "end": "107920"
  },
  {
    "text": "using multitude of purposely built",
    "start": "107920",
    "end": "110000"
  },
  {
    "text": "databases",
    "start": "110000",
    "end": "111280"
  },
  {
    "text": "developers are doing what they do best",
    "start": "111280",
    "end": "113439"
  },
  {
    "text": "breaking the complex",
    "start": "113439",
    "end": "114720"
  },
  {
    "text": "applications into small pieces and then",
    "start": "114720",
    "end": "117439"
  },
  {
    "text": "picking the best tool to solve each",
    "start": "117439",
    "end": "119680"
  },
  {
    "text": "problem",
    "start": "119680",
    "end": "120960"
  },
  {
    "text": "if you are looking for a fast low",
    "start": "120960",
    "end": "122880"
  },
  {
    "text": "latency in memory cache solution",
    "start": "122880",
    "end": "125200"
  },
  {
    "text": "for your dotnet application amazon",
    "start": "125200",
    "end": "127759"
  },
  {
    "text": "elastic cache is a great place to start",
    "start": "127759",
    "end": "130080"
  },
  {
    "text": "with",
    "start": "130080",
    "end": "132319"
  },
  {
    "text": "amazon elastic cache is a fully managed",
    "start": "132480",
    "end": "135599"
  },
  {
    "text": "highly available secure and reliable",
    "start": "135599",
    "end": "138560"
  },
  {
    "text": "lower latency in-memory caching solution",
    "start": "138560",
    "end": "141520"
  },
  {
    "text": "based out of time proven open source",
    "start": "141520",
    "end": "143360"
  },
  {
    "text": "technologies",
    "start": "143360",
    "end": "144720"
  },
  {
    "text": "it comes in two flavors memcached and",
    "start": "144720",
    "end": "147520"
  },
  {
    "text": "readys",
    "start": "147520",
    "end": "148560"
  },
  {
    "text": "in this session we will focus on amazon",
    "start": "148560",
    "end": "150959"
  },
  {
    "text": "elastic cache for reddish",
    "start": "150959",
    "end": "153360"
  },
  {
    "text": "let's now go for a demo and then learn",
    "start": "153360",
    "end": "156080"
  },
  {
    "text": "how to program for amazon elastic cache",
    "start": "156080",
    "end": "158160"
  },
  {
    "text": "for redis",
    "start": "158160",
    "end": "159120"
  },
  {
    "text": "using our favorite.net languages let's",
    "start": "159120",
    "end": "162160"
  },
  {
    "text": "go for elastic cache section of the aws",
    "start": "162160",
    "end": "164400"
  },
  {
    "text": "console",
    "start": "164400",
    "end": "166160"
  },
  {
    "text": "before we create a cluster let's first",
    "start": "166160",
    "end": "169040"
  },
  {
    "text": "create a subnet group",
    "start": "169040",
    "end": "172080"
  },
  {
    "text": "our cluster will be deployed into the",
    "start": "172080",
    "end": "174480"
  },
  {
    "text": "subnet group to the given availability",
    "start": "174480",
    "end": "176640"
  },
  {
    "text": "sounds",
    "start": "176640",
    "end": "178319"
  },
  {
    "text": "let's now create a radius cluster select",
    "start": "178319",
    "end": "181280"
  },
  {
    "text": "the cluster engine as redis",
    "start": "181280",
    "end": "183040"
  },
  {
    "text": "give it a name a description an engine",
    "start": "183040",
    "end": "186159"
  },
  {
    "text": "version",
    "start": "186159",
    "end": "186959"
  },
  {
    "text": "and the port number",
    "start": "186959",
    "end": "189920"
  },
  {
    "text": "in this case i'm going to select the",
    "start": "190080",
    "end": "191599"
  },
  {
    "text": "knob type as t3 medium because i don't",
    "start": "191599",
    "end": "194400"
  },
  {
    "text": "have a lot of data",
    "start": "194400",
    "end": "195840"
  },
  {
    "text": "number of replicas has two enable",
    "start": "195840",
    "end": "198159"
  },
  {
    "text": "multi-ac",
    "start": "198159",
    "end": "199200"
  },
  {
    "text": "subnet groups i'm going to select the",
    "start": "199200",
    "end": "200800"
  },
  {
    "text": "subnet group i created a moment ago",
    "start": "200800",
    "end": "204159"
  },
  {
    "text": "and for uh availability zones i'm going",
    "start": "204159",
    "end": "206400"
  },
  {
    "text": "to put my primary and the read replicas",
    "start": "206400",
    "end": "208640"
  },
  {
    "text": "in this given availability zones",
    "start": "208640",
    "end": "211200"
  },
  {
    "text": "you can import data from an s3 bucket",
    "start": "211200",
    "end": "213760"
  },
  {
    "text": "these are all radius features",
    "start": "213760",
    "end": "215440"
  },
  {
    "text": "you can enable backup view them as",
    "start": "215440",
    "end": "217440"
  },
  {
    "text": "default and let's create the cluster",
    "start": "217440",
    "end": "220239"
  },
  {
    "text": "it will take some time for the cluster",
    "start": "220239",
    "end": "221760"
  },
  {
    "text": "to come alive meanwhile let's go there",
    "start": "221760",
    "end": "224239"
  },
  {
    "text": "and then start programming",
    "start": "224239",
    "end": "226239"
  },
  {
    "text": "i'm in my visual studio i have added",
    "start": "226239",
    "end": "229599"
  },
  {
    "text": "a nougat library called stack exchange",
    "start": "229599",
    "end": "232080"
  },
  {
    "text": "readys",
    "start": "232080",
    "end": "233040"
  },
  {
    "text": "this is the same library the stacks",
    "start": "233040",
    "end": "235439"
  },
  {
    "text": "exchange",
    "start": "235439",
    "end": "236159"
  },
  {
    "text": "use in website like stack overflow",
    "start": "236159",
    "end": "239200"
  },
  {
    "text": "to read in their release clusters",
    "start": "239200",
    "end": "242959"
  },
  {
    "text": "amazon elastic cache for release use the",
    "start": "242959",
    "end": "245680"
  },
  {
    "text": "same protocol the open source redis",
    "start": "245680",
    "end": "247920"
  },
  {
    "text": "users",
    "start": "247920",
    "end": "248720"
  },
  {
    "text": "so you can use any of these already",
    "start": "248720",
    "end": "251439"
  },
  {
    "text": "available",
    "start": "251439",
    "end": "252319"
  },
  {
    "text": "libraries to read from amazon elastic",
    "start": "252319",
    "end": "255040"
  },
  {
    "text": "cache for release",
    "start": "255040",
    "end": "256720"
  },
  {
    "text": "i chose a stack exchange radius because",
    "start": "256720",
    "end": "259199"
  },
  {
    "text": "that's the most widely used one",
    "start": "259199",
    "end": "261199"
  },
  {
    "text": "and i have added that one into my nougat",
    "start": "261199",
    "end": "263680"
  },
  {
    "text": "packages",
    "start": "263680",
    "end": "264960"
  },
  {
    "text": "it also adds a few more dependency",
    "start": "264960",
    "end": "267840"
  },
  {
    "text": "libraries",
    "start": "267840",
    "end": "268560"
  },
  {
    "text": "i'll leave the messages back in my",
    "start": "268560",
    "end": "271440"
  },
  {
    "text": "program",
    "start": "271440",
    "end": "272560"
  },
  {
    "text": "i have defined two endpoints primary",
    "start": "272560",
    "end": "275040"
  },
  {
    "text": "endpoint and read endpoint",
    "start": "275040",
    "end": "277280"
  },
  {
    "text": "primary endpoints is the one that you",
    "start": "277280",
    "end": "278960"
  },
  {
    "text": "use to either read or write",
    "start": "278960",
    "end": "281360"
  },
  {
    "text": "read endpoints can only be used to read",
    "start": "281360",
    "end": "284240"
  },
  {
    "text": "you can find these endpoints in your",
    "start": "284240",
    "end": "285840"
  },
  {
    "text": "edits cluster",
    "start": "285840",
    "end": "287680"
  },
  {
    "text": "so these nodes are available you don't",
    "start": "287680",
    "end": "289840"
  },
  {
    "text": "directly connect into these nodes",
    "start": "289840",
    "end": "292160"
  },
  {
    "text": "instead you use uh the primary endpoint",
    "start": "292160",
    "end": "295199"
  },
  {
    "text": "and reading point given here",
    "start": "295199",
    "end": "297280"
  },
  {
    "text": "so primary endpoints for read and write",
    "start": "297280",
    "end": "299520"
  },
  {
    "text": "read end points for read operations",
    "start": "299520",
    "end": "301840"
  },
  {
    "text": "uh if you clearly know which endpoint to",
    "start": "301840",
    "end": "304479"
  },
  {
    "text": "use for writing use your primary",
    "start": "304479",
    "end": "305919"
  },
  {
    "text": "endpoint",
    "start": "305919",
    "end": "306800"
  },
  {
    "text": "uh you cannot write into read end points",
    "start": "306800",
    "end": "310560"
  },
  {
    "text": "back in my visual studio i have defined",
    "start": "310560",
    "end": "312960"
  },
  {
    "text": "my primary endpoint and my read endpoint",
    "start": "312960",
    "end": "316080"
  },
  {
    "text": "and then going to create a class called",
    "start": "316080",
    "end": "318400"
  },
  {
    "text": "connection multiplexer",
    "start": "318400",
    "end": "320479"
  },
  {
    "text": "and given these two endpoints you can",
    "start": "320479",
    "end": "323280"
  },
  {
    "text": "include any",
    "start": "323280",
    "end": "324000"
  },
  {
    "text": "number of radius endpoints or nodes here",
    "start": "324000",
    "end": "328320"
  },
  {
    "text": "but the proper way to do this one is to",
    "start": "328320",
    "end": "330080"
  },
  {
    "text": "only give the primary endpoint",
    "start": "330080",
    "end": "331759"
  },
  {
    "text": "and the read endpoint you only keep",
    "start": "331759",
    "end": "335280"
  },
  {
    "text": "a single return instance of this",
    "start": "335280",
    "end": "336880"
  },
  {
    "text": "connection multiplexer",
    "start": "336880",
    "end": "338479"
  },
  {
    "text": "it's although it's a disposable object",
    "start": "338479",
    "end": "340240"
  },
  {
    "text": "you are not going to disperse it every",
    "start": "340240",
    "end": "342080"
  },
  {
    "text": "now and then",
    "start": "342080",
    "end": "343039"
  },
  {
    "text": "but this is an example therefore i just",
    "start": "343039",
    "end": "344880"
  },
  {
    "text": "keep it",
    "start": "344880",
    "end": "347280"
  },
  {
    "text": "i also create a",
    "start": "347440",
    "end": "351039"
  },
  {
    "text": "database by calling redis get database",
    "start": "351039",
    "end": "354240"
  },
  {
    "text": "uh that will return a database which i",
    "start": "354240",
    "end": "356400"
  },
  {
    "text": "can later use to do some operations",
    "start": "356400",
    "end": "359199"
  },
  {
    "text": "and i use a db string set",
    "start": "359199",
    "end": "362400"
  },
  {
    "text": "uh to set a value called myvalue with",
    "start": "362400",
    "end": "364880"
  },
  {
    "text": "the key my key",
    "start": "364880",
    "end": "366000"
  },
  {
    "text": "and set the timeout as 600 seconds",
    "start": "366000",
    "end": "369759"
  },
  {
    "text": "and you can also define how to set this",
    "start": "369759",
    "end": "372080"
  },
  {
    "text": "object so",
    "start": "372080",
    "end": "373120"
  },
  {
    "text": "always is always make sure if there's no",
    "start": "373120",
    "end": "376479"
  },
  {
    "text": "object it will update it",
    "start": "376479",
    "end": "378240"
  },
  {
    "text": "if there is an object it will update it",
    "start": "378240",
    "end": "380560"
  },
  {
    "text": "uh",
    "start": "380560",
    "end": "381440"
  },
  {
    "text": "exist will set the value if only object",
    "start": "381440",
    "end": "383759"
  },
  {
    "text": "axis not texas means that you will only",
    "start": "383759",
    "end": "385680"
  },
  {
    "text": "update if there is no such object",
    "start": "385680",
    "end": "387280"
  },
  {
    "text": "uh the default value is always you can",
    "start": "387280",
    "end": "389120"
  },
  {
    "text": "leave it as it is",
    "start": "389120",
    "end": "390639"
  },
  {
    "text": "and also you can specify the command",
    "start": "390639",
    "end": "392720"
  },
  {
    "text": "flag which specify",
    "start": "392720",
    "end": "394560"
  },
  {
    "text": "which node you prefer of course this is",
    "start": "394560",
    "end": "397280"
  },
  {
    "text": "a write operations because i'm going to",
    "start": "397280",
    "end": "399440"
  },
  {
    "text": "set the string so in this case i want to",
    "start": "399440",
    "end": "401280"
  },
  {
    "text": "have the master as",
    "start": "401280",
    "end": "402960"
  },
  {
    "text": "my preferred node",
    "start": "402960",
    "end": "406319"
  },
  {
    "text": "this is not a mandatory one you can",
    "start": "406319",
    "end": "408160"
  },
  {
    "text": "ignore it and the db's",
    "start": "408160",
    "end": "410160"
  },
  {
    "text": "say string will automatically identify",
    "start": "410160",
    "end": "411759"
  },
  {
    "text": "it but in this case i'm specifying mast",
    "start": "411759",
    "end": "413919"
  },
  {
    "text": "as my node",
    "start": "413919",
    "end": "415120"
  },
  {
    "text": "so when i run it i set the string and i",
    "start": "415120",
    "end": "417360"
  },
  {
    "text": "can now read the value",
    "start": "417360",
    "end": "418479"
  },
  {
    "text": "if you read the value you can see the",
    "start": "418479",
    "end": "419759"
  },
  {
    "text": "value is now my value",
    "start": "419759",
    "end": "422319"
  },
  {
    "text": "if you use the wrong command flag so",
    "start": "422319",
    "end": "425280"
  },
  {
    "text": "let's say",
    "start": "425280",
    "end": "426319"
  },
  {
    "text": "in this re write operation i use a",
    "start": "426319",
    "end": "429919"
  },
  {
    "text": "demand replica which is for read only",
    "start": "429919",
    "end": "433039"
  },
  {
    "text": "operations",
    "start": "433039",
    "end": "433840"
  },
  {
    "text": "it will throw an exception",
    "start": "433840",
    "end": "437120"
  },
  {
    "text": "so here if i continue it will throw an",
    "start": "437120",
    "end": "439360"
  },
  {
    "text": "exception",
    "start": "439360",
    "end": "440880"
  },
  {
    "text": "so ideally you don't need to specify the",
    "start": "440880",
    "end": "443759"
  },
  {
    "text": "command flag",
    "start": "443759",
    "end": "444639"
  },
  {
    "text": "you can let the connection multiplexer",
    "start": "444639",
    "end": "446960"
  },
  {
    "text": "to manage it",
    "start": "446960",
    "end": "448560"
  },
  {
    "text": "so in this case i'm just going to set",
    "start": "448560",
    "end": "451280"
  },
  {
    "text": "the key and the value",
    "start": "451280",
    "end": "452479"
  },
  {
    "text": "along with how long i want to keep this",
    "start": "452479",
    "end": "454479"
  },
  {
    "text": "object",
    "start": "454479",
    "end": "455680"
  },
  {
    "text": "and in this case i can easily write it",
    "start": "455680",
    "end": "458080"
  },
  {
    "text": "and i",
    "start": "458080",
    "end": "458800"
  },
  {
    "text": "when i read the value i get the correct",
    "start": "458800",
    "end": "461520"
  },
  {
    "text": "value that i say",
    "start": "461520",
    "end": "462800"
  },
  {
    "text": "radius provides complex data operation",
    "start": "462800",
    "end": "465759"
  },
  {
    "text": "that includes",
    "start": "465759",
    "end": "466960"
  },
  {
    "text": "publisher and subscriber model where the",
    "start": "466960",
    "end": "469280"
  },
  {
    "text": "publisher published to a given channel",
    "start": "469280",
    "end": "471360"
  },
  {
    "text": "and the sub",
    "start": "471360",
    "end": "471919"
  },
  {
    "text": "all the subscribers can listen to that",
    "start": "471919",
    "end": "474479"
  },
  {
    "text": "and get that message",
    "start": "474479",
    "end": "476160"
  },
  {
    "text": "i created two console applications one",
    "start": "476160",
    "end": "478960"
  },
  {
    "text": "is called my release publisher the other",
    "start": "478960",
    "end": "480720"
  },
  {
    "text": "one is called my",
    "start": "480720",
    "end": "481759"
  },
  {
    "text": "uh produce subscriber so in the",
    "start": "481759",
    "end": "484000"
  },
  {
    "text": "publisher",
    "start": "484000",
    "end": "484960"
  },
  {
    "text": "creation of the connection multiplexer",
    "start": "484960",
    "end": "486800"
  },
  {
    "text": "is same as before",
    "start": "486800",
    "end": "488400"
  },
  {
    "text": "i get this interface called i subscriber",
    "start": "488400",
    "end": "490960"
  },
  {
    "text": "and then publish a message called hello",
    "start": "490960",
    "end": "493599"
  },
  {
    "text": "to a channel called messages",
    "start": "493599",
    "end": "497440"
  },
  {
    "text": "i have a subscriber called myself",
    "start": "497520",
    "end": "499680"
  },
  {
    "text": "already subscriber",
    "start": "499680",
    "end": "500879"
  },
  {
    "text": "connection multiplexing is same as",
    "start": "500879",
    "end": "502800"
  },
  {
    "text": "before",
    "start": "502800",
    "end": "504160"
  },
  {
    "text": "i get a name for subscriber and i then",
    "start": "504160",
    "end": "507120"
  },
  {
    "text": "listen on the channel messages and",
    "start": "507120",
    "end": "509440"
  },
  {
    "text": "whenever a message arrives i print it",
    "start": "509440",
    "end": "511520"
  },
  {
    "text": "into the console along with the",
    "start": "511520",
    "end": "512959"
  },
  {
    "text": "subscriber name",
    "start": "512959",
    "end": "515039"
  },
  {
    "text": "i also have a read line to make sure",
    "start": "515039",
    "end": "517120"
  },
  {
    "text": "that the program won't terminate let's",
    "start": "517120",
    "end": "520240"
  },
  {
    "text": "start a few instances of subscriber",
    "start": "520240",
    "end": "523360"
  },
  {
    "text": "for the first one let's call sub 1",
    "start": "523360",
    "end": "526560"
  },
  {
    "text": "and let's start another instance called",
    "start": "526560",
    "end": "529040"
  },
  {
    "text": "sub",
    "start": "529040",
    "end": "529600"
  },
  {
    "text": "2 and let's start the third one called",
    "start": "529600",
    "end": "532800"
  },
  {
    "text": "sub sub3",
    "start": "532800",
    "end": "533600"
  },
  {
    "text": "so these are all subscribers now",
    "start": "533600",
    "end": "535440"
  },
  {
    "text": "listening to",
    "start": "535440",
    "end": "536720"
  },
  {
    "text": "the channel call messages and let's now",
    "start": "536720",
    "end": "541120"
  },
  {
    "text": "run the publisher which will write",
    "start": "541120",
    "end": "544720"
  },
  {
    "text": "a message called hello you can see that",
    "start": "544720",
    "end": "546880"
  },
  {
    "text": "all the subscribers receive that message",
    "start": "546880",
    "end": "548480"
  },
  {
    "text": "when you run it again",
    "start": "548480",
    "end": "550080"
  },
  {
    "text": "they got that message almost in real",
    "start": "550080",
    "end": "553220"
  },
  {
    "text": "[Music]",
    "start": "553220",
    "end": "557000"
  },
  {
    "text": "time",
    "start": "557000",
    "end": "560000"
  }
]