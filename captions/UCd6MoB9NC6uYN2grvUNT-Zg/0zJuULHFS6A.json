[
  {
    "start": "0",
    "end": "80000"
  },
  {
    "text": "okay good afternoon everyone welcome to this session and i hope you are having a great time at reinvent",
    "start": "1280",
    "end": "9360"
  },
  {
    "text": "few years back i attended a training it was called take back your life",
    "start": "9360",
    "end": "16480"
  },
  {
    "text": "and it was about effectively managing your emails the trainer told us about three d's",
    "start": "16480",
    "end": "24240"
  },
  {
    "text": "he said if you want to manage your emails you should either delete it or do it",
    "start": "24240",
    "end": "32000"
  },
  {
    "text": "or delegate it and that's when i realized that delegation is your great",
    "start": "32000",
    "end": "38640"
  },
  {
    "text": "friend so over the course of next 45 minutes i would like to take you on a journey of",
    "start": "38640",
    "end": "45600"
  },
  {
    "text": "how you can delegate access to your aws environment and take your life back",
    "start": "45600",
    "end": "52160"
  },
  {
    "text": "i also have another session session sec 304 in the same room at 4 30 where i will",
    "start": "52160",
    "end": "59520"
  },
  {
    "text": "cover how you can bring your own identities by federating access to",
    "start": "59520",
    "end": "64720"
  },
  {
    "text": "your aws environment my name is shone shaha and i'm a product manager on the",
    "start": "64720",
    "end": "70720"
  },
  {
    "text": "identity and access management team i have been with aws for three years now",
    "start": "70720",
    "end": "75920"
  },
  {
    "text": "and before this i was with microsoft for 10 years",
    "start": "75920",
    "end": "81520"
  },
  {
    "start": "80000",
    "end": "125000"
  },
  {
    "text": "so let's take a quick look at the agenda we'll start with couple quick definitions next",
    "start": "81520",
    "end": "88240"
  },
  {
    "text": "we look at the main delegation scenarios then we'll cover some delegation",
    "start": "88240",
    "end": "94960"
  },
  {
    "text": "fundamentals and finally we'll look at the scenarios in",
    "start": "94960",
    "end": "100079"
  },
  {
    "text": "action using demos quite a few demos i hope at the end of this session you",
    "start": "100079",
    "end": "107119"
  },
  {
    "text": "would walk away with a solid understanding of how you can securely delegate access",
    "start": "107119",
    "end": "112880"
  },
  {
    "text": "to your aws environment we do have five demos to cover so i request you to hold on to your",
    "start": "112880",
    "end": "119280"
  },
  {
    "text": "questions till the end of the session i am available after the session and during the rest of the conference",
    "start": "119280",
    "end": "125840"
  },
  {
    "start": "125000",
    "end": "195000"
  },
  {
    "text": "so let's get started when i say delegation what i mean is you are providing users",
    "start": "125840",
    "end": "132959"
  },
  {
    "text": "in other aws accounts access to resources in your account",
    "start": "132959",
    "end": "138000"
  },
  {
    "text": "federation on the other hand means that you are providing users in other identity stores access to resources in",
    "start": "138000",
    "end": "145840"
  },
  {
    "text": "your account and it took me some time to tease apart these two definitions and these identity stores",
    "start": "145840",
    "end": "154560"
  },
  {
    "text": "can be corporate identity stores like active directory or ldap or these can be even social identity",
    "start": "154560",
    "end": "161680"
  },
  {
    "text": "stores facebook google or amazon as i mentioned earlier we will focus on delegation for this",
    "start": "161680",
    "end": "168879"
  },
  {
    "text": "session and cover federation in the 430 session let's look at scenarios we look at three",
    "start": "168879",
    "end": "175440"
  },
  {
    "text": "scenarios and the first one is the most basic form of delegation you own an aws account",
    "start": "175440",
    "end": "181920"
  },
  {
    "text": "and you want to delegate access to someone on your own team the next one is delegating across",
    "start": "181920",
    "end": "190159"
  },
  {
    "text": "account and this can be an account that is within your company",
    "start": "190159",
    "end": "195760"
  },
  {
    "start": "195000",
    "end": "240000"
  },
  {
    "text": "or it can be outside your company and typically this will be one of our",
    "start": "195760",
    "end": "201280"
  },
  {
    "text": "aws partners as you might already know we have a very rich partner ecosystem",
    "start": "201280",
    "end": "207200"
  },
  {
    "text": "we have more than 7000 sis and more than 3000 isvs in our apn",
    "start": "207200",
    "end": "213760"
  },
  {
    "text": "or aws partner network the third scenario would be about delegating access to aws",
    "start": "213760",
    "end": "221360"
  },
  {
    "text": "and this can be an aws service like amazon elastic transcoder or aws data pipeline that wants to act",
    "start": "221360",
    "end": "229599"
  },
  {
    "text": "on your behalf and finally we'll look at the special case of",
    "start": "229599",
    "end": "235760"
  },
  {
    "text": "delegating access to amazon ec2 service and why it is magical",
    "start": "235760",
    "end": "241680"
  },
  {
    "start": "240000",
    "end": "254000"
  },
  {
    "text": "so before we dive into the demos let's cover some fundamentals we look at two fundamentals rules and",
    "start": "241680",
    "end": "247519"
  },
  {
    "text": "sessions if you understand these two fundamentals then understanding delegation in im is quite easy so let's start with",
    "start": "247519",
    "end": "256000"
  },
  {
    "text": "rows rules in aws mean nothing but a set of permissions that",
    "start": "256000",
    "end": "263040"
  },
  {
    "text": "are granted to a trusted entity this entity can be another aws account or another identity",
    "start": "263040",
    "end": "270560"
  },
  {
    "text": "provider roles have these two nice properties security and control when you use roles there is",
    "start": "270560",
    "end": "278400"
  },
  {
    "text": "no secret sharing involved and you can easily revoke access by",
    "start": "278400",
    "end": "283759"
  },
  {
    "text": "changing the permissions on the roles so let's look at what are the permissions or policies that you can set",
    "start": "283759",
    "end": "290639"
  },
  {
    "text": "on the roles there are two again the first one is what we call it as a trust policy and trust policy",
    "start": "290639",
    "end": "297919"
  },
  {
    "text": "defines what are the trusted entities by this role so if you look at the sample policy",
    "start": "297919",
    "end": "304479"
  },
  {
    "text": "there what it says is that this role is going to allow access to any user in account one one",
    "start": "304479",
    "end": "311600"
  },
  {
    "text": "one one other type of policy you can set on the role is called",
    "start": "311600",
    "end": "317520"
  },
  {
    "start": "313000",
    "end": "342000"
  },
  {
    "text": "access policy and these are the permissions that are granted to anyone that assumes this role",
    "start": "317520",
    "end": "326479"
  },
  {
    "text": "now the json snippets that you see on this slide are the act the policies that you set within im console",
    "start": "326479",
    "end": "333360"
  },
  {
    "text": "i'm not going to go into the details of it because we have a session dedicated for that tomorrow it's called mastering access",
    "start": "333360",
    "end": "339840"
  },
  {
    "text": "control policies so if you use roles you get back",
    "start": "339840",
    "end": "345199"
  },
  {
    "start": "342000",
    "end": "496000"
  },
  {
    "text": "sessions aws sessions and the sessions allow you to grant temporary access to",
    "start": "345199",
    "end": "351840"
  },
  {
    "text": "your aws account temporary being the keyword it's not like long-term access",
    "start": "351840",
    "end": "357440"
  },
  {
    "text": "and these sessions are generated by a service that we call as uh sts or security token service",
    "start": "357440",
    "end": "364400"
  },
  {
    "text": "and you can obtain these by calling assume role api and assume role api is the basis on",
    "start": "364400",
    "end": "371039"
  },
  {
    "text": "which this cross account access works in im so we'll look at it in detail",
    "start": "371039",
    "end": "377120"
  },
  {
    "text": "so let's look inside the session a session has four elements access key id secret access key session",
    "start": "377120",
    "end": "384160"
  },
  {
    "text": "token and expiration access key id and secret access key is the symmetric credential in plain",
    "start": "384160",
    "end": "391680"
  },
  {
    "text": "english it's just a shared secret between aws and u and i have seen some confusion around",
    "start": "391680",
    "end": "398240"
  },
  {
    "text": "this among the customers so let me take a moment to talk about this as people often confuse this with the",
    "start": "398240",
    "end": "405280"
  },
  {
    "text": "ec2 key pair ec2 key pair that you use when you launch an instance is an asymmetric credential meaning",
    "start": "405280",
    "end": "413120"
  },
  {
    "text": "there is a public key part and private key part and you keep private key only with you",
    "start": "413120",
    "end": "418160"
  },
  {
    "text": "and public key is available to anyone there is no secret sharing involved there so just uh",
    "start": "418160",
    "end": "424000"
  },
  {
    "text": "just something to keep in mind session token is just a blob of data that you pass",
    "start": "424000",
    "end": "431039"
  },
  {
    "text": "when you make an aws api request it lets us verify whether the session is",
    "start": "431039",
    "end": "437280"
  },
  {
    "text": "valid or not and how do we determine whether it is valid or not by looking at the expiration",
    "start": "437280",
    "end": "443360"
  },
  {
    "text": "and expiration is what makes the sessions temporary we have two types of credentials",
    "start": "443360",
    "end": "450000"
  },
  {
    "text": "in iim long-term credentials or short-term credentials or sometimes",
    "start": "450000",
    "end": "455039"
  },
  {
    "text": "those are called temporary security credential when you create a im user in aws",
    "start": "455039",
    "end": "461520"
  },
  {
    "text": "and assign credentials access key and secret access key those are long term meaning until you",
    "start": "461520",
    "end": "467440"
  },
  {
    "text": "revoke those credentials or until you delete that user those are going to be valid",
    "start": "467440",
    "end": "473199"
  },
  {
    "text": "however when you make assume role api call and get back the sessions those are temporary and",
    "start": "473199",
    "end": "481120"
  },
  {
    "text": "how temporary are they so for the assume role api by default the session is going to be",
    "start": "481520",
    "end": "487039"
  },
  {
    "text": "valid for one hour but you can change it so that it can be valid only for 15 minutes",
    "start": "487039",
    "end": "493680"
  },
  {
    "text": "the max is also one hour enough with the scenarios and",
    "start": "493680",
    "end": "499120"
  },
  {
    "start": "496000",
    "end": "509000"
  },
  {
    "text": "fundamentals now let's look at the demos so the first scenario",
    "start": "499120",
    "end": "505039"
  },
  {
    "text": "that we look at is delegation within account so you have an",
    "start": "505039",
    "end": "510479"
  },
  {
    "start": "509000",
    "end": "604000"
  },
  {
    "text": "account you have some resources ec2 instances dynamodb tables emr clusters what have you you create an im user",
    "start": "510479",
    "end": "519680"
  },
  {
    "text": "and then you grant permissions to that user if you're here for android stock",
    "start": "519680",
    "end": "525839"
  },
  {
    "text": "by default when you create an user the user gets zero for permissions you have to explicitly assign",
    "start": "525839",
    "end": "531600"
  },
  {
    "text": "permissions for the user to do something then you can set credentials on that",
    "start": "531600",
    "end": "537040"
  },
  {
    "text": "user you can set username and password which is used for the console access",
    "start": "537040",
    "end": "542399"
  },
  {
    "text": "or the access keys which are used for the api access",
    "start": "542399",
    "end": "547600"
  },
  {
    "text": "and if the user has privileged actions like if the user is allowed to create",
    "start": "547600",
    "end": "554000"
  },
  {
    "text": "other im users or delete ec2 instances then we highly recommend that you assign mfa or multi-factor",
    "start": "554000",
    "end": "561040"
  },
  {
    "text": "authentication device to the user we support both hardware and",
    "start": "561040",
    "end": "566080"
  },
  {
    "text": "virtual mfas and for hardware we have two form factors we have a gmalto key fob",
    "start": "566080",
    "end": "572320"
  },
  {
    "text": "or recently we also uh started supporting the key the credit",
    "start": "572320",
    "end": "578640"
  },
  {
    "text": "card form factor so you can easily carry it in your wallet and for the the virtual mfa you can just",
    "start": "578640",
    "end": "586800"
  },
  {
    "text": "use your smartphone and any totp client time-based one-time",
    "start": "586800",
    "end": "592000"
  },
  {
    "text": "password client and then that becomes your position factor so it is a two-factor",
    "start": "592000",
    "end": "598399"
  },
  {
    "text": "authentication username and password is your knowledge factor and this becomes your position factor",
    "start": "598399",
    "end": "605680"
  },
  {
    "start": "604000",
    "end": "758000"
  },
  {
    "text": "so let us look at a demo in action",
    "start": "605680",
    "end": "610480"
  },
  {
    "text": "so i am going to start with im console i am going to go to the user section",
    "start": "614320",
    "end": "620720"
  },
  {
    "text": "and create a user let's say test i don't want this user to make any api",
    "start": "620720",
    "end": "627519"
  },
  {
    "text": "call so i'm not going to assign any access keys and create that's it let's look at the",
    "start": "627519",
    "end": "634880"
  },
  {
    "text": "user you can add the user to groups group is",
    "start": "634880",
    "end": "642320"
  },
  {
    "text": "just a collection of users and then you can attach policies to the user and we do have",
    "start": "642320",
    "end": "650240"
  },
  {
    "text": "a bunch of pre-built templates that you can use for various services for read-only access for user access",
    "start": "650240",
    "end": "657839"
  },
  {
    "text": "or you can also use a policy generator so if you know exactly the service and",
    "start": "657839",
    "end": "663279"
  },
  {
    "text": "the action that you want the user to do then you can choose a service let's say",
    "start": "663279",
    "end": "669440"
  },
  {
    "text": "aws directory service all actions and then all resources add a statement",
    "start": "669440",
    "end": "677440"
  },
  {
    "text": "and done so it automatically generates the json policy for you",
    "start": "677440",
    "end": "684000"
  },
  {
    "text": "and this is a section where you can manage all the credentials for the user",
    "start": "685120",
    "end": "690160"
  },
  {
    "text": "you have access keys then sign in credentials which is username and password you can assign mfa device we do have",
    "start": "690160",
    "end": "697279"
  },
  {
    "text": "some services that support the signing certificates so nothing groundbreaking nothing new",
    "start": "697279",
    "end": "702880"
  },
  {
    "text": "this is just a warm-up demo but i do want to call out couple things that we added recently",
    "start": "702880",
    "end": "708959"
  },
  {
    "text": "you see the password last use field that is something we made available recently so if you own",
    "start": "708959",
    "end": "714880"
  },
  {
    "text": "the account and then if you delegate access to your team members now you can see when was the last time the user",
    "start": "714880",
    "end": "722079"
  },
  {
    "text": "signed into the console if it is not used then it's a good indicator that you might want to",
    "start": "722079",
    "end": "727760"
  },
  {
    "text": "disable or delete the account we also",
    "start": "727760",
    "end": "732399"
  },
  {
    "text": "added support for credentials report so this is a report when you download the report you just get a csv files about all the",
    "start": "732959",
    "end": "739920"
  },
  {
    "text": "im users their various credentials and then the status of those credentials whether there is mfa or not whether the",
    "start": "739920",
    "end": "746320"
  },
  {
    "text": "access key whether there is an access key or not and so forth",
    "start": "746320",
    "end": "758560"
  },
  {
    "start": "758000",
    "end": "890000"
  },
  {
    "text": "so let us look at the second scenario which is across account",
    "start": "758560",
    "end": "764399"
  },
  {
    "text": "now it will get slightly more interesting so this is you have an account and you have another",
    "start": "764399",
    "end": "770160"
  },
  {
    "text": "team within your own company and you want to delegate access to someone in that team here you start with",
    "start": "770160",
    "end": "777279"
  },
  {
    "text": "creating a role in your account and as i mentioned role is nothing but a set of permissions",
    "start": "777279",
    "end": "782639"
  },
  {
    "text": "granted to a trusted entity then you trust another account this will be your",
    "start": "782639",
    "end": "788880"
  },
  {
    "text": "another team's account your grant permissions and the other accounts administrator needs",
    "start": "788880",
    "end": "796399"
  },
  {
    "text": "to create an im user in that account so that the user can assume the role",
    "start": "796399",
    "end": "802079"
  },
  {
    "text": "and once the user assumes the role now the user gets these temporary credentials",
    "start": "802079",
    "end": "807200"
  },
  {
    "text": "to access resources in your account of course if you are going to assign",
    "start": "807200",
    "end": "813920"
  },
  {
    "text": "some privileged actions to someone else we highly recommend that you protect the",
    "start": "813920",
    "end": "819120"
  },
  {
    "text": "role assumption using multi-factor authentication device so let's look at the demo flow before we",
    "start": "819120",
    "end": "825680"
  },
  {
    "text": "dive into the demo i have my aws account that i use and i also",
    "start": "825680",
    "end": "831360"
  },
  {
    "text": "we also have our product management teams aws account what i want to do is i want someone in",
    "start": "831360",
    "end": "837920"
  },
  {
    "text": "the the teams account to access my account so what i've done is that i have",
    "start": "837920",
    "end": "843360"
  },
  {
    "text": "created across a control in my account that trusts the team account and it grants some ec2",
    "start": "843360",
    "end": "850079"
  },
  {
    "text": "permissions and some iam permissions no other permissions",
    "start": "850079",
    "end": "855279"
  },
  {
    "text": "on the pm team's account there is an im user with permissions to assume this role in my account",
    "start": "855279",
    "end": "861360"
  },
  {
    "text": "to make things more interesting i have a python script which does following first it uses the demo user's",
    "start": "861360",
    "end": "868000"
  },
  {
    "text": "credentials to authenticate and assume a role in my account in written it gets back the temporary",
    "start": "868000",
    "end": "874800"
  },
  {
    "text": "security credentials using those credentials it generates a console url",
    "start": "874800",
    "end": "881279"
  },
  {
    "text": "and then the user gets redirected to the console url using this that user can now access",
    "start": "881279",
    "end": "888480"
  },
  {
    "text": "resources in my account so let's see this in action now",
    "start": "888480",
    "end": "899839"
  },
  {
    "start": "890000",
    "end": "1104000"
  },
  {
    "text": "i'm going to start in the im console in the role section and",
    "start": "900560",
    "end": "907839"
  },
  {
    "text": "let's look at the cross account sign in role my account number ends with 6238 just a",
    "start": "907839",
    "end": "915360"
  },
  {
    "text": "note and the rule in my account you can see from the trust policy trust",
    "start": "915360",
    "end": "923120"
  },
  {
    "text": "that the pm team account and if you look at the access policy",
    "start": "923120",
    "end": "930480"
  },
  {
    "text": "it says all ec2 actions allow and only read only im permissions on all",
    "start": "930480",
    "end": "938399"
  },
  {
    "text": "the resources no other permissions now let's take a look at the pm teams account",
    "start": "938399",
    "end": "944880"
  },
  {
    "text": "so you can see it from the sign in link this is the pm teams account i'm going to go to the user section and",
    "start": "944880",
    "end": "952240"
  },
  {
    "text": "look at the demo user so if i look at the user and then the",
    "start": "952240",
    "end": "958399"
  },
  {
    "text": "access policy on that user that user is allowed to assume a role in my account by the",
    "start": "958399",
    "end": "965120"
  },
  {
    "text": "way only one role so this user cannot assume any other role",
    "start": "965120",
    "end": "971440"
  },
  {
    "text": "now let's take a quick look at the python script the script is available",
    "start": "971440",
    "end": "976560"
  },
  {
    "text": "on aws security blog post so you can download it and customize it",
    "start": "976560",
    "end": "981839"
  },
  {
    "text": "as you wish so the first step is very simple just ask for the account id and then the role",
    "start": "981839",
    "end": "987120"
  },
  {
    "text": "name so that you can construct role on or amazon resource name",
    "start": "987120",
    "end": "992240"
  },
  {
    "text": "the second step is to connect to sds and actually call the assumer role and by",
    "start": "992240",
    "end": "999279"
  },
  {
    "text": "the way this script will use the demo user's im credentials those will be stored in the environment",
    "start": "999279",
    "end": "1004320"
  },
  {
    "text": "variable where i run the script so the third step is after assuming the",
    "start": "1004320",
    "end": "1012079"
  },
  {
    "text": "role it gets back the temporary credentials and then it get it uses those credentials to get",
    "start": "1012079",
    "end": "1017680"
  },
  {
    "text": "what is called as a sign-in token and that sign-in token",
    "start": "1017680",
    "end": "1023040"
  },
  {
    "text": "can be used to create a console url and that console url gives access to the",
    "start": "1023040",
    "end": "1030160"
  },
  {
    "text": "to my account and then the final step it just to redirect the user to that",
    "start": "1030160",
    "end": "1035280"
  },
  {
    "text": "console so let's see this in action now",
    "start": "1035280",
    "end": "1040319"
  },
  {
    "text": "first the usage the account id and role name so this is my account id ending with",
    "start": "1040880",
    "end": "1048000"
  },
  {
    "text": "6238 and then the role name that we looked at so now it's going to assume the role",
    "start": "1048000",
    "end": "1053679"
  },
  {
    "text": "it assumes the role is it assumed the role and got back the credentials then it's you going to use those",
    "start": "1053679",
    "end": "1059919"
  },
  {
    "text": "credentials to get back the sign-in token then construct the console url and",
    "start": "1059919",
    "end": "1065760"
  },
  {
    "text": "redirect the user to that url so as you you can see now it is using the cross account sign in",
    "start": "1065760",
    "end": "1072240"
  },
  {
    "text": "role from my account and if i go to a service",
    "start": "1072240",
    "end": "1077520"
  },
  {
    "text": "let's say i am it works and it is showing my account if",
    "start": "1077520",
    "end": "1084559"
  },
  {
    "text": "i go to a service that's a simple email service it's going to get not authorized error this is",
    "start": "1084559",
    "end": "1090320"
  },
  {
    "text": "expected because remember on the cross account sign-in role the the permissions allowed were only i am",
    "start": "1090320",
    "end": "1097120"
  },
  {
    "text": "read-only and easy easy to all okay",
    "start": "1097120",
    "end": "1104320"
  },
  {
    "start": "1104000",
    "end": "1146000"
  },
  {
    "text": "let's get back to the slides now so now this is the second use case for",
    "start": "1105440",
    "end": "1111919"
  },
  {
    "text": "the the second scenario delegation across account so",
    "start": "1111919",
    "end": "1118640"
  },
  {
    "text": "i have an account and i want a partner to access my account because i am using the",
    "start": "1118640",
    "end": "1123679"
  },
  {
    "text": "partners offering the way to do that is creating a role in your account",
    "start": "1123679",
    "end": "1130160"
  },
  {
    "text": "trusting the partners account granting permissions and using something called as external",
    "start": "1130160",
    "end": "1137039"
  },
  {
    "text": "id and i will get to it in a minute then rest is same the imuser in the partners account",
    "start": "1137039",
    "end": "1143760"
  },
  {
    "text": "assumes the roles and accesses your account so let's look at what's external id",
    "start": "1143760",
    "end": "1149679"
  },
  {
    "start": "1146000",
    "end": "1219000"
  },
  {
    "text": "external id is a piece of data that must be unique per customer of the partner and it must be provided",
    "start": "1149679",
    "end": "1157120"
  },
  {
    "text": "by the partner and where it gets used is that remember we talked about the trust policy on the",
    "start": "1157120",
    "end": "1163600"
  },
  {
    "text": "role in the trust policy you add a condition which includes this external id",
    "start": "1163600",
    "end": "1169120"
  },
  {
    "text": "so if you look at the policy it says the trusted principle is the example corp which is like a",
    "start": "1169120",
    "end": "1175440"
  },
  {
    "text": "partner account id and the condition says that external id must match",
    "start": "1175440",
    "end": "1181039"
  },
  {
    "text": "whatever the id the partner has issued to me so why is this important or why is this",
    "start": "1181039",
    "end": "1186640"
  },
  {
    "text": "even needed why should you go through the hopes of setting this up it prevents prevents something called as",
    "start": "1186640",
    "end": "1193360"
  },
  {
    "text": "a confused deputy problem how many of you are aware of confused deputy",
    "start": "1193360",
    "end": "1198559"
  },
  {
    "text": "only couple hands no worries i was not aware of it until a few months back so",
    "start": "1198559",
    "end": "1205360"
  },
  {
    "text": "essentially what it does is that if someone just knows the name of the role in your account that",
    "start": "1205360",
    "end": "1213200"
  },
  {
    "text": "person cannot make the partner assume the role in your account just by the knowledge of the role name",
    "start": "1213200",
    "end": "1220080"
  },
  {
    "start": "1219000",
    "end": "1599000"
  },
  {
    "text": "let's see this in detail let's say there is a partner that has two customers customer a and",
    "start": "1220080",
    "end": "1227200"
  },
  {
    "text": "customer b both of these customers have created roles in their account both of these",
    "start": "1227200",
    "end": "1232320"
  },
  {
    "text": "roles trust the partners account since the role names are not unique or not secret",
    "start": "1232320",
    "end": "1239440"
  },
  {
    "text": "there is nothing preventing customer a going to the partner software and say like use role b which is",
    "start": "1239440",
    "end": "1246559"
  },
  {
    "text": "actually in the customer b's account and since role b trusts partners account",
    "start": "1246559",
    "end": "1252720"
  },
  {
    "text": "now the im user in the partners account can actually assume the role and enumerate the resources in",
    "start": "1252720",
    "end": "1258799"
  },
  {
    "text": "customer's biz account which means though that information might be disclosed to customer a",
    "start": "1258799",
    "end": "1265600"
  },
  {
    "text": "definitely something that you don't want to happen right in this case partners aws account is the",
    "start": "1265600",
    "end": "1271600"
  },
  {
    "text": "confused deputy it is very easy to confuse that that account",
    "start": "1271600",
    "end": "1276720"
  },
  {
    "text": "and you can prevent that by doing this simple thing every customer when they set the rules",
    "start": "1276720",
    "end": "1283760"
  },
  {
    "text": "trust policy at the condition saying that i'm going to allow the partner to assume this role",
    "start": "1283760",
    "end": "1290080"
  },
  {
    "text": "only if they send me the external id as part of the assume roll call",
    "start": "1290080",
    "end": "1296240"
  },
  {
    "text": "customer a does it customer b does it okay on the partner side when the im user",
    "start": "1296240",
    "end": "1302400"
  },
  {
    "text": "assumes the role it passes the customer specific id that it has vended earlier",
    "start": "1302400",
    "end": "1307760"
  },
  {
    "text": "okay so far with me now see the same flow customer a asks",
    "start": "1307760",
    "end": "1314080"
  },
  {
    "text": "partners software to use role b the imuser in the partner account tries",
    "start": "1314080",
    "end": "1321360"
  },
  {
    "text": "second step which doesn't work now because partner sends the external id for",
    "start": "1321360",
    "end": "1329120"
  },
  {
    "text": "role a because customer a is what made the request but on role b's trust policy",
    "start": "1329120",
    "end": "1336960"
  },
  {
    "text": "the external id is different it is external id for customer b so the role assumption is not going to work and hence",
    "start": "1336960",
    "end": "1343440"
  },
  {
    "text": "like there is no information disclosure or even actions taken on some other",
    "start": "1343440",
    "end": "1349760"
  },
  {
    "text": "customers account make sense okay good let's see this in",
    "start": "1349760",
    "end": "1355039"
  },
  {
    "text": "action now i have my account i have created a role and i'm going to use one of our partner",
    "start": "1355039",
    "end": "1361360"
  },
  {
    "text": "offerings trend micro is has this offering called deep security for web apps",
    "start": "1361360",
    "end": "1367600"
  },
  {
    "text": "it provides security scanning for the web applications running on aws",
    "start": "1367600",
    "end": "1373440"
  },
  {
    "text": "now i want to use trend micro but i'm not going to share my access key id and secret access key",
    "start": "1373440",
    "end": "1379600"
  },
  {
    "text": "with them neither should you for any partner for that matter",
    "start": "1379600",
    "end": "1384880"
  },
  {
    "text": "so i created a role and trusted the trend micro account gave it some",
    "start": "1384880",
    "end": "1390320"
  },
  {
    "text": "permissions im user in train micro account is going to authenticate and assume the role get",
    "start": "1390320",
    "end": "1397600"
  },
  {
    "text": "back the temporary security credentials and then use those to access the account by this",
    "start": "1397600",
    "end": "1403200"
  },
  {
    "text": "time i think you have seen the pattern so let us see this in action",
    "start": "1403200",
    "end": "1408639"
  },
  {
    "text": "i'm going to start with the im console in the role",
    "start": "1415440",
    "end": "1421520"
  },
  {
    "text": "section i have the trend micro role that i have created let's look at the trust policy oops",
    "start": "1422640",
    "end": "1429200"
  },
  {
    "text": "sorry it is trusting the trend micro aws",
    "start": "1429200",
    "end": "1435120"
  },
  {
    "text": "account and they make it available as part of their documentation and also when you configure their",
    "start": "1435120",
    "end": "1440640"
  },
  {
    "text": "offering as you can notice i am using external id because i don't want to deal with the confused deputy",
    "start": "1440640",
    "end": "1446880"
  },
  {
    "text": "problem let's look at the access policy the access policy",
    "start": "1446880",
    "end": "1452000"
  },
  {
    "text": "allows two ec2 actions one elb action and two route 53 actions and if you",
    "start": "1452000",
    "end": "1458159"
  },
  {
    "text": "notice these are read-only actions so i have confidence that they are not going to do like",
    "start": "1458159",
    "end": "1464640"
  },
  {
    "text": "any mutating actions within my account okay and this role arn",
    "start": "1464640",
    "end": "1472640"
  },
  {
    "text": "or amazon resource name is the only thing that i'm going to give to the partner so now let's",
    "start": "1472640",
    "end": "1479360"
  },
  {
    "text": "look at the trend micro software sign in to the deep security for web",
    "start": "1479360",
    "end": "1485279"
  },
  {
    "text": "apps so this is their dashboard i'm already",
    "start": "1485279",
    "end": "1492880"
  },
  {
    "text": "scanning one application let's go ahead and try to add another",
    "start": "1492880",
    "end": "1498000"
  },
  {
    "text": "administration web applications add a web application",
    "start": "1498000",
    "end": "1504960"
  },
  {
    "text": "and i'm going to add a web application that is hosted in aws and if you see now it provides the",
    "start": "1506640",
    "end": "1514000"
  },
  {
    "text": "account id the external id which is specific to me if you try this you will get a different",
    "start": "1514000",
    "end": "1519600"
  },
  {
    "text": "external id and then the policy the access policy that you should set on the road",
    "start": "1519600",
    "end": "1525919"
  },
  {
    "text": "and then once you do that then you come back and just give the role ern we already have one so i'm just",
    "start": "1525919",
    "end": "1532880"
  },
  {
    "text": "going to give that and then select the region so now when i click on list web apps",
    "start": "1532880",
    "end": "1540080"
  },
  {
    "text": "it's going to use the temporary security credentials obtained by assuming the role and it can",
    "start": "1540080",
    "end": "1546720"
  },
  {
    "text": "actually look inside my account and list all the ec2 instances",
    "start": "1546720",
    "end": "1552799"
  },
  {
    "text": "for security scanning so i never give my",
    "start": "1552799",
    "end": "1560799"
  },
  {
    "text": "secret access key to a partner i would go one step further and say",
    "start": "1560799",
    "end": "1566320"
  },
  {
    "text": "friends don't let friends share their secret key not a good thing not a good thing for you",
    "start": "1566320",
    "end": "1571760"
  },
  {
    "text": "and even for the partner because if a partner is maintaining the",
    "start": "1571760",
    "end": "1578159"
  },
  {
    "text": "secret key for bunch of customers right it's a liability extra liability on their part too",
    "start": "1578159",
    "end": "1586000"
  },
  {
    "text": "okay let's get back to the slides",
    "start": "1588000",
    "end": "1592080"
  },
  {
    "text": "oops okay let us look at the third scenario",
    "start": "1596840",
    "end": "1603279"
  },
  {
    "start": "1599000",
    "end": "1639000"
  },
  {
    "text": "this is delegating access to aws pattern is similar the only thing that",
    "start": "1603279",
    "end": "1609840"
  },
  {
    "text": "is changing is that now you are delegating access to aws service rather than someone with some other team in your",
    "start": "1609840",
    "end": "1616640"
  },
  {
    "text": "company or an aws partner and just because it's an aws service",
    "start": "1616640",
    "end": "1621919"
  },
  {
    "text": "right it doesn't need to be special it should still have the same delegation semantics you create a role in your",
    "start": "1621919",
    "end": "1627760"
  },
  {
    "text": "account this time you trust the aws services aws account grant permissions and the same flow the",
    "start": "1627760",
    "end": "1635279"
  },
  {
    "text": "user in that services account accesses your your account let's take a quick look at this",
    "start": "1635279",
    "end": "1643039"
  },
  {
    "text": "so i'm going to start with im console",
    "start": "1647679",
    "end": "1651679"
  },
  {
    "text": "okay in the rows section i'm going to create a new role",
    "start": "1652840",
    "end": "1657919"
  },
  {
    "text": "and say test next step as i mentioned there are pre-configured",
    "start": "1657919",
    "end": "1665520"
  },
  {
    "text": "templates i'm going to use the template for elastic transcoder service",
    "start": "1665520",
    "end": "1671840"
  },
  {
    "text": "and then you can see that it needs some s3 actions and some sns actions and elastic",
    "start": "1671840",
    "end": "1678399"
  },
  {
    "text": "transcoder in case you don't know it's a service that that can take your",
    "start": "1678399",
    "end": "1683919"
  },
  {
    "text": "media files and then convert those into audio and video codecs so that different",
    "start": "1683919",
    "end": "1690240"
  },
  {
    "text": "devices those can be rendered on different devices",
    "start": "1690240",
    "end": "1695760"
  },
  {
    "text": "so next step and create a role that's it now let's go back to the elastic",
    "start": "1695760",
    "end": "1701360"
  },
  {
    "text": "transcoder service they have this concept called pipeline",
    "start": "1701360",
    "end": "1708080"
  },
  {
    "text": "which is a queue to manage the transcoding jobs so let's try to create a pipeline say",
    "start": "1708080",
    "end": "1714720"
  },
  {
    "text": "test the bucket where your media files are there",
    "start": "1714720",
    "end": "1719840"
  },
  {
    "text": "and now here it will ask for a role and the role that we just created test is",
    "start": "1719840",
    "end": "1725200"
  },
  {
    "text": "available here and then you can say that okay go ahead and use this role you don't have to necessarily start",
    "start": "1725200",
    "end": "1730960"
  },
  {
    "text": "with the elastic transcoder console sorry im console you can start here also and we provide",
    "start": "1730960",
    "end": "1737600"
  },
  {
    "text": "the convenience of creating the role in your account that the transcoding service will use",
    "start": "1737600",
    "end": "1753840"
  },
  {
    "text": "delegating access to amazon ec2 so this is the second use case in the third scenario",
    "start": "1755360",
    "end": "1761679"
  },
  {
    "text": "many customers have applications that run on ec2 instances now if this application itself wants",
    "start": "1762880",
    "end": "1769679"
  },
  {
    "text": "access to ec2 it is going to need the credential to access right it's a very interesting problem how do",
    "start": "1769679",
    "end": "1777279"
  },
  {
    "text": "you get this credential to the instance instances can come and go right that's the whole idea of cloud",
    "start": "1777279",
    "end": "1784640"
  },
  {
    "text": "elasticity and flexibility what i have seen is couple of patterns when i talk with customers",
    "start": "1784640",
    "end": "1790799"
  },
  {
    "text": "they either take the access key id and secret access key and sometimes even the root credentials",
    "start": "1790799",
    "end": "1797600"
  },
  {
    "text": "and embed them in the ami or amazon machine image or the other pattern that i have seen is when you",
    "start": "1797600",
    "end": "1804159"
  },
  {
    "text": "launch an ec2 instance you can specify something called as user data and that user data is something that is",
    "start": "1804159",
    "end": "1811360"
  },
  {
    "text": "available from within the instance now both of these options are not secure",
    "start": "1811360",
    "end": "1817039"
  },
  {
    "text": "here is the reason why let's say if you have an ami that has embedded credentials you can",
    "start": "1817039",
    "end": "1823760"
  },
  {
    "text": "share the ami with anyone so if you share it with someone and someone launches an instance from that",
    "start": "1823760",
    "end": "1830000"
  },
  {
    "text": "now they have access to your account and if it is a root credentials which you should never use",
    "start": "1830000",
    "end": "1836080"
  },
  {
    "text": "now they have uncontrollable access to your aws account",
    "start": "1836080",
    "end": "1841200"
  },
  {
    "text": "even with the user data when you pass it it is available as a clear text inside",
    "start": "1841200",
    "end": "1847760"
  },
  {
    "text": "the instance and if you're scripting the instance creation then you have to have these credentials inside the",
    "start": "1847760",
    "end": "1853840"
  },
  {
    "text": "scripts so you don't want your credentials to be lying around in clear text",
    "start": "1853840",
    "end": "1859200"
  },
  {
    "text": "so then how do we solve that problem right that's where delegating access to amazon",
    "start": "1859200",
    "end": "1865679"
  },
  {
    "text": "ec2 becomes special and interesting you start in the same way create a role",
    "start": "1865679",
    "end": "1870960"
  },
  {
    "text": "in your account this time you trust amazon ec2 service okay then grant permissions these are",
    "start": "1870960",
    "end": "1878000"
  },
  {
    "text": "the permissions that your application is going to need then you do one thing and that thing is",
    "start": "1878000",
    "end": "1884159"
  },
  {
    "text": "when you launch an instance you just say that hey i want to launch the instance with this role",
    "start": "1884159",
    "end": "1890159"
  },
  {
    "text": "if you do that simple step here is what happens ec2 automagically assumes the role in your",
    "start": "1890159",
    "end": "1896399"
  },
  {
    "text": "aws account and makes those credentials available to the instance",
    "start": "1896399",
    "end": "1902159"
  },
  {
    "text": "not only that if you use the aws cli or aws sdk these automatically use those",
    "start": "1902159",
    "end": "1909360"
  },
  {
    "text": "credentials so you don't have to change your application or anything",
    "start": "1909360",
    "end": "1915760"
  },
  {
    "text": "and the other thing is ec2 not only delivers the credential to the instance it keeps on rotating it",
    "start": "1915760",
    "end": "1922399"
  },
  {
    "text": "multiple times a day so think about it the credentials are delivered for you",
    "start": "1922399",
    "end": "1928640"
  },
  {
    "text": "rotated for you and all you did was launching an instance with the role",
    "start": "1928640",
    "end": "1934080"
  },
  {
    "text": "i have seen many features in security but i sincerely believe that this is one",
    "start": "1934080",
    "end": "1939600"
  },
  {
    "text": "of those features that have achieved a great balance of security and usability so let's see this in",
    "start": "1939600",
    "end": "1947039"
  },
  {
    "text": "action the demo flow is simple let's say you have a bunch of ec2 instances on which",
    "start": "1947039",
    "end": "1952480"
  },
  {
    "text": "you have your application running you create a role in your account in this case i'm going to allow only",
    "start": "1952480",
    "end": "1958559"
  },
  {
    "text": "s3 access not any other access and when you launch an instance with the role the credentials",
    "start": "1958559",
    "end": "1965600"
  },
  {
    "text": "are made available to the instance and then the application on the instance can access",
    "start": "1965600",
    "end": "1970640"
  },
  {
    "text": "the aws services access to s3 will be allowed to dynamodb it will not be allowed",
    "start": "1970640",
    "end": "1978159"
  },
  {
    "text": "let's see the demo",
    "start": "1978159",
    "end": "1980960"
  },
  {
    "text": "starting with im console",
    "start": "1986720",
    "end": "1991840"
  },
  {
    "text": "in the role section i have already created a role which is a demo role let's look at the",
    "start": "1992000",
    "end": "1998480"
  },
  {
    "text": "trust policy here you will see that the role trusts ec2 service and the access policy",
    "start": "1998480",
    "end": "2007440"
  },
  {
    "text": "says allow only s3 access for all resources let's go back and look at the ec2",
    "start": "2007440",
    "end": "2014320"
  },
  {
    "text": "instance i have already launched the instance with the role and you can see that",
    "start": "2014320",
    "end": "2021919"
  },
  {
    "text": "here so this is the instance and if i scroll down here you will see",
    "start": "2023600",
    "end": "2029360"
  },
  {
    "text": "that this is the im role which is the role that i just showed you",
    "start": "2029360",
    "end": "2035279"
  },
  {
    "text": "i'm actually on that instance right now so i'm going to run this command called aws",
    "start": "2035919",
    "end": "2042240"
  },
  {
    "text": "configure this is the aws cli command and what it does is that it tells",
    "start": "2042240",
    "end": "2047840"
  },
  {
    "text": "whether this command command window session has any aws credentials configured so no access key",
    "start": "2047840",
    "end": "2055839"
  },
  {
    "text": "id no secret access key region is default and output format is default so now",
    "start": "2055839",
    "end": "2063599"
  },
  {
    "text": "let's try to see if i can run another aws command aws s3 ls this is a command",
    "start": "2063599",
    "end": "2070158"
  },
  {
    "text": "which just lists the bucket in in the account",
    "start": "2070159",
    "end": "2075440"
  },
  {
    "text": "boom it was able to list all the buckets in my ws account and the reason that it was able to do",
    "start": "2075440",
    "end": "2082480"
  },
  {
    "text": "was the aws cli automatically picked up the credentials that were delivered by the ec2 service",
    "start": "2082480",
    "end": "2089440"
  },
  {
    "text": "now let's try the dynamodb list tables command and this will fail with access denied",
    "start": "2089440",
    "end": "2096638"
  },
  {
    "text": "because the role had access to only s3 s3 service but not any other service",
    "start": "2096639",
    "end": "2102720"
  },
  {
    "text": "and i often get asked this question like okay so where are these credentials available so there is a url that we call instance",
    "start": "2102720",
    "end": "2110240"
  },
  {
    "text": "metadata url it's a fixed location that is available on every ec2 instance",
    "start": "2110240",
    "end": "2116079"
  },
  {
    "text": "whether it is windows linux and the url is on the screen 169 254",
    "start": "2116079",
    "end": "2123520"
  },
  {
    "text": "and then if you just call the url you can get the credentials access key id secret access key and",
    "start": "2123520",
    "end": "2129920"
  },
  {
    "text": "token okay and as you can see there is expiration also so you might ask now sean you have been",
    "start": "2129920",
    "end": "2137200"
  },
  {
    "text": "telling us never share your secret key with anyone but you yourself are showing this on a",
    "start": "2137200",
    "end": "2142800"
  },
  {
    "text": "recorded session well i'm showing access key id and secret access key but i'm showing only",
    "start": "2142800",
    "end": "2148640"
  },
  {
    "text": "part of the session token uh unless you have the entire session token those two are not going to be very",
    "start": "2148640",
    "end": "2154720"
  },
  {
    "text": "useful so yes it is still secure",
    "start": "2154720",
    "end": "2159839"
  },
  {
    "text": "so let's get back to the slides",
    "start": "2159839",
    "end": "2164480"
  },
  {
    "start": "2164000",
    "end": "2273000"
  },
  {
    "text": "so in summary we looked at three scenarios you can use im users",
    "start": "2166320",
    "end": "2172960"
  },
  {
    "text": "to securely delegate access within your account you can use im rules to delegate access",
    "start": "2172960",
    "end": "2179599"
  },
  {
    "text": "across account and this can be some someone inside your company or outside your",
    "start": "2179599",
    "end": "2185440"
  },
  {
    "text": "company like an aws partner you can use service roles to securely delegate access",
    "start": "2185440",
    "end": "2191280"
  },
  {
    "text": "to an aws service like amazon elastic transcoder aws data pipeline",
    "start": "2191280",
    "end": "2197040"
  },
  {
    "text": "amazon elastic map reduce so on and so forth and finally you can delegate access",
    "start": "2197040",
    "end": "2204079"
  },
  {
    "text": "to amazon ec2 if you have applications running on ec2 instances that want access to the ec2 to the aws",
    "start": "2204079",
    "end": "2212839"
  },
  {
    "text": "services here is a slide where i have the links you can follow us on twitter",
    "start": "2212839",
    "end": "2218560"
  },
  {
    "text": "our handle is aws identity we also have a aws security blog",
    "start": "2218560",
    "end": "2225440"
  },
  {
    "text": "and in fact this blog came out of the suggestion from the first reinvent when we talked with the customers right they",
    "start": "2225440",
    "end": "2231359"
  },
  {
    "text": "said yeah i mean we have you have the aws blog but we need security specific content there and",
    "start": "2231359",
    "end": "2237599"
  },
  {
    "text": "that's where we post almost once a week or once every two weeks the python script",
    "start": "2237599",
    "end": "2244240"
  },
  {
    "text": "that i showed the cross account sample that's available on the security blog i also have a link for that",
    "start": "2244240",
    "end": "2250400"
  },
  {
    "text": "and we also have details page and im forums the product management team is quite",
    "start": "2250400",
    "end": "2255520"
  },
  {
    "text": "active on the im forum so if you have any questions please feel free to post them and we would be happy to answer those",
    "start": "2255520",
    "end": "2262400"
  },
  {
    "text": "with that thank you so much for your time and i would highly appreciate if you can provide feedback on the",
    "start": "2262400",
    "end": "2269119"
  },
  {
    "text": "session",
    "start": "2269119",
    "end": "2271838"
  }
]