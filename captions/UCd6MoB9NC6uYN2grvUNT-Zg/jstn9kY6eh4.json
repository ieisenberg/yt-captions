[
  {
    "start": "0",
    "end": "31000"
  },
  {
    "text": "Hi I'm Wale.\nAnd I am Rudy. And we're here to talk to you about everything IoT.\nIn today's episode,",
    "start": "0",
    "end": "8416"
  },
  {
    "text": "we're going to talk about AWS IoT Greengrass,\nspecifically provisioning for production.",
    "start": "8417",
    "end": "14191"
  },
  {
    "text": "So everyone, get ready for 'IoT All the Things.'",
    "start": "14192",
    "end": "20933"
  },
  {
    "start": "31000",
    "end": "117000"
  },
  {
    "text": "So Tim, I just want to give a little bit of background \nabout what you're working with, I think you have some kind of great partners\n in your space that you get to dive in with in IoT.",
    "start": "31544",
    "end": "40790"
  },
  {
    "text": "Yeah, so I'm a principle partner solutions architect,\nso I focus on building solutions with partners.",
    "start": "42001",
    "end": "48002"
  },
  {
    "text": "Primarily I work in Edge compute space,\nand I have been working with Greengrass since 2017.",
    "start": "48004",
    "end": "53435"
  },
  {
    "text": "I started my career a long time ago \nas a firmware engineer which is how I got interested in IoT connected devices",
    "start": "53436",
    "end": "59133"
  },
  {
    "text": "so you know 20 years later, \nshowing my age, this is where I am. Is it 20 years, like my t-shirt is 20 years?\nSo I had to throw back to a bit of 'E man'.",
    "start": "59137",
    "end": "70798"
  },
  {
    "text": "Yeah, 20 years since my first embedded development job,\nso still interested in this kind of stuff after all that time.",
    "start": "74560",
    "end": "81597"
  },
  {
    "text": "And yes, I have been working with a lot of partners\nlike I said building Edge compute solutions, and through that I've been spending a lot of time\nfiguring out how to streamline that,",
    "start": "81599",
    "end": "90889"
  },
  {
    "text": "improve the processes, help partners \nbuild out their production systems. And that's what we're going to talk about today\nwith the Greengrass provisioning.",
    "start": "90991",
    "end": "98145"
  },
  {
    "text": "Sweet, and I know in our last episode\n we did a lot of stuff on industrial so as Rudy mentioned in the opening \nwe want to dive into Greengrass,",
    "start": "99054",
    "end": "107064"
  },
  {
    "text": "especially provisioning Greengrass.\nAnd from there we'll get into everything from automation to debugging.",
    "start": "107065",
    "end": "113312"
  },
  {
    "text": "So Tim, I'd love to just dive into that first use case.\nYou mentioned coming from",
    "start": "113313",
    "end": "118361"
  },
  {
    "start": "117000",
    "end": "189000"
  },
  {
    "text": "that embedded developer background.\nAll the codings about the developer experience: how you build something, how you code it,\nhow you make changes.",
    "start": "118362",
    "end": "127237"
  },
  {
    "text": "So it'd be very cool to get your sense of \nhow you're able to get that experience",
    "start": "127238",
    "end": "133120"
  },
  {
    "text": "when you work with your partners \nespecially with Greengrass. Sure! So again, starting out as a firmware engineer\nback in the day, everything was C and assembly language.",
    "start": "133121",
    "end": "143558"
  },
  {
    "text": "And everything was incredibly manual.\nSo I've got a real aversion to anything that I can't automate \nor somehow improve to make sure",
    "start": "143559",
    "end": "149524"
  },
  {
    "text": "that somebody doesn't have to do \nall the same work that I did in the past. And with Greengrass, I know we have some content \nthat can show the Greengrass configuration coming up.",
    "start": "149525",
    "end": "160540"
  },
  {
    "text": "But Greengrass, there's a lot of different things you can configure.\nAnd what I was really working towards was -  as we were doing workshops for partners,\nshowing them how to use Greengrass",
    "start": "160540",
    "end": "166540"
  },
  {
    "text": "showing them how the Edge compute platform worked -\nI just wanted a way for them to get started really quickly.\nYou know, all of the features in Greengrass,",
    "start": "166540",
    "end": "174950"
  },
  {
    "text": "they're all necessary  but in order to get started \nyou only need a small sub set up. We focused on that first and then expanded it out\nto turn into a product that now we know",
    "start": "174952",
    "end": "184477"
  },
  {
    "text": "that multiple customers are using in production,\nboth internal and external. Cool, cool!\nSo I know what I think is really interesting",
    "start": "184478",
    "end": "191370"
  },
  {
    "start": "189000",
    "end": "257000"
  },
  {
    "text": "along with working with partners \nis you mentioned developer experience",
    "start": "191370",
    "end": "197392"
  },
  {
    "text": "that kind of got you started down the...\nHow do you make AWS Greengrass easier? So it'd be great to kinda talk about \nthe service AWS Greengrass",
    "start": "197393",
    "end": "206998"
  },
  {
    "text": "and things that you're working with \nand figuring out in terms of  how do you create \nthat rich developer experience?",
    "start": "206999",
    "end": "213196"
  },
  {
    "text": "Sure, so a lot of partners start out just kind of curious \nwhat AWS Greengrass is about",
    "start": "213198",
    "end": "221143"
  },
  {
    "text": "and they think maybe we can take some our code \nand ship it down to the Edge and they build these things inside Lambda functions \nand they want to just have a way to quickly iterate",
    "start": "221144",
    "end": "230981"
  },
  {
    "text": "on what they're doing,\nAnd to me that's what it's all about. It's about the velocity of the developer,\nyou need to be able to write some code,",
    "start": "230982",
    "end": "237704"
  },
  {
    "text": "iterate it, test it.\nAnd once you've built up a framework for that you can be incredibly productive.\nSo the Greengrass Provisioner specifically",
    "start": "237705",
    "end": "245232"
  },
  {
    "text": "gives people the ability to streamline \nthat first initial bootstrapping process and then modify their code on the fly really quickly \nand debug as we'll see later.",
    "start": "245234",
    "end": "257246"
  },
  {
    "start": "257000",
    "end": "389000"
  },
  {
    "text": "Cool, so what I think is really interesting is that\nwhen we dive into Greengrass they are so many different moving components.\nAnd we have a special guest",
    "start": "257248",
    "end": "265865"
  },
  {
    "text": "[laughing]\nThis is Gulu and she really loves Greengrass,",
    "start": "265865",
    "end": "276202"
  },
  {
    "text": "She was like: I heard about AWS IoT Greengrass\nand I had to just come and give everyone",
    "start": "276203",
    "end": "281687"
  },
  {
    "text": "a taste of my presence.\nThat is awesome, I mean, I'm curious",
    "start": "281688",
    "end": "287961"
  },
  {
    "text": "it seems that the cat is actually ready to code.\nSo Tim, is the Greengrass provisioning",
    "start": "287962",
    "end": "293477"
  },
  {
    "text": "as easy as a cat to use?\nHow do you get all these components together? So, again Greengrass, the Edge compute platform \nat the highest level, it's a process that runs on a Linux box.",
    "start": "293479",
    "end": "306581"
  },
  {
    "text": "And there's a few different high level components\n like the thing that you need to create in the Registry",
    "start": "307262",
    "end": "312240"
  },
  {
    "text": "and this group definition of the Lambda functions,\nand if you want you can use Machine Learning assets. But each one of these things require a few steps to set up, \nif you want to set up an IoT Thing",
    "start": "312415",
    "end": "321399"
  },
  {
    "text": "you need a certificate, a policy, \nand for Greengrass you need a role alias. And the group definition has all of these different 6 components\nthat define which devices can connect to it,",
    "start": "321401",
    "end": "330452"
  },
  {
    "text": "what kind of functions you're gonna run,\nwhat access to local resources those functions have how those functions are wired together,",
    "start": "330453",
    "end": "336044"
  },
  {
    "text": "if you want to use any of our pre-built functions,\nwhich are called connectors.. And all of those things have not only a definition\nbut a version behind them.",
    "start": "336046",
    "end": "344575"
  },
  {
    "text": "So as you're modifying things you having\nto create new versions and kind of roll up all of the different configurations into these objects.\nSo it can take a lot of steps to get that definition done",
    "start": "344575",
    "end": "355414"
  },
  {
    "text": "and then even once you've got that, \nyou got to build the Lambda functions. And if you're lambda function is simple\nand doesn't have a whole lot of dependencies",
    "start": "355416",
    "end": "362259"
  },
  {
    "text": "you may be able to just edit in the console \nand deploy there. But the provisioner takes care of packaging \nof your dependencies, shipping them up to Lambda",
    "start": "362261",
    "end": "369745"
  },
  {
    "text": "so you're deployment really ends up being one step \nafter you go through the framework that we've put around it.",
    "start": "369747",
    "end": "375339"
  },
  {
    "text": "And the same thing with machine learning\nif you build machine learning models and you want to ship them down to the Edge, \nthe provisioner will let you reference those",
    "start": "375340",
    "end": "381055"
  },
  {
    "text": "and bring them into your Lambda functions\nso that you can have a machine learning model as big as you like,  packaged alongside your functions.\nSo it'll jut show up in Greengrass.",
    "start": "381057",
    "end": "388457"
  },
  {
    "text": "Awesome, I think it's interesting,\nbecause when people think about Greengrass it's all about how can you run things at the Edge.\nSo you take all these components together",
    "start": "388459",
    "end": "397963"
  },
  {
    "start": "389000",
    "end": "518000"
  },
  {
    "text": "you want to run them at the Edge \nand then Tim to your point the work you've been doing \nwith the Greengrass provisioner",
    "start": "397965",
    "end": "403288"
  },
  {
    "text": "is all about how can you make all these pieces\n come together quicker.",
    "start": "403290",
    "end": "408480"
  },
  {
    "text": "So what kind of other benefits have you seen \nfrom going down a path to provisioning Greengrass",
    "start": "408481",
    "end": "413542"
  },
  {
    "text": "as easy as a cat to use, with a toy.\n[laughing]",
    "start": "413544",
    "end": "419806"
  },
  {
    "text": "You know when we first started this whole thing\nit started out as just a big bash script",
    "start": "419809",
    "end": "425447"
  },
  {
    "text": "that we would go through \nand wire the stuff up for people. But then as we were saying\nwe wanted to do these workshops with partners",
    "start": "425449",
    "end": "431478"
  },
  {
    "text": "and just streamline the process of that..\nand we wanted to build more on top of the higher order functions.",
    "start": "431480",
    "end": "436594"
  },
  {
    "text": "You know, more in-depth Lambda functions,\nwe want to bring machine learning models into it",
    "start": "436595",
    "end": "442140"
  },
  {
    "text": "and we were just seeing \nthat it all required more and more automation just to get people to that start where,\nyou know if you're only there for 2 hours, 4 hours maybe..",
    "start": "442141",
    "end": "450331"
  },
  {
    "text": "you don't have the luxury of going through \nand wiring everything up manually. So we keep adding more automation \nas new features come out.",
    "start": "450332",
    "end": "458141"
  },
  {
    "text": "We want to just find ways to hook things up,\nthat are like what I refer to as just the same defaults,",
    "start": "458143",
    "end": "463647"
  },
  {
    "text": "to make sure that people don't have to do\ntoo much manual work. And granted, all that flexibility exists in the configuration\nif you have a really advanced configuration",
    "start": "463648",
    "end": "470271"
  },
  {
    "text": "that maybe the provisioner doesn't necessarily cover.\nBut for the majority of use cases getitng started",
    "start": "470273",
    "end": "477338"
  },
  {
    "text": "this is what we see.\nAnd I find in working with partners. you know you can point somebody \nto the documentation of anything but any type of technology today",
    "start": "477339",
    "end": "485604"
  },
  {
    "text": "is gonna take quite some type to just get schooled up on \nand kind of wrap you head around how it works. And it's really satisfying to just be able to go into a partner engagement and just give them a working model.",
    "start": "485607",
    "end": "495689"
  },
  {
    "text": "And sit down with them, \nand just in a few hours be able to iterate and show them okay now, we've gone through 10, 15, 20 changes \nand now we've got something that's kind of",
    "start": "495699",
    "end": "504012"
  },
  {
    "text": "doing what you think \nand get them started on the path. And I find that projects that start out that way\nare a lot more successful.",
    "start": "504014",
    "end": "511052"
  },
  {
    "text": "Many more of them get all the way to completion \nand then move into production when you can provide tools like that\nto simplify things.",
    "start": "511055",
    "end": "517274"
  },
  {
    "text": "Awesome, and to dive a little bit more \nwith the Greengrass provisioner,",
    "start": "517274",
    "end": "522354"
  },
  {
    "start": "518000",
    "end": "586000"
  },
  {
    "text": "you do all of this through the deployment configuration.\nCould you speak about how that allows you",
    "start": "522357",
    "end": "528778"
  },
  {
    "text": "the flexibility to get Greengrass up and running.\n- Yeah, sure! So, in the previous graphic we were looking at \nthere's all of the different elements that you could configure.",
    "start": "528780",
    "end": "540224"
  },
  {
    "text": "But when I started thinking about at the highest level, what somebody needs to build a Greengrass deployment,",
    "start": "540224",
    "end": "546390"
  },
  {
    "text": "really what they're looking at is \nhow can I deploy functions at the Edge? So, there's a simple file, that's up on the screen now\ncalled the deployment configuration,",
    "start": "546394",
    "end": "554602"
  },
  {
    "text": "and it has a lot of other options but right now \nit's set - all the other options are just excluded",
    "start": "554603",
    "end": "559623"
  },
  {
    "text": "because we're using the defaults. \nBut it starts out with just a list of the functions you want to deploy.\nIn this case this is the Hello World Python 3 function.",
    "start": "559625",
    "end": "565985"
  },
  {
    "text": "So the provisioner will - you point it to a configuration file,\ndeployment configuration,",
    "start": "565987",
    "end": "571301"
  },
  {
    "text": "it goes through and it looks and says \nthese are the functions you'd like to run and then it goes and it finds those functions in the directory.\nAnd each one of those functions has its own configuration",
    "start": "571303",
    "end": "581227"
  },
  {
    "text": "which gives you the ability to specify what the function does,\nand how it's built and how it's wired up.",
    "start": "581229",
    "end": "586498"
  },
  {
    "start": "586000",
    "end": "690000"
  },
  {
    "text": "Cool, so you start with maybe, in your first configuration,\njust a simple function example.",
    "start": "586500",
    "end": "591705"
  },
  {
    "text": "But as you mention, you know, if you actually have the full function config file,",
    "start": "591705",
    "end": "597705"
  },
  {
    "text": "you can add a lot more variables to this\nso that give you a little bit more, let's say,",
    "start": "597705",
    "end": "603709"
  },
  {
    "text": "insight into again still not having to code.\nSo, there's this next set of configurations",
    "start": "603710",
    "end": "610413"
  },
  {
    "text": "that you can actually run for partners\nthat kinda keeps it hands off. Yes, the function configuration is gonna specify\nthe name of the function, where the function handler is,",
    "start": "610415",
    "end": "620437"
  },
  {
    "text": "the type of the function,\nwhether it's event-driven or whether it's a pinned function which means that it's running all the time\nand then it's gonna specify something ",
    "start": "620439",
    "end": "629087"
  },
  {
    "text": "that's kind of unique to the provisioner\nIt's gonna specify the inputs and outputs of the function, like what topics do I want this function to listen to,\nwhich is really important ",
    "start": "629089",
    "end": "637111"
  },
  {
    "text": "because that helps  the provisioner decide\nhow to automatically wire up functions for each other.",
    "start": "637312",
    "end": "643169"
  },
  {
    "text": "There's this notion of the subscription definition\nin Greengrass, and what that does is that says \nthis function can talk to this functions on these topics.",
    "start": "643170",
    "end": "651822"
  },
  {
    "text": "And normally you have to create a function,\nit expects a message on a topic, you create another function it sends a message to a topic,\nand then you create an entry that wires those together.",
    "start": "651824",
    "end": "661247"
  },
  {
    "text": "But through this declarative configuration \nwhat we have said is just tell me what those topics are,",
    "start": "661250",
    "end": "668026"
  },
  {
    "text": "and I will then go through automatically \nand wire up those functions for you. Now, there may be some cases where people \ndon't necessarily want all those functions wired together",
    "start": "668028",
    "end": "676496"
  },
  {
    "text": "but again this is kind of the default that we've heard partners say.\nThis is the way I've built my functions, this is the way I expect them to be wired up\nso this is a convenient shorthand to get things moving.",
    "start": "676498",
    "end": "688473"
  },
  {
    "text": "Cool, so through this method you basically do the function names, aliases,",
    "start": "688474",
    "end": "695455"
  },
  {
    "text": "kind of allocate how long a function can run, \nand you mentioned all the inputs and outputs.",
    "start": "695457",
    "end": "701008"
  },
  {
    "text": "So it seems just through this process you're able to just deploy all the parts of Greengrass,\nin that earlier slide like you talked about.",
    "start": "701010",
    "end": "708810"
  },
  {
    "text": "So, this is super interesting,\nI'd love to actually see how all of this works like how does provisioning actually work \nwith your Greengrass provisioner in AWS.",
    "start": "708811",
    "end": "719469"
  },
  {
    "text": "So it'd be cool just to get a little bit deeper and actually maybe,\ntest out provisioning flow right now for the group.",
    "start": "719470",
    "end": "726009"
  },
  {
    "text": "So, there's a repository I built,\ncalled the Greengrass Lambda functions, which are kind of the example functions \nthat we use in workshops and show to partners.",
    "start": "726012",
    "end": "733410"
  },
  {
    "text": "And in it is a script called ggp.sh, and here I'm simply saying: use the Python 3 Hello World configuration,",
    "start": "733412",
    "end": "739970"
  },
  {
    "text": "that's the -d for the deployments option,\ncreate a group called Twitch because we're on Twitch,",
    "start": "739972",
    "end": "745279"
  },
  {
    "text": "and then this is one of the really convenient options it's EC2 launch,\n and you tell it whether you want Ubuntu or Amazon Linux,",
    "start": "745282",
    "end": "753644"
  },
  {
    "text": "these are the two options today.\nNow, what's gonna happen here is a lot of things are gonna scroll pass \non the screen very quickly",
    "start": "753645",
    "end": "760331"
  },
  {
    "text": "we'll be able to talk as there are a couple of pauses\nbut you'll get to see each one of these things",
    "start": "760332",
    "end": "766628"
  },
  {
    "text": "is a step that you would normally go through manually\nas you go through and do the provisioning. So the first thing it'll do is it's gonna set up all the roles,\nset up all the permissions",
    "start": "766631",
    "end": "775202"
  },
  {
    "text": "to make sure your functions can run,\nthat your Greengrass device can communicate with the cloud.",
    "start": "775203",
    "end": "780141"
  },
  {
    "text": "All the subscriptions, and then you'll see here\nnow its creating the EC2 instance it's creating that Bootstrap script \nwhich is called gg.twitch.sh",
    "start": "783777",
    "end": "792741"
  },
  {
    "text": "it's letting the Greengrass deployment finish,\nand now it's in a state where it's just waiting for that\nEC2 instance to start.",
    "start": "792741",
    "end": "799181"
  },
  {
    "text": "Once the EC2 instance starts, \nthis is where the real automation comes in. It's gonna copy that script over to the EC2 instance,\nit's then gonna start the script",
    "start": "801097",
    "end": "810589"
  },
  {
    "text": "which bootstraps the EC2 instance \nto have all the dependencies it needs for Greengrass,",
    "start": "810590",
    "end": "816459"
  },
  {
    "text": "and then Greengrass is gonna start,\nand then the deployment mechanism is gonna take over, download our functions and start everything.\nSo, in probably...let's get into the instance here",
    "start": "816461",
    "end": "827121"
  },
  {
    "text": "in probably, I would say 2 minutes we'll be able to see \nthat this is running.",
    "start": "827122",
    "end": "834731"
  },
  {
    "text": "So, when it finishes it tells you the username,\nand the IP address that you should connect to,",
    "start": "834733",
    "end": "841685"
  },
  {
    "text": "it uses your SSH key so you'll be able to connect right in.\nAnd as we resume the screen you'll see these are all the dependencies \nthat we have to bring in.",
    "start": "841687",
    "end": "849206"
  },
  {
    "text": "And, again, provisioner assign to make sure \nthat it brings in everything, so that any user that wants to use a feature of Greengrass\nis gonna be able to have it.",
    "start": "849207",
    "end": "857086"
  },
  {
    "text": "So it brings in Python 2, Python 3, Node.JS, twelve, which is the version we expect",
    "start": "857182",
    "end": "863164"
  },
  {
    "text": "it brings in the Java runtime, \nit brings in MXNET, OpenCV, NumPy, SciPy, all of these different things.\n- American Pie [laughing]",
    "start": "863165",
    "end": "874281"
  },
  {
    "text": "It brings in everything. And actually if you run it on a Raspberry Pi there's some special code in there \nthat includes libraries for the Raspberry Pi GPIO,",
    "start": "874282",
    "end": "882210"
  },
  {
    "text": "and things like that.\nAnd so it's smart enough where that deployment script will kind of detect the environment you're running in, \nand if it's on EC2 it'll make sure",
    "start": "882211",
    "end": "890579"
  },
  {
    "text": "it puts in the dependencies that make sense there,\nand if it's on a Raspberry Pi or some other local device",
    "start": "890580",
    "end": "896337"
  },
  {
    "text": "it'll include those libraries that it needs as well.\nA lot of the Raspberry Pi functions depend on the GPIO functions.\nAnd if you don't install them here",
    "start": "896338",
    "end": "905503"
  },
  {
    "text": "then a lot of those functions won't work.\nBut...probably got a couple more libraries to go,",
    "start": "905505",
    "end": "911179"
  },
  {
    "text": "probably gonna install another JS in a minute here,\nand then we'll get to see it start up.",
    "start": "911179",
    "end": "918383"
  },
  {
    "text": "It installed All the Things...\nAll the Things...",
    "start": "918385",
    "end": "924159"
  },
  {
    "text": "And again, not everybody is going to need \nevery single dependency but this is just to make sure that if we're doing a workshop \nand somebody says: \"Hey I want to read a JAVA function,",
    "start": "924161",
    "end": "931545"
  },
  {
    "text": "hey I want to read a Node.JS function\"\nthat they can do it, they can just deploy any one of those examples,\nand they'll all work out of the box.",
    "start": "931546",
    "end": "937464"
  },
  {
    "text": "And if they want to use the docker connection \nthat we have to launch docker containers there's examples for that as well.\nThis is going to install docker,",
    "start": "937466",
    "end": "945826"
  },
  {
    "text": "docker that's compatible with EC2 \nand again on Raspberry Pi",
    "start": "945828",
    "end": "951466"
  },
  {
    "text": "it installs the docker version for Raspberry Pi that works. So, think of this as somebody, me, \nsat down for months and months and months",
    "start": "951468",
    "end": "960279"
  },
  {
    "text": "and said okay here's all the things I learned\nabout Greengrass and I just distilled them into this application.\nNow, once it's done doing all these dependencies",
    "start": "960281",
    "end": "968353"
  },
  {
    "text": "what we see here is that the application \nhas been following the Greengrass logs and we're seeing that it pulled down \nthat first function that was a 'Hello World 3'",
    "start": "968354",
    "end": "978562"
  },
  {
    "text": "It's a little bit difficult to see here\nwith so many things popping up but the important thing is: the Hello World Python function, what it does",
    "start": "978564",
    "end": "986169"
  },
  {
    "text": "is every 5 seconds it just wakes up \nand sends a 'Hello World' message just to let you know that every thing is working\nand here what we see is,",
    "start": "986171",
    "end": "992021"
  },
  {
    "text": "when you see that message that says \n'handle functions request', that's coming up every 5 seconds,\nthat is the function itself that's running.",
    "start": "992023",
    "end": "997151"
  },
  {
    "text": "So right now we have a Greengrass group\nthat's fully configured, we have the roles that are fully set up,\nwe have the AWS CLI boto3,",
    "start": "997154",
    "end": "1005705"
  },
  {
    "text": "all the libraries you need to do development \non this box, and it's all running on EC2, just so you can test it out.",
    "start": "1005707",
    "end": "1012906"
  },
  {
    "text": "You could move this to a physical device\nby doing the same thing and just pointing to a different host.\nBut you know, sub 5 minutes",
    "start": "1012908",
    "end": "1018548"
  },
  {
    "text": "we've got something working\nthat we can iterating on. The philosophy that I've got is\nthat I want to include everything",
    "start": "1018551",
    "end": "1024214"
  },
  {
    "text": "so that anybody that wants to get started \nwith any feature, any function that's in \nthat Greengrass Lambda functions repository",
    "start": "1024214",
    "end": "1029577"
  },
  {
    "text": "they'll be able to use this, and build their system,\nand run any of those functions. Now, I've done a lot of work with partners\nthat want to build what they call a golden image,",
    "start": "1029579",
    "end": "1038573"
  },
  {
    "text": "that has their particular type of Linux flavor,\nand has the dependencies that they need",
    "start": "1038575",
    "end": "1045105"
  },
  {
    "text": "to run their application.\nAnd they usually start with a script which is called 'update dependencies',\nand then they make sure their application works",
    "start": "1045107",
    "end": "1053232"
  },
  {
    "text": "and they slowly pull things out,\nand then rebuild and redeploy until they have a minimal configuration.\nSo we've gone through that with a bunch of partners.",
    "start": "1053234",
    "end": "1060211"
  },
  {
    "text": "And again, it's really helpful to just know \nthat whatever you build is going to work when you use the default script,\nand then it's up to you",
    "start": "1060212",
    "end": "1066543"
  },
  {
    "text": "you can pull those things out \nas you don't need them. If you're not using Node.JS,\nyou're not using JAVA, you can just pull those things out \nand get rid of them.",
    "start": "1066545",
    "end": "1073968"
  },
  {
    "text": "If you don't need the AWS CLI\nyou can get rid of that as well, if you just want the device \nto be running Greengrass only.",
    "start": "1073969",
    "end": "1080461"
  },
  {
    "start": "1080000",
    "end": "1200000"
  },
  {
    "text": "Ok sweet, so it gives you a little bit of control,\nlike you mentioned you start with everything but then it gives you some control \non what you can end up doing.",
    "start": "1080462",
    "end": "1088249"
  },
  {
    "text": "So, it seems like you're also able to just automate\nsome of these changes as well to the Greengrass provisioner,\nso you're able to do quick changes",
    "start": "1088250",
    "end": "1095935"
  },
  {
    "text": "in terms of how you maybe modify something\nand then get it running via your Greengrass provisioner.",
    "start": "1095936",
    "end": "1103983"
  },
  {
    "text": "Yes, this is the console here by the way,\nthat shows us the messages",
    "start": "1103985",
    "end": "1109672"
  },
  {
    "text": "coming out of this Greengrass group.\nAnd I'm just gonna subscribe to that Twitch core topic,",
    "start": "1109673",
    "end": "1116028"
  },
  {
    "text": "and you'll see these messages popping up here, \nso these are the 'Hello World\" messages. Just double extra proof that it worked for you.",
    "start": "1116029",
    "end": "1122203"
  },
  {
    "text": "Nice, nice, it, at least you have to prove it to, as well.\nSo you kind of got to put the money where your mouth is",
    "start": "1122205",
    "end": "1129998"
  },
  {
    "text": "so to speak [laughing] when it comes to that.\nYes, so the next thing we can do",
    "start": "1130000",
    "end": "1135085"
  },
  {
    "text": "is modify it so you can see on the screen here \nthat we can make a change to these messages, and then we can see how fast somebody can\nmake those changes and then redeploy.",
    "start": "1135087",
    "end": "1144334"
  },
  {
    "text": "The nice thing about doing the redeployment \nis that whether you built your Greengrass group",
    "start": "1144335",
    "end": "1149998"
  },
  {
    "text": "or whether you built your image \nwith the provisioner or not you can always go in and you can take your Greengrass group\nyou can modify its configuration with this tool.",
    "start": "1150000",
    "end": "1157250"
  },
  {
    "text": "You don't have to copy any scripts to it, \nyou can use the Greengrass deployment mechanism to just deploy new functions to it, \nwhich is really handy.",
    "start": "1157251",
    "end": "1164411"
  },
  {
    "text": "Once you built something locally,\nand then you ship it off and put it in the field, you just rerun these scripts \nand they will use the deployment mechanism",
    "start": "1164413",
    "end": "1170932"
  },
  {
    "text": "so you don't need to have a direct connection to it,\nyou don't need to be on the same network. And again, in that repository \nwe have a lot of different examples",
    "start": "1170934",
    "end": "1176908"
  },
  {
    "text": "and we're always adding examples\nbased on customer feedback like: I want to see how to do...I want to see \nhow to run a web server inside Node.JS,",
    "start": "1176911",
    "end": "1185005"
  },
  {
    "text": "or I want to see how to control [inaudible] with Greengrass\nwe have a lot of examples like that, that people dig into once they get past 'Hello World'.\n'Hello World' is very convenient",
    "start": "1185006",
    "end": "1193209"
  },
  {
    "text": "so we can go through and modify things \nwithout having a bunch of other hardware dangling around, it's good for testing on EC2.",
    "start": "1193211",
    "end": "1200216"
  },
  {
    "text": "You know with the way you're doing the provisioning\nit's nice to see that you can start doing everything",
    "start": "1202458",
    "end": "1207836"
  },
  {
    "text": "in a manual way, get everything up and running,\nand then actually go towards automation. - Right.\nSo I think it's stuff that we see every day",
    "start": "1207837",
    "end": "1216527"
  },
  {
    "text": "where you want to actually automate it\nbecause those manual steps with human intervention",
    "start": "1216529",
    "end": "1221811"
  },
  {
    "text": "you never know what might go wrong,\nnot to say that it will.\n- Yeah. And one other thing I'll say is can you go into that in a little bit more detail through the automation piece.",
    "start": "1221812",
    "end": "1237234"
  },
  {
    "text": "You know whether you're building it in,\nhow you're updating code in the continuous integration and whatnot.",
    "start": "1237235",
    "end": "1244588"
  },
  {
    "text": "Sure, so I've been looking a lot, \nI've had some customer requests specifically for these production systems,\nwhere they have 50, 60, 100 different Greengrass devices on site",
    "start": "1244590",
    "end": "1258041"
  },
  {
    "text": "and they want to update them all.\nAnd I've been trying to figure out the best pattern that I could support that customer,\nand then customers down the road.",
    "start": "1258042",
    "end": "1265647"
  },
  {
    "text": "I've been working very closely with them on it.\nBut what they have today is really interesting. They have a CI system  \nand they do a bunch of local testing.",
    "start": "1265649",
    "end": "1273434"
  },
  {
    "text": "They have a bunch of unit tests on their Python code\nand then they don't use the provisioner",
    "start": "1273436",
    "end": "1280393"
  },
  {
    "text": "to do that initial bootstrapping\nbut they use the provisioner to then take their test lab and then deploy everything to their test lab.\nThey have CI then check to see that everything is working",
    "start": "1280395",
    "end": "1290743"
  },
  {
    "text": "and then they do something that I think is pretty clever,\nthey take the identities of the devices in the field",
    "start": "1290746",
    "end": "1296856"
  },
  {
    "text": "that they want to be able to provision to.\nThey put the information about those devices in an SQS queue and they have the provisioner\nrunning as a Lambda function in their account,",
    "start": "1296857",
    "end": "1305483"
  },
  {
    "text": "and it simply pulls out the next device to provision\nwhich might be in another country, who knows...",
    "start": "1305484",
    "end": "1311724"
  },
  {
    "text": "Could be anywhere in the world,\npulls out the next device to provision, does the automatic provisioning,\nand then checks in with the device once it's done",
    "start": "1311726",
    "end": "1318960"
  },
  {
    "text": "to make sure it's working.\nAnd then every time they launch a device that's working in the field, \nthen they pull out the next one",
    "start": "1318962",
    "end": "1324630"
  },
  {
    "text": "just to make sure that they don't, you know, blanket do that.\nBut we've seen a lot of partners do patterns like that where they have a queue of devices that they want to provision\nand they just use the provisioner",
    "start": "1324631",
    "end": "1334872"
  },
  {
    "text": "to push off those configurations.\nAnd in this case, this particular partner,",
    "start": "1334873",
    "end": "1340365"
  },
  {
    "text": "they built everything for their production version \nthrough their CI pipeline. And the provisioner lets them actually\njust point to the functions that they've built",
    "start": "1340366",
    "end": "1348767"
  },
  {
    "text": "instead of building everything on its own.\nSo it's got a lot of flexibility it can build everything for you,\nincluding the bootstrapping scripts.",
    "start": "1348768",
    "end": "1354943"
  },
  {
    "text": "It can build the functions for you,\nit can use functions that you already got deployed there's a lot of different ways that you can use it,\nand it's continuously evolving",
    "start": "1354944",
    "end": "1363841"
  },
  {
    "text": "as customers and partners say that they,\nyou know they have a different way they want to operate with it.\nBut I think that tying it into a CI pipeline",
    "start": "1363843",
    "end": "1370653"
  },
  {
    "text": "is something I'm seeing happen a lot more now. Do you have an example for us, \nthat you could show us?",
    "start": "1370656",
    "end": "1376151"
  },
  {
    "start": "1373000",
    "end": "1605000"
  },
  {
    "text": "Yes, let's go in and let's modify\nthe existing code there. So the function that I had here,\nwhich is Python, \"Hello World\",",
    "start": "1376152",
    "end": "1383941"
  },
  {
    "text": "it's a standard one from our SDKs\nand there's one section of it where we publish a message,",
    "start": "1383944",
    "end": "1389964"
  },
  {
    "text": "and you see above the message here -\nI'll move down so you can see the timers,",
    "start": "1389965",
    "end": "1397841"
  },
  {
    "text": "it runs every 5 seconds.\nThis message here says \"Hello World\" sent from the Greengrass core \nfrom Python.",
    "start": "1397843",
    "end": "1405172"
  },
  {
    "text": "If I go in and just say 'Hey I made some changes'\nI'll try not to break the...",
    "start": "1405174",
    "end": "1413610"
  },
  {
    "text": "- Don't break it.\n- Don't break it, yeah. Very hard to break it but...\nSo all I need to do is,",
    "start": "1413611",
    "end": "1420812"
  },
  {
    "text": "this is on my local system \nso I make these changes, I save them and I run the provisioner again\nsame command line I ran before",
    "start": "1420813",
    "end": "1428918"
  },
  {
    "text": "but instead of telling it to launch the instance \nI just tell it the name of the group, and the provisioner is smart enough to go \nand look and see 'Hey that group already exists',",
    "start": "1428919",
    "end": "1436097"
  },
  {
    "text": "it's going to go through the same process\nit went through before, but it's gonna say the group already exists\nlet's just create a new configuration for it,",
    "start": "1436098",
    "end": "1441739"
  },
  {
    "text": "with the new code.\nAnd you'll see it actually happens a lot faster now because it's not launching the EC2 instance as well.\nWhen it gets down to this section",
    "start": "1441741",
    "end": "1448984"
  },
  {
    "text": "it says the deployment is being built.\nWhen it gets out to the console after that the deployment is successful.\nRight now the code is being pushed",
    "start": "1448986",
    "end": "1456091"
  },
  {
    "text": "to that Greengrass group.\nAnd what we can do is we can bring up the console we were subscribed to, \nand then you'll see that those messages changed.",
    "start": "1456092",
    "end": "1468517"
  },
  {
    "text": "This is what I was talking about earlier,\nthe rapid iteration. My feeling is, \ncoming from that embedded background,",
    "start": "1468518",
    "end": "1476242"
  },
  {
    "text": "where sometimes it takes 5 hours to build your code,\nI want to be able to see things change very, very quickly,\nSo you get in there, you make some changes,",
    "start": "1476243",
    "end": "1483806"
  },
  {
    "text": "and within 30 seconds, \ndepending on which language you're using, and depending on how big your functions are,\nyou can see that reflected in the console directly",
    "start": "1483807",
    "end": "1492531"
  },
  {
    "text": "and that's very, very helpful.\nYou know sometimes you want to make changes and just iterate and play around with things\nor sometimes you really need to fix a bug quickly.",
    "start": "1492532",
    "end": "1500395"
  },
  {
    "text": "So you can get in there and do that,\nin less than a minute. So this is the console we were at before.\nSubscribe to the same topics",
    "start": "1500396",
    "end": "1507812"
  },
  {
    "text": "and you see here , this happened a little bit ago\nbut this is 'Hey I made some changes'.",
    "start": "1507814",
    "end": "1513475"
  },
  {
    "text": "And again, just proof that the system\nis taking those changes really, really quickly.",
    "start": "1513477",
    "end": "1519731"
  },
  {
    "text": "And, if you get started with this,\nyou will be able to make changes within a minute, two minutes.\nAnd if you want we can go into some of the debugging features as well.",
    "start": "1519731",
    "end": "1531312"
  },
  {
    "text": "I'd love to, I mean, \nin all fairness, we've got a lot of developers on this stream and they'd love to see how you actually debug,\nwhat's going on in your infrastructure,",
    "start": "1531312",
    "end": "1540336"
  },
  {
    "text": "and in this case Greengrass.\nSo, what the provisioner does by default",
    "start": "1540338",
    "end": "1545467"
  },
  {
    "text": "is it's going set up all of the loggings\nof the local file system. But as I was saying, \nwhen your device is deployed in the field",
    "start": "1545469",
    "end": "1551653"
  },
  {
    "text": "you may not be able to SSH to it directly, \nso it also sets up that CloudWatch logging. And we've added some features to it\nthat you could go into CloudWatch logs yourself",
    "start": "1551657",
    "end": "1560990"
  },
  {
    "text": "in the console, and you can go and you can find\nthe different messages. But what we've heard from the people in the workshops was 'I like using the Unix utilities like Tail,",
    "start": "1560992",
    "end": "1570917"
  },
  {
    "text": "I just want to watch the logs in my console.'\nSo the provisioner has got this feature, it's called Query group,\nyou can do a bunch of different things",
    "start": "1570919",
    "end": "1579496"
  },
  {
    "text": "to get information about the group.\nThe Query group option has something called watch logs,\nand what watch logs does is it goes to the CloudWatch logs",
    "start": "1579497",
    "end": "1588434"
  },
  {
    "text": "and it finds your group name automatically for you,\nand then it pulls out all of the log messages",
    "start": "1588435",
    "end": "1594378"
  },
  {
    "text": "and tags them and tells you like\nthis is a runtime log message, this is a log message from your function.\nAnd with something like that you can very easily",
    "start": "1595279",
    "end": "1601802"
  },
  {
    "text": "see what's going in your group.\n- If you had to describe the general process of what you're doing with debugging\nin this case Tim,",
    "start": "1602803",
    "end": "1610569"
  },
  {
    "start": "1605000",
    "end": "1707000"
  },
  {
    "text": "how would you say to our viewers\nthis is where you get started with debugging.",
    "start": "1610571",
    "end": "1615874"
  },
  {
    "text": "Sure, so in general the watch logs feature \nwill let you just scroll the logs",
    "start": "1615875",
    "end": "1623275"
  },
  {
    "text": "and just monitor what's going on.\nAnd then once you get a sense, maybe, of where something's going wrong\nthe easiest thing to do, quickly modify your code,",
    "start": "1623276",
    "end": "1631403"
  },
  {
    "text": "do a redeploy,\nand then start going through the logs again. Now sometimes, you've got a lot of logs\ncoming out, maybe you have 10 Lambda functions running",
    "start": "1631405",
    "end": "1640379"
  },
  {
    "text": "and the logs are...\nthere's a lot of different data coming out. So with the watch logs feature \nit's just a Unix command. You can just pipe it through grep \nand just search for whatever you want.",
    "start": "1644380",
    "end": "1653332"
  },
  {
    "text": "So, in my case I might put in a tag that says,\n'this is the section I'm debugging' I can say,",
    "start": "1653333",
    "end": "1660604"
  },
  {
    "text": "'section A, section B', something like that \nand I can just do a grep for section and just have those messages come up.\nI can watch all the message as well if I want,",
    "start": "1660605",
    "end": "1669099"
  },
  {
    "text": "but you can always use that feature to do that.\nAnd again, it uses CloudWatch logs",
    "start": "1669100",
    "end": "1674301"
  },
  {
    "text": "so you can go back into the console \nand find those messages later. But the fact that you can have it directly in your console, or directly in your terminal,",
    "start": "1674302",
    "end": "1680619"
  },
  {
    "text": "where you're probably doing your deployments\nfrom in the first place, just speeds everything up. So you don't need to think about too much.\nGoing into the CloudWatch logs console",
    "start": "1680620",
    "end": "1690456"
  },
  {
    "text": "is not really that hard, but anytime \nwe can remove a step for somebody to do, you know you don't have to open up your browser\nand navigate away from your terminal.",
    "start": "1690458",
    "end": "1698048"
  },
  {
    "text": "If you can do it all in one place\nit just increases people's..",
    "start": "1698050",
    "end": "1703314"
  },
  {
    "text": "increases people's development velocity,\nis what I would say, being able to do that. So, our tip and trick, we've got two \nbecause we've been diving into provisioning.",
    "start": "1703315",
    "end": "1714141"
  },
  {
    "text": "The first tip trick is \nto check out Fleet Provisioning. So I'll just bring up a quick view of where\nyou're going to find that on AWS.",
    "start": "1714142",
    "end": "1723113"
  },
  {
    "text": "But for Fleet Provisioning,  \nthe thing that is really cool is that this allows you  to use what's called a Claim Certificate \nto onboard devices.",
    "start": "1723115",
    "end": "1731579"
  },
  {
    "text": "With the tips and best practices  \nif you use Fleet Provisioning, it comes with a pre-hook Lambda,\nso use Lambda to whitelist which devices you have,",
    "start": "1731580",
    "end": "1741003"
  },
  {
    "text": "so you can actually do some more validation checks.\nWe also recommend that for Fleet Provisioning",
    "start": "1741004",
    "end": "1748030"
  },
  {
    "text": "just make sure that you have\na scaled down IOT policy. But, if you're looking for a way to get started\non-boarding your devices",
    "start": "1748032",
    "end": "1754466"
  },
  {
    "text": "and you use claim certificates, \ndefinitely check out Fleet Provisioning as our Part One of tips and tricks.",
    "start": "1754467",
    "end": "1761323"
  },
  {
    "text": "And then for our Part Two for tips and tricks:\nall around provisioning is Multi-account Registration.",
    "start": "1762099",
    "end": "1767965"
  },
  {
    "text": "So what's really cool with Multi-account Registration \nis that, back in the day, when you created a cert as Tim kind of showed  \nin his example of Bootstrap and Greengrass",
    "start": "1767967",
    "end": "1777165"
  },
  {
    "text": "it could only live in one AWS account.\nBut with Multi-account Registration you can take a certificate,\nand then register it in multiple accounts",
    "start": "1777167",
    "end": "1786101"
  },
  {
    "text": "without requiring a CA.\nSo, two thing to check out: Fleet Provisioning and Multi-account Registration \nare our two Tips and Tricks.",
    "start": "1786103",
    "end": "1796577"
  },
  {
    "text": "Thanks for joining us Tim,\nit's been fun Honestly, we've learned a lot about greengrass.\nYou've shown our viewers ",
    "start": "1796578",
    "end": "1803188"
  },
  {
    "text": "how they can get going with the Provisioner,\nautomate some of their stuff as well.",
    "start": "1803190",
    "end": "1808940"
  },
  {
    "text": "Is there anything you want\nto leave our viewers with? Yeah, I would say just Google\nthe AWS Greengrass Provisioner,",
    "start": "1808942",
    "end": "1817278"
  },
  {
    "text": "AWS Greengrass Lamda functions,\nthere's two repositories AWS Samples, AWS Labs, and if there's anything you see there\nthat doesn't make sense or is not working for you",
    "start": "1817279",
    "end": "1825357"
  },
  {
    "text": "or you want to just contribute,\nopen up some issues and let's write some code. Awesome, awesome!\nAs always, thanks for coming, Tim",
    "start": "1825358",
    "end": "1832718"
  },
  {
    "text": "And I'll say, he's Wale, he's Tim, I'm Rudy,\nand you've been watching 'IoT All the Things'.",
    "start": "1832719",
    "end": "1846919"
  }
]