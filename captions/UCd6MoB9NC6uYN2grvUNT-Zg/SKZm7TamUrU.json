[
  {
    "text": "thank you for joining my name is Maxim faiv I'm principal engineer at Amazon web services and today I'm going to talk",
    "start": "640",
    "end": "7720"
  },
  {
    "text": "about AWS flow framework which is framework for building distributed for",
    "start": "7720",
    "end": "13320"
  },
  {
    "text": "tolerant applications which uses simple flow Service as its back",
    "start": "13320",
    "end": "19359"
  },
  {
    "text": "end When I Was preparing this presentation initially I came up with a",
    "start": "19359",
    "end": "24400"
  },
  {
    "text": "pretty large number of slides describing every possible feature of the flow framework but then I thought that it",
    "start": "24400",
    "end": "31080"
  },
  {
    "text": "would be just much nicer to show you example and uh for you to get taste of",
    "start": "31080",
    "end": "37879"
  },
  {
    "text": "what framework is and then then later you can uh we can have another webinar or you can just go for documentation to",
    "start": "37879",
    "end": "45520"
  },
  {
    "text": "look for par particular features of the framework it's pretty common case when",
    "start": "45520",
    "end": "52879"
  },
  {
    "text": "you have an application which works for example you have some application which",
    "start": "52879",
    "end": "58359"
  },
  {
    "text": "is or piece of code which isn't worked when the user presses a submit button on",
    "start": "58359",
    "end": "63440"
  },
  {
    "text": "the website or which runs from Crown job or from command line and U very",
    "start": "63440",
    "end": "70560"
  },
  {
    "text": "frequently this application outd draws itself and U you add more features and at some point you feel that it's taken",
    "start": "70560",
    "end": "78759"
  },
  {
    "text": "too much time or for example user cannot wait that much on the website or this",
    "start": "78759",
    "end": "84920"
  },
  {
    "text": "some server crashes so you decide to make this uh piece of quote full",
    "start": "84920",
    "end": "90960"
  },
  {
    "text": "tolerant and scalable and at this point the problem is that you practically need to start from scratch because yes you",
    "start": "90960",
    "end": "97520"
  },
  {
    "text": "have your business logic written as code but as soon as you try to modify it and",
    "start": "97520",
    "end": "104159"
  },
  {
    "text": "give it full distributed and make it full to you practicly need to uh redesign it and the resulting code",
    "start": "104159",
    "end": "111680"
  },
  {
    "text": "usually looks very very different from the initial implementation uh what I want to show you is that if you use Simple workflow",
    "start": "111680",
    "end": "118880"
  },
  {
    "text": "and flow framework you actually can keep most of your application intact and um",
    "start": "118880",
    "end": "124399"
  },
  {
    "text": "just focus on your business logic while the framework and the service take care",
    "start": "124399",
    "end": "130440"
  },
  {
    "text": "of planning for you I'll just jump jump into the code and uh show you the example uh we'll",
    "start": "130440",
    "end": "138840"
  },
  {
    "text": "start from a simple um synchronous program in the domain which everybody is",
    "start": "138840",
    "end": "145040"
  },
  {
    "text": "familiar with it's a h World domain application domain",
    "start": "145040",
    "end": "150680"
  },
  {
    "text": "and I made the the St H world just a little bit more complicated breaking it",
    "start": "150680",
    "end": "156120"
  },
  {
    "text": "into three operations we have get name operation get green operation and say",
    "start": "156120",
    "end": "162720"
  },
  {
    "text": "operation and F in standard Java practices we Define those operations through",
    "start": "162720",
    "end": "168840"
  },
  {
    "text": "interface and uh we have the Implement uh the method which uses those",
    "start": "168840",
    "end": "175400"
  },
  {
    "text": "operations to implement our how level business logic uh if you think uh if you",
    "start": "175400",
    "end": "181120"
  },
  {
    "text": "try to map it to the simple workflow Concepts we would call those operations activities because the atomic units work",
    "start": "181120",
    "end": "189360"
  },
  {
    "text": "which uh perform some useful function but they really don't depend on other unit directly on other operations and",
    "start": "189360",
    "end": "198360"
  },
  {
    "text": "also we have U they're kind of independent from each other for example they can be used in different contexts",
    "start": "198360",
    "end": "205480"
  },
  {
    "text": "because say for example prints anything and not necessarily for voltage can be used in other cases and then uh we our",
    "start": "205480",
    "end": "215040"
  },
  {
    "text": "GD method would be uh what in simple workflow we called orchestration logic",
    "start": "215040",
    "end": "220280"
  },
  {
    "text": "because it uses those operations to provide some u high level business use",
    "start": "220280",
    "end": "226120"
  },
  {
    "text": "case let's execute this code and it prints hello as we",
    "start": "226120",
    "end": "232400"
  },
  {
    "text": "expected U so let's say we want to make this application distributed and it's uh",
    "start": "232400",
    "end": "241040"
  },
  {
    "text": "not Tri task because we yes we have interface and implementation of",
    "start": "241040",
    "end": "246120"
  },
  {
    "text": "operations and we call those operations but how would you make this distribute because yes we can use for example Java",
    "start": "246120",
    "end": "252920"
  },
  {
    "text": "RMI but the invocation the separation still will be synchronous and um it",
    "start": "252920",
    "end": "258320"
  },
  {
    "text": "won't really make our applications more full to probably would make it less fent so let's let's convert it to the",
    "start": "258320",
    "end": "264840"
  },
  {
    "text": "simple workflow using flow framework I'll just make a copy of the whole",
    "start": "264840",
    "end": "270840"
  },
  {
    "text": "package to start with it's called",
    "start": "270840",
    "end": "277039"
  },
  {
    "text": "[Applause] workflow and let's start from operations",
    "start": "277690",
    "end": "282880"
  },
  {
    "text": "as I already mentioned operations in the simp of FL terminology are called activities so the way you actually say",
    "start": "282880",
    "end": "289400"
  },
  {
    "text": "that these operations are activities you just use commun",
    "start": "289400",
    "end": "295919"
  },
  {
    "text": "named uh annotation activities annotation and uh this annotation requires you to",
    "start": "295919",
    "end": "303960"
  },
  {
    "text": "specify version uh the the reason is that uh as soon as",
    "start": "303960",
    "end": "310880"
  },
  {
    "text": "we say that these operation activities they can be run on multiple boxes and they already talking about distributed",
    "start": "310880",
    "end": "316039"
  },
  {
    "text": "system and when we have distributed system you need to think about how you are going to upgrade it while running it",
    "start": "316039",
    "end": "323240"
  },
  {
    "text": "so versioning is the good way to deal with those problems and that's why uh",
    "start": "323240",
    "end": "329319"
  },
  {
    "text": "verion version is required other parameters are specified through",
    "start": "329319",
    "end": "334840"
  },
  {
    "text": "activity registration options annotation and two required parameters are",
    "start": "334840",
    "end": "340319"
  },
  {
    "text": "timeouts U First timeout start to close timeout is the timeout which practically",
    "start": "340319",
    "end": "346600"
  },
  {
    "text": "says how long your activity can execute so if you expect activity do not take",
    "start": "346600",
    "end": "352800"
  },
  {
    "text": "more than for example minute you specify uh this time out and then if it fails for any reason and doesn't",
    "start": "352800",
    "end": "360400"
  },
  {
    "text": "your process if it fails it will just report the failure but for example if process",
    "start": "360400",
    "end": "365680"
  },
  {
    "text": "crashes uh then uh after a minute the boxl code will be uh notified about the",
    "start": "365680",
    "end": "373080"
  },
  {
    "text": "failure so let's say in our case we don't expect the activity to take more than 10 seconds uh and second timeout is",
    "start": "373080",
    "end": "380000"
  },
  {
    "text": "schedule to start timeout it's a timeout how long the activity a task can take U",
    "start": "380000",
    "end": "386440"
  },
  {
    "text": "um from its uh re from press creation when we call schedule activity operation",
    "start": "386440",
    "end": "392759"
  },
  {
    "text": "down to um being picked up by the being started which is U when worker picks it",
    "start": "392759",
    "end": "399680"
  },
  {
    "text": "up so it's for how long can be CED inside of simple workflow and the reason for that that for example worker can be",
    "start": "399680",
    "end": "405800"
  },
  {
    "text": "not just running or maybe not being able to keep up with activities which are",
    "start": "405800",
    "end": "410919"
  },
  {
    "text": "created and you have control for how long you willing to wait for activity to be queed up and not being processed so",
    "start": "410919",
    "end": "418400"
  },
  {
    "text": "let's say we are willing to wait 5 minutes uh so just putting these two annotations",
    "start": "418400",
    "end": "426639"
  },
  {
    "text": "we actually converted these uh uh operations to activities which can be executed using simple workflow uh let's",
    "start": "426639",
    "end": "434199"
  },
  {
    "text": "move into the implementation um actually we don't need to do anything about",
    "start": "434199",
    "end": "439520"
  },
  {
    "text": "implementation uh it uh it's it's just can be as it is uh there are other ways",
    "start": "439520",
    "end": "446160"
  },
  {
    "text": "to to do uh to implement to have this implementation one of them would be not even using Java you still can have",
    "start": "446160",
    "end": "453639"
  },
  {
    "text": "interface um defined U to be able to call those activities but implementation",
    "start": "453639",
    "end": "459319"
  },
  {
    "text": "can be in any other language assuming that we agree on the calization format um wi",
    "start": "459319",
    "end": "466759"
  },
  {
    "text": "protocol um and also you can have activity which is kind not linked to the",
    "start": "466759",
    "end": "473479"
  },
  {
    "text": "method body completely you can practically initiate activity from this method but then complete it from a different process for example but not",
    "start": "473479",
    "end": "479720"
  },
  {
    "text": "going to spend much time today on that we just don't have enough time to just go into those uh features so now let's",
    "start": "479720",
    "end": "487479"
  },
  {
    "text": "let's let's convert the G the code of the which uses the activities the",
    "start": "487479",
    "end": "494560"
  },
  {
    "text": "operations which we converted to activities uh let's start from the actual",
    "start": "494560",
    "end": "499639"
  },
  {
    "text": "interface um so we have to do things similar what we've done with activities interface we have to annotate this",
    "start": "499639",
    "end": "505319"
  },
  {
    "text": "interface with workflow and workflow corresponds to what you we call decider process uh in",
    "start": "505319",
    "end": "513599"
  },
  {
    "text": "uh simple workflow service documentation uh similar to um",
    "start": "513599",
    "end": "520039"
  },
  {
    "text": "activities we have to specify registration options and uh the only required registration option",
    "start": "520039",
    "end": "528480"
  },
  {
    "text": "is is the execution start to close timeout SS which is Timeout of the whole",
    "start": "529040",
    "end": "536160"
  },
  {
    "text": "workflow execution for example if you create workflow execution and don't have any workers and decider activity workers",
    "start": "536160",
    "end": "541360"
  },
  {
    "text": "running at all it will time out after that time and uh or you just cannot",
    "start": "541360",
    "end": "547160"
  },
  {
    "text": "complete workflow by the time it will be automatically terminated by the system so let's say we are willing to wait up",
    "start": "547160",
    "end": "553120"
  },
  {
    "text": "to five minutes uh for this workflow to complete uh also we have to annotate the",
    "start": "553120",
    "end": "560760"
  },
  {
    "text": "uh entry point of the workflow which is practically where workflow main execution logic is and the way we mark",
    "start": "560760",
    "end": "566200"
  },
  {
    "text": "this entry point is by um EX cter notation and here we specify the",
    "start": "566200",
    "end": "575480"
  },
  {
    "text": "version there can be other types of methods like signal or get State um I'm",
    "start": "575519",
    "end": "580600"
  },
  {
    "text": "not going to spend much time on them that but the point is that all activities um in activities interface",
    "start": "580600",
    "end": "586519"
  },
  {
    "text": "all methods define activities but in workflow interface there are different types of methods and most important one",
    "start": "586519",
    "end": "593040"
  },
  {
    "text": "is execute so we uh we aned our interface",
    "start": "593040",
    "end": "599680"
  },
  {
    "text": "but we have to also convert the code of the workflow um you see it's compiles so technically",
    "start": "599680",
    "end": "606040"
  },
  {
    "text": "we can execute that but it actually not is not going to call into our um remote",
    "start": "606040",
    "end": "613000"
  },
  {
    "text": "activities it just will go against the sh this activities implementation locally and execute it's not what we want if you want to ex uh invoke",
    "start": "613000",
    "end": "620519"
  },
  {
    "text": "activities through simple workflow uh we have to actually uh start using activities uh client",
    "start": "620519",
    "end": "629959"
  },
  {
    "text": "um and uh the difference between client and the original activities interface is",
    "start": "634760",
    "end": "639920"
  },
  {
    "text": "that it returns not the string or whatever type you specify in the activity signature but it actually turns",
    "start": "639920",
    "end": "647160"
  },
  {
    "text": "promise to that type and also it takes this type as a parameter so for example",
    "start": "647160",
    "end": "652680"
  },
  {
    "text": "get G and acccept promise to string U I'll spend more time later",
    "start": "652680",
    "end": "657760"
  },
  {
    "text": "describing what promise is exactly but the basic idea is that uh it's a result of asynchronous it's placeholder for the",
    "start": "657760",
    "end": "663920"
  },
  {
    "text": "result of asynchronous invocation as the activities can take unpredictable amount of time uh the uh this operation get",
    "start": "663920",
    "end": "672760"
  },
  {
    "text": "name call returns immediately and returns us the promise object and the",
    "start": "672760",
    "end": "678240"
  },
  {
    "text": "same happens about get greting returns greting and returns it immediately uh",
    "start": "678240",
    "end": "683440"
  },
  {
    "text": "note that actual operation happens only when all parameters of that typ of",
    "start": "683440",
    "end": "688480"
  },
  {
    "text": "Promise type so for example get greting activity will run only after name is ready and say Activity will run only",
    "start": "688480",
    "end": "695000"
  },
  {
    "text": "when greting is ready so you canot change them together through those promises a promise kind of similar to",
    "start": "695000",
    "end": "700800"
  },
  {
    "text": "the Java future but the main difference is that Java future is actually not a synchronous programming con construct",
    "start": "700800",
    "end": "707399"
  },
  {
    "text": "it's a synchronization construct because dotg blocks PRS cannot be used for blocking if you call do get on it it's",
    "start": "707399",
    "end": "713800"
  },
  {
    "text": "not ready it will U actually throw illegal State exception not ready so you have to actually just pass it as a",
    "start": "713800",
    "end": "720040"
  },
  {
    "text": "parameter to appropriate operations um also um I use the client",
    "start": "720040",
    "end": "727200"
  },
  {
    "text": "question can arise where the client uh came from U so we can find it here in",
    "start": "727200",
    "end": "734000"
  },
  {
    "text": "the generated code and this app generated is just um it's generated by",
    "start": "734000",
    "end": "740120"
  },
  {
    "text": "the flow framework annotation processor so Java has support for annotation soal",
    "start": "740120",
    "end": "745959"
  },
  {
    "text": "annotation processors these are special components which uh look your code for presence of certain",
    "start": "745959",
    "end": "751920"
  },
  {
    "text": "annotations in this case we are talking about uh workflow and activity",
    "start": "751920",
    "end": "758440"
  },
  {
    "text": "annotation activities annotation and then it works our code and our generator will generate the client for activities",
    "start": "758440",
    "end": "765160"
  },
  {
    "text": "for example so we have greater operations it will create greater uh greater client greater sorry greater",
    "start": "765160",
    "end": "771760"
  },
  {
    "text": "operations client and it's uh for every method uh defined the",
    "start": "771760",
    "end": "780480"
  },
  {
    "text": "um activity it will have a few overloads for that",
    "start": "780480",
    "end": "786120"
  },
  {
    "text": "method but the basic IDE is most important thing that instead of just returning the string it will return",
    "start": "786120",
    "end": "791279"
  },
  {
    "text": "promise to string and uh if you use common line build you need",
    "start": "791279",
    "end": "798360"
  },
  {
    "text": "to include end task which will actually uh run before compiling your code to",
    "start": "798360",
    "end": "803959"
  },
  {
    "text": "make sure that you generate those inv work annotation processor and it generates those client side classes",
    "start": "803959",
    "end": "811120"
  },
  {
    "text": "let's go back to the implementation of our code so actually just changing the",
    "start": "812320",
    "end": "817639"
  },
  {
    "text": "operations to a client and changing the type of variables from strings to",
    "start": "817639",
    "end": "824600"
  },
  {
    "text": "promises to string we practically converted to implementation it looks very similar to what we had but right",
    "start": "824600",
    "end": "831199"
  },
  {
    "text": "now our application is fully converted to the simple workflow you can um run it",
    "start": "831199",
    "end": "838480"
  },
  {
    "text": "for simple worklow and it will be absolutely durable it will U um be full",
    "start": "838480",
    "end": "844720"
  },
  {
    "text": "tolerant you still need to make sure that you will add logic which will for retry operations if they fail but at",
    "start": "844720",
    "end": "852160"
  },
  {
    "text": "least the status of operation uh execution will never be lost and you will be able to uh or you also can for",
    "start": "852160",
    "end": "859120"
  },
  {
    "text": "example create uh invoke the separation even if your workers are not",
    "start": "859120",
    "end": "865240"
  },
  {
    "text": "Runing let's review what what we've done we have a a workflow interface which",
    "start": "865240",
    "end": "873920"
  },
  {
    "text": "defines entry point when we start our workflow execution and we have U",
    "start": "873920",
    "end": "879839"
  },
  {
    "text": "implementation of the workflow which actually uses the U generated client to",
    "start": "879839",
    "end": "885360"
  },
  {
    "text": "invoke activities and then we have activities interface with activities and also some",
    "start": "885360",
    "end": "892480"
  },
  {
    "text": "additional registration options and implementation of activi is actually exactly the same as it would be in the",
    "start": "892480",
    "end": "898440"
  },
  {
    "text": "synchronous case case we can count the number of lines",
    "start": "898440",
    "end": "903759"
  },
  {
    "text": "but you can see that properly we had to add a few lines of annotations and change some code just to return promises",
    "start": "903759",
    "end": "910199"
  },
  {
    "text": "instead of real values I certainly our conversion is not fully done because we have to uh create",
    "start": "910199",
    "end": "918279"
  },
  {
    "text": "um entry points because uh this code is code but we have to execute this code so",
    "start": "918279",
    "end": "923320"
  },
  {
    "text": "we actually have to create worker processes which will pull simple workflow for activity and decision tasks",
    "start": "923320",
    "end": "929639"
  },
  {
    "text": "and in call into the code we wrote We to main",
    "start": "929639",
    "end": "936959"
  },
  {
    "text": "water so we need to create uh activities activity water which is the",
    "start": "936959",
    "end": "944199"
  },
  {
    "text": "class provided by the flow",
    "start": "944199",
    "end": "947519"
  },
  {
    "text": "framework and it takes three parameters I'll I'll describe them in a second and",
    "start": "950920",
    "end": "956800"
  },
  {
    "text": "then we need to uh register activity implementation in this",
    "start": "956800",
    "end": "963199"
  },
  {
    "text": "case v operations Implement",
    "start": "963199",
    "end": "970480"
  },
  {
    "text": "implementation and we need to start the water so we are practically done besides",
    "start": "970480",
    "end": "976720"
  },
  {
    "text": "we need to specify the parameters the service parameter is the actually the reference to the um SDK client uh to",
    "start": "976720",
    "end": "983959"
  },
  {
    "text": "simple work CL service which uh and this uh uh if we",
    "start": "983959",
    "end": "989759"
  },
  {
    "text": "look at that it actually provides operations which correspond directly to the uh operations exposed by by the",
    "start": "989759",
    "end": "996000"
  },
  {
    "text": "simple that service most of them are visibility operations so they're very useful when you want to query uh state",
    "start": "996000",
    "end": "1002800"
  },
  {
    "text": "of the workflows or get the count count tasks count for flows Leist Leist for",
    "start": "1002800",
    "end": "1009199"
  },
  {
    "text": "example close forf flow execution list domains list workflow types and when we",
    "start": "1009199",
    "end": "1014759"
  },
  {
    "text": "pl activities the actually most important operation is po activity task and uh",
    "start": "1014759",
    "end": "1020720"
  },
  {
    "text": "respond activity task completed or respond activity task failed but when you use flow framework you actually",
    "start": "1020720",
    "end": "1026079"
  },
  {
    "text": "don't need to uh deal with that directly because flow framework actually uh provides all this functionality and um",
    "start": "1026079",
    "end": "1033678"
  },
  {
    "text": "EDS this functionality in the activity worker itself so I uh I cheated a little bit and I have this uh con helper which",
    "start": "1033679",
    "end": "1041400"
  },
  {
    "text": "allows me to create the um get the instance of ISF service just",
    "start": "1041400",
    "end": "1047959"
  },
  {
    "text": "to save a few ke here uh and then uh we",
    "start": "1047959",
    "end": "1053440"
  },
  {
    "text": "uh we have the main and the main is just uh the way to partition uh your workflow",
    "start": "1053440",
    "end": "1059760"
  },
  {
    "text": "executions and types into more than one uh bucket inside of the single AAS",
    "start": "1059760",
    "end": "1065200"
  },
  {
    "text": "domain so you can have multiple domains like domain for organization or domain for like one test domain and one pro",
    "start": "1065200",
    "end": "1071960"
  },
  {
    "text": "domain if you want to sh have them under single account and it's kind of similar",
    "start": "1071960",
    "end": "1077360"
  },
  {
    "text": "like it's free bucket right because every object in every bucket is absolutely dependent from any other object",
    "start": "1077360",
    "end": "1084799"
  },
  {
    "text": "so helper I have constant for that defined and task list is actually it's",
    "start": "1086120",
    "end": "1093919"
  },
  {
    "text": "uh what activities are pull from it's kind of has few semantic so when you schedule activity always schedule to",
    "start": "1093919",
    "end": "1099720"
  },
  {
    "text": "task list and when you pull up for activity always P from task Le it's kind of random um",
    "start": "1099720",
    "end": "1107039"
  },
  {
    "text": "U um you you name it any way you want so let's call",
    "start": "1107039",
    "end": "1113760"
  },
  {
    "text": "webinar so this is a complete water implementation uh which um for for our",
    "start": "1116640",
    "end": "1122080"
  },
  {
    "text": "activities let's run it okay it runs uh I don't have any",
    "start": "1122080",
    "end": "1129000"
  },
  {
    "text": "login enabled we don't see much here but how do we know that actually ran uh we can go and uh use ads console",
    "start": "1129000",
    "end": "1138880"
  },
  {
    "text": "um provided by the simple workflow so we have the tab",
    "start": "1146600",
    "end": "1151960"
  },
  {
    "text": "here and",
    "start": "1151960",
    "end": "1155440"
  },
  {
    "text": "uh we have our webinar domain here and",
    "start": "1157080",
    "end": "1164679"
  },
  {
    "text": "uh we can see workflow types we don't have any workflow types registered but we have three activity types registered",
    "start": "1164679",
    "end": "1171320"
  },
  {
    "text": "and what happens is when we start the Walker Walker first thing Walker does it actually register his activity types and",
    "start": "1171320",
    "end": "1179480"
  },
  {
    "text": "uh uh if you start it second time it will try to register them again but it will get already registered exception",
    "start": "1179480",
    "end": "1185760"
  },
  {
    "text": "safely ignore it so it's pretty safe to start Walker and try to register again one thing to understand here is that um",
    "start": "1185760",
    "end": "1192480"
  },
  {
    "text": "as parameters we passed on the registration options which in this case is time timeouts which we specified for",
    "start": "1192480",
    "end": "1198720"
  },
  {
    "text": "5 minutes and 10 seconds uh they they are not they're not changeable so if you",
    "start": "1198720",
    "end": "1205240"
  },
  {
    "text": "specify registration options then for example you change them um it will try to register but it's the type is already",
    "start": "1205240",
    "end": "1211159"
  },
  {
    "text": "registered you won't get uh these values changed so you will need to the way to do that you need to actually change the",
    "start": "1211159",
    "end": "1217400"
  },
  {
    "text": "version of the activity implementations or you can pass them when you actually in work",
    "start": "1217400",
    "end": "1223720"
  },
  {
    "text": "activity so uh we we know that our our workers Ram so let's do the same thing",
    "start": "1223720",
    "end": "1229280"
  },
  {
    "text": "for the um workflow worker actually for brav I will just do it in the same",
    "start": "1229280",
    "end": "1235679"
  },
  {
    "text": "process but you certainly can run them separately and workflow worker corresponds to the decider component in",
    "start": "1235679",
    "end": "1242159"
  },
  {
    "text": "the simple",
    "start": "1242159",
    "end": "1244640"
  },
  {
    "text": "workflow and we use the same parameters one thing to note here is that besides we use the same task list to P is the",
    "start": "1247480",
    "end": "1253840"
  },
  {
    "text": "same name task list for flow workers deciders and activities in different",
    "start": "1253840",
    "end": "1258960"
  },
  {
    "text": "name spaces so they don't really uh mix mix I just use the same name here but",
    "start": "1258960",
    "end": "1264400"
  },
  {
    "text": "again um they won't see each other activity tasks and box flow tasks we need to register the vlow",
    "start": "1264400",
    "end": "1271440"
  },
  {
    "text": "implementation and the difference is that you have to uh register not the instance but the implementation class it",
    "start": "1271440",
    "end": "1278080"
  },
  {
    "text": "has to do the way we reconstruct pH to replay I don't have time to cover it in this presentation I please refer the the",
    "start": "1278080",
    "end": "1284440"
  },
  {
    "text": "documentation um so",
    "start": "1284440",
    "end": "1290159"
  },
  {
    "text": "and we need to start this obviously in the real production environment you probably will have some code which will",
    "start": "1301640",
    "end": "1306760"
  },
  {
    "text": "actually shut down those workers cenly I just pass it right now so uh and here's",
    "start": "1306760",
    "end": "1314279"
  },
  {
    "text": "our workflow worker implementation so if we kill this",
    "start": "1314279",
    "end": "1319559"
  },
  {
    "text": "already running work and run it again and go back to console and list",
    "start": "1319559",
    "end": "1325240"
  },
  {
    "text": "workflow types we will see the workflow type registered and it has the timeout which",
    "start": "1325240",
    "end": "1331559"
  },
  {
    "text": "we we specified so one time out which we didn't specify called task start to close timeout this is very important",
    "start": "1331559",
    "end": "1337720"
  },
  {
    "text": "timeout it's the maximum time single decision can take and usually single decision is milliseconds so it's very",
    "start": "1337720",
    "end": "1343159"
  },
  {
    "text": "short so please don't specify it very uh kind of Big Value I think people doing",
    "start": "1343159",
    "end": "1349080"
  },
  {
    "text": "like hours or days and that means that if single decision times out or fails for any reason means that the bflow will",
    "start": "1349080",
    "end": "1355600"
  },
  {
    "text": "not try to Res scheduled for that amount of time so the only thing which is left for",
    "start": "1355600",
    "end": "1363080"
  },
  {
    "text": "us is actually the component which starts workflows so I'll just copy",
    "start": "1363080",
    "end": "1370278"
  },
  {
    "text": "the uh the way with start workflows again we we need to instead of using directory we need to use client so we",
    "start": "1373919",
    "end": "1380480"
  },
  {
    "text": "will use greater client uh external and the way why the reason we",
    "start": "1380480",
    "end": "1388080"
  },
  {
    "text": "use it external because there is greater client which is not external and um the difference is that a",
    "start": "1388080",
    "end": "1394320"
  },
  {
    "text": "greater client external uh oh I cannot really create that um because you have to use Factory",
    "start": "1394320",
    "end": "1401919"
  },
  {
    "text": "to create",
    "start": "1401919",
    "end": "1405080"
  },
  {
    "text": "uh the reason we called external because it's uh external to the workflow so if",
    "start": "1421760",
    "end": "1426799"
  },
  {
    "text": "you use if you want to create a child workflow inside from inside of workflow logic you will use greater clients in",
    "start": "1426799",
    "end": "1432919"
  },
  {
    "text": "client Factory uh but if you want to use uh",
    "start": "1432919",
    "end": "1439240"
  },
  {
    "text": "client started from outside of workflow process which is like any web server or client like common line applications we",
    "start": "1439240",
    "end": "1446279"
  },
  {
    "text": "are right and right now then you will uh uh create it using external so this",
    "start": "1446279",
    "end": "1453039"
  },
  {
    "text": "is the whole code all we do we just get the factory get the client and then call greed this will create new workflow",
    "start": "1453039",
    "end": "1459480"
  },
  {
    "text": "instance actually this call will go to the simple workflow and call start FL and um other point here that uh yeah",
    "start": "1459480",
    "end": "1467080"
  },
  {
    "text": "so let's run it uh other point is that you actually uh why what makes your application full",
    "start": "1467080",
    "end": "1474000"
  },
  {
    "text": "tolerant is that you don't actually even have after types are registered you don't have to have your workers running",
    "start": "1474000",
    "end": "1479600"
  },
  {
    "text": "so we don't have I killed all workers so we don't have them running but workflow",
    "start": "1479600",
    "end": "1486120"
  },
  {
    "text": "create workflow execution uh okay it executed let's do it second",
    "start": "1486120",
    "end": "1496000"
  },
  {
    "text": "time and if we go to the console we will see to active workflow",
    "start": "1496960",
    "end": "1504440"
  },
  {
    "text": "executions and type G one right and uh if you look uh it we see all timeouts",
    "start": "1504440",
    "end": "1512080"
  },
  {
    "text": "and parameters of that workflow execution and also we can look and look at the events which is a history which",
    "start": "1512080",
    "end": "1517919"
  },
  {
    "text": "uh of the workflow execution so it has only two events first is workflow execution",
    "start": "1517919",
    "end": "1523559"
  },
  {
    "text": "started and uh which contains all arguments of workflow as our workflow doesn't take any arguments they are",
    "start": "1523559",
    "end": "1528880"
  },
  {
    "text": "caniz Json format here this EMP array of arguments and then we see decision task",
    "start": "1528880",
    "end": "1534360"
  },
  {
    "text": "schedule what it means that it waits for the decider to come up and make a decision but as our Walker is down uh we",
    "start": "1534360",
    "end": "1539840"
  },
  {
    "text": "don't see any uh there is no any progress on the",
    "start": "1539840",
    "end": "1545399"
  },
  {
    "text": "workflow but uh you see that you could create instance and it's independently of your waterers being up uh it's it's",
    "start": "1545399",
    "end": "1551000"
  },
  {
    "text": "created and it's stored and you can see it history let's uh bring up the water",
    "start": "1551000",
    "end": "1558399"
  },
  {
    "text": "uh as we had two instances we added uping Hello World twice obviously in real scenario you proba always run more",
    "start": "1570039",
    "end": "1575720"
  },
  {
    "text": "than one water because uh you for full tolerance and usually um the most",
    "start": "1575720",
    "end": "1581720"
  },
  {
    "text": "important thing is that um deci FL worker it's stateless because it makes decision guess history makes a decision",
    "start": "1581720",
    "end": "1588480"
  },
  {
    "text": "using the logic you specified and then discuss the state of your worklow so don't think that there is any like",
    "start": "1588480",
    "end": "1594399"
  },
  {
    "text": "threed or any resource on the worker which is waiting during the workflow execution can take very long time the",
    "start": "1594399",
    "end": "1601159"
  },
  {
    "text": "only thing which uh the only resource which is taken if a workflow is not active is actually uh resources inside",
    "start": "1601159",
    "end": "1607240"
  },
  {
    "text": "of the simple workflow the storage there and uh also if you activ are also usually stat so we we created we have",
    "start": "1607240",
    "end": "1616039"
  },
  {
    "text": "right now uh two workers running let's try to create new",
    "start": "1616039",
    "end": "1622520"
  },
  {
    "text": "instance um what we call execution on the",
    "start": "1624520",
    "end": "1629559"
  },
  {
    "text": "workflow and let's look at the worker output we saw that uh some of the",
    "start": "1632520",
    "end": "1639960"
  },
  {
    "text": "activities execute in one worker and some of them execute another worker uh let's look in the console so we have",
    "start": "1639960",
    "end": "1646840"
  },
  {
    "text": "this uh we don't have active executions why because uh they",
    "start": "1646840",
    "end": "1651880"
  },
  {
    "text": "completed oops I so we see that they completed let's",
    "start": "1651880",
    "end": "1658960"
  },
  {
    "text": "look at them so we see that first get name then get GRE and then say activities executed",
    "start": "1658960",
    "end": "1665440"
  },
  {
    "text": "they completed we see when they were scheduled when they started when they completed and U that is a what",
    "start": "1665440",
    "end": "1672200"
  },
  {
    "text": "activities view other view which is U very useful in troubleshooting is events",
    "start": "1672200",
    "end": "1677760"
  },
  {
    "text": "view which is is a pure history View and it just represents every event in the history we already saw the initially",
    "start": "1677760",
    "end": "1685519"
  },
  {
    "text": "extion started decision schedule but when we brought up our work floor worker it's start of the decision and we",
    "start": "1685519",
    "end": "1692080"
  },
  {
    "text": "actually can see the identity of that worker which is p in the machine name usually by default and you have control",
    "start": "1692080",
    "end": "1698519"
  },
  {
    "text": "over identity so you can actually specify different identities for your workers and",
    "start": "1698519",
    "end": "1705480"
  },
  {
    "text": "uh you you you you you see when it started and who started it then you see",
    "start": "1705760",
    "end": "1711120"
  },
  {
    "text": "it completion and uh then you see the result of the decision was that activity was C and we can see the argument input",
    "start": "1711120",
    "end": "1719679"
  },
  {
    "text": "and again get get name doesn't have any input so it's empty area of arguments and",
    "start": "1719679",
    "end": "1726000"
  },
  {
    "text": "uh when we see when the activity completion event which provides the",
    "start": "1726000",
    "end": "1731559"
  },
  {
    "text": "results so we see result here so and then we see a new decision new activity execution then again third",
    "start": "1731559",
    "end": "1739080"
  },
  {
    "text": "activity execution the last activity didn't return anything but which was say",
    "start": "1739080",
    "end": "1744559"
  },
  {
    "text": "Activity but it actually got input which was Hello World stream and then uh practically what I'm",
    "start": "1744559",
    "end": "1752519"
  },
  {
    "text": "I'm trying to convey here is that you see the full uh every step of your workflow and it's very good for troubleshooting also it has it's a very",
    "start": "1752519",
    "end": "1759480"
  },
  {
    "text": "nice debugging tool because you actually can point your FL code to this history to the service and uh replay the in",
    "start": "1759480",
    "end": "1766960"
  },
  {
    "text": "debugger as many times as you want the execution sequence of uh the way you workflow executed in production without",
    "start": "1766960",
    "end": "1773080"
  },
  {
    "text": "affecting real production because you just reach history repl it so you actually if youve got bu you can reproduce it easily uh using the",
    "start": "1773080",
    "end": "1780480"
  },
  {
    "text": "framework okay going back to the uh our client U so one one uh one point I I",
    "start": "1780480",
    "end": "1787919"
  },
  {
    "text": "want to make okay sorry I switched too early U that workflow execution IDs here are",
    "start": "1787919",
    "end": "1795840"
  },
  {
    "text": "just good why because you didn't provide any how you provide the ID you would",
    "start": "1795840",
    "end": "1801559"
  },
  {
    "text": "just go and uh pass it here and get client so I say",
    "start": "1801559",
    "end": "1806640"
  },
  {
    "text": "ID one and let's uh kill",
    "start": "1806640",
    "end": "1812919"
  },
  {
    "text": "Waters and uh try to start workflow",
    "start": "1812919",
    "end": "1818919"
  },
  {
    "text": "again okay started we let's look active executions",
    "start": "1820440",
    "end": "1826360"
  },
  {
    "text": "and we see execution ID one and U then if want create ad2 we will",
    "start": "1826360",
    "end": "1832399"
  },
  {
    "text": "create",
    "start": "1832399",
    "end": "1834679"
  },
  {
    "text": "ad2 what happens if I try to create id2",
    "start": "1840720",
    "end": "1845480"
  },
  {
    "text": "again we actually get the failure from the service and error code is workflow execution already started fold what it",
    "start": "1848039",
    "end": "1854399"
  },
  {
    "text": "means that you cannot have more than one workflow execution with the given idea active at time so it's hard guarantee",
    "start": "1854399",
    "end": "1859919"
  },
  {
    "text": "provideed by the service and I want to reiterate the um kind of a few times that uh simple vlow is a fully",
    "start": "1859919",
    "end": "1866840"
  },
  {
    "text": "consistent service we don't do any eventual consistency stuff uh every time",
    "start": "1866840",
    "end": "1872799"
  },
  {
    "text": "decid SE history it's absolutely fully consistent uh we don't duplicate tasks so if our activity was scheduled we will",
    "start": "1872799",
    "end": "1878919"
  },
  {
    "text": "be scheduled at least mostly once and then if it fails failure will be delivered back to the workfl ore to the",
    "start": "1878919",
    "end": "1884279"
  },
  {
    "text": "decider but framework and service is never duplicate activities so it's a",
    "start": "1884279",
    "end": "1890600"
  },
  {
    "text": "fully consistent Service uh so let's uh let's go back and",
    "start": "1890600",
    "end": "1896639"
  },
  {
    "text": "review look at this slide slide which shows what we actually have done so we",
    "start": "1896639",
    "end": "1902159"
  },
  {
    "text": "wanted to create the this distributed in full to and hello world U how does it",
    "start": "1902159",
    "end": "1908039"
  },
  {
    "text": "actually work so the the standard simple work architecture is that you have worker uh components Which pull uh for",
    "start": "1908039",
    "end": "1916120"
  },
  {
    "text": "tasks on the task list for print hello and get name uh tasks and then execute",
    "start": "1916120",
    "end": "1922639"
  },
  {
    "text": "them and report results back right and we have decider component which pulls",
    "start": "1922639",
    "end": "1927679"
  },
  {
    "text": "for decision tasks and then provides the result of decision",
    "start": "1927679",
    "end": "1932760"
  },
  {
    "text": "pack um so you you wrote some code uh using Java and familiar Java construct",
    "start": "1932760",
    "end": "1939559"
  },
  {
    "text": "and the framework what flow framework does is actually uh the worker workers",
    "start": "1939559",
    "end": "1944679"
  },
  {
    "text": "they implement the decider and the activity uh activity implementations and vision consulate all poing and",
    "start": "1944679",
    "end": "1950679"
  },
  {
    "text": "dispatching logic and that your workflow logic together with the framework code becomes the",
    "start": "1950679",
    "end": "1956480"
  },
  {
    "text": "decider and then your activity implementation plus activity worker code",
    "start": "1956480",
    "end": "1961519"
  },
  {
    "text": "become the activity",
    "start": "1961519",
    "end": "1964320"
  },
  {
    "text": "implementation uh why uh you really wanted to to do such transition like",
    "start": "1966840",
    "end": "1972679"
  },
  {
    "text": "right quote using the um simple workflow uh for me um at least we've got a lot of",
    "start": "1972679",
    "end": "1980200"
  },
  {
    "text": "teams inside of Amazon using the simple workflow uh the main reason people um",
    "start": "1980200",
    "end": "1986679"
  },
  {
    "text": "like I think us users and it's primary reason is because they want guarantees",
    "start": "1986679",
    "end": "1991760"
  },
  {
    "text": "and want full tolerance and uh and that simple application we just",
    "start": "1991760",
    "end": "1998559"
  },
  {
    "text": "showed actually pretty complex application because it's based on consistent storage and we guarantee that",
    "start": "1998559",
    "end": "2004760"
  },
  {
    "text": "things executed only once and as workers are stateless it means that uh practically any worker can go down any",
    "start": "2004760",
    "end": "2010960"
  },
  {
    "text": "time and uh simple workflow practically contain maintains the state of the",
    "start": "2010960",
    "end": "2017080"
  },
  {
    "text": "workflow so uh brighten brighten application uh full T application when",
    "start": "2017080",
    "end": "2022600"
  },
  {
    "text": "your workers are stateless is trival uh that's why that's why developers love it because they can just focus on their",
    "start": "2022600",
    "end": "2029120"
  },
  {
    "text": "business logic and U make sure that their work restart if then fail and uh",
    "start": "2029120",
    "end": "2035120"
  },
  {
    "text": "they and they don't need to do anything else here and uh other other reason to use Simple",
    "start": "2035120",
    "end": "2042399"
  },
  {
    "text": "workflow and flow framework is scalability uh because uh as it's hosted at the B Service uh it was built to be",
    "start": "2042399",
    "end": "2050440"
  },
  {
    "text": "very highly scalable and it means that if your load goes up it's our problem to",
    "start": "2050440",
    "end": "2056960"
  },
  {
    "text": "provision enough hardware and have make sure that we can support your load so",
    "start": "2056960",
    "end": "2062320"
  },
  {
    "text": "you really don't need to change anything in your application if if you need to high support higher traffic",
    "start": "2062320",
    "end": "2068480"
  },
  {
    "text": "uh and again as your workers are stateless it means that from your point of view scalability again is a location just more workers but you need toed",
    "start": "2068480",
    "end": "2074679"
  },
  {
    "text": "design anything because everybody knows that it's trivial to scale stateless applications and um also um as we are",
    "start": "2074679",
    "end": "2082919"
  },
  {
    "text": "talking about activities activities can be very different some of them can be very heavyweight and can consume a lot",
    "start": "2082919",
    "end": "2088919"
  },
  {
    "text": "of resources so you actually can scale every activity type um or even kind of",
    "start": "2088919",
    "end": "2094760"
  },
  {
    "text": "sub not even type because you can actually have the same activity implementation but for example for",
    "start": "2094760",
    "end": "2099960"
  },
  {
    "text": "different arguments uh have different performance characteristics but you can have different pools of workers uh for",
    "start": "2099960",
    "end": "2106440"
  },
  {
    "text": "for those and also I showed you console U that you give uh you have full control",
    "start": "2106440",
    "end": "2113400"
  },
  {
    "text": "invisibility about your execution right so the orchestration logic code the workflow code gives you full",
    "start": "2113400",
    "end": "2120560"
  },
  {
    "text": "control over your tasks because uh for example if you try to implement even the simple example I showed you using for",
    "start": "2120560",
    "end": "2126240"
  },
  {
    "text": "example cues or database uh it's it's like especially cues um if",
    "start": "2126240",
    "end": "2133200"
  },
  {
    "text": "you ask you what's the state of current execution okay it's some message somewhere and how do you like find find",
    "start": "2133200",
    "end": "2140359"
  },
  {
    "text": "what's the current state and if it's complex system it can be 55 messages in different places backed ups for being",
    "start": "2140359",
    "end": "2145760"
  },
  {
    "text": "processed and it's very hard to make sense what's going on in the system the simple workflow you always know exactly",
    "start": "2145760",
    "end": "2151960"
  },
  {
    "text": "what's going on and you have a full uh history of every event which happened and uh",
    "start": "2151960",
    "end": "2158640"
  },
  {
    "text": "also the console goes for visibility API doesn't have any back door so everything you can do in console you can do for the",
    "start": "2158640",
    "end": "2163880"
  },
  {
    "text": "API service apis it means that you can uh integrate your own tools or common",
    "start": "2163880",
    "end": "2169319"
  },
  {
    "text": "line utilities or dashboards uh through that",
    "start": "2169319",
    "end": "2175160"
  },
  {
    "text": "API so what Ed flow framework is that most important point is that it it's",
    "start": "2176599",
    "end": "2182440"
  },
  {
    "text": "just sits on top of standard um simple workflow um service",
    "start": "2182440",
    "end": "2189040"
  },
  {
    "text": "API and it allows you to write distributed applications using that and you build a decided activity workers but",
    "start": "2189040",
    "end": "2196040"
  },
  {
    "text": "again you all you need to think is about activities operations and you workflow code as just Java code but asynchronous",
    "start": "2196040",
    "end": "2202839"
  },
  {
    "text": "code so you model your workflow definition is as synchronous program and there are some technical reasons to for",
    "start": "2202839",
    "end": "2209079"
  },
  {
    "text": "this program to be asynchronous like Java not supporting things like fibers but at the same time uh what we found",
    "start": "2209079",
    "end": "2215480"
  },
  {
    "text": "that for a lot of workflows have very non-trivial workflow control control",
    "start": "2215480",
    "end": "2220599"
  },
  {
    "text": "paths and it's actually easier to model them using promises and I synchronous",
    "start": "2220599",
    "end": "2226480"
  },
  {
    "text": "computation then uh trying to model them as threats or as U um those those",
    "start": "2226480",
    "end": "2231960"
  },
  {
    "text": "control parts fit very well the synchronous model and U also it's most",
    "start": "2231960",
    "end": "2239240"
  },
  {
    "text": "important when you write your code you just write your business logic using St standard Java constructs play Old Java",
    "start": "2239240",
    "end": "2244640"
  },
  {
    "text": "objects you can have methods Fields uh if you have practically everything you do in Java is allowable there are some",
    "start": "2244640",
    "end": "2250800"
  },
  {
    "text": "kind of minor limitations about external calls like nonblocking calls and um but",
    "start": "2250800",
    "end": "2256319"
  },
  {
    "text": "uh you practic have full power in Java in your hands when you write your",
    "start": "2256319",
    "end": "2263040"
  },
  {
    "text": "workflows so um let's let's go back and look I I I mentioned a few times the activities client what what is actually",
    "start": "2263040",
    "end": "2270240"
  },
  {
    "text": "where it's coming from uh simple EDS flow provides The annotation processor",
    "start": "2270240",
    "end": "2275800"
  },
  {
    "text": "it's standard Java annotation processor which looks anotation and uses standard Java mechanism to generate um to analyze",
    "start": "2275800",
    "end": "2284319"
  },
  {
    "text": "the source code and then generat the client so practically every time you put anotation activities annotation on an",
    "start": "2284319",
    "end": "2290319"
  },
  {
    "text": "interface the framework code will automatically generate the client uh the client code and the main difference is",
    "start": "2290319",
    "end": "2296800"
  },
  {
    "text": "that it will just take that client code and uh um change it to return promises",
    "start": "2296800",
    "end": "2302280"
  },
  {
    "text": "instead of values because all invocations are synchronous um it has more",
    "start": "2302280",
    "end": "2308280"
  },
  {
    "text": "it's simplified version it has more overloads um mostly um around passing",
    "start": "2308280",
    "end": "2314000"
  },
  {
    "text": "additional parameters like timeout or task list into activity in vacation and",
    "start": "2314000",
    "end": "2319520"
  },
  {
    "text": "also it generates U uh uh this the same way it generates the",
    "start": "2319520",
    "end": "2326319"
  },
  {
    "text": "client external client and client for the uh workflow I can show it actually in the clipse uh what you do",
    "start": "2326319",
    "end": "2334960"
  },
  {
    "text": "um if you go to the compiler annotation processing uh for",
    "start": "2334960",
    "end": "2341520"
  },
  {
    "text": "any process which uh um uses flow has to have annotation processing enabled and",
    "start": "2341520",
    "end": "2347760"
  },
  {
    "text": "usually by default it has a directory name with stting with DOT I usually remove this Dot and what it gives us it",
    "start": "2347760",
    "end": "2354520"
  },
  {
    "text": "gives um this makes this directory visible and has generated code here",
    "start": "2354520",
    "end": "2360400"
  },
  {
    "text": "so here is the uh client code for the workflow we see three overides and uh",
    "start": "2360400",
    "end": "2368680"
  },
  {
    "text": "okay this one I describe a minute later but basic idea that you can get additional start",
    "start": "2368680",
    "end": "2374079"
  },
  {
    "text": "options and uh these options as we saw it's this",
    "start": "2374079",
    "end": "2379880"
  },
  {
    "text": "timeout so this timeout can be passed in you start workfl instead of registration U so what what the promises",
    "start": "2379880",
    "end": "2389200"
  },
  {
    "text": "uh so as I described promises like future like object but uh in in operations non blocking how do you wait",
    "start": "2389200",
    "end": "2395280"
  },
  {
    "text": "for it the way the way you wait for promise to become ready you actually pass it as a parameter to the method and",
    "start": "2395280",
    "end": "2401359"
  },
  {
    "text": "this method should have a synchronous annotation so the semantic is that as soon as method is marked as asynchronous",
    "start": "2401359",
    "end": "2407920"
  },
  {
    "text": "um you call it its body won't be executed immediately it will return immediately and but the body will be",
    "start": "2407920",
    "end": "2414760"
  },
  {
    "text": "executed only when all parameters of type promise are ready so it is safe to call get on it because uh if method is",
    "start": "2414760",
    "end": "2422720"
  },
  {
    "text": "Mark as as synchronous and parameters of type promise as soon as this method is executed Ed it uh",
    "start": "2422720",
    "end": "2430520"
  },
  {
    "text": "it's uh all all promises are guaranteed to be uh",
    "start": "2430520",
    "end": "2436560"
  },
  {
    "text": "already uh so practic this is the main construct you use if inside the workflow code to wait for uh Pro for",
    "start": "2436560",
    "end": "2446480"
  },
  {
    "text": "promises actually other important point that this is a little bit different code than I specified in in the um sample is",
    "start": "2446880",
    "end": "2455440"
  },
  {
    "text": "that here we don't pass name to the greeting so what it means that activity get name return is returned immediately",
    "start": "2455440",
    "end": "2462760"
  },
  {
    "text": "then uh it means that get greting is invoked immediately and we actually will run both of these activities in parallel",
    "start": "2462760",
    "end": "2469240"
  },
  {
    "text": "and then GD will wait for both of them to complete so you have this kind of split joint scenario if you use standard",
    "start": "2469240",
    "end": "2474800"
  },
  {
    "text": "work FL terminology but just implement it naturally through Java code you run the two activities in parall then you",
    "start": "2474800",
    "end": "2480720"
  },
  {
    "text": "have f one waiting on results of both of them uh other important part of uh frame",
    "start": "2480720",
    "end": "2488839"
  },
  {
    "text": "the framework um and without it it probably wouldn't be that useful is error handling because as we have U",
    "start": "2488839",
    "end": "2496119"
  },
  {
    "text": "computation I think as computation going on which has multiple things running in parallel uh we have to deal with errors",
    "start": "2496119",
    "end": "2502720"
  },
  {
    "text": "and we cannot just rely on exceptions uh because uh exceptions in",
    "start": "2502720",
    "end": "2509160"
  },
  {
    "text": "as synchronous code are not that really useful and um standard way to do that",
    "start": "2509160",
    "end": "2514839"
  },
  {
    "text": "would be returning the error inside of the pr say for example Java does with future uh the problem with that approach",
    "start": "2514839",
    "end": "2521880"
  },
  {
    "text": "is that it actually um has a lot of drawbacks mainly around of like it's",
    "start": "2521880",
    "end": "2528599"
  },
  {
    "text": "like return code it can be ignored or it also it doesn't provide help this",
    "start": "2528599",
    "end": "2534839"
  },
  {
    "text": "culation because uh usually what happens is in this case for example we we call",
    "start": "2534839",
    "end": "2540920"
  },
  {
    "text": "uh this get name get GRE and and greet and for example if uh get GRE fails we",
    "start": "2540920",
    "end": "2548000"
  },
  {
    "text": "really want to get name canceled because it can be long run in operation and we we know that we never will need it",
    "start": "2548000",
    "end": "2554559"
  },
  {
    "text": "anymore so what framework does uh it provides Tri finally construct uh the",
    "start": "2554559",
    "end": "2560240"
  },
  {
    "text": "class and if for example any operation inside of the try uh do try fails",
    "start": "2560240",
    "end": "2566000"
  },
  {
    "text": "framework guarantees that will cancel all other operations going inside of that uh construct and only then deliver",
    "start": "2566000",
    "end": "2572760"
  },
  {
    "text": "a exception to the do catch method which itself can be pretty complex I think computation and only when it's done it",
    "start": "2572760",
    "end": "2579680"
  },
  {
    "text": "will call do finally um so there is much more to it I recommend you going through Java do of",
    "start": "2579680",
    "end": "2586559"
  },
  {
    "text": "the triage finally class it has pretty good description of all features of that",
    "start": "2586559",
    "end": "2592599"
  },
  {
    "text": "class uh also um what's interesting that sometime you can Nest them so trackage",
    "start": "2592599",
    "end": "2599400"
  },
  {
    "text": "finally can be Nest inside of D Tri another trackage finally and can end up being canceled itself but even in that",
    "start": "2599400",
    "end": "2605760"
  },
  {
    "text": "situation we guarantee that to finally execute it um while you can practically write uh",
    "start": "2605760",
    "end": "2615160"
  },
  {
    "text": "almost any error handling logic using trackage finally in lot of cases you want a simple solution for example if",
    "start": "2615160",
    "end": "2621160"
  },
  {
    "text": "you want to make sure that if activity fails for any reason times out or really fails uh you want to retry it so we",
    "start": "2621160",
    "end": "2629480"
  },
  {
    "text": "provide out of the books a few annotations to expansion try one of them that you can put in any asynchronous",
    "start": "2629480",
    "end": "2635920"
  },
  {
    "text": "method and uh it will retrive that method call in case of failure uh according to the",
    "start": "2635920",
    "end": "2642880"
  },
  {
    "text": "parameters so just taking expens retri to get name would cause get name being",
    "start": "2642880",
    "end": "2648599"
  },
  {
    "text": "retried as many times it's specified and uh um this way you can make your",
    "start": "2648599",
    "end": "2654960"
  },
  {
    "text": "application fa or on like because there is fa orance of the keeping state of the application but then if activity fails",
    "start": "2654960",
    "end": "2660200"
  },
  {
    "text": "you need to Define your business logic and this way you can make your business logic full",
    "start": "2660200",
    "end": "2665720"
  },
  {
    "text": "to U u i i this presentation is pretty short",
    "start": "2665720",
    "end": "2672680"
  },
  {
    "text": "so we don't have much time to um cover everything and I just want to mention a few other things which framework",
    "start": "2672680",
    "end": "2679559"
  },
  {
    "text": "supports so certainly it supports timer so you can schedule activity so any like",
    "start": "2679559",
    "end": "2684800"
  },
  {
    "text": "anything based on time so you can create like distributed Chrome job so",
    "start": "2684800",
    "end": "2689920"
  },
  {
    "text": "practically any business process which requires some um time handling uh is supported uh we support signals um um",
    "start": "2689920",
    "end": "2699040"
  },
  {
    "text": "naturally um which which is the way you can identify workflow execution about",
    "start": "2699480",
    "end": "2704720"
  },
  {
    "text": "some out of bound events uh certainly we support child workflows uh workflows",
    "start": "2704720",
    "end": "2710280"
  },
  {
    "text": "kind of continuous workflows which resets themselves in the same ID uh manual completion activities uh the way",
    "start": "2710280",
    "end": "2717839"
  },
  {
    "text": "you practically uh disconnect activity uh exe activity from the activity Fred",
    "start": "2717839",
    "end": "2723920"
  },
  {
    "text": "so practicly you can have activity which again sends aail to the user then user replies then completes activity it's",
    "start": "2723920",
    "end": "2730359"
  },
  {
    "text": "also supported uh certainly workers have a lot of configuration option which allowed to configure how activities and",
    "start": "2730359",
    "end": "2737000"
  },
  {
    "text": "executed and how many polar threats activity threats rates so there are a lot of options",
    "start": "2737000",
    "end": "2743079"
  },
  {
    "text": "there um um certain there are a lot of interesting troubleshooting techniques how you troubleshoot workflows how what",
    "start": "2743079",
    "end": "2749680"
  },
  {
    "text": "information is available through um uh console what available in the",
    "start": "2749680",
    "end": "2754839"
  },
  {
    "text": "framework um one thing to for is I recommend going for documentation is replay and um what it",
    "start": "2754839",
    "end": "2761960"
  },
  {
    "text": "says about determinism because it actually puts certain restrictions what you can do you cannot do inside of the workflow",
    "start": "2761960",
    "end": "2767920"
  },
  {
    "text": "code uh other interesting topic is how you actually route tasks to particular boxes or particular set sets of work",
    "start": "2767920",
    "end": "2774319"
  },
  {
    "text": "using task list uh we have integration with junit so you can unit test any part of your workflow logic and we have",
    "start": "2774319",
    "end": "2781880"
  },
  {
    "text": "spring integration so you can actually create workflow um objects activities",
    "start": "2781880",
    "end": "2787720"
  },
  {
    "text": "through spring so why do you want to use fla just kind of to reiterate that it's a",
    "start": "2787720",
    "end": "2794319"
  },
  {
    "text": "relatively easy to start I showed you that uh it's not that hard to actually have fully working application minutes",
    "start": "2794319",
    "end": "2801359"
  },
  {
    "text": "uh but at the same time it's actually uh our experience is that it actually has",
    "start": "2801359",
    "end": "2806599"
  },
  {
    "text": "very good uh track record scale into really complex applications because uh",
    "start": "2806599",
    "end": "2812359"
  },
  {
    "text": "you have full power of object or of object design so you actually can",
    "start": "2812359",
    "end": "2817599"
  },
  {
    "text": "uh uh uh as soon as your problem problem",
    "start": "2817599",
    "end": "2822880"
  },
  {
    "text": "becomes complex you can actually redesign your application using all techniques and U again deal with complexity also error handling helps",
    "start": "2822880",
    "end": "2830040"
  },
  {
    "text": "having the error handling which works in a synchronous case allows you to have very complex applications and uh",
    "start": "2830040",
    "end": "2836599"
  },
  {
    "text": "still them being manageable and",
    "start": "2836599",
    "end": "2841680"
  },
  {
    "text": "and so other thing that uh you can focus in business logic we uh",
    "start": "2842240",
    "end": "2847599"
  },
  {
    "text": "framework plus simple workflow let us deal with all complex problems of distributed systems and then you just do",
    "start": "2847599",
    "end": "2855079"
  },
  {
    "text": "your business logic obviously your business logic will be distributed as well so you need to deal with that you need to make sure that you retry your",
    "start": "2855079",
    "end": "2861160"
  },
  {
    "text": "activity execution so Implement compensations using for example trackage",
    "start": "2861160",
    "end": "2866640"
  },
  {
    "text": "semantic but uh again the hard hard stuff is Sol you you focus on your business project and also framework",
    "start": "2866640",
    "end": "2872480"
  },
  {
    "text": "doesn't require you to implement any framework constraints right you use you code use using PL old Java object",
    "start": "2872480",
    "end": "2878839"
  },
  {
    "text": "patterns um also as the framework is B generic using promises and Java code you",
    "start": "2878839",
    "end": "2884280"
  },
  {
    "text": "pratic can Implement easily any control flow workflow patterns uh there is this patterns repository on the web of the",
    "start": "2884280",
    "end": "2891920"
  },
  {
    "text": "workflow patterns there are some patterns which are pretty evolved which most existing projects don't support and",
    "start": "2891920",
    "end": "2897839"
  },
  {
    "text": "for me actually took longer to understand the pattern uh what pattern want from me and what the use case then",
    "start": "2897839",
    "end": "2903400"
  },
  {
    "text": "actually to implement that then I try to prototype those um other thing is that",
    "start": "2903400",
    "end": "2910040"
  },
  {
    "text": "uh I showed you the way code is generated and that you use generated code but you don't really have to do",
    "start": "2910040",
    "end": "2915440"
  },
  {
    "text": "that we are Dynamic clients so you can actually invoke activities by name and by version and by list of arguments",
    "start": "2915440",
    "end": "2920640"
  },
  {
    "text": "explicitly and this is pretty common then you for example want Implement as a domain specific language on top of low",
    "start": "2920640",
    "end": "2926760"
  },
  {
    "text": "you can pass your config file and then VI your object graph accordingly uh",
    "start": "2926760",
    "end": "2932240"
  },
  {
    "text": "using promises and then let it execute uh so it's pretty straightforward to create U like this example deployment",
    "start": "2932240",
    "end": "2940720"
  },
  {
    "text": "example um I I think uh in this samples we provide and it shows how for example",
    "start": "2940720",
    "end": "2946440"
  },
  {
    "text": "to do data driven uh dependencies uh using flow uh also um we wanted people",
    "start": "2946440",
    "end": "2955240"
  },
  {
    "text": "not be very concerned about vendor L and so it's the library is open sourced it's on GitHub it's appach it to license and",
    "start": "2955240",
    "end": "2962880"
  },
  {
    "text": "as again as you write code using PL old Java objects not 12 not to kind of any",
    "start": "2962880",
    "end": "2968520"
  },
  {
    "text": "Amazon specific apis uh you actually make sure that you can have your code",
    "start": "2968520",
    "end": "2974760"
  },
  {
    "text": "not very dependent on the Amazon infrastructure if you really have that",
    "start": "2974760",
    "end": "2980920"
  },
  {
    "text": "concern this is B sub the product manager and we're going to cover some of the higher level questions first and",
    "start": "2984119",
    "end": "2990559"
  },
  {
    "text": "then we'll go back to uh some of the more programming questions which Max will",
    "start": "2990559",
    "end": "2995640"
  },
  {
    "text": "handle some basic questions uh about whether this webinar will be available for later",
    "start": "2995640",
    "end": "3001359"
  },
  {
    "text": "review will we will have a recording of the webinar available and um we'll post it on our YouTube channel there'll also",
    "start": "3001359",
    "end": "3007880"
  },
  {
    "text": "be links to that post in our forum and then there were many questions about whether the framework is available",
    "start": "3007880",
    "end": "3014559"
  },
  {
    "text": "only in Java and what about net Ruby Python and F currently uh the framework",
    "start": "3014559",
    "end": "3020520"
  },
  {
    "text": "is available only in Java uh we are working on uh making it available in other languages as well",
    "start": "3020520",
    "end": "3027440"
  },
  {
    "text": "related question was what about non- Java development so uh the flow framework of course uh lets you use all",
    "start": "3027440",
    "end": "3034040"
  },
  {
    "text": "the features of s swf but you can also use S swf in other languages just using",
    "start": "3034040",
    "end": "3039200"
  },
  {
    "text": "the various sdks that we provide so we have sdks for PHP ruby. net and",
    "start": "3039200",
    "end": "3044680"
  },
  {
    "text": "Python and use allw features using um using those",
    "start": "3044680",
    "end": "3049880"
  },
  {
    "text": "sdks and then there was a question about whether s swf is based on some thirdparty tools if you're asking about",
    "start": "3049880",
    "end": "3056520"
  },
  {
    "text": "the flow framework some of the dependencies yes there are some dependencies on other libraries uh the code is available for the flow framework",
    "start": "3056520",
    "end": "3063559"
  },
  {
    "text": "on GitHub uh it's open sourced so you can download it and look at it and uh we",
    "start": "3063559",
    "end": "3069240"
  },
  {
    "text": "encourage you to contribute it to to it as well as for swf itself it's a service",
    "start": "3069240",
    "end": "3074319"
  },
  {
    "text": "that we uh manage and run and uh it was built by Amazon um and then there was questions",
    "start": "3074319",
    "end": "3081280"
  },
  {
    "text": "about um whether s swf is a whether swf provides a graphical tool like other BPM",
    "start": "3081280",
    "end": "3088119"
  },
  {
    "text": "tools so in our experience what we have found is that when people are doing BPM uh they use the tools for the modeling",
    "start": "3088119",
    "end": "3094599"
  },
  {
    "text": "but then there is also the implementation aspect of it which is often the more um difficult thing to do",
    "start": "3094599",
    "end": "3101200"
  },
  {
    "text": "so what s swf provides is the foundational Technologies for you to implement your workflows and any other",
    "start": "3101200",
    "end": "3106720"
  },
  {
    "text": "business applications or distributed applications and it's very easy to do mappings between like bpmn and uh bpmm",
    "start": "3106720",
    "end": "3114960"
  },
  {
    "text": "and xpdl uh to the flow framework or to the service apis and we see some of our customers doing that already uh so we do",
    "start": "3114960",
    "end": "3122280"
  },
  {
    "text": "not provide a graphical Tool uh but more importantly we provide the very strong Foundation that is scalable and reliable",
    "start": "3122280",
    "end": "3129680"
  },
  {
    "text": "for your business proces and distributed applications and then there was a question about whether there are any",
    "start": "3129680",
    "end": "3135720"
  },
  {
    "text": "presentations about s swf itself if you go to our detail page uh you will find a",
    "start": "3135720",
    "end": "3141359"
  },
  {
    "text": "lot of material you'll also find a link to our previous webinar called introduction to Amazon estf that uh that",
    "start": "3141359",
    "end": "3147160"
  },
  {
    "text": "just talks about s swf and not the flow framework and if there are any specific questions that you have about s swf we",
    "start": "3147160",
    "end": "3153040"
  },
  {
    "text": "encourage you to use our forums uh to post your questions and we monitor them",
    "start": "3153040",
    "end": "3158920"
  },
  {
    "text": "continuously and then there was a question about uh whether all the code executes in the cloud and what computing",
    "start": "3158920",
    "end": "3165559"
  },
  {
    "text": "power is used for that so the workers and the deciders you have complete freedom on where you run them so you can",
    "start": "3165559",
    "end": "3171640"
  },
  {
    "text": "run them on the Amazon Cloud you can run them in your private Data Center and you can choose which computing resource",
    "start": "3171640",
    "end": "3177079"
  },
  {
    "text": "should be used to support your workers and deciders and a related question to that was how are external workers",
    "start": "3177079",
    "end": "3183760"
  },
  {
    "text": "supported um external workers um all all the components workers and deciders pull",
    "start": "3183760",
    "end": "3190400"
  },
  {
    "text": "uh s swf and we use a mechanism called long polling which is more efficient so you can run your workers",
    "start": "3190400",
    "end": "3197440"
  },
  {
    "text": "anywhere you want uh they don't have to be on the Amazon Cloud but since they're just polling s swf you don't have to",
    "start": "3197440",
    "end": "3202839"
  },
  {
    "text": "worry about any firewall issues and such so that's how we support external",
    "start": "3202839",
    "end": "3208000"
  },
  {
    "text": "workers now we'll switch back to",
    "start": "3208000",
    "end": "3212240"
  },
  {
    "text": "Max so the question is what are the valid types of t for promise T So",
    "start": "3216200",
    "end": "3221599"
  },
  {
    "text": "practically generic parameter uh frame framework by uh framework by",
    "start": "3221599",
    "end": "3229440"
  },
  {
    "text": "default uses uh um Jackson to serialize uh arguments so uh anything that Jackson",
    "start": "3229440",
    "end": "3238280"
  },
  {
    "text": "can serialize but um and uh you can pass pass as a argument uh to",
    "start": "3238280",
    "end": "3245520"
  },
  {
    "text": "activity or return from activity but when you use promise inside of the workflow code it actually can be of any",
    "start": "3245520",
    "end": "3251920"
  },
  {
    "text": "type the um so because if it doesn't cross the U boundary the calization",
    "start": "3251920",
    "end": "3258119"
  },
  {
    "text": "boundary there is no any actually restriction it's just Java and can be of any Java type it can be hashmap it can",
    "start": "3258119",
    "end": "3264079"
  },
  {
    "text": "be anything it can be other problems which not very useful construct but very very common construct would be for",
    "start": "3264079",
    "end": "3270319"
  },
  {
    "text": "example promise of list of other promises uh also as I mentioned calization uh",
    "start": "3270319",
    "end": "3278240"
  },
  {
    "text": "it's pluggable so you can plug in your own mechanism to convert Java objects to like string",
    "start": "3278240",
    "end": "3285720"
  },
  {
    "text": "format or back and uh so if you don't like jackon you for example want to do",
    "start": "3285720",
    "end": "3291400"
  },
  {
    "text": "XML or for example you want to do X xpd U um the XM like any any other format",
    "start": "3291400",
    "end": "3299119"
  },
  {
    "text": "you can do it it's especially useful if for example you want to implement your activity work",
    "start": "3299119",
    "end": "3304200"
  },
  {
    "text": "in other languages uh question was do we want to",
    "start": "3304200",
    "end": "3309760"
  },
  {
    "text": "use separate task list for Test Pro or you want to use separate database accounts entirely U I think the good uh if you",
    "start": "3309760",
    "end": "3317480"
  },
  {
    "text": "can use separate database accounts I would recommend it for test prod um just because um there are so many things you",
    "start": "3317480",
    "end": "3323960"
  },
  {
    "text": "can do uh in test which would SC up your a prod that uh if you can do different",
    "start": "3323960",
    "end": "3329119"
  },
  {
    "text": "accounts I would do it if you cannot I would recommend using the main uh for Test Pro task list are mostly",
    "start": "3329119",
    "end": "3337240"
  },
  {
    "text": "throughout activities and workflow workers across multiple kind of business units or like different business use",
    "start": "3337240",
    "end": "3345240"
  },
  {
    "text": "cases uh question is what happens if the execution time out is exceeded is an",
    "start": "3345240",
    "end": "3350559"
  },
  {
    "text": "exception PR um if activity execution time out is exceeded yes the",
    "start": "3350559",
    "end": "3358240"
  },
  {
    "text": "um into the event is inserted in the history and from the workflow point of view it looks like the call to the",
    "start": "3358440",
    "end": "3365200"
  },
  {
    "text": "activity failed is an exception and we have U different exception for different type of failers so you will you can you",
    "start": "3365200",
    "end": "3372319"
  },
  {
    "text": "actually know what type of timeout happen for if it's a scheduled to start timeout to start to complete timeout so",
    "start": "3372319",
    "end": "3378839"
  },
  {
    "text": "it will be part of the exception information um the question was how can we execute",
    "start": "3378839",
    "end": "3385760"
  },
  {
    "text": "many activ is after step one say get name I want to schedule many get greetings as a broadcast I yeah I could",
    "start": "3385760",
    "end": "3391839"
  },
  {
    "text": "show it in Eclipse but basic idea what you would do is it's don't block in code you will just call get name from a loop so you can can imagine doing",
    "start": "3391839",
    "end": "3398400"
  },
  {
    "text": "four equals like 200 and then just call get name and then you put results in uh",
    "start": "3398400",
    "end": "3404480"
  },
  {
    "text": "into the list so list of promises and actually there you can wait on the list",
    "start": "3404480",
    "end": "3410559"
  },
  {
    "text": "of promises to every promise in the list become ready uh using as synchronous",
    "start": "3410559",
    "end": "3415599"
  },
  {
    "text": "method uh so yes you can do broadcast and you can join that",
    "start": "3415599",
    "end": "3421440"
  },
  {
    "text": "broadcast the question is where did the Greaser operation client implementation came from uh it it was automatically",
    "start": "3421440",
    "end": "3428200"
  },
  {
    "text": "generated by The annotation processor which was installed um uh configured",
    "start": "3428200",
    "end": "3434160"
  },
  {
    "text": "this my project in the eclipse so practically you have to if you do common line builds you need to have end task",
    "start": "3434160",
    "end": "3439839"
  },
  {
    "text": "which will invoke annotation processor which will generate this csite code",
    "start": "3439839",
    "end": "3446440"
  },
  {
    "text": "um question is there a Max size for the input yes a service um puts a restriction on the um input of",
    "start": "3446559",
    "end": "3454359"
  },
  {
    "text": "activities 32,000 characters and uh it means that arguments in serialized form",
    "start": "3454359",
    "end": "3461480"
  },
  {
    "text": "should be less so the usual practice is that if you feel that the object can be",
    "start": "3461480",
    "end": "3467799"
  },
  {
    "text": "become large you just store them use for them something like S3 uh to put them aside and you just pass references",
    "start": "3467799",
    "end": "3473880"
  },
  {
    "text": "through the workflow logic",
    "start": "3473880",
    "end": "3478119"
  },
  {
    "text": "uh question how long will a workflow still uh workflow wait if no workers are running is that controlled by At All by",
    "start": "3480440",
    "end": "3488280"
  },
  {
    "text": "the timeout in the workflow registra options correct workflow registration options the time out which we specified",
    "start": "3488280",
    "end": "3494520"
  },
  {
    "text": "was exactly that that it's workflow lifetime time U workflow start to close",
    "start": "3494520",
    "end": "3500559"
  },
  {
    "text": "time out I remember exact name of it but it says how long workflow uh can exist",
    "start": "3500559",
    "end": "3505880"
  },
  {
    "text": "and if nothing happened you just created it and no decider is running at the end it will fail uh and um it will be",
    "start": "3505880",
    "end": "3514640"
  },
  {
    "text": "automatically closed by the",
    "start": "3514640",
    "end": "3517760"
  },
  {
    "text": "system uh can you scale The Works using cloud formation it's not something we do",
    "start": "3520000",
    "end": "3526400"
  },
  {
    "text": "automatically because we give you complete freedom on how you do that uh for example the sample that we have in",
    "start": "3526400",
    "end": "3532480"
  },
  {
    "text": "the console that actually uses a cloud formation template to spin up the workers that are required for that",
    "start": "3532480",
    "end": "3538480"
  },
  {
    "text": "sample so that is definitely possible um can you show how to cancel",
    "start": "3538480",
    "end": "3546880"
  },
  {
    "text": "long running workflow programmatically for a manual action uh practic um I I don't have time right now but U the",
    "start": "3546880",
    "end": "3554119"
  },
  {
    "text": "Amazon simple workflow client uh has U try request workflow cancel operation",
    "start": "3554119",
    "end": "3561960"
  },
  {
    "text": "and uh and it's already integrated this this flow framework so if you call that operation on passing workflow instance",
    "start": "3561960",
    "end": "3569200"
  },
  {
    "text": "ID uh it will the canellation request will will be received and the workflow",
    "start": "3569200",
    "end": "3575559"
  },
  {
    "text": "will perform a CLE clean shutdown what by that I mean that all catch and",
    "start": "3575559",
    "end": "3580960"
  },
  {
    "text": "finally blocks will be executed of all Tri cage um finally uh",
    "start": "3580960",
    "end": "3588000"
  },
  {
    "text": "classs how do I change timeout and dynamic timeouts so if uh registration",
    "start": "3590400",
    "end": "3596319"
  },
  {
    "text": "the only registration options are not editable right now so practically the only way to change them would be registering a new",
    "start": "3596319",
    "end": "3602920"
  },
  {
    "text": "version uh of the activity type or workflow type uh but when you pass them",
    "start": "3602920",
    "end": "3609160"
  },
  {
    "text": "as a options to the U when you call activity client uh those",
    "start": "3609160",
    "end": "3616119"
  },
  {
    "text": "are P requests so every time you call activity or start workflow you can specify different timeouts and they will",
    "start": "3616119",
    "end": "3622440"
  },
  {
    "text": "be using timeouts which you specified not timeouts provided uh on",
    "start": "3622440",
    "end": "3628839"
  },
  {
    "text": "registration can I schedule task with a delay uh you cannot schedule task is delay you can uh create timer and then",
    "start": "3629599",
    "end": "3637520"
  },
  {
    "text": "when timer fires you can schedule a task so",
    "start": "3637520",
    "end": "3643240"
  },
  {
    "text": "um you practically you can get what you want by delaying the execution of the task but the way you do that is you you",
    "start": "3643240",
    "end": "3650599"
  },
  {
    "text": "have to program it full time can I start worklow first and",
    "start": "3650599",
    "end": "3656280"
  },
  {
    "text": "workers later yes I think I showed that um the only requirement is that uh your",
    "start": "3656280",
    "end": "3661319"
  },
  {
    "text": "workflow types and activity types should be register it U and again you can",
    "start": "3661319",
    "end": "3667599"
  },
  {
    "text": "register them using some script or through console or standard ways to run workers at least once uh to register",
    "start": "3667599",
    "end": "3675440"
  },
  {
    "text": "types and then you can uh shut down workers and start as many work fors as you want and they will be in the system",
    "start": "3675440",
    "end": "3681000"
  },
  {
    "text": "until they time out um we're at the end of our time but we we're going to keep going with some",
    "start": "3681000",
    "end": "3687119"
  },
  {
    "text": "more questions um so feel free to hang on and listen to some more of the",
    "start": "3687119",
    "end": "3693880"
  },
  {
    "text": "questions uh the question is how to use a u external systems in the workflow or additional dependencies and the basic",
    "start": "3707799",
    "end": "3714520"
  },
  {
    "text": "idea that you will wrap them in the activities and U so your activity will",
    "start": "3714520",
    "end": "3720279"
  },
  {
    "text": "code will call into the external system and then uh return results",
    "start": "3720279",
    "end": "3727359"
  },
  {
    "text": "uh uh and then your workflow will just invoke those activities and again activity can be implemented in any",
    "start": "3727359",
    "end": "3733319"
  },
  {
    "text": "language it can I showed you Java version but U it doesn't need to be a",
    "start": "3733319",
    "end": "3738880"
  },
  {
    "text": "Java or Java can just initiate that and other language can complete the activity so the way you do that you integrate in",
    "start": "3738880",
    "end": "3745200"
  },
  {
    "text": "the activities uh question is are exceptions viewable",
    "start": "3745200",
    "end": "3750279"
  },
  {
    "text": "only for Amazon panel U for the console no uh they actually thrown into",
    "start": "3750279",
    "end": "3755960"
  },
  {
    "text": "the workflow they real exceptions and I didn't have time to show that this is I think the cool thing about the way",
    "start": "3755960",
    "end": "3762520"
  },
  {
    "text": "exceptions are done in the flow is that uh it actually provides you real Tech Trace which represents you the way your",
    "start": "3762520",
    "end": "3770200"
  },
  {
    "text": "code was executed uh even if the it's a syn was a synchronous executed you actually will see the St Trace which is",
    "start": "3770200",
    "end": "3778319"
  },
  {
    "text": "um really friendly so yes you will catch those exceptions you can log them and uh you",
    "start": "3778319",
    "end": "3784960"
  },
  {
    "text": "can for example send them to activities to execute but",
    "start": "3784960",
    "end": "3790400"
  },
  {
    "text": "uh uh yeah but panel just console is a nice way especially when you do",
    "start": "3790400",
    "end": "3797119"
  },
  {
    "text": "development uh how do you program decisions explicitly do I quote the decider um",
    "start": "3798240",
    "end": "3805920"
  },
  {
    "text": "you actually uh don't program them explicitly you write your workflow uh code so I actually programed the decider",
    "start": "3805920",
    "end": "3812079"
  },
  {
    "text": "when I wrote the workflow implementation uh which was the grter implementation the gr implementation was the decider so",
    "start": "3812079",
    "end": "3819720"
  },
  {
    "text": "this workflow code is the decider this is the main most important thing about flow that you write your decider as",
    "start": "3819720",
    "end": "3825400"
  },
  {
    "text": "asynchronous program and that code becomes a decider certainly you need to",
    "start": "3825400",
    "end": "3831760"
  },
  {
    "text": "configure it is is workl worker so when you get worker",
    "start": "3831760",
    "end": "3837760"
  },
  {
    "text": "attach code to it uh it becomes a decider and uh and it's also very",
    "start": "3837760",
    "end": "3844160"
  },
  {
    "text": "important thing that it's this code actually the way it executes is actually ex decision task so it doesn't keep",
    "start": "3844160",
    "end": "3849599"
  },
  {
    "text": "State between those tasks",
    "start": "3849599",
    "end": "3854520"
  },
  {
    "text": "uh okay and then uh there were some questions about pricing itself uh the pricing is of course fully explained in",
    "start": "3855559",
    "end": "3861880"
  },
  {
    "text": "our detail page but uh just to give you an overview of the pricing uh for S swf itself it's a pays go model so we charge",
    "start": "3861880",
    "end": "3869720"
  },
  {
    "text": "by the number of workflow executions you run uh the number of different activities or tasks that you perform in",
    "start": "3869720",
    "end": "3875920"
  },
  {
    "text": "the execution of each workflow um and also uh for how long the workflow",
    "start": "3875920",
    "end": "3881520"
  },
  {
    "text": "execution is executing uh the first 24 hours that a work execution is running is free there are no charges for that",
    "start": "3881520",
    "end": "3887880"
  },
  {
    "text": "but after that there are some uh very small charges like 5 cents for 10,000 workflow executions um if you choose to retain",
    "start": "3887880",
    "end": "3895200"
  },
  {
    "text": "your work close after the complete execution you charged at the same rate that I just",
    "start": "3895200",
    "end": "3900839"
  },
  {
    "text": "mentioned there are no charges for actually registering workflows so if you register some workflows and workflow",
    "start": "3900839",
    "end": "3907160"
  },
  {
    "text": "types and activity types and you don't run any workflow executions there are no charges uh then there was another",
    "start": "3907160",
    "end": "3913599"
  },
  {
    "text": "question about uh whether activity implementations execute based on the state of the workflow so uh just to",
    "start": "3913599",
    "end": "3920720"
  },
  {
    "text": "explain that the activity implementations uh themselves can be stateless in the sense don't need to",
    "start": "3920720",
    "end": "3926079"
  },
  {
    "text": "know about the state overall state of the application uh the decider uh tells",
    "start": "3926079",
    "end": "3932000"
  },
  {
    "text": "the uh workers what to do next or it tells which task should be scheduled next based on the state of the workflow",
    "start": "3932000",
    "end": "3938839"
  },
  {
    "text": "which is maintained by S swf um and then there was uh just a general question about whether there",
    "start": "3938839",
    "end": "3944319"
  },
  {
    "text": "will be a follow-up webinar with advanced concepts yeah we definitely do when um we have plans to do uh webinars",
    "start": "3944319",
    "end": "3951200"
  },
  {
    "text": "both on the service itself on Amazon swf itself and based on some feedback will focus that on the various use cases and",
    "start": "3951200",
    "end": "3958200"
  },
  {
    "text": "provide more examples of using Service uh and we will have a advanced",
    "start": "3958200",
    "end": "3963839"
  },
  {
    "text": "um Concepts webinar for uh the flow framework there are many features um like um that Max didn't have time to go",
    "start": "3963839",
    "end": "3970960"
  },
  {
    "text": "today and we'll definitely cover those in the next webinar and um that's all we have for",
    "start": "3970960",
    "end": "3977760"
  },
  {
    "text": "today uh thanks very much for joining as I mentioned earlier a recording of This webinar will be available um and any",
    "start": "3977760",
    "end": "3983920"
  },
  {
    "text": "more questions uh please or post them on the Forum and we'll make sure we answer them there",
    "start": "3983920",
    "end": "3991200"
  }
]