[
  {
    "text": "hi everyone welcome to the running no SQL on Amazon web services session we're happy that you guys made it and uh let's",
    "start": "1920",
    "end": "9559"
  },
  {
    "text": "get started so first of all let's decide",
    "start": "9559",
    "end": "15400"
  },
  {
    "text": "together what nosql means and and why we're here so what makes a nosql database uh different from for example a",
    "start": "15400",
    "end": "21279"
  },
  {
    "text": "relational database or some other kind of data store the most important characteristic is is probably that it's",
    "start": "21279",
    "end": "27679"
  },
  {
    "text": "schema at least as far as the definition goes so so what does that actually mean well if you think of Dynamo Tob for example every item can have an arbitrary",
    "start": "27679",
    "end": "35360"
  },
  {
    "text": "number of attributes or to use another term columns so you don't have to follow a strict schema a table schema or",
    "start": "35360",
    "end": "41399"
  },
  {
    "text": "whatever the case may be for a nosql database another characteristic at least for the nosql data stores that we're",
    "start": "41399",
    "end": "46840"
  },
  {
    "text": "going to talk about today is tunable consistency and this is really important for distributed systems or or uh very",
    "start": "46840",
    "end": "53520"
  },
  {
    "text": "large scale data stores like the ones we're talking about today because often you have to make trade-offs and you have",
    "start": "53520",
    "end": "58680"
  },
  {
    "text": "to decide do I want performance do I want durability and you can tune and tweak your database to match the",
    "start": "58680",
    "end": "64920"
  },
  {
    "text": "characteristics that you want for your application it's not always the",
    "start": "64920",
    "end": "70439"
  },
  {
    "text": "case me I'll give you an example uh say you need you need a very wide distribution",
    "start": "70439",
    "end": "77720"
  },
  {
    "text": "of data and having the data available extremely durable tons of replication is the most important characteristic of",
    "start": "77720",
    "end": "83079"
  },
  {
    "text": "your database you're potentially willing to sacrifice a little consistency like a Facebook feed for",
    "start": "83079",
    "end": "89520"
  },
  {
    "text": "example if you have the feed going by it's not important that every single one of your friends sees the same feed state",
    "start": "89520",
    "end": "94880"
  },
  {
    "text": "it just has to be eventually consistent and this would be a good example of an an eventually consistently tuned no SQL",
    "start": "94880",
    "end": "100840"
  },
  {
    "text": "database other times consistency and accuracy for every person who's looking at the data record is extremely important so the abil ability to tune",
    "start": "100840",
    "end": "107560"
  },
  {
    "text": "that depending on the feature is critical and is one of the things that you can do with a lot of the nosql data stores like the ones we're talking about",
    "start": "107560",
    "end": "113040"
  },
  {
    "text": "today of course distributed you know you need to be able to have redundancy to replicate to distribute not only across",
    "start": "113040",
    "end": "119920"
  },
  {
    "text": "a wide geographical area but across a lot of VMS from a redundancy perspective and highly available it kind of goes",
    "start": "119920",
    "end": "126520"
  },
  {
    "text": "along with distributed you want the data to be durable you want it to be replicated across multiple facilities",
    "start": "126520",
    "end": "131560"
  },
  {
    "text": "not just multiple servers and you need a database that can work with that and not suffer performance when it is highly",
    "start": "131560",
    "end": "137720"
  },
  {
    "text": "available so today we're here to talk about three of many nosql solutions that you can run on AWS one great thing about",
    "start": "137720",
    "end": "144440"
  },
  {
    "text": "AWS is that the you're you have a lot of flexible options you know we have managed services like RDS and now Aurora",
    "start": "144440",
    "end": "151040"
  },
  {
    "text": "how cool is that and Dynamo DB but you can also run whatever database you want",
    "start": "151040",
    "end": "156160"
  },
  {
    "text": "on ec2 and this is important because not every database is is the same and we all have different applications and",
    "start": "156160",
    "end": "162159"
  },
  {
    "text": "different needs and different databases suit and fit those needs and perhaps they can be tuned and tweaked in ways",
    "start": "162159",
    "end": "167560"
  },
  {
    "text": "that match your application or your business so you have the choice today we're going to talk about mongod Tob",
    "start": "167560",
    "end": "172840"
  },
  {
    "text": "Cassandra and couchbase three very popular databases all of which you can use on",
    "start": "172840",
    "end": "178760"
  },
  {
    "text": "ec2 so at a high level how to get started with these databases you can use the AWS Marketplace to provision Amis",
    "start": "178760",
    "end": "185239"
  },
  {
    "text": "Amazon machine images to um deploy these Solutions on ec2 in the case of data",
    "start": "185239",
    "end": "190360"
  },
  {
    "text": "Stacks or Cassandra you can use their Community Ami to deploy it on ec2 they're not yet on the AWS Marketplace but the marketplace is a great place to",
    "start": "190360",
    "end": "196760"
  },
  {
    "text": "start for these databases and more and essentially they give you a bundled image that you can deploy to ec2 and",
    "start": "196760",
    "end": "202360"
  },
  {
    "text": "have the software pre-installed and ready to use before we jump into the specifics of",
    "start": "202360",
    "end": "208080"
  },
  {
    "text": "each nosql database engine we're going to talk about today we wanted to discuss some best",
    "start": "208080",
    "end": "213319"
  },
  {
    "text": "practices so first of all no SQL databases on ec2 tend to be um memory",
    "start": "213319",
    "end": "219360"
  },
  {
    "text": "and iio bound rather than CPU bound so this is really important when you go to pick your ec2 instances so we have some",
    "start": "219360",
    "end": "225360"
  },
  {
    "text": "great new instances that have come out roughly over the last year or two notably the I2 the R3 and the M3 the I2",
    "start": "225360",
    "end": "232040"
  },
  {
    "text": "will give you really high IO and it's kind of the dirty secret we're going to talk about for a lot of nosql databases that the Achilles heel in terms of",
    "start": "232040",
    "end": "238760"
  },
  {
    "text": "performance even though a lot of them do a lot of stuff in memory is actually often storage because even though you're",
    "start": "238760",
    "end": "243959"
  },
  {
    "text": "operating in memory you still have to persist the data to disk and we'll see this repeated later with the other sessions and so that action of prising",
    "start": "243959",
    "end": "250879"
  },
  {
    "text": "data to dis can become the bottleneck so high performance storage is an extremely important characteristic of any High",
    "start": "250879",
    "end": "256759"
  },
  {
    "text": "performing nosql database so that's why an I2 is great it's meant for really high performant uh SSD operations really",
    "start": "256759",
    "end": "263320"
  },
  {
    "text": "fast storage attached to these uh these instances some databases benefit from more memory that's why we have R3 instan",
    "start": "263320",
    "end": "270720"
  },
  {
    "text": "and lastly if you aren't really sure or if you're looking at your metrics and there's no clear winner in terms of how you're being bound from a performance",
    "start": "270720",
    "end": "276960"
  },
  {
    "text": "perspective we offer the M3 class of instance types for those when you're thinking of storage",
    "start": "276960",
    "end": "284720"
  },
  {
    "text": "again you have choice we have Amazon elastic block storage EBS which is persistent storage separate from your",
    "start": "284720",
    "end": "290320"
  },
  {
    "text": "instance and in a lot of cases this is the right choice and you know if you were to read the white papers on couch Bas or mongodb or others from years past",
    "start": "290320",
    "end": "298000"
  },
  {
    "text": "you would have seen the default was to go with EBS and so why do we have instant storage up there it's because",
    "start": "298000",
    "end": "303800"
  },
  {
    "text": "times are changing and no SQL databases can often be tuned to have a high level of replication and EBS and that",
    "start": "303800",
    "end": "311520"
  },
  {
    "text": "persistence that comes with elastic block storage becomes less and less important in some circumstances so you",
    "start": "311520",
    "end": "316880"
  },
  {
    "text": "can still use EBS with your nosql databases but for the most part what we're going to be talking about today is how to use ephemeral storage directly",
    "start": "316880",
    "end": "323560"
  },
  {
    "text": "attached instant storage with no SQL and with the proper backups and with proper",
    "start": "323560",
    "end": "328880"
  },
  {
    "text": "replication it becomes the Preferred Choice in most cases for nosql deployments on ec2 you can get the best",
    "start": "328880",
    "end": "336680"
  },
  {
    "text": "level or good level of durability that meets your slas and your RTO and rpos and other acronyms while at the same",
    "start": "336680",
    "end": "342319"
  },
  {
    "text": "time benefiting from the extremely high iops of that ephemeral storage and by high I meet hundreds of thousands of I",
    "start": "342319",
    "end": "349560"
  },
  {
    "text": "Ops so just remember if you're using instant storage what's the Golden Rule when I stop my server my storage",
    "start": "350160",
    "end": "358199"
  },
  {
    "text": "goes away so always you know repeat this to yourself over and over again backup replicate and and all the all of the",
    "start": "358199",
    "end": "364319"
  },
  {
    "text": "systems that we're talking about today give you the ability to replicate and to backup so that you can use instant",
    "start": "364319",
    "end": "370080"
  },
  {
    "text": "storage with confidence you should always design for failure things are going to fail things are going to die",
    "start": "370080",
    "end": "375560"
  },
  {
    "text": "and your system should not ever suffer in terms of performance or availability because of one node that happens to go",
    "start": "375560",
    "end": "381479"
  },
  {
    "text": "down some other characteristics that can help you um speed things up on Linux you can optimize the U limit the read ahead",
    "start": "381479",
    "end": "387120"
  },
  {
    "text": "and the TCP keep alive these are distributed systems Sy and so these kernel kernel tuning parameters and",
    "start": "387120",
    "end": "392319"
  },
  {
    "text": "other optimizations you can do help the the the networking and the storage performance because the the performance",
    "start": "392319",
    "end": "397880"
  },
  {
    "text": "is also inter node you know a lot of there's a lot of bits flying around between these distributed systems and it's important that um your cluster that",
    "start": "397880",
    "end": "405479"
  },
  {
    "text": "is running your nosql data store is optimized from that perspective as well you can stripe multiple volumes but just",
    "start": "405479",
    "end": "411240"
  },
  {
    "text": "be careful with striping because if you stripe volumes it becomes harder to snapshot if you've ever tried to take a snapshot of a a raid array for example",
    "start": "411240",
    "end": "418199"
  },
  {
    "text": "um it's not exactly straightforward necessarily so if you are going to stripe volumes for performance or for",
    "start": "418199",
    "end": "423479"
  },
  {
    "text": "aggregate storage reasons just think carefully about your backup strategy and your snapshot strategy as",
    "start": "423479",
    "end": "430240"
  },
  {
    "text": "well we want to save you money you know that's one of the biggest parts of my job and it's what makes Amazon pretty",
    "start": "432039",
    "end": "438199"
  },
  {
    "text": "unique in the market is I usually walk into companies and I say here I am not to sell but to sort of anti- sell to to",
    "start": "438199",
    "end": "444039"
  },
  {
    "text": "like help you reduce your cost and one of the ways that we help you reduce your cost is um to help make things elastic",
    "start": "444039",
    "end": "449960"
  },
  {
    "text": "and to really adopt a pay as you go model and from a nosql perspective you want to size appropriately and if possible be able to change the size as",
    "start": "449960",
    "end": "458560"
  },
  {
    "text": "required things like using reserved instances and a mix of on demand reserved is a great way to lower your",
    "start": "458560",
    "end": "463919"
  },
  {
    "text": "costs a reserved instance is you put a little bit of money down then you get a lower monthly or sorry lower hourly rate",
    "start": "463919",
    "end": "469720"
  },
  {
    "text": "and so if you have a core of of reserved instances that you know will always be there and then augment that with on demand it's a great way to keep your",
    "start": "469720",
    "end": "476199"
  },
  {
    "text": "cost down with distributed systems and no SQL in particular one kind of hidden cost is",
    "start": "476199",
    "end": "481840"
  },
  {
    "text": "data transfer and we mentioned this it's also a performance characteristic it's a distributed system so there's a lot of inter node traffic going on inter a",
    "start": "481840",
    "end": "489159"
  },
  {
    "text": "traffic in some cases if you're multi-az so to keep your data transfer costs down think carefully about how you",
    "start": "489159",
    "end": "495759"
  },
  {
    "text": "replicate and we'll also discuss this later because if you have a multi-az deployment say three availability zones",
    "start": "495759",
    "end": "501599"
  },
  {
    "text": "and you have um replicas across three availability zones there is a charge for inter a traffic so think carefully about",
    "start": "501599",
    "end": "508639"
  },
  {
    "text": "what you're replicating what your replic accounts are and you can save a lot of money not all data is created equal for",
    "start": "508639",
    "end": "514000"
  },
  {
    "text": "example thank you session information for a website is kind of low value you don't need to replicate that with a",
    "start": "514000",
    "end": "519240"
  },
  {
    "text": "factor of four but maybe core user information is valuable and very important you don't want to lose it so",
    "start": "519240",
    "end": "524959"
  },
  {
    "text": "you have a higher replica so so parse your data out and adjust replication accordingly and the systems again we",
    "start": "524959",
    "end": "530240"
  },
  {
    "text": "discussed today allow you to prioritize from a replica perspective different sets of the",
    "start": "530240",
    "end": "536080"
  },
  {
    "text": "data so first I'm going to pass it to my colleague Rahul and he's going to tell you about best practices for running",
    "start": "536080",
    "end": "541320"
  },
  {
    "text": "mongodb on ec2 thank you mat so let's get started",
    "start": "541320",
    "end": "547640"
  },
  {
    "text": "with mongodb on ec2 uh mongodb is a general purpose database you can use it for variety of",
    "start": "547640",
    "end": "554240"
  },
  {
    "text": "use cases such as um gaming mobile analytics U storing content management system and such when I say mongod is a",
    "start": "554240",
    "end": "562000"
  },
  {
    "text": "document database I mean you can think of something like a MySQL but instead of tables you really have something like Json like objects which defines your",
    "start": "562000",
    "end": "568240"
  },
  {
    "text": "database and finally mongodb is actually free and open source it has a great Community Support it has drivers a",
    "start": "568240",
    "end": "574079"
  },
  {
    "text": "available for multiple programming languages or application Frameworks which you can use mongodb also comes in",
    "start": "574079",
    "end": "580079"
  },
  {
    "text": "Enterprise Edition which adds certain features to the current the free and open source version and we'll talk about that you know what are the features",
    "start": "580079",
    "end": "585480"
  },
  {
    "text": "throughout this slide as we go along on the talk so first off with mongodb let's",
    "start": "585480",
    "end": "590920"
  },
  {
    "text": "talk about what exactly is a Json document and what are dynamic schemas or schema less which Matt referred to",
    "start": "590920",
    "end": "596800"
  },
  {
    "text": "earlier in mongodb you store data something as called collections a collection has one or more documents and",
    "start": "596800",
    "end": "602519"
  },
  {
    "text": "each document is basically a Json which has Fields inside it and those fields basically Define your database think of",
    "start": "602519",
    "end": "607640"
  },
  {
    "text": "it something like a collection being something similar to a table uh document being something similar to a row and",
    "start": "607640",
    "end": "614440"
  },
  {
    "text": "feel inside the document being something similar to a column in a relational database but the difference here being that you don't have to define the schema",
    "start": "614440",
    "end": "620519"
  },
  {
    "text": "you don't have to define the fields the values your application can PR pretty much write a document in any schema it",
    "start": "620519",
    "end": "626279"
  },
  {
    "text": "it prefers in a it's in general practice it's always good to have a collection which is which has the large you know",
    "start": "626279",
    "end": "631760"
  },
  {
    "text": "homogeneous do collection documents stored together in a collection but again it's not",
    "start": "631760",
    "end": "636959"
  },
  {
    "text": "required now mongodb also can maintain multiple copies of data by a feature called replication that replication can",
    "start": "636959",
    "end": "644000"
  },
  {
    "text": "provide you scale out reads it can also provide you a high avability for your system and we'll talk about that as we go along uh with sharding you can",
    "start": "644000",
    "end": "651519"
  },
  {
    "text": "basically scale out a single server you know in case you are bottle NE by single deployment in terms of memory in terms of iio you can use charting sharding to",
    "start": "651519",
    "end": "658320"
  },
  {
    "text": "basically partition your data across multiple servers and address that scalability or address that limit of a single server",
    "start": "658320",
    "end": "664320"
  },
  {
    "text": "deployment with aggregation framework your queries can basically results can be aggregated something similar to SQL",
    "start": "664320",
    "end": "669920"
  },
  {
    "text": "Group by statement you can run your count you know some on your results before they return back to you and with",
    "start": "669920",
    "end": "675320"
  },
  {
    "text": "map reduce framework on mongodb you can basically which is expressed in in JavaScript you can write complex data",
    "start": "675320",
    "end": "680920"
  },
  {
    "text": "processing which runs on the mongodb noes itself and before the data is returned back to you so it can take advantage of the in uh data node",
    "start": "680920",
    "end": "687639"
  },
  {
    "text": "processing finally mongod is not limited to uh only key value operations simple key value operations but you can take",
    "start": "687639",
    "end": "693720"
  },
  {
    "text": "advantage of Rich queries it has support for variety of indexes such as unique value indexes uh TTL indexes time to",
    "start": "693720",
    "end": "700480"
  },
  {
    "text": "live indexes Spar indexes array indexes Jo special indexes and these all can help you basically take more value out",
    "start": "700480",
    "end": "707079"
  },
  {
    "text": "of your data in in mongod DB so let's look at it um before we move",
    "start": "707079",
    "end": "712200"
  },
  {
    "text": "further I want to talk about MMS which stands for mongod mongod Management Services the way mongod Management",
    "start": "712200",
    "end": "718480"
  },
  {
    "text": "Services work is basically it's agent which runs on your mongodb server and the agent talks back to MMS with MMS you",
    "start": "718480",
    "end": "724519"
  },
  {
    "text": "can basically provision a mongodb cluster at any scale you can upgrade your mongod DB instance without taking",
    "start": "724519",
    "end": "730240"
  },
  {
    "text": "any down in a few clicks without taking any down downtime or you can even scale out as I mentioned about sharding um it",
    "start": "730240",
    "end": "737279"
  },
  {
    "text": "also takes a continuous backup of your mongod deployment and using that backup you can actually restore to any point in time securely and we'll talk about that",
    "start": "737279",
    "end": "743680"
  },
  {
    "text": "as we go along not only that MMS can also track over 100 plus key metrics from a mongodb server and you can use",
    "start": "743680",
    "end": "749959"
  },
  {
    "text": "those metrics to create alerts or other such you know insights into your Mong deployments so you can take actions",
    "start": "749959",
    "end": "756000"
  },
  {
    "text": "before the system actually degrades based on those metrics uh we'll talk about MMS throughout as you go along the slides",
    "start": "756000",
    "end": "761680"
  },
  {
    "text": "and how does MSS fit in there so let's take about how does mongod Deb a single instance of a mongod d process which is",
    "start": "761680",
    "end": "767279"
  },
  {
    "text": "basically the database process works it works by something called memory map files a memory F map files",
    "start": "767279",
    "end": "772800"
  },
  {
    "text": "are basically something from a dis block is basically mapped as a a block in the memory and all your reads and writes are",
    "start": "772800",
    "end": "778199"
  },
  {
    "text": "basically done to to the memory and that's the way mongodb can provide you very easy and fast access to your data set but with that model It's always",
    "start": "778199",
    "end": "786240"
  },
  {
    "text": "important to ensure that your working set your working set is basically your data which has to reside in the memory",
    "start": "786240",
    "end": "791320"
  },
  {
    "text": "for your normal uh for your noral  uh DB day-to-day operations it has",
    "start": "791320",
    "end": "796800"
  },
  {
    "text": "to fit in the memory if it doesn't fit in the memory what's going to happen that your uh system will need to read the disk from we need to read the block",
    "start": "796800",
    "end": "803760"
  },
  {
    "text": "from the dis back in the memory and that will lead to something called a page fall so you need to ensure that you can",
    "start": "803760",
    "end": "809160"
  },
  {
    "text": "fit your working set in the memory there's some if you already have mongod D server or Manga database running today",
    "start": "809160",
    "end": "814880"
  },
  {
    "text": "you can run basically server status command and the server status command can help you understand your working set a little better in case you don't have",
    "start": "814880",
    "end": "821880"
  },
  {
    "text": "it you can use something like a simple heuristics to figure out how much data you normally applications work with",
    "start": "821880",
    "end": "828040"
  },
  {
    "text": "again you can monitor the mongodb uh you can the idea will be that to limit the page false which happens on your mongodi",
    "start": "828040",
    "end": "833800"
  },
  {
    "text": "instance because those are symptoms of mongod Behaving poorly uh if your queries are being there a lot of queries",
    "start": "833800",
    "end": "840680"
  },
  {
    "text": "are being queued that's again a symptom which might lead to page for later so you want to ensure that those two metrics you're keeping track at least in",
    "start": "840680",
    "end": "847000"
  },
  {
    "text": "MMS to understand that your your system is working in a perfect manner or working in a optimal",
    "start": "847000",
    "end": "853240"
  },
  {
    "text": "manner so moving on to we talked about a single server of mongodb how does it work now let's talk about what you're",
    "start": "853240",
    "end": "859320"
  },
  {
    "text": "going to do to provide ha or high availability for a mongodb instance as I mentioned earlier mongod",
    "start": "859320",
    "end": "864800"
  },
  {
    "text": "can can can maintain multiple copies of your data set by something called replica or replications um in",
    "start": "864800",
    "end": "870519"
  },
  {
    "text": "replication one of your node is primary all your reads and writes are done to the primary and the second and the rest",
    "start": "870519",
    "end": "876440"
  },
  {
    "text": "of the notes which are called secondaries they basically replicate from the primary using something called oplog oplog is basically a ordered set",
    "start": "876440",
    "end": "883920"
  },
  {
    "text": "of item poent operations which a secondaries basically reapply on on when they get the data set on you know on",
    "start": "883920",
    "end": "890440"
  },
  {
    "text": "every read or write from primary and the secondaries can also provide you little scale out uh read in case you want to",
    "start": "890440",
    "end": "897240"
  },
  {
    "text": "scale out your read you can also use secondaries to to do a read but in that case your application has to uh deal with eventually consist consistency the",
    "start": "897240",
    "end": "904880"
  },
  {
    "text": "way the mongodb provides consistency or allows you to handle consist consistency something called right concerns the word",
    "start": "904880",
    "end": "911279"
  },
  {
    "text": "right concerns do by default is Right concerns tells your application saying that there was no network error or there",
    "start": "911279",
    "end": "916839"
  },
  {
    "text": "was no duplicate key error but you can change your right concerns such that you can say that right when I do a right to",
    "start": "916839",
    "end": "923320"
  },
  {
    "text": "a mongodb do my right across certain rep certain secondaries do my rights across",
    "start": "923320",
    "end": "928680"
  },
  {
    "text": "majority of secondaries or do my rights across all of the secondaries in which case you can use any secondary to read",
    "start": "928680",
    "end": "933880"
  },
  {
    "text": "your data which will provide you a strong consistent read in case of a failure what really",
    "start": "933880",
    "end": "938920"
  },
  {
    "text": "happens let's say a primary goes down one of the secondaries is automatically based on certain configurations you can choose you know you can provide them a",
    "start": "938920",
    "end": "945680"
  },
  {
    "text": "priority based on that priority a second is automatically elected to a primary without any manual manual intervention",
    "start": "945680",
    "end": "951560"
  },
  {
    "text": "so application can or mongod can provide you ha for your critical deployments in",
    "start": "951560",
    "end": "957560"
  },
  {
    "text": "production so when you do deploy a replica set on AWS you don't really have to stick to",
    "start": "957600",
    "end": "963079"
  },
  {
    "text": "you know having the same instance for both primaries and secondaries um you can you can look into different factors",
    "start": "963079",
    "end": "968600"
  },
  {
    "text": "on how you can deploy your primaries and secondaries for instance let's say that you use a a p Ops EVS for your primaries",
    "start": "968600",
    "end": "976720"
  },
  {
    "text": "what you can do is for secondaries you can create two gp2 volumes of around 5,000 uh you know half the size so it",
    "start": "976720",
    "end": "981920"
  },
  {
    "text": "can provide you with the same IO characteristic as of uh as of the primary again the idea is that since",
    "start": "981920",
    "end": "987519"
  },
  {
    "text": "oplog is the one process by which mongod replicates from primary to secondaries and it's done asynchronously you have to",
    "start": "987519",
    "end": "992880"
  },
  {
    "text": "ensure that there's no replication lag between them replication lag as in the time it takes by the time you do a right on the primary by the time it takes for",
    "start": "992880",
    "end": "999160"
  },
  {
    "text": "it to appear on the secondary so this is one of the monitor you want to measure carefully in case",
    "start": "999160",
    "end": "1004560"
  },
  {
    "text": "your application lag becomes excessive what could happen is that the secondaries could become ineligible to be become promoted to a primary or your",
    "start": "1004560",
    "end": "1012040"
  },
  {
    "text": "your consistency might degrade way further based on the lag itself this is one of the things you want to monitor",
    "start": "1012040",
    "end": "1017079"
  },
  {
    "text": "with the um MMS in case of a replica cluster or replica sets your application like how far it is between a primary and",
    "start": "1017079",
    "end": "1023240"
  },
  {
    "text": "secondary mongodb also is coming out something called pluggable storage which is the new in 2.8 release I hopefully",
    "start": "1023240",
    "end": "1029760"
  },
  {
    "text": "that comes out in January of 2015 and that will basically allow you to change the default from uh memory map files to",
    "start": "1029760",
    "end": "1035798"
  },
  {
    "text": "something maybe like rock DB or other plugable storage engines you can think",
    "start": "1035799",
    "end": "1041280"
  },
  {
    "text": "of so we talked about a single instance we talked about ha now talk about scalability that in case you're",
    "start": "1041799",
    "end": "1047400"
  },
  {
    "text": "bottleneck by a single server instance um how do you going to let's say your bottom leg by Ram or bottom leg by",
    "start": "1047400",
    "end": "1052720"
  },
  {
    "text": "storage iio how do you really scale out that's done by something called sharding in sharding basically what you do is you",
    "start": "1052720",
    "end": "1057919"
  },
  {
    "text": "partition your data across multiple shards each of The Shard here could be a single server or it could be a replica",
    "start": "1057919",
    "end": "1064200"
  },
  {
    "text": "set itself and in production we recommend that you use replica to deploy each Shard now in The Shard there are",
    "start": "1064200",
    "end": "1070640"
  },
  {
    "text": "multiple ways of architecture uh the multiple of sharding mechanism you can choose you can choose something like range based sharding range based",
    "start": "1070640",
    "end": "1076760"
  },
  {
    "text": "sharding basically based on Range you're Distributing your data across shards you can choose something as a hash or you",
    "start": "1076760",
    "end": "1082520"
  },
  {
    "text": "can choose something as as tag based sharting in tag based sharting for example if you're deploying A Shard across multiple AWS region you can tag",
    "start": "1082520",
    "end": "1088559"
  },
  {
    "text": "your chart such that the application has the data closest related to that region itself so it's not doing cross region",
    "start": "1088559",
    "end": "1094159"
  },
  {
    "text": "reads much often uh with Shard also what happens that your application your application",
    "start": "1094159",
    "end": "1099559"
  },
  {
    "text": "doesn't have to deal with the complexity of talking to a Shard on you know how to parition the data there's something called a query router so application",
    "start": "1099559",
    "end": "1106120"
  },
  {
    "text": "basically talks to a query router and the query router determines which Shard the you know the data is in there so you",
    "start": "1106120",
    "end": "1111400"
  },
  {
    "text": "can add as many shards as you want but your application code will still remain the same because it's actually talking to a middleman call query router which",
    "start": "1111400",
    "end": "1117039"
  },
  {
    "text": "is managed by Mong deployment itself rather than changing the code in application every time every time you add a",
    "start": "1117039",
    "end": "1124080"
  },
  {
    "text": "Shard so we have talked about yet I mean we talked about high ability we talk about scalability but in case of a Dr",
    "start": "1124520",
    "end": "1131120"
  },
  {
    "text": "scenario how do you really cope up with that kind of scenario so there are three ways I mean there are three different methods you can look at in the terms of backup and Recovery you can really",
    "start": "1131120",
    "end": "1138080"
  },
  {
    "text": "choose CH secondary you can look at using a secondary as a backup uh you know but that's really not a you know a recommended way to back up your data set",
    "start": "1138080",
    "end": "1145679"
  },
  {
    "text": "um in case of Dr secondary itself might not be available mongodb also has tools such as mongod dump and restore mongod",
    "start": "1145679",
    "end": "1152320"
  },
  {
    "text": "dump basically what it does is it it creates a backup of your uh your documents or your database in mongodb in",
    "start": "1152320",
    "end": "1158159"
  },
  {
    "text": "something called bon files and you can use restore to reload that Bon files back in your uh",
    "start": "1158159",
    "end": "1164000"
  },
  {
    "text": "database process it's again it doesn't work for a very you know large data ass sets and",
    "start": "1164000",
    "end": "1169200"
  },
  {
    "text": "again you have to take care of various uh features for example if you're taking a backup you have to ensure that General is is enabled Jing is basically a",
    "start": "1169200",
    "end": "1176360"
  },
  {
    "text": "durability by which provides durability for your rights um in case your general is not enabl you're taking",
    "start": "1176360",
    "end": "1181799"
  },
  {
    "text": "a backup what could happen that backup might be inconsistent um if you're taking a backup of shed cluster",
    "start": "1181799",
    "end": "1187480"
  },
  {
    "text": "you have to ensure that your uh query uh your config servers are not up that point in time because there could be",
    "start": "1187480",
    "end": "1193000"
  },
  {
    "text": "some chunk migration happening and that again could make your data inconsistent so these are things you have to you know",
    "start": "1193000",
    "end": "1198600"
  },
  {
    "text": "keep in mind while taking a backup or what you could do is as I mentioned earlier is use MMS to take that backups",
    "start": "1198600",
    "end": "1204720"
  },
  {
    "text": "what MMS does we look at that in next Slide the way the MMS works is basically in the similar to what you have in",
    "start": "1204720",
    "end": "1211120"
  },
  {
    "text": "secondary that MMS takes your continuous backup of your op logs and since it uses",
    "start": "1211120",
    "end": "1216720"
  },
  {
    "text": "only op logs to create a backups this the performance impct on your the performance impact on your cluster is similar to having a secondary additional",
    "start": "1216720",
    "end": "1223640"
  },
  {
    "text": "secondary new replica sets and since it takes a continuous backup of your uh oplock which is again a item poent set",
    "start": "1223640",
    "end": "1229799"
  },
  {
    "text": "of order operations it can basically restore to any point in time to restore what you have to do is basically provide",
    "start": "1229799",
    "end": "1235280"
  },
  {
    "text": "a use a two-factor authentication to download the files from MMS uh you take that files you distribute the files on",
    "start": "1235280",
    "end": "1241159"
  },
  {
    "text": "your mongod instances or mongodi servers and restart your mongodi process and actually have a backup or you have a",
    "start": "1241159",
    "end": "1246559"
  },
  {
    "text": "Mong new mongod process running from that point in time onwards um moving on so now it's always",
    "start": "1246559",
    "end": "1256080"
  },
  {
    "text": "important to monitor deployment because you cannot optimize what you cannot measure so it's always important to measure your mongodb instances so you",
    "start": "1256080",
    "end": "1262240"
  },
  {
    "text": "have good insights into what is really happening with your so again the choices being first with MMS MMS can track as I",
    "start": "1262240",
    "end": "1267760"
  },
  {
    "text": "mentioned that 100 plus key metrics metrics such as CPU utilization your RAM your server server status or even from",
    "start": "1267760",
    "end": "1274600"
  },
  {
    "text": "your mongod DB itself such as you know uh number of concent connections number of read writes uh how many cues are was",
    "start": "1274600",
    "end": "1281840"
  },
  {
    "text": "the length of a queue and such metrics what it happens that such metrics are reported over to MMS agent in real time",
    "start": "1281840",
    "end": "1287880"
  },
  {
    "text": "and where it are they are aggregated and you can visualize them in real time on a browser or something like that to get a",
    "start": "1287880",
    "end": "1293480"
  },
  {
    "text": "key insight into your mongod deployments you can even create alerts based on certain metrics of ranges of metrics",
    "start": "1293480",
    "end": "1299159"
  },
  {
    "text": "saying that tell me that if a application is going Beyond certain status notify me via email or SNS so I",
    "start": "1299159",
    "end": "1304799"
  },
  {
    "text": "can take an action before that server before my diplom actually degrades now Mong if you're not a",
    "start": "1304799",
    "end": "1311400"
  },
  {
    "text": "mongodb entprise customer I mean in which case you can actually deploy the MMS agent on within your environment",
    "start": "1311400",
    "end": "1316760"
  },
  {
    "text": "itself or if you don't don't if for some reason you don't want to send over the data over to MMS which is offered by",
    "start": "1316760",
    "end": "1322440"
  },
  {
    "text": "mongodb service you could also create a such an envirment using cloudwatch and SNS alerts in that case you have to use",
    "start": "1322440",
    "end": "1328440"
  },
  {
    "text": "something like custom metrics to generate those metrics by using your own commands and uh send those to cloudwatch",
    "start": "1328440",
    "end": "1333559"
  },
  {
    "text": "and create SNS alerts based on them there are other tools also such as hyphen perf not to be confused with the",
    "start": "1333559",
    "end": "1339400"
  },
  {
    "text": " perf here puf is used to measure the storage IO of your your server hyphen perf is used to",
    "start": "1339400",
    "end": "1345600"
  },
  {
    "text": "measure the DB deployment itself you know in terms of number of conent connections how does it behave and stuff",
    "start": "1345600",
    "end": "1350799"
  },
  {
    "text": "like that there's something called M tools also which can help you visualize your mongodb log files so you can take for example mongod D s log files",
    "start": "1350799",
    "end": "1358120"
  },
  {
    "text": "and run them through M tools which will help you pass uh filter and visualize those log files to understand better and how the process are",
    "start": "1358120",
    "end": "1364120"
  },
  {
    "text": "behaving but again very important to measure your system it's as I mentioned earlier that if you cannot measure what",
    "start": "1364120",
    "end": "1369559"
  },
  {
    "text": "your system is behaving there's no way you can optimize it MMS also measures uh uses mongod DP",
    "start": "1369559",
    "end": "1375240"
  },
  {
    "text": "profilers within the mongod deployment so you can actually get insight your queries which are running also in that",
    "start": "1375240",
    "end": "1381679"
  },
  {
    "text": "system so with respect to Security mongodb offers um something called custom roles you know and um privileges",
    "start": "1381760",
    "end": "1388919"
  },
  {
    "text": "you can assign users and apps custom roles and privileges so they only have those privileg necessary for them to do",
    "start": "1388919",
    "end": "1394200"
  },
  {
    "text": "their task it also has something called field level reduction in which you can basically use a trusted middleware to",
    "start": "1394200",
    "end": "1399720"
  },
  {
    "text": "control access to individual Fields within the document itself um mongod to be also has built in authentication or",
    "start": "1399720",
    "end": "1405960"
  },
  {
    "text": "it can provide authentication by external external authentication such as caros LP X5 x509 certificate or even",
    "start": "1405960",
    "end": "1413120"
  },
  {
    "text": "active directory with mongodb Enterprise you can also get a SSL so your data is",
    "start": "1413120",
    "end": "1418640"
  },
  {
    "text": "basically encrypted over the wies so when a clients are connecting to a mongod DB server the data the connection is encrypted or you can actually use the",
    "start": "1418640",
    "end": "1425480"
  },
  {
    "text": "free uh you can rebuild yourself using the free uh the mongod free open source version by encryp by editing the SSL",
    "start": "1425480",
    "end": "1431760"
  },
  {
    "text": "component in there with auditing inbuilt auditing capabilities you can use it to meet your cess and compliant needs so",
    "start": "1431760",
    "end": "1437559"
  },
  {
    "text": "figure out out like would who change who access the database what changes was done what was happening in the",
    "start": "1437559",
    "end": "1442760"
  },
  {
    "text": "queries so we talked about a lot of features of mongodb and just to put that everything back in",
    "start": "1442760",
    "end": "1448720"
  },
  {
    "text": "perspective this is a you know a deployment of mongodb in in a production kind of scale so you have one Shard you",
    "start": "1448720",
    "end": "1454240"
  },
  {
    "text": "have multiple charts each chart is a replica sets basically which has one or more servers and you have applications",
    "start": "1454240",
    "end": "1459320"
  },
  {
    "text": "which are talking to query routers there could there will be multiple query routers in a production deployment but this is what holistically looks like",
    "start": "1459320",
    "end": "1465080"
  },
  {
    "text": "when you deploy a mongodb on AWS cloud now but how would you really deploy this uh you know at how would you really",
    "start": "1465080",
    "end": "1471399"
  },
  {
    "text": "easily deploy such architecture on the cloud so with MMS there's also support for you to deploy such a um such a",
    "start": "1471399",
    "end": "1478799"
  },
  {
    "text": "pattern on the cloud using few clicks in the next slide you're going to see a small video maybe a minute video the",
    "start": "1478799",
    "end": "1484000"
  },
  {
    "text": "video talks about how Ms is using to deploy how Ms is deploying a shed cluster onto AWS within few clicks and",
    "start": "1484000",
    "end": "1491799"
  },
  {
    "text": "I'm just going to leave the video hopefully that plays in the next slide so you can see on the right hand side how the video is talking about how",
    "start": "1491799",
    "end": "1497320"
  },
  {
    "text": "somebody actually using MMS to deploy a shed cluster on AWS it has support for",
    "start": "1497320",
    "end": "1502960"
  },
  {
    "text": "VPC it has support for doing a multi- a deployment it even optimizes your choice of your instances of which instances",
    "start": "1502960",
    "end": "1509240"
  },
  {
    "text": "you're choosing to deploy your server on",
    "start": "1509240",
    "end": "1512720"
  },
  {
    "text": "AWS and with that I would have uh you know like to invite John to talk about cassendra next okay uh but I will",
    "start": "1515799",
    "end": "1521840"
  },
  {
    "text": "encourage you guys to talk uh go ahead and you know check MMS at mm. mongod db.com",
    "start": "1521840",
    "end": "1528720"
  },
  {
    "text": "you to let this finish yeah y or you can go",
    "start": "1534039",
    "end": "1541200"
  },
  {
    "text": "for you can go ahead shall I go ahead yeah all right Cassandra at",
    "start": "1545320",
    "end": "1552760"
  },
  {
    "text": "speed all right uh just a a brief overview of Cassandra which is a",
    "start": "1553480",
    "end": "1559279"
  },
  {
    "text": "distributed key value store it's not a document store Key values it's locally managed storage all right each node in",
    "start": "1559279",
    "end": "1566480"
  },
  {
    "text": "there is uh is independent so you have a great file tolerance no single point of failure at a cluster it's uh quite",
    "start": "1566480",
    "end": "1573039"
  },
  {
    "text": "scalable and you can tune your cons consistency easily um so it's it's",
    "start": "1573039",
    "end": "1578159"
  },
  {
    "text": "beyond that it falls into the other characteristics of nosql that means you're not going to get uh support for",
    "start": "1578159",
    "end": "1583600"
  },
  {
    "text": "joins you're not going to get subqueries um uh reads and writes can go to any",
    "start": "1583600",
    "end": "1589000"
  },
  {
    "text": "node in the cluster a node can act as a any node can act as a query coordinator routing requests to the nodes that",
    "start": "1589000",
    "end": "1595760"
  },
  {
    "text": "actually are meant to store data for a particular request and there's a peer-to-peer uh protocol we call uh they",
    "start": "1595760",
    "end": "1601640"
  },
  {
    "text": "call gossip that exchanges information about the state and the location among the nodes in terms of storage uh for data we",
    "start": "1601640",
    "end": "1609919"
  },
  {
    "text": "recommend that you use ephemeral storage for the reasons that that Matt described you're going to get better performance from that uh it's that shared nothing",
    "start": "1609919",
    "end": "1616600"
  },
  {
    "text": "architecture again so so so why fight that really uh the recommended practice is to choose SSD backed instances you",
    "start": "1616600",
    "end": "1623760"
  },
  {
    "text": "can use Raid zero if you want to you don't have to um and you can use uh EBS",
    "start": "1623760",
    "end": "1629240"
  },
  {
    "text": "storage but we recommend that you do that simply for targets for your snapshots use it as your uh part of your",
    "start": "1629240",
    "end": "1634520"
  },
  {
    "text": "backup strategy all right in terms of data consistency it's tunable you can",
    "start": "1634520",
    "end": "1639559"
  },
  {
    "text": "choose how consistent each read or write request can be there's great granularity there um you can imagine that you have a",
    "start": "1639559",
    "end": "1646880"
  },
  {
    "text": "a massive cluster that you can run into consistency issues periodically there are tools within the cluster that make",
    "start": "1646880",
    "end": "1653240"
  },
  {
    "text": "this quite robust there's a read repair tool uh to bring uh replicas up to date there's this concept of a hinted handoff",
    "start": "1653240",
    "end": "1659960"
  },
  {
    "text": "where if for whatever reason a query coordinator tries to reach out to a node that's not available it can locally",
    "start": "1659960",
    "end": "1665200"
  },
  {
    "text": "store rights and then pass it to the unreachable node when that becomes available again and then there's a node",
    "start": "1665200",
    "end": "1670480"
  },
  {
    "text": "repair tool that can make data consistent on a node um and it's sort of Applied in that order I think um in",
    "start": "1670480",
    "end": "1677240"
  },
  {
    "text": "terms of of availability and scalability clusters can scan uh can span Amazon",
    "start": "1677240",
    "end": "1682640"
  },
  {
    "text": "availability zones and Amazon regions right the nodes between them use this gossip protocol that I told you about",
    "start": "1682640",
    "end": "1688480"
  },
  {
    "text": "earlier uh to learn the status about their nodes in the cluster and the data is replicated uh to multiple machines",
    "start": "1688480",
    "end": "1695200"
  },
  {
    "text": "and each is able to read and write independently so if you lose a replica you still have access to that same data",
    "start": "1695200",
    "end": "1702120"
  },
  {
    "text": "um you can design the Clusters I mentioned across availability zones and regions that gives you tremendous uh",
    "start": "1702120",
    "end": "1709080"
  },
  {
    "text": "robustness in your cluster as you can imagine um the recommended practice is",
    "start": "1709080",
    "end": "1714440"
  },
  {
    "text": "to use this uh software called a well there is a software called a snitch that is used to describe the network topology",
    "start": "1714440",
    "end": "1721600"
  },
  {
    "text": "so that requests are routed efficiently there are two specific snitches that are written to run on ec2 uh one uh you know",
    "start": "1721600",
    "end": "1729279"
  },
  {
    "text": "the choice is really are you going multi- region or not but choose the right one and don't try and force it or",
    "start": "1729279",
    "end": "1735480"
  },
  {
    "text": "you know um and you know look carefully if you think you need to re write your",
    "start": "1735480",
    "end": "1741120"
  },
  {
    "text": "own um and if you're translating from the Cassandra documentation to ours where",
    "start": "1741120",
    "end": "1747880"
  },
  {
    "text": "they talk about racks think availability zones where they talk about data centers think regions all right um there's a",
    "start": "1747880",
    "end": "1754960"
  },
  {
    "text": "concept of a virtual node in Cassandra what that does is it breaks down the granularity of the the range of a key",
    "start": "1754960",
    "end": "1761600"
  },
  {
    "text": "space that's going to be located on a particular node this is great for recovering nodes all right that means",
    "start": "1761600",
    "end": "1766880"
  },
  {
    "text": "that uh if you need to bring a a node back up catch a node up you're pulling",
    "start": "1766880",
    "end": "1772120"
  },
  {
    "text": "data from across many many nodes so you're not going to see hot spots when you're you're doing this recovery um",
    "start": "1772120",
    "end": "1779120"
  },
  {
    "text": "that'll also speed the the rate at which uh nodes are built because of the way that data is",
    "start": "1779120",
    "end": "1784760"
  },
  {
    "text": "shipped uh for backup and Recovery I mentioned earlier that um you can use",
    "start": "1784760",
    "end": "1790360"
  },
  {
    "text": "EBS here what you do is create a snapshot of all the files on your data dis you can um back up the entire",
    "start": "1790360",
    "end": "1796799"
  },
  {
    "text": "database you can back up just tables you can do incremental snapshots after you're taking a full initial snapshot",
    "start": "1796799",
    "end": "1803240"
  },
  {
    "text": "and you can copy these snapshots and you should copy these snapshots to Amazon S3 and there are tools that exist that can",
    "start": "1803240",
    "end": "1808880"
  },
  {
    "text": "help you with this data STX has tools for this Netflix has a a tool called prum on their GitHub that I think is",
    "start": "1808880",
    "end": "1815120"
  },
  {
    "text": "also useful um in terms of monitoring we recommend you use either Cloud watch or",
    "start": "1815120",
    "end": "1820360"
  },
  {
    "text": "if you've you got the data Stacks license use their tools if you like um pay attention to cues Q length uh the",
    "start": "1820360",
    "end": "1827480"
  },
  {
    "text": "statistics both the throughput and latency uh your memory utilization and your network activity um in terms of",
    "start": "1827480",
    "end": "1834440"
  },
  {
    "text": "security you can go out and create users as you would ordinarily in a database you can grant and revoke privileges uh",
    "start": "1834440",
    "end": "1841840"
  },
  {
    "text": "as one typically does and we recommend you use SSL encryption to uh protect data and Transit and that can go from",
    "start": "1841840",
    "end": "1848320"
  },
  {
    "text": "you know client to node and from node to node uh and you can decide whether it's going to be all nodes or just between",
    "start": "1848320",
    "end": "1853960"
  },
  {
    "text": "racks or just between data centers uh in terms of the architecture",
    "start": "1853960",
    "end": "1859960"
  },
  {
    "text": "um you can stand these things up as I meant as as I mentioned in in separate",
    "start": "1859960",
    "end": "1865039"
  },
  {
    "text": "regions and we've got uh joint customers uh that have done this where they've lost an entire access to a region for",
    "start": "1865039",
    "end": "1872679"
  },
  {
    "text": "whatever reason and the cluster will be up and running in the other region quite robustly uh with you know Min minimal",
    "start": "1872679",
    "end": "1880760"
  },
  {
    "text": "Interruption for the uh uh the application behind it so that is uh Cassandra at speed and did it make up",
    "start": "1880760",
    "end": "1887799"
  },
  {
    "text": "enough time all right awesome so cach base I'm",
    "start": "1887799",
    "end": "1895600"
  },
  {
    "text": "I'm wearing my couch base red today U actually I was told earlier that it's cranberry but uh we'll pretend it's red",
    "start": "1895600",
    "end": "1902200"
  },
  {
    "text": "anyway couch base is uh the third and final nosql data store that we're going to talk about today um I I love couch",
    "start": "1902200",
    "end": "1909120"
  },
  {
    "text": "Bas it's a great flexible nosql data store it has a strong uh history and it works really well on EC on ec2 and AWS",
    "start": "1909120",
    "end": "1916039"
  },
  {
    "text": "caspas comes in a few flavor flavors there's couchbase server which many of you will already be familiar with but",
    "start": "1916039",
    "end": "1921519"
  },
  {
    "text": "there's also the new um couchbase mobile initiative specifically couch based light which is a um a lightweight",
    "start": "1921519",
    "end": "1927159"
  },
  {
    "text": "database that can actually reside on on mobile devices or other types of smaller devices and there's something called the",
    "start": "1927159",
    "end": "1932399"
  },
  {
    "text": "sync Gateway that can synchronize data from couchbase light to couchbase server so it's a really good choice if you're",
    "start": "1932399",
    "end": "1938639"
  },
  {
    "text": "doing mobile development or any kind of development where you have that kind of a synchronization going on between remote devices and a central database",
    "start": "1938639",
    "end": "1945760"
  },
  {
    "text": "it's both a key value and a document store so you can use it like a key Value Store like Cassandra but also like a",
    "start": "1945760",
    "end": "1951519"
  },
  {
    "text": "document store you can store documents like Json documents for example up to 20 megabytes um in a cassander or sorry in",
    "start": "1951519",
    "end": "1957639"
  },
  {
    "text": "a coach base database it's distributed in a shared nothing architecture so it scales really well it distributes really",
    "start": "1957639",
    "end": "1964000"
  },
  {
    "text": "well it handles um it's fault tolerant and if you architect it correctly um just like John and Rahul were describing",
    "start": "1964000",
    "end": "1970000"
  },
  {
    "text": "you can lose nodes you can recover from failure and you can reach your again your RTO your rpos for availability and",
    "start": "1970000",
    "end": "1975639"
  },
  {
    "text": "durability um you can tune your consistency um and importantly it has a MCD compatible API and uh this sort of",
    "start": "1975639",
    "end": "1983320"
  },
  {
    "text": "is attractive to a lot of people because many of you have applications that have been written against the mcash API no",
    "start": "1983320",
    "end": "1988360"
  },
  {
    "text": "need to change them KP can can still understand you don't have to go rip apart that that code so let's dig in I'm",
    "start": "1988360",
    "end": "1995679"
  },
  {
    "text": "trying to keep it specific to AWS so I'm not going to cover all of couch paace but you know what do you have to care about if you're running this on AWS so",
    "start": "1995679",
    "end": "2002639"
  },
  {
    "text": "first of all again just to sort of reiterate the point um storage is often the bottleneck uh in most cases",
    "start": "2002639",
    "end": "2009559"
  },
  {
    "text": "certainly with with couch Bas it can become the bottleneck because the the rights and any kind of operations you do will eventually be persisted to dis so",
    "start": "2009559",
    "end": "2016039"
  },
  {
    "text": "just always keep this in mind that the storage tier is extremely important from a performance perspective I mean that's why we're sitting here recommending",
    "start": "2016039",
    "end": "2022200"
  },
  {
    "text": "ephemeral or instance storage and the fast ssds associated with the new instance types and the direct attached",
    "start": "2022200",
    "end": "2027399"
  },
  {
    "text": "ssds that they have um in Kush Bas 3.0 there's some great new features that allow you to um prioritize dis iio and",
    "start": "2027399",
    "end": "2035720"
  },
  {
    "text": "also kpas has this concept ceptive buckets kind of logical groupings of data and you can uh prioritize IO for",
    "start": "2035720",
    "end": "2042240"
  },
  {
    "text": "the dis iio on a per bucket basis so that allows you to like I was saying earlier you can prioritize replica count",
    "start": "2042240",
    "end": "2048040"
  },
  {
    "text": "per data set you can take your your your virtual buckets your buckets and prioritize not only how many replicas you have of that data but also how much",
    "start": "2048040",
    "end": "2054320"
  },
  {
    "text": "IO how much performance you should allocate to that data because again not all data is equal a web session is not",
    "start": "2054320",
    "end": "2059878"
  },
  {
    "text": "as valuable as the user profile itself for example and when you're calculating storage how much storage you need",
    "start": "2059879",
    "end": "2065398"
  },
  {
    "text": "remember it's not just like storage is how much storage you have how many times you're replicating and if you rep if you have a replica count of one that's two",
    "start": "2065399",
    "end": "2071599"
  },
  {
    "text": "copies and then there's some metadata associated with that and as your data grows it's not going to be a simple um",
    "start": "2071599",
    "end": "2077520"
  },
  {
    "text": "you know addition a simple sum of how many replicas you have there's other factors to consider and dig deep into the into the couch Bas documentation to",
    "start": "2077520",
    "end": "2084079"
  },
  {
    "text": "get the full volume count memory is really important couch Bas tries to do as much as possible in",
    "start": "2084079",
    "end": "2090520"
  },
  {
    "text": "memory and we'll talk about some like things like DCP and some new features in a second that that take even more",
    "start": "2090520",
    "end": "2095720"
  },
  {
    "text": "advantage of memory than previous versions but when you're calculating your memory requirements this is a pretty um crude addition but it serves",
    "start": "2095720",
    "end": "2102480"
  },
  {
    "text": "as a good Baseline for starting so take your working set and this is an important distinction not your whole",
    "start": "2102480",
    "end": "2107760"
  },
  {
    "text": "data set but the data you actually are operating with and operating on that is your working set and that is what should",
    "start": "2107760",
    "end": "2113680"
  },
  {
    "text": "represent how much memory you're calculating because again you may have this huge database but you're only leveraging a subset of that data on a",
    "start": "2113680",
    "end": "2119240"
  },
  {
    "text": "regular basis that is your working set then take the server image and by that I mean the the amount of memory that is",
    "start": "2119240",
    "end": "2124520"
  },
  {
    "text": "consumed by running couch base itself people often forget about that and Miss K there's a lot of memory required to run coach basis scale and then metadata",
    "start": "2124520",
    "end": "2131800"
  },
  {
    "text": "Associated how much replication you're doing and other activities this stuff consumes memory so be a little nuanced",
    "start": "2131800",
    "end": "2138960"
  },
  {
    "text": "about your memory requirements uh when you're adding it up and when you're trying to decide what instance to pick and importantly monitor we're going to",
    "start": "2138960",
    "end": "2145040"
  },
  {
    "text": "get to this later but you could do all the math you want and then there's the real world so this is why we're going to tell you about some monitoring tools",
    "start": "2145040",
    "end": "2151319"
  },
  {
    "text": "that that help you get the real numbers so you can right sizee your instances and again remember with ec2 and AWS you",
    "start": "2151319",
    "end": "2157520"
  },
  {
    "text": "can always change so you're not locked in if you go with an I2 whatever and you want to switch to an R3 or you know an",
    "start": "2157520",
    "end": "2163440"
  },
  {
    "text": "8xl that's cool it's not going to affect things you can only pay for what you use and then replace it with another instance type as your business grows or",
    "start": "2163440",
    "end": "2170119"
  },
  {
    "text": "as your your profile and your requirements change there's some new features in cbas 3 notably tunable memory and um a shared thread pool long",
    "start": "2170119",
    "end": "2177599"
  },
  {
    "text": "story short you can have more efficient memory usage less memory and uh more efficient thread sharing it has a thread",
    "start": "2177599",
    "end": "2183280"
  },
  {
    "text": "pool that it can share across processes making for faster operations",
    "start": "2183280",
    "end": "2188359"
  },
  {
    "text": "kbase is designed uh you know it's always been pretty strong in uh ha and and the ability to scale seamlessly and",
    "start": "2188359",
    "end": "2193640"
  },
  {
    "text": "it's getting uh better and better uh with time and faster in its ability to scale and recover quickly so each cbas",
    "start": "2193640",
    "end": "2199760"
  },
  {
    "text": "bucket remember I was talking about buckets their logical groupings of data has its own replica configuration how much do you want to replicate the data",
    "start": "2199760",
    "end": "2206040"
  },
  {
    "text": "in that bucket and also authentication who should have access to that data is you can partition your data from both a",
    "start": "2206040",
    "end": "2211319"
  },
  {
    "text": "security performance and replica durability perspective which is is really powerful so we recommend a",
    "start": "2211319",
    "end": "2216720"
  },
  {
    "text": "minimum of two replicas obviously you want to have more than one copy of your data if it's important but again think",
    "start": "2216720",
    "end": "2221880"
  },
  {
    "text": "about having you know non-replicated single single replica or like guess zero replica data where you just have one",
    "start": "2221880",
    "end": "2227680"
  },
  {
    "text": "copy of it for for low value stuff that may be a version of data you have elsewhere that you can always get back",
    "start": "2227680",
    "end": "2233319"
  },
  {
    "text": "um in that form quickly so again not you don't have to replicate everything and there's some hidden cost when you",
    "start": "2233319",
    "end": "2239040"
  },
  {
    "text": "replicate data moves around and there can be some data transfer charges and other things associated with replication so replicate",
    "start": "2239040",
    "end": "2245599"
  },
  {
    "text": "carefully just like what John was saying with Cassandra the concept of a rack when",
    "start": "2245599",
    "end": "2250640"
  },
  {
    "text": "you're reading the documentation in kbase that refers to really an availabil availability Zone and likewise and when",
    "start": "2250640",
    "end": "2256839"
  },
  {
    "text": "they say data center they really mean AWS region from our perspective so this new feature called rack awareness is a",
    "start": "2256839",
    "end": "2263000"
  },
  {
    "text": "way to distribute your data um properly across multiple availability zones and it's a great way to to leverage to do",
    "start": "2263000",
    "end": "2269240"
  },
  {
    "text": "multi-az with couchbase and actually have your data distributed properly across those multiple availability",
    "start": "2269240",
    "end": "2275599"
  },
  {
    "text": "zones another great feature if you are replicating data to and from on premises",
    "start": "2275599",
    "end": "2281560"
  },
  {
    "text": "or if you're replicating across regions potentially if you have a really large or really global distribution is cross",
    "start": "2281560",
    "end": "2286640"
  },
  {
    "text": "data center replication xdcr and uh if this was written in an Amazon way it would be cross Regional replication or",
    "start": "2286640",
    "end": "2293640"
  },
  {
    "text": "cross on premises if you will and that's one powerful feature of a lot of these data stores is you're not limited you can have a hybrid uh workflow where",
    "start": "2293640",
    "end": "2299640"
  },
  {
    "text": "you're replicating from say on premises or somewhere else where you have data or across regions if you need that level of",
    "start": "2299640",
    "end": "2305400"
  },
  {
    "text": "super availability or or Glo you know globalization there's some new features in cbas 3.0 notably a database change",
    "start": "2305400",
    "end": "2311400"
  },
  {
    "text": "protocol it's a streaming data protocol that um that doesn't have to persist the data to a disk first so it operates",
    "start": "2311400",
    "end": "2317960"
  },
  {
    "text": "entirely in memory so uh it the the changes means that you can replicate the changes faster and when you replicate",
    "start": "2317960",
    "end": "2324359"
  },
  {
    "text": "changes faster there's less chance for data loss and and higher performance so DCP is a great new addition in C base 3",
    "start": "2324359",
    "end": "2330040"
  },
  {
    "text": "and positive resume this is cool if you have a maintenance window and you want to pause the replication between for example on premises or another region",
    "start": "2330040",
    "end": "2336160"
  },
  {
    "text": "you can hit pause hit resume it takes care of all the muck for you so backups uh especially if you're",
    "start": "2336160",
    "end": "2343839"
  },
  {
    "text": "doing using instant storage the direct attached stores the ssds it's really important that you not only have",
    "start": "2343839",
    "end": "2349160"
  },
  {
    "text": "appropriate replica counts but that you also take backups and snapshots and you know generally speaking in Amazon we believe in the the concept of",
    "start": "2349160",
    "end": "2355800"
  },
  {
    "text": "replication over backups but backups are still important you should replicate enough but but still take a backup there's some tools you can use CB backup",
    "start": "2355800",
    "end": "2362119"
  },
  {
    "text": "and really it boils down to two highle patterns one pattern which is similar to",
    "start": "2362119",
    "end": "2367319"
  },
  {
    "text": "what Rahul was saying is where you attach a persistent volume an EBS volume use CB backup to write to that EBS",
    "start": "2367319",
    "end": "2373880"
  },
  {
    "text": "volume and then take an EBS snapshot which takes a snapshot to S3 the other way of doing this if you're using",
    "start": "2373880",
    "end": "2379359"
  },
  {
    "text": "ephemeral storage is again to use CB backup and write to your ephemeral storage and then actually um use the",
    "start": "2379359",
    "end": "2384880"
  },
  {
    "text": "command line tool or API to push that data in S3 and the difference is you're in a little more control there with EBS",
    "start": "2384880",
    "end": "2390760"
  },
  {
    "text": "you can actually see the EBS snapshots whereas if you do it yourself with S3 then you can manipulate the snapshot and",
    "start": "2390760",
    "end": "2396480"
  },
  {
    "text": "perhaps push them to other data stores later on monitor monitor monitor everything",
    "start": "2396480",
    "end": "2402920"
  },
  {
    "text": "I'm saying today may or may not be true you have your own reality so um there's some great you know cou Bas has actually",
    "start": "2402920",
    "end": "2408400"
  },
  {
    "text": "always been really strong both from a a UI perspective and just all the the monitoring tools you have at your disposal and it gets even stronger when",
    "start": "2408400",
    "end": "2414560"
  },
  {
    "text": "you marry it with cloudwatch cloudwatch has this concept of custom metrics where you can Surface sort of outside data",
    "start": "2414560",
    "end": "2420160"
  },
  {
    "text": "through cloudwatch so why not take some of that couch based data from its strong monitoring tools and surface it through",
    "start": "2420160",
    "end": "2425240"
  },
  {
    "text": "cloudwatch and then you can act those data set alerts Etc and vice versa cloudwatch gives you that hypervisor Lev",
    "start": "2425240",
    "end": "2431160"
  },
  {
    "text": "level of monitoring and then marry that with the server level the couch based level metrics use",
    "start": "2431160",
    "end": "2438240"
  },
  {
    "text": "both for security security is extremely important um new in coup 2.5 about I",
    "start": "2438640",
    "end": "2444160"
  },
  {
    "text": "guess about a year ago um you have cross data center replication you can do it over SSL that's important for inter",
    "start": "2444160",
    "end": "2450040"
  },
  {
    "text": "Regional which is going over the Internet for example you want to encrypt that so just a tick boox on your your",
    "start": "2450040",
    "end": "2455400"
  },
  {
    "text": "config maybe a little bit bit more than that and you can have SSL encrypted um cross Regional replication or",
    "start": "2455400",
    "end": "2460880"
  },
  {
    "text": "replication to and from on premises also if you're really really concerned about privacy you can leverage tools like Direct Connect for a private line",
    "start": "2460880",
    "end": "2467000"
  },
  {
    "text": "between your on- premises facility that you may be replicating to so that's a good good thing and then we also have a VPC VPN that allows you to have a really",
    "start": "2467000",
    "end": "2474000"
  },
  {
    "text": "easy to use IPC tunnel through your ver your vgw of your VPC you can leverage that again for",
    "start": "2474000",
    "end": "2480520"
  },
  {
    "text": "replication um all the new all the interfaces in cbas 3.0 the management interfaces I was talking about are now",
    "start": "2480520",
    "end": "2485760"
  },
  {
    "text": "available over https so the the access to the management interfaces the monitoring interfaces Etc are also SSL",
    "start": "2485760",
    "end": "2491520"
  },
  {
    "text": "encrypted now at a high level this is kind of what it looks like on AWS and you're probably",
    "start": "2491520",
    "end": "2496880"
  },
  {
    "text": "starting to see some some common themes here but using rack awareness to properly distribute across multiple",
    "start": "2496880",
    "end": "2502079"
  },
  {
    "text": "availability zones and using xdcr to replicate across regions or on premises and you can have a truly Global fully",
    "start": "2502079",
    "end": "2508599"
  },
  {
    "text": "distributed High available um cou Bas architecture the cool thing about",
    "start": "2508599",
    "end": "2513920"
  },
  {
    "text": "everything that we've discussed today is you don't have to you know I'm sure some of you are going to ask us outside which one's the best and there's no answer",
    "start": "2513920",
    "end": "2520480"
  },
  {
    "text": "they all have a place they all have applications and with AWS you can go to the marketplace you can download the",
    "start": "2520480",
    "end": "2526000"
  },
  {
    "text": "software you can install it yourself on ec2 and just for a few cents potentially a few bucks you can try all of these and",
    "start": "2526000",
    "end": "2531200"
  },
  {
    "text": "compare it yourself so we encourage all of you to you know use your free tier or spend that 26 Cents give it a shot",
    "start": "2531200",
    "end": "2537680"
  },
  {
    "text": "Monitor and uh let us know what you prefer and we'd be happy to help you get it set up and running and optimal so",
    "start": "2537680",
    "end": "2543480"
  },
  {
    "text": "thanks for your time today and we look forward to working with you to build layout ec2 with no sequel thank",
    "start": "2543480",
    "end": "2549800"
  },
  {
    "text": "you",
    "start": "2552720",
    "end": "2555720"
  }
]