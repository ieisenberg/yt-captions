[
  {
    "start": "0",
    "end": "240000"
  },
  {
    "text": "see hello everybody welcome to this",
    "start": "30",
    "end": "8400"
  },
  {
    "text": "session on matching database to the workload and my name is Rick Houlihan I am a senior practice manager for",
    "start": "8400",
    "end": "15480"
  },
  {
    "text": "database services at AWS I focused mostly on no SQL and over the last",
    "start": "15480",
    "end": "20820"
  },
  {
    "text": "several years I have migrated well over a thousand workloads across hundreds of customers to AWS across a variety of",
    "start": "20820",
    "end": "29340"
  },
  {
    "text": "database platforms not just no SQL so I'm I'm kind of rather uniquely",
    "start": "29340",
    "end": "34559"
  },
  {
    "text": "qualified I think to talk a little bit about this subject how do we push or choose the right database for the",
    "start": "34559",
    "end": "40140"
  },
  {
    "text": "workload is that's that's a typical day in the in my life is really what I end up doing on a repeated basis so from",
    "start": "40140",
    "end": "47100"
  },
  {
    "text": "this conversation today we'll talk a little bit about you know the types of workload classifications now how many",
    "start": "47100",
    "end": "52829"
  },
  {
    "text": "people were in Sean's session earlier okay so quite a few I when Sean talks a",
    "start": "52829",
    "end": "59640"
  },
  {
    "text": "lot about you know the purpose of an application and really what applications are very complex beasts right they're",
    "start": "59640",
    "end": "64948"
  },
  {
    "text": "not just one thing typically services make up multiple services make up an application and multiple workloads make up an",
    "start": "64949",
    "end": "71310"
  },
  {
    "text": "application so a lot of the grass that Shaun was bringing up we're talking about complex applications that are built up for many services they're made",
    "start": "71310",
    "end": "77790"
  },
  {
    "text": "up for many workloads and we'll talk about how classify those workloads and what we kind of go through the dimensions of a workload that we look at",
    "start": "77790",
    "end": "84210"
  },
  {
    "text": "and when we try to classify these workloads and look at what would be an appropriate database you know for a particular workload we'll get into some",
    "start": "84210",
    "end": "91320"
  },
  {
    "text": "of the traditional approaches to scaling and typically with relational databases because we all kind of understand this",
    "start": "91320",
    "end": "96750"
  },
  {
    "text": "right and again going back to Shawn's session where we talked about you know back in the 70s in the 80s right we had",
    "start": "96750",
    "end": "103049"
  },
  {
    "text": "three databases they were all relational platforms that's kind of what we did everything with and so scale is a big",
    "start": "103049",
    "end": "108720"
  },
  {
    "text": "dimension of workload right when we started looking at workloads we started looking at what kind of database am I gonna use you know for a given workload",
    "start": "108720",
    "end": "115500"
  },
  {
    "text": "scale is an important dimension and how we use to scale on how we dealt with scale with relational compared to no SQL",
    "start": "115500",
    "end": "122430"
  },
  {
    "text": "databases which is kind of the next generation of solutions that we have is a variety of those and we'll talk about",
    "start": "122430",
    "end": "127649"
  },
  {
    "text": "how they compare and why they may scale in a little bit differently a little bit better than the",
    "start": "127649",
    "end": "132810"
  },
  {
    "text": "relational database and then we'll talk a little bit about the flavors of no SQL and and some of the differences between",
    "start": "132810",
    "end": "138930"
  },
  {
    "text": "no SQL and and SQL and why were even looking at all these different solutions",
    "start": "138930",
    "end": "144330"
  },
  {
    "text": "right I mean we have all you know as Sean said over 300 database platforms being tracked today a variety of",
    "start": "144330",
    "end": "151020"
  },
  {
    "text": "solutions that we never really had to consider before that are purpose-built for many many reasons and so kind of",
    "start": "151020",
    "end": "157440"
  },
  {
    "text": "deciphering you know what is the purpose of this of this workload really and and why does this database fit isn't really",
    "start": "157440",
    "end": "164550"
  },
  {
    "text": "what we're gonna get into in this session so when I talk to teams customers and I deal a lot with internal",
    "start": "164550",
    "end": "171240"
  },
  {
    "text": "teams in Amazon and a lot of the times I'll ask the question of what you know why did you choose this database that",
    "start": "171240",
    "end": "176610"
  },
  {
    "text": "we're using that we're building around and typically I get one of these three answers right because we heard it's cool",
    "start": "176610",
    "end": "183000"
  },
  {
    "text": "is really what I want to get a lot which is not a great answer right you don't",
    "start": "183000",
    "end": "188040"
  },
  {
    "text": "want to use a database cuz it's a cool thing you want to use a database because it's the right thing okay you know",
    "start": "188040",
    "end": "193170"
  },
  {
    "text": "because we have a site license because we already own this technology so we're gonna make it we're gonna do everything with this technology because we own it",
    "start": "193170",
    "end": "199650"
  },
  {
    "text": "already and that might seem like a frugal investment but the reality is most of the time it's not the best",
    "start": "199650",
    "end": "205380"
  },
  {
    "text": "decision and we could probably do things better with solutions that are built for that and then of course there's always",
    "start": "205380",
    "end": "211830"
  },
  {
    "text": "the hate because I know how to use it right so because the skill set is commoditized or because the skill set is",
    "start": "211830",
    "end": "217890"
  },
  {
    "text": "something that's generally available in my organization we'll use this database but the best reason to use a database is",
    "start": "217890",
    "end": "223080"
  },
  {
    "text": "this reason right because the database is purpose-built for what my application is really designed for okay and that's",
    "start": "223080",
    "end": "231150"
  },
  {
    "text": "what we're gonna get into today what does that mean when I talk about what is my application designed for again we have lots of different workloads that",
    "start": "231150",
    "end": "237299"
  },
  {
    "text": "make up a given application today so we get into that we'll talk about what are",
    "start": "237299",
    "end": "242459"
  },
  {
    "start": "240000",
    "end": "240000"
  },
  {
    "text": "the types of workloads right that we can run into when we're looking at database",
    "start": "242459",
    "end": "247530"
  },
  {
    "text": "solutions today so there's a kind of a I guess you'd say you know messaging this",
    "start": "247530",
    "end": "255959"
  },
  {
    "text": "being adopted in the industry across the analyst to say that we have two types of workloads or two types of applications",
    "start": "255959",
    "end": "261510"
  },
  {
    "text": "there's an Operations folk is to happen there's an analytics focus to happen the reality is it's kind of it's not so clean cut but typically if",
    "start": "261510",
    "end": "268740"
  },
  {
    "text": "you look at what's generally been in the realm of the operations you know that side of the fence is what we would call",
    "start": "268740",
    "end": "275280"
  },
  {
    "text": "OLTP apps okay online transaction processing these are applications that are they represent a",
    "start": "275280",
    "end": "281759"
  },
  {
    "text": "regular business process something is repeatable it happens the same way every time so when the transaction is executed",
    "start": "281759",
    "end": "287759"
  },
  {
    "text": "through the system whether it's an order processing application or some sort of reporting application or something that",
    "start": "287759",
    "end": "294349"
  },
  {
    "text": "requires human interaction or not it's a very regular process that the application has to go through to process",
    "start": "294349",
    "end": "301830"
  },
  {
    "text": "that data and and this is the most common type of application right regular business process he's come in many",
    "start": "301830",
    "end": "309000"
  },
  {
    "text": "shapes and sizes and we build applications to handle these processes and that is definitely the most common",
    "start": "309000",
    "end": "314009"
  },
  {
    "text": "application type that we run into when we get into the analytics side we start looking at you know more kind of BI",
    "start": "314009",
    "end": "319919"
  },
  {
    "text": "reporting solutions ad hoc queries and access patterns that are not necessarily well understood right they might not be",
    "start": "319919",
    "end": "326789"
  },
  {
    "text": "the same all the time the questions I'm asking of the database you know are going to be different depending on the",
    "start": "326789",
    "end": "333659"
  },
  {
    "text": "user depending on the day depending on the nature of the workload that's executing now you might argue that some",
    "start": "333659",
    "end": "341159"
  },
  {
    "text": "operational or online analytics applications are actually operationally focused and I wouldn't disagree with you",
    "start": "341159",
    "end": "346680"
  },
  {
    "text": "this is where we start to get into maybe this line isn't quite so clean and there's a gray zone there but the",
    "start": "346680",
    "end": "351930"
  },
  {
    "text": "reality is OLAP workloads typically provide some sort of an aggregation an",
    "start": "351930",
    "end": "356940"
  },
  {
    "text": "ad hoc aggregation or something that's not a predictable and repeatable process that's what an OLAP application would",
    "start": "356940",
    "end": "363419"
  },
  {
    "text": "support the third type of application will talk about workload is really I",
    "start": "363419",
    "end": "368580"
  },
  {
    "text": "think you know a decision support system these are kind of long-running queries you think data data lakes you're asking",
    "start": "368580",
    "end": "376110"
  },
  {
    "text": "questions of a large you know pool of data and you're trying to you know drive",
    "start": "376110",
    "end": "382199"
  },
  {
    "text": "decisions around how you're going to run your business right so this would be looking at you know maybe how efficient",
    "start": "382199",
    "end": "388319"
  },
  {
    "text": "your organization was in you know consuming resources for a given you know project",
    "start": "388319",
    "end": "394210"
  },
  {
    "text": "and and feeding that information back up into the management process to determine",
    "start": "394210",
    "end": "399820"
  },
  {
    "text": "whether or not you know what kind of decisions you want to make in governing your business so these are typically",
    "start": "399820",
    "end": "404979"
  },
  {
    "text": "these types of workloads are the things we're dealing with you know OLTP OLAP DSS and they break down in those",
    "start": "404979",
    "end": "410259"
  },
  {
    "text": "categories of operations focused analytics focused and they have characteristics right repeatable process",
    "start": "410259",
    "end": "416410"
  },
  {
    "text": "something that is you know I can always I know which way the data is going to be processed every single time it runs a",
    "start": "416410",
    "end": "422740"
  },
  {
    "text": "transaction an ad hoc process where I don't necessarily understand the access patterns that are going to be coming in",
    "start": "422740",
    "end": "429039"
  },
  {
    "text": "they can be asked of the data when this application is running and then of course the the long running queries",
    "start": "429039",
    "end": "435070"
  },
  {
    "text": "where I'm asking questions a big big big you know chunks of data and these are typically where we start to look at",
    "start": "435070",
    "end": "441419"
  },
  {
    "text": "breaking down our workloads so what it comes down to when we look at any one of these workloads right we have types we",
    "start": "441419",
    "end": "448240"
  },
  {
    "text": "have kind of pattern flexibility thing here right is it a repeatable process that I can",
    "start": "448240",
    "end": "453490"
  },
  {
    "text": "with well understood access patterns or is it not right and how big is the workload and so scale is a huge",
    "start": "453490",
    "end": "459909"
  },
  {
    "text": "dimension of trying to determine what is the purpose of my workload right and and",
    "start": "459909",
    "end": "465250"
  },
  {
    "text": "problems with limited scope are pretty easy to solve right if I have a need to",
    "start": "465250",
    "end": "471849"
  },
  {
    "text": "manage the inventory in my store you know for example that might not necessarily be a huge amount of data",
    "start": "471849",
    "end": "477610"
  },
  {
    "text": "that I need to manage as a matter of fact I might have a point-of-sale system at the cashier that has all of the you",
    "start": "477610",
    "end": "484150"
  },
  {
    "text": "know the data that I need to run my whole store right in it right I and that's fine for me as an individual",
    "start": "484150",
    "end": "490300"
  },
  {
    "text": "store owner that's all I need now let's say I want to build a system that's designed you know to do root cause",
    "start": "490300",
    "end": "497470"
  },
  {
    "text": "analysis for you know to correlate transaction level events and we actually",
    "start": "497470",
    "end": "502750"
  },
  {
    "text": "worked with the company was doing this across global markets right now and that's a massive workload that's totally",
    "start": "502750",
    "end": "508750"
  },
  {
    "text": "different I can't run that on my laptop right I'm gonna need a totally different database and it's totally different different processing infrastructure to",
    "start": "508750",
    "end": "515529"
  },
  {
    "text": "run that application obviously so when it comes down to it but it's really about understanding the scale of your",
    "start": "515529",
    "end": "521589"
  },
  {
    "text": "application right so we have a couple of dimensions there we have the you know the flexibility of the the access",
    "start": "521589",
    "end": "527140"
  },
  {
    "text": "patterns I'm trying to support are they well understood or are they not I have a",
    "start": "527140",
    "end": "532660"
  },
  {
    "text": "scale issue and dimension that I'm looking at here how much how big is this application workload going to be and",
    "start": "532660",
    "end": "539440"
  },
  {
    "text": "these are definitely things are going to affect my database and when we get into looking at sizing you know the database",
    "start": "539440",
    "end": "547329"
  },
  {
    "start": "544000",
    "end": "544000"
  },
  {
    "text": "it's not easy right to do this and typically what you end up doing is is is is over time as the application starts",
    "start": "547329",
    "end": "554769"
  },
  {
    "text": "to scale you're going to increase capacity in chunks right step it's kind of a step function and when you overlay",
    "start": "554769",
    "end": "560290"
  },
  {
    "text": "the demand for your application over time you end up with a situation it looks something like this right where",
    "start": "560290",
    "end": "566110"
  },
  {
    "text": "I'm either gonna be over provisioned or I'm gonna be under provisioned and when I'm over provisioned I'm wasting money when I'm under provisioned I have a bad",
    "start": "566110",
    "end": "571990"
  },
  {
    "text": "customer experience and there's this brief moment in time where that line crosses where I'm perfectly provisioned",
    "start": "571990",
    "end": "577990"
  },
  {
    "text": "right so this is not an easy exercise and typically the way that we've gone about doing this in the past is to look",
    "start": "577990",
    "end": "585700"
  },
  {
    "start": "585000",
    "end": "585000"
  },
  {
    "text": "at scaling the relational database because it's been the only choice we've had and and and relational databases",
    "start": "585700",
    "end": "590920"
  },
  {
    "text": "don't scale easily right they they typically they scale vertically what that means is I'm gonna start off with a",
    "start": "590920",
    "end": "596920"
  },
  {
    "text": "certain size of infrastructure to support my application the demand for my application is going to increase over time I'm gonna have to increase the size",
    "start": "596920",
    "end": "603640"
  },
  {
    "text": "of that box right because that's how you scale a relational database you get a bigger box and eventually I'm gonna",
    "start": "603640",
    "end": "609910"
  },
  {
    "text": "increase the capacity or the demand for my application beyond the capacity of that box and I'm going to need to get a bigger box and this is a never-ending",
    "start": "609910",
    "end": "616149"
  },
  {
    "text": "battle I mean I've been dealing with this for decades we all have right it's at sooner or later you run to the limit",
    "start": "616149",
    "end": "623019"
  },
  {
    "text": "of what you can deploy as far as physical infrastructure to support a single instance of your database we hit",
    "start": "623019",
    "end": "629170"
  },
  {
    "text": "that point you know at Amazon it's why we wrote the dynamodb white paper but",
    "start": "629170",
    "end": "634769"
  },
  {
    "text": "eventually what's going to happen is you're gonna start saying okay I I'm actually bigger than a single instance",
    "start": "634769",
    "end": "640060"
  },
  {
    "text": "and we're gonna get into this it's trying to partition the data and this is actually even my career this is how I",
    "start": "640060",
    "end": "645100"
  },
  {
    "text": "ended up getting into no SQL technology I worked in the ITSM space the event load for enterprise IT infrastructures",
    "start": "645100",
    "end": "651490"
  },
  {
    "text": "and is an amazing you know amount of data that you're processing and we ended up having to do this time-based",
    "start": "651490",
    "end": "657310"
  },
  {
    "text": "partitioning of the event streams coming in hundreds of thousands of devices deployed on some of the largest you know",
    "start": "657310",
    "end": "663340"
  },
  {
    "text": "enterprise you know IT infrastructures out there and and it becomes a logistical",
    "start": "663340",
    "end": "669940"
  },
  {
    "text": "nightmare to try and manage the data this way so eventually what we started looking at was alternative solutions and",
    "start": "669940",
    "end": "675490"
  },
  {
    "text": "when we stumbled on at the time this is about ten years ago was no SQL databases right which were designed specifically",
    "start": "675490",
    "end": "680890"
  },
  {
    "start": "679000",
    "end": "679000"
  },
  {
    "text": "to solve this problem of scale right to get past this you know having to get a",
    "start": "680890",
    "end": "686170"
  },
  {
    "text": "bigger box all the time and the way they did that was that they support denormalized of data model and they",
    "start": "686170",
    "end": "692050"
  },
  {
    "text": "couple that with sharding and they can do this to provide horizontal scale and nearly unbounded throughput and storage",
    "start": "692050",
    "end": "699190"
  },
  {
    "text": "rights almost nearly for all practical purposes you could say infinite scale right there no practical limit to what",
    "start": "699190",
    "end": "705550"
  },
  {
    "text": "you can do with the new SQL database and the way they do this is interesting now",
    "start": "705550",
    "end": "710860"
  },
  {
    "text": "with relational databases when you start to distribute the data across multiple chards you can't really join that data so easily so the whole ad hoc query",
    "start": "710860",
    "end": "717910"
  },
  {
    "text": "pattern and normalized data model breaks down when I start to break across partitions no so when we go into the no",
    "start": "717910",
    "end": "725890"
  },
  {
    "text": "SQL type of model what we're really doing is we're trying to take all these items that are coming into the tables in",
    "start": "725890",
    "end": "731260"
  },
  {
    "text": "a denormalized structure and every one of these items gonna have a mandatory attribute in DynamoDB case it's called a",
    "start": "731260",
    "end": "736990"
  },
  {
    "text": "partition key okay all no SQL databases have an equivalent in MongoDB it's a",
    "start": "736990",
    "end": "742240"
  },
  {
    "text": "shard key they call it a partition key in Cassandra but what you're doing with this with this attribute that all items",
    "start": "742240",
    "end": "748210"
  },
  {
    "text": "must have is you're laying out these items in what dynamo DB DB does is an",
    "start": "748210",
    "end": "753400"
  },
  {
    "text": "unordered hash index so we will hash the attribute so in this case let's say we have a bunch of items coming in these",
    "start": "753400",
    "end": "759280"
  },
  {
    "text": "items have an ID attribute this is the partition key we will hash the ID",
    "start": "759280",
    "end": "764650"
  },
  {
    "text": "attribute we will lay these items out across an unordered index and the reason we're going to do this is because now when I want to scale all I have to do is",
    "start": "764650",
    "end": "772060"
  },
  {
    "text": "chop up that key space and distribute those items across multiple physical nodes okay so now when I go get data I'm",
    "start": "772060",
    "end": "779170"
  },
  {
    "text": "going to provide a partition key value that's going to direct the system right to the exact storage know where that data lives this is how no SQL databases",
    "start": "779170",
    "end": "785589"
  },
  {
    "text": "become fast and consistent at any scale right I'm providing that key value access pattern that's driving me right",
    "start": "785589",
    "end": "791920"
  },
  {
    "text": "to the exact place I need to to get the data I need DynamoDB does a couple other things on top of that we're",
    "start": "791920",
    "end": "798430"
  },
  {
    "text": "not really going to get into design patterns in dynamo but it's important to understand how no SQL databases scale and the decisions that we're making when",
    "start": "798430",
    "end": "805180"
  },
  {
    "text": "we scale okay so if we look at data in general and if you're familiar with",
    "start": "805180",
    "end": "812020"
  },
  {
    "start": "808000",
    "end": "808000"
  },
  {
    "text": "product management there's this thing called the Iron Triangle of product management right you can get things good fast or cheap pick two all right you're",
    "start": "812020",
    "end": "818740"
  },
  {
    "text": "not gonna get all three data has its own Iron Triangle it's called cap right and cap is about consistency availability",
    "start": "818740",
    "end": "825280"
  },
  {
    "text": "and partition tolerance and you're going to get two of those dimensions and no SQL databases make a choice of how they",
    "start": "825280",
    "end": "831130"
  },
  {
    "text": "apply the cap theorem so if you if you look at the three dimensions we'll talk about consistency first consistency is",
    "start": "831130",
    "end": "836590"
  },
  {
    "text": "about clients being able to see the data the same way all clients of the system",
    "start": "836590",
    "end": "841930"
  },
  {
    "text": "that are connected the system will be able to see the same data when they read you know then access the database",
    "start": "841930",
    "end": "847560"
  },
  {
    "text": "availability means that all clients who are connected to the system will always be able to read and write and that's",
    "start": "847560",
    "end": "853810"
  },
  {
    "text": "important both dimensions read and write if I can read the data but I can't write then the system is not available",
    "start": "853810",
    "end": "859690"
  },
  {
    "text": "okay so there's consistency and availability and then there's partition tolerance that's when we start to scale",
    "start": "859690",
    "end": "864880"
  },
  {
    "text": "out the system right we start to partition the data store will the system operate well when a physical network",
    "start": "864880",
    "end": "871210"
  },
  {
    "text": "partition is introduced and these nodes start stop communicating with each other so no SQL databases make a choice when",
    "start": "871210",
    "end": "877810"
  },
  {
    "text": "they break that consistency and availability relational databases will",
    "start": "877810",
    "end": "884460"
  },
  {
    "text": "yeah relational databases will always what's going on I'm missing you okay",
    "start": "884460",
    "end": "889510"
  },
  {
    "text": "yeah relational databases choose to be consistent available they ignore partition tolerance this is why they scale vertically I always have to get a",
    "start": "889510",
    "end": "895690"
  },
  {
    "text": "bigger box because they don't partition when a relational database fails over its it it you know it is or when",
    "start": "895690",
    "end": "902890"
  },
  {
    "text": "relational the native these clients will always read the same data okay and it will always be available all clients",
    "start": "902890",
    "end": "908800"
  },
  {
    "text": "that are connected to the relational database will always be able to read and write when that database is online okay when a partition is exists between the",
    "start": "908800",
    "end": "915400"
  },
  {
    "text": "primary and secondary the databases actually goes offline so when the data is online it's always available now no",
    "start": "915400",
    "end": "922690"
  },
  {
    "text": "SQL databases make a choice they can either be consistent and part tsch intolerant like many Noah Skoda",
    "start": "922690",
    "end": "929290"
  },
  {
    "text": "bases are MongoDB and DynamoDB for example dynamodb is a consistent database within the region if I write to",
    "start": "929290",
    "end": "936430"
  },
  {
    "text": "dynamodb and I request a consistent read I will get the same data back that I read other databases will know SQL",
    "start": "936430",
    "end": "943389"
  },
  {
    "text": "databases choose availability right any node can take a write anything so if a",
    "start": "943389",
    "end": "948579"
  },
  {
    "text": "network partition exists between a consistent in a CP system the primary is going to stop taking the writes until a",
    "start": "948579",
    "end": "955179"
  },
  {
    "text": "new primary steps up and takes over all writes will occur at the primary node ok",
    "start": "955179",
    "end": "960610"
  },
  {
    "text": "in an AP system that's not the case all nodes can take a right so if a network",
    "start": "960610",
    "end": "965619"
  },
  {
    "text": "partitioning is injected into the system any node on either side of that partition is going to continue to take",
    "start": "965619",
    "end": "970959"
  },
  {
    "text": "writes and at some point when they start talking to each other again it'll it'll resolve the conflicts ok",
    "start": "970959",
    "end": "977290"
  },
  {
    "text": "there's there's there's callback functions and there's mechanisms to be able to do this in most databases that",
    "start": "977290",
    "end": "982720"
  },
  {
    "text": "access that at that act in the AP manner now DynamoDB is the only database that acts as both regionally within a region",
    "start": "982720",
    "end": "990160"
  },
  {
    "text": "where CP with global tables across multiple regions we are the only fully managed master master globally",
    "start": "990160",
    "end": "997209"
  },
  {
    "text": "replicated no SQL database and that gives us that ap kind of function right I can write to any table in a global",
    "start": "997209",
    "end": "1003240"
  },
  {
    "text": "table replication loop and those rights will eventually replicate and deconflict",
    "start": "1003240",
    "end": "1009059"
  },
  {
    "text": "themselves based on timestamp so dynamodb provides both CP and ap functionality so these are the kind of",
    "start": "1009059",
    "end": "1015120"
  },
  {
    "text": "choices we're making when we decide to go with a new SQL technology write",
    "start": "1015120",
    "end": "1020610"
  },
  {
    "text": "relational we're gonna scale vertically that's going to give us you know some limited scalability but it's going to give us a lot of pattern flexibility",
    "start": "1020610",
    "end": "1027569"
  },
  {
    "text": "because I can support ad-hoc queries now no SQL I'm gonna scale horizontally it's",
    "start": "1027569",
    "end": "1032760"
  },
  {
    "text": "gonna give me a lot of scalability it's gonna give me a lot of you know efficiency but it's not going to give me",
    "start": "1032760",
    "end": "1038938"
  },
  {
    "text": "a lot of flexibility in how I access the data all right because it's denormalized data structures that are really designed",
    "start": "1038939",
    "end": "1044579"
  },
  {
    "text": "to support the access patterns ok so now we're starting to get to the points here we have a pattern flexibility dimension",
    "start": "1044579",
    "end": "1051270"
  },
  {
    "text": "right how can I do I do I know what it is that I'm that I'm dealing with when I run my transaction right is it a well",
    "start": "1051270",
    "end": "1058049"
  },
  {
    "text": "understood access pattern we have a scalability dimension right and we have this efficiency dimension",
    "start": "1058049",
    "end": "1063450"
  },
  {
    "text": "how long has it take things in the system to occur so before we get into talking about your database options",
    "start": "1063450",
    "end": "1069510"
  },
  {
    "text": "there's one thing I would kind of what point I want to make and it's really important when you start looking at new",
    "start": "1069510",
    "end": "1074790"
  },
  {
    "start": "1072000",
    "end": "1072000"
  },
  {
    "text": "technology now relational technology has been around for decades we all understand these things when we",
    "start": "1074790",
    "end": "1080220"
  },
  {
    "text": "interview developers today we don't ask them what's the inner join right everyone kind of knows what any near join is right but thirty years ago we",
    "start": "1080220",
    "end": "1086549"
  },
  {
    "text": "did have to ask developers that because most developers when they created a relational database they didn't",
    "start": "1086549",
    "end": "1092429"
  },
  {
    "text": "understand relational technologies and they would build big giant tables that look like Excel spreadsheets okay and",
    "start": "1092429",
    "end": "1097620"
  },
  {
    "text": "that was a very common thing people did it was terrible anti-pattern that people did you know decades ago and so what",
    "start": "1097620",
    "end": "1105120"
  },
  {
    "text": "this chart really talks about is when people on the bottom we have this kind",
    "start": "1105120",
    "end": "1110610"
  },
  {
    "text": "of technology adoption curve right and there's going to be some sort of technology trigger that's driving innovators to deliver new solutions in",
    "start": "1110610",
    "end": "1116970"
  },
  {
    "text": "in data per in database technology it's really about what I call data pressure",
    "start": "1116970",
    "end": "1121980"
  },
  {
    "text": "which is the ability of the system to process the amount of data that it's being asked to process in a reasonable",
    "start": "1121980",
    "end": "1127530"
  },
  {
    "text": "time or at a reasonable cost when one of those dimensions is out of whack we're going to invent new stuff and that's",
    "start": "1127530",
    "end": "1133950"
  },
  {
    "text": "what we've done right as relational technology has become you know more and more cost inefficient to operate at",
    "start": "1133950",
    "end": "1140820"
  },
  {
    "text": "scale we've developed new technologies new database technologies that actually are efficient to operate at scale and",
    "start": "1140820",
    "end": "1146669"
  },
  {
    "text": "and and what happens whenever you develop a new technology to solve old problems is people are going to run to this new technology because they hear",
    "start": "1146669",
    "end": "1153630"
  },
  {
    "text": "about these early adopters that had some good success and they're gonna go and try and deploy this technology themselves and what they find out is it",
    "start": "1153630",
    "end": "1159630"
  },
  {
    "text": "doesn't really work very well for them and their Armada map you can assume that they have a use case that doesn't really apply there something is wrong or",
    "start": "1159630",
    "end": "1166230"
  },
  {
    "text": "something is different about what they're doing and all these other people what works for them and not me but the reality is that you just didn't learn",
    "start": "1166230",
    "end": "1172110"
  },
  {
    "text": "how to use the tool you're trying to use the tool the same way you use the old tool and if you do that you can have a",
    "start": "1172110",
    "end": "1177570"
  },
  {
    "text": "miserable experience okay so the message here is if you want to get onto that",
    "start": "1177570",
    "end": "1182820"
  },
  {
    "text": "slope of enlightenment so to speak that's really when that when the skill sets are commoditizing across the",
    "start": "1182820",
    "end": "1188190"
  },
  {
    "text": "industry when everybody kind of knows how to use it then it sees then the early majority has arrived all right if you want to have good",
    "start": "1188190",
    "end": "1194760"
  },
  {
    "text": "results then learn how to use the new technology before you deploy and you'll have much better results and there nothing is more demonstrative of that",
    "start": "1194760",
    "end": "1202500"
  },
  {
    "text": "than the the relational - ad normalized you know approach to data modelling all",
    "start": "1202500",
    "end": "1209370"
  },
  {
    "text": "right developers do not like denormalize data models it is it is something that's",
    "start": "1209370",
    "end": "1215430"
  },
  {
    "text": "foreign to our brains we all love the normal third normal form and everyone understands this but when you get an",
    "start": "1215430",
    "end": "1220710"
  },
  {
    "text": "Indy normalized data and actually tuning the data to the access pattern that's a problem that most developers really",
    "start": "1220710",
    "end": "1225990"
  },
  {
    "text": "don't know how to solve yet I spend a lot of time I teach and folks that so I'd love to talk to this chart because",
    "start": "1225990",
    "end": "1231990"
  },
  {
    "text": "it really hammers the point home if you're gonna try and use the new technology the way you use the old technology you're gonna have the same",
    "start": "1231990",
    "end": "1237810"
  },
  {
    "text": "results probably worse so learn how to use the new technology first now AWS has",
    "start": "1237810",
    "end": "1243630"
  },
  {
    "start": "1243000",
    "end": "1243000"
  },
  {
    "text": "a ton of new technology for you right and a ton of database technology so this",
    "start": "1243630",
    "end": "1249150"
  },
  {
    "text": "is what I call the hamburger chart and it's it's you know you got the bun on the top and the bottom and you got the",
    "start": "1249150",
    "end": "1255090"
  },
  {
    "text": "big beef patty in the middle and a whole bunch of toppings right so but you know",
    "start": "1255090",
    "end": "1260310"
  },
  {
    "text": "what we're really doing is kind again breaking out the database solutions into the kind of categories of application if",
    "start": "1260310",
    "end": "1265440"
  },
  {
    "text": "you look at the operational databases we have you know our non-relational databases I don't like saying",
    "start": "1265440",
    "end": "1270690"
  },
  {
    "text": "non-relational because all data actually does have some relationship I wouldn't really care about it right even in no",
    "start": "1270690",
    "end": "1276210"
  },
  {
    "text": "SQL technology I'm aggregating data somehow either within the document or within item partitions or whatnot so I'd",
    "start": "1276210",
    "end": "1281640"
  },
  {
    "text": "like to say it's more of a denormalized data store or no SQL and and and then there's the relational databases now",
    "start": "1281640",
    "end": "1288030"
  },
  {
    "text": "relational databases again they kind of play both sides there's no reason I can't build an OLTP application on a",
    "start": "1288030",
    "end": "1294180"
  },
  {
    "text": "relational database they did it for decades why would it not be something I can do today those reasons I might not",
    "start": "1294180",
    "end": "1300150"
  },
  {
    "text": "want to do that and they had they're related to well scale right I mean relational databases don't scale so well",
    "start": "1300150",
    "end": "1306030"
  },
  {
    "text": "so maybe if I'm building a scaled out OLTP application and I need low latency",
    "start": "1306030",
    "end": "1311040"
  },
  {
    "text": "then the relational database isn't the right solution for me but that doesn't mean that it can't do OLTP right so",
    "start": "1311040",
    "end": "1318240"
  },
  {
    "text": "there's no category of workload that any database cannot do it's just that some are better than that at certain",
    "start": "1318240",
    "end": "1324150"
  },
  {
    "text": "workloads and others and that's why we have these purpose-built solutions alright so in the non-relational realm or in the no",
    "start": "1324150",
    "end": "1329539"
  },
  {
    "text": "SQL realm we've got dynamodb that is a basically a wide column or document",
    "start": "1329539",
    "end": "1335330"
  },
  {
    "text": "store that provides a key value access pattern we've got to last a cache which is a pure indexed key value store we",
    "start": "1335330",
    "end": "1342679"
  },
  {
    "text": "have neptune which is a new service it's a graph database and we're going to talk a little bit about the differences",
    "start": "1342679",
    "end": "1347690"
  },
  {
    "text": "between you know these different types of no SQL specifically between a a wide",
    "start": "1347690",
    "end": "1352700"
  },
  {
    "text": "column key value store like DynamoDB and a graph database like neptune you know",
    "start": "1352700",
    "end": "1358370"
  },
  {
    "text": "what what's the use case here and why can't I just use one for both and when would I use one or the other we're",
    "start": "1358370",
    "end": "1364340"
  },
  {
    "text": "really going to get into that and we'll talk a little bit about you know some of the others as well but I'm not gonna get too much into the relational stuff",
    "start": "1364340",
    "end": "1370460"
  },
  {
    "text": "because we again we all understand relational technology but we want to talk about the services we have to offer so the first service we'll talk about is",
    "start": "1370460",
    "end": "1377779"
  },
  {
    "text": "Amazon RDS and we have hundreds of thousands of users using RDS you know you know customers using RDS for just",
    "start": "1377779",
    "end": "1384380"
  },
  {
    "text": "about every workload you can imagine it is really it's a fully managed relational database service we have you",
    "start": "1384380",
    "end": "1390649"
  },
  {
    "text": "know five flavors of common you know SQL technology out there we have our own",
    "start": "1390649",
    "end": "1395990"
  },
  {
    "text": "flavor a relational database management system which is Amazon Arora it's highly",
    "start": "1395990",
    "end": "1402559"
  },
  {
    "text": "scalable very easy to administer and for anybody who's ever run production databases you can start to get really",
    "start": "1402559",
    "end": "1408200"
  },
  {
    "text": "bogged down in you know administrating the hardware especially for large you",
    "start": "1408200",
    "end": "1413840"
  },
  {
    "text": "know farms of database servers and you know maintaining the hardware",
    "start": "1413840",
    "end": "1418880"
  },
  {
    "text": "maintaining the software dealing with hardware failures rebuilding drives I mean this is a lot of overhead so a lot",
    "start": "1418880",
    "end": "1424940"
  },
  {
    "text": "of customers just come to us and just say look I don't want to be in the business of managing my relational database anymore I want you to take care",
    "start": "1424940",
    "end": "1431149"
  },
  {
    "text": "of that for me and that's what RDS really does I mean just it's easy to administrator and highly flexible you can scale the database up and down with",
    "start": "1431149",
    "end": "1437779"
  },
  {
    "text": "a couple clicks of the mouse typically if I deploy a relational database in my own managed data center right I mean I'm",
    "start": "1437779",
    "end": "1443840"
  },
  {
    "text": "gonna want to run that hardware for the life of the hardware well what happens if a year from now I need more",
    "start": "1443840",
    "end": "1449269"
  },
  {
    "text": "horsepower and I've just invested a half a million dollars right in a dedicated piece of hardware to run my SQL Server",
    "start": "1449269",
    "end": "1456200"
  },
  {
    "text": "and I've actually seen that happen I was working with a customer in a previous life and you know that's exactly what",
    "start": "1456200",
    "end": "1461810"
  },
  {
    "text": "they did they spent a half a million dollars on a piece of you know big iron infrastructure to run ms SQL Server and",
    "start": "1461810",
    "end": "1467420"
  },
  {
    "text": "nine months later they had Microsoft in their tuning and tuning and tuning and in the eventual answer was you just need a bigger box and the customers said okay",
    "start": "1467420",
    "end": "1474380"
  },
  {
    "text": "enough of that I got to go someplace where I don't have to make these you know big heavy investments in capital",
    "start": "1474380",
    "end": "1480230"
  },
  {
    "text": "you know infrastructure that are obsolete within months right I want to",
    "start": "1480230",
    "end": "1485330"
  },
  {
    "text": "be in a more flexible environment so they started looking at AWS and they moved into RDS they're much happier the RDS offers instances up to 64 virtual",
    "start": "1485330",
    "end": "1493490"
  },
  {
    "text": "CPUs up to a half a terabyte of RAM you know it's a it's really a potent system",
    "start": "1493490",
    "end": "1499030"
  },
  {
    "text": "multi a-z deployments dual SSD backed storage for high performance it really",
    "start": "1499030",
    "end": "1506690"
  },
  {
    "text": "does provide you know just about anything that you would be able to provide with your own managed",
    "start": "1506690",
    "end": "1512240"
  },
  {
    "text": "infrastructure getting into DynamoDB we're talking more about no SQL here",
    "start": "1512240",
    "end": "1518810"
  },
  {
    "text": "obviously this is a again it's a key/value no SQL database that supports both document and wide column data",
    "start": "1518810",
    "end": "1525530"
  },
  {
    "text": "structures for those aren't familiar you can think of a you know document attribute would be kind of a JSON",
    "start": "1525530",
    "end": "1531800"
  },
  {
    "text": "structure right you just put it into the item and you associate a partition key attribute to that and then you can pull",
    "start": "1531800",
    "end": "1538100"
  },
  {
    "text": "out that document a wide column is just simply a bunch of attributes tacked on for the item itself so that vary from",
    "start": "1538100",
    "end": "1544220"
  },
  {
    "text": "item to item dynamodb is fast and consistent at any scale maybe we talked",
    "start": "1544220",
    "end": "1549380"
  },
  {
    "text": "about how no SQL database is scale horizontally and I'm always going to provide some sort of a key condition",
    "start": "1549380",
    "end": "1556220"
  },
  {
    "text": "that's gonna drive me to the exact place I in this in the database that I know exactly what stores know to go read from",
    "start": "1556220",
    "end": "1562250"
  },
  {
    "text": "no matter how big the database is it could be a petabyte and we have tables that are hundreds of terabytes that do",
    "start": "1562250",
    "end": "1567650"
  },
  {
    "text": "millions of transactions per second right DynamoDB is you know a drove",
    "start": "1567650",
    "end": "1573380"
  },
  {
    "text": "primed a for Amazon which is you know i think in Shaun's presentation we showed over 12 or 13 million requests per",
    "start": "1573380",
    "end": "1580010"
  },
  {
    "text": "second across that was just Amazon tables all right that wasn't even just the entire backplane of DynamoDB",
    "start": "1580010",
    "end": "1585880"
  },
  {
    "text": "DynamoDB was at that on prime day was doing three or four times that in total requests per second on the backplane so",
    "start": "1585880",
    "end": "1592100"
  },
  {
    "text": "and and not only that but if you get some idea of the scale of dynamo it wasn't even just two months later I was",
    "start": "1592100",
    "end": "1597460"
  },
  {
    "text": "in an ops meeting with the GM of DynamoDB and and and what we call the CDO which is our commercial digital and",
    "start": "1597460",
    "end": "1603670"
  },
  {
    "text": "other development teams and we were talking about cyber monday and and Black Friday and and to kind of ease the",
    "start": "1603670",
    "end": "1610450"
  },
  {
    "text": "conscience of our kind of our one of our largest customers which is our internal CDO the GM of DynamoDB let him know oh by",
    "start": "1610450",
    "end": "1617350"
  },
  {
    "text": "the way we're now exceeding what we were doing on prime day every day and that was just two months later okay so a year",
    "start": "1617350",
    "end": "1624640"
  },
  {
    "text": "later I don't even know what we're doing we're probably doing twice what we were doing or even three times I don't know what the current numbers are but just to",
    "start": "1624640",
    "end": "1630760"
  },
  {
    "text": "give you some idea how fast this service is scaling is really it's really amazing you know what what it's doing so again",
    "start": "1630760",
    "end": "1637990"
  },
  {
    "text": "fully managed nothing you need to do except turn it on which and again dynamic so it can adapt to your workload",
    "start": "1637990",
    "end": "1645910"
  },
  {
    "text": "we actually have an auto scaling function so it does it automatically as the load will increase against your",
    "start": "1645910",
    "end": "1651250"
  },
  {
    "text": "table or demand increase against your table auto scaling will provision capacity and D provision capacity as",
    "start": "1651250",
    "end": "1657040"
  },
  {
    "text": "that load expires so when you look at and we're gonna get into a little bit more about the schema here because a lot",
    "start": "1657040",
    "end": "1662740"
  },
  {
    "start": "1660000",
    "end": "1660000"
  },
  {
    "text": "of people again we all understand relational technology it's all pretty straightforward stuff for us but understanding non-relational is a little",
    "start": "1662740",
    "end": "1669040"
  },
  {
    "text": "different so and we do need to understand how this stuff works to an extent you'd kind of determine whether",
    "start": "1669040",
    "end": "1674170"
  },
  {
    "text": "it's the right database for me for my workload so dynamo DB schema basically just like all databases has tables",
    "start": "1674170",
    "end": "1681120"
  },
  {
    "text": "tables have items in know SQL and dynamodb items have attributes now not",
    "start": "1681120",
    "end": "1687640"
  },
  {
    "text": "all items have to have the same attributes but all items have must have one attribute they must have that",
    "start": "1687640",
    "end": "1693490"
  },
  {
    "text": "partition key right because that tells me where to put the data if I don't have a partition key I don't know what to do with this item so if I don't include",
    "start": "1693490",
    "end": "1699760"
  },
  {
    "text": "that then you're gonna anytime I insert a document without that it's just going to throw an error and say you must give me the partition key so once you do that",
    "start": "1699760",
    "end": "1706330"
  },
  {
    "text": "then you can provide an optional sort key and if we give you a sort key if you give me a sort key now I can do all",
    "start": "1706330",
    "end": "1711910"
  },
  {
    "text": "kinds of cool things with the items that are located within that logical partition so you can think of the",
    "start": "1711910",
    "end": "1716950"
  },
  {
    "text": "partition key defining a bucket right or or a folder and the sort key defining",
    "start": "1716950",
    "end": "1722080"
  },
  {
    "text": "the order of the items that are within that bucket or the folder now against that sort key I can operate",
    "start": "1722080",
    "end": "1727650"
  },
  {
    "text": "I can execute range operators that will allow me to do you know selective queries and aggregate the items within",
    "start": "1727650",
    "end": "1734700"
  },
  {
    "text": "those individual logical partitions all right so it's a nice way to be able to put let's say you know orders by",
    "start": "1734700",
    "end": "1740880"
  },
  {
    "text": "customer and I want the orders for the customer within the last 24 days or 30 days right I could do that kind of query",
    "start": "1740880",
    "end": "1746700"
  },
  {
    "text": "where the partition key might be my customer ID and the store key might be my the timestamp of the order right and",
    "start": "1746700",
    "end": "1752760"
  },
  {
    "text": "then I can give a date range query against that sort key and say for this customer I want all orders within the last 30 days and then that would limit",
    "start": "1752760",
    "end": "1759780"
  },
  {
    "text": "the result set that comes back now I could provide conditions against the sort key and that'll give me a nice",
    "start": "1759780",
    "end": "1765600"
  },
  {
    "text": "selective read and then I can provide conditions against any of the extended attributes and then that will filter the",
    "start": "1765600",
    "end": "1770640"
  },
  {
    "text": "result set after the read okay so a nice way to be able to manipulate the results that are coming back when you query so",
    "start": "1770640",
    "end": "1777000"
  },
  {
    "text": "it's not just a pure key value system it actually gives you the ability to execute complex queries against the",
    "start": "1777000",
    "end": "1782880"
  },
  {
    "text": "items that are located or stored within logical partitions right so how does",
    "start": "1782880",
    "end": "1788850"
  },
  {
    "text": "that really play when we start looking at relational technology you know traditionally again this is the this has",
    "start": "1788850",
    "end": "1794250"
  },
  {
    "start": "1791000",
    "end": "1791000"
  },
  {
    "text": "been our approach to database design the third normal form I guarantee probably almost almost",
    "start": "1794250",
    "end": "1799920"
  },
  {
    "text": "anyone in this room I could give you a business problem and you can come back to me and within 15 minutes with a nice high level third normal form diagram of",
    "start": "1799920",
    "end": "1807390"
  },
  {
    "text": "a schema that will support that business problem right in this particular case we're looking at a product catalog I've got products that I've got books albums",
    "start": "1807390",
    "end": "1813690"
  },
  {
    "text": "and videos and you can see I have just about every kind of relationship you might see in a normalized or one-to-one",
    "start": "1813690",
    "end": "1819690"
  },
  {
    "text": "between products and books one-to-many between albums and tracks and and many-to-many between videos and actors",
    "start": "1819690",
    "end": "1826500"
  },
  {
    "text": "right and you can imagine how many queries and what kinds of queries I'd have to execute to be able to pull the data back out of this store right oh boy",
    "start": "1826500",
    "end": "1833880"
  },
  {
    "text": "there's three or four different queries with complex joins through multiple tables this is not going to be an easy operations can be very CPU intensive and",
    "start": "1833880",
    "end": "1840930"
  },
  {
    "text": "this is the problem with relational right but it was designed this way for a reason it was built this way because 30",
    "start": "1840930",
    "end": "1847110"
  },
  {
    "text": "or 40 years ago the most expensive resource in the data center was disk alright and deduplicating the data on",
    "start": "1847110",
    "end": "1852990"
  },
  {
    "text": "the disk was the number one mission of this database of the relational database and it was a powerful tool to do that in",
    "start": "1852990",
    "end": "1858660"
  },
  {
    "text": "1983 I went to Macworld and I remember walking through this you know here at Moscone Center and seeing",
    "start": "1858660",
    "end": "1865210"
  },
  {
    "text": "in the middle of the floor a truck transmission what looked like a truck transmission and I walked out that",
    "start": "1865210",
    "end": "1870700"
  },
  {
    "text": "why is your truck transmission in the middle floor may is too big and they couldn't move it it turned out wasn't a truck transmission it was a cross",
    "start": "1870700",
    "end": "1876130"
  },
  {
    "text": "section hard drive from 1974 the cool of one of the coolest things I've ever seen but that the most shocking thing was the",
    "start": "1876130",
    "end": "1882760"
  },
  {
    "text": "price tag they had at price tag I see MSRP two hundred sixty five thousand dollars and it was four megabytes",
    "start": "1882760",
    "end": "1891600"
  },
  {
    "text": "alright so so just to give you some sense of why why did we want to deduplicate the day though well because",
    "start": "1892620",
    "end": "1898690"
  },
  {
    "text": "data sprawl has been a problem for you know since the first machine-readable punch card was invented in 1880 right so",
    "start": "1898690",
    "end": "1905410"
  },
  {
    "text": "you know being able to deduplicate the data on disk was a very powerful tool and they did it at the cost that cpu",
    "start": "1905410",
    "end": "1911290"
  },
  {
    "text": "because the cpu is a fixed asset right hey you the cpu spun whether I was using it or not right so let's let's go ahead",
    "start": "1911290",
    "end": "1917740"
  },
  {
    "text": "and and deduplicate the data because that's when spending the money well fast forward 30 or 40 years and the opposite is true right now",
    "start": "1917740",
    "end": "1924220"
  },
  {
    "text": "storage is cheap CPU is expensive I pay for CPU seconds right I don't want to be",
    "start": "1924220",
    "end": "1930340"
  },
  {
    "text": "the investing in technology that is minimizing the most expensive you know there's maximizing the most expensive",
    "start": "1930340",
    "end": "1937180"
  },
  {
    "text": "resource in the data center right and minimizing the least so you can start to",
    "start": "1937180",
    "end": "1942190"
  },
  {
    "text": "get the idea here with relational database man that's a cost factor that really comes down to scale relational",
    "start": "1942190",
    "end": "1948310"
  },
  {
    "text": "database is great flexibility not the best from a cost profile right so let's",
    "start": "1948310",
    "end": "1954250"
  },
  {
    "text": "talk about how we do that in a normalized store it's a little bit different we're going to take those relational hierarchies right you can",
    "start": "1954250",
    "end": "1959350"
  },
  {
    "text": "look at kind of that table you can almost see it the the biggest thing you know the top level item is a product",
    "start": "1959350",
    "end": "1964660"
  },
  {
    "text": "there's all just different types of product so we'll build hierarchies that describe our products and we're going to stick these items into our partitions",
    "start": "1964660",
    "end": "1970780"
  },
  {
    "text": "either as documents or as items that are aggregated within these product",
    "start": "1970780",
    "end": "1976120"
  },
  {
    "text": "partitions and now when I go to my database to get the products I have one query select star from products that's a",
    "start": "1976120",
    "end": "1983050"
  },
  {
    "text": "much easier query right so this is why not non-relational databases or no SQL databases like dynamo DB scale really",
    "start": "1983050",
    "end": "1990430"
  },
  {
    "text": "very very well but you can you imagine if let's say I wanted to ask you start to rotate that data into a",
    "start": "1990430",
    "end": "1995590"
  },
  {
    "text": "different view right maybe not so there's no ad hoc query here right so I'm gonna get the products select star",
    "start": "1995590",
    "end": "2002129"
  },
  {
    "text": "from products I'll get the way my products look but you know if I want to get if I want to join these products and start to manipulate these things and and",
    "start": "2002129",
    "end": "2009330"
  },
  {
    "text": "create ad hoc aggregations then that could be problematic right so you're trading off flexibility but I'm gaining",
    "start": "2009330",
    "end": "2015719"
  },
  {
    "text": "scale and efficiency so there's always trade-offs here right when we start to look at database technology okay",
    "start": "2015719",
    "end": "2021509"
  },
  {
    "text": "the next database we're going to talk about is Neptune this is a graph database and it's also a clack",
    "start": "2021509",
    "end": "2027690"
  },
  {
    "text": "categorized as a no SQL database Neptune",
    "start": "2027690",
    "end": "2032759"
  },
  {
    "text": "is awesome it is it is really about querying relationships when we talk about relationships a fundamental thing",
    "start": "2032759",
    "end": "2039119"
  },
  {
    "text": "to understand with a graph database is that relationships are first-class entities in a graph database unlike any",
    "start": "2039119",
    "end": "2044309"
  },
  {
    "text": "other database what does that mean well it means really that relationships have properties right in a relational",
    "start": "2044309",
    "end": "2050819"
  },
  {
    "text": "database relationships don't have properties they just indicate the two things are connected but in an in a graph database I can actually assign",
    "start": "2050819",
    "end": "2057299"
  },
  {
    "text": "properties and and characteristics to the relationship between the entities",
    "start": "2057299",
    "end": "2062700"
  },
  {
    "text": "which means now I can index the relationships I can query the relationships just like any top-level",
    "start": "2062700",
    "end": "2068730"
  },
  {
    "text": "entity in the system and this opens up a whole new array of use cases and we'll",
    "start": "2068730",
    "end": "2074339"
  },
  {
    "text": "talk about some of those but first let's get into the architecture and what it's really built for and and and it's what's",
    "start": "2074339",
    "end": "2081628"
  },
  {
    "text": "interesting about graph databases and graph applications and problems is that everything is a graph problem because",
    "start": "2081629",
    "end": "2087658"
  },
  {
    "text": "all applications are really about aggregations and aggregations are relationships so you can really describe",
    "start": "2087659",
    "end": "2092849"
  },
  {
    "text": "just about any application as a graph problem right and it doesn't matter what it is social networking fraud detection",
    "start": "2092849",
    "end": "2099059"
  },
  {
    "text": "it doesn't matter ITSM is a beautiful example I might in a",
    "start": "2099059",
    "end": "2104339"
  },
  {
    "text": "former life I used to do a lot of ITSM software and we ended up representing",
    "start": "2104339",
    "end": "2109549"
  },
  {
    "text": "Minoo you know IT infrastructure as a graph and I and we actually built an",
    "start": "2109549",
    "end": "2116490"
  },
  {
    "text": "event correlation in state engine on top of a graph structure then we would just process an event stream against this",
    "start": "2116490",
    "end": "2122220"
  },
  {
    "text": "graph and propagate State through the graph using the edges of the graph to describe how to interpret the events in",
    "start": "2122220",
    "end": "2127319"
  },
  {
    "text": "the state of the nodes it was really a beautiful system but when you get into graph",
    "start": "2127319",
    "end": "2134540"
  },
  {
    "text": "there's a couple of things we need to look at as far as Amazon's or as Neptunes architecture it has open api's",
    "start": "2134540",
    "end": "2142350"
  },
  {
    "text": "it supports tinker pop Sparkle you know the it's open framework for traversing",
    "start": "2142350",
    "end": "2147420"
  },
  {
    "text": "the graph so to speak we'll talk a little bit about what that means and it's it's highly scalable right in",
    "start": "2147420",
    "end": "2153540"
  },
  {
    "text": "multiple read replicas it's multi a-z by default and it's cloud native storage",
    "start": "2153540",
    "end": "2159120"
  },
  {
    "text": "engine okay so you're gonna have a Neptune gives you the also gives you the ability to provide acid consistency",
    "start": "2159120",
    "end": "2165570"
  },
  {
    "text": "which is something that DynamoDB does not ok so what kind of use cases are",
    "start": "2165570",
    "end": "2171000"
  },
  {
    "text": "good for graph probably the first one I talked about would be uh you know a good",
    "start": "2171000",
    "end": "2176280"
  },
  {
    "start": "2172000",
    "end": "2172000"
  },
  {
    "text": "way to kind of frame this would be people places and things right people places and things have lots of different types of relationships and there's lots",
    "start": "2176280",
    "end": "2182640"
  },
  {
    "text": "of different applications I might build around this one of them I might be a replication or I'm sorry recommendation engine ok so then this will take this",
    "start": "2182640",
    "end": "2189330"
  },
  {
    "text": "example of you know bob has some interest in the Mona Lisa and he wants to go to Paris to see the Mona Lisa and",
    "start": "2189330",
    "end": "2196110"
  },
  {
    "text": "he would like to go visit things that his friends right have potentially gone and seen and enjoyed so how would I",
    "start": "2196110",
    "end": "2202590"
  },
  {
    "text": "build a schema to support that and let's walk through the various options we have to do this and decide which database",
    "start": "2202590",
    "end": "2208140"
  },
  {
    "text": "might be the right one for this purpose so the first one we're gonna look at is relational approach all right there's a",
    "start": "2208140",
    "end": "2214260"
  },
  {
    "text": "normalized graph design I've actually walked in and dealt with teams that have something very similar to this and you",
    "start": "2214260",
    "end": "2220230"
  },
  {
    "text": "can think about this as you have this big mapping table right in the middle and you got all these things that are related to each other people's places",
    "start": "2220230",
    "end": "2225720"
  },
  {
    "text": "and things and so let's think about what I might have to do if I were to say well let me go get all the friends of Bob",
    "start": "2225720",
    "end": "2232110"
  },
  {
    "text": "that have been to Paris right because I know that's where the Mona Lisa is ok",
    "start": "2232110",
    "end": "2237960"
  },
  {
    "text": "well gee that's not easy I'm gonna have to join the people table back to the people table just to find the people who",
    "start": "2237960",
    "end": "2244410"
  },
  {
    "text": "are related to each other is friends then I get to iterate through that list of results then I get to go find for",
    "start": "2244410",
    "end": "2250080"
  },
  {
    "text": "each one of those things all the places that those people have been and anyone who's been to Paris ok once I've eliminated all those things then I can",
    "start": "2250080",
    "end": "2256230"
  },
  {
    "text": "go and select all the places that they've actually been all the things that they've done right again iterate iterate iterate",
    "start": "2256230",
    "end": "2262460"
  },
  {
    "text": "traverse go back go back that's not a great pattern right now even for the simplest of graph aggregations here I'm",
    "start": "2262460",
    "end": "2269270"
  },
  {
    "text": "gonna have to do multiple you know lookups against the database okay so maybe a normalized approach to graph is",
    "start": "2269270",
    "end": "2275660"
  },
  {
    "text": "not going to really be good for us here so hey let's take a denormalized approach to graph so a denormalized",
    "start": "2275660",
    "end": "2282650"
  },
  {
    "start": "2278000",
    "end": "2278000"
  },
  {
    "text": "approach and I can do this with a with an with a no SQL database I can do this with a relational database alright a",
    "start": "2282650",
    "end": "2288890"
  },
  {
    "text": "relational database what I do is just create a big table I start inserting edges I create a couple inverted indexes on the nodes on the relationships on the",
    "start": "2288890",
    "end": "2296720"
  },
  {
    "text": "endpoints I can do all kinds of cool queries here what we're really trying to do an Indy normalized approach is define some logical partitions or that define",
    "start": "2296720",
    "end": "2304070"
  },
  {
    "text": "nodes and then we're gonna push edges into those nodes alright so if I want to",
    "start": "2304070",
    "end": "2309530"
  },
  {
    "text": "query the edges for a node no problem select the node itself and all the edges",
    "start": "2309530",
    "end": "2315260"
  },
  {
    "text": "that belong to it okay that's a pretty straightforward query that's great and get all the edges that are interested",
    "start": "2315260",
    "end": "2320870"
  },
  {
    "text": "that are connected to Bob and find out things he's interested if I want to get the types of people maybe Friends of Bob",
    "start": "2320870",
    "end": "2326090"
  },
  {
    "text": "I want to get the types of nodes or the types of endpoints that are being connected I can provide a couple of",
    "start": "2326090",
    "end": "2332390"
  },
  {
    "text": "inverted indexes on those two properties all right I can index the relationships on the endpoints and I can query those",
    "start": "2332390",
    "end": "2338360"
  },
  {
    "text": "things so kind of getting these first order traversal Zoar these simple aggregations isn't so hard right we can",
    "start": "2338360",
    "end": "2344060"
  },
  {
    "text": "do this it with a denormalized data structure and I can do this on a relational platform I could do this on a",
    "start": "2344060",
    "end": "2349160"
  },
  {
    "text": "on a no SQL platform I could certainly do this on a graph platform alright so",
    "start": "2349160",
    "end": "2354560"
  },
  {
    "text": "if all I need is these kinds of simple traversals well I got plenty of options right these kind of simple graph",
    "start": "2354560",
    "end": "2360290"
  },
  {
    "text": "aggregations but the next case gets complicated right the one we talked about Bob wants to go see the Mona Lisa",
    "start": "2360290",
    "end": "2365780"
  },
  {
    "text": "the Mona Lisa's in Paris who's Bob knows been to Paris what are all the things",
    "start": "2365780",
    "end": "2371870"
  },
  {
    "text": "that those people have seen so that Bob can go off and see those things too when he's in Paris all right now all of a",
    "start": "2371870",
    "end": "2377780"
  },
  {
    "text": "sudden we break down right I'm gonna have to traverse this graph I'm gonna have to go and say okay who are Bob's",
    "start": "2377780",
    "end": "2384650"
  },
  {
    "text": "friends where's the Mona Lisa who where's the Mona Lisa exists okay leaves this here let me go get all the people who are friends with Bob who've been",
    "start": "2384650",
    "end": "2390410"
  },
  {
    "text": "there ok now I can go get all the things that those people all the things that those people have seen and all the places that they've been in",
    "start": "2390410",
    "end": "2396440"
  },
  {
    "text": "that location so multiple trips back right so you got follow the edges too diverse the graph right this is actually",
    "start": "2396440",
    "end": "2402650"
  },
  {
    "text": "what graph databases are really really good at why because they have an open API and I can just feed some information",
    "start": "2402650",
    "end": "2409339"
  },
  {
    "text": "about what type of aggregation I want to produce and they're gonna traverse behind that API and and serve up a",
    "start": "2409339",
    "end": "2415279"
  },
  {
    "text": "result set so I call the database one time and I get the aggregation I need I don't have to get a result set iterate",
    "start": "2415279",
    "end": "2421130"
  },
  {
    "text": "through it and Traverse manually right so this is where graph databases Excel right so what we've got here is we've",
    "start": "2421130",
    "end": "2427099"
  },
  {
    "start": "2427000",
    "end": "2427000"
  },
  {
    "text": "got three types of graph queries we've got a node query right I just want give me the edges for a node and you could",
    "start": "2427099",
    "end": "2432680"
  },
  {
    "text": "say that's kind of query the primary table or query an index on the node property I've got an edge query right",
    "start": "2432680",
    "end": "2438529"
  },
  {
    "text": "and that edge query is going to give me the relationships and you know what you know what are the relationships between",
    "start": "2438529",
    "end": "2444500"
  },
  {
    "text": "the entities again I can just do that with a simple inverted index so I can solve that kind of those first two access patterns very efficiently with a",
    "start": "2444500",
    "end": "2451220"
  },
  {
    "text": "relational database NoSQL database or a graph database when you get into the",
    "start": "2451220",
    "end": "2456349"
  },
  {
    "text": "third type of query now we're talking about hybrid queries or traversal I can do this with a relational database but",
    "start": "2456349",
    "end": "2463670"
  },
  {
    "text": "maybe it's not the right purpose right maybe that relational database is going to be a little bit more expensive to try",
    "start": "2463670",
    "end": "2470000"
  },
  {
    "text": "and do these types of queries so if I have to do these types of traversals complex multi-dimensional aggregations a",
    "start": "2470000",
    "end": "2476180"
  },
  {
    "text": "graph database is an is an excellent way to go now I might be able to if this is",
    "start": "2476180",
    "end": "2481369"
  },
  {
    "text": "an OLTP app again well known access pattern I might be able to leverage NoSQL database and do this by basically",
    "start": "2481369",
    "end": "2489619"
  },
  {
    "text": "projecting those graph queries back into the edges right if I know that this",
    "start": "2489619",
    "end": "2495440"
  },
  {
    "text": "recommendation engine is designed to produce that exact result then I can use something like EMR or I can even maybe",
    "start": "2495440",
    "end": "2501410"
  },
  {
    "text": "use lambda and as I insert edges into my denormalized graph on a non relational",
    "start": "2501410",
    "end": "2507140"
  },
  {
    "text": "or NoSQL database I can then write back the projections so I can serve those result sets up right that could be cool",
    "start": "2507140",
    "end": "2514279"
  },
  {
    "text": "if I need something that's going to scale massively because again Neptune is great for ad-hoc queries and great for",
    "start": "2514279",
    "end": "2521390"
  },
  {
    "text": "these ad hoc graph traversals but we've got a dimensional factor here that we got to be concerned with it's the scale",
    "start": "2521390",
    "end": "2526910"
  },
  {
    "text": "factor there is a limit what Neptune can do right all right the",
    "start": "2526910",
    "end": "2532280"
  },
  {
    "text": "next couple of databases will talk to you again getting back into kind of that relational sphere so to speak redshift I",
    "start": "2532280",
    "end": "2539090"
  },
  {
    "text": "this is pretty straightforward data warehousing solution important to know you know this is available to you it's a",
    "start": "2539090",
    "end": "2545300"
  },
  {
    "text": "very very popular service again one of our more popular services and it's because it's so inexpensive compared to",
    "start": "2545300",
    "end": "2550490"
  },
  {
    "text": "a dedicated data warehouse service that you might put up and stand up in your",
    "start": "2550490",
    "end": "2555740"
  },
  {
    "text": "own infrastructure right and the reason why is because data warehouse is really",
    "start": "2555740",
    "end": "2560900"
  },
  {
    "text": "run to support decision support systems generally speaking not many data warehouses are running 100% capacity",
    "start": "2560900",
    "end": "2568570"
  },
  {
    "text": "full-time 724 365 typically they're batch process type applications or",
    "start": "2568570",
    "end": "2574820"
  },
  {
    "text": "regularly scheduled applications that run against these things their daily daily jobs weekly jaws monthly jobs and",
    "start": "2574820",
    "end": "2581360"
  },
  {
    "text": "with redshift I can scale the processing power the cluster up when I need it and down when I don't and so I pay for the",
    "start": "2581360",
    "end": "2588320"
  },
  {
    "text": "data storage but I don't have to pay for the compute 100% of the time and that drives cost to the floor right so when",
    "start": "2588320",
    "end": "2595100"
  },
  {
    "text": "people start to look at red ship and you look at the TCO of a comparison between a red ship deployment and maybe standing",
    "start": "2595100",
    "end": "2601490"
  },
  {
    "text": "up this infrastructure and owning it yourself not only can I roll out a petabyte data warehouse at the click of a button have",
    "start": "2601490",
    "end": "2607190"
  },
  {
    "text": "it available to me within you know seconds or minutes which is impossible",
    "start": "2607190",
    "end": "2612320"
  },
  {
    "text": "right in the in the enterprise IT infrastructure environment but I can",
    "start": "2612320",
    "end": "2617780"
  },
  {
    "text": "scale it up and scale it down dynamically and that is certainly something that is not not achievable",
    "start": "2617780",
    "end": "2623060"
  },
  {
    "text": "with self managed infrastructure so a huge advantage for you there for",
    "start": "2623060",
    "end": "2628100"
  },
  {
    "text": "unstructured or semi structured data that we can put up there and s3 we can use Athena Athena is basically managed",
    "start": "2628100",
    "end": "2635570"
  },
  {
    "text": "EMR on-demand you can run queries against your semi structured data up there in s3 with using a c SQL it's",
    "start": "2635570",
    "end": "2644420"
  },
  {
    "text": "fully open interface you pay for the query it's fully server lists don't have to play any infrastructures really",
    "start": "2644420",
    "end": "2650900"
  },
  {
    "text": "really need service for running those you know batch ETL jobs for doing you",
    "start": "2650900",
    "end": "2656150"
  },
  {
    "text": "know long-running DSS workloads against large data lakes that you have deployed",
    "start": "2656150",
    "end": "2661460"
  },
  {
    "text": "up into s3 so getting down to the root of things what we've got is a couple of categories",
    "start": "2661460",
    "end": "2668090"
  },
  {
    "start": "2665000",
    "end": "2665000"
  },
  {
    "text": "so to speak of database right we have SQL databases we have no SQL databases but they know SQL database we have this",
    "start": "2668090",
    "end": "2673940"
  },
  {
    "text": "thing called graph and I'll put it in its own category because graph has really has some very unique use cases and and this is kind of how things break",
    "start": "2673940",
    "end": "2681050"
  },
  {
    "text": "down right SQL databases leverage normalized relational or dimensional schema for data warehousing right they",
    "start": "2681050",
    "end": "2688100"
  },
  {
    "text": "support ad-hoc queries and aggregations things when I don't understand the access pattern boy an SQL database is",
    "start": "2688100",
    "end": "2694880"
  },
  {
    "text": "something I'm really going to have to look at so if the bi analytics an old lab style workload or some other app",
    "start": "2694880",
    "end": "2700520"
  },
  {
    "text": "application where I really don't get I really cannot quantifier define upfront",
    "start": "2700520",
    "end": "2705530"
  },
  {
    "text": "how I'm accessing the data your best bet is to try and leverage in SQL solution and no SQL is optimized for compute",
    "start": "2705530",
    "end": "2712370"
  },
  {
    "text": "right it's about OLTP at scale dss at scale you can certainly put EMR on top",
    "start": "2712370",
    "end": "2718040"
  },
  {
    "text": "of DynamoDB right you can grind down data that way it might not be the most efficient way to do things I might want to actually go with an Athena",
    "start": "2718040",
    "end": "2723770"
  },
  {
    "text": "implementation to do that but there's nothing that stops you from doing that they scale horizontally again bill for",
    "start": "2723770",
    "end": "2731570"
  },
  {
    "text": "OLTP at scale and they and they and you really are designing your schema to",
    "start": "2731570",
    "end": "2736760"
  },
  {
    "text": "represent those instantiated views and and drive those computed aggregations right you're going to try and you're not",
    "start": "2736760",
    "end": "2742940"
  },
  {
    "text": "going to be able to deliver ad hoc aggregations but with dynamodb you can certainly compute aggregations and write",
    "start": "2742940",
    "end": "2748700"
  },
  {
    "text": "that data back into metadata on the table so if I need a sum or a count or an average you know I can just maintain",
    "start": "2748700",
    "end": "2754670"
  },
  {
    "text": "that as a running aggregation these things might not be the most consistent view of your data so maybe I want to",
    "start": "2754670",
    "end": "2761180"
  },
  {
    "text": "look at if I need consistency I want something that supports the ad hoc queries acid consistency and whatnot and",
    "start": "2761180",
    "end": "2766430"
  },
  {
    "text": "then there's a graph database that's really optimized for querying entity relationships right and it's designed to",
    "start": "2766430",
    "end": "2772940"
  },
  {
    "text": "excel a graph traversals all right so we talked a lot about the characteristics",
    "start": "2772940",
    "end": "2778130"
  },
  {
    "text": "of the workload and we talked about the Iron Triangle of data there's an iron triangle of purpose right we got to go",
    "start": "2778130",
    "end": "2785420"
  },
  {
    "start": "2785000",
    "end": "2785000"
  },
  {
    "text": "through here and it's it's the PI theorem right so it's AWS you can have your PI and you can eat it too",
    "start": "2785420",
    "end": "2792339"
  },
  {
    "text": "but yeah it's basically has three dimensions of the workload okay the first we're talking about is pattern",
    "start": "2792339",
    "end": "2797680"
  },
  {
    "text": "flexibility again ad-hoc queries do I know can I you know do I need to support",
    "start": "2797680",
    "end": "2803019"
  },
  {
    "text": "those ad hoc queries and random access patterns or do I have a workload that has a well-defined access pattern",
    "start": "2803019",
    "end": "2809019"
  },
  {
    "text": "something that is you know I can identify up front it's really the difference between OLTP and OLAP style",
    "start": "2809019",
    "end": "2814599"
  },
  {
    "text": "applications there's infinite scale does the database need to scale without",
    "start": "2814599",
    "end": "2819849"
  },
  {
    "text": "reasonable limits in both throughput and size right so can we feed if we need to",
    "start": "2819849",
    "end": "2825279"
  },
  {
    "text": "support that kind of infinite scale that's another dimension that we have on the application and there's efficiency",
    "start": "2825279",
    "end": "2830619"
  },
  {
    "text": "right how good is the database at delivering the performance that I need for the workload at any given time all",
    "start": "2830619",
    "end": "2836710"
  },
  {
    "text": "right and again it's about pick two because you're not gonna get all three but Amazon has an amazing array of",
    "start": "2836710",
    "end": "2845289"
  },
  {
    "text": "solutions for you no matter what the dimensions of your workload are okay and",
    "start": "2845289",
    "end": "2850599"
  },
  {
    "text": "that's why it comes down to you right if I need pattern flexibility and infinite scale we're really talking about data",
    "start": "2850599",
    "end": "2856749"
  },
  {
    "text": "warehousing or DSS okay and that's going to be Amazon redshift and Athena if I",
    "start": "2856749",
    "end": "2862329"
  },
  {
    "text": "need infinite scale and efficiency then we're kind of starting to get into OLTP",
    "start": "2862329",
    "end": "2867400"
  },
  {
    "text": "at scale right because those are you know and we're gonna be looking at DynamoDB and and if I need you know",
    "start": "2867400",
    "end": "2873880"
  },
  {
    "text": "pattern flexibility and efficiency then what I'm talking about is bi analytics and OLAP style workloads",
    "start": "2873880",
    "end": "2879489"
  },
  {
    "text": "I need random access patterns and I need to be able to support those with you know low latency then I'm going to want",
    "start": "2879489",
    "end": "2885460"
  },
  {
    "text": "to go after relational again as I look at every one of the angles on this triangle there's there's a dimension",
    "start": "2885460",
    "end": "2890710"
  },
  {
    "text": "that is not going to get addressed no matter what solution that I pick and so it's about categorizing the workload",
    "start": "2890710",
    "end": "2895900"
  },
  {
    "text": "understanding what is the purpose of your workload and identifying the right solution and the right purpose-built",
    "start": "2895900",
    "end": "2901660"
  },
  {
    "text": "database solution for that workload all right so I'm gonna leave you with a couple of you know we always like talk",
    "start": "2901660",
    "end": "2907930"
  },
  {
    "text": "about customers I bottom lies hundreds of thousands of people and customers are using DynamoDB for just about every",
    "start": "2907930",
    "end": "2914019"
  },
  {
    "text": "workload you could imagine you are all users of DynamoDB indirectly and the",
    "start": "2914019",
    "end": "2919269"
  },
  {
    "text": "applications I mean again lift Netflix there's you can all look across just",
    "start": "2919269",
    "end": "2924549"
  },
  {
    "text": "this short logo char see there's applications you're all using when you couple that with RDS and",
    "start": "2924549",
    "end": "2930440"
  },
  {
    "text": "D and redshift and whatnot there's hundreds of thousands more people that are using these solutions so it's",
    "start": "2930440",
    "end": "2936830"
  },
  {
    "text": "tried-and-true right there's nothing that we're doing here that is experimental many many many customers",
    "start": "2936830",
    "end": "2942620"
  },
  {
    "text": "have deployed this stuff they're using a production of the most mission-critical applications out there so you know why",
    "start": "2942620",
    "end": "2949370"
  },
  {
    "text": "not you and it's really about purpose-built database solutions that are fully managed that give you you know",
    "start": "2949370",
    "end": "2955340"
  },
  {
    "start": "2950000",
    "end": "2950000"
  },
  {
    "text": "the infrastructure and and and and alleviate you from having to worry about all these things that are that would",
    "start": "2955340",
    "end": "2961670"
  },
  {
    "text": "normally be associated with managing your own services right the the capacity planning the provisioning you know",
    "start": "2961670",
    "end": "2967790"
  },
  {
    "text": "dealing with hardware failures and upgrades OS patching and maintenance all the software right configurations",
    "start": "2967790",
    "end": "2974000"
  },
  {
    "text": "patching and maintenance things that you don't have to worry about when you go with AWS and not only that but doing it",
    "start": "2974000",
    "end": "2979370"
  },
  {
    "text": "with with basically zero unplanned downtime and in meant in some cases like DynamoDB zero downtime now this is just",
    "start": "2979370",
    "end": "2986990"
  },
  {
    "text": "something it's not easily achievable by even the most mature IT organizations so you know that's generally speaking of I",
    "start": "2986990",
    "end": "2994790"
  },
  {
    "text": "got for you I hope that you've got something out of today's conversation if you please fill out your summaries the",
    "start": "2994790",
    "end": "3000010"
  },
  {
    "text": "end there in the app right there the instructions out there if you like the session it's dat 307 if you didn't like",
    "start": "3000010",
    "end": "3006460"
  },
  {
    "text": "the session ID it's not in there all",
    "start": "3006460",
    "end": "3011770"
  },
  {
    "text": "right thank you very much [Applause] [Music]",
    "start": "3011770",
    "end": "3024250"
  }
]