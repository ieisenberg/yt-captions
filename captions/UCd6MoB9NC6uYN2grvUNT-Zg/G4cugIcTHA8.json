[
  {
    "start": "0",
    "end": "109000"
  },
  {
    "text": "hello welcome to our session dev 3:11 called breaking observe Billy chaos best",
    "start": "30",
    "end": "5759"
  },
  {
    "text": "practices to monitor AWS cloud native apps I'm John Joswiak a Solutions Architect here at AWS I work out of our",
    "start": "5759",
    "end": "12030"
  },
  {
    "text": "Austin Texas office been with AWS for just over a year working in the cloud space for about five years and overall",
    "start": "12030",
    "end": "19619"
  },
  {
    "text": "about 20 years of IT experience and my co-presenter hey welcome everyone that's",
    "start": "19619",
    "end": "25740"
  },
  {
    "text": "pretty loud Marcus I'm a Solutions Architect based in Houston Texas be mu beta brace for",
    "start": "25740",
    "end": "32419"
  },
  {
    "text": "almost two years and a half now previously to that I was a leader breast",
    "start": "32420",
    "end": "38100"
  },
  {
    "text": "customer for six years designing deploying monitoring solutions on AWS so",
    "start": "38100",
    "end": "43200"
  },
  {
    "text": "hopefully we can help you guys with some insights on how to get more observability out of your workloads on",
    "start": "43200",
    "end": "50219"
  },
  {
    "text": "either breast but before we move forward I'd like to know like a little bit the the skillset",
    "start": "50219",
    "end": "55260"
  },
  {
    "text": "of the audience if you don't mind how many of you guys here are developers any",
    "start": "55260",
    "end": "61440"
  },
  {
    "text": "infrastructure or co-ops guys how about architects cool so let's move",
    "start": "61440",
    "end": "69810"
  },
  {
    "text": "forward so what we're gonna see on this session here we're going to obviously",
    "start": "69810",
    "end": "75979"
  },
  {
    "text": "kick off with some landscape and trends that we're seeing on the monitoring space and then we're gonna go present",
    "start": "75979",
    "end": "82530"
  },
  {
    "text": "you guys with some best practices on how to achieve observability on your workloads on AWS and what we decide to",
    "start": "82530",
    "end": "88950"
  },
  {
    "text": "do this year we built a demo application so we can not only tell you guys the",
    "start": "88950",
    "end": "94409"
  },
  {
    "text": "best practices in fury but show how to apply those in practice on a demo app",
    "start": "94409",
    "end": "100049"
  },
  {
    "text": "and by the way the demo is gonna be available on github for you guys to download chrome and try out on your own",
    "start": "100049",
    "end": "105750"
  },
  {
    "text": "SS account so feel free to do that so what we're seeing in the past few years",
    "start": "105750",
    "end": "113159"
  },
  {
    "start": "109000",
    "end": "132000"
  },
  {
    "text": "like it's a buzzword I believe everyone in the room heard about is like digital",
    "start": "113159",
    "end": "118170"
  },
  {
    "text": "transformation so companies from all sides sizes and all different industries",
    "start": "118170",
    "end": "124770"
  },
  {
    "text": "they're trying to bring more value to their customers through technology and",
    "start": "124770",
    "end": "130360"
  },
  {
    "text": "digital transformation right so one of the trails that that we're seeing like",
    "start": "130360",
    "end": "136300"
  },
  {
    "start": "132000",
    "end": "148000"
  },
  {
    "text": "how are they they're building or we platforming or transforming their workloads they're trying to kind of",
    "start": "136300",
    "end": "142090"
  },
  {
    "text": "break the monolid going through an api base Aleutian distributed architectures and if we go and zoom in into the AWS",
    "start": "142090",
    "end": "149680"
  },
  {
    "start": "148000",
    "end": "172000"
  },
  {
    "text": "workload specifically we're seeing a lot of like customers leveraging the",
    "start": "149680",
    "end": "154810"
  },
  {
    "text": "undifferentiated have lifting that we do for them so they can focus on business logic containers server lists and by",
    "start": "154810",
    "end": "162340"
  },
  {
    "text": "service I don't mean only lambda like any managed service that take out the",
    "start": "162340",
    "end": "167440"
  },
  {
    "text": "integration they have lifting from your team so you guys can focus on the business logic of your applications so",
    "start": "167440",
    "end": "173580"
  },
  {
    "start": "172000",
    "end": "208000"
  },
  {
    "text": "it's all about like having happier customers bring more values to the customers so with because our customers",
    "start": "173580",
    "end": "182050"
  },
  {
    "text": "try to create agility empowered their teens in invent and innovate so they can fail fast they can bring more value to",
    "start": "182050",
    "end": "187750"
  },
  {
    "text": "the customers because if they don't do what we see is a lot of disruption in every market today because the",
    "start": "187750",
    "end": "193810"
  },
  {
    "text": "technology that is available for any of you guys and big companies are also available for like kids on colleges or",
    "start": "193810",
    "end": "201040"
  },
  {
    "text": "of high school developing their own AWS accounts so technologies of commodity today so people are trying to leverage",
    "start": "201040",
    "end": "207580"
  },
  {
    "text": "that to bring more values of their customers in order to bring value to customers we need to have observability",
    "start": "207580",
    "end": "214150"
  },
  {
    "start": "208000",
    "end": "260000"
  },
  {
    "text": "so you cannot improve and bring more value to the customers using a specific service or a workload running on AWS or",
    "start": "214150",
    "end": "222190"
  },
  {
    "text": "elsewhere if you don't have visibility if you don't have observability of the workloads and in order to have",
    "start": "222190",
    "end": "228220"
  },
  {
    "text": "observability of the workloads you need to have those four main pillars here",
    "start": "228220",
    "end": "233440"
  },
  {
    "text": "available for you and leverage them properly so the two on the left most of",
    "start": "233440",
    "end": "238930"
  },
  {
    "text": "you guys are probably using and if you're not you're behind and we're going to talk about this metrics and loves",
    "start": "238930",
    "end": "245290"
  },
  {
    "text": "very know the industry is using that widely the two on the left are a little",
    "start": "245290",
    "end": "250900"
  },
  {
    "text": "bit overlooked and when used in conjunction junction they're very powerful I'm talking about events in",
    "start": "250900",
    "end": "257609"
  },
  {
    "text": "traces right so as I mentioned before the sample application",
    "start": "257609",
    "end": "264310"
  },
  {
    "text": "is available here on this URL we have another slide by the end of the session",
    "start": "264310",
    "end": "269889"
  },
  {
    "text": "with that URL again we're gonna go into the mana tree on the monetary topics",
    "start": "269889",
    "end": "278139"
  },
  {
    "text": "here but first we need to understand how the application works and that's how John's gonna explain to us yeah so our",
    "start": "278139",
    "end": "284980"
  },
  {
    "text": "application is called Acme BOTS so it's a a IOT based application focused on",
    "start": "284980",
    "end": "291570"
  },
  {
    "text": "think of robots like drones or undersea pipe inspection or vacuums for example",
    "start": "291570",
    "end": "298900"
  },
  {
    "text": "that type of application and really it's just here to showcase monitoring so we're going to go through and demo the",
    "start": "298900",
    "end": "305800"
  },
  {
    "text": "application quickly so you have a good context for monitoring and yeah as Marko",
    "start": "305800",
    "end": "312130"
  },
  {
    "text": "said the code is the code is available here so here's the overall architecture",
    "start": "312130",
    "end": "317889"
  },
  {
    "start": "315000",
    "end": "382000"
  },
  {
    "text": "so the first piece of it is the user interacting with the front end the front ends a react based website it's a static",
    "start": "317889",
    "end": "325540"
  },
  {
    "text": "website hosted in s3 users connect to that with Cognito to log in and authenticate and then the main purpose",
    "start": "325540",
    "end": "331690"
  },
  {
    "text": "of the application is just to create and delete these bots so we go through and create about that triggers a lambda",
    "start": "331690",
    "end": "337510"
  },
  {
    "text": "which is using step functions to orchestrate the process and there's three main things that are happening",
    "start": "337510",
    "end": "342669"
  },
  {
    "text": "during that the first thing that happens is we're provisioning on the backend with AWS IOT after that we store the s3",
    "start": "342669",
    "end": "351460"
  },
  {
    "text": "certs and keys in a bucket and that's just for the application to interact",
    "start": "351460",
    "end": "356530"
  },
  {
    "text": "with or the bot to interact with and the third piece of that is dynamodb we're using dynamo DB to store metadata about",
    "start": "356530",
    "end": "362320"
  },
  {
    "text": "the bots such as battery life whether it's connected or not and we can query that quite easily the other part of the",
    "start": "362320",
    "end": "367990"
  },
  {
    "text": "app then from the s3 bucket we can actually list the things in the dynamo dB we can also use it to interact with",
    "start": "367990",
    "end": "375150"
  },
  {
    "text": "with the MQTT topics and so I'll walk through this real quick to give you a",
    "start": "375150",
    "end": "381100"
  },
  {
    "text": "little bit more perspective so far our demos today we're recording we've recorded the demos to not not test the",
    "start": "381100",
    "end": "388690"
  },
  {
    "start": "382000",
    "end": "472000"
  },
  {
    "text": "demo gods so if we play here whoops if",
    "start": "388690",
    "end": "395830"
  },
  {
    "text": "we demo gods don't like the video either",
    "start": "395830",
    "end": "401580"
  },
  {
    "text": "all right so if we play here this is just in the UI creating the box so we're",
    "start": "401580",
    "end": "408370"
  },
  {
    "text": "going through and creating three BOTS here and then also searching them so we'll clean that up and that didn't",
    "start": "408370",
    "end": "416050"
  },
  {
    "text": "pause properly so I'm sorry let me just correct this real quick so I go right",
    "start": "416050",
    "end": "430539"
  },
  {
    "text": "there and continue no not quite alright",
    "start": "430539",
    "end": "436780"
  },
  {
    "text": "there we go so we created the three BOTS and what that's the spacebar works on my",
    "start": "436780",
    "end": "444460"
  },
  {
    "text": "life a lot I'm just trying to pause the video now my laptop the space of our",
    "start": "444460",
    "end": "452139"
  },
  {
    "text": "pause is the video",
    "start": "452139",
    "end": "455129"
  },
  {
    "text": "all right so here is the step function that we're executing so basically we created the bot and that bot is",
    "start": "460160",
    "end": "465900"
  },
  {
    "text": "executing this step function and so this is showing the executions of those step functions and what we have here is the",
    "start": "465900",
    "end": "474900"
  },
  {
    "start": "472000",
    "end": "531000"
  },
  {
    "text": "input that we're passing in which is just a bot name as well as the output that's being presented so that output is",
    "start": "474900",
    "end": "480960"
  },
  {
    "text": "just the thing name certificates and policy information and and then this is",
    "start": "480960",
    "end": "486120"
  },
  {
    "text": "just part of step functions is showing the individual steps in a visual workflow so you can see the steps that are being executed and all them in this",
    "start": "486120",
    "end": "493050"
  },
  {
    "text": "case are successful and moving on this",
    "start": "493050",
    "end": "499470"
  },
  {
    "text": "in IOT is just showing the three bots are things that have been provisioned within IOT they're related certificates that have",
    "start": "499470",
    "end": "505560"
  },
  {
    "text": "been provisioned and then also the policies that are attached to them and",
    "start": "505560",
    "end": "511850"
  },
  {
    "text": "then moving over here this is our s3 bucket so we've got three different objects in the s3 bucket just one for",
    "start": "513650",
    "end": "520140"
  },
  {
    "text": "each of the box we've provisioned and",
    "start": "520140",
    "end": "525600"
  },
  {
    "text": "then within DynamoDB this is our metadata store so we're storing a thing name with battery life certificate and a",
    "start": "525600",
    "end": "531330"
  },
  {
    "start": "531000",
    "end": "556000"
  },
  {
    "text": "few other components now for our bots we didn't have access to Hardware bots so",
    "start": "531330",
    "end": "536760"
  },
  {
    "text": "we couldn't go out and provision Hardware for this so instead we're using ECS or elastic container service and",
    "start": "536760",
    "end": "542880"
  },
  {
    "text": "that's giving us a very simple way to provision BOTS as docker containers in this case we have a cluster provision",
    "start": "542880",
    "end": "549089"
  },
  {
    "text": "we're not using services or load balancing or anything like that because it doesn't make sense for this",
    "start": "549089",
    "end": "554339"
  },
  {
    "text": "particular workload is just a simple abstraction to replace the hardware so we've used Fargate you can see our three",
    "start": "554339",
    "end": "560040"
  },
  {
    "start": "556000",
    "end": "566000"
  },
  {
    "text": "tasks here running bots one bots two in box three and then just moving forward",
    "start": "560040",
    "end": "569280"
  },
  {
    "start": "566000",
    "end": "612000"
  },
  {
    "text": "from that this is a new feature called cloud watch logs insights I mean it",
    "start": "569280",
    "end": "574290"
  },
  {
    "text": "gives a very easy way to query and filter our logs so our bots are particularly logging just their status whether they're",
    "start": "574290",
    "end": "580260"
  },
  {
    "text": "charging whether they're out working or going to standby and so here we're showing the ability to filter by message",
    "start": "580260",
    "end": "586410"
  },
  {
    "text": "and our message is just going to be our bots name or our filters by bot name so you can see us walk through and fill",
    "start": "586410",
    "end": "592529"
  },
  {
    "text": "for Bach one and get the the status for that bot bot two as well so the logs",
    "start": "592529",
    "end": "600029"
  },
  {
    "text": "insights provides a very simple way to to do filtering and querying",
    "start": "600029",
    "end": "606199"
  },
  {
    "start": "612000",
    "end": "664000"
  },
  {
    "text": "all right and then moving on from there we're going back into the UI this is our static website and just selecting a bot",
    "start": "612440",
    "end": "620210"
  },
  {
    "text": "here and we can subscribe this is subscribing to a MQTT topic it's a published subscribed protocol and by",
    "start": "620210",
    "end": "626930"
  },
  {
    "text": "doing that we can see the current status of the bottom so this streams the status of the bot we can see a charging you can",
    "start": "626930",
    "end": "633110"
  },
  {
    "text": "see the battery in terms of how charged it is and as it's working it's draining",
    "start": "633110",
    "end": "638570"
  },
  {
    "text": "the battery and then changes back to charging to charge the battery you also",
    "start": "638570",
    "end": "644870"
  },
  {
    "text": "have in the UI the ability to send a command so here we we have the option to send a command to the bot in this case",
    "start": "644870",
    "end": "651710"
  },
  {
    "text": "sending a standby command and so when we send that this is just an example of the",
    "start": "651710",
    "end": "657050"
  },
  {
    "text": "command that's sent and then the bot will send back in an acknowledgment saying the status is okay so that was",
    "start": "657050",
    "end": "665930"
  },
  {
    "text": "just a quick walkthrough of the UI of the application now for running the bots I mentioned already the bots are running",
    "start": "665930",
    "end": "672620"
  },
  {
    "text": "on ECS as containers that bots when it's when it started up interacts with the s3",
    "start": "672620",
    "end": "679160"
  },
  {
    "text": "bucket to get its IOT cert and key and that's so it can authenticate with AWS IOT service after it gets that it can",
    "start": "679160",
    "end": "686780"
  },
  {
    "text": "subscribe to that topic like we showed in the user interface to get telemetry",
    "start": "686780",
    "end": "692090"
  },
  {
    "text": "the front end also well it it subscribes to publish the front end subscribes to",
    "start": "692090",
    "end": "697280"
  },
  {
    "text": "to pull or consume that's lemon tree and again we're using Cognito up front to",
    "start": "697280",
    "end": "702410"
  },
  {
    "text": "actually authenticate the telemetry data that it's sending in terms of its battery life is being published every 15",
    "start": "702410",
    "end": "709580"
  },
  {
    "text": "seconds to that topic and then the user subscribes to view that and then the command example we showed is the user",
    "start": "709580",
    "end": "716600"
  },
  {
    "text": "subscribes to the topic and publishes the command the bot is also subscribed",
    "start": "716600",
    "end": "722000"
  },
  {
    "text": "to that topic so it it receives that command and processes it and then it publishes back that acknowledgement and",
    "start": "722000",
    "end": "729650"
  },
  {
    "start": "728000",
    "end": "769000"
  },
  {
    "text": "so the basic bot logic is it's starting at a 50% battery life it charges until",
    "start": "729650",
    "end": "735050"
  },
  {
    "text": "it gets to a hundred percent then goes out and works and as it's working the battery is drained and so the battery",
    "start": "735050",
    "end": "740720"
  },
  {
    "text": "continues to drain and drain until it reaches a threshold of 15% then back to its dock and charges again and",
    "start": "740720",
    "end": "747310"
  },
  {
    "text": "you also have an ability to put the bots into standby and in that case it will just go to the bot to the dock charge up",
    "start": "747310",
    "end": "753970"
  },
  {
    "text": "and then wait for further commands so this shows the logic basically there's a",
    "start": "753970",
    "end": "759310"
  },
  {
    "text": "few areas where this could break down obviously if it doesn't get back to the dock and and doesn't charge appropriately while working or if it's",
    "start": "759310",
    "end": "766390"
  },
  {
    "text": "in standby there's areas here that we would want to monitor and so I hand over to Marcos to talk through monitoring",
    "start": "766390",
    "end": "774030"
  },
  {
    "start": "769000",
    "end": "791000"
  },
  {
    "text": "yeah cool so now that we know how acme BOTS operate so basically we have bot",
    "start": "774030",
    "end": "779290"
  },
  {
    "text": "sending data every 15 seconds so you need to know like how the barrier of the bots how long is it working for how long",
    "start": "779290",
    "end": "785410"
  },
  {
    "text": "is it charging we now can look into how to monitor that so if you're looking to",
    "start": "785410",
    "end": "791440"
  },
  {
    "start": "791000",
    "end": "864000"
  },
  {
    "text": "like da de Bresse observability portfolio or the monitoring services that we have today we have the cloud",
    "start": "791440",
    "end": "797650"
  },
  {
    "text": "watch services and we have AWS x-ray right cloud watch it's a very known",
    "start": "797650",
    "end": "803020"
  },
  {
    "text": "service like we have logs we have metrics we have events we have dashboards we have alarms an x-ray",
    "start": "803020",
    "end": "811210"
  },
  {
    "text": "allows you to see a service map of your applications so if you have like a micro",
    "start": "811210",
    "end": "817180"
  },
  {
    "text": "services solution or distributed application that calls several internal and external services x-ray gives you a",
    "start": "817180",
    "end": "824500"
  },
  {
    "text": "nice service map of that on the fly it's very useful for like new team members joining a project if they want to know",
    "start": "824500",
    "end": "830920"
  },
  {
    "text": "what services does this specific service I'm gonna be working on talk to just go",
    "start": "830920",
    "end": "835930"
  },
  {
    "text": "live to the x-ray a service map dashboard look it and you can see latency where you can improve that or",
    "start": "835930",
    "end": "841720"
  },
  {
    "text": "not we also have like distributed tracing so you can see the breakdown of",
    "start": "841720",
    "end": "847000"
  },
  {
    "text": "a service how long is it taking to do operation maybe C and D like it kind of like a waterfall view of that and that's",
    "start": "847000",
    "end": "853900"
  },
  {
    "text": "extremely helpful if you want to improve services so you can pinpoint exactly like where should I focus first to",
    "start": "853900",
    "end": "861430"
  },
  {
    "text": "reduce latency for example right so now we're going to know that we understand",
    "start": "861430",
    "end": "867730"
  },
  {
    "start": "864000",
    "end": "942000"
  },
  {
    "text": "how Acme BOTS operates we're gonna talk about four main monitoring scenarios",
    "start": "867730",
    "end": "873190"
  },
  {
    "text": "here the first one is like for every workload any workload",
    "start": "873190",
    "end": "878230"
  },
  {
    "text": "that running on the cloud on premises you need to have operational insides",
    "start": "878230",
    "end": "883840"
  },
  {
    "text": "right so the number one best practices will like to share with you guys is like align your metrics to your business",
    "start": "883840",
    "end": "892000"
  },
  {
    "text": "needs I'll give you an example like if you have like a an application that has",
    "start": "892000",
    "end": "897070"
  },
  {
    "text": "a queueing and producers and consumers it might not be enough to monitor that",
    "start": "897070",
    "end": "902440"
  },
  {
    "text": "only by using that let's say CPU utilization for those consumers or producers because you might not want you",
    "start": "902440",
    "end": "909070"
  },
  {
    "text": "over provision let's say ec2 instances you might want them running at 80% 90% but a good metric for you to keep an eye",
    "start": "909070",
    "end": "916660"
  },
  {
    "text": "on might be the queue size so you need to think carefully when you when you select what metrics to monitor and every",
    "start": "916660",
    "end": "923860"
  },
  {
    "text": "application is unique so it's not enough to live an monitor your application with",
    "start": "923860",
    "end": "929500"
  },
  {
    "text": "the custom with the before metrics that the services provide to you such as like a sip utilization networking network out",
    "start": "929500",
    "end": "936820"
  },
  {
    "text": "this guy or whatever you need to have custom metrics you need to have customer that's not optional how can we do their",
    "start": "936820",
    "end": "944200"
  },
  {
    "text": "own a cravat yeah so with acne bouts there's a few aspects obviously the batteries the bots battery life is a",
    "start": "944200",
    "end": "950800"
  },
  {
    "text": "custom metric that we want them to manage also the bot telemetry delay so the delay in the time of IOT writing the",
    "start": "950800",
    "end": "958870"
  },
  {
    "text": "metric and us actually logging that to cloud watch and third one is just package size so the size of the payload",
    "start": "958870",
    "end": "965200"
  },
  {
    "text": "being delivered to IOT because if that's significantly lower or significantly higher it may indicate an issue with the",
    "start": "965200",
    "end": "971740"
  },
  {
    "text": "actual with the actual packet sent so",
    "start": "971740",
    "end": "976810"
  },
  {
    "text": "for implementing custom metrics on the back end on the IOT side we have our bots publishing their status to AWS iot",
    "start": "976810",
    "end": "986020"
  },
  {
    "text": "so that's published to MQTT topic and this is just an example of the the data",
    "start": "986020",
    "end": "991420"
  },
  {
    "text": "or the data format that's published and then you have a connectivity rule that's reviewing or pulling that data from the",
    "start": "991420",
    "end": "998410"
  },
  {
    "text": "topic and triggering custom actions so we use lambda to send that custom action and what that does is it executes a put",
    "start": "998410",
    "end": "1006000"
  },
  {
    "text": "metric data call so the the lambda executes to pull the data out of that MQTT topic",
    "start": "1006000",
    "end": "1011980"
  },
  {
    "text": "and publish it to cloud watch and you can see here an example of a dashboard of the battery life of the custom metric",
    "start": "1011980",
    "end": "1017980"
  },
  {
    "text": "just as the bots battery life DEET charges or gets used you also see in the",
    "start": "1017980",
    "end": "1024220"
  },
  {
    "text": "upper right hand corner here the boss named so we created a custom namespace acne BOTS the metrics were gathering",
    "start": "1024220",
    "end": "1031060"
  },
  {
    "text": "battery life telemetry delay telemetry package size and then dimension just being the bots name so bot one bot to",
    "start": "1031060",
    "end": "1037300"
  },
  {
    "text": "about 3 etc so I'll show a demo of this",
    "start": "1037300",
    "end": "1043120"
  },
  {
    "text": "as well let's see so here we're just in the UI",
    "start": "1043120",
    "end": "1049930"
  },
  {
    "text": "and we see the bot working and we're unsubscribed from that topic and and the",
    "start": "1049930",
    "end": "1055300"
  },
  {
    "text": "data is essentially lost so with MQTT you just have the current data point you don't have any other data so it's useful",
    "start": "1055300",
    "end": "1061240"
  },
  {
    "text": "for our web UI to look at that but to actually capture historical data that's where cloud watching custom metrics",
    "start": "1061240",
    "end": "1067270"
  },
  {
    "text": "comes in um so here we can subscribe",
    "start": "1067270",
    "end": "1072370"
  },
  {
    "text": "back to the top back back to that bots topic again and and you see the data again the current state and here we're",
    "start": "1072370",
    "end": "1079300"
  },
  {
    "text": "going to just use an mqtt client well i",
    "start": "1079300",
    "end": "1085260"
  },
  {
    "text": "hope we'll use an mqtt client there we go so here we've subscribed again now",
    "start": "1085260",
    "end": "1092770"
  },
  {
    "text": "we're going to pull up the MQTT topic and this is just looking at or subscribing to that specific topic so",
    "start": "1092770",
    "end": "1099400"
  },
  {
    "text": "you can see the telemetry data here so just the battery life the status of the",
    "start": "1099400",
    "end": "1104770"
  },
  {
    "text": "bot the time that's being recorded and",
    "start": "1104770",
    "end": "1109900"
  },
  {
    "text": "these are the IOT rules so this is a rule just saying with that query just querying from that particular topic",
    "start": "1109900",
    "end": "1115810"
  },
  {
    "text": "and invoking the lamda based on that so this is all on the IOT side at this time",
    "start": "1115810",
    "end": "1121450"
  },
  {
    "text": "i mean this is our lamda code so in this code essentially we are taking and",
    "start": "1121450",
    "end": "1127270"
  },
  {
    "text": "pulling for each telemetry data points and we're gonna create a couple custom metrics the first one here we're",
    "start": "1127270",
    "end": "1134380"
  },
  {
    "text": "creating is for a battery life so we're taking that parameters basically pushing",
    "start": "1134380",
    "end": "1140410"
  },
  {
    "text": "that parameter in so we've got an array for parameters and we're pushing that during life code into that array and",
    "start": "1140410",
    "end": "1147150"
  },
  {
    "text": "then at the end once we have all of our metrics will write that to cloud watts so that's the first one and then the",
    "start": "1147150",
    "end": "1152880"
  },
  {
    "text": "second one is the telemetry delay metric now for this one what we're doing is we're taking and and recording the value",
    "start": "1152880",
    "end": "1159600"
  },
  {
    "text": "just using the current value of this run and then comparing that against the last record that metric which came from the",
    "start": "1159600",
    "end": "1166410"
  },
  {
    "text": "actual IOT Salama tree data so that will give us the essentially the delay I'm in",
    "start": "1166410",
    "end": "1173970"
  },
  {
    "text": "the third metric we have is just the packet size yeah package size and for that one we're just doing a JSON size to",
    "start": "1173970",
    "end": "1180990"
  },
  {
    "text": "pull the value of that telemetry event itself and so once once we have all",
    "start": "1180990",
    "end": "1187680"
  },
  {
    "text": "three of these collected then we're doing a cloud watch put metric data and that's just the API call to actually",
    "start": "1187680",
    "end": "1194100"
  },
  {
    "text": "post that custom metric all right so now",
    "start": "1194100",
    "end": "1203310"
  },
  {
    "text": "in the user interface this is a cloud watch dashboard we've just zoomed in on we can see we've got our battery life",
    "start": "1203310",
    "end": "1208890"
  },
  {
    "text": "custom metric data we can we can look at the data points within that dashboard to",
    "start": "1208890",
    "end": "1215160"
  },
  {
    "text": "see the the battery life for all three BOTS here we've got our custom back-end or our telemetry package size so this is",
    "start": "1215160",
    "end": "1222780"
  },
  {
    "text": "just showing that packet size and you can see a couple a couple of drops in that packet size where there may be",
    "start": "1222780",
    "end": "1228150"
  },
  {
    "text": "issues that we should potentially investigate but otherwise it stays pretty consistent in terms of operations",
    "start": "1228150",
    "end": "1233250"
  },
  {
    "text": "I mean the third custom metric that we have is the telemetry delay and here",
    "start": "1233250",
    "end": "1239370"
  },
  {
    "text": "this delays in milliseconds but really what we're looking at is this lemon tree time from from that lambda being",
    "start": "1239370",
    "end": "1245760"
  },
  {
    "text": "triggered to having that metric published in cloud watch is sitting anywhere between about one to two seconds but typically under two seconds",
    "start": "1245760",
    "end": "1252660"
  },
  {
    "text": "so there's not a significant delay there but it's obviously not exactly real time",
    "start": "1252660",
    "end": "1260030"
  },
  {
    "start": "1260000",
    "end": "1447000"
  },
  {
    "text": "all right now I'll hand back to Marcos for takeaways cool so what we just see here is like if you if we see the",
    "start": "1260630",
    "end": "1267690"
  },
  {
    "text": "takeaways of the first monitoring scenario is like Allegan align your metrics your business needs so in acne",
    "start": "1267690",
    "end": "1274740"
  },
  {
    "text": "box case they need to know the battery life over time to see if abates misbehaving and not charging and",
    "start": "1274740",
    "end": "1281059"
  },
  {
    "text": "dad on the ground floor like we need to replace that they need to know the real",
    "start": "1281059",
    "end": "1286549"
  },
  {
    "text": "time delay so they need to know how far behind real time they are once they receive those metrics and they need to",
    "start": "1286549",
    "end": "1292970"
  },
  {
    "text": "see the package size because you might have a misbehaving bot that is sending metrics more than more frequently than",
    "start": "1292970",
    "end": "1299330"
  },
  {
    "text": "every 15 seconds or a huge package decides so you might want to see that in our operations right so whenever you're",
    "start": "1299330",
    "end": "1305179"
  },
  {
    "text": "defining or designing or strategy for your monetary think about what are the",
    "start": "1305179",
    "end": "1311000"
  },
  {
    "text": "metrics that will make sense to the business and then you work backwards from that to create a custom metrics as",
    "start": "1311000",
    "end": "1316610"
  },
  {
    "text": "Joan nation we call the putt putt putt metric API to create custom metrics",
    "start": "1316610",
    "end": "1322100"
  },
  {
    "text": "there are some techniques that you can use so you don't introduce delays because this is an HTTP call and",
    "start": "1322100",
    "end": "1327650"
  },
  {
    "text": "sometimes you have like a logic loop running or in your applications that isn't want to introduce delays so if",
    "start": "1327650",
    "end": "1334700"
  },
  {
    "text": "you're interesting to that we can leverage like cloud watch logs agent so you just send UDP packages like",
    "start": "1334700",
    "end": "1341570"
  },
  {
    "text": "fire-and-forget so you can send that information not only from server less services such as",
    "start": "1341570",
    "end": "1346610"
  },
  {
    "text": "we show like lambda here but you can do that from one pram or from your ec2 workloads or containers workloads these",
    "start": "1346610",
    "end": "1353240"
  },
  {
    "text": "does not apply only for us service the other fingers like as I just metric 12",
    "start": "1353240",
    "end": "1359059"
  },
  {
    "text": "watch agent it supports stats D and collecti so you",
    "start": "1359059",
    "end": "1364429"
  },
  {
    "text": "can send UDP packages to that fire-and-forget it's gonna be introducing like one or two milliseconds of delay which is fine",
    "start": "1364429",
    "end": "1371360"
  },
  {
    "text": "for most of your applications and I have another demo that's or reach out to us by the end of the session if you're",
    "start": "1371360",
    "end": "1377630"
  },
  {
    "text": "interested in last but not least important once you deploy that",
    "start": "1377630",
    "end": "1382909"
  },
  {
    "text": "application we have a CloudFormation template we're not only gonna be deploying the backend for that in the",
    "start": "1382909",
    "end": "1388610"
  },
  {
    "text": "front-end but we're also going to be deploying automatically all the monetary resources needed for that application so",
    "start": "1388610",
    "end": "1395780"
  },
  {
    "text": "that's the best practices that is dashboard alarms and we Jets on those",
    "start": "1395780",
    "end": "1402830"
  },
  {
    "text": "dashboards and everything you might need maybe like event rules to process events everything that is needed to manage",
    "start": "1402830",
    "end": "1409820"
  },
  {
    "text": "early we are delivering through an automated process in our case we're using a cloud",
    "start": "1409820",
    "end": "1415639"
  },
  {
    "text": "formation so that's one one of the best practices there are always tells customers to do because a lot of times",
    "start": "1415639",
    "end": "1421820"
  },
  {
    "text": "you see a you have confirmation we have CI CD we have an automated process and how do you monitor that it's a manual",
    "start": "1421820",
    "end": "1428929"
  },
  {
    "text": "process it's not consistent you might have new metrics with new versions of replication so try to leverage that",
    "start": "1428929",
    "end": "1435289"
  },
  {
    "text": "CloudFormation supports virtually everything like even with the new services within like one or two weeks we",
    "start": "1435289",
    "end": "1441859"
  },
  {
    "text": "have supported those so try to leverage that when you deploy your application as well so now we're reaching our second",
    "start": "1441859",
    "end": "1449509"
  },
  {
    "start": "1447000",
    "end": "1505000"
  },
  {
    "text": "scenario for monitoring which is like detecting and handling errors right so whenever I talk about these I always",
    "start": "1449509",
    "end": "1456109"
  },
  {
    "text": "like to call out one of the statements of our CTO Verner Vogel's everything",
    "start": "1456109",
    "end": "1462409"
  },
  {
    "text": "fails all the time so that means you need to designer workloads and plan ahead of time so it can be resilient to",
    "start": "1462409",
    "end": "1470239"
  },
  {
    "text": "failures right so you need to first to be aware of failures you need to know when failures happen you need to be able",
    "start": "1470239",
    "end": "1476480"
  },
  {
    "text": "to detect them and notify to notify the right audience whenever errors happens",
    "start": "1476480",
    "end": "1481669"
  },
  {
    "text": "in last but not least important you need to automatically react to failures",
    "start": "1481669",
    "end": "1488629"
  },
  {
    "text": "whenever is possible it's not 100 percent of the case that is feasible to automatically he at reacting to failures",
    "start": "1488629",
    "end": "1495230"
  },
  {
    "text": "but we're never possible try to close that loop of self-healing automation so",
    "start": "1495230",
    "end": "1501649"
  },
  {
    "text": "Joan's gonna show how we do that on acne bots yeah so with acne bots I mean the",
    "start": "1501649",
    "end": "1508730"
  },
  {
    "start": "1505000",
    "end": "1688000"
  },
  {
    "text": "key thing our key error scenario is you know how do I detect the bot not charging properly how do i how do I",
    "start": "1508730",
    "end": "1515629"
  },
  {
    "text": "ensure that if there's an error with the bots charging that we handle that and and so to do that we're using scheduled",
    "start": "1515629",
    "end": "1522590"
  },
  {
    "text": "events so we have a scheduled event that's running every minute that's running a lambda to search for low",
    "start": "1522590",
    "end": "1528049"
  },
  {
    "text": "battery bots and to do that what it does is it first reach out reaches out to dynamodb so queries DynamoDB we're",
    "start": "1528049",
    "end": "1535009"
  },
  {
    "text": "collecting the the bots battery life metadata there and you see here is pulling back three bots that have",
    "start": "1535009",
    "end": "1540759"
  },
  {
    "text": "battery life below our 15% threshold so once we do that we're also then",
    "start": "1540759",
    "end": "1548010"
  },
  {
    "text": "having it log to cloud watch logs and there's not a there's not a need for doing that from a detection perspective",
    "start": "1548010",
    "end": "1555330"
  },
  {
    "text": "but this is really so that we can keep track of historical information and have some audit trail in terms of our bots in",
    "start": "1555330",
    "end": "1561060"
  },
  {
    "text": "terms of whether they've had battery life issues or not so after logging that event what we do",
    "start": "1561060",
    "end": "1569340"
  },
  {
    "text": "is we try to heal it ourselves right so we send a message the MQTT topic for",
    "start": "1569340",
    "end": "1574530"
  },
  {
    "text": "that bot telling it to go back to its base in charge immediately so basically triggering the charge in",
    "start": "1574530",
    "end": "1579900"
  },
  {
    "text": "some cases that could work there may be cases in a real bot use environment where maybe the bots stuck for some",
    "start": "1579900",
    "end": "1586380"
  },
  {
    "text": "reason maybe it doesn't get back to the dock and goes to zero percent battery life in our case using docker containers",
    "start": "1586380",
    "end": "1593430"
  },
  {
    "text": "obviously 0% battery life isn't important but in a real life workload at",
    "start": "1593430",
    "end": "1599310"
  },
  {
    "text": "that time you may not be able to self-heal that and so for that we want to make certain we send an alarm as well",
    "start": "1599310",
    "end": "1605540"
  },
  {
    "text": "so for the alarm piece we collect a a metric called low battery counts and use",
    "start": "1605540",
    "end": "1613080"
  },
  {
    "text": "that metric to trigger our alarm so we have a cloud watch alarm and that alarm can then trigger a message to SNS or",
    "start": "1613080",
    "end": "1620670"
  },
  {
    "text": "simple notification service and that will send an email notification indicating that there's a problem and",
    "start": "1620670",
    "end": "1626160"
  },
  {
    "text": "somebody needs to go investigate so we'll show that in action so here we",
    "start": "1626160",
    "end": "1637440"
  },
  {
    "text": "have the bots behaving as normal the battery life is all working as expected",
    "start": "1637440",
    "end": "1642840"
  },
  {
    "text": "and what we're going to do here is we're just going to introduce a problem so we are going to send a command to one of",
    "start": "1642840",
    "end": "1649320"
  },
  {
    "text": "the bots basically telling it not to not to auto charge so in this case we've got",
    "start": "1649320",
    "end": "1657060"
  },
  {
    "text": "bot two we've sent the message and we've seen the acknowledgement that the bot has essentially disabled its auto",
    "start": "1657060",
    "end": "1662970"
  },
  {
    "text": "charging function sorry about that",
    "start": "1662970",
    "end": "1671299"
  },
  {
    "text": "all right and then this is just showing in cloud watch the the rule that we have set up and so this rule is just",
    "start": "1672070",
    "end": "1678890"
  },
  {
    "text": "triggering a lamda this is our scheduled event that's running once a minute and then we'll walk through the code for our",
    "start": "1678890",
    "end": "1685280"
  },
  {
    "text": "search low battery or low battery for our BOTS I'm so here in the first",
    "start": "1685280",
    "end": "1691669"
  },
  {
    "start": "1688000",
    "end": "1768000"
  },
  {
    "text": "section here the first thing that we're doing is is querying dynamodb and this is just doing a listing of all the bots",
    "start": "1691669",
    "end": "1699020"
  },
  {
    "text": "that have a low battery life so once we",
    "start": "1699020",
    "end": "1705440"
  },
  {
    "text": "have that we mentioned that we're saving that as a custom metric so that we can alarm on it so this next section of code",
    "start": "1705440",
    "end": "1712250"
  },
  {
    "text": "here is just doing a put metric data so that is is calling and and logging that",
    "start": "1712250",
    "end": "1718190"
  },
  {
    "text": "custom metric and this is our self-healing section so after after",
    "start": "1718190",
    "end": "1724010"
  },
  {
    "text": "we've logged that metric we want to try to heal the bot if we can so this is",
    "start": "1724010",
    "end": "1729110"
  },
  {
    "text": "going to send a command to the MQTT topic for that bot to go back in to its",
    "start": "1729110",
    "end": "1735710"
  },
  {
    "text": "base in charge so there's the payload that indicates to start charging and",
    "start": "1735710",
    "end": "1745820"
  },
  {
    "text": "then just moving further down here this section right here is just our audit trail so this is our our called watch",
    "start": "1745820",
    "end": "1752690"
  },
  {
    "text": "log that we're shipping just to say here's the devices that have a low battery",
    "start": "1752690",
    "end": "1758919"
  },
  {
    "start": "1768000",
    "end": "1787000"
  },
  {
    "text": "all right and then moving on to our email so you noticed we were sending an alarm and then emailing on that here's",
    "start": "1768590",
    "end": "1776299"
  },
  {
    "text": "an example of that email so it's just giving a name of the alarm indicating that is in alarm status and you can see",
    "start": "1776299",
    "end": "1785630"
  },
  {
    "text": "a number of alarms depending on the individual runs that we've executed now we move to our dashboard and we've got a",
    "start": "1785630",
    "end": "1791659"
  },
  {
    "start": "1787000",
    "end": "1828000"
  },
  {
    "text": "couple of widgets here on the dashboard one is just that low-battery bot count so that's indicating the that one bot",
    "start": "1791659",
    "end": "1798919"
  },
  {
    "text": "bot number two has crossed that threshold and you can also see from a battery life perspective on the right",
    "start": "1798919",
    "end": "1805190"
  },
  {
    "text": "widget the actual times where it hits the or below the threshold and then",
    "start": "1805190",
    "end": "1811429"
  },
  {
    "text": "finally we've added on a logging widget here so this is a fairly new feature being able to add your your logs to your",
    "start": "1811429",
    "end": "1818120"
  },
  {
    "text": "dashboard so in this case we can correlate our logs directly to our metrics and so in this case the the log",
    "start": "1818120",
    "end": "1825049"
  },
  {
    "text": "being about two having a battery life that's reached zero so now we're just",
    "start": "1825049",
    "end": "1831500"
  },
  {
    "start": "1828000",
    "end": "1863000"
  },
  {
    "text": "going to look in MQTT since our MQTT client and we're just looking at those",
    "start": "1831500",
    "end": "1836510"
  },
  {
    "text": "messages being sent for bot - this is just the timing that is sent those messages to try to sell feel I'm sending",
    "start": "1836510",
    "end": "1843260"
  },
  {
    "text": "the message to start charging and that's",
    "start": "1843260",
    "end": "1848960"
  },
  {
    "text": "what's restarted the charging and then you also see the acknowledgment message here the status responds with ok",
    "start": "1848960",
    "end": "1854320"
  },
  {
    "text": "indicating that the actions been taken",
    "start": "1854320",
    "end": "1858398"
  },
  {
    "start": "1863000",
    "end": "1874000"
  },
  {
    "text": "alright and then the last thing we're going to do is just clean up so we're going to go back in issue command to enable auto charging again so that we",
    "start": "1863210",
    "end": "1870200"
  },
  {
    "text": "don't run into this problem in this case um so now you'll see in the dashboard",
    "start": "1870200",
    "end": "1876200"
  },
  {
    "start": "1874000",
    "end": "1887000"
  },
  {
    "text": "that our alarms have stopped you'll see in the next dashboard section that also",
    "start": "1876200",
    "end": "1881510"
  },
  {
    "text": "the battery charging has returned to normal",
    "start": "1881510",
    "end": "1885160"
  },
  {
    "text": "alright and I'll hand back to Marcos for takeaways right so what we just saw here",
    "start": "1886960",
    "end": "1892550"
  },
  {
    "start": "1887000",
    "end": "1985000"
  },
  {
    "text": "is like the whole error detecting in Handley cycle so we need to be able to",
    "start": "1892550",
    "end": "1899660"
  },
  {
    "text": "measure detect notify and fix errors in order to have observability right",
    "start": "1899660",
    "end": "1905560"
  },
  {
    "text": "actually let me take the back you need to have observability in order to be",
    "start": "1905560",
    "end": "1910670"
  },
  {
    "text": "able to complete the whole cycle measuring detecting notifying in 15 years right and how do we map that to",
    "start": "1910670",
    "end": "1917810"
  },
  {
    "text": "eight address services so the way we measure in this case was using like loud watch metrics so we have the low Barry",
    "start": "1917810",
    "end": "1925090"
  },
  {
    "text": "BOTS count which were basically a metric that we use to trigger an alert every",
    "start": "1925090",
    "end": "1930920"
  },
  {
    "text": "time was greater than 0 then that metric",
    "start": "1930920",
    "end": "1936410"
  },
  {
    "text": "used the alert the alert triggered a notification to an SNS topic the caller",
    "start": "1936410",
    "end": "1941720"
  },
  {
    "text": "lambda function the SNS topic will notify the right audience in our case we",
    "start": "1941720",
    "end": "1947360"
  },
  {
    "text": "send an email to to to an address that we subscribe to the topic and then we",
    "start": "1947360",
    "end": "1953030"
  },
  {
    "text": "are we finally close that loop by implementing a fix out of healing automation which was basically in our",
    "start": "1953030",
    "end": "1959690"
  },
  {
    "text": "case sending a command back to the bot running as a far gate container saying hey go back to charge right so the key",
    "start": "1959690",
    "end": "1968240"
  },
  {
    "text": "here is like being able try as you as you go in your journey for the error",
    "start": "1968240",
    "end": "1974150"
  },
  {
    "text": "detecting in handling usually gonna start with measure detect and notify but try to go the extra mile to fix it",
    "start": "1974150",
    "end": "1981230"
  },
  {
    "text": "automatically whenever it's possible it's life-saving okay so we saw Suzanne",
    "start": "1981230",
    "end": "1989600"
  },
  {
    "start": "1985000",
    "end": "2190000"
  },
  {
    "text": "error so far for monitoring we saw custom metrics we saw error handling and",
    "start": "1989600",
    "end": "1995990"
  },
  {
    "text": "I'm going to yeah third one which is how to react to workload events right so whenever you",
    "start": "1995990",
    "end": "2003240"
  },
  {
    "text": "have a workload it might be generating events so for example we have events out of the box in so many de Bresse services",
    "start": "2003240",
    "end": "2009419"
  },
  {
    "text": "for example easy to when you start an instance you have a star dc2 event when you stop an instance you have that event",
    "start": "2009419",
    "end": "2016169"
  },
  {
    "text": "when you term it you have that event right but what a lot of people don't",
    "start": "2016169",
    "end": "2022110"
  },
  {
    "text": "know is that you can have custom event since you work into a workload so we can generate events such as hey a bot",
    "start": "2022110",
    "end": "2028769"
  },
  {
    "text": "connected bot one connected but we disconnected or we can have a workload event say hey I received a notification",
    "start": "2028769",
    "end": "2034769"
  },
  {
    "text": "or I received a telemetry data so it's very important to be able to have those",
    "start": "2034769",
    "end": "2040590"
  },
  {
    "text": "events so you can swing that to external application in the case that they need so John's gonna show how do we apply",
    "start": "2040590",
    "end": "2048780"
  },
  {
    "text": "event streaming of custom events each year one workloads on in this case in",
    "start": "2048780",
    "end": "2053878"
  },
  {
    "text": "Acme BOTS yeah so for acne boss there's a couple things that we would like in",
    "start": "2053879",
    "end": "2059790"
  },
  {
    "text": "terms of events one is just a status itself whether it's charging whether it's in standby so that's one invent",
    "start": "2059790",
    "end": "2066540"
  },
  {
    "text": "events and then the other is is whether the bots connected or not and so we'll walk through kind of how we would design",
    "start": "2066540",
    "end": "2072750"
  },
  {
    "text": "that now in our case IOT is our back-end we don't necessarily want to share our",
    "start": "2072750",
    "end": "2077849"
  },
  {
    "text": "IOT back-end with everybody who might want to consume events cloud watch events provides a good way to separate",
    "start": "2077849",
    "end": "2083608"
  },
  {
    "text": "that we can publish our event to cloud watch and then another application can consume that event I'm so in this case",
    "start": "2083609",
    "end": "2090720"
  },
  {
    "text": "on the left hand side we've got our bot publishing data in terms of connectivity",
    "start": "2090720",
    "end": "2096628"
  },
  {
    "text": "or whether it's connected or not and then based on that we can use a connectivity rule that that monitor is",
    "start": "2096629",
    "end": "2104190"
  },
  {
    "text": "that particular topic and triggers an event action so that event action is a lambda and what that lambda is going to",
    "start": "2104190",
    "end": "2111390"
  },
  {
    "text": "do is it's going to call a put event API so this is just calling a cloud watch API to create an event and you can see",
    "start": "2111390",
    "end": "2117750"
  },
  {
    "text": "the the detail of that event and then you can create a cloud watch rule based on that to say monitor for these events",
    "start": "2117750",
    "end": "2124710"
  },
  {
    "text": "and do an action and that could be doing action if it's connected or disconnected or it could just be always do",
    "start": "2124710",
    "end": "2130580"
  },
  {
    "text": "do in action so in this case what we're doing is we're using that event to",
    "start": "2130580",
    "end": "2136220"
  },
  {
    "text": "trigger an update item and update our DynamoDB table and that table has the",
    "start": "2136220",
    "end": "2141530"
  },
  {
    "text": "last seen time as well as if it's connected or not and and the status and",
    "start": "2141530",
    "end": "2146720"
  },
  {
    "text": "this also creates a custom metric so we want to track the event delay so the",
    "start": "2146720",
    "end": "2153080"
  },
  {
    "text": "delay in time between us having the event happened on the backend and having",
    "start": "2153080",
    "end": "2158270"
  },
  {
    "text": "that event created and taking action on on the front end and the bot status is",
    "start": "2158270",
    "end": "2164900"
  },
  {
    "text": "very similar it's the exact same workflow right we've got the status being written to telemetry data in IOT",
    "start": "2164900",
    "end": "2170050"
  },
  {
    "text": "we use a a rule to trigger an action based on that and that action is doing",
    "start": "2170050",
    "end": "2176420"
  },
  {
    "text": "the put event basically creating another event within cloud watch and then us",
    "start": "2176420",
    "end": "2181580"
  },
  {
    "text": "taking and monitoring that cloud watch event queue and triggering custom action",
    "start": "2181580",
    "end": "2186920"
  },
  {
    "text": "also to update our dynamo DB table so we'll see this in action so first here",
    "start": "2186920",
    "end": "2194780"
  },
  {
    "start": "2190000",
    "end": "2210000"
  },
  {
    "text": "we have our iot rules so this is just showing the query statement saying it's",
    "start": "2194780",
    "end": "2200600"
  },
  {
    "text": "querying a particular topic and invoking a lambda based on that oh and so this is",
    "start": "2200600",
    "end": "2211760"
  },
  {
    "start": "2210000",
    "end": "2237000"
  },
  {
    "text": "our first lambda function this function is what's going to write our cloud watch our cloud watch events so this is first",
    "start": "2211760",
    "end": "2219320"
  },
  {
    "text": "taking four parameters it's pulling in the connectivity status detail and this is pulling that data from the IOT event",
    "start": "2219320",
    "end": "2228280"
  },
  {
    "text": "and then here we're using cloud watch events to do the put event call and",
    "start": "2228280",
    "end": "2234890"
  },
  {
    "text": "that's just basically taking the event that we've seen in IOT and then publishing it and then next up here",
    "start": "2234890",
    "end": "2240650"
  },
  {
    "start": "2237000",
    "end": "2261000"
  },
  {
    "text": "we're in cloud watch and looking at the cloud watch rule so here we have our event pattern and cloud watch that's",
    "start": "2240650",
    "end": "2245720"
  },
  {
    "text": "just saying any cloud watch event that's acne botched connectivity will trigger this lambda function again you can",
    "start": "2245720",
    "end": "2251900"
  },
  {
    "text": "customize that event pattern to meet your needs but here we're just doing everything",
    "start": "2251900",
    "end": "2257560"
  },
  {
    "text": "well so you see the eventsource in the lambda and then we'll dig into the lambda code here so that's really",
    "start": "2259860",
    "end": "2267930"
  },
  {
    "start": "2261000",
    "end": "2320000"
  },
  {
    "text": "irritating there we go so here in the lambda code let me back up just a minute",
    "start": "2267930",
    "end": "2274890"
  },
  {
    "text": "sorry about that all right so the first",
    "start": "2274890",
    "end": "2283140"
  },
  {
    "text": "thing here that we're looking at is the event delay so here we're calculating the delay based on the current time in",
    "start": "2283140",
    "end": "2290760"
  },
  {
    "text": "the event time stamp and then here we're updating the DynamoDB table or item",
    "start": "2290760",
    "end": "2295980"
  },
  {
    "text": "itself now so this is updating the attributes for connected and last seen",
    "start": "2295980",
    "end": "2301110"
  },
  {
    "text": "time and that's basically the attribute",
    "start": "2301110",
    "end": "2307380"
  },
  {
    "text": "says pushing through and then there's the update item call for DynamoDB and",
    "start": "2307380",
    "end": "2313410"
  },
  {
    "text": "then finally the custom metric that were that we're posting for the delay all",
    "start": "2313410",
    "end": "2321570"
  },
  {
    "start": "2320000",
    "end": "2331000"
  },
  {
    "text": "right so then we go to our dynamo DB table and you can see our battery life in there we also have the connected",
    "start": "2321570",
    "end": "2327120"
  },
  {
    "text": "field the last scene at time the policy name and so what we're going to do is",
    "start": "2327120",
    "end": "2333030"
  },
  {
    "start": "2331000",
    "end": "2353000"
  },
  {
    "text": "we're gonna go into our UCS cluster and we're just going to stop one of our tasks to simulate this so we go to our",
    "start": "2333030",
    "end": "2341130"
  },
  {
    "text": "tasks we select bot 2 here and we're just going to stop that and then if we",
    "start": "2341130",
    "end": "2347640"
  },
  {
    "text": "go back to our dynamo table here in our",
    "start": "2347640",
    "end": "2355500"
  },
  {
    "text": "dynamo table if we scroll over we should refresh and you can see bot 2 now the status is updated to be not connected",
    "start": "2355500",
    "end": "2363050"
  },
  {
    "start": "2364000",
    "end": "2389000"
  },
  {
    "text": "I mean this is just the custom metric that we posted which is its lemon tree delay you can see here we're on average",
    "start": "2365300",
    "end": "2371240"
  },
  {
    "text": "sitting about one-and-a-half seconds delay for that anywhere up to maybe two and a half seconds so very minimal delay",
    "start": "2371240",
    "end": "2379930"
  },
  {
    "text": "all right so I'll hand it back to Marcos for takeaways cool so what what did we",
    "start": "2387610",
    "end": "2394480"
  },
  {
    "start": "2389000",
    "end": "2557000"
  },
  {
    "text": "just saw here so we saw a couple of things when we talk about events that",
    "start": "2394480",
    "end": "2399730"
  },
  {
    "text": "have two types of events you have a scheduled events for those of you who don't know it's a very powerful tool",
    "start": "2399730",
    "end": "2406090"
  },
  {
    "text": "think about like a chrome tab cloud-based phone tab so you can schedule like you say hey every 15",
    "start": "2406090",
    "end": "2412090"
  },
  {
    "text": "seconds every 15 minutes every 5 seconds whatever execute an action that's what",
    "start": "2412090",
    "end": "2417760"
  },
  {
    "text": "we did to trigger a logic in the lambda function right so events enable automation so think about like",
    "start": "2417760",
    "end": "2423630"
  },
  {
    "text": "developers here like when you're developing on frameworks that allow you to have like lifecycle hoots think about",
    "start": "2423630",
    "end": "2429880"
  },
  {
    "text": "events you can introduce lifecycle hooks into your workloads running on AWS for example if you want to share in the case",
    "start": "2429880",
    "end": "2436930"
  },
  {
    "text": "of acne but we're never about connected or disconnected you just create a custom event that external applications can",
    "start": "2436930",
    "end": "2444190"
  },
  {
    "text": "consume to execute automations on on top of that so the other feels like when you",
    "start": "2444190",
    "end": "2450490"
  },
  {
    "text": "have a bot below the threshold anything that might make sense to your business you can create those lifecycle hooks as",
    "start": "2450490",
    "end": "2459400"
  },
  {
    "text": "cloud watch events custom events that you can use to share the state of your",
    "start": "2459400",
    "end": "2464830"
  },
  {
    "text": "workload or the state changes of your workload throughout your organization or even with your customers right the other",
    "start": "2464830",
    "end": "2472390"
  },
  {
    "text": "thing that I'd like to call out for those of you who don't know cloud trail so everything you do on AWS mean that",
    "start": "2472390",
    "end": "2479140"
  },
  {
    "text": "through a CLI through an SDK or through the web UI are in the rest console",
    "start": "2479140",
    "end": "2485650"
  },
  {
    "text": "you're calling an API behind the scenes and if you have cloud tray or enable your account it's gonna be logging all",
    "start": "2485650",
    "end": "2492040"
  },
  {
    "text": "those informations and you can connect that to events so you can have events on",
    "start": "2492040",
    "end": "2498340"
  },
  {
    "text": "services as well so that's really powerful if you want to have like a custom event or events where were closed",
    "start": "2498340",
    "end": "2505150"
  },
  {
    "text": "based on some of the interests services that do not provide 12 watch events out",
    "start": "2505150",
    "end": "2510850"
  },
  {
    "text": "of the box you can kind of like generate those events out of pal trail custom",
    "start": "2510850",
    "end": "2517720"
  },
  {
    "text": "support of events so you put it you call an API to create or only that's what we did under them and it's available in the code for you guys and",
    "start": "2517720",
    "end": "2524350"
  },
  {
    "text": "all you need to do once you have your events are the events that you want to process you just create cloud watch",
    "start": "2524350",
    "end": "2530320"
  },
  {
    "text": "event rules and whenever there's a match the payload of that event is gonna be",
    "start": "2530320",
    "end": "2536110"
  },
  {
    "text": "made available to a lambda function that's a very common pattern so he can trigger automations and those",
    "start": "2536110",
    "end": "2542020"
  },
  {
    "text": "automations can be done by consuming applications or services that bill necessarily is your service but you",
    "start": "2542020",
    "end": "2547780"
  },
  {
    "text": "might want to share those events or those state changes or lifecycle hooks into your applications with other",
    "start": "2547780",
    "end": "2554400"
  },
  {
    "text": "consumer services so the last monitor scenario we're gonna be showing here is",
    "start": "2554400",
    "end": "2560860"
  },
  {
    "start": "2557000",
    "end": "2602000"
  },
  {
    "text": "troubleshooting whenever you troubleshoot you want to make sure that you have visibility of your workload so",
    "start": "2560860",
    "end": "2567570"
  },
  {
    "text": "how is your serve are your services talking to each other what is the service dependency what is the latency",
    "start": "2567570",
    "end": "2574480"
  },
  {
    "text": "on a specific service and what is the dependency where where can you improve that can you quickly identify the",
    "start": "2574480",
    "end": "2581530"
  },
  {
    "text": "gradation anomalies and so forth so we have a service that is very powerful",
    "start": "2581530",
    "end": "2586660"
  },
  {
    "text": "especially when combined with all the other cloud watch services and we're gonna talk about that which is a x-ray",
    "start": "2586660",
    "end": "2593730"
  },
  {
    "text": "Jon's gonna show you guys exactly how to use the x-ray into your workloads specifically here on acne but yeah so",
    "start": "2593730",
    "end": "2603100"
  },
  {
    "start": "2602000",
    "end": "2633000"
  },
  {
    "text": "for acne bots what x-ray can do is first of all it can map out my service dependencies so when you've got a",
    "start": "2603100",
    "end": "2609490"
  },
  {
    "text": "distributed application it's very useful to be able to track all the dependencies in your in your given application for",
    "start": "2609490",
    "end": "2614800"
  },
  {
    "text": "example if you're using a micro services or container based application that can really sprawl quite rapidly so being",
    "start": "2614800",
    "end": "2621820"
  },
  {
    "text": "able to have a nice service dependency map to walk through is very useful and then also being able to track down",
    "start": "2621820",
    "end": "2628060"
  },
  {
    "text": "bottlenecks and and errors within within that dependency track so here I'm just",
    "start": "2628060",
    "end": "2634510"
  },
  {
    "start": "2633000",
    "end": "2754000"
  },
  {
    "text": "going to give you a quick view of of x-ray it's it's it's service graph and",
    "start": "2634510",
    "end": "2640780"
  },
  {
    "text": "going through and looking at that trace so here we're starting with our function and particularly we're starting with our",
    "start": "2640780",
    "end": "2647890"
  },
  {
    "text": "search low-battery BOTS function and if you click on the monitoring tab there within",
    "start": "2647890",
    "end": "2653310"
  },
  {
    "text": "you have this view you can go click view traces in x-ray and that will bring you",
    "start": "2653310",
    "end": "2658350"
  },
  {
    "text": "right to the x-ray user interface so here in x-ray we're going to just switch",
    "start": "2658350",
    "end": "2664170"
  },
  {
    "text": "over to service maps real quick and here what this will pull up is is the map over all of your of your services so you",
    "start": "2664170",
    "end": "2671640"
  },
  {
    "text": "can see all the components that are involved in that if you click on one of those functions in this case we're",
    "start": "2671640",
    "end": "2677070"
  },
  {
    "text": "clicking on the search little battery box here you can see a response distribution and just just the timing of",
    "start": "2677070",
    "end": "2683190"
  },
  {
    "text": "responses and we're going to scroll out to a larger view time and it will re compute the map for that larger time and",
    "start": "2683190",
    "end": "2691050"
  },
  {
    "text": "so in this case we're going to zoom in on one particular component here I'm",
    "start": "2691050",
    "end": "2697200"
  },
  {
    "text": "since this is a IOT things table and you can see here the response times specific",
    "start": "2697200",
    "end": "2702810"
  },
  {
    "text": "to that table now we can zoom in on the graph to see that a little bit more clearly and you see there's a little",
    "start": "2702810",
    "end": "2708120"
  },
  {
    "text": "yellow line there or orange line and if you click on that and bring that back up",
    "start": "2708120",
    "end": "2714090"
  },
  {
    "text": "you can look over on the right-hand side and this will indicate that there's there's errors so two percent of the",
    "start": "2714090",
    "end": "2719730"
  },
  {
    "text": "responses are errors so now we can dig into a trace itself and open up a trace",
    "start": "2719730",
    "end": "2725250"
  },
  {
    "text": "and what that gives us is is a list of all the time spent for each individual",
    "start": "2725250",
    "end": "2730380"
  },
  {
    "text": "stage for our applications so we can see in this case the response is a 202 we can see where we're spending time in",
    "start": "2730380",
    "end": "2737850"
  },
  {
    "text": "each component and we also have the raw data here that you can look at now with the raw data you could also add stack",
    "start": "2737850",
    "end": "2745530"
  },
  {
    "text": "traces from your application if you instrument it that way so you could see that data right here with within the",
    "start": "2745530",
    "end": "2751620"
  },
  {
    "text": "x-ray UI so I will hand it back to Marcos who so what we just saw here is",
    "start": "2751620",
    "end": "2758700"
  },
  {
    "start": "2754000",
    "end": "2953000"
  },
  {
    "text": "how to use x-ray to facilitate troubleshooting so some of the takeaways",
    "start": "2758700",
    "end": "2764760"
  },
  {
    "text": "that I like to give to you guys regarding troubleshooting on AWS is like use AWS logs first of all to collect and",
    "start": "2764760",
    "end": "2773430"
  },
  {
    "text": "centralize all your logs because you might be using server lists so if you have an error in your lambda function",
    "start": "2773430",
    "end": "2779580"
  },
  {
    "text": "that's gonna be straight to cloud watch push it to cloud watch logs but like what if you're using ec2 for example",
    "start": "2779580",
    "end": "2785900"
  },
  {
    "text": "trainers in that container of that ec2 instance handled that request there was an error the lob was there but the auto",
    "start": "2785900",
    "end": "2793220"
  },
  {
    "text": "scaling group shrink that fleet and you don't have that instance available anymore so you can never check their log",
    "start": "2793220",
    "end": "2798890"
  },
  {
    "text": "again so it's super important to have log aggregation you have your logs in a central location and whenever you using",
    "start": "2798890",
    "end": "2806510"
  },
  {
    "text": "cloud watch please don't forget to set up a log retention strategy by d4 if you",
    "start": "2806510",
    "end": "2812810"
  },
  {
    "text": "create a law group I think the retention policies like keep those locks forever but it's super easy to say",
    "start": "2812810",
    "end": "2819710"
  },
  {
    "text": "hey for this law group my retention policies keep it for 60 days so",
    "start": "2819710",
    "end": "2825230"
  },
  {
    "text": "everything that is older than that it's gonna be automatically deleted so you're not overpaying for storage that you",
    "start": "2825230",
    "end": "2831320"
  },
  {
    "text": "might not need on cloud watch logs another very common pattern is like to pipeline the logs so a lot of people",
    "start": "2831320",
    "end": "2837770"
  },
  {
    "text": "keep the logs on cloud watch logs and eventually they transfer that to elasticsearch and/or s3 right because",
    "start": "2837770",
    "end": "2846530"
  },
  {
    "text": "you might want to search before previously before we have like cloud watch logs inside a customer complain",
    "start": "2846530",
    "end": "2853130"
  },
  {
    "text": "that it was not that easy to search from cloud watch logs hopefully now it's way better it's a super nice product but",
    "start": "2853130",
    "end": "2859760"
  },
  {
    "text": "like people might want to put that on cloud on on elasticsearch for whatever reason share with other applications so",
    "start": "2859760",
    "end": "2865160"
  },
  {
    "text": "you keep it there so you need to have a retention policy not only on cloud watch logs but also in elasticsearch and more",
    "start": "2865160",
    "end": "2872060"
  },
  {
    "text": "s3 for instance when the log reaches out s3 you might keep it for like 30 or 60",
    "start": "2872060",
    "end": "2877400"
  },
  {
    "text": "more days on s3 standard and you might want to roll it out to a warp and a",
    "start": "2877400",
    "end": "2882740"
  },
  {
    "text": "colder storage layer such as like laser for example so it you need to keep to",
    "start": "2882740",
    "end": "2889880"
  },
  {
    "text": "carefully think about it because it's super easy to generate logs logs logs and you're gonna be overpaying but for",
    "start": "2889880",
    "end": "2895700"
  },
  {
    "text": "cloud watch storage on the x-ray side what we saw here so again x-ray the main benefit service",
    "start": "2895700",
    "end": "2902360"
  },
  {
    "text": "maps and Tracy right so you can see you can have a dynamic view of how your services communicate to each other",
    "start": "2902360",
    "end": "2908090"
  },
  {
    "text": "bottlenecks error rates and all that but that's that's not only available for",
    "start": "2908090",
    "end": "2914360"
  },
  {
    "text": "service so it's super easy to integrate x-ray with lambda functions",
    "start": "2914360",
    "end": "2919369"
  },
  {
    "text": "like you can also use x-ray on your containers on your ec2 instances or even",
    "start": "2919369",
    "end": "2925670"
  },
  {
    "text": "on on prim environments outside of AWS because we have the x-ray daemon one of",
    "start": "2925670",
    "end": "2932180"
  },
  {
    "text": "the screenshots on that video the payload is a JSON payload that you sent to the demo UDP fire-and-forget so you",
    "start": "2932180",
    "end": "2940400"
  },
  {
    "text": "do not introduce huge amounts of delays into your workloads and you can have those informations running on on",
    "start": "2940400",
    "end": "2947930"
  },
  {
    "text": "premises or known lamda workloads easily integrated to x-ray so we saw those for",
    "start": "2947930",
    "end": "2955279"
  },
  {
    "start": "2953000",
    "end": "3294000"
  },
  {
    "text": "those for monitoring scenarios here and I would like to call out some best practices on monitoring as well so again",
    "start": "2955279",
    "end": "2964700"
  },
  {
    "text": "I cannot stress this enough you need to align your matrix your business needs so",
    "start": "2964700",
    "end": "2971420"
  },
  {
    "text": "an easy translation is you need to have just a matrix right so whenever you're planning how are you going to be",
    "start": "2971420",
    "end": "2977480"
  },
  {
    "text": "monitoring your workloads I always do make this Jesse you can have like you",
    "start": "2977480",
    "end": "2983150"
  },
  {
    "text": "can easily be lost in hundreds of metrics that you might want to monitor for example if you have a stack you're",
    "start": "2983150",
    "end": "2988460"
  },
  {
    "text": "gonna have all let's say you have a dynamo DB so you're gonna have all the metrics available from dynamo DB we're",
    "start": "2988460",
    "end": "2994069"
  },
  {
    "text": "using lambda step functions and IOT we have all those metrics available for them as well but now stop first you",
    "start": "2994069",
    "end": "3001089"
  },
  {
    "text": "start you start thinking about what is important for you to monitor on that specific workload and you any work",
    "start": "3001089",
    "end": "3007809"
  },
  {
    "text": "backwards from that right that always means you need custom metrics so once",
    "start": "3007809",
    "end": "3013390"
  },
  {
    "text": "you figure out what those metrics are then you can implement them right it's",
    "start": "3013390",
    "end": "3019420"
  },
  {
    "text": "always nice to have the whole stack metrics as well as a plus when you're troubleshooting or when you want to",
    "start": "3019420",
    "end": "3025180"
  },
  {
    "text": "correlate or if you want to create different dashboards like you might have an operational dashboard or you might",
    "start": "3025180",
    "end": "3030910"
  },
  {
    "text": "have like an infrastructure dashboard or you might have a billing dashboard how much you're paying for that workload",
    "start": "3030910",
    "end": "3037079"
  },
  {
    "text": "across time but it's very important to have your custom metrics specially",
    "start": "3037079",
    "end": "3044460"
  },
  {
    "text": "aligned that your business needs deliver your monitor resources as part of your",
    "start": "3044460",
    "end": "3051759"
  },
  {
    "text": "applications however you're deploying our applications to do an AWS hopefully",
    "start": "3051759",
    "end": "3057320"
  },
  {
    "text": "automatically through confirmations the ICG whatever make sure you're also",
    "start": "3057320",
    "end": "3062450"
  },
  {
    "text": "delivering dashboard alarms and everything needed to monitor that write",
    "start": "3062450",
    "end": "3067610"
  },
  {
    "text": "a simple a lot of customers tell me hey but that's a total different department on my company we don't have this concept",
    "start": "3067610",
    "end": "3073790"
  },
  {
    "text": "of whoever builds it monitors and handles support for that but even on",
    "start": "3073790",
    "end": "3079220"
  },
  {
    "text": "that case it's it's it's still valuable for you to provide at least let's say a minimal",
    "start": "3079220",
    "end": "3084560"
  },
  {
    "text": "dashboard so you can say hey here are all the metrics that are available my service and and you might say hey why",
    "start": "3084560",
    "end": "3090920"
  },
  {
    "text": "don't I provide just a documentation because I bet with you that if you just provide documentation on the next",
    "start": "3090920",
    "end": "3097490"
  },
  {
    "text": "release you're gonna have new mattress or going to remove previous matrix and that documentation is not gonna reflect",
    "start": "3097490",
    "end": "3102590"
  },
  {
    "text": "those changes right so if you if you if you people those dashboards or those monetary resources or the CloudFormation",
    "start": "3102590",
    "end": "3109610"
  },
  {
    "text": "template it's cold as part of your application so as you change your application code you change the code of",
    "start": "3109610",
    "end": "3116600"
  },
  {
    "text": "those dashboard which is basically a JSON payload on the CloudFormation template and you can share that with",
    "start": "3116600",
    "end": "3122630"
  },
  {
    "text": "whatever department is responsible for that so they can have insights of what Shadid what metric means what kind of",
    "start": "3122630",
    "end": "3128900"
  },
  {
    "text": "exactly what you guys do and ever using a new service and you say hey what are the cloud watching metrics provided by",
    "start": "3128900",
    "end": "3134990"
  },
  {
    "text": "that service we have a documentation we keep that documentation updated but I know that's a hassle so I always suggest",
    "start": "3134990",
    "end": "3142330"
  },
  {
    "text": "dynamically deliver those resources as part of your deployment process collect",
    "start": "3142330",
    "end": "3148430"
  },
  {
    "text": "all for whenever possible metrics and logs are collected by most of the",
    "start": "3148430",
    "end": "3154040"
  },
  {
    "text": "customers a lot of them overlook events and traces so event is super powerful",
    "start": "3154040",
    "end": "3159920"
  },
  {
    "text": "so again lifecycle hooks available for external application or external",
    "start": "3159920",
    "end": "3166760"
  },
  {
    "text": "departments or even customers to process and automate tasks based on changes on your workload and traces is also super",
    "start": "3166760",
    "end": "3175370"
  },
  {
    "text": "important especially when you need to troubleshoot over pressure water imagine trying to see that waterfall breakdown",
    "start": "3175370",
    "end": "3182000"
  },
  {
    "text": "of bottlenecks with the logs it's a mess you cannot see that monitor",
    "start": "3182000",
    "end": "3189500"
  },
  {
    "text": "everything not only the whole stack of your application not only the custom",
    "start": "3189500",
    "end": "3194570"
  },
  {
    "text": "metrics of your application but also services the cloud watch metrics of those",
    "start": "3194570",
    "end": "3201050"
  },
  {
    "text": "services limits costs API interactions",
    "start": "3201050",
    "end": "3206060"
  },
  {
    "text": "while tray or triggering events and all of that so you need to think broader as well of course customers always start",
    "start": "3206060",
    "end": "3213830"
  },
  {
    "text": "with their own application custom metrics although error detecting cycle or out of",
    "start": "3213830",
    "end": "3219470"
  },
  {
    "text": "healing automation but once you have that and that streamline inch of deployment process and that's part of",
    "start": "3219470",
    "end": "3225230"
  },
  {
    "text": "your DNA I suggest you guys should kind of like this room deepen even outer and",
    "start": "3225230",
    "end": "3230390"
  },
  {
    "text": "try to look at the big picture like is the easier the breast service up and running is that a problem of my upon",
    "start": "3230390",
    "end": "3236780"
  },
  {
    "text": "mine or my application or is that an infrastructure problem is there a health problem that we're having on either breast how our my limits how",
    "start": "3236780",
    "end": "3244730"
  },
  {
    "text": "far from the limits am i and am I having a like a huge surge on Petes on my costs",
    "start": "3244730",
    "end": "3251480"
  },
  {
    "text": "on lambda functions because I had like consumers triggering that crazy and I don't have like a throttling mechanism",
    "start": "3251480",
    "end": "3257630"
  },
  {
    "text": "set up on that all of that is important last but not least important leverage other services they my allow you to",
    "start": "3257630",
    "end": "3265070"
  },
  {
    "text": "enhancer observability for example if you're using aurora as your relational",
    "start": "3265070",
    "end": "3271130"
  },
  {
    "text": "database on your workload Aurora has performance insights so you might be able to see even more",
    "start": "3271130",
    "end": "3276950"
  },
  {
    "text": "information on that part of your stack so I just gave some examples here such as like trusted advisor Mesa guard duty",
    "start": "3276950",
    "end": "3284660"
  },
  {
    "text": "clout ryokan fig - I have more observability services depending on what",
    "start": "3284660",
    "end": "3291740"
  },
  {
    "text": "your application is using please make sure to give us some review if you think",
    "start": "3291740",
    "end": "3297980"
  },
  {
    "start": "3294000",
    "end": "3316000"
  },
  {
    "text": "that John did a terrible job and I rock tell us that just kidding just give us",
    "start": "3297980",
    "end": "3303020"
  },
  {
    "text": "five and we're all good thank you very much we're gonna be hanging out outside again this is the URL I encourage you to",
    "start": "3303020",
    "end": "3309590"
  },
  {
    "text": "guys to test the dam on your own accounts and thanks for coming enjoy event thank you",
    "start": "3309590",
    "end": "3315670"
  },
  {
    "text": "[Applause]",
    "start": "3315670",
    "end": "3318249"
  }
]