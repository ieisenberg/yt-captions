[
  {
    "start": "0",
    "end": "88000"
  },
  {
    "text": "all right welcome back everybody today is performance day super excited and a",
    "start": "30",
    "end": "5520"
  },
  {
    "text": "lot of other people are too when we had the registrations we had everybody kind of say in the registration what you're interested in",
    "start": "5520",
    "end": "11849"
  },
  {
    "text": "and this was absolutely one of the most popular topics everybody who wants to talk about performance everybody wants",
    "start": "11849",
    "end": "17670"
  },
  {
    "text": "to know about performance so the way I'm going to structure today is a little bit",
    "start": "17670",
    "end": "22890"
  },
  {
    "text": "different from yesterday yesterday we kind of had two big blocks and we started with kind of a high level",
    "start": "22890",
    "end": "28080"
  },
  {
    "text": "overview then we went deep today it's going to be a little more interspersed so we're gonna kind of go back and forth",
    "start": "28080",
    "end": "34950"
  },
  {
    "text": "between some kind of high level higher level topics and then some sort of very",
    "start": "34950",
    "end": "40379"
  },
  {
    "text": "specific more in-depth things so and it'll all be kind of mixed together and",
    "start": "40379",
    "end": "47190"
  },
  {
    "text": "the first thing I want to talk about today is at a high level just monitoring as we talk about performance",
    "start": "47190",
    "end": "53219"
  },
  {
    "text": "I think the baseline the starting point is having the data to be able to observe",
    "start": "53219",
    "end": "59039"
  },
  {
    "text": "how your system is doing in the RDS well so a lot of this classes is Postgres",
    "start": "59039",
    "end": "67530"
  },
  {
    "text": "it's not RDS specific well we're talking about Postgres we're talking about Postgres when you compile it yourself",
    "start": "67530",
    "end": "74310"
  },
  {
    "text": "Postgres when you use it an RDS even we're going to talk about aurora but the",
    "start": "74310",
    "end": "79650"
  },
  {
    "text": "common theme is Postgres but for just a minute I'm gonna go really specific on RDS so in the in the world of RDS",
    "start": "79650",
    "end": "88759"
  },
  {
    "start": "88000",
    "end": "146000"
  },
  {
    "text": "there's basically a four pronged strategy that you should have for",
    "start": "88759",
    "end": "93990"
  },
  {
    "text": "keeping track of your Postgres systems and the four prong strategy is performance insights enhanced monitoring",
    "start": "93990",
    "end": "101750"
  },
  {
    "text": "cloud watch and then custom monitoring that you do outside of that and this is",
    "start": "101750",
    "end": "108659"
  },
  {
    "text": "this this this would apply whether you're talking about aurora or whether you're talking about Postgres on RDS but",
    "start": "108659",
    "end": "114119"
  },
  {
    "text": "these are the tools that you haven't that this should be the way that you think about monitoring this should be",
    "start": "114119",
    "end": "119130"
  },
  {
    "text": "the way that you think about having the data on how your system is doing so what I'm gonna do first of all just kind of",
    "start": "119130",
    "end": "125100"
  },
  {
    "text": "briefly walk through the the four pronged strategy just get this picture like solidify it I think it's just a",
    "start": "125100",
    "end": "132450"
  },
  {
    "text": "good visual that there's just there's these four points and this is your attack",
    "start": "132450",
    "end": "137640"
  },
  {
    "text": "strategy for understanding the performance ear system and they're an order by the way I put performance",
    "start": "137640",
    "end": "144240"
  },
  {
    "text": "insights on the top because performance insights I I would argue is the most important tool that we have performance",
    "start": "144240",
    "end": "150750"
  },
  {
    "start": "146000",
    "end": "260000"
  },
  {
    "text": "insights visualizes the load wealth the activity I should say not the load the",
    "start": "150750",
    "end": "158460"
  },
  {
    "text": "activity on your system it's there's a lot of really good science and really",
    "start": "158460",
    "end": "164670"
  },
  {
    "text": "good theory and years and years of experience that goes into building this tool a lot of industry experience that",
    "start": "164670",
    "end": "170880"
  },
  {
    "text": "has gone into building this tool and it's it's a very effective so one so you",
    "start": "170880",
    "end": "178590"
  },
  {
    "text": "know top sequel kind of being able to drill down one other sort of thing that I would point out if you have depending",
    "start": "178590",
    "end": "185370"
  },
  {
    "text": "on how much you use performance insights recently they added counter metrics so",
    "start": "185370",
    "end": "190650"
  },
  {
    "text": "if you haven't used those before that's something you want to look at and sort of learn a bit more about you have a lab",
    "start": "190650",
    "end": "197520"
  },
  {
    "text": "environment you should have I hope that everybody was able to get the lab environment set up in the lab",
    "start": "197520",
    "end": "202920"
  },
  {
    "text": "environment per I hope that you caught the step where you turned on performance insights that's a great place to go",
    "start": "202920",
    "end": "209670"
  },
  {
    "text": "fiddle around because you have a workload running you can kind of you can look at P I and what you'll see when you",
    "start": "209670",
    "end": "215370"
  },
  {
    "text": "go to the screen will spend more time talking about P I later but the metrics that I'm talking about are above the the",
    "start": "215370",
    "end": "223080"
  },
  {
    "text": "graph that's in the picture here so in the picture I have the graph of active sessions what you're gonna see now when",
    "start": "223080",
    "end": "229530"
  },
  {
    "text": "you go to P I is above that you'll see another graph that has it'll probably have the commit rate but there's a",
    "start": "229530",
    "end": "236250"
  },
  {
    "text": "little gear box next to that graph and you hit the gear box and you've got access to like 30 50 I don't know a",
    "start": "236250",
    "end": "242180"
  },
  {
    "text": "whole bunch of metrics both inside and outside of the database that you can graph so that's P I and this is this is",
    "start": "242180",
    "end": "251459"
  },
  {
    "text": "if you're only going to know one thing it should be P I but we're not going to stop there we'll keep going because",
    "start": "251459",
    "end": "257519"
  },
  {
    "text": "there are some other useful tools as well enhanced monitoring has been around for",
    "start": "257520",
    "end": "263340"
  },
  {
    "start": "260000",
    "end": "398000"
  },
  {
    "text": "a really long time at RDS and P I does not yet replace enhance muttering now when",
    "start": "263340",
    "end": "270199"
  },
  {
    "text": "piao metrics they actually added a whole bunch of the same OS metrics that are in",
    "start": "270199",
    "end": "275310"
  },
  {
    "text": "enhanced monitors so it's kind of interesting to see that overlap and I and I think something you can probably extrapolate from that is that we're",
    "start": "275310",
    "end": "282120"
  },
  {
    "text": "investing a lot of performance insights and you can expect to just continue to see investment in that that's it's it's",
    "start": "282120",
    "end": "288419"
  },
  {
    "text": "a it's a well-thought-out fantastic product but it doesn't replace enhance",
    "start": "288419",
    "end": "294180"
  },
  {
    "text": "monitoring at least certainly not today one of the biggest reasons being the process list so enhanced monitoring is",
    "start": "294180",
    "end": "301919"
  },
  {
    "text": "continually capturing snapshots it's like running top on your UNIX box it's",
    "start": "301919",
    "end": "308880"
  },
  {
    "text": "continually grabbing these snapshots of all the processes that are running right now with whatever frequency you set so",
    "start": "308880",
    "end": "315479"
  },
  {
    "text": "if and we I generally suggest to people with enhanced monitoring like there's so",
    "start": "315479",
    "end": "320639"
  },
  {
    "text": "many times I've gone into a system and I see it at one-minute granularity and it",
    "start": "320639",
    "end": "325650"
  },
  {
    "text": "drives me crazy I'm like no cloud watch already has one minute granularity on a whole bunch of these metrics like you",
    "start": "325650",
    "end": "331320"
  },
  {
    "text": "you know do better like enhance money so I often tell people like at least 15 seconds if not ten or five sometimes",
    "start": "331320",
    "end": "339000"
  },
  {
    "text": "even one the trade-off is just data volume of the there I've never seen over",
    "start": "339000",
    "end": "345270"
  },
  {
    "text": "performance overhead be an issue with enhanced monitoring yeah the only kind of consideration probably is just if",
    "start": "345270",
    "end": "351419"
  },
  {
    "text": "you're running every one second it it is gonna store all that data in your cloud watch account but this is the sort of",
    "start": "351419",
    "end": "358410"
  },
  {
    "text": "data that I usually want like want to have and it's absolutely worth the cost right it's it's giving you performances",
    "start": "358410",
    "end": "365910"
  },
  {
    "text": "performance of information about your database this process list turns out to",
    "start": "365910",
    "end": "371970"
  },
  {
    "text": "be super useful as you kind of want to go back in time and look at look at what",
    "start": "371970",
    "end": "378030"
  },
  {
    "text": "was happening on a system to use performance insights with RDS Postgres",
    "start": "378030",
    "end": "383160"
  },
  {
    "text": "you need to be on a leased Postgres version 10 and so if you're on if when",
    "start": "383160",
    "end": "388440"
  },
  {
    "text": "when I bump into people running who are still running older versions of Postgres another thing to point out is that in-house monitoring is the only thing",
    "start": "388440",
    "end": "394139"
  },
  {
    "text": "that you've got you don't have P I so this is an important tool as well thirdly cloud watch",
    "start": "394139",
    "end": "400980"
  },
  {
    "start": "398000",
    "end": "576000"
  },
  {
    "text": "a cloud watch you know I I hope that everybody is familiar with it already",
    "start": "400980",
    "end": "406370"
  },
  {
    "text": "it's it's a credit it's still a really critical tool so getting familiar with one of the most important things about",
    "start": "406370",
    "end": "412470"
  },
  {
    "text": "cloud watch so we have a whole bunch of cloud watch metrics and you're probably",
    "start": "412470",
    "end": "417720"
  },
  {
    "text": "aware of that but the really really important thing about cloud watch is",
    "start": "417720",
    "end": "422850"
  },
  {
    "text": "what you can do with that data cloud watch is very easy to plug in to a whole bunch of other things right",
    "start": "422850",
    "end": "428190"
  },
  {
    "text": "in particular alarming is like a big one so cloud watches to place where you",
    "start": "428190",
    "end": "433230"
  },
  {
    "text": "should be setting up alarms on sort of important metrics metrics like disk free",
    "start": "433230",
    "end": "438960"
  },
  {
    "text": "you know so you don't run out of space if you're on RDS Postgres it will not automatically grow your volume if you're",
    "start": "438960",
    "end": "446040"
  },
  {
    "text": "on aurora Postgres watching the amount of local storage that is a metric that you have in cloud watch that you can",
    "start": "446040",
    "end": "451350"
  },
  {
    "text": "alarm on things like memory usage another really cool thing with cloud",
    "start": "451350",
    "end": "457110"
  },
  {
    "text": "watch worth pointing out is that performance insights actually exports",
    "start": "457110",
    "end": "462810"
  },
  {
    "text": "metrics to cloud watch in particular you can see the DB load and then it'll also",
    "start": "462810",
    "end": "469170"
  },
  {
    "text": "give you two more metrics one that tells you just the DB load of processes that are on CPU and then DB load processes",
    "start": "469170",
    "end": "475470"
  },
  {
    "text": "that are waiting when I was a DBA years ago I remember using I remember doing",
    "start": "475470",
    "end": "484200"
  },
  {
    "text": "this with Oracle Enterprise Manager and I had to write a bunch of custom code to get this to work but I I figured out how",
    "start": "484200",
    "end": "489810"
  },
  {
    "text": "to to write some code to calculate the average active sessions over a 5-minute",
    "start": "489810",
    "end": "494880"
  },
  {
    "text": "window across every database in our fleet with OEM and then we built an alarm on that and I remember once we had",
    "start": "494880",
    "end": "501090"
  },
  {
    "text": "that alarm in place and we kind of had it calibrated we knew there wasn't a single time so first of all I don't",
    "start": "501090",
    "end": "508320"
  },
  {
    "text": "think I ever had a false alarm whenever I got a page it was legitimate something",
    "start": "508320",
    "end": "513510"
  },
  {
    "text": "was going on and secondly there was never anything that happened in our data centers that I didn't know about it",
    "start": "513510",
    "end": "521039"
  },
  {
    "text": "first so every time a developer or somebody complained it was it was almost always",
    "start": "521040",
    "end": "527040"
  },
  {
    "text": "that DB load that this is a fantastic metric to alarm on it to watch to know when something's going wrong in your",
    "start": "527040",
    "end": "533280"
  },
  {
    "text": "system performance-wise because when things start to get slow what almost always",
    "start": "533280",
    "end": "538600"
  },
  {
    "text": "happens is you start seeing the number of connections go up and you start",
    "start": "538600",
    "end": "544060"
  },
  {
    "text": "seeing applications do more and what ends up happening is a number of active sessions climbs invariably",
    "start": "544060",
    "end": "549100"
  },
  {
    "text": "and the great thing about this DB load metric is that um so the other thing",
    "start": "549100",
    "end": "556720"
  },
  {
    "text": "that people usually think of a cpu like I'll put an alarm on my CPU and that catches some problems but it there's a",
    "start": "556720",
    "end": "562480"
  },
  {
    "text": "lot of problems that won't catch basically anytime you're off the CPU waiting for a disk waiting for a lock",
    "start": "562480",
    "end": "568329"
  },
  {
    "text": "this DB load metric is great because it catches a lot of stuff and then last but",
    "start": "568329",
    "end": "575769"
  },
  {
    "text": "not least is custom monitoring and basically the point here and this is",
    "start": "575769",
    "end": "580870"
  },
  {
    "start": "576000",
    "end": "771000"
  },
  {
    "text": "this is actually I think really important the point here is we have",
    "start": "580870",
    "end": "588939"
  },
  {
    "text": "really good tools we're continually working to make our tools better that we give to customers so that you guys are",
    "start": "588939",
    "end": "594129"
  },
  {
    "text": "able to work with customers and recommend to them at the same time like",
    "start": "594129",
    "end": "600910"
  },
  {
    "text": "we're running real production workloads on these databases and I even like there",
    "start": "600910",
    "end": "606610"
  },
  {
    "text": "are some awesome things that the performance insights team is going to have out like this year but you can't",
    "start": "606610",
    "end": "612759"
  },
  {
    "text": "you just can't wait when you're running a real production system you need that you know you need this data now and you",
    "start": "612759",
    "end": "618009"
  },
  {
    "text": "need to just you so there's a couple of things I would point out that sort of I continually find myself telling people",
    "start": "618009",
    "end": "624279"
  },
  {
    "text": "that you should have that I'm sure will be provided eventually but just don't you can't wait one of the biggest things",
    "start": "624279",
    "end": "630730"
  },
  {
    "text": "is like getting regular snapshots of performance data inside of your Postgres database just somehow there's a lot of",
    "start": "630730",
    "end": "636670"
  },
  {
    "text": "different approaches ways you can do this there are even sort of third-party tools as well or you can do it yourself I've",
    "start": "636670",
    "end": "642910"
  },
  {
    "text": "seen people take a lot of different approaches but like for a real simple example is just sequel statement",
    "start": "642910",
    "end": "649029"
  },
  {
    "text": "statistics and I remember just yesterday pointing somebody toward this when they asked a question about how to do some",
    "start": "649029",
    "end": "654579"
  },
  {
    "text": "troubleshooting on one of their systems is that we Postgres can keep sequel",
    "start": "654579",
    "end": "661629"
  },
  {
    "text": "statements statistics so for each sequel statement that it sees it can tell you how many times has a sequel stay",
    "start": "661629",
    "end": "667900"
  },
  {
    "text": "have been executed how much IO is that see individual sequel statement doing",
    "start": "667900",
    "end": "673650"
  },
  {
    "text": "how much time is that sequel statement taking to run so you know I executed it",
    "start": "673650",
    "end": "679000"
  },
  {
    "text": "but it run in one second or did it run in 20 seconds or did it run in ten minutes it captures all that information in",
    "start": "679000",
    "end": "687430"
  },
  {
    "text": "order for you to make use of that for it to really be useful what you need to do",
    "start": "687430",
    "end": "694540"
  },
  {
    "text": "is so what Postgres tells you is just sort of the totals they're counters they just increment over time so it'll tell",
    "start": "694540",
    "end": "700660"
  },
  {
    "text": "you the total sense of the database started up how many times is a sequel statement run what you really need to",
    "start": "700660",
    "end": "707110"
  },
  {
    "text": "know is what was going on at 2:00 o'clock yesterday afternoon when the whole system like spiked and things went",
    "start": "707110",
    "end": "713650"
  },
  {
    "text": "crazy and I had an application incident in order to know what happened at 2:00 o'clock yesterday afternoon",
    "start": "713650",
    "end": "718660"
  },
  {
    "text": "you need the snapshot from 1:45 and the snapshot from 2:15 so you can just do a little bit of math and subtract the",
    "start": "718660",
    "end": "724720"
  },
  {
    "text": "numbers and you can see which sequel statement was the one between 1:45 and",
    "start": "724720",
    "end": "730240"
  },
  {
    "text": "2:15 that's shot through the roof that's one example but there's a there's a plethora of statistics that are inside",
    "start": "730240",
    "end": "737530"
  },
  {
    "text": "of Postgres that are worth capturing and are worth hanging on to so this is in our happiness hints and this is",
    "start": "737530",
    "end": "743860"
  },
  {
    "text": "something that I'm getting bolder and bolder about telling you just sort of just coming right out and saying this to",
    "start": "743860",
    "end": "751390"
  },
  {
    "text": "people over time to like look you just you should just be capturing this information especially the sequel",
    "start": "751390",
    "end": "757270"
  },
  {
    "text": "statement stats are really useful so that that kind of leads into one thing",
    "start": "757270",
    "end": "764440"
  },
  {
    "text": "that's worth kind of taking a moment's on just because it comes up so often",
    "start": "764440",
    "end": "770590"
  },
  {
    "text": "which is kind of in sort of Oracle",
    "start": "770590",
    "end": "776860"
  },
  {
    "text": "parlance or Oracle terminology there's these two sort of very closely connected",
    "start": "776860",
    "end": "782440"
  },
  {
    "text": "ideas of an a WR and an a SH are you guys familiar with these ideas you are",
    "start": "782440",
    "end": "787690"
  },
  {
    "text": "you aren't so a little-bitty yes a little bit uh no",
    "start": "787690",
    "end": "792540"
  },
  {
    "text": "okay so it's basically they're very closely related",
    "start": "794540",
    "end": "800480"
  },
  {
    "text": "the awr is kind of what I was just describing a moment ago of capturing",
    "start": "800480",
    "end": "807530"
  },
  {
    "text": "well fundamentally at the bottom layers capturing data and it Oracle has a",
    "start": "807530",
    "end": "813020"
  },
  {
    "text": "similar concept there's these metrics which are just counters that increment and they capture a snapshot I think the",
    "start": "813020",
    "end": "818870"
  },
  {
    "text": "default is every 15 minutes if I remember correctly but I'll double check that but it grabs those snapshots in the",
    "start": "818870",
    "end": "826970"
  },
  {
    "text": "and then they have some canned reports that come out on top of that some really useful reports the a sh is a similar",
    "start": "826970",
    "end": "834470"
  },
  {
    "text": "idea but the act at stands for active session history and that's specifically looking at sort of Oracle's equivalent",
    "start": "834470",
    "end": "841070"
  },
  {
    "text": "of PG stat activity and that samples at a high frequency once a second so that",
    "start": "841070",
    "end": "849400"
  },
  {
    "text": "ends up that's that ends up being very useful for a couple of other reasons it's a really common question that I",
    "start": "849400",
    "end": "855380"
  },
  {
    "text": "hear people asking just how do I get this there are multiple efforts that",
    "start": "855380",
    "end": "862190"
  },
  {
    "text": "people have made and I also know lots of people that have gone and done their own thing but it's worth sort of taking a",
    "start": "862190",
    "end": "867260"
  },
  {
    "text": "moment on a slide just to point you towards some of the the names that I keep hearing about a lot so I absolutely",
    "start": "867260",
    "end": "873590"
  },
  {
    "text": "think this is a very good question in the right direction to be thinking I",
    "start": "873590",
    "end": "878930"
  },
  {
    "text": "spent many years working very deeply with Oracle and these are essential tools when you're maintaining and",
    "start": "878930",
    "end": "886100"
  },
  {
    "text": "running a database like you just you need that data you need that tactical intelligence about what's happening inside of it and that's these are",
    "start": "886100",
    "end": "893120"
  },
  {
    "text": "probably I would say the two most important tools and in anybody's - about who has worked with Oracle so you should",
    "start": "893120",
    "end": "900470"
  },
  {
    "text": "be asking how do I get this in Postgres the I don't think that the sort of",
    "start": "900470",
    "end": "905960"
  },
  {
    "text": "Postgres world at large has coalesced yet around sort of a preferred approach",
    "start": "905960",
    "end": "911630"
  },
  {
    "text": "to this so there's still a number of people working on it three of them that",
    "start": "911630",
    "end": "917240"
  },
  {
    "text": "I listed here are the Postgres workload analyzer PG stats info so people powa",
    "start": "917240",
    "end": "924740"
  },
  {
    "text": "is kind of an open source project that my observation would be there seems to be a a good bit of a",
    "start": "924740",
    "end": "931790"
  },
  {
    "text": "community around that and I seems like I see things happening there quite a bit PG stats info comes out of NTT in Japan",
    "start": "931790",
    "end": "939260"
  },
  {
    "text": "they do some really good work it's not as transparent it's not so much like an",
    "start": "939260",
    "end": "945290"
  },
  {
    "text": "open source community driven thing it's more that there are a Development Center you know think of them like HP or Adele",
    "start": "945290",
    "end": "951830"
  },
  {
    "text": "who just does a bunch of work build something really awesome and then just publishes the code and that's what they've done they've just kind of",
    "start": "951830",
    "end": "957500"
  },
  {
    "text": "published it it's a permissive license you could take it and use it but it's not so much that like they're looking for people to submit patches or anything",
    "start": "957500",
    "end": "963620"
  },
  {
    "text": "like that they're just publishing some really good work they did PG Sentinel is",
    "start": "963620",
    "end": "968690"
  },
  {
    "text": "another really cool product that's developing quickly some folks in Europe with them coming from sort of an Oracle",
    "start": "968690",
    "end": "976220"
  },
  {
    "text": "background going deep on Postgres and sort of bringing that perspective to it",
    "start": "976220",
    "end": "982670"
  },
  {
    "text": "this is this by the way on the bottom here is what the report looks like out of poet is to kind of give you an",
    "start": "982670",
    "end": "988040"
  },
  {
    "text": "example it's like this is one section of it but it's just listing the top queries and it's telling you you can you can see",
    "start": "988040",
    "end": "994610"
  },
  {
    "text": "that you can sort by execution time by the i/o time by how much how many blocks",
    "start": "994610",
    "end": "999860"
  },
  {
    "text": "were accessed by these queries over on the right is an example of the stats info report and one of the nice things",
    "start": "999860",
    "end": "1007930"
  },
  {
    "text": "about stats suppose that they've actually taken the time not only to build the data collector but also to build a canned report their canned",
    "start": "1007930",
    "end": "1013540"
  },
  {
    "text": "report you know that's if you've seen it at awr report that's what the top of a",
    "start": "1013540",
    "end": "1018880"
  },
  {
    "text": "native your report looks like there's like there's a summary of the system then there's a workload summary right at",
    "start": "1018880",
    "end": "1024010"
  },
  {
    "text": "the top which is like their database that shows you like the commits you know average commits rate the log generation",
    "start": "1024010",
    "end": "1030189"
  },
  {
    "text": "rate I think sort of some high-level stats and then it drills down from there and they take a similar approach so",
    "start": "1030190",
    "end": "1037959"
  },
  {
    "text": "that's a bit about the awr in the ash",
    "start": "1037959",
    "end": "1041459"
  },
  {
    "text": "alright that was my high level sort of spiel on specifically Mont well",
    "start": "1044079",
    "end": "1050210"
  },
  {
    "text": "monitoring an RDS specifically and then sort of at the end here kind of stepping back and looking at a particular use",
    "start": "1050210",
    "end": "1055850"
  },
  {
    "text": "case in Postgres what I'm gonna do next is just quickly hit on to just sort of",
    "start": "1055850",
    "end": "1064250"
  },
  {
    "text": "two quick hit topics and then I'm gonna take sort of a short break and then dive into what I think is the most important",
    "start": "1064250",
    "end": "1071870"
  },
  {
    "text": "thing for the remaining time so my two quick hit topics first one super fast but I just I didn't want to",
    "start": "1071870",
    "end": "1078980"
  },
  {
    "text": "skip this because it's just too important of a thing to mention which is explicit locking so there's two kinds of",
    "start": "1078980",
    "end": "1085730"
  },
  {
    "start": "1082000",
    "end": "1256000"
  },
  {
    "text": "locking and Postgres you have sort of a locking that's very low level think of",
    "start": "1085730",
    "end": "1092300"
  },
  {
    "text": "this like sort of like semaphores or like like a linux kernel has locks in Postgres those are called lightweight",
    "start": "1092300",
    "end": "1098150"
  },
  {
    "text": "locks and there are things that are used for concurrency control inside of the engine and they're never held for a long",
    "start": "1098150",
    "end": "1103910"
  },
  {
    "text": "time but for example protecting a bit of shared memory so that you don't have",
    "start": "1103910",
    "end": "1109100"
  },
  {
    "text": "multiple processes somebody like reading it while somebody else is writing it you",
    "start": "1109100",
    "end": "1114920"
  },
  {
    "text": "know if you have shared memory you have to have concurrency control around multiple processes accessing the same",
    "start": "1114920",
    "end": "1120200"
  },
  {
    "text": "things those are lightweight locks that's not this the other thing that you",
    "start": "1120200",
    "end": "1125450"
  },
  {
    "text": "have is sometimes I've in in the Postgres documentation I've seen them",
    "start": "1125450",
    "end": "1130550"
  },
  {
    "text": "referred to as heavyweight locks I've also heard people say transaction locks or sequel locks but it's kind of more of",
    "start": "1130550",
    "end": "1137510"
  },
  {
    "text": "a an application-level locking type of a thing and this is like when you update a",
    "start": "1137510",
    "end": "1145670"
  },
  {
    "text": "row okay that row you would take a lock",
    "start": "1145670",
    "end": "1151640"
  },
  {
    "text": "on that row and that's the right thing that's actually what you want I always",
    "start": "1151640",
    "end": "1156860"
  },
  {
    "text": "feel like I have to point that out now because sometimes with some of the dialogue around massively parallel",
    "start": "1156860",
    "end": "1163640"
  },
  {
    "text": "systems and sort of no sequel in different storage models sometimes we",
    "start": "1163640",
    "end": "1170000"
  },
  {
    "text": "get an idea that like just locking is always bad or something to be avoided but",
    "start": "1170000",
    "end": "1176960"
  },
  {
    "text": "if you have so I mean just to give a really simple example if I just have like I have I have a value three all",
    "start": "1176960",
    "end": "1184460"
  },
  {
    "text": "right and I want to add one to it okay so I what I have a I want to say",
    "start": "1184460",
    "end": "1189880"
  },
  {
    "text": "increment that by one all right and then I have somebody else and he wants to",
    "start": "1189880",
    "end": "1195830"
  },
  {
    "text": "increment it by 1 at the same time well the first guy he increments it from 3 to 4 but until he commits you don't know",
    "start": "1195830",
    "end": "1204940"
  },
  {
    "text": "right is he going to abort or is he gonna commit is he gonna crash or is he gonna succeed is there gonna be some",
    "start": "1204940",
    "end": "1211310"
  },
  {
    "text": "failure in this process so the other guy like what should he do so he wants to",
    "start": "1211310",
    "end": "1216770"
  },
  {
    "text": "increment the value 2 should he store a 5 you know because it was incremented a",
    "start": "1216770",
    "end": "1222170"
  },
  {
    "text": "4 or should he store a 4 but then the first guy is gonna store a 4 right you can like basically you can start losing",
    "start": "1222170",
    "end": "1228650"
  },
  {
    "text": "data if you don't you know if two people are modifying the same thing you don't",
    "start": "1228650",
    "end": "1233750"
  },
  {
    "text": "want those to happen the same time like what you actually want to happen for exactly the same value is you want those",
    "start": "1233750",
    "end": "1240200"
  },
  {
    "text": "to happen in order you don't want it to get confused and lose the data so that's",
    "start": "1240200",
    "end": "1245660"
  },
  {
    "text": "that's what like locking was invented for and that's like the right use case for locking and that's that's what this",
    "start": "1245660",
    "end": "1253760"
  },
  {
    "text": "is about explicit locking so Postgres I'm my goal here is just to point you in",
    "start": "1253760",
    "end": "1261410"
  },
  {
    "start": "1256000",
    "end": "1547000"
  },
  {
    "text": "the right direction so that you can find what you need to know when you need to find it in Postgres you've got 7",
    "start": "1261410",
    "end": "1267830"
  },
  {
    "text": "different types of locks that can happen on a table and four different types of locks that can happen on a row so",
    "start": "1267830",
    "end": "1274340"
  },
  {
    "text": "locking can happen at a table level and it happens at a row level when we did",
    "start": "1274340",
    "end": "1282350"
  },
  {
    "text": "the sort of introductory architecture thing one of the things that we said is that writers never block readers and",
    "start": "1282350",
    "end": "1287480"
  },
  {
    "text": "readers never block writers that is true mostly well and you said in the context",
    "start": "1287480",
    "end": "1294710"
  },
  {
    "text": "of DML and that is true entirely that's right that was qualified it was qualified correctly so in the",
    "start": "1294710",
    "end": "1300530"
  },
  {
    "text": "context of DML writers never block",
    "start": "1300530",
    "end": "1306980"
  },
  {
    "text": "readers readers never block writers DML if you're not familiar with the Akron for data manipulation language it just",
    "start": "1306980",
    "end": "1314059"
  },
  {
    "text": "means inserts updates and deletes that's that's what that's what that means",
    "start": "1314059",
    "end": "1319280"
  },
  {
    "text": "and we use the acronym DD l for data definition language for all the things",
    "start": "1319280",
    "end": "1324830"
  },
  {
    "text": "like creating tables and dropping tables things that like change your schema if you're not familiar with the sequel",
    "start": "1324830",
    "end": "1331160"
  },
  {
    "text": "lingo it's worth pointing that out so we have seven different ways of locking tables all right then there's four ways",
    "start": "1331160",
    "end": "1337790"
  },
  {
    "text": "of locking rows and the place to go is there's a chapter in the Postgres Docs",
    "start": "1337790",
    "end": "1343340"
  },
  {
    "text": "called explicit locking and when you just when you someday when you're in a",
    "start": "1343340",
    "end": "1349610"
  },
  {
    "text": "situation where you need to learn a bit about locking this is the place to go I so it's chapter thirteen point two in",
    "start": "1349610",
    "end": "1356360"
  },
  {
    "text": "the current version eleven dr. numbers change sometimes over major versions",
    "start": "1356360",
    "end": "1362059"
  },
  {
    "text": "when they add new chapters and I have found that it's never obvious to me",
    "start": "1362059",
    "end": "1368179"
  },
  {
    "text": "where this is and from the table of contents so I'll just tell you I usually",
    "start": "1368179",
    "end": "1373850"
  },
  {
    "text": "just type in explicit locking in the search bar and that's how I find it quickly it's it's not tied to a sequel",
    "start": "1373850",
    "end": "1379700"
  },
  {
    "text": "command or anything like that but there's a particular page called explicit locking this is this is a",
    "start": "1379700",
    "end": "1385250"
  },
  {
    "text": "screenshot from that page and you'll see this kind of a matrix of which lock modes conflict now the one other really",
    "start": "1385250",
    "end": "1391549"
  },
  {
    "text": "great thing that they do is with these seven ways that you can lock a table the Postgres documentation which is",
    "start": "1391549",
    "end": "1397370"
  },
  {
    "text": "fantastic actually walks through each one of those and tells you exactly which",
    "start": "1397370",
    "end": "1402799"
  },
  {
    "text": "sequel statements use that locking mode and I want to highlight just one because",
    "start": "1402799",
    "end": "1411230"
  },
  {
    "text": "it's very important and that is there's the locking mode back here called access exclusive it's at the very bottom and",
    "start": "1411230",
    "end": "1417260"
  },
  {
    "text": "you'll notice that access exclusive conflicts with every other lock mode so",
    "start": "1417260",
    "end": "1422390"
  },
  {
    "text": "what that means if it conflicts that means that like so if somebody one person wants to get a table in exclusive",
    "start": "1422390",
    "end": "1430250"
  },
  {
    "text": "mode and somebody else is trying to lock the table in the access share mode they both can get the lock that's not a",
    "start": "1430250",
    "end": "1437090"
  },
  {
    "text": "conflict so they both can have a lock at the same time however if if somebody has",
    "start": "1437090",
    "end": "1442250"
  },
  {
    "text": "an exclusive lock on the table they want a Roche airlock there's a conflict so they will have to avail 2q",
    "start": "1442250",
    "end": "1448700"
  },
  {
    "text": "they'll have to wait so they just they just sort of they queue up anyway and whatever the operation is will pause and",
    "start": "1448700",
    "end": "1456610"
  },
  {
    "text": "once the operation with the exclusive lock finishes and that Trent and another",
    "start": "1456610",
    "end": "1463400"
  },
  {
    "text": "important thing by the way these are trend these are transaction level locks so when you lock something you either",
    "start": "1463400",
    "end": "1469220"
  },
  {
    "text": "have to explicitly release the lock I think I think at when then for sure if",
    "start": "1469220",
    "end": "1476120"
  },
  {
    "text": "you commit or rollback the transaction that will release your locks they often operate at a transaction level maybe",
    "start": "1476120",
    "end": "1482240"
  },
  {
    "text": "always I but I'm not sure on that I should double-check that before I say it on a video so that's what the conflicts",
    "start": "1482240",
    "end": "1492140"
  },
  {
    "text": "that's what the exes mean it looks kind of like a line it's not exactly a line you'll see there's kind of some weird",
    "start": "1492140",
    "end": "1497840"
  },
  {
    "text": "jumps and there's a hole in the middle share locks can be are not share lock",
    "start": "1497840",
    "end": "1503570"
  },
  {
    "text": "does not conflict with a share lock so it all kind of makes sense and this has all been carefully thought out to",
    "start": "1503570",
    "end": "1510169"
  },
  {
    "text": "basically get as much concurrency as possible in the database it's um the reason you have seven different lock",
    "start": "1510169",
    "end": "1516799"
  },
  {
    "text": "modes is that it allows us actually a ton of flexibility to let a lot of",
    "start": "1516799",
    "end": "1522260"
  },
  {
    "text": "things happen without having had needing to wait for other people but then there are certain things where you do need to",
    "start": "1522260",
    "end": "1528650"
  },
  {
    "text": "wait like you know I mean the example of",
    "start": "1528650",
    "end": "1534260"
  },
  {
    "text": "you know the modifying the same exact value like that's by design that'll never change if two people want to",
    "start": "1534260",
    "end": "1541010"
  },
  {
    "text": "change the same number they're always you're always going to want those to go one after the other so the one access",
    "start": "1541010",
    "end": "1548600"
  },
  {
    "start": "1547000",
    "end": "1644000"
  },
  {
    "text": "exclusive lock this is the guy who blocks everybody and this is the one exception to the readers and writers",
    "start": "1548600",
    "end": "1554240"
  },
  {
    "text": "will and they even call it out in a tip only an access exclusive lock blocks a",
    "start": "1554240",
    "end": "1559520"
  },
  {
    "text": "select so that has massive implications right if you do an operation that needs",
    "start": "1559520",
    "end": "1567080"
  },
  {
    "text": "this lock mode it will stop everything on your database everything and they",
    "start": "1567080",
    "end": "1574250"
  },
  {
    "text": "list out a couple of these okay so some of these are obvious some of these are not really problems",
    "start": "1574250",
    "end": "1579620"
  },
  {
    "text": "per se drop table I mean like okay if you're dropping the tables probably",
    "start": "1579620",
    "end": "1586460"
  },
  {
    "text": "nobody should be running selects on it anyway so fine but the ones to look out for and the one",
    "start": "1586460",
    "end": "1592250"
  },
  {
    "text": "to really look out for is this little sentence many forms of altar table but they don't actually tell you all the",
    "start": "1592250",
    "end": "1598280"
  },
  {
    "text": "ones if you ever look at the documentation for altar tables like altar table and there's like 50 different things you can put after altar",
    "start": "1598280",
    "end": "1604670"
  },
  {
    "text": "table and what they're saying here is that some of those things require an access exclusive lock others don't",
    "start": "1604670",
    "end": "1611660"
  },
  {
    "text": "so and another thing kind of overtime Postgres has continually worked to",
    "start": "1611660",
    "end": "1617270"
  },
  {
    "text": "whittle this down another thing you'll see like the reindex command uses an access exclusive lock this is one of the",
    "start": "1617270",
    "end": "1625250"
  },
  {
    "text": "reasons we talked about using create index concurrently because that is the alternative way to get a new index or to",
    "start": "1625250",
    "end": "1630770"
  },
  {
    "text": "rebuild to replace an index that has an issue without needing this level of locking so when you bump into something",
    "start": "1630770",
    "end": "1639350"
  },
  {
    "text": "go find this section of the Postgres documentation it's it's well-written it'll get you through this came up",
    "start": "1639350",
    "end": "1646100"
  },
  {
    "start": "1644000",
    "end": "1695000"
  },
  {
    "text": "yesterday and we were I realized that it was an important enough topic to",
    "start": "1646100",
    "end": "1653420"
  },
  {
    "text": "actually pull some stuff out that I was planning to talk about today and replace it with this it's the idea of reusing",
    "start": "1653420",
    "end": "1661100"
  },
  {
    "text": "execution plans also yeah I'm still",
    "start": "1661100",
    "end": "1667880"
  },
  {
    "text": "wrapping my brain around this a little bit I went back last night after the conversation we had yesterday and kind",
    "start": "1667880",
    "end": "1674120"
  },
  {
    "text": "of got a refresher on some of this and realized that about two or three of the things I said were completely inaccurate so I also want to correct that as well",
    "start": "1674120",
    "end": "1681020"
  },
  {
    "text": "but it's this is a really important topic now first of all I'm just gonna",
    "start": "1681020",
    "end": "1689060"
  },
  {
    "text": "I'm gonna start by telling you where to go or where I went and what seems to be the best starting point for figuring",
    "start": "1689060",
    "end": "1694940"
  },
  {
    "text": "this out and that's the prepare command the documentation for so I will always",
    "start": "1694940",
    "end": "1700130"
  },
  {
    "start": "1695000",
    "end": "1778000"
  },
  {
    "text": "send you the Postgres documentation the Postgres Doc's are very well-written they're very good one kind of unique",
    "start": "1700130",
    "end": "1705920"
  },
  {
    "text": "thing about Postgres that i haven't seen in many other open source projects is that the documentation",
    "start": "1705920",
    "end": "1711770"
  },
  {
    "text": "as as part of the source code so it's it's checked in to the source code",
    "start": "1711770",
    "end": "1717350"
  },
  {
    "text": "repository the same people that maintain commits for the database source are the",
    "start": "1717350",
    "end": "1722600"
  },
  {
    "text": "same people that also have to either accept or reject the patches and the",
    "start": "1722600",
    "end": "1728000"
  },
  {
    "text": "commits for the documentation and the in Postgres the Postgres development community is",
    "start": "1728000",
    "end": "1734780"
  },
  {
    "text": "very rigorous when it comes to what you'll see both commenting the source code following like having clean",
    "start": "1734780",
    "end": "1741230"
  },
  {
    "text": "readable following a certain format with their source code as well as making sure that this documentation is accurate and",
    "start": "1741230",
    "end": "1748070"
  },
  {
    "text": "stays up to date I mean you'll see a patch come in and then you'll see the",
    "start": "1748070",
    "end": "1753740"
  },
  {
    "text": "docs have to be updated before this patch can even go into the source code and be committed like the passion is to include the doc update along with the",
    "start": "1753740",
    "end": "1760220"
  },
  {
    "text": "code update so the docs are good and I and I point people to the docs",
    "start": "1760220",
    "end": "1765230"
  },
  {
    "text": "frequently so this is where to go and this is this is where I started this is",
    "start": "1765230",
    "end": "1771470"
  },
  {
    "text": "the best starting point but let me let me just sort of walk through what I've",
    "start": "1771470",
    "end": "1776660"
  },
  {
    "text": "learned so far first of all I'm gonna revisit something we introduced",
    "start": "1776660",
    "end": "1781970"
  },
  {
    "start": "1778000",
    "end": "1857000"
  },
  {
    "text": "yesterday this is the talking about what happens between your application or your",
    "start": "1781970",
    "end": "1788510"
  },
  {
    "text": "client and the database and we kind of introduced this thing yesterday right that we have you have your client",
    "start": "1788510",
    "end": "1795110"
  },
  {
    "text": "applications there's your clients are talking to the database and there's a lot of different kinds of clients it's",
    "start": "1795110",
    "end": "1800720"
  },
  {
    "text": "kind of what I wanted to catch here that we have Java stuff that maybe uses JDBC which speaks to Limpy cue wire protocol",
    "start": "1800720",
    "end": "1807380"
  },
  {
    "text": "talks directly database you have things like the piece equal command line program or Perl Python whatever that use",
    "start": "1807380",
    "end": "1814580"
  },
  {
    "text": "the Lib PQ library you know another thing that wasn't on this picture but I",
    "start": "1814580",
    "end": "1821270"
  },
  {
    "text": "wanted to point out is that you also have n database languages as well so",
    "start": "1821270",
    "end": "1826910"
  },
  {
    "text": "things like PL PG SQL Perl some other things tickle is in there there's a",
    "start": "1826910",
    "end": "1833179"
  },
  {
    "text": "number of languages that can run inside of a Postgres database as procedural languages and they also need well for",
    "start": "1833179",
    "end": "1841550"
  },
  {
    "text": "what we're about to talk about they have a database connection as well what are these clients doing right",
    "start": "1841550",
    "end": "1848730"
  },
  {
    "text": "what's what's we have this little arrow between the clients and the database well what is that arrow let me zoom in",
    "start": "1848730",
    "end": "1854520"
  },
  {
    "text": "on that arrow sort of borrowing another slide for boost mom gin that arrow is",
    "start": "1854520",
    "end": "1860149"
  },
  {
    "text": "clients are sending queries right and then the database server is sending results back like largely largely that's",
    "start": "1860149",
    "end": "1868770"
  },
  {
    "text": "what we're talking about we're talking about sending sequel statements sending sequel queries and results going back",
    "start": "1868770",
    "end": "1876270"
  },
  {
    "text": "and forth and what's the database server doing with these queries that it",
    "start": "1876270",
    "end": "1881700"
  },
  {
    "text": "receives again we kind of introduced all this yesterday so I'm just this is just a memory refresher excuse me",
    "start": "1881700",
    "end": "1889799"
  },
  {
    "start": "1887000",
    "end": "1906000"
  },
  {
    "text": "but what the database is doing is it has to follow a number of steps in order to",
    "start": "1889799",
    "end": "1895289"
  },
  {
    "text": "process that query and then send the result back that this is how Bruce",
    "start": "1895289",
    "end": "1902429"
  },
  {
    "text": "visualized it here's how I would visualize it kind of putting it a different way and this is you'll pick",
    "start": "1902429",
    "end": "1909299"
  },
  {
    "start": "1906000",
    "end": "2094000"
  },
  {
    "text": "this up from that parse page in the docs to that there are basically five steps that the database has to go through to",
    "start": "1909299",
    "end": "1916169"
  },
  {
    "text": "process the queries and send the results back so it has to parse it analyze it there's a rewrite step we talked about",
    "start": "1916169",
    "end": "1922760"
  },
  {
    "text": "then it plans and then it executes the query and when we talk about reusing",
    "start": "1922760",
    "end": "1930779"
  },
  {
    "text": "execution plans the thing that we're all concerned about is that planned step and the reason that that matters is because",
    "start": "1930779",
    "end": "1940159"
  },
  {
    "text": "the parse analyze and rewrite tends to",
    "start": "1940159",
    "end": "1945570"
  },
  {
    "text": "go pretty quick is pretty easy to store this is this is kind of tricky it first",
    "start": "1945570",
    "end": "1950669"
  },
  {
    "text": "of all planning sometimes can can take a",
    "start": "1950669",
    "end": "1956490"
  },
  {
    "text": "long time when I say a long time this is relative if you have a sequel statement",
    "start": "1956490",
    "end": "1963360"
  },
  {
    "text": "that's executing that runs very quick like just a single key lookup based on an index into a table that thing might",
    "start": "1963360",
    "end": "1970380"
  },
  {
    "text": "run in like a millisecond right and if you're running that millions of times",
    "start": "1970380",
    "end": "1975630"
  },
  {
    "text": "like just select select select over and over again millisecond millisecond planning could",
    "start": "1975630",
    "end": "1982750"
  },
  {
    "text": "also take a millisecond right so when you have a situation where you have a",
    "start": "1982750",
    "end": "1988330"
  },
  {
    "text": "sequel statement that runs for a very short duration at a high frequency this",
    "start": "1988330",
    "end": "1994210"
  },
  {
    "text": "plan time suddenly becomes a very large percentage of of what that your system",
    "start": "1994210",
    "end": "2001410"
  },
  {
    "text": "is doing like if you were to profile your system profile your database and operating system and look at what it was",
    "start": "2001410",
    "end": "2008220"
  },
  {
    "text": "doing you'd see oh my goodness like half of the CPU is planning on that kind of a",
    "start": "2008220",
    "end": "2013230"
  },
  {
    "text": "box and the thing is that like when",
    "start": "2013230",
    "end": "2018390"
  },
  {
    "text": "you're doing that there's no need right that you're you can't you do need to",
    "start": "2018390",
    "end": "2024390"
  },
  {
    "text": "execute over and over again because I may be running with primary key number five and then I'm pulling the record for",
    "start": "2024390",
    "end": "2029970"
  },
  {
    "text": "primary key 20 and then I'm pulling the record for primary key 2001 but but the",
    "start": "2029970",
    "end": "2035310"
  },
  {
    "text": "plans not changing it's the same plan every time so like why why do we need to always go through that step of planning",
    "start": "2035310",
    "end": "2042300"
  },
  {
    "text": "so every database deals with this right this is and this is something you know",
    "start": "2042300",
    "end": "2049950"
  },
  {
    "text": "it's certainly like in my years working with Oracle that was very important there to sort of pay attention from a performance perspective of an Oracle we",
    "start": "2049950",
    "end": "2057870"
  },
  {
    "text": "we talked about hard parses and soft parses there's a section of memory called a shared pool that stores cached",
    "start": "2057870",
    "end": "2063030"
  },
  {
    "text": "plans and tries to reuse them there's a lot of sophistication around that Postgres also does absolutely does have",
    "start": "2063030",
    "end": "2070830"
  },
  {
    "text": "the ability to try to get you in a place so you don't have to do all that planning but it works very differently",
    "start": "2070830",
    "end": "2078530"
  },
  {
    "text": "from other databases and it's a that's why it's really important for me to just take a moment and kind of walk through",
    "start": "2078530",
    "end": "2084360"
  },
  {
    "text": "how it works in Postgres now in Postgres",
    "start": "2084360",
    "end": "2089490"
  },
  {
    "text": "it is done at sort of the server side so just real quickly I'm going back here",
    "start": "2089490",
    "end": "2096409"
  },
  {
    "start": "2094000",
    "end": "2119000"
  },
  {
    "text": "and this was something that I was mistaken about in the past and I kind of realized that I had it wrong but the the",
    "start": "2096410",
    "end": "2105390"
  },
  {
    "text": "optimization to to to be able to snot plan and just do execution",
    "start": "2105390",
    "end": "2111510"
  },
  {
    "text": "that happens in the database not outside of the database so it's in the database",
    "start": "2111510",
    "end": "2117540"
  },
  {
    "text": "and and where exactly is it happening so this is where oops sorry with Postgres so I'm gonna dig right",
    "start": "2117540",
    "end": "2125550"
  },
  {
    "start": "2119000",
    "end": "2300000"
  },
  {
    "text": "into the details of how it works first of all it only Postgres only does this",
    "start": "2125550",
    "end": "2131190"
  },
  {
    "text": "with prepared statements there's another name for prepared statements I've heard",
    "start": "2131190",
    "end": "2136500"
  },
  {
    "text": "people call them I can't remember what it was but a prepared statement is and I",
    "start": "2136500",
    "end": "2142020"
  },
  {
    "text": "know I've done them in Java they're actually called prepared statement um basically what you do is you have",
    "start": "2142020",
    "end": "2147510"
  },
  {
    "text": "variables um parameterised sometimes people call them but you you have a sequel statement and then you put these sort of",
    "start": "2147510",
    "end": "2153330"
  },
  {
    "text": "placeholders in the sequel statement and then what you can do is have you can",
    "start": "2153330",
    "end": "2158490"
  },
  {
    "text": "pass that sequel to the database engine and say parse this and then get a handle okay and that handle comes back and then",
    "start": "2158490",
    "end": "2165150"
  },
  {
    "text": "you make a separate call to say now execute it and you pass some values in to put into the variables and it'll just",
    "start": "2165150",
    "end": "2170340"
  },
  {
    "text": "execute it with those variables and then you can say execute again it'll execute again with different variable values",
    "start": "2170340",
    "end": "2175770"
  },
  {
    "text": "that's a prepared statement now in some other database engines they've come up",
    "start": "2175770",
    "end": "2182609"
  },
  {
    "text": "with ways to be able to reuse execution plans even when you're not doing compare statements in Postgres you will only be",
    "start": "2182609",
    "end": "2189660"
  },
  {
    "text": "able to reuse your execution plans if you're using a prepared statement and furthermore like you can start reusing",
    "start": "2189660",
    "end": "2196260"
  },
  {
    "text": "execution plans but if the way a prepared statement works is you prepare it and then you can execute as many",
    "start": "2196260",
    "end": "2201690"
  },
  {
    "text": "times as you want and then when you're finished you can deallocate it and that frees the handle and frees the memory",
    "start": "2201690",
    "end": "2208740"
  },
  {
    "text": "back on the server that you're connected to if you d allocate it and then you prepare the exact same sequel statement",
    "start": "2208740",
    "end": "2215220"
  },
  {
    "text": "again you don't continue with the plan reuse you kind of just start over from square",
    "start": "2215220",
    "end": "2220950"
  },
  {
    "text": "one you can get there again but you sort of like lose it so you have a prepared",
    "start": "2220950",
    "end": "2227520"
  },
  {
    "text": "statement you can't D allocate it and then here's kind of the way it works there's - there's a branch here if you",
    "start": "2227520",
    "end": "2234900"
  },
  {
    "text": "can do a prepared statement with no variables that's fine too it's just going to be it's going to take like two",
    "start": "2234900",
    "end": "2240090"
  },
  {
    "text": "calls instead of one to run your sequel because you can run it with a single call or you can say prepare X so cute okay if you don't have",
    "start": "2240090",
    "end": "2248430"
  },
  {
    "text": "parameters Postgres will immediately be like oh this is a prepared statement and just Postgres is smart enough at that",
    "start": "2248430",
    "end": "2254790"
  },
  {
    "text": "point that it will it will go all the way to the planning phase and it creates",
    "start": "2254790",
    "end": "2261390"
  },
  {
    "text": "something that is called a generic generic plan that's important terminology in Postgres you have generic",
    "start": "2261390",
    "end": "2269520"
  },
  {
    "text": "plans and then you have non-generic sometimes you know maybe normal custom kind of the regular plans that you get a",
    "start": "2269520",
    "end": "2277490"
  },
  {
    "text": "generic plan means that you're getting reuse it's a plan that can be reused",
    "start": "2277490",
    "end": "2283260"
  },
  {
    "text": "over and over by a prepared statement so if there's no parameters immediately",
    "start": "2283260",
    "end": "2289800"
  },
  {
    "text": "goes to a generic it's going to compile its meaning that it's just going to store the plan in memory and every time",
    "start": "2289800",
    "end": "2296010"
  },
  {
    "text": "you execute it'll never have to rerun that planning step if you have variables though it's a different story why would",
    "start": "2296010",
    "end": "2302340"
  },
  {
    "start": "2300000",
    "end": "2677000"
  },
  {
    "text": "that be anybody well I won't have you guess the the reason it's a different story is that when you have variables",
    "start": "2302340",
    "end": "2311270"
  },
  {
    "text": "things can go very badly let's imagine the situation where I have a table and",
    "start": "2311270",
    "end": "2317420"
  },
  {
    "text": "let's say that in this table I have an index on the country that you live in",
    "start": "2317420",
    "end": "2322590"
  },
  {
    "text": "okay and let's say that all of us are in this table alright so in this table let",
    "start": "2322590",
    "end": "2330750"
  },
  {
    "text": "in fact let's say that we have a room and there's like five hundred people in this room with us right now and me all",
    "start": "2330750",
    "end": "2336450"
  },
  {
    "text": "right and it has like the country where that you call home and in that room in",
    "start": "2336450",
    "end": "2344220"
  },
  {
    "text": "this room all of us are in this table and might you know my record is gonna say United States probably most of the",
    "start": "2344220",
    "end": "2352620"
  },
  {
    "text": "records in this table are going to say Ireland right so I have an index on that column right and I say give me all the",
    "start": "2352620",
    "end": "2361230"
  },
  {
    "text": "records from this table where home country is the United States what's the",
    "start": "2361230",
    "end": "2367710"
  },
  {
    "text": "right thing to do use the index but let's say that I say give me all the records from this table where the home",
    "start": "2367710",
    "end": "2373980"
  },
  {
    "text": "country is Ireland do you want to use the index there No",
    "start": "2373980",
    "end": "2380210"
  },
  {
    "text": "if you tried to use that and I mean you could use the index it would work but it would be much slower if you use the",
    "start": "2380410",
    "end": "2388060"
  },
  {
    "text": "index you're gonna sit there and bounce back and forth index table index table",
    "start": "2388060",
    "end": "2393250"
  },
  {
    "text": "index table you're gonna go you know you're gonna go from the index to one block on the table from the index to",
    "start": "2393250",
    "end": "2399280"
  },
  {
    "text": "another block on the table from the index right back to the same block that you were in before and if it happened to get pushed out of the cache you have to",
    "start": "2399280",
    "end": "2405070"
  },
  {
    "text": "reread it from desk a second time whereas what's the right thing to do the",
    "start": "2405070",
    "end": "2410110"
  },
  {
    "text": "right thing is well I know that like 90% of this table is Ireland so just read",
    "start": "2410110",
    "end": "2415510"
  },
  {
    "text": "the table and throw away the 10% that I don't need right that's the fastest way",
    "start": "2415510",
    "end": "2420640"
  },
  {
    "text": "to do that so you have a data distribution situation where it's you",
    "start": "2420640",
    "end": "2428650"
  },
  {
    "text": "don't necessarily want to have the same plan now in some databases you have the ability to sort of have like child plans",
    "start": "2428650",
    "end": "2435190"
  },
  {
    "text": "you have multiple plans under a single sort of master plan Postgres at this point in time is not",
    "start": "2435190",
    "end": "2441220"
  },
  {
    "text": "yet that sophisticated but what Postgres will do is that it doesn't if you have",
    "start": "2441220",
    "end": "2447370"
  },
  {
    "text": "variables so if if the query just comes right out and says we're home country is",
    "start": "2447370",
    "end": "2452500"
  },
  {
    "text": "United States Postgres is like oh well that's easy it's never going to change it can't change because it's all",
    "start": "2452500",
    "end": "2458800"
  },
  {
    "text": "hard-coded so that's why I go straight to a generic but if it says we're a home country equals variable then posters is",
    "start": "2458800",
    "end": "2465910"
  },
  {
    "text": "like whoa whoa whoa whoa I can't I don't know what's the right plan yet for that because I don't know whether the right",
    "start": "2465910",
    "end": "2472930"
  },
  {
    "text": "plan is the index or the full scan and so I'm not gonna use what Postgres is",
    "start": "2472930",
    "end": "2478360"
  },
  {
    "text": "gonna do is it's gonna at first it's just going to continue planning every",
    "start": "2478360",
    "end": "2485920"
  },
  {
    "text": "time so you're not going to get any reuse it's it'll go all the way to the rewrite phase and it'll store it there",
    "start": "2485920",
    "end": "2491860"
  },
  {
    "text": "store the data but then every time you re execute it's going to replan it's",
    "start": "2491860",
    "end": "2497260"
  },
  {
    "text": "going to do that five times and this is a hard-coded number and version 11 at",
    "start": "2497260",
    "end": "2503530"
  },
  {
    "text": "least of Postgres it'll go five times on the fifth time though it will do something a little different on the",
    "start": "2503530",
    "end": "2510130"
  },
  {
    "text": "fifth time it'll say well how expensive is it for me to figure out",
    "start": "2510130",
    "end": "2515170"
  },
  {
    "text": "the plan and execute it and then it'll say what how expensive if I were to make",
    "start": "2515170",
    "end": "2522009"
  },
  {
    "text": "a generic plan without looking at any statistics oh well I don't even know",
    "start": "2522009",
    "end": "2528940"
  },
  {
    "text": "which way that generic would go I'll have to take a look but it'll say if I were to make a generic then what would",
    "start": "2528940",
    "end": "2534849"
  },
  {
    "text": "the plan be and how much how expensive is that and it'll compare them the fifth time it'll compare if the generic is",
    "start": "2534849",
    "end": "2541959"
  },
  {
    "text": "cheaper then it'll shift gears and it'll switch it'll actually store the generic but if the generic isn't not cheaper",
    "start": "2541959",
    "end": "2549400"
  },
  {
    "text": "then it it does not the thing with Postgres and the thing that you really have to look out for",
    "start": "2549400",
    "end": "2554979"
  },
  {
    "text": "with Postgres is that once it makes that flip it never goes back until you die",
    "start": "2554979",
    "end": "2560890"
  },
  {
    "text": "allocate the preparedstatement until you start over so what that means if you",
    "start": "2560890",
    "end": "2567160"
  },
  {
    "text": "think about it is that let's just suppose that I have a query where I do",
    "start": "2567160",
    "end": "2573269"
  },
  {
    "text": "you know just going back to our example give me everybody whose home country is",
    "start": "2573269",
    "end": "2578650"
  },
  {
    "text": "United States and home country United States home country United States and then I say home country India and then I",
    "start": "2578650",
    "end": "2584410"
  },
  {
    "text": "say home country Australia home country United States right Postgres is going to keep on it's going",
    "start": "2584410",
    "end": "2593049"
  },
  {
    "text": "to keep on doing what it does and then we get to execution number five keeps running the same thing but then let's",
    "start": "2593049",
    "end": "2598269"
  },
  {
    "text": "suppose Postgres is like oh let's switch to a generic okay so switches to the generic but then we keep keep going we",
    "start": "2598269",
    "end": "2604719"
  },
  {
    "text": "say home country and I say so then we say home country Ireland but because we've locked in a generic now suddenly",
    "start": "2604719",
    "end": "2610599"
  },
  {
    "text": "we're in that place where we're using the index to go pull all the people who have home country Ireland and suddenly",
    "start": "2610599",
    "end": "2617349"
  },
  {
    "text": "you've got a very bad execution plan that you're that you wind up using how",
    "start": "2617349",
    "end": "2623259"
  },
  {
    "text": "do you know if you have generics the way that you can tell if you have generics is you'll see this dollar sign in a",
    "start": "2623259",
    "end": "2628959"
  },
  {
    "text": "number inside of the query text I've seen that you can I believe you can see",
    "start": "2628959",
    "end": "2636430"
  },
  {
    "text": "it in PG stat activity I think you might know I'm not sure if you'll see it in PG",
    "start": "2636430",
    "end": "2642489"
  },
  {
    "text": "stat statements I don't think you will see it there you might though I need to double-check that you certainly can see it in your",
    "start": "2642489",
    "end": "2649270"
  },
  {
    "text": "own session so it's very easy to kind of illustrate this by running a query and then doing explain analyze on that query",
    "start": "2649270",
    "end": "2656260"
  },
  {
    "text": "and then run the query like five or six more times after doing a prepare and",
    "start": "2656260",
    "end": "2661300"
  },
  {
    "text": "you'll see the dollar sign one start to show up and your explains so that's how",
    "start": "2661300",
    "end": "2666550"
  },
  {
    "text": "you know if you're getting the sqg plans and that wraps up my first section that",
    "start": "2666550",
    "end": "2672640"
  },
  {
    "text": "I have for today let's stop for a moment",
    "start": "2672640",
    "end": "2678690"
  }
]