[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "good afternoon everyone how's everybody doing this afternoon well as you heard this morning you",
    "start": "30",
    "end": "8040"
  },
  {
    "text": "learned a lot about serverless applications the benefits and capabilities you have with lambda the",
    "start": "8040",
    "end": "13200"
  },
  {
    "text": "API gateway and how you can scale and not worry about servers so this afternoon we're gonna take it to the",
    "start": "13200",
    "end": "19380"
  },
  {
    "text": "next level and we're gonna talk about how you can get these types of patterns and applications directly into",
    "start": "19380",
    "end": "24869"
  },
  {
    "text": "production for your companies and your systems quick bit about me my name is",
    "start": "24869",
    "end": "30269"
  },
  {
    "text": "Justin Pirtle I'm a principal Solutions Architect here at AWS I focused now on service technologies but previously I",
    "start": "30269",
    "end": "38550"
  },
  {
    "text": "supported customers across Texas and Utah and the Pacific Northwest for the last few years and before that I've been",
    "start": "38550",
    "end": "45480"
  },
  {
    "text": "in several engineering teams at Amazon and Microsoft so how can we continue",
    "start": "45480",
    "end": "51420"
  },
  {
    "text": "what we started this morning you've learned about what API gateway lambda",
    "start": "51420",
    "end": "56780"
  },
  {
    "text": "kognito all of these various services are right so now we're really talking about best practices for how you can get",
    "start": "56780",
    "end": "63059"
  },
  {
    "text": "started quickly and take these all the way to production first is to recap for",
    "start": "63059",
    "end": "69299"
  },
  {
    "start": "67000",
    "end": "67000"
  },
  {
    "text": "a lambda function right a lambda function is fundamentally an event source so in this case like your lab",
    "start": "69299",
    "end": "75600"
  },
  {
    "text": "that you were doing earlier a particular request to an API endpoint that then goes to your function which is your code",
    "start": "75600",
    "end": "82680"
  },
  {
    "text": "right your whether in what your choice of runtime so in these labs you're using particular languages but as you can see",
    "start": "82680",
    "end": "89220"
  },
  {
    "text": "we support not only node Python Go Java C sharp but now as of last November the",
    "start": "89220",
    "end": "96270"
  },
  {
    "text": "ability to bring your own runtime so we have run times now that customers and partners have built in PHP COBOL rust",
    "start": "96270",
    "end": "104850"
  },
  {
    "text": "Erlang and more and any in even more will come and then fundamentally from",
    "start": "104850",
    "end": "110130"
  },
  {
    "text": "your code you have the ability to interact with third-party services and AWS services to transform and to you",
    "start": "110130",
    "end": "118259"
  },
  {
    "text": "know manipulate your data so as you heard this morning a lambda function has",
    "start": "118259",
    "end": "123719"
  },
  {
    "start": "120000",
    "end": "120000"
  },
  {
    "text": "fundamentally three parts you have your code and inside your code you have a handler function so every time lambdas",
    "start": "123719",
    "end": "130679"
  },
  {
    "text": "invoked you go and enter this function and then when you enter that handler function you have an event",
    "start": "130679",
    "end": "136989"
  },
  {
    "text": "object and a context object and the event object is the data right it's all",
    "start": "136989",
    "end": "141999"
  },
  {
    "text": "about your data your payload your request your change in your resources the context object however is context",
    "start": "141999",
    "end": "149500"
  },
  {
    "text": "about that request where did it come from what's in you know what's the law group what's the runtime ID all these kind of",
    "start": "149500",
    "end": "155829"
  },
  {
    "text": "things and you can hook off those and and use that in your code as well so",
    "start": "155829",
    "end": "160959"
  },
  {
    "text": "when you look at this one thing to realize even though we call it service in fact there are servers behind the",
    "start": "160959",
    "end": "168040"
  },
  {
    "text": "scenes right the key value here is you don't have to manage any instances you don't have to think about servers it",
    "start": "168040",
    "end": "174040"
  },
  {
    "text": "scales as you need and you never pay for idle and that's the key benefit right of Cerberus so what really happens when you",
    "start": "174040",
    "end": "181359"
  },
  {
    "text": "invoke a lambda function where are the server's where is the magic right what happens there and it's important to kind",
    "start": "181359",
    "end": "188079"
  },
  {
    "text": "of know a little bit behind the scenes because it can help you architect to optimize your workloads for this is what",
    "start": "188079",
    "end": "194620"
  },
  {
    "text": "we do is we look at your request and we see for the function that you've requested do we have an existing worker",
    "start": "194620",
    "end": "200979"
  },
  {
    "text": "that already has this code on it and if we don't what we do is we allocate a worker to you and your account we spin",
    "start": "200979",
    "end": "208060"
  },
  {
    "text": "up a sandbox for your function much like you could think of a container that sandbox has your application runtime of",
    "start": "208060",
    "end": "214750"
  },
  {
    "text": "choice so Java or Ruby or go it pulls your code into the sandbox write it if",
    "start": "214750",
    "end": "221620"
  },
  {
    "text": "you've attached to the network with a VP C integration we even attach a network interface and then we finally enter your",
    "start": "221620",
    "end": "228280"
  },
  {
    "text": "handler after we've initialized the runtime and we even before we enter your handler we actually run anything else in",
    "start": "228280",
    "end": "233949"
  },
  {
    "text": "your code that's not part of the handler that's outside of the handler that's global in scope and so this is important",
    "start": "233949",
    "end": "240459"
  },
  {
    "text": "to know because all of the things I just said that's what we collectively call a cold start with lambda but what happens",
    "start": "240459",
    "end": "247419"
  },
  {
    "text": "is when your function finishes and we leave your handler we don't immediately throw away that sandbox we actually",
    "start": "247419",
    "end": "254349"
  },
  {
    "text": "leave it around for a period of time or if you have another invocation of the same function come then we're able to",
    "start": "254349",
    "end": "260769"
  },
  {
    "text": "reuse the same execution environment and this allows you to take advantage of that to optimize your code",
    "start": "260769",
    "end": "266500"
  },
  {
    "text": "to work especially well and be highly performant in lambda so to break this",
    "start": "266500",
    "end": "271810"
  },
  {
    "text": "down a little bit more tactically this is pseudocode of sorts so you have a",
    "start": "271810",
    "end": "276820"
  },
  {
    "text": "handler at the top but the goal of the handler is to not have much code in it it's really about a lightweight wrapper",
    "start": "276820",
    "end": "283000"
  },
  {
    "text": "to invoke particular helper functions your business logic whatever it may be and ultimately as you have more code in",
    "start": "283000",
    "end": "290530"
  },
  {
    "text": "complexity you're gonna break out different functions and business logic right but at the same time as I",
    "start": "290530",
    "end": "297610"
  },
  {
    "text": "mentioned because you have the ability to reuse that container environment things that don't have to be run upon",
    "start": "297610",
    "end": "303610"
  },
  {
    "text": "every single invocation things that you could do just once for the whole environment say connect to a database or",
    "start": "303610",
    "end": "309790"
  },
  {
    "text": "get a secret API key from secure storage something like that that you could do",
    "start": "309790",
    "end": "315010"
  },
  {
    "text": "once hold and hold in memory keep open that connection you can leverage that to",
    "start": "315010",
    "end": "320680"
  },
  {
    "text": "make your functions perform faster upon their secondary and further invitations and so things like that where you're",
    "start": "320680",
    "end": "327610"
  },
  {
    "text": "configuring dependencies configuring database connections just opening these kind of things all of that we call kind",
    "start": "327610",
    "end": "334480"
  },
  {
    "text": "of helper functions and those things are also good to keep outside of the handler because yet again you have the ability",
    "start": "334480",
    "end": "340150"
  },
  {
    "text": "to take advantage of container reuse so now that you kind of understand that you",
    "start": "340150",
    "end": "345940"
  },
  {
    "start": "343000",
    "end": "343000"
  },
  {
    "text": "know we saw earlier today with the API gateway deployment and we had a single method single resource what might this",
    "start": "345940",
    "end": "352780"
  },
  {
    "text": "look like for a production API ultimately each of those methods needs",
    "start": "352780",
    "end": "358450"
  },
  {
    "text": "to respond and interact with some sort of persistent store write a database something like that and you probably",
    "start": "358450",
    "end": "364330"
  },
  {
    "text": "also need to interact with keys and secrets for encryption and maybe configuration values we have a service",
    "start": "364330",
    "end": "370210"
  },
  {
    "text": "called parameter store you heard about earlier so because of that what happens is as a best practice you don't want to",
    "start": "370210",
    "end": "377080"
  },
  {
    "text": "have a single function be a monolithic code base just like you could have on Prem or you may have today instead we",
    "start": "377080",
    "end": "384220"
  },
  {
    "text": "recommend you have a function per method in your API in your environment and so",
    "start": "384220",
    "end": "389590"
  },
  {
    "text": "what that could look like is each of those functions all of a sudden may have the same helper functions the same business logic functions the same code",
    "start": "389590",
    "end": "396880"
  },
  {
    "text": "dependencies and modules and then all of those are talking to the same day right so you have all this stuff to",
    "start": "396880",
    "end": "403060"
  },
  {
    "text": "manage all bacin well as you can imagine the amount of moving parts can quickly",
    "start": "403060",
    "end": "409120"
  },
  {
    "text": "grow and increase and so the goal here is for you to not have that complexity to take on yourself and so because of",
    "start": "409120",
    "end": "415750"
  },
  {
    "text": "that we have a variety of frameworks that are out there and particularly the one that that we advocate is something",
    "start": "415750",
    "end": "422409"
  },
  {
    "text": "called Sam so if you haven't seen Sam before Sam is both our mascot and the",
    "start": "422409",
    "end": "427810"
  },
  {
    "text": "name of the actual framework it stands for service application model but Sam is",
    "start": "427810",
    "end": "432849"
  },
  {
    "text": "also a squirrel and so this is Sam the squirrel he's our server list mascot for AWS and so with service application",
    "start": "432849",
    "end": "440319"
  },
  {
    "start": "438000",
    "end": "438000"
  },
  {
    "text": "model you can think of this as a cloud formation extension or a cloud formation transformation layer by show of hands",
    "start": "440319",
    "end": "448120"
  },
  {
    "text": "how many of you worked with cloud formation in the past ok handful you",
    "start": "448120",
    "end": "453490"
  },
  {
    "text": "guys okay and probably some of you were clicking the launch template button earlier in the lab right so you were",
    "start": "453490",
    "end": "458949"
  },
  {
    "text": "using it then what about Sam itself how many of you use Sam before",
    "start": "458949",
    "end": "465060"
  },
  {
    "text": "ok so I'll assume this is pretty new so if you've worked with cloud formation and if you've written a template by hand",
    "start": "465060",
    "end": "471130"
  },
  {
    "text": "what you'll know is that cloud formation has a variety of things parameters inputs resources all of this you can",
    "start": "471130",
    "end": "479139"
  },
  {
    "start": "472000",
    "end": "472000"
  },
  {
    "text": "define those templates in JSON or Gamal and ultimately they can get quite",
    "start": "479139",
    "end": "485319"
  },
  {
    "text": "verbose because there's you're defining all of these resources you're defining all of these attributes and values and",
    "start": "485319",
    "end": "490569"
  },
  {
    "text": "so what Sam is is sort of like CloudFormation shorthand it's literally a transformation layer on top where",
    "start": "490569",
    "end": "496960"
  },
  {
    "text": "server list resources like functions API gateway deployments tables for dynamodb",
    "start": "496960",
    "end": "502779"
  },
  {
    "text": "these kind of things you can define very succinctly and we expand it out at runtime into cloud formation at the",
    "start": "502779",
    "end": "509650"
  },
  {
    "text": "deployment time of your templates so just to show you an example you know",
    "start": "509650",
    "end": "515110"
  },
  {
    "text": "this is what about 15 lines of code you may be up to 20 so this is a Sam",
    "start": "515110",
    "end": "520360"
  },
  {
    "text": "template on the left and if you look at the top the reason you know it's a SAM template is because you see there's a",
    "start": "520360",
    "end": "526180"
  },
  {
    "text": "template version 2 template format version so that's always there for cloud formation but there's this special line",
    "start": "526180",
    "end": "532180"
  },
  {
    "text": "that says transform and this says AWS server lists and that's our API version that means this",
    "start": "532180",
    "end": "537610"
  },
  {
    "text": "is a SAM template so when CloudFormation gets it the first step before it actually tries to deploy things is to",
    "start": "537610",
    "end": "542920"
  },
  {
    "text": "transform this into CloudFormation syntax and then within there you can see",
    "start": "542920",
    "end": "548230"
  },
  {
    "text": "that this is creating a function so we have you know type serverless function right and we have a particular set of",
    "start": "548230",
    "end": "554589"
  },
  {
    "text": "code and a handler and all the things that you need to define as well as a table at the bottom so with just one",
    "start": "554589",
    "end": "560620"
  },
  {
    "text": "line of the actual templating code here in the title there was logical resource",
    "start": "560620",
    "end": "566050"
  },
  {
    "text": "name so two lines that will expand to be a full dinamo table with five read and",
    "start": "566050",
    "end": "571120"
  },
  {
    "text": "write units of capacity and you don't have to write all the other semantics of that so when you look at that that",
    "start": "571120",
    "end": "577900"
  },
  {
    "start": "576000",
    "end": "576000"
  },
  {
    "text": "fifteen lines actually becomes dozens of lines of code of CloudFormation behind",
    "start": "577900",
    "end": "583390"
  },
  {
    "text": "the scenes and becomes all of the things you see on the right all of the different objects lambda functions",
    "start": "583390",
    "end": "588610"
  },
  {
    "text": "permissions API gateway cloud watch you know and more and so what Sam offers",
    "start": "588610",
    "end": "595779"
  },
  {
    "start": "594000",
    "end": "594000"
  },
  {
    "text": "anything you have in cloud formation that you already are doing in cloud formation you can just pick up and drop into a same template it'll work just",
    "start": "595779",
    "end": "602110"
  },
  {
    "text": "fine but what Sam gives you as well as the ability to have five special types of resources that you don't have to do",
    "start": "602110",
    "end": "609130"
  },
  {
    "text": "that same heavy lifting so functions api's tables and what we'll talk about",
    "start": "609130",
    "end": "614800"
  },
  {
    "text": "as a service application along with lambda layers so all five of these and",
    "start": "614800",
    "end": "620130"
  },
  {
    "start": "620000",
    "end": "620000"
  },
  {
    "text": "then in addition to that when you define a function as we said a function is only useful with an event source so we",
    "start": "620130",
    "end": "626560"
  },
  {
    "text": "actually support 50 different types of events sources with lambda today all of",
    "start": "626560",
    "end": "631870"
  },
  {
    "text": "them all you have to do is put in here events say this is an s3 event in this case any notification any change you",
    "start": "631870",
    "end": "639910"
  },
  {
    "text": "know event on the my photo bucket would trigger this lambda function so popular lambda use case might be image",
    "start": "639910",
    "end": "646330"
  },
  {
    "text": "conversion right resizing these kind of things and at the same time though when when you have a lot of functions a lot",
    "start": "646330",
    "end": "653260"
  },
  {
    "start": "649000",
    "end": "649000"
  },
  {
    "text": "of the parameters and attributes of those are identical so Sam has this concept called Global's which means most",
    "start": "653260",
    "end": "660790"
  },
  {
    "text": "likely you're writing the application for a single micro-service in the same language this allows you to pull that",
    "start": "660790",
    "end": "666520"
  },
  {
    "text": "runtime tribute up to the top your code for whatever code is reused the same zip",
    "start": "666520",
    "end": "672060"
  },
  {
    "text": "file may support multiple functions pulled up to the top memory allocation timeout whatever you want to pull up",
    "start": "672060",
    "end": "678180"
  },
  {
    "text": "there many of those attributes can go into Global's and it makes it even shorter for you as you define multiple",
    "start": "678180",
    "end": "683910"
  },
  {
    "text": "functions down below now as we learned earlier today lambda has a permissions",
    "start": "683910",
    "end": "690629"
  },
  {
    "start": "686000",
    "end": "686000"
  },
  {
    "text": "model that includes two pieces you have both the invocation or function policy",
    "start": "690629",
    "end": "696029"
  },
  {
    "text": "which is what can invoke the lambda function and then you have the execution policy which means once invoked what can",
    "start": "696029",
    "end": "704009"
  },
  {
    "text": "the function actually do right what can it talk to good it talk to a database go to talk to s3 these kind of things and",
    "start": "704009",
    "end": "710990"
  },
  {
    "text": "so what we have here to also make life easier is we have the notion of policy",
    "start": "710990",
    "end": "716189"
  },
  {
    "text": "templates and so we have over 45 different policy templates that you can",
    "start": "716189",
    "end": "721470"
  },
  {
    "text": "just drop in with a single line like this is an SQS Koller polar policy so by",
    "start": "721470",
    "end": "727019"
  },
  {
    "text": "having this in the name of your queue all the sudden now your lambda function can be reading your message queue",
    "start": "727019",
    "end": "732480"
  },
  {
    "text": "processing all of those events as they come in and you automatically have that integration set up as well as the",
    "start": "732480",
    "end": "739019"
  },
  {
    "text": "permissions to read the queue and to actually call back to the queue to say we finished processing the message so",
    "start": "739019",
    "end": "746250"
  },
  {
    "text": "there's 45 different policies that are out there above and beyond what CloudFormation offers for easy drop-in",
    "start": "746250",
    "end": "753029"
  },
  {
    "text": "and you can look them up in the Sam repo at this link now in addition we you know",
    "start": "753029",
    "end": "759300"
  },
  {
    "start": "757000",
    "end": "757000"
  },
  {
    "text": "we've got all these functions we've got away now to deploy them but we also need a way to configure them right you need a",
    "start": "759300",
    "end": "764730"
  },
  {
    "text": "way for them to know what tables are we talking to what secrets do we need access to what environments are they for",
    "start": "764730",
    "end": "771240"
  },
  {
    "text": "all this configuration value so you have a few ways to do this one is you have",
    "start": "771240",
    "end": "776309"
  },
  {
    "text": "environmental variables so much like your laptops or any OS environment you've been in you can set environmental",
    "start": "776309",
    "end": "783000"
  },
  {
    "text": "variables you can read those directly within your course and box environment and you can even optionally encrypt them",
    "start": "783000",
    "end": "789870"
  },
  {
    "text": "as cypher text where you'd have to at runtime use our kms service our key",
    "start": "789870",
    "end": "794910"
  },
  {
    "text": "management service to decrypt those so that's certainly an option for you it's",
    "start": "794910",
    "end": "800009"
  },
  {
    "text": "particularly useful for the like keeping track of is this a dev environment function a test function and",
    "start": "800009",
    "end": "805950"
  },
  {
    "text": "prod function you know something like that but what what the problem with this is is say you define this across all these",
    "start": "805950",
    "end": "812700"
  },
  {
    "text": "functions and then all of a sudden you need to go update a value maybe it was say the database password for example",
    "start": "812700",
    "end": "818790"
  },
  {
    "text": "even if you made it ciphertext now you need to go make a call on every single function to go update this this password",
    "start": "818790",
    "end": "825209"
  },
  {
    "text": "so all of them can get the latest password well because of that we have something we'll talk about called",
    "start": "825209",
    "end": "830610"
  },
  {
    "text": "parameter store which is coming up and that allows you to basically centralize your parameters to even your secrets",
    "start": "830610",
    "end": "837360"
  },
  {
    "text": "with another feature of it called secrets manager that integrates with it into one place and you can pull that at",
    "start": "837360",
    "end": "843570"
  },
  {
    "text": "runtime or at your execution but for other configuration flexibility we offer",
    "start": "843570",
    "end": "849209"
  },
  {
    "text": "something called staged variables and so this is a way with an API gateway I don't know if you noticed but every time",
    "start": "849209",
    "end": "855570"
  },
  {
    "text": "we have a deployment you always have a stage so the common names for this most commonly or devtest prod these kind of",
    "start": "855570",
    "end": "861360"
  },
  {
    "text": "things right stages or as we call them and these actually can be used as variables so you can actually pass in",
    "start": "861360",
    "end": "868020"
  },
  {
    "text": "say prod us maybe the stage variable name and all of your functions that are prod functions may end in Prague right",
    "start": "868020",
    "end": "874020"
  },
  {
    "text": "so you can actually you know use that to make sure you're pointing to the right functions or maybe you have different",
    "start": "874020",
    "end": "880440"
  },
  {
    "start": "876000",
    "end": "876000"
  },
  {
    "text": "you know function names for your authorizers you do different authorization and authentication and",
    "start": "880440",
    "end": "885570"
  },
  {
    "text": "prod than you do in dev and you want to point to that particular type of authorizing you have the staged",
    "start": "885570",
    "end": "891209"
  },
  {
    "text": "variables to go there at the same time though you also have a feature in lambda",
    "start": "891209",
    "end": "896820"
  },
  {
    "start": "893000",
    "end": "893000"
  },
  {
    "text": "called lambda versions but first let's look at this just to see how this takes",
    "start": "896820",
    "end": "902370"
  },
  {
    "text": "place so this is a Sam template just like a CloudFormation template it has parameters at the top so the parameters",
    "start": "902370",
    "end": "909899"
  },
  {
    "text": "here we're defining is we've got an environment every time we deploy it we're gonna save this is dev or prod and then within that this particular lambda",
    "start": "909899",
    "end": "917880"
  },
  {
    "text": "environment we want to have the concept of feature toggles so in prod certain things will be turned on and in dev",
    "start": "917880",
    "end": "923520"
  },
  {
    "text": "other features will be turned on and so in CloudFormation you have this notion",
    "start": "923520",
    "end": "928649"
  },
  {
    "text": "of what's called a map and you can see here special feature 1 and then what we do is within the map we",
    "start": "928649",
    "end": "934970"
  },
  {
    "text": "have each of the basically key values to key offers so in this case our environment names and then we have sub",
    "start": "934970",
    "end": "941120"
  },
  {
    "text": "you knows actual values we want to pull out of it so in this particular case what that allows us to do with one template is",
    "start": "941120",
    "end": "947420"
  },
  {
    "text": "reference if you see these little exclamation sign ref exclamation fine",
    "start": "947420",
    "end": "952939"
  },
  {
    "text": "and map these are called intrinsic functions and these are a capability of CloudFormation that allow you to",
    "start": "952939",
    "end": "958670"
  },
  {
    "text": "basically read values from across the template to have things dynamically reference each other so all you'd ever",
    "start": "958670",
    "end": "964310"
  },
  {
    "text": "have to do to deploy this is just literally type in you know pick between testing stage or prod",
    "start": "964310",
    "end": "970100"
  },
  {
    "text": "those are your allowed values and everything else would just automatically happen so in this case what's happening",
    "start": "970100",
    "end": "976459"
  },
  {
    "text": "is if I put in testing for instance or staging automatically my environmental",
    "start": "976459",
    "end": "982490"
  },
  {
    "text": "variables over here for spec feature 1 it's going to look in the map it's gonna see for testing and staging I'm gonna",
    "start": "982490",
    "end": "987980"
  },
  {
    "text": "turn on this beta feature but in prod if I deploy it it's not going to be on the environmental variable won't be set for",
    "start": "987980",
    "end": "993980"
  },
  {
    "text": "that and you can see the environmental variables are just there in line right in the template at the same time those",
    "start": "993980",
    "end": "1000790"
  },
  {
    "text": "variables can also be passed in it was a parameter at the top it can be passed into API gateway as a staged variable so",
    "start": "1000790",
    "end": "1008290"
  },
  {
    "start": "1007000",
    "end": "1007000"
  },
  {
    "text": "I mentioned parameter store as a parameter store is a way to centralize your configuration and just so you know",
    "start": "1008290",
    "end": "1014589"
  },
  {
    "text": "this is available not just for server lists you could use this for anything in AWS so containers ec2 instances whatever",
    "start": "1014589",
    "end": "1021819"
  },
  {
    "text": "it may be and this allows you to define parameters and is a very simple API it's put parameter get parameter that's it",
    "start": "1021819",
    "end": "1029130"
  },
  {
    "text": "but you also have the optional ability if you want if it's a secure string like",
    "start": "1029130",
    "end": "1034780"
  },
  {
    "text": "a password API key something like that you have the ability to basically store a cipher text and encrypt it even in",
    "start": "1034780",
    "end": "1042130"
  },
  {
    "text": "when you pull it out of parameter store as cipher text and then to have actually",
    "start": "1042130",
    "end": "1047288"
  },
  {
    "text": "an API helper with kms where you would have to have the credentials to the key",
    "start": "1047289",
    "end": "1052600"
  },
  {
    "text": "the key management service key to decrypt that secret so for a database password or something secure you know",
    "start": "1052600",
    "end": "1058960"
  },
  {
    "text": "you'd want to enable that encryption feature but as you can see on the right all we have to do to use this in code is",
    "start": "1058960",
    "end": "1065590"
  },
  {
    "text": "just you know and define the method here which is get parameters and in this case we're saying",
    "start": "1065590",
    "end": "1070900"
  },
  {
    "text": "I want to actually get the lambda secured string parameter it happens to be encrypted so we're gonna say whip",
    "start": "1070900",
    "end": "1076390"
  },
  {
    "text": "decryption equals true it just means give it to me in plain text and you know we're gonna decrypt it",
    "start": "1076390",
    "end": "1081460"
  },
  {
    "text": "locally in that environment and so with this the nice thing it's all it's controlled with iam policies so you can",
    "start": "1081460",
    "end": "1088930"
  },
  {
    "text": "make it where certain environments can get to certain parameters certain ones can it's all recorded in Cloud trail and",
    "start": "1088930",
    "end": "1094030"
  },
  {
    "text": "and integrates you know with all of our standard API s and SDKs and then to put",
    "start": "1094030",
    "end": "1101410"
  },
  {
    "start": "1100000",
    "end": "1100000"
  },
  {
    "text": "this together so I mentioned lambda functions have what we call aliases and we have",
    "start": "1101410",
    "end": "1106750"
  },
  {
    "text": "versions so lambda functions by default a few if you if you'd actually use this",
    "start": "1106750",
    "end": "1112360"
  },
  {
    "text": "feature every time you deploy a new code or new configuration change or even environmental variable all of that",
    "start": "1112360",
    "end": "1118300"
  },
  {
    "text": "together is a version so what can happen is you can have in this case we have eight versions and we also have aliases",
    "start": "1118300",
    "end": "1125650"
  },
  {
    "text": "that we're pointing for lambda two different versions so if you're we're using the same account you could",
    "start": "1125650",
    "end": "1131440"
  },
  {
    "text": "actually have prod and dev point to the same lambda function but actually we're on a different code just because prod in this case is on",
    "start": "1131440",
    "end": "1138070"
  },
  {
    "text": "version 3 in dev is on version 8 now you can also this what we would call a single stack environment right where",
    "start": "1138070",
    "end": "1144700"
  },
  {
    "text": "everything is in one account you can also do multi stack environments and still make use of these features but",
    "start": "1144700",
    "end": "1151030"
  },
  {
    "text": "that's what this is and then the nice thing is the staged variables from API gateway can be pointed to the aliases of",
    "start": "1151030",
    "end": "1157150"
  },
  {
    "text": "lambda so you can map you know prod to prod beta 2 beta etc for those and one",
    "start": "1157150",
    "end": "1164440"
  },
  {
    "text": "of the reasons this is very helpful even if you are using different accounts or you have dev tests prod all different",
    "start": "1164440",
    "end": "1170230"
  },
  {
    "text": "accounts is we have a feature called traffic shifting so like any production",
    "start": "1170230",
    "end": "1175510"
  },
  {
    "text": "system you know you want to roll out new changes but you also want to make sure you're not you know undermining the stability if your users and your",
    "start": "1175510",
    "end": "1181870"
  },
  {
    "text": "customers and so what traffic shifting is is the way that through our free",
    "start": "1181870",
    "end": "1186940"
  },
  {
    "text": "service integration we have with code deploy what happens is actually we have the ability to point API gateway and",
    "start": "1186940",
    "end": "1193720"
  },
  {
    "text": "particularly its with the lambda aliasing to wait the aliasing where you can to control the traffic flow so",
    "start": "1193720",
    "end": "1201350"
  },
  {
    "text": "in this case when we start a deployment we're gonna say send five percent of our traffic in this example to version six",
    "start": "1201350",
    "end": "1207410"
  },
  {
    "text": "and we're gonna say give it ten minutes with five percent of the traffic and if it doesn't throw any alarms or any",
    "start": "1207410",
    "end": "1213590"
  },
  {
    "text": "errors then we'll go ahead and potentially do the next ten percent or maybe we just do the rest ninety five",
    "start": "1213590",
    "end": "1218600"
  },
  {
    "text": "percent it's up to you we have the options there so if you just do basically one small percentage and then",
    "start": "1218600",
    "end": "1225350"
  },
  {
    "text": "flip everything else over that's what we call a canary deployment or if you want to do 10% then 20% then 30% you know",
    "start": "1225350",
    "end": "1232520"
  },
  {
    "text": "progressively then we call that a linear deployment it's your choice and it's free it's built into Sam too so you can",
    "start": "1232520",
    "end": "1239210"
  },
  {
    "start": "1236000",
    "end": "1236000"
  },
  {
    "text": "see here with Sam this is an example of a particular environment where we're",
    "start": "1239210",
    "end": "1244220"
  },
  {
    "text": "Auto publishing an alias of the environment name so all you have to do is add that property and then you have",
    "start": "1244220",
    "end": "1249800"
  },
  {
    "text": "to add deployment preference and here we're saying well ever eat it every 10 minutes we want to shift over 10 percent",
    "start": "1249800",
    "end": "1255860"
  },
  {
    "text": "more of the traffic so within you know 100 minutes were fully shifted over in",
    "start": "1255860",
    "end": "1260870"
  },
  {
    "text": "Prague but at the same time how do we know when we might want to revert well",
    "start": "1260870",
    "end": "1266240"
  },
  {
    "text": "the nice thing because there's lambda functions and the versions I mentioned are immutable shifting back is as simple",
    "start": "1266240",
    "end": "1272390"
  },
  {
    "text": "as pointing the alias immediately back to where it was there's no need to redeploy it's an immediate rollback but",
    "start": "1272390",
    "end": "1278180"
  },
  {
    "text": "we need a hook to know if we need to rollback and that's what the alarms are here so the alarms are just saying if this alarm is greater than zero can be",
    "start": "1278180",
    "end": "1284600"
  },
  {
    "text": "any cloud watch alarm you want and can be up to ten you can actually just roll back when the alarms that are breached",
    "start": "1284600",
    "end": "1291020"
  },
  {
    "text": "and then finally you have the ability to do sort of sanity test integration tests",
    "start": "1291020",
    "end": "1296180"
  },
  {
    "text": "with pre traffic hooks and post traffic hooks so effectively we deployed the new lambda code would run the pre traffic",
    "start": "1296180",
    "end": "1303170"
  },
  {
    "text": "hook see if the code is behaving as we'd expect and if it is then we go ahead and do the canary deployment then we do",
    "start": "1303170",
    "end": "1309830"
  },
  {
    "text": "everything and roll it all over and then we do a final post traffic check and then we we go ahead and after all that's",
    "start": "1309830",
    "end": "1315440"
  },
  {
    "text": "done then we actually stop using the older version so that's safe deployments",
    "start": "1315440",
    "end": "1321790"
  },
  {
    "text": "so just to show you I mentioned you know there's canary versions and there's linear versions so you have all that",
    "start": "1321790",
    "end": "1327860"
  },
  {
    "text": "available here auto publish alias just simply means that Sam will take care of all this for you in",
    "start": "1327860",
    "end": "1333600"
  },
  {
    "text": "with code deploy you don't have to worry about it and of course we have all at once as well so if you're doing all at",
    "start": "1333600",
    "end": "1339780"
  },
  {
    "text": "once I don't know if I'd bother to add descended the template kind of already",
    "start": "1339780",
    "end": "1345570"
  },
  {
    "text": "mentioned this this is the before traffic and allow after traffic right so the hooks there for you for safe",
    "start": "1345570",
    "end": "1351390"
  },
  {
    "text": "deployments and then let's just actually make this a little bit more real and",
    "start": "1351390",
    "end": "1357120"
  },
  {
    "text": "look at Sam more closely so I want to",
    "start": "1357120",
    "end": "1362490"
  },
  {
    "text": "take you in I know this morning he already had a chance to learn some about Sam but it really can't emphasize enough",
    "start": "1362490",
    "end": "1368010"
  },
  {
    "text": "the importance of thinking about your deployment strategy early on and so I",
    "start": "1368010",
    "end": "1373950"
  },
  {
    "text": "want to take you here if you haven't already this morning you will certainly see this afternoon in our next workshop",
    "start": "1373950",
    "end": "1379650"
  },
  {
    "text": "our cloud 9 environment and so cloud 9 is basically an interactive cloud based",
    "start": "1379650",
    "end": "1385590"
  },
  {
    "text": "IDE you can run it there's no charge to run it in your account it just runs on",
    "start": "1385590",
    "end": "1392460"
  },
  {
    "text": "an ec2 instance or you can even run it over SSH with a desktop in your home for free but for those of you that have",
    "start": "1392460",
    "end": "1398850"
  },
  {
    "text": "Chromebooks and everything else and I've always wanted a cloud-based IDE now you've got something that can do almost any language you want so to show you",
    "start": "1398850",
    "end": "1407159"
  },
  {
    "text": "here with cloud 9 you know I have a variety of things here off to the right but what I want to show you is",
    "start": "1407159",
    "end": "1412679"
  },
  {
    "text": "particularly the Sam CLI so just to show you how quickly it is to get a get a boilerplate project running I'm actually",
    "start": "1412679",
    "end": "1419789"
  },
  {
    "text": "just going refresh my environment to pull it up here and we'll start with",
    "start": "1419789",
    "end": "1426539"
  },
  {
    "text": "just the assumption you're just doing a brand new project write a boilerplate you want to get going quickly so what I",
    "start": "1426539",
    "end": "1432870"
  },
  {
    "text": "can do here is I can basically say Sam and in case you didn't know once you install the same CLI you can always at",
    "start": "1432870",
    "end": "1439049"
  },
  {
    "text": "any point to stay same help and you can see there's only a handful of commands just I'll pull this up here first so you",
    "start": "1439049",
    "end": "1444929"
  },
  {
    "text": "can see so for today's purposes we'll go ahead and use something called salmon it which is initialize a sample application",
    "start": "1444929",
    "end": "1452610"
  },
  {
    "text": "so we'll say salmon it and we'll say help and you can see here all we have to",
    "start": "1452610",
    "end": "1457650"
  },
  {
    "text": "provide that's mandatory is the runtime and so I'll say this is going to be a no",
    "start": "1457650",
    "end": "1463260"
  },
  {
    "text": "js' let's say 8.10 you know application and I'll say this",
    "start": "1463260",
    "end": "1469080"
  },
  {
    "text": "is going to be demo app it's the name of my hat okay well it's gone ahead and generated",
    "start": "1469080",
    "end": "1476310"
  },
  {
    "text": "not only a SAM template that already has a lot of things out of the box but it's generated a nice framework and folder",
    "start": "1476310",
    "end": "1482430"
  },
  {
    "text": "structure for my functions so let me go over here and you can see on the Left what we've created so demo app by",
    "start": "1482430",
    "end": "1489660"
  },
  {
    "text": "default here's our Sam template simply go look at it we can see it has a",
    "start": "1489660",
    "end": "1495180"
  },
  {
    "text": "transform serverless AWS server loose right description our global section for",
    "start": "1495180",
    "end": "1500640"
  },
  {
    "text": "all of our global config we have a single function right now it's called hello world and we have an API",
    "start": "1500640",
    "end": "1507500"
  },
  {
    "text": "invocation source so this means by just having this this simple bit right here",
    "start": "1507500",
    "end": "1512550"
  },
  {
    "text": "that's all it takes and it'll know to configure API gateway integrated with our lambda function and so in this case",
    "start": "1512550",
    "end": "1518820"
  },
  {
    "text": "I'm gonna take off hello as the path because we'll just have a single get and",
    "start": "1518820",
    "end": "1524340"
  },
  {
    "text": "then we have our outputs so what's nice here for those of you that have been looking at this today and thinking well",
    "start": "1524340",
    "end": "1529800"
  },
  {
    "text": "how can I do all my traditional things that I do as a developer like run my",
    "start": "1529800",
    "end": "1534990"
  },
  {
    "text": "unit tests do local testing right not have to push to lambda wait for logs to",
    "start": "1534990",
    "end": "1540210"
  },
  {
    "text": "show up eventually how can I make this quick well what's neat is with Sam CLI we actually have the duck the lambda",
    "start": "1540210",
    "end": "1547080"
  },
  {
    "text": "runtime that's been derived so a lambda compatible docker environment is out",
    "start": "1547080",
    "end": "1552240"
  },
  {
    "text": "there so it allows you to actually run the API locally and live reload your",
    "start": "1552240",
    "end": "1557790"
  },
  {
    "text": "changes assuming it's an interpreted language so if I just do Sam local start API here",
    "start": "1557790",
    "end": "1563460"
  },
  {
    "text": "let me go on the right folder",
    "start": "1563460",
    "end": "1566690"
  },
  {
    "text": "then you can see this is already running on port 3000 so just to show you what's",
    "start": "1571110",
    "end": "1578169"
  },
  {
    "text": "going on here and I haven't done anything yet it's just boilerplate code I can go curl here and I can see hello",
    "start": "1578169",
    "end": "1585850"
  },
  {
    "text": "world came back right and if I go into my function you can see I have a package.json and there's like any node",
    "start": "1585850",
    "end": "1592539"
  },
  {
    "text": "JSF and I have a PAS and this is just a default you know boilerplate kind of",
    "start": "1592539",
    "end": "1599110"
  },
  {
    "text": "handler here that just sends a 200 response that says hello world but all it takes to even just start to get some",
    "start": "1599110",
    "end": "1605740"
  },
  {
    "text": "dynamic interactions here I can even you know out of the box this will pull your IP address of the sandbox and return",
    "start": "1605740",
    "end": "1613360"
  },
  {
    "text": "then and so just making these quick changes if I go ahead and run curl again",
    "start": "1613360",
    "end": "1620010"
  },
  {
    "text": "let's see what's going on oh I haven't installed my dependencies so that brings us to another thing we",
    "start": "1620010",
    "end": "1625899"
  },
  {
    "text": "need to do but first to actually show you this so in this particular case I'm",
    "start": "1625899",
    "end": "1634570"
  },
  {
    "text": "using a library here called Axios it has an NPM package and it wasn't installed",
    "start": "1634570",
    "end": "1640000"
  },
  {
    "text": "right so there's nothing that could actually resolve that but now I've resolved my dependencies and what's",
    "start": "1640000",
    "end": "1645730"
  },
  {
    "text": "great about Sam is you actually don't have to do anything each time so if you",
    "start": "1645730",
    "end": "1652360"
  },
  {
    "text": "look now it went ahead and ran no and I have something commented out where am I",
    "start": "1652360",
    "end": "1662769"
  },
  {
    "text": "missing the declaration here so now you",
    "start": "1662769",
    "end": "1668289"
  },
  {
    "text": "know in terms of quick debugging experience there you go right I didn't have to go stop and start",
    "start": "1668289",
    "end": "1673330"
  },
  {
    "text": "processes library load full emulation of the API there are some exceptions like",
    "start": "1673330",
    "end": "1679120"
  },
  {
    "text": "authorizers and things like that it just won't emulate the authorizers today but you can see now I've got hello world",
    "start": "1679120",
    "end": "1684909"
  },
  {
    "text": "back and I have the IP address the same box coming in as well so that's a look",
    "start": "1684909",
    "end": "1691210"
  },
  {
    "text": "at you know a simple basic project let's look at one that shows you a little bit",
    "start": "1691210",
    "end": "1696220"
  },
  {
    "text": "more of what we talked about so speaking of configuration so first",
    "start": "1696220",
    "end": "1701740"
  },
  {
    "text": "let me go in here just to show you how to get to this if you go to systems manager this service I think is is commonly",
    "start": "1701740",
    "end": "1707919"
  },
  {
    "text": "overlooked it has it's an entirely free service on Prem or in the cloud server lists or instance based and one of the",
    "start": "1707919",
    "end": "1715360"
  },
  {
    "text": "features of it it has many features but one of them is parameters store and so you can see here I have variety of",
    "start": "1715360",
    "end": "1721090"
  },
  {
    "text": "parameters I've defined so far go back",
    "start": "1721090",
    "end": "1726570"
  },
  {
    "text": "and here in particular if you notice I have in this environment this is a dev environment so I've actually named",
    "start": "1726570",
    "end": "1733480"
  },
  {
    "text": "things slash environment slash dev and that's strategic because I can actually",
    "start": "1733480",
    "end": "1738490"
  },
  {
    "text": "restrict permissions based on the stream and so I can actually say certain paths this thing could get to a certain pass",
    "start": "1738490",
    "end": "1744309"
  },
  {
    "text": "that thing could get to so you want to be thoughtful about kind of the path structure but let's say database name",
    "start": "1744309",
    "end": "1750190"
  },
  {
    "text": "you know is here in the serverless world this is like a dynamo table name something like that but but let's just",
    "start": "1750190",
    "end": "1756070"
  },
  {
    "text": "say in this case this is going to be SF demo you know Tim right so we went ahead",
    "start": "1756070",
    "end": "1763210"
  },
  {
    "text": "and just save that change now unlike an environmental variable where I'd have to go change all these functions if I'm",
    "start": "1763210",
    "end": "1768940"
  },
  {
    "text": "pulling that in my code I don't have to do anything it's immediately available so let's go ahead and see how that could",
    "start": "1768940",
    "end": "1775059"
  },
  {
    "text": "be pulled in the other thing I had here just to show you was an API key and if",
    "start": "1775059",
    "end": "1780970"
  },
  {
    "text": "you notice that's a secure string so this is encrypted with kms so to go back",
    "start": "1780970",
    "end": "1787750"
  },
  {
    "text": "here I'll pull up the template of this project I have called dynamic parameters",
    "start": "1787750",
    "end": "1793799"
  },
  {
    "text": "and let's look at this and you can see in here a few differences so one I have",
    "start": "1793799",
    "end": "1800380"
  },
  {
    "text": "the folder fetch parameters I can pull up my handler but I do need access you know to permissions in AWS to be able to",
    "start": "1800380",
    "end": "1807490"
  },
  {
    "text": "talk to that key to decrypt those secrets and I need access to be able to get that parameter right from Systems",
    "start": "1807490",
    "end": "1814210"
  },
  {
    "text": "Manager so I have a policy in here that allows me to get parameters by path and it's only allowing me to go to slash",
    "start": "1814210",
    "end": "1821140"
  },
  {
    "text": "environments and I could use those variables here like we were talking about to say slash dev if this was",
    "start": "1821140",
    "end": "1826270"
  },
  {
    "text": "deployed for Deb and then this is also backing an API gateway deployment with a",
    "start": "1826270",
    "end": "1832750"
  },
  {
    "text": "get method so to show this to you he let me go into the code so you can see",
    "start": "1832750",
    "end": "1839080"
  },
  {
    "text": "as well so here's the code of this function this is an odious function and",
    "start": "1839080",
    "end": "1846960"
  },
  {
    "text": "what you can see here is basically you",
    "start": "1846960",
    "end": "1853240"
  },
  {
    "text": "can basically see that the different responses here around how it's initialized etc and so one of the key",
    "start": "1853240",
    "end": "1858340"
  },
  {
    "text": "things that's been broken out is this notion of initialization so with",
    "start": "1858340",
    "end": "1863800"
  },
  {
    "text": "initialization things like you know in this case pulling the parameters right the database name these kind of things I",
    "start": "1863800",
    "end": "1870610"
  },
  {
    "text": "don't need to do that every time someone fires that function if I could do that just upfront I would save a lot of time",
    "start": "1870610",
    "end": "1875770"
  },
  {
    "text": "and actually have my future indications be a lot faster by doing that outside of",
    "start": "1875770",
    "end": "1882010"
  },
  {
    "text": "the handler so that's why I actually have this wrapped in a promise and where I'm actually checking the status of this",
    "start": "1882010",
    "end": "1888310"
  },
  {
    "text": "as a thing outside of the handler and then ultimately just like before you",
    "start": "1888310",
    "end": "1893890"
  },
  {
    "text": "know we're returning our location but this time we're pulling in a parameters map so if I go down here this is what",
    "start": "1893890",
    "end": "1901240"
  },
  {
    "text": "our initialization function is doing it's actually going to get parameters by path and the path I have as up here as a",
    "start": "1901240",
    "end": "1908440"
  },
  {
    "text": "constant it's anything in slash environment slash dev so as you can see here I have multiple parameters but only",
    "start": "1908440",
    "end": "1915100"
  },
  {
    "text": "two of them or that of that path the rest relate to a Twitter app and then",
    "start": "1915100",
    "end": "1922960"
  },
  {
    "text": "I'm pulling those in and I'm just basically populating a map and then I'm saying this is initialized and that's it",
    "start": "1922960",
    "end": "1929910"
  },
  {
    "text": "so let's go ahead and take a look at this as well so let's see dynamic",
    "start": "1929910",
    "end": "1938010"
  },
  {
    "text": "parameters c-sam local",
    "start": "1938010",
    "end": "1946110"
  },
  {
    "text": "what's going on I think I might have",
    "start": "1953770",
    "end": "1961160"
  },
  {
    "text": "just met this guy up actually um Maci I have another one where I was just",
    "start": "1961160",
    "end": "1966650"
  },
  {
    "text": "messing with the same function right here",
    "start": "1966650",
    "end": "1970899"
  },
  {
    "text": "hmm oh I know it looks like I have a dependency issue Oh address already in",
    "start": "1987680",
    "end": "2000160"
  },
  {
    "text": "use I actually have a socket issue so it's trying to use port 3000 I have a",
    "start": "2000160",
    "end": "2006010"
  },
  {
    "text": "terminal window that was using it so I have a socket issue going on and unfortunately this is something with",
    "start": "2006010",
    "end": "2011440"
  },
  {
    "text": "cloud 9 where if you close all your windows it can be a little bit harder to get back to that so what I'll do real",
    "start": "2011440",
    "end": "2016960"
  },
  {
    "text": "quick is I'll actually just restart my dev environment to free up that connection rather than you know waste",
    "start": "2016960",
    "end": "2023830"
  },
  {
    "text": "the time troubleshooting and I'll show you some other stuff at the same time let me restart them and you can of",
    "start": "2023830",
    "end": "2031570"
  },
  {
    "text": "course go configure the ports and everything but by default that's just running on port at 3000 and I said you",
    "start": "2031570",
    "end": "2040840"
  },
  {
    "text": "know cloud 9 is powered by an ec2 instance or you can power it by SSH to your own hardware wherever it may be as",
    "start": "2040840",
    "end": "2047770"
  },
  {
    "text": "long as it's public endpoint so while that goes let's go look at the lambda console at this as well so when we",
    "start": "2047770",
    "end": "2054700"
  },
  {
    "text": "deploy a Sam template what what you'll notice here in the console is you have functions and if you guys had looked at",
    "start": "2054700",
    "end": "2061898"
  },
  {
    "text": "your last labs I don't know how many of you dug into your functions you know you would see let me pick a function",
    "start": "2061899",
    "end": "2067720"
  },
  {
    "text": "actually I'll go into one of my applications we're gonna look at here so",
    "start": "2067720",
    "end": "2073530"
  },
  {
    "text": "for instance this parameters application one thing you'll see here is within that",
    "start": "2073530",
    "end": "2081250"
  },
  {
    "text": "application the simple notion for us is anything you deploy with Sam we consider an application so if you deploy it with",
    "start": "2081250",
    "end": "2087220"
  },
  {
    "text": "the same template it will show up under applications if you don't even if you use cloud formation what cloud formation",
    "start": "2087220",
    "end": "2092590"
  },
  {
    "text": "actually does to a stack but if you deploy it any other way we're just going to see the functions as they are so when",
    "start": "2092590",
    "end": "2099460"
  },
  {
    "text": "you deploy an application you see the various resources here and you can see all of their components so I have a",
    "start": "2099460",
    "end": "2105520"
  },
  {
    "text": "restful api I have my endpoint I have my function and when I click into the",
    "start": "2105520",
    "end": "2111010"
  },
  {
    "text": "function this is where you can see but on the left hand side what is your",
    "start": "2111010",
    "end": "2117460"
  },
  {
    "text": "invocation source your event sources it could be more than one so this is giggling and then as I mentioned the",
    "start": "2117460",
    "end": "2124070"
  },
  {
    "text": "policies around how it can get invoked it's showing you effectively here what is that policy down here right and then",
    "start": "2124070",
    "end": "2130370"
  },
  {
    "text": "on the right-hand side it's showing you what is its execution policy so what can it do so this particular function can",
    "start": "2130370",
    "end": "2137270"
  },
  {
    "text": "write its logs to cloud watch and we can go down and we can see oh it has the right to put log events it has the",
    "start": "2137270",
    "end": "2144410"
  },
  {
    "text": "ability to write to x-ray which you heard about earlier which is a distributed tracing service so this is",
    "start": "2144410",
    "end": "2151550"
  },
  {
    "text": "very powerful to be able to figure out what's going on with the distributed environment lots of components and then",
    "start": "2151550",
    "end": "2157550"
  },
  {
    "text": "it has the ability to reach out to Systems Manager so without this I am",
    "start": "2157550",
    "end": "2163250"
  },
  {
    "text": "permission we wouldn't be able to get our attributes pulled back and so anyway",
    "start": "2163250",
    "end": "2168410"
  },
  {
    "text": "this is just a look at the lambda function to show you as well the",
    "start": "2168410",
    "end": "2173930"
  },
  {
    "text": "application will go into one here and",
    "start": "2173930",
    "end": "2180920"
  },
  {
    "text": "actually you can see here this original Sam template it's persisted with the application you can even see the cloud",
    "start": "2180920",
    "end": "2188030"
  },
  {
    "text": "formation it became which is much more verbose but that's the same template and then you have the ability to actually",
    "start": "2188030",
    "end": "2193730"
  },
  {
    "text": "look in here at the different endpoints so you can see we have a deployment and we have our Pradhan point so the code I",
    "start": "2193730",
    "end": "2200540"
  },
  {
    "text": "was just showing you I will actually deploy in just a moment to pull up here but you can you know you could go ahead",
    "start": "2200540",
    "end": "2206270"
  },
  {
    "text": "and dig into the API as well and see everything let's just all link together with our application view and this is a",
    "start": "2206270",
    "end": "2213020"
  },
  {
    "text": "very simple API we just have a get method right now and then we have this notion that you learned this morning",
    "start": "2213020",
    "end": "2219350"
  },
  {
    "text": "with API gateway even if you're not using lambda today API gateway can still offload a lot of the burdens of API",
    "start": "2219350",
    "end": "2225710"
  },
  {
    "text": "management from you because you can integrate with any HTTP endpoint out there containers ec2 etc you can also",
    "start": "2225710",
    "end": "2233000"
  },
  {
    "text": "integrate with anything behind your V PC so it doesn't have to be a public endpoint and then another thing that's",
    "start": "2233000",
    "end": "2239450"
  },
  {
    "text": "overlooked is what we call a it'll be a service proxy so this is the ability at high scale to have an API gateway",
    "start": "2239450",
    "end": "2246620"
  },
  {
    "text": "deployment talk to something like s3 talk to sqs or Kinesis so if all you're",
    "start": "2246620",
    "end": "2253430"
  },
  {
    "text": "doing is getting orders you want to be asynchronous then you just want to queue them right away right",
    "start": "2253430",
    "end": "2258770"
  },
  {
    "text": "and then you can have lambda work through the queue but there's no reason to have lambda be in the middle to get to that queue you save cost and you save",
    "start": "2258770",
    "end": "2265610"
  },
  {
    "text": "latency by not doing that so that's what this is so to jump back let's jump back",
    "start": "2265610",
    "end": "2272420"
  },
  {
    "text": "over and we'll have a look here so this",
    "start": "2272420",
    "end": "2277730"
  },
  {
    "text": "is going",
    "start": "2277730",
    "end": "2280150"
  },
  {
    "text": "okay we're reconnected see so now I'm",
    "start": "2287350",
    "end": "2298460"
  },
  {
    "text": "because I didn't have a rogue process stealing my port I have this running again right on port 3000 and so I can go",
    "start": "2298460",
    "end": "2306200"
  },
  {
    "text": "ahead and I can curl this just as before",
    "start": "2306200",
    "end": "2312170"
  },
  {
    "text": "and the code that I showed you earlier about actually pulling those parameters here it is just for sake of showing you",
    "start": "2312170",
    "end": "2319130"
  },
  {
    "text": "in plain text I've decrypted the API key of two three four five six and you have the database name right and it's all",
    "start": "2319130",
    "end": "2325250"
  },
  {
    "text": "here now if we go ahead and deploy this let's go ahead and actually deploy this",
    "start": "2325250",
    "end": "2332060"
  },
  {
    "text": "guy I'll go back to here to deploy it so",
    "start": "2332060",
    "end": "2340730"
  },
  {
    "text": "there's two commands that are used to deploy it there's Sam package which will take all of your code locally and zip it",
    "start": "2340730",
    "end": "2346790"
  },
  {
    "text": "for you and and take care of all that of course you need to have the dependencies there first we have a command called Sam",
    "start": "2346790",
    "end": "2353270"
  },
  {
    "text": "build to actually build and install your dependencies as well and so here all I'm",
    "start": "2353270",
    "end": "2358880"
  },
  {
    "text": "doing is I'm running Sam package I have my template of my Sam template and then it's going to basically rewrite that",
    "start": "2358880",
    "end": "2364820"
  },
  {
    "text": "template with my new location and s3 and some minimal transformation and my code",
    "start": "2364820",
    "end": "2372740"
  },
  {
    "text": "just got uploaded that quickly and then now I can basically go ahead and run Sam deploy so let's see now that I have this",
    "start": "2372740",
    "end": "2380780"
  },
  {
    "text": "all locally ready to go so in this case let's I'll go ahead and modify this I",
    "start": "2380780",
    "end": "2389020"
  },
  {
    "text": "just need to give it the name of the stack that we're updating",
    "start": "2389020",
    "end": "2394150"
  },
  {
    "text": "okay and so this is going to go ahead and send that template to CloudFormation",
    "start": "2400460",
    "end": "2405800"
  },
  {
    "text": "it's going to transform it and it's going to basically deployed for us and you can see it's in this particular case",
    "start": "2405800",
    "end": "2412700"
  },
  {
    "text": "I just done this deployment and it says it's actually up to date so if we go out there we can go look in cloud formation",
    "start": "2412700",
    "end": "2421180"
  },
  {
    "text": "and we can see this template dynamic parameters so within it we have all the",
    "start": "2421180",
    "end": "2428390"
  },
  {
    "text": "things we saw on the lambda console but the important thing here is we have a fully functional API now that we can hit",
    "start": "2428390",
    "end": "2435020"
  },
  {
    "text": "at high skill so when I go to hit this API here it is our parameter map things",
    "start": "2435020",
    "end": "2442160"
  },
  {
    "text": "I pulled in right that I only need to pull in an initialization and then if you notice in this parameter map you",
    "start": "2442160",
    "end": "2449630"
  },
  {
    "text": "know we have a database name right SF demo 10 well if I go back over here let's change our database name let's say",
    "start": "2449630",
    "end": "2459260"
  },
  {
    "text": "it's 15 now now if you remember I had that intentionally outside of the handler right so even though I'm gonna",
    "start": "2459260",
    "end": "2466520"
  },
  {
    "text": "refresh this this number will not probably change here because I'm likely gonna be using the same sandbox where",
    "start": "2466520",
    "end": "2472490"
  },
  {
    "text": "I've just initialized this to keep it out of the handler and if you notice it's still 10 but if I go back to Sam to",
    "start": "2472490",
    "end": "2479720"
  },
  {
    "text": "my local environment and I we're on to run this command with the local API in",
    "start": "2479720",
    "end": "2485000"
  },
  {
    "text": "Sam you'll always get your latest you know return so if you notice I got SF",
    "start": "2485000",
    "end": "2490730"
  },
  {
    "text": "demo 15 now there are benefits of that if you if with lambda you pay for the",
    "start": "2490730",
    "end": "2496520"
  },
  {
    "text": "time it takes to run you it's 100 millisecond increments as metered so actually we've shaved 500 milliseconds",
    "start": "2496520",
    "end": "2502220"
  },
  {
    "text": "or more off of that just in this small example for every future execution and those are what we call warm starts so",
    "start": "2502220",
    "end": "2509210"
  },
  {
    "text": "this here we're anyway so that is a look at dynamic parameters so let's go back",
    "start": "2509210",
    "end": "2516590"
  },
  {
    "text": "to other topics and a look at same as well",
    "start": "2516590",
    "end": "2522339"
  },
  {
    "text": "so we talked about how to go ahead and you know break down the application",
    "start": "2525040",
    "end": "2530870"
  },
  {
    "text": "right all this duplicated code that you could have well Sam has helped you you",
    "start": "2530870",
    "end": "2535880"
  },
  {
    "text": "know isolate that deploy it break it into chunks but what else could you do well we have something if you look if we",
    "start": "2535880",
    "end": "2543050"
  },
  {
    "text": "take our core we you know modular business logic that's redundant and pull it out and we take our helper functions",
    "start": "2543050",
    "end": "2549380"
  },
  {
    "text": "and pull them out as well then the handlers and very few other things are different between those other functions",
    "start": "2549380",
    "end": "2555440"
  },
  {
    "text": "so because of this kind of reusability that we're seeking with our code in general we have the feature called",
    "start": "2555440",
    "end": "2561530"
  },
  {
    "text": "lambda layers and so this launched in November of 2018 this is new so lambda layers allow you to basically upload a",
    "start": "2561530",
    "end": "2568550"
  },
  {
    "text": "layer once and then reference that anywhere on any function and this is a code you can think of it similar to",
    "start": "2568550",
    "end": "2573770"
  },
  {
    "text": "package managers like pip or NPM or something like that but what lambda layers allow you to do is they allow you",
    "start": "2573770",
    "end": "2579680"
  },
  {
    "text": "to share any any dependencies perhaps that you have a governance team or",
    "start": "2579680",
    "end": "2585560"
  },
  {
    "text": "security team and they want to inject some security agent right in every runtime or something like that have a",
    "start": "2585560",
    "end": "2592130"
  },
  {
    "text": "question sure I'll actually show you a",
    "start": "2592130",
    "end": "2598670"
  },
  {
    "text": "demo with that but you can upload the layer direct to the lambda service and then you just reference it from your",
    "start": "2598670",
    "end": "2603830"
  },
  {
    "text": "lambda function so it'll make more sense I'll show you in the console real quick but this allows you to iterate faster as",
    "start": "2603830",
    "end": "2610400"
  },
  {
    "text": "developers and allow others to focus on their you know business logic right",
    "start": "2610400",
    "end": "2615640"
  },
  {
    "text": "additionally if you have things like the AWS SDK we do recommend is a best practice to not keep we bundle a version",
    "start": "2615640",
    "end": "2623240"
  },
  {
    "text": "into the lamb to run time but we recommend you pull out the SDK and lock it into the version you need for your",
    "start": "2623240",
    "end": "2628880"
  },
  {
    "text": "code at that time that may be something you'd want to ship as a layer as an example so the way these work they just",
    "start": "2628880",
    "end": "2637640"
  },
  {
    "start": "2635000",
    "end": "2635000"
  },
  {
    "text": "like a lambda function they go in a zip file they're also immutable and you can have up to five layers and a function and the",
    "start": "2637640",
    "end": "2644300"
  },
  {
    "text": "way they work is they have an order that they're applied so the the later order of them just because it is a file system",
    "start": "2644300",
    "end": "2651320"
  },
  {
    "text": "and they're being collapsed and expanded on the file system files could override earlier files so you want to be",
    "start": "2651320",
    "end": "2657800"
  },
  {
    "text": "thoughtful the order of which you actually sequence your layers if you have multiple layers and then you know they all get extracted",
    "start": "2657800",
    "end": "2666380"
  },
  {
    "start": "2664000",
    "end": "2664000"
  },
  {
    "text": "to the /opt directory and then fundamentally you know all these layers what's nice about them though is you",
    "start": "2666380",
    "end": "2672950"
  },
  {
    "text": "upload the layer once whatever amount of storage that is one time you've uploaded everything else is just the other code",
    "start": "2672950",
    "end": "2678650"
  },
  {
    "text": "that was smaller right so your developer cycle now could get faster because you're uploading less code even with",
    "start": "2678650",
    "end": "2684770"
  },
  {
    "text": "something like SEM package less code to transfer faster to get a rate faster to see a changes and then of course if",
    "start": "2684770",
    "end": "2692690"
  },
  {
    "start": "2691000",
    "end": "2691000"
  },
  {
    "text": "you're including dependencies and libraries which which most people would then depending on the runtime you want",
    "start": "2692690",
    "end": "2698300"
  },
  {
    "text": "to put it in particular folders because the goal would be that you could just require it in your code like a global",
    "start": "2698300",
    "end": "2703790"
  },
  {
    "text": "module and you don't have to know where it's installed where it is so for that to work perfectly you need to be conscious of the paths and the folder",
    "start": "2703790",
    "end": "2710690"
  },
  {
    "text": "structure where you actually put these packages whether they're ruby gems or pip packages or NPM modules you know the",
    "start": "2710690",
    "end": "2718369"
  },
  {
    "text": "appropriate folders are there and then as you asked about earlier how can you",
    "start": "2718369",
    "end": "2723440"
  },
  {
    "text": "use these right well the first step is to actually create the layer so you create the zip file and then you create",
    "start": "2723440",
    "end": "2728900"
  },
  {
    "text": "the logical construct of a layer and then you reference the layer in your actual functions so we could well we'll",
    "start": "2728900",
    "end": "2735380"
  },
  {
    "text": "look at this shortly as well and then the final thing I wanted to mention layers are the level of reuse at the",
    "start": "2735380",
    "end": "2741560"
  },
  {
    "text": "lambda layer right or at the lambda runtime components but more broadly you",
    "start": "2741560",
    "end": "2748280"
  },
  {
    "text": "have functionality that may be common across many applications so maybe reading a queue right or having an API",
    "start": "2748280",
    "end": "2754820"
  },
  {
    "text": "talk to a queue and then have lambda read through the queue something like",
    "start": "2754820",
    "end": "2760099"
  },
  {
    "text": "that you could actually break out into different applications that can then be composed themselves into bigger",
    "start": "2760099",
    "end": "2766460"
  },
  {
    "text": "applications and so we have something out today called the serverless application repository which is",
    "start": "2766460",
    "end": "2772460"
  },
  {
    "text": "available for your use you can all it requires as a Sam template of your code and the same template as you saw can be",
    "start": "2772460",
    "end": "2779420"
  },
  {
    "text": "parameterized so you can upload your template to this and then you can have other applications reference your",
    "start": "2779420",
    "end": "2786380"
  },
  {
    "text": "template so it can be private for your own account you can choose to share it with other",
    "start": "2786380",
    "end": "2791700"
  },
  {
    "text": "explicitly named accounts or you can make it public for the world so today we have hundreds of these that are public",
    "start": "2791700",
    "end": "2798000"
  },
  {
    "text": "out there right now that you could consume for your regular use and you in",
    "start": "2798000",
    "end": "2804390"
  },
  {
    "start": "2802000",
    "end": "2802000"
  },
  {
    "text": "the nice thing when you want to go find something that does a particular thing this is an example of like basic off for",
    "start": "2804390",
    "end": "2810570"
  },
  {
    "text": "API gateway we have a application that you can just drop in and parameterize",
    "start": "2810570",
    "end": "2815670"
  },
  {
    "text": "and hook into your app very easily similar for other things like processing",
    "start": "2815670",
    "end": "2821130"
  },
  {
    "text": "tweets or sentiment analysis from Twitter I have an example that I'll try and show you so the way these work is",
    "start": "2821130",
    "end": "2827970"
  },
  {
    "text": "you have your Sam template and it references another application is inside",
    "start": "2827970",
    "end": "2833040"
  },
  {
    "text": "the template itself so effectively what happens because CloudFormation runs is it's a nested stack the thing that",
    "start": "2833040",
    "end": "2839640"
  },
  {
    "text": "you've referenced becomes nested and separate and then your top-level stack is your application so that's what you",
    "start": "2839640",
    "end": "2845580"
  },
  {
    "text": "see in your account that gets deployed that you manage this is an example of",
    "start": "2845580",
    "end": "2852240"
  },
  {
    "text": "referencing an application here so all you need is basically the AR in if you haven't heard that before that's amazon",
    "start": "2852240",
    "end": "2858030"
  },
  {
    "text": "resource name that's a unique identifier for any resource and AWS you need that and then we have semantic versioning too",
    "start": "2858030",
    "end": "2864480"
  },
  {
    "text": "so like any good code module you want to lock in the version of the application that you're using",
    "start": "2864480",
    "end": "2869610"
  },
  {
    "text": "just like our layers are also versioned immutably so you can always have that ready so for a final quick demo let's",
    "start": "2869610",
    "end": "2880500"
  },
  {
    "text": "first look at creating a layer let me go",
    "start": "2880500",
    "end": "2885570"
  },
  {
    "text": "back to cloud 9 and let's go into the",
    "start": "2885570",
    "end": "2891240"
  },
  {
    "text": "project so so in this particular project dynamic parameters I just want to show you here for those that aren't familiar",
    "start": "2891240",
    "end": "2896880"
  },
  {
    "text": "with node actually I'll show it here those that aren't familiar with node you",
    "start": "2896880",
    "end": "2903480"
  },
  {
    "text": "know you have the concept of NPM packages right just like pip packages or something and I only have four that are",
    "start": "2903480",
    "end": "2910290"
  },
  {
    "text": "actually required here but two in particular I would like to use in many different things so the AWS SDK and our",
    "start": "2910290",
    "end": "2917520"
  },
  {
    "text": "SDK for something called x-ray our tracing service so those are both available but if you look because I",
    "start": "2917520",
    "end": "2924750"
  },
  {
    "text": "those there what happens is obviously those are built into the zip file and when I go and actually try and look at",
    "start": "2924750",
    "end": "2931170"
  },
  {
    "text": "this up in a double yes and I go to the lambda consul then what I'll see is I'll",
    "start": "2931170",
    "end": "2939690"
  },
  {
    "text": "see here my function code it says you know rather than seeing the in browser IDE of my code and all that it's more",
    "start": "2939690",
    "end": "2945930"
  },
  {
    "text": "than a few megabytes big so I can't see it inline I can't actually modify it here I'm forced to do everything in Sam",
    "start": "2945930",
    "end": "2951900"
  },
  {
    "text": "in my own Deb machine then upload it right but if I were to pull out the bulk",
    "start": "2951900",
    "end": "2957390"
  },
  {
    "text": "of that which is just AWS SDKs right now that I've embedded then of my code the rest of the code would be much smaller",
    "start": "2957390",
    "end": "2963420"
  },
  {
    "text": "and I would just reference that layer so I can do that here and make this reusable so to go in I actually created",
    "start": "2963420",
    "end": "2971550"
  },
  {
    "text": "a little project here called AWS node layer and all it is this is a super",
    "start": "2971550",
    "end": "2977820"
  },
  {
    "text": "simple project all I do is I just have a package JSON with the two dependencies and then because I needed it to go in",
    "start": "2977820",
    "end": "2984300"
  },
  {
    "text": "the proper path folder I created the nodejs directory in the node modules folder and I just need to make sure that",
    "start": "2984300",
    "end": "2990990"
  },
  {
    "text": "dependency is installed there but all I did was run NPM install and all of these",
    "start": "2990990",
    "end": "2996260"
  },
  {
    "text": "packages came from dependencies of these two packages that I had said they're all",
    "start": "2996260",
    "end": "3002000"
  },
  {
    "text": "there but I don't have actual code to run it's just libraries I want to use right so my Sam template for this is",
    "start": "3002000",
    "end": "3008960"
  },
  {
    "text": "very very basic I just say I have a layer version I'm gonna call this you",
    "start": "3008960",
    "end": "3014210"
  },
  {
    "text": "know lambda layer node that's actually I'll just say it node AWS SDKs I've got",
    "start": "3014210",
    "end": "3022010"
  },
  {
    "text": "my description I do have to list for any layer of my compatible runtimes and then this is a really important",
    "start": "3022010",
    "end": "3028730"
  },
  {
    "text": "feature to which is retain policy so if I were to go out and I delete my CloudFormation template what happens to",
    "start": "3028730",
    "end": "3035600"
  },
  {
    "text": "the layers that I already published by saying retain they will stick around they don't get deleted unless I go",
    "start": "3035600",
    "end": "3041330"
  },
  {
    "text": "explicitly delete them so that's all it is there and because it's the same template I deploy it like anything else",
    "start": "3041330",
    "end": "3046940"
  },
  {
    "text": "so let's go back and let's see here we're gonna package it oh let me change",
    "start": "3046940",
    "end": "3053660"
  },
  {
    "text": "folders",
    "start": "3053660",
    "end": "3056079"
  },
  {
    "text": "so went ahead and got uploaded and then we're also going to deploy so let's I'm",
    "start": "3064560",
    "end": "3071200"
  },
  {
    "text": "going to change this now - I'm going to",
    "start": "3071200",
    "end": "3083530"
  },
  {
    "text": "change this to node lambda layer",
    "start": "3083530",
    "end": "3086880"
  },
  {
    "text": "and so this will just take a moment here what a change set is by the way if you if you haven't worked much with",
    "start": "3092430",
    "end": "3097890"
  },
  {
    "text": "CloudFormation you have the ability to just call something called update stack right but the problem with update stack",
    "start": "3097890",
    "end": "3104340"
  },
  {
    "text": "is it would just do whatever it needed to make it the before and the after the before become the after right so",
    "start": "3104340",
    "end": "3110190"
  },
  {
    "text": "sometimes that may involve replacing or deleting things that you had created what a change set does is it just allows",
    "start": "3110190",
    "end": "3115800"
  },
  {
    "text": "you to see what's gonna change if I go ahead and update the stack so it allows you if you want to stop and say oh it's",
    "start": "3115800",
    "end": "3121470"
  },
  {
    "text": "gonna delete these things and recreate these things just because I changed this SSH key you can stop the process and",
    "start": "3121470",
    "end": "3127560"
  },
  {
    "text": "intervene so we always recommend using change sets whenever possible so we've got that deployed now let's go out here",
    "start": "3127560",
    "end": "3134730"
  },
  {
    "text": "to lamda and I'll go first to cloud formation and you'll see with Sam here's",
    "start": "3134730",
    "end": "3141990"
  },
  {
    "text": "our new deployment and then if I go over to lamda and the lambda console let me",
    "start": "3141990",
    "end": "3147690"
  },
  {
    "text": "actually go and refresh and it's already there and you can see I'm on version 1 I",
    "start": "3147690",
    "end": "3153480"
  },
  {
    "text": "didn't specify a version these auto number and so here is our new layer so I can see you know note 8 and here's the",
    "start": "3153480",
    "end": "3161190"
  },
  {
    "text": "important thing I just need the version air in of this layer and I can go back here now",
    "start": "3161190",
    "end": "3166200"
  },
  {
    "text": "and I can go down under the template file and all you have to do is add this",
    "start": "3166200",
    "end": "3177330"
  },
  {
    "text": "particular layers reference right just",
    "start": "3177330",
    "end": "3183240"
  },
  {
    "text": "being here and so you can see you know dynamic parameters same function as",
    "start": "3183240",
    "end": "3189930"
  },
  {
    "text": "before the only difference is I have the layers the only other difference is if you notice out here I don't have any AWS",
    "start": "3189930",
    "end": "3197100"
  },
  {
    "text": "packages I've pulled them all out in my package JSON doesn't have my AWS SDKs at",
    "start": "3197100",
    "end": "3203490"
  },
  {
    "text": "all anymore right they're gone but in my code itself I changed nothing I just say require the",
    "start": "3203490",
    "end": "3209010"
  },
  {
    "text": "AWS SDK require AWS stuff that's it so now with Sam just as before I can still",
    "start": "3209010",
    "end": "3216720"
  },
  {
    "text": "start let me get to the right folder",
    "start": "3216720",
    "end": "3221000"
  },
  {
    "text": "I can start an environment I can go",
    "start": "3222660",
    "end": "3229559"
  },
  {
    "text": "ahead and do any curl or anything else I want to do and if I go back over here to",
    "start": "3229559",
    "end": "3235380"
  },
  {
    "text": "the log if you can see this is all using docker right so it says image was not found it actually pulled down my lair",
    "start": "3235380",
    "end": "3241740"
  },
  {
    "text": "from the lambda service it's building my image mounting it locally into the",
    "start": "3241740",
    "end": "3247440"
  },
  {
    "text": "lambda virtual docker environment and then now I'm actually able to see my",
    "start": "3247440",
    "end": "3252660"
  },
  {
    "text": "response and my response just as before just like it was right but now I have that reusable and the other benefit too",
    "start": "3252660",
    "end": "3259349"
  },
  {
    "text": "if I go back into my functions then I can see let me go to applications same",
    "start": "3259349",
    "end": "3268500"
  },
  {
    "text": "function as before see it just pulls it",
    "start": "3268500",
    "end": "3274049"
  },
  {
    "text": "up here's what I wanted so just like we",
    "start": "3274049",
    "end": "3283920"
  },
  {
    "text": "were in that IDE of the lambda function we couldn't see any of the code well now",
    "start": "3283920",
    "end": "3289099"
  },
  {
    "text": "because my package is so much smaller I can actually edit my code in lime though",
    "start": "3289099",
    "end": "3294660"
  },
  {
    "text": "I recommend you know for production things don't just use the console editor better to use source control and Sam and",
    "start": "3294660",
    "end": "3301500"
  },
  {
    "text": "other tools but now I'm able to actually edit inline so so that's a look at layers you know I think between that and",
    "start": "3301500",
    "end": "3308730"
  },
  {
    "text": "SAR and just a final thing I'll show you for SAR a quick app that I thought was a",
    "start": "3308730",
    "end": "3316109"
  },
  {
    "text": "neat one out and sorry I don't know if any of you have ever wanted to do some sentiment analysis from Twitter but it's",
    "start": "3316109",
    "end": "3321990"
  },
  {
    "text": "kind of interesting to see what the world thinks about each day where I obviously the news cycles follow it but",
    "start": "3321990",
    "end": "3327089"
  },
  {
    "text": "without having to do any work except register a Twitter Developer account this is just one example of a SAR app",
    "start": "3327089",
    "end": "3333059"
  },
  {
    "text": "but this literally it takes lambda on a polling schedule it defaults to once a minute it goes out to Twitter's API is",
    "start": "3333059",
    "end": "3340289"
  },
  {
    "text": "you don't have to know anything about Twitter's API and it checks points reading the streams basically of all the",
    "start": "3340289",
    "end": "3346380"
  },
  {
    "text": "treats that come through that match your filters do you want to get and then as things match your filters it invokes",
    "start": "3346380",
    "end": "3351509"
  },
  {
    "text": "your function so to make that possible and to make that in my application",
    "start": "3351509",
    "end": "3356670"
  },
  {
    "text": "I created another application here called tweet processing and all I had to",
    "start": "3356670",
    "end": "3362670"
  },
  {
    "text": "do to pull that in was just actually reference the application and I and I",
    "start": "3362670",
    "end": "3367770"
  },
  {
    "text": "just copied this from their SAR they actually we have a button that actually generates everything here that I copied",
    "start": "3367770",
    "end": "3372900"
  },
  {
    "text": "I just literally copied this as a tweet source here's the application ID I want version two and it needed two parameters",
    "start": "3372900",
    "end": "3379650"
  },
  {
    "text": "it needed to know my search text so I was searching for service and it wanted to know what function do I need to send",
    "start": "3379650",
    "end": "3385920"
  },
  {
    "text": "the tweets to that's it that's all I needed to have to basically go to Twitter and get that kind of value and",
    "start": "3385920",
    "end": "3392099"
  },
  {
    "text": "then now my actual function can do whatever I need it to do in this case though I actually just deployed this so",
    "start": "3392099",
    "end": "3400470"
  },
  {
    "text": "we can go look at it and we can see tweet processing",
    "start": "3400470",
    "end": "3405750"
  },
  {
    "text": "it's my application and within tweet processing I have you know my function",
    "start": "3405750",
    "end": "3413579"
  },
  {
    "text": "so let's go into that",
    "start": "3413579",
    "end": "3416930"
  },
  {
    "text": "and then this is the function that's getting the tweets now it's my own function I control and so we can see",
    "start": "3420380",
    "end": "3426380"
  },
  {
    "text": "here if I go into the logs all I'm doing for now is just writing it to the logs but we can see there's always what's",
    "start": "3426380",
    "end": "3434240"
  },
  {
    "text": "going on right now learn how to use Azure function so we don't want you to you don't need to know much about that",
    "start": "3434240",
    "end": "3440230"
  },
  {
    "text": "tips and tricks this was a Microsoft treat apparently and I you know I could",
    "start": "3440230",
    "end": "3446450"
  },
  {
    "text": "go through them all this is actually all this is Twitter's official API spec you're showing up but that's all it",
    "start": "3446450",
    "end": "3452660"
  },
  {
    "text": "takes and now if I wanted to manipulate this transform that data send it to some other stream DynamoDB just a few few",
    "start": "3452660",
    "end": "3459590"
  },
  {
    "text": "lines of code is all it takes in a Sam template so with that just take one or",
    "start": "3459590",
    "end": "3464750"
  },
  {
    "text": "two questions and then we'll cut over to the workshop no you can actually so you",
    "start": "3464750",
    "end": "3476330"
  },
  {
    "text": "can reference even in the console when you go to upload the zip file and everything you can certainly hook up the functions as well so last question since",
    "start": "3476330",
    "end": "3484880"
  },
  {
    "text": "we need someone else on the live feed okay well key takeaways check out Sam",
    "start": "3484880",
    "end": "3491330"
  },
  {
    "text": "you'll be seeing it in later today in environmental variables and all of this to get your applications to production",
    "start": "3491330",
    "end": "3498110"
  },
  {
    "text": "and here's our server list page for reference thanks everyone for your time",
    "start": "3498110",
    "end": "3503620"
  },
  {
    "text": "[Applause]",
    "start": "3503620",
    "end": "3508790"
  },
  {
    "text": "[Music]",
    "start": "3510740",
    "end": "3518359"
  }
]