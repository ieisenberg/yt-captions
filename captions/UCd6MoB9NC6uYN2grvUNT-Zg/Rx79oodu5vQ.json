[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "In this video, you'll see how to enable \nserverless geospatial analytics and",
    "start": "0",
    "end": "3750"
  },
  {
    "text": "machine learning (ML) with AWS and CARTO.",
    "start": "3750",
    "end": "6638"
  },
  {
    "text": "With this solution, you can subscribe to third-\nparty spatial datasets in AWS Data Exchange,",
    "start": "7301",
    "end": "12129"
  },
  {
    "text": "query them alongside first-party \ndata sets in Amazon Redshift,",
    "start": "12129",
    "end": "15611"
  },
  {
    "text": "and analyze spatial data using \nCARTO geomapping and visualizations.",
    "start": "15611",
    "end": "19502"
  },
  {
    "text": "We’ll start in Redshift Query Editor version 2.",
    "start": "21426",
    "end": "23901"
  },
  {
    "text": "Let’s expand this Redshift Serverless \nworkgroup to see its schema.",
    "start": "24371",
    "end": "27252"
  },
  {
    "text": "For the purposes of this example, \nwe’ve loaded the CARTO tables with",
    "start": "28182",
    "end": "31071"
  },
  {
    "text": "first-party data about retail stores.",
    "start": "31071",
    "end": "33141"
  },
  {
    "text": "We’ve also installed the CARTO Analytics \nToolbox for Redshift in the Functions folder.",
    "start": "34275",
    "end": "38577"
  },
  {
    "start": "40000",
    "end": "139000"
  },
  {
    "text": "Let’s create a tab to start exploring our data.",
    "start": "40502",
    "end": "42677"
  },
  {
    "text": "We’ll use a simple query to select all \nthe data from our table of Target stores.",
    "start": "43618",
    "end": "47339"
  },
  {
    "text": "Let’s review the data our query has returned.",
    "start": "48238",
    "end": "50230"
  },
  {
    "text": "We can enrich this data with demographic \ninformation for the area around each store.",
    "start": "53193",
    "end": "57281"
  },
  {
    "text": "To do this, we’ll go to AWS Data Exchange \nand find a relevant third-party dataset.\n \nLet’s explore the available data products.\n \nWe’ll search for “ACS sociodemographics.”\n \nThe American Community Survey (ACS) publishes basic demographic data for the United States. \n \nLet’s select the most recent ACS data.\n \nWe’ll quickly review the product page to see what’s included.\n \nLet’s continue to the subscription page.\n \nFor our purposes, let’s not automatically renew this subscription.\n \nNow we’ll subscribe.\n \nAfter this subscription has been verified by the provider, we can find it in our list of subscriptions.\n \nNow that we’ve subscribed to the data we need, we can query it with Amazon Redshift.\n \nLet’s navigate to our Redshift Serverless dashboard and find our workgroup.\n \nLet’s take a look at our datashares.\n \nHere’s the dataset that we subscribed to. \n \nLet’s create a database from this datashare.\n \nNow that the database has been created, let’s return to the Redshift query editor.\n \nLet’s refresh the view and expand the workgroup again.\n \nHere’s the database we just created.\n \nThis database contains tables with geographic and demographic information.\n \nNext, let’s run a query to see the data we acquired through AWS Data Exchange.\n \nHere’s the census data.\n \nNext, let’s join the data we already had to the data we subscribed to.\n \nFirst, we’ll convert the longitude and latitude coordinates of the Target stores and some competitor stores to a geometry data type using a built-in function in Amazon Redshift.\n \nThe results are stored in a materialized view for each store.\n \nWe can now use additional built-in spatial functions in Amazon Redshift on the geometry points we just created for our stores.\n \nThe first function we’ll use finds the distance between two points. \n \nLet’s compare the coordinates of the Empire State Building to the coordinates of all Target stores in the United States.\n \nHere we can see the stores closest to the Empire State Building.\n \nWe can use another built-in function to find out which US census block group each of our Target stores is located in.\n \nThe results appear alongside our demographic data.\n \nNow let’s see how we can find areas that are good candidates for future stores based on potentially high sales.\n \nThis is a machine learning command that makes use of Amazon Redshift ML.\n \nRedshift ML makes it easy for data analysts and database developers to create, train, and apply machine learning models using familiar SQL commands in Amazon Redshift data warehouses.\n \nWe’re going to create a new model and use a selected set of sociodemographic attributes as input features. \n \nWe’ll also use a function from the CARTO Analytics Toolbox for Redshift to create a Quadbin spatial index, which we will also use as an input into our ML model. \n \nAs part of the model parameters, we can optionally define the model type, the problem type, and the objective.\n \nNow that the ML is running, we can visualize our data in CARTO.\n \nLet’s log in and connect to our Redshift cluster.\n \nThe connection was successful. \n \nWe can now begin to visualize our data on a map.\n \nWe can add a source from our Redshift cluster.\n \nWe’ll select the Target stores data that we used Redshift ML to create.\n \nWe can use a custom query to add US census block groups and color them based on their population.\n \nUsing the third-party data that we subscribed to earlier, we can visualize average sales of our Target stores based on population.\n \nWe will now create Quadbin tiles in our area of interest and use the machine learning model we created to predict average sales for these Quadbin tiles based on the sociodemographic information that we subscribed to.\n \nWe can also visualize competitor stores.\n \nWe now have visualizations of many valuable data points to help us accurately project the most beneficial area to create a new store.\n \nYou’ve just seen how to enable serverless geospatial analytics and machine learning with AWS and CARTO.\n \nYou can learn more about this topic in \nthe description and links for this video.\n \nThanks for watching. Now it’s your turn to try.",
    "start": "58201",
    "end": "62600"
  },
  {
    "text": "Let’s explore the available data products.",
    "start": "63499",
    "end": "65540"
  },
  {
    "text": "We’ll search for “ACS sociodemographics.”",
    "start": "66523",
    "end": "69362"
  },
  {
    "text": "The American Community Survey (ACS) publishes \nbasic demographic data for the United States.",
    "start": "72196",
    "end": "77311"
  },
  {
    "text": "Let’s select the most recent ACS data.",
    "start": "77631",
    "end": "79534"
  },
  {
    "text": "We’ll quickly review the product \npage to see what’s included.",
    "start": "80487",
    "end": "82950"
  },
  {
    "text": "Let’s continue to the subscription page.",
    "start": "86351",
    "end": "88060"
  },
  {
    "text": "For our purposes, let’s not \nautomatically renew this subscription.",
    "start": "91268",
    "end": "94283"
  },
  {
    "text": "Now we’ll subscribe.",
    "start": "95288",
    "end": "96368"
  },
  {
    "text": "After this subscription has been verified by the \nprovider, we can find it in our list of subscriptions.",
    "start": "102677",
    "end": "106935"
  },
  {
    "text": "Now that we’ve subscribed to the data we \nneed, we can query it with Amazon Redshift.",
    "start": "107791",
    "end": "112000"
  },
  {
    "text": "Let’s navigate to our Redshift Serverless\n dashboard and find our workgroup.",
    "start": "113005",
    "end": "116423"
  },
  {
    "text": "Let’s take a look at our datashares.",
    "start": "119856",
    "end": "121406"
  },
  {
    "text": "Here’s the dataset that we subscribed to.",
    "start": "124967",
    "end": "126810"
  },
  {
    "text": "Let’s create a database from this datashare.",
    "start": "127141",
    "end": "129226"
  },
  {
    "text": "Now that the database has been created, \nlet’s return to the Redshift query editor.",
    "start": "134367",
    "end": "138087"
  },
  {
    "start": "139000",
    "end": "165000"
  },
  {
    "text": "Let’s refresh the view and \nexpand the workgroup again.",
    "start": "140097",
    "end": "142603"
  },
  {
    "text": "Here’s the database we just created.",
    "start": "144549",
    "end": "146114"
  },
  {
    "text": "This database contains tables with \ngeographic and demographic information.",
    "start": "147105",
    "end": "150680"
  },
  {
    "text": "Next, let’s run a query to see the data we\n acquired through AWS Data Exchange.",
    "start": "154214",
    "end": "158313"
  },
  {
    "text": "Here’s the census data.",
    "start": "161885",
    "end": "162995"
  },
  {
    "start": "165000",
    "end": "214000"
  },
  {
    "text": "Next, let’s join the data we already \nhad to the data we subscribed to.",
    "start": "165466",
    "end": "168902"
  },
  {
    "text": "First, we’ll convert the longitude and \nlatitude coordinates of the Target stores",
    "start": "169896",
    "end": "173349"
  },
  {
    "text": "and some competitor stores to a \ngeometry data type using a built-in",
    "start": "173350",
    "end": "176605"
  },
  {
    "text": "function in Amazon Redshift.",
    "start": "176605",
    "end": "178246"
  },
  {
    "text": "The results are stored in a \nmaterialized view for each store.",
    "start": "180043",
    "end": "182816"
  },
  {
    "text": "We can now use additional built-in \nspatial functions in Amazon Redshift",
    "start": "184944",
    "end": "188263"
  },
  {
    "text": "on the geometry points we \njust created for our stores.",
    "start": "188263",
    "end": "190883"
  },
  {
    "text": "The first function we’ll use finds \nthe distance between two points.",
    "start": "191781",
    "end": "194700"
  },
  {
    "text": "Let’s compare the coordinates of the \nEmpire State Building to the coordinates",
    "start": "195331",
    "end": "198142"
  },
  {
    "text": "of all Target stores in the United States.",
    "start": "198142",
    "end": "200171"
  },
  {
    "text": "Here we can see the stores \nclosest to the Empire State Building.",
    "start": "201058",
    "end": "203576"
  },
  {
    "text": "We can use another built-in function to\n find out which US census block group",
    "start": "204656",
    "end": "208012"
  },
  {
    "text": "each of our Target stores is located in.",
    "start": "208012",
    "end": "209937"
  },
  {
    "text": "The results appear alongside \nour demographic data.",
    "start": "210953",
    "end": "213301"
  },
  {
    "start": "214000",
    "end": "377000"
  },
  {
    "text": "Now let’s see how we can find areas \nthat are good candidates for future",
    "start": "214435",
    "end": "217305"
  },
  {
    "text": "stores based on potentially high sales.",
    "start": "217305",
    "end": "219383"
  },
  {
    "text": "This is a machine learning command \nthat makes use of Amazon Redshift ML.",
    "start": "220240",
    "end": "223725"
  },
  {
    "text": "Redshift ML makes it easy for data \nanalysts and database developers",
    "start": "225040",
    "end": "228329"
  },
  {
    "text": "to create, train, and apply machine learning\n models using familiar SQL commands",
    "start": "228330",
    "end": "232173"
  },
  {
    "text": "in Amazon Redshift data warehouses.",
    "start": "232173",
    "end": "234128"
  },
  {
    "text": "We’re going to create a new model and \nuse a selected set of sociodemographic",
    "start": "234972",
    "end": "238239"
  },
  {
    "text": "attributes as input features.",
    "start": "238239",
    "end": "239861"
  },
  {
    "text": "We’ll also use a function from the \nCARTO Analytics Toolbox for Redshift",
    "start": "240567",
    "end": "243855"
  },
  {
    "text": "to create a Quadbin spatial index, which we \nwill also use as an input into our ML model.",
    "start": "243855",
    "end": "248580"
  },
  {
    "text": "As part of the model parameters, we \ncan optionally define the model type,",
    "start": "249382",
    "end": "252658"
  },
  {
    "text": "the problem type, and the objective.",
    "start": "252658",
    "end": "254262"
  },
  {
    "text": "Now that the ML is running, we \ncan visualize our data in CARTO.",
    "start": "256775",
    "end": "259837"
  },
  {
    "text": "Let’s log in and connect \nto our Redshift cluster.",
    "start": "262051",
    "end": "264263"
  },
  {
    "text": "The connection was successful.",
    "start": "280593",
    "end": "281866"
  },
  {
    "text": "We can now begin to \nvisualize our data on a map.",
    "start": "282272",
    "end": "284597"
  },
  {
    "text": "We can add a source \nfrom our Redshift cluster.",
    "start": "287078",
    "end": "289028"
  },
  {
    "text": "We’ll select the Target stores data \nthat we used Redshift ML to create.",
    "start": "291627",
    "end": "295037"
  },
  {
    "text": "We can use a custom query to \nadd US census block groups and",
    "start": "295947",
    "end": "298914"
  },
  {
    "text": "color them based on their population.",
    "start": "298914",
    "end": "300484"
  },
  {
    "text": "Using the third-party data \nthat we subscribed to earlier,",
    "start": "307670",
    "end": "310298"
  },
  {
    "text": "we can visualize average sales of our \nTarget stores based on population.",
    "start": "310298",
    "end": "313864"
  },
  {
    "text": "We will now create Quadbin tiles in our\n area of interest and use the machine",
    "start": "314891",
    "end": "318498"
  },
  {
    "text": "learning model we created to predict \naverage sales for these Quadbin tiles",
    "start": "318498",
    "end": "322000"
  },
  {
    "text": "based on the sociodemographic \ninformation that we subscribed to.",
    "start": "322000",
    "end": "324913"
  },
  {
    "text": "We can also visualize competitor stores.",
    "start": "335928",
    "end": "338000"
  },
  {
    "text": "We now have visualizations of \nmany valuable data points to help us",
    "start": "353111",
    "end": "356087"
  },
  {
    "text": "accurately project the most \nbeneficial area to create a new store.",
    "start": "356088",
    "end": "359329"
  },
  {
    "text": "You’ve just seen how to enable \nserverless geospatial analytics and",
    "start": "362644",
    "end": "365527"
  },
  {
    "text": "machine learning with AWS and CARTO.",
    "start": "365527",
    "end": "367724"
  },
  {
    "text": "You can learn more about this topic in \nthe description and links for this video.",
    "start": "368858",
    "end": "371868"
  },
  {
    "text": "Thanks for watching. Now it’s your turn to try.",
    "start": "372167",
    "end": "374139"
  }
]