[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "hello welcome to this video on building",
    "start": "320",
    "end": "2560"
  },
  {
    "text": "complex architectures",
    "start": "2560",
    "end": "3840"
  },
  {
    "text": "by connecting multiple solutions",
    "start": "3840",
    "end": "5200"
  },
  {
    "text": "constructs my name is biff gott",
    "start": "5200",
    "end": "7759"
  },
  {
    "text": "i'm a solutions architect with aws now",
    "start": "7759",
    "end": "10400"
  },
  {
    "text": "let's get started",
    "start": "10400",
    "end": "12400"
  },
  {
    "text": "a single solutions construct may deploy",
    "start": "12400",
    "end": "14480"
  },
  {
    "text": "an impressive list of services",
    "start": "14480",
    "end": "16080"
  },
  {
    "text": "such as the aws cloudfront s3 construct",
    "start": "16080",
    "end": "18720"
  },
  {
    "text": "shown here",
    "start": "18720",
    "end": "19920"
  },
  {
    "text": "but your workloads are almost certainly",
    "start": "19920",
    "end": "21520"
  },
  {
    "text": "more complex than any single solutions",
    "start": "21520",
    "end": "23680"
  },
  {
    "text": "construct",
    "start": "23680",
    "end": "25039"
  },
  {
    "text": "the real value of solutions constructs",
    "start": "25039",
    "end": "27119"
  },
  {
    "text": "is the ability to instantiate multiple",
    "start": "27119",
    "end": "28960"
  },
  {
    "text": "constructs in your code",
    "start": "28960",
    "end": "30560"
  },
  {
    "text": "and connect them so that each one is",
    "start": "30560",
    "end": "32320"
  },
  {
    "text": "just a piece of a more complex",
    "start": "32320",
    "end": "33920"
  },
  {
    "text": "architecture",
    "start": "33920",
    "end": "34960"
  },
  {
    "text": "while still enjoying the speed and",
    "start": "34960",
    "end": "36640"
  },
  {
    "text": "simplicity that makes solutions",
    "start": "36640",
    "end": "38239"
  },
  {
    "text": "constructs so compelling",
    "start": "38239",
    "end": "41360"
  },
  {
    "start": "40000",
    "end": "70000"
  },
  {
    "text": "let's define a more complicated workload",
    "start": "41360",
    "end": "43280"
  },
  {
    "text": "as a demonstration",
    "start": "43280",
    "end": "45520"
  },
  {
    "text": "in this workload execution is triggered",
    "start": "45520",
    "end": "47680"
  },
  {
    "text": "by outside actors",
    "start": "47680",
    "end": "48879"
  },
  {
    "text": "saving objects to an s3 bucket that",
    "start": "48879",
    "end": "51680"
  },
  {
    "text": "action triggers a lambda function",
    "start": "51680",
    "end": "53600"
  },
  {
    "text": "that processes the information in the",
    "start": "53600",
    "end": "55360"
  },
  {
    "text": "object",
    "start": "55360",
    "end": "56800"
  },
  {
    "text": "stores the result to a dynamodb table",
    "start": "56800",
    "end": "59600"
  },
  {
    "text": "then publishes a status message",
    "start": "59600",
    "end": "61359"
  },
  {
    "text": "over amazon's simple notification",
    "start": "61359",
    "end": "63120"
  },
  {
    "text": "service",
    "start": "63120",
    "end": "64960"
  },
  {
    "text": "looking at this architecture we can",
    "start": "64960",
    "end": "66560"
  },
  {
    "text": "identify three solutions constructs from",
    "start": "66560",
    "end": "68560"
  },
  {
    "text": "the library",
    "start": "68560",
    "end": "70320"
  },
  {
    "start": "70000",
    "end": "147000"
  },
  {
    "text": "the aws s3 lambda construct will create",
    "start": "70320",
    "end": "72960"
  },
  {
    "text": "an s3 bucket",
    "start": "72960",
    "end": "73920"
  },
  {
    "text": "and a lambda function that is invoked by",
    "start": "73920",
    "end": "75680"
  },
  {
    "text": "s3 events",
    "start": "75680",
    "end": "77439"
  },
  {
    "text": "the aws lambda dynamodb construct will",
    "start": "77439",
    "end": "80159"
  },
  {
    "text": "create a new dynamodb table",
    "start": "80159",
    "end": "82080"
  },
  {
    "text": "and a lambda function that can save",
    "start": "82080",
    "end": "83520"
  },
  {
    "text": "items to it",
    "start": "83520",
    "end": "85360"
  },
  {
    "text": "the aws lambda sns construct will create",
    "start": "85360",
    "end": "88240"
  },
  {
    "text": "a new sns topic",
    "start": "88240",
    "end": "89759"
  },
  {
    "text": "and a lambda function that can publish",
    "start": "89759",
    "end": "91680"
  },
  {
    "text": "messages to that topic",
    "start": "91680",
    "end": "94000"
  },
  {
    "text": "but if we deploy all three of these",
    "start": "94000",
    "end": "95680"
  },
  {
    "text": "constructs we'll deploy",
    "start": "95680",
    "end": "97280"
  },
  {
    "text": "three different lambda functions while",
    "start": "97280",
    "end": "99520"
  },
  {
    "text": "our architecture",
    "start": "99520",
    "end": "100400"
  },
  {
    "text": "requires a single lambda function that",
    "start": "100400",
    "end": "102399"
  },
  {
    "text": "can perform all three tasks",
    "start": "102399",
    "end": "105360"
  },
  {
    "text": "we need a way to share a single lambda",
    "start": "105360",
    "end": "107280"
  },
  {
    "text": "function between all these constructs",
    "start": "107280",
    "end": "110159"
  },
  {
    "text": "the key to this is sending properties",
    "start": "110159",
    "end": "111920"
  },
  {
    "text": "from one pattern when we construct a",
    "start": "111920",
    "end": "113680"
  },
  {
    "text": "second pattern",
    "start": "113680",
    "end": "115280"
  },
  {
    "text": "let's start with connecting the s3",
    "start": "115280",
    "end": "116960"
  },
  {
    "text": "lambda pattern and the lambda sns",
    "start": "116960",
    "end": "119040"
  },
  {
    "text": "pattern",
    "start": "119040",
    "end": "120719"
  },
  {
    "text": "the lambda the sns props constructor",
    "start": "120719",
    "end": "122719"
  },
  {
    "text": "used to define the second pattern",
    "start": "122719",
    "end": "124960"
  },
  {
    "text": "has a property called existing lambda",
    "start": "124960",
    "end": "127119"
  },
  {
    "text": "object",
    "start": "127119",
    "end": "128399"
  },
  {
    "text": "you can pass the lambda function from",
    "start": "128399",
    "end": "130080"
  },
  {
    "text": "another pattern as this property value",
    "start": "130080",
    "end": "132560"
  },
  {
    "text": "and the new pattern will use that lambda",
    "start": "132560",
    "end": "134640"
  },
  {
    "text": "function instead of instantiating a new",
    "start": "134640",
    "end": "136800"
  },
  {
    "text": "one",
    "start": "136800",
    "end": "137920"
  },
  {
    "text": "this means that the construct will grant",
    "start": "137920",
    "end": "139840"
  },
  {
    "text": "the existing lambda function permission",
    "start": "139840",
    "end": "141760"
  },
  {
    "text": "to publish to the new topic",
    "start": "141760",
    "end": "143840"
  },
  {
    "text": "instead of creating a new function for",
    "start": "143840",
    "end": "145599"
  },
  {
    "text": "that task",
    "start": "145599",
    "end": "148160"
  },
  {
    "text": "here's how this looks in code when we",
    "start": "148319",
    "end": "150720"
  },
  {
    "text": "instantiate the s3 to lambda construct",
    "start": "150720",
    "end": "153200"
  },
  {
    "text": "we'll provide lambda function props that",
    "start": "153200",
    "end": "155200"
  },
  {
    "text": "define a new lambda function",
    "start": "155200",
    "end": "158160"
  },
  {
    "text": "since this will be the only lambda",
    "start": "158160",
    "end": "159760"
  },
  {
    "text": "function in the architecture",
    "start": "159760",
    "end": "161280"
  },
  {
    "text": "the actual code for this function must",
    "start": "161280",
    "end": "163040"
  },
  {
    "text": "perform all three tasks",
    "start": "163040",
    "end": "164879"
  },
  {
    "text": "process the incoming s3 data store the",
    "start": "164879",
    "end": "167120"
  },
  {
    "text": "results to dynamodb",
    "start": "167120",
    "end": "168640"
  },
  {
    "text": "and publish the message to sns now if we",
    "start": "168640",
    "end": "172160"
  },
  {
    "text": "instantiated the lambda to sns construct",
    "start": "172160",
    "end": "174640"
  },
  {
    "text": "like this",
    "start": "174640",
    "end": "175760"
  },
  {
    "text": "it would create a second lambda function",
    "start": "175760",
    "end": "177760"
  },
  {
    "text": "which is not what we want",
    "start": "177760",
    "end": "179760"
  },
  {
    "text": "so we'll replace the lambda function",
    "start": "179760",
    "end": "181760"
  },
  {
    "text": "props with existing lambda object",
    "start": "181760",
    "end": "184480"
  },
  {
    "text": "and we'll set that property to the",
    "start": "184480",
    "end": "185920"
  },
  {
    "text": "lambda function created by the s3 to",
    "start": "185920",
    "end": "188159"
  },
  {
    "text": "lambda construct",
    "start": "188159",
    "end": "189920"
  },
  {
    "text": "that's all there is to it just use",
    "start": "189920",
    "end": "191920"
  },
  {
    "text": "existing lambda object",
    "start": "191920",
    "end": "193440"
  },
  {
    "text": "to point the lambda to sns construct to",
    "start": "193440",
    "end": "196080"
  },
  {
    "text": "the lambda function from the s3 to",
    "start": "196080",
    "end": "198000"
  },
  {
    "text": "lambda construct",
    "start": "198000",
    "end": "200879"
  },
  {
    "start": "200000",
    "end": "316000"
  },
  {
    "text": "let's look at the actual code in context",
    "start": "201200",
    "end": "203680"
  },
  {
    "text": "remember",
    "start": "203680",
    "end": "204239"
  },
  {
    "text": "every solution's construct is loaded",
    "start": "204239",
    "end": "206000"
  },
  {
    "text": "within a cdk stack",
    "start": "206000",
    "end": "208720"
  },
  {
    "text": "first we instantiate the s3 to lambda",
    "start": "208720",
    "end": "210959"
  },
  {
    "text": "pattern this is the pattern that",
    "start": "210959",
    "end": "212640"
  },
  {
    "text": "actually creates the lambda function",
    "start": "212640",
    "end": "214720"
  },
  {
    "text": "so we'll pass lambda function props that",
    "start": "214720",
    "end": "216640"
  },
  {
    "text": "point to the code module",
    "start": "216640",
    "end": "218400"
  },
  {
    "text": "now for this demo we're setting the",
    "start": "218400",
    "end": "220000"
  },
  {
    "text": "removal policy for our bucket to destroy",
    "start": "220000",
    "end": "221920"
  },
  {
    "text": "so our bucket is removed after the demo",
    "start": "221920",
    "end": "224000"
  },
  {
    "text": "you wouldn't do this for any non-demo",
    "start": "224000",
    "end": "225599"
  },
  {
    "text": "stack",
    "start": "225599",
    "end": "227040"
  },
  {
    "text": "next we instantiate the lambda to",
    "start": "227040",
    "end": "228720"
  },
  {
    "text": "dynamodb pattern",
    "start": "228720",
    "end": "230560"
  },
  {
    "text": "notice that here we set existing lambda",
    "start": "230560",
    "end": "232640"
  },
  {
    "text": "object to the lambda function created by",
    "start": "232640",
    "end": "234720"
  },
  {
    "text": "the first construct",
    "start": "234720",
    "end": "237760"
  },
  {
    "text": "finally we instantiate the lambda to sns",
    "start": "238400",
    "end": "241360"
  },
  {
    "text": "object",
    "start": "241360",
    "end": "242159"
  },
  {
    "text": "and once again we send the lambda",
    "start": "242159",
    "end": "244239"
  },
  {
    "text": "function from the first construct",
    "start": "244239",
    "end": "245920"
  },
  {
    "text": "to the existing lambda object property",
    "start": "245920",
    "end": "250080"
  },
  {
    "text": "here's a stack we built with this code",
    "start": "251120",
    "end": "253280"
  },
  {
    "text": "let's find the lambda function we",
    "start": "253280",
    "end": "254799"
  },
  {
    "text": "created",
    "start": "254799",
    "end": "257280"
  },
  {
    "text": "first let's check the environment",
    "start": "260880",
    "end": "262320"
  },
  {
    "text": "variables the last two patterns",
    "start": "262320",
    "end": "264479"
  },
  {
    "text": "should have set up environment variables",
    "start": "264479",
    "end": "266000"
  },
  {
    "text": "for both the table and the topic",
    "start": "266000",
    "end": "269840"
  },
  {
    "text": "here's the environment variable for the",
    "start": "272080",
    "end": "273520"
  },
  {
    "text": "dynamodb table name",
    "start": "273520",
    "end": "275360"
  },
  {
    "text": "and environment variables with both the",
    "start": "275360",
    "end": "277120"
  },
  {
    "text": "arn and the name of the sns topic",
    "start": "277120",
    "end": "282240"
  },
  {
    "text": "now let's make sure we have the",
    "start": "282240",
    "end": "283360"
  },
  {
    "text": "privileges required to access these",
    "start": "283360",
    "end": "284880"
  },
  {
    "text": "resources",
    "start": "284880",
    "end": "286639"
  },
  {
    "text": "first here's all the privileges",
    "start": "286639",
    "end": "288320"
  },
  {
    "text": "associated with having right access to",
    "start": "288320",
    "end": "290639"
  },
  {
    "text": "the table",
    "start": "290639",
    "end": "293040"
  },
  {
    "text": "notice the policy explicitly specifies",
    "start": "293040",
    "end": "295280"
  },
  {
    "text": "the actions and the table",
    "start": "295280",
    "end": "298479"
  },
  {
    "text": "and here's the privilege to publish",
    "start": "300160",
    "end": "302000"
  },
  {
    "text": "messages to the topic",
    "start": "302000",
    "end": "304720"
  },
  {
    "text": "here again the policy limits the actions",
    "start": "304720",
    "end": "307039"
  },
  {
    "text": "and specifies the resource",
    "start": "307039",
    "end": "309759"
  },
  {
    "text": "so the single lambda function is",
    "start": "309759",
    "end": "311280"
  },
  {
    "text": "successfully shared between all three",
    "start": "311280",
    "end": "313199"
  },
  {
    "text": "topics",
    "start": "313199",
    "end": "315680"
  },
  {
    "start": "316000",
    "end": "361000"
  },
  {
    "text": "so that's how we can use the existing",
    "start": "316800",
    "end": "318479"
  },
  {
    "text": "lambda object property",
    "start": "318479",
    "end": "319840"
  },
  {
    "text": "to share a function resource between",
    "start": "319840",
    "end": "321919"
  },
  {
    "text": "three different constructs",
    "start": "321919",
    "end": "323440"
  },
  {
    "text": "and create an architecture more complex",
    "start": "323440",
    "end": "325360"
  },
  {
    "text": "than we could with any single construct",
    "start": "325360",
    "end": "329039"
  },
  {
    "text": "we've focused on connecting multiple",
    "start": "329039",
    "end": "330639"
  },
  {
    "text": "constructs by sharing lambda functions",
    "start": "330639",
    "end": "332800"
  },
  {
    "text": "but there are actually many different",
    "start": "332800",
    "end": "334320"
  },
  {
    "text": "resources you can use to connect two",
    "start": "334320",
    "end": "336080"
  },
  {
    "text": "constructs",
    "start": "336080",
    "end": "337600"
  },
  {
    "text": "here's a list of existing resource",
    "start": "337600",
    "end": "339199"
  },
  {
    "text": "properties currently found on solutions",
    "start": "339199",
    "end": "341120"
  },
  {
    "text": "constructs in the library",
    "start": "341120",
    "end": "342400"
  },
  {
    "text": "that you can use to connect multiple",
    "start": "342400",
    "end": "344080"
  },
  {
    "text": "constructs",
    "start": "344080",
    "end": "345919"
  },
  {
    "text": "with the number of ways available to",
    "start": "345919",
    "end": "347680"
  },
  {
    "text": "easily link solutions constructs",
    "start": "347680",
    "end": "349600"
  },
  {
    "text": "the architectures you can build are only",
    "start": "349600",
    "end": "351280"
  },
  {
    "text": "limited by your imagination",
    "start": "351280",
    "end": "353440"
  },
  {
    "text": "so break out your editor and go build",
    "start": "353440",
    "end": "363759"
  }
]