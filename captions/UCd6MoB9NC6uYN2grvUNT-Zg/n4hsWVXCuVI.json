[
  {
    "text": "good morning everyone how's everyone doing good hopefully you enjoyed auntie",
    "start": "560",
    "end": "7350"
  },
  {
    "text": "Jessie's keynote today and hi I'm Jim Tran hi I'm Justin Pirtle and thanks for",
    "start": "7350",
    "end": "14790"
  },
  {
    "text": "spending the time with us today wow what an audience in fact we are told that",
    "start": "14790",
    "end": "20220"
  },
  {
    "text": "this theater is where the Blue Man Group used to perform so if you're here to see the Blue Man Group or another musical",
    "start": "20220",
    "end": "26310"
  },
  {
    "text": "performance we're actually here to talk about service authentication and authorization so just by show of hands",
    "start": "26310",
    "end": "33840"
  },
  {
    "text": "how many of you work on an app where users have to sign up before they can",
    "start": "33840",
    "end": "39870"
  },
  {
    "text": "sign in okay by show of hands how many of you work on an app where users have",
    "start": "39870",
    "end": "48149"
  },
  {
    "text": "different levels of permissions so when we work with customers that build",
    "start": "48149",
    "end": "53719"
  },
  {
    "text": "applications using servlets architectures on AWS we're hearing this more and more identity Federation is a",
    "start": "53719",
    "end": "61829"
  },
  {
    "text": "critical part of most applications and so today we want to share some of the best practices and tips for integrating",
    "start": "61829",
    "end": "69240"
  },
  {
    "text": "identity management into your service applications so rather than just share",
    "start": "69240",
    "end": "75360"
  },
  {
    "text": "concepts or theory we actually wanted to make these patterns available to you",
    "start": "75360",
    "end": "80460"
  },
  {
    "text": "immediately today for your direct use so we thought it'd be a much better way to show you not only some of the flows and",
    "start": "80460",
    "end": "86670"
  },
  {
    "text": "the key concerns but also a real reference application that you could download and use and so we built space",
    "start": "86670",
    "end": "92729"
  },
  {
    "text": "finder this is our little simple app allows you to book conference rooms allows you to book hotel desks but we're",
    "start": "92729",
    "end": "99270"
  },
  {
    "text": "happy today to basically launch this app it's a hybrid mobile app that we'll be demoing and it's available now today",
    "start": "99270",
    "end": "105540"
  },
  {
    "text": "released on github 180s labs for all of you so any demo you see in this session you can immediately use just to tell you",
    "start": "105540",
    "end": "112890"
  },
  {
    "text": "a little bit more about space finder this is a hybrid mobile application so it's using the JavaScript AWS SDKs and",
    "start": "112890",
    "end": "119700"
  },
  {
    "text": "but the patterns we show the flows we show these would work on any platform or language it is open sourced under the",
    "start": "119700",
    "end": "127680"
  },
  {
    "text": "Apache 2 license so you can directly use any source code that we put into the application now as much app",
    "start": "127680",
    "end": "134510"
  },
  {
    "text": "start we started by thinking about our user experience and Jim and I went to",
    "start": "134510",
    "end": "139849"
  },
  {
    "text": "the white bar one day we said well let's build an app Jim and this was what we came up with this was just showing our mock-ups and what became clear to us was",
    "start": "139849",
    "end": "147680"
  },
  {
    "text": "when he looked at these flows of booking room and all these kind of things we actually had a ton of UI around how do",
    "start": "147680",
    "end": "154430"
  },
  {
    "text": "you sign in how do you sign up forget your password etc and about 40% of our",
    "start": "154430",
    "end": "160819"
  },
  {
    "text": "UI in this app ended up being around account management so it was actually much less trivial than we thought even",
    "start": "160819",
    "end": "166910"
  },
  {
    "text": "from a UI perspective to build such a feature set so after we got our mocks",
    "start": "166910",
    "end": "171950"
  },
  {
    "text": "done we went to go ahead and build this and our first challenge that we needed to deal with was how do we actually",
    "start": "171950",
    "end": "177860"
  },
  {
    "text": "manage the identities so our first screen welcome to space finder sign up",
    "start": "177860",
    "end": "183560"
  },
  {
    "text": "sign in you know how do we actually store our credentials how are we going to pass these flows and so let's talk",
    "start": "183560",
    "end": "190010"
  },
  {
    "text": "through some common patterns that customers are doing here so the first and most basic of patterns is well why",
    "start": "190010",
    "end": "197359"
  },
  {
    "text": "don't we just have a database and in our database we can just do a table of user names passwords and plain text you know",
    "start": "197359",
    "end": "204049"
  },
  {
    "text": "this is simple unfortunately we do see this quite often but this is of course a strong anti-pattern as you can imagine",
    "start": "204049",
    "end": "212239"
  },
  {
    "text": "anyone who has access to the database whether it's your DBA or an attacker who were able to compromise access has now",
    "start": "212239",
    "end": "218690"
  },
  {
    "text": "immediately stolen all of the credentials you have a data breach on your hands right away so we can",
    "start": "218690",
    "end": "224569"
  },
  {
    "text": "certainly improve upon this approach and we can go out and we can hash the passwords for instance right but even",
    "start": "224569",
    "end": "230870"
  },
  {
    "text": "with hash passwords the reality is you could build a rainbow table you could pre compute the hashes a",
    "start": "230870",
    "end": "236239"
  },
  {
    "text": "dictionary attack would still work and you could walk away with everything without much effort so this isn't a good",
    "start": "236239",
    "end": "242359"
  },
  {
    "text": "approach either and even here you don't want to use a very weak hash either right so we can improve upon this again",
    "start": "242359",
    "end": "248959"
  },
  {
    "text": "as many of you probably do you can use salting and hashing so with salting we",
    "start": "248959",
    "end": "254389"
  },
  {
    "text": "basically take each user and we actually add a pre computed or predefined salt",
    "start": "254389",
    "end": "259640"
  },
  {
    "text": "value prior to hashing or we store in our table and then an addition to basically adding that then",
    "start": "259640",
    "end": "266130"
  },
  {
    "text": "hashing together we can do multiple iterations of hashing which means that even brute force cracking passwords",
    "start": "266130",
    "end": "272460"
  },
  {
    "text": "takes a very long time and would only yield a single value of relevance for a",
    "start": "272460",
    "end": "277680"
  },
  {
    "text": "single user at a time so doing this at scale to brute force practice would take a lot a lot of effort so this is a much",
    "start": "277680",
    "end": "284370"
  },
  {
    "text": "better practice already right but what if there was a way that we could actually never send our passwords over",
    "start": "284370",
    "end": "290610"
  },
  {
    "text": "the wire at all and not store them like this even in a database and for that there is such an option with something",
    "start": "290610",
    "end": "297630"
  },
  {
    "text": "called secure remote password or SRP and this is a protocol developed by Stanford",
    "start": "297630",
    "end": "303420"
  },
  {
    "text": "and effectively your precomputing with big integers and numbers on both ends",
    "start": "303420",
    "end": "309780"
  },
  {
    "text": "and all you're storing here is effectively a verifier in your table so the passwords actually never gone over",
    "start": "309780",
    "end": "315570"
  },
  {
    "text": "the wire so this is a great approach as well and this is one of our best practices we recommend but even if we",
    "start": "315570",
    "end": "323190"
  },
  {
    "text": "store our passwords well and securely the reality is password handling and how",
    "start": "323190",
    "end": "329460"
  },
  {
    "text": "we store that password is just one of our challenges we also may want to do multi-factor authentication we may want",
    "start": "329460",
    "end": "335670"
  },
  {
    "text": "to do a CAPTCHA we need to encrypt the Pat any kind of things at rest and transit for a lot of other security",
    "start": "335670",
    "end": "341940"
  },
  {
    "text": "concerns here not to mention the number of flows that we want to support from",
    "start": "341940",
    "end": "347520"
  },
  {
    "text": "sign in to sign up change password reset password etc we have a lot of flows a",
    "start": "347520",
    "end": "354840"
  },
  {
    "text": "lot of UI's a lot of complexity what if there were a managed service that could",
    "start": "354840",
    "end": "359940"
  },
  {
    "text": "basically handle all this for you without you needing to worry about how to implement all of this yourself and a secure way I'm pleased to say AWS has",
    "start": "359940",
    "end": "367830"
  },
  {
    "text": "such a service available today and this is called cognitive user pools to walk",
    "start": "367830",
    "end": "373140"
  },
  {
    "text": "you through a bit more of these flows in depth I'll turn over to Jim to share this with you so Amazon Cognito user",
    "start": "373140",
    "end": "382350"
  },
  {
    "text": "pools is a managed identity provider and I want to walk through two of the key flows here sign up and sign in so for",
    "start": "382350",
    "end": "390510"
  },
  {
    "text": "sign up you have a user they use your mobile app they register that mobile app",
    "start": "390510",
    "end": "395880"
  },
  {
    "text": "cause kognito user pools kognito user pools then sends a",
    "start": "395880",
    "end": "400919"
  },
  {
    "text": "verification SMS or email to the user the user then can put in that",
    "start": "400919",
    "end": "406110"
  },
  {
    "text": "verification code to verify and confirm the registration and only at that point",
    "start": "406110",
    "end": "411539"
  },
  {
    "text": "is a user considered a successful registered user so that's sign up for signing in the",
    "start": "411539",
    "end": "419669"
  },
  {
    "text": "user types in their username and password you authenticate using the secure remote password protocol so no",
    "start": "419669",
    "end": "425849"
  },
  {
    "text": "passwords travel over the wire kognito then can then issue JWT",
    "start": "425849",
    "end": "431909"
  },
  {
    "text": "JSON web tokens and actually issues three JSON web tokens an identity token",
    "start": "431909",
    "end": "437490"
  },
  {
    "text": "an access token and a refresh token so this is a fairly simple flow a lot of",
    "start": "437490",
    "end": "444029"
  },
  {
    "text": "customers want to customize this flow so to take another example the user could",
    "start": "444029",
    "end": "449279"
  },
  {
    "text": "authenticate against kognito and kognito could actually return back a challenge asking the user to either input their",
    "start": "449279",
    "end": "456599"
  },
  {
    "text": "MFA code or a CAPTCHA as an example once",
    "start": "456599",
    "end": "462059"
  },
  {
    "text": "the user responds to that challenge only then would they get JWT tokens so you",
    "start": "462059",
    "end": "468599"
  },
  {
    "text": "can use lambda hooks to customize the behavior of your authentication flows and actually every meaningful part of",
    "start": "468599",
    "end": "475769"
  },
  {
    "text": "that interaction with the user you can provide custom lambda hooks to customize",
    "start": "475769",
    "end": "480899"
  },
  {
    "text": "whether an email sent out the messaging and so on so that user experience is",
    "start": "480899",
    "end": "486300"
  },
  {
    "text": "totally customizable so we talked about authentication and getting back JWT",
    "start": "486300",
    "end": "492569"
  },
  {
    "text": "tokens let's look at what that means so this is what a JWT token looks like JSON",
    "start": "492569",
    "end": "500309"
  },
  {
    "text": "web token and it's essentially a compact way for one system to send an assertion",
    "start": "500309",
    "end": "506039"
  },
  {
    "text": "to another system it's an open standard which means that there's a lot of open",
    "start": "506039",
    "end": "511679"
  },
  {
    "text": "source libraries out there to decode and encode these JSON web tokens it's base64 encoded and it consists of",
    "start": "511679",
    "end": "520229"
  },
  {
    "text": "three parts separated by periods the first part is the header it just",
    "start": "520229",
    "end": "525569"
  },
  {
    "text": "indicates that it's a JSON web token and the particular signing algorithm",
    "start": "525569",
    "end": "531420"
  },
  {
    "text": "the second part is where the meat is and this is the payload so this effectively contains our assertion and we'll go into",
    "start": "531420",
    "end": "539220"
  },
  {
    "text": "more details on this the third part is the signature so this is a cryptographic",
    "start": "539220",
    "end": "546870"
  },
  {
    "text": "signature that's usually computed using the sender's private key and this lets",
    "start": "546870",
    "end": "553740"
  },
  {
    "text": "you verify that the particular token was in fact issued by that particular sender",
    "start": "553740",
    "end": "560240"
  },
  {
    "text": "so together this is a JWT token when you authorize using Cognito you get back",
    "start": "560240",
    "end": "567420"
  },
  {
    "text": "three of these JWT tokens an identity token an access token and a refresh",
    "start": "567420",
    "end": "573480"
  },
  {
    "text": "token okay so we'll use cognitive to get those JWT tokens for our application we",
    "start": "573480",
    "end": "581250"
  },
  {
    "text": "actually want to interact with AWS services so for example we allow the",
    "start": "581250",
    "end": "586530"
  },
  {
    "text": "user to upload a profile image into s3",
    "start": "586530",
    "end": "591650"
  },
  {
    "text": "so how do we translate these jate JWT tokens into something that allows us to",
    "start": "591650",
    "end": "598590"
  },
  {
    "text": "access AWS resources so to bridge that gap we introduce Amazon kognito",
    "start": "598590",
    "end": "605460"
  },
  {
    "text": "federated identities and what amazon Cognito federated identities helps you",
    "start": "605460",
    "end": "612030"
  },
  {
    "text": "to do is exchange authorization tokens for temporary AWS credentials so this is",
    "start": "612030",
    "end": "622650"
  },
  {
    "text": "what that looks like your user up then a case against Cognito user pools gets",
    "start": "622650",
    "end": "629010"
  },
  {
    "text": "back those three JWT tokens then it",
    "start": "629010",
    "end": "634410"
  },
  {
    "text": "makes a call to Cognito federated identity passing in the identity token",
    "start": "634410",
    "end": "641540"
  },
  {
    "text": "it'll get back a unique identity ID corresponding to that user",
    "start": "641540",
    "end": "648200"
  },
  {
    "text": "it makes one more call to ask for AWS credentials passing in the identity ID",
    "start": "648200",
    "end": "655950"
  },
  {
    "text": "that it got earlier along with the identity token that I got from Cognito",
    "start": "655950",
    "end": "661140"
  },
  {
    "text": "user pools behind the scenes kognito federated identities will then",
    "start": "661140",
    "end": "667010"
  },
  {
    "text": "make a call assume an I am role using AWS security",
    "start": "667010",
    "end": "673190"
  },
  {
    "text": "token service which then returns back temporary AWS credentials and then it",
    "start": "673190",
    "end": "678529"
  },
  {
    "text": "hands back those credentials back to the mobile app and those temporary AWS",
    "start": "678529",
    "end": "683899"
  },
  {
    "text": "credentials consists of an access key a secret key and a session token and we'll",
    "start": "683899",
    "end": "690140"
  },
  {
    "text": "take a closer look at that so that's great now our mobile app has AWS credentials",
    "start": "690140",
    "end": "697089"
  },
  {
    "text": "it can now use the standard SDKs to interact with any AWS service such as s3",
    "start": "697089",
    "end": "705610"
  },
  {
    "text": "so to kind of show how this works in practice I want to go through a quick demo and show how we configured our user",
    "start": "705610",
    "end": "712700"
  },
  {
    "text": "pools and federated identity can we switch over to the demo okay",
    "start": "712700",
    "end": "723770"
  },
  {
    "text": "so this is our space finder user pool and I'm not going to touch on all of the configuration options only some of the",
    "start": "723770",
    "end": "730040"
  },
  {
    "text": "key ones that we think are worth mentioning so a kognito user pool has a",
    "start": "730040",
    "end": "735920"
  },
  {
    "text": "unique pool ID and we created some sample users we created a couple of",
    "start": "735920",
    "end": "741800"
  },
  {
    "text": "normal users as well as an administrator user and out-of-the-box each user can be",
    "start": "741800",
    "end": "751820"
  },
  {
    "text": "associated with some standard attributes attributes such as first name last name",
    "start": "751820",
    "end": "757700"
  },
  {
    "text": "email for our application we also wanted to distinguish between normal users and",
    "start": "757700",
    "end": "764690"
  },
  {
    "text": "admin users and so we actually created a custom attribute in this case called",
    "start": "764690",
    "end": "770089"
  },
  {
    "text": "custom admin that will designate whether a user is an admin or not so you have",
    "start": "770089",
    "end": "780950"
  },
  {
    "text": "one user pool you can have multiple applications accessing the profile",
    "start": "780950",
    "end": "786230"
  },
  {
    "text": "information in that user pool so we have two applications here the first one is",
    "start": "786230",
    "end": "791990"
  },
  {
    "text": "our mobile application so our mobile application",
    "start": "791990",
    "end": "797390"
  },
  {
    "text": "has its own unique application client ID and we've configured it to require SRP",
    "start": "797390",
    "end": "803590"
  },
  {
    "text": "authorized identification and we've also",
    "start": "803590",
    "end": "809240"
  },
  {
    "text": "configured the mobile application to have access to certain attributes such",
    "start": "809240",
    "end": "814280"
  },
  {
    "text": "as the email first name last name as well as the custom admin attribute but",
    "start": "814280",
    "end": "823400"
  },
  {
    "text": "you'll notice that our mobile application does not have write permissions to modify that custom admin",
    "start": "823400",
    "end": "832340"
  },
  {
    "text": "attribute okay we have a second",
    "start": "832340",
    "end": "837650"
  },
  {
    "text": "application configured here and this is our back-end application that actually",
    "start": "837650",
    "end": "843050"
  },
  {
    "text": "provisions the users that actually creates the admin users so it's got its",
    "start": "843050",
    "end": "849200"
  },
  {
    "text": "own unique application client ID and in",
    "start": "849200",
    "end": "856850"
  },
  {
    "text": "this case we have the option of disabling the SRP the secure remote password authentication we can secure it",
    "start": "856850",
    "end": "863330"
  },
  {
    "text": "using other means and typically we would define an application client secret and",
    "start": "863330",
    "end": "869180"
  },
  {
    "text": "what you'll notice when you look at the permissions for this particular provisioning application is that it has",
    "start": "869180",
    "end": "876620"
  },
  {
    "text": "four permissions to read or write any attribute and so you have one user pool",
    "start": "876620",
    "end": "884720"
  },
  {
    "text": "but you can have multiple different applications accessing that same user profile information each with its own",
    "start": "884720",
    "end": "892420"
  },
  {
    "text": "permission set okay and I want to show",
    "start": "892420",
    "end": "899600"
  },
  {
    "text": "you the mobile application that we built so space finder allows you to look at",
    "start": "899600",
    "end": "906830"
  },
  {
    "text": "bookings look be able to book a room and if I click around here you'll notice",
    "start": "906830",
    "end": "913280"
  },
  {
    "text": "that I can't see anything I'm not signed in yet okay so everything I'm going to",
    "start": "913280",
    "end": "921110"
  },
  {
    "text": "be doing here on this mobile phone you can see in this window here to the left and what we did is we enabled chrome",
    "start": "921110",
    "end": "927650"
  },
  {
    "text": "debugger tools so that anything I do here any of the debugging output you'll see",
    "start": "927650",
    "end": "933770"
  },
  {
    "text": "it right here on the screen to the window to the right so you can get a behind-the-scenes view of what is",
    "start": "933770",
    "end": "940940"
  },
  {
    "text": "happening okay so I'm going to click around I can then register as a new user",
    "start": "940940",
    "end": "947420"
  },
  {
    "text": "so let me just register and we already filled out this form so I'm going to",
    "start": "947420",
    "end": "953570"
  },
  {
    "text": "register as a new user Jim first name last name I'll click sign up and it says",
    "start": "953570",
    "end": "963320"
  },
  {
    "text": "sign up successful and it sent me an email with a confirmation code so I'm",
    "start": "963320",
    "end": "969589"
  },
  {
    "text": "going to check my email and here's my",
    "start": "969589",
    "end": "975740"
  },
  {
    "text": "new verification code 9 6 3 6 4 1 I'm",
    "start": "975740",
    "end": "982310"
  },
  {
    "text": "going to go back into the application ok I already forgot the number nine six",
    "start": "982310",
    "end": "994700"
  },
  {
    "text": "three six four one nine six three six",
    "start": "994700",
    "end": "1001390"
  },
  {
    "text": "four one and I'm going to then confirm sign up great I'm now successfully",
    "start": "1001390",
    "end": "1010240"
  },
  {
    "text": "registered so I can now sign in so I'll just click on sign in on the upper right",
    "start": "1010240",
    "end": "1017200"
  },
  {
    "text": "hand of the screen and I sign in let me",
    "start": "1017200",
    "end": "1022360"
  },
  {
    "text": "change my username to Jim which is my new user here and I use that default",
    "start": "1022360",
    "end": "1028839"
  },
  {
    "text": "password and I'm going to sign in it's going to authenticate against kognito",
    "start": "1028839",
    "end": "1034270"
  },
  {
    "text": "user polls and success so I wanted to walk through what's happening behind the",
    "start": "1034270",
    "end": "1040030"
  },
  {
    "text": "scenes here so i authenticated against Cognito user polls and I got back three",
    "start": "1040030",
    "end": "1046650"
  },
  {
    "text": "JWT tokens the identity token an access",
    "start": "1046650",
    "end": "1051970"
  },
  {
    "text": "token and the Refresh token so let's take a quick look at each one of these",
    "start": "1051970",
    "end": "1058200"
  },
  {
    "text": "so I take the identity token and I want to decode it to see what's inside",
    "start": "1058200",
    "end": "1064650"
  },
  {
    "text": "so if I copy and paste it here I'll decode it and you you'll see we have the",
    "start": "1065820",
    "end": "1071590"
  },
  {
    "text": "header which represents that it's a JWT token and the payload is what is",
    "start": "1071590",
    "end": "1076930"
  },
  {
    "text": "interesting here so if i zoom in you'll see that the payload includes my kognito",
    "start": "1076930",
    "end": "1083290"
  },
  {
    "text": "user pool ID as well as my username Jim my first name my last name and my email",
    "start": "1083290",
    "end": "1091480"
  },
  {
    "text": "address so it has the profile information that I can figure it earlier that the mobile application can access",
    "start": "1091480",
    "end": "1097600"
  },
  {
    "text": "so that's what comes back as part of this JWT assertion it also has an",
    "start": "1097600",
    "end": "1104290"
  },
  {
    "text": "expiration in this case identity tokens expire after one hour so let's take a",
    "start": "1104290",
    "end": "1114700"
  },
  {
    "text": "look at the other token the access token",
    "start": "1114700",
    "end": "1120029"
  },
  {
    "text": "so the access token has slightly different information so the access",
    "start": "1121020",
    "end": "1130300"
  },
  {
    "text": "token has the kognito user ID but it does not contain any of the profile",
    "start": "1130300",
    "end": "1135760"
  },
  {
    "text": "information what you use the access token for is to make calls to kognito",
    "start": "1135760",
    "end": "1140980"
  },
  {
    "text": "user pools to modify attributes about that user so the identity token can be",
    "start": "1140980",
    "end": "1146350"
  },
  {
    "text": "used by the front-end app but the access token is really used for interacting with the Cognito user poles and like the",
    "start": "1146350",
    "end": "1153190"
  },
  {
    "text": "identity token the access token also has an expiration in this case of one hour",
    "start": "1153190",
    "end": "1160050"
  },
  {
    "text": "so that's our identity token our access token and then what you use a refresh",
    "start": "1160050",
    "end": "1165730"
  },
  {
    "text": "token for is if your access token has expired you can present the access token",
    "start": "1165730",
    "end": "1171730"
  },
  {
    "text": "along with that refresh token and get a new access token so that's what the refresh token is for okay so going back",
    "start": "1171730",
    "end": "1181870"
  },
  {
    "text": "to what else happened behind the scenes I got my JWT tokens I now need to",
    "start": "1181870",
    "end": "1187210"
  },
  {
    "text": "exchange those JWT tokens for temporary AWS credentials and so to do that I made",
    "start": "1187210",
    "end": "1194830"
  },
  {
    "text": "the calls to Cognito federated identity I get back my unique kognito user ID as",
    "start": "1194830",
    "end": "1202680"
  },
  {
    "text": "well as the temporary AWS credentials the AWS access key the secret key as",
    "start": "1202680",
    "end": "1209290"
  },
  {
    "text": "well as a session token so now let's try actually doing something with this so if",
    "start": "1209290",
    "end": "1216970"
  },
  {
    "text": "I go to my account page I have the option of uploading a profile image I'll",
    "start": "1216970",
    "end": "1222310"
  },
  {
    "text": "click OK just clear this so I have the",
    "start": "1222310",
    "end": "1228100"
  },
  {
    "text": "option of uploading a profile image I'll select an image it pops up the image",
    "start": "1228100",
    "end": "1235720"
  },
  {
    "text": "selector here I'll select the photo I took up myself last night and you can see it's uploading to s3 and it used",
    "start": "1235720",
    "end": "1242890"
  },
  {
    "text": "those temporary credentials using the AWS DK to make a normal upload how did",
    "start": "1242890",
    "end": "1248140"
  },
  {
    "text": "it know that it had permissions to upload to s3 that goes back to that iam",
    "start": "1248140",
    "end": "1253900"
  },
  {
    "text": "role that we associated with the kognito federated identity in the first place and that I am role in this case was",
    "start": "1253900",
    "end": "1264150"
  },
  {
    "text": "allowed us access to API gateway and so on and here's the s3 portion of it",
    "start": "1264150",
    "end": "1269770"
  },
  {
    "text": "allows us to put an object into a particular s3 bucket under a particular",
    "start": "1269770",
    "end": "1275320"
  },
  {
    "text": "key space that's specific to that user so if I change this now from and allow",
    "start": "1275320",
    "end": "1280950"
  },
  {
    "text": "I'll change it to a deny I'm going to try this again I uploaded the",
    "start": "1280950",
    "end": "1287950"
  },
  {
    "text": "permissions associated with that Cognito federated identity if I select an image select my photo again it'll try to",
    "start": "1287950",
    "end": "1295330"
  },
  {
    "text": "upload to s3 and you'll see in this case we now get a 403 status code forbidden error",
    "start": "1295330",
    "end": "1302290"
  },
  {
    "text": "uploading image to s3 and so those permissions that you associate with your",
    "start": "1302290",
    "end": "1307630"
  },
  {
    "text": "Cognito federated identity is what determines what permissions your app has when it's trying to access AWS resources",
    "start": "1307630",
    "end": "1315990"
  },
  {
    "text": "so I'm just for good measure I'm going to just change this back to allow and I",
    "start": "1315990",
    "end": "1324430"
  },
  {
    "text": "can just try it one more time and I should be able to upload my image this",
    "start": "1324430",
    "end": "1330220"
  },
  {
    "text": "time so this was just an example of how you",
    "start": "1330220",
    "end": "1337060"
  },
  {
    "text": "identic eight against kognito user pools get back your JWT tokens you take those",
    "start": "1337060",
    "end": "1343300"
  },
  {
    "text": "JWT tokens call kognito federated identity and exchange them for",
    "start": "1343300",
    "end": "1348370"
  },
  {
    "text": "credentials that you can use to call AWS resources and with that I'll turn it over to Justin thanks Jim if we could go",
    "start": "1348370",
    "end": "1357280"
  },
  {
    "text": "back to the presentation please so as you've just seen from Jim we now have a",
    "start": "1357280",
    "end": "1363820"
  },
  {
    "text": "way to sign-in our users with cognitive user pools we have a way to get tokens for them and exchange them for AWS",
    "start": "1363820",
    "end": "1369580"
  },
  {
    "text": "credentials but the core of our business logic in our app is actually not an s3",
    "start": "1369580",
    "end": "1375310"
  },
  {
    "text": "or even in a dynamo table but rather in an API we would like to have so",
    "start": "1375310",
    "end": "1381730"
  },
  {
    "text": "following the serverless pattern our application uses api gateway lambda and",
    "start": "1381730",
    "end": "1387060"
  },
  {
    "text": "DynamoDB to do all of its persistence state and so when you look at our API",
    "start": "1387060",
    "end": "1393120"
  },
  {
    "text": "this is our API structure so it's a standard restful api different paths for",
    "start": "1393120",
    "end": "1398200"
  },
  {
    "text": "users you know different things here but the key thing that's worth mentioning is that we have admins who should be able",
    "start": "1398200",
    "end": "1404380"
  },
  {
    "text": "to create locations or delete locations and we have certain operations on our",
    "start": "1404380",
    "end": "1409690"
  },
  {
    "text": "API that we only want certain users to be able to do so let's talk about the different options available for us to do",
    "start": "1409690",
    "end": "1416560"
  },
  {
    "text": "authorization with API gateway and there are three choices we have to look at today",
    "start": "1416560",
    "end": "1421960"
  },
  {
    "text": "these include user pool authorizers I am based authorization and custom",
    "start": "1421960",
    "end": "1427270"
  },
  {
    "text": "authorizers and so we'll walk through each to see you can see how they work so the first one which is the most",
    "start": "1427270",
    "end": "1433330"
  },
  {
    "text": "simplistic is user pool authorizers so for those of you who may be interested in user pools what you've seen today or",
    "start": "1433330",
    "end": "1440710"
  },
  {
    "text": "maybe already using user pools this is a great option for you potentially where we can essentially do yes/no type",
    "start": "1440710",
    "end": "1448540"
  },
  {
    "text": "authorization the key thing to note here is that this will answer is it a valid user in the user pool yes or no and",
    "start": "1448540",
    "end": "1456130"
  },
  {
    "text": "that's it so there's no way to actually say you know more complex permissioning",
    "start": "1456130",
    "end": "1461830"
  },
  {
    "text": "than that but just to walk through what this looks like as Jim showed you we authenticate with user pools we get back a set of JWT",
    "start": "1461830",
    "end": "1469270"
  },
  {
    "text": "tokens and we then take that identity token we got back and we actually make an HTTP request injecting the identity",
    "start": "1469270",
    "end": "1476710"
  },
  {
    "text": "token into our authorization header on that request when API gateway receives this request",
    "start": "1476710",
    "end": "1481750"
  },
  {
    "text": "it parses the authorization header can validate the signature based on the JWT",
    "start": "1481750",
    "end": "1487540"
  },
  {
    "text": "you know cinematix that we saw it also knows for that user pool from the header of the JWT token which key should be",
    "start": "1487540",
    "end": "1494980"
  },
  {
    "text": "used to sign that so it can know it's from the right user pool and assuming that's a valid user it will go ahead and",
    "start": "1494980",
    "end": "1500980"
  },
  {
    "text": "let the user go ahead and invoke the lambda function as is their call would",
    "start": "1500980",
    "end": "1506440"
  },
  {
    "text": "imply and is configured and then from the lambda function to DynamoDB we actually are using the execution role of",
    "start": "1506440",
    "end": "1513340"
  },
  {
    "text": "lambda to do all of our DynamoDB state manipulation or anything else that we want lambda to do behind the scenes for",
    "start": "1513340",
    "end": "1519250"
  },
  {
    "text": "our API the key thing to note here is that all authorization logic around if",
    "start": "1519250",
    "end": "1525070"
  },
  {
    "text": "that users valid or not is exclusively in API gateway related to our user pool so once we get to lambda",
    "start": "1525070",
    "end": "1532420"
  },
  {
    "text": "lambda has no awareness of the user unless you're passing something it doesn't need to know anything about the",
    "start": "1532420",
    "end": "1538900"
  },
  {
    "text": "authorization logic it just needs to know about what the business logic is and what it needs to do so we offloaded",
    "start": "1538900",
    "end": "1544030"
  },
  {
    "text": "that burden just to our API gateway resource so but what if we want",
    "start": "1544030",
    "end": "1550000"
  },
  {
    "text": "something more than yes/no type authorization for our users or what if we're federating other sources as Jim",
    "start": "1550000",
    "end": "1556660"
  },
  {
    "text": "talked about with federated identities we could have users coming from a variety of different places maybe Google",
    "start": "1556660",
    "end": "1562660"
  },
  {
    "text": "maybe Facebook social identity providers out there maybe even your corporate identity providers right all of those",
    "start": "1562660",
    "end": "1569860"
  },
  {
    "text": "can be exchanged to get AWS credentials and assume an iamb role and so with I am",
    "start": "1569860",
    "end": "1576160"
  },
  {
    "text": "based authorization once you've done such an assumed role operation then that's where this would",
    "start": "1576160",
    "end": "1581680"
  },
  {
    "text": "come into play to walk you through this flow you would call out to authenticate",
    "start": "1581680",
    "end": "1587080"
  },
  {
    "text": "with that third party in this case user pools but the reality is it could be anything supported by Cognito federated",
    "start": "1587080",
    "end": "1593050"
  },
  {
    "text": "identities social identity provider enterprise identity provider open ID connect",
    "start": "1593050",
    "end": "1598720"
  },
  {
    "text": "sam'l etc then you get back tokens from that provider and you pass that token",
    "start": "1598720",
    "end": "1604690"
  },
  {
    "text": "into cognitive federated entities to get your AWS credentials back after the tokens been validated so for user pools",
    "start": "1604690",
    "end": "1611830"
  },
  {
    "text": "you pass the identity token once you get your temporary AWS credentials back and you have the three different pieces of",
    "start": "1611830",
    "end": "1619420"
  },
  {
    "text": "that I am role that Jim talked about you make a standard AWS API request using a",
    "start": "1619420",
    "end": "1626950"
  },
  {
    "text": "process called signature v4 signing so sick v4 for short so for those that may",
    "start": "1626950",
    "end": "1632770"
  },
  {
    "text": "not be familiar with this every AWS SDK that you use every API that it calls behind the scenes the SDKs implement",
    "start": "1632770",
    "end": "1639670"
  },
  {
    "text": "this signing process for you and here what happens is you actually take those creds and the nice thing is that API",
    "start": "1639670",
    "end": "1646510"
  },
  {
    "text": "gateway can even generate an SDK for your API that will do the sigdi for signing without you having to implement",
    "start": "1646510",
    "end": "1652600"
  },
  {
    "text": "it yourself once you call API gateway with the sign Mississippi for request it",
    "start": "1652600",
    "end": "1658540"
  },
  {
    "text": "can look at the credentials that sign the request and know that it was from this role can evaluate a policy and then",
    "start": "1658540",
    "end": "1666040"
  },
  {
    "text": "based on the policy of that user can tell if they're allowed to invoke the API or not assuming they are allowed to",
    "start": "1666040",
    "end": "1672970"
  },
  {
    "text": "invoke the API we would call lambda just as before and then our execution role",
    "start": "1672970",
    "end": "1678250"
  },
  {
    "text": "for lambda would be used for dynamodb so you know what does a policy look like",
    "start": "1678250",
    "end": "1684400"
  },
  {
    "text": "right this is a sample I am policy as it relates to API gateway so the key thing",
    "start": "1684400",
    "end": "1691180"
  },
  {
    "text": "to note here is that there's an action called execute API invoke and that's the",
    "start": "1691180",
    "end": "1697360"
  },
  {
    "text": "only key action you need to worry about in an ion policy to specify which paths of an API gateway resource you could",
    "start": "1697360",
    "end": "1703540"
  },
  {
    "text": "call or not call so for simplistic purposes in this policy we've basically whitelisted the entire API but then",
    "start": "1703540",
    "end": "1711880"
  },
  {
    "text": "we've blacklisted doing a post operation for locations or any sub path beyond",
    "start": "1711880",
    "end": "1717190"
  },
  {
    "text": "that now as a best practice you would not really want to have a whitelist approach or you know where your",
    "start": "1717190",
    "end": "1723700"
  },
  {
    "text": "blacklisting only prohibited operations because maybe your developers are adding to the API all the time and they forget",
    "start": "1723700",
    "end": "1729520"
  },
  {
    "text": "to update the policy and now users could do up you didn't intend them to do so as a",
    "start": "1729520",
    "end": "1734550"
  },
  {
    "text": "best practice you might want to do a whitelist type of approach instead what this shows you how it goes and then the",
    "start": "1734550",
    "end": "1740340"
  },
  {
    "text": "final type of authorizer is custom authorizer from api gateway and this is the most flexible choice of all three so",
    "start": "1740340",
    "end": "1748530"
  },
  {
    "text": "just to show you here say you're using a social provider like Google Facebook login with Amazon any provider that can",
    "start": "1748530",
    "end": "1756420"
  },
  {
    "text": "give you a bearer token back what you can do here is you can go to that provider and authenticate to that",
    "start": "1756420",
    "end": "1762300"
  },
  {
    "text": "provider well also this you know this could be a managed identity provider or a third party right there's several",
    "start": "1762300",
    "end": "1767700"
  },
  {
    "text": "identity services out there this would include them you can authenticate with that provider directly get back your set",
    "start": "1767700",
    "end": "1775020"
  },
  {
    "text": "of tokens or token our tokens and then you would take the token of your choice and you would put it in a head of your",
    "start": "1775020",
    "end": "1781680"
  },
  {
    "text": "choice most commonly the authorization header and sign your HTTP request well I",
    "start": "1781680",
    "end": "1787740"
  },
  {
    "text": "shouldn't say signed inject the authorization header into your HTTP request to API gateway with that token",
    "start": "1787740",
    "end": "1793730"
  },
  {
    "text": "now one API gateway gets this token it looks at its cache and says for this",
    "start": "1793730",
    "end": "1799470"
  },
  {
    "text": "token do I know what effective permissions this user should have in my API if it doesn't know and if it's not",
    "start": "1799470",
    "end": "1806940"
  },
  {
    "text": "previously cached and still valid what it will do is will fire a lambda function your authorizer lambda function",
    "start": "1806940",
    "end": "1813120"
  },
  {
    "text": "that then can go out and have the business logic of your choice to go out to Google or any managed identity",
    "start": "1813120",
    "end": "1819630"
  },
  {
    "text": "provider you want to actually authenticate the user there or validate the signature or any steps you'd like",
    "start": "1819630",
    "end": "1825000"
  },
  {
    "text": "but ultimately the function must return back a well-formed I am policy to the",
    "start": "1825000",
    "end": "1830910"
  },
  {
    "text": "user so after you've done whatever you'd like with case statements or if conditions or whatever business logic you send this",
    "start": "1830910",
    "end": "1837270"
  },
  {
    "text": "policy back once the policy is now an API gateway it gets cached for an amount",
    "start": "1837270",
    "end": "1842400"
  },
  {
    "text": "of time standard amount of time is five minutes and we evaluate that policy against im2 look up if that user is able",
    "start": "1842400",
    "end": "1850230"
  },
  {
    "text": "to call the given operations that they're trying to invoke just as before",
    "start": "1850230",
    "end": "1855390"
  },
  {
    "text": "if they're able to call those operations we invoke the lambda function lambda will go on to do any other kind of thing",
    "start": "1855390",
    "end": "1862050"
  },
  {
    "text": "you want in our case DynamoDB statement it village so this is a custom authorizer but at",
    "start": "1862050",
    "end": "1868650"
  },
  {
    "text": "first glance you might say gosh you know how do I write a lambda function that generates an ion policy for me well the",
    "start": "1868650",
    "end": "1876420"
  },
  {
    "text": "good news here is we actually offer a custom authorizer blueprint in lambda so",
    "start": "1876420",
    "end": "1882180"
  },
  {
    "text": "if you just go to create a lambda function you have blueprints that pop up searching the blueprints for authorizer and you'll see that there's two",
    "start": "1882180",
    "end": "1887910"
  },
  {
    "text": "different languages already supported with the out-of-the-box custom you know authorizer function and helper utilities",
    "start": "1887910",
    "end": "1895050"
  },
  {
    "text": "and classes and things like that so with just a few lines of code here we can actually generate an actual well-formed",
    "start": "1895050",
    "end": "1901440"
  },
  {
    "text": "I in policy and just really focus on our business logic in that function and very little else so I was able to get my",
    "start": "1901440",
    "end": "1908190"
  },
  {
    "text": "first custom authorize a function running in less than 10 minutes to tell you actually how easy it could be done in summary there are three different",
    "start": "1908190",
    "end": "1916710"
  },
  {
    "text": "authorization types for API gateway user po authorizers the simplest for yes/no",
    "start": "1916710",
    "end": "1921900"
  },
  {
    "text": "authorization for user pulls exclusively and then I am based authorization with",
    "start": "1921900",
    "end": "1927840"
  },
  {
    "text": "Sigma for signing as well as custom authorizers now unless you have just the",
    "start": "1927840",
    "end": "1933960"
  },
  {
    "text": "need for user providers our best practice would be to go with iam authorization or custom authorizers",
    "start": "1933960",
    "end": "1939600"
  },
  {
    "text": "throughout your API to make this more real let's go ahead and cut over to a",
    "start": "1939600",
    "end": "1945060"
  },
  {
    "text": "demo I can show you each of these workings so you can see how they play out so here we are again back in space",
    "start": "1945060",
    "end": "1953760"
  },
  {
    "text": "finder let me go actually into close this guy let me go here and so we can go",
    "start": "1953760",
    "end": "1963210"
  },
  {
    "text": "into API gateway and okay so here on the",
    "start": "1963210",
    "end": "1969240"
  },
  {
    "text": "right for those that may not be familiar with API gateway we have our entire API all of our resources and operations and",
    "start": "1969240",
    "end": "1975410"
  },
  {
    "text": "then per operation we can actually set the type of authorization we want for",
    "start": "1975410",
    "end": "1981360"
  },
  {
    "text": "that operation so in this case a list or a get on our locations resource we're going to use a user pool authorizer and",
    "start": "1981360",
    "end": "1987600"
  },
  {
    "text": "then for our create a location option which is admin only we're using a custom",
    "start": "1987600",
    "end": "1993540"
  },
  {
    "text": "authorizer one thing that's important to note is that when you look at a method request",
    "start": "1993540",
    "end": "1999059"
  },
  {
    "text": "you not only have authorization in here but you also have API keys some",
    "start": "1999059",
    "end": "2005059"
  },
  {
    "text": "customers have you I've seen this pattern and I like to just help people understand that API keys as far as API",
    "start": "2005059",
    "end": "2012649"
  },
  {
    "text": "gateway goes are not meant for authentication the difference is that with an API key it's a static string",
    "start": "2012649",
    "end": "2019759"
  },
  {
    "text": "that would be used for you to track a usage plan or quota or throttling for a",
    "start": "2019759",
    "end": "2025549"
  },
  {
    "text": "user but not to actually authorize them and the reason why is with an API key",
    "start": "2025549",
    "end": "2031279"
  },
  {
    "text": "it's a static string you're injecting but the string never changes and never expires with all of the approaches we've",
    "start": "2031279",
    "end": "2038389"
  },
  {
    "text": "talked about all of our tokens or time-limited most of them for one hour at most and it's a much more secure",
    "start": "2038389",
    "end": "2045230"
  },
  {
    "text": "approach than using a static string that could be compromised and used indefinitely so to go ahead and you know",
    "start": "2045230",
    "end": "2053358"
  },
  {
    "text": "make this more real let's go back to space finder again okay so here under",
    "start": "2053359",
    "end": "2058638"
  },
  {
    "text": "here on your in our app just okay so let's go over to resources let me",
    "start": "2058639",
    "end": "2065658"
  },
  {
    "text": "actually clear this so I wanted to show you what happens if you call an operation where you've required",
    "start": "2065659",
    "end": "2070700"
  },
  {
    "text": "authorization but you don't actually send the authorization credentials so let's try and load locations without off",
    "start": "2070700",
    "end": "2076970"
  },
  {
    "text": "okay we send a get request we get a 401 back saying we're unauthorized we don't",
    "start": "2076970",
    "end": "2083030"
  },
  {
    "text": "know who you are you didn't send us headers let's try this again clear the log for simplicity and this time we'll",
    "start": "2083030",
    "end": "2089658"
  },
  {
    "text": "use a user pull authorizer so if you notice we're sending a get request here",
    "start": "2089659",
    "end": "2094790"
  },
  {
    "text": "and the zoom in on this a little bit we're sending one header with our request which is our authorization",
    "start": "2094790",
    "end": "2100760"
  },
  {
    "text": "header and we're passing the I the user pulls identity token as that at that",
    "start": "2100760",
    "end": "2107780"
  },
  {
    "text": "credential now as you can see the request worked we have our locations back so let's go into the Venetian here",
    "start": "2107780",
    "end": "2115240"
  },
  {
    "text": "and we want to actually load resources now right so this is an example of I am",
    "start": "2115240",
    "end": "2121460"
  },
  {
    "text": "based authorization and with I am based",
    "start": "2121460",
    "end": "2126530"
  },
  {
    "text": "authorization as you can see here we do a get request but we needed to sign the request so unlike the other authorized",
    "start": "2126530",
    "end": "2132870"
  },
  {
    "text": "types we're actually even signing the payload and the entirety of the request and if I open this up just to show you",
    "start": "2132870",
    "end": "2138390"
  },
  {
    "text": "all the headers there's actually more headers involved in just the authorization header there's that which",
    "start": "2138390",
    "end": "2143550"
  },
  {
    "text": "includes the signature but there's also headers like X Amazon date X Amazon",
    "start": "2143550",
    "end": "2149190"
  },
  {
    "text": "security token so Sigma for signing is a little bit more than the other approaches right and it's more",
    "start": "2149190",
    "end": "2155250"
  },
  {
    "text": "all-inclusive in terms of looking at the entirety of the request obviously the get request worked so",
    "start": "2155250",
    "end": "2162060"
  },
  {
    "text": "let's go in to say opaline theatre place it sounds familiar and I hear there's an",
    "start": "2162060",
    "end": "2168630"
  },
  {
    "text": "event going on today at 11:00 a.m. so let's reserve the space so if we go in here let's book the space this is",
    "start": "2168630",
    "end": "2175260"
  },
  {
    "text": "another example of I am authorization and this is a post and so the difference",
    "start": "2175260",
    "end": "2181050"
  },
  {
    "text": "now for the first time we have a body with all of our semantics but we're sending the fully signed request again",
    "start": "2181050",
    "end": "2187320"
  },
  {
    "text": "with all of the headers and we can see that the request was successful and authorized now if we go as you can see",
    "start": "2187320",
    "end": "2195450"
  },
  {
    "text": "you know just going to our bookings we can now see that our bookings are there so our our state has been persistent but",
    "start": "2195450",
    "end": "2204180"
  },
  {
    "text": "what we haven't shown is we haven't seen a way to differentiate our admin users with either of these approaches that we've shown so far so in our app let me",
    "start": "2204180",
    "end": "2212610"
  },
  {
    "text": "actually show you under account here we have a little toggle even though I'm not",
    "start": "2212610",
    "end": "2218250"
  },
  {
    "text": "signed in as an admin let's turn on some admin features so we can actually see what happens and if you notice we now",
    "start": "2218250",
    "end": "2224310"
  },
  {
    "text": "have an add add a location option in our app so let's go ahead and try and add a",
    "start": "2224310",
    "end": "2229770"
  },
  {
    "text": "test location and we're not as we're not",
    "start": "2229770",
    "end": "2235440"
  },
  {
    "text": "logged in as an admin right so this is not likely to go well and as we can see we get an error back but this time it's",
    "start": "2235440",
    "end": "2242880"
  },
  {
    "text": "not a 401 it's actually a 403 meaning that you know we did send authorization",
    "start": "2242880",
    "end": "2248940"
  },
  {
    "text": "header and we know who you are but you're just not authorized to do this so that's the difference so let's actually",
    "start": "2248940",
    "end": "2254700"
  },
  {
    "text": "show if I were to go ahead and log out let me log in as an admin",
    "start": "2254700",
    "end": "2259760"
  },
  {
    "text": "or username here just plug this in again so we can fix this let's go ahead and",
    "start": "2262960",
    "end": "2275869"
  },
  {
    "text": "login as admin one",
    "start": "2275869",
    "end": "2278828"
  },
  {
    "text": "and now as before we're signed in we've got a new set of tokens back this time",
    "start": "2284020",
    "end": "2289510"
  },
  {
    "text": "is admin one let's go ahead and do the same thing add the test location at a",
    "start": "2289510",
    "end": "2297640"
  },
  {
    "text": "location and unlike before we didn't get an error so if I load my locations again",
    "start": "2297640",
    "end": "2304170"
  },
  {
    "text": "you'll actually see that we have our new",
    "start": "2304170",
    "end": "2310510"
  },
  {
    "text": "test location back we also are using custom authorizers for our delete locations so just the same I can now do",
    "start": "2310510",
    "end": "2318250"
  },
  {
    "text": "a delete request and successful so to show you what how you can actually test",
    "start": "2318250",
    "end": "2324460"
  },
  {
    "text": "this easily in the API gateway console I'll cut over and you can see this at",
    "start": "2324460",
    "end": "2330610"
  },
  {
    "text": "work let me grab our admin token let's grab",
    "start": "2330610",
    "end": "2335740"
  },
  {
    "text": "the identity pool here these are pools",
    "start": "2335740",
    "end": "2342420"
  },
  {
    "text": "and if I go into API gateway can actually go into our authorizers where",
    "start": "2347200",
    "end": "2352510"
  },
  {
    "text": "you can see we have our user pulls authorizer or we can take our token and",
    "start": "2352510",
    "end": "2359470"
  },
  {
    "text": "we can actually test it directly oh I may not be logged let me let me do it",
    "start": "2359470",
    "end": "2364599"
  },
  {
    "text": "for custom authorize I may not have pasted it properly grab this one more",
    "start": "2364599",
    "end": "2372490"
  },
  {
    "text": "time you have an extra space hmm oh yeah",
    "start": "2372490",
    "end": "2377559"
  },
  {
    "text": "let me kill the space that's my issue so if I go down to custom authorizer see it",
    "start": "2377559",
    "end": "2386049"
  },
  {
    "text": "killed the leading in the trailing space",
    "start": "2386049",
    "end": "2389520"
  },
  {
    "text": "well you guys get to see live troubleshooting",
    "start": "2393599",
    "end": "2399310"
  },
  {
    "text": "so you're in luck right here let me just",
    "start": "2399310",
    "end": "2406870"
  },
  {
    "text": "try and sign out and sign it as the other user and get some new tokens I",
    "start": "2406870",
    "end": "2411570"
  },
  {
    "text": "think I think you're copying the space at the end okay I think I killed it but let's let's try that again",
    "start": "2412170",
    "end": "2418080"
  },
  {
    "text": "we signed in",
    "start": "2418080",
    "end": "2421590"
  },
  {
    "text": "so we actually just start at the end and work back there's this base there",
    "start": "2428180",
    "end": "2436430"
  },
  {
    "text": "obviously this is a lot easier when you're copying and pasting the console and you're doing it programmatically",
    "start": "2436460",
    "end": "2442970"
  },
  {
    "text": "I go in here here we go so we can see for our user pools authorizer that we",
    "start": "2448430",
    "end": "2454970"
  },
  {
    "text": "actually have this user setup and we got even though it's just showing us the identity token for good measure the",
    "start": "2454970",
    "end": "2461360"
  },
  {
    "text": "effective response is it's a valid user and you can see that custom admin is set",
    "start": "2461360",
    "end": "2466910"
  },
  {
    "text": "to false this is not an admin user that I just signed in with if I go into custom authorizer and I run the same",
    "start": "2466910",
    "end": "2473330"
  },
  {
    "text": "identity token what we'll get back",
    "start": "2473330",
    "end": "2480700"
  },
  {
    "text": "taking a little longer because our lambda was a cold start likely is you'll see that we got a well-formed eye on",
    "start": "2480700",
    "end": "2486980"
  },
  {
    "text": "policy and so this user much like we showed earlier was allowed to do you",
    "start": "2486980",
    "end": "2492230"
  },
  {
    "text": "know generically most things in the API but we have a deny statement that denies posting and deleting locations and any",
    "start": "2492230",
    "end": "2499820"
  },
  {
    "text": "sub path and in I am given that deny statements Trump allow statements the",
    "start": "2499820",
    "end": "2505550"
  },
  {
    "text": "effective permissions for that user was denied let me sign back in as the admin just to show you the difference so you",
    "start": "2505550",
    "end": "2511640"
  },
  {
    "text": "can see there this console.log",
    "start": "2511640",
    "end": "2520450"
  },
  {
    "text": "hey we're signing again let's go and grab our identity token",
    "start": "2532190",
    "end": "2539019"
  },
  {
    "text": "okay now I'll just try the custom authorizer the user pulls authorizer would look the same because they're both",
    "start": "2545380",
    "end": "2551539"
  },
  {
    "text": "valid users but if I tried a custom authorizer you'll notice now our denies",
    "start": "2551539",
    "end": "2557539"
  },
  {
    "text": "statements are gone so this admin is allowed to do anything in the API without any denying conditions showing",
    "start": "2557539",
    "end": "2564440"
  },
  {
    "text": "that we've used business logic and our lambda function to actually parse that custom admin property and decide what we",
    "start": "2564440",
    "end": "2571969"
  },
  {
    "text": "want to return back and this is now good for five minutes time with our default settings so if I make another call just",
    "start": "2571969",
    "end": "2579349"
  },
  {
    "text": "in the next minute I don't even need to run the lambda function again and have any latency or additional costs from the",
    "start": "2579349",
    "end": "2585680"
  },
  {
    "text": "lambda usage so now that you've seen all of the API gateway off the authorizers",
    "start": "2585680",
    "end": "2592489"
  },
  {
    "text": "and settings in practice the one final thing I would mention is that our API for demonstrative purposes uses a",
    "start": "2592489",
    "end": "2599569"
  },
  {
    "text": "hodgepodge of all three in reality this adds complexity to your API and to your",
    "start": "2599569",
    "end": "2605660"
  },
  {
    "text": "client side developer experience so I would not suggest using more than one if you can avoid doing so even though you",
    "start": "2605660",
    "end": "2612079"
  },
  {
    "text": "have the flexibility in the platform so to go ahead and talk a bit more about enterprise identities I'll go ahead and",
    "start": "2612079",
    "end": "2619039"
  },
  {
    "text": "turn it back to Jim to discuss sam'l and if we could cut back to the deck please so we talked about integrating with",
    "start": "2619039",
    "end": "2626479"
  },
  {
    "text": "Cognito user pools with open ID connect providers with other providers that",
    "start": "2626479",
    "end": "2632180"
  },
  {
    "text": "provide authorization tokens in an enterprise setting sam'l is a fairly",
    "start": "2632180",
    "end": "2637400"
  },
  {
    "text": "common standard for doing identity",
    "start": "2637400",
    "end": "2642739"
  },
  {
    "text": "Federation so here's our architecture so far how do you actually integrate a mobile application with a sam'l provider",
    "start": "2642739",
    "end": "2649390"
  },
  {
    "text": "and it turns out it's actually not trivial so in an enterprise setting",
    "start": "2649390",
    "end": "2655369"
  },
  {
    "text": "you're going to have an identity provider typically you know Active Directory or open LDAP and then the",
    "start": "2655369",
    "end": "2660710"
  },
  {
    "text": "sam'l provider such as a DFS Active Directory Federation services or",
    "start": "2660710",
    "end": "2666440"
  },
  {
    "text": "Shibboleth and the fact of the matter is Sam o2o that spec was ratified back in 2005",
    "start": "2666440",
    "end": "2674450"
  },
  {
    "text": "before the first iPhone even launched so it really wasn't built world where there's mobile applications",
    "start": "2674450",
    "end": "2680210"
  },
  {
    "text": "and sanma tudi Oh supports two different bindings opposed to a particular URL",
    "start": "2680210",
    "end": "2685910"
  },
  {
    "text": "endpoint or a redirect back to a URL and so in a mobile app this capturing that",
    "start": "2685910",
    "end": "2692329"
  },
  {
    "text": "sam'l response just is not trivial for example what do you redirect back to if you're using a mobile app so at a high",
    "start": "2692329",
    "end": "2700819"
  },
  {
    "text": "level the pattern for integrating sam'l with the mobile application is still very similar you would want to",
    "start": "2700819",
    "end": "2706190"
  },
  {
    "text": "authenticate against your sam'l endpoint against a DFS or with Shibboleth which in turn calls Active Directory or open",
    "start": "2706190",
    "end": "2714289"
  },
  {
    "text": "LDAP and then if you have that sam'l token or that sam'l claim you can then",
    "start": "2714289",
    "end": "2720769"
  },
  {
    "text": "use that to trade up for AWS credentials but it's really this step between one",
    "start": "2720769",
    "end": "2727940"
  },
  {
    "text": "and two where a lot of the complexity and the complication is and so the workarounds for doing this are either",
    "start": "2727940",
    "end": "2734599"
  },
  {
    "text": "one actually have a webview within your mobile application that can actually",
    "start": "2734599",
    "end": "2740329"
  },
  {
    "text": "intercept that redirect or to actually create a proxy service which in turn",
    "start": "2740329",
    "end": "2745880"
  },
  {
    "text": "calls the sam'l end point and then exchanges the sam'l claim with the",
    "start": "2745880",
    "end": "2753710"
  },
  {
    "text": "kognito federated identities so it's either a proxy service or some very",
    "start": "2753710",
    "end": "2759519"
  },
  {
    "text": "arcane webview scraping so this is the the challenge with integrating sam'l",
    "start": "2759519",
    "end": "2765469"
  },
  {
    "text": "with a mobile application and then of course once you have AWS credentials you can then exchange it for sorry you can",
    "start": "2765469",
    "end": "2773749"
  },
  {
    "text": "use that to access other AWS resources so the fact of the matter is sam'l just wasn't built for an age where mobile",
    "start": "2773749",
    "end": "2781069"
  },
  {
    "text": "applications were ubiquitous it is possible in the next few weeks one of",
    "start": "2781069",
    "end": "2786079"
  },
  {
    "text": "our specialist essays Richard throw code he's publishing a blog post on how to set that up but it actually is fairly",
    "start": "2786079",
    "end": "2793400"
  },
  {
    "text": "convoluted and a series of workarounds so wherever possible if you are using a",
    "start": "2793400",
    "end": "2799460"
  },
  {
    "text": "newer version of a DFS such as a DFS 2016 that supports open ID Connect use",
    "start": "2799460",
    "end": "2805519"
  },
  {
    "text": "that instead so use the standard authentication tokens whenever possible",
    "start": "2805519",
    "end": "2812150"
  },
  {
    "text": "and one one last demo here can we switch back so it doesn't have to be this",
    "start": "2812150",
    "end": "2822319"
  },
  {
    "text": "choice where you choose either a sam'l provider or Cognito user polls or an open ID Connect provider with federated",
    "start": "2822319",
    "end": "2831170"
  },
  {
    "text": "identities when we configure our federated identity we have the option of",
    "start": "2831170",
    "end": "2839200"
  },
  {
    "text": "associating it with multiple identity providers so just as an example here",
    "start": "2839200",
    "end": "2846049"
  },
  {
    "text": "in our case we configured it with those Cognito apps right our mobile",
    "start": "2846049",
    "end": "2852500"
  },
  {
    "text": "application as well as that back-end provisioning application but if we wanted to we can also associate other",
    "start": "2852500",
    "end": "2858260"
  },
  {
    "text": "identity providers such as Amazon login Facebook Google Twitter open ID",
    "start": "2858260",
    "end": "2864170"
  },
  {
    "text": "samo or if you have your own custom identity provider you can do that as well and so the key here is you have a",
    "start": "2864170",
    "end": "2872059"
  },
  {
    "text": "kognito federated identity supporting multiple identity providers so for",
    "start": "2872059",
    "end": "2877760"
  },
  {
    "text": "example if I were to login to an application using my kognito user pulls login and then later login with my",
    "start": "2877760",
    "end": "2885529"
  },
  {
    "text": "facebook login those can both be associated with that same unique user ID okay so that's how you tie it all",
    "start": "2885529",
    "end": "2892430"
  },
  {
    "text": "together and then one last demo I want to do is we built this application so",
    "start": "2892430",
    "end": "2899599"
  },
  {
    "text": "that it would be easier for you to look at the code understand the flows a lot",
    "start": "2899599",
    "end": "2905119"
  },
  {
    "text": "of these details are fairly specific in terms of what tokens to pass and what orders to call things in so I just",
    "start": "2905119",
    "end": "2912020"
  },
  {
    "text": "wanted to show what it takes to actually get this demo up and running for yourself so once you so we have the",
    "start": "2912020",
    "end": "2921049"
  },
  {
    "text": "github repo and we'll show the URL at the end and this repo",
    "start": "2921049",
    "end": "2926630"
  },
  {
    "text": "it has our architecture diagram and we have all the steps to actually set up the prerequisites on your system such as",
    "start": "2926630",
    "end": "2933650"
  },
  {
    "text": "installing gulp and and Bower and so on once you have that installed",
    "start": "2933650",
    "end": "2940000"
  },
  {
    "text": "then setting it up Siddhi once you have",
    "start": "2944849",
    "end": "2951099"
  },
  {
    "text": "it installed then setting up is very easy you can just do a goat bootstrap in",
    "start": "2951099",
    "end": "2956410"
  },
  {
    "text": "this case I've already strapped it but if you do a goat API for low sorry seedy API if you do a go p-- deploy we've",
    "start": "2956410",
    "end": "2967569"
  },
  {
    "text": "automated this entire process for you so we'll set up the s3 bucket we'll set up the API gateway will configure the",
    "start": "2967569",
    "end": "2974230"
  },
  {
    "text": "kognito user pools configure the Cognito federated identity set up the lambda functions associated with API gateway",
    "start": "2974230",
    "end": "2981160"
  },
  {
    "text": "can figure those authorizers so all of this is fully automated for you you can",
    "start": "2981160",
    "end": "2986319"
  },
  {
    "text": "see it's you know right now uploading the lambda functions it's creating it and then once that's done your",
    "start": "2986319",
    "end": "2993309"
  },
  {
    "text": "environment is set up then now to test it you can either generate an apk that",
    "start": "2993309",
    "end": "2999550"
  },
  {
    "text": "you can you know download on your android device or you can also create an",
    "start": "2999550",
    "end": "3004589"
  },
  {
    "text": "iOS app but you can also test it with a web browser just doing ionic serve apfel",
    "start": "3004589",
    "end": "3011369"
  },
  {
    "text": "oops yeah that's in the app and if you do ionic serve this will actually bring",
    "start": "3011369",
    "end": "3018569"
  },
  {
    "text": "up a browser window that looks just like the mobile application window because this is a hybrid mobile app where you",
    "start": "3018569",
    "end": "3027990"
  },
  {
    "text": "can actually test all the functionality that we've shown you look at the browser logs so this is here's the mobile app it",
    "start": "3027990",
    "end": "3038609"
  },
  {
    "text": "runs identically so I can sign in I can upload the image in this case it's going",
    "start": "3038609",
    "end": "3045599"
  },
  {
    "text": "to use the browser image upload functionality instead okay and so you",
    "start": "3045599",
    "end": "3053730"
  },
  {
    "text": "can test this all in it and in terms of viewing the debug logs just open up your",
    "start": "3053730",
    "end": "3060390"
  },
  {
    "text": "JavaScript console so we made this to make it easy for you to understand the",
    "start": "3060390",
    "end": "3066450"
  },
  {
    "text": "flows in more detail check out the code try it out and hopefully it'll help jump-start your project so can we switch",
    "start": "3066450",
    "end": "3074220"
  },
  {
    "text": "back to the slides you want to show them how to undo ploy her oh sorry",
    "start": "3074220",
    "end": "3079829"
  },
  {
    "text": "one last thing can we switch back to the demo and of course now you have all these different AWS resources once",
    "start": "3079829",
    "end": "3086039"
  },
  {
    "text": "you've done the demo and you understand some of the flows we've also created a",
    "start": "3086039",
    "end": "3091309"
  },
  {
    "text": "uninstall script for you so that's simply go under ploy and that will",
    "start": "3091309",
    "end": "3100890"
  },
  {
    "text": "delete the lambda functions do everything in Reverse right get rid of the API gateway remove the custom authorizers delete the s3 buckets and so",
    "start": "3100890",
    "end": "3107400"
  },
  {
    "text": "your account as it plane and so you can try this as many times as you want and really it's to make it easy for you to",
    "start": "3107400",
    "end": "3113220"
  },
  {
    "text": "use it for your for your teams ok so back to the last final slides here can",
    "start": "3113220",
    "end": "3122849"
  },
  {
    "text": "we switch back to presenter okay so just to wrap up we talked about how do you",
    "start": "3122849",
    "end": "3128849"
  },
  {
    "text": "build a service mobile application that supports Identity Management we talked",
    "start": "3128849",
    "end": "3135119"
  },
  {
    "text": "about using Amazon kognito user pools as the managed identity provider we've talked about creating those tokens using",
    "start": "3135119",
    "end": "3143130"
  },
  {
    "text": "Amazon kognito federated identities so that you can have alw dentures and then we talked about some of the gotchas and",
    "start": "3143130",
    "end": "3150029"
  },
  {
    "text": "workarounds for integrating with an enterprise identity provider using sam'l",
    "start": "3150029",
    "end": "3155519"
  },
  {
    "text": "and with that you can then access your AWS resources you can provide very",
    "start": "3155519",
    "end": "3160739"
  },
  {
    "text": "fine-grained access control for your ap eyes and everything we talked about here",
    "start": "3160739",
    "end": "3165930"
  },
  {
    "text": "doesn't just apply to mobile apps all these flows and patterns also apply equally well if you're building a",
    "start": "3165930",
    "end": "3171809"
  },
  {
    "text": "service web application and so please do try this at home we just open-source the repo would love",
    "start": "3171809",
    "end": "3178589"
  },
  {
    "text": "any contributions and any feedback and hopefully this is useful for your team and so with that we do want to thank you",
    "start": "3178589",
    "end": "3186479"
  },
  {
    "text": "for joining us today for this hour and okay I'll just leave this here and thank",
    "start": "3186479",
    "end": "3194009"
  },
  {
    "text": "you thank you very much",
    "start": "3194009",
    "end": "3196670"
  },
  {
    "text": "okay I think we're done yeah thank you",
    "start": "3201840",
    "end": "3207150"
  }
]