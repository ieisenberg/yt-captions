[
  {
    "text": "[Music] welcome thanks for joining us for those",
    "start": "1850",
    "end": "9360"
  },
  {
    "text": "who joined us last week in this twitch deep dive I'm sorry we couldn't make it but there's a lot of fun content and a",
    "start": "9360",
    "end": "15030"
  },
  {
    "text": "lot of interesting things to talk about with you today and we'll get right to it so just talk this deep dive is about",
    "start": "15030",
    "end": "21180"
  },
  {
    "text": "sominus architectures so when this approaches how to best test your server this applications what kind of",
    "start": "21180",
    "end": "27000"
  },
  {
    "text": "development tooling or technologies you may be thinking about as you approach service and so we were and and talk",
    "start": "27000",
    "end": "33690"
  },
  {
    "text": "about service applications my name is Salman I lead the aw solace",
    "start": "33690",
    "end": "38820"
  },
  {
    "text": "application repository service or wok we talked a little bit about that at the end as well and how it ties together and civiles",
    "start": "38820",
    "end": "45719"
  },
  {
    "text": "development and with me is James who's the lead developer on on the civilus allocation repository hi my name is",
    "start": "45719",
    "end": "52289"
  },
  {
    "text": "James hood I'm a senior software developer for Amazon it's actually been with a company about eight and a half",
    "start": "52289",
    "end": "57870"
  },
  {
    "text": "years now I've spent some time in Amazon Web Services spent some time on the retail side got really excited about",
    "start": "57870",
    "end": "64619"
  },
  {
    "text": "server lists as I know many people are and ended up coming back to AWS to be",
    "start": "64619",
    "end": "69960"
  },
  {
    "text": "tech lead for the service application repository so really happy to be here thanks for doing that okay we also have",
    "start": "69960",
    "end": "75900"
  },
  {
    "text": "this unboxing that we will do at the end and say you don't know what it is so surprised to you James it's a symbolic",
    "start": "75900",
    "end": "83040"
  },
  {
    "text": "token of our appreciation and Oh to all the builders out there okay stick around till the end of the show and we'll do",
    "start": "83040",
    "end": "88829"
  },
  {
    "text": "this quick unboxing for you alright this out sorry about that we were pause for a",
    "start": "88829",
    "end": "94409"
  },
  {
    "text": "second we just made sure all the audience could join this touch deep dive",
    "start": "94409",
    "end": "100170"
  },
  {
    "text": "and I really appreciate you guys joining us so we'll do a quick recap James and I want to you know waste anyone's time who",
    "start": "100170",
    "end": "106380"
  },
  {
    "text": "has already been with us for the first eight minutes the goals is to be steep dive is to talk about civilus",
    "start": "106380",
    "end": "111570"
  },
  {
    "text": "architectures and how we think about or perhaps best practice about service approaches my name is Salman I lead the civilus",
    "start": "111570",
    "end": "118140"
  },
  {
    "text": "application repository service and with me is James who leads the engineering for the service applications repository",
    "start": "118140",
    "end": "123509"
  },
  {
    "text": "how about you quick introduce yourself yeah it's again yeah my name is James hood I'm a senior software developer for",
    "start": "123509",
    "end": "129239"
  },
  {
    "text": "Amazon I've worked in both AWS and retail sides I'm the tech for the service application repository",
    "start": "129239",
    "end": "135580"
  },
  {
    "text": "and a big service app's advocate very very excited about them cool just as we",
    "start": "135580",
    "end": "142240"
  },
  {
    "text": "were talking and catching everyone else who just recently joined we were talking about service patterns which people are",
    "start": "142240",
    "end": "148330"
  },
  {
    "text": "building themselves that sort of lead to a larger architecture that perhaps can be simplified but you know the",
    "start": "148330",
    "end": "154780"
  },
  {
    "text": "application construct that we have now with with Sam and go walk people through that a bit and you were gonna dive deep",
    "start": "154780",
    "end": "161380"
  },
  {
    "text": "into into that but yeah before we do that could we'd want to share that see what the Twitter leaderboard is yes I'll",
    "start": "161380",
    "end": "167740"
  },
  {
    "text": "talk about the game real quick with as well so right now you and I are dominating with loads retweets okay so",
    "start": "167740",
    "end": "173950"
  },
  {
    "text": "so for those of you please don't let us win come on so the if you want to play this game you",
    "start": "173950",
    "end": "180310"
  },
  {
    "text": "just need a Twitter account there's a link in the twitch chat if you click on that link it will take you to a screen",
    "start": "180310",
    "end": "187090"
  },
  {
    "text": "where you can tweet a very specific message get as many people as you can to retweet that message and meaning get the",
    "start": "187090",
    "end": "194140"
  },
  {
    "text": "retweet counts up on your tweet and then you'll appear on this leaderboard as well it's updating in real time and",
    "start": "194140",
    "end": "200980"
  },
  {
    "text": "we're checking in on it as we go and the reason we're doing this game is not just because I think if the game is fun we could because this is backed by a",
    "start": "200980",
    "end": "206860"
  },
  {
    "text": "civilization that James put together pretty topically quickly and we walk through how we did that something that",
    "start": "206860",
    "end": "212560"
  },
  {
    "text": "you guys can learn from it's almost as if like Twitter is an event source now for for lambda exactly all right so well",
    "start": "212560",
    "end": "219340"
  },
  {
    "text": "we'll get back to that and back to our regular programming on on some of those patterns that that you are seeing as can",
    "start": "219340",
    "end": "226660"
  },
  {
    "text": "be composed as applications won't you walk us through it yeah so the quick recap is the server list pushes you toward more of a reactive event-driven",
    "start": "226660",
    "end": "233620"
  },
  {
    "text": "architecture I was talking about my past experiences where I'd architected systems my initial surveillance",
    "start": "233620",
    "end": "240370"
  },
  {
    "text": "architectures were kind of big Rube Goldberg kind of unwieldy systems and",
    "start": "240370",
    "end": "245680"
  },
  {
    "text": "what I found is that serverless applications allow you to take pieces of a larger system and compartmentalize",
    "start": "245680",
    "end": "252790"
  },
  {
    "text": "them make them easier to test and and deploy into your application as pieces so I wanted to talk about one example",
    "start": "252790",
    "end": "259750"
  },
  {
    "text": "app that's available in the service application repository it's on screen",
    "start": "259750",
    "end": "265210"
  },
  {
    "text": "it's called the a double serverless SQS eventsource so why is it called that right now lambda has a",
    "start": "265210",
    "end": "272500"
  },
  {
    "text": "number of native event sources so s3 you put an object into s3 it can trigger",
    "start": "272500",
    "end": "278560"
  },
  {
    "text": "your lambda function to do something you write to dynamodb and an event can come off of the DynamoDB stream and trigger",
    "start": "278560",
    "end": "285370"
  },
  {
    "text": "your lambda function to do something one service that is not integrated as a",
    "start": "285370",
    "end": "290860"
  },
  {
    "text": "native event source for lambda is sqs simple queue service and so what i've",
    "start": "290860",
    "end": "296890"
  },
  {
    "text": "done is i've built an app that is that turns SQS into an event source",
    "start": "296890",
    "end": "301930"
  },
  {
    "text": "interesting it's available on the repository you can deploy it to your account and now you don't have to worry",
    "start": "301930",
    "end": "307720"
  },
  {
    "text": "about managing the interactions between an sqs queue you can just write a lambda function that can process messages okay",
    "start": "307720",
    "end": "314710"
  },
  {
    "text": "so let's walk at least walk me through like why why RS qsq is important why is",
    "start": "314710",
    "end": "320200"
  },
  {
    "text": "the interaction with them important and sort of the modern day approaches to some of this architectures may be given",
    "start": "320200",
    "end": "325930"
  },
  {
    "text": "a real-world example for the audience and for myself yeah absolutely so in in a service they are distributed or",
    "start": "325930",
    "end": "331570"
  },
  {
    "text": "service-oriented architecture you end up with difference many different services and to fulfill one request you may need",
    "start": "331570",
    "end": "338020"
  },
  {
    "text": "to interact with multiple and the initial approach is can is kind of a fully synchronous approach and what I",
    "start": "338020",
    "end": "344740"
  },
  {
    "text": "mean by that is when a request comes in to create an order carry example then",
    "start": "344740",
    "end": "350790"
  },
  {
    "text": "behind the scenes you may need to call the order service and the customer service and some shopping cart session",
    "start": "350790",
    "end": "357760"
  },
  {
    "text": "service and and make all these calls if you call oh these things synchronously and block on them before responding to",
    "start": "357760",
    "end": "365620"
  },
  {
    "text": "that request it has a number of problems right there's there are a number of problems with that approach you can get",
    "start": "365620",
    "end": "371260"
  },
  {
    "text": "higher latency and then if any one component in that system is having issues then it affects the customer",
    "start": "371260",
    "end": "377800"
  },
  {
    "text": "experience is always just like I faced the order I have to wait for it to ship to me for me to get a response back from",
    "start": "377800",
    "end": "383680"
  },
  {
    "text": "you we don't want that experience with all the customers to know that we've got your order and we're now gonna make the changes in our system to make sure you",
    "start": "383680",
    "end": "389620"
  },
  {
    "text": "get the order in time that you can track so chewing is a mechanism to do that yeah so in a distributed system queues",
    "start": "389620",
    "end": "395470"
  },
  {
    "text": "act as an buffer an asynchronous buffer between all these services which allows them to be",
    "start": "395470",
    "end": "400960"
  },
  {
    "text": "or fault-tolerant and does transform the the processing into more of an asynchronous model from that synchronous",
    "start": "400960",
    "end": "406870"
  },
  {
    "text": "and so what are you going to demo today for us we talked about the AWS",
    "start": "406870",
    "end": "412289"
  },
  {
    "text": "application that enables you to sort of think about emulating estes is an event source yeah are you gonna walk through",
    "start": "412289",
    "end": "417550"
  },
  {
    "text": "the architecture so i'll show you really quick the app is actually quite simple so it's in a little bit yeah so this",
    "start": "417550",
    "end": "425470"
  },
  {
    "text": "picture depicts the app within the dotted line is the app we have a cloud",
    "start": "425470",
    "end": "430750"
  },
  {
    "text": "watch events rule you can think of that kind of like a distributed their cloud-based cron right you can set up",
    "start": "430750",
    "end": "437199"
  },
  {
    "text": "something to happen at a regular interval or at some cron base time daughter schedule so this can trigger",
    "start": "437199",
    "end": "445509"
  },
  {
    "text": "your lambda at a particular rate so this app contains a lambda that gets triggered every minute and then that",
    "start": "445509",
    "end": "452080"
  },
  {
    "text": "lambda so apps allow you to pass in parameters to the app so I've",
    "start": "452080",
    "end": "457270"
  },
  {
    "text": "parameterised the sq sq and your lambda that's the message processor right for",
    "start": "457270",
    "end": "463240"
  },
  {
    "text": "this so this app pulls on a regular schedule pulls your sq sq4 messages and",
    "start": "463240",
    "end": "469539"
  },
  {
    "text": "any messages it finds it will invoke your function that you gave and then",
    "start": "469539",
    "end": "475360"
  },
  {
    "text": "your function depending on the result you either succeeded in which case this will delete the message or a kit from",
    "start": "475360",
    "end": "482020"
  },
  {
    "text": "the queue or you failed or had or need to retry and it can interact with the",
    "start": "482020",
    "end": "488169"
  },
  {
    "text": "queue to make that happen as well so now your lambda function no longer has to understand queues or they the protocol",
    "start": "488169",
    "end": "495400"
  },
  {
    "text": "interactions for sqs just your lambda function just processes the messages turn success or failure I think that's",
    "start": "495400",
    "end": "501820"
  },
  {
    "text": "cool so in the in the in the Box you see just the the processor of the SQ Askew",
    "start": "501820",
    "end": "506949"
  },
  {
    "text": "board getting stuff from it and putting back into it and something that handles a business logic right so with that now",
    "start": "506949",
    "end": "513339"
  },
  {
    "text": "I have to write less code exactly applications there exactly okay so let's look and another nice thing about it too",
    "start": "513339",
    "end": "519839"
  },
  {
    "text": "so as you'll see when we dive into the code I chose to raid these apps in Java",
    "start": "519839",
    "end": "525250"
  },
  {
    "text": "for example however the the nice thing about lambda is an extension point is",
    "start": "525250",
    "end": "530560"
  },
  {
    "text": "that your lambda even if you're using this app your lambda can be in whatever language AWS lambda supports",
    "start": "530560",
    "end": "537130"
  },
  {
    "text": "yeah so it's it's very cool because with these apps we can have multiple languages but they interact together",
    "start": "537130",
    "end": "543340"
  },
  {
    "text": "seamlessly through the contract of the message that they're established with each other exactly you know what I want",
    "start": "543340",
    "end": "548980"
  },
  {
    "text": "to see how so now I think I understand what this app means why don't you perhaps take me and the audience through",
    "start": "548980",
    "end": "555070"
  },
  {
    "text": "like what does it mean to like use this app what is inside this app perhaps look at the code mmm but some testing and",
    "start": "555070",
    "end": "562260"
  },
  {
    "text": "walk us through that I think yeah super curious now so to use this app you really just have to deploy and configure",
    "start": "562260",
    "end": "568360"
  },
  {
    "text": "it so it's quite nice in the repository you don't have to worry about where the",
    "start": "568360",
    "end": "573370"
  },
  {
    "text": "codes stored or anything like that you have a link to the github repository you can take a look you can take a look",
    "start": "573370",
    "end": "580270"
  },
  {
    "text": "through the code if you want and then when you decide you want to deploy this you just click deploy it drops you",
    "start": "580270",
    "end": "586000"
  },
  {
    "text": "straight into the lambda console hmm you can see the exact the exact github tag",
    "start": "586000",
    "end": "592270"
  },
  {
    "text": "that this codes associated with you can see what specific permissions are",
    "start": "592270",
    "end": "597310"
  },
  {
    "text": "required for this app you can even look at what's called the Sam template the which lays out how which resources are",
    "start": "597310",
    "end": "604900"
  },
  {
    "text": "in this app you can look at license information and then you just need to configure whatever parameters are",
    "start": "604900",
    "end": "610900"
  },
  {
    "text": "involved and like I said you have this message processor function name so you just give and the nice thing is the",
    "start": "610900",
    "end": "616960"
  },
  {
    "text": "readme is right here so you can walk through it tells you installation steps it tells you what needs to go in which",
    "start": "616960",
    "end": "623020"
  },
  {
    "text": "parameters so really you're just putting this is the function I want you to call",
    "start": "623020",
    "end": "628090"
  },
  {
    "text": "this is the cue that you're reading and these are arms so let me just step back",
    "start": "628090",
    "end": "633430"
  },
  {
    "text": "a second so we have permissions from and we have the sound template let's walk and perhaps the audience we may not be",
    "start": "633430",
    "end": "638950"
  },
  {
    "text": "familiar with Sam and what is it and how can they use it and then talk about permissions real quick yeah so Sam is",
    "start": "638950",
    "end": "645490"
  },
  {
    "text": "the server list application model it's a it's a spec for describing a server list",
    "start": "645490",
    "end": "651670"
  },
  {
    "text": "application in terms of not the code but in terms of what resources are required and how its laid out okay so looks like",
    "start": "651670",
    "end": "658900"
  },
  {
    "text": "the example for this one yeah yeah let's take a look for example at I know there's a small I'll make it bigger so",
    "start": "658900",
    "end": "666520"
  },
  {
    "text": "here is the for the SQS eventsource app there's a file in here called app template and",
    "start": "666520",
    "end": "675640"
  },
  {
    "text": "this is Sam so Sam is a CloudFormation transform and we're here where I define",
    "start": "675640",
    "end": "681310"
  },
  {
    "text": "the parameters yeah so the s Q is Q and the and the lambda function are someone",
    "start": "681310",
    "end": "687610"
  },
  {
    "text": "has to pass into your application correct function name and then today I'm sorry yep and then and then you can see",
    "start": "687610",
    "end": "693220"
  },
  {
    "text": "this resource I'm defining a server list function this is my polar function from another picture what kind of permissions",
    "start": "693220",
    "end": "700270"
  },
  {
    "text": "it has and then in in my local code I have where to get the code the nice",
    "start": "700270",
    "end": "706390"
  },
  {
    "text": "thing with the repository is you don't even have to worry about that at deploy time right so when someone publishes an",
    "start": "706390",
    "end": "712570"
  },
  {
    "text": "application the code that they publish with that application is copied over don't have to manage that process and",
    "start": "712570",
    "end": "718780"
  },
  {
    "text": "I'm like someone consumes an application we make that code available to the deployment process exactly okay and then",
    "start": "718780",
    "end": "725100"
  },
  {
    "text": "events is what triggers this lambda function so Sam provides a nice convenience layer that allows you to",
    "start": "725100",
    "end": "731590"
  },
  {
    "text": "this one is is on a timer at a particular schedule in this case it's a",
    "start": "731590",
    "end": "736660"
  },
  {
    "text": "rate of every one minute got it okay so this is your Sam template you can also",
    "start": "736660",
    "end": "742720"
  },
  {
    "text": "review it if I go back to this screen we",
    "start": "742720",
    "end": "748270"
  },
  {
    "text": "do you can review the template before you're deploying it into your account so you can understand perhaps how the",
    "start": "748270",
    "end": "754450"
  },
  {
    "text": "application is laid out what resources it would create and etc exactly you fill",
    "start": "754450",
    "end": "759880"
  },
  {
    "text": "in your parameters you click deploy and then it deploys I'll just so this won't",
    "start": "759880",
    "end": "767860"
  },
  {
    "text": "actually work because I'm just putting whatever in here sure but do you have a",
    "start": "767860",
    "end": "774400"
  },
  {
    "text": "copy of it that has already been deployed into your account with the sqs one I don't have one ready for today but",
    "start": "774400",
    "end": "779890"
  },
  {
    "text": "I do with the next yes that's what you're gonna tell them yeah but well at",
    "start": "779890",
    "end": "785620"
  },
  {
    "text": "least show getting kicked off or this kicking off so now we've deployed the application the resources being created",
    "start": "785620",
    "end": "791320"
  },
  {
    "text": "which interacted yeah and if you want more details you can look it's using confirmation under the covers to deploy",
    "start": "791320",
    "end": "797110"
  },
  {
    "text": "it so you can always click on this and see more details about your deploying okay so we go from I want to be able to",
    "start": "797110",
    "end": "803360"
  },
  {
    "text": "read and write to sqs to be able to find an application that does it to simply deploying it in my AWS account and",
    "start": "803360",
    "end": "809240"
  },
  {
    "text": "having that lambda or set of lambda functions whatever that is because Sam can define more than one available to",
    "start": "809240",
    "end": "815810"
  },
  {
    "text": "mean to hook up to my sqs queue and the processor of it yeah and the reason one reason that I am excited about this so",
    "start": "815810",
    "end": "822500"
  },
  {
    "text": "AWS has a lot of people know that AWS has a very fast pace of innovation and",
    "start": "822500",
    "end": "828589"
  },
  {
    "text": "the number of features and services we deploy is very rapid but what I'm so excited about with apps is that you",
    "start": "828589",
    "end": "835670"
  },
  {
    "text": "don't even have to wait for that right so sqs isn't an event source so we can",
    "start": "835670",
    "end": "840800"
  },
  {
    "text": "build an app that does that and you can do that with other things now this next app I wanted to show which actually",
    "start": "840800",
    "end": "847970"
  },
  {
    "text": "let's check in on our leaderboard what so I promise I did not put if my",
    "start": "847970",
    "end": "856430"
  },
  {
    "text": "user name then make it first play I see me set the leaderboard let me go to",
    "start": "856430",
    "end": "861920"
  },
  {
    "text": "retweeting oh yeah what's going on here I know that guy okay cool yeah and if",
    "start": "861920",
    "end": "867290"
  },
  {
    "text": "you and so right now we've got we have more people participating thank you so much for participating very cool angel",
    "start": "867290",
    "end": "874339"
  },
  {
    "text": "Romero Paul Johnston I'm still at the top somebody really needs to boot me from the top though yeah you've got your",
    "start": "874339",
    "end": "880640"
  },
  {
    "text": "whole family right now so this application is a another lambda civilus",
    "start": "880640",
    "end": "886220"
  },
  {
    "text": "application but lambda another so this some of the services that we have walk",
    "start": "886220",
    "end": "891350"
  },
  {
    "text": "us through this this is pretty interesting so now Twitter is like an event source yeah so what I wanted to show was yeah this is sqs is an event",
    "start": "891350",
    "end": "898699"
  },
  {
    "text": "source AWS has native event sources but what about an event source that that we",
    "start": "898699",
    "end": "903949"
  },
  {
    "text": "probably wouldn't launch as a first party feature so this is the AWS server",
    "start": "903949",
    "end": "909949"
  },
  {
    "text": "list Twitter event source and this is very similar to the sqs event source in",
    "start": "909949",
    "end": "915860"
  },
  {
    "text": "that we have a polling schedule and what it does is it converts a twitter search",
    "start": "915860",
    "end": "921910"
  },
  {
    "text": "into an event source for your lambda so it's like a Twitter search api so twitter has a standard search api that",
    "start": "921910",
    "end": "929240"
  },
  {
    "text": "they make publicly available got it and anybody can sign up to use it and what",
    "start": "929240",
    "end": "934250"
  },
  {
    "text": "this app is it periodically runs whatever search term again you have parameters you can",
    "start": "934250",
    "end": "940370"
  },
  {
    "text": "put into the app so one of the parameters is what do you want to search I say right and so it will periodically",
    "start": "940370",
    "end": "946160"
  },
  {
    "text": "search Twitter and then the tweet the JSON for the tweets is what's returned",
    "start": "946160",
    "end": "952010"
  },
  {
    "text": "and that list of returned tweets gets passed to whatever lambda function you",
    "start": "952010",
    "end": "957410"
  },
  {
    "text": "give the app so now Twitter is an event source so right I think let's just get to code um let's actually look at how",
    "start": "957410",
    "end": "963410"
  },
  {
    "text": "this whole thing works you want to see the deployment of an application so I'm I think that part is that part we've",
    "start": "963410",
    "end": "969280"
  },
  {
    "text": "shown I want to understand like how does actor code work for this and what sure",
    "start": "969280",
    "end": "974570"
  },
  {
    "text": "and again this app in Java you could build it in whatever language that is supported by AWS lambda and most",
    "start": "974570",
    "end": "981260"
  },
  {
    "text": "importantly to use this app it doesn't mean you're locked in to Java you can write your tweet processor in whatever",
    "start": "981260",
    "end": "986960"
  },
  {
    "text": "language you'd like okay right and so let's go find our Twitter event source",
    "start": "986960",
    "end": "995620"
  },
  {
    "text": "okay so first off I want to take a step back because sometimes working in a new",
    "start": "995980",
    "end": "1002140"
  },
  {
    "text": "domain like serverless you just want to even know how do I even lay out my my package right yeah so this is Java what",
    "start": "1002140",
    "end": "1009610"
  },
  {
    "text": "you'll see is it's a standard maven layout so I have a poem XML where I can",
    "start": "1009610",
    "end": "1014770"
  },
  {
    "text": "pull in all my maven dependencies that I need my libraries and then I have my",
    "start": "1014770",
    "end": "1020290"
  },
  {
    "text": "main Java code right here now what's a little interesting so some best practices are around using",
    "start": "1020290",
    "end": "1026199"
  },
  {
    "text": "lambda we try to minimize the number of big heavy frameworks that that we use",
    "start": "1026199",
    "end": "1031870"
  },
  {
    "text": "usually and just want to keep it minimal so it's very common so here's my lambda",
    "start": "1031870",
    "end": "1037360"
  },
  {
    "text": "request Handler and what you'll notice about it is that there's very little code in it so request Handler this is",
    "start": "1037360",
    "end": "1044709"
  },
  {
    "text": "provided by AWS there's a package that provides these models it's an interface yeah this is the scheduled event this is",
    "start": "1044709",
    "end": "1051820"
  },
  {
    "text": "basically a Java representation of what you'll receive from Clow watch events right so this is what triggers and what",
    "start": "1051820",
    "end": "1059740"
  },
  {
    "text": "you'll see here is I'm using dagger so dagger is is a library that allows you",
    "start": "1059740",
    "end": "1065380"
  },
  {
    "text": "to do dependency injection so so for initialization of your of your sort of the application what parameters",
    "start": "1065380",
    "end": "1072400"
  },
  {
    "text": "are need and how it sort of hook things up together exactly so it takes care of in it's it's a kind of a best practice",
    "start": "1072400",
    "end": "1079690"
  },
  {
    "text": "to separate out all that initialization logic from the actual business logic itself so don't put it in the handled",
    "start": "1079690",
    "end": "1085300"
  },
  {
    "text": "request method take it out because nominee goes to two stages ones initialization and one the others so what are the benefits of that exactly so",
    "start": "1085300",
    "end": "1092050"
  },
  {
    "text": "so lambda has when the very first time your lambdas invoked it goes through a",
    "start": "1092050",
    "end": "1097330"
  },
  {
    "text": "process that's called cold start so cold start your lambda is initialized so the code you have is downloaded and then",
    "start": "1097330",
    "end": "1103750"
  },
  {
    "text": "this initializer which in Java is your default constructor is is invoked so any",
    "start": "1103750",
    "end": "1111270"
  },
  {
    "text": "common setup that you want to do is done there got it then there's a handle request method and again in so in Python",
    "start": "1111270",
    "end": "1119110"
  },
  {
    "text": "you can define a request handler method and that's your request Handler and anything outside it that's statically",
    "start": "1119110",
    "end": "1125680"
  },
  {
    "text": "initialized is what's initialized so I see you don't it haven't put any code in the hammer request besides this one line",
    "start": "1125680",
    "end": "1130930"
  },
  {
    "text": "right walk us through what's happening here yeah absolutely so again I'm using",
    "start": "1130930",
    "end": "1136000"
  },
  {
    "text": "dagger to do all the initialization for me and we can dive into that but let's just take a look at the polar the polar",
    "start": "1136000",
    "end": "1142630"
  },
  {
    "text": "is a class called twitter search polar and when you look it's receiving on",
    "start": "1142630",
    "end": "1148930"
  },
  {
    "text": "construction the query text that you're going to search the Twitter client and",
    "start": "1148930",
    "end": "1154840"
  },
  {
    "text": "various other things that are needed the pull method there's kind of two modes",
    "start": "1154840",
    "end": "1161080"
  },
  {
    "text": "that this can work in it can be stateful where it remembers what tweets it's seen before and or it can just like for",
    "start": "1161080",
    "end": "1168190"
  },
  {
    "text": "example for our leaderboard which we should check real quick all right thank you angel Ribeiro to knock me out of",
    "start": "1168190",
    "end": "1174850"
  },
  {
    "text": "leave and someone retweet my stuff too I want to be on the top of II don't know and just FYI we don't have this case now",
    "start": "1174850",
    "end": "1183460"
  },
  {
    "text": "but if there are ties in retweets it uses favorites as the tiebreaker so yeah",
    "start": "1183460",
    "end": "1188740"
  },
  {
    "text": "great look seeing this activity all right so let's walk through so you're not you're not going to go walk through",
    "start": "1188740",
    "end": "1194380"
  },
  {
    "text": "the stream portion of it it's just a one full swoop of call the API from Twitter and then do what yeah so this says",
    "start": "1194380",
    "end": "1201010"
  },
  {
    "text": "the tweets yeah right and then called the tweet processor for all the raw",
    "start": "1201010",
    "end": "1206590"
  },
  {
    "text": "Jason values that have come back for this tweet this is where you sort of set up the leaderboard no actually so that's",
    "start": "1206590",
    "end": "1213580"
  },
  {
    "text": "that's the interesting thing let me take you out because the leaderboard is not",
    "start": "1213580",
    "end": "1219130"
  },
  {
    "text": "part of the Twitter event source hello so that's just reading from Twitter to",
    "start": "1219130",
    "end": "1224710"
  },
  {
    "text": "get something that you have configured it to do right so it pulls you give it a search it pulls Twitter for that search",
    "start": "1224710",
    "end": "1231309"
  },
  {
    "text": "and then it invokes your lambda function to do whatever with those clicks interesting so what's powerful about",
    "start": "1231309",
    "end": "1237910"
  },
  {
    "text": "this is it's generic it's a generic component I want to be able to receive",
    "start": "1237910",
    "end": "1243130"
  },
  {
    "text": "tweets and do something with them that's all this app cares about interesting what you're talking about there's",
    "start": "1243130",
    "end": "1248950"
  },
  {
    "text": "another app that I built that relies on that app it's called the retweet leaderboard so this is the actual leader",
    "start": "1248950",
    "end": "1255490"
  },
  {
    "text": "board that we're populating so you can see in the architecture and again this",
    "start": "1255490",
    "end": "1260740"
  },
  {
    "text": "is published to the surrealists application repository so all these apps are available publicly available on the",
    "start": "1260740",
    "end": "1266890"
  },
  {
    "text": "server list application repository there are full instructions in this readme on how to install it and how to how to",
    "start": "1266890",
    "end": "1273220"
  },
  {
    "text": "essentially recreate this game if you want to so it's a fun way to get into server list experiment around with it",
    "start": "1273220",
    "end": "1279429"
  },
  {
    "text": "you can see the code along with it so let's talk about this architecture so you can see that it's relying on this",
    "start": "1279429",
    "end": "1287140"
  },
  {
    "text": "event source this Twitter event source and then this app so the tweet processor",
    "start": "1287140",
    "end": "1292570"
  },
  {
    "text": "is it receives these tweets and then it counts up the retweet counts all right",
    "start": "1292570",
    "end": "1298690"
  },
  {
    "text": "it maintains that count and it writes it to a dynamo DB and I'll show you in the console I'll show you what it looks like",
    "start": "1298690",
    "end": "1304809"
  },
  {
    "text": "okay and then this app has an API gateway endpoint this is the retweet leaderboard app not the Twitter as an",
    "start": "1304809",
    "end": "1311919"
  },
  {
    "text": "event source app right exactly okay so then we have an API where we can get the",
    "start": "1311919",
    "end": "1317620"
  },
  {
    "text": "current leaderboard value oh I see and it reads so this asynchronous process is",
    "start": "1317620",
    "end": "1322929"
  },
  {
    "text": "receiving tweets in the background it's updating this leaderboard and then this",
    "start": "1322929",
    "end": "1328380"
  },
  {
    "text": "this is where the UI that we have calls this endpoint and",
    "start": "1328380",
    "end": "1334640"
  },
  {
    "text": "and it fetches the current leaderboard oh and if you look at this UI it's actually just a local file I have",
    "start": "1334640",
    "end": "1341390"
  },
  {
    "text": "running on on my browser or just hitting an API gateway endpoint exactly they say asynchronously every couple seconds it's",
    "start": "1341390",
    "end": "1348140"
  },
  {
    "text": "hitting oh I'm at the top again oh holy get more favorites more",
    "start": "1348140",
    "end": "1353180"
  },
  {
    "text": "favorites that's fine that's fine awesome I love seeing the engagement I",
    "start": "1353180",
    "end": "1360230"
  },
  {
    "text": "think right now it's just displaying the top ten yeah yeah it's actually",
    "start": "1360230",
    "end": "1366170"
  },
  {
    "text": "adjustable I could change it so well maybe at the end let's do that so we've got these two applications one is the",
    "start": "1366170",
    "end": "1373640"
  },
  {
    "text": "event source one is the processor how do we monitor these applications like how do we go about like actually I think",
    "start": "1373640",
    "end": "1379490"
  },
  {
    "text": "maybe for the audience to cover back the Copart I hope you want to go really quickly and walk them to the event source for the Twitter and what is that",
    "start": "1379490",
    "end": "1386480"
  },
  {
    "text": "actual pull method look like just make sure that everyone's aware like yeah that's almost how much effort was it to",
    "start": "1386480",
    "end": "1392000"
  },
  {
    "text": "really say I want to get something from Twitter and and invoke a lambda function okay so that's this that's something",
    "start": "1392000",
    "end": "1397310"
  },
  {
    "text": "that I actually tweeted about this there's kind of mind blowing for me that so so I actually got this idea for the",
    "start": "1397310",
    "end": "1405200"
  },
  {
    "text": "leader board this whole leader board experience and the Twitter event source app I was able",
    "start": "1405200",
    "end": "1411560"
  },
  {
    "text": "to write that in probably one to two day time frame okay and then I got the idea",
    "start": "1411560",
    "end": "1416570"
  },
  {
    "text": "for the leader board and we were supposed to do this live stream last week right so it was supposed to be last",
    "start": "1416570",
    "end": "1422300"
  },
  {
    "text": "Thursday I got the idea on Wednesday morning and went oh this would be so fun and I wrote it that day I wrote that so",
    "start": "1422300",
    "end": "1429080"
  },
  {
    "text": "I mean it's it's pretty exciting what you can do is server this really when you don't have to worry about all the",
    "start": "1429080",
    "end": "1434900"
  },
  {
    "text": "extra infrastructure management you can just host it okay cool so let's walk through this just method real quick so",
    "start": "1434900",
    "end": "1443180"
  },
  {
    "text": "this is Twitter the Twitter event source so this is part of the stream mode enabled where it's really just saving a",
    "start": "1443180",
    "end": "1450350"
  },
  {
    "text": "timestamp so it'll either start from the oldest time possible or it saves a local check",
    "start": "1450350",
    "end": "1455930"
  },
  {
    "text": "point to Dinamo's so this is if you want to if you're if you're trying to analyze things in your tweets that are static",
    "start": "1455930",
    "end": "1463190"
  },
  {
    "text": "that are never gonna change things like the text itself right you can use this to save feature of",
    "start": "1463190",
    "end": "1468590"
  },
  {
    "text": "application yeah I'm disabled is defeat rahmanir yep yeah it's just through false parameter okay we'll walk through",
    "start": "1468590",
    "end": "1473870"
  },
  {
    "text": "the audio that as well this goes to the logic work quick yeah so what happens so let's just kind of ignore stream mode",
    "start": "1473870",
    "end": "1480380"
  },
  {
    "text": "right now so if we're not in stream mode then we're always going to look for tweets since epoch time so that's every",
    "start": "1480380",
    "end": "1486380"
  },
  {
    "text": "tweet and what we do is we find tweets since the cutoff time which in our case",
    "start": "1486380",
    "end": "1492710"
  },
  {
    "text": "is epoch so it'll just be all of them and what this method is doing is its",
    "start": "1492710",
    "end": "1499070"
  },
  {
    "text": "forming a query this is provided by the twitter for jay library and then i'm",
    "start": "1499070",
    "end": "1505700"
  },
  {
    "text": "setting my limit to a high limit so i want to fetch as many as 100 records per page and then this is a do-while loop",
    "start": "1505700",
    "end": "1512690"
  },
  {
    "text": "because it's a paginate 'add api you might have to page through many results so I have my logging here which I can",
    "start": "1512690",
    "end": "1519020"
  },
  {
    "text": "show you where this shows up in cloud watch logs and then this is the Twitter 4j library that I'm using and I do a",
    "start": "1519020",
    "end": "1526490"
  },
  {
    "text": "search for this query and remember that query is just populated from your search text if you want to see let me finish",
    "start": "1526490",
    "end": "1533149"
  },
  {
    "text": "going through this yeah and then I'll show where this stuff gets populated sure so we search Twitter we get our",
    "start": "1533149",
    "end": "1540200"
  },
  {
    "text": "results now this Twitter 4j library actually pulls those results it actually",
    "start": "1540200",
    "end": "1547100"
  },
  {
    "text": "returns them as Java objects but I just want the raw JSON so I'm first off",
    "start": "1547100",
    "end": "1553429"
  },
  {
    "text": "filtering out the tweets that aren't within my cutoff again mystery mode disabled I get them all and then for",
    "start": "1553429",
    "end": "1561529"
  },
  {
    "text": "each of these tweets I actually populate a list of the raw JSON for that tweet",
    "start": "1561529",
    "end": "1567620"
  },
  {
    "text": "and Twitter 4j has a way to fetch the raw jason that was returned so I'm just",
    "start": "1567620",
    "end": "1573980"
  },
  {
    "text": "populating this linked hash map with the tweets and their raw jason and that's",
    "start": "1573980",
    "end": "1580789"
  },
  {
    "text": "what gets returned out of here so called twitter api get the search results in raw JSON create a list of it and then",
    "start": "1580789",
    "end": "1587390"
  },
  {
    "text": "pass that back to the to the method to the method above okay so now you have this twist a Twitter I have the tweets",
    "start": "1587390",
    "end": "1593360"
  },
  {
    "text": "as raw JSON JSON if they're empty then I just fast return but if I have them then",
    "start": "1593360",
    "end": "1600770"
  },
  {
    "text": "I have this tweet processor object and this is really just a proxy so I'm passing my raw values into as a",
    "start": "1600770",
    "end": "1609440"
  },
  {
    "text": "list into the tweet processor okay and let's take a look at that logic and the",
    "start": "1609440",
    "end": "1615440"
  },
  {
    "text": "tweet processor is being configured a time of application configuration or yeah so yes it is",
    "start": "1615440",
    "end": "1621830"
  },
  {
    "text": "it's again it receives the tweet processor function name this is basically just a proxy for your lambda",
    "start": "1621830",
    "end": "1628669"
  },
  {
    "text": "function you got it right got it so you've got to get the list of results you have a proxy which is going to call",
    "start": "1628669",
    "end": "1634369"
  },
  {
    "text": "the actual lambda function eventually right right got it yeah and so it's a it's a consumer so what it does is it",
    "start": "1634369",
    "end": "1642499"
  },
  {
    "text": "this allows you to you may have gotten hundreds and hundreds of tweet results",
    "start": "1642499",
    "end": "1647919"
  },
  {
    "text": "back from the Twitter API but you only want your lambda function to be called",
    "start": "1647919",
    "end": "1653659"
  },
  {
    "text": "with a batch of some size I so that's what this is doing it's partitioning it based on the batch size that you you",
    "start": "1653659",
    "end": "1660619"
  },
  {
    "text": "configured and it's partitioning it into separate lists and for each list for",
    "start": "1660619",
    "end": "1666200"
  },
  {
    "text": "each batch of tweets it's saying process batch which just turns them into a JSON",
    "start": "1666200",
    "end": "1672019"
  },
  {
    "text": "array and this is the lambda invoke so it's invoking that you had configured",
    "start": "1672019",
    "end": "1677149"
  },
  {
    "text": "that will actually do whatever it needs to do with the raw JSON in the batch form that it gets yeah you don't care",
    "start": "1677149",
    "end": "1682609"
  },
  {
    "text": "what it or this app does not care what it does this app is actually and it's",
    "start": "1682609",
    "end": "1687710"
  },
  {
    "text": "using this invocation type called event which means that the AWS lambda service",
    "start": "1687710",
    "end": "1693320"
  },
  {
    "text": "when you invoke it it'll just return to you immediately saying we'll take care I got it it's been queued that lambda will",
    "start": "1693320",
    "end": "1700009"
  },
  {
    "text": "be invoked at some point asynchronously cool all right so this was a lot to cover to recapping is that as I think",
    "start": "1700009",
    "end": "1707210"
  },
  {
    "text": "I've understood it we have this Twitter event source and we have a bunch of parameters for this application as",
    "start": "1707210",
    "end": "1712669"
  },
  {
    "text": "defined in the Sam template which enable me to sort of think about like what search queries search on Twitter for I",
    "start": "1712669",
    "end": "1718879"
  },
  {
    "text": "find this runs at at every minute based on a cloud watch event trigger that that triggers this lambda function it",
    "start": "1718879",
    "end": "1725389"
  },
  {
    "text": "captures a list of Twitter tweets I guess tweets right that's probably right we describe it and then process it",
    "start": "1725389",
    "end": "1732230"
  },
  {
    "text": "through a proxy to a lambda function and then do processing on it and I can attach any lambda function and do whatever I need",
    "start": "1732230",
    "end": "1737900"
  },
  {
    "text": "to do with it any language any type of pool and so now we have this application available in the report apps of this",
    "start": "1737900",
    "end": "1744110"
  },
  {
    "text": "application repository available on github with the source code and then the other that actually creates a Twitter leaderboard",
    "start": "1744110",
    "end": "1749420"
  },
  {
    "text": "yeah which is just one application of it so there's two things that I'm hoping that our audience can take away from",
    "start": "1749420",
    "end": "1755450"
  },
  {
    "text": "this one is if you have an application that needs to do things with tweets maybe you can use this app or even",
    "start": "1755450",
    "end": "1762890"
  },
  {
    "text": "updated yeah hold requests absolutely it's all open source you can update the app yourself send pull requests in the",
    "start": "1762890",
    "end": "1770000"
  },
  {
    "text": "other thing is I wanted to show the potential right this is a whole category of apps that can be created Twitter is",
    "start": "1770000",
    "end": "1776660"
  },
  {
    "text": "one event source but how many others are there what other applications can you build that will that will help the",
    "start": "1776660",
    "end": "1783950"
  },
  {
    "text": "entire community and now we'll have this whole family this whole suite of event sources that we can tie into our apps I",
    "start": "1783950",
    "end": "1789710"
  },
  {
    "text": "think that's kind of I think that's that's cool I'm hopefully powerful so I",
    "start": "1789710",
    "end": "1795050"
  },
  {
    "text": "think we're coming close to our twitch deep dive at the at the end portion of it I do want to do the the unboxing of",
    "start": "1795050",
    "end": "1802370"
  },
  {
    "text": "the thing that we talked about early on but let's recap for for something for the audience so we we looked at several",
    "start": "1802370",
    "end": "1807679"
  },
  {
    "text": "approaches we talked through perhaps architectures and how distribute systems",
    "start": "1807679",
    "end": "1813140"
  },
  {
    "text": "work and how you one decompose them and only work on certain slices and we demonstrated at least with the sqs event",
    "start": "1813140",
    "end": "1819530"
  },
  {
    "text": "source application that how you could have pieces of the architecture put in place not necessarily by you writing the",
    "start": "1819530",
    "end": "1825410"
  },
  {
    "text": "code but by them being available in the database so less application repository and you're just writing your business",
    "start": "1825410",
    "end": "1831290"
  },
  {
    "text": "logic we also have the Twitter event source we just covered and then order leaderboard application both available",
    "start": "1831290",
    "end": "1838070"
  },
  {
    "text": "in the application repository and on github for source code yeah cool I think I leave it a star but hold on before we",
    "start": "1838070",
    "end": "1850460"
  },
  {
    "text": "leave the audience and go let's look at the leaderboard and see who won yes let's take a look contest of you know me",
    "start": "1850460",
    "end": "1856340"
  },
  {
    "text": "well let's let's just assume I I was just demoing so James had his entire",
    "start": "1856340",
    "end": "1861830"
  },
  {
    "text": "family and cousins and friends from all over the world retweeted I promise I have I have the code right here there's",
    "start": "1861830",
    "end": "1868190"
  },
  {
    "text": "no no I really Pro you guys so I'm good",
    "start": "1868190",
    "end": "1873240"
  },
  {
    "text": "yeah oh yeah angel Romero hated Romero at the top we'll just discount me yes up",
    "start": "1873240",
    "end": "1879050"
  },
  {
    "text": "tumblr if you discount you I'm number three and then you're number three well how about I just can't use okay cool so",
    "start": "1879050",
    "end": "1889650"
  },
  {
    "text": "we'll before we leave we had a small talk in a symbolic token of appreciation for an ode to builders James you don't",
    "start": "1889650",
    "end": "1897870"
  },
  {
    "text": "know what this is you're gonna unbox this now and actually we're not James you will but yeah to take to unbox this",
    "start": "1897870",
    "end": "1905190"
  },
  {
    "text": "and what do you have yeah right now right okay second all right all right all right I think this",
    "start": "1905190",
    "end": "1931920"
  },
  {
    "text": "is what the Box saying I think this is for this oh yeah this is what the audience I got one for years",
    "start": "1931920",
    "end": "1938490"
  },
  {
    "text": "yeah right there oh oh yes old - all build right we're service on building service and we hope that after seeing",
    "start": "1938490",
    "end": "1945030"
  },
  {
    "text": "this that you can you are a service builder as well yes I'm hope to see apps from you that it",
    "start": "1945030",
    "end": "1950550"
  },
  {
    "text": "can help the community build and go do more survey less fun stuff and catch us",
    "start": "1950550",
    "end": "1955620"
  },
  {
    "text": "on Twitter if you have any additional questions we both are on Twitter you our Twitter handles are actually on the retweet little board a leader board and",
    "start": "1955620",
    "end": "1961980"
  },
  {
    "text": "appreciate it thank you so much yeah thank you",
    "start": "1961980",
    "end": "1965600"
  }
]