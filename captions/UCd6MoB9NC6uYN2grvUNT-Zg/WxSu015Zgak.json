[
  {
    "start": "0",
    "end": "18000"
  },
  {
    "text": "um so let's start welcome everybody uh this is Thomas I'm Jonathan uh we're both from the opsworks team uh and we're",
    "start": "640",
    "end": "8320"
  },
  {
    "text": "here to to give you a little bit more of an in-depth introduction into some of the um uh pru systems of opsworks um and",
    "start": "8320",
    "end": "16358"
  },
  {
    "text": "then we want to give you some demos so what we want to cover today is um in",
    "start": "16359",
    "end": "21840"
  },
  {
    "start": "18000",
    "end": "72000"
  },
  {
    "text": "particular how we integrate chef and and and look at the chef 12 integration that we have today for Windows and uh that",
    "start": "21840",
    "end": "28920"
  },
  {
    "text": "will be available uh shortly for Linux 2 we want to look at the uh Windows integration um and then uh cover uh",
    "start": "28920",
    "end": "37160"
  },
  {
    "text": "together with some demos uh the ECS integration that we recently uh launched",
    "start": "37160",
    "end": "42399"
  },
  {
    "text": "uh plus the on- premise and ec2 import uh support before we begin um how many",
    "start": "42399",
    "end": "48239"
  },
  {
    "text": "people um are already using opsworks here in the room good good so I don't have to",
    "start": "48239",
    "end": "53640"
  },
  {
    "text": "explain the the intro part too much um all of those slides will be available online um so uh no need to like take any",
    "start": "53640",
    "end": "61320"
  },
  {
    "text": "photos and and write something down um yeah so let's dig into like a a very",
    "start": "61320",
    "end": "67280"
  },
  {
    "text": "quick introduction into how opsworks actually works and what the kind of Architecture is um and how we embed Chef",
    "start": "67280",
    "end": "74200"
  },
  {
    "start": "72000",
    "end": "124000"
  },
  {
    "text": "so in general and opsworks for those who already use this that should be pretty familiar we um",
    "start": "74200",
    "end": "80600"
  },
  {
    "text": "structure uh things into stacks and layers right so a stack is uh basically",
    "start": "80600",
    "end": "85920"
  },
  {
    "text": "a group of servers um that solve a certain problem for you let's say uh you Ser um all servers that serve",
    "start": "85920",
    "end": "92799"
  },
  {
    "text": "application a or or Project B and so on and within that group of servers we um",
    "start": "92799",
    "end": "98520"
  },
  {
    "text": "uh segregate or group machines into layers you can think of them of tiers or roles right like all your application",
    "start": "98520",
    "end": "104560"
  },
  {
    "text": "servers uh are layer all your database servers all your caching servers basically you're kind of defining a blueprint and say uh every server in",
    "start": "104560",
    "end": "112000"
  },
  {
    "text": "this layer should have those characteristics should have this software running uh should be configured",
    "start": "112000",
    "end": "117920"
  },
  {
    "text": "like this and then opsworks makes it happen right um in order to achieve this",
    "start": "117920",
    "end": "124560"
  },
  {
    "text": "uh Ops kind of has two important pieces one is the back end that takes care of",
    "start": "124560",
    "end": "130080"
  },
  {
    "text": "the integration with EDS right it launches instances for you it attaches volumes configures elbs um uh it does",
    "start": "130080",
    "end": "138160"
  },
  {
    "text": "the auto scaling Part auto healing and and all the integration with EDS um kind of the provisioning engine uh and then",
    "start": "138160",
    "end": "143879"
  },
  {
    "text": "the other part is the agent that runs on your instance that then uh executes kind",
    "start": "143879",
    "end": "148920"
  },
  {
    "text": "of your configuration commands does the configuration management the unhost provisioning for which uh we use",
    "start": "148920",
    "end": "155120"
  },
  {
    "text": "Chef right so if you um launch an instance on the one hand the back end takes care of actually telling ec2 to",
    "start": "155120",
    "end": "160840"
  },
  {
    "text": "launch this instance and uh launches the correct instance the correct availability Zone with the correct settings and then once the agent is",
    "start": "160840",
    "end": "167159"
  },
  {
    "text": "installed um it sends a Json command down that says uh you should be running those Chef recipes here is the cookbook",
    "start": "167159",
    "end": "173560"
  },
  {
    "text": "source for those um the uh agent which embed Chef is running them and then at",
    "start": "173560",
    "end": "179640"
  },
  {
    "text": "the end and it uploads kind of the log and the the status of that for um so that you can access that through our UI",
    "start": "179640",
    "end": "184799"
  },
  {
    "text": "and API and so on um in order to do all of this we uh embed Chef client which",
    "start": "184799",
    "end": "191280"
  },
  {
    "text": "runs in zero mode and uh we don't have a chef server so if you compare our kind",
    "start": "191280",
    "end": "196640"
  },
  {
    "text": "of architecture to the typical Chef server setup um it's slightly different",
    "start": "196640",
    "end": "202319"
  },
  {
    "text": "right so uh we use Chef client but we uh are running serverless right the opss back end is is um kind of functioning as",
    "start": "202319",
    "end": "209280"
  },
  {
    "text": "a uh as a highly available uh Chef server uh but it's but it's it's it's",
    "start": "209280",
    "end": "214400"
  },
  {
    "text": "not the real Chef server right and we're going to talk later on about some of the differences where if you're um using",
    "start": "214400",
    "end": "219840"
  },
  {
    "text": "Chef server you have the full Chef server API and then you have a client that regularly pulls from the server where we're in opsworks we have a push",
    "start": "219840",
    "end": "226680"
  },
  {
    "text": "model right so if uh if you look at that sense of at the chef support um today",
    "start": "226680",
    "end": "232799"
  },
  {
    "start": "228000",
    "end": "351000"
  },
  {
    "text": "we're running multiple versions of Chef you can select some of them um we have some built-in kind of convenience",
    "start": "232799",
    "end": "238560"
  },
  {
    "text": "cookbooks to get you started quickly like for rails and PHP and and nodejs and so on but uh the general idea is",
    "start": "238560",
    "end": "244640"
  },
  {
    "text": "that you extend on on them you build you bring your own you um customize those heavily um like like we are a tool for",
    "start": "244640",
    "end": "250159"
  },
  {
    "text": "people who want to really control uh basically every file on the machine who want to really say my Apache should have",
    "start": "250159",
    "end": "256040"
  },
  {
    "text": "those settings I want to have this module installed uh we have some some stample uh layers that get you started",
    "start": "256040",
    "end": "261560"
  },
  {
    "text": "but the idea is uh you own this piece of infrastructure um probably the the the",
    "start": "261560",
    "end": "268120"
  },
  {
    "text": "biggest difference is that we have a life Cycle System that that I will um dig into in a second uh instead of this",
    "start": "268120",
    "end": "274000"
  },
  {
    "text": "um Regular uh pool model that you maybe use from Chef server um and that allows you to do deployments pretty nicely uh",
    "start": "274000",
    "end": "280520"
  },
  {
    "text": "with opsworks uh and also like kind of immediately uh discover changes in your infrastructure uh and those life cycle",
    "start": "280520",
    "end": "287160"
  },
  {
    "text": "events they always come with the full what we call the stack State basically uh adjon that tells you this is um the",
    "start": "287160",
    "end": "294960"
  },
  {
    "text": "state of the Known World for for this particular system so it includes information about all the other servers",
    "start": "294960",
    "end": "300199"
  },
  {
    "text": "it includes information about ongoing deployments includes information about the elbs that are attached to the system or RDS instances and so on uh and that",
    "start": "300199",
    "end": "307600"
  },
  {
    "text": "allows you to to um when you get such an event to a query kind of the state and",
    "start": "307600",
    "end": "313120"
  },
  {
    "text": "figure out how should my servers be configured uh in order to respond to this state or this state",
    "start": "313120",
    "end": "318199"
  },
  {
    "text": "change so let's look at the those Life Cycle Systems uh or life cycle events um so we have five of them um and they they",
    "start": "318199",
    "end": "327080"
  },
  {
    "text": "really allow you to uh build kind of very fine grade um uh kind of system or",
    "start": "327080",
    "end": "334080"
  },
  {
    "text": "or scripts that respond to those changes right and and in in the essence if you look at opsworks uh apart from the ads",
    "start": "334080",
    "end": "340680"
  },
  {
    "text": "integration what it really is is kind of we make sure that we run the right script at the right time on the right machine depending on what happened to",
    "start": "340680",
    "end": "347120"
  },
  {
    "text": "your system right and those are kind of the F events you can you can attach to um so the first one will be",
    "start": "347120",
    "end": "353120"
  },
  {
    "start": "351000",
    "end": "402000"
  },
  {
    "text": "setup which um B basically means uh when you boot your instance uh this is the",
    "start": "353120",
    "end": "359160"
  },
  {
    "text": "event that Fires for that machine and you do the initial provisioning the initial setup like you install your the",
    "start": "359160",
    "end": "364600"
  },
  {
    "text": "software that you need and all its dependencies kind of the the initial run you can think of it as a little bit of as kind of user data on steroids right",
    "start": "364600",
    "end": "371520"
  },
  {
    "text": "like uh it allows you to configure my instance for the very first time make sure that all the software I need is",
    "start": "371520",
    "end": "376599"
  },
  {
    "text": "there um and the configuration is correct right like if you have a Java application server for example this is",
    "start": "376599",
    "end": "382199"
  },
  {
    "text": "what you install the jvm you would install Tomcat um uh and so on um it",
    "start": "382199",
    "end": "388800"
  },
  {
    "text": "also includes the de Loy event which allows it to do the initial deployment of your of your system right like the initial get the the the jaw fils and the",
    "start": "388800",
    "end": "396280"
  },
  {
    "text": "W fils on the machine and then uh restart tomk to make sure that the machine is able to serve",
    "start": "396280",
    "end": "402280"
  },
  {
    "start": "402000",
    "end": "491000"
  },
  {
    "text": "traffic the next event is the configure event and and that's I think the most",
    "start": "402280",
    "end": "407440"
  },
  {
    "text": "interesting one because it really allows it to to build those highly dynamically configurable systems um opsworks fires",
    "start": "407440",
    "end": "413199"
  },
  {
    "text": "this event Whenever there is uh an instance entering the online set",
    "start": "413199",
    "end": "418280"
  },
  {
    "text": "basically there is a new instance of able for this stack or there is uh one leaving this state right so this allows",
    "start": "418280",
    "end": "424240"
  },
  {
    "text": "you to to make sure that your system is always configured correctly the example would be you're booting a new application server apart from actually",
    "start": "424240",
    "end": "430879"
  },
  {
    "text": "installing this application server and and actually like installing tomit and Java and so on on this machine you want",
    "start": "430879",
    "end": "436120"
  },
  {
    "text": "this application server to be recognized by your Lo balancer so it serves traffic to it right and you want the database server maybe to add an ACL entry that",
    "start": "436120",
    "end": "443120"
  },
  {
    "text": "allows this new application server to connect to it um or another example is maybe you have um you're running like",
    "start": "443120",
    "end": "449520"
  },
  {
    "text": "like a mongodb replica pair or or Cassandra or a Kafka system something like where you have nodes uh that need",
    "start": "449520",
    "end": "455560"
  },
  {
    "text": "to replicate from each other and they need to know about each other right um so that's a perfect um time to use this",
    "start": "455560",
    "end": "460680"
  },
  {
    "text": "event and say okay there is apparently another new node in my system do I need to reconfigure myself or there is a node",
    "start": "460680",
    "end": "466159"
  },
  {
    "text": "now gone do I need to reconfigure myself right um uh so for example if you have a",
    "start": "466159",
    "end": "471360"
  },
  {
    "text": "database server that's coming up the application servers would be this way automatically recognizing it uh and starting to connect to it and if your",
    "start": "471360",
    "end": "478240"
  },
  {
    "text": "database server crashes for example you shut it down or uh for whatever reason it's no longer available the application",
    "start": "478240",
    "end": "484000"
  },
  {
    "text": "servers can uh Now find out oh there is no database server available so I show like a static eror page or something",
    "start": "484000",
    "end": "490039"
  },
  {
    "text": "like that the deployment event is fired whenever you explicitly trigger a",
    "start": "490039",
    "end": "496000"
  },
  {
    "text": "deployment through the API CLI or UI um so the the example is you now have a new",
    "start": "496000",
    "end": "501400"
  },
  {
    "text": "version of your Java application you want to release it to your app servers um so you trigger this event uh the",
    "start": "501400",
    "end": "507039"
  },
  {
    "text": "application servers typically then download the code from somewhere like git SVN S3 HTTP whatever um and then uh",
    "start": "507039",
    "end": "515240"
  },
  {
    "text": "do whatever you told us to do in those scripts which can mean download the code put it in the Tomcat directory restart",
    "start": "515240",
    "end": "521039"
  },
  {
    "text": "Tomcat uh you can you can also do of course anything custom in there so there are customers using rsync or SSH to like",
    "start": "521039",
    "end": "528279"
  },
  {
    "text": "copy uh stuff around uh the in general it's like a generic cook like basically that just this event happened now your",
    "start": "528279",
    "end": "535200"
  },
  {
    "text": "scripts can respond to it right uh then there is the deploy event which uh people use a little bit like",
    "start": "535200",
    "end": "542680"
  },
  {
    "start": "538000",
    "end": "581000"
  },
  {
    "text": "like maybe it's not so common as the other ones so the general idea is whenever you delete an application and you want to remove it from running",
    "start": "542680",
    "end": "548160"
  },
  {
    "text": "machines right uh like the most common use case I've seen is uh let's say you're you um have a large number of PHP",
    "start": "548160",
    "end": "555800"
  },
  {
    "text": "virtual host for example right you have a a static Fleet of PHP application servers and then you have potentially hundreds of customers that that run",
    "start": "555800",
    "end": "562800"
  },
  {
    "text": "their own virtual host on that uh and then when you add or remove customers and you want to remove them from the running host like that will be a good",
    "start": "562800",
    "end": "569519"
  },
  {
    "text": "use case for this um and and uh again basically the life cycle event fires you",
    "start": "569519",
    "end": "574920"
  },
  {
    "text": "register your own scripts to that and uh then they do whatever you think is appropriate to do for this",
    "start": "574920",
    "end": "580519"
  },
  {
    "text": "event um the last one is is a very useful one it's called shutdown uh the idea is this one fires",
    "start": "580519",
    "end": "587079"
  },
  {
    "start": "581000",
    "end": "668000"
  },
  {
    "text": "on the machine before we actually terminate it on ec2 right so if you go to Ops you say please shut down this",
    "start": "587079",
    "end": "592800"
  },
  {
    "text": "instance for me uh instead of immediately terminating it on ec2 um this event is fired first so you can now",
    "start": "592800",
    "end": "599839"
  },
  {
    "text": "do some cleanup or do some like clean shutdown before you actually um we actually terminate it and you can",
    "start": "599839",
    "end": "605560"
  },
  {
    "text": "configure the the shutdown like how much time we should allow for the script to run uh so common use case would be gracefully terminate or shut down Apache",
    "start": "605560",
    "end": "613120"
  },
  {
    "text": "uh so it still finishes serving the requested or the connections it's still holding um before you actually kill the",
    "start": "613120",
    "end": "618320"
  },
  {
    "text": "incense or if you have a database server running flush the caches to dis or to the EBS volume or something like that or",
    "start": "618320",
    "end": "623720"
  },
  {
    "text": "if you're running like a replicated no SQL database right like deregister cleanly from the other nodes and tell you hey I'm no longer available able uh",
    "start": "623720",
    "end": "630160"
  },
  {
    "text": "instead of just disappearing so those life cycle events in that sense allow you to build uh like",
    "start": "630160",
    "end": "637079"
  },
  {
    "text": "a very flexible system right and in addition to the built-in layers as as I said uh you can you can have custom",
    "start": "637079",
    "end": "643320"
  },
  {
    "text": "layers and custom recipes right so here's an example of a of a reddest layer um I built right so there are the",
    "start": "643320",
    "end": "650040"
  },
  {
    "text": "the life cycle events and as you can see there are the OBS work life cycle events that run and then you can register your own recipes to it uh so pretty much",
    "start": "650040",
    "end": "656519"
  },
  {
    "text": "anything that is scriptable anything that uh you can wrap in a chef recipe you can automate and make make run with",
    "start": "656519",
    "end": "663399"
  },
  {
    "text": "opsworks now that we kind of covered the high level um how is offs actually working let's dig into some of the uh",
    "start": "663399",
    "end": "670680"
  },
  {
    "start": "668000",
    "end": "759000"
  },
  {
    "text": "more recent stuff that we did with uh Chef 12 so one big change that we did",
    "start": "670680",
    "end": "676519"
  },
  {
    "text": "that I that I think um is is pretty useful is we changed how we embed chef and how how it uh the relationship",
    "start": "676519",
    "end": "683760"
  },
  {
    "text": "between the obser recipes is and the the your recipes the customer recipes so in the chef 11 10 world uh basically there",
    "start": "683760",
    "end": "691200"
  },
  {
    "text": "is one Chef run that is a combination of um our recipes and your recipes right which means there is a one combined",
    "start": "691200",
    "end": "696639"
  },
  {
    "text": "environment um and that has some issues like if if we have a recipe um with a",
    "start": "696639",
    "end": "702240"
  },
  {
    "text": "certain name you can't use it or you overriding ours and that can be what you wanted to or or you didn't um uh same",
    "start": "702240",
    "end": "709600"
  },
  {
    "text": "with like gems and and uh the the Ruby environment and so on right so there is a potential for conflict um plus like uh",
    "start": "709600",
    "end": "717480"
  },
  {
    "text": "not all all our built-in cookbooks were properly namespaced so there is definitely like um some issues with that",
    "start": "717480",
    "end": "723320"
  },
  {
    "text": "so in Chef 12 um there are two separate Chef runs totally complete environments",
    "start": "723320",
    "end": "728360"
  },
  {
    "text": "like totally complete Ruby environment totally complete uh gem environment so your recipes are running uh in an",
    "start": "728360",
    "end": "734000"
  },
  {
    "text": "isolated Chef run uh that means you can do whatever you like in there you can install additional gems you can install",
    "start": "734000",
    "end": "739760"
  },
  {
    "text": "additional libraries uh there is no chance for conflict uh with what we running um and I think that makes a much",
    "start": "739760",
    "end": "746480"
  },
  {
    "text": "easier for you to to bring in for example a Community cookbooks or existing cookbooks and not worry about",
    "start": "746480",
    "end": "752199"
  },
  {
    "text": "any conflict with the name or the attribute names or something like that with with what ops's",
    "start": "752199",
    "end": "757600"
  },
  {
    "text": "using um so that means basically you have an empty run list where before you had at",
    "start": "757600",
    "end": "763000"
  },
  {
    "text": "least this minimal run list of opsworks uh we have no no cookbooks polluting um the name space Also the node opsworks",
    "start": "763000",
    "end": "770120"
  },
  {
    "text": "thing so before we used basically an attribute to tree to expose this stack",
    "start": "770120",
    "end": "775240"
  },
  {
    "text": "state to you uh so now the idea is you use Chef search so that it's fully compatible in that sense with the idea",
    "start": "775240",
    "end": "780360"
  },
  {
    "text": "of of finding out nodes um so let's say you're looking for certain um server by",
    "start": "780360",
    "end": "786040"
  },
  {
    "start": "782000",
    "end": "796000"
  },
  {
    "text": "name you just use search like you would use with Chef server so in this case I'm looking for uh web one I can look for",
    "start": "786040",
    "end": "792079"
  },
  {
    "text": "all servers uh that start with the name web um and what I would get back is um I",
    "start": "792079",
    "end": "797240"
  },
  {
    "start": "796000",
    "end": "806000"
  },
  {
    "text": "would get back a node object that has the the the attributes that you would expect like IP address a information IMI",
    "start": "797240",
    "end": "803560"
  },
  {
    "text": "ID instance type all of those kind of things um one thing to call out is that because we don't have a Chef server only",
    "start": "803560",
    "end": "810560"
  },
  {
    "start": "806000",
    "end": "834000"
  },
  {
    "text": "information that the obser back end knows about is being pushed down to the instances and that means if you have",
    "start": "810560",
    "end": "816760"
  },
  {
    "text": "like attributes that you generate on the Fly uh during runtime on a node that is not discoverable by the other nodes right like it's it's a pure whatever the",
    "start": "816760",
    "end": "823639"
  },
  {
    "text": "back end has it sends it down like what the information we have the custom Json you have whatever you have in your",
    "start": "823639",
    "end": "829120"
  },
  {
    "text": "cookbooks but if you generate on the fly something on the Node that is unfortunately not available yet um",
    "start": "829120",
    "end": "835560"
  },
  {
    "start": "834000",
    "end": "858000"
  },
  {
    "text": "something else that we're doing is you might have already noticed is we kind of matching the chef RS to uh opsworks",
    "start": "835560",
    "end": "842680"
  },
  {
    "text": "layers right so the concept of Chef RS applies um nicely um so you can you can",
    "start": "842680",
    "end": "848079"
  },
  {
    "text": "reuse that um very nicely uh in addition to kind of the typical Chef server nodes",
    "start": "848079",
    "end": "854480"
  },
  {
    "text": "that you discover we we also expose all the other information that obser has uh through search so you can look for the",
    "start": "854480",
    "end": "860079"
  },
  {
    "start": "858000",
    "end": "892000"
  },
  {
    "text": "applications you can look for uh the layers you can look for the RDS instances the EBS the volumes the ECS",
    "start": "860079",
    "end": "866240"
  },
  {
    "text": "clusters uh and also the users that are available to the stack all of that is of course",
    "start": "866240",
    "end": "871959"
  },
  {
    "text": "documented online and this allows you to kind of uh use search to to Really find",
    "start": "871959",
    "end": "877279"
  },
  {
    "text": "all of that information where before you would have traversed the attribute tree",
    "start": "877279",
    "end": "883600"
  },
  {
    "text": "um then another thing that we uh support um if you look at how a typical Chef um",
    "start": "883600",
    "end": "889800"
  },
  {
    "text": "setup look like is uh or our datab bags right so datab bags because we don't have a chef server you don't upload in",
    "start": "889800",
    "end": "896680"
  },
  {
    "start": "892000",
    "end": "928000"
  },
  {
    "text": "that sense to to the server instead um there are a couple coup ways how you can handle it the most simple one is you define them in the custom Json so",
    "start": "896680",
    "end": "903759"
  },
  {
    "text": "opsworks allows you to Define um arbitrary Json on the stack level on the deployment level and we actually",
    "start": "903759",
    "end": "909600"
  },
  {
    "text": "recently added support for doing this on the layer level too um so that means you",
    "start": "909600",
    "end": "914839"
  },
  {
    "text": "can basically whatever you put in there will be handled down to the chef environment will be available as",
    "start": "914839",
    "end": "919920"
  },
  {
    "text": "attributes and if you use the opsworks databas namespace for that um that will be available um through the databas API",
    "start": "919920",
    "end": "927320"
  },
  {
    "text": "to uh your Chef run right so if I for example have this definition that you can see here on top uh where I Define",
    "start": "927320",
    "end": "934160"
  },
  {
    "start": "928000",
    "end": "960000"
  },
  {
    "text": "like my app and then my SQL access uh information uh and then in my recipe I",
    "start": "934160",
    "end": "939839"
  },
  {
    "text": "can I can use the chef API to get this datab bake item for my app my SQL and",
    "start": "939839",
    "end": "945959"
  },
  {
    "text": "then access the username and password so like the the client side is exactly like",
    "start": "945959",
    "end": "951839"
  },
  {
    "text": "um like Chef client will behave uh in the server case it's just like how you feed this information into the system is",
    "start": "951839",
    "end": "957839"
  },
  {
    "text": "slightly different the other thing that that uh we always",
    "start": "957839",
    "end": "963880"
  },
  {
    "start": "960000",
    "end": "1020000"
  },
  {
    "text": "also get get get asked about is U or are encrypted datab bags um again because there isn't a",
    "start": "963880",
    "end": "969720"
  },
  {
    "text": "server uh like you don't have directly access to to encrypted data bags but you kind of achieve the same thing with",
    "start": "969720",
    "end": "976399"
  },
  {
    "text": "slightly different means so there there are typically three things you can do uh One is using application environment",
    "start": "976399",
    "end": "981519"
  },
  {
    "text": "variables that I will show in a second uh the other one is you can uh encrypt a Json um document upload to is3 and then",
    "start": "981519",
    "end": "987959"
  },
  {
    "text": "give the instances access access VI an IM profile for example to to that and downloaded decrypted um that is probably",
    "start": "987959",
    "end": "994920"
  },
  {
    "text": "what you want to do if you have a kind of very large uh document that you want to get to the instances the the the",
    "start": "994920",
    "end": "1002480"
  },
  {
    "text": "thing that is actually the most recommended one as long as the secrets that you want to transport or actually like kind of credential information to access other EDS services like Dynamo DB",
    "start": "1002480",
    "end": "1009399"
  },
  {
    "text": "sqs or whatever is to just use IM instance uh profiles um because then you",
    "start": "1009399",
    "end": "1014519"
  },
  {
    "text": "don't have to even transport any secret you don't need to rotate the credentials or anything like that right um so let's",
    "start": "1014519",
    "end": "1020480"
  },
  {
    "start": "1020000",
    "end": "1094000"
  },
  {
    "text": "have a brief look at the application environment variables uh so basically every application um allows you to define a couple of those uh you can you",
    "start": "1020480",
    "end": "1027558"
  },
  {
    "text": "can basically pick any key and value that you like and put U um optionally you can Define values as protected which",
    "start": "1027559",
    "end": "1034000"
  },
  {
    "text": "means um they will not be returned uh in the API or UI right they they're write only um through the command through the",
    "start": "1034000",
    "end": "1041520"
  },
  {
    "text": "API uh but you can retrieve them of course in the chef run um where the application is is deployed so that means",
    "start": "1041520",
    "end": "1048199"
  },
  {
    "text": "uh in this case I defining a payment Prov uh user and a and a password and",
    "start": "1048199",
    "end": "1053240"
  },
  {
    "text": "then within my my application those are available through envirment variables so",
    "start": "1053240",
    "end": "1058520"
  },
  {
    "text": "in this case I I can read them uh and then initiate like like initiate an",
    "start": "1058520",
    "end": "1063799"
  },
  {
    "text": "imaginary payment gate R class with with this information right and this shows you how you can easily uh through the",
    "start": "1063799",
    "end": "1069280"
  },
  {
    "text": "API CLI or UI kind of Define secrets and and credentials and pass them onto your application U which is kind of the same",
    "start": "1069280",
    "end": "1075880"
  },
  {
    "text": "thing you would usually do with encrypted data bags so so this is a little bit of what is",
    "start": "1075880",
    "end": "1081679"
  },
  {
    "text": "different in Chef 12 and kind of how the the chef environment improved um and then before handing over to Thomas who",
    "start": "1081679",
    "end": "1087240"
  },
  {
    "text": "will talk about the ECS integration and and on Prem I want to cover um uh something we we also recently did which",
    "start": "1087240",
    "end": "1093799"
  },
  {
    "text": "is Windows right so this is something we've been uh like like asked by by you guys um a lot to to provide um so",
    "start": "1093799",
    "end": "1101360"
  },
  {
    "start": "1094000",
    "end": "1104000"
  },
  {
    "text": "windows I think we launch it in uh late May um so basically you can launch uh",
    "start": "1101360",
    "end": "1106559"
  },
  {
    "text": "various um uh kind of various forms of Windows 2012 R2 kind of the standard Ami",
    "start": "1106559",
    "end": "1112600"
  },
  {
    "text": "the SQL Server Express and then the the other um SQL Server flavors um and it",
    "start": "1112600",
    "end": "1117960"
  },
  {
    "text": "provides the chef 12 runtime environment that I just talked about uh it only has Uh custom layers uh there isn't a Burk",
    "start": "1117960",
    "end": "1124760"
  },
  {
    "start": "1122000",
    "end": "1171000"
  },
  {
    "text": "shelf on runtime um integration available um which which we actually",
    "start": "1124760",
    "end": "1129880"
  },
  {
    "text": "kind of don't recommend even if you use Chef 1110 because that means you have a runtime dependency uh to the supermarket apis",
    "start": "1129880",
    "end": "1136400"
  },
  {
    "text": "and usually you want to reduce the number of runtime dependencies you have so berkshelf is great for the development workflow but what we",
    "start": "1136400",
    "end": "1141760"
  },
  {
    "text": "recommend is when you actually deploy to production is package the the the um uh all the cookbooks and vendor them and",
    "start": "1141760",
    "end": "1147720"
  },
  {
    "text": "then only deploy kind of the vendor uh artifact to to the production Fleet because that means that you're not",
    "start": "1147720",
    "end": "1153880"
  },
  {
    "text": "depending on um the supermarket API being up for your deployments and Chef runs and so",
    "start": "1153880",
    "end": "1158919"
  },
  {
    "text": "on something uh so so in general like in that sense the the chef environment on Windows is the same as you would expect",
    "start": "1158919",
    "end": "1165480"
  },
  {
    "text": "for for Linux um something that we did uh for windows that is um special is around the ADP session",
    "start": "1165480",
    "end": "1173679"
  },
  {
    "start": "1171000",
    "end": "1205000"
  },
  {
    "text": "management um so this is a very neat small feature um so the idea is that you can use of course uh like Windows Active",
    "start": "1173679",
    "end": "1181720"
  },
  {
    "text": "Directory to authenticate users uh via RDP but there are certain use cases where you want temporarily Grant",
    "start": "1181720",
    "end": "1187159"
  },
  {
    "text": "somebody RDP access and you don't want them to be part of your ad right um so",
    "start": "1187159",
    "end": "1192480"
  },
  {
    "text": "opsworks um we're trying to kind of provide the same feature like we do for um Linux with SSH user management so uh",
    "start": "1192480",
    "end": "1199640"
  },
  {
    "text": "you can grant some of your IM users uh the ability to remotely log in to your windows boxes uh and if you give them",
    "start": "1199640",
    "end": "1205559"
  },
  {
    "start": "1205000",
    "end": "1249000"
  },
  {
    "text": "this permission they can request uh like a temporary RDP access",
    "start": "1205559",
    "end": "1211080"
  },
  {
    "text": "um credential uh and you can Define how long is it valid for like 1 Hour 2 hours 24 hours something like that uh and then",
    "start": "1211080",
    "end": "1217559"
  },
  {
    "text": "it generates a random password random credential that is available to you once you can use this credential and then log",
    "start": "1217559",
    "end": "1223320"
  },
  {
    "text": "into the instance um using that once the session expired uh all the process will",
    "start": "1223320",
    "end": "1228960"
  },
  {
    "text": "be killed the user will be removed from the host um and uh the machine will will no longer allow a login from from this",
    "start": "1228960",
    "end": "1235400"
  },
  {
    "text": "user uh so this is something that that we've seen a lot of Enterprise customers pick up in order to like um temporarily",
    "start": "1235400",
    "end": "1240720"
  },
  {
    "text": "Grant like Freelancers or support Engineers access to a machine where you don't want them to be part of your ad",
    "start": "1240720",
    "end": "1246440"
  },
  {
    "text": "setup because they're actually not part of your organization maybe yeah and with that I would uh hand",
    "start": "1246440",
    "end": "1251880"
  },
  {
    "start": "1249000",
    "end": "1373000"
  },
  {
    "text": "over to Thomas who will talk about ECS some things are very easy and hopefully Al our ECS integration is easy for you",
    "start": "1251880",
    "end": "1258320"
  },
  {
    "text": "um so last year re when the ECS um ec2",
    "start": "1258320",
    "end": "1263880"
  },
  {
    "text": "container service was released um who of you is actually familiar with ECS",
    "start": "1263880",
    "end": "1270840"
  },
  {
    "text": "already so we'll go a little bit over ECS so uh what is ECS it's a highly",
    "start": "1270840",
    "end": "1276679"
  },
  {
    "text": "scalable and fast container Management Service so it gives you basically Docker on AWS um you can manage and um launch your",
    "start": "1276679",
    "end": "1284919"
  },
  {
    "text": "container enable applications with simple API calls and and you can monor monitor the state of your whole ECS",
    "start": "1284919",
    "end": "1291840"
  },
  {
    "text": "cluster easily with ECS um one thing that's like missing in",
    "start": "1291840",
    "end": "1297480"
  },
  {
    "text": "ECS is the managing of the underlaying um ECS container instances so ECS gives",
    "start": "1297480",
    "end": "1304880"
  },
  {
    "text": "you all the features that you need to run Docker on ec2 but how do you manage your ECS container",
    "start": "1304880",
    "end": "1312320"
  },
  {
    "text": "instances um that's why we integrated it into obss um so we have this on ECS contain",
    "start": "1312320",
    "end": "1319760"
  },
  {
    "text": "provisioning in management so you can create your ECS contain engin with opsworks you can manage them with opsworks um you can for example install",
    "start": "1319760",
    "end": "1328080"
  },
  {
    "text": "operating system updates or system package updates um we have the complete user management um for your ECS",
    "start": "1328080",
    "end": "1335240"
  },
  {
    "text": "container instances uh we have the performance monitoring so we can uh just watch um how the instan behaves when",
    "start": "1335240",
    "end": "1343200"
  },
  {
    "text": "running the docker containers you can also um use autoscaling on top of it so",
    "start": "1343200",
    "end": "1348559"
  },
  {
    "text": "so if you see that your cluster is uh needs more power you can just upscale or",
    "start": "1348559",
    "end": "1353760"
  },
  {
    "text": "if it's um not needed anymore you can downscale with opsworks uh we do the EBS",
    "start": "1353760",
    "end": "1359120"
  },
  {
    "text": "uh volume management for you and also the public IP elastic IP management and",
    "start": "1359120",
    "end": "1364919"
  },
  {
    "text": "as well as the security group management so everything you actually need to to manage the underlying ECS conten is done",
    "start": "1364919",
    "end": "1370760"
  },
  {
    "text": "by opsworks and I will show you now how that works",
    "start": "1370760",
    "end": "1378000"
  },
  {
    "start": "1373000",
    "end": "1493000"
  },
  {
    "text": "so give you they big enough or should I increase the size a little bit of the of",
    "start": "1381440",
    "end": "1386679"
  },
  {
    "text": "the browser it's okay good so what I will do now is um I will create a new",
    "start": "1386679",
    "end": "1392559"
  },
  {
    "text": "layer in opsworks so we have the new layer type called ECS cluster",
    "start": "1392559",
    "end": "1398039"
  },
  {
    "text": "layer it will tell me now that there's already uh",
    "start": "1398039",
    "end": "1403320"
  },
  {
    "text": "cluster l so if you look at ECS I will just open the um so let's just remove it",
    "start": "1403320",
    "end": "1412320"
  },
  {
    "text": "and oh the service is active um never mind then we just use that there so um",
    "start": "1412320",
    "end": "1420760"
  },
  {
    "text": "as I said so I just create a ECS layer cluster layer with the existing ECS",
    "start": "1420760",
    "end": "1426880"
  },
  {
    "text": "cluster um it uses a new instance profile in opsworks uh that gives you",
    "start": "1426880",
    "end": "1432840"
  },
  {
    "text": "also ECS access if it's not created yet it will",
    "start": "1432840",
    "end": "1438559"
  },
  {
    "text": "we will automatically gr you to to create it in the console so I've now created that uh ECS",
    "start": "1438559",
    "end": "1444400"
  },
  {
    "text": "cluster layer and what I will do now is first thing is I want later to deploy an",
    "start": "1444400",
    "end": "1449640"
  },
  {
    "text": "example WordPress uh application so I give that cluster uh security groups for uh Port 8",
    "start": "1449640",
    "end": "1458120"
  },
  {
    "text": "access so for example I can use the buil-in PHP app um security group or you can just use your Custom Security groups",
    "start": "1458120",
    "end": "1465120"
  },
  {
    "text": "for that depending on what layer you want to uh Port you want to open so I've now um added that security group",
    "start": "1465120",
    "end": "1472039"
  },
  {
    "text": "so I can now add instances let's say I want two instance with typ C3",
    "start": "1472039",
    "end": "1481880"
  },
  {
    "text": "large so not adding them and starting",
    "start": "1482640",
    "end": "1488039"
  },
  {
    "text": "them uh what they will do now is um the first they we'll do the normal opsworks uh provisioning that means we started",
    "start": "1489039",
    "end": "1495919"
  },
  {
    "start": "1493000",
    "end": "1563000"
  },
  {
    "text": "instance uh we install our agent um that you can manage the instances uh but as",
    "start": "1495919",
    "end": "1501200"
  },
  {
    "text": "well we will install the ECS agent and we will automatically register the instances to the ECS",
    "start": "1501200",
    "end": "1508200"
  },
  {
    "text": "cluster so if you go now to ECS um we have to PR prepare little something so",
    "start": "1508200",
    "end": "1516640"
  },
  {
    "text": "um the first thing I did is um I created a task definition that uh gives me like",
    "start": "1516640",
    "end": "1524279"
  },
  {
    "text": "WordPress and my SQL and um so it's a so very basic d",
    "start": "1524279",
    "end": "1530799"
  },
  {
    "text": "definition with two containers and if I go out to",
    "start": "1530799",
    "end": "1536279"
  },
  {
    "text": "my uh services so I've I've created the service WordPress and um it doesn't have any",
    "start": "1536279",
    "end": "1545000"
  },
  {
    "text": "task yet running because we don't have any container instances and if we go to E instance we",
    "start": "1545000",
    "end": "1550240"
  },
  {
    "text": "also don't see any instance yet because there are still running uh the setup but uh once the instances actually",
    "start": "1550240",
    "end": "1558320"
  },
  {
    "text": "started by opsworks they will show up here and I will show you later how it",
    "start": "1558320",
    "end": "1563480"
  },
  {
    "start": "1563000",
    "end": "1633000"
  },
  {
    "text": "looks like then because this takes some some minutes I will in the meantime give",
    "start": "1563480",
    "end": "1568640"
  },
  {
    "text": "you a short demo about um the RDP feature Jonathan just presented for",
    "start": "1568640",
    "end": "1573720"
  },
  {
    "text": "Windows so if here Windows instance",
    "start": "1573720",
    "end": "1579399"
  },
  {
    "text": "I just click on the RDP icon uh can grant access for example an hour then I",
    "start": "1579399",
    "end": "1585640"
  },
  {
    "text": "click on generate password and now it's um requesting the password",
    "start": "1585640",
    "end": "1592919"
  },
  {
    "text": "and later give me gives me a session so this is like the start so I",
    "start": "1592919",
    "end": "1599760"
  },
  {
    "text": "already got the the password here and um I can click here on download",
    "start": "1599760",
    "end": "1605360"
  },
  {
    "text": "an RDP file so if I click on open it will open",
    "start": "1605360",
    "end": "1614240"
  },
  {
    "text": "RP client and I need to to copy the password I think the session is not",
    "start": "1614240",
    "end": "1621000"
  },
  {
    "text": "created yet so normally I shouldn't ask me for the password but maybe already gives me access yes",
    "start": "1621000",
    "end": "1629159"
  },
  {
    "text": "no so we need some time to actually um create the session so we have to wait",
    "start": "1629159",
    "end": "1635679"
  },
  {
    "text": "until this is done here so when we going back to have a look at our CS",
    "start": "1635679",
    "end": "1640880"
  },
  {
    "text": "cluster so fortunately it's still booting",
    "start": "1640880",
    "end": "1645799"
  },
  {
    "text": "so as I said so it's uh downloading the agent installs the agent um will then",
    "start": "1652440",
    "end": "1657679"
  },
  {
    "text": "run a a setup command and the setup command will then um as I mentioned",
    "start": "1657679",
    "end": "1662880"
  },
  {
    "text": "before doing the ECS agent installation as well as registering it to the to the",
    "start": "1662880",
    "end": "1669000"
  },
  {
    "text": "ECS cluster so it's now running the setup um",
    "start": "1669000",
    "end": "1675080"
  },
  {
    "text": "I think this will take about a minute",
    "start": "1675080",
    "end": "1680120"
  },
  {
    "text": "um when you start the ECS container instance you can of course uh run your own recipes so um it depend of if you",
    "start": "1680679",
    "end": "1687799"
  },
  {
    "text": "depending of if you just want to use Docker or if maybe you also want to um do other task on the machines as",
    "start": "1687799",
    "end": "1695240"
  },
  {
    "text": "well so it's it's up to you if you have want to have dedicated um instances only",
    "start": "1695240",
    "end": "1700679"
  },
  {
    "text": "for for Docker or uh for multiple purposes what you can",
    "start": "1700679",
    "end": "1705720"
  },
  {
    "text": "also do is like integrate it with your um other Ops Stacks so if you have a stack with some other layers um you can",
    "start": "1705720",
    "end": "1713799"
  },
  {
    "text": "just integrate them with the uh ECS cluster layer so it's uh you're not",
    "start": "1713799",
    "end": "1719240"
  },
  {
    "text": "forced to use Docker for everything you can just combine both world if you want",
    "start": "1719240",
    "end": "1724360"
  },
  {
    "text": "to so let's have a look if the RDP sessions already created for me unfortunately",
    "start": "1724360",
    "end": "1732760"
  },
  {
    "text": "not I wonder what will happen first uh maybe we can have a look at the ECS",
    "start": "1734039",
    "end": "1740360"
  },
  {
    "text": "container console and have a look at the instances already there unfortunately also",
    "start": "1740360",
    "end": "1747240"
  },
  {
    "text": "not if it takes a little bit longer I can maybe start with the uh on premises",
    "start": "1750640",
    "end": "1756080"
  },
  {
    "text": "part and come back to this uh part of the presentation later oh here they are so the ECS container instance that were",
    "start": "1756080",
    "end": "1763000"
  },
  {
    "text": "started by opsworks are now registered to the ECS cluster and as we already have the the",
    "start": "1763000",
    "end": "1769200"
  },
  {
    "text": "service active um there will be soon the task uh um running um started by the",
    "start": "1769200",
    "end": "1777880"
  },
  {
    "text": "service that will then uh run the docker containers for the MySQL um container and the WordPress",
    "start": "1777880",
    "end": "1786320"
  },
  {
    "text": "container so now we seen it's just switched from uh from running setup to online so the instance are now fully uh",
    "start": "1786320",
    "end": "1794120"
  },
  {
    "text": "working opsworks so you can now run any chef recipe on it or or reconfigure them",
    "start": "1794120",
    "end": "1800440"
  },
  {
    "text": "um also the the rest of the stack is also now notified about these two new",
    "start": "1800440",
    "end": "1805880"
  },
  {
    "text": "instances and you can then interact with them let's go back",
    "start": "1805880",
    "end": "1813159"
  },
  {
    "text": "here so we should hopefully see a TX um so if we go",
    "start": "1813159",
    "end": "1819519"
  },
  {
    "text": "to the task um it's already one so it should be fine",
    "start": "1819519",
    "end": "1828960"
  },
  {
    "text": "ah we see that's a pening task now so and in a hopefully few seconds",
    "start": "1830679",
    "end": "1837039"
  },
  {
    "text": "the docker containers will be will be running and we can check if they actually working what we expect them to",
    "start": "1837039",
    "end": "1844799"
  },
  {
    "text": "do so if I now go to the to two machines so one of them is is",
    "start": "1844799",
    "end": "1850200"
  },
  {
    "text": "running the MySQL um so about one of them should run",
    "start": "1850200",
    "end": "1856240"
  },
  {
    "text": "the docker container with the WordPress installation so hopefully the task is",
    "start": "1856240",
    "end": "1861960"
  },
  {
    "text": "running soon still pending maybe I just start with the on",
    "start": "1861960",
    "end": "1868279"
  },
  {
    "text": "premises part of presentation we just go back to this part later or we go to the windows part and see",
    "start": "1868279",
    "end": "1875080"
  },
  {
    "text": "that ah the session is created so we can try that out so I click again on download RDP file uh will open it with",
    "start": "1875080",
    "end": "1883880"
  },
  {
    "text": "the already copied the password um",
    "start": "1883880",
    "end": "1889000"
  },
  {
    "text": "and we are logged in so that's easy and Jonas mentioned um once the I've created",
    "start": "1890279",
    "end": "1896080"
  },
  {
    "text": "the session for one hour once this hour is over um it will automatically lock",
    "start": "1896080",
    "end": "1901440"
  },
  {
    "text": "out the user stop the processes and uh we can make sure that this user only has",
    "start": "1901440",
    "end": "1906600"
  },
  {
    "text": "access for the time span that we configured",
    "start": "1906600",
    "end": "1912480"
  },
  {
    "text": "okay so going back to TCS it's running so now one of these",
    "start": "1912480",
    "end": "1920000"
  },
  {
    "start": "1918000",
    "end": "2233000"
  },
  {
    "text": "pages should show me the WordPress page yeah exactly so this is the WordPress container we started and I can now set",
    "start": "1920000",
    "end": "1926320"
  },
  {
    "text": "up my my WordPress installation so that was the ECS integration demonstration uh we'll now",
    "start": "1926320",
    "end": "1932720"
  },
  {
    "text": "go to next part uh which is on premises support in",
    "start": "1932720",
    "end": "1938039"
  },
  {
    "text": "opsworks so why why should you use it if you have if you need it um",
    "start": "1941600",
    "end": "1948240"
  },
  {
    "text": "so opsworks previously um gave you the possibility to manage your servers on I2",
    "start": "1948240",
    "end": "1953600"
  },
  {
    "text": "but um I think there are still a lot of people that have their own data centers uh their own servers in some Data Center",
    "start": "1953600",
    "end": "1960880"
  },
  {
    "text": "and they maybe want to also get um the management capabilities of opsworks um",
    "start": "1960880",
    "end": "1966799"
  },
  {
    "text": "for their environments and um with the on premise integration you can now um",
    "start": "1966799",
    "end": "1973240"
  },
  {
    "text": "use opsworks for any server that is um basically running Linux or our supported",
    "start": "1973240",
    "end": "1979600"
  },
  {
    "text": "Linux uh OS so for example Rel or ubun uh what you can do you can um you see",
    "start": "1979600",
    "end": "1987960"
  },
  {
    "text": "complete on premise environment but you can also enable hybrid environments so for example um you can run your your",
    "start": "1987960",
    "end": "1996000"
  },
  {
    "text": "test or development environment on on ec2 spin up as as much test or develop",
    "start": "1996000",
    "end": "2001159"
  },
  {
    "text": "or development Stacks you need and then later deploy it on your on premises Fleet or maybe have your base load on",
    "start": "2001159",
    "end": "2008000"
  },
  {
    "text": "your premises servers and then scale out to ec2 when there's demand for",
    "start": "2008000",
    "end": "2013799"
  },
  {
    "text": "it um what you can then do is like the basic Ops features so you can deploy and",
    "start": "2013880",
    "end": "2019240"
  },
  {
    "text": "operate your applications uh on any server that's currently running Linux um",
    "start": "2019240",
    "end": "2025159"
  },
  {
    "text": "you can use then opsworks to uh update the operating system um all the software",
    "start": "2025159",
    "end": "2030799"
  },
  {
    "text": "running on these machines uh you can run Chef recipes uh to configure your your",
    "start": "2030799",
    "end": "2036600"
  },
  {
    "text": "servers uh um and you can control also uh who's running scripts and you can",
    "start": "2036600",
    "end": "2043159"
  },
  {
    "text": "also see the output of the scripts and uh find out who who was doing what and",
    "start": "2043159",
    "end": "2051878"
  },
  {
    "text": "uh what you can also do is uh what we have just shown with Windows you can grant users access uh with SSH and also",
    "start": "2051879",
    "end": "2059800"
  },
  {
    "text": "control who has zudo um permissions and uh you can also get cloudwatch",
    "start": "2059800",
    "end": "2065358"
  },
  {
    "text": "metrics for your on premises servers so you will see them in in cloudwatch as well as in our monitoring user interface",
    "start": "2065359",
    "end": "2073358"
  },
  {
    "text": "in the console and you can also if you have mixed layers you can also load by",
    "start": "2073359",
    "end": "2079800"
  },
  {
    "text": "uh can also um scale uh AO scale with the um cloudwatch metrics so for example",
    "start": "2079800",
    "end": "2086720"
  },
  {
    "text": "if you see the load on your Prem going up you can Auto automatically start ec2 instances um to handle the",
    "start": "2086720",
    "end": "2094280"
  },
  {
    "text": "load um if you're using it on premise um we will charge you 2 cents per hour per",
    "start": "2094280",
    "end": "2102400"
  },
  {
    "text": "server uh but you also get the cloud metrics for free so what we also released this year",
    "start": "2102400",
    "end": "2109079"
  },
  {
    "text": "is very similar but um supporting already running E2 incisors",
    "start": "2109079",
    "end": "2115760"
  },
  {
    "text": "so uh you might have started without using obsr so you have already some production machines but you want to",
    "start": "2115760",
    "end": "2121440"
  },
  {
    "text": "integrat them in your opsworks Stacks uh this is not possible so",
    "start": "2121440",
    "end": "2128800"
  },
  {
    "text": "um you don't have to like start from scratch you can just uh import them uh they will get registered to the OBS de",
    "start": "2128800",
    "end": "2135760"
  },
  {
    "text": "you define in the um the command they you can then assign them to one or",
    "start": "2135760",
    "end": "2142000"
  },
  {
    "text": "multiple opsworks layers and you can benefit then from all the OB management",
    "start": "2142000",
    "end": "2147640"
  },
  {
    "text": "features so um from premises of course there are some features not not supported like uh of course you can't",
    "start": "2147640",
    "end": "2154560"
  },
  {
    "text": "use e OBS EBS elastic IPS with your on premise servers but if you use the uh support for",
    "start": "2154560",
    "end": "2160400"
  },
  {
    "text": "existing Amazon ec2 instances you can uh use all the features uh that are available for normal Ops instances and",
    "start": "2160400",
    "end": "2167240"
  },
  {
    "text": "there's no additional charge for it so how does the registration Works um",
    "start": "2167240",
    "end": "2175440"
  },
  {
    "text": "what you started there's a new AWS opsworks register command for the CLI um",
    "start": "2175440",
    "end": "2182760"
  },
  {
    "text": "this is then starting the ENT bootstrapping on the on your on premises server um this is then registering the",
    "start": "2182760",
    "end": "2190920"
  },
  {
    "text": "instance or your on premisis server to opsworks you will see it in the registering State uh once the ENT is",
    "start": "2190920",
    "end": "2196200"
  },
  {
    "text": "running it will automatically get a setup command um and once the setup command is um completely done you will",
    "start": "2196200",
    "end": "2204359"
  },
  {
    "text": "see the instance in registered state and then you can start assigning it to one or multiple obss layers and then it will",
    "start": "2204359",
    "end": "2210839"
  },
  {
    "text": "be an assigning also running a setup and once the setup is done it will be online",
    "start": "2210839",
    "end": "2215960"
  },
  {
    "text": "and it will behave as I said as a normal opo instance I will also give you a demo about that right",
    "start": "2215960",
    "end": "2224078"
  },
  {
    "text": "now so we have our stack with the ECS um layer I will create a new layer in this",
    "start": "2229280",
    "end": "2236640"
  },
  {
    "start": "2233000",
    "end": "2248000"
  },
  {
    "text": "example I will I want to to deploy an um",
    "start": "2236640",
    "end": "2241920"
  },
  {
    "text": "raid application very simple one so I create a raids layer this the layers is now created now",
    "start": "2241920",
    "end": "2248520"
  },
  {
    "start": "2248000",
    "end": "2308000"
  },
  {
    "text": "I click on ADD instance so for normal use case you would now create the",
    "start": "2248520",
    "end": "2253680"
  },
  {
    "text": "blueprints for the E2 instance but now we go here to the tab on the on the right side and we can click here on",
    "start": "2253680",
    "end": "2260160"
  },
  {
    "text": "register an instance maybe little bigger and um I can now choose between",
    "start": "2260160",
    "end": "2268200"
  },
  {
    "text": "existing E2 instances and on premises instances uh in this case I want to have",
    "start": "2268200",
    "end": "2273240"
  },
  {
    "text": "on premise in then I click on install a SLI in that case I already of course",
    "start": "2273240",
    "end": "2278599"
  },
  {
    "text": "installed the CLI but if you haven't uh registered instance yet um you get all",
    "start": "2278599",
    "end": "2284160"
  },
  {
    "text": "the information here on that link I can choose between running it directly on",
    "start": "2284160",
    "end": "2289520"
  },
  {
    "text": "the uh on premises server or on some machine that has SSH access to the on",
    "start": "2289520",
    "end": "2295359"
  },
  {
    "text": "premisis server and that's what they're doing now uh now",
    "start": "2295359",
    "end": "2301560"
  },
  {
    "text": "I get a command that I can run to actually start the registration um I",
    "start": "2301560",
    "end": "2307200"
  },
  {
    "text": "remember machine I have a virtual box running here so it's just a plain uh Ubuntu OS uh nothing is installed just a",
    "start": "2307200",
    "end": "2315280"
  },
  {
    "start": "2308000",
    "end": "2453000"
  },
  {
    "text": "plain installation and I will just copy over these um this",
    "start": "2315280",
    "end": "2322119"
  },
  {
    "text": "command and I will start it here so there only very minor things I need to change so for example I have",
    "start": "2322119",
    "end": "2328440"
  },
  {
    "text": "a uh credentials already set up and it's profile",
    "start": "2328440",
    "end": "2333560"
  },
  {
    "text": "register uh I also don't need the username because it's the same one on the VM as on my local computer the only",
    "start": "2333560",
    "end": "2340440"
  },
  {
    "text": "thing I need to specify are the private key to loog",
    "start": "2340440",
    "end": "2346319"
  },
  {
    "text": "in and I give the uh IP address of the virtual machine running in Virtual box",
    "start": "2346599",
    "end": "2353480"
  },
  {
    "text": "here large the yeah make a bit bigger",
    "start": "2353480",
    "end": "2359838"
  },
  {
    "text": "oops so so basically um you see it's like um the register command I just",
    "start": "2361359",
    "end": "2366800"
  },
  {
    "text": "specified here the profile I want to use to get the credentials then there's the infrastructure class um on premises um",
    "start": "2366800",
    "end": "2374960"
  },
  {
    "text": "for registration of of ec2 instance you would just specify the infrastructure class ec2 um then I specify the the",
    "start": "2374960",
    "end": "2382440"
  },
  {
    "text": "region I use um and the stack ID and the the private key to actually log in and",
    "start": "2382440",
    "end": "2387880"
  },
  {
    "text": "the IP address as I haven't used the root user but just the normal user I will now be",
    "start": "2387880",
    "end": "2395200"
  },
  {
    "text": "asked for the sudo password",
    "start": "2395200",
    "end": "2399318"
  },
  {
    "text": "and now the edge ination works so what is upks doing here so we inject a small",
    "start": "2400839",
    "end": "2407200"
  },
  {
    "text": "Shell Code that's uh then um downloading the the agent and starting the edge",
    "start": "2407200",
    "end": "2414839"
  },
  {
    "text": "installation uh which is by which is done on E2 instance start Ops Works via the um E2 metadata service with the user",
    "start": "2414839",
    "end": "2424000"
  },
  {
    "text": "data but here we have to inject it manually VI SS aged or as I said you can start the the installer directly on the",
    "start": "2424000",
    "end": "2431640"
  },
  {
    "text": "on premises server another thing that we are now doing here is um as this is not an AWS",
    "start": "2431640",
    "end": "2438920"
  },
  {
    "text": "entity we need some um some user on the machine that is actually uh registering",
    "start": "2438920",
    "end": "2446520"
  },
  {
    "text": "the um your your server to to our back end um and therefore we",
    "start": "2446520",
    "end": "2452920"
  },
  {
    "text": "create an user with um minimal permissions uh which is also done by the",
    "start": "2452920",
    "end": "2458960"
  },
  {
    "start": "2453000",
    "end": "2508000"
  },
  {
    "text": "AWS CLI so if you if you go to the IM",
    "start": "2458960",
    "end": "2464280"
  },
  {
    "text": "console we see that there's no user uh which is called after the stack",
    "start": "2464280",
    "end": "2470680"
  },
  {
    "text": "name so it's always prefix with OBS and then the stack name and then the IP address of the the server but you can",
    "start": "2470680",
    "end": "2476240"
  },
  {
    "text": "also specify the user name yourself and we see if you look at the",
    "start": "2476240",
    "end": "2482760"
  },
  {
    "text": "policy that this user has access to OBS rigid sentence for the resource which is",
    "start": "2483079",
    "end": "2490520"
  },
  {
    "text": "the Arn of the stack and it allows it for to look like it's for eight hours I",
    "start": "2490520",
    "end": "2499200"
  },
  {
    "text": "think no this is actually for one hour because of the Utz time zone",
    "start": "2499200",
    "end": "2506039"
  },
  {
    "text": "here so we see now that the um VM is already showing up so VM was the uh host",
    "start": "2506280",
    "end": "2513640"
  },
  {
    "start": "2508000",
    "end": "2553000"
  },
  {
    "text": "name of of this machine I have running here so it's just reusing the host name",
    "start": "2513640",
    "end": "2519839"
  },
  {
    "text": "but you can also specify your own host name um it's now running the setup which",
    "start": "2519839",
    "end": "2525040"
  },
  {
    "text": "is like the basic opsw workk setup will for example uh create the users that you have specified in your",
    "start": "2525040",
    "end": "2531359"
  },
  {
    "text": "stack and once the setup is done we can assign it to uh to that",
    "start": "2531359",
    "end": "2540520"
  },
  {
    "text": "layer so we see here that that the installer actually already done so um",
    "start": "2541880",
    "end": "2548359"
  },
  {
    "text": "this part is over and the opsworks uh system has triggered a uh setup command",
    "start": "2548359",
    "end": "2556119"
  },
  {
    "start": "2553000",
    "end": "2643000"
  },
  {
    "text": "which was now executed the VM is now registered and we can just click here and done",
    "start": "2556119",
    "end": "2561760"
  },
  {
    "text": "and add that instance to our rates app",
    "start": "2561760",
    "end": "2567000"
  },
  {
    "text": "server so we can here say um we have the unassign instances we just click on the one that I just registered but we can",
    "start": "2567720",
    "end": "2574280"
  },
  {
    "text": "also like set up like a register machines and then assign them here at",
    "start": "2574280",
    "end": "2582000"
  },
  {
    "text": "once now we um assign the instance to that to that layer we will run another",
    "start": "2582119",
    "end": "2588079"
  },
  {
    "text": "setup um on this instance which will now set up uh a ra application server so it",
    "start": "2588079",
    "end": "2594640"
  },
  {
    "text": "will install Apache it will automatically deploy the application so I've um predefined an application here",
    "start": "2594640",
    "end": "2602200"
  },
  {
    "text": "uh it's a very small um R application it's a which is",
    "start": "2602200",
    "end": "2607640"
  },
  {
    "text": "available here on GitHub so uh once the um setup has automatically installed",
    "start": "2607640",
    "end": "2615200"
  },
  {
    "text": "the race application server Pache and so on all the dependencies that are needed uh it will deploy these this application",
    "start": "2615200",
    "end": "2622400"
  },
  {
    "text": "directly from from GitHub so we see now it's it's running",
    "start": "2622400",
    "end": "2628559"
  },
  {
    "text": "setup and uh in a few seconds it should also be an online State and then we can",
    "start": "2628559",
    "end": "2636040"
  },
  {
    "text": "have a look at the small application that is it's",
    "start": "2636040",
    "end": "2640838"
  },
  {
    "text": "running maybe if you go to the IM console um we see",
    "start": "2641280",
    "end": "2647880"
  },
  {
    "start": "2643000",
    "end": "2771000"
  },
  {
    "text": "that that we also have created a group for you so every time you register instance we put them all into one group",
    "start": "2648640",
    "end": "2656079"
  },
  {
    "text": "per per stack uh that you can easily differentiate where the users are coming from especially if you have multiple",
    "start": "2656079",
    "end": "2662480"
  },
  {
    "text": "multiple stacks and this is user we created um for registering instances you don't need",
    "start": "2662480",
    "end": "2670640"
  },
  {
    "text": "um uh like a full admin access we can have a user with um restricted access so",
    "start": "2670640",
    "end": "2676359"
  },
  {
    "text": "this is user that I have configured for running the C uh CLI command that I've",
    "start": "2676359",
    "end": "2681480"
  },
  {
    "text": "shown you so if you look at a policy there are a couple of things that uh this user needs um so if you start with",
    "start": "2681480",
    "end": "2689040"
  },
  {
    "text": "the IM permissions we see that um we needed to to create that group create that user create a policy um",
    "start": "2689040",
    "end": "2698559"
  },
  {
    "text": "and the uh addit adding the user to the to that group um and we have also some",
    "start": "2698559",
    "end": "2706000"
  },
  {
    "text": "uh permissions that we need for for opsworks for example um this command here gives you all the information if",
    "start": "2706000",
    "end": "2712280"
  },
  {
    "text": "you want to reimplement it yourself because this is for convenience so the you can just use the C I command but you",
    "start": "2712280",
    "end": "2718119"
  },
  {
    "text": "can if you want to integrate in your system uh you can actually um describe",
    "start": "2718119",
    "end": "2723760"
  },
  {
    "text": "the stch provision parameters and then use them for actually doing the boot straing yourself so there have a",
    "start": "2723760",
    "end": "2728800"
  },
  {
    "text": "customer demand already for it to just integrate it into into their their own system but if you want to start it just",
    "start": "2728800",
    "end": "2734280"
  },
  {
    "text": "use the CI it's it's quite easy just just running that",
    "start": "2734280",
    "end": "2739480"
  },
  {
    "text": "command so now the instance switched to online and um so we can have a look if",
    "start": "2739480",
    "end": "2745559"
  },
  {
    "text": "it's uh now working so I click now on the IP address of that virtual machine here and it's actually running that R",
    "start": "2745559",
    "end": "2752800"
  },
  {
    "text": "application I've just deployed yes that's what I wanted to",
    "start": "2752800",
    "end": "2758000"
  },
  {
    "text": "show you [Music] um if you have any questions um please",
    "start": "2758000",
    "end": "2766280"
  },
  {
    "text": "let us know and thank you very much",
    "start": "2766280",
    "end": "2770559"
  }
]