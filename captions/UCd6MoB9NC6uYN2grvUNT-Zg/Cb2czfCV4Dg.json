[
  {
    "text": "Uh huh So let's get started",
    "start": "3260",
    "end": "8570"
  },
  {
    "text": "Welcome Hope you guys are having a good time at reinvent My name is Daniel Taylor",
    "start": "10360",
    "end": "16090"
  },
  {
    "text": "I am a software development engineer at Amazon Web Services",
    "start": "16460",
    "end": "20990"
  },
  {
    "text": "and I work on the SDKs and Tools team More specifically I work on Python so I work on",
    "start": "21730",
    "end": "29199"
  },
  {
    "text": "the python sdk and I work on the AWS cli",
    "start": "29200",
    "end": "32770"
  },
  {
    "text": "So what I'd like to talk about today is boto three which is the next major version of the AWS",
    "start": "34460",
    "end": "40890"
  },
  {
    "text": "sdk for python But before we get too far into that I'd like",
    "start": "40890",
    "end": "45960"
  },
  {
    "text": "to talk about what boto is Ah little bit of history about the project",
    "start": "45960",
    "end": "51280"
  },
  {
    "text": "And then we can talk about some features of boto three go into some code samples and take a look",
    "start": "51860",
    "end": "57399"
  },
  {
    "text": "at a real world project example",
    "start": "57410",
    "end": "60880"
  },
  {
    "text": "So boto is the AWS sdk for python That's software development kit",
    "start": "64060",
    "end": "69590"
  },
  {
    "text": "It means that it allows python developers to interact with services from AWS using python",
    "start": "69600",
    "end": "76690"
  },
  {
    "text": "The current major version is to the latest releases to 0.34 currently we support over 35 services from AWS",
    "start": "77960",
    "end": "87680"
  },
  {
    "text": "The project was started in 2006 by Mitch Garnett Um it was started as an S3 client",
    "start": "89460",
    "end": "97390"
  },
  {
    "text": "So Amazon S3 is our simple storage service It is a way to store and retrieve files in",
    "start": "97400",
    "end": "103870"
  },
  {
    "text": "the cloud Since then we've seen a ton of community contributions",
    "start": "103870",
    "end": "108770"
  },
  {
    "text": "Those include new features to the S3 client they also include new services",
    "start": "110040",
    "end": "114880"
  },
  {
    "text": "We've added Amazon EC2 our compute service Amazon SNS our notification service Amazon SQS our cue service",
    "start": "115360",
    "end": "124240"
  },
  {
    "text": "and many others In 2011 Mitch actually joined Amazon and Amazon began actively",
    "start": "125160",
    "end": "133220"
  },
  {
    "text": "contributing to the project Since then we've seen many service updates",
    "start": "133220",
    "end": "138660"
  },
  {
    "text": "We've seen a lot of new services added and we've seen a move toward code generation",
    "start": "138670",
    "end": "144970"
  },
  {
    "text": "So what that means is we actually have these JSON files and were able to take them and generate python",
    "start": "145660",
    "end": "152069"
  },
  {
    "text": "code out of them And then also this year we added support for python",
    "start": "152070",
    "end": "157200"
  },
  {
    "text": "three So if you're using Boto 2 today you can choose to either use python two or three whatever you're more",
    "start": "157200",
    "end": "165300"
  },
  {
    "text": "comfortable with So let's take a quick look at what the code looks like",
    "start": "165300",
    "end": "170170"
  },
  {
    "text": "Here we see an example of boto 2 It's probably very familiar to many of you",
    "start": "170340",
    "end": "175180"
  },
  {
    "text": "We import the boto module we create a connection to S3",
    "start": "175860",
    "end": "181079"
  },
  {
    "text": "We get an S3 bucket by its name in this example The name is my bucket and then we iterate through",
    "start": "182260",
    "end": "189349"
  },
  {
    "text": "all the objects in the bucket printing out the objects key and it's last modified date time",
    "start": "189350",
    "end": "194880"
  },
  {
    "text": "Now keep this example in mind because we are going to show you a new example of the same code",
    "start": "196660",
    "end": "203310"
  },
  {
    "text": "except using boto three in a minute So let's move on to the features of Boto 3",
    "start": "203310",
    "end": "209670"
  },
  {
    "text": "And what is Boto 3 is. So Bota 3 is in Developer preview as of two days ago",
    "start": "209670",
    "end": "216170"
  },
  {
    "text": "It is a ground up rewrite It supports Python two and three from day one",
    "start": "216560",
    "end": "223879"
  },
  {
    "text": "It's a data driven um from these Json Files that I mentioned earlier because of that you see we have",
    "start": "225260",
    "end": "232850"
  },
  {
    "text": "up to date service API support We have a consistent interface across all of the modules",
    "start": "232860",
    "end": "238190"
  },
  {
    "text": "which because of the Json support and in in",
    "start": "238960",
    "end": "244010"
  },
  {
    "text": "Bodo 2 what we saw is alot of community contributions that were hand coded um for boto three",
    "start": "244010",
    "end": "252810"
  },
  {
    "text": "That's not the case anymore And additionally in boto three we're also offering an object",
    "start": "252810",
    "end": "258850"
  },
  {
    "text": "oriented modern higher level AP which is also driven off of these Json files",
    "start": "258850",
    "end": "263890"
  },
  {
    "text": "Perhaps the most important feature of boto three is the fact that you can use it today alongside Boto 2",
    "start": "265360",
    "end": "270790"
  },
  {
    "text": "This means if you have an existing Boto 2 project and you want to add a new feature you could go ahead and install boto three import boto three and",
    "start": "271360",
    "end": "279330"
  },
  {
    "text": "write your new future using it So architecturally boto three is built on top of a",
    "start": "279600",
    "end": "286830"
  },
  {
    "text": "library called Boto Core. Boto Core is shared with the",
    "start": "286830",
    "end": "293069"
  },
  {
    "text": "so if you've ever used that you've actually already used Boto Core What Boto Core provides is low level uh service access",
    "start": "293260",
    "end": "302690"
  },
  {
    "text": "through clients It provides a session um configuration credentials and the clients",
    "start": "302690",
    "end": "309200"
  },
  {
    "text": "themselves actually do the http requests they do serialization and",
    "start": "309200",
    "end": "315320"
  },
  {
    "text": "authentication and response handling Now in Boto three these clients are actually exposed to",
    "start": "315320",
    "end": "322350"
  },
  {
    "text": "the developer and additionally we've written our own session and our own configuration and high level resource is which we'll",
    "start": "322350",
    "end": "330510"
  },
  {
    "text": "get into in a moment So if you remember that example that we just went over of boto 2 here is the same thing in",
    "start": "330510",
    "end": "337770"
  },
  {
    "text": "Boto three it's similar but not quite the same You import the boto three module create a resource to",
    "start": "337770",
    "end": "345990"
  },
  {
    "text": "the Amazon S3 service You can instant a bucket by its name and then iterate",
    "start": "345990",
    "end": "352780"
  },
  {
    "text": "through all of the objects in the bucket printing out the objects key And it's last modified date in time",
    "start": "352780",
    "end": "357990"
  },
  {
    "text": "So now I'd like to go through some of the features of boto three and kind of drill down starting",
    "start": "361460",
    "end": "366550"
  },
  {
    "text": "at the low level And let's go ahead and start with clients These are the boto core clients that are exposed to",
    "start": "366550",
    "end": "374180"
  },
  {
    "text": "developers through Boto 03 They're generated from Json service Description files and they provide low level access to the service",
    "start": "374180",
    "end": "383520"
  },
  {
    "text": "which typically maps one to one with all the operations that are available in the service",
    "start": "383520",
    "end": "387930"
  },
  {
    "text": "The one exception is that we actually snake case Our method names too make him more pythonic",
    "start": "389160",
    "end": "396600"
  },
  {
    "text": "So for example In S3 there's a call list buckets and in python the method name would be list",
    "start": "396650",
    "end": "403889"
  },
  {
    "text": "Underscore buckets Here's an example where we create a client for sqs",
    "start": "403900",
    "end": "410320"
  },
  {
    "text": "and then we call the list cues method passing in a parameter of Q name prefix",
    "start": "412360",
    "end": "418250"
  },
  {
    "text": "So we want all cues that start with the name test and that gives us a low level response and",
    "start": "418570",
    "end": "425000"
  },
  {
    "text": "a low level response is actually a python dictionary It's up to the developer how you want to handle",
    "start": "425000",
    "end": "432870"
  },
  {
    "text": "the response In this case I'm printing it out and I know that the response contains a key called QueueURLs because",
    "start": "432880",
    "end": "440600"
  },
  {
    "text": "the response looks something like this And so we will print out the first item in",
    "start": "440600",
    "end": "446670"
  },
  {
    "text": "that list Now there are two other features I'd like to talk",
    "start": "446670",
    "end": "452090"
  },
  {
    "text": "about that are in clients which are pagination and waiters",
    "start": "452090",
    "end": "457280"
  },
  {
    "text": "Pagination is useful when you have an operation which can be which can return pages of data and what clients",
    "start": "459060",
    "end": "467480"
  },
  {
    "text": "do is they help abstract that and actually handle pagination for you and yield individual pages that you can then",
    "start": "467480",
    "end": "474139"
  },
  {
    "text": "process These pages are also low level responses",
    "start": "474140",
    "end": "479190"
  },
  {
    "text": "That means again it's up to you to handle that response",
    "start": "480560",
    "end": "483630"
  },
  {
    "text": "So here's an example of pagination in Amazon S3 We have a list objects call on that operation is",
    "start": "485660",
    "end": "494900"
  },
  {
    "text": "paginated In order to get the pages we need to create",
    "start": "494900",
    "end": "500629"
  },
  {
    "text": "a paginated or get a paginator So here you can see we get a paginator using the methods name list objects and then we iterate",
    "start": "500640",
    "end": "509419"
  },
  {
    "text": "through each page and inside of each page There is a key called contents which is a list",
    "start": "509420",
    "end": "516770"
  },
  {
    "text": "and that list contains objects And so we iterated through each of the objects printing",
    "start": "517430",
    "end": "522620"
  },
  {
    "text": "out its key Now waiters actually expose a similar API but they're a",
    "start": "522620",
    "end": "530570"
  },
  {
    "text": "little bit different than pagination So with Amazon EC2 you may have an instance that",
    "start": "530570",
    "end": "536780"
  },
  {
    "text": "you start and it may take 30 seconds 60 seconds to start",
    "start": "536780",
    "end": "541590"
  },
  {
    "text": "During that time you can't make other certain calls to that instance",
    "start": "542560",
    "end": "546630"
  },
  {
    "text": "So what you want to do is you wanna wait until it's ready so at some point it's in a starting state or pending state",
    "start": "547910",
    "end": "553590"
  },
  {
    "text": "At some point it will hit running and when you're finished using it and you shut it down it will go to a terminated state",
    "start": "554310",
    "end": "559870"
  },
  {
    "text": "What waiters allow us to do is to wait so your code will block until that state has reached and",
    "start": "561760",
    "end": "568100"
  },
  {
    "text": "then your code will continue Here you can see we create an EC2 client",
    "start": "568100",
    "end": "572780"
  },
  {
    "text": "We get a waiter and you access waiters by name In this case the name is instance running and It's",
    "start": "573360",
    "end": "580880"
  },
  {
    "text": "also possible to get a list of all waiters and they're also listed in our documentation",
    "start": "580880",
    "end": "585570"
  },
  {
    "text": "And then a waiter object actually has a dot wait method where you can pass in parameters for the underlying",
    "start": "586560",
    "end": "593330"
  },
  {
    "text": "service operation In this case that operation I believe is described instances",
    "start": "593330",
    "end": "599040"
  },
  {
    "text": "And so we pass In instance IDs wait for this instance to have started",
    "start": "599360",
    "end": "604470"
  },
  {
    "text": "and be running and then we print out that the instances ready",
    "start": "604970",
    "end": "608690"
  },
  {
    "text": "So that's kind of an overview of the lower level part of Boto three clients",
    "start": "610060",
    "end": "615880"
  },
  {
    "text": "The next feature that I'd like to talk about his resource is and resource is air really a higher level",
    "start": "616460",
    "end": "623070"
  },
  {
    "text": "object oriented abstraction on top of the clients They are also generated from Json Files",
    "start": "623460",
    "end": "630279"
  },
  {
    "text": "These files are separate from the service description files these air resource descriptions and they're built on top of the",
    "start": "631040",
    "end": "636839"
  },
  {
    "text": "service description Like I said it provides an object oriented API and Resources themselves can kind of be split",
    "start": "636840",
    "end": "647610"
  },
  {
    "text": "into these categories Each of their members on methods can be split into",
    "start": "647880",
    "end": "653880"
  },
  {
    "text": "identifiers attributes actions references sub resources and collections and",
    "start": "653880",
    "end": "663130"
  },
  {
    "text": "we'll go into details on what all of these are in a moment But first let's take a look at what a resource",
    "start": "663130",
    "end": "669770"
  },
  {
    "text": "is And over the next few slides we're gonna go ahead and use thes three services and give you some examples",
    "start": "669780",
    "end": "677120"
  },
  {
    "text": "about uh of these different types of categories",
    "start": "677130",
    "end": "681390"
  },
  {
    "text": "So we'll be looking at Amazon EC2 Amazon S3 and Amazon SQS. In EC2 a resource",
    "start": "683560",
    "end": "691879"
  },
  {
    "text": "is something like an instance which takes an ID or has an ID in Amazon S3",
    "start": "691890",
    "end": "699330"
  },
  {
    "text": "A bucket or an object is an example of a resource in Amazon",
    "start": "699460",
    "end": "704900"
  },
  {
    "text": "SQS a queue is an example of a resource and",
    "start": "704900",
    "end": "710580"
  },
  {
    "text": "a queue has a URL Uh and these IDs and URLs and keys are actually",
    "start": "710590",
    "end": "720840"
  },
  {
    "text": "what we call identifiers now and identify our is something that uniquely defines that resource",
    "start": "720850",
    "end": "728580"
  },
  {
    "text": "So EC2 the instance has an ID and S3 object actually has two identifiers",
    "start": "729160",
    "end": "736270"
  },
  {
    "text": "And those are the bucket name and the objects key and a queue has a URL identifier",
    "start": "736860",
    "end": "744480"
  },
  {
    "text": "Now attributes are somewhat similar in that they are data members but they're actually lazy loaded and some examples of",
    "start": "746560",
    "end": "755950"
  },
  {
    "text": "them are the two instance type on S3's object",
    "start": "755950",
    "end": "763350"
  },
  {
    "text": "last modified date time and an Amazon SQS queue has",
    "start": "763490",
    "end": "769270"
  },
  {
    "text": "an attribute called attributes and here you can see we're accessing the number of seconds that a message will wait",
    "start": "769280",
    "end": "775829"
  },
  {
    "text": "before it gets processed in in That SQS queue",
    "start": "775840",
    "end": "780180"
  },
  {
    "text": "As I said they're lazy loaded So these air actually not loaded until you access them or explicitly load a resource using a load action which",
    "start": "781680",
    "end": "790410"
  },
  {
    "text": "we'll talk about later Next up our actions actions are essentially service operations and",
    "start": "790420",
    "end": "802180"
  },
  {
    "text": "what they do is they will actually pre fill some of the parameters for you",
    "start": "802180",
    "end": "806180"
  },
  {
    "text": "In this case Amazon EC2 an instance would have a create image action and that will call create image",
    "start": "807250",
    "end": "815300"
  },
  {
    "text": "uh the create image operation on the underlying service client",
    "start": "815310",
    "end": "819170"
  },
  {
    "text": "passing In the instance ID for you So there's no need to pass in any of the identifiers for each of these actions",
    "start": "820560",
    "end": "826890"
  },
  {
    "text": "And Amazon S3 object would have a put method And here you can see we set its body to the word Hello and Amazon SQS",
    "start": "827860",
    "end": "837610"
  },
  {
    "text": "The queue would have a receive messages action",
    "start": "837930",
    "end": "842270"
  },
  {
    "text": "And what's interesting about these actions is they can actually return one of three things",
    "start": "843040",
    "end": "847530"
  },
  {
    "text": "An action could return a low level response which is again a python dictionary which you're responsible for handling",
    "start": "848460",
    "end": "854970"
  },
  {
    "text": "It can also return a resource and it could return A list of resource is so for the bottom",
    "start": "857860",
    "end": "865390"
  },
  {
    "text": "Example received messages actually returns a list of message instances",
    "start": "865390",
    "end": "869870"
  },
  {
    "text": "Next up are references and my only example for that is an Amazon EC2 instance Sub net or an instance",
    "start": "872960",
    "end": "879910"
  },
  {
    "text": "VPC Essentially what a reference is is a related resource and",
    "start": "879910",
    "end": "886640"
  },
  {
    "text": "these can either be set or they could be none",
    "start": "886640",
    "end": "888770"
  },
  {
    "text": "Sub resources are somewhat similar to references except that they're actually a way to construct",
    "start": "892160",
    "end": "898720"
  },
  {
    "text": "Child resources so for example the EC2 service",
    "start": "898730",
    "end": "904620"
  },
  {
    "text": "can have instances so this allows us to construct an instance using its ID an Amazon S3 bucket can",
    "start": "904890",
    "end": "913580"
  },
  {
    "text": "have objects and this will allow us to construct a new object Instance using its key and Amazon SQS can have a",
    "start": "913580",
    "end": "923660"
  },
  {
    "text": "queue which is constructed using its URL and the final category",
    "start": "923660",
    "end": "929080"
  },
  {
    "text": "are collections - collections are groups of resources and they",
    "start": "929560",
    "end": "936420"
  },
  {
    "text": "allow you to iterate filter and manipulate resources so",
    "start": "936420",
    "end": "941980"
  },
  {
    "text": "going through our examples again in EC2 you would have a list of instances for that particular region and S3",
    "start": "941980",
    "end": "949450"
  },
  {
    "text": "If you have a bucket it can have a collection of objects And in SQS you have a collection of queues for",
    "start": "950250",
    "end": "958209"
  },
  {
    "text": "that particular region So let's take a look at some of this encode",
    "start": "958210",
    "end": "963190"
  },
  {
    "text": "Here's a quick example We create an S3 resource. And then we instance",
    "start": "964260",
    "end": "971519"
  },
  {
    "text": "an object and an object",
    "start": "971520",
    "end": "976540"
  },
  {
    "text": "using a bucket name and a key In this case it's my bucket and my key.jpeg",
    "start": "976790",
    "end": "983030"
  },
  {
    "text": "And then we print out the objects content type and its last modified daytime You can see the output at the bottom of the  slide",
    "start": "984060",
    "end": "990630"
  },
  {
    "text": "The content type is image JPEG and the daytime is actually a python daytime object",
    "start": "992250",
    "end": "998200"
  },
  {
    "text": "So you don't need to handle parsing of date strings or anything",
    "start": "998210",
    "end": "1002870"
  },
  {
    "text": "Now one interesting thing about this code example is only One remote request has been made and that remote request",
    "start": "1004630",
    "end": "1011560"
  },
  {
    "text": "is made at the first print statement So in S3 object has a load action and",
    "start": "1011570",
    "end": "1018840"
  },
  {
    "text": "when you access and attribute of a resource it will load it and cash the result",
    "start": "1018840",
    "end": "1026390"
  },
  {
    "text": "So the next print statement uses that cache Only one request has been made",
    "start": "1027560",
    "end": "1032480"
  },
  {
    "text": "Here's some examples of collections So here you can see we have an S3",
    "start": "1034760",
    "end": "1040709"
  },
  {
    "text": "bucket named Boto 3 It has an objects collection and it has a method",
    "start": "1040710",
    "end": "1047679"
  },
  {
    "text": "called all There should be pretty familiar If you've ever used jango it was very very similar",
    "start": "1047680",
    "end": "1053620"
  },
  {
    "text": "to jango Query sets We iterated through all of the objects and print the",
    "start": "1053620",
    "end": "1059530"
  },
  {
    "text": "objects key The second example is with SQS we go through all",
    "start": "1059530",
    "end": "1066520"
  },
  {
    "text": "of our cues but we filter them so that we only get cues that start with the letter A and",
    "start": "1066520",
    "end": "1073550"
  },
  {
    "text": "we print out the queues URL and the final example on this page is not available yet but it's coming very very soon",
    "start": "1073550",
    "end": "1080280"
  },
  {
    "text": "And these are batch actions and what these allow you to do is perform an action over a large group",
    "start": "1081020",
    "end": "1086750"
  },
  {
    "text": "of resources so in this example we have a bucket and the bucket has maybe hundreds of objects in",
    "start": "1086750",
    "end": "1093680"
  },
  {
    "text": "by calling delete on the objects collection we're able to do one remote operation to delete all of those",
    "start": "1093680",
    "end": "1102040"
  },
  {
    "text": "objects The alternative is to loop through and get each object and called delete on it which would potentially be hundreds",
    "start": "1102040",
    "end": "1109650"
  },
  {
    "text": "of calls So now I'd like to give you a quick demo",
    "start": "1109650",
    "end": "1115200"
  },
  {
    "text": "Um so here we are in a python shell We can import boto three and let's take a look",
    "start": "1120920",
    "end": "1129870"
  },
  {
    "text": "at some low level client calls so I will go ahead and create and EC2 client and we could",
    "start": "1129880",
    "end": "1144610"
  },
  {
    "text": "make a call to say describe instances",
    "start": "1144610",
    "end": "1147280"
  },
  {
    "text": "Now the response is a python dictionary It's gonna be big",
    "start": "1150060",
    "end": "1157940"
  },
  {
    "text": "You can see it contains response Metadata. It contains the request ID",
    "start": "1157940",
    "end": "1163929"
  },
  {
    "text": "The reservations um and information about each of the instances",
    "start": "1163930",
    "end": "1170300"
  },
  {
    "text": "So that's how you do a regular call but say we want to do a paginated call",
    "start": "1172960",
    "end": "1177679"
  },
  {
    "text": "So let's move to S3",
    "start": "1178860",
    "end": "1180630"
  },
  {
    "text": "We create an S3 client and then we want to get a paginated for the list objects call which we know",
    "start": "1184660",
    "end": "1190930"
  },
  {
    "text": "is paginated",
    "start": "1191200",
    "end": "1192080"
  },
  {
    "text": "So then we need to loop through each page So for page dot paginate and the",
    "start": "1201660",
    "end": "1210430"
  },
  {
    "text": "paginate call will actually take in any uh parameters",
    "start": "1210430",
    "end": "1216820"
  },
  {
    "text": "that the underlying operation takes So in this case we need to give it a bucket name",
    "start": "1216830",
    "end": "1220870"
  },
  {
    "text": "And then each page contains a key called contents and",
    "start": "1225460",
    "end": "1240309"
  },
  {
    "text": "so we'll print out all of the objects keys in this bucket you can see I have two files fruits",
    "start": "1240310",
    "end": "1247670"
  },
  {
    "text": "and sun.jpeg So if we want to take a look at how",
    "start": "1247680",
    "end": "1253700"
  },
  {
    "text": "this works with resources and collections we can actually",
    "start": "1253700",
    "end": "1259120"
  },
  {
    "text": "create an S3 resource instead of the low level client and",
    "start": "1259120",
    "end": "1266610"
  },
  {
    "text": "then loop through the objects collection of that bucket printing out the same information as we just did",
    "start": "1266610",
    "end": "1272090"
  },
  {
    "text": "And there you see the same information Except this time we used the high level resource and",
    "start": "1284160",
    "end": "1289580"
  },
  {
    "text": "high level resource is instead of low level clients",
    "start": "1289590",
    "end": "1295940"
  },
  {
    "text": "we can also get and put those objects So if we want to take a quick look at",
    "start": "1295940",
    "end": "1301420"
  },
  {
    "text": "one of those files we can do so",
    "start": "1301420",
    "end": "1306570"
  },
  {
    "text": "we'll take a look at the fruits file There is a get action on the object resource that",
    "start": "1311760",
    "end": "1319169"
  },
  {
    "text": "returns a low level dictionary Inside of that dictionary is a body which is a",
    "start": "1319170",
    "end": "1326559"
  },
  {
    "text": "stream that we can read So if we read this you can see the contents of the file are grapefruit",
    "start": "1326560",
    "end": "1333470"
  },
  {
    "text": "Now we can actually do something similar to write objects",
    "start": "1336860",
    "end": "1340110"
  },
  {
    "text": "So if we wanted to create a new file we can use the put action and the put action also",
    "start": "1341960",
    "end": "1350620"
  },
  {
    "text": "takes in a body So let's say hello reinvent. Now This also returned the",
    "start": "1350620",
    "end": "1363050"
  },
  {
    "text": "low level response here You can see that response And if we want a loop through and check what",
    "start": "1363050",
    "end": "1370580"
  },
  {
    "text": "files are available we'll see our new file in there",
    "start": "1370580",
    "end": "1372990"
  },
  {
    "text": "And there's our new one text",
    "start": "1391860",
    "end": "1393870"
  },
  {
    "text": "So that was a quick demo of some of the features that are available in Boto 3",
    "start": "1400660",
    "end": "1404470"
  },
  {
    "text": "We covered low level client calls We covered how to paginate",
    "start": "1406760",
    "end": "1411780"
  },
  {
    "text": "How to handle pages we covered Accessing and creating resources, in this case S3",
    "start": "1412560",
    "end": "1419600"
  },
  {
    "text": "objects and we covered iterating through collections and printing out information about those objects",
    "start": "1419600",
    "end": "1426139"
  },
  {
    "text": "So now I'd like to move on to a real world project example",
    "start": "1429160",
    "end": "1433500"
  },
  {
    "text": "And this example is a drop video Transcoder that runs",
    "start": "1435240",
    "end": "1440640"
  },
  {
    "text": "on your laptop So essentially what it does is you have a piece",
    "start": "1440650",
    "end": "1446860"
  },
  {
    "text": "of media on your laptop You can drop it into a folder It will go up to S3",
    "start": "1446860",
    "end": "1452970"
  },
  {
    "text": "It will get trance coded with Amazon Elastic Transcoder The output will be written back to S3",
    "start": "1454960",
    "end": "1462370"
  },
  {
    "text": "We will be notified that the file has completed and",
    "start": "1463660",
    "end": "1468910"
  },
  {
    "text": "then we're able to download it and play it back on all your devices",
    "start": "1468910",
    "end": "1471990"
  },
  {
    "text": "So if you want to take a look at the architecture we can start with Amazon Elastic Transcoder",
    "start": "1475160",
    "end": "1479559"
  },
  {
    "text": "It gets its input from Amazon S3 transcodes The file writes its output back to S3 and",
    "start": "1480560",
    "end": "1492060"
  },
  {
    "text": "then uses Amazon SNS to create a notification which we actually turn into an Amazon SQS message and were able",
    "start": "1492060",
    "end": "1500919"
  },
  {
    "text": "to pull for those messages in our application",
    "start": "1500920",
    "end": "1503180"
  },
  {
    "text": "So this is an almost complete architecture diagram of the application The one thing that we're missing is handling permissions between",
    "start": "1506050",
    "end": "1514460"
  },
  {
    "text": "all of the different services And for that we use something called IAM It's our identity and access management tool",
    "start": "1514470",
    "end": "1521570"
  },
  {
    "text": "It allows us to create a role that has access to the different services so that Elastic Transcoder can read",
    "start": "1522350",
    "end": "1528580"
  },
  {
    "text": "and write S3 objects and SMS messages or notifications",
    "start": "1528580",
    "end": "1535220"
  },
  {
    "text": "Sorry So here's the final architecture diagram and let's jump to",
    "start": "1535230",
    "end": "1544220"
  },
  {
    "text": "a quick demo showing us off",
    "start": "1544220",
    "end": "1546690"
  },
  {
    "text": "Here we have the sample app and the APP is actually available on git hub There will be links at the end of the talk",
    "start": "1554960",
    "end": "1560500"
  },
  {
    "text": "so you guys can check it out Run it on your own machine",
    "start": "1560500",
    "end": "1563390"
  },
  {
    "text": "We'll start it up and it will start pulling a directory for new files",
    "start": "1566260",
    "end": "1571290"
  },
  {
    "text": "Here you can see I have three directories open Hopefully you can see that the top directory contains a",
    "start": "1573160",
    "end": "1582430"
  },
  {
    "text": "sample Matrosskaya file which is not a super common format",
    "start": "1582440",
    "end": "1586990"
  },
  {
    "text": "And then I have an input folder and an output folder What we're going to do is we're gonna drag this file down into the input folder and then we're gonna",
    "start": "1587460",
    "end": "1597470"
  },
  {
    "text": "take a look and see if the script finds it here It found the file",
    "start": "1597470",
    "end": "1601690"
  },
  {
    "text": "It's going to upload it to S3 And now it started transcoding the video",
    "start": "1602660",
    "end": "1607370"
  },
  {
    "text": "And while that's happening in the background we're going to continue talking about the application",
    "start": "1608760",
    "end": "1612389"
  },
  {
    "text": "So Amazon Elastic Transcoder requires a little bit of set up We've already talked about all the different services that are",
    "start": "1618160",
    "end": "1623409"
  },
  {
    "text": "involved When you set it up you actually need an S3 bucket for input and output",
    "start": "1623410",
    "end": "1629380"
  },
  {
    "text": "You need an Amazon SNS topic for notifications and IAM role to glue it all together",
    "start": "1629390",
    "end": "1634990"
  },
  {
    "text": "You also need to set up a pipeline and then you can submit jobs to that pipeline which is what our application just did so before we get too far",
    "start": "1636460",
    "end": "1648250"
  },
  {
    "text": "into that Let's take a look at the session and the connection",
    "start": "1648250",
    "end": "1652580"
  },
  {
    "text": "So in all the previous examples we have just created clients we've created resource is we haven't really thought about",
    "start": "1654160",
    "end": "1660420"
  },
  {
    "text": "what it means to have a session Now session stores state and configuration such as credentials",
    "start": "1660420",
    "end": "1668750"
  },
  {
    "text": "a default region and other information And when you create clients and you create resources",
    "start": "1668760",
    "end": "1676300"
  },
  {
    "text": "a session is actually created for you A default session And if you want you can actually import boto three",
    "start": "1677260",
    "end": "1683169"
  },
  {
    "text": "session and manage your own sessions So in these code samples when I called boto three",
    "start": "1683180",
    "end": "1689470"
  },
  {
    "text": "dot client it's creating a default session and what I'm calling about",
    "start": "1689470",
    "end": "1694530"
  },
  {
    "text": "Boto 3 dot resource It's continuing to use that default session that was created",
    "start": "1694530",
    "end": "1698280"
  },
  {
    "text": "Now S3 uploading and downloading are somewhat similar we're going to go through some examples these examples",
    "start": "1703060",
    "end": "1710820"
  },
  {
    "text": "They're gonna be how to create a bucket how to get a bucket how to upload files how to download",
    "start": "1710820",
    "end": "1715960"
  },
  {
    "text": "files It's somewhat similar to what I did in my demo",
    "start": "1715960",
    "end": "1719290"
  },
  {
    "text": "Here you get an S3 resource and you're able to call to create bucket action on that resource and",
    "start": "1721260",
    "end": "1729500"
  },
  {
    "text": "give it a name This returns a new bucket resource",
    "start": "1729500",
    "end": "1732970"
  },
  {
    "text": "If that bucket already exists you can either call create bucket again because it's item potent",
    "start": "1735360",
    "end": "1741700"
  },
  {
    "text": "Or you can create a bucket instance locally without making a request by doing S3 bucket and giving it",
    "start": "1741710",
    "end": "1748840"
  },
  {
    "text": "a name to actually upload the file we can open the",
    "start": "1748840",
    "end": "1756100"
  },
  {
    "text": "file with a context manager and then we can call put with the body as that file is very similar",
    "start": "1756100",
    "end": "1763500"
  },
  {
    "text": "to what I just demoed in the terminal Except you're actually reading from a binary file downloading a",
    "start": "1763500",
    "end": "1772799"
  },
  {
    "text": "similar here We're concerned with finding the right bucket finding the right",
    "start": "1772800",
    "end": "1777980"
  },
  {
    "text": "object and actually downloading the contents of that object",
    "start": "1777980",
    "end": "1782970"
  },
  {
    "text": "Here's an example where we get a necessary resource We can iterate through all of the buckets and for",
    "start": "1785360",
    "end": "1791350"
  },
  {
    "text": "each bucket iterate through all of the objects and print out the bucket name and the objects key again",
    "start": "1791350",
    "end": "1801960"
  },
  {
    "text": "If you know the buckets name and the objects key you can also do this Where you in obstantiate a bucket",
    "start": "1801970",
    "end": "1807880"
  },
  {
    "text": "obstantiate an object and then call the get action on that object which returns a low level response",
    "start": "1807880",
    "end": "1813790"
  },
  {
    "text": "That response has a body It's a stream which you can read",
    "start": "1814260",
    "end": "1819320"
  },
  {
    "text": "And then after running this code the entire contents of the file will be in the variable data for Amazon",
    "start": "1819460",
    "end": "1829180"
  },
  {
    "text": "SNS and Amazon SQS We're interested in creating and getting topics creating and getting",
    "start": "1829180",
    "end": "1836120"
  },
  {
    "text": "queues subscribing a cue to an SNS topic and then checking for messages in that queue",
    "start": "1836120",
    "end": "1842870"
  },
  {
    "text": "Hopefully you'll start to see a pattern here for SNS You can create a topic by name and you can",
    "start": "1846360",
    "end": "1854390"
  },
  {
    "text": "also instantiate a topic but you have to use It's ARN to instantiate it",
    "start": "1854390",
    "end": "1859540"
  },
  {
    "text": "For SQS it's very similar You can call create queue and you give it a queue name and SQS actually exposes an action as a",
    "start": "1862280",
    "end": "1871760"
  },
  {
    "text": "convenience to get a queue by name whereby you can pass in the queue name and get a queue resource back",
    "start": "1871760",
    "end": "1877200"
  },
  {
    "text": "Alternatively if you know the ARN you can also just pass that in in order to get messages into a",
    "start": "1878360",
    "end": "1888870"
  },
  {
    "text": "queue from a topic you need to subscribe that topic that queue to the topic",
    "start": "1888870",
    "end": "1893190"
  },
  {
    "text": "Here we make a call to subscribe We set the protocol to SQS and we set",
    "start": "1894060",
    "end": "1899770"
  },
  {
    "text": "the endpoint The queues ARN. For IAM we're interested in creating",
    "start": "1899770",
    "end": "1907669"
  },
  {
    "text": "a new role and setting up a custom policy that allows these services to talk to each other",
    "start": "1907670",
    "end": "1913290"
  },
  {
    "text": "Here's an example of how you create a role You give it a role name and an assume a",
    "start": "1915060",
    "end": "1920260"
  },
  {
    "text": "role policy Now these policy documents are actually quite large They won't fit on these slides",
    "start": "1920260",
    "end": "1926140"
  },
  {
    "text": "But if you actually go to github and check out the project you can take a look at all of the policies and how we've set this up",
    "start": "1926860",
    "end": "1932889"
  },
  {
    "text": "Additionally we also need to set a custom policy and this policy is defined using a name",
    "start": "1936260",
    "end": "1942419"
  },
  {
    "text": "In this case our name is Transcoder And here again we have ah large policy document which",
    "start": "1942530",
    "end": "1949420"
  },
  {
    "text": "you can see in our source code on Github",
    "start": "1949430",
    "end": "1952480"
  },
  {
    "text": "Once all of that is set up we can create a new pipeline and Elastic Transcoder and when creating it",
    "start": "1955360",
    "end": "1963140"
  },
  {
    "text": "we need to pass in information about the other Resources that we just created once the pipeline is",
    "start": "1963150",
    "end": "1970220"
  },
  {
    "text": "set up and available were able to submit jobs and transcode files so here we actually don't have a",
    "start": "1970220",
    "end": "1979260"
  },
  {
    "text": "resource or a high level resource for Elastic Transcoder So instead we're gonna use a low level client",
    "start": "1979270",
    "end": "1985790"
  },
  {
    "text": "Here we create the client and we call the Create pipeline method passing in the name and input and output",
    "start": "1987860",
    "end": "1994930"
  },
  {
    "text": "bucket or role and any other information that's required to create a pipeline",
    "start": "1994930",
    "end": "2000380"
  },
  {
    "text": "Once that's created we can actually submit jobs And here we're submitting jobs using the low level response",
    "start": "2002160",
    "end": "2009760"
  },
  {
    "text": "which contains the pipeline ID from the previous call And then we have some information about the input file",
    "start": "2009910",
    "end": "2016390"
  },
  {
    "text": "and a list of outputs in our example here we actually only have one output and that's using the system",
    "start": "2017060",
    "end": "2023529"
  },
  {
    "text": "Web preset which will take a look at in a second",
    "start": "2023530",
    "end": "2026779"
  },
  {
    "text": "So all that's left now is to add a little bit of glue We need a directory watcher We need a main function",
    "start": "2030630",
    "end": "2036570"
  },
  {
    "text": "The main function will upload test three start jobs pull SQS and download and possibly delete and clean up any",
    "start": "2037720",
    "end": "2047920"
  },
  {
    "text": "data in the cloud The sample application is available at this URL and these",
    "start": "2047920",
    "end": "2055720"
  },
  {
    "text": "slides are available on slide share or will be shortly so you can look it up there And now let's",
    "start": "2055720",
    "end": "2065570"
  },
  {
    "text": "do a quick demo head back to the other laptop And here you can see the video began transcoding",
    "start": "2065570",
    "end": "2075880"
  },
  {
    "text": "While it was transcoding it was still checking for new files",
    "start": "2077160",
    "end": "2081990"
  },
  {
    "text": "So it took maybe a minute to transcode and then completed",
    "start": "2082360",
    "end": "2087069"
  },
  {
    "text": "If we go back to our folders you can see here is the input And here is the output",
    "start": "2091560",
    "end": "2096570"
  },
  {
    "text": "Many of you have probably seen this video So now it plays back in quick time",
    "start": "2104630",
    "end": "2110589"
  },
  {
    "text": "It's an MP4 file Very standard format",
    "start": "2110600",
    "end": "2113590"
  },
  {
    "text": "So there you go Big Buck Bunny",
    "start": "2128820",
    "end": "2130890"
  },
  {
    "text": "So that was a demo of the transcoding application It's a good way to get started with boto three",
    "start": "2136360",
    "end": "2142790"
  },
  {
    "text": "You should definitely check it out An in review of what we covered was an overview of the",
    "start": "2142800",
    "end": "2150549"
  },
  {
    "text": "Boto project a little bit of history about boto and its current version and sort of where we're headed with",
    "start": "2150550",
    "end": "2158130"
  },
  {
    "text": "boto three which is a developer preview right now and can be checked out from Git Hub and from can",
    "start": "2158130",
    "end": "2166750"
  },
  {
    "text": "be pip installed We also talked about a real world project example which",
    "start": "2166750",
    "end": "2173060"
  },
  {
    "text": "you can use toe help learn how to use boto three and here A couple of links you can Pip install boto three",
    "start": "2173060",
    "end": "2180770"
  },
  {
    "text": "you can find us on github and you can find the sample on github Well and that's basically it",
    "start": "2182160",
    "end": "2195980"
  },
  {
    "text": "Thanks a lot for coming",
    "start": "2196460",
    "end": "2198200"
  }
]