[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "text": "hello folks I'm Dave I'm a specialist Solutions Architect at AWS covering",
    "start": "0",
    "end": "5400"
  },
  {
    "text": "security and compliance across Europe Middle Eastern Africa but security geek is kind of more succinct I've been at",
    "start": "5400",
    "end": "12389"
  },
  {
    "text": "AWS for just over two years now and being doing security for a couple of",
    "start": "12389",
    "end": "17850"
  },
  {
    "text": "decades and a bit longer than that and my name's James Brown I'm the VP of",
    "start": "17850",
    "end": "23100"
  },
  {
    "text": "technology solutions at alert logic X AWS and work very closely still with the",
    "start": "23100",
    "end": "29550"
  },
  {
    "text": "guys at AWS so what we've got for you today is a quick introduction to what we",
    "start": "29550",
    "end": "36329"
  },
  {
    "start": "32000",
    "end": "32000"
  },
  {
    "text": "consider service architectures to be a little piece about threat modeling and",
    "start": "36329",
    "end": "41820"
  },
  {
    "text": "how we go about looking at threats from the point of view of service particularly just a piece about easy",
    "start": "41820",
    "end": "49020"
  },
  {
    "text": "wins on access and permissions constraint and then we get into the really fun new stuff so James is going",
    "start": "49020",
    "end": "57360"
  },
  {
    "text": "to talk a bit on some work he's been doing about wrapping API wrapping lambda",
    "start": "57360",
    "end": "64860"
  },
  {
    "text": "functions to do API filtering I'll be following up with a piece on actually",
    "start": "64860",
    "end": "71700"
  },
  {
    "text": "using API gateway in place of API Service endpoints which is a piece of",
    "start": "71700",
    "end": "77700"
  },
  {
    "text": "work that I then figured out could be generalized and then after just wrapping",
    "start": "77700",
    "end": "83100"
  },
  {
    "text": "that up there's some interesting research that I'd like to give you a sneak peek of afterwards so starting off",
    "start": "83100",
    "end": "90720"
  },
  {
    "text": "with what service architectures are all about everyone's been going on about serverless architectures in the last",
    "start": "90720",
    "end": "96570"
  },
  {
    "start": "95000",
    "end": "95000"
  },
  {
    "text": "couple of years especially since we released lambda but to be perfectly honest there are a long way from new I",
    "start": "96570",
    "end": "102509"
  },
  {
    "text": "mean s3 is essentially service in and of its nature and hey that's been around for ten years now so if you're familiar",
    "start": "102509",
    "end": "110100"
  },
  {
    "text": "with the shared responsibility model that we have please raise your hand if you are great that's a large number if",
    "start": "110100",
    "end": "118710"
  },
  {
    "text": "you haven't come across it yet then please take a look at things like the AWS risk and compliance white white",
    "start": "118710",
    "end": "124890"
  },
  {
    "text": "paper or the AWS security best practices white paper that give you a nice diagram",
    "start": "124890",
    "end": "130259"
  },
  {
    "text": "of how the services in AWS stratify from hypervisor",
    "start": "130259",
    "end": "135980"
  },
  {
    "text": "up to your application and data and wear responsibility demarcations are in that",
    "start": "135980",
    "end": "141350"
  },
  {
    "text": "or indeed that a there's a few videos on youtube of some of us including me doing",
    "start": "141350",
    "end": "146780"
  },
  {
    "text": "presentations on how they go in in more detail on how this fits across our different infrastructure and container",
    "start": "146780",
    "end": "155209"
  },
  {
    "text": "and abstract services so serverless environments normally are abstract",
    "start": "155209",
    "end": "160340"
  },
  {
    "text": "services in that you the customer don't get to have HBase server instance that's",
    "start": "160340",
    "end": "166100"
  },
  {
    "text": "sitting there running Linux or whatever that you can SSH into and control directly you wind up dealing with it",
    "start": "166100",
    "end": "171980"
  },
  {
    "text": "through an API or through some or through some some other kind of interface and we look after all the",
    "start": "171980",
    "end": "180170"
  },
  {
    "text": "underlying stuff so that you don't have to so the idea about service is that you",
    "start": "180170",
    "end": "186290"
  },
  {
    "text": "guys just need to worry about the business functionality and purpose that you're going to be turning the service",
    "start": "186290",
    "end": "191570"
  },
  {
    "text": "to and we look after what people who want to deal with things at that level",
    "start": "191570",
    "end": "196580"
  },
  {
    "text": "would consider the dull stuff so I've also it's also been suggested I just",
    "start": "196580",
    "end": "202519"
  },
  {
    "text": "touch on what service isn't so if you can SSH into it it's not service",
    "start": "202519",
    "end": "208640"
  },
  {
    "text": "although you could potentially do something but whereby you could do that with a lambda function but it would be",
    "start": "208640",
    "end": "214250"
  },
  {
    "text": "horrible and yeah essentially we look",
    "start": "214250",
    "end": "219980"
  },
  {
    "text": "after it hang on",
    "start": "219980",
    "end": "225230"
  },
  {
    "text": "thank you this slide was current until six and a half hours ago pace of",
    "start": "225230",
    "end": "232820"
  },
  {
    "start": "226000",
    "end": "226000"
  },
  {
    "text": "innovation and all that and it's probably going to be even more out of date this time tomorrow but the idea",
    "start": "232820",
    "end": "238790"
  },
  {
    "text": "here is this is most of the market amost of the services that we offer that I'd call service today",
    "start": "238790",
    "end": "245060"
  },
  {
    "text": "I had actually missed trusted advisor off of this but as you can see there's 40 of them now in the much-vaunted 70",
    "start": "245060",
    "end": "252829"
  },
  {
    "text": "something services that we talked about offering this means that more than half of them are effectively service which is",
    "start": "252829",
    "end": "259880"
  },
  {
    "text": "an interesting point worth to note the other thing of course that you get a lot in service architectures and this is",
    "start": "259880",
    "end": "266180"
  },
  {
    "text": "just a a nice architecture I lifted from a reinvent presentation from last year is you get a lot of API level communication",
    "start": "266180",
    "end": "273740"
  },
  {
    "start": "270000",
    "end": "270000"
  },
  {
    "text": "with external services as well so here we've just got a an IOT monitoring and",
    "start": "273740",
    "end": "280340"
  },
  {
    "text": "and chat bot service that's talking out via api's to twily oh and and slack and",
    "start": "280340",
    "end": "289550"
  },
  {
    "text": "also using other things so yeah you've got you've got Cabana in elastic hash",
    "start": "289550",
    "end": "295099"
  },
  {
    "text": "and so forth going on in there so looking at the world through security",
    "start": "295099",
    "end": "300710"
  },
  {
    "text": "tinted glasses as I do I always start thinking so here's an architecture now what can go wrong with",
    "start": "300710",
    "end": "306680"
  },
  {
    "text": "it how could a bad guy break it so this is where we get into threat modeling a",
    "start": "306680",
    "end": "311930"
  },
  {
    "text": "bit now as Bruce Schneier and other luminaries have accurately said over the",
    "start": "311930",
    "end": "317330"
  },
  {
    "text": "years the human brain is awfully bad at doing the threat and risk analysis",
    "start": "317330",
    "end": "323380"
  },
  {
    "text": "fundamentally and I think this is borne out by the fact there's a considerable number of frameworks actually designed",
    "start": "323380",
    "end": "330020"
  },
  {
    "text": "for doing this precise thing there's a MSC thesis I read a year or so ago by",
    "start": "330020",
    "end": "336620"
  },
  {
    "text": "Dutch chat named Ann I Anita from the University of Twente and he it serves as",
    "start": "336620",
    "end": "341990"
  },
  {
    "text": "gazetteer if you like of threat and risk analysis standard methodologies he came",
    "start": "341990",
    "end": "347150"
  },
  {
    "text": "up with 27 of them there were a couple in there that I hadn't heard of before but there's a couple I knew about that",
    "start": "347150",
    "end": "353630"
  },
  {
    "text": "he hadn't got in his paper so we use a whole bunch of these things stride read",
    "start": "353630",
    "end": "358759"
  },
  {
    "text": "others there's an interesting paper worth looking out if you haven't seen it already every so often some of our guys",
    "start": "358759",
    "end": "365990"
  },
  {
    "text": "do actually get to publish papers in learning journals and Chris Newcomb and",
    "start": "365990",
    "end": "371690"
  },
  {
    "text": "others did a paper that turned up last year in the communications of the ACM on AWS is use of the TLA plus modeling",
    "start": "371690",
    "end": "379550"
  },
  {
    "text": "language for doing formal modeling and analysis of our particular security",
    "start": "379550",
    "end": "384560"
  },
  {
    "text": "critical critical bits of code so this means that we actually kind of walk up to the line of doing formal proof in our",
    "start": "384560",
    "end": "391820"
  },
  {
    "text": "particular insecurity critical aspects of our environments so if you're doing threat modeling you identified who the",
    "start": "391820",
    "end": "399139"
  },
  {
    "text": "bad guys are how the bad guys might get at your environment probabilities of them doing nefarious",
    "start": "399139",
    "end": "405259"
  },
  {
    "text": "things and you do stuff to try and stop them so looking at an 8 a generic AWS",
    "start": "405259",
    "end": "414020"
  },
  {
    "start": "411000",
    "end": "411000"
  },
  {
    "text": "service you've got potential attack vectors vectors at application level and",
    "start": "414020",
    "end": "419150"
  },
  {
    "text": "at API level ultimately if it takes input it's potentially an attack vector so we've got application stuff API stuff",
    "start": "419150",
    "end": "427550"
  },
  {
    "text": "and let's look at what the outcome also of a successful attack would look like",
    "start": "427550",
    "end": "433060"
  },
  {
    "text": "disruption the service is an obvious successful attack reduction in responsiveness your classic DDoS but",
    "start": "433060",
    "end": "440120"
  },
  {
    "text": "also think about if the service could be used rather than a compromised itself",
    "start": "440120",
    "end": "445580"
  },
  {
    "text": "being compromised itself being a conduit of an attack to some other internal",
    "start": "445580",
    "end": "452000"
  },
  {
    "text": "vulnerable system so let's say for example if you were to put a message on",
    "start": "452000",
    "end": "457490"
  },
  {
    "text": "an sqs queue that you in the anticipate nests in it in the anticipation of an",
    "start": "457490",
    "end": "464300"
  },
  {
    "text": "ec2 instance that may have a vulnerability in its consuming that message and being compromised as a",
    "start": "464300",
    "end": "469729"
  },
  {
    "text": "result and this is where you get into kind of an API level look at almost an",
    "start": "469729",
    "end": "476449"
  },
  {
    "text": "equivalent of the OWASP top 10 in terms of cross-site scripting SQL injection all that stuff so let's look at our API",
    "start": "476449",
    "end": "484819"
  },
  {
    "start": "482000",
    "end": "482000"
  },
  {
    "text": "endpoints to begin with and they're actually looking pretty reasonable so",
    "start": "484819",
    "end": "489889"
  },
  {
    "text": "they are large they're scalable but they're finite in size from the point of",
    "start": "489889",
    "end": "496759"
  },
  {
    "text": "view of confidentiality integrity and availability we use HTTP over using s to",
    "start": "496759",
    "end": "502279"
  },
  {
    "text": "n so that gives us TLS 1.2 we scale them so we've so that's our confident",
    "start": "502279",
    "end": "508089"
  },
  {
    "text": "confidentiality we scale them so we've got our availability we also rate monitor them and there's actually good",
    "start": "508089",
    "end": "515300"
  },
  {
    "text": "reason why you want to have a separate development and test environment from your production environment because if",
    "start": "515300",
    "end": "521268"
  },
  {
    "text": "you write yourself a bug that causes you to start hammering on our API will wind up throttling your ability from that",
    "start": "521269",
    "end": "527660"
  },
  {
    "text": "account to go making API calls we have signature v4 which gives us",
    "start": "527660",
    "end": "534350"
  },
  {
    "text": "by the fact that you're put back that you're signing your API requests with your secret access key that gives us",
    "start": "534350",
    "end": "541250"
  },
  {
    "text": "strong integrity and strong non-repudiation we're looking pretty pretty reasonably",
    "start": "541250",
    "end": "546410"
  },
  {
    "text": "set here in band ISM is more interesting so I just picks a selection of service",
    "start": "546410",
    "end": "553730"
  },
  {
    "text": "services here and obviously a bunch of these have means of triggering lambda",
    "start": "553730",
    "end": "560030"
  },
  {
    "text": "functions and in terms of the kinds of messages and message sizes you can pass into them some of them take they have",
    "start": "560030",
    "end": "567650"
  },
  {
    "text": "the ability to take some pretty big messages and objects so plenty enough scope here to go embedding badness in so",
    "start": "567650",
    "end": "575960"
  },
  {
    "text": "what are we going to do about this first thing easy win ensure that only",
    "start": "575960",
    "end": "582020"
  },
  {
    "text": "the good guys have the ability to get at your services start with I am we all",
    "start": "582020",
    "end": "587090"
  },
  {
    "start": "585000",
    "end": "585000"
  },
  {
    "text": "know how to actually go using I am and its conditions to constrain things based",
    "start": "587090",
    "end": "593300"
  },
  {
    "text": "on source IP address time of day user details obviously and also limit the",
    "start": "593300",
    "end": "599660"
  },
  {
    "text": "scope of what can be launched so it's also worth ensuring if you're not",
    "start": "599660",
    "end": "605180"
  },
  {
    "text": "already doing this we really like the idea of ensuring that service access",
    "start": "605180",
    "end": "611000"
  },
  {
    "text": "anything privileged really can only happen from a roles rather than a user or group reason being if you've got if",
    "start": "611000",
    "end": "619280"
  },
  {
    "text": "you're assuming a role in order to do anything interesting then this brings our secure token service into play which",
    "start": "619280",
    "end": "625970"
  },
  {
    "text": "means that in order to get yourself into a context whereby you can do something",
    "start": "625970",
    "end": "632780"
  },
  {
    "text": "interesting you actually wind up using ephemeral credentials rather than persistent ones",
    "start": "632780",
    "end": "637840"
  },
  {
    "text": "so we've probably all met the software engineer who has hardwired credentials into a script and then gone and sent",
    "start": "637840",
    "end": "645890"
  },
  {
    "text": "that script to somewhere like github and suddenly found that his account is mining Bitcoin if he's using if he's own",
    "start": "645890",
    "end": "653720"
  },
  {
    "text": "only able to use a role and the ephemeral credentials that it provides to actually do anything privileged then",
    "start": "653720",
    "end": "661160"
  },
  {
    "text": "that gives him no incentive to go hardwiring anything into his code and thereby closing the door on that",
    "start": "661160",
    "end": "667100"
  },
  {
    "text": "particular meThe method of compromise also if you",
    "start": "667100",
    "end": "672620"
  },
  {
    "text": "start actually using cross account access and multi account environments",
    "start": "672620",
    "end": "678290"
  },
  {
    "text": "and for this there's a video that we did earlier in the year from the UK security",
    "start": "678290",
    "end": "684050"
  },
  {
    "text": "Roadshow which talks a bit about a reference architecture we have multi account environments then you can",
    "start": "684050",
    "end": "691339"
  },
  {
    "text": "actually get something close to mandatory access controls as well as limiting the scope of any issues that",
    "start": "691339",
    "end": "697250"
  },
  {
    "text": "may arise in a given single account in the context of cross account and our access and multi account architectures I",
    "start": "697250",
    "end": "704480"
  },
  {
    "text": "also commend to you two other sessions here at reinvent sa c31 9 which I",
    "start": "704480",
    "end": "712010"
  },
  {
    "text": "believe was yesterday and sa c32 Oh which is coming up so these are",
    "start": "712010",
    "end": "717050"
  },
  {
    "text": "specifically on cross account architectures recommend having a look at them so I am see a first port of call",
    "start": "717050",
    "end": "723970"
  },
  {
    "text": "also while it's some still a large list you can potentially do some limitation",
    "start": "723970",
    "end": "730760"
  },
  {
    "text": "on your service access based on weather us at whether a call is coming in from an Amazon address or not and we will",
    "start": "730760",
    "end": "737060"
  },
  {
    "text": "actually be making reference and use of this JSON document later also you have",
    "start": "737060",
    "end": "743240"
  },
  {
    "text": "the means in I am to review details of your roles and users and groups and see when specific permissions were last used",
    "start": "743240",
    "end": "749750"
  },
  {
    "text": "so if you've perhaps made a roll slightly overly permissive if if a",
    "start": "749750",
    "end": "756560"
  },
  {
    "text": "particular permission hasn't been triggered for a number of months then chances are you're probably going to be able to drop it so at this point I will",
    "start": "756560",
    "end": "765260"
  },
  {
    "text": "hand over to James to talk a bit about some of the logic work thank you very much",
    "start": "765260",
    "end": "770589"
  },
  {
    "text": "ok so as I said my name is James Brown which I paid none of you fill we've seen James Brown in Vegas but you are an",
    "start": "770589",
    "end": "777500"
  },
  {
    "text": "apology's if that's the reason why you came here and so I work from logic we've been securing a diverse workloads",
    "start": "777500",
    "end": "784010"
  },
  {
    "text": "for about four years now and this whole piece like all great things in life",
    "start": "784010",
    "end": "789019"
  },
  {
    "text": "really came up after having a conversation and a beer with David after one of the AWS events that was run last",
    "start": "789019",
    "end": "795529"
  },
  {
    "text": "year so all the attendees went into a room and they got told about Internet of",
    "start": "795529",
    "end": "800540"
  },
  {
    "text": "Things and service architectures and came out all very excited and we had a couple of very very large UK brand names",
    "start": "800540",
    "end": "806990"
  },
  {
    "text": "come out and saying okay this is great I can really see how this can help it's gonna help you get around scalability problems but we've got security and",
    "start": "806990",
    "end": "814850"
  },
  {
    "text": "compliance issues so how we're gonna run this in a secure way how we're gonna meet the compliance requirements that we",
    "start": "814850",
    "end": "820130"
  },
  {
    "text": "have and when you look to the issues that they were facing they really split into two buckets one was how do they",
    "start": "820130",
    "end": "826910"
  },
  {
    "text": "effectively understand what's flowing into the system how they inspect the data that's flowing in and secondly how",
    "start": "826910",
    "end": "832700"
  },
  {
    "text": "they're going to collect the logs from the really the operating systems running it this we're going to talk about how we",
    "start": "832700",
    "end": "839810"
  },
  {
    "text": "can sort of examine the input and how we can sanitize that the the problem is the logs is a greater problem I mean if you",
    "start": "839810",
    "end": "845330"
  },
  {
    "text": "have compliance is telling you that you need less logs then you are going to struggle on service architectures that may be forcing you back into an older",
    "start": "845330",
    "end": "853010"
  },
  {
    "text": "route of doing things so what we did is we fired up a research project so you",
    "start": "853010",
    "end": "858620"
  },
  {
    "text": "know we'd like to understand you know what's hitting our a SS customers but also we want to understand really where",
    "start": "858620",
    "end": "863720"
  },
  {
    "text": "our AWS customers are going so this was a research project that we that we started up to try and understand okay",
    "start": "863720",
    "end": "869480"
  },
  {
    "text": "how can we look to start to secure service workloads so let's start with",
    "start": "869480",
    "end": "874880"
  },
  {
    "start": "874000",
    "end": "874000"
  },
  {
    "text": "lambda lambda is a great place to start it's one of the most mature pieces of service infrastructure it can kind of",
    "start": "874880",
    "end": "881420"
  },
  {
    "text": "take input from anywhere you can do a bunch of stuff with it and then you can push the output pretty well anywhere you",
    "start": "881420",
    "end": "887780"
  },
  {
    "text": "want you've got huge amount of control and you don't have to worry about all the infrastructure that sits underneath",
    "start": "887780",
    "end": "893720"
  },
  {
    "text": "it what could possibly go wrong you can write insecure code in any language that",
    "start": "893720",
    "end": "899810"
  },
  {
    "text": "you pick that's what can start to go wrong okay so you're gonna have this",
    "start": "899810",
    "end": "904910"
  },
  {
    "text": "gloriously architected service architecture it's going to pick things up and then it's going to start running through the code that you're doing and",
    "start": "904910",
    "end": "911300"
  },
  {
    "text": "this is where problems can start what you do have to remember the service",
    "start": "911300",
    "end": "916340"
  },
  {
    "text": "architectures is just because you haven't necessarily got a website just because you know necessarily running on iis or apache just because you've lost a",
    "start": "916340",
    "end": "923540"
  },
  {
    "text": "lot of these things does not mean that you can really start to sort of forget about the security pieces you know as I",
    "start": "923540",
    "end": "930860"
  },
  {
    "text": "said you need to look at these you need to understand how you their model threats you can have two ones stand how people can possibly attack you",
    "start": "930860",
    "end": "937570"
  },
  {
    "text": "so let's take security rule number one sanitize user input so yes it's a very",
    "start": "937570",
    "end": "947529"
  },
  {
    "text": "amusing picture of a car with a sink hole injection attack taped to the front of it however think about it you guys",
    "start": "947529",
    "end": "957130"
  },
  {
    "text": "all here cuz you'd like a want to do service architecture as you are if you had to write a national system of",
    "start": "957130",
    "end": "962529"
  },
  {
    "text": "statewide system if we're in the US for example a toll road or for example you know speeding fines and so forth isn't",
    "start": "962529",
    "end": "969970"
  },
  {
    "text": "that just a perfect use case for service architectures I'm going to take all these photos from all these different",
    "start": "969970",
    "end": "975010"
  },
  {
    "text": "cameras I'm going to throw them in an s3 bucket I'm gonna pull them out the s3 bucket I'm gonna process it I'm gonna do",
    "start": "975010",
    "end": "981010"
  },
  {
    "text": "something with it and then I'm going to check this with a back-end system it's a perfect use case for a service service",
    "start": "981010",
    "end": "987790"
  },
  {
    "text": "infrastructure so so that's really kind of what we were starting to try and look at how do we help in this kind of case",
    "start": "987790",
    "end": "994360"
  },
  {
    "start": "989000",
    "end": "989000"
  },
  {
    "text": "so if you take the world simplest that we're gonna have an s3 bucket that all these cameras are throwing photos of you",
    "start": "994360",
    "end": "999519"
  },
  {
    "text": "know cars into there's gonna be a lambda function picking them out doing some stuff grabbing that license plate off it",
    "start": "999519",
    "end": "1005250"
  },
  {
    "text": "and then it's gonna be calling a back-end system and as they've said the back-end system could well not be yours",
    "start": "1005250",
    "end": "1011370"
  },
  {
    "text": "if you think actually about this use case the chances are that you're not going to have the system that has all",
    "start": "1011370",
    "end": "1016709"
  },
  {
    "text": "the number plates and names and addresses that's going to be a third party system most likely run by the government and at that point you may",
    "start": "1016709",
    "end": "1023370"
  },
  {
    "text": "find it's a system that's never really been exposed to the Internet so how do you know this is secure how do you know",
    "start": "1023370",
    "end": "1028949"
  },
  {
    "text": "what's going on within this system you're calling a third party system that's outside of your control you need",
    "start": "1028949",
    "end": "1034048"
  },
  {
    "text": "to make sure you're sanitizing the input before you call that system so this was the problem how do we start doing this",
    "start": "1034049",
    "end": "1040260"
  },
  {
    "text": "so we decided the best way to secure service infrastructures was using service in the structures so what we did",
    "start": "1040260",
    "end": "1047610"
  },
  {
    "text": "is we're looking at putting in a lambda function before so how can we separate out the code that sat in the lambda",
    "start": "1047610",
    "end": "1053730"
  },
  {
    "text": "function that your developers are writing in to more of a sort of security proxy at the front of it we've also got",
    "start": "1053730",
    "end": "1060600"
  },
  {
    "text": "some pieces at the back end which David's going to cover up after my piece but really we were looking at this front-end piece so when we start looking",
    "start": "1060600",
    "end": "1068340"
  },
  {
    "text": "at it photo goes into the s3 bucket or data goes into the s3 bucket it's gonna trigger you know an event within the",
    "start": "1068340",
    "end": "1075539"
  },
  {
    "text": "within this security sort of a SS lambda function and that is going to pass that data to a security piece whether that be",
    "start": "1075539",
    "end": "1084030"
  },
  {
    "text": "code or will it be a system it's gonna be something that can understand what good is and what bad is that's going to",
    "start": "1084030",
    "end": "1090960"
  },
  {
    "text": "go and pull out the data it's going to analyze it and if it looks ok if it's happy it's then going to invoke the",
    "start": "1090960",
    "end": "1097470"
  },
  {
    "text": "original lambda function that would have been the one picking it up that can then go and get the data and can go and",
    "start": "1097470",
    "end": "1103710"
  },
  {
    "text": "process it so really this is trying to sort of separate out the functional code of what you're trying to do with really",
    "start": "1103710",
    "end": "1110640"
  },
  {
    "text": "something up front that you can control there to sanitize that user input to",
    "start": "1110640",
    "end": "1115650"
  },
  {
    "text": "make sure that you know you're not being attacked so there's some considerations",
    "start": "1115650",
    "end": "1121110"
  },
  {
    "start": "1120000",
    "end": "1120000"
  },
  {
    "text": "you know those synchronous asynchronous you know in the case of taking in license plate photos from cars you know",
    "start": "1121110",
    "end": "1127110"
  },
  {
    "text": "that's a classic asynchronous system no cars waiting you know in real time to be told they're speeding whereas you know",
    "start": "1127110",
    "end": "1133890"
  },
  {
    "text": "you also have synchronous we're now seeing you know service infrastructure is pushing out web pages and taking",
    "start": "1133890",
    "end": "1139080"
  },
  {
    "text": "input from web pages for that you're going to want to understand you know things in real time you've got things",
    "start": "1139080",
    "end": "1144570"
  },
  {
    "text": "like machine learning or analytics so quite often if you've got a vast amount of data coming in you may not be looking",
    "start": "1144570",
    "end": "1150600"
  },
  {
    "text": "for anything that's specifically bad you're just looking for something that's different to what you're normally",
    "start": "1150600",
    "end": "1155640"
  },
  {
    "text": "getting and there's things like malware this is one point that we've had a you know conversation of the number of",
    "start": "1155640",
    "end": "1161070"
  },
  {
    "text": "customers about maybe your customer base is uploading data it could be photos it could be CVS it could be job postings",
    "start": "1161070",
    "end": "1168600"
  },
  {
    "text": "it could be you know data and at that point you may be processing it and you may well be passing that data out to",
    "start": "1168600",
    "end": "1174780"
  },
  {
    "text": "other customers are you sure that someone is not maliciously pushing and malware within a document just to be",
    "start": "1174780",
    "end": "1181110"
  },
  {
    "text": "handed out by you to another party for the for the malware to actually spread you need to make sure that you're not",
    "start": "1181110",
    "end": "1187289"
  },
  {
    "text": "affecting the vector that's spreading the problem and then we're also looking at sort of you know classic cross site",
    "start": "1187289",
    "end": "1193530"
  },
  {
    "text": "scripting sequel injection attacks and you know if we've mentioned sequel injection attacks a few times you know",
    "start": "1193530",
    "end": "1198600"
  },
  {
    "text": "and this is one things we get really sequel injection 2016 is this Stila yes it is this is not the most hideous",
    "start": "1198600",
    "end": "1205409"
  },
  {
    "text": "wallpaper known to man this is actually a graph of the attack types that we see do you like that I was",
    "start": "1205409",
    "end": "1211500"
  },
  {
    "text": "given it this is actually graph the tack types that we see so we've got about 4,000 customers and these attacks we're",
    "start": "1211500",
    "end": "1218970"
  },
  {
    "text": "seeing coming over the network and what's interesting if you can see it it's really if you look at it this year we're actually seeing an increase in the",
    "start": "1218970",
    "end": "1225779"
  },
  {
    "text": "amount of secret injection attacks that we're finding and in many cases they're not necessary attacking your code this",
    "start": "1225779",
    "end": "1232860"
  },
  {
    "text": "is developers get very personal if I used to be develop a very personal about sequin Jackson we're fine we use install",
    "start": "1232860",
    "end": "1237960"
  },
  {
    "text": "procedures it's not gonna be a problem if you're running on frameworks like Magento of the e-commerce platforms like",
    "start": "1237960",
    "end": "1243899"
  },
  {
    "text": "Magento or frameless the frameworks like Django in fact you may find the secret",
    "start": "1243899",
    "end": "1248909"
  },
  {
    "text": "injection attack is not aimed at you it's aimed at the framework that you're running on so we see that a lot if you",
    "start": "1248909",
    "end": "1254940"
  },
  {
    "text": "take this example this is a sequel injection attack which I'm sure you can all see this is one designed to attack a",
    "start": "1254940",
    "end": "1260940"
  },
  {
    "text": "Magento server so our research department by this up and you can see there that is the sequel injection",
    "start": "1260940",
    "end": "1266159"
  },
  {
    "text": "attack it's just base 64 encoded so that's really what it starts to look like so don't underestimate sequel injection so",
    "start": "1266159",
    "end": "1272970"
  },
  {
    "text": "we decided to go and have a look at this in a little bit more detail within our research project so what we did is we",
    "start": "1272970",
    "end": "1279779"
  },
  {
    "text": "downloaded some code off the internet because of course that's why we all develop nowadays we downloaded some code and really this code was there to hand",
    "start": "1279779",
    "end": "1286470"
  },
  {
    "text": "out a web page out of an s3 bucket so I've got no web server it's just being pushed out of s3 which is really the",
    "start": "1286470",
    "end": "1293610"
  },
  {
    "text": "world's largest web server and at that point this code is going to render all the page it's going to render for the",
    "start": "1293610",
    "end": "1299610"
  },
  {
    "text": "user they're going to type in their username and password and that password is going to be submitted or post it into",
    "start": "1299610",
    "end": "1306630"
  },
  {
    "text": "a lambda function now again for us we put in this kind of security wrapper this piece in front so that's going to",
    "start": "1306630",
    "end": "1313260"
  },
  {
    "text": "receive the data that then is going to pass that down to the our secret",
    "start": "1313260",
    "end": "1318870"
  },
  {
    "text": "injection analyzer so we pull the pull that out of our system and basically hooks it up to the lambda function and",
    "start": "1318870",
    "end": "1324350"
  },
  {
    "text": "if that passes it if it's okay then that wrappers going to invoke the next function down the original function that",
    "start": "1324350",
    "end": "1331590"
  },
  {
    "text": "function is then going to reach out to an RDS database you to validate the hash of the password make sure it's okay and then go",
    "start": "1331590",
    "end": "1338440"
  },
  {
    "text": "and get a token from Cognito so really we're looking at how we could again introduce this kind of function before",
    "start": "1338440",
    "end": "1345789"
  },
  {
    "text": "the original code to try and validate this input the lambda wrapper is fairly",
    "start": "1345789",
    "end": "1351070"
  },
  {
    "start": "1349000",
    "end": "1349000"
  },
  {
    "text": "trivial all we're doing is we're taking the data posting out to a system checking the response and if the",
    "start": "1351070",
    "end": "1356440"
  },
  {
    "text": "response is okay moving it back on again so as you can see the research",
    "start": "1356440",
    "end": "1361450"
  },
  {
    "text": "department do not do pretty websites as you can see and this is basically the sample login page they were doing",
    "start": "1361450",
    "end": "1367120"
  },
  {
    "text": "someone's put in a valid email address they put in a valid password they click the login button and they've logged in",
    "start": "1367120",
    "end": "1373090"
  },
  {
    "text": "and that's the kognito token so you've got the the gooood back from kognito with the token so that went in that work",
    "start": "1373090",
    "end": "1379539"
  },
  {
    "text": "that's a valid that's valid traffic we want to allow that in on the flipside and again the input validation they",
    "start": "1379539",
    "end": "1386260"
  },
  {
    "text": "can't spell either but the input validation fails so you can see in the email we've put in a basically secret",
    "start": "1386260",
    "end": "1391390"
  },
  {
    "text": "injection attack the far simpler one password login that's gone to our security lambda function that's checked",
    "start": "1391390",
    "end": "1398110"
  },
  {
    "text": "with our secret signal injection analyzer it's come back and said that's the injection you really don't want to",
    "start": "1398110",
    "end": "1403299"
  },
  {
    "text": "let that through and it's failed the authentication okay thank you thanks",
    "start": "1403299",
    "end": "1410260"
  },
  {
    "text": "James so as you can see James has got a prototype wrapper working for actually",
    "start": "1410260",
    "end": "1417159"
  },
  {
    "text": "dealing with the front-end data flow into a lambda function now let's take a",
    "start": "1417159",
    "end": "1423460"
  },
  {
    "start": "1423000",
    "end": "1423000"
  },
  {
    "text": "closer look at the backend when we were discussing this at the London London",
    "start": "1423460",
    "end": "1429250"
  },
  {
    "text": "Enterprise Summit last year we were thinking oK we've got this lambda function in the middle we've got our",
    "start": "1429250",
    "end": "1435669"
  },
  {
    "text": "wrapper on the front end what are we going to do on the back end because we want to be able to instrument what's coming out of our lambda function maybe",
    "start": "1435669",
    "end": "1442539"
  },
  {
    "text": "log some things using AP using API gateways logging capability before",
    "start": "1442539",
    "end": "1447880"
  },
  {
    "text": "things actually go hitting the actual AWS API endpoint we don't want to have",
    "start": "1447880",
    "end": "1453820"
  },
  {
    "text": "our lambda function that we are developing and testing making calls we",
    "start": "1453820",
    "end": "1458860"
  },
  {
    "text": "don't necessarily want it to so we could use another lambda function here to actually do some filtering on it so what",
    "start": "1458860",
    "end": "1466570"
  },
  {
    "text": "can we do here we can potentially take a look at our API gateway if you look at API gateway",
    "start": "1466570",
    "end": "1473610"
  },
  {
    "text": "from the right kind of angle it looks a lot like an actual AWS API endpoint so",
    "start": "1473610",
    "end": "1481290"
  },
  {
    "text": "it supports sig v4 it supports all the usual usual restful vocabulary how can",
    "start": "1481290",
    "end": "1489360"
  },
  {
    "text": "we actually make our lambda function talk to an API gateway and think it's",
    "start": "1489360",
    "end": "1494490"
  },
  {
    "text": "actually an API endpoint well depending on which like language you choose to use",
    "start": "1494490",
    "end": "1499560"
  },
  {
    "start": "1498000",
    "end": "1498000"
  },
  {
    "text": "it's not that hard so I had a bit of a dig around in boto and also in the Java",
    "start": "1499560",
    "end": "1505680"
  },
  {
    "text": "SDK and I came across this file that for each AWS service this is all essentially",
    "start": "1505680",
    "end": "1512430"
  },
  {
    "text": "the file contains for each AWS service is a great big JSON structure it contains a mapping between the different",
    "start": "1512430",
    "end": "1519690"
  },
  {
    "text": "regional endpoint names and the fully qualified domain names so how about",
    "start": "1519690",
    "end": "1525320"
  },
  {
    "text": "bearing in mind all these of course are rooted in Amazon AWS comm as are the",
    "start": "1525320",
    "end": "1531540"
  },
  {
    "text": "domain names and as an TLS keys of API gateway how about we just go editing",
    "start": "1531540",
    "end": "1540090"
  },
  {
    "text": "this mapping and then if we haven't actually got any keys cached from having",
    "start": "1540090",
    "end": "1548220"
  },
  {
    "start": "1543000",
    "end": "1543000"
  },
  {
    "text": "previously in our client from having previously made calls to a real API endpoint how about we make the SDK under",
    "start": "1548220",
    "end": "1555840"
  },
  {
    "text": "the lid of our lambda function start thinking that an API endpoint is actually an API sorry an API gateway is",
    "start": "1555840",
    "end": "1563670"
  },
  {
    "text": "actually an API endpoint now you wouldn't even you wouldn't need still to do a bit of modifying on your lambda",
    "start": "1563670",
    "end": "1569130"
  },
  {
    "text": "function in that you'd need to first of all before invoking your real useful doing stuff work verify that the",
    "start": "1569130",
    "end": "1577290"
  },
  {
    "text": "modified mapping is in place but otherwise it can be done I've had a",
    "start": "1577290",
    "end": "1582660"
  },
  {
    "text": "brief look at some of the other SDKs and I admit I'm not quite found an equivalent to this file yet in in those",
    "start": "1582660",
    "end": "1589580"
  },
  {
    "text": "but the mappings are going to be spread throughout the SDK in some other way in",
    "start": "1589580",
    "end": "1595200"
  },
  {
    "text": "just the way that rather than actually just being centralized in a in a file in the way they are in boat",
    "start": "1595200",
    "end": "1601560"
  },
  {
    "text": "and the Java SDK so about about a day or",
    "start": "1601560",
    "end": "1610080"
  },
  {
    "text": "so after I figured this out I thought hang on a minute this isn't actually applicable to just service stuff and",
    "start": "1610080",
    "end": "1616680"
  },
  {
    "text": "then I can actually do a useful generalized architecture for this so if",
    "start": "1616680",
    "end": "1622830"
  },
  {
    "start": "1622000",
    "end": "1622000"
  },
  {
    "text": "we consider a proxy architecture here I've used a little head and shoulders",
    "start": "1622830",
    "end": "1628740"
  },
  {
    "text": "and a bounding box to denote an AWS account here as I haven't actually found",
    "start": "1628740",
    "end": "1634260"
  },
  {
    "text": "a standard symbol for it yet but if we hack our SDK in our client here and I've",
    "start": "1634260",
    "end": "1641640"
  },
  {
    "text": "got the file names here of where those actual mapping files are in boto in the java sdk we can then actually set things",
    "start": "1641640",
    "end": "1651150"
  },
  {
    "text": "up so that our API gateway uses sig v4 and just essentially unpacks our sig v4",
    "start": "1651150",
    "end": "1660000"
  },
  {
    "text": "our sig v4 submission there's a lot of clever things you can",
    "start": "1660000",
    "end": "1666270"
  },
  {
    "text": "do in the API gateway in terms of transcoding restful functions having extra lambda functions called depending",
    "start": "1666270",
    "end": "1672510"
  },
  {
    "text": "on which rest vocabulary you're using but in this context it's probably easier",
    "start": "1672510",
    "end": "1678810"
  },
  {
    "text": "to just go passing the rest call or a query URL on to the lambda function so",
    "start": "1678810",
    "end": "1685410"
  },
  {
    "text": "we do that over HTTP and then we get to our lambda function where we can do",
    "start": "1685410",
    "end": "1691650"
  },
  {
    "text": "something interesting whatever interesting thing we decide to do there is an extra subtlety here so",
    "start": "1691650",
    "end": "1699180"
  },
  {
    "text": "our original API call from our client essentially terminates here at our",
    "start": "1699180",
    "end": "1704340"
  },
  {
    "text": "lambda function gets inspected and acted upon and one action that you might",
    "start": "1704340",
    "end": "1709770"
  },
  {
    "text": "expect is for that lambda function to say okay I'm happy with this call I'm going to pass it through to an API",
    "start": "1709770",
    "end": "1715980"
  },
  {
    "text": "endpoint and cause it to be actioned but the context of our call actually changes",
    "start": "1715980",
    "end": "1722070"
  },
  {
    "text": "in two ways at this point in that first of all the call that our lambda function",
    "start": "1722070",
    "end": "1727230"
  },
  {
    "text": "is going to be making is made on the behalf of the lambda function not on behalf of the user so we've got a role",
    "start": "1727230",
    "end": "1734190"
  },
  {
    "text": "here which um our lambda function has cross account into our resource account there",
    "start": "1734190",
    "end": "1740789"
  },
  {
    "text": "on the right but also because we're issuing our call cross account we've got",
    "start": "1740789",
    "end": "1747270"
  },
  {
    "text": "a completely different on involved we're dealing with a completely different AWS account ID this makes life interesting",
    "start": "1747270",
    "end": "1754850"
  },
  {
    "text": "so we go making our call whatever that may be and then we have our I am role",
    "start": "1754850",
    "end": "1762360"
  },
  {
    "text": "giving a cross account permission to our lambda function note at this point that our resource account doesn't necessarily",
    "start": "1762360",
    "end": "1769530"
  },
  {
    "text": "even know who our clients over on the far left is it can have no sight at all",
    "start": "1769530",
    "end": "1776130"
  },
  {
    "text": "of that users credentials this can get really fun so let's actually have a look",
    "start": "1776130",
    "end": "1782520"
  },
  {
    "text": "at some of the things you can do with this now I like config and I like config rules",
    "start": "1782520",
    "end": "1789330"
  },
  {
    "start": "1785000",
    "end": "1785000"
  },
  {
    "text": "it's great to have a configuration management database for my AWS assets and also it's great to have an",
    "start": "1789330",
    "end": "1796740"
  },
  {
    "text": "environment that every time some interesting API action happens can go",
    "start": "1796740",
    "end": "1801990"
  },
  {
    "text": "look at the state of my AWS environment and say do I really want this thing to",
    "start": "1801990",
    "end": "1807480"
  },
  {
    "text": "happen or not given what the disposition of my other assets look like however if",
    "start": "1807480",
    "end": "1813570"
  },
  {
    "text": "let's say I was to do something that I that my policy might want me not to",
    "start": "1813570",
    "end": "1820590"
  },
  {
    "text": "let's say I want to go creating an EBS volume without encrypting it that might",
    "start": "1820590",
    "end": "1826440"
  },
  {
    "text": "be against my policy the controls on I am which I think are very much as being",
    "start": "1826440",
    "end": "1833460"
  },
  {
    "text": "like Linux based role role based access control writ large aren't like fine-grained enough to be able to do",
    "start": "1833460",
    "end": "1840150"
  },
  {
    "text": "full deep inspection on an API call and say yes you can go creating EBS volumes",
    "start": "1840150",
    "end": "1847200"
  },
  {
    "text": "in this region occur at this time of day if you've got an MFA token etc but it",
    "start": "1847200",
    "end": "1853140"
  },
  {
    "text": "can't make you say and it must be encrypted now if I go creating an",
    "start": "1853140",
    "end": "1858659"
  },
  {
    "text": "unencrypted EBS volume currently I could have a config rule that will fire when it sees the creation of that volume and",
    "start": "1858659",
    "end": "1864750"
  },
  {
    "text": "we'll go that's not fun either alert someone or more constructively as was shown last",
    "start": "1864750",
    "end": "1871320"
  },
  {
    "text": "year in the wrangling security events in the cloud session it can say I'm gonna",
    "start": "1871320",
    "end": "1876810"
  },
  {
    "text": "get rid of that volume I'm just going to delete it however that volume has been",
    "start": "1876810",
    "end": "1882720"
  },
  {
    "text": "created it has existed for some number of milliseconds before the config rule",
    "start": "1882720",
    "end": "1888660"
  },
  {
    "text": "fired and decided to get rid of it that might be enough in certain very tightly",
    "start": "1888660",
    "end": "1893790"
  },
  {
    "text": "constrained highly regulated environments to take you out of compliance so wouldn't it be useful if",
    "start": "1893790",
    "end": "1901680"
  },
  {
    "text": "for simple non-compliant actions that you don't want people to comfort to",
    "start": "1901680",
    "end": "1907050"
  },
  {
    "text": "perform but are still a bit more fine-grained than I am can handle if you were just able to just do deep",
    "start": "1907050",
    "end": "1913710"
  },
  {
    "text": "inspection in your lambda function on your API call and if you see something you don't like say the 401 no way dude",
    "start": "1913710",
    "end": "1922550"
  },
  {
    "text": "so I call it pre-emptive config rules that's just a nickname more than",
    "start": "1922550",
    "end": "1927930"
  },
  {
    "text": "anything else but it's use for this kind of architecture next source IP",
    "start": "1927930",
    "end": "1936870"
  },
  {
    "text": "restrictions great thing to happen I am very useful lots of people use it so",
    "start": "1936870",
    "end": "1941940"
  },
  {
    "text": "that they require their developers to VPN intellect corporate environment before they can go making changes to",
    "start": "1941940",
    "end": "1947130"
  },
  {
    "text": "their AWS world not every API call these",
    "start": "1947130",
    "end": "1952500"
  },
  {
    "text": "days actually supports this control if you have an API call which at some point",
    "start": "1952500",
    "end": "1958800"
  },
  {
    "text": "in its execution makes another API call on your behalf sometimes it won't actually support a",
    "start": "1958800",
    "end": "1965460"
  },
  {
    "text": "source IP restriction and there's a link there too and the details in I am as to",
    "start": "1965460",
    "end": "1971910"
  },
  {
    "text": "what the limitations are there now if you're actually doing this in a two-stage manner as we can with our",
    "start": "1971910",
    "end": "1978330"
  },
  {
    "text": "little proxy you can do your source API filter in your lambda function and then",
    "start": "1978330",
    "end": "1984180"
  },
  {
    "text": "in your actual API in your actual API call if only your lambda function and no",
    "start": "1984180",
    "end": "1992070"
  },
  {
    "text": "users have the ability to make the real API call to perform the action then you",
    "start": "1992070",
    "end": "1997410"
  },
  {
    "text": "don't actually need to have the source IP restriction because the call is going to become",
    "start": "1997410",
    "end": "2002570"
  },
  {
    "text": "from your lambda function in your roles normally I would expect that would be",
    "start": "2002570",
    "end": "2008599"
  },
  {
    "text": "sufficient control in order to enable the call to be honored according to most",
    "start": "2008599",
    "end": "2015259"
  },
  {
    "text": "people's security policies but I'm happy to be corrected please catch me afterwards if so third option and this",
    "start": "2015259",
    "end": "2023719"
  },
  {
    "text": "is Sir again being events have moved slightly on in that you if you want to",
    "start": "2023719",
    "end": "2029269"
  },
  {
    "text": "go encrypting your sqs payloads using kms you could actually use kms is bring",
    "start": "2029269",
    "end": "2036649"
  },
  {
    "text": "your own key function so that you now actually have copy the original in fact of your key at your client end so you",
    "start": "2036649",
    "end": "2045259"
  },
  {
    "text": "could encrypt your actual sqs payload client-side and have the whole thing",
    "start": "2045259",
    "end": "2050358"
  },
  {
    "text": "pass through the system to the far end point but before that happened so you",
    "start": "2050359",
    "end": "2056720"
  },
  {
    "text": "could potentially do this with some other services you could actually if you wanted to encrypt a payload in sqs or",
    "start": "2056720",
    "end": "2064460"
  },
  {
    "text": "some other messaging service where you were passing data through some environment where you want it where you",
    "start": "2064460",
    "end": "2070789"
  },
  {
    "text": "needed to have your payload encrypted you could actually transparently use lambda function to encrypt your payload",
    "start": "2070789",
    "end": "2078079"
  },
  {
    "text": "immediately after the API gateway to so that it then proceeds through the whole",
    "start": "2078079",
    "end": "2083779"
  },
  {
    "text": "of the rest of the system until it reaches the appropriate endpoint that has a decrypt grant on the same key to",
    "start": "2083779",
    "end": "2089720"
  },
  {
    "text": "be able to decrypt it and of course you just give you a lambda function and encrypt grant so again this is something",
    "start": "2089720",
    "end": "2097220"
  },
  {
    "text": "useful that some people may want to do and this is one that my friend and",
    "start": "2097220",
    "end": "2102619"
  },
  {
    "start": "2101000",
    "end": "2101000"
  },
  {
    "text": "colleague Bertram dawn who has the same job role as me and he's based out of Munich came up with we've all",
    "start": "2102619",
    "end": "2109849"
  },
  {
    "text": "encountered the kind of software engineer whose idea of performance tuning is to run his code on a C for 8x",
    "start": "2109849",
    "end": "2116869"
  },
  {
    "text": "large it'll be a c5 of course now so let's say you're a little startup and",
    "start": "2116869",
    "end": "2123619"
  },
  {
    "text": "you might not want to have your engineers launching really big instances all across the board how about you have",
    "start": "2123619",
    "end": "2132589"
  },
  {
    "text": "a means of interfacing with the workflow system so if I happen to be the director of",
    "start": "2132589",
    "end": "2138559"
  },
  {
    "text": "engineering in this little company if a chap comes along and says to me I need",
    "start": "2138559",
    "end": "2143660"
  },
  {
    "text": "to see for a techs large and can give a good reason as to why he does then I may",
    "start": "2143660",
    "end": "2149119"
  },
  {
    "text": "say okay I'm going to port a message into sqs that says you Fred can have a",
    "start": "2149119",
    "end": "2155809"
  },
  {
    "text": "c48 x-large at which point he goes spinning up his c48 x-large",
    "start": "2155809",
    "end": "2161359"
  },
  {
    "text": "with his regular API call the lambda function says okay I am going to look on",
    "start": "2161359",
    "end": "2169059"
  },
  {
    "text": "SQS for a message authorizing this action so that message could be signed",
    "start": "2169059",
    "end": "2175880"
  },
  {
    "text": "if there could be other authentication in it but sqs the lambda function can",
    "start": "2175880",
    "end": "2181130"
  },
  {
    "text": "then consume the message from sqs thereby obviously deleting it from the queue and allowing Fred his big box",
    "start": "2181130",
    "end": "2188869"
  },
  {
    "text": "if however Fred wants to run something fairly trivial that doesn't need a box of that size he tries that again",
    "start": "2188869",
    "end": "2195760"
  },
  {
    "text": "4:01 again so lots of people talk about workflow systems interfacing them",
    "start": "2195760",
    "end": "2202910"
  },
  {
    "text": "actually into AWS call process is a more interesting proposition this is kind of",
    "start": "2202910",
    "end": "2209690"
  },
  {
    "text": "the beginnings of a way of doing it and finally of course we get into doing the",
    "start": "2209690",
    "end": "2216290"
  },
  {
    "start": "2214000",
    "end": "2214000"
  },
  {
    "text": "superset of what James has been talking about for lambda functions but for the whole AWS API so actually doing badness",
    "start": "2216290",
    "end": "2224869"
  },
  {
    "text": "filtering for every single API call if you want to obviously being British this",
    "start": "2224869",
    "end": "2233540"
  },
  {
    "text": "made me think of the requirement for anti-malware in the cyber essentials program it would be interesting hello",
    "start": "2233540",
    "end": "2241910"
  },
  {
    "text": "Tony to talk to someone about whether this would fit the bill so regarding",
    "start": "2241910",
    "end": "2249140"
  },
  {
    "start": "2248000",
    "end": "2248000"
  },
  {
    "text": "what you can actually trigger with lambda functions the list is reasonable",
    "start": "2249140",
    "end": "2254329"
  },
  {
    "text": "size and it's getting bigger so you're only really limited by your the ideas",
    "start": "2254329",
    "end": "2260240"
  },
  {
    "text": "and use cases that you come up with as to what you may actually be able to do with this so just to have some",
    "start": "2260240",
    "end": "2267349"
  },
  {
    "text": "conclusions on this piece we have another couple of interesting tools from the box obviously I am your",
    "start": "2267349",
    "end": "2275690"
  },
  {
    "text": "first port of call for scoping things service API endpoints are pretty well protected themselves but we can do even",
    "start": "2275690",
    "end": "2282440"
  },
  {
    "text": "further things at layer 7 given what James has been discussing also filtering",
    "start": "2282440",
    "end": "2288140"
  },
  {
    "text": "and protecting lambda functions but we can extend this by actually making an",
    "start": "2288140",
    "end": "2294650"
  },
  {
    "text": "API gateway pretend to be an API endpoint and use the lambda function to do all sorts of other entertaining and",
    "start": "2294650",
    "end": "2301250"
  },
  {
    "text": "useful things this is just really the beginning of this piece of architecture I'd love to see in the feedback whether",
    "start": "2301250",
    "end": "2308930"
  },
  {
    "text": "you like these ideas and if you have any more that you've done like to discuss then please let's talk about them we'd",
    "start": "2308930",
    "end": "2315860"
  },
  {
    "text": "love to see some further use cases now bearing in mind I normally run a Mac",
    "start": "2315860",
    "end": "2323200"
  },
  {
    "text": "that I'd like to give you a little bit of a look at something extra that I've",
    "start": "2323200",
    "end": "2328250"
  },
  {
    "text": "been working on recently from the world I come from before my AWS days I did a",
    "start": "2328250",
    "end": "2336830"
  },
  {
    "text": "lot of work for people who among other things carry guns for a living so they",
    "start": "2336830",
    "end": "2343550"
  },
  {
    "start": "2341000",
    "end": "2341000"
  },
  {
    "text": "were insistent on there being full mandatory access control on their systems so that they could go talking to",
    "start": "2343550",
    "end": "2351610"
  },
  {
    "text": "environments of multiple protective markings from the from the same client",
    "start": "2351610",
    "end": "2357790"
  },
  {
    "text": "in terms of mandatory access control actually Glacia volt lock really is probably the",
    "start": "2357790",
    "end": "2365030"
  },
  {
    "text": "first service in AWS that well first feature that actually has mandatory",
    "start": "2365030",
    "end": "2370310"
  },
  {
    "text": "access control within a single account once you set the lock on a vault policy",
    "start": "2370310",
    "end": "2375590"
  },
  {
    "text": "not even root can go interfering with it so how to actually go about reducing the",
    "start": "2375590",
    "end": "2383960"
  },
  {
    "text": "reducing the capability of route in an AWS environment I mean there are customers who want this I get this from",
    "start": "2383960",
    "end": "2392150"
  },
  {
    "text": "time to time in my day to day work obviously if you're going to get rid of root properly it's gonna take work from",
    "start": "2392150",
    "end": "2398780"
  },
  {
    "text": "I am engineering and that particular service team has been doing some fun very fun work of late",
    "start": "2398780",
    "end": "2406709"
  },
  {
    "text": "with organizations which launched a couple of days ago quite where",
    "start": "2406709",
    "end": "2411869"
  },
  {
    "text": "organizations is going to go over and above the features it's currently launching with that's not something that",
    "start": "2411869",
    "end": "2417779"
  },
  {
    "text": "I can really talk about that much I've been looking into it it does have a really fun roadmap though so with our",
    "start": "2417779",
    "end": "2425519"
  },
  {
    "text": "multi-factor it with multi-factor authentication tokens you can effectively put route beyond use in",
    "start": "2425519",
    "end": "2432119"
  },
  {
    "text": "terms of you lock your token in a safe the idea is then you need access to the safe in order to use use the account but",
    "start": "2432119",
    "end": "2439199"
  },
  {
    "text": "root is still findable I mean every AWS account has a root user so if you if you",
    "start": "2439199",
    "end": "2447839"
  },
  {
    "text": "have the details of the AWS account you know the root user that root user is",
    "start": "2447839",
    "end": "2453299"
  },
  {
    "text": "traditional UNIX omnipotent that is still some kind of a target so could we",
    "start": "2453299",
    "end": "2459479"
  },
  {
    "text": "change this could we completely mask an AWS account so that the account ID is",
    "start": "2459479",
    "end": "2466709"
  },
  {
    "text": "not visible let's have a look at this some more now my pal Bertram being",
    "start": "2466709",
    "end": "2475049"
  },
  {
    "text": "German has some is rather interested in privacy and there is actually some",
    "start": "2475049",
    "end": "2481289"
  },
  {
    "text": "interesting privacy law in Germany that requires particular handling of",
    "start": "2481289",
    "end": "2486869"
  },
  {
    "text": "personally identifiable information he tells me that you can only actually hold",
    "start": "2486869",
    "end": "2492989"
  },
  {
    "text": "PII for a certain number for a certain period of time unless you have a",
    "start": "2492989",
    "end": "2498449"
  },
  {
    "text": "particular use for it so if you're going to be maintaining long-term log archives",
    "start": "2498449",
    "end": "2503969"
  },
  {
    "text": "which of course we recommend everyone does then you're going to need to do some filtering and some redaction on",
    "start": "2503969",
    "end": "2509849"
  },
  {
    "text": "your logs in order for in order for you to be able to actually hold them long-term legally so he wrote himself a",
    "start": "2509849",
    "end": "2519420"
  },
  {
    "text": "lambda function the idea here is on the Left you've got data coming in from",
    "start": "2519420",
    "end": "2524699"
  },
  {
    "text": "Cloud trail and other log sources it lands in an s3 bucket the way these things do it Bertram lambda function",
    "start": "2524699",
    "end": "2531989"
  },
  {
    "text": "triggers on this event and obviously things like cloud trail logs",
    "start": "2531989",
    "end": "2537380"
  },
  {
    "text": "are consistent in terms of Jason structure so he just finds the relevant bits of",
    "start": "2537380",
    "end": "2542780"
  },
  {
    "text": "PII stars them out and then writes that data to another bucket that he uses for",
    "start": "2542780",
    "end": "2549050"
  },
  {
    "text": "Locke that's is used for long term archive the bucket that the logs landed in originally you just use s3 to set a",
    "start": "2549050",
    "end": "2555590"
  },
  {
    "text": "lifecycle rule on it so that those logs get deleted after 30 days or whatever is",
    "start": "2555590",
    "end": "2561200"
  },
  {
    "text": "considered to be the appropriate retention maximum retention period for",
    "start": "2561200",
    "end": "2566230"
  },
  {
    "text": "log records that have PII in them without particular reason to so how",
    "start": "2566230",
    "end": "2572510"
  },
  {
    "text": "about we modify this instead of actually redacting PII how about we redact",
    "start": "2572510",
    "end": "2579170"
  },
  {
    "text": "account IDs in cloud trail logs billing records all this other stuff so if we",
    "start": "2579170",
    "end": "2587330"
  },
  {
    "text": "now take our proxy model from beforehand and we look at putting a couple of these",
    "start": "2587330",
    "end": "2592670"
  },
  {
    "text": "together what we get is a big complicated diagram so let's let's take",
    "start": "2592670",
    "end": "2601370"
  },
  {
    "text": "this from the inside out if we take our empty account there which is essentially",
    "start": "2601370",
    "end": "2606440"
  },
  {
    "text": "our resource account the idea is that any logs generated in that account go",
    "start": "2606440",
    "end": "2612740"
  },
  {
    "text": "into our billing bucket and are logging bucket as recommended in our multi",
    "start": "2612740",
    "end": "2618260"
  },
  {
    "text": "account architecture and we use the modified version of bertram lambda function to go",
    "start": "2618260",
    "end": "2624290"
  },
  {
    "text": "starring out the account ID and then putting that data in further buckets",
    "start": "2624290",
    "end": "2630530"
  },
  {
    "text": "outside of our big red oval we then have our proxy environment as previously",
    "start": "2630530",
    "end": "2637460"
  },
  {
    "text": "described just immediately to the left of our resource account which is able to",
    "start": "2637460",
    "end": "2643630"
  },
  {
    "text": "assign subsets of permissions to other front-end accounts that our client",
    "start": "2643630",
    "end": "2651230"
  },
  {
    "text": "environments actually interact with so for instance you could actually split up here into again separate API endpoints",
    "start": "2651230",
    "end": "2659690"
  },
  {
    "text": "for every AWS service that people need to interact with each of these can have",
    "start": "2659690",
    "end": "2665000"
  },
  {
    "text": "its own filtering on it but is not even root in those front end",
    "start": "2665000",
    "end": "2670810"
  },
  {
    "text": "accounts can change the set of permissions that they are granted by the",
    "start": "2670810",
    "end": "2675940"
  },
  {
    "text": "middle-left account on the actual resource account so the idea here is",
    "start": "2675940",
    "end": "2682750"
  },
  {
    "text": "that outside the red oval you can have all your actual human users including",
    "start": "2682750",
    "end": "2689890"
  },
  {
    "text": "people who have the root accounts and these individuals will have no idea of",
    "start": "2689890",
    "end": "2695410"
  },
  {
    "text": "what the actual account ID of the resource account in are red oval is only",
    "start": "2695410",
    "end": "2701950"
  },
  {
    "text": "the three other accounts that are inside the red oval have the ability to get information about the account ID of the",
    "start": "2701950",
    "end": "2708880"
  },
  {
    "text": "account that's got the resources in it that's doing the really useful stuff and you can constrain those very hard in",
    "start": "2708880",
    "end": "2715750"
  },
  {
    "text": "terms of only having really highly trusted individuals being able to have",
    "start": "2715750",
    "end": "2720880"
  },
  {
    "text": "account IDs in those accounts so this is essentially the same thing in words for",
    "start": "2720880",
    "end": "2726970"
  },
  {
    "text": "people who are going to be using the SlideShare version of this and again",
    "start": "2726970",
    "end": "2732490"
  },
  {
    "text": "having spent about 10 years of my life working with old-school",
    "start": "2732490",
    "end": "2738190"
  },
  {
    "text": "b1 certified systems what we've got there in terms of policy being both",
    "start": "2738190",
    "end": "2744910"
  },
  {
    "text": "invisible and immutable to all users including root and thereby root",
    "start": "2744910",
    "end": "2751359"
  },
  {
    "text": "privilege being restricted it's mandatory access control so that",
    "start": "2751359",
    "end": "2758400"
  },
  {
    "text": "essentially is what we've got for you thank you very much for your time also",
    "start": "2758400",
    "end": "2767250"
  }
]