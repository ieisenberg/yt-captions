[
  {
    "text": "alright hello everybody welcome to database office hours and diving deep on",
    "start": "1040",
    "end": "6720"
  },
  {
    "text": "databases with Nik over here and Randall over here we're gonna spend the next",
    "start": "6720",
    "end": "13230"
  },
  {
    "text": "several weeks talking to you about any questions you have about databases as",
    "start": "13230",
    "end": "18720"
  },
  {
    "text": "well as outlining some of the best practices by speaking with some of our thought leaders and experts within the",
    "start": "18720",
    "end": "24090"
  },
  {
    "text": "company and maybe even outside of the company as well today we are joined by Joseph so can you tell us a little bit",
    "start": "24090",
    "end": "31349"
  },
  {
    "text": "about your title role maybe your history of amazingness at the company sure my",
    "start": "31349",
    "end": "37890"
  },
  {
    "text": "name is Joseph lazeric I'm a product manager on the non-relational database team I've been working on a number of",
    "start": "37890",
    "end": "44700"
  },
  {
    "text": "our services from dynamo to be accelerator dynamodb timestream but my",
    "start": "44700",
    "end": "51210"
  },
  {
    "text": "day job now is on document DB so I've been working on quite a few of our services and everything from the PR FAQ",
    "start": "51210",
    "end": "58260"
  },
  {
    "text": "all the way up through launches and I'm pricing all the other fun stuff so we've gone through the whole so in case no",
    "start": "58260",
    "end": "65250"
  },
  {
    "text": "one's ever heard that term before we follow a process at Amazon of working backwards so there's something called a",
    "start": "65250",
    "end": "71130"
  },
  {
    "text": "PR FAQ and we've talked about this before in presentations and Jeff Bezos has published this in a shareholder",
    "start": "71130",
    "end": "76860"
  },
  {
    "text": "letter but we start with the press release and work backwards into the product and that's a very interesting",
    "start": "76860",
    "end": "84750"
  },
  {
    "text": "process and I think it's led to a lot of the developments that we've had over the years for different databases and our",
    "start": "84750",
    "end": "91470"
  },
  {
    "text": "topic really for today is how to choose the right database for the job and what",
    "start": "91470",
    "end": "97920"
  },
  {
    "text": "I'll say to introduce this is that in 2019 DB engines org or comm track",
    "start": "97920",
    "end": "104759"
  },
  {
    "text": "something like 330 different database engines so it's really hard as a",
    "start": "104759",
    "end": "110790"
  },
  {
    "text": "developer or even as a systems architect or something like that to know what",
    "start": "110790",
    "end": "116280"
  },
  {
    "text": "database you should use for which set of problems and we're hoping that over the course of this series over the course of",
    "start": "116280",
    "end": "122909"
  },
  {
    "text": "this next several weeks we're going to be able to answer a lot of those questions for you and provide some real-world use cases for those different",
    "start": "122909",
    "end": "129599"
  },
  {
    "text": "databases so that you can adapt and take in a schema for how to evaluate",
    "start": "129599",
    "end": "135420"
  },
  {
    "text": "decisions about building different applications so what are kind of like",
    "start": "135420",
    "end": "141540"
  },
  {
    "text": "the core database types yes so if you know if you come to take a step back and you know how did we get to 2019 and you",
    "start": "141540",
    "end": "149040"
  },
  {
    "text": "know these three hundred and forty different databases you know one way to categorize them or one way to look at",
    "start": "149040",
    "end": "154860"
  },
  {
    "text": "him is to pivot at 90 degrees and look at what are the different types or categories of databases and they think",
    "start": "154860",
    "end": "161250"
  },
  {
    "text": "you know for a long time we only used relational databases right that was pretty much the only game in town you know they started being developed in the",
    "start": "161250",
    "end": "167730"
  },
  {
    "text": "70s and they're very prevalent and you know the 80s the 90s and the early 2000s as that was you know the predominant",
    "start": "167730",
    "end": "174450"
  },
  {
    "text": "technology we use and one of the reasons I think that they took off like that is because if do you remember how big a",
    "start": "174450",
    "end": "180330"
  },
  {
    "text": "hard drive was and 1985 that's the",
    "start": "180330",
    "end": "185580"
  },
  {
    "text": "current hard drives right but the in the early 80s and even before that you know",
    "start": "185580",
    "end": "191250"
  },
  {
    "text": "a 5 megabyte hard drive was the size of this table so you optimize for storage with something like normal form and in",
    "start": "191250",
    "end": "198270"
  },
  {
    "text": "the kind of the crux of things I think is that the real world doesn't always fit so neatly into rows and columns yeah",
    "start": "198270",
    "end": "206700"
  },
  {
    "text": "I mean storage at one point in time became a question of how many of these hard drives can we physically fit in an",
    "start": "206700",
    "end": "212190"
  },
  {
    "text": "in a room right and like that would then constrain sort of what your application could even look like so requirements",
    "start": "212190",
    "end": "217890"
  },
  {
    "text": "have changed over time but some of these patterns around types of data that exists access patterns and what those",
    "start": "217890",
    "end": "225000"
  },
  {
    "text": "look like from applications new ones have evolved but we still see some of these old tried-and-true sort of systems",
    "start": "225000",
    "end": "231000"
  },
  {
    "text": "still extremely prevalent today so I figure well we know that databases are",
    "start": "231000",
    "end": "236310"
  },
  {
    "text": "purpose-built here at Amazon but why don't we talk about some of the different types of data that exists out in the wilds maybe and how we've worked",
    "start": "236310",
    "end": "242940"
  },
  {
    "text": "backwards from those types of data and their workloads to to build some of these databases like what are the broad",
    "start": "242940",
    "end": "247980"
  },
  {
    "text": "overview of these different services what are their trade offs and and what should people think about when they're looking to use them yeah I think broadly",
    "start": "247980",
    "end": "254250"
  },
  {
    "text": "you know we see you know like eight large data categories that a lot of these data models and use cases fit into",
    "start": "254250",
    "end": "260220"
  },
  {
    "text": "we have relational we have key value we have documents we have memory searches a category graph",
    "start": "260220",
    "end": "266819"
  },
  {
    "text": "databases and then some of the newer categories that we've that we've had services and now is time series and",
    "start": "266819",
    "end": "273990"
  },
  {
    "text": "ledger databases which is you know really cutting edge data models where do",
    "start": "273990",
    "end": "279599"
  },
  {
    "text": "some pretty powerful things and I think really the important thing to notice for each of these data models is that they",
    "start": "279599",
    "end": "285419"
  },
  {
    "text": "each have their own specific purpose I think we can all attest that you know technology doesn't come up and stay and",
    "start": "285419",
    "end": "290550"
  },
  {
    "text": "you know people don't use it if it doesn't have a purpose and doesn't solve a unique problem and that's what each one of these databases does it solves a",
    "start": "290550",
    "end": "297330"
  },
  {
    "text": "unique set of problems for different types of workloads and use cases definitely so especially towards the",
    "start": "297330",
    "end": "304469"
  },
  {
    "text": "tail end of the ones you were speaking about a lot of the best in slot databases essentially will boil down to",
    "start": "304469",
    "end": "310500"
  },
  {
    "text": "really specific nuances like what are your access patterns or behaviors but for a lot of people they still are",
    "start": "310500",
    "end": "316919"
  },
  {
    "text": "asking a question of Shengo relational or not relational what are the trade-offs between them what are even the differences you know like where does",
    "start": "316919",
    "end": "322889"
  },
  {
    "text": "someone start when they're trying to think about ok I have data one of the first questions I should ask sure yeah I mean the first question is you know what",
    "start": "322889",
    "end": "329069"
  },
  {
    "text": "is your use case what are you trying to accomplish and what are those data access patterns look like you know it's",
    "start": "329069",
    "end": "335900"
  },
  {
    "text": "you know it's always working thank you know Randall's poem we always work backwards or you always want to work backwards from what your use case is",
    "start": "335900",
    "end": "341639"
  },
  {
    "text": "because you say like hey I've you know whatever want to do is but build a recommendation engine you know that's my",
    "start": "341639",
    "end": "346800"
  },
  {
    "text": "use case they say ok well let's actually work backwards in the use case not the technology and say ok well if you have a",
    "start": "346800",
    "end": "352289"
  },
  {
    "text": "recommendation engine what types of questions do you want to ask oh you want to know you know a directed graph",
    "start": "352289",
    "end": "358169"
  },
  {
    "text": "question you want to build something that has Associated values then you say ok well what technology enables me to",
    "start": "358169",
    "end": "364919"
  },
  {
    "text": "answer those types of questions or build those types of experiences for my customers versus saying like ham you",
    "start": "364919",
    "end": "372120"
  },
  {
    "text": "know this is kind of how we used to develop right we used to say ok I'm gonna use a relational database and I don't really care what the use case is I'm gonna jam it into this particular",
    "start": "372120",
    "end": "379319"
  },
  {
    "text": "technology and I think we're seeing developers do the exact opposite that now I'm saying like hey you know I have",
    "start": "379319",
    "end": "385319"
  },
  {
    "text": "a log in a Linux use case or I have an observability use case or I have you",
    "start": "385319",
    "end": "390719"
  },
  {
    "text": "know a financial or transactional processing use case and then saying okay what are the technologies that enable",
    "start": "390719",
    "end": "396830"
  },
  {
    "text": "to provide the right experience for that so let's let's let's quickly enumerate the categories so we have relational we",
    "start": "396830",
    "end": "405230"
  },
  {
    "text": "have in memory we have key value documents we have graph time series",
    "start": "405230",
    "end": "414020"
  },
  {
    "text": "ledger search and then kind of off on the side we have the the analytics and",
    "start": "414020",
    "end": "421400"
  },
  {
    "text": "data warehousing solutions so if we dive deep on each of the solutions that we provide for those broad categories what",
    "start": "421400",
    "end": "428330"
  },
  {
    "text": "would you you know we have on the RTS side we have say both you know the most",
    "start": "428330",
    "end": "435170"
  },
  {
    "text": "database engines available Maria DB we have my sequel we have oracle michael",
    "start": "435170",
    "end": "440810"
  },
  {
    "text": "server we have what else Postgres we have aurora which is kind of",
    "start": "440810",
    "end": "448730"
  },
  {
    "text": "that cloud native reimagining of databases and you know if you were to build a database as a cloud native",
    "start": "448730",
    "end": "454340"
  },
  {
    "text": "situation how would you do that and on Aurora you can build in like the micros",
    "start": "454340",
    "end": "460430"
  },
  {
    "text": "my sequel version or the the Postgres version then you hop over to in-memory",
    "start": "460430",
    "end": "465770"
  },
  {
    "text": "data stores you get ElastiCache you get Redis then you can go over to graph",
    "start": "465770",
    "end": "471590"
  },
  {
    "text": "databases and you get Neptune and that allows you to reference things and both",
    "start": "471590",
    "end": "476600"
  },
  {
    "text": "gremlin and sparkle then you have you",
    "start": "476600",
    "end": "482150"
  },
  {
    "text": "know we have a comment from twitch from mittens the killer bunny and it says flat-file databases so sts-3 select you",
    "start": "482150",
    "end": "491150"
  },
  {
    "text": "really do have flat-file databases you know you can put the query on compressed JSON or compress CSV use and stuff like",
    "start": "491150",
    "end": "496640"
  },
  {
    "text": "that I would argue SD is probably the largest don't sequence but nobody ever talks about you know the the multitude",
    "start": "496640",
    "end": "508220"
  },
  {
    "text": "of things available we even have some newer offerings things like time series and things like quantum ledger database and I don't even think I covered",
    "start": "508220",
    "end": "515000"
  },
  {
    "text": "elastics Amazon Elastic search and what else did I forget document DB dynamo DB",
    "start": "515000",
    "end": "522710"
  },
  {
    "text": "those are crimes and no sequel offerings and I think you know we offer a lot",
    "start": "522710",
    "end": "529370"
  },
  {
    "text": "of managed versions of these databases and to go back to your point Nick of why",
    "start": "529370",
    "end": "537560"
  },
  {
    "text": "do we do this you know a lot of that road map is customer driven so maybe it would help for us to see some kind of",
    "start": "537560",
    "end": "544940"
  },
  {
    "text": "you know visual demo of how these different databases can be used together",
    "start": "544940",
    "end": "550040"
  },
  {
    "text": "so that we could understand why customers are building on purpose-built databases why customers are choosing",
    "start": "550040",
    "end": "555170"
  },
  {
    "text": "different databases instead of throwing everything wholesale under this relational database service so maybe we",
    "start": "555170",
    "end": "560540"
  },
  {
    "text": "can show your screen yeah it'd be good yeah so I think when we all look at",
    "start": "560540",
    "end": "566300"
  },
  {
    "text": "applications we use these all the time right we use these on our phones we go to a website it all looks very put together to us right it looks like one",
    "start": "566300",
    "end": "572540"
  },
  {
    "text": "coherent experience I think that's what everybody's you know when they build an app that's what you're trying to achieve for your customers or your end-users",
    "start": "572540",
    "end": "579010"
  },
  {
    "text": "when you think about like how this is actually architected behind the scenes and you have a lot of you know you have",
    "start": "579010",
    "end": "585140"
  },
  {
    "text": "a lot of latitude in saying okay well you know I have a bunch of different use cases here we have product catalog and",
    "start": "585140",
    "end": "591500"
  },
  {
    "text": "we have a shopping cart and we have a bestseller list we have product search and a recommendation engine and a",
    "start": "591500",
    "end": "596570"
  },
  {
    "text": "leaderboard right those are all very distinct use cases if you look at those use case we say well we're probably not",
    "start": "596570",
    "end": "602930"
  },
  {
    "text": "using the same database and every single one of these use cases behind the scenes this isn't all being just jammed into",
    "start": "602930",
    "end": "609080"
  },
  {
    "text": "one my sequel database right when we think about architecting for scale and functionality and performance we want to",
    "start": "609080",
    "end": "614510"
  },
  {
    "text": "make sure for each of these use cases we're gonna pick the right tool that's gonna help us you know a provide our",
    "start": "614510",
    "end": "620120"
  },
  {
    "text": "customers with a really great experience but also help us grow scale make it something that's sustainable that we can",
    "start": "620120",
    "end": "625730"
  },
  {
    "text": "run this and continue to build on it so we look at this particular you know I",
    "start": "625730",
    "end": "631339"
  },
  {
    "text": "think we're all kind of familiar with what this web application might look like right this folks don't imagine a",
    "start": "631339",
    "end": "636560"
  },
  {
    "text": "company that would have a book store a small online bookstore well they like orange I'm a fan yes I mean it's you",
    "start": "636560",
    "end": "643550"
  },
  {
    "text": "know it's kind of a it's a you know something that's pretty tangible if we look at even something like hey you know what would be you know if we were just",
    "start": "643550",
    "end": "650180"
  },
  {
    "text": "gonna store the metadata for something like our product catalog what would be the different options or what would be",
    "start": "650180",
    "end": "655850"
  },
  {
    "text": "the different data stories we could use that for and and think about what would that that data choice be so we work",
    "start": "655850",
    "end": "661070"
  },
  {
    "text": "backwards in traditional relational database for him you know you would have an author's table you'd have a books table you'd",
    "start": "661070",
    "end": "667570"
  },
  {
    "text": "have a users table you'd have some set of foreign keys relating those you'd have an orders table you'd have all this",
    "start": "667570",
    "end": "673180"
  },
  {
    "text": "stuff and that that actually kind of fits the relational model to a degree",
    "start": "673180",
    "end": "678190"
  },
  {
    "text": "but then when it comes to to rendering at all you know you write these complex",
    "start": "678190",
    "end": "684400"
  },
  {
    "text": "queries to get everything to show up in the fashion that you want and to spare your developers from having to write",
    "start": "684400",
    "end": "690670"
  },
  {
    "text": "these absurd queries with you know in number of joins you know you end up building an ORM and that ORM is yet",
    "start": "690670",
    "end": "700570"
  },
  {
    "text": "another version of some mapper over a relational database when you could have",
    "start": "700570",
    "end": "705700"
  },
  {
    "text": "just done something like this with you know dynamo yeah I mean I'm glad you",
    "start": "705700",
    "end": "710740"
  },
  {
    "text": "brought up or atoms because I think when you look at kind of the evolution of purpose-built databases for folks no",
    "start": "710740",
    "end": "716140"
  },
  {
    "text": "object relational mapper which JSON became very popular in the data tier",
    "start": "716140",
    "end": "721660"
  },
  {
    "text": "right and then people said okay well have these objects in my data tier and I want to persist those to a database but",
    "start": "721660",
    "end": "726820"
  },
  {
    "text": "they don't map naturally to rows and tables and in a normalized schema bar schema and so how do we make this easier",
    "start": "726820",
    "end": "733380"
  },
  {
    "text": "in you know I think folks that have used or MSO their work really great until they don't you know then you kind of",
    "start": "733380",
    "end": "740980"
  },
  {
    "text": "have these challenges and you you know we work a lot with with developers me you know troubleshoot some of these",
    "start": "740980",
    "end": "746200"
  },
  {
    "text": "scenarios and when you bring it all back together again it looks like a document right it's like okay well there's a",
    "start": "746200",
    "end": "752950"
  },
  {
    "text": "whole class of databases that are just purpose-built just to handle documents to make this transition between here's",
    "start": "752950",
    "end": "758680"
  },
  {
    "text": "our I'm storing objects in my application tier and here's how I I can make that easier to persist that and store that in my database to produce you",
    "start": "758680",
    "end": "766240"
  },
  {
    "text": "know reduce that friction so before we launch into this I realized some of our viewers are coming directly from the",
    "start": "766240",
    "end": "771790"
  },
  {
    "text": "dynamodb stream and some of them are joining just now so maybe we could launch into a broad overview of what",
    "start": "771790",
    "end": "778990"
  },
  {
    "text": "time ODB is sure sure well DynamoDB is is a key value store I",
    "start": "778990",
    "end": "784630"
  },
  {
    "text": "mean it's I know you're about service build so DB is is so if we kind of walk",
    "start": "784630",
    "end": "790780"
  },
  {
    "text": "back and you know why we built dynamo DB today why we built it in in 2013 13 it's",
    "start": "790780",
    "end": "800720"
  },
  {
    "text": "really motivated by the fact of there's a really good example of overburdening a relational days beyond its intended",
    "start": "800720",
    "end": "807080"
  },
  {
    "text": "purpose right there's a very public story in 2004 where amazon.com had some",
    "start": "807080",
    "end": "813020"
  },
  {
    "text": "issues in in December which is terrible time for a really wee retailer to have a problem with scaling a database we",
    "start": "813020",
    "end": "820550"
  },
  {
    "text": "looked at the access patterns for how we were actually using that relational database most more primary keys right",
    "start": "820550",
    "end": "826400"
  },
  {
    "text": "that's a key value access pattern bunch of smart people and off wrote the dynamo paper which was really the genesis for",
    "start": "826400",
    "end": "832760"
  },
  {
    "text": "dynamodb and cassandra and they really",
    "start": "832760",
    "end": "838610"
  },
  {
    "text": "looked at you know work backward some here's how actually using the data and here's the technology that can solve that problem and it was also a kind of",
    "start": "838610",
    "end": "845560"
  },
  {
    "text": "understanding that the formal constraints that we had placed on ourselves from this previous era of you",
    "start": "845560",
    "end": "853250"
  },
  {
    "text": "know we need an exact acid we need exact you know consistency and we can't have",
    "start": "853250",
    "end": "860480"
  },
  {
    "text": "replicas everything can only scale up it was kind of a realization that many of those constraints were not realistic and",
    "start": "860480",
    "end": "866180"
  },
  {
    "text": "we never really depended on them on the first place because the application wasn't even possible able to take advantage of those constraints yeah I",
    "start": "866180",
    "end": "872660"
  },
  {
    "text": "mean ultimately like the at the advent of like sequel and relational databases this made it really easy for us to be",
    "start": "872660",
    "end": "878120"
  },
  {
    "text": "able to take data that are a fit that model but it also had the unintended effect of us trying to take all these",
    "start": "878120",
    "end": "883280"
  },
  {
    "text": "other types of data that may not necessarily fit relational databases but we crammed them in there because that",
    "start": "883280",
    "end": "888590"
  },
  {
    "text": "was one of the best tools available to do that and so it was this weird time where people start to think in terms of",
    "start": "888590",
    "end": "895640"
  },
  {
    "text": "the tools they have as opposed to just what is sort of put forth in front of them but DynamoDB really changed a game",
    "start": "895640",
    "end": "901160"
  },
  {
    "text": "with regards to that with sort of blowing the gates open with making making a non relational sort of option",
    "start": "901160",
    "end": "908690"
  },
  {
    "text": "or alternative for it and even now you can you can sort of have relations you know you can write transactions across",
    "start": "908690",
    "end": "913790"
  },
  {
    "text": "multiple tables and you can join these things together in an application level fashion but very quickly for those of",
    "start": "913790",
    "end": "920300"
  },
  {
    "text": "you who have never heard of it before dynamodb you have the core concept of a table this",
    "start": "920300",
    "end": "926120"
  },
  {
    "text": "might be very familiar for those of you coming from the relational world within that table you have a primary key you",
    "start": "926120",
    "end": "931940"
  },
  {
    "text": "have an optional sort key and then that primary key is the is the partitioning key so I probably should call it a",
    "start": "931940",
    "end": "938240"
  },
  {
    "text": "partition key and not a primary key that sort key is optional you can use that to search within the partition key then you",
    "start": "938240",
    "end": "945230"
  },
  {
    "text": "have a set of attributes and those are sparse attributes you don't need the same attributes in every column and they",
    "start": "945230",
    "end": "950420"
  },
  {
    "text": "can be of different types from there you also have global secondary indexes and the way that you provision DynamoDB is",
    "start": "950420",
    "end": "956750"
  },
  {
    "text": "you don't think about servers you don't have to worry about provisioning any servers or maintaining any servers your",
    "start": "956750",
    "end": "962180"
  },
  {
    "text": "access pattern is over an HTTP API where you say hey here's my query I want you",
    "start": "962180",
    "end": "967430"
  },
  {
    "text": "to run it and then send me back the results and you do this over the the the",
    "start": "967430",
    "end": "973160"
  },
  {
    "text": "network really you know you know not using any kind of like custom drivers or we're having to do these complex JDBC",
    "start": "973160",
    "end": "979130"
  },
  {
    "text": "connections and connection pooling or any of this other like old-school stuff with with like proxies and bouncers and",
    "start": "979130",
    "end": "986390"
  },
  {
    "text": "you just say hey I want my data please give it to me and then their service responds and your metered on that you're",
    "start": "986390",
    "end": "993500"
  },
  {
    "text": "priced on that in terms of read capacity units or write capacity units and those",
    "start": "993500",
    "end": "999050"
  },
  {
    "text": "correspond to you know in kilobytes of of access and you use those per second",
    "start": "999050",
    "end": "1004870"
  },
  {
    "text": "and the cool thing about this is that you have a particularly write heavy workload then you can provision more",
    "start": "1004870",
    "end": "1010000"
  },
  {
    "text": "write capacity units if you have a particularly read heavy workload then you can provision more read capacity",
    "start": "1010000",
    "end": "1015070"
  },
  {
    "text": "units and if you want auto scaling click the check box or you turn it on in the API and then if you don't want to deal",
    "start": "1015070",
    "end": "1020500"
  },
  {
    "text": "with any of that capacity management at all you can just turn it on to on-demand requests which is another pricing model",
    "start": "1020500",
    "end": "1026589"
  },
  {
    "text": "that says I'm just gonna pay per request to the database as opposed to paying for this in number of provisioned read",
    "start": "1026590",
    "end": "1032920"
  },
  {
    "text": "capacity units or read capacity units and that is a very brief summary of Dino DB there are a large number of other",
    "start": "1032920",
    "end": "1038260"
  },
  {
    "text": "features like streams and all kinds of other good stuff that maybe we'll have a chance to talk about I think we will but riddle me this though what fundamentally",
    "start": "1038260",
    "end": "1045130"
  },
  {
    "text": "makes dynamo DB more scalable than say like a relational database like what is it how do we access the data what is it",
    "start": "1045130",
    "end": "1051340"
  },
  {
    "text": "architectural underpinnings that what allow us to go beyond do things that would go beyond what you",
    "start": "1051340",
    "end": "1058210"
  },
  {
    "text": "know we previously added or disposable that's a great question I think that you're the perfect person so you look at",
    "start": "1058210",
    "end": "1067149"
  },
  {
    "text": "when you have a key value access pattern you've made an assumption about the data pattern that really allows you to be able to do some more flexible things in",
    "start": "1067149",
    "end": "1073480"
  },
  {
    "text": "the database so if you're just doing key value lookups you can scale that data horizontally and that allows you not to",
    "start": "1073480",
    "end": "1080799"
  },
  {
    "text": "scale up but to scale out and then there really are kind of boundless limits on the size and the amount of write and",
    "start": "1080799",
    "end": "1086259"
  },
  {
    "text": "read throughput that you have but you've also you know you're also changing the way that you're accessing the data but I",
    "start": "1086259",
    "end": "1092320"
  },
  {
    "text": "think if we use like this example is is kind of a driving point to your screen",
    "start": "1092320",
    "end": "1097720"
  },
  {
    "text": "here and continue yes go back we say okay well let's just say we're gonna access the data for you know these",
    "start": "1097720",
    "end": "1105220"
  },
  {
    "text": "particular books that we have here it's a pretty simple data model so maybe this is like a global unique ID is this",
    "start": "1105220",
    "end": "1111070"
  },
  {
    "text": "generated by Python okay sorry I just I recognize the UID for it no no hard",
    "start": "1111070",
    "end": "1117999"
  },
  {
    "text": "questions take you one step back though what are we looking right here so we're Lisa yeah we look yes we're looking at the product table that actually is",
    "start": "1117999",
    "end": "1124080"
  },
  {
    "text": "supplying the information or the metadata that shows you know that displays the cookbooks on our particular",
    "start": "1124080",
    "end": "1129580"
  },
  {
    "text": "website right so this is a books table and we can kind of go back and we can kind of look through all this and you",
    "start": "1129580",
    "end": "1135309"
  },
  {
    "text": "know let's just pick we'll just pick one of these and look at look at the schema",
    "start": "1135309",
    "end": "1140950"
  },
  {
    "text": "right so it's pretty simple right we have an author we have a category we have a of course right we have a string",
    "start": "1140950",
    "end": "1147759"
  },
  {
    "text": "to an s3 bucket that's gonna hold the image for that particular book and then there's gonna be some type of name a",
    "start": "1147759",
    "end": "1153369"
  },
  {
    "text": "price and a rating right and this all works pretty well in a self-contained document right we have a unique",
    "start": "1153369",
    "end": "1158799"
  },
  {
    "text": "identifier so you know if it has enough cardinality it scales really well horizontally and let's go ahead and just",
    "start": "1158799",
    "end": "1165460"
  },
  {
    "text": "like create a new you know let's create a new change this book a little bit let's let's pick let's pick the loose",
    "start": "1165460",
    "end": "1173350"
  },
  {
    "text": "write Duluth Minnesota everything is",
    "start": "1173350",
    "end": "1179619"
  },
  {
    "text": "cheaper in the Midwest and it's also excellent alright so we will save this",
    "start": "1179619",
    "end": "1186419"
  },
  {
    "text": "so we created our we created an item you know and you know we can access that through the key and it provides a really nice",
    "start": "1186419",
    "end": "1192670"
  },
  {
    "text": "way but the nice thing about this architectural choice is I can scale from I don't know how many 70 items here to a",
    "start": "1192670",
    "end": "1199330"
  },
  {
    "text": "million without having to think about me Ark detecting my database right and that provides a really nice flexible scalable",
    "start": "1199330",
    "end": "1205440"
  },
  {
    "text": "data store for this access pattern where you know I know I can go from you know I",
    "start": "1205440",
    "end": "1210490"
  },
  {
    "text": "can 10x my business or my platform on this without having to think about making a different technology choice",
    "start": "1210490",
    "end": "1215700"
  },
  {
    "text": "what other kind of shout-out I have for dine away to be here I think we released",
    "start": "1215700",
    "end": "1220840"
  },
  {
    "text": "a number in one of our shareholder letters several years ago that up to 100",
    "start": "1220840",
    "end": "1226300"
  },
  {
    "text": "milliseconds of latency can correspond to a 4% decrease in sales so it was I",
    "start": "1226300",
    "end": "1233050"
  },
  {
    "text": "might have those exact numbers wrong but it was something along those lines and one of the advantages of DynamoDB is",
    "start": "1233050",
    "end": "1238990"
  },
  {
    "text": "this feature called global tables so you can bring your data closer to your customers in a multi region multi master",
    "start": "1238990",
    "end": "1244360"
  },
  {
    "text": "environment so you can have your tables kind of located in the region closest to your customers and which makes rendering",
    "start": "1244360",
    "end": "1250059"
  },
  {
    "text": "this page significantly faster and then on top of that you have Dax which is yes which is yes yeah actually there's",
    "start": "1250059",
    "end": "1260230"
  },
  {
    "text": "there's a lot of you know like Randall travels a lot right when you get off the plane in London you don't want to spend the latency of your applicant have to",
    "start": "1260230",
    "end": "1268330"
  },
  {
    "text": "incur all that latency to be able to use the apps on your phone right you expect that experience in London to be the same as the experience in LA we already have",
    "start": "1268330",
    "end": "1278050"
  },
  {
    "text": "services like cloud front that helps to distribute static assets globally in to the different regions but for databases bit trickier but having that closer to",
    "start": "1278050",
    "end": "1285190"
  },
  {
    "text": "reduce latency is extremely important and I didn't mean to throw you off there I was just thinking about that as you were walking no it's a great point",
    "start": "1285190",
    "end": "1293110"
  },
  {
    "text": "because when you think about like hey how are the applications that we you know used to built in the 90s different than the ones we did today and you know",
    "start": "1293110",
    "end": "1299110"
  },
  {
    "text": "scale you over excessively like how many people are gonna suffer through you know 400 500 milliseconds for a page to",
    "start": "1299110",
    "end": "1305950"
  },
  {
    "text": "render right we think the Internet's broken at that point seriously when you",
    "start": "1305950",
    "end": "1312790"
  },
  {
    "text": "talk about scale and you know scaling to 100 million items there plenty of web applications even startups that have",
    "start": "1312790",
    "end": "1319020"
  },
  {
    "text": "hundreds of millions of items because you know back in the 90s if you wanted to build a",
    "start": "1319020",
    "end": "1324110"
  },
  {
    "text": "website it was like oh cool I spin up you know I bought my server I put it in my office I plugged in the Ethernet and",
    "start": "1324110",
    "end": "1330320"
  },
  {
    "text": "now I'm good to go and in you know 2019 you can put your website on product con and then",
    "start": "1330320",
    "end": "1336770"
  },
  {
    "text": "overnight you somehow have 10 million users and those become daily active",
    "start": "1336770",
    "end": "1342410"
  },
  {
    "text": "users and you have millions and millions of records and you're not talking about gigabytes of data you're sometimes even",
    "start": "1342410",
    "end": "1348200"
  },
  {
    "text": "not talking about terabytes of data in like many cases you're literally talking about petabytes of data that you're dealing with and then instead of you",
    "start": "1348200",
    "end": "1355100"
  },
  {
    "text": "know millions of requests per second or hundreds of thousands of requests per second it's it's it's hundreds of",
    "start": "1355100",
    "end": "1361490"
  },
  {
    "text": "millions of requests per second it's a much different world than even just 10",
    "start": "1361490",
    "end": "1366800"
  },
  {
    "text": "years ago yeah I mean I think you know one of the big customers for Dino to be a snapchat right I mean think about like",
    "start": "1366800",
    "end": "1372470"
  },
  {
    "text": "what New Year's Eve looks like for them you mean like every single timezone 24 hours everybody's picking up their phone",
    "start": "1372470",
    "end": "1379610"
  },
  {
    "text": "and they need a database that can scale to be able to handle those types of workloads one of the interesting we had",
    "start": "1379610",
    "end": "1384920"
  },
  {
    "text": "a reinvent talk about snapchat and DynamoDB back in 2017 was a 2018 2018",
    "start": "1384920",
    "end": "1392470"
  },
  {
    "text": "either last year or the year before a snapchat came on stage area and talked about the way they use dynamodb and they",
    "start": "1392470",
    "end": "1400220"
  },
  {
    "text": "brought up New Year's Eve they brought up the the World Cup they brought up you know giant sporting events and things world series and becomes one the World",
    "start": "1400220",
    "end": "1406430"
  },
  {
    "text": "Series I mean did they I think so yes for surely but like those are monumental",
    "start": "1406430",
    "end": "1412610"
  },
  {
    "text": "events that are unplanned that if you have to like you know provision your database for a high watermark that's a",
    "start": "1412610",
    "end": "1418040"
  },
  {
    "text": "tough thing to be able to do so before we move on directly I've got another question from the chat from siva fen so",
    "start": "1418040",
    "end": "1424550"
  },
  {
    "text": "question is what is your approach on the scenario where you start using dynamodb and later on you to grab data from",
    "start": "1424550",
    "end": "1429860"
  },
  {
    "text": "different tables is it recommended for this use case and does it perform well for these types of multi or cross-table searches yes",
    "start": "1429860",
    "end": "1437960"
  },
  {
    "text": "so dynamodb supports transactions across multiple tables so if you essentially",
    "start": "1437960",
    "end": "1443600"
  },
  {
    "text": "you grab a context you've got a handler and you say hey handler i would like to perform this transaction on this many",
    "start": "1443600",
    "end": "1450530"
  },
  {
    "text": "items and if i'm not able to complete that transaction please yell at me and",
    "start": "1450530",
    "end": "1456200"
  },
  {
    "text": "give some useful error back to my development environment then there when",
    "start": "1456200",
    "end": "1463220"
  },
  {
    "text": "you go over to the the do you need to talk to different tables I was recently",
    "start": "1463220",
    "end": "1468950"
  },
  {
    "text": "on Twitch with the twitch dev team so Matt Auerbach from the twitch dev team and I we we built a multi-tenant",
    "start": "1468950",
    "end": "1475669"
  },
  {
    "text": "polling system that uses a couple different tables across DynamoDB so one is a a DynamoDB table to track users and",
    "start": "1475669",
    "end": "1482119"
  },
  {
    "text": "one is a dynamodb table to track different polls and different options within those polls you can join those",
    "start": "1482119",
    "end": "1487519"
  },
  {
    "text": "together what I will say is I came from a relational world and I then went on to",
    "start": "1487519",
    "end": "1493820"
  },
  {
    "text": "work in the document world with Mom DB and it took a little while for me to",
    "start": "1493820",
    "end": "1499009"
  },
  {
    "text": "really grok the DynamoDB model so I what I would recommend is we have another",
    "start": "1499009",
    "end": "1505399"
  },
  {
    "text": "episode in a couple of weeks with the amazing Rick Houlihan where we will walk",
    "start": "1505399",
    "end": "1510830"
  },
  {
    "text": "through who speaks by the way at about 95 miles per hour so we're gonna if you",
    "start": "1510830",
    "end": "1517070"
  },
  {
    "text": "want to watch the episode I can also encourage you to play it at half speed",
    "start": "1517070",
    "end": "1522220"
  },
  {
    "text": "we're gonna talk to him about specifically how to model data even across multiple DynamoDB tables and I",
    "start": "1522820",
    "end": "1529190"
  },
  {
    "text": "think that episode is really gonna clarify a lot of the modeling questions that people have about dynamodb I will",
    "start": "1529190",
    "end": "1536059"
  },
  {
    "text": "say that I've been using it for several years and I'm really starting to be able",
    "start": "1536059",
    "end": "1543739"
  },
  {
    "text": "to manipulate the DynamoDB dat model in my head now and I feel like I'm getting a lot of the schema decisions correct on",
    "start": "1543739",
    "end": "1549409"
  },
  {
    "text": "the first try whereas in previous years you know I",
    "start": "1549409",
    "end": "1554600"
  },
  {
    "text": "would have to really think about it for an hour to to to make sure I was building the right model the good news",
    "start": "1554600",
    "end": "1560299"
  },
  {
    "text": "about that though is if you get it wrong so long as you get it wrong early on",
    "start": "1560299",
    "end": "1566299"
  },
  {
    "text": "it's really easy to just create another table and then write some script to move everything in even if you have millions",
    "start": "1566299",
    "end": "1572629"
  },
  {
    "text": "of items it's it's not like a huge lift and shift effort it's just okay cool let me transform it yeah so on the topic of",
    "start": "1572629",
    "end": "1580039"
  },
  {
    "text": "choosing the right database is like even giving a certain set of data depending on your access pattern it may make sense to sum all that in a different database",
    "start": "1580039",
    "end": "1586249"
  },
  {
    "text": "I'm glad you brought that up so I think you look at the and say okay well we just made this book Duluth spaghetti and we can kind of",
    "start": "1586249",
    "end": "1592330"
  },
  {
    "text": "scroll down and find it but that's not really how people search for this type of data right you're gonna go up to the search experience and I'm going to type",
    "start": "1592330",
    "end": "1598149"
  },
  {
    "text": "in Duluth here and I'm gonna search for it that way but that's probably some",
    "start": "1598149",
    "end": "1605110"
  },
  {
    "text": "when I think about that data model though that type of full-text search right I didn't put in an exact key I didn't put in you know I put in",
    "start": "1605110",
    "end": "1610929"
  },
  {
    "text": "something that was partial that's a different data model right that's a different tool that it's purpose-built",
    "start": "1610929",
    "end": "1616239"
  },
  {
    "text": "for that and for that I for this particular database I or for this particular use case I chose the Amazon",
    "start": "1616239",
    "end": "1621820"
  },
  {
    "text": "Elastic search service because it's really good dealing with use cases where I'm gonna throw something in in search",
    "start": "1621820",
    "end": "1628899"
  },
  {
    "text": "in the search box I don't actually quite know what I'm looking for but I want the database to actually come back and say",
    "start": "1628899",
    "end": "1634450"
  },
  {
    "text": "like here's what I think you're looking for let me make a recommendation for you and return that result set and that's a",
    "start": "1634450",
    "end": "1640989"
  },
  {
    "text": "totally different way of storing and querying data than a key value access pattern where you're doing very specific",
    "start": "1640989",
    "end": "1646200"
  },
  {
    "text": "lookups this is much more fuzzy yeah and so to touch actually on like some of this domain-specific problems that exist",
    "start": "1646200",
    "end": "1652600"
  },
  {
    "text": "in search you have things like stop words you have things that people use",
    "start": "1652600",
    "end": "1657639"
  },
  {
    "text": "that maybe like conditionals like and or or there are also times where you don't",
    "start": "1657639",
    "end": "1663009"
  },
  {
    "text": "know exactly what you want but you can think of a concept that may be semantically similar and so how does left to search basically improve that",
    "start": "1663009",
    "end": "1670509"
  },
  {
    "text": "from database alternatives like key value story obviously would only be exact but like what is really possible",
    "start": "1670509",
    "end": "1676090"
  },
  {
    "text": "here under a search based database system yeah so I think we're all very",
    "start": "1676090",
    "end": "1681190"
  },
  {
    "text": "familiar with this use case because I think we're about pretty proficient in going into search engines right and saying like hey I don't know all the",
    "start": "1681190",
    "end": "1687070"
  },
  {
    "text": "words I'm looking for but I think I can describe enough that would get the resort the results back in search index",
    "start": "1687070",
    "end": "1692529"
  },
  {
    "text": "are built on an inverted index which is a totally different way of storing data than a b-tree or which we use in",
    "start": "1692529",
    "end": "1698529"
  },
  {
    "text": "relational databases or a key-value which we use in dynamo and it's really good for being able to there's built-in",
    "start": "1698529",
    "end": "1704799"
  },
  {
    "text": "functionality they'll actually score your search versus the results and actually provide you back kind of a ranked list of scored results and you",
    "start": "1704799",
    "end": "1712179"
  },
  {
    "text": "can tweak that every which way you want it but it actually makes building these types of use cases a lot easier and",
    "start": "1712179",
    "end": "1719980"
  },
  {
    "text": "developers because that functionality is pushed down into the database you're not building that in the application tier after you",
    "start": "1719980",
    "end": "1725909"
  },
  {
    "text": "get back a results that you're pushing those you know you're pushing that functionality and that processing down",
    "start": "1725909",
    "end": "1731070"
  },
  {
    "text": "into to the database and these data structures are optimized for these types",
    "start": "1731070",
    "end": "1736679"
  },
  {
    "text": "of queries they're a lot faster than you know trying to do a regex search on a different type of database for instance",
    "start": "1736679",
    "end": "1742500"
  },
  {
    "text": "while a lot of different databases will support regular expressions as part of their search parameters sometimes they",
    "start": "1742500",
    "end": "1748529"
  },
  {
    "text": "can optimize for prefix matching they can optimize for stuff that's matching or there's some caveats like if you use",
    "start": "1748529",
    "end": "1755340"
  },
  {
    "text": "any like let me let me match this wildcard in the middle of another wildcard your query explodes into this",
    "start": "1755340",
    "end": "1761309"
  },
  {
    "text": "you you know in squared kind of probability or or Big O and you don't",
    "start": "1761309",
    "end": "1767820"
  },
  {
    "text": "want that so the the really cool thing that kind of lips Tamara leucine solar",
    "start": "1767820",
    "end": "1774990"
  },
  {
    "text": "elasticsearch that all of these things do is they have an understanding of the",
    "start": "1774990",
    "end": "1780450"
  },
  {
    "text": "search space and what that means is they understand the English language or they understand the language that you're",
    "start": "1780450",
    "end": "1785669"
  },
  {
    "text": "searching in and then they also understand a lot of the keywords that you're searching on this lets people build faceted search engines which you",
    "start": "1785669",
    "end": "1791820"
  },
  {
    "text": "could also do in dynamodb with that category search and things like that although that would be a table scan so",
    "start": "1791820",
    "end": "1796919"
  },
  {
    "text": "you have to really store the aggregation which might be a good point to bring up in a second yeah okay I didn't mean to",
    "start": "1796919",
    "end": "1804750"
  },
  {
    "text": "jump ahead a foreshadowing so the the cool thing is if you have a word like",
    "start": "1804750",
    "end": "1811850"
  },
  {
    "text": "traveling you can get the root of that word the stem of that word travel and",
    "start": "1811850",
    "end": "1817169"
  },
  {
    "text": "then any of the variations of the word traveling or travel could be used as part of the search parameter space when",
    "start": "1817169",
    "end": "1823379"
  },
  {
    "text": "you're looking for those things and that's done at index time it's done at",
    "start": "1823379",
    "end": "1828509"
  },
  {
    "text": "the ingestion of the data it's not done you know at the time that you're searching so you have this fast inverted",
    "start": "1828509",
    "end": "1833850"
  },
  {
    "text": "index where you can go and say hey okay cool here all my results and elasticsearch also supports some pieces",
    "start": "1833850",
    "end": "1841350"
  },
  {
    "text": "of document storage so you can build a lot of really complex searches that if you teach someone a basic we language",
    "start": "1841350",
    "end": "1848039"
  },
  {
    "text": "like I want to find everything by this author and this is a required field and this title and it must have these words",
    "start": "1848039",
    "end": "1854610"
  },
  {
    "text": "or it must be rated 5 stars and you can build all of that in elasticsearch and",
    "start": "1854610",
    "end": "1860009"
  },
  {
    "text": "you know the 45 minutes yeah it's incredibly powerful for those",
    "start": "1860009",
    "end": "1865200"
  },
  {
    "text": "use cases and you're using the functionality of the database and I think that's a that's a big key is to",
    "start": "1865200",
    "end": "1870360"
  },
  {
    "text": "not reinvent the wheel in your application tier but try to use the functionality that the database was built for and been iterated on for",
    "start": "1870360",
    "end": "1877169"
  },
  {
    "text": "multiple multiple years to optimize for those use cases so maybe we can go back",
    "start": "1877169",
    "end": "1882840"
  },
  {
    "text": "to the demo and I'll stop for a doing no no I think you know so what we did there",
    "start": "1882840",
    "end": "1888869"
  },
  {
    "text": "is kind of interesting you should be asking yourself well Joe you wrote to a DynamoDB table but you just told me you",
    "start": "1888869",
    "end": "1894149"
  },
  {
    "text": "queried elasticsearch so how do you use two databases together right that becomes you know it kind of becomes a",
    "start": "1894149",
    "end": "1899850"
  },
  {
    "text": "question of like hey if you're gonna use multiple databases in a single app how do you get the howdy chance for the data",
    "start": "1899850",
    "end": "1904919"
  },
  {
    "text": "back and forth between you know different applications so what are the",
    "start": "1904919",
    "end": "1910230"
  },
  {
    "text": "really nice features on DynamoDB and I'll create just a you know a new table and just throw Randle's points we'll",
    "start": "1910230",
    "end": "1916950"
  },
  {
    "text": "just call this product which when we",
    "start": "1916950",
    "end": "1923100"
  },
  {
    "text": "created an immediate table we specify the primary key right this is how we access the data so we'll create this this table as a dummy table and one of",
    "start": "1923100",
    "end": "1930899"
  },
  {
    "text": "the really nice features about dynamodb is called streams and streams is is a",
    "start": "1930899",
    "end": "1936749"
  },
  {
    "text": "cue that you process so every time I write or update or delete an item into",
    "start": "1936749",
    "end": "1941820"
  },
  {
    "text": "my dynamodb table it gets put on the queue and then I can read from that cue to say you know write to s3 or I can",
    "start": "1941820",
    "end": "1949049"
  },
  {
    "text": "write it to elasticsearch so I'm gonna go in and I already have the table set up here some enable streams pretty quick",
    "start": "1949049",
    "end": "1955200"
  },
  {
    "text": "right some options the options I think are very interesting because you can say I only want the keys in which case your",
    "start": "1955200",
    "end": "1961080"
  },
  {
    "text": "application can go and look up whatever additional data wants like some query filter or you can say I only want the",
    "start": "1961080",
    "end": "1966389"
  },
  {
    "text": "new stuff or I only want the old stuff or you can say hey I want the change I want the diff basics right so we can",
    "start": "1966389",
    "end": "1971940"
  },
  {
    "text": "enable streams which is pretty quick and then we can go to triggers and triggers really nice this is a way of being able",
    "start": "1971940",
    "end": "1977429"
  },
  {
    "text": "to do asynchronous processing on our content so every time something I already have a lambda function created",
    "start": "1977429",
    "end": "1984450"
  },
  {
    "text": "we won't get into this in this talk but I can say hey a batch size of 1 which I have for my which I have for my demo is saying every",
    "start": "1984450",
    "end": "1991259"
  },
  {
    "text": "time something gets written to this queue I'm gonna kick off this trigger which is a function that knows how to process and write two elasticsearch and",
    "start": "1991259",
    "end": "1997980"
  },
  {
    "text": "I can go ahead and create and that provides a really nice way to do asynchronous processing between my product table and my search because if I",
    "start": "1997980",
    "end": "2005450"
  },
  {
    "text": "think about it my product table ID you know I need that to be you know I need that to be very consistent go resource",
    "start": "2005450",
    "end": "2012169"
  },
  {
    "text": "yeah but if my search is maybe you know 100 milliseconds behind my product table that's perfectly fine I don't want it",
    "start": "2012169",
    "end": "2018529"
  },
  {
    "text": "the other way around so it's a really great way to keep those those two data stores and then be able to leverage the",
    "start": "2018529",
    "end": "2025399"
  },
  {
    "text": "functionality and the purpose of each of them right yeah there's two use cases so",
    "start": "2025399",
    "end": "2032470"
  },
  {
    "text": "when it comes to a small ecommerce site such as this yes searching by terms that you may already",
    "start": "2032470",
    "end": "2039950"
  },
  {
    "text": "know are one very valuable way of finding that and so we talked about last two sorry talk about storing the data",
    "start": "2039950",
    "end": "2045139"
  },
  {
    "text": "and dynamodb but one other thing that's really common is like let's say I want to go buy a book about spaghetti umm",
    "start": "2045139",
    "end": "2051800"
  },
  {
    "text": "what may I want to buy with that you know yeah you you might say like you",
    "start": "2051800",
    "end": "2057169"
  },
  {
    "text": "mean well who else you know bought a book about spaghetti what else what other things did they purchase right you",
    "start": "2057169",
    "end": "2062658"
  },
  {
    "text": "those become very valuable for not only you know building the website but also provides you a lot of value in context",
    "start": "2062659",
    "end": "2068810"
  },
  {
    "text": "is saying well I'm interested in this book but if you actually is spaghetti you might be interested in meatballs and garlic bread and some of these other",
    "start": "2068810",
    "end": "2075079"
  },
  {
    "text": "books and it's really useful to know what other people have purchased if they've purchased this book thank you so",
    "start": "2075079",
    "end": "2081378"
  },
  {
    "text": "if we look at that as a use case that's really a recommendation engine mm-hmm and there's like a lot of work from like",
    "start": "2081379",
    "end": "2087138"
  },
  {
    "text": "machine learning side of trying to predict what people may want but ultimately when you just have a lot of users and you have the behavior of all",
    "start": "2087139",
    "end": "2093770"
  },
  {
    "text": "of them we can still just simply model the frequencies of all of these different things what type of data does",
    "start": "2093770",
    "end": "2099530"
  },
  {
    "text": "this really represent or what type of model does this fit best under so these typically fall under a graph database or a graph model and it for me Nick I like",
    "start": "2099530",
    "end": "2107540"
  },
  {
    "text": "to visualize these things like visual learners so when I get to its so let me",
    "start": "2107540",
    "end": "2113480"
  },
  {
    "text": "just kind of show you like a built a graph model for this to make kind of a little bit easier to understand what",
    "start": "2113480",
    "end": "2118790"
  },
  {
    "text": "what this what this looks like and why this you know how we tie this back the use case so this is a visualization",
    "start": "2118790",
    "end": "2126530"
  },
  {
    "text": "of of a graph for a products and if we look at this there's kind of a couple",
    "start": "2126530",
    "end": "2132590"
  },
  {
    "text": "things to note here we were looking at a graph model the circles are called vertexes and you can kind of think of",
    "start": "2132590",
    "end": "2138410"
  },
  {
    "text": "these as mounds right these are our books or categories or our people and in",
    "start": "2138410",
    "end": "2143570"
  },
  {
    "text": "this particular example these light blue these light blue circles are our books these dark blue circles are our people",
    "start": "2143570",
    "end": "2149720"
  },
  {
    "text": "and then the things between them are called edges right and these can be directed and they can actually have properties that we can query this which",
    "start": "2149720",
    "end": "2156290"
  },
  {
    "text": "makes graph databases unique versus a relational database is that you know the relations are really the first class",
    "start": "2156290",
    "end": "2162650"
  },
  {
    "text": "object in the database not only do they you know provide you know context between things we can actually query him",
    "start": "2162650",
    "end": "2169100"
  },
  {
    "text": "and this attached you know metadata and attributes to them and it can be something that's very powerful to be",
    "start": "2169100",
    "end": "2175610"
  },
  {
    "text": "able to query so if we look at this we start asking questions so we think about our our use case we say okay well I have",
    "start": "2175610",
    "end": "2182630"
  },
  {
    "text": "this book but I want to know who else purchased this book right let's go from this graph so I know there's a few other",
    "start": "2182630",
    "end": "2188090"
  },
  {
    "text": "people that purchase this graph and then I want to know what books they purchased right and then I want to return that",
    "start": "2188090",
    "end": "2194060"
  },
  {
    "text": "back that's my that's my recommendation engine right I want to know what are the books that other people have purchased",
    "start": "2194060",
    "end": "2199570"
  },
  {
    "text": "and how good are those books maybe we shouldn't you know like rank it by descending order so we only return the",
    "start": "2199570",
    "end": "2204800"
  },
  {
    "text": "good stuff the really cool thing I think to point out about graph databases so",
    "start": "2204800",
    "end": "2210770"
  },
  {
    "text": "you could model this in a relational database Fisher people have done well so",
    "start": "2210770",
    "end": "2219080"
  },
  {
    "text": "actually look before we like put that aside to like why would you not want to put this in a graph in a relational",
    "start": "2219080",
    "end": "2224150"
  },
  {
    "text": "database because obviously it may be intuitive where you have a small amount of people a small amount of books you",
    "start": "2224150",
    "end": "2229280"
  },
  {
    "text": "want it to maybe maybe you just have a column for the relationship between each of the two objects it's a zero or one",
    "start": "2229280",
    "end": "2234740"
  },
  {
    "text": "like that makes sense to people but why does that not work at scale this actually segues directly into a question",
    "start": "2234740",
    "end": "2240260"
  },
  {
    "text": "that we have from mittens the killer bunny which is a great user name by the way on twitch who's asking what are some",
    "start": "2240260",
    "end": "2246500"
  },
  {
    "text": "anti patterns like when would we not use a certain database for a certain job and I would say the reason you don't want to",
    "start": "2246500",
    "end": "2253490"
  },
  {
    "text": "use a relational database for this kind of query for this kind of access pattern I",
    "start": "2253490",
    "end": "2258570"
  },
  {
    "text": "think it's fine to model this in a relational database for categories and all these other things if you if you",
    "start": "2258570",
    "end": "2264840"
  },
  {
    "text": "really want to like there's you know as your items grow unbounded that might not work but if you have a finite set of",
    "start": "2264840",
    "end": "2271500"
  },
  {
    "text": "items and you know that they're gonna fit within that relational model sure throw that into a graph into a relational database but when you think",
    "start": "2271500",
    "end": "2277950"
  },
  {
    "text": "about your access patterns when you think about the fact that you want to drive recommendations from that vertice",
    "start": "2277950",
    "end": "2283620"
  },
  {
    "text": "graph you are going to be you're going to end up building several sub tables",
    "start": "2283620",
    "end": "2291780"
  },
  {
    "text": "that are double foreign key relations upon double foreign key relations where",
    "start": "2291780",
    "end": "2297690"
  },
  {
    "text": "those are representing the edges of the connections between the different tables and then those edges are going to have",
    "start": "2297690",
    "end": "2304290"
  },
  {
    "text": "properties themselves which makes writing a query about that they specialized it takes a special human",
    "start": "2304290",
    "end": "2311970"
  },
  {
    "text": "beings to be able to you know explode their mind into this set of tables to just to be able to write the query so",
    "start": "2311970",
    "end": "2318570"
  },
  {
    "text": "it's really about agility development time and access patterns because you get better performance out of a graph",
    "start": "2318570",
    "end": "2324240"
  },
  {
    "text": "database that's optimized for these kinds of traversals instead of trying to throw in and shoehorn it into this",
    "start": "2324240",
    "end": "2330150"
  },
  {
    "text": "relational model yeah and you start talking about recursive sequel queries and then you're doing functional testing",
    "start": "2330150",
    "end": "2335670"
  },
  {
    "text": "and unit testing and sequel and like it's one of those things is that really what you want to spend your time on as a",
    "start": "2335670",
    "end": "2341040"
  },
  {
    "text": "developer is building a graph database plus plus on top of something or you know to be able to answer a question say",
    "start": "2341040",
    "end": "2347790"
  },
  {
    "text": "in Neptune using gremlin it's gonna be something as simple as one I mean again",
    "start": "2347790",
    "end": "2353180"
  },
  {
    "text": "this is really fun for me because that so so what I will say is let's show the",
    "start": "2353180",
    "end": "2359280"
  },
  {
    "text": "gremlin grace and then I'll do my schpeel before we look together creating uh for further let's just like Rio dress like",
    "start": "2359280",
    "end": "2365700"
  },
  {
    "text": "what the goal of what we're trying to use here is so we have a graph database we have vertices which are people and",
    "start": "2365700",
    "end": "2373890"
  },
  {
    "text": "books items purchase circles circles and then we have the relationships or the edges which are these lines and here",
    "start": "2373890",
    "end": "2379950"
  },
  {
    "text": "it's just purchases but we can imagine this could also involve reviews or like return to the item lots of other things",
    "start": "2379950",
    "end": "2385620"
  },
  {
    "text": "yeah so yeah we have people know each other things belong to categories there's all kinds of different relationships that we",
    "start": "2385620",
    "end": "2391710"
  },
  {
    "text": "can model between all of these which help us you know form different complex relationships yeah so right now we",
    "start": "2391710",
    "end": "2397920"
  },
  {
    "text": "imagine that we're on a page for a product and we want to say that okay for a given user we want to query like what",
    "start": "2397920",
    "end": "2405630"
  },
  {
    "text": "are the most commonly bought other books that people who bought this book had",
    "start": "2405630",
    "end": "2410850"
  },
  {
    "text": "right so given that that is the context like now let's go into a query so let's",
    "start": "2410850",
    "end": "2416220"
  },
  {
    "text": "look at this right so we would start off and we would say hey we have our graph we're gonna give a particular vertex this is you know book 34 so we'll start",
    "start": "2416220",
    "end": "2423930"
  },
  {
    "text": "off this book 34 and we want to go in and basically if you kind of think about this visually you go in and say who purchased this book so who are all the",
    "start": "2423930",
    "end": "2430350"
  },
  {
    "text": "other people that purchased that book so that's a directed query in and then you know if we go out from those people what",
    "start": "2430350",
    "end": "2436200"
  },
  {
    "text": "are the other things that they purchased right so that kind of gives us you know here's this book who are the people that",
    "start": "2436200",
    "end": "2442230"
  },
  {
    "text": "purchased it and what are the other books that they purchased so it kind of gives us that second dimensional",
    "start": "2442230",
    "end": "2448370"
  },
  {
    "text": "information we're looking for we want to remove ourselves we don't want to return the same book we just purchased right",
    "start": "2448370",
    "end": "2454290"
  },
  {
    "text": "that's annoying remove any dupes and then we want to order descending by the rating and if we",
    "start": "2454290",
    "end": "2459870"
  },
  {
    "text": "you know and that produces a really nice kind of clean result set then we can then use to be able to supply be able to",
    "start": "2459870",
    "end": "2467940"
  },
  {
    "text": "supply our webpage but the the nice thing about this is like this is pushing",
    "start": "2467940",
    "end": "2473250"
  },
  {
    "text": "the functionality down into something that is built to handle these specific queries so functionality performance and",
    "start": "2473250",
    "end": "2479610"
  },
  {
    "text": "scale you're not gonna have to compromise it on it and you're not going to spend your dev cycles trying to figure out how to do recursive CPUs in a",
    "start": "2479610",
    "end": "2486930"
  },
  {
    "text": "relational database yeah I think developer productivity is really important right like I think when it comes to any tool that you're trying to",
    "start": "2486930",
    "end": "2492750"
  },
  {
    "text": "select for a job you sort of have two major factors you have how productive can my developers be with this tool and",
    "start": "2492750",
    "end": "2499590"
  },
  {
    "text": "how proficient or efficient and that can translate the cost and speed and so on and so forth and so at the point where",
    "start": "2499590",
    "end": "2504780"
  },
  {
    "text": "we there are people out there that build these these algorithms or these search structures and storage structures to",
    "start": "2504780",
    "end": "2510930"
  },
  {
    "text": "optimize that how can we now create different query interfaces to be able to enable our developers to be productive",
    "start": "2510930",
    "end": "2517680"
  },
  {
    "text": "right and so when we talked about our business use case of describing how we to recommend items it was kind of just",
    "start": "2517680",
    "end": "2524700"
  },
  {
    "text": "like three logical steps and so typically in a relational system you have these nested queries it could",
    "start": "2524700",
    "end": "2530220"
  },
  {
    "text": "become extremely inefficient very quickly if you have something messed up with it not logical to debug or try to write these but in a graph database or",
    "start": "2530220",
    "end": "2536910"
  },
  {
    "text": "in a graph schema this actually becomes really straightforward yeah it becomes you know becomes very intuitive",
    "start": "2536910",
    "end": "2543240"
  },
  {
    "text": "especially writing these these queries you know once you have the visualization you know that's the purpose of what it",
    "start": "2543240",
    "end": "2549210"
  },
  {
    "text": "was done for and it's not even just relational me if you tried to do this in a document store a key value store and elasticsearch like it's not what it's",
    "start": "2549210",
    "end": "2556620"
  },
  {
    "text": "not the purpose for that you can do it but it's not the purpose so you're going to spend a lot more time trying to",
    "start": "2556620",
    "end": "2561930"
  },
  {
    "text": "accomplish that I think a couple people have some questions about what Neptune is so graph databases they are optimized",
    "start": "2561930",
    "end": "2571350"
  },
  {
    "text": "for storing and querying vertices and edges and those edges are typically rich edges so they contain data not just",
    "start": "2571350",
    "end": "2578130"
  },
  {
    "text": "about the fact that the items are connected but the type of connection and even metadata associated with that connection like the date that it was",
    "start": "2578130",
    "end": "2583770"
  },
  {
    "text": "made on it's used for modeling everything from social networks to like",
    "start": "2583770",
    "end": "2590940"
  },
  {
    "text": "financial data to detection and life sciences networking if you think about",
    "start": "2590940",
    "end": "2597390"
  },
  {
    "text": "like hey what is your corporate network look like that's a really great use case for modeling in a graph even just connections and employees write HR and",
    "start": "2597390",
    "end": "2604740"
  },
  {
    "text": "being able to think about who works with who and what projects like these are all graphs yeah we're trying to understand",
    "start": "2604740",
    "end": "2610230"
  },
  {
    "text": "sort of like how a bunch of pieces and a giving ecosystem fit together as opposed to just individual properties of one",
    "start": "2610230",
    "end": "2616680"
  },
  {
    "text": "given entity that's really where graph databases start to shine and you can even use it in you know not just for",
    "start": "2616680",
    "end": "2621930"
  },
  {
    "text": "fraud detection but for even more general machine learning and knowledge modeling so I spoke onstage in Berlin",
    "start": "2621930",
    "end": "2628080"
  },
  {
    "text": "with Siemens corporate technology who is a large user of Neptune and what they do",
    "start": "2628080",
    "end": "2633570"
  },
  {
    "text": "is they model all of the different deployments of their hardware that they have and they have these big turbines",
    "start": "2633570",
    "end": "2639930"
  },
  {
    "text": "and they deploy them all over the world and they take all the data about those",
    "start": "2639930",
    "end": "2645120"
  },
  {
    "text": "turbines where it was made when it was made what materials were used how long it's been operation what the type of",
    "start": "2645120",
    "end": "2650550"
  },
  {
    "text": "operations have been and they build this big graph of all of that information and they can query Graff at any point in time to determine",
    "start": "2650550",
    "end": "2656880"
  },
  {
    "text": "where they need to do preventative maintenance because they can say okay based on all of this data show me all",
    "start": "2656880",
    "end": "2662520"
  },
  {
    "text": "the nodes that are you know next in line for preventative maintenance and that allows them to reduce their cost significantly for maintaining that",
    "start": "2662520",
    "end": "2669360"
  },
  {
    "text": "Hardware because they're going out and fixing it before it breaks and if something does break they can repopulate",
    "start": "2669360",
    "end": "2675000"
  },
  {
    "text": "that into the graph so it's a living model and the other thing that I'll point out is Neptune supports two",
    "start": "2675000",
    "end": "2680970"
  },
  {
    "text": "different kind of modes it has the gremlin model that we showed here and that's kind of the the Apache open",
    "start": "2680970",
    "end": "2689160"
  },
  {
    "text": "source tinker pop model and it also supports sparkle or RDF models and I",
    "start": "2689160",
    "end": "2694620"
  },
  {
    "text": "find when I go out and talk with customers that RDF is is more common",
    "start": "2694620",
    "end": "2699720"
  },
  {
    "text": "than gremlin and that's not what I would have expected because a developer I actually find tinker pop to be a little",
    "start": "2699720",
    "end": "2705390"
  },
  {
    "text": "more fun to interact with it's easier to write the queries it's easier for me to think about and it's not XML so I",
    "start": "2705390",
    "end": "2712850"
  },
  {
    "text": "promise I'm not biased at all so then when you get into RDF it's very much XML",
    "start": "2712850",
    "end": "2720150"
  },
  {
    "text": "based and the queries are you know select you know know and query it remanent of sequel almost and the reason",
    "start": "2720150",
    "end": "2728700"
  },
  {
    "text": "people are using these RDF models and this was a realization for me and it makes total sense and Siemens does this",
    "start": "2728700",
    "end": "2734700"
  },
  {
    "text": "as well as a number of other customers is that you have globally unique identifiers across multiple different",
    "start": "2734700",
    "end": "2740130"
  },
  {
    "text": "data sets because they all pull from a common schema and you can say hey different data sets different databases",
    "start": "2740130",
    "end": "2747270"
  },
  {
    "text": "I can join these together at my application level so I can have multiple different graph databases existing all",
    "start": "2747270",
    "end": "2752400"
  },
  {
    "text": "over the world and different you know even a different vendor even a different company and I can have all that information pulled together with a",
    "start": "2752400",
    "end": "2758370"
  },
  {
    "text": "common schema which is a very unique and cool idea and that's how Stevens does it that's a great use case I mean I think",
    "start": "2758370",
    "end": "2765180"
  },
  {
    "text": "yeah they're immensely powerful I think you know a lot of the theory for this",
    "start": "2765180",
    "end": "2771090"
  },
  {
    "text": "has been around for many years and now the technology is catching up with the theory to make this you know to give this to everybody as a tool for people",
    "start": "2771090",
    "end": "2777540"
  },
  {
    "text": "to use and get spin up I mean both Neptune now you can within minutes you can get going with a graph database and start being able to",
    "start": "2777540",
    "end": "2784539"
  },
  {
    "text": "to start modeling some of these relationships and build these experiences so we've talked about dynamo",
    "start": "2784539",
    "end": "2790269"
  },
  {
    "text": "DB so that's kind of our key value to document store we've talked about",
    "start": "2790269",
    "end": "2795390"
  },
  {
    "text": "elastic search which is our search that we've talked about graph what about you",
    "start": "2795390",
    "end": "2801609"
  },
  {
    "text": "know let's say I have a very expensive career that I want to run you remember that DynamoDB query where I was saying hey I have you know I'm gonna have to",
    "start": "2801609",
    "end": "2808630"
  },
  {
    "text": "run a table scan because I want the top 20 best sellers from say to the category",
    "start": "2808630",
    "end": "2814960"
  },
  {
    "text": "of cooking where I want the top 20 best sellers in the category of science fiction you know those are table scans",
    "start": "2814960",
    "end": "2821049"
  },
  {
    "text": "that I I could easily over-provision and have a bunch of rank capacity units but if I'm only gonna run it you know a new",
    "start": "2821049",
    "end": "2827019"
  },
  {
    "text": "book is only published say like once a day or we're only adding you know a couple hundred bucks to our catalogue per day so maybe I only need to run it",
    "start": "2827019",
    "end": "2832720"
  },
  {
    "text": "whenever I add a new book so that triggers my query and then I can store that query somewhere in view that aggregation can you show us this maybe",
    "start": "2832720",
    "end": "2839920"
  },
  {
    "text": "in how you would build that yes I you know the use case that Randall's bringing it up is you don't we don't",
    "start": "2839920",
    "end": "2846549"
  },
  {
    "text": "have to go in most databases or build where we retrieve data from disk not every time we want to be able to go do",
    "start": "2846549",
    "end": "2852039"
  },
  {
    "text": "that table scan or be able to do that query again and we can basically materialize that or store it in a form",
    "start": "2852039",
    "end": "2858839"
  },
  {
    "text": "that's consolidated but also in something that's just memory right if you take the disk go to the database it",
    "start": "2858839",
    "end": "2864519"
  },
  {
    "text": "becomes ten times faster you don't have to do those access patterns you know what they do t right ahead vlogs and it",
    "start": "2864519",
    "end": "2869950"
  },
  {
    "text": "was really fast this is where you go from access times of like milliseconds do something like microseconds and",
    "start": "2869950",
    "end": "2876039"
  },
  {
    "text": "there's a whole case of use cases there with caching and real-time analytics in session states where the data cadmium",
    "start": "2876039",
    "end": "2883539"
  },
  {
    "text": "Emeril right it doesn't have to be persisted to disk because it could be stored in a relational or key value",
    "start": "2883539",
    "end": "2889089"
  },
  {
    "text": "table but you want that access to that data to be lightning-fast right we want to be able to process that",
    "start": "2889089",
    "end": "2895900"
  },
  {
    "text": "data or we got to be relaxing it fast without having to to read and read from disk one really great use case for this",
    "start": "2895900",
    "end": "2901809"
  },
  {
    "text": "is a leaderboard or anything our friends on Twitch are pretty familiar with leaderboards right if you think about a",
    "start": "2901809",
    "end": "2908470"
  },
  {
    "text": "leaderboard and say like hey if I want to show like here are my top 20 bestsellers and every time one of my user",
    "start": "2908470",
    "end": "2914020"
  },
  {
    "text": "came to this website I had to write that run that query select star from orders",
    "start": "2914020",
    "end": "2919960"
  },
  {
    "text": "table group by order by that's gonna get pretty slow as the number of orders that",
    "start": "2919960",
    "end": "2925119"
  },
  {
    "text": "I have increases right that's gonna be a crummy experience I can always catch the result of that you know in any type of",
    "start": "2925119",
    "end": "2932980"
  },
  {
    "text": "you know in Redis or memcache or I can also if I have you know use case say hey I want this to get updated in real time",
    "start": "2932980",
    "end": "2938290"
  },
  {
    "text": "I can use something in Redis which is called a sorted set which is a specialized data type in Redis that",
    "start": "2938290",
    "end": "2943930"
  },
  {
    "text": "makes building leaderboards really easy and why is it because it pushes the data down into the database so let me show",
    "start": "2943930",
    "end": "2950740"
  },
  {
    "text": "you yeah let's hop over to your screen and see what that looks like we've got our good old trusty Redis",
    "start": "2950740",
    "end": "2958150"
  },
  {
    "text": "cluster here yeah so we think about like you know we just went from the use case where I had three books in my",
    "start": "2958150",
    "end": "2965260"
  },
  {
    "text": "leaderboard and I can query the data and I can query Redis I have a sorted set there and I have the you the Goodes is",
    "start": "2965260",
    "end": "2970930"
  },
  {
    "text": "my unique identifier and then we can see the scores that are associated with them right top item has 126 purchases 114 111",
    "start": "2970930",
    "end": "2978900"
  },
  {
    "text": "no you know every time I access this particular data structure in my",
    "start": "2978900",
    "end": "2986859"
  },
  {
    "text": "application it's just a basically key value get from in-memory that's a super fast query right that's millisecond",
    "start": "2986859",
    "end": "2992470"
  },
  {
    "text": "response time I'm not doing this you got huge aggregation and then every time I come back and say like hey let's see do",
    "start": "2992470",
    "end": "3003359"
  },
  {
    "text": "this on the fly I'm not as good as Randall right so if we say like hey we want to control ours basically how I",
    "start": "3003359",
    "end": "3010320"
  },
  {
    "text": "write all of my code so we say okay well let's just say like you know imagine that somebody comes in and they really",
    "start": "3010320",
    "end": "3015330"
  },
  {
    "text": "want to bump up that last book we can add a new member and you know 20 20",
    "start": "3015330",
    "end": "3020730"
  },
  {
    "text": "should give us enough we can increment that sorted set right inquiry increases that to 30 right now our least favorite",
    "start": "3020730",
    "end": "3028650"
  },
  {
    "text": "book is now our most favorite book and next time the user comes to our website if we do a refresh right they're gonna",
    "start": "3028650",
    "end": "3035670"
  },
  {
    "text": "have that really fast instantaneous now ice-cream becomes the top item in our leaderboard right we didn't have to go",
    "start": "3035670",
    "end": "3042150"
  },
  {
    "text": "write that expensive query that did a table scan over all of our orders for the last and days we just updated in memory data",
    "start": "3042150",
    "end": "3049320"
  },
  {
    "text": "structure and we just did it actually really simple yet to produce that and for those of you who may not be familiar",
    "start": "3049320",
    "end": "3055890"
  },
  {
    "text": "with Redis the the core kind of capability you have maybe a hundred and",
    "start": "3055890",
    "end": "3061500"
  },
  {
    "text": "twenty different commands and or maybe fewer than 100 I don't remember exactly you have you know partitioning or",
    "start": "3061500",
    "end": "3069510"
  },
  {
    "text": "sharding if you want but it's at the application level so your driver ends up being aware of that not the server's",
    "start": "3069510",
    "end": "3074910"
  },
  {
    "text": "themselves and everything is kept in memory there's no real persistence well there's there's Redis dump which is a",
    "start": "3074910",
    "end": "3080310"
  },
  {
    "text": "persistence layer of you know some by",
    "start": "3080310",
    "end": "3085380"
  },
  {
    "text": "some definition of persistence you could call registan persistence with it there's nothing really persistent to",
    "start": "3085380",
    "end": "3090930"
  },
  {
    "text": "disk by default within Redis and the way that it works is you store things in one of these predefined data structures they",
    "start": "3090930",
    "end": "3097920"
  },
  {
    "text": "have maps they have sorted sets they have a couple of different trees and other kinds of things or ways of",
    "start": "3097920",
    "end": "3104640"
  },
  {
    "text": "representing things and then on the other side of ElastiCache which is the the managed Redis that we have you also",
    "start": "3104640",
    "end": "3110940"
  },
  {
    "text": "have memcache D which is another offering that you can use memcache D is almost always used to front say a",
    "start": "3110940",
    "end": "3118560"
  },
  {
    "text": "wordpress instance or a drupal instance or your your caching these these HTTP responses they might going into another",
    "start": "3118560",
    "end": "3124650"
  },
  {
    "text": "thing your you know no I'm just saying like the whole if you bring up such a valuable point is the whole world basically all of technology works on a",
    "start": "3124650",
    "end": "3130920"
  },
  {
    "text": "cache right like could you imagine streaming Game of Thrones from disk right like that's not coming from disk",
    "start": "3130920",
    "end": "3136260"
  },
  {
    "text": "when you when you watch that on Sunday nights when you look at you know a lot of apps on your phone a lot of the the content is already cached on your phone",
    "start": "3136260",
    "end": "3143570"
  },
  {
    "text": "websites you know like I don't know if you could get away without using some type of caching these games you really",
    "start": "3143570",
    "end": "3150060"
  },
  {
    "text": "can't especially when you talk about those aggregations because the aggregations are expensive anytime you have to go down to a table scan I don't",
    "start": "3150060",
    "end": "3156570"
  },
  {
    "text": "care how amazing or good your database is you're still looking at a bunch of items that you're planning to discard",
    "start": "3156570",
    "end": "3162210"
  },
  {
    "text": "many tables can with a filter or any sort of you know ad-hoc analytics job",
    "start": "3162210",
    "end": "3167760"
  },
  {
    "text": "you know you can say hey maybe that's a job for our data warehousing maybe that's a job for our analytics for",
    "start": "3167760",
    "end": "3173130"
  },
  {
    "text": "Athena for redshift for something like that but if you're trying to render those results to a consumer to an end",
    "start": "3173130",
    "end": "3179280"
  },
  {
    "text": "user that is difficult to do in real-time so by caching those results and accepting",
    "start": "3179280",
    "end": "3186040"
  },
  {
    "text": "like hey it doesn't matter if this is two or three seconds out of date or even 10 seconds out of date you're going and",
    "start": "3186040",
    "end": "3191920"
  },
  {
    "text": "buying yourself more time on the database side so that you can provision fewer resources and still serve your",
    "start": "3191920",
    "end": "3199000"
  },
  {
    "text": "customers with faster latency yeah and ultimately when you just get to a certain number of users like you will",
    "start": "3199000",
    "end": "3205300"
  },
  {
    "text": "just kill the number of connections your database can have at a certain point like we talked about I was like oh yeah caching is nice it's like pretty cool it",
    "start": "3205300",
    "end": "3211840"
  },
  {
    "text": "has some good side effects like a certain point you kind of you just need it it's essential yeah yeah when we talk",
    "start": "3211840",
    "end": "3216940"
  },
  {
    "text": "about a Tobias lambda and trying to talk to a database you have to think about",
    "start": "3216940",
    "end": "3223570"
  },
  {
    "text": "the way that those lambda are going to talk to your database with DynamoDB you don't to worry about it right you can",
    "start": "3223570",
    "end": "3229060"
  },
  {
    "text": "have L well let me open you know a million connections and then dynamodb",
    "start": "3229060",
    "end": "3234550"
  },
  {
    "text": "says okay fine and if you wanted to do that with relational database you'd have to have something like PG bounce writing",
    "start": "3234550",
    "end": "3241180"
  },
  {
    "text": "to to basically create a connection pool and you know that's a problem is it a",
    "start": "3241180",
    "end": "3248500"
  },
  {
    "text": "problem really that we should solve at some point yeah absolutely and yeah it's",
    "start": "3248500",
    "end": "3254800"
  },
  {
    "text": "uh yeah yeah bake that uh into a product",
    "start": "3254800",
    "end": "3261160"
  },
  {
    "text": "feature of us going forward ready one time all right so we have a few minutes left before we get to ending remarks we",
    "start": "3261160",
    "end": "3269470"
  },
  {
    "text": "just talked up we just touched on memcache I just wanted to say a little bit about time stream so Amazon time",
    "start": "3269470",
    "end": "3277150"
  },
  {
    "text": "stream a database that is build around time series data and so at first glance when developers are working with time",
    "start": "3277150",
    "end": "3283180"
  },
  {
    "text": "series data oftentimes it looks pretty similar to something you throw in a relational database right and they have timestamps exactly so it's essentially",
    "start": "3283180",
    "end": "3290680"
  },
  {
    "text": "just a the data you throw into a relational database however your primary key becomes a timestamp but what we see",
    "start": "3290680",
    "end": "3296740"
  },
  {
    "text": "is that the access patterns both how it's written how it's typically read the orders in which certain date parts of",
    "start": "3296740",
    "end": "3302890"
  },
  {
    "text": "the data will be becoming frequently accessed those are very specific to time series data so could you just talk a",
    "start": "3302890",
    "end": "3309160"
  },
  {
    "text": "little bit Jo about like why time stream came about it and how we've worked on some efficiencies under the hood I know we'll",
    "start": "3309160",
    "end": "3314680"
  },
  {
    "text": "have an episode later on in the season that really goes into it but from the surface level like why timestream why time series database yeah if you look at",
    "start": "3314680",
    "end": "3321609"
  },
  {
    "text": "you know if we worked back into my customers and what they're doing with this you look at a lot of use cases like click streams and telemetry coming off",
    "start": "3321609",
    "end": "3328510"
  },
  {
    "text": "of you know IOT of us as mobile apps sensors on doors and you look at all",
    "start": "3328510",
    "end": "3335109"
  },
  {
    "text": "this data and it's all time-stamped and it's not you know like hey I have a table in one of the fields is is has a",
    "start": "3335109",
    "end": "3341170"
  },
  {
    "text": "timestamp in its like that is the key dimension because we want to understand how this data changes over time it's not",
    "start": "3341170",
    "end": "3346270"
  },
  {
    "text": "just the final value but what was the slope what was the you know how did it what you know I think we've all looked",
    "start": "3346270",
    "end": "3351970"
  },
  {
    "text": "DevOps and yeah and you look at this and you want to understand how it's changed but we look at data models and you can",
    "start": "3351970",
    "end": "3358810"
  },
  {
    "text": "say hey I can look at you know relational at key value a document store and it has a timestamp does that make it",
    "start": "3358810",
    "end": "3364990"
  },
  {
    "text": "a time series database a sort key is not a tiny series when you when you look at",
    "start": "3364990",
    "end": "3371440"
  },
  {
    "text": "those use cases and you can make that assumption that all the data that's going to be coming into the database is",
    "start": "3371440",
    "end": "3376600"
  },
  {
    "text": "going to be both keyed with with time and also queried over a range of time you can do some incredibly amazing",
    "start": "3376600",
    "end": "3382869"
  },
  {
    "text": "things with how you store and access the data you're not trying to make this a",
    "start": "3382869",
    "end": "3388119"
  },
  {
    "text": "general-purpose database where you're also ain't gonna have a key that's now a string or it's gonna be you know some",
    "start": "3388119",
    "end": "3393940"
  },
  {
    "text": "other type of you know float or an int or something it's it's a timestamp and you can do some incredible things that",
    "start": "3393940",
    "end": "3399220"
  },
  {
    "text": "make ingesting including that data incredibly fast orders of magnitude faster than you would other types of",
    "start": "3399220",
    "end": "3405609"
  },
  {
    "text": "data stores because it is optimized for those access patterns inserting things with the timestamp right if you do this",
    "start": "3405609",
    "end": "3411550"
  },
  {
    "text": "on a b-tree right the way that we store data in a lot of a lot of other data stores you kind of get contention on",
    "start": "3411550",
    "end": "3418240"
  },
  {
    "text": "that last page right you're always trying to write to the last page of the b-tree which becomes really inefficient",
    "start": "3418240",
    "end": "3423609"
  },
  {
    "text": "for being able to do this because like if you think about like hey i'm you know i have a whole fleet of tractors and",
    "start": "3423609",
    "end": "3428740"
  },
  {
    "text": "they're writing a million requests per second you know all the different you know information that's coming out about",
    "start": "3428740",
    "end": "3433900"
  },
  {
    "text": "the tractor the engine temperature where you planted something what was the humidity you have a lot of data i'm you",
    "start": "3433900",
    "end": "3440859"
  },
  {
    "text": "want to be able to ingest that so that's what time series databases are for is when you have time series is this you",
    "start": "3440859",
    "end": "3446200"
  },
  {
    "text": "know the prime so this is like an ingestion time and there's an event time and the way the",
    "start": "3446200",
    "end": "3451490"
  },
  {
    "text": "time series is architected is you actually have three different tiers of storage so the first tier you have in",
    "start": "3451490",
    "end": "3456860"
  },
  {
    "text": "memory and this is where you can run a lot of really fast clock calculations and then you have policies that will",
    "start": "3456860",
    "end": "3463220"
  },
  {
    "text": "outline exactly kind of how you should age that data out and I'm gonna go very",
    "start": "3463220",
    "end": "3469280"
  },
  {
    "text": "quickly here because we have one last question from Steve with him and I want to get to the second tier would be on disk and then the third tier would be",
    "start": "3469280",
    "end": "3475070"
  },
  {
    "text": "maybe magnetic storage or or you know a slower version of on disk storage and each one of those is priced differently",
    "start": "3475070",
    "end": "3480470"
  },
  {
    "text": "and you pay for the amount in the number of hours that you store it and then you query that with a common kind of like",
    "start": "3480470",
    "end": "3486470"
  },
  {
    "text": "sequel language that you you're probably used to see both ends question is what our ledger database is used for and",
    "start": "3486470",
    "end": "3492860"
  },
  {
    "text": "ledger databases are basically cryptographically verifiable append-only journals that should scale endlessly the",
    "start": "3492860",
    "end": "3501470"
  },
  {
    "text": "use cases for those like why would I use why would he use a ledger database you want something that you can guarantee",
    "start": "3501470",
    "end": "3507830"
  },
  {
    "text": "pushing that down into the database that nobody has modified and you can go back and verify that say the lineage of a car",
    "start": "3507830",
    "end": "3513830"
  },
  {
    "text": "for a DMV record or you know like the the supply chain for a particular",
    "start": "3513830",
    "end": "3519350"
  },
  {
    "text": "medical device has not been tampered with and you can go back and verify it and it's really hard to build that in",
    "start": "3519350",
    "end": "3525500"
  },
  {
    "text": "another database you can't guarantee that some sysadmin didn't coming in to lead a row or do something you know beyond you don't have any tools to do",
    "start": "3525500",
    "end": "3532160"
  },
  {
    "text": "that that's what this database solves it this database solves is that the database",
    "start": "3532160",
    "end": "3537920"
  },
  {
    "text": "actually provides those guarantees and then you can use you know very tried-and-true math to prove that all",
    "start": "3537920",
    "end": "3544520"
  },
  {
    "text": "right folks we have just a few minutes left so what I want to do very quickly over the next several weeks we are going",
    "start": "3544520",
    "end": "3550370"
  },
  {
    "text": "to be coming to you as many weeks as possible on Tuesday at noon to talk to you about each one of the databases that",
    "start": "3550370",
    "end": "3556640"
  },
  {
    "text": "we covered today as well as a few other concepts like migration we're gonna be talking to principal engineers and experts from around the company and I",
    "start": "3556640",
    "end": "3563120"
  },
  {
    "text": "really encourage you to send in all of your questions let us know what you want to know let us know what we can tell you",
    "start": "3563120",
    "end": "3570410"
  },
  {
    "text": "what we can help you with within your existing architecture make anything you want to end yeah so we have a few ways",
    "start": "3570410",
    "end": "3576140"
  },
  {
    "text": "you can do this if you can't make it for the stream timeslot I'm sorry but we will have these Bob available both on Twitch and on YouTube",
    "start": "3576140",
    "end": "3582410"
  },
  {
    "text": "but we also have an email address that you can reach out to I believe that's a database deep dive and a basis deep",
    "start": "3582410",
    "end": "3587840"
  },
  {
    "text": "database is deep dive at amazon.com you can email us your questions there we will bring them up here in the streams",
    "start": "3587840",
    "end": "3594440"
  },
  {
    "text": "other than that we also have a forum that you can submit your questions through a schedule the next episode I",
    "start": "3594440",
    "end": "3600619"
  },
  {
    "text": "believe is going to be May 7th yeah so be on the lookout send a follow to",
    "start": "3600619",
    "end": "3606140"
  },
  {
    "text": "twitch.tv slash AWS if you aren't already and you should be notified for when these new streams are happening Joe",
    "start": "3606140",
    "end": "3611690"
  },
  {
    "text": "thanks so much for coming hey thanks for having me again Jesse Ron",
    "start": "3611690",
    "end": "3619029"
  }
]