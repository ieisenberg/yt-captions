[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "- Hello, my name is Sourav Biswas.",
    "start": "360",
    "end": "3000"
  },
  {
    "text": "I'm a specialist solution architect",
    "start": "3000",
    "end": "5130"
  },
  {
    "text": "here at Amazon Web Services,",
    "start": "5130",
    "end": "7260"
  },
  {
    "text": "and I work with Amazon DocumentDB team.",
    "start": "7260",
    "end": "9753"
  },
  {
    "text": "Today, we are going to\ntalk about a use case",
    "start": "10740",
    "end": "13260"
  },
  {
    "text": "where you have documents with\narrays of nested JSON objects,",
    "start": "13260",
    "end": "18260"
  },
  {
    "text": "and you want to query based on fields",
    "start": "18270",
    "end": "21030"
  },
  {
    "text": "from those JSON objects.",
    "start": "21030",
    "end": "23160"
  },
  {
    "text": "You will create indexes\non those embedded fields",
    "start": "23160",
    "end": "27630"
  },
  {
    "text": "and then query using a $elemMatch.",
    "start": "27630",
    "end": "29762"
  },
  {
    "text": "Let's see how you can\noptimize queries like these",
    "start": "30750",
    "end": "33900"
  },
  {
    "text": "based on the knowledge of\nthe data that you have stored",
    "start": "33900",
    "end": "37020"
  },
  {
    "text": "in these collections.",
    "start": "37020",
    "end": "38970"
  },
  {
    "start": "38000",
    "end": "81000"
  },
  {
    "text": "Let's briefly talk about Amazon DocumentDB",
    "start": "38970",
    "end": "41580"
  },
  {
    "text": "before we go deep into the use case.",
    "start": "41580",
    "end": "44430"
  },
  {
    "text": "Amazon DocumentDB is a fully managed,",
    "start": "44430",
    "end": "47340"
  },
  {
    "text": "highly scalable, and MongoDB\nAPI-compatible JSON data store.",
    "start": "47340",
    "end": "52023"
  },
  {
    "text": "Unlike traditional on-prem softwares,",
    "start": "52860",
    "end": "55440"
  },
  {
    "text": "you do not need to maintain the servers",
    "start": "55440",
    "end": "57629"
  },
  {
    "text": "or the software itself, Amazon\nWeb Services does it for you.",
    "start": "57630",
    "end": "61530"
  },
  {
    "text": "We are also highly scalable",
    "start": "61530",
    "end": "63809"
  },
  {
    "text": "because of the architecture that we have,",
    "start": "63810",
    "end": "66180"
  },
  {
    "text": "which we are going to\ndiscuss in the next slide,",
    "start": "66180",
    "end": "69240"
  },
  {
    "text": "and we are MongoDB API-compatible,",
    "start": "69240",
    "end": "71729"
  },
  {
    "text": "which means you can use\nyour existing knowledge",
    "start": "71730",
    "end": "74640"
  },
  {
    "text": "of MongoDB drivers and tools",
    "start": "74640",
    "end": "76920"
  },
  {
    "text": "to build applications\nfor Amazon DocumentDB.",
    "start": "76920",
    "end": "79893"
  },
  {
    "start": "81000",
    "end": "179000"
  },
  {
    "text": "Coming to the architecture,",
    "start": "82710",
    "end": "84299"
  },
  {
    "text": "we have a separation of computer storage,",
    "start": "84300",
    "end": "87270"
  },
  {
    "text": "which is a cloud-native\nparadigm that we adapted",
    "start": "87270",
    "end": "90149"
  },
  {
    "text": "when we built our service in 2019.",
    "start": "90150",
    "end": "93180"
  },
  {
    "text": "In this architecture,\nwe have a compute layer,",
    "start": "93180",
    "end": "95970"
  },
  {
    "text": "which primarily provides\nyou with compute power,",
    "start": "95970",
    "end": "99270"
  },
  {
    "text": "like CPU and memory.",
    "start": "99270",
    "end": "101549"
  },
  {
    "text": "You can have one or more\ninstances in the compute layer,",
    "start": "101550",
    "end": "105570"
  },
  {
    "text": "however, having three is optimal",
    "start": "105570",
    "end": "108270"
  },
  {
    "text": "because then your deployment spans",
    "start": "108270",
    "end": "110430"
  },
  {
    "text": "across three availability zones",
    "start": "110430",
    "end": "112410"
  },
  {
    "text": "and you get the highest\navailability of four nines.",
    "start": "112410",
    "end": "116100"
  },
  {
    "text": "The compute layer talks\nto the storage layer,",
    "start": "116100",
    "end": "119310"
  },
  {
    "text": "which is auto-healing, auto-scaling",
    "start": "119310",
    "end": "121860"
  },
  {
    "text": "distributed storage volume.",
    "start": "121860",
    "end": "123990"
  },
  {
    "text": "It spans across three availability zones,",
    "start": "123990",
    "end": "126780"
  },
  {
    "text": "and every time you write a piece of data,",
    "start": "126780",
    "end": "129030"
  },
  {
    "text": "we make six copies of it",
    "start": "129030",
    "end": "130740"
  },
  {
    "text": "and put two copies in each\nof the availability zones.",
    "start": "130740",
    "end": "134940"
  },
  {
    "text": "This all is done internally\nby the storage layer.",
    "start": "134940",
    "end": "137850"
  },
  {
    "text": "I do not have to do anything\nfrom your application",
    "start": "137850",
    "end": "141180"
  },
  {
    "text": "for achieving this durability.",
    "start": "141180",
    "end": "143219"
  },
  {
    "text": "Because of the suppression\nof computer storage,",
    "start": "143220",
    "end": "145710"
  },
  {
    "text": "your storage scales\nautomatically up to 100 terabytes",
    "start": "145710",
    "end": "149400"
  },
  {
    "text": "and your compute layer\ncan scale irrespective",
    "start": "149400",
    "end": "153000"
  },
  {
    "text": "of the amount of data you have\nstored in the storage layer.",
    "start": "153000",
    "end": "156720"
  },
  {
    "text": "So, in order to scale out or scale up,",
    "start": "156720",
    "end": "159750"
  },
  {
    "text": "you have a fixed window of 8 to 10 minutes",
    "start": "159750",
    "end": "162510"
  },
  {
    "text": "within which the operations get completed.",
    "start": "162510",
    "end": "164672"
  },
  {
    "text": "It's good to note that\nthe backup mechanism",
    "start": "165630",
    "end": "167850"
  },
  {
    "text": "is also highly streamlined.",
    "start": "167850",
    "end": "169860"
  },
  {
    "text": "We are continually taking backups",
    "start": "169860",
    "end": "171900"
  },
  {
    "text": "from the storage layer itself",
    "start": "171900",
    "end": "173670"
  },
  {
    "text": "without impacting your compute resources.",
    "start": "173670",
    "end": "176493"
  },
  {
    "start": "179000",
    "end": "223000"
  },
  {
    "text": "Now, coming to the document structure",
    "start": "180540",
    "end": "182549"
  },
  {
    "text": "that we are going to use for our demo.",
    "start": "182550",
    "end": "185370"
  },
  {
    "text": "In this document structure,",
    "start": "185370",
    "end": "186750"
  },
  {
    "text": "we have a field called metadata.",
    "start": "186750",
    "end": "188700"
  },
  {
    "text": "This metadata field is an array,",
    "start": "188700",
    "end": "190709"
  },
  {
    "text": "so one document has one array field,",
    "start": "190710",
    "end": "194610"
  },
  {
    "text": "and inside the array field,\nyou have two nested documents.",
    "start": "194610",
    "end": "197583"
  },
  {
    "text": "Now, the documents have two\nfields called key and value.",
    "start": "198870",
    "end": "203010"
  },
  {
    "text": "Depending on the key, the value changes.",
    "start": "203010",
    "end": "205019"
  },
  {
    "text": "If the key is registered,",
    "start": "205020",
    "end": "207510"
  },
  {
    "text": "then the value is binary, yes or no.",
    "start": "207510",
    "end": "210060"
  },
  {
    "text": "If the field is cycle_number,",
    "start": "210060",
    "end": "212099"
  },
  {
    "text": "then we have a unique value",
    "start": "212100",
    "end": "213660"
  },
  {
    "text": "that is present only in one document.",
    "start": "213660",
    "end": "216980"
  },
  {
    "text": "We have created a compound\nindex on the embedded fields.",
    "start": "216980",
    "end": "220713"
  },
  {
    "start": "223000",
    "end": "257000"
  },
  {
    "text": "And this is the query\nstructure we are looking at.",
    "start": "224070",
    "end": "226570"
  },
  {
    "text": "We need to find documents",
    "start": "227730",
    "end": "230010"
  },
  {
    "text": "that match two conditions",
    "start": "230010",
    "end": "232049"
  },
  {
    "text": "with the and operator.",
    "start": "232050",
    "end": "233970"
  },
  {
    "text": "As you can see, we have\nalso used $elemMatch",
    "start": "233970",
    "end": "237810"
  },
  {
    "text": "because we needed to\nquery embedded fields.",
    "start": "237810",
    "end": "241593"
  },
  {
    "text": "When we are using registered,",
    "start": "242970",
    "end": "245370"
  },
  {
    "text": "the value is a repeating value.",
    "start": "245370",
    "end": "247530"
  },
  {
    "text": "However, when we use\ncycle_number, it's a unique value.",
    "start": "247530",
    "end": "251100"
  },
  {
    "text": "And we are going to use\na combination of both.",
    "start": "251100",
    "end": "253470"
  },
  {
    "text": "Now, let's go over to the demo.",
    "start": "253470",
    "end": "255020"
  },
  {
    "start": "257000",
    "end": "519000"
  },
  {
    "text": "I have already created\na Cloud9 environment",
    "start": "257670",
    "end": "260579"
  },
  {
    "text": "and installed Mongo Shell in it.",
    "start": "260580",
    "end": "263250"
  },
  {
    "text": "I've also created a DocumentDB\ncluster with a primary node.",
    "start": "263250",
    "end": "267393"
  },
  {
    "text": "Right now, I'm logged into the\ncluster with my Mongo Shell.",
    "start": "269550",
    "end": "274214"
  },
  {
    "text": "If I look at the databases,",
    "start": "274214",
    "end": "276123"
  },
  {
    "text": "you can see I have a database\ncalled index_optimization_db,",
    "start": "277770",
    "end": "281819"
  },
  {
    "text": "and it has some data loaded in it.",
    "start": "281820",
    "end": "284370"
  },
  {
    "text": "I'm going to use this database.",
    "start": "284370",
    "end": "286353"
  },
  {
    "text": "And if I look at the collections,",
    "start": "290310",
    "end": "292413"
  },
  {
    "text": "I see there's one collection\ncalled index_optimization_coll.",
    "start": "293760",
    "end": "297210"
  },
  {
    "text": "This is where I have loaded the data.",
    "start": "297210",
    "end": "299060"
  },
  {
    "text": "And as I described in my presentation,",
    "start": "309300",
    "end": "312870"
  },
  {
    "text": "each document has a field called metadata.",
    "start": "312870",
    "end": "315870"
  },
  {
    "text": "Inside metadata, we\nhave two JSON documents.",
    "start": "315870",
    "end": "319083"
  },
  {
    "text": "Each of this document\nhas a field called key",
    "start": "320040",
    "end": "322920"
  },
  {
    "text": "and a field called value.",
    "start": "322920",
    "end": "324630"
  },
  {
    "text": "Depending on the key, your value changes.",
    "start": "324630",
    "end": "327993"
  },
  {
    "text": "If I do the stats,",
    "start": "329070",
    "end": "330870"
  },
  {
    "text": "you can also see that\nI have created an index",
    "start": "330870",
    "end": "333900"
  },
  {
    "text": "on metadata.key and metadata.value.",
    "start": "333900",
    "end": "336093"
  },
  {
    "text": "Now, let's execute the\nqueries that we talked about.",
    "start": "338817",
    "end": "342389"
  },
  {
    "text": "This is the query that I've\nshown in the presentation.",
    "start": "342390",
    "end": "345090"
  },
  {
    "text": "These two have the exact same clauses.",
    "start": "346290",
    "end": "349080"
  },
  {
    "text": "The difference being, in the first query,",
    "start": "349080",
    "end": "352233"
  },
  {
    "text": "the first clause is the key on registered,",
    "start": "353220",
    "end": "357900"
  },
  {
    "text": "and in the second query, the first clause",
    "start": "357900",
    "end": "359880"
  },
  {
    "text": "is the key on cycle_number.",
    "start": "359880",
    "end": "361503"
  },
  {
    "text": "I'm also using $and,",
    "start": "362880",
    "end": "364470"
  },
  {
    "text": "that means both of these\nfilters need to be satisfied",
    "start": "364470",
    "end": "367140"
  },
  {
    "text": "to give me back the result.",
    "start": "367140",
    "end": "368823"
  },
  {
    "text": "Logically, they both represent\nthe same result set, right?",
    "start": "370170",
    "end": "373800"
  },
  {
    "text": "So they would all resolve to\nthe same document or documents.",
    "start": "373800",
    "end": "377940"
  },
  {
    "text": "In this case, I'll only\nreturn one document",
    "start": "377940",
    "end": "380220"
  },
  {
    "text": "because I'm using cycle_number,",
    "start": "380220",
    "end": "382650"
  },
  {
    "text": "which is unique to each document.",
    "start": "382650",
    "end": "384303"
  },
  {
    "text": "Now, let's see when I try\nto execute the first query.",
    "start": "385230",
    "end": "388233"
  },
  {
    "text": "It's not as fast, it's taking seconds.",
    "start": "392640",
    "end": "396390"
  },
  {
    "text": "I've used executionStats\nwith the explain function",
    "start": "396390",
    "end": "400830"
  },
  {
    "text": "to give me output of the\nsteps that the engine performs",
    "start": "400830",
    "end": "403860"
  },
  {
    "text": "in order to give me back the results.",
    "start": "403860",
    "end": "405710"
  },
  {
    "text": "If I look at the executionStats,",
    "start": "407280",
    "end": "409179"
  },
  {
    "text": "only one document was returned.",
    "start": "409179",
    "end": "411120"
  },
  {
    "text": "But why did it take close to 10 seconds?",
    "start": "411120",
    "end": "414750"
  },
  {
    "text": "To understand that, let's go\ndeeper inside the inputStages,",
    "start": "414750",
    "end": "418370"
  },
  {
    "text": "and you see the stage called IXSCAN.",
    "start": "418370",
    "end": "421410"
  },
  {
    "text": "This is the stage where\nthe index would be utilized",
    "start": "421410",
    "end": "424860"
  },
  {
    "text": "to read the index entries and\nfind the potential matches.",
    "start": "424860",
    "end": "429509"
  },
  {
    "text": "Now, we have an and condition.",
    "start": "429510",
    "end": "431460"
  },
  {
    "text": "There are two filters.",
    "start": "431460",
    "end": "433560"
  },
  {
    "text": "Both filters are similar,",
    "start": "433560",
    "end": "435210"
  },
  {
    "text": "so the engine is going to\npick up the first filter",
    "start": "435210",
    "end": "437759"
  },
  {
    "text": "and do a index scan on that filter.",
    "start": "437760",
    "end": "439830"
  },
  {
    "text": "So, in our case, it's registered, yes.",
    "start": "439830",
    "end": "442979"
  },
  {
    "text": "And it matches 750,000 documents, right?",
    "start": "442980",
    "end": "446940"
  },
  {
    "text": "So 75% of all the documents\npresent in the collection.",
    "start": "446940",
    "end": "450333"
  },
  {
    "text": "After it finds all this matching entries,",
    "start": "452670",
    "end": "456000"
  },
  {
    "text": "it has to pass it to the engine",
    "start": "456000",
    "end": "458550"
  },
  {
    "text": "so that it fetches each of those documents",
    "start": "458550",
    "end": "461099"
  },
  {
    "text": "and applies a second filter,\nwhich is a cycle_number,",
    "start": "461100",
    "end": "463980"
  },
  {
    "text": "and finally decide on the results.",
    "start": "463980",
    "end": "466140"
  },
  {
    "text": "That is the process that takes 10 seconds.",
    "start": "466140",
    "end": "468570"
  },
  {
    "text": "So quite fast,",
    "start": "468570",
    "end": "470190"
  },
  {
    "text": "given that you're reading\nthis many documents,",
    "start": "470190",
    "end": "473070"
  },
  {
    "text": "but not a very great overall performance.",
    "start": "473070",
    "end": "475920"
  },
  {
    "text": "So, what can you do to improve this?",
    "start": "475920",
    "end": "478563"
  },
  {
    "text": "Let's run the second query now",
    "start": "480570",
    "end": "482850"
  },
  {
    "text": "and see if my execution time improves.",
    "start": "482850",
    "end": "486360"
  },
  {
    "text": "It's instantaneous.",
    "start": "486360",
    "end": "487919"
  },
  {
    "text": "We are still returning that one document.",
    "start": "487920",
    "end": "490530"
  },
  {
    "text": "However, if you go onto\nthe index scan stage,",
    "start": "490530",
    "end": "492750"
  },
  {
    "text": "we are only returning\none entry from the index.",
    "start": "492750",
    "end": "495870"
  },
  {
    "text": "The next stage, the engine\njust has to fetch one document",
    "start": "495870",
    "end": "499949"
  },
  {
    "text": "and check if registered value is yes,",
    "start": "499950",
    "end": "502920"
  },
  {
    "text": "and if it's so, then\nit'll return the result.",
    "start": "502920",
    "end": "505380"
  },
  {
    "text": "What we are doing here\nis assisting the engine",
    "start": "505380",
    "end": "508200"
  },
  {
    "text": "with our knowledge of our data.",
    "start": "508200",
    "end": "510564"
  },
  {
    "text": "Now, this is a single use case,",
    "start": "510564",
    "end": "513029"
  },
  {
    "text": "but there are multiple such use cases",
    "start": "513030",
    "end": "515159"
  },
  {
    "text": "where the same methodology can be applied",
    "start": "515160",
    "end": "517503"
  },
  {
    "text": "to improve performance.",
    "start": "517503",
    "end": "519792"
  },
  {
    "start": "519000",
    "end": "549000"
  },
  {
    "text": "Hopefully, that demo\nhelped in understanding",
    "start": "519793",
    "end": "522659"
  },
  {
    "text": "how you can apply the\nknowledge of your data",
    "start": "522660",
    "end": "525600"
  },
  {
    "text": "to optimize your queries.",
    "start": "525600",
    "end": "527279"
  },
  {
    "text": "If you want to run this example yourself,",
    "start": "527280",
    "end": "529680"
  },
  {
    "text": "please go to this GitHub repository.",
    "start": "529680",
    "end": "531960"
  },
  {
    "text": "It's also present in the\ndescription of the video.",
    "start": "531960",
    "end": "535260"
  },
  {
    "text": "Do let me know how you have\noptimized your application",
    "start": "535260",
    "end": "539250"
  },
  {
    "text": "using the approach we discussed today.",
    "start": "539250",
    "end": "542280"
  },
  {
    "text": "Thank you again and see\nyou in the next video.",
    "start": "542280",
    "end": "544593"
  }
]