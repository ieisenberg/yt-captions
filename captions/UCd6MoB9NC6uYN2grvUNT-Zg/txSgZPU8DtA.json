[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "hello everyone welcome back to a SS well expected solutions on twitch it's great",
    "start": "30",
    "end": "7109"
  },
  {
    "text": "to be back with you guys talking about the architectural best practices and",
    "start": "7109",
    "end": "12950"
  },
  {
    "text": "well let's jump right into it I'm Giulio I'm the Technical Evangelist here at a",
    "start": "12950",
    "end": "19560"
  },
  {
    "text": "the Blas this means that my job is to be here helping you software engineers",
    "start": "19560",
    "end": "24689"
  },
  {
    "text": "they're successful with our chosen products so the hard part is each one of",
    "start": "24689",
    "end": "31859"
  },
  {
    "text": "you is got a different view on that different challenges and that's why there's well expected framework is",
    "start": "31859",
    "end": "40070"
  },
  {
    "text": "designed in a way that it's not tied to any",
    "start": "40070",
    "end": "46649"
  },
  {
    "start": "45000",
    "end": "200000"
  },
  {
    "text": "specific workload and should be useful for everyone because we're going to talk",
    "start": "46649",
    "end": "51930"
  },
  {
    "text": "about operational excellent security reliability performance efficiency and",
    "start": "51930",
    "end": "57539"
  },
  {
    "text": "cost optimization and I believe those topics are very important for all you",
    "start": "57539",
    "end": "64140"
  },
  {
    "text": "guys so that what we are running in this series",
    "start": "64140",
    "end": "71189"
  },
  {
    "text": "and specifically in today's episode we are going to be looking at reliability and",
    "start": "71189",
    "end": "80189"
  },
  {
    "text": "scaling so let's take a look at at my desktop we can we can change to",
    "start": "80189",
    "end": "88549"
  },
  {
    "text": "this to this document and if we take a look at the well architected framework",
    "start": "88549",
    "end": "94799"
  },
  {
    "text": "each of those pillars is divided into several best practices in the form of",
    "start": "94799",
    "end": "102899"
  },
  {
    "text": "questions and [Music] for example in reliability we already",
    "start": "102899",
    "end": "110189"
  },
  {
    "text": "discussed how to manage AWS service limits for accounts we we've done",
    "start": "110189",
    "end": "119509"
  },
  {
    "text": "planning Network topologies and now we are talking about how to",
    "start": "119540",
    "end": "126590"
  },
  {
    "text": "evolve your system specially in the scaling sense how to adapt to Changez",
    "start": "126590",
    "end": "133170"
  },
  {
    "text": "demand so elasticity is the keyword that we've been working on in this two",
    "start": "133170",
    "end": "141530"
  },
  {
    "text": "aspects first defining the construct to make your application",
    "start": "141530",
    "end": "148200"
  },
  {
    "text": "scale the each of the services where this may",
    "start": "148200",
    "end": "153840"
  },
  {
    "text": "happen so we're talking about instances or functions or containers or",
    "start": "153840",
    "end": "161250"
  },
  {
    "text": "databases each of those will scale a bit differently so we are taking a look into",
    "start": "161250",
    "end": "167240"
  },
  {
    "text": "each of those areas and make sure the workload slope",
    "start": "167240",
    "end": "176460"
  },
  {
    "text": "tested so we are checking out a few tools such as jmeter gatling other",
    "start": "176460",
    "end": "184410"
  },
  {
    "text": "things to help us our load testing so",
    "start": "184410",
    "end": "189560"
  },
  {
    "text": "that's it from the AWS part of things and we're going to take a look at a lot",
    "start": "189560",
    "end": "195930"
  },
  {
    "text": "of code today and that is all shared with you guys here on this github repo",
    "start": "195930",
    "end": "202950"
  },
  {
    "start": "200000",
    "end": "280000"
  },
  {
    "text": "it's mine github for now it's firm and J's life sitting ducks and every line of",
    "start": "202950",
    "end": "211140"
  },
  {
    "text": "code that I show you guys today is totally committed to this repo and dusted here and this is growing as we",
    "start": "211140",
    "end": "219630"
  },
  {
    "text": "continued the series all these days each episode we add a few",
    "start": "219630",
    "end": "228120"
  },
  {
    "text": "templates and scripts in this ribbon okay alright so I can see them some of you on",
    "start": "228120",
    "end": "237269"
  },
  {
    "text": "twitch chat already on on the stream I'm glad to be with you guys please if you",
    "start": "237269",
    "end": "244170"
  },
  {
    "text": "have any questions at all feel free to ask on twitch chat or if you are",
    "start": "244170",
    "end": "251310"
  },
  {
    "text": "watching this recorded afterwards you can get in touch with me on github it's femen J Twitter",
    "start": "251310",
    "end": "260250"
  },
  {
    "text": "its femin J at and Fuhrman J amazon.com as well I would be happy to continue",
    "start": "260250",
    "end": "267090"
  },
  {
    "text": "this conversation with you guys at any time at all but taking the advantage",
    "start": "267090",
    "end": "272580"
  },
  {
    "text": "that we are live together here feel free to just use Twitter chat and the way we are building this as",
    "start": "272580",
    "end": "280820"
  },
  {
    "start": "280000",
    "end": "570000"
  },
  {
    "text": "progressively so we have a few confirmation stacks already built here",
    "start": "280820",
    "end": "287010"
  },
  {
    "text": "that we've done in past episodes so we'll do a a very quick review of what",
    "start": "287010",
    "end": "292680"
  },
  {
    "text": "we've done so far we've done instances on Beanstalk we've",
    "start": "292680",
    "end": "299190"
  },
  {
    "text": "done functions on lambda and now today's topic is containers with elastic",
    "start": "299190",
    "end": "306570"
  },
  {
    "text": "container service and it's in its two flavors ec2 containers and forget",
    "start": "306570",
    "end": "312780"
  },
  {
    "text": "containers so we're going to talk a bit about that and",
    "start": "312780",
    "end": "317840"
  },
  {
    "text": "well let's jump right into it so I have",
    "start": "317840",
    "end": "324060"
  },
  {
    "text": "the repo cloned here in my in my machine so as",
    "start": "324060",
    "end": "330740"
  },
  {
    "text": "this docker episode I already have my docker file open here but before we get",
    "start": "330740",
    "end": "338520"
  },
  {
    "text": "into docker I will reveal very quickly what we have in the rest of the stack so",
    "start": "338520",
    "end": "345350"
  },
  {
    "text": "we begin very simply by creating the CFM",
    "start": "345350",
    "end": "352280"
  },
  {
    "text": "artifacts stack with this shell and the related CloudFormation template and this",
    "start": "352280",
    "end": "359130"
  },
  {
    "text": "is the way I organize my code and everybody does this a bit differently",
    "start": "359130",
    "end": "364380"
  },
  {
    "text": "every context may have its process and best practices but if you",
    "start": "364380",
    "end": "372840"
  },
  {
    "text": "like it this is how I do all my project and you may take a few ideas from it so",
    "start": "372840",
    "end": "379500"
  },
  {
    "text": "the confirmation template here it's very simple just the minimal confirmation",
    "start": "379500",
    "end": "386460"
  },
  {
    "text": "thing you can think of if you're new to confirmation you can see that this is",
    "start": "386460",
    "end": "392460"
  },
  {
    "text": "our main tool for as cold so here I'm declaring in code",
    "start": "392460",
    "end": "398880"
  },
  {
    "text": "what I want my infrastructure on AWS to be so in this case I'm creating a bucket",
    "start": "398880",
    "end": "406620"
  },
  {
    "text": "on the s3 service our storage service and I'm not only creating a bucket I'm",
    "start": "406620",
    "end": "413820"
  },
  {
    "text": "receiving a parameter and I call this parameter gallery ID and in this",
    "start": "413820",
    "end": "420810"
  },
  {
    "text": "template it's not going much doing much it's going directly",
    "start": "420810",
    "end": "426139"
  },
  {
    "text": "to the output and in the output I'm",
    "start": "426139",
    "end": "431630"
  },
  {
    "text": "exporting this value as a reference called the gallery ID and gallery ID",
    "start": "431630",
    "end": "439349"
  },
  {
    "text": "here means just the same as you would call an environment such as production",
    "start": "439349",
    "end": "446610"
  },
  {
    "text": "or dev test or Omo log or pre prod or whatever you call your environments but",
    "start": "446610",
    "end": "453919"
  },
  {
    "text": "environment is a bit of an overloaded word we have Bienstock environments and",
    "start": "453919",
    "end": "459180"
  },
  {
    "text": "things like this so I don't want to have conflicting names I call this galleries",
    "start": "459180",
    "end": "466130"
  },
  {
    "text": "instead of environments and that's just this because they can have several of",
    "start": "466130",
    "end": "472320"
  },
  {
    "text": "those like if I have 10 environments each one of its with its own bucket I",
    "start": "472320",
    "end": "477900"
  },
  {
    "text": "can prefix with the environment name and I have a naming standard like a good",
    "start": "477900",
    "end": "484710"
  },
  {
    "text": "naming convention that I can use to reference elements between one stack and",
    "start": "484710",
    "end": "490560"
  },
  {
    "text": "a mother because this is what the export does it will export this name it will be",
    "start": "490560",
    "end": "499440"
  },
  {
    "text": "like death test common artifacts buckets name so that in other",
    "start": "499440",
    "end": "504979"
  },
  {
    "text": "templates I can import this value and CFN artifacts will create just that so I",
    "start": "504979",
    "end": "515300"
  },
  {
    "text": "feel a few tricks here that we've talked about in the previous episodes we can",
    "start": "515300",
    "end": "521459"
  },
  {
    "text": "query the results of the breast commands that we run on the CLI to create the",
    "start": "521459",
    "end": "527280"
  },
  {
    "text": "stacks or to describe the stacks and things like this so if you want to",
    "start": "527280",
    "end": "535040"
  },
  {
    "text": "create those let's take a look at what the shell script is doing I'm generating",
    "start": "535040",
    "end": "540690"
  },
  {
    "text": "a unique ID for my environment using it to create this gallery idea that I was",
    "start": "540690",
    "end": "548040"
  },
  {
    "text": "talking about in this case it will be just a vamp and the unique number and the gallery and component ID so when I",
    "start": "548040",
    "end": "557400"
  },
  {
    "text": "call create stack I pass the parameter the template body could wait for the",
    "start": "557400",
    "end": "563460"
  },
  {
    "text": "further stacked onto it and that's there is just that and the same idea holds true for every AWS",
    "start": "563460",
    "end": "571530"
  },
  {
    "start": "570000",
    "end": "800000"
  },
  {
    "text": "resource so when I create this in called formation this is our resulting stack",
    "start": "571530",
    "end": "578880"
  },
  {
    "text": "I've done this in each and every episode before so this is getting a bit boring",
    "start": "578880",
    "end": "584460"
  },
  {
    "text": "by now but if you create from the repo you should have the exact same result I",
    "start": "584460",
    "end": "590550"
  },
  {
    "text": "don't need to do this again and on the output step of your resource you're",
    "start": "590550",
    "end": "597240"
  },
  {
    "text": "going to see that we have the bucket created the actual name of the bucket",
    "start": "597240",
    "end": "603600"
  },
  {
    "text": "that was created was generated automatically and this is a very important part",
    "start": "603600",
    "end": "609710"
  },
  {
    "text": "idea that treat resources like Carol not fats or as my",
    "start": "609710",
    "end": "618180"
  },
  {
    "text": "vegetarian friends prefer to say it tricked like disposable cups and not your cherished",
    "start": "618180",
    "end": "625290"
  },
  {
    "text": "mugs right so you can just throw them away and reuse it as convenient for for",
    "start": "625290",
    "end": "632250"
  },
  {
    "text": "a scenario not something you have to take care with all attention so letting Confirmation",
    "start": "632250",
    "end": "639180"
  },
  {
    "text": "generate the names helps you to not care so much about them and in the end the",
    "start": "639180",
    "end": "645900"
  },
  {
    "text": "exports name that may be used to reference this bucket in other stacks is",
    "start": "645900",
    "end": "651900"
  },
  {
    "text": "dead and that the name of this tag and the artifact",
    "start": "651900",
    "end": "657800"
  },
  {
    "text": "bucket name so yeah well this this videos that we are doing",
    "start": "657800",
    "end": "667890"
  },
  {
    "text": "on YouTube go on twitch they go to YouTube after a while so can my friend",
    "start": "667890",
    "end": "674190"
  },
  {
    "text": "kill q3 webs 1 and fullness fullness on 14 you will find",
    "start": "674190",
    "end": "682230"
  },
  {
    "text": "that afterwards both on Twitch and on YouTube and well the the query is is a",
    "start": "682230",
    "end": "690840"
  },
  {
    "text": "bit of a hack my friend thinking the but it's a very important",
    "start": "690840",
    "end": "699000"
  },
  {
    "text": "hack like the query I'm getting the bucket name from the from the stack that",
    "start": "699000",
    "end": "706020"
  },
  {
    "text": "was created so the idea is showing how in a shell script I can best parameters",
    "start": "706020",
    "end": "712590"
  },
  {
    "text": "and fetch outputs so I'm taking from the first stack the output in which the key",
    "start": "712590",
    "end": "720750"
  },
  {
    "text": "is called artifact buckets name and from that getting the output value which is",
    "start": "720750",
    "end": "727640"
  },
  {
    "text": "exactly the value here so this is just to get parameters in an hour of",
    "start": "727640",
    "end": "734910"
  },
  {
    "text": "confirmation to and from shell scripts that's a nice rack and",
    "start": "734910",
    "end": "741650"
  },
  {
    "text": "well this is for for the bucket and this is just to store our code and artifacts",
    "start": "741650",
    "end": "749670"
  },
  {
    "text": "and things like this more interesting would be the base hav DC stack and the",
    "start": "749670",
    "end": "756210"
  },
  {
    "text": "basic JDBC is just a virtual private cloud like a network block divided into",
    "start": "756210",
    "end": "763020"
  },
  {
    "text": "four subnets why four subnets well because we need for high availability to",
    "start": "763020",
    "end": "770130"
  },
  {
    "text": "have them in separate availability zones everything that we have in 180 we have",
    "start": "770130",
    "end": "776910"
  },
  {
    "text": "to having another so we have two public subnets and to private subnets that's",
    "start": "776910",
    "end": "784310"
  },
  {
    "text": "there's people who do three AZ's for a day's depends on what you have available on on your region",
    "start": "784310",
    "end": "792360"
  },
  {
    "text": "this may change that but more than one is certainly very desirable and",
    "start": "792360",
    "end": "798800"
  },
  {
    "text": "let's take a look at that template and this and its shell script so we can see",
    "start": "798800",
    "end": "807570"
  },
  {
    "text": "that this is very straightforward to just set the cyber blocks and create the",
    "start": "807570",
    "end": "814860"
  },
  {
    "text": "AC to V PC create the subnets and here it is very important to see the",
    "start": "814860",
    "end": "823110"
  },
  {
    "text": "properties like how do you know what those properties are and what a -",
    "start": "823110",
    "end": "828329"
  },
  {
    "text": "everything is on the confirmation box and they help a lot in",
    "start": "828329",
    "end": "834620"
  },
  {
    "text": "finding out how to declare this because you have examples here and you can see",
    "start": "834620",
    "end": "842790"
  },
  {
    "text": "for example the cyber block property is the site or blog for the V PC want to",
    "start": "842790",
    "end": "848790"
  },
  {
    "text": "cover it is required it is a string and if you update it it will need to replace",
    "start": "848790",
    "end": "855930"
  },
  {
    "text": "your V PC and this is quite important to understand what confirmation will do",
    "start": "855930",
    "end": "861899"
  },
  {
    "text": "when you change this value for example if you change the enabled EMS support",
    "start": "861899",
    "end": "867360"
  },
  {
    "text": "property and deploy her stack again this will have this is not required it's a",
    "start": "867360",
    "end": "874199"
  },
  {
    "text": "boolean and requires no interruption on your stack so this can help you understand when things",
    "start": "874199",
    "end": "882120"
  },
  {
    "text": "would stop or replace it or continue with just a config change right and this",
    "start": "882120",
    "end": "891480"
  },
  {
    "start": "890000",
    "end": "1068000"
  },
  {
    "text": "is just to set up the network so this is the environment VP scene and again this",
    "start": "891480",
    "end": "899670"
  },
  {
    "text": "little trick here get Easy's from the region and get the first we'll get the",
    "start": "899670",
    "end": "905880"
  },
  {
    "text": "US in the first easy and doing the same thing with an index of one will get us",
    "start": "905880",
    "end": "912510"
  },
  {
    "text": "to the second easy on the region and so we guarantee that those two subnets are",
    "start": "912510",
    "end": "918690"
  },
  {
    "text": "not in the same region this for the public subnets same thing for the for",
    "start": "918690",
    "end": "924300"
  },
  {
    "text": "the private subnet see em so then for a network to be public it's gotta have an",
    "start": "924300",
    "end": "931410"
  },
  {
    "text": "Internet gateway and the Internet gateway needs to be attached to the V PC",
    "start": "931410",
    "end": "936569"
  },
  {
    "text": "so here's how we do it the the routing tables public routing goes to the",
    "start": "936569",
    "end": "942720"
  },
  {
    "text": "Internet everything else is internal and so on so forth binding the subnets to",
    "start": "942720",
    "end": "948870"
  },
  {
    "text": "the routing tables mat gateways so that the internal networks instances can go",
    "start": "948870",
    "end": "956309"
  },
  {
    "text": "out to the internet from network address translation and that's our network",
    "start": "956309",
    "end": "962970"
  },
  {
    "text": "infrastructure and well to be honest I'm",
    "start": "962970",
    "end": "970069"
  },
  {
    "text": "talking about other options for declaring confirmation templates and",
    "start": "970069",
    "end": "976230"
  },
  {
    "text": "other infrastructure as code shows like troposphere or terraform there's",
    "start": "976230",
    "end": "983240"
  },
  {
    "text": "certainly a lot of discussion there then some things that they're that close",
    "start": "983240",
    "end": "989430"
  },
  {
    "text": "formation does that none of the others do and something that the others do and not and that conservation is not I'm",
    "start": "989430",
    "end": "996829"
  },
  {
    "text": "I'm not a huge you I use it down stools in the past both troposphere and called",
    "start": "996829",
    "end": "1004160"
  },
  {
    "text": "and terraform but I will show you guys the thing about cloud formation is it's",
    "start": "1004160",
    "end": "1011660"
  },
  {
    "text": "not only text it's not only declaring how things are but how they",
    "start": "1011660",
    "end": "1019339"
  },
  {
    "text": "relate to each other and composition the confirmation offers",
    "start": "1019339",
    "end": "1025730"
  },
  {
    "text": "today I don't see any other tools like to bind the life cycles with nested",
    "start": "1025730",
    "end": "1032750"
  },
  {
    "text": "stack and cross that Clarence's and stack sets this kind of thing is very",
    "start": "1032750",
    "end": "1038630"
  },
  {
    "text": "important for a complex architecture I don't see a lot of that in other tools",
    "start": "1038630",
    "end": "1043788"
  },
  {
    "text": "but that's of course my preference and they made a blue ass that's what we focus on this and I can",
    "start": "1043789",
    "end": "1051730"
  },
  {
    "text": "ensure you that it's just two different ways of getting to the same results and",
    "start": "1051730",
    "end": "1057140"
  },
  {
    "text": "if there is anything that you would like to see how to do on conformation",
    "start": "1057140",
    "end": "1062500"
  },
  {
    "text": "specifically you can just ask and I will cover it okay so the",
    "start": "1062500",
    "end": "1072000"
  },
  {
    "text": "this is the network definitions then and you can see the same pattern here the",
    "start": "1072420",
    "end": "1079000"
  },
  {
    "text": "every cell every ID everything that I want to reference in other templates I",
    "start": "1079000",
    "end": "1085000"
  },
  {
    "text": "export so this gallery is the VP CID the",
    "start": "1085000",
    "end": "1091480"
  },
  {
    "text": "idea of the subnets and everything is exported by CloudFormation so here in",
    "start": "1091480",
    "end": "1098050"
  },
  {
    "text": "the confirmation console in the base hav PC stack you can see here the the same",
    "start": "1098050",
    "end": "1106120"
  },
  {
    "text": "that M and each of those values and the export names and the values that they",
    "start": "1106120",
    "end": "1112720"
  },
  {
    "text": "have so that on my on the first episode in the series we",
    "start": "1112720",
    "end": "1119530"
  },
  {
    "text": "did been stopped with regular instances so very the closest as possible as you",
    "start": "1119530",
    "end": "1127030"
  },
  {
    "text": "would have on your traditional application server or if you are already running on the cloud perhaps you're",
    "start": "1127030",
    "end": "1132730"
  },
  {
    "text": "already using Beanstalk and when using this when creating the Beanstalk",
    "start": "1132730",
    "end": "1139420"
  },
  {
    "text": "environment you can import the values from the other templates so when I do",
    "start": "1139420",
    "end": "1147160"
  },
  {
    "text": "this let's take the subnet definitions so",
    "start": "1147160",
    "end": "1152650"
  },
  {
    "text": "here in this namespace property in the breasts is it - BBC subnets I'm telling",
    "start": "1152650",
    "end": "1160210"
  },
  {
    "text": "Beanstalk that I want to use my subnet a ID and my subnet B ID under this",
    "start": "1160210",
    "end": "1167770"
  },
  {
    "text": "gathering and again this gallery ID is just a hack so I can have several",
    "start": "1167770",
    "end": "1173280"
  },
  {
    "text": "environments and not crash them so I can have unique IDs and reference any amount",
    "start": "1173280",
    "end": "1179710"
  },
  {
    "text": "of stacks that I'd like but it could be just a simple string this is a bit of",
    "start": "1179710",
    "end": "1187320"
  },
  {
    "text": "one way of doing things if you don't have many stacks at the same time maybe you",
    "start": "1187770",
    "end": "1193080"
  },
  {
    "text": "don't need it but I highly recommend that it helps me a lot but when you use",
    "start": "1193080",
    "end": "1200490"
  },
  {
    "text": "cross stack references you have a consistent naming standard like",
    "start": "1200490",
    "end": "1205820"
  },
  {
    "text": "this one is what I use but anything should work just the same and",
    "start": "1205820",
    "end": "1213950"
  },
  {
    "start": "1210000",
    "end": "1301000"
  },
  {
    "text": "this is how this stack came to be on elastic beanstalk and what application",
    "start": "1213950",
    "end": "1222480"
  },
  {
    "text": "is that like when I'm when I hit this endpoint URL like when I hit this code",
    "start": "1222480",
    "end": "1229410"
  },
  {
    "text": "what's happening here so I have this bundle the source bundle pointed to my",
    "start": "1229410",
    "end": "1236370"
  },
  {
    "text": "python ad I'm here in my Python app you will see that it's very simple it's just",
    "start": "1236370",
    "end": "1242910"
  },
  {
    "text": "a Fibonacci act like just calculating Fibonacci sequences and I have a few of",
    "start": "1242910",
    "end": "1251040"
  },
  {
    "text": "those a few different methods so you have different computes types and we can play with it a",
    "start": "1251040",
    "end": "1257580"
  },
  {
    "text": "little bit but this is the Fibonacci with generators the Fibonacci with",
    "start": "1257580",
    "end": "1264179"
  },
  {
    "text": "memorize it functions recursive implementation iterative implementation and it's the same function every",
    "start": "1264179",
    "end": "1271970"
  },
  {
    "text": "deployment that we are doing here it's the same Fibonacci functions and in this",
    "start": "1271970",
    "end": "1277950"
  },
  {
    "text": "series we are going to dive deeper of course this is just compute but in the next episodes we're going to add",
    "start": "1277950",
    "end": "1284420"
  },
  {
    "text": "databases message queues in memory caches log storage and whatever you guys think it's",
    "start": "1284420",
    "end": "1291929"
  },
  {
    "text": "interesting we are starting with scaling in compute is growing in complexity as you can as",
    "start": "1291929",
    "end": "1299760"
  },
  {
    "text": "you can see so this is being stalked and being stalled is pretty simple to deploy",
    "start": "1299760",
    "end": "1306750"
  },
  {
    "start": "1301000",
    "end": "1400000"
  },
  {
    "text": "but not so simple when you go to scaling",
    "start": "1306750",
    "end": "1312210"
  },
  {
    "text": "because there's a lot you have to define and we're going to see what those those issues are here in this Beanstalk app as",
    "start": "1312210",
    "end": "1320880"
  },
  {
    "text": "we've done it in the first thing this in this first episode the scaling part was",
    "start": "1320880",
    "end": "1327360"
  },
  {
    "text": "defined as being stock properties so here in the sirs main",
    "start": "1327360",
    "end": "1337280"
  },
  {
    "text": "Python resource for the dot B B extensions I",
    "start": "1337280",
    "end": "1342929"
  },
  {
    "text": "think the S code is read hiding me something here",
    "start": "1342929",
    "end": "1350480"
  },
  {
    "text": "the BB extensional resources that I have let me find it on the console or",
    "start": "1352490",
    "end": "1360889"
  },
  {
    "text": "it's not it be extensions",
    "start": "1362539",
    "end": "1368960"
  },
  {
    "text": "all right where are those guys",
    "start": "1368960",
    "end": "1373039"
  },
  {
    "text": "well I'll have to find that for you guys later but the idea is that you have to",
    "start": "1380030",
    "end": "1386580"
  },
  {
    "text": "set up by hand what are the alarms and everything that we set by hand like when",
    "start": "1386580",
    "end": "1392789"
  },
  {
    "text": "do we want to scale up when do you want to scale down what are the auto scaling policies and things like this and",
    "start": "1392789",
    "end": "1401120"
  },
  {
    "start": "1400000",
    "end": "1635000"
  },
  {
    "text": "recently we've been talking a lot about serverless because that's much simpler",
    "start": "1401120",
    "end": "1406770"
  },
  {
    "text": "if we take a look at the server last stack that I have defined here I",
    "start": "1406770",
    "end": "1414470"
  },
  {
    "text": "just tell for each function that I have on my code",
    "start": "1414470",
    "end": "1422100"
  },
  {
    "text": "I bind them to a handler so thus the on",
    "start": "1422100",
    "end": "1427500"
  },
  {
    "text": "Beanstalk they were all being served by flask so I have a Python running with",
    "start": "1427500",
    "end": "1434130"
  },
  {
    "text": "flask and manages my me here it's managed by Amazon so I don't deploy the",
    "start": "1434130",
    "end": "1440280"
  },
  {
    "text": "package I deployed the functions specifically so here I deploy one of",
    "start": "1440280",
    "end": "1445530"
  },
  {
    "text": "them the dirty version here at deploy a mother one the recursive version here",
    "start": "1445530",
    "end": "1451020"
  },
  {
    "text": "the memo I said and so on and so forth and I put each of those behind an API so",
    "start": "1451020",
    "end": "1458599"
  },
  {
    "text": "one different path in the get method they will have each one their own REST",
    "start": "1458599",
    "end": "1464239"
  },
  {
    "text": "API and in the end I can export the target so you can hit those functions as",
    "start": "1464239",
    "end": "1472099"
  },
  {
    "text": "they go so that's the again a flavor of confirmation",
    "start": "1472099",
    "end": "1479239"
  },
  {
    "text": "confirmation we used several s transformations to transform this in the",
    "start": "1479239",
    "end": "1485509"
  },
  {
    "text": "rest serverless functions in lambda functions with much more properties and and things like this so",
    "start": "1485509",
    "end": "1493479"
  },
  {
    "text": "we are talking about a bit of two extremes here extreme cases because on",
    "start": "1493479",
    "end": "1500449"
  },
  {
    "text": "this one function side we have two we don't have",
    "start": "1500449",
    "end": "1507829"
  },
  {
    "text": "a lot of control like what is in this machine what is on this instance how is",
    "start": "1507829",
    "end": "1513499"
  },
  {
    "text": "it gonna run how's it gonna scale up Amazon will just provision as many",
    "start": "1513499",
    "end": "1519679"
  },
  {
    "text": "executions of this function as you have cause right",
    "start": "1519679",
    "end": "1525309"
  },
  {
    "text": "and the about",
    "start": "1526599",
    "end": "1531819"
  },
  {
    "text": "so tomorrow about good starting points and",
    "start": "1531819",
    "end": "1537589"
  },
  {
    "text": "documentation for s3 mode and react take a look at the video section on the",
    "start": "1537589",
    "end": "1544940"
  },
  {
    "text": "twitch channel right here a couple days ago Nikki and am just did a stream",
    "start": "1544940",
    "end": "1551509"
  },
  {
    "text": "covering just that if you go through aws.amazon.com slash developers you will find that",
    "start": "1551509",
    "end": "1558319"
  },
  {
    "text": "their their code and right here on the video step you can see they them going",
    "start": "1558319",
    "end": "1565489"
  },
  {
    "text": "through it and they do exactly that a single page web application posted on a string and they're using angular in this",
    "start": "1565489",
    "end": "1573919"
  },
  {
    "text": "first one but react would be pretty seen similar",
    "start": "1573919",
    "end": "1578949"
  },
  {
    "text": "definitely check them out but today is about containers so let's go to that",
    "start": "1578949",
    "end": "1586099"
  },
  {
    "text": "because in Cerberus you can even have to the",
    "start": "1586099",
    "end": "1592420"
  },
  {
    "text": "Container you just deploy our function and go but perhaps you'd like more control but not so much as to go down to",
    "start": "1592420",
    "end": "1600880"
  },
  {
    "text": "managing your own instances so I believe containers can help you balance this",
    "start": "1600880",
    "end": "1608140"
  },
  {
    "text": "abstraction level have some control on your operating system and how your",
    "start": "1608140",
    "end": "1613800"
  },
  {
    "text": "software runs in more details than you would be able with serverless and at the",
    "start": "1613800",
    "end": "1620950"
  },
  {
    "text": "same time having some convenience and trade-offs to make it not so complex as",
    "start": "1620950",
    "end": "1627880"
  },
  {
    "text": "managing everything yourself so that's what we would be trying to achieve day",
    "start": "1627880",
    "end": "1633720"
  },
  {
    "text": "so if we are trying to build a container based app and deploy container based",
    "start": "1633720",
    "end": "1640540"
  },
  {
    "start": "1635000",
    "end": "1900000"
  },
  {
    "text": "apps the first thing to create is a docker file so here in this bokor file",
    "start": "1640540",
    "end": "1646300"
  },
  {
    "text": "I'm defining my app so I'm starting from Amazon Linux and this is the very same",
    "start": "1646300",
    "end": "1654910"
  },
  {
    "text": "Amazon Linux that you have on ec2 instances but in a docker container in",
    "start": "1654910",
    "end": "1660400"
  },
  {
    "text": "the latest version I'm gonna create my home as Docs directory for sitting ducks",
    "start": "1660400",
    "end": "1666640"
  },
  {
    "text": "that's the name of the Maya change the deer for that and copy everything on this directory from this",
    "start": "1666640",
    "end": "1674170"
  },
  {
    "text": "buffer file to there so it has my source code I didn't need to copy everything I",
    "start": "1674170",
    "end": "1680559"
  },
  {
    "text": "could copy just what I need but then I would have to tear it deep and well that",
    "start": "1680559",
    "end": "1686770"
  },
  {
    "text": "would take a lot of time so I'm just copying the whole source installing Python tree installing my app",
    "start": "1686770",
    "end": "1695550"
  },
  {
    "text": "dependencies in this case it's just flask not much not a lot just possible",
    "start": "1695550",
    "end": "1703960"
  },
  {
    "text": "and then I'm setting my I just run this for",
    "start": "1703960",
    "end": "1710740"
  },
  {
    "text": "the bug purposes I can easily remove this not necessary and",
    "start": "1710740",
    "end": "1716580"
  },
  {
    "text": "this is with the bug enabled you can choose like if you want you to build your Python or not I'll leave it on and",
    "start": "1716580",
    "end": "1723650"
  },
  {
    "text": "my source application file the port that I'm exposing and the entry point so I'm",
    "start": "1723650",
    "end": "1730980"
  },
  {
    "text": "running flash on every host on the instance and that's it so I can butter",
    "start": "1730980",
    "end": "1737340"
  },
  {
    "text": "build and this will build my container image",
    "start": "1737340",
    "end": "1747230"
  },
  {
    "text": "like give the file system starting from Amazon Linux do all this step that I",
    "start": "1747230",
    "end": "1753960"
  },
  {
    "text": "mentioned create this nice little package that we call a docker image and then I can reuse this as is without",
    "start": "1753960",
    "end": "1762270"
  },
  {
    "text": "having to change my infrastructure at all I can just start as many copies of",
    "start": "1762270",
    "end": "1768210"
  },
  {
    "text": "this small virtual machine as I want so that's it and it just takes a bit and",
    "start": "1768210",
    "end": "1777960"
  },
  {
    "text": "there we go and I can now run this on my own machines",
    "start": "1777960",
    "end": "1785960"
  },
  {
    "text": "[Music] like this",
    "start": "1787960",
    "end": "1793010"
  },
  {
    "text": "with dr. Ron so I tell docker to run this image with this port I ran the one",
    "start": "1794510",
    "end": "1802590"
  },
  {
    "text": "I push it to docker hub this is on bucker hub by the way you guys want to try this image but now I can run it",
    "start": "1802590",
    "end": "1810150"
  },
  {
    "text": "anywhere and on my machine you can see that I",
    "start": "1810150",
    "end": "1815600"
  },
  {
    "text": "have let me let me show you guys",
    "start": "1815600",
    "end": "1821540"
  },
  {
    "text": "so localhost 5000 should work",
    "start": "1821540",
    "end": "1828590"
  },
  {
    "text": "yay and on",
    "start": "1828590",
    "end": "1835070"
  },
  {
    "text": "feeb let's try the 13th version with X equal",
    "start": "1835070",
    "end": "1842010"
  },
  {
    "text": "to 10 so we've got 55 we could 100 and",
    "start": "1842010",
    "end": "1847560"
  },
  {
    "text": "get the component for that so this is how we run on the container we could we",
    "start": "1847560",
    "end": "1856200"
  },
  {
    "text": "do the same thing in many other ways so we could run this same cold as a flask",
    "start": "1856200",
    "end": "1861580"
  },
  {
    "text": "run we could do the same thing as serverless so here with let me see if",
    "start": "1861580",
    "end": "1870910"
  },
  {
    "text": "it's this one there is we did some API local Saint",
    "start": "1870910",
    "end": "1876100"
  },
  {
    "text": "Rocco well we can check the we need to I would need",
    "start": "1876100",
    "end": "1884559"
  },
  {
    "text": "to check the the right command but we can run the same thing server less on the local machine using Sam local that's",
    "start": "1884559",
    "end": "1891850"
  },
  {
    "text": "the server less application model but now let's stick to containers so we",
    "start": "1891850",
    "end": "1897460"
  },
  {
    "text": "don't lose the thread here so now we were able to run this",
    "start": "1897460",
    "end": "1903070"
  },
  {
    "start": "1900000",
    "end": "2220000"
  },
  {
    "text": "container on our own machine now we want to run this on the cloud and upload it",
    "start": "1903070",
    "end": "1909220"
  },
  {
    "text": "and have it act manage it for us and there are two ways to do it actually",
    "start": "1909220",
    "end": "1917580"
  },
  {
    "text": "so we can run containers on VCS so easy",
    "start": "1918750",
    "end": "1924100"
  },
  {
    "text": "as Amazon container service for ec2 we I have I have the VCS class container",
    "start": "1924100",
    "end": "1934330"
  },
  {
    "text": "definition right here and this is the confirmation template to run it on",
    "start": "1934330",
    "end": "1943590"
  },
  {
    "text": "ec2 and ECS so here we do the same trick",
    "start": "1943590",
    "end": "1949240"
  },
  {
    "text": "get the gallery ID for this container we can we get I set",
    "start": "1949240",
    "end": "1957010"
  },
  {
    "text": "the key name misery capacity max size and this is a bit of a",
    "start": "1957010",
    "end": "1962580"
  },
  {
    "text": "large template you can see I have a mapping form which am I want to use in",
    "start": "1962580",
    "end": "1969340"
  },
  {
    "text": "each region and things like this let me go directly to the interesting part here",
    "start": "1969340",
    "end": "1977200"
  },
  {
    "text": "there's a past definition that says how our containers should be so this is",
    "start": "1977200",
    "end": "1983679"
  },
  {
    "text": "where I say the image that I want to run how much memory I want to give this",
    "start": "1983679",
    "end": "1989520"
  },
  {
    "text": "Tanner how much CPU where logs and things like this Wow how",
    "start": "1989520",
    "end": "1995940"
  },
  {
    "text": "is the load balance it configured so here you can see that I'm pulling the load balancer inside those subnets that",
    "start": "1995940",
    "end": "2003440"
  },
  {
    "text": "were created in the other stack I have a listener mapping the port 80 to the",
    "start": "2003440",
    "end": "2010700"
  },
  {
    "text": "target group and in this target group ever request this method to the backend",
    "start": "2010700",
    "end": "2016280"
  },
  {
    "text": "the health checks and so on and so forth but you will see that we have true scaling",
    "start": "2016280",
    "end": "2024770"
  },
  {
    "text": "criterias here we have a ec2 ICS or a scaling group with",
    "start": "2024770",
    "end": "2032440"
  },
  {
    "text": "the same subnet and now the scaling launch configuration and this will scale",
    "start": "2032440",
    "end": "2040310"
  },
  {
    "text": "the underlying infrastructure of your containers so the great idea behind",
    "start": "2040310",
    "end": "2047090"
  },
  {
    "text": "containers is that you can manage the logic without managing the physical so",
    "start": "2047090",
    "end": "2053720"
  },
  {
    "text": "you can have 100 containers and distribute them in to",
    "start": "2053720",
    "end": "2059840"
  },
  {
    "text": "really large instances or in ten smaller instances or in 50 even smaller",
    "start": "2059840",
    "end": "2066110"
  },
  {
    "text": "instances or even in 100 instances one with each container so it allows you to",
    "start": "2066110",
    "end": "2072050"
  },
  {
    "text": "decouple things and manage better so you if you have reserved instances for",
    "start": "2072050",
    "end": "2078290"
  },
  {
    "text": "example this is pretty important so you can consolidate have higher utilization",
    "start": "2078290",
    "end": "2084250"
  },
  {
    "text": "reserve those instances and save a lot of money so you can see how that turns to money real quickly and here we have a",
    "start": "2084250",
    "end": "2093679"
  },
  {
    "text": "side coil there's this just side container not no not",
    "start": "2093679",
    "end": "2101870"
  },
  {
    "text": "anything useful here and the the only trick that we have in this",
    "start": "2101870",
    "end": "2110410"
  },
  {
    "text": "scaling for ECS here is this alarm that",
    "start": "2110410",
    "end": "2115580"
  },
  {
    "text": "if we generate too many 500 HTTP HTTP",
    "start": "2115580",
    "end": "2120590"
  },
  {
    "text": "requests I also scale so this is kind of one way",
    "start": "2120590",
    "end": "2126030"
  },
  {
    "text": "to reduce errors so if you're getting five hundreds perhaps try to steal up",
    "start": "2126030",
    "end": "2132250"
  },
  {
    "text": "may solve the issue so this is a quite common thing to see in this yes and",
    "start": "2132250",
    "end": "2138640"
  },
  {
    "text": "that's the way to run it and I have this already provisioned here in the same the",
    "start": "2138640",
    "end": "2147640"
  },
  {
    "text": "same way same scripts as with mean we've been using I just spent spared you the",
    "start": "2147640",
    "end": "2153820"
  },
  {
    "text": "time let's just check the ACS flask script it's exactly the same thing they",
    "start": "2153820",
    "end": "2161320"
  },
  {
    "text": "find the names and run in the West called formation of the boy in the class called formation deploy will create this",
    "start": "2161320",
    "end": "2168640"
  },
  {
    "text": "stack if it exists if it does not exist and update the stack if it already",
    "start": "2168640",
    "end": "2174180"
  },
  {
    "text": "exists so you could even type to this directly",
    "start": "2174180",
    "end": "2179500"
  },
  {
    "text": "with them even need a shell script for this I mean just showing the the",
    "start": "2179500",
    "end": "2185040"
  },
  {
    "text": "this one structure that I like again and in the Oh",
    "start": "2185040",
    "end": "2192720"
  },
  {
    "text": "flask is the webserver that we are using like exposing the",
    "start": "2192720",
    "end": "2199620"
  },
  {
    "text": "big our code to the to the web or to the web container I think it's I don't know",
    "start": "2199620",
    "end": "2205840"
  },
  {
    "text": "if it's appropriate to call flask the web framework or web server but the web",
    "start": "2205840",
    "end": "2211120"
  },
  {
    "text": "v8 in Python one of the most popular for restful api is flask so mean when we are",
    "start": "2211120",
    "end": "2218680"
  },
  {
    "text": "doing surplus this is api gateway doing this job when we are doing containers or",
    "start": "2218680",
    "end": "2224740"
  },
  {
    "start": "2220000",
    "end": "2730000"
  },
  {
    "text": "instances we need to spin up an application server or something similar",
    "start": "2224740",
    "end": "2231340"
  },
  {
    "text": "to receive requests and invoke our code right and that's what this instance is",
    "start": "2231340",
    "end": "2240430"
  },
  {
    "text": "doing but the fingers here we are responsible for setting the",
    "start": "2240430",
    "end": "2246880"
  },
  {
    "text": "alarms so you can see that this can change and you have to do it on two",
    "start": "2246880",
    "end": "2253660"
  },
  {
    "text": "levels because here we have tusks on the",
    "start": "2253660",
    "end": "2258780"
  },
  {
    "text": "on the task definition you define how each one of those is and",
    "start": "2258780",
    "end": "2265570"
  },
  {
    "text": "then there is a service definition so if we go to the ECS service this is how",
    "start": "2265570",
    "end": "2272859"
  },
  {
    "text": "many of those tasks it will run so it will run one of those tasks this is the",
    "start": "2272859",
    "end": "2281230"
  },
  {
    "text": "best definition and again the configuration for binding this to the load balancer and",
    "start": "2281230",
    "end": "2287550"
  },
  {
    "text": "although this is not a lot like it's not so complicated",
    "start": "2287550",
    "end": "2294180"
  },
  {
    "text": "if you separate from the network part for everything and do it like this a bit",
    "start": "2294180",
    "end": "2300160"
  },
  {
    "text": "modularized and make the scroll stack references the template itself is not",
    "start": "2300160",
    "end": "2305770"
  },
  {
    "text": "really big the heart issue here is that you have to think in two levels you have",
    "start": "2305770",
    "end": "2312100"
  },
  {
    "text": "to think how we're going to scale the physical part of your ec2 instances in",
    "start": "2312100",
    "end": "2318190"
  },
  {
    "text": "them always gating group and how you're going to scale the logical part how are",
    "start": "2318190",
    "end": "2326140"
  },
  {
    "text": "going to scale your service and that's what the scalable",
    "start": "2326140",
    "end": "2333820"
  },
  {
    "text": "target on application always gaming is doing here we're going to dive a bit",
    "start": "2333820",
    "end": "2339100"
  },
  {
    "text": "more into application load scaling in a little while what I want to show you",
    "start": "2339100",
    "end": "2344530"
  },
  {
    "text": "guys is far gate because far gate removes the need to have it separated",
    "start": "2344530",
    "end": "2352510"
  },
  {
    "text": "this two layers of infrastructure if you do have reserved instances and spot",
    "start": "2352510",
    "end": "2359920"
  },
  {
    "text": "instances and or if you need a specific resource in your ec2 instances such as",
    "start": "2359920",
    "end": "2367570"
  },
  {
    "text": "GPUs or FPGAs this makes total sense but",
    "start": "2367570",
    "end": "2373710"
  },
  {
    "text": "for most apps and this is probably what you guys want to do so that's why I'm",
    "start": "2373710",
    "end": "2380080"
  },
  {
    "text": "jumping forward to this as not manage the infrastructure parts not manage the",
    "start": "2380080",
    "end": "2386770"
  },
  {
    "text": "physical part you just want to run your cold probably so this is much easier",
    "start": "2386770",
    "end": "2392720"
  },
  {
    "text": "with Fargate because with Fargate you can just tell",
    "start": "2392720",
    "end": "2401800"
  },
  {
    "text": "here on our task definition I",
    "start": "2402130",
    "end": "2407380"
  },
  {
    "text": "can just say that this container needs this amount of CPU and this amount of",
    "start": "2407380",
    "end": "2414200"
  },
  {
    "text": "memory and there is no auto scaling group so there is no launch",
    "start": "2414200",
    "end": "2420350"
  },
  {
    "text": "configuration there is no physical parts to manage all the physical part is going",
    "start": "2420350",
    "end": "2425510"
  },
  {
    "text": "to be managed by Fargate so we have to have this required capabilities on",
    "start": "2425510",
    "end": "2431090"
  },
  {
    "text": "forgave they are more strict in terms of definition you need to have network mode",
    "start": "2431090",
    "end": "2436700"
  },
  {
    "text": "of AWS VPC in your service you have to define your",
    "start": "2436700",
    "end": "2442660"
  },
  {
    "text": "bpc configurations so if we check the the service here you need to have this",
    "start": "2442660",
    "end": "2449930"
  },
  {
    "text": "network configuration section that we do not have in the in the ACS without",
    "start": "2449930",
    "end": "2455870"
  },
  {
    "text": "Fargate and we find the launch type as far date and that's pretty much all",
    "start": "2455870",
    "end": "2461330"
  },
  {
    "text": "that's necessary to launch to change our template to far gate but",
    "start": "2461330",
    "end": "2467540"
  },
  {
    "text": "you can see that it makes it quite shorter and simpler to manage this is",
    "start": "2467540",
    "end": "2472580"
  },
  {
    "text": "one that I did now but we can separate",
    "start": "2472580",
    "end": "2477950"
  },
  {
    "text": "it even more and decouple things so it's even more isolated and don't have to",
    "start": "2477950",
    "end": "2484190"
  },
  {
    "text": "change so much as we develop and how will this one scale how do we set",
    "start": "2484190",
    "end": "2491810"
  },
  {
    "text": "the scaling parameters for the Fargate task and",
    "start": "2491810",
    "end": "2497800"
  },
  {
    "text": "now we're taking a I'd like to show a bit of a different approach we we've",
    "start": "2497800",
    "end": "2504350"
  },
  {
    "text": "been talking recently in the series about step scaling and simple scaling",
    "start": "2504350",
    "end": "2510740"
  },
  {
    "text": "when you do step scaling and simple scaling you get to choose exactly how",
    "start": "2510740",
    "end": "2517970"
  },
  {
    "text": "much you want to scale and where and you create the alarms and you created",
    "start": "2517970",
    "end": "2523150"
  },
  {
    "text": "policies and so on and so forth I'd like to show you guys today a different type of scaling that not",
    "start": "2523150",
    "end": "2531070"
  },
  {
    "text": "everybody is used to and this is target tracking so here in the scaling policy",
    "start": "2531070",
    "end": "2538180"
  },
  {
    "text": "that I'm creating here I'm creating the CPU tracking scaling policy meaning that",
    "start": "2538180",
    "end": "2546190"
  },
  {
    "text": "I want my CPU the CPU utilization so I'm using a",
    "start": "2546190",
    "end": "2553540"
  },
  {
    "text": "pretty finite metric here you can define your own metrics and there's a way to define our own metrics but in our case",
    "start": "2553540",
    "end": "2561849"
  },
  {
    "text": "it's just a simple Fibonacci so let's use CPU because our application is intensive on CPU you could use memory",
    "start": "2561849",
    "end": "2569470"
  },
  {
    "text": "you could use errors you can use any metric that you define or one that's",
    "start": "2569470",
    "end": "2575800"
  },
  {
    "text": "pretty fine it by called watch so here in this case we're using this pretty",
    "start": "2575800",
    "end": "2580810"
  },
  {
    "text": "fine and metric name this is hard coded and it will be always this for City",
    "start": "2580810",
    "end": "2586330"
  },
  {
    "text": "authorization and it will take the average and as the name says it will",
    "start": "2586330",
    "end": "2592050"
  },
  {
    "text": "match to 70% so meaning that AWS will",
    "start": "2592050",
    "end": "2598810"
  },
  {
    "text": "change my my skinning target this is the service",
    "start": "2598810",
    "end": "2605050"
  },
  {
    "text": "that I'm referring to she cried it's best to achieve average 70%",
    "start": "2605050",
    "end": "2614050"
  },
  {
    "text": "CPU utilization if it's be below this it won't do anything it's a if it's above",
    "start": "2614050",
    "end": "2620349"
  },
  {
    "text": "it it will trigger our outer scaling policy to run again and increase the",
    "start": "2620349",
    "end": "2628030"
  },
  {
    "text": "amount of servers that we have the tasks that we have to match unless we are",
    "start": "2628030",
    "end": "2634180"
  },
  {
    "text": "within two minutes I don't want this to be too fast perhaps it takes a while for application to stabilize so if it's",
    "start": "2634180",
    "end": "2641980"
  },
  {
    "text": "under two minutes I won't take other scaling actions so this is a bit",
    "start": "2641980",
    "end": "2647859"
  },
  {
    "text": "different when you use again just to recap when we use step scaling",
    "start": "2647859",
    "end": "2654490"
  },
  {
    "text": "and simple scaling you are saying like how and when do you want it to choose go",
    "start": "2654490",
    "end": "2661090"
  },
  {
    "text": "up and down when you do target tracking a the blue s will create or shut down",
    "start": "2661090",
    "end": "2668220"
  },
  {
    "text": "instances trying to maintain your predefined it metric at the target value",
    "start": "2668220",
    "end": "2675040"
  },
  {
    "text": "that you specify so you still have control and you can cry and task what",
    "start": "2675040",
    "end": "2681910"
  },
  {
    "text": "behaves better for your case but this is this is very handy so you don't have to",
    "start": "2681910",
    "end": "2688060"
  },
  {
    "text": "create so many policies right and I mentioned that this is going to change",
    "start": "2688060",
    "end": "2694300"
  },
  {
    "text": "like this is my scalable target definition so when this policy is",
    "start": "2694300",
    "end": "2700570"
  },
  {
    "text": "triggered the desired count in my service meaning the amount of tasks that",
    "start": "2700570",
    "end": "2706060"
  },
  {
    "text": "are running behind the service will increase up to the limit of ten so and",
    "start": "2706060",
    "end": "2713710"
  },
  {
    "text": "as in Fri date I don't need to worry about the physical part this",
    "start": "2713710",
    "end": "2722170"
  },
  {
    "text": "should run and scale much simpler so let's take let's take a look at that in",
    "start": "2722170",
    "end": "2729100"
  },
  {
    "text": "my Fargate in my confirmation console right here I",
    "start": "2729100",
    "end": "2736170"
  },
  {
    "text": "I have each of those stacks created so we",
    "start": "2736170",
    "end": "2742930"
  },
  {
    "text": "can see they all create and run point the this is the forged flask one that I",
    "start": "2742930",
    "end": "2749500"
  },
  {
    "text": "just created and the same idea holds true if I get the URL for my load",
    "start": "2749500",
    "end": "2756130"
  },
  {
    "text": "balancer and do it just as I did on localhost",
    "start": "2756130",
    "end": "2763230"
  },
  {
    "text": "we should have exactly the same result right it's exactly the same code and",
    "start": "2763380",
    "end": "2769390"
  },
  {
    "text": "just to show that this is really running change for one and there we go right so",
    "start": "2769390",
    "end": "2778020"
  },
  {
    "text": "you can see that this is running my app on my container but I don't have to",
    "start": "2778020",
    "end": "2783040"
  },
  {
    "text": "manage any of the underlying instances I just tell forget work CPU and memory",
    "start": "2783040",
    "end": "2789100"
  },
  {
    "text": "indeed and voila it's done on the on the",
    "start": "2789100",
    "end": "2795040"
  },
  {
    "text": "management console let's take a look at the ID here it's",
    "start": "2795040",
    "end": "2800340"
  },
  {
    "text": "15 and 0 20 so let's go to the e",
    "start": "2800340",
    "end": "2805890"
  },
  {
    "text": "CS console and see what's it doing there so here we have the forget task",
    "start": "2805890",
    "end": "2812770"
  },
  {
    "text": "definition and without forget it so here we have instances behind this here we",
    "start": "2812770",
    "end": "2819310"
  },
  {
    "text": "don't have anything on ec2 just on Fargate and you can mix and match how",
    "start": "2819310",
    "end": "2824950"
  },
  {
    "text": "much you want on each side you can even have both for Gage and easy two tasks on",
    "start": "2824950",
    "end": "2830440"
  },
  {
    "text": "the same on the same cluster here I did it separate just for clarity but again",
    "start": "2830440",
    "end": "2836680"
  },
  {
    "text": "each design may require different things and let's take a look at the service it's",
    "start": "2836680",
    "end": "2844000"
  },
  {
    "text": "only have it have only one task here the",
    "start": "2844000",
    "end": "2849720"
  },
  {
    "text": "one task running on Fargate with this container definition",
    "start": "2849720",
    "end": "2855990"
  },
  {
    "text": "on our auto scaling rules we can see we",
    "start": "2855990",
    "end": "2861250"
  },
  {
    "text": "have two other skin rules one target tracking saying that we want to track",
    "start": "2861250",
    "end": "2868360"
  },
  {
    "text": "easier service average spiritualization at 70 and keep it there and that errors",
    "start": "2868360",
    "end": "2874810"
  },
  {
    "text": "count so if it starts airing I will add",
    "start": "2874810",
    "end": "2880200"
  },
  {
    "text": "instances so this is pretty much it so let's go and start",
    "start": "2881190",
    "end": "2887410"
  },
  {
    "text": "hitting it with some load so I have ec2 instance running on my account",
    "start": "2887410",
    "end": "2894630"
  },
  {
    "text": "let's take a look at it so this is my sniper instance here it's",
    "start": "2894630",
    "end": "2901320"
  },
  {
    "start": "2895000",
    "end": "3045000"
  },
  {
    "text": "my it's on the same code everything is going to be I just want to shoot from",
    "start": "2901320",
    "end": "2909100"
  },
  {
    "text": "internally from easy to because if you do load testing from the outside the",
    "start": "2909100",
    "end": "2914920"
  },
  {
    "text": "network latency you may influence your results and it may be very hard from the",
    "start": "2914920",
    "end": "2921230"
  },
  {
    "text": "and what you really see so that as a tip I'd say you don't need like a 128 cores",
    "start": "2921230",
    "end": "2928250"
  },
  {
    "text": "or such a huge instance to load past this is just because my account I don't",
    "start": "2928250",
    "end": "2933890"
  },
  {
    "text": "pay for it but do mind that even if you use a smaller instance it's good to do",
    "start": "2933890",
    "end": "2941120"
  },
  {
    "text": "it from from the inside right and I have here the the same code oops it's not",
    "start": "2941120",
    "end": "2947890"
  },
  {
    "text": "this is my local machine I have to SSH to the remote one and",
    "start": "2947890",
    "end": "2956470"
  },
  {
    "text": "I have the same code there",
    "start": "2956470",
    "end": "2962890"
  },
  {
    "text": "if my computer lets me log into this I",
    "start": "2965440",
    "end": "2972040"
  },
  {
    "text": "hope so what's going on my computer please help me",
    "start": "2972280",
    "end": "2979660"
  },
  {
    "text": "no terminal for me today so let's quit it and",
    "start": "2986730",
    "end": "2993080"
  },
  {
    "text": "start anyone so",
    "start": "2993080",
    "end": "2998230"
  },
  {
    "text": "[Music] back to every word by the way this is",
    "start": "2998230",
    "end": "3004550"
  },
  {
    "text": "called glances I really like this monitor it's",
    "start": "3004550",
    "end": "3010040"
  },
  {
    "text": "it shows your resource utilization and talk but with much better much easier to",
    "start": "3010040",
    "end": "3016670"
  },
  {
    "text": "see what's going on so you know you're not overloading your machines unit load generator machine I don't think that's",
    "start": "3016670",
    "end": "3023359"
  },
  {
    "text": "the case today but it may be useful um in this other machine in this other side",
    "start": "3023359",
    "end": "3029930"
  },
  {
    "text": "I will just start shooting so in the synagogue's directory I have exactly the",
    "start": "3029930",
    "end": "3036800"
  },
  {
    "text": "same code and [Music] the",
    "start": "3036800",
    "end": "3042940"
  },
  {
    "text": "the load past itself is defined by Gatling on sirs",
    "start": "3042940",
    "end": "3050290"
  },
  {
    "text": "test Scala s darks load tests so this is how",
    "start": "3050290",
    "end": "3056540"
  },
  {
    "text": "I'm doing load tests I get the users and the rent targets from environment",
    "start": "3056540",
    "end": "3063170"
  },
  {
    "text": "variables and just start firing a few requests to each of my Fibonacci",
    "start": "3063170",
    "end": "3070480"
  },
  {
    "text": "implementations to the hosts that I pass targets so in the end our environment",
    "start": "3070480",
    "end": "3079310"
  },
  {
    "text": "variables to trigger the the load test and again if you we did a cover a bit of",
    "start": "3079310",
    "end": "3087140"
  },
  {
    "text": "introduction to Gatling and m2j meter in previous episodes highly",
    "start": "3087140",
    "end": "3093650"
  },
  {
    "text": "recommend if you don't know get mean take a look at it it's one of my",
    "start": "3093650",
    "end": "3099080"
  },
  {
    "text": "favorite load generation tools highly recommended it can be run as cold so",
    "start": "3099080",
    "end": "3105140"
  },
  {
    "text": "don't need to handle like cranky you eyes and things like this it's your own",
    "start": "3105140",
    "end": "3110420"
  },
  {
    "text": "code you can do force wise repeats ifs any coding trick that you know you can",
    "start": "3110420",
    "end": "3116000"
  },
  {
    "text": "just throw in there make it part of her load test instead of being subject to whatever your load",
    "start": "3116000",
    "end": "3122740"
  },
  {
    "text": "testing UI gives you so this is very powerful for developers and I",
    "start": "3122740",
    "end": "3128590"
  },
  {
    "text": "highly recommend people to use testing tools like this well but it's just a",
    "start": "3128590",
    "end": "3134740"
  },
  {
    "text": "personal preference again so on the on the on this script that we",
    "start": "3134740",
    "end": "3143170"
  },
  {
    "text": "use it on the past episode I showed you how to set the environment variables and",
    "start": "3143170",
    "end": "3149620"
  },
  {
    "text": "I have those right here so I passed the how many users I want how long those are",
    "start": "3149620",
    "end": "3156160"
  },
  {
    "text": "going to run and the name of our task definition and the",
    "start": "3156160",
    "end": "3161860"
  },
  {
    "text": "target that we're going to shoot against and this is going to be mapped directly",
    "start": "3161860",
    "end": "3167470"
  },
  {
    "text": "to the Gatling them get me parameters on them on the test case so",
    "start": "3167470",
    "end": "3174510"
  },
  {
    "text": "yeah that's probably too much load for for our case but that's the fun right",
    "start": "3174510",
    "end": "3182640"
  },
  {
    "text": "gabbing inquiry can increase this as much as we'd like so let's pick our",
    "start": "3182640",
    "end": "3188890"
  },
  {
    "text": "target and on the output of our",
    "start": "3188890",
    "end": "3194370"
  },
  {
    "text": "confirmation we can take the load target and",
    "start": "3194370",
    "end": "3199710"
  },
  {
    "text": "this I will just reduce the amount of time so",
    "start": "3199710",
    "end": "3206080"
  },
  {
    "text": "we don't spend so much time waiting for it so instead of 10 minutes of and",
    "start": "3206080",
    "end": "3211330"
  },
  {
    "text": "putting it five minutes instead of two thousand users that would",
    "start": "3211330",
    "end": "3217570"
  },
  {
    "text": "like to do five so let's go faster and higher that we ever been before and",
    "start": "3217570",
    "end": "3224100"
  },
  {
    "text": "let's just double check that this is correct looks so and this will I",
    "start": "3224100",
    "end": "3235110"
  },
  {
    "text": "will set this on my sniper box and it's ready to shoot so I can just run the",
    "start": "3235470",
    "end": "3243160"
  },
  {
    "text": "Gatling command which is SVT force caliber tool it will run the target",
    "start": "3243160",
    "end": "3250180"
  },
  {
    "text": "called test only and run only this test case that I specified you can have",
    "start": "3250180",
    "end": "3255609"
  },
  {
    "text": "several in your project and things like this this is the command and",
    "start": "3255609",
    "end": "3262680"
  },
  {
    "text": "so hopefully now what's going to happen is",
    "start": "3262680",
    "end": "3268349"
  },
  {
    "text": "this instance which is pretty huge is going to start firing lots of requests",
    "start": "3268349",
    "end": "3275319"
  },
  {
    "text": "to our smaller instances if it was successful so I",
    "start": "3275319",
    "end": "3281400"
  },
  {
    "text": "forgot the write the HTTP in the URL so",
    "start": "3281400",
    "end": "3286750"
  },
  {
    "text": "let's do that again let's write it again there is [Music]",
    "start": "3286750",
    "end": "3292290"
  },
  {
    "text": "HD bit missing here in target so this must be a valid",
    "start": "3292290",
    "end": "3299730"
  },
  {
    "text": "URL by notice and shoot",
    "start": "3299730",
    "end": "3306809"
  },
  {
    "text": "so yeah so it's shooting I will leave the the output running I",
    "start": "3317890",
    "end": "3324219"
  },
  {
    "text": "can see that it's got some 200 stairs it's okay we will see some load on this",
    "start": "3324219",
    "end": "3330069"
  },
  {
    "text": "machine naturally in the club watch logs and templates especially on ECS we",
    "start": "3330069",
    "end": "3340269"
  },
  {
    "start": "3335000",
    "end": "3599000"
  },
  {
    "text": "can see the the effect of the load test going on so let's take a look at our",
    "start": "3340269",
    "end": "3346180"
  },
  {
    "text": "monitoring here on metrics we have CPU",
    "start": "3346180",
    "end": "3351539"
  },
  {
    "text": "memory - ization I will open this in the new tab and",
    "start": "3351539",
    "end": "3359339"
  },
  {
    "text": "we can see CPU starting to raise I will",
    "start": "3361440",
    "end": "3366940"
  },
  {
    "text": "go for only one hour so we can we can see it will go up and up as we go let's",
    "start": "3366940",
    "end": "3376359"
  },
  {
    "text": "let's change the window to 30 seconds or something like this and wait for the",
    "start": "3376359",
    "end": "3382539"
  },
  {
    "text": "party application loads to go up because if you see the test case",
    "start": "3382539",
    "end": "3390599"
  },
  {
    "text": "the load testing SLS test case",
    "start": "3391680",
    "end": "3396809"
  },
  {
    "text": "this is the magic album ramp should be amount of users over this amount of time",
    "start": "3396809",
    "end": "3403569"
  },
  {
    "text": "so it will go up to those 5,000 users that I passed as a parameter over the",
    "start": "3403569",
    "end": "3410289"
  },
  {
    "text": "five minutes that we specified so a thousand users per minute arriving at",
    "start": "3410289",
    "end": "3415959"
  },
  {
    "text": "where half is written it's pretty huge pretty steep curve but and I believe our",
    "start": "3415959",
    "end": "3423400"
  },
  {
    "text": "app can make it here we're going to see",
    "start": "3423400",
    "end": "3430709"
  },
  {
    "text": "it's already on 41% our threshold is",
    "start": "3430709",
    "end": "3436170"
  },
  {
    "text": "70% so when we reach 70% city utilization on average again this is not",
    "start": "3436170",
    "end": "3444670"
  },
  {
    "text": "instantaneous because it's always based on a metric over a period of time so",
    "start": "3444670",
    "end": "3450150"
  },
  {
    "text": "mind it's not one individual CPU but the average on",
    "start": "3450150",
    "end": "3456400"
  },
  {
    "text": "your whole cluster so think about how that varies when you set up your metrics",
    "start": "3456400",
    "end": "3462510"
  },
  {
    "text": "your criterias for scaling here the magic is all on the template so let's",
    "start": "3462510",
    "end": "3471130"
  },
  {
    "text": "take a look at that again it's on the Fargate flask here on the CPU tracking",
    "start": "3471130",
    "end": "3478540"
  },
  {
    "text": "policy I'm saying that when my service utilization is on 7% that's my target",
    "start": "3478540",
    "end": "3485820"
  },
  {
    "text": "and setting this target is not so easy because if you go to site say you put",
    "start": "3485820",
    "end": "3493330"
  },
  {
    "text": "like 99% it will take too long for your application to scale and by the time it",
    "start": "3493330",
    "end": "3500590"
  },
  {
    "text": "scales perhaps your traffic is already over you and it will take too long and",
    "start": "3500590",
    "end": "3505960"
  },
  {
    "text": "you see errors and things like this if it's too low it will it may scale much",
    "start": "3505960",
    "end": "3511870"
  },
  {
    "text": "before you really need it and cost you some extra money but you're safer so",
    "start": "3511870",
    "end": "3520380"
  },
  {
    "text": "there is no magic here it depends on how steep you want to be you want to react",
    "start": "3520380",
    "end": "3528790"
  },
  {
    "text": "so if you want to act react really quickly or safely you need to set this",
    "start": "3528790",
    "end": "3535420"
  },
  {
    "text": "really low and allow yourself time to grow especially if your instances take a lot to boot and things like this or if",
    "start": "3535420",
    "end": "3542950"
  },
  {
    "text": "they are fast and if you're comfortable you can wait until you have like nineteen ninety five percent and this is",
    "start": "3542950",
    "end": "3549520"
  },
  {
    "text": "something that only testing and testing over and over again can can possibly",
    "start": "3549520",
    "end": "3554890"
  },
  {
    "text": "tell you but I guess you guys can see the benefit",
    "start": "3554890",
    "end": "3561070"
  },
  {
    "text": "specially if you've seen this before if it was a step scaling or a simple scaling you would need to create one",
    "start": "3561070",
    "end": "3568450"
  },
  {
    "text": "policy to scale up one policy to scale down or perhaps more than one policy to",
    "start": "3568450",
    "end": "3573760"
  },
  {
    "text": "scale up and more than one policy to scale down and Amazon is",
    "start": "3573760",
    "end": "3580590"
  },
  {
    "text": "very we we use a lot of mekin to do this and having Amazon doing this on their",
    "start": "3580590",
    "end": "3587540"
  },
  {
    "text": "behalf certainly take a bit a lot of this from your hands let's see if our",
    "start": "3587540",
    "end": "3593390"
  },
  {
    "text": "load is increasing so we are already on",
    "start": "3593390",
    "end": "3598400"
  },
  {
    "text": "a 3-1 so on our ECS here we have we were",
    "start": "3598400",
    "end": "3605660"
  },
  {
    "text": "with one desired count let's see if you reacted already so our desired count is",
    "start": "3605660",
    "end": "3612710"
  },
  {
    "text": "now two tasks but only one is running because it there was no time yet for the",
    "start": "3612710",
    "end": "3620270"
  },
  {
    "text": "things to react as we are watching that's life here in the tasks definition",
    "start": "3620270",
    "end": "3627040"
  },
  {
    "text": "we probably see one here provisioning one running so you see that as it scales",
    "start": "3627040",
    "end": "3637630"
  },
  {
    "text": "we see pending and eventually it will be",
    "start": "3637630",
    "end": "3643460"
  },
  {
    "text": "running and more and more as long as we continue to narrating this load so you can see that how much easier for it so",
    "start": "3643460",
    "end": "3652370"
  },
  {
    "text": "the the it's thinking it's not",
    "start": "3652370",
    "end": "3657520"
  },
  {
    "text": "not about redundancy before we were talking redundancy you would want to",
    "start": "3657520",
    "end": "3664670"
  },
  {
    "text": "take a look here so on the parameters for your",
    "start": "3664670",
    "end": "3673900"
  },
  {
    "text": "scalable target you could set this as mean minimum of two to have the",
    "start": "3674260",
    "end": "3680540"
  },
  {
    "text": "redundancy or you can start here your ICS cluster with at least two the idea",
    "start": "3680540",
    "end": "3686810"
  },
  {
    "text": "behind the 70% is how fast do you react even if you have redundancy so the",
    "start": "3686810",
    "end": "3693920"
  },
  {
    "text": "higher you set your target the longer it takes for you to react which saves you",
    "start": "3693920",
    "end": "3701150"
  },
  {
    "text": "money but may put you in danger if you take a lower value you are safer you're",
    "start": "3701150",
    "end": "3707120"
  },
  {
    "text": "scaling before but you may waste some money scaling when you're not actually",
    "start": "3707120",
    "end": "3713810"
  },
  {
    "text": "necessary so it it is a balanced learning the redundancy but in how fast",
    "start": "3713810",
    "end": "3720819"
  },
  {
    "text": "you react and if we take a look at it again",
    "start": "3720819",
    "end": "3729930"
  },
  {
    "text": "we are already running and in the two instances each of the of the request is",
    "start": "3729930",
    "end": "3738910"
  },
  {
    "text": "going to be distributed to a different instance because it's already added to the load",
    "start": "3738910",
    "end": "3746349"
  },
  {
    "text": "balancer and so and so forth so here on the ec2 console",
    "start": "3746349",
    "end": "3754619"
  },
  {
    "text": "we can take a look at load balancers",
    "start": "3755579",
    "end": "3760289"
  },
  {
    "text": "and in this case",
    "start": "3761910",
    "end": "3768450"
  },
  {
    "text": "let's try to find out which one that is",
    "start": "3768720",
    "end": "3773700"
  },
  {
    "text": "so [Music] I'll have to check the the group the",
    "start": "3777329",
    "end": "3783579"
  },
  {
    "text": "target group",
    "start": "3783579",
    "end": "3786180"
  },
  {
    "text": "so yeah we have two IP addresses registered already both healthy",
    "start": "3799380",
    "end": "3805750"
  },
  {
    "text": "everything were expecting working as as expected with two health costs and for as long as we",
    "start": "3805750",
    "end": "3813730"
  },
  {
    "text": "keep doing this and hitting desistance harder",
    "start": "3813730",
    "end": "3818830"
  },
  {
    "text": "and harder it will keep scaling and as you can see in my response percentiles",
    "start": "3818830",
    "end": "3826450"
  },
  {
    "text": "we have much better results today than even we have with some serverless cases",
    "start": "3826450",
    "end": "3833650"
  },
  {
    "text": "see that we had 100% successes zero errors even with a very",
    "start": "3833650",
    "end": "3841470"
  },
  {
    "text": "steep load and just one request with latency above the",
    "start": "3841470",
    "end": "3849190"
  },
  {
    "text": "this 800 milliseconds threshold that's the a",
    "start": "3849190",
    "end": "3855090"
  },
  {
    "text": "very interesting result for us that's how we can make sure that our",
    "start": "3855090",
    "end": "3863530"
  },
  {
    "text": "application reacts to the user as they come and you see it's all define it in",
    "start": "3863530",
    "end": "3871060"
  },
  {
    "text": "cold so if I want to deploy this again and again and again I can just run this",
    "start": "3871060",
    "end": "3878170"
  },
  {
    "text": "script and create as many environments of those as I'd like and",
    "start": "3878170",
    "end": "3883920"
  },
  {
    "text": "scaling very much simpler because we",
    "start": "3883920",
    "end": "3889150"
  },
  {
    "text": "have application out to scaling setup and we",
    "start": "3889150",
    "end": "3895060"
  },
  {
    "text": "still have a lot of control on our infrastructure on our cold on how it",
    "start": "3895060",
    "end": "3900970"
  },
  {
    "text": "runs because it's all built by my own docker file so I can specify exactly how",
    "start": "3900970",
    "end": "3908050"
  },
  {
    "text": "I want things so that's that's what I'd like to to show you guys today you saw",
    "start": "3908050",
    "end": "3915490"
  },
  {
    "text": "that if you are in between the instances and",
    "start": "3915490",
    "end": "3920650"
  },
  {
    "text": "the functions perhaps containers is a good idea for you or if you are already",
    "start": "3920650",
    "end": "3925840"
  },
  {
    "text": "into containers and want to manage those with instead of managing them by hand with",
    "start": "3925840",
    "end": "3932650"
  },
  {
    "text": "chaff puppet or your preferred config management tool you can just deploy them",
    "start": "3932650",
    "end": "3938890"
  },
  {
    "text": "with confirmation and forget and you have the benefit that just like",
    "start": "3938890",
    "end": "3944350"
  },
  {
    "text": "serverless you can specify the amount of CPU and memory that you want and not",
    "start": "3944350",
    "end": "3950680"
  },
  {
    "text": "have to worry about the physical part of instances as we needed on on Beanstalk",
    "start": "3950680",
    "end": "3957760"
  },
  {
    "text": "and and again the trade-off against ever less",
    "start": "3957760",
    "end": "3964330"
  },
  {
    "text": "they've had more control and procedure right so that's it and I hope you",
    "start": "3964330",
    "end": "3971230"
  },
  {
    "text": "enjoyed today's broadcast and in the next episode we're going to add a",
    "start": "3971230",
    "end": "3977260"
  },
  {
    "text": "database to this again one very important point here is the concept of",
    "start": "3977260",
    "end": "3983560"
  },
  {
    "text": "mechanical affinity so now we saw how",
    "start": "3983560",
    "end": "3988590"
  },
  {
    "text": "instances scale how functions scale how containers scale in the perspective of",
    "start": "3988590",
    "end": "3994780"
  },
  {
    "text": "compute so I hope that by now you can make formal choice about what is better",
    "start": "3994780",
    "end": "4000960"
  },
  {
    "text": "for you because in some it's not like several less is better than containers or containers are better in instances",
    "start": "4000960",
    "end": "4007800"
  },
  {
    "text": "but some cases some apps will fit better on one of those mechanics now we have",
    "start": "4007800",
    "end": "4017130"
  },
  {
    "text": "all at least one episode of each and you have examples on how to do each one with",
    "start": "4017130",
    "end": "4024000"
  },
  {
    "text": "confirmation and now we can improve our application and doing not only Fibonacci",
    "start": "4024000",
    "end": "4031050"
  },
  {
    "text": "but adding a database and that's what you're going to see in the next episode",
    "start": "4031050",
    "end": "4036780"
  },
  {
    "text": "of the blasts were expected solutions on which thank you very much see you next",
    "start": "4036780",
    "end": "4042540"
  },
  {
    "text": "time",
    "start": "4042540",
    "end": "4044660"
  }
]