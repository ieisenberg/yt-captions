[
  {
    "start": "0",
    "end": "17000"
  },
  {
    "text": "In this video, you’ll see how to streamline your\nsoftware release process using AWS CodePipeline.",
    "start": "320",
    "end": "6260"
  },
  {
    "text": "With this continuous delivery service, you can model each step in your software release process,",
    "start": "6740",
    "end": "11959"
  },
  {
    "text": "automate the process from beginning to end,\nand approve software changes for production.",
    "start": "11960",
    "end": "16660"
  },
  {
    "start": "17000",
    "end": "212000"
  },
  {
    "text": "AWS CodePipeline is a fully managed continuous\ndelivery service used in conjunction",
    "start": "17400",
    "end": "22779"
  },
  {
    "text": "with other AWS development services to store, build,\nand deploy applications in an automated fashion.",
    "start": "22780",
    "end": "29240"
  },
  {
    "text": "To get started, let’s navigate to Amazon Elastic Compute Cloud (Amazon EC2) to create a build environment.",
    "start": "29600",
    "end": "36380"
  },
  {
    "text": "For the purposes of this example, we\nalready have an EC2 instance running,",
    "start": "37840",
    "end": "41540"
  },
  {
    "text": "which was provisioned when we created our AWS Cloud9 development environment.",
    "start": "41540",
    "end": "45740"
  },
  {
    "text": "This environment has the code for the\nsample application we will deploy",
    "start": "46280",
    "end": "49539"
  },
  {
    "text": "and will be the environment from which we will\ncommit that code to the CodeBuild repository.",
    "start": "49540",
    "end": "53440"
  },
  {
    "text": "Let’s launch a new instance that CodeDeploy\nwill deploy our sample web application to.",
    "start": "54060",
    "end": "58300"
  },
  {
    "text": "We’ll select the Amazon Linux 2 template.",
    "start": "60760",
    "end": "63199"
  },
  {
    "text": "Next, we’ll configure the instance to allow\nthe CodeDeploy agent to run on it.",
    "start": "65700",
    "end": "69460"
  },
  {
    "text": "To do so,",
    "start": "72020",
    "end": "72820"
  },
  {
    "text": "we need an AWS Identity and Access Management (IAM) role with a policy that allows it access.",
    "start": "72820",
    "end": "78540"
  },
  {
    "text": "Let’s navigate to IAM and take a look at the roles.",
    "start": "78900",
    "end": "81800"
  },
  {
    "text": "Let's take a look at AWSCodeDeployRole,\nwhich is an AWS managed role for CodeDeploy.",
    "start": "82880",
    "end": "88659"
  },
  {
    "text": "The policy attached to this role allows AWS CodeDeploy to access any EC2 instances",
    "start": "89640",
    "end": "95040"
  },
  {
    "text": "that have this policy attached to them.",
    "start": "95040",
    "end": "96940"
  },
  {
    "text": "Let’s return to the Roles screen and\nlook at CodeDeployEC2InstanceProfile.",
    "start": "97920",
    "end": "102460"
  },
  {
    "text": "This profile enables any EC2 instance\nwith this role attached",
    "start": "106180",
    "end": "109960"
  },
  {
    "text": "to access resources from Amazon\nSimple Storage Service (Amazon S3).",
    "start": "109960",
    "end": "114380"
  },
  {
    "text": "This allows CodeDeploy to retrieve artifacts built\nwith CodeBuild and deploy them to the instance.",
    "start": "114740",
    "end": "119979"
  },
  {
    "text": "Let’s return to EC2 and finish configuring\nthe instance for the build environment.",
    "start": "120300",
    "end": "124660"
  },
  {
    "text": "Attach the CodeDeployEC2InstanceProfile\nrole to the instance.",
    "start": "127120",
    "end": "131320"
  },
  {
    "text": "In this case, let’s specify a set of commands\nto be run upon initialization of the instance.",
    "start": "135140",
    "end": "140100"
  },
  {
    "text": "These commands will install some necessary dependencies for the web application to run",
    "start": "140500",
    "end": "144640"
  },
  {
    "text": "when instantiated by CodeDeploy, as well\nas the CodeDeploy install script.",
    "start": "144640",
    "end": "149000"
  },
  {
    "text": "Proceed to the tag configuration step.",
    "start": "151120",
    "end": "153319"
  },
  {
    "text": "Let’s add a simple key-value tag pair to identify the instance so that it can be targeted in CodeDeploy.",
    "start": "155800",
    "end": "161300"
  },
  {
    "text": "Next, let’s add a rule to the security\ngroup created for the new instance",
    "start": "163380",
    "end": "167320"
  },
  {
    "text": "that will allow inbound traffic on\nthe application’s specified port.",
    "start": "167320",
    "end": "171040"
  },
  {
    "text": "Review the settings and launch the instance.",
    "start": "173360",
    "end": "175900"
  },
  {
    "text": "For the purposes of this example, a key pair has\nalready been created specifically for this instance",
    "start": "179940",
    "end": "184900"
  },
  {
    "text": "in case we need to access\nit over Secure Shell (SSH).",
    "start": "184900",
    "end": "188459"
  },
  {
    "text": "The instance is launching. Let’s drill down into it.",
    "start": "190660",
    "end": "193420"
  },
  {
    "text": "Now that the instance has\nfinished provisioning,",
    "start": "195860",
    "end": "198020"
  },
  {
    "text": "there is one more prerequisite necessary\nfor CodePipeline to function.",
    "start": "198020",
    "end": "201580"
  },
  {
    "text": "You must have an S3 bucket accessible\nfrom CodePipeline services",
    "start": "201940",
    "end": "205700"
  },
  {
    "text": "where build artifacts can be\ncreated and retrieved.",
    "start": "205700",
    "end": "208500"
  },
  {
    "text": "Let’s head to the S3 console.",
    "start": "208700",
    "end": "210599"
  },
  {
    "start": "212000",
    "end": "315000"
  },
  {
    "text": "As you can see, in this case a bucket has\nalready been created for this purpose.",
    "start": "213020",
    "end": "216900"
  },
  {
    "text": "Let’s switch to Cloud9 to view the sample application before deploying it to AWS CodeCommit.",
    "start": "217340",
    "end": "222900"
  },
  {
    "text": "Note that we are using Cloud 9, but you can just\nas easily use a local development environment.",
    "start": "223580",
    "end": "228340"
  },
  {
    "text": "This is a simple Java web application\nthat uses the Spring Framework.",
    "start": "229040",
    "end": "232900"
  },
  {
    "text": "As you can see, it contains a buildspec.yml file\nto configure the CodeBuild build process,",
    "start": "233100",
    "end": "237940"
  },
  {
    "text": "as well as an appspec.yml file to configure\nthe CodeDeploy deployment process.",
    "start": "237940",
    "end": "242340"
  },
  {
    "text": "For the purposes of this example,",
    "start": "243040",
    "end": "244760"
  },
  {
    "text": "we are running this Cloud9 environment as a user who has an SSH key associated with CodeCommit.",
    "start": "244760",
    "end": "250019"
  },
  {
    "text": "This key allows Git operations to successfully push\nand pull changes from CodeCommit repositories.",
    "start": "250260",
    "end": "255700"
  },
  {
    "text": "Let’s navigate to CodeCommit now.",
    "start": "256120",
    "end": "258060"
  },
  {
    "text": "Let’s create a CodeCommit repository to host\nthe sample web application’s source code.",
    "start": "260540",
    "end": "265220"
  },
  {
    "text": "Specify a name and create the repository.",
    "start": "267680",
    "end": "270460"
  },
  {
    "text": "Next, copy the HTTPS URL,",
    "start": "274920",
    "end": "277960"
  },
  {
    "text": "and then return to Cloud9 to push the web application’s source code into the repository.",
    "start": "277960",
    "end": "282740"
  },
  {
    "text": "For our purposes,",
    "start": "284300",
    "end": "285479"
  },
  {
    "text": "the application has already been initialized with a Git repository in the Cloud9 development environment.",
    "start": "285480",
    "end": "290560"
  },
  {
    "text": "The files have also been added and\ncommitted to that local repository.",
    "start": "290900",
    "end": "294419"
  },
  {
    "text": "Let’s use the URL we copied to add the CodeCommit\nrepository as a remote source to the local repository,",
    "start": "294700",
    "end": "300720"
  },
  {
    "text": "and then specify it as the origin source.",
    "start": "300720",
    "end": "303420"
  },
  {
    "text": "Next, let’s push the local application code to the\nremote origin repository’s master branch.",
    "start": "304380",
    "end": "309520"
  },
  {
    "text": "Now let’s head back to CodeCommit to verify that the code has been pushed to the remote repository.",
    "start": "310040",
    "end": "315240"
  },
  {
    "start": "315000",
    "end": "541000"
  },
  {
    "text": "As you can see, the application’s source\ncode successfully pushed to CodeCommit.",
    "start": "315680",
    "end": "320180"
  },
  {
    "text": "Now let’s navigate to CodeBuild to create\na build project for the application.",
    "start": "320560",
    "end": "324680"
  },
  {
    "text": "Specify a name for the build project.",
    "start": "326320",
    "end": "328660"
  },
  {
    "text": "Next, specify the source provider so that CodeBuild\ncan retrieve the source code to start the build.",
    "start": "332500",
    "end": "337540"
  },
  {
    "text": "We’ll specify the CodeCommit repository.",
    "start": "337980",
    "end": "340560"
  },
  {
    "text": "Other sources, such as GitHub or S3, can also\nbe specified instead of CodeCommit.",
    "start": "343020",
    "end": "348220"
  },
  {
    "text": "Branches other than the master branch can be specified as build sources for a CodeBuild build project.",
    "start": "352480",
    "end": "357660"
  },
  {
    "text": "In this example, we are using the master branch.",
    "start": "357940",
    "end": "360520"
  },
  {
    "text": "Next, let’s configure the build environment\nthat will run the build steps",
    "start": "365580",
    "end": "369020"
  },
  {
    "text": "and any specified tests for\nthe sample application.",
    "start": "369020",
    "end": "371900"
  },
  {
    "text": "For our purposes, select Amazon Linux 2 and\nspecify the most recent image running CodeBuild.",
    "start": "372360",
    "end": "377860"
  },
  {
    "text": "If you wish, you can specify an existing\nservice role with custom permissions",
    "start": "386500",
    "end": "390600"
  },
  {
    "text": "to allow CodeBuild to access other AWS\nservices in order to run the build.",
    "start": "390600",
    "end": "394960"
  },
  {
    "text": "In this case, let’s just create a new service role.",
    "start": "395220",
    "end": "397880"
  },
  {
    "text": "You can also add advanced configuration for the environment, with options to specify networking,",
    "start": "398120",
    "end": "403040"
  },
  {
    "text": "environmental variables,\nand file system variables.",
    "start": "403040",
    "end": "405900"
  },
  {
    "text": "For our purposes, let’s move on.",
    "start": "406280",
    "end": "408020"
  },
  {
    "text": "AWS CodeBuild requires either a buildspec\nYAML file or manually entered build commands",
    "start": "411080",
    "end": "416580"
  },
  {
    "text": "that enumerate the steps and commands\nto be run when the build is executed.",
    "start": "416580",
    "end": "420379"
  },
  {
    "text": "Let’s take a look at the buildspec file\nthat has been created for this project.",
    "start": "421000",
    "end": "424580"
  },
  {
    "text": "As you can see, this buildspec file\nspecifies the phases of the build,",
    "start": "425760",
    "end": "429800"
  },
  {
    "text": "build artifact locations, and\na directory for the cache.",
    "start": "429800",
    "end": "433300"
  },
  {
    "text": "Since buildspec.yml is the default filename CodeBuild looks for, we won’t specify an alternate filename.",
    "start": "436020",
    "end": "441919"
  },
  {
    "text": "Next, specify the artifact output location.",
    "start": "443560",
    "end": "446700"
  },
  {
    "text": "Select Amazon S3 and provide the\npath of the bucket we saw earlier.",
    "start": "449460",
    "end": "453360"
  },
  {
    "text": "Let’s also provide a name for the output build\nartifact that will be written to the bucket.",
    "start": "456240",
    "end": "460560"
  },
  {
    "text": "You can optionally provide a path to\na directory within the S3 bucket",
    "start": "461620",
    "end": "465360"
  },
  {
    "text": "to separate the artifacts from the\nother resources in the bucket.",
    "start": "465360",
    "end": "468460"
  },
  {
    "text": "For our purposes, let’s move on.",
    "start": "468760",
    "end": "470620"
  },
  {
    "text": "Let’s specify that our artifact output\nshould be uploaded into a .zip file",
    "start": "472280",
    "end": "476220"
  },
  {
    "text": "so that it can be easily used by other\nCodePipeline services later.",
    "start": "476220",
    "end": "479780"
  },
  {
    "text": "By default, the option to upload build output\nlogs to CloudWatch logs is enabled.",
    "start": "482840",
    "end": "487460"
  },
  {
    "text": "Let’s retain this setting and create the project.",
    "start": "487660",
    "end": "490100"
  },
  {
    "text": "Now that the build project has been created, let’s start the build to ensure that the configuration is correct.",
    "start": "492920",
    "end": "498360"
  },
  {
    "text": "Notice that some parameters specified in\nthe initialization of the build project",
    "start": "501940",
    "end": "505920"
  },
  {
    "text": "can be customized for a specific build.",
    "start": "505920",
    "end": "508020"
  },
  {
    "text": "Let’s retain the default settings and begin the build.",
    "start": "508580",
    "end": "511300"
  },
  {
    "text": "The build has successfully started.",
    "start": "514080",
    "end": "515900"
  },
  {
    "text": "Let’s take a look at the build logs to see a detailed\nstep-by-step picture of the build process.",
    "start": "516100",
    "end": "521060"
  },
  {
    "text": "The build has now completed.",
    "start": "523160",
    "end": "524740"
  },
  {
    "text": "Next, let’s take a look at the S3 bucket to ensure that\nthe build artifact was successfully outputted.",
    "start": "525300",
    "end": "530640"
  },
  {
    "text": "Here’s the output build artifact produced by CodeBuild.",
    "start": "532520",
    "end": "535440"
  },
  {
    "text": "Let’s copy the artifact S3 path for\nlater use and return to CodeBuild.",
    "start": "536300",
    "end": "540640"
  },
  {
    "start": "541000",
    "end": "700000"
  },
  {
    "text": "The next step of configuring CodePipeline is to create a CodeDeploy deployment configuration for the project.",
    "start": "542080",
    "end": "548140"
  },
  {
    "text": "We’ll create a CodeDeploy application.",
    "start": "550780",
    "end": "552900"
  },
  {
    "text": "Specify a name for the application.",
    "start": "557000",
    "end": "559260"
  },
  {
    "text": "For our purposes, we’ll configure the CodeDeploy\napplication for EC2 on-premises.",
    "start": "563280",
    "end": "568300"
  },
  {
    "text": "Now that the CodeDeploy application has been created, let’s create a deployment group",
    "start": "574980",
    "end": "579079"
  },
  {
    "text": "to target the EC2 instance we created at\nthe beginning and build our application.",
    "start": "579080",
    "end": "583220"
  },
  {
    "text": "Specify a name for the group.",
    "start": "584680",
    "end": "586580"
  },
  {
    "text": "Specify the AWSCodeDeployRole we saw earlier.",
    "start": "590360",
    "end": "594100"
  },
  {
    "text": "This allows CodeDeploy to access\nthe target EC2 instance.",
    "start": "594420",
    "end": "598160"
  },
  {
    "text": "You can choose between two deployment types.",
    "start": "598740",
    "end": "601120"
  },
  {
    "text": "“In-place” simply updates the instances in the deployment group with the latest application revisions.",
    "start": "601260",
    "end": "606440"
  },
  {
    "text": "“Blue/green” replaces the instances in the\ndeployment group with new instances",
    "start": "606600",
    "end": "610480"
  },
  {
    "text": "and deploys the latest\napplication revision to them.",
    "start": "610480",
    "end": "613100"
  },
  {
    "text": "In this case, let’s use in-place deployment.",
    "start": "613420",
    "end": "615940"
  },
  {
    "text": "For environment configuration, you can select any combination of Amazon EC2 Auto Scaling groups,",
    "start": "619140",
    "end": "624520"
  },
  {
    "text": "EC2 instances, and on-premises instances.",
    "start": "624520",
    "end": "627580"
  },
  {
    "text": "Let’s specify only the EC2 instance we created\nearlier to be part of the deployment environment.",
    "start": "628000",
    "end": "633320"
  },
  {
    "text": "To target the instance, we’ll specify the\ntag we added to it during creation.",
    "start": "638160",
    "end": "642420"
  },
  {
    "text": "Additional tags can be added to target different\ngroups of instances as well, if desired.",
    "start": "642540",
    "end": "647160"
  },
  {
    "text": "Here, AWS Systems Manager can be\nconfigured to check for updates",
    "start": "650360",
    "end": "653800"
  },
  {
    "text": "to the CodeDeploy agent\ninstalled to the instance.",
    "start": "653800",
    "end": "656540"
  },
  {
    "text": "Let’s retain the default value, which installs the\nagent and checks for updates every two weeks.",
    "start": "657040",
    "end": "662019"
  },
  {
    "text": "You can also configure CodeDeploy to\ndeploy to one instance at a time,",
    "start": "666940",
    "end": "670760"
  },
  {
    "text": "half of the instances at a time,\nor all instances at once.",
    "start": "670760",
    "end": "674180"
  },
  {
    "text": "Since we are deploying to a single instance,\nwe’ll specify “all at once.”",
    "start": "674600",
    "end": "678600"
  },
  {
    "text": "You can also configure load balancing to\nmanage incoming traffic for deployments.",
    "start": "679480",
    "end": "683579"
  },
  {
    "text": "Since this web application is not public,\nuncheck this option.",
    "start": "683740",
    "end": "687020"
  },
  {
    "text": "Create the deployment group.",
    "start": "689820",
    "end": "691420"
  },
  {
    "text": "Now that the deployment group is successfully\ncreated, we are ready to deploy.",
    "start": "694260",
    "end": "697940"
  },
  {
    "start": "700000",
    "end": "795000"
  },
  {
    "text": "Like CodeBuild, CodeDeploy requires instructions during execution to successfully deploy the application.",
    "start": "700960",
    "end": "706800"
  },
  {
    "text": "Let’s return to Cloud9 to review the appspec file that has been created to specify the deployment instructions.",
    "start": "707360",
    "end": "713320"
  },
  {
    "text": "As you can see,",
    "start": "713940",
    "end": "714940"
  },
  {
    "text": "this file specifies the source on the host machine that should be copied to the deployment environment.",
    "start": "714940",
    "end": "719520"
  },
  {
    "text": "It also specifies a number of “hooks,”",
    "start": "719840",
    "end": "722120"
  },
  {
    "text": "which correspond to named events in\nthe CodeDeploy deployment process.",
    "start": "722120",
    "end": "725960"
  },
  {
    "text": "These hooks execute the specified shell scripts\nwhen the named event takes place.",
    "start": "726500",
    "end": "730820"
  },
  {
    "text": "Different appspec files can be used for\ndifferent deployments if necessary,",
    "start": "731300",
    "end": "734980"
  },
  {
    "text": "as long as the correct YAML file\nis specified in CodeDeploy.",
    "start": "734980",
    "end": "738600"
  },
  {
    "text": "Let’s return to CodeDeploy.",
    "start": "738920",
    "end": "740500"
  },
  {
    "text": "Specify the location of the CodeBuild output\nbuild artifact to be used for deployment.",
    "start": "743840",
    "end": "748580"
  },
  {
    "text": "Other deployment behavior settings\nsuch as deployment group overrides",
    "start": "750920",
    "end": "754399"
  },
  {
    "text": "and rollback config overrides can also\nbe specified for the deployment.",
    "start": "754400",
    "end": "758120"
  },
  {
    "text": "In this case, let’s continue and\ncreate the deployment.",
    "start": "758220",
    "end": "760959"
  },
  {
    "text": "Now that the deployment has been\nsuccessfully created and deployed,",
    "start": "764580",
    "end": "767880"
  },
  {
    "text": "let’s return to EC2 to get the\nURL of the web application.",
    "start": "767880",
    "end": "771440"
  },
  {
    "text": "Here, we can see that the application\nis running on the EC2 instance",
    "start": "773760",
    "end": "776880"
  },
  {
    "text": "we provisioned using\nthe port we specified.",
    "start": "776880",
    "end": "779460"
  },
  {
    "text": "Let’s take a quick look at it.",
    "start": "784260",
    "end": "785700"
  },
  {
    "text": "As you can see, the sample web application\nis running successfully.",
    "start": "786440",
    "end": "789800"
  },
  {
    "text": "Next, let’s return to CodeDeploy and build\nthe pipeline for the application.",
    "start": "790440",
    "end": "794340"
  },
  {
    "start": "795000",
    "end": "993000"
  },
  {
    "text": "A pipeline is a workflow construct that describes how software changes go through a release process.",
    "start": "796240",
    "end": "801480"
  },
  {
    "text": "Specify a name for the pipeline.",
    "start": "802120",
    "end": "804100"
  },
  {
    "text": "Let’s allow CodePipeline to create a new service role so that it can access the other S3 services that CodeBuild",
    "start": "807720",
    "end": "813360"
  },
  {
    "text": "and CodeDeploy were able to access in\norder to build and deploy the application.",
    "start": "813360",
    "end": "817720"
  },
  {
    "text": "Instead of creating a new S3 bucket for the pipeline,",
    "start": "820480",
    "end": "823420"
  },
  {
    "text": "let’s specify the bucket we have been\nusing for the output build artifacts.",
    "start": "823420",
    "end": "827260"
  },
  {
    "text": "Each pipeline is made up of a series of stages.",
    "start": "833380",
    "end": "836040"
  },
  {
    "text": "For the source stage, let’s once again select CodeCommit as the source provider,",
    "start": "836420",
    "end": "840800"
  },
  {
    "text": "and specify the previously created\nrepository as the source code location.",
    "start": "840800",
    "end": "844980"
  },
  {
    "text": "By default, CodePipeline uses CloudWatch Events to start the pipeline when changes are detected,",
    "start": "848000",
    "end": "853740"
  },
  {
    "text": "but you can configure CodePipeline to periodically\ncheck for changes in the source code.",
    "start": "853740",
    "end": "857980"
  },
  {
    "text": "Let’s continue with the default.",
    "start": "858320",
    "end": "859900"
  },
  {
    "text": "For the build stage of the pipeline,",
    "start": "862400",
    "end": "864260"
  },
  {
    "text": "we’ll use the same configuration we specified\nin our earlier CodeBuild build project.",
    "start": "864260",
    "end": "868740"
  },
  {
    "text": "Notice that you have the option to use third-party\nbuild automation tools such as Jenkins.",
    "start": "871220",
    "end": "875920"
  },
  {
    "text": "For the deploy stage, we’ll use the same\nCodeDeploy project we created earlier.",
    "start": "883780",
    "end": "888100"
  },
  {
    "text": "Review the configurations and create the pipeline.",
    "start": "897560",
    "end": "900420"
  },
  {
    "text": "Once the pipeline has been successfully created,\nit can take several minutes for each stage to execute.",
    "start": "903600",
    "end": "908660"
  },
  {
    "text": "Let’s skip ahead to when execution is completed.",
    "start": "909040",
    "end": "911440"
  },
  {
    "text": "You can view logs detailing the build,\nincluding any potential errors",
    "start": "913220",
    "end": "916879"
  },
  {
    "text": "that occurred during the pipeline build or deploy process, by clicking on the pipeline execution ID.",
    "start": "916880",
    "end": "922520"
  },
  {
    "text": "Our pipeline is configured to detect any\nnew commits pushed to the repository",
    "start": "925940",
    "end": "929980"
  },
  {
    "text": "and restart whenever changes are detected.",
    "start": "929980",
    "end": "932240"
  },
  {
    "text": "Let’s make a small change to the\napplication to test the pipeline.",
    "start": "932880",
    "end": "936040"
  },
  {
    "text": "Let’s change the “Hello world!” welcome message\non the home page to “Hello CodePipeline!”",
    "start": "941060",
    "end": "946320"
  },
  {
    "text": "Next, let’s track our changes, commit them,\nand push them to the CodeCommit repository.",
    "start": "950140",
    "end": "955420"
  },
  {
    "text": "Now let’s return to the pipeline.",
    "start": "957040",
    "end": "958959"
  },
  {
    "text": "As you can see, the pipeline restarted after\nwe pushed our changes to the repository.",
    "start": "964440",
    "end": "968840"
  },
  {
    "text": "Let’s make sure the change was made.",
    "start": "969020",
    "end": "970720"
  },
  {
    "text": "As expected,",
    "start": "977220",
    "end": "978279"
  },
  {
    "text": "the deployed application now displays the new message we added to the code and pushed to the repository.",
    "start": "978280",
    "end": "983340"
  },
  {
    "text": "You’ve just seen how to streamline your software release process using AWS CodePipeline.",
    "start": "984020",
    "end": "989020"
  },
  {
    "text": "Thanks for watching. Now it’s your turn to try.",
    "start": "989640",
    "end": "992060"
  }
]