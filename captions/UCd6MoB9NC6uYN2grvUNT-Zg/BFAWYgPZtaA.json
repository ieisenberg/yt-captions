[
  {
    "text": "- Hi, my name is Abhimanyu,",
    "start": "3210",
    "end": "5130"
  },
  {
    "text": "and in this video we will talk about",
    "start": "5130",
    "end": "7068"
  },
  {
    "text": "key CloudWatch performance\nmetrics for DynamoDB.",
    "start": "7068",
    "end": "10350"
  },
  {
    "text": "I'm a lead consultant at\nAWS Professional Services,",
    "start": "10350",
    "end": "13710"
  },
  {
    "text": "and many times my customers have asked",
    "start": "13710",
    "end": "15809"
  },
  {
    "text": "what are the important metrics",
    "start": "15810",
    "end": "17190"
  },
  {
    "text": "that they should monitor for DynamoDB?",
    "start": "17190",
    "end": "19160"
  },
  {
    "text": "Well, there are over 30 metrics",
    "start": "19160",
    "end": "21660"
  },
  {
    "text": "that DynamoDB sends to CloudWatch,",
    "start": "21660",
    "end": "23910"
  },
  {
    "text": "but in this video we will discuss the key",
    "start": "23910",
    "end": "26010"
  },
  {
    "text": "CloudWatch performance\nmetrics for DynamoDB.",
    "start": "26010",
    "end": "28210"
  },
  {
    "text": "Let's understand why performance\nmetrics are important.",
    "start": "29070",
    "end": "32522"
  },
  {
    "text": "First of all, by tracking\nimportant table metrics,",
    "start": "36960",
    "end": "39809"
  },
  {
    "text": "you can provision your\ntable correctly to save cost",
    "start": "39810",
    "end": "43620"
  },
  {
    "text": "as well as get predictable performance.",
    "start": "43620",
    "end": "46023"
  },
  {
    "text": "Also, in order to keep your\napplication running smoothly,",
    "start": "47820",
    "end": "51540"
  },
  {
    "text": "we should track the important metrics.",
    "start": "51540",
    "end": "53493"
  },
  {
    "text": "Regular monitoring of metrics helps you",
    "start": "56010",
    "end": "57899"
  },
  {
    "text": "to detect any unusual activity",
    "start": "57900",
    "end": "60660"
  },
  {
    "text": "that is happening on the DynamoDB table.",
    "start": "60660",
    "end": "62973"
  },
  {
    "text": "CloudWatch monitoring metrics can be used",
    "start": "66240",
    "end": "68610"
  },
  {
    "text": "to generate reports using\nwhich you can analyze trends",
    "start": "68610",
    "end": "72870"
  },
  {
    "text": "to predict and anticipate\nfuture scaling requirements.",
    "start": "72870",
    "end": "75903"
  },
  {
    "text": "We have grouped these key\nmetrics into three categories:",
    "start": "79470",
    "end": "82563"
  },
  {
    "text": "resource utilization, errors",
    "start": "84000",
    "end": "86280"
  },
  {
    "text": "and GSI creation.",
    "start": "86280",
    "end": "87632"
  },
  {
    "text": "Resource utilization metrics,",
    "start": "89250",
    "end": "90690"
  },
  {
    "text": "which includes consumed read\nand write capacity units,",
    "start": "90690",
    "end": "94680"
  },
  {
    "text": "provisioned read and write capacity units,",
    "start": "94680",
    "end": "97560"
  },
  {
    "text": "and throttle events.",
    "start": "97560",
    "end": "99092"
  },
  {
    "text": "Errors include conditional\ncheck failed, user errors,",
    "start": "100650",
    "end": "105000"
  },
  {
    "text": "and system errors.",
    "start": "105000",
    "end": "106413"
  },
  {
    "text": "GSI creation-related metrics,",
    "start": "107550",
    "end": "110490"
  },
  {
    "text": "like online consumed write\ncapacity, percentage progress,",
    "start": "110490",
    "end": "114930"
  },
  {
    "text": "and throttle events.",
    "start": "114930",
    "end": "116613"
  },
  {
    "text": "Let's discuss them in a little detail.",
    "start": "117750",
    "end": "119883"
  },
  {
    "text": "Consumed and provisioned RCU metrics",
    "start": "127860",
    "end": "130259"
  },
  {
    "text": "provide the number of consumed",
    "start": "130260",
    "end": "131700"
  },
  {
    "text": "and provisioned read\ncapacity units, or RCUs,",
    "start": "131700",
    "end": "134790"
  },
  {
    "text": "for a particular table or\nglobal secondary index.",
    "start": "134790",
    "end": "138420"
  },
  {
    "text": "These units are collected every second,",
    "start": "138420",
    "end": "141209"
  },
  {
    "text": "and the dashboard shows as\naverage over one minute.",
    "start": "141210",
    "end": "145350"
  },
  {
    "text": "We'll see an example\nin the upcoming slides.",
    "start": "145350",
    "end": "147603"
  },
  {
    "text": "Read throttle events metrics\nprovides the count of requests",
    "start": "149160",
    "end": "152160"
  },
  {
    "text": "that exceeds the provisioned\ncapacity units of a table",
    "start": "152160",
    "end": "154950"
  },
  {
    "text": "or a global secondary index.",
    "start": "154950",
    "end": "157440"
  },
  {
    "text": "This means for each read event throttles,",
    "start": "157440",
    "end": "160680"
  },
  {
    "text": "the read throttle event\nmetrics is incremented by one.",
    "start": "160680",
    "end": "164252"
  },
  {
    "text": "As you might know that in DynamoDB,",
    "start": "168060",
    "end": "170069"
  },
  {
    "text": "the read and write\ncapacity can be provisioned",
    "start": "170070",
    "end": "172650"
  },
  {
    "text": "independently of each other.",
    "start": "172650",
    "end": "174930"
  },
  {
    "text": "Hence, we have similar\nmetrics for write also",
    "start": "174930",
    "end": "177629"
  },
  {
    "text": "as there are for read.",
    "start": "177630",
    "end": "179970"
  },
  {
    "text": "So the consumed and\nprovisioned WCU metrics",
    "start": "179970",
    "end": "183330"
  },
  {
    "text": "provides the number of consumed",
    "start": "183330",
    "end": "184590"
  },
  {
    "text": "and provisioned write capacity\nunits for a particular table",
    "start": "184590",
    "end": "188129"
  },
  {
    "text": "or a global secondary index.",
    "start": "188130",
    "end": "189873"
  },
  {
    "text": "And write throttle event\nprovide the count of requests",
    "start": "190920",
    "end": "194640"
  },
  {
    "text": "that exceeds the provisioned\nwrite capacity units",
    "start": "194640",
    "end": "197160"
  },
  {
    "text": "for a table or a global secondary index.",
    "start": "197160",
    "end": "200763"
  },
  {
    "text": "Now let's see an example.",
    "start": "202140",
    "end": "203763"
  },
  {
    "text": "This is a screenshot of DynamoDB\nCloudWatch monitoring page.",
    "start": "208800",
    "end": "212913"
  },
  {
    "text": "Left side of the slide\nshows read and write usage.",
    "start": "214110",
    "end": "218400"
  },
  {
    "text": "The red line shows the provisioned amount,",
    "start": "218400",
    "end": "220200"
  },
  {
    "text": "and blue is the consumed.",
    "start": "220200",
    "end": "222209"
  },
  {
    "text": "The right side of the\nslide shows the throttles.",
    "start": "222210",
    "end": "224883"
  },
  {
    "text": "We should always consume\nless than provision.",
    "start": "225810",
    "end": "229200"
  },
  {
    "text": "Hence, the blue line should\nalways be under the red line.",
    "start": "229200",
    "end": "232680"
  },
  {
    "text": "But here in the bottom-left,",
    "start": "232680",
    "end": "234810"
  },
  {
    "text": "the blue line is above the\nred one for a brief moment.",
    "start": "234810",
    "end": "238680"
  },
  {
    "text": "There are two things to observe here.",
    "start": "238680",
    "end": "240663"
  },
  {
    "text": "Number one, you can see the\nconsumed write capacity unit",
    "start": "241890",
    "end": "245670"
  },
  {
    "text": "shown in blue are\nexceeding the provisioned",
    "start": "245670",
    "end": "248099"
  },
  {
    "text": "write capacity unit shown in red.",
    "start": "248100",
    "end": "250710"
  },
  {
    "text": "Hence, for a brief moment,",
    "start": "250710",
    "end": "252780"
  },
  {
    "text": "DynamoDB is supporting more\nwrite requests than provisioned.",
    "start": "252780",
    "end": "256443"
  },
  {
    "text": "In this case, DynamoDB uses burst capacity",
    "start": "257310",
    "end": "261359"
  },
  {
    "text": "to accommodate writes in excess.",
    "start": "261360",
    "end": "263883"
  },
  {
    "text": "Number two, the bottom-left shows",
    "start": "264960",
    "end": "267150"
  },
  {
    "text": "that the DynamoDB is\nsupporting excess writes,",
    "start": "267150",
    "end": "269910"
  },
  {
    "text": "but the bottom-right shows",
    "start": "269910",
    "end": "271620"
  },
  {
    "text": "that there are write throttles as well.",
    "start": "271620",
    "end": "273570"
  },
  {
    "text": "You can see the consumed\nwrite peak to 21 WCUs,",
    "start": "274500",
    "end": "278370"
  },
  {
    "text": "but the throttle requests are 76 in count,",
    "start": "278370",
    "end": "282510"
  },
  {
    "text": "which is much more than the consumed peak.",
    "start": "282510",
    "end": "285033"
  },
  {
    "text": "This is because the capacity\nis given to the table",
    "start": "285990",
    "end": "289229"
  },
  {
    "text": "is at a second level,\nand the usage metrics,",
    "start": "289230",
    "end": "292770"
  },
  {
    "text": "which is shown in the bottom-left,",
    "start": "292770",
    "end": "294810"
  },
  {
    "text": "is average over one-minute's time.",
    "start": "294810",
    "end": "297213"
  },
  {
    "text": "So for example,",
    "start": "298200",
    "end": "299760"
  },
  {
    "text": "if a table is having a\nhundred provisioned WCUs,",
    "start": "299760",
    "end": "303270"
  },
  {
    "text": "it can support a hundred\nwrite requests every second.",
    "start": "303270",
    "end": "307229"
  },
  {
    "text": "And if any of the write\nrequests gets throttled,",
    "start": "307230",
    "end": "310740"
  },
  {
    "text": "it will be captured in the\nwrite throttle metrics.",
    "start": "310740",
    "end": "313953"
  },
  {
    "text": "So if in a minute's time\nfor first 30 seconds",
    "start": "315030",
    "end": "319710"
  },
  {
    "text": "the consumed WCU is zero",
    "start": "319710",
    "end": "323100"
  },
  {
    "text": "and the other half of\nthe 30 seconds it is 150,",
    "start": "323100",
    "end": "327780"
  },
  {
    "text": "the usage metrics will still show average,",
    "start": "327780",
    "end": "330600"
  },
  {
    "text": "that is 75 WCUs.",
    "start": "330600",
    "end": "332733"
  },
  {
    "text": "Similarly here, writes that\nare throttle are 76 in count,",
    "start": "334230",
    "end": "339230"
  },
  {
    "text": "but the average writes per second is 21.",
    "start": "340500",
    "end": "344613"
  },
  {
    "text": "Let's discuss what is burst capacity.",
    "start": "351600",
    "end": "353793"
  },
  {
    "text": "Whenever you are not fully\nusing your available throughput,",
    "start": "354660",
    "end": "358500"
  },
  {
    "text": "DynamoDB reserves a portion\nof that unused capacity",
    "start": "358500",
    "end": "362280"
  },
  {
    "text": "for later burst of throughput\nto handle usage spikes.",
    "start": "362280",
    "end": "366603"
  },
  {
    "text": "DynamoDB currently retains\nup to five minutes,",
    "start": "367800",
    "end": "370259"
  },
  {
    "text": "that is 300 seconds,",
    "start": "370260",
    "end": "372150"
  },
  {
    "text": "of unused read and write capacity.",
    "start": "372150",
    "end": "375449"
  },
  {
    "text": "During occasional burst\nof read or write activity,",
    "start": "375450",
    "end": "378600"
  },
  {
    "text": "these extra capacity\nunits can be consumed.",
    "start": "378600",
    "end": "381003"
  },
  {
    "text": "There is no way to monitor this capacity,",
    "start": "382590",
    "end": "385230"
  },
  {
    "text": "and DynamoDB can also\nconsume burst capacity",
    "start": "385230",
    "end": "387990"
  },
  {
    "text": "for background maintenance",
    "start": "387990",
    "end": "389669"
  },
  {
    "text": "and other tasks without prior notice.",
    "start": "389670",
    "end": "392823"
  },
  {
    "text": "You can scan this QR if\nyou want to learn more",
    "start": "394740",
    "end": "396930"
  },
  {
    "text": "about the burst capacity and its usage.",
    "start": "396930",
    "end": "399813"
  },
  {
    "text": "Let's take an example",
    "start": "405090",
    "end": "406199"
  },
  {
    "text": "from one of the published\nAWS Database Blog.",
    "start": "406200",
    "end": "409590"
  },
  {
    "text": "This shows a test designed\nto generate throttles,",
    "start": "409590",
    "end": "412560"
  },
  {
    "text": "jumping the user load from\n4,000 WCUs to 18,000 WCUs.",
    "start": "412560",
    "end": "417560"
  },
  {
    "text": "The table for this test\nhas auto-scaling enabled",
    "start": "419190",
    "end": "422010"
  },
  {
    "text": "with a 70% target utilization.",
    "start": "422010",
    "end": "424293"
  },
  {
    "text": "The top of the diagram",
    "start": "425310",
    "end": "426480"
  },
  {
    "text": "shows the resulting consumed capacity,",
    "start": "426480",
    "end": "428430"
  },
  {
    "text": "that is the fluctuating blue line,",
    "start": "428430",
    "end": "430410"
  },
  {
    "text": "as well as the provisioned capacity,",
    "start": "430410",
    "end": "432150"
  },
  {
    "text": "that is the squared red line.",
    "start": "432150",
    "end": "434250"
  },
  {
    "text": "The bottom of the diagram\nshows the throttle counts",
    "start": "434250",
    "end": "436770"
  },
  {
    "text": "on the table during the same timeframe.",
    "start": "436770",
    "end": "438932"
  },
  {
    "text": "The spike is steep and long\nenough to cause throttles.",
    "start": "439770",
    "end": "443103"
  },
  {
    "text": "The test starts failing with flat traffic,",
    "start": "444000",
    "end": "446160"
  },
  {
    "text": "consuming 4,000 to 5,000 WCUs.",
    "start": "446160",
    "end": "449370"
  },
  {
    "text": "Auto-scaling keeps the\nprovisioned capacity floating",
    "start": "449370",
    "end": "452280"
  },
  {
    "text": "at around 7,500 WCUs.",
    "start": "452280",
    "end": "455400"
  },
  {
    "text": "Then at 1307, the write\ntraffic immediately jumps",
    "start": "455400",
    "end": "459509"
  },
  {
    "text": "to 18,000 WCUs.",
    "start": "459510",
    "end": "461373"
  },
  {
    "text": "Initially, there are no throttles.",
    "start": "462540",
    "end": "465090"
  },
  {
    "text": "Burst capacity permits the excess usage.",
    "start": "465090",
    "end": "468600"
  },
  {
    "text": "At 13.11, however, the\nburst capacity runs out",
    "start": "468600",
    "end": "472860"
  },
  {
    "text": "and the write rate goes down\nto the provisioned amount",
    "start": "472860",
    "end": "476460"
  },
  {
    "text": "with all other requests throttled.",
    "start": "476460",
    "end": "478953"
  },
  {
    "text": "The throttling continues until 13.13,",
    "start": "480180",
    "end": "483449"
  },
  {
    "text": "when auto scaling grows",
    "start": "483450",
    "end": "484980"
  },
  {
    "text": "the provisioned capacity\nup to 26,000 WCUs,",
    "start": "484980",
    "end": "489450"
  },
  {
    "text": "which is enough to handle the spike.",
    "start": "489450",
    "end": "491973"
  },
  {
    "text": "Finally, about 15 minutes\nafter the spike has subsided,",
    "start": "492930",
    "end": "497190"
  },
  {
    "text": "auto-scaling drops the\nprovisioned amount back down.",
    "start": "497190",
    "end": "500613"
  },
  {
    "text": "I would highly recommend\nyou to scan the QR",
    "start": "502560",
    "end": "504930"
  },
  {
    "text": "and read this blog regarding\nhandling traffic spikes",
    "start": "504930",
    "end": "508020"
  },
  {
    "text": "with Amazon DynamoDBs\nprovisioned capacity.",
    "start": "508020",
    "end": "510932"
  },
  {
    "text": "Let's discuss the errors metrics.",
    "start": "515760",
    "end": "518640"
  },
  {
    "text": "The PutItem, UpdateItem,",
    "start": "518640",
    "end": "520169"
  },
  {
    "text": "and DeleteItem operations\nallows you to provide",
    "start": "520170",
    "end": "522779"
  },
  {
    "text": "a logical condition that\nmust evaluate to true",
    "start": "522780",
    "end": "526980"
  },
  {
    "text": "before the operation can proceed.",
    "start": "526980",
    "end": "529529"
  },
  {
    "text": "This is called condition check.",
    "start": "529530",
    "end": "531723"
  },
  {
    "text": "For example, the boot item\noperations, by default,",
    "start": "532770",
    "end": "535890"
  },
  {
    "text": "overrides an item with the\nsame primary key if it exists.",
    "start": "535890",
    "end": "540890"
  },
  {
    "text": "If you want to avoid this, you\nuse a condition expression.",
    "start": "541560",
    "end": "545133"
  },
  {
    "text": "This allows the write to proceed",
    "start": "545970",
    "end": "548279"
  },
  {
    "text": "only if the item in question",
    "start": "548280",
    "end": "550650"
  },
  {
    "text": "does not already have\nthe same primary key.",
    "start": "550650",
    "end": "553443"
  },
  {
    "text": "The example here uses attribute_not_exists",
    "start": "554400",
    "end": "557080"
  },
  {
    "text": "to check whether the primary\nkey exists in the table",
    "start": "558180",
    "end": "561600"
  },
  {
    "text": "before attempting the write operation.",
    "start": "561600",
    "end": "564003"
  },
  {
    "text": "If this condition evaluates to false,",
    "start": "564840",
    "end": "567660"
  },
  {
    "text": "the ConditionalCheckFailed request metric",
    "start": "567660",
    "end": "570209"
  },
  {
    "text": "is incremented by one.",
    "start": "570210",
    "end": "571833"
  },
  {
    "text": "user error is for the request to DynamoDB",
    "start": "576240",
    "end": "579120"
  },
  {
    "text": "or Amazon DynamoDB streams",
    "start": "579120",
    "end": "581400"
  },
  {
    "text": "that generate an HTTP 400 status code.",
    "start": "581400",
    "end": "584793"
  },
  {
    "text": "An HTTP 400 status code usually indicates",
    "start": "585840",
    "end": "589680"
  },
  {
    "text": "a client-side error,",
    "start": "589680",
    "end": "591750"
  },
  {
    "text": "such as invalid combination of parameters,",
    "start": "591750",
    "end": "594120"
  },
  {
    "text": "an attempt to update a non-existent table,",
    "start": "594120",
    "end": "596940"
  },
  {
    "text": "or an incorrect request signature.",
    "start": "596940",
    "end": "599013"
  },
  {
    "text": "Please note that a\nfailed conditional write",
    "start": "600210",
    "end": "603360"
  },
  {
    "text": "will also result in HTTP 400 error,",
    "start": "603360",
    "end": "606930"
  },
  {
    "text": "but these events are reflected",
    "start": "606930",
    "end": "609180"
  },
  {
    "text": "in ConditionalCheckFailed request metrics",
    "start": "609180",
    "end": "612300"
  },
  {
    "text": "but not in user errors metrics.",
    "start": "612300",
    "end": "614912"
  },
  {
    "text": "Similarly, the provisioned\nthroughput exceeded exception",
    "start": "615990",
    "end": "619620"
  },
  {
    "text": "will also give an HTTP 400 error,",
    "start": "619620",
    "end": "623130"
  },
  {
    "text": "but these events are reflected\nin throttle event metrics",
    "start": "623130",
    "end": "627330"
  },
  {
    "text": "and not in user error metrics.",
    "start": "627330",
    "end": "629883"
  },
  {
    "text": "Lastly, system errors is\nfor the request to DynamoDB,",
    "start": "634410",
    "end": "637519"
  },
  {
    "text": "or DynamoDB streams, that\ngenerate an HTTP 500 status code",
    "start": "637520",
    "end": "642420"
  },
  {
    "text": "during the specific time period.",
    "start": "642420",
    "end": "644313"
  },
  {
    "text": "An HTTP 500 usually indicates\nan internal service error.",
    "start": "645420",
    "end": "650420"
  },
  {
    "text": "You might encounter\ninternal service errors",
    "start": "650520",
    "end": "653010"
  },
  {
    "text": "while working with items.",
    "start": "653010",
    "end": "655500"
  },
  {
    "text": "These are expected during\nthe lifetime of a table.",
    "start": "655500",
    "end": "658650"
  },
  {
    "text": "Any failed request can\nbe retried immediately.",
    "start": "658650",
    "end": "662313"
  },
  {
    "text": "When you receive a status\ncode 500 on a write operation,",
    "start": "663180",
    "end": "667110"
  },
  {
    "text": "the operation may have\nsucceeded or failed.",
    "start": "667110",
    "end": "669842"
  },
  {
    "text": "If the write operation is a\nTransactWriteItem request,",
    "start": "671040",
    "end": "674880"
  },
  {
    "text": "then it is okay to retry the operation.",
    "start": "674880",
    "end": "677373"
  },
  {
    "text": "If the write operation is a\nsingle item level request,",
    "start": "678750",
    "end": "682350"
  },
  {
    "text": "such as PutItem, UpdateItem or DeleteItem,",
    "start": "682350",
    "end": "686160"
  },
  {
    "text": "then your application should\nread the state of the item",
    "start": "686160",
    "end": "689819"
  },
  {
    "text": "before retrying the operation,",
    "start": "689820",
    "end": "692250"
  },
  {
    "text": "or use condition expression to ensure",
    "start": "692250",
    "end": "694950"
  },
  {
    "text": "that the item remains in a\ncorrect state after retrying,",
    "start": "694950",
    "end": "698910"
  },
  {
    "text": "regardless of whether the prior operation",
    "start": "698910",
    "end": "701430"
  },
  {
    "text": "succeeded or failed.",
    "start": "701430",
    "end": "703023"
  },
  {
    "text": "Here is an example snapshot of CloudWatch",
    "start": "707880",
    "end": "710700"
  },
  {
    "text": "for ConditionalCheckFailed\nmetrics in blue,",
    "start": "710700",
    "end": "714180"
  },
  {
    "text": "along with the consumed write\ncapacity metrics in orange",
    "start": "714180",
    "end": "718200"
  },
  {
    "text": "over a week's timeframe.",
    "start": "718200",
    "end": "719613"
  },
  {
    "text": "The blue line indicates",
    "start": "720690",
    "end": "721980"
  },
  {
    "text": "that one request failed\nthe conditional check.",
    "start": "721980",
    "end": "725399"
  },
  {
    "text": "Also, the consumed WCUs\nvary from zero to 20",
    "start": "725400",
    "end": "728940"
  },
  {
    "text": "during the week.",
    "start": "728940",
    "end": "729963"
  },
  {
    "text": "Now let's look at the metrics",
    "start": "734670",
    "end": "736139"
  },
  {
    "text": "related to global secondary\nindex, or GSI creation.",
    "start": "736140",
    "end": "739563"
  },
  {
    "text": "First one is\nOnlineIndexConsumedWriteCapacity,",
    "start": "740880",
    "end": "744450"
  },
  {
    "text": "which provides the write capacity units,",
    "start": "744450",
    "end": "746460"
  },
  {
    "text": "or WCUs consumed, when\nadding a new GSI to a table.",
    "start": "746460",
    "end": "750723"
  },
  {
    "text": "If the provisioned write\ncapacity of the GSI is too low,",
    "start": "751650",
    "end": "755520"
  },
  {
    "text": "the incoming write activity",
    "start": "755520",
    "end": "757140"
  },
  {
    "text": "during the backfill\nphase might be throttled.",
    "start": "757140",
    "end": "759873"
  },
  {
    "text": "This can increase the time\nit takes to create the index.",
    "start": "760710",
    "end": "764580"
  },
  {
    "text": "In order to monitor the\nprogress of the index creation,",
    "start": "764580",
    "end": "767700"
  },
  {
    "text": "we can monitor the second metrics.",
    "start": "767700",
    "end": "770280"
  },
  {
    "text": "That is OnlineIndexPercentageProgress,",
    "start": "770280",
    "end": "773700"
  },
  {
    "text": "which provides the\npercentage of completion",
    "start": "773700",
    "end": "776160"
  },
  {
    "text": "when a new GSI is being\nadded to the table.",
    "start": "776160",
    "end": "779043"
  },
  {
    "text": "You should monitor the statistics",
    "start": "779880",
    "end": "781680"
  },
  {
    "text": "to view the relative progress\nas DynamoDB builds the index.",
    "start": "781680",
    "end": "785733"
  },
  {
    "text": "As discussed, if the\nprovisioned write capacity",
    "start": "786600",
    "end": "789269"
  },
  {
    "text": "of the GSI is too low,",
    "start": "789270",
    "end": "791400"
  },
  {
    "text": "incoming write activity\nduring the backfill phase",
    "start": "791400",
    "end": "794760"
  },
  {
    "text": "might be throttled, and\nthese will be captured",
    "start": "794760",
    "end": "797910"
  },
  {
    "text": "in the online index\nthrottle events metrics,",
    "start": "797910",
    "end": "801720"
  },
  {
    "text": "which provides a count of\nthe write throttle events",
    "start": "801720",
    "end": "805050"
  },
  {
    "text": "while adding a new GSI to a table.",
    "start": "805050",
    "end": "807333"
  },
  {
    "text": "You can adjust the write\ncapacity of the index",
    "start": "808260",
    "end": "810810"
  },
  {
    "text": "using the UpdateTable operation,",
    "start": "810810",
    "end": "813270"
  },
  {
    "text": "even while the index is being built.",
    "start": "813270",
    "end": "816150"
  },
  {
    "text": "Also note that the write\nthrottle events metrics for index",
    "start": "816150",
    "end": "819690"
  },
  {
    "text": "does not include any throttle events",
    "start": "819690",
    "end": "822720"
  },
  {
    "text": "that occurred during index creation.",
    "start": "822720",
    "end": "824793"
  },
  {
    "text": "This is a comprehensive list",
    "start": "829470",
    "end": "831029"
  },
  {
    "text": "of all the available metrics\non CloudWatch for DynamoDB.",
    "start": "831030",
    "end": "835500"
  },
  {
    "text": "You can scan the QR",
    "start": "835500",
    "end": "836820"
  },
  {
    "text": "if you want to read more\nabout these metrics.",
    "start": "836820",
    "end": "839523"
  },
  {
    "text": "This video is part",
    "start": "841080",
    "end": "842190"
  },
  {
    "text": "of the DynamoDB Nuggets\nplaylist on YouTube",
    "start": "842190",
    "end": "845400"
  },
  {
    "text": "where we try to explain you\nthe important DynamoDB concepts",
    "start": "845400",
    "end": "848880"
  },
  {
    "text": "in form of videos that are less\nthan 15 minutes in duration.",
    "start": "848880",
    "end": "852423"
  },
  {
    "text": "You can scan this QR code",
    "start": "853440",
    "end": "855210"
  },
  {
    "text": "to access the DynamoDB\nNuggets playlist on YouTube.",
    "start": "855210",
    "end": "858690"
  },
  {
    "text": "I hope you find this video useful",
    "start": "858690",
    "end": "860850"
  },
  {
    "text": "in learning the key\nCloudWatch performance metrics",
    "start": "860850",
    "end": "863216"
  },
  {
    "text": "for DynamoDB.",
    "start": "863216",
    "end": "864630"
  },
  {
    "text": "Do let us know your feedback\nin the comments section.",
    "start": "864630",
    "end": "867630"
  },
  {
    "text": "Also, let us know the topics",
    "start": "867630",
    "end": "869640"
  },
  {
    "text": "that you would like us to cover",
    "start": "869640",
    "end": "870870"
  },
  {
    "text": "in the next DynamoDB Nuggets video.",
    "start": "870870",
    "end": "873960"
  },
  {
    "text": "Thank you.",
    "start": "873960",
    "end": "874793"
  }
]