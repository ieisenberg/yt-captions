[
  {
    "text": "Amazon Elastic File System (EFS) provides a\nsimple, scalable, and fully-managed shared file",
    "start": "0",
    "end": "6400"
  },
  {
    "text": "system for use with AWS Cloud services and\non-premises resources. Whether you’re",
    "start": "6400",
    "end": "11000"
  },
  {
    "text": "developing a new containerized application or\nmodernizing an existing monolith, there are many",
    "start": "11000",
    "end": "15100"
  },
  {
    "text": "types of applications where a shared persistence\nlayer is an essential ingredient in achieving a",
    "start": "15100",
    "end": "20000"
  },
  {
    "text": "resilient and durable architecture. These include\nstateful, long-running applications like content",
    "start": "20000",
    "end": "25100"
  },
  {
    "text": "management systems, whose files change\nfrequently as editors publish new content or",
    "start": "25100",
    "end": "29140"
  },
  {
    "text": "administrators install plugins, and applications that\nneed to share data with one another, possibly",
    "start": "29140",
    "end": "34100"
  },
  {
    "text": "spanning multiple availability zones, such as\nmachine learning frameworks or collaborative data",
    "start": "34100",
    "end": "38160"
  },
  {
    "text": "science workspaces. Amazon EFS is the\nnatural choice for these types of use cases. As a",
    "start": "38160",
    "end": "44600"
  },
  {
    "text": "fully-managed service, it’s simple to set up, and it\nwill scale to petabytes of capacity and several",
    "start": "44600",
    "end": "48180"
  },
  {
    "text": "gigabytes per second of aggregate throughput\nautomatically as you add and remove data. And if",
    "start": "48180",
    "end": "54100"
  },
  {
    "text": "your workload requires higher throughput than\nthat, you can achieve even more by using",
    "start": "54100",
    "end": "58600"
  },
  {
    "text": "Provisioned Throughput! When you use Amazon\nEFS in conjunction with your containerized",
    "start": "58600",
    "end": "63000"
  },
  {
    "text": "applications on AWS, you can feel confident that\nyour shared storage solution is as elastic as the",
    "start": "63000",
    "end": "68200"
  },
  {
    "text": "container infrastructure that depends on it.\nLet’s take a look at an example scenario of one of",
    "start": "68200",
    "end": "73799"
  },
  {
    "text": "these use cases: We have an Amazon Elastic\nContainer Service, or “ECS”, cluster running a mix",
    "start": "73800",
    "end": "79400"
  },
  {
    "text": "of tasks using both ECS on EC2 and AWS\nFargate. The containers are all running a web",
    "start": "79400",
    "end": "84140"
  },
  {
    "text": "application called Cloud Commander. We’ll use it\nas a hypothetical production application for today.",
    "start": "84140",
    "end": "89140"
  },
  {
    "text": "An application such as this might need varying\ndegrees of read and write access to shared",
    "start": "89140",
    "end": "93159"
  },
  {
    "text": "storage, and the familiar interface of a file\nmanager will allow us to visualize these ideas",
    "start": "93160",
    "end": "98000"
  },
  {
    "text": "more easily. The ECS on EC2 version of this\napplication is running behind an Amazon",
    "start": "98000",
    "end": "103200"
  },
  {
    "text": "Application Load Balancer, and the Fargate\nversion is running behind another. If we open up",
    "start": "103200",
    "end": "108799"
  },
  {
    "text": "the first load balancer URL, we’ll see an empty\ndirectory where we can drag-and-drop a file to",
    "start": "108800",
    "end": "112120"
  },
  {
    "text": "upload it, and then double-click on it to view it.\nNotice though, that if another user, represented by",
    "start": "112120",
    "end": "122000"
  },
  {
    "text": "this other browser window, loads the same\napplication, the file we just uploaded isn’t there",
    "start": "122000",
    "end": "126800"
  },
  {
    "text": "anymore. The other version of the application\nrunning on Fargate has the same behavior, and",
    "start": "126800",
    "end": "132600"
  },
  {
    "text": "neither application can see what has been\nuploaded to the other. What’s happening here",
    "start": "132600",
    "end": "136100"
  },
  {
    "text": "is that the files we’re uploading aren’t being saved\nto a common location - they’re being saved locally",
    "start": "136100",
    "end": "140160"
  },
  {
    "text": "to whichever container happens to process the\nupload request, so there’s no guarantee that",
    "start": "140160",
    "end": "144180"
  },
  {
    "text": "different users would see the same files. That’s\ndefinitely not what we want here - so let’s fix it! ",
    "start": "144180",
    "end": "149180"
  },
  {
    "text": "In this demo, we’re going to use Amazon EFS to\ncreate a shared filesystem, and then attach it to",
    "start": "149180",
    "end": "155400"
  },
  {
    "text": "our existing Amazon ECS and AWS Fargate\nservices. This will enable our example file",
    "start": "155400",
    "end": "160799"
  },
  {
    "text": "manager application to interact with the same\nfiles, no matter which container handles our",
    "start": "160800",
    "end": "164400"
  },
  {
    "text": "requests. Once we’ve got EFS hooked up to both\nversions of our application, we’ll then explore how",
    "start": "164400",
    "end": "169400"
  },
  {
    "text": "AWS IAM Authorization and EFS Access Points\ncan simplify configuring more granular access to",
    "start": "169400",
    "end": "174159"
  },
  {
    "text": "our data for different scenarios. If you’d like to\ntry this out on your own later, you can use the",
    "start": "174160",
    "end": "180000"
  },
  {
    "text": "AWS Cloud Development Kit, or “CDK”, to deploy\nthe initial state of this demo environment to your",
    "start": "180000",
    "end": "185800"
  },
  {
    "text": "own AWS account. A link to the sample code\nrepository for that is available in the video",
    "start": "185800",
    "end": "189160"
  },
  {
    "text": "description below. But for now, let’s head over to\nthe AWS console, open the Amazon EFS",
    "start": "189160",
    "end": "195180"
  },
  {
    "text": "dashboard, and create our filesystem! Creating\na basic EFS filesystem is easy. First, we",
    "start": "195180",
    "end": "202400"
  },
  {
    "text": "choose the VPC the filesystem will be created in\nand its mount targets. In order for all of our",
    "start": "202400",
    "end": "207400"
  },
  {
    "text": "containers to be able to access it, we must create\na mount target in each Availability Zone. As a",
    "start": "207400",
    "end": "212200"
  },
  {
    "text": "general best practice, we’ll choose the private\nsubnet for each Availability Zone for our mount",
    "start": "212200",
    "end": "216200"
  },
  {
    "text": "targets. We also need to select a security group.\nThe default security is pre-selected for us, but",
    "start": "216200",
    "end": "221180"
  },
  {
    "text": "we’re going to choose this “efs-demo-fs” security\ngroup that was created by the AWS CDK sample",
    "start": "221180",
    "end": "227120"
  },
  {
    "text": "code so that we can limit access to the filesystem\nto just our containers. Next, we’re shown",
    "start": "227120",
    "end": "233400"
  },
  {
    "text": "several different filesystem settings that we can\nconfigure. We’ll leave most of them alone for this",
    "start": "233400",
    "end": "237599"
  },
  {
    "text": "demo, but let’s give the filesystem a name and\nenable encryption of data at rest using the default",
    "start": "237600",
    "end": "242600"
  },
  {
    "text": "AWS Key Management Service key for Amazon\nEFS before moving on.  We’ll come back to the",
    "start": "242600",
    "end": "248200"
  },
  {
    "text": "additional client access settings later on in this\ndemo. For now, let’s continue, and then click",
    "start": "248200",
    "end": "252160"
  },
  {
    "text": "“Create File System”.  Our EFS filesystem was\nsuccessfully created! Now let’s go make it",
    "start": "252160",
    "end": "259600"
  },
  {
    "text": "available in the Cloud Commander application\nrunning on our cluster!  To do that, we open",
    "start": "259600",
    "end": "263160"
  },
  {
    "text": "the Task Definitions link in the Amazon ECS\nmenu, select one of the task definitions, and click",
    "start": "263160",
    "end": "269000"
  },
  {
    "text": "Create new revision. First, we’ll scroll all the way\ndown to the bottom and click on the name of the",
    "start": "269000",
    "end": "274400"
  },
  {
    "text": "existing volume to modify it. Instead of Bind\nMount, we’ll choose EFS as the volume type and",
    "start": "274400",
    "end": "280400"
  },
  {
    "text": "then select the File system ID for the EFS\nfilesystem that we just created. We’ll get into",
    "start": "280400",
    "end": "285400"
  },
  {
    "text": "Access points later, so let’s leave that alone for\nnow. The root directory value tells us which",
    "start": "285400",
    "end": "289160"
  },
  {
    "text": "directory in the EFS filesystem will be mounted as\nthe root directory inside the ECS host. Leaving it",
    "start": "289160",
    "end": "296200"
  },
  {
    "text": "as just “/” will mount the entire EFS volume’s\ncontents. We’ll enable Encryption in transit, and",
    "start": "296200",
    "end": "303800"
  },
  {
    "text": "finally, we’ll leave EFS IAM authorization disabled\nfor the time being and come back to it later. ",
    "start": "303800",
    "end": "309199"
  },
  {
    "text": "Since we already had the Bind Mount volume set\nup earlier that we changed to an EFS volume, we",
    "start": "309200",
    "end": "313140"
  },
  {
    "text": "don’t need to make any changes to the container\ndefinition. For reference, if we were adding a",
    "start": "313140",
    "end": "318600"
  },
  {
    "text": "completely new volume, we’d now need to go up\nto the list of container definitions, click “cloudcmd”,",
    "start": "318600",
    "end": "324600"
  },
  {
    "text": "and add a new mount point under the Storage and\nLogging section. That’s not the case here, though,",
    "start": "324600",
    "end": "329600"
  },
  {
    "text": "so we’ll cancel out of that, scroll down to the\nbottom, and click “Create” to create the new task",
    "start": "329600",
    "end": "334800"
  },
  {
    "text": "definition revision. We can start deploying this\nby choosing the Update service option within the",
    "start": "334800",
    "end": "339139"
  },
  {
    "text": "Actions dropdown menu. Please note that at the\ntime of this recording, it’s necessary to select",
    "start": "339140",
    "end": "344200"
  },
  {
    "text": "1.4.0 as the platform version. We can otherwise\nleave the rest of the inputs alone as we click",
    "start": "344200",
    "end": "349140"
  },
  {
    "text": "through each of the screens, and then keep an\neye on the deployment status until ECS has",
    "start": "349140",
    "end": "353140"
  },
  {
    "text": "finished starting our updated tasks and stopping\nthe old ones.  This process is identical for both",
    "start": "353140",
    "end": "359200"
  },
  {
    "text": "ECS on EC2 services and as well as for Fargate\nservices, so we won’t walk through it step-by-step",
    "start": "359200",
    "end": "364200"
  },
  {
    "text": "in this video. Same as with the previous\nwalkthrough, we just need to wait until ECS has",
    "start": "364200",
    "end": "368160"
  },
  {
    "text": "finished deploying our updated tasks and cleaning\nout the old ones, and then we’re ready to try",
    "start": "368160",
    "end": "373200"
  },
  {
    "text": "everything out. Now that the cluster is\nshowing only the updated tasks running, let’s",
    "start": "373200",
    "end": "378000"
  },
  {
    "text": "open up both of our browser windows from earlier\nand see what happens. The first thing we notice is",
    "start": "378000",
    "end": "382100"
  },
  {
    "text": "that the test files we uploaded at the start of the\ndemo are gone. This is expected, since the file",
    "start": "382100",
    "end": "387800"
  },
  {
    "text": "was previously being saved on a data volume that\nwas no longer available once the container was",
    "start": "387800",
    "end": "391400"
  },
  {
    "text": "shut down, which is one of the things our new\nEFS filesystem is going to help us avoid. Let’s try",
    "start": "391400",
    "end": "396000"
  },
  {
    "text": "uploading a few new files. OK, we can upload\nfiles and view them when we double-click. After",
    "start": "396000",
    "end": "403100"
  },
  {
    "text": "refreshing the listing a few times, and pretending\nto be a different user using a different browser, we",
    "start": "403100",
    "end": "408100"
  },
  {
    "text": "can see our files are still there. Now let’s see\ncheck and see what happens if we refresh the",
    "start": "408100",
    "end": "413100"
  },
  {
    "text": "window using the other application running on\nAWS Fargate. Great! Our files are still there",
    "start": "413100",
    "end": "419160"
  },
  {
    "text": "too. By simply creating an EFS filesystem and\nmounting it to use as a volume in our containers,",
    "start": "419160",
    "end": "424180"
  },
  {
    "text": "we have persistent, shared storage accessible by\nboth of our example Cloud Commander",
    "start": "424180",
    "end": "429400"
  },
  {
    "text": "applications running in multiple containers, and we\nknow that our data will still be there even if we",
    "start": "429400",
    "end": "434199"
  },
  {
    "text": "terminate these containers and launch new\nones.  But this is a pretty basic use case. In a",
    "start": "434200",
    "end": "439100"
  },
  {
    "text": "real application, we’re going to have several\ndifferent services that don’t all need the same",
    "start": "439100",
    "end": "443600"
  },
  {
    "text": "level of access to the same filesystem. The\ntraditional approach of relying on POSIX",
    "start": "443600",
    "end": "447140"
  },
  {
    "text": "filesystem permissions can make this very difficult\nto configure and may even require creating",
    "start": "447140",
    "end": "452600"
  },
  {
    "text": "multiple EFS filesystems to ensure that everything\nis locked down correctly. Instead, we’re going to",
    "start": "452600",
    "end": "457600"
  },
  {
    "text": "take a moment to dream up a very complicated\nscenario, and then see how easy it can be to set",
    "start": "457600",
    "end": "461140"
  },
  {
    "text": "up if we incorporate IAM Authorization and EFS\nAccess Points into our solution! So, what’s our",
    "start": "461140",
    "end": "467140"
  },
  {
    "text": "scenario going to be? Well, a service is going to\nhave one of three types of access to a filesystem:",
    "start": "467140",
    "end": "472160"
  },
  {
    "text": "read-only, read/write, or none at all. We have two\nservices in our demo, so let’s have our",
    "start": "472160",
    "end": "478600"
  },
  {
    "text": "complicated scenario involve all of these\ncombinations! We’re going to set things up as",
    "start": "478600",
    "end": "482600"
  },
  {
    "text": "follows: (1) each service will have its own private\nstorage, shared with containers of its same type,",
    "start": "482600",
    "end": "488600"
  },
  {
    "text": "that only it can read and write; (2) each service\nwill have a location it can write to, that the other",
    "start": "488600",
    "end": "494400"
  },
  {
    "text": "service can read from, but not write to; and (3)\nboth services will have access to a common",
    "start": "494400",
    "end": "499139"
  },
  {
    "text": "location that they can both read to and write from\nlike they have now.  OK, let’s go back to EFS",
    "start": "499140",
    "end": "506000"
  },
  {
    "text": "and configure this! We’ll create the Access\nPoints first. An Access Point can be thought of as",
    "start": "506000",
    "end": "510120"
  },
  {
    "text": "an application-specific entry point into a certain\nlocation in an EFS filesystem, this lets us manage",
    "start": "510120",
    "end": "516800"
  },
  {
    "text": "things like data access and user identities more\neasily. We’re going to create some Access Points",
    "start": "516800",
    "end": "521200"
  },
  {
    "text": "for each of the three scenarios mentioned\nearlier.  First, let’s configure the private Access",
    "start": "521200",
    "end": "525120"
  },
  {
    "text": "Points for each of our services that only they are\nable to read from and write to. Let’s start with",
    "start": "525120",
    "end": "531000"
  },
  {
    "text": "Fargate. We’ll call the Access Point “FargatePrivate”\nand have its root directory begin",
    "start": "531000",
    "end": "536000"
  },
  {
    "text": "at “/private/fargate”.  We also have the ability\nto specify a POSIX User and Owner. The values",
    "start": "536000",
    "end": "543000"
  },
  {
    "text": "entered under POSIX User will tell the mounted\nfilesystem who we are, and the values under",
    "start": "543000",
    "end": "547600"
  },
  {
    "text": "Owner will define the ownership and permissions\nfor the directory we specified when it gets created",
    "start": "547600",
    "end": "552600"
  },
  {
    "text": "the first time we connect. To keep things easy to\nremember, let’s use “7000” as the Owner ID and",
    "start": "552600",
    "end": "558399"
  },
  {
    "text": "Group ID for anything related to our Fargate tasks,\nsince the word “Fargate” has seven letters. As for",
    "start": "558400",
    "end": "564000"
  },
  {
    "text": "permissions, we only want our Fargate tasks to be\nable to read from and write to here, so let’s set the",
    "start": "564000",
    "end": "569160"
  },
  {
    "text": "permissions to 750. The configuration for\n“EcsPrivate” is the same, except we’ll input “ECS”",
    "start": "569160",
    "end": "576180"
  },
  {
    "text": "instead of “Fargate”, and we’ll use “3000” for the\nIDs, since “ECS” has 3 letters.  Next, we’ll add",
    "start": "576180",
    "end": "584000"
  },
  {
    "text": "Access Points for each service that they can write\nto and the other can read from.",
    "start": "584000",
    "end": "595400"
  },
  {
    "text": "And finally, we’ll add a common location where both\nservices can read and write freely, and then click “Save",
    "start": "595400",
    "end": "602160"
  },
  {
    "text": "access points” to create them. It’ll take a few\nmoments after saving for them to become",
    "start": "602160",
    "end": "607000"
  },
  {
    "text": "available, at which point we can define how\naccess is going to work. Let’s scroll back up and",
    "start": "607000",
    "end": "611140"
  },
  {
    "text": "set our filesystem policy. There’s no policy in\nplace right now, so our filesystem is using the",
    "start": "611140",
    "end": "616180"
  },
  {
    "text": "default policy of allowing any clients with network\naccess to connect, which is why we were able to",
    "start": "616180",
    "end": "621120"
  },
  {
    "text": "hook up the filesystem to our containers so easily\nbefore. To get our policy started, let’s check off",
    "start": "621120",
    "end": "626140"
  },
  {
    "text": "these three settings to configure new defaults:\n“Disable root access”, “Enforce read-only access”,",
    "start": "626140",
    "end": "632800"
  },
  {
    "text": "and “Enforce in-transit encryption”. After clicking\n“Set policy”, we can see the JSON tab has been",
    "start": "632800",
    "end": "638120"
  },
  {
    "text": "populated with the familiar IAM-style policy\nconfiguration. Now we need to configure the",
    "start": "638120",
    "end": "643160"
  },
  {
    "text": "policy for our own scenarios. We’ll do one\ntogether step-by-step, and then fast-forward",
    "start": "643160",
    "end": "648120"
  },
  {
    "text": "through the rest. If you’d like to review any\nindividual policy statement more closely, a copy of",
    "start": "648120",
    "end": "653200"
  },
  {
    "text": "the entire policy is available at the same\nrepository linked in the video description. Let’s",
    "start": "653200",
    "end": "658600"
  },
  {
    "text": "configure “FargatePrivate”.  We want to allow\nour Fargate service, or more specifically, the Task",
    "start": "658600",
    "end": "663180"
  },
  {
    "text": "IAM Role that it’s using, to be able to mount and\nwrite to the FargatePrivate access point that we",
    "start": "663180",
    "end": "668100"
  },
  {
    "text": "defined below. We can get that Task IAM Role’s\nARN from the Fargate task definition.",
    "start": "668100",
    "end": "678600"
  },
  {
    "text": "It needs to be able to mount and write to the filesystem,\nand we’ll specify that this policy statement applies to",
    "start": "678600",
    "end": "684160"
  },
  {
    "text": "that “FargatePrivate” access point.\n ",
    "start": "684160",
    "end": "690000"
  },
  {
    "text": "Since it needs this same level of access for the\n“FargateShared” scenario, we’ll go ahead and",
    "start": "690000",
    "end": "694400"
  },
  {
    "text": "add that access point here as well. The final policy\nlooks like this, and we can use the “Sid” values to",
    "start": "694400",
    "end": "700100"
  },
  {
    "text": "help us tell at a glance what each section is for. Let’s\nsave this policy and go back to our task definitions to",
    "start": "700100",
    "end": "708600"
  },
  {
    "text": "make the access points available. We’ll quickly run\nthrough how to create the new task definition",
    "start": "708600",
    "end": "714000"
  },
  {
    "text": "revision for the Fargate application. First, let’s add\nthe volume for the “common” access point, making",
    "start": "714000",
    "end": "719120"
  },
  {
    "text": "sure to also check the “Enable IAM Authorization” box\nso that the filesystem policy we created earlier gets",
    "start": "719120",
    "end": "725600"
  },
  {
    "text": "evaluated. Next, we’ll do the “private” access point\nfor Fargate,",
    "start": "725600",
    "end": "734180"
  },
  {
    "text": "and finally, we’ll do both of the “shared” scenarios -\nFargate and ECS on EC2.",
    "start": "734180",
    "end": "749180"
  },
  {
    "text": "We don’t need our “files” example volume anymore, so\nwe’ll remove that before going to the container definition",
    "start": "749180",
    "end": "755800"
  },
  {
    "text": "to add all of these new mount points. Note that since our\nsample application container uses the “/files” directory",
    "start": "755800",
    "end": "763800"
  },
  {
    "text": "as its root, we need to be sure to mount our access points\nwithin that “/files” path in order for them to be accessible.",
    "start": "763800",
    "end": "771180"
  },
  {
    "text": "There’s the mount point configuration for “common”...\n ",
    "start": "771180",
    "end": "778600"
  },
  {
    "text": "both “shared” volumes...\n ",
    "start": "778600",
    "end": "783100"
  },
  {
    "text": "and the “private” volume just for the instance of our\napplication that’s running on Fargate.",
    "start": "783100",
    "end": "789199"
  },
  {
    "text": "The process to do this for the ECS on EC2 application’s\ntask definition is identical, aside from the names, so",
    "start": "789200",
    "end": "795160"
  },
  {
    "text": "we won’t go through that step-by-step in this video.\nAfter creating both of the new task definitions and",
    "start": "795160",
    "end": "800160"
  },
  {
    "text": "updating the services, though, we can open up our two\nbrowsers again and see that they each have three",
    "start": "800160",
    "end": "805800"
  },
  {
    "text": "directories - “common”, “private”, and “shared”.\n ",
    "start": "805800",
    "end": "810600"
  },
  {
    "text": "They can both read and write from each other’s files\nunder the “common” directory...",
    "start": "810600",
    "end": "815800"
  },
  {
    "text": "read, but not write, each other’s files under the matching\n“shared” directories...",
    "start": "815800",
    "end": "823200"
  },
  {
    "text": "and they each have a private space for storing files\nunder the “private” directory that the other can’t",
    "start": "823200",
    "end": "828120"
  },
  {
    "text": "interact with at all.\n ",
    "start": "828120",
    "end": "831000"
  },
  {
    "text": "Support for Amazon EFS on both AWS Fargate and\nAmazon ECS for EC2 is available in all AWS regions.",
    "start": "831000",
    "end": "838120"
  },
  {
    "text": "To learn more about using Amazon EFS with your\ncontainerized applications, including documentation,",
    "start": "838120",
    "end": "843800"
  },
  {
    "text": "blog posts, and the sample code from this demo,\nplease visit the links in the video description below.",
    "start": "843800",
    "end": "848120"
  },
  {
    "text": "Thanks for watching!\n ",
    "start": "848120",
    "end": "851102"
  }
]