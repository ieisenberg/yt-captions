[
  {
    "text": "hello good morning and welcome to today's session let me introduce myself to get started",
    "start": "79",
    "end": "5730"
  },
  {
    "text": "my name is Evgeniy I'm a software engineering manager at Autodesk and with me today",
    "start": "5730",
    "end": "10969"
  },
  {
    "text": "Hayden and with me today I'll have Nathan Taber from AWS containers team",
    "start": "10969",
    "end": "16680"
  },
  {
    "text": "and together would like to take you through a journey of how we think about application observability and resiliency",
    "start": "16680",
    "end": "23180"
  },
  {
    "text": "I'll begin by introducing autodesk and our process of cloud transformation",
    "start": "23180",
    "end": "28410"
  },
  {
    "text": "where we take our traditional desktop products and convert them into interconnected cloud-based applications",
    "start": "28410",
    "end": "34410"
  },
  {
    "text": "talk about some of the challenges we face along the way and kind of a step by step process we've gone through you know",
    "start": "34410",
    "end": "41070"
  },
  {
    "text": "to overcome these challenges and build in the term cloud platform there's hopefully reusable and applicable for",
    "start": "41070",
    "end": "46829"
  },
  {
    "text": "your enterprise this this process starts with you know introducing standardized",
    "start": "46829",
    "end": "52320"
  },
  {
    "text": "cloud platform making sure we have full stack observability traceability across services and of course some of the",
    "start": "52320",
    "end": "59520"
  },
  {
    "text": "resiliency patterns we can put in place between the communications of these services eventually introducing the",
    "start": "59520",
    "end": "65670"
  },
  {
    "text": "concept of a service mesh at which point nathan will share some of the new and exciting things that amazon is doing in",
    "start": "65670",
    "end": "71490"
  },
  {
    "text": "the space and to kind of tie the loop but first things first",
    "start": "71490",
    "end": "76950"
  },
  {
    "text": "let me briefly introduce autodesk now autodesk we make software for people who make",
    "start": "76950",
    "end": "82860"
  },
  {
    "text": "things all kinds of things now if you've ever if you've ever driven a high-performance car or admired",
    "start": "82860",
    "end": "89280"
  },
  {
    "text": "architecture of a beautiful building seen a great film or even use the smartphone chances are you've seen what millions of",
    "start": "89280",
    "end": "96390"
  },
  {
    "text": "our customers do on a daily basis with the products we create today we have over 220 million of these customers in a",
    "start": "96390",
    "end": "103530"
  },
  {
    "text": "broad range of industries from design and architecture to construction production media and entertainment",
    "start": "103530",
    "end": "110240"
  },
  {
    "text": "industries with a broad suite of products and that's what really excites me about working for the disc and just",
    "start": "110240",
    "end": "117390"
  },
  {
    "text": "to reflect back in some of my professional experience to date prior to joining Autodesk I used to build",
    "start": "117390",
    "end": "123140"
  },
  {
    "text": "algorithms algorithmic trading systems for large investment things and if you think about the very nature of that job",
    "start": "123140",
    "end": "130080"
  },
  {
    "text": "it involves moving bits Safford to move bits that in turn move",
    "start": "130080",
    "end": "135860"
  },
  {
    "text": "dollars create better executions in the marketplace a better overall economic system many of my friends and university",
    "start": "135860",
    "end": "144050"
  },
  {
    "text": "classmates joined the likes of Facebook where they create software to move bits that in turn create human engagements",
    "start": "144050",
    "end": "151100"
  },
  {
    "text": "emotions and connections but Autodesk we build software to move bits that in turn",
    "start": "151100",
    "end": "157730"
  },
  {
    "text": "shape the very physical world we live in the airplanes the cars the hotels chances are the movies you've seen on",
    "start": "157730",
    "end": "164270"
  },
  {
    "text": "your flight here so I want to tie a little bit of this talk in reflecting",
    "start": "164270",
    "end": "170540"
  },
  {
    "text": "how the systems will build as engineers impact the world we live in when",
    "start": "170540",
    "end": "175670"
  },
  {
    "text": "speaking of that world I have some fascinating starts to share as we're speaking right now there are 400,000",
    "start": "175670",
    "end": "183170"
  },
  {
    "text": "people joining the middle class worldwide tomorrow there'll be 400,000",
    "start": "183170",
    "end": "188930"
  },
  {
    "text": "people joining the middle class by next year there'll be a hundred forty million",
    "start": "188930",
    "end": "194900"
  },
  {
    "text": "people who would have joined the middle class worldwide by the year of 2015",
    "start": "194900",
    "end": "200870"
  },
  {
    "text": "there will be 10 billion human beings on this planet if you think about it all of",
    "start": "200870",
    "end": "206840"
  },
  {
    "text": "these people will need schools hospitals cars smart phones trawlers you name it",
    "start": "206840",
    "end": "212810"
  },
  {
    "text": "and that's a really really great news create opportunity think of all the think of all the opportunities new",
    "start": "212810",
    "end": "219860"
  },
  {
    "text": "markets new ideas new challenges its unlocks at the same time it's being of",
    "start": "219860",
    "end": "224990"
  },
  {
    "text": "challenges it is a somewhat intimidating challenge it's a challenge that forces us to create more and better products",
    "start": "224990",
    "end": "232570"
  },
  {
    "text": "that have less negative environmental impact on the world speaking of schools",
    "start": "232570",
    "end": "238940"
  },
  {
    "text": "and office buildings and hospitals and and all that take construction industry for example today it's a ten trillion",
    "start": "238940",
    "end": "246970"
  },
  {
    "text": "dollar industry it accounts for 13% of worldwide GDP yet if you talk to the",
    "start": "246970",
    "end": "254510"
  },
  {
    "text": "experts in the field they'll tell you that over 30% of any given construction",
    "start": "254510",
    "end": "259880"
  },
  {
    "text": "project spent is actually wasted the waste comes from various factors from",
    "start": "259880",
    "end": "265430"
  },
  {
    "text": "you know really complex planning to inefficient workflows to connect different stages of",
    "start": "265430",
    "end": "271030"
  },
  {
    "text": "construction project to the sheer difficulty of assembling really complex structural pieces on-site now at the",
    "start": "271030",
    "end": "278920"
  },
  {
    "text": "same time on the right-hand side you see what we're noticing is a really great",
    "start": "278920",
    "end": "284560"
  },
  {
    "text": "pattern in the world of industrialized construction where highly sophisticated and autonomous",
    "start": "284560",
    "end": "289960"
  },
  {
    "text": "factories and assembly lines produce prefabricated parts that can be assembled right at the construction site",
    "start": "289960",
    "end": "297180"
  },
  {
    "text": "now what this gives us at Autodesk is a unique opportunity because we have",
    "start": "297180",
    "end": "302530"
  },
  {
    "text": "expertise through the software products with built in both of these industries and really the key to eliminating some",
    "start": "302530",
    "end": "310030"
  },
  {
    "text": "of that 30% waste across the construction industry is to efficiently automating and connecting these two",
    "start": "310030",
    "end": "316470"
  },
  {
    "text": "stages of a construction project now the challenge in that of course is in the",
    "start": "316470",
    "end": "322810"
  },
  {
    "text": "very nature of how construction projects are run today if you think about it a typical construction project today",
    "start": "322810",
    "end": "329920"
  },
  {
    "text": "represents vast volumes of highly complex heavily linked data this data",
    "start": "329920",
    "end": "335110"
  },
  {
    "text": "stored and isolated silos and requires highly complex applications to render",
    "start": "335110",
    "end": "341950"
  },
  {
    "text": "constrain solve search and really interpret that data in a meaningful way the key to connecting",
    "start": "341950",
    "end": "349560"
  },
  {
    "text": "the various stages of this construction project is knocking down those monolithic applications allowing the",
    "start": "349560",
    "end": "356530"
  },
  {
    "text": "data to move freely between systems and really connecting the different stages of a construction project from design to",
    "start": "356530",
    "end": "363880"
  },
  {
    "text": "modeling fabrication all the way to transportation and assembling a right at",
    "start": "363880",
    "end": "368980"
  },
  {
    "text": "the construction site now the best architectural pattern that we see an",
    "start": "368980",
    "end": "375850"
  },
  {
    "text": "Autodesk to enable this type of automation is of course highly distributed pluggable workflows to run",
    "start": "375850",
    "end": "381970"
  },
  {
    "text": "the cloud really represented as micro services and equally importantly",
    "start": "381970",
    "end": "388230"
  },
  {
    "text": "observable and resilient communications between these micro services so we have a consistent view of the overall system",
    "start": "388230",
    "end": "395760"
  },
  {
    "text": "now speaking from experience that",
    "start": "395760",
    "end": "401400"
  },
  {
    "text": "transformation of taking mana listen and converting them into micro services to run the cloud and unlock the potential",
    "start": "401400",
    "end": "407980"
  },
  {
    "text": "of each monolithic product through an interconnected system is is not trivial",
    "start": "407980",
    "end": "413500"
  },
  {
    "text": "to say the least the challenges come in wide range or wide spectrum from making",
    "start": "413500",
    "end": "418720"
  },
  {
    "text": "sure we have full stack observability for individual services to consist in logging to tracing across services to",
    "start": "418720",
    "end": "425770"
  },
  {
    "text": "making sure we have a we have a way to profile and to store telemetry of",
    "start": "425770",
    "end": "432040"
  },
  {
    "text": "applications essentially understand it understand the performance of individual pieces but also mapping that performance",
    "start": "432040",
    "end": "438580"
  },
  {
    "text": "to the end-user experience standardization now if you think about",
    "start": "438580",
    "end": "443680"
  },
  {
    "text": "it today we have thousands of engineers working in hundreds of agile teams in dozens of countries in a broad spectrum",
    "start": "443680",
    "end": "450550"
  },
  {
    "text": "of industries introducing a standardized",
    "start": "450550",
    "end": "455590"
  },
  {
    "text": "platform for them to deploy run and observe the this broad range of products",
    "start": "455590",
    "end": "460660"
  },
  {
    "text": "is really important and also challenging and last but not least retrofitting now",
    "start": "460660",
    "end": "466270"
  },
  {
    "text": "I put this in as a challenge but it's really both the challenge and a great opportunity it's one thing to build a",
    "start": "466270",
    "end": "472330"
  },
  {
    "text": "new system from scratch using the greatest and latest technology which is difficult in song world way depending on",
    "start": "472330",
    "end": "478630"
  },
  {
    "text": "the complexity but it's yet another challenge to take 30 years worth of IP in in the industries that we've built",
    "start": "478630",
    "end": "486990"
  },
  {
    "text": "things like you know highly complex modeling tools constrained solvers computational fluid dynamics and",
    "start": "486990",
    "end": "493840"
  },
  {
    "text": "simulation products where we have you know products that have been built into",
    "start": "493840",
    "end": "499480"
  },
  {
    "text": "civil legislation and have been certified to work in in in highly regulated industries think of the",
    "start": "499480",
    "end": "505420"
  },
  {
    "text": "potential of unlocking those products and democratizing them in a cloud through an interconnected system of",
    "start": "505420",
    "end": "511480"
  },
  {
    "text": "course that's a great opportunity but also challenged because making code changes and moving them into a cloud doesn't come for free so this journey",
    "start": "511480",
    "end": "519159"
  },
  {
    "text": "we've taken to kind of solve this solve this dilemma is one of four stages and this is hopefully something that is",
    "start": "519160",
    "end": "525400"
  },
  {
    "text": "repeatable depending on your enterprise the first one is just the same kommen cloud platform as I mentioned",
    "start": "525400",
    "end": "532389"
  },
  {
    "text": "unifying the the different product teams and presenting him with the common cloud platform internally moving on to having",
    "start": "532389",
    "end": "539110"
  },
  {
    "text": "full stack observability just let's worry about one service at a time but make sure we have full traceability of",
    "start": "539110",
    "end": "544990"
  },
  {
    "text": "how that service performs tie the services together using distributed tracing and unified logging and put some",
    "start": "544990",
    "end": "552279"
  },
  {
    "text": "of the resiliency patterns across these services to make sure we're able to to prevent some outages and I'll talk",
    "start": "552279",
    "end": "559449"
  },
  {
    "text": "through each one in detail beginning with a standardized cloud platform now many of you have laptops open probably",
    "start": "559449",
    "end": "565959"
  },
  {
    "text": "have things like office 365 in Adobe and such our customers similar to that now",
    "start": "565959",
    "end": "572949"
  },
  {
    "text": "all of the all of these products they work in a cloud together office syncs Adobe and so on and so",
    "start": "572949",
    "end": "578050"
  },
  {
    "text": "forth many of our customers have designed construction manufacturing media rendering tools that work much the",
    "start": "578050",
    "end": "585490"
  },
  {
    "text": "same way across a broad range of devices now introducing a common cloud cloud",
    "start": "585490",
    "end": "590860"
  },
  {
    "text": "platform to allow these products to synchronize and work together and unlocking those connected workflow this",
    "start": "590860",
    "end": "597550"
  },
  {
    "text": "is really really important at first step in building that we asked ourselves some really key basic motivated questions the",
    "start": "597550",
    "end": "605410"
  },
  {
    "text": "first one is you know how do we accelerate innovation in each industry that we serve with better more reliable",
    "start": "605410",
    "end": "611680"
  },
  {
    "text": "stable and observable releases how to make sure we have security and compliance locked in from the start how",
    "start": "611680",
    "end": "618459"
  },
  {
    "text": "we provide a kind of a well lit path for developers to to easily ship the product",
    "start": "618459",
    "end": "624130"
  },
  {
    "text": "so instead of work use of reefs all vini infrastructure challenges they focus focus on solving customer problems and",
    "start": "624130",
    "end": "631209"
  },
  {
    "text": "what we've built is essentially a non-technical implementation side is a is a is a cloud platform that is that if",
    "start": "631209",
    "end": "637300"
  },
  {
    "text": "there's heavy heavily leveraging Amazon products is really based on three key pillars see ICD standardized deployment",
    "start": "637300",
    "end": "645610"
  },
  {
    "text": "and run a runtime environment and of course underpinning all of this is a compliance framework let me go back here",
    "start": "645610",
    "end": "652420"
  },
  {
    "text": "for a sec on the CI CD front we've taken",
    "start": "652420",
    "end": "659079"
  },
  {
    "text": "the you know on a continuous integration side we've taken that concept be you know compiling your source code but",
    "start": "659079",
    "end": "665520"
  },
  {
    "text": "also compiling localized documentation release notes and such introducing",
    "start": "665520",
    "end": "671190"
  },
  {
    "text": "security and defect detection tools right at the compile stage at CDs time a",
    "start": "671190",
    "end": "677160"
  },
  {
    "text": "continuous delivery time we invested quite heavily into deployment risk mitigation you know with venture we've",
    "start": "677160",
    "end": "683310"
  },
  {
    "text": "written a deployment orchestration service that integrates between Jenkins and Amazon ECS the container service to",
    "start": "683310",
    "end": "690540"
  },
  {
    "text": "orchestrate blue/green deployments have provided a wait for for teams to easily integrate automated testing as part of",
    "start": "690540",
    "end": "697200"
  },
  {
    "text": "their release and of course provide developers with repeatable easy-to-use deployment patterns that same CI CD",
    "start": "697200",
    "end": "705870"
  },
  {
    "text": "platform is able to deploy containers services applications and batch workflows drawing an Amazon badge now",
    "start": "705870",
    "end": "713580"
  },
  {
    "text": "what really drives this point home and how it relates to two observability and",
    "start": "713580",
    "end": "720870"
  },
  {
    "text": "resilience is really the last point in the slide the key metrics so what all of the the first five points what they've",
    "start": "720870",
    "end": "727620"
  },
  {
    "text": "built up to is a framework for teams to really measure themselves and this is",
    "start": "727620",
    "end": "733050"
  },
  {
    "text": "where we benchmark ourselves against some of the industry leading research provided by Dora and puppet labs highly",
    "start": "733050",
    "end": "740010"
  },
  {
    "text": "recommended reading where they essentially what these reach the researchers have done is gone out to a",
    "start": "740010",
    "end": "745410"
  },
  {
    "text": "number of high-performing organic all kinds of organization technology organizations and they found certain",
    "start": "745410",
    "end": "751020"
  },
  {
    "text": "trends that high-performing technology organizations do to have more better scalable resilient and observable",
    "start": "751020",
    "end": "757380"
  },
  {
    "text": "systems some of the key trends that they found is that organizations that that",
    "start": "757380",
    "end": "762840"
  },
  {
    "text": "deploy faster more frequently and with lower change failure rates generally",
    "start": "762840",
    "end": "768060"
  },
  {
    "text": "have much more observable and resilient systems so we're building as part of this framework is the ability is is the",
    "start": "768060",
    "end": "775560"
  },
  {
    "text": "process of essentially setting our product teams up for success where they're able to measure themselves on",
    "start": "775560",
    "end": "781080"
  },
  {
    "text": "their deployment frequency the change failure rate how quickly they can",
    "start": "781080",
    "end": "786090"
  },
  {
    "text": "remediate that change and essentially how long it takes them to put that put a given release through to production",
    "start": "786090",
    "end": "793520"
  },
  {
    "text": "moving on to the next phase of standardized deploy Iran and entering environment so as I mentioned",
    "start": "793520",
    "end": "800370"
  },
  {
    "text": "we have a unified way to run multiple types of workloads from containers to",
    "start": "800370",
    "end": "805560"
  },
  {
    "text": "service to Amazon batch in terms of runtime environment most of our efforts",
    "start": "805560",
    "end": "810570"
  },
  {
    "text": "are focused on Linux today but we're having heavily you know we're making heavy investments into Windows largely",
    "start": "810570",
    "end": "817110"
  },
  {
    "text": "because of that 30 years of IP and many products that we've built over decades that have tight windows integration and",
    "start": "817110",
    "end": "824100"
  },
  {
    "text": "some of the GPU workloads now on the infrastructure side again coupling with the coupling with some of the great",
    "start": "824100",
    "end": "831000"
  },
  {
    "text": "primitives that Amazon provides to us we're on multi tenant clusters in DCs we",
    "start": "831000",
    "end": "837000"
  },
  {
    "text": "have a way to do zero downtime infrastructure patching we have a way to dynamically grow and shrink these multi",
    "start": "837000",
    "end": "844440"
  },
  {
    "text": "tenant container clusters using lambdas and cloud watch and keep some excess",
    "start": "844440",
    "end": "849450"
  },
  {
    "text": "capacity to enable fast scaling and of course we've built as much of monitoring",
    "start": "849450",
    "end": "855420"
  },
  {
    "text": "compliance and security controls right at the infrastructure level as much as we can and underpinning all of this is",
    "start": "855420",
    "end": "861720"
  },
  {
    "text": "something that is a non-negotiable for many of the markets we compete in which is a compliance framework which through",
    "start": "861720",
    "end": "867720"
  },
  {
    "text": "either through a combination of business processes and some of the hard tools that run on the infrastructure level",
    "start": "867720",
    "end": "873450"
  },
  {
    "text": "we're able to do automated change manager automates change management audit trails for every release put you",
    "start": "873450",
    "end": "880680"
  },
  {
    "text": "know things like attaching test evidence to your - to our release tickets and really streamlining the process of",
    "start": "880680",
    "end": "887220"
  },
  {
    "text": "compliance for our product so at this point we've taken with taking these very",
    "start": "887220",
    "end": "895040"
  },
  {
    "text": "at first glance different products across different industries and gave them a framework a standardized platform",
    "start": "895040",
    "end": "902370"
  },
  {
    "text": "to deploy and run in the cloud next step for us is to really make sure that once",
    "start": "902370",
    "end": "908730"
  },
  {
    "text": "once we're running in it once a given service is running in the cloud we have a way to observe throughout the whole",
    "start": "908730",
    "end": "916199"
  },
  {
    "text": "stack how a given application is doing and here again we we I'll be frank with",
    "start": "916199",
    "end": "921420"
  },
  {
    "text": "you we didn't find a magic build that magically solves all the problems at once instead the approach we've gone",
    "start": "921420",
    "end": "927930"
  },
  {
    "text": "with is essentially using the right tool for the job for at the APM level looking at your",
    "start": "927930",
    "end": "934000"
  },
  {
    "text": "actual container application all the way to down at the infrastructure level the ec2 nodes the es cluster that is running",
    "start": "934000",
    "end": "941200"
  },
  {
    "text": "in looking at the four structural dependencies integrating these different metrics into single pane of glass and",
    "start": "941200",
    "end": "947530"
  },
  {
    "text": "having a unified a learning mechanism in place now in terms of the monitoring",
    "start": "947530",
    "end": "953080"
  },
  {
    "text": "tools for each layer these are just some of the things we monitor at each layer of the stack and the tools were used to",
    "start": "953080",
    "end": "959830"
  },
  {
    "text": "to monitor is so at the APM level we rely on New Relic some some of the spunk",
    "start": "959830",
    "end": "966670"
  },
  {
    "text": "for log aggregation and open tracing for unified logging which I'll talk about in a second at the ec2 node a lot of things",
    "start": "966670",
    "end": "974320"
  },
  {
    "text": "we use are pre baked into into the ami such as cystic aquaphor vulnerability",
    "start": "974320",
    "end": "980080"
  },
  {
    "text": "scanning and New Relic but we've also found some really interesting custom failure scenarios we've had a process of",
    "start": "980080",
    "end": "988150"
  },
  {
    "text": "you know get container izing some legacy applications where we noticed strange patterns where you know sometimes have",
    "start": "988150",
    "end": "994570"
  },
  {
    "text": "running multiple processes within the container causes a knock-on effect which prevents additional tasks for being",
    "start": "994570",
    "end": "1000420"
  },
  {
    "text": "launched in the host something that the vendor product tools we could not get to",
    "start": "1000420",
    "end": "1006000"
  },
  {
    "text": "easily detect so we've written a number of we call them health lambdas land is the continuously run and monitor for",
    "start": "1006000",
    "end": "1012450"
  },
  {
    "text": "these custom failure conditions in the cluster and take either remediating action or alerting action based on these",
    "start": "1012450",
    "end": "1018900"
  },
  {
    "text": "scenarios that moving down on the overall ECS cluster because we're on",
    "start": "1018900",
    "end": "1024449"
  },
  {
    "text": "multi tenant large clusters we continuously run a monitor for monitor",
    "start": "1024450",
    "end": "1030449"
  },
  {
    "text": "for account limits RS killing group limits and so on so forth make sure we don't don't run into them and of course",
    "start": "1030450",
    "end": "1037500"
  },
  {
    "text": "the underlying infrastructure dependencies making sure that the overall platform is stable now you can",
    "start": "1037500",
    "end": "1044520"
  },
  {
    "text": "imagine there's probably that quite a few tools listed it is humanly impossible to look at each tool and",
    "start": "1044520",
    "end": "1050970"
  },
  {
    "text": "interpret in a meaningful way and you know have a single source of truth so we have an ongoing effort to consolidate",
    "start": "1050970",
    "end": "1057270"
  },
  {
    "text": "these different monitoring and observability tools into single into single pane of glass we call them -",
    "start": "1057270",
    "end": "1064290"
  },
  {
    "text": "words that automatically provision and really the key purpose for them is to show service summary view key API",
    "start": "1064290",
    "end": "1071250"
  },
  {
    "text": "metrics some of the service dependencies and infrastructure dependencies in a in a humanly readable presentable plan",
    "start": "1071250",
    "end": "1078300"
  },
  {
    "text": "platform moving on to what do we do when",
    "start": "1078300",
    "end": "1083430"
  },
  {
    "text": "an observability tool actually tells us that something's wrong now as I mentioned there's multiple of them on",
    "start": "1083430",
    "end": "1089100"
  },
  {
    "text": "the left these are just some of the examples what we do is essentially funnel the the alerting messages from",
    "start": "1089100",
    "end": "1095820"
  },
  {
    "text": "each one of the tools into a centralized platform today it's service now will we",
    "start": "1095820",
    "end": "1100860"
  },
  {
    "text": "create an incident record which involves our saw Operations Center rhombic procedure and an SME escalation if",
    "start": "1100860",
    "end": "1107730"
  },
  {
    "text": "necessary for through page duty now underpinning all of this is our something called",
    "start": "1107730",
    "end": "1113430"
  },
  {
    "text": "incident to improvement process where there's a detailed post-mortem in understanding what caused the the",
    "start": "1113430",
    "end": "1119480"
  },
  {
    "text": "abnormal condition to occur and what can we do to improve that system we find that to be really really useful in",
    "start": "1119480",
    "end": "1125400"
  },
  {
    "text": "building better observability as a learning journey now if you take a quick",
    "start": "1125400",
    "end": "1133080"
  },
  {
    "text": "step back look at the journey so far we've taken different products introduced the common platform we've",
    "start": "1133080",
    "end": "1139920"
  },
  {
    "text": "introduced a way for us to look at the full stack observability for an individual service now we want to do is",
    "start": "1139920",
    "end": "1146990"
  },
  {
    "text": "tie the the different complex inter service calls together and be able to",
    "start": "1146990",
    "end": "1152760"
  },
  {
    "text": "trace a single user interaction throughout the system now for that and",
    "start": "1152760",
    "end": "1157790"
  },
  {
    "text": "really the key purpose behind us is to drive these three key metrics MTTR mean",
    "start": "1157790",
    "end": "1164070"
  },
  {
    "text": "time to recovery so during an incident understanding forensics understanding what's causing the incident mean time",
    "start": "1164070",
    "end": "1170490"
  },
  {
    "text": "between failure driving driving that you know improving that metric as much as",
    "start": "1170490",
    "end": "1176040"
  },
  {
    "text": "possible so insights to drive resiliency and observability and MT TD mean time to",
    "start": "1176040",
    "end": "1182160"
  },
  {
    "text": "detect the quicker we can detect an abnormal scenario the better now the problem as I mentioned earlier is we",
    "start": "1182160",
    "end": "1190830"
  },
  {
    "text": "have different products during different languages by different teams in different locations in different trees and without a centralized lock",
    "start": "1190830",
    "end": "1197830"
  },
  {
    "text": "format it is almost impossible to to have a consistent way of tracing tracing",
    "start": "1197830",
    "end": "1203800"
  },
  {
    "text": "a given user interaction through a complex multi micro service system so we've gone with is essentially a process",
    "start": "1203800",
    "end": "1210760"
  },
  {
    "text": "of introduction introducing a standardised lock format we've adopted open tracing API open tracing format",
    "start": "1210760",
    "end": "1218020"
  },
  {
    "text": "which is a project under cloud native computing foundation which really paid",
    "start": "1218020",
    "end": "1223480"
  },
  {
    "text": "off because it makes it easier for us to integrate with vendor products or their SDKs and some of the Amazon services",
    "start": "1223480",
    "end": "1230580"
  },
  {
    "text": "here's an example of a unified logging record at the top you see the distributed metadata information the",
    "start": "1230580",
    "end": "1237520"
  },
  {
    "text": "span IDs that get to travel throughout the system as the log message for you",
    "start": "1237520",
    "end": "1242740"
  },
  {
    "text": "know travels through multiple micro services and of course the application log data itself",
    "start": "1242740",
    "end": "1247810"
  },
  {
    "text": "now what powers the the unified logging effort across different compute assets",
    "start": "1247810",
    "end": "1253720"
  },
  {
    "text": "be containers batch or lambda is a set of Amazon services that you know through",
    "start": "1253720",
    "end": "1259240"
  },
  {
    "text": "export through cloud watch a subscription pumping into Kinesis",
    "start": "1259240",
    "end": "1265060"
  },
  {
    "text": "firehose and through a downstream downstream analytics and storage for this log data equally importantly of",
    "start": "1265060",
    "end": "1273700"
  },
  {
    "text": "course integrating with x-ray to visualize how a given lock message will",
    "start": "1273700",
    "end": "1279310"
  },
  {
    "text": "have a given user interaction travels through the system again let's take a",
    "start": "1279310",
    "end": "1286330"
  },
  {
    "text": "quick pause to reflect back on the journey so far we're the standardized platform we're able to have full stack",
    "start": "1286330",
    "end": "1292960"
  },
  {
    "text": "observability for individual services tie a given user interaction through a complex set of inter service calls",
    "start": "1292960",
    "end": "1301470"
  },
  {
    "text": "throughout the system and now we would really like to do is introduce resiliency patterns across these",
    "start": "1301470",
    "end": "1308200"
  },
  {
    "text": "services now coming back to the earlier diagram ahead where you know we have a",
    "start": "1308200",
    "end": "1314020"
  },
  {
    "text": "distributed system always nice and well when all these services are happy and",
    "start": "1314020",
    "end": "1319240"
  },
  {
    "text": "they're communicating with each other with no problems unfortunately that doesn't always happen in life and you",
    "start": "1319240",
    "end": "1325720"
  },
  {
    "text": "know through either process of network failures or some downstream dependency failures a number of services",
    "start": "1325720",
    "end": "1332680"
  },
  {
    "text": "get into a degraded State now many of the times it's actually not a permanent",
    "start": "1332680",
    "end": "1338770"
  },
  {
    "text": "failure sometimes it's just a network problem or just a transient problem at the network at the downstream",
    "start": "1338770",
    "end": "1344770"
  },
  {
    "text": "dependencies a dependent dependency I'm sorry and one of the worst things we can",
    "start": "1344770",
    "end": "1350230"
  },
  {
    "text": "do is actually overload the downstream dependency in the case of a transient failure and turn something that is you",
    "start": "1350230",
    "end": "1357340"
  },
  {
    "text": "know a temporary glitch into a full-blown outage so we want to do is essentially",
    "start": "1357340",
    "end": "1362880"
  },
  {
    "text": "be able to monitor for these scenarios and put resiliency patterns across our",
    "start": "1362880",
    "end": "1368350"
  },
  {
    "text": "micro services from you know traffic shaping intelligent traffic shaping Patino routing traffic to different",
    "start": "1368350",
    "end": "1374590"
  },
  {
    "text": "endpoints to rate-limiting making sure we don't overwhelm the downstream dependencies to circuit breaker",
    "start": "1374590",
    "end": "1381090"
  },
  {
    "text": "realizing that a downstream dependencies down and instead of bombarding it with repeated requests actually short-circuit",
    "start": "1381090",
    "end": "1387580"
  },
  {
    "text": "the call and no don't make it at all having intelligent retries and throttling over all at the service level",
    "start": "1387580",
    "end": "1394900"
  },
  {
    "text": "and when we kind of investigating implemented different implementation",
    "start": "1394900",
    "end": "1400480"
  },
  {
    "text": "approaches we've gone in a you know a gun the gun to put put research efforts",
    "start": "1400480",
    "end": "1406240"
  },
  {
    "text": "into both both both both options option one is really putting all that logic",
    "start": "1406240",
    "end": "1411370"
  },
  {
    "text": "inside the sdk or library if you will and have it run as part of your application and send it is essentially",
    "start": "1411370",
    "end": "1418060"
  },
  {
    "text": "within the process option two is to have a sidecar proxy and Aleks lab rate on",
    "start": "1418060",
    "end": "1423070"
  },
  {
    "text": "each so initially we've gone down the route of option one and we had a degree of success but it became apparent that",
    "start": "1423070",
    "end": "1431230"
  },
  {
    "text": "some of the challenges of down in in going down that route and really scaling this out given the Autodesk had Autodesk",
    "start": "1431230",
    "end": "1439600"
  },
  {
    "text": "profile of different industries multiple languages and different different micro services some of them some of these",
    "start": "1439600",
    "end": "1446050"
  },
  {
    "text": "challenges become became very apparent very quickly having to maintain as decays in all the different languages on",
    "start": "1446050",
    "end": "1451720"
  },
  {
    "text": "the righteous did you see some of the subsets of languages we use and databases that we use in in production",
    "start": "1451720",
    "end": "1457590"
  },
  {
    "text": "make the application coaching to to to every micro service that",
    "start": "1457590",
    "end": "1463269"
  },
  {
    "text": "participates in this now of course if you put this in the in the process in the SDK the own the doll it only works",
    "start": "1463269",
    "end": "1470139"
  },
  {
    "text": "if everybody doesn't right it doesn't work if only 50% of the services do it",
    "start": "1470139",
    "end": "1475860"
  },
  {
    "text": "retrofitting applications as I mentioned earlier is also challenging when you have to retrofit you know Fortran color",
    "start": "1475860",
    "end": "1482350"
  },
  {
    "text": "Fortran code or C++ code with these with these patterns and of course sometimes",
    "start": "1482350",
    "end": "1488200"
  },
  {
    "text": "in particularly complex workflows it is not always a trivial to determine what",
    "start": "1488200",
    "end": "1493870"
  },
  {
    "text": "the all of the dependencies are so we",
    "start": "1493870",
    "end": "1499059"
  },
  {
    "text": "with an investigator option 2 which is essentially offloading uploading that",
    "start": "1499059",
    "end": "1504399"
  },
  {
    "text": "into a cycle proxy and the way that really works is the high at a high level",
    "start": "1504399",
    "end": "1511269"
  },
  {
    "text": "is where we're decoupling the operational and business logic behind",
    "start": "1511269",
    "end": "1516909"
  },
  {
    "text": "the system hijacking the public facing ports if you will whether within fronting them with a proxy that",
    "start": "1516909",
    "end": "1523259"
  },
  {
    "text": "intercepts incoming and outgoing traffic applies a set of rules to it and then rely relays that the call to the actual",
    "start": "1523259",
    "end": "1530309"
  },
  {
    "text": "application container where your your micro service is running and that option",
    "start": "1530309",
    "end": "1536379"
  },
  {
    "text": "is a lot more attractive right it gives us an out of processing language independent way to do logging tracing a",
    "start": "1536379",
    "end": "1543940"
  },
  {
    "text": "kill matrix collection of how these services interact with each other but",
    "start": "1543940",
    "end": "1549039"
  },
  {
    "text": "also gives us that gives us these resiliency patterns that are consistent and not do not depend on whether a given",
    "start": "1549039",
    "end": "1555279"
  },
  {
    "text": "application has been retrofitted or not it gives us a very clean separation of operational and business logic and that",
    "start": "1555279",
    "end": "1562090"
  },
  {
    "text": "can be acted upon by a different set of operators and also gives us an easier way to to integrate with legacy legacy",
    "start": "1562090",
    "end": "1568690"
  },
  {
    "text": "systems and legacy services however we found is that you know doing a POC on a",
    "start": "1568690",
    "end": "1575110"
  },
  {
    "text": "couple of a couple of micro services is one thing but running and configuring",
    "start": "1575110",
    "end": "1580889"
  },
  {
    "text": "these proxies that scale hundreds and thousands of these proxies at scale is hard",
    "start": "1580889",
    "end": "1586590"
  },
  {
    "text": "well we essentially need is a way to have a centralized location to configure",
    "start": "1586590",
    "end": "1593220"
  },
  {
    "text": "these proxies and manage configuration of these proxies be able to deploy a",
    "start": "1593220",
    "end": "1599370"
  },
  {
    "text": "cert when we take that back be able to adjust and dynamically the configuration",
    "start": "1599370",
    "end": "1605760"
  },
  {
    "text": "of these proxies without having to redeploy each micro service and essentially bounce the the ECS tasks",
    "start": "1605760",
    "end": "1612720"
  },
  {
    "text": "that the Rhondda sidecar container or kubernetes pods if you will have a compatibility across different different",
    "start": "1612720",
    "end": "1619710"
  },
  {
    "text": "computer computer images as I mentioned we're on ECS tasks and containers many of you",
    "start": "1619710",
    "end": "1625200"
  },
  {
    "text": "around kubernetes pods batch workflows and and of course service applications",
    "start": "1625200",
    "end": "1630419"
  },
  {
    "text": "so a way to - you know having a centralized location across this",
    "start": "1630419",
    "end": "1636090"
  },
  {
    "text": "different compute systems is very important and of course we would really like to do is to have a production grade",
    "start": "1636090",
    "end": "1642200"
  },
  {
    "text": "and-and-and-and fully managed so we can again focus on the problems of our customers instead of instead of really",
    "start": "1642200",
    "end": "1649440"
  },
  {
    "text": "investing into this effort now conceptually if you couple the law a",
    "start": "1649440",
    "end": "1655140"
  },
  {
    "text": "lot of these proxies you know the these probably psycho proxies at scale with a",
    "start": "1655140",
    "end": "1660210"
  },
  {
    "text": "centralized control plane that that manages these through the configuration of these proxies you essentially get a",
    "start": "1660210",
    "end": "1666750"
  },
  {
    "text": "concept of a service master and this is what I want to introduce Nathan Taber on stage to share some of the really really",
    "start": "1666750",
    "end": "1674220"
  },
  {
    "text": "cool and new features that Amazon's been working on literally just launched last",
    "start": "1674220",
    "end": "1680070"
  },
  {
    "text": "night that deal with this space Nathan thanks a Vinni of course thank you awesome",
    "start": "1680070",
    "end": "1687230"
  },
  {
    "text": "good afternoon awesome so I'm gonna talk",
    "start": "1689899",
    "end": "1696539"
  },
  {
    "text": "a little bit about the work that Amazon's been doing in the service mesh space and I know that everyone here",
    "start": "1696539",
    "end": "1701850"
  },
  {
    "text": "today is here to hear a little bit about observability and observability for modern applications so I'm gonna talk a",
    "start": "1701850",
    "end": "1707970"
  },
  {
    "text": "little bit about the work that we're doing with service mesh how the how",
    "start": "1707970",
    "end": "1713999"
  },
  {
    "text": "using service mesh with your applications can help you get observability and actually solve some of",
    "start": "1713999",
    "end": "1720210"
  },
  {
    "text": "the hardest problems that our customers are having when trying to monitor and observe the communications between micro",
    "start": "1720210",
    "end": "1726450"
  },
  {
    "text": "services and touch a little bit on your Giddings point as well about how observability and resiliency in your",
    "start": "1726450",
    "end": "1732600"
  },
  {
    "text": "applications really go hand in hand you can't have one without the other and they they work together to form a stable",
    "start": "1732600",
    "end": "1740279"
  },
  {
    "text": "modern application infrastructure so let's take a look yesterday we announced",
    "start": "1740279",
    "end": "1747360"
  },
  {
    "text": "AWS app mesh app mesh is serviced mesh for AWS it gives you observability and",
    "start": "1747360",
    "end": "1753779"
  },
  {
    "text": "traffic control for your containerized micro services that are running on AWS and it works across clusters and",
    "start": "1753779",
    "end": "1760049"
  },
  {
    "text": "container services we built app mesh based on our experience building and",
    "start": "1760049",
    "end": "1765600"
  },
  {
    "text": "running large-scale control planes for our customers and it really is something",
    "start": "1765600",
    "end": "1771029"
  },
  {
    "text": "that we believe is production-grade and we're really excited to make it available to you so the way that app",
    "start": "1771029",
    "end": "1776789"
  },
  {
    "text": "mesh works is it configures every proxy and it's designed to work with the sidecar proxy model that yevgeny was",
    "start": "1776789",
    "end": "1783600"
  },
  {
    "text": "just describing it helps you implement resiliency and observability across your",
    "start": "1783600",
    "end": "1788610"
  },
  {
    "text": "micro services in a consistent way so the way that this works is that when a",
    "start": "1788610",
    "end": "1793679"
  },
  {
    "text": "micro service starts that proxy starts alongside it as a sidecar container that",
    "start": "1793679",
    "end": "1799379"
  },
  {
    "text": "proxy then goes ahead and it checks in with the app mesh control plane and we're free it receives configuration",
    "start": "1799379",
    "end": "1806820"
  },
  {
    "text": "information about how to connect with the other micro services and how to send data that it's monitoring in and out of",
    "start": "1806820",
    "end": "1814259"
  },
  {
    "text": "your micro service up to the observability tools of your choice so if",
    "start": "1814259",
    "end": "1820440"
  },
  {
    "text": "Denny touched on this a second ago why would we use something like app mesh versus installing libraries or SDKs for",
    "start": "1820440",
    "end": "1828630"
  },
  {
    "text": "monitoring inside of our application code well using this type of system reduces the work that developers need to",
    "start": "1828630",
    "end": "1835830"
  },
  {
    "text": "do to make sure that the application has everything it needs to run and get full observability data by decoupling your",
    "start": "1835830",
    "end": "1842750"
  },
  {
    "text": "ability to manage the applications operations from the business logic that you're writing and deploying so the",
    "start": "1842750",
    "end": "1849539"
  },
  {
    "text": "high-level point here is that if you're going to configure an observability tool or you want to change the observability",
    "start": "1849539",
    "end": "1855570"
  },
  {
    "text": "tools that you're using you don't need to actually go ahead and redeploy all of your application code so you can use app",
    "start": "1855570",
    "end": "1862440"
  },
  {
    "text": "mesh with any language or platform and it helps you to simplify visibility troubleshooting and deployments for the",
    "start": "1862440",
    "end": "1867990"
  },
  {
    "text": "whole application so overall admission is designed to make it easier for",
    "start": "1867990",
    "end": "1873510"
  },
  {
    "text": "companies to migrate to using micro services whether you're building something that's brand new or",
    "start": "1873510",
    "end": "1878909"
  },
  {
    "text": "refactoring an existing application let's see if this okay there we go okay",
    "start": "1878909",
    "end": "1887909"
  },
  {
    "text": "so the way that this starts to work is that you have a lot of people that are delivering intent they need to deliver",
    "start": "1887909",
    "end": "1893850"
  },
  {
    "text": "intent for how those application communications need to work and the type of data that you need to get off the",
    "start": "1893850",
    "end": "1900240"
  },
  {
    "text": "applications and so we need to deliver all that intent from the developers and",
    "start": "1900240",
    "end": "1905460"
  },
  {
    "text": "from the infrastructure operators down to all your micro services and you're",
    "start": "1905460",
    "end": "1914730"
  },
  {
    "text": "not just doing this with one person you're doing this across teams so you need a central way to actually collect",
    "start": "1914730",
    "end": "1921539"
  },
  {
    "text": "all this intent and push out all this reporting data across a very distributed application and everything's changing",
    "start": "1921539",
    "end": "1931140"
  },
  {
    "text": "too right you have two things that are changing you have your intent which is relatively static the way that you want",
    "start": "1931140",
    "end": "1937530"
  },
  {
    "text": "your micro service is to communicate the type of data that you want to pull off of your micro services is something that",
    "start": "1937530",
    "end": "1942600"
  },
  {
    "text": "changes over time but it's static in terms of the way that the actual micro services are changing so we need a way",
    "start": "1942600",
    "end": "1949169"
  },
  {
    "text": "to deliver the intent down to the micro services but we also need a dynamic way to",
    "start": "1949169",
    "end": "1954429"
  },
  {
    "text": "change how those micro-services are communicating with each other and pushing data out of them for",
    "start": "1954429",
    "end": "1959769"
  },
  {
    "text": "observability as the state of your system changed as you deploy new versions as your system scales based on",
    "start": "1959769",
    "end": "1966369"
  },
  {
    "text": "demand so one of the ways that we do this is by running the sidecar proxy for",
    "start": "1966369",
    "end": "1973929"
  },
  {
    "text": "at mesh and at mesh uses on boi proxy on by proxy is open source software this is",
    "start": "1973929",
    "end": "1979240"
  },
  {
    "text": "a really well-known proxy and is a very stable and production proven project it's actually a graduated project and is",
    "start": "1979240",
    "end": "1987279"
  },
  {
    "text": "administered by the cloud native computing foundation which is the same organization that administers the kubernetes project and as wide community",
    "start": "1987279",
    "end": "1994929"
  },
  {
    "text": "support and importantly for this session a lot of integrations with some of the most popular observability and",
    "start": "1994929",
    "end": "2000929"
  },
  {
    "text": "monitoring logging and tracing tools that are out there and this project was actually started at lyft in 2016 to",
    "start": "2000929",
    "end": "2008190"
  },
  {
    "text": "solve many of the same challenges that lyft was seeing as they scaled that yevgenii was describing that they've",
    "start": "2008190",
    "end": "2013649"
  },
  {
    "text": "been seeing at Autodesk so a lot of people have also been using on boi proxy",
    "start": "2013649",
    "end": "2020580"
  },
  {
    "text": "it's been out for a few years and then looking at okay how do we actually control these proxies this is not a new",
    "start": "2020580",
    "end": "2026399"
  },
  {
    "text": "problem this is a problem that's been around for the last few years and they see a need for a control plane to",
    "start": "2026399",
    "end": "2032580"
  },
  {
    "text": "configure all these proxies across their application and today there are some options like SCO that exists for",
    "start": "2032580",
    "end": "2038519"
  },
  {
    "text": "standing up and running your own service mesh a few people are actually building and running their own service meshes but",
    "start": "2038519",
    "end": "2045899"
  },
  {
    "text": "the high point about why this is really difficult to do for a lot of our customers and the reason we built up",
    "start": "2045899",
    "end": "2051868"
  },
  {
    "text": "mesh is because you need to spend a lot of development time if you're going to build your own service mesh and if",
    "start": "2051869",
    "end": "2057898"
  },
  {
    "text": "you're running an existing service mesh control plane yourself you need to spend a lot of operations time maintaining and",
    "start": "2057899",
    "end": "2064138"
  },
  {
    "text": "actually running that additional infrastructure the other thing is that existing service mesh options are tied",
    "start": "2064139",
    "end": "2070770"
  },
  {
    "text": "to deployment system so some of the existing service mesh options out there are actually tied to deployment systems",
    "start": "2070770",
    "end": "2076710"
  },
  {
    "text": "like kubernetes so they use the primitives of a certain container system and they can only run within that",
    "start": "2076710",
    "end": "2082230"
  },
  {
    "text": "cluster we wanted to design a system that worked across all container services that people",
    "start": "2082230",
    "end": "2087710"
  },
  {
    "text": "we're using on AWS so both kubernetes Amazon eks AWS Fargate and Amazon ECS so",
    "start": "2087710",
    "end": "2094580"
  },
  {
    "text": "we didn't want something that would pigeonhole people into a decision about how they were going to run their infrastructure we also wanted something",
    "start": "2094580",
    "end": "2100730"
  },
  {
    "text": "that was fully managed and easy to use so that you could gradually migrate services one at a time one of the",
    "start": "2100730",
    "end": "2106880"
  },
  {
    "text": "biggest things that we hear from our customers is that adopting something like service mesh is really cool they",
    "start": "2106880",
    "end": "2112490"
  },
  {
    "text": "want to have things like tracing across all their applications or they want consistent logs and metrics from every",
    "start": "2112490",
    "end": "2117650"
  },
  {
    "text": "micro service but the difficulty of changing out their code the difficulty of redeploying all those micro services",
    "start": "2117650",
    "end": "2124130"
  },
  {
    "text": "especially if they have tens or even hundreds of different micro services with different code bases run by",
    "start": "2124130",
    "end": "2129290"
  },
  {
    "text": "different teams is very very overwhelming so with app mesh we've designed this so",
    "start": "2129290",
    "end": "2134960"
  },
  {
    "text": "that you can slowly onboard services one at a time you don't need to use app mesh across your entire micro services",
    "start": "2134960",
    "end": "2141290"
  },
  {
    "text": "architecture all at once in order for it to work you can start with one service at a time and slowly onboard things as",
    "start": "2141290",
    "end": "2147830"
  },
  {
    "text": "your developers implement the proxy model so kind of what I just touched on",
    "start": "2147830",
    "end": "2155510"
  },
  {
    "text": "we wanted this to work across clusters and container services we wanted something that was built for scale and",
    "start": "2155510",
    "end": "2161000"
  },
  {
    "text": "stability and we wanted to have us and this is especially important for the observability part lots of integrations",
    "start": "2161000",
    "end": "2166940"
  },
  {
    "text": "with AWS and partner tools and then finally we know that no matter how many",
    "start": "2166940",
    "end": "2172280"
  },
  {
    "text": "integrations we build we're never going to cover every monitoring and observability tool that you want to use",
    "start": "2172280",
    "end": "2177380"
  },
  {
    "text": "so that's why we use an open source base that's why we use the Envoy proxy so that the community and AWS we can work",
    "start": "2177380",
    "end": "2184099"
  },
  {
    "text": "together with you to build more integrations and more options for",
    "start": "2184099",
    "end": "2189200"
  },
  {
    "text": "monitoring and controlling your micro services so let's look a little bit",
    "start": "2189200",
    "end": "2194330"
  },
  {
    "text": "about how app mesh works in terms of the traffic control aspects and we'll go back into the observability in a second",
    "start": "2194330",
    "end": "2200270"
  },
  {
    "text": "because this is important and interrelated so the important thing to know is that at mesh is not a load",
    "start": "2200270",
    "end": "2205760"
  },
  {
    "text": "balancer when you're using this type of microservices communications the proxies",
    "start": "2205760",
    "end": "2211339"
  },
  {
    "text": "actually connect your different micro services together and so that means that we're going to connect a micro service",
    "start": "2211339",
    "end": "2217790"
  },
  {
    "text": "version running in a container directly with the other micro service version running in a different container what Atmos does is",
    "start": "2217790",
    "end": "2224800"
  },
  {
    "text": "it sends that configuration data down to every proxy and tells those proxies how to connect so that gives you controls to",
    "start": "2224800",
    "end": "2234670"
  },
  {
    "text": "route traffic between applications and something like this is pretty easy to do",
    "start": "2234670",
    "end": "2241000"
  },
  {
    "text": "today a simple Bluegreen deployment where we have existing micro service be",
    "start": "2241000",
    "end": "2246060"
  },
  {
    "text": "taking traffic from existing micro service a and we want to deploy a micro service B Prime and doing something like",
    "start": "2246060",
    "end": "2252760"
  },
  {
    "text": "statically sending 20% of traffic to B prime to test it as a canary is not a",
    "start": "2252760",
    "end": "2257890"
  },
  {
    "text": "really hard problem to do but when you need to deploy a lot of things quickly",
    "start": "2257890",
    "end": "2262960"
  },
  {
    "text": "and you want to be able to dynamically change your infrastructure you may want to do things that are a little bit more",
    "start": "2262960",
    "end": "2268030"
  },
  {
    "text": "complicated and so we need the ability to actually not just put 20% of our",
    "start": "2268030",
    "end": "2273280"
  },
  {
    "text": "traffic but to do something like 3% or 2% or 1% of our traffic onto our new",
    "start": "2273280",
    "end": "2278680"
  },
  {
    "text": "micro service version and dynamically adjust how much traffic is going to that micro service as we show health and",
    "start": "2278680",
    "end": "2285580"
  },
  {
    "text": "performance from our new micro service version of course you could also do this using a load balancer today but the",
    "start": "2285580",
    "end": "2292630"
  },
  {
    "text": "dynamicism and the intelligent routing decision-making is just not there you would have to go into that load",
    "start": "2292630",
    "end": "2297820"
  },
  {
    "text": "balancer and constantly adjust the weighting that's going to the new micro service version to get this to work and",
    "start": "2297820",
    "end": "2303160"
  },
  {
    "text": "that's just a lot of work but we don't believe is necessary to do so at mesh",
    "start": "2303160",
    "end": "2309160"
  },
  {
    "text": "gives you a lot of traffic controls for resiliency these were similar to exactly what your guinea was talking about a few",
    "start": "2309160",
    "end": "2315400"
  },
  {
    "text": "minutes ago so things like retries where we set the number of times that a micro service can ping another service before",
    "start": "2315400",
    "end": "2321910"
  },
  {
    "text": "we try and fall back to a different option timeouts where we actually make a decision to stop trying after a certain",
    "start": "2321910",
    "end": "2328960"
  },
  {
    "text": "amount of time and routing controls like rate limits and weights where we can determine how many times a minute",
    "start": "2328960",
    "end": "2335530"
  },
  {
    "text": "something can call another thing or what we were talking about in the deployment example what percent of traffic do we",
    "start": "2335530",
    "end": "2341320"
  },
  {
    "text": "want to send to a version of a micro service versus a different version of a micro service in terms of availability",
    "start": "2341320",
    "end": "2348750"
  },
  {
    "text": "up mesh because that proxy is consistent so the Boxey is exactly the same across every",
    "start": "2348750",
    "end": "2355069"
  },
  {
    "text": "micro service and it handles all the traffic for the micro service and what that means is that you already have the",
    "start": "2355069",
    "end": "2361400"
  },
  {
    "text": "ability to really monitor the rest of your stock you have the ability to monitor your compute resources like your",
    "start": "2361400",
    "end": "2367730"
  },
  {
    "text": "ec2 instances you have the ability to monitor your containers and see which containers are running but that",
    "start": "2367730",
    "end": "2373910"
  },
  {
    "text": "communications that communications logic debugging those tail latencies between different micro services is really",
    "start": "2373910",
    "end": "2380390"
  },
  {
    "text": "tricky and by putting that proxy next to all of our micro services we are actually capturing all of the",
    "start": "2380390",
    "end": "2386119"
  },
  {
    "text": "communications data that's going in and out of every single micro service in a consistent way and what Atmos can do is",
    "start": "2386119",
    "end": "2392660"
  },
  {
    "text": "it can tell all of those proxies where they need to send that data so things like statistics for Layton sees HTTP",
    "start": "2392660",
    "end": "2401299"
  },
  {
    "text": "header and tracing information for tracing and you can send that to existing tools and dashboards with a lot",
    "start": "2401299",
    "end": "2408559"
  },
  {
    "text": "more detail and with a really good consistency so instead of having a team that's implemented their monitoring",
    "start": "2408559",
    "end": "2414650"
  },
  {
    "text": "logging and tracing in one way for your application and then another team that's building a different micro service and",
    "start": "2414650",
    "end": "2420170"
  },
  {
    "text": "they happen to have set it up just slightly different with App mesh you can maintain that individuality between",
    "start": "2420170",
    "end": "2426319"
  },
  {
    "text": "teams those teams don't need to actually do anything different with regards to how they're building and running their",
    "start": "2426319",
    "end": "2431450"
  },
  {
    "text": "application but you can get consistent metrics logs and traces across all of",
    "start": "2431450",
    "end": "2437000"
  },
  {
    "text": "your micro services so today we have a few things that we're launching with",
    "start": "2437000",
    "end": "2442520"
  },
  {
    "text": "cloud watch X ray and we're really excited yesterday to announce an integration with data dog to send all of",
    "start": "2442520",
    "end": "2449089"
  },
  {
    "text": "your app mesh statistics from your micro services up to data dog and we're going to be quickly adding a lot more",
    "start": "2449089",
    "end": "2455299"
  },
  {
    "text": "integrations over time so the goal here is that we're going to give you end-to-end visibility across all of your",
    "start": "2455299",
    "end": "2462140"
  },
  {
    "text": "micro services in a dynamic fashion without forcing your teams to change the way that they're writing deploying and",
    "start": "2462140",
    "end": "2468619"
  },
  {
    "text": "operating their micro services and that's really important because we need",
    "start": "2468619",
    "end": "2475819"
  },
  {
    "text": "the ability to change how we send things down to our micro services without",
    "start": "2475819",
    "end": "2481400"
  },
  {
    "text": "forcing all of our micro service teams to change what they're doing if we have to coordinate across",
    "start": "2481400",
    "end": "2486930"
  },
  {
    "text": "of teams if you have to redeploy application code every time but you need to change the way that you're monitoring",
    "start": "2486930",
    "end": "2492270"
  },
  {
    "text": "something or you need to change how a deployment works that's something that slows an organization down and we believe is undifferentiated heavy",
    "start": "2492270",
    "end": "2498750"
  },
  {
    "text": "lifting that is just not necessary so let's take a deeper dive so to speak",
    "start": "2498750",
    "end": "2506309"
  },
  {
    "text": "and peel back the onion and take a look into how app mesh works so the way that",
    "start": "2506309",
    "end": "2513839"
  },
  {
    "text": "app mesh works is by building a virtual map of your micro services that define",
    "start": "2513839",
    "end": "2519210"
  },
  {
    "text": "how the communications flow between the micro services and what you do is you",
    "start": "2519210",
    "end": "2529559"
  },
  {
    "text": "use the app mesh api's to actually model the different micro services in app mesh",
    "start": "2529559",
    "end": "2535109"
  },
  {
    "text": "control plane and model how the traffic flows between them so on the left here",
    "start": "2535109",
    "end": "2542160"
  },
  {
    "text": "we have our actual micro services these micro services are fronted by a load balancer so this load balancer is taking",
    "start": "2542160",
    "end": "2548400"
  },
  {
    "text": "all the external traffic into our application and then at mesh is handling the communications between micro",
    "start": "2548400",
    "end": "2554010"
  },
  {
    "text": "services within our application each micro service version is represented in",
    "start": "2554010",
    "end": "2559650"
  },
  {
    "text": "the Atmos API as what we call a virtual node and these virtual nodes we define",
    "start": "2559650",
    "end": "2565349"
  },
  {
    "text": "routes between these virtual nodes to determine how we want those those micro services to communicate so a virtual",
    "start": "2565349",
    "end": "2573839"
  },
  {
    "text": "node is that logical representation of a runtime service and it has a few back-end infrastructure components",
    "start": "2573839",
    "end": "2579930"
  },
  {
    "text": "listeners service discoveries and backends and so listeners are the policies that handle incoming traffic",
    "start": "2579930",
    "end": "2586200"
  },
  {
    "text": "for that virtual node service discovery describes how other micro service",
    "start": "2586200",
    "end": "2591569"
  },
  {
    "text": "versions that are calling this virtual node can locate it and backends are a set of destinations that the node can",
    "start": "2591569",
    "end": "2597780"
  },
  {
    "text": "communicate with and so this is a virtual representation of how we actually build our communications",
    "start": "2597780",
    "end": "2606180"
  },
  {
    "text": "between our micro services and app mesh and the way that app mesh works is that after you build this virtual",
    "start": "2606180",
    "end": "2611609"
  },
  {
    "text": "representation of your communications within the API it computes all the",
    "start": "2611609",
    "end": "2616680"
  },
  {
    "text": "configuration information dynamically that the proxy need to know in order to implement this",
    "start": "2616680",
    "end": "2622200"
  },
  {
    "text": "map of communications and it sends all that information dynamically down to the proxies and so a virtual router is",
    "start": "2622200",
    "end": "2631529"
  },
  {
    "text": "another construct that we have and a virtual router is associated with a set",
    "start": "2631529",
    "end": "2637200"
  },
  {
    "text": "of services so your nodes are associated with the service versions and the virtual router is associated with the",
    "start": "2637200",
    "end": "2644339"
  },
  {
    "text": "actual Micra service itself so this is similar to an ECS service or a kubernetes service and the virtual",
    "start": "2644339",
    "end": "2651809"
  },
  {
    "text": "router contains a set of rules that define how traffic is routed to all the different virtual nodes associated with",
    "start": "2651809",
    "end": "2658410"
  },
  {
    "text": "the services so a route is scoped under a virtual router and you can define lots",
    "start": "2658410",
    "end": "2663569"
  },
  {
    "text": "of routes between your nodes to explicitly and dynamically configure how that traffic is flowing between things",
    "start": "2663569",
    "end": "2670279"
  },
  {
    "text": "so each route defines an action that targets one or more of these virtual nodes great so it's a little more deeper",
    "start": "2670279",
    "end": "2682769"
  },
  {
    "text": "here so in this example we're actually taking to implement the communications",
    "start": "2682769",
    "end": "2689009"
  },
  {
    "text": "architecture on the Left we have our HTTP routes under this virtual router",
    "start": "2689009",
    "end": "2694170"
  },
  {
    "text": "and we're matching on the prefix slash so all incoming traffic that's coming in or leaving technically leaving",
    "start": "2694170",
    "end": "2701519"
  },
  {
    "text": "microservice a or the virtual node for micro service a and then the target is",
    "start": "2701519",
    "end": "2707239"
  },
  {
    "text": "microservice virtual node B and so we're going we're taking all the traffic",
    "start": "2707239",
    "end": "2713009"
  },
  {
    "text": "that's leaving a and we're gonna send it out to virtual node B and these are HTTP routes that we define so going back to",
    "start": "2713009",
    "end": "2721859"
  },
  {
    "text": "our deployment example we can add another route within this virtual router for node a and we can accept all of the",
    "start": "2721859",
    "end": "2731039"
  },
  {
    "text": "traffic that's coming off of node a and then we can route that with weights to two other virtual nodes the virtual node",
    "start": "2731039",
    "end": "2738059"
  },
  {
    "text": "that represents microservice version B which is our existing microservice and then we can add that three percent or",
    "start": "2738059",
    "end": "2744059"
  },
  {
    "text": "that five percent weighted traffic going to micro service version b prime which is our new micro service deployment so",
    "start": "2744059",
    "end": "2751019"
  },
  {
    "text": "all this is is written using api commands to the Atmos API and so you can",
    "start": "2751019",
    "end": "2757120"
  },
  {
    "text": "actually program this in the API and then dynamically adjust it and every time you make a change in the API app",
    "start": "2757120",
    "end": "2763390"
  },
  {
    "text": "mesh recomputes and calculates what all that configuration needs to be at the proxy level and sends that down to all",
    "start": "2763390",
    "end": "2770110"
  },
  {
    "text": "the relevant proxies that are running for the different micro service versions so that you can dynamically adjust how",
    "start": "2770110",
    "end": "2775570"
  },
  {
    "text": "traffic is flowing between these micro service versions when you're doing a deployment and so we get something that",
    "start": "2775570",
    "end": "2783790"
  },
  {
    "text": "looks a little bit like this great so a",
    "start": "2783790",
    "end": "2790480"
  },
  {
    "text": "little bit about what kind of how this works together so these are the primitives that app mesh is built on in",
    "start": "2790480",
    "end": "2797230"
  },
  {
    "text": "the control plane and we can put those primitives together to represent much",
    "start": "2797230",
    "end": "2802390"
  },
  {
    "text": "more complex micro services clearly this is a still a pretty simple example of",
    "start": "2802390",
    "end": "2807670"
  },
  {
    "text": "how micro services communicate but using these primitives we can build a dynamic map of how we want all of our micro",
    "start": "2807670",
    "end": "2814300"
  },
  {
    "text": "services to communicate and we can change that over time and we can change that very quickly as a communications",
    "start": "2814300",
    "end": "2820840"
  },
  {
    "text": "change at the same time as like we talked about earlier there's that static",
    "start": "2820840",
    "end": "2825970"
  },
  {
    "text": "configuration that we're delivering to at mesh that will be recomputed dynamically and change your communications patterns but there's also",
    "start": "2825970",
    "end": "2832930"
  },
  {
    "text": "the dynamic nature of when different proxies come online or different micro services scale-up mesh will",
    "start": "2832930",
    "end": "2838780"
  },
  {
    "text": "automatically send the appropriate configuration information down to those micro services so that they can",
    "start": "2838780",
    "end": "2844690"
  },
  {
    "text": "dynamically join the mesh and have all the traffic routing rules applied and that works for observability is - as",
    "start": "2844690",
    "end": "2850720"
  },
  {
    "text": "well so when something joins the mesh it will automatically check in with the application or the app mesh control",
    "start": "2850720",
    "end": "2857140"
  },
  {
    "text": "plane receive the configuration information it needs to start sending observability data and then go ahead and",
    "start": "2857140",
    "end": "2863830"
  },
  {
    "text": "start piping that observability data directly from the proxy into the monitoring tracing and logging tools of",
    "start": "2863830",
    "end": "2869350"
  },
  {
    "text": "your choice so app mesh is available",
    "start": "2869350",
    "end": "2874660"
  },
  {
    "text": "today as a preview for all customers it gives you observability and traffic control and it's compatible with the",
    "start": "2874660",
    "end": "2881310"
  },
  {
    "text": "managed container services including self managed kubernetes on ec2 that are",
    "start": "2881310",
    "end": "2886789"
  },
  {
    "text": "being used on AWS it's available in four",
    "start": "2886789",
    "end": "2893630"
  },
  {
    "text": "regions today u.s. East one u.s. East two u.s. West two and EU West one so we",
    "start": "2893630",
    "end": "2900890"
  },
  {
    "text": "have a nice global coverage that you can start trying this out and at mesh is",
    "start": "2900890",
    "end": "2906829"
  },
  {
    "text": "preview today we're planning to have at mesh become generally available in the first half of 2019 and until that time",
    "start": "2906829",
    "end": "2913669"
  },
  {
    "text": "we'll be quickly adding new features and functionality new integrations for observability i mentioned that yesterday",
    "start": "2913669",
    "end": "2919789"
  },
  {
    "text": "we announced an integration with data dog for monitoring and tracing your micro services with data dog and we're",
    "start": "2919789",
    "end": "2925849"
  },
  {
    "text": "going to be adding new integrations and new monitoring integrations along that same line over the next few months as we",
    "start": "2925849",
    "end": "2931699"
  },
  {
    "text": "prepare for GA you can learn more at our webpage amazon.com slop ash mesh and we",
    "start": "2931699",
    "end": "2937729"
  },
  {
    "text": "also have a github repo where we've posted examples and more information including a public road map about how we",
    "start": "2937729",
    "end": "2945169"
  },
  {
    "text": "plan to evolve the capabilities of a mesh so here's a few more links for more",
    "start": "2945169",
    "end": "2956449"
  },
  {
    "text": "resources so really appreciate the time that you've taken today we're gonna go ahead and wrap up here and we're really",
    "start": "2956449",
    "end": "2963739"
  },
  {
    "text": "excited for you to try out app mesh try it out with your micro services give it a shot",
    "start": "2963739",
    "end": "2969199"
  },
  {
    "text": "visit us on github we're accepting issues there if you have any problems or if you have any integrations that you'd",
    "start": "2969199",
    "end": "2975229"
  },
  {
    "text": "recommend us or you'd like us to implement please let us know we're really excited about this service and we",
    "start": "2975229",
    "end": "2981349"
  },
  {
    "text": "really hope that you have a great time using it and implementing observability and control for all of your micro",
    "start": "2981349",
    "end": "2987349"
  },
  {
    "text": "services on AWS thank you [Applause]",
    "start": "2987349",
    "end": "2995919"
  }
]