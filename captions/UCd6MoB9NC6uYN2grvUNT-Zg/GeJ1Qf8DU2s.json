[
  {
    "text": "[Music]",
    "start": "140",
    "end": "1160"
  },
  {
    "text": "[Applause]",
    "start": "1160",
    "end": "2910"
  },
  {
    "text": "[Music]",
    "start": "2910",
    "end": "6080"
  },
  {
    "text": "hello I'm sham a cloud engineer here at",
    "start": "8639",
    "end": "11280"
  },
  {
    "text": "the AWS office in Cape Town today I'm",
    "start": "11280",
    "end": "13880"
  },
  {
    "text": "going to show you how to make your AWS",
    "start": "13880",
    "end": "15599"
  },
  {
    "text": "Lambda function item potent to prevent",
    "start": "15599",
    "end": "18400"
  },
  {
    "text": "inconsistencies in your application",
    "start": "18400",
    "end": "20600"
  },
  {
    "text": "let's get",
    "start": "20600",
    "end": "21640"
  },
  {
    "text": "started to make a Lambda function it",
    "start": "21640",
    "end": "24160"
  },
  {
    "text": "important we must design the function",
    "start": "24160",
    "end": "26359"
  },
  {
    "text": "logic to correctly handle duplicate",
    "start": "26359",
    "end": "28359"
  },
  {
    "text": "input events the code must validate",
    "start": "28359",
    "end": "30800"
  },
  {
    "text": "inputs and identify whether an event was",
    "start": "30800",
    "end": "33040"
  },
  {
    "text": "previously processed let's look at the",
    "start": "33040",
    "end": "35440"
  },
  {
    "text": "following example here we have a Lambda",
    "start": "35440",
    "end": "38320"
  },
  {
    "text": "function that takes in an Chason event",
    "start": "38320",
    "end": "40559"
  },
  {
    "text": "containing a transaction ID and an",
    "start": "40559",
    "end": "43440"
  },
  {
    "text": "item extract the value of a unique",
    "start": "43440",
    "end": "46079"
  },
  {
    "text": "attribute of the input event such as a",
    "start": "46079",
    "end": "48840"
  },
  {
    "text": "transaction",
    "start": "48840",
    "end": "50440"
  },
  {
    "text": "ID next we use a conditional expression",
    "start": "50440",
    "end": "54039"
  },
  {
    "text": "to put the item poent key into our",
    "start": "54039",
    "end": "56000"
  },
  {
    "text": "Dynamo DB table we then WRA this in a TR",
    "start": "56000",
    "end": "59399"
  },
  {
    "text": "catch block that will tell us whether",
    "start": "59399",
    "end": "60879"
  },
  {
    "text": "the provided transaction ID already",
    "start": "60879",
    "end": "63199"
  },
  {
    "text": "exists within our Dynamo DB table to",
    "start": "63199",
    "end": "65760"
  },
  {
    "text": "test this let's configure a new test",
    "start": "65760",
    "end": "70000"
  },
  {
    "text": "event enter the event",
    "start": "71000",
    "end": "73680"
  },
  {
    "text": "name edit the Json event to include the",
    "start": "73680",
    "end": "76640"
  },
  {
    "text": "transaction ID and",
    "start": "76640",
    "end": "79920"
  },
  {
    "text": "item select invoke",
    "start": "82640",
    "end": "87280"
  },
  {
    "text": "from the Amazon cloudwatch logs we can",
    "start": "90720",
    "end": "92840"
  },
  {
    "text": "see that the item was added to the",
    "start": "92840",
    "end": "94720"
  },
  {
    "text": "Dynamo DB",
    "start": "94720",
    "end": "96159"
  },
  {
    "text": "table to confirm this let's look at our",
    "start": "96159",
    "end": "99280"
  },
  {
    "text": "Dynamo DB",
    "start": "99280",
    "end": "100960"
  },
  {
    "text": "table navigate to the Dynamo DB",
    "start": "100960",
    "end": "105520"
  },
  {
    "text": "console select explore items select your",
    "start": "106439",
    "end": "112000"
  },
  {
    "text": "table as we can see the item containing",
    "start": "112000",
    "end": "114880"
  },
  {
    "text": "our transaction ID was inserted into our",
    "start": "114880",
    "end": "117399"
  },
  {
    "text": "Dynamo DB",
    "start": "117399",
    "end": "118680"
  },
  {
    "text": "table now now to test whether our",
    "start": "118680",
    "end": "121119"
  },
  {
    "text": "function is indeed em poent let's return",
    "start": "121119",
    "end": "123600"
  },
  {
    "text": "to the Lambda function and test the",
    "start": "123600",
    "end": "125560"
  },
  {
    "text": "function with the same event",
    "start": "125560",
    "end": "129039"
  },
  {
    "text": "object from the Amazon cloudwatch logs",
    "start": "144800",
    "end": "147760"
  },
  {
    "text": "we can see that the item already exists",
    "start": "147760",
    "end": "149640"
  },
  {
    "text": "with in our table and no action was",
    "start": "149640",
    "end": "152200"
  },
  {
    "text": "taken note that your application",
    "start": "152200",
    "end": "154800"
  },
  {
    "text": "functionality determines the best way to",
    "start": "154800",
    "end": "156720"
  },
  {
    "text": "write your",
    "start": "156720",
    "end": "159120"
  },
  {
    "text": "code here are some best practices to",
    "start": "159120",
    "end": "161720"
  },
  {
    "text": "follow plan for item potency before you",
    "start": "161720",
    "end": "164560"
  },
  {
    "text": "begin to develop your",
    "start": "164560",
    "end": "166080"
  },
  {
    "text": "applications to avoid retry Loops make",
    "start": "166080",
    "end": "168959"
  },
  {
    "text": "sure that duplicate events end without",
    "start": "168959",
    "end": "172120"
  },
  {
    "text": "errors configure a sufficient Lambda",
    "start": "172120",
    "end": "174680"
  },
  {
    "text": "time out for the full process to",
    "start": "174680",
    "end": "177080"
  },
  {
    "text": "complete test and optimize the function",
    "start": "177080",
    "end": "179640"
  },
  {
    "text": "with with realistic load",
    "start": "179640",
    "end": "182120"
  },
  {
    "text": "scenarios use a scalable High throughput",
    "start": "182120",
    "end": "185000"
  },
  {
    "text": "data store such as Dynamo DB for session",
    "start": "185000",
    "end": "189560"
  },
  {
    "text": "data when you follow these Bas practices",
    "start": "189599",
    "end": "192640"
  },
  {
    "text": "you can make sure that your Lambda",
    "start": "192640",
    "end": "194080"
  },
  {
    "text": "functions are safely ID poent and you",
    "start": "194080",
    "end": "196519"
  },
  {
    "text": "can avoid issues such as inconsistent",
    "start": "196519",
    "end": "198720"
  },
  {
    "text": "data throttling or increase latency from",
    "start": "198720",
    "end": "201599"
  },
  {
    "text": "duplicate",
    "start": "201599",
    "end": "202879"
  },
  {
    "text": "processing so now you know how to make",
    "start": "202879",
    "end": "204840"
  },
  {
    "text": "your Lambda function item poent to",
    "start": "204840",
    "end": "206840"
  },
  {
    "text": "prevent inconsistencies and data loss in",
    "start": "206840",
    "end": "209239"
  },
  {
    "text": "your application",
    "start": "209239",
    "end": "211760"
  },
  {
    "text": "thanks for watching and happy cloud",
    "start": "211879",
    "end": "213519"
  },
  {
    "text": "computing from all of us here at AWS",
    "start": "213519",
    "end": "216910"
  },
  {
    "text": "[Applause]",
    "start": "216910",
    "end": "218960"
  },
  {
    "text": "[Music]",
    "start": "218960",
    "end": "222069"
  }
]