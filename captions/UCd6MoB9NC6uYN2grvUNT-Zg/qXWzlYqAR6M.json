[
  {
    "text": "- Hi, my name is Thomas Rindfuss.",
    "start": "2100",
    "end": "4260"
  },
  {
    "text": "I'm a senior solutions architect,",
    "start": "4260",
    "end": "5850"
  },
  {
    "text": "working with Amazon Lex and Bedrock.",
    "start": "5850",
    "end": "8370"
  },
  {
    "text": "Today, I want to show you how you can use",
    "start": "8370",
    "end": "10740"
  },
  {
    "text": "the QnAIntent in Amazon Lex,",
    "start": "10740",
    "end": "13200"
  },
  {
    "text": "together with Knowledge\nBases for Amazon Bedrock",
    "start": "13200",
    "end": "16110"
  },
  {
    "text": "to provide pre-approved\nanswers to customers' questions",
    "start": "16110",
    "end": "19440"
  },
  {
    "text": "while still using the power\nof large language models",
    "start": "19440",
    "end": "22620"
  },
  {
    "text": "to find the correct response\nto a customer's query.",
    "start": "22620",
    "end": "25233"
  },
  {
    "text": "The QnAIntent in Amazon\nLex is a built-in intent",
    "start": "26520",
    "end": "30450"
  },
  {
    "text": "that allows you to add\nquestion answering capabilities",
    "start": "30450",
    "end": "33180"
  },
  {
    "text": "to your bot without writing\na single line of code.",
    "start": "33180",
    "end": "35973"
  },
  {
    "text": "You can choose to use Amazon\nBedrock to create an answer",
    "start": "37020",
    "end": "40170"
  },
  {
    "text": "to the customer's question",
    "start": "40170",
    "end": "41550"
  },
  {
    "text": "using retrieval augmented generation, RAG.",
    "start": "41550",
    "end": "45300"
  },
  {
    "text": "When using this technique,",
    "start": "45300",
    "end": "46710"
  },
  {
    "text": "the large language model\nwill generate an answer",
    "start": "46710",
    "end": "49230"
  },
  {
    "text": "to the customer's question\nusing your own curated documents",
    "start": "49230",
    "end": "52530"
  },
  {
    "text": "as the source of the information.",
    "start": "52530",
    "end": "54333"
  },
  {
    "text": "The customer might ask a question like,",
    "start": "55470",
    "end": "57967"
  },
  {
    "text": "\"When does open enrollment start?\"",
    "start": "57967",
    "end": "60027"
  },
  {
    "text": "An embeddings model is then used",
    "start": "61020",
    "end": "62610"
  },
  {
    "text": "to create an numerical representation",
    "start": "62610",
    "end": "64980"
  },
  {
    "text": "for the meaning of that question.",
    "start": "64980",
    "end": "67440"
  },
  {
    "text": "We then search the vector database",
    "start": "67440",
    "end": "69690"
  },
  {
    "text": "for chunks of content\nfrom our own documents.",
    "start": "69690",
    "end": "73110"
  },
  {
    "text": "We've created embeddings\nfor each chunk of the data",
    "start": "73110",
    "end": "76200"
  },
  {
    "text": "so we can find the chunks",
    "start": "76200",
    "end": "77549"
  },
  {
    "text": "that most closely match\nthe customer's question.",
    "start": "77550",
    "end": "80433"
  },
  {
    "text": "We then use the top results",
    "start": "81540",
    "end": "83730"
  },
  {
    "text": "and a large language\nmodel to create an answer",
    "start": "83730",
    "end": "86460"
  },
  {
    "text": "to the original question,",
    "start": "86460",
    "end": "88200"
  },
  {
    "text": "including any previous chat history.",
    "start": "88200",
    "end": "90333"
  },
  {
    "text": "This answer is generated in real time",
    "start": "91590",
    "end": "94649"
  },
  {
    "text": "and can't be approved ahead of time.",
    "start": "94650",
    "end": "96663"
  },
  {
    "text": "If you have a need to\npre-approve any answers,",
    "start": "97980",
    "end": "100410"
  },
  {
    "text": "return to the customers,",
    "start": "100410",
    "end": "102180"
  },
  {
    "text": "then you can make use of\nour exact match feature.",
    "start": "102180",
    "end": "105453"
  },
  {
    "text": "To use this feature,",
    "start": "106380",
    "end": "107880"
  },
  {
    "text": "instead of indexing entire\nwebsites or PDF documents,",
    "start": "107880",
    "end": "111689"
  },
  {
    "text": "we will instead create individual files",
    "start": "111690",
    "end": "114210"
  },
  {
    "text": "that contain the answers we're looking for",
    "start": "114210",
    "end": "116700"
  },
  {
    "text": "and associated questions that\nwould result in that answer.",
    "start": "116700",
    "end": "119793"
  },
  {
    "text": "When a customer asks a question,",
    "start": "120750",
    "end": "122940"
  },
  {
    "text": "we would still use the embeddings feature",
    "start": "122940",
    "end": "125520"
  },
  {
    "text": "to calculate the numerical representation",
    "start": "125520",
    "end": "128310"
  },
  {
    "text": "for their utterance.",
    "start": "128310",
    "end": "129810"
  },
  {
    "text": "We would then go and find\nthe most relevant documents",
    "start": "129810",
    "end": "132540"
  },
  {
    "text": "from our vector database.",
    "start": "132540",
    "end": "134310"
  },
  {
    "text": "The large language\nmodel would then be used",
    "start": "134310",
    "end": "136440"
  },
  {
    "text": "to select the most\nrelevant of those documents",
    "start": "136440",
    "end": "139440"
  },
  {
    "text": "based on the question asked\nand the conversation history.",
    "start": "139440",
    "end": "142473"
  },
  {
    "text": "Once that correct document\nhas been selected,",
    "start": "143310",
    "end": "146040"
  },
  {
    "text": "we will extract the verbatim\nanswer from that document",
    "start": "146040",
    "end": "149579"
  },
  {
    "text": "and return it to the customer.",
    "start": "149580",
    "end": "151830"
  },
  {
    "text": "I've created some JSON documents",
    "start": "151830",
    "end": "153630"
  },
  {
    "text": "with some made up questions and answers",
    "start": "153630",
    "end": "155550"
  },
  {
    "text": "about open enrollment\nfor health insurance.",
    "start": "155550",
    "end": "158190"
  },
  {
    "text": "Each document has a single answer,",
    "start": "158190",
    "end": "160560"
  },
  {
    "text": "but they can have multiple questions",
    "start": "160560",
    "end": "162300"
  },
  {
    "text": "that should return the same answer.",
    "start": "162300",
    "end": "164133"
  },
  {
    "text": "Since we're using Embeddings",
    "start": "165330",
    "end": "166890"
  },
  {
    "text": "and the power of large language models,",
    "start": "166890",
    "end": "168960"
  },
  {
    "text": "the customer could ask anything",
    "start": "168960",
    "end": "170610"
  },
  {
    "text": "where the meaning is similar enough",
    "start": "170610",
    "end": "172560"
  },
  {
    "text": "to one of these questions,",
    "start": "172560",
    "end": "174000"
  },
  {
    "text": "so the exact words used when\nthey're asking the question",
    "start": "174000",
    "end": "176820"
  },
  {
    "text": "is not super important.",
    "start": "176820",
    "end": "178173"
  },
  {
    "text": "I've then uploaded these\nfiles to an S3 bucket,",
    "start": "179370",
    "end": "182040"
  },
  {
    "text": "and I've referenced that bucket",
    "start": "182040",
    "end": "183450"
  },
  {
    "text": "when I've created my\nBedrock Knowledge Base.",
    "start": "183450",
    "end": "185650"
  },
  {
    "text": "I create a QnAIntent just\nlike I normally would",
    "start": "187320",
    "end": "190380"
  },
  {
    "text": "by referencing the Knowledge Base ID.",
    "start": "190380",
    "end": "193920"
  },
  {
    "text": "However, I also select Exact Match",
    "start": "193920",
    "end": "197190"
  },
  {
    "text": "and reference the Answer Field",
    "start": "197190",
    "end": "199860"
  },
  {
    "text": "that was defined in my JSON file,",
    "start": "199860",
    "end": "202170"
  },
  {
    "text": "answer in this case.",
    "start": "202170",
    "end": "203553"
  },
  {
    "text": "If you use multiple QnAIntents",
    "start": "204990",
    "end": "207060"
  },
  {
    "text": "and reference different Knowledge Bases,",
    "start": "207060",
    "end": "208830"
  },
  {
    "text": "then you'll also have\nto add sample entrances.",
    "start": "208830",
    "end": "211350"
  },
  {
    "text": "But in this case, I'm\nonly using one QnAIntent,",
    "start": "211350",
    "end": "213660"
  },
  {
    "text": "so I'm gonna leave this blank.",
    "start": "213660",
    "end": "215160"
  },
  {
    "text": "Let's build this bot,",
    "start": "216030",
    "end": "217920"
  },
  {
    "text": "and now that it's\nfinished, we will test it.",
    "start": "217920",
    "end": "220920"
  },
  {
    "text": "So now I'm gonna type in\na question that's similar,",
    "start": "220920",
    "end": "223470"
  },
  {
    "text": "but not using the exact same words",
    "start": "223470",
    "end": "225510"
  },
  {
    "text": "that are in my JSON documents,",
    "start": "225510",
    "end": "228450"
  },
  {
    "text": "and you can see that it returns",
    "start": "228450",
    "end": "230285"
  },
  {
    "text": "the exact same answer verbatim\nfrom my JSON document it.",
    "start": "230285",
    "end": "234363"
  },
  {
    "text": "Since the conversation\nhistory is taken into account,",
    "start": "235500",
    "end": "238590"
  },
  {
    "text": "you can ask follow-up questions,",
    "start": "238590",
    "end": "240150"
  },
  {
    "text": "referring back to previous\nstatements, and the QnAIntent",
    "start": "240150",
    "end": "243420"
  },
  {
    "text": "will match those questions",
    "start": "243420",
    "end": "244740"
  },
  {
    "text": "against the relevant\npre-approved answers as well.",
    "start": "244740",
    "end": "247293"
  },
  {
    "text": "The Exact Match feature\nwith Bedrock Knowledge Base",
    "start": "248400",
    "end": "251310"
  },
  {
    "text": "is available now in select regions.",
    "start": "251310",
    "end": "253443"
  }
]