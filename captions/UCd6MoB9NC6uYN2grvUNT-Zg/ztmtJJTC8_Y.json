[
  {
    "start": "0",
    "end": "47000"
  },
  {
    "text": "so my name is mark Porter I'm general manager of RDS for Postgres and the",
    "start": "319",
    "end": "6000"
  },
  {
    "text": "Postgres edition of Amazon Aurora with me is Kevin Jernigan senior product manager in the same groups welcome and",
    "start": "6000",
    "end": "13340"
  },
  {
    "text": "if you were at Andy's keynote yesterday you know that we're launching a preview of Postgres compatibility and Kevin and",
    "start": "13340",
    "end": "20550"
  },
  {
    "text": "I have been working together on this for a while and even before that Kevin and I were working together at Oracle starting",
    "start": "20550",
    "end": "27869"
  },
  {
    "text": "in 1988 28 years ago on scaling databases including Oracle RAC two-phase",
    "start": "27869",
    "end": "33840"
  },
  {
    "text": "commit no sequel on all those other things well we both think that the combination of the Postgres database engine with the",
    "start": "33840",
    "end": "40559"
  },
  {
    "text": "AWS cloud is amazing and we're excited to tell you about it and it's a privilege to work on it so let's start",
    "start": "40559",
    "end": "47329"
  },
  {
    "start": "47000",
    "end": "86000"
  },
  {
    "text": "what are we going to talk about today we're gonna go through and we're gonna tell you how we built why we built",
    "start": "47329",
    "end": "53219"
  },
  {
    "text": "Amazon Arora we're gonna tell you how it's doing and why we think Postgres compatibility is important then we're",
    "start": "53219",
    "end": "60300"
  },
  {
    "text": "gonna cover how Amazon Arora literally re-envision z-- the database it Rhian visions durability availability and",
    "start": "60300",
    "end": "66510"
  },
  {
    "text": "performance and Kevin is going to show you some pretty fun performance slides they'll actually be numbers and graphs",
    "start": "66510",
    "end": "73070"
  },
  {
    "text": "then we're going to have a surprise guest speaker to introduce you to a new feature of Amazon RDS performance",
    "start": "73070",
    "end": "79409"
  },
  {
    "text": "insights and finally we'll talk about what our next features are and as Andy Jesse likes to say giddyup traditional",
    "start": "79409",
    "end": "88170"
  },
  {
    "start": "86000",
    "end": "214000"
  },
  {
    "text": "databases like Oracle's sequel server my sequel and yes even community version of",
    "start": "88170",
    "end": "93479"
  },
  {
    "text": "Postgres are hard to scale their design is multiple layers of functionality in a single monolithic software stack they",
    "start": "93479",
    "end": "100920"
  },
  {
    "text": "run slow together they don't scale independently the different layers don't scale independently and they fail",
    "start": "100920",
    "end": "107430"
  },
  {
    "text": "together they're very tightly coupled and I like to say and I've worked on these for like I said 28 years they",
    "start": "107430",
    "end": "113729"
  },
  {
    "text": "perform at the LPD or the lowest performance denominator and that's not what you want in fact one of the reasons",
    "start": "113729",
    "end": "120450"
  },
  {
    "text": "no sequel has been so popular is that people need to scale out various layers of this and not scale out the other",
    "start": "120450",
    "end": "125909"
  },
  {
    "text": "layers however at the same time nobody said they didn't want transactions so let's see what we can do and what people",
    "start": "125909",
    "end": "132690"
  },
  {
    "text": "have done in the past to those problems well first off people",
    "start": "132690",
    "end": "138130"
  },
  {
    "text": "start with Chardon where you shard your keys across the cluster well number one this is very application dependent",
    "start": "138130",
    "end": "143560"
  },
  {
    "text": "number two you lose the ability to join your data sets and frankly about the only good thing you can say about",
    "start": "143560",
    "end": "149200"
  },
  {
    "text": "sharding is that it's not one of the other two solutions up here third I mean",
    "start": "149200",
    "end": "154960"
  },
  {
    "text": "second people focused on shared nothing or two-phase commit and without going",
    "start": "154960",
    "end": "160690"
  },
  {
    "text": "very deep into that the problem with it is is that performance was abysmal and except for some very well tuned data",
    "start": "160690",
    "end": "166480"
  },
  {
    "text": "sets and transaction loads no one uses it today at all third people decided to",
    "start": "166480",
    "end": "172420"
  },
  {
    "text": "get really smart and put an immense amount of science into putting the buffer cache together and putting the",
    "start": "172420",
    "end": "178810"
  },
  {
    "text": "storage layer together and they tried to make it simple views but frankly it hasn't happened to date Kevin and I both",
    "start": "178810",
    "end": "185980"
  },
  {
    "text": "worked on Oracle RAC version six and you know it's the kind of thing where people",
    "start": "185980",
    "end": "191830"
  },
  {
    "text": "are going around where it's complex to deploy incredibly expensive and typical RAC installations have a bunch of highly",
    "start": "191830",
    "end": "198400"
  },
  {
    "text": "paid DBA is dancing around them chanting reconfiguration spells there's nothing",
    "start": "198400",
    "end": "203560"
  },
  {
    "text": "you can do about it and and that's not anything wrong with Oracle RAC it's the fact that fundamentally you're addressing the",
    "start": "203560",
    "end": "209410"
  },
  {
    "text": "problem wrong you're actually making it more complex rather than simpler so what",
    "start": "209410",
    "end": "215170"
  },
  {
    "start": "214000",
    "end": "226000"
  },
  {
    "text": "would you do if you were gonna write a database today you'd break apart the stack and you'd build something that can",
    "start": "215170",
    "end": "220300"
  },
  {
    "text": "scale out something that's self-healing and something that leverages a bunch of distributed services so we did that and",
    "start": "220300",
    "end": "227700"
  },
  {
    "start": "226000",
    "end": "269000"
  },
  {
    "text": "we're gonna tell you today about how we apply to service-oriented architecture to the database and so the very first",
    "start": "227700",
    "end": "234760"
  },
  {
    "text": "thing we did is we took the logging and storage tiers out and we made them multi tenant self-healing and distributed and because we're an AWS we depended on",
    "start": "234760",
    "end": "242170"
  },
  {
    "text": "services like Amazon s3 simple workflow and then you'd let it be managed in the",
    "start": "242170",
    "end": "248110"
  },
  {
    "text": "same way all your other databases are managed using Amazon RDS we knew all of",
    "start": "248110",
    "end": "253570"
  },
  {
    "text": "this from our days writing databases at Oracle and from our days managing databases at Amazon a true mission critical Enterprise",
    "start": "253570",
    "end": "260189"
  },
  {
    "text": "databases so way back in 2012 a bunch of folks led by Anurag Gupta and his team",
    "start": "260189",
    "end": "266090"
  },
  {
    "text": "analogs an old buddy of mine from Oracle decided to go do it and so they built",
    "start": "266090",
    "end": "271199"
  },
  {
    "start": "269000",
    "end": "304000"
  },
  {
    "text": "Amazon Arora how many of you use Amazon Arora today oh we need to prove that as",
    "start": "271199",
    "end": "279780"
  },
  {
    "text": "all as a result of all that work on Augustin produced Amazon or a cloud optimized relational database Amazon",
    "start": "279780",
    "end": "287340"
  },
  {
    "text": "Aurora provides performance and daily and durability by implementing a fully distributed and self-healing storage",
    "start": "287340",
    "end": "293069"
  },
  {
    "text": "system it provides availability by using the elasticity and the management capabilities of the cloud Amazon Aurora",
    "start": "293069",
    "end": "300569"
  },
  {
    "text": "launched in 2014 and it's been a pretty exciting ride since then so Kevin is",
    "start": "300569",
    "end": "306870"
  },
  {
    "start": "304000",
    "end": "344000"
  },
  {
    "text": "gonna tell you a little bit from the product side about how Amazon Aurora is doing in the marketplace Kevin here you go so Marc told you a",
    "start": "306870",
    "end": "316919"
  },
  {
    "text": "little bit about why we built Amazon Aurora but how's it doing with our",
    "start": "316919",
    "end": "321990"
  },
  {
    "text": "customers well from the time I went GA in July of last year Atlas Amazon Aurora",
    "start": "321990",
    "end": "327419"
  },
  {
    "text": "has become the fastest growing service in AWS history by far actually and it's",
    "start": "327419",
    "end": "333389"
  },
  {
    "text": "got a lot of competition for that title because we have a bunch of other amazing products with fast growth rates like",
    "start": "333389",
    "end": "339120"
  },
  {
    "text": "Amazon redshift ElastiCache and even RDS for Postgres itself and here's what some",
    "start": "339120",
    "end": "347039"
  },
  {
    "text": "of our customers have to say about their experiences with Amazon Aurora at Funny or Die they've seen major performance",
    "start": "347039",
    "end": "353729"
  },
  {
    "text": "benefits goguardian loves the low replicas lag Zynga who's been in",
    "start": "353729",
    "end": "359219"
  },
  {
    "text": "production for more than eight months with Amazon Aurora is excited about performance without operational overhead",
    "start": "359219",
    "end": "364939"
  },
  {
    "text": "and alfresco can products process documents ten times faster with Amazon",
    "start": "364939",
    "end": "370110"
  },
  {
    "text": "Aurora and we have many more customer stories about the tremendous success they're having with Aurora when they",
    "start": "370110",
    "end": "379229"
  },
  {
    "start": "377000",
    "end": "441000"
  },
  {
    "text": "hear about the performance and reliability of Amazon Aurora customers assume it's a premium priced product",
    "start": "379229",
    "end": "385669"
  },
  {
    "text": "however Aurora has allowed many customers to actually reduce their bill by reducing the number or size of",
    "start": "385669",
    "end": "392820"
  },
  {
    "text": "instances they need by not having to pre provision for future storage Peaks or by",
    "start": "392820",
    "end": "398160"
  },
  {
    "text": "taking advantage of the fact that adding an Aurora read replica does not change their storage cost thanks to the shared",
    "start": "398160",
    "end": "404250"
  },
  {
    "text": "storage layer one example is safecom they've lowered their bill by about 40%",
    "start": "404250",
    "end": "409830"
  },
  {
    "text": "by switching from a sharded my sequel implementation to a single Aurora instance they were able to do this",
    "start": "409830",
    "end": "416280"
  },
  {
    "text": "because that single or instance provides enough performance that they no longer need to shard in two separate instances",
    "start": "416280",
    "end": "422400"
  },
  {
    "text": "to do that sharding scale out picture that mark showed you another example is Double Down Interactive a gaming company",
    "start": "422400",
    "end": "429150"
  },
  {
    "text": "they lower their bill by about two thirds while also achieving better Layton sees most of their queries now",
    "start": "429150",
    "end": "435510"
  },
  {
    "text": "run faster and lower CPU utilization at the same time so what's next I think you",
    "start": "435510",
    "end": "444480"
  },
  {
    "start": "441000",
    "end": "472000"
  },
  {
    "text": "already know what's next we've announced this in 2014 we launched Amazon Aurora with my sequel compatibility and now",
    "start": "444480",
    "end": "451350"
  },
  {
    "text": "we're adding Postgres compatibility we're gonna make Amazon or even better for our customers with Postgres",
    "start": "451350",
    "end": "457140"
  },
  {
    "text": "compatibility this means that customers can now take both existing my sequel and",
    "start": "457140",
    "end": "462180"
  },
  {
    "text": "Postgres applications and run them in Amazon Aurora getting all of those benefits of higher performance higher",
    "start": "462180",
    "end": "468660"
  },
  {
    "text": "availability and lower costs so at",
    "start": "468660",
    "end": "474060"
  },
  {
    "start": "472000",
    "end": "527000"
  },
  {
    "text": "Amazon we always start with the customer in this case customers who have relational database requirements and as",
    "start": "474060",
    "end": "480840"
  },
  {
    "text": "I've already shown you we have seen high and growing customer demand for Amazon Aurora with my sequel compatibility they",
    "start": "480840",
    "end": "487350"
  },
  {
    "text": "like the performance durability availability and compatibility with their existing by sequel applications",
    "start": "487350",
    "end": "492630"
  },
  {
    "text": "and skill sets so why add Postgres well at the same time that we launched Amazon",
    "start": "492630",
    "end": "498630"
  },
  {
    "text": "Aurora with my sequel compatibility from the day we launched customers have been asking for the same capabilities the",
    "start": "498630",
    "end": "504600"
  },
  {
    "text": "same enterprise database capabilities but with Postgres compatibility they want all that durability availability",
    "start": "504600",
    "end": "511200"
  },
  {
    "text": "fast read replicas performance improvements but with Postgres now they aren't saying they want to move off of",
    "start": "511200",
    "end": "516690"
  },
  {
    "text": "my sequel they like the my sequel compatible edition of Aurora just a lot of customers also want",
    "start": "516690",
    "end": "523390"
  },
  {
    "text": "Postgres compatibility with those same characteristics so when we drill down",
    "start": "523390",
    "end": "529870"
  },
  {
    "start": "527000",
    "end": "566000"
  },
  {
    "text": "with customers in more detail about their relational database requirements with respect to Postgres compatibility",
    "start": "529870",
    "end": "535810"
  },
  {
    "text": "they tell us about several scenarios they want to migrate existing Postgres",
    "start": "535810",
    "end": "541150"
  },
  {
    "text": "applications from on-premises or from ec2 or they want to migrate from Amazon",
    "start": "541150",
    "end": "546850"
  },
  {
    "text": "RDS for postgrads due to database size limitations or performance scalability",
    "start": "546850",
    "end": "551890"
  },
  {
    "text": "requirements or they want to migrate from Oracle or sequel server platforms",
    "start": "551890",
    "end": "557170"
  },
  {
    "text": "to help lower costs or they want to build new applications that leverage the combination of postgrads with Amazon",
    "start": "557170",
    "end": "564100"
  },
  {
    "text": "Arora but let's drill down a little bit more on why our customers interested in",
    "start": "564100",
    "end": "570550"
  },
  {
    "start": "566000",
    "end": "611000"
  },
  {
    "text": "Postgres while postgrads is an open source project that started more than 20 years ago as a follow-on to the ingress",
    "start": "570550",
    "end": "577660"
  },
  {
    "text": "database system that's why it's called Postgres so postgrads has an active and",
    "start": "577660",
    "end": "583210"
  },
  {
    "text": "vibrant open-source community that continues to innovate in the core database product with new features and",
    "start": "583210",
    "end": "589360"
  },
  {
    "text": "capabilities and this is partially due to the type of open-source license used by postgrads which allows anyone to",
    "start": "589360",
    "end": "596500"
  },
  {
    "text": "modify the source code however they want in addition postgrads is not owned or",
    "start": "596500",
    "end": "602560"
  },
  {
    "text": "controlled by a single company so it's owned by a non-profit foundation which",
    "start": "602560",
    "end": "607660"
  },
  {
    "text": "addresses customer concerns about vendor lock-in for features and functionality",
    "start": "607660",
    "end": "613810"
  },
  {
    "start": "611000",
    "end": "649000"
  },
  {
    "text": "post payers offers really good performance out of the box even before we start doing our Amazon Aurora",
    "start": "613810",
    "end": "619770"
  },
  {
    "text": "improvements it has transactional semantics very similar to those of Oracle and sequel server it is object",
    "start": "619770",
    "end": "627190"
  },
  {
    "text": "oriented an ANSI sequel 2008 compatible which makes it really easy for customers to migrate applications from other",
    "start": "627190",
    "end": "633459"
  },
  {
    "text": "relational database platforms it also has very strong support for geospatial capabilities with post GIS and it also",
    "start": "633459",
    "end": "641050"
  },
  {
    "text": "supports stored procedures in many languages including PL PG sequel which is very similar to Oracle's PL sequel",
    "start": "641050",
    "end": "649290"
  },
  {
    "start": "649000",
    "end": "679000"
  },
  {
    "text": "this combination of features and capabilities makes post res the most Oracle",
    "start": "649290",
    "end": "654769"
  },
  {
    "text": "durable open-source database and we even see that with our own AWS schema conversion tool that tool shows the",
    "start": "654769",
    "end": "662420"
  },
  {
    "text": "highest automatic conversion rates are from Oracle sorry from Oracle are two Postgres so it shows roughly a 60 to 70",
    "start": "662420",
    "end": "670790"
  },
  {
    "text": "percent automatic conversion rate on average for customer databases when",
    "start": "670790",
    "end": "676009"
  },
  {
    "text": "they're trying to migrate from Oracle to Postgres so what do we mean when we say",
    "start": "676009",
    "end": "682549"
  },
  {
    "start": "679000",
    "end": "716000"
  },
  {
    "text": "we have made Amazon or are compatible with Postgres well we started with the Postgres 96 code and have integrated",
    "start": "682549",
    "end": "689899"
  },
  {
    "text": "Amazon aurora's cloud optimized storage into the lower layers Amazon Aurora",
    "start": "689899",
    "end": "695600"
  },
  {
    "text": "Storage maintains 6 copies of every write across three availability zones for high durability it supports up to 15",
    "start": "695600",
    "end": "703040"
  },
  {
    "text": "read replicas with very low replicas lag it provides failover times of 30 seconds",
    "start": "703040",
    "end": "708199"
  },
  {
    "text": "or less and we are currently seeing performance greater than or equal to 2 times that of standard Postgres on",
    "start": "708199",
    "end": "714139"
  },
  {
    "text": "standard benchmarks amazona Amazon Aurora storage also includes cloud",
    "start": "714139",
    "end": "719809"
  },
  {
    "start": "716000",
    "end": "763000"
  },
  {
    "text": "native security and encryption integrated with AWS key management service and AWS Identity and Access",
    "start": "719809",
    "end": "725779"
  },
  {
    "text": "Management we've also integrated Aurora into Amazon RDS making it easy to provision and manage and customers can",
    "start": "725779",
    "end": "733009"
  },
  {
    "text": "use AWS database migration service and AWS schema conversion tool to migrate",
    "start": "733009",
    "end": "738350"
  },
  {
    "text": "data into the Postgres compatible edition of Amazon Aurora and also to migrate data out if needed now it's",
    "start": "738350",
    "end": "745490"
  },
  {
    "text": "important to keep in mind that we're running postgrads code we're not emulating Postgres functionality with a",
    "start": "745490",
    "end": "751189"
  },
  {
    "text": "compatibility layer the Postgres compatible Edition at Amazon Aurora is a native Postgres implementation and we",
    "start": "751189",
    "end": "757819"
  },
  {
    "text": "plan to maintain full compatibility with Postgres for the foreseeable future",
    "start": "757819",
    "end": "763240"
  },
  {
    "start": "763000",
    "end": "780000"
  },
  {
    "text": "now I'm going to hand it back to Marc who will dive deeper into durability and availability with the Postgres",
    "start": "763480",
    "end": "769189"
  },
  {
    "text": "compatible edition of Amazon Aurora thanks Kevin so I bet a lot of you believed a lot of",
    "start": "769189",
    "end": "775669"
  },
  {
    "text": "that stuff because you're here so now we're gonna dive into how we did it and how it's important so remember I told",
    "start": "775669",
    "end": "781999"
  },
  {
    "start": "780000",
    "end": "813000"
  },
  {
    "text": "you about redesigning the relational databases from the ground up and ripping apart that stack well you would want to take the bottom",
    "start": "781999",
    "end": "789160"
  },
  {
    "text": "part of that stack and you don't have one that's distributed one that copies data one that has its own monitoring",
    "start": "789160",
    "end": "794980"
  },
  {
    "text": "system one that has spread across an entire AWS region both so that you can run your applications in any place you",
    "start": "794980",
    "end": "801940"
  },
  {
    "text": "want in that region and still get equal access to that storage system and also so that in the event of some kind of",
    "start": "801940",
    "end": "807880"
  },
  {
    "text": "failure you're insulated from that bolt at the application level and at storage level so we've already talked about some",
    "start": "807880",
    "end": "815860"
  },
  {
    "start": "813000",
    "end": "924000"
  },
  {
    "text": "of this stuff it's duplicated six times but there's some stuff about this that's subtle as a database administrator or as a owner one",
    "start": "815860",
    "end": "823480"
  },
  {
    "text": "is that data is continually backed up to s3 there's no backup windows there's no backup penalty you're never gonna be",
    "start": "823480",
    "end": "829990"
  },
  {
    "text": "worried that your backup job is running at the same time as your payroll job it just doesn't happen it's always running",
    "start": "829990",
    "end": "835060"
  },
  {
    "text": "it has a separate monitoring and management infrastructure and then it has something that we call a four six",
    "start": "835060",
    "end": "841570"
  },
  {
    "text": "quorum for writes and this has both durability implications and it has",
    "start": "841570",
    "end": "846580"
  },
  {
    "text": "performance implications I'll get into later what does that mean it means that when that database node writes six times",
    "start": "846580",
    "end": "853930"
  },
  {
    "text": "to the different places it actually goes and tells the database that it's done when it gets the fourth acknowledgment",
    "start": "853930",
    "end": "859600"
  },
  {
    "text": "back from whichever one it comes back from well now what does that mean because what happened to the other two",
    "start": "859600",
    "end": "865120"
  },
  {
    "text": "well the other two are probably just late and what that means is that networks and disks and nodes they can",
    "start": "865120",
    "end": "871540"
  },
  {
    "text": "all stutter sometimes well Amazon Aurora is jitter independent for those fifth",
    "start": "871540",
    "end": "876820"
  },
  {
    "text": "and sixth rights not only that because the system doesn't depend on those fifth",
    "start": "876820",
    "end": "883450"
  },
  {
    "text": "and six rights you can actually pull as a management operation pull any one of those six storage nodes out of the",
    "start": "883450",
    "end": "888970"
  },
  {
    "text": "system and put it back in replace it with a new one do something different upgrade it and the system just keeps",
    "start": "888970",
    "end": "894910"
  },
  {
    "text": "running now there's something subtle when I talk to customers here is they keep asking well what impact does all",
    "start": "894910",
    "end": "900370"
  },
  {
    "text": "this have on the database and I'll say it again and again through the presentation none the database keeps",
    "start": "900370",
    "end": "905560"
  },
  {
    "text": "running and I'll even say something else you don't even know what's happening there's no alert to you there's no",
    "start": "905560",
    "end": "911830"
  },
  {
    "text": "management console that shows you that the storage system is doing all this stuff you know why cuz because you don't",
    "start": "911830",
    "end": "917500"
  },
  {
    "text": "you don't know that the power company is putting : the bores and you don't know that the storage system is repairing itself all",
    "start": "917500",
    "end": "923550"
  },
  {
    "text": "the time so let's go a little bit deeper on fault tolerance because it's not",
    "start": "923550",
    "end": "928589"
  },
  {
    "start": "924000",
    "end": "981000"
  },
  {
    "text": "intuitive to a lot of people what can fail segments can fail 10 gig segments those are disks nodes can fail that's",
    "start": "928589",
    "end": "935819"
  },
  {
    "text": "the the big the middle red axis and AZ's availability zones can probably not fail",
    "start": "935819",
    "end": "942119"
  },
  {
    "text": "we've never had one fail and we don't intend to but sometimes the network connectivity to an availability zone can study or",
    "start": "942119",
    "end": "948720"
  },
  {
    "text": "become impaired so amazon aurora rides through all of those failures in fact",
    "start": "948720",
    "end": "955619"
  },
  {
    "text": "you will be able to write as long as four of those are available and you will be able to read as long as three of them",
    "start": "955619",
    "end": "962129"
  },
  {
    "text": "are available and that's pretty cool not only that when something bad does happen the database node doesn't have to get",
    "start": "962129",
    "end": "968399"
  },
  {
    "text": "involved in fixing it those arrows between the storage nodes are the storage system actually fixing itself",
    "start": "968399",
    "end": "973740"
  },
  {
    "text": "without talking to the database without getting administrator involved it'll diplucate all the missing segments all",
    "start": "973740",
    "end": "979800"
  },
  {
    "text": "by itself so another thing this gives us is great replicas so everyone knows",
    "start": "979800",
    "end": "987029"
  },
  {
    "start": "981000",
    "end": "1045000"
  },
  {
    "text": "about read replicas they let you scale out your read traffic they let you do read balancing but there's also this",
    "start": "987029",
    "end": "993959"
  },
  {
    "text": "concept of durability and availability and so again at this layer there's a",
    "start": "993959",
    "end": "1000290"
  },
  {
    "text": "completely hidden independent database and instance monitoring service now this",
    "start": "1000290",
    "end": "1005420"
  },
  {
    "text": "one will tell you what it's doing when your instances failover you can get alerts on the console just like your RDS",
    "start": "1005420",
    "end": "1010730"
  },
  {
    "text": "databases in Aurora there's one primary writable node as you can see on the",
    "start": "1010730",
    "end": "1016040"
  },
  {
    "text": "picture and there's up to 15 read-only replicas and the system detects failing",
    "start": "1016040",
    "end": "1021050"
  },
  {
    "text": "database nodes and replaces them or fails over and the system detects failing database processes and restarts",
    "start": "1021050",
    "end": "1027409"
  },
  {
    "text": "them all without you getting involved in fact in Postgres the port number is 54 32 that you connect to and we like to",
    "start": "1027409",
    "end": "1034490"
  },
  {
    "text": "think of our job as 54 32 should always respond that's it that's the contract you make with us and we want to do",
    "start": "1034490",
    "end": "1041270"
  },
  {
    "text": "everything in our power to keep 54 32 responding so let's talk a little bit",
    "start": "1041270",
    "end": "1047480"
  },
  {
    "start": "1045000",
    "end": "1109000"
  },
  {
    "text": "about that continuous backup because for those of you who run databases you're probably always aware and you're running",
    "start": "1047480",
    "end": "1052700"
  },
  {
    "text": "your back up scripts and you're wondering how it worked even with Amazon RDS people track their backups well with the roryd",
    "start": "1052700",
    "end": "1058730"
  },
  {
    "text": "you don't have to because it's always taking snapshots it's always taking log",
    "start": "1058730",
    "end": "1064220"
  },
  {
    "text": "records out and then what goes to restore all it has to do is bring back",
    "start": "1064220",
    "end": "1069770"
  },
  {
    "text": "the latest snapshot of each segment and bring back the log records and apply up",
    "start": "1069770",
    "end": "1074780"
  },
  {
    "text": "to whatever particular time that dashed vertical line is at which is another power I'll talk about here in a little",
    "start": "1074780",
    "end": "1080690"
  },
  {
    "text": "bit but the key thing about this which is different than databases you're used to is that a typical Aurora storage",
    "start": "1080690",
    "end": "1088910"
  },
  {
    "text": "cluster is hundreds of nodes and this is in production all over the world today and so when you think about how long it",
    "start": "1088910",
    "end": "1095990"
  },
  {
    "text": "takes to bring back one of your databases imagine how much faster it would be if you were bringing it back across four or five hundred big powerful",
    "start": "1095990",
    "end": "1104810"
  },
  {
    "text": "thirty-two CPU machines with ten th not",
    "start": "1104810",
    "end": "1110300"
  },
  {
    "start": "1109000",
    "end": "1163000"
  },
  {
    "text": "only that but Amazon or has instant crash recovery now instant that's quite",
    "start": "1110300",
    "end": "1115340"
  },
  {
    "text": "the word isn't it well the reason that's quite the word because it actually doesn't have to do almost anything for crash recovery most",
    "start": "1115340",
    "end": "1122510"
  },
  {
    "text": "databases write data blocks as you modify them and then occasionally the database those does what's called a",
    "start": "1122510",
    "end": "1128510"
  },
  {
    "text": "check point and a check point is it gets all the dirty data blocks up to a certain point out of cache and then make",
    "start": "1128510",
    "end": "1134600"
  },
  {
    "text": "sure all the redo is out of cache as well that way you know you can recover your database owner rora there's no data",
    "start": "1134600",
    "end": "1140780"
  },
  {
    "text": "blase block written ever the node will never write a database block it only writes log records well so that means",
    "start": "1140780",
    "end": "1147860"
  },
  {
    "text": "that the concept of recovery where you have to read in data place blocks goes away so the transaction system the way",
    "start": "1147860",
    "end": "1155000"
  },
  {
    "text": "you recover is it comes up and it determines the last durable transaction written and it says hey there you are",
    "start": "1155000",
    "end": "1160400"
  },
  {
    "text": "that's where you are there's no recovery now sometimes hardware's not perfect",
    "start": "1160400",
    "end": "1167680"
  },
  {
    "start": "1163000",
    "end": "1264000"
  },
  {
    "text": "switches fail CPU boards fry weird things happen with you know racks etc",
    "start": "1167680",
    "end": "1174920"
  },
  {
    "text": "when that happens there's clearly no option to restart the database so we even Amazon or Ora camp before magic in",
    "start": "1174920",
    "end": "1180530"
  },
  {
    "text": "that case so that because the database node isn't there anymore so in the case of such a failure",
    "start": "1180530",
    "end": "1186100"
  },
  {
    "text": "need to promote another database to the master and this is called failover so promotion of a read-only node to be the",
    "start": "1186100",
    "end": "1193090"
  },
  {
    "text": "writable node is called failover in Amazon RDS for Postgres with our multi",
    "start": "1193090",
    "end": "1198460"
  },
  {
    "text": "AZ solution we actually do pretty well we detect the failure in fifteen to twenty seconds we start DNS propagation",
    "start": "1198460",
    "end": "1205000"
  },
  {
    "text": "and recovery at the same time and you know we get the note available typically",
    "start": "1205000",
    "end": "1210190"
  },
  {
    "text": "our p99 is around sixty eight seconds now in aura we've actually done some",
    "start": "1210190",
    "end": "1216100"
  },
  {
    "text": "stuff to optimize the failure detection because we own all the code in the database and we've also done it so that recovery",
    "start": "1216100",
    "end": "1223809"
  },
  {
    "text": "I've told you is really short so now that doesn't go out past DNS propagation and if you use one of our client drivers",
    "start": "1223809",
    "end": "1230140"
  },
  {
    "text": "which actually knows what the cluster is it knows where the master is and it knows where all the read replicas are it",
    "start": "1230140",
    "end": "1236200"
  },
  {
    "text": "can failover like that in fact in Amazon or or today we see failover times sometimes as short as five seconds now",
    "start": "1236200",
    "end": "1243280"
  },
  {
    "text": "that's not what you get all the time we typically get thirty seconds now you can imagine that we're gonna be working hard",
    "start": "1243280",
    "end": "1249250"
  },
  {
    "text": "to make that number lower but this is this is just a game changer because how would you like your databases to fail",
    "start": "1249250",
    "end": "1254980"
  },
  {
    "text": "over in the time your users go what's going on what's its back they don't know the database failed over you do you got",
    "start": "1254980",
    "end": "1261640"
  },
  {
    "text": "a page for it just so you know that something happened so now what we're gonna do is we're",
    "start": "1261640",
    "end": "1268120"
  },
  {
    "start": "1264000",
    "end": "1300000"
  },
  {
    "text": "gonna talk about performance and we're gonna do it in two phases the first is kevin's can tell you about the performance and then i'm gonna come back",
    "start": "1268120",
    "end": "1274059"
  },
  {
    "text": "up and tell you how we did it thanks mark decided to dive in on some of the",
    "start": "1274059",
    "end": "1281440"
  },
  {
    "text": "performance benchmark results from the beginning one of our major goals for the Postgres compatible edition of aurora",
    "start": "1281440",
    "end": "1287620"
  },
  {
    "text": "has been to deliver much better performance for customers with demanding workloads so as part of our performance",
    "start": "1287620",
    "end": "1293620"
  },
  {
    "text": "effort we of course run various standard benchmarks to compare how we're doing relative to standard Postgres and so in",
    "start": "1293620",
    "end": "1301900"
  },
  {
    "start": "1300000",
    "end": "1350000"
  },
  {
    "text": "the next few slides i'm going to review a bunch of different results with different types of tests and all the",
    "start": "1301900",
    "end": "1307299"
  },
  {
    "text": "tests were done with the database engine running on an m4 dot 16x large with the",
    "start": "1307299",
    "end": "1312309"
  },
  {
    "text": "clients running on a c 4.8 x large and both the database and the client were in the same availability zone for",
    "start": "1312309",
    "end": "1320150"
  },
  {
    "text": "the Postgres tests we used version 961 and we use three provisioned I ops volumes of 3,000 gig each for a total of",
    "start": "1320150",
    "end": "1327650"
  },
  {
    "text": "45,000 ions we created an ext4 file system striped across a logical volume",
    "start": "1327650",
    "end": "1333230"
  },
  {
    "text": "on top of that storage and we also enabled full-page writes checksums and wall compression this combination gives",
    "start": "1333230",
    "end": "1339980"
  },
  {
    "text": "the best performance for Postgres while most directly comparing with the durability and availability built in to",
    "start": "1339980",
    "end": "1346400"
  },
  {
    "text": "Amazon or our storage so let's first",
    "start": "1346400",
    "end": "1352400"
  },
  {
    "start": "1350000",
    "end": "1469000"
  },
  {
    "text": "look at some PG bench results for those of you don't aren't familiar PG bench is the standard benchmark that's part of",
    "start": "1352400",
    "end": "1358640"
  },
  {
    "text": "the Postgres distribution and it has several built-in modes one of those modes is TPC be like in which PG bench",
    "start": "1358640",
    "end": "1366230"
  },
  {
    "text": "runs transactions that are very similar to the standard piece TPC B benchmark we",
    "start": "1366230",
    "end": "1371990"
  },
  {
    "text": "ran PG bench in T PCB Lake mode while increasing the number of connect concurrent client connections from 256",
    "start": "1371990",
    "end": "1378170"
  },
  {
    "text": "up to 1536 we used a 30 gig scale mm size database and we ran each test for",
    "start": "1378170",
    "end": "1384710"
  },
  {
    "text": "60 minutes as you can see in the graph Postgres reaches a peak of just under",
    "start": "1384710",
    "end": "1390860"
  },
  {
    "text": "18,000 transactions per second at 512 concurrent connections whereas Amazon",
    "start": "1390860",
    "end": "1395870"
  },
  {
    "text": "Aurora continues to scale up as more connections are added reaching a peak of just over 38,000 transactions per second",
    "start": "1395870",
    "end": "1403010"
  },
  {
    "text": "at 1,024 connections the peak-to-peak comparison shows that Amazon Aurora",
    "start": "1403010",
    "end": "1409130"
  },
  {
    "text": "delivers more than two times the throughput of Postgres and the direct comparison of Amazon Aurora speak with",
    "start": "1409130",
    "end": "1415730"
  },
  {
    "text": "the corresponding postgrads results with a thousand 24 connections shows a ratio of greater than",
    "start": "1415730",
    "end": "1421010"
  },
  {
    "text": "two-and-a-half times so in this test we",
    "start": "1421010",
    "end": "1427520"
  },
  {
    "text": "use sis patch a benchmark utility often used to compare different database engines we ran the suspense right only",
    "start": "1427520",
    "end": "1433970"
  },
  {
    "text": "benchmark again while increasing the number of client connections with a 30 gig database Postgres writes per second",
    "start": "1433970",
    "end": "1441080"
  },
  {
    "text": "scale up until they reach just over 47,000 writes per second at a thousand 24 connections then the throughput drops",
    "start": "1441080",
    "end": "1448430"
  },
  {
    "text": "as more connections are added and you can see Amazon Aurora scales up to just over 92,000 rights per second at",
    "start": "1448430",
    "end": "1456140"
  },
  {
    "text": "1536 connections about two times more throughput when comparing peak to peak",
    "start": "1456140",
    "end": "1461330"
  },
  {
    "text": "compared directly with the Postgres throughput at 1536 connections the ratio",
    "start": "1461330",
    "end": "1466350"
  },
  {
    "text": "is more than two and a half times another metric we track closely in our",
    "start": "1466350",
    "end": "1472049"
  },
  {
    "start": "1469000",
    "end": "1489000"
  },
  {
    "text": "benchmarking is rights per second with sis patch and in this screenshot you can see the results of a syst bench run with",
    "start": "1472049",
    "end": "1478950"
  },
  {
    "text": "an average of more than 120 thousand rights per second you'll also notice the reads were zero this is because this was",
    "start": "1478950",
    "end": "1485070"
  },
  {
    "text": "a read-only configuration of sis bench so let's take a look at database load",
    "start": "1485070",
    "end": "1491669"
  },
  {
    "start": "1489000",
    "end": "1523000"
  },
  {
    "text": "performance with the PG benchmark you first of course have to load the database and we compared the time it",
    "start": "1491669",
    "end": "1497159"
  },
  {
    "text": "takes to load vacuum and index build indexes for a scale 10000 or 150 gig PG",
    "start": "1497159",
    "end": "1503190"
  },
  {
    "text": "bench database and as you can see Amazon Aurora can finish the PG bench initialization phase about three times",
    "start": "1503190",
    "end": "1510419"
  },
  {
    "text": "faster than Postgres and most of the performance difference in load times is due to the database specific storage",
    "start": "1510419",
    "end": "1516720"
  },
  {
    "text": "optimizations that are key to Amazon Aurora storage and Marc will dive deeper into those optimizations in a few",
    "start": "1516720",
    "end": "1522900"
  },
  {
    "text": "minutes it's important to measure throughput as we've been showing you but it's also important to measure response",
    "start": "1522900",
    "end": "1529230"
  },
  {
    "start": "1523000",
    "end": "1600000"
  },
  {
    "text": "time at scale so we looked at sis bench response times with a thousand 24",
    "start": "1529230",
    "end": "1534630"
  },
  {
    "text": "concurrent connections on the graph you can see very different behavior for Amazon Aurora as compared with Postgres",
    "start": "1534630",
    "end": "1540950"
  },
  {
    "text": "the response times for Aurora are much steadier with much less variation more",
    "start": "1540950",
    "end": "1546570"
  },
  {
    "text": "precisely we measured the the standard deviations of the two data sets and Amazon Aurora is more than 10 times more",
    "start": "1546570",
    "end": "1553470"
  },
  {
    "text": "consistent than Postgres also the average response time is about 2.9 times",
    "start": "1553470",
    "end": "1559169"
  },
  {
    "text": "lower so Aurora delivers much faster response times with with much less",
    "start": "1559169",
    "end": "1564210"
  },
  {
    "text": "variability now you might wonder what's going on with those Postgres numbers you see these big spikes cycling through",
    "start": "1564210",
    "end": "1570270"
  },
  {
    "text": "there the time graph there and what you see is the impact of database checkpoints which",
    "start": "1570270",
    "end": "1576550"
  },
  {
    "text": "Postgres does to ensure that data dirty pages in memory are periodically written to storage as Mark described earlier to",
    "start": "1576550",
    "end": "1583330"
  },
  {
    "text": "ensure recovery times don't aren't extend it too long and so of course",
    "start": "1583330",
    "end": "1588370"
  },
  {
    "text": "during a checkpoint postgrads does a bunch of extra writes which slows down user transactions and that's where that",
    "start": "1588370",
    "end": "1594730"
  },
  {
    "text": "variability comes from each of those spikes is another post post checkpoint kicking in let's go back to PG bench to",
    "start": "1594730",
    "end": "1603520"
  },
  {
    "start": "1600000",
    "end": "1639000"
  },
  {
    "text": "look at consistent performance based on throughput and this graph higher is better we're showing you throughput over",
    "start": "1603520",
    "end": "1610000"
  },
  {
    "text": "time while running PG bench again in TVC belike mode now we ran each database at",
    "start": "1610000",
    "end": "1616240"
  },
  {
    "text": "the optimal number of clients to deliver the max throughput for that database and plotted the variability in throughput",
    "start": "1616240",
    "end": "1622180"
  },
  {
    "text": "over time as you can see Amazon Aurora was much more consistent just like the",
    "start": "1622180",
    "end": "1627670"
  },
  {
    "text": "response time graph and delivered significantly higher throughput based on standard deviation Aurora is about three",
    "start": "1627670",
    "end": "1634510"
  },
  {
    "text": "times more consistent than postgrads in this test in this test we compared how",
    "start": "1634510",
    "end": "1642160"
  },
  {
    "text": "each database scales in terms of throughput as the database size scales using again the sis bench write only",
    "start": "1642160",
    "end": "1648340"
  },
  {
    "text": "workload and you can see with the 10 gig database Aurora delivers about one and a half times better throughput with a",
    "start": "1648340",
    "end": "1654490"
  },
  {
    "text": "hundred gig database Aurora delivers about three times better throughput basically it's performance didn't drop",
    "start": "1654490",
    "end": "1660460"
  },
  {
    "text": "off as much as Postgres did however we're not really all that happy with",
    "start": "1660460",
    "end": "1665830"
  },
  {
    "text": "this result we'd like to get to the point where Amazon award doesn't show a significant drop-off at all as though as the",
    "start": "1665830",
    "end": "1672610"
  },
  {
    "text": "database size grows now in all the tests we've shown you we've tried to tune",
    "start": "1672610",
    "end": "1678310"
  },
  {
    "start": "1675000",
    "end": "1754000"
  },
  {
    "text": "Postgres to deliver the best possible performance results but one key part of that tuning is to reduce the number of",
    "start": "1678310",
    "end": "1684550"
  },
  {
    "text": "check points that occur during the test runs and you do that by increasing the duration between check points a",
    "start": "1684550",
    "end": "1691020"
  },
  {
    "text": "consequence of that is that it increases recovery time if there's a database failure this is because postgrads has to",
    "start": "1691020",
    "end": "1697660"
  },
  {
    "text": "start from the last checkpoint the last time it wrote all dirty pages from memory to storage and roll forward to",
    "start": "1697660",
    "end": "1703420"
  },
  {
    "text": "all the all records written since that last checkpoint the more wall to roll forward or right ahead log to roll forward the",
    "start": "1703420",
    "end": "1710020"
  },
  {
    "text": "longer recovery will take with Aurora there are no checkpoints so recovery",
    "start": "1710020",
    "end": "1715270"
  },
  {
    "text": "time is independent of checkpoints and it's independent of how many transactions are being processed per",
    "start": "1715270",
    "end": "1720280"
  },
  {
    "text": "second by the database so as you can see in the graph we increase the checkpoint time for Postgres and as we did that the",
    "start": "1720280",
    "end": "1727570"
  },
  {
    "text": "overall throughput increased but so did the recovery time so at the best throughput level for Postgres the",
    "start": "1727570",
    "end": "1733930"
  },
  {
    "text": "recovery time for Aurora was 85 times faster than for Postgres that's really a",
    "start": "1733930",
    "end": "1739930"
  },
  {
    "text": "quite a big difference if you're running a high throughput production system and the last thing to highlight there of",
    "start": "1739930",
    "end": "1745660"
  },
  {
    "text": "course is that recovery time for aurora was 1.2 seconds on average and the test program obviously a very fast recovery",
    "start": "1745660",
    "end": "1752950"
  },
  {
    "text": "time so to summarize what we've covered in last few slides we showed results from both PG bench and sis bench",
    "start": "1752950",
    "end": "1759180"
  },
  {
    "start": "1754000",
    "end": "1784000"
  },
  {
    "text": "demonstrating throughput two times two three times that of Postgres we showed data loading three times faster",
    "start": "1759180",
    "end": "1765850"
  },
  {
    "text": "we showed response time to be more than two times faster and both response time and throughput to be much more",
    "start": "1765850",
    "end": "1771790"
  },
  {
    "text": "consistent we showed throughput at larger scale databases to be three times faster and",
    "start": "1771790",
    "end": "1777160"
  },
  {
    "text": "we showed recovery speed to be much much faster due to the innovations in Amazon Aurora storage so the performance",
    "start": "1777160",
    "end": "1785860"
  },
  {
    "start": "1784000",
    "end": "1824000"
  },
  {
    "text": "results we reviewed are impressive I can tell you we're not done and I briefly",
    "start": "1785860",
    "end": "1791410"
  },
  {
    "text": "touched on how we're achieving those numbers but I'm going to hand it back to Marc now so he can tell you in a lot",
    "start": "1791410",
    "end": "1796540"
  },
  {
    "text": "more detail how we're delivering these results Thanks so I want to point out",
    "start": "1796540",
    "end": "1802000"
  },
  {
    "text": "that I'm the general manager of Amazon or for Postgres and RDS Postgres Postgres is a great product",
    "start": "1802000",
    "end": "1808000"
  },
  {
    "text": "Postgres is the fastest most efficient most durable open source database out there we just want to make it better so",
    "start": "1808000",
    "end": "1815200"
  },
  {
    "text": "having all those little slides where the blue is so much lower or farther to the left actually kind of hurts my heart a",
    "start": "1815200",
    "end": "1820810"
  },
  {
    "text": "little bit at the same time oh I'm okay having two children so",
    "start": "1820810",
    "end": "1827549"
  },
  {
    "start": "1824000",
    "end": "1845000"
  },
  {
    "text": "sorry so there's no magic to any of this okay you got to have the processor do",
    "start": "1827549",
    "end": "1833919"
  },
  {
    "text": "less work you have to do work more efficiently you have to do fewer lock operations you have to do fewer i/o",
    "start": "1833919",
    "end": "1839500"
  },
  {
    "text": "operations okay you have to reduce the latency path you have to use lock-free data structures so let's really quickly",
    "start": "1839500",
    "end": "1847150"
  },
  {
    "text": "look at child number 1 RTS Postgres so first off RTS Postgres runs is a",
    "start": "1847150",
    "end": "1852730"
  },
  {
    "text": "synchronous replica it has one primary and a synchronous standby for copies of the data are stored using Amazon EBS and",
    "start": "1852730",
    "end": "1861179"
  },
  {
    "text": "it's sorting to availability zones for reliability and this works great actually and I'm proud to say that even though",
    "start": "1861179",
    "end": "1868210"
  },
  {
    "text": "this is child number one this is the largest fleet of Postgres databases in the world by like an order of magnitude",
    "start": "1868210",
    "end": "1873220"
  },
  {
    "text": "and we're really really proud to reduce for our customers however this uses that",
    "start": "1873220",
    "end": "1878409"
  },
  {
    "text": "same monolithic backbone that the other conventional databases use well so how",
    "start": "1878409",
    "end": "1884110"
  },
  {
    "start": "1882000",
    "end": "1932000"
  },
  {
    "text": "does it work in Amazon Aurora well the first thing is we do things differently using that 4:6 form remember I talked",
    "start": "1884110",
    "end": "1890890"
  },
  {
    "text": "about that we reduce i/o network jitter in addition we boxcar logged records and",
    "start": "1890890",
    "end": "1896350"
  },
  {
    "text": "that's a fancy word for sorting rights into buckets which means that we actually do less iOS believe it or not",
    "start": "1896350",
    "end": "1902830"
  },
  {
    "text": "and smaller iOS in fact in our studies though in theory we're doing 6 times as",
    "start": "1902830",
    "end": "1909250"
  },
  {
    "text": "many iOS right each right has to go to 6 nodes in practice by the time you put it Box card together with the fact that",
    "start": "1909250",
    "end": "1916929"
  },
  {
    "text": "we're doing redo records and not data blocks we're doing 9 X less traffic now",
    "start": "1916929",
    "end": "1922090"
  },
  {
    "text": "when you're doing 9 X less traffic your network NIC is running at 11% what it used to run for the same transaction",
    "start": "1922090",
    "end": "1927549"
  },
  {
    "text": "load now I know what that says to you but what says to me is let's do more transactions so one of the ways to do",
    "start": "1927549",
    "end": "1934390"
  },
  {
    "start": "1932000",
    "end": "1993000"
  },
  {
    "text": "more transactions is to group them all together to put them together to figure out what's going on and this is actually",
    "start": "1934390",
    "end": "1940600"
  },
  {
    "text": "pretty clever the master database node is always keeping track of the furthest most future transaction that is achieved",
    "start": "1940600",
    "end": "1948039"
  },
  {
    "text": "durability and we call that because we're nerds volume durable logical sequence number or durable LSN now the",
    "start": "1948039",
    "end": "1955450"
  },
  {
    "text": "storage system underneath the database is independently man all of these iOS and in one of these",
    "start": "1955450",
    "end": "1960610"
  },
  {
    "text": "systems that's running a hundred thousand iOS a second it might have five or ten thousand transactions all hanging",
    "start": "1960610",
    "end": "1965890"
  },
  {
    "text": "out at one time and it's managing all of the rights for each of those so what it",
    "start": "1965890",
    "end": "1970960"
  },
  {
    "text": "does is it's as it's keeping track of those as these batches come back it can advance the durable LSN and big batches",
    "start": "1970960",
    "end": "1977590"
  },
  {
    "text": "and that's really efficient it can complete lots of transactions and so this batching both from the database",
    "start": "1977590",
    "end": "1984760"
  },
  {
    "text": "into the top of the storage system and from this the main database node out to the storage nodes is one of the main",
    "start": "1984760",
    "end": "1990580"
  },
  {
    "text": "ways that Amazon or Ora scales now because we're really",
    "start": "1990580",
    "end": "1995620"
  },
  {
    "start": "1993000",
    "end": "2067000"
  },
  {
    "text": "technical audience let's dive down into one of the storage nodes if you take nothing else away from this really busy",
    "start": "1995620",
    "end": "2002250"
  },
  {
    "text": "slide take away the fact that when the database wishes to commit a transaction the only thing it has to wait for is",
    "start": "2002250",
    "end": "2009090"
  },
  {
    "text": "items 1 & 2 which is it gets a batch along records it persists them to SSD",
    "start": "2009090",
    "end": "2015690"
  },
  {
    "text": "really quickly and it acts back to the database boom that's it we're done now all the other stuff which the bottom",
    "start": "2015690",
    "end": "2021210"
  },
  {
    "text": "half of your database does today and all the other stuff which our storage system does today is all handled asynchronously",
    "start": "2021210",
    "end": "2027030"
  },
  {
    "text": "by these storage nodes and that includes organizing records identifying gaps in the log gossiping with peers because",
    "start": "2027030",
    "end": "2034020"
  },
  {
    "text": "heck maybe I missed an i/o and I have to go get it from my peers coalescing those log records because of course there are",
    "start": "2034020",
    "end": "2039930"
  },
  {
    "text": "still data blocks coalescing log records into data blocks well it just handled a synchronously in the background",
    "start": "2039930",
    "end": "2046280"
  },
  {
    "text": "periodically staging all this into Amazon s3 and then also doing all sorts",
    "start": "2046280",
    "end": "2051360"
  },
  {
    "text": "of cool stuff where you can garbage collect old versions and where you can run integrity checks well I have an",
    "start": "2051360",
    "end": "2057450"
  },
  {
    "text": "array of 4 or 500 nodes out there that can do all sorts of things in my database which if I did them on my head",
    "start": "2057450",
    "end": "2062760"
  },
  {
    "text": "node would slow down my transaction right and I don't want to do that we",
    "start": "2062760",
    "end": "2068879"
  },
  {
    "start": "2067000",
    "end": "2130000"
  },
  {
    "text": "also did some innovations specific to Postgres in Aurora replicas now on a",
    "start": "2068880",
    "end": "2074520"
  },
  {
    "text": "typical Aurora instance a typical Postgres instance what happens is the",
    "start": "2074520",
    "end": "2080220"
  },
  {
    "text": "redo or wall file for your Postgres folks is shipped for the master to the replicas written to disk and then read",
    "start": "2080220",
    "end": "2086220"
  },
  {
    "text": "back from disk and applied to blocks oh wait those have to be read from disk written to disk there's all sorts of",
    "start": "2086220",
    "end": "2091409"
  },
  {
    "text": "stuff going on there that doesn't need to happen so when it applies it if it's already not in memory it has to read the",
    "start": "2091410",
    "end": "2097710"
  },
  {
    "text": "block well so now Aurora the blocks are shipped the redo records are shipped across the network no disc",
    "start": "2097710",
    "end": "2104760"
  },
  {
    "text": "involved at all they're applied to the cache pages and they don't need to be written out again the trick to be faster",
    "start": "2104760",
    "end": "2113730"
  },
  {
    "text": "is to do less it's not actually to be more clever and again I'm gonna hark back to that Oracle RAC analogy I made",
    "start": "2113730",
    "end": "2119910"
  },
  {
    "text": "earlier on the theory behind Oracle RAC is we're gonna be the cleverest people on the planet the theory behind Amazon",
    "start": "2119910",
    "end": "2126570"
  },
  {
    "text": "software is typically we're gonna be the simplest people on the planet so here's",
    "start": "2126570",
    "end": "2131820"
  },
  {
    "start": "2130000",
    "end": "2238000"
  },
  {
    "text": "another realization that actually came about halfway through the Aurora project which was that when you have a database",
    "start": "2131820",
    "end": "2137790"
  },
  {
    "text": "instance it's it has a shared buffer cache attached to it where all the blocks that are being held come in and when that database process crashes you",
    "start": "2137790",
    "end": "2145260"
  },
  {
    "text": "get what is known as the dreaded brown out and the brown out is where your application your database process",
    "start": "2145260",
    "end": "2150900"
  },
  {
    "text": "restarts it does its recovery however fast it does but your cache is cold now let's take a typical machine like in our",
    "start": "2150900",
    "end": "2157680"
  },
  {
    "text": "3.8 Excel on Amazon that's 200 gig of cache typically is how you'd run it your",
    "start": "2157680",
    "end": "2163980"
  },
  {
    "text": "transactions were running with that cache full and hot well now all of those transactions are actually hitting pages",
    "start": "2163980",
    "end": "2170550"
  },
  {
    "text": "that aren't in cache and even if you can read those back in at one gigabyte per second and by the way with random i/o is",
    "start": "2170550",
    "end": "2176610"
  },
  {
    "text": "the chances of that are pretty low but if you can even read them back unit one gigabyte per second your database is",
    "start": "2176610",
    "end": "2182550"
  },
  {
    "text": "experiencing severe degradation for over three minutes so what we did was we took",
    "start": "2182550",
    "end": "2188490"
  },
  {
    "text": "that buffer cache and we put it outside of the process so the database process crashes starts up and reconnects to the",
    "start": "2188490",
    "end": "2194880"
  },
  {
    "text": "buffer cache now those of you who are programmers in the in the audience are sitting there going no no that doesn't",
    "start": "2194880",
    "end": "2200940"
  },
  {
    "text": "work that doesn't work because that database processed when it was running actually had a lot of data structures in",
    "start": "2200940",
    "end": "2206430"
  },
  {
    "text": "that shared memory that it was modifying when it crashed so right when we come back up we go",
    "start": "2206430",
    "end": "2211530"
  },
  {
    "text": "through and we check and verify all those data structures any data structures which do not pass our tests",
    "start": "2211530",
    "end": "2217200"
  },
  {
    "text": "we discard any data structures which do we move this test typically runs in",
    "start": "2217200",
    "end": "2222220"
  },
  {
    "text": "under a second now the one thing that does get thrown out is blocks that were literally in the process of being",
    "start": "2222220",
    "end": "2227830"
  },
  {
    "text": "modified by code you know they were in an add instruction that's typically less than 1% of your cache so within a second",
    "start": "2227830",
    "end": "2234700"
  },
  {
    "text": "or two you have a 99% hotness in your cache now there's a new feature which is",
    "start": "2234700",
    "end": "2241270"
  },
  {
    "start": "2238000",
    "end": "2278000"
  },
  {
    "text": "being launched into Amazon or which is called database cloning and this came along it's it's it's brand-new it came",
    "start": "2241270",
    "end": "2248170"
  },
  {
    "text": "along and we started realizing what it means to have a storage system like this which is I got all these blocks out",
    "start": "2248170",
    "end": "2254349"
  },
  {
    "text": "there and I got these do this this big distributed system would it be nice to just be able to get a version of that",
    "start": "2254349",
    "end": "2260440"
  },
  {
    "text": "database that's you know the current database and get it in a second what if it's a six terabyte database how long",
    "start": "2260440",
    "end": "2266590"
  },
  {
    "text": "does it take you to restore it six terabytes snapshot I bet it's longer than a second so what",
    "start": "2266590",
    "end": "2272650"
  },
  {
    "text": "we do is we just take a very quick picture of the metadata of what those blocks are at and what versions they're",
    "start": "2272650",
    "end": "2278320"
  },
  {
    "start": "2278000",
    "end": "2393000"
  },
  {
    "text": "at and cloning in this first instant after you ran the clone command just",
    "start": "2278320",
    "end": "2283599"
  },
  {
    "text": "says hey the source database in the clone database bolt a blocks one through four and then what happens is as you",
    "start": "2283599",
    "end": "2289630"
  },
  {
    "text": "take rights and it notices for example page two in the first database and I think it's a page six in the second",
    "start": "2289630",
    "end": "2296710"
  },
  {
    "text": "database maybe those are ones where it's just right into the second one and it sits there and does what's called copy",
    "start": "2296710",
    "end": "2302349"
  },
  {
    "text": "on right now over time of course these things are going to diverge but a lot of time when you're doing dev tests or you",
    "start": "2302349",
    "end": "2308410"
  },
  {
    "text": "want to stand up something on your own then you don't really care how long it takes overtime you just care how long it takes",
    "start": "2308410",
    "end": "2314980"
  },
  {
    "text": "to get started the system also offers you another capability something that we",
    "start": "2314980",
    "end": "2321730"
  },
  {
    "text": "call online point in time restore now we all know that database systems are reliable and nodes are reliable and all",
    "start": "2321730",
    "end": "2328420"
  },
  {
    "text": "that but you know what's not that reliable humans humans will often accidentally forget a where clause on a",
    "start": "2328420",
    "end": "2334089"
  },
  {
    "text": "delete humans will accidentally update all your employee numbers to prime numbers humans will do bad things well",
    "start": "2334089",
    "end": "2341440"
  },
  {
    "text": "unfortunately while they were doing that all your other tables took transactions like credit card transactions that you",
    "start": "2341440",
    "end": "2347020"
  },
  {
    "text": "don't want to lose and you got to figure out so you do what you can do to get your data out and then you want to roll",
    "start": "2347020",
    "end": "2352240"
  },
  {
    "text": "your database back to a certain point remember how the storage system is transactional where you can",
    "start": "2352240",
    "end": "2358499"
  },
  {
    "text": "literally tell one of the storage nodes those green boxes hey can you please start giving me blocks as of this LSN",
    "start": "2358499",
    "end": "2364920"
  },
  {
    "text": "the one that's from 2:30 1 p.m. and 12 seconds and then you can notice when",
    "start": "2364920",
    "end": "2370470"
  },
  {
    "text": "you'd look at that oh wow no that was wrong we actually made three mistakes because that application",
    "start": "2370470",
    "end": "2375480"
  },
  {
    "text": "program went crazy let's roll it back to 2:20 1 p.m. and 70 and and 45 seconds something like that",
    "start": "2375480",
    "end": "2381509"
  },
  {
    "text": "doesn't matter and you can rewind multiple times until you get the exact point where you're",
    "start": "2381509",
    "end": "2387630"
  },
  {
    "text": "preserved as many of the transactions you can and yet you've overcome the human error so now what I'd like to do",
    "start": "2387630",
    "end": "2395460"
  },
  {
    "start": "2393000",
    "end": "2454000"
  },
  {
    "text": "is tell you a little bit about this new feature that we're adding to our TS called performance insights and we know",
    "start": "2395460",
    "end": "2402329"
  },
  {
    "text": "that looking into your database instance is important and we want to do more of it so I'd like to introduce Jeremiah",
    "start": "2402329",
    "end": "2409440"
  },
  {
    "text": "Wilton who's right here and Jeremiah has been writing code for databases since 1993 and he has a very distinguishing",
    "start": "2409440",
    "end": "2417059"
  },
  {
    "text": "characteristic which is he was the first DBA for amazon.com retail in 1997 and and he",
    "start": "2417059",
    "end": "2423239"
  },
  {
    "text": "lived see he's still there he then went and did database consulting at his own company and for those of you who are",
    "start": "2423239",
    "end": "2429960"
  },
  {
    "text": "Oracle aficionados he named his company or a600 consulting and then he did a",
    "start": "2429960",
    "end": "2435809"
  },
  {
    "text": "stint at blue gecko and now he's a principal engineer in the Amazon RDS team were thrilled davon backed he's",
    "start": "2435809",
    "end": "2441509"
  },
  {
    "text": "focused almost completely on this new feature performance insights thanks mark",
    "start": "2441509",
    "end": "2449269"
  },
  {
    "text": "so along with this great new edition of Aurora with Postgres compatibility we're",
    "start": "2454869",
    "end": "2463220"
  },
  {
    "text": "really excited about this feature that we're launching alongside it it's a new feature of the RDS platform and what",
    "start": "2463220",
    "end": "2470839"
  },
  {
    "text": "we're gonna try to provide is an intuitive way to tune database workloads even if you're not really a database",
    "start": "2470839",
    "end": "2476869"
  },
  {
    "text": "tuning expert or a tuning guru we've heard from lots of customers over the",
    "start": "2476869",
    "end": "2482450"
  },
  {
    "text": "years that we've been running RDS that they really like a lot of things about RDS the automation the backups the",
    "start": "2482450",
    "end": "2488990"
  },
  {
    "text": "upgrades the h.a the dr the point in time recovery and all that sort of stuff",
    "start": "2488990",
    "end": "2494869"
  },
  {
    "text": "but they'd like us to fill one gap that's been open for some number of years and that's the ability to provide",
    "start": "2494869",
    "end": "2500599"
  },
  {
    "text": "intuitive and guided tuning and so we",
    "start": "2500599",
    "end": "2506180"
  },
  {
    "text": "understood to try to fill that gap a lot of the customers that would be using it",
    "start": "2506180",
    "end": "2511730"
  },
  {
    "text": "wouldn't be expert DBAs or tuning experts so we decided that we would try",
    "start": "2511730",
    "end": "2516980"
  },
  {
    "text": "to design an approach to doing this that would be fairly intuitive with a single dashboard view that would naturally",
    "start": "2516980",
    "end": "2523520"
  },
  {
    "text": "expose performance problems happening in the database we started this some number",
    "start": "2523520",
    "end": "2531109"
  },
  {
    "start": "2527000",
    "end": "2578000"
  },
  {
    "text": "of months ago over the past year we've been improving visibility into RDS across all of the engines and we started",
    "start": "2531109",
    "end": "2537619"
  },
  {
    "text": "doing that with a new feature called enhanced monitoring this year this feature provides detailed metrics from",
    "start": "2537619",
    "end": "2543800"
  },
  {
    "text": "the underlying OS from the operating system it gives you the kind of data that you're used to getting if you're if",
    "start": "2543800",
    "end": "2551210"
  },
  {
    "text": "you're familiar with working at the command line with Linux tools like vmstat and io stat and in addition to",
    "start": "2551210",
    "end": "2558859"
  },
  {
    "text": "that enhanced monitoring includes another kind of nice feature which is a process and thread list and with that",
    "start": "2558859",
    "end": "2565430"
  },
  {
    "text": "we're able to display for you on the console something very similar to the Linux top command",
    "start": "2565430",
    "end": "2571770"
  },
  {
    "text": "which lets you see which database processes are consuming the most CPU and the most memory but OS stats are not",
    "start": "2571770",
    "end": "2581700"
  },
  {
    "start": "2578000",
    "end": "2600000"
  },
  {
    "text": "enough for tuning databases so performance insights is the next step and it goes beyond operating system",
    "start": "2581700",
    "end": "2588210"
  },
  {
    "text": "metrics and dives deep into the database engine itself and in order to show you a",
    "start": "2588210",
    "end": "2595200"
  },
  {
    "text": "little bit about what we've done I'm going to do a live demo looks pretty",
    "start": "2595200",
    "end": "2605250"
  },
  {
    "start": "2600000",
    "end": "2736000"
  },
  {
    "text": "good so let's look at how performance",
    "start": "2605250",
    "end": "2610849"
  },
  {
    "text": "insights helps customers find the root causes of problems as you expect from",
    "start": "2610849",
    "end": "2617070"
  },
  {
    "text": "something that shows you information about database tuning we show you the database engine metrics that you're",
    "start": "2617070",
    "end": "2622590"
  },
  {
    "text": "accustomed to getting with a third party",
    "start": "2622590",
    "end": "2628470"
  },
  {
    "text": "database tuning tools and things like that so up here on this top graph it shows",
    "start": "2628470",
    "end": "2635220"
  },
  {
    "text": "these kind of traditional tuning metrics that you see with most tuning tuning tools the things that count up stuff",
    "start": "2635220",
    "end": "2641220"
  },
  {
    "text": "that happens in the database numbers of reads numbers of writes numbers of connections amount of CPU use things",
    "start": "2641220",
    "end": "2647760"
  },
  {
    "text": "like that in this top graph you can choose which metrics you want to display each of the database engines in RDS have",
    "start": "2647760",
    "end": "2654869"
  },
  {
    "text": "hundreds of counter metrics that are that are available in them and Postgres",
    "start": "2654869",
    "end": "2660000"
  },
  {
    "text": "is the same and so as the so is Aurora with Postgres compatibility so that's",
    "start": "2660000",
    "end": "2667560"
  },
  {
    "text": "sort of like the first part of performance insights but we've decided that we'd like to innovate beyond those",
    "start": "2667560",
    "end": "2673050"
  },
  {
    "text": "traditional metrics to provide better guided discovery of performance problems performance insights centers around a",
    "start": "2673050",
    "end": "2680220"
  },
  {
    "text": "new core metric called database load it's a metric that makes performance",
    "start": "2680220",
    "end": "2686369"
  },
  {
    "text": "bottlenecks stand out and it's meant to",
    "start": "2686369",
    "end": "2692369"
  },
  {
    "text": "help guide users to the root causes of problems so database load is in this",
    "start": "2692369",
    "end": "2698490"
  },
  {
    "text": "middle graph and its front and center in this performance insights you can see by",
    "start": "2698490",
    "end": "2703850"
  },
  {
    "text": "looking at this sort of how graphing this metric tells you how saturated the",
    "start": "2703850",
    "end": "2709280"
  },
  {
    "text": "database says you can see that at this time the database is more saturated than it is at this time or at this time",
    "start": "2709280",
    "end": "2715520"
  },
  {
    "text": "during the time frame that's that's displayed so the other cool thing about",
    "start": "2715520",
    "end": "2720830"
  },
  {
    "text": "it is because we've sliced this by the different kinds of ways that load is",
    "start": "2720830",
    "end": "2726950"
  },
  {
    "text": "being expended in the database you can see what's responsible for most of the load in the database by looking at the",
    "start": "2726950",
    "end": "2732350"
  },
  {
    "text": "different colors that that graph of load is made up of in this example that we're",
    "start": "2732350",
    "end": "2739970"
  },
  {
    "text": "looking at right now you can see that we're looking at database that is somewhat heavily loaded compared to the",
    "start": "2739970",
    "end": "2746360"
  },
  {
    "text": "number of V CPUs that are available you can see that we've we have a horizontal line across the graph that shows you the",
    "start": "2746360",
    "end": "2752060"
  },
  {
    "text": "number of V CPUs on the instance in this case it's about before I think and you can see that when you look at the",
    "start": "2752060",
    "end": "2757820"
  },
  {
    "text": "database load which is really actually a metric that measures concurrency at its",
    "start": "2757820",
    "end": "2764150"
  },
  {
    "text": "heart you can see that the degree of concurrency at certain points in time is greater than the number of V CPUs on the",
    "start": "2764150",
    "end": "2770240"
  },
  {
    "text": "instance it doesn't necessarily mean that you've saturated the CPU on the instance but it does tell you something",
    "start": "2770240",
    "end": "2776180"
  },
  {
    "text": "useful which is that you are running with more sessions and more users active in the database at that moment then you",
    "start": "2776180",
    "end": "2782720"
  },
  {
    "text": "have these CPUs in this new UI we have",
    "start": "2782720",
    "end": "2789650"
  },
  {
    "start": "2786000",
    "end": "2851000"
  },
  {
    "text": "the ability to zoom in to the five-minute level which is what we're looking at right now but you can",
    "start": "2789650",
    "end": "2796430"
  },
  {
    "text": "actually zoom out to a variety of levels up to 35 days which is the retention",
    "start": "2796430",
    "end": "2801590"
  },
  {
    "text": "period for the performance data so we zoomed out to one hour just now to the",
    "start": "2801590",
    "end": "2806690"
  },
  {
    "text": "60 minutes so you can see a nice history of how workload has been transpiring on",
    "start": "2806690",
    "end": "2813110"
  },
  {
    "text": "this database by default in this middle graph here we see the database load",
    "start": "2813110",
    "end": "2818270"
  },
  {
    "text": "broken down by weight event what that does is tell you the type of activity that's consuming belowed but you can",
    "start": "2818270",
    "end": "2823940"
  },
  {
    "text": "also choose to break down that load by any of a variety of other dimensions besides weight event you can break it",
    "start": "2823940",
    "end": "2829400"
  },
  {
    "text": "down by sequel statement and that tells you which sequel statements are dominate the load you can break it down by hosts",
    "start": "2829400",
    "end": "2837289"
  },
  {
    "text": "that are connecting to the database the client machines connecting to the database and that tells you which client machine is dominating the load or you",
    "start": "2837289",
    "end": "2845119"
  },
  {
    "text": "can break it down by users you can see which user is responsible for most of the load now going back to weights below",
    "start": "2845119",
    "end": "2856519"
  },
  {
    "start": "2851000",
    "end": "3123000"
  },
  {
    "text": "the load chart below this database load chart you can see a list of the top sequel statements and that's ordered by",
    "start": "2856519",
    "end": "2862789"
  },
  {
    "text": "again our core central metric in performance insights which is a database",
    "start": "2862789",
    "end": "2868819"
  },
  {
    "text": "load from this in this list you can see which sequel is most responsible for the",
    "start": "2868819",
    "end": "2874249"
  },
  {
    "text": "load in the database and which type of activity is causing each one of those",
    "start": "2874249",
    "end": "2880249"
  },
  {
    "text": "sequel statements to consume load if you look at this it's kind of interesting so if you look up here here's the legend of",
    "start": "2880249",
    "end": "2885979"
  },
  {
    "text": "colors and you can see that blue represents CPU if you go down here and look at the sequel statements you might",
    "start": "2885979",
    "end": "2892069"
  },
  {
    "text": "wonder to yourself who is who's using all that CPU who's responsible for all that blue in our load graph well it's",
    "start": "2892069",
    "end": "2898339"
  },
  {
    "text": "pretty pretty easy to pick out who it is it's this one select foo / n / n here well it turns",
    "start": "2898339",
    "end": "2904880"
  },
  {
    "text": "out I I did that so that I could demonstrate a session and heavily consuming CPU that's a function that I",
    "start": "2904880",
    "end": "2910880"
  },
  {
    "text": "wrote in in Postgres and by the way this is connected directly to an Aurora",
    "start": "2910880",
    "end": "2916269"
  },
  {
    "text": "cluster which is Postgres compatibility",
    "start": "2916269",
    "end": "2922459"
  },
  {
    "text": "so it got the function is just in an infinite loop calculating the square",
    "start": "2922459",
    "end": "2928819"
  },
  {
    "text": "root of a random number which tends to run the CPU up so yeah you can see that there so this is to help guide you",
    "start": "2928819",
    "end": "2935029"
  },
  {
    "text": "towards finding which sequel statements are responsible for exerting certain types of load on your database it's hard",
    "start": "2935029",
    "end": "2943759"
  },
  {
    "text": "to miss that when you're looking at weights as a dimension here is a big orange and if you look at orange up here on the legend it says unknown which is a",
    "start": "2943759",
    "end": "2950539"
  },
  {
    "text": "little bit sad to look at when you're looking at a tuning tool and the reason that that's there is because right now the Postgres sequel compatible kernel is",
    "start": "2950539",
    "end": "2957559"
  },
  {
    "text": "not yet 100% instrumented with weight events as we add instrumentation to the",
    "start": "2957559",
    "end": "2962630"
  },
  {
    "text": "system the amount of that unknown time eventually reach zero and we'll be able",
    "start": "2962630",
    "end": "2968580"
  },
  {
    "text": "to in this tool account for all of the load that occurs in in a Aurora database",
    "start": "2968580",
    "end": "2975270"
  },
  {
    "text": "so that when you look at this tool you'll be able to identify exactly what types of functions are responsible for",
    "start": "2975270",
    "end": "2981390"
  },
  {
    "text": "all of the load across your entire workload in the database you might have also have noticed that some of the",
    "start": "2981390",
    "end": "2987240"
  },
  {
    "text": "sequel statements down here below have question marks next to them in the where",
    "start": "2987240",
    "end": "2992520"
  },
  {
    "text": "clause instead of real values and that's because what we do is normalize large",
    "start": "2992520",
    "end": "2998070"
  },
  {
    "text": "numbers of very similar sequel statements the kind of sequel statement that only varies by the where clause",
    "start": "2998070",
    "end": "3003560"
  },
  {
    "text": "like where ID equals value and where we're normalizing all of those hundreds",
    "start": "3003560",
    "end": "3011720"
  },
  {
    "text": "and hundreds of different versions of very similar sequel up into a single logical sequel called the digest and the",
    "start": "3011720",
    "end": "3018110"
  },
  {
    "text": "reason we do that is so that we can show you the real impact of that sequel in total on this screen so if you want to",
    "start": "3018110",
    "end": "3025520"
  },
  {
    "text": "know what the sequels that are actually comprising each one of those digests look like you can actually just drill down into it and you can see here's the",
    "start": "3025520",
    "end": "3032330"
  },
  {
    "text": "parent and here are all the children now in this case all the children have are using just about the same amount of load",
    "start": "3032330",
    "end": "3039860"
  },
  {
    "text": "so in total they're more or less country appear to be contributing equally to the to the parent but it might be that when",
    "start": "3039860",
    "end": "3047090"
  },
  {
    "text": "you open that sequel up you'd actually see that maybe one or two different types of permutations of that sequel",
    "start": "3047090",
    "end": "3052550"
  },
  {
    "text": "might be the more expensive ones and then that would lead you down the path of going and paying attention to that particular sequel statement that uses",
    "start": "3052550",
    "end": "3059420"
  },
  {
    "text": "those predicates rather than the sequel statements that don't use those predicates so again this tool is designed to help guide you to the root",
    "start": "3059420",
    "end": "3065960"
  },
  {
    "text": "cause in a really quick and effective way again even if you're not tuning guru",
    "start": "3065960",
    "end": "3072220"
  },
  {
    "text": "so once you've selected one digest there's one other kind of interesting thing to notice about the UI if you",
    "start": "3072220",
    "end": "3077540"
  },
  {
    "text": "notice how the load graph has changed now that we've selected one of the sequel digests the load graph now shows",
    "start": "3077540",
    "end": "3083030"
  },
  {
    "text": "only what that one sequel digest contributes to the database load overall so you can see now that we've selected",
    "start": "3083030",
    "end": "3089540"
  },
  {
    "text": "that one sequel digest and drilled into it the view of the database load now shows is now colored only in the areas",
    "start": "3089540",
    "end": "3098360"
  },
  {
    "text": "representing the load that that that that sequel represents we have flyover",
    "start": "3098360",
    "end": "3104300"
  },
  {
    "text": "so you can move your cursor over and see exactly what values are occurring at any given time in all of the different",
    "start": "3104300",
    "end": "3110570"
  },
  {
    "text": "metrics so that's a sort of a quick tour of performance insights unfortunately we",
    "start": "3110570",
    "end": "3117050"
  },
  {
    "text": "have time to drill into a whole lot more of the of the capabilities but I'll tell",
    "start": "3117050",
    "end": "3125540"
  },
  {
    "start": "3123000",
    "end": "3131000"
  },
  {
    "text": "you one or two things other things about it before I before I finish up so",
    "start": "3125540",
    "end": "3133010"
  },
  {
    "text": "performance insights has a lot of other great features besides the ones I just got to show you now other things that it",
    "start": "3133010",
    "end": "3139910"
  },
  {
    "text": "has are lock detection to be able to determine who is blocking and who is waiting for locks and who is the",
    "start": "3139910",
    "end": "3145940"
  },
  {
    "text": "ultimate holder of that lock chain and what they're doing at that time and why they're responsible for doing that thing",
    "start": "3145940",
    "end": "3152740"
  },
  {
    "text": "execution plans obviously when you drill down into those sequel statements you're gonna want to be able to see what execution plans those those those are",
    "start": "3152740",
    "end": "3159560"
  },
  {
    "text": "running and this whole thing is API based this console is doing nothing but",
    "start": "3159560",
    "end": "3164690"
  },
  {
    "text": "calling the public API to performance insights and what that means is that you can develop software that runs against",
    "start": "3164690",
    "end": "3171260"
  },
  {
    "text": "this and build your own monitoring tools or your own alarming tools or anything that you want around the data that we're emitting via performance insights this",
    "start": "3171260",
    "end": "3178640"
  },
  {
    "text": "feature is included an RDS at no additional charge by default it includes 35 days of",
    "start": "3178640",
    "end": "3184760"
  },
  {
    "text": "performance data retention and right now we're making it available initially on the Postgres sequel compatible edition",
    "start": "3184760",
    "end": "3191660"
  },
  {
    "text": "of aurora but you can expect it to cover the remaining RDS databases in our suite",
    "start": "3191660",
    "end": "3196910"
  },
  {
    "text": "over the course of the year of 2017 so if you are participating in the preview",
    "start": "3196910",
    "end": "3202760"
  },
  {
    "text": "of the Postgres sequel compatible edition of aurora make sure you ask your tam or your AWS representative to",
    "start": "3202760",
    "end": "3210140"
  },
  {
    "text": "request to also be white listed for the preview of performance insights and if you don't have a direct contact in AWS",
    "start": "3210140",
    "end": "3218090"
  },
  {
    "text": "that you work with day-in day-out we'll be providing you a way to sign up for that preview on online on",
    "start": "3218090",
    "end": "3226370"
  },
  {
    "text": "on the console for aura as well so that's about it for performance insights I'm gonna hand control back to Mark",
    "start": "3226370",
    "end": "3235570"
  },
  {
    "text": "Jeremiah and I have been talking about that feature for quite some time and I'm so excited to see it out there and this",
    "start": "3240220",
    "end": "3246830"
  },
  {
    "text": "is just the beginning of a multi-year thing we're gonna be doing so now I'm",
    "start": "3246830",
    "end": "3252230"
  },
  {
    "start": "3250000",
    "end": "3393000"
  },
  {
    "text": "gonna spend a couple seconds reviewing our roadmap and I'd really like to get to questions and help you out so the",
    "start": "3252230",
    "end": "3259400"
  },
  {
    "text": "things which we have on our roadmap at launch which is gonna be in the first half of next year",
    "start": "3259400",
    "end": "3264980"
  },
  {
    "text": "this is preview we're going into right now you know I want highlight it is 2x or faster on Postgres on most torque",
    "start": "3264980",
    "end": "3271880"
  },
  {
    "text": "loads there are certainly workloads it's gonna be exactly the same on such as the in-memory cache torque loads where it's",
    "start": "3271880",
    "end": "3277040"
  },
  {
    "text": "just the Postgres code working but most workloads that involve i/o it will be significantly faster it has all Postgres",
    "start": "3277040",
    "end": "3283970"
  },
  {
    "text": "features we already said that it's native it has all RDS for Postgres extensions a lot of you are gonna come",
    "start": "3283970",
    "end": "3290270"
  },
  {
    "text": "up afterwards and say does it have extension X and I'm gonna say wait is that an RDS Postgres it has AWS DMS",
    "start": "3290270",
    "end": "3297190"
  },
  {
    "text": "supported inbound replication now it's gonna eventually have DMS outbound and",
    "start": "3297190",
    "end": "3302240"
  },
  {
    "text": "will launch that as soon as we can it'll have up to 15 fit readable failover targets it'll have that instant",
    "start": "3302240",
    "end": "3308480"
  },
  {
    "text": "crash recovery in fact it'd be hard for me to offer the future without it and it's going to have security built in from the ground up",
    "start": "3308480",
    "end": "3314120"
  },
  {
    "text": "now there's other things on the slide we can talk about but that's those are the main features so when we think about",
    "start": "3314120",
    "end": "3320510"
  },
  {
    "text": "Amazon Aurora we think that it's secure with encryption at rest and in transit I am kms the all that stuff you've",
    "start": "3320510",
    "end": "3328010"
  },
  {
    "text": "gotten used to it's durable it has six copies at runtime with a copy going all the time to s3 eleven nines it's",
    "start": "3328010",
    "end": "3334790"
  },
  {
    "text": "available with automatic failover and read replicas it's convenient to load up with DMS or PG dump it's convenient to",
    "start": "3334790",
    "end": "3341840"
  },
  {
    "text": "use with the Amazon RDS click on the console when you get the preview it's one click to go create one it's now",
    "start": "3341840",
    "end": "3347330"
  },
  {
    "text": "compatible with two things which is even more fun and it has enterprise class",
    "start": "3347330",
    "end": "3352340"
  },
  {
    "text": "performance and enterprise class storage so now we're taking signups for the",
    "start": "3352340",
    "end": "3358820"
  },
  {
    "text": "preview now that URL on the page is not the world's most complicated URL to go sign up just",
    "start": "3358820",
    "end": "3364340"
  },
  {
    "text": "sign up for RDS slash Aurora or even to aws.amazon.com slash Aurora there's an",
    "start": "3364340",
    "end": "3369410"
  },
  {
    "text": "FAQ already put up there where you can get some questions answered and then there's these email addresses at the bottom which I would like and expect you",
    "start": "3369410",
    "end": "3376370"
  },
  {
    "text": "to use we are very passionate about this product and we would like to help you out so thank you so very much remember",
    "start": "3376370",
    "end": "3384020"
  },
  {
    "text": "to complete your evaluations and thank you",
    "start": "3384020",
    "end": "3390309"
  }
]