[
  {
    "start": "0",
    "end": "48000"
  },
  {
    "text": "- Hi, my name is John Terhune",
    "start": "6510",
    "end": "8040"
  },
  {
    "text": "and I'm a senior solutions\narchitect specialist",
    "start": "8040",
    "end": "10139"
  },
  {
    "text": "for DynamoDB.",
    "start": "10140",
    "end": "11700"
  },
  {
    "text": "Different databases excel",
    "start": "11700",
    "end": "13019"
  },
  {
    "text": "at supporting different access patterns.",
    "start": "13020",
    "end": "15030"
  },
  {
    "text": "DynamoDB, for example, is focused\non transactional workloads",
    "start": "15030",
    "end": "18480"
  },
  {
    "text": "and can provide single digit\nmillisecond performance",
    "start": "18480",
    "end": "20849"
  },
  {
    "text": "at any scale.",
    "start": "20850",
    "end": "22350"
  },
  {
    "text": "If you want to use that same\ndata for other purposes though,",
    "start": "22350",
    "end": "24930"
  },
  {
    "text": "such as analytics or\nbusiness intelligence,",
    "start": "24930",
    "end": "27570"
  },
  {
    "text": "adding a purpose-built data warehouse",
    "start": "27570",
    "end": "29100"
  },
  {
    "text": "like Amazon Redshift to your application,",
    "start": "29100",
    "end": "31290"
  },
  {
    "text": "allows for the best of both worlds.",
    "start": "31290",
    "end": "33420"
  },
  {
    "text": "Amazon DynamoDB zero-ETL integration",
    "start": "33420",
    "end": "35820"
  },
  {
    "text": "with Amazon Redshift makes\nkeeping data in sync simple.",
    "start": "35820",
    "end": "39239"
  },
  {
    "text": "In this video, I'll walk you through",
    "start": "39240",
    "end": "40590"
  },
  {
    "text": "how to set up a zero-ETL integration",
    "start": "40590",
    "end": "42540"
  },
  {
    "text": "and show you how to use Amazon Redshift",
    "start": "42540",
    "end": "44490"
  },
  {
    "text": "to make some complex queries\nagainst your DynamoDB data.",
    "start": "44490",
    "end": "47373"
  },
  {
    "start": "48000",
    "end": "96000"
  },
  {
    "text": "Let's get started.",
    "start": "48300",
    "end": "49353"
  },
  {
    "text": "As you can see here,",
    "start": "50190",
    "end": "51090"
  },
  {
    "text": "I've already created a DynamoDB table",
    "start": "51090",
    "end": "53070"
  },
  {
    "text": "to use for this demonstration.",
    "start": "53070",
    "end": "55260"
  },
  {
    "text": "I've also configured a few settings",
    "start": "55260",
    "end": "56820"
  },
  {
    "text": "that are required for\nzero-ETL to Redshift.",
    "start": "56820",
    "end": "59400"
  },
  {
    "text": "First, you can see",
    "start": "59400",
    "end": "60233"
  },
  {
    "text": "that I've turned on\npoint-in-time recovery.",
    "start": "60233",
    "end": "62670"
  },
  {
    "text": "Second, you can see that\nI've set up a resource policy",
    "start": "62670",
    "end": "64920"
  },
  {
    "text": "to allow zero-ETL permission for my table.",
    "start": "64920",
    "end": "68189"
  },
  {
    "text": "You can configure both of\nthese settings ahead of time",
    "start": "68190",
    "end": "70230"
  },
  {
    "text": "before setting up the connector,",
    "start": "70230",
    "end": "71610"
  },
  {
    "text": "but if you forget to or have any errors,",
    "start": "71610",
    "end": "73380"
  },
  {
    "text": "the setup process will help you fix them.",
    "start": "73380",
    "end": "75430"
  },
  {
    "text": "I've also loaded my table with data",
    "start": "76710",
    "end": "78390"
  },
  {
    "text": "from a public data set\nfrom the National Oceanic",
    "start": "78390",
    "end": "80970"
  },
  {
    "text": "and Atmospheric Administration.",
    "start": "80970",
    "end": "82950"
  },
  {
    "text": "This data has values for temperature,",
    "start": "82950",
    "end": "84719"
  },
  {
    "text": "pressure, wind, and precipitation",
    "start": "84720",
    "end": "86640"
  },
  {
    "text": "for different times and\nplaces around the earth.",
    "start": "86640",
    "end": "89490"
  },
  {
    "text": "With a high cardinality\npartition key like station ID,",
    "start": "89490",
    "end": "92159"
  },
  {
    "text": "DynamoDB could easily read",
    "start": "92160",
    "end": "93600"
  },
  {
    "text": "and write millions of\nthese records per second.",
    "start": "93600",
    "end": "96689"
  },
  {
    "start": "96000",
    "end": "207000"
  },
  {
    "text": "Let's say we wanna do a little bit more",
    "start": "96690",
    "end": "98310"
  },
  {
    "text": "with our data though.",
    "start": "98310",
    "end": "99479"
  },
  {
    "text": "I'll hop over to the Redshift console now.",
    "start": "99480",
    "end": "102270"
  },
  {
    "text": "Here, I've already created\na serverless namespace",
    "start": "102270",
    "end": "104609"
  },
  {
    "text": "and work group that we\ncan use in this demo.",
    "start": "104610",
    "end": "106810"
  },
  {
    "text": "Now I'll click on zero-ETL integrations",
    "start": "107820",
    "end": "109830"
  },
  {
    "text": "to create our connector.",
    "start": "109830",
    "end": "111840"
  },
  {
    "text": "I'll choose create DynamoDB\nintegration and give it a name.",
    "start": "111840",
    "end": "114812"
  },
  {
    "text": "Next, I'll select my table.",
    "start": "124890",
    "end": "126513"
  },
  {
    "text": "Finally, I'll specify my Redshift target.",
    "start": "135570",
    "end": "137913"
  },
  {
    "text": "Oops, looks like I have a\nproblem with my resource policy",
    "start": "144690",
    "end": "147390"
  },
  {
    "text": "and I forgot to enable case\nsensitivity in Redshift.",
    "start": "147390",
    "end": "150480"
  },
  {
    "text": "Thankfully, setup will help me fix this.",
    "start": "150480",
    "end": "152970"
  },
  {
    "text": "Here's the settings that'll be changed.",
    "start": "152970",
    "end": "154770"
  },
  {
    "text": "Once I say okay, I'll wait a few minutes",
    "start": "154770",
    "end": "156840"
  },
  {
    "text": "for the changes to take effect,\nand we can continue setup.",
    "start": "156840",
    "end": "159739"
  },
  {
    "text": "All done.",
    "start": "161670",
    "end": "162750"
  },
  {
    "text": "Now I can finish creating the integration.",
    "start": "162750",
    "end": "164850"
  },
  {
    "text": "Everything looks good,\nso I'll click create.",
    "start": "169830",
    "end": "172263"
  },
  {
    "text": "I'll need to wait for\nthis to finish creating,",
    "start": "173370",
    "end": "175230"
  },
  {
    "text": "then I can add my database.",
    "start": "175230",
    "end": "176703"
  },
  {
    "text": "I'll refresh to see if it's ready.",
    "start": "186030",
    "end": "187730"
  },
  {
    "text": "Now I can create my database\nfrom the integration.",
    "start": "194130",
    "end": "196863"
  },
  {
    "text": "I'll need to wait a few minutes",
    "start": "198210",
    "end": "199350"
  },
  {
    "text": "while the database is\ncreated and populated,",
    "start": "199350",
    "end": "201240"
  },
  {
    "text": "so let's fast forward a bit.",
    "start": "201240",
    "end": "202640"
  },
  {
    "text": "And it's active.",
    "start": "203880",
    "end": "205473"
  },
  {
    "text": "Now we can open Redshift Query editor v2",
    "start": "208140",
    "end": "210420"
  },
  {
    "text": "and connect to my database.",
    "start": "210420",
    "end": "211862"
  },
  {
    "text": "Once we're connected, we can see my table.",
    "start": "222810",
    "end": "225060"
  },
  {
    "text": "It was created as well.",
    "start": "225060",
    "end": "226263"
  },
  {
    "text": "First, let's do a simple\nstar select query.",
    "start": "236970",
    "end": "240000"
  },
  {
    "text": "You can see our data has three columns.",
    "start": "240000",
    "end": "242370"
  },
  {
    "text": "One represents our DynamoDB\npartition key, station,",
    "start": "242370",
    "end": "246060"
  },
  {
    "text": "one, our sort key, date,",
    "start": "246060",
    "end": "248489"
  },
  {
    "text": "and one represents the\nentire DynamoDB item in JSON.",
    "start": "248490",
    "end": "252180"
  },
  {
    "text": "This is using the super data type.",
    "start": "252180",
    "end": "254549"
  },
  {
    "text": "The super data type is used",
    "start": "254550",
    "end": "256079"
  },
  {
    "text": "to store semi-structured\ndata like our DynamoDB items.",
    "start": "256080",
    "end": "259739"
  },
  {
    "text": "Redshift can use Particle to\nnavigate into this super data.",
    "start": "259740",
    "end": "263610"
  },
  {
    "text": "Let's do a query that does that.",
    "start": "263610",
    "end": "265500"
  },
  {
    "text": "This query returns various\nvalues like temperature, data,",
    "start": "265500",
    "end": "268350"
  },
  {
    "text": "and location from within the super type.",
    "start": "268350",
    "end": "270350"
  },
  {
    "text": "Now let's take it a step further",
    "start": "271710",
    "end": "273210"
  },
  {
    "text": "and use a query that\nwould be very difficult",
    "start": "273210",
    "end": "274949"
  },
  {
    "text": "to do efficiently with DynamoDB alone.",
    "start": "274950",
    "end": "277233"
  },
  {
    "text": "Let's find which station",
    "start": "281070",
    "end": "282270"
  },
  {
    "text": "recorded the highest average temperature",
    "start": "282270",
    "end": "284129"
  },
  {
    "text": "within 100 kilometers of a given location.",
    "start": "284130",
    "end": "287020"
  },
  {
    "text": "With Redshift, this is simple.",
    "start": "290850",
    "end": "292140"
  },
  {
    "text": "I can see the highest\ntemperature recorded was 89.1,",
    "start": "292140",
    "end": "295153"
  },
  {
    "text": "and it was 96 kilometers from\nthe location I specified.",
    "start": "295153",
    "end": "298653"
  },
  {
    "text": "Now let's update this item in DynamoDB",
    "start": "300120",
    "end": "302400"
  },
  {
    "text": "and watch it move to Redshift.",
    "start": "302400",
    "end": "304229"
  },
  {
    "text": "We'll change that high temperature.",
    "start": "304230",
    "end": "305980"
  },
  {
    "text": "We'll query DynamoDB for that\nspecific station and date,",
    "start": "307410",
    "end": "310830"
  },
  {
    "text": "and we'll modify the average temperature,",
    "start": "310830",
    "end": "313212"
  },
  {
    "text": "to 89.6.",
    "start": "326300",
    "end": "328413"
  },
  {
    "text": "End-to-end data movement",
    "start": "329700",
    "end": "330840"
  },
  {
    "text": "typically takes about 15 to 30 minutes,",
    "start": "330840",
    "end": "333270"
  },
  {
    "text": "so we can fast forward a bit here as well.",
    "start": "333270",
    "end": "335370"
  },
  {
    "text": "Now let's run that query again.",
    "start": "336930",
    "end": "338479"
  },
  {
    "text": "You can see the average temperature",
    "start": "342630",
    "end": "343860"
  },
  {
    "text": "for that record has been updated.",
    "start": "343860",
    "end": "345509"
  },
  {
    "start": "347000",
    "end": "379000"
  },
  {
    "text": "Hopefully, this has shown\nyou just how easy it is",
    "start": "348240",
    "end": "350280"
  },
  {
    "text": "to set up a zero-ETL integration.",
    "start": "350280",
    "end": "352530"
  },
  {
    "text": "DynamoDB is a fantastic database",
    "start": "352530",
    "end": "354450"
  },
  {
    "text": "for transactional access patterns,",
    "start": "354450",
    "end": "356280"
  },
  {
    "text": "and with zero-ETL integrations\nto other data warehouses",
    "start": "356280",
    "end": "359400"
  },
  {
    "text": "and databases like Amazon\nRedshift and OpenSearch,",
    "start": "359400",
    "end": "362400"
  },
  {
    "text": "you can enable additional access patterns",
    "start": "362400",
    "end": "364410"
  },
  {
    "text": "on that same data using\npurpose-built databases.",
    "start": "364410",
    "end": "367380"
  },
  {
    "text": "Thanks for joining me today.",
    "start": "367380",
    "end": "368580"
  },
  {
    "text": "Again, I'm John Terhune,",
    "start": "368580",
    "end": "369689"
  },
  {
    "text": "a specialist solutions\narchitect for DynamoDB.",
    "start": "369690",
    "end": "372300"
  },
  {
    "text": "See you next time.",
    "start": "372300",
    "end": "373263"
  }
]