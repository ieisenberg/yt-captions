[
  {
    "text": "hello I'm Amit Lula from AWS today I'll",
    "start": "80",
    "end": "4319"
  },
  {
    "text": "introduce Amazon bedro flows and its new",
    "start": "4319",
    "end": "7639"
  },
  {
    "text": "capabilities whether you're new to flows",
    "start": "7639",
    "end": "10200"
  },
  {
    "text": "or looking to explore its latest",
    "start": "10200",
    "end": "12240"
  },
  {
    "text": "features this demo will help you",
    "start": "12240",
    "end": "14879"
  },
  {
    "text": "understand how to build sophisticated AI",
    "start": "14879",
    "end": "17119"
  },
  {
    "text": "workflows without writing code so let's",
    "start": "17119",
    "end": "20160"
  },
  {
    "text": "start with what is bedrock flows Bedrock",
    "start": "20160",
    "end": "22680"
  },
  {
    "text": "flows is a visual builder for creating",
    "start": "22680",
    "end": "24680"
  },
  {
    "text": "generative AI",
    "start": "24680",
    "end": "27359"
  },
  {
    "text": "workflows think of it as an orchestrator",
    "start": "27359",
    "end": "30039"
  },
  {
    "text": "for your AI applications helping you",
    "start": "30039",
    "end": "32398"
  },
  {
    "text": "build everything from simple chart Bots",
    "start": "32399",
    "end": "34680"
  },
  {
    "text": "to complex business",
    "start": "34680",
    "end": "37680"
  },
  {
    "text": "workflows so to show you more details",
    "start": "37680",
    "end": "40079"
  },
  {
    "text": "about the flows when we go into the",
    "start": "40079",
    "end": "42760"
  },
  {
    "text": "visual editor you will see many types of",
    "start": "42760",
    "end": "44960"
  },
  {
    "text": "nodes on the left you have nodes such as",
    "start": "44960",
    "end": "47920"
  },
  {
    "text": "prompt nodes for model",
    "start": "47920",
    "end": "51239"
  },
  {
    "text": "interactions you have knowledge based",
    "start": "51640",
    "end": "53719"
  },
  {
    "text": "nodes for retrieving",
    "start": "53719",
    "end": "55359"
  },
  {
    "text": "information condition node for making",
    "start": "55359",
    "end": "58280"
  },
  {
    "text": "decision Lambda function node for custom",
    "start": "58280",
    "end": "61519"
  },
  {
    "text": "logic execution AI Services node to",
    "start": "61519",
    "end": "65040"
  },
  {
    "text": "connect with AWS services and many other",
    "start": "65040",
    "end": "68040"
  },
  {
    "text": "types of nodes all you have to do is",
    "start": "68040",
    "end": "70920"
  },
  {
    "text": "simply drag and drop the node make the",
    "start": "70920",
    "end": "75920"
  },
  {
    "text": "configuration and then you're able to",
    "start": "75920",
    "end": "77799"
  },
  {
    "text": "connect the",
    "start": "77799",
    "end": "78920"
  },
  {
    "text": "node with any of these components",
    "start": "78920",
    "end": "81360"
  },
  {
    "text": "available on the visual screen so with",
    "start": "81360",
    "end": "83759"
  },
  {
    "text": "General availability flows introduces",
    "start": "83759",
    "end": "86200"
  },
  {
    "text": "two new",
    "start": "86200",
    "end": "87439"
  },
  {
    "text": "capabilities first enhance safety with",
    "start": "87439",
    "end": "90320"
  },
  {
    "text": "crails and second enhanced",
    "start": "90320",
    "end": "93720"
  },
  {
    "text": "traceability let's see these in action",
    "start": "93720",
    "end": "96159"
  },
  {
    "text": "with the real world scenario we'll build",
    "start": "96159",
    "end": "99240"
  },
  {
    "text": "an intelligent customer service flow for",
    "start": "99240",
    "end": "102119"
  },
  {
    "text": "a fictional company OCT tank and we'll",
    "start": "102119",
    "end": "104560"
  },
  {
    "text": "name it o",
    "start": "104560",
    "end": "106960"
  },
  {
    "text": "tank customer service",
    "start": "106960",
    "end": "110719"
  },
  {
    "text": "flow with the description",
    "start": "110719",
    "end": "113439"
  },
  {
    "text": "of this is my customer service flow for",
    "start": "113439",
    "end": "120399"
  },
  {
    "text": "OCT tank",
    "start": "120399",
    "end": "123600"
  },
  {
    "text": "queries once we create the",
    "start": "123600",
    "end": "126200"
  },
  {
    "text": "flow let's understand what will be the",
    "start": "126200",
    "end": "129399"
  },
  {
    "text": "components that we want to build so",
    "start": "129399",
    "end": "131280"
  },
  {
    "text": "first we will add a prompt",
    "start": "131280",
    "end": "134920"
  },
  {
    "text": "note to be able to interact with the",
    "start": "134920",
    "end": "138160"
  },
  {
    "text": "large language model so we'll Define a",
    "start": "138160",
    "end": "143000"
  },
  {
    "text": "model and as you can see here for the",
    "start": "145000",
    "end": "147959"
  },
  {
    "text": "new capability once you select a model",
    "start": "147959",
    "end": "150519"
  },
  {
    "text": "in the prompt node you're able to choose",
    "start": "150519",
    "end": "152920"
  },
  {
    "text": "an existing guardrail or you can click",
    "start": "152920",
    "end": "155560"
  },
  {
    "text": "on go to guardrails and create a new one",
    "start": "155560",
    "end": "158680"
  },
  {
    "text": "for this workflow interacting with",
    "start": "158680",
    "end": "161640"
  },
  {
    "text": "customer queries we will add a guardrail",
    "start": "161640",
    "end": "165400"
  },
  {
    "text": "which is existing called customer",
    "start": "165400",
    "end": "167319"
  },
  {
    "text": "service crail what this crail does is it",
    "start": "167319",
    "end": "170400"
  },
  {
    "text": "will mask customers personally",
    "start": "170400",
    "end": "172840"
  },
  {
    "text": "identifiable information such as name",
    "start": "172840",
    "end": "174840"
  },
  {
    "text": "and email so let's first use the prompt",
    "start": "174840",
    "end": "177879"
  },
  {
    "text": "node to add a classifier",
    "start": "177879",
    "end": "180920"
  },
  {
    "text": "what we will require this node to do is",
    "start": "180920",
    "end": "186920"
  },
  {
    "text": "classify user",
    "start": "186920",
    "end": "190560"
  },
  {
    "text": "input",
    "start": "191400",
    "end": "194400"
  },
  {
    "text": "into OCT",
    "start": "195840",
    "end": "197799"
  },
  {
    "text": "tank",
    "start": "197799",
    "end": "199879"
  },
  {
    "text": "for Oct Tank",
    "start": "199879",
    "end": "202840"
  },
  {
    "text": "Company",
    "start": "202840",
    "end": "204599"
  },
  {
    "text": "specific",
    "start": "204599",
    "end": "207480"
  },
  {
    "text": "queries and",
    "start": "207480",
    "end": "211760"
  },
  {
    "text": "generic",
    "start": "212360",
    "end": "214000"
  },
  {
    "text": "for",
    "start": "214000",
    "end": "216239"
  },
  {
    "text": "general",
    "start": "216239",
    "end": "219239"
  },
  {
    "text": "questions only respond",
    "start": "220040",
    "end": "223480"
  },
  {
    "text": "with",
    "start": "223480",
    "end": "226480"
  },
  {
    "text": "category user and we'll pass the user",
    "start": "226760",
    "end": "231280"
  },
  {
    "text": "input which will be input now you can",
    "start": "231280",
    "end": "234360"
  },
  {
    "text": "see as soon as we added input here we",
    "start": "234360",
    "end": "237760"
  },
  {
    "text": "have enabled one more field",
    "start": "237760",
    "end": "240439"
  },
  {
    "text": "so we will pass the user query and",
    "start": "240439",
    "end": "243079"
  },
  {
    "text": "connect it to the",
    "start": "243079",
    "end": "245519"
  },
  {
    "text": "input what we want here after",
    "start": "245519",
    "end": "250239"
  },
  {
    "text": "the input and output is connected is to",
    "start": "250239",
    "end": "253920"
  },
  {
    "text": "save this flow once we've saved the flow",
    "start": "253920",
    "end": "258280"
  },
  {
    "text": "we will try to run a simple",
    "start": "258280",
    "end": "260959"
  },
  {
    "text": "query hello help me track status of my",
    "start": "260959",
    "end": "268479"
  },
  {
    "text": "tank",
    "start": "268479",
    "end": "270880"
  },
  {
    "text": "order what we are expecting is for this",
    "start": "270880",
    "end": "274240"
  },
  {
    "text": "node to identify a category okay so it's",
    "start": "274240",
    "end": "278039"
  },
  {
    "text": "correctly identified the category to be",
    "start": "278039",
    "end": "279800"
  },
  {
    "text": "OCT tank let's try a generic query what",
    "start": "279800",
    "end": "283759"
  },
  {
    "text": "is the",
    "start": "283759",
    "end": "285880"
  },
  {
    "text": "population of the",
    "start": "285880",
    "end": "289639"
  },
  {
    "text": "UK as you can see to the question what",
    "start": "291280",
    "end": "294199"
  },
  {
    "text": "is the population of the UK it's come",
    "start": "294199",
    "end": "296320"
  },
  {
    "text": "back with the category as generic now",
    "start": "296320",
    "end": "299280"
  },
  {
    "text": "what we will do is we will add another",
    "start": "299280",
    "end": "302800"
  },
  {
    "text": "node which is condition node so that",
    "start": "302800",
    "end": "307880"
  },
  {
    "text": "when we have identified a category we",
    "start": "307880",
    "end": "310800"
  },
  {
    "text": "can root the request to either retrieve",
    "start": "310800",
    "end": "314680"
  },
  {
    "text": "the information from the company sources",
    "start": "314680",
    "end": "318520"
  },
  {
    "text": "or to track an order status for Oct tank",
    "start": "318520",
    "end": "321520"
  },
  {
    "text": "and if it's a generic query we will pass",
    "start": "321520",
    "end": "324120"
  },
  {
    "text": "it to the large language model prompt",
    "start": "324120",
    "end": "326639"
  },
  {
    "text": "node to reply back with an answer so in",
    "start": "326639",
    "end": "329720"
  },
  {
    "text": "the condition node we will add a",
    "start": "329720",
    "end": "333000"
  },
  {
    "text": "condition condition input equal",
    "start": "333000",
    "end": "338800"
  },
  {
    "text": "to OCT",
    "start": "338800",
    "end": "340680"
  },
  {
    "text": "tank in which case let's add a knowledge",
    "start": "340680",
    "end": "345479"
  },
  {
    "text": "base whereby when the condition is",
    "start": "345479",
    "end": "349479"
  },
  {
    "text": "chosen as OCT tank it will go to the",
    "start": "349479",
    "end": "351560"
  },
  {
    "text": "knowledge base node I will select an",
    "start": "351560",
    "end": "354560"
  },
  {
    "text": "existing knowledge base which has the",
    "start": "354560",
    "end": "357680"
  },
  {
    "text": "data for orders as as you can see here",
    "start": "357680",
    "end": "360960"
  },
  {
    "text": "it consists of order ID the date",
    "start": "360960",
    "end": "364840"
  },
  {
    "text": "customer email product name and some",
    "start": "364840",
    "end": "367680"
  },
  {
    "text": "information about the shipping method",
    "start": "367680",
    "end": "369400"
  },
  {
    "text": "and status now once we've connected the",
    "start": "369400",
    "end": "372560"
  },
  {
    "text": "knowledge Bas we will choose to generate",
    "start": "372560",
    "end": "375160"
  },
  {
    "text": "the response based on the retrieve",
    "start": "375160",
    "end": "376880"
  },
  {
    "text": "results can choose a",
    "start": "376880",
    "end": "380560"
  },
  {
    "text": "model and we can also apply guardrail on",
    "start": "380599",
    "end": "384599"
  },
  {
    "text": "the no type knowledge base so once we",
    "start": "384599",
    "end": "388240"
  },
  {
    "text": "selected this we need to pass the user",
    "start": "388240",
    "end": "391080"
  },
  {
    "text": "query as well which is the original",
    "start": "391080",
    "end": "393440"
  },
  {
    "text": "query and that we will connect it here",
    "start": "393440",
    "end": "397039"
  },
  {
    "text": "to be able to view the response or the",
    "start": "397039",
    "end": "399440"
  },
  {
    "text": "output we will connect this to an output",
    "start": "399440",
    "end": "404800"
  },
  {
    "text": "node the second condition which will be",
    "start": "405039",
    "end": "409759"
  },
  {
    "text": "if it's not OCT tank it's a generic",
    "start": "409759",
    "end": "412199"
  },
  {
    "text": "condition that is when we want to pass",
    "start": "412199",
    "end": "416280"
  },
  {
    "text": "this",
    "start": "416280",
    "end": "418199"
  },
  {
    "text": "information to another",
    "start": "418199",
    "end": "420879"
  },
  {
    "text": "prompt so we will choose the prompt",
    "start": "420879",
    "end": "425960"
  },
  {
    "text": "here we'll select the guardrail and we",
    "start": "425960",
    "end": "429319"
  },
  {
    "text": "will enter the information",
    "start": "429319",
    "end": "432440"
  },
  {
    "text": "as give",
    "start": "432440",
    "end": "435080"
  },
  {
    "text": "um a",
    "start": "435080",
    "end": "436840"
  },
  {
    "text": "synct answer in",
    "start": "436840",
    "end": "440720"
  },
  {
    "text": "a professional",
    "start": "440720",
    "end": "443720"
  },
  {
    "text": "tone",
    "start": "443720",
    "end": "445960"
  },
  {
    "text": "for query",
    "start": "445960",
    "end": "449960"
  },
  {
    "text": "input once we've connected this we will",
    "start": "451080",
    "end": "455319"
  },
  {
    "text": "again connect the user query to the",
    "start": "455319",
    "end": "458000"
  },
  {
    "text": "input and we will finally add an output",
    "start": "458000",
    "end": "463400"
  },
  {
    "text": "node so to visualize this first we will",
    "start": "466120",
    "end": "470240"
  },
  {
    "text": "categorize the",
    "start": "470240",
    "end": "472560"
  },
  {
    "text": "information once the information has",
    "start": "472560",
    "end": "474840"
  },
  {
    "text": "been",
    "start": "474840",
    "end": "475720"
  },
  {
    "text": "categorized we will pass that to the",
    "start": "475720",
    "end": "478159"
  },
  {
    "text": "condition input once we have have the",
    "start": "478159",
    "end": "479960"
  },
  {
    "text": "condition input it will either be OCT",
    "start": "479960",
    "end": "483599"
  },
  {
    "text": "tank or generic when it's OCT tank it",
    "start": "483599",
    "end": "485840"
  },
  {
    "text": "will flow to the knowledge space which",
    "start": "485840",
    "end": "488720"
  },
  {
    "text": "will retrieve the information and",
    "start": "488720",
    "end": "491159"
  },
  {
    "text": "respond back and if it's not OCT tank it",
    "start": "491159",
    "end": "495120"
  },
  {
    "text": "will be generic if it's generic it'll go",
    "start": "495120",
    "end": "497360"
  },
  {
    "text": "to prompt node 2 where we are passing",
    "start": "497360",
    "end": "500400"
  },
  {
    "text": "the user input as it is and we're asking",
    "start": "500400",
    "end": "504159"
  },
  {
    "text": "it to give us a sync response in",
    "start": "504159",
    "end": "505800"
  },
  {
    "text": "professional tone so we will save this",
    "start": "505800",
    "end": "508840"
  },
  {
    "text": "first one once it is saved you will test",
    "start": "508840",
    "end": "511759"
  },
  {
    "text": "out a few",
    "start": "511759",
    "end": "513080"
  },
  {
    "text": "scenarios tell me the status",
    "start": "513080",
    "end": "518120"
  },
  {
    "text": "of my OCT tank",
    "start": "518120",
    "end": "521719"
  },
  {
    "text": "order the order ID now if you recollect",
    "start": "521719",
    "end": "525080"
  },
  {
    "text": "one of the new capabilities we've added",
    "start": "525080",
    "end": "527120"
  },
  {
    "text": "here is to show the tracing so to",
    "start": "527120",
    "end": "530959"
  },
  {
    "text": "understand which part of the flow was",
    "start": "530959",
    "end": "533240"
  },
  {
    "text": "executed in conditions we will click on",
    "start": "533240",
    "end": "535519"
  },
  {
    "text": "show trace as you can see here this will",
    "start": "535519",
    "end": "538680"
  },
  {
    "text": "give you a lot of information including",
    "start": "538680",
    "end": "541839"
  },
  {
    "text": "the time that it took to execute each",
    "start": "541839",
    "end": "544480"
  },
  {
    "text": "node when we go into the node it will",
    "start": "544480",
    "end": "547680"
  },
  {
    "text": "give us the input and output details and",
    "start": "547680",
    "end": "550480"
  },
  {
    "text": "then eventually also the flow that was",
    "start": "550480",
    "end": "553200"
  },
  {
    "text": "executed along with the input and output",
    "start": "553200",
    "end": "556120"
  },
  {
    "text": "so the input node had the user query",
    "start": "556120",
    "end": "559399"
  },
  {
    "text": "tell me the status of OCT tank order",
    "start": "559399",
    "end": "561959"
  },
  {
    "text": "with the order",
    "start": "561959",
    "end": "563320"
  },
  {
    "text": "ID the output node for the first part",
    "start": "563320",
    "end": "566480"
  },
  {
    "text": "which was categorization came back as",
    "start": "566480",
    "end": "568480"
  },
  {
    "text": "OCT tank which means it executed the",
    "start": "568480",
    "end": "571959"
  },
  {
    "text": "knowledge based node and the output of",
    "start": "571959",
    "end": "574320"
  },
  {
    "text": "the knowledge based node was according",
    "start": "574320",
    "end": "575839"
  },
  {
    "text": "to the search results the status of",
    "start": "575839",
    "end": "577519"
  },
  {
    "text": "order is delivered so the output was",
    "start": "577519",
    "end": "580040"
  },
  {
    "text": "passed as it is and the response that we",
    "start": "580040",
    "end": "582959"
  },
  {
    "text": "saw at the end of the flow was the same",
    "start": "582959",
    "end": "586240"
  },
  {
    "text": "if we try to run a generic query such as",
    "start": "586240",
    "end": "591079"
  },
  {
    "text": "explain AWS",
    "start": "591079",
    "end": "594639"
  },
  {
    "text": "VPC we've explained the show tracing",
    "start": "595880",
    "end": "598760"
  },
  {
    "text": "capability however if you recollect",
    "start": "598760",
    "end": "601079"
  },
  {
    "text": "we've added guardrails here so let's try",
    "start": "601079",
    "end": "604000"
  },
  {
    "text": "and",
    "start": "604000",
    "end": "605200"
  },
  {
    "text": "execute another query to see guardrails",
    "start": "605200",
    "end": "609440"
  },
  {
    "text": "in",
    "start": "609440",
    "end": "610600"
  },
  {
    "text": "effect tell me order details for my o",
    "start": "610600",
    "end": "617279"
  },
  {
    "text": "tank",
    "start": "617279",
    "end": "618519"
  },
  {
    "text": "order with",
    "start": "618519",
    "end": "621480"
  },
  {
    "text": "email since the guardrails is activated",
    "start": "621480",
    "end": "624839"
  },
  {
    "text": "to mask the name and email we should",
    "start": "624839",
    "end": "628320"
  },
  {
    "text": "expect a mask",
    "start": "628320",
    "end": "630000"
  },
  {
    "text": "response as you can see in the response",
    "start": "630000",
    "end": "632360"
  },
  {
    "text": "here the order details for the order",
    "start": "632360",
    "end": "634040"
  },
  {
    "text": "with email and the email data has been",
    "start": "634040",
    "end": "636639"
  },
  {
    "text": "masked at both places here so you're",
    "start": "636639",
    "end": "639320"
  },
  {
    "text": "able to not only apply the guard rails",
    "start": "639320",
    "end": "641880"
  },
  {
    "text": "but also see the complete execution path",
    "start": "641880",
    "end": "645160"
  },
  {
    "text": "WIA show trace",
    "start": "645160",
    "end": "646760"
  },
  {
    "text": "capability identify active notes that",
    "start": "646760",
    "end": "649320"
  },
  {
    "text": "have been triggered in the flow check uh",
    "start": "649320",
    "end": "652040"
  },
  {
    "text": "the validation also debug if there are",
    "start": "652040",
    "end": "655839"
  },
  {
    "text": "any errors and understand which part of",
    "start": "655839",
    "end": "659680"
  },
  {
    "text": "your flow is taking the most amount of",
    "start": "659680",
    "end": "661880"
  },
  {
    "text": "time now we've seen Bedrock flows how it",
    "start": "661880",
    "end": "664720"
  },
  {
    "text": "helps build secure intelligent AI",
    "start": "664720",
    "end": "666600"
  },
  {
    "text": "workflows from basic query handling to",
    "start": "666600",
    "end": "669079"
  },
  {
    "text": "complex routing with safety controls",
    "start": "669079",
    "end": "671360"
  },
  {
    "text": "flows makes it easier for creating",
    "start": "671360",
    "end": "674360"
  },
  {
    "text": "production ready a applications you can",
    "start": "674360",
    "end": "677200"
  },
  {
    "text": "access flows via AWS Management console",
    "start": "677200",
    "end": "680399"
  },
  {
    "text": "or via API in workflow to run your flows",
    "start": "680399",
    "end": "683880"
  },
  {
    "text": "on secure seress",
    "start": "683880",
    "end": "686399"
  },
  {
    "text": "infrastructure and quickly deploy art",
    "start": "686399",
    "end": "688639"
  },
  {
    "text": "scale or integrate in your AI automation",
    "start": "688639",
    "end": "691800"
  },
  {
    "text": "pipeline my name is Amit lah and for any",
    "start": "691800",
    "end": "695160"
  },
  {
    "text": "further questions please read the",
    "start": "695160",
    "end": "697240"
  },
  {
    "text": "documentation check the blogs that we've",
    "start": "697240",
    "end": "699440"
  },
  {
    "text": "published and contact your AWS team for",
    "start": "699440",
    "end": "702200"
  },
  {
    "text": "helping you build your generative AI",
    "start": "702200",
    "end": "704000"
  },
  {
    "text": "application with Amazon Bedrock flows",
    "start": "704000",
    "end": "706760"
  },
  {
    "text": "thank you",
    "start": "706760",
    "end": "710000"
  }
]