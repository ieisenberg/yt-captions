[
  {
    "text": "good afternoon everybody thank you for being here at the public submit sector",
    "start": "60",
    "end": "5670"
  },
  {
    "text": "in Brussels my name is Sebastian stomach I'm actually born and raised in Brussels",
    "start": "5670",
    "end": "11670"
  },
  {
    "text": "so it's great for once to do a talk in my home city that does not happen quite",
    "start": "11670",
    "end": "16680"
  },
  {
    "text": "quite frequently I'm living in London I'm part of the AWS tech evangelist team",
    "start": "16680",
    "end": "22250"
  },
  {
    "text": "which my colleague have here that was talking here just before me so different type of accent is afternoon Spanish",
    "start": "22250",
    "end": "29010"
  },
  {
    "text": "first French accent no we are going to talk about containers and we are going",
    "start": "29010",
    "end": "34290"
  },
  {
    "text": "to talk about best practice how to deploy containers inside the cloud I'm going to do a demo of ECS elastic",
    "start": "34290",
    "end": "41340"
  },
  {
    "text": "cluster service Fargate we are going to see different techniques that you can use to really deploy your containers at",
    "start": "41340",
    "end": "47730"
  },
  {
    "text": "scale this afternoon you can reach out to me on Twitter on Sep Stowe Sebastian",
    "start": "47730",
    "end": "53760"
  },
  {
    "text": "stomach Seb SEO if you want to give feedback about this presentation if you think I'm too slow too fast speaking too",
    "start": "53760",
    "end": "60629"
  },
  {
    "text": "slow speaking too fast if I need to go deeper for next sessions let me know",
    "start": "60629",
    "end": "66740"
  },
  {
    "text": "this tour will be loosely structured around something called the 12 factor a pleasure anybody knows - a factor app 1 2 3 4 5",
    "start": "66740",
    "end": "75390"
  },
  {
    "text": "not that much actually it's a set of recommendation of best practice how to deploy architecture how to deploy an",
    "start": "75390",
    "end": "83369"
  },
  {
    "text": "application how to create scalable highly resilient architecture in general",
    "start": "83369",
    "end": "88920"
  },
  {
    "text": "so there are 12 different factors like many good things in life they are going",
    "start": "88920",
    "end": "93990"
  },
  {
    "text": "by 12 to 12 months the 12 do off or to 12 fingers of the hand I'm not going to",
    "start": "93990",
    "end": "100680"
  },
  {
    "text": "go through all that list because it's a long list you know it will be like factor 1 factor 2 but I will loosely use",
    "start": "100680",
    "end": "107399"
  },
  {
    "text": "this as a red line during the rest of this talk so one of the principle of 12",
    "start": "107399",
    "end": "114420"
  },
  {
    "text": "factor application is to have a clear separation between your code that you want to run and the the underlying",
    "start": "114420",
    "end": "121439"
  },
  {
    "text": "operating systems the other underlying platform where you are going to run that code and of course to run",
    "start": "121439",
    "end": "127170"
  },
  {
    "text": "good to a factor app Dockers and containers probably the best way to",
    "start": "127170",
    "end": "132330"
  },
  {
    "text": "separate your concern between the application on one side and the platform on the other side we have a couple of",
    "start": "132330",
    "end": "138060"
  },
  {
    "text": "service on AWS that can help you to actually run your doctor container at",
    "start": "138060",
    "end": "143400"
  },
  {
    "text": "scale in the cloud maybe you heard about elastic cluster services ECS or Fargate I'm going to talk that",
    "start": "143400",
    "end": "151500"
  },
  {
    "text": "and to talk about that and to demo this service a bit later in this presentation",
    "start": "151500",
    "end": "156840"
  },
  {
    "text": "but what's the challenge here maybe you are running docker already I guess most of you know about docker if if you if",
    "start": "156840",
    "end": "163980"
  },
  {
    "text": "you are here and running container it's it's pretty easy you just type docker run and what are you have your container",
    "start": "163980",
    "end": "170370"
  },
  {
    "text": "running your container in the cloud is not different you just start a couple of ec2 instance you install docker on these",
    "start": "170370",
    "end": "176640"
  },
  {
    "text": "instance and then you start your container on this instance what can be wrong with that many things actually many things can go",
    "start": "176640",
    "end": "183300"
  },
  {
    "text": "wrong what about scalability what about high availability who is going to check when container is running when your",
    "start": "183300",
    "end": "189900"
  },
  {
    "text": "container is not running we're going to replace failing container because remember everything fails all the time",
    "start": "189900",
    "end": "195959"
  },
  {
    "text": "so you need to design your application in such a way that it will be resilient and that fail component can be restarted",
    "start": "195959",
    "end": "202980"
  },
  {
    "text": "what about scalability if you have peak of traffic you will need more in situ instance you will need more condo",
    "start": "202980",
    "end": "208860"
  },
  {
    "text": "containers that's why we have introduced three years ago I think maybe a bit more",
    "start": "208860",
    "end": "213950"
  },
  {
    "text": "ezs elastic cluster service so in elastic cluster service ism so managed service in the cloud that will run a",
    "start": "213950",
    "end": "222480"
  },
  {
    "text": "cluster for you so it will take care of the elasticity of the cluster adding",
    "start": "222480",
    "end": "227730"
  },
  {
    "text": "more instance to the cluster reducing the number of instance in the cluster it will take care of the help of your",
    "start": "227730",
    "end": "233430"
  },
  {
    "text": "container by pinging your container to be sure that actually they are healthy and it will replace automatically",
    "start": "233430",
    "end": "240299"
  },
  {
    "text": "failing container so it will kill containers that are not replying to the pink or replying with an error message",
    "start": "240299",
    "end": "245640"
  },
  {
    "text": "and we start them automatically it will also deal with the load balancer with you I'm going to go into more details in",
    "start": "245640",
    "end": "252000"
  },
  {
    "text": "in a minute so easy s manage your your cluster at scale in in the cloud and if you look at",
    "start": "252000",
    "end": "258510"
  },
  {
    "text": "one easy tween stands to make that happen there is no magic we need a bit of software we need an agent",
    "start": "258510",
    "end": "263890"
  },
  {
    "text": "so inside every single ec2 instance which is installed part of your cluster",
    "start": "263890",
    "end": "269110"
  },
  {
    "text": "we need to have an EC s agent that listen from the order coming from the",
    "start": "269110",
    "end": "274360"
  },
  {
    "text": "cluster manager from replacement some piece of software that can start your container that can restart your",
    "start": "274360",
    "end": "279910"
  },
  {
    "text": "container that can kill your container we do provide these pre-installed in an Amazon machine image EMI it's free",
    "start": "279910",
    "end": "287860"
  },
  {
    "text": "install configuration operating system image a disk image that you can use to",
    "start": "287860",
    "end": "293530"
  },
  {
    "text": "boot your your ec2 instance from so you do not need to manage that by yourself but still you see this ec2 instance you",
    "start": "293530",
    "end": "300160"
  },
  {
    "text": "need to place this ec2 instance into a network you are responsible of maintaining these ec2 instance as soon",
    "start": "300160",
    "end": "306730"
  },
  {
    "text": "as they are started maybe you heard already about the shared responsibility model we take care of the security of",
    "start": "306730",
    "end": "312820"
  },
  {
    "text": "the cloud you take care of everything you run in the cloud as soon as the ec2 instance he starts it's your",
    "start": "312820",
    "end": "317860"
  },
  {
    "text": "responsibility to manage that instance on the long-term to patch it maybe to patch operating system remember it is",
    "start": "317860",
    "end": "324700"
  },
  {
    "text": "for for example and that's still quite a lot of job to do at large scale if you",
    "start": "324700",
    "end": "330160"
  },
  {
    "text": "have dozens hundreds of ec2 instance running so what if we can just get rid",
    "start": "330160",
    "end": "336010"
  },
  {
    "text": "of the ec2 instance what if you can just give us containers and tell hey mr. AWS",
    "start": "336010",
    "end": "342460"
  },
  {
    "text": "please run these containers in that network in that availability zone without you having to manage ec2",
    "start": "342460",
    "end": "349060"
  },
  {
    "text": "instance and that's forget forget it's a manager with several service to run your",
    "start": "349060",
    "end": "355030"
  },
  {
    "text": "container we fold running an ec2 instance when I say without running an",
    "start": "355030",
    "end": "360910"
  },
  {
    "text": "ec2 instance yeah under the hood underneath yes they are still in situ",
    "start": "360910",
    "end": "366040"
  },
  {
    "text": "instance we there is no magic your containers are not running somewhere in the air but it's totally hidden from you",
    "start": "366040",
    "end": "372340"
  },
  {
    "text": "these instance are not managed by you they are not appearing in your ec2",
    "start": "372340",
    "end": "377410"
  },
  {
    "text": "console you don't see them you are not charged for these ec2 instance we below per unit of minutes of the CPU running",
    "start": "377410",
    "end": "385480"
  },
  {
    "text": "for the container itself but not for the ec2 instance so it's docker we fold virtual machines",
    "start": "385480",
    "end": "391240"
  },
  {
    "text": "you just tell us him run ten docker instance",
    "start": "391240",
    "end": "396349"
  },
  {
    "text": "across these two availability zone in that network and we do all the magic under the under the scene to start this",
    "start": "396349",
    "end": "404030"
  },
  {
    "text": "ec2 instance to scale this ec2 instance to patch this ec2 instance so that's docker without any server one of the",
    "start": "404030",
    "end": "410990"
  },
  {
    "text": "first best practice if you are deploying docker container or container a containerized container application inside the cloud",
    "start": "410990",
    "end": "417800"
  },
  {
    "text": "is to group everything inside source code control you are probably using",
    "start": "417800",
    "end": "422840"
  },
  {
    "text": "gates if you are if you have white hair like me maybe you remember things like subversion or CVS before that git is the",
    "start": "422840",
    "end": "432440"
  },
  {
    "text": "central repository where all your artifacts must leave and not only the",
    "start": "432440",
    "end": "437780"
  },
  {
    "text": "code of your application but also the configuration also the script to create the the execution environment I'm going",
    "start": "437780",
    "end": "444050"
  },
  {
    "text": "to talk about that a bit later it really must contain everything that allows you",
    "start": "444050",
    "end": "449090"
  },
  {
    "text": "to deploy running application not only it's better if you are working in teams to know which and what and when and to",
    "start": "449090",
    "end": "455780"
  },
  {
    "text": "be able to revert back but it's also a perfect image of your system and when I",
    "start": "455780",
    "end": "461419"
  },
  {
    "text": "say system it's not only your application but it's also lead infrastructure you can run any type of",
    "start": "461419",
    "end": "466969"
  },
  {
    "text": "get of course at Amazon we have AWS code commit god committed to manage service",
    "start": "466969",
    "end": "472250"
  },
  {
    "text": "run at large-scale git server for your team so it's a queue with I am and with",
    "start": "472250",
    "end": "477319"
  },
  {
    "text": "SSH key those are the same I am that you love and that you learn how to use from the last ten years maybe on AWS but it's",
    "start": "477319",
    "end": "485840"
  },
  {
    "text": "running we fought Server we fought back up to maintain without operating system to maintain on your side its server less",
    "start": "485840",
    "end": "491889"
  },
  {
    "text": "get service running in the cloud certain best practices I would like to go",
    "start": "491889",
    "end": "497210"
  },
  {
    "text": "through its how do you manage your dependencies you know that when you are writing an application today most of the",
    "start": "497210",
    "end": "504409"
  },
  {
    "text": "code is coming from dependencies actually you focus on your business code but most of the infrastructure code most",
    "start": "504409",
    "end": "510289"
  },
  {
    "text": "of the common things are coming from libraries that you are downloading beware of these libraries because when",
    "start": "510289",
    "end": "517130"
  },
  {
    "text": "you use libraries and you use package manager for example to download the latest version of libraries",
    "start": "517130",
    "end": "523729"
  },
  {
    "text": "like MPM young or people maybe on Python this package this package manager I buy",
    "start": "523730",
    "end": "531590"
  },
  {
    "text": "two for downloading the latest version of the library's latest version means from one day to the other you're going",
    "start": "531590",
    "end": "537200"
  },
  {
    "text": "to build your application and the dependencies will change according to the roadmap of a third party that you",
    "start": "537200",
    "end": "544280"
  },
  {
    "text": "don't know about it so when you're using libraries like files like packaged of",
    "start": "544280",
    "end": "550370"
  },
  {
    "text": "JSON in in in ODS in JavaScript or requirement at least in Python",
    "start": "550370",
    "end": "556310"
  },
  {
    "text": "always always always always use version number so that you can repeat the build",
    "start": "556310",
    "end": "561560"
  },
  {
    "text": "process it's very important that every time you build your application you are confident about what are the bits and",
    "start": "561560",
    "end": "567530"
  },
  {
    "text": "bytes that change and what did not change and you want of course to minimize the number of changes over",
    "start": "567530",
    "end": "572690"
  },
  {
    "text": "there so always use a version number to ensure that you're going to download that specific version from the cloud and",
    "start": "572690",
    "end": "579710"
  },
  {
    "text": "not just the latest version that happen to be released maybe that is buggy or maybe it has some other security issue",
    "start": "579710",
    "end": "587600"
  },
  {
    "text": "maybe that you don't want to include inside your application that's also valid for your docker file so when you",
    "start": "587600",
    "end": "594260"
  },
  {
    "text": "install when you create when you build a docker container you have that command run ap key ad in that case it's a go to",
    "start": "594260",
    "end": "601640"
  },
  {
    "text": "image and actually that one is not going with my my best practice because this one installed make GCC press flows",
    "start": "601640",
    "end": "609320"
  },
  {
    "text": "Python without specifying an inversion so every time I'm going to build a container there I will get a different",
    "start": "609320",
    "end": "615470"
  },
  {
    "text": "container which is not exactly what I want that's exactly the opposite of what we want with containers we want",
    "start": "615470",
    "end": "621560"
  },
  {
    "text": "containers to be stable over time so always add a version number when you add dependencies next step about",
    "start": "621560",
    "end": "629810"
  },
  {
    "text": "configuration I remember when I was a consultant last century I was working in",
    "start": "629810",
    "end": "635750"
  },
  {
    "text": "a bank in a project and the configuration was inside the zip file",
    "start": "635750",
    "end": "641210"
  },
  {
    "text": "that we ship to the operation team so in the operation document we tell the guy say hey unzip the file replay replace",
    "start": "641210",
    "end": "649010"
  },
  {
    "text": "that file in that directory build your zip again and then you ever see that you can deploy into production it was a job fight if i",
    "start": "649010",
    "end": "655870"
  },
  {
    "text": "remember well at the time of java you know who java files are sensitive to two directories if the operation person made",
    "start": "655870",
    "end": "663940"
  },
  {
    "text": "a typo when building the zip again then the production department would be at a broken and the binary that we shipped to",
    "start": "663940",
    "end": "672160"
  },
  {
    "text": "production test and development was not the same because we are to unzip change of file reason never never never never",
    "start": "672160",
    "end": "678100"
  },
  {
    "text": "do that as somehow managed to survive that I'm still here today but the best practice here is to separate the",
    "start": "678100",
    "end": "684930"
  },
  {
    "text": "environment the configuration from the code so the code is always the same it's your docker container do not include any",
    "start": "684930",
    "end": "690910"
  },
  {
    "text": "configuration inside the docker container if you have URLs for your database or if you have secrets just",
    "start": "690910",
    "end": "696640"
  },
  {
    "text": "separate that so the configuration can be on the runtime systems like production development tests and the",
    "start": "696640",
    "end": "703870"
  },
  {
    "text": "container is just the binary and the container runtime will pick up the configuration from the environment so I",
    "start": "703870",
    "end": "709780"
  },
  {
    "text": "have some nice graphic to explain what I just explained but yeah you get the idea the configuration isn't on the server",
    "start": "709780",
    "end": "716170"
  },
  {
    "text": "side and the container just dynamically fetch the configuration how can you do",
    "start": "716170",
    "end": "721450"
  },
  {
    "text": "that environment variable it's a very easy way to program you can refer to",
    "start": "721450",
    "end": "728260"
  },
  {
    "text": "environment variable from JavaScript for example which process that the name of",
    "start": "728260",
    "end": "733420"
  },
  {
    "text": "the variable you can test that easily on your laptop simulating environment variable with the - in command line on",
    "start": "733420",
    "end": "741040"
  },
  {
    "text": "docker and of course if you are running in the cloud you need to tell us what is the environment so on ETS and Fargate",
    "start": "741040",
    "end": "747610"
  },
  {
    "text": "with that concept of of task definition and task definition it's it's the list",
    "start": "747610",
    "end": "753100"
  },
  {
    "text": "of environment variable and your docker container so a task definition is really the unit that you're going to ship to",
    "start": "753100",
    "end": "758650"
  },
  {
    "text": "one specific environment I'm always a bit nervous when I see secrets or",
    "start": "758650",
    "end": "764050"
  },
  {
    "text": "passwords environment variable that's probably not a very good practice on AWS with a",
    "start": "764050",
    "end": "770020"
  },
  {
    "text": "service called secret manager and secret manager as the name implies is there to",
    "start": "770020",
    "end": "775750"
  },
  {
    "text": "manage your secrets so you can define in that service or your list of password",
    "start": "775750",
    "end": "780910"
  },
  {
    "text": "may be the environment you can of course cipher password you can apply a key rotation to",
    "start": "780910",
    "end": "787310"
  },
  {
    "text": "these two these secrets and at runtime any application can use the secret",
    "start": "787310",
    "end": "794420"
  },
  {
    "text": "manager API to securely retrieve the secrets of course if it has the correct I am permission we integrate secret",
    "start": "794420",
    "end": "802640"
  },
  {
    "text": "manager with ECS so if you are running docker container typically in a task definition you passes the environment",
    "start": "802640",
    "end": "809810"
  },
  {
    "text": "variable you are not obliged to put a password in is environment variable you can just refer to secret manager telling",
    "start": "809810",
    "end": "816380"
  },
  {
    "text": "the cluster he doesn't run on variable you put the name we'll take the value from that specific secret in secret",
    "start": "816380",
    "end": "823670"
  },
  {
    "text": "manager and at runtime the cluster will clearly secret manager fetch your password and and pass that as an",
    "start": "823670",
    "end": "829550"
  },
  {
    "text": "environment variable to your docker container it allows to keep all your secret and passwords per environment in",
    "start": "829550",
    "end": "835430"
  },
  {
    "text": "a secure and controlled environment called aw a secret manager do I still",
    "start": "835430",
    "end": "841310"
  },
  {
    "text": "have everyone wish me there I'm progressing in my list back in service dependencies dependencies between",
    "start": "841310",
    "end": "847940"
  },
  {
    "text": "services you know that typically a micro service one calling a micro service two",
    "start": "847940",
    "end": "853670"
  },
  {
    "text": "should never call the service directly because that micro service to my change location change IP address maybe you",
    "start": "853670",
    "end": "860570"
  },
  {
    "text": "have multiple micro service to to scale and depends on on the load you might have really a lot of these so how do you",
    "start": "860570",
    "end": "868010"
  },
  {
    "text": "refer to them best practice is always go through two things first a DNS name never hard",
    "start": "868010",
    "end": "873440"
  },
  {
    "text": "called IP address IP address are not stable in the cloud by definition we are adding IP address and removing IP",
    "start": "873440",
    "end": "879800"
  },
  {
    "text": "address and always go through a load balancer because today maybe you have one instance of your micro service but",
    "start": "879800",
    "end": "885020"
  },
  {
    "text": "tomorrow you will have two or three four depending on the scale of your application so always go through load balancer and we throw through them",
    "start": "885020",
    "end": "891110"
  },
  {
    "text": "through a DNS name you can do that manually and register a new version of",
    "start": "891110",
    "end": "896720"
  },
  {
    "text": "your container to DNS but we have a service that helps to do that as well",
    "start": "896720",
    "end": "901760"
  },
  {
    "text": "it's called AWS cloud map and the idea of cloud map is to run a registry or",
    "start": "901760",
    "end": "907400"
  },
  {
    "text": "repository of your runtime service in the cloud so the cluster knows that and",
    "start": "907400",
    "end": "913220"
  },
  {
    "text": "does that by default so if you start a container in in ECS and you register cloud map the",
    "start": "913220",
    "end": "920420"
  },
  {
    "text": "cluster will register the instance of your new container to cloud map saying hey version three of that service is no",
    "start": "920420",
    "end": "926209"
  },
  {
    "text": "available at that IP address an in cloud map to define the definition of the service you define a name for your",
    "start": "926209",
    "end": "932690"
  },
  {
    "text": "service and you define a whole client of that service wants to query that cells we have three different ways to query",
    "start": "932690",
    "end": "938660"
  },
  {
    "text": "the first one is to use the cloud map API so microservice one can call code map to say hey cloud map tell me raise",
    "start": "938660",
    "end": "945529"
  },
  {
    "text": "the current IP address of that service right now and cloud map will give you the IP address and so you can make the",
    "start": "945529",
    "end": "950690"
  },
  {
    "text": "call the second one if you don't want to use it or view a specific API or AWS specific code inside your code is just",
    "start": "950690",
    "end": "957560"
  },
  {
    "text": "to rely on DNS and we have two different type of DNS private private to your processor or public and using a public",
    "start": "957560",
    "end": "964279"
  },
  {
    "text": "DNS infrastructure and the idea would be just to say hey DNS tell me the IP",
    "start": "964279",
    "end": "969740"
  },
  {
    "text": "address of micro service one that my company dot-com just like you are doing today for for website cloud map will",
    "start": "969740",
    "end": "976970"
  },
  {
    "text": "maintain the DNS entries and will update the DNS entries as as containers are",
    "start": "976970",
    "end": "983089"
  },
  {
    "text": "being created or deleted in the cloud for you so AWS cloud map has been introduced in November at reinvent it's",
    "start": "983089",
    "end": "989959"
  },
  {
    "text": "available right now you can test it right now my favorites build release and",
    "start": "989959",
    "end": "996380"
  },
  {
    "text": "run never never never give a word document to your operation team saying hey you need to unzip this you need to",
    "start": "996380",
    "end": "1002320"
  },
  {
    "text": "copy that FTP that and then deploy that that's the thing from the past from last century build and deployment must be",
    "start": "1002320",
    "end": "1010270"
  },
  {
    "text": "fully automatic and that's the only way to be peaceful at night and to not wake",
    "start": "1010270",
    "end": "1016510"
  },
  {
    "text": "up at 3:00 a.m. with nightmares or with your pager going in try to automate",
    "start": "1016510",
    "end": "1021760"
  },
  {
    "text": "everything automate in infrastructure creation itself but automate the build as well and automate the deployment so",
    "start": "1021760",
    "end": "1028990"
  },
  {
    "text": "you take you binaries you take your configuration and you let your Creator",
    "start": "1028990",
    "end": "1034770"
  },
  {
    "text": "release that you can push in a in a container registry oh that's yeah that's when it's a",
    "start": "1034770",
    "end": "1043540"
  },
  {
    "text": "specific release so you have the image of the URL you have the hardware settings of your",
    "start": "1043540",
    "end": "1050169"
  },
  {
    "text": "container like hamachi PU how much memory do you need and the environment variable that's the the configuration",
    "start": "1050169",
    "end": "1056320"
  },
  {
    "text": "and that TAS definition is the unit of deployment to the different version of your cluster you can deploy that",
    "start": "1056320",
    "end": "1062499"
  },
  {
    "text": "specific version to your production cluster to your development cluster or",
    "start": "1062499",
    "end": "1068230"
  },
  {
    "text": "to your test cluster you can even create a cluster temporary just to make a couple of of tests the way to automate",
    "start": "1068230",
    "end": "1075100"
  },
  {
    "text": "that it's using a service called AWS code deploy and code deploy it's as the",
    "start": "1075100",
    "end": "1081279"
  },
  {
    "text": "name implies it's a service that will automatically deploy your code for you on your cluster so it will take a script",
    "start": "1081279",
    "end": "1088450"
  },
  {
    "text": "and we go through your script to deploy your code to either ec2 instance to",
    "start": "1088450",
    "end": "1094749"
  },
  {
    "text": "forget using ECS and server this type of services one of the cool thing about",
    "start": "1094749",
    "end": "1101409"
  },
  {
    "text": "code deploy is that by default it does a rolling upgrade deployment so let's say you have two containers rolling you are",
    "start": "1101409",
    "end": "1108809"
  },
  {
    "text": "starting a new version of your service so it will create two new container with the new version wait for this version to",
    "start": "1108809",
    "end": "1116080"
  },
  {
    "text": "be registered to your load balancer and to be healthy and as soon as they are healthy then the cluster will kill the",
    "start": "1116080",
    "end": "1122499"
  },
  {
    "text": "old version so it's a replacement I bring the new version I wait for that new version to be healthy and stop to",
    "start": "1122499",
    "end": "1129039"
  },
  {
    "text": "answer customer requests and then I the cluster shut down the old version that's",
    "start": "1129039",
    "end": "1134590"
  },
  {
    "text": "the default updates for all deployment ID for all code deployed but code",
    "start": "1134590",
    "end": "1140259"
  },
  {
    "text": "deployed can do something much more fancy as well code deploy can do Bluegreen deployment and with Bluegreen",
    "start": "1140259",
    "end": "1146139"
  },
  {
    "text": "deployment the idea is to start a new version of your container to create a",
    "start": "1146139",
    "end": "1151480"
  },
  {
    "text": "new load balancer at least a new listener on your load balancer to direct",
    "start": "1151480",
    "end": "1156580"
  },
  {
    "text": "portion of the traffic to that new version and to give you the occasion to test that new version with a subset of",
    "start": "1156580",
    "end": "1163029"
  },
  {
    "text": "your customer or with tester depending on your policies and only when you think",
    "start": "1163029",
    "end": "1168129"
  },
  {
    "text": "that everything goes where on the new version then we are going to shift the production traffic to the new version",
    "start": "1168129",
    "end": "1174580"
  },
  {
    "text": "and we are going to kill the over let's see that graphically oh it works here we have the application load",
    "start": "1174580",
    "end": "1180700"
  },
  {
    "text": "balancer that listen on port 80 and send the traffic to a first target group made",
    "start": "1180700",
    "end": "1185799"
  },
  {
    "text": "of your old version of your application first group of your containers we call that blue task with blue green",
    "start": "1185799",
    "end": "1194019"
  },
  {
    "text": "deployment code deploy will automatically create a new listener on the load balancer and on a different",
    "start": "1194019",
    "end": "1201700"
  },
  {
    "text": "port like 1900 1900 and a new target",
    "start": "1201700",
    "end": "1207070"
  },
  {
    "text": "groups and then it will start to create a couple of containers and register these containers to the new target group",
    "start": "1207070",
    "end": "1213249"
  },
  {
    "text": "so at that moment you have two different URL you have your website slash 80 and",
    "start": "1213249",
    "end": "1219460"
  },
  {
    "text": "your web address slash nine not slash Cherie : 80 the default one and column nine zero",
    "start": "1219460",
    "end": "1225639"
  },
  {
    "text": "zero zero so you can distribute these to your among your tester or your customer base and there it some customer to the",
    "start": "1225639",
    "end": "1231999"
  },
  {
    "text": "new version some customer to the old version at that time you monitor what's happening on the new version as well so",
    "start": "1231999",
    "end": "1238029"
  },
  {
    "text": "you must have your monitoring dashboard you are left that are in place and let's",
    "start": "1238029",
    "end": "1243369"
  },
  {
    "text": "say that you you have ten percent of the traffic there if everything goes well code deploy will then shift the rest of",
    "start": "1243369",
    "end": "1249909"
  },
  {
    "text": "the traffic 100 percent of the traffic on the new version and once all the",
    "start": "1249909",
    "end": "1256059"
  },
  {
    "text": "connection have been drained so when there is no more customer connection using the old version it will just kill",
    "start": "1256059",
    "end": "1261580"
  },
  {
    "text": "the old version of your container that's the blue task so that's Bluegreen deployment and you",
    "start": "1261580",
    "end": "1268239"
  },
  {
    "text": "can do that automatically using a to previous quality problem another best",
    "start": "1268239",
    "end": "1273909"
  },
  {
    "text": "practice is beware of the version number when you are building your doctor container if you are using docker and",
    "start": "1273909",
    "end": "1281889"
  },
  {
    "text": "I'm doing that a lot when I'm building an image I'm pushing the image to a repository and I'm using a tag you know",
    "start": "1281889",
    "end": "1288789"
  },
  {
    "text": "the tags in docker and you use the tag called latest that's not a great idea",
    "start": "1288789",
    "end": "1295269"
  },
  {
    "text": "when using a cluster imagine that you have your your micro service or your application tagged as latest and then",
    "start": "1295269",
    "end": "1301779"
  },
  {
    "text": "you have ETS that has a couple of version of your container and then you have a scaling event",
    "start": "1301779",
    "end": "1307330"
  },
  {
    "text": "scaling mean we are going to add more container as long as you are not publishing a new version every singles",
    "start": "1307330",
    "end": "1314040"
  },
  {
    "text": "well but imagine that you publish a new version so now you have in your repository version 1 and version 2 and",
    "start": "1314040",
    "end": "1319590"
  },
  {
    "text": "version 2 is latest at that moment your cluster as a scaling constraint there is",
    "start": "1319590",
    "end": "1325920"
  },
  {
    "text": "more traffic on your on your service so the cluster needs to create more instance of your container and your",
    "start": "1325920",
    "end": "1331410"
  },
  {
    "text": "cluster has been configured to create latest instance of your container so the",
    "start": "1331410",
    "end": "1337080"
  },
  {
    "text": "cluster will do exactly that it will create new containers using the latest tag except that let us know it's version",
    "start": "1337080",
    "end": "1343050"
  },
  {
    "text": "- it's not version 1 anymore yep so you will end up in a cluster with a mix of",
    "start": "1343050",
    "end": "1348480"
  },
  {
    "text": "version 1 and version 2 which most of the time leads to some interesting problem - to debug at least so the",
    "start": "1348480",
    "end": "1357330"
  },
  {
    "text": "recommendation here is to use immutable tags tags that are very specific to your",
    "start": "1357330",
    "end": "1362730"
  },
  {
    "text": "version number it might be an SH a checksum for example about the image",
    "start": "1362730",
    "end": "1368280"
  },
  {
    "text": "itself oh it might be the built ID if the build ID are unique between different build the way you can do that",
    "start": "1368280",
    "end": "1375660"
  },
  {
    "text": "you can use sorry you can use a built ID",
    "start": "1375660",
    "end": "1384120"
  },
  {
    "text": "inside AWS code build or you can use docker inspect that was a comment that was looking for docker inspect to get",
    "start": "1384120",
    "end": "1390720"
  },
  {
    "text": "the SHA version of your specific container and if you do that when you",
    "start": "1390720",
    "end": "1396240"
  },
  {
    "text": "have your version 1 your tag will not be latest it will be some sha-256 checksum",
    "start": "1396240",
    "end": "1403320"
  },
  {
    "text": "of your container if your developer are pushing a version 2 then it will have a",
    "start": "1403320",
    "end": "1408930"
  },
  {
    "text": "different tag and when the cluster will need to scale out it will just create",
    "start": "1408930",
    "end": "1414030"
  },
  {
    "text": "more version 1 as expected so you are not going to miss a match version 2 in",
    "start": "1414030",
    "end": "1419100"
  },
  {
    "text": "version 1 inside your your cluster",
    "start": "1419100",
    "end": "1423770"
  },
  {
    "text": "what about state containers are great when there is no state ideally your",
    "start": "1427180",
    "end": "1434440"
  },
  {
    "text": "application must be as stateless as possible because it allows to scale very well and to replace instance but you",
    "start": "1434440",
    "end": "1441680"
  },
  {
    "text": "know that sometimes we are obliged to keep a state most application ever state so don't keep any state on your doctor",
    "start": "1441680",
    "end": "1450140"
  },
  {
    "text": "volume itself because of the curve volumes most of the time attached to the machine where the docker container is",
    "start": "1450140",
    "end": "1456590"
  },
  {
    "text": "actually running and if that container terminates and is restarted on another machine it will not find whatever file",
    "start": "1456590",
    "end": "1462260"
  },
  {
    "text": "it has created over there so if you have state use a third party store like a",
    "start": "1462260",
    "end": "1467630"
  },
  {
    "text": "database I know we don't like to use that a base that we still have to and we have a couple of options in only W",
    "start": "1467630",
    "end": "1474320"
  },
  {
    "text": "stranded database or store it goes from simple file like Amazon s3 from from",
    "start": "1474320",
    "end": "1480200"
  },
  {
    "text": "media files for example elasticsearch if you have to index a large quantity of",
    "start": "1480200",
    "end": "1486110"
  },
  {
    "text": "document dynamodb no sequel we have a graph database we have a ledger database we have a wide variety of relational",
    "start": "1486110",
    "end": "1494990"
  },
  {
    "text": "database with Oracle Microsoft my sequel Maha DB Postgres you choose the one",
    "start": "1494990",
    "end": "1501320"
  },
  {
    "text": "which is valid for your for your application pod by doing another area",
    "start": "1501320",
    "end": "1507050"
  },
  {
    "text": "where we need has some some help you know that docker container can expose a port like pod ATM your webserver all",
    "start": "1507050",
    "end": "1514550"
  },
  {
    "text": "great and then suddenly you need to start to instance of the docker container on one single machine or virtual machine you cannot have two",
    "start": "1514550",
    "end": "1521240"
  },
  {
    "text": "instance running on port 80 so docker comes with a handy solution for that it dynamically generated port number great",
    "start": "1521240",
    "end": "1528080"
  },
  {
    "text": "but how do we i forward the traffic to a dynamically generated port number I need some kind of intelligence to register",
    "start": "1528080",
    "end": "1534890"
  },
  {
    "text": "whatever port number has been generated by docker so that my customer can find the loophole and the IP address and",
    "start": "1534890",
    "end": "1541460"
  },
  {
    "text": "report for for my service so we do that automatically for you if you are using",
    "start": "1541460",
    "end": "1548060"
  },
  {
    "text": "in CS and a load balancer the load balancer is that interesting concept called the target group and whenever the",
    "start": "1548060",
    "end": "1554150"
  },
  {
    "text": "cluster will start a container it will fetch the dynamic number the dynamic port number assigned by docker",
    "start": "1554150",
    "end": "1560750"
  },
  {
    "text": "and registered that number to the load balancer automatically so you have absolutely nothing to do that's fully",
    "start": "1560750",
    "end": "1566720"
  },
  {
    "text": "automatic your load balancer will know how to reach out to your different containers how can you maintain",
    "start": "1566720",
    "end": "1575800"
  },
  {
    "text": "developer and production and test parity if you are not using forget you have ec2",
    "start": "1575800",
    "end": "1581570"
  },
  {
    "text": "instances if you have ec2 instance there must be all the same across all your different environment try to resist to",
    "start": "1581570",
    "end": "1589220"
  },
  {
    "text": "the tempting fact of doing an ssh connection to an ec2 server and update a",
    "start": "1589220",
    "end": "1596180"
  },
  {
    "text": "specific library because you have a bug if you do that that's ever will be unique it will be what we call a",
    "start": "1596180",
    "end": "1602510"
  },
  {
    "text": "snowflake server you know snowflakes they all look the same from distance but if you look really closely they are all different",
    "start": "1602510",
    "end": "1608480"
  },
  {
    "text": "you don't want to have snowflake server you want all your server to be the same in your infrastructure so always",
    "start": "1608480",
    "end": "1614930"
  },
  {
    "text": "generate your infrastructure your server using code and then on top of that",
    "start": "1614930",
    "end": "1621170"
  },
  {
    "text": "infrastructure you deploy your container we have a couple of options on AWS to generate infrastructure as code one of",
    "start": "1621170",
    "end": "1629420"
  },
  {
    "text": "them is the old service called AWS CloudFormation cloud formation is one of",
    "start": "1629420",
    "end": "1635270"
  },
  {
    "text": "the first address is 10 years ago that allows you to describe your infrastructure in a JSON file so you",
    "start": "1635270",
    "end": "1643160"
  },
  {
    "text": "describe your infrastructure as text so it can get you can have your data center in ingots and you can version control",
    "start": "1643160",
    "end": "1651110"
  },
  {
    "text": "your data center then you give that JSON file to cloud formation and it will create infrastructure for you great",
    "start": "1651110",
    "end": "1657790"
  },
  {
    "text": "except that cloud formation it's like the assembly language of the cloud it's",
    "start": "1657790",
    "end": "1664370"
  },
  {
    "text": "very low-level it's very close to our API so it's like 150 line of code just to create a network so if you need to",
    "start": "1664370",
    "end": "1671180"
  },
  {
    "text": "write a lot of code you end up copy pasting a lot and reusing snippets from all documentation or from your library",
    "start": "1671180",
    "end": "1677000"
  },
  {
    "text": "to create code so today we have higher-level tools that allows you to create infrastructure as code with much",
    "start": "1677000",
    "end": "1684110"
  },
  {
    "text": "less code on your site and one of them it's the cloud man kids CDK cdks in preview right now",
    "start": "1684110",
    "end": "1692330"
  },
  {
    "text": "preview means that you can test it but it might change a bit so if you're writing a lot of cdk code beware that",
    "start": "1692330",
    "end": "1698960"
  },
  {
    "text": "the api did the exact syntax might change a bit in the future as we are collecting feedback from you",
    "start": "1698960",
    "end": "1705200"
  },
  {
    "text": "guys but if you want to try it try it and give us feedback so the ideas of cdk it's a set of libraries in in javascript",
    "start": "1705200",
    "end": "1712610"
  },
  {
    "text": "or tasks typescript in Java and c-sharp maybe later in other programming language that allows you to give you",
    "start": "1712610",
    "end": "1719360"
  },
  {
    "text": "super high-level construct to generate your infrastructure in the clouds and when you execute a cdk application",
    "start": "1719360",
    "end": "1725870"
  },
  {
    "text": "behind the scene it's generating CloudFormation template so we are not reinventing the wheel or by passing",
    "start": "1725870",
    "end": "1731510"
  },
  {
    "text": "cloud formation it's just a much higher level a much higher level of abstraction to write your cloud formation template",
    "start": "1731510",
    "end": "1738830"
  },
  {
    "text": "for example to create an easy s cluster you first need to create a V PC and you",
    "start": "1738830",
    "end": "1744410"
  },
  {
    "text": "can create a repeat see with just one line of code VP C equal new easy to VP C",
    "start": "1744410",
    "end": "1750320"
  },
  {
    "text": "Network you give a name and the number of every bit is alone and this single line of code will create your V PC with",
    "start": "1750320",
    "end": "1757730"
  },
  {
    "text": "private subnet public subnets routing table not gateway all the best practice",
    "start": "1757730",
    "end": "1762980"
  },
  {
    "text": "that we recommend in terms of networking will be applied by default so you don't have to choose how am I going to split",
    "start": "1762980",
    "end": "1771020"
  },
  {
    "text": "my my subnets my a C or should I attach an that gateway or not no we do apply",
    "start": "1771020",
    "end": "1776780"
  },
  {
    "text": "some default for you based on the best practice that we learned from you over the years if you want to create an easy",
    "start": "1776780",
    "end": "1782900"
  },
  {
    "text": "S cluster inside that vb c you just say new e CS cluster cluster inside that vp",
    "start": "1782900",
    "end": "1788480"
  },
  {
    "text": "c if you want to create a service inside the cluster so a load balancer and a set",
    "start": "1788480",
    "end": "1794030"
  },
  {
    "text": "of container tasks you just create an easy a load balance forget service or ECS herbs inside that cluster using that",
    "start": "1794030",
    "end": "1802220"
  },
  {
    "text": "specific docker image and that's it you",
    "start": "1802220",
    "end": "1807710"
  },
  {
    "text": "have roughly 20 lines of code that will generate more than 400 lines of code",
    "start": "1807710",
    "end": "1814650"
  },
  {
    "text": "a template for you so give it a try if you are serious about infrastructure on",
    "start": "1814650",
    "end": "1820620"
  },
  {
    "text": "AWS never do infrastructure as click in the console click click click always do",
    "start": "1820620",
    "end": "1825990"
  },
  {
    "text": "infrastructure as code is see-through cdk or cloud formation or other tools",
    "start": "1825990",
    "end": "1831210"
  },
  {
    "text": "tella forms orders how much time do I have 20 minutes so let's finish with the",
    "start": "1831210",
    "end": "1838830"
  },
  {
    "text": "logs and then let's go to a demo and show you that in real life loads if you",
    "start": "1838830",
    "end": "1844500"
  },
  {
    "text": "have dozens of ec2 instance hundreds of containers that are starting stopped everywhere you can obviously not rely on",
    "start": "1844500",
    "end": "1851429"
  },
  {
    "text": "the hosts to store the log you cannot have your docker container writing to the local disk to store the load you",
    "start": "1851429",
    "end": "1858540"
  },
  {
    "text": "need your doctor container to push the load to somewhere else a shared repository where you can aggregate all",
    "start": "1858540",
    "end": "1864780"
  },
  {
    "text": "the logs where you can search where you can exploit the log in such in an easy",
    "start": "1864780",
    "end": "1871590"
  },
  {
    "text": "way so by default docker containers are writing to STD out and docker is a very",
    "start": "1871590",
    "end": "1876840"
  },
  {
    "text": "fancy mechanism called a log driver that allows to capture what's happening inside a container and put that to a log",
    "start": "1876840",
    "end": "1884190"
  },
  {
    "text": "server and it does support many different looks like open source UMD but we also support AWS cloud watch log",
    "start": "1884190",
    "end": "1891660"
  },
  {
    "text": "cloud watch logs some trial service inside the region that we are using that",
    "start": "1891660",
    "end": "1896910"
  },
  {
    "text": "can collect the logs from many different source you can search this log you can run queries you can do a lot of",
    "start": "1896910",
    "end": "1904730"
  },
  {
    "text": "visualization or queries we had Tina for example on these loads so how to use AWS",
    "start": "1904730",
    "end": "1910860"
  },
  {
    "text": "logs the cluster does that by default we generate inside the task definition and entry",
    "start": "1910860",
    "end": "1917760"
  },
  {
    "text": "that says hey the log driver for this container will be AWS logs and then you",
    "start": "1917760",
    "end": "1923309"
  },
  {
    "text": "can configure in which region what is the log group and what is the the stream",
    "start": "1923309",
    "end": "1929220"
  },
  {
    "text": "traffic that you want to use don't forget to add permission to your container to be able to push the logs to",
    "start": "1929220",
    "end": "1936330"
  },
  {
    "text": "code watch loops so there is one line to add in the permission the console we do that for you if you're",
    "start": "1936330",
    "end": "1941630"
  },
  {
    "text": "using the wizard but your doctor container needs to have permissions of course to write",
    "start": "1941630",
    "end": "1947720"
  },
  {
    "text": "logs the other nice things about loads if you go into the cluster console by itself there is a log tab where you can",
    "start": "1947720",
    "end": "1955130"
  },
  {
    "text": "see all the logs from all the containers for the service so all the logs are also",
    "start": "1955130",
    "end": "1960550"
  },
  {
    "text": "aggregated inside the ICS console by itself you do not need to go super cool to crowd watch loads and to start to to",
    "start": "1960550",
    "end": "1967250"
  },
  {
    "text": "filter out across your many different lock strains so that was a couple of",
    "start": "1967250",
    "end": "1974090"
  },
  {
    "text": "best practice about looking about infrastructure as code about tasks",
    "start": "1974090",
    "end": "1980720"
  },
  {
    "text": "definition let's see that in in real life how it works so here I have in a",
    "start": "1980720",
    "end": "1988490"
  },
  {
    "text": "minute okay yeah I mean the ec2 console let's make that bigger so that at the",
    "start": "1988490",
    "end": "1994760"
  },
  {
    "text": "end of the room you can see I have one cluster running inside a V PC it has a",
    "start": "1994760",
    "end": "2001450"
  },
  {
    "text": "funny name because it has been generated automatically by code by the cdk code that you saw on the screen",
    "start": "2001450",
    "end": "2006790"
  },
  {
    "text": "I'll just before and the key point here is the task definition so a task",
    "start": "2006790",
    "end": "2012730"
  },
  {
    "text": "definition is really the unit that allows you to run a container into the clock this is where you are going to",
    "start": "2012730",
    "end": "2018520"
  },
  {
    "text": "give us the docker image the hardware characteristic of the docker environment",
    "start": "2018520",
    "end": "2025030"
  },
  {
    "text": "you want to use but also the environment variable the first thing you need to do",
    "start": "2025030",
    "end": "2031600"
  },
  {
    "text": "is to tell us if you want to run that which Ford server or which server on ec2 you give a name to your task you",
    "start": "2031600",
    "end": "2042070"
  },
  {
    "text": "need you need permission without the permission that will be applied at",
    "start": "2042070",
    "end": "2047110"
  },
  {
    "text": "runtime and what network then you give the hardware I want two gigabytes of",
    "start": "2047110",
    "end": "2053408"
  },
  {
    "text": "memory and one virtual CPU and I will use this container image where you give",
    "start": "2053409",
    "end": "2060040"
  },
  {
    "text": "a name the repository URL maybe some hard-coded port mapping",
    "start": "2060040",
    "end": "2065520"
  },
  {
    "text": "health checks environment and environment this is where you can say",
    "start": "2065520",
    "end": "2072149"
  },
  {
    "text": "hey my DB password is either there but",
    "start": "2072150",
    "end": "2077280"
  },
  {
    "text": "it's not super secure because anyone having access to the console can see your your secret or you can just select",
    "start": "2077280",
    "end": "2085290"
  },
  {
    "text": "a value from and give the errand so the",
    "start": "2085290",
    "end": "2092429"
  },
  {
    "text": "the Amazon resource notation for a secret in secret manager so I did that",
    "start": "2092429",
    "end": "2098160"
  },
  {
    "text": "for you already and I have here two tasks one is engineered and nginx with a",
    "start": "2098160",
    "end": "2104730"
  },
  {
    "text": "secret and one nginx normal so the one with the secret as exactly that class",
    "start": "2104730",
    "end": "2113160"
  },
  {
    "text": "definition saying hey there is a non-permanent variable called secret and the secret will come from Aaron AWS",
    "start": "2113160",
    "end": "2120600"
  },
  {
    "text": "secrets manager blah blah blah blah blah blah blah blah my secret so let's have a",
    "start": "2120600",
    "end": "2127290"
  },
  {
    "text": "look at secret manager",
    "start": "2127290",
    "end": "2130340"
  },
  {
    "text": "if my secret there this is where you can define how your secret is encrypted this",
    "start": "2133690",
    "end": "2139869"
  },
  {
    "text": "is where you can define the key policies and the rotation on the key is to keep your secret secure and this is also",
    "start": "2139869",
    "end": "2147220"
  },
  {
    "text": "where you can retrieve the secret value so my secret team is this is my secret",
    "start": "2147220",
    "end": "2153789"
  },
  {
    "text": "value one two three very secret you can edit that if you have enough permission so let's say my",
    "start": "2153789",
    "end": "2160900"
  },
  {
    "text": "secret value Versalles and what time is it it's 252 and save this so this is a",
    "start": "2160900",
    "end": "2169690"
  },
  {
    "text": "new value for my my secret so that tells",
    "start": "2169690",
    "end": "2176019"
  },
  {
    "text": "definition that I have here will inject",
    "start": "2176019",
    "end": "2181599"
  },
  {
    "text": "in the environment variable called secret the value of that secret manager",
    "start": "2181599",
    "end": "2187960"
  },
  {
    "text": "and the docker container I'm using for this demo does this so it's a simple",
    "start": "2187960",
    "end": "2197410"
  },
  {
    "text": "nginx with a website and at startup time",
    "start": "2197410",
    "end": "2204730"
  },
  {
    "text": "I'm just creating a file and saying hey my secret is and I'm using the valuable",
    "start": "2204730",
    "end": "2211210"
  },
  {
    "text": "the environment variable secret and I'm storing that there so I can show you that actually it's fetching that value",
    "start": "2211210",
    "end": "2218230"
  },
  {
    "text": "at runtime and that way you do not need to embed any type of secret letter in your cluster configuration nether inside",
    "start": "2218230",
    "end": "2225910"
  },
  {
    "text": "your docker container so let's run this task run task so it will ask us where do",
    "start": "2225910",
    "end": "2235150"
  },
  {
    "text": "you want to run that test target or is here ec2 in which network to choose that",
    "start": "2235150",
    "end": "2242140"
  },
  {
    "text": "one in which subnet I want to access my my docker container for this demo so I",
    "start": "2242140",
    "end": "2247930"
  },
  {
    "text": "will run it in a public subnet so I'm asking to receive a public IP",
    "start": "2247930",
    "end": "2253720"
  },
  {
    "text": "address of course if I want to connect to that docker container and I need to define a security group a",
    "start": "2253720",
    "end": "2259820"
  },
  {
    "text": "security group it's like a firewall it's the set of networking filter rules that defines what kind of traffic can go",
    "start": "2259820",
    "end": "2266089"
  },
  {
    "text": "inside your docker container I will select an existing one which allows HTTP",
    "start": "2266089",
    "end": "2272720"
  },
  {
    "text": "traffic on port 80 so let's run that task in my cluster you can see that I",
    "start": "2272720",
    "end": "2283369"
  },
  {
    "text": "have two running tasks from a previous demo and right now it's also starting",
    "start": "2283369",
    "end": "2290109"
  },
  {
    "text": "provisioning a task for nginx secret one so the provisioning will take a few",
    "start": "2290109",
    "end": "2296750"
  },
  {
    "text": "seconds and now it's running if I'm going to do task definition I will find the IP address that that container",
    "start": "2296750",
    "end": "2303380"
  },
  {
    "text": "receive if you are really fast and you use mobile phone you can use the same IP",
    "start": "2303380",
    "end": "2309380"
  },
  {
    "text": "address to test to connect to the urn and if you connect to that you have a very basic website nothing funky there",
    "start": "2309380",
    "end": "2316910"
  },
  {
    "text": "but if I use the slash secret dot txt so I'm asking to deliver the secret so",
    "start": "2316910",
    "end": "2323990"
  },
  {
    "text": "slash secret the tip still you can see my secret is my secret this is my secret value per cell so at one time the docker",
    "start": "2323990",
    "end": "2331280"
  },
  {
    "text": "container was able to ask secret manager hey give me the value of that specific password and apply that to my container",
    "start": "2331280",
    "end": "2338630"
  },
  {
    "text": "once again the interest is to not share your password inside the cluster definition so the people managing the",
    "start": "2338630",
    "end": "2344359"
  },
  {
    "text": "cluster cannot see them and of course the people building the containers cannot see them later the developers have no access to that so that was the",
    "start": "2344359",
    "end": "2353570"
  },
  {
    "text": "first demo I wanted to show you how to create a task definition how it does definition can get a secret and how you",
    "start": "2353570",
    "end": "2359869"
  },
  {
    "text": "can schedule a specific task on your cluster so task by task it's great but",
    "start": "2359869",
    "end": "2365359"
  },
  {
    "text": "most of the time you want something a bit more complicated than than just a single task and that's why we have the",
    "start": "2365359",
    "end": "2371270"
  },
  {
    "text": "concept of service so a service it's a collection of docker container that are that have a public country point and are",
    "start": "2371270",
    "end": "2378619"
  },
  {
    "text": "registered to a load balancer so when you create a service there is a load balancer there",
    "start": "2378619",
    "end": "2385440"
  },
  {
    "text": "and you might have multiple docker container and the cluster will manage this docker container for you so for",
    "start": "2385440",
    "end": "2391890"
  },
  {
    "text": "example here you see the load balancing part you see the subnet part you see the",
    "start": "2391890",
    "end": "2397530"
  },
  {
    "text": "tasks that are part of that service I have two tasks if I'm killing one task the cluster will automatically replace",
    "start": "2397530",
    "end": "2404540"
  },
  {
    "text": "that task for me so let's go to the task in the cluster I can kill my secret and",
    "start": "2404540",
    "end": "2409560"
  },
  {
    "text": "let's kill another one so now I have only one container running and in a few",
    "start": "2409560",
    "end": "2416700"
  },
  {
    "text": "saddam's which looks terribly long when I'm doing the demo in front of an audience but within a matter of seconds",
    "start": "2416700",
    "end": "2422550"
  },
  {
    "text": "really the cluster will detect here you told me that you need to have two containers running for that specific",
    "start": "2422550",
    "end": "2428760"
  },
  {
    "text": "task there is only one known so it will automatically restart a new container and register that container to the load",
    "start": "2428760",
    "end": "2435030"
  },
  {
    "text": "balancer to start to send traffic to that to that new container while it's",
    "start": "2435030",
    "end": "2442950"
  },
  {
    "text": "doing that let's go to see the load balancer the load balancers you know it's hidden under the ec2 console so see",
    "start": "2442950",
    "end": "2452340"
  },
  {
    "text": "there is a link here there is a link to the security group the target groups are",
    "start": "2452340",
    "end": "2457980"
  },
  {
    "text": "in so in the target group you can see",
    "start": "2457980",
    "end": "2463440"
  },
  {
    "text": "the different targets right now there is only one which is healthy and in a few seconds there will be a second one that",
    "start": "2463440",
    "end": "2469500"
  },
  {
    "text": "will be added over there let's test that application if I for that I need the URL",
    "start": "2469500",
    "end": "2476160"
  },
  {
    "text": "of the load balancer so I'm going to copy/paste the DNS name of my load",
    "start": "2476160",
    "end": "2481200"
  },
  {
    "text": "balancer here and I have the same application there the last thing I would",
    "start": "2481200",
    "end": "2487650"
  },
  {
    "text": "like to demo is how to change that I told you about code deploy which is the",
    "start": "2487650",
    "end": "2494700"
  },
  {
    "text": "service that allows you to deploy automatically change but to have code",
    "start": "2494700",
    "end": "2499800"
  },
  {
    "text": "deploy to work effectively you need also a pipeline so a pipeline it's like a workflow that will trigger when you",
    "start": "2499800",
    "end": "2504930"
  },
  {
    "text": "change something in your source code will run the build for you and we run will run the deployment for you so here",
    "start": "2504930",
    "end": "2511950"
  },
  {
    "text": "I have a very simple deployment pipeline with a source on github so this demo",
    "start": "2511950",
    "end": "2518119"
  },
  {
    "text": "the doctor file in the code is just hosted here on my github repository we",
    "start": "2518119",
    "end": "2524990"
  },
  {
    "text": "have a build phase that will actually build the container for for us and deploy phase that will deploy the",
    "start": "2524990",
    "end": "2531800"
  },
  {
    "text": "container for us so let's change something in my app I will change",
    "start": "2531800",
    "end": "2537619"
  },
  {
    "text": "something in the HTML file so it's visible what can we change we can change",
    "start": "2537619",
    "end": "2542900"
  },
  {
    "text": "instead of having a header one either two header three let's just have one two",
    "start": "2542900",
    "end": "2547910"
  },
  {
    "text": "three as title maybe I should make this bigger so that you can follow as well so",
    "start": "2547910",
    "end": "2557290"
  },
  {
    "text": "three so I made a change in my index dot HTML I will get add that change I will",
    "start": "2557290",
    "end": "2565940"
  },
  {
    "text": "commit that change and push that change to my git repo so the three commands",
    "start": "2565940",
    "end": "2572300"
  },
  {
    "text": "here git add git commit git pull let's arrive to my git repo and you can see",
    "start": "2572300",
    "end": "2580160"
  },
  {
    "text": "that something has been changed no 11 so",
    "start": "2580160",
    "end": "2585859"
  },
  {
    "text": "going to go so it's really a deployment that just happened know if I'm going",
    "start": "2585859",
    "end": "2590930"
  },
  {
    "text": "back to my pipeline you can see that the pipeline has detected change just know and as transition to a build and the",
    "start": "2590930",
    "end": "2599390"
  },
  {
    "text": "build is super easy you define the build script so in my project I have a built file that defines the the values",
    "start": "2599390",
    "end": "2606290"
  },
  {
    "text": "commands I want to do for the build in my case the most important one is docker build docker tag and docker push to push",
    "start": "2606290",
    "end": "2614780"
  },
  {
    "text": "the image to my repository so this is happening in the cloud right now you can follow the progress of causing code",
    "start": "2614780",
    "end": "2621770"
  },
  {
    "text": "build and see the log file of all these",
    "start": "2621770",
    "end": "2627109"
  },
  {
    "text": "commands that are running there and looks like it's finish the build is",
    "start": "2627109",
    "end": "2632329"
  },
  {
    "text": "finished its succeed cool so if we go back to a pipeline pipeline will realize",
    "start": "2632329",
    "end": "2638510"
  },
  {
    "text": "that the build is finish in a few second and we'll go to the next phase which is deployed",
    "start": "2638510",
    "end": "2646000"
  },
  {
    "text": "let's go back to my cluster in that time remember I was waiting the cluster to start a new task this task hopefully has",
    "start": "2649950",
    "end": "2658060"
  },
  {
    "text": "been started known yes not only my replacement task has been started but you see that the deployment is starting",
    "start": "2658060",
    "end": "2664240"
  },
  {
    "text": "as well so my build create a new task definition because task definition are immutable I have a new container imager",
    "start": "2664240",
    "end": "2670630"
  },
  {
    "text": "it's a new test definition version 21 it's creating two instance of that container on my cluster its provisioning",
    "start": "2670630",
    "end": "2678400"
  },
  {
    "text": "right now if i refresh I guess it will be running pending first and then running in a few seconds as soon as they",
    "start": "2678400",
    "end": "2685630"
  },
  {
    "text": "will be running my application will accept traffic from the old version and",
    "start": "2685630",
    "end": "2692020"
  },
  {
    "text": "the new version so if I reload this page I should eventually start to see some",
    "start": "2692020",
    "end": "2698790"
  },
  {
    "text": "requests with one two three and some other requests we've had a one headed to",
    "start": "2698790",
    "end": "2704260"
  },
  {
    "text": "header three but for that I need to wait for my two other container to be running",
    "start": "2704260",
    "end": "2710140"
  },
  {
    "text": "yes they are running so depending yeah no you have one two three that's the new",
    "start": "2710140",
    "end": "2715420"
  },
  {
    "text": "version I reload is the old version I reload it's the new version and so on so",
    "start": "2715420",
    "end": "2722860"
  },
  {
    "text": "what the cluster is doing right now it's draining connection to the old application so it's waiting to all TCP",
    "start": "2722860",
    "end": "2730030"
  },
  {
    "text": "connection to finish on the old version of the application and as soon as all these TCP connection are finished it",
    "start": "2730030",
    "end": "2736750"
  },
  {
    "text": "will terminate version 20 of my nginx container and I will have only two",
    "start": "2736750",
    "end": "2744090"
  },
  {
    "text": "container running two tasks running again and all my requests will be served",
    "start": "2744090",
    "end": "2749380"
  },
  {
    "text": "by by the new version of the application",
    "start": "2749380",
    "end": "2755040"
  },
  {
    "text": "that process can takes a few minutes yeah now it's done it's only 21 there is",
    "start": "2755040",
    "end": "2760840"
  },
  {
    "text": "no more 20 there so that's a rollup and if I really reload now I only have",
    "start": "2760840",
    "end": "2767020"
  },
  {
    "text": "the new verse I don't have the ocean reloading as much as I can",
    "start": "2767020",
    "end": "2772750"
  },
  {
    "text": "so that was the sudden thing I wanted to show you today it's how you can actually",
    "start": "2772750",
    "end": "2782180"
  },
  {
    "text": "automate your process of building and deploying to the cloud using AWS code commit code deploy called pipeline to",
    "start": "2782180",
    "end": "2789200"
  },
  {
    "text": "coordinate all that my pipeline here was super simple chainsaws build deploy of course it can be much more complicated",
    "start": "2789200",
    "end": "2795590"
  },
  {
    "text": "than that deploy to test before going to production if manual approval before going to the",
    "start": "2795590",
    "end": "2802490"
  },
  {
    "text": "next phase you make it as complex or as simple as you want I hope I inspire you",
    "start": "2802490",
    "end": "2808100"
  },
  {
    "text": "a bit and that you want to try to test or to adopt one of these few best practice in your development do not",
    "start": "2808100",
    "end": "2814430"
  },
  {
    "text": "hesitate to reach out to us on twitter sep stole a CVS vo and i will stay around a while if you have a question i",
    "start": "2814430",
    "end": "2820700"
  },
  {
    "text": "can take a couple of questions offline after this thank you very much [Applause]",
    "start": "2820700",
    "end": "2827380"
  }
]