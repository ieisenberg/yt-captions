[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "hello and welcome to accelerate database development and testing with Amazon",
    "start": "410",
    "end": "5970"
  },
  {
    "text": "Aurora my name is Vlad and presenting with me today here is Steve were both",
    "start": "5970",
    "end": "11130"
  },
  {
    "text": "solutions architects with AWS focusing on databases and specifically all RORO",
    "start": "11130",
    "end": "19130"
  },
  {
    "start": "20000",
    "end": "194000"
  },
  {
    "text": "so why are we having this session today what we really see is that you know",
    "start": "20420",
    "end": "26189"
  },
  {
    "text": "there's no longer so much of a segmentation between the responsibilities of the different roles that are involved in applications you",
    "start": "26189",
    "end": "32730"
  },
  {
    "text": "have developers you have DevOps folks you have DBAs you have system administrators and they're all",
    "start": "32730",
    "end": "38879"
  },
  {
    "text": "collectively responsible for things like the architecture of the application including the architecture of the",
    "start": "38879",
    "end": "44879"
  },
  {
    "text": "database deployment and automation aspects of databases optimizing and",
    "start": "44879",
    "end": "53550"
  },
  {
    "text": "improving the outcomes of they've and test scenarios and pipelines focusing on",
    "start": "53550",
    "end": "62280"
  },
  {
    "text": "performance from the get-go from the architecture and implementation and development side and generally you know",
    "start": "62280",
    "end": "68460"
  },
  {
    "text": "keeping costs as lean as possible so all of these responsibilities you know they're no longer segmented where you",
    "start": "68460",
    "end": "75720"
  },
  {
    "text": "know the DBA is worried about the operational aspects the main things of the databases and developers are just",
    "start": "75720",
    "end": "81150"
  },
  {
    "text": "you know trying to get their applications running so it's more of a",
    "start": "81150",
    "end": "87330"
  },
  {
    "text": "collaborative effort right and in today's world with databases such as",
    "start": "87330",
    "end": "93930"
  },
  {
    "text": "Amazon Arora in cloud environments you know we do provide native capabilities that help you achieve this goal easier",
    "start": "93930",
    "end": "102329"
  },
  {
    "text": "and faster and being generally a lot more agile so when we're thinking about",
    "start": "102329",
    "end": "109640"
  },
  {
    "text": "optimizing development and testing outcomes from a database perspective if",
    "start": "109640",
    "end": "115200"
  },
  {
    "text": "we're looking at kind of that entire lifecycle of an application you typically want to deploy an application",
    "start": "115200",
    "end": "121049"
  },
  {
    "text": "and adopt the database you're thinking first well gee what is the most effective way to architect this how do I",
    "start": "121049",
    "end": "128819"
  },
  {
    "text": "plan it what features am I going to use what is the architecture going to look like and then from there",
    "start": "128819",
    "end": "136290"
  },
  {
    "text": "you transition into deployment and automation how do I make how do I take",
    "start": "136290",
    "end": "142500"
  },
  {
    "text": "this and deploy it how do I make it repeatable repeatable so I can have many",
    "start": "142500",
    "end": "149280"
  },
  {
    "text": "numbers of pre production environments that are used for development testing q and so on and so forth everything being",
    "start": "149280",
    "end": "155340"
  },
  {
    "text": "repeatable everything looking at relevant datasets and then finally",
    "start": "155340",
    "end": "161610"
  },
  {
    "text": "transitioning into obviously production when you're developing you want to make sure that you're developing with the",
    "start": "161610",
    "end": "168680"
  },
  {
    "text": "scale at production in mind right you want to make sure that your queries are",
    "start": "168680",
    "end": "174150"
  },
  {
    "text": "optimized from the get-go it's not an afterthought that some DBA somewhere has to worry about once you've already built",
    "start": "174150",
    "end": "180000"
  },
  {
    "text": "the application that no longer really happens you're right and then of course",
    "start": "180000",
    "end": "185250"
  },
  {
    "text": "cost is a big consideration across the board for all of these activities so",
    "start": "185250",
    "end": "190340"
  },
  {
    "text": "let's look at how this impacts decisions around our or and how best to leverage",
    "start": "190340",
    "end": "197329"
  },
  {
    "start": "194000",
    "end": "206000"
  },
  {
    "text": "technologies like Amazon Arora for these type of use cases and let's cover architecture and deployment automation",
    "start": "197329",
    "end": "204030"
  },
  {
    "text": "first really quick just for the folks that might be perhaps not as familiar",
    "start": "204030",
    "end": "211109"
  },
  {
    "start": "206000",
    "end": "377000"
  },
  {
    "text": "with Amazon now or I said our amazon aurora is a cloud native database so",
    "start": "211109",
    "end": "217650"
  },
  {
    "text": "what we've done is we've taken you know the traditional mostly monolithic model",
    "start": "217650",
    "end": "224130"
  },
  {
    "text": "of a relational database and adopted and implemented a lot of the scale out cloud",
    "start": "224130",
    "end": "231540"
  },
  {
    "text": "patterns in the process of reimagining so you know Amazon Aurora has a scale",
    "start": "231540",
    "end": "238200"
  },
  {
    "text": "out distributed storage architecture with purpose-built storage services that",
    "start": "238200",
    "end": "245760"
  },
  {
    "text": "are designed to handle database type workloads and database type interactions",
    "start": "245760",
    "end": "251370"
  },
  {
    "text": "and it's a service-oriented architecture leveraging AWS services its base it's",
    "start": "251370",
    "end": "257519"
  },
  {
    "text": "built on top of the same core AWS services that we use and provide to our",
    "start": "257519",
    "end": "263490"
  },
  {
    "text": "customers as well the compute nodes are provided through ec2 the storages build our own",
    "start": "263490",
    "end": "269310"
  },
  {
    "text": "services it integrates with Identity and Access Management for you know",
    "start": "269310",
    "end": "275900"
  },
  {
    "text": "potentially authentication as well it integrates with lamda invoking a",
    "start": "275900",
    "end": "283400"
  },
  {
    "text": "synchronous or synchronous lambda functions directly from your database it integrates with s3 for imports and",
    "start": "283400",
    "end": "289620"
  },
  {
    "text": "exports so it has a wide field of integration with our ecosystem of AWS",
    "start": "289620",
    "end": "297449"
  },
  {
    "text": "services but most importantly it's a fully managed service where we automate",
    "start": "297449",
    "end": "304650"
  },
  {
    "text": "the administrative tasks part of the storage layer so you don't have to worry about things like backups things like",
    "start": "304650",
    "end": "311729"
  },
  {
    "text": "patching I available set up high availability and maintain high",
    "start": "311729",
    "end": "316979"
  },
  {
    "text": "availability all of that and much more is provided through the service and all",
    "start": "316979",
    "end": "324570"
  },
  {
    "text": "of these you know cloud native capabilities really do make it easier for you to use which makes you in turn a",
    "start": "324570",
    "end": "331830"
  },
  {
    "text": "lot more agile and it makes Amazon Aurore are really really fast as well because we're doing more with",
    "start": "331830",
    "end": "339289"
  },
  {
    "text": "fundamentally with less resources we're optimizing so you'll see that for",
    "start": "339289",
    "end": "344970"
  },
  {
    "text": "example Amazon Aurora can achieve five times the throughput of a traditional",
    "start": "344970",
    "end": "352500"
  },
  {
    "text": "Community Edition of my sequel implementation that is similar in scale",
    "start": "352500",
    "end": "357599"
  },
  {
    "text": "right and you can achieve three times more throughput than a comparable Posterous environment open source",
    "start": "357599",
    "end": "365280"
  },
  {
    "text": "prosperous environment but when we're thinking in terms of development and testing there's really three",
    "start": "365280",
    "end": "371419"
  },
  {
    "text": "characteristics that you know from an architectural point of view that we like",
    "start": "371419",
    "end": "378210"
  },
  {
    "start": "377000",
    "end": "538000"
  },
  {
    "text": "to key on you know that are really important whenever you're planning in your architecture environment one is the",
    "start": "378210",
    "end": "384210"
  },
  {
    "text": "fact that I mentioned that the log structure is custom built and it's log structured and is distributed but really",
    "start": "384210",
    "end": "389910"
  },
  {
    "text": "all that storage volume that you have one hour an hour or a cluster is shared",
    "start": "389910",
    "end": "395190"
  },
  {
    "text": "by all of the cluster nodes all of the cluster knows the reader and any number of Reid replicas you might have",
    "start": "395190",
    "end": "401569"
  },
  {
    "text": "up to 15 they all see the same data structures and from that perspective the",
    "start": "401569",
    "end": "410929"
  },
  {
    "text": "readers in an Aurora cluster are strictly read-only I mean when you're",
    "start": "410929",
    "end": "416449"
  },
  {
    "text": "thinking in terms of a more traditional my sequel environment for example if you",
    "start": "416449",
    "end": "421639"
  },
  {
    "text": "want to read scaling you achieve that using binary log replication which means",
    "start": "421639",
    "end": "427729"
  },
  {
    "text": "you have a different instance where you replicate that replicates your binary",
    "start": "427729",
    "end": "432889"
  },
  {
    "text": "logs to that instance then applies all of those logical changes to its own storage there's an overhead for doing",
    "start": "432889",
    "end": "440989"
  },
  {
    "text": "that and if you have many read replicas again you know each one has its own storage it one has to do that work in",
    "start": "440989",
    "end": "446899"
  },
  {
    "text": "our Ora that doesn't happen they all see the same storage and while the reader know the writer does send its change",
    "start": "446899",
    "end": "454399"
  },
  {
    "text": "stream to the readers that's strictly just to inform the reader of you know",
    "start": "454399",
    "end": "460399"
  },
  {
    "text": "the new state of the database the reader doesn't actually have to apply those changes it just keeps its buffer pool",
    "start": "460399",
    "end": "467689"
  },
  {
    "text": "its page cache up-to-date using that stream and if a change isn't it's in its page cache it simply ignores that and",
    "start": "467689",
    "end": "475369"
  },
  {
    "text": "doesn't do any more processing with that data so our does more with less and what",
    "start": "475369",
    "end": "482089"
  },
  {
    "text": "that also means is we can optimize for higher throughput for higher concurrency",
    "start": "482089",
    "end": "487309"
  },
  {
    "text": "there's less i/o there's less network traffic going across that cluster",
    "start": "487309",
    "end": "492919"
  },
  {
    "text": "between the reader and the writer nodes so we can have that node do a little bit",
    "start": "492919",
    "end": "500509"
  },
  {
    "text": "more every one of those nodes so you have higher concurrency rates you have higher levels of throughput compared to",
    "start": "500509",
    "end": "507079"
  },
  {
    "text": "a traditional kind of my sequel or Postgres environment as individual query",
    "start": "507079",
    "end": "515809"
  },
  {
    "text": "when you take it in isolation may be faster in our Aurora than in a comparable environment but you can now",
    "start": "515809",
    "end": "523189"
  },
  {
    "text": "run usually more of those concurrently in our origin in an traditional environment that's why we mean by",
    "start": "523189",
    "end": "529990"
  },
  {
    "text": "optimizing from for high throughput so for an architectural perspective when",
    "start": "529990",
    "end": "535370"
  },
  {
    "text": "I look at you know the foundational architectures that that customers start",
    "start": "535370",
    "end": "541040"
  },
  {
    "start": "538000",
    "end": "829000"
  },
  {
    "text": "with whenever they're adopting our aura there's really two foundational architectures in a cluster with multiple",
    "start": "541040",
    "end": "549050"
  },
  {
    "text": "nodes and if you either treat all of your readers the same and your load balance across all of them right you",
    "start": "549050",
    "end": "556010"
  },
  {
    "text": "they're not distinguishable so to speak each one of them can handle all the load",
    "start": "556010",
    "end": "561500"
  },
  {
    "text": "for your application or you don't so let's see what happens if you do treat",
    "start": "561500",
    "end": "566630"
  },
  {
    "text": "them the same usually in that type of a cluster all",
    "start": "566630",
    "end": "572870"
  },
  {
    "text": "those reader nodes have the same size as the master because all of those reader any of those reader nodes can be a",
    "start": "572870",
    "end": "579430"
  },
  {
    "text": "failover target right and the application uses the cluster endpoints a",
    "start": "579430",
    "end": "585940"
  },
  {
    "text": "cluster endpoint itself always points to the writer node even if there's a failover it will follow that writer and",
    "start": "585940",
    "end": "592790"
  },
  {
    "text": "then the application also uses the reader endpoint which is a cluster level endpoint that does round-robin across",
    "start": "592790",
    "end": "599240"
  },
  {
    "text": "all of your readers and then you can use auto scaling to add and remove reader",
    "start": "599240",
    "end": "605960"
  },
  {
    "text": "nodes based on demand if your application needs that level of read scaling and one tip that we can offer to",
    "start": "605960",
    "end": "614870"
  },
  {
    "text": "customers that use this architecture is you do want to monitor the topology of",
    "start": "614870",
    "end": "620180"
  },
  {
    "text": "your cluster for faster failover traditionally database drivers for my",
    "start": "620180",
    "end": "627050"
  },
  {
    "text": "sequel aren't really cluster aware all right there's really only one today that actually has cluster awareness it's the",
    "start": "627050",
    "end": "633320"
  },
  {
    "text": "Morea DB connector for J and if you don't use that platform obviously you",
    "start": "633320",
    "end": "638840"
  },
  {
    "text": "would want to implement some intelligence into the application layer and we'll talk a little bit more about",
    "start": "638840",
    "end": "644900"
  },
  {
    "text": "connection management and making fail",
    "start": "644900",
    "end": "650720"
  },
  {
    "text": "overs as quick and as unobtrusive as possible later in the talk",
    "start": "650720",
    "end": "656890"
  },
  {
    "text": "and of course the other architecture is if you treat your readers differently",
    "start": "656890",
    "end": "664060"
  },
  {
    "text": "they all are served friends and very specific purposes so for example you might have a cluster",
    "start": "664060",
    "end": "670160"
  },
  {
    "text": "with a master node and you have a reed replica that's the same size as the Masters it's in a different availability",
    "start": "670160",
    "end": "676580"
  },
  {
    "text": "zone and is dedicated as a failover target it's just there in case the master has any sort of disruption or",
    "start": "676580",
    "end": "683480"
  },
  {
    "text": "issues but you might have also a whole bunch of other readers there that serve different workloads a reporting server",
    "start": "683480",
    "end": "689270"
  },
  {
    "text": "for example and for this architecture",
    "start": "689270",
    "end": "694700"
  },
  {
    "text": "the failover tier is matter because that's how you inform to the cluster",
    "start": "694700",
    "end": "700700"
  },
  {
    "text": "that you have a desire of as far as which node should be the preferred failover target and which node is less",
    "start": "700700",
    "end": "708410"
  },
  {
    "text": "preferred failover target you can never exclude a node and set it aside that it",
    "start": "708410",
    "end": "713930"
  },
  {
    "text": "can never be a failover target but you can establish an order of preference and",
    "start": "713930",
    "end": "719740"
  },
  {
    "text": "in this case applications would use custom cluster endpoints right it's a",
    "start": "719740",
    "end": "727310"
  },
  {
    "text": "feature that has been launched about a month ago that allows you to essentially",
    "start": "727310",
    "end": "732980"
  },
  {
    "text": "build custom endpoints that target different nodes in your cluster and you",
    "start": "732980",
    "end": "739070"
  },
  {
    "text": "can use that to control which applications interact with which ones of",
    "start": "739070",
    "end": "744680"
  },
  {
    "text": "the nodes there's also a little bit of a caveat to this architecture because this",
    "start": "744680",
    "end": "750440"
  },
  {
    "text": "is a shared storage cluster all of the data structures including the undo log",
    "start": "750440",
    "end": "755870"
  },
  {
    "text": "is shared between all the nodes so that means that if you are in a position where you have workers I have very you",
    "start": "755870",
    "end": "762800"
  },
  {
    "text": "know unoptimized long-running queries ad-hoc queries bad queries in general it",
    "start": "762800",
    "end": "769480"
  },
  {
    "text": "even if you run them on the reader it might still impact the performance of your writer or other elements in the",
    "start": "769480",
    "end": "776240"
  },
  {
    "text": "cluster so that's an important to know because you want to make sure that those",
    "start": "776240",
    "end": "785209"
  },
  {
    "text": "types of workloads don't impact your your other nodes and your other",
    "start": "785209",
    "end": "790610"
  },
  {
    "text": "workloads running on the same cluster so now that we understand kind of how the architecture works and what's our",
    "start": "790610",
    "end": "797000"
  },
  {
    "text": "starting point right of course on these architectures you can on top of it you cannot cross region",
    "start": "797000",
    "end": "803060"
  },
  {
    "text": "read replicas you can expand them with the types of features that were launched",
    "start": "803060",
    "end": "809060"
  },
  {
    "text": "this morning the global tables where we have physical replicas in other regions so you can build on top of this",
    "start": "809060",
    "end": "814970"
  },
  {
    "text": "architecture to scale it to the needs of the application and other types of kind",
    "start": "814970",
    "end": "823459"
  },
  {
    "text": "of requirements that you may have from a compliance point of view for example but",
    "start": "823459",
    "end": "828740"
  },
  {
    "text": "what about automation and deployment now a lot of you are using automation today",
    "start": "828740",
    "end": "834860"
  },
  {
    "start": "829000",
    "end": "910000"
  },
  {
    "text": "for various parts of their applications typically we rarely encounter customers",
    "start": "834860",
    "end": "840470"
  },
  {
    "text": "that's go into the console and pointing clicks manually spin up production clusters right and the reason for that",
    "start": "840470",
    "end": "847579"
  },
  {
    "text": "is relatively simple you want to reduce the risk of human errors you want to ensure that you have repeatability",
    "start": "847579",
    "end": "853029"
  },
  {
    "text": "especially if you want to provision many pre-production environments that are all consistent with what production looks",
    "start": "853029",
    "end": "859850"
  },
  {
    "text": "like and there is you know auditability accountability and change management that comes into play there as well you",
    "start": "859850",
    "end": "866389"
  },
  {
    "text": "always know what changes are made because they're captured somewhere right either in a form of a script or in the",
    "start": "866389",
    "end": "872000"
  },
  {
    "text": "form of a template that of evolves over time right but the two ways that you can",
    "start": "872000",
    "end": "878600"
  },
  {
    "text": "accomplish that generally with any sort of workload is either you do all declarative automation with cloud",
    "start": "878600",
    "end": "883790"
  },
  {
    "text": "formation or terraform and or tools like that where you specify how your infrastructure is supposed to look like",
    "start": "883790",
    "end": "890000"
  },
  {
    "text": "at the end including the database in this case what's the cluster look like how many readers and points and so forth",
    "start": "890000",
    "end": "896839"
  },
  {
    "text": "and so on and so forth or it's procedural you have a set of scripts that you invoke the api's do this do",
    "start": "896839",
    "end": "903350"
  },
  {
    "text": "that you know bring it from state a to state B but Amazon Aurora clusters are",
    "start": "903350",
    "end": "912800"
  },
  {
    "start": "910000",
    "end": "1089000"
  },
  {
    "text": "stateful resources you know it's a cluster store data in it over time you",
    "start": "912800",
    "end": "919430"
  },
  {
    "text": "know that state changes and the big question here is to what extent those",
    "start": "919430",
    "end": "925040"
  },
  {
    "text": "tools that you're using reflect that and track that state so let's look for",
    "start": "925040",
    "end": "930260"
  },
  {
    "text": "example at different declarative automation things like cloud formation for example you would build a template and",
    "start": "930260",
    "end": "937340"
  },
  {
    "text": "you tell the tool how that infrastructure is supposed to look like at the end right and the tool then goes",
    "start": "937340",
    "end": "944930"
  },
  {
    "text": "in and provisions the resources in the right order based on its optimizations in its logic the most optimal way of",
    "start": "944930",
    "end": "951410"
  },
  {
    "text": "getting you there and then six months later you need to make a change you update your template your light",
    "start": "951410",
    "end": "957350"
  },
  {
    "text": "CloudFormation or tariffs or whatever the tool is go and you know make those changes right now the question there is",
    "start": "957350",
    "end": "964970"
  },
  {
    "text": "does cloud formation or that tool reflect the state or data changes that you've made over that period of time to",
    "start": "964970",
    "end": "971840"
  },
  {
    "text": "your cluster and the answer is no most of the time right so if you're in a",
    "start": "971840",
    "end": "976970"
  },
  {
    "text": "production environment and you want to minimize downtime with any sort of change that you're making to the",
    "start": "976970",
    "end": "982340"
  },
  {
    "text": "database you gotta ensure that the tool that you're using can actually handle that or",
    "start": "982340",
    "end": "987950"
  },
  {
    "text": "actually factors that tie those types of decisions it it may or it may not and if",
    "start": "987950",
    "end": "993260"
  },
  {
    "text": "it's not then you need to build procedures and run books and other",
    "start": "993260",
    "end": "998810"
  },
  {
    "text": "alternative ways of tracking that outside of it the common question is for",
    "start": "998810",
    "end": "1003850"
  },
  {
    "text": "example you know how do you do a point-in-time restore for example right if you're if you're all raw a cluster is",
    "start": "1003850",
    "end": "1011560"
  },
  {
    "text": "managed by cloud formation and somebody accidentally deleted a table one year",
    "start": "1011560",
    "end": "1017080"
  },
  {
    "text": "after you've launched it how do you do a point-in-time restore and do that using",
    "start": "1017080",
    "end": "1022180"
  },
  {
    "text": "cloud formation in many cases you can't seamlessly do that right it would be an external action that you would have to",
    "start": "1022180",
    "end": "1029589"
  },
  {
    "text": "perform outside of cloud formation with procedural you have again a different",
    "start": "1029589",
    "end": "1036010"
  },
  {
    "text": "set of concerns not unnecessarily one is better than the other but with procedural automation you got to think about the steps that I'm defining and",
    "start": "1036010",
    "end": "1046350"
  },
  {
    "text": "make sure that you're validating that you know initial state meets those",
    "start": "1046350",
    "end": "1054790"
  },
  {
    "text": "expectations because then you face otherwise you face a garbage in garbage out type problem if you know if you",
    "start": "1054790",
    "end": "1061120"
  },
  {
    "text": "apply the set of transformations and steps to your infrastructure to get you from point A to B and it turns out that",
    "start": "1061120",
    "end": "1067060"
  },
  {
    "text": "your there is not in the state that's you know an expected state from a point a",
    "start": "1067060",
    "end": "1073059"
  },
  {
    "text": "perspective you might also not get necessarily to be so there's different kind of considerations but typically",
    "start": "1073059",
    "end": "1079830"
  },
  {
    "text": "tools like cloud formation and terraform are very very popular as far as",
    "start": "1079830",
    "end": "1085120"
  },
  {
    "text": "deploying and managing our clusters so whenever you're using something like cloud formation there's a couple of",
    "start": "1085120",
    "end": "1091270"
  },
  {
    "text": "things you got to think about check the future gaps see if there is any gaps we",
    "start": "1091270",
    "end": "1097030"
  },
  {
    "text": "doing what cloud formation can support versus what the API scan support very",
    "start": "1097030",
    "end": "1102340"
  },
  {
    "text": "recently we made a lot of improvements to that so you can do all of the cool new features that are available now in",
    "start": "1102340",
    "end": "1107830"
  },
  {
    "text": "our aura you can support them using cloud formation as well natively they're still there might still be some gaps and",
    "start": "1107830",
    "end": "1113530"
  },
  {
    "text": "at different times as we're launching new features you might find that cloud",
    "start": "1113530",
    "end": "1118750"
  },
  {
    "text": "formation may trail a little bit behind and at that point if those gaps are relevant to you are there any ways you",
    "start": "1118750",
    "end": "1124780"
  },
  {
    "text": "can work around them using cloud formation custom resources for example",
    "start": "1124780",
    "end": "1130059"
  },
  {
    "text": "where you have for example lambda function invoke the API is to bridge that gap does that make sense in some",
    "start": "1130059",
    "end": "1138010"
  },
  {
    "text": "cases it does and it works very well but there's also aspects and considerations around ordering in what order do I",
    "start": "1138010",
    "end": "1145390"
  },
  {
    "text": "execute the steps right for example right now if you want to assign a role",
    "start": "1145390",
    "end": "1150429"
  },
  {
    "text": "which you need if you want to invoke lambda functions or interact with s3 for import/export from an our cluster that",
    "start": "1150429",
    "end": "1158679"
  },
  {
    "text": "is still not natively supported in cloud formation so you would use a custom resource but you have to invoke that",
    "start": "1158679",
    "end": "1165850"
  },
  {
    "text": "custom resource before you provision the nodes of your clustering CloudFormation",
    "start": "1165850",
    "end": "1171150"
  },
  {
    "text": "because otherwise it's going to take much long alright one if you do it after that and",
    "start": "1171150",
    "end": "1176530"
  },
  {
    "text": "the cluster change is happening and then that cluster changing folks like a",
    "start": "1176530",
    "end": "1182409"
  },
  {
    "text": "reconfiguration of your nodes and that will take a little bit longer so timing is also important and ordering is",
    "start": "1182409",
    "end": "1188980"
  },
  {
    "text": "important and of course if you need minimal downtime production work flows",
    "start": "1188980",
    "end": "1194740"
  },
  {
    "text": "right if you want to do a point in time restore and update to an upgrade for example hour or four from five point six",
    "start": "1194740",
    "end": "1201520"
  },
  {
    "text": "and goto 5.7 right on the my sequel side you can't do that directly in natively",
    "start": "1201520",
    "end": "1208990"
  },
  {
    "text": "in CloudFormation without a more extended downtime right",
    "start": "1208990",
    "end": "1215470"
  },
  {
    "text": "if you want to do minimal downtime in that type of a scenario you would have to make some changes in cloud formation",
    "start": "1215470",
    "end": "1221890"
  },
  {
    "text": "like provisioning a new cluster 5.7 out of a snapshot from the old one change",
    "start": "1221890",
    "end": "1227530"
  },
  {
    "text": "your template to have that new cluster but then you also want to do bin lock replication which is an action outside",
    "start": "1227530",
    "end": "1232660"
  },
  {
    "text": "of cloud formation and you have to worry about things like how do I catch this",
    "start": "1232660",
    "end": "1239800"
  },
  {
    "text": "and how do I record these external actions in a way that then later",
    "start": "1239800",
    "end": "1245350"
  },
  {
    "text": "somebody can audit and see that those actions occurred right from an audit ability point of view and what",
    "start": "1245350",
    "end": "1252010"
  },
  {
    "text": "automation and other scripting I can use to supplement cloud formation with for",
    "start": "1252010",
    "end": "1257380"
  },
  {
    "text": "example in that use case so there's many different considerations of this type",
    "start": "1257380",
    "end": "1262510"
  },
  {
    "text": "that come into play so now that we understand a little bit how the architecture side and automation side",
    "start": "1262510",
    "end": "1271480"
  },
  {
    "text": "works let's look at some of these features that are helping you be more",
    "start": "1271480",
    "end": "1278050"
  },
  {
    "text": "agile from a dev and test perspective and the reasons for that are because",
    "start": "1278050",
    "end": "1283780"
  },
  {
    "start": "1281000",
    "end": "1458000"
  },
  {
    "text": "we've actually seen a lot of anti patterns you know in our jobs working",
    "start": "1283780",
    "end": "1291460"
  },
  {
    "text": "with customers like you and this is something that isn't necessarily you",
    "start": "1291460",
    "end": "1296559"
  },
  {
    "text": "know affects one or the other but every one of us has experience at some point working with an application where the testing was done on very tiny subsets",
    "start": "1296559",
    "end": "1303309"
  },
  {
    "text": "not relevant for production scale cuz you know you didn't have the ability to",
    "start": "1303309",
    "end": "1310300"
  },
  {
    "text": "simulate the scale of production and test environment so this is an anti-pattern because whenever you're",
    "start": "1310300",
    "end": "1316270"
  },
  {
    "text": "tuning your performance or is queries what you expect in development and testing may not be reflective of the",
    "start": "1316270",
    "end": "1322240"
  },
  {
    "text": "production scale bulk exports of data from live production systems is also a",
    "start": "1322240",
    "end": "1327850"
  },
  {
    "text": "pain point because they are disruptive right if you're downloading a lot of data from your production data",
    "start": "1327850",
    "end": "1334300"
  },
  {
    "text": "this it will impact performance of that production database which is limiting in",
    "start": "1334300",
    "end": "1339490"
  },
  {
    "text": "multiple ways it's limited as far as what times you when you can do those extracts which limits how fast and how",
    "start": "1339490",
    "end": "1348490"
  },
  {
    "text": "many times you can actually do them and it's limiting in other ways as well an",
    "start": "1348490",
    "end": "1353710"
  },
  {
    "text": "optimized queries on cluster readers running them I think we've we've seen",
    "start": "1353710",
    "end": "1359620"
  },
  {
    "text": "probably the longest square that we've seen running by a customer on the reader was 29 days I mean that's if you're in a",
    "start": "1359620",
    "end": "1365530"
  },
  {
    "text": "position that you're running on a relational database a query that lasts for 29 days that's problematic",
    "start": "1365530",
    "end": "1371590"
  },
  {
    "text": "architectural II but it was also impacting the performance of that entire cluster because a read view was taken",
    "start": "1371590",
    "end": "1377680"
  },
  {
    "text": "that was wild open for that entire 29 days and the size of the undo log to",
    "start": "1377680",
    "end": "1383470"
  },
  {
    "text": "ensure can you know to ensure that other",
    "start": "1383470",
    "end": "1388780"
  },
  {
    "text": "revie's its to ensure that the data was accurate as far as that transactionally",
    "start": "1388780",
    "end": "1395200"
  },
  {
    "text": "accurate for that particular long-running transaction the amount of",
    "start": "1395200",
    "end": "1400660"
  },
  {
    "text": "under logs was starting to slow down your writer node your because it was blocking the purged threads it was",
    "start": "1400660",
    "end": "1406750"
  },
  {
    "text": "blocking a garbage collection and so on so the entire cluster was starting to slow down I mean there's not",
    "start": "1406750",
    "end": "1413110"
  },
  {
    "text": "unnecessarily a number threshold where things get slow but you know there are",
    "start": "1413110",
    "end": "1420090"
  },
  {
    "text": "you know there are some limits in reason that you know should be applied within",
    "start": "1420090",
    "end": "1425140"
  },
  {
    "text": "reason so the right way of course of doing some of these development and testing experimental work is knowing the",
    "start": "1425140",
    "end": "1431560"
  },
  {
    "text": "types of features that are available in our or point in time restore is one that helps you know restoring from backups or",
    "start": "1431560",
    "end": "1438910"
  },
  {
    "text": "corrupted data or things like that database cloning in backtrack our other two big features that will help",
    "start": "1438910",
    "end": "1445710"
  },
  {
    "text": "development and testing be a lot more agile and they will also offer workload",
    "start": "1445710",
    "end": "1451930"
  },
  {
    "text": "isolation where you can isolate some of these development concerns from your production system so database cloning",
    "start": "1451930",
    "end": "1460530"
  },
  {
    "start": "1458000",
    "end": "1546000"
  },
  {
    "text": "it's a way for you to get access to fast faster access to copies of your",
    "start": "1460530",
    "end": "1466000"
  },
  {
    "text": "production database for example so you can test changes in a production in pre-production environment and see",
    "start": "1466000",
    "end": "1472900"
  },
  {
    "text": "what the impact might be and also leverage a relevant sized data set you",
    "start": "1472900",
    "end": "1479560"
  },
  {
    "text": "can also use cloning to reorganize your database if you need to add an index and",
    "start": "1479560",
    "end": "1484570"
  },
  {
    "text": "you have a very very large table you might not be able to do that realistically in production because it",
    "start": "1484570",
    "end": "1490060"
  },
  {
    "text": "might be way too you know disruptive so",
    "start": "1490060",
    "end": "1495370"
  },
  {
    "text": "you could create a clone reorge add that index on the clone catch",
    "start": "1495370",
    "end": "1501040"
  },
  {
    "text": "up using bin logs and then you know simply cut over makes things a lot simpler and it decouples that operation",
    "start": "1501040",
    "end": "1508390"
  },
  {
    "text": "from your production workload and then another cool real workflow that we see",
    "start": "1508390",
    "end": "1513520"
  },
  {
    "text": "clones use for is folks that need to do analytical I need to run a reporting and build some dashboards and analytics",
    "start": "1513520",
    "end": "1519640"
  },
  {
    "text": "every hour or every half an hour every day whatever that timeframe is those are",
    "start": "1519640",
    "end": "1525970"
  },
  {
    "text": "heavy queries that may be in production would be disruptive so you would spin up a clone run those queries dispose of the",
    "start": "1525970",
    "end": "1534460"
  },
  {
    "text": "clone and then an hour later or a day later when you need to do the same thing again rinse and repeat and you can",
    "start": "1534460",
    "end": "1541180"
  },
  {
    "text": "automate that really really well so cloning is available for both my sequel",
    "start": "1541180",
    "end": "1547510"
  },
  {
    "text": "and Posterous compatible versions of our Ora and really the cloning takes just a matter of minutes because we don't",
    "start": "1547510",
    "end": "1555790"
  },
  {
    "text": "actually copy the data the data copy",
    "start": "1555790",
    "end": "1561400"
  },
  {
    "text": "operation it really op only happens if you make a change on the clone and the",
    "start": "1561400",
    "end": "1567280"
  },
  {
    "text": "cool thing about that of course is that you're also not paying for that additional storage right it's only for",
    "start": "1567280",
    "end": "1576250"
  },
  {
    "text": "the changes that the data changes that you make on the clone that's the only thing that you will be having an",
    "start": "1576250",
    "end": "1583000"
  },
  {
    "text": "additional cost for and the operations are isolated to extend that a source the",
    "start": "1583000",
    "end": "1588730"
  },
  {
    "text": "master doesn't actually get impacted by your buyer whatever is happening on that",
    "start": "1588730",
    "end": "1597160"
  },
  {
    "text": "clone and you can have up to 15 clones inherited essentially the same source volume and another",
    "start": "1597160",
    "end": "1606460"
  },
  {
    "start": "1606000",
    "end": "1661000"
  },
  {
    "text": "feature that's a little bit complementary to this and helps agility",
    "start": "1606460",
    "end": "1611590"
  },
  {
    "text": "in terms of development and testing a lot is backtracking and backtrack is a way for you to move the database back in",
    "start": "1611590",
    "end": "1620260"
  },
  {
    "text": "time move the state of that database back in time without having to go through a costly backup restore type",
    "start": "1620260",
    "end": "1626980"
  },
  {
    "text": "operation so that's used to generally reduce the risk of any sort of database",
    "start": "1626980",
    "end": "1633159"
  },
  {
    "text": "changes at scale you try if it fails you backtrack right it also helps you",
    "start": "1633159",
    "end": "1641020"
  },
  {
    "text": "mitigate you know things like unintentional DML DDL changes or you know if you have a malicious actor that",
    "start": "1641020",
    "end": "1647080"
  },
  {
    "text": "suddenly kind of manipulated your data in the database you can easily replace out and again it a voice does time",
    "start": "1647080",
    "end": "1654789"
  },
  {
    "text": "consuming operate backup and restore or point in time restore operations so I",
    "start": "1654789",
    "end": "1661450"
  },
  {
    "start": "1661000",
    "end": "1731000"
  },
  {
    "text": "mentioned that our storage is log structured and distributed and the unit of segmentation there is a what we call",
    "start": "1661450",
    "end": "1668350"
  },
  {
    "text": "a segment or a protection group that is it logically 10 gigabyte chunk of your",
    "start": "1668350",
    "end": "1675159"
  },
  {
    "text": "data and your storage volume might be terabytes in size and it's comprised of",
    "start": "1675159",
    "end": "1680529"
  },
  {
    "text": "many many of these 10 gigabyte chunks so for all of these 10 gigabyte chunks we",
    "start": "1680529",
    "end": "1687720"
  },
  {
    "text": "every so often we take a snapshot we materialize all the changes up to that point take a snapshot and then from a",
    "start": "1687720",
    "end": "1694809"
  },
  {
    "text": "backtrack perspective any change to your data that happens after that gets kept",
    "start": "1694809",
    "end": "1700120"
  },
  {
    "text": "as a change record which is a delta it's just a change vector so when you do want",
    "start": "1700120",
    "end": "1706270"
  },
  {
    "text": "to do a backtrack operation all you we would need is essentially a point in",
    "start": "1706270",
    "end": "1712419"
  },
  {
    "text": "time and we figure out what is the most relevant snapshot then apply all of this",
    "start": "1712419",
    "end": "1717880"
  },
  {
    "text": "change records we do that all in parallel across all of those segments so it's really really fast and you know",
    "start": "1717880",
    "end": "1726789"
  },
  {
    "text": "then we present you with a new data base state the most important thing about",
    "start": "1726789",
    "end": "1732399"
  },
  {
    "start": "1731000",
    "end": "1798000"
  },
  {
    "text": "backtrack is that it's not destructive we don't actually change the data you",
    "start": "1732399",
    "end": "1738110"
  },
  {
    "text": "can go back in time and if that time point is not relevant you can go back a",
    "start": "1738110",
    "end": "1743480"
  },
  {
    "text": "little bit in in the future I mean in the future from that point of view but you know still up to you know the",
    "start": "1743480",
    "end": "1750530"
  },
  {
    "text": "present day but you can find that right time of where you need to restore your",
    "start": "1750530",
    "end": "1757040"
  },
  {
    "text": "database and what backtrack is available for a desired period of up to 72 hours",
    "start": "1757040",
    "end": "1764180"
  },
  {
    "text": "so you can backtrack as far back as 72 hours and you pay for the volume of",
    "start": "1764180",
    "end": "1770180"
  },
  {
    "text": "those change records that we retain during that time so you know in most",
    "start": "1770180",
    "end": "1775730"
  },
  {
    "text": "cases that change that that cost is really nominal or leveraging this type",
    "start": "1775730",
    "end": "1780740"
  },
  {
    "text": "of a feature and of course you know right now backtrack is available for our my sequel 5.6 or of course working to",
    "start": "1780740",
    "end": "1789110"
  },
  {
    "text": "bring that to the other our engines and versions as well and I want to show you",
    "start": "1789110",
    "end": "1795560"
  },
  {
    "text": "a demo of backtrack in action so here's how this works I have here a database",
    "start": "1795560",
    "end": "1803660"
  },
  {
    "start": "1798000",
    "end": "1830000"
  },
  {
    "text": "cluster this is in the RDS console we're looking at the data a sample clustered",
    "start": "1803660",
    "end": "1809950"
  },
  {
    "text": "this is a highly available cluster so I can click on the instances panel which",
    "start": "1809950",
    "end": "1816800"
  },
  {
    "text": "by the way that console just got updated and changed today unfortunately we couldn't record a video you can see",
    "start": "1816800",
    "end": "1823160"
  },
  {
    "text": "which nodes in which nodes in my cluster are the reader in writer this is highly available across two different",
    "start": "1823160",
    "end": "1828200"
  },
  {
    "text": "availability zones so I can log in to this cluster using my my sequel command",
    "start": "1828200",
    "end": "1835040"
  },
  {
    "text": "line and on this cluster I have a simple HR an employee database right so it's a",
    "start": "1835040",
    "end": "1846380"
  },
  {
    "text": "simple system it's a simple sample data set and what I'm going to do I'm going",
    "start": "1846380",
    "end": "1852800"
  },
  {
    "text": "to add myself as an employee to this fictitious company you can see that we",
    "start": "1852800",
    "end": "1861020"
  },
  {
    "text": "have different tables with salaries employees titles Department lists and so",
    "start": "1861020",
    "end": "1866420"
  },
  {
    "text": "on so I'm adding myself as a employee to this company and I'm gonna give myself a",
    "start": "1866420",
    "end": "1872900"
  },
  {
    "text": "salary and I've been a little bit too optimistic and I actually put them one more zero there you can barely see it",
    "start": "1872900",
    "end": "1880250"
  },
  {
    "text": "but it's you know I have a little bit too big of a salary so I'm gonna fix that and I'm gonna update that record to",
    "start": "1880250",
    "end": "1889700"
  },
  {
    "text": "fix my salary but I've made a mistake here I forgot to put the where clause the predicate clause and I'm actually",
    "start": "1889700",
    "end": "1895760"
  },
  {
    "text": "I'm resetting everybody's salaries in this example oops that's bad clearly if this would be",
    "start": "1895760",
    "end": "1903860"
  },
  {
    "text": "production I would be there panicking right now so what do we do how do we fix this okay so I'm gonna exit out of the database I",
    "start": "1903860",
    "end": "1910400"
  },
  {
    "text": "did enough damage here and I'm going to",
    "start": "1910400",
    "end": "1918950"
  },
  {
    "text": "go ahead and backtrack and I have a timestamp here I used actually a couple",
    "start": "1918950",
    "end": "1925430"
  },
  {
    "text": "of current time staff queries there to kind of find the row you know for demo purposes the right time spots so I'm",
    "start": "1925430",
    "end": "1931340"
  },
  {
    "text": "going to backtrack to this point in time I'm getting the information from the",
    "start": "1931340",
    "end": "1936710"
  },
  {
    "text": "system a table will tell me that the scatter request has been scheduled it's pending I can switch back now to the",
    "start": "1936710",
    "end": "1944120"
  },
  {
    "text": "console and track the operation it takes about two minutes normally with fast",
    "start": "1944120",
    "end": "1949670"
  },
  {
    "start": "1945000",
    "end": "2033000"
  },
  {
    "text": "forwarded a little bit here you can see the state changing there in that green",
    "start": "1949670",
    "end": "1955970"
  },
  {
    "text": "box you can see that the nodes are reflecting the fact that the cluster is being backtracked and this is an operation so in when you",
    "start": "1955970",
    "end": "1962840"
  },
  {
    "text": "make this operation then all the database connection will be interrupted right this cluster will be restarted so",
    "start": "1962840",
    "end": "1970460"
  },
  {
    "text": "there will be a little bit of a disruption okay my cluster is back online my database is available again so",
    "start": "1970460",
    "end": "1978860"
  },
  {
    "text": "I can log back in I'm entering the password and let's see what happened",
    "start": "1978860",
    "end": "1989110"
  },
  {
    "text": "again I'm using the employees database and I'm going to check if my employee",
    "start": "1989110",
    "end": "1995510"
  },
  {
    "text": "records is still in the database and it's not so I clear that I went a",
    "start": "1995510",
    "end": "2001260"
  },
  {
    "text": "little bit too far in time with this one so I'm going to backtrack again I'm",
    "start": "2001260",
    "end": "2007530"
  },
  {
    "text": "going to exit out of the command line prompt switch over try to backtrack",
    "start": "2007530",
    "end": "2014070"
  },
  {
    "text": "again now to a different point in time that's slightly in the future relative",
    "start": "2014070",
    "end": "2019679"
  },
  {
    "text": "to the last time I've actually backtracked and we're going to go",
    "start": "2019679",
    "end": "2025350"
  },
  {
    "text": "through this again",
    "start": "2025350",
    "end": "2027890"
  },
  {
    "start": "2033000",
    "end": "2062000"
  },
  {
    "text": "again the cluster is in the backtracking state this normally would take about two",
    "start": "2038299",
    "end": "2048648"
  },
  {
    "text": "two to three minutes I'm gonna refresh",
    "start": "2048649",
    "end": "2055638"
  },
  {
    "text": "here the interface to make sure and everything is back available right now",
    "start": "2055639",
    "end": "2061720"
  },
  {
    "start": "2062000",
    "end": "2087000"
  },
  {
    "text": "and I log in back into my my sequel console and let's see what has happened",
    "start": "2062260",
    "end": "2072398"
  },
  {
    "text": "okay my employer record is there right so I've moved a little to the right spot",
    "start": "2077409",
    "end": "2082819"
  },
  {
    "text": "now let's see what happens with the salaries and the salaries are all fixed",
    "start": "2082819",
    "end": "2089059"
  },
  {
    "start": "2087000",
    "end": "2125000"
  },
  {
    "text": "again they're all different values so that's good so I basically fix a very potentially",
    "start": "2089059",
    "end": "2094398"
  },
  {
    "text": "costly mistakes in the matter of a few minutes by just simply replaying back the database to this state",
    "start": "2094399",
    "end": "2100549"
  },
  {
    "text": "now it's key to understand here back check works at the cluster level so you wouldn't be able to just replay back one",
    "start": "2100549",
    "end": "2107510"
  },
  {
    "text": "table or another table it's the whole database or nothing all right all right",
    "start": "2107510",
    "end": "2116829"
  },
  {
    "text": "thanks flat absolutely alright everybody so we're gonna jump from here into",
    "start": "2116829",
    "end": "2122210"
  },
  {
    "text": "availability and performance focus database development so you know again",
    "start": "2122210",
    "end": "2127430"
  },
  {
    "start": "2125000",
    "end": "2283000"
  },
  {
    "text": "looking at sort of the best practices versus anti patterns that we've seen you know out there in the wild so to speak",
    "start": "2127430",
    "end": "2133910"
  },
  {
    "text": "is you know this app development testing on tiny subsets of production data",
    "start": "2133910",
    "end": "2139569"
  },
  {
    "text": "considering that you know my database is always there for me and never fails me I mean that's that's something that's not",
    "start": "2139569",
    "end": "2145490"
  },
  {
    "text": "always necessarily true in a lot of cases right there running the long unoptimized queries on cluster readers",
    "start": "2145490",
    "end": "2151460"
  },
  {
    "text": "like the example the Vlad gave of the 29-day query all right and then lack of outcome focus right you know not not",
    "start": "2151460",
    "end": "2158390"
  },
  {
    "text": "really having a clear direction on what you are trying to do you know it's it's",
    "start": "2158390",
    "end": "2163520"
  },
  {
    "text": "important to start with the end in mind so that you have something that you know that you're working toward so the right",
    "start": "2163520",
    "end": "2169369"
  },
  {
    "text": "way is you know to be aware of the architectural differences between Aurora and equivalent engines you know Vlad's",
    "start": "2169369",
    "end": "2175220"
  },
  {
    "text": "touched on the log based storage system that Aurora has which is fundamentally",
    "start": "2175220",
    "end": "2180650"
  },
  {
    "text": "different than you know most other engines that are available you know on the market today and so that gives us",
    "start": "2180650",
    "end": "2187099"
  },
  {
    "text": "features like backtrack and cloning that are otherwise you know just not",
    "start": "2187099",
    "end": "2192380"
  },
  {
    "text": "available or maybe cost prohibitive if there's something that's you know similar or comparable right so that's",
    "start": "2192380",
    "end": "2198920"
  },
  {
    "text": "something that you have now in your tool belt that you can consider as you are doing your development and managing your",
    "start": "2198920",
    "end": "2204470"
  },
  {
    "text": "databases you want to be able to know about the Aurora capabilities and operational procedures the automated",
    "start": "2204470",
    "end": "2211039"
  },
  {
    "text": "fail overs and upgrades how that all works sort of understanding you know what it looks like during a failover and",
    "start": "2211039",
    "end": "2216950"
  },
  {
    "text": "you know how best to architect for that right and then you know extending Aurora features with application side cluster",
    "start": "2216950",
    "end": "2223609"
  },
  {
    "text": "awareness again you know understanding that you know you have a single writer and then zero or up to 15 readers and",
    "start": "2223609",
    "end": "2230539"
  },
  {
    "text": "then understanding during that failover process which one is which and how to determine what those are and to use",
    "start": "2230539",
    "end": "2237380"
  },
  {
    "text": "tools if possible that are aware of those differences and again test don't",
    "start": "2237380",
    "end": "2242930"
  },
  {
    "text": "hope for the best you know there are procedures within Aurora Aurora was built with failure injection queries",
    "start": "2242930",
    "end": "2249319"
  },
  {
    "text": "available where you can simulate things like the loss of a disk like a failover other things like that you know that's",
    "start": "2249319",
    "end": "2256400"
  },
  {
    "text": "it's something that you know failures happen in the real world right and so you know it's you know Verner Vogel's is",
    "start": "2256400",
    "end": "2262999"
  },
  {
    "text": "known for saying everything fails all the time right so it's not a question of whether something fails it's how are we",
    "start": "2262999",
    "end": "2268940"
  },
  {
    "text": "going to be prepared to deal with it when it does happen right and so that's something that you know or Aurora has",
    "start": "2268940",
    "end": "2274819"
  },
  {
    "text": "been designed to be very robust to self-healing and can address a lot of those things but you still need to be",
    "start": "2274819",
    "end": "2280730"
  },
  {
    "text": "aware of that from an application perspective so with regard to connection management and availability most common",
    "start": "2280730",
    "end": "2289130"
  },
  {
    "start": "2283000",
    "end": "2495000"
  },
  {
    "text": "my sequel and Postgres drivers are not cluster or topology aware when we created Aurora it was important that we",
    "start": "2289130",
    "end": "2296089"
  },
  {
    "text": "made it what we call wire compatible and so what that means is that if you take",
    "start": "2296089",
    "end": "2301670"
  },
  {
    "text": "an application that's using for example my sequel five point six and then you pointed to an Aurora five",
    "start": "2301670",
    "end": "2308509"
  },
  {
    "text": "my sequel five point six cluster with the same data your application won't know the difference",
    "start": "2308509",
    "end": "2313819"
  },
  {
    "text": "right and so what that means - is that your drivers will still work but of course when the original my sequel",
    "start": "2313819",
    "end": "2320480"
  },
  {
    "text": "drivers were created there was no such thing as Aurora and so there was no functionality built into those so the",
    "start": "2320480",
    "end": "2326930"
  },
  {
    "text": "Maria the Maria driver that Vlad talked about earlier is an example of a",
    "start": "2326930",
    "end": "2332059"
  },
  {
    "text": "topology aware driver that you can use client-side connection pooling recycling",
    "start": "2332059",
    "end": "2338539"
  },
  {
    "text": "recycling connections periodically and avoiding connection storms one thing that's nice about Aurora is that it is",
    "start": "2338539",
    "end": "2344269"
  },
  {
    "text": "designed to handle you know many many more connections than your average you know say my sequel cluster the current",
    "start": "2344269",
    "end": "2351589"
  },
  {
    "text": "limit is sixteen thousand you can easily handle five thousand connections without",
    "start": "2351589",
    "end": "2357259"
  },
  {
    "text": "skipping a beat on an Aurora cluster but you still want to make sure that you know we're leveraging connection pooling",
    "start": "2357259",
    "end": "2363230"
  },
  {
    "text": "so that we don't have to go through that costly operation the handshake that has to take place in order to establish a",
    "start": "2363230",
    "end": "2369890"
  },
  {
    "text": "connection into any database instance I mean it's it's not even Aurora specific",
    "start": "2369890",
    "end": "2375200"
  },
  {
    "text": "it's any database instance right using a smart driver like the Maria DB driver",
    "start": "2375200",
    "end": "2381529"
  },
  {
    "text": "for example or build topology awareness in your client data layer and validating connections something that you know I",
    "start": "2381529",
    "end": "2388160"
  },
  {
    "text": "see sometimes with customers is during a failover event what they'll do if their if their application is not aware is",
    "start": "2388160",
    "end": "2394819"
  },
  {
    "text": "that there will be a failover and what happens during a failover is that the writer becomes one of the readers and",
    "start": "2394819",
    "end": "2401029"
  },
  {
    "text": "then one of the readers becomes a writer and so what you might see is getting errors back in the application saying",
    "start": "2401029",
    "end": "2407420"
  },
  {
    "text": "this is a read-only instance you can't perform write based queries here and",
    "start": "2407420",
    "end": "2412970"
  },
  {
    "text": "that's because what's happened is the application has not picked up on the fact that those two have switched places",
    "start": "2412970",
    "end": "2419450"
  },
  {
    "text": "now failover with Aurora is based primarily on DNS right so within aurora",
    "start": "2419450",
    "end": "2425720"
  },
  {
    "text": "there are different endpoints there's a cluster endpoint which always follows the writer and you should as a matter of",
    "start": "2425720",
    "end": "2431900"
  },
  {
    "text": "course point your application to that endpoint for all of your readwrite",
    "start": "2431900",
    "end": "2437660"
  },
  {
    "text": "applications if you are able to split the load into a a read load and then a write load then",
    "start": "2437660",
    "end": "2444490"
  },
  {
    "text": "the read-only load could be sent to that reader end point that will do a DNS round-robin across your pool of readers",
    "start": "2444490",
    "end": "2451390"
  },
  {
    "text": "now what we're using here is we're using DNS aliases see names right and the time",
    "start": "2451390",
    "end": "2458109"
  },
  {
    "text": "to live the TTL on these records is currently about five seconds so under normal circumstances if your application",
    "start": "2458109",
    "end": "2464560"
  },
  {
    "text": "is aware and if it respects that DNS TTL then during a failover in about five",
    "start": "2464560",
    "end": "2470770"
  },
  {
    "text": "seconds your application will re query DNS to realize what the new end point is",
    "start": "2470770",
    "end": "2476290"
  },
  {
    "text": "if your application is not doing that reliably that's when you might run into trouble like I was describing with you",
    "start": "2476290",
    "end": "2482530"
  },
  {
    "text": "know getting the error saying that there was a write attempted on a read-only instance and that also covers point",
    "start": "2482530",
    "end": "2490090"
  },
  {
    "text": "number four which is the behavior of Aurora DNS endpoints and managing that DNS caching so now the next thing to",
    "start": "2490090",
    "end": "2497530"
  },
  {
    "start": "2495000",
    "end": "2650000"
  },
  {
    "text": "consider is monitoring the performance of your queries and earlier we had some points where we're talking about you",
    "start": "2497530",
    "end": "2503830"
  },
  {
    "text": "know essentially start with the outcome in mind right and I work with a lot of customers that will say well my CPU is",
    "start": "2503830",
    "end": "2510790"
  },
  {
    "text": "high on this instance so that means that I must be having performance issues I would say not necessarily right the",
    "start": "2510790",
    "end": "2516970"
  },
  {
    "text": "purpose of the database in the application is to store modify and retrieve data right and so what we want",
    "start": "2516970",
    "end": "2524020"
  },
  {
    "text": "to do is not measure how much CPU it takes to do that but how effectively we're doing that and so the metrics that",
    "start": "2524020",
    "end": "2529900"
  },
  {
    "text": "I generally recommend to look at our query throughput and query latency those",
    "start": "2529900",
    "end": "2535690"
  },
  {
    "text": "two numbers will give you the answers to how many queries am i processing per",
    "start": "2535690",
    "end": "2540910"
  },
  {
    "text": "second and on average how long does it take for me to process those queries right now those numbers will vary from",
    "start": "2540910",
    "end": "2547660"
  },
  {
    "text": "application to application so what we would recommend is that for your application that you run a",
    "start": "2547660",
    "end": "2553770"
  },
  {
    "text": "representative workload and then gather those metrics from cloud watch is where",
    "start": "2553770",
    "end": "2559690"
  },
  {
    "text": "you would find those cloud watch metrics and then say this is my baseline these are the numbers that I know are what I",
    "start": "2559690",
    "end": "2565630"
  },
  {
    "text": "am going to expect from my application when my application is performing correctly now if those numbers get out",
    "start": "2565630",
    "end": "2571420"
  },
  {
    "text": "of whack then you might take a look at some secondary metrics like CPU maybe maybe",
    "start": "2571420",
    "end": "2576610"
  },
  {
    "text": "they are out of whack and maybe the CPU is to blame and then you can start to look into that but start with that",
    "start": "2576610",
    "end": "2582400"
  },
  {
    "text": "baseline first then you want to assess the performance of different workload",
    "start": "2582400",
    "end": "2588310"
  },
  {
    "text": "impacts right so maybe you've introduced a new index to your database or maybe",
    "start": "2588310",
    "end": "2594340"
  },
  {
    "text": "you have you know a holiday sale that is driven a lot more activity to your database and so then you come back to",
    "start": "2594340",
    "end": "2601210"
  },
  {
    "text": "your baselines and compare against those baselines if you find that there is an issue I will shoot using these tools",
    "start": "2601210",
    "end": "2607810"
  },
  {
    "text": "that we're about to talk about in a second and then the last thing that I want to touch on is effective capacity",
    "start": "2607810",
    "end": "2613420"
  },
  {
    "text": "planning right so a lot of things within aurora can be you know automated for capacity planning for example if you're",
    "start": "2613420",
    "end": "2619780"
  },
  {
    "text": "able to split your read and write workload it is possible to auto scale the readers that you have in your",
    "start": "2619780",
    "end": "2626230"
  },
  {
    "text": "cluster where you can automatically based on load increase and decrease the number of readers you have in your pool",
    "start": "2626230",
    "end": "2632950"
  },
  {
    "text": "but you also need to consider about whether you're going to even be able to",
    "start": "2632950",
    "end": "2638170"
  },
  {
    "text": "use readers if your application is such that it can leverage that or when we're looking at write workloads you know what",
    "start": "2638170",
    "end": "2644590"
  },
  {
    "text": "size instance am I on and how am I going to scale that up or scale that down should the need arise now the tools that",
    "start": "2644590",
    "end": "2651850"
  },
  {
    "start": "2650000",
    "end": "2735000"
  },
  {
    "text": "come with Aurora out of the box are Amazon CloudWatch metrics which is where",
    "start": "2651850",
    "end": "2656980"
  },
  {
    "text": "you would look for things like that query throughput that query latency you would also get some of the secondary",
    "start": "2656980",
    "end": "2662440"
  },
  {
    "text": "metrics like CPU utilization buffer cache hit ratio for example and then we",
    "start": "2662440",
    "end": "2667750"
  },
  {
    "text": "have cloud watch logs which is where you could if you so configured it send",
    "start": "2667750",
    "end": "2672910"
  },
  {
    "text": "things like your slow query log or if you have enabled auditing you can send your auditing logs into cloud watch logs",
    "start": "2672910",
    "end": "2679270"
  },
  {
    "text": "and then once they hit cloud watch logs you can either use third-party tools to analyze those logs and respond to them",
    "start": "2679270",
    "end": "2686980"
  },
  {
    "text": "or you could do it manually or you can leverage something like lambda they can analyze those logs as they're being",
    "start": "2686980",
    "end": "2692980"
  },
  {
    "text": "generated and maybe even take a prescriptive step that you've already pre decided write enhanced monitoring",
    "start": "2692980",
    "end": "2700600"
  },
  {
    "text": "gives you insight into over 50 different operating system level metrics and then",
    "start": "2700600",
    "end": "2706090"
  },
  {
    "text": "the last one that we listed on here performance insights was released a few months ago and that",
    "start": "2706090",
    "end": "2711880"
  },
  {
    "text": "allows you to have query and weight level performance data and as we look at this you'll notice that it kind of goes from left to right right where the the",
    "start": "2711880",
    "end": "2719320"
  },
  {
    "text": "broader is to the left and then we get into some of the narrower as we get to the right I mean on the left if we've",
    "start": "2719320",
    "end": "2725020"
  },
  {
    "text": "determined that we have a performance issue and we need to drill into it then",
    "start": "2725020",
    "end": "2730420"
  },
  {
    "text": "we can get down all the way into the query level itself with performance insights",
    "start": "2730420",
    "end": "2735510"
  },
  {
    "start": "2735000",
    "end": "2806000"
  },
  {
    "text": "so now performance insights itself is available on both the my sequel and the Postgres compatible editions of Aurora",
    "start": "2735510",
    "end": "2742740"
  },
  {
    "text": "it's got an easy and powerful dashboard that you can see a screenshot of right there on the right hand side and it",
    "start": "2742740",
    "end": "2749530"
  },
  {
    "text": "helps you to identify not only the source of bottlenecks but also the top sequel queries that are consuming",
    "start": "2749530",
    "end": "2754990"
  },
  {
    "text": "resources and in weight statistics - that are contributing perhaps to",
    "start": "2754990",
    "end": "2760510"
  },
  {
    "text": "performance issues you can adjust the time frame by default we show you an",
    "start": "2760510",
    "end": "2765820"
  },
  {
    "text": "hour window but you can expand that out you know you can either bring it in say",
    "start": "2765820",
    "end": "2771550"
  },
  {
    "text": "five minutes out - you know 24 hours and you can also select a given segment and",
    "start": "2771550",
    "end": "2777070"
  },
  {
    "text": "zoom in on it by default we offer seven days free storage of these performance",
    "start": "2777070",
    "end": "2782830"
  },
  {
    "text": "metrics that's usually adequate for most performance tuning purposes but if you",
    "start": "2782830",
    "end": "2788680"
  },
  {
    "text": "are interested in keeping that data around for a longer period of time you can pay a nominal fee to keep it around",
    "start": "2788680",
    "end": "2795130"
  },
  {
    "text": "for up to two years there's also API access into performance insights so that it will integrate with",
    "start": "2795130",
    "end": "2801520"
  },
  {
    "text": "other third-party tools if that's something that you're interested in so",
    "start": "2801520",
    "end": "2806680"
  },
  {
    "start": "2806000",
    "end": "3128000"
  },
  {
    "text": "I'd like to give a little demo here of what performance insights looks like in action so right here what we're looking",
    "start": "2806680",
    "end": "2814060"
  },
  {
    "text": "at is we have a cluster we're looking through the RDS console and that cluster",
    "start": "2814060",
    "end": "2821080"
  },
  {
    "text": "is comprised of two different instances named demo node 1 and node 2 and",
    "start": "2821080",
    "end": "2826330"
  },
  {
    "text": "remember the names might be misleading they you know you might think that one is a reader one's a writer but the only",
    "start": "2826330",
    "end": "2831430"
  },
  {
    "text": "way for us to really know is to look over here to the right where we're going to look at the replication role and now",
    "start": "2831430",
    "end": "2837610"
  },
  {
    "text": "we know that the top one is the writer and the second one happens to be the reader but that could change at any time again the",
    "start": "2837610",
    "end": "2844910"
  },
  {
    "text": "event of a failover etc so what I'm going to do now is I'm going to log in and I'm gonna use a TP CC like benchmark",
    "start": "2844910",
    "end": "2851570"
  },
  {
    "text": "from percona that's going to create a schema and then it's going to use 16",
    "start": "2851570",
    "end": "2857180"
  },
  {
    "text": "threads to populate that schema and run read/write queries against that database",
    "start": "2857180",
    "end": "2863030"
  },
  {
    "text": "right and we're doing this really just for the purpose of generating load now",
    "start": "2863030",
    "end": "2868100"
  },
  {
    "text": "if we go back into the console and we zoom in on that node we can look at the CPU utilization and you can also notice",
    "start": "2868100",
    "end": "2874670"
  },
  {
    "text": "on the right that the DB connections count is at about 16 and remember we use 16 threads so that's about what we would",
    "start": "2874670",
    "end": "2882110"
  },
  {
    "text": "expect it to be and we can see that the CPU is ramping and so are the DB",
    "start": "2882110",
    "end": "2887930"
  },
  {
    "text": "connections but you can see it's just started right and so you know after a",
    "start": "2887930",
    "end": "2893330"
  },
  {
    "text": "minute or so the traffic is flowing through and so let's go over to the performance insights console and take a",
    "start": "2893330",
    "end": "2901369"
  },
  {
    "text": "look at what's going on over there so here you can see we have the two nodes that we currently have performance",
    "start": "2901369",
    "end": "2907310"
  },
  {
    "text": "insights enabled for we select the first one where we're doing our read/write workload and so we don't have any data",
    "start": "2907310",
    "end": "2913460"
  },
  {
    "text": "showing up in there but if we give it just a second and refresh you can see we now have some data that's streaming in",
    "start": "2913460",
    "end": "2920240"
  },
  {
    "text": "this is the main console where you can look and see what what type of activity",
    "start": "2920240",
    "end": "2926000"
  },
  {
    "text": "is happening in that database cluster you can see across the top where you specify the time period and then the",
    "start": "2926000",
    "end": "2932869"
  },
  {
    "text": "weights that are listed along the right-hand side which correspond to the graph that you see you might also notice",
    "start": "2932869",
    "end": "2939350"
  },
  {
    "text": "that black line across the top right under the V CPU what that represents is",
    "start": "2939350",
    "end": "2944420"
  },
  {
    "text": "that represents active sessions an active session would be its it's the its how many sessions for a minute so for",
    "start": "2944420",
    "end": "2951590"
  },
  {
    "text": "example if you had one query that ran for one minute that would be one active",
    "start": "2951590",
    "end": "2956750"
  },
  {
    "text": "session if you had 60 queries that all ran for one second a piece that would",
    "start": "2956750",
    "end": "2962420"
  },
  {
    "text": "also comprise one active session and so that line gives you an idea of the",
    "start": "2962420",
    "end": "2968660"
  },
  {
    "text": "threshold for that particular instance as to what it can handle in this case we're still under that line",
    "start": "2968660",
    "end": "2975209"
  },
  {
    "text": "and so we're still our performance is still within the realm of what this particular instance can comfortably",
    "start": "2975209",
    "end": "2981839"
  },
  {
    "text": "handle all the same you can see as time goes on it's starting to move across",
    "start": "2981839",
    "end": "2987380"
  },
  {
    "text": "across the screen and we're getting more data so if we scroll down we'll notice",
    "start": "2987380",
    "end": "2992880"
  },
  {
    "text": "that this is a list of all the queries that are being executed against that instance you can see that the commit",
    "start": "2992880",
    "end": "2999029"
  },
  {
    "text": "statement is the one that is generating far and away the most weights and if you",
    "start": "2999029",
    "end": "3004099"
  },
  {
    "text": "look at that you can see that the color is that that brown orange color which is which is aligns with you know IO right",
    "start": "3004099",
    "end": "3012289"
  },
  {
    "text": "io type of weight that's happening there now you can see underneath we have all these other update insert etc queries",
    "start": "3012289",
    "end": "3019849"
  },
  {
    "text": "and the top is sort of a hash you notice the ID is a question mark when we expand",
    "start": "3019849",
    "end": "3024949"
  },
  {
    "text": "it you can see that there are actual queries with the actual parameter that has been specified so this allows you to",
    "start": "3024949",
    "end": "3031339"
  },
  {
    "text": "drill in and see what are the queries that are actually causing the load you could then of course take those",
    "start": "3031339",
    "end": "3038299"
  },
  {
    "text": "queries and run and explain against them to find out more about what it is about the query itself right so now we've been",
    "start": "3038299",
    "end": "3046579"
  },
  {
    "text": "running this for a little while right and we've been running this with sixteen threads to see what that looks like",
    "start": "3046579",
    "end": "3051969"
  },
  {
    "text": "let's go back and let's rerun the same test but this time we're gonna do it",
    "start": "3051969",
    "end": "3057109"
  },
  {
    "text": "with 32 threads and let's see what kind of an impact this has so again we'll",
    "start": "3057109",
    "end": "3063709"
  },
  {
    "text": "refresh it we'll wait for a little bit for some of that traffic to generate and then as that's coming through you can",
    "start": "3063709",
    "end": "3070759"
  },
  {
    "text": "see that it is significantly more as we would have expected but now we've actually exceeded that that dashed line",
    "start": "3070759",
    "end": "3078140"
  },
  {
    "text": "across there so that that's indicative to us that that we are exceeding what we would otherwise normally anticipate is",
    "start": "3078140",
    "end": "3084559"
  },
  {
    "text": "an appropriate load for that particular instance and again you can see the the",
    "start": "3084559",
    "end": "3090409"
  },
  {
    "text": "weights along the right-hand side you can see there is some CPU in there that's the green but then you can see",
    "start": "3090409",
    "end": "3096079"
  },
  {
    "text": "that sort of orangish brown that we saw you know correlated with that commit",
    "start": "3096079",
    "end": "3101150"
  },
  {
    "text": "earlier you can see what that's tied to the the i/o Aurora redo log flush which would make sense because",
    "start": "3101150",
    "end": "3107560"
  },
  {
    "text": "we're doing a lot of a lot of DML type work here you can see that I just selected that particular area and it",
    "start": "3107560",
    "end": "3114880"
  },
  {
    "text": "allowed me to zoom in to exactly that segment so that I can focus in on what",
    "start": "3114880",
    "end": "3120550"
  },
  {
    "text": "it is that that you know we're really focused on right now and select that that time period all right so what about",
    "start": "3120550",
    "end": "3131110"
  },
  {
    "start": "3128000",
    "end": "3136000"
  },
  {
    "text": "Kosta felt that cost-effective development and testing right so we want",
    "start": "3131110",
    "end": "3137320"
  },
  {
    "start": "3136000",
    "end": "3194000"
  },
  {
    "text": "to be able to use database resources an appropriate scale and only when they're needed right so Devon test activities I",
    "start": "3137320",
    "end": "3144070"
  },
  {
    "text": "mean realistically a lot of developers they work Monday to Friday 9:00 to 5:00 right so we have from 5 p.m. till 9:00",
    "start": "3144070",
    "end": "3150820"
  },
  {
    "text": "a.m. the next morning and then most weekends where maybe nobody's even using",
    "start": "3150820",
    "end": "3155830"
  },
  {
    "text": "that database cluster in under normal circumstances that might just be on and running and accumulating a bill for that",
    "start": "3155830",
    "end": "3161500"
  },
  {
    "text": "period of time the scale of dev and test activities varies sometimes you're",
    "start": "3161500",
    "end": "3166990"
  },
  {
    "text": "running full production load sometimes you're just running some queries just you know writing code you're not you",
    "start": "3166990",
    "end": "3172240"
  },
  {
    "text": "know really fully testing you know load you're just developing the actual queries that you're going to run in your",
    "start": "3172240",
    "end": "3177610"
  },
  {
    "text": "application right and then you also want to have your dev and test environment isolated from production you obviously",
    "start": "3177610",
    "end": "3184090"
  },
  {
    "text": "don't want to you know be the most interesting man in the world and you know when i test i test in production",
    "start": "3184090",
    "end": "3189550"
  },
  {
    "text": "right you want to make sure that you're running in your in an isolated and environment so there are two features",
    "start": "3189550",
    "end": "3196240"
  },
  {
    "text": "that come to mind when we're thinking about cost optimization with Aurora one",
    "start": "3196240",
    "end": "3202210"
  },
  {
    "text": "is the ability for Aurora to start and stop an instance so if you're using what",
    "start": "3202210",
    "end": "3207790"
  },
  {
    "text": "we call provisioned Aurora that would be a cluster where you have an instant service the standard Aurora the initial",
    "start": "3207790",
    "end": "3214030"
  },
  {
    "text": "Aurora you can stop the instance and not pay for compute for a period of time now",
    "start": "3214030",
    "end": "3220330"
  },
  {
    "text": "if you stop an instance and you leave it stopped for seven days it will automatically restart but you could stop",
    "start": "3220330",
    "end": "3227170"
  },
  {
    "text": "it manually using an API so you're then not paying for compute you're not paying for AI ops obviously because you're not",
    "start": "3227170",
    "end": "3232750"
  },
  {
    "text": "running queries and you're only paying for the storage which is the the least expensive component of the",
    "start": "3232750",
    "end": "3239290"
  },
  {
    "text": "entire equation the other side is Amazon Aurora serverless and with serverless",
    "start": "3239290",
    "end": "3245200"
  },
  {
    "text": "it's the same exact Aurora that we've been using this whole time with the",
    "start": "3245200",
    "end": "3250690"
  },
  {
    "text": "ability to automatically provision and scale up and scale down and so we find",
    "start": "3250690",
    "end": "3256869"
  },
  {
    "text": "that it's very very useful for development type workloads as well as a few other workloads that might be",
    "start": "3256869",
    "end": "3262480"
  },
  {
    "text": "interesting as well so some of the use cases like I said development and test",
    "start": "3262480",
    "end": "3267580"
  },
  {
    "start": "3263000",
    "end": "3312000"
  },
  {
    "text": "databases they can be easily provisioned there's cost savings when the database is not in use because we can scale to",
    "start": "3267580",
    "end": "3273730"
  },
  {
    "text": "zero or if you don't want to scale to zero at least scaled to a very small instance type and you can simplify dev",
    "start": "3273730",
    "end": "3280480"
  },
  {
    "text": "and test pipelines with the knowledge that the code that you write is running against a regular Aurora cluster it's",
    "start": "3280480",
    "end": "3288010"
  },
  {
    "text": "not a special type of Aurora it is the same exact Aurora so if it runs in server lists in a certain way then you",
    "start": "3288010",
    "end": "3295119"
  },
  {
    "text": "can generally anticipate that it will run that way in a provision cluster as well it's great for infrequently used",
    "start": "3295119",
    "end": "3301300"
  },
  {
    "text": "applications like a low-volume blog site for example or the dev test workloads we're talking about where applications",
    "start": "3301300",
    "end": "3307570"
  },
  {
    "text": "with variable loads peaks of activity that are hard to predict for example the",
    "start": "3307570",
    "end": "3312850"
  },
  {
    "start": "3312000",
    "end": "3437000"
  },
  {
    "text": "architecture itself is something like this remember I said that it's the same exact Aurora that we've been using the",
    "start": "3312850",
    "end": "3320230"
  },
  {
    "text": "main difference is that we have we have essentially a managed proxy layer that sits in between the application and the",
    "start": "3320230",
    "end": "3326440"
  },
  {
    "text": "database and so it's a my sequel compatible endpoint so you don't need to",
    "start": "3326440",
    "end": "3331630"
  },
  {
    "text": "change your drivers you don't need to do anything other than just connect with the same tools that you already use to connect to Aurora and then we have a",
    "start": "3331630",
    "end": "3338500"
  },
  {
    "text": "fleet of routers that manage the queue client connections and route the database traffic to the appropriate instance the instance handles all the",
    "start": "3338500",
    "end": "3345940"
  },
  {
    "text": "database operations and that's the point where it's just the regular standard Aurora that we've all you know been",
    "start": "3345940",
    "end": "3352150"
  },
  {
    "text": "using for this time the data still kept durable in the highly available Aurora",
    "start": "3352150",
    "end": "3358510"
  },
  {
    "text": "storage volume just like provisioned Aurora and when you when scaling thresholds are reached",
    "start": "3358510",
    "end": "3364119"
  },
  {
    "text": "we will automatically scale the instance up or down pulling from a warm",
    "start": "3364119",
    "end": "3369140"
  },
  {
    "text": "of instances right the scaling operations are transparent to the application we don't break that TCP",
    "start": "3369140",
    "end": "3375230"
  },
  {
    "text": "connection between your application and the database instead what we do is we look for what we call a scaling point",
    "start": "3375230",
    "end": "3381500"
  },
  {
    "text": "and that is a brief moment in time between your transactions where we can",
    "start": "3381500",
    "end": "3386600"
  },
  {
    "text": "pause your connections and then unplug the original instance and then plug in",
    "start": "3386600",
    "end": "3391970"
  },
  {
    "text": "the new instance and then resume that operation on average takes somewhere around five seconds so it's not a break",
    "start": "3391970",
    "end": "3399500"
  },
  {
    "text": "in your application it would just look like an additional five seconds or so that your queries took you know that it",
    "start": "3399500",
    "end": "3405890"
  },
  {
    "text": "took to run those queries you can configure the minimum and maximum capacity and whether to scale all the",
    "start": "3405890",
    "end": "3412760"
  },
  {
    "text": "way down to zero if there's no activity for example your developers go home at five o'clock and you specify if there",
    "start": "3412760",
    "end": "3418520"
  },
  {
    "text": "are no queries within one hour spin it to zero the next day your developers come in the first person that connects",
    "start": "3418520",
    "end": "3425180"
  },
  {
    "text": "to it will need to wait around 20 seconds or so for it to spin back up but",
    "start": "3425180",
    "end": "3430220"
  },
  {
    "text": "then it's business as usual so there are no API calls necessary and it just happens for you automatically service",
    "start": "3430220",
    "end": "3437840"
  },
  {
    "start": "3437000",
    "end": "3489000"
  },
  {
    "text": "pricing is a little bit different if you have a steady state database workload you're likely going to want to use",
    "start": "3437840",
    "end": "3444200"
  },
  {
    "text": "provisioned Aurora but if you have these spiky workloads you would want to use take advantage of the service pricing on",
    "start": "3444200",
    "end": "3451400"
  },
  {
    "text": "the right hand side you can see some examples of you know particular you know",
    "start": "3451400",
    "end": "3456890"
  },
  {
    "text": "real-life instances but the important thing to note here is that the capacity is measured in Aurora capacity units or",
    "start": "3456890",
    "end": "3463550"
  },
  {
    "text": "AC use it's very similar conceptually to how we handle lambda functions where in",
    "start": "3463550",
    "end": "3470120"
  },
  {
    "text": "one AC U is equal to about two gigabytes of memory with the corresponding CPU and",
    "start": "3470120",
    "end": "3476270"
  },
  {
    "text": "network capacity there's a flat rate per second of AC u usage with a minimum of",
    "start": "3476270",
    "end": "3481760"
  },
  {
    "text": "five minutes of usage each time the database is activated right and then the storage and IO or build the same as",
    "start": "3481760",
    "end": "3488200"
  },
  {
    "text": "provisioned Aurora one other thing that I wanted to bring up is that we recently",
    "start": "3488200",
    "end": "3493250"
  },
  {
    "start": "3489000",
    "end": "3573000"
  },
  {
    "text": "introduced the RDS data API and what this is is a public HTTP API endpoint",
    "start": "3493250",
    "end": "3499220"
  },
  {
    "text": "that's integrated with AWS authentic it's automated server-side connection",
    "start": "3499220",
    "end": "3505290"
  },
  {
    "text": "pooling so if you have applications that you know need to take advantage of connection pooling some of them are not",
    "start": "3505290",
    "end": "3512190"
  },
  {
    "text": "capable of doing that this is something that does enable that connection pooling and it's ideal for lambda and serverless",
    "start": "3512190",
    "end": "3518690"
  },
  {
    "text": "applications right where you you can use you can connect via HTTP rather than",
    "start": "3518690",
    "end": "3524550"
  },
  {
    "text": "trying to maintain say a connection pool inside of a lambda function which may otherwise be transient right it's fully",
    "start": "3524550",
    "end": "3531810"
  },
  {
    "text": "integrated with AWS secrets manager and AWS app sync and then it's there's an",
    "start": "3531810",
    "end": "3537750"
  },
  {
    "text": "optional session construct for efficient preparedstatement executions we also as",
    "start": "3537750",
    "end": "3543330"
  },
  {
    "text": "part of this release an interactive query editor in the console so that you can run ad-hoc queries through the",
    "start": "3543330",
    "end": "3549030"
  },
  {
    "text": "console into your service cluster and that's the last point that I want to",
    "start": "3549030",
    "end": "3554040"
  },
  {
    "text": "make which is today as of the initial and it's it's in a beta phase right now but as it stands today it's only",
    "start": "3554040",
    "end": "3560580"
  },
  {
    "text": "available for Aurora serverless on my sequel but that is you know something that you know we iterate on this and so",
    "start": "3560580",
    "end": "3568020"
  },
  {
    "text": "as this grows I think that it's a very exciting opportunity so some of the",
    "start": "3568020",
    "end": "3574680"
  },
  {
    "start": "3573000",
    "end": "3600000"
  },
  {
    "text": "parting thoughts that we have that we would just want to kind of recap with you is that as Vlad was pointing out you",
    "start": "3574680",
    "end": "3581190"
  },
  {
    "text": "want to use automation wisely and map out your operational processes in detail so that you can make intelligent choices",
    "start": "3581190",
    "end": "3587970"
  },
  {
    "text": "between using you know the the more you've described you know like cloud",
    "start": "3587970",
    "end": "3594180"
  },
  {
    "text": "formation terraform versus procedural deployments you want to know Aurora's features how they can improve on your",
    "start": "3594180",
    "end": "3600180"
  },
  {
    "text": "development testing processes develop and test with performance in mind and then quantify your expected baseline",
    "start": "3600180",
    "end": "3606960"
  },
  {
    "text": "performance of your workloads so you know what you're working toward we want to thank you for coming out today we",
    "start": "3606960",
    "end": "3613740"
  },
  {
    "text": "want to share with you that there are there is a companion workshop to iterations of it are already complete",
    "start": "3613740",
    "end": "3619500"
  },
  {
    "text": "there is a third one tomorrow it's very similar to what we've talked about today but it's more of a hands-on",
    "start": "3619500",
    "end": "3625290"
  },
  {
    "text": "workshop so the things that we covered you can do a hands-on and then we also",
    "start": "3625290",
    "end": "3632670"
  },
  {
    "text": "have a couple of related breakout sessions if you're interested in more about Aurora and then we also want",
    "start": "3632670",
    "end": "3638280"
  },
  {
    "text": "to remind you to please complete the session survey in the mobile app and so we want to thank you again for coming to",
    "start": "3638280",
    "end": "3643830"
  },
  {
    "text": "reinvent and specifically for coming to our session today thank you everyone",
    "start": "3643830",
    "end": "3648950"
  }
]