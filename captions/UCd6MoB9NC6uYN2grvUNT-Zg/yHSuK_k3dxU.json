[
  {
    "start": "0",
    "end": "73000"
  },
  {
    "text": "all right thank you guys for coming over here to learn about dynamodb streams",
    "start": "5920",
    "end": "11200"
  },
  {
    "text": "we are really excited to announce this feature it's a limited preview feature we'll give you the address in a little bit",
    "start": "11200",
    "end": "16560"
  },
  {
    "text": "in terms of where you can go to sign up but hopefully you spend some time learning about how we built dynamodb streams",
    "start": "16560",
    "end": "21920"
  },
  {
    "text": "why we built it and the cool things that you can do with it uh my name is kwaja i run the engineering team for dynamodb",
    "start": "21920",
    "end": "28560"
  },
  {
    "text": "and simpledb just to give you a quick background on why we built dynodb streams we think it's a",
    "start": "28560",
    "end": "35440"
  },
  {
    "text": "foundational capability that people inside of dynamodb team as well as people",
    "start": "35440",
    "end": "40800"
  },
  {
    "text": "like yourself and our partners and other customers can build extensive capabilities on top of it",
    "start": "40800",
    "end": "46320"
  },
  {
    "text": "things like materialized views caching backup and restore and so forth so we're",
    "start": "46320",
    "end": "51440"
  },
  {
    "text": "very excited it's my pleasure to announce uh to introduce akshat vig",
    "start": "51440",
    "end": "56480"
  },
  {
    "text": "who's a developer in the dynamodb team and party cold was one of the dev managers on the dynamodb team",
    "start": "56480",
    "end": "62320"
  },
  {
    "text": "to share with you why we're so excited about dynamodb and hopefully we'll do a quick demo or two at the end as well all right thanks",
    "start": "62320",
    "end": "70720"
  },
  {
    "text": "thanks raja so as part of dynamodb team i interact with",
    "start": "70720",
    "end": "76159"
  },
  {
    "start": "73000",
    "end": "73000"
  },
  {
    "text": "a lot of developers who are building applications on dynamodb for example i met a gaming developer who",
    "start": "76159",
    "end": "84720"
  },
  {
    "text": "was building a game and the experience that he was trying to build was that all the gamers were using the game",
    "start": "84720",
    "end": "92479"
  },
  {
    "text": "they experienced minimum latency so what he was trying to do essentially was",
    "start": "92479",
    "end": "97520"
  },
  {
    "text": "to get the data closer to the user so that all the users experience like a",
    "start": "97520",
    "end": "103920"
  },
  {
    "text": "user who is playing in sydney hits the data center in sydney and gets the data faster",
    "start": "103920",
    "end": "109200"
  },
  {
    "text": "so essentially what he was trying to do was to do cross region replication so that he can replicate the data",
    "start": "109200",
    "end": "115600"
  },
  {
    "text": "between the regions and any right that he does on one region gets to the other region as well",
    "start": "115600",
    "end": "122079"
  },
  {
    "start": "122000",
    "end": "122000"
  },
  {
    "text": "similarly another developer was building a backup solution on top of dynamodb so he was",
    "start": "122079",
    "end": "128319"
  },
  {
    "text": "building that by doing parallel scans on its database and put it to s3",
    "start": "128319",
    "end": "133599"
  },
  {
    "text": "this works really well if your data size is like small so that you can scan your table very quickly",
    "start": "133599",
    "end": "140800"
  },
  {
    "text": "but consider a table where you have like few terabytes of data it's not it's not",
    "start": "140800",
    "end": "147520"
  },
  {
    "text": "it's unrealistic to finish the parallel scan and upload to s3 within within certain time limit so essentially what he wanted to do was",
    "start": "147520",
    "end": "155040"
  },
  {
    "text": "a capability so that he can do a backup first by doing parallel scans and after that",
    "start": "155040",
    "end": "161680"
  },
  {
    "text": "he can take incremental backup incremental changes basically he can just capture what all",
    "start": "161680",
    "end": "167440"
  },
  {
    "text": "changes are happening in his database and just put those two s3 so that he doesn't have to",
    "start": "167440",
    "end": "172560"
  },
  {
    "text": "like do the full parallel scan right and then few developers wanted to",
    "start": "172560",
    "end": "178720"
  },
  {
    "text": "enhance their uh like put a cache in front of dynamodb like build different kind of",
    "start": "178720",
    "end": "184480"
  },
  {
    "text": "materialized view one being a redis cache in front of dynamodb or one customer wanted to enhance the",
    "start": "184480",
    "end": "191840"
  },
  {
    "text": "querying capability of dynamodb by by building like a solar index which is in sync with the dynamodb table",
    "start": "191840",
    "end": "198400"
  },
  {
    "text": "that that he has last but not the least people want to",
    "start": "198400",
    "end": "203840"
  },
  {
    "start": "201000",
    "end": "201000"
  },
  {
    "text": "build like developers want to build a com complex even processing system you you saw the demo",
    "start": "203840",
    "end": "209440"
  },
  {
    "text": "uh today in the keynote where the lambda was introduced so something similar like",
    "start": "209440",
    "end": "214879"
  },
  {
    "text": "exactly that people want to build even processing systems on top of dynamodb so that any item",
    "start": "214879",
    "end": "220080"
  },
  {
    "text": "in the database if it changed they can take take an action on on that change so considering the different use cases",
    "start": "220080",
    "end": "228000"
  },
  {
    "text": "that we that i just explained you guys we narrowed it down to a common denominator which is nothing",
    "start": "228000",
    "end": "234480"
  },
  {
    "text": "but logs of updates that are happening to the database so logs have been an integral part of",
    "start": "234480",
    "end": "240640"
  },
  {
    "start": "240000",
    "end": "240000"
  },
  {
    "text": "databases um and it's used to provide like very important properties in databases like",
    "start": "240640",
    "end": "246400"
  },
  {
    "text": "consistency and durability atomicity it's used for like crash recovery",
    "start": "246400",
    "end": "251840"
  },
  {
    "text": "just a quick show of hands on how many of you know how redo locks are used and undo logs are used for crash",
    "start": "251840",
    "end": "257280"
  },
  {
    "text": "recovery it's good good enough people so i'm gonna like just walk you through a very",
    "start": "257280",
    "end": "263600"
  },
  {
    "text": "like high level simplified version of how crash recovery works inside databases kind of to illustrate the like",
    "start": "263600",
    "end": "269759"
  },
  {
    "text": "simplicity but still the power of logs so let's say we have a table with two columns name",
    "start": "269759",
    "end": "275199"
  },
  {
    "text": "and destination and there's a log inside the database like a transactional log and we have a",
    "start": "275199",
    "end": "281600"
  },
  {
    "text": "user john who likes to travel and so we wanna he wants to go to tokyo so his wish list first is he wants",
    "start": "281600",
    "end": "288160"
  },
  {
    "text": "to go to tokyo so we insert a log record john tokyo and in the background we",
    "start": "288160",
    "end": "296000"
  },
  {
    "text": "the database gets updated asynchronously row gets inserted john tokyo and it's done because logs",
    "start": "296000",
    "end": "302400"
  },
  {
    "text": "you can do sequential writes and you can write very fast while while updating the database",
    "start": "302400",
    "end": "308080"
  },
  {
    "text": "you have to do uh like you have to seek inside the disk and then update the database",
    "start": "308080",
    "end": "313120"
  },
  {
    "text": "so that's a common technique used then john wants to like he has higher aspirations like why should i limit to earth i want to go",
    "start": "313120",
    "end": "319199"
  },
  {
    "text": "to mars so you add a log record john mars and database",
    "start": "319199",
    "end": "324240"
  },
  {
    "text": "gets updated to john mars and next now he gets even higher aspirations and he says now i want to go",
    "start": "324240",
    "end": "329759"
  },
  {
    "text": "beyond and i want to go to a dwarf planet like i want to go to pluto and the database",
    "start": "329759",
    "end": "334800"
  },
  {
    "text": "crashes so and the database comes up and now it is missing that row inside the database so",
    "start": "334800",
    "end": "340880"
  },
  {
    "text": "if you query it it would missing that right so how does the database recover from this uh any guesses",
    "start": "340880",
    "end": "349440"
  },
  {
    "text": "it right like it it has to just replay the logs and that's what it is like log is the",
    "start": "350080",
    "end": "356720"
  },
  {
    "text": "truth like it doesn't matter because it database came up and you can restore the state of the database at any point",
    "start": "356720",
    "end": "364080"
  },
  {
    "text": "by just replaying the logs and hence logs are very powerful they are not only used to provide these",
    "start": "364080",
    "end": "370400"
  },
  {
    "text": "important properties to databases but then you used to implement solutions like replication like you can have",
    "start": "370400",
    "end": "376800"
  },
  {
    "text": "a replica which is in sync with your source database or you could implement point in time",
    "start": "376800",
    "end": "383120"
  },
  {
    "text": "restores you could have materialized views of your data so you have a relational view of your data",
    "start": "383120",
    "end": "389600"
  },
  {
    "text": "and now you want like a full text search index and you can have that because that text index can be in sync by replaying the",
    "start": "389600",
    "end": "396560"
  },
  {
    "text": "log records so you could have multiple views of your data it can be used for auditing",
    "start": "396560",
    "end": "402319"
  },
  {
    "text": "purposes and there are many more such applications and so we decided why not give this fundable building",
    "start": "402319",
    "end": "409360"
  },
  {
    "text": "block why not give this power in the hand of you guys and hence we are introducing dynamodb",
    "start": "409360",
    "end": "415120"
  },
  {
    "text": "streams dynamodb streams essentially provides an api to tap into the log of updates done to",
    "start": "415120",
    "end": "422479"
  },
  {
    "text": "your data and it is scalable similar to how your table like a dynamodb table scales",
    "start": "422479",
    "end": "428880"
  },
  {
    "text": "by partitioning your data stream scale by sharding your data",
    "start": "428880",
    "end": "436800"
  },
  {
    "text": "so we looked at the motivation why we built uh the the dynamodb streams so let's take a",
    "start": "436800",
    "end": "442639"
  },
  {
    "text": "look at how without dynamodb streams we build a simple social network application in which as a user you are doing a",
    "start": "442639",
    "end": "450800"
  },
  {
    "text": "post and your friend sees the post he comments on it and it sends a notification to you and you go back and",
    "start": "450800",
    "end": "456240"
  },
  {
    "text": "look at it so if we have to build this today without dynamodb streams",
    "start": "456240",
    "end": "461759"
  },
  {
    "start": "458000",
    "end": "458000"
  },
  {
    "text": "the application will write to the comments table and as the comment is acknowledged back",
    "start": "461759",
    "end": "468160"
  },
  {
    "text": "it send the application then sends out a notification looks simple but if you think about all",
    "start": "468160",
    "end": "475280"
  },
  {
    "text": "the to make this application like fault tolerant think about all the edge cases what if your application just crashed",
    "start": "475280",
    "end": "482400"
  },
  {
    "text": "after writing to the comments table so essentially you have to now write a sweeper which is",
    "start": "482400",
    "end": "488160"
  },
  {
    "text": "sweeping the comments table one one way of doing that is like write a sweeper which sweeps the comments table finds out for",
    "start": "488160",
    "end": "494960"
  },
  {
    "text": "which notifications are not sent and then send out the notification but the experience overall",
    "start": "494960",
    "end": "500639"
  },
  {
    "text": "with that is not great for for the end user an obvious solution to that",
    "start": "500639",
    "end": "507120"
  },
  {
    "text": "i can think of is put a queue in front of your database so that whenever you do a write you write to the",
    "start": "507120",
    "end": "513120"
  },
  {
    "text": "queue and then you have a cue processor which is processing the queue and writing to the comments table once",
    "start": "513120",
    "end": "521039"
  },
  {
    "text": "it is acknowledged it sends a notification out but with this queue if you put queue in",
    "start": "521039",
    "end": "527920"
  },
  {
    "text": "front of your database then you then you lose the cool properties that dynamodb provides which is",
    "start": "527920",
    "end": "533279"
  },
  {
    "text": "you cannot do conditional rights on the table anymore you all the rights that you are doing to",
    "start": "533279",
    "end": "538800"
  },
  {
    "text": "your database they become eventually consistent because you have a queue in front of it where all the data is going",
    "start": "538800",
    "end": "545040"
  },
  {
    "text": "so you can solve that by putting data into the queue and into the comments table again that",
    "start": "545040",
    "end": "551839"
  },
  {
    "text": "that can be done but considering the different fault scenarios that come into picture now",
    "start": "551839",
    "end": "557360"
  },
  {
    "text": "keeping the queue and the table in sync becomes another hard problem so now let's take a look at how",
    "start": "557360",
    "end": "565600"
  },
  {
    "start": "563000",
    "end": "563000"
  },
  {
    "text": "you will do this with dynamodb streams so as a user the application writes to",
    "start": "565600",
    "end": "571680"
  },
  {
    "text": "the comments table and any write that happens to the database is and it's acknowledged back to the",
    "start": "571680",
    "end": "578000"
  },
  {
    "text": "application is definitely going to exist in the dynamodb streams and then you",
    "start": "578000",
    "end": "583200"
  },
  {
    "text": "have a stream processor which processes it and sends out a notification so even if your application crashes",
    "start": "583200",
    "end": "590720"
  },
  {
    "text": "after writing data to the comments table you still have it in you still have it in the stream and you",
    "start": "590720",
    "end": "596560"
  },
  {
    "text": "can process it and send out a notification to the end user you still have to make your stream processor",
    "start": "596560",
    "end": "601920"
  },
  {
    "text": "fault tolerant you have to take make sure that it's built in a call tolerant way",
    "start": "601920",
    "end": "607440"
  },
  {
    "text": "but all the failure scenarios that we saw in take one and take two they are taken care by dynamodb so",
    "start": "607440",
    "end": "614560"
  },
  {
    "text": "you guys now just have to focus on your your business logic what exactly you want to do",
    "start": "614560",
    "end": "619760"
  },
  {
    "text": "with all the changes that are happening in your database so now let's say that you built this",
    "start": "619760",
    "end": "626640"
  },
  {
    "text": "application it became popular you got funding now you want to like make it big you want to",
    "start": "626640",
    "end": "632000"
  },
  {
    "text": "scale it and send it to like the like global users so what you would do",
    "start": "632000",
    "end": "638480"
  },
  {
    "text": "is the first thing that comes to my mind is like you have to basically again do cross region replication for this",
    "start": "638480",
    "end": "644959"
  },
  {
    "text": "so that all the data that you have is closer to the user right so we",
    "start": "644959",
    "end": "652320"
  },
  {
    "text": "are also introducing a cross region replication open source library which which will help you understand how",
    "start": "652320",
    "end": "658240"
  },
  {
    "text": "to build applications on top of dynamodb streams let's take a look at what exactly this",
    "start": "658240",
    "end": "663920"
  },
  {
    "text": "library provides so as a user you go and create a",
    "start": "663920",
    "end": "669360"
  },
  {
    "text": "replication group in which you say that i want a replication group in which i have a table",
    "start": "669360",
    "end": "674480"
  },
  {
    "text": "in north virginia and i want to replicate this table into two other regions one is asia",
    "start": "674480",
    "end": "680560"
  },
  {
    "text": "pacific sydney and another one in europe ireland dublin so once you create this",
    "start": "680560",
    "end": "687680"
  },
  {
    "text": "replication group the next thing is anytime you do a write to let's say your north virginia table",
    "start": "687680",
    "end": "695360"
  },
  {
    "text": "is the master table anytime you do a write the cross region replication library",
    "start": "695360",
    "end": "700640"
  },
  {
    "text": "picks up that right from the stream and replicates it for you",
    "start": "700640",
    "end": "706560"
  },
  {
    "text": "the cross region replication library let's dive deep a little bit more into that now let's say that you have to build",
    "start": "706800",
    "end": "713360"
  },
  {
    "start": "707000",
    "end": "707000"
  },
  {
    "text": "this library the cross region application library which is processing millions of writes per second",
    "start": "713360",
    "end": "719200"
  },
  {
    "text": "this in itself is again a very hard problem because you have to make sure that your application",
    "start": "719200",
    "end": "724240"
  },
  {
    "text": "is doing load balancing properly as your table throughput is increasing your",
    "start": "724240",
    "end": "729920"
  },
  {
    "text": "the the the processor of the data which is the library it spawns multiple workers so that it",
    "start": "729920",
    "end": "735519"
  },
  {
    "text": "scales horizontally right so and then you have to again make sure that the library is",
    "start": "735519",
    "end": "742560"
  },
  {
    "text": "fault tolerant so that you have multiple workers who are processing the data and at any time if one worker dies",
    "start": "742560",
    "end": "750320"
  },
  {
    "text": "it the another it's detected first is that it detects that the worker has died",
    "start": "750320",
    "end": "755600"
  },
  {
    "text": "and next thing is the new worker which is taking over the work it starts from",
    "start": "755600",
    "end": "761120"
  },
  {
    "text": "wherever the the other worker left so that it's like if if i now stop talking because i'm not",
    "start": "761120",
    "end": "766160"
  },
  {
    "text": "feeling well uh parikh should not start again the whole presentation you just he should just take it over further from here",
    "start": "766160",
    "end": "773839"
  },
  {
    "text": "so the cross region replication library takes care of all these things now let's see as a how how does it scale",
    "start": "774160",
    "end": "782959"
  },
  {
    "text": "so if i have to draw a high level architectural diagram of this",
    "start": "782959",
    "end": "788399"
  },
  {
    "text": "a put that goes to dynamodb it the dynamodb table to scale scale out it creates multiple partitions so",
    "start": "789440",
    "end": "796079"
  },
  {
    "text": "a put goes to dynamodb and then you have stream if you enable stream to it it",
    "start": "796079",
    "end": "801120"
  },
  {
    "text": "will show up in the stream then you have cross region library which spawns multiple workers",
    "start": "801120",
    "end": "806639"
  },
  {
    "text": "so the cross region replication library is built using kinesis client library that's why",
    "start": "806639",
    "end": "811839"
  },
  {
    "text": "you see kcl workers in the picture the kinesis client library was built for the use case where you have",
    "start": "811839",
    "end": "819680"
  },
  {
    "text": "uh to basically provide you fault tolerance and and and the load balancing that the things that we discussed in the",
    "start": "819680",
    "end": "824720"
  },
  {
    "text": "previous slide so we enhanced kinesis client library so that it just works with dynamodb",
    "start": "824720",
    "end": "830480"
  },
  {
    "text": "streams so that you don't have to again write another library to to start consuming data and the workers will then",
    "start": "830480",
    "end": "838320"
  },
  {
    "text": "put data into the stream now as more users come to your table you will",
    "start": "838320",
    "end": "844880"
  },
  {
    "text": "increase the throughput of your of your dynamodb table which will increase the number of partitions to support your throughput",
    "start": "844880",
    "end": "851199"
  },
  {
    "text": "corresponding to that you will see more shards and the cross region library will",
    "start": "851199",
    "end": "856639"
  },
  {
    "text": "identify there are new shards and spawn new workers so that it can process the data from the new shads",
    "start": "856639",
    "end": "863040"
  },
  {
    "text": "and replicate it so all the work is taken care taken care by the cross",
    "start": "863040",
    "end": "868639"
  },
  {
    "text": "region replication library so all the applications now you built you can do you can create like read replicas in",
    "start": "868639",
    "end": "876160"
  },
  {
    "start": "872000",
    "end": "872000"
  },
  {
    "text": "different regions now we also and we also thought about",
    "start": "876160",
    "end": "882639"
  },
  {
    "text": "read replica is one use case but what if you want to do rights anywhere in your replication",
    "start": "882639",
    "end": "888079"
  },
  {
    "text": "group essentially you have a replication group in which one table is in north virginia and",
    "start": "888079",
    "end": "893279"
  },
  {
    "text": "second table is in dublin what if you want to do rights in both the regions right the obvious problem is",
    "start": "893279",
    "end": "900480"
  },
  {
    "text": "what if the rights you do rights in both the both the tables at the same time like",
    "start": "900480",
    "end": "906399"
  },
  {
    "text": "then you have conflict which one is the truth so we provide conflict resolution a default conflict",
    "start": "906399",
    "end": "912320"
  },
  {
    "text": "resolution algorithm in which you as users can provide a timestamp to it so it uses the",
    "start": "912320",
    "end": "919440"
  },
  {
    "text": "the user provided the application provided timestamp to do conflict resolution and basically the last right is the",
    "start": "919440",
    "end": "925760"
  },
  {
    "text": "truth so that is one implementation that we have done for conflict resolution and the library also provides uh hooks",
    "start": "925760",
    "end": "933040"
  },
  {
    "text": "so that you can put in your own conflict resolution strategies uh to resolve the conflicts",
    "start": "933040",
    "end": "940079"
  },
  {
    "text": "now this library you can use to either like you can start a brand new",
    "start": "940079",
    "end": "945199"
  },
  {
    "text": "table and in the preview cluster that that we are launching or you if you have another like if you",
    "start": "945199",
    "end": "951360"
  },
  {
    "text": "let's say create a table but don't enable streams on it you can still use this library it will automatically",
    "start": "951360",
    "end": "957920"
  },
  {
    "text": "do parallel scan to catch up your replicas in other regions and once the replicas are caught up it",
    "start": "957920",
    "end": "964720"
  },
  {
    "text": "starts processing streams to keep the replicas in sync",
    "start": "964720",
    "end": "970480"
  },
  {
    "text": "so the dynamo db streams and the dynamodb cross region solution it gives you a simple way to build cross",
    "start": "970480",
    "end": "977360"
  },
  {
    "text": "region replication and applications that that need cross region replication",
    "start": "977360",
    "end": "983519"
  },
  {
    "text": "let's walk over another interesting use case which is what if you want to extend dynamodb",
    "start": "983519",
    "end": "990000"
  },
  {
    "text": "querying capabilities so that you want to do you want to build a materialized view something like a solar index on top of dynamodb",
    "start": "990000",
    "end": "998160"
  },
  {
    "text": "so what you have to do is you you will do a stream processor again",
    "start": "998160",
    "end": "1005120"
  },
  {
    "start": "1000000",
    "end": "1000000"
  },
  {
    "text": "which is processing the stream and creating a materialized view which is which could be like an elastic search",
    "start": "1005120",
    "end": "1010160"
  },
  {
    "text": "cluster and and not only that if you want to build cross region materialized views you can",
    "start": "1010160",
    "end": "1016560"
  },
  {
    "text": "do that today by an enabling cross region library on dynamodb streams",
    "start": "1016560",
    "end": "1022000"
  },
  {
    "text": "so that in the base region you have a dynamodb table which is which is creating a which is keeping a",
    "start": "1022000",
    "end": "1028319"
  },
  {
    "text": "materialized view in sync in the local region enable cross region library so that it",
    "start": "1028319",
    "end": "1033760"
  },
  {
    "text": "starts pushing data out to another region you have a stream processor in the destination region",
    "start": "1033760",
    "end": "1038798"
  },
  {
    "text": "which is basically reading the data from the stream and building another local materialized",
    "start": "1038799",
    "end": "1044319"
  },
  {
    "text": "view in the destination region so this is this is the power that that parikh was talking about we wanted to basically expose that's why",
    "start": "1044319",
    "end": "1051600"
  },
  {
    "text": "we thought let's expose dynamodb stream so that people like all the developers can build cool applications like these on",
    "start": "1051600",
    "end": "1058000"
  },
  {
    "text": "top of dynamodb and so the different type of views that",
    "start": "1058000",
    "end": "1064640"
  },
  {
    "start": "1061000",
    "end": "1061000"
  },
  {
    "text": "you can build on top of dynamodb one could be like an elastic cache",
    "start": "1064640",
    "end": "1070320"
  },
  {
    "text": "cluster or an amazon s3 where you're pushing your data out to s3 or a cloud search to enhance",
    "start": "1070320",
    "end": "1076960"
  },
  {
    "text": "your querying capabilities an rds instance if you want to do like more sql like queries on your data or you can",
    "start": "1076960",
    "end": "1084000"
  },
  {
    "text": "put this into another random db table if you want to basically simulate a test",
    "start": "1084000",
    "end": "1089440"
  },
  {
    "text": "test a dev environment for for something which is similar to your prod environment",
    "start": "1089440",
    "end": "1095840"
  },
  {
    "text": "so we just looked at some of the powerful solutions that can be built on top of dynamodbc",
    "start": "1096240",
    "end": "1101360"
  },
  {
    "text": "streams and we are providing a few solutions to you also like we are providing cross region replication library to you",
    "start": "1101360",
    "end": "1108400"
  },
  {
    "text": "but we think that you guys can also develop a lot of powerful innovative solutions on top of dynamodb streams and",
    "start": "1108400",
    "end": "1114880"
  },
  {
    "text": "what i'm gonna do here is explore some of the internal details of dynamodb streams so that you",
    "start": "1114880",
    "end": "1120320"
  },
  {
    "text": "understand it and can start enhancing this power and developing solutions on it so first thing that i want to mention is",
    "start": "1120320",
    "end": "1127440"
  },
  {
    "start": "1125000",
    "end": "1125000"
  },
  {
    "text": "you control the type of record that you get out of the stream we call",
    "start": "1127440",
    "end": "1133280"
  },
  {
    "text": "this as a view type and what this means is let's say now you have an item in dynamodb with two attributes name and",
    "start": "1133280",
    "end": "1140240"
  },
  {
    "text": "destination kind of the similar example and there's john and mars and now john",
    "start": "1140240",
    "end": "1145360"
  },
  {
    "text": "wants to go to pluto and we updated from john mars to john pluto",
    "start": "1145360",
    "end": "1150720"
  },
  {
    "text": "okay now you can say i want to stream of only old images which means i want to",
    "start": "1150720",
    "end": "1157440"
  },
  {
    "text": "have the records to contain the image of the item before the update so you say old old",
    "start": "1157440",
    "end": "1163440"
  },
  {
    "text": "view type or you can say i want the image of the items after the update and you said new image",
    "start": "1163440",
    "end": "1168880"
  },
  {
    "text": "or you can say old and new and our user can say keys only and depending upon your use case you",
    "start": "1168880",
    "end": "1175360"
  },
  {
    "text": "will select a specific view type for example let's say you want you have an item and then an item got",
    "start": "1175360",
    "end": "1182160"
  },
  {
    "text": "corrupted and you want to restore to its previous state at that time the old image of the item would be really useful",
    "start": "1182160",
    "end": "1188000"
  },
  {
    "text": "because you can reconstruct the state of the item before it got corrupted so this is a very powerful thing the",
    "start": "1188000",
    "end": "1195280"
  },
  {
    "text": "other thing that i want to highlight is updates done to your streams are stored asynchronously",
    "start": "1195280",
    "end": "1201200"
  },
  {
    "text": "what this means if item i gets updated to the value a it is committed durably to dynamodb",
    "start": "1201200",
    "end": "1209360"
  },
  {
    "text": "and then it's act back to the client and asynchronously it's updated to the",
    "start": "1209360",
    "end": "1214559"
  },
  {
    "text": "stream which means the performance of your puts and what like your updates to your dynamodb table",
    "start": "1214559",
    "end": "1221760"
  },
  {
    "text": "will not be impacted because of the fact that these updates are getting persisted on the stream",
    "start": "1221760",
    "end": "1226960"
  },
  {
    "text": "and so this way you can like develop high performance applications still on top of dynamodb",
    "start": "1226960",
    "end": "1232240"
  },
  {
    "text": "the other one that we have really worked hard to deliver is every update that happens for a item is",
    "start": "1232240",
    "end": "1238400"
  },
  {
    "text": "stored exactly once on the stream and this is a replicated stream and so in this case let's say item i now",
    "start": "1238400",
    "end": "1245280"
  },
  {
    "text": "gets updated to value b and it gets stored on here and due to some like network conditions",
    "start": "1245280",
    "end": "1251840"
  },
  {
    "text": "or timeouts if the storage layer in dynamodb tries to resubmit the same update to the",
    "start": "1251840",
    "end": "1257600"
  },
  {
    "text": "stream we don't let it happen so and this is this is like a good assurance for",
    "start": "1257600",
    "end": "1263840"
  },
  {
    "text": "application developers because they don't have to worry about the duplication like they can they know like they have this assurance if i get",
    "start": "1263840",
    "end": "1269919"
  },
  {
    "text": "an update i know it's it's the unique update from for that particular item so it simplifies application development",
    "start": "1269919",
    "end": "1277200"
  },
  {
    "text": "the other one we have is updates are strictly ordered in the order of updates done to that",
    "start": "1277200",
    "end": "1283600"
  },
  {
    "text": "item so if i is updated to a b and c uh we store in the same order on the",
    "start": "1283600",
    "end": "1289840"
  },
  {
    "text": "stream in spite of any failure conditions network timeouts and this again",
    "start": "1289840",
    "end": "1295120"
  },
  {
    "text": "is very important property because it simplifies application development but now you don't have to worry about",
    "start": "1295120",
    "end": "1300480"
  },
  {
    "text": "reordering you know that anything that you're getting is in the order of updates and this is very",
    "start": "1300480",
    "end": "1305520"
  },
  {
    "text": "important like for example you're doing replication or you're doing point-in-time restore you can just replay the logs as it is",
    "start": "1305520",
    "end": "1314480"
  },
  {
    "text": "so we have implemented a very high throughput consensus protocol internally we call this the",
    "start": "1314880",
    "end": "1320480"
  },
  {
    "text": "transactional journal like if for people who attended morningstalk from swami",
    "start": "1320480",
    "end": "1325520"
  },
  {
    "text": "and alvi this is one of the primitives that we have developed a transactional journal inside aws and this is a service built",
    "start": "1325520",
    "end": "1334240"
  },
  {
    "text": "on top of the transactional server transactional journal and this replication protocol",
    "start": "1334240",
    "end": "1340000"
  },
  {
    "text": "we have absorbed all the complexities and all the failure conditions that typically of like occur in like distributed",
    "start": "1340000",
    "end": "1346880"
  },
  {
    "text": "systems so that applications that can be built on top of this get simplified",
    "start": "1346880",
    "end": "1352080"
  },
  {
    "text": "and the consensus protocol replicates all the updates across multiple ages to provide you with like high durability",
    "start": "1352080",
    "end": "1359039"
  },
  {
    "text": "and high availability the streams are completely managed which",
    "start": "1359039",
    "end": "1365760"
  },
  {
    "text": "means today you can go on your table and just you have to just go and enable a stream",
    "start": "1365760",
    "end": "1371280"
  },
  {
    "text": "you do not have to specify any throughput requirements or anything you just go and you know it's a one click enable stream",
    "start": "1371280",
    "end": "1377679"
  },
  {
    "text": "and we even manage the scalability part of it like we say okay let's scale the streams as the base",
    "start": "1377679",
    "end": "1384000"
  },
  {
    "text": "table throughput increase let's restart the data so that means you are completely hands off in terms of managing how",
    "start": "1384000",
    "end": "1391760"
  },
  {
    "text": "stream scale or like provisioning a throughput we have designed the system so that it",
    "start": "1391760",
    "end": "1399600"
  },
  {
    "text": "provides sub second latency and when i say sub second latency it means",
    "start": "1399600",
    "end": "1404880"
  },
  {
    "text": "the time between the put that's happening to your table to the time earliest time that you can",
    "start": "1404880",
    "end": "1410880"
  },
  {
    "text": "retrieve from the stream is going to be under a second and this helps you building high performance",
    "start": "1410880",
    "end": "1417200"
  },
  {
    "text": "applications on top of the stream the updates on the stream so this is",
    "start": "1417200",
    "end": "1422640"
  },
  {
    "text": "another property of the stream the updates on the stream are stored for a duration of 24 hours which means like even if your",
    "start": "1422640",
    "end": "1429840"
  },
  {
    "text": "table gets deleted now the updates done to your table available for the next 24 hours",
    "start": "1429840",
    "end": "1435120"
  },
  {
    "text": "and this is again important because let's say you're storing updates updates are being",
    "start": "1435120",
    "end": "1440159"
  },
  {
    "text": "stored to your table for the last 24 hours and let's say at 10 am today morning",
    "start": "1440159",
    "end": "1445760"
  },
  {
    "text": "an application bug got deployed and it went and like let's say corrupted logically",
    "start": "1445760",
    "end": "1451279"
  },
  {
    "text": "corrupted some items and now you want to restore the state of your data to a well-known good state",
    "start": "1451279",
    "end": "1457200"
  },
  {
    "text": "now you could read the updates from a stream up to like around 10 am and find out what was the like state of",
    "start": "1457200",
    "end": "1463840"
  },
  {
    "text": "the item at that time and restore to its last known good state",
    "start": "1463840",
    "end": "1469600"
  },
  {
    "text": "today you can get started with dynamic like dynamodb streams by downloading dynamodb local it's in a",
    "start": "1469679",
    "end": "1476799"
  },
  {
    "text": "preview mode and it now supports streams and like how many people know about dynamodb",
    "start": "1476799",
    "end": "1484000"
  },
  {
    "text": "local okay that's that's good i'm happy to see that uh so dynamodb local is this desktop",
    "start": "1484000",
    "end": "1491760"
  },
  {
    "text": "installable version of dynamodb and it's very very useful for like development and testing",
    "start": "1491760",
    "end": "1498080"
  },
  {
    "text": "uh so the only thing is do not use it for production it does not it doesn't have any replication",
    "start": "1498080",
    "end": "1504640"
  },
  {
    "text": "no durability guarantees uh so yeah please do not use it for production it's available",
    "start": "1504640",
    "end": "1510640"
  },
  {
    "text": "at the end point mentioned here if you guys wanna note down",
    "start": "1510640",
    "end": "1516240"
  },
  {
    "start": "1520000",
    "end": "1520000"
  },
  {
    "text": "now what i'm gonna do is walk you through some code to show how easy it is to consume",
    "start": "1520400",
    "end": "1525840"
  },
  {
    "text": "streams and process streams and in this few lines of code of course it's representative code",
    "start": "1525840",
    "end": "1531919"
  },
  {
    "text": "kind of like simplified for presentation sake but kind of gives you an idea like how easy it is to get started and",
    "start": "1531919",
    "end": "1539840"
  },
  {
    "text": "this is assuming that you're using kinesis client library so here so the first line that's",
    "start": "1539840",
    "end": "1546640"
  },
  {
    "text": "highlighted over there it's saying it's creating an instance of dynamodb streams adapter client",
    "start": "1546640",
    "end": "1553200"
  },
  {
    "text": "and you need this instance because you have the kinesis client library which typically talks to kinesis streams",
    "start": "1553200",
    "end": "1559919"
  },
  {
    "text": "and for letting it talk to dynamodb streams we had it like a shim shim between kinesis client library and",
    "start": "1559919",
    "end": "1566880"
  },
  {
    "text": "and the dynamodb stream so it goes through that so you do that and you are passing in",
    "start": "1566880",
    "end": "1572400"
  },
  {
    "text": "credentials and so that it can talk to dynamodb streams next you create an instance of a",
    "start": "1572400",
    "end": "1579120"
  },
  {
    "text": "dynamodb client and you need the kinesis client library needs that like remember actually told",
    "start": "1579120",
    "end": "1584400"
  },
  {
    "text": "that there are these workers that get spawned to process all the streams like how do they coordinate they use",
    "start": "1584400",
    "end": "1590640"
  },
  {
    "text": "dynamodb as their metadata store and that's one of the building blocks for building the scalable stream",
    "start": "1590640",
    "end": "1596240"
  },
  {
    "text": "processing thing so you check every worker check points its state every so often",
    "start": "1596240",
    "end": "1601520"
  },
  {
    "text": "so that we can achieve fault tolerance and it can do load balancing amongst themselves and that's why it needs this",
    "start": "1601520",
    "end": "1607440"
  },
  {
    "text": "dynamodb client okay so we create an adapter client we created a like we created adapter client",
    "start": "1607440",
    "end": "1613760"
  },
  {
    "text": "we created dynamodb client and the next thing that we're going to do is create what we call as kinesis",
    "start": "1613760",
    "end": "1618960"
  },
  {
    "text": "client lip configuration and it's a bunch of configuration that you pass to the workers",
    "start": "1618960",
    "end": "1624080"
  },
  {
    "text": "which we are going to instantiate in a moment here and you pass it and you also specify",
    "start": "1624080",
    "end": "1630320"
  },
  {
    "text": "in every like every batch that it receives how many records to retrieve so in this case",
    "start": "1630320",
    "end": "1636000"
  },
  {
    "text": "we are saying retrieve 100 records you know one call like he's doing batch gets and then you say where to start in the",
    "start": "1636000",
    "end": "1642880"
  },
  {
    "text": "stream you can say start at the head like so it's called or you can say start at the tail in the",
    "start": "1642880",
    "end": "1650080"
  },
  {
    "text": "stream horizon means start at the head of the stream or you could say like start at a particular sequence number so you could",
    "start": "1650080",
    "end": "1656559"
  },
  {
    "text": "say that too okay so that thing and then you create an instance of a worker",
    "start": "1656559",
    "end": "1662399"
  },
  {
    "text": "and in the worker you pass in all the things that you have created before all the instances",
    "start": "1662399",
    "end": "1667440"
  },
  {
    "text": "and then this just starts the thread but you should use an executor service with thread pulling and whatnot this is just",
    "start": "1667440",
    "end": "1673200"
  },
  {
    "text": "a very simplified version so that's it like you get started with writing a",
    "start": "1673200",
    "end": "1678399"
  },
  {
    "text": "distributed stream processor it's taking care of spinning off new workers and",
    "start": "1678399",
    "end": "1683520"
  },
  {
    "text": "whatnot like and it's as easy as that now that takes care of consuming streams",
    "start": "1683520",
    "end": "1689440"
  },
  {
    "text": "but what about processing streams like you want to take some action on the stream right now if you notice the worker constructor",
    "start": "1689440",
    "end": "1696799"
  },
  {
    "text": "has the first argument is record processor factory and that factory returns an instance of",
    "start": "1696799",
    "end": "1703200"
  },
  {
    "text": "a record processor which is your custom logic to process records okay",
    "start": "1703200",
    "end": "1708480"
  },
  {
    "text": "so now let us look at an example like this is processing streams now to process streams you write a",
    "start": "1708480",
    "end": "1713919"
  },
  {
    "start": "1710000",
    "end": "1710000"
  },
  {
    "text": "record processor is essentially implementing the i record processor interface and you override the method process",
    "start": "1713919",
    "end": "1720480"
  },
  {
    "text": "records and process records gets a list of uh records that it has retrieved from the",
    "start": "1720480",
    "end": "1727120"
  },
  {
    "text": "stream okay so so far so good then for every record you iterate over",
    "start": "1727120",
    "end": "1733600"
  },
  {
    "text": "the record and you see if it's an instance of a record adapter now record adapter is another like we",
    "start": "1733600",
    "end": "1738720"
  },
  {
    "text": "add a shim on top of the like kinesis record to indicate that it's a dynamodb stream record",
    "start": "1738720",
    "end": "1745039"
  },
  {
    "text": "and if it is an instance of a record adapter then you go and get the internal object",
    "start": "1745039",
    "end": "1751600"
  },
  {
    "text": "of out of it which is the dynamodb stream record and then you extract the event name and",
    "start": "1751600",
    "end": "1757360"
  },
  {
    "text": "the event name indicates whether it was a put update or a delete like what kind of operation was",
    "start": "1757360",
    "end": "1763360"
  },
  {
    "text": "it and then in this case we have like oh it was an insert uh or a modified so insert or",
    "start": "1763360",
    "end": "1769919"
  },
  {
    "text": "basically it's a put or an update and then the demo helper dot put item that you see in the third line there",
    "start": "1769919",
    "end": "1776720"
  },
  {
    "text": "is going and putting the same update in a remote table in the remote dynamodb table so",
    "start": "1776720",
    "end": "1782240"
  },
  {
    "text": "literally in a few lines of code we got replication like we are replicating data from one table into another these two slides",
    "start": "1782240",
    "end": "1789039"
  },
  {
    "text": "got you started with doing like a table replica you got a table replica which is in sync with your base table",
    "start": "1789039",
    "end": "1796240"
  },
  {
    "text": "um so now i'm going to show you a demo of this like how like demo of the cross region library and how it does",
    "start": "1796240",
    "end": "1803279"
  },
  {
    "text": "cross engine replication and in this demo in three minutes i'm gonna have a table where it's in",
    "start": "1803279",
    "end": "1810799"
  },
  {
    "text": "virginia and i'm gonna have another table set up which will read all the data do a bootstrap from",
    "start": "1810799",
    "end": "1816399"
  },
  {
    "text": "the base table and it will start replicating and then i'm gonna set up another master table",
    "start": "1816399",
    "end": "1822000"
  },
  {
    "text": "so you can do rights to both the tables and then have another replica so i'm gonna have a replication group of",
    "start": "1822000",
    "end": "1828080"
  },
  {
    "text": "four tables with two masters two replicas and i'll show you like how simple it is to get things started",
    "start": "1828080",
    "end": "1833760"
  },
  {
    "text": "and in this case i'm using an application which is basically capturing weather data and like other sensory data",
    "start": "1833760",
    "end": "1840399"
  },
  {
    "text": "from various places and putting it into a given table and there's an application which is plotting",
    "start": "1840399",
    "end": "1846720"
  },
  {
    "text": "all the sensor data and there are some users in us uh let's assume there are some users in u.s and",
    "start": "1846720",
    "end": "1852960"
  },
  {
    "text": "let's assume there are some users in tokyo so we don't want the users in tokyo to be accessing the data in",
    "start": "1852960",
    "end": "1859200"
  },
  {
    "text": "like in us they we want that the users in tokyo to be accessing the database in tokyo so",
    "start": "1859200",
    "end": "1864720"
  },
  {
    "text": "we want the data in id to be replicated to tokyo okay so that that's kind of the",
    "start": "1864720",
    "end": "1870960"
  },
  {
    "text": "use case or problem that we are trying to solve so let me get started",
    "start": "1870960",
    "end": "1879840"
  },
  {
    "text": "okay so here we go so we go to the dashboard there is a ui that will be shipped with it",
    "start": "1885440",
    "end": "1891440"
  },
  {
    "text": "you see that there's here's you see all the replication groups you click on add to create a new",
    "start": "1891440",
    "end": "1897360"
  },
  {
    "text": "replication group we're going to call it sensor data okay sensor data and click on add",
    "start": "1897360",
    "end": "1907840"
  },
  {
    "text": "there you go and if you see like it's showing it as yellow because there are no like",
    "start": "1908080",
    "end": "1913120"
  },
  {
    "text": "anything there are no tables in this replication group now we are going to go look at view details replication is turned off",
    "start": "1913120",
    "end": "1920080"
  },
  {
    "text": "no masters no replicas click on add master specify region for the demo purposes we",
    "start": "1920080",
    "end": "1926080"
  },
  {
    "text": "are using just dynamodb local so we specify a local endpoint and we",
    "start": "1926080",
    "end": "1931200"
  },
  {
    "text": "specify table name master and we click on add so we got a master table and",
    "start": "1931200",
    "end": "1937039"
  },
  {
    "text": "for the demo purposes let's assume is ide you can do this with real dynamodb also so you go to the",
    "start": "1937039",
    "end": "1943360"
  },
  {
    "text": "replica table and say ap northeast one again the replica is also a dynamic local end point",
    "start": "1943360",
    "end": "1951840"
  },
  {
    "text": "and you specify a table call it replica and you click on add okay the master",
    "start": "1951840",
    "end": "1959440"
  },
  {
    "text": "table already exists and there you go so now you have master and",
    "start": "1959440",
    "end": "1964799"
  },
  {
    "text": "replica now let's look at the application this sensor data is being plotted",
    "start": "1964799",
    "end": "1970559"
  },
  {
    "text": "and in us us east there is data but in ap northeast there is no data of course and nothing is getting plotted",
    "start": "1970559",
    "end": "1977279"
  },
  {
    "text": "because there's no replication now let's go turn on the replication okay there you go and you click turn on",
    "start": "1977279",
    "end": "1984720"
  },
  {
    "text": "and now it starts bootstrapping and after it's done bootstrapping it will catch up",
    "start": "1984720",
    "end": "1989840"
  },
  {
    "text": "keep catching up with the latest updates and so there you go and if you go back to the application you see like data is now",
    "start": "1989840",
    "end": "1996480"
  },
  {
    "text": "starting flowing into this other table and okay",
    "start": "1996480",
    "end": "2001919"
  },
  {
    "text": "so in a couple of minutes you got like real replica setup like and depending on the data size of course",
    "start": "2001919",
    "end": "2008480"
  },
  {
    "text": "it will take time to set up a replica so in this case now it's fully cut up and in sync with",
    "start": "2008480",
    "end": "2014399"
  },
  {
    "text": "with the master table now let's try one more thing so let's go back and turn off the",
    "start": "2014399",
    "end": "2021360"
  },
  {
    "text": "replication okay so that means it's not gonna catch up with its master table oh and",
    "start": "2021360",
    "end": "2026640"
  },
  {
    "text": "we also expose different pro like metrics you can see what the replica lag",
    "start": "2026640",
    "end": "2031760"
  },
  {
    "text": "or how many rights are coming from the user versus how many rights are being done by the system",
    "start": "2031760",
    "end": "2037039"
  },
  {
    "text": "because the right throughput will be consumed by this so we turn off the replication",
    "start": "2037039",
    "end": "2042640"
  },
  {
    "text": "and we go back to the app and if you notice on the right hand side now it is showing blanks because it's",
    "start": "2042640",
    "end": "2049200"
  },
  {
    "text": "getting no data and hence it's not plotting anything okay now let's go back and now you like",
    "start": "2049200",
    "end": "2055358"
  },
  {
    "text": "now we can create add one more master and having two masters means you can write to both these tables and they will like",
    "start": "2055359",
    "end": "2062000"
  },
  {
    "text": "cross sync with everyone and which is kind of a powerful capability so you click on add",
    "start": "2062000",
    "end": "2068480"
  },
  {
    "text": "and now you have master two and you click and you get another replica and",
    "start": "2068480",
    "end": "2075679"
  },
  {
    "text": "yeah and and we provide like a default conflict resolution policy which is like",
    "start": "2075679",
    "end": "2080800"
  },
  {
    "text": "a conflict resolution policy based on a clock value that you provide and",
    "start": "2080800",
    "end": "2086158"
  },
  {
    "text": "but it's also like pluggable so you can provide your own policy like your own conflict resolution",
    "start": "2086159",
    "end": "2091358"
  },
  {
    "text": "policy if you want and that's it so you click and basically it got things replicated",
    "start": "2091359",
    "end": "2097040"
  },
  {
    "text": "so it was as easy as that the other thing that i want to mention is what the capability that we are also",
    "start": "2097040",
    "end": "2104240"
  },
  {
    "text": "providing now is dynamodb reactors and this is pretty big like i'm very excited about this",
    "start": "2104240",
    "end": "2110160"
  },
  {
    "text": "like now we can on every update done to your dynamodb table you can go and trigger a lambda function",
    "start": "2110160",
    "end": "2116640"
  },
  {
    "text": "so these are like post commit triggers which was not present today like in dynamodb till today and this is very powerful",
    "start": "2116640",
    "end": "2123440"
  },
  {
    "text": "because think about it like you are storing addresses in your dynamodb table you want to validate the addresses",
    "start": "2123440",
    "end": "2129760"
  },
  {
    "text": "you could do that uh if you are storing like let's say stock prices and you want to you know",
    "start": "2129760",
    "end": "2135040"
  },
  {
    "text": "like do a trade order or something based on a like limit order you could do that because now you could",
    "start": "2135040",
    "end": "2140720"
  },
  {
    "text": "every update you know the stock price and you could trigger a limit order you could send notifications like the",
    "start": "2140720",
    "end": "2146320"
  },
  {
    "text": "example that akshith walked through whenever you get a like on a post you want to get a notification",
    "start": "2146320",
    "end": "2153119"
  },
  {
    "text": "you could do that because every like can now trigger a lambda function which can send notifications and you can do it to",
    "start": "2153119",
    "end": "2159760"
  },
  {
    "text": "use replicas like you can have the lambda function right to another replica and so on and it's going to have console",
    "start": "2159760",
    "end": "2167440"
  },
  {
    "text": "support so i'm going to talk about a bit but we have a console where you can now say trigger a lambda function on top of",
    "start": "2167440",
    "end": "2175200"
  },
  {
    "text": "every update done to your stream or to your table sorry today the preview is available you need",
    "start": "2175200",
    "end": "2182800"
  },
  {
    "text": "to go and register this is the link where you need to register uh for getting started with",
    "start": "2182800",
    "end": "2188320"
  },
  {
    "text": "preview uh it's it's available on two temporary endpoints that we have created",
    "start": "2188320",
    "end": "2193839"
  },
  {
    "text": "uh north virginia and ireland and we are doing that so that you can get started writing solutions",
    "start": "2193839",
    "end": "2198960"
  },
  {
    "text": "until we get it out in production and these temporary endpoints will be available",
    "start": "2198960",
    "end": "2204160"
  },
  {
    "text": "until we launch globally uh a good minute people are clicking pictures here so",
    "start": "2204160",
    "end": "2215839"
  },
  {
    "start": "2216000",
    "end": "2216000"
  },
  {
    "text": "this is kind of a snapshot of the preview console now you have a streams view and you can see all the streams in your",
    "start": "2216240",
    "end": "2222960"
  },
  {
    "text": "account and the tables that they are associated with and you could go and say okay link a cloud function and",
    "start": "2222960",
    "end": "2230320"
  },
  {
    "text": "you'll you'll be represented with a dialog which says lists all the functions that you have created and then you can select a function and",
    "start": "2230320",
    "end": "2236800"
  },
  {
    "text": "say like register this function and that will get you started essentially",
    "start": "2236800",
    "end": "2242960"
  },
  {
    "text": "so so i had one more demo i'll try to bring it up",
    "start": "2242960",
    "end": "2248960"
  },
  {
    "text": "that way",
    "start": "2253359",
    "end": "2257838"
  },
  {
    "text": "so this is showing the power of lambda with with streams kajal",
    "start": "2262560",
    "end": "2270000"
  },
  {
    "text": "so kaija has developed this demo sorry about some friends to watch the",
    "start": "2270000",
    "end": "2275760"
  },
  {
    "text": "demo all right did this naturally just happen",
    "start": "2275760",
    "end": "2281760"
  },
  {
    "text": "exactly yeah",
    "start": "2281760",
    "end": "2285839"
  },
  {
    "text": "all right so",
    "start": "2295920",
    "end": "2299838"
  },
  {
    "text": "all right so picture yourself in the eyes of a developer who wants to start a startup and she comes in and she starts to",
    "start": "2306079",
    "end": "2312880"
  },
  {
    "text": "upload photos directly onto s3 because she wants to build a photo sharing application and now",
    "start": "2312880",
    "end": "2318079"
  },
  {
    "text": "these events have been coming into s3 the bucket uh is receiving the um the files that are being uploaded",
    "start": "2318079",
    "end": "2324400"
  },
  {
    "text": "by a mobile phone for instance and she wants to basically as a next step wants to index these images",
    "start": "2324400",
    "end": "2329920"
  },
  {
    "text": "directly into dynamodb because dynodb is a great place to store and index your data so you can",
    "start": "2329920",
    "end": "2335119"
  },
  {
    "text": "search for it afterwards so all she has to do is she creates a table in dynamodb and that's a super",
    "start": "2335119",
    "end": "2340640"
  },
  {
    "text": "simple experience there's no provisioning of boxes or there's no uh",
    "start": "2340640",
    "end": "2345920"
  },
  {
    "text": "thinking about capacity planning or benchmarking you literally go to the dynamo console and say i want five iops five reads per second",
    "start": "2345920",
    "end": "2352400"
  },
  {
    "text": "five right per second or five million rights per second and five million reads per second and behind the scenes dynamodb just",
    "start": "2352400",
    "end": "2358320"
  },
  {
    "text": "automatically provisions these things for you but the problem is that our application is just sending the data directly to s3",
    "start": "2358320",
    "end": "2365040"
  },
  {
    "text": "it's not necessarily going directly to dynamodb so all she has to do is attach a lambda",
    "start": "2365040",
    "end": "2370880"
  },
  {
    "text": "function that subscribes to the dynamo to the s3 event notification system that we launched today",
    "start": "2370880",
    "end": "2377040"
  },
  {
    "text": "and automatically with 20 lines of code persist that data directly into the images table and i'll",
    "start": "2377040",
    "end": "2383599"
  },
  {
    "text": "show you the code for this at the end but it's literally 20 lines of code that you attach to this lambda function so",
    "start": "2383599",
    "end": "2389040"
  },
  {
    "text": "if you've got an s3 bucket with billions of objects many customers do and you want to basically be able to",
    "start": "2389040",
    "end": "2394640"
  },
  {
    "text": "create a richer index of that data let's say you want to index the metadata let's say you want to index by types of files",
    "start": "2394640",
    "end": "2400640"
  },
  {
    "text": "that's by size of file so you can identify the latest or the largest files in your in your sd bucket you can do that using",
    "start": "2400640",
    "end": "2407040"
  },
  {
    "text": "this event notification system that s3 has built and again it's a very small piece of code that takes to do it",
    "start": "2407040",
    "end": "2413040"
  },
  {
    "text": "now in the case of this developer she decides to start also tracking which user likes which image so she goes",
    "start": "2413040",
    "end": "2419599"
  },
  {
    "text": "and easily just creates another likes table and all of a sudden you're tracking this",
    "start": "2419599",
    "end": "2424800"
  },
  {
    "text": "particular user so paris likes this photo of aksha and that's gets stored in dynamodb",
    "start": "2424800",
    "end": "2430720"
  },
  {
    "text": "using the mobile app as well because our mobile sdk can communicate directly with dynamodb but what happens is after she",
    "start": "2430720",
    "end": "2438880"
  },
  {
    "text": "has deployed this she realizes that she also wants to be able to aggregate the number of likes each image",
    "start": "2438880",
    "end": "2444560"
  },
  {
    "text": "has gotten this is where dynamodb streams come into play not only can you subscribe to the dyno db streams via ec2 using the kcl",
    "start": "2444560",
    "end": "2452240"
  },
  {
    "text": "libraries you can also attach a lambda function directly to dynamodb as well so as soon as she attaches the",
    "start": "2452240",
    "end": "2460079"
  },
  {
    "text": "dynamodb lambda function to the dynamodb likes table when she hears that parikh has",
    "start": "2460079",
    "end": "2465920"
  },
  {
    "text": "liked this photo from akshat she basically goes to the likes to the images table and increments the vote",
    "start": "2465920",
    "end": "2471839"
  },
  {
    "text": "counter for this particular image now this also helps us de-duplicate",
    "start": "2471839",
    "end": "2477200"
  },
  {
    "text": "because when she gets a notification she gets to see what the old item looked like and what the new item looks like",
    "start": "2477200",
    "end": "2482560"
  },
  {
    "text": "so she knows that if parikh is trying to artificially increment the number of votes that a",
    "start": "2482560",
    "end": "2487760"
  },
  {
    "text": "particular image that akshat has had she can de-duplicate and not increment it on the other side",
    "start": "2487760",
    "end": "2494880"
  },
  {
    "text": "as a next step she also wants to know who the most influential users are in her application she wants to not",
    "start": "2494880",
    "end": "2501680"
  },
  {
    "text": "let us know who the most popular images are what the possible popular images are she wants to know who are the people",
    "start": "2501680",
    "end": "2507200"
  },
  {
    "text": "in her atmosphere in their ecosystem who are generating the most number of total likes in the system",
    "start": "2507200",
    "end": "2513359"
  },
  {
    "text": "this part is also very simple you go to the lambda console and you simply modify this lambda",
    "start": "2513359",
    "end": "2519280"
  },
  {
    "text": "function with five more lines of code and what it does is every time a",
    "start": "2519280",
    "end": "2524319"
  },
  {
    "text": "particular image gets a like you find out who the user is that uploaded the image and you go",
    "start": "2524319",
    "end": "2529520"
  },
  {
    "text": "increment the total vote count for that particular user now you could have modified this function or you can subscribe to the",
    "start": "2529520",
    "end": "2536240"
  },
  {
    "text": "images table you can do it either which way but at this point you're basically creating and maintaining aggregate indexes on top",
    "start": "2536240",
    "end": "2543440"
  },
  {
    "text": "of your dynamodb table by a simple function that you've written in probably 20 minutes or so now similarly",
    "start": "2543440",
    "end": "2552319"
  },
  {
    "text": "if she finds out that she wants to engage with the most popular users in her ecosystem she has this user's table so she can do",
    "start": "2552319",
    "end": "2558640"
  },
  {
    "text": "trending she can start identifying trending users every time a particular user gets a new vote she can attach a lambda function to",
    "start": "2558640",
    "end": "2565839"
  },
  {
    "text": "the images table and recognize if this user is actually quite popular this user is trending and",
    "start": "2565839",
    "end": "2571520"
  },
  {
    "text": "anytime the user starts to trending she's maintaining a trending function all she has to do is start sending a",
    "start": "2571520",
    "end": "2576960"
  },
  {
    "text": "notification to them via sns mobile push again all of this",
    "start": "2576960",
    "end": "2583839"
  },
  {
    "text": "composability is made available to you through events in s3 and dynamodb streams the dyno db",
    "start": "2583839",
    "end": "2590240"
  },
  {
    "text": "streams not only allow you to populate cross region replication materialize view but they also allow you to aggregate",
    "start": "2590240",
    "end": "2596400"
  },
  {
    "text": "capabilities across other dynamodb tables so i promised you that i'll show you the",
    "start": "2596400",
    "end": "2602720"
  },
  {
    "text": "code you can see it here",
    "start": "2604839",
    "end": "2609119"
  },
  {
    "text": "i don't have my slide with me so let me just show you the code",
    "start": "2610000",
    "end": "2620720"
  },
  {
    "text": "all right so this is all the code that it takes uh to build this entire application if you know if you step back",
    "start": "2620720",
    "end": "2626560"
  },
  {
    "text": "it's actually a fairly complex application but you're able to decompose that into three small functions so the first",
    "start": "2626560",
    "end": "2632240"
  },
  {
    "text": "function a on that side if you can read it is essentially when the request comes in when an",
    "start": "2632240",
    "end": "2637440"
  },
  {
    "text": "object has been modified in s3 it goes to s3 does a head request grabs all the metadata that you have",
    "start": "2637440",
    "end": "2642560"
  },
  {
    "text": "allocated to associated with that object and then indexes it into dynamodb the second function is",
    "start": "2642560",
    "end": "2648400"
  },
  {
    "text": "subscribing to the like table as soon as data comes into the likes table it basically goes in",
    "start": "2648400",
    "end": "2653920"
  },
  {
    "text": "identifies the url goes to the images table and increments the counter and the third function similarly is",
    "start": "2653920",
    "end": "2660000"
  },
  {
    "text": "getting invoked every single time a particular user gets a new vote and",
    "start": "2660000",
    "end": "2665119"
  },
  {
    "text": "all it does is looks up the user's information inside of dynamodb goes back through sns",
    "start": "2665119",
    "end": "2670720"
  },
  {
    "text": "and pushes the notification out one of the cool things about lambda is that it's completely stateless so you don't have to worry about the",
    "start": "2670720",
    "end": "2676480"
  },
  {
    "text": "capacity the operational experience or the management overhead of running an entire stack you can just add",
    "start": "2676480",
    "end": "2682240"
  },
  {
    "text": "a simple function as needed but more importantly because it is highly available because",
    "start": "2682240",
    "end": "2688240"
  },
  {
    "text": "it's completely stateless you need a place to you need a low latency data store where you can keep",
    "start": "2688240",
    "end": "2693440"
  },
  {
    "text": "your state and dynamodb is a perfect addition to that because you can quickly",
    "start": "2693440",
    "end": "2698560"
  },
  {
    "text": "within a few milliseconds look up information from dynamodb or persist information in dynamodb",
    "start": "2698560",
    "end": "2704079"
  },
  {
    "text": "and continue onwards with your execution thanks raja so",
    "start": "2704079",
    "end": "2711200"
  },
  {
    "text": "so let's get back to the presentation",
    "start": "2711359",
    "end": "2719838"
  },
  {
    "start": "2726000",
    "end": "2726000"
  },
  {
    "text": "so essentially like to recap dynamodb streams provides you the stream of scalable stream of updates",
    "start": "2727359",
    "end": "2734640"
  },
  {
    "text": "done to your table and it's a very powerful building block on which you can develop all this variety of solutions and we are",
    "start": "2734640",
    "end": "2742240"
  },
  {
    "text": "really looking forward to you guys to start innovating on top of it at the same time",
    "start": "2742240",
    "end": "2747760"
  },
  {
    "text": "we are also providing these cool solutions on top of it which will simplify building your scalable applications on top of dynamodb",
    "start": "2747760",
    "end": "2755200"
  },
  {
    "text": "the one application that we are the solution that we're providing is cross-section robbery and and the other one is kinesis adapter",
    "start": "2755200",
    "end": "2761839"
  },
  {
    "text": "which lets you use skinny's client library on top of dynamodb streams and these are all",
    "start": "2761839",
    "end": "2767200"
  },
  {
    "text": "going to be open source solutions we like to get started you can start",
    "start": "2767200",
    "end": "2773040"
  },
  {
    "text": "doing this like you can download dynamodb local that i pointed to earlier we also have a",
    "start": "2773040",
    "end": "2779040"
  },
  {
    "text": "preview sdk which supports that like dynamodb streams and we also have preview endpoints for",
    "start": "2779040",
    "end": "2786160"
  },
  {
    "text": "you to start using it in north virginia and in ireland and you need to go register to start",
    "start": "2786160",
    "end": "2792319"
  },
  {
    "text": "using this preview endpoints some of the resources here are mentioned over here",
    "start": "2792319",
    "end": "2797839"
  },
  {
    "text": "and that's the landing page where you will find all the information related to dynamodb streams and will",
    "start": "2797839",
    "end": "2803760"
  },
  {
    "text": "also point you to like where you can get signed up for a preview on where you can download dynamic db",
    "start": "2803760",
    "end": "2810400"
  },
  {
    "text": "local and all that stuff so",
    "start": "2810400",
    "end": "2817359"
  },
  {
    "text": "okay so we are pretty excited to give you uh dynamodb streams and we hope that you",
    "start": "2817359",
    "end": "2823920"
  },
  {
    "text": "take that excitement and start building solutions on top of it thank you",
    "start": "2823920",
    "end": "2831200"
  },
  {
    "text": "you",
    "start": "2831200",
    "end": "2833280"
  }
]