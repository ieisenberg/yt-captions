[
  {
    "start": "0",
    "end": "42000"
  },
  {
    "text": "- Welcome to \"Back to Basics\".",
    "start": "6180",
    "end": "7830"
  },
  {
    "text": "In this episode, we will discuss exposing",
    "start": "7830",
    "end": "9960"
  },
  {
    "text": "your existing data lake solution",
    "start": "9960",
    "end": "11850"
  },
  {
    "text": "as a self-documented GraphQL API.",
    "start": "11850",
    "end": "15060"
  },
  {
    "text": "When I was working",
    "start": "15060",
    "end": "15893"
  },
  {
    "text": "with a customer on an\nAWS data lake solution,",
    "start": "15893",
    "end": "18330"
  },
  {
    "text": "the customer had a requirement",
    "start": "18330",
    "end": "19770"
  },
  {
    "text": "to expose the data in the data lake",
    "start": "19770",
    "end": "21900"
  },
  {
    "text": "to their consumers in a way\nthat they're very familiar with,",
    "start": "21900",
    "end": "24960"
  },
  {
    "text": "like a GraphQL interface\nin a highly scalable",
    "start": "24960",
    "end": "27990"
  },
  {
    "text": "and secure manner.",
    "start": "27990",
    "end": "29133"
  },
  {
    "text": "Let me show you how I\nleveraged AWS Lake Formation",
    "start": "30330",
    "end": "33870"
  },
  {
    "text": "and AWS AppSync in a scalable architecture",
    "start": "33870",
    "end": "36780"
  },
  {
    "text": "to expose the data lake to their consumers",
    "start": "36780",
    "end": "39270"
  },
  {
    "text": "as a GraphQL interface.",
    "start": "39270",
    "end": "41640"
  },
  {
    "text": "First, let me explain what a data lake is.",
    "start": "41640",
    "end": "45210"
  },
  {
    "start": "42000",
    "end": "75000"
  },
  {
    "text": "A data lake is a centralized\nrepository that allows you",
    "start": "45210",
    "end": "48390"
  },
  {
    "text": "to store all your structured",
    "start": "48390",
    "end": "50250"
  },
  {
    "text": "and unstructured data at any scale.",
    "start": "50250",
    "end": "53010"
  },
  {
    "text": "You can store your data as is",
    "start": "53010",
    "end": "55140"
  },
  {
    "text": "without having to first structure the data",
    "start": "55140",
    "end": "57450"
  },
  {
    "text": "and run different types of\nanalytics from dashboards",
    "start": "57450",
    "end": "60240"
  },
  {
    "text": "and visualization to big data processing,",
    "start": "60240",
    "end": "62880"
  },
  {
    "text": "real-time analytics,",
    "start": "62880",
    "end": "63840"
  },
  {
    "text": "and also apply machine learning algorithms",
    "start": "63840",
    "end": "66330"
  },
  {
    "text": "to guide better business decisions.",
    "start": "66330",
    "end": "68193"
  },
  {
    "text": "Organizations that successfully\ngenerate business value",
    "start": "69360",
    "end": "72270"
  },
  {
    "text": "from their data will\noutperform their peers.",
    "start": "72270",
    "end": "74942"
  },
  {
    "start": "75000",
    "end": "127000"
  },
  {
    "text": "Customers have been able to\ndo new types of analytics,",
    "start": "76680",
    "end": "79830"
  },
  {
    "text": "like machine learning over\nsources like log files,",
    "start": "79830",
    "end": "82890"
  },
  {
    "text": "data from click streams, social media,",
    "start": "82890",
    "end": "85560"
  },
  {
    "text": "and internet-connected\ndevices stored in a data lake.",
    "start": "85560",
    "end": "88683"
  },
  {
    "text": "This helps to identify",
    "start": "89790",
    "end": "91230"
  },
  {
    "text": "and act upon opportunities\nfor business growth faster",
    "start": "91230",
    "end": "94770"
  },
  {
    "text": "by attracting and retaining customers,",
    "start": "94770",
    "end": "97020"
  },
  {
    "text": "boosting productivity,\nproactively maintaining devices,",
    "start": "97020",
    "end": "100229"
  },
  {
    "text": "and making informed decisions.",
    "start": "100230",
    "end": "102420"
  },
  {
    "text": "Once the data lake is built,\nyou need to allow movement",
    "start": "102420",
    "end": "105630"
  },
  {
    "text": "of data between your data lakes",
    "start": "105630",
    "end": "107399"
  },
  {
    "text": "and your purpose-built\ndatabases and analytic services",
    "start": "107400",
    "end": "110850"
  },
  {
    "text": "so that your consumers can\naccess the data in a secure way.",
    "start": "110850",
    "end": "114452"
  },
  {
    "text": "There are multiple ways to\nexpose your data in the data lake",
    "start": "115440",
    "end": "118410"
  },
  {
    "text": "to downstream systems.",
    "start": "118410",
    "end": "120450"
  },
  {
    "text": "Let's explore a reference\narchitecture to do this",
    "start": "120450",
    "end": "123270"
  },
  {
    "text": "through a GraphQL interface\nto your end consumers.",
    "start": "123270",
    "end": "126600"
  },
  {
    "start": "127000",
    "end": "292000"
  },
  {
    "text": "Here is an architecture",
    "start": "127793",
    "end": "129240"
  },
  {
    "text": "of how I expose the data lake solution",
    "start": "129240",
    "end": "132240"
  },
  {
    "text": "using a self-documented\nGraphQL API in AWS AppSync.",
    "start": "132240",
    "end": "136830"
  },
  {
    "text": "This solution consists of three\nparts, a data lake, an API",
    "start": "136830",
    "end": "140570"
  },
  {
    "text": "and a CI/CD pipeline.",
    "start": "140570",
    "end": "142800"
  },
  {
    "text": "First, you need to set\nup a data lake in AWS",
    "start": "142800",
    "end": "145920"
  },
  {
    "text": "using AWS Lake Formation and Amazon S3.",
    "start": "145920",
    "end": "149433"
  },
  {
    "text": "Second, you crawl the data in\nthe S3 buckets with AWS Glue",
    "start": "150390",
    "end": "154440"
  },
  {
    "text": "and build a data catalog.",
    "start": "154440",
    "end": "156183"
  },
  {
    "text": "Third, monitor any data changes\nin the AWS Glue Data Catalog",
    "start": "157410",
    "end": "161550"
  },
  {
    "text": "with Amazon CloudWatch",
    "start": "161550",
    "end": "163020"
  },
  {
    "text": "and trigger an AWS Lambda\nfunction on every catalog change",
    "start": "163020",
    "end": "166800"
  },
  {
    "text": "to update the schema of the GraphQL API.",
    "start": "166800",
    "end": "169443"
  },
  {
    "text": "Four, in the Lambda function,",
    "start": "170400",
    "end": "171870"
  },
  {
    "text": "you query the latest data catalog",
    "start": "171870",
    "end": "174060"
  },
  {
    "text": "and security settings, automatically\ngenerate source code to build",
    "start": "174060",
    "end": "177840"
  },
  {
    "text": "and deploy a new version\nof GraphQL APIs, schema",
    "start": "177840",
    "end": "180569"
  },
  {
    "text": "and resolvers, and commit\nthe code to AWS CodeCommit.",
    "start": "180570",
    "end": "184053"
  },
  {
    "text": "Then you set up AWS CodeCommit",
    "start": "185040",
    "end": "187170"
  },
  {
    "text": "to automatically initiate\na new CI/CD pipeline",
    "start": "187170",
    "end": "190349"
  },
  {
    "text": "on AWS CodePipeline\nafter every code commit.",
    "start": "190350",
    "end": "193353"
  },
  {
    "text": "Next, use the CodePipeline\nto build a new version",
    "start": "194520",
    "end": "197550"
  },
  {
    "text": "of the API with AWS CodeBuild",
    "start": "197550",
    "end": "200070"
  },
  {
    "text": "using the newly generated source code",
    "start": "200070",
    "end": "202200"
  },
  {
    "text": "and leverage AWS CodeDeploy",
    "start": "202200",
    "end": "204360"
  },
  {
    "text": "to deploy both the new\nAWS AppSync GraphQL API",
    "start": "204360",
    "end": "207780"
  },
  {
    "text": "and the new Lambda query resolvers.",
    "start": "207780",
    "end": "210093"
  },
  {
    "text": "With regards to the APIs,\nallow your GraphQL clients",
    "start": "211830",
    "end": "214890"
  },
  {
    "text": "to securely invoke the external API",
    "start": "214890",
    "end": "217740"
  },
  {
    "text": "over HTTPS with your chosen\nauthentication mechanism.",
    "start": "217740",
    "end": "221673"
  },
  {
    "text": "Activate AppSync server-side caching",
    "start": "223020",
    "end": "225120"
  },
  {
    "text": "for better performance on\nfrequently used requests.",
    "start": "225120",
    "end": "228002"
  },
  {
    "text": "When your client requests data,",
    "start": "230040",
    "end": "231840"
  },
  {
    "text": "you can use AppSync Lambda query resolvers",
    "start": "231840",
    "end": "234620"
  },
  {
    "text": "to translate the GraphQL query\ninto a SQL query supported",
    "start": "234620",
    "end": "238739"
  },
  {
    "text": "by Amazon Athena.",
    "start": "238740",
    "end": "240033"
  },
  {
    "text": "Then you run Athena job synchronously",
    "start": "241800",
    "end": "244170"
  },
  {
    "text": "with the Athena-Express Library,\nappropriately timing out",
    "start": "244170",
    "end": "247500"
  },
  {
    "text": "and limiting the result set.",
    "start": "247500",
    "end": "248900"
  },
  {
    "text": "In this way, you can use the AWS AppSync",
    "start": "250320",
    "end": "252540"
  },
  {
    "text": "as a self-documented GraphQL interface",
    "start": "252540",
    "end": "254939"
  },
  {
    "text": "to access your data lake\nto get the data needed",
    "start": "254940",
    "end": "257459"
  },
  {
    "text": "for your GraphQL clients.",
    "start": "257460",
    "end": "259233"
  },
  {
    "text": "In this episode, we\ndiscussed an architecture",
    "start": "260520",
    "end": "262770"
  },
  {
    "text": "that allows you to expose your\ndata lake as a GraphQL API",
    "start": "262770",
    "end": "266400"
  },
  {
    "text": "to your clients in a\nscalable and secure manner.",
    "start": "266400",
    "end": "268983"
  },
  {
    "text": "GraphQL APIs built with AWS AppSync",
    "start": "270234",
    "end": "272695"
  },
  {
    "text": "to give the clients the ability\nto query multiple databases,",
    "start": "272695",
    "end": "275951"
  },
  {
    "text": "microservices, and APIs from\na single GraphQL endpoint.",
    "start": "275951",
    "end": "279573"
  },
  {
    "text": "Check out the links\nbelow for more details.",
    "start": "281010",
    "end": "283203"
  },
  {
    "text": "Thank you for watching \"Back to\nBasics\" and see you next time.",
    "start": "284100",
    "end": "289100"
  }
]