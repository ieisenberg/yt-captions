[
  {
    "start": "0",
    "end": "191000"
  },
  {
    "text": "it is good um so before we get started I",
    "start": "2389",
    "end": "7799"
  },
  {
    "text": "want to advise you I'm gonna do questions and answers probably up front",
    "start": "7799",
    "end": "13349"
  },
  {
    "text": "here at the end I won't do them interactively with the mics I'll have a ton of content and I'm really worried",
    "start": "13349",
    "end": "20640"
  },
  {
    "text": "about finishing on time and I don't want to keep anybody here late I do finish early that's great we'll we'll have a",
    "start": "20640",
    "end": "26970"
  },
  {
    "text": "chat up here but I'd like for you to hold your questions if you wouldn't mind because I do have a just a literally a",
    "start": "26970",
    "end": "33180"
  },
  {
    "text": "ton of content to go through so I'll tell you a little bit about myself before I get started I'm in technology",
    "start": "33180",
    "end": "41430"
  },
  {
    "text": "terms what's known as ancient I've been in technology more than 25 years I",
    "start": "41430",
    "end": "46760"
  },
  {
    "text": "released my I meant developer I released my first code into the public domain in",
    "start": "46760",
    "end": "52260"
  },
  {
    "text": "1989 posted it on a bulletin board system thought I was all cool it was a",
    "start": "52260",
    "end": "57809"
  },
  {
    "text": "little game called minor VGA and in this game you would get a shovel and a pick",
    "start": "57809",
    "end": "63180"
  },
  {
    "text": "and you would go down underground and dig at the dirt and find gold and silver and bring it back up to the top and I",
    "start": "63180",
    "end": "69840"
  },
  {
    "text": "abandoned that project and put it in the public domain and about 15 years later a company called Mojang made minecraft and",
    "start": "69840",
    "end": "76530"
  },
  {
    "text": "sold it to Microsoft for two billion dollars and then my minecraft obviously you take a shovel and a pick and you go",
    "start": "76530",
    "end": "82560"
  },
  {
    "text": "underground and you dig at the dirt and you find gold and silver so have you ever like given up on a project too soon",
    "start": "82560",
    "end": "89070"
  },
  {
    "text": "and lost two billion dollars yeah I have so I can tell you it's not much fun",
    "start": "89070",
    "end": "97729"
  },
  {
    "text": "funny thing about releasing software into the public domain though you get emails on it 30 years later people want",
    "start": "97729",
    "end": "105240"
  },
  {
    "text": "to port it to the PlayStation they want to port it to DES they want to run it on a browser in html5 I don't know what can",
    "start": "105240",
    "end": "112259"
  },
  {
    "text": "you do so I have the privilege of being in professional services at AWS for the",
    "start": "112259",
    "end": "119100"
  },
  {
    "text": "last two and a half years and I live in San Francisco which means all of my",
    "start": "119100",
    "end": "124649"
  },
  {
    "text": "customers are big tech companies in the Bay Area and I go into the the companies",
    "start": "124649",
    "end": "129750"
  },
  {
    "text": "and I would be willing to bet that every in this room within the last 24 hours",
    "start": "129750",
    "end": "134840"
  },
  {
    "text": "has used technology products from one of my customers in fact it's almost guaranteed unless you're living under a",
    "start": "134840",
    "end": "142040"
  },
  {
    "text": "stone and have no technology then why are you here you're using my customers technology and when I go in with these",
    "start": "142040",
    "end": "149060"
  },
  {
    "text": "customers in a professional services role I'm working directly with their engineers and their architects and so I",
    "start": "149060",
    "end": "156110"
  },
  {
    "text": "have a kind of a unique perspective in some of the the boundary-pushing that they're doing in terms of server lists",
    "start": "156110",
    "end": "161360"
  },
  {
    "text": "and in particular ways to optimize server lists at scale because you know",
    "start": "161360",
    "end": "168320"
  },
  {
    "text": "these are not small customers we're talking billions of transactions billions of invocations you know a month",
    "start": "168320",
    "end": "175130"
  },
  {
    "text": "and it's it's no small feat to make this stuff work make it work reliably in",
    "start": "175130",
    "end": "181880"
  },
  {
    "text": "those type of environments at scale and they you know I've learned a ton from my customers hopefully I'll be able to",
    "start": "181880",
    "end": "188270"
  },
  {
    "text": "share some of that with you here today okay so why are we here I guess probably",
    "start": "188270",
    "end": "195380"
  },
  {
    "start": "191000",
    "end": "345000"
  },
  {
    "text": "you all know about this thing called serverless and you all may have heard of lambda lambda is if you looked at the",
    "start": "195380",
    "end": "202730"
  },
  {
    "text": "tweets this morning like the number one mentioned AWS service in all the",
    "start": "202730",
    "end": "209060"
  },
  {
    "text": "reinvent tweets despite all the machine learning we've been talking about lambda is at least five times ahead of every",
    "start": "209060",
    "end": "215840"
  },
  {
    "text": "other service mentioned on Twitter it's amazing in terms of executions you know",
    "start": "215840",
    "end": "222440"
  },
  {
    "text": "we're up in the trillions of invocations a month and growing like at a ridiculous",
    "start": "222440",
    "end": "229010"
  },
  {
    "text": "pace how many of you currently where are we on our lamb lamb to journey how many",
    "start": "229010",
    "end": "234350"
  },
  {
    "text": "of you run lambda today okay I'm not surprised so if I ask that question a",
    "start": "234350",
    "end": "240050"
  },
  {
    "text": "year ago it would have been three-quarters of the room if I asked that two years ago would have been half the room I've asked it a year before",
    "start": "240050",
    "end": "245420"
  },
  {
    "text": "that it would have been a few speckled people right anyone who says they have five ten years of experience with this",
    "start": "245420",
    "end": "252230"
  },
  {
    "text": "technologies line because it hasn't been around that long so if I can learn it and master it in a few short years so",
    "start": "252230",
    "end": "259160"
  },
  {
    "text": "can you so can you people and frankly it doesn't really matter",
    "start": "259160",
    "end": "264340"
  },
  {
    "text": "because all gonna change within a few years anyway that's the nature of cloud that's the nature of technology so",
    "start": "264340",
    "end": "272440"
  },
  {
    "text": "today's focus is going to be on the compute side of lambda I will talk about",
    "start": "272440",
    "end": "277720"
  },
  {
    "text": "some of the other server lists services like SNS SQS set functions api gateway",
    "start": "277720",
    "end": "285100"
  },
  {
    "text": "but i'm gonna focus on optimizing lambda and lambda is essentially a compute",
    "start": "285100",
    "end": "290890"
  },
  {
    "text": "platform for most of the serverless that we do by the way raise your hand if",
    "start": "290890",
    "end": "297670"
  },
  {
    "text": "you're running if you deploy your lambdas using a production style code",
    "start": "297670",
    "end": "303040"
  },
  {
    "text": "pipeline like Jenkins or serverless comm okay and raise it again if you have",
    "start": "303040",
    "end": "309430"
  },
  {
    "text": "automated testing of your lambda when you deploy it using those automated pipelines yeah so a lot fewer right so",
    "start": "309430",
    "end": "316810"
  },
  {
    "text": "the funny thing about lambda a server list in general we tend to think of it",
    "start": "316810",
    "end": "322510"
  },
  {
    "text": "as a shortcut I don't have to do all the things I used to do I can just put stuff into production that's great except that",
    "start": "322510",
    "end": "328810"
  },
  {
    "text": "whether it's server lists or not it's still software engineering so I'll come back to that later",
    "start": "328810",
    "end": "334200"
  },
  {
    "text": "but we tend to take shortcuts with server lists and we tend not to think about scale and it could really bite us",
    "start": "334200",
    "end": "343470"
  },
  {
    "start": "345000",
    "end": "403000"
  },
  {
    "text": "okay so you're probably all familiar with this model a lambda function has an event source there's something like",
    "start": "345030",
    "end": "351870"
  },
  {
    "text": "30-plus sources in AWS now so the obvious ones like s3 Kinesis but there's",
    "start": "351870",
    "end": "358900"
  },
  {
    "text": "some less obvious ones too you can kick off a lambda from A to B us connect by making a phone call",
    "start": "358900",
    "end": "364140"
  },
  {
    "text": "you can kick off a lambda from an IOT device a dash button every Alexa call that every time we talk to Alexa that's",
    "start": "364140",
    "end": "370690"
  },
  {
    "text": "a lambda function that's running you probably already knew that it's got five",
    "start": "370690",
    "end": "376330"
  },
  {
    "text": "runtimes right now and more coming and it's tightly integrated with all of our",
    "start": "376330",
    "end": "381790"
  },
  {
    "text": "services and most lambdas also call third-party services whether they're on the Internet",
    "start": "381790",
    "end": "387279"
  },
  {
    "text": "some application you're running in your V pcs or in your data centers even and",
    "start": "387279",
    "end": "394559"
  },
  {
    "text": "so there's this ecosystem of an event hits the hits of lambda and lambda talks to these other services this should be",
    "start": "394559",
    "end": "401859"
  },
  {
    "text": "review I would think so the anatomy of a lambda function there's four layers basically and I'll start the bottom the",
    "start": "401859",
    "end": "409959"
  },
  {
    "start": "403000",
    "end": "523000"
  },
  {
    "text": "compute substrate the compute substrate is ours we own that that's the hardware that lambda runs on we manage it you",
    "start": "409959",
    "end": "417519"
  },
  {
    "text": "don't even know anything about it haven't even heard the announcement about firecracker yeah pretty exciting most of you will",
    "start": "417519",
    "end": "425019"
  },
  {
    "text": "never even look at firecracker the reason is because it's just one of the tools we used to manage our substrate",
    "start": "425019",
    "end": "431439"
  },
  {
    "text": "and you there's no reason for you to touch it you wouldn't actually be able",
    "start": "431439",
    "end": "436539"
  },
  {
    "text": "to optimize your environment by going into firecracker anyway but I think it",
    "start": "436539",
    "end": "441549"
  },
  {
    "text": "does show a commitment to the open-source community and the goal of putting it in open source is that more",
    "start": "441549",
    "end": "447639"
  },
  {
    "text": "people will be able to contribute to it and find any security holes in it and help us improve it and essentially make",
    "start": "447639",
    "end": "455349"
  },
  {
    "text": "us more transparent so you'll know what's going on under the hood this the",
    "start": "455349",
    "end": "460659"
  },
  {
    "text": "next layer is the execution environment you do have some control here the execution environment is how the lambda",
    "start": "460659",
    "end": "467649"
  },
  {
    "text": "got invoked it is whether the lambda has an en I in your V PC it is the",
    "start": "467649",
    "end": "472839"
  },
  {
    "text": "environment variables that you've set it's all the node packages that you've put on to the onto the container then",
    "start": "472839",
    "end": "481209"
  },
  {
    "text": "there's a language runtime you can't really optimize that so think about like a JVM you can't optimize the JVM right",
    "start": "481209",
    "end": "488139"
  },
  {
    "text": "it's the Java machine within other languages like Python it's the binary go",
    "start": "488139",
    "end": "495819"
  },
  {
    "text": "it's the binary and of course at the very top of that stack is your function and you can optimize your function so",
    "start": "495819",
    "end": "503079"
  },
  {
    "text": "I'll talk about really these two areas where you can optimize your lambda functions and it's not really into it's",
    "start": "503079",
    "end": "510699"
  },
  {
    "text": "kind of intuitive that you can optimize your function it's not intuitive to everyone that you can optimize your",
    "start": "510699",
    "end": "516250"
  },
  {
    "text": "execution environment so hopefully I'll show you some ways to do that so let's start with a function",
    "start": "516250",
    "end": "523320"
  },
  {
    "start": "523000",
    "end": "672000"
  },
  {
    "text": "so every every lambda has three three major components there's an event that",
    "start": "523320",
    "end": "529510"
  },
  {
    "text": "gets passed to it there's a handler that handles that event the handler has your logic in it and there's also this",
    "start": "529510",
    "end": "536320"
  },
  {
    "text": "context object the context object is passed to the lambda to tell it where it's running what it's timeout is how",
    "start": "536320",
    "end": "542950"
  },
  {
    "text": "much memory it's gonna get most of the time your business logic won't care",
    "start": "542950",
    "end": "547990"
  },
  {
    "text": "about the context object very rare that you'll need to even interact with a context object most of your interaction",
    "start": "547990",
    "end": "553960"
  },
  {
    "text": "would be with the actual event that you got past but you can look in the context",
    "start": "553960",
    "end": "559060"
  },
  {
    "text": "object to find out for example where your logs are gonna go what the destination for your logs are what your",
    "start": "559060",
    "end": "564339"
  },
  {
    "text": "timeout is if you need to make a decision about whether to put something into a queue or process it right now you",
    "start": "564339",
    "end": "570970"
  },
  {
    "text": "may care about what your timeout is and that may be variable depending on if you're in production or test for example",
    "start": "570970",
    "end": "578880"
  },
  {
    "text": "so at the simplest event let's say tell",
    "start": "578880",
    "end": "584710"
  },
  {
    "text": "me what the time is right now you have an event source like an API call and you",
    "start": "584710",
    "end": "589839"
  },
  {
    "text": "have a lambda function and that's the extent of your universe right and so",
    "start": "589839",
    "end": "595150"
  },
  {
    "text": "what that looks like this is a very simple function I think it's looks like",
    "start": "595150",
    "end": "601510"
  },
  {
    "text": "Python hard to tell sometimes and in case you've got some basically case",
    "start": "601510",
    "end": "609070"
  },
  {
    "text": "structure at the top right so based on some parameter you know some element of",
    "start": "609070",
    "end": "615970"
  },
  {
    "text": "the JSON event I'm saying either go to function a or function B and then the",
    "start": "615970",
    "end": "621520"
  },
  {
    "text": "actual the actual business application logic is contained in the in function a or function B a very simple pattern but",
    "start": "621520",
    "end": "630459"
  },
  {
    "text": "that's pretty rare that you actually have a that simple of a lambda function a more common scenario more common",
    "start": "630459",
    "end": "637990"
  },
  {
    "text": "scenario is an event hits a lambda and the lambda interacts with a bunch of services in databases right it can",
    "start": "637990",
    "end": "645730"
  },
  {
    "text": "interact with queues it can interact with dynamo can interact with RDS",
    "start": "645730",
    "end": "652730"
  },
  {
    "text": "and this is an example of that so we'll decompose this sort of one step at a time but just if you glance through it",
    "start": "652730",
    "end": "660949"
  },
  {
    "text": "it's got some initialization at the at the top it's got a handler with some some basic logic and then it's got a",
    "start": "660949",
    "end": "666800"
  },
  {
    "text": "series of functions some of them tied to logic some of them tied to the initialization so we'll start with this",
    "start": "666800",
    "end": "673850"
  },
  {
    "start": "672000",
    "end": "748000"
  },
  {
    "text": "first initialization bit what's the initialization doing it's",
    "start": "673850",
    "end": "678949"
  },
  {
    "text": "loading your libraries it's getting a secret from somewhere probably a",
    "start": "678949",
    "end": "684620"
  },
  {
    "text": "database connection string and it's actually making a database connection now it's meaningful that that is placed",
    "start": "684620",
    "end": "691250"
  },
  {
    "text": "where it is if you put that inside the handler that means it's going to execute",
    "start": "691250",
    "end": "696920"
  },
  {
    "text": "every single time the lambda runs by",
    "start": "696920",
    "end": "702230"
  },
  {
    "text": "putting it where it is it means it's going to execute only when the container is initialized so it will be persistent",
    "start": "702230",
    "end": "709760"
  },
  {
    "text": "across multiple invocations of the handler so the first time you run this it runs it from top to bottom within the",
    "start": "709760",
    "end": "717170"
  },
  {
    "text": "same container the second time you run it it only runs the handler and the",
    "start": "717170",
    "end": "722600"
  },
  {
    "text": "third time in fourth time etc containers are persistent they'll stick around for five to fifteen minutes we keep them",
    "start": "722600",
    "end": "729500"
  },
  {
    "text": "cold in case you need them and if you've had 10 concurrent lambdas running we've",
    "start": "729500",
    "end": "734510"
  },
  {
    "text": "got 10 frozen containers waiting for you the next time and if you have that 10,000 we've got 10,000 frozen waiting",
    "start": "734510",
    "end": "740149"
  },
  {
    "text": "for the next one so we'll talk a little bit about what that means and how you can optimize using that the thing to",
    "start": "740149",
    "end": "748970"
  },
  {
    "start": "748000",
    "end": "844000"
  },
  {
    "text": "think about is it's a single event per execution environment a single in the event per container and there's no way",
    "start": "748970",
    "end": "756560"
  },
  {
    "text": "to really target a particular execution environment it's not like there's sticky sessions like the next the next one's",
    "start": "756560",
    "end": "762769"
  },
  {
    "text": "not going to go to the same execution environment so there's no point in having anything persistent in the execution environment anyway",
    "start": "762769",
    "end": "770500"
  },
  {
    "text": "execution environments are reused so you don't want to load absolutely everything into them right you don't need to",
    "start": "770500",
    "end": "777079"
  },
  {
    "text": "execute everything not every code path so let's go back to the this example",
    "start": "777079",
    "end": "784130"
  },
  {
    "text": "I've got my function and function my sub function be at the bottom there only one of those code",
    "start": "784130",
    "end": "792250"
  },
  {
    "text": "paths is likely to be executed in any given scenario if a if the function a at",
    "start": "792250",
    "end": "797680"
  },
  {
    "text": "the bottom is 90% of the traffic and the container executes 75 transactions and",
    "start": "797680",
    "end": "803800"
  },
  {
    "text": "never sees B it will never actually put a B into memory right so it's a lazy",
    "start": "803800",
    "end": "809470"
  },
  {
    "text": "load of that let me go back so don't",
    "start": "809470",
    "end": "815830"
  },
  {
    "text": "leave it don't load it if you don't need it I think that's that should be obvious but we'll come back to this idea of what",
    "start": "815830",
    "end": "823660"
  },
  {
    "text": "belongs in the initialization of the lambda and what belongs in the handler because it really does affect all of you",
    "start": "823660",
    "end": "832660"
  },
  {
    "text": "all the performance of your lambda the next bit let's look at this secret handler so this seems like something you",
    "start": "832660",
    "end": "839230"
  },
  {
    "text": "could manage in the deploy why don't why would I need to do that at runtime right there's a couple ways you can",
    "start": "839230",
    "end": "845710"
  },
  {
    "start": "844000",
    "end": "949000"
  },
  {
    "text": "manage secrets or sometimes application",
    "start": "845710",
    "end": "855160"
  },
  {
    "text": "toggles right environment variables such as you know dev test prod so one way is",
    "start": "855160",
    "end": "863530"
  },
  {
    "text": "to manage it using environment variables that's what this one is using and",
    "start": "863530",
    "end": "869160"
  },
  {
    "text": "basically environment variables in the lambda environments are key pairs that get passed in at the time you create the",
    "start": "869160",
    "end": "876070"
  },
  {
    "text": "function and they are available very",
    "start": "876070",
    "end": "881260"
  },
  {
    "text": "simply and easily with no heavyweight api's you can pull them right out of the OS environment so in Python for example",
    "start": "881260",
    "end": "888670"
  },
  {
    "text": "it's at the OS environ in node it's process end but the point is you don't",
    "start": "888670",
    "end": "896410"
  },
  {
    "text": "actually need any packages or any API calls to get that out of the environment variable it's very easy very lightweight",
    "start": "896410",
    "end": "902580"
  },
  {
    "text": "it's very it's a very good place to store it if it's not going to be reused for other functions you can also encrypt",
    "start": "902580",
    "end": "910779"
  },
  {
    "text": "it so what folks will do is they will actually encrypt the environment you know let's say the connection string",
    "start": "910779",
    "end": "916060"
  },
  {
    "text": "using kms put the cipher text into the environment very and then on load the lambda will go and",
    "start": "916060",
    "end": "923620"
  },
  {
    "text": "get will make a call to kms to decrypt this the text the blog the good news",
    "start": "923620",
    "end": "930760"
  },
  {
    "text": "about that is then you can use I am to control access to that key and therefore access to that the contents of that",
    "start": "930760",
    "end": "938680"
  },
  {
    "text": "environment variable it's also really good for I think I mentioned dev test",
    "start": "938680",
    "end": "944560"
  },
  {
    "text": "fraud type of switches epic changes in application logic the other way to do it",
    "start": "944560",
    "end": "951730"
  },
  {
    "start": "949000",
    "end": "1077000"
  },
  {
    "text": "is Systems Manager parameter store so the advantage of parameter store over",
    "start": "951730",
    "end": "958450"
  },
  {
    "text": "environment variables parameter store would be useful if you had multiple functions sharing a secret let's say you",
    "start": "958450",
    "end": "964060"
  },
  {
    "text": "got you know five functions and three of them need access to the same database if",
    "start": "964060",
    "end": "970540"
  },
  {
    "text": "you if you needed you know a different David database connection string across dev test and prod and you did a",
    "start": "970540",
    "end": "976930"
  },
  {
    "text": "different environment variable for each of them that's 15 environment variables by the time you do all that in your",
    "start": "976930",
    "end": "982810"
  },
  {
    "text": "deploy code it's probably simpler just to stick one entry into parameter storm and parameter store or supports",
    "start": "982810",
    "end": "989470"
  },
  {
    "text": "hierarchies so if your project has multiple Secrets multiple application flags you can you can give access to a",
    "start": "989470",
    "end": "996610"
  },
  {
    "text": "parent and inherits the routes again same idea of you can do plaintext or you",
    "start": "996610",
    "end": "1003330"
  },
  {
    "text": "get encrypt with kms you can also do notifications so if if an environment",
    "start": "1003330",
    "end": "1010680"
  },
  {
    "text": "variable has changed you really have no way of knowing but you can send SMS messages you can do cloud trail you can",
    "start": "1010680",
    "end": "1018210"
  },
  {
    "text": "do a lot of tracking on parameter store that you can't do with environment variables it's also less brittle right",
    "start": "1018210",
    "end": "1023670"
  },
  {
    "text": "it's it's a database it's a API call as opposed to something that's done that deploy time it can be tagged if you're",
    "start": "1023670",
    "end": "1031740"
  },
  {
    "text": "doing bill back or show back and it's available directly via API so on the",
    "start": "1031740",
    "end": "1038220"
  },
  {
    "text": "right there you can see some code that's actually making the call the the the",
    "start": "1038220",
    "end": "1043650"
  },
  {
    "text": "yellow code is the four or five lines of code you need to reach out to parameter store and get a value or a set of values",
    "start": "1043650",
    "end": "1051620"
  },
  {
    "text": "so it's not complicated to retrieve secrets from parameters store so and also notice here we've put that",
    "start": "1051620",
    "end": "1057620"
  },
  {
    "text": "retrieval of the of the secret outside of the handler so once once the",
    "start": "1057620",
    "end": "1063770"
  },
  {
    "text": "container has the secret the next invocation doesn't have to get it again the next implication doesn't have to get",
    "start": "1063770",
    "end": "1069049"
  },
  {
    "text": "it again the next 10,000 invocations it doesn't have to go get it again that's a",
    "start": "1069049",
    "end": "1074510"
  },
  {
    "text": "good optimization and you may have heard of AWS secrets so over the summer the",
    "start": "1074510",
    "end": "1081559"
  },
  {
    "start": "1077000",
    "end": "1114000"
  },
  {
    "text": "two teams got together and actually homogenized the API between parameters store and in EBS secrets so if you're",
    "start": "1081559",
    "end": "1089539"
  },
  {
    "text": "making a call whether you regardless of which endpoint you're making it to it's exactly the same API so for all intents",
    "start": "1089539",
    "end": "1095179"
  },
  {
    "text": "and purposes I use the two inter inter interchangeably secrets is actually a subset of what's available in parameters",
    "start": "1095179",
    "end": "1101299"
  },
  {
    "text": "storm parameter store has more capability but Secrets has a smaller set",
    "start": "1101299",
    "end": "1107510"
  },
  {
    "text": "of API common API responses down on the",
    "start": "1107510",
    "end": "1116120"
  },
  {
    "start": "1114000",
    "end": "1152000"
  },
  {
    "text": "bottom one of the things we always recommend is get your application logic your business logic out of the handler",
    "start": "1116120",
    "end": "1122929"
  },
  {
    "text": "and for the reason I mentioned before you're going to not execute every path",
    "start": "1122929",
    "end": "1129230"
  },
  {
    "text": "for every transaction and if a path never gets executed never gets loaded right it never gets put into memory just",
    "start": "1129230",
    "end": "1136399"
  },
  {
    "text": "sitting there it's going to be faster and more importantly your handler itself",
    "start": "1136399",
    "end": "1143210"
  },
  {
    "text": "will execute faster and load faster and then it can lazy load whichever portions of the code it needs so definitely one",
    "start": "1143210",
    "end": "1152659"
  },
  {
    "start": "1152000",
    "end": "1298000"
  },
  {
    "text": "of our recommendations is always separate the handler from the application logic we also think it's",
    "start": "1152659",
    "end": "1159380"
  },
  {
    "text": "pretty important to use lambda functions only for transformative things if you're doing something with the data if all",
    "start": "1159380",
    "end": "1167450"
  },
  {
    "text": "you're doing with a lambda function is taking something off of an SNS queue and putting in an s3 you're just moving an",
    "start": "1167450",
    "end": "1175130"
  },
  {
    "text": "event from one place to another you've become piping and frankly there's a feature that does that you can drop SMS",
    "start": "1175130",
    "end": "1181460"
  },
  {
    "text": "entries directly to s3 you don't need to write code to do so when you look at your code look at",
    "start": "1181460",
    "end": "1187879"
  },
  {
    "text": "what it's doing if it's moving data from one place to another and not making any changes to the data you probably should",
    "start": "1187879",
    "end": "1194269"
  },
  {
    "text": "look at another way to do that there's probably another pattern that would satisfy that without doing it in your code I think the other thing you know we",
    "start": "1194269",
    "end": "1203090"
  },
  {
    "text": "talked about dynamic logic configurations so if it does something different in dev than it doesn't prod",
    "start": "1203090",
    "end": "1209289"
  },
  {
    "text": "then you know don't build that logic into if-then statements or case statements in your and your handler use",
    "start": "1209289",
    "end": "1219529"
  },
  {
    "text": "environment variables and and manage it in your function and you know in the logic of your function the other thing",
    "start": "1219529",
    "end": "1227720"
  },
  {
    "text": "that's really important the way we all used to build software is we would give",
    "start": "1227720",
    "end": "1233359"
  },
  {
    "text": "our our application or a giant beautiful monolithic application access to all the",
    "start": "1233359",
    "end": "1238609"
  },
  {
    "text": "data and let it sort out what it needed in the data and it would do that usually",
    "start": "1238609",
    "end": "1244340"
  },
  {
    "text": "with sequel right it would execute some crazy big sequel command that's actually really an anti-pattern for serverless",
    "start": "1244340",
    "end": "1250940"
  },
  {
    "text": "what you want to do is give accent really give events to functions let them",
    "start": "1250940",
    "end": "1256489"
  },
  {
    "text": "execute if they need to reference data then use a filtered set of data use a",
    "start": "1256489",
    "end": "1261919"
  },
  {
    "text": "view that filters down what that thing actually needs use don't don't have",
    "start": "1261919",
    "end": "1267289"
  },
  {
    "text": "lambda sitting there waiting while your database is executing sequel right and",
    "start": "1267289",
    "end": "1272809"
  },
  {
    "text": "there's their services to do that quickly so I mentioned here query filters and Aurora s3 select but there's",
    "start": "1272809",
    "end": "1281239"
  },
  {
    "text": "there are ways to trim out the the chaf and get just the wheat handed to your lambda function and it makes a big",
    "start": "1281239",
    "end": "1288379"
  },
  {
    "text": "difference because if your database is cranking away and your lambdas billing you're paying and your customers waiting",
    "start": "1288379",
    "end": "1296799"
  },
  {
    "start": "1298000",
    "end": "1376000"
  },
  {
    "text": "the other thing we talked about is no orchestration in code or no workflow in code so if you were in the the school of",
    "start": "1298149",
    "end": "1307909"
  },
  {
    "text": "coding that I went to you really wanted to build resilient code you wanted to have a code that was bulletproof so it",
    "start": "1307909",
    "end": "1314059"
  },
  {
    "text": "would have retry logic right in the code if something happens wait for it and check it and make sure",
    "start": "1314059",
    "end": "1319850"
  },
  {
    "text": "it's finished right and then once it finish move on to the next thing and then check that and make sure that finished I'm not saying you should",
    "start": "1319850",
    "end": "1326720"
  },
  {
    "text": "abandon error-handling you just really don't need to do it in your code write your code needs to be uniform do the",
    "start": "1326720",
    "end": "1333650"
  },
  {
    "text": "thing and then use another methodology to track retries and to track failures",
    "start": "1333650",
    "end": "1340490"
  },
  {
    "text": "and to track error modes you don't need to put that in your code the reason if you put it in your code then you're",
    "start": "1340490",
    "end": "1345590"
  },
  {
    "text": "inevitably waiting for the failure right so I kick something off now I gotta wait 10 seconds and maybe if it fails again I",
    "start": "1345590",
    "end": "1352490"
  },
  {
    "text": "gotta wait another 10 seconds that's waiting time lambdas wasting money and",
    "start": "1352490",
    "end": "1358160"
  },
  {
    "text": "time and your customers aren't happy so how could I get that out of my handler function how can I get out of my code",
    "start": "1358160",
    "end": "1364640"
  },
  {
    "text": "and deal with it some other way so if you're using one of our queueing mechanisms most of them have some retry",
    "start": "1364640",
    "end": "1370880"
  },
  {
    "text": "capabilities built in I'll talk about those in a minute but one of the easier",
    "start": "1370880",
    "end": "1376880"
  },
  {
    "start": "1376000",
    "end": "1455000"
  },
  {
    "text": "ways to do it is with step functions whose used step functions okay anyone",
    "start": "1376880",
    "end": "1382340"
  },
  {
    "text": "using it how to do retry logic for a lambda a few excellent so step functions is a great way to get",
    "start": "1382340",
    "end": "1389720"
  },
  {
    "text": "get your retry logic your orchestration logic your workflow logic out of lambda so if you have new step functions step",
    "start": "1389720",
    "end": "1397070"
  },
  {
    "text": "functions are basically a workflow orchestration system management system with no administration you don't have to",
    "start": "1397070",
    "end": "1403310"
  },
  {
    "text": "do anything it's it's nothing more than a mo file that defines a workflow around",
    "start": "1403310",
    "end": "1410630"
  },
  {
    "text": "your lambda and defines what to do if something fails and your lambda can pass back custom failure codes to that and",
    "start": "1410630",
    "end": "1418010"
  },
  {
    "text": "you can build deciders in that that are not code they're just configuration that",
    "start": "1418010",
    "end": "1423290"
  },
  {
    "text": "can route your workflow from one lambda to another lambda to a dead letter q if",
    "start": "1423290",
    "end": "1428360"
  },
  {
    "text": "it continues to fail it can also manage parallel tasks asynchronous tasks quite well so when you when you're when you're",
    "start": "1428360",
    "end": "1435740"
  },
  {
    "text": "decomposing your micro services into nano functions think about why you would",
    "start": "1435740",
    "end": "1443000"
  },
  {
    "text": "want any type of error handling back off retry in your functions put it in the",
    "start": "1443000",
    "end": "1448280"
  },
  {
    "text": "piping put it in the orchestration environment don't put it in the function the other one this",
    "start": "1448280",
    "end": "1457510"
  },
  {
    "start": "1455000",
    "end": "1685000"
  },
  {
    "text": "one's pretty controversial by the way so if you really object violently to this I apologize it is uh even within our our",
    "start": "1457510",
    "end": "1466060"
  },
  {
    "text": "team if you ask three people you'll get four answers but mono repos are the idea",
    "start": "1466060",
    "end": "1473200"
  },
  {
    "text": "that I want all of my functions that support a given application let's say I've got six functions that support an",
    "start": "1473200",
    "end": "1478540"
  },
  {
    "text": "application I want them all in the same code repo with their infrastructure as",
    "start": "1478540",
    "end": "1484000"
  },
  {
    "text": "code so terraform or confirmation or Sam or whatever I want them all in one code repo and the thinking behind that is",
    "start": "1484000",
    "end": "1490930"
  },
  {
    "text": "I'll get a bunch of reuse right the problem with that is you have a",
    "start": "1490930",
    "end": "1496000"
  },
  {
    "text": "permission problem and you have a social contract problem because anyone who has access to one function has access to all",
    "start": "1496000",
    "end": "1502540"
  },
  {
    "text": "the functions and you have a social contract problem because I can go in and",
    "start": "1502540",
    "end": "1508000"
  },
  {
    "text": "blow up your function by changing some infrastructure code right the other thing about it is the dependency",
    "start": "1508000",
    "end": "1515260"
  },
  {
    "text": "footprint of functions is very different right so I've got one that access this database it needs packages to access the",
    "start": "1515260",
    "end": "1522160"
  },
  {
    "text": "database I've got another one that accesses you know web encryption I need I need different set of libraries for",
    "start": "1522160",
    "end": "1528610"
  },
  {
    "text": "that function if I put along the same repo and I build them all into the same zip file and upload them to lambda then",
    "start": "1528610",
    "end": "1535480"
  },
  {
    "text": "every lambda is carrying a bunch of weight around with it that doesn't need to carry so I'm gonna ever execute that code now obviously you could build",
    "start": "1535480",
    "end": "1543460"
  },
  {
    "text": "separate packages jar files whatever with only the dependencies that you need but if they're in the same repo the",
    "start": "1543460",
    "end": "1549670"
  },
  {
    "text": "tendency is just zip it up and send it as a block so the the dividing line here",
    "start": "1549670",
    "end": "1557200"
  },
  {
    "text": "is if they share an event source then you should maybe consider putting them",
    "start": "1557200",
    "end": "1562360"
  },
  {
    "text": "in the same repo so if they're both coming from s3 or they're both coming from an API call then maybe they should",
    "start": "1562360",
    "end": "1569890"
  },
  {
    "text": "be in the same repo if one's coming from s3 and the others coming from an API call put them in separate reap make",
    "start": "1569890",
    "end": "1576340"
  },
  {
    "text": "micro repositories for them it simplifies permissions it reduces the",
    "start": "1576340",
    "end": "1582160"
  },
  {
    "text": "footprint of each one and frankly the reason we we used to like mono repos is because deploys were very complex and",
    "start": "1582160",
    "end": "1588280"
  },
  {
    "text": "hard to build a code pipeline you know you'd get a consultant in or you'd sit for an afternoon with you know your head",
    "start": "1588280",
    "end": "1595870"
  },
  {
    "text": "in your hands trying to build a code pipeline code pipelines today are you know 10-minute job you can you can find",
    "start": "1595870",
    "end": "1602320"
  },
  {
    "text": "code that'll spin you up a code pipeline for a repo in 20 minutes not even right",
    "start": "1602320",
    "end": "1610150"
  },
  {
    "text": "and you can have you know I can have 100 repos each independently deployable and",
    "start": "1610150",
    "end": "1618330"
  },
  {
    "text": "it cost me nothing because frankly you only pay when you do the deploys it doesn't cost you anything to have the",
    "start": "1618330",
    "end": "1623590"
  },
  {
    "text": "pipeline sitting there all right there pay-per-use so I don't need a bunch of",
    "start": "1623590",
    "end": "1628750"
  },
  {
    "text": "dedicated code the other thing is we used to build very complicated deploy mechanisms because there's dependencies",
    "start": "1628750",
    "end": "1635050"
  },
  {
    "text": "in these deploys right having more code pipelines means those are easier to",
    "start": "1635050",
    "end": "1641590"
  },
  {
    "text": "manage and frankly less onerous because it's the same deploy mechanism for every",
    "start": "1641590",
    "end": "1647110"
  },
  {
    "text": "function as opposed to a custom one for this one and a custom one for that one and we talked a little bit about testing",
    "start": "1647110",
    "end": "1653590"
  },
  {
    "text": "if you if you put a bunch of functions in a single repo and you do a deploy and",
    "start": "1653590",
    "end": "1659140"
  },
  {
    "text": "it applies all of them your test suite has to test them all but really only changed one of them why test all the",
    "start": "1659140",
    "end": "1666010"
  },
  {
    "text": "rest of them maybe regression testing so the advice",
    "start": "1666010",
    "end": "1671679"
  },
  {
    "text": "is avoid mono repos have micro repos you can combine them if they share an event",
    "start": "1671679",
    "end": "1677710"
  },
  {
    "text": "source and also be very mindful that there that you're not loading packages that you don't need dependency packages",
    "start": "1677710",
    "end": "1683950"
  },
  {
    "text": "I mean okay so to recap on what you can",
    "start": "1683950",
    "end": "1689350"
  },
  {
    "start": "1685000",
    "end": "1884000"
  },
  {
    "text": "do with your lambda function the the first thing is minimize your dependency",
    "start": "1689350",
    "end": "1694450"
  },
  {
    "text": "so another thought here if I am gonna do some HTTP requests I load the HTTP",
    "start": "1694450",
    "end": "1700540"
  },
  {
    "text": "request framework it probably can handle every variety of header and every variety of parameter modification it",
    "start": "1700540",
    "end": "1707620"
  },
  {
    "text": "handle every type of cookie there is guess what my incoming HTTP",
    "start": "1707620",
    "end": "1712900"
  },
  {
    "text": "I need to parse probably uses two of those so why do I need such a heavyweight package how about I stripped",
    "start": "1712900",
    "end": "1719290"
  },
  {
    "text": "things out of that package and get down to the two things I actually need that's a useful tip use pre handle pre handler",
    "start": "1719290",
    "end": "1727990"
  },
  {
    "text": "logic strategically so pick and choose what goes in the initiation and what",
    "start": "1727990",
    "end": "1733090"
  },
  {
    "text": "goes in the handler and I'll show you a way to get to that in a minute",
    "start": "1733090",
    "end": "1738690"
  },
  {
    "text": "use secrets and use a deploy mechanism for secrets on that depends on your",
    "start": "1738690",
    "end": "1745030"
  },
  {
    "text": "scope single function single application single deploy mechanism environment variables are the lightest weight thing",
    "start": "1745030",
    "end": "1751300"
  },
  {
    "text": "you can do but they don't scale when you've got multiple functions they don't scale when you got multiple teams",
    "start": "1751300",
    "end": "1756910"
  },
  {
    "text": "working on the same code so then you go to parameter store secrets a two Bs",
    "start": "1756910",
    "end": "1762490"
  },
  {
    "text": "secrets think about how reuse affects variables so I had a customer a very big",
    "start": "1762490",
    "end": "1770140"
  },
  {
    "text": "customer actually in the photo-sharing space and they had an application that did the minify you know take taking a",
    "start": "1770140",
    "end": "1778270"
  },
  {
    "text": "long URL and making it a small URL and they were doing it you know billions of transactions and they were they kept",
    "start": "1778270",
    "end": "1785260"
  },
  {
    "text": "really overloaded in the database like there wasn't that many transactions and the database kept kept going crazy and",
    "start": "1785260",
    "end": "1791320"
  },
  {
    "text": "he says look I've only got you know 10,000 invocations and I'm using 20,000",
    "start": "1791320",
    "end": "1797490"
  },
  {
    "text": "database connections what is going on here right but what he wasn't thinking was about two minutes ago he had 20,000",
    "start": "1797490",
    "end": "1805180"
  },
  {
    "text": "invocations and the database connection was in the header but it was in the initialization so those containers were",
    "start": "1805180",
    "end": "1811300"
  },
  {
    "text": "still sitting there those connections are still active still available in fact for the next twenty thousand so you got",
    "start": "1811300",
    "end": "1818680"
  },
  {
    "text": "to think about where it makes sense and when it doesn't make sense to put something in the handler versus the the",
    "start": "1818680",
    "end": "1823980"
  },
  {
    "text": "global scope we talked about concise logic you know to the extent you can",
    "start": "1823980",
    "end": "1832120"
  },
  {
    "text": "eliminate orchestration you move it out into step functions you should do it what you know workflow and avoid mono",
    "start": "1832120",
    "end": "1840160"
  },
  {
    "text": "repos essentially if you can do it it's it's the tendency because of the way we were trained particularly for Java",
    "start": "1840160",
    "end": "1846130"
  },
  {
    "text": "developer make big giant jar files war files it's",
    "start": "1846130",
    "end": "1851660"
  },
  {
    "text": "it's a it's an anti-pattern for a couple reasons but the biggest one is the the",
    "start": "1851660",
    "end": "1856880"
  },
  {
    "text": "people get sloppy on the dependencies and so you don't know what actually needs to be in there and you just end up uploading everything every time and you",
    "start": "1856880",
    "end": "1864140"
  },
  {
    "text": "get these massive payloads and remember on lambda you pay for every byte right",
    "start": "1864140",
    "end": "1869450"
  },
  {
    "text": "it's a very small amount but a you pay it if it's ten thousand implications an hour it it adds up so now we'll talk",
    "start": "1869450",
    "end": "1878540"
  },
  {
    "text": "about the execution environment the things that that you can adjust there",
    "start": "1878540",
    "end": "1884200"
  },
  {
    "start": "1884000",
    "end": "2009000"
  },
  {
    "text": "it's separated really into two segments so on the left is everything that we",
    "start": "1884200",
    "end": "1891170"
  },
  {
    "text": "control and that is you know when we create our new container we download your code you actually do control that",
    "start": "1891170",
    "end": "1897740"
  },
  {
    "text": "bit how much of you how big is your zip how big is the code that you've given us is it only the things that need to be",
    "start": "1897740",
    "end": "1903710"
  },
  {
    "text": "there have you made your function small enough right but for the most part you can't actually optimize that at this",
    "start": "1903710",
    "end": "1910100"
  },
  {
    "text": "point and starting the execution environment that's all on us what you",
    "start": "1910100",
    "end": "1916220"
  },
  {
    "text": "can control is bootstrapping the runtime and running your code and then the actual handler beyond that and you can",
    "start": "1916220",
    "end": "1923750"
  },
  {
    "text": "optimize that in a couple ways you can optimize it function by function or you can optimize it across an entire system",
    "start": "1923750",
    "end": "1929540"
  },
  {
    "text": "of lambda functions and I'll be talking more about that as as the slides go on",
    "start": "1929540",
    "end": "1937880"
  },
  {
    "text": "here it's the problem is when you look at stats out of lambda duration right",
    "start": "1937880",
    "end": "1943390"
  },
  {
    "text": "duration includes everything there particularly for a cold start right",
    "start": "1943390",
    "end": "1948500"
  },
  {
    "text": "everyone know what a cold start is raise your hand if you know what a cold start is okay good so duration doesn't really",
    "start": "1948500",
    "end": "1957770"
  },
  {
    "text": "help right like how do I know how much of that is in my bootstrap and how much of that is in my code all right it's too",
    "start": "1957770",
    "end": "1964460"
  },
  {
    "text": "bad there wasn't some way some magic wand that would let us introspect into the lambda function and all the",
    "start": "1964460",
    "end": "1970880"
  },
  {
    "text": "functions in an ecosystem and see where see where it's going I don't know what",
    "start": "1970880",
    "end": "1976190"
  },
  {
    "text": "you'd call something like that if you had such a tool but I was advised actually before I came on",
    "start": "1976190",
    "end": "1984150"
  },
  {
    "text": "stage that if you were nervous about presenting you should imagine your audience naked",
    "start": "1984150",
    "end": "1989360"
  },
  {
    "text": "I'm just saying Ike's Wow I admire that though I've never gone",
    "start": "1989360",
    "end": "1994470"
  },
  {
    "text": "commando at a tech conference I think reinvent it would chafe so it turns out",
    "start": "1994470",
    "end": "2001400"
  },
  {
    "text": "there is such a tool it's called x-ray and x-ray how many of you have used x-ray okay do you haven't used x-ray",
    "start": "2001400",
    "end": "2010640"
  },
  {
    "start": "2009000",
    "end": "2118000"
  },
  {
    "text": "what x-ray does is x-ray inserts tracers into every HTTP call header in your echo",
    "start": "2010640",
    "end": "2018350"
  },
  {
    "text": "system so you you have to tool it you have to put a couple of lines of code like the ones at the top into your",
    "start": "2018350",
    "end": "2025310"
  },
  {
    "text": "lambda function and basically it can then create a service map of your",
    "start": "2025310",
    "end": "2032240"
  },
  {
    "text": "application and all the calls going on in your application now what lambda you kind of get it for free because most of",
    "start": "2032240",
    "end": "2039380"
  },
  {
    "text": "the services in the lambda ecosystem in the surveillance ecosystem are already including those tracer those tracer",
    "start": "2039380",
    "end": "2046880"
  },
  {
    "text": "headers and x-ray can already visualize that for you with other implementations",
    "start": "2046880",
    "end": "2053510"
  },
  {
    "text": "like elastic Beanstalk EC to EC eks you",
    "start": "2053510",
    "end": "2059389"
  },
  {
    "text": "have to actually include a little bit more code it's not difficult you can you can you can tool anything that runs in",
    "start": "2059390",
    "end": "2066740"
  },
  {
    "text": "the cloud on AWS practically to interact with x-ray and so if you take a look at",
    "start": "2066740",
    "end": "2073639"
  },
  {
    "text": "that that service map it's showing you all the calls that were made the Green is a 200 the the red is of 500 and the",
    "start": "2073640",
    "end": "2081408"
  },
  {
    "text": "yellows of 400 responds and more importantly it's showing you the duration the the the duration of each",
    "start": "2081409",
    "end": "2092690"
  },
  {
    "text": "sub call in your system and you can drill into those so if I drill into one I can look at the actual trace and it",
    "start": "2092690",
    "end": "2100280"
  },
  {
    "text": "will show me for example how long it took to cold start or restart the the container it can show me how long it",
    "start": "2100280",
    "end": "2107090"
  },
  {
    "text": "took to get its its I am role how long it took to get credentials how long it took to get an Eni from your",
    "start": "2107090",
    "end": "2112920"
  },
  {
    "text": "VPC and you can see cold starts in here quite easily actually so if the entire",
    "start": "2112920",
    "end": "2120660"
  },
  {
    "text": "the top bar is the entire run of the lambda and the bottom two bars represent",
    "start": "2120660",
    "end": "2126510"
  },
  {
    "text": "that the small blue one represents your initialization phase and the other one represents your handler your application",
    "start": "2126510",
    "end": "2133799"
  },
  {
    "text": "logic so from the time lambda started from the time the call came in to the",
    "start": "2133799",
    "end": "2140309"
  },
  {
    "text": "time your handler started is the cold start right and you can optimize around",
    "start": "2140309",
    "end": "2146700"
  },
  {
    "text": "that so you can have more in your in in your initialization phase as opposed to",
    "start": "2146700",
    "end": "2151920"
  },
  {
    "text": "in your handler if the mix looked the other way you could you could take a look at it",
    "start": "2151920",
    "end": "2157920"
  },
  {
    "text": "and say well maybe I can put more of that in the handler because it's wasting too much time on every call so x-ray gives you that capability to",
    "start": "2157920",
    "end": "2165960"
  },
  {
    "text": "see into your lambda functions and and optimize the duration of every element",
    "start": "2165960",
    "end": "2173549"
  },
  {
    "text": "of the of the of the echo system so if you haven't used it you should definitely try it I wouldn't put it in",
    "start": "2173549",
    "end": "2179490"
  },
  {
    "text": "production first put it in dev test use it there remember though in dev tests",
    "start": "2179490",
    "end": "2186240"
  },
  {
    "text": "you you get a lot more cold starts in production cold starts out the 99th percentile because practically your your",
    "start": "2186240",
    "end": "2193200"
  },
  {
    "text": "traffic keeps things warm right in dev test you just released the code it's never been executed before you run it",
    "start": "2193200",
    "end": "2199829"
  },
  {
    "text": "guess what you're gonna get a cold start every darn time so if you use it in dev tests remember to execute it a few times",
    "start": "2199829",
    "end": "2206910"
  },
  {
    "text": "and look for the cold start traces and ignore those pretty much the other thing",
    "start": "2206910",
    "end": "2213079"
  },
  {
    "text": "about it is if you do put it in production you can sample it you can create a sampling rule so this one you",
    "start": "2213079",
    "end": "2220170"
  },
  {
    "text": "know the default rule says show me every HTTP transaction I want to capture everything I want all the data more data",
    "start": "2220170",
    "end": "2226680"
  },
  {
    "text": "please but in production maybe you only want to see the errors and maybe you only want",
    "start": "2226680",
    "end": "2232079"
  },
  {
    "text": "to see 5% of the errors right you can capture it by percentage you can capture it by max q and basically that data is",
    "start": "2232079",
    "end": "2242089"
  },
  {
    "text": "sample in all of your environments but you you don't want to do detail sampling in production at scale because",
    "start": "2242089",
    "end": "2249540"
  },
  {
    "text": "you'll blow the doors off of x-ray and slow down your your your functions so",
    "start": "2249540",
    "end": "2257940"
  },
  {
    "start": "2257000",
    "end": "2339000"
  },
  {
    "text": "x-ray tells you what you can tweak in terms of your function there's a couple",
    "start": "2257940",
    "end": "2263580"
  },
  {
    "text": "of the things in your execution environment that you can play with the biggest knob really the only knob you've got is memory how much memory do I give",
    "start": "2263580",
    "end": "2270450"
  },
  {
    "text": "my function how much is the right amount of memory and if you say well you know I ran my function",
    "start": "2270450",
    "end": "2276870"
  },
  {
    "text": "it said the max memory had ever used was you know 50 K and I gave it 128 Meg it",
    "start": "2276870",
    "end": "2283140"
  },
  {
    "text": "should be good right never hit near the max memory but remember that memory as",
    "start": "2283140",
    "end": "2289170"
  },
  {
    "text": "the knob also controls CPU so when you give it 128 megabytes of memory you're",
    "start": "2289170",
    "end": "2296850"
  },
  {
    "text": "giving it the absolute smallest sliver of a virtual CPU and as you increase the",
    "start": "2296850",
    "end": "2302610"
  },
  {
    "text": "memory you get more CPU it's a proportional time share on that system",
    "start": "2302610",
    "end": "2307740"
  },
  {
    "text": "and when you get to 1.8 gig you get one whole CPU right so how do I determine",
    "start": "2307740",
    "end": "2315300"
  },
  {
    "text": "like I don't I guarantee you don't know today whether your functions are compute bound network bound throughput bound",
    "start": "2315300",
    "end": "2323240"
  },
  {
    "text": "memory bound very unlikely that you know that so how do i how do i how do i resolve that one way is to test it at",
    "start": "2323240",
    "end": "2332610"
  },
  {
    "text": "various memory settings that's actually what we recommend remember i talked about having that test suite earlier it's really useful for this so here's an",
    "start": "2332610",
    "end": "2340620"
  },
  {
    "start": "2339000",
    "end": "2390000"
  },
  {
    "text": "example of a lambda that we wrote to test this compute bound idea it",
    "start": "2340620",
    "end": "2348180"
  },
  {
    "text": "basically calculates prime numbers a thousand times for up to a million and at 128 megabytes of memory",
    "start": "2348180",
    "end": "2355590"
  },
  {
    "text": "it runs for 11 seconds and that's it's cheap right 128 megabytes times 11",
    "start": "2355590",
    "end": "2361980"
  },
  {
    "text": "seconds point over two and a half cents or something like that but if I add a",
    "start": "2361980",
    "end": "2369810"
  },
  {
    "text": "little more memory it does speed up but it starts to cost more and they had a little bit more memory it still speeds",
    "start": "2369810",
    "end": "2376140"
  },
  {
    "text": "up but it really starts to cost more but look at the bottom one I added enough memory it now runs ten",
    "start": "2376140",
    "end": "2382450"
  },
  {
    "text": "times faster so it only runs it's ten times the memory but it runs one-tenth the amount of time so the net-net is I",
    "start": "2382450",
    "end": "2390670"
  },
  {
    "start": "2390000",
    "end": "2470000"
  },
  {
    "text": "get it running ten seconds faster but I'm only paying point Oh 100 one more",
    "start": "2390670",
    "end": "2397570"
  },
  {
    "text": "now this is easy for businesses to digest would you rather you know save a fractional fractional fractional penny",
    "start": "2397570",
    "end": "2404050"
  },
  {
    "text": "or would you rather have things running ten seconds faster right easy easy there's no business person in",
    "start": "2404050",
    "end": "2410230"
  },
  {
    "text": "the world who's gonna say no no save that fractional penny right and you may",
    "start": "2410230",
    "end": "2415750"
  },
  {
    "text": "think probably my stuff's not CPU bound anyway right but remember we switched",
    "start": "2415750",
    "end": "2421000"
  },
  {
    "text": "SSL certs from 102 4 to 204 8 and nearly",
    "start": "2421000",
    "end": "2426430"
  },
  {
    "text": "it's not double because it's logarithmic actually the compute power to decrypt",
    "start": "2426430",
    "end": "2431770"
  },
  {
    "text": "and encrypt and a lot of your stuff is HTTP HTTP bound so even if it's knock up",
    "start": "2431770",
    "end": "2436990"
  },
  {
    "text": "on you you may be CPU bound and not know it I had a customer run something on ec2",
    "start": "2436990",
    "end": "2444010"
  },
  {
    "text": "cost him a million dollars a month run it on lamda cost him 150 thousand dollars a month added memory ended up",
    "start": "2444010",
    "end": "2451450"
  },
  {
    "text": "costing him sixty thousand dollars a month from you know one hundred and",
    "start": "2451450",
    "end": "2456970"
  },
  {
    "text": "fifty to sixty more than more than half reduction by increasing memory which is counterintuitive",
    "start": "2456970",
    "end": "2461980"
  },
  {
    "text": "I increased the memory I should be paying more right and by the way his performance went up like 15 X so there",
    "start": "2461980",
    "end": "2471220"
  },
  {
    "start": "2470000",
    "end": "2502000"
  },
  {
    "text": "is a threshold at which it doesn't make sense though so unless your code is",
    "start": "2471220",
    "end": "2476680"
  },
  {
    "text": "multi-threaded you're not going to be able to take advantage of a second CPU so when you get above one point eight",
    "start": "2476680",
    "end": "2482940"
  },
  {
    "text": "gigabytes you get a second CPU but if your code is unit is not multi-threaded",
    "start": "2482940",
    "end": "2488530"
  },
  {
    "text": "it's not gonna use that anyway and so you'll see no performance improvement from from the CPU perspective for i/o",
    "start": "2488530",
    "end": "2494980"
  },
  {
    "text": "bound yes you'll get more of the network and you get more of the backplane it might improve so be aware of the the",
    "start": "2494980",
    "end": "2501220"
  },
  {
    "text": "block there the other thing you can do is you can control the execution model",
    "start": "2501220",
    "end": "2507400"
  },
  {
    "start": "2502000",
    "end": "2564000"
  },
  {
    "text": "so at the very top of the pyramid usually you've got an API",
    "start": "2507400",
    "end": "2513200"
  },
  {
    "text": "call coming in right and that's a slash order or slash customer or slash product",
    "start": "2513200",
    "end": "2519529"
  },
  {
    "text": "whatever and that's synchronous you have to respond to that in real time and there's not much you can do to adjust",
    "start": "2519529",
    "end": "2526309"
  },
  {
    "text": "that execution model but below that under the hood you have some control you",
    "start": "2526309",
    "end": "2531349"
  },
  {
    "text": "could use a queuing mechanism you can use polling mechanism to feed events to",
    "start": "2531349",
    "end": "2538309"
  },
  {
    "text": "your lambdas in a more in a synchronous fashion and I'll talk a little bit about",
    "start": "2538309",
    "end": "2544609"
  },
  {
    "text": "the we call the iceberg that microservices iceberg and how you can use this below the water the thing to",
    "start": "2544609",
    "end": "2551990"
  },
  {
    "text": "think about this the the characteristics of each of these queue types is very different from a persistence perspective",
    "start": "2551990",
    "end": "2558619"
  },
  {
    "text": "or retry perspective and I'll cover some of that so the one thing that people",
    "start": "2558619",
    "end": "2565760"
  },
  {
    "start": "2564000",
    "end": "2621000"
  },
  {
    "text": "tend to overlook is actually just you can make a lambda API call yourself you can invoke your own lambda so the idea",
    "start": "2565760",
    "end": "2572329"
  },
  {
    "text": "behind Micra services is everything has to be behind an API right I'm gonna create a micro service it's gonna have",
    "start": "2572329",
    "end": "2578690"
  },
  {
    "text": "an API it's gonna have a slash something it's gonna hide behind a load balancer technically you don't need that if it",
    "start": "2578690",
    "end": "2585200"
  },
  {
    "text": "only has one function and that's to do something asynchronously you can actually just invoke it with a with an",
    "start": "2585200",
    "end": "2591529"
  },
  {
    "text": "API call yourself and you can pass it any event you want this is really",
    "start": "2591529",
    "end": "2597079"
  },
  {
    "text": "powerful it's in all the SDKs and folks tend to overlook it the idea of a lambda calling a lambda is not intuitive and",
    "start": "2597079",
    "end": "2603440"
  },
  {
    "text": "definitely synchronously it doesn't make any sense because then they're both running one waiting and one working and",
    "start": "2603440",
    "end": "2608900"
  },
  {
    "text": "you're paying for both but asynchronously the one that that pulled it off the queue and gave it to the",
    "start": "2608900",
    "end": "2614690"
  },
  {
    "text": "appropriate sub lambda is gone it's gone and you're only paying for the one that's actually executing and what that",
    "start": "2614690",
    "end": "2621019"
  },
  {
    "start": "2621000",
    "end": "2642000"
  },
  {
    "text": "looks like in code is you know four lines of code you know created a lambda",
    "start": "2621019",
    "end": "2626630"
  },
  {
    "text": "client and invoke the API and pass it context and a payload basically and then",
    "start": "2626630",
    "end": "2634460"
  },
  {
    "text": "behind the scenes we're managing the queue of that and the retries of that",
    "start": "2634460",
    "end": "2641559"
  },
  {
    "text": "so I talked about this micro-services iceberg at the top of it you have a public interface there's nothing you can",
    "start": "2641620",
    "end": "2648010"
  },
  {
    "start": "2642000",
    "end": "2681000"
  },
  {
    "text": "do about that you have a public interface you've got to provide that but everything below you can architect so",
    "start": "2648010",
    "end": "2654610"
  },
  {
    "text": "you're taking that micro service and you're breaking it into nano functions the nano functions don't have to be just",
    "start": "2654610",
    "end": "2661180"
  },
  {
    "text": "code calling code you couldn't you could implement a queuing mechanism there or an SNS right and you can use any of the",
    "start": "2661180",
    "end": "2669730"
  },
  {
    "text": "polling math methods I described before within that universe including just invoking asynchronously other api's",
    "start": "2669730",
    "end": "2675880"
  },
  {
    "text": "other other lambda functions we talked",
    "start": "2675880",
    "end": "2682240"
  },
  {
    "start": "2681000",
    "end": "2759000"
  },
  {
    "text": "about gateways and routers so the way to sort of choose where to implement it if",
    "start": "2682240",
    "end": "2687340"
  },
  {
    "text": "you have a single custom client just fire off an API you don't need an API",
    "start": "2687340",
    "end": "2692440"
  },
  {
    "text": "gateway that's going to cost you money and slow your performance if you--if it's an N region public use API gateway",
    "start": "2692440",
    "end": "2700420"
  },
  {
    "text": "public endpoints regional public endpoints if it's an internal one use private API gateway endpoints it's a",
    "start": "2700420",
    "end": "2706960"
  },
  {
    "text": "front it no need for a custom interface maybe if you don't need a custom",
    "start": "2706960",
    "end": "2712510"
  },
  {
    "text": "interface maybe you can actually use a managed service sqs SNS and discard",
    "start": "2712510",
    "end": "2719920"
  },
  {
    "text": "uninteresting events so again much like we talked about on the database side",
    "start": "2719920",
    "end": "2725020"
  },
  {
    "text": "you've got a stream of events coming at your lambda does the lander really need",
    "start": "2725020",
    "end": "2730300"
  },
  {
    "text": "to look at all of them maybe there's a way to filter them before they get to the lambda so the lambda is only looking",
    "start": "2730300",
    "end": "2735370"
  },
  {
    "text": "at the ones that are that are useful to it rather than filtering it inside the lambda right and there are ways to do",
    "start": "2735370",
    "end": "2741880"
  },
  {
    "text": "that so s3 has event prefix SNS has message filtering sqs has something",
    "start": "2741880",
    "end": "2747160"
  },
  {
    "text": "called attributes or label sorry you can filter things before they get to",
    "start": "2747160",
    "end": "2753370"
  },
  {
    "text": "your to your lambda and therefore not have to execute the lambda at all so",
    "start": "2753370",
    "end": "2760750"
  },
  {
    "start": "2759000",
    "end": "2785000"
  },
  {
    "text": "focus below the water line and think of it as a software engineering exercise not a service exercise and give as much",
    "start": "2760750",
    "end": "2768970"
  },
  {
    "text": "thought to the architecture beneath the line as you do to everything outside of it like databases persistence",
    "start": "2768970",
    "end": "2775119"
  },
  {
    "text": "that's right so the ways that you can optimize I could probably spend another",
    "start": "2775119",
    "end": "2780819"
  },
  {
    "text": "hour on these six and I don't have an hour so only talked about three the one",
    "start": "2780819",
    "end": "2786789"
  },
  {
    "text": "thing that you must do is manage concurrency and concurrency is important for a couple reasons it's essentially",
    "start": "2786789",
    "end": "2793990"
  },
  {
    "text": "out of the gate it's a shared pool so these are the three models and concurrency if it's an API call or SNS",
    "start": "2793990",
    "end": "2801309"
  },
  {
    "start": "2795000",
    "end": "2824000"
  },
  {
    "text": "that means for every event it's going to spawn a lambda if it's Q based that",
    "start": "2801309",
    "end": "2806950"
  },
  {
    "text": "means that you're going to get Polar's that pull batches off the queue and if it's stream based that means",
    "start": "2806950",
    "end": "2812799"
  },
  {
    "text": "you're gonna be able to shard it across multiple shards and each of those has a different is optimized differently",
    "start": "2812799",
    "end": "2819789"
  },
  {
    "text": "across these three aspects so the reason",
    "start": "2819789",
    "end": "2825009"
  },
  {
    "start": "2824000",
    "end": "2925000"
  },
  {
    "text": "that's important is your lambda can easily become a DDoS machine for your",
    "start": "2825009",
    "end": "2830019"
  },
  {
    "text": "database right if you put an SNS queue on top in front of a lambda and the lambda spins up",
    "start": "2830019",
    "end": "2835690"
  },
  {
    "text": "3,000 10,000 copies of itself and each of them tries to do an insert onto an",
    "start": "2835690",
    "end": "2840759"
  },
  {
    "text": "RDS database you're gonna blow that database up concurrency is real you have",
    "start": "2840759",
    "end": "2846369"
  },
  {
    "text": "to manage concurrency the other problem is concurrency shared unless you specify per function concurrency it's shared",
    "start": "2846369",
    "end": "2853119"
  },
  {
    "text": "which means that one runaway rogue lambda can eat up all the available concurrency in your account for region",
    "start": "2853119",
    "end": "2858880"
  },
  {
    "text": "and then no other lambda any other lambda could run so the main way you manage it is per function concurrency",
    "start": "2858880",
    "end": "2867339"
  },
  {
    "text": "and it acts as a reservation so if I say 10,000 is the max number of concurrence",
    "start": "2867339",
    "end": "2872410"
  },
  {
    "text": "for this particular lambda that takes it out of that shared pool it gives it its own cap its own limit",
    "start": "2872410",
    "end": "2879099"
  },
  {
    "text": "and so even if everything else goes to heck in your environment that lambda will get 10,000 invocations up to 10,000",
    "start": "2879099",
    "end": "2886180"
  },
  {
    "text": "invocations so you have to manage concurrency and the way you manage it is a little different depending on which",
    "start": "2886180",
    "end": "2894150"
  },
  {
    "text": "which invocation method you're using so if it's an API the only way to manage it",
    "start": "2894150",
    "end": "2899950"
  },
  {
    "text": "is your per function concurrency if it's SNS the only way to manage it is per",
    "start": "2899950",
    "end": "2905529"
  },
  {
    "text": "function concurrency sqs you can manage that you using batching so when you when lambda",
    "start": "2905529",
    "end": "2911650"
  },
  {
    "text": "pulls things off the queue it pulls off batches up to ten for example and with",
    "start": "2911650",
    "end": "2917050"
  },
  {
    "text": "kidneys in streams you managed it was sharding so once one one function per",
    "start": "2917050",
    "end": "2922690"
  },
  {
    "text": "shard persistence so eventually you're gonna push bad code and you're gonna",
    "start": "2922690",
    "end": "2928840"
  },
  {
    "start": "2925000",
    "end": "2993000"
  },
  {
    "text": "blow up your lambda or something downstream is gonna fail and you're gonna blow up your lambda so the",
    "start": "2928840",
    "end": "2934480"
  },
  {
    "text": "question for you is am I gonna lose data all right am I gonna lose the events if the lambda fails over and over and over",
    "start": "2934480",
    "end": "2940270"
  },
  {
    "text": "and the answer is probably yes unless you do a few things so persistence for the the lambda API",
    "start": "2940270",
    "end": "2948190"
  },
  {
    "text": "there really isn't one it'll do two retries and after that yuri tries it throws the the event away unless you've",
    "start": "2948190",
    "end": "2955180"
  },
  {
    "text": "set up a dead letter Q which I'll talk about in a minute S&S will do some retry",
    "start": "2955180",
    "end": "2960940"
  },
  {
    "text": "up for up to 13 hours but then it's gonna throw it away sqs is much better 14 days and they",
    "start": "2960940",
    "end": "2968230"
  },
  {
    "text": "never throws anything away unless you actively delete it but sqs has a max depth of 120,000 elements",
    "start": "2968230",
    "end": "2975280"
  },
  {
    "text": "events so you can blow the end of your queue and then go 120,000 into the dead",
    "start": "2975280",
    "end": "2981070"
  },
  {
    "text": "letter Q and blow that so 240,000 and you're starting to lose data and Kinesis",
    "start": "2981070",
    "end": "2987100"
  },
  {
    "text": "is virtually impossible to lose data and Kinesis actually but you do pay for it if you go over 24 hours",
    "start": "2987100",
    "end": "2992830"
  },
  {
    "text": "I also retry and failure handling in lambda if it's an API call or you you",
    "start": "2992830",
    "end": "3000710"
  },
  {
    "start": "2993000",
    "end": "3099000"
  },
  {
    "text": "executed it retry logic is basically done around the invocation so we have a",
    "start": "3000710",
    "end": "3007860"
  },
  {
    "text": "queue will manage the implication and it'll retry twice and then it'll dump it unless you have a dead letter Q SNS does",
    "start": "3007860",
    "end": "3016860"
  },
  {
    "text": "this sort of exponential back-off thing and it will it will continue to retry",
    "start": "3016860",
    "end": "3022050"
  },
  {
    "text": "for maybe 13 hours or so and then it'll dump it that's SNS is actually the",
    "start": "3022050",
    "end": "3027150"
  },
  {
    "text": "hardest one here for retries getting getting a spillover mechanism for SNS is",
    "start": "3027150",
    "end": "3032760"
  },
  {
    "text": "actually pretty challenging you can do it but it takes some work sqs is much simpler",
    "start": "3032760",
    "end": "3038130"
  },
  {
    "text": "they've just remained in the queue until you pull them out until you actively eat them so assuming you don't hit your",
    "start": "3038130",
    "end": "3045020"
  },
  {
    "text": "you know max time in the queue and you don't eat your dead letter qu you don't have to worry about it as much and",
    "start": "3045020",
    "end": "3051290"
  },
  {
    "text": "Kinesis again goes by shard and has a cursor so you practically never have to",
    "start": "3051290",
    "end": "3057380"
  },
  {
    "text": "worry about retries the other thing about retries if you cared about order and let's say it's an SNS and it's",
    "start": "3057380",
    "end": "3065330"
  },
  {
    "text": "starting to retry it's not gonna retry in order right order is gone because",
    "start": "3065330",
    "end": "3071000"
  },
  {
    "text": "it's it's gonna send them through as soon as it gets them right and if you're doing exponential back-off",
    "start": "3071000",
    "end": "3076250"
  },
  {
    "text": "it may get some newer ones before the older ones so order order will be gone FIFO queues can keep order on SQS but",
    "start": "3076250",
    "end": "3083840"
  },
  {
    "text": "most sqs doesn't use FIFO for performance reasons and so probably order doesn't matter there either so if",
    "start": "3083840",
    "end": "3091520"
  },
  {
    "text": "order is important to you think about what retries mean from an ordering perspective and is your application",
    "start": "3091520",
    "end": "3097400"
  },
  {
    "text": "height impotant so the solution for most of this is dead",
    "start": "3097400",
    "end": "3103190"
  },
  {
    "start": "3099000",
    "end": "3208000"
  },
  {
    "text": "letter queues on lambda if you're not using how many people have used dead letter cues on lambda very few use it on",
    "start": "3103190",
    "end": "3110000"
  },
  {
    "text": "every lambda why wouldn't you it costs nothing if you if you if the lambda never fails it cost you literally",
    "start": "3110000",
    "end": "3116390"
  },
  {
    "text": "nothing if the lambda does fail it saves your bacon and by the way it's an S USQ",
    "start": "3116390",
    "end": "3121610"
  },
  {
    "text": "which is like 50 cents per million messages or something you should use it",
    "start": "3121610",
    "end": "3126890"
  },
  {
    "text": "there's no reason not to use it and you should instrument a cloud watch to watch your dead letter queues and tell you",
    "start": "3126890",
    "end": "3132140"
  },
  {
    "text": "when you're starting to spill over into dead letter queues because it's not a question of if your function is going to",
    "start": "3132140",
    "end": "3137390"
  },
  {
    "text": "fail at some point it was going to fail right this is a nature of chaos in big",
    "start": "3137390",
    "end": "3142820"
  },
  {
    "text": "systems so the key is don't lose data and make sure that your retry mechanism works and dead letter queues are the",
    "start": "3142820",
    "end": "3149450"
  },
  {
    "text": "easiest cheapest simplest solution you can imagine you just turn them on you",
    "start": "3149450",
    "end": "3155090"
  },
  {
    "text": "put a cloud watch monitor on it and the only the only one here that is a little",
    "start": "3155090",
    "end": "3161330"
  },
  {
    "text": "different SNS so SNS doesn't have a dead letter Q and SNS you know will will blow",
    "start": "3161330",
    "end": "3168980"
  },
  {
    "text": "will just destroy the messages after 13 hours so one thing you can do is you can have a lambda that watches and",
    "start": "3168980",
    "end": "3175220"
  },
  {
    "text": "enesta pick and if any if any of the elements in that get too old let's say",
    "start": "3175220",
    "end": "3180740"
  },
  {
    "text": "ten hours right without without being addressed you can send those to another",
    "start": "3180740",
    "end": "3187280"
  },
  {
    "text": "region you can send those directly to s3 you could just keep a rolling log of all the SNS topics in s3 and just lifecycle",
    "start": "3187280",
    "end": "3194210"
  },
  {
    "text": "those out delete them every 30 days or something so solve SNS differently but",
    "start": "3194210",
    "end": "3200570"
  },
  {
    "text": "for Landa sqs just use dead letter queues I hate to use the term but they're dead simple you just can't go",
    "start": "3200570",
    "end": "3206660"
  },
  {
    "text": "wrong with them I'll talk briefly about networking networking is very confusing for folks in general the answer is you",
    "start": "3206660",
    "end": "3215599"
  },
  {
    "start": "3208000",
    "end": "3238000"
  },
  {
    "text": "don't really want to use VP cen eyes if you can avoid it and there's three",
    "start": "3215599",
    "end": "3222410"
  },
  {
    "text": "reasons one is they are performance hogs so when you put an e an eye on your",
    "start": "3222410",
    "end": "3228560"
  },
  {
    "text": "lambda it slows down your cold start big time it's getting better but it will you",
    "start": "3228560",
    "end": "3235640"
  },
  {
    "text": "will take a performance hit so the way it works is we run lambda in our r.v BC",
    "start": "3235640",
    "end": "3241430"
  },
  {
    "start": "3238000",
    "end": "3398000"
  },
  {
    "text": "it's a managed service so when everyone says oh I put the lambda in my VP see no you didn't you put Annie and I in your",
    "start": "3241430",
    "end": "3248119"
  },
  {
    "text": "VP see like that lambda is still running",
    "start": "3248119",
    "end": "3254180"
  },
  {
    "text": "an RVP see and completely managed by us the eni is in your VP C and attached to",
    "start": "3254180",
    "end": "3259310"
  },
  {
    "text": "the lambda but the invocation for the lambda still has to go through the public lambda API it's the only way the",
    "start": "3259310",
    "end": "3265760"
  },
  {
    "text": "invocation can happen so in terms of security you actually haven't prevented the lambda from me executed from outside",
    "start": "3265760",
    "end": "3272720"
  },
  {
    "text": "your DPC right all you've done is you've given the lambda access into your V PC",
    "start": "3272720",
    "end": "3278359"
  },
  {
    "text": "to resources in the V PC so from a security perspective putting it putting",
    "start": "3278359",
    "end": "3284420"
  },
  {
    "text": "an e an eye on it doesn't actually improve the the attack surface at all it hasn't changed one iota may have it may",
    "start": "3284420",
    "end": "3290960"
  },
  {
    "text": "have gotten worse because now things inside can can hit that en I invocations",
    "start": "3290960",
    "end": "3299180"
  },
  {
    "text": "still come in by the public and even if using a private API gateway you still",
    "start": "3299180",
    "end": "3304849"
  },
  {
    "text": "won't be able to see you you still have to go through the public Internet to invoke the the lamda so do I",
    "start": "3304849",
    "end": "3312530"
  },
  {
    "text": "need to put it the answer is usually no there are two or three circumstances where you do so the first one is if you",
    "start": "3312530",
    "end": "3320330"
  },
  {
    "text": "need access to resources that are only available in the V PC like a RDS right you should put it in the V PC but then",
    "start": "3320330",
    "end": "3327530"
  },
  {
    "text": "the question is well do I put it in a public subnet private subnet where do I put it if it needs access to a public",
    "start": "3327530",
    "end": "3335000"
  },
  {
    "text": "internet and remember public internet includes API calls to AWS kms to get a",
    "start": "3335000",
    "end": "3340430"
  },
  {
    "text": "secret secrets manager parameters store right if yes then you need to have some",
    "start": "3340430",
    "end": "3346820"
  },
  {
    "text": "netting out to the Internet it doesn't have to be a public subnet but it has to be NAT at somehow if not if it only",
    "start": "3346820",
    "end": "3353660"
  },
  {
    "text": "needs to talk to RDS only needs to talk to things inside put in a private subnet the other scenario is if your company is",
    "start": "3353660",
    "end": "3360890"
  },
  {
    "text": "really concerned with exfiltration and in this scenario what you want to do is",
    "start": "3360890",
    "end": "3366050"
  },
  {
    "text": "you want to put it in behind whatever the the intruder detection deep packet",
    "start": "3366050",
    "end": "3372080"
  },
  {
    "text": "inspection appliances are so if your company really cares about exfiltration and has invested in deep packet",
    "start": "3372080",
    "end": "3378380"
  },
  {
    "text": "inspection intruder detection and and the security group says every outbound connection has to go through our",
    "start": "3378380",
    "end": "3384349"
  },
  {
    "text": "appliances then and then your lambda will also need assuming it needs to go",
    "start": "3384349",
    "end": "3390619"
  },
  {
    "text": "out if it only needs to talk internally don't put it in a V PC but if it needs to go out to the internet it has to go",
    "start": "3390619",
    "end": "3396500"
  },
  {
    "text": "in a V PC and the other thing about it is when you use a managed services like",
    "start": "3396500",
    "end": "3402140"
  },
  {
    "start": "3398000",
    "end": "3456000"
  },
  {
    "text": "lambda we manage high availability for you and we managed IT numbers IP addresses for you but if you put a start",
    "start": "3402140",
    "end": "3410869"
  },
  {
    "text": "using en is you're now marrying your design to our high availability so if you only give us one AZ and that AZ goes",
    "start": "3410869",
    "end": "3418520"
  },
  {
    "text": "down you can't launch the lambda because it only can the en eyes can only be launched in that AZ similarly if you",
    "start": "3418520",
    "end": "3425480"
  },
  {
    "text": "give us a slash 24 like home network cider range and we have 10,000 lambdas that need to spin up we're gonna run out",
    "start": "3425480",
    "end": "3431990"
  },
  {
    "text": "of IPS instantly and similarly if we're sharing it with something else that's",
    "start": "3431990",
    "end": "3438170"
  },
  {
    "text": "auto scaling we can nuke Landa can easily nuke kubernetes cluster and ECS cluster auto-scaling",
    "start": "3438170",
    "end": "3445220"
  },
  {
    "text": "ec2 group by sucking up every available IP in the network and remember they",
    "start": "3445220",
    "end": "3450530"
  },
  {
    "text": "don't release those right they don't release them for 5 15 minutes so the key",
    "start": "3450530",
    "end": "3457849"
  },
  {
    "start": "3456000",
    "end": "3480000"
  },
  {
    "text": "here is if you're gonna do it always use to availability zones give lambdas their own subnets Network people hate that and",
    "start": "3457849",
    "end": "3465349"
  },
  {
    "text": "give them big subnets because they have to be able to have IPs for all the concurrency that you need if they need",
    "start": "3465349",
    "end": "3473210"
  },
  {
    "text": "to talk to a resource on the internet you need in that and I know in eyes are pain we're working on it",
    "start": "3473210",
    "end": "3479170"
  },
  {
    "text": "stay tuned so the last bit is security you know anytime use an asterisk in a IM",
    "start": "3479170",
    "end": "3487460"
  },
  {
    "start": "3480000",
    "end": "3499000"
  },
  {
    "text": "policy you're making puppies cry so don't do that it's it's a it's an anti-pattern anyway but it really blows",
    "start": "3487460",
    "end": "3494480"
  },
  {
    "text": "up a privilege the lambda permissions",
    "start": "3494480",
    "end": "3500990"
  },
  {
    "start": "3499000",
    "end": "3509000"
  },
  {
    "text": "model is twofold that the top is the execution policies what can my lambda XS and the bottom is what can invoke my",
    "start": "3500990",
    "end": "3508010"
  },
  {
    "text": "lambda and there are big hairy I am policies I imagine most of you have",
    "start": "3508010",
    "end": "3513560"
  },
  {
    "start": "3509000",
    "end": "3525000"
  },
  {
    "text": "struggle with them been frustrated with them etc we've we've put some tooling in",
    "start": "3513560",
    "end": "3518960"
  },
  {
    "text": "to speed that up who uses Sam if you haven't used Sam you should you should look at Sam Sam takes a few lines of",
    "start": "3518960",
    "end": "3526700"
  },
  {
    "start": "3525000",
    "end": "3530000"
  },
  {
    "text": "yeah mole and turns it into many resources in the cloud and it'll take this policy for example on sqs policy",
    "start": "3526700",
    "end": "3533570"
  },
  {
    "start": "3530000",
    "end": "3536000"
  },
  {
    "text": "two lines of Sam code will blow up into a full-blown i.m policy and by the way",
    "start": "3533570",
    "end": "3539720"
  },
  {
    "start": "3536000",
    "end": "3554000"
  },
  {
    "text": "if you don't use cloud formation you don't use Sam you can still use these policies we publish them out on the Internet you can go out to the internet",
    "start": "3539720",
    "end": "3546800"
  },
  {
    "text": "and use them so if using terraform you can still benefit from that technology or at least the work that's gone into",
    "start": "3546800",
    "end": "3552280"
  },
  {
    "text": "assigning those so again the the key key",
    "start": "3552280",
    "end": "3558260"
  },
  {
    "start": "3554000",
    "end": "3600000"
  },
  {
    "text": "points here more memory more memory more memory use x-ray to understand what's",
    "start": "3558260",
    "end": "3563270"
  },
  {
    "text": "going on think about your execution model and not everything has to be an API minimize the",
    "start": "3563270",
    "end": "3569810"
  },
  {
    "text": "scope of your I am permissions and try not to use V PC if you can avoid it they're really",
    "start": "3569810",
    "end": "3575390"
  },
  {
    "text": "costly they eat up IP space and they take the hit performance so in closing there's two places you can",
    "start": "3575390",
    "end": "3583430"
  },
  {
    "text": "affect performance here the this is your Twitter shot you want to get a good",
    "start": "3583430",
    "end": "3589190"
  },
  {
    "text": "screenshot from this session here are the two places you can affect performance and pretty much beyond that",
    "start": "3589190",
    "end": "3597650"
  },
  {
    "text": "it's in our hands and then to where we're working all the time to improve it I think also if you haven't gone to the",
    "start": "3597650",
    "end": "3603980"
  },
  {
    "text": "server list site on AWS pay particular attention to the resources button up",
    "start": "3603980",
    "end": "3609020"
  },
  {
    "text": "there in the middle there's blog posts there's pear coding on Twitch there's a",
    "start": "3609020",
    "end": "3615080"
  },
  {
    "text": "ton of resources and particularly there's a serverless application repository where people just publish",
    "start": "3615080",
    "end": "3620690"
  },
  {
    "text": "their service applications and you can reuse them so you shouldn't have to code lambda functions from scratch I think I",
    "start": "3620690",
    "end": "3628820"
  },
  {
    "text": "won't cover these so thanks I will take questions up here we're about a minute",
    "start": "3628820",
    "end": "3635210"
  },
  {
    "text": "over I apologize but thank you very much for your time please do a survey",
    "start": "3635210",
    "end": "3643720"
  }
]