[
  {
    "text": "hello everyone and welcome to another video in this series where we discuss cloud databases offered by the aws cloud platform",
    "start": "480",
    "end": "7279"
  },
  {
    "text": "and we also look at some of the cool features offered by these databases my name is aditya samanth i'm a database",
    "start": "7279",
    "end": "13360"
  },
  {
    "text": "specialist solutions architect and i specialize in amazon aurora amazon rds",
    "start": "13360",
    "end": "18400"
  },
  {
    "text": "and various other relational database technologies the topic for today is amazon aurora and global databases",
    "start": "18400",
    "end": "24800"
  },
  {
    "text": "we will do a deep dive in the global database technology and see how it works and we will also see a couple of demos",
    "start": "24800",
    "end": "31599"
  },
  {
    "text": "so you can take advantage of the global database technology for designing multi-region disaster",
    "start": "31599",
    "end": "37440"
  },
  {
    "text": "recovery features for your workloads or improve the performance of your multi-region database workloads so",
    "start": "37440",
    "end": "43920"
  },
  {
    "text": "without further ado let's get started okay so let's go over",
    "start": "43920",
    "end": "49039"
  },
  {
    "text": "the agenda real quick we'll talk about the amazon or global database feature and we will do a",
    "start": "49039",
    "end": "55440"
  },
  {
    "text": "deep dive and see how the global database works we will look at some of the common use cases and then we will also look at the",
    "start": "55440",
    "end": "62399"
  },
  {
    "text": "right forwarding feature and then we'll see a few demos so before we dive into the global",
    "start": "62399",
    "end": "69280"
  },
  {
    "text": "database feature let's talk about amazon aurora database amazon aura is a database that we built",
    "start": "69280",
    "end": "74960"
  },
  {
    "text": "for the cloud what we mean by that is that amazon aura can take advantage of the abundance of",
    "start": "74960",
    "end": "80479"
  },
  {
    "text": "compute and storage and that is natively available on the cloud",
    "start": "80479",
    "end": "86560"
  },
  {
    "text": "so to take advantage of that we decoupled the compute and the storage subsystem of amazon aurora",
    "start": "86560",
    "end": "92159"
  },
  {
    "text": "so that they can scale independently and we built a multi-tenant log structured and a distributed",
    "start": "92159",
    "end": "98640"
  },
  {
    "text": "database storage system we replicate the database across hundreds of storage nodes",
    "start": "98640",
    "end": "104560"
  },
  {
    "text": "which makes the storage highly scalable and efficient in terms of performance",
    "start": "104560",
    "end": "109680"
  },
  {
    "text": "aurora can take advantage of other native services aws native services as well so for",
    "start": "109680",
    "end": "115759"
  },
  {
    "text": "example it can take advantage of ec2 vpc our s3 service our route 53 service",
    "start": "115759",
    "end": "123119"
  },
  {
    "text": "and more right out of the box so let's talk about amazon or our global",
    "start": "123119",
    "end": "129520"
  },
  {
    "text": "database feature amazon aura global database is a feature designed specifically for globally distributed",
    "start": "129520",
    "end": "136239"
  },
  {
    "text": "applications allowing a single amazon order database to span multiple aws regions so when we build",
    "start": "136239",
    "end": "143920"
  },
  {
    "text": "our global database or our our global infrastructure we have we create",
    "start": "143920",
    "end": "149040"
  },
  {
    "text": "multiple regions so i us has multiple regions um",
    "start": "149040",
    "end": "155200"
  },
  {
    "text": "africa has regions uh asia has multiple regions europe has regions uh and and more so essentially what this",
    "start": "155200",
    "end": "162800"
  },
  {
    "text": "feature lets you do is it lets you take your primary database in a region and it lets you replicate it across",
    "start": "162800",
    "end": "169760"
  },
  {
    "text": "multiple regions across the globe so um this actually give lets you",
    "start": "169760",
    "end": "177760"
  },
  {
    "text": "do various things for example if you wanted a solution where you wanted to have a",
    "start": "177760",
    "end": "183680"
  },
  {
    "text": "fast global failover to secondary region in case something happens to the primary region",
    "start": "183680",
    "end": "189200"
  },
  {
    "text": "performance issues availability issues or anything else you can take advantage of global",
    "start": "189200",
    "end": "194239"
  },
  {
    "text": "databases to do just that so we are replicating the global database under the covers",
    "start": "194239",
    "end": "200159"
  },
  {
    "text": "using a physical replication technology which lets you um recover the database in a secondary",
    "start": "200159",
    "end": "207920"
  },
  {
    "text": "region literally within minutes and our tests have shown that the rep the recovery of the secondary region",
    "start": "207920",
    "end": "213360"
  },
  {
    "text": "database is usually usually under a minute so if you have a use case like that you can take",
    "start": "213360",
    "end": "218879"
  },
  {
    "text": "advantage of the global database feature a second use case is fast cross region",
    "start": "218879",
    "end": "224400"
  },
  {
    "text": "migration so if you wanted to migrate a database from one region to the other a typical use case would be you would",
    "start": "224400",
    "end": "230560"
  },
  {
    "text": "take a backup restore that backup then you will use some sort of a logical form of replication for example binary",
    "start": "230560",
    "end": "236640"
  },
  {
    "text": "logs in terms of mysql and then you will replicate and",
    "start": "236640",
    "end": "241920"
  },
  {
    "text": "until the data secondary database uh gets fully synced um and then you will use that secondary",
    "start": "241920",
    "end": "247920"
  },
  {
    "text": "database for um you know applications that are in that region",
    "start": "247920",
    "end": "253439"
  },
  {
    "text": "because we are already replicating using a physical technology on our global databases you can simply",
    "start": "253439",
    "end": "261519"
  },
  {
    "text": "use the secondary database promote it and use that for your applications in the secondary",
    "start": "261519",
    "end": "267600"
  },
  {
    "text": "region so fast cross region migration is also a very",
    "start": "267600",
    "end": "272960"
  },
  {
    "text": "common use case for global databases the replication is happening on the",
    "start": "272960",
    "end": "278320"
  },
  {
    "text": "physical level and we will talk about this technology in a couple of minutes so the lag",
    "start": "278320",
    "end": "283600"
  },
  {
    "text": "across regions is very low usually um we're talking few seconds or or even you know less",
    "start": "283600",
    "end": "289759"
  },
  {
    "text": "than once less than a second um because the replication is happening on the storage level and it's physical",
    "start": "289759",
    "end": "297919"
  },
  {
    "text": "there is little to no performance impact on your database and we'll see in a few slides how this replication actually works",
    "start": "297919",
    "end": "304479"
  },
  {
    "text": "um since rr is available in mysql and postgres compatibly compatibility versions for",
    "start": "304479",
    "end": "311840"
  },
  {
    "text": "mysql global database is available for both 5.6 and 5.7 engines for postgres it is",
    "start": "311840",
    "end": "317919"
  },
  {
    "text": "available for engines that have compatibility 10.11 and 11.7",
    "start": "317919",
    "end": "325039"
  },
  {
    "text": "and above so here is a visual representation of",
    "start": "325039",
    "end": "331440"
  },
  {
    "text": "how a global database topology works so we have a global database cluster created here",
    "start": "331440",
    "end": "337520"
  },
  {
    "text": "in the middle of your screen you would see that the primary cluster is us east in this cluster we",
    "start": "337520",
    "end": "344720"
  },
  {
    "text": "have a reader and a writer node just keep in mind that only your primary",
    "start": "344720",
    "end": "349840"
  },
  {
    "text": "cluster lets you have a writer node all other clusters all of their secondary clusters",
    "start": "349840",
    "end": "356080"
  },
  {
    "text": "can only have a reader node so your primary cluster has a reader and",
    "start": "356080",
    "end": "362160"
  },
  {
    "text": "writer in this topology u.s west europe west and asia pacific southeast are all",
    "start": "362160",
    "end": "369919"
  },
  {
    "text": "secondary clusters and they're all read-only",
    "start": "369919",
    "end": "374319"
  },
  {
    "text": "so let's see how global database actually works so on the left hand side",
    "start": "375360",
    "end": "382240"
  },
  {
    "text": "of this slide you have your primary region so this region one is the primary region",
    "start": "382240",
    "end": "388720"
  },
  {
    "text": "as you can see it has two readers and a writer this database storage is",
    "start": "388720",
    "end": "394080"
  },
  {
    "text": "decoupled and all the changes are being sent to this database storage and then in the primary region we have a",
    "start": "394080",
    "end": "401600"
  },
  {
    "text": "a replication fleet an outbound replication fleet which is basically standing by to receive all the changes that are coming",
    "start": "401600",
    "end": "408400"
  },
  {
    "text": "from the primary region and it takes all of these changes and it sends it over or forwards the door to",
    "start": "408400",
    "end": "414400"
  },
  {
    "text": "the secondary region which has an inbound replication fleet",
    "start": "414400",
    "end": "419680"
  },
  {
    "text": "so essentially what we're showing here is that because your database storage is",
    "start": "419680",
    "end": "425520"
  },
  {
    "text": "decoupled and all the changes are being replayed on the storage level we have the ability to basically take",
    "start": "425520",
    "end": "431759"
  },
  {
    "text": "all of these changes and send it to this replication fleet which it automatically sends it to the",
    "start": "431759",
    "end": "437759"
  },
  {
    "text": "secondary replication fleet in the secondary region and then it gets replayed on the database storage layer",
    "start": "437759",
    "end": "444080"
  },
  {
    "text": "of the of the secondary cluster and all of this is happening under the covers it's all physical replication you don't",
    "start": "444080",
    "end": "450160"
  },
  {
    "text": "have to you know take care of any sort of logical replication here now because this is all physical",
    "start": "450160",
    "end": "456319"
  },
  {
    "text": "replication the remote reader lag is very very low",
    "start": "456319",
    "end": "461360"
  },
  {
    "text": "typically our tests have shown that even if you set up a global database cluster across",
    "start": "461360",
    "end": "469759"
  },
  {
    "text": "regions in a country like u.s east to u.s west we have seen less than one second reader",
    "start": "469759",
    "end": "476479"
  },
  {
    "text": "lag across across multiple regions uh the throughput on both sides is all is pretty high it's",
    "start": "476479",
    "end": "484720"
  },
  {
    "text": "essentially you know what you come to expect of an aurora database",
    "start": "484720",
    "end": "490160"
  },
  {
    "text": "because the replication is happening on the storage layer it's all physical um the the the reader and writer nodes",
    "start": "490160",
    "end": "497120"
  },
  {
    "text": "don't have to do any work right so they continue to do the same work they were doing before and that's why there's no additional uh",
    "start": "497120",
    "end": "504000"
  },
  {
    "text": "impact of doing the replication and you continue to get the high throughput that you come to expect",
    "start": "504000",
    "end": "510400"
  },
  {
    "text": "in our test we have seen that if you were to promote the secondary database to uh to a primary the recovery is",
    "start": "510560",
    "end": "518640"
  },
  {
    "text": "very quick so we have seen in our test that it's the recovery time is usually",
    "start": "518640",
    "end": "523680"
  },
  {
    "text": "less than a minute so here's a quick um comparison of a",
    "start": "523680",
    "end": "530800"
  },
  {
    "text": "logical replication topology versus the physical replication topology that we use so um on the left hand side you see the",
    "start": "530800",
    "end": "538160"
  },
  {
    "text": "logical replication and what we have done in this test is we",
    "start": "538160",
    "end": "543440"
  },
  {
    "text": "gradually kept increasing queries per second that we're sending to uh to the primary and we saw that when",
    "start": "543440",
    "end": "550480"
  },
  {
    "text": "we're using the logic and replication technology um roughly after 30 to 35 000 queries",
    "start": "550480",
    "end": "557600"
  },
  {
    "text": "per second the lag um spiked to hundreds of seconds essentially became",
    "start": "557600",
    "end": "565200"
  },
  {
    "text": "uh kind of unsustainable after that um on the physical replication technology that we use we kept on",
    "start": "565200",
    "end": "571360"
  },
  {
    "text": "increasing the queries per second gradually and we saw that we were able to get all the way up to 200 000 queries per second",
    "start": "571360",
    "end": "578320"
  },
  {
    "text": "and the replication lag stayed pretty low usually you know roughly under a second",
    "start": "578320",
    "end": "584720"
  },
  {
    "text": "so you can clearly see that the physical replication technology scales much better and is highly",
    "start": "584720",
    "end": "589760"
  },
  {
    "text": "performant so we were looking at our global",
    "start": "589760",
    "end": "596160"
  },
  {
    "text": "database where you have readers and read replicas in the secondary region so it benefits greatly",
    "start": "596160",
    "end": "601600"
  },
  {
    "text": "if you have applications in the secondary region that need to uh",
    "start": "601600",
    "end": "606720"
  },
  {
    "text": "which need to basically read the data so that the data is local and they get really good performance for your",
    "start": "606720",
    "end": "613519"
  },
  {
    "text": "application what if the application also wanted to do writes so you can take advantage of our",
    "start": "613519",
    "end": "620480"
  },
  {
    "text": "right forwarding feature which was released in a recently so what this feature lets you do is not",
    "start": "620480",
    "end": "627040"
  },
  {
    "text": "only can you read from the secondary but you can also use the same endpoints to do do the rights",
    "start": "627040",
    "end": "633120"
  },
  {
    "text": "um so in this slide it's essentially the same same uh picture from the last slide that",
    "start": "633120",
    "end": "639360"
  },
  {
    "text": "we saw or you know the picture that we saw a couple of slides ago where we looked at the topology",
    "start": "639360",
    "end": "645040"
  },
  {
    "text": "but here the application also has the ability uh in the secondary",
    "start": "645040",
    "end": "650800"
  },
  {
    "text": "region to do the rights and the these rights essentially get forwarded to the primary region they get",
    "start": "650800",
    "end": "658079"
  },
  {
    "text": "committed on the primary region and then they get replicated across all the secondary regions and all of this happens under the covers",
    "start": "658079",
    "end": "664800"
  },
  {
    "text": "so essentially this helps you in terms of managing the endpoints so your application doesn't have to have",
    "start": "664800",
    "end": "670800"
  },
  {
    "text": "multiple endpoints to manage for reading locally and then writing remotely it can all do",
    "start": "670800",
    "end": "676800"
  },
  {
    "text": "this with while using the same endpoints and then we do the redirection of the writes",
    "start": "676800",
    "end": "682079"
  },
  {
    "text": "under the covers automatically so let's see how the right forwarding",
    "start": "682079",
    "end": "688160"
  },
  {
    "text": "feature works um so in this case on the middle of your slide",
    "start": "688160",
    "end": "693279"
  },
  {
    "text": "uh slide here or in the middle of your screen here you have your primary region um you have your reader and writer notes",
    "start": "693279",
    "end": "700079"
  },
  {
    "text": "you have your decoupled storage and you have your outbound replication fleet on the left hand side and you have your",
    "start": "700079",
    "end": "706240"
  },
  {
    "text": "secondary region in oregon and you have your storage and the reader knows and it ha you have your inbound",
    "start": "706240",
    "end": "712160"
  },
  {
    "text": "replication fleet now what happens is let's say in the secondary region your application b",
    "start": "712160",
    "end": "717760"
  },
  {
    "text": "tries to make some rights to the secondary region cluster",
    "start": "717760",
    "end": "724320"
  },
  {
    "text": "so the app writes to the read replica and the secondary region what happens is the secondary region",
    "start": "724320",
    "end": "731519"
  },
  {
    "text": "read replica is essentially going to um forward on that right to the primary region",
    "start": "731519",
    "end": "737440"
  },
  {
    "text": "uh the primary region is going to acknowledge and commit that transaction and then it's going to replicate uh the",
    "start": "737440",
    "end": "744399"
  },
  {
    "text": "update to all the other regions including the oregon region um and also the uh the virginia and",
    "start": "744399",
    "end": "750800"
  },
  {
    "text": "ireland region that you see on the right hand side of your slide all of these are secondary region",
    "start": "750800",
    "end": "756399"
  },
  {
    "text": "so all of this happens automatically under the covers it's all physical replication you don't have to make any",
    "start": "756399",
    "end": "761600"
  },
  {
    "text": "application changes for this to work so a few more things on uh right",
    "start": "761600",
    "end": "768160"
  },
  {
    "text": "forwarding feature if you plan to use it is that this feature needs to be enabled on the secondary cluster level",
    "start": "768160",
    "end": "774399"
  },
  {
    "text": "and you can do this while you're creating your global cluster so you can do that initially or",
    "start": "774399",
    "end": "780240"
  },
  {
    "text": "you can also do that after the fact so if um if you decide that you want to use",
    "start": "780240",
    "end": "785519"
  },
  {
    "text": "the secondary region for right forwarding you can enable that feature anytime now to use this",
    "start": "785519",
    "end": "792399"
  },
  {
    "text": "capability in addition to just enabling the feature you also have to use the session level",
    "start": "792399",
    "end": "797600"
  },
  {
    "text": "parameter aurora replica read consistency and this uh parameter has multiple",
    "start": "797600",
    "end": "804160"
  },
  {
    "text": "values you can set it to eventual session and global but you have to set this parameter to one of these values to",
    "start": "804160",
    "end": "810880"
  },
  {
    "text": "actually do the rights on the secondary region so let's review what these individual values mean so if you set",
    "start": "810880",
    "end": "818079"
  },
  {
    "text": "um this value to eventual queries that are in a secondary aws",
    "start": "818079",
    "end": "824560"
  },
  {
    "text": "region that are using right forwarding and then the the parameter is set to",
    "start": "824560",
    "end": "830480"
  },
  {
    "text": "eventual um the data that these queries are seeing may",
    "start": "830480",
    "end": "836480"
  },
  {
    "text": "be slightly stale due to replication lag so the result of write operation in the same session",
    "start": "836480",
    "end": "842399"
  },
  {
    "text": "isn't going to be visible immediately it's going to be visible after the write operation is performed",
    "start": "842399",
    "end": "848480"
  },
  {
    "text": "on the primary and then it gets replicated to the secondary so there is going to be a little bit of lag there",
    "start": "848480",
    "end": "855120"
  },
  {
    "text": "now the going a step higher you can set this value to session",
    "start": "855120",
    "end": "861760"
  },
  {
    "text": "if you set this value to session or the parameter value to session then all queries in the secondary aws region",
    "start": "861760",
    "end": "868480"
  },
  {
    "text": "that uses the right forwarding can see the results of all the changes made in that session",
    "start": "868480",
    "end": "874959"
  },
  {
    "text": "immediately regardless of whether the transaction is committed or not if necessary the query",
    "start": "874959",
    "end": "881360"
  },
  {
    "text": "is going to wait for the results to be forwarded of the forwarded operations um to get replicated back so there may be some lag",
    "start": "881360",
    "end": "888800"
  },
  {
    "text": "but the the idea is that you're going to see the changes that were made in that session now if",
    "start": "888800",
    "end": "895279"
  },
  {
    "text": "you set this value to global the session is going to see all the",
    "start": "895279",
    "end": "901600"
  },
  {
    "text": "committed changes um that were done in that session and it's going to see all the committed",
    "start": "901600",
    "end": "907120"
  },
  {
    "text": "changes that were done in the primary region and also in other secondary regions so in this case the",
    "start": "907120",
    "end": "913199"
  },
  {
    "text": "delay for the for the queries might be a little bit higher because it's basically waiting for all those changes to become",
    "start": "913199",
    "end": "919519"
  },
  {
    "text": "available um and and getting to get replicated in the secondary region",
    "start": "919519",
    "end": "924720"
  },
  {
    "text": "but you just need to be aware of what these values mean so you can set them appropriately and so",
    "start": "924720",
    "end": "930800"
  },
  {
    "text": "that you can see the expected results in terms of what gets seen by your application",
    "start": "930800",
    "end": "938639"
  },
  {
    "text": "um in addition to this you also have configurable max forwarded concurrent sessions and session timeout",
    "start": "938639",
    "end": "944560"
  },
  {
    "text": "um so you can set a value um on the primary cluster where you say that the",
    "start": "944560",
    "end": "950880"
  },
  {
    "text": "maximum number of forward concurrent sessions are going to be a percentage of maximum",
    "start": "950880",
    "end": "956000"
  },
  {
    "text": "number of connections um on the primary so this is just to make sure that your",
    "start": "956000",
    "end": "961680"
  },
  {
    "text": "primary replica or your primary uh instance doesn't get",
    "start": "961680",
    "end": "967040"
  },
  {
    "text": "overwhelmed by all these rights that are getting forwarded from the secondary instances so you can say",
    "start": "967040",
    "end": "972399"
  },
  {
    "text": "well you know i just want to use a percentile let's say 20 of maximum available connections on the",
    "start": "972399",
    "end": "979440"
  },
  {
    "text": "primary um to do the the to accept the rights that are coming from the secondaries",
    "start": "979440",
    "end": "986240"
  },
  {
    "text": "um in addition to this you can also set session timeouts so if there are right sessions that are coming in from",
    "start": "986240",
    "end": "992079"
  },
  {
    "text": "the secondary reason regions um you can say that after a certain time that these sessions haven't",
    "start": "992079",
    "end": "997519"
  },
  {
    "text": "done any sort of work um just terminate them so if there are any orphan connections that are coming from the",
    "start": "997519",
    "end": "1004079"
  },
  {
    "text": "secondary regions um they're going to get terminated after that idle timeout you need to be aware of",
    "start": "1004079",
    "end": "1011360"
  },
  {
    "text": "certain limitations of the right forwarding too so",
    "start": "1011360",
    "end": "1017199"
  },
  {
    "text": "there are things that you can do with right forwarding such as data definition language so like create",
    "start": "1017199",
    "end": "1022720"
  },
  {
    "text": "table alter table create index those kind of commands are not going to work you can't use",
    "start": "1022720",
    "end": "1028240"
  },
  {
    "text": "log table and flush table statements on the secondary clusters with right forwarding turned on within",
    "start": "1028240",
    "end": "1034240"
  },
  {
    "text": "that session you can't do things like xa transactions",
    "start": "1034240",
    "end": "1039839"
  },
  {
    "text": "um you can't run load data in file um or load xml local in file kind of",
    "start": "1039839",
    "end": "1045760"
  },
  {
    "text": "commands uh on the cluster that has right forwarding enabled um you can't run save point and roll back",
    "start": "1045760",
    "end": "1052240"
  },
  {
    "text": "that save point command so just you know take a look at our documentation for a complete list this list will change um from time to",
    "start": "1052240",
    "end": "1059919"
  },
  {
    "text": "time as as we add new features um so just make sure that you you're aware of some of these",
    "start": "1059919",
    "end": "1065039"
  },
  {
    "text": "limitations your application doesn't see some sort of unexpected behavior",
    "start": "1065039",
    "end": "1071120"
  },
  {
    "text": "okay so that's all the information that i wanted to cover in terms of uh global databases feature",
    "start": "1071200",
    "end": "1078640"
  },
  {
    "text": "so let's go ahead and look at some demos",
    "start": "1078640",
    "end": "1083679"
  },
  {
    "text": "okay so let's start by creating a brand new global database cluster if you already",
    "start": "1086960",
    "end": "1093760"
  },
  {
    "text": "have an aurora cluster you can also do an in-place upgrade by adding a new region",
    "start": "1093760",
    "end": "1100400"
  },
  {
    "text": "um in this demonstration we're just going to create a brand new cluster so um i'm already in the amazon rds",
    "start": "1100400",
    "end": "1108080"
  },
  {
    "text": "console i'm going to go ahead and click on create database",
    "start": "1108080",
    "end": "1113039"
  },
  {
    "text": "i'm going to select amazon aurora leave it at mysql compatibility",
    "start": "1113440",
    "end": "1118720"
  },
  {
    "text": "and choose the latest mysql version which is mysql 572.09.0",
    "start": "1118720",
    "end": "1126640"
  },
  {
    "text": "on the right-hand side you will see it calls out exactly which versions are",
    "start": "1126640",
    "end": "1131840"
  },
  {
    "text": "compatible with global database and 2.09.0 is so we're good there we're not going to",
    "start": "1131840",
    "end": "1138000"
  },
  {
    "text": "make too many changes i'm going to change the database cluster identifier to",
    "start": "1138000",
    "end": "1143760"
  },
  {
    "text": "global region 1. just so that we can",
    "start": "1143760",
    "end": "1150880"
  },
  {
    "text": "identify later which region is primary and which region is secondary now before we move ahead i just wanted",
    "start": "1150880",
    "end": "1158240"
  },
  {
    "text": "to call out something that is very important that the global database spans multiple",
    "start": "1158240",
    "end": "1163760"
  },
  {
    "text": "regions so it's important that when you're creating the primary region you are in appropriate regions so here",
    "start": "1163760",
    "end": "1170000"
  },
  {
    "text": "if you see on the top right hand corner i am in the north virginia region so when you're running this wizard of",
    "start": "1170000",
    "end": "1176880"
  },
  {
    "text": "the database creation make sure that you're in appropriate region when we add the other region to",
    "start": "1176880",
    "end": "1184720"
  },
  {
    "text": "this global cluster we will make sure that we are calling out the appropriate region that is going to be our secondary",
    "start": "1184720",
    "end": "1190240"
  },
  {
    "text": "so in this case our primary is us east one which is north virginia",
    "start": "1190240",
    "end": "1195760"
  },
  {
    "text": "right here as you can see so that's what i'm calling out let's put in some password here",
    "start": "1195760",
    "end": "1207840"
  },
  {
    "text": "uh and i'm not gonna spend too much time talking through these options we have several videos on creating",
    "start": "1208000",
    "end": "1214320"
  },
  {
    "text": "instances and documentation uh feel free to refer that but right now i'm just",
    "start": "1214320",
    "end": "1219600"
  },
  {
    "text": "leaving everything as uh defaults and make sure we provide an initial",
    "start": "1219600",
    "end": "1227039"
  },
  {
    "text": "database name i'm choosing db1 which is the database we'll use for the",
    "start": "1227039",
    "end": "1232840"
  },
  {
    "text": "demos in in a few minutes and we are going to scroll down all the way to the",
    "start": "1232840",
    "end": "1239520"
  },
  {
    "text": "bottom we are going to remove enable deletion protection",
    "start": "1239520",
    "end": "1244880"
  },
  {
    "text": "you can leave it on it just makes a deleting database later after the labs are complete or the",
    "start": "1244880",
    "end": "1250320"
  },
  {
    "text": "demo is complete so that's why i'm disabling it you you can leave it on if you want and then click on create",
    "start": "1250320",
    "end": "1257440"
  },
  {
    "text": "database okay so it took several minutes for this cluster to",
    "start": "1257440",
    "end": "1263200"
  },
  {
    "text": "be created but now i'm back in the database databases dashboard in my aws console",
    "start": "1263200",
    "end": "1271360"
  },
  {
    "text": "and as you can see the cluster is now ready so let's go ahead and click on that",
    "start": "1271360",
    "end": "1277840"
  },
  {
    "text": "this cluster has a reader and a writer and this uh primary cluster is now in the north",
    "start": "1278159",
    "end": "1283600"
  },
  {
    "text": "virginia or us east one region so what we're going to do is we're going to go ahead and click on the actions menu",
    "start": "1283600",
    "end": "1291360"
  },
  {
    "text": "here and then we're going to click on add region we are going to pick a name for our",
    "start": "1291360",
    "end": "1297679"
  },
  {
    "text": "database so i'm going to use global cluster you can choose whatever",
    "start": "1297679",
    "end": "1303520"
  },
  {
    "text": "you want and then we're going to choose our secondary region in this case i'm going to",
    "start": "1303520",
    "end": "1308720"
  },
  {
    "text": "choose u.s west one or california",
    "start": "1308720",
    "end": "1314080"
  },
  {
    "text": "i'm going to leave most of these uh at their defaults um just choose the appropriate vpc",
    "start": "1314320",
    "end": "1321840"
  },
  {
    "text": "and um i'm also going to enable read replica",
    "start": "1321840",
    "end": "1328000"
  },
  {
    "text": "right forwarding as we discussed this feature during the initial",
    "start": "1328000",
    "end": "1333280"
  },
  {
    "text": "slides that we looked at so i'm going to enable read replica right forwarding and we'll do a couple of demos on this too",
    "start": "1333280",
    "end": "1341679"
  },
  {
    "text": "i'm not going to change any additional configuration except for the name so i'm going to change the",
    "start": "1341760",
    "end": "1347760"
  },
  {
    "text": "name of the secondary cluster and i'm going to call it global region 2",
    "start": "1347760",
    "end": "1356080"
  },
  {
    "text": "and then i'm going to call the instance in the secondary region global",
    "start": "1356080",
    "end": "1361200"
  },
  {
    "text": "region two instance one so we're just following the same nomenclature as the",
    "start": "1361200",
    "end": "1367280"
  },
  {
    "text": "primary region i'm going to leave everything else on at its default values",
    "start": "1367280",
    "end": "1372960"
  },
  {
    "text": "and then i'm going to click on add region",
    "start": "1372960",
    "end": "1376640"
  },
  {
    "text": "now this is going to take several minutes and after it's done it would add the",
    "start": "1379520",
    "end": "1386960"
  },
  {
    "text": "secondary cluster so as you can see the secondary cluster goes into the creating phase",
    "start": "1386960",
    "end": "1392720"
  },
  {
    "text": "and then in a few minutes it will be available",
    "start": "1392720",
    "end": "1397120"
  },
  {
    "text": "so the global database cluster is now created um and we have our primary and secondary",
    "start": "1400159",
    "end": "1407919"
  },
  {
    "text": "region so before we do any more demos let's take a look at the topology here",
    "start": "1407919",
    "end": "1414240"
  },
  {
    "text": "so of course you start with your global global cluster which is the container for your both",
    "start": "1414240",
    "end": "1419440"
  },
  {
    "text": "primary and secondary regions then you have your primary region we have called it global region one",
    "start": "1419440",
    "end": "1424960"
  },
  {
    "text": "um if as you can see it's in us east one and then you have your secondary region which is global region two",
    "start": "1424960",
    "end": "1432400"
  },
  {
    "text": "and it's in u.s west one so um let's take a look at the",
    "start": "1432400",
    "end": "1438720"
  },
  {
    "text": "read and write endpoint uh keep in mind as of today there is no global end point",
    "start": "1438720",
    "end": "1445600"
  },
  {
    "text": "right so uh when i mean there is no global endpoint as in there is not no single endpoint that can",
    "start": "1445600",
    "end": "1451279"
  },
  {
    "text": "seamlessly uh re-distribute your reads or rights to um either regions you have to still use",
    "start": "1451279",
    "end": "1459039"
  },
  {
    "text": "the the cluster and reader endpoints in individual regions so if i go to the primary region",
    "start": "1459039",
    "end": "1466080"
  },
  {
    "text": "now if you notice when i click on a region it opens up a separate window this is to",
    "start": "1466080",
    "end": "1472159"
  },
  {
    "text": "make sure that it takes you to the appropriate region console so when i click on the primary region if",
    "start": "1472159",
    "end": "1478960"
  },
  {
    "text": "you scroll down to the connectivity and security area you're going to see the global region 1",
    "start": "1478960",
    "end": "1484080"
  },
  {
    "text": "which is the cluster endpoint and then this uh second one which is the reader endpoint this is similar",
    "start": "1484080",
    "end": "1492000"
  },
  {
    "text": "um to your regular database cluster or regular regular uh aurora cluster let's um look at the",
    "start": "1492000",
    "end": "1499039"
  },
  {
    "text": "second region again when i click on the second region",
    "start": "1499039",
    "end": "1504080"
  },
  {
    "text": "it opens up a new tab this time you would see that it has opened up a tab in u.s west one region north caro",
    "start": "1504080",
    "end": "1512080"
  },
  {
    "text": "california again similarly the topologies that we have a cluster",
    "start": "1512080",
    "end": "1518000"
  },
  {
    "text": "endpoint and then we have a reader endpoint so um in this case though",
    "start": "1518000",
    "end": "1523200"
  },
  {
    "text": "the the clustering point or or the endpoint that always points to the writer is inactive so the",
    "start": "1523200",
    "end": "1530880"
  },
  {
    "text": "reason why it's inactive is because this is still a read cluster right so if there is a situation where",
    "start": "1530880",
    "end": "1539440"
  },
  {
    "text": "you had to basically promote your secondary region in that situation this",
    "start": "1539440",
    "end": "1546559"
  },
  {
    "text": "inactive writer endpoint will become active and you would be able to use this",
    "start": "1546559",
    "end": "1553039"
  },
  {
    "text": "replica as an individual cluster but that's not what we're gonna do right now",
    "start": "1553039",
    "end": "1560080"
  },
  {
    "text": "okay so for the first demo we're gonna see how to connect to the database cluster",
    "start": "1560720",
    "end": "1567520"
  },
  {
    "text": "from the secondary region and then we're going to create a table in the primary",
    "start": "1567520",
    "end": "1572960"
  },
  {
    "text": "region insert some data and then we're going to query that data from the secondary",
    "start": "1572960",
    "end": "1578000"
  },
  {
    "text": "region and see what kind of latencies we get so for demonstration purpose i have two ec2 instances the instance on",
    "start": "1578000",
    "end": "1586080"
  },
  {
    "text": "the left hand side is in the primary region which is u.s east one or virginia",
    "start": "1586080",
    "end": "1591360"
  },
  {
    "text": "and then the instance on the right hand side is in us west 2 or california which is our secondary",
    "start": "1591360",
    "end": "1599679"
  },
  {
    "text": "cluster for our global cluster our secondary region for our global cluster so let's get started i'm going to try to",
    "start": "1599679",
    "end": "1607200"
  },
  {
    "text": "connect to the primary region so this is my mysql command",
    "start": "1607200",
    "end": "1612400"
  },
  {
    "text": "um this is the name of my server which is global region one cluster so let's verify um the endpoint that i'm",
    "start": "1612400",
    "end": "1619200"
  },
  {
    "text": "connecting to is right so if you see i'm uh this is my global region one which is my primary region",
    "start": "1619200",
    "end": "1625120"
  },
  {
    "text": "and this is my endpoint name so that's the end point i'm using so let's go back here and then connect",
    "start": "1625120",
    "end": "1631840"
  },
  {
    "text": "to it and i'm inside the database server now let's go ahead and create a",
    "start": "1631840",
    "end": "1637360"
  },
  {
    "text": "simple table so this is a simple table that has um you",
    "start": "1637360",
    "end": "1643760"
  },
  {
    "text": "know an identity column or sorry an integer column um and a timestamp so",
    "start": "1643760",
    "end": "1650799"
  },
  {
    "text": "that's all we really need here so i'm going to exit out of a mysql command now what we're going",
    "start": "1650799",
    "end": "1657200"
  },
  {
    "text": "to do is we're going to basically run a python command on this secondary region that runs in a loop and tries to",
    "start": "1657200",
    "end": "1664159"
  },
  {
    "text": "discover new values as they get inserted in this table so let me run that command",
    "start": "1664159",
    "end": "1670720"
  },
  {
    "text": "from the secondary region",
    "start": "1670720",
    "end": "1673760"
  },
  {
    "text": "all right so the this is a python script that i've written it's not very complicated script all it's doing is",
    "start": "1676480",
    "end": "1682559"
  },
  {
    "text": "connecting to the end point and then just querying the table in a loop so here's my endpoint which is global",
    "start": "1682559",
    "end": "1689600"
  },
  {
    "text": "region 2 cluster and if you see here in its name you see ro which is uh which means it's a read replica so if",
    "start": "1689600",
    "end": "1697679"
  },
  {
    "text": "i go to my secondary region you're going to see that this",
    "start": "1697679",
    "end": "1703120"
  },
  {
    "text": "is the endpoint that i'm using right so we looked at our topology before so we are going to be connecting to our",
    "start": "1703120",
    "end": "1710159"
  },
  {
    "text": "secondary regions um reader endpoint so let's go back to our command line and",
    "start": "1710159",
    "end": "1717600"
  },
  {
    "text": "execute this command so this command keeps running it's basically just taking snapshots and trying to discover new values",
    "start": "1717600",
    "end": "1724640"
  },
  {
    "text": "so let's go ahead and try to insert some values into this table from the primary",
    "start": "1724640",
    "end": "1731120"
  },
  {
    "text": "alright so i'm going to run this command from the primary which is inserting a bunch of values",
    "start": "1731120",
    "end": "1736320"
  },
  {
    "text": "in the table as you can see on the right hand side as i start inserting these values you start we start seeing these inserted",
    "start": "1736320",
    "end": "1742799"
  },
  {
    "text": "values almost immediately so i'm going to exit out of both of these commands and let's see what kind of latency we",
    "start": "1742799",
    "end": "1749200"
  },
  {
    "text": "are seeing here so if i see i inserted this value on the left hand side at",
    "start": "1749200",
    "end": "1755760"
  },
  {
    "text": "roughly you know this is utc time so um you know 7 51",
    "start": "1755760",
    "end": "1762240"
  },
  {
    "text": "and 30 seconds so let's go ahead and try to figure out when we saw this value first on the secondary region so again",
    "start": "1762240",
    "end": "1770240"
  },
  {
    "text": "you can see that the latency is um against 751",
    "start": "1770240",
    "end": "1775919"
  },
  {
    "text": "and then 360 milliseconds after so the latency is really really low here so we're talking about",
    "start": "1775919",
    "end": "1782399"
  },
  {
    "text": "you know just maybe 100 millisecond latency let's let's look at another value so let's look at six and let's see when six",
    "start": "1782399",
    "end": "1789760"
  },
  {
    "text": "was discovered first um so here's six and again",
    "start": "1789760",
    "end": "1795600"
  },
  {
    "text": "seven fifty one thirty five uh seven fifty one thirty six um this time the",
    "start": "1795600",
    "end": "1801760"
  },
  {
    "text": "latency is about one second um so you know again this is not a super scientific method right so",
    "start": "1801760",
    "end": "1808000"
  },
  {
    "text": "i'm just trying to discover the value from the secondary region by just running a select query on it and i'm doing some",
    "start": "1808000",
    "end": "1816159"
  },
  {
    "text": "ordering and things like that so this is just for demonstration purposes only all we're trying to show you is",
    "start": "1816159",
    "end": "1822159"
  },
  {
    "text": "that replication is pretty quick and here it's few hundred milliseconds um even though we're inserting a little",
    "start": "1822159",
    "end": "1828159"
  },
  {
    "text": "bit of data but the the point is that even if you're inserting um you know just a regular ol tp kind of data this",
    "start": "1828159",
    "end": "1835600"
  },
  {
    "text": "process scales really well because the replication is going to be physical replication",
    "start": "1835600",
    "end": "1841919"
  },
  {
    "text": "all right so let's try to do something else let's try to connect to the secondary instance",
    "start": "1841919",
    "end": "1848159"
  },
  {
    "text": "and see if we can insert some data so i'm going to put my primary region away for a second",
    "start": "1848159",
    "end": "1853279"
  },
  {
    "text": "and let's clear out of this so my secondary region is",
    "start": "1853279",
    "end": "1859919"
  },
  {
    "text": "a read-only instance right so this is a reader instance right here as you can see this is a reader but if",
    "start": "1859919",
    "end": "1867200"
  },
  {
    "text": "you remember we also enabled read replica right forwarding right an idea here is that we should be",
    "start": "1867200",
    "end": "1874399"
  },
  {
    "text": "able to insert data even though we are inserting data from the secondary um this data should you know the the um dml",
    "start": "1874399",
    "end": "1882799"
  },
  {
    "text": "commands basically get um sent forward to the primary so let's see if we can do that so for",
    "start": "1882799",
    "end": "1890399"
  },
  {
    "text": "for that what i'm going to do is i'm going to try to connect to the secondary region and then try to",
    "start": "1890399",
    "end": "1896399"
  },
  {
    "text": "insert data so let me execute this command so again",
    "start": "1896399",
    "end": "1902559"
  },
  {
    "text": "i'm on secondary which is us west one uh i'm using the",
    "start": "1902559",
    "end": "1908399"
  },
  {
    "text": "mysql command and then using the ro or read only instance",
    "start": "1908399",
    "end": "1914240"
  },
  {
    "text": "and then connecting to it all right so i'm in in my sql now let's try to insert some",
    "start": "1914240",
    "end": "1920000"
  },
  {
    "text": "data into this table so let's just type the command right away insert",
    "start": "1920000",
    "end": "1925518"
  },
  {
    "text": "and then i'm going to insert uh let's say 15 and then just take a timestamp off",
    "start": "1931120",
    "end": "1940080"
  },
  {
    "text": "right now okay so if i run this what happens is i get this",
    "start": "1940080",
    "end": "1945840"
  },
  {
    "text": "error and it says hey you're trying to connect to a read-only database but",
    "start": "1945840",
    "end": "1951039"
  },
  {
    "text": "we just said that we have enabled um read replica right forwarding right so we",
    "start": "1951039",
    "end": "1956240"
  },
  {
    "text": "should be able to forward these rights to the primary so there is a there's an additional",
    "start": "1956240",
    "end": "1961840"
  },
  {
    "text": "detail that we have to take care of before we can actually forward these rights um is to set the",
    "start": "1961840",
    "end": "1967600"
  },
  {
    "text": "consistency for this session um so before we can actually make the",
    "start": "1967600",
    "end": "1972720"
  },
  {
    "text": "right change or do the rights on the secondary and take advantage of right forwarding we have to set the",
    "start": "1972720",
    "end": "1979360"
  },
  {
    "text": "aurora replica read consistency to either session or global or eventual we we discussed",
    "start": "1979360",
    "end": "1985760"
  },
  {
    "text": "this when we were going through the slides so for now i'm just going to set it to session",
    "start": "1985760",
    "end": "1992000"
  },
  {
    "text": "and then try my command again so this time i was able to insert so let's try",
    "start": "1992000",
    "end": "1997039"
  },
  {
    "text": "to insert another here and then just do a",
    "start": "1997039",
    "end": "2003039"
  },
  {
    "text": "select from this table",
    "start": "2003039",
    "end": "2006240"
  },
  {
    "text": "let's see if we can get our data and you can see that these two values that we just inserted from the",
    "start": "2012240",
    "end": "2018640"
  },
  {
    "text": "secondary are in the table so hopefully this kind of demonstrates the use cases that you would typically",
    "start": "2018640",
    "end": "2025519"
  },
  {
    "text": "see with a global database where you are not only using the global database for",
    "start": "2025519",
    "end": "2032240"
  },
  {
    "text": "serving read queries but also occasionally as needed you can",
    "start": "2032240",
    "end": "2037279"
  },
  {
    "text": "your secondary can also sort write queries and they will basically get forwarded to the primary",
    "start": "2037279",
    "end": "2046080"
  },
  {
    "text": "so that concludes all the demos that i wanted to show you today today we reviewed the amazon aura global",
    "start": "2046080",
    "end": "2051358"
  },
  {
    "text": "database technology we saw how it works we saw how to configure it and we also saw a couple of demos that",
    "start": "2051359",
    "end": "2057760"
  },
  {
    "text": "showed you how to take advantage of this technology to design a global disaster recovery solution",
    "start": "2057760",
    "end": "2063839"
  },
  {
    "text": "and we also saw a couple of demos that showed you how to read or write from the secondary region thank",
    "start": "2063839",
    "end": "2070560"
  },
  {
    "text": "you so much for taking the time to go through this video today i hope this was useful i hope you will",
    "start": "2070560",
    "end": "2075679"
  },
  {
    "text": "take advantage of the global database technology in your workloads and as always",
    "start": "2075679",
    "end": "2081760"
  },
  {
    "text": "i'd like to wish you happy cloud computing from everyone here at aws",
    "start": "2081760",
    "end": "2089838"
  },
  {
    "text": "you",
    "start": "2101839",
    "end": "2103920"
  }
]