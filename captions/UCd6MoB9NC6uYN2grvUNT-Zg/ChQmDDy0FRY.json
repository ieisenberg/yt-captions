[
  {
    "start": "0",
    "end": "11000"
  },
  {
    "text": "hey everyone looks like we're ready to get started uh welcome to games 401 standardizing application deployments",
    "start": "1199",
    "end": "7319"
  },
  {
    "text": "using Amazon ECS and terraform from Riot games my name is Adam rosmi I've been",
    "start": "7319",
    "end": "12920"
  },
  {
    "start": "11000",
    "end": "11000"
  },
  {
    "text": "working within the Big Data discipline at Riot games for just about two years and I've been working as a systems engineer in the industry or the video",
    "start": "12920",
    "end": "19439"
  },
  {
    "text": "game industry as a whole getting video games to run on AWS for just about five years now so here's what you can expect from",
    "start": "19439",
    "end": "26400"
  },
  {
    "start": "24000",
    "end": "24000"
  },
  {
    "text": "this talk this is a 400 level talk so I'm going to assume everyone here has some fundamental knowledge about a lot",
    "start": "26400",
    "end": "31679"
  },
  {
    "text": "of common AWS services that I'm going to talk about such as vpcs as well as some familiarity with a lot of devops",
    "start": "31679",
    "end": "38000"
  },
  {
    "text": "buzzwords like infrastructure is code distributed systems and",
    "start": "38000",
    "end": "43920"
  },
  {
    "text": "containerization I'm going to attempt to share some strategies for Consolidated deployment consolidating deployments on",
    "start": "43960",
    "end": "49760"
  },
  {
    "text": "modular infrastructure using Amazon's ec2 container service or ECS and how my team did so without",
    "start": "49760",
    "end": "56399"
  },
  {
    "text": "compromising our standards for performance reliability or security I'm going to share some lessons we",
    "start": "56399",
    "end": "61600"
  },
  {
    "text": "learned along the way what worked for us and what didn't so hopefully you can profit off of our",
    "start": "61600",
    "end": "67560"
  },
  {
    "text": "struggle I'm also going to share how terraform plays a major role and how we interface with infrastructure",
    "start": "67560",
    "end": "72840"
  },
  {
    "text": "provisioning on AWS and how using terraform was critical to minimizing our operational overhead and it made",
    "start": "72840",
    "end": "78880"
  },
  {
    "text": "long-term maintenance a lot less painful for these applications now operational overhead is a common theme I'm be",
    "start": "78880",
    "end": "84200"
  },
  {
    "text": "revisiting throughout the talk not just because I'm a systems engineer on my team but because it also is what allows",
    "start": "84200",
    "end": "90400"
  },
  {
    "text": "us to enable total ownership for the even the developers on our team to do this deployment maintenance",
    "start": "90400",
    "end": "96320"
  },
  {
    "text": "themselves and so together I want to share how ECS and to terraform come together to increase our operational",
    "start": "96320",
    "end": "101960"
  },
  {
    "text": "agility and how we translate that operational agility in our ability to scale not only vertically as the services that we support already grow",
    "start": "101960",
    "end": "108840"
  },
  {
    "text": "but also horizontally so that we can easily integrate new services and games that Riot games uh",
    "start": "108840",
    "end": "114759"
  },
  {
    "text": "creates real quick though uh I'm not going to talk too much about pushing the limits of container scheduling or",
    "start": "114759",
    "end": "120240"
  },
  {
    "text": "containerization you still are going to need to solve the problem of how to containerize your application yourself",
    "start": "120240",
    "end": "125600"
  },
  {
    "text": "although we as we went through this journey with ECS we discovered that a lot more applications were very easy to",
    "start": "125600",
    "end": "131120"
  },
  {
    "text": "containerize than we originally thought but first a little intro into",
    "start": "131120",
    "end": "137760"
  },
  {
    "text": "our problem space and motivations as I said I'm here from Riot games which is a video game company best known for League",
    "start": "137760",
    "end": "143640"
  },
  {
    "text": "of Legends which is a multiplayer online battle arena game that was launched in 2009 since then player base has grown",
    "start": "143640",
    "end": "151000"
  },
  {
    "text": "year-over-year and we've evolved a heavy emphasis on orts and competitive play currently we support more than 100",
    "start": "151000",
    "end": "157879"
  },
  {
    "text": "million monthly unique active players with a peak concurrency of more than 7.5 million",
    "start": "157879",
    "end": "163560"
  },
  {
    "text": "players so League of Legends and Ry games as a whole has a pretty heavy emphasis on player experience and this",
    "start": "163560",
    "end": "169280"
  },
  {
    "text": "scale can provide some unique challenges for making sure we're delivering on optimal player experience not only for",
    "start": "169280",
    "end": "174800"
  },
  {
    "text": "performance since in the face of this level of concurrency even the simplest Services become a distributed systems",
    "start": "174800",
    "end": "181640"
  },
  {
    "text": "nightmare but also with Clarity because when we make changes to our platform to our services we want to make sure that",
    "start": "181640",
    "end": "187159"
  },
  {
    "text": "we know that this is actually improving the experience for our players uh not only for performance uh and response",
    "start": "187159",
    "end": "193000"
  },
  {
    "text": "times and such but also for game design decisions and product development features we want to know that we're",
    "start": "193000",
    "end": "199840"
  },
  {
    "text": "doing this correctly for our players globally which is where my discipline",
    "start": "199840",
    "end": "205319"
  },
  {
    "start": "204000",
    "end": "204000"
  },
  {
    "text": "comes in uh my team data products and services has a mission to empower Riot to make can evolve data anded products",
    "start": "205319",
    "end": "212319"
  },
  {
    "text": "by creating a scalable and reliable data platform that can handle the globally distributed scale of League of Legends",
    "start": "212319",
    "end": "218200"
  },
  {
    "text": "we utilize AWS heavily to achieve that scalability and reliability at last year's reinvent uh one of my team's tech",
    "start": "218200",
    "end": "225120"
  },
  {
    "text": "leads gave a talk about how we accomplished the initial migration of our data warehouse into AWS and since",
    "start": "225120",
    "end": "230879"
  },
  {
    "text": "then we've grown considerably considering uh continuously adding services and scaling existing services",
    "start": "230879",
    "end": "237239"
  },
  {
    "text": "to meet the needs of riots growing product catalog as well as to support upcoming research and development",
    "start": "237239",
    "end": "242480"
  },
  {
    "text": "projects and since we're a shared Central service for our business our hosting capacity requirements scale with",
    "start": "242480",
    "end": "247959"
  },
  {
    "text": "both the growth of League of Legends and also the growth of those new projects that Riot integrates into our platform we're also continuously evolving to stay",
    "start": "247959",
    "end": "254680"
  },
  {
    "text": "aligned with riots engineering platform as a whole to ensure we're delivering on our missions as our players needs",
    "start": "254680",
    "end": "261199"
  },
  {
    "text": "change so what challenges are we specifically looking to address with ECS and",
    "start": "261199",
    "end": "266440"
  },
  {
    "text": "terraform well often our applications are deployed simultaneously L to metal hosts within our own data centers and to",
    "start": "266440",
    "end": "272320"
  },
  {
    "text": "various AWS topologies in addition to this deployment at a global scale",
    "start": "272320",
    "end": "277720"
  },
  {
    "text": "includes some region specific considerations that require us to isolate some environments and create separate deployment pipelines to",
    "start": "277720",
    "end": "283800"
  },
  {
    "text": "accomodate different needs and wildly different scales our primary bottleneck is that we have a limited systems",
    "start": "283800",
    "end": "289639"
  },
  {
    "text": "engineering resource to help facilitate the deployment monitoring and maintenance of over 30 unique applications supported by my team alone",
    "start": "289639",
    "end": "296400"
  },
  {
    "text": "across each of these environments",
    "start": "296400",
    "end": "300120"
  },
  {
    "start": "302000",
    "end": "302000"
  },
  {
    "text": "and I say facilitate because it's a delicate balance one of the other core values of the ri engineering organization is total ownership we want",
    "start": "302400",
    "end": "310199"
  },
  {
    "text": "to empower all developers and all members of our team really to provision deploy and monitor their own environments even production the power",
    "start": "310199",
    "end": "317800"
  },
  {
    "text": "and flexibility of AWS is a massive Force multiplier for enabling this total ownership but without carefully",
    "start": "317800",
    "end": "323360"
  },
  {
    "text": "considered orchestration we found that this can lead to a lot of common pitfalls some examples of these pitfalls",
    "start": "323360",
    "end": "329800"
  },
  {
    "text": "my team has faced on our AWS Journey which I bet most of you have or will experience variations of yourself are",
    "start": "329800",
    "end": "336759"
  },
  {
    "text": "First Resource attribution when each developer in your organization has to reprovision each",
    "start": "336759",
    "end": "342560"
  },
  {
    "text": "piece of AWS infrastructure required for an environment to function you can end up with widely varying standards of",
    "start": "342560",
    "end": "348720"
  },
  {
    "text": "documentation you may also end up accumulating orphaned Amis security groups EBS volumes and other artifacts",
    "start": "348720",
    "end": "355000"
  },
  {
    "text": "that can pollute your account making maintenance a lot harder and they can become a significant waste of money that you might not even be aware",
    "start": "355000",
    "end": "361360"
  },
  {
    "text": "of strict and consistent auditing can prevent this but it's timec consuming and that creates excessive operational",
    "start": "361360",
    "end": "368160"
  },
  {
    "text": "overhead in a shared environment it can also become difficult to track cumulative total costs for specific",
    "start": "368160",
    "end": "374199"
  },
  {
    "text": "applications in order to do accurate cost attribution and understand the isolated total cost of ownership for",
    "start": "374199",
    "end": "379599"
  },
  {
    "text": "that application second another major consideration is security I'm sure",
    "start": "379599",
    "end": "385919"
  },
  {
    "text": "everyone here will eventually encounter the classic slz all traff allowed security group rule hidden",
    "start": "385919",
    "end": "391720"
  },
  {
    "text": "somewhere this is a common corner for exasperated developers to cut when there isn't a clean and easy way to document",
    "start": "391720",
    "end": "398800"
  },
  {
    "text": "the creation of accurate and consistent security groups more subtle risks such as",
    "start": "398800",
    "end": "404039"
  },
  {
    "text": "excessive wild carding and IM policies and S3 bucket access policies can be difficult to accurately audit and a",
    "start": "404039",
    "end": "410720"
  },
  {
    "text": "nightmare to retroactively fix without risking downtime since if this rule has existed in your application for an",
    "start": "410720",
    "end": "415840"
  },
  {
    "text": "unknown amount of time you may be depending on it for traffic patterns you weren't aware",
    "start": "415840",
    "end": "421160"
  },
  {
    "text": "of you can monitor and prevent a lot of this abuse using tools like Netflix's security monkey or aws's own trusted",
    "start": "421160",
    "end": "428199"
  },
  {
    "text": "adviser but being reactive isn't perfect and this can also be a major operational",
    "start": "428199",
    "end": "433319"
  },
  {
    "text": "time sync remember we're focused on enabling total ownership while reducing operational overhead without",
    "start": "433319",
    "end": "439440"
  },
  {
    "text": "compromising security or reliability lastly a general",
    "start": "439440",
    "end": "445960"
  },
  {
    "text": "consideration is that you want to enforce conventions in a consistent way and this becomes difficult with total",
    "start": "445960",
    "end": "452120"
  },
  {
    "text": "ownership and lots of different people provisioning infrastructure Riot has a large AWS presence that extends well",
    "start": "452120",
    "end": "457240"
  },
  {
    "text": "beyond my team scope and we need to make sure everyone stays aligned with best approaches for problems that can impact our entire Consolidated Suite of AWS",
    "start": "457240",
    "end": "464800"
  },
  {
    "text": "accounts for example provisioning vpcs without accidentally overlapping assigned cider blocks of other existing",
    "start": "464800",
    "end": "470599"
  },
  {
    "text": "vpcs from other teams or accounts that you might eventually want to peer with which can become a nightmare if you're",
    "start": "470599",
    "end": "476520"
  },
  {
    "text": "overlapping RI gave a talk here in 2014 14 two two reinvents ago about how we",
    "start": "476520",
    "end": "482319"
  },
  {
    "text": "reinvented our approach to network design on AWS that talks a lot about the benefits of enforcing good VPC",
    "start": "482319",
    "end": "488120"
  },
  {
    "text": "consistent design across your entire organization especially as the number of accounts that you support",
    "start": "488120",
    "end": "493280"
  },
  {
    "text": "grows instance reservations are another organiza organization-wide consideration",
    "start": "493280",
    "end": "499400"
  },
  {
    "text": "that also become massively easier with appropriate centralized oversight if you can rally around common instance types",
    "start": "499400",
    "end": "506080"
  },
  {
    "text": "when your application doesn't have a specifically restrictive hard Ware requirement can make it a lot more",
    "start": "506080",
    "end": "511440"
  },
  {
    "text": "feasible to hit higher reservation rates on your account which can be one of the biggest and easiest ways to substantially reduce your costs doing",
    "start": "511440",
    "end": "518760"
  },
  {
    "text": "this in a Consolidated billing environment where you may be sharing reservations with other teams is a lot",
    "start": "518760",
    "end": "524159"
  },
  {
    "text": "more realistic when you can standardize your deployments and reduce your snow flaky",
    "start": "524159",
    "end": "529480"
  },
  {
    "text": "environments another example of enforcing good conventions are consistent organized",
    "start": "529480",
    "end": "534680"
  },
  {
    "text": "tags this increases your ability to improve both resource attribution and security auditing but only if you can",
    "start": "534680",
    "end": "541360"
  },
  {
    "text": "trust that your tags are ubiquitous and consistent which is relatively impossible if every developer on your",
    "start": "541360",
    "end": "546480"
  },
  {
    "text": "team has a different opinion about how to tag something with an application name so in summary we found that",
    "start": "546480",
    "end": "554160"
  },
  {
    "text": "tactfully centralizing and standardizing management of some core components of our AWS presence has helped steer us",
    "start": "554160",
    "end": "560000"
  },
  {
    "text": "away from the impact of some of these pitfalls while still enabling total ownership we still have a long way to go",
    "start": "560000",
    "end": "565839"
  },
  {
    "text": "but I'm here to share what we've learned so far and how ECS and terraform in particular have helped us along the",
    "start": "565839",
    "end": "572079"
  },
  {
    "text": "way and first if you want to use ECS of course you need to start with containerizing your applications and on",
    "start": "576079",
    "end": "582160"
  },
  {
    "text": "ECS this means Docker containers and Docker containers start with Docker files writing good Docker files could be",
    "start": "582160",
    "end": "589440"
  },
  {
    "start": "585000",
    "end": "585000"
  },
  {
    "text": "an entire talk of its own but forcing your developers to figure that out and create their own Docker files to Define",
    "start": "589440",
    "end": "596079"
  },
  {
    "text": "their application requirements is incredibly useful and is our first example of a form of infrastructure as code developers get all of the Winds of",
    "start": "596079",
    "end": "603040"
  },
  {
    "text": "consistency across environments and so they can deploy confidently even to production and their dependencies and",
    "start": "603040",
    "end": "608240"
  },
  {
    "text": "are documented by default which makes long-term support for the rest of their team when they're long gone a lot",
    "start": "608240",
    "end": "614360"
  },
  {
    "text": "easier this combined with a massive community support for common use cases also contributes heavily to easing some",
    "start": "614360",
    "end": "620120"
  },
  {
    "text": "of the operational overhead pain at Riot our engineering organization as a whole",
    "start": "620120",
    "end": "625240"
  },
  {
    "text": "has been making the move to Containers even within our own data centers which makes it a lot more attractive Ive for my team to do so on",
    "start": "625240",
    "end": "631200"
  },
  {
    "text": "AWS Riot is committed is already committed to developing and maintaining key shared components of running and",
    "start": "631200",
    "end": "636680"
  },
  {
    "text": "containerized World such as an internal container repository even though Amazon also offers one themselves and a",
    "start": "636680",
    "end": "643079"
  },
  {
    "text": "centralized logging pipeline my team can utilize these common services to reduce our own operational burden and tap into",
    "start": "643079",
    "end": "649720"
  },
  {
    "text": "the expertise that our own Community is working hard to cultivate being able to piggyback on",
    "start": "649720",
    "end": "655839"
  },
  {
    "text": "that expertise is a huge win for my team but my team specific specifically has to adapt our approach to my team's uniquely",
    "start": "655839",
    "end": "662680"
  },
  {
    "text": "heavy AWS presence which hopefully is the same situation for all of you which requires some special",
    "start": "662680",
    "end": "669959"
  },
  {
    "text": "considerations once you start adding an extra level of abstraction through running your already ephemeral",
    "start": "669959",
    "end": "675160"
  },
  {
    "text": "containers on someone else's virtualized machines on the cloud it can be hard to stay confident that your application",
    "start": "675160",
    "end": "680800"
  },
  {
    "text": "will maintain the reliability you may take for granted within your own data centers containers are going to stop ec2",
    "start": "680800",
    "end": "686720"
  },
  {
    "text": "instances are going to become scheduled for maintenance or straight up obliterated by Rogue teammates you may",
    "start": "686720",
    "end": "691880"
  },
  {
    "text": "have to monitor for these events closely or design your infrastructure and applications in such a way that you can",
    "start": "691880",
    "end": "697120"
  },
  {
    "text": "gracefully and automatically handle these events also to keep a desired amount of",
    "start": "697120",
    "end": "702440"
  },
  {
    "text": "containers running in a pattern that you'd expect while sharing resources within a cluster nicely whether it's",
    "start": "702440",
    "end": "707639"
  },
  {
    "text": "batch jobs or long running applications or a mixture of both running in the same cluster you're going to want to use a",
    "start": "707639",
    "end": "712720"
  },
  {
    "text": "centralized scheduler to manage Distributing the right number of tasks intelligently across your cluster this",
    "start": "712720",
    "end": "718480"
  },
  {
    "text": "is a surprising ly complex problem finding the correct balance of fairness for resource conflicts while quickly",
    "start": "718480",
    "end": "724079"
  },
  {
    "text": "rescheduling tasks and a fault tolerant distribution within your cluster involves a lot of edge case",
    "start": "724079",
    "end": "729200"
  },
  {
    "text": "considerations but luckily there's a lot of existing Solutions out there and in fact ECS provides one for you by default",
    "start": "729200",
    "end": "735199"
  },
  {
    "text": "as well as the ability to integrate a thirdparty scheduler if that makes more sense for your use",
    "start": "735199",
    "end": "740360"
  },
  {
    "text": "cases but even with solid scheduling provisioning the cluster fabric that your Fleet of containers will run on",
    "start": "740360",
    "end": "745720"
  },
  {
    "text": "isn't simple or free even though the application in the hardware runs on are no longer tightly coupled due to the",
    "start": "745720",
    "end": "751240"
  },
  {
    "text": "magic of containerization we still have to solve the problem of reliably and repeatedly provisioning the hardware",
    "start": "751240",
    "end": "756600"
  },
  {
    "text": "backing our Docker hosts and the network that they run on on AWS this can involve dozens of auxiliary services such as IM",
    "start": "756600",
    "end": "763680"
  },
  {
    "text": "rolls Auto scaling groups with their Associated elastic load balancers and Cloud watch alarms key pairs R 53",
    "start": "763680",
    "end": "769519"
  },
  {
    "text": "entries EBS volumes and more all working in concert with a very precise configuration to provide the exact",
    "start": "769519",
    "end": "774920"
  },
  {
    "text": "topography that makes sense for your cluster these are all incredibly useful and flexible services that we want to take full advantage of and if we can",
    "start": "774920",
    "end": "781880"
  },
  {
    "text": "concentrate our strategy around a common cluster fabric Baseline as long as you orchestrate this in an extensible way we",
    "start": "781880",
    "end": "787600"
  },
  {
    "text": "only need to solve this problem",
    "start": "787600",
    "end": "790680"
  },
  {
    "text": "once so now that we've gone over a lot of the general considerations for running containers in Cloud let's see what some of our",
    "start": "794199",
    "end": "800519"
  },
  {
    "text": "strategies look like before we landed on using Amazon ECS hopefully some of these situations will seem familiar to",
    "start": "800519",
    "end": "806760"
  },
  {
    "text": "you our first foray in to cloud containerization back in 2013 where we",
    "start": "806760",
    "end": "811920"
  },
  {
    "text": "simply took our existing application deployments using Autos scaling groups and slapped Docker into our existing",
    "start": "811920",
    "end": "817320"
  },
  {
    "text": "application specific Amis there was no shared hardware and there was no scheduling to manage the orchestration",
    "start": "817320",
    "end": "823120"
  },
  {
    "text": "of this more traditional infrastructure you utilized a Netflix tool called Asgard which since 2013 has been deprecated in favor of their new tool",
    "start": "823120",
    "end": "829560"
  },
  {
    "text": "Spiner which I have not used much for the most part that worked great",
    "start": "829560",
    "end": "835480"
  },
  {
    "text": "uh we could now run containers and production using our shared artifact Repository and get that developer consistency and efficiency and",
    "start": "835480",
    "end": "841360"
  },
  {
    "text": "reusability across environments but we didn't gain much of the traditional advantage of a container-based",
    "start": "841360",
    "end": "846399"
  },
  {
    "text": "infrastructure a lot of the reasons why it's attractive for people to make the initial move into containerization because due to the lack",
    "start": "846399",
    "end": "852279"
  },
  {
    "text": "of scheduling we had pretty poor Hardware utilization and scaling up more tasks involve the same instance",
    "start": "852279",
    "end": "857519"
  },
  {
    "text": "provisioning overhead time of a traditional ec2 deployment with an additional delay introduced from the fact that every single time we scaled up",
    "start": "857519",
    "end": "864519"
  },
  {
    "text": "we would need to not only provision a new instance but also download our image from our Repository which is another",
    "start": "864519",
    "end": "870000"
  },
  {
    "text": "point of failure this is still a great pattern and it can be done a lot better with new features and tools introduced",
    "start": "870000",
    "end": "875639"
  },
  {
    "text": "since 2013 uh in fact Amazon has since added dun Docker functionality to its elastic beant stock service which can",
    "start": "875639",
    "end": "882639"
  },
  {
    "text": "very quickly and easily create a managed unscheduled Docker environment that solves a lot of these",
    "start": "882639",
    "end": "888399"
  },
  {
    "text": "problems between then and now we've also experimented lightly with attempting to launch and manage thirdparty container",
    "start": "888399",
    "end": "894079"
  },
  {
    "text": "orchestration Frameworks on top of AWS Hardware this can also be a great solution and support for this is growing",
    "start": "894079",
    "end": "900360"
  },
  {
    "text": "each year dcos built on Apache mesos for example now offers Cloud information",
    "start": "900360",
    "end": "905600"
  },
  {
    "text": "templates to get a schedule Docker container fabric kickstarted on ews pretty quickly however taking on support",
    "start": "905600",
    "end": "912240"
  },
  {
    "text": "of a thirdparty framework with production scale and responsibility can comes with a lot of operational overhead and unknown challenges you and your team",
    "start": "912240",
    "end": "919199"
  },
  {
    "text": "will then be in the business of mastering the administration of these clusters on AWS which depending on your use case",
    "start": "919199",
    "end": "925959"
  },
  {
    "text": "will have certain challenges that you may not expect but with enough organiz buyin it can be a huge win for your",
    "start": "925959",
    "end": "931560"
  },
  {
    "text": "team but at the time that we attempted to adopt this we made the call that the overhead was too much for our small team",
    "start": "931560",
    "end": "937199"
  },
  {
    "text": "to handle alone and it didn't strike the right balance of risk versus reward so what we're currently on our",
    "start": "937199",
    "end": "943800"
  },
  {
    "text": "third iteration luckily Amazon within the last year or so has been rapidly introducing its own Suite of container",
    "start": "943800",
    "end": "949759"
  },
  {
    "text": "orchestration services within ECS the service itself involves no software to install or manage as long as",
    "start": "949759",
    "end": "955680"
  },
  {
    "text": "you start from the base ECS Ami and it's specifically design designed to be used with other AWS services that we're",
    "start": "955680",
    "end": "961279"
  },
  {
    "text": "already familiar with provides and it provides all of the scheduling and container management benefits that we're looking for using ECS hit the right",
    "start": "961279",
    "end": "968720"
  },
  {
    "text": "balance for us of having a flexible and dependable container management platform without introducing unreasonable amounts of new complexity and operational",
    "start": "968720",
    "end": "975639"
  },
  {
    "text": "overhead we're already very familiar with all of the AWS Services involved and we could easily adopt ECS",
    "start": "975639",
    "end": "981199"
  },
  {
    "text": "deployments at our own pace it's also completely free which is nice you just of course pay for the instances volumes",
    "start": "981199",
    "end": "987360"
  },
  {
    "text": "and other ads Hardware that you provision to run it on ECS is relatively new it was",
    "start": "987360",
    "end": "993560"
  },
  {
    "start": "992000",
    "end": "992000"
  },
  {
    "text": "announced here at reinvent two years ago and in fact it wasn't generally available and deployed to the regions",
    "start": "993560",
    "end": "998639"
  },
  {
    "text": "that we needed it to be in until less than a year ago and this year we've seen several major feature releases that",
    "start": "998639",
    "end": "1004079"
  },
  {
    "text": "pushed us to start heavily migrating our applications and deployment strategies to take advantage of it service scaling",
    "start": "1004079",
    "end": "1010440"
  },
  {
    "text": "introduced in May of this year allows you to reason with task definitions in a way that's very familiar to a traditional Auto scaling group you can",
    "start": "1010440",
    "end": "1017800"
  },
  {
    "text": "modify your desired number of tasks based on application specific cloudwatch alarms in the same way that You' scale",
    "start": "1017800",
    "end": "1023120"
  },
  {
    "text": "up and down entire instances but of course not needing provision instances in response to that load gives you much",
    "start": "1023120",
    "end": "1028360"
  },
  {
    "text": "quicker elasticity this application-based elasticity is is in addition to Cluster",
    "start": "1028360",
    "end": "1034038"
  },
  {
    "text": "wide scaling that you can configure using the same familiar techniques with cloudwatch alarms and Autos scaling groups to add and remove instances for",
    "start": "1034039",
    "end": "1040199"
  },
  {
    "text": "overall cluster capacity to schedule your tasks another feature introduced were",
    "start": "1040199",
    "end": "1045720"
  },
  {
    "text": "task specific am rules uh which are key security feature added in July that",
    "start": "1045720",
    "end": "1050840"
  },
  {
    "text": "allow you to utilize instance roles for access management within AWS without having to share that access with other",
    "start": "1050840",
    "end": "1056280"
  },
  {
    "text": "tasks scheduled in the same instance and what I mean by that is before this feature was",
    "start": "1056280",
    "end": "1061520"
  },
  {
    "text": "released if you wanted to take advantage of uh instance profiles uh IM profiles",
    "start": "1061520",
    "end": "1067160"
  },
  {
    "text": "and roles in order to give your application the permissions it would need to do things on AWS which I highly recommend that you",
    "start": "1067160",
    "end": "1073000"
  },
  {
    "text": "use uh in a cluster shared environment where you have more than one type of task running in that cluster before this",
    "start": "1073000",
    "end": "1079120"
  },
  {
    "text": "feature was announced you would have to create a union of all permissions that you would need for all of those tasks and assign it to the cluster which",
    "start": "1079120",
    "end": "1085480"
  },
  {
    "text": "unfortunately means that you would be sharing those permissions across any task scheduled within that cluster which limits the amount of cluster sharing you",
    "start": "1085480",
    "end": "1092360"
  },
  {
    "text": "can do depending on the type of the application you want to schedule but now that this feature has been introduced it",
    "start": "1092360",
    "end": "1098080"
  },
  {
    "text": "makes it super and easy to reuse your existing IM policies for non-cs deployments that you've already",
    "start": "1098080",
    "end": "1104120"
  },
  {
    "text": "cultivated and it reduces the need for us to launch new clusters so that application permissions won't bleed into",
    "start": "1104120",
    "end": "1109240"
  },
  {
    "text": "each other uh lastly the one of the later",
    "start": "1109240",
    "end": "1114840"
  },
  {
    "text": "latest features introduced were application load balances application load balancers or",
    "start": "1114840",
    "end": "1120320"
  },
  {
    "text": "albs uh they were just they released just a few months ago as a general AWS offering and they immediately had a",
    "start": "1120320",
    "end": "1125520"
  },
  {
    "text": "major impact on our ability to take advantage of ECS even with the task specific IM roles that I just talked",
    "start": "1125520",
    "end": "1131320"
  },
  {
    "text": "about allowing us to create unique task defined uh permissions for each task uh",
    "start": "1131320",
    "end": "1137960"
  },
  {
    "text": "until the Advent of lbs with their concept of Target groups we were limited by being unable to schedule multiple",
    "start": "1137960",
    "end": "1143559"
  },
  {
    "text": "copies of a service listening on a particular port on the same Docker host unless we created our own load balancing",
    "start": "1143559",
    "end": "1150039"
  },
  {
    "text": "solution uh Beyond a standard elb or created our own service Discovery mechanism uh both of which are solvable",
    "start": "1150039",
    "end": "1157159"
  },
  {
    "text": "problems but create more overhead now albs can intelligently handle adding removing cluster hosts",
    "start": "1157159",
    "end": "1163919"
  },
  {
    "text": "listening on arbitrary reports without any extra orchestration involved uh this unlocks several use cases for us to",
    "start": "1163919",
    "end": "1169600"
  },
  {
    "text": "easily migrate and as a great example of how EC's implicit AWS design and",
    "start": "1169600",
    "end": "1175280"
  },
  {
    "text": "integration aligns with our focus on reduced operational complexity as AWS ads features we can",
    "start": "1175280",
    "end": "1181640"
  },
  {
    "text": "quickly take advantage of them in very flexible ways in our continuous pursuit of simplifying and improving our hosting",
    "start": "1181640",
    "end": "1188480"
  },
  {
    "text": "strategies but remember we still have the problem that the docker host fabric that we're running on uh doesn't come",
    "start": "1188480",
    "end": "1193919"
  },
  {
    "text": "free ECS won't provision your instances and auxiliary services for you even sticking purely to AWS Services means we",
    "start": "1193919",
    "end": "1200840"
  },
  {
    "text": "have to be able to consistently and reliably provision up to hundreds of individual components with precise configurations and then maintain this",
    "start": "1200840",
    "end": "1206679"
  },
  {
    "text": "infrastructure indefinitely so now that we've narrowed in on ECS being a solution that supports all the features that we need while",
    "start": "1206679",
    "end": "1212880"
  },
  {
    "text": "being easy to manage we still want to be able to encapsulate that in a repeatable maintainable orchestration that we can",
    "start": "1212880",
    "end": "1218000"
  },
  {
    "text": "use to stamp out whatever types of environments we need in a predictable and Inter terministic way because remember our focus is still",
    "start": "1218000",
    "end": "1225360"
  },
  {
    "text": "both on operational efficiency and total ownership develop ERS everyone on your team needs to be able to launch and tear",
    "start": "1225360",
    "end": "1231039"
  },
  {
    "text": "down clusters with custom configurations themselves and our whole team needs to be doing it in a secure consistent way that sticks to predictable best",
    "start": "1231039",
    "end": "1237200"
  },
  {
    "text": "practices that we talked about earlier to avoid those pitfalls right now each developer on my team is cumulatively",
    "start": "1237200",
    "end": "1242520"
  },
  {
    "text": "running approximately 30 separate ECS clusters averaging a little more than 400 hosts and that's growing every day",
    "start": "1242520",
    "end": "1249600"
  },
  {
    "text": "being able to trust that we have a uniform provisioning strategy that allows us to being able to trust that we have a uniform provisioning strategy",
    "start": "1249600",
    "end": "1256360"
  },
  {
    "text": "allows us to smoothly operate at a much higher higher scale than we'd normally be able to support with our limited systems engineering resources if we were",
    "start": "1256360",
    "end": "1262600"
  },
  {
    "text": "to bottleneck these deployments through particular people on our team and for us that's where terraform",
    "start": "1262600",
    "end": "1269039"
  },
  {
    "text": "comes in terraform is a hashy Corp product",
    "start": "1269039",
    "end": "1276240"
  },
  {
    "text": "designed as a platform agnostic solution to capturing your infrastructure as code it's analogous to Amazon's Cloud",
    "start": "1276240",
    "end": "1281640"
  },
  {
    "text": "information service which also allows you to Define collections of resources but specifically on AWS our team chose",
    "start": "1281640",
    "end": "1287840"
  },
  {
    "text": "to use terraform largely because it was gaining adoption across our entire organization for use cases Beyond AWS",
    "start": "1287840",
    "end": "1293720"
  },
  {
    "text": "and also we want to take advantage of that cultivated internal expertise for both Cloud information and",
    "start": "1293720",
    "end": "1300039"
  },
  {
    "start": "1298000",
    "end": "1298000"
  },
  {
    "text": "terraform you define templates that will deterministically launch a collection of resources but for ter for form in",
    "start": "1300039",
    "end": "1306240"
  },
  {
    "text": "particular from now on I'll use terraform specific terminology once infrastructure has been launched from a terraform template it creates a state",
    "start": "1306240",
    "end": "1313159"
  },
  {
    "text": "file that you can use to continue to maintain and update those resources as long as you need changes to your",
    "start": "1313159",
    "end": "1318880"
  },
  {
    "text": "template will be intelligently applied by modifying or recreating your resources only as needed and in the order that they are required to be",
    "start": "1318880",
    "end": "1324679"
  },
  {
    "text": "launched terraform can do this because it creates a resource dependency graph based on the cross attribute references",
    "start": "1324679",
    "end": "1331240"
  },
  {
    "text": "for example if an instance has a particular Security Group Association it will know it needs to create that Security Group before it attempts to",
    "start": "1331240",
    "end": "1336480"
  },
  {
    "text": "create that instance or else AWS will complain this allows terraform to maximally parallelize Resource",
    "start": "1336480",
    "end": "1342919"
  },
  {
    "text": "provisioning Whenever there isn't an application specific limitation that you'd want to take into account you can also Define explicit it flow control",
    "start": "1342919",
    "end": "1349640"
  },
  {
    "text": "dependencies and behaviors to match deployment needs if any changes are made to your",
    "start": "1349640",
    "end": "1355840"
  },
  {
    "text": "infrastructure outside of your manage outside of managing it directly through terraform such as people going rogue and",
    "start": "1355840",
    "end": "1361039"
  },
  {
    "text": "editing them directly in the console or using their own API keys or whatever you can reapply your template to return your",
    "start": "1361039",
    "end": "1367000"
  },
  {
    "text": "managed infrastructure to the state that you expected it to be in or if it was an intended change you can update your template to match that and you're good",
    "start": "1367000",
    "end": "1373159"
  },
  {
    "text": "to go uh this can create a great easy Baseline for disaster recovery on AWS",
    "start": "1373159",
    "end": "1380440"
  },
  {
    "text": "just as important as this clean management is the ability to cleanly destroy all of your managed resources",
    "start": "1380600",
    "end": "1385640"
  },
  {
    "text": "together and keep track of what all resources are associated with any given application ensuring that you don't",
    "start": "1385640",
    "end": "1390840"
  },
  {
    "text": "leave behind unused resources that could potentially become costly and pollute your account and create overhead and make it",
    "start": "1390840",
    "end": "1397240"
  },
  {
    "text": "harder and once your team has adopted launching and modifying its AWS resources through terraform specifically",
    "start": "1397240",
    "end": "1402840"
  },
  {
    "text": "you start seeing similar benefits to what we got with containerization and infrastructur and infrastructure as code",
    "start": "1402840",
    "end": "1408720"
  },
  {
    "text": "through Docker files now not only are all of your AWS resource dependencies documented by default but common use",
    "start": "1408720",
    "end": "1415400"
  },
  {
    "text": "cases can be shared and maintained by a larger community of support within your",
    "start": "1415400",
    "end": "1420278"
  },
  {
    "text": "organization and one of the most common use cases is launching a VPC here we have a diagram of our",
    "start": "1420640",
    "end": "1427039"
  },
  {
    "text": "current high level approach there's no details or anything but uh a high level approach to VPC design that meets our",
    "start": "1427039",
    "end": "1433000"
  },
  {
    "text": "business needs we launch a VPC that has a trifecta of a natat VPN and internet",
    "start": "1433000",
    "end": "1438240"
  },
  {
    "text": "gate gway configured to allow all of the network communication that we need with the rest of our ecosystem so that's VPC",
    "start": "1438240",
    "end": "1444080"
  },
  {
    "text": "to VPC traffic uh VPC to our own data center traffic and to our own network",
    "start": "1444080",
    "end": "1449360"
  },
  {
    "text": "and our office for our individual management and also of course communication to the rest of the internet uh we also launch a series of",
    "start": "1449360",
    "end": "1456080"
  },
  {
    "text": "common Services instances such as custom DNS and ntp solutions into their own specially configured subnets with some",
    "start": "1456080",
    "end": "1462559"
  },
  {
    "text": "detailed business specific route tables so launching a VPC with this precise configuration from scratch can involve",
    "start": "1462559",
    "end": "1469120"
  },
  {
    "text": "individually provisioning dozens of resources with tightly coupled configurations but there are a lot of good Arguments for making sure that each",
    "start": "1469120",
    "end": "1475679"
  },
  {
    "text": "team each application or even potentially each environment within each application has its own",
    "start": "1475679",
    "end": "1481279"
  },
  {
    "text": "VPC and this may seem counter to our Mantra of minimizing operational overhead but we don't want to have to",
    "start": "1481279",
    "end": "1488279"
  },
  {
    "text": "decide between following best security practices and maintain following best security practices and maintainability",
    "start": "1488279",
    "end": "1494279"
  },
  {
    "text": "while allowing total ownership once you have a base VPC terraform template that can launch this",
    "start": "1494279",
    "end": "1499600"
  },
  {
    "text": "exact set of infrastructure now all you need to do is throw it into a GitHub repository and socialize it across the",
    "start": "1499600",
    "end": "1505440"
  },
  {
    "text": "rest of your organization now everyone will be launching vpcs in a semi-consistent way",
    "start": "1505440",
    "end": "1510720"
  },
  {
    "text": "using a common language which will make interfacing across your teams much smoother and once you have that shared",
    "start": "1510720",
    "end": "1517320"
  },
  {
    "text": "template in language launching new vpcs can be as simple as filling out a list of values and applying the template you",
    "start": "1517320",
    "end": "1523760"
  },
  {
    "text": "can expose as many or as few configurable parameters paramet parameters as you want to allow",
    "start": "1523760",
    "end": "1529679"
  },
  {
    "text": "flexibility where it makes sense or to remove flexibility when you want to enforce certain",
    "start": "1529679",
    "end": "1534760"
  },
  {
    "text": "standards these values become the only thing a new user or team needs to focus on to start launching infrastructure and",
    "start": "1534760",
    "end": "1541159"
  },
  {
    "text": "you can wrap it in as much documentation as you see fit this is a much more realistic barrier of Entry to get",
    "start": "1541159",
    "end": "1546720"
  },
  {
    "text": "multiple teams successfully taking advantage of total ownership on AWS without risking a slow descent into a",
    "start": "1546720",
    "end": "1552440"
  },
  {
    "text": "chaotic variation of Standards so let's get some examples of",
    "start": "1552440",
    "end": "1559159"
  },
  {
    "text": "how we're currently using ECS and terraform so here's a basic ECS cluster",
    "start": "1559159",
    "end": "1567520"
  },
  {
    "start": "1563000",
    "end": "1563000"
  },
  {
    "text": "layout uh all components represented here are provisioned and managed entirely by terraform the original VPC",
    "start": "1567520",
    "end": "1573799"
  },
  {
    "text": "template we saw earlier is one stack off in the corner represented by that symbol there uh and we can take the output from",
    "start": "1573799",
    "end": "1580399"
  },
  {
    "text": "that such as subnet IDs and pass those variables into a completely separate stack that launches all the components",
    "start": "1580399",
    "end": "1586120"
  },
  {
    "text": "that make up our ECS cluster and so I'm not sure what the proper terminology is but every time I say stack I'm going to",
    "start": "1586120",
    "end": "1591919"
  },
  {
    "text": "talk about like a a specific unique State file so a specific collection of modules and resources that we manage",
    "start": "1591919",
    "end": "1598360"
  },
  {
    "text": "together by itself and multiple different Stacks will be managed separately and a module is just a",
    "start": "1598360",
    "end": "1603919"
  },
  {
    "text": "collection of resources that you could have multiple modules in one stack so that that's the terminology I use I think it's right uh so being able to",
    "start": "1603919",
    "end": "1611720"
  },
  {
    "text": "maintain all of the traditional AWS configurations makes this extremely flexible and maintainable for instance",
    "start": "1611720",
    "end": "1617760"
  },
  {
    "text": "our user user data is a fully templated file that we can inject our terraform variables into meaning we can",
    "start": "1617760",
    "end": "1623320"
  },
  {
    "text": "dynamically reference other provisioned AWS resources on creation for ECS in particular we use that capability to",
    "start": "1623320",
    "end": "1630520"
  },
  {
    "text": "pass in our on- premise Docker registry authentication tokens this also allows us to take the",
    "start": "1630520",
    "end": "1635880"
  },
  {
    "text": "same ECS cluster template and launch wildly different topologies just by changing some variables around such as",
    "start": "1635880",
    "end": "1642120"
  },
  {
    "text": "what cloud watch alarms to use to autoscale the cluster if any and all of the traditional launch configuration",
    "start": "1642120",
    "end": "1647480"
  },
  {
    "text": "options for modifying instance attributes it also enables us to to easily compose many granular security",
    "start": "1647480",
    "end": "1653960"
  },
  {
    "text": "groups without getting overwhelmed since we have robust documentation and a change history captured by the",
    "start": "1653960",
    "end": "1659039"
  },
  {
    "text": "repository holding these templates and managed by the team uh so here I'm going to attempt to",
    "start": "1659039",
    "end": "1666159"
  },
  {
    "text": "represent an example of uh composing multiple modules together uh and how you connect your input and output variables",
    "start": "1666159",
    "end": "1672480"
  },
  {
    "text": "together so this is the list of variables that we expose for launching a particular type of ECS cluster uh you",
    "start": "1672480",
    "end": "1678880"
  },
  {
    "text": "can do this and it might look a lot different but uh it doesn't matter what the individual values are but we also",
    "start": "1678880",
    "end": "1686039"
  },
  {
    "text": "could potentially have two other modules here and here we have represented the VPC stack that I mentioned earlier and",
    "start": "1686039",
    "end": "1691679"
  },
  {
    "text": "here is uh our team access Security Group uh module so we have found it",
    "start": "1691679",
    "end": "1697480"
  },
  {
    "text": "useful this is just an aside to group a lot of the common security groups that you're going to use into their own modules so that it's easily so that",
    "start": "1697480",
    "end": "1704840"
  },
  {
    "text": "terraform can easily cross reference Security Group IDs when you have have Security Group rules that are that allow",
    "start": "1704840",
    "end": "1710679"
  },
  {
    "text": "specific traffic based on Security Group IDs it's hard it can be a chicken and egg problem when you have to cross",
    "start": "1710679",
    "end": "1716200"
  },
  {
    "text": "reference Security Group IDs so if you group them all together uh terraform can manage that pretty easily and so if we",
    "start": "1716200",
    "end": "1722039"
  },
  {
    "text": "have that in a separate module we have two different examples here of how you within the same stack can just pass you",
    "start": "1722039",
    "end": "1728840"
  },
  {
    "text": "can directly reference a value from another module uh without having to ever think about what that value is terraform",
    "start": "1728840",
    "end": "1734039"
  },
  {
    "text": "will just do that work for you but we also have the idea of importing a value from a completely different stack just",
    "start": "1734039",
    "end": "1739919"
  },
  {
    "text": "because we passed it in as a variable uh another example of what I",
    "start": "1739919",
    "end": "1746000"
  },
  {
    "text": "was just talking about uh here we can create extremely different ECS clusters by just changing a few simple values so",
    "start": "1746000",
    "end": "1752039"
  },
  {
    "text": "again we have the ECS cluster uh template definition or the module interface where we fill in all the",
    "start": "1752039",
    "end": "1757240"
  },
  {
    "text": "values and so on this side we have an M3 large base cluster and on this side it's",
    "start": "1757240",
    "end": "1763640"
  },
  {
    "text": "an R3 4X large which is a much larger instance type here we have an Autos",
    "start": "1763640",
    "end": "1768799"
  },
  {
    "text": "scale group configuration where we have between three and 10 in of these smaller instances but here we have statically",
    "start": "1768799",
    "end": "1773840"
  },
  {
    "text": "configured three instances that won't scale up or down so this pattern makes a",
    "start": "1773840",
    "end": "1779480"
  },
  {
    "text": "lot more sense for uh more monolithic type applications or databases that don't handle scaling well that you might",
    "start": "1779480",
    "end": "1785120"
  },
  {
    "text": "not be adding task specific scaling policies to uh and this uh",
    "start": "1785120",
    "end": "1790720"
  },
  {
    "text": "smaller more instances but smaller instances cluster makes a lot more sense for microservices",
    "start": "1790720",
    "end": "1797360"
  },
  {
    "start": "1797000",
    "end": "1797000"
  },
  {
    "text": "and once we've launched our clusters uh we still need to capture our ECS service and task definitions and so this is the",
    "start": "1798840",
    "end": "1805000"
  },
  {
    "text": "base case of that uh which works for microservices without endpoints which is one of the easiest ways to get quickly",
    "start": "1805000",
    "end": "1811320"
  },
  {
    "text": "started on using containers in the cloud uh all you really need to do is group together your service and task",
    "start": "1811320",
    "end": "1816760"
  },
  {
    "text": "definition with their Associated cloudwatch alarms and IM rolles uh and you gather those together in their own module and you keep or in their own",
    "start": "1816760",
    "end": "1823600"
  },
  {
    "text": "stack and you keep that stack separate from your ECS cluster stack which is also sep seate from your VPC stack and",
    "start": "1823600",
    "end": "1829919"
  },
  {
    "text": "so this is the first example of many of how composability uh makes this a lot",
    "start": "1829919",
    "end": "1835440"
  },
  {
    "text": "easier for us and how you can take advantage of that to create flexible infrastructure so since the VPC and ECS",
    "start": "1835440",
    "end": "1842440"
  },
  {
    "text": "cluster and service and task definition mod uh Stacks are all separate we can how have a onom many relationship",
    "start": "1842440",
    "end": "1847480"
  },
  {
    "text": "between any of them we can have as many vpcs as we want running as many clusters inside of one or many vpcs with as many",
    "start": "1847480",
    "end": "1854600"
  },
  {
    "text": "task and service definitions running on as many clusters as we want all with the same",
    "start": "1854600",
    "end": "1860720"
  },
  {
    "text": "templates and if we want to run a very similar service that also requires us to expose a service endpoint we can reuse",
    "start": "1861799",
    "end": "1867760"
  },
  {
    "text": "all the templates we've created so far and talked about so far and take that composability one step further so we",
    "start": "1867760",
    "end": "1873440"
  },
  {
    "text": "have that maintain cultivated working template and now all we need to do is add an extra module into it to add an",
    "start": "1873440",
    "end": "1880399"
  },
  {
    "text": "application load balancer and now we can support microservices that do have service",
    "start": "1880399",
    "end": "1885639"
  },
  {
    "text": "endpoints we can also Al take a step back and apply that composability to the cluster itself in order to manage the",
    "start": "1886519",
    "end": "1893159"
  },
  {
    "start": "1887000",
    "end": "1887000"
  },
  {
    "text": "ephemeral nature of containers we want to take advantage of ECS as ability to use the concept of Docker volumes which",
    "start": "1893159",
    "end": "1899000"
  },
  {
    "text": "is mounting storage from the docker host into the container that can persist data beyond the lifetime of that",
    "start": "1899000",
    "end": "1904639"
  },
  {
    "text": "container we can take that one step further and persist data across the lifetime of an entire Docker host by",
    "start": "1904639",
    "end": "1910279"
  },
  {
    "text": "introducing EBS volumes we've logically grouped a collection of AWS Services into what we",
    "start": "1910279",
    "end": "1916080"
  },
  {
    "text": "call an attachment group uh that we can have dynamically provisioned and mounted as a unit to ECS cluster hosts as they",
    "start": "1916080",
    "end": "1922440"
  },
  {
    "text": "scale up you can apply this concept to any current or future AWS feature or service that makes sense for your",
    "start": "1922440",
    "end": "1928360"
  },
  {
    "text": "application such as another example is like elastic IPS or Enis that you can dynamically Mount to keep a consistent",
    "start": "1928360",
    "end": "1935000"
  },
  {
    "text": "um public or internal IP address for your instances we're currently collecting all game events from both game clients and",
    "start": "1935000",
    "end": "1941679"
  },
  {
    "text": "our game servers through Edge nodes deployed in four separate ads regions then that's growing all the time too but",
    "start": "1941679",
    "end": "1947279"
  },
  {
    "text": "it's very easy to roll out new regions once you've templated this out uh and we can set lofty slas for not losing the",
    "start": "1947279",
    "end": "1953480"
  },
  {
    "text": "data that we receive due to the durability of EBS even in the containerized world even as containers",
    "start": "1953480",
    "end": "1959360"
  },
  {
    "text": "come and go and even as We unexpectedly lose entire ECS clusters worth of Docker hosts the data is persisted on the",
    "start": "1959360",
    "end": "1965720"
  },
  {
    "text": "volumes and remounted as the instances are recovered so throughout our journey with",
    "start": "1965720",
    "end": "1973000"
  },
  {
    "text": "terraform and ECS we've learned some things that work for us and I'm going to try to share them with you here",
    "start": "1973000",
    "end": "1978519"
  },
  {
    "text": "in no particular order just a smattering of tips and tricks first uh when you",
    "start": "1978519",
    "end": "1984880"
  },
  {
    "text": "create a useful terraform template put it in Version Control and share it with your team the rest of your company and",
    "start": "1984880",
    "end": "1990480"
  },
  {
    "text": "potentially even the terraform Community as a whole terraform itself is completely open source and has a great community",
    "start": "1990480",
    "end": "1996679"
  },
  {
    "text": "and in general the more people that are contributing and looking at your design the better but share specific templates",
    "start": "1996679",
    "end": "2003200"
  },
  {
    "text": "at your own discretion and audit them for any sensitive information you may be inad certainly exposing since you're",
    "start": "2003200",
    "end": "2009639"
  },
  {
    "text": "essentially sharing a blueprint of your architecture there are also useful Community Resources that already exist",
    "start": "2009639",
    "end": "2015440"
  },
  {
    "text": "online there are maintained repositories of terraform modules that can get you started with common patterns and best",
    "start": "2015440",
    "end": "2021440"
  },
  {
    "text": "practices and aws's official Blog has great articles on how to get bootstrapped using terraform on AWS in",
    "start": "2021440",
    "end": "2030000"
  },
  {
    "text": "particular we also want to make sure that our terraform templates are composable which I talked about a bit a",
    "start": "2030080",
    "end": "2036679"
  },
  {
    "text": "few slides ago so you want to keep your infrastructure separate wherever it makes sense you could technically create",
    "start": "2036679",
    "end": "2042760"
  },
  {
    "text": "Mega templates that launch your entire VPC in all of your applications from the ground up but in practice it becomes",
    "start": "2042760",
    "end": "2048240"
  },
  {
    "text": "unwieldy and inflexible it can also become mildly terrifying when you realize that you're wielding the power",
    "start": "2048240",
    "end": "2054079"
  },
  {
    "text": "to update or delete your entire environment with one or two commands if you're not 100% confident that you",
    "start": "2054079",
    "end": "2060720"
  },
  {
    "text": "understand the difference between the current state of your template file and what infrastructure you're",
    "start": "2060720",
    "end": "2065839"
  },
  {
    "text": "modifying however you also don't want to separate your templates too much there's",
    "start": "2065839",
    "end": "2071398"
  },
  {
    "text": "some additional complexity involved with the connecting input and output variables together I showed one small example of that and you don't want to",
    "start": "2071399",
    "end": "2078000"
  },
  {
    "text": "have to coordinate multiple different state files as you apply your changes across several",
    "start": "2078000",
    "end": "2083200"
  },
  {
    "text": "Stacks uh a nice rule of thumb that we found works for us is that if you find yourself colloquially referring to a",
    "start": "2083200",
    "end": "2090839"
  },
  {
    "text": "collection of resources uh as a grouping like so when we talk about ECS clusters we're actually referring to a collection",
    "start": "2090839",
    "end": "2098280"
  },
  {
    "text": "of autoscaling groups and security groups and EBS volumes but we call it our ECS cluster so that's when it kind",
    "start": "2098280",
    "end": "2105040"
  },
  {
    "text": "of makes sense to create a module that is all of those things or or its own stack that's all of those things grouped",
    "start": "2105040",
    "end": "2111240"
  },
  {
    "start": "2107000",
    "end": "2107000"
  },
  {
    "text": "together uh but it's kind of just as much magic is science you're going to have to figure out what works for application and what works for your",
    "start": "2111240",
    "end": "2118280"
  },
  {
    "text": "team you also are going to want to avoid code duplication in these modules that we're talking about uh terraform modules",
    "start": "2118280",
    "end": "2124920"
  },
  {
    "text": "can reduce that duplication if you identify common patterns and if you sh and share them across templates through",
    "start": "2124920",
    "end": "2130079"
  },
  {
    "text": "the use of modules so for example you're frequently going to want to launch cloudwatch alarms with their Associated",
    "start": "2130079",
    "end": "2135440"
  },
  {
    "text": "s SNS topics together so put that in a module put that in a common modules",
    "start": "2135440",
    "end": "2140720"
  },
  {
    "text": "repository and reference it from several other Stacks so that you don't have to reinvent the wheel every time you want",
    "start": "2140720",
    "end": "2146000"
  },
  {
    "text": "to use this pattern uh but be careful um we've found",
    "start": "2146000",
    "end": "2151280"
  },
  {
    "text": "that it's best if you're going to use a shared modules repository you might want to clone it down and maintain it yourself so that you don't have any",
    "start": "2151280",
    "end": "2157240"
  },
  {
    "text": "unexpected expected revisions made to it because terraform does have the ability to reference remote",
    "start": "2157240",
    "end": "2164078"
  },
  {
    "text": "modules also you're going to want to use remote State files once you have a running",
    "start": "2164640",
    "end": "2170440"
  },
  {
    "text": "environment launched by terraform you want other people on your team to be able to use your state file to manage it of course it can be risky to use Version",
    "start": "2170440",
    "end": "2177400"
  },
  {
    "text": "Control for this since your state file will frequently contain passwords and other sensitive information and it",
    "start": "2177400",
    "end": "2182920"
  },
  {
    "text": "actually in my opinion doesn't really make sense to have a version controlled State file since your state file should",
    "start": "2182920",
    "end": "2188480"
  },
  {
    "text": "always match the actual current state of your running resources in your environment not the state at any given",
    "start": "2188480",
    "end": "2194000"
  },
  {
    "text": "time of a commit luckily terraform has built-in functionality utilize remote State files",
    "start": "2194000",
    "end": "2200680"
  },
  {
    "text": "and there's a um it has a tool called Atlas which is a huge gap in my",
    "start": "2200680",
    "end": "2206160"
  },
  {
    "text": "experience with terraform but I've heard good things about that to for remote State file management uh but once you",
    "start": "2206160",
    "end": "2211880"
  },
  {
    "text": "have these remote State files uh everyone will be utilizing",
    "start": "2211880",
    "end": "2217079"
  },
  {
    "text": "remote state files uh to have identical upto-date uh views into your infrastructure we",
    "start": "2217079",
    "end": "2224200"
  },
  {
    "text": "store ours on S3 which also allows us to add onto this um some robust IM access",
    "start": "2224200",
    "end": "2230240"
  },
  {
    "text": "policies so that we can do um access management for who has access to doing changes to what environments uh at the",
    "start": "2230240",
    "end": "2237200"
  },
  {
    "text": "S3 level and we also enable bucket versioning on those buckets to make sure that we can recover from anyone",
    "start": "2237200",
    "end": "2242240"
  },
  {
    "text": "accidentally deleting all of our state files which normally would be disastrous",
    "start": "2242240",
    "end": "2248200"
  },
  {
    "text": "another tip is to not be afraid to launch as many clusters as you want if anyone on your team is getting worried",
    "start": "2249040",
    "end": "2255160"
  },
  {
    "text": "about noisy neighbors or the unpredictable scaling of other tasks in their cluster or sub suboptimal Hardware",
    "start": "2255160",
    "end": "2262119"
  },
  {
    "text": "profiles for some of the instances that they'll be running on uh move them out into their own new custom provision",
    "start": "2262119",
    "end": "2267680"
  },
  {
    "text": "cluster for us we found it's better to be slightly less efficient with our resource consumption than to",
    "start": "2267680",
    "end": "2273040"
  },
  {
    "text": "accidentally take down a production system as a team we're still learning the best cluster breakdown looks like",
    "start": "2273040",
    "end": "2279240"
  },
  {
    "text": "but deployments are identical no matter how many clusters you're running so creating dozens of these things doesn't",
    "start": "2279240",
    "end": "2285480"
  },
  {
    "text": "too badly increase your operational overhead I've also ad mened this a bit",
    "start": "2285480",
    "end": "2292040"
  },
  {
    "text": "but you're going to want to tag every single resource that you launch and you want to keep those tags in your",
    "start": "2292040",
    "end": "2297079"
  },
  {
    "text": "terraform templates one of the biggest wins of capturing your ad infrastructure as code is guaranteed consistent tags on",
    "start": "2297079",
    "end": "2303800"
  },
  {
    "text": "everything that are easy to manage and Version Control stick your tags as a highle ter terraform variable that",
    "start": "2303800",
    "end": "2311319"
  },
  {
    "text": "get anytime you define a resource within that stack use the same three values",
    "start": "2311319",
    "end": "2316440"
  },
  {
    "text": "every single time on every single resource and now you're guaranteed to have consistent tagging at a minimum you",
    "start": "2316440",
    "end": "2321680"
  },
  {
    "text": "want to create an application name environment and owner tag uh and make sure that they get applied to every single resource this makes resource",
    "start": "2321680",
    "end": "2328800"
  },
  {
    "text": "attribution super easy which pays off more and more as your account grows if you're familiar with with uh tools like",
    "start": "2328800",
    "end": "2334520"
  },
  {
    "text": "Cloud Health uh it this can make it trivial to create cost analysis perspectives based on any Dimension that",
    "start": "2334520",
    "end": "2340400"
  },
  {
    "text": "you can capture in your tags you're also going to want to centralize your",
    "start": "2340400",
    "end": "2346720"
  },
  {
    "text": "logs you can use Docker log driver functionality to forward all of your logs to one place so they don't so that",
    "start": "2346720",
    "end": "2353599"
  },
  {
    "text": "you don't lose them when you lose your hosts uh you want to be able to consider your hosts to be as disposable as your",
    "start": "2353599",
    "end": "2359839"
  },
  {
    "text": "containers so ship anything that you want for debugging potential issues with your applications somewhere else we use",
    "start": "2359839",
    "end": "2366560"
  },
  {
    "text": "an elastic stack for this lacus search logs ass and Cabana but Amazon has",
    "start": "2366560",
    "end": "2371640"
  },
  {
    "text": "recently released cloudwatch logs Integrations directly with ECS if you roll your own solution like an elastic",
    "start": "2371640",
    "end": "2377520"
  },
  {
    "text": "stack make sure that you include a way to insert information about what task host and container ID those logs are",
    "start": "2377520",
    "end": "2383599"
  },
  {
    "text": "originating from because it can be get pretty confusing pretty quickly but the cloudwatch logs integration that Amazon",
    "start": "2383599",
    "end": "2389280"
  },
  {
    "text": "rolled out has that functionality built in also with the rapid evolution of",
    "start": "2389280",
    "end": "2396280"
  },
  {
    "text": "features for both a ws and terraform staying up to date with what's coming up is important the features that enabled",
    "start": "2396280",
    "end": "2402880"
  },
  {
    "text": "us to do this talk and use these patterns that I've shared here are less than a year old in fact some of them are",
    "start": "2402880",
    "end": "2408400"
  },
  {
    "text": "only a couple months old and I'm sure by the next reinvent there's going to be a lot more improvements to",
    "start": "2408400",
    "end": "2413440"
  },
  {
    "text": "incorporate uh good starting places are aws's own blog with the ECS tag uh and",
    "start": "2413440",
    "end": "2418800"
  },
  {
    "text": "terraforms own GitHub repository change log uh which is another interesting thing to consider if your team is using",
    "start": "2418800",
    "end": "2424880"
  },
  {
    "text": "terraform make sure everyone's using the same version of terraform and if you decide to upgrade make sure everyone does it as a team because sometimes",
    "start": "2424880",
    "end": "2431960"
  },
  {
    "text": "there's some issues so so far we've talked about how",
    "start": "2431960",
    "end": "2438560"
  },
  {
    "text": "to capture your entire AWS presence in terraform templates we've also touched on how to how containerizing your",
    "start": "2438560",
    "end": "2444560"
  },
  {
    "text": "application within Docker files captures your system level dependencies the only remaining",
    "start": "2444560",
    "end": "2450800"
  },
  {
    "text": "undocumented piece of your infrastructure as code puzzle is how you create your Baseline Amis used to launch",
    "start": "2450800",
    "end": "2457520"
  },
  {
    "text": "your ec2 Docker host instances or other instances that you use to join your ECS",
    "start": "2457520",
    "end": "2462920"
  },
  {
    "text": "clusters so AWS offers an Amazon Linux based ECS image that's a great starting",
    "start": "2462920",
    "end": "2468760"
  },
  {
    "text": "point but you may want to make some changes to it uh some operation operating system level configuration",
    "start": "2468760",
    "end": "2474800"
  },
  {
    "text": "changes or if you want to incorporate things like centralized logging for system logs to fill in this",
    "start": "2474800",
    "end": "2481319"
  },
  {
    "text": "infrastructure as code Gap we use anible playbooks uh but there are a lot of other good orchestration tools out there",
    "start": "2481319",
    "end": "2487640"
  },
  {
    "text": "so you can use whatever the current hotness is for your team uh using ansible or your",
    "start": "2487640",
    "end": "2493319"
  },
  {
    "text": "orchestration tool of choice uh also has the added benefit of giving you more options for rolling out updates to",
    "start": "2493319",
    "end": "2498960"
  },
  {
    "text": "existing clusters if your cluster is not autoscaled you can easily update your",
    "start": "2498960",
    "end": "2504000"
  },
  {
    "text": "hosts in place if you maintain a good inventory which is Trivial to generate if you have good",
    "start": "2504000",
    "end": "2509720"
  },
  {
    "text": "tags if your cluster is autoscaled any changes you make to your hosts that you don't also capture in your Ami used in",
    "start": "2509720",
    "end": "2516440"
  },
  {
    "text": "your launch configuration will of course eventually be lost but using anible uh to update your Ami and",
    "start": "2516440",
    "end": "2522720"
  },
  {
    "text": "your existing instances simultaneously uh will solve that problem if relaunching your cluster isn't an",
    "start": "2522720",
    "end": "2529680"
  },
  {
    "text": "option also another thing to consider when you're creating your task definitions pay especially pay especially close",
    "start": "2530240",
    "end": "2536800"
  },
  {
    "text": "attention to the maximum memory that you allow your tasks to allocate so this is maximum memory not soft memory if your",
    "start": "2536800",
    "end": "2544119"
  },
  {
    "text": "container grows beyond this allocation it's going to be immediately and mercilessly killed by ECS luckily",
    "start": "2544119",
    "end": "2550480"
  },
  {
    "text": "because of our fault tolerant designs this will most likely be quickly rescheduled and you may not even notice",
    "start": "2550480",
    "end": "2555800"
  },
  {
    "text": "any service degradation but it's important to know that this is happening in a worst case scenario whether it's",
    "start": "2555800",
    "end": "2561960"
  },
  {
    "text": "due to an unexpectedly High load or a bad configuration your application may be getting cycled almost immediately",
    "start": "2561960",
    "end": "2567599"
  },
  {
    "text": "upon launch and it could be dying for another of other reasons as well and we don't want to accidentally mask these",
    "start": "2567599",
    "end": "2573400"
  },
  {
    "text": "issues with our efficient rescheduling in ECS one can convenient way to make sure that this isn't happening is to",
    "start": "2573400",
    "end": "2579040"
  },
  {
    "text": "take advantage of the cloudwatch cloudwatch metrics that AWS is already collecting for you for statically",
    "start": "2579040",
    "end": "2585359"
  },
  {
    "text": "configured tasks you can set hard thresholds on task counts to alarm you",
    "start": "2585359",
    "end": "2590960"
  },
  {
    "text": "if any variation happens to that task count for dynamic tasks it's nice to capture your time series metrics in a",
    "start": "2590960",
    "end": "2598040"
  },
  {
    "text": "dashboard this is a screenshot from cloud watch's built-in dashboard functionality so that you can become",
    "start": "2598040",
    "end": "2603640"
  },
  {
    "text": "familiar with what looks good for your application what does it look like under normal load circumstances and this is",
    "start": "2603640",
    "end": "2609480"
  },
  {
    "text": "just an example of our log stash containers running in a particular environment that did all die for some",
    "start": "2609480",
    "end": "2615480"
  },
  {
    "text": "reason at one point and we didn't notice it until we saw it on the dashboard and then we were able to track down an issue we",
    "start": "2615480",
    "end": "2622160"
  },
  {
    "text": "had also as I've mentioned previously most resource dependencies in terraform are",
    "start": "2622440",
    "end": "2628599"
  },
  {
    "text": "implicit it knows when resources need to be created in a certain order usually through one resource referencing the",
    "start": "2628599",
    "end": "2634520"
  },
  {
    "text": "attributes of another however if you have specific dependencies that require certain infrastructure to be created",
    "start": "2634520",
    "end": "2640640"
  },
  {
    "text": "even if there is an implicit AWS dependency you can manually create that dependency in your templates but be",
    "start": "2640640",
    "end": "2647119"
  },
  {
    "text": "careful not to create cyclical dependencies since that will immediately render your template useless and you",
    "start": "2647119",
    "end": "2652640"
  },
  {
    "text": "also don't want to create any unnecessary dependencies since this this can reduce the amount of parallelization",
    "start": "2652640",
    "end": "2658079"
  },
  {
    "text": "terraform can take advantage of to launch your resources quickly if you feel yourself running into a dependency",
    "start": "2658079",
    "end": "2663599"
  },
  {
    "text": "struggle you can utilize terraforms handy graph command to put a visual representation of the connection between",
    "start": "2663599",
    "end": "2669280"
  },
  {
    "text": "your resources which is this as an example of here uh similarly you can also Define",
    "start": "2669280",
    "end": "2674880"
  },
  {
    "text": "rules for how terraform will execute plans that modify or destroy your resources you can specify whether or not",
    "start": "2674880",
    "end": "2681240"
  },
  {
    "text": "it should create the replacement infrastructure before it destroys the replaced infrastructure which can be",
    "start": "2681240",
    "end": "2686520"
  },
  {
    "text": "helpful when you're rebuilding Autos like for example this can be helpful when you're rebuilding Auto scal Group Autos scaling groups that are behind",
    "start": "2686520",
    "end": "2691920"
  },
  {
    "text": "elastic load balancers since if you force terraform to finish creating your new asgs before deleting the old ones",
    "start": "2691920",
    "end": "2698960"
  },
  {
    "text": "you're always going to have healthy instances back in your elb and so depending on your application requirements this can be a quick and",
    "start": "2698960",
    "end": "2704720"
  },
  {
    "text": "easy way to implement a zero downtime deployment so that about wraps it up for",
    "start": "2704720",
    "end": "2711680"
  },
  {
    "text": "our journey with ECS and terraform uh there are a lot more similar stories about solving engineering challenges",
    "start": "2711680",
    "end": "2717920"
  },
  {
    "text": "with containers and other Technologies shared by more teams at Riot over on our engineering blog which is updated",
    "start": "2717920",
    "end": "2723559"
  },
  {
    "text": "frequently we also have a data science specific blog that show cases some experimental game design research done",
    "start": "2723559",
    "end": "2729440"
  },
  {
    "text": "with the data that we ingest through the topologies that I've shared with you here today and one last Shameless plug uh Ry",
    "start": "2729440",
    "end": "2737319"
  },
  {
    "text": "is having a gathering tonight 6:30 to 10:30 in the Venetian with free foods drinks and games so if you want to come",
    "start": "2737319",
    "end": "2742839"
  },
  {
    "text": "talk to me about this talk or any of our other Engineers there'll be a lot of them there about our other challenges with League of Legends or at Riot games",
    "start": "2742839",
    "end": "2748839"
  },
  {
    "text": "as a whole come hang out or even if you just want to drink and play games uh thanks for your time and remember to",
    "start": "2748839",
    "end": "2754800"
  },
  {
    "text": "fill out your evaluations",
    "start": "2754800",
    "end": "2758200"
  }
]