[
  {
    "text": "alright let's get started good morning everyone I'm Alex meadows",
    "start": "2570",
    "end": "7890"
  },
  {
    "text": "I'm a product manager with relativity and this is a session on database cloud",
    "start": "7890",
    "end": "14490"
  },
  {
    "text": "map thank you so much for coming today this beautiful Friday morning after a",
    "start": "14490",
    "end": "20670"
  },
  {
    "text": "big party and it's amazing to see the full room here thank you so much guys",
    "start": "20670",
    "end": "26010"
  },
  {
    "text": "you're amazing so let's get started today we're going to talk about few",
    "start": "26010",
    "end": "33690"
  },
  {
    "text": "topics so why we build a diverse cloud map the service that we launched a couple of days ago and they hope you had",
    "start": "33690",
    "end": "40620"
  },
  {
    "text": "a chance to look at it familiarize yourself I'm gonna discuss the key use cases that we support and of",
    "start": "40620",
    "end": "48480"
  },
  {
    "text": "course we important more we use cases and it would be happy to chat with you guys after that session you know have a",
    "start": "48480",
    "end": "55079"
  },
  {
    "text": "Q&A obviously to learn about your use cases and understand how we can help you",
    "start": "55079",
    "end": "60539"
  },
  {
    "text": "build more resilient applications faster I will talk about a case estimate that",
    "start": "60539",
    "end": "66810"
  },
  {
    "text": "we have an exciting guest today that's absolutely amazing to have this guy here",
    "start": "66810",
    "end": "73200"
  },
  {
    "text": "with us that's I'll keep it's really exciting",
    "start": "73200",
    "end": "78270"
  },
  {
    "text": "I'll keep it till till we go to the ecosystem part then we'll briefly touch on availability and pricing for this",
    "start": "78270",
    "end": "84960"
  },
  {
    "text": "service and of course I hope we're gonna have time for Q&A I will we will address all the questions that you have all",
    "start": "84960",
    "end": "92579"
  },
  {
    "text": "right so first of all why we decided to build AWS cloud map and primarily that's",
    "start": "92579",
    "end": "99509"
  },
  {
    "text": "because in modern applications we use a wide variety of resources it's not just",
    "start": "99509",
    "end": "105930"
  },
  {
    "text": "easy to instances anymore it's much more than that you have your micro services that run in your pcs per gate maybe you",
    "start": "105930",
    "end": "114750"
  },
  {
    "text": "have your ETS running you have your cloud storage of your cloud databases",
    "start": "114750",
    "end": "119850"
  },
  {
    "text": "you have queues you have a lot of different services a lot of different",
    "start": "119850",
    "end": "125280"
  },
  {
    "text": "resources to connect to and the complexity grows really exponentially",
    "start": "125280",
    "end": "130679"
  },
  {
    "text": "with the number of components in the system it becomes really have to manage all your components in",
    "start": "130679",
    "end": "136680"
  },
  {
    "text": "configuration file let's say and more than that we do have multiple versions",
    "start": "136680",
    "end": "142739"
  },
  {
    "text": "we do have multiple deployment stages and it's getting bigger and beginning",
    "start": "142739",
    "end": "148410"
  },
  {
    "text": "bigger and more difficult to manage on top of that we deploy our applications",
    "start": "148410",
    "end": "154110"
  },
  {
    "text": "on the infrastructure that scales dynamically with load which is yet",
    "start": "154110",
    "end": "159480"
  },
  {
    "text": "another dimension of complexity that we want to address with AWS cloud map and",
    "start": "159480",
    "end": "165480"
  },
  {
    "text": "of course with all these dynamic resources some endpoints sometimes go down being replaced and you most",
    "start": "165480",
    "end": "172830"
  },
  {
    "text": "certainly want to stop routing traffic to your health resources and just make sure that healthy staff gets gets",
    "start": "172830",
    "end": "179310"
  },
  {
    "text": "discovered so your applications will keep running even if part of the",
    "start": "179310",
    "end": "187260"
  },
  {
    "text": "endpoints fail so the way to address all the complexity",
    "start": "187260",
    "end": "192870"
  },
  {
    "text": "well we call it service discovery and then very high-level it's the ability to find the location of a service provider",
    "start": "192870",
    "end": "199829"
  },
  {
    "text": "as simple as getting resolution of your",
    "start": "199829",
    "end": "204840"
  },
  {
    "text": "name my app that can be resolved to a few endpoints or maybe my logs that can",
    "start": "204840",
    "end": "210720"
  },
  {
    "text": "resolve to a few as three buckets that will restore your logs something like",
    "start": "210720",
    "end": "216600"
  },
  {
    "text": "that and there are two primary two general patterns in service discovery",
    "start": "216600",
    "end": "222690"
  },
  {
    "text": "the one of them the first is the first one I want to touch on is server-side",
    "start": "222690",
    "end": "228590"
  },
  {
    "text": "service discovery we know load balancers we use load balancers that's an amazing",
    "start": "228590",
    "end": "236069"
  },
  {
    "text": "tool so you get you get your load balancer and the discovery problem is",
    "start": "236069",
    "end": "241530"
  },
  {
    "text": "abstracted away your applications just need to know who the endpoint of that load balancer but all the connections of",
    "start": "241530",
    "end": "248459"
  },
  {
    "text": "course are proxied and you add a bit of latency with load balancers for many",
    "start": "248459",
    "end": "256109"
  },
  {
    "text": "customers that not not really desirable in some use cases so with a different",
    "start": "256109",
    "end": "262620"
  },
  {
    "text": "pattern client-side load balancing in that case it was fine cereza scout is there is no load",
    "start": "262620",
    "end": "268490"
  },
  {
    "text": "balancer in that picture instead with the service registry so your connections",
    "start": "268490",
    "end": "274460"
  },
  {
    "text": "are direct to your upstream resources but you have fewer components in your",
    "start": "274460",
    "end": "280009"
  },
  {
    "text": "system but your clients must be registry aware so there is no single and poor into connection resolve you",
    "start": "280009",
    "end": "288460"
  },
  {
    "text": "automatically so you need to know how to call the service registry to retrieve these resources and of course the client",
    "start": "288460",
    "end": "295280"
  },
  {
    "text": "side button our load balancing applies in that case so there are a lot of existing solutions in that space but all",
    "start": "295280",
    "end": "303620"
  },
  {
    "text": "of them require setup and management and we heard that you guys would love to",
    "start": "303620",
    "end": "310430"
  },
  {
    "text": "have a managed service that does exactly that that's exactly why we introduced",
    "start": "310430",
    "end": "316639"
  },
  {
    "text": "AWS cloud map it's a tool to build a dynamic map of the cloud with cloud map",
    "start": "316639",
    "end": "324409"
  },
  {
    "text": "you can define convenient names friendly names for all your cloud resources it's not only about endpoints it's about",
    "start": "324409",
    "end": "331340"
  },
  {
    "text": "every single cloud resource that you have when the registry key resources you",
    "start": "331340",
    "end": "337370"
  },
  {
    "text": "can define additional attributes such as deployment stage version deployment",
    "start": "337370",
    "end": "343940"
  },
  {
    "text": "color maybe and then when you do a discovery course you can reference these attributes and filter out tilt it down",
    "start": "343940",
    "end": "350960"
  },
  {
    "text": "the results set to get only the resources that that you really need so",
    "start": "350960",
    "end": "357409"
  },
  {
    "text": "we do support health checking for ap based resources so with that cloud map",
    "start": "357409",
    "end": "365599"
  },
  {
    "text": "ensures that only healthy endpoints are returned back to you so you never out",
    "start": "365599",
    "end": "370819"
  },
  {
    "text": "traffic to unhealthy healthy stuff and of course you get highly available DNS",
    "start": "370819",
    "end": "377509"
  },
  {
    "text": "highly available regionally P is for for discovery so you get the best of both",
    "start": "377509",
    "end": "383090"
  },
  {
    "text": "worlds you can discover you things are in DNS and our API I will get deeper",
    "start": "383090",
    "end": "389719"
  },
  {
    "text": "into this features and use cases in a second so let's start with a high-level",
    "start": "389719",
    "end": "396620"
  },
  {
    "text": "picture of what could be your pretty simple cloud application can have your web server the trance on",
    "start": "396620",
    "end": "405050"
  },
  {
    "text": "Amazon eks with your background components that run in Fargate mode on",
    "start": "405050",
    "end": "411750"
  },
  {
    "text": "Amazon ECS you have your payments integration application that runs from",
    "start": "411750",
    "end": "418410"
  },
  {
    "text": "ec2 maybe another scaling group and you have your payments DB on RDS let's say",
    "start": "418410",
    "end": "426200"
  },
  {
    "text": "also you can have your shared logs and they'll learn the function that",
    "start": "426200",
    "end": "431250"
  },
  {
    "text": "processes logs so you have all these components and some of these components as well they need to connect to each",
    "start": "431250",
    "end": "437100"
  },
  {
    "text": "other front-end back-end back-end to payments payments to database so how do we do",
    "start": "437100",
    "end": "443400"
  },
  {
    "text": "that with little your squad map you can get a friendly name resolution so you",
    "start": "443400",
    "end": "449040"
  },
  {
    "text": "can assign convenient names for all your application components and resolve them at runtime let me just walk you through",
    "start": "449040",
    "end": "458730"
  },
  {
    "text": "this service registry database cloud map has a highly available service registry",
    "start": "458730",
    "end": "464010"
  },
  {
    "text": "in its core that allows you to store any type of cloud resources that we have",
    "start": "464010",
    "end": "470400"
  },
  {
    "text": "three levels of hierarchy so the top level is a namespace which is a logical group of resources at work of services",
    "start": "470400",
    "end": "477210"
  },
  {
    "text": "with command visibility and common resolution type so under that you can",
    "start": "477210",
    "end": "482460"
  },
  {
    "text": "have services you can have multiple services within your namespace you know namespace would be a stuff like cloud",
    "start": "482460",
    "end": "487740"
  },
  {
    "text": "knobbed amacom the examples I'm going to use in my demo and histories can be back-end dot gamma calm that service",
    "start": "487740",
    "end": "496290"
  },
  {
    "text": "defines how the service instances are registered in DNS and in the API",
    "start": "496290",
    "end": "503570"
  },
  {
    "text": "discovery plane so your service instances are actual resources with IPS or the URLs or Arne's that you can nap",
    "start": "503570",
    "end": "511770"
  },
  {
    "text": "to and let's take a look at an example",
    "start": "511770",
    "end": "516840"
  },
  {
    "text": "of the API how we create our we register your resources first step and that used",
    "start": "516840",
    "end": "523979"
  },
  {
    "text": "in that case I'm using API and DNS discovery I'm creating a pavilion as",
    "start": "523979",
    "end": "529680"
  },
  {
    "text": "namespace then I'm creating a service and they provision and very short",
    "start": "529680",
    "end": "534750"
  },
  {
    "text": "configuration DNA for the DNS I'm using a particular namespace that I just created then I'm using DNS descriptions",
    "start": "534750",
    "end": "544800"
  },
  {
    "text": "so it's going to be type-a with TTL of 60 seconds right after that I can start",
    "start": "544800",
    "end": "550500"
  },
  {
    "text": "registering instances against that service and they definitely want to",
    "start": "550500",
    "end": "555660"
  },
  {
    "text": "provide an IEP but on top of it they can put some custom attributes these are absolutely custom you can put whatever",
    "start": "555660",
    "end": "561270"
  },
  {
    "text": "you want so in that case I put stage beta version 1.0 and readiness flag I'm",
    "start": "561270",
    "end": "566760"
  },
  {
    "text": "saying yes it's radio that how we register IP based resources if you want",
    "start": "566760",
    "end": "572310"
  },
  {
    "text": "to enable DNS resolution however some resources cannot be discovered via DNS",
    "start": "572310",
    "end": "578610"
  },
  {
    "text": "things like your DynamoDB like your three buckets but just a piece so we",
    "start": "578610",
    "end": "585480"
  },
  {
    "text": "have an API based discovery in that case you create an a so called HTTP namespace you could you use that API after that",
    "start": "585480",
    "end": "592890"
  },
  {
    "text": "same steps create service you don't need to define your HTTP configure through",
    "start": "592890",
    "end": "598440"
  },
  {
    "text": "the Jenners config in amore it just doesn't imply to that type of resolution",
    "start": "598440",
    "end": "603600"
  },
  {
    "text": "and you just power you register your services and you put whatever attributes",
    "start": "603600",
    "end": "609180"
  },
  {
    "text": "you want in that case I want to put my arm again with some custom attributes",
    "start": "609180",
    "end": "618080"
  },
  {
    "text": "how we resolve that so now we have all this stuff stored in the service",
    "start": "618440",
    "end": "624180"
  },
  {
    "text": "registry in that case I'm using my API discovery plane and the middle might",
    "start": "624180",
    "end": "630450"
  },
  {
    "text": "discover the instances of API call with my own race apply my the name of my",
    "start": "630450",
    "end": "636780"
  },
  {
    "text": "namespace that case it's shared and service name that case logs I'm getting",
    "start": "636780",
    "end": "642540"
  },
  {
    "text": "back all the information that they put together along with health status is it's unknown at the at the moment we are",
    "start": "642540",
    "end": "648810"
  },
  {
    "text": "not house checking s3 buckets",
    "start": "648810",
    "end": "654560"
  },
  {
    "text": "alternatively you can use API based discovery let's say for the front-end",
    "start": "654560",
    "end": "659940"
  },
  {
    "text": "service that was created in a different namespace it supports DNS discovery you",
    "start": "659940",
    "end": "665850"
  },
  {
    "text": "can do just dig command and get back list of a piece as simple as that",
    "start": "665850",
    "end": "671790"
  },
  {
    "text": "and of course you can discover the stuff over api's as well no problem with that and of course it's really easy to use",
    "start": "671790",
    "end": "681480"
  },
  {
    "text": "the attribute-based discovery with a SS cloud map imagine we have a number of",
    "start": "681480",
    "end": "686720"
  },
  {
    "text": "tasks or containers running with with the setup attribute that you guys",
    "start": "686720",
    "end": "692220"
  },
  {
    "text": "defined I say stage version and readiness flag when I make my API call",
    "start": "692220",
    "end": "698790"
  },
  {
    "text": "to discover instances API and they supply my stage as a query parameter data calls to probably get back just to",
    "start": "698790",
    "end": "705480"
  },
  {
    "text": "resources to endpoints that compute that correspond to that stage where I can say",
    "start": "705480",
    "end": "711210"
  },
  {
    "text": "it gave me resources Federation one or I can combine multiple query parameters",
    "start": "711210",
    "end": "717540"
  },
  {
    "text": "and get both let's say brush and chew and ready yes at the endpoint that",
    "start": "717540",
    "end": "722570"
  },
  {
    "text": "responds to these parameters that's how you use the attribute base to River",
    "start": "722570",
    "end": "728640"
  },
  {
    "text": "service discovery easy and intuitive so",
    "start": "728640",
    "end": "733680"
  },
  {
    "text": "what gives you well obviously you can work with incremental deployments you can work with deployments and multiple",
    "start": "733680",
    "end": "741540"
  },
  {
    "text": "in multiple environments and of course it enables smart traffic routing",
    "start": "741540",
    "end": "747030"
  },
  {
    "text": "sometimes that I'm going to touch on it later that's that's really cool that",
    "start": "747030",
    "end": "753630"
  },
  {
    "text": "only is an example of that API call I supply my query parameters vehicles yes",
    "start": "753630",
    "end": "759090"
  },
  {
    "text": "and yeah I'm getting just one and pouring that corresponds to that particular query the next topic I would",
    "start": "759090",
    "end": "768240"
  },
  {
    "text": "love to discuss is about handling partial failure it's really important to",
    "start": "768240",
    "end": "773850"
  },
  {
    "text": "make sure that your applications run smoothly there are no problems even when",
    "start": "773850",
    "end": "780150"
  },
  {
    "text": "some of the resources go down and stop responding you want to set traffic to resources at our houses service",
    "start": "780150",
    "end": "786270"
  },
  {
    "text": "providers LC and can continue through traffic so let's say I'm doing my",
    "start": "786270",
    "end": "792330"
  },
  {
    "text": "discovery instances API call I get back to a piece because those are healthy and",
    "start": "792330",
    "end": "798980"
  },
  {
    "text": "we are using Amazon routes which is free health checks to ensure that resources are healthy if",
    "start": "798980",
    "end": "805440"
  },
  {
    "text": "something goes wrong and one of the resources gets unhealthy fails goes down",
    "start": "805440",
    "end": "811139"
  },
  {
    "text": "we just shut this you shut your easy stop your ec2 instance for example your next discovery",
    "start": "811139",
    "end": "819089"
  },
  {
    "text": "instances API call automatically returned only the health endpoint of",
    "start": "819089",
    "end": "824100"
  },
  {
    "text": "course you have control over that you can provide additional parameters and",
    "start": "824100",
    "end": "829800"
  },
  {
    "text": "get unhealthy resources as well I'm going to show it later so what it gives you it gives you a way",
    "start": "829800",
    "end": "838589"
  },
  {
    "text": "to direct traffic to health endpoints and of course we have an API that you",
    "start": "838589",
    "end": "845490"
  },
  {
    "text": "can use to check the health status of all your services that would be an",
    "start": "845490",
    "end": "851790"
  },
  {
    "text": "example of that API call so we start with creating a service that has a DNS",
    "start": "851790",
    "end": "858930"
  },
  {
    "text": "configure health checking resources and points that reside in dns in that case",
    "start": "858930",
    "end": "866970"
  },
  {
    "text": "so we provide health check config which would be let's say type TCP and file",
    "start": "866970",
    "end": "872519"
  },
  {
    "text": "failure threshold 3 that's the default how many times the health checker would",
    "start": "872519",
    "end": "879439"
  },
  {
    "text": "understand so finds the resource unhealthy before it flips the status",
    "start": "879439",
    "end": "884720"
  },
  {
    "text": "then register instances and providing IPS and ports why we need force because",
    "start": "884720",
    "end": "891810"
  },
  {
    "text": "it's the tcp house jack it needs to know which port to hit and you register",
    "start": "891810",
    "end": "898230"
  },
  {
    "text": "multiple instances with a healthy and intensive which just gives them convenient names and when I do my",
    "start": "898230",
    "end": "905790"
  },
  {
    "text": "unhealthy instance points to a fake ID that doesn't exist when I do my d",
    "start": "905790",
    "end": "913139"
  },
  {
    "text": "command I just get the health resource back I'll say P back I can call my get",
    "start": "913139",
    "end": "919589"
  },
  {
    "text": "instance health status API which returns me the health status for my my endpoints",
    "start": "919589",
    "end": "924839"
  },
  {
    "text": "and alternatively I can do discover instances call and provide that",
    "start": "924839",
    "end": "930959"
  },
  {
    "text": "additional parameter health status and say I'm healthy I'll get back on health endpoints if I",
    "start": "930959",
    "end": "938100"
  },
  {
    "text": "say all I'll get back : points and by default is returns healthy only what it gives you",
    "start": "938100",
    "end": "946290"
  },
  {
    "text": "it gives you a way to control your traffic but you we also have the custom",
    "start": "946290",
    "end": "952500"
  },
  {
    "text": "health checks implemented it's a kind of cool tool that allows you to start and",
    "start": "952500",
    "end": "957840"
  },
  {
    "text": "stop traffic routing to your endpoints that will so it gives you a reliable propagation of health status to your",
    "start": "957840",
    "end": "965570"
  },
  {
    "text": "endpoint so there is no active health checking happening it's an API that you can call to say this endpoint is healthy",
    "start": "965570",
    "end": "972810"
  },
  {
    "text": "or unhealthy so you really control when you want to start and stop traffic",
    "start": "972810",
    "end": "978570"
  },
  {
    "text": "routing and when you say some healthy just to get it here it's not removed from our system it's removed from",
    "start": "978570",
    "end": "985680"
  },
  {
    "text": "routing it's still it's still in our system with all the attributes you can always access it you can always figure",
    "start": "985680",
    "end": "992790"
  },
  {
    "text": "out what's going on you can always flip the status back to healthy so traffic gets back to that to",
    "start": "992790",
    "end": "999150"
  },
  {
    "text": "that resource but I was talking for what a long time and they think it's time to",
    "start": "999150",
    "end": "1007910"
  },
  {
    "text": "show a little demo just give me a quick second all right here we go we're",
    "start": "1007910",
    "end": "1021980"
  },
  {
    "text": "looking right now at the console beautiful console of the blest cloud map",
    "start": "1021980",
    "end": "1028189"
  },
  {
    "text": "and here I have two namespaces you find two groups of services the cloud and",
    "start": "1028190",
    "end": "1034339"
  },
  {
    "text": "amacom which supports API calls and public dns resolution and shared",
    "start": "1034339",
    "end": "1040640"
  },
  {
    "text": "namespace where I have my just things that can be discovered via dns such as",
    "start": "1040640",
    "end": "1047900"
  },
  {
    "text": "lambda functions and logs so let's take a look at it I have my back-end payments",
    "start": "1047900",
    "end": "1054230"
  },
  {
    "text": "DB and payments integration application here these are my services and let's see",
    "start": "1054230",
    "end": "1064070"
  },
  {
    "text": "what I've got inside I have my service instances this is my far gate",
    "start": "1064070",
    "end": "1069450"
  },
  {
    "text": "going back and forget deployment I have two tasks running at the moment both are",
    "start": "1069450",
    "end": "1074549"
  },
  {
    "text": "healthy let's say I want to scale up",
    "start": "1074549",
    "end": "1082350"
  },
  {
    "text": "let's check my ICS cluster and they have two running tasks at the moment say I",
    "start": "1082350",
    "end": "1090510"
  },
  {
    "text": "want to go and scale up to four it still",
    "start": "1090510",
    "end": "1096690"
  },
  {
    "text": "shows - it's gonna take probably a moment about ten fifty seconds before they appear in the meantime let's take a",
    "start": "1096690",
    "end": "1104399"
  },
  {
    "text": "look at what we get with our discovery",
    "start": "1104399",
    "end": "1115010"
  },
  {
    "text": "back-end cloud and we get to a piece so",
    "start": "1115010",
    "end": "1125070"
  },
  {
    "text": "it's not this change is not yet applied and if I go and do my discovery call I",
    "start": "1125070",
    "end": "1135289"
  },
  {
    "text": "get back two instances just look at that",
    "start": "1135289",
    "end": "1140760"
  },
  {
    "text": "just look at the richness of data that you get back with with your API",
    "start": "1140760",
    "end": "1146039"
  },
  {
    "text": "discovery you had your ApS with DNS here you're getting stuff like a beautiful",
    "start": "1146039",
    "end": "1152880"
  },
  {
    "text": "zone if you use easy too easy to launch type with with ACS you get your issue to",
    "start": "1152880",
    "end": "1159419"
  },
  {
    "text": "instance ID with that information your client applications make can make smart",
    "start": "1159419",
    "end": "1164669"
  },
  {
    "text": "routing decisions and they can go to applications that sit in the same availability zone no more crazy calls",
    "start": "1164669",
    "end": "1171870"
  },
  {
    "text": "that's awesome and even more if it happens at your your certain containers",
    "start": "1171870",
    "end": "1179909"
  },
  {
    "text": "the tasks reside on the same issue machine while no network calls it just",
    "start": "1179909",
    "end": "1185279"
  },
  {
    "text": "goes to the local machine that's that's absolutely amazing so now let's double check what's going",
    "start": "1185279",
    "end": "1192000"
  },
  {
    "text": "on with with our forget cluster and now we have four running tasks and I would",
    "start": "1192000",
    "end": "1198269"
  },
  {
    "text": "totally expect to get back four instances now and indeed all that thing is how to",
    "start": "1198269",
    "end": "1205910"
  },
  {
    "text": "magically register for you no work required on your side just enable service discovery when you create your",
    "start": "1205910",
    "end": "1212200"
  },
  {
    "text": "GS GS service and pointed to a specific namespace so I have my four instances",
    "start": "1212200",
    "end": "1220780"
  },
  {
    "text": "what do you do with them know what I really want to connect to to turn",
    "start": "1220780",
    "end": "1228650"
  },
  {
    "text": "upstream service in us us to a so I supply my parameter query parameter",
    "start": "1228650",
    "end": "1235310"
  },
  {
    "text": "availability zone equals us west to a and I get back to endpoints that resides right there and actor that stuff don't",
    "start": "1235310",
    "end": "1242420"
  },
  {
    "text": "go across a Z which is quite convenient so that in essence the integration",
    "start": "1242420",
    "end": "1249140"
  },
  {
    "text": "between CCS per gate and easy to launch modes and the SS Cloud map and it's much",
    "start": "1249140",
    "end": "1255830"
  },
  {
    "text": "better than previous version of the accessories discovery it could get back to savings or AP port combinations now",
    "start": "1255830",
    "end": "1263780"
  },
  {
    "text": "let's take a look at my front end service what's going on i we haven't seen it in the console let me describe",
    "start": "1263780",
    "end": "1270500"
  },
  {
    "text": "my kubernetes cluster vs cluster and indeed I forgot to just start it up and",
    "start": "1270500",
    "end": "1283300"
  },
  {
    "text": "why don't we just get it started I want to spin up my front end service",
    "start": "1283300",
    "end": "1291430"
  },
  {
    "text": "now it's created and let's describe my cluster it's right there so it's gonna",
    "start": "1291430",
    "end": "1299780"
  },
  {
    "text": "take about 15 seconds to propagate all the changes to cloud map while we're",
    "start": "1299780",
    "end": "1305900"
  },
  {
    "text": "looking at that let's let's look at stuff that doesn't fit DNS - three logs",
    "start": "1305900",
    "end": "1314830"
  },
  {
    "text": "that reside in a different namespace called shared so we get two different",
    "start": "1314830",
    "end": "1322220"
  },
  {
    "text": "instances one of them is read-only second one is not to different shards",
    "start": "1322220",
    "end": "1329080"
  },
  {
    "text": "that point to different history packets both in a stage beta and of course they can do exactly the same",
    "start": "1329080",
    "end": "1334640"
  },
  {
    "text": "I can just make a call and say I want to figure out which s3 bucket with locks is",
    "start": "1334640",
    "end": "1342110"
  },
  {
    "text": "read-only here you go now let's get back and see if we have all my stuff here so",
    "start": "1342110",
    "end": "1352460"
  },
  {
    "text": "let's try to discover the front end service here we go this is my ELB right",
    "start": "1352460",
    "end": "1360320"
  },
  {
    "text": "here it matches the Obi of the load balancer automatically created for you thanks to",
    "start": "1360320",
    "end": "1366650"
  },
  {
    "text": "external DNS connector that was deployed on that eks cluster so he s",
    "start": "1366650",
    "end": "1372350"
  },
  {
    "text": "automatically publishes ingress controllers to cloud map and of course you can do quick deked",
    "start": "1372350",
    "end": "1381050"
  },
  {
    "text": "for front and good map demo dot com and",
    "start": "1381050",
    "end": "1387130"
  },
  {
    "text": "of course it takes a while to get this stuff in DNS propagated that's one of",
    "start": "1387130",
    "end": "1393710"
  },
  {
    "text": "key advantages of API based discovery with cloud now it's much faster than DNS",
    "start": "1393710",
    "end": "1399380"
  },
  {
    "text": "with DNS you have to deal with change propagation time it was called map this",
    "start": "1399380",
    "end": "1405770"
  },
  {
    "text": "change propagation time is much much shorter and more than that you don't",
    "start": "1405770",
    "end": "1411200"
  },
  {
    "text": "have to worry about your TTL so it's a cashless system every time you will you",
    "start": "1411200",
    "end": "1419060"
  },
  {
    "text": "make a call you get back the current endpoint so let's see if I yeah",
    "start": "1419060",
    "end": "1425210"
  },
  {
    "text": "now it's a belated so now we have the P addresses that correspond to that load",
    "start": "1425210",
    "end": "1430790"
  },
  {
    "text": "balancer so now we have DCs and pts",
    "start": "1430790",
    "end": "1436300"
  },
  {
    "text": "integrated with AWS cloud map and of course we can register any other things",
    "start": "1436300",
    "end": "1441310"
  },
  {
    "text": "now let's take a look at our payments processor application it runs from ec2",
    "start": "1441310",
    "end": "1447850"
  },
  {
    "text": "instances and they have two a piece I was confident they have three let's",
    "start": "1447850",
    "end": "1456160"
  },
  {
    "text": "understand what's going on okay have my instanceid i1 and i3 where is my I too",
    "start": "1456160",
    "end": "1464710"
  },
  {
    "text": "health status unhealthy okay I have one",
    "start": "1466950",
    "end": "1476259"
  },
  {
    "text": "of the instances unhealthy with the instance ad that little guy I registered",
    "start": "1476259",
    "end": "1482679"
  },
  {
    "text": "it with that since the city for convenience of course so now I can go and let's say describe instant status to",
    "start": "1482679",
    "end": "1491649"
  },
  {
    "text": "understand what's going on oops looks like it's not raining and it's",
    "start": "1491649",
    "end": "1498429"
  },
  {
    "text": "been health checked so these guys are healthy they're up in rank these guys",
    "start": "1498429",
    "end": "1505629"
  },
  {
    "text": "aren't healthy it's not it's not visible in your DNS resolution nor in your API",
    "start": "1505629",
    "end": "1512139"
  },
  {
    "text": "resolution let's try to maybe spin it up",
    "start": "1512139",
    "end": "1518070"
  },
  {
    "text": "and probably it's gonna take a while yeah it was stopped previously now it's",
    "start": "1518609",
    "end": "1524289"
  },
  {
    "text": "pending it's gonna take a while and they have my last piece of the API that I",
    "start": "1524289",
    "end": "1532119"
  },
  {
    "text": "really wanted to show you today it's my payment DB again I have my",
    "start": "1532119",
    "end": "1537609"
  },
  {
    "text": "little Aurora instance surrealist of course that they registered in a",
    "start": "1537609",
    "end": "1544629"
  },
  {
    "text": "depressed cloud map with a bunch of attributes that I believe are quite important starting from obviously my C name",
    "start": "1544629",
    "end": "1553080"
  },
  {
    "text": "cluster ID min max capacity that can help me understand what's going on with",
    "start": "1553080",
    "end": "1560409"
  },
  {
    "text": "things like version port stage I get the full arm of that particular database but",
    "start": "1560409",
    "end": "1566830"
  },
  {
    "text": "also I have links to my configuration that is stored in Systems Manager",
    "start": "1566830",
    "end": "1573399"
  },
  {
    "text": "parameter store and they have a link to my secret that is stored in AWS series",
    "start": "1573399",
    "end": "1578619"
  },
  {
    "text": "manager now when it can when it discovers that particular endpoint what I can do I can probably go and retrieve",
    "start": "1578619",
    "end": "1586330"
  },
  {
    "text": "my configuration for the file or we go that's the configuration to connect to",
    "start": "1586330",
    "end": "1591909"
  },
  {
    "text": "that particular database instance I won't show you my secret for obvious reasons",
    "start": "1591909",
    "end": "1598310"
  },
  {
    "text": "while we were looking at that that example I think the ec2 instance is back",
    "start": "1598310",
    "end": "1606570"
  },
  {
    "text": "up and running but to sum up what's going on here you can register any cloud resources you",
    "start": "1606570",
    "end": "1613140"
  },
  {
    "text": "can link them to configurations to secrets you can leverage the full power",
    "start": "1613140",
    "end": "1618450"
  },
  {
    "text": "of AWS you can link it to other services that are meaningful for your use cases",
    "start": "1618450",
    "end": "1624660"
  },
  {
    "text": "and build the applications with less separation overhead and with well",
    "start": "1624660",
    "end": "1631620"
  },
  {
    "text": "basically the real full power of AWS let's check it out and see if we have",
    "start": "1631620",
    "end": "1639740"
  },
  {
    "text": "unhealthy instances oops no and health instances anymore awesome let's just get",
    "start": "1639740",
    "end": "1646890"
  },
  {
    "text": "rid of that thing and we have three healthy instances Tryon can discoverable",
    "start": "1646890",
    "end": "1653700"
  },
  {
    "text": "again everything is back to normal I have only three see two instances with payments processor application up and",
    "start": "1653700",
    "end": "1661470"
  },
  {
    "text": "running perfectly healthy and of course if I do dig for payments god mob demo",
    "start": "1661470",
    "end": "1672240"
  },
  {
    "text": "calm again back three a piece so health",
    "start": "1672240",
    "end": "1678000"
  },
  {
    "text": "checks are integrated with both DNS and API discovery for NP based resources so",
    "start": "1678000",
    "end": "1684840"
  },
  {
    "text": "that was my demo for the api's before I go back to slides I want to address a",
    "start": "1684840",
    "end": "1691560"
  },
  {
    "text": "couple of questions that they heard it in the last couple of days first does it",
    "start": "1691560",
    "end": "1697110"
  },
  {
    "text": "work with CloudFormation yes it does honestly does work with CloudFormation you can use you can",
    "start": "1697110",
    "end": "1702480"
  },
  {
    "text": "register your application in your CloudFormation template tree services and off you go and second how do i do",
    "start": "1702480",
    "end": "1710640"
  },
  {
    "text": "cross account calls that simple we provide for policies for manage TM",
    "start": "1710640",
    "end": "1718410"
  },
  {
    "text": "policies I was invited before I was wrong it's for that range from discover",
    "start": "1718410",
    "end": "1723540"
  },
  {
    "text": "only to full admin access so your users can assume this roles make all across",
    "start": "1723540",
    "end": "1729150"
  },
  {
    "text": "account and register things in the single service service registry all right so I",
    "start": "1729150",
    "end": "1738430"
  },
  {
    "text": "guess it's time to switch back to slides",
    "start": "1738430",
    "end": "1743760"
  },
  {
    "text": "and now let's talk about take a system",
    "start": "1743760",
    "end": "1749730"
  },
  {
    "text": "we have some really nice integrations with AWS just stable States a yes but",
    "start": "1749730",
    "end": "1757570"
  },
  {
    "text": "also we have some amazing amazing part that work with us on integration with",
    "start": "1757570",
    "end": "1763020"
  },
  {
    "text": "with the open source solutions let's quickly walk through the internal AWS",
    "start": "1763020",
    "end": "1770800"
  },
  {
    "text": "integrations Amazon SES series discovery now you get up to eight additional",
    "start": "1770800",
    "end": "1776740"
  },
  {
    "text": "attributes six in case of for date launch because well we see two instances",
    "start": "1776740",
    "end": "1782110"
  },
  {
    "text": "are really abstracted away in infer gate and you can do smart traffic routing",
    "start": "1782110",
    "end": "1788530"
  },
  {
    "text": "based on locality you can use external DNS connector for kubernetes it's an",
    "start": "1788530",
    "end": "1794950"
  },
  {
    "text": "open source project that we work with the open source communities and amazing people helped us shape it out now you",
    "start": "1794950",
    "end": "1801790"
  },
  {
    "text": "can use it with your PS to propagate all the in greece's and service service",
    "start": "1801790",
    "end": "1809290"
  },
  {
    "text": "information to cloud map another service that we launched we announced a couple",
    "start": "1809290",
    "end": "1816400"
  },
  {
    "text": "of days ago AWS app mash it's it's a managed service mesh for your AWS",
    "start": "1816400",
    "end": "1823210"
  },
  {
    "text": "applications it will use cloud map and all these attributes that ECS populates",
    "start": "1823210",
    "end": "1828790"
  },
  {
    "text": "to make the smart routing decisions really because so you don't really have to worry about it you won't have to",
    "start": "1828790",
    "end": "1835240"
  },
  {
    "text": "build your clients in a special way that that really looks up the is change",
    "start": "1835240",
    "end": "1842530"
  },
  {
    "text": "density or availability zone one other",
    "start": "1842530",
    "end": "1848050"
  },
  {
    "text": "project open source project that we worked on with amazing guys from Tet rate it's the easier integration with",
    "start": "1848050",
    "end": "1857700"
  },
  {
    "text": "AWS cloud map and with is yes with amazoness yes now when you deploy",
    "start": "1857700",
    "end": "1865680"
  },
  {
    "text": "the Tetra it is your cloud map iterator on your ETS cluster with this you're",
    "start": "1865680",
    "end": "1871590"
  },
  {
    "text": "installed on top of it it will create a cloud map for all the information",
    "start": "1871590",
    "end": "1876840"
  },
  {
    "text": "related CCS it will automatically populate it is your control plane and it",
    "start": "1876840",
    "end": "1882030"
  },
  {
    "text": "will build service entries and droughts to all your ECS services so it's going",
    "start": "1882030",
    "end": "1888990"
  },
  {
    "text": "to look like Eureka's cluster is extended to ECS with",
    "start": "1888990",
    "end": "1895110"
  },
  {
    "text": "ZCO which is amazing this guy's from debt rate really great I've encouraged",
    "start": "1895110",
    "end": "1901770"
  },
  {
    "text": "you to go and check it out give a nice blog post on that debt rate dot IO and",
    "start": "1901770",
    "end": "1910280"
  },
  {
    "text": "now the most exciting part of today's presentation I would love to welcome on",
    "start": "1910280",
    "end": "1916290"
  },
  {
    "text": "stage mucho passion water the founder and CTO of kashikar",
    "start": "1916290",
    "end": "1923240"
  },
  {
    "text": "all right hello let me make sure I have this ready cool so thank you Alex",
    "start": "1929240",
    "end": "1935370"
  },
  {
    "text": "as Alex said I'm the founder of CTO of Hasek or were the creators of vagrant",
    "start": "1935370",
    "end": "1940650"
  },
  {
    "text": "Packer terraform vault nomad as well as console and we're super excited to have",
    "start": "1940650",
    "end": "1946890"
  },
  {
    "text": "been able to work with the a DBS team and the cloud map team on integrating console directly with cloud map so",
    "start": "1946890",
    "end": "1953190"
  },
  {
    "text": "console is our tool for distributed service networking covering discovery configuration and service mesh and",
    "start": "1953190",
    "end": "1960450"
  },
  {
    "text": "segmentation AWS let us know that console is the most widely deployed",
    "start": "1960450",
    "end": "1965580"
  },
  {
    "text": "service discovery solution on AWS today and we're excited to provide a solution",
    "start": "1965580",
    "end": "1971039"
  },
  {
    "text": "with cloud map for our joint customers so the challenge that we're facing as",
    "start": "1971039",
    "end": "1978330"
  },
  {
    "text": "Alex said is just really the growing number of services and something that comes along with this growing number of",
    "start": "1978330",
    "end": "1984360"
  },
  {
    "text": "services is that they tend to go in many many places so a lot of us adopting",
    "start": "1984360",
    "end": "1989400"
  },
  {
    "text": "cloud or adopting cloud in multiple regions we're adopting cloud from legacy on Prem infrastructure and it's usually",
    "start": "1989400",
    "end": "1995970"
  },
  {
    "text": "not an atomic operation right like we still have some stuff on Prem we still have some stuff in older other regions",
    "start": "1995970",
    "end": "2003200"
  },
  {
    "text": "and so on and we really want to be able to talk to all of them as if they're just local and so one of the primary",
    "start": "2003200",
    "end": "2010220"
  },
  {
    "text": "challenges that we see a lot is console is deployed everywhere it's in all",
    "start": "2010220",
    "end": "2016130"
  },
  {
    "text": "regions of AWS it's on your on-premise infrastructure etc and the problem that",
    "start": "2016130",
    "end": "2021740"
  },
  {
    "text": "we're looking to solve is to enable seamless syncing between all of your services no matter where they're",
    "start": "2021740",
    "end": "2027530"
  },
  {
    "text": "registered so that if you are in an AWS environment you could use cloud map and the high level HTTP api is and dns that",
    "start": "2027530",
    "end": "2034789"
  },
  {
    "text": "it gives you along with health checks to be able to find and route to those things so in this diagram here we have",
    "start": "2034789",
    "end": "2042640"
  },
  {
    "text": "AWS US East one with cloud map and we're using cloud map there but we also have",
    "start": "2042640",
    "end": "2047900"
  },
  {
    "text": "an on-prem infrastructure that of course doesn't have cloud map there and so we've deployed console we also have",
    "start": "2047900",
    "end": "2053540"
  },
  {
    "text": "other data centers we've marked another on-prem data center data center too and then another AWS region that's running",
    "start": "2053540",
    "end": "2059118"
  },
  {
    "text": "console in u.s. West one and consoles multi multi region multi",
    "start": "2059119",
    "end": "2064769"
  },
  {
    "text": "data center supported out of the box for over five years now and so this is a really common sort of deployment pattern",
    "start": "2064769",
    "end": "2070138"
  },
  {
    "text": "that we see and our integration of cloud map makes this all super super automatic and seamless so what I want to hop over",
    "start": "2070139",
    "end": "2078059"
  },
  {
    "text": "to next is an actual demo to show you how this all works and I'll explain the integration along the way",
    "start": "2078059",
    "end": "2083329"
  },
  {
    "text": "so unlike alex is gonna be a recorded video and i'm just going to voice over to make it simple okay so we have the",
    "start": "2083329",
    "end": "2091829"
  },
  {
    "text": "demo up and running here and i'm gonna start by just setting the stage so we've created a namespace in cloud map for a",
    "start": "2091829",
    "end": "2099180"
  },
  {
    "text": "domain Hacha corp dot live this is a DNS supported namespace we have some",
    "start": "2099180",
    "end": "2104489"
  },
  {
    "text": "instances in AWS that I'll show you we've set up an on-prem physical bare metal data center as well and we've",
    "start": "2104489",
    "end": "2110910"
  },
  {
    "text": "already BPM connected those so we're going to sort of ignore the networking problem here and we're gonna assume that",
    "start": "2110910",
    "end": "2115979"
  },
  {
    "text": "you either have a VPN direct connect transit gateways that they just launched you know some sort of solution to",
    "start": "2115979",
    "end": "2121410"
  },
  {
    "text": "connect those two data centers together so let's go through the video you can",
    "start": "2121410",
    "end": "2128190"
  },
  {
    "text": "see we have high script out live setup and we also have no services yet so this is just an empty cloud map namespace",
    "start": "2128190",
    "end": "2134910"
  },
  {
    "text": "just to get us going like I said we're we're setting the stage here to show you as well in route 53 we only have the",
    "start": "2134910",
    "end": "2141930"
  },
  {
    "text": "name the names namespace set up a name server setup we have no entries no a",
    "start": "2141930",
    "end": "2147390"
  },
  {
    "text": "records nothing else in here next I want to show you the ec2 instance we have so",
    "start": "2147390",
    "end": "2153960"
  },
  {
    "text": "this is us SSH into ec2 we're gonna run ifconfig just to show you here what you",
    "start": "2153960",
    "end": "2160619"
  },
  {
    "text": "can see is we have just a private IP address from directly from AWS and then",
    "start": "2160619",
    "end": "2165630"
  },
  {
    "text": "the crazy interface at the bottom is our VPN already pre-configured directly to",
    "start": "2165630",
    "end": "2170729"
  },
  {
    "text": "our on from data centers and then here what I have is two bare metal servers",
    "start": "2170729",
    "end": "2176369"
  },
  {
    "text": "that were SSH into I'm mirroring my typing on both sides so we could see we",
    "start": "2176369",
    "end": "2182519"
  },
  {
    "text": "can see it what's happening in both servers so when I run I have config here you could see that it's definitely sort",
    "start": "2182519",
    "end": "2188460"
  },
  {
    "text": "of a bare metal server has its own private IP address and then at the very bottom you can see the same",
    "start": "2188460",
    "end": "2194550"
  },
  {
    "text": "work device that is the VPN what we also have running on these two machines is",
    "start": "2194550",
    "end": "2201030"
  },
  {
    "text": "rent us and we're gonna use Redis as our example service that you want to reach from AWS back onto on Prem so I ran",
    "start": "2201030",
    "end": "2208350"
  },
  {
    "text": "Redis CLI again on both of them they're not clustered at all their separate reticences but we're just using this as",
    "start": "2208350",
    "end": "2214530"
  },
  {
    "text": "an example where this could be a Postgres database it could be a API server it can be Active Directory it",
    "start": "2214530",
    "end": "2220530"
  },
  {
    "text": "could be sort of anything that you want to be reaching back back to onto your on-prem data centers and this is just",
    "start": "2220530",
    "end": "2227910"
  },
  {
    "text": "showing you that they're running and happy the other thing that we have in our physical cluster is console already",
    "start": "2227910",
    "end": "2234750"
  },
  {
    "text": "deployed and configured so we could run console members and see that we have five servers we have the two database",
    "start": "2234750",
    "end": "2240990"
  },
  {
    "text": "servers that I just association to and showed you and then we have the three console servers already alive running",
    "start": "2240990",
    "end": "2246450"
  },
  {
    "text": "and then everything clustered together and you could see those there the other",
    "start": "2246450",
    "end": "2254580"
  },
  {
    "text": "thing we have set up to finish it up the last thing is that we have these reticences registered as services with",
    "start": "2254580",
    "end": "2261270"
  },
  {
    "text": "console already so we've named them DB here but you can see the port is six three seven nine which is the default",
    "start": "2261270",
    "end": "2266910"
  },
  {
    "text": "Redis port and we also have a health check setup which is which is make sure that Redis is alive and responding to",
    "start": "2266910",
    "end": "2272670"
  },
  {
    "text": "requests so this is already there that's already done and we could see all this by opening up the console UI and you can",
    "start": "2272670",
    "end": "2280410"
  },
  {
    "text": "see we have the database service registered and then the two on Prem instances there so that sort of sets the",
    "start": "2280410",
    "end": "2286830"
  },
  {
    "text": "stage so what we have so far just to recap is we have an empty cloud map set",
    "start": "2286830",
    "end": "2292530"
  },
  {
    "text": "up in AWS we have an ec2 instance it's just running and then on Prem we have two servers that are running",
    "start": "2292530",
    "end": "2298950"
  },
  {
    "text": "Redis they're registered with console and console is only running on the on Prem setup and they're pretty much fully",
    "start": "2298950",
    "end": "2304620"
  },
  {
    "text": "separate right now besides the VPN connection so the first thing we do to sync AWS cloud map with console is run",
    "start": "2304620",
    "end": "2313170"
  },
  {
    "text": "the console AWS sync catalog feature console AWS is the third as a tool",
    "start": "2313170",
    "end": "2318480"
  },
  {
    "text": "official tool maintained by us that you run to do the syncing process and encapsulates all the integrations that",
    "start": "2318480",
    "end": "2324600"
  },
  {
    "text": "we're doing with AWS and so it's a bi-directional sync will sink stuff from cloud map down to",
    "start": "2324600",
    "end": "2330710"
  },
  {
    "text": "console and from console up to cloud map and you can see that here you could also",
    "start": "2330710",
    "end": "2335730"
  },
  {
    "text": "run it in a single Direction mode if you just want your cloud resources to access your physical resources but not vice",
    "start": "2335730",
    "end": "2341970"
  },
  {
    "text": "versa you could run just one direction and the nice thing about this is it's a completely stateless separate process so",
    "start": "2341970",
    "end": "2349230"
  },
  {
    "text": "if this thing crashes just restart it you could run it on another machine it doesn't store any data if it's down for",
    "start": "2349230",
    "end": "2355320"
  },
  {
    "text": "five hours and you restarted it'll reconcile all your services it's a really really easy thing to run so we're",
    "start": "2355320",
    "end": "2361740"
  },
  {
    "text": "gonna start it up here and just run it we point it to our namespace ID in cloud map start it up and then pretty much",
    "start": "2361740",
    "end": "2369840"
  },
  {
    "text": "instantly we could go over to cloud map refresh and what we're gonna see is that",
    "start": "2369840",
    "end": "2375030"
  },
  {
    "text": "our two services and consoles show up directly in cloud map if we click the database which is Redis that we have you",
    "start": "2375030",
    "end": "2381720"
  },
  {
    "text": "could also see that two services were registered which is are the two database servers that we have so then if we go",
    "start": "2381720",
    "end": "2388110"
  },
  {
    "text": "over to the ec2 instance we could use cloud maps DNS to see that these show up just there just as if they were just",
    "start": "2388110",
    "end": "2394380"
  },
  {
    "text": "running on running on AWS so they show up just like that and the real power and",
    "start": "2394380",
    "end": "2399990"
  },
  {
    "text": "this is sort of if you know if you're migrating these workloads in to AWS then when you do it it's you've already sort",
    "start": "2399990",
    "end": "2405960"
  },
  {
    "text": "of set it you're using cloud map you've already set it up it's it's invisible to where these things run it doesn't matter to the end application they could just",
    "start": "2405960",
    "end": "2412020"
  },
  {
    "text": "easily connect to them I also use the Redis CLI with that host to show you",
    "start": "2412020",
    "end": "2417900"
  },
  {
    "text": "that we could connect a Redis across the VPN using cloud map for the service discovery that's a pretty neat all",
    "start": "2417900",
    "end": "2424740"
  },
  {
    "text": "automatic all really really fast as well",
    "start": "2424740",
    "end": "2429200"
  },
  {
    "text": "okay so the next thing I want to do is show you how health check sort of play into this so we're just going to shut",
    "start": "2430070",
    "end": "2436650"
  },
  {
    "text": "down one of the on-premise servers we're just gonna shut down one of the databases and this will of course fail",
    "start": "2436650",
    "end": "2442170"
  },
  {
    "text": "the health check because it's not running anymore the first thing we could do is sort of tap over to the console UI",
    "start": "2442170",
    "end": "2447540"
  },
  {
    "text": "and verify that the database now only has one instance rather than two one of them's gone and the ATP of sync process",
    "start": "2447540",
    "end": "2454890"
  },
  {
    "text": "is built on consoles event system so it's edge triggered so right when we did this there's no pulling or anything",
    "start": "2454890",
    "end": "2461550"
  },
  {
    "text": "right when we do it immediately there's only one service registered in cloud man and so the unhealthy one disappeared and",
    "start": "2461550",
    "end": "2467730"
  },
  {
    "text": "the healthy one is still there back on ec2 we could do a DNS query and we'll",
    "start": "2467730",
    "end": "2474210"
  },
  {
    "text": "see as the results that we'll only get one IP just as Alex said this is subject",
    "start": "2474210",
    "end": "2479279"
  },
  {
    "text": "to the TTL s that you configure with cloud map in this case we it all propagated in time and then finally at",
    "start": "2479279",
    "end": "2487230"
  },
  {
    "text": "the end we use Redis tli to connect and because it's using DNS and because DNS from cloud map is just returning the",
    "start": "2487230",
    "end": "2493410"
  },
  {
    "text": "healthy instances we're able to connect just fine so what we've done to this",
    "start": "2493410",
    "end": "2498839"
  },
  {
    "text": "point is show you the direction of your cloud resources talking to your on-prem sort of database and now I wanted to",
    "start": "2498839",
    "end": "2505740"
  },
  {
    "text": "show you the reverse path ok so what",
    "start": "2505740",
    "end": "2511109"
  },
  {
    "text": "we're gonna do is go back to the namespace and click register service we're just gonna do this all manually through the UI but as Alex showed you",
    "start": "2511109",
    "end": "2517770"
  },
  {
    "text": "this could just be happening automatically from various AWS services your own software this could happen in",
    "start": "2517770",
    "end": "2524549"
  },
  {
    "text": "any way we're gonna register a service called web we're not gonna do any health checks to keep it simple but if you do",
    "start": "2524549",
    "end": "2529589"
  },
  {
    "text": "register health checks we mirror that in console as well and then we're gonna register an instance so we're just going",
    "start": "2529589",
    "end": "2536339"
  },
  {
    "text": "to name the instance I believe we named it web 1 and what we're gonna do is for the IP address we're just gonna take the",
    "start": "2536339",
    "end": "2542309"
  },
  {
    "text": "private IP address of the ec2 instance that we're currently on so I have config",
    "start": "2542309",
    "end": "2547619"
  },
  {
    "text": "to grab the IP swing over paste it in there make up a port we don't actually",
    "start": "2547619",
    "end": "2553740"
  },
  {
    "text": "have anything running on the ec2 instance and then register so this gets registered of cloud map and similarly",
    "start": "2553740",
    "end": "2560579"
  },
  {
    "text": "that sinker is watching cloud map and immediately when you register something puts it into console so if we go back to",
    "start": "2560579",
    "end": "2567630"
  },
  {
    "text": "console and go to the index page to list of services you could see that the web service showed up one of the really cool",
    "start": "2567630",
    "end": "2573299"
  },
  {
    "text": "features of console is that when we have services registered externally we put the logo of what registered it right",
    "start": "2573299",
    "end": "2578849"
  },
  {
    "text": "next to it so it's really clear right here that this is an AWS managed AWS source service you could see the",
    "start": "2578849",
    "end": "2584670"
  },
  {
    "text": "cute little AWS logo right next to it and when you click it you could see the one instance the one note that has that",
    "start": "2584670",
    "end": "2592079"
  },
  {
    "text": "service running and then you could also see at the top we also tell that it was registered via AWS and then",
    "start": "2592079",
    "end": "2599470"
  },
  {
    "text": "the last thing we're gonna go back to our on-premise servers use dig point it",
    "start": "2599470",
    "end": "2605140"
  },
  {
    "text": "to the console DNS server and use the normal console DNS and of course that's going to return the ec2 address that we",
    "start": "2605140",
    "end": "2611830"
  },
  {
    "text": "have that we could connect to console also returns the key values as tax records that's not super important and",
    "start": "2611830",
    "end": "2617980"
  },
  {
    "text": "so that's shows you both the directions of cloud map to console console the",
    "start": "2617980",
    "end": "2624220"
  },
  {
    "text": "cloud map and then how those could be used to connect sort of one direction or bidirectionally so that's the demo let's",
    "start": "2624220",
    "end": "2632560"
  },
  {
    "text": "move back over here cool ok so there's",
    "start": "2632560",
    "end": "2641920"
  },
  {
    "text": "three sort of major challenges and Alex also alluded to this for how AWS is solving them and we're working with AWS",
    "start": "2641920",
    "end": "2648310"
  },
  {
    "text": "across sort of all these categories to make adopting service-oriented architectures or micro service",
    "start": "2648310",
    "end": "2654310"
  },
  {
    "text": "architecture is much much easier the really common cases that we see are service discovery segmentation and",
    "start": "2654310",
    "end": "2660820"
  },
  {
    "text": "configuration as we saw with service discovery DNS is a really great way to solve that we've worked with AWS to make",
    "start": "2660820",
    "end": "2668170"
  },
  {
    "text": "cloud map great and AWS with console and bridging those together service",
    "start": "2668170",
    "end": "2673180"
  },
  {
    "text": "segmentation is really the security and mesh problem AWS this week launched at mesh and we're",
    "start": "2673180",
    "end": "2679450"
  },
  {
    "text": "also working with AWS so that it works seamlessly with consoles service mesh",
    "start": "2679450",
    "end": "2684910"
  },
  {
    "text": "feature called connect and then finally console provides kV store for",
    "start": "2684910",
    "end": "2690670"
  },
  {
    "text": "configuring services and AWS offers a number of services to do this as well and so that sort of concludes",
    "start": "2690670",
    "end": "2696970"
  },
  {
    "text": "integration we did with AWS on cloud mapping console we're super excited but",
    "start": "2696970",
    "end": "2702220"
  },
  {
    "text": "now I'm gonna bring Alex back onto the stage to talk about availability and pricing",
    "start": "2702220",
    "end": "2709079"
  },
  {
    "text": "[Applause] well it was a great great example of an",
    "start": "2709970",
    "end": "2718950"
  },
  {
    "text": "integration and we keep working with the open source community with our partners to make sure that tools that you used",
    "start": "2718950",
    "end": "2726090"
  },
  {
    "text": "today work with AWS the way you want",
    "start": "2726090",
    "end": "2731760"
  },
  {
    "text": "them so if you have any other ideas or use cases please feel free to talk to me",
    "start": "2731760",
    "end": "2737610"
  },
  {
    "text": "send us an email and we'll get in touch and we'll make sure that your tools that",
    "start": "2737610",
    "end": "2743670"
  },
  {
    "text": "you need work USA they were as cloud map so our vision for a table squad map is",
    "start": "2743670",
    "end": "2748740"
  },
  {
    "text": "really to make it the service registry in Discovery solution for all your cloud",
    "start": "2748740",
    "end": "2755730"
  },
  {
    "text": "resources and all your workloads now let's chat about availability so now",
    "start": "2755730",
    "end": "2762990"
  },
  {
    "text": "you can use able squad map in these 14 regions it's pretty much global image",
    "start": "2762990",
    "end": "2769980"
  },
  {
    "text": "everywhere go ahead start using this it today you have both council and API is",
    "start": "2769980",
    "end": "2776400"
  },
  {
    "text": "available and all this stuff is up and running right now now few words about",
    "start": "2776400",
    "end": "2784800"
  },
  {
    "text": "price week it's quite simple and predictable you pay for resources that you register it's ten cents per resource",
    "start": "2784800",
    "end": "2791760"
  },
  {
    "text": "months and it's pro-rated so you register resource for one on for one hour guess what you pay fraction of a",
    "start": "2791760",
    "end": "2797580"
  },
  {
    "text": "cent for that registration and for discovery API calls you pay one dollar per million calls of course if you use",
    "start": "2797580",
    "end": "2804720"
  },
  {
    "text": "other AWS resources such as DNS you pay for DNS coastal zones and queries and",
    "start": "2804720",
    "end": "2811020"
  },
  {
    "text": "route to seek health checks if you choose to use them well with with that I",
    "start": "2811020",
    "end": "2817560"
  },
  {
    "text": "think we can conclude our presentation and go to QA and bitch'll maybe you can",
    "start": "2817560",
    "end": "2825570"
  },
  {
    "text": "join Jeremy on stage for the Q&A as well thank you",
    "start": "2825570",
    "end": "2832890"
  }
]