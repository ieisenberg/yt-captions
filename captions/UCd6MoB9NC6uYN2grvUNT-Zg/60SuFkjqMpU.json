[
  {
    "start": "0",
    "end": "112000"
  },
  {
    "text": "[Music] hello everyone my name is rob hegarida",
    "start": "380",
    "end": "6799"
  },
  {
    "text": "and i'm a professional account manager at aws and i'm based out of austin texas welcome to aws supports you where we",
    "start": "6799",
    "end": "13519"
  },
  {
    "text": "share best practices and troubleshooting tips from aws support joining me today is tonight from aws support can you give",
    "start": "13519",
    "end": "20560"
  },
  {
    "text": "us a quick introduction tanya sure hi everybody this is tanya pahucha i'm a",
    "start": "20560",
    "end": "26400"
  },
  {
    "text": "technical account manager here at aws based out of delhi india and i'm really",
    "start": "26400",
    "end": "31920"
  },
  {
    "text": "glad to be a part of this show today thank you thanks tony for the intro and today",
    "start": "31920",
    "end": "36960"
  },
  {
    "text": "we're going to be introducing you to the aws fault injection simulator or fis for short we will specifically focus on how",
    "start": "36960",
    "end": "43040"
  },
  {
    "text": "you can use fis to create repeatable experiments and test the resiliency and reliability of your architecture on aws",
    "start": "43040",
    "end": "49680"
  },
  {
    "text": "before we get into the details though today a quick note to the attendees online please make sure to use the right",
    "start": "49680",
    "end": "54800"
  },
  {
    "text": "hand screen the chat window down there to ask your questions today and share with us your thoughts throughout the",
    "start": "54800",
    "end": "60719"
  },
  {
    "text": "episodes uh also let us know where you're joining us from today we really enjoy that so we look forward to hearing from you all",
    "start": "60719",
    "end": "66560"
  },
  {
    "text": "and tanya could you go ahead and walk us through we're going to be talking about sure thank you rob so the title of the",
    "start": "66560",
    "end": "73200"
  },
  {
    "text": "show today is testing reliability of your architecture using aws fault injection simulator",
    "start": "73200",
    "end": "80080"
  },
  {
    "text": "so we think the covet 19 pandemic has proven to be the largest stress test of our technology infrastructures in",
    "start": "80080",
    "end": "86960"
  },
  {
    "text": "generations and a meteoric increase in internet consumption followed due to in large",
    "start": "86960",
    "end": "92400"
  },
  {
    "text": "part to walking and schooling from home the chaotic early months of the pandemic",
    "start": "92400",
    "end": "97600"
  },
  {
    "text": "have clearly demonstrated the value of resiliencies in production and that's where we are going to focus",
    "start": "97600",
    "end": "103759"
  },
  {
    "text": "today on certain modern approaches to testings and validating the applications architecture",
    "start": "103759",
    "end": "111280"
  },
  {
    "start": "112000",
    "end": "365000"
  },
  {
    "text": "so talking about what are the challenges with distributed systems distributed systems have multiple",
    "start": "112960",
    "end": "119759"
  },
  {
    "text": "components located on different machines and they vary greatly in implementations",
    "start": "119759",
    "end": "125200"
  },
  {
    "text": "like for example a distributed system can be an offline system but that includes your",
    "start": "125200",
    "end": "130720"
  },
  {
    "text": "batch processing systems or your big data analysis clusters etc there could",
    "start": "130720",
    "end": "136160"
  },
  {
    "text": "be soft real-time distributed systems so these are the critical systems that must continually produce",
    "start": "136160",
    "end": "142400"
  },
  {
    "text": "or update results but they have a relatively generous time window in which to do so so examples of these systems",
    "start": "142400",
    "end": "149120"
  },
  {
    "text": "include something like you know the search index builders or something that look for",
    "start": "149120",
    "end": "154959"
  },
  {
    "text": "impaired servers or the rules for amazon cloud compute and third category of distributed",
    "start": "154959",
    "end": "161040"
  },
  {
    "text": "systems are your hard real-time distributed systems so these are often called request reply",
    "start": "161040",
    "end": "167599"
  },
  {
    "text": "services at amazon when we think about building a distributed system the hard real-time",
    "start": "167599",
    "end": "173200"
  },
  {
    "text": "system is the first time that we think of and the examples of such systems could",
    "start": "173200",
    "end": "178640"
  },
  {
    "text": "be of your front-end web servers the order pipeline or could be the typical credit card transactions",
    "start": "178640",
    "end": "186239"
  },
  {
    "text": "so as your distributed systems grow in complexity so does the difficulty in predicting failures",
    "start": "186239",
    "end": "192560"
  },
  {
    "text": "like the traditional methods of testing the distributed systems using a unit or",
    "start": "192560",
    "end": "198400"
  },
  {
    "text": "integration testings are not sufficient and the failures of mission critical distributed systems can actually cause",
    "start": "198400",
    "end": "205680"
  },
  {
    "text": "costly outages so uh in 2017 like the 98 percent of",
    "start": "205680",
    "end": "211599"
  },
  {
    "text": "organizations said a single hour of downtime would cost their business over",
    "start": "211599",
    "end": "216640"
  },
  {
    "text": "100k 000 dollars that means one outage can cost a single company millions of dollars",
    "start": "216640",
    "end": "223680"
  },
  {
    "text": "and that's where company needs a solution to this challenge because waiting for the next costly outage is",
    "start": "223680",
    "end": "231200"
  },
  {
    "text": "definitely not an option",
    "start": "231200",
    "end": "234400"
  },
  {
    "text": "but let's talk about how the distributed systems are complex so engineers working on distributed",
    "start": "236480",
    "end": "243200"
  },
  {
    "text": "systems must test for all the aspects of failure from the client network and servers as",
    "start": "243200",
    "end": "250000"
  },
  {
    "text": "these do not share fates so and they must also ensure that the code on both the client and the servers",
    "start": "250000",
    "end": "257519"
  },
  {
    "text": "always behaves correctly in light of those failures now let's take a look at this example on",
    "start": "257519",
    "end": "262880"
  },
  {
    "text": "this slide today one round trip request reply actions always involves the same steps",
    "start": "262880",
    "end": "270560"
  },
  {
    "text": "that means as shown in this following diagram the client machine would send a request",
    "start": "270560",
    "end": "276320"
  },
  {
    "text": "message over network to the server and the server would reply with a message reply over the network back to",
    "start": "276320",
    "end": "283520"
  },
  {
    "text": "the client now those are a lot of steps for one measly round trip right",
    "start": "283520",
    "end": "289759"
  },
  {
    "text": "still those steps are the definition of your request reply or your hard real-time distributed systems and there",
    "start": "289759",
    "end": "296960"
  },
  {
    "text": "is no way to skip any one of them like for example if you look at this diagram it's impossible to skip the step one",
    "start": "296960",
    "end": "304000"
  },
  {
    "text": "that means you know sending the message from client via network to the server because the client must put message onto",
    "start": "304000",
    "end": "311120"
  },
  {
    "text": "the network somehow that physically this means sending packets via network adapter which causes",
    "start": "311120",
    "end": "316960"
  },
  {
    "text": "the electric signals to travel over wires to a series of routers that comprise the network between client",
    "start": "316960",
    "end": "324080"
  },
  {
    "text": "and server now this is separate from step two because step two could also fail for",
    "start": "324080",
    "end": "329360"
  },
  {
    "text": "independent reasons when the net when the server is replying back to the client such as server suddenly losing power",
    "start": "329360",
    "end": "336560"
  },
  {
    "text": "or being unable to accept the incoming packets and the same logic can be applied to the remaining steps as well",
    "start": "336560",
    "end": "342800"
  },
  {
    "text": "so we can see that there are several steps involved in the distributed systems ensuring success with with a",
    "start": "342800",
    "end": "349039"
  },
  {
    "text": "simple operation but there are several different permutations of possible failures as",
    "start": "349039",
    "end": "354800"
  },
  {
    "text": "well on the simple distributed systems across thousands or millions of requests",
    "start": "354800",
    "end": "363720"
  },
  {
    "start": "365000",
    "end": "1016000"
  },
  {
    "text": "here in this slide we will talk a little bit more about what is chaos engineering and how it is related to the distributed",
    "start": "366720",
    "end": "373600"
  },
  {
    "text": "systems so chaos engineering is a disciplined approach to identify those failures that",
    "start": "373600",
    "end": "380160"
  },
  {
    "text": "we were just discussing in the distributed systems in the previous slide before those failures become outages",
    "start": "380160",
    "end": "387680"
  },
  {
    "text": "by that i mean uh by proactively testing how a system responds under stress now",
    "start": "387680",
    "end": "394319"
  },
  {
    "text": "you can identify and fix failures before they end up in the news so chaos engineering lets you compare what you",
    "start": "394319",
    "end": "401120"
  },
  {
    "text": "think will happen to what actually happens in your systems by that mean uh you literally",
    "start": "401120",
    "end": "408479"
  },
  {
    "text": "break things on purpose to learn how to build more resilient systems",
    "start": "408479",
    "end": "414240"
  },
  {
    "text": "you can think of it as a preventive measure to avoid larger compounding",
    "start": "414240",
    "end": "420080"
  },
  {
    "text": "issues down the road now testing the unknowns uh here in the slides the end",
    "start": "420080",
    "end": "425919"
  },
  {
    "text": "goal which we have here is to improve the resilience and performance of the application",
    "start": "425919",
    "end": "432319"
  },
  {
    "text": "and also uncover the hidden issues that kind of expose blind spots",
    "start": "432319",
    "end": "437759"
  },
  {
    "text": "and if you look at that particular uh you know diagram which is shown on the left there are typically five phases to",
    "start": "437759",
    "end": "444960"
  },
  {
    "text": "chaos engineering so it starts with a steady state where",
    "start": "444960",
    "end": "450479"
  },
  {
    "text": "you define a steady state as some of the measurable output of a system that indicates the normal behavior",
    "start": "450479",
    "end": "457919"
  },
  {
    "text": "for example let's let's take a very simple example uh you have a weather monitoring",
    "start": "457919",
    "end": "462960"
  },
  {
    "text": "application that should be able to fetch the weather data and display it to the",
    "start": "462960",
    "end": "468160"
  },
  {
    "text": "user within a certain tolerance so that's that's what your steady state",
    "start": "468160",
    "end": "473280"
  },
  {
    "text": "is now the next step or the next stage is hypothesis so in this stage",
    "start": "473280",
    "end": "478800"
  },
  {
    "text": "you kind of create a hypothesis that this steady state will continue in a",
    "start": "478800",
    "end": "484240"
  },
  {
    "text": "control group or let's say in an experimental group and then the next step involves running",
    "start": "484240",
    "end": "490400"
  },
  {
    "text": "that experiment so where it needs introducing the variables that reflect your real world events to your",
    "start": "490400",
    "end": "496720"
  },
  {
    "text": "application for example uh you know your server that can crash",
    "start": "496720",
    "end": "501759"
  },
  {
    "text": "or it could be your malfunctioning hard drives which is not returning any data",
    "start": "501759",
    "end": "507680"
  },
  {
    "text": "or it could be any uh you know the hard drive which is also returning an incorrect data",
    "start": "507680",
    "end": "513680"
  },
  {
    "text": "or it could also be the network connections which is breaking so you kind of run those experiments by",
    "start": "513680",
    "end": "518800"
  },
  {
    "text": "introducing the variables and the last stage that we have in this chaos engineering process is verify so",
    "start": "518800",
    "end": "526320"
  },
  {
    "text": "after running the test we verify whether or not the hypothesis was",
    "start": "526320",
    "end": "531519"
  },
  {
    "text": "correct that means this steady state continue through the experimentation when",
    "start": "531519",
    "end": "536800"
  },
  {
    "text": "compared to the control group so the entire cures engineering involves testing the unknowns",
    "start": "536800",
    "end": "543519"
  },
  {
    "text": "and it's a very similar to the pdca method which is plan do check act or",
    "start": "543519",
    "end": "551519"
  },
  {
    "text": "adjust and it kinds of an iterative design and it is a management method which is used",
    "start": "551519",
    "end": "557600"
  },
  {
    "text": "in business for the control and continuous improvement of your process and products",
    "start": "557600",
    "end": "565519"
  },
  {
    "text": "uh now in this slide uh what are challenges that we see or observed in",
    "start": "569040",
    "end": "574560"
  },
  {
    "text": "chaos engineering so there are many open source tools for",
    "start": "574560",
    "end": "579680"
  },
  {
    "text": "chaos engineering and the you know we have to stitch at times we might have to",
    "start": "579680",
    "end": "586000"
  },
  {
    "text": "face the challenge where we need to stitch together different tools however the processes for these tools may be",
    "start": "586000",
    "end": "592080"
  },
  {
    "text": "complicated and the support options may be very limited and it could also happen that the",
    "start": "592080",
    "end": "598320"
  },
  {
    "text": "additional scripting may be required which can lead to issues in getting up and running with kiosk engineering",
    "start": "598320",
    "end": "606240"
  },
  {
    "text": "the other challenge that we could see is the compatibility of the required libraries",
    "start": "606240",
    "end": "612240"
  },
  {
    "text": "or the agents for these open source tools so this could be another challenge that we",
    "start": "612240",
    "end": "618000"
  },
  {
    "text": "can face with chaos engineering uh we can also see that you know if you're performing testing in productions",
    "start": "618000",
    "end": "624640"
  },
  {
    "text": "or let's say if we have a high profile environment we want to be able to limit the extent of the potential issues from",
    "start": "624640",
    "end": "631760"
  },
  {
    "text": "an experiment but without the guardrails in place it can go the experiment can go sideways",
    "start": "631760",
    "end": "637600"
  },
  {
    "text": "very quickly right and the effect they might can affect the rest of your environment and can actually cause an",
    "start": "637600",
    "end": "644160"
  },
  {
    "text": "outage like there is there is always a difficulty to ensure the safety",
    "start": "644160",
    "end": "649680"
  },
  {
    "text": "and uh the other challenge that could happen is uh you know we we want to be",
    "start": "649680",
    "end": "655120"
  },
  {
    "text": "able to simulate failures and software as well as hardware but we might face",
    "start": "655120",
    "end": "660880"
  },
  {
    "text": "challenges with just chaos engineering alone too difficult to reproduce the real world events for example",
    "start": "660880",
    "end": "668320"
  },
  {
    "text": "uh you want the multiple server failures at once but you also want an application microservice failure so these are some",
    "start": "668320",
    "end": "675440"
  },
  {
    "text": "of the challenges that we might often observe with just chaos engineering alone",
    "start": "675440",
    "end": "682079"
  },
  {
    "text": "so before we go on to the next uh slide i would just like to check with rob rob do we have any questions from our",
    "start": "683360",
    "end": "689440"
  },
  {
    "text": "audience today hi tonya thanks for what you've been covering so far we do have a question that came in from the audience from",
    "start": "689440",
    "end": "695160"
  },
  {
    "text": "jibjab06 thanks for your question uh they wanted to know how do i prevent issues in my production environment when",
    "start": "695160",
    "end": "701519"
  },
  {
    "text": "using chaos engineering is this something going to be covering today or maybe in a little bit",
    "start": "701519",
    "end": "707120"
  },
  {
    "text": "yeah sure so this is what we are going to analyze in just our upcoming slides because chaos engineering is just a",
    "start": "707120",
    "end": "712959"
  },
  {
    "text": "process of stressing the application and testing and the production environments right and how we're going to prevent",
    "start": "712959",
    "end": "719519"
  },
  {
    "text": "those issues is something uh that we're going to discuss in the upcoming slides we would discuss on you know how",
    "start": "719519",
    "end": "726639"
  },
  {
    "text": "do we analyze the steady state behavior and how do we build an experiment hypothesis and then execute that",
    "start": "726639",
    "end": "732560"
  },
  {
    "text": "experiment using uh you know the aws fault injection simulators which is the",
    "start": "732560",
    "end": "737600"
  },
  {
    "text": "topic of the episode today and also rob would show a diagram a quick demo that would implement you know how can we",
    "start": "737600",
    "end": "744160"
  },
  {
    "text": "address those weaknesses in the application great thanks tanya uh back over to you",
    "start": "744160",
    "end": "751760"
  },
  {
    "text": "so here uh the fully managed kiosk engineering service so with aws we have aws fault",
    "start": "752959",
    "end": "760560"
  },
  {
    "text": "injection simulators which is a fully managed kiosk engineering service",
    "start": "760560",
    "end": "765920"
  },
  {
    "text": "and it is designed to be easy to get started and also allow you to test your systems against real world problems",
    "start": "765920",
    "end": "774000"
  },
  {
    "text": "so whether they are simple like you know just stopping an easy to instance or it could be more complex as well like",
    "start": "774000",
    "end": "781600"
  },
  {
    "text": "the other real world problems that we see in the applications aws fault injection simulator fully",
    "start": "781600",
    "end": "788720"
  },
  {
    "text": "embraces the idea of safeguards which is a way to monitor the blast of the experiment",
    "start": "788720",
    "end": "794320"
  },
  {
    "text": "and stop it if certain alarms are set off and then getting started with fault",
    "start": "794320",
    "end": "800000"
  },
  {
    "text": "injection simulator is actually designed for you to be as easy as possible",
    "start": "800000",
    "end": "807279"
  },
  {
    "text": "then the other thing is you can leverage the aws management console or you can also use the aws command line interface",
    "start": "807279",
    "end": "815040"
  },
  {
    "text": "cli to configure your fault injection simulators and you can also use the",
    "start": "815040",
    "end": "820320"
  },
  {
    "text": "pre-existing templates that we have to get started in minutes and these templates are just in json or",
    "start": "820320",
    "end": "827600"
  },
  {
    "text": "yaml format so you can share with them with your team after you have started with fault",
    "start": "827600",
    "end": "833120"
  },
  {
    "text": "injection simulators uh you can run experiments either in sequences or in parallel as well so that's another",
    "start": "833120",
    "end": "838880"
  },
  {
    "text": "flexibility that you get with aws fault injection simulators when i say you can run experiments in",
    "start": "838880",
    "end": "845040"
  },
  {
    "text": "sequence that means you can run the experiments which is used to test the impact of gradual",
    "start": "845040",
    "end": "851279"
  },
  {
    "text": "degradations for example a gradual increase in the cpu or the memory utilization",
    "start": "851279",
    "end": "857920"
  },
  {
    "text": "and similarly you can also run the experiments for parallel experiments like you know you can test the impact of",
    "start": "857920",
    "end": "864800"
  },
  {
    "text": "multiple concurrent issues which is often the case in a real world outage so",
    "start": "864800",
    "end": "870240"
  },
  {
    "text": "you can target all levels of your system across the host your infrastructure or",
    "start": "870240",
    "end": "875920"
  },
  {
    "text": "the network and the faults are really happening because they're injected at the service",
    "start": "875920",
    "end": "881360"
  },
  {
    "text": "control plane level so they're as close to as the real world problem that you can see with your applications",
    "start": "881360",
    "end": "888720"
  },
  {
    "text": "and the other thing that that aws specs offers is safeguards uh that means you",
    "start": "888720",
    "end": "893760"
  },
  {
    "text": "know you have a safeguards act just as a stop button and that allows you to",
    "start": "893760",
    "end": "899120"
  },
  {
    "text": "monitor the blast radius of your experiment and make sure it's contained and that the failure created in the",
    "start": "899120",
    "end": "905760"
  },
  {
    "text": "experiment is kind of rolled back if the alarm goes off and it also uh fault injection simulator",
    "start": "905760",
    "end": "912240"
  },
  {
    "text": "also leverages fine-grained im controls so that you can use to determine the fault types",
    "start": "912240",
    "end": "918560"
  },
  {
    "text": "and the resources that can be affected with this i would like to hand it over",
    "start": "918560",
    "end": "923920"
  },
  {
    "text": "to rob to talk more about high level on the aws fault injection simulator",
    "start": "923920",
    "end": "930560"
  },
  {
    "text": "okay thanks tanya i appreciate that so yeah we're going to talk a little bit about aws fault injection simulator i",
    "start": "930560",
    "end": "935759"
  },
  {
    "text": "did want to address we're having a great chat with user uh nick levesque i think is the how you pronounce the username uh really",
    "start": "935759",
    "end": "942480"
  },
  {
    "text": "discussing about the overall barrier to entry as far as you know getting adopting into doing chaos",
    "start": "942480",
    "end": "948639"
  },
  {
    "text": "engineering and maybe the uh you know tweaking and never actually making progress i think that's the important thing of what kind of tanya",
    "start": "948639",
    "end": "954720"
  },
  {
    "text": "was referring to a little bit was defining that scope for each test right are you testing for performance wise and",
    "start": "954720",
    "end": "960240"
  },
  {
    "text": "so that's where you're going to leverage your chaos engineering to actually implement you know maybe api throttle that we'll talk about later to see how",
    "start": "960240",
    "end": "966480"
  },
  {
    "text": "your application responds and really have your focus on that whole entire hypothesis right and like go",
    "start": "966480",
    "end": "972399"
  },
  {
    "text": "around that whole life cycle for it to verify yes everything's great there or are you purely focused on looking at",
    "start": "972399",
    "end": "978959"
  },
  {
    "text": "something like reliability and resiliency and you're going to test what happens if something actually you know drops out from your environment like an",
    "start": "978959",
    "end": "985120"
  },
  {
    "text": "ec2 instance or such so um don't let um the the unknown be a barrier entry in",
    "start": "985120",
    "end": "992240"
  },
  {
    "text": "chaos engineering we will provide some links as well with some other items like how to automate tests or how to you know",
    "start": "992240",
    "end": "998399"
  },
  {
    "text": "run these tests and services like eks and such if you're using those uh we'll also see in the demo a few different",
    "start": "998399",
    "end": "1004160"
  },
  {
    "text": "ones that we'll get to here on that we have just some kind of tutorials on that will hopefully get you started",
    "start": "1004160",
    "end": "1009600"
  },
  {
    "text": "but there's a lot of great benefit from chaos engineering so i just wanted to address that from the chat there but",
    "start": "1009600",
    "end": "1016959"
  },
  {
    "start": "1016000",
    "end": "1255000"
  },
  {
    "text": "back to what tanya was mentioning we have aws fault injection simulator and it's our fully managed service so i",
    "start": "1016959",
    "end": "1023519"
  },
  {
    "text": "want to spend a little time just kind of going over a little bit of the components and i'm going to jump into a demo in the console and show you a",
    "start": "1023519",
    "end": "1029280"
  },
  {
    "text": "little bit uh just a really simple experiment on how to you know get started using it so",
    "start": "1029280",
    "end": "1034959"
  },
  {
    "text": "as we can see here on the screen we've got some controls that we can implement through identity and access management",
    "start": "1034959",
    "end": "1040640"
  },
  {
    "text": "to restrict who can access um fault injection simulator what resources it can interact with and such really to",
    "start": "1040640",
    "end": "1046798"
  },
  {
    "text": "help you get greater control uh the nice thing is this is all either accessible",
    "start": "1046799",
    "end": "1052640"
  },
  {
    "text": "via the console or the api uh to create your experiment templates and run these in a really repeatable fashion uh that",
    "start": "1052640",
    "end": "1058799"
  },
  {
    "text": "way you're not doing ks engineering in a previous manner where someone would just go in and be like all right i'm going to",
    "start": "1058799",
    "end": "1063919"
  },
  {
    "text": "stop the instance or if you don't have ideas on what you can actually leverage or you know",
    "start": "1063919",
    "end": "1069120"
  },
  {
    "text": "implement with chaos engineering we have a whole bunch of pre-defined actions that you can leverage as well that are",
    "start": "1069120",
    "end": "1075120"
  },
  {
    "text": "going to be able to be used against a variety of aws resources so we'll start our experiment stop our",
    "start": "1075120",
    "end": "1080480"
  },
  {
    "text": "experiment either through the time base that we're going to do this or through a stop mechanism like a cloud watch alarm",
    "start": "1080480",
    "end": "1086799"
  },
  {
    "text": "so you may have your application performance metrics that you're using to kind of analyze as chaos engineering is",
    "start": "1086799",
    "end": "1092559"
  },
  {
    "text": "happening in your environment and making sure that you know you have a certain threshold that you've seen before that",
    "start": "1092559",
    "end": "1097600"
  },
  {
    "text": "may impact your production environment that you're going to set your cloud watch alarm to stop the experiment before you get there so you don't",
    "start": "1097600",
    "end": "1103200"
  },
  {
    "text": "actually see you know performance impact and that gives you a learning point to go back and review you know how did that",
    "start": "1103200",
    "end": "1108400"
  },
  {
    "text": "respond and happen throughout the environment so um",
    "start": "1108400",
    "end": "1113679"
  },
  {
    "text": "in order to get an experiment and actually run it we have experiment templates that we use to be repeatable",
    "start": "1113679",
    "end": "1119840"
  },
  {
    "text": "but we're going to put elements into those experiment templates including your actions and your targets um so experiments is what we actually run to",
    "start": "1119840",
    "end": "1126240"
  },
  {
    "text": "do our chaos engineering our template is our kind of base of it and inside the convention we put these actions in",
    "start": "1126240",
    "end": "1131280"
  },
  {
    "text": "targets and actions you'll see here we have kind of a when we get to the demo we have a list of a few different ones and we're",
    "start": "1131280",
    "end": "1136400"
  },
  {
    "text": "just going to use an easy ec2 stop start test with it but you're going to define your actions",
    "start": "1136400",
    "end": "1141919"
  },
  {
    "text": "and then once you define those actions it's going to have to go against targets and targets are going to be your aws resources that you're specified to you",
    "start": "1141919",
    "end": "1148960"
  },
  {
    "text": "know set this activity against again in our demo today we'll just be using an ec2 instance to show you uh how that",
    "start": "1148960",
    "end": "1155200"
  },
  {
    "text": "works but those are going to comprise and make up our experiment template that we can then use to uh repeatedly rerun",
    "start": "1155200",
    "end": "1161120"
  },
  {
    "text": "within our environment and be able to leverage the aws fault injection simulator",
    "start": "1161120",
    "end": "1168160"
  },
  {
    "text": "as i mentioned before you can do a number of different things as far as injections that we can have",
    "start": "1168720",
    "end": "1173760"
  },
  {
    "text": "into your aws environment that could be api throttling if you're using ecs it could be the termination of a worker uh",
    "start": "1173760",
    "end": "1181039"
  },
  {
    "text": "it could be an eks where we're going to stop one of the um",
    "start": "1181039",
    "end": "1186080"
  },
  {
    "text": "the worker nodes within your cluster or we're actually going to interact with the pods and remove an application from",
    "start": "1186080",
    "end": "1192080"
  },
  {
    "text": "your eks cluster and see how things respond right so a lot of different tests that we have available that are",
    "start": "1192080",
    "end": "1197440"
  },
  {
    "text": "just built into the service before where you maybe would have had to script this all out yourself uh aws fault injection",
    "start": "1197440",
    "end": "1203360"
  },
  {
    "text": "similar makes it easy for you to get you know in there and actually starting to implement and do things so",
    "start": "1203360",
    "end": "1208960"
  },
  {
    "text": "um even as simple as testing your you know failover of a multi-az rds database",
    "start": "1208960",
    "end": "1214799"
  },
  {
    "text": "uh with your application to see what the latency looks like you've got your normal monitoring setup for this you",
    "start": "1214799",
    "end": "1220080"
  },
  {
    "text": "could test that failover mechanism and see how long does it take for it to actually fail over what impact we see on",
    "start": "1220080",
    "end": "1225360"
  },
  {
    "text": "an application in a really controlled repeatable fashion so",
    "start": "1225360",
    "end": "1230640"
  },
  {
    "text": "of course we're always building for our customers and so there's more services and such that are going to be coming they'll be added into fault injection",
    "start": "1230640",
    "end": "1236880"
  },
  {
    "text": "simulator so keep your eye on our product page for that uh with that we're going to jump over",
    "start": "1236880",
    "end": "1242320"
  },
  {
    "text": "and look at a demo of what it's like to set up aws fault injection simulator for a very basic",
    "start": "1242320",
    "end": "1248640"
  },
  {
    "text": "template uh that we have in our tutorial to get you started and going through things so let's switch over to this",
    "start": "1248640",
    "end": "1255760"
  },
  {
    "start": "1255000",
    "end": "2679000"
  },
  {
    "text": "so um we're gonna go over to something that's found in the aws fault injection simulator uh",
    "start": "1255760",
    "end": "1261679"
  },
  {
    "text": "documentation so in our tutorials uh and be able to implement and use that",
    "start": "1261679",
    "end": "1266720"
  },
  {
    "text": "so uh in order to get started aws fault injection simulator as you mentioned before",
    "start": "1266720",
    "end": "1271919"
  },
  {
    "text": "is a fully managed service that enables you to perform fault injection experiments within your environment",
    "start": "1271919",
    "end": "1277200"
  },
  {
    "text": "right so nice fully managed easy for you to get up and get running with and we have some",
    "start": "1277200",
    "end": "1282480"
  },
  {
    "text": "tutorials we have concepts and such that are built in that you can read about",
    "start": "1282480",
    "end": "1287600"
  },
  {
    "text": "we're going to cover just the first tutorial that we have here which is test instance stop and start",
    "start": "1287600",
    "end": "1293039"
  },
  {
    "text": "this is really handy and useful for you in things like you've got autoscaling deployed in your environment and you're",
    "start": "1293039",
    "end": "1298080"
  },
  {
    "text": "going to be leveraging that to see make sure that when i stop an instance um you know something happens um",
    "start": "1298080",
    "end": "1305840"
  },
  {
    "text": "a response to that right we also have some for running cpu stress tests and testing spot instance uh interruption",
    "start": "1305840",
    "end": "1311120"
  },
  {
    "text": "within your environment um and if you're you know just getting started with ec2 spot potentially it may be something",
    "start": "1311120",
    "end": "1317600"
  },
  {
    "text": "that you really want to test to understand how your application works with a spot interruption happening and if you're not familiar with spot",
    "start": "1317600",
    "end": "1323520"
  },
  {
    "text": "interruptions it's basically every two minutes or at a two minute notification it will let you know that it's going to",
    "start": "1323520",
    "end": "1328880"
  },
  {
    "text": "reclaim an instance and you may just want to test for that so uh tiny i don't know if your customers",
    "start": "1328880",
    "end": "1334880"
  },
  {
    "text": "have used spot or not but i just wanted to ask and see if you had you know some information that maybe you've had experience with your customers in ec2",
    "start": "1334880",
    "end": "1340480"
  },
  {
    "text": "spot yeah uh so yeah there are many customers know that i've been working with kind of",
    "start": "1340480",
    "end": "1347039"
  },
  {
    "text": "users for instances and i think when using spot instances uh you need to be prepared to be",
    "start": "1347039",
    "end": "1352720"
  },
  {
    "text": "interrupted so with fizz uh you can actually test the resiliency of your workload",
    "start": "1352720",
    "end": "1358000"
  },
  {
    "text": "and validate you know that your application is re reacting to the interruption notices that easy to sense",
    "start": "1358000",
    "end": "1364080"
  },
  {
    "text": "before terminating your instances and in fact you can target the individual spot instances as well like you know also you",
    "start": "1364080",
    "end": "1371600"
  },
  {
    "text": "can also target these subset of instances in clusters managed by services that tag your instances so with",
    "start": "1371600",
    "end": "1378480"
  },
  {
    "text": "the just few clicks in the console you can just set up an experiment as rob was mentioning and you know that triggers",
    "start": "1378480",
    "end": "1384960"
  },
  {
    "text": "the interruptions on your spot instances additionally you can leverage the fixed experiments to run more complex",
    "start": "1384960",
    "end": "1391440"
  },
  {
    "text": "scenarios with additional distributed system failures and i think one of the demos which rob would be just showing",
    "start": "1391440",
    "end": "1397679"
  },
  {
    "text": "you here and that that kind of enables you to create the real world conditions necessary to find those hidden",
    "start": "1397679",
    "end": "1404640"
  },
  {
    "text": "weaknesses as we just mentioned great thanks i appreciate that um and so",
    "start": "1404640",
    "end": "1410480"
  },
  {
    "text": "yeah so we're going to jump in here and just show you uh one of the experiment templates that we have our tutorials that we have in order to be able to get",
    "start": "1410480",
    "end": "1416720"
  },
  {
    "text": "up and running with fault injection simulator and so i've already gone ahead and taken care of a few of these prerequisites that we have here",
    "start": "1416720",
    "end": "1423600"
  },
  {
    "text": "i've already launched a couple of these instances and created an iron roll and such and if you're not familiar with how",
    "start": "1423600",
    "end": "1429120"
  },
  {
    "text": "to do some of these things as far as the impermissions we have some links in here that will be able to help you",
    "start": "1429120",
    "end": "1434559"
  },
  {
    "text": "get up and started and get running with the necessary ion permissions to get fis",
    "start": "1434559",
    "end": "1440000"
  },
  {
    "text": "working so you don't have to be an ion expert to start using it and we're going to run through basically",
    "start": "1440000",
    "end": "1445760"
  },
  {
    "text": "a lot of these steps here that we see in this experiment template going to go in and open the fis console we're going to",
    "start": "1445760",
    "end": "1450880"
  },
  {
    "text": "do the experiment template choose some instances that i already have created and we're going to run a",
    "start": "1450880",
    "end": "1456000"
  },
  {
    "text": "few of these stop start actions against them again this is really helpful if you're going to be testing against things like",
    "start": "1456000",
    "end": "1461120"
  },
  {
    "text": "making sure that you have an autos-giving group maybe you've got multi-region that you've got deployed and you've got route",
    "start": "1461120",
    "end": "1466799"
  },
  {
    "text": "53 and some health checks and such and you want to make sure that if an instance goes down it's hopefully not a",
    "start": "1466799",
    "end": "1471919"
  },
  {
    "text": "single instance that you have out there but if it is uh because you're leveraging multi-region right that it",
    "start": "1471919",
    "end": "1477520"
  },
  {
    "text": "you know fails over for you accordingly it works so that's what we're going to kind of run through we'll go down here",
    "start": "1477520",
    "end": "1482880"
  },
  {
    "text": "and you can see uh tony was mentioned before that you have the option of json gamble for your output that you can have",
    "start": "1482880",
    "end": "1488320"
  },
  {
    "text": "from your experiment templates and such that you can work with to define and create these and you can actually export this use",
    "start": "1488320",
    "end": "1494559"
  },
  {
    "text": "this to put in your own version repositories that you can keep iterations of it to use within your organization uh if you want and so this",
    "start": "1494559",
    "end": "1502000"
  },
  {
    "text": "is just kind of an example of them uh as we get going through we'll be able to run through here and start the",
    "start": "1502000",
    "end": "1507840"
  },
  {
    "text": "experiment uh track the experiment progress this is probably the really important part right you want to make sure that you understand what's",
    "start": "1507840",
    "end": "1513840"
  },
  {
    "text": "happening within your experiment how things are reacting within your environment you can have your monitoring your stop state and such",
    "start": "1513840",
    "end": "1520400"
  },
  {
    "text": "as we get going through today's demos since it is just a dental environment i don't have stop state because it's not a production environment or anything",
    "start": "1520400",
    "end": "1526840"
  },
  {
    "text": "um and then we'll go through and we'll be able to verify the experiment result and take a look at it and i'll show you",
    "start": "1526840",
    "end": "1532720"
  },
  {
    "text": "what that looks like as well where we can see kind of our timeline and see how things interacted and kind of you know",
    "start": "1532720",
    "end": "1538640"
  },
  {
    "text": "met their timeline to stop and start and if you are going to try this in your",
    "start": "1538640",
    "end": "1544080"
  },
  {
    "text": "account afterwards we of course got some cleanup steps in here as well so that we have",
    "start": "1544080",
    "end": "1550559"
  },
  {
    "text": "make sure that you you know get rid of the resources in the end so as we can see here in the console i",
    "start": "1550559",
    "end": "1555760"
  },
  {
    "text": "have two demo instances that i just named fis demo instance one and demo instance two uh just to make it really",
    "start": "1555760",
    "end": "1562000"
  },
  {
    "text": "clear which ones they are and those are gonna be our targets that we're going to have for our",
    "start": "1562000",
    "end": "1567200"
  },
  {
    "text": "actions in our experiment template eventually here so we'll see that we have just a couple of these they're both",
    "start": "1567200",
    "end": "1573360"
  },
  {
    "text": "running in the same availability zone right now again just a demo environment this is real life that may be in a couple different availability zones",
    "start": "1573360",
    "end": "1580400"
  },
  {
    "text": "i chose a couple t2 micros to be in the free tier for this experiment so again nice and inexpensive",
    "start": "1580400",
    "end": "1586080"
  },
  {
    "text": "but we're going to be able to use these instances to kind of jump in and look at some of our experiments and experiment",
    "start": "1586080",
    "end": "1591840"
  },
  {
    "text": "templates um so we see here this is the aws fault injection simulator uh console that",
    "start": "1591840",
    "end": "1598559"
  },
  {
    "text": "we're going to start off with and we're going to see that i already have an experiment template that i created ahead of time",
    "start": "1598559",
    "end": "1603840"
  },
  {
    "text": "and ran and tested the most reason why i did this is because if we were to run through the whole process it waits for",
    "start": "1603840",
    "end": "1609679"
  },
  {
    "text": "three minutes after it stops an instance and then goes another three minutes before it does the next group of them and we'd be kind of sitting here waiting",
    "start": "1609679",
    "end": "1615279"
  },
  {
    "text": "staring at the screen for a little bit so i already re-ran the templates and i'll kind of walk through the timeline a little bit",
    "start": "1615279",
    "end": "1620960"
  },
  {
    "text": "i will start it to show you what it looks like as we get started um and what it looks like to create one here but um",
    "start": "1620960",
    "end": "1627360"
  },
  {
    "text": "just want to let you know it won't make you wait six minutes just watch my screen um so as we get into creating a template",
    "start": "1627360",
    "end": "1634240"
  },
  {
    "text": "itself an experiment template we define name of it right a little bit of information on it the role that's going",
    "start": "1634240",
    "end": "1640000"
  },
  {
    "text": "to run things for us since i already have these roles created i can just choose it for my drop-down",
    "start": "1640000",
    "end": "1645360"
  },
  {
    "text": "box and then i mentioned we have these different components where we're going to add actions and targets to these and",
    "start": "1645360",
    "end": "1650720"
  },
  {
    "text": "be able to leverage these different resources stop condition i mentioned before i don't have any",
    "start": "1650720",
    "end": "1656399"
  },
  {
    "text": "creator for mine these are just a couple other cloud watch metrics that are created or cloudwatch alarms but if you",
    "start": "1656399",
    "end": "1662159"
  },
  {
    "text": "wanted to set a stop condition so say your resources or cpu starts to spin out",
    "start": "1662159",
    "end": "1667200"
  },
  {
    "text": "of control or you start to notice a response time from your website that's greater than uh you know x milliseconds and you want",
    "start": "1667200",
    "end": "1674000"
  },
  {
    "text": "to stop the experiment because you do not want to actually impact your production environment you can set up a",
    "start": "1674000",
    "end": "1679120"
  },
  {
    "text": "cloud watch monitor use that to be your stop condition and that way you don't have to",
    "start": "1679120",
    "end": "1684960"
  },
  {
    "text": "go in there and quickly try and stop the experiment it will automatically stop for you this can be helpful in a link that i",
    "start": "1684960",
    "end": "1690960"
  },
  {
    "text": "provided as well earlier that has how you can automate using lambda with your ci cd pipeline using fault injection",
    "start": "1690960",
    "end": "1697039"
  },
  {
    "text": "simulator you can have these stop conditions in place so if you're going to just randomly have these run off as automated",
    "start": "1697039",
    "end": "1703679"
  },
  {
    "text": "tests for you to verify reliability you can have these style conditions in place to prevent",
    "start": "1703679",
    "end": "1708720"
  },
  {
    "text": "anything from happening we can of course add some tags here if we wanted to into our resources but",
    "start": "1708720",
    "end": "1715600"
  },
  {
    "text": "since i already have a template and tags aren't going to really be helpful in this instance of usage i'm not going to",
    "start": "1715600",
    "end": "1722080"
  },
  {
    "text": "select those but uh those are kind of all the components we're going to start off so",
    "start": "1722080",
    "end": "1727440"
  },
  {
    "text": "we'll go in and eventually here take a look at my existing um resources that we have uh created inside",
    "start": "1727440",
    "end": "1734320"
  },
  {
    "text": "of an experiment template and see what that kind of looks like so jump back here and we'll go into",
    "start": "1734320",
    "end": "1741200"
  },
  {
    "text": "this experiment template and take a look at what it looks like with everything kind of defined so i just named it an fis ec2 experiment",
    "start": "1741200",
    "end": "1748799"
  },
  {
    "text": "nice and simple easy name for today's demo uh we can see the role that i mentioned before that i have created",
    "start": "1748799",
    "end": "1754880"
  },
  {
    "text": "and we can see some of the actions here and these are things that i've already defined and i'll show you how to kind of define these as well",
    "start": "1754880",
    "end": "1760799"
  },
  {
    "text": "um but this is basically the experiment that we have in the tutorial it's basically going to have you stop one of",
    "start": "1760799",
    "end": "1766399"
  },
  {
    "text": "your instance and you can have this randomized so we can set a target group and we can say",
    "start": "1766399",
    "end": "1771600"
  },
  {
    "text": "put this batch of instances in by choice or by tag and we can say against this group of",
    "start": "1771600",
    "end": "1777520"
  },
  {
    "text": "instances say stop one instance and that will just randomly stop one",
    "start": "1777520",
    "end": "1782799"
  },
  {
    "text": "one nice thing that you can do is you could say set a group of instances that you want to be marked as chaos ready",
    "start": "1782799",
    "end": "1789840"
  },
  {
    "text": "so you can tag those and have them listed as chaos ready and that way as you run your fault injection simulation",
    "start": "1789840",
    "end": "1796000"
  },
  {
    "text": "against it you have that pool of ec2 instances and you say stop one um say you have three out of your ten instances",
    "start": "1796000",
    "end": "1802480"
  },
  {
    "text": "that are actually chaos ready well they only gotta run against those three even if you added all ten to the stop instance group",
    "start": "1802480",
    "end": "1808880"
  },
  {
    "text": "um so we have our different determinations of stops of single ec2 instance my description for it it's going to do an",
    "start": "1808880",
    "end": "1815200"
  },
  {
    "text": "ec2 instance against my demo ec2 instance target group and i have the timeline set to at 3 minutes is when",
    "start": "1815200",
    "end": "1821440"
  },
  {
    "text": "it's going to take that first action uh or when it's gonna wait basically for that so it's gonna kick off when i kick",
    "start": "1821440",
    "end": "1826799"
  },
  {
    "text": "off the experiment stop on my instances wait three minutes and then i have another action so this is kind of similar to what tommy was talking about",
    "start": "1826799",
    "end": "1833120"
  },
  {
    "text": "before of going into running them either simultaneously in parallel or in series of each other",
    "start": "1833120",
    "end": "1839679"
  },
  {
    "text": "you can kind of have these different experiment steps run one after the other so that you can see what happens",
    "start": "1839679",
    "end": "1845360"
  },
  {
    "text": "in my next iteration step here where i have stop one instance now my next step after three is going to stop the",
    "start": "1845360",
    "end": "1850720"
  },
  {
    "text": "instance restart it and now we're gonna see what happens if i actually stop both instances in my target group and so we",
    "start": "1850720",
    "end": "1856159"
  },
  {
    "text": "would see after three minutes that it would go through and do this and we'd see that we have these demo ec2 instances for details",
    "start": "1856159",
    "end": "1863440"
  },
  {
    "text": "and that has um some various selection mode items that selection says hey count one so",
    "start": "1863440",
    "end": "1869440"
  },
  {
    "text": "even though i have two resources as you can see by the resource orange number below that says two resources i actually",
    "start": "1869440",
    "end": "1875039"
  },
  {
    "text": "have a count that says actually only stop one of those two and then the next group we can see that i have both instances is what i've",
    "start": "1875039",
    "end": "1881360"
  },
  {
    "text": "described it as and what it's going to actually do for selection mode is all and that means that whatever i've put in",
    "start": "1881360",
    "end": "1886720"
  },
  {
    "text": "there it's going to stop both of those resources so that way we could have the same groups",
    "start": "1886720",
    "end": "1892559"
  },
  {
    "text": "of targets stop different ways um just depending on how we choose to implement the actual",
    "start": "1892559",
    "end": "1898720"
  },
  {
    "text": "chaos side of things as we go through it so um mentioned before we're going to have a",
    "start": "1898720",
    "end": "1905039"
  },
  {
    "text": "timeline of items here and this timeline is going to be really helpful for you to be able to kind of get started and look to see you know that three minute mark",
    "start": "1905039",
    "end": "1911919"
  },
  {
    "text": "and make sure things happen and i'll show you what it looks like in an actual um completed experiment that we've gone",
    "start": "1911919",
    "end": "1918159"
  },
  {
    "text": "through before already but as we can see here we've got this different timeline of events that we can overview and we",
    "start": "1918159",
    "end": "1923360"
  },
  {
    "text": "can see stop winston's you know one and then we can see this other one here where we've got the next sequence that's",
    "start": "1923360",
    "end": "1928399"
  },
  {
    "text": "going to start after our first three minutes and going being able to watch your timeline is kind of part of when you're doing",
    "start": "1928399",
    "end": "1934240"
  },
  {
    "text": "experiments you can make sure that your steps are happening as you're going through things and you can kind of just watch it",
    "start": "1934240",
    "end": "1939760"
  },
  {
    "text": "and give you a little overview from these existing templates here as we can see our experiments i can update",
    "start": "1939760",
    "end": "1945200"
  },
  {
    "text": "this experiment template i can start it um if i want to do this repeatably here from the console i can manage the tags",
    "start": "1945200",
    "end": "1951679"
  },
  {
    "text": "or i can get rid of it if i find this experiment template wasn't what i wanted if i chose update i could create a new",
    "start": "1951679",
    "end": "1958080"
  },
  {
    "text": "iteration starting with it say this was close but i want to make a few modifications to it and just create a whole new template um we can do that as",
    "start": "1958080",
    "end": "1965039"
  },
  {
    "text": "well so um if we go into update we can see here more in detail some of the items that we",
    "start": "1965039",
    "end": "1971760"
  },
  {
    "text": "have defined within this for stop and start instance are both instances for targets um as mentioned i just have the",
    "start": "1971760",
    "end": "1977840"
  },
  {
    "text": "same target group created it's just that i have different conditions in my actual actions that take effect against this",
    "start": "1977840",
    "end": "1984080"
  },
  {
    "text": "one target group item so um just helpful because you don't have to define a whole bunch of different groups",
    "start": "1984080",
    "end": "1990159"
  },
  {
    "text": "you can just tell it to respond to things differently on these actions um",
    "start": "1990159",
    "end": "1995279"
  },
  {
    "text": "so that's kind of our overall thing here and we've got those tags and deletes right so if i want to get rid of this",
    "start": "1995279",
    "end": "2000399"
  },
  {
    "text": "one i can clean it up after the word so we didn't want to keep it we didn't have to keep it in the long run",
    "start": "2000399",
    "end": "2006080"
  },
  {
    "text": "so timeline's really helpful here um did want to stop there as we're kind of going through",
    "start": "2006080",
    "end": "2011360"
  },
  {
    "text": "uh overall in the demo and talk a little bit kind of like the benefit of the timeline and the stop start and",
    "start": "2011360",
    "end": "2017200"
  },
  {
    "text": "responding to things right um we run if you've ever been to reinvent um or even",
    "start": "2017200",
    "end": "2022799"
  },
  {
    "text": "if we've been able to make one of our public game day events we do game days for aws uh one of them is called",
    "start": "2022799",
    "end": "2028960"
  },
  {
    "text": "microservice madness and part of it is actually has some chaos engineering built into it existed before fault",
    "start": "2028960",
    "end": "2034799"
  },
  {
    "text": "injection simulator but what would it do is it would essentially get rid of an ec2 instance in the environment and",
    "start": "2034799",
    "end": "2040480"
  },
  {
    "text": "during the game day you have to go in and you know bring that web service that back can continue playing the game",
    "start": "2040480",
    "end": "2047039"
  },
  {
    "text": "um one thing that you know as tams we've kind of learned with our customers and heard from our customers is they get a",
    "start": "2047039",
    "end": "2053040"
  },
  {
    "text": "lot of great experience from the game days and especially this chaos engineering component that one of my customers when they were working on it",
    "start": "2053040",
    "end": "2059040"
  },
  {
    "text": "they had their instance go away as part of the game day and they spent time rebuilding manually rebuilding that",
    "start": "2059040",
    "end": "2065280"
  },
  {
    "text": "instance getting it all back up and working you know choosing the new ami reinstalling the web servers that need to be on there",
    "start": "2065280",
    "end": "2071599"
  },
  {
    "text": "getting everything back up and running and then two minutes later that instance went away again and they were like",
    "start": "2071599",
    "end": "2077839"
  },
  {
    "text": "great the biggest thing we learned from today is we spent all this time manually recreating that instance and then forgot",
    "start": "2077839",
    "end": "2083358"
  },
  {
    "text": "to create an image of it so that we could quickly and easily reproduce that web service uh or you",
    "start": "2083359",
    "end": "2089040"
  },
  {
    "text": "know basically take that instance and put it into an auto scaling group or something so that when it goes away it can come back um i don't know if you've",
    "start": "2089040",
    "end": "2096480"
  },
  {
    "text": "had customers before that are run game days with you and had similar experience but uh that was definitely an interesting story that i've had with you",
    "start": "2096480",
    "end": "2102160"
  },
  {
    "text": "know one of my customers benefiting from chaos engineering yeah no i agree i think uh there are",
    "start": "2102160",
    "end": "2108880"
  },
  {
    "text": "multiple multiple uh you know portfolios of game day that i've also run for my customers and i",
    "start": "2108880",
    "end": "2115119"
  },
  {
    "text": "think as rob mentioned uh microservices madness being one of them there is also kind of something which is focused on",
    "start": "2115119",
    "end": "2121200"
  },
  {
    "text": "chaotic commencement so this kind of focuses uh you know the game day focuses on teams using",
    "start": "2121200",
    "end": "2126960"
  },
  {
    "text": "different aws services such as ec2 elbs or you know cloud watch and basically",
    "start": "2126960",
    "end": "2133040"
  },
  {
    "text": "these these kind of game days are more focused on evolving the architecture which is",
    "start": "2133040",
    "end": "2138079"
  },
  {
    "text": "receiving traffic so just uh talking about my experience of running the similar kind of game days focusing on",
    "start": "2138079",
    "end": "2143520"
  },
  {
    "text": "chaos engineering for customers uh you know seeing the teams and participants receiving points for being",
    "start": "2143520",
    "end": "2150320"
  },
  {
    "text": "able to uh respond by you know bringing an instance up or terminating an instance",
    "start": "2150320",
    "end": "2156720"
  },
  {
    "text": "with you know points appearing on a scoreboard visible to all of them that's kind of just creates a friendly",
    "start": "2156720",
    "end": "2162320"
  },
  {
    "text": "competition is because teams walk in you know together to attain the highest scores",
    "start": "2162320",
    "end": "2168000"
  },
  {
    "text": "and then points are attributed to teams that responds to queries more consistently and quickly so while",
    "start": "2168000",
    "end": "2174480"
  },
  {
    "text": "running the game days for the customers i could actually see the customers and the participants you know walking in",
    "start": "2174480",
    "end": "2180960"
  },
  {
    "text": "teams to you know responding uh you know doing all those of excesses amount of",
    "start": "2180960",
    "end": "2186800"
  },
  {
    "text": "infrastructure testings real time and in a gamified ways and you know they might",
    "start": "2186800",
    "end": "2192240"
  },
  {
    "text": "see their score decreasing so the game just just keeps on going or typically for you know they last for uh you know",
    "start": "2192240",
    "end": "2199839"
  },
  {
    "text": "varying from three to four to five hours but the several challenges that gets thrown at players throughout the day",
    "start": "2199839",
    "end": "2206000"
  },
  {
    "text": "just keeps them on their toes and there's this is so exciting to host such game days events for the teams to",
    "start": "2206000",
    "end": "2212079"
  },
  {
    "text": "collaborate and then you know testing their problem solving so if you have already not participated in any of the",
    "start": "2212079",
    "end": "2219119"
  },
  {
    "text": "game days and if you have dance uh go tell them to host one game day for you",
    "start": "2219119",
    "end": "2224320"
  },
  {
    "text": "or also you can join us at the invent so we'll be very happy to you know host it and give you that gamified uh",
    "start": "2224320",
    "end": "2231280"
  },
  {
    "text": "experience for both operations and devops great thanks yeah no problem so yeah they're really",
    "start": "2231280",
    "end": "2237280"
  },
  {
    "text": "handy lots of fun um you know so great little events to be able to attend if you have enterprise",
    "start": "2237280",
    "end": "2242320"
  },
  {
    "text": "support and such you can reach out to your technical account manager all right so i'm going to show you here",
    "start": "2242320",
    "end": "2247520"
  },
  {
    "text": "as we go through back to the video a little or back to this on what it looks like to run through the overall instance",
    "start": "2247520",
    "end": "2253280"
  },
  {
    "text": "in a completed process right so i wanted to show you here just kind of what a completed timeline looks like when",
    "start": "2253280",
    "end": "2258720"
  },
  {
    "text": "you're going through the environment and be able to kind of see as we run this experiment you know what a completed one",
    "start": "2258720",
    "end": "2263839"
  },
  {
    "text": "looks like uh this can be used here for historical purposes to go back and be able to reference to see you know do",
    "start": "2263839",
    "end": "2268960"
  },
  {
    "text": "this experiment succeed last time did it follow our checks um you know really like chinese mentioning build a plan",
    "start": "2268960",
    "end": "2275119"
  },
  {
    "text": "that you're going to use mentioned before have a target uh kind of goal that you're going to be able to leverage",
    "start": "2275119",
    "end": "2281040"
  },
  {
    "text": "and do this for each experiment that you can be running so got a lot of stuff that we can do here",
    "start": "2281040",
    "end": "2287119"
  },
  {
    "text": "um throughout things so i'm going to jump back over to my experiment template here um and we're going to be able to go",
    "start": "2287119",
    "end": "2292400"
  },
  {
    "text": "in and start this experiment so we saw what it looked like before completed i want to see just show you",
    "start": "2292400",
    "end": "2297920"
  },
  {
    "text": "what it looks like when you kick one off just kind of get started in the process as the last part of our little demo here",
    "start": "2297920",
    "end": "2302960"
  },
  {
    "text": "of today um but as we go to start an experiment this little box is going to come up uh",
    "start": "2302960",
    "end": "2309200"
  },
  {
    "text": "and it's going to give you a little warning message right you're about to start an experiment and this experiment has actions that it's going to take",
    "start": "2309200",
    "end": "2315040"
  },
  {
    "text": "against the resources that you define so you want to make sure that either you know these are going to happen if you",
    "start": "2315040",
    "end": "2320480"
  },
  {
    "text": "schedule these like i said using automation you want to make sure you obviously know when you're going to do those but if you're going to manually be doing this this may be your first time",
    "start": "2320480",
    "end": "2327119"
  },
  {
    "text": "testing through chaos engineering um you might do it in one of your other environments other than production um",
    "start": "2327119",
    "end": "2334000"
  },
  {
    "text": "but if you're going to be running this production even still and you don't have a stop condition you want to make sure that you know that these experiments are",
    "start": "2334000",
    "end": "2340240"
  },
  {
    "text": "starting it's going to make you type start in here this is just kind of a one last little safeguard for you before you",
    "start": "2340240",
    "end": "2345680"
  },
  {
    "text": "actually start experimenting to know that i'm about to impact some resources in my environment let all the necessary parties know we'll",
    "start": "2345680",
    "end": "2352640"
  },
  {
    "text": "type start and they'll be able to start our experiment and we'll see that we now have these impending state um",
    "start": "2352640",
    "end": "2359920"
  },
  {
    "text": "and we'll refresh here in just a second but these are going to sit in pending for just a moment and we'll see one of",
    "start": "2359920",
    "end": "2365359"
  },
  {
    "text": "our ec2 instances here go from running refresh again and it'll go into stopping and so it has",
    "start": "2365359",
    "end": "2370720"
  },
  {
    "text": "chosen that instance to stop and if we come back into our experiment we'll see that it's now running so we went from",
    "start": "2370720",
    "end": "2377680"
  },
  {
    "text": "pending to running and we now see that that action is happening against our resources in aws so if we check our",
    "start": "2377680",
    "end": "2383839"
  },
  {
    "text": "instance again here eventually it'll go from stopping to stop and if we",
    "start": "2383839",
    "end": "2388960"
  },
  {
    "text": "have our application monitoring and our website up and running we may start checking it now to see hey um",
    "start": "2388960",
    "end": "2395200"
  },
  {
    "text": "is everything working right we had a web server that was hosting a couple different websites we'd want to make sure that all those websites are working",
    "start": "2395200",
    "end": "2401440"
  },
  {
    "text": "we've got you know cloudwatch synthetic monitoring set up on those you go check those monitors make sure that we've got",
    "start": "2401440",
    "end": "2406960"
  },
  {
    "text": "performance monitoring for the application side uh maybe we're gonna start tracing stuff at x-ray to make sure that you know we're not seeing any",
    "start": "2406960",
    "end": "2413440"
  },
  {
    "text": "impact um in those tools and be able to check here so",
    "start": "2413440",
    "end": "2418960"
  },
  {
    "text": "um that's what we'll kind of see as we get that instance to stop where we're gonna really wanna start making sure that we're looking at all of our visibility",
    "start": "2418960",
    "end": "2425119"
  },
  {
    "text": "and observability side of thing to understand you know what's happening in the environment now that we stopped that instance",
    "start": "2425119",
    "end": "2432079"
  },
  {
    "text": "and so even though my instances stop we can see here that we've got running and pending and it's going to stay in pending for",
    "start": "2432079",
    "end": "2438640"
  },
  {
    "text": "this other one for a little while because we do have that three minute mark set so this is where i mentioned before i wasn't going to make you wait",
    "start": "2438640",
    "end": "2444960"
  },
  {
    "text": "for the three minutes to finish then the other three minutes to go through again uh and why we kind of looked at the",
    "start": "2444960",
    "end": "2450079"
  },
  {
    "text": "overall timeline of completion before on the experiment um we kind of showed you what it looks like",
    "start": "2450079",
    "end": "2455520"
  },
  {
    "text": "on the timeline wise to be able to go through things and see you know how overall you can leverage fault injection",
    "start": "2455520",
    "end": "2461359"
  },
  {
    "text": "simulator and get started really quickly um to have it actually take action against your resources whether it just",
    "start": "2461359",
    "end": "2466800"
  },
  {
    "text": "be that stop of an ec2 instance or as we mentioned before um",
    "start": "2466800",
    "end": "2472319"
  },
  {
    "text": "in the different you know api throttling the rds multi-easy the eks",
    "start": "2472319",
    "end": "2477839"
  },
  {
    "text": "pod you know deletion for whatever application and ecs um we have three tutorials that you can get",
    "start": "2477839",
    "end": "2484079"
  },
  {
    "text": "started with and then we have several blogs that we'll post some additional links to and stuff here as well uh to be",
    "start": "2484079",
    "end": "2489440"
  },
  {
    "text": "able to you know give you some examples of how you'll be able to um get started",
    "start": "2489440",
    "end": "2495119"
  },
  {
    "text": "in testing some of these items so thank you so much do you have anything else that you wanted to add",
    "start": "2495119",
    "end": "2501920"
  },
  {
    "text": "so far no i think i'm good you kind of already covered raw but yes i think uh the one",
    "start": "2501920",
    "end": "2508480"
  },
  {
    "text": "thing uh that you know we kind of just do in uh is it i mean these there are",
    "start": "2508480",
    "end": "2513680"
  },
  {
    "text": "several things you know you need to think about before using swiss but as rob was mentioning right uh we need to",
    "start": "2513680",
    "end": "2519520"
  },
  {
    "text": "also focus on uh you know the fault injection experiment matures you can just you know",
    "start": "2519520",
    "end": "2525760"
  },
  {
    "text": "introduce fault injections to continuously assess the resilience in the production environment",
    "start": "2525760",
    "end": "2530880"
  },
  {
    "text": "and also uh you know once your experiment is over just evaluate if your application resiliency is in line with",
    "start": "2530880",
    "end": "2537680"
  },
  {
    "text": "your business and the technical expectations as well because that's that's very important so yeah these are",
    "start": "2537680",
    "end": "2543440"
  },
  {
    "text": "the things that i would just like to mention great thanks tanya and we did have a question that came in from the audience",
    "start": "2543440",
    "end": "2550000"
  },
  {
    "text": "here just a second ago can i just address here um so elijah cahill uh wanted to know what is the level of",
    "start": "2550000",
    "end": "2556079"
  },
  {
    "text": "support do i have during such an experiment for my business is it possible to get a team from beer side on standby and so just address the glass",
    "start": "2556079",
    "end": "2563440"
  },
  {
    "text": "it's going to depend on what level of support you have from aws fault injection simulator is meant to be a",
    "start": "2563440",
    "end": "2569359"
  },
  {
    "text": "fully managed service that you can implement and use within your environment to test your team is going to know your",
    "start": "2569359",
    "end": "2574720"
  },
  {
    "text": "application itself best to understand what kind of metrics you're going to be tracking against for performance wise um",
    "start": "2574720",
    "end": "2581359"
  },
  {
    "text": "so that way you don't actually have to use aws support necessarily if you did have questions and such if",
    "start": "2581359",
    "end": "2587119"
  },
  {
    "text": "you have you know developer support business support enterprise support you can open a technical support case for questions on fault injection simulator",
    "start": "2587119",
    "end": "2594000"
  },
  {
    "text": "if say something isn't working the way that you anticipated it to work in your experiment as the actual execution of",
    "start": "2594000",
    "end": "2599920"
  },
  {
    "text": "the experiment right but we won't be able to provide application support on your application itself",
    "start": "2599920",
    "end": "2605599"
  },
  {
    "text": "we'll be able to provide support on the fault injection simulator service itself",
    "start": "2605599",
    "end": "2611760"
  },
  {
    "text": "all right so we don't have any other questions right",
    "start": "2613680",
    "end": "2619280"
  },
  {
    "text": "now from the audience but that concludes kind of our demo overall of the aws fault injection",
    "start": "2619280",
    "end": "2624960"
  },
  {
    "text": "simulator and the service so everyone today we really looked at the aws fault injection simulator a managed solution",
    "start": "2624960",
    "end": "2631839"
  },
  {
    "text": "to help you get started with chaos engineering in your aws environment uh",
    "start": "2631839",
    "end": "2637119"
  },
  {
    "text": "if there are questions that weren't answered today that we missed at all please feel free to post them in repost.aws",
    "start": "2637119",
    "end": "2642319"
  },
  {
    "text": "email us any feedback you have to aws supports you at amazon.com we do want her from here from you so please uh",
    "start": "2642319",
    "end": "2648880"
  },
  {
    "text": "shoot us an email let us know what you'd like to see on the show and if you join us next week we'll be discussing more",
    "start": "2648880",
    "end": "2654160"
  },
  {
    "text": "about improving reliability and resiliency in aws as one of our principal reliability engineers so thank",
    "start": "2654160",
    "end": "2659599"
  },
  {
    "text": "you for joining us at aws sports u and happy cloud computing everyone [Music]",
    "start": "2659599",
    "end": "2676069"
  },
  {
    "text": "you",
    "start": "2678079",
    "end": "2680160"
  }
]