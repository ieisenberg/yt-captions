[
  {
    "start": "0",
    "end": "48000"
  },
  {
    "text": "hi my name is Bri o'keef I'm a principal",
    "start": "520",
    "end": "2760"
  },
  {
    "text": "Neptune specialist Solutions architect",
    "start": "2760",
    "end": "4359"
  },
  {
    "text": "at AWS and I'd like to welcome you to a",
    "start": "4359",
    "end": "6640"
  },
  {
    "text": "new series titled graph that in this",
    "start": "6640",
    "end": "9000"
  },
  {
    "text": "series we will take public data sets and",
    "start": "9000",
    "end": "11040"
  },
  {
    "text": "convert them to a graph model optimized",
    "start": "11040",
    "end": "13000"
  },
  {
    "text": "for Amazon Neptune Amazon Neptune is a",
    "start": "13000",
    "end": "15799"
  },
  {
    "text": "fast reliable fully managed graph",
    "start": "15799",
    "end": "18000"
  },
  {
    "text": "database service that makes it easy to",
    "start": "18000",
    "end": "20519"
  },
  {
    "text": "build and run applications that work",
    "start": "20519",
    "end": "22680"
  },
  {
    "text": "with highly connected data sets the core",
    "start": "22680",
    "end": "25119"
  },
  {
    "text": "of Neptune is a purpose-built high-",
    "start": "25119",
    "end": "27160"
  },
  {
    "text": "performance graph database engine this",
    "start": "27160",
    "end": "29599"
  },
  {
    "text": "engine is optimized for storing billions",
    "start": "29599",
    "end": "31679"
  },
  {
    "text": "of relationships and quering the graph",
    "start": "31679",
    "end": "33680"
  },
  {
    "text": "with millisecond latency one common",
    "start": "33680",
    "end": "36200"
  },
  {
    "text": "request from customers is for assistance",
    "start": "36200",
    "end": "38399"
  },
  {
    "text": "creating their graph database model so",
    "start": "38399",
    "end": "41640"
  },
  {
    "text": "we hope this series will inspire and",
    "start": "41640",
    "end": "43719"
  },
  {
    "text": "educate on the subject now let's get on",
    "start": "43719",
    "end": "45760"
  },
  {
    "text": "to our first",
    "start": "45760",
    "end": "48399"
  },
  {
    "start": "48000",
    "end": "90000"
  },
  {
    "text": "episode in this episode we are going to",
    "start": "48520",
    "end": "51239"
  },
  {
    "text": "take the train routes of the United",
    "start": "51239",
    "end": "52960"
  },
  {
    "text": "States National Railroad passenger",
    "start": "52960",
    "end": "54719"
  },
  {
    "text": "Corporation also known as Amtrak",
    "start": "54719",
    "end": "57600"
  },
  {
    "text": "Amtrak's network has over 500 rail",
    "start": "57600",
    "end": "59920"
  },
  {
    "text": "stations in 46 of the",
    "start": "59920",
    "end": "62359"
  },
  {
    "text": "48 contiguous United States and three",
    "start": "62359",
    "end": "65720"
  },
  {
    "text": "Canadian provinces we are going to build",
    "start": "65720",
    "end": "68240"
  },
  {
    "text": "a graph to determine routes to get",
    "start": "68240",
    "end": "69920"
  },
  {
    "text": "between any station this is not a huge",
    "start": "69920",
    "end": "72560"
  },
  {
    "text": "graph by many standards but we are going",
    "start": "72560",
    "end": "74439"
  },
  {
    "text": "to make it a little challenging by",
    "start": "74439",
    "end": "75880"
  },
  {
    "text": "putting a limitation on ourselves we",
    "start": "75880",
    "end": "78240"
  },
  {
    "text": "aren't going to use geospatial",
    "start": "78240",
    "end": "79920"
  },
  {
    "text": "information so we cannot use that to",
    "start": "79920",
    "end": "82040"
  },
  {
    "text": "help us navigate the graph this is going",
    "start": "82040",
    "end": "84200"
  },
  {
    "text": "to be a pure graph traversal",
    "start": "84200",
    "end": "88479"
  },
  {
    "text": "exercise",
    "start": "88840",
    "end": "91840"
  },
  {
    "start": "90000",
    "end": "177000"
  },
  {
    "text": "first we need to start with data we have",
    "start": "92759",
    "end": "95240"
  },
  {
    "text": "two CSV files of",
    "start": "95240",
    "end": "96920"
  },
  {
    "text": "data a list of all the train stations",
    "start": "96920",
    "end": "99520"
  },
  {
    "text": "serving Amtrak in the network in a CSV f",
    "start": "99520",
    "end": "102320"
  },
  {
    "text": "file called stations this has the full",
    "start": "102320",
    "end": "105240"
  },
  {
    "text": "name a station code and a label called",
    "start": "105240",
    "end": "107520"
  },
  {
    "text": "train station we also created a unique",
    "start": "107520",
    "end": "109960"
  },
  {
    "text": "ID for each node By prefixing The",
    "start": "109960",
    "end": "111759"
  },
  {
    "text": "Station code with TS short for train",
    "start": "111759",
    "end": "114159"
  },
  {
    "text": "station we use this prefix because",
    "start": "114159",
    "end": "116680"
  },
  {
    "text": "Neptune requires the ID column to be",
    "start": "116680",
    "end": "118799"
  },
  {
    "text": "unique throughout the entire cluster so",
    "start": "118799",
    "end": "121240"
  },
  {
    "text": "if we add other data sets where the",
    "start": "121240",
    "end": "122880"
  },
  {
    "text": "unique identifiers overlap with station",
    "start": "122880",
    "end": "124960"
  },
  {
    "text": "codes this will help keep them globally",
    "start": "124960",
    "end": "127959"
  },
  {
    "text": "unique second we have a file listing all",
    "start": "127959",
    "end": "131680"
  },
  {
    "text": "the root segments connecting any two",
    "start": "131680",
    "end": "133879"
  },
  {
    "text": "train stations",
    "start": "133879",
    "end": "136920"
  },
  {
    "text": "together this is a file called Roots",
    "start": "138840",
    "end": "142239"
  },
  {
    "text": "this again has a unique ID where we",
    "start": "142239",
    "end": "144160"
  },
  {
    "text": "generate by appeal by appending values",
    "start": "144160",
    "end": "147519"
  },
  {
    "text": "that uniquely describe the segment",
    "start": "147519",
    "end": "149800"
  },
  {
    "text": "namely the two stations and the Amtrak",
    "start": "149800",
    "end": "152160"
  },
  {
    "text": "route name as two stations can be",
    "start": "152160",
    "end": "154640"
  },
  {
    "text": "connected on multiple Amtrak service",
    "start": "154640",
    "end": "156440"
  },
  {
    "text": "routes for example I live in Rochester",
    "start": "156440",
    "end": "159239"
  },
  {
    "text": "New York and our train station is",
    "start": "159239",
    "end": "160760"
  },
  {
    "text": "connected to Buffalo and Syracuse on",
    "start": "160760",
    "end": "162879"
  },
  {
    "text": "three different routes the Empire",
    "start": "162879",
    "end": "164480"
  },
  {
    "text": "service Lakeshore limited and the maple",
    "start": "164480",
    "end": "167120"
  },
  {
    "text": "leaf all three of these connect to the",
    "start": "167120",
    "end": "169440"
  },
  {
    "text": "same stations from Rochester using the",
    "start": "169440",
    "end": "171080"
  },
  {
    "text": "same tracks but there are different",
    "start": "171080",
    "end": "172720"
  },
  {
    "text": "overall routes that happen to overlap in",
    "start": "172720",
    "end": "175319"
  },
  {
    "text": "this",
    "start": "175319",
    "end": "177400"
  },
  {
    "start": "177000",
    "end": "248000"
  },
  {
    "text": "segment here we're using a nept notebook",
    "start": "177400",
    "end": "179879"
  },
  {
    "text": "book which is a Jupiter notebook with",
    "start": "179879",
    "end": "182200"
  },
  {
    "text": "custom Magics that can be installed in",
    "start": "182200",
    "end": "183920"
  },
  {
    "text": "your AWS account to make it easier to",
    "start": "183920",
    "end": "186159"
  },
  {
    "text": "interact with Neptune we use the Neptune",
    "start": "186159",
    "end": "188680"
  },
  {
    "text": "bulk loader format to easily load this",
    "start": "188680",
    "end": "190920"
  },
  {
    "text": "data into an Amazon Neptune cluster I",
    "start": "190920",
    "end": "193480"
  },
  {
    "text": "have",
    "start": "193480",
    "end": "194519"
  },
  {
    "text": "created you could see that the data",
    "start": "194519",
    "end": "197120"
  },
  {
    "text": "loaded in about 6 seconds and it took",
    "start": "197120",
    "end": "200239"
  },
  {
    "text": "and it loaded about",
    "start": "200239",
    "end": "201560"
  },
  {
    "text": "3,290 total",
    "start": "201560",
    "end": "204080"
  },
  {
    "text": "records with no",
    "start": "204080",
    "end": "207440"
  },
  {
    "text": "errors after we load this data",
    "start": "207760",
    "end": "210840"
  },
  {
    "text": "we can start writing simple queries like",
    "start": "210840",
    "end": "212959"
  },
  {
    "text": "this to see all the cities that we",
    "start": "212959",
    "end": "215000"
  },
  {
    "text": "connect",
    "start": "215000",
    "end": "216879"
  },
  {
    "text": "to however we will quickly discover we",
    "start": "216879",
    "end": "220560"
  },
  {
    "text": "have an in efficiency issue because a",
    "start": "220560",
    "end": "223000"
  },
  {
    "text": "number of overlapping route",
    "start": "223000",
    "end": "226720"
  },
  {
    "text": "segments within just two hops of",
    "start": "228959",
    "end": "231360"
  },
  {
    "text": "Rochester we have over 18 potential ways",
    "start": "231360",
    "end": "233920"
  },
  {
    "text": "to travel to four potential stations bfx",
    "start": "233920",
    "end": "238040"
  },
  {
    "text": "which is in Buffalo r New York UDA and",
    "start": "238040",
    "end": "241560"
  },
  {
    "text": "Erie",
    "start": "241560",
    "end": "244519"
  },
  {
    "start": "248000",
    "end": "590000"
  },
  {
    "text": "Pennsylvania here we can see the trains",
    "start": "248720",
    "end": "251000"
  },
  {
    "text": "Network in Upstate New York but this is",
    "start": "251000",
    "end": "254000"
  },
  {
    "text": "just the Empire service line we also",
    "start": "254000",
    "end": "256799"
  },
  {
    "text": "have the Lakeshore",
    "start": "256799",
    "end": "259759"
  },
  {
    "text": "limited and the maple",
    "start": "259840",
    "end": "263560"
  },
  {
    "text": "leaf now we're going to take that same",
    "start": "265479",
    "end": "268280"
  },
  {
    "text": "out query that we ran to only look at",
    "start": "268280",
    "end": "270560"
  },
  {
    "text": "two hops from Rochester and now we're",
    "start": "270560",
    "end": "272600"
  },
  {
    "text": "going to look at nine hops from",
    "start": "272600",
    "end": "273880"
  },
  {
    "text": "Rochester instead and we're going to use",
    "start": "273880",
    "end": "275800"
  },
  {
    "text": "the Query profile option to show us the",
    "start": "275800",
    "end": "278400"
  },
  {
    "text": "statistics and and the execution plan",
    "start": "278400",
    "end": "281280"
  },
  {
    "text": "rather than just the results so we can",
    "start": "281280",
    "end": "284360"
  },
  {
    "text": "investigate the magnitude of this",
    "start": "284360",
    "end": "287758"
  },
  {
    "text": "query so when we scroll down to the",
    "start": "289240",
    "end": "291520"
  },
  {
    "text": "relevant part in the",
    "start": "291520",
    "end": "293520"
  },
  {
    "text": "statistics we can see that there are",
    "start": "293520",
    "end": "295600"
  },
  {
    "text": "actually",
    "start": "295600",
    "end": "297360"
  },
  {
    "text": "255,000 pads that need to Beed ract in",
    "start": "297360",
    "end": "301160"
  },
  {
    "text": "memory therefore we're going to take an",
    "start": "301160",
    "end": "303479"
  },
  {
    "text": "additional step of adding a new Edge to",
    "start": "303479",
    "end": "307240"
  },
  {
    "text": "consolidate these multiple routes into a",
    "start": "307240",
    "end": "309520"
  },
  {
    "text": "single connection and we're going to",
    "start": "309520",
    "end": "311440"
  },
  {
    "text": "call the we're going to label this Edge",
    "start": "311440",
    "end": "313360"
  },
  {
    "text": "has routes",
    "start": "313360",
    "end": "315639"
  },
  {
    "text": "to when we run this query you could see",
    "start": "315639",
    "end": "318960"
  },
  {
    "text": "that it creates",
    "start": "318960",
    "end": "321319"
  },
  {
    "text": "1,196 new bidirectional edges between",
    "start": "321319",
    "end": "324199"
  },
  {
    "text": "two",
    "start": "324199",
    "end": "326039"
  },
  {
    "text": "cities you don't actually need bir",
    "start": "326039",
    "end": "328360"
  },
  {
    "text": "directional edges",
    "start": "328360",
    "end": "330720"
  },
  {
    "text": "you can handle traversing either",
    "start": "330720",
    "end": "332360"
  },
  {
    "text": "direction at the query level but for",
    "start": "332360",
    "end": "334479"
  },
  {
    "text": "Simplicity we are taking this approach",
    "start": "334479",
    "end": "336880"
  },
  {
    "text": "here now if we check that same query for",
    "start": "336880",
    "end": "340240"
  },
  {
    "text": "nine hops from Rochester but using the",
    "start": "340240",
    "end": "343360"
  },
  {
    "text": "the new Edge that we",
    "start": "343360",
    "end": "346280"
  },
  {
    "text": "created we can see that there are only",
    "start": "347360",
    "end": "351759"
  },
  {
    "text": "22,000 pads that we need to track in",
    "start": "351759",
    "end": "354120"
  },
  {
    "text": "memory as opposed to the 255,000 pads",
    "start": "354120",
    "end": "357400"
  },
  {
    "text": "that we had",
    "start": "357400",
    "end": "358479"
  },
  {
    "text": "before this is much more reasonable but",
    "start": "358479",
    "end": "361720"
  },
  {
    "text": "once we hit highly connected",
    "start": "361720",
    "end": "363400"
  },
  {
    "text": "interconnected stations like Chicago or",
    "start": "363400",
    "end": "366120"
  },
  {
    "text": "the East Coast we're going to quickly",
    "start": "366120",
    "end": "369520"
  },
  {
    "text": "start growing exponentially",
    "start": "369520",
    "end": "371560"
  },
  {
    "text": "again so let's run this again now with",
    "start": "371560",
    "end": "374240"
  },
  {
    "text": "12 hops instead of",
    "start": "374240",
    "end": "377840"
  },
  {
    "text": "nine and again we're running it with the",
    "start": "382680",
    "end": "384919"
  },
  {
    "text": "profile option so that we get all the",
    "start": "384919",
    "end": "388400"
  },
  {
    "text": "statistics",
    "start": "388400",
    "end": "390599"
  },
  {
    "text": "if we scroll",
    "start": "390599",
    "end": "392599"
  },
  {
    "text": "down you can see that I took we have now",
    "start": "392599",
    "end": "395440"
  },
  {
    "text": "have 524,000 routes that we need to",
    "start": "395440",
    "end": "398479"
  },
  {
    "text": "track so again if we try to if we try to",
    "start": "398479",
    "end": "402000"
  },
  {
    "text": "grow go out too far like in this case",
    "start": "402000",
    "end": "405160"
  },
  {
    "text": "going cross country from Rochester to",
    "start": "405160",
    "end": "408400"
  },
  {
    "text": "Los",
    "start": "408400",
    "end": "410000"
  },
  {
    "text": "Angeles we are going to see that we're",
    "start": "410000",
    "end": "413759"
  },
  {
    "text": "going to run out of memory because there",
    "start": "413759",
    "end": "415440"
  },
  {
    "text": "are still too many potential paths to",
    "start": "415440",
    "end": "418000"
  },
  {
    "text": "explore and to be",
    "start": "418000",
    "end": "420000"
  },
  {
    "text": "retained so here you could see this",
    "start": "420000",
    "end": "422000"
  },
  {
    "text": "query in this langu we're using Gremlin",
    "start": "422000",
    "end": "423759"
  },
  {
    "text": "here so we're starting out with the",
    "start": "423759",
    "end": "424919"
  },
  {
    "text": "train station code of Rochester and",
    "start": "424919",
    "end": "426759"
  },
  {
    "text": "we're going to go repeatedly follow",
    "start": "426759",
    "end": "428759"
  },
  {
    "text": "these has routes to and simple path just",
    "start": "428759",
    "end": "431080"
  },
  {
    "text": "means don't retrace your steps until we",
    "start": "431080",
    "end": "433319"
  },
  {
    "text": "get to the train station code for Los",
    "start": "433319",
    "end": "435800"
  },
  {
    "text": "Angeles",
    "start": "435800",
    "end": "437599"
  },
  {
    "text": "LAX and we want to return five paths and",
    "start": "437599",
    "end": "440560"
  },
  {
    "text": "you can see that we cannot complete this",
    "start": "440560",
    "end": "442400"
  },
  {
    "text": "because of memory",
    "start": "442400",
    "end": "444720"
  },
  {
    "text": "limitations so let's think how we can",
    "start": "444720",
    "end": "447599"
  },
  {
    "text": "further reduce the problem space",
    "start": "447599",
    "end": "451319"
  },
  {
    "text": "one thing we know is that railroad lines",
    "start": "451639",
    "end": "453560"
  },
  {
    "text": "are generally straight lines with",
    "start": "453560",
    "end": "455800"
  },
  {
    "text": "sequential",
    "start": "455800",
    "end": "457000"
  },
  {
    "text": "stops and occasionally two different",
    "start": "457000",
    "end": "459960"
  },
  {
    "text": "routes intersect at certain stations it",
    "start": "459960",
    "end": "463039"
  },
  {
    "text": "is those stations where the routes",
    "start": "463039",
    "end": "464879"
  },
  {
    "text": "intersect that are important therefore",
    "start": "464879",
    "end": "467319"
  },
  {
    "text": "let's write a query that will identify",
    "start": "467319",
    "end": "469400"
  },
  {
    "text": "stations that connect to three or more",
    "start": "469400",
    "end": "472240"
  },
  {
    "text": "other",
    "start": "472240",
    "end": "474440"
  },
  {
    "text": "stations so here's a gremlin query that",
    "start": "474440",
    "end": "477919"
  },
  {
    "text": "is going to calculate this",
    "start": "477919",
    "end": "481319"
  },
  {
    "text": "and you can see we're looking for any",
    "start": "486720",
    "end": "489280"
  },
  {
    "text": "station where it has more routes to that",
    "start": "489280",
    "end": "492199"
  },
  {
    "text": "we're after we do duplicate them and",
    "start": "492199",
    "end": "494120"
  },
  {
    "text": "count them it's greater than two so you",
    "start": "494120",
    "end": "496800"
  },
  {
    "text": "can see we have about 101 of our 500 or",
    "start": "496800",
    "end": "499960"
  },
  {
    "text": "more stations or 500 plus stations",
    "start": "499960",
    "end": "503120"
  },
  {
    "text": "connect to three or more other",
    "start": "503120",
    "end": "505720"
  },
  {
    "text": "stations so what we want to do is we",
    "start": "505720",
    "end": "507759"
  },
  {
    "text": "want to add a second label to stations",
    "start": "507759",
    "end": "509960"
  },
  {
    "text": "right if you remember when we bulk",
    "start": "509960",
    "end": "511120"
  },
  {
    "text": "loaded it we created that station called",
    "start": "511120",
    "end": "514919"
  },
  {
    "text": "we created the label called jump um",
    "start": "514919",
    "end": "517039"
  },
  {
    "text": "train station now we're going to add a",
    "start": "517039",
    "end": "519000"
  },
  {
    "text": "second label to these stations called",
    "start": "519000",
    "end": "521800"
  },
  {
    "text": "Junction one of the things that's nice",
    "start": "521800",
    "end": "523599"
  },
  {
    "text": "about Neptune is that when you're doing",
    "start": "523599",
    "end": "526000"
  },
  {
    "text": "property graph data as we are here you",
    "start": "526000",
    "end": "528200"
  },
  {
    "text": "can switch between two different",
    "start": "528200",
    "end": "530279"
  },
  {
    "text": "languages that we support both Gremlin",
    "start": "530279",
    "end": "532200"
  },
  {
    "text": "and open",
    "start": "532200",
    "end": "534080"
  },
  {
    "text": "Cipher in this case we're going to",
    "start": "534080",
    "end": "535959"
  },
  {
    "text": "switch to open Cipher here just because",
    "start": "535959",
    "end": "538120"
  },
  {
    "text": "it's much easier in that Lang language",
    "start": "538120",
    "end": "539440"
  },
  {
    "text": "to add a second label so first let's",
    "start": "539440",
    "end": "542519"
  },
  {
    "text": "let's make sure that our equivalent",
    "start": "542519",
    "end": "544880"
  },
  {
    "text": "query to what we had just written in",
    "start": "544880",
    "end": "546079"
  },
  {
    "text": "Gremlin you know that we have the",
    "start": "546079",
    "end": "547399"
  },
  {
    "text": "equivalent here in open Cipher and so",
    "start": "547399",
    "end": "550600"
  },
  {
    "text": "you can see the results look the same",
    "start": "550600",
    "end": "552320"
  },
  {
    "text": "there's also 101",
    "start": "552320",
    "end": "554760"
  },
  {
    "text": "entries so we're going to modify this",
    "start": "554760",
    "end": "556839"
  },
  {
    "text": "query slightly to add this um set St",
    "start": "556839",
    "end": "561440"
  },
  {
    "text": "colon",
    "start": "561440",
    "end": "562519"
  },
  {
    "text": "Junction so what this means is it's",
    "start": "562519",
    "end": "564399"
  },
  {
    "text": "going to take this train station node",
    "start": "564399",
    "end": "566760"
  },
  {
    "text": "that we identified and we're going to",
    "start": "566760",
    "end": "568120"
  },
  {
    "text": "add a second label to it called Junction",
    "start": "568120",
    "end": "571480"
  },
  {
    "text": "so we're going to run this",
    "start": "571480",
    "end": "574000"
  },
  {
    "text": "query and we get that back result",
    "start": "574000",
    "end": "576320"
  },
  {
    "text": "because we didn't ask for anything in",
    "start": "576320",
    "end": "579320"
  },
  {
    "text": "return um and so here we let's go back",
    "start": "579320",
    "end": "586000"
  },
  {
    "text": "and look at what these Junctions",
    "start": "586000",
    "end": "590480"
  },
  {
    "start": "590000",
    "end": "776000"
  },
  {
    "text": "are if we go back to the map here we can",
    "start": "590480",
    "end": "593839"
  },
  {
    "text": "see that some of these Junctions are",
    "start": "593839",
    "end": "596360"
  },
  {
    "text": "obvious",
    "start": "596360",
    "end": "598120"
  },
  {
    "text": "Albany",
    "start": "598120",
    "end": "599760"
  },
  {
    "text": "Chicago",
    "start": "599760",
    "end": "601800"
  },
  {
    "text": "Cleveland Everett Washington we could",
    "start": "601800",
    "end": "604640"
  },
  {
    "text": "clearly see those on the",
    "start": "604640",
    "end": "607040"
  },
  {
    "text": "maps but the way that we are calculating",
    "start": "607040",
    "end": "609399"
  },
  {
    "text": "these Junctions is a bit naive and we're",
    "start": "609399",
    "end": "611959"
  },
  {
    "text": "actually making more Junctions than we",
    "start": "611959",
    "end": "613920"
  },
  {
    "text": "need notice here that the Syracuse",
    "start": "613920",
    "end": "616760"
  },
  {
    "text": "station has only one set of tracks",
    "start": "616760",
    "end": "618680"
  },
  {
    "text": "running through it but because the",
    "start": "618680",
    "end": "620720"
  },
  {
    "text": "Empire line makes a stop at Rome but the",
    "start": "620720",
    "end": "625680"
  },
  {
    "text": "Lakes Shore limited does not technically",
    "start": "625680",
    "end": "629079"
  },
  {
    "text": "use has three connecting stations",
    "start": "629079",
    "end": "631560"
  },
  {
    "text": "Rochester Rome and",
    "start": "631560",
    "end": "634399"
  },
  {
    "text": "UDA we could introduce an optimization",
    "start": "634399",
    "end": "637000"
  },
  {
    "text": "that detects those two are in a straight",
    "start": "637000",
    "end": "639040"
  },
  {
    "text": "line but we'll keep it simple for this",
    "start": "639040",
    "end": "641200"
  },
  {
    "text": "video and we'll just include that in our",
    "start": "641200",
    "end": "645399"
  },
  {
    "text": "model we also know that the track",
    "start": "647320",
    "end": "650480"
  },
  {
    "text": "between any two Junctions is essentially",
    "start": "650480",
    "end": "653480"
  },
  {
    "text": "a straight line so we can add a shortcut",
    "start": "653480",
    "end": "656399"
  },
  {
    "text": "between two Junctions we're going to",
    "start": "656399",
    "end": "658240"
  },
  {
    "text": "create a new Edge called connecting",
    "start": "658240",
    "end": "661200"
  },
  {
    "text": "Junction we're going to run this query",
    "start": "661200",
    "end": "664399"
  },
  {
    "text": "and we can see that it's creating",
    "start": "664399",
    "end": "667200"
  },
  {
    "text": "342 new edges that connect those",
    "start": "667200",
    "end": "670680"
  },
  {
    "text": "Junctions that are adjacent",
    "start": "670680",
    "end": "674440"
  },
  {
    "text": "together now let's try to get from",
    "start": "674440",
    "end": "676399"
  },
  {
    "text": "Rochester to one of these stations",
    "start": "676399",
    "end": "678480"
  },
  {
    "text": "that's junctioned so we're going to go",
    "start": "678480",
    "end": "679920"
  },
  {
    "text": "to LAX so we could show we're going",
    "start": "679920",
    "end": "682160"
  },
  {
    "text": "across country here and when we run this",
    "start": "682160",
    "end": "686639"
  },
  {
    "text": "query we can see that it it's pretty",
    "start": "686639",
    "end": "689279"
  },
  {
    "text": "efficient right and it's showing the 10",
    "start": "689279",
    "end": "692079"
  },
  {
    "text": "shortest paths now shortest isn't in",
    "start": "692079",
    "end": "694040"
  },
  {
    "text": "terms of distance it's in terms of the",
    "start": "694040",
    "end": "695760"
  },
  {
    "text": "number of Junctions between because",
    "start": "695760",
    "end": "697480"
  },
  {
    "text": "remember we have no concept of distance",
    "start": "697480",
    "end": "699399"
  },
  {
    "text": "here just straight graph",
    "start": "699399",
    "end": "702079"
  },
  {
    "text": "query but you can see we had success",
    "start": "702079",
    "end": "704440"
  },
  {
    "text": "right we found 10 10 different ways to",
    "start": "704440",
    "end": "706920"
  },
  {
    "text": "connect from Rochester to Los Angeles",
    "start": "706920",
    "end": "711120"
  },
  {
    "text": "but what if we wanted to travel to",
    "start": "711120",
    "end": "712600"
  },
  {
    "text": "another station that wasn't a junction",
    "start": "712600",
    "end": "715560"
  },
  {
    "text": "right so our destination here was a",
    "start": "715560",
    "end": "718240"
  },
  {
    "text": "junction train St train station with the",
    "start": "718240",
    "end": "720399"
  },
  {
    "text": "code LAX now we need to add an extra",
    "start": "720399",
    "end": "722880"
  },
  {
    "text": "step where once we get to the junction",
    "start": "722880",
    "end": "725399"
  },
  {
    "text": "to each Junction we need to check to see",
    "start": "725399",
    "end": "727000"
  },
  {
    "text": "if it's actually connected to San",
    "start": "727000",
    "end": "730720"
  },
  {
    "text": "Diego so let's try to run this",
    "start": "731519",
    "end": "735760"
  },
  {
    "text": "query and I'm going to pause this while",
    "start": "737120",
    "end": "739639"
  },
  {
    "text": "this query runs as it's going to take a",
    "start": "739639",
    "end": "743440"
  },
  {
    "text": "while okay this query ran for 2 minutes",
    "start": "743760",
    "end": "747000"
  },
  {
    "text": "um which is our timeout and we can see",
    "start": "747000",
    "end": "748639"
  },
  {
    "text": "here that we got an error message that",
    "start": "748639",
    "end": "750800"
  },
  {
    "text": "the time that the query timed out so it",
    "start": "750800",
    "end": "753399"
  },
  {
    "text": "wasn't able to complete all that work",
    "start": "753399",
    "end": "755680"
  },
  {
    "text": "within the 2 minutes that it had that it",
    "start": "755680",
    "end": "758240"
  },
  {
    "text": "was allowed",
    "start": "758240",
    "end": "760680"
  },
  {
    "text": "to there's the reason is there's still",
    "start": "761680",
    "end": "764320"
  },
  {
    "text": "too many options when you're checking",
    "start": "764320",
    "end": "766160"
  },
  {
    "text": "all the Junctions to see if they're near",
    "start": "766160",
    "end": "768240"
  },
  {
    "text": "near the station that you",
    "start": "768240",
    "end": "771040"
  },
  {
    "text": "have so we're going to think about some",
    "start": "771040",
    "end": "773320"
  },
  {
    "text": "more efficiencies that we can",
    "start": "773320",
    "end": "776440"
  },
  {
    "text": "make let's look at this example of",
    "start": "776440",
    "end": "779320"
  },
  {
    "text": "Albuquerque New Mexico when we are",
    "start": "779320",
    "end": "781839"
  },
  {
    "text": "searching Station to Station to find the",
    "start": "781839",
    "end": "784160"
  },
  {
    "text": "nearest Junctions each time we're",
    "start": "784160",
    "end": "786839"
  },
  {
    "text": "looking at numerous hops each way what",
    "start": "786839",
    "end": "789399"
  },
  {
    "text": "if we pre-identify the closest Junctions",
    "start": "789399",
    "end": "792000"
  },
  {
    "text": "for each",
    "start": "792000",
    "end": "794360"
  },
  {
    "text": "station if we added an explicit Edge to",
    "start": "794360",
    "end": "797639"
  },
  {
    "text": "each of its Junctions in either",
    "start": "797639",
    "end": "799720"
  },
  {
    "text": "direction then the engine knows it's",
    "start": "799720",
    "end": "802160"
  },
  {
    "text": "always one hop never multiple hops from",
    "start": "802160",
    "end": "805199"
  },
  {
    "text": "a junction to a station and it is no",
    "start": "805199",
    "end": "808279"
  },
  {
    "text": "longer an indeterminately long",
    "start": "808279",
    "end": "811959"
  },
  {
    "text": "search and of course we still have that",
    "start": "811959",
    "end": "814880"
  },
  {
    "text": "connecting Junction Edge between the two",
    "start": "814880",
    "end": "817639"
  },
  {
    "text": "adjacent",
    "start": "817639",
    "end": "820240"
  },
  {
    "text": "stations so here's a query where we",
    "start": "822279",
    "end": "824880"
  },
  {
    "text": "going to calculate and add the edges to",
    "start": "824880",
    "end": "827560"
  },
  {
    "text": "the nearest Junction from each station",
    "start": "827560",
    "end": "830399"
  },
  {
    "text": "so we're going to start with the train",
    "start": "830399",
    "end": "831920"
  },
  {
    "text": "station that is not label Junction right",
    "start": "831920",
    "end": "834680"
  },
  {
    "text": "so these are all the train stations that",
    "start": "834680",
    "end": "835920"
  },
  {
    "text": "are not Junctions there our source and",
    "start": "835920",
    "end": "838959"
  },
  {
    "text": "we're going to follow the has routes to",
    "start": "838959",
    "end": "841079"
  },
  {
    "text": "edges outward until we reach the nearest",
    "start": "841079",
    "end": "845040"
  },
  {
    "text": "Junction and that is going to be our",
    "start": "845040",
    "end": "848120"
  },
  {
    "text": "destination and so then we're going to",
    "start": "848120",
    "end": "849959"
  },
  {
    "text": "add an edge that goes from each source",
    "start": "849959",
    "end": "853759"
  },
  {
    "text": "to each destination and it's going to",
    "start": "853759",
    "end": "855639"
  },
  {
    "text": "add the label has Junction so we run",
    "start": "855639",
    "end": "859759"
  },
  {
    "text": "this we're going to see that there are",
    "start": "859759",
    "end": "862279"
  },
  {
    "text": "737 edges that we've created from each",
    "start": "862279",
    "end": "865160"
  },
  {
    "text": "station to its nearest um Junction but",
    "start": "865160",
    "end": "869240"
  },
  {
    "text": "in order to simplify our final query um",
    "start": "869240",
    "end": "872680"
  },
  {
    "text": "we also want to add an edge from each",
    "start": "872680",
    "end": "874920"
  },
  {
    "text": "Junction to itself with that same label",
    "start": "874920",
    "end": "878079"
  },
  {
    "text": "right because obviously a junction is",
    "start": "878079",
    "end": "879800"
  },
  {
    "text": "the closest its nearest Junction so",
    "start": "879800",
    "end": "882680"
  },
  {
    "text": "those 101 Junctions we have now we're",
    "start": "882680",
    "end": "884639"
  },
  {
    "text": "adding essentially a circular Edge that",
    "start": "884639",
    "end": "887560"
  },
  {
    "text": "goes to itself showing that same H",
    "start": "887560",
    "end": "889880"
  },
  {
    "text": "Junction",
    "start": "889880",
    "end": "891600"
  },
  {
    "text": "function and so now we can write a",
    "start": "891600",
    "end": "894000"
  },
  {
    "text": "single query um that is going to show us",
    "start": "894000",
    "end": "897720"
  },
  {
    "text": "that 10 shortest now this is in terms of",
    "start": "897720",
    "end": "900519"
  },
  {
    "text": "Junctions not necessarily miles paths",
    "start": "900519",
    "end": "903560"
  },
  {
    "text": "that go from any St train station to any",
    "start": "903560",
    "end": "906320"
  },
  {
    "text": "other train station because again it's",
    "start": "906320",
    "end": "908519"
  },
  {
    "text": "going to start at the train station it's",
    "start": "908519",
    "end": "910160"
  },
  {
    "text": "going to find its nearest Junction found",
    "start": "910160",
    "end": "912120"
  },
  {
    "text": "that has Junction Edge we had it's going",
    "start": "912120",
    "end": "915040"
  },
  {
    "text": "to repeat the connecting connecting",
    "start": "915040",
    "end": "916920"
  },
  {
    "text": "Junctions until it finds another",
    "start": "916920",
    "end": "919839"
  },
  {
    "text": "Junction where there's an incoming Edge",
    "start": "919839",
    "end": "921920"
  },
  {
    "text": "called H Junction and again the big",
    "start": "921920",
    "end": "924279"
  },
  {
    "text": "difference here is it knows it's only",
    "start": "924279",
    "end": "925519"
  },
  {
    "text": "one hop it has the proper train station",
    "start": "925519",
    "end": "927880"
  },
  {
    "text": "code and then to show the full path",
    "start": "927880",
    "end": "930279"
  },
  {
    "text": "we're going to show that you know tra",
    "start": "930279",
    "end": "933199"
  },
  {
    "text": "Traverse all the way to that train",
    "start": "933199",
    "end": "934839"
  },
  {
    "text": "station and we're going to return that",
    "start": "934839",
    "end": "937040"
  },
  {
    "text": "path by the L by the codes of the",
    "start": "937040",
    "end": "939560"
  },
  {
    "text": "stations in",
    "start": "939560",
    "end": "941040"
  },
  {
    "text": "between so when we show the output here",
    "start": "941040",
    "end": "944120"
  },
  {
    "text": "we can see that there are now again the",
    "start": "944120",
    "end": "946720"
  },
  {
    "text": "10 shortest paths in terms of number of",
    "start": "946720",
    "end": "949120"
  },
  {
    "text": "stations it's connecting to and it's",
    "start": "949120",
    "end": "951920"
  },
  {
    "text": "very fast right we could look at our",
    "start": "951920",
    "end": "953279"
  },
  {
    "text": "query metadata and we got those results",
    "start": "953279",
    "end": "955399"
  },
  {
    "text": "in about",
    "start": "955399",
    "end": "957000"
  },
  {
    "text": "183 milliseconds",
    "start": "957000",
    "end": "960600"
  },
  {
    "start": "960000",
    "end": "1045000"
  },
  {
    "text": "so let's look at this query result on a",
    "start": "960959",
    "end": "963720"
  },
  {
    "text": "map you can see that we're starting up",
    "start": "963720",
    "end": "966040"
  },
  {
    "text": "here in Rochester went to Buffalo down",
    "start": "966040",
    "end": "969240"
  },
  {
    "text": "to Cleveland over to",
    "start": "969240",
    "end": "972560"
  },
  {
    "text": "Toledo to waterl Indiana to Chicago to",
    "start": "972560",
    "end": "977399"
  },
  {
    "text": "jolet",
    "start": "977399",
    "end": "978560"
  },
  {
    "text": "Illinois down to St Louis over to Kansas",
    "start": "978560",
    "end": "982600"
  },
  {
    "text": "City all the way over to Fullerton",
    "start": "982600",
    "end": "986399"
  },
  {
    "text": "California and then down to San",
    "start": "986399",
    "end": "990519"
  },
  {
    "text": "Diego in this episode we learned how to",
    "start": "991560",
    "end": "994240"
  },
  {
    "text": "take a transportation network with many",
    "start": "994240",
    "end": "995920"
  },
  {
    "text": "long linear pads like the Amtrak train",
    "start": "995920",
    "end": "998199"
  },
  {
    "text": "Network and enhance it with additional",
    "start": "998199",
    "end": "1000000"
  },
  {
    "text": "edges and labels to reduce the",
    "start": "1000000",
    "end": "1001480"
  },
  {
    "text": "complexity to make it much higher",
    "start": "1001480",
    "end": "1003720"
  },
  {
    "text": "performing the basic graph with its",
    "start": "1003720",
    "end": "1006000"
  },
  {
    "text": "numerous edges and segments could not",
    "start": "1006000",
    "end": "1007839"
  },
  {
    "text": "calculate long pads in under 2 minutes",
    "start": "1007839",
    "end": "1010399"
  },
  {
    "text": "and with a few Transformations we were",
    "start": "1010399",
    "end": "1012319"
  },
  {
    "text": "able to calculate multiple longdistance",
    "start": "1012319",
    "end": "1014319"
  },
  {
    "text": "routes in under a quarter of a second if",
    "start": "1014319",
    "end": "1016920"
  },
  {
    "text": "you have an open data set in mind",
    "start": "1016920",
    "end": "1019240"
  },
  {
    "text": "you'd like to see transformed into a",
    "start": "1019240",
    "end": "1020920"
  },
  {
    "text": "graph model or use case you'd like to",
    "start": "1020920",
    "end": "1023040"
  },
  {
    "text": "see prototyped please let us know in the",
    "start": "1023040",
    "end": "1025079"
  },
  {
    "text": "comments of this video or reach out to",
    "start": "1025079",
    "end": "1026880"
  },
  {
    "text": "me on LinkedIn I'll have the URL in the",
    "start": "1026880",
    "end": "1030120"
  },
  {
    "text": "comments again this is Brian O'Keefe AWS",
    "start": "1030120",
    "end": "1033678"
  },
  {
    "text": "Neptune specialist Solutions architect",
    "start": "1033679",
    "end": "1035520"
  },
  {
    "text": "and thank you for watching keep on the",
    "start": "1035520",
    "end": "1037360"
  },
  {
    "text": "lookout for our next episode of graph",
    "start": "1037360",
    "end": "1041160"
  },
  {
    "text": "that",
    "start": "1044679",
    "end": "1047678"
  }
]