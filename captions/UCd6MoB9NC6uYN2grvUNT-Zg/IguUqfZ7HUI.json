[
  {
    "text": "- Welcome to \"Back To Basics\". In this episode, \nwe will discuss the use of server-side rendering  ",
    "start": "5916",
    "end": "10639"
  },
  {
    "text": "architecture patterns to improve the performance \nand SEO of your web applications. Over the past  ",
    "start": "10640",
    "end": "16480"
  },
  {
    "text": "20 years of developing web applications, \nthere has been a lot of changes in both  ",
    "start": "16480",
    "end": "20640"
  },
  {
    "text": "technologies and framework. One thing that \nhas stayed constant is the requirement to  ",
    "start": "20640",
    "end": "25359"
  },
  {
    "text": "deliver your webpages with lowest possible \nlatency to your end users. Specifically,  ",
    "start": "25360",
    "end": "31280"
  },
  {
    "text": "when I was developing web application \nusing the client-side rendered framework,  ",
    "start": "31280",
    "end": "35480"
  },
  {
    "text": "the initial webpage load times were very high \nand experienced poor SEO rankings. To fix these  ",
    "start": "35480",
    "end": "42000"
  },
  {
    "text": "issues I had to switch to a server-side rendering \ntechnique. Let's dive deep into why I chose this  ",
    "start": "42000",
    "end": "47600"
  },
  {
    "text": "pattern and how it can improve your application \nperformance. First, let me start by explaining  ",
    "start": "47600",
    "end": "54839"
  },
  {
    "text": "what a server-side rendering or 'SSR' is. SSR \nis a technique used to improve the performance  ",
    "start": "54840",
    "end": "60760"
  },
  {
    "text": "of web applications by rendering the initial \nstate of a webpage on the server and sending  ",
    "start": "60760",
    "end": "66200"
  },
  {
    "text": "the fully rendered HTML to the client. When \na browser or a client requests for a webpage,  ",
    "start": "66200",
    "end": "72439"
  },
  {
    "text": "the server fetches all the data required and \nsends a fully rendered page to the client. The  ",
    "start": "72440",
    "end": "78120"
  },
  {
    "text": "client downloads the required JavaScript files \nand then the JavaScript bundle takes over and  ",
    "start": "78120",
    "end": "83200"
  },
  {
    "text": "makes the webpage fully interactable. A request \nis therefore processed almost immediately from the  ",
    "start": "83200",
    "end": "89200"
  },
  {
    "text": "user's point of view, so that the webpages end up \nbeing displayed very quickly. The main difference  ",
    "start": "89200",
    "end": "95000"
  },
  {
    "text": "that I noticed after changing my design to use \nSSR is that my server's response to the browser  ",
    "start": "95000",
    "end": "100280"
  },
  {
    "text": "is the HTML of the page that is ready to be \nrendered. That means the browser will start  ",
    "start": "100280",
    "end": "105320"
  },
  {
    "text": "rendering the HTML from the server without having \nto wait for all the Javascript to be downloaded  ",
    "start": "105320",
    "end": "110800"
  },
  {
    "text": "and executed. Whereas in my original application \nusing client-side rendered framework, the browser  ",
    "start": "110800",
    "end": "116160"
  },
  {
    "text": "gets a pretty empty document with links to my \nJavaScript files. Then, the browser downloads  ",
    "start": "116160",
    "end": "121320"
  },
  {
    "text": "the JavaScript files and the JavaScript is then \nexecuted through the framework. Additionally,  ",
    "start": "121320",
    "end": "126800"
  },
  {
    "text": "after this implementation of this pattern, I saw \nthat the SEO ranking for my website improved a lot  ",
    "start": "126800",
    "end": "132600"
  },
  {
    "text": "better than the original design. Now, let's take \na look at the components required for running a  ",
    "start": "132600",
    "end": "139200"
  },
  {
    "text": "serve-side rendered web application on AWS. Let's \nseparate this by architectural pieces needed for  ",
    "start": "139200",
    "end": "145520"
  },
  {
    "text": "hosting and execution and architectural pieces \nneeded for building and deploying the code. You  ",
    "start": "145520",
    "end": "151640"
  },
  {
    "text": "always start with a customer. First, front-end \nweb application and its assets could live in a  ",
    "start": "151640",
    "end": "156800"
  },
  {
    "text": "S3 bucket. In order to make the website faster, \nyou add a content delivery network, like am Amazon  ",
    "start": "156800",
    "end": "163320"
  },
  {
    "text": "CloudFront, to ensure fast global delivery to your \ncustomers and cache the contents when needed. Then  ",
    "start": "163320",
    "end": "169440"
  },
  {
    "text": "to make it marketable and secure, you have to \nmanage DNS and SSL certificates for your domain  ",
    "start": "169440",
    "end": "174880"
  },
  {
    "text": "name through services like Amazon Route 53 and AWS \nCertificate Manager. Then you need to manage APIs  ",
    "start": "174880",
    "end": "182120"
  },
  {
    "text": "and server-side compute layer through services \nlike AWS Lambda to fetch data from databases,  ",
    "start": "182120",
    "end": "187720"
  },
  {
    "text": "Content Management System, and third party \nAPIs, and compile the data into a static  ",
    "start": "187720",
    "end": "192640"
  },
  {
    "text": "HTML. For the developers, they wanna commit \ncode to a GIT repository like CodeCommit,  ",
    "start": "192640",
    "end": "197800"
  },
  {
    "text": "GitHub or GitLab. They need to have a continuous \nbuild test and delivery process to push these  ",
    "start": "197800",
    "end": "203000"
  },
  {
    "text": "assets. You can use this architectural pattern \nto build and deploy an SSR web application or  ",
    "start": "203000",
    "end": "209040"
  },
  {
    "text": "choose to use a managed service like AWS Amplify \nHosting that abstracts all these components away  ",
    "start": "209040",
    "end": "214560"
  },
  {
    "text": "from you to easily build and host SSR based web \napplications in a accelerated manner. AWS Amplify  ",
    "start": "214560",
    "end": "221480"
  },
  {
    "text": "is a complete solution that lets front end web \nand mobile developers easily build, ship, host,  ",
    "start": "221480",
    "end": "226840"
  },
  {
    "text": "full stack applications on AWS. It is a reliable, \nsecure, scalable, cost-effective, and has a low  ",
    "start": "226840",
    "end": "233519"
  },
  {
    "text": "operational overhead because it is serverless. \nYou pay for what you use and the heavy lifting of  ",
    "start": "233520",
    "end": "239680"
  },
  {
    "text": "managing all the components is done by Amplify for \nyou. This way, you can deliver content to your end  ",
    "start": "239680",
    "end": "246640"
  },
  {
    "text": "users globally with millisecond latency, improving \nthe user experience. By rendering server-side,  ",
    "start": "246640",
    "end": "253160"
  },
  {
    "text": "search engines can easily index and crawl \ncontent before the page is fully loaded which  ",
    "start": "253160",
    "end": "258200"
  },
  {
    "text": "is ideal for SEO. Web browsers prioritize \npages with faster load times thus correctly  ",
    "start": "258200",
    "end": "265360"
  },
  {
    "text": "indexing webpages is the key. In addition, SSR \nhelps efficiently load webpages for users with  ",
    "start": "265360",
    "end": "271759"
  },
  {
    "text": "slow network and outdated devices. There you \nhave it. We have explored how the server-side  ",
    "start": "271760",
    "end": "278640"
  },
  {
    "text": "rendering pattern can be used to improve the \nperformance and SEO of your web application,  ",
    "start": "278640",
    "end": "283720"
  },
  {
    "text": "and how AWS Amplify can be used to easily build \nand host web applications using SSR. Check out  ",
    "start": "283720",
    "end": "290840"
  },
  {
    "text": "the link below for more details. Thank you for \nwatching \"Back to Basics\" and see you next time.",
    "start": "290840",
    "end": "299560"
  }
]