[
  {
    "text": "hey everybody welcome to collision and",
    "start": "6490",
    "end": "9110"
  },
  {
    "text": "I'm here with Brent and he's gonna talk",
    "start": "9110",
    "end": "10639"
  },
  {
    "text": "today about containers awesome Thank You",
    "start": "10639",
    "end": "14209"
  },
  {
    "text": "Alejandra all right so if you were here",
    "start": "14209",
    "end": "17270"
  },
  {
    "text": "yesterday we talked about how to build",
    "start": "17270",
    "end": "19940"
  },
  {
    "text": "your first container and we went through",
    "start": "19940",
    "end": "22400"
  },
  {
    "text": "the build process we went through",
    "start": "22400",
    "end": "24050"
  },
  {
    "text": "optimising I gave you a github link to",
    "start": "24050",
    "end": "27200"
  },
  {
    "text": "all that all of that work you probably",
    "start": "27200",
    "end": "29450"
  },
  {
    "text": "saw all of the you know docker push to",
    "start": "29450",
    "end": "32719"
  },
  {
    "text": "ECR docker pull from ECR all of that's",
    "start": "32719",
    "end": "35809"
  },
  {
    "text": "available to you today what I want to",
    "start": "35809",
    "end": "38870"
  },
  {
    "text": "talk about is like what do you do after",
    "start": "38870",
    "end": "40820"
  },
  {
    "text": "that what's your next step",
    "start": "40820",
    "end": "42950"
  },
  {
    "text": "or steps and then you know some",
    "start": "42950",
    "end": "45620"
  },
  {
    "text": "decision-making around where should I",
    "start": "45620",
    "end": "47960"
  },
  {
    "text": "run my containers and how should I run",
    "start": "47960",
    "end": "49970"
  },
  {
    "text": "my containers so that's what this talk",
    "start": "49970",
    "end": "52460"
  },
  {
    "text": "is about we're going to talk about",
    "start": "52460",
    "end": "53960"
  },
  {
    "text": "deploying and auto-scaling our",
    "start": "53960",
    "end": "56840"
  },
  {
    "text": "containers and then we're gonna look at",
    "start": "56840",
    "end": "58730"
  },
  {
    "text": "you know a feature or two that might be",
    "start": "58730",
    "end": "60829"
  },
  {
    "text": "handy for you to be aware of on our",
    "start": "60829",
    "end": "63890"
  },
  {
    "text": "platform so basic core concepts we're",
    "start": "63890",
    "end": "68960"
  },
  {
    "text": "gonna talk about decision making and and",
    "start": "68960",
    "end": "71570"
  },
  {
    "text": "like you know the thought process that",
    "start": "71570",
    "end": "73880"
  },
  {
    "text": "you should be in when you're thinking",
    "start": "73880",
    "end": "75350"
  },
  {
    "text": "about containers and then we're gonna",
    "start": "75350",
    "end": "77390"
  },
  {
    "text": "dive into auto-scaling and we're gonna",
    "start": "77390",
    "end": "80510"
  },
  {
    "text": "take a look at service discovery so if",
    "start": "80510",
    "end": "84619"
  },
  {
    "text": "yesterday",
    "start": "84619",
    "end": "85909"
  },
  {
    "text": "you ran docker pull docker run onto on",
    "start": "85909",
    "end": "90140"
  },
  {
    "text": "an instance you would have seen that our",
    "start": "90140",
    "end": "92330"
  },
  {
    "text": "hello world app you could deploy it out",
    "start": "92330",
    "end": "94369"
  },
  {
    "text": "onto any instance that can run docker so",
    "start": "94369",
    "end": "97460"
  },
  {
    "text": "if you have an ec2 instance remember our",
    "start": "97460",
    "end": "100189"
  },
  {
    "text": "app yesterday was written in node it",
    "start": "100189",
    "end": "102350"
  },
  {
    "text": "doesn't need to even have node installed",
    "start": "102350",
    "end": "103850"
  },
  {
    "text": "on it and you can docker run and you can",
    "start": "103850",
    "end": "106759"
  },
  {
    "text": "have your node app up and running and",
    "start": "106759",
    "end": "108979"
  },
  {
    "text": "that's because docker allows you to be",
    "start": "108979",
    "end": "111740"
  },
  {
    "text": "portable allows you to take all of the",
    "start": "111740",
    "end": "114320"
  },
  {
    "text": "necessary components with you and",
    "start": "114320",
    "end": "116360"
  },
  {
    "text": "execute them in whatever environment you",
    "start": "116360",
    "end": "118729"
  },
  {
    "text": "happen to have available to you so",
    "start": "118729",
    "end": "121250"
  },
  {
    "text": "that's great but that was one instance",
    "start": "121250",
    "end": "123979"
  },
  {
    "text": "imagine if you had to do that across ten",
    "start": "123979",
    "end": "127040"
  },
  {
    "text": "instances or across 50 instances or",
    "start": "127040",
    "end": "130280"
  },
  {
    "text": "across a hundred or a thousand instances",
    "start": "130280",
    "end": "132260"
  },
  {
    "text": "when I first started using containers I",
    "start": "132260",
    "end": "134900"
  },
  {
    "text": "was at Spotify",
    "start": "134900",
    "end": "136250"
  },
  {
    "text": "and I was helping build Spotify and",
    "start": "136250",
    "end": "138530"
  },
  {
    "text": "scale Spotify we ran in data centers all",
    "start": "138530",
    "end": "141500"
  },
  {
    "text": "around the world we had thousands and",
    "start": "141500",
    "end": "143750"
  },
  {
    "text": "thousands of hosts that we would run",
    "start": "143750",
    "end": "145880"
  },
  {
    "text": "containers on how in the world can you",
    "start": "145880",
    "end": "148610"
  },
  {
    "text": "expect to do docker run you know",
    "start": "148610",
    "end": "150980"
  },
  {
    "text": "everywhere that you need it to happen",
    "start": "150980",
    "end": "152750"
  },
  {
    "text": "how do you orchestrate that so we",
    "start": "152750",
    "end": "155540"
  },
  {
    "text": "actually started building an",
    "start": "155540",
    "end": "156920"
  },
  {
    "text": "Orchestrator about the same time AWS",
    "start": "156920",
    "end": "159950"
  },
  {
    "text": "started building an Orchestrator and",
    "start": "159950",
    "end": "162320"
  },
  {
    "text": "it's called ECS so orchestration was",
    "start": "162320",
    "end": "166460"
  },
  {
    "text": "very early the thing that was designed",
    "start": "166460",
    "end": "169850"
  },
  {
    "text": "to solve this problem I need to be able",
    "start": "169850",
    "end": "172580"
  },
  {
    "text": "to very quickly and easily manage and",
    "start": "172580",
    "end": "175310"
  },
  {
    "text": "execute docker commands out onto a fleet",
    "start": "175310",
    "end": "179810"
  },
  {
    "text": "of instances and then if an instance",
    "start": "179810",
    "end": "182000"
  },
  {
    "text": "dies a new one can come up in its place",
    "start": "182000",
    "end": "184850"
  },
  {
    "text": "and I'll still you know issue it docker",
    "start": "184850",
    "end": "188690"
  },
  {
    "text": "commands so orchestration should be your",
    "start": "188690",
    "end": "194600"
  },
  {
    "text": "next step now some people think in terms",
    "start": "194600",
    "end": "197570"
  },
  {
    "text": "of well I have a config management",
    "start": "197570",
    "end": "199940"
  },
  {
    "text": "system that can do some things like that",
    "start": "199940",
    "end": "201950"
  },
  {
    "text": "I have chef or puppet or ansible I can",
    "start": "201950",
    "end": "205040"
  },
  {
    "text": "orchestrate with that but the problem is",
    "start": "205040",
    "end": "207260"
  },
  {
    "text": "those systems are all built around the",
    "start": "207260",
    "end": "209660"
  },
  {
    "text": "notion of like paying attention to",
    "start": "209660",
    "end": "211790"
  },
  {
    "text": "what's happening on a single instance",
    "start": "211790",
    "end": "213560"
  },
  {
    "text": "and we want to stop thinking like that",
    "start": "213560",
    "end": "215360"
  },
  {
    "text": "we don't care about single instances",
    "start": "215360",
    "end": "217820"
  },
  {
    "text": "anymore we want to think in terms of is",
    "start": "217820",
    "end": "220340"
  },
  {
    "text": "our app running is our app healthy and",
    "start": "220340",
    "end": "222709"
  },
  {
    "text": "as long as that's the case I don't need",
    "start": "222709",
    "end": "225590"
  },
  {
    "text": "to care about if I'm at ten instances or",
    "start": "225590",
    "end": "228019"
  },
  {
    "text": "50 or 100 I just need to have enough to",
    "start": "228019",
    "end": "231350"
  },
  {
    "text": "be able to run my application and have",
    "start": "231350",
    "end": "233630"
  },
  {
    "text": "it be as healthy as it needs to be so we",
    "start": "233630",
    "end": "237350"
  },
  {
    "text": "have a choice at AWS between",
    "start": "237350",
    "end": "240260"
  },
  {
    "text": "orchestrators ECS has been around for",
    "start": "240260",
    "end": "243260"
  },
  {
    "text": "years now it's the one that is like",
    "start": "243260",
    "end": "244959"
  },
  {
    "text": "massively scalable it can run you know",
    "start": "244959",
    "end": "247910"
  },
  {
    "text": "as many containers as you would ever",
    "start": "247910",
    "end": "249530"
  },
  {
    "text": "want to run it's region based so you can",
    "start": "249530",
    "end": "253190"
  },
  {
    "text": "launch ECS and all of your containers",
    "start": "253190",
    "end": "256280"
  },
  {
    "text": "into one region and then launch it into",
    "start": "256280",
    "end": "258140"
  },
  {
    "text": "it two completely independent different",
    "start": "258140",
    "end": "260269"
  },
  {
    "text": "region you can have global scale using",
    "start": "260269",
    "end": "263180"
  },
  {
    "text": "ECS our other choice is eks the",
    "start": "263180",
    "end": "266810"
  },
  {
    "text": "kubernetes service the elastic container",
    "start": "266810",
    "end": "269390"
  },
  {
    "text": "service for kübra",
    "start": "269390",
    "end": "270260"
  },
  {
    "text": "Nettie's that service gives you an",
    "start": "270260",
    "end": "272600"
  },
  {
    "text": "open-source experience so if you're used",
    "start": "272600",
    "end": "274940"
  },
  {
    "text": "to having kubernetes in your data center",
    "start": "274940",
    "end": "277580"
  },
  {
    "text": "and you want to take all of the tooling",
    "start": "277580",
    "end": "280070"
  },
  {
    "text": "and all the workflow that you've already",
    "start": "280070",
    "end": "282140"
  },
  {
    "text": "built maybe or maybe you're on another",
    "start": "282140",
    "end": "284840"
  },
  {
    "text": "team and you're you're you have a team",
    "start": "284840",
    "end": "287300"
  },
  {
    "text": "that has built it you can borrow all of",
    "start": "287300",
    "end": "289850"
  },
  {
    "text": "their work that's another possibility",
    "start": "289850",
    "end": "292300"
  },
  {
    "text": "take all of that move it into and start",
    "start": "292300",
    "end": "295940"
  },
  {
    "text": "using it on using it on eks so both",
    "start": "295940",
    "end": "300140"
  },
  {
    "text": "orchestrators are great",
    "start": "300140",
    "end": "302020"
  },
  {
    "text": "ECS gives you some native integration",
    "start": "302020",
    "end": "305090"
  },
  {
    "text": "into other parts of AWS and that's",
    "start": "305090",
    "end": "308450"
  },
  {
    "text": "really what i want to show you today the",
    "start": "308450",
    "end": "311210"
  },
  {
    "text": "time savings that you can get by using",
    "start": "311210",
    "end": "313600"
  },
  {
    "text": "integrations so let's talk for a second",
    "start": "313600",
    "end": "318980"
  },
  {
    "text": "about auto-scaling",
    "start": "318980",
    "end": "320030"
  },
  {
    "text": "I said we wanted to stop thinking about",
    "start": "320030",
    "end": "322550"
  },
  {
    "text": "instances you know when you're scaling",
    "start": "322550",
    "end": "325250"
  },
  {
    "text": "an application and you have one service",
    "start": "325250",
    "end": "328190"
  },
  {
    "text": "per instance then you know that like",
    "start": "328190",
    "end": "331100"
  },
  {
    "text": "well if I'm if I'm running low on",
    "start": "331100",
    "end": "332930"
  },
  {
    "text": "resources if I'm not able to serve",
    "start": "332930",
    "end": "335870"
  },
  {
    "text": "enough or all of my customers all of",
    "start": "335870",
    "end": "338300"
  },
  {
    "text": "that traffic then I need to add",
    "start": "338300",
    "end": "340340"
  },
  {
    "text": "instances and if I need twice as many",
    "start": "340340",
    "end": "343370"
  },
  {
    "text": "instances or twice as much capacity to",
    "start": "343370",
    "end": "347060"
  },
  {
    "text": "serve my customers then I'll need twice",
    "start": "347060",
    "end": "349280"
  },
  {
    "text": "as many instances that can be expensive",
    "start": "349280",
    "end": "353060"
  },
  {
    "text": "that can be cumbersome because you'll",
    "start": "353060",
    "end": "356120"
  },
  {
    "text": "then probably reach a point where you'll",
    "start": "356120",
    "end": "357860"
  },
  {
    "text": "need to scale back down and you'll have",
    "start": "357860",
    "end": "359840"
  },
  {
    "text": "to figure out how do I knock down how do",
    "start": "359840",
    "end": "361700"
  },
  {
    "text": "I take away instances so I'm no longer",
    "start": "361700",
    "end": "364280"
  },
  {
    "text": "paying for them instances also take up",
    "start": "364280",
    "end": "367010"
  },
  {
    "text": "take minutes to come up and depending on",
    "start": "367010",
    "end": "370850"
  },
  {
    "text": "how you've orchestrated all of the other",
    "start": "370850",
    "end": "372680"
  },
  {
    "text": "changes that have to happen updates to",
    "start": "372680",
    "end": "374720"
  },
  {
    "text": "load balancers updates to DNS updates to",
    "start": "374720",
    "end": "377990"
  },
  {
    "text": "service discovery all of that all of",
    "start": "377990",
    "end": "380660"
  },
  {
    "text": "that orchestration takes time as well",
    "start": "380660",
    "end": "383960"
  },
  {
    "text": "and it might take effort for you to",
    "start": "383960",
    "end": "386810"
  },
  {
    "text": "build all of those all of those",
    "start": "386810",
    "end": "388760"
  },
  {
    "text": "connections auto scaling is something",
    "start": "388760",
    "end": "392420"
  },
  {
    "text": "that if you're using ECS we can simply",
    "start": "392420",
    "end": "394970"
  },
  {
    "text": "turn on we can simply like almost check",
    "start": "394970",
    "end": "398210"
  },
  {
    "text": "a box and you get it so if we think",
    "start": "398210",
    "end": "401060"
  },
  {
    "text": "about what is it",
    "start": "401060",
    "end": "402080"
  },
  {
    "text": "what do you",
    "start": "402080",
    "end": "402560"
  },
  {
    "text": "heed to auto-scale well first you need",
    "start": "402560",
    "end": "405590"
  },
  {
    "text": "to understand how much traffic can my",
    "start": "405590",
    "end": "408560"
  },
  {
    "text": "service handle and then you need to be",
    "start": "408560",
    "end": "410540"
  },
  {
    "text": "able to see how much traffic is my",
    "start": "410540",
    "end": "413000"
  },
  {
    "text": "service getting so those are metrics you",
    "start": "413000",
    "end": "416150"
  },
  {
    "text": "then need to be able to have a place to",
    "start": "416150",
    "end": "417830"
  },
  {
    "text": "store those metrics have a length of",
    "start": "417830",
    "end": "421340"
  },
  {
    "text": "time that you can look at the history of",
    "start": "421340",
    "end": "423980"
  },
  {
    "text": "how long you know what is my traffic",
    "start": "423980",
    "end": "426530"
  },
  {
    "text": "pattern looked like over the last amount",
    "start": "426530",
    "end": "429230"
  },
  {
    "text": "of time and then you need to be able to",
    "start": "429230",
    "end": "431240"
  },
  {
    "text": "make a decision on what when am I",
    "start": "431240",
    "end": "433340"
  },
  {
    "text": "supposed to scale up so for us to be",
    "start": "433340",
    "end": "436580"
  },
  {
    "text": "able to have auto scaling we need to",
    "start": "436580",
    "end": "439250"
  },
  {
    "text": "have a metric service we need to have a",
    "start": "439250",
    "end": "441830"
  },
  {
    "text": "time series database we need to have an",
    "start": "441830",
    "end": "444950"
  },
  {
    "text": "API that we can query and find all of",
    "start": "444950",
    "end": "447919"
  },
  {
    "text": "this information and then we need to",
    "start": "447919",
    "end": "449840"
  },
  {
    "text": "have something that can make a decision",
    "start": "449840",
    "end": "451550"
  },
  {
    "text": "for us and say yep it's time to scale up",
    "start": "451550",
    "end": "453680"
  },
  {
    "text": "or yes scale back down so all of that",
    "start": "453680",
    "end": "458240"
  },
  {
    "text": "we've actually built for you in in ECS",
    "start": "458240",
    "end": "462800"
  },
  {
    "text": "and in AWS and we can have it all work",
    "start": "462800",
    "end": "465169"
  },
  {
    "text": "together so with target tracking auto",
    "start": "465169",
    "end": "467479"
  },
  {
    "text": "scaling you just specify the target you",
    "start": "467479",
    "end": "472220"
  },
  {
    "text": "know I know my application can do 1,400",
    "start": "472220",
    "end": "475250"
  },
  {
    "text": "operations per second so I'm gonna try",
    "start": "475250",
    "end": "477919"
  },
  {
    "text": "and keep it at around a thousand that",
    "start": "477919",
    "end": "480440"
  },
  {
    "text": "way I have a little bit of a little bit",
    "start": "480440",
    "end": "482870"
  },
  {
    "text": "of buffer and if I go over a thousand",
    "start": "482870",
    "end": "486110"
  },
  {
    "text": "I'm gonna scale out if I go under 900",
    "start": "486110",
    "end": "490340"
  },
  {
    "text": "I'm gonna scale back in so I'm going to",
    "start": "490340",
    "end": "492410"
  },
  {
    "text": "target a certain number of operations",
    "start": "492410",
    "end": "494810"
  },
  {
    "text": "per second that's near the top of where",
    "start": "494810",
    "end": "498110"
  },
  {
    "text": "I can where I know I can handle now how",
    "start": "498110",
    "end": "502729"
  },
  {
    "text": "do you build this so when you deploy",
    "start": "502729",
    "end": "507470"
  },
  {
    "text": "your container you deploy it using a",
    "start": "507470",
    "end": "511100"
  },
  {
    "text": "task definition on ECS once you've",
    "start": "511100",
    "end": "513979"
  },
  {
    "text": "deployed that you can actually build a",
    "start": "513979",
    "end": "517219"
  },
  {
    "text": "scalable target so I've highlighted the",
    "start": "517219",
    "end": "520219"
  },
  {
    "text": "important points of this command but",
    "start": "520219",
    "end": "522349"
  },
  {
    "text": "this command is register scalable target",
    "start": "522349",
    "end": "525230"
  },
  {
    "text": "and what I'm saying is scale on the",
    "start": "525230",
    "end": "528200"
  },
  {
    "text": "dimension of desired count and the",
    "start": "528200",
    "end": "531770"
  },
  {
    "text": "desired count is ECS demo front end so",
    "start": "531770",
    "end": "534589"
  },
  {
    "text": "in other words",
    "start": "534589",
    "end": "535720"
  },
  {
    "text": "change the counts of those containers",
    "start": "535720",
    "end": "537389"
  },
  {
    "text": "the minimum capacity is three so I'll",
    "start": "537389",
    "end": "540430"
  },
  {
    "text": "never go below three but I will go more",
    "start": "540430",
    "end": "544060"
  },
  {
    "text": "up to the maximum of 25 so my scalable",
    "start": "544060",
    "end": "547959"
  },
  {
    "text": "target is the container count so this is",
    "start": "547959",
    "end": "550750"
  },
  {
    "text": "a really simple way of just registering",
    "start": "550750",
    "end": "553209"
  },
  {
    "text": "that as the thing that I want to auto",
    "start": "553209",
    "end": "555220"
  },
  {
    "text": "scale then the next thing I want to do",
    "start": "555220",
    "end": "559300"
  },
  {
    "text": "is build a policy what is the policy",
    "start": "559300",
    "end": "561730"
  },
  {
    "text": "that I want to use put scaling policy",
    "start": "561730",
    "end": "564790"
  },
  {
    "text": "and then I pass it a JSON file that the",
    "start": "564790",
    "end": "567699"
  },
  {
    "text": "JSON file looks like this and again the",
    "start": "567699",
    "end": "569829"
  },
  {
    "text": "important things are highlighted track",
    "start": "569829",
    "end": "572110"
  },
  {
    "text": "ops per target I said a thousand",
    "start": "572110",
    "end": "575319"
  },
  {
    "text": "operations a second by the way I chose",
    "start": "575319",
    "end": "577990"
  },
  {
    "text": "this this is actually a real application",
    "start": "577990",
    "end": "580629"
  },
  {
    "text": "you can deploy this yourself if you want",
    "start": "580629",
    "end": "582490"
  },
  {
    "text": "to this is in ECS workshop comm and it's",
    "start": "582490",
    "end": "586569"
  },
  {
    "text": "the front end application I chose this",
    "start": "586569",
    "end": "589029"
  },
  {
    "text": "one because it was written in Ruby I",
    "start": "589029",
    "end": "590680"
  },
  {
    "text": "wrote it in Ruby because I wanted",
    "start": "590680",
    "end": "592329"
  },
  {
    "text": "something that was kind of inefficient",
    "start": "592329",
    "end": "594189"
  },
  {
    "text": "and slow the other two applications in",
    "start": "594189",
    "end": "597009"
  },
  {
    "text": "the workshop are written in nodejs and",
    "start": "597009",
    "end": "598870"
  },
  {
    "text": "crystal and those are much faster and",
    "start": "598870",
    "end": "601360"
  },
  {
    "text": "can handle a whole lot more traffic and",
    "start": "601360",
    "end": "603250"
  },
  {
    "text": "that's actually harder for me to then",
    "start": "603250",
    "end": "605259"
  },
  {
    "text": "generate a whole bunch of load and send",
    "start": "605259",
    "end": "607300"
  },
  {
    "text": "it so I kept the Ruby one and as the",
    "start": "607300",
    "end": "610089"
  },
  {
    "text": "front-end so track ops for Targa and I",
    "start": "610089",
    "end": "612670"
  },
  {
    "text": "know my Ruby application can handle",
    "start": "612670",
    "end": "614800"
  },
  {
    "text": "roughly 1,400 operations a second I",
    "start": "614800",
    "end": "617500"
  },
  {
    "text": "tested that I got to that number using",
    "start": "617500",
    "end": "619870"
  },
  {
    "text": "Apache benchmark and once I figured that",
    "start": "619870",
    "end": "622540"
  },
  {
    "text": "out I backed off a little bit and I said",
    "start": "622540",
    "end": "624850"
  },
  {
    "text": "a thousand is a nice round number so",
    "start": "624850",
    "end": "627009"
  },
  {
    "text": "target value is a thousand and then I'm",
    "start": "627009",
    "end": "629500"
  },
  {
    "text": "getting the metric you see predefined",
    "start": "629500",
    "end": "631389"
  },
  {
    "text": "metric type is a lb request count per",
    "start": "631389",
    "end": "634449"
  },
  {
    "text": "target so I see that I can actually look",
    "start": "634449",
    "end": "638199"
  },
  {
    "text": "at the per target metrics and I want to",
    "start": "638199",
    "end": "640809"
  },
  {
    "text": "emphasize per target so if I'm at three",
    "start": "640809",
    "end": "643809"
  },
  {
    "text": "minimum capacity then that means I can",
    "start": "643809",
    "end": "647290"
  },
  {
    "text": "handle three thousand operations per",
    "start": "647290",
    "end": "649300"
  },
  {
    "text": "second total before I need to make any",
    "start": "649300",
    "end": "651670"
  },
  {
    "text": "decision but it's still a thousand per",
    "start": "651670",
    "end": "654399"
  },
  {
    "text": "target as I add targets as I bring on",
    "start": "654399",
    "end": "657699"
  },
  {
    "text": "additional containers I'm still",
    "start": "657699",
    "end": "659769"
  },
  {
    "text": "targeting a thousand per target so it's",
    "start": "659769",
    "end": "663730"
  },
  {
    "text": "always the the per target metric that I",
    "start": "663730",
    "end": "666910"
  },
  {
    "text": "care about",
    "start": "666910",
    "end": "667810"
  },
  {
    "text": "and the reason that's important is",
    "start": "667810",
    "end": "669040"
  },
  {
    "text": "because when you start to look at",
    "start": "669040",
    "end": "670240"
  },
  {
    "text": "something like this this is a graph of",
    "start": "670240",
    "end": "672579"
  },
  {
    "text": "me sending it a whole bunch of traffic",
    "start": "672579",
    "end": "674620"
  },
  {
    "text": "you see the the Apache bench command",
    "start": "674620",
    "end": "677589"
  },
  {
    "text": "that I use to generate traffic so I just",
    "start": "677589",
    "end": "680499"
  },
  {
    "text": "start flooding it with traffic a ton of",
    "start": "680499",
    "end": "682420"
  },
  {
    "text": "connections all at once this is nine",
    "start": "682420",
    "end": "684430"
  },
  {
    "text": "concurrent connections as fast as I can",
    "start": "684430",
    "end": "687160"
  },
  {
    "text": "send them and then I just keep doing",
    "start": "687160",
    "end": "689680"
  },
  {
    "text": "this over and over and over again I'm",
    "start": "689680",
    "end": "691689"
  },
  {
    "text": "sending it thousands of connections per",
    "start": "691689",
    "end": "694269"
  },
  {
    "text": "second as that happens you see that the",
    "start": "694269",
    "end": "697660"
  },
  {
    "text": "per target connection count goes up over",
    "start": "697660",
    "end": "700360"
  },
  {
    "text": "a thousand so we set our target to 1,000",
    "start": "700360",
    "end": "704019"
  },
  {
    "text": "we easily exceed that and so an alarm",
    "start": "704019",
    "end": "707529"
  },
  {
    "text": "goes off and we say okay time to scale",
    "start": "707529",
    "end": "710019"
  },
  {
    "text": "out this is a continuation of the graph",
    "start": "710019",
    "end": "714850"
  },
  {
    "text": "a few minutes later you see that when we",
    "start": "714850",
    "end": "717759"
  },
  {
    "text": "scaled up",
    "start": "717759",
    "end": "718720"
  },
  {
    "text": "it was 1803 1804 and then 1804 and five",
    "start": "718720",
    "end": "726069"
  },
  {
    "text": "and so on the graph starts to go back",
    "start": "726069",
    "end": "728769"
  },
  {
    "text": "down it's because we keep adding more",
    "start": "728769",
    "end": "730420"
  },
  {
    "text": "containers to handle the capacity so the",
    "start": "730420",
    "end": "733209"
  },
  {
    "text": "per target rate goes back down until",
    "start": "733209",
    "end": "737050"
  },
  {
    "text": "eventually it's below that threshold",
    "start": "737050",
    "end": "738790"
  },
  {
    "text": "line below the thousand line so that's",
    "start": "738790",
    "end": "742180"
  },
  {
    "text": "when we stop scaling out this is what it",
    "start": "742180",
    "end": "747339"
  },
  {
    "text": "looks like in the event log you can see",
    "start": "747339",
    "end": "749649"
  },
  {
    "text": "that ECS demo let's start three down has",
    "start": "749649",
    "end": "753459"
  },
  {
    "text": "started one task and it shows me the new",
    "start": "753459",
    "end": "756160"
  },
  {
    "text": "task and then it registered it in the",
    "start": "756160",
    "end": "758559"
  },
  {
    "text": "target group making it available to take",
    "start": "758559",
    "end": "760629"
  },
  {
    "text": "traffic and then it reaches a steady",
    "start": "760629",
    "end": "763120"
  },
  {
    "text": "state a few seconds later so this is all",
    "start": "763120",
    "end": "766569"
  },
  {
    "text": "managed very simply and very easily I",
    "start": "766569",
    "end": "769629"
  },
  {
    "text": "built one container I deployed one",
    "start": "769629",
    "end": "772629"
  },
  {
    "text": "container I set a minimum I set a target",
    "start": "772629",
    "end": "775689"
  },
  {
    "text": "and AWS ECS took care of everything else",
    "start": "775689",
    "end": "782399"
  },
  {
    "text": "the code for this demo by the way is",
    "start": "782399",
    "end": "784959"
  },
  {
    "text": "here on github so you can definitely",
    "start": "784959",
    "end": "786850"
  },
  {
    "text": "check this out you can build it and run",
    "start": "786850",
    "end": "788860"
  },
  {
    "text": "it yourself and you can do this and see",
    "start": "788860",
    "end": "791769"
  },
  {
    "text": "how easy it is to have auto scaling for",
    "start": "791769",
    "end": "794889"
  },
  {
    "text": "your application and you can scale out",
    "start": "794889",
    "end": "796750"
  },
  {
    "text": "and then scale back in on demand without",
    "start": "796750",
    "end": "800079"
  },
  {
    "text": "having to build",
    "start": "800079",
    "end": "801190"
  },
  {
    "text": "metric service build log collection",
    "start": "801190",
    "end": "804790"
  },
  {
    "text": "service build any kind of application to",
    "start": "804790",
    "end": "807460"
  },
  {
    "text": "make decisions about scaling out and in",
    "start": "807460",
    "end": "809590"
  },
  {
    "text": "all that stuff so another integration",
    "start": "809590",
    "end": "815410"
  },
  {
    "text": "that I think is really cool and oh my",
    "start": "815410",
    "end": "817990"
  },
  {
    "text": "gosh so so much of a time-saver is",
    "start": "817990",
    "end": "820510"
  },
  {
    "text": "service discovery does anyone know what",
    "start": "820510",
    "end": "823510"
  },
  {
    "text": "service discovery is ok one or two so",
    "start": "823510",
    "end": "828490"
  },
  {
    "text": "basically service discovery is how micro",
    "start": "828490",
    "end": "831820"
  },
  {
    "text": "services figure out how to talk to each",
    "start": "831820",
    "end": "834490"
  },
  {
    "text": "other so if you think if you think about",
    "start": "834490",
    "end": "836980"
  },
  {
    "text": "like before micro services you had a",
    "start": "836980",
    "end": "839230"
  },
  {
    "text": "monolith and the monolith would",
    "start": "839230",
    "end": "841060"
  },
  {
    "text": "understand that like this function or",
    "start": "841060",
    "end": "843310"
  },
  {
    "text": "this piece of code needs to talk to this",
    "start": "843310",
    "end": "844990"
  },
  {
    "text": "other function or this other piece of",
    "start": "844990",
    "end": "846550"
  },
  {
    "text": "code but it's all inside the application",
    "start": "846550",
    "end": "848740"
  },
  {
    "text": "so it's all very simple to call once you",
    "start": "848740",
    "end": "851650"
  },
  {
    "text": "break all of that apart and you start",
    "start": "851650",
    "end": "853480"
  },
  {
    "text": "running externally you have to make",
    "start": "853480",
    "end": "855610"
  },
  {
    "text": "network connections to all of these",
    "start": "855610",
    "end": "857230"
  },
  {
    "text": "other micro services so to make a",
    "start": "857230",
    "end": "860140"
  },
  {
    "text": "network connection you have to know",
    "start": "860140",
    "end": "861730"
  },
  {
    "text": "where to find the the micro service the",
    "start": "861730",
    "end": "865210"
  },
  {
    "text": "easy way to do that is to act to build",
    "start": "865210",
    "end": "868300"
  },
  {
    "text": "service discovery service discovery can",
    "start": "868300",
    "end": "871330"
  },
  {
    "text": "be handled any number of ways one way",
    "start": "871330",
    "end": "874720"
  },
  {
    "text": "that it used to be done that was",
    "start": "874720",
    "end": "876400"
  },
  {
    "text": "probably the most common is to actually",
    "start": "876400",
    "end": "878200"
  },
  {
    "text": "write a record into a database and then",
    "start": "878200",
    "end": "880930"
  },
  {
    "text": "have that database have an API front-end",
    "start": "880930",
    "end": "883990"
  },
  {
    "text": "that you could query so I'm looking for",
    "start": "883990",
    "end": "887440"
  },
  {
    "text": "ECS demo nodejs and you would send that",
    "start": "887440",
    "end": "891550"
  },
  {
    "text": "query off you would get back a response",
    "start": "891550",
    "end": "893590"
  },
  {
    "text": "that was a list of all the IP addresses",
    "start": "893590",
    "end": "896290"
  },
  {
    "text": "where I could find that service well",
    "start": "896290",
    "end": "899530"
  },
  {
    "text": "that ended up get sort of getting",
    "start": "899530",
    "end": "902320"
  },
  {
    "text": "replaced the most popular way to do",
    "start": "902320",
    "end": "904300"
  },
  {
    "text": "service discovery today is over DNS so",
    "start": "904300",
    "end": "907750"
  },
  {
    "text": "if you think about it DNS is was built",
    "start": "907750",
    "end": "911200"
  },
  {
    "text": "for stuff like this just send a query",
    "start": "911200",
    "end": "913330"
  },
  {
    "text": "tell me what address I can find",
    "start": "913330",
    "end": "915190"
  },
  {
    "text": "something at and get back a list of",
    "start": "915190",
    "end": "917710"
  },
  {
    "text": "addresses that you can find it out",
    "start": "917710",
    "end": "919800"
  },
  {
    "text": "the downside to DNS is you have to have",
    "start": "919800",
    "end": "922780"
  },
  {
    "text": "something that registers with a DNS",
    "start": "922780",
    "end": "925300"
  },
  {
    "text": "service and containers come and go very",
    "start": "925300",
    "end": "927910"
  },
  {
    "text": "quickly so you have to have something",
    "start": "927910",
    "end": "930070"
  },
  {
    "text": "that registers and D registers when the",
    "start": "930070",
    "end": "932230"
  },
  {
    "text": "container comes up register it with sir",
    "start": "932230",
    "end": "934760"
  },
  {
    "text": "was discovery if the container goes down",
    "start": "934760",
    "end": "936560"
  },
  {
    "text": "take it out of DNS so that you no longer",
    "start": "936560",
    "end": "939530"
  },
  {
    "text": "send traffic to that end point and that",
    "start": "939530",
    "end": "942890"
  },
  {
    "text": "should happen very very quickly so think",
    "start": "942890",
    "end": "945620"
  },
  {
    "text": "about what do I have to build to make",
    "start": "945620",
    "end": "947930"
  },
  {
    "text": "that happen I have to run a DNS service",
    "start": "947930",
    "end": "950540"
  },
  {
    "text": "I have to have a couple of API calls one",
    "start": "950540",
    "end": "953480"
  },
  {
    "text": "for registration and one for D",
    "start": "953480",
    "end": "955220"
  },
  {
    "text": "registration and then I probably have to",
    "start": "955220",
    "end": "957590"
  },
  {
    "text": "have something that monitors my",
    "start": "957590",
    "end": "959120"
  },
  {
    "text": "container activity and every time",
    "start": "959120",
    "end": "961340"
  },
  {
    "text": "there's a change it has to go and",
    "start": "961340",
    "end": "963380"
  },
  {
    "text": "reflect that change into DNS right well",
    "start": "963380",
    "end": "970000"
  },
  {
    "text": "we actually said you know what that's",
    "start": "970000",
    "end": "973130"
  },
  {
    "text": "hard we can build that for you so we",
    "start": "973130",
    "end": "976190"
  },
  {
    "text": "built something that was an integration",
    "start": "976190",
    "end": "977900"
  },
  {
    "text": "with between EC s and our DNS service",
    "start": "977900",
    "end": "981260"
  },
  {
    "text": "called route 53 that can actually do all",
    "start": "981260",
    "end": "984320"
  },
  {
    "text": "of what I just said for you",
    "start": "984320",
    "end": "986680"
  },
  {
    "text": "this is kind of the architecture of what",
    "start": "986680",
    "end": "989330"
  },
  {
    "text": "you would end up using so you have",
    "start": "989330",
    "end": "992420"
  },
  {
    "text": "traffic coming in from the internet the",
    "start": "992420",
    "end": "994400"
  },
  {
    "text": "little cloud right it hits your",
    "start": "994400",
    "end": "996890"
  },
  {
    "text": "application load balancer and that's",
    "start": "996890",
    "end": "999020"
  },
  {
    "text": "what routes typically to the front-end",
    "start": "999020",
    "end": "1001180"
  },
  {
    "text": "so you typically have your your load",
    "start": "1001180",
    "end": "1003340"
  },
  {
    "text": "balancer exposed externally and then",
    "start": "1003340",
    "end": "1005920"
  },
  {
    "text": "traffic passes to your front-end but",
    "start": "1005920",
    "end": "1008980"
  },
  {
    "text": "your front-end needs to know how do I",
    "start": "1008980",
    "end": "1010900"
  },
  {
    "text": "find and how do I talk to all of my",
    "start": "1010900",
    "end": "1013720"
  },
  {
    "text": "back-end API is all of my back-end",
    "start": "1013720",
    "end": "1015490"
  },
  {
    "text": "resources that's the great that's the",
    "start": "1015490",
    "end": "1018310"
  },
  {
    "text": "perfect case for using service discovery",
    "start": "1018310",
    "end": "1020970"
  },
  {
    "text": "so the way the front-end finds its",
    "start": "1020970",
    "end": "1024640"
  },
  {
    "text": "backends is using its special DNS name",
    "start": "1024640",
    "end": "1028540"
  },
  {
    "text": "it'll just talk to that DNS name like it",
    "start": "1028540",
    "end": "1031209"
  },
  {
    "text": "would any other DNS name open a",
    "start": "1031209",
    "end": "1033640"
  },
  {
    "text": "connection and start talking to it the",
    "start": "1033640",
    "end": "1036610"
  },
  {
    "text": "way DNS stays up to date you see outside",
    "start": "1036610",
    "end": "1039459"
  },
  {
    "text": "of all of this workflow is the ECS",
    "start": "1039459",
    "end": "1044699"
  },
  {
    "text": "control plane sends updates to route 53",
    "start": "1044699",
    "end": "1048610"
  },
  {
    "text": "so outside of all of this ECS is",
    "start": "1048610",
    "end": "1051670"
  },
  {
    "text": "updating and keeping up-to-date route 53",
    "start": "1051670",
    "end": "1054330"
  },
  {
    "text": "registering and D registering containers",
    "start": "1054330",
    "end": "1057400"
  },
  {
    "text": "as they come and go now how do you get",
    "start": "1057400",
    "end": "1061240"
  },
  {
    "text": "to use this well it's super simple when",
    "start": "1061240",
    "end": "1064690"
  },
  {
    "text": "I deploy when I bring up my",
    "start": "1064690",
    "end": "1067690"
  },
  {
    "text": "plication i just add in i mean i need",
    "start": "1067690",
    "end": "1070990"
  },
  {
    "text": "this to be registered into a private",
    "start": "1070990",
    "end": "1072759"
  },
  {
    "text": "namespace in this case it's called",
    "start": "1072759",
    "end": "1074980"
  },
  {
    "text": "service and then enable service",
    "start": "1074980",
    "end": "1077980"
  },
  {
    "text": "discovery there's if you were doing this",
    "start": "1077980",
    "end": "1079840"
  },
  {
    "text": "in the console it would literally be a",
    "start": "1079840",
    "end": "1081399"
  },
  {
    "text": "checkbox so you don't have to build",
    "start": "1081399",
    "end": "1083590"
  },
  {
    "text": "anything additional you don't have to",
    "start": "1083590",
    "end": "1085389"
  },
  {
    "text": "run anything additional you just",
    "start": "1085389",
    "end": "1087460"
  },
  {
    "text": "literally check a box and you get",
    "start": "1087460",
    "end": "1089080"
  },
  {
    "text": "service discovery so this is what it",
    "start": "1089080",
    "end": "1092889"
  },
  {
    "text": "looks like the definition for my",
    "start": "1092889",
    "end": "1097450"
  },
  {
    "text": "front-end I'm saying",
    "start": "1097450",
    "end": "1099220"
  },
  {
    "text": "ECS demo front-end should have an",
    "start": "1099220",
    "end": "1101769"
  },
  {
    "text": "environment variable telling it how to",
    "start": "1101769",
    "end": "1104110"
  },
  {
    "text": "find ECS demo nodejs so the variable no",
    "start": "1104110",
    "end": "1108730"
  },
  {
    "text": "js' URL is located at that HTTP endpoint",
    "start": "1108730",
    "end": "1113500"
  },
  {
    "text": "and this will just do a simple DNS query",
    "start": "1113500",
    "end": "1116379"
  },
  {
    "text": "ECS demo nodejs dot service just like it",
    "start": "1116379",
    "end": "1120399"
  },
  {
    "text": "would for any other DNS name here's a",
    "start": "1120399",
    "end": "1125950"
  },
  {
    "text": "video you can see in the upper left hand",
    "start": "1125950",
    "end": "1129190"
  },
  {
    "text": "corner let me make sure this is running",
    "start": "1129190",
    "end": "1131399"
  },
  {
    "text": "the upper left hand corner I'm just",
    "start": "1131399",
    "end": "1133840"
  },
  {
    "text": "sitting there doing a constant query of",
    "start": "1133840",
    "end": "1136559"
  },
  {
    "text": "ECS demo in this case it's crystal but",
    "start": "1136559",
    "end": "1139899"
  },
  {
    "text": "I'm showing you that there's an end",
    "start": "1139899",
    "end": "1142059"
  },
  {
    "text": "point in each availability zone 100 well",
    "start": "1142059",
    "end": "1145269"
  },
  {
    "text": "100 and 101 what I'm going to do in the",
    "start": "1145269",
    "end": "1150190"
  },
  {
    "text": "bottom is I'm going to kill two of those",
    "start": "1150190",
    "end": "1153669"
  },
  {
    "text": "three tasks so this command that I'm",
    "start": "1153669",
    "end": "1157149"
  },
  {
    "text": "running now is killing two tasks and",
    "start": "1157149",
    "end": "1159690"
  },
  {
    "text": "you'll see at the up at the top in about",
    "start": "1159690",
    "end": "1162909"
  },
  {
    "text": "10 seconds or so two of those will go",
    "start": "1162909",
    "end": "1165610"
  },
  {
    "text": "away we'll be left with 101 and this",
    "start": "1165610",
    "end": "1169929"
  },
  {
    "text": "will it'll come and go I think once more",
    "start": "1169929",
    "end": "1172210"
  },
  {
    "text": "DNS is like what's the word it's not",
    "start": "1172210",
    "end": "1175809"
  },
  {
    "text": "it's eventually consistent so we'll send",
    "start": "1175809",
    "end": "1179200"
  },
  {
    "text": "a query it'll get the address addresses",
    "start": "1179200",
    "end": "1182350"
  },
  {
    "text": "one more time but then it'll be gone",
    "start": "1182350",
    "end": "1184450"
  },
  {
    "text": "again after about thirty seconds or so",
    "start": "1184450",
    "end": "1187419"
  },
  {
    "text": "ECS we'll see hey we're below our",
    "start": "1187419",
    "end": "1189639"
  },
  {
    "text": "minimum of three remember that minimum",
    "start": "1189639",
    "end": "1191830"
  },
  {
    "text": "four auto-scaling that I had set will be",
    "start": "1191830",
    "end": "1194799"
  },
  {
    "text": "below the minimum of three I need to add",
    "start": "1194799",
    "end": "1196750"
  },
  {
    "text": "two more and so you'll see two",
    "start": "1196750",
    "end": "1199389"
  },
  {
    "text": "new addresses that'll pop in and",
    "start": "1199389",
    "end": "1201459"
  },
  {
    "text": "probably about 30 seconds I mean think",
    "start": "1201459",
    "end": "1204999"
  },
  {
    "text": "about that like if you were doing this",
    "start": "1204999",
    "end": "1207369"
  },
  {
    "text": "with ec2 instances well first you",
    "start": "1207369",
    "end": "1210249"
  },
  {
    "text": "probably wouldn't have this built",
    "start": "1210249",
    "end": "1211719"
  },
  {
    "text": "automatically and second you would",
    "start": "1211719",
    "end": "1214269"
  },
  {
    "text": "probably get paged if two-thirds of your",
    "start": "1214269",
    "end": "1216639"
  },
  {
    "text": "infrastructure just evaporated and you",
    "start": "1216639",
    "end": "1219429"
  },
  {
    "text": "would have to sit there in the at 3 a.m.",
    "start": "1219429",
    "end": "1221259"
  },
  {
    "text": "and figure out what just happened what",
    "start": "1221259",
    "end": "1223839"
  },
  {
    "text": "do I need to do to fix it and then you",
    "start": "1223839",
    "end": "1225879"
  },
  {
    "text": "would be bringing stuff back online",
    "start": "1225879",
    "end": "1227349"
  },
  {
    "text": "right I see smiles I see people that",
    "start": "1227349",
    "end": "1230169"
  },
  {
    "text": "have done that this this happened before",
    "start": "1230169",
    "end": "1233169"
  },
  {
    "text": "the page would have even gone out we",
    "start": "1233169",
    "end": "1234969"
  },
  {
    "text": "were already recovered we're already",
    "start": "1234969",
    "end": "1237219"
  },
  {
    "text": "spread all the way across three",
    "start": "1237219",
    "end": "1238719"
  },
  {
    "text": "availability zones again and no need for",
    "start": "1238719",
    "end": "1241929"
  },
  {
    "text": "anyone to be woken up traffic never went",
    "start": "1241929",
    "end": "1244749"
  },
  {
    "text": "away I was able to serve all of my",
    "start": "1244749",
    "end": "1247089"
  },
  {
    "text": "requests the whole time so that's pretty",
    "start": "1247089",
    "end": "1251679"
  },
  {
    "text": "cool you get all of that simply by",
    "start": "1251679",
    "end": "1254229"
  },
  {
    "text": "checking a box and deploying your",
    "start": "1254229",
    "end": "1257320"
  },
  {
    "text": "service using service discovery you can",
    "start": "1257320",
    "end": "1263950"
  },
  {
    "text": "see this demo at ECS workshop comm",
    "start": "1263950",
    "end": "1268859"
  },
  {
    "text": "nodejs backend and in fact throughout",
    "start": "1268859",
    "end": "1272079"
  },
  {
    "text": "the workshop we use service discovery so",
    "start": "1272079",
    "end": "1274299"
  },
  {
    "text": "if you just want to run the workshop",
    "start": "1274299",
    "end": "1275709"
  },
  {
    "text": "itself you'll discover this and a whole",
    "start": "1275709",
    "end": "1278229"
  },
  {
    "text": "lot more so that's really it for my talk",
    "start": "1278229",
    "end": "1283659"
  },
  {
    "text": "I kept it short since we were having",
    "start": "1283659",
    "end": "1285789"
  },
  {
    "text": "internet problems who has questions what",
    "start": "1285789",
    "end": "1289749"
  },
  {
    "text": "questions can I answer",
    "start": "1289749",
    "end": "1292889"
  },
  {
    "text": "there was a question",
    "start": "1296250",
    "end": "1299330"
  },
  {
    "text": "right quick question when you set it",
    "start": "1300790",
    "end": "1303940"
  },
  {
    "text": "target value are you setting the number",
    "start": "1303940",
    "end": "1307210"
  },
  {
    "text": "of tasks or ec2 instances so the",
    "start": "1307210",
    "end": "1311890"
  },
  {
    "text": "question is am i setting the number of",
    "start": "1311890",
    "end": "1314050"
  },
  {
    "text": "tasks or the number of ec2 instances",
    "start": "1314050",
    "end": "1316240"
  },
  {
    "text": "what I didn't get into and I probably",
    "start": "1316240",
    "end": "1318460"
  },
  {
    "text": "should have I'm actually what you saw",
    "start": "1318460",
    "end": "1321040"
  },
  {
    "text": "just now where zero instances I don't",
    "start": "1321040",
    "end": "1324040"
  },
  {
    "text": "have a single ec2 instance what I'm",
    "start": "1324040",
    "end": "1326500"
  },
  {
    "text": "using is actually far gate now",
    "start": "1326500",
    "end": "1328830"
  },
  {
    "text": "everything that I showed you can work",
    "start": "1328830",
    "end": "1331270"
  },
  {
    "text": "using ECS backed by ec2 instances but",
    "start": "1331270",
    "end": "1336430"
  },
  {
    "text": "the scaling dimension is number of tasks",
    "start": "1336430",
    "end": "1339400"
  },
  {
    "text": "so one of the cool things about using",
    "start": "1339400",
    "end": "1341920"
  },
  {
    "text": "Fargate if you don't know what Fargate",
    "start": "1341920",
    "end": "1343570"
  },
  {
    "text": "is it's a platform that you can use to",
    "start": "1343570",
    "end": "1346330"
  },
  {
    "text": "launch containers onto and you don't",
    "start": "1346330",
    "end": "1348790"
  },
  {
    "text": "have to worry about instances there are",
    "start": "1348790",
    "end": "1350470"
  },
  {
    "text": "no instances you just launch containers",
    "start": "1350470",
    "end": "1353530"
  },
  {
    "text": "containers get network attached directly",
    "start": "1353530",
    "end": "1356740"
  },
  {
    "text": "to them and they can execute code and",
    "start": "1356740",
    "end": "1360040"
  },
  {
    "text": "serve traffic without having any",
    "start": "1360040",
    "end": "1362530"
  },
  {
    "text": "instance to to have to worry about so",
    "start": "1362530",
    "end": "1365680"
  },
  {
    "text": "there's no more rebooting there's no",
    "start": "1365680",
    "end": "1367300"
  },
  {
    "text": "more kernel patching there's no more",
    "start": "1367300",
    "end": "1369300"
  },
  {
    "text": "running out of disk space and stuff like",
    "start": "1369300",
    "end": "1371830"
  },
  {
    "text": "that to have to worry about so friend we",
    "start": "1371830",
    "end": "1374680"
  },
  {
    "text": "also have a question from the twitch",
    "start": "1374680",
    "end": "1376000"
  },
  {
    "text": "stream chat Joseph Ireland is asking do",
    "start": "1376000",
    "end": "1379660"
  },
  {
    "text": "you have a way to simulate traffic",
    "start": "1379660",
    "end": "1380950"
  },
  {
    "text": "instead of consuming it and getting",
    "start": "1380950",
    "end": "1382450"
  },
  {
    "text": "billed for it I'm just curious to know",
    "start": "1382450",
    "end": "1384280"
  },
  {
    "text": "there's tools to help verify scalability",
    "start": "1384280",
    "end": "1388140"
  },
  {
    "text": "yeah I think Web Application Firewall is",
    "start": "1388140",
    "end": "1391540"
  },
  {
    "text": "probably the thing that I would tie into",
    "start": "1391540",
    "end": "1394780"
  },
  {
    "text": "this to handle that the question is",
    "start": "1394780",
    "end": "1396760"
  },
  {
    "text": "about how do you validate that the",
    "start": "1396760",
    "end": "1398620"
  },
  {
    "text": "traffic you're getting into your service",
    "start": "1398620",
    "end": "1400450"
  },
  {
    "text": "is not just bogus traffic and you can do",
    "start": "1400450",
    "end": "1404380"
  },
  {
    "text": "that by building rules in a wife and you",
    "start": "1404380",
    "end": "1406750"
  },
  {
    "text": "can let the wife take all of the traffic",
    "start": "1406750",
    "end": "1409540"
  },
  {
    "text": "and filter the bogus stuff away and let",
    "start": "1409540",
    "end": "1412810"
  },
  {
    "text": "pass through all of the good stuff so",
    "start": "1412810",
    "end": "1418420"
  },
  {
    "text": "just a follow-up question if we have ECS",
    "start": "1418420",
    "end": "1421000"
  },
  {
    "text": "deployed on ec2",
    "start": "1421000",
    "end": "1423590"
  },
  {
    "text": "in order to have auto-scaling of the",
    "start": "1423590",
    "end": "1426620"
  },
  {
    "text": "underlying infrastructure you have to",
    "start": "1426620",
    "end": "1428330"
  },
  {
    "text": "integrate with cloud watch and do it a",
    "start": "1428330",
    "end": "1430670"
  },
  {
    "text": "traditional are just killing is that",
    "start": "1430670",
    "end": "1432380"
  },
  {
    "text": "correct so the way you would handle that",
    "start": "1432380",
    "end": "1434810"
  },
  {
    "text": "is you would actually watch for",
    "start": "1434810",
    "end": "1437980"
  },
  {
    "text": "resources resource exhaustion and I've",
    "start": "1437980",
    "end": "1442160"
  },
  {
    "text": "seen a couple of creative approaches and",
    "start": "1442160",
    "end": "1444170"
  },
  {
    "text": "I think that this is probably one of the",
    "start": "1444170",
    "end": "1445730"
  },
  {
    "text": "next problems that the ECS team is going",
    "start": "1445730",
    "end": "1447830"
  },
  {
    "text": "to work on solving but one of the",
    "start": "1447830",
    "end": "1449900"
  },
  {
    "text": "creative approach approaches that I saw",
    "start": "1449900",
    "end": "1451910"
  },
  {
    "text": "and liked was to have a job that",
    "start": "1451910",
    "end": "1455600"
  },
  {
    "text": "basically looks at all the tasks and",
    "start": "1455600",
    "end": "1458360"
  },
  {
    "text": "they're sizing find the biggest one and",
    "start": "1458360",
    "end": "1460820"
  },
  {
    "text": "then count how many can i deploy of that",
    "start": "1460820",
    "end": "1464900"
  },
  {
    "text": "biggest task and that gives you a sense",
    "start": "1464900",
    "end": "1467120"
  },
  {
    "text": "of how much extra capacity do I have if",
    "start": "1467120",
    "end": "1469460"
  },
  {
    "text": "I don't have enough to deploy even one",
    "start": "1469460",
    "end": "1471890"
  },
  {
    "text": "of that biggest tasks then maybe bring",
    "start": "1471890",
    "end": "1473960"
  },
  {
    "text": "more online so that I have a little bit",
    "start": "1473960",
    "end": "1476180"
  },
  {
    "text": "of spare capacity available to be able",
    "start": "1476180",
    "end": "1478400"
  },
  {
    "text": "to scale up more containers so that was",
    "start": "1478400",
    "end": "1482030"
  },
  {
    "text": "one I've I can find the blog post that",
    "start": "1482030",
    "end": "1484550"
  },
  {
    "text": "walks you through the code that'll build",
    "start": "1484550",
    "end": "1486350"
  },
  {
    "text": "all of that for you if you want but that",
    "start": "1486350",
    "end": "1488780"
  },
  {
    "text": "was one of the coolest examples that I",
    "start": "1488780",
    "end": "1490820"
  },
  {
    "text": "found is you don't have to care about",
    "start": "1490820",
    "end": "1492530"
  },
  {
    "text": "every container you really just have to",
    "start": "1492530",
    "end": "1494990"
  },
  {
    "text": "care about the biggest container and can",
    "start": "1494990",
    "end": "1497150"
  },
  {
    "text": "you add more of those and as long as you",
    "start": "1497150",
    "end": "1498980"
  },
  {
    "text": "can add more of those you have capacity",
    "start": "1498980",
    "end": "1501080"
  },
  {
    "text": "you have enough spare capacity but if",
    "start": "1501080",
    "end": "1504290"
  },
  {
    "text": "you can to add one of those then you",
    "start": "1504290",
    "end": "1506510"
  },
  {
    "text": "should have a little bit more spare",
    "start": "1506510",
    "end": "1508100"
  },
  {
    "text": "capacity added on so bring up more",
    "start": "1508100",
    "end": "1510230"
  },
  {
    "text": "instances and you can have all of that",
    "start": "1510230",
    "end": "1512360"
  },
  {
    "text": "be automated for you",
    "start": "1512360",
    "end": "1514630"
  },
  {
    "text": "do we have to move the Public DNS to",
    "start": "1514630",
    "end": "1517460"
  },
  {
    "text": "route 53 for the slowest discovery to",
    "start": "1517460",
    "end": "1520160"
  },
  {
    "text": "work can you start the do we have to",
    "start": "1520160",
    "end": "1522470"
  },
  {
    "text": "move the Public DNS to route 53 for the",
    "start": "1522470",
    "end": "1524750"
  },
  {
    "text": "service discoverable to you I so the DNS",
    "start": "1524750",
    "end": "1527120"
  },
  {
    "text": "service discovery is actually private",
    "start": "1527120",
    "end": "1528830"
  },
  {
    "text": "DNS not public and it's only where it",
    "start": "1528830",
    "end": "1532970"
  },
  {
    "text": "only works inside the VPC so those DNS",
    "start": "1532970",
    "end": "1536300"
  },
  {
    "text": "queries stay limited and private inside",
    "start": "1536300",
    "end": "1539210"
  },
  {
    "text": "the VPC won't work outside the VPC so",
    "start": "1539210",
    "end": "1542210"
  },
  {
    "text": "hopefully that's a good enough and",
    "start": "1542210",
    "end": "1544580"
  },
  {
    "text": "I don't know if you could if you even if",
    "start": "1544580",
    "end": "1547130"
  },
  {
    "text": "you wanted to I don't know if you could",
    "start": "1547130",
    "end": "1548480"
  },
  {
    "text": "make that public any other questions all",
    "start": "1548480",
    "end": "1555920"
  },
  {
    "text": "right",
    "start": "1555920",
    "end": "1556310"
  },
  {
    "text": "I'll be around for a few more minutes",
    "start": "1556310",
    "end": "1557570"
  },
  {
    "text": "over in the AWS booth",
    "start": "1557570",
    "end": "1559430"
  },
  {
    "text": "if you'd rather come over and ask me",
    "start": "1559430",
    "end": "1560990"
  },
  {
    "text": "questions there come find me",
    "start": "1560990",
    "end": "1562940"
  },
  {
    "text": "thanks everyone",
    "start": "1562940",
    "end": "1565509"
  }
]