[
  {
    "start": "0",
    "end": "31000"
  },
  {
    "text": "hello and welcome I'm Rick Sears the software development manager for the Amazon simple workflow service and I",
    "start": "5160",
    "end": "11400"
  },
  {
    "text": "happy to share with you today my talk on programming the distribution of work in the cloud using the Amazon simple",
    "start": "11400",
    "end": "18199"
  },
  {
    "text": "workflow service and the AWS flow programming",
    "start": "18199",
    "end": "23000"
  },
  {
    "text": "framework so let's go over real quick what we'll cover today first I'll introduce a sample",
    "start": "23800",
    "end": "29480"
  },
  {
    "text": "distributed application that we'll use as a guide for our discussion in this sample application we'll cover Core",
    "start": "29480",
    "end": "36280"
  },
  {
    "start": "31000",
    "end": "31000"
  },
  {
    "text": "Concepts that may be familiar to many of you in in building your sample in building your own backend",
    "start": "36280",
    "end": "42840"
  },
  {
    "text": "systems then we'll look at how the sample application could be built and highlight some of the specific",
    "start": "42840",
    "end": "48520"
  },
  {
    "text": "challenges we'll need to meet and creating a robust distributed",
    "start": "48520",
    "end": "54520"
  },
  {
    "text": "application next we'll look at how the Amazon simple workflow service or swf for short can help help us in meeting",
    "start": "54520",
    "end": "60719"
  },
  {
    "text": "many of these challenges then I'll introduce the AWS flow programming framework and look look",
    "start": "60719",
    "end": "67520"
  },
  {
    "text": "at how we can program our sample application using flow and finally we'll bring it all",
    "start": "67520",
    "end": "74479"
  },
  {
    "text": "together and show how our sample application programmed using flow can run on top of the Amazon simple workflow",
    "start": "74479",
    "end": "80360"
  },
  {
    "text": "service to provide the full distributed runtime for our sample application one quick note any questions",
    "start": "80360",
    "end": "87400"
  },
  {
    "text": "you might have during the talk please save them for just after the talk where I'll be available down at the front of",
    "start": "87400",
    "end": "92439"
  },
  {
    "text": "the stage and also the slides for this talk including the code shown in the",
    "start": "92439",
    "end": "97560"
  },
  {
    "text": "slides will be available after the talk so no need to write down all the code I'll be showing uh as it flies by so",
    "start": "97560",
    "end": "105240"
  },
  {
    "text": "let's get started I'd like to begin with a quick",
    "start": "105240",
    "end": "110680"
  },
  {
    "text": "story to set up my sample application a number of years ago I made the move from",
    "start": "110680",
    "end": "115759"
  },
  {
    "text": "the city where I grew up Atlanta to the city where I now call home Seattle I worked with a moving company to move",
    "start": "115759",
    "end": "122360"
  },
  {
    "text": "my stuff and lo and behold when my stuff arrived in Seattle some of the items",
    "start": "122360",
    "end": "128399"
  },
  {
    "text": "just didn't make it I knew that they' been packed so they must have been lost somewhere between Atlanta and",
    "start": "128399",
    "end": "134319"
  },
  {
    "text": "Seattle I called the moving company explained the best I could the items that didn't make it and thus began the",
    "start": "134319",
    "end": "140319"
  },
  {
    "text": "multi-week ordeal of getting my stuff back thinking back recently on this",
    "start": "140319",
    "end": "145480"
  },
  {
    "text": "process I wondered what the moving company's backend system for searching for Missi and items might look",
    "start": "145480",
    "end": "151480"
  },
  {
    "text": "like it seemed like in building this type of application we would encounter a lot of the same challenges the customers",
    "start": "151480",
    "end": "157400"
  },
  {
    "text": "I've spoken with have have uh found and their own build building their own backend systems and since I'm always",
    "start": "157400",
    "end": "163800"
  },
  {
    "text": "excited about talking with customers about how to build their backend systems using AWS Services I wondered what this",
    "start": "163800",
    "end": "169720"
  },
  {
    "text": "backend system for finding missing stuff might look like built using the Amazon simple workflow service so let's do this",
    "start": "169720",
    "end": "176840"
  },
  {
    "text": "let's build this application using the Amazon simple workflow",
    "start": "176840",
    "end": "181840"
  },
  {
    "text": "service so at a high level what might this process look like first my",
    "start": "182799",
    "end": "188200"
  },
  {
    "text": "frustrated self would need to enter in all the information about my missing stuff and the shipment it was on into",
    "start": "188200",
    "end": "194000"
  },
  {
    "start": "190000",
    "end": "190000"
  },
  {
    "text": "the moving company systems to help them start the search second the moving company we need",
    "start": "194000",
    "end": "200159"
  },
  {
    "text": "to search the warehouse that my stuff was stored in on its way from Atlanta to Seattle and last the moving company",
    "start": "200159",
    "end": "207200"
  },
  {
    "text": "would either need to ship me the items it found back to C or cut me a check for the items that are truly lost so I want to focus on the",
    "start": "207200",
    "end": "214680"
  },
  {
    "text": "second half of this overall process the search of the warehouse and the eventual recovery or reimbursement for my missing",
    "start": "214680",
    "end": "222959"
  },
  {
    "text": "items let's start off by talking in general terms about how we might run the steps in this part of our overall",
    "start": "224080",
    "end": "230200"
  },
  {
    "text": "process we'll focus on just one of the steps the search of the warehouse for my missing",
    "start": "230200",
    "end": "235280"
  },
  {
    "text": "stuff first we have some sort of some amount of logic associated with searching the warehouse house this logic",
    "start": "235280",
    "end": "241280"
  },
  {
    "text": "could include working with the inventory systems of the warehouse to search for records of my missing stuff it could",
    "start": "241280",
    "end": "247560"
  },
  {
    "text": "also involve cutting tickets to the staff in the warehouse to go and actually physically search the warehouse",
    "start": "247560",
    "end": "253120"
  },
  {
    "text": "for my missing stuff we'd want a good bit of this logic to be running in code so we can execute",
    "start": "253120",
    "end": "258919"
  },
  {
    "text": "it reliably whenever we need to do a search to run the code we need to bring online one or more machines and a",
    "start": "258919",
    "end": "265360"
  },
  {
    "text": "cluster of machines to host the system processes running the code this setup would be true for all of my steps in my",
    "start": "265360",
    "end": "271840"
  },
  {
    "text": "sample application get the logic into code and run that code on a cluster of",
    "start": "271840",
    "end": "278160"
  },
  {
    "text": "machines so how might the machines running our code be deployed let's start off by giving a",
    "start": "279120",
    "end": "285039"
  },
  {
    "text": "name to the cluster of machines we just talked about since these machines are doing the actual work in our sample",
    "start": "285039",
    "end": "291320"
  },
  {
    "text": "application we'll call them machine workers or workers for short when deploying these workers we",
    "start": "291320",
    "end": "297560"
  },
  {
    "text": "need we need to consider that each of these workers hosting a logically distinct step in my sample application",
    "start": "297560",
    "end": "303199"
  },
  {
    "text": "might need to run in a different network location than the other steps for example the search of the warehouse",
    "start": "303199",
    "end": "309360"
  },
  {
    "text": "might need to run at some point on premises in the warehouse the workers running the item",
    "start": "309360",
    "end": "315280"
  },
  {
    "text": "shipping step may be part of a a part of my application that I've been able to upgrade and run on Amazon ec2 instances",
    "start": "315280",
    "end": "322720"
  },
  {
    "text": "to run the logic in the cloud and finally the workers doing my R item reimbursement step might need to run in",
    "start": "322720",
    "end": "329400"
  },
  {
    "text": "my lock down corporate Network to interface with a restricted access Billing System these requirements to deploy code",
    "start": "329400",
    "end": "337400"
  },
  {
    "text": "to distinct systems running in different network locations may seem familiar to many of you since this is common when",
    "start": "337400",
    "end": "343319"
  },
  {
    "text": "moving existing applications into the cloud we need to make sure that we utilize technologies that allow workers",
    "start": "343319",
    "end": "349360"
  },
  {
    "text": "to run where they need to run and be combined with other workers to get the whole process",
    "start": "349360",
    "end": "355960"
  },
  {
    "text": "done since all the workers for our steps in our sample application might be running in different netk network",
    "start": "356600",
    "end": "362440"
  },
  {
    "text": "locations we'll need to use some sort of scheme to coordinate the workers to get the overall process done from start to",
    "start": "362440",
    "end": "369319"
  },
  {
    "text": "finish the way many of you might model this is by using another worker who acts as the coordinator for the inter",
    "start": "369319",
    "end": "375360"
  },
  {
    "text": "interactions between our step specific workers this worker is a machine or set",
    "start": "375360",
    "end": "380800"
  },
  {
    "text": "of machines just like our other step specific workers instead of executing the logic",
    "start": "380800",
    "end": "386199"
  },
  {
    "text": "for a single step this worker would kick off the whole process keep track of what's going on and initiate the work",
    "start": "386199",
    "end": "393000"
  },
  {
    "text": "for our other workers one of the key things to",
    "start": "393000",
    "end": "399599"
  },
  {
    "start": "396000",
    "end": "396000"
  },
  {
    "text": "understand about this worker that's running the show is why it needs to keep track of progress as part of its job of",
    "start": "399599",
    "end": "405560"
  },
  {
    "text": "coordinating our other workers the record of progress we're talking about here includes the",
    "start": "405560",
    "end": "410680"
  },
  {
    "text": "transitions from one step to to another in our overall process for example it would contain a",
    "start": "410680",
    "end": "416840"
  },
  {
    "text": "record of when we started the warehouse search when the Warehouse search finished and then when we subsequently",
    "start": "416840",
    "end": "422360"
  },
  {
    "text": "started the item shipping step this worker needs to know about the progress to be able to make decisions",
    "start": "422360",
    "end": "428639"
  },
  {
    "text": "about what should happen next in the overall process when it receives a notification that a worker has completed",
    "start": "428639",
    "end": "434520"
  },
  {
    "text": "its work this record of progress also allows us to recognize when a step has taken",
    "start": "434520",
    "end": "440240"
  },
  {
    "text": "too long even in the event that that worker is unable to report back progress and finally This Record should",
    "start": "440240",
    "end": "446840"
  },
  {
    "text": "be durable in the event that the workers managing our overall process are enabled are completely down and another worker",
    "start": "446840",
    "end": "453440"
  },
  {
    "text": "needs to pick up from where they left off so this worker needs to use some sort of external storage such as a",
    "start": "453440",
    "end": "459199"
  },
  {
    "text": "relational database to make sure that the record of progress is available and up to-date in the event of machine",
    "start": "459199",
    "end": "467039"
  },
  {
    "start": "467000",
    "end": "467000"
  },
  {
    "text": "failure so now that you have more of an idea of what our sample application might look like and also have gotten a",
    "start": "467919",
    "end": "473280"
  },
  {
    "text": "small taste of the challenges we need to face let's dive deeper into some of the other challenges first our sample",
    "start": "473280",
    "end": "480240"
  },
  {
    "text": "application needs to be able to scale up the workers as the number of searches grows the sample application also needs",
    "start": "480240",
    "end": "487039"
  },
  {
    "text": "to be able to handle failures that occur at any part like the ones we discussed our sample application also",
    "start": "487039",
    "end": "493919"
  },
  {
    "text": "needs to have its interactions optimized to be as fast as possible in getting work to workers and finally operators of",
    "start": "493919",
    "end": "501159"
  },
  {
    "text": "our sample application need to be able to look at what is happening or has happened to audit every step in our",
    "start": "501159",
    "end": "507720"
  },
  {
    "text": "overall process these challenges is what Amazon simple",
    "start": "507720",
    "end": "514279"
  },
  {
    "text": "workflow was built to meet our team recognized that the key piece necessary",
    "start": "514279",
    "end": "519560"
  },
  {
    "text": "for all com in common to all types of multi-step applications running on machines in different network locations",
    "start": "519560",
    "end": "525839"
  },
  {
    "text": "was the handling of coordination actions and the tracking of progress of work spread across these",
    "start": "525839",
    "end": "531200"
  },
  {
    "text": "machines by taking care of the tracking of progress s swf removes the burden of complexity managing the durable record",
    "start": "531200",
    "end": "538279"
  },
  {
    "text": "for workers that are running in the show swf also acts as the reliable Shepherd of work that needs to be handed",
    "start": "538279",
    "end": "545720"
  },
  {
    "text": "out to our workers to get the steps done so the job of building our sample application becomes simplified by the",
    "start": "545720",
    "end": "552680"
  },
  {
    "text": "features offered by swf the machine workers only need to focus on the logic for individual steps",
    "start": "552680",
    "end": "559440"
  },
  {
    "text": "or the logic of what should happen next instead of all the coordination mck so",
    "start": "559440",
    "end": "565040"
  },
  {
    "text": "let's now look at the specific features of swf that help us in meeting these challenges",
    "start": "565040",
    "end": "571360"
  },
  {
    "start": "571000",
    "end": "571000"
  },
  {
    "text": "let's look at our first challenge scalability our sample application needs to be able to add workers to any part of",
    "start": "571959",
    "end": "578399"
  },
  {
    "text": "our architecture at any time quickly and easily if it becomes a processing",
    "start": "578399",
    "end": "584040"
  },
  {
    "text": "bottleneck also to be able to add these workers quickly and easily our workers need to be stateless so that they can",
    "start": "584040",
    "end": "590839"
  },
  {
    "text": "come online and start working without having to synchronize their internal view of the overall process",
    "start": "590839",
    "end": "596360"
  },
  {
    "text": "state to keep our worker stateless we need the state or record of progress we",
    "start": "596360",
    "end": "601440"
  },
  {
    "text": "just talked about to be stored by another system and given to our workers when they need",
    "start": "601440",
    "end": "607480"
  },
  {
    "start": "608000",
    "end": "608000"
  },
  {
    "text": "it so Amazon s swf provides three key features that help us in keeping our process",
    "start": "608079",
    "end": "613399"
  },
  {
    "text": "scalable first we are the repository of State for the entire distributed application s swf keeps track of the",
    "start": "613399",
    "end": "620640"
  },
  {
    "text": "outstanding work for our individual workers and also the history of what has happened so far in our overall process",
    "start": "620640",
    "end": "627079"
  },
  {
    "text": "to provide a view of the application state for both step specific workers and workers running the whole",
    "start": "627079",
    "end": "633880"
  },
  {
    "text": "show second s swf pollers poll s swf for work which naturally load balances as",
    "start": "633880",
    "end": "640120"
  },
  {
    "text": "workers become available polling allows workers to come online and start working",
    "start": "640120",
    "end": "645560"
  },
  {
    "text": "without having to uh bring online resources for receiving requests or punch holes in their fire wall to",
    "start": "645560",
    "end": "651839"
  },
  {
    "text": "receive work and restricted parts of our Network and last s swf hands out tasks",
    "start": "651839",
    "end": "657160"
  },
  {
    "text": "to workers exactly once do we need work to be handed out exactly once because of our purposeful lack of",
    "start": "657160",
    "end": "663440"
  },
  {
    "text": "State on our workers to keep them scalable and stateless which does not allow for workers to to handle duplicate",
    "start": "663440",
    "end": "670240"
  },
  {
    "text": "work that might have already been worked on so let's look back at our sample",
    "start": "670240",
    "end": "676600"
  },
  {
    "text": "application architecture and see what supports for scalability mean for for this sample",
    "start": "676600",
    "end": "682320"
  },
  {
    "text": "application with the ability to add workers at any place at any time we're able to add new workers to our warehouse",
    "start": "682320",
    "end": "688920"
  },
  {
    "text": "search workers with very little setup the ability to add on demand is",
    "start": "688920",
    "end": "694040"
  },
  {
    "text": "essential to maintaining a great customer experience as the use of our application grows our sample application",
    "start": "694040",
    "end": "699680"
  },
  {
    "text": "also efficiently scales because we're focusing workers on only one portion of our overall architecture instead of",
    "start": "699680",
    "end": "705600"
  },
  {
    "text": "throwing Hardware at all parts which would be the case if we were running all of our logic in one",
    "start": "705600",
    "end": "712120"
  },
  {
    "text": "process so what about our next challenge fault tolerance applications experience",
    "start": "712720",
    "end": "718160"
  },
  {
    "start": "713000",
    "end": "713000"
  },
  {
    "text": "failures for many reasons there could be dependency failures such as a database or another service you",
    "start": "718160",
    "end": "724079"
  },
  {
    "text": "could fail using machine resources such as memory or IO there could even be bugs in the handling of certain types of data",
    "start": "724079",
    "end": "730360"
  },
  {
    "text": "in our workers each of these failures may have a different mitigation or recovery",
    "start": "730360",
    "end": "735760"
  },
  {
    "text": "action that needs to be put in place to handle the failure and also when failures occur we",
    "start": "735760",
    "end": "741279"
  },
  {
    "text": "need to react as quickly as possible so we need automated failure handling built into the system we use including",
    "start": "741279",
    "end": "747519"
  },
  {
    "text": "timeouts for workers that are taking too long SBF provides three key features for",
    "start": "747519",
    "end": "754480"
  },
  {
    "start": "752000",
    "end": "752000"
  },
  {
    "text": "fault tolerance first because SBF is the repository estate for our entire",
    "start": "754480",
    "end": "760160"
  },
  {
    "text": "application result of failure on one worker doesn't result in a a loss of overall progress to continue running our",
    "start": "760160",
    "end": "767399"
  },
  {
    "text": "process this resiliency is true for both workers doing specific steps as well as workers managing our overall",
    "start": "767399",
    "end": "775000"
  },
  {
    "text": "process second s swf supports timeouts on work being done in our application",
    "start": "775000",
    "end": "780440"
  },
  {
    "text": "and also allows us to kick off work over and over again if we don't if it doesn't finish successfully this means if one",
    "start": "780440",
    "end": "786959"
  },
  {
    "text": "worker is unable to complete its work for any reason and we we can react to this",
    "start": "786959",
    "end": "792040"
  },
  {
    "text": "failure as soon as possible based on the timeout set for this work and retry as often as",
    "start": "792040",
    "end": "798279"
  },
  {
    "text": "possible and last s swf allows us to pass failures explicitly as part of a",
    "start": "798279",
    "end": "803440"
  },
  {
    "text": "call from workers to a service API this allows workers to communicate failures that they handle as part of working with",
    "start": "803440",
    "end": "809920"
  },
  {
    "text": "a dependency that may become available for some reason and handled it as needed as part of our overall process",
    "start": "809920",
    "end": "818160"
  },
  {
    "text": "logic so what do these supports for fault tolerance mean for our sample application",
    "start": "818240",
    "end": "823560"
  },
  {
    "text": "architecture if the worker coordinating our overall process dies we need another worker to take over as quickly as",
    "start": "823560",
    "end": "830120"
  },
  {
    "text": "possible s swf will recognize this failure even if the worker is completely",
    "start": "830120",
    "end": "835240"
  },
  {
    "text": "unable to contact the service and redispatch this work to another worker this happens as quickly as we Define",
    "start": "835240",
    "end": "841800"
  },
  {
    "text": "based on the timeout settings set on the coordination work this ability is also true for any",
    "start": "841800",
    "end": "848079"
  },
  {
    "text": "other part of our sample application including each of the other sets of workers and S swf provides the option of",
    "start": "848079",
    "end": "853480"
  },
  {
    "text": "setting separate timeouts on work done in each",
    "start": "853480",
    "end": "858199"
  },
  {
    "text": "step so what about our next challenge low latency our sample application needs to",
    "start": "858880",
    "end": "864440"
  },
  {
    "start": "859000",
    "end": "859000"
  },
  {
    "text": "be able to get work to workers as quickly as possible and this means we need to be able to choose a mechanism to",
    "start": "864440",
    "end": "869759"
  },
  {
    "text": "hand out work that is scalable while maintaining low latency our sample application also",
    "start": "869759",
    "end": "875639"
  },
  {
    "text": "needs to be able to send certain work to specific workers or groups of workers that may have different resources",
    "start": "875639",
    "end": "881320"
  },
  {
    "text": "dedicated to do doing a certain type of work stbf provides two key features to",
    "start": "881320",
    "end": "889079"
  },
  {
    "start": "886000",
    "end": "886000"
  },
  {
    "text": "help keep our our latency low first we keep a poll request open for machines",
    "start": "889079",
    "end": "895959"
  },
  {
    "text": "asking for work until work is available to be handed out to to that worker this means this type of polling called long",
    "start": "895959",
    "end": "902440"
  },
  {
    "text": "polling provides low latency without having to H have the polar poll as frequently as possible for",
    "start": "902440",
    "end": "908519"
  },
  {
    "text": "work second we send specific work to specific workers through the use of task",
    "start": "908519",
    "end": "913920"
  },
  {
    "text": "lists a task list allows specific work is can be made specific to workers or groups of workers and using task lists",
    "start": "913920",
    "end": "921120"
  },
  {
    "text": "is as easy as configuring it at runtime for a worker to poll on a specific task list task lists support all different",
    "start": "921120",
    "end": "927959"
  },
  {
    "text": "types of routing of work to workers such as cash optimized work where the same worker would work on something over and",
    "start": "927959",
    "end": "933839"
  },
  {
    "text": "over again or even high priority work which may utilize a dedicated group of",
    "start": "933839",
    "end": "940399"
  },
  {
    "text": "workers so let's look back again at our sample application and find out what low latency supports mean for our",
    "start": "941199",
    "end": "947440"
  },
  {
    "text": "architecture the long pole behavior is built into to our use of simple workflow and therefore we have low latency",
    "start": "947440",
    "end": "954199"
  },
  {
    "text": "distribution of work to our workers but with the ability to Route certain tasks",
    "start": "954199",
    "end": "959519"
  },
  {
    "text": "to a group of workers we could have a cluster that was dedicated to high priority searches when new work for high",
    "start": "959519",
    "end": "965839"
  },
  {
    "text": "priority searches comes in we need that work we need those items to be found as fast as possible and then so this work",
    "start": "965839",
    "end": "972040"
  },
  {
    "text": "should not be held up by other lower priority searches that are using all of our regular search",
    "start": "972040",
    "end": "979399"
  },
  {
    "start": "980000",
    "end": "980000"
  },
  {
    "text": "workers so finally what about auditing our sample application operators of our",
    "start": "980759",
    "end": "985839"
  },
  {
    "text": "sample application need to be able to look into what is going on or has gone on in any of our searches to be able to",
    "start": "985839",
    "end": "992279"
  },
  {
    "text": "diagnose issues or dig deeply into performance issues there's also a need to keep the",
    "start": "992279",
    "end": "997839"
  },
  {
    "text": "records of our process executions around for a while after they execute to suffice for any auditability",
    "start": "997839",
    "end": "1003399"
  },
  {
    "text": "requirements we might have in our applications s swf provides three key",
    "start": "1003399",
    "end": "1009800"
  },
  {
    "start": "1008000",
    "end": "1008000"
  },
  {
    "text": "features to support auditability in our applications first we keep keep an index of process executions which in our case",
    "start": "1009800",
    "end": "1017279"
  },
  {
    "text": "are the the the searches for specific missing items which are used to find individual",
    "start": "1017279",
    "end": "1023160"
  },
  {
    "text": "executions that we can dig into we can find executions by a number of different criteria such as tags we might specify",
    "start": "1023160",
    "end": "1030000"
  },
  {
    "text": "when they get kicked off or even the type of failure encountered when an execution",
    "start": "1030000",
    "end": "1035199"
  },
  {
    "text": "ends second we keep a CL play-by-play history of the workflow execution called",
    "start": "1035199",
    "end": "1040558"
  },
  {
    "text": "the execution history this history contains what has happened in each transition to each step and so we can",
    "start": "1040559",
    "end": "1047480"
  },
  {
    "text": "use it to diagnose actions taken in specific steps to find the problems that",
    "start": "1047480",
    "end": "1053000"
  },
  {
    "text": "impact the execution of our process and last we retain this both the execution",
    "start": "1053000",
    "end": "1058799"
  },
  {
    "text": "index of executions as well as the execution history after the process finishes and this allows operators to go",
    "start": "1058799",
    "end": "1065240"
  },
  {
    "text": "back and dig into process executions as the need dictates so finally what are these",
    "start": "1065240",
    "end": "1071720"
  },
  {
    "text": "auditability requirements mean for our sample application the play-by-play history can",
    "start": "1071720",
    "end": "1077320"
  },
  {
    "text": "show us when the warehouse search step is taking periodically much longer than normal to",
    "start": "1077320",
    "end": "1082520"
  },
  {
    "text": "execute the play byplay history shows us when the warehouse search work was picked up when it was finished by the",
    "start": "1082520",
    "end": "1089400"
  },
  {
    "text": "worker and therefore we can find work that has taken too long and the history shows us which worker would have picked",
    "start": "1089400",
    "end": "1095280"
  },
  {
    "text": "up that work so we can pinpoint the issue to a specific host and dive deeper on logs on that one",
    "start": "1095280",
    "end": "1102399"
  },
  {
    "text": "machine so now that you've heard about what s swf has to offer Us in running our sample application in a robust and",
    "start": "1102520",
    "end": "1109000"
  },
  {
    "text": "scalable way how you might wonder how we actually write the code to build our application to run on top of simple",
    "start": "1109000",
    "end": "1117600"
  },
  {
    "start": "1118000",
    "end": "1118000"
  },
  {
    "text": "workflow we'll start out our walkthr by giving our process a formal name the missing item recovery process let's",
    "start": "1118480",
    "end": "1125480"
  },
  {
    "text": "remind ourselves what the actual steps in our process look like first we need to do a potentially time-consuming",
    "start": "1125480",
    "end": "1132000"
  },
  {
    "text": "search of the inventory of the warehouse for any items found we need to schedule shipment of the items back to my address",
    "start": "1132000",
    "end": "1138320"
  },
  {
    "text": "in see ble and finally for any items not found we need to calculate the value and",
    "start": "1138320",
    "end": "1143440"
  },
  {
    "text": "cut a check given these set of steps let's look at the interfaces for the code that executes each one of these",
    "start": "1143440",
    "end": "1151360"
  },
  {
    "text": "steps first we have the warehouse search step component that has the logic for searching the warehouse this interface",
    "start": "1151600",
    "end": "1158520"
  },
  {
    "text": "defines a method that performs a search the search inventory for items method while we won't go into the",
    "start": "1158520",
    "end": "1165120"
  },
  {
    "text": "details of this specific method let's assume it only contains a logic necessary to direct the local search of",
    "start": "1165120",
    "end": "1170960"
  },
  {
    "text": "the warehouse the implementation would not contain any code to distribute calls to our search inventory for items method",
    "start": "1170960",
    "end": "1178039"
  },
  {
    "text": "over a network just plain method calls in a single system",
    "start": "1178039",
    "end": "1184039"
  },
  {
    "text": "executable next we have our item shipping step component which contains the logic for shipping items again the",
    "start": "1184240",
    "end": "1191400"
  },
  {
    "text": "logic in our ship items to customer method defined in this interface would just contain the logic necessary to",
    "start": "1191400",
    "end": "1197000"
  },
  {
    "text": "interact with the local ship configuration system and finally we have the item",
    "start": "1197000",
    "end": "1203240"
  },
  {
    "text": "reimbursement step component which contains the logic for reimbursement of items as with the other two components",
    "start": "1203240",
    "end": "1210320"
  },
  {
    "text": "the code that runs in this interface and the method in this interface the reimburse items to customer method would",
    "start": "1210320",
    "end": "1216559"
  },
  {
    "text": "just contain the logic for interacting with the Billing System to cut a check so once we have each step in its",
    "start": "1216559",
    "end": "1223200"
  },
  {
    "text": "own component interface we want to put all these steps together using logic that defines how these steps interact in",
    "start": "1223200",
    "end": "1229039"
  },
  {
    "text": "our overall process we'll Define this logic in the code you see now the missing item recovery process",
    "start": "1229039",
    "end": "1235159"
  },
  {
    "text": "implementation class to start each step can be executed using local references",
    "start": "1235159",
    "end": "1241080"
  },
  {
    "text": "to an instance of the components we just talked about we'll Define the coordination",
    "start": "1241080",
    "end": "1246679"
  },
  {
    "text": "logic or how those components should execute one after the other and then portion of the missing item recovery",
    "start": "1246679",
    "end": "1252320"
  },
  {
    "text": "process implementation class shown here the search and replace missing items",
    "start": "1252320",
    "end": "1257600"
  },
  {
    "text": "method the steps in our overall process are defined as method calls to the local references in the implementation class",
    "start": "1257600",
    "end": "1264880"
  },
  {
    "text": "making calls to local object references using standard Java syntax results in a clean and understandable version of our",
    "start": "1264880",
    "end": "1271440"
  },
  {
    "text": "sample application Logic the focus of each call is execute just the logic necessary to get the step done but",
    "start": "1271440",
    "end": "1278440"
  },
  {
    "text": "because each component only contains Logic for the individual steps and does not contain logic to distribute the",
    "start": "1278440",
    "end": "1283919"
  },
  {
    "text": "calls over a network it is not scalable or fault tolerant in the way are way we originally envisioned for our sample",
    "start": "1283919",
    "end": "1290679"
  },
  {
    "text": "application what I'd like to be able to do is take this code which has a Simplicity and Clarity of understanding",
    "start": "1290679",
    "end": "1297480"
  },
  {
    "text": "and distribute it to workers fault make it fault tolerant in its processing scalable to handle lots of work and",
    "start": "1297480",
    "end": "1303880"
  },
  {
    "text": "auditable in its execution with minimal",
    "start": "1303880",
    "end": "1308600"
  },
  {
    "text": "changes so you've probably been down this road before you've built applications that coordinate work over",
    "start": "1309400",
    "end": "1315559"
  },
  {
    "text": "workers time and time again you know that the code we would have to write for this would not look very close to the",
    "start": "1315559",
    "end": "1321120"
  },
  {
    "text": "code we just saw once we once we handle all the problems of distributed applications but this is what exactly",
    "start": "1321120",
    "end": "1327720"
  },
  {
    "text": "what we want the customers of s swf to be able to do take their code and with minimal",
    "start": "1327720",
    "end": "1332760"
  },
  {
    "text": "changes make it distributed to workers in their Fleet this is why we created",
    "start": "1332760",
    "end": "1337799"
  },
  {
    "text": "the AWS flow programming framework to give customers the ability to take their applications and with minimal work",
    "start": "1337799",
    "end": "1343760"
  },
  {
    "text": "evolve them into robust distributed applications",
    "start": "1343760",
    "end": "1348720"
  },
  {
    "start": "1348000",
    "end": "1348000"
  },
  {
    "text": "so what is flow flow is a distributed programming Library written in Java Java is just one",
    "start": "1349440",
    "end": "1355760"
  },
  {
    "text": "of the languages you can use to build applications to run on top of Amazon simple workflow but is currently the",
    "start": "1355760",
    "end": "1360919"
  },
  {
    "text": "only language supported by the AWS flow framework the library uses standard Java",
    "start": "1360919",
    "end": "1366880"
  },
  {
    "text": "language constructs such as extending classes or annotating classes or methods to work with your code it also provides",
    "start": "1366880",
    "end": "1373880"
  },
  {
    "text": "simple classes that can be used as part of generated code to integrate with your log",
    "start": "1373880",
    "end": "1380080"
  },
  {
    "text": "to be able to plug into the execution stack Flo uses B code manipulation to become part of the call stack to provide",
    "start": "1380080",
    "end": "1387120"
  },
  {
    "text": "distributed execution supports flow wraps your logic to execute distributed to workers using the",
    "start": "1387120",
    "end": "1393640"
  },
  {
    "text": "Amazon simple workflow service underneath the covers Flo is just using standard service API",
    "start": "1393640",
    "end": "1400159"
  },
  {
    "text": "calls and finally Flo is open sourced under the Apache 2.0 license and hosted",
    "start": "1400159",
    "end": "1405520"
  },
  {
    "text": "on GitHub and distributed with the AWS SDK",
    "start": "1405520",
    "end": "1410440"
  },
  {
    "text": "so flow provides a number of key benefits to you as a distributed application Builder first your flow",
    "start": "1410799",
    "end": "1416960"
  },
  {
    "start": "1411000",
    "end": "1411000"
  },
  {
    "text": "allows you to take your code and make the critical pieces of it distributed workers with minimal changes we'll see",
    "start": "1416960",
    "end": "1422400"
  },
  {
    "text": "examples of these minimal changes in just a little bit second flow builds in distributed",
    "start": "1422400",
    "end": "1427840"
  },
  {
    "text": "failure handling into its programming model this includes support for common mitigations like retry with exponential",
    "start": "1427840",
    "end": "1434679"
  },
  {
    "text": "back off and finally flow's constructs scale with the complexity of your logic for",
    "start": "1434679",
    "end": "1441559"
  },
  {
    "text": "example parallel work can add significant amount of complex code especially when you need to wait on the",
    "start": "1441559",
    "end": "1446799"
  },
  {
    "text": "results of the parallel branches before continuing forward with flow parallel work becomes back-to-back calls to",
    "start": "1446799",
    "end": "1453320"
  },
  {
    "text": "methods of components you want to execute at the same time with simple semantics to wait before moving",
    "start": "1453320",
    "end": "1459080"
  },
  {
    "text": "forward so let's take a look at how we can evolve our original code to to execute using flow",
    "start": "1459080",
    "end": "1467679"
  },
  {
    "text": "we'll start first by augmenting the first step in our application the search of the warehouse to run using flow shown",
    "start": "1468840",
    "end": "1474840"
  },
  {
    "text": "here is the original interface of the warehouse search step component the entrypoint method of this component is",
    "start": "1474840",
    "end": "1480799"
  },
  {
    "text": "the search inventory for items method to be able to execute this method on worker machines instead of only on a single",
    "start": "1480799",
    "end": "1487000"
  },
  {
    "text": "host we need this method to execute disconnected from the Java call stack of the host running the rest of our",
    "start": "1487000",
    "end": "1494720"
  },
  {
    "start": "1495000",
    "end": "1495000"
  },
  {
    "text": "application we want flow to provide supports for executing the search inventory for items method distributed",
    "start": "1496279",
    "end": "1501679"
  },
  {
    "text": "across worker instances so to do this we need to Mark the interface with a flow provided annotation the at activities",
    "start": "1501679",
    "end": "1509200"
  },
  {
    "text": "annotation flow and swf call pieces of logic that execute on worker machines",
    "start": "1509200",
    "end": "1514559"
  },
  {
    "text": "activities the at activities annotation is applied at the interface level and",
    "start": "1514559",
    "end": "1519640"
  },
  {
    "text": "exposes all methods as handled by flow since we only have one method in our interface this becomes a single",
    "start": "1519640",
    "end": "1526399"
  },
  {
    "text": "activity flow will distribute to our work ERS so how does flow take part in",
    "start": "1526399",
    "end": "1532679"
  },
  {
    "start": "1530000",
    "end": "1530000"
  },
  {
    "text": "executing our logic first the flow libraries are used to process our flow specific annotations like the ad",
    "start": "1532679",
    "end": "1539120"
  },
  {
    "text": "activities annotation we just saw to allow your code to be instrumented with flow supports The annotation processing",
    "start": "1539120",
    "end": "1545720"
  },
  {
    "text": "libraries are first used at compile time to produce a version of your code that exposes flow specific constructs that",
    "start": "1545720",
    "end": "1552159"
  },
  {
    "text": "are necessary to interact with activity methods without blocking we'll get into why we want to execute without blocking",
    "start": "1552159",
    "end": "1558480"
  },
  {
    "text": "in just a little bit the code for flow that flow produces is a wrapper around your code so the",
    "start": "1558480",
    "end": "1564120"
  },
  {
    "text": "semantics of your code are preserved in these wrapping classes and finally the libraries are also used at runtime to",
    "start": "1564120",
    "end": "1570279"
  },
  {
    "text": "actually plug into the call stack of the in the Java process that's executing our",
    "start": "1570279",
    "end": "1575960"
  },
  {
    "text": "code let's take a look at the output of our annotation processing library for the warehouse search step component we",
    "start": "1576520",
    "end": "1583039"
  },
  {
    "start": "1577000",
    "end": "1577000"
  },
  {
    "text": "annotate it as an activity the code displayed is the first few lines of the interface produced",
    "start": "1583039",
    "end": "1589279"
  },
  {
    "text": "the first thing you'll notice is the use of the term client which is tacked on to the name of this generated class the warehouse search step client flow uses a",
    "start": "1589279",
    "end": "1597559"
  },
  {
    "text": "suffix client for any code that wraps your code to provide non-blocking",
    "start": "1597559",
    "end": "1602679"
  },
  {
    "text": "supports next we have the first variation of the search inventory for items method exposed in this generated",
    "start": "1602679",
    "end": "1608880"
  },
  {
    "text": "code each variation of our activity method provides a different means to integrate that method into flow managed",
    "start": "1608880",
    "end": "1615360"
  },
  {
    "text": "overall process Logic the main difference between this variation and the one we wrote originally is the use",
    "start": "1615360",
    "end": "1621480"
  },
  {
    "text": "of the promise class which wraps the collection of item objects we're returning from this method so what is a",
    "start": "1621480",
    "end": "1629120"
  },
  {
    "text": "promise A promise is a is a class provided by flow that wraps the information that goes into or out of a",
    "start": "1629240",
    "end": "1635760"
  },
  {
    "text": "method managed by flow promises Act is a placeholder for the actual information that would be",
    "start": "1635760",
    "end": "1641919"
  },
  {
    "text": "provided to our code at some point in the future the promise becomes ready or what we call fulfilled when the activ",
    "start": "1641919",
    "end": "1648480"
  },
  {
    "text": "that returns a promise finishes its execution having a handle to the result of a method managed by flow allows us to",
    "start": "1648480",
    "end": "1656000"
  },
  {
    "text": "interact with these methods in our overall process logic without blocking we want to be able to execute",
    "start": "1656000",
    "end": "1661519"
  },
  {
    "text": "logic without blocking because some logic may take a fair bit of time to execute and tying up the worker running",
    "start": "1661519",
    "end": "1667360"
  },
  {
    "text": "our overall process to wait on the result is not an option if we want to scale",
    "start": "1667360",
    "end": "1672960"
  },
  {
    "text": "efficiently this may sound similar to the Future concept exposed in the Java concurrency libraries",
    "start": "1672960",
    "end": "1678679"
  },
  {
    "text": "the big difference here is the future interface is constructed with exceptions",
    "start": "1678679",
    "end": "1683880"
  },
  {
    "text": "and behaviors that force a blocking semantic on interactions with the methods of the future interface we took",
    "start": "1683880",
    "end": "1689760"
  },
  {
    "text": "a different approach with flow the methods of the promised class are not used to explicitly block forward",
    "start": "1689760",
    "end": "1696159"
  },
  {
    "text": "execution of threads instead it is the passing of a promise from one area code to another that is used to signify that",
    "start": "1696159",
    "end": "1703519"
  },
  {
    "text": "that code replies upon the results of the previous code and should wait until the method that return the promise is",
    "start": "1703519",
    "end": "1709360"
  },
  {
    "text": "done executing we'll get into the details of how we allow for blocking in just a",
    "start": "1709360",
    "end": "1714880"
  },
  {
    "text": "second another really interesting support that the non-blocking handles provide us is the ease of which we can",
    "start": "1714880",
    "end": "1720559"
  },
  {
    "text": "run steps and parallel running steps and parallel is as simple as calling flow",
    "start": "1720559",
    "end": "1725799"
  },
  {
    "text": "managed activity methods that return promises back to back and putting them into a collection of promises we use the",
    "start": "1725799",
    "end": "1732799"
  },
  {
    "text": "collection of promises with simple logic that defines whether or not we want to wait on all or any of the prom to finish",
    "start": "1732799",
    "end": "1739120"
  },
  {
    "text": "before we continue forward with our overall process",
    "start": "1739120",
    "end": "1743919"
  },
  {
    "start": "1744000",
    "end": "1744000"
  },
  {
    "text": "logic so how do we use promises in our coordination logic first we need to replace the",
    "start": "1744960",
    "end": "1751039"
  },
  {
    "text": "reference we had to the warehouse search step component with the flow generated client you see now the warehouse search",
    "start": "1751039",
    "end": "1756960"
  },
  {
    "text": "step client I use this reference to make the same call to the search inventory for items method as before but now",
    "start": "1756960",
    "end": "1763559"
  },
  {
    "text": "handle the return as a promise instead of a simple collection of item objects this is where the execution of our code",
    "start": "1763559",
    "end": "1770080"
  },
  {
    "text": "actually begins but our applic overall application logic is not blocked on this execution completing so even if it takes",
    "start": "1770080",
    "end": "1777120"
  },
  {
    "text": "days or weeks to search the warehouse we don't consume resources on the workers running our code while it",
    "start": "1777120",
    "end": "1783159"
  },
  {
    "text": "executes in the next step I make a call to an internal method the ship or reimburse missing items method that uses",
    "start": "1783159",
    "end": "1789880"
  },
  {
    "text": "the found items to ship the items back to our customers or cut cut a check for",
    "start": "1789880",
    "end": "1795240"
  },
  {
    "text": "the items truly lost this method is where I actually need the results of the warehouse the items found in the",
    "start": "1795240",
    "end": "1800720"
  },
  {
    "text": "warehouse so this method is what I want to make as a barrier to execution of our overall process logic until the",
    "start": "1800720",
    "end": "1807440"
  },
  {
    "text": "execution of the warehouse search is done and the promise is fulfilled so how do tell how do I tell",
    "start": "1807440",
    "end": "1813600"
  },
  {
    "text": "Flo that I want the ship or reimburse missing items method to execute only once the promise is",
    "start": "1813600",
    "end": "1820360"
  },
  {
    "text": "fulfilled shown is the ship or reimburse missing items method you'll notice that I've added an annotation to this method",
    "start": "1821279",
    "end": "1827679"
  },
  {
    "text": "the asynchronous annotation adding the ad asynchronous annotation tells Flo",
    "start": "1827679",
    "end": "1833080"
  },
  {
    "text": "that this to treat this method as a barrier to promises being passed into the method the promise to the collection",
    "start": "1833080",
    "end": "1838760"
  },
  {
    "text": "of items being passed into this method must be fulfilled for it to proceed so flow will ensure that the search",
    "start": "1838760",
    "end": "1845080"
  },
  {
    "text": "inventory for items activity method is done executing before executing our ship",
    "start": "1845080",
    "end": "1850159"
  },
  {
    "text": "or reimburse missing items method this gives me the barrier I need to perform Logic on the results of the warehouse",
    "start": "1850159",
    "end": "1856240"
  },
  {
    "text": "search to actually use the value returned in the activity method I make a call to the",
    "start": "1856240",
    "end": "1862039"
  },
  {
    "text": "get method of the promis interface which Returns the collection of w the wrapped collection of item objects found in the",
    "start": "1862039",
    "end": "1867960"
  },
  {
    "text": "warehouse as I mentioned before the call to the get has no need to block because I'm guaranteed by flow that the",
    "start": "1867960",
    "end": "1874240"
  },
  {
    "text": "asynchronous execution of the search Logic is done at this point the rest of",
    "start": "1874240",
    "end": "1879519"
  },
  {
    "text": "our method is still standard calls to our components executing the last two steps to get the same supports for all",
    "start": "1879519",
    "end": "1886120"
  },
  {
    "text": "of our steps to be able to execute using flow we would need to make the same changes we made to the warehouse search",
    "start": "1886120",
    "end": "1892600"
  },
  {
    "text": "Logic but let's focus on finishing out our current changes to get the current code executing using",
    "start": "1892600",
    "end": "1899159"
  },
  {
    "start": "1899000",
    "end": "1899000"
  },
  {
    "text": "flow so as a final step let's see how we can use flow to become part of our overall process logic in the missing",
    "start": "1899159",
    "end": "1905480"
  },
  {
    "text": "item recovery process implementation class we just looked at to indicate to flow that it needs to participate in the",
    "start": "1905480",
    "end": "1912080"
  },
  {
    "text": "overall process logic we use we place a flow specific annotation the at workflow annotation on the inter face of our",
    "start": "1912080",
    "end": "1918840"
  },
  {
    "text": "component class flow and swf call logic that calls makes calls to activities a",
    "start": "1918840",
    "end": "1925600"
  },
  {
    "text": "workflow the atw workflow annotation tells flow that it contains methods that need to be managed by flow such as the",
    "start": "1925600",
    "end": "1931840"
  },
  {
    "text": "at asynchronous method we just looked at and one method that will be annotated as the entry point into our overall process",
    "start": "1931840",
    "end": "1938919"
  },
  {
    "text": "there's a bit more to getting the execution kicked off but have to save that for you to explore outside this",
    "start": "1938919",
    "end": "1945480"
  },
  {
    "text": "talk so what we've just seen is the main bulk of code changes necessary to make our sample application have work",
    "start": "1945919",
    "end": "1951880"
  },
  {
    "text": "distributed to workers now you may ask yourself how does Flo actually run this sample application using S",
    "start": "1951880",
    "end": "1960159"
  },
  {
    "text": "swf let's take a quick look at our original architecture to explore how flow Maps your logic on interactions",
    "start": "1960960",
    "end": "1966600"
  },
  {
    "text": "with s swf our workers were set up to handle different steps in our application logic",
    "start": "1966600",
    "end": "1972000"
  },
  {
    "text": "allowing pieces to be distributed in their own unique manner the worker we workers were coordinated by another",
    "start": "1972000",
    "end": "1977880"
  },
  {
    "text": "worker which controlled the interactions between steps when we went through the flow code",
    "start": "1977880",
    "end": "1983559"
  },
  {
    "text": "we talked about how flow and swf called the distributed exec execution of our step logic activities so when we talk",
    "start": "1983559",
    "end": "1991360"
  },
  {
    "text": "about the machine workers that are executing each step we use the term activity workers to return refer to",
    "start": "1991360",
    "end": "1997159"
  },
  {
    "text": "these step specific worker fleets let's dive deeper into the activity workers by looking at the construction of our",
    "start": "1997159",
    "end": "2003240"
  },
  {
    "text": "warehouse search activity worker we start with the general",
    "start": "2003240",
    "end": "2008559"
  },
  {
    "text": "structure of a worker process each flow-based worker process has some set set of our logic such as",
    "start": "2008559",
    "end": "2015200"
  },
  {
    "text": "the logic for searching the warehouse inventory and an instantiation of the AWS SDK to communicate with the S swf",
    "start": "2015200",
    "end": "2022360"
  },
  {
    "text": "service flow libraries wrap your logic as part of a system process running in a jvm and kick off in any place you choose",
    "start": "2022360",
    "end": "2030159"
  },
  {
    "text": "Amazon ec2 your company Network really anywhere that can make an outbound Network call you write your code as we",
    "start": "2030159",
    "end": "2036720"
  },
  {
    "text": "saw earlier by seg men in your logic into activities and coordination logic that are deployed independently flow",
    "start": "2036720",
    "end": "2043440"
  },
  {
    "text": "handles all the underlying supports to get work to workers when",
    "start": "2043440",
    "end": "2048480"
  },
  {
    "text": "necessary so how is our activity worker constructed the activity worker process",
    "start": "2048560",
    "end": "2054280"
  },
  {
    "text": "containing our warehouse search activity logic will be packaged with just the code necessary to do this one part of our process we'll first include the",
    "start": "2054280",
    "end": "2061320"
  },
  {
    "text": "warehouse search step interface we annotated with the at activities annotation we'll also include the",
    "start": "2061320",
    "end": "2066839"
  },
  {
    "text": "warehouse search step implementation class into this package code finally there's configuration code that we use",
    "start": "2066839",
    "end": "2073280"
  },
  {
    "text": "to set up the worker we won't go over the specifics of this setup code but the parameters are straightforward to",
    "start": "2073280",
    "end": "2078839"
  },
  {
    "text": "configure and it's easy to write so with all of this code packaged together we have an activity worker that's ready to",
    "start": "2078839",
    "end": "2085878"
  },
  {
    "text": "run so how does flow know when to execute the logic contained in our activity worker the swf client is the",
    "start": "2085879",
    "end": "2092480"
  },
  {
    "text": "conduit by which the warehouse search step logic is gets executed our flow code uses the S swf",
    "start": "2092480",
    "end": "2099480"
  },
  {
    "text": "client to periodically ask the swf service if the warehouse search step logic should execute if there's a record",
    "start": "2099480",
    "end": "2106119"
  },
  {
    "text": "that this logic should execute flow will the client will receive a task assigned to the worker as a response to the",
    "start": "2106119",
    "end": "2112359"
  },
  {
    "text": "request for work this task represents the desire to make a single execution of our logic in the activity the flow",
    "start": "2112359",
    "end": "2119359"
  },
  {
    "text": "framework code is plugged into this this s swf client and understands the needs to execute the search inventory for",
    "start": "2119359",
    "end": "2125680"
  },
  {
    "text": "items method using the information in the task in our it's our specific logic executing at this point based on what we",
    "start": "2125680",
    "end": "2132760"
  },
  {
    "text": "wrote In The implementation class and using the data attach to the task that was returned from the",
    "start": "2132760",
    "end": "2138320"
  },
  {
    "text": "service when the activity method is done executing flow takes back control packages up the results of that activity",
    "start": "2138320",
    "end": "2144599"
  },
  {
    "text": "execution and calls a response API with a record of the task completing the record of task completion",
    "start": "2144599",
    "end": "2151040"
  },
  {
    "text": "becomes part of the record of progress or application state which is stored by stpf",
    "start": "2151040",
    "end": "2158040"
  },
  {
    "text": "so now that we've seen how to create activity workers let's take a look at the logic that runs the whole show one",
    "start": "2158359",
    "end": "2164319"
  },
  {
    "text": "important idea at the core of flow-based applications is that our overall process logic is also handled by a flow-based",
    "start": "2164319",
    "end": "2170760"
  },
  {
    "text": "worker just like our activity workers instead of handling single invocations this worker handles changes",
    "start": "2170760",
    "end": "2177480"
  },
  {
    "text": "in our application State when we talked about the code that manages our overall process we use the term workflow to mark",
    "start": "2177480",
    "end": "2184560"
  },
  {
    "text": "their coordination logic running the show so when we talk about machine workers handling the transitions in our",
    "start": "2184560",
    "end": "2190520"
  },
  {
    "text": "overall process we'll use the term workflow workers let's now dig into the workflow",
    "start": "2190520",
    "end": "2195760"
  },
  {
    "text": "workers construction to run our missing item recovery",
    "start": "2195760",
    "end": "2201160"
  },
  {
    "text": "process so how are our workflow workers created the workflow worker is packaged",
    "start": "2201160",
    "end": "2207440"
  },
  {
    "text": "with just the code necessary to run the logic to call activities one after the other we do not include the",
    "start": "2207440",
    "end": "2212920"
  },
  {
    "text": "implementation of activities just the flow generated wrapper classes such as the warehouse search step client to",
    "start": "2212920",
    "end": "2219359"
  },
  {
    "text": "integrate the activities into our overall process in addition we package the flow with the flow generated classes",
    "start": "2219359",
    "end": "2225560"
  },
  {
    "text": "we include the missing item recovery process implementation class we annotated with the at workflow",
    "start": "2225560",
    "end": "2231319"
  },
  {
    "text": "annotation we also include the missing item recovery process implementation class which is the heart of our",
    "start": "2231319",
    "end": "2236880"
  },
  {
    "text": "coordination logic into this package code finally there's configuration code",
    "start": "2236880",
    "end": "2242359"
  },
  {
    "text": "just like the activity workers to set up these workers once this is packaged all together our workflow workers is ready",
    "start": "2242359",
    "end": "2248000"
  },
  {
    "text": "to be deployed so how does our overall process logic get evaluated on the workflow",
    "start": "2248000",
    "end": "2254720"
  },
  {
    "text": "worker to start as with the activity worker the S swf client is the conduit by which this worker is",
    "start": "2254720",
    "end": "2261760"
  },
  {
    "text": "initiated the flow code uses the SF client to periodically ask the service",
    "start": "2261760",
    "end": "2267000"
  },
  {
    "text": "if any ongoing execution of the missing item recovery process logic has change",
    "start": "2267000",
    "end": "2272079"
  },
  {
    "text": "State as we talked about earlier a change in state is it represents a progression in a work flow like a new",
    "start": "2272079",
    "end": "2278160"
  },
  {
    "text": "workflow being kicked off or an activity finishing its execution like we talked about with the activity",
    "start": "2278160",
    "end": "2283800"
  },
  {
    "text": "worker if there's an execution that has changed State the worker receives a task as a response to request for changed",
    "start": "2283800",
    "end": "2290680"
  },
  {
    "text": "executions this task contains the history for one of our uh changed",
    "start": "2290680",
    "end": "2295960"
  },
  {
    "text": "executions the flow framework understands how to use this history along with the logic defined in our",
    "start": "2295960",
    "end": "2301359"
  },
  {
    "text": "class marked with the at workflow annotation to determine what should happen next even though we didn't go into the",
    "start": "2301359",
    "end": "2307560"
  },
  {
    "text": "details of the information contained in the history the idea is simple the history contains a record of activity",
    "start": "2307560",
    "end": "2313800"
  },
  {
    "text": "execution that we use to replay the logic in our workflow class to the point where the logic last left off we collect",
    "start": "2313800",
    "end": "2320800"
  },
  {
    "text": "what activities in that code should be done next and turn those into commands to execute new",
    "start": "2320800",
    "end": "2326520"
  },
  {
    "text": "activities the worker packages up these new activities commands into a response",
    "start": "2326520",
    "end": "2331680"
  },
  {
    "text": "object that is sent back through a response API to the service so now s swf has a record of of",
    "start": "2331680",
    "end": "2337520"
  },
  {
    "text": "our new activities to execute which goes to our activity worker and gets executed as we described",
    "start": "2337520",
    "end": "2344318"
  },
  {
    "text": "earlier so flow is actually acting as the execution Handler for both our activity workers running our activity",
    "start": "2345160",
    "end": "2351839"
  },
  {
    "start": "2351000",
    "end": "2351000"
  },
  {
    "text": "logic and our overall process logic running our workflow workers while we didn't get to go over covering the other",
    "start": "2351839",
    "end": "2359240"
  },
  {
    "text": "turning the other steps into activities the same changes can apply and with these other two steps running in workers",
    "start": "2359240",
    "end": "2364960"
  },
  {
    "text": "we now have an architecture that is distributed it scale ailable in multiple distinct Dimensions from our individual",
    "start": "2364960",
    "end": "2370240"
  },
  {
    "text": "activity logic to our overall process logic hopefully you see now how minimal",
    "start": "2370240",
    "end": "2376839"
  },
  {
    "text": "the changes and how straightforward the deployment of our sample application can be when running using S swf and flow our",
    "start": "2376839",
    "end": "2383520"
  },
  {
    "text": "customers see enormous value and using flow to evolve their applications you may have read about",
    "start": "2383520",
    "end": "2389480"
  },
  {
    "text": "NASA's jet propulsion Laboratories use of AWS services including Amazon simple workflow as part of their mission",
    "start": "2389480",
    "end": "2395520"
  },
  {
    "text": "support systems for the Mars science laboratory better known as The Curiosity Mars Rover NASA JPL used flow to create",
    "start": "2395520",
    "end": "2403240"
  },
  {
    "text": "data processing pipelines for tactical operations and scientific analysis that are critical to this mission's",
    "start": "2403240",
    "end": "2409640"
  },
  {
    "text": "success they describe creating complex image processing workflows including parallel executions with the pendent",
    "start": "2409640",
    "end": "2416040"
  },
  {
    "text": "steps to execute after those are done with only a few simple lines of java code using",
    "start": "2416040",
    "end": "2421920"
  },
  {
    "text": "flow using flow and swf allows NASA JPL to focus on the true nature of their",
    "start": "2421920",
    "end": "2427000"
  },
  {
    "text": "work science and exploration instead of building and managing infrastructure to orchestrate their",
    "start": "2427000",
    "end": "2433200"
  },
  {
    "text": "components if you attended our earlier talk you heard about fluid's use of flow and sdbf for their customer branding",
    "start": "2433200",
    "end": "2439359"
  },
  {
    "text": "processing pipelines fluid ramped up quickly on Flow and on S swf by evolving their",
    "start": "2439359",
    "end": "2445560"
  },
  {
    "text": "existing image processing pipeline to run on S swf in no small part to their use of flow to build their",
    "start": "2445560",
    "end": "2451440"
  },
  {
    "text": "application like NASA JPL Flo was able to create massive parallel processes",
    "start": "2451440",
    "end": "2456680"
  },
  {
    "text": "with small some small amount of code primarily directed at The Core Business needs speeding up the time to delivery",
    "start": "2456680",
    "end": "2462839"
  },
  {
    "text": "of their application enhancing and enhancing their developer productivity fluid also saw value in using flow and S",
    "start": "2462839",
    "end": "2469760"
  },
  {
    "text": "swf and other parts of their business Beyond image processing to coordinate work for processes Gathering and",
    "start": "2469760",
    "end": "2476599"
  },
  {
    "text": "disseminating information through social media and finally another customer that",
    "start": "2476599",
    "end": "2481760"
  },
  {
    "text": "use has used flow and swf to great success is New Concepts development they",
    "start": "2481760",
    "end": "2486839"
  },
  {
    "text": "use flow and SF and one of their key businesses that processes public information gathered from a variety of",
    "start": "2486839",
    "end": "2493319"
  },
  {
    "text": "distinct sources both free and paid for use to assist in the recovery of funds owed to their",
    "start": "2493319",
    "end": "2499160"
  },
  {
    "text": "customers their data collection use case where activities are running custom actions to grab a variety of data from a",
    "start": "2499160",
    "end": "2506040"
  },
  {
    "text": "variety of sources and integrating this in a common processing pipeline is a great example of using the core",
    "start": "2506040",
    "end": "2512200"
  },
  {
    "text": "coordination features of s swf with the ease of writing custom logic using",
    "start": "2512200",
    "end": "2517280"
  },
  {
    "text": "standard Java code in flow so now you've seen how flow and saf",
    "start": "2517280",
    "end": "2524200"
  },
  {
    "text": "operate in action I want to call you to action to look at how you are building your processes to see how much flow and",
    "start": "2524200",
    "end": "2530040"
  },
  {
    "text": "S swf can help make them easier to program and easier to operate hopefully you can see how simple this simple",
    "start": "2530040",
    "end": "2536760"
  },
  {
    "text": "sample application is only the beginning even though flow can be used for the simplest of applications flow shines",
    "start": "2536760",
    "end": "2542920"
  },
  {
    "text": "even more when the complexity of our application increases this complexity can come from the many",
    "start": "2542920",
    "end": "2549000"
  },
  {
    "text": "failure scenarios we talked about earlier while we didn't get to discuss failure handleing inflow I encourage you",
    "start": "2549000",
    "end": "2555319"
  },
  {
    "text": "to look into this particular area especially built-in supports for exponential retries and how we model",
    "start": "2555319",
    "end": "2561119"
  },
  {
    "text": "failures using TR catch finally constructs to see what we have to offer another complex problem you may",
    "start": "2561119",
    "end": "2567559"
  },
  {
    "text": "have run into is the need to react to external information that comes in during the normal processing of the",
    "start": "2567559",
    "end": "2573240"
  },
  {
    "text": "steps in your application and I encourage you to look into how flow and S swf can help here as well and finally",
    "start": "2573240",
    "end": "2579880"
  },
  {
    "text": "even if your application is not written entirely in Java you can still plug in other languages written writing writing",
    "start": "2579880",
    "end": "2586599"
  },
  {
    "text": "your activities into swf and orchestrate them all using",
    "start": "2586599",
    "end": "2591680"
  },
  {
    "text": "flow so there's a number of ways to learn more about flow and swf first",
    "start": "2592200",
    "end": "2597280"
  },
  {
    "start": "2595000",
    "end": "2595000"
  },
  {
    "text": "we'll continue to provide more and more detailed information on the AWS website from the AWS website you can explore",
    "start": "2597280",
    "end": "2603960"
  },
  {
    "text": "full-fledged examples such as a Chron example showing how to to use a workflow as a cron to execute other",
    "start": "2603960",
    "end": "2610280"
  },
  {
    "text": "workflows and show and as well as many other different types of applications we've also recently released 17 code",
    "start": "2610280",
    "end": "2617119"
  },
  {
    "text": "recipes that can give you a quick leg up and applying flow in many common coding",
    "start": "2617119",
    "end": "2622520"
  },
  {
    "text": "situations we've also hosted two webinars and encourage you to take a look at those to find out more inform",
    "start": "2622520",
    "end": "2627800"
  },
  {
    "text": "information on swf and flow and as I mentioned before flow is open sourced so I encourage you to look",
    "start": "2627800",
    "end": "2634319"
  },
  {
    "text": "under the covers to see how flow offers the supports it does to our distributed",
    "start": "2634319",
    "end": "2640640"
  },
  {
    "text": "applications there's also additional opportunities here at reinvent to learn more a really there's a really exciting",
    "start": "2641800",
    "end": "2648079"
  },
  {
    "start": "2642000",
    "end": "2642000"
  },
  {
    "text": "talk coming up by NASA JPL about their use of AWS and you can also hear more about their use of s swf later",
    "start": "2648079",
    "end": "2655559"
  },
  {
    "text": "today you can also come by the AWS application Services booth and ask additional questions about flow and swf",
    "start": "2655559",
    "end": "2662520"
  },
  {
    "text": "or see me write more code about scenarios supported by flow and swf as you feel",
    "start": "2662520",
    "end": "2669040"
  },
  {
    "text": "thanks for your time today and we look forward to your feedback either through an evaluation form or through comments",
    "start": "2670240",
    "end": "2675559"
  },
  {
    "text": "on Twitter and feel free to meet me at the front of the stage to ask questions or get in touch through the AWS forums",
    "start": "2675559",
    "end": "2681960"
  },
  {
    "text": "thanks and enjoy the rest of the conference",
    "start": "2681960",
    "end": "2686240"
  }
]