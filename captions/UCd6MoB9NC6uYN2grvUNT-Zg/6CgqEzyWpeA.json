[
  {
    "text": "Welcome to 'This is My Architecture.'",
    "start": "6318",
    "end": "8308"
  },
  {
    "text": "I'm Orit, with me today, Shay from SundaySky.",
    "start": "8542",
    "end": "12117"
  },
  {
    "text": "Hi Shay, tell us about SundaySky.",
    "start": "12487",
    "end": "14640"
  },
  {
    "text": "Thanks for having me, Orit.",
    "start": "14865",
    "end": "16103"
  },
  {
    "text": "So, SundaySky has been around since 2007.",
    "start": "16103",
    "end": "19496"
  },
  {
    "text": "Our customers engage with their customers,\nusing video-powered experiences.",
    "start": "19786",
    "end": "23907"
  },
  {
    "text": "In which, the content of the video,\nis personalized to the viewer.",
    "start": "23907",
    "end": "28153"
  },
  {
    "text": "What are you going to talk about today?",
    "start": "28597",
    "end": "30601"
  },
  {
    "text": "Today, I'm going to talk about \nour rendering ecosystem.",
    "start": "30601",
    "end": "33796"
  },
  {
    "text": "Our Rendering-as-a-Service... \n... what we call RaaS.",
    "start": "34019",
    "end": "39732"
  },
  {
    "text": "Um... so, I imagine \nyou get a TELCO-bill every month.",
    "start": "39732",
    "end": "43876"
  },
  {
    "text": "- Ah...\n- Yes, I do.",
    "start": "44141",
    "end": "45291"
  },
  {
    "text": "And, imagine that, \ninstead of getting a PDF with static data,",
    "start": "45291",
    "end": "50372"
  },
  {
    "text": "you'll get a personalized video for Orit.",
    "start": "50515",
    "end": "54006"
  },
  {
    "text": "So, let's say you're watching--\nyou get a link to watch your monthly bill,",
    "start": "54446",
    "end": "59776"
  },
  {
    "text": "from your mobile device.",
    "start": "59776",
    "end": "61381"
  },
  {
    "text": "That request arrives into our RaaS ecosystem.",
    "start": "62000",
    "end": "65840"
  },
  {
    "text": "First stop is the API Gateway,",
    "start": "66570",
    "end": "68842"
  },
  {
    "text": "where we make use of the \ndifferent capabilities of API Gateway,",
    "start": "68842",
    "end": "74248"
  },
  {
    "text": "which is throttling and we can configure,",
    "start": "74248",
    "end": "78758"
  },
  {
    "text": "usage plans and API keys for our customers,",
    "start": "78758",
    "end": "82493"
  },
  {
    "text": "to control the load on our farm.",
    "start": "82493",
    "end": "85588"
  },
  {
    "text": "Ah... that request arrives \ninto a Lambda function,",
    "start": "86081",
    "end": "89000"
  },
  {
    "text": "which is our RaaS service frontend.",
    "start": "89000",
    "end": "93244"
  },
  {
    "text": "That Lambda function does some\nvalidations on the rendering  request.",
    "start": "93434",
    "end": "99210"
  },
  {
    "text": "And... eventually... pushes \nrendering instruction to an SQS queue.",
    "start": "99851",
    "end": "108063"
  },
  {
    "text": "Where we have engine service\nthat are part of the RaaS ecosystem,",
    "start": "108771",
    "end": "113403"
  },
  {
    "text": "pulling in for rendering jobs.",
    "start": "114069",
    "end": "116334"
  },
  {
    "text": "Ah... when they have capacity to do so.",
    "start": "117065",
    "end": "119271"
  },
  {
    "text": "Once a request arrives \ninto the Auto Scaling group,",
    "start": "119879",
    "end": "124595"
  },
  {
    "text": "then, we want to have the quickest response\nas possible, from the rendering engine.",
    "start": "125273",
    "end": "132934"
  },
  {
    "text": "So, we immediately respond to an SQS queue.",
    "start": "133697",
    "end": "139275"
  },
  {
    "text": "Ah... which the same \nLambda function invocation pulls from.",
    "start": "139788",
    "end": "144174"
  },
  {
    "text": "Ah... and from that moment on,\nwe have a link to a Playlist file.",
    "start": "145093",
    "end": "150743"
  },
  {
    "text": "That Playlist file contains \nlinks to video segments,",
    "start": "153626",
    "end": "157239"
  },
  {
    "text": "that the rendering engine uploads to S3.",
    "start": "157239",
    "end": "160475"
  },
  {
    "text": "So, when the player on the mobile device,",
    "start": "160827",
    "end": "163752"
  },
  {
    "text": "or PC device, asks for \nthis video segment to show,",
    "start": "163752",
    "end": "169325"
  },
  {
    "text": "then, the link to CloudFront,\nactually pulls from the origin,",
    "start": "169716",
    "end": "174943"
  },
  {
    "text": "a video segment and plays it to the user.",
    "start": "174943",
    "end": "178435"
  },
  {
    "text": "So, your video rendering is basically,\nbased entirely on Spot instances.",
    "start": "179788",
    "end": "186245"
  },
  {
    "text": "How do you manage high availability?",
    "start": "186245",
    "end": "188362"
  },
  {
    "text": "So, there's two aspects to maintain\nthis high availability over our service.",
    "start": "188593",
    "end": "194178"
  },
  {
    "text": "First one, we're creating instances \nacross multiple availability zones.",
    "start": "194621",
    "end": "199994"
  },
  {
    "text": "Ah... second thing, is,\n we try to to diversify instance types,",
    "start": "200485",
    "end": "205292"
  },
  {
    "text": "inside the Auto Scaling group,\n as much as possible.",
    "start": "205990",
    "end": "208350"
  },
  {
    "text": "So, the combination of both,",
    "start": "208900",
    "end": "212762"
  },
  {
    "text": "ah... spreading instances across \nmultiple availability zones,",
    "start": "212762",
    "end": "217353"
  },
  {
    "text": "and having diversified instance types,",
    "start": "217789",
    "end": "220933"
  },
  {
    "text": "provides us with high availability,\neven when using Spot instances.",
    "start": "220933",
    "end": "224686"
  },
  {
    "text": "How do you handle the \ntwo-minute Spot interruption notice,",
    "start": "225563",
    "end": "228212"
  },
  {
    "text": "while rendering video jobs?",
    "start": "228212",
    "end": "230432"
  },
  {
    "text": "So, that's a great question.",
    "start": "231072",
    "end": "232122"
  },
  {
    "text": "Well, we built a mechanism for \nSpot instance interruptions,",
    "start": "232122",
    "end": "237138"
  },
  {
    "text": "where CloudWatch notifies a Lambda function,\nvia CloudWatch event,",
    "start": "237408",
    "end": "242974"
  },
  {
    "text": "that a certain instance ID,\n is about to be taken.",
    "start": "242974",
    "end": "247031"
  },
  {
    "text": "That Lambda function... interacts with\nthat instance, via an API code,",
    "start": "247549",
    "end": "254265"
  },
  {
    "text": "telling that instance, specifically,\nto stop pulling requests or rendering requests",
    "start": "254266",
    "end": "259665"
  },
  {
    "text": "from the queue and kind of drain out\nthe current jobs that it already renders.",
    "start": "259666",
    "end": "265904"
  },
  {
    "text": "Ah... because our engine service\n is highly efficient, we have high certainty,",
    "start": "265904",
    "end": "272854"
  },
  {
    "text": "that the rendering job would finish\nbefore the 2-minutes timeout will exceed.",
    "start": "272854",
    "end": "280307"
  },
  {
    "text": "And, once the API for the instance \nto stop taking jobs from the queue,",
    "start": "280763",
    "end": "288423"
  },
  {
    "text": "is finished, we detach the instance \nfrom the other scaling group.",
    "start": "288423",
    "end": "291564"
  },
  {
    "text": "Makes sense. \nWhat is the scale, it currently,",
    "start": "292590",
    "end": "295416"
  },
  {
    "text": "'Rendering as a Service' supports?",
    "start": "295416",
    "end": "297956"
  },
  {
    "text": "So, we generate billions of videos yearly.",
    "start": "297956",
    "end": "302804"
  },
  {
    "text": "Millions of videos daily.",
    "start": "302804",
    "end": "304985"
  },
  {
    "text": "Ah... in order to have high availability,\nhighly available service,",
    "start": "305320",
    "end": "310585"
  },
  {
    "text": "we have a scaling mechanism that we built,",
    "start": "311021",
    "end": "315587"
  },
  {
    "text": "that is reliant on CloudWatch metrics\nthat are pushed from the rendering instances,",
    "start": "315587",
    "end": "322492"
  },
  {
    "text": "and consumed by a Lambda function, \nthat is triggered by a Step Function,",
    "start": "322492",
    "end": "328323"
  },
  {
    "text": "every 15 seconds.",
    "start": "328323",
    "end": "329876"
  },
  {
    "text": "Ah... when we calculate that, \nwe don't have, or we expect",
    "start": "330257",
    "end": "337084"
  },
  {
    "text": "higher traffic coming in, \nthe Lambda function interacts with",
    "start": "337084",
    "end": "342406"
  },
  {
    "text": "the Auto Scaling group, telling it to increase",
    "start": "342406",
    "end": "345957"
  },
  {
    "text": "the amount of instances \nthat is currently in service.",
    "start": "345957",
    "end": "348583"
  },
  {
    "text": "Great. It looks like you built a highly \navailable cost-efficient and scalable service.",
    "start": "350069",
    "end": "356104"
  },
  {
    "text": "What are the next steps for you?",
    "start": "356104",
    "end": "357887"
  },
  {
    "text": "So, we want to make use of a recent feature,\nannounced by AWS ASG,",
    "start": "358575",
    "end": "362748"
  },
  {
    "text": "where we can map specific instance types, \nfor specific weights.",
    "start": "363091",
    "end": "368496"
  },
  {
    "text": "That way our scaling mechanism\ncan interact with the other scaling group,",
    "start": "369092",
    "end": "373002"
  },
  {
    "text": "using weights which is \nmore suitable for rendering,",
    "start": "373002",
    "end": "376915"
  },
  {
    "text": "for representing rendering capacity,",
    "start": "376915",
    "end": "378752"
  },
  {
    "text": "that is currently required \nunder the load of the farm.",
    "start": "378752",
    "end": "382696"
  },
  {
    "text": "Thank you for sharing that with us.",
    "start": "382696",
    "end": "385007"
  },
  {
    "text": "And, thank you for watching\n'This is My Architecture.'",
    "start": "385525",
    "end": "388138"
  }
]