[
  {
    "start": "0",
    "end": "80000"
  },
  {
    "text": "good morning everyone I think we're gonna get started thanks for coming on a",
    "start": "60",
    "end": "6420"
  },
  {
    "text": "Friday morning so with the recent advances in natural language",
    "start": "6420",
    "end": "13080"
  },
  {
    "text": "understanding and speech recognition it's become fairly easy to add a",
    "start": "13080",
    "end": "19470"
  },
  {
    "text": "conversational interface to your application so once you build that",
    "start": "19470",
    "end": "25590"
  },
  {
    "text": "conversational interface the question then becomes how do you make it",
    "start": "25590",
    "end": "30990"
  },
  {
    "text": "available to your users so one way is to",
    "start": "30990",
    "end": "36360"
  },
  {
    "text": "just add this conversational interface to your existing mobile or web",
    "start": "36360",
    "end": "42629"
  },
  {
    "text": "applications but I think you know that really the true potential of a conversational interface is realized",
    "start": "42629",
    "end": "49219"
  },
  {
    "text": "when you add that interface to an existing platform like Facebook",
    "start": "49219",
    "end": "56100"
  },
  {
    "text": "Messenger expose it through slack or",
    "start": "56100",
    "end": "61190"
  },
  {
    "text": "expose it through messaging through by a text messaging through Twilio SMS and so",
    "start": "61190",
    "end": "68760"
  },
  {
    "text": "on and so forth so your users don't even have to install an app to get access to",
    "start": "68760",
    "end": "74850"
  },
  {
    "text": "your business logic and your application backends so in this session we're gonna",
    "start": "74850",
    "end": "82770"
  },
  {
    "start": "80000",
    "end": "163000"
  },
  {
    "text": "talk about building a sophisticated",
    "start": "82770",
    "end": "88380"
  },
  {
    "text": "reliable and scalable conversational interface and we're also going to talk",
    "start": "88380",
    "end": "94890"
  },
  {
    "text": "about how to build integrations into third party platforms so as an example",
    "start": "94890",
    "end": "106250"
  },
  {
    "text": "we're gonna use Skype as one of the third party platforms within Amazon Lexx",
    "start": "106250",
    "end": "114950"
  },
  {
    "text": "there are built-in integrations available right now there are few",
    "start": "114950",
    "end": "120750"
  },
  {
    "text": "integrations available but this will be useful for people trying to build custom",
    "start": "120750",
    "end": "126329"
  },
  {
    "text": "integrations and so we're gonna use Skype as an example which is currently",
    "start": "126329",
    "end": "131370"
  },
  {
    "text": "not available through the console and then we're gonna see how we can add",
    "start": "131370",
    "end": "136670"
  },
  {
    "text": "support for voice as well as messaging I'm also going to talk about a couple of",
    "start": "136670",
    "end": "145480"
  },
  {
    "text": "related services within the AWS portfolio AWS lamda and API gateway",
    "start": "145480",
    "end": "152950"
  },
  {
    "text": "especially APM AWS lamda since lambdas is closely interconnected with with",
    "start": "152950",
    "end": "159709"
  },
  {
    "text": "Amazon Lex so let's get started before I",
    "start": "159709",
    "end": "166370"
  },
  {
    "start": "163000",
    "end": "296000"
  },
  {
    "text": "jump into the solution and the specific and the details let's talk about conversational interfaces and why",
    "start": "166370",
    "end": "172100"
  },
  {
    "text": "they're so why is this such a fundamental shift in our industry so if",
    "start": "172100",
    "end": "177500"
  },
  {
    "text": "you think about it you have traditionally you've had you know your",
    "start": "177500",
    "end": "182630"
  },
  {
    "text": "data and logic residing in the backend and you expose that to your end-users through a graphical user interface or",
    "start": "182630",
    "end": "188840"
  },
  {
    "text": "GUI now with these advancements in in natural language understanding speech",
    "start": "188840",
    "end": "194870"
  },
  {
    "text": "recognition this has become possible where you can easily build this",
    "start": "194870",
    "end": "203090"
  },
  {
    "text": "conversational interface and what does",
    "start": "203090",
    "end": "208760"
  },
  {
    "text": "what does that do so what it does is it exposes your application to your users",
    "start": "208760",
    "end": "214820"
  },
  {
    "text": "where your users can really interact with it in a very natural way right and",
    "start": "214820",
    "end": "222010"
  },
  {
    "text": "if you think about it right now it's it's easy to build these conversational",
    "start": "222010",
    "end": "227750"
  },
  {
    "text": "interfaces to your applications and you can really delight the users right now because they won't be expecting this",
    "start": "227750",
    "end": "234019"
  },
  {
    "text": "right but as is the case in technology pretty soon we're gonna be at a point",
    "start": "234019",
    "end": "240200"
  },
  {
    "text": "where your customers are just gonna expect a conversational interface some kind of conversational interface to your",
    "start": "240200",
    "end": "246380"
  },
  {
    "text": "application so it's it's it's a great time to get started in this the main aw",
    "start": "246380",
    "end": "254299"
  },
  {
    "text": "service that that provides this capability lets you build these",
    "start": "254299",
    "end": "259850"
  },
  {
    "text": "conversational interfaces is Amazon Lex we'll talk about that but Before we jump",
    "start": "259850",
    "end": "267770"
  },
  {
    "text": "into it Amazon Lex lets you provide lets you",
    "start": "267770",
    "end": "273080"
  },
  {
    "text": "build this conversational interface but also gives you the capability to",
    "start": "273080",
    "end": "278389"
  },
  {
    "text": "integrate with fee of the select third-party integrations we have right",
    "start": "278389",
    "end": "284509"
  },
  {
    "text": "now integrations built in the console for slack facebook Messenger Twilio SMS and we",
    "start": "284509",
    "end": "291409"
  },
  {
    "text": "recently added kick messaging as well so",
    "start": "291409",
    "end": "296840"
  },
  {
    "start": "296000",
    "end": "370000"
  },
  {
    "text": "what's so hard why why I mean why do you need Amazon Lex right if you wanted to",
    "start": "296840",
    "end": "303680"
  },
  {
    "text": "build a conversational interface why not go and implement it yourself there are a couple of major non-trivial things that",
    "start": "303680",
    "end": "310069"
  },
  {
    "text": "are going on here first is speech recognition so if your bot or your",
    "start": "310069",
    "end": "318319"
  },
  {
    "text": "conversational interface needs to support voice then you need a mechanism to convert user input from voice into",
    "start": "318319",
    "end": "326330"
  },
  {
    "text": "text well and so an advanced speech recognition engine is very important and",
    "start": "326330",
    "end": "331909"
  },
  {
    "text": "secondly natural language understanding so once you have those words how do you",
    "start": "331909",
    "end": "339409"
  },
  {
    "text": "derive meaning out of it right so these are really non-trivial technologies to",
    "start": "339409",
    "end": "347120"
  },
  {
    "text": "implement yourself and so this is something that comes packed into Amazon",
    "start": "347120",
    "end": "353659"
  },
  {
    "text": "Lex and it's the same technology that powers Alexa and so it's proven it's",
    "start": "353659",
    "end": "361819"
  },
  {
    "text": "scalable thousands of people millions of people use it every day so you know it's",
    "start": "361819",
    "end": "367159"
  },
  {
    "text": "it's it's high-quality so let's dig in a",
    "start": "367159",
    "end": "372979"
  },
  {
    "start": "370000",
    "end": "649000"
  },
  {
    "text": "little bit and look at some of the some of the concepts within Amazon Lex how",
    "start": "372979",
    "end": "380300"
  },
  {
    "text": "many of you in this room the show of hands have used Amazon Lex just to give me an idea okay",
    "start": "380300",
    "end": "386110"
  },
  {
    "text": "so about maybe 40 percent of the room so",
    "start": "386110",
    "end": "391460"
  },
  {
    "text": "for those of you I haven't haven't looked at Lex I haven't used it",
    "start": "391460",
    "end": "396780"
  },
  {
    "text": "there are a few different concepts that you need to be aware before interacting with the console it's it's fairly it's a",
    "start": "396780",
    "end": "402729"
  },
  {
    "text": "fairly simple service and I think the best way to explain all these concepts is to take the analogy of a graphical",
    "start": "402729",
    "end": "410650"
  },
  {
    "text": "user interface or GUI GUI interface right so the first is is your intense",
    "start": "410650",
    "end": "419650"
  },
  {
    "text": "and intense is essentially your top level menu so if you think about it in a",
    "start": "419650",
    "end": "426130"
  },
  {
    "text": "GUI you have a top level menu and intense is essentially that it's if you",
    "start": "426130",
    "end": "431919"
  },
  {
    "text": "are building a bot what is the top menu of options that you're gonna provide your users and so in this example we",
    "start": "431919",
    "end": "438759"
  },
  {
    "text": "have a travel booking bot that I'll be you know I'll be using as an example throughout the session and so in a",
    "start": "438759",
    "end": "445509"
  },
  {
    "text": "travel agency or a company like travel",
    "start": "445509",
    "end": "451300"
  },
  {
    "text": "agent a travel booking agency you'll have intense such as book a hotel book a room or book a flight right and so",
    "start": "451300",
    "end": "459669"
  },
  {
    "text": "intense map through a top-level menu the next is utterances what is your end user",
    "start": "459669",
    "end": "466630"
  },
  {
    "text": "going to say that's gonna map do these intents so clicking or hovering over a",
    "start": "466630",
    "end": "472690"
  },
  {
    "text": "menu right that isn't it that is essentially an utterance the utterance",
    "start": "472690",
    "end": "478810"
  },
  {
    "text": "is a spoken word within Lex that map's to a certain intent and so you define a",
    "start": "478810",
    "end": "484360"
  },
  {
    "text": "bunch of intense and for each intent you define a bunch of sample utterances that",
    "start": "484360",
    "end": "489909"
  },
  {
    "text": "your users can say or you expect them to say and the Amazon Lex back-end engine",
    "start": "489909",
    "end": "496030"
  },
  {
    "text": "then extrapolates that so just think about that you know while in legacy BOTS",
    "start": "496030",
    "end": "501099"
  },
  {
    "text": "you'll have you had to hard code all these these entrances here you give us a",
    "start": "501099",
    "end": "506860"
  },
  {
    "text": "few sample utterances and the backend engine actually extrapolates from that so there could be tens or hundreds of",
    "start": "506860",
    "end": "513099"
  },
  {
    "text": "ways users can say a user can say that hey I want to book a hotel or book a",
    "start": "513099",
    "end": "518169"
  },
  {
    "text": "hotel room for me and the back-end engine actually is able to decipher meaning out of it",
    "start": "518169",
    "end": "524339"
  },
  {
    "text": "next it slots so going back to our analogy of GUI slots is nothing more",
    "start": "524339",
    "end": "530180"
  },
  {
    "text": "than form fields essentially once the intent is recognized the Lexx engine",
    "start": "530180",
    "end": "537320"
  },
  {
    "text": "goes into an interview mode and it gathers all these fields our web form",
    "start": "537320",
    "end": "543350"
  },
  {
    "text": "fields essentially that are referred to as slots within within Lex and finally",
    "start": "543350",
    "end": "548810"
  },
  {
    "text": "in order to fulfill the the request from the user we give you the capability to",
    "start": "548810",
    "end": "555290"
  },
  {
    "text": "define a code into AWS lambda and AWS lambda as as you know is our",
    "start": "555290",
    "end": "560560"
  },
  {
    "text": "event-driven server less compute service that lets you define functions and you",
    "start": "560560",
    "end": "567680"
  },
  {
    "text": "can integrate Amazon Lex with with the function and you can say ok once I have",
    "start": "567680",
    "end": "573110"
  },
  {
    "text": "all these fields filled out call my called my function and that's where your",
    "start": "573110",
    "end": "579080"
  },
  {
    "text": "business logic resides and you can fulfill the request from the user one",
    "start": "579080",
    "end": "585649"
  },
  {
    "text": "thing I should point out is this go would hook is not just for fulfillment but every time you receive a message",
    "start": "585649",
    "end": "593089"
  },
  {
    "text": "into Lex it calls a cord hole cord hook and that's called a validation code hook",
    "start": "593089",
    "end": "598339"
  },
  {
    "text": "as well so for example if you're trying to gather an email address from a user",
    "start": "598339",
    "end": "605860"
  },
  {
    "text": "you ask for their email address and they provide you that email address a cord",
    "start": "605860",
    "end": "611209"
  },
  {
    "text": "hook call is called into eight of these lambda where you can have a validation function that validates whether it's",
    "start": "611209",
    "end": "616970"
  },
  {
    "text": "it's a valid email or not and there are a few different slot types that are",
    "start": "616970",
    "end": "623990"
  },
  {
    "text": "built in and if you use Alexis skills most of those slot types are available",
    "start": "623990",
    "end": "629930"
  },
  {
    "text": "in in Amazon Lex as well so you can take advantage advantage of stuff like you",
    "start": "629930",
    "end": "637130"
  },
  {
    "text": "know hey I want a book hotel room tomorrow and it'll drive the actual date for tomorrow automatically so again a",
    "start": "637130",
    "end": "644480"
  },
  {
    "text": "very natural way to interact with your user and so let's look at a look at our",
    "start": "644480",
    "end": "652700"
  },
  {
    "start": "649000",
    "end": "855000"
  },
  {
    "text": "actual example and so for example you know same continuing with the same",
    "start": "652700",
    "end": "657829"
  },
  {
    "text": "example we have a we have a bot that books a hotel the user says",
    "start": "657829",
    "end": "664010"
  },
  {
    "text": "I want to book a hotel in NYC and the first thing it hits is the automatic",
    "start": "664010",
    "end": "670580"
  },
  {
    "text": "speech recognition engine since this is an audio input and so the automatic",
    "start": "670580",
    "end": "676340"
  },
  {
    "text": "speech recognition engine converts the voice into a set of words and those set",
    "start": "676340",
    "end": "682760"
  },
  {
    "text": "of words are fed into our natural language understanding and LU engine and",
    "start": "682760",
    "end": "688510"
  },
  {
    "text": "the NLU engine then the ciphers extracts meaning out of those set of words and in",
    "start": "688510",
    "end": "698360"
  },
  {
    "text": "this case it has deciphered two pieces of information first what is the user's intent so I know that",
    "start": "698360",
    "end": "707120"
  },
  {
    "text": "the user wants to book a hotel and secondly one of the slot values is",
    "start": "707120",
    "end": "712700"
  },
  {
    "text": "detected because the users saying hey I want to book a hotel in NYC I can",
    "start": "712700",
    "end": "719840"
  },
  {
    "text": "recognize that the user is referring to New York City and that that is a",
    "start": "719840",
    "end": "726770"
  },
  {
    "text": "capability that's sort of available you know naturally within within Lex and so",
    "start": "726770",
    "end": "733700"
  },
  {
    "text": "we already have one of the slot values filled out and so Lex will then go into",
    "start": "733700",
    "end": "739460"
  },
  {
    "text": "sort of an interview mode and gather the rest of of the two fields and so now we",
    "start": "739460",
    "end": "747350"
  },
  {
    "text": "have City check-in and check-out and we have all the three fields that are necessary to fulfill this this this",
    "start": "747350",
    "end": "756050"
  },
  {
    "text": "request from the user and so we send a confirmation message back to the user",
    "start": "756050",
    "end": "763810"
  },
  {
    "text": "user says yes no and you know the yes/no intent is automatically also supported",
    "start": "763810",
    "end": "770000"
  },
  {
    "text": "within Amazon Lex and so if the user says yes we process the the fulfillment",
    "start": "770000",
    "end": "778250"
  },
  {
    "text": "request within AWS lambda and we send this this confirmation back now this",
    "start": "778250",
    "end": "785000"
  },
  {
    "text": "confirmation is is is coming back in text form and since the user interacted",
    "start": "785000",
    "end": "791570"
  },
  {
    "text": "with us in through voice we want a mechanism to convert this into voice",
    "start": "791570",
    "end": "797220"
  },
  {
    "text": "and this is something that's sort of integrated into the Lexx console but",
    "start": "797220",
    "end": "803370"
  },
  {
    "text": "essentially Lex is calling another service it's using our another service called Amazon poly that converts that's",
    "start": "803370",
    "end": "811740"
  },
  {
    "text": "our text-to-speech service now if you were to build this solution within",
    "start": "811740",
    "end": "817770"
  },
  {
    "text": "Amazon Lex you have it you wouldn't have to use Amazon poly separately because it's sort of integrated into Lex but if",
    "start": "817770",
    "end": "824520"
  },
  {
    "text": "you had other applications such as an IVR where you needed text-to-speech support Amazon poly is a very very",
    "start": "824520",
    "end": "831600"
  },
  {
    "text": "powerful service high quality supports many different voices and dialects and",
    "start": "831600",
    "end": "837180"
  },
  {
    "text": "many different languages for text-to-speech and you can define custom",
    "start": "837180",
    "end": "843240"
  },
  {
    "text": "pronunciation within amazon poly as well",
    "start": "843240",
    "end": "848720"
  },
  {
    "text": "so the response goes back to the user and voice format here so that's how a",
    "start": "848720",
    "end": "856850"
  },
  {
    "start": "855000",
    "end": "896000"
  },
  {
    "text": "complete end-to-end message works now let's look at AWS lambda for those of",
    "start": "856850",
    "end": "862020"
  },
  {
    "text": "you are not familiar I'm not gonna spend too much time on on this AWS lambda is",
    "start": "862020",
    "end": "868230"
  },
  {
    "text": "our event-driven serverless service essentially you define a",
    "start": "868230",
    "end": "873420"
  },
  {
    "text": "function and you can run that function and that function is invoked either",
    "start": "873420",
    "end": "881070"
  },
  {
    "text": "manually or through through an event trigger that you define and we have about seventeen or eighteen different",
    "start": "881070",
    "end": "886800"
  },
  {
    "text": "integrations and two other AWS services that can trigger a lambda function so it's really well integrated into the AWS",
    "start": "886800",
    "end": "894480"
  },
  {
    "text": "platform look at let's look at a few of the lambda components you have a",
    "start": "894480",
    "end": "900300"
  },
  {
    "start": "896000",
    "end": "953000"
  },
  {
    "text": "functions like I said there's support for many different languages python nodejs java and so you can write your",
    "start": "900300",
    "end": "910770"
  },
  {
    "text": "function and you're like the in the language of your choice you define an event source the lambda service then",
    "start": "910770",
    "end": "920970"
  },
  {
    "text": "make sure that your that your function is going to run in a reliable way and it",
    "start": "920970",
    "end": "927810"
  },
  {
    "text": "scales automatically so you don't have do anything about scaling and resiliency",
    "start": "927810",
    "end": "933280"
  },
  {
    "text": "and then that you have the you have the choice of running your functions either",
    "start": "933280",
    "end": "939880"
  },
  {
    "text": "outside of EPC or inside your own DPC as well and so for those of you who are",
    "start": "939880",
    "end": "945860"
  },
  {
    "text": "conscious about security you can run your lambda function within a V PC as",
    "start": "945860",
    "end": "950990"
  },
  {
    "text": "well another service that actually I'm gonna use as part of this solution is",
    "start": "950990",
    "end": "958940"
  },
  {
    "start": "953000",
    "end": "998000"
  },
  {
    "text": "Amazon API gateway the API gateway is a very powerful service to make an API",
    "start": "958940",
    "end": "965950"
  },
  {
    "text": "endpoint available to your end users or to your partners that that can actually",
    "start": "965950",
    "end": "973370"
  },
  {
    "text": "then call your api's now it has a lot of advanced functionality like you can",
    "start": "973370",
    "end": "979070"
  },
  {
    "text": "define throttles you can implement security on your API you can monitor",
    "start": "979070",
    "end": "986180"
  },
  {
    "text": "your your ApS or a lot of advanced functionality but in this solution that I'm gonna be talking about today I am",
    "start": "986180",
    "end": "993400"
  },
  {
    "text": "NOT gonna configure most of these advanced features and so if you if we",
    "start": "993400",
    "end": "999950"
  },
  {
    "start": "998000",
    "end": "1080000"
  },
  {
    "text": "look at if you take a look at the the GUI for the API gateway essentially",
    "start": "999950",
    "end": "1005800"
  },
  {
    "text": "you're defining your pads for the API and for each path then you're defined",
    "start": "1005800",
    "end": "1011890"
  },
  {
    "text": "the different HTTP or HTTPS methods on the left hand side on the right hand",
    "start": "1011890",
    "end": "1017470"
  },
  {
    "text": "side of the screen you'll see a test harness so that's a that's a super awesome capability within both API",
    "start": "1017470",
    "end": "1025329"
  },
  {
    "text": "gateway and lambda that there's an integrated test harness and so for everything that you're defined you can",
    "start": "1025329",
    "end": "1031480"
  },
  {
    "text": "you can define a test harness and then test your code and your functionality",
    "start": "1031480",
    "end": "1036938"
  },
  {
    "text": "and so the other four boxes are essentially a configuration advanced",
    "start": "1036939",
    "end": "1043449"
  },
  {
    "text": "configuration where you're defining the input format what how do you want to",
    "start": "1043449",
    "end": "1049510"
  },
  {
    "text": "transfer the transport that sort excuse me transform that and then and",
    "start": "1049510",
    "end": "1056620"
  },
  {
    "text": "then what back-end compute service you're gonna use to pass this request",
    "start": "1056620",
    "end": "1061929"
  },
  {
    "text": "along and the same goes further spawns as well how do I want to read how do I want to convert the the response",
    "start": "1061929",
    "end": "1071760"
  },
  {
    "text": "reformat the response and what's my actual response format going to be that's but that's what's be configured",
    "start": "1071760",
    "end": "1078880"
  },
  {
    "text": "here so let's look at the actual example",
    "start": "1078880",
    "end": "1086289"
  },
  {
    "start": "1080000",
    "end": "1111000"
  },
  {
    "text": "and so in this example I'll be I've created a solution and though the whole",
    "start": "1086289",
    "end": "1092500"
  },
  {
    "text": "solution and the step-by-step instructions are on github and I'll be sharing the link for that at the end of",
    "start": "1092500",
    "end": "1097600"
  },
  {
    "text": "the presentation and so Skype is one of the third-party",
    "start": "1097600",
    "end": "1105130"
  },
  {
    "text": "apps has a huge user base but we don't provide a built-in integration and so",
    "start": "1105130",
    "end": "1111899"
  },
  {
    "start": "1111000",
    "end": "1297000"
  },
  {
    "text": "let's look take a look at what this architecture is going to look like so we",
    "start": "1111899",
    "end": "1117370"
  },
  {
    "text": "have an end user that sends in a message and because the Skype is owned by Microsoft Microsoft has this framework",
    "start": "1117370",
    "end": "1124269"
  },
  {
    "text": "called the bot framework and that's where we're going to be defining our bot",
    "start": "1124269",
    "end": "1130260"
  },
  {
    "text": "and so we define a bought and configure it with a web hook address that's you",
    "start": "1130260",
    "end": "1138399"
  },
  {
    "text": "know that points to our API gateway that",
    "start": "1138399",
    "end": "1144130"
  },
  {
    "text": "API gateway then forwards that request on to our lambda function and the lambda",
    "start": "1144130",
    "end": "1151570"
  },
  {
    "text": "function here if you are sort of using Lex and you have a simple solution maybe",
    "start": "1151570",
    "end": "1160000"
  },
  {
    "text": "you have a single bot and you don't need a lot of integration then you probably",
    "start": "1160000",
    "end": "1165100"
  },
  {
    "text": "don't want to build this solution so this is really for integrating with third-party apps that aren't supported",
    "start": "1165100",
    "end": "1170490"
  },
  {
    "text": "and also for advanced routing so let's say you have a conversational interface",
    "start": "1170490",
    "end": "1175690"
  },
  {
    "text": "that consists of multiple specialized BOTS or you have a few bots that that",
    "start": "1175690",
    "end": "1181210"
  },
  {
    "text": "are implemented in in Amazon Lex and and there are other specialized bots that are that you have implemented or you're",
    "start": "1181210",
    "end": "1187570"
  },
  {
    "text": "using third-party bought services outside of AWS and so this provides you",
    "start": "1187570",
    "end": "1194889"
  },
  {
    "text": "with a routing capability as well advanced routing keep it because you've in this solution that",
    "start": "1194889",
    "end": "1200530"
  },
  {
    "text": "building is a layer in right in front of Amazon legs as well and so that so the",
    "start": "1200530",
    "end": "1208330"
  },
  {
    "text": "message goes through AWS the lambda function that we have defined goes to",
    "start": "1208330",
    "end": "1213430"
  },
  {
    "text": "Lex and Lex responds back and so let's",
    "start": "1213430",
    "end": "1218560"
  },
  {
    "text": "take a look at an example architecture here where I have multiple specialized",
    "start": "1218560",
    "end": "1224350"
  },
  {
    "text": "BOTS as part of my conversational interface right I'm running a travel agency I'm saying you know I need a",
    "start": "1224350",
    "end": "1231490"
  },
  {
    "text": "cruise booking bot that's super specialized and knows everything about",
    "start": "1231490",
    "end": "1236560"
  },
  {
    "text": "cruise booking and I have flight booking bought and so on and so forth and what I've done is here is I've designated a",
    "start": "1236560",
    "end": "1244780"
  },
  {
    "text": "concierge boy so the initial message comes in and the user says I want to",
    "start": "1244780",
    "end": "1251890"
  },
  {
    "text": "book a cruise and that goes to the concierge but which sort of detects the intent that hey this is probably a",
    "start": "1251890",
    "end": "1258460"
  },
  {
    "text": "message or a conversation that needs to happen with my cruise booking specialized bot what I do here is I talk",
    "start": "1258460",
    "end": "1266980"
  },
  {
    "text": "to dynamodb and perhaps I want to persist this session and I want to say",
    "start": "1266980",
    "end": "1272620"
  },
  {
    "text": "ok this is a conversation that that's meant for meant for the cruise booking",
    "start": "1272620",
    "end": "1278320"
  },
  {
    "text": "bought and so any following message is going to go to the cruise booking abroad",
    "start": "1278320",
    "end": "1284740"
  },
  {
    "text": "so that's just a simple example that you can really implement a very powerful",
    "start": "1284740",
    "end": "1292060"
  },
  {
    "text": "solution using this this sort of architecture",
    "start": "1292060",
    "end": "1296580"
  },
  {
    "start": "1297000",
    "end": "1343000"
  },
  {
    "text": "all right so we'll well let's go into the into the step-by-step process that",
    "start": "1297510",
    "end": "1303190"
  },
  {
    "text": "is involved in order to create this architecture so the first thing I need",
    "start": "1303190",
    "end": "1309640"
  },
  {
    "text": "to do step number one is first Skype or for any other service you'd have to go",
    "start": "1309640",
    "end": "1316180"
  },
  {
    "text": "to the actual provider and see what their API how they expose their API and",
    "start": "1316180",
    "end": "1321460"
  },
  {
    "text": "so in this case Microsoft is exposing their API through their broad framework",
    "start": "1321460",
    "end": "1326800"
  },
  {
    "text": "and they also have a bot SDK so I'll be utilizing both the broad framework and the address is",
    "start": "1326800",
    "end": "1333510"
  },
  {
    "text": "right there so I go and sign in with my credentials that create a bot and my bot",
    "start": "1333510",
    "end": "1338970"
  },
  {
    "text": "is called talk to Lex and then I say",
    "start": "1338970",
    "end": "1344310"
  },
  {
    "start": "1343000",
    "end": "1379000"
  },
  {
    "text": "okay since this is a bot that's gonna be in in Amazon Lex and I'm gonna be using",
    "start": "1344310",
    "end": "1349950"
  },
  {
    "text": "the SDK I specify that and then I go into the configuration and for the",
    "start": "1349950",
    "end": "1356310"
  },
  {
    "text": "configuration this is pretty standard any API that you're gonna interact with should have a security mechanism so I go",
    "start": "1356310",
    "end": "1366030"
  },
  {
    "text": "ahead and create my Microsoft app ID and password to authenticate to make sure",
    "start": "1366030",
    "end": "1371280"
  },
  {
    "text": "that my endpoint can only receive messages from the from the bought framework and nobody else can overwhelm",
    "start": "1371280",
    "end": "1378420"
  },
  {
    "text": "my endpoint and so I create the the app password next step is in order to test",
    "start": "1378420",
    "end": "1386250"
  },
  {
    "start": "1379000",
    "end": "1417000"
  },
  {
    "text": "this bought in a desktop client or a web client you need to have this added to",
    "start": "1386250",
    "end": "1393480"
  },
  {
    "text": "your contacts so that's this is a very important step minor but important that",
    "start": "1393480",
    "end": "1399840"
  },
  {
    "text": "you'd have to click on this and then add that test bar to your contacts now if",
    "start": "1399840",
    "end": "1406740"
  },
  {
    "text": "you open up your skype client that a test bot is going to be there but it's",
    "start": "1406740",
    "end": "1412890"
  },
  {
    "text": "not gonna do anything so we will go on and we will give it some intelligence and so in this solution since this is an",
    "start": "1412890",
    "end": "1420420"
  },
  {
    "start": "1417000",
    "end": "1512000"
  },
  {
    "text": "advanced session I've already created a travel book a I'm using one of the",
    "start": "1420420",
    "end": "1425570"
  },
  {
    "text": "Amazon Lex travel booking example BOTS so I've built the bought in in Amazon",
    "start": "1425570",
    "end": "1432300"
  },
  {
    "text": "Lex and you can if you go and sign into the Amazon Lex console you can very easily get started with that example bot",
    "start": "1432300",
    "end": "1438390"
  },
  {
    "text": "so I'm not gonna spend time on on how to create the Amazon Lex bot itself since",
    "start": "1438390",
    "end": "1444180"
  },
  {
    "text": "that's you know that's you can there's a wizard in your face that guides you through that and so the next step in",
    "start": "1444180",
    "end": "1452640"
  },
  {
    "text": "integrating this is to define my eye and role and so with it when you're working",
    "start": "1452640",
    "end": "1457890"
  },
  {
    "text": "in AWS by default one service talking to another one service using another",
    "start": "1457890",
    "end": "1464370"
  },
  {
    "text": "services is not permitted so you have to explicitly grant permission for one",
    "start": "1464370",
    "end": "1469559"
  },
  {
    "text": "service to use another AWS service on your behalf and so in this step what I'm",
    "start": "1469559",
    "end": "1476309"
  },
  {
    "text": "essentially doing is I'm giving AWS lamda permission to do two things and if",
    "start": "1476309",
    "end": "1482220"
  },
  {
    "text": "you look at on the right hand side there's that iam statement it's it is",
    "start": "1482220",
    "end": "1489029"
  },
  {
    "text": "sort of involved but essentially it's just doing two things it's it's allowing",
    "start": "1489029",
    "end": "1494309"
  },
  {
    "text": "my lambda function to write two CloudWatch logs number one and number two it's allowing lambda to use the post",
    "start": "1494309",
    "end": "1502919"
  },
  {
    "text": "text API for Amazon Lex and so I define",
    "start": "1502919",
    "end": "1508379"
  },
  {
    "text": "that and I create a rule using this policy and I move on to my next step and",
    "start": "1508379",
    "end": "1515100"
  },
  {
    "start": "1512000",
    "end": "1677000"
  },
  {
    "text": "this is sort of the meat of the solution where I'm creating the actual lambda",
    "start": "1515100",
    "end": "1521909"
  },
  {
    "text": "function that that that has my has my custom logic for the front end in front",
    "start": "1521909",
    "end": "1528779"
  },
  {
    "text": "of Amazon Lex here I can implement my routing of messages how I want the",
    "start": "1528779",
    "end": "1534989"
  },
  {
    "text": "routing to work between different maybe specialized BOTS and so on and so forth and so the first thing I do is I make",
    "start": "1534989",
    "end": "1540749"
  },
  {
    "text": "sure that any kind of credentials I don't want to put that them into the",
    "start": "1540749",
    "end": "1546539"
  },
  {
    "text": "code right that's just not a good practice so I define a few environment",
    "start": "1546539",
    "end": "1553830"
  },
  {
    "text": "variables where I put in my security credentials secondly any kind of",
    "start": "1553830",
    "end": "1559470"
  },
  {
    "text": "variables that I don't want a hard code like the bot name and the alias I use environment variables for that as well",
    "start": "1559470",
    "end": "1567980"
  },
  {
    "text": "and so so I create the environment variables next thing I do is I pick out",
    "start": "1568409",
    "end": "1575879"
  },
  {
    "text": "the right execution roll the execution roll that I defined in the last step and then I go ahead and I implement the code",
    "start": "1575879",
    "end": "1584249"
  },
  {
    "text": "and this is you know don't get scared I mean it's it's not very complicated it's just implemented in ogs and essentially",
    "start": "1584249",
    "end": "1592139"
  },
  {
    "text": "what I'm doing is I'm using two different libraries and SDKs one is the",
    "start": "1592139",
    "end": "1597240"
  },
  {
    "text": "bot builder library for no GS from from Microsoft and the",
    "start": "1597240",
    "end": "1602530"
  },
  {
    "text": "other one is that the AWS SDK that we provide you for easier access into into",
    "start": "1602530",
    "end": "1608350"
  },
  {
    "text": "the AWS api's I'm creating a connector and I'm simply taking a message that",
    "start": "1608350",
    "end": "1616300"
  },
  {
    "text": "comes in from Skype extract that message out and send it out to the Lexx runtime",
    "start": "1616300",
    "end": "1623140"
  },
  {
    "text": "as alex has these two different higher-level api's it's the API is the",
    "start": "1623140",
    "end": "1630280"
  },
  {
    "text": "runtime and the board creation API mode creation is where you can automatically",
    "start": "1630280",
    "end": "1635410"
  },
  {
    "text": "create BOTS and configure them by an API and then the runtime is how you interact",
    "start": "1635410",
    "end": "1641680"
  },
  {
    "text": "with Amazon Lex when when you want to interact with the with the Lex bot",
    "start": "1641680",
    "end": "1647710"
  },
  {
    "text": "itself and so over here if you if you see if I could use the pointer here you",
    "start": "1647710",
    "end": "1654580"
  },
  {
    "text": "see this call into the Lex runtime where I'm actually passing on the message",
    "start": "1654580",
    "end": "1660670"
  },
  {
    "text": "that's being received by from from Skype and passing that on to into lambda and",
    "start": "1660670",
    "end": "1667450"
  },
  {
    "text": "and I extract the the response back and send it back so not very complicated",
    "start": "1667450",
    "end": "1674050"
  },
  {
    "text": "simple the implementation the next step is to create an API gate API endpoint",
    "start": "1674050",
    "end": "1682840"
  },
  {
    "start": "1677000",
    "end": "1716000"
  },
  {
    "text": "and I use that I do that using the API gateway now API gateway can be a little bit daunting if you're just getting",
    "start": "1682840",
    "end": "1689440"
  },
  {
    "text": "started with it the easiest way that I found out to",
    "start": "1689440",
    "end": "1695440"
  },
  {
    "text": "reduce the configuration is to use the lambda proxy and so the lambda proxy",
    "start": "1695440",
    "end": "1700720"
  },
  {
    "text": "mode with an API gateway is provided for for exactly these type of solutions",
    "start": "1700720",
    "end": "1705760"
  },
  {
    "text": "where you're integrating api gateway with lambda and so I go into the integration refine a post method and I",
    "start": "1705760",
    "end": "1713650"
  },
  {
    "text": "go into the integration request and once I go into the integration request I can",
    "start": "1713650",
    "end": "1718870"
  },
  {
    "start": "1716000",
    "end": "1760000"
  },
  {
    "text": "just check this checkbox to say okay this is just a lambda proxy I don't want to do advanced modifications through",
    "start": "1718870",
    "end": "1727300"
  },
  {
    "text": "templates and whatnot so there's a lot of functionality within within API gateway the",
    "start": "1727300",
    "end": "1732970"
  },
  {
    "text": "to sort of handle the the various if the two endpoints are not fully compatible",
    "start": "1732970",
    "end": "1739600"
  },
  {
    "text": "and you can do conversions and whatnot and so I don't want to do that so I picked the lambda proxy mode essentially",
    "start": "1739600",
    "end": "1745150"
  },
  {
    "text": "what it's doing is it's just passing along the message and what I get once I",
    "start": "1745150",
    "end": "1750400"
  },
  {
    "text": "deploy this this API is I get a an invoke URL which is an HTTP endpoint and",
    "start": "1750400",
    "end": "1757299"
  },
  {
    "text": "so I take this endpoint and I go back into the bot framework configuration and",
    "start": "1757299",
    "end": "1766240"
  },
  {
    "start": "1760000",
    "end": "1777000"
  },
  {
    "text": "where I I just created the app credentials there's a fields for the messaging endpoint and I go in and",
    "start": "1766240",
    "end": "1773409"
  },
  {
    "text": "configure that in the messaging endpoint so at this point we should have a",
    "start": "1773409",
    "end": "1782500"
  },
  {
    "text": "working solution right so let's take a look at so this is a client that's",
    "start": "1782500",
    "end": "1790150"
  },
  {
    "text": "interacting with Amazon Lex so this is a Skype client that's running on my phone",
    "start": "1790150",
    "end": "1797440"
  },
  {
    "text": "that I've recorded so I so I go and search for that within my context and",
    "start": "1797440",
    "end": "1803620"
  },
  {
    "text": "then I send it a message and so I say I want to book a hotel room in LA and so",
    "start": "1803620",
    "end": "1812530"
  },
  {
    "text": "it's recognizing my intent and it's also recognizing the location and so I've",
    "start": "1812530",
    "end": "1820780"
  },
  {
    "text": "recognized that la is a location so I ask what what day do you want to",
    "start": "1820780",
    "end": "1827500"
  },
  {
    "text": "check-in and I just say tomorrow I don't even have to specify the date the",
    "start": "1827500",
    "end": "1833500"
  },
  {
    "text": "backend automatically the Lex runtime goes and extracts that date out of that and it says okay how many nights again I",
    "start": "1833500",
    "end": "1841210"
  },
  {
    "text": "don't have to specify the number two I can just spell it out like I'm talking to a human and so you see that it kind",
    "start": "1841210",
    "end": "1850179"
  },
  {
    "text": "of extracted the date out of that and so this was run on 1017 and so tomorrow man",
    "start": "1850179",
    "end": "1855760"
  },
  {
    "text": "1018 and it asks me for my confirmation and I can I can mess interact so very",
    "start": "1855760",
    "end": "1864100"
  },
  {
    "text": "quickly you can get started with Lex and you can expose all of this",
    "start": "1864100",
    "end": "1869830"
  },
  {
    "text": "functionality through messaging platforms and voice platforms that are already millions of people's our people",
    "start": "1869830",
    "end": "1876430"
  },
  {
    "text": "are using so you sort of avoid the the app for Digg that's out there",
    "start": "1876430",
    "end": "1882120"
  },
  {
    "text": "so now messaging is great you know it's",
    "start": "1882120",
    "end": "1888480"
  },
  {
    "text": "somewhat easy right what about voice a lot of people like we",
    "start": "1888480",
    "end": "1895750"
  },
  {
    "text": "love messaging but a lot of people still like to call right or they want to talk",
    "start": "1895750",
    "end": "1900880"
  },
  {
    "text": "to someone and there are certain tasks where you actually if even if you're an avid messaging user you want to go if",
    "start": "1900880",
    "end": "1907750"
  },
  {
    "text": "you want to talk to someone and so how do you handle that and so so you have to add support for",
    "start": "1907750",
    "end": "1914590"
  },
  {
    "start": "1909000",
    "end": "2102000"
  },
  {
    "text": "voice as well and the first thing to realize you know a lot of people talk about Amazon necks as as sort of the",
    "start": "1914590",
    "end": "1922890"
  },
  {
    "text": "chat bot service and I think the term chat bot is a little bit misleading and I've that's why I've used conversational",
    "start": "1922890",
    "end": "1929920"
  },
  {
    "text": "interfaces because chat buds implies that you know you're intelligent bot is",
    "start": "1929920",
    "end": "1936160"
  },
  {
    "text": "going to only communicate by a chat and that's not true voice is a big part and",
    "start": "1936160",
    "end": "1941830"
  },
  {
    "text": "people still like to call and so you have to really think about your solution with voice in mind and so Lex can",
    "start": "1941830",
    "end": "1950050"
  },
  {
    "text": "support both voice and text and so for this specific implementation these are",
    "start": "1950050",
    "end": "1956650"
  },
  {
    "text": "some of the things that I learned as I develop the solution first of all for",
    "start": "1956650",
    "end": "1962230"
  },
  {
    "text": "media processing lambda is probably not a good choice and so you'd have to use",
    "start": "1962230",
    "end": "1969090"
  },
  {
    "text": "the combination that the design pattern with ec2 so you have an ec2 instance",
    "start": "1969090",
    "end": "1975760"
  },
  {
    "text": "that's fronted by an e lb and e lb is our elastic load balancer and you",
    "start": "1975760",
    "end": "1981430"
  },
  {
    "text": "generate that end point the URL that I generated using API gateway using the e",
    "start": "1981430",
    "end": "1989320"
  },
  {
    "text": "lb so the y lb points to the ec2 instance and you should always have ec2",
    "start": "1989320",
    "end": "1994600"
  },
  {
    "text": "instances in multiple availability zone make sure that you have a high availability that",
    "start": "1994600",
    "end": "2000100"
  },
  {
    "text": "something that's you don't have to worry about with with API gateway and lambdas since those are served less service and",
    "start": "2000100",
    "end": "2005230"
  },
  {
    "text": "they they handle that for you and so I took that and there's plenty of example",
    "start": "2005230",
    "end": "2010600"
  },
  {
    "text": "code available on the bought builder github for Microsoft so going and use",
    "start": "2010600",
    "end": "2016929"
  },
  {
    "text": "that as the starting point then I use the record dialogue that the bought",
    "start": "2016929",
    "end": "2023110"
  },
  {
    "text": "builder SDK provides and I'm recording the audio and then it's a very crude",
    "start": "2023110",
    "end": "2030640"
  },
  {
    "text": "example but it's just there to show you that this is this can be done it's it's not that hard and you can implement if",
    "start": "2030640",
    "end": "2038590"
  },
  {
    "text": "you're really sophisticated IVR just with this stuff or enhance existing IVRS",
    "start": "2038590",
    "end": "2046360"
  },
  {
    "text": "with machine learning and natural language understanding right so what's",
    "start": "2046360",
    "end": "2054250"
  },
  {
    "text": "different with this solution is yes I'm using the record dialog and then instead",
    "start": "2054250",
    "end": "2060158"
  },
  {
    "text": "of using the post text API I'm using the post content API I specify with it",
    "start": "2060159",
    "end": "2065770"
  },
  {
    "text": "within my HTTP headers the content type the type of audio file that I'll be",
    "start": "2065770",
    "end": "2070868"
  },
  {
    "text": "passing along and then also I'm specifying what I am expecting to accept",
    "start": "2070869",
    "end": "2076780"
  },
  {
    "text": "back so what I'm accepting and what I'm specifying there is that I make I will",
    "start": "2076780",
    "end": "2082960"
  },
  {
    "text": "accept text response and the reason I'm saying that it's just easier to send",
    "start": "2082960",
    "end": "2088300"
  },
  {
    "text": "that response back to the bot framework and let it convert that text into into",
    "start": "2088300",
    "end": "2094388"
  },
  {
    "text": "speech and and then I use this session object that's that's made available",
    "start": "2094389",
    "end": "2099640"
  },
  {
    "text": "through the bot framework and I take my",
    "start": "2099640",
    "end": "2104770"
  },
  {
    "text": "my URL that is exposed by the by the ELB",
    "start": "2104770",
    "end": "2110680"
  },
  {
    "text": "and I configure that over here and and",
    "start": "2110680",
    "end": "2116020"
  },
  {
    "text": "into the config into the board configuration within the bot framework website and that's that's all there is",
    "start": "2116020",
    "end": "2124240"
  },
  {
    "text": "to it so let's quickly take a look and listen in and hopefully we should get",
    "start": "2124240",
    "end": "2132640"
  },
  {
    "start": "2126000",
    "end": "2199000"
  },
  {
    "text": "audio for this and so this is a Skype desktop solution",
    "start": "2132640",
    "end": "2140820"
  },
  {
    "text": "desktop client that that's running on my laptop so let me go ahead and call a lot",
    "start": "2140820",
    "end": "2148180"
  },
  {
    "text": "thanks for calling the Amazon Lex travel but you can prompt users to record a",
    "start": "2148180",
    "end": "2154000"
  },
  {
    "text": "message after the beep tell us what you would like to do you can say things like book a room or book",
    "start": "2154000",
    "end": "2161619"
  },
  {
    "text": "a car book a room what city will you be",
    "start": "2161619",
    "end": "2171730"
  },
  {
    "text": "staying in so as you can see you know I",
    "start": "2171730",
    "end": "2177010"
  },
  {
    "text": "was able to record that audio send it out Amazon Lex submit it and then get a",
    "start": "2177010",
    "end": "2183550"
  },
  {
    "text": "response back and it understood that intent and so I can have the same",
    "start": "2183550",
    "end": "2190060"
  },
  {
    "text": "interface the same bot and I can send messages to it I can send voice into it",
    "start": "2190060",
    "end": "2196060"
  },
  {
    "text": "so it's a very powerful solution so I would encourage you to go ahead and give",
    "start": "2196060",
    "end": "2204310"
  },
  {
    "start": "2199000",
    "end": "2220000"
  },
  {
    "text": "Lex a try if you haven't already used it we provide a generous free tier and so",
    "start": "2204310",
    "end": "2212440"
  },
  {
    "text": "give Lex a try it's very easy to do to get started with this and so all the",
    "start": "2212440",
    "end": "2218140"
  },
  {
    "text": "code and the implementation guide and everything is out there so take a picture if you would like to follow",
    "start": "2218140",
    "end": "2224200"
  },
  {
    "start": "2220000",
    "end": "2259000"
  },
  {
    "text": "along and create this just take a picture and go in and grab this code",
    "start": "2224200",
    "end": "2231099"
  },
  {
    "text": "from github it's it's publicly available so this time I would like to open it up",
    "start": "2231099",
    "end": "2236260"
  },
  {
    "text": "for for any questions that you might have I'll leave it up there if you don't",
    "start": "2236260",
    "end": "2242740"
  },
  {
    "text": "mind going to the microphone or possible",
    "start": "2242740",
    "end": "2247320"
  },
  {
    "text": "so two unrelated questions I'll start with the easy one the the chart both",
    "start": "2257690",
    "end": "2264480"
  },
  {
    "start": "2259000",
    "end": "2368000"
  },
  {
    "text": "example shows you know the one on the Lex but if you just go through the",
    "start": "2264480",
    "end": "2271110"
  },
  {
    "text": "wizard you can use audio or through lamda are you saying you couldn't use audio with lamda you prefer easy to be",
    "start": "2271110",
    "end": "2278550"
  },
  {
    "text": "specifically because of the Skype limitations yeah it was an implementations with the",
    "start": "2278550",
    "end": "2284880"
  },
  {
    "text": "skype library as well but it's just that it's just better to use a persistent",
    "start": "2284880",
    "end": "2292320"
  },
  {
    "text": "compute service right and so you're creating a call and there's a session that gets established and so lambda sort",
    "start": "2292320",
    "end": "2299700"
  },
  {
    "text": "of the way lambda works didn't really operate with the bot library okay the",
    "start": "2299700",
    "end": "2305760"
  },
  {
    "text": "second question is can you tell us more about the orchestration between the different specialized BOTS and is this a",
    "start": "2305760",
    "end": "2312090"
  },
  {
    "text": "wait to go over the hundred and tenth limit can we use multi yeah absolutely",
    "start": "2312090",
    "end": "2317690"
  },
  {
    "text": "that's a great point yes you can sir orchestration and so that that diagram",
    "start": "2317690",
    "end": "2323520"
  },
  {
    "text": "that you saw was an example of the architecture and so what you can do is really go beyond that limit by you by",
    "start": "2323520",
    "end": "2330780"
  },
  {
    "text": "creating the concierge bot but you obviously have to be there's a 110 limit",
    "start": "2330780",
    "end": "2337380"
  },
  {
    "text": "within a bot right and so you have to be careful because if you're defining too",
    "start": "2337380",
    "end": "2342480"
  },
  {
    "text": "many intents you could have results where users are getting no intense or getting wrong",
    "start": "2342480",
    "end": "2348810"
  },
  {
    "text": "intents right and so you don't want to so that that's a delicate balance but yes you can use that solution and sort",
    "start": "2348810",
    "end": "2355830"
  },
  {
    "text": "of give bring your tree and have branches that go deep into that that",
    "start": "2355830",
    "end": "2360990"
  },
  {
    "text": "tree rather than just having a flat tree structure right okay thank you yes",
    "start": "2360990",
    "end": "2367620"
  },
  {
    "text": "please on one of the earlier slides I think you showed a DynamoDB table in",
    "start": "2367620",
    "end": "2373920"
  },
  {
    "start": "2368000",
    "end": "2454000"
  },
  {
    "text": "JSON for him a little bit yeah and in the message field said like I want to",
    "start": "2373920",
    "end": "2379320"
  },
  {
    "text": "book a hotel I think so my question is how do you collect",
    "start": "2379320",
    "end": "2386670"
  },
  {
    "text": "that information in Alexa like the full user response not just the supplies but everything they said yeah absolutely so",
    "start": "2386670",
    "end": "2393480"
  },
  {
    "text": "that's provided as you as you integrated Lex with lambda Lex will post all of",
    "start": "2393480",
    "end": "2400380"
  },
  {
    "text": "that information into into lambda right and and when you're talking there are two layers there's a layer of lambda",
    "start": "2400380",
    "end": "2407039"
  },
  {
    "text": "that's in front of Lex then there's Amazon Lex and then there's the fulfillment cord hook that also exists",
    "start": "2407039",
    "end": "2413190"
  },
  {
    "text": "in in lambda as well so you have access to your all of that information in the",
    "start": "2413190",
    "end": "2418200"
  },
  {
    "text": "J's JSON object that's passed in to those those functions and so you can take that and grab the user ID",
    "start": "2418200",
    "end": "2424589"
  },
  {
    "text": "information that you're providing then tank that was detected one of the cool",
    "start": "2424589",
    "end": "2429930"
  },
  {
    "text": "things about the post text API is it actually you can use it to do a short form ASR as well and so you can you can",
    "start": "2429930",
    "end": "2438019"
  },
  {
    "text": "input an audio file and in response you'll get an input transfer transcript",
    "start": "2438019",
    "end": "2443880"
  },
  {
    "text": "that actually gives you the text as well so you have access to all of that information with the JSON object that's passed long I see thank you",
    "start": "2443880",
    "end": "2451049"
  },
  {
    "text": "mmm absolutely you've got a couple of questions yes the first is regarding the",
    "start": "2451049",
    "end": "2457109"
  },
  {
    "start": "2454000",
    "end": "2509000"
  },
  {
    "text": "front-end right just the whole Lex framework provide any SDKs for the front ends or is it purely",
    "start": "2457109",
    "end": "2465720"
  },
  {
    "text": "either text or speech because you could return more than text to the front end",
    "start": "2465720",
    "end": "2471150"
  },
  {
    "text": "right it could be a card help me yes yes for cards and stuff ABS absolutely so",
    "start": "2471150",
    "end": "2476220"
  },
  {
    "text": "this is you you do have Amazon Lex has",
    "start": "2476220",
    "end": "2482460"
  },
  {
    "text": "its own API or its own addition to the AWS SDK so that all that functionality",
    "start": "2482460",
    "end": "2489480"
  },
  {
    "text": "is built into that SDK and so if I wanted to return a card to Skype if it",
    "start": "2489480",
    "end": "2495749"
  },
  {
    "text": "supports any cards and so for example Facebook Messenger has support for cards that's all supported absolutely and so",
    "start": "2495749",
    "end": "2502319"
  },
  {
    "text": "yes you can make your interaction much richer with with this capability so",
    "start": "2502319",
    "end": "2508109"
  },
  {
    "text": "cards and all of that is supported the other question was regarding conversational",
    "start": "2508109",
    "end": "2514840"
  },
  {
    "start": "2509000",
    "end": "2589000"
  },
  {
    "text": "context and and you know session context house let's keep this context as you",
    "start": "2514840",
    "end": "2520780"
  },
  {
    "text": "traverse through the conversation and there could be multiple intense during a conversation how dyslexic yeah so we",
    "start": "2520780",
    "end": "2527170"
  },
  {
    "text": "provide you with all the constructs so there's a session object that's passed back and forth and so your application",
    "start": "2527170",
    "end": "2533560"
  },
  {
    "text": "is aware of the session and it keeps Amazon Lex will keep track of it because",
    "start": "2533560",
    "end": "2538690"
  },
  {
    "text": "you're providing a user ID as an input and the session is kept track so every request that goes in has a session and",
    "start": "2538690",
    "end": "2545830"
  },
  {
    "text": "every response that comes back also has the session so you can keep track of it now as far as handling all of that user",
    "start": "2545830",
    "end": "2553900"
  },
  {
    "text": "interaction of where you say okay a user just says okay I want to go I want to",
    "start": "2553900",
    "end": "2559450"
  },
  {
    "text": "exit this conversation by and so you want to gracefully do that or you want to gracefully gracefully transition",
    "start": "2559450",
    "end": "2565300"
  },
  {
    "text": "between different intents that's up to you to implement and so we provide you with all the the constructs at a",
    "start": "2565300",
    "end": "2573790"
  },
  {
    "text": "platform level but it's up to you to have that graceful transition between different intents and whatnot and so",
    "start": "2573790",
    "end": "2580450"
  },
  {
    "text": "that all that capability you can you can implement in the in the backend code",
    "start": "2580450",
    "end": "2585610"
  },
  {
    "text": "hook within lambda as well okay sorry another question sure",
    "start": "2585610",
    "end": "2590620"
  },
  {
    "start": "2589000",
    "end": "2654000"
  },
  {
    "text": "so how does how does Lex handle handing over a tool to a live agent for example",
    "start": "2590620",
    "end": "2597210"
  },
  {
    "text": "integrating with you know could be Amazon Connect or it could be a Genesis yeah you know yeah absolutely",
    "start": "2597210",
    "end": "2604330"
  },
  {
    "text": "I believe the there is talk of an integration with with Genesis I think",
    "start": "2604330",
    "end": "2610600"
  },
  {
    "text": "there was a separate session as well that you that you can go and watch on YouTube for with Genesis specifically",
    "start": "2610600",
    "end": "2617710"
  },
  {
    "text": "but yes absolutely if for example there's no intent detected right",
    "start": "2617710",
    "end": "2624220"
  },
  {
    "text": "you can then implement that that logic within your back-end lambda function to",
    "start": "2624220",
    "end": "2630010"
  },
  {
    "text": "call a certain number with an Amazon connect or into your existing IVR so",
    "start": "2630010",
    "end": "2635200"
  },
  {
    "text": "that's something that you can you can definitely implement and so error handling is is very very important here",
    "start": "2635200",
    "end": "2640720"
  },
  {
    "text": "right as is the case with graphical user interfaces over here you don't want your user to get frustrated by",
    "start": "2640720",
    "end": "2647450"
  },
  {
    "text": "saying the same thing over and over again you wanna make maybe have them repeat once and then just go to a human",
    "start": "2647450",
    "end": "2653000"
  },
  {
    "text": "okay final question is around supervised learning could you show us the supervisor learning graphic a you know",
    "start": "2653000",
    "end": "2660020"
  },
  {
    "start": "2654000",
    "end": "2809000"
  },
  {
    "text": "user interface for training that's sort of the back end within Lexx right the",
    "start": "2660020",
    "end": "2666950"
  },
  {
    "text": "training is we're using existing models right and as you provide us with sample",
    "start": "2666950",
    "end": "2673130"
  },
  {
    "text": "utterances within the console those models then get fine-tuned so within",
    "start": "2673130",
    "end": "2679370"
  },
  {
    "text": "machine learning you can take existing models that have been trained on massive amounts of data right and know like not",
    "start": "2679370",
    "end": "2686810"
  },
  {
    "text": "every one of us have access to massive amounts of data it's easier for companies like Amazon to train those and",
    "start": "2686810",
    "end": "2692240"
  },
  {
    "text": "so we're using that model that we have trained on the massive amounts of messages and and human conversations and",
    "start": "2692240",
    "end": "2698480"
  },
  {
    "text": "then we take your utterances and then we sort of find T on that and so you",
    "start": "2698480",
    "end": "2704060"
  },
  {
    "text": "fine-tune that model and that's exposed but as far as actually looking into the",
    "start": "2704060",
    "end": "2710060"
  },
  {
    "text": "backend model that's not something that's that's exposed you're welcome to train your own model if you have the",
    "start": "2710060",
    "end": "2716270"
  },
  {
    "text": "expertise to if you want to train your own model there are frameworks and",
    "start": "2716270",
    "end": "2721880"
  },
  {
    "text": "libraries that we provide obviously you can use stuff like MX net which is our preferred framework you can use",
    "start": "2721880",
    "end": "2727700"
  },
  {
    "text": "tensorflow and other deep learning libraries to implement your own own stuff I would really encourage you to",
    "start": "2727700",
    "end": "2732800"
  },
  {
    "text": "look at Sage maker that's that was announced so that's pretty cool where you can actually go in and implement",
    "start": "2732800",
    "end": "2739820"
  },
  {
    "text": "this train your model and then have it updated as you go through as you go",
    "start": "2739820",
    "end": "2746600"
  },
  {
    "text": "through updating and running your model and production so you if you have a",
    "start": "2746600",
    "end": "2752420"
  },
  {
    "text": "complex solution or if you if you have a lot of data that you all that you have",
    "start": "2752420",
    "end": "2759710"
  },
  {
    "text": "access to and that could be your your IP right and so that's an advantage that",
    "start": "2759710",
    "end": "2765200"
  },
  {
    "text": "you should be that you should be taking right data is born in this day and age",
    "start": "2765200",
    "end": "2770660"
  },
  {
    "text": "you know every you have access to all these algorithms and models that are",
    "start": "2770660",
    "end": "2775820"
  },
  {
    "text": "already available out on the open and the powerful frameworks all you need to do if you have access to DES",
    "start": "2775820",
    "end": "2781310"
  },
  {
    "text": "and you have interesting questions that need interesting answers you can go and grab that data and train your own models",
    "start": "2781310",
    "end": "2789050"
  },
  {
    "text": "absolutely this kind of higher level service is for people that don't have",
    "start": "2789050",
    "end": "2794690"
  },
  {
    "text": "that data but still want to provide an outstanding customer experience right so",
    "start": "2794690",
    "end": "2800990"
  },
  {
    "text": "if you you're in a certain vertical where you have a lot of data take advantage of that maybe look at it through training your own model okay",
    "start": "2800990",
    "end": "2807860"
  },
  {
    "text": "thank you mmm absolutely yes but just following up on that you're not suggesting that we could plug that into Lex in some way you",
    "start": "2807860",
    "end": "2815780"
  },
  {
    "start": "2809000",
    "end": "2865000"
  },
  {
    "text": "you can't plug it into Lex Lex is a higher level API right so that's not something that's supported but what you",
    "start": "2815780",
    "end": "2823070"
  },
  {
    "text": "can do is for example you have a very specific vertical specific bot there",
    "start": "2823070",
    "end": "2828410"
  },
  {
    "text": "does something like for example it deals in certain sector of the healthcare for example right and so if you have a lot",
    "start": "2828410",
    "end": "2835610"
  },
  {
    "text": "of data then you train your own model right you can use other services within",
    "start": "2835610",
    "end": "2841970"
  },
  {
    "text": "our portfolio the deep insight service where you can extract meaning for",
    "start": "2841970",
    "end": "2847610"
  },
  {
    "text": "extract if you want to extract dates and other stuff like duration and yes and no",
    "start": "2847610",
    "end": "2854180"
  },
  {
    "text": "intent so you can use the Lex API and those other api's but then you can route",
    "start": "2854180",
    "end": "2859910"
  },
  {
    "text": "the message along and you get a blur bed that at your back-end lambda function as well now I've seen circumstances where",
    "start": "2859910",
    "end": "2867680"
  },
  {
    "start": "2865000",
    "end": "2926000"
  },
  {
    "text": "Lex has misinterpreted parents and assigned it to the wrong intent mm-hmm I",
    "start": "2867680",
    "end": "2873110"
  },
  {
    "text": "don't see a capability to like informative that and remove so that's something that we're working on",
    "start": "2873110",
    "end": "2880630"
  },
  {
    "text": "comprehensive error handling is something absolutely you should be implementing there is some error",
    "start": "2880630",
    "end": "2886190"
  },
  {
    "text": "handling that's while you're in the intent there is a message around no",
    "start": "2886190",
    "end": "2891890"
  },
  {
    "text": "intent detected and what what not so you you can gracefully handle that situation but there are certain scenarios certain",
    "start": "2891890",
    "end": "2900160"
  },
  {
    "text": "certain scenarios where you you cannot and so your user will end up getting a",
    "start": "2900160",
    "end": "2905450"
  },
  {
    "text": "generic message and that's something that's that we are working on to improve the customer experience but yes I mean",
    "start": "2905450",
    "end": "2911840"
  },
  {
    "text": "if you do have a lot of different intent you have to be cognizant of not",
    "start": "2911840",
    "end": "2917330"
  },
  {
    "text": "providing too many intents where you're maybe making it ambiguous for the",
    "start": "2917330",
    "end": "2922530"
  },
  {
    "text": "backend engine to detect intent yeah I'm fortunately use case there's a",
    "start": "2922530",
    "end": "2928830"
  },
  {
    "start": "2926000",
    "end": "3058000"
  },
  {
    "text": "lot of things like booking a hotel room or something that example there's a lot of things you can do with that room yes",
    "start": "2928830",
    "end": "2934110"
  },
  {
    "text": "so it begun becomes very confusing at that point right so right your suggestion in that case is just saying",
    "start": "2934110",
    "end": "2940560"
  },
  {
    "text": "that altering the utterances so play around with utterances the number of utterances how you provide the the sort",
    "start": "2940560",
    "end": "2948630"
  },
  {
    "text": "of slot values within those utterances so just play around with that and see how if you can improve the accuracy",
    "start": "2948630",
    "end": "2953910"
  },
  {
    "text": "there right and then also locate a solution like this where you have multiple specialized spots and so once",
    "start": "2953910",
    "end": "2961080"
  },
  {
    "text": "you for example go into booking a hotel room you you go into that and maybe you",
    "start": "2961080",
    "end": "2966180"
  },
  {
    "text": "have multiple branches where you have you know within that room you have multiple specifications like you want a",
    "start": "2966180",
    "end": "2973500"
  },
  {
    "text": "room with a view queen bed king bed and whatever right and so you can you can",
    "start": "2973500",
    "end": "2979230"
  },
  {
    "text": "use multiple BOTS but you really have to play around with the actual accuracy you have to play around with the trances and",
    "start": "2979230",
    "end": "2984660"
  },
  {
    "text": "see if it works for you okay last one um we've use cases where some slots would",
    "start": "2984660",
    "end": "2991350"
  },
  {
    "text": "be required depending on the user's context whatever and not and sometimes those slots wouldn't be required what do",
    "start": "2991350",
    "end": "2998730"
  },
  {
    "text": "you have a suggestion for that there doesn't seem to be a way to dynamically say I need a slot to be required or not",
    "start": "2998730",
    "end": "3004910"
  },
  {
    "text": "and so within the Amazon Lex console there is a required checkbox right so",
    "start": "3004910",
    "end": "3010070"
  },
  {
    "text": "you can like specify whether slot is required no but I mean on a per session per user context some some will require",
    "start": "3010070",
    "end": "3018170"
  },
  {
    "text": "with some won't require it how would you deal with that that is somewhat of a",
    "start": "3018170",
    "end": "3024580"
  },
  {
    "text": "complicated scenario right and where you",
    "start": "3024580",
    "end": "3029600"
  },
  {
    "text": "on a per user session you'd probably have to implement like multiple bots where you have made you can make that",
    "start": "3029600",
    "end": "3036800"
  },
  {
    "text": "slot required or not required in one bot or the other and then you have a pre-processing layer that determines",
    "start": "3036800",
    "end": "3042710"
  },
  {
    "text": "whether the user whether this field is required for this one and so you could use a solution like this",
    "start": "3042710",
    "end": "3048680"
  },
  {
    "text": "that I presented where you can you can make that decision and then route it accordingly okay thanks hi",
    "start": "3048680",
    "end": "3059300"
  },
  {
    "start": "3058000",
    "end": "3145000"
  },
  {
    "text": "actually I wanted to ahead a little bit that was the kind of question I had as well ah these are slots can you pull it up from",
    "start": "3059300",
    "end": "3067010"
  },
  {
    "text": "a DynamoDB or dynamically populate it because you know today I have five",
    "start": "3067010",
    "end": "3072050"
  },
  {
    "text": "starts and tomorrow if I need another five slots and it keeps changing so can",
    "start": "3072050",
    "end": "3077510"
  },
  {
    "text": "it be dynamically populated based on intent uh yeah at this point I would",
    "start": "3077510",
    "end": "3082819"
  },
  {
    "text": "recommend like making this slot themselves or slot enumeration types and",
    "start": "3082819",
    "end": "3088010"
  },
  {
    "text": "stuff like that actually changing it on the fly while the the user is interacting that's probably not a good",
    "start": "3088010",
    "end": "3094250"
  },
  {
    "text": "solution but what you can do is use a generic type of slot type right take a",
    "start": "3094250",
    "end": "3100010"
  },
  {
    "text": "text back and then handle that information in in your back-end lambda function and so if you have very",
    "start": "3100010",
    "end": "3107450"
  },
  {
    "text": "specific slot type you can just grab that information as text and then actually you'll have to do manual work",
    "start": "3107450",
    "end": "3114410"
  },
  {
    "text": "on the backend I'll get that implemented unfortunately there's there is a trade-off balance",
    "start": "3114410",
    "end": "3119660"
  },
  {
    "text": "between making it easier for the users to use this product versus making it very very flexible you believe it's very",
    "start": "3119660",
    "end": "3126470"
  },
  {
    "text": "flexible but there are certain use cases where you'd have to you'd have to implement a lot of custom logic at the",
    "start": "3126470",
    "end": "3132650"
  },
  {
    "text": "back end and at the end of the day you know if you implement that custom logic that becomes your intellectual property",
    "start": "3132650",
    "end": "3138710"
  },
  {
    "text": "right and so if you're you're going and implementing that that you know you have something of value for your customers",
    "start": "3138710",
    "end": "3144520"
  },
  {
    "text": "right and in addition to that is can you make the slots to have a pattern",
    "start": "3144520",
    "end": "3151099"
  },
  {
    "start": "3145000",
    "end": "3210000"
  },
  {
    "text": "matching kind of model so that way you know if I have a I want to book a hotel",
    "start": "3151099",
    "end": "3157000"
  },
  {
    "text": "I want to book a hotel or a you know get a hotel you know it's Israel but Hotel",
    "start": "3157000",
    "end": "3164420"
  },
  {
    "text": "is the key word so anything which is this phrase I want to pack and match as a slot so that way you know it's I don't",
    "start": "3164420",
    "end": "3172190"
  },
  {
    "text": "have like so this is like this is a little bit more advanced than then then pattern matching right so that that's",
    "start": "3172190",
    "end": "3178460"
  },
  {
    "text": "where you have to really play around with utterances so you're providing maybe a ten or a dozen different utterances that",
    "start": "3178460",
    "end": "3184520"
  },
  {
    "text": "a hat will have all those keywords in them right and so that's where you",
    "start": "3184520",
    "end": "3191119"
  },
  {
    "text": "really sort of get into like playing with the accuracy of it based on the",
    "start": "3191119",
    "end": "3198109"
  },
  {
    "text": "utterances right but as far as actually doing any kind of like regex or",
    "start": "3198109",
    "end": "3205730"
  },
  {
    "text": "something that's something that you can again you'll have to implement in the back end but the console doesn't give",
    "start": "3205730",
    "end": "3211819"
  },
  {
    "start": "3210000",
    "end": "3273000"
  },
  {
    "text": "you that capability right and the last one is a fulfillment thing uh-huh you know the fulfillment do you really",
    "start": "3211819",
    "end": "3217849"
  },
  {
    "text": "need a fulfillment in the and in the skill builder kind of thing or do it in",
    "start": "3217849",
    "end": "3224569"
  },
  {
    "text": "lambda I mean because it's the same it seemed to be duplicate yeah so it's there's a lot of functionality that's",
    "start": "3224569",
    "end": "3230720"
  },
  {
    "text": "been replicated from the Lexus skills I think you're referring to and so you",
    "start": "3230720",
    "end": "3236450"
  },
  {
    "text": "know Alexa skills is under Alexa evident within Amazon and this is a this is a",
    "start": "3236450",
    "end": "3242420"
  },
  {
    "text": "completely AWS service right so here the mechanism that we are providing you for",
    "start": "3242420",
    "end": "3247490"
  },
  {
    "text": "for implementing your own logic is AWS lambda and so if you want to implement that logic you'd have to go into lambda",
    "start": "3247490",
    "end": "3254030"
  },
  {
    "text": "and and and and write all that and then disable the fulfillment from the you you",
    "start": "3254030",
    "end": "3259339"
  },
  {
    "text": "can but like you know you you know you'd have the within the console there's just",
    "start": "3259339",
    "end": "3265760"
  },
  {
    "text": "integration with lambda I so the cord hook does go into lambda okay thank you",
    "start": "3265760",
    "end": "3270910"
  },
  {
    "text": "absolutely any other one a very basic question I was trying to read the blogs",
    "start": "3270910",
    "end": "3277400"
  },
  {
    "text": "and never got a perfect answer there sure as far as voice is concerned when do I",
    "start": "3277400",
    "end": "3283010"
  },
  {
    "text": "pick LX avoid service versus legs yeah absolutely selects avoid service is",
    "start": "3283010",
    "end": "3288230"
  },
  {
    "text": "really meant for people that are developing a voice and connected device",
    "start": "3288230",
    "end": "3295069"
  },
  {
    "text": "so if your hardware if your company is building a hardware device a camera or something like like the the deep lens",
    "start": "3295069",
    "end": "3302089"
  },
  {
    "text": "that we just the be just unveiled during the read man that has a microphone and speaker that's meant for embedding",
    "start": "3302089",
    "end": "3309349"
  },
  {
    "text": "that's the SDK that that's sort of used to embed all Alexa within a",
    "start": "3309349",
    "end": "3314779"
  },
  {
    "text": "hardware device and so if all you want to do is interact with your end customer",
    "start": "3314779",
    "end": "3320589"
  },
  {
    "text": "through an existing Alexa or echo dot device or echo device device or any",
    "start": "3320589",
    "end": "3326269"
  },
  {
    "text": "other like solo speaker or something like that and all you want to do is build a back-end like chat bot service",
    "start": "3326269",
    "end": "3332509"
  },
  {
    "text": "conversational interface then you use Alexa but if you are actually building that device like a smart speaker or",
    "start": "3332509",
    "end": "3339739"
  },
  {
    "text": "something then you'd use the likes of voice service to do so I'll give you one example",
    "start": "3339739",
    "end": "3344869"
  },
  {
    "start": "3342000",
    "end": "3491000"
  },
  {
    "text": "yeah we have a mobile app for one of our applications yeah and what one request",
    "start": "3344869",
    "end": "3352429"
  },
  {
    "text": "that we got was I mean we also have Alex's skill for the same thing sure and some users asked hey we like Alexa to",
    "start": "3352429",
    "end": "3359630"
  },
  {
    "text": "talk and it's easy for us to talk and get the answers but we can't carry Alex everywhere with us yes when we have",
    "start": "3359630",
    "end": "3366229"
  },
  {
    "text": "mobile app but we still don't want to use the mobile app yeah like just touch it but just talk to the mobile app for",
    "start": "3366229",
    "end": "3372919"
  },
  {
    "text": "that scenario will Lex be the better one or you know so you're saying that they want to actually talk to the mobile app",
    "start": "3372919",
    "end": "3379759"
  },
  {
    "text": "yes or Alexa so if they want to talk to the mobile app and maybe I should have",
    "start": "3379759",
    "end": "3385339"
  },
  {
    "text": "mentioned this in the presentation we do have as part of the SD Mobile SDK we",
    "start": "3385339",
    "end": "3391489"
  },
  {
    "text": "give you a lot of constructs where you can integrate the conversational interface that you build with Amazon Lex",
    "start": "3391489",
    "end": "3398239"
  },
  {
    "text": "right into your mobile app for Android and iOS so next very easy yes it's available",
    "start": "3398239",
    "end": "3404329"
  },
  {
    "text": "it's very easy to get started right and so as you build a bought within Amazon",
    "start": "3404329",
    "end": "3409459"
  },
  {
    "text": "Lex you can you can then download sample code for both iOS and Android and directly integrate this solution into",
    "start": "3409459",
    "end": "3416509"
  },
  {
    "text": "your your apps absolutely yeah because I think when I asked them how did you get this thought like this sounds silly mobile app is there I want to use the",
    "start": "3416509",
    "end": "3423319"
  },
  {
    "text": "mobile app and they said no and the Amazon shopping we have that feature where we just talk to the app but yes a",
    "start": "3423319",
    "end": "3428959"
  },
  {
    "text": "mic but yes absolutely so that's all explained there are detailed guides on the document in the documentation if you",
    "start": "3428959",
    "end": "3435229"
  },
  {
    "text": "look at Amazon Lex documentation and look at the mobile apps it will give you detailed documentation how to integrate",
    "start": "3435229",
    "end": "3440959"
  },
  {
    "text": "this into your mobile app so actually likes not at ABS huh so I should not",
    "start": "3440959",
    "end": "3446119"
  },
  {
    "text": "look at abs for this particular you can you know look at what what provides",
    "start": "3446119",
    "end": "3451620"
  },
  {
    "text": "a better experience for your customers okay right and so I believe the only",
    "start": "3451620",
    "end": "3457230"
  },
  {
    "text": "thing that you'll be missing here is the Alexa voice and so people like the Alexa",
    "start": "3457230",
    "end": "3462450"
  },
  {
    "text": "voice it's it's something that they're used to and if you want that Alexa voice I don't believe Amazon Poly provides",
    "start": "3462450",
    "end": "3470370"
  },
  {
    "text": "that voice and so it provides a lot of different voices and dialects and languages but it doesn't provide the the",
    "start": "3470370",
    "end": "3476550"
  },
  {
    "text": "patented like sub voice yeah if your if your users are really comfortable with that and you you you think that would",
    "start": "3476550",
    "end": "3484080"
  },
  {
    "text": "provide some value and better experience then go ahead and use that okay thank you yep absolutely yeah",
    "start": "3484080",
    "end": "3491310"
  },
  {
    "start": "3491000",
    "end": "3600000"
  },
  {
    "text": "normal question so if it's a simple use case of religious Q&A FAQ type of part",
    "start": "3491310",
    "end": "3498000"
  },
  {
    "text": "where I may already have a knowledge base outside I would use Lex to",
    "start": "3498000",
    "end": "3503520"
  },
  {
    "text": "integrate it without replicating all the information up on the botton layer yeah",
    "start": "3503520",
    "end": "3508890"
  },
  {
    "text": "absolute that so that's a great question i I think obviously you you want to have",
    "start": "3508890",
    "end": "3516060"
  },
  {
    "text": "some kind of indexing capability to your tier it's almost in kind of an intelligent search yeah it's an",
    "start": "3516060",
    "end": "3522630"
  },
  {
    "text": "intelligent search right and so what you'll have to build in the backend is some kind of elastic search cluster or",
    "start": "3522630",
    "end": "3528150"
  },
  {
    "text": "something that takes and indexes all of that information in the in the end the knowledge center and then and then you",
    "start": "3528150",
    "end": "3536280"
  },
  {
    "text": "can you can do and this is something that you can implement where you'd have to implement yourself where you go in",
    "start": "3536280",
    "end": "3542550"
  },
  {
    "text": "and say okay I want a search and if I have a high confidence result that I get",
    "start": "3542550",
    "end": "3549390"
  },
  {
    "text": "back I want to present it to the user and so that could be implemented in the",
    "start": "3549390",
    "end": "3554490"
  },
  {
    "text": "backend lambda function where you have indexing implemented in another service that we have is an Amazon elastic search",
    "start": "3554490",
    "end": "3561030"
  },
  {
    "text": "you index all that information into elastic search you call that search",
    "start": "3561030",
    "end": "3566970"
  },
  {
    "text": "through your back-end and whatever first or second or two or maybe three links",
    "start": "3566970",
    "end": "3572880"
  },
  {
    "text": "that you get the top three maybe your top one you provided back and hey is this something that you were looking for",
    "start": "3572880",
    "end": "3578550"
  },
  {
    "text": "right and then the user says yes or no and based on that you close the session or you direct them",
    "start": "3578550",
    "end": "3584790"
  },
  {
    "text": "to a human so hope that helps but yes you'll need an index inch engine and the back end thanks so in our use case we",
    "start": "3584790",
    "end": "3594960"
  },
  {
    "text": "have customers can order products through using their voice and there's",
    "start": "3594960",
    "end": "3604080"
  },
  {
    "text": "thousands products like tens of thousands of products and so we have a product slot",
    "start": "3604080",
    "end": "3609740"
  },
  {
    "text": "you know we defined our own slot and what's the best way to handle that in",
    "start": "3609740",
    "end": "3616500"
  },
  {
    "text": "alexa without like putting like tens of thousands of sample slot values because",
    "start": "3616500",
    "end": "3623160"
  },
  {
    "text": "it could be like any anything really there's there's food that they can order",
    "start": "3623160",
    "end": "3629700"
  },
  {
    "text": "they can order anything that a restaurant would use they can yeah yeah",
    "start": "3629700",
    "end": "3634830"
  },
  {
    "text": "there's tons of potential slot values I think that's a hard problem and whenever",
    "start": "3634830",
    "end": "3640890"
  },
  {
    "text": "there's a hard problem that offers an opportunity for you to do you do",
    "start": "3640890",
    "end": "3646020"
  },
  {
    "text": "implemented something right and add value i I think there there are many",
    "start": "3646020",
    "end": "3651510"
  },
  {
    "text": "different ways but yes you have to be cognizant of the way how many slot",
    "start": "3651510",
    "end": "3656910"
  },
  {
    "text": "values are possible in the numeration the more you will provide you will",
    "start": "3656910",
    "end": "3662670"
  },
  {
    "text": "slowly decrease the accuracy of the enumeration type right and so if you",
    "start": "3662670",
    "end": "3667950"
  },
  {
    "text": "have a lot of products and each product has a bunch of different variations right you'd have to really implement a",
    "start": "3667950",
    "end": "3676650"
  },
  {
    "text": "user flow where you keep nailing down what the user is actually trying to get",
    "start": "3676650",
    "end": "3682260"
  },
  {
    "text": "right and then keep confirming with that user and so that's something that you'd",
    "start": "3682260",
    "end": "3688650"
  },
  {
    "text": "have to implement and in the backend lambda function okay and just to follow up on that mm-hm",
    "start": "3688650",
    "end": "3695330"
  },
  {
    "text": "so we we use the in dialog flow ease this sista any attribute it's just out",
    "start": "3695330",
    "end": "3702450"
  },
  {
    "text": "any data type and and that just matches like anything they say so we don't have",
    "start": "3702450",
    "end": "3708540"
  },
  {
    "text": "to enumerate yeah yeah that's of all value is there any is there anything like that in Alexa or is there any plan",
    "start": "3708540",
    "end": "3714570"
  },
  {
    "text": "yeah you can you can caPSURE free text right within Lex and then it's I could envision this as being",
    "start": "3714570",
    "end": "3723180"
  },
  {
    "text": "a as being a similar solution to the knowledge base where you're capturing",
    "start": "3723180",
    "end": "3728640"
  },
  {
    "text": "that information as free text and you have your indexing in the backend of all your products right and whatever top hit",
    "start": "3728640",
    "end": "3736109"
  },
  {
    "text": "that you get from that search you present that to the user and saying is this what you were looking for right and",
    "start": "3736109",
    "end": "3742140"
  },
  {
    "text": "once they once they say yes that's what I'm looking for then you go into that",
    "start": "3742140",
    "end": "3747560"
  },
  {
    "text": "the follow-up question answer about how would you like to configure it",
    "start": "3747560",
    "end": "3753270"
  },
  {
    "text": "okay so you'd want it this type of t-shirt do you want a medium large extra-large and whatnot and so I would",
    "start": "3753270",
    "end": "3758970"
  },
  {
    "text": "probably look at that where you have an index of your product catalog you can search that based on what the user is is",
    "start": "3758970",
    "end": "3766020"
  },
  {
    "text": "entering thank you yeah absolutely",
    "start": "3766020",
    "end": "3770510"
  },
  {
    "text": "do talk yes absolutely if you're capturing Lex you you can",
    "start": "3773450",
    "end": "3779490"
  },
  {
    "text": "absolutely you can you can you can within your back-end you can call another Lex bot that you can token it",
    "start": "3779490",
    "end": "3785340"
  },
  {
    "text": "yep absolutely and there's a separate services that do entity extraction and whatnot that were never launched so",
    "start": "3785340",
    "end": "3791940"
  },
  {
    "text": "absolutely that's something that you can that you can leverage any other question",
    "start": "3791940",
    "end": "3797070"
  },
  {
    "text": "I think we're out of time so we're gonna wrap it up thank you so much guys thank you for [Applause]",
    "start": "3797070",
    "end": "3804380"
  }
]