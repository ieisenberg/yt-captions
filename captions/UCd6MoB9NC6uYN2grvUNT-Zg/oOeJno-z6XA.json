[
  {
    "text": "Hello everyone, welcome to \nThis is My Architecture.",
    "start": "0",
    "end": "10259"
  },
  {
    "text": "I'm Jayson from AWS,",
    "start": "10259",
    "end": "12118"
  },
  {
    "text": "and next to me here is \nJessica from Public TV.",
    "start": "12119",
    "end": "15677"
  },
  {
    "text": "Hi, Jayson. \nThanks for inviting me.",
    "start": "15677",
    "end": "18105"
  },
  {
    "text": "I'm thrilled to come and \nshare our solution.",
    "start": "18106",
    "end": "20515"
  },
  {
    "text": "Welcome! Can you tell us \nwhat Public TV does in Taiwan?",
    "start": "20515",
    "end": "25255"
  },
  {
    "text": "OK. Public TV is a TV station \nfunded by tax income.",
    "start": "25255",
    "end": "30616"
  },
  {
    "text": "We belong to all Taiwanese,",
    "start": "30616",
    "end": "34264"
  },
  {
    "text": "and are the only one of the sort.",
    "start": "34264",
    "end": "37424"
  },
  {
    "text": "We've been playing \na pioneer role the whole time.",
    "start": "37424",
    "end": "39893"
  },
  {
    "text": "For example, we started to \npromote the 4K content a while ago.",
    "start": "39893",
    "end": "44533"
  },
  {
    "text": "We also established \na video platform called VOD in 2017,",
    "start": "44533",
    "end": "49414"
  },
  {
    "text": "and that's when we started to \nuse Cloud services from AWS.",
    "start": "49414",
    "end": "54394"
  },
  {
    "text": "Understood. I know that Public TV has its own converting service Appliances",
    "start": "54394",
    "end": "60739"
  },
  {
    "text": "and then you started to consider \nusing the services from AWS.",
    "start": "60739",
    "end": "64966"
  },
  {
    "text": "Can you tell us why?",
    "start": "64967",
    "end": "67567"
  },
  {
    "text": "What was the background \nfor the change?",
    "start": "67567",
    "end": "70366"
  },
  {
    "text": "Like I said, we've been doing \n4K audio content all along,",
    "start": "70366",
    "end": "74744"
  },
  {
    "text": "but we've encountered many problems doing 4K content converting",
    "start": "74745",
    "end": "78135"
  },
  {
    "text": "because Public TV had only one or two converting systems",
    "start": "78135",
    "end": "81665"
  },
  {
    "text": "and few staff. So when we did manual converting, time was tight.",
    "start": "81665",
    "end": "87792"
  },
  {
    "text": "That's why we studied AWS services",
    "start": "87792",
    "end": "92362"
  },
  {
    "text": "and found out such a system \ncan help us to do the converting.",
    "start": "92362",
    "end": "96720"
  },
  {
    "text": "And we found that the converted file size was much smaller,",
    "start": "96720",
    "end": "100475"
  },
  {
    "text": "therefore users will not have\n frozen screens when watching stuff online.",
    "start": "100475",
    "end": "107214"
  },
  {
    "text": "It also reduces demand on manpower.",
    "start": "107214",
    "end": "110920"
  },
  {
    "text": "Because converting features \nlike MediaConvert",
    "start": "110920",
    "end": "115020"
  },
  {
    "text": "can scale out to many machines,",
    "start": "115020",
    "end": "118909"
  },
  {
    "text": "so when we need to \nconvert lots of files in one go,",
    "start": "118909",
    "end": "122059"
  },
  {
    "text": "it can be done really fast.",
    "start": "122059",
    "end": "123969"
  },
  {
    "text": "Sounds like you used QVBR feature from MediaConvert and the Accelerate feature.",
    "start": "123969",
    "end": "129500"
  },
  {
    "text": "Here is a solution architecture, can you explain your converting workflow?",
    "start": "129500",
    "end": "137738"
  },
  {
    "text": "Sure. I'll explain it briefly.",
    "start": "137738",
    "end": "141031"
  },
  {
    "text": "So, we are a content provider,",
    "start": "141031",
    "end": "143091"
  },
  {
    "text": "and we use one of \nyour services launched last year",
    "start": "143091",
    "end": "147730"
  },
  {
    "text": "called Transfer for SFTP.",
    "start": "147730",
    "end": "150009"
  },
  {
    "text": "We use this system to \nupload resource to S3.",
    "start": "150009",
    "end": "155579"
  },
  {
    "text": "So the resource\nwill be uploaded to S3.",
    "start": "155579",
    "end": "157618"
  },
  {
    "text": "Then we'll start to\n convert the resource",
    "start": "157618",
    "end": "160547"
  },
  {
    "text": "through the transcoding workflow.",
    "start": "160547",
    "end": "166367"
  },
  {
    "text": "First, we'll start the Step Function,",
    "start": "166367",
    "end": "170527"
  },
  {
    "text": "after it's started",
    "start": "170527",
    "end": "172775"
  },
  {
    "text": "it triggers Lambda",
    "start": "172776",
    "end": "175288"
  },
  {
    "text": "telling us that there is information,",
    "start": "175288",
    "end": "178713"
  },
  {
    "text": "and through the Slack function\nit tells the engineer",
    "start": "178714",
    "end": "183848"
  },
  {
    "text": "that one or more files \nhave come into our workflow",
    "start": "183848",
    "end": "189707"
  },
  {
    "text": "and are ready for converting. \nAt this time, the Step Function",
    "start": "189707",
    "end": "193966"
  },
  {
    "text": "will trigger MediaConvert function to",
    "start": "193966",
    "end": "195968"
  },
  {
    "text": "start the converting.",
    "start": "195968",
    "end": "198161"
  },
  {
    "text": "If there are a lot of 4K content,",
    "start": "198161",
    "end": "201667"
  },
  {
    "text": "it will turn on more machines to \ndo the converting.",
    "start": "201667",
    "end": "204686"
  },
  {
    "text": "Once the process is completed,",
    "start": "204686",
    "end": "207606"
  },
  {
    "text": "it tells Lambada that the content is successfully converted.",
    "start": "207606",
    "end": "213084"
  },
  {
    "text": "Once the converting is successfully done, the system can start its next move.",
    "start": "213084",
    "end": "216730"
  },
  {
    "text": "Since on our content platform, \nwe actually have to",
    "start": "216730",
    "end": "221168"
  },
  {
    "text": "name the content in another form \nin order to upload it,",
    "start": "221169",
    "end": "224420"
  },
  {
    "text": "so we rename the resource \nthrough Lambda,",
    "start": "224420",
    "end": "227579"
  },
  {
    "text": "as well as move the resources \nand upload them to S3,",
    "start": "227579",
    "end": "231368"
  },
  {
    "text": "and then from S3 to CDN, and then from CDN to internet where viewers",
    "start": "231369",
    "end": "238779"
  },
  {
    "text": "can stream and watch.",
    "start": "238779",
    "end": "240174"
  },
  {
    "text": "I understand that Public TV also\nfaces some special situations",
    "start": "240174",
    "end": "243274"
  },
  {
    "text": "like the content has \nblank screens sometimes",
    "start": "243274",
    "end": "247211"
  },
  {
    "text": "and to solve this, you also use \nMediaConvert for auto-editing.",
    "start": "247211",
    "end": "251351"
  },
  {
    "text": "Can you also explain this workflow?",
    "start": "251351",
    "end": "254150"
  },
  {
    "text": "OK. Actually, MediaConvert \nhas an editing function.",
    "start": "254150",
    "end": "257090"
  },
  {
    "text": "We use API gateway to",
    "start": "257090",
    "end": "262079"
  },
  {
    "text": "send  Time Code  information to Lambda,",
    "start": "262079",
    "end": "266438"
  },
  {
    "text": "it actually triggers Lambda to start,",
    "start": "266438",
    "end": "270556"
  },
  {
    "text": "and then Lambda triggers\nMediaConvert function to",
    "start": "270557",
    "end": "277677"
  },
  {
    "text": "edit the blank segment. \nUsually there are three segments",
    "start": "277677",
    "end": "281576"
  },
  {
    "text": "and there is no need for \nhuman intervention.",
    "start": "281576",
    "end": "284449"
  },
  {
    "text": "After it automatically removed \nall the blank segments,",
    "start": "284450",
    "end": "287619"
  },
  {
    "text": "it sends the completed file in the whole to S3 from here.",
    "start": "287619",
    "end": "292216"
  },
  {
    "text": "It is then put back into the Bucket where files that are ready for auto converting are supposed to be,",
    "start": "292216",
    "end": "297173"
  },
  {
    "text": "and then go through the previous workflow to send to all the users.",
    "start": "297173",
    "end": "302036"
  },
  {
    "text": "It actually goes back to \nthe automatic workflow",
    "start": "302036",
    "end": "307635"
  },
  {
    "text": "after being edited by MediaConvert.",
    "start": "307635",
    "end": "310244"
  },
  {
    "text": "These two steps can both be done very quickly. Understood.",
    "start": "310244",
    "end": "313645"
  },
  {
    "text": "I also heard that Public TV is \ndoing live streaming now.",
    "start": "313645",
    "end": "318124"
  },
  {
    "text": "Before you introduced Media Service,",
    "start": "318124",
    "end": "321824"
  },
  {
    "text": "you were using media service built on EC2 to convert resource.",
    "start": "321824",
    "end": "326495"
  },
  {
    "text": "When you discovered that the resource was not enough",
    "start": "326495",
    "end": "329453"
  },
  {
    "text": "and it was really inconvenient to manage those EC2 by yourselves,",
    "start": "329453",
    "end": "333106"
  },
  {
    "text": "you began to use MediaStore to do live streaming at the same time.",
    "start": "333106",
    "end": "338091"
  },
  {
    "text": "Can you also roughly explain \nhow this flow works?",
    "start": "338092",
    "end": "341791"
  },
  {
    "text": "Ok. Just like you said, \nwe faced problems.",
    "start": "341791",
    "end": "344852"
  },
  {
    "text": "So later, we actually used encoder to",
    "start": "344852",
    "end": "346822"
  },
  {
    "text": "upload HLS files to",
    "start": "346822",
    "end": "351332"
  },
  {
    "text": "MediaStore directly.",
    "start": "351332",
    "end": "353338"
  },
  {
    "text": "MediaStore is a function of AWS too.",
    "start": "353338",
    "end": "356652"
  },
  {
    "text": "It can be scaled out. So when the number of viewers is large,",
    "start": "356652",
    "end": "360246"
  },
  {
    "text": "say during a baseball game or a live streaming from the president etc,",
    "start": "360246",
    "end": "366384"
  },
  {
    "text": "there will be like 10,000 people flocked online,",
    "start": "366384",
    "end": "370744"
  },
  {
    "text": "it will just scale out and \nthen through CDN all along",
    "start": "370744",
    "end": "373499"
  },
  {
    "text": "to the internet viewers at the end.",
    "start": "373499",
    "end": "377701"
  },
  {
    "text": "I see. So MediaStore has become some sort of a origin for CouldFront.",
    "start": "377701",
    "end": "381763"
  },
  {
    "text": "When there is a CacheMiss, it can also go to MediaStore quickly and grab the content from cache",
    "start": "381763",
    "end": "388276"
  },
  {
    "text": "and take care of the scaling-out at the same time.  That's right.",
    "start": "388276",
    "end": "392376"
  },
  {
    "text": "Understood.",
    "start": "392376",
    "end": "393247"
  },
  {
    "text": "Lastly, let's talk a little about \nthis hit TV series.",
    "start": "393247",
    "end": "399075"
  },
  {
    "text": "Before the last two episodes were formally released, the resource was leaked.",
    "start": "399075",
    "end": "402419"
  },
  {
    "text": "Some suspected whether the resource was leaked from AWS.",
    "start": "402419",
    "end": "406399"
  },
  {
    "text": "Can you tell us \nmore about the whole story?",
    "start": "406399",
    "end": "410172"
  },
  {
    "text": "Sure. The time was when the TV series was coming to the end,",
    "start": "410173",
    "end": "414568"
  },
  {
    "text": "the most exciting time to viewers. Public TV did not release the resource yet, but we found it was leaked out.",
    "start": "414568",
    "end": "419887"
  },
  {
    "text": "You could watch it on 3rd party platforms.",
    "start": "419887",
    "end": "421910"
  },
  {
    "text": "By that time, we suspected it was our own platform that leaked it out.",
    "start": "421910",
    "end": "426855"
  },
  {
    "text": "And then we ruled out the suspicion by checking logs on S3,",
    "start": "426855",
    "end": "430268"
  },
  {
    "text": "which showed that within that week,",
    "start": "430268",
    "end": "432789"
  },
  {
    "text": "or previous weeks,",
    "start": "432789",
    "end": "435771"
  },
  {
    "text": "no resource was ever leaked during that period of time.",
    "start": "435771",
    "end": "439393"
  },
  {
    "text": "So we excluded \nthis possibility very quick.",
    "start": "439394",
    "end": "442547"
  },
  {
    "text": "That shows how important logs are.",
    "start": "442547",
    "end": "444760"
  },
  {
    "text": "It helps you to exam if there are problems on steps of the flow.",
    "start": "444760",
    "end": "447732"
  },
  {
    "text": "Right. Logs are usually not very fast.",
    "start": "447732",
    "end": "449565"
  },
  {
    "text": "You can also get complete logs on S3.",
    "start": "449565",
    "end": "453325"
  },
  {
    "text": "Understood. To some degree, it allows the whole architecture to be as automatic as possible.",
    "start": "453325",
    "end": "458118"
  },
  {
    "text": "And with as little human factor as possible to avoid leakage, right?",
    "start": "458118",
    "end": "461734"
  },
  {
    "text": "Correct. Because of this accident,",
    "start": "461734",
    "end": "464044"
  },
  {
    "text": "we started to think of automating everything to avoid human intervention.",
    "start": "464044",
    "end": "469778"
  },
  {
    "text": "And we hope, \nby using Cloud technologies,",
    "start": "469778",
    "end": "472417"
  },
  {
    "text": "we can realise all-around automation.",
    "start": "472417",
    "end": "475219"
  },
  {
    "text": "I really look forward to seeing Public TV's development on AWS.",
    "start": "475219",
    "end": "477953"
  },
  {
    "text": "Thank you.",
    "start": "477953",
    "end": "479192"
  },
  {
    "text": "Thank you Jessica for joining us today.",
    "start": "479192",
    "end": "481103"
  },
  {
    "text": "And thank you for watching today's This is My Architecture.",
    "start": "481104",
    "end": "484442"
  }
]