[
  {
    "text": "hello i am padma malik arjunan and i am an enterprise support manager",
    "start": "3520",
    "end": "8880"
  },
  {
    "text": "at aws and i am based out of austin texas welcome to aws support ceo where we",
    "start": "8880",
    "end": "15360"
  },
  {
    "text": "share best practices and troubleshooting tips from aws support joining me today is anat vaidyanathan",
    "start": "15360",
    "end": "22720"
  },
  {
    "text": "vinod krishnamurthy and vishal mehta from aws can you give us a quick introduction",
    "start": "22720",
    "end": "29119"
  },
  {
    "text": "uh let's start with you anand sure thanks padma hi everyone my name is anant and i'm a",
    "start": "29119",
    "end": "35600"
  },
  {
    "text": "product manager on the amazon efs product team i've been at amazon and aws",
    "start": "35600",
    "end": "41200"
  },
  {
    "text": "for close to five years and i'm really excited to be here today hi everyone this is vinod krishnamurti i",
    "start": "41200",
    "end": "48320"
  },
  {
    "text": "am a senior technical account manager based out of bay area california i've been with aws little over two years",
    "start": "48320",
    "end": "54160"
  },
  {
    "text": "now and i support independent software vendor enterprise customers",
    "start": "54160",
    "end": "59280"
  },
  {
    "text": "hello everyone this is vishal mehta i'm a technical account manager based out of toronto canada",
    "start": "59280",
    "end": "65119"
  },
  {
    "text": "and i have been with aws for two plus years thank you for your time today thank you",
    "start": "65119",
    "end": "70799"
  },
  {
    "text": "for the introductions everyone today aws supports you building modern applications on aws",
    "start": "70799",
    "end": "79119"
  },
  {
    "text": "using amazon elastic file systems or efs we will specifically focus on why you",
    "start": "79119",
    "end": "85439"
  },
  {
    "text": "need persistent storage for modern applications and how to build modern applications using containers",
    "start": "85439",
    "end": "91600"
  },
  {
    "text": "and aws lambda using efs as storage before we get into the details a quick",
    "start": "91600",
    "end": "96960"
  },
  {
    "text": "note to our attendees online please use the chat window on the right hand side of your screen",
    "start": "96960",
    "end": "102560"
  },
  {
    "text": "to share your thoughts and ask your questions throughout the episode we look forward to hearing from you",
    "start": "102560",
    "end": "108479"
  },
  {
    "text": "anand can you walk us through what we are going to be talking about today sure absolutely so let's get started so",
    "start": "108479",
    "end": "114960"
  },
  {
    "text": "we have a uh we have a fairly uh simple agenda here today",
    "start": "114960",
    "end": "120479"
  },
  {
    "text": "so i'll give you a quick uh introduction to uh to amazon efs uh walk you through uh some use cases",
    "start": "120479",
    "end": "127840"
  },
  {
    "text": "and then we'll jump into the exciting part of today's session which is uh modern application",
    "start": "127840",
    "end": "134800"
  },
  {
    "text": "development with efs so we have some cool demos lined up there and then we'll end the session by",
    "start": "134800",
    "end": "141360"
  },
  {
    "text": "talking about uh security best practices uh and developer and administrative best practices so",
    "start": "141360",
    "end": "149200"
  },
  {
    "text": "with that uh let's get started so efs is serverless you don't need to provision or manage",
    "start": "149200",
    "end": "155760"
  },
  {
    "text": "any infrastructure or capacity the key things i want to point out here are efs works with all of the aws",
    "start": "155760",
    "end": "162959"
  },
  {
    "text": "compute services and with sagemaker and second you can connect to efs",
    "start": "162959",
    "end": "168480"
  },
  {
    "text": "irrespective of location on premises using aws direct connect or aws vpn",
    "start": "168480",
    "end": "174160"
  },
  {
    "text": "or in the same vpc or in a different vpc using inter region or intra-region vpc",
    "start": "174160",
    "end": "179360"
  },
  {
    "text": "peering ef-s therefore gives you all the full flexibility and allows you to focus on",
    "start": "179360",
    "end": "185040"
  },
  {
    "text": "your application so what exactly is uh amazon efs",
    "start": "185040",
    "end": "190560"
  },
  {
    "text": "so for many of you might be familiar with efs already but we launched efs back in 2016 to give",
    "start": "190560",
    "end": "197599"
  },
  {
    "text": "customers a simple super a set and forget fully managed cloud native file system",
    "start": "197599",
    "end": "202959"
  },
  {
    "text": "so efs is serverless again like i mentioned you don't need to provision or manage infrastructure or capacity",
    "start": "202959",
    "end": "208560"
  },
  {
    "text": "and as your workload scales up so does your file system automatically accommodating any additional storage or",
    "start": "208560",
    "end": "214080"
  },
  {
    "text": "connection capacity that you need you can get up and running in as little as a few seconds",
    "start": "214080",
    "end": "220239"
  },
  {
    "text": "and as little as two clicks and have pedabyte scale elastic storage that's very easy to use efs provides the",
    "start": "220239",
    "end": "227519"
  },
  {
    "text": "capabilities and integrations you need to confidently run business critical applications",
    "start": "227519",
    "end": "232720"
  },
  {
    "text": "that need shared file storage on aws efs is elastic automatically scaling up or down as you",
    "start": "232720",
    "end": "239760"
  },
  {
    "text": "add or remove files as your application requires it and you only pay for what you use your performance automatically scales with",
    "start": "239760",
    "end": "246400"
  },
  {
    "text": "your capacity which by the way again like i said efs scales to petabytes in size",
    "start": "246400",
    "end": "251599"
  },
  {
    "text": "it's also highly available and designed to be highly durable we offer four nines availability sla and",
    "start": "251599",
    "end": "257759"
  },
  {
    "text": "we're designed for 11 nines of durability to achieve these levels of availability and durability",
    "start": "257759",
    "end": "264880"
  },
  {
    "text": "all files and directories are redundantly stored across multiple availability zones",
    "start": "264880",
    "end": "272240"
  },
  {
    "text": "so in in terms of performance efs pro efs provides low consistent latencies",
    "start": "272720",
    "end": "279520"
  },
  {
    "text": "and can scale to tens of gigabytes per second of throughput and support 500 000 plus of iops and it also supports",
    "start": "279520",
    "end": "286479"
  },
  {
    "text": "tens of thousands of concurrent clients no matter the type so which means they could be ec2 instances containers or",
    "start": "286479",
    "end": "292320"
  },
  {
    "text": "lambda functions or uh across various aws uh compute",
    "start": "292320",
    "end": "298560"
  },
  {
    "text": "services so next uh efs is highly available and",
    "start": "298560",
    "end": "304320"
  },
  {
    "text": "designed to be durable as i just mentioned and so like like i also said it offers a four nines of availability sla and",
    "start": "304320",
    "end": "310160"
  },
  {
    "text": "designed for eleven nines of data durability and so to achieve this as you can see when you uh",
    "start": "310160",
    "end": "316240"
  },
  {
    "text": "when you put in data into into a file system all the files and directories are redundantly stored across",
    "start": "316240",
    "end": "322160"
  },
  {
    "text": "uh multiple availability zones so it means that the write isn't acknowledged until the",
    "start": "322160",
    "end": "328000"
  },
  {
    "text": "data is written across the three availability zones and so efs can withstand the full loss of a single availability zone",
    "start": "328000",
    "end": "334720"
  },
  {
    "text": "while providing the same quality of service in the other availability zones so this is really transformational right",
    "start": "334720",
    "end": "340880"
  },
  {
    "text": "if you're used to operating within the same within a primary data center or and and",
    "start": "340880",
    "end": "346479"
  },
  {
    "text": "then you have a second data center for dr right so if i take it a step further",
    "start": "346479",
    "end": "351520"
  },
  {
    "text": "we also provide additional data protection with aws backup which again provides protects data by",
    "start": "351520",
    "end": "357440"
  },
  {
    "text": "storing it across availability zones and is completely an independent service so it gives",
    "start": "357440",
    "end": "362560"
  },
  {
    "text": "giving you full diversity in your physical infrastructure and software implementation",
    "start": "362560",
    "end": "369919"
  },
  {
    "text": "in march of this year just a couple of months earlier we launched efs one zone which",
    "start": "371120",
    "end": "376720"
  },
  {
    "text": "allows you to create a file system in a single zone so this reduces storage costs by 47",
    "start": "376720",
    "end": "383120"
  },
  {
    "text": "compared to our amazon efs standard regional storage classes while maintaining the same efs",
    "start": "383120",
    "end": "389039"
  },
  {
    "text": "capabilities and features that you already love so we heard from customers that they have workloads such as dev development or",
    "start": "389039",
    "end": "396000"
  },
  {
    "text": "test workloads built and staging environments as well as applications such as analytics based",
    "start": "396000",
    "end": "401919"
  },
  {
    "text": "simulation media transcoding or backups and replicas of environments",
    "start": "401919",
    "end": "407759"
  },
  {
    "text": "or on-premises data which don't necessarily require the regional resistance resilience right however uh we we still",
    "start": "407759",
    "end": "416000"
  },
  {
    "text": "uh for additional data protection all file systems uh using uh amazon efs one zone storage classes",
    "start": "416000",
    "end": "422240"
  },
  {
    "text": "have automatic file backup policies uh backup policies to provide additional data protection with regional redundancy",
    "start": "422240",
    "end": "430880"
  },
  {
    "text": "so i'll just quickly talk about cost as well so amazon efs is cost optimized there",
    "start": "432400",
    "end": "439440"
  },
  {
    "text": "are no minimum commitments or fees there's no need to provision storage in advance as i mentioned",
    "start": "439440",
    "end": "445440"
  },
  {
    "text": "and we we support automatic lifecycle management policies that moves your data to lower",
    "start": "445440",
    "end": "452479"
  },
  {
    "text": "cost through storage tiers without requiring you to change your application your workload uh or",
    "start": "452479",
    "end": "459599"
  },
  {
    "text": "your workflows uh so with that uh i will i will pause uh are there any",
    "start": "459599",
    "end": "466960"
  },
  {
    "text": "questions that we have from uh from the viewers padma hi ananth thank you for that",
    "start": "466960",
    "end": "473680"
  },
  {
    "text": "introduction i'm not seeing any questions on the chat window at the moment everyone please feel free",
    "start": "473680",
    "end": "480319"
  },
  {
    "text": "to post your questions we have the experts here from the amazon efs team who can answer",
    "start": "480319",
    "end": "485919"
  },
  {
    "text": "those for you but i have a question for you anand can you talk a little bit about what modern",
    "start": "485919",
    "end": "492720"
  },
  {
    "text": "applications are and why we have a need for persistent storage with amazon efs",
    "start": "492720",
    "end": "498479"
  },
  {
    "text": "sure uh i can do that but i'll just also like to reiterate padma's point about",
    "start": "498479",
    "end": "503759"
  },
  {
    "text": "please feel free to keep adding posting your questions on the chat window as well but in terms of modern applications",
    "start": "503759",
    "end": "511520"
  },
  {
    "text": "we think of modern application development as any time you create an application using modern",
    "start": "511520",
    "end": "517919"
  },
  {
    "text": "techniques or services right and these include creating applications",
    "start": "517919",
    "end": "523760"
  },
  {
    "text": "in containers or serverless in order to be more agile or scalable or using continuous integration or",
    "start": "523760",
    "end": "531040"
  },
  {
    "text": "continuous deployment commonly known as ci cd to deliver uh applications",
    "start": "531040",
    "end": "536320"
  },
  {
    "text": "uh faster so anytime you're using these new techniques you make your",
    "start": "536320",
    "end": "541760"
  },
  {
    "text": "application do more for you move faster become more agile and obviously meet the needs of",
    "start": "541760",
    "end": "548480"
  },
  {
    "text": "uh of your customers so what we're really seeing is a lot of customers either choosing to",
    "start": "548480",
    "end": "554480"
  },
  {
    "text": "taking existing applications and modernizing them or uh so taking something that's been",
    "start": "554480",
    "end": "560240"
  },
  {
    "text": "running on premises or that may have been running ec2 instances for a while right and so uh there are a lot of",
    "start": "560240",
    "end": "567120"
  },
  {
    "text": "opportunities to modernize these applications put them in containers launch them on container services",
    "start": "567120",
    "end": "573120"
  },
  {
    "text": "and so this really reduces the operational burden or overhead on those applications and so",
    "start": "573120",
    "end": "578959"
  },
  {
    "text": "they scale easier so from a storage perspective many of these applications already rely",
    "start": "578959",
    "end": "585360"
  },
  {
    "text": "on persistent storage as part of what they're doing so they may be sharing data between multiple",
    "start": "585360",
    "end": "591040"
  },
  {
    "text": "instances of their application or they may have a persistent storage layer which is",
    "start": "591040",
    "end": "596240"
  },
  {
    "text": "usually how they share the data with other applications so for example you may have storage that shared across multiple",
    "start": "596240",
    "end": "601920"
  },
  {
    "text": "containers across multiple lambda functions and so on and so when you decide to",
    "start": "601920",
    "end": "608000"
  },
  {
    "text": "modernize your applications often you want to modernize your storage as part of",
    "start": "608000",
    "end": "613360"
  },
  {
    "text": "modernizing your application and that's where and that's where efs really comes into play",
    "start": "613360",
    "end": "618399"
  },
  {
    "text": "uh so i hope that helped uh padma any anything else uh that's it so far uh back to you anat",
    "start": "618399",
    "end": "625360"
  },
  {
    "text": "all right so i'll keep going and so now we'll get into the uh exciting part of today's session",
    "start": "625360",
    "end": "631600"
  },
  {
    "text": "which is uh modern application development and now so now that i've introduced it uh let me",
    "start": "631600",
    "end": "637360"
  },
  {
    "text": "let me spend a couple of minutes talking about uh use cases so uh from a container's perspective",
    "start": "637360",
    "end": "644640"
  },
  {
    "text": "with with efs we see uh stateful applications that are long running or sharing the",
    "start": "644640",
    "end": "650480"
  },
  {
    "text": "data sets with other containers which are a good fit for efs and so typically we see these are let's",
    "start": "650480",
    "end": "656640"
  },
  {
    "text": "say developer tools such as jira or jenkins or gate customers building",
    "start": "656640",
    "end": "661760"
  },
  {
    "text": "websites or digital experiences using wordpress or drupal running machine learning uh applications",
    "start": "661760",
    "end": "669040"
  },
  {
    "text": "such as or based on frameworks such as mxnet pi torch and so on or just building or just",
    "start": "669040",
    "end": "674160"
  },
  {
    "text": "having shared notebooks such as on jupyter or home directory such as let's say for tableau or or rstudio and so on",
    "start": "674160",
    "end": "682399"
  },
  {
    "text": "and so uh let's talk about lambda in efs and what use cases they they unlock so",
    "start": "682399",
    "end": "688320"
  },
  {
    "text": "the use cases for lambda kind of fall into one of one of two categories one is persistent storage to get around",
    "start": "688320",
    "end": "694240"
  },
  {
    "text": "the lambda function temporary space limitation that you that you have today for reading and writing files so for example if you",
    "start": "694240",
    "end": "700720"
  },
  {
    "text": "have an etl pipeline and as part of that pipeline you have to deal with let's say large files such as",
    "start": "700720",
    "end": "706880"
  },
  {
    "text": "let's say that are one gigabyte you can attach an efs file system to your function and read and write from",
    "start": "706880",
    "end": "712240"
  },
  {
    "text": "your file system and that way you now have unlimited file storage for your application right",
    "start": "712240",
    "end": "718480"
  },
  {
    "text": "another category of use cases is when you need to share data across lambda function invocations so a",
    "start": "718480",
    "end": "724000"
  },
  {
    "text": "common example of that we see is with machine learning inference and media processing so with machine",
    "start": "724000",
    "end": "730079"
  },
  {
    "text": "learning inference you have a shared set of libraries such as on mxnet or tensorflow and then you have",
    "start": "730079",
    "end": "735279"
  },
  {
    "text": "a shared file model such as for image classification sentiment analysis image recognition",
    "start": "735279",
    "end": "740720"
  },
  {
    "text": "and so on right with media processing you can ingest and edit millions of images or encode or",
    "start": "740720",
    "end": "747600"
  },
  {
    "text": "transcode video files so there there are really a lot of use cases that are now enabled by lambda and efs that customers really",
    "start": "747600",
    "end": "754639"
  },
  {
    "text": "couldn't take advantage of before so uh with that let's get into uh",
    "start": "754639",
    "end": "762079"
  },
  {
    "text": "getting started with uh uh with uh efs and modern apps so the the one thing that i want to talk",
    "start": "762079",
    "end": "768320"
  },
  {
    "text": "about before getting into the demos are and how you can get started as security and identity",
    "start": "768320",
    "end": "773680"
  },
  {
    "text": "so when you talk about uh securing an identity with modern apps you want your file systems to be",
    "start": "773680",
    "end": "779600"
  },
  {
    "text": "mountable only by the applications that need them and not not any app not any",
    "start": "779600",
    "end": "784800"
  },
  {
    "text": "application right the second is if you have multiple applications accessing a file system",
    "start": "784800",
    "end": "789920"
  },
  {
    "text": "they should only have access to the data that that particular application needs",
    "start": "789920",
    "end": "796639"
  },
  {
    "text": "right so uh and the and and the way that we solve",
    "start": "796639",
    "end": "801760"
  },
  {
    "text": "that is uh with uh access points but before that let's talk about managing application",
    "start": "801760",
    "end": "807200"
  },
  {
    "text": "identities with efs such as if you're sharing a file system with multiple users so if you use containers the identity",
    "start": "807200",
    "end": "814000"
  },
  {
    "text": "such as the user id or the group id is typically decided at build time and built into the",
    "start": "814000",
    "end": "819279"
  },
  {
    "text": "container image this means it isn't uncommon for applications to run as root which means they'll be trying to do all",
    "start": "819279",
    "end": "825279"
  },
  {
    "text": "file system operations as root or whatever the app developer decided",
    "start": "825279",
    "end": "830560"
  },
  {
    "text": "uh when he or she built the application which may not make sense to the file system right and that's why we",
    "start": "830560",
    "end": "835920"
  },
  {
    "text": "built uh efs access points so they give your application and entry",
    "start": "835920",
    "end": "841440"
  },
  {
    "text": "point into the file system where all applications are overwritten to the uid",
    "start": "841440",
    "end": "846639"
  },
  {
    "text": "or the gid defined in the access point so you know that it makes sense in the context of the data and so",
    "start": "846639",
    "end": "852320"
  },
  {
    "text": "your access points can really root your application in a specific directory so that your applications don't need to",
    "start": "852320",
    "end": "857440"
  },
  {
    "text": "worry too much about which directory to cd into to get the data and even better it actually creates the",
    "start": "857440",
    "end": "864320"
  },
  {
    "text": "data for you so that you don't have to set up permissions anywhere else so uh let's i'll quickly talk about how",
    "start": "864320",
    "end": "870959"
  },
  {
    "text": "amazon efs access points work so in this example uh let's say that you've deployed a container with a task",
    "start": "870959",
    "end": "876720"
  },
  {
    "text": "role called app role as you can see on the left hand side uh in your file system resource policy",
    "start": "876720",
    "end": "882240"
  },
  {
    "text": "uh you stated that this role is only used to mount a file system via specific access point",
    "start": "882240",
    "end": "887920"
  },
  {
    "text": "right so the access point on fsap that you see there and that's the access point it's used to mount right so now that this application",
    "start": "887920",
    "end": "894959"
  },
  {
    "text": "is run as is run as root so ordinarily all applications so all operations",
    "start": "894959",
    "end": "900480"
  },
  {
    "text": "are now interpreted as root right which is usually not the best idea and so because you're using an access",
    "start": "900480",
    "end": "906560"
  },
  {
    "text": "point the access point has placed the app in a home directory called",
    "start": "906560",
    "end": "911760"
  },
  {
    "text": "apps my app as you can see in the path in the path section of of the policy",
    "start": "911760",
    "end": "918800"
  },
  {
    "text": "there and so it's writing all the file operations to user group 123 as you can see and so you can be",
    "start": "918800",
    "end": "926480"
  },
  {
    "text": "sure that it has exactly all the data that it needs nothing more or nothing less",
    "start": "926480",
    "end": "933600"
  },
  {
    "text": "so with that we'll pause for the next set of",
    "start": "933600",
    "end": "939040"
  },
  {
    "text": "questions i think we have a few coming in hey anna thank you yes we do have a few",
    "start": "939040",
    "end": "946240"
  },
  {
    "text": "questions here uh so the first question uh and actually the",
    "start": "946240",
    "end": "951519"
  },
  {
    "text": "thank you tommy 242 for your question and also keshu goyal thank you for your",
    "start": "951519",
    "end": "956560"
  },
  {
    "text": "questions uh they're very related um and we know i think uh i might ask this question to",
    "start": "956560",
    "end": "963600"
  },
  {
    "text": "you can you talk a little bit about efs s3 when do you prefer one over the other",
    "start": "963600",
    "end": "972079"
  },
  {
    "text": "you're on mute",
    "start": "974240",
    "end": "976800"
  },
  {
    "text": "yeah sorry sorry about that yeah uh great question uh from the audience but i was able to",
    "start": "980480",
    "end": "986720"
  },
  {
    "text": "talk about that during my demo but i can answer it now so on top of my mind i can think about",
    "start": "986720",
    "end": "991759"
  },
  {
    "text": "uh two reasons which will help us decide uh that that scenario whether",
    "start": "991759",
    "end": "997519"
  },
  {
    "text": "efs or s3 one is the api and the second is the access pattern of your workload by api uh let's say if",
    "start": "997519",
    "end": "1004959"
  },
  {
    "text": "you're modernizing an existing application that already deals with a lot of file operations let's say",
    "start": "1004959",
    "end": "1010240"
  },
  {
    "text": "opening a file closing a file or migrating a file system then it is easier to migrate",
    "start": "1010240",
    "end": "1017199"
  },
  {
    "text": "to efs uh than relating to an object interface and when coming to access patterns with",
    "start": "1017199",
    "end": "1023279"
  },
  {
    "text": "s3 like you have to download or import the files let's see uh if you take an ml model",
    "start": "1023279",
    "end": "1030400"
  },
  {
    "text": "then you have to build a logic to see that if the object was updated or was it modified",
    "start": "1030400",
    "end": "1036160"
  },
  {
    "text": "whereas with the fs this is natively available and efs also provides caching under the wood for",
    "start": "1036160",
    "end": "1041760"
  },
  {
    "text": "example with lambda uh you can use it you can use the existing container",
    "start": "1041760",
    "end": "1046880"
  },
  {
    "text": "uh and then you will not have a cold start problem because the efs can access the data instantaneously here",
    "start": "1046880",
    "end": "1054080"
  },
  {
    "text": "and one more point is if your data is conscious constantly being accessed then you don't",
    "start": "1054080",
    "end": "1060080"
  },
  {
    "text": "have to pay for data access on efs which may be very cost effective depending upon your workload hope that",
    "start": "1060080",
    "end": "1067039"
  },
  {
    "text": "answered the question thanks minod and uh tommy242",
    "start": "1067039",
    "end": "1072960"
  },
  {
    "text": "and geisha goyal if you have any follow-up questions on that please post that so and i can answer",
    "start": "1072960",
    "end": "1078480"
  },
  {
    "text": "that in a bit more detail uh this next question uh thank you for the question",
    "start": "1078480",
    "end": "1084080"
  },
  {
    "text": "uh jam lows three um this is about uh pricing for efs",
    "start": "1084080",
    "end": "1091200"
  },
  {
    "text": "and i think uh zarif ahmed uh you plus one that question as well",
    "start": "1091200",
    "end": "1096240"
  },
  {
    "text": "uh can you talk a little bit about uh how does pricing work uh efs in the scenario efs is being used",
    "start": "1096240",
    "end": "1103919"
  },
  {
    "text": "as employee storage for ingest and files are deleted uh within a certain amount of time can",
    "start": "1103919",
    "end": "1110400"
  },
  {
    "text": "you give us an idea of how pricing works yeah sure so uh so with efs you only pay",
    "start": "1110400",
    "end": "1115600"
  },
  {
    "text": "for uh this the amount of storage that you store in your efs file system",
    "start": "1115600",
    "end": "1121039"
  },
  {
    "text": "and so if you uh what we do is look at the amount of storage that you've used",
    "start": "1121039",
    "end": "1126160"
  },
  {
    "text": "over a particular time let's say uh for example with efs you pay a certain amount",
    "start": "1126160",
    "end": "1131520"
  },
  {
    "text": "uh for uh per gigabyte month so for example if you're if you're using uh our uh standard",
    "start": "1131520",
    "end": "1138240"
  },
  {
    "text": "storage on uh us amazon efs standard storage you pay an effective price of eight cents per gb",
    "start": "1138240",
    "end": "1145679"
  },
  {
    "text": "month so what that means is for one uh gigabyte that you store over an",
    "start": "1145679",
    "end": "1150799"
  },
  {
    "text": "entire monthly period you pay eight cents so what we do is we look at the storage that you have stored over a particular",
    "start": "1150799",
    "end": "1157520"
  },
  {
    "text": "month so it it really doesn't matter whether you're stored for five or ten minutes we'll aggregate the storage over the",
    "start": "1157520",
    "end": "1162960"
  },
  {
    "text": "entire month got it thank you for that uh announced",
    "start": "1162960",
    "end": "1169840"
  },
  {
    "text": "uh and we have a one more question before we go uh from x3l four thank you so much for",
    "start": "1169840",
    "end": "1176960"
  },
  {
    "text": "your question now this question is about permissions and the question is this can you talk a little bit about",
    "start": "1176960",
    "end": "1184400"
  },
  {
    "text": "permission boundaries for instances when allowing root access to limit access to that instance",
    "start": "1184400",
    "end": "1193840"
  },
  {
    "text": "so uh if you uh so when you talk about uh so just making sure i understood the question properly so is it about",
    "start": "1196960",
    "end": "1204640"
  },
  {
    "text": "uh the way that you would control root access uh to a file system is i believe what the question is",
    "start": "1204640",
    "end": "1212000"
  },
  {
    "text": "yeah right uh yeah so so the way that you would do that is exactly through efs access points which is what i just",
    "start": "1212080",
    "end": "1218720"
  },
  {
    "text": "talked about and in fact we'll walk you through a demo as well so with efs access points you can ensure that",
    "start": "1218720",
    "end": "1223760"
  },
  {
    "text": "your applications don't run as root within the file system and that you have application specific entry points into the file system so you",
    "start": "1223760",
    "end": "1230080"
  },
  {
    "text": "can say slash app slash file system slash app one",
    "start": "1230080",
    "end": "1235120"
  },
  {
    "text": "slash file system slash app2 for example and each application is mounted using us",
    "start": "1235120",
    "end": "1240240"
  },
  {
    "text": "that specific access point and so they have access only to that specific path of the file system and not to the root",
    "start": "1240240",
    "end": "1245840"
  },
  {
    "text": "of the file system got it michelle do you want to add something to that yes and i'm going to demo that uh",
    "start": "1245840",
    "end": "1253280"
  },
  {
    "text": "using the app i am role and the access point on how we can map to the specific file folder as anant",
    "start": "1253280",
    "end": "1260400"
  },
  {
    "text": "was explaining uh using the ec2 file system policy and imrode",
    "start": "1260400",
    "end": "1265600"
  },
  {
    "text": "so yeah perfect then then that that was the last in the list of questions so",
    "start": "1265600",
    "end": "1270799"
  },
  {
    "text": "back to you all right yeah uh thanks uh padmanadan so before i get",
    "start": "1270799",
    "end": "1277520"
  },
  {
    "text": "started with the demo i just want to highlight a couple of points so you can use efs with ecs to access the file system",
    "start": "1277520",
    "end": "1286080"
  },
  {
    "text": "data across your fleet of ecs tasks in that way your tasks can have access to the same persistent",
    "start": "1286080",
    "end": "1292480"
  },
  {
    "text": "storage no matter on which container instance the application is going to land and how this happens",
    "start": "1292480",
    "end": "1298400"
  },
  {
    "text": "is when you reference an efs file system and a container mount point in your ecs",
    "start": "1298400",
    "end": "1304159"
  },
  {
    "text": "task definition the ecs takes care of mounting the file system in your container",
    "start": "1304159",
    "end": "1309679"
  },
  {
    "text": "so let's jump into the quick demo so this demo will help you get started",
    "start": "1309679",
    "end": "1315520"
  },
  {
    "text": "on using afs with ecs so what we will be doing is we'll be creating an efs file system we'll be adding a simple",
    "start": "1315520",
    "end": "1323480"
  },
  {
    "text": "index.html to the efs and then we will update the ecs task definition",
    "start": "1323480",
    "end": "1328799"
  },
  {
    "text": "to reference cfs file system and the container mount point the easiest task will have an nginx",
    "start": "1328799",
    "end": "1335600"
  },
  {
    "text": "container mount dfs root volume to display that html page on a web browser",
    "start": "1335600",
    "end": "1344400"
  },
  {
    "text": "having said that let me start uh with the demo",
    "start": "1344640",
    "end": "1350150"
  },
  {
    "text": "[Music] all right so let's first we'll have to create an efs file system",
    "start": "1350150",
    "end": "1355360"
  },
  {
    "text": "so i'll create a vfs file system you can name it efs demo or efs demo one",
    "start": "1355360",
    "end": "1362000"
  },
  {
    "text": "however you want it and then you can select the default vpc and then select the regional",
    "start": "1362000",
    "end": "1367280"
  },
  {
    "text": "because it will be across multiple acs and then you click the create option i'm not going to create it now because i",
    "start": "1367280",
    "end": "1372799"
  },
  {
    "text": "have already created it so i've created i'm going to use the fs demo the last one of the file system which i",
    "start": "1372799",
    "end": "1379760"
  },
  {
    "text": "have here so just uh important thing to note down the",
    "start": "1379760",
    "end": "1384960"
  },
  {
    "text": "file system id that is what we will be needing it when we reference it at the later point of the demo",
    "start": "1384960",
    "end": "1391520"
  },
  {
    "text": "so let me just log on to an ec2 instance and then kind of host",
    "start": "1391520",
    "end": "1398080"
  },
  {
    "text": "this mount this efs file system so i'll use the browser session to log in",
    "start": "1398080",
    "end": "1405360"
  },
  {
    "text": "to the ec2 instance and then i'll do df minus t to just to make sure to check my ifs uh system is mounted i can see it",
    "start": "1405360",
    "end": "1411919"
  },
  {
    "text": "mounted let me quickly go to the the mount folder",
    "start": "1411919",
    "end": "1419600"
  },
  {
    "text": "yeah i just i've just added an index.html i just wanted to show you what what it has",
    "start": "1421520",
    "end": "1427760"
  },
  {
    "text": "so it's a simple index.html it just has like you're now using an amazon effort's file system for",
    "start": "1427760",
    "end": "1433760"
  },
  {
    "text": "persistent container storage so that it just has a simple html there",
    "start": "1433760",
    "end": "1439440"
  },
  {
    "text": "so we'll quit that and let's now go to the ecs",
    "start": "1439440",
    "end": "1446240"
  },
  {
    "text": "cluster and have a new task definition to reference this particular efs uh system so i have a cluster",
    "start": "1446240",
    "end": "1453760"
  },
  {
    "text": "already so i have quite a few clusters but let me use",
    "start": "1453760",
    "end": "1458880"
  },
  {
    "text": "the last one here for ccsdemo cluster so it's a simple cluster it just has one container",
    "start": "1458880",
    "end": "1466000"
  },
  {
    "text": "instance running on it you can see that so what i will do",
    "start": "1466000",
    "end": "1472000"
  },
  {
    "text": "now is go to the task definitions create a new revision for that particular task",
    "start": "1472000",
    "end": "1478640"
  },
  {
    "text": "let's quickly go there and then create a new revision so i'll have for this a demo",
    "start": "1479120",
    "end": "1486159"
  },
  {
    "text": "it is better we use the json format so it will be easy to populate it rather than populating all those fields so i'll just go",
    "start": "1486159",
    "end": "1492799"
  },
  {
    "text": "ahead and delete the existing json use my version of json",
    "start": "1492799",
    "end": "1501760"
  },
  {
    "text": "just cut and paste it here give me a moment all right so i have pasted it now you can see the container",
    "start": "1501760",
    "end": "1508159"
  },
  {
    "text": "definitions uh the container path and then the source volume it has to refer and the",
    "start": "1508159",
    "end": "1514240"
  },
  {
    "text": "name and the image of the container and the most important is the volume uh",
    "start": "1514240",
    "end": "1519440"
  },
  {
    "text": "the name of the volume and the file system id the file system id is the same one which we created recently which i",
    "start": "1519440",
    "end": "1525039"
  },
  {
    "text": "which we i asked you to note it down and then the last one is the family family is nothing but the cluster name",
    "start": "1525039",
    "end": "1530720"
  },
  {
    "text": "i save it i come back and you can check if it's populated all the fields",
    "start": "1530720",
    "end": "1538000"
  },
  {
    "text": "we'll just go through scan and check if all the fields are populated i'll just see if the container name and container image is",
    "start": "1538000",
    "end": "1544640"
  },
  {
    "text": "populated and then one more thing we need to cross check before we proceed is the storage",
    "start": "1544640",
    "end": "1552080"
  },
  {
    "text": "and logging section that's where we need to make sure the mount volume is correct so i go to the storage uh the amount",
    "start": "1552080",
    "end": "1558640"
  },
  {
    "text": "volume is cfs html and then the container part these are the two important factors here",
    "start": "1558640",
    "end": "1563919"
  },
  {
    "text": "yeah everything looks okay i just come down and then now we can just",
    "start": "1563919",
    "end": "1570400"
  },
  {
    "text": "create this task so you can see the new revision of the task definitions has been created",
    "start": "1570400",
    "end": "1576080"
  },
  {
    "text": "successfully you can just before you run this task you can check the container we have an",
    "start": "1576080",
    "end": "1582240"
  },
  {
    "text": "engine container just to make sure the container path and the source volume is correct",
    "start": "1582240",
    "end": "1588159"
  },
  {
    "text": "yeah it looks okay yep or just nothing else needs to be",
    "start": "1588159",
    "end": "1595600"
  },
  {
    "text": "updated and then we can now run this task so i just go to run actions run this task yeah to run this",
    "start": "1595600",
    "end": "1603039"
  },
  {
    "text": "task uh you just have to first make sure the cluster is right cluster is selected and then you can use launch type target",
    "start": "1603039",
    "end": "1609440"
  },
  {
    "text": "or ec2 i'm using easy to uh for this demo here on the task definition it automatically populates it",
    "start": "1609440",
    "end": "1615679"
  },
  {
    "text": "nothing else needs to be updated i just go and run the task yeah you can see that it has created a",
    "start": "1615679",
    "end": "1621279"
  },
  {
    "text": "task successfully you can drop down go to the task option and then uh you will see the tasks",
    "start": "1621279",
    "end": "1628400"
  },
  {
    "text": "running there click on it and then uh you can see",
    "start": "1628400",
    "end": "1633520"
  },
  {
    "text": "whatever we populated like the cluster name the instance the instance id the task definition and",
    "start": "1633520",
    "end": "1639840"
  },
  {
    "text": "then also the family and now you can see the container image the name of the container click it and",
    "start": "1639840",
    "end": "1645840"
  },
  {
    "text": "then when you expanded you would see an external link so if you access the external link it needs to",
    "start": "1645840",
    "end": "1651200"
  },
  {
    "text": "access the efs file system unpopulated let's click it there we go so it was",
    "start": "1651200",
    "end": "1657840"
  },
  {
    "text": "able to connect to the efs uh file system the root volume and then it was able to display the html that you",
    "start": "1657840",
    "end": "1664159"
  },
  {
    "text": "are now able now you are accessing the efs file system for a persistent container storage",
    "start": "1664159",
    "end": "1670000"
  },
  {
    "text": "so it was able to access the efs uh correctly a couple of things i just wanted to note",
    "start": "1670000",
    "end": "1677679"
  },
  {
    "text": "we need to make sure that the security groups of the efs allows the ecs task",
    "start": "1677679",
    "end": "1683760"
  },
  {
    "text": "definitions that's one of the important point to note it down so let's let me go to the vpc and then go to my security group",
    "start": "1683760",
    "end": "1691200"
  },
  {
    "text": "and then find out the efs demo which i've attached to the efs file system",
    "start": "1691200",
    "end": "1696559"
  },
  {
    "text": "let's click on that and then you will see like i open the port range2049 and that",
    "start": "1696559",
    "end": "1704880"
  },
  {
    "text": "that makes sure that my ecs task can access the efs file system",
    "start": "1704880",
    "end": "1712880"
  },
  {
    "text": "yep and just one more thing i remember is the default security group needs to have",
    "start": "1712880",
    "end": "1718159"
  },
  {
    "text": "an access for port 80 that's just for this demo when you are trying to access the uh external link",
    "start": "1718159",
    "end": "1726480"
  },
  {
    "text": "it will not be needed on your real-time real-time applications just for this demo yeah let me find my default security",
    "start": "1726480",
    "end": "1732559"
  },
  {
    "text": "group and then i just have to make sure that i have a port 80",
    "start": "1732559",
    "end": "1737679"
  },
  {
    "text": "opened up so that my external link can open yeah that's the couple of things which i can",
    "start": "1737679",
    "end": "1743120"
  },
  {
    "text": "remember about the security groups which we need to make sure that we configure it correctly other than",
    "start": "1743120",
    "end": "1748720"
  },
  {
    "text": "that i think you are able to connect your ecs task",
    "start": "1748720",
    "end": "1754480"
  },
  {
    "text": "uh to vfs and then you are able to display your uh display your html page from the ecs",
    "start": "1754480",
    "end": "1763200"
  },
  {
    "text": "so that's all for the first part of the demo so let me take a pause here and then uh",
    "start": "1763200",
    "end": "1768960"
  },
  {
    "text": "padma do you have any questions from the audience before i go on with the lambda demo",
    "start": "1768960",
    "end": "1774159"
  },
  {
    "text": "there is one question from the audience thank you geshou goyal for your question the",
    "start": "1774159",
    "end": "1780720"
  },
  {
    "text": "question is is a container running on ecs or any other platform",
    "start": "1780720",
    "end": "1786320"
  },
  {
    "text": "required for efs",
    "start": "1786320",
    "end": "1790720"
  },
  {
    "text": "uh can you just come back with a question sorry i just oh sure sure uh is a is a container a requirement for",
    "start": "1793200",
    "end": "1800159"
  },
  {
    "text": "using efs no it's it's not a requirements even when you're trying to modernize an application with container",
    "start": "1800159",
    "end": "1806640"
  },
  {
    "text": "or uh like with lambda then you're using a container but you can just run it on an ec2 instance as well",
    "start": "1806640",
    "end": "1812799"
  },
  {
    "text": "so a container is not an absolute requirement it again depends on what kind of application you are running and what kind of like if you're",
    "start": "1812799",
    "end": "1819039"
  },
  {
    "text": "supporting a csd pipeline then obviously it makes sense to run the application and container or if",
    "start": "1819039",
    "end": "1824640"
  },
  {
    "text": "you're running an ml application then yes so again it depends on what kind of application you are running",
    "start": "1824640",
    "end": "1831039"
  },
  {
    "text": "got it back to you by note i know you have one more demo to show so thank you all right yeah",
    "start": "1831039",
    "end": "1838240"
  },
  {
    "text": "uh thanks vermont so let me uh get on with the next demo so before i start my next demo again i just want to talk",
    "start": "1838240",
    "end": "1844640"
  },
  {
    "text": "about couple of points so we will be we'll be seeing how an efs lambda",
    "start": "1844640",
    "end": "1849919"
  },
  {
    "text": "i mean efs and lambda however lambda can access the efs file system so as you know servers",
    "start": "1849919",
    "end": "1855679"
  },
  {
    "text": "serverless applications are event driven using an affirmal compute functions to integrate services",
    "start": "1855679",
    "end": "1861360"
  },
  {
    "text": "and transform the data with a lam with lambda obviously we have a 512 mb of temporary",
    "start": "1861360",
    "end": "1868480"
  },
  {
    "text": "file system but but again that's a thermal and then it's not a durable storage so with efs",
    "start": "1868480",
    "end": "1876720"
  },
  {
    "text": "for lambda you can now easily share the data cross function invocations you can also read",
    "start": "1876720",
    "end": "1883279"
  },
  {
    "text": "large data files you can write an output to a persistent and shared storage and it can be used by",
    "start": "1883279",
    "end": "1889679"
  },
  {
    "text": "other lambda functions or it can be used by other ecs or other any other containers so in that",
    "start": "1889679",
    "end": "1895120"
  },
  {
    "text": "way efs for lambda makes it simpler to use a serverless architecture to implement many common",
    "start": "1895120",
    "end": "1901039"
  },
  {
    "text": "workloads so now let's uh jump onto the demo so here uh",
    "start": "1901039",
    "end": "1906720"
  },
  {
    "text": "we're going to see how to reference an efs file system with lambda and then i have a simple",
    "start": "1906720",
    "end": "1913679"
  },
  {
    "text": "lambda function which will just create a files file on an efs file system",
    "start": "1913679",
    "end": "1919120"
  },
  {
    "text": "so that's what uh we're going to see so if you look at this i'll just use the",
    "start": "1919120",
    "end": "1924640"
  },
  {
    "text": "same file system what we have and then we need to create an access point that's the important",
    "start": "1924640",
    "end": "1930880"
  },
  {
    "text": "part as anand was talking about access point where you can make the lambda to access your efs file system",
    "start": "1930880",
    "end": "1936559"
  },
  {
    "text": "so we'll have to create an access point so we go and then you can give a",
    "start": "1936559",
    "end": "1943600"
  },
  {
    "text": "name for your file access point and then you have to specify the root directory",
    "start": "1943600",
    "end": "1950159"
  },
  {
    "text": "i'm i'm doing slash test and then the posix user this is again uh how you want to",
    "start": "1950159",
    "end": "1956159"
  },
  {
    "text": "restrict your uh file uh axis",
    "start": "1956159",
    "end": "1962399"
  },
  {
    "text": "depending upon your application needs so i'm just going with the default ones for thousand and seven",
    "start": "1962399",
    "end": "1967600"
  },
  {
    "text": "seven seven and then i'll have to click create access point i'm not going to do that because i've already created an access point and if",
    "start": "1967600",
    "end": "1974000"
  },
  {
    "text": "you see uh the access point name is this one and the access point id",
    "start": "1974000",
    "end": "1979039"
  },
  {
    "text": "and then a iron we have to note it down so this just gives you all the parameters what you have used to create",
    "start": "1979039",
    "end": "1985919"
  },
  {
    "text": "the access point and then the arm so now let's",
    "start": "1985919",
    "end": "1991039"
  },
  {
    "text": "go and create a lambda function so i've gone into my lambda console i'm going to create a new function i'm",
    "start": "1991039",
    "end": "1998480"
  },
  {
    "text": "going to show you how to create a new function so give your function name it can be lambda first or however you",
    "start": "1998480",
    "end": "2005440"
  },
  {
    "text": "want to be wanted to be and then run time i'm just going to use python for this",
    "start": "2005440",
    "end": "2011519"
  },
  {
    "text": "example and then you can click on advanced settings uh this is where a couple of important",
    "start": "2011519",
    "end": "2016640"
  },
  {
    "text": "things to note make sure you use the same bpc which you which where you have created your uh efs",
    "start": "2016640",
    "end": "2022480"
  },
  {
    "text": "so the same vpc on the same subnet and then make sure you have the same security group selected so that your",
    "start": "2022480",
    "end": "2027519"
  },
  {
    "text": "lambda can access the fs file system and then click on create function since i've already",
    "start": "2027519",
    "end": "2032640"
  },
  {
    "text": "created the function i'm not going to recreate it so let's go back to the function name so",
    "start": "2032640",
    "end": "2037919"
  },
  {
    "text": "i've already created and then let's check the view details if you click on view details it'll show",
    "start": "2037919",
    "end": "2044320"
  },
  {
    "text": "you the function arn and you can click on the configuration",
    "start": "2044320",
    "end": "2050000"
  },
  {
    "text": "to check let me go and go to the configuration window and then you can select the file systems",
    "start": "2050000",
    "end": "2057599"
  },
  {
    "text": "option so once you select the file system option you can come and add the file system",
    "start": "2057599",
    "end": "2062800"
  },
  {
    "text": "let me add the efs file system so on the drop down will show you what file system once you add the file system it'll automatically show you the access point",
    "start": "2062800",
    "end": "2069280"
  },
  {
    "text": "which you need to select and then yeah i'm just making sure that we we select the same access point and",
    "start": "2069280",
    "end": "2075599"
  },
  {
    "text": "it's getting populated there yep it is and then you add the local",
    "start": "2075599",
    "end": "2080638"
  },
  {
    "text": "mount path so i'll just do slash mnd slash test",
    "start": "2080639",
    "end": "2086079"
  },
  {
    "text": "save it cool so i've saved it and then let's go and change the lambda",
    "start": "2086079",
    "end": "2093760"
  },
  {
    "text": "code",
    "start": "2093760",
    "end": "2096000"
  },
  {
    "text": "just give a second yep just go on let's change the lambda code uh let's get rid of this one and i'll have",
    "start": "2101200",
    "end": "2108079"
  },
  {
    "text": "a simple code there so let's go and paste my code and then populate it here",
    "start": "2108079",
    "end": "2116640"
  },
  {
    "text": "yeah change my import all right yeah so this is a very simple",
    "start": "2116640",
    "end": "2123040"
  },
  {
    "text": "lambda code let me deploy it what it does is it'll just",
    "start": "2123040",
    "end": "2128400"
  },
  {
    "text": "use a simple touch command to create uh efs lambda test.txt file",
    "start": "2128400",
    "end": "2135200"
  },
  {
    "text": "uh on my efs file system that's all it's going to do and it's",
    "start": "2135200",
    "end": "2140880"
  },
  {
    "text": "going to use the fs access point which we have created so let's go back to that ec2 instance",
    "start": "2140880",
    "end": "2146320"
  },
  {
    "text": "and then make sure that there's no such file already exist and show that when if this lambda",
    "start": "2146320",
    "end": "2151599"
  },
  {
    "text": "executes successfully we can go and check if that file is created uh the f minus t",
    "start": "2151599",
    "end": "2157839"
  },
  {
    "text": "yeah just to check if it is still mounted and then let me go to the mount folder",
    "start": "2157839",
    "end": "2166560"
  },
  {
    "text": "type over there",
    "start": "2167119",
    "end": "2172140"
  },
  {
    "text": "[Music] yeah i should see a test folder but nothing inside that yeah so you test unless i should not see",
    "start": "2172140",
    "end": "2180560"
  },
  {
    "text": "anything there yeah there's nothing there so let's go back to the lambda function now and then executed",
    "start": "2180560",
    "end": "2187440"
  },
  {
    "text": "the lambda function now yeah i'm just checking if the if i have the right touch command to",
    "start": "2187440",
    "end": "2193200"
  },
  {
    "text": "create the file attach it and then just use this",
    "start": "2193200",
    "end": "2198640"
  },
  {
    "text": "this a simple hello world template and give an even name we don't have to put any key value and",
    "start": "2198640",
    "end": "2205119"
  },
  {
    "text": "then just create this event now this is the old execution result let me close that and then",
    "start": "2205119",
    "end": "2212400"
  },
  {
    "text": "i can run this function now you click on test it'll execute there you go it has",
    "start": "2212400",
    "end": "2218640"
  },
  {
    "text": "executed successfully and then it has created an efslam.test",
    "start": "2218640",
    "end": "2223839"
  },
  {
    "text": "file a text file on the efs so we can go back to the uh ec2 instance",
    "start": "2223839",
    "end": "2231519"
  },
  {
    "text": "let me see where did my if i have to launch it or i should have a window open let me check that",
    "start": "2231839",
    "end": "2240240"
  },
  {
    "text": "quickly i have a window open for that",
    "start": "2240240",
    "end": "2244960"
  },
  {
    "text": "i don't think i have i don't know where it's going to forget let's let's connect it again let's connect it and then",
    "start": "2246160",
    "end": "2254000"
  },
  {
    "text": "let's quickly go to the mount folder and then let's go and check our test",
    "start": "2254800",
    "end": "2260560"
  },
  {
    "text": "folder if the lambda function was able to successfully connect and create uh the text file if it was then it has",
    "start": "2260560",
    "end": "2267280"
  },
  {
    "text": "to be created and then let's go to test and then if i do ls now",
    "start": "2267280",
    "end": "2272960"
  },
  {
    "text": "i should see that file name there you go so so your efs uh your lambda function was able to connect to",
    "start": "2272960",
    "end": "2279440"
  },
  {
    "text": "efs it's it's as simple as that you just have to make sure that you have the nfs uh you you have an access point and then",
    "start": "2279440",
    "end": "2285440"
  },
  {
    "text": "you have in the same security group then your lambda will be able to access the efs so if you think of in a real",
    "start": "2285440",
    "end": "2291200"
  },
  {
    "text": "time it can be used for a lot of different workloads like uh sharing your ml code",
    "start": "2291200",
    "end": "2296560"
  },
  {
    "text": "you can have your ml code deployed onto an efs or an or an ml inference or you can also",
    "start": "2296560",
    "end": "2302880"
  },
  {
    "text": "have any other huge data sets where you want to kind of refer it across",
    "start": "2302880",
    "end": "2307920"
  },
  {
    "text": "your different lambda functions that's all uh from my demo uh",
    "start": "2307920",
    "end": "2313440"
  },
  {
    "text": "for today and uh padma do you have any questions from the audience before we hand it over to ananthanav",
    "start": "2313440",
    "end": "2319280"
  },
  {
    "text": "shah yes uh we know uh we have a couple of questions and i i think the questions are for you so",
    "start": "2319280",
    "end": "2326480"
  },
  {
    "text": "first uh thank you jam blues3 for your question uh the question is do you have to define efs servers",
    "start": "2326480",
    "end": "2334160"
  },
  {
    "text": "ahead of time or can it be done dynamically uh efs servers so so efs can be created",
    "start": "2334160",
    "end": "2342560"
  },
  {
    "text": "uh uh anytime but if you have to create a dynamic uh or if you dynamic subdirectories then",
    "start": "2342560",
    "end": "2348720"
  },
  {
    "text": "yes you need to have you can do that but you need to follow certain uh certain steps i think we can",
    "start": "2348720",
    "end": "2354240"
  },
  {
    "text": "we can share the documentation for that but uh you can create it anytime maybe another can add a little more here",
    "start": "2354240",
    "end": "2362000"
  },
  {
    "text": "yeah the only thing i want to just make sure that uh we so efs by itself as a service the efs file",
    "start": "2362000",
    "end": "2369119"
  },
  {
    "text": "system does not have any servers so you you really aren't creating any servers to",
    "start": "2369119",
    "end": "2374240"
  },
  {
    "text": "run your efs file system and you create a file system that's all you do and behind the scenes we take care of scaling up the efs file",
    "start": "2374240",
    "end": "2381119"
  },
  {
    "text": "system if you're specifically referring to an ec2 instance as a server on which you want to mount a file system so that",
    "start": "2381119",
    "end": "2387599"
  },
  {
    "text": "you can access it no you don't have to define it ahead of time if you just launch an ec2 instance with a simple mount command",
    "start": "2387599",
    "end": "2393599"
  },
  {
    "text": "you can mount your created file system onto that instance",
    "start": "2393599",
    "end": "2398319"
  },
  {
    "text": "uh next question um is can you talk about the difference between efs",
    "start": "2398720",
    "end": "2404079"
  },
  {
    "text": "and s3 and thank you surly dave for your question",
    "start": "2404079",
    "end": "2409119"
  },
  {
    "text": "uh efs and s3 i think i think did we answer this question like when to choose cfs with s3",
    "start": "2409119",
    "end": "2414319"
  },
  {
    "text": "or is it like the difference just talking about what what the differences are uh between efs and s3 as a file",
    "start": "2414319",
    "end": "2421599"
  },
  {
    "text": "system when do you use when versus the other uh yeah see uh uh s3 is is an",
    "start": "2421599",
    "end": "2428079"
  },
  {
    "text": "object-based storage it is entirely different on how is how how it handles the storage it is an",
    "start": "2428079",
    "end": "2434400"
  },
  {
    "text": "object based and then and then you have key value pair mapping and all those kind of stuff is an elastic file system and then you",
    "start": "2434400",
    "end": "2442079"
  },
  {
    "text": "you can just mount it on any of your hd instance and then you can create sub directories and then it's a it's a",
    "start": "2442079",
    "end": "2448640"
  },
  {
    "text": "it's a flat file system so it's both follow different different architecture again when you want to use",
    "start": "2448640",
    "end": "2455599"
  },
  {
    "text": "it i i think we have answered it earlier uh and do you want to add anything on top of it",
    "start": "2455599",
    "end": "2461359"
  },
  {
    "text": "uh no i i think you explained it well that access patterns and apis would be the two reasons why you would",
    "start": "2461359",
    "end": "2467680"
  },
  {
    "text": "choose efs versus s3 depending on the access pattern of your workload and whether your application speaks api speaks object or",
    "start": "2467680",
    "end": "2475599"
  },
  {
    "text": "file i think the other common common question we hear is how about efs and",
    "start": "2475599",
    "end": "2481200"
  },
  {
    "text": "amazon ebs which is elastic block store right so that's a very common question that we hear from customers as well so maybe",
    "start": "2481200",
    "end": "2487599"
  },
  {
    "text": "i'll just address that since it since we talked about s3 so if if you think about it data in a",
    "start": "2487599",
    "end": "2494079"
  },
  {
    "text": "container is ephemeral so which means if a container crashes or it gets deleted the data",
    "start": "2494079",
    "end": "2499200"
  },
  {
    "text": "associated with the container is lost and so uh with uh with ebs",
    "start": "2499200",
    "end": "2504400"
  },
  {
    "text": "uh if you want a more stateful application or you want to maintain state to write to a persistent storage volume",
    "start": "2504400",
    "end": "2510960"
  },
  {
    "text": "the two common services are efs and ebs if you're running transactional workloads that require very low latency",
    "start": "2510960",
    "end": "2517280"
  },
  {
    "text": "then ebs might be a good fit but if you're running containers that require sharing across",
    "start": "2517280",
    "end": "2522960"
  },
  {
    "text": "multiple containers or if you're running a container across multiple availability zones you have",
    "start": "2522960",
    "end": "2528079"
  },
  {
    "text": "cross ac architectures then we recommend using efs got it thank you for that so we shall",
    "start": "2528079",
    "end": "2535200"
  },
  {
    "text": "i'll turn it over to you all right thank you patma and thank you vinod for cool demos i",
    "start": "2535200",
    "end": "2540800"
  },
  {
    "text": "will now go over efs best practices and security so let's uh first dive deeper into security and",
    "start": "2540800",
    "end": "2548400"
  },
  {
    "text": "compliance efs has many security capabilities today and that has enabled us to meet the",
    "start": "2548400",
    "end": "2554160"
  },
  {
    "text": "requirements for a wide variety of compliance standards first you can control the client access",
    "start": "2554160",
    "end": "2560240"
  },
  {
    "text": "at multiple levels for network traffic using amazon vpc security groups and network acls",
    "start": "2560240",
    "end": "2566560"
  },
  {
    "text": "you can control file and directory access using standard linux or unix posix permissions",
    "start": "2566560",
    "end": "2572480"
  },
  {
    "text": "you can use im to manage api administrative access you can encrypt your data at rest using",
    "start": "2572480",
    "end": "2578560"
  },
  {
    "text": "key management in aws kml kms and you can also encrypt the data in",
    "start": "2578560",
    "end": "2584720"
  },
  {
    "text": "transit using industry standard tls 1.2 lastly amazon efs service is a hipaa",
    "start": "2584720",
    "end": "2591359"
  },
  {
    "text": "eligible gdpr compliant pci compliant sock and iso compliant and fedramp",
    "start": "2591359",
    "end": "2597359"
  },
  {
    "text": "authorized in addition to what vinod showed for access point security with lambda and ecs same",
    "start": "2597359",
    "end": "2604720"
  },
  {
    "text": "controls can be enforced on ec2 instance and that's what one of the question was from the audience",
    "start": "2604720",
    "end": "2610480"
  },
  {
    "text": "let me walk you through on how to secure ec2 access to the file system using access points",
    "start": "2610480",
    "end": "2617760"
  },
  {
    "text": "so i'll bring up my demo here and let me start so i'm at the",
    "start": "2617760",
    "end": "2626079"
  },
  {
    "text": "efs console service page and from here i will go to the file systems",
    "start": "2626079",
    "end": "2634720"
  },
  {
    "text": "and uh i have created a test file system which has no access points created",
    "start": "2634720",
    "end": "2639760"
  },
  {
    "text": "it has been created with the default uh parameters and let me show you that i",
    "start": "2639760",
    "end": "2646400"
  },
  {
    "text": "have no system policy or access points and to mount this file system as it has",
    "start": "2646400",
    "end": "2653680"
  },
  {
    "text": "been shown earlier in the demo uh we will just click on attach",
    "start": "2653680",
    "end": "2659359"
  },
  {
    "text": "get the mount command go to my ec2 instance and i'll ssh into",
    "start": "2659359",
    "end": "2666240"
  },
  {
    "text": "my c2 instance and from here i'll just open the browser",
    "start": "2666240",
    "end": "2675200"
  },
  {
    "text": "ssh and once it comes up i'll just go and",
    "start": "2675200",
    "end": "2682000"
  },
  {
    "text": "mount the test file system that i've created to the right folder which was also created earlier",
    "start": "2682000",
    "end": "2688160"
  },
  {
    "text": "so now when i try to mount it it will get mounted because this file system had no security policies no i am rolls to the",
    "start": "2688160",
    "end": "2695280"
  },
  {
    "text": "ec2 instance nor does i have any access points and you can see here",
    "start": "2695280",
    "end": "2700400"
  },
  {
    "text": "it has been mounted so this is how we do like regularly without the access points if",
    "start": "2700400",
    "end": "2706079"
  },
  {
    "text": "you want to mount a file system you go to the ec2 instance and you mount it uh now to mount a file system",
    "start": "2706079",
    "end": "2713440"
  },
  {
    "text": "let me go uh to one access point file system which has an access point uh and this is",
    "start": "2713440",
    "end": "2719599"
  },
  {
    "text": "the access point that i created and it has let me pause here",
    "start": "2719599",
    "end": "2725280"
  },
  {
    "text": "so this file system policy that i have created here maps the im role that i will be giving to",
    "start": "2725280",
    "end": "2730400"
  },
  {
    "text": "the specific ec2 instance and it will map the access point of this file system so we are mapping",
    "start": "2730400",
    "end": "2736160"
  },
  {
    "text": "them here i have created im role which i will attach to the ec2 instance and through this two controls we will be",
    "start": "2736160",
    "end": "2742480"
  },
  {
    "text": "able to mount a particular folder to a specific ec2 instance that you want",
    "start": "2742480",
    "end": "2748560"
  },
  {
    "text": "so continuing with the demo now to mount uh",
    "start": "2748560",
    "end": "2755440"
  },
  {
    "text": "yeah to mount i'll just go here uh and try to mount it to the efs folder and it",
    "start": "2762800",
    "end": "2769839"
  },
  {
    "text": "will fail because now this access uh this file system has an access point and it will",
    "start": "2769839",
    "end": "2776800"
  },
  {
    "text": "not be mounted as the security guard rail that we have put into place let's try to mount the access point now",
    "start": "2776800",
    "end": "2782560"
  },
  {
    "text": "i go to the access point i have created the posix permissions uh you can see it it will be mounted to the",
    "start": "2782560",
    "end": "2789839"
  },
  {
    "text": "root directory path of slash web and it belongs to this file system with",
    "start": "2789839",
    "end": "2795359"
  },
  {
    "text": "the regular with the posix permissions i go here get the command to mount this access point",
    "start": "2795359",
    "end": "2801359"
  },
  {
    "text": "copy it go to my ec2 instance and now let's let's see if i can mount this i'll modify the command to",
    "start": "2801359",
    "end": "2808960"
  },
  {
    "text": "indicate that it has an im role",
    "start": "2808960",
    "end": "2812720"
  },
  {
    "text": "and this fails again as expected now it is failing with the different error it is talking about the permissions the",
    "start": "2814240",
    "end": "2819839"
  },
  {
    "text": "ec2 instance does not have the required permissions to mount this access points so this that's the security feature that access",
    "start": "2819839",
    "end": "2826400"
  },
  {
    "text": "points brings on the table where if you want a specific uh",
    "start": "2826400",
    "end": "2831680"
  },
  {
    "text": "ec2 instance to mount to a specific directory of the file system you use access points",
    "start": "2831680",
    "end": "2836720"
  },
  {
    "text": "so now what i'm showing here is i'll go and attach a security role that i had defined",
    "start": "2836720",
    "end": "2843040"
  },
  {
    "text": "earlier it's a web role uh which which maps to the access point",
    "start": "2843040",
    "end": "2849839"
  },
  {
    "text": "uh let's wait for a minute after it has been successfully attached let's go back to the ec2 instance",
    "start": "2850400",
    "end": "2858000"
  },
  {
    "text": "up arrow and try to mount it and this time i was able to mount it let's confirm that the mounting has",
    "start": "2858160",
    "end": "2865200"
  },
  {
    "text": "happened and you can see i was able to mount this",
    "start": "2865200",
    "end": "2871760"
  },
  {
    "text": "access point from the file system to the folder that i wanted to our ec2 instance",
    "start": "2871760",
    "end": "2877920"
  },
  {
    "text": "through which i wanted to move so i'll pause the demo here and yeah so the whole idea here was to",
    "start": "2877920",
    "end": "2884960"
  },
  {
    "text": "show that how easy it is to mount a specific access point uh with the im roll permissions",
    "start": "2884960",
    "end": "2890720"
  },
  {
    "text": "uh and the file system policy to map your im roll with access point you and you not not any ec2 instance",
    "start": "2890720",
    "end": "2898319"
  },
  {
    "text": "will be able to mount it it's only after it has been given the specific role it will be able to mount that specific",
    "start": "2898319",
    "end": "2904160"
  },
  {
    "text": "folder uh so going back to the slides",
    "start": "2904160",
    "end": "2909039"
  },
  {
    "text": "uh let me continue on uh with with the best practices so we look at",
    "start": "2909520",
    "end": "2915119"
  },
  {
    "text": "the best practices in two categories developer and administrative starting with the developer best practices",
    "start": "2915119",
    "end": "2921920"
  },
  {
    "text": "you should test with we recommend you should always test with the general purpose mode and then start",
    "start": "2921920",
    "end": "2928160"
  },
  {
    "text": "using the busting throughput mode consider using provision throughput throughput mode if you need",
    "start": "2928160",
    "end": "2933599"
  },
  {
    "text": "higher levels of throughput for example loading greater than two dot uh 2.1 tera",
    "start": "2933599",
    "end": "2939520"
  },
  {
    "text": "terabytes of data we recommend to use linux kernel 4.3",
    "start": "2939520",
    "end": "2944559"
  },
  {
    "text": "or newer i would also recommend using the efs mount helper",
    "start": "2944559",
    "end": "2949839"
  },
  {
    "text": "the architecture of efs is designed for a massive parallel scale out workloads",
    "start": "2949839",
    "end": "2954880"
  },
  {
    "text": "the more you can parallelize your workload the better performance you can expect and you can achieve this by using large",
    "start": "2954880",
    "end": "2961359"
  },
  {
    "text": "i o size multiple threads or other forms such as parallel i o",
    "start": "2961359",
    "end": "2966640"
  },
  {
    "text": "multiple instances and multiple directories on the next slide i will show you uh",
    "start": "2966640",
    "end": "2973359"
  },
  {
    "text": "what are the administrative best practices that we would recommend",
    "start": "2973359",
    "end": "2978480"
  },
  {
    "text": "uh we would always uh encourage our customers to save more by enabling a lifecycle management",
    "start": "2978960",
    "end": "2985520"
  },
  {
    "text": "policy which automatically moves any files which have not been accessed for say x",
    "start": "2985520",
    "end": "2990640"
  },
  {
    "text": "number of days from a standard storage class or one zone storage class to infrequently access storage class you",
    "start": "2990640",
    "end": "2998000"
  },
  {
    "text": "can save up to 92 on your storage cost by having this lifecycle management policy",
    "start": "2998000",
    "end": "3005040"
  },
  {
    "text": "use aws backup to further protect your data simplify amazon efs client management",
    "start": "3005040",
    "end": "3011200"
  },
  {
    "text": "using aws systems manager monitor throughput utilization bus credits and percentile limit and",
    "start": "3011200",
    "end": "3018880"
  },
  {
    "text": "lastly use aws budgets for the cost management",
    "start": "3018880",
    "end": "3024559"
  },
  {
    "text": "so before i talk about uh the next slide uh padma do we have any questions from",
    "start": "3024559",
    "end": "3029680"
  },
  {
    "text": "the audience on the best practices no questions so far thank you okay",
    "start": "3029680",
    "end": "3037359"
  },
  {
    "text": "so uh just to wrap up now on the on the next slide um here are a few lists of resources to",
    "start": "3037359",
    "end": "3044079"
  },
  {
    "text": "get you started we have uh detailed uh documentations with examples and",
    "start": "3044079",
    "end": "3049760"
  },
  {
    "text": "uh getting started guides sorry you can also view the efs announcements",
    "start": "3049760",
    "end": "3056240"
  },
  {
    "text": "and sessions of the reinvent 2020 and we also have blogs and white",
    "start": "3056240",
    "end": "3061599"
  },
  {
    "text": "papers on efs and we will be sharing these links in the chat",
    "start": "3061599",
    "end": "3067119"
  },
  {
    "text": "back to you padma thank you thank you for that we shall and i did",
    "start": "3067119",
    "end": "3073520"
  },
  {
    "text": "share the links here on the chat window and thank you for the demo we know uh and michelle for sharing all the",
    "start": "3073520",
    "end": "3079760"
  },
  {
    "text": "information and so everyone today we looked at amazon",
    "start": "3079760",
    "end": "3085119"
  },
  {
    "text": "elastic file system or efs for fast data access within your serverless applications",
    "start": "3085119",
    "end": "3091599"
  },
  {
    "text": "we also looked at best practice to build modern applications that improve agility so you can innovate",
    "start": "3091599",
    "end": "3097760"
  },
  {
    "text": "faster while saving on infrastructure costs thank you to our moderators",
    "start": "3097760",
    "end": "3102880"
  },
  {
    "text": "for posting the registration page for our upcoming episodes aws supports you dot com",
    "start": "3102880",
    "end": "3110000"
  },
  {
    "text": "please bookmark this page and we hope you can join us next time if there are any questions that were not",
    "start": "3110000",
    "end": "3115760"
  },
  {
    "text": "answered today please post them on forums.aws.amazon.com and email us any feedback to aws",
    "start": "3115760",
    "end": "3122960"
  },
  {
    "text": "supports you at amazon.com we look forward to hear from you tell us what else you would like to see",
    "start": "3122960",
    "end": "3129119"
  },
  {
    "text": "on this show thank you for joining us today at aws supports you",
    "start": "3129119",
    "end": "3135440"
  }
]