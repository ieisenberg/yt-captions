[
  {
    "start": "0",
    "end": "238000"
  },
  {
    "text": "hello everyone welcome to this session and welcome to reinforce the inaugural",
    "start": "1100",
    "end": "7410"
  },
  {
    "text": "security conference at AWS so I'm sure",
    "start": "7410",
    "end": "13380"
  },
  {
    "text": "you are excited about this conference and so am i back in let me start with a",
    "start": "13380",
    "end": "19109"
  },
  {
    "text": "quick story around how we came about with this with this talk back in",
    "start": "19109",
    "end": "24779"
  },
  {
    "text": "February Stephen Ptolemy here who is going to co-present with me from Cinna media they",
    "start": "24779",
    "end": "32880"
  },
  {
    "text": "were doing a migration program around kubernetes and they're moving over there some of the club kubernetes clusters to",
    "start": "32880",
    "end": "40379"
  },
  {
    "text": "Amazon eks and there were some security controls they were looking to implement and they were looking to looking for",
    "start": "40379",
    "end": "46590"
  },
  {
    "text": "guidance from us and with the solutions architecture team I sort of specialized",
    "start": "46590",
    "end": "53129"
  },
  {
    "text": "into containers and kubernetes security so we spent some time looking at some of",
    "start": "53129",
    "end": "58680"
  },
  {
    "text": "the solutions and came up with a proof of concept for Stephen and the team and",
    "start": "58680",
    "end": "64939"
  },
  {
    "text": "reinforced was about two to be nine announced so I talked to Stephen about",
    "start": "64939",
    "end": "71130"
  },
  {
    "text": "this idea how about we share our learning so that our customers the wider",
    "start": "71130",
    "end": "76200"
  },
  {
    "text": "customers learn and benefit benefit from our experience so this is the this is a",
    "start": "76200",
    "end": "83610"
  },
  {
    "text": "talk will go deep dive level 400 and we'll we have exciting demos which you",
    "start": "83610",
    "end": "89970"
  },
  {
    "text": "can learn get more insights about Amazon eks and kubernetes security in general",
    "start": "89970",
    "end": "95220"
  },
  {
    "text": "and we'll keep trying to keep this session fun and interesting so towards",
    "start": "95220",
    "end": "102030"
  },
  {
    "text": "the end of the session I'll be sharing some interesting demo around how we implemented the controls so stick around",
    "start": "102030",
    "end": "109140"
  },
  {
    "text": "till the end and this video will be on YouTube later as well so feel free to",
    "start": "109140",
    "end": "114899"
  },
  {
    "text": "refer it then so this is sdd for 1:1",
    "start": "114899",
    "end": "121350"
  },
  {
    "text": "security deep dive architecting security and governance through policy guardrails",
    "start": "121350",
    "end": "127049"
  },
  {
    "text": "in amazon eks my name is pavan mystery I'm a specialized security Solutions",
    "start": "127049",
    "end": "132599"
  },
  {
    "text": "Architect with AWS and I've been with her before around nearly five years now in various",
    "start": "132599",
    "end": "139140"
  },
  {
    "text": "security roles and I'm delighted to be joined by Stephen telling me from cinah",
    "start": "139140",
    "end": "144930"
  },
  {
    "text": "media Stephen is a principal cloud architect and will be sharing his story",
    "start": "144930",
    "end": "152100"
  },
  {
    "text": "around kubernetes migration and security and governance so before we go ahead",
    "start": "152100",
    "end": "158580"
  },
  {
    "text": "this let's look at the agenda on what we are going to cover I'll start with a quick Amazon eks overview it's it's",
    "start": "158580",
    "end": "167400"
  },
  {
    "text": "going to be real quick this is level 400 so we won't spend too much time set the basics and what I'm",
    "start": "167400",
    "end": "173970"
  },
  {
    "text": "really excited about is sharing with you the data plane security and the",
    "start": "173970",
    "end": "179360"
  },
  {
    "text": "authentication around Amazon eks so after that Stephen will come on stage",
    "start": "179360",
    "end": "185730"
  },
  {
    "text": "and go through the governance and security for kubernetes and the migration program he led and Stephen",
    "start": "185730",
    "end": "193830"
  },
  {
    "text": "brings a great amount of experience running live kubernetes clusters and",
    "start": "193830",
    "end": "199130"
  },
  {
    "text": "Amazon eks as well so that'd be a great session great section of the talk",
    "start": "199130",
    "end": "206930"
  },
  {
    "text": "finally we'll cover policy guardrails on Amazon eks using an open source tool",
    "start": "206930",
    "end": "212670"
  },
  {
    "text": "called open policy agent how many of you here have heard about urban policy agent",
    "start": "212670",
    "end": "219380"
  },
  {
    "text": "excellent quite a few great so looking forward to this before we go ahead there",
    "start": "219380",
    "end": "226410"
  },
  {
    "text": "are some container and kubernetes security sessions and workshops at the event so feel free to attend those and",
    "start": "226410",
    "end": "233580"
  },
  {
    "text": "make a note of those in agenda so to",
    "start": "233580",
    "end": "241140"
  },
  {
    "start": "238000",
    "end": "608000"
  },
  {
    "text": "help us understand get an understanding of the audience today how many of you",
    "start": "241140",
    "end": "247440"
  },
  {
    "text": "are using kubernetes today great so",
    "start": "247440",
    "end": "253500"
  },
  {
    "text": "that's about 3/4 or more of the audience and how many of you are using it in production great so half of the half of",
    "start": "253500",
    "end": "262109"
  },
  {
    "text": "the audience Rex then you're in the right place so let's begin with a quick Amazon eks",
    "start": "262109",
    "end": "267160"
  },
  {
    "text": "overview so within AWS we containers are first-class citizens",
    "start": "267160",
    "end": "275410"
  },
  {
    "text": "and we have various options for customers to run their containers on AWS",
    "start": "275410",
    "end": "280570"
  },
  {
    "text": "for the orchestration tools we have we launched we subject we launched ECS and",
    "start": "280570",
    "end": "289420"
  },
  {
    "text": "it was generally available in April 2015 ECS is a sort of container orchestration",
    "start": "289420",
    "end": "296530"
  },
  {
    "text": "service elastic container service and it provides sort of a managed control plane",
    "start": "296530",
    "end": "304360"
  },
  {
    "text": "and it provides our customers deep integration with HBS services so a nice",
    "start": "304360",
    "end": "312160"
  },
  {
    "text": "EECS sort of offers a couple of launch types as well where you'd run your containers",
    "start": "312160",
    "end": "318490"
  },
  {
    "text": "the first one is ec2 where you manage your own instances where your containers run and the second is far gateway if you",
    "start": "318490",
    "end": "327490"
  },
  {
    "text": "do not want the heavy lifting around managing you can your instances you would you would give that responsibility",
    "start": "327490",
    "end": "334030"
  },
  {
    "text": "to us and all you would worry about is your task definitions and making sure",
    "start": "334030",
    "end": "339520"
  },
  {
    "text": "your containers are running the right right controls which I it has been",
    "start": "339520",
    "end": "345880"
  },
  {
    "text": "really popular as well now in the open source world there are several options",
    "start": "345880",
    "end": "352150"
  },
  {
    "text": "on orchestrating your containers and kubernetes being the most popular one as",
    "start": "352150",
    "end": "357700"
  },
  {
    "text": "most of you know so with with a recent",
    "start": "357700",
    "end": "362920"
  },
  {
    "text": "sort of last CN CF for cloud native computing foundation survey we found that 50 51 % of the customers run",
    "start": "362920",
    "end": "370270"
  },
  {
    "text": "kubernetes on AWS or 51 % of kubernetes users actually run on AWS and that's one",
    "start": "370270",
    "end": "379720"
  },
  {
    "text": "of the reasons why we created elastic kubernetes service",
    "start": "379720",
    "end": "384760"
  },
  {
    "text": "what kubernetes service offers our customers is a data plane were running",
    "start": "384760",
    "end": "390220"
  },
  {
    "text": "on ec2 nodes or ec2 instances and we are soon sort of working on",
    "start": "390220",
    "end": "397080"
  },
  {
    "text": "bringing out AWS for our gate for eks as well so the reference to number 32 on",
    "start": "397080",
    "end": "403169"
  },
  {
    "text": "the slide is a reference to a github issue which will come to come to later",
    "start": "403169",
    "end": "410120"
  },
  {
    "text": "great so kubernetes consists of control",
    "start": "411830",
    "end": "417180"
  },
  {
    "text": "plane and a data plane so and the control plane consists of scheduler controller and HCD distributed key-value",
    "start": "417180",
    "end": "425539"
  },
  {
    "text": "store and the api server with which the data plane interacts with and customers",
    "start": "425539",
    "end": "431969"
  },
  {
    "text": "can interact with remotely as well using the endpoint and the data plane is made",
    "start": "431969",
    "end": "437669"
  },
  {
    "text": "up of nodes or ec2 instances and within each node runs a cubelet or the program",
    "start": "437669",
    "end": "446159"
  },
  {
    "text": "which is a primary node agent and cube proxy which is a kubernetes network",
    "start": "446159",
    "end": "451520"
  },
  {
    "text": "proxy so so that contains the workloads",
    "start": "451520",
    "end": "457139"
  },
  {
    "text": "or the containers which customers create actually run within those nodes and the",
    "start": "457139",
    "end": "463139"
  },
  {
    "text": "nodes can be from one to many as in customers can configure that cluster",
    "start": "463139",
    "end": "468539"
  },
  {
    "text": "according to their requirements and kubernetes control plane does all the orchestration management and scheduling",
    "start": "468539",
    "end": "475169"
  },
  {
    "text": "around it so amazon eks provides a",
    "start": "475169",
    "end": "482550"
  },
  {
    "text": "managed control plane which means that customers only need to manage their data",
    "start": "482550",
    "end": "487979"
  },
  {
    "text": "plane that consists of nodes and containers that run your applications AWS manages the control plane components",
    "start": "487979",
    "end": "495960"
  },
  {
    "text": "that we saw in the previous slide I mean one of the key features of Amazon eks is",
    "start": "495960",
    "end": "501150"
  },
  {
    "text": "its kubernetes certified confirm n't and what that means that it runs upstream",
    "start": "501150",
    "end": "508229"
  },
  {
    "text": "kubernetes and that when customers do that the applications running on Amazon",
    "start": "508229",
    "end": "516328"
  },
  {
    "text": "eks are fully compatible with applications running on any standard kubernetes environment so one of the",
    "start": "516329",
    "end": "524640"
  },
  {
    "text": "benefits or one of the obvious benefits that comes with managed control plane especially with AWS",
    "start": "524640",
    "end": "530329"
  },
  {
    "text": "compliance so this means that customers who are running workloads or have",
    "start": "530329",
    "end": "536929"
  },
  {
    "text": "requirements around these specific sort of compliance programs do not need to",
    "start": "536929",
    "end": "544399"
  },
  {
    "text": "worry about their managed control plane or getting their managed control plane compliant because today they already get",
    "start": "544399",
    "end": "551329"
  },
  {
    "text": "these compliance programs with their Amazon eks managed control plane this",
    "start": "551329",
    "end": "561470"
  },
  {
    "text": "also means that customers own a part of the shared responsibility model so for",
    "start": "561470",
    "end": "567319"
  },
  {
    "text": "the security and compliance of Amazon eks it consists of the data plane",
    "start": "567319",
    "end": "572329"
  },
  {
    "text": "security and container security that workloads are running on so this can be",
    "start": "572329",
    "end": "578959"
  },
  {
    "text": "sort of separated into data plane security lifecycle and contain a",
    "start": "578959",
    "end": "585470"
  },
  {
    "text": "security lifecycle and this is how I like to view it we will focus on the",
    "start": "585470",
    "end": "592069"
  },
  {
    "text": "data plane security lifecycle due to the scope of this presentation and there are",
    "start": "592069",
    "end": "598279"
  },
  {
    "text": "several other container security presentations which you can deep dive into in the in the conference which will",
    "start": "598279",
    "end": "604369"
  },
  {
    "text": "help you learn more about container security lifecycle as well so let's talk",
    "start": "604369",
    "end": "611269"
  },
  {
    "start": "608000",
    "end": "816000"
  },
  {
    "text": "about the data plane security and this is the section I'm really interested in in going through I strongly believe that",
    "start": "611269",
    "end": "618559"
  },
  {
    "text": "to build a useful threat model the underlying system needs to be well to be",
    "start": "618559",
    "end": "625879"
  },
  {
    "text": "well understood and to build a threat model and secure the data plane",
    "start": "625879",
    "end": "632679"
  },
  {
    "text": "customers need to understand what's running within it to make make to get",
    "start": "632919",
    "end": "638629"
  },
  {
    "text": "the value out of it so let's understand this through a quick demo so in this",
    "start": "638629",
    "end": "645350"
  },
  {
    "text": "demo we'll log on to an active node which is part of the Amazon eks cluster and look at the cubelet configuration",
    "start": "645350",
    "end": "652459"
  },
  {
    "text": "will use cube control which is a CLI client to interact with nodes and we'll",
    "start": "652459",
    "end": "658399"
  },
  {
    "text": "observe that the binaries which are run within that within the node will also",
    "start": "658399",
    "end": "663589"
  },
  {
    "text": "look into I'm sort of getting a shell and see what what runs underlying the node so what",
    "start": "663589",
    "end": "669920"
  },
  {
    "text": "you get a good idea of what happens within your node in a real time basis so",
    "start": "669920",
    "end": "676820"
  },
  {
    "text": "this demo provides some insights into the components involved on on the data",
    "start": "676820",
    "end": "682070"
  },
  {
    "text": "plane and how they operate so let's jump right in okay so this is",
    "start": "682070",
    "end": "690830"
  },
  {
    "text": "actually what will what will go through okay so we are logged on to right here",
    "start": "690830",
    "end": "699410"
  },
  {
    "text": "we logged on to a node and we take a look at the cubelet process running on the node so there are several parameters",
    "start": "699410",
    "end": "706010"
  },
  {
    "text": "which we are which are running here first we know the container run time which is docker will note the networking",
    "start": "706010",
    "end": "713920"
  },
  {
    "text": "parameters as well we know that the nodes are labeled using eks control which is how we build this cluster",
    "start": "713920",
    "end": "722560"
  },
  {
    "text": "authentication authorization is done through webhook this is something we'll come back and PCI sorry the PKI configs",
    "start": "722560",
    "end": "729890"
  },
  {
    "text": "now we'll run a watch on the docker run time so what we see is that docker is",
    "start": "729890",
    "end": "735560"
  },
  {
    "text": "running as a process at the runtime and container D and container D same are run",
    "start": "735560",
    "end": "740870"
  },
  {
    "text": "to manage the containers and how they are brought up and killed in the next",
    "start": "740870",
    "end": "746420"
  },
  {
    "text": "window I'm running exacts no beefy BPF which is a trace running on the BPF are",
    "start": "746420",
    "end": "754220"
  },
  {
    "text": "using our trace running on all the exec calls happening in the kernel for these four binaries so now what we'll try and",
    "start": "754220",
    "end": "762500"
  },
  {
    "text": "do in the other window is use cube control which is the client he would use to bring up a small container and get a",
    "start": "762500",
    "end": "770450"
  },
  {
    "text": "shell into it so this will show really what happens and goes on when you create",
    "start": "770450",
    "end": "775580"
  },
  {
    "text": "a container or a pod within the node so what we see really is the same calls run",
    "start": "775580",
    "end": "781250"
  },
  {
    "text": "C and run C starts the container and locks the container and then you'll see that the new containers are brought up",
    "start": "781250",
    "end": "787760"
  },
  {
    "text": "and you get a shell as well so the shell is a process within docker and you",
    "start": "787760",
    "end": "793070"
  },
  {
    "text": "follow the same process for bringing up that container that that Pro with Runcie when we exit out of the",
    "start": "793070",
    "end": "801880"
  },
  {
    "text": "container interesting thing happens where the two containers are the two",
    "start": "801880",
    "end": "807890"
  },
  {
    "text": "processes are deleted and run see again it's called and deletes and kills all",
    "start": "807890",
    "end": "814040"
  },
  {
    "text": "the containers so hopefully this provided you with some really real time",
    "start": "814040",
    "end": "822110"
  },
  {
    "text": "sort of insights into what really goes on in in bringing up a container or a pod within your node so what this what",
    "start": "822110",
    "end": "833060"
  },
  {
    "text": "this what we learnt is that cubelet is the main sort of owns that config for",
    "start": "833060",
    "end": "838910"
  },
  {
    "text": "the node and the container runtime make does all the heavy lifting around managing the containers within the node",
    "start": "838910",
    "end": "845060"
  },
  {
    "text": "to help with the threat model for the data plane so you make questions sort of who's responsible for these components",
    "start": "845060",
    "end": "852800"
  },
  {
    "text": "so you saw a container D container the shame or run see who's really who really",
    "start": "852800",
    "end": "858500"
  },
  {
    "text": "owns these open source projects and and how is the security managed that's a very valid question",
    "start": "858500",
    "end": "864110"
  },
  {
    "text": "so for container D it's graduated CN CF or cloud native computing foundation",
    "start": "864110",
    "end": "871550"
  },
  {
    "text": "project and it goes through security review and the report is published on",
    "start": "871550",
    "end": "876860"
  },
  {
    "text": "the github repository for run C interestingly it's an open container",
    "start": "876860",
    "end": "882200"
  },
  {
    "text": "initiative project and it has a different management platform what I",
    "start": "882200",
    "end": "887510"
  },
  {
    "text": "would recommend is you take a look at this recent a talk given at cube corn",
    "start": "887510",
    "end": "894100"
  },
  {
    "text": "kubernetes conference in Barcelona which explains and deep dives into the security reviews now having mentioned",
    "start": "894100",
    "end": "902030"
  },
  {
    "text": "run C you might have M you might be aware of this vulnerability which came",
    "start": "902030",
    "end": "907490"
  },
  {
    "text": "out in February and we published security bulletins around it so there",
    "start": "907490",
    "end": "915740"
  },
  {
    "text": "have been a few kubernetes and container security issues lately which we have published and communicated to our",
    "start": "915740",
    "end": "921440"
  },
  {
    "text": "customers we also publish deep dive analysis in this case for run see we had",
    "start": "921440",
    "end": "926990"
  },
  {
    "text": "a blog which was a real deep dive analysis of the the actual",
    "start": "926990",
    "end": "932500"
  },
  {
    "text": "vulnerability and this is something you can fold into your threat model as well",
    "start": "932500",
    "end": "939540"
  },
  {
    "text": "and kubernetes has a security support cycle which you need to be aware of so",
    "start": "939540",
    "end": "946480"
  },
  {
    "text": "amazon eks aligns with that support cycle and we provide guidance on what",
    "start": "946480",
    "end": "952029"
  },
  {
    "text": "that upgrade cycle looks like we wrote a blog recently and have recently upgraded",
    "start": "952029",
    "end": "958300"
  },
  {
    "text": "or provided support for 1.13 which as this slide shows was announced so last",
    "start": "958300",
    "end": "965860"
  },
  {
    "text": "week we announced 1.13 which some of you may have may have noticed so at a single",
    "start": "965860",
    "end": "972010"
  },
  {
    "text": "point we support three versions and provide guidance on how to upgrade the the managed control plane and the worker",
    "start": "972010",
    "end": "980800"
  },
  {
    "text": "nodes as well so the key takeaway from the data plane security lifecycle is",
    "start": "980800",
    "end": "988650"
  },
  {
    "text": "sort of take sort of have these have these controls baked in make sure before",
    "start": "988650",
    "end": "994030"
  },
  {
    "text": "going into production have the test update and upgrade program and document it so let's move on to authentication in",
    "start": "994030",
    "end": "1005730"
  },
  {
    "text": "the context of building your threat model so you might have noticed in the",
    "start": "1005730",
    "end": "1011730"
  },
  {
    "text": "demo we use the cube Kotaku control to bring up the container and we also used",
    "start": "1011730",
    "end": "1019500"
  },
  {
    "text": "looked at the cubelet parameters for authentication so this is very interesting because the way we",
    "start": "1019500",
    "end": "1025319"
  },
  {
    "text": "authenticate is using the web hook mechanism in kubernetes so so to use the",
    "start": "1025319",
    "end": "1033810"
  },
  {
    "start": "1029000",
    "end": "1251000"
  },
  {
    "text": "identity from AWS and not create an additional user or role within",
    "start": "1033810",
    "end": "1039240"
  },
  {
    "text": "kubernetes cluster amazon eks uses a bearer token web hook feature in",
    "start": "1039240",
    "end": "1044428"
  },
  {
    "text": "kubernetes which we noted earlier in the config and through AWS I am",
    "start": "1044429",
    "end": "1049470"
  },
  {
    "text": "Authenticator this is done through a to be as I am Authenticator so it's an open",
    "start": "1049470",
    "end": "1055140"
  },
  {
    "text": "source project which I've linked here and it runs on a node as a client and on",
    "start": "1055140",
    "end": "1060390"
  },
  {
    "text": "the masters as a server so when whether a request is coming from a cubelet or a cube control or an",
    "start": "1060390",
    "end": "1069030"
  },
  {
    "text": "application which you've created within your cluster and the the request is made",
    "start": "1069030",
    "end": "1074490"
  },
  {
    "text": "using that token which is generated by AWS I am and sent to the API server and",
    "start": "1074490",
    "end": "1081030"
  },
  {
    "text": "the API server then looks at the request and send it sends it again to AWS I am",
    "start": "1081030",
    "end": "1088020"
  },
  {
    "text": "for authentication and then the authorized request sort of authenticated",
    "start": "1088020",
    "end": "1093120"
  },
  {
    "text": "request is sent to you kubernetes api server for authorization through kubernetes are back so role based access",
    "start": "1093120",
    "end": "1099539"
  },
  {
    "text": "control and once this is completed or response is then sent to the client so",
    "start": "1099539",
    "end": "1105330"
  },
  {
    "text": "let's take a let's look at a quick demo around this and in this demo what we'll see is really look at the token in in",
    "start": "1105330",
    "end": "1113640"
  },
  {
    "text": "depth what it consists of and also from a remote host or a rogue host on the",
    "start": "1113640",
    "end": "1119880"
  },
  {
    "text": "internet so using some parameters take a look at how authentication works so",
    "start": "1119880",
    "end": "1125700"
  },
  {
    "text": "we'll end list the API endpoints and the particular endpoint in this demo right",
    "start": "1125700",
    "end": "1134120"
  },
  {
    "text": "so here we look at the endpoint or generate take take a look at the API",
    "start": "1134120",
    "end": "1140220"
  },
  {
    "text": "endpoint and the token which is a base64 encoded token we decode that token and",
    "start": "1140220",
    "end": "1147120"
  },
  {
    "text": "what we find is something familiar so we",
    "start": "1147120",
    "end": "1153360"
  },
  {
    "text": "have an SDS get caller identity call and it's it's making a request using the",
    "start": "1153360",
    "end": "1161549"
  },
  {
    "text": "known segue for signature so you see the parameters the has signed headers and",
    "start": "1161549",
    "end": "1168150"
  },
  {
    "text": "the signature which is the same format goes for AWS I am Authenticator as well",
    "start": "1168150",
    "end": "1174419"
  },
  {
    "text": "so when you decode the request coming out from the Authenticator it has the same STS get caller identity so here we",
    "start": "1174419",
    "end": "1183870"
  },
  {
    "text": "are just logging into a remote host it can be any host on the internet it's a",
    "start": "1183870",
    "end": "1189120"
  },
  {
    "text": "Ubuntu host and what we are establishing here is it doesn't have any",
    "start": "1189120",
    "end": "1194179"
  },
  {
    "text": "it blew ass credentials or cubelet or any kubernetes parameters within it and",
    "start": "1194179",
    "end": "1201409"
  },
  {
    "text": "what we are doing is a curl or an HD HTTP request with a header which has the",
    "start": "1201409",
    "end": "1206419"
  },
  {
    "text": "cluster cluster name within it and we are using a token which we generate",
    "start": "1206419",
    "end": "1212119"
  },
  {
    "text": "using the HBS I am Authenticator so when we use this request and point it to the",
    "start": "1212119",
    "end": "1219859"
  },
  {
    "text": "API server endpoint we get the we are",
    "start": "1219859",
    "end": "1226039"
  },
  {
    "text": "authenticated against the API so we are successfully authenticated and we get a",
    "start": "1226039",
    "end": "1231079"
  },
  {
    "text": "list of all the API endpoints in this case we are listing validating and",
    "start": "1231079",
    "end": "1237349"
  },
  {
    "text": "mutating web hooks so that's something we'll come back to later and when the",
    "start": "1237349",
    "end": "1244189"
  },
  {
    "text": "request expires we won't be able to authenticate and there's a failed or unauthorized output so hopefully this",
    "start": "1244189",
    "end": "1254319"
  },
  {
    "text": "gave you a good understanding around how authentication works within Amazon eks",
    "start": "1254319",
    "end": "1259699"
  },
  {
    "text": "and what's the role of HBS I am Authenticator so we will take a broader",
    "start": "1259699",
    "end": "1268159"
  },
  {
    "text": "look into into I am for eks but before we do that I'd like to point out that",
    "start": "1268159",
    "end": "1274669"
  },
  {
    "text": "when using ec2 instances as nodes for the kubernetes eks cluster customers",
    "start": "1274669",
    "end": "1281629"
  },
  {
    "text": "benefit from other AWS security services as well some of which are listed here so",
    "start": "1281629",
    "end": "1289009"
  },
  {
    "text": "you can use the features which most of these services have like VPC endpoints",
    "start": "1289009",
    "end": "1294679"
  },
  {
    "text": "and I wrote a blog last year around using secrets manager for example to",
    "start": "1294679",
    "end": "1299929"
  },
  {
    "text": "connect with your your nodes and use secrets from AWS secrets manager and you",
    "start": "1299929",
    "end": "1306919"
  },
  {
    "text": "can do so for some of the other services and leverage the value they offer so",
    "start": "1306919",
    "end": "1313879"
  },
  {
    "text": "when a cluster is created within Amazon eks a role is assigned to to the nodes",
    "start": "1313879",
    "end": "1319429"
  },
  {
    "text": "and this role is inherited by the pods created within the nodes as well",
    "start": "1319429",
    "end": "1326840"
  },
  {
    "text": "so we are working on a road map feature to enable the fine-grained eks I am",
    "start": "1326840",
    "end": "1333390"
  },
  {
    "text": "roles for pods which which is a request from quite a few of our customers and",
    "start": "1333390",
    "end": "1338600"
  },
  {
    "text": "speaking of our road map the containers team or the product roadmap is available",
    "start": "1338600",
    "end": "1344940"
  },
  {
    "text": "publicly on github and that's one of the unique thing that the containers team have done the number 32 which are",
    "start": "1344940",
    "end": "1352320"
  },
  {
    "text": "referred to in my previous slide is a reference to a work-in-progress issue",
    "start": "1352320",
    "end": "1357440"
  },
  {
    "text": "for Fargate on for eks and we constantly",
    "start": "1357440",
    "end": "1365400"
  },
  {
    "text": "communicate to our customers on the new features that we ship and these are some of the relevant features around security",
    "start": "1365400",
    "end": "1371460"
  },
  {
    "text": "and storage that our customers really liked so the second input around your",
    "start": "1371460",
    "end": "1377790"
  },
  {
    "start": "1375000",
    "end": "1510000"
  },
  {
    "text": "threat model for the data plane security is you do the to review the cluster I am",
    "start": "1377790",
    "end": "1384600"
  },
  {
    "text": "and remit limit the resource access and use the container roadmap so strongly",
    "start": "1384600",
    "end": "1390540"
  },
  {
    "text": "advise you to open issues and communicate directly with our product team and ask for feature requests or at",
    "start": "1390540",
    "end": "1397260"
  },
  {
    "text": "least take a look at those and and monitor them so quickly want to touch",
    "start": "1397260",
    "end": "1405690"
  },
  {
    "text": "upon container security life cycle so CIS so that there are these are some of",
    "start": "1405690",
    "end": "1412140"
  },
  {
    "text": "the some of the journeys that the customers would take not in this particular fashion but one of the key",
    "start": "1412140",
    "end": "1418680"
  },
  {
    "text": "features that was announced with 1.13 is pod security policies and this is something I'm really excited about so",
    "start": "1418680",
    "end": "1425340"
  },
  {
    "text": "take a look at the blog which was written recently by my colleague Michael hausenblas and i want to leave you with",
    "start": "1425340",
    "end": "1432870"
  },
  {
    "text": "a couple of messages around the best practice to how he how you'd secure your",
    "start": "1432870",
    "end": "1438630"
  },
  {
    "text": "Amazon ETS data plane and container security and I'd like to hand it over to",
    "start": "1438630",
    "end": "1443640"
  },
  {
    "text": "Steven for for the next session so thank you Mike yes okay good",
    "start": "1443640",
    "end": "1454230"
  },
  {
    "text": "excellent so hi everyone I'm Steven Ptolemy I work for a company called Sena",
    "start": "1454230",
    "end": "1459360"
  },
  {
    "text": "media who you may not have ever heard of so just as a kind of background of who sent a video are we",
    "start": "1459360",
    "end": "1464370"
  },
  {
    "text": "make video solutions for service providers all the way around the world and we're - probably globally so you may",
    "start": "1464370",
    "end": "1470850"
  },
  {
    "text": "recognize some TV providers on that on that thing but I'm not going to talk about TV and I'm not gonna talk about",
    "start": "1470850",
    "end": "1476400"
  },
  {
    "text": "any of that stuff I'm going to talk about ETS and how we're using it and we're using it that we're using it",
    "start": "1476400",
    "end": "1482780"
  },
  {
    "text": "really to to underpin a number of our different products and solutions so we",
    "start": "1482780",
    "end": "1488520"
  },
  {
    "text": "have our foundation platform which is there for our broadcast systems and then we have the infinite platform which is",
    "start": "1488520",
    "end": "1495030"
  },
  {
    "text": "hosted in Amazon we actually run it as a service and manage it ourselves and then",
    "start": "1495030",
    "end": "1500550"
  },
  {
    "text": "we have things in terms of videos security video processing and cloud DVR so again we take security very seriously",
    "start": "1500550",
    "end": "1505890"
  },
  {
    "text": "because it's underpinning the revenue of our customers so I just want to give you",
    "start": "1505890",
    "end": "1512580"
  },
  {
    "start": "1510000",
    "end": "1827000"
  },
  {
    "text": "a kind of an idea of our deployment architecture and how we're actually going about deploying services both on",
    "start": "1512580",
    "end": "1518220"
  },
  {
    "text": "Prem and in the cloud because some of our customers have requirements for on Primm some are happy to be in the cloud",
    "start": "1518220",
    "end": "1523650"
  },
  {
    "text": "and our sort of dilemma here was really how do we get our applications to be built at speed with agility whilst being",
    "start": "1523650",
    "end": "1531360"
  },
  {
    "text": "able to support these two different worlds the cloud world and on-prem world and so what we did was we made sure that",
    "start": "1531360",
    "end": "1537180"
  },
  {
    "text": "all of our app teams right - the kubernetes api so when they're deploying that is the api that they are",
    "start": "1537180",
    "end": "1542910"
  },
  {
    "text": "interacting with and then we have a platform team who are there to go that kubernetes layer down onto the",
    "start": "1542910",
    "end": "1549930"
  },
  {
    "text": "underlying platforms and so when it comes to on-premise we're using openshift as our container platform and",
    "start": "1549930",
    "end": "1555960"
  },
  {
    "text": "until recently we've been using open shipped also in Amazon but have been migrating to eks and that's what I'm",
    "start": "1555960",
    "end": "1562020"
  },
  {
    "text": "going to talk to you a little bit more about today but before I do I'm just going to give you a kind of an idea just so you can kind of compare and contrast",
    "start": "1562020",
    "end": "1567600"
  },
  {
    "text": "the difference between what it looks like when you're rolling your own kubernetes in Amazon versus eks so this",
    "start": "1567600",
    "end": "1574680"
  },
  {
    "text": "is the typical deployment architecture we would have so to the to the left hand side we might have some low balances",
    "start": "1574680",
    "end": "1580920"
  },
  {
    "text": "that's bringing in traffic from the outside it's distributing to various nodes of ec2 instances that are acting",
    "start": "1580920",
    "end": "1586800"
  },
  {
    "text": "as the kubernetes workers and those kubernetes workers are then being allocated pods and containers by the",
    "start": "1586800",
    "end": "1594360"
  },
  {
    "text": "by the control plane so in this case because we are rolling our own kubernetes we have to bring our own",
    "start": "1594360",
    "end": "1599940"
  },
  {
    "text": "control plane so you can see we're bringing our masters we need a load balancer in front of those for high availability and scaling and then we",
    "start": "1599940",
    "end": "1607049"
  },
  {
    "text": "have to have another number of other things that we have to stand up so because OpenShift is run using ansible",
    "start": "1607049",
    "end": "1612899"
  },
  {
    "text": "we need a deployer that can SSH into these machines and provision them we need a young repo so we can install the",
    "start": "1612899",
    "end": "1618690"
  },
  {
    "text": "rpms and our own docker registry for all of the containers so it's quite a bit of infrastructure that we're having to to",
    "start": "1618690",
    "end": "1624929"
  },
  {
    "text": "manage and secure the lifecycle of and we've had quite a lot of success in",
    "start": "1624929",
    "end": "1630570"
  },
  {
    "text": "doing this it's actually being quite successful as as Pavan said we've we've rolled out many kubernetes very large",
    "start": "1630570",
    "end": "1636480"
  },
  {
    "text": "kubernetes clusters beaufort bream and in the clouds we've gone through all the experience of upgrading those things and",
    "start": "1636480",
    "end": "1642120"
  },
  {
    "text": "the pains of doing so keeping track with the latest versions of kubernetes and that's given us a nice consistent",
    "start": "1642120",
    "end": "1647730"
  },
  {
    "text": "deployment pattern for on-prem and AWS but there is a real challenge there with keeping up to date with the upgrades",
    "start": "1647730",
    "end": "1653370"
  },
  {
    "text": "when you're rolling your own your own kubernetes cluster keeping on top of a new release every six months it might",
    "start": "1653370",
    "end": "1659789"
  },
  {
    "text": "not seem like much but it's when you're in a larger organization that can be really difficult also because we're",
    "start": "1659789",
    "end": "1665309"
  },
  {
    "text": "provisioning our own infrastructure so we're standing up these ec2 instances ourselves we sort of miss out on a few nice features that you might come to",
    "start": "1665309",
    "end": "1671850"
  },
  {
    "text": "expect like auto scaling groups or other things now these are things for sure we could do but there's a lot of extra work",
    "start": "1671850",
    "end": "1678600"
  },
  {
    "text": "we're having to do ourselves on top of you know an open-source kubernetes distribution and also the overhead of",
    "start": "1678600",
    "end": "1685799"
  },
  {
    "text": "managing our own operating system so we bring her our own CentOS operating system we have to secure it manage it",
    "start": "1685799",
    "end": "1691769"
  },
  {
    "text": "and make sure it works with that particular version of openshift so it's quite a lot of work there for us so if",
    "start": "1691769",
    "end": "1697230"
  },
  {
    "text": "we compare and contrast kind of how that looks with open shift to eks you'll notice immediately the coin a lot of the",
    "start": "1697230",
    "end": "1703950"
  },
  {
    "text": "paint has been taken away from us the control plane is now managed using eks",
    "start": "1703950",
    "end": "1709309"
  },
  {
    "text": "we've then got cloud formation templates coming in instead of using ansible so we don't need to stand that infrastructure",
    "start": "1709309",
    "end": "1715529"
  },
  {
    "text": "up we can use the ami provided with eks so again that's something we don't need to manage a lifecycle of and again we",
    "start": "1715529",
    "end": "1722580"
  },
  {
    "text": "can also make use of the ECR the elastic container registry so get that's a nice secured registry we don't need to worry",
    "start": "1722580",
    "end": "1728179"
  },
  {
    "text": "about it there's a whole bunch of things there but Amazon are taking care of for us in the security management of our",
    "start": "1728179",
    "end": "1734360"
  },
  {
    "text": "system I just wanted to share a few kind of things that we've we've had to experience as we've moved from rolling",
    "start": "1734360",
    "end": "1740179"
  },
  {
    "text": "our own particular because we've been rolling an open shift so open shift takes a slightly opinionated view to to",
    "start": "1740179",
    "end": "1746119"
  },
  {
    "text": "how it deploys kubernetes which is a good thing because at least it's sort of controlled and they can test the lifecycle of it but they bring a few",
    "start": "1746119",
    "end": "1751879"
  },
  {
    "text": "extra services in one of which is the open chip router which provides you with the ability to sort of do host my host",
    "start": "1751879",
    "end": "1759950"
  },
  {
    "text": "or path mapping into a single ingress point and then that can distribute to containers within the kubernetes cluster",
    "start": "1759950",
    "end": "1765559"
  },
  {
    "text": "we had to move that over to an open source option which is the ingress controller so that's a standard thing",
    "start": "1765559",
    "end": "1772309"
  },
  {
    "text": "that kubernetes does out of the box and there's an engine x1 out there which we decided to use those also one that",
    "start": "1772309",
    "end": "1777980"
  },
  {
    "text": "integrates with al B's but for our workloads it just wasn't quite the right fit we moved from using docker",
    "start": "1777980",
    "end": "1783830"
  },
  {
    "text": "registries to SEO which again is great a great thing for us there were some changes we had to do in our CI CD",
    "start": "1783830",
    "end": "1790940"
  },
  {
    "text": "workflow to make sure that we could authenticate correctly with ECR so that when we're pushing our containers into",
    "start": "1790940",
    "end": "1797029"
  },
  {
    "text": "it everything worked as it should do but there are a few things that we've had to bring ourselves and now we're in now",
    "start": "1797029",
    "end": "1803119"
  },
  {
    "text": "responsible for the lifecycle the security lifecycle of those include the kubernetes dashboard so there isn't one",
    "start": "1803119",
    "end": "1808730"
  },
  {
    "text": "of those available with the case at this moment in time cluster autoscaler metric service there's a bunch of things there",
    "start": "1808730",
    "end": "1814610"
  },
  {
    "text": "that we're having to manage the lifecycle of but we're working with Amazon to to sort of request features so",
    "start": "1814610",
    "end": "1821419"
  },
  {
    "text": "they start to take take care of those components as well for us now we do",
    "start": "1821419",
    "end": "1828669"
  },
  {
    "start": "1827000",
    "end": "1981000"
  },
  {
    "text": "deployments on prim and we do deployments in AWS I just wanted to kind of share a little bit of our how our",
    "start": "1828669",
    "end": "1834409"
  },
  {
    "text": "hybrid of those things work so for those of you not familiar with private link",
    "start": "1834409",
    "end": "1839980"
  },
  {
    "text": "this is just a very quick recap of how that works so typically left-hand side of the diagram you've got a provider",
    "start": "1839980",
    "end": "1846649"
  },
  {
    "text": "network of VPC that's in being the provider of a service so it might have a bunch of ec2 instances running and a",
    "start": "1846649",
    "end": "1853309"
  },
  {
    "text": "network load balancer in front of it and exposes those through an endpoint service to allow other VP C's to then",
    "start": "1853309",
    "end": "1859820"
  },
  {
    "text": "connect into it and so we've got then a client VPC here with a private subnet it",
    "start": "1859820",
    "end": "1865580"
  },
  {
    "text": "has an endpoint which has an Annie and I inside of its V PC so it looks to its",
    "start": "1865580",
    "end": "1870860"
  },
  {
    "text": "point of view as if it's inside its V PC and that allows them access through to that NLB and we've been making quite",
    "start": "1870860",
    "end": "1878150"
  },
  {
    "text": "good use of this technology because it simplifies a number of things it also secures things for us so this is kind of",
    "start": "1878150",
    "end": "1885410"
  },
  {
    "text": "going back to the the architecture I showed on the previous slide sort of overlaying the two of them so again as we had before we've got the the",
    "start": "1885410",
    "end": "1891680"
  },
  {
    "text": "kubernetes workers they're running and what we do is we point an NLB at those kubernetes workers typically to the",
    "start": "1891680",
    "end": "1896990"
  },
  {
    "text": "ingress controller that then allows us to expose an endpoint service into a",
    "start": "1896990",
    "end": "1902090"
  },
  {
    "text": "remote V PC now in our case it's not a remote V PC of a customer typically it's one we're managing because we're wanting",
    "start": "1902090",
    "end": "1908810"
  },
  {
    "text": "to connect to an on-prem network and so we came up with this concept of a proxy V PC is something we work with Amazon on",
    "start": "1908810",
    "end": "1914420"
  },
  {
    "text": "and effectively what it does is it it it creates a remote V PC that's carved out with a cider range that's within the",
    "start": "1914420",
    "end": "1921590"
  },
  {
    "text": "on-prem Network so typically we find we might be provisioning our V pcs with fairly wide IP ranges and so typically",
    "start": "1921590",
    "end": "1929240"
  },
  {
    "text": "we might end up clashing with something on-prem so what we do is we create this proxy DBC that's got a much smaller",
    "start": "1929240",
    "end": "1935060"
  },
  {
    "text": "number of IP addresses it doesn't need money because they're mostly these endpoints and then what we do is we take our own Bream network we connect them up",
    "start": "1935060",
    "end": "1941810"
  },
  {
    "text": "typically through AWS Direct Connect and then when something on Prem so if it's maybe a Cooper Nettie's cluster on Prem",
    "start": "1941810",
    "end": "1948080"
  },
  {
    "text": "wanting to connect in or clients they come in through the Direct Connect they hit the endpoint and then that resolves",
    "start": "1948080",
    "end": "1953780"
  },
  {
    "text": "to services in in side of e KS we can do the same thing in Reverse as well so some service that's over in our on Prem",
    "start": "1953780",
    "end": "1960770"
  },
  {
    "text": "kubernetes needs to be accessed from eks we can come through an endpoint pointing in an lb and then that comes through to",
    "start": "1960770",
    "end": "1967580"
  },
  {
    "text": "the notes that are on Prem so again this is giving us a really nice deployment architecture for sort of having a hybrid",
    "start": "1967580",
    "end": "1973880"
  },
  {
    "text": "between the two but with very clear security boundaries between what's on Prem and what's in the cloud so I just",
    "start": "1973880",
    "end": "1983540"
  },
  {
    "start": "1981000",
    "end": "1997000"
  },
  {
    "text": "wanted to give you a little bit of a some practical experience that we've has in sort of governance governance around",
    "start": "1983540",
    "end": "1990710"
  },
  {
    "text": "deployment of kubernetes and these are real examples of software we've had to work through so I'm not",
    "start": "1990710",
    "end": "1995840"
  },
  {
    "text": "making their stuff up so I just wanted to put a quote up there you may be familiar with this one comes from",
    "start": "1995840",
    "end": "2001450"
  },
  {
    "start": "1997000",
    "end": "2034000"
  },
  {
    "text": "spider-man with great power comes great responsibility and this is very true for kubernetes kubernetes is a very very",
    "start": "2001450",
    "end": "2008380"
  },
  {
    "text": "powerful framework it has a lot of parts to it and they're very a lot of power that you're giving to your engineers",
    "start": "2008380",
    "end": "2014710"
  },
  {
    "text": "because they can deploy applications very very rapidly but there's a lot of responsibility then on the security side",
    "start": "2014710",
    "end": "2020350"
  },
  {
    "text": "to make sure silly things don't happen so I'm going to give you three deploying",
    "start": "2020350",
    "end": "2026320"
  },
  {
    "text": "three powers that you have three examples of powers that you might have when you deploy your kubernetes and some",
    "start": "2026320",
    "end": "2032320"
  },
  {
    "text": "of the responsibilities of those so first one of these deployment powers that you have is the marketplace of",
    "start": "2032320",
    "end": "2038409"
  },
  {
    "start": "2034000",
    "end": "2066000"
  },
  {
    "text": "containers right there's loads and loads and loads of open source containers that you can go and grab from docker hub there might be a helmet art that you can",
    "start": "2038409",
    "end": "2045429"
  },
  {
    "text": "go and grab that will automatically provision that into your cluster so you can spin your cluster you eks cluster up",
    "start": "2045429",
    "end": "2051220"
  },
  {
    "text": "download one of these charts and off you go you've got containers up and running and this is a lot of power right there means",
    "start": "2051220",
    "end": "2057608"
  },
  {
    "text": "that it's very very easy for people to manage these open source technologies you know Etsy D or whatever it is that",
    "start": "2057609",
    "end": "2064060"
  },
  {
    "text": "you want to do so a lot of power there but the responsibility then is to make sure that you're auditing what is going",
    "start": "2064060",
    "end": "2071050"
  },
  {
    "start": "2066000",
    "end": "2117000"
  },
  {
    "text": "on here right those helm charts they could have been attacked by somebody somebody could come in and done",
    "start": "2071050",
    "end": "2076270"
  },
  {
    "text": "something bad right or made a malicious yeah mph on distributed it in some way and if you're not auditing that perhaps",
    "start": "2076270",
    "end": "2082868"
  },
  {
    "text": "that llamo is actually opening an ELB through through the through the node",
    "start": "2082869",
    "end": "2088300"
  },
  {
    "text": "ports that you can provision inside of kubernetes to an attacker to then go and compromise your system or they might be",
    "start": "2088300",
    "end": "2093878"
  },
  {
    "text": "pointing at a container and that container itself has been compromised and there are a number of examples and",
    "start": "2093879",
    "end": "2099070"
  },
  {
    "text": "incidences out there in terms of this kind of issue so a number of places",
    "start": "2099070",
    "end": "2104589"
  },
  {
    "text": "where an attacker can come in and if you're not auditing through this lifecycle of things you're just getting people going out and they're going yep",
    "start": "2104589",
    "end": "2110619"
  },
  {
    "text": "I'll just run that thing in production what could go wrong you can see some serious vulnerability there there's some",
    "start": "2110619",
    "end": "2118119"
  },
  {
    "start": "2117000",
    "end": "2162000"
  },
  {
    "text": "great tools that we've been using to help us along with this if you're not familiar with Quay Quay is great because",
    "start": "2118119",
    "end": "2124150"
  },
  {
    "text": "it scans a lot of these open source docker containers so you can see here some of the",
    "start": "2124150",
    "end": "2129820"
  },
  {
    "text": "different versions of the container and whether they have any security issues so this is great in terms of ongoing",
    "start": "2129820",
    "end": "2134860"
  },
  {
    "text": "monitoring of things and you can run this yourself where you can run the public version and also we make great",
    "start": "2134860",
    "end": "2141610"
  },
  {
    "text": "use of VCR for this Pope so we actually our contain a life cycle always brings in containers it verifies their okay we",
    "start": "2141610",
    "end": "2149230"
  },
  {
    "text": "put them through a number of security checks and then we push them to ECR and then we only deploy our containers from",
    "start": "2149230",
    "end": "2156130"
  },
  {
    "text": "our ECR so we know that we have controlled the life cycle of those containers so the second great power",
    "start": "2156130",
    "end": "2165970"
  },
  {
    "text": "that you get and this is a great Amazon power but when combined with kubernetes again a really good power so I'm just",
    "start": "2165970",
    "end": "2172510"
  },
  {
    "text": "actually showing this is actually a non kubernetes picture it's just a very traditional picture of an ec2 kind of",
    "start": "2172510",
    "end": "2177730"
  },
  {
    "text": "world where you might have had a couple of VMs types of VMs some front ends some",
    "start": "2177730",
    "end": "2182830"
  },
  {
    "text": "back ends and they might have an IM role associated with them that gave them access to a number of services so you",
    "start": "2182830",
    "end": "2188410"
  },
  {
    "text": "know front end buckets or their back end buckets maybe a Kinesis data stream for pushing your log files and so on so this",
    "start": "2188410",
    "end": "2195370"
  },
  {
    "text": "is kind of like how things might have looked if you're running VMs are kind of host centric roles now if you start to",
    "start": "2195370",
    "end": "2202960"
  },
  {
    "start": "2201000",
    "end": "2235000"
  },
  {
    "text": "do this in in kubernetes well then you have those roles well how do you manage those roles you have to attach them to",
    "start": "2202960",
    "end": "2208450"
  },
  {
    "text": "an ec2 instance in this case and then what I then now need a role that actually can give me access to any of",
    "start": "2208450",
    "end": "2213910"
  },
  {
    "text": "these Inc things because kubernetes could schedule any of these things they're now pods they're containers",
    "start": "2213910",
    "end": "2218920"
  },
  {
    "text": "rather than VMs anywhere in my cluster well this isn't particularly great because now my my back-end pod has",
    "start": "2218920",
    "end": "2224770"
  },
  {
    "text": "access to the UI my front-end pod has access to billing buckets it's not a great situation right so you need to go",
    "start": "2224770",
    "end": "2231310"
  },
  {
    "text": "and solve this as you move towards a sort of containerized workflow now sort",
    "start": "2231310",
    "end": "2237010"
  },
  {
    "start": "2235000",
    "end": "2339000"
  },
  {
    "text": "of a sort of typical way to go and solve this might be to create credentials so",
    "start": "2237010",
    "end": "2242470"
  },
  {
    "text": "for each of your iam roles create users create credentials mount those credentials into the containers using a",
    "start": "2242470",
    "end": "2249930"
  },
  {
    "text": "Saku Panetti secret so then each one of these things now can have their own role and they can have a credential for it",
    "start": "2249930",
    "end": "2256450"
  },
  {
    "text": "and actually this is slightly better because now the look at the log agent only has access to the Kinesis data",
    "start": "2256450",
    "end": "2262750"
  },
  {
    "text": "streams the tens don't have access to those things better separation but now we've got a challenge an overhead of managing the",
    "start": "2262750",
    "end": "2269810"
  },
  {
    "text": "lifecycle of those keys you know we need to cycle those keys manage them there's a lot of headache in doing that we would",
    "start": "2269810",
    "end": "2275270"
  },
  {
    "text": "we've been doing this for a while it's actually the way we manage it and it's not great and we end up having to do a",
    "start": "2275270",
    "end": "2280880"
  },
  {
    "text": "lot of automation ourselves but there are a few solutions out there and a couple that we looked at the Amazon sort",
    "start": "2280880",
    "end": "2286790"
  },
  {
    "text": "of pointed us to was coop - I am and Kai am they're quite popular each of them",
    "start": "2286790",
    "end": "2291980"
  },
  {
    "text": "kind of take their own approach to providing an I am mapping to a container but each of them have their own",
    "start": "2291980",
    "end": "2298760"
  },
  {
    "text": "drawbacks and so as Pavan mentioned earlier on the roadmap there are some",
    "start": "2298760",
    "end": "2304130"
  },
  {
    "text": "features coming in eks that I actually do that and that's what we're waiting for because we think it's integrated inside of Amazon then are we great and",
    "start": "2304130",
    "end": "2311390"
  },
  {
    "text": "the way they're going about doing that is they're going to use service accounts which is something you can associate with the pod and that will then use an",
    "start": "2311390",
    "end": "2317930"
  },
  {
    "text": "open ID connect token to then use the assumed role with web identity mechanism",
    "start": "2317930",
    "end": "2323840"
  },
  {
    "text": "so it's a great kind of all built into the way in which Amazon will work so I think this is a really good way to solve",
    "start": "2323840",
    "end": "2329840"
  },
  {
    "text": "this problem that you have the responsibility you take in terms of managing access to from kubernetes into",
    "start": "2329840",
    "end": "2336770"
  },
  {
    "text": "your other services and the last of the powers that I kind of wanted to to walk",
    "start": "2336770",
    "end": "2344030"
  },
  {
    "start": "2339000",
    "end": "2421000"
  },
  {
    "text": "you through here and again this is another peer example this is something that we experienced ourselves so if",
    "start": "2344030",
    "end": "2350690"
  },
  {
    "text": "you're not familiar with kubernetes I think quite a few people were so but if you're not effectively when you want to",
    "start": "2350690",
    "end": "2357200"
  },
  {
    "text": "gain access to containers that are running and scheduled inside of kubernetes you can use these things",
    "start": "2357200",
    "end": "2364340"
  },
  {
    "text": "called services and it's an abstract concept that then will distribute load around those containers and when you",
    "start": "2364340",
    "end": "2371300"
  },
  {
    "text": "first use a service you'll quite often make that available just internally inside the cluster so I applaud within",
    "start": "2371300",
    "end": "2376970"
  },
  {
    "text": "the cluster can talk to each other but if you want to then expose your service to the outside world you might then use",
    "start": "2376970",
    "end": "2383090"
  },
  {
    "text": "a type service type load balancer and if you've got this all well it up correctly and obviously eks does this but you can",
    "start": "2383090",
    "end": "2389930"
  },
  {
    "text": "do this with other kubernetes ones then what will happen is by specifying type load balancer it's automatically going",
    "start": "2389930",
    "end": "2395210"
  },
  {
    "text": "to provision you and ELB going to open up note boards and note point is so a random port number on",
    "start": "2395210",
    "end": "2401329"
  },
  {
    "text": "every node in the cluster and then it's gonna wire up that ELB to those note ports and allow traffic in so this is",
    "start": "2401329",
    "end": "2408349"
  },
  {
    "text": "great it's a great power because it makes it very easy for me to automate all of that infrastructure and by the",
    "start": "2408349",
    "end": "2413930"
  },
  {
    "text": "way this also can work with NL B's as well as al B's in some of the newer versions but the responsibility you get",
    "start": "2413930",
    "end": "2421010"
  },
  {
    "start": "2421000",
    "end": "2470000"
  },
  {
    "text": "with this power is that you've now got places where people can make really bad",
    "start": "2421010",
    "end": "2426710"
  },
  {
    "text": "mistakes so an example of a bad mistake that you could make so with the way in which the service works in terms of",
    "start": "2426710",
    "end": "2432319"
  },
  {
    "text": "finding the pods that it's going to do it does it based on pod labels so each of these labels were each of these pods",
    "start": "2432319",
    "end": "2438829"
  },
  {
    "text": "will have various labels associated with them and the service does a selector to them so in this case we had a very",
    "start": "2438829",
    "end": "2445339"
  },
  {
    "text": "generic selector this is going to pick up anything that happened to have the label type nodejs my back end could be",
    "start": "2445339",
    "end": "2451579"
  },
  {
    "text": "written in nodejs my front end could be written in no jet chairs and somebody decides they're gonna put those labels",
    "start": "2451579",
    "end": "2457160"
  },
  {
    "text": "on and suddenly you're exposing to what you thought was just your front end pods you're also one in four are going to go",
    "start": "2457160",
    "end": "2463789"
  },
  {
    "text": "to a back end pod when people access it through the ELB what a great thing to happen the alternative would be perhaps",
    "start": "2463789",
    "end": "2471770"
  },
  {
    "start": "2470000",
    "end": "2563000"
  },
  {
    "text": "somebody comes along and this one definitely did happen to us they just didn't really understand what they were",
    "start": "2471770",
    "end": "2476900"
  },
  {
    "text": "doing with service type load balancer and perhaps that's because they were using a Cooper Nettie's cluster that",
    "start": "2476900",
    "end": "2482059"
  },
  {
    "text": "wasn't wired into the Amazon services so it maybe was an on-prem cluster where maybe this had no meaning or no effect",
    "start": "2482059",
    "end": "2487539"
  },
  {
    "text": "but they were using a service type load balancer for their back-end their",
    "start": "2487539",
    "end": "2492559"
  },
  {
    "text": "back-end service and suddenly we had exposed the internet some back-end services through an ELB not particularly",
    "start": "2492559",
    "end": "2500089"
  },
  {
    "text": "situation got on top of it pretty quickly of course but again you've got some issues here because you've got that",
    "start": "2500089",
    "end": "2506119"
  },
  {
    "text": "power but you've got the responsibility of providing some governance and you can give guidelines but these things can happen in production is very easy for",
    "start": "2506119",
    "end": "2512329"
  },
  {
    "text": "someone to just go in and type these commands and off you go you've got this so even if you're auditing this through a CI CD pipeline",
    "start": "2512329",
    "end": "2519529"
  },
  {
    "text": "there's testing and making sure that doesn't stop someone in production from using coo coo CTL to go and achieve the",
    "start": "2519529",
    "end": "2525770"
  },
  {
    "text": "same problem and so there are some a few solutions to",
    "start": "2525770",
    "end": "2531560"
  },
  {
    "text": "this problem and actually this is one of the problems we as long with the container management stuff that we",
    "start": "2531560",
    "end": "2537020"
  },
  {
    "text": "presented to Amazon and I think open policy agent really has a great",
    "start": "2537020",
    "end": "2543190"
  },
  {
    "text": "possibility here for controlling this because you can use it to write rules and and manage what sort sorts of",
    "start": "2543190",
    "end": "2551330"
  },
  {
    "text": "services you can use and some guidance and around how that gets implemented and so even in production you can start to",
    "start": "2551330",
    "end": "2558730"
  },
  {
    "text": "prevent these types of issues so I'd like to pass back to Pavan who's going to walk through actually a little quick",
    "start": "2558730",
    "end": "2564560"
  },
  {
    "start": "2563000",
    "end": "2648000"
  },
  {
    "text": "demo of the of OPA so that's a great",
    "start": "2564560",
    "end": "2574460"
  },
  {
    "text": "message from Steve around with great power comes great responsibility especially when running something so",
    "start": "2574460",
    "end": "2581120"
  },
  {
    "text": "complex and so powerful as kubernetes so if you're if you're a CEO or a security",
    "start": "2581120",
    "end": "2590450"
  },
  {
    "text": "manager or a portfolio owner of an infrastructure like this to operate at",
    "start": "2590450",
    "end": "2596810"
  },
  {
    "text": "scale you'd need something like a policy guardrail something that can protect you",
    "start": "2596810",
    "end": "2602890"
  },
  {
    "text": "in a cluster of developers or teams who are free to do what they want to create",
    "start": "2602890",
    "end": "2610670"
  },
  {
    "text": "different resources within the kubernetes cluster so we needed that to",
    "start": "2610670",
    "end": "2615920"
  },
  {
    "text": "implement the security controls that Stephen and the team brought to us and we looked at a few solutions and built a",
    "start": "2615920",
    "end": "2623240"
  },
  {
    "text": "proof-of-concept using open policy agents open policy agent is a incubating",
    "start": "2623240",
    "end": "2630580"
  },
  {
    "text": "project within CN CF it's a cloud native",
    "start": "2630580",
    "end": "2635810"
  },
  {
    "text": "computing foundation CN CF have different stages around the different projects and open policy agent is one of",
    "start": "2635810",
    "end": "2644360"
  },
  {
    "text": "one of those projects so let's take a take a look at it to really understand",
    "start": "2644360",
    "end": "2652190"
  },
  {
    "text": "what OPA open policy agent OPA offers a zoo we need to understand admission",
    "start": "2652190",
    "end": "2658640"
  },
  {
    "text": "controllers within kubernetes first and from the ETS from sir Amazon eks",
    "start": "2658640",
    "end": "2664400"
  },
  {
    "text": "point of view and the authentication demo you you remember you may remember that we accessed a couple of api's in",
    "start": "2664400",
    "end": "2671869"
  },
  {
    "text": "this case sort of admission controller API which led us to look at the",
    "start": "2671869",
    "end": "2677089"
  },
  {
    "text": "validating and the webhook configurations so what is an admission",
    "start": "2677089",
    "end": "2683660"
  },
  {
    "text": "controller so the admission controller is like a intercepting code when HTTP",
    "start": "2683660",
    "end": "2690560"
  },
  {
    "start": "2685000",
    "end": "2728000"
  },
  {
    "text": "request is authenticated and authorized it goes through another filter which is",
    "start": "2690560",
    "end": "2695930"
  },
  {
    "text": "these admission web hooks there are two main types mutating and validating web",
    "start": "2695930",
    "end": "2702200"
  },
  {
    "text": "hooks they intercept the request and before the kubernetes api server",
    "start": "2702200",
    "end": "2709220"
  },
  {
    "text": "receives those requests and puts the sort of makes the decision around the runtime and as super sister sit within",
    "start": "2709220",
    "end": "2716510"
  },
  {
    "text": "the HCD key value distributed store admission controller is a sort of looks",
    "start": "2716510",
    "end": "2724250"
  },
  {
    "text": "at those and inspect the requests so that's an additional layer of control which kubernetes provides so OPA and how",
    "start": "2724250",
    "end": "2734240"
  },
  {
    "start": "2728000",
    "end": "2782000"
  },
  {
    "text": "does it fit into this so OPA leverages this feature within kubernetes and it's",
    "start": "2734240",
    "end": "2740630"
  },
  {
    "text": "not limited to kubernetes I mean there are several implementations that you should go ahead and look at at the github repository but OPA gives a",
    "start": "2740630",
    "end": "2748430"
  },
  {
    "text": "language to your authorization policies so it it helps you with policy and",
    "start": "2748430",
    "end": "2754070"
  },
  {
    "text": "formal enforcement and it's decoupled the policy enforcement is decoupled from policy decision-making so what it",
    "start": "2754070",
    "end": "2761180"
  },
  {
    "text": "eventually does and provides is it provides a desired state security for",
    "start": "2761180",
    "end": "2767359"
  },
  {
    "text": "your workloads so it introduces a dynamics authorization prior to kubernetes resources entering runtime so",
    "start": "2767359",
    "end": "2776599"
  },
  {
    "text": "this model sort of lends really well to some of the challenges that Stephan described earlier so let's take a look",
    "start": "2776599",
    "end": "2783830"
  },
  {
    "start": "2782000",
    "end": "2985000"
  },
  {
    "text": "at the demo and in this demo we'll take a look at the OPA running as validating",
    "start": "2783830",
    "end": "2789619"
  },
  {
    "text": "mutating works or validating webhook configuration and take a look at",
    "start": "2789619",
    "end": "2795290"
  },
  {
    "text": "the regular policy which is the policy which really implements the or enforces",
    "start": "2795290",
    "end": "2803180"
  },
  {
    "text": "the construct that you require and also use restrict the the policy to use",
    "start": "2803180",
    "end": "2812270"
  },
  {
    "text": "images not from or restricted from docker and but use it from ECR so this",
    "start": "2812270",
    "end": "2817910"
  },
  {
    "text": "is a this is a requirement that Steven and the team came up with in terms of we",
    "start": "2817910",
    "end": "2823460"
  },
  {
    "text": "do not want our dev teams to pull images from docker or docker hub we have",
    "start": "2823460",
    "end": "2829130"
  },
  {
    "text": "restricted image lifecycle and we want containers to be brought in from a",
    "start": "2829130",
    "end": "2835340"
  },
  {
    "text": "particular registry which was ECR so this is what we look at so here we have",
    "start": "2835340",
    "end": "2843080"
  },
  {
    "text": "I will take a quick look at OPA running within the cluster I will have a couple",
    "start": "2843080",
    "end": "2849200"
  },
  {
    "text": "of pods running and we'll take a deeper look into the validating webhook",
    "start": "2849200",
    "end": "2854750"
  },
  {
    "text": "configuration and see how OPA operates within that construct so here we see it",
    "start": "2854750",
    "end": "2860780"
  },
  {
    "text": "operates within the validating webhook configuration and not mutating one we",
    "start": "2860780",
    "end": "2866090"
  },
  {
    "text": "will also look at the Rago policy which tells us that deny pod creation if the",
    "start": "2866090",
    "end": "2871460"
  },
  {
    "text": "registry is outside of the white listed ones which we have highlighted so the",
    "start": "2871460",
    "end": "2876650"
  },
  {
    "text": "two registries which are here are the ones which are allowed so we also we also look at the pod definitions one one",
    "start": "2876650",
    "end": "2884900"
  },
  {
    "text": "tells us that the the image is coming from docker hub nginx and the other one",
    "start": "2884900",
    "end": "2890720"
  },
  {
    "text": "is from the ECR the elastic container registry so when we try and run the",
    "start": "2890720",
    "end": "2895880"
  },
  {
    "text": "public repository with nginx it rejects it using the validating web hook and when we try the private repository it",
    "start": "2895880",
    "end": "2904310"
  },
  {
    "text": "successfully creates the nginx container so what that tells us is through this",
    "start": "2904310",
    "end": "2910670"
  },
  {
    "text": "policy language OPA enables kubernetes environments to be controlled leveraging",
    "start": "2910670",
    "end": "2917450"
  },
  {
    "text": "the admission sort of web hook feature admission controller feature and there's the possibilities are endless so you can",
    "start": "2917450",
    "end": "2924290"
  },
  {
    "text": "take a look at I am or other policies around it and and if you're looking at operating",
    "start": "2924290",
    "end": "2932029"
  },
  {
    "text": "opera at scale then we have the founders",
    "start": "2932029",
    "end": "2937279"
  },
  {
    "text": "of oppa who have created styro calm and we have built the CEO of Saira who is",
    "start": "2937279",
    "end": "2943819"
  },
  {
    "text": "here with us and and you can have a have a look at how you can sort of manage",
    "start": "2943819",
    "end": "2950150"
  },
  {
    "text": "these policies and have these policies baked into your clusters so these are a couple of screenshots which show",
    "start": "2950150",
    "end": "2956740"
  },
  {
    "text": "container registry and container based security policies within the styro",
    "start": "2956740",
    "end": "2962390"
  },
  {
    "text": "console and also ingress and how you put policies around the ingress so these are",
    "start": "2962390",
    "end": "2969230"
  },
  {
    "text": "the two sort of rule-based engines which you can sort of leverage through the through the console or the managed",
    "start": "2969230",
    "end": "2976509"
  },
  {
    "text": "commercial offering styro are in the process of becoming an AWS partner so",
    "start": "2976509",
    "end": "2982749"
  },
  {
    "text": "speaking of partners within the container ecosystem of AWS we have a",
    "start": "2982749",
    "end": "2988609"
  },
  {
    "start": "2985000",
    "end": "3026000"
  },
  {
    "text": "rich partner ecosystem we have partners like Aqua SEC and all side and twist",
    "start": "2988609",
    "end": "2993859"
  },
  {
    "text": "lock with their variety of tools and tooling which will sort of satisfy your",
    "start": "2993859",
    "end": "2999049"
  },
  {
    "text": "specific reuse case also it has also an adviser which I recently blogged about",
    "start": "2999049",
    "end": "3004269"
  },
  {
    "text": "this week and sorry last week and Cystic has Falco which does deep dive sort of",
    "start": "3004269",
    "end": "3011739"
  },
  {
    "text": "runtime monitoring Aqua SEC has a cube bench CIS benchmark inspector so you can",
    "start": "3011739",
    "end": "3017980"
  },
  {
    "text": "use variety variety of these tools and provide first of those controls and",
    "start": "3017980",
    "end": "3023799"
  },
  {
    "text": "build those controls into your kubernetes clusters here are some of the",
    "start": "3023799",
    "end": "3028900"
  },
  {
    "start": "3026000",
    "end": "3052000"
  },
  {
    "text": "resources I'd like to point the security book written by laser eyes from echo sec",
    "start": "3028900",
    "end": "3034960"
  },
  {
    "text": "and Michael hausenblas who is now a developer advocate at AWS and a couple",
    "start": "3034960",
    "end": "3040900"
  },
  {
    "text": "of blogs he also had advise a blog and the secrets manager blog as well some of",
    "start": "3040900",
    "end": "3046299"
  },
  {
    "text": "the YouTube videos which are really insightful so I definitely recommend go",
    "start": "3046299",
    "end": "3051519"
  },
  {
    "text": "ahead and take a look so to leave you with our learnings from this experience",
    "start": "3051519",
    "end": "3057720"
  },
  {
    "start": "3052000",
    "end": "3126000"
  },
  {
    "text": "there are two main things clearly understand the relationship the boundaries with with",
    "start": "3057720",
    "end": "3065620"
  },
  {
    "text": "the shared responsibility model and build a threat model around your kubernetes cluster especially the data",
    "start": "3065620",
    "end": "3072370"
  },
  {
    "text": "plane and the sort of container security life cycles and as Steven said with",
    "start": "3072370",
    "end": "3080710"
  },
  {
    "text": "great power comes great responsibility so make sure that you have these",
    "start": "3080710",
    "end": "3087090"
  },
  {
    "text": "controls baked in with operating at scale I make sure your containers are",
    "start": "3087090",
    "end": "3093190"
  },
  {
    "text": "and the kubernetes environment is secure so I'd like to thank Steven again for",
    "start": "3093190",
    "end": "3099990"
  },
  {
    "text": "for presenting with with with me and thank you again for attending before you",
    "start": "3099990",
    "end": "3107500"
  },
  {
    "text": "leave one more thing please complete the survey your survey and the feedback is",
    "start": "3107500",
    "end": "3113560"
  },
  {
    "text": "really important to us it makes us better at what we do and feel free to",
    "start": "3113560",
    "end": "3118780"
  },
  {
    "text": "provide feedback so thank you very much again for attending [Applause]",
    "start": "3118780",
    "end": "3128150"
  }
]