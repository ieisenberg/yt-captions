[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "okay so before I get started let me ask a question how many of your Architects",
    "start": "2679",
    "end": "8040"
  },
  {
    "text": "here okay quite a few how many of your developers who write code on a day-to-day",
    "start": "8360",
    "end": "14200"
  },
  {
    "text": "basis definitely more than Architects how many of your it managers who do not write code who do not architect but",
    "start": "14200",
    "end": "20039"
  },
  {
    "text": "manage team of professionals teis great okay we have a good mix so I'm going to",
    "start": "20039",
    "end": "25240"
  },
  {
    "text": "have something for each of you by end of this session you will walk away with clear understanding of how you can",
    "start": "25240",
    "end": "30800"
  },
  {
    "text": "architect for the cloud and how you can enable your applications to be cloud ready so this session has three",
    "start": "30800",
    "end": "37320"
  },
  {
    "text": "different parts the first part is going to be the introduction of uh the the",
    "start": "37320",
    "end": "43320"
  },
  {
    "text": "context of the cloud how you can get ready for architecting for the cloud and",
    "start": "43320",
    "end": "48480"
  },
  {
    "start": "45000",
    "end": "45000"
  },
  {
    "text": "then I'm going to walk you through the guiding principles of architecting for the cloud through the seven principles",
    "start": "48480",
    "end": "54680"
  },
  {
    "text": "and towards the end we're going to draw conclusions and summarize what we have discussed in this session",
    "start": "54680",
    "end": "60640"
  },
  {
    "text": "so let me get started with the introduction let me set the context for the cloud architect the cloud architect",
    "start": "60640",
    "end": "67000"
  },
  {
    "text": "typically needs to deal with u with a variety of things which are slightly",
    "start": "67000",
    "end": "72320"
  },
  {
    "text": "different from dealing with the physical infrastructure so as an architect you are going to deal with resources that",
    "start": "72320",
    "end": "79119"
  },
  {
    "text": "are different and you also need to understand how scalability is different on the cloud and because it's not the",
    "start": "79119",
    "end": "86360"
  },
  {
    "text": "physical infrastructure that you can touch and feel you also need to understand various channels to access",
    "start": "86360",
    "end": "92799"
  },
  {
    "text": "the cloud and finally one very important factor is as an architect you're going",
    "start": "92799",
    "end": "98520"
  },
  {
    "text": "to influence the cost of your infrastructure on the cloud so we're going to look at these parameters so let",
    "start": "98520",
    "end": "104280"
  },
  {
    "text": "me start with storage in the physical world and then we'll take a look at the storage on the cloud typically if you're",
    "start": "104280",
    "end": "110479"
  },
  {
    "text": "dealing with storage in the physical world you will encounter terms like Das direct attached storage SAN storage area",
    "start": "110479",
    "end": "118399"
  },
  {
    "start": "112000",
    "end": "112000"
  },
  {
    "text": "network and Nas which is network attached storage each of them offer a different way of adding storage to your",
    "start": "118399",
    "end": "126280"
  },
  {
    "text": "applications and infrastructure and many of us are familiar with this but when you are dealing with the cloud you will",
    "start": "126280",
    "end": "133040"
  },
  {
    "start": "131000",
    "end": "131000"
  },
  {
    "text": "encounter terminologies like the local instance store that comes with ec2 elastic Block store and simple storage",
    "start": "133040",
    "end": "140400"
  },
  {
    "text": "service or S3 they are slightly different for example the local instance store is comparable to a direct attached",
    "start": "140400",
    "end": "147560"
  },
  {
    "text": "storage in the physical world you can start an instance and you have immediate",
    "start": "147560",
    "end": "153720"
  },
  {
    "text": "access to the local instance store but typically that that is available only",
    "start": "153720",
    "end": "159519"
  },
  {
    "text": "within the life cycle of an instance when you terminate the instance the local instance store is not accessible",
    "start": "159519",
    "end": "165200"
  },
  {
    "text": "anymore so if you want to go beyond that and you want to use an expandable disc",
    "start": "165200",
    "end": "170640"
  },
  {
    "text": "or a drive on the cloud you can use elastic Block store this is a block storage device that can be attached to",
    "start": "170640",
    "end": "178319"
  },
  {
    "text": "any any instance and and can be formatted with the favorite file system of your choice so think of that as a",
    "start": "178319",
    "end": "185080"
  },
  {
    "text": "plugable attachable dis in the cloud that's that is at your disposal and you",
    "start": "185080",
    "end": "190360"
  },
  {
    "text": "can add multiple number of elastic block stores and you can grow them on the fly so that's elastic Block store and to",
    "start": "190360",
    "end": "197920"
  },
  {
    "text": "make it much more durable and to really have a good backup and retention policy",
    "start": "197920",
    "end": "203159"
  },
  {
    "text": "you can take a point in time snapshots of this storage called elastic Block store and store them on simple storage",
    "start": "203159",
    "end": "211959"
  },
  {
    "text": "service simple storage service is one of our highly durable storage services on",
    "start": "211959",
    "end": "217439"
  },
  {
    "text": "AWS and it gives you an ability to to to put objects whatever you deal with S3 is",
    "start": "217439",
    "end": "224319"
  },
  {
    "text": "going to be in the form of objects and buckets so you can create objects and you can store them on S3 with a very",
    "start": "224319",
    "end": "231080"
  },
  {
    "text": "high durability rate of course Beyond this we also have techniques like simple",
    "start": "231080",
    "end": "236480"
  },
  {
    "text": "DB which is a massively scale out high performance database and sqs which is a",
    "start": "236480",
    "end": "242840"
  },
  {
    "text": "simple queuing service which gives you a mechanism to deliver asynchronous messages on the cloud and and all of",
    "start": "242840",
    "end": "249120"
  },
  {
    "text": "them offer some kind of storage but they differ in the way you deal with them and the scenarios for which they're used",
    "start": "249120",
    "end": "256919"
  },
  {
    "text": "talking about durability I want to zoom on to S3 a little bit if you are storing",
    "start": "256919",
    "end": "262720"
  },
  {
    "text": "objects on S3 these objects can be anything from a file to an image to to",
    "start": "262720",
    "end": "269560"
  },
  {
    "text": "to to any AVI or even a CSS file anything that is static can be easily stored on S3 and S3 is designed for the",
    "start": "269560",
    "end": "276600"
  },
  {
    "text": "durability of 11 9s that's a lot of durability but if you're wondering what",
    "start": "276600",
    "end": "282199"
  },
  {
    "text": "exactly the translates to what it really means is if you are storing 10,000 objects on an average you",
    "start": "282199",
    "end": "290400"
  },
  {
    "text": "might lose just one object you might lose just one object once in every 10",
    "start": "290400",
    "end": "296000"
  },
  {
    "text": "million years right if you're sto 10,000",
    "start": "296000",
    "end": "301280"
  },
  {
    "text": "objects maybe you will lose one object in every 10 million years that's a lot of",
    "start": "301280",
    "end": "306960"
  },
  {
    "text": "durability this is achieved because of the way S3 is designed and it is highly",
    "start": "306960",
    "end": "312720"
  },
  {
    "text": "durable so you can you can leverage these capabilities when you're dealing with storage on the cloud and of course",
    "start": "312720",
    "end": "319880"
  },
  {
    "text": "then comes in scalability typically when we are architecting for the physical world scalability is thought in terms of",
    "start": "319880",
    "end": "326919"
  },
  {
    "text": "number of machines typically you will add more resources if you want to scale",
    "start": "326919",
    "end": "333000"
  },
  {
    "text": "up so scale up and scale out are two different techniques of scaling your",
    "start": "333000",
    "end": "338560"
  },
  {
    "text": "application whether you're dealing with the cloud or dealing with physical infrastructure and scaling out is",
    "start": "338560",
    "end": "345000"
  },
  {
    "text": "typically adding more number of servers to your application and that is called horizontal scaling you start with one",
    "start": "345000",
    "end": "352600"
  },
  {
    "text": "but you grow up to n that will support your demand and as the application becomes more demanding you can add more",
    "start": "352600",
    "end": "359120"
  },
  {
    "text": "resources to it that is scaling out there is also scaling up where you can",
    "start": "359120",
    "end": "365160"
  },
  {
    "text": "keep adding resources for example you notice that the machine or the server requires more memory you can add more",
    "start": "365160",
    "end": "371599"
  },
  {
    "text": "memory or it needs more processing more number of cores you can keep adding more number of processors and of course",
    "start": "371599",
    "end": "377319"
  },
  {
    "text": "storage so that capability is scaling up which is vertical scaling this will not",
    "start": "377319",
    "end": "382639"
  },
  {
    "text": "really change even when you are dealing with your virtual infrastructure on the cloud I want to show you a quick demo we",
    "start": "382639",
    "end": "389160"
  },
  {
    "start": "388000",
    "end": "388000"
  },
  {
    "text": "are going to log on to the Amazon web services Management console and we are",
    "start": "389160",
    "end": "394800"
  },
  {
    "text": "going to access one of the stopped instances and change the instance type",
    "start": "394800",
    "end": "400080"
  },
  {
    "text": "currently this is running as M1 large which comes with a specific configuration now we are going to scale",
    "start": "400080",
    "end": "405199"
  },
  {
    "text": "it up to what is called as M2 quadruple extra large which comes with a high",
    "start": "405199",
    "end": "410319"
  },
  {
    "text": "memory instance type we are going to start that instance again and when it comes back it's going to be reconfigured",
    "start": "410319",
    "end": "417680"
  },
  {
    "text": "for the new configuration this is how you're going to scale up there is nothing which is going to really make",
    "start": "417680",
    "end": "425080"
  },
  {
    "text": "you stop your application or have downtime and so on if your architected is if your application is architected",
    "start": "425080",
    "end": "430520"
  },
  {
    "text": "properly you can literally automate this whole process and script the same thing that will give you very good up time and",
    "start": "430520",
    "end": "437759"
  },
  {
    "text": "and similarly when you are accessing the cloud remember that the underlying aspect of the cloud is is is all about",
    "start": "437759",
    "end": "445240"
  },
  {
    "text": "API we have very mature API for every service that we expose now this API is",
    "start": "445240",
    "end": "451199"
  },
  {
    "text": "consumed by a variety of layers that you're going to interact with we have Management console that you have seen",
    "start": "451199",
    "end": "457479"
  },
  {
    "text": "software libraries typically meant for developers and Architects we have a variety of software libraries uh for for",
    "start": "457479",
    "end": "464120"
  },
  {
    "text": "net Java python PHP and so on we also support a variety of mobile devices the",
    "start": "464120",
    "end": "469639"
  },
  {
    "text": "popular ones being IOS and Android sdks uh and we have plugins for visual studio",
    "start": "469639",
    "end": "474919"
  },
  {
    "text": "Eclipse so that makes it extremely easy for the developers to deal with the cloud for it administrators we have uh",
    "start": "474919",
    "end": "481400"
  },
  {
    "text": "command line interfaces and command line tools that can be integrated with the shell scripts and finally for the third",
    "start": "481400",
    "end": "487960"
  },
  {
    "text": "part is we have the API consumed um in the resource management tools like",
    "start": "487960",
    "end": "493879"
  },
  {
    "text": "puppet and Chef so these are variety of techniques of accessing the cloud most of them can be automated most of them",
    "start": "493879",
    "end": "499960"
  },
  {
    "text": "can be integrated with your existing environments so it becomes extremely seamless and finally cost as Architects",
    "start": "499960",
    "end": "508639"
  },
  {
    "text": "we never really worry about cost right from the day one of architecture we",
    "start": "508639",
    "end": "514399"
  },
  {
    "text": "assume that the underlying infrastructure is going to be made available to us and we have a lot of resources at our disposal and typically",
    "start": "514399",
    "end": "521120"
  },
  {
    "text": "cost is not a factor that we we spend a lot of time on but on cloud many design",
    "start": "521120",
    "end": "527200"
  },
  {
    "text": "decisions will start to impact the cost element it all starts with choosing the right E2 instance for example we have a",
    "start": "527200",
    "end": "534680"
  },
  {
    "text": "generic ec2 instance we have high CPU High memory and everything comes with a",
    "start": "534680",
    "end": "539839"
  },
  {
    "text": "specific price point based on the use case and the workload you got to choose the right E2 instance type and that's",
    "start": "539839",
    "end": "546120"
  },
  {
    "text": "going to have a very very strong influence on the costing structure similarly when you are uh moving data",
    "start": "546120",
    "end": "553279"
  },
  {
    "text": "back and forth of course thankfully the inbound traffic uh is is going to be zero but when you're actually getting",
    "start": "553279",
    "end": "559880"
  },
  {
    "text": "the data out the outbound traffic should be highly optimized by using compression similarly backup and restore strategy",
    "start": "559880",
    "end": "567160"
  },
  {
    "text": "and what kind of tier you're going to CH within S3 for example we have a high durability tier which comes with a",
    "start": "567160",
    "end": "573720"
  },
  {
    "text": "specific price and then we have a slightly reduced durable storage in the form of redu redundant storage or RRS",
    "start": "573720",
    "end": "580959"
  },
  {
    "text": "that has only four NS of availability mostly meant for reproducible data that you are sure that you can get back even",
    "start": "580959",
    "end": "587680"
  },
  {
    "text": "if it is lost uh and you're going to use that uh on the on the RRS medium and",
    "start": "587680",
    "end": "593920"
  },
  {
    "text": "that comes with a separate pricing so choosing the appropriate tier will give you an ability to tweak the price",
    "start": "593920",
    "end": "599959"
  },
  {
    "text": "similarly when you're dealing with ec2 instances you got to be familiar with a term called elastic compute unit or ECU",
    "start": "599959",
    "end": "607200"
  },
  {
    "start": "604000",
    "end": "604000"
  },
  {
    "text": "now this is roughly comparable to a 1.2 GHz Intel xon processor in terms of",
    "start": "607200",
    "end": "612560"
  },
  {
    "text": "computing power so when you're launching a small instance it comes with a",
    "start": "612560",
    "end": "617600"
  },
  {
    "text": "specific configuration for example there is just one ECU 1.7 GB of memory 160 GB",
    "start": "617600",
    "end": "624399"
  },
  {
    "text": "of storage and it costs 8.5 cents per an hour versus a medium instance which is",
    "start": "624399",
    "end": "632040"
  },
  {
    "text": "almost five times in terms of processing the memory is almost the same but gives",
    "start": "632040",
    "end": "637480"
  },
  {
    "text": "you almost twice the storage and the cost is almost twice when do you choose this instance",
    "start": "637480",
    "end": "644600"
  },
  {
    "text": "is totally dependent and based on your architecture and your use case and the workload scenarios so you got to make",
    "start": "644600",
    "end": "651320"
  },
  {
    "text": "sure that your ec2 instance types are highly optimized and aligned with your",
    "start": "651320",
    "end": "656680"
  },
  {
    "text": "workloads and scenarios that's absolutely important so let's see uh how",
    "start": "656680",
    "end": "662800"
  },
  {
    "text": "you're going to choose an appropriate instance type so now we are going to log on to the Management console U choose an",
    "start": "662800",
    "end": "669160"
  },
  {
    "text": "Ami and Amazon machine image which is a templatized virtual uh machine that you're going to",
    "start": "669160",
    "end": "675519"
  },
  {
    "text": "launch and once you have the right Ami selected you can choose from a variety",
    "start": "675519",
    "end": "681240"
  },
  {
    "text": "of instance types and they differ in the configuration that you choose and that's going to impact uh your architecture and",
    "start": "681240",
    "end": "688079"
  },
  {
    "text": "also the cost so to quickly summarize it's all going to be um about automation because you have",
    "start": "688079",
    "end": "695120"
  },
  {
    "text": "a new way of accessing the cloud that impacts your scalability and dealing with the virtual resources on the cloud",
    "start": "695120",
    "end": "701720"
  },
  {
    "text": "and it's all about choosing the right models that will impact your cost so if",
    "start": "701720",
    "end": "708200"
  },
  {
    "text": "I am asked to summarize in just one line what is the best practice of architecting for the cloud I just got to",
    "start": "708200",
    "end": "715240"
  },
  {
    "text": "say this launch ec2 instances with EBS behind an lb with your domain on Route",
    "start": "715240",
    "end": "720800"
  },
  {
    "text": "53 static content on cloud front backed up to S3 and your database deployed in a",
    "start": "720800",
    "end": "726079"
  },
  {
    "text": "multi-az mode on auds just one line and this is technically the most appropriate",
    "start": "726079",
    "end": "732519"
  },
  {
    "text": "way of sharing the cloud architecture best practice I can just conclude my session with this but don't worry I'm",
    "start": "732519",
    "end": "738800"
  },
  {
    "text": "not I'm not here to overwhelm you with a lot of acronyms I want you to understand some of these Technologies better so",
    "start": "738800",
    "end": "744560"
  },
  {
    "text": "it's time for me to get started with the seven principles the first one is design for failure and nothing will fail uh I",
    "start": "744560",
    "end": "751040"
  },
  {
    "text": "want to take an analogy from the Contemporary cars most of the cars that we drive today come with airbags and",
    "start": "751040",
    "end": "757519"
  },
  {
    "text": "these airbags are designed to makes to make cars crash proof and collision",
    "start": "757519",
    "end": "762600"
  },
  {
    "text": "proof uh while they cannot really stop the cars from becoming uh meeting an",
    "start": "762600",
    "end": "768279"
  },
  {
    "text": "accident what they can do is to make sure that they have the right things in place to protect the valuable lives of",
    "start": "768279",
    "end": "774560"
  },
  {
    "text": "the driver and the passenger so cars come with airbags and that is an example",
    "start": "774560",
    "end": "780160"
  },
  {
    "text": "of how Auto automobile industry is thinking of Designing for failure now as",
    "start": "780160",
    "end": "785320"
  },
  {
    "text": "Architects you got to deal with the same thing but on the cloud so here your",
    "start": "785320",
    "end": "790760"
  },
  {
    "text": "design for failure strategy starts with the right backup and restore strategy being in place and then making sure that",
    "start": "790760",
    "end": "798240"
  },
  {
    "text": "your instances are impervious to reboots and relaunches this happens because on",
    "start": "798240",
    "end": "804079"
  },
  {
    "text": "cloud you cannot control certain aspects for example there may be a software",
    "start": "804079",
    "end": "809279"
  },
  {
    "text": "issue or a hardware issue which will force your instance to reboot and and get relaunched if you are maintaining",
    "start": "809279",
    "end": "815560"
  },
  {
    "text": "State and if you are treating it like a physical server you have lot of problems",
    "start": "815560",
    "end": "820680"
  },
  {
    "text": "in bringing it back to the same point where the actual uh outage or the or the",
    "start": "820680",
    "end": "825760"
  },
  {
    "text": "disruption happened so you got to make sure that your instances are completely",
    "start": "825760",
    "end": "831399"
  },
  {
    "text": "impervious to reboots and R relaunches they should be able to come back and pick up the thread from where they left",
    "start": "831399",
    "end": "837920"
  },
  {
    "text": "and start processing and contribute to the overall uh scheme of things so how can that happen by moving the inmemory",
    "start": "837920",
    "end": "844440"
  },
  {
    "text": "sessions to the data state to the data store and and using a shade nothing architecture by leveraging some of the",
    "start": "844440",
    "end": "851199"
  },
  {
    "text": "concepts we have like using availability multi availability zones using elastic",
    "start": "851199",
    "end": "856279"
  },
  {
    "text": "IP and so on I want to walk you through the global infrastructure of AWS now",
    "start": "856279",
    "end": "862160"
  },
  {
    "text": "this is the globe this is the map and then we have six regions and every",
    "start": "862160",
    "end": "868279"
  },
  {
    "text": "region is a set of multiple data centers uh and this is spanning all over the globe within",
    "start": "868279",
    "end": "874880"
  },
  {
    "text": "the data centers uh of course we also have what we call as GA Cloud that Dr",
    "start": "874880",
    "end": "880320"
  },
  {
    "text": "Verner mentioned it's meant for the government agencies and contractors in North America uh and we have uh",
    "start": "880320",
    "end": "887839"
  },
  {
    "text": "availability zones within every region and an availability zone is a distinct isolated location which is insulated",
    "start": "887839",
    "end": "895320"
  },
  {
    "text": "from failures and enjoys low latency connectivity so that that's going to make your your application impervious to",
    "start": "895320",
    "end": "904680"
  },
  {
    "text": "failures by by moving them or giving you a chance to uh deploy them in multiple",
    "start": "904680",
    "end": "909800"
  },
  {
    "text": "availability zones so this is how the regions are further isolated into",
    "start": "909800",
    "end": "915360"
  },
  {
    "text": "multiple availability zones that's not all we also have about 20 Edge locations",
    "start": "915360",
    "end": "922160"
  },
  {
    "text": "that deliver the cached content through an array of edge locations we have about",
    "start": "922160",
    "end": "927560"
  },
  {
    "text": "20 of them the recent Edition being saalo in South America and that takes your static content closer to your",
    "start": "927560",
    "end": "934199"
  },
  {
    "text": "customers and end users uh and of course our route53 service also leverages this",
    "start": "934199",
    "end": "939440"
  },
  {
    "text": "so let's take a closer look at one of the regions let's take Singapore for example and this is going to have two",
    "start": "939440",
    "end": "946440"
  },
  {
    "text": "availability zones and I'm going to deploy my application the exact replica of the configuration in two availability",
    "start": "946440",
    "end": "953440"
  },
  {
    "text": "zones which are connected uh via VIA the low latency Network and I manage",
    "start": "953440",
    "end": "959319"
  },
  {
    "text": "synchronization and in in case of a uh failure or an issue with one of the set of instances I can easily fail over so",
    "start": "959319",
    "end": "966639"
  },
  {
    "text": "this gives me a very good ability to automatically uh route the traffic to an",
    "start": "966639",
    "end": "972120"
  },
  {
    "text": "available configuration This is highly applicable for databases when deployed",
    "start": "972120",
    "end": "977399"
  },
  {
    "text": "within RDS in the multi-az mode the RDS infrastructure gives you a checkbox",
    "start": "977399",
    "end": "982639"
  },
  {
    "text": "option that will let you deploy your database in two different availability zones and the best thing is the",
    "start": "982639",
    "end": "989079"
  },
  {
    "text": "infrastructure automatically takes care of keeping them in sync and this whole",
    "start": "989079",
    "end": "994680"
  },
  {
    "text": "process is going to be extremely transparent and seamless it's a design decision that you're going to take",
    "start": "994680",
    "end": "1000240"
  },
  {
    "start": "998000",
    "end": "998000"
  },
  {
    "text": "either when you're are deploying your database this is the RDS console and we are going to choose my SQL when we are",
    "start": "1000240",
    "end": "1006199"
  },
  {
    "text": "launching our database within RDS choose the appropriate database engine from a variety of available",
    "start": "1006199",
    "end": "1012880"
  },
  {
    "text": "versions and choose the class just like the ec2 instance type and then finally",
    "start": "1012880",
    "end": "1019120"
  },
  {
    "text": "make one choice here where you say multi- a is is true by selecting the S",
    "start": "1019120",
    "end": "1025280"
  },
  {
    "text": "option here and that's going to give us an opportunity to deploy database in multiple availability Zone mode the",
    "start": "1025280",
    "end": "1032760"
  },
  {
    "text": "second important point is decouple your architecture decouple your components in the architecture so how does that",
    "start": "1032760",
    "end": "1039720"
  },
  {
    "text": "happen this is possible by leveraging a service that we have called sqs or simple queing service that lets you",
    "start": "1039720",
    "end": "1047558"
  },
  {
    "text": "deliver messages in a highly reliable and scalable manner so this is an asynchronous messaging infrastructure on",
    "start": "1047559",
    "end": "1054320"
  },
  {
    "text": "the cloud that many customers leverage this is going to let you send and receive messages in the most reliable",
    "start": "1054320",
    "end": "1060760"
  },
  {
    "text": "and asynchronous form and the best thing is this can be used even by applications hosted out of outside of Amazon web",
    "start": "1060760",
    "end": "1068200"
  },
  {
    "text": "services infrastructure so many Enterprise customers use just sqs for sending reliable messages back and forth",
    "start": "1068200",
    "end": "1074720"
  },
  {
    "text": "so you can use uh sqs to architect a very scalable and fall tolerant system",
    "start": "1074720",
    "end": "1081720"
  },
  {
    "text": "let's take video encoding as an example typically this has four different stages",
    "start": "1081720",
    "end": "1087799"
  },
  {
    "text": "the first stage is capturing input the second is about storing uh the the content the third one is encoding and",
    "start": "1087799",
    "end": "1095000"
  },
  {
    "text": "finally publishing now in this mode everything is in a sequential form for example if",
    "start": "1095000",
    "end": "1102480"
  },
  {
    "text": "the encode component fails the whole process comes down to a grinding halt",
    "start": "1102480",
    "end": "1108799"
  },
  {
    "text": "you cannot do anything with the application anymore because the critical component of this process has just",
    "start": "1108799",
    "end": "1114400"
  },
  {
    "text": "failed and this is going to seriously impact your application in a negative way and that's because you have",
    "start": "1114400",
    "end": "1120400"
  },
  {
    "text": "architected that in a sequential chain uh uh kind of an architecture so how do",
    "start": "1120400",
    "end": "1126760"
  },
  {
    "text": "you make sure that you are taking the same application and architecting it using the sqs and asynchronous mechanism",
    "start": "1126760",
    "end": "1134960"
  },
  {
    "text": "simple don't have a hardwired link between each of the components but",
    "start": "1134960",
    "end": "1140039"
  },
  {
    "text": "instead send and receive messages via sqs q and messages now you see that",
    "start": "1140039",
    "end": "1147400"
  },
  {
    "text": "there are no dependencies every component is autonomous independent and can do its own job pretty well uh for",
    "start": "1147400",
    "end": "1154840"
  },
  {
    "text": "some reason if a component like the encode really fails your application is still available and it's it's going to",
    "start": "1154840",
    "end": "1161520"
  },
  {
    "text": "be very graceful way of handling failures within the application everything will keep working but just",
    "start": "1161520",
    "end": "1167200"
  },
  {
    "text": "the encoding component is not not doing its job which is still fine the the customers and end users can still come",
    "start": "1167200",
    "end": "1173039"
  },
  {
    "text": "and upload their content and it just gets queued in one of the message cues once you go back and fix the encode",
    "start": "1173039",
    "end": "1179880"
  },
  {
    "text": "component it will pick up the messages and starts processing uh each of these messages and the best thing is you can",
    "start": "1179880",
    "end": "1186520"
  },
  {
    "text": "now scale just the encode component that gives you an ability to scale just the",
    "start": "1186520",
    "end": "1192520"
  },
  {
    "text": "required component because there are more number of messages waiting in the queue and that will overall um increases",
    "start": "1192520",
    "end": "1199559"
  },
  {
    "text": "the performance of your application and brings it back to normal C so this is how you architect for asynchronous",
    "start": "1199559",
    "end": "1206240"
  },
  {
    "text": "mechanism and decoupling your components the third one is elasticity this is the best way you can",
    "start": "1206240",
    "end": "1212840"
  },
  {
    "text": "take advantage of the cloud but before I really uh talk about elasticity from an architect's perspective I want to borrow",
    "start": "1212840",
    "end": "1220480"
  },
  {
    "text": "a short story from the Epic ramayan during the fierce battle between",
    "start": "1220480",
    "end": "1226520"
  },
  {
    "text": "RAM and rahan Ram was was running out ran was running out of his his army his artillery and",
    "start": "1226520",
    "end": "1233840"
  },
  {
    "text": "everything and he had to deploy a very powerful opponent who can tackle uh the army of ram so he sends his son who is",
    "start": "1233840",
    "end": "1242360"
  },
  {
    "text": "known as indrajit also known as magad magad has a very unique attribute",
    "start": "1242360",
    "end": "1249280"
  },
  {
    "text": "or ability which actually uh enables him to replicate himself on the clouds thus",
    "start": "1249280",
    "end": "1256600"
  },
  {
    "text": "bringing what is called as an illusion of of infinity to the opponent so when the opponent starts using powerful",
    "start": "1256600",
    "end": "1262960"
  },
  {
    "text": "artillery Magna just multiplies and replicates himself among the clouds and",
    "start": "1262960",
    "end": "1268600"
  },
  {
    "text": "the more powerful the artillery the faster the replication and his ultimate goal is to really win over the opponent",
    "start": "1268600",
    "end": "1275480"
  },
  {
    "text": "by confusing him now ultimately magnat uses his power of replication and",
    "start": "1275480",
    "end": "1281360"
  },
  {
    "text": "elasticity on the cloud who take on lakshman and also manages to collapse him and and then the story goes on but",
    "start": "1281360",
    "end": "1288640"
  },
  {
    "text": "how is that applicable to the cloud well we need not fight with demons on the cloud and we don't have gods and demons",
    "start": "1288640",
    "end": "1295080"
  },
  {
    "text": "on the cloud but what we have are the applications and the traffic to deal with right so the same concept of",
    "start": "1295080",
    "end": "1302799"
  },
  {
    "text": "elasticity rapid replication multiplication and the illusion of infinity is what is still applicable to",
    "start": "1302799",
    "end": "1309960"
  },
  {
    "text": "Cloud here your application will be launched initially on three instances and as in when the traffic",
    "start": "1309960",
    "end": "1317440"
  },
  {
    "text": "grows up and you you realize that it needs more",
    "start": "1317440",
    "end": "1322480"
  },
  {
    "text": "uh resources the environment is going to deploy more number of resources and your",
    "start": "1322480",
    "end": "1328000"
  },
  {
    "text": "application will automatically take advantage of this eventually when everything gets stabilized it goes back",
    "start": "1328000",
    "end": "1334000"
  },
  {
    "text": "to the normal configuration of maybe running on just two instances all this",
    "start": "1334000",
    "end": "1339200"
  },
  {
    "text": "is possible because there is a layer called Cloud watch which is going to keep a tab and monitor the resources uh",
    "start": "1339200",
    "end": "1347240"
  },
  {
    "text": "that your application is running on whenever it realizes that the application needs more resources it will",
    "start": "1347240",
    "end": "1353840"
  },
  {
    "text": "work in conjunction with a variety of Technologies like elastic load balancing Auto scale and ec2 to deploy more",
    "start": "1353840",
    "end": "1360799"
  },
  {
    "text": "resources and and you're going to automatically scale out and scaling I want to take specific scenarios on how",
    "start": "1360799",
    "end": "1367440"
  },
  {
    "text": "scaling really works first we have the cyclic scaling uh cyclic is very predictable a Time window that you can",
    "start": "1367440",
    "end": "1375080"
  },
  {
    "text": "really identify and very predictable then example that I want to give you here is tatkal booking in Indian",
    "start": "1375080",
    "end": "1381799"
  },
  {
    "text": "railways right it's extremely predictable every day morning from 7:45",
    "start": "1381799",
    "end": "1386960"
  },
  {
    "text": "till 10:00 anything to do with Railway booking is extremely busy because of the tatkal booking time window now once that",
    "start": "1386960",
    "end": "1394039"
  },
  {
    "text": "window is over everything is back to normal so that is cyclic every day or every week or every quarter a specific",
    "start": "1394039",
    "end": "1400919"
  },
  {
    "text": "time window which is identified the other one is event based where you're just getting ready for a mega event that",
    "start": "1400919",
    "end": "1408159"
  },
  {
    "text": "could be be the World Cup finals in the cricket match or it could be even announcing results of a university which",
    "start": "1408159",
    "end": "1415279"
  },
  {
    "text": "is going to be very event driven and event specific there you just need to provision more number of resources and",
    "start": "1415279",
    "end": "1421080"
  },
  {
    "text": "get ready for that predictable Spike and finally we have Auto scaling which is very unpredictable you never know when",
    "start": "1421080",
    "end": "1428279"
  },
  {
    "text": "you're going to hit a specific threshold and what's going to impact that for example your application or your website",
    "start": "1428279",
    "end": "1434520"
  },
  {
    "text": "getting reviewed um on on some of the popular sites or you get slash dotted",
    "start": "1434520",
    "end": "1440000"
  },
  {
    "text": "and there is a spike of traffic that hits your site so you need to get ready for that so there you're going to have a",
    "start": "1440000",
    "end": "1445679"
  },
  {
    "text": "policy to enable autoscaling to automatically take care of that of",
    "start": "1445679",
    "end": "1450720"
  },
  {
    "text": "course all this happens by leveraging the Technologies behind ec2 and AWS like",
    "start": "1450720",
    "end": "1455840"
  },
  {
    "text": "cloudwatch metrics and management tools Automation and so on uh you can scale up",
    "start": "1455840",
    "end": "1462000"
  },
  {
    "text": "pretty easily both your compute and storage for example when it comes to um",
    "start": "1462000",
    "end": "1468039"
  },
  {
    "start": "1466000",
    "end": "1466000"
  },
  {
    "text": "comp you can set up a policy I'm going to skip this this is going to Define an autoscale policy to react whenever there",
    "start": "1468039",
    "end": "1475279"
  },
  {
    "text": "is a spike in in the traffic assuming that is set properly you're just going to look at the console keep refreshing",
    "start": "1475279",
    "end": "1481600"
  },
  {
    "text": "it to notice how your instances get automatically added and reduced so this",
    "start": "1481600",
    "end": "1487240"
  },
  {
    "text": "ability of growing and shrinking On Demand is called elasticity right uh and",
    "start": "1487240",
    "end": "1492679"
  },
  {
    "text": "the same thing I'm sorry uh I I just missed but uh the same thing is also applicable for uh elastic Block store",
    "start": "1492679",
    "end": "1499840"
  },
  {
    "text": "where you can scale up your storage uh now comes in Dynamic and",
    "start": "1499840",
    "end": "1504960"
  },
  {
    "text": "static where how you are going to deal with uh the data that needs to be processed crunched uh and how you are",
    "start": "1504960",
    "end": "1511840"
  },
  {
    "text": "going to deal with data that is static gets leveraged uh by your your end users",
    "start": "1511840",
    "end": "1517679"
  },
  {
    "text": "and consumers for example this event is being live streamed and we have many audience watching this live on the",
    "start": "1517679",
    "end": "1524120"
  },
  {
    "text": "internet uh and that's that's actually the content that you want to keep close close to the end user because you don't",
    "start": "1524120",
    "end": "1529760"
  },
  {
    "text": "want to have any lag any latency there offer the best possible user experience but you have data that needs to be",
    "start": "1529760",
    "end": "1535480"
  },
  {
    "text": "processed and computed which is more Dynamic that should be kept close to your compute which is ec2 so maybe you",
    "start": "1535480",
    "end": "1542200"
  },
  {
    "text": "might want to run them on the same availability zone for reduced latency rates and better performance but you",
    "start": "1542200",
    "end": "1548919"
  },
  {
    "text": "should take your data and keep it as close as possible to your end users and your customers which will offer better",
    "start": "1548919",
    "end": "1555240"
  },
  {
    "text": "user experience so how do you do this there are are variety of techniques for example you can leverage a concept",
    "start": "1555240",
    "end": "1561480"
  },
  {
    "text": "called bootstrapping an ec2 instance which will bring up an instance and instructs how to split the static",
    "start": "1561480",
    "end": "1568279"
  },
  {
    "text": "content and dynamic content or you can also use an elastic IP which will give you an ability to Route the traffic uh",
    "start": "1568279",
    "end": "1575200"
  },
  {
    "text": "from one uh instance to another instance if that is the end point of your ec2",
    "start": "1575200",
    "end": "1580679"
  },
  {
    "text": "instance you can introduce what is called as an elastic IP and this gives you a redirection capability in case you",
    "start": "1580679",
    "end": "1588360"
  },
  {
    "text": "initial web server has issues and it is not healthy you can automatically bring up another instance and start routing",
    "start": "1588360",
    "end": "1595480"
  },
  {
    "text": "the traffic to the better healthier instance and this is extremely seamless you can just point your a record or your",
    "start": "1595480",
    "end": "1601360"
  },
  {
    "text": "C name to one of your elastic IPS and the traffic automatically gets routed so",
    "start": "1601360",
    "end": "1606520"
  },
  {
    "text": "let's see how how you can use elastic IP to leverage this technique so we are going to we already have a web server so",
    "start": "1606520",
    "end": "1613559"
  },
  {
    "start": "1607000",
    "end": "1607000"
  },
  {
    "text": "we're going to click elastic IPS in the navigation bar and request for a new elastic IP so this is going to get an",
    "start": "1613559",
    "end": "1620000"
  },
  {
    "text": "elastic IP which is a public IP address allocated to you from a pool of public IP addresses and now we're going to",
    "start": "1620000",
    "end": "1626559"
  },
  {
    "text": "attach this or associate this to the running web server and from this point the traffic gets routed from the elastic",
    "start": "1626559",
    "end": "1633919"
  },
  {
    "text": "IP but not the actual public DNS name so that gives you the redirection capability now comes in other very",
    "start": "1633919",
    "end": "1641080"
  },
  {
    "text": "important aspect of architecting for the cloud which is thinking parallel before we really get to the the archit tal",
    "start": "1641080",
    "end": "1648640"
  },
  {
    "text": "aspects for a while I want you to think about how Mumbai daala function right",
    "start": "1648640",
    "end": "1655559"
  },
  {
    "text": "what has Mumbai dabbawalas got to do with parallelizing and and distributed computing on the cloud well Mumbai",
    "start": "1655559",
    "end": "1661320"
  },
  {
    "text": "dabbawalas actually do few things very well their primary job is to pick up lunch boxes or tiffen boxes from",
    "start": "1661320",
    "end": "1667960"
  },
  {
    "text": "households and deliver it to offices and do the same thing in the evening collect the offices collect the boxes from",
    "start": "1667960",
    "end": "1674080"
  },
  {
    "text": "offices and bring them back to the households this might sound very simple but what goes into it is extremely",
    "start": "1674080",
    "end": "1680799"
  },
  {
    "text": "efficient and optimized to an extent that Mumbai dabbawalas got Six Sigma",
    "start": "1680799",
    "end": "1685880"
  },
  {
    "text": "certification and they have U an efficiency of",
    "start": "1685880",
    "end": "1691360"
  },
  {
    "text": "99.9% right so what exactly do they do uh once a tiffen daba is picked up it",
    "start": "1691360",
    "end": "1697240"
  },
  {
    "text": "gets color coded and it gets coded based on how it's going to be delivered to the destination and this Dabba goes through",
    "start": "1697240",
    "end": "1705679"
  },
  {
    "text": "a different process where uh a specific Mumbai daala will pick up the box and",
    "start": "1705679",
    "end": "1710919"
  },
  {
    "text": "delivers it to the next destination and it goes through a variety of hops to finally reach the destination the thing",
    "start": "1710919",
    "end": "1717480"
  },
  {
    "text": "is at any point no daala precisely knows where the Box actually came from and",
    "start": "1717480",
    "end": "1723200"
  },
  {
    "text": "where it is going he only does his job as an intermediary and all of them",
    "start": "1723200",
    "end": "1728240"
  },
  {
    "text": "collaboratively work together to achieve the common goal but all of them work in parallel across the across the city",
    "start": "1728240",
    "end": "1735720"
  },
  {
    "text": "across the metro to achieve the same goal right and to technically look at this process they do few things in a sequence",
    "start": "1735720",
    "end": "1743519"
  },
  {
    "text": "they collect they Shuffle they sort they reduce and they",
    "start": "1743519",
    "end": "1749080"
  },
  {
    "text": "deliver now when you put all these keywords together collect Shuffle sort",
    "start": "1749080",
    "end": "1755440"
  },
  {
    "text": "uh redjuice and deliver it reminds you of a framework called map",
    "start": "1755440",
    "end": "1760679"
  },
  {
    "text": "redjuice now though it may not be called as map red they have mastered the same",
    "start": "1760679",
    "end": "1765840"
  },
  {
    "text": "algorithm almost a century ago and that's exactly what is now called as Hado or it's available on Amazon uh web",
    "start": "1765840",
    "end": "1773399"
  },
  {
    "text": "services as elastic map ruse so when you're architecting for the cloud always think of how you can parallelize your",
    "start": "1773399",
    "end": "1780640"
  },
  {
    "text": "operations how you can leverage a technique where you are employing multiple resources to do the same task",
    "start": "1780640",
    "end": "1786799"
  },
  {
    "text": "one way of thinking about it is if you require one computer uh to process a job",
    "start": "1786799",
    "end": "1793279"
  },
  {
    "text": "and it is taking 500 hours how about spinning 500 instances and getting the the job done in just 1 hour right here",
    "start": "1793279",
    "end": "1800840"
  },
  {
    "text": "you are thinking in parallel and employing more resources to achieve the common goal uh that happens when you are",
    "start": "1800840",
    "end": "1806919"
  },
  {
    "text": "leveraging elastic map juice or you're chunking your large data that's that's",
    "start": "1806919",
    "end": "1812039"
  },
  {
    "text": "being uploaded to S3 and and using a parallel upload process or even leveraging elastic load balancing which",
    "start": "1812039",
    "end": "1818880"
  },
  {
    "start": "1818000",
    "end": "1818000"
  },
  {
    "text": "is going to Route the traffic to a fleet of web servers let's see elb in action so I'm going to create an elastic load",
    "start": "1818880",
    "end": "1824919"
  },
  {
    "text": "balancer and point Port 80 of my load balancer to Port 80 of my uh ec2",
    "start": "1824919",
    "end": "1830320"
  },
  {
    "text": "instance give it a descriptive name and configure some more options we'll",
    "start": "1830320",
    "end": "1836440"
  },
  {
    "text": "revisit this in my technical track session developing fall tolerant applications but for now we are just",
    "start": "1836440",
    "end": "1841640"
  },
  {
    "text": "creating an elb adding the number of web servers that we already have to the elb",
    "start": "1841640",
    "end": "1847159"
  },
  {
    "text": "and going live after a while you will notice that the load balancer gives us a",
    "start": "1847159",
    "end": "1853240"
  },
  {
    "text": "public DNS endpoint which can be wired to the a record of your IP address and",
    "start": "1853240",
    "end": "1859240"
  },
  {
    "text": "that's going to be acting as an intermediary to Route the traffic in the most optimized way so we have just",
    "start": "1859240",
    "end": "1865279"
  },
  {
    "text": "parallelized the web server traffic right and now comes in another very interesting aspect of not fearing",
    "start": "1865279",
    "end": "1871360"
  },
  {
    "text": "constraints many Architects have this uh concern about dealing with virtual",
    "start": "1871360",
    "end": "1877399"
  },
  {
    "text": "infrastructure and dealing with constraints so what exactly uh are you going to deal with uh I'm not going to",
    "start": "1877399",
    "end": "1883360"
  },
  {
    "text": "touch and feel the resources so how do how do I really deal with the cloud infrastructure how do I live with constraints well everyone has",
    "start": "1883360",
    "end": "1890519"
  },
  {
    "text": "constraints but uh the the best of the folks who who are known to deal with constraints are called superheroes and",
    "start": "1890519",
    "end": "1897480"
  },
  {
    "text": "when I say superheroes we only think of the heroes from Bollywood and down south",
    "start": "1897480",
    "end": "1902639"
  },
  {
    "text": "who are known for overcoming constraints in a better way that's why they are called superheroes and I come from down",
    "start": "1902639",
    "end": "1908720"
  },
  {
    "text": "south and who's a superhero that you can associate with South Indian rajnikant right he is best known",
    "start": "1908720",
    "end": "1916360"
  },
  {
    "text": "to defy the loss of physics loss of gravity and never worry about constraints so I want to show you how he",
    "start": "1916360",
    "end": "1921919"
  },
  {
    "text": "does that very",
    "start": "1921919",
    "end": "1924600"
  },
  {
    "text": "efficiently so so be a superhero don't don't worry about constraints don't fear constraints",
    "start": "1943320",
    "end": "1950039"
  },
  {
    "text": "on the cloud you have a variety of techniques to deal with constraints you need better database performance you can",
    "start": "1950039",
    "end": "1955880"
  },
  {
    "text": "either sh the database or enable read replicas or go for clustering uh you want more RAM you can leverage mcash D",
    "start": "1955880",
    "end": "1963399"
  },
  {
    "text": "set up on ec2 or even subscribe to a new service that we launched called elastic cache or you want better performance for",
    "start": "1963399",
    "end": "1970799"
  },
  {
    "text": "the dis IO well you can set up elastic Block store in a rate configuration and increase your dis IO and iops so so that",
    "start": "1970799",
    "end": "1979440"
  },
  {
    "text": "that's basically how you deal with uh the the constraints on the cloud to give you one example this is this is",
    "start": "1979440",
    "end": "1986039"
  },
  {
    "text": "something that we have already seen uh multi AZ for RDS but if you want to uh enhance the performance of your database",
    "start": "1986039",
    "end": "1992559"
  },
  {
    "text": "server you can deploy your database and enable what is called as a read replica",
    "start": "1992559",
    "end": "1997639"
  },
  {
    "text": "which gives you a highly optimized way of dealing with the database traffic you have one master which is going to be the",
    "start": "1997639",
    "end": "2004279"
  },
  {
    "text": "read write server but you can go up to five read replicas it will be highly optimized for the read and index based",
    "start": "2004279",
    "end": "2011480"
  },
  {
    "text": "traffic so this is going to increase the database IO performance dramatically when you deploy read replicas so that's",
    "start": "2011480",
    "end": "2020720"
  },
  {
    "text": "that was about uh using some of the techniques to overcome constraints and now comes security the most important",
    "start": "2020720",
    "end": "2026480"
  },
  {
    "text": "aspect Dr Verner Vogel spent a lot of time and I just want to reemphasize that our number one priority is security we",
    "start": "2026480",
    "end": "2034480"
  },
  {
    "text": "are very very concerned and we are very focused on making the infrastructure secure that's our number one priority",
    "start": "2034480",
    "end": "2040720"
  },
  {
    "text": "and we have seen a variety of certifications that are already in place uh that Dr wner has mentioned but I want",
    "start": "2040720",
    "end": "2046679"
  },
  {
    "text": "to talk to you about one thing which is ec2 instance isolation at the lowest level we isolate the ec2 instances so",
    "start": "2046679",
    "end": "2054638"
  },
  {
    "text": "that even an instance running on the same physical Hardware will never be able to talk to another customer",
    "start": "2054639",
    "end": "2060720"
  },
  {
    "text": "instance sharing the same physical Hardware at the lowest possible level the instance isolation is taken care of",
    "start": "2060720",
    "end": "2067398"
  },
  {
    "text": "and simp similarly we have security groups which offer you a firewall kind of a layer that protect your resources",
    "start": "2067399",
    "end": "2074240"
  },
  {
    "text": "from unauthorized traffic uh for example if you are deploying an end tier",
    "start": "2074240",
    "end": "2079320"
  },
  {
    "text": "application on AWS which almost looks like a fleet of web servers Fleet of app",
    "start": "2079320",
    "end": "2084358"
  },
  {
    "text": "servers database servers and some databases running in RDS you might want to open up selective ports for a",
    "start": "2084359",
    "end": "2091480"
  },
  {
    "text": "different kind of traffic for example the public traffic public internet based traffic should come via Port 80 and you",
    "start": "2091480",
    "end": "2099560"
  },
  {
    "text": "want to open up all IP addresses for that but the administrator who is sitting in the in the data center or the",
    "start": "2099560",
    "end": "2105440"
  },
  {
    "text": "corporate environment has a static IP address and you want to open it up only for Port 22 so the public internet",
    "start": "2105440",
    "end": "2111800"
  },
  {
    "text": "traffic will never be able to access SSH but the administrator has access to Port 22 and similarly I can Define policies",
    "start": "2111800",
    "end": "2119640"
  },
  {
    "text": "that will restrict or allow traffic to each of the layers in such a way that I can never short circuit this chain and",
    "start": "2119640",
    "end": "2125359"
  },
  {
    "text": "access a database or the uh app here directly I have to come via",
    "start": "2125359",
    "end": "2131079"
  },
  {
    "text": "the appropriate channel to touch any of the resources so that is the security group uh which is going to act as a",
    "start": "2131079",
    "end": "2138000"
  },
  {
    "text": "filter and and giving you a firewall kind of a layer protecting your",
    "start": "2138000",
    "end": "2143040"
  },
  {
    "text": "resources so let's take a look at how security groups are created so now we have the resources in place so we are",
    "start": "2143040",
    "end": "2150200"
  },
  {
    "start": "2144000",
    "end": "2144000"
  },
  {
    "text": "going ahead and creating a security group let's give it a descriptive name and then go ahead and Define the",
    "start": "2150200",
    "end": "2155440"
  },
  {
    "text": "policies so once the security group is created I'm going to define a policy saying uh HTTP traffic comes from any IP",
    "start": "2155440",
    "end": "2163480"
  },
  {
    "text": "address all zeros but SSH traffic comes from a specific IP address that is",
    "start": "2163480",
    "end": "2168720"
  },
  {
    "text": "defined in another Security Group now this is going to allo or diselo traffic based on the origin so that's going to",
    "start": "2168720",
    "end": "2175280"
  },
  {
    "text": "be very very easy for you to deal with and just uh revisiting some of the",
    "start": "2175280",
    "end": "2180960"
  },
  {
    "text": "concepts that Dr Verner has mentioned you can leverage AWS Direct Connect",
    "start": "2180960",
    "end": "2186000"
  },
  {
    "text": "which runs a dedicated uh network connection between your infrastructure and AWS infrastructure low latency",
    "start": "2186000",
    "end": "2192160"
  },
  {
    "text": "highly secure way of accessing the cloud resources or you can also leverage uh VPC or virtual private Cloud where you",
    "start": "2192160",
    "end": "2199040"
  },
  {
    "text": "can move your sensitive workloads into a quadent of space within ec2 thus giving you a very secure way of moving your",
    "start": "2199040",
    "end": "2205240"
  },
  {
    "text": "workloads into the cloud and you can also run dedicated instances where your",
    "start": "2205240",
    "end": "2210960"
  },
  {
    "text": "instance is running a single tenant mode on a dedicated piece of Hardware without sharing the underlying infrastructure so",
    "start": "2210960",
    "end": "2217119"
  },
  {
    "text": "these are some of the ways of dealing with the networking and security so it's time for me to quickly",
    "start": "2217119",
    "end": "2223119"
  },
  {
    "text": "summarize and this slide is going to be uh available on the AWS architecture site",
    "start": "2223119",
    "end": "2230640"
  },
  {
    "start": "2227000",
    "end": "2227000"
  },
  {
    "text": "uh and we are also going to post the same video and the slide deck on the AWS Cloud T India page you can also access",
    "start": "2230640",
    "end": "2237640"
  },
  {
    "text": "it on the slides share which is available today uh and remember I have a technical session in the technical track",
    "start": "2237640",
    "end": "2243400"
  },
  {
    "text": "about fall tolerance sessions where I'm going to do a deep dive on some of the concepts so so these are my coordinates",
    "start": "2243400",
    "end": "2249200"
  },
  {
    "text": "um I hope you like this session and have a great day ahead thank you",
    "start": "2249200",
    "end": "2255720"
  }
]