[
  {
    "start": "0",
    "end": "41000"
  },
  {
    "text": "- Hey, folks. I'm Alex DeBrie.",
    "start": "3300",
    "end": "4470"
  },
  {
    "text": "And today, we're gonna\ntalk about using DynamoDB",
    "start": "4470",
    "end": "6330"
  },
  {
    "text": "with your GraphQL API.",
    "start": "6330",
    "end": "8340"
  },
  {
    "text": "Now, a lot of DynamoDB advice",
    "start": "8340",
    "end": "10200"
  },
  {
    "text": "recommends using single table design",
    "start": "10200",
    "end": "11910"
  },
  {
    "text": "for your DynamoDB applications,",
    "start": "11910",
    "end": "13800"
  },
  {
    "text": "and there's some debate about how well",
    "start": "13800",
    "end": "15300"
  },
  {
    "text": "that works with GraphQL.",
    "start": "15300",
    "end": "17310"
  },
  {
    "text": "In this video, we're gonna show how to use",
    "start": "17310",
    "end": "18930"
  },
  {
    "text": "single table design with your GraphQL API.",
    "start": "18930",
    "end": "22140"
  },
  {
    "text": "The key trade off to know\nhere is this is gonna add",
    "start": "22140",
    "end": "24300"
  },
  {
    "text": "a little bit more complexity\nin your resolvers,",
    "start": "24300",
    "end": "26699"
  },
  {
    "text": "but you're gonna have better\nperformance on your queries.",
    "start": "26700",
    "end": "29580"
  },
  {
    "text": "So we're gonna build\nthis using AWS AppSync.",
    "start": "29580",
    "end": "32610"
  },
  {
    "text": "I'm gonna show the key\npoints in the AWS Console,",
    "start": "32610",
    "end": "35220"
  },
  {
    "text": "but if you wanna see how this is done",
    "start": "35220",
    "end": "36690"
  },
  {
    "text": "using infrastructure as code,",
    "start": "36690",
    "end": "38250"
  },
  {
    "text": "go ahead and check out the repo",
    "start": "38250",
    "end": "39420"
  },
  {
    "text": "that's accompanying this project.",
    "start": "39420",
    "end": "41192"
  },
  {
    "start": "41000",
    "end": "80000"
  },
  {
    "text": "Before we get started,",
    "start": "42030",
    "end": "42899"
  },
  {
    "text": "I just wanna talk about\nthe guiding application",
    "start": "42900",
    "end": "44970"
  },
  {
    "text": "that we're gonna use for this example.",
    "start": "44970",
    "end": "47160"
  },
  {
    "text": "Imagine we have some sort of\nSAS blog hosting platform.",
    "start": "47160",
    "end": "50850"
  },
  {
    "text": "So users can come in,\nthey can set up a site,",
    "start": "50850",
    "end": "53399"
  },
  {
    "text": "so we have a site entity\nin our application.",
    "start": "53400",
    "end": "56490"
  },
  {
    "text": "Once they've created a site,\nthey can blog on that site,",
    "start": "56490",
    "end": "59010"
  },
  {
    "text": "add lots of different posts,",
    "start": "59010",
    "end": "60300"
  },
  {
    "text": "so there's a one-to-many relationship",
    "start": "60300",
    "end": "61950"
  },
  {
    "text": "between sites and posts.",
    "start": "61950",
    "end": "63840"
  },
  {
    "text": "Also, when other users and readers",
    "start": "63840",
    "end": "65910"
  },
  {
    "text": "come and look at those posts,",
    "start": "65910",
    "end": "67440"
  },
  {
    "text": "they can comment on\nthose posts if they want.",
    "start": "67440",
    "end": "69450"
  },
  {
    "text": "So we have a one-to-many relationship",
    "start": "69450",
    "end": "70770"
  },
  {
    "text": "between posts and comments.",
    "start": "70770",
    "end": "72899"
  },
  {
    "text": "Now, the key point here",
    "start": "72900",
    "end": "73770"
  },
  {
    "text": "is even though we have\nthree separate entities,",
    "start": "73770",
    "end": "75810"
  },
  {
    "text": "they're all gonna be going\ninto that single DynamoDB table",
    "start": "75810",
    "end": "78840"
  },
  {
    "text": "that we're gonna be using\nfor this application.",
    "start": "78840",
    "end": "80926"
  },
  {
    "start": "80000",
    "end": "123000"
  },
  {
    "text": "All right, the first thing we're gonna do",
    "start": "80927",
    "end": "81930"
  },
  {
    "text": "is create that DynamoDB table.",
    "start": "81930",
    "end": "83550"
  },
  {
    "text": "So head to the DynamoDB\nsection of the AWS Console",
    "start": "83550",
    "end": "87210"
  },
  {
    "text": "and click that Create table\nbutton to get started.",
    "start": "87210",
    "end": "90240"
  },
  {
    "text": "We need to give our table a name.",
    "start": "90240",
    "end": "91350"
  },
  {
    "text": "Since we're just using\na single table here,",
    "start": "91350",
    "end": "92939"
  },
  {
    "text": "we'll just give it a name\nlike AppSyncSingleTable.",
    "start": "92940",
    "end": "95790"
  },
  {
    "text": "And then, we're gonna choose\nthe primary key for our table.",
    "start": "95790",
    "end": "99000"
  },
  {
    "text": "Since we're using single table design,",
    "start": "99000",
    "end": "100650"
  },
  {
    "text": "we'll use that generic PK, SK values",
    "start": "100650",
    "end": "103230"
  },
  {
    "text": "for our partition key\nand our sort key there.",
    "start": "103230",
    "end": "106260"
  },
  {
    "text": "We'll keep most of the settings the same.",
    "start": "106260",
    "end": "107550"
  },
  {
    "text": "The only thing we wanna change here",
    "start": "107550",
    "end": "108570"
  },
  {
    "text": "is go to On-demand mode,",
    "start": "108570",
    "end": "109740"
  },
  {
    "text": "so we don't really need to worry",
    "start": "109740",
    "end": "110640"
  },
  {
    "text": "about our capacity for this,",
    "start": "110640",
    "end": "112470"
  },
  {
    "text": "and scroll down and hit\nthat Create table button.",
    "start": "112470",
    "end": "114920"
  },
  {
    "text": "We'll just give it a second",
    "start": "115920",
    "end": "116850"
  },
  {
    "text": "and wait for our table to be created.",
    "start": "116850",
    "end": "118530"
  },
  {
    "text": "And as soon as it's created,",
    "start": "118530",
    "end": "120119"
  },
  {
    "text": "we can go on and create our AppSync API.",
    "start": "120120",
    "end": "123780"
  },
  {
    "start": "123000",
    "end": "210000"
  },
  {
    "text": "To do that, we wanna head\nto the AWS AppSync section",
    "start": "123780",
    "end": "126659"
  },
  {
    "text": "of the AWS Console.",
    "start": "126660",
    "end": "128250"
  },
  {
    "text": "Go there and click that Create API button.",
    "start": "128250",
    "end": "130710"
  },
  {
    "text": "There are a few different\nwizards and guides,",
    "start": "130710",
    "end": "132270"
  },
  {
    "text": "ways we can set up our schema,",
    "start": "132270",
    "end": "133650"
  },
  {
    "text": "but we already have a schema",
    "start": "133650",
    "end": "134879"
  },
  {
    "text": "so we'll just do the\nBuild from scratch option",
    "start": "134880",
    "end": "136710"
  },
  {
    "text": "and click Start.",
    "start": "136710",
    "end": "138180"
  },
  {
    "text": "Next thing we need to do\nis give our API a name,",
    "start": "138180",
    "end": "140250"
  },
  {
    "text": "so we'll give it the name SingleTableBlog,",
    "start": "140250",
    "end": "142500"
  },
  {
    "text": "and hit that Create button.",
    "start": "142500",
    "end": "144213"
  },
  {
    "text": "So now, we've created our API.",
    "start": "146790",
    "end": "148290"
  },
  {
    "text": "What we need to do is edit our schema.",
    "start": "148290",
    "end": "150030"
  },
  {
    "text": "So let's click that Edit schema button.",
    "start": "150030",
    "end": "152040"
  },
  {
    "text": "And we'll just paste in our schema",
    "start": "152040",
    "end": "153480"
  },
  {
    "text": "that we already have defined for that.",
    "start": "153480",
    "end": "155459"
  },
  {
    "text": "I wanna take a quick look at that.",
    "start": "155460",
    "end": "156810"
  },
  {
    "text": "You can see the schema root",
    "start": "156810",
    "end": "158190"
  },
  {
    "text": "which has both query and mutation on it.",
    "start": "158190",
    "end": "160860"
  },
  {
    "text": "Within our query, you can see we have",
    "start": "160860",
    "end": "162660"
  },
  {
    "text": "a few different top level queries:",
    "start": "162660",
    "end": "164220"
  },
  {
    "text": "getSite, getPostsForSite,",
    "start": "164220",
    "end": "166080"
  },
  {
    "text": "things that are in common\nin our application.",
    "start": "166080",
    "end": "168570"
  },
  {
    "text": "We also have the different\nmutations that we'll have:",
    "start": "168570",
    "end": "171060"
  },
  {
    "text": "createSite, createPost,\ncreateComment, things like that.",
    "start": "171060",
    "end": "174660"
  },
  {
    "text": "Additionally, we have\nall of our types defined.",
    "start": "174660",
    "end": "177210"
  },
  {
    "text": "You can hit Save Schema to\nsave that schema to your API.",
    "start": "177210",
    "end": "180873"
  },
  {
    "text": "One last thing I wanna do here,\nhead over to Data Sources,",
    "start": "182070",
    "end": "185100"
  },
  {
    "text": "and we're gonna register our\nDynamoDB table we created.",
    "start": "185100",
    "end": "188220"
  },
  {
    "text": "So we create our DynamoDB table.",
    "start": "188220",
    "end": "190290"
  },
  {
    "text": "We wanna register it for use here.",
    "start": "190290",
    "end": "192120"
  },
  {
    "text": "We'll give it a name of DynamoDBTable,",
    "start": "192120",
    "end": "193950"
  },
  {
    "text": "and indicate that it's\nof type DynamoDB table.",
    "start": "193950",
    "end": "196980"
  },
  {
    "text": "We'll look up the region\nthat we created it in,",
    "start": "196980",
    "end": "199050"
  },
  {
    "text": "and then we should be able to see",
    "start": "199050",
    "end": "199980"
  },
  {
    "text": "our AppSyncSingleTable table.",
    "start": "199980",
    "end": "202709"
  },
  {
    "text": "Once you've done that,\nhit that Create button",
    "start": "202710",
    "end": "204870"
  },
  {
    "text": "and you're good to go.",
    "start": "204870",
    "end": "205702"
  },
  {
    "text": "You've now registered\nyour table within your API",
    "start": "205703",
    "end": "208170"
  },
  {
    "text": "and you can use it in a resolver.",
    "start": "208170",
    "end": "209819"
  },
  {
    "text": "Let's go create one of\nthese resolvers now.",
    "start": "210840",
    "end": "212940"
  },
  {
    "text": "So what I wanna do is head back",
    "start": "212940",
    "end": "214350"
  },
  {
    "text": "to my schema that I've already entered.",
    "start": "214350",
    "end": "216030"
  },
  {
    "text": "And if you look at your\nschema on the right hand side,",
    "start": "216030",
    "end": "218190"
  },
  {
    "text": "there's a Resolver section,",
    "start": "218190",
    "end": "219900"
  },
  {
    "text": "where you can attach different resolvers",
    "start": "219900",
    "end": "221849"
  },
  {
    "text": "to different fields in your schema.",
    "start": "221850",
    "end": "224460"
  },
  {
    "text": "I'm gonna scroll down\nto the mutation resolver",
    "start": "224460",
    "end": "226620"
  },
  {
    "text": "and do that createSite,",
    "start": "226620",
    "end": "227700"
  },
  {
    "text": "sort of the top-level\nresolver in my application.",
    "start": "227700",
    "end": "230520"
  },
  {
    "text": "I'll configure a data source",
    "start": "230520",
    "end": "231750"
  },
  {
    "text": "and because I'm going\ndirectly to a DynamoDB table,",
    "start": "231750",
    "end": "234810"
  },
  {
    "text": "I'll use what's called VTL templates.",
    "start": "234810",
    "end": "236730"
  },
  {
    "text": "So this is a templating language",
    "start": "236730",
    "end": "238019"
  },
  {
    "text": "to interact directly\nwith my DynamoDB table.",
    "start": "238020",
    "end": "240900"
  },
  {
    "text": "If you don't like VTL,",
    "start": "240900",
    "end": "242010"
  },
  {
    "text": "you can use a lambda\nfunction directly instead",
    "start": "242010",
    "end": "244590"
  },
  {
    "text": "and work with your\nDynamoDB table that way.",
    "start": "244590",
    "end": "246870"
  },
  {
    "text": "But I'm gonna be working with VTL",
    "start": "246870",
    "end": "248280"
  },
  {
    "text": "in this particular example.",
    "start": "248280",
    "end": "250470"
  },
  {
    "text": "So I'll paste in",
    "start": "250470",
    "end": "251430"
  },
  {
    "text": "both the request mapping\nand the response mapping.",
    "start": "251430",
    "end": "254189"
  },
  {
    "text": "One thing, if you look\nat the request mapping,",
    "start": "254190",
    "end": "255870"
  },
  {
    "text": "just notice the key we're using there.",
    "start": "255870",
    "end": "257430"
  },
  {
    "text": "We're using PK and SK for that",
    "start": "257430",
    "end": "259320"
  },
  {
    "text": "primary key value for our item.",
    "start": "259320",
    "end": "261390"
  },
  {
    "text": "We also have a type attribute.",
    "start": "261390",
    "end": "263250"
  },
  {
    "text": "These are common DynamoDB single table",
    "start": "263250",
    "end": "265200"
  },
  {
    "text": "design principles here,\nso we'll just do that.",
    "start": "265200",
    "end": "267570"
  },
  {
    "text": "We'll save this resolver here.",
    "start": "267570",
    "end": "268920"
  },
  {
    "text": "And we've configured our first resolver",
    "start": "268920",
    "end": "270750"
  },
  {
    "text": "on our DynamoDB table.",
    "start": "270750",
    "end": "272253"
  },
  {
    "text": "I wanna set up one more\nresolver for our schema",
    "start": "273090",
    "end": "275520"
  },
  {
    "text": "because it's a little more complex,",
    "start": "275520",
    "end": "276810"
  },
  {
    "text": "and it's gonna show off\nthat single table design.",
    "start": "276810",
    "end": "279210"
  },
  {
    "text": "So let's go down and find\nour site type in our schema.",
    "start": "279210",
    "end": "282780"
  },
  {
    "text": "You can see that it has some properties,",
    "start": "282780",
    "end": "284130"
  },
  {
    "text": "id, name, domain,",
    "start": "284130",
    "end": "285360"
  },
  {
    "text": "but it also has this posts property,",
    "start": "285360",
    "end": "287849"
  },
  {
    "text": "which is of type PostConnection,",
    "start": "287850",
    "end": "289200"
  },
  {
    "text": "which is gonna include a cursor",
    "start": "289200",
    "end": "290730"
  },
  {
    "text": "plus a post array of other posts.",
    "start": "290730",
    "end": "292950"
  },
  {
    "text": "So what that includes is",
    "start": "292950",
    "end": "294360"
  },
  {
    "text": "if someone comes and gets our site,",
    "start": "294360",
    "end": "295860"
  },
  {
    "text": "they can also fetch the post with it.",
    "start": "295860",
    "end": "297930"
  },
  {
    "text": "We're gonna show how to\nuse single table design",
    "start": "297930",
    "end": "299820"
  },
  {
    "text": "with our GraphQL schema here.",
    "start": "299820",
    "end": "302040"
  },
  {
    "text": "So let's go set up our\ngetSite resolver here.",
    "start": "302040",
    "end": "305730"
  },
  {
    "text": "We'll find that query\nand attach a resolver,",
    "start": "305730",
    "end": "308188"
  },
  {
    "text": "so DynamoDBTable.",
    "start": "308188",
    "end": "309659"
  },
  {
    "text": "Again, we have to do that\nrequest mapping template,",
    "start": "309660",
    "end": "312270"
  },
  {
    "text": "response mapping template.",
    "start": "312270",
    "end": "314009"
  },
  {
    "text": "I'm gonna put in the request\nmapping template here.",
    "start": "314010",
    "end": "316410"
  },
  {
    "text": "One thing to note is just\nlook at the top there.",
    "start": "316410",
    "end": "318540"
  },
  {
    "text": "We're doing some interesting work",
    "start": "318540",
    "end": "319890"
  },
  {
    "text": "where we're looking at\nthe selection set list.",
    "start": "319890",
    "end": "322380"
  },
  {
    "text": "So this is basically saying",
    "start": "322380",
    "end": "323880"
  },
  {
    "text": "what attributes are they looking at",
    "start": "323880",
    "end": "325800"
  },
  {
    "text": "in this particular resolver,",
    "start": "325800",
    "end": "326817"
  },
  {
    "text": "and if it contains posts,\nwe're gonna fetch more items.",
    "start": "326817",
    "end": "330629"
  },
  {
    "text": "We're gonna fetch 11 items,\nso the site plus 10 posts.",
    "start": "330630",
    "end": "333660"
  },
  {
    "text": "Whereas if we're fetching just the site,",
    "start": "333660",
    "end": "335130"
  },
  {
    "text": "then we'll just get that one site item.",
    "start": "335130",
    "end": "337830"
  },
  {
    "text": "Likewise, let's go down into",
    "start": "337830",
    "end": "339599"
  },
  {
    "text": "the response mapping\ntemplate section down here.",
    "start": "339600",
    "end": "342180"
  },
  {
    "text": "This is complex as well.",
    "start": "342180",
    "end": "343530"
  },
  {
    "text": "At the beginning, we're saying,",
    "start": "343530",
    "end": "344376"
  },
  {
    "text": "\"Hey, if we don't get anything\nback, just return that.\"",
    "start": "344377",
    "end": "347160"
  },
  {
    "text": "But if we do get some items back,",
    "start": "347160",
    "end": "348840"
  },
  {
    "text": "now we need to iterate\nthrough that result set",
    "start": "348840",
    "end": "351270"
  },
  {
    "text": "and sort of deserialize those,\nfigure out what they are.",
    "start": "351270",
    "end": "353610"
  },
  {
    "text": "If it's a site, we'll set\nthat as our site item.",
    "start": "353610",
    "end": "355935"
  },
  {
    "text": "If it's of type post, we'll\nadd it to this post array.",
    "start": "355936",
    "end": "359070"
  },
  {
    "text": "And then later on, we'll add those posts",
    "start": "359070",
    "end": "361170"
  },
  {
    "text": "to our site as an attribute,",
    "start": "361170",
    "end": "363125"
  },
  {
    "text": "include both the cursor and those posts,",
    "start": "363125",
    "end": "365310"
  },
  {
    "text": "and then return it back\nto our calling client.",
    "start": "365310",
    "end": "368070"
  },
  {
    "text": "So again, the VTL is a\nlittle more complex here,",
    "start": "368070",
    "end": "370890"
  },
  {
    "text": "but you can still use those\nsingle table principles",
    "start": "370890",
    "end": "373530"
  },
  {
    "text": "with AppSync with GraphQL and DynamoDB.",
    "start": "373530",
    "end": "376830"
  },
  {
    "start": "376000",
    "end": "398000"
  },
  {
    "text": "I'm gonna set the rest of the\nresolver up on my own time,",
    "start": "376830",
    "end": "378870"
  },
  {
    "text": "but there's one last thing I wanna do.",
    "start": "378870",
    "end": "380820"
  },
  {
    "text": "Let's set up x-ray on our\nGraphQL API, so go to Settings,",
    "start": "380820",
    "end": "384570"
  },
  {
    "text": "and then you can scroll\ndown and click Enable X-ray,",
    "start": "384570",
    "end": "387900"
  },
  {
    "text": "and save those settings.",
    "start": "387900",
    "end": "388979"
  },
  {
    "text": "And what x-ray is gonna\ngive you is just visibility",
    "start": "388980",
    "end": "391170"
  },
  {
    "text": "into what's happening\non a particular request.",
    "start": "391170",
    "end": "393420"
  },
  {
    "text": "So you can see all the different\nresolvers that were hit,",
    "start": "393420",
    "end": "395430"
  },
  {
    "text": "all the different APIs that were called",
    "start": "395430",
    "end": "397050"
  },
  {
    "text": "as part of a request.",
    "start": "397050",
    "end": "398373"
  },
  {
    "start": "398000",
    "end": "449000"
  },
  {
    "text": "All right, with x-ray configured,",
    "start": "399480",
    "end": "400890"
  },
  {
    "text": "with all our resolvers set up,",
    "start": "400890",
    "end": "402270"
  },
  {
    "text": "it's time to actually run some queries.",
    "start": "402270",
    "end": "403979"
  },
  {
    "text": "So let's go over to the\nleft-hand side here,",
    "start": "403980",
    "end": "405390"
  },
  {
    "text": "click that Queries button.",
    "start": "405390",
    "end": "406800"
  },
  {
    "text": "And what this is, inside AppSync",
    "start": "406800",
    "end": "408780"
  },
  {
    "text": "you get a little query browser",
    "start": "408780",
    "end": "410100"
  },
  {
    "text": "that you can run some\nqueries directly in there.",
    "start": "410100",
    "end": "412980"
  },
  {
    "text": "So the first thing we wanna\ndo is create our first site.",
    "start": "412980",
    "end": "415620"
  },
  {
    "text": "We'll do that createSite mutation",
    "start": "415620",
    "end": "417600"
  },
  {
    "text": "and just create a blog for awsamazon.com.",
    "start": "417600",
    "end": "420930"
  },
  {
    "text": "So we'll send that in.",
    "start": "420930",
    "end": "422100"
  },
  {
    "text": "We were able to create that site.",
    "start": "422100",
    "end": "424290"
  },
  {
    "text": "But a site is only as good\nas the posts that are on it,",
    "start": "424290",
    "end": "427020"
  },
  {
    "text": "so let's create a few posts as well.",
    "start": "427020",
    "end": "429389"
  },
  {
    "text": "We'll use that createPost mutation there",
    "start": "429390",
    "end": "432240"
  },
  {
    "text": "using that awsamazon.com domain,",
    "start": "432240",
    "end": "434699"
  },
  {
    "text": "and send in our first blog post.",
    "start": "434700",
    "end": "436770"
  },
  {
    "text": "Hurray, that succeeded, we\ngot one blog post in there.",
    "start": "436770",
    "end": "439080"
  },
  {
    "text": "Let's do one more blog post,",
    "start": "439080",
    "end": "440220"
  },
  {
    "text": "'cause we don't want to have just one",
    "start": "440220",
    "end": "442080"
  },
  {
    "text": "as we're showing this.",
    "start": "442080",
    "end": "442913"
  },
  {
    "text": "So let's get a second blog post in there,",
    "start": "442913",
    "end": "444990"
  },
  {
    "text": "and we have our second post.",
    "start": "444990",
    "end": "447210"
  },
  {
    "text": "This was able to create a second post.",
    "start": "447210",
    "end": "449850"
  },
  {
    "start": "449000",
    "end": "522000"
  },
  {
    "text": "So now, that we've created these things,",
    "start": "449850",
    "end": "451050"
  },
  {
    "text": "let's actually query them back.",
    "start": "451050",
    "end": "452729"
  },
  {
    "text": "And that's where we're gonna see the power",
    "start": "452730",
    "end": "454230"
  },
  {
    "text": "of this single table design.",
    "start": "454230",
    "end": "456120"
  },
  {
    "text": "We'll do a getSite query here,",
    "start": "456120",
    "end": "457889"
  },
  {
    "text": "and let's just look at the\nstructure of that query.",
    "start": "457890",
    "end": "460050"
  },
  {
    "text": "It's a multi-level query",
    "start": "460050",
    "end": "461610"
  },
  {
    "text": "where we're doing that getSite operation",
    "start": "461610",
    "end": "463379"
  },
  {
    "text": "and getting that site back.",
    "start": "463380",
    "end": "465060"
  },
  {
    "text": "But as part of that, we're\nalso fetching the posts",
    "start": "465060",
    "end": "467280"
  },
  {
    "text": "that are related to that.",
    "start": "467280",
    "end": "468960"
  },
  {
    "text": "So we have a one-to-many relationship,",
    "start": "468960",
    "end": "470819"
  },
  {
    "text": "multiple levels of entities,",
    "start": "470820",
    "end": "472170"
  },
  {
    "text": "and you can see it returned\nall that data back to us",
    "start": "472170",
    "end": "475470"
  },
  {
    "text": "in a pretty quick and\nsnappy and responsive way.",
    "start": "475470",
    "end": "478230"
  },
  {
    "text": "So now that we've seen that,",
    "start": "478230",
    "end": "479580"
  },
  {
    "text": "let's see what actually\nhappened on that last query",
    "start": "479580",
    "end": "481830"
  },
  {
    "text": "'cause we gotta see the magic\nof single table design here.",
    "start": "481830",
    "end": "485789"
  },
  {
    "text": "So let's head to x-ray and it's got",
    "start": "485790",
    "end": "487530"
  },
  {
    "text": "a few different traces in here.",
    "start": "487530",
    "end": "489210"
  },
  {
    "text": "We're gonna find that,\nthe most recent one,",
    "start": "489210",
    "end": "490979"
  },
  {
    "text": "to see our last query,",
    "start": "490980",
    "end": "492150"
  },
  {
    "text": "and just click on that particular trace.",
    "start": "492150",
    "end": "494880"
  },
  {
    "text": "If you scroll down to the bottom,",
    "start": "494880",
    "end": "496290"
  },
  {
    "text": "you can see all the different requests",
    "start": "496290",
    "end": "498450"
  },
  {
    "text": "that were happening as part of that.",
    "start": "498450",
    "end": "499890"
  },
  {
    "text": "And if you look in that,",
    "start": "499890",
    "end": "501000"
  },
  {
    "text": "it only makes one request to DynamoDB.",
    "start": "501000",
    "end": "504120"
  },
  {
    "text": "So even though we're getting",
    "start": "504120",
    "end": "505020"
  },
  {
    "text": "two different types of entities,",
    "start": "505020",
    "end": "506190"
  },
  {
    "text": "our site entity, our post\nentity, only making one request,",
    "start": "506190",
    "end": "509580"
  },
  {
    "text": "it's also a pretty quick operation.",
    "start": "509580",
    "end": "511349"
  },
  {
    "text": "This is about half the\ntime that same operation,",
    "start": "511350",
    "end": "514530"
  },
  {
    "text": "that same GraphQL query took\nin our multi table post.",
    "start": "514530",
    "end": "517830"
  },
  {
    "text": "So it's quicker there\nbecause it's only making",
    "start": "517830",
    "end": "519900"
  },
  {
    "text": "that single request to DynamoDB.",
    "start": "519900",
    "end": "523050"
  },
  {
    "start": "522000",
    "end": "561000"
  },
  {
    "text": "I think this was able to\nshow some of the trade offs",
    "start": "523050",
    "end": "524970"
  },
  {
    "text": "of using single table design\nwith your GraphQL API.",
    "start": "524970",
    "end": "528990"
  },
  {
    "text": "On the one hand,",
    "start": "528990",
    "end": "529823"
  },
  {
    "text": "it added some complexity to our resolvers,",
    "start": "529823",
    "end": "531480"
  },
  {
    "text": "as we have to do look\naheads in our queries",
    "start": "531480",
    "end": "533160"
  },
  {
    "text": "to see what fields they're fetching.",
    "start": "533160",
    "end": "534899"
  },
  {
    "text": "We also have to do some additional parsing",
    "start": "534900",
    "end": "536550"
  },
  {
    "text": "of that DynamoDB query\nresult to deserialize",
    "start": "536550",
    "end": "539700"
  },
  {
    "text": "into the different item types.",
    "start": "539700",
    "end": "541620"
  },
  {
    "text": "On the other hand, our\nresponse had much lower latency",
    "start": "541620",
    "end": "544290"
  },
  {
    "text": "than doing it in a multi\ntable sequential approach.",
    "start": "544290",
    "end": "547949"
  },
  {
    "text": "You need to think about\nwhat's best for your needs",
    "start": "547950",
    "end": "550560"
  },
  {
    "text": "and apply the right design patterns.",
    "start": "550560",
    "end": "552960"
  },
  {
    "text": "Be sure to check out the same application",
    "start": "552960",
    "end": "554850"
  },
  {
    "text": "using multiple DynamoDB\ntables for comparison.",
    "start": "554850",
    "end": "557880"
  },
  {
    "text": "Thanks for watching. Hope you enjoyed it.",
    "start": "557880",
    "end": "559930"
  }
]