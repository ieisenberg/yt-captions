[
  {
    "text": "thank you very much for coming it's it's uh it's really great to see everyone in the audience to see everyone who's",
    "start": "1640",
    "end": "6960"
  },
  {
    "text": "interested in virtualization and uh and ec2 instance performance uh my name is",
    "start": "6960",
    "end": "12440"
  },
  {
    "text": "John Phillips I've been at Amazon for four years now spent the entire time in ec2 and in product management uh with a",
    "start": "12440",
    "end": "18600"
  },
  {
    "text": "specific focus on ec2 instances and a lot of you and a lot of",
    "start": "18600",
    "end": "24439"
  },
  {
    "text": "customers are curious about how ec2 instances deliver systems performance",
    "start": "24439",
    "end": "29480"
  },
  {
    "text": "and it makes lot of sense because uh a lot of times applications performance depend on the the the uh the performance",
    "start": "29480",
    "end": "37800"
  },
  {
    "text": "of the underlying resources and then the the cost effectiveness of ec2 and the agility it provides depends on our",
    "start": "37800",
    "end": "45239"
  },
  {
    "text": "ability to be able to quickly spin them up and shut them down and so we do that with virtual machines and in this talk",
    "start": "45239",
    "end": "50920"
  },
  {
    "text": "we're going to talk about how we deliver systems performance through",
    "start": "50920",
    "end": "56160"
  },
  {
    "text": "virtualization so whenever I talk about uh ec2 I I first caveat the entire discussion by saying ec2 is huge and",
    "start": "56879",
    "end": "63120"
  },
  {
    "text": "it's huge not just because we operate at a massive scale but because there are a lot of different facets to ec2 and",
    "start": "63120",
    "end": "69119"
  },
  {
    "text": "you'll notice looking at the agenda that there are a lot of different talks on the different the aspects of ec2 um",
    "start": "69119",
    "end": "74640"
  },
  {
    "text": "there's a great talk happening today about the different purchase models that Joshua Bergen's giving and he'll he'll dive deep with you all on how you can",
    "start": "74640",
    "end": "82400"
  },
  {
    "text": "can uh purchase ec2 instance using spot using Reserve instances using on demand to optimize your spend um can learn a",
    "start": "82400",
    "end": "90360"
  },
  {
    "text": "lot about the ways that you interact with ec2 the API the console the",
    "start": "90360",
    "end": "95520"
  },
  {
    "text": "different parameters that you can use to launch ec2 instances and I I kind of relate that to",
    "start": "95520",
    "end": "101600"
  },
  {
    "text": "if you're if you want to draw an analogy between an EC ec2 instance and driving a car this is this is getting in the car",
    "start": "101600",
    "end": "107439"
  },
  {
    "text": "and turning the ignition you can also learn about our networking infrastructure both the physical infrastructure and then our virtual",
    "start": "107439",
    "end": "113920"
  },
  {
    "text": "networking capabilities those are the VPC capabilities and in this talk we're going to learn about the virtual",
    "start": "113920",
    "end": "119079"
  },
  {
    "text": "machines themselves elves so if you get in the car and you turn the key this is about driving the",
    "start": "119079",
    "end": "126359"
  },
  {
    "text": "car and more specifically ec2 instances are sitting on physical Hardware in our",
    "start": "126399",
    "end": "132120"
  },
  {
    "text": "data centers around the world um on top of that's layered a hypervisor which manages the virtual machines and on top",
    "start": "132120",
    "end": "139040"
  },
  {
    "text": "of that are the instances themselves and a little bit about our history so back in 2006 when we first",
    "start": "139040",
    "end": "145959"
  },
  {
    "text": "launched ec2 there was actually one instance and it was just the instance and when we came out with more it became",
    "start": "145959",
    "end": "151800"
  },
  {
    "text": "the M1 small but it was um the M1 small had 1.7 gab of memory and it it's",
    "start": "151800",
    "end": "157200"
  },
  {
    "text": "existed for a long time you can still go and launch an M1 small a day um but over time we've we've dramatically expanded",
    "start": "157200",
    "end": "164080"
  },
  {
    "text": "the breadth of our instance offering and we've done that in a couple of ways one was by introducing more families of",
    "start": "164080",
    "end": "170800"
  },
  {
    "text": "instance types and a family is a a category of instances it's purposed for a particular workload class or workload",
    "start": "170800",
    "end": "178400"
  },
  {
    "text": "categories um for example you'll you'll have uh storage optimized instances that",
    "start": "178400",
    "end": "183440"
  },
  {
    "text": "are good for databases because they offer lots of IO or lots of dis space or",
    "start": "183440",
    "end": "188599"
  },
  {
    "text": "you'll have GPU instances which are good for accelerating graphics and we've also introduced Generations within each of",
    "start": "188599",
    "end": "195159"
  },
  {
    "text": "those families and generations are a mechanism for us to deliver differentiating performance within a",
    "start": "195159",
    "end": "201440"
  },
  {
    "text": "family one generation to the next and so an example of a new generation would be C4 instances we launched C4 instances",
    "start": "201440",
    "end": "208920"
  },
  {
    "text": "and the compute optimized family and they featured a new Uh custom AWS Intel",
    "start": "208920",
    "end": "215799"
  },
  {
    "text": "CPU at 2.9 GHz and in uh new instructions so that that's that's how",
    "start": "215799",
    "end": "222560"
  },
  {
    "text": "we've expanded our instance offering over time and so this in this section we're",
    "start": "222560",
    "end": "228879"
  },
  {
    "text": "going to motivate the conversation a little bit upfront by talking about how you define system performance because in",
    "start": "228879",
    "end": "234360"
  },
  {
    "text": "order to improve performance you need to First Define it and then know how to monitor it then we're going to talk",
    "start": "234360",
    "end": "239400"
  },
  {
    "text": "about how through virtualization we deliver the different aspects of uh systems performance CPU compute",
    "start": "239400",
    "end": "246760"
  },
  {
    "text": "performance memory performance and IO performance and along the way we'll",
    "start": "246760",
    "end": "252000"
  },
  {
    "text": "we'll do quick um quick exposes into instance types that are relevant to each",
    "start": "252000",
    "end": "257239"
  },
  {
    "text": "category so in the compute section we'll talk about C4 instances and we'll talk about T2 instances in the memory section",
    "start": "257239",
    "end": "264280"
  },
  {
    "text": "we'll talk about our recently announced X1 instances and in the uh in the IO",
    "start": "264280",
    "end": "269960"
  },
  {
    "text": "section we'll talk about I2 instances and in each we you know why we want this conversation to be mostly educational",
    "start": "269960",
    "end": "275759"
  },
  {
    "text": "about how virtualization uh works we also want you to be able to take away tidbits of information on how to get the",
    "start": "275759",
    "end": "281919"
  },
  {
    "text": "most out of your out of your ec2 instance",
    "start": "281919",
    "end": "286280"
  },
  {
    "text": "experience so first defining performance now servers are hired to do",
    "start": "287039",
    "end": "292360"
  },
  {
    "text": "jobs and what that means to you really depends on your business or personal",
    "start": "292360",
    "end": "297720"
  },
  {
    "text": "objectives um but performance perance is going to be defined differently depending on what those",
    "start": "297720",
    "end": "303800"
  },
  {
    "text": "are and what performance is can be generalized into a couple of different",
    "start": "303800",
    "end": "309400"
  },
  {
    "text": "categories one would be response time so when you want to do a unit of work how quickly is it done another is throughput",
    "start": "309400",
    "end": "317080"
  },
  {
    "text": "over a unit of time how much work can you get done and consistency of performance often matters a lot and what",
    "start": "317080",
    "end": "323360"
  },
  {
    "text": "these things are more specifically depends on where you are in the application stack if you're up at the",
    "start": "323360",
    "end": "329080"
  },
  {
    "text": "workload level and you're say you're running a database response time would be you know when you when you issue a database query how quickly does it come",
    "start": "329080",
    "end": "335639"
  },
  {
    "text": "back and your throughput could be transactions per second or you know or queries per",
    "start": "335639",
    "end": "341600"
  },
  {
    "text": "second when you go deeper into the application stack you start looking at things like file system performance and how effective is your file system cache",
    "start": "341600",
    "end": "348840"
  },
  {
    "text": "and then when you go even deeper into the stack down to the device level you're considering what's the performance of specific resources",
    "start": "348840",
    "end": "354560"
  },
  {
    "text": "Hardware resources the clock frequency of the CPU how well it's utilized dis",
    "start": "354560",
    "end": "359720"
  },
  {
    "text": "iio Network and memory performance and so this this is an",
    "start": "359720",
    "end": "365880"
  },
  {
    "text": "example of some of the performance factors you consider at the resource level and these are the things that we virtualize and deliver in ec2 instances",
    "start": "365880",
    "end": "373000"
  },
  {
    "text": "so you've got CPU where what you're considering is the number of sockets the number of cores the clock",
    "start": "373000",
    "end": "380039"
  },
  {
    "text": "frequency and the key indicators when you look at your monitoring tools are going to be how well your CPU is",
    "start": "380039",
    "end": "385800"
  },
  {
    "text": "utilized and if it's um saturated as a run Q length for memory there's memory capacity and",
    "start": "385800",
    "end": "392120"
  },
  {
    "text": "when you look at your modering tools you're going to be concerned with is is my memory being completely used or is there free memory is there Anon",
    "start": "392120",
    "end": "398280"
  },
  {
    "text": "Anonymous paging happening with network and disk you'll consider the",
    "start": "398280",
    "end": "403520"
  },
  {
    "text": "capabilities of both of those devices for Network it'll be your packet rate performance it can be your bandwidth and",
    "start": "403520",
    "end": "409440"
  },
  {
    "text": "then how you're utilizing those two things for a particular instance and then for dis it's your input output",
    "start": "409440",
    "end": "414560"
  },
  {
    "text": "operations per second or your iops and your dis throughput",
    "start": "414560",
    "end": "420879"
  },
  {
    "text": "and the key is is that is to know that any one of these Dimensions can be fully utilized and bottleneck your application",
    "start": "420879",
    "end": "427720"
  },
  {
    "text": "in other words if you're 100% using your CPU it can't accept any more work and",
    "start": "427720",
    "end": "433599"
  },
  {
    "text": "you won't be able to improve your applications performance that depends on it um unless you add more CPU horsepower",
    "start": "433599",
    "end": "439759"
  },
  {
    "text": "the same can be said for disc or network IO and also for memory if you end up",
    "start": "439759",
    "end": "445280"
  },
  {
    "text": "doing a lot of swapping to dis for example and and uh a quick a quick note",
    "start": "445280",
    "end": "451199"
  },
  {
    "text": "here is that monitoring tools often operate at coar grain time intervals so you you don't necess when you when you",
    "start": "451199",
    "end": "457039"
  },
  {
    "text": "look at something like collect D charts or other tools that you're using like Cloud watch you might see CPU",
    "start": "457039",
    "end": "462759"
  },
  {
    "text": "utilization up in the 70 80% range it could still mean your application is bottlenecked on that resource it's just",
    "start": "462759",
    "end": "469599"
  },
  {
    "text": "the time interval is not granular enough and once you go down to the second level or the 10-second level you you'll see it",
    "start": "469599",
    "end": "475240"
  },
  {
    "text": "more clearly so to make this make these",
    "start": "475240",
    "end": "481400"
  },
  {
    "text": "Notions a little more concrete what we did is we set up a sample web application this is uh and we and we and",
    "start": "481400",
    "end": "487280"
  },
  {
    "text": "we applied some load to it so the the setup here is is an M4 large instance",
    "start": "487280",
    "end": "492639"
  },
  {
    "text": "running a media Wiki installation a pretty basic install installation you basically Google media Wiki and install",
    "start": "492639",
    "end": "498840"
  },
  {
    "text": "it this is roughly what you get and we used a client instance uh using Siege to",
    "start": "498840",
    "end": "504759"
  },
  {
    "text": "deliver you know request per second rate to that uh server and then also on the",
    "start": "504759",
    "end": "510440"
  },
  {
    "text": "server we used collect D which is an open source monitoring tool to record uh",
    "start": "510440",
    "end": "515760"
  },
  {
    "text": "system statistics we increase the load over time and I'm going to run through some",
    "start": "515760",
    "end": "521518"
  },
  {
    "text": "of those statistics here to show you you know where we're finding the bottle next so we first look at memory and",
    "start": "521519",
    "end": "529519"
  },
  {
    "text": "memory looks pretty good the M4 large has 8 gigabyt of memory and we're we're barely using a quarter of it um if you",
    "start": "529519",
    "end": "537440"
  },
  {
    "text": "go and check actually the the swap statistics or the anonymous paging statistics you'll also see that we're not doing any of that so there's plenty",
    "start": "537440",
    "end": "544720"
  },
  {
    "text": "of memory on the system we looked at DIS statistics and and what's hooked up to the M4 large is",
    "start": "544720",
    "end": "551279"
  },
  {
    "text": "actually a EBS volume with a healthy amount of iops it's an EBS gp2 volume",
    "start": "551279",
    "end": "557120"
  },
  {
    "text": "and when you look at the number of iops that are being driven and the bandwidth is being driven to this volume it's really not much you include pretty",
    "start": "557120",
    "end": "563200"
  },
  {
    "text": "quickly that that it's not dis bottleneck and then we looked at Network",
    "start": "563200",
    "end": "568720"
  },
  {
    "text": "statistics and you can see the receive and transmit activity um that ramps up over time as",
    "start": "568720",
    "end": "574880"
  },
  {
    "text": "we increase the load on the web server so that's all is as expected and knowing",
    "start": "574880",
    "end": "579959"
  },
  {
    "text": "what we know about um the packet rate capability I mean this is this is demanding you know up to 200 packets per",
    "start": "579959",
    "end": "586519"
  },
  {
    "text": "second well within what the M4 large can handle and so we know we're not Network",
    "start": "586519",
    "end": "592959"
  },
  {
    "text": "bottleneck and then we went looked at CPU stats and here we can see that we're actually driving CPU utilization quite",
    "start": "593760",
    "end": "601360"
  },
  {
    "text": "High there were some some optimizations that we did on the application like PHP Ops Code caching and we enabled file",
    "start": "601360",
    "end": "607079"
  },
  {
    "text": "system caching but nonetheless CPU usage ramped up pretty quickly and you can understand from this chart that if we",
    "start": "607079",
    "end": "613880"
  },
  {
    "text": "wanted to improve our efficiency for this workload we would use a compute optimized instance type and one thing to",
    "start": "613880",
    "end": "620040"
  },
  {
    "text": "note about this chart is there are really two predominant kinds of CPU usage one is user mode and the other is",
    "start": "620040",
    "end": "626560"
  },
  {
    "text": "system or kernel mode um and system calls are used to to access the state of",
    "start": "626560",
    "end": "632680"
  },
  {
    "text": "the system such as driving dis iio or network IO and other things like eke keeping and and memory mappings so we'll",
    "start": "632680",
    "end": "639839"
  },
  {
    "text": "get into more of that later um but instance selection on ec2",
    "start": "639839",
    "end": "645720"
  },
  {
    "text": "is tantum out to Performance Tuning so once you go through this exercise of defining performance understanding it down to the",
    "start": "645720",
    "end": "652399"
  },
  {
    "text": "device level and actually if ideally theoretically you can you can",
    "start": "652399",
    "end": "659160"
  },
  {
    "text": "you can link resource improvements to uh Improvement to Improvement in the",
    "start": "659160",
    "end": "664880"
  },
  {
    "text": "overall business objective that you're trying to achieve so if you're driving an e-commerce website and you want to",
    "start": "664880",
    "end": "671000"
  },
  {
    "text": "improve the response time of your homepage or a detail page then you can actually relate improvements in the",
    "start": "671000",
    "end": "677399"
  },
  {
    "text": "underlying resources of your web application and database tiers to um your business objectives of driving",
    "start": "677399",
    "end": "683680"
  },
  {
    "text": "sales and that's that kind of tie is is is difficult but something that's um",
    "start": "683680",
    "end": "690120"
  },
  {
    "text": "really important to justifying investment in performance um in ec2 well in contrast to ec2 or before",
    "start": "690120",
    "end": "697600"
  },
  {
    "text": "ec2 a lot of effort was put into determining what kind of server should I buy because it it was going to come in a",
    "start": "697600",
    "end": "704760"
  },
  {
    "text": "number of months rather than minutes like an ec2 and it was going to land there and you be sort of stuck with it",
    "start": "704760",
    "end": "710600"
  },
  {
    "text": "for a while and so a lot of upfront effort was put in and a lot of risk was taken in sort of picking the right server type and L and often times that",
    "start": "710600",
    "end": "717399"
  },
  {
    "text": "results in over-provisioning the server with ec2 you can try an instance type if",
    "start": "717399",
    "end": "722600"
  },
  {
    "text": "it doesn't work give it right back to us and and try something again so that the agility and performance tuning you have",
    "start": "722600",
    "end": "728880"
  },
  {
    "text": "just by changing out your servers and changing out the resources for your application is um is pretty incredible",
    "start": "728880",
    "end": "735279"
  },
  {
    "text": "with ec2 and it sort of changes the way you think about performance",
    "start": "735279",
    "end": "740040"
  },
  {
    "text": "tuning Okay so we've we've Define performance we talked about why it's important now how do we deliver uh",
    "start": "740959",
    "end": "748120"
  },
  {
    "text": "performance in different Dimensions with virtualization so we'll first talk about delivering compute",
    "start": "748120",
    "end": "755120"
  },
  {
    "text": "performance uh what I referenced earlier in the web application example when we looked at the CPU utilization charts was",
    "start": "755880",
    "end": "761800"
  },
  {
    "text": "there were two predominant kinds of CPU usage one was the applications usage and user mode and the other was uh kernel",
    "start": "761800",
    "end": "769320"
  },
  {
    "text": "mode or the system usage so this the CPU has two protection",
    "start": "769320",
    "end": "774839"
  },
  {
    "text": "levels one which is used for uh executing privileged or critical instructions that change the state of",
    "start": "774839",
    "end": "780680"
  },
  {
    "text": "the system and this is um the the highest protection level and it's where the where the kernel executes and then",
    "start": "780680",
    "end": "787920"
  },
  {
    "text": "there's a protection level that's for the application or user mode that executes other uh instructions and the",
    "start": "787920",
    "end": "794320"
  },
  {
    "text": "reason that this higher protection level exists is to protect the system from processes that want to change the state",
    "start": "794320",
    "end": "800800"
  },
  {
    "text": "of the system protect processes from each other and so when you think about",
    "start": "800800",
    "end": "807079"
  },
  {
    "text": "introducing the idea of virtual machines on a system you would want the same kind of",
    "start": "807079",
    "end": "812560"
  },
  {
    "text": "protections for the virtual machines themselves as you get in a traditional system with a couple of protection",
    "start": "812560",
    "end": "818839"
  },
  {
    "text": "levels that the kernel the protection levels that the kernel uses in order to protect the system from process from",
    "start": "818839",
    "end": "826360"
  },
  {
    "text": "processes and just to to reiterate um the web application example I I ran an",
    "start": "826360",
    "end": "833880"
  },
  {
    "text": "srace to understand what system calls were being used to understand which privileged instructions were being being",
    "start": "833880",
    "end": "838959"
  },
  {
    "text": "used in that particular example and what you find is as you might expect the web",
    "start": "838959",
    "end": "844160"
  },
  {
    "text": "application is opening a bunch of files getting a bunch of file system statistics and reading and writing files",
    "start": "844160",
    "end": "850000"
  },
  {
    "text": "and and that's evident from the estrace and if you do this for your application you'll be able to see which",
    "start": "850000",
    "end": "855519"
  },
  {
    "text": "system calls are most heavily",
    "start": "855519",
    "end": "859440"
  },
  {
    "text": "used so before before Hardware support existed",
    "start": "861079",
    "end": "866120"
  },
  {
    "text": "for CPU virtualization and that Hardware support provides the additional protection level um that allows a",
    "start": "866120",
    "end": "872920"
  },
  {
    "text": "virtual machine manager or hypervisor to intermediate um access to",
    "start": "872920",
    "end": "878240"
  },
  {
    "text": "critical instructions from each virtual machine before that the the virtual machine manager",
    "start": "878240",
    "end": "884279"
  },
  {
    "text": "needed a way to trap these critical instructions um and to trap the crtical",
    "start": "884279",
    "end": "890560"
  },
  {
    "text": "and moderate their um moderate the access to the underlying system so there are two ways to do that one was through",
    "start": "890560",
    "end": "896759"
  },
  {
    "text": "binary translation which is a really expensive expensive but effective way of doing it and that is to scan the",
    "start": "896759",
    "end": "902120"
  },
  {
    "text": "instruction stream of every single virtual machine for a privileged instruction and trap and then execute it",
    "start": "902120",
    "end": "908199"
  },
  {
    "text": "as as it's supposed to be executed um this was a really expensive operation but it meant that you didn't need to",
    "start": "908199",
    "end": "914040"
  },
  {
    "text": "modify the guest operating systems kernel so the virtual machine guest operating systems kernel you could run",
    "start": "914040",
    "end": "921079"
  },
  {
    "text": "um operating systems mostly as they were but because it was expensive in terms of performance another approach is",
    "start": "921079",
    "end": "928680"
  },
  {
    "text": "using uh par virtualization and Par virtualization offers a a simplified device model where these privileged or",
    "start": "928680",
    "end": "935639"
  },
  {
    "text": "critical instructions are simply ignored and the guest Colonel has to be told to do something else if it wants to you",
    "start": "935639",
    "end": "942160"
  },
  {
    "text": "know execute those system calls and so these were the privilege instructions were replaced with Hyper calls directly",
    "start": "942160",
    "end": "948759"
  },
  {
    "text": "to the hypervisor and this uh this improved",
    "start": "948759",
    "end": "954040"
  },
  {
    "text": "performance dramatically over binary translation but it meant that for every system call that you wanted to do",
    "start": "954040",
    "end": "960319"
  },
  {
    "text": "required a virtual machine manager",
    "start": "960319",
    "end": "965279"
  },
  {
    "text": "intermediation after Intel introduced hardware virtualization for CPUs Intel",
    "start": "966399",
    "end": "971839"
  },
  {
    "text": "VTX uh they created a protection level where below the ring that the colonel",
    "start": "971839",
    "end": "977000"
  },
  {
    "text": "would sit in so that you could uh you each guest virtual machine",
    "start": "977000",
    "end": "982560"
  },
  {
    "text": "could run on the CPU as if it were in a a traditional system uh with very little",
    "start": "982560",
    "end": "988680"
  },
  {
    "text": "exception so you eliminate most hyper calls that are required um virtual machine traps that are required to to",
    "start": "988680",
    "end": "995319"
  },
  {
    "text": "execute system calls now there are still other devices like Network and dis IO devices that are",
    "start": "995319",
    "end": "1002920"
  },
  {
    "text": "expensive to emulate and so there's this concept now of pvm where you try to take the Best of",
    "start": "1002920",
    "end": "1009680"
  },
  {
    "text": "Both Worlds you use the hardware virtualization from Intel in order to deliver great CPU performance in both",
    "start": "1009680",
    "end": "1015600"
  },
  {
    "text": "user mode and in curle mode and then you use par virtualized drivers opportunistically for Network for",
    "start": "1015600",
    "end": "1022160"
  },
  {
    "text": "example or for disio for example or for timekeeping in order to deliver good performance",
    "start": "1022160",
    "end": "1027918"
  },
  {
    "text": "there and so that's where you get this this concept of PV hvm and our version",
    "start": "1027919",
    "end": "1034160"
  },
  {
    "text": "of pvm where you use the right drivers for the right pair of virtualized drivers to deliver performance and you",
    "start": "1034160",
    "end": "1040199"
  },
  {
    "text": "use the hardware virtualization Technologies by Intel is called R hvm amies and most current generation",
    "start": "1040199",
    "end": "1046160"
  },
  {
    "text": "instance types are hvm only meaning they only support hm amies and we do that to",
    "start": "1046160",
    "end": "1051679"
  },
  {
    "text": "offer uh the best experience on those instance",
    "start": "1051679",
    "end": "1056720"
  },
  {
    "text": "types so you might have noticed in the web application earlier that the amount of time spent on the CPU running system",
    "start": "1057760",
    "end": "1064760"
  },
  {
    "text": "calls was pretty low so what's an example of an application type where you have really heavy system call activity",
    "start": "1064760",
    "end": "1072000"
  },
  {
    "text": "uh one of those types is when you're actually doing benchmarking or you're doing debugging or you're doing tracing",
    "start": "1072000",
    "end": "1077440"
  },
  {
    "text": "as in jvm tracing and you're issuing a lot of calls to get time and so we're going to spend a couple of slides given",
    "start": "1077440",
    "end": "1084000"
  },
  {
    "text": "examples of of how you can most effectively get time in a virtualized",
    "start": "1084000",
    "end": "1089720"
  },
  {
    "text": "environment so the pair of virtualized uh well each instance has number of different clock sources that",
    "start": "1089720",
    "end": "1095679"
  },
  {
    "text": "it can use one of them is a par virtualized clock Source where you you query into the hypervisor to get your",
    "start": "1095679",
    "end": "1101240"
  },
  {
    "text": "sense of time and there are other clock sources like tsse which are Hardware counters in the CPU that you can access",
    "start": "1101240",
    "end": "1107000"
  },
  {
    "text": "directly now when you launch an Amazon Linux Ami the default clock source is called Zen PV clock and we do that",
    "start": "1107000",
    "end": "1114039"
  },
  {
    "text": "because it suppos supports the most Hardware configurations but like we said earlier",
    "start": "1114039",
    "end": "1119120"
  },
  {
    "text": "if you're doing tons of system calls that that trap to the hypervisor adds up",
    "start": "1119120",
    "end": "1124520"
  },
  {
    "text": "and it's quite expensive and so when you're when you're doing something like jvm tracing or",
    "start": "1124520",
    "end": "1129919"
  },
  {
    "text": "debugging you're better off enabling tsse as your clock source and TSC",
    "start": "1129919",
    "end": "1135799"
  },
  {
    "text": "actually doesn't require it can be accessed from user mode and is one of the most efficient ways to get time uh",
    "start": "1135799",
    "end": "1142240"
  },
  {
    "text": "on ec2 instances today so you want to use TSC as your",
    "start": "1142240",
    "end": "1147280"
  },
  {
    "text": "clock Source here's a Quick Command uh you can use to enable it and changing your grub configuration file in",
    "start": "1147280",
    "end": "1155240"
  },
  {
    "text": "Linux all right so we've talked about a little bit about how CPUs are",
    "start": "1156480",
    "end": "1161880"
  },
  {
    "text": "virtualized it's also the job of the hypervisor to ensure that each virtual machine gets an ated amount of CPUs",
    "start": "1161880",
    "end": "1169520"
  },
  {
    "text": "scheduled and so this is the this is the part we're going to talk about how how the virtual machine manager the",
    "start": "1169520",
    "end": "1174840"
  },
  {
    "text": "hypervisor actually schedules the virtual machines on and off the CPU and there really there really two approaches",
    "start": "1174840",
    "end": "1180679"
  },
  {
    "text": "to that one is to provide a fixed allocation of CPU where you have dedicated cores to your virtual machine",
    "start": "1180679",
    "end": "1187440"
  },
  {
    "text": "there's a direct relationship between your virtual machine vcpus and physical cores and that can come in two flavors",
    "start": "1187440",
    "end": "1194400"
  },
  {
    "text": "one is uncapped where you really just get the core and the other is is capped where you you get a defined portion of",
    "start": "1194400",
    "end": "1199520"
  },
  {
    "text": "the core and the other is a variable allocation model where the the virtual",
    "start": "1199520",
    "end": "1205440"
  },
  {
    "text": "machine manager will uh schedule instances or schedule virtual machines",
    "start": "1205440",
    "end": "1210799"
  },
  {
    "text": "onto the CPU According to some sort of algorithm it could be a fair share algorithm it could be a deadline",
    "start": "1210799",
    "end": "1217440"
  },
  {
    "text": "scheduler um and the the point there is really just",
    "start": "1217440",
    "end": "1222880"
  },
  {
    "text": "to leverage to to to drive up CPU utilization on the host so if you're running if you have to run virtual",
    "start": "1222880",
    "end": "1229200"
  },
  {
    "text": "machine infrastructure on premises you might consider something like that if you over subscribe a box and you want to",
    "start": "1229200",
    "end": "1234840"
  },
  {
    "text": "drive up CP utilization while giving good performance or good latencies to each of the virtual machines in ec2 we",
    "start": "1234840",
    "end": "1240960"
  },
  {
    "text": "provide uh fixed allocations of CPU to each of our instance types and I'll talk",
    "start": "1240960",
    "end": "1246080"
  },
  {
    "text": "a little bit more about how we do that so C4 instances are designed to",
    "start": "1246080",
    "end": "1251840"
  },
  {
    "text": "provide the best uh compute performance in ec2 they've got uh custom Intel",
    "start": "1251840",
    "end": "1257559"
  },
  {
    "text": "processors running at 2.9 GHz um customers choose this instance",
    "start": "1257559",
    "end": "1262960"
  },
  {
    "text": "type when they they know their bottlenecking on CPU and they want to relieve that",
    "start": "1262960",
    "end": "1269440"
  },
  {
    "text": "bottleneck we provide with C4 instances you know dedicated in in the fixed allocation model that I talked about",
    "start": "1269440",
    "end": "1275559"
  },
  {
    "text": "earlier a dedicated access to the underlying cores um so one of the things that we're",
    "start": "1275559",
    "end": "1282960"
  },
  {
    "text": "able to do when you provide dedicated access to the underlying cores is actually give customers more control",
    "start": "1282960",
    "end": "1289120"
  },
  {
    "text": "over the power states of those cores and in the C4 8 extra large instance type we",
    "start": "1289120",
    "end": "1294720"
  },
  {
    "text": "provided P State and cstate control uh Power States is a way of of modifying",
    "start": "1294720",
    "end": "1302200"
  },
  {
    "text": "the frequency of each of those cores and enabling different turbo States ec2 instances are provided with all core",
    "start": "1302200",
    "end": "1309200"
  },
  {
    "text": "turbo enabled by default so when you get a c48 extra large it has all Corde turbo enabled by default but you can actually",
    "start": "1309200",
    "end": "1316320"
  },
  {
    "text": "pin you can put most of the core in a lower power state so that you can drive",
    "start": "1316320",
    "end": "1321520"
  },
  {
    "text": "one or two two core turbo at frequencies up to 300 MHz higher than the than the",
    "start": "1321520",
    "end": "1326960"
  },
  {
    "text": "base frequency the one trade-off here is that",
    "start": "1326960",
    "end": "1332080"
  },
  {
    "text": "um by taking your cores in and out of sleep States and power States uh creates some variability in performance and if",
    "start": "1332080",
    "end": "1338240"
  },
  {
    "text": "that's not something that your workload can tolerate then you can instead uh",
    "start": "1338240",
    "end": "1343320"
  },
  {
    "text": "lock your cores to a particular power state",
    "start": "1343320",
    "end": "1348480"
  },
  {
    "text": "and in a particular scenario where this is important is when you're using lots of avx2 instructions so you've got an an",
    "start": "1348480",
    "end": "1355600"
  },
  {
    "text": "operation that's parallelizable and you can leverage Intel's avx2 in order to get significantly higher performance on",
    "start": "1355600",
    "end": "1362320"
  },
  {
    "text": "on C4 instance types it's a very power hungry instruction though so when you run it the CPU automatically puts itself",
    "start": "1362320",
    "end": "1369240"
  },
  {
    "text": "into a lower power State and if you want to prevent that that change in power",
    "start": "1369240",
    "end": "1374640"
  },
  {
    "text": "state from happening because you care about the latency of that then you can go ahead and lock your your c48 extra",
    "start": "1374640",
    "end": "1381200"
  },
  {
    "text": "large cores in a lower power State that's suitable for",
    "start": "1381200",
    "end": "1385240"
  },
  {
    "text": "abx2 so T2 instances are designed to provide a lowcost high performance",
    "start": "1386480",
    "end": "1393520"
  },
  {
    "text": "experience for applications that don't need CPU consistently or often but when",
    "start": "1393520",
    "end": "1399000"
  },
  {
    "text": "they do they benefit from having access to the entire core this is a pretty cool instance type I think because what we",
    "start": "1399000",
    "end": "1405559"
  },
  {
    "text": "observed was was a common pattern that whether whether customers realized it or",
    "start": "1405559",
    "end": "1411080"
  },
  {
    "text": "not it turned out that many many many workloads do not fully utilize their CPU",
    "start": "1411080",
    "end": "1416799"
  },
  {
    "text": "and so we challenged ourselves to find a way to offer customers lower prices and",
    "start": "1416799",
    "end": "1422000"
  },
  {
    "text": "give them a consistent compute experience and the way that we ended up doing that was coming up with this",
    "start": "1422000",
    "end": "1427400"
  },
  {
    "text": "concept of CPU credits in order to enforce a fixed allocation of CPU that",
    "start": "1427400",
    "end": "1433360"
  },
  {
    "text": "was less than the full core and the way we did that it let me",
    "start": "1433360",
    "end": "1439240"
  },
  {
    "text": "tell you a little bit about how credits credits work so you can think about each T2 instance is having a credit bucket",
    "start": "1439240",
    "end": "1445919"
  },
  {
    "text": "and as long as there's a positive balance in that credit bucket it has access to the underlying",
    "start": "1445919",
    "end": "1451279"
  },
  {
    "text": "cores um as if uh well as as if you were running like a a C4 for example you've",
    "start": "1451279",
    "end": "1457120"
  },
  {
    "text": "got the full full uncapped access to the core so we call that full core performance as long as you've got a positive credit balance so how do you",
    "start": "1457120",
    "end": "1463400"
  },
  {
    "text": "get a positive credit balance well credits are earned continuously down to the mill second level for these",
    "start": "1463400",
    "end": "1469360"
  },
  {
    "text": "instances and you're always accumulating a balance at the same time you could be spending that balance if you're running on the",
    "start": "1469360",
    "end": "1475640"
  },
  {
    "text": "CPU um so an instance consumes credits when active and it earns credits at a",
    "start": "1475640",
    "end": "1481320"
  },
  {
    "text": "steady rate all the time so that the way you find out if your workload is",
    "start": "1481320",
    "end": "1486440"
  },
  {
    "text": "suitable for a T2 instance is actually uh through a couple of cloudwatch metrics we provided in order to give",
    "start": "1486440",
    "end": "1492600"
  },
  {
    "text": "more insight into these credit bucket balances and like what I like to tell customers is that you should just try T2",
    "start": "1492600",
    "end": "1498880"
  },
  {
    "text": "instances and run your application if it works you'll notice that you maintain a",
    "start": "1498880",
    "end": "1504240"
  },
  {
    "text": "positive credit balance all the time and you don't see that uh you don't see it being capped at",
    "start": "1504240",
    "end": "1510120"
  },
  {
    "text": "all now that when you run out of a when you run out of a credit balance what happens is we we enforce the average we",
    "start": "1510120",
    "end": "1515720"
  },
  {
    "text": "enforce the the Baseline performance by capping the underlying CPU and so when",
    "start": "1515720",
    "end": "1521600"
  },
  {
    "text": "that happens it's B it's an indicator that that particular T2 instance is not appropriate fit for that workload and",
    "start": "1521600",
    "end": "1527799"
  },
  {
    "text": "should consider either a larger T2 size or another instance type that offers more CPU which you can you can determine",
    "start": "1527799",
    "end": "1534080"
  },
  {
    "text": "all that by looking at our cloudwatch metrics for the CPU credit",
    "start": "1534080",
    "end": "1538720"
  },
  {
    "text": "balance so monitoring CPU performance in the guest in particular particularly with T2",
    "start": "1539880",
    "end": "1545720"
  },
  {
    "text": "instances is is interesting because of the question of what happens",
    "start": "1545720",
    "end": "1551840"
  },
  {
    "text": "if if the C the underlying CPU is kept so if if you if you're running a T2",
    "start": "1551840",
    "end": "1557240"
  },
  {
    "text": "instance and you run out of a credit balance because it's not the right fit for the workload um and I monitor your",
    "start": "1557240",
    "end": "1563279"
  },
  {
    "text": "CPU and the guest I might see some strange things and so what happens to my statistics we reviewed earlier user time",
    "start": "1563279",
    "end": "1570039"
  },
  {
    "text": "system time weight iio um in that event and what what tends to show up is",
    "start": "1570039",
    "end": "1577399"
  },
  {
    "text": "steel time and I wanted to call this out because it's often misinterpreted as meaning",
    "start": "1577399",
    "end": "1582840"
  },
  {
    "text": "that uh the the time that my instance deserves or is entitled to as being",
    "start": "1582840",
    "end": "1589360"
  },
  {
    "text": "taken by something else and really in the case of T2 what it should be described as involuntarily involuntarily",
    "start": "1589360",
    "end": "1595679"
  },
  {
    "text": "scheduled off of the CPU because of the definition of the instance type um so again tip is to Leverage The",
    "start": "1595679",
    "end": "1602919"
  },
  {
    "text": "Cloud watch metrics to understand if your credit balance is full or if it's empty and you can also see an accurate",
    "start": "1602919",
    "end": "1608840"
  },
  {
    "text": "representation of CP utilization through Cloud",
    "start": "1608840",
    "end": "1612919"
  },
  {
    "text": "watch okay so that was how we deliver compute performance now how do we deliver memory performance in Virtual",
    "start": "1614080",
    "end": "1622000"
  },
  {
    "text": "machines why do we care about that well some workloads require lots and lots of memory and last reinvent we announced X1",
    "start": "1622000",
    "end": "1630919"
  },
  {
    "text": "instances which is going to be our largest memory instance with up to two terabytes of dam it's also going to have",
    "start": "1630919",
    "end": "1637039"
  },
  {
    "text": "a quad socket system with Intel E7 CPUs and so you'll start asking questions about memory locality and how",
    "start": "1637039",
    "end": "1645159"
  },
  {
    "text": "um how you optimize workload performance when you've got four CPUs memory on each socket and the potential for a process",
    "start": "1645159",
    "end": "1651960"
  },
  {
    "text": "to run on one CPU socket and access memory on another CPU socket so we'll first talk about how",
    "start": "1651960",
    "end": "1659320"
  },
  {
    "text": "virtual machine memory works and then a little bit about non-uniform memory access and how you can take advantage of",
    "start": "1659320",
    "end": "1665399"
  },
  {
    "text": "Kernel optimizations um so that you don't have to be aware of Numa in your applications and you get the performance of some Numa",
    "start": "1665399",
    "end": "1673559"
  },
  {
    "text": "balancing so the way to understand how virtual me virtual Ma machine memory works is to First understand how it",
    "start": "1673880",
    "end": "1679600"
  },
  {
    "text": "works in non- virtualize systems and the concept of virtual memory already exists",
    "start": "1679600",
    "end": "1684919"
  },
  {
    "text": "um as it relates to processes and so in a traditional system uh you have two address spaces",
    "start": "1684919",
    "end": "1691200"
  },
  {
    "text": "one is a virtual address space which represents the processes view of virtual memory a ver processes view of memory",
    "start": "1691200",
    "end": "1698480"
  },
  {
    "text": "and then you have a physical address space which represents the actual physical memory on the system and it's the job of the operating system to map",
    "start": "1698480",
    "end": "1706000"
  },
  {
    "text": "virtual memory to physical memory the reason for this abstraction is a to",
    "start": "1706000",
    "end": "1711240"
  },
  {
    "text": "protect one process from another so one process can't stamp on another process as memory it also provides the operating",
    "start": "1711240",
    "end": "1719320"
  },
  {
    "text": "system the opportunity to really efficiently utilize uh the the systems memory resources and it allows the operating",
    "start": "1719320",
    "end": "1726200"
  },
  {
    "text": "system to page memory to disk so that gives you more room for more",
    "start": "1726200",
    "end": "1731440"
  },
  {
    "text": "processes and the way that works is the operating system uses is something in Hardware called a memory management unit",
    "start": "1734000",
    "end": "1740320"
  },
  {
    "text": "memory management unit is a decoder that uh translates virtual addresses to",
    "start": "1740320",
    "end": "1745399"
  },
  {
    "text": "physical addresses memory management unit also has a cache called a",
    "start": "1745399",
    "end": "1750480"
  },
  {
    "text": "transaction look aside buffer which is smaller in capacity but can do memory",
    "start": "1750480",
    "end": "1755919"
  },
  {
    "text": "translations super super fast so let me walk through really quickly how this",
    "start": "1755919",
    "end": "1761760"
  },
  {
    "text": "works in a traditional system so there's a request for a memory mapping a virtual address first looks at the tlb and if",
    "start": "1761760",
    "end": "1768679"
  },
  {
    "text": "the tlb has it it's returned back to the operating system if the tlb doesn't have",
    "start": "1768679",
    "end": "1774880"
  },
  {
    "text": "the mapping it then inqueries the a page table which resides in main memory but",
    "start": "1774880",
    "end": "1780200"
  },
  {
    "text": "has the mappings from virtual to physical memory and if the mapping does not exist",
    "start": "1780200",
    "end": "1787159"
  },
  {
    "text": "a page fault happens and the operating system has to figure out what to do with that page fault and inevitably put the mapping back into the mmu which then",
    "start": "1787159",
    "end": "1794360"
  },
  {
    "text": "gets loaded into tlb and the translation occurs now this is done at the process level so if there's a context switch in",
    "start": "1794360",
    "end": "1800640"
  },
  {
    "text": "other in other words another process starts running on the CPU then the tlb gets",
    "start": "1800640",
    "end": "1806320"
  },
  {
    "text": "flushed and a new page table is loaded for that particular process and again",
    "start": "1806320",
    "end": "1811600"
  },
  {
    "text": "that's to ensure that no process has access to another process he virtual",
    "start": "1811600",
    "end": "1817799"
  },
  {
    "text": "memory now some processors um tlb flushes tlb is like I said the the the",
    "start": "1818039",
    "end": "1823840"
  },
  {
    "text": "mapping performance of a tlb is super fast so when you flush the tlb you and you restart the cache comes with the",
    "start": "1823840",
    "end": "1830360"
  },
  {
    "text": "performance penalty and one way to avoid that is to use address space identifiers and some processors use address space",
    "start": "1830360",
    "end": "1836000"
  },
  {
    "text": "identifier so that when you do a process context switch you don't have to flush the",
    "start": "1836000",
    "end": "1841880"
  },
  {
    "text": "tlb so that's how it works before you layer on Virtual machines when you layer",
    "start": "1841880",
    "end": "1847200"
  },
  {
    "text": "on Virtual machines what you're basically doing is you're creating another level of indirection you're Reinventing some of the same problems",
    "start": "1847200",
    "end": "1854600"
  },
  {
    "text": "that you were trying to solve with process memory virtualization and so when you when you",
    "start": "1854600",
    "end": "1861000"
  },
  {
    "text": "think back to the way the hardware Works what you would really like is a second",
    "start": "1861000",
    "end": "1867360"
  },
  {
    "text": "layer of trans uh translation tables so that the virtual address space can be",
    "start": "1867360",
    "end": "1874080"
  },
  {
    "text": "translated to the virtual machine's physical address space which is not actually physical in a virtual machine",
    "start": "1874080",
    "end": "1880399"
  },
  {
    "text": "World which is then translated into the machine's address space which is the physical memory",
    "start": "1880399",
    "end": "1886159"
  },
  {
    "text": "address before Hardware support for that the virtual machine manager had to do it",
    "start": "1886159",
    "end": "1892840"
  },
  {
    "text": "on its own and it did it through something called Shadow page tables and the hypervisor maintains",
    "start": "1892840",
    "end": "1898919"
  },
  {
    "text": "Shadow page tables which are essentially the maps between a guest virtual machine virtual memory address space and the",
    "start": "1898919",
    "end": "1906480"
  },
  {
    "text": "machine's physical memory address space um this got swapped into the mmu",
    "start": "1906480",
    "end": "1913279"
  },
  {
    "text": "loaded into the mmu every time a virtual machine was scheduled onto the CPU and had a process scheduled onto that onto",
    "start": "1913279",
    "end": "1919279"
  },
  {
    "text": "the CPU and the the the challenge for the virtual machine manager was to make sure",
    "start": "1919279",
    "end": "1926360"
  },
  {
    "text": "that it kept in sync its view of the virtual to machine mappings along with",
    "start": "1926360",
    "end": "1932679"
  },
  {
    "text": "the guest's view of its guest physical guest to Virtual to physical",
    "start": "1932679",
    "end": "1937960"
  },
  {
    "text": "mappings so we'll talk a little bit about how that worked and why that was in inefficient so following a similar flow",
    "start": "1937960",
    "end": "1946080"
  },
  {
    "text": "to what we had before the mapping is requested if it exists in the tlb which has virtual to phys",
    "start": "1946080",
    "end": "1952080"
  },
  {
    "text": "Virtual to machine mappings it'll succeed and and the translation will be provided if not it looks into the page",
    "start": "1952080",
    "end": "1959120"
  },
  {
    "text": "table of virtual to machine mappings and if it's not there instead of what would",
    "start": "1959120",
    "end": "1964679"
  },
  {
    "text": "normally occur a page fault a page fault happens which is trapped by the virtual machine manager and then acted upon and",
    "start": "1964679",
    "end": "1972799"
  },
  {
    "text": "it has it basically walks through its copies of the guest page table guest physical guest virtual to guest physical memory",
    "start": "1972799",
    "end": "1979799"
  },
  {
    "text": "and then its own versions of the uh guest physical to machine memory to then load them into the mmu and again into",
    "start": "1979799",
    "end": "1987159"
  },
  {
    "text": "the tlb this is a highly inefficient process because it involved tons of virtual machine intervention and",
    "start": "1987159",
    "end": "1994360"
  },
  {
    "text": "traps and it also required a lot of memory overhead because it had to maintain copies of the guests um virtual",
    "start": "1994360",
    "end": "2002039"
  },
  {
    "text": "to physical page tables so what happened is Intel created",
    "start": "2002039",
    "end": "2007200"
  },
  {
    "text": "called extended page tables which gives you the world that I described earlier that you would like the ability to walk in Hardware from a guest virtual memory",
    "start": "2007200",
    "end": "2014000"
  },
  {
    "text": "address space to guest physical address space through the machine address space and with virtual machine",
    "start": "2014000",
    "end": "2020600"
  },
  {
    "text": "identifiers um there was no need to flush the tlb on a VM or hypervisor",
    "start": "2020600",
    "end": "2025760"
  },
  {
    "text": "context switch and this is again just a quick diagram of how that would work you miss",
    "start": "2025760",
    "end": "2032960"
  },
  {
    "text": "the tlb you walk through the guest to Virtual to guest physical page table and then the guest physical to machine",
    "start": "2032960",
    "end": "2039440"
  },
  {
    "text": "physical page table to get the the address translation so I talked earlier about",
    "start": "2039440",
    "end": "2045519"
  },
  {
    "text": "Numa and the performance impact of non-uniform memory access is if you're accessing memory that um exists on a",
    "start": "2045519",
    "end": "2053320"
  },
  {
    "text": "remote socket and so like I said with X1 X1 is going to have a quad socket system and there's an opportunity for a process",
    "start": "2053320",
    "end": "2060000"
  },
  {
    "text": "running on one of the CPU sockets to then access memory on another CPU socket the local memory accesses so a process",
    "start": "2060000",
    "end": "2067118"
  },
  {
    "text": "running on one CPU core accessing local memory substantially faster than those remote memory",
    "start": "2067119",
    "end": "2073838"
  },
  {
    "text": "accesses the thing that connects the CPUs is what's called Intel qpi quick path interconnect which is a high",
    "start": "2074000",
    "end": "2080000"
  },
  {
    "text": "bandwidth highspeed interconnect but not as fast as what you would get with local",
    "start": "2080000",
    "end": "2085118"
  },
  {
    "text": "memory and so the tip here is to make sure that your the kernel that you're using supports Numa balancing in Linux",
    "start": "2085119",
    "end": "2092919"
  },
  {
    "text": "uh since version 3.13 of the Linux kernel and in Windows really since early versions of Server 2003 and particularly",
    "start": "2092919",
    "end": "2099720"
  },
  {
    "text": "you'll get it get it with 2008 and 2012 there is automatic Numa balancing",
    "start": "2099720",
    "end": "2105119"
  },
  {
    "text": "so a number of algorithms that are used to create locality between your processes and the memory that's been allocated to those",
    "start": "2105119",
    "end": "2111280"
  },
  {
    "text": "processes and as long as you're using these these kernels um your your applications can benefit from those",
    "start": "2111280",
    "end": "2117320"
  },
  {
    "text": "algorithms without being themselves needing to be Numa",
    "start": "2117320",
    "end": "2122000"
  },
  {
    "text": "aware Okay so we've talked about CPU and Mor now we're going to talk about delivering IO performance so how do you",
    "start": "2124359",
    "end": "2131160"
  },
  {
    "text": "get super fast disc or network performance in an ec2 instance well the way the way it works",
    "start": "2131160",
    "end": "2139079"
  },
  {
    "text": "is the virtual the the virtual machine manager needs to schedule access to",
    "start": "2139079",
    "end": "2145520"
  },
  {
    "text": "Shared physical devices across multiple virtual machines and the way that that's done in Zen is with a split driver model",
    "start": "2145520",
    "end": "2153640"
  },
  {
    "text": "and another way it can be done is through direct device pass through so we'll talk about both of those things",
    "start": "2153640",
    "end": "2159920"
  },
  {
    "text": "but first the split driver model I'll tell this this chart will show you a little bit more about well the chart",
    "start": "2159920",
    "end": "2164960"
  },
  {
    "text": "coming up we'll tell you a little bit more what it means but why do we why do we care about this split driver model it's because when you're doing lots and",
    "start": "2164960",
    "end": "2171280"
  },
  {
    "text": "lots and lots of IO any overheads in the process of doing iio in a virtual",
    "start": "2171280",
    "end": "2176560"
  },
  {
    "text": "machine world are going to add up and you'll notice them so I2 is an example",
    "start": "2176560",
    "end": "2181599"
  },
  {
    "text": "of an instance type that drives an insane amount of IO you can with the largest size the i28 extra large drive",
    "start": "2181599",
    "end": "2188480"
  },
  {
    "text": "365,000 iops and so any overheads in the process of delivering IO delivering reads or",
    "start": "2188480",
    "end": "2195599"
  },
  {
    "text": "writes is is going to be",
    "start": "2195599",
    "end": "2199440"
  },
  {
    "text": "noticeable so here's this the split driver model and how it works so within within a system um you'll have what's",
    "start": "2201079",
    "end": "2208680"
  },
  {
    "text": "called a driver domain and the driver domain will house the physical device drivers for the devices you're trying to",
    "start": "2208680",
    "end": "2215200"
  },
  {
    "text": "schedule across multiple virtual machines and so this could be dis device",
    "start": "2215200",
    "end": "2220520"
  },
  {
    "text": "drivers or it could be Network device drivers and each each guest will have",
    "start": "2220520",
    "end": "2226400"
  },
  {
    "text": "what's called a front-end driver that communicates through shared memory to",
    "start": "2226400",
    "end": "2232839"
  },
  {
    "text": "the driver domain's backend driver and and the driver domain then schedules requests to the network devices or disk",
    "start": "2232839",
    "end": "2242240"
  },
  {
    "text": "devices there are really three way three components to the delivery of IO using",
    "start": "2243760",
    "end": "2250040"
  },
  {
    "text": "the split driver model the first is a communication ring buffer for issuing commands so the the",
    "start": "2250040",
    "end": "2257160"
  },
  {
    "text": "guest virtual machine will say I would like to do a read or I would like to do a write and here's the the memory that",
    "start": "2257160",
    "end": "2263000"
  },
  {
    "text": "I'd like to use for that and here's where I wanted to go and um it'll write those desired commands to the",
    "start": "2263000",
    "end": "2268480"
  },
  {
    "text": "communication ring buffer and then the second part of the architecture is an event Channel signaling that there's",
    "start": "2268480",
    "end": "2275440"
  },
  {
    "text": "something in the command ring buffer to the driver domain once the signal is gotten um the",
    "start": "2275440",
    "end": "2281560"
  },
  {
    "text": "driver domain knows what to do with it and the data is communicated through shared memory pages so I know I want to",
    "start": "2281560",
    "end": "2287760"
  },
  {
    "text": "do a read how do I get the data from the driver domain over to the guest domain and that's through shared memory pages",
    "start": "2287760",
    "end": "2293920"
  },
  {
    "text": "and what actually has to happen is the guest needs to Grant memory from its address space to the driver domain so",
    "start": "2293920",
    "end": "2300720"
  },
  {
    "text": "the driver can then input data into those into those memory addresses",
    "start": "2300720",
    "end": "2307240"
  },
  {
    "text": "so pre 3.8.0 kernels here's what here's what happened in the process of granting",
    "start": "2307240",
    "end": "2313319"
  },
  {
    "text": "memory granting memory requires hyper calls to the to the hypervisor and so",
    "start": "2313319",
    "end": "2318880"
  },
  {
    "text": "like we've seen in the past with whether it's memory mapping or um system calls",
    "start": "2318880",
    "end": "2324040"
  },
  {
    "text": "hyper calls are expensive and they add up but what would happen is the the",
    "start": "2324040",
    "end": "2329119"
  },
  {
    "text": "instance domain would issue a hyper call to Grant shared pages to the driver domain it would then write to the ring",
    "start": "2329119",
    "end": "2335319"
  },
  {
    "text": "buffer including the command commands it would like to do plus the the the grant references it would signal event the",
    "start": "2335319",
    "end": "2341680"
  },
  {
    "text": "driver domain would then go look at the command buffer get the commands get the grant references map the grants read or",
    "start": "2341680",
    "end": "2348319"
  },
  {
    "text": "write to those grants and then unmap them and it turns out that this happened for every single IO",
    "start": "2348319",
    "end": "2354200"
  },
  {
    "text": "request and so if you're using I2 instances for example and you're trying to to drive 365,000 iops but you're not",
    "start": "2354200",
    "end": "2361599"
  },
  {
    "text": "using a a post 3.8.0 kernel that's actually pretty hard to",
    "start": "2361599",
    "end": "2367839"
  },
  {
    "text": "achieve so in order to solve this problem um in 3.8.0 and Beyond kernels",
    "start": "2367839",
    "end": "2375920"
  },
  {
    "text": "uh what happened was called persistent grants and persistent grants basically says let me",
    "start": "2375920",
    "end": "2381640"
  },
  {
    "text": "pregrant access to Shared memory Pages between the driver domain and the instance domain and instead of doing a",
    "start": "2381640",
    "end": "2388440"
  },
  {
    "text": "grant every time what happens is we'll just copy data to those pregrant pages",
    "start": "2388440",
    "end": "2394359"
  },
  {
    "text": "and and do our IO and this is dramatically uh reduce the number of hyper calls required in the process of",
    "start": "2394359",
    "end": "2400599"
  },
  {
    "text": "doing IO and dramatically improve performance um for any iio operation so",
    "start": "2400599",
    "end": "2406280"
  },
  {
    "text": "you're talking about again dis IO and network IO so the tip is to use 3.8.0 or greater",
    "start": "2406280",
    "end": "2414800"
  },
  {
    "text": "kernels and that's Amazon Linux 13.09 or later Ubuntu 1404 or later and real 7 or",
    "start": "2414800",
    "end": "2423318"
  },
  {
    "text": "later so the other the the the other way to deliver IO is",
    "start": "2424440",
    "end": "2430160"
  },
  {
    "text": "through direct device pass through and the idea there is asking you know why do we have to go through a driver domain",
    "start": "2430160",
    "end": "2436400"
  },
  {
    "text": "why can't we just take a PCI device and and and pass it directly through to an instance and give the instance exclusive",
    "start": "2436400",
    "end": "2442599"
  },
  {
    "text": "access to its functionality and and you can do that um with single root IO",
    "start": "2442599",
    "end": "2448800"
  },
  {
    "text": "virtualization um you eliminate the need for a driver domain because you're able to pass through virtual PCI functions",
    "start": "2448800",
    "end": "2454760"
  },
  {
    "text": "directly to an instance and get get awesome Network performance",
    "start": "2454760",
    "end": "2461079"
  },
  {
    "text": "um requires a specialized driver within the instance and you actually need to tell ec2 that that's the device you went",
    "start": "2461079",
    "end": "2468119"
  },
  {
    "text": "presented to your instance and you tell ec2 that that's the device you went presented to your instance through an Ami flag or an instance",
    "start": "2468119",
    "end": "2476280"
  },
  {
    "text": "flag so after enhanced networking you've completely disintermediated the driver domain the guest application you in the",
    "start": "2476280",
    "end": "2484400"
  },
  {
    "text": "case of networking creates a socket accesses the Nick the Nick driver in the guest OS which then talks directly to",
    "start": "2484400",
    "end": "2490480"
  },
  {
    "text": "the sov network device which is our our enhanced networking device and goes out to the network and with this you",
    "start": "2490480",
    "end": "2496160"
  },
  {
    "text": "actually get the highest packet per second rate you can get you can get the lowest uh variance and latency and uh",
    "start": "2496160",
    "end": "2503720"
  },
  {
    "text": "just a reminder that the instance OS must must support it so that was a quick run through all",
    "start": "2503720",
    "end": "2511960"
  },
  {
    "text": "the different ways that system performance is virtualized and why you know how we're able to basically deliver",
    "start": "2511960",
    "end": "2517920"
  },
  {
    "text": "awesome performance in ec2 while also providing agility and the ability to spin up and down instances uh on",
    "start": "2517920",
    "end": "2523839"
  },
  {
    "text": "demand um quick summary just remember that that choosing an instance is is not",
    "start": "2523839",
    "end": "2529359"
  },
  {
    "text": "a oneandone decision you can give instances back and so a lot of performance toting is experimenting with different instance types monitoring",
    "start": "2529359",
    "end": "2536880"
  },
  {
    "text": "resource utilization and then picking the instance type that gives you the most efficiency for what you're trying to",
    "start": "2536880",
    "end": "2542520"
  },
  {
    "text": "do and the virtualization themes to dat have been one of driving bare metal performance and we've seen that in in",
    "start": "2542520",
    "end": "2549319"
  },
  {
    "text": "many scenarios bare metal performance already exists if your CPU is running in user mode it's running directly on the",
    "start": "2549319",
    "end": "2555720"
  },
  {
    "text": "CPU for most with hardware virtualization uh in kernel mode the same thing with",
    "start": "2555720",
    "end": "2562760"
  },
  {
    "text": "um with enhanced networking and direct device pass through we're also in you know disintermediating driver domains",
    "start": "2562760",
    "end": "2569960"
  },
  {
    "text": "and giving more direct access to hardware and so this is just a quick",
    "start": "2569960",
    "end": "2576400"
  },
  {
    "text": "recap to get the most out of your ec2 experience remember to use PVH VM amies",
    "start": "2576400",
    "end": "2582119"
  },
  {
    "text": "U for timekeeping as an example of system call heavy application use TSC with uh with our high compute",
    "start": "2582119",
    "end": "2589400"
  },
  {
    "text": "instance types we provide direct access to cores and by doing so we give you more control you get access to p and to",
    "start": "2589400",
    "end": "2596040"
  },
  {
    "text": "controlling P States and C states with a c48 extra large consider using T2 try it out U see",
    "start": "2596040",
    "end": "2604040"
  },
  {
    "text": "if the fixed allocations of CPU we provide to the credit system there work for your application you could save a lot of money and you can use cloudwatch",
    "start": "2604040",
    "end": "2610359"
  },
  {
    "text": "met metric to determine if they're a good fit um use kernels that have automatic n",
    "start": "2610359",
    "end": "2615760"
  },
  {
    "text": "Numa balancing use kernels that have persistent grants enabled for Io performance and make sure using enhanced",
    "start": "2615760",
    "end": "2622880"
  },
  {
    "text": "networking for the best um highest performance networking experience so for more information a lot",
    "start": "2622880",
    "end": "2628920"
  },
  {
    "text": "of this um minus some of the Gory details that we went through is available on the ec2 website and the ec2",
    "start": "2628920",
    "end": "2634839"
  },
  {
    "text": "docs and come see us in the expo hall developer chat to learn more so thank",
    "start": "2634839",
    "end": "2640040"
  },
  {
    "text": "you very much",
    "start": "2640040",
    "end": "2646599"
  }
]