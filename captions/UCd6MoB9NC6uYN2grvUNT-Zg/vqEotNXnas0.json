[
  {
    "text": "hello my name is Simon Goldberg and I'm",
    "start": "0",
    "end": "2940"
  },
  {
    "text": "a blockchain specialist Solutions",
    "start": "2940",
    "end": "4680"
  },
  {
    "text": "architect at AWS",
    "start": "4680",
    "end": "6899"
  },
  {
    "text": "in this video I will show you how to",
    "start": "6899",
    "end": "9120"
  },
  {
    "text": "retrieve comprehensive transaction",
    "start": "9120",
    "end": "10920"
  },
  {
    "text": "details from various blockchains such as",
    "start": "10920",
    "end": "13679"
  },
  {
    "text": "Bitcoin and ethereum I will be utilizing",
    "start": "13679",
    "end": "16560"
  },
  {
    "text": "Amazon managed blockchain queries git",
    "start": "16560",
    "end": "18840"
  },
  {
    "text": "transaction API let's get started Amazon",
    "start": "18840",
    "end": "22320"
  },
  {
    "text": "managed blockchain query A and B query",
    "start": "22320",
    "end": "25560"
  },
  {
    "text": "for short offers serverless access to",
    "start": "25560",
    "end": "28380"
  },
  {
    "text": "multi blockchain data sets with",
    "start": "28380",
    "end": "30240"
  },
  {
    "text": "user-friendly apis",
    "start": "30240",
    "end": "32340"
  },
  {
    "text": "you can use a and b query to more",
    "start": "32340",
    "end": "34920"
  },
  {
    "text": "quickly ship applications that require",
    "start": "34920",
    "end": "37079"
  },
  {
    "text": "data from one or more public blockchains",
    "start": "37079",
    "end": "39960"
  },
  {
    "text": "without the overhead of parsing data",
    "start": "39960",
    "end": "42719"
  },
  {
    "text": "tracing smart contracts we're dealing",
    "start": "42719",
    "end": "45660"
  },
  {
    "text": "with specialized indexing infrastructure",
    "start": "45660",
    "end": "48379"
  },
  {
    "text": "A and B query makes blockchain data",
    "start": "48379",
    "end": "51360"
  },
  {
    "text": "retrieval both easy and efficient",
    "start": "51360",
    "end": "55440"
  },
  {
    "text": "A and B queries get transaction API",
    "start": "55440",
    "end": "58620"
  },
  {
    "text": "allows you to easily retrieve",
    "start": "58620",
    "end": "60780"
  },
  {
    "text": "comprehensive transaction details based",
    "start": "60780",
    "end": "63899"
  },
  {
    "text": "on a given transaction hash",
    "start": "63899",
    "end": "66240"
  },
  {
    "text": "an example use case for this API is",
    "start": "66240",
    "end": "69000"
  },
  {
    "text": "populating a front-end UI with",
    "start": "69000",
    "end": "70979"
  },
  {
    "text": "historical transaction details such as",
    "start": "70979",
    "end": "73860"
  },
  {
    "text": "the block number or the two and from",
    "start": "73860",
    "end": "76200"
  },
  {
    "text": "addresses in the transaction",
    "start": "76200",
    "end": "78720"
  },
  {
    "text": "before we look at a code example let's",
    "start": "78720",
    "end": "81540"
  },
  {
    "text": "go over to pre-roasted quit stops to get",
    "start": "81540",
    "end": "84360"
  },
  {
    "text": "started with ambquery make sure that",
    "start": "84360",
    "end": "86880"
  },
  {
    "text": "python is installed on your machine",
    "start": "86880",
    "end": "89340"
  },
  {
    "text": "additionally install the latest bo23",
    "start": "89340",
    "end": "92280"
  },
  {
    "text": "release via pip",
    "start": "92280",
    "end": "94380"
  },
  {
    "text": "you also need to install the AWS command",
    "start": "94380",
    "end": "97259"
  },
  {
    "text": "line interface once it is installed you",
    "start": "97259",
    "end": "100079"
  },
  {
    "text": "can set it up using the AWS configure",
    "start": "100079",
    "end": "102540"
  },
  {
    "text": "command to Define your credentials and",
    "start": "102540",
    "end": "104939"
  },
  {
    "text": "region for your iMusic",
    "start": "104939",
    "end": "107159"
  },
  {
    "text": "make sure that this user has the",
    "start": "107159",
    "end": "109320"
  },
  {
    "text": "necessary permissions for Amazon managed",
    "start": "109320",
    "end": "111840"
  },
  {
    "text": "blockchain query",
    "start": "111840",
    "end": "113579"
  },
  {
    "text": "this python example uses modules from",
    "start": "113579",
    "end": "116579"
  },
  {
    "text": "bow23 to send request to the A and B",
    "start": "116579",
    "end": "119280"
  },
  {
    "text": "query gate transaction API this example",
    "start": "119280",
    "end": "122640"
  },
  {
    "text": "retrieves comprehensive transaction",
    "start": "122640",
    "end": "124740"
  },
  {
    "text": "details for a giving transaction on the",
    "start": "124740",
    "end": "127200"
  },
  {
    "text": "Bitcoin main net to use bow23 you must",
    "start": "127200",
    "end": "130800"
  },
  {
    "text": "first import it and indicate which",
    "start": "130800",
    "end": "132720"
  },
  {
    "text": "service you are going to use after you",
    "start": "132720",
    "end": "135480"
  },
  {
    "text": "have created a managed blockchain query",
    "start": "135480",
    "end": "137340"
  },
  {
    "text": "resource you can specify the API to call",
    "start": "137340",
    "end": "140280"
  },
  {
    "text": "and pass in the relevant parameters in",
    "start": "140280",
    "end": "143340"
  },
  {
    "text": "this case a transaction hash and a",
    "start": "143340",
    "end": "145980"
  },
  {
    "text": "network I've additionally parsed a",
    "start": "145980",
    "end": "148680"
  },
  {
    "text": "response to return the data in a more",
    "start": "148680",
    "end": "150780"
  },
  {
    "text": "human readable format as you can see",
    "start": "150780",
    "end": "153300"
  },
  {
    "text": "when I run the code it returns various",
    "start": "153300",
    "end": "155640"
  },
  {
    "text": "details about the transaction such as",
    "start": "155640",
    "end": "158220"
  },
  {
    "text": "the block hash the transaction timestamp",
    "start": "158220",
    "end": "160980"
  },
  {
    "text": "and the transaction fee let's now take a",
    "start": "160980",
    "end": "164280"
  },
  {
    "text": "look at an example that retrieves",
    "start": "164280",
    "end": "165959"
  },
  {
    "text": "comprehensive transaction details for a",
    "start": "165959",
    "end": "168239"
  },
  {
    "text": "giving transaction on the ethereum in",
    "start": "168239",
    "end": "170400"
  },
  {
    "text": "that similar to the last example I",
    "start": "170400",
    "end": "172980"
  },
  {
    "text": "specify transaction hash in the network",
    "start": "172980",
    "end": "175200"
  },
  {
    "text": "and I'm printing the results in an easy",
    "start": "175200",
    "end": "177239"
  },
  {
    "text": "to read format when I run this code you",
    "start": "177239",
    "end": "180420"
  },
  {
    "text": "can see that various details about the",
    "start": "180420",
    "end": "182220"
  },
  {
    "text": "transaction is returned such as the two",
    "start": "182220",
    "end": "184739"
  },
  {
    "text": "address and the from address",
    "start": "184739",
    "end": "187500"
  },
  {
    "text": "in this final python example the list",
    "start": "187500",
    "end": "190680"
  },
  {
    "text": "transactions API is used to First obtain",
    "start": "190680",
    "end": "193620"
  },
  {
    "text": "a list of transactions for a specified",
    "start": "193620",
    "end": "195959"
  },
  {
    "text": "externally owned address on the ethereum",
    "start": "195959",
    "end": "198420"
  },
  {
    "text": "mainnet the code then Loop server is",
    "start": "198420",
    "end": "201060"
  },
  {
    "text": "transaction in the list for each septic",
    "start": "201060",
    "end": "203819"
  },
  {
    "text": "transactions the git transaction API",
    "start": "203819",
    "end": "206519"
  },
  {
    "text": "operation is called passing in the",
    "start": "206519",
    "end": "209040"
  },
  {
    "text": "relevant transaction hash in order to",
    "start": "209040",
    "end": "211739"
  },
  {
    "text": "retrieve detailed information for each",
    "start": "211739",
    "end": "214319"
  },
  {
    "text": "of the individual transactions",
    "start": "214319",
    "end": "216900"
  },
  {
    "text": "like the previous examples I have parsed",
    "start": "216900",
    "end": "219720"
  },
  {
    "text": "the output into a more easy to read",
    "start": "219720",
    "end": "221700"
  },
  {
    "text": "format",
    "start": "221700",
    "end": "222840"
  },
  {
    "text": "when we run this code you can see that a",
    "start": "222840",
    "end": "225780"
  },
  {
    "text": "list of transaction details is returned",
    "start": "225780",
    "end": "228180"
  },
  {
    "text": "for this specified externally owned",
    "start": "228180",
    "end": "230640"
  },
  {
    "text": "address",
    "start": "230640",
    "end": "232019"
  },
  {
    "text": "this list contains all the comprehensive",
    "start": "232019",
    "end": "234780"
  },
  {
    "text": "transaction details that you need to",
    "start": "234780",
    "end": "237000"
  },
  {
    "text": "populate the user interface of your",
    "start": "237000",
    "end": "238860"
  },
  {
    "text": "application",
    "start": "238860",
    "end": "240239"
  },
  {
    "text": "in conclusion A and B queries get",
    "start": "240239",
    "end": "243060"
  },
  {
    "text": "transaction is a useful API for any",
    "start": "243060",
    "end": "246120"
  },
  {
    "text": "developer working with blockchain data A",
    "start": "246120",
    "end": "249180"
  },
  {
    "text": "and B query abstracts away the",
    "start": "249180",
    "end": "251340"
  },
  {
    "text": "underlying complexity that is needed to",
    "start": "251340",
    "end": "253500"
  },
  {
    "text": "retrieve blockchain data such as",
    "start": "253500",
    "end": "255599"
  },
  {
    "text": "historical ethereum and Bitcoin",
    "start": "255599",
    "end": "257699"
  },
  {
    "text": "transaction details",
    "start": "257699",
    "end": "260040"
  },
  {
    "text": "that is all for today's video thank you",
    "start": "260040",
    "end": "263100"
  },
  {
    "text": "very much for joining me in this",
    "start": "263100",
    "end": "264840"
  },
  {
    "text": "exploration of A and B queries get",
    "start": "264840",
    "end": "267120"
  },
  {
    "text": "transaction API and how it can be",
    "start": "267120",
    "end": "269460"
  },
  {
    "text": "utilized to retrieve comprehensive",
    "start": "269460",
    "end": "271440"
  },
  {
    "text": "transaction details from both the",
    "start": "271440",
    "end": "273419"
  },
  {
    "text": "Bitcoin and ethereum network if you",
    "start": "273419",
    "end": "276540"
  },
  {
    "text": "would like to learn more about ambquery",
    "start": "276540",
    "end": "278520"
  },
  {
    "text": "please refer to the links in the",
    "start": "278520",
    "end": "280440"
  },
  {
    "text": "description thank you once again and",
    "start": "280440",
    "end": "283259"
  },
  {
    "text": "happy development",
    "start": "283259",
    "end": "286040"
  }
]