[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "Hi! Welcome to 'This is My Architecture'.",
    "start": "7359",
    "end": "9630"
  },
  {
    "text": "My name is Andrea and I'm here with Josh",
    "start": "9630",
    "end": "11523"
  },
  {
    "text": "from OnScale. ",
    "start": "11523",
    "end": "12653"
  },
  {
    "text": "Hi, Josh, welcome to the show.\nHi, Andrea.",
    "start": "12654",
    "end": "14837"
  },
  {
    "text": "So what do you guys do?",
    "start": "14837",
    "end": "16604"
  },
  {
    "text": "OnScale is a computer-aided engineering firm ",
    "start": "16604",
    "end": "19097"
  },
  {
    "text": "and we provide access to high performance",
    "start": "19097",
    "end": "22432"
  },
  {
    "text": "computing resources in the cloud.",
    "start": "22432",
    "end": "24061"
  },
  {
    "start": "24000",
    "end": "56000"
  },
  {
    "text": "Excellent, so today we're going to talk about",
    "start": "24062",
    "end": "26299"
  },
  {
    "text": "Cloud HPC orchestration.\nCorrect.",
    "start": "26299",
    "end": "29139"
  },
  {
    "text": "So what goes through that? What is that?",
    "start": "29139",
    "end": "31076"
  },
  {
    "text": "Sure, so, when an engineer wants to run a simulation",
    "start": "31076",
    "end": "35062"
  },
  {
    "text": "of a product before they manufacture a prototype,",
    "start": "35062",
    "end": "37545"
  },
  {
    "text": "they perform a series of regular simulations",
    "start": "37545",
    "end": "42099"
  },
  {
    "text": "of a type that have been going on for quite some time,",
    "start": "42099",
    "end": "45080"
  },
  {
    "text": "but these have been limited to firms that have",
    "start": "45081",
    "end": "47368"
  },
  {
    "text": "access to large on-prem data centers.",
    "start": "47368",
    "end": "50356"
  },
  {
    "text": "With AWS all firms can have access to that,",
    "start": "50356",
    "end": "54413"
  },
  {
    "text": "and that's what OnScale provides.",
    "start": "54413",
    "end": "55809"
  },
  {
    "text": "Wonderful. So it's running on AWS,",
    "start": "55809",
    "end": "57764"
  },
  {
    "start": "56000",
    "end": "93000"
  },
  {
    "text": "as you mentioned, and I see a number of the AWS services",
    "start": "57764",
    "end": "61485"
  },
  {
    "text": "here on the board, so let's look at one event.",
    "start": "61485",
    "end": "64628"
  },
  {
    "text": "I'm an engineer, I have a simulation",
    "start": "64628",
    "end": "66710"
  },
  {
    "text": "that I want to submit, what is the first thing that happens?",
    "start": "66710",
    "end": "68999"
  },
  {
    "text": "Well the first thing that happens is the customer will",
    "start": "68999",
    "end": "71647"
  },
  {
    "text": "send data to an S3 bucket.",
    "start": "71647",
    "end": "74303"
  },
  {
    "text": "They'll encrypt those data with a KMS key",
    "start": "74303",
    "end": "77541"
  },
  {
    "text": "and send it here, and then they will schedule",
    "start": "77541",
    "end": "80616"
  },
  {
    "text": "their job to run.",
    "start": "80616",
    "end": "82493"
  },
  {
    "text": "That scheduled job gets sent",
    "start": "82494",
    "end": "84767"
  },
  {
    "text": "off to EKS to spin up a right-sized  ",
    "start": "84767",
    "end": "89389"
  },
  {
    "text": "HPC node right here.",
    "start": "89389",
    "end": "91964"
  },
  {
    "text": "I see, so you have a Kubernetes cluster, ",
    "start": "91964",
    "end": "94606"
  },
  {
    "start": "93000",
    "end": "215000"
  },
  {
    "text": "obviously for orchestration, ",
    "start": "94607",
    "end": "96559"
  },
  {
    "text": "and the HPC nodes, walk me through that,",
    "start": "96559",
    "end": "99281"
  },
  {
    "text": "like how do you right-size, what instances you use.\nSure.",
    "start": "99281",
    "end": "102493"
  },
  {
    "text": "So the customer will tell us how much",
    "start": "102938",
    "end": "105023"
  },
  {
    "text": "memory they require, or our estimators will, ",
    "start": "105023",
    "end": "108355"
  },
  {
    "text": "and then, how many cores they need,",
    "start": "108355",
    "end": "110366"
  },
  {
    "text": "and how many different simulations they want to run,",
    "start": "110366",
    "end": "112840"
  },
  {
    "text": "they may run one job that's got 2000 cores ",
    "start": "112841",
    "end": "116028"
  },
  {
    "text": "or 2000 jobs that have two cores each.",
    "start": "116028",
    "end": "120660"
  },
  {
    "text": "Something like that.\nI see.",
    "start": "120660",
    "end": "121963"
  },
  {
    "text": "So, depending on what they require, ",
    "start": "121963",
    "end": "123495"
  },
  {
    "text": "we'll spin up the appropriate resources for them.",
    "start": "123496",
    "end": "125637"
  },
  {
    "text": "That takes, you know, between 3 to 5 minutes, right?",
    "start": "125637",
    "end": "128389"
  },
  {
    "text": "But since it can go from zero to hero, ",
    "start": "129567",
    "end": "132150"
  },
  {
    "text": "instantly almost, our big concern is ",
    "start": "132757",
    "end": "135306"
  },
  {
    "text": "how do we orchestrate all the services ",
    "start": "135306",
    "end": "137297"
  },
  {
    "text": "so that they don't blow up.\nExactly.",
    "start": "137297",
    "end": "139924"
  },
  {
    "text": "And for that, the real secret sauce of ours is,",
    "start": "139924",
    "end": "142596"
  },
  {
    "text": "we send all of the data that is streaming out ",
    "start": "143396",
    "end": "145681"
  },
  {
    "text": "of our HPC nodes to a CloudWatch Log,",
    "start": "145682",
    "end": "147750"
  },
  {
    "text": "which can handle huge amounts of traffic.\nOK. ",
    "start": "147750",
    "end": "150301"
  },
  {
    "text": "And it has alerts cooked into it that fires off data",
    "start": "150301",
    "end": "155933"
  },
  {
    "text": "that matches certain patterns to their appropriate",
    "start": "155933",
    "end": "158493"
  },
  {
    "text": "Lambdas for doing data processing. ",
    "start": "158493",
    "end": "160185"
  },
  {
    "text": "OK.\nSo, CloudWatch will start a ",
    "start": "160186",
    "end": "163394"
  },
  {
    "text": "Lambda run to, say, alert to progress ",
    "start": "163394",
    "end": "167545"
  },
  {
    "text": "or tell the customer that there's a preliminary result",
    "start": "167546",
    "end": "171512"
  },
  {
    "text": "available, so that they can look and see",
    "start": "171512",
    "end": "173508"
  },
  {
    "text": "if the simulation is right or not,",
    "start": "173509",
    "end": "175163"
  },
  {
    "text": "cancel or continue.\nI see.",
    "start": "175163",
    "end": "177108"
  },
  {
    "text": "And then ",
    "start": "177108",
    "end": "179486"
  },
  {
    "text": "those Lambdas will fire off SNS messages ",
    "start": "179486",
    "end": "182627"
  },
  {
    "text": "to cue yet more Lambdas...\nI see.",
    "start": "182627",
    "end": "185137"
  },
  {
    "text": "to do other things, like write data to DynamoDB,",
    "start": "185137",
    "end": "188222"
  },
  {
    "text": "send messages to Redis, for handling things like",
    "start": "188223",
    "end": "192456"
  },
  {
    "text": "WebSocket, to keep the customer informed",
    "start": "192456",
    "end": "195058"
  },
  {
    "text": "about what's happening.\nI see.",
    "start": "195058",
    "end": "196528"
  },
  {
    "text": "So, the HPC nodes themselves",
    "start": "196528",
    "end": "198956"
  },
  {
    "text": "connect to S3, but that's the only",
    "start": "198956",
    "end": "201512"
  },
  {
    "text": "service they connect to, other than Lambda, ",
    "start": "201512",
    "end": "203560"
  },
  {
    "text": "to get a license and a key for S3.",
    "start": "203561",
    "end": "205972"
  },
  {
    "text": "After that, everything goes through CloudWatch",
    "start": "205972",
    "end": "208275"
  },
  {
    "text": "and then through Lambda, to handle the spikes",
    "start": "208275",
    "end": "211260"
  },
  {
    "text": "on traffic, which going from zero to 10,000 simulations ",
    "start": "211261",
    "end": "214954"
  },
  {
    "text": "in a minute, causes.\nI see, so you use Lambda",
    "start": "214954",
    "end": "217284"
  },
  {
    "start": "215000",
    "end": "255000"
  },
  {
    "text": "in a very clever way to handle the spiky",
    "start": "217285",
    "end": "220002"
  },
  {
    "text": "workflows, also limitations.",
    "start": "220002",
    "end": "222356"
  },
  {
    "text": "So walk us through a scenario, I mean, I see",
    "start": "222356",
    "end": "224147"
  },
  {
    "text": "DynamoDB, right? Walk us through a situation",
    "start": "224147",
    "end": "227620"
  },
  {
    "text": "where DynamoDB will be triggered by Lambda.\nSure.",
    "start": "227620",
    "end": "231056"
  },
  {
    "text": "So, the simulation starts, it's going to send a message",
    "start": "231056",
    "end": "234194"
  },
  {
    "text": "to CloudWatch that says \"Simulation Running\".",
    "start": "234194",
    "end": "236547"
  },
  {
    "text": "At that point, a Lambda will write database matches",
    "start": "236547",
    "end": "240690"
  },
  {
    "text": "with a UUID that describes the simulation",
    "start": "240690",
    "end": "243498"
  },
  {
    "text": "and a date, it says it started at this time.",
    "start": "243498",
    "end": "245898"
  },
  {
    "text": "And then, likewise, when it's over, it will say",
    "start": "245898",
    "end": "248422"
  },
  {
    "text": "\"finished\" and we'll write another row here, ",
    "start": "248423",
    "end": "250327"
  },
  {
    "text": "and then, not surprisingly, we'll subtract the end time",
    "start": "250327",
    "end": "252920"
  },
  {
    "text": "from the start time and that's how long ",
    "start": "252920",
    "end": "254806"
  },
  {
    "text": "the simulation ran.\nDoes the engineer then",
    "start": "254806",
    "end": "257555"
  },
  {
    "text": "get any reporting, any insights into status?",
    "start": "257555",
    "end": "261750"
  },
  {
    "text": "How does that facilitate it?\nAbsolutely, I mean, that's the beauty",
    "start": "261750",
    "end": "263261"
  },
  {
    "text": "of using CloudWatch and Lambda,",
    "start": "263261",
    "end": "265153"
  },
  {
    "text": "is that we can get out of these sequestered nodes, ",
    "start": "265153",
    "end": "267582"
  },
  {
    "text": "which we keep well off the internet, right?",
    "start": "267582",
    "end": "270370"
  },
  {
    "text": "And the data is proxied through CloudWatch and Lambda,",
    "start": "270370",
    "end": "273860"
  },
  {
    "text": "so that the information that the customer desires, ",
    "start": "273860",
    "end": "275973"
  },
  {
    "text": "which is, you know, is it going, are we progressing, ",
    "start": "275973",
    "end": "279410"
  },
  {
    "text": "do we have... can I see your picture, of what's happening,",
    "start": "279411",
    "end": "281875"
  },
  {
    "text": "how's the signal, is it ringing down like I expect or not,",
    "start": "281875",
    "end": "284771"
  },
  {
    "text": "and then, finally when it's over, they'll find out",
    "start": "284771",
    "end": "289539"
  },
  {
    "text": "and they'll go to S3 and pull down the results.",
    "start": "289539",
    "end": "291324"
  },
  {
    "text": "OK, so the simulation completes, ",
    "start": "291324",
    "end": "293417"
  },
  {
    "text": "then the output is back on S3?\nCorrect, the HPC node will",
    "start": "293417",
    "end": "297707"
  },
  {
    "text": "deliver the results back into the same bucket",
    "start": "297707",
    "end": "300225"
  },
  {
    "text": "using the same key that the customer",
    "start": "300225",
    "end": "302704"
  },
  {
    "text": "already has.\nOh, very interesting.",
    "start": "302704",
    "end": "304080"
  },
  {
    "text": "So it never goes to S3 until it's encrypted again ",
    "start": "304080",
    "end": "306827"
  },
  {
    "text": "with the key that they downloaded to start",
    "start": "306827",
    "end": "308862"
  },
  {
    "text": "the whole process.\nI see, that's fantastic.",
    "start": "308862",
    "end": "311544"
  },
  {
    "start": "310000",
    "end": "348000"
  },
  {
    "text": "Walk us through the scale, I suspect",
    "start": "311544",
    "end": "313591"
  },
  {
    "text": "there's many simultaneous simulations happening.\nSure, exactly.",
    "start": "313591",
    "end": "317129"
  },
  {
    "text": "How do you handle that?\nYeah, the customer can",
    "start": "317129",
    "end": "319353"
  },
  {
    "text": "start one simulation, which is how",
    "start": "319353",
    "end": "322134"
  },
  {
    "text": "they're used to doing it, but in OnScale they can do",
    "start": "322134",
    "end": "325037"
  },
  {
    "text": "parametric computer-aided engineering, ",
    "start": "325037",
    "end": "327323"
  },
  {
    "text": "which is, you know, similar to ",
    "start": "327324",
    "end": "329793"
  },
  {
    "text": "parametric CAD, which they're all familiar with,",
    "start": "329793",
    "end": "332094"
  },
  {
    "text": "through innovations like SolidWorks, ",
    "start": "332094",
    "end": "334807"
  },
  {
    "text": "but parametric computer-aided engineering,",
    "start": "334808",
    "end": "337922"
  },
  {
    "text": "they can do 10,000 simulations at the same time,",
    "start": "337922",
    "end": "340763"
  },
  {
    "text": "and pick out just the right combination ",
    "start": "340763",
    "end": "343832"
  },
  {
    "text": "of lengths and sizes and materials ",
    "start": "343832",
    "end": "345952"
  },
  {
    "text": "in order to get the perfect product.",
    "start": "345952",
    "end": "347402"
  },
  {
    "text": "Wonderful. This is a very interesting",
    "start": "347402",
    "end": "349317"
  },
  {
    "start": "348000",
    "end": "375000"
  },
  {
    "text": "architecture you've walked us through here, you know,",
    "start": "349317",
    "end": "351762"
  },
  {
    "text": "using Cloud HPC orchestration ",
    "start": "351762",
    "end": "354947"
  },
  {
    "text": "and leveraging Lambdas to handle limitations",
    "start": "354947",
    "end": "357974"
  },
  {
    "text": "and other sort of spiky workloads",
    "start": "357974",
    "end": "360061"
  },
  {
    "text": "that is coming in from the engineers.",
    "start": "360061",
    "end": "363268"
  },
  {
    "text": "So thanks again for walking us through\nThank you.",
    "start": "363268",
    "end": "364626"
  },
  {
    "text": "this architecture, and thank you",
    "start": "364626",
    "end": "366934"
  },
  {
    "text": "for watching 'This is My Architecture'.",
    "start": "366934",
    "end": "369369"
  }
]