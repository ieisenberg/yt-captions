[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "my name is Lee axon on the sluice architect based in the UK I work in the London office for AWS so but normally",
    "start": "269",
    "end": "6180"
  },
  {
    "text": "work in the media and entertainment team of in the UK but we also have specialism on edge services just to explain what",
    "start": "6180",
    "end": "12900"
  },
  {
    "text": "edge services are in AWS our cloud from a content delivery network address",
    "start": "12900",
    "end": "18029"
  },
  {
    "text": "laughs our Web Application Firewall route 53 our DNS service and aid 2's shield our DDoS mitigation service this",
    "start": "18029",
    "end": "27090"
  },
  {
    "text": "presentation is based on looking at lambda edge just giving you an overview I'm going to talk a little bit just as",
    "start": "27090",
    "end": "34230"
  },
  {
    "start": "30000",
    "end": "55000"
  },
  {
    "text": "an introduction of Ada West lambda and Amazon CloudFront how you can use lambda",
    "start": "34230",
    "end": "40050"
  },
  {
    "text": "on cloud front what we call lambda edge talk about how it works and what you can",
    "start": "40050",
    "end": "45149"
  },
  {
    "text": "use it for and then we will finish off with some demos of lambda lambda edge for common scenarios so address lambda",
    "start": "45149",
    "end": "55070"
  },
  {
    "start": "55000",
    "end": "118000"
  },
  {
    "text": "so lambda as a service compute service so this is where you can write your code and deploy it and you're not",
    "start": "55070",
    "end": "61440"
  },
  {
    "text": "concerned about the service on which it runs so you just manage your code and you deploy it so lambda itself is a",
    "start": "61440",
    "end": "69450"
  },
  {
    "text": "event based service so an event fires to cause the execution of your function so",
    "start": "69450",
    "end": "74909"
  },
  {
    "text": "common events are such as putting an object into s3 updates or a dynamo DB",
    "start": "74909",
    "end": "79979"
  },
  {
    "text": "table using api gateway with lambda backed functions CloudFront as we",
    "start": "79979",
    "end": "85530"
  },
  {
    "text": "mentioned previously in that up to the topic of this discussion but also many other different functions you can also",
    "start": "85530",
    "end": "92159"
  },
  {
    "text": "execute lambda functions yourself in your own application so it makes it easy",
    "start": "92159",
    "end": "97229"
  },
  {
    "text": "to build simple compare simple decoupled applications where you can just focus on",
    "start": "97229",
    "end": "104040"
  },
  {
    "text": "your code and it's using standard computer languages so not something that",
    "start": "104040",
    "end": "109079"
  },
  {
    "text": "you have to write specific language you can use your own language such as Python nodejs",
    "start": "109079",
    "end": "114659"
  },
  {
    "text": "Java C sharp etc so the benefits of a",
    "start": "114659",
    "end": "119790"
  },
  {
    "start": "118000",
    "end": "152000"
  },
  {
    "text": "dressed lambda see that there are no service to manage you only manage your code and develop your code you're not",
    "start": "119790",
    "end": "125640"
  },
  {
    "text": "concerned about managing or patching or scaling your infrastructures to execute that code that's our responsibility to",
    "start": "125640",
    "end": "132480"
  },
  {
    "text": "do for you continuously skelter depending on the demand of those execution of",
    "start": "132480",
    "end": "138209"
  },
  {
    "text": "those functions we will scale the infrastructure to execute those lambda functions that you write and finally you",
    "start": "138209",
    "end": "144420"
  },
  {
    "text": "don't have to pay for lambda when it's not being executed only when it executes are you paying for the execution so",
    "start": "144420",
    "end": "153420"
  },
  {
    "start": "152000",
    "end": "192000"
  },
  {
    "text": "that's a brief introduction to Ada West lambda gonna move on to Amazon CloudFront so Amazon CloudFront s-- has",
    "start": "153420",
    "end": "159930"
  },
  {
    "text": "95 locations around the world globally and it's a content delivery network so",
    "start": "159930",
    "end": "166260"
  },
  {
    "text": "the key thing here is delivering your content as close to your users wherever they are in the world and delivering",
    "start": "166260",
    "end": "175290"
  },
  {
    "text": "them from different age locations as well as the angel occasions themselves there's also regional edge caches and",
    "start": "175290",
    "end": "182579"
  },
  {
    "text": "these are providing greater caching for your users and these are located in the",
    "start": "182579",
    "end": "188849"
  },
  {
    "text": "edge in the edge of its regions themselves so some of the key features of CloudFront is it accelerates both",
    "start": "188849",
    "end": "195629"
  },
  {
    "start": "192000",
    "end": "278000"
  },
  {
    "text": "static and dynamic content quite often people think about CDN sirs only for static content it will accelerate",
    "start": "195629",
    "end": "201810"
  },
  {
    "text": "dynamic content whether that's dynamic HTTP a web pages or HTTP API is it will",
    "start": "201810",
    "end": "208609"
  },
  {
    "text": "accelerate both both static and dynamic it's also scalable and global so you can",
    "start": "208609",
    "end": "213959"
  },
  {
    "text": "handle those flash crowds coming to your website and you also able to cache",
    "start": "213959",
    "end": "219150"
  },
  {
    "text": "content closer to the user supports HTTP 2 and IP version 6 and it's highly",
    "start": "219150",
    "end": "225060"
  },
  {
    "text": "secure so it supports these PCI DSS HIPAA and iso compliance it also offers",
    "start": "225060",
    "end": "232949"
  },
  {
    "text": "TLS or HTTPS you can also make your web endpoint HTTPS only integrates with",
    "start": "232949",
    "end": "238709"
  },
  {
    "text": "Amazon's certificate manager to be able to deploy your SSL certificates it also",
    "start": "238709",
    "end": "244260"
  },
  {
    "text": "integrates a very direct shield major West path it's self-service so you can",
    "start": "244260",
    "end": "250019"
  },
  {
    "text": "you can create your cloud formation your CloudFront distribution through the console through the CLI API through SDKs",
    "start": "250019",
    "end": "257880"
  },
  {
    "text": "and using cloud formation it's also cost efficient so if you're used if you're distributing HTTP content is",
    "start": "257880",
    "end": "266060"
  },
  {
    "text": "very often it'll be much cheaper to use CloudFront so not only we get the benefits of the acceleration you'll also",
    "start": "266060",
    "end": "272360"
  },
  {
    "text": "get cost savings as well by using CloudFront so often when people think",
    "start": "272360",
    "end": "279440"
  },
  {
    "text": "about an application or web application you often think about the origin ie the the web servers that are serving",
    "start": "279440",
    "end": "285710"
  },
  {
    "text": "that content and the client itself so your origin is typically ec2 or ELB s3",
    "start": "285710",
    "end": "292850"
  },
  {
    "text": "could be on on data on Prem datacenters as well your client may be an html5",
    "start": "292850",
    "end": "299140"
  },
  {
    "text": "application a mobile app or a desktop application but I also want you to think",
    "start": "299140",
    "end": "304640"
  },
  {
    "text": "about actually between the origin the client is the edge so we're talking about the Amazon edge network and so is",
    "start": "304640",
    "end": "311300"
  },
  {
    "text": "that you also got as part of your application route 53 DNS cloud front CDN",
    "start": "311300",
    "end": "317060"
  },
  {
    "text": "address wife and a Jew and an ADA shield for web application firewall and DDoS",
    "start": "317060",
    "end": "322370"
  },
  {
    "text": "protection and now we've also got lambda edge so lambda an edge is where lambda",
    "start": "322370",
    "end": "329300"
  },
  {
    "text": "is running at CloudFront in its locations so an introduction to lambda",
    "start": "329300",
    "end": "336050"
  },
  {
    "start": "335000",
    "end": "366000"
  },
  {
    "text": "edge so this is an extension of a direct lambda running in the a gos global",
    "start": "336050",
    "end": "341390"
  },
  {
    "text": "education locations for cloud front it's very similar to lambda in the center again you're bringing your own code and",
    "start": "341390",
    "end": "348260"
  },
  {
    "text": "it will execute at the edge so as well as all those other benefits that we mention of lambda there's an extra one",
    "start": "348260",
    "end": "353780"
  },
  {
    "text": "which is that is globally distributed so whereas lambda runs in the region that",
    "start": "353780",
    "end": "358940"
  },
  {
    "text": "you deploy your code into lambda edge runs globally across all of cloud front",
    "start": "358940",
    "end": "365590"
  },
  {
    "text": "so to give you an example you've got the end users will connect to their routed",
    "start": "365590",
    "end": "371300"
  },
  {
    "start": "366000",
    "end": "390000"
  },
  {
    "text": "to their nearest edge location this is performed by CloudFront automatically and before it goes back to the origin",
    "start": "371300",
    "end": "378050"
  },
  {
    "text": "server allows you to actually execute lambda cloak code as close as the user as possible and when the response is",
    "start": "378050",
    "end": "384169"
  },
  {
    "text": "returned again you can execute code before it's returned to the end user",
    "start": "384169",
    "end": "390729"
  },
  {
    "start": "390000",
    "end": "412000"
  },
  {
    "text": "so here we look at cloud fronts from from high up you can have dynamic and static content as different origins in",
    "start": "392060",
    "end": "399380"
  },
  {
    "text": "front of your CloudFront distribution and these are delivering HTML API static",
    "start": "399380",
    "end": "405200"
  },
  {
    "text": "images style sheets etc but if we zoom in on the clown front edge location here",
    "start": "405200",
    "end": "412030"
  },
  {
    "start": "412000",
    "end": "489000"
  },
  {
    "text": "we can look inside and see the lambda edge triggers that are available so",
    "start": "412030",
    "end": "417530"
  },
  {
    "text": "there's four triggers in total if used from the top you've got the viewer",
    "start": "417530",
    "end": "423440"
  },
  {
    "text": "request before the cache after the cache the Orangery requests then it follows to",
    "start": "423440",
    "end": "430880"
  },
  {
    "text": "the origin and on the response from the Oh Virginia of the origin response before it's cached and then it goes",
    "start": "430880",
    "end": "436940"
  },
  {
    "text": "through a viewer response so the key thing here is if the object is already",
    "start": "436940",
    "end": "442040"
  },
  {
    "text": "in the cache only the viewer request and the viewer response will be executed if",
    "start": "442040",
    "end": "447950"
  },
  {
    "text": "it's not in the cache or fall be executed now why would you want to use a",
    "start": "447950",
    "end": "453140"
  },
  {
    "text": "viewer request or origin request well they perform the same actions but the",
    "start": "453140",
    "end": "458990"
  },
  {
    "text": "benefit of if you can do it in the origin request or the origin response is it it can be cached and because it",
    "start": "458990",
    "end": "465470"
  },
  {
    "text": "become be cached you won't have to be executed and every single response back",
    "start": "465470",
    "end": "470510"
  },
  {
    "text": "to the user so there's cost savings if you can move your logic so it's on the origin facing execution where it's a",
    "start": "470510",
    "end": "477830"
  },
  {
    "text": "request or the response you help to reduce your cost because it's not executing every single time because it's",
    "start": "477830",
    "end": "484430"
  },
  {
    "text": "only is it'll only be executed on a cache miss so what can lambda H do you",
    "start": "484430",
    "end": "492500"
  },
  {
    "start": "489000",
    "end": "645000"
  },
  {
    "text": "can add modify yes I can take questions now if you like",
    "start": "492500",
    "end": "500490"
  },
  {
    "text": "this I guess this is just to summarize the question is how does cloud know whether it needs to refresh the content",
    "start": "531810",
    "end": "538930"
  },
  {
    "text": "from from an origin so this is not this is a general question for CloudFront unless a lambda edge for cloud funds",
    "start": "538930",
    "end": "545350"
  },
  {
    "text": "itself it's based on the fact of thee that the cache control headers over TTL that it's configured for so when it's",
    "start": "545350",
    "end": "552070"
  },
  {
    "text": "got a response there's a TTL that says how long that content will be valid for",
    "start": "552070",
    "end": "557830"
  },
  {
    "text": "and after",
    "start": "557830",
    "end": "560820"
  },
  {
    "text": "yeah so in its dynamic you're more like sassette a small TTL you could still set",
    "start": "572050",
    "end": "577790"
  },
  {
    "text": "a t-tail maybe with one second because things don't change but if but if you",
    "start": "577790",
    "end": "583630"
  },
  {
    "text": "know because they can be a benefit that even if for surety Thiel's if you've got you know well if you've",
    "start": "586750",
    "end": "594470"
  },
  {
    "text": "got hundreds of hundreds of people hitting that request at the same time it still means only one request per second",
    "start": "594470",
    "end": "599930"
  },
  {
    "text": "has to go back to your virgin so its benefits of a short TTL I would always say that most of time it depends on you",
    "start": "599930",
    "end": "606830"
  },
  {
    "text": "know there may be reason why you don't be you should always set a TTL and it can be as short as one second it can be",
    "start": "606830",
    "end": "612500"
  },
  {
    "text": "zero so you don't catch anything yes a",
    "start": "612500",
    "end": "624920"
  },
  {
    "text": "CloudFront has a so the question is around can the origin signify to",
    "start": "624920",
    "end": "629990"
  },
  {
    "text": "CloudFront talk date so you can use there's a invalidations to be able to invalidate the cloud cache",
    "start": "629990",
    "end": "636020"
  },
  {
    "text": "which tells Kyle front to come back on the next request say it's possible okay",
    "start": "636020",
    "end": "643190"
  },
  {
    "text": "sure so what can Clem to H do so first thing is it can add remove modify",
    "start": "643190",
    "end": "650270"
  },
  {
    "start": "645000",
    "end": "710000"
  },
  {
    "text": "request headers and response headers it allows you to change those you make you can remove them entirely you can rewrite",
    "start": "650270",
    "end": "656840"
  },
  {
    "text": "them you can add new ones about the requests and the response you can modify",
    "start": "656840",
    "end": "662540"
  },
  {
    "text": "the request URL so as its passing through you can rewrite the URL as it's passing through you can generate a",
    "start": "662540",
    "end": "669740"
  },
  {
    "text": "response so rather than going through all those four events you can actually on a request provide a response and",
    "start": "669740",
    "end": "676430"
  },
  {
    "text": "short-circuit the whole process and deliver a response immediately back to the end-user and another thing is you",
    "start": "676430",
    "end": "684110"
  },
  {
    "text": "can actually access request information from the response and this time this is can be quite useful if you need to look",
    "start": "684110",
    "end": "690920"
  },
  {
    "text": "at what the request was maybe a particular header that you need to see on the request or maybe an incoming",
    "start": "690920",
    "end": "696950"
  },
  {
    "text": "lamda edge request function sets a particular cookie or or a header then on",
    "start": "696950",
    "end": "702590"
  },
  {
    "text": "the response you can actually read that it's a way of passing information from the request pipeline to the response pipeline so",
    "start": "702590",
    "end": "710509"
  },
  {
    "start": "710000",
    "end": "799000"
  },
  {
    "text": "just to compare both lambda lambda edge so where's lambda sports many different",
    "start": "710509",
    "end": "715519"
  },
  {
    "text": "programming languages lambda edge only supports no Jess it's the same node yes in lambda it's version 6.10 and you can",
    "start": "715519",
    "end": "723079"
  },
  {
    "text": "still write your code just as you would normally do the only limitation is has to be no js' you can't write using",
    "start": "723079",
    "end": "729259"
  },
  {
    "text": "Python or the other languages as well the memory is limited to hundred twenty eight megabytes there's no way of",
    "start": "729259",
    "end": "734809"
  },
  {
    "text": "configuring that that's fixed 128 megabytes and also because the lambda",
    "start": "734809",
    "end": "740240"
  },
  {
    "text": "edge functions are inline and the requests they're not a synchronous they're very short timeouts so three",
    "start": "740240",
    "end": "748040"
  },
  {
    "text": "seconds maximum on an origin facing on one second maximum on a viewer facing event you compare that to five minutes",
    "start": "748040",
    "end": "755389"
  },
  {
    "text": "there's a big difference on lambda but but obviously you want your lambda edge functions to be very short and duration",
    "start": "755389",
    "end": "762079"
  },
  {
    "text": "because you don't want people are waiting for that response the end user deployment size is a lot smaller so you",
    "start": "762079",
    "end": "768860"
  },
  {
    "text": "can still include libraries etc but they need to be more lightweight and smaller",
    "start": "768860",
    "end": "774009"
  },
  {
    "text": "it's a difference in pricing you can see that lambda edge is slightly more expensive up to you you're deploying",
    "start": "774009",
    "end": "779569"
  },
  {
    "text": "these across the global network and also the granularity of the measurement of the duration for for costing the",
    "start": "779569",
    "end": "787220"
  },
  {
    "text": "duration of the execution whereas with lambdas it's done to 100 the near 100 milliseconds lambda edges",
    "start": "787220",
    "end": "794720"
  },
  {
    "text": "at 50 milliseconds so on to some use cases so the first one is response",
    "start": "794720",
    "end": "801139"
  },
  {
    "start": "799000",
    "end": "856000"
  },
  {
    "text": "generation as I mentioned the ability that you can actually pull in content from other origins not only the ones",
    "start": "801139",
    "end": "807290"
  },
  {
    "text": "that are configured within CloudFront itself and then able to modify that responses you could do personalization",
    "start": "807290",
    "end": "813889"
  },
  {
    "text": "so for instance you could include it's often a lot of websites where they have your your name as your account and the",
    "start": "813889",
    "end": "819949"
  },
  {
    "text": "top right hand allows you to add that in before you deliver what is probably the majority of the page is exactly the same",
    "start": "819949",
    "end": "826279"
  },
  {
    "text": "for all users apart from their name at the top you can do results of multiple API calls if you think you've got a high",
    "start": "826279",
    "end": "832759"
  },
  {
    "text": "latency connection back to the user client combined multiple API calls into a",
    "start": "832759",
    "end": "839060"
  },
  {
    "text": "single response to improve the latency you can also did content type transformation so maybe for instance",
    "start": "839060",
    "end": "846080"
  },
  {
    "text": "you've got a an Origin that only responds with XML output and you want to support Jason you could actually",
    "start": "846080",
    "end": "852910"
  },
  {
    "text": "transform XML into Jason so you can also do HTTP redirects so these are gain this",
    "start": "852910",
    "end": "861140"
  },
  {
    "start": "856000",
    "end": "887000"
  },
  {
    "text": "is a response generation it's just an HTTP 300 redirect response so again you",
    "start": "861140",
    "end": "867860"
  },
  {
    "text": "can use it to support redirecting users to the most recent version of your",
    "start": "867860",
    "end": "873260"
  },
  {
    "text": "application being doing redirects from a domain without www back to to the www",
    "start": "873260",
    "end": "881480"
  },
  {
    "text": "site just works for better search engine optimization you could do URL rewriting",
    "start": "881480",
    "end": "888770"
  },
  {
    "start": "887000",
    "end": "931000"
  },
  {
    "text": "as well so for instance as an example maybe you've got a legacy Origin server",
    "start": "888770",
    "end": "894490"
  },
  {
    "text": "perhaps with ugly URLs you want to rewrite them and make them shorter you could do that with lambda edge you can",
    "start": "894490",
    "end": "902839"
  },
  {
    "text": "also adapt the content based on the client capabilities whether that's looking at the except type header or",
    "start": "902839",
    "end": "910600"
  },
  {
    "text": "understanding whether it's a mobile application and mobile app is probably not worth sending an image that's bigger",
    "start": "910600",
    "end": "917000"
  },
  {
    "text": "than the the mobile screen size for instance a way of being more cost effective in your delivery and lowering",
    "start": "917000",
    "end": "922580"
  },
  {
    "text": "the latency of delivering that content to users nor to use it for image cropping and resizing it also helps you",
    "start": "922580",
    "end": "932750"
  },
  {
    "start": "931000",
    "end": "963000"
  },
  {
    "text": "to follow security best practices so maybe you're always you doesn't add",
    "start": "932750",
    "end": "938000"
  },
  {
    "text": "these security headers of best practice you can use lambda edge to add those in",
    "start": "938000",
    "end": "944390"
  },
  {
    "text": "the response back to the to the end user you can also use it to remove",
    "start": "944390",
    "end": "949750"
  },
  {
    "text": "informational headers which are they don't add any value to the application and they may provide to a potential",
    "start": "949750",
    "end": "956149"
  },
  {
    "text": "attacker information about the implementation of your application as well you can also use it for",
    "start": "956149",
    "end": "964700"
  },
  {
    "start": "963000",
    "end": "990000"
  },
  {
    "text": "authorization so implementing capture for instance maybe you want you've got",
    "start": "964700",
    "end": "970160"
  },
  {
    "text": "your own bespoke authorization scheme that you want to implement you can implement that in lambda edge you can",
    "start": "970160",
    "end": "978050"
  },
  {
    "text": "provide authentication or authorization perhaps when the origin doesn't provide that and finally you can use it for pay",
    "start": "978050",
    "end": "985550"
  },
  {
    "text": "pay per view and paywall integration as well and finally for another use case",
    "start": "985550",
    "end": "992770"
  },
  {
    "start": "990000",
    "end": "1034000"
  },
  {
    "text": "doing a/b testing so this would be a case where you have a theory about what",
    "start": "992770",
    "end": "999740"
  },
  {
    "text": "you what changes you want to make to your application but perhaps you haven't got any evidence on which one would be the best option",
    "start": "999740",
    "end": "1005650"
  },
  {
    "text": "a B testing allows you to send that that particular version to a proportion of your users and then tests the results",
    "start": "1005650",
    "end": "1013660"
  },
  {
    "text": "how well do they respond to that new version and then make a decision based on your findings so rather than having a",
    "start": "1013660",
    "end": "1020589"
  },
  {
    "text": "theory and sending it to everybody up you know making change your origin code or sending out to everyone you could",
    "start": "1020589",
    "end": "1027970"
  },
  {
    "text": "implement it and send it only to a proportion using lambda edge so on to",
    "start": "1027970",
    "end": "1035650"
  },
  {
    "start": "1034000",
    "end": "1385000"
  },
  {
    "text": "demo time I just got to Google quick switches of screens",
    "start": "1035650",
    "end": "1041428"
  },
  {
    "text": "so the lambda edge sorry well it's a question so I will show you it's gonna",
    "start": "1054260",
    "end": "1064620"
  },
  {
    "text": "be very confusing yes there is one thing I'm going to show you I'm just going to switch if I can switch to sharing the",
    "start": "1064620",
    "end": "1071820"
  },
  {
    "text": "easier to follow cool so I will just go",
    "start": "1071820",
    "end": "1077970"
  },
  {
    "text": "to just go I'll get on to that point one moment just to just to show you the",
    "start": "1077970",
    "end": "1083070"
  },
  {
    "text": "integration within the CloudFront console hit so here I've got a distribution a cloud for distribution if",
    "start": "1083070",
    "end": "1088950"
  },
  {
    "text": "I go to the the behavior so the lambda edge functions are attached to the behaviors so just to explain a behavior",
    "start": "1088950",
    "end": "1095760"
  },
  {
    "text": "of in CloudFront is a part of a configuration so when a request comes in",
    "start": "1095760",
    "end": "1102770"
  },
  {
    "text": "CloudFront will look through this ordered list of cache behaviors and looking for a path pattern that matches",
    "start": "1102770",
    "end": "1108960"
  },
  {
    "text": "the incoming requests and then we'll use the rest of that configuration within that behavior to apply to that",
    "start": "1108960",
    "end": "1115500"
  },
  {
    "text": "particular request so if I go to this top one here and click on there you'll",
    "start": "1115500",
    "end": "1121140"
  },
  {
    "text": "see at the bottom of the configuration this is where you append your lambda edge functions so you can apply the",
    "start": "1121140",
    "end": "1128669"
  },
  {
    "text": "different event types here and then you provide a AR n to the lambda function",
    "start": "1128669",
    "end": "1135150"
  },
  {
    "text": "one thing to note is that the lambda function is it's always a version of the lambda function not just the lambda",
    "start": "1135150",
    "end": "1140370"
  },
  {
    "text": "function in general an e an easier way to do that is actually R in the lambda function itself you can attach",
    "start": "1140370",
    "end": "1149210"
  },
  {
    "text": "I need to go to the particular a specific version which I haven't done that one and then you should see here",
    "start": "1151920",
    "end": "1163230"
  },
  {
    "text": "the triggers should be here I selected the correct version yeah so there the",
    "start": "1163230",
    "end": "1170580"
  },
  {
    "text": "key thing is your you're attaching a particular version of a lambda function to the clown font trigger and one other",
    "start": "1170580",
    "end": "1181320"
  },
  {
    "text": "thing you would notice also if you see here in the list there are some with",
    "start": "1181320",
    "end": "1186420"
  },
  {
    "text": "replica at the end so what cloud lambda H does is when you deploy a lambda",
    "start": "1186420",
    "end": "1192090"
  },
  {
    "text": "function and attach it to a cloud for distribution lambda edge will replicate that function to all the regions a",
    "start": "1192090",
    "end": "1199110"
  },
  {
    "text": "diverse regions globally so this means that the let the clown phone itself can",
    "start": "1199110",
    "end": "1204210"
  },
  {
    "text": "use the local function to execute to",
    "start": "1204210",
    "end": "1209250"
  },
  {
    "text": "your notice that you'll get replicas appearing in your lambda you can't execute them because they are tied to",
    "start": "1209250",
    "end": "1215580"
  },
  {
    "text": "the source lambda function and the other thing is when you're writing lambda functions you write them in USD s-- one",
    "start": "1215580",
    "end": "1222320"
  },
  {
    "text": "region and it will replicate from there if you don't create it in that particular region you won't be able to attach it as a trigger to CloudFront a",
    "start": "1222320",
    "end": "1231860"
  },
  {
    "text": "good question is I don't know the official figure my experience is it's a",
    "start": "1234260",
    "end": "1240600"
  },
  {
    "text": "matter of seconds so it's pretty quick and also once you've once you've defined",
    "start": "1240600",
    "end": "1245640"
  },
  {
    "text": "the lambda function to CloudFront actually changing the the lambda",
    "start": "1245640",
    "end": "1251760"
  },
  {
    "text": "function itself is pretty quick as well so I've got a demo here the first demo",
    "start": "1251760",
    "end": "1259530"
  },
  {
    "text": "is just shows that the the object model",
    "start": "1259530",
    "end": "1265200"
  },
  {
    "text": "of lambda edge so this is just returning a JSON file this is Firefox formatting",
    "start": "1265200",
    "end": "1271050"
  },
  {
    "text": "this basic JSON file but it shows you what's available so I've written a this",
    "start": "1271050",
    "end": "1277770"
  },
  {
    "text": "function which is pulling out information from the systems so such as that it's it's running Linux as Amazon",
    "start": "1277770",
    "end": "1283380"
  },
  {
    "text": "Linux for instance a lot of this information you typically wouldn't use an ax lambda' edge but it is all there available it's",
    "start": "1283380",
    "end": "1289230"
  },
  {
    "text": "normal lambda you know it's exactly like lambda you've got a context information",
    "start": "1289230",
    "end": "1295050"
  },
  {
    "text": "which provides you more information but the key thing right here at the bottom is the event object so this is the",
    "start": "1295050",
    "end": "1300330"
  },
  {
    "text": "lambda event object and hit in here this is a request so it's only got the request object it provides you with the",
    "start": "1300330",
    "end": "1307200"
  },
  {
    "text": "information about the request so for instance the client IP address here and also the headers the method and the URI",
    "start": "1307200",
    "end": "1315510"
  },
  {
    "text": "now we're in the headers it looks a little bit complicated I've just shortened it down for a little bit so",
    "start": "1315510",
    "end": "1322230"
  },
  {
    "text": "basically what the headers object is is it's a map for all the headers now this",
    "start": "1322230",
    "end": "1327270"
  },
  {
    "text": "slight complication is HTTP is the headers are case insensitive but it",
    "start": "1327270",
    "end": "1334650"
  },
  {
    "text": "allows you to mix case within a header so the way of representing this to be able to you for you to find particular",
    "start": "1334650",
    "end": "1340860"
  },
  {
    "text": "headers as what we're using here is it's a map so it's a map of all the lowercase headers found in that request and inside",
    "start": "1340860",
    "end": "1348030"
  },
  {
    "text": "you have an array of all those edges because many of the MIDI headers we've been HTTP kind of appear multiple times",
    "start": "1348030",
    "end": "1353850"
  },
  {
    "text": "and a request or a response and then inside an item of that array there's a",
    "start": "1353850",
    "end": "1360720"
  },
  {
    "text": "key in a value the key actually represents the actual head of value had",
    "start": "1360720",
    "end": "1366900"
  },
  {
    "text": "a name there's that's represented from the user agent including it's mixed case",
    "start": "1366900",
    "end": "1373830"
  },
  {
    "text": "and then you have the value so this example is just giving you a demonstration of what what the what data",
    "start": "1373830",
    "end": "1381120"
  },
  {
    "text": "is available in your lambda function now the next object next example is HTML",
    "start": "1381120",
    "end": "1388679"
  },
  {
    "start": "1385000",
    "end": "1410000"
  },
  {
    "text": "generation so this is effectively providing this similar sort of information again the event object but",
    "start": "1388679",
    "end": "1394830"
  },
  {
    "text": "this time it's generating it as HTML so you can obviously write HTML it's a lambda function you're returning string",
    "start": "1394830",
    "end": "1401160"
  },
  {
    "text": "you're writing it into the body object of your response object within lambda",
    "start": "1401160",
    "end": "1408770"
  },
  {
    "text": "now the next one is pretty URL rewrite so what this is doing and I'll show you",
    "start": "1409980",
    "end": "1415649"
  },
  {
    "start": "1410000",
    "end": "1583000"
  },
  {
    "text": "the code I should have showed you the code for the object model as well so this is the object the code for the",
    "start": "1415649",
    "end": "1421380"
  },
  {
    "text": "object model so a lot of this is just generating the the JSON object pulling out information from the no GS",
    "start": "1421380",
    "end": "1428880"
  },
  {
    "text": "OS objects and system objects and then finally adding the event object right at",
    "start": "1428880",
    "end": "1434789"
  },
  {
    "text": "the bottom once you've got the the body",
    "start": "1434789",
    "end": "1439860"
  },
  {
    "text": "of the objects are then constructing a response which provides the status in this case there's two hundred okay that",
    "start": "1439860",
    "end": "1446130"
  },
  {
    "text": "the HTTP version I'm setting the version to be the same as a request version and then also the headers that I'm setting",
    "start": "1446130",
    "end": "1451679"
  },
  {
    "text": "so here I'm setting the content type to be Jason for as example and the last",
    "start": "1451679",
    "end": "1457169"
  },
  {
    "text": "modified is is now as it generates HTML",
    "start": "1457169",
    "end": "1465510"
  },
  {
    "text": "generation is very similar as generating the the body again as it's a text string",
    "start": "1465510",
    "end": "1472620"
  },
  {
    "text": "in this example now the pretty you are",
    "start": "1472620",
    "end": "1478950"
  },
  {
    "text": "rewrite what we're doing here I'll just show you an example so I click on that",
    "start": "1478950",
    "end": "1484409"
  },
  {
    "text": "it's effectively loading in the home page so what it's doing is lambda is coming in and it's rewriting the request",
    "start": "1484409",
    "end": "1491070"
  },
  {
    "text": "coming in and changing it to index index dot HTML so I could put anything in here",
    "start": "1491070",
    "end": "1498260"
  },
  {
    "text": "it always just return the same page so it's really it's rewriting the URL is it",
    "start": "1498260",
    "end": "1503970"
  },
  {
    "text": "passing through to index date dot HTML so in this example what what the example",
    "start": "1503970",
    "end": "1511139"
  },
  {
    "text": "here is using a regular expression it's checking to see if I'm specifying a dot HTML if I've specified dot HTML it's",
    "start": "1511139",
    "end": "1518760"
  },
  {
    "text": "letting that pass through but if I don't is then rewriting any other URL that it",
    "start": "1518760",
    "end": "1524070"
  },
  {
    "text": "sees to index to HTML and then it's using a 301 redirect and then the next",
    "start": "1524070",
    "end": "1533399"
  },
  {
    "text": "example so we've got three two examples here for web P supports of web P as an",
    "start": "1533399",
    "end": "1539159"
  },
  {
    "text": "image format that is supported by some browser types not browser types it's relatively modern",
    "start": "1539159",
    "end": "1547169"
  },
  {
    "text": "image format there's benefits of web peers that you can compress the web P",
    "start": "1547169",
    "end": "1553379"
  },
  {
    "text": "image more than a say a JPEG for instance and get a smaller file size has",
    "start": "1553379",
    "end": "1560190"
  },
  {
    "text": "the benefit a to download the objects quicker but it also saves you money if you're using CloudFront you're paying by",
    "start": "1560190",
    "end": "1566009"
  },
  {
    "text": "the gigabytes if you can compress those images you're saving money off your CloudFront bill but the challenge is",
    "start": "1566009",
    "end": "1572489"
  },
  {
    "text": "that not all browsers support it so we've got two examples here to show you two different methods the first first",
    "start": "1572489",
    "end": "1578879"
  },
  {
    "text": "one is to show there so I'm using",
    "start": "1578879",
    "end": "1584369"
  },
  {
    "start": "1583000",
    "end": "1912000"
  },
  {
    "text": "Firefox here I'm clicking on that example it's it's returning a PNG",
    "start": "1584369",
    "end": "1589649"
  },
  {
    "text": "because it because Firefox hasn't sought web P and if I go to here this is on",
    "start": "1589649",
    "end": "1596729"
  },
  {
    "text": "Chrome and I go to the same object now it's returning a web P image so I'll",
    "start": "1596729",
    "end": "1603869"
  },
  {
    "text": "show you how that's being done in this particular example so I said there's two examples here so I showed the first one",
    "start": "1603869",
    "end": "1610309"
  },
  {
    "text": "so what this is doing is looking at in this example is looking at the user agent string so it's using a library",
    "start": "1610309",
    "end": "1618269"
  },
  {
    "text": "here could user agent and it's extracting information out that user agent string now I could pass that user",
    "start": "1618269",
    "end": "1623399"
  },
  {
    "text": "agent string all the way to my origin unless it extract the information about",
    "start": "1623399",
    "end": "1628409"
  },
  {
    "text": "whether it supports web P or not the problem with that is when you forward that in cloud front because the response",
    "start": "1628409",
    "end": "1634950"
  },
  {
    "text": "could vary depending on your user agent value the value itself is added to the",
    "start": "1634950",
    "end": "1641759"
  },
  {
    "text": "cache key which means that for every single slightly different user agent string there'll be a different cache",
    "start": "1641759",
    "end": "1647609"
  },
  {
    "text": "entry for that because CloudFront doesn't know and assumes that response will vary depending on that but we're",
    "start": "1647609",
    "end": "1654299"
  },
  {
    "text": "only interested in whether it supports web P or not so in this example we're using lambda edge to extract the",
    "start": "1654299",
    "end": "1659940"
  },
  {
    "text": "information at the edge and then create a new header detected basically showing",
    "start": "1659940",
    "end": "1666690"
  },
  {
    "text": "whether web P is supported you know the advantage of that is there's only two values of whether this browser supports",
    "start": "1666690",
    "end": "1673049"
  },
  {
    "text": "web P C but yes we support it or no we don't which means that there's only going to - values in the cash key which helps to",
    "start": "1673049",
    "end": "1680880"
  },
  {
    "text": "keep your cash hit ratio as high as possible it reduces the load on your origin it keeps the latency of response",
    "start": "1680880",
    "end": "1687540"
  },
  {
    "text": "as high as possible users so it saves money and reduces latency by just",
    "start": "1687540",
    "end": "1693750"
  },
  {
    "text": "extracting the information from your user agent string and passing that through back to your origin you could",
    "start": "1693750",
    "end": "1700200"
  },
  {
    "text": "think about using this forever other things you maybe want to be looking yeah it's the use of a smart TV I want to",
    "start": "1700200",
    "end": "1705720"
  },
  {
    "text": "only want that information I can send that back to the origin or I want to know a particular brand of smart TV so although CloudFront supports the",
    "start": "1705720",
    "end": "1711990"
  },
  {
    "text": "detection of a smart TV it doesn't detect the brand maybe you need to know that so you can send that back so this",
    "start": "1711990",
    "end": "1719280"
  },
  {
    "text": "is the example is using that library to extract the information of the the browser family the browser type where",
    "start": "1719280",
    "end": "1724860"
  },
  {
    "text": "it's Chrome or Firefox etc and also the major version with this is a map of the",
    "start": "1724860",
    "end": "1732570"
  },
  {
    "text": "code of working out whether these browsers of these particular versions support web P and then if it does it's",
    "start": "1732570",
    "end": "1738870"
  },
  {
    "text": "passing a new web P support header in the requests whether it's yes or no back",
    "start": "1738870",
    "end": "1744600"
  },
  {
    "text": "to the origin and the origin can then return a PNG if it's not supported or",
    "start": "1744600",
    "end": "1749760"
  },
  {
    "text": "web PV is supported they will be cached as two separate entries because the cache key web piece of what will be",
    "start": "1749760",
    "end": "1756630"
  },
  {
    "text": "added yes or no between the two and then for future requests again that the will select whether its web peel or not is",
    "start": "1756630",
    "end": "1763560"
  },
  {
    "text": "supported but then the two entries are cached in the up in the cloud font cache to be served straight away so that's one",
    "start": "1763560",
    "end": "1771390"
  },
  {
    "text": "example of doing it I think it's great if you want to look at user agents and extract information there is another way",
    "start": "1771390",
    "end": "1777630"
  },
  {
    "text": "of doing it so this is just to show there are different ways obviously there's multiple ways of doing things the advantage of because it's no GS is",
    "start": "1777630",
    "end": "1784350"
  },
  {
    "text": "that you can write high-level language to build this you're not restricted to it's like a simple language you can",
    "start": "1784350",
    "end": "1791670"
  },
  {
    "text": "write a very complex logic another one which is actually I would say as a simple way of doing it is that there's",
    "start": "1791670",
    "end": "1799380"
  },
  {
    "text": "such a thing as a just checking I'm in the right one let's check yeah",
    "start": "1799380",
    "end": "1805750"
  },
  {
    "text": "this is actually returning the images so we're actually in the object and the",
    "start": "1805750",
    "end": "1811150"
  },
  {
    "text": "origin was requests had function were then looking at the web P supported",
    "start": "1811150",
    "end": "1817780"
  },
  {
    "text": "header yes or no and then rewriting the URL back to s3 to return either a PNG",
    "start": "1817780",
    "end": "1824740"
  },
  {
    "text": "image or web P image so you could do that in the origin if you've got an",
    "start": "1824740",
    "end": "1830320"
  },
  {
    "text": "Origin that's generating images but here we're actually using two lambda functions one to detect web P pass up",
    "start": "1830320",
    "end": "1838090"
  },
  {
    "text": "through goes through the cache and then on the other side were then running another lambda function to pick up that",
    "start": "1838090",
    "end": "1843790"
  },
  {
    "text": "header and then rewrite the URL to pass it to the particular object within the s3 bucket so the other option sorry I've",
    "start": "1843790",
    "end": "1853540"
  },
  {
    "text": "got this computer so this object here we're actually gonna use the accept header so most user agents will provide",
    "start": "1853540",
    "end": "1860410"
  },
  {
    "text": "an accept ender header which is basically saying to the server these are the formats that I can support and",
    "start": "1860410",
    "end": "1865780"
  },
  {
    "text": "there'll be all sorts of the HTML jason jpg and a lot of the web web p",
    "start": "1865780",
    "end": "1870940"
  },
  {
    "text": "supporting browsers will also tell the server i will support web p as well so",
    "start": "1870940",
    "end": "1876310"
  },
  {
    "text": "in this example we're not looking at the user agent string we just look to see whether web p is accepted and if web P R",
    "start": "1876310",
    "end": "1882370"
  },
  {
    "text": "is accepted we'll just rewrite the URL so we'll point rewrite the URL to either",
    "start": "1882370",
    "end": "1889300"
  },
  {
    "text": "a PNG or jpg n but this has been done in the accept header now I would say in",
    "start": "1889300",
    "end": "1895690"
  },
  {
    "text": "probably in this example you could just use web P but looking at the user agent string that's another way of doing it",
    "start": "1895690",
    "end": "1900940"
  },
  {
    "text": "and maybe that's used for other functionality as well but there to perform the same functionality but",
    "start": "1900940",
    "end": "1906910"
  },
  {
    "text": "there's two ways of approaching it",
    "start": "1906910",
    "end": "1910110"
  },
  {
    "start": "1912000",
    "end": "1920000"
  },
  {
    "text": "so if I look at the example here this is the accept header one so very similar this is returning a PNG image and if I",
    "start": "1912280",
    "end": "1920290"
  },
  {
    "start": "1920000",
    "end": "1947000"
  },
  {
    "text": "go to Chrome which supports WebP II this returns the web peon if you notice it",
    "start": "1920290",
    "end": "1927790"
  },
  {
    "text": "still says what PNG at the top because up T we're not rewriting and we're not redirecting the URL we just rewrite in",
    "start": "1927790",
    "end": "1933790"
  },
  {
    "text": "the URL within the edge to point it to a different image in the origin so the",
    "start": "1933790",
    "end": "1942970"
  },
  {
    "text": "next one we've got the HTTP redirect that if he's always quite quickly I was",
    "start": "1942970",
    "end": "1948430"
  },
  {
    "start": "1947000",
    "end": "1995000"
  },
  {
    "text": "pointing this you can see at the bottom it's still within this web web site",
    "start": "1948430",
    "end": "1953670"
  },
  {
    "text": "what's happening is lambda age when it receives that request is then redirecting to a completely different",
    "start": "1953670",
    "end": "1959200"
  },
  {
    "text": "web page hosted on a completely different website in this case it's a",
    "start": "1959200",
    "end": "1964450"
  },
  {
    "text": "DRS documentation if I go to the example",
    "start": "1964450",
    "end": "1971220"
  },
  {
    "text": "HTTP redirect this is very simple in the sense that all it's doing it's it's it's not really looking at the request",
    "start": "1971220",
    "end": "1977440"
  },
  {
    "text": "particularly it's just returning a response saying 302 redirect and then",
    "start": "1977440",
    "end": "1983170"
  },
  {
    "text": "providing the like the the location header which is tells the browser where",
    "start": "1983170",
    "end": "1988180"
  },
  {
    "text": "to go where to follow to so the next one",
    "start": "1988180",
    "end": "1996100"
  },
  {
    "start": "1995000",
    "end": "2071000"
  },
  {
    "text": "is secure header so I mentioned this before in the in the use cases for",
    "start": "1996100",
    "end": "2001350"
  },
  {
    "text": "adding extra headers so one here that we adding headers to this topic this is a",
    "start": "2001350",
    "end": "2008910"
  },
  {
    "text": "screenshot showing before the headers looking at a website which is not adding",
    "start": "2008910",
    "end": "2014430"
  },
  {
    "text": "these particular security headers you can see here such a strict Transport",
    "start": "2014430",
    "end": "2019800"
  },
  {
    "text": "Security X frame options etc and then at the bottom we're actually using lambda",
    "start": "2019800",
    "end": "2025530"
  },
  {
    "text": "edge to add these and then you see that the rating has improved security wise so",
    "start": "2025530",
    "end": "2032580"
  },
  {
    "text": "going to the example here this is the lambda edge function this could this",
    "start": "2032580",
    "end": "2037800"
  },
  {
    "text": "could be implemented either at the request or the response header typically you would do this at the response so",
    "start": "2037800",
    "end": "2044310"
  },
  {
    "text": "coming back for the origin origin facing with response means that it will then be get it will then get",
    "start": "2044310",
    "end": "2049830"
  },
  {
    "text": "cash so it's only been requested or it's only been executed whenever there's a cache miss in here quite simply we're",
    "start": "2049830",
    "end": "2056608"
  },
  {
    "text": "just adding these headers to the response I'm returning the response",
    "start": "2056609",
    "end": "2062040"
  },
  {
    "text": "which will get cached and then returned to the end-users next one is a simple",
    "start": "2062040",
    "end": "2072810"
  },
  {
    "start": "2071000",
    "end": "2104000"
  },
  {
    "text": "remote call so lambda edge has got the ability to make remote calls there's two examples here to show you that you can",
    "start": "2072810",
    "end": "2079349"
  },
  {
    "text": "make simple HTTP protocol calls to anything that's publicly available but",
    "start": "2079349",
    "end": "2084750"
  },
  {
    "text": "you can also make calls to a SS services so as long as you've given correct",
    "start": "2084750",
    "end": "2090990"
  },
  {
    "text": "permissions in the I am role that you associate with lambda function lambda at",
    "start": "2090990",
    "end": "2096240"
  },
  {
    "text": "edge function it can then call back to in this case dynamodb and make halt to",
    "start": "2096240",
    "end": "2101310"
  },
  {
    "text": "that dynamodb table so the simple remote call I'll show you the code what what it",
    "start": "2101310",
    "end": "2107250"
  },
  {
    "start": "2104000",
    "end": "2151000"
  },
  {
    "text": "does it's it's downloading a template HTML file from another site in this case",
    "start": "2107250",
    "end": "2115080"
  },
  {
    "text": "it is CloudFront and in fact it so it's downloading CloudFront from itself the",
    "start": "2115080",
    "end": "2121530"
  },
  {
    "text": "actual content is stored in s3 bucket the advantage of doing it over Cloud frontiers of c-clown for will cache it",
    "start": "2121530",
    "end": "2127830"
  },
  {
    "text": "locally closely to the lambda edge function and then it's looking for",
    "start": "2127830",
    "end": "2133440"
  },
  {
    "text": "username template and replacing that with the username that it finds within the request this is a simple example so",
    "start": "2133440",
    "end": "2139650"
  },
  {
    "text": "the request is coming from the headers of the request simple example but it",
    "start": "2139650",
    "end": "2144930"
  },
  {
    "text": "shows is taking that information and bedding it into the template and then returning the response so in this",
    "start": "2144930",
    "end": "2151020"
  },
  {
    "start": "2151000",
    "end": "2159000"
  },
  {
    "text": "example here I click on that now I'm not logged in to it just returns welcome guest as a simple example another",
    "start": "2151020",
    "end": "2159420"
  },
  {
    "start": "2159000",
    "end": "2279000"
  },
  {
    "text": "example is dynamodb",
    "start": "2159420",
    "end": "2162890"
  },
  {
    "text": "so here I am no that's what want so here",
    "start": "2164690",
    "end": "2172530"
  },
  {
    "text": "I'm using the DynamoDB using the age of SD SDK and I'm calling using the",
    "start": "2172530",
    "end": "2179430"
  },
  {
    "text": "dynamodb document client so my I enrolled given me permissions to call",
    "start": "2179430",
    "end": "2185610"
  },
  {
    "text": "functions of call against the dynamodb API against this particular type DynamoDB table at the top as you can see",
    "start": "2185610",
    "end": "2193130"
  },
  {
    "text": "and then what I'm doing here is I I'm then making a call against our DynamoDB",
    "start": "2193130",
    "end": "2201030"
  },
  {
    "text": "I'm using a bid at the end of the URL so there's a bit of text at the end of the URL that I'm taking that and I'm making",
    "start": "2201030",
    "end": "2207690"
  },
  {
    "text": "a get request against the dynamodb table and returning the response and we don't",
    "start": "2207690",
    "end": "2213210"
  },
  {
    "text": "fire that return not found so I click on that there's no writing no item found",
    "start": "2213210",
    "end": "2222090"
  },
  {
    "text": "because I added that I've got two items in my dynamo deep 8db table so the first",
    "start": "2222090",
    "end": "2228210"
  },
  {
    "text": "one I've got if I go to Vic and how many people know about Vic and bob says",
    "start": "2228210",
    "end": "2233810"
  },
  {
    "text": "return the information about that comedy group as an example return that information it's just written as Jason",
    "start": "2233810",
    "end": "2240150"
  },
  {
    "text": "but ever go to another one so French and",
    "start": "2240150",
    "end": "2245910"
  },
  {
    "text": "Saunders again it's returning that making the call back to dynamodb if I go to something else doesn't exist it",
    "start": "2245910",
    "end": "2252300"
  },
  {
    "text": "doesn't return me just no item found so that's making a call from lambda edge to the dynamodb table so you see this is",
    "start": "2252300",
    "end": "2259290"
  },
  {
    "text": "quite a useful thing if you're doing something like a paywall for instance you want to check is that user has the",
    "start": "2259290",
    "end": "2264930"
  },
  {
    "text": "permission to access that content that's already in my cloud front cache I can make a call to check and then let that",
    "start": "2264930",
    "end": "2270630"
  },
  {
    "text": "response return or give it a for a three not not authorized if not",
    "start": "2270630",
    "end": "2277250"
  },
  {
    "start": "2279000",
    "end": "2366000"
  },
  {
    "text": "so all of those so last demo I think we're doing okay for time so this one is",
    "start": "2279080",
    "end": "2284270"
  },
  {
    "text": "for a be testing so I'll just show you the demo first so this is a very simple video player and the idea around this",
    "start": "2284270",
    "end": "2291620"
  },
  {
    "text": "demo is you've got a video website you've got a section of videos at the",
    "start": "2291620",
    "end": "2297050"
  },
  {
    "text": "bottom that are recommended for you so you're making recommendations to this user and the theory is what's the",
    "start": "2297050",
    "end": "2303500"
  },
  {
    "text": "optimum number of videos to show if I show too many I won't find it yeah they won't find it interesting and I show too",
    "start": "2303500",
    "end": "2309710"
  },
  {
    "text": "many might it might be too complicated and they still don't engage with that video content so in this example we're",
    "start": "2309710",
    "end": "2317150"
  },
  {
    "text": "trying to decide of whether nine videos is the right amount or three videos there's a right mount the way that we've",
    "start": "2317150",
    "end": "2324620"
  },
  {
    "text": "implemented this within lambda edge is checking for a particular cookie value if that cookie doesn't exist it's going",
    "start": "2324620",
    "end": "2332000"
  },
  {
    "text": "to randomly choose one either three or nine if the cookie is available then it will rewrite URL to the three or to the",
    "start": "2332000",
    "end": "2339290"
  },
  {
    "text": "nine so you've got control means that user wants that cookie set they will always see three or nine videos",
    "start": "2339290",
    "end": "2346220"
  },
  {
    "text": "whichever one's chosen for them they won't have this randomness all the time you can also use that randomness within",
    "start": "2346220",
    "end": "2351470"
  },
  {
    "text": "lambda a to actually set the particular cookie so a new user comes they don't have a cookie you can set that cookie value and then from then on they will",
    "start": "2351470",
    "end": "2357680"
  },
  {
    "text": "always get that particular version so if I request this the cookies not set so I",
    "start": "2357680",
    "end": "2363230"
  },
  {
    "text": "keep getting a different version each time in the example if I now set the",
    "start": "2363230",
    "end": "2368960"
  },
  {
    "start": "2366000",
    "end": "2434000"
  },
  {
    "text": "cookie so this is some code just doing in the in the browser so JavaScript locally is just going to set a cookie",
    "start": "2368960",
    "end": "2374320"
  },
  {
    "text": "typically you would probably use your website to actually set the cookie or you could use lambda edge to set them to that particular version now once I've",
    "start": "2374320",
    "end": "2382340"
  },
  {
    "text": "set that they now hopefully should always get three each time so I'm now",
    "start": "2382340",
    "end": "2389360"
  },
  {
    "text": "been fixed to that particular version obviously go buy her clear the cookie or cassette the next one I get set to that",
    "start": "2389360",
    "end": "2394850"
  },
  {
    "text": "by doing this you can set the user's send a proportion of users to that particular version and then test their",
    "start": "2394850",
    "end": "2400790"
  },
  {
    "text": "engagement do they click on more videos do they stay engage with the website longer do they buy more videos too they",
    "start": "2400790",
    "end": "2407210"
  },
  {
    "text": "stay subscribe to the video service make that choice based on data rather than just",
    "start": "2407210",
    "end": "2412369"
  },
  {
    "text": "a guess and you only send it to only effectively experiment with a proportion of your users and then by using that",
    "start": "2412369",
    "end": "2418999"
  },
  {
    "text": "dating analyzing data you can feed that back and then make the final permanent change for users sorry yes since I work",
    "start": "2418999",
    "end": "2432470"
  },
  {
    "text": "out where I'm going ha ha so his example so the code itself is pretty simple",
    "start": "2432470",
    "end": "2438200"
  },
  {
    "start": "2434000",
    "end": "2502000"
  },
  {
    "text": "effectively what it's got it's got the two versions so you've got video player a and video player B here on the origin",
    "start": "2438200",
    "end": "2446109"
  },
  {
    "text": "so when it comes into the the requests it's looking to see if the if there are cookies and if there cookies are",
    "start": "2446109",
    "end": "2452630"
  },
  {
    "text": "available it's then look and see is the cookie cookie a or is it cookie B and",
    "start": "2452630",
    "end": "2458779"
  },
  {
    "text": "whether the cookies are set with a a or B set then that that's the one it will use but there if there isn't the cookie",
    "start": "2458779",
    "end": "2465650"
  },
  {
    "text": "then it's going to toss a coin and decide whether to give version a or version B to the end user and then once",
    "start": "2465650",
    "end": "2473869"
  },
  {
    "text": "that's returned so that's going to rewrite the URL back to the origin and serve that particular version okay",
    "start": "2473869",
    "end": "2486578"
  },
  {
    "text": "so than the demo so the quick summary here is lambda H so the feature is",
    "start": "2500910",
    "end": "2506849"
  },
  {
    "start": "2502000",
    "end": "2554000"
  },
  {
    "text": "currently available or for header manipulation for you doing ure rights and also for a response generation and",
    "start": "2506849",
    "end": "2513869"
  },
  {
    "text": "the key benefits I think for lambda edge is that you could bring your own code you don't need to write a specific you",
    "start": "2513869",
    "end": "2519690"
  },
  {
    "text": "know domain-specific language for edge compute its standard nodejs so you could",
    "start": "2519690",
    "end": "2525720"
  },
  {
    "text": "have code that you've written maybe that's running in the browser running in your origin service and no GS",
    "start": "2525720",
    "end": "2532200"
  },
  {
    "text": "service you can now use that code and run it at the edge as well with very little changes they're familiar",
    "start": "2532200",
    "end": "2539609"
  },
  {
    "text": "programming model so the actual event object is it's a JavaScript object in",
    "start": "2539609",
    "end": "2544710"
  },
  {
    "text": "this case allows you to extract information from the request rewrites the response generate the response so",
    "start": "2544710",
    "end": "2554549"
  },
  {
    "start": "2554000",
    "end": "2807000"
  },
  {
    "text": "that's my presentation Ximena got questions I think we've got a few minutes",
    "start": "2554549",
    "end": "2559880"
  },
  {
    "text": "yes so the question was yes so the question was that you can now make calls",
    "start": "2562890",
    "end": "2568630"
  },
  {
    "text": "out from from lambda H so during the preview yeah you you weren't able to",
    "start": "2568630",
    "end": "2574390"
  },
  {
    "text": "make any external calls now you're able to make external calls and these calls can be anything on the internet as long",
    "start": "2574390",
    "end": "2580540"
  },
  {
    "text": "as publicly accessible and or ADA where services they're exactly same it's a public endpoint to call to",
    "start": "2580540",
    "end": "2587550"
  },
  {
    "text": "no so the question is when you're replicating the functions do they restrict to particular regions so the",
    "start": "2601320",
    "end": "2608770"
  },
  {
    "text": "quite the answer is no at the moment they replicate to all what we call public regions so that would include all",
    "start": "2608770",
    "end": "2615490"
  },
  {
    "text": "regions except gov cloud in the US and the Chinese regions but they replicate across all public regions we've got",
    "start": "2615490",
    "end": "2622510"
  },
  {
    "text": "within AWS the as in the I am rot I am",
    "start": "2622510",
    "end": "2630490"
  },
  {
    "text": "wrong yes yes so the I am wrong I am roles are closed is a global globally",
    "start": "2630490",
    "end": "2636310"
  },
  {
    "text": "available anyway so yes but they do get replicated with the same permissions so",
    "start": "2636310",
    "end": "2648700"
  },
  {
    "text": "the question is can you change the permissions for specific replicas no it's exactly the same",
    "start": "2648700",
    "end": "2654580"
  },
  {
    "text": "I am role that you apply against applied across all replicas yes they in the",
    "start": "2654580",
    "end": "2663100"
  },
  {
    "text": "context information you can see the lamp that the region that it's running in so you can view that and you can make",
    "start": "2663100",
    "end": "2669070"
  },
  {
    "text": "changes so for instance my example for the DynamoDB it was calling to a single dynamo B region you may want to reduce",
    "start": "2669070",
    "end": "2676300"
  },
  {
    "text": "latency further and actually replicate that table across multiple regions and then it's good for your lambda for",
    "start": "2676300",
    "end": "2683350"
  },
  {
    "text": "lambda edge function to be aware where the nearest region is and then call directly to that that's another option",
    "start": "2683350",
    "end": "2690480"
  },
  {
    "text": "[Music] okay so the question is if you get ten requests and they're all a cache miss",
    "start": "2701740",
    "end": "2707959"
  },
  {
    "text": "that do they does it make ten requests back to the origin so so it will clap",
    "start": "2707959",
    "end": "2714019"
  },
  {
    "text": "what we call collapse requests so if ten requests come in to an age location at",
    "start": "2714019",
    "end": "2719899"
  },
  {
    "text": "about the same time they will get collapsed into a single request back to the origin another thing to think about",
    "start": "2719899",
    "end": "2726169"
  },
  {
    "text": "we've also got Regional Education which sit in between the Asia locations and the origin and they will further request",
    "start": "2726169",
    "end": "2733189"
  },
  {
    "text": "claps or requests there are I think 11 or 12 regional Asia later caches at the",
    "start": "2733189",
    "end": "2738859"
  },
  {
    "text": "moment so that means that you could have 11 or 12 requests come in because each each regional educational make its own",
    "start": "2738859",
    "end": "2746389"
  },
  {
    "text": "request back to the origin but it's also greatly collapsed and reduced as it goes back to the origin",
    "start": "2746389",
    "end": "2753278"
  },
  {
    "text": "the risk so the question is when it collapses requests does it just the",
    "start": "2761220",
    "end": "2766380"
  },
  {
    "text": "response requests get executed 10 times so if it's an origin request it will",
    "start": "2766380",
    "end": "2773790"
  },
  {
    "text": "only get requested once and so it'll only get executed once but if you did a",
    "start": "2773790",
    "end": "2778880"
  },
  {
    "text": "viewer request then it would get executed for each viewer okay",
    "start": "2778880",
    "end": "2789660"
  },
  {
    "text": "go um I've got to rush off so if anybody got any more questions my colleague Jake's here at the front if you've got",
    "start": "2789660",
    "end": "2795900"
  },
  {
    "text": "any questions follow that with apologies I've got to rush for an aeroplane but thanks everyone for attending it's great",
    "start": "2795900",
    "end": "2802170"
  },
  {
    "text": "I think there's feedback forms going out it's great to hear back and get feedback from you thanks very much [Applause]",
    "start": "2802170",
    "end": "2808949"
  }
]