[
  {
    "text": "In this video, you’ll see how to seamlessly \nintegrate AWS Lambda with Amazon",
    "start": "0",
    "end": "3902"
  },
  {
    "text": "Managed Streaming for Kafka (Amazon MSK).",
    "start": "3902",
    "end": "6535"
  },
  {
    "text": "With this solution, you can use Amazon \nMSK as an event source to trigger an",
    "start": "7249",
    "end": "11108"
  },
  {
    "text": "AWS Lambda function that \nprocesses events from Kafka topics.",
    "start": "11108",
    "end": "14644"
  },
  {
    "text": "We’ll begin in the Amazon MSK console, \nwhere we already launched a cluster",
    "start": "16825",
    "end": "20499"
  },
  {
    "text": "with AWS Identity and Access \nManagement (IAM) authentication enabled.",
    "start": "20499",
    "end": "24490"
  },
  {
    "text": "Let’s view the client information we’ll need.",
    "start": "25461",
    "end": "27271"
  },
  {
    "text": "We’ll copy the bootstrap server private \nendpoint connector, which will allow us",
    "start": "28204",
    "end": "31626"
  },
  {
    "text": "to establish an initial connection to our cluster.",
    "start": "31626",
    "end": "33841"
  },
  {
    "text": "We’ll also copy the Amazon Resource \nName (ARN) of the Kafka cluster,",
    "start": "35707",
    "end": "39816"
  },
  {
    "text": "which we’ll use to create our access policy.",
    "start": "39816",
    "end": "41725"
  },
  {
    "text": "Now let’s navigate to the AWS Cloud9 \nIDE, which we’ll use to create our Kafka client.",
    "start": "42782",
    "end": "47995"
  },
  {
    "text": "First, we’ll connect to an Amazon Elastic\nCompute Cloud (Amazon EC2) instance",
    "start": "48976",
    "end": "53146"
  },
  {
    "text": "that already has Apache Kafka installed.",
    "start": "53146",
    "end": "55354"
  },
  {
    "text": "We’ll create a topic called exampletopic\nand pass it the bootstrap server",
    "start": "55849",
    "end": "59307"
  },
  {
    "text": "connector that we copied earlier.",
    "start": "59307",
    "end": "60791"
  },
  {
    "text": "Now that the topic has been created,",
    "start": "61525",
    "end": "63185"
  },
  {
    "text": "let’s start our Kafka console producer \nusing the same bootstrap server connector.",
    "start": "63185",
    "end": "66908"
  },
  {
    "text": "Our Kafka console producer has been created.",
    "start": "67861",
    "end": "70047"
  },
  {
    "text": "Next, let’s navigate to the \nIAM Management Console.",
    "start": "70514",
    "end": "73168"
  },
  {
    "text": "We’ll create a new IAM policy so we can \ngive our Lambda function the necessary",
    "start": "75644",
    "end": "79261"
  },
  {
    "text": "permissions to access the Apache Kafka \nAPIs and the Amazon MSK cluster APIs.",
    "start": "79262",
    "end": "84186"
  },
  {
    "text": "Let’s configure this policy to allow the \nLambda function to access our Kafka",
    "start": "85071",
    "end": "88262"
  },
  {
    "text": "cluster operations, our cluster \ntopic, and our consumer groups.",
    "start": "88262",
    "end": "91517"
  },
  {
    "text": "Here, we have passed the ARN, specified the \ncluster, and specified exampletopic as the topic.",
    "start": "92517",
    "end": "97734"
  },
  {
    "text": "We’ll also specify the consumer group.",
    "start": "98287",
    "end": "100112"
  },
  {
    "text": "Let’s review and name the policy.",
    "start": "103084",
    "end": "104565"
  },
  {
    "text": "Now, we’ll create the policy.",
    "start": "109212",
    "end": "110591"
  },
  {
    "text": "The policy has been created.",
    "start": "111573",
    "end": "112935"
  },
  {
    "text": "Next, we’ll create the role \nfor the Lambda function.",
    "start": "113716",
    "end": "115872"
  },
  {
    "text": "We’ll use Lambda as our AWS service.",
    "start": "118000",
    "end": "120131"
  },
  {
    "text": "Next, we’ll add KafkaConsumerPolicy, \nwhich is the policy we just created.",
    "start": "122454",
    "end": "126393"
  },
  {
    "text": "We’ll also add an AWS managed policy \ncalled AWSLambdaMSKExecutionRole.",
    "start": "128573",
    "end": "133782"
  },
  {
    "text": "Now let’s name, review, and create the role.",
    "start": "138000",
    "end": "140075"
  },
  {
    "text": "The role has been created.",
    "start": "146915",
    "end": "148066"
  },
  {
    "text": "Next, we’ll create a Lambda function so we can \nuse Amazon MSK as an event trigger for Lambda.",
    "start": "151113",
    "end": "155735"
  },
  {
    "text": "We’ll author the function from scratch.",
    "start": "156668",
    "end": "158332"
  },
  {
    "text": "Let’s name the function.",
    "start": "159008",
    "end": "160000"
  },
  {
    "text": "For the runtime, we’ll select Node.js 12.x.",
    "start": "162409",
    "end": "165778"
  },
  {
    "text": "For the permissions, we will use the existing \nLambdaMSKConsumer role that we just created.",
    "start": "168835",
    "end": "173325"
  },
  {
    "text": "Let’s create the function.",
    "start": "180876",
    "end": "182000"
  },
  {
    "text": "Now that our function has been \nsuccessfully created, we can input our code.",
    "start": "184000",
    "end": "187172"
  },
  {
    "text": "We’ll replace the default code with a \nsimple script that logs all the messages",
    "start": "188133",
    "end": "191105"
  },
  {
    "text": "that we receive from our Amazon MSK cluster.",
    "start": "191105",
    "end": "193487"
  },
  {
    "text": "Let’s deploy our changes.",
    "start": "194411",
    "end": "195672"
  },
  {
    "text": "Next, let’s go to the Configuration tab \nand create an event source mapping",
    "start": "197092",
    "end": "200482"
  },
  {
    "text": "for our Lambda function.",
    "start": "200482",
    "end": "201627"
  },
  {
    "text": "We’ll add a trigger.",
    "start": "202589",
    "end": "203457"
  },
  {
    "text": "We’ll select MSK as our source.",
    "start": "205142",
    "end": "206893"
  },
  {
    "text": "We’ll select the cluster that we saw earlier.",
    "start": "212455",
    "end": "214287"
  },
  {
    "text": "We’ll use the defaults for the batch size, \nstarting position, and batch window.",
    "start": "217401",
    "end": "220951"
  },
  {
    "text": "For our topic name, we’ll specify exampletopic, \nwhich is the topic we created earlier.",
    "start": "221932",
    "end": "226409"
  },
  {
    "text": "Now, let’s add our trigger.",
    "start": "227352",
    "end": "228607"
  },
  {
    "text": "It will take a couple minutes \nfor the trigger to finish creating.",
    "start": "231959",
    "end": "234482"
  },
  {
    "text": "Once our trigger is in the Enabled \nstate, we can review its details.",
    "start": "237082",
    "end": "240191"
  },
  {
    "text": "Let’s return to our producer client and send \nsome messages to our Amazon MSK cluster.",
    "start": "241734",
    "end": "245857"
  },
  {
    "text": "Now, let’s return to our Lambda \nfunction to see how it reads and",
    "start": "250248",
    "end": "252887"
  },
  {
    "text": "processes these messages in the logs.",
    "start": "252887",
    "end": "254883"
  },
  {
    "text": "We'll navigate to the Monitor tab.",
    "start": "255778",
    "end": "257362"
  },
  {
    "text": "We can view the CloudWatch \nlogs to see our log streams.",
    "start": "258247",
    "end": "260816"
  },
  {
    "text": "Let’s open the first log stream.",
    "start": "263263",
    "end": "264621"
  },
  {
    "text": "Here, we can review our Lambda \nfunction’s event payload, which we",
    "start": "265688",
    "end": "268498"
  },
  {
    "text": "received from our event source mapping.",
    "start": "268498",
    "end": "270297"
  },
  {
    "text": "We can expand individual records \nto see details about the message,",
    "start": "270888",
    "end": "273802"
  },
  {
    "text": "including its partition identifier, \ntimestamp, and encoded value.",
    "start": "273802",
    "end": "277355"
  },
  {
    "text": "Once the message has been \ndecoded, it is logged as well.",
    "start": "278307",
    "end": "280933"
  },
  {
    "text": "Here we can see the message that \nwas sent from MSK to Lambda.",
    "start": "282828",
    "end": "285731"
  },
  {
    "text": "You’ve just seen how to seamlessly \nintegrate AWS Lambda with Amazon MSK.",
    "start": "288169",
    "end": "292187"
  },
  {
    "text": "You can learn more about this topic in \nthe description and links for this video.",
    "start": "293091",
    "end": "296131"
  },
  {
    "text": "Thanks for watching. Now it’s your turn to try.",
    "start": "296407",
    "end": "298408"
  }
]