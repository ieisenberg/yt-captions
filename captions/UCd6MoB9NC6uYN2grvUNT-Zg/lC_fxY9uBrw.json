[
  {
    "text": "My name is Seb, \nand welcome to 'Back to Basics'.",
    "start": "5923",
    "end": "8436"
  },
  {
    "text": "I've been playing with code",
    "start": "9006",
    "end": "10948"
  },
  {
    "text": "ever since my dad bought me \nmy first computer at the age of nine.",
    "start": "10948",
    "end": "14382"
  },
  {
    "text": "However, later in life, \nwhen working on complex codes",
    "start": "15043",
    "end": "18438"
  },
  {
    "text": "I noticed that it doesn't always \nbehave the same way on my laptop ",
    "start": "18438",
    "end": "22616"
  },
  {
    "text": "as it is on the production servers,\nand I couldn't understand why.",
    "start": "22616",
    "end": "26636"
  },
  {
    "text": "Thankfully, \nwith the invention of containers, ",
    "start": "27454",
    "end": "30175"
  },
  {
    "text": "it is now easy to have your code \nbehave the same way on your laptop",
    "start": "30175",
    "end": "34334"
  },
  {
    "text": "as it is on the production server.",
    "start": "34334",
    "end": "36503"
  },
  {
    "text": "In this episode, \nlet's explore some architectural patterns",
    "start": "37533",
    "end": "41605"
  },
  {
    "text": "on how to deploy your code\non the AWS platform.",
    "start": "41605",
    "end": "45020"
  },
  {
    "text": "So, where should we start?",
    "start": "45476",
    "end": "46850"
  },
  {
    "text": "When I first discovered \nthe power of containers,",
    "start": "47800",
    "end": "50836"
  },
  {
    "text": "I rushed to move my latest website \ninto my first Docker container.",
    "start": "51152",
    "end": "55146"
  },
  {
    "text": "I have installed the Docker application\non my EC2 instance.",
    "start": "55755",
    "end": "59241"
  },
  {
    "text": "I built my container there and then,\nand launched it.",
    "start": "59241",
    "end": "62209"
  },
  {
    "text": "This actually worked just fine \nat the beginning,",
    "start": "62921",
    "end": "65483"
  },
  {
    "text": "but I quickly realized \nthe limitations of this approach.",
    "start": "65826",
    "end": "69929"
  },
  {
    "text": "What happens \nwhen my container breaks?",
    "start": "71149",
    "end": "73208"
  },
  {
    "text": "Or I need a hundred of them \nto handle more users on my website?",
    "start": "73479",
    "end": "77078"
  },
  {
    "text": "I could have built all the  orchestration around it myself.",
    "start": "77851",
    "end": "81342"
  },
  {
    "text": "However, there are better tools \nto do this job for us.",
    "start": "81804",
    "end": "84993"
  },
  {
    "text": "This is why I choose to host my containers\non Amazon Elastic Container Service, or ECS.",
    "start": "85391",
    "end": "92083"
  },
  {
    "text": "Amazon ECS takes care of all the undifferentiated \nheavy lifting of managing the containers.",
    "start": "93299",
    "end": "99405"
  },
  {
    "text": "So, I can focus on building features \nin my application instead.",
    "start": "99405",
    "end": "103712"
  },
  {
    "text": "I just first need to push my container image\nto Amazon Elastic Container Registry, or ECR,",
    "start": "103712",
    "end": "109693"
  },
  {
    "text": "and from there, \nit can be deployed to ECS easily.",
    "start": "109693",
    "end": "113075"
  },
  {
    "text": "There are two ways of \nrunning containers on ECS,",
    "start": "113075",
    "end": "116431"
  },
  {
    "text": "either as a task,\nor as a service.",
    "start": "116431",
    "end": "119016"
  },
  {
    "text": "Tasks are great when you need to process \na specific event whenever it occurs.",
    "start": "119828",
    "end": "124507"
  },
  {
    "text": "For example, \na new image gets uploaded to S3,",
    "start": "124507",
    "end": "127439"
  },
  {
    "text": "and you want to create \na thumbnail of that image.",
    "start": "127439",
    "end": "130195"
  },
  {
    "text": "However, my web application \nneeds to be always on,",
    "start": "130856",
    "end": "134166"
  },
  {
    "text": "and I may need \nmultiple copies of my container ",
    "start": "134166",
    "end": "137061"
  },
  {
    "text": "when more users\nvisit my website.",
    "start": "137061",
    "end": "139337"
  },
  {
    "text": "Running my container inside the service \nwill allow me to achieve that,",
    "start": "139933",
    "end": "144136"
  },
  {
    "text": "and ECS will take care of \nadding more copies of the container, \nwhen they're needed.",
    "start": "144136",
    "end": "149768"
  },
  {
    "text": "I also need to decide if I want ECS \nto launch the container on EC2 instances that I own",
    "start": "150520",
    "end": "155849"
  },
  {
    "text": "or through Fargate, \nwhich is a serverless way of running containers.",
    "start": "155849",
    "end": "160096"
  },
  {
    "text": "And I don't really want to spend time \nlooking after the EC2 instance,",
    "start": "161202",
    "end": "166112"
  },
  {
    "text": "worrying if it's healthy, or too busy,\nand that everything's up-to-date. ",
    "start": "166113",
    "end": "170266"
  },
  {
    "text": "With Fargate, \nthere is no underlying server to worry about.",
    "start": "170586",
    "end": "174689"
  },
  {
    "text": "I can simply ask Fargate \nto start my container,",
    "start": "174689",
    "end": "177702"
  },
  {
    "text": "and AWS \nwill take care of the rest for me.",
    "start": "177702",
    "end": "180310"
  },
  {
    "text": "To distribute my users \nbetween my containers",
    "start": "180955",
    "end": "183341"
  },
  {
    "text": "I'm going to require \nan AWS Elastic Load Balancer,",
    "start": "183341",
    "end": "186965"
  },
  {
    "text": "which tightly integrates \nwith Amazon ECS servers",
    "start": "186965",
    "end": "190911"
  },
  {
    "text": "to automatically send traffic \nto all my containers.",
    "start": "190911",
    "end": "194609"
  },
  {
    "text": "And if one of my containers \nbecomes unhealthy,",
    "start": "195229",
    "end": "197854"
  },
  {
    "text": "the logons will \nstop sending any traffic to it,",
    "start": "197854",
    "end": "201002"
  },
  {
    "text": "and ECS will restart the broken container\nand attempt to resolve the problem.",
    "start": "201002",
    "end": "205112"
  },
  {
    "text": "Okay. Now we have \nour container running on ECS,",
    "start": "206434",
    "end": "209760"
  },
  {
    "text": "and our application \nis running reliably now.",
    "start": "209760",
    "end": "212338"
  },
  {
    "text": "But how do we go about \nautomating these deployments?",
    "start": "213285",
    "end": "216155"
  },
  {
    "text": "To do this, \nwe need a containers' deployment pipeline.",
    "start": "216749",
    "end": "220043"
  },
  {
    "text": "First, I have started by \npushing my source code.",
    "start": "220440",
    "end": "223193"
  },
  {
    "text": "as well as the container \nbuild instructions",
    "start": "223193",
    "end": "226019"
  },
  {
    "text": "which are held in \nthe special file called Docker file,",
    "start": "226019",
    "end": "229255"
  },
  {
    "text": "into a Git repository.",
    "start": "229255",
    "end": "230942"
  },
  {
    "text": "We now need to turn this Docker file \ninto a container image.",
    "start": "231657",
    "end": "234716"
  },
  {
    "text": "I could try to do this \non an EC2 instance.",
    "start": "235972",
    "end": "238801"
  },
  {
    "text": "However, by doing this, \nI risk something going wrong with my scripts,",
    "start": "238801",
    "end": "243655"
  },
  {
    "text": "and the build failing.",
    "start": "243656",
    "end": "245228"
  },
  {
    "text": "The best way to do that\nis to use AWS CodeBuild,",
    "start": "245878",
    "end": "249126"
  },
  {
    "text": "which is designed to build a software package \nfrom source code files.",
    "start": "249126",
    "end": "252805"
  },
  {
    "text": "Once the AWS CodeBuild \ncreates the container image,",
    "start": "253303",
    "end": "256239"
  },
  {
    "text": "it will push it to\n Amazon ECR.",
    "start": "256240",
    "end": "258321"
  },
  {
    "text": "The next step is to deploy \nthe container image onto Amazon ECS.",
    "start": "258903",
    "end": "262943"
  },
  {
    "text": "This is something I could do within, \nfor example, a Lambda function.",
    "start": "263728",
    "end": "267441"
  },
  {
    "text": "However, all the complicated logic \nrequired to handle this operation is on me to create,",
    "start": "267441",
    "end": "273327"
  },
  {
    "text": "and I'm risking making mistakes, \nwhich will cause my application to break.",
    "start": "273327",
    "end": "277048"
  },
  {
    "text": "AWS CodeDeploy \ncan do this for me instead.",
    "start": "277662",
    "end": "280353"
  },
  {
    "text": "Due to its tight integration \nwith Amazon ECS,",
    "start": "280677",
    "end": "283797"
  },
  {
    "text": "within a few clicks of a button\nI have my deployment drop ready to execute.",
    "start": "284282",
    "end": "288451"
  },
  {
    "text": "AWS CodeDeploy also allows us \nto automate at testing",
    "start": "289408",
    "end": "293216"
  },
  {
    "text": "to make sure our change \nactually worked,",
    "start": "293216",
    "end": "295269"
  },
  {
    "text": "and automate the rollback to a previous version,\nin case it doesn't work.",
    "start": "295269",
    "end": "299282"
  },
  {
    "text": "And I really want this whole process \nto trigger automatically",
    "start": "299646",
    "end": "303224"
  },
  {
    "text": "every time \nI make a code change.",
    "start": "303224",
    "end": "305230"
  },
  {
    "text": "With AWS CodePipeline \nI'm able to create a continuous integration",
    "start": "305850",
    "end": "309993"
  },
  {
    "text": "and deployment pipeline",
    "start": "309993",
    "end": "311617"
  },
  {
    "text": "which starts every time \na change is made in source code,",
    "start": "311617",
    "end": "315163"
  },
  {
    "text": "and it coordinates \nthe execution of steps required",
    "start": "315163",
    "end": "318659"
  },
  {
    "text": "to complete the deployment \nof the new version of my container.",
    "start": "318659",
    "end": "321887"
  },
  {
    "text": "So, there you have it.",
    "start": "322716",
    "end": "323987"
  },
  {
    "text": "We now have our web application \ndeployed on the container,",
    "start": "323987",
    "end": "327812"
  },
  {
    "text": "and our code is behaving \nexactly the same way on the laptop,",
    "start": "327812",
    "end": "332009"
  },
  {
    "text": "as well as in production.",
    "start": "332009",
    "end": "334226"
  },
  {
    "text": "And with the continuous \ndeployment pipeline,",
    "start": "334226",
    "end": "337767"
  },
  {
    "text": "every time we make a change to that code,\nit is automatically deployed.",
    "start": "337767",
    "end": "342182"
  },
  {
    "text": "Check out the links below\nfor more details.",
    "start": "342762",
    "end": "344955"
  },
  {
    "text": "Thank you for watching\n'Back to Basics'.",
    "start": "344955",
    "end": "347043"
  },
  {
    "text": "Happy building, folks, \nand see you next time.",
    "start": "347044",
    "end": "349339"
  }
]