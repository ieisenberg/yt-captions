[
  {
    "start": "0",
    "end": "108000"
  },
  {
    "text": "just just start",
    "start": "399",
    "end": "3159"
  },
  {
    "text": "talking welcome uh welcome P AWS data database tier architecture best",
    "start": "5640",
    "end": "11160"
  },
  {
    "text": "practices uh my name is Sia ragati I'm a Solutions architect uh I've been with",
    "start": "11160",
    "end": "16680"
  },
  {
    "text": "Amazon for about four years uh prior to becoming a Solutions architect um I was",
    "start": "16680",
    "end": "21920"
  },
  {
    "text": "a technical program manager on the Dynamo DB team I wrote the first version of the dynb specification and later on I",
    "start": "21920",
    "end": "27679"
  },
  {
    "text": "was a development manager for Amazon RDS um and I'll be co-presenting with u Matt",
    "start": "27679",
    "end": "34800"
  },
  {
    "text": "Travis yeah yeah thanks steephen well we'll get back to Stephen in just a minute he's going to take a rest in the audience we're going to sort of tag team",
    "start": "34800",
    "end": "40520"
  },
  {
    "text": "this one um uh as stea mentioned my name is Matt Tavis uh I've actually been with",
    "start": "40520",
    "end": "45640"
  },
  {
    "text": "Amazon seven years now uh I actually joined AWS before these Services existed and have had the honor to sort of be",
    "start": "45640",
    "end": "52320"
  },
  {
    "text": "involved in the process and and see them grow over time and work in the field actually with customers quite a bit um",
    "start": "52320",
    "end": "57359"
  },
  {
    "text": "as a Solutions architect now as actually a consultant uh for AWS so um I I",
    "start": "57359",
    "end": "62840"
  },
  {
    "text": "actually uh have uh enjoyed that that time and it's been a it's a great opportunity and what I wanted to talk about today um up front is kind of a to",
    "start": "62840",
    "end": "69680"
  },
  {
    "text": "give you a broader perspective of how we think about um database architecture um it it gets to be uh a lot of folks",
    "start": "69680",
    "end": "75920"
  },
  {
    "text": "associate database with specifically the relational database management you know system or service um and that is",
    "start": "75920",
    "end": "81960"
  },
  {
    "text": "obviously one aspect of it but when we think about data architectures in ads we have a much broader view um than just a",
    "start": "81960",
    "end": "87560"
  },
  {
    "text": "single database or an rdbms so want to talk a little bit about that give you a sense of the the breadth of the platform",
    "start": "87560",
    "end": "92600"
  },
  {
    "text": "there uh and then uh after we've covered sort of a scenario to sort of show you how some of these things play out",
    "start": "92600",
    "end": "97680"
  },
  {
    "text": "architecturally I want to hand it back over to SAA who who will cover our best practices so that's a little preview of what we're going to talk about today um",
    "start": "97680",
    "end": "104320"
  },
  {
    "text": "but no you know no story is complete without a little bit of History a little bit of an analogy right um so if you",
    "start": "104320",
    "end": "109560"
  },
  {
    "start": "108000",
    "end": "108000"
  },
  {
    "text": "look at database architectures um and sort of their history you sort of get it starts to feel or at least when we",
    "start": "109560",
    "end": "115479"
  },
  {
    "text": "looked at it and sort of did a little research it felt much like a Swiss army knife starts off very very simply right it's a simple tool there's a blade on it",
    "start": "115479",
    "end": "122360"
  },
  {
    "text": "you can do one thing oltp it's transaction processing it's got a table structure you know uh transactions",
    "start": "122360",
    "end": "128399"
  },
  {
    "text": "locking you know fairly fairly structured model and that's really sort of the origin of a lot of database",
    "start": "128399",
    "end": "133440"
  },
  {
    "text": "technologies that people associate with with rmss today right over time these",
    "start": "133440",
    "end": "139000"
  },
  {
    "text": "things started to morph people's added workloads to it not just olp but now we had olab objectoriented databases um you",
    "start": "139000",
    "end": "145760"
  },
  {
    "text": "know om models where people could write objects directly against a database model and this added different types of",
    "start": "145760",
    "end": "151000"
  },
  {
    "text": "workloads different types of activity that people were performing against these databases they weren't always transactions sometimes was application",
    "start": "151000",
    "end": "157640"
  },
  {
    "text": "processing olap cubes um and it made that that tool a little more complex it got richer now we don't just have a",
    "start": "157640",
    "end": "163519"
  },
  {
    "text": "knife now we've got a cork screw you know nail file a couple other things get added to that it starts to add to the",
    "start": "163519",
    "end": "168680"
  },
  {
    "text": "richness of that tool um and then as you look at databases today in in the 2000s you know now it's doing analytics it's",
    "start": "168680",
    "end": "174720"
  },
  {
    "text": "doing you know uh clustering it's it's doing a whole bunch of other workloads on top of that in addition to just the",
    "start": "174720",
    "end": "180920"
  },
  {
    "text": "simple olp that was its Origins right so it's really evolved pretty drastically from a features and functionality",
    "start": "180920",
    "end": "186680"
  },
  {
    "text": "perspective and so now we have this you know somewhat complex Swiss army knife um it's actually now hard to fit in your",
    "start": "186680",
    "end": "192440"
  },
  {
    "text": "pocket um but you know it's there you have that feature for you what this has generated uh with a lot of our customers",
    "start": "192440",
    "end": "199000"
  },
  {
    "text": "is what we're calling a database anti- pattern right where the answer is oh well this tool I have this database",
    "start": "199000",
    "end": "205640"
  },
  {
    "text": "technology does everything so what I'm going to do is I'm going to shove everything ins inside of it and it's just going to be where I dump everything",
    "start": "205640",
    "end": "211599"
  },
  {
    "text": "I need to persist right it's a fairly common pattern we're seeing out in the field um and what it's generating is",
    "start": "211599",
    "end": "217239"
  },
  {
    "text": "actually um perhaps a a you know not necessarily the most optimal use of the technology or even the resources that",
    "start": "217239",
    "end": "223840"
  },
  {
    "text": "sit underneath it um things like AWS EBS ec2 instances things like that um so",
    "start": "223840",
    "end": "230400"
  },
  {
    "text": "this is you know kind of our new anti pattern we're seeing a lot of customers sort of bring they're bringing that traditional software database model to",
    "start": "230400",
    "end": "236799"
  },
  {
    "text": "the platform and saying oh well this is you know I'll just stuff it in the database and that's where it's going to be um what we're seeing is the answer is",
    "start": "236799",
    "end": "243040"
  },
  {
    "text": "really that it not it's not one size fits all in this space right there's a lot of different capabilities inside of",
    "start": "243040",
    "end": "248959"
  },
  {
    "text": "a database but that doesn't mean you use a database for everything it's not necessarily tuned for all the different types of workloads and if you did try to",
    "start": "248959",
    "end": "255280"
  },
  {
    "text": "do you know olap oltp analytics all that in one particular tool in one particular",
    "start": "255280",
    "end": "261400"
  },
  {
    "text": "database what ends up happening is you generate um you can easily generate some inefficiencies in terms of resource",
    "start": "261400",
    "end": "267560"
  },
  {
    "text": "consumption right you're designing for peak of Peaks what's the hardest workload at the hardest point in time",
    "start": "267560",
    "end": "273800"
  },
  {
    "text": "right what is the is it a heavy analytics job at the end of the month that I'm stuffing all this work into and so I have to scale for that one",
    "start": "273800",
    "end": "280000"
  },
  {
    "text": "particular point or you know can I actually break this out and can I use different database Technologies or data",
    "start": "280000",
    "end": "286199"
  },
  {
    "text": "source Technologies to optimize how I consume resources under the covers um you know so that makes it hard to",
    "start": "286199",
    "end": "292199"
  },
  {
    "text": "efficiently manage resources and obviously as you know as you've learned over the time here in your experience",
    "start": "292199",
    "end": "297240"
  },
  {
    "text": "with AWS you know we're all about optim optimizing resource consumption you know making sure that the curve of of what",
    "start": "297240",
    "end": "303080"
  },
  {
    "text": "you've got running and available to you fits exactly what your business model demands at that instant in time so when",
    "start": "303080",
    "end": "308479"
  },
  {
    "text": "we look at it you know we think it's it's much more important to distribute um these workloads into the right tools",
    "start": "308479",
    "end": "313639"
  },
  {
    "text": "and Technologies um throughout the platform um Additionally you know obviously as you grow up um a database",
    "start": "313639",
    "end": "320840"
  },
  {
    "text": "you know vertical scaling is one model but as you add you know additional nodes additional um shards and things like",
    "start": "320840",
    "end": "326160"
  },
  {
    "text": "that complexity administrative complexity can get high on something like that so trying to stuff everything in one model and then administering that",
    "start": "326160",
    "end": "332680"
  },
  {
    "text": "in a very broad way can add some challenges from an Administration perspective obviously we have things like RDS which helped take some of that",
    "start": "332680",
    "end": "338840"
  },
  {
    "text": "away but still there's some complexities there that you're buying into um that aren't necessary for all scenarios so",
    "start": "338840",
    "end": "344560"
  },
  {
    "text": "thinking about how to minimize administrative complexity is also important in this model um now that don't get me wrong rdbms's absolutely",
    "start": "344560",
    "end": "351280"
  },
  {
    "text": "have their place and there's scenarios where they have to be used um there are scenarios where there's applications that have been coded against it products",
    "start": "351280",
    "end": "357639"
  },
  {
    "text": "and platforms that require an rdbms and are built against it and of course there's obviously data schemas and data models that require a multi-table you",
    "start": "357639",
    "end": "364720"
  },
  {
    "text": "know cross table joins triggers you know things like that that are fundamental and critical um but that doesn't apply",
    "start": "364720",
    "end": "370400"
  },
  {
    "text": "to every particular data scenario and of course this isn't getting easier um is one thing we've",
    "start": "370400",
    "end": "377120"
  },
  {
    "text": "also noticed it's not necessarily uh simple to think about you know your data model and how it's going to be day one",
    "start": "377120",
    "end": "382520"
  },
  {
    "text": "and it's how going to stay that way forever um because the data we're collecting um and you're collecting um",
    "start": "382520",
    "end": "388000"
  },
  {
    "text": "is growing obviously pretty quickly and it's not structured all the time right in fact the the growth of unstructured",
    "start": "388000",
    "end": "394720"
  },
  {
    "text": "data things like log files social media content uh you know uh uh access logs",
    "start": "394720",
    "end": "400800"
  },
  {
    "text": "things like that are actually growing at such an Inc increasing rate and are becoming more and more part of your applications and platforms processing",
    "start": "400800",
    "end": "407919"
  },
  {
    "text": "those things storing those things analyzing that data is becoming critical and part of your data storage solution",
    "start": "407919",
    "end": "413479"
  },
  {
    "start": "411000",
    "end": "411000"
  },
  {
    "text": "you know it's not necessarily appropriate to say the structured table model is the only answer for every scenario so um you know and as you see",
    "start": "413479",
    "end": "421160"
  },
  {
    "text": "here uh obviously lots of devices lots of you know metering points are adding",
    "start": "421160",
    "end": "426479"
  },
  {
    "text": "to this this uh workload over time so it's just going to get more and more complex um and it's going to get more",
    "start": "426479",
    "end": "431599"
  },
  {
    "text": "and more unstructured and you're going to have to think about how do I use the right tools and right Technologies for each of these different data sources um",
    "start": "431599",
    "end": "438759"
  },
  {
    "text": "to get the answers that I need in the most efficient um and cost effective way um you know obviously we got a lot",
    "start": "438759",
    "end": "445440"
  },
  {
    "text": "of questions I'm not going to zip through all these these are just some great examples of questions our c customers ask us about this but it's you",
    "start": "445440",
    "end": "451440"
  },
  {
    "text": "know it's often times there's you know price performance comparison um you know answers or questions that people ask how",
    "start": "451440",
    "end": "457000"
  },
  {
    "text": "do I get the right number of iops how do I scale this thing how do I reduce my management overhead how do I migrate",
    "start": "457000",
    "end": "462400"
  },
  {
    "text": "data into this platform um you know a lot of these there's not a quick answer we could probably take one of these questions and go dive deep on it and",
    "start": "462400",
    "end": "468759"
  },
  {
    "text": "spend the next you know 50 minutes on it so we're not going to do that sorry if you had one up here you really liked and wanted the answer to I apologize we're",
    "start": "468759",
    "end": "475120"
  },
  {
    "text": "not going to spend 50 minutes on that um but fundamentally the point being there's a lot of questions that are",
    "start": "475120",
    "end": "480360"
  },
  {
    "text": "coming out there and what we're trying to do here is really to give you some some simple ways to think about um how",
    "start": "480360",
    "end": "485879"
  },
  {
    "text": "how do you make these choices in these tradeoffs right um so you know our our",
    "start": "485879",
    "end": "491360"
  },
  {
    "text": "sort of Mantra if you will from a database architecture perspective is choosing the right tool for the right job and when you think about what tools",
    "start": "491360",
    "end": "497440"
  },
  {
    "start": "493000",
    "end": "493000"
  },
  {
    "text": "exist um I think we take a perhaps a little more of an unconventional Viewpoint um around what constitutes a",
    "start": "497440",
    "end": "503879"
  },
  {
    "text": "data a database or a data source um for your application um because there's a of",
    "start": "503879",
    "end": "509599"
  },
  {
    "text": "things that are are require persistence you know provide um U um manageability",
    "start": "509599",
    "end": "514800"
  },
  {
    "text": "and and data management and provide queri ability indexing and searching which are all kind of aspects that get",
    "start": "514800",
    "end": "520399"
  },
  {
    "text": "worked in this whole model um you know starting from the far left Amazon Cloud search um you know search doesn't",
    "start": "520399",
    "end": "526680"
  },
  {
    "text": "necessarily traditionally fit into that definition of a database but what is it other than a an highly heavily indexed",
    "start": "526680",
    "end": "532640"
  },
  {
    "text": "data store that you know has a quick access you know high-speed um ability to",
    "start": "532640",
    "end": "537760"
  },
  {
    "text": "find and retrieve material much like what people might do with a full text search uh inside of a database",
    "start": "537760",
    "end": "543800"
  },
  {
    "text": "right but Cloud search is much richer than something like that but it's it's maybe the right answer for certain types of data in your application right um RDS",
    "start": "543800",
    "end": "551680"
  },
  {
    "text": "obviously fits that more traditional um database model um where it is a MySQL Oracle or SQL Server engine um that you",
    "start": "551680",
    "end": "559600"
  },
  {
    "text": "can then uh spin up you can use obviously read replicas High availability to get and that fits where",
    "start": "559600",
    "end": "564920"
  },
  {
    "text": "where you need that relational database structure model um and that's that the particular service around that um",
    "start": "564920",
    "end": "572000"
  },
  {
    "text": "elasticache um comes up a lot it's not so much a persistent store which obviously is different from many the",
    "start": "572000",
    "end": "577279"
  },
  {
    "text": "other services up here uh but it is the answer for a lot of high performance scenarios where people say I've got I me",
    "start": "577279",
    "end": "583600"
  },
  {
    "start": "580000",
    "end": "580000"
  },
  {
    "text": "you have to use a traditional database but I really need that super low latency high-speed simple query ability um to",
    "start": "583600",
    "end": "590680"
  },
  {
    "text": "pull information out and and to serve hot content out of my database to reduce the load on the on the database layer um",
    "start": "590680",
    "end": "597519"
  },
  {
    "text": "and of course Dynamo DB is the alternate you know we have Rd rdbms is SQL and Dynamo DB is the nosql world so much",
    "start": "597519",
    "end": "604680"
  },
  {
    "text": "more of a simple um you know either single key or composite key kind of a model with a blob hanging off of it much",
    "start": "604680",
    "end": "610200"
  },
  {
    "text": "more unstructured and flexible um but heavily managed and highly highly scalable um so it fits a very different",
    "start": "610200",
    "end": "616959"
  },
  {
    "text": "type of model we can talk through how how that model plays out um S3 in Glacier wouldn't fit a traditional",
    "start": "616959",
    "end": "623399"
  },
  {
    "text": "database model because there's no indexing um in terms of searchability uh and things like that but it does have a",
    "start": "623399",
    "end": "629160"
  },
  {
    "text": "it's a great way to store those blobs um so for example we we've seen this before and customers will you know spin up a",
    "start": "629160",
    "end": "635079"
  },
  {
    "text": "relational database and start stuffing you know all the documents in the relational database and it's like not necessarily the most optimal use of the",
    "start": "635079",
    "end": "641680"
  },
  {
    "text": "resources that are being deployed in that particular scenario makes a lot more sense to index the documents store",
    "start": "641680",
    "end": "647600"
  },
  {
    "text": "the index in like a cloud search or a Dynamo and then point out to something like an S3 um for Access of that",
    "start": "647600",
    "end": "654200"
  },
  {
    "text": "information um Glacier of course we'll talk about briefly it's really where things go to hang out be highly durable",
    "start": "654200",
    "end": "659760"
  },
  {
    "text": "but not highly accessible um so much more in the data archival side of things um elastic map ruce uh is another data",
    "start": "659760",
    "end": "667040"
  },
  {
    "text": "services technology it's much more around data processing in most cases but it it plays a pretty big role in a lot",
    "start": "667040",
    "end": "672320"
  },
  {
    "text": "of these data architectures um because uh fundamentally once you generate a lot of data or collect a lot of unstructured",
    "start": "672320",
    "end": "678200"
  },
  {
    "text": "data in many cases you want to process it to to learn from it to understand what it is and that's where EMR comes",
    "start": "678200",
    "end": "684480"
  },
  {
    "text": "into play to process unstructured and structured data together generating out which you might store and say a Dynam DB",
    "start": "684480",
    "end": "690800"
  },
  {
    "text": "or an RDS um but it's part of that database architecture because it's part of the whole data pipeline we'll talk a",
    "start": "690800",
    "end": "696120"
  },
  {
    "text": "little bit more about that in a second um and of course ec2 you can run whatever you want on there um certainly",
    "start": "696120",
    "end": "702000"
  },
  {
    "text": "a a a common model when it when we don't have a managed service around it ec2 is where you install it yourself and go",
    "start": "702000",
    "end": "707720"
  },
  {
    "text": "ahead and manage that platform on your own um and then finally Amazon red shift which I'm still getting used to the name",
    "start": "707720",
    "end": "713800"
  },
  {
    "text": "I just heard it yesterday um for the first time so you know but red shift is our new data warehousing service um so",
    "start": "713800",
    "end": "720760"
  },
  {
    "text": "this is you know now it's the analytics side it's not the real time what's happening in the application serving a",
    "start": "720760",
    "end": "727000"
  },
  {
    "text": "direct customer request but more I want to analyze what's actually happened in my application and I want to look at my user uh you know user logs I want to",
    "start": "727000",
    "end": "734240"
  },
  {
    "text": "analyze what what customers are doing and I want an aggregated view across you know what is potentially terabytes or",
    "start": "734240",
    "end": "739880"
  },
  {
    "text": "even pedabytes of log and activity information um and I need a DAT data warehouse to solve that that's where Red",
    "start": "739880",
    "end": "745519"
  },
  {
    "text": "shift comes into play in that architecture so all of these are part of it and there the reason why they're all part of it um is because there's",
    "start": "745519",
    "end": "750720"
  },
  {
    "text": "different types of models um for Access right there's much more structured complex query models where you'd see",
    "start": "750720",
    "end": "756720"
  },
  {
    "text": "something like an rdbms or data warehouse or search where there might be um you know multiple types of fields you",
    "start": "756720",
    "end": "762440"
  },
  {
    "text": "can query against uh the data itself has to fit a particular fairly structured format um in terms of storage um and so",
    "start": "762440",
    "end": "769360"
  },
  {
    "text": "you have to Define that or understand that up front um and then you have things that are much more simple queries",
    "start": "769360",
    "end": "774560"
  },
  {
    "text": "still somewhat structured like the Dynamo DB or even elastic cache where it's a simpley key more of a put and get",
    "start": "774560",
    "end": "780360"
  },
  {
    "text": "kind of a model right but you're pulling things in and out of of that particular service generally optimized for high",
    "start": "780360",
    "end": "786360"
  },
  {
    "text": "speed quick access um but a less structured if you will um particular approach and then in the unstructured",
    "start": "786360",
    "end": "793000"
  },
  {
    "text": "world you have the you know the custom query where I have a really unstructured thing and I want to ETL the whole thing",
    "start": "793000",
    "end": "798160"
  },
  {
    "text": "together analyze it generate maybe something more structured that's the Hadoop EMR World um and then S3 where I",
    "start": "798160",
    "end": "804240"
  },
  {
    "text": "just want to store things I need a key to get it back out but there's no query model over the top of that where I find",
    "start": "804240",
    "end": "809560"
  },
  {
    "start": "807000",
    "end": "807000"
  },
  {
    "text": "it is really the other structured services and then I bring I pull that that item back in so it's kind of how we see the the space if you will from a",
    "start": "809560",
    "end": "816600"
  },
  {
    "text": "data services perspective and of course on top of all that those are our managed um our",
    "start": "816600",
    "end": "822399"
  },
  {
    "start": "819000",
    "end": "819000"
  },
  {
    "text": "managed services in addition to that we have our primitive Services right um I'm not trying to call ec2 primitive but I",
    "start": "822399",
    "end": "829320"
  },
  {
    "text": "just mean in an architectural sense that it's perhaps you know less evolved that doesn't sound good either",
    "start": "829320",
    "end": "835160"
  },
  {
    "text": "um oh well Darwin's not here um so you know you have a lots of different instance types to choose from uh and uh",
    "start": "835160",
    "end": "842279"
  },
  {
    "text": "of course you can host any major data store that you choose um you know obviously a lot of customers want to run postgress or reddis or you know or",
    "start": "842279",
    "end": "850199"
  },
  {
    "text": "Cassandra um and when they go and run those platforms they run them on top of ec2 um directly and then uh they have a",
    "start": "850199",
    "end": "856800"
  },
  {
    "text": "lot of choices all the way up to you know our high one 4XL which has backed by two ssds to give you you know",
    "start": "856800",
    "end": "863279"
  },
  {
    "text": "essentially up to 120,000 iops on the local disc so you know you have a lot of interesting choices there around how you",
    "start": "863279",
    "end": "869560"
  },
  {
    "text": "can build and manage that now the thing to note um is that you know how you choose your storage Technologies whether",
    "start": "869560",
    "end": "874880"
  },
  {
    "text": "it be ephemeral um using the local dis like with the high1 ssds um then you have to have application Level",
    "start": "874880",
    "end": "880880"
  },
  {
    "text": "replication um so that if that node dies you haven't lost the data because there's no persistence in that local",
    "start": "880880",
    "end": "886600"
  },
  {
    "text": "Drive um or you can use something like EBS which you can then snapshot you can move from box to box you know virtual",
    "start": "886600",
    "end": "892720"
  },
  {
    "text": "machine to Virtual Machine giveing you more flexibility um but doesn't necessary it's an it's an offbox um and",
    "start": "892720",
    "end": "899000"
  },
  {
    "text": "of course there's two models on that which I'm sure you're aware of the standard kind of equivalent to about 100 iops per per volume up to the the new uh",
    "start": "899000",
    "end": "906959"
  },
  {
    "text": "a 2,000 plus um kind of model for provision doops um so a lot of choices there and in this case you're what",
    "start": "906959",
    "end": "912839"
  },
  {
    "text": "you're doing is you're saying I want full control it's fine with us you can have all the control you want um but uh",
    "start": "912839",
    "end": "918880"
  },
  {
    "text": "fundamentally you then with that with that primitive you get lots of flexibility but also adds lots of management choice and lots of management",
    "start": "918880",
    "end": "925199"
  },
  {
    "text": "overhead so it's a trade-off right you know with with is and flexibility comes more more uh more control um but also",
    "start": "925199",
    "end": "932639"
  },
  {
    "text": "more work potentially on your end to manage and maintain that platform so those are some of the the sort of the overview of the services um the other",
    "start": "932639",
    "end": "940360"
  },
  {
    "text": "thing I want to sort of point out here is really more about our our life cycle um the way the way to think about data",
    "start": "940360",
    "end": "946040"
  },
  {
    "text": "and this is kind of a simple little um model to talk about how data uh actually has a life cycle it's not a one-time",
    "start": "946040",
    "end": "952319"
  },
  {
    "text": "thing it's not you create a model for your data and it just stays in that model forever right it might come in during an injust phase fairly structured",
    "start": "952319",
    "end": "959120"
  },
  {
    "text": "you might need a medium level of access um but then immediately you want to put it into something like a search or a metadata service like a Dynamo or a",
    "start": "959120",
    "end": "965759"
  },
  {
    "text": "cloud search now you need you know fast access to satisfy customer requests um",
    "start": "965759",
    "end": "970800"
  },
  {
    "text": "you need a metadata a set of that data you don't need all of it but just a subset of that data um and so it has a",
    "start": "970800",
    "end": "976319"
  },
  {
    "text": "much faster movement rate it has a much higher Demand on speed so immediately you've mve from maybe a highly durable",
    "start": "976319",
    "end": "983880"
  },
  {
    "text": "but maybe not as fast storage technology do a much faster uh highly durable technology which come with more costs",
    "start": "983880",
    "end": "989839"
  },
  {
    "text": "right so now you got to think about okay how long do I keep it in metadata does it stay there forever and maybe it does fine maybe it sort of over time it",
    "start": "989839",
    "end": "996880"
  },
  {
    "text": "disappears and goes into archival right this is a whole another process for how you manage your data through its life cycle Additionally you might have things",
    "start": "996880",
    "end": "1003160"
  },
  {
    "text": "like um logging usage logging might be capturing web logs things like that well those things feed into um they feed into",
    "start": "1003160",
    "end": "1010560"
  },
  {
    "text": "your uh recommendations engine how you might suggest what customer is doing how you might actually go into analytics and",
    "start": "1010560",
    "end": "1016120"
  },
  {
    "text": "analyze what's happening on the platform so those things have a life of their own they start off as you know highly",
    "start": "1016120",
    "end": "1021639"
  },
  {
    "text": "durable but more medium level of access but then they might move into sort of a recommendation service which like our metadata and search service is going to",
    "start": "1021639",
    "end": "1028520"
  },
  {
    "text": "have to be highspeed you know quick response to customer requests but again it's a subset it's an analysis subset of",
    "start": "1028520",
    "end": "1034240"
  },
  {
    "text": "the data that you're generating so when you think about the life of data don't think about you know designing the model for now but think about how it's going",
    "start": "1034240",
    "end": "1040360"
  },
  {
    "text": "to move layer to layer over time through the platform and what are the requirements at each layer at each part",
    "start": "1040360",
    "end": "1046438"
  },
  {
    "text": "because that will Define which Services might be used used and of course we have our backup and archival and analytics which are",
    "start": "1046439",
    "end": "1052960"
  },
  {
    "text": "kind of more as the data sort of sort of travels through its life cycle um through the platform and this is kind of a a you",
    "start": "1052960",
    "end": "1060000"
  },
  {
    "start": "1058000",
    "end": "1058000"
  },
  {
    "text": "know more of a visualization if you will of kind of how these Services fit together kind of across a couple ax axes",
    "start": "1060000",
    "end": "1066720"
  },
  {
    "text": "one is the structure axes um you know red shift being highly structured you know uh but also extremely high volumes",
    "start": "1066720",
    "end": "1074080"
  },
  {
    "text": "you know pedabytes of structured data in a data warehouse kind of a model to the far right you get get something like S3",
    "start": "1074080",
    "end": "1079440"
  },
  {
    "text": "or Glacier where it's fully unstructured um but you know incredibly High volumes as well right um when you start going",
    "start": "1079440",
    "end": "1086440"
  },
  {
    "text": "down you see you know you get the structure something like an RDS or an elastic has um it's semi-structured or",
    "start": "1086440",
    "end": "1091960"
  },
  {
    "text": "very structured depending on the model but it's the data volumes per node tend to be a lot smaller in terms of what it",
    "start": "1091960",
    "end": "1097720"
  },
  {
    "text": "fits so thinking about what the volume of your data set is and then how structured it needs to be will help you sort of find maybe where in this",
    "start": "1097720",
    "end": "1103919"
  },
  {
    "text": "Continuum that particular data might need to live um unfortunately there's no one right answer for every scenario um",
    "start": "1103919",
    "end": "1110520"
  },
  {
    "text": "sorry let me rephrase that there's a right answer for each individual scenario there's no generic answer for all scenarios um so that's you know",
    "start": "1110520",
    "end": "1116720"
  },
  {
    "text": "where you have to sort of think through what are the access models um what's the specific uh technology and how does it",
    "start": "1116720",
    "end": "1121919"
  },
  {
    "text": "fit from a structure and data size perspective because that'll map back to Resource consumption and ultimately",
    "start": "1121919",
    "end": "1127159"
  },
  {
    "text": "cost so if we look at sort of a generic architecture of how it all hangs together um you know your application",
    "start": "1127159",
    "end": "1133159"
  },
  {
    "text": "sits on top and in the vast majority of cases your customers aren't hitting your data stores directly so your",
    "start": "1133159",
    "end": "1138320"
  },
  {
    "text": "applications and handling those requests and then passing them on um you know you're going to use things like search",
    "start": "1138320",
    "end": "1144080"
  },
  {
    "text": "for the you know the search results elastic cache for you know caching front ends over uh various other data tiers",
    "start": "1144080",
    "end": "1149919"
  },
  {
    "text": "whether it be Dynamo DB or RDS um map reduce will be used for analytics and of course you know S3 and Glacier down here",
    "start": "1149919",
    "end": "1156720"
  },
  {
    "text": "at the bottom for you know storage of objects or things that are maybe unstructured that maybe need further analysis or later looks um there's also",
    "start": "1156720",
    "end": "1163760"
  },
  {
    "text": "a implied concept here called a data pipeline um which is a based on that previous slide where you saw the the the",
    "start": "1163760",
    "end": "1170679"
  },
  {
    "text": "life cycle of data data will move from service to service over the life of the application right it might start out as",
    "start": "1170679",
    "end": "1177679"
  },
  {
    "text": "you know uh some information in one of the web servers that moves into S3 then gets analyzed and then moves into Dynamo",
    "start": "1177679",
    "end": "1183480"
  },
  {
    "text": "right so things will move and so thinking about how you're going to sort of if you will automate or or uh uh",
    "start": "1183480",
    "end": "1189120"
  },
  {
    "text": "analyze the data as it moves between the services and come up with a model for when it moves how often it moves what",
    "start": "1189120",
    "end": "1195480"
  },
  {
    "text": "the right approach is um for that scenario is going to be key to sort of think about the data Pipeline and the flow over time and how you manage that",
    "start": "1195480",
    "end": "1203320"
  },
  {
    "text": "workflow so let's walk through a pretty simple example a video streaming application uh you know I won't name any",
    "start": "1203320",
    "end": "1209080"
  },
  {
    "text": "names but obviously there's a lot of streaming applications out there there's a lot of things that a lot of scenarios where this actually makes a lot of sense",
    "start": "1209080",
    "end": "1215200"
  },
  {
    "text": "so if we're worrying about the upload side of things you know we're going to have a lovely little video that slides in the application is going to have to",
    "start": "1215200",
    "end": "1221679"
  },
  {
    "text": "do some analysis of this it doesn't want to store the video in the relational database but it needs to know enough about it to actually um find again right",
    "start": "1221679",
    "end": "1229120"
  },
  {
    "start": "1225000",
    "end": "1225000"
  },
  {
    "text": "so immediately you're going to generate things like metadata um user information who did it what the rights and permissions are perhaps for that",
    "start": "1229120",
    "end": "1235480"
  },
  {
    "text": "particular piece of data that video makes a ton of sense to put an S3 it needs quick access you maybe can you can",
    "start": "1235480",
    "end": "1241840"
  },
  {
    "text": "use cloudfront we'll talk about that in a second but you know it doesn't it's an unstructured object it needs to be stored there you need to find it again",
    "start": "1241840",
    "end": "1248200"
  },
  {
    "text": "so we need something for that but the video itself makes a ton of sense it's just an S3 you know blob right whereas",
    "start": "1248200",
    "end": "1254840"
  },
  {
    "text": "the metadata needs to be discoverable it needs to be uh high speed you need able to get to that medad quickly at the at",
    "start": "1254840",
    "end": "1259919"
  },
  {
    "text": "the back end of a search or when somebody looks for that video you want the title the description the tags you know who owns it um that's something you",
    "start": "1259919",
    "end": "1266159"
  },
  {
    "text": "could use Dynamo DB for because it's going to be highly you know it's going to be scale very very nicely scales you know consistently with the amount of",
    "start": "1266159",
    "end": "1272440"
  },
  {
    "text": "storage you're using um and the metadata relative to the videos it also has a high-speed access model and it's pretty",
    "start": "1272440",
    "end": "1277880"
  },
  {
    "text": "much a put and get right I just want to know about this one video tell me the the title the description of the info",
    "start": "1277880",
    "end": "1283080"
  },
  {
    "text": "right now you still need search and you don't really want to scan a table in Dynam every time you want to find a",
    "start": "1283080",
    "end": "1289400"
  },
  {
    "text": "video so instead you say take that same metadata excuse me or a subset thereof",
    "start": "1289400",
    "end": "1295400"
  },
  {
    "text": "uh and you can store it in something like Cloud search now you have a much richer model over which you can find and discover videos which will return a",
    "start": "1295400",
    "end": "1301400"
  },
  {
    "text": "little bit of information like a pointer that you can use to look up and dyn to get the metadata out and then serve that video up and then of course last but not",
    "start": "1301400",
    "end": "1309120"
  },
  {
    "text": "least uh the user relationships who owns the video what the permissions are is it shared is it public is it private um",
    "start": "1309120",
    "end": "1315559"
  },
  {
    "text": "that a lot of times leads into a much richer uh data model right user relationships user membership to groups",
    "start": "1315559",
    "end": "1322000"
  },
  {
    "text": "uh group you know group relationships uh default privacy settings a lot of these things tend to be fairly complex data",
    "start": "1322000",
    "end": "1328360"
  },
  {
    "text": "models that actually a lot of times necessitate or or or speak towards more of a relational database approach with",
    "start": "1328360",
    "end": "1334320"
  },
  {
    "text": "you know cross table joins triggers you know validation of of information so you know user data model around who's doing",
    "start": "1334320",
    "end": "1341120"
  },
  {
    "text": "what and what the relationships are you know a lot of times they'll fit very cleanly into a relational database model from a table structure perspective",
    "start": "1341120",
    "end": "1349360"
  },
  {
    "text": "now if we then move on to Discovery we obviously have to search for things so the user searches and of course you hit",
    "start": "1349360",
    "end": "1354480"
  },
  {
    "text": "Cloud search that's where you go find things um now Cloud search is just really going to return you a little bit",
    "start": "1354480",
    "end": "1360720"
  },
  {
    "text": "of metadata about that service the most important piece of that metadata being really the ID the document ID um you",
    "start": "1360720",
    "end": "1366720"
  },
  {
    "text": "know there's a little bit of metadata on top but the document ID is is pretty much the here's the videos that meet your specifications what you're looking",
    "start": "1366720",
    "end": "1372360"
  },
  {
    "text": "for right that document ID now if it's a Hot Topic if it's a video that a lot of",
    "start": "1372360",
    "end": "1377440"
  },
  {
    "text": "people are watching why go all the way back to the data store it's probably going to end up in my cash so this is where I use elasticache I quickly look",
    "start": "1377440",
    "end": "1384039"
  },
  {
    "text": "it up and say hey does elastic cash know about this I want fast response to that I don't want to waste time you know I know Dynamo is fast but if I can make a",
    "start": "1384039",
    "end": "1390799"
  },
  {
    "text": "last of cash faster I'll do it you know so it's a way to sort of frontload um that information for hot or popular",
    "start": "1390799",
    "end": "1396039"
  },
  {
    "text": "topics now as it turns out you don't always get a hit in your cash so you know then you have to then",
    "start": "1396039",
    "end": "1402840"
  },
  {
    "text": "go well what do I do if I miss what if I miss that cach it that's when you then go to the source self Dynamo DB to pull",
    "start": "1402840",
    "end": "1409159"
  },
  {
    "text": "out the title description metadata tags all that kind of fun stuff pull it back into more metadata which goes to the",
    "start": "1409159",
    "end": "1416400"
  },
  {
    "text": "user and then of course you'll notice the video hasn't been returned yet that's because the metadata is now referencing where that video location is",
    "start": "1416400",
    "end": "1422600"
  },
  {
    "text": "and instead of serving it out of my application directly I'm going to serve that out of S3 through cloudfront right",
    "start": "1422600",
    "end": "1429200"
  },
  {
    "text": "so that's how I'm now serving and accessing all that information now they can hit S3 directly if it's a less popular video instead of edge caching it",
    "start": "1429200",
    "end": "1435000"
  },
  {
    "text": "or they could go through cloudfront depends on what the right model is for that item um now if we look at recommendations",
    "start": "1435000",
    "end": "1440880"
  },
  {
    "text": "this is a really popular topic um we see a lot of folks uh doing recommendations these days has actually become more of an expectation than um than a an added",
    "start": "1440880",
    "end": "1449000"
  },
  {
    "text": "value feature people expect recommendations they expect that what other people are doing kind of model A lot of times in apps and so applications",
    "start": "1449000",
    "end": "1456200"
  },
  {
    "text": "you know this is an example where you got local you know local storage of user logs information on the web server um",
    "start": "1456200",
    "end": "1462080"
  },
  {
    "text": "which are going to be aggregated over time sort of dumped into S3 as a regular log rotation type model um that data can",
    "start": "1462080",
    "end": "1468799"
  },
  {
    "text": "then actually be analyzed in elastic map reduce where the icon spins very",
    "start": "1468799",
    "end": "1475600"
  },
  {
    "text": "exciting that took me a while to figure out um and uh icon after the spinning icon finishes um we get metadata we get",
    "start": "1475600",
    "end": "1483080"
  },
  {
    "text": "a whole bunch of pointers and reference information to say hey if if a customer you know looks up video x you should",
    "start": "1483080",
    "end": "1488720"
  },
  {
    "text": "recommend videos YZ and and you know one um that metadata should live someplace",
    "start": "1488720",
    "end": "1493960"
  },
  {
    "text": "that's fast easily accessible Dynamo DB and potentially even elas the cache up the",
    "start": "1493960",
    "end": "1499200"
  },
  {
    "text": "layer um the same thing occurs when you go into analytics right you've got again",
    "start": "1499200",
    "end": "1504399"
  },
  {
    "text": "your user logs they flow down into S3 S3 does the analysis or sorry S3",
    "start": "1504399",
    "end": "1510399"
  },
  {
    "text": "holds it EMR does the analysis we get some spinning icons again wait for it there we go",
    "start": "1510399",
    "end": "1516120"
  },
  {
    "text": "yes um and this generates tables uh so it actually generates data warehouse information like aggregations of user",
    "start": "1516120",
    "end": "1523240"
  },
  {
    "text": "activity which then dump right into red shift and now you have your dashboard",
    "start": "1523240",
    "end": "1528279"
  },
  {
    "text": "your data warehouse information um so that's my part of it um I'm sure you're all curious about what are some dos and",
    "start": "1528279",
    "end": "1534080"
  },
  {
    "text": "don'ts some what to do what not to do with some of these Services um and so I'll turn that over to SAA who's got more detail there for",
    "start": "1534080",
    "end": "1541440"
  },
  {
    "text": "you so I don't have any spinning icons so I'm going to go into the boring stuff of when to use when not to use what are",
    "start": "1546440",
    "end": "1553360"
  },
  {
    "text": "the best practices you know often times we talk to a lot of customers uh as I'm doing a call with the customer going",
    "start": "1553360",
    "end": "1559120"
  },
  {
    "text": "through the architecture reviewing what to use what goes in my head is really I have all of these Services you know when",
    "start": "1559120",
    "end": "1565320"
  },
  {
    "start": "1560000",
    "end": "1560000"
  },
  {
    "text": "to use them when not to use them and what are some of the top best practices obviously we don't have an hour for each",
    "start": "1565320",
    "end": "1571200"
  },
  {
    "text": "one of them I'm going to touch on some of the top uh you know dos and don'ts and breast practices here um so let's",
    "start": "1571200",
    "end": "1577919"
  },
  {
    "text": "take uh elastic cache um so for people who don't know this uh it's a managed in-memory caching Service uh it's mcash",
    "start": "1577919",
    "end": "1584440"
  },
  {
    "text": "D uh compliant which means all your existing code that you m cach t uh can",
    "start": "1584440",
    "end": "1589480"
  },
  {
    "text": "use uh elastic cache Service uh the primary thing that comes to my mind when I'm thinking about cash is a millisecond",
    "start": "1589480",
    "end": "1596360"
  },
  {
    "text": "or 500 microc right if let's say if your cache cluster is running on an AC which is an availability Zone that's different",
    "start": "1596360",
    "end": "1603200"
  },
  {
    "text": "from your application right you you want to build your application so it can fill over between availability zones so your",
    "start": "1603200",
    "end": "1609320"
  },
  {
    "text": "cash cluster may be in one of the availability zones so typically you know AZ to a is about a millisecond latency",
    "start": "1609320",
    "end": "1616000"
  },
  {
    "text": "uh and if the app is talking to the cluster in the same a you're getting something in the order of 500 milliseconds microc um you know uh",
    "start": "1616000",
    "end": "1623919"
  },
  {
    "text": "access times right it depends upon the instance type that you use I mean the higher the instance type you know like M M24 XLS will give you like 100",
    "start": "1623919",
    "end": "1630559"
  },
  {
    "text": "milliseconds microsc and then um like smaller instance types that M on Smalls",
    "start": "1630559",
    "end": "1636200"
  },
  {
    "text": "uh maybe give you around you know 500 milliseconds right this is with the test data set that we did the testing we uh",
    "start": "1636200",
    "end": "1642080"
  },
  {
    "text": "so uh the data that you want to put in Cache is really transient in case the cache node dies you know the data goes",
    "start": "1642080",
    "end": "1648240"
  },
  {
    "text": "away so you really don't want to be storing your persistent data uh in a cache um the classic use Cas is you know",
    "start": "1648240",
    "end": "1655840"
  },
  {
    "text": "if you are you know if you're going to the everybody's going to the front page of your site you're showing the most popular videos or most frequently",
    "start": "1655840",
    "end": "1662320"
  },
  {
    "text": "accessed stuff you know behind the behind the scene the application is doing the same type of query you know give me the public videos or the most",
    "start": "1662320",
    "end": "1668919"
  },
  {
    "text": "popular videos over and over again rather than hitting your database to to materialize that result you may actually",
    "start": "1668919",
    "end": "1675120"
  },
  {
    "text": "you know take the string do an mdy hash of that and stick the results you know the key and the value in an elastic",
    "start": "1675120",
    "end": "1681840"
  },
  {
    "text": "cache cluster and then go after the elastic cache cluster to get the data okay that's a so this takes away massive",
    "start": "1681840",
    "end": "1688519"
  },
  {
    "text": "read uh you know CP utilization you know on your on your relational database or",
    "start": "1688519",
    "end": "1694279"
  },
  {
    "text": "if you're using a no SQL store you don't have to pay for the provision you know read capacity units you know to to",
    "start": "1694279",
    "end": "1700200"
  },
  {
    "text": "surface these you know things or and over again um and then the second thing is in some cases what happens is you",
    "start": "1700200",
    "end": "1706200"
  },
  {
    "text": "have counters right you know a page counters or if you're in a game scenario you know you you know number of you know",
    "start": "1706200",
    "end": "1711840"
  },
  {
    "text": "kills or whatnot right these are transient data in some cases it's okay to lose a little bit of data you know",
    "start": "1711840",
    "end": "1717720"
  },
  {
    "text": "the last you know few counts that you have if you have a transient counter it's much it's much easier to put that",
    "start": "1717720",
    "end": "1723120"
  },
  {
    "text": "on uh in a in in elastic cache rather than actually going after you know putting that in a database because every",
    "start": "1723120",
    "end": "1729120"
  },
  {
    "text": "time you put this in a database you know there is there is locking blocking Etc going on even if you're putting in a nosql store what happens is you know",
    "start": "1729120",
    "end": "1736000"
  },
  {
    "text": "you're actually nailing one single machine at the end of the day and then depending upon your throughput you know",
    "start": "1736000",
    "end": "1741440"
  },
  {
    "text": "it may not be handle uh it may not handle that kind of a you know request rate right so you want to actually put",
    "start": "1741440",
    "end": "1747200"
  },
  {
    "text": "that in cash and then actually have have some kind of a service actually collecting these uh you know Aggregates",
    "start": "1747200",
    "end": "1752360"
  },
  {
    "text": "and pushing it back to the back to the back to the database right uh so those are some of the primary scenarios",
    "start": "1752360",
    "end": "1757840"
  },
  {
    "text": "typically you know people tend to get somewhere in the region of 5 to 10x uh faster reads and writes by by going to",
    "start": "1757840",
    "end": "1764279"
  },
  {
    "text": "Cache um so again uh when not use this please don't store your persistent data in cash and expect that to be alive you",
    "start": "1764279",
    "end": "1771080"
  },
  {
    "text": "know it may go away um and then also when you have infrequently used data sets right um so if there's no point in",
    "start": "1771080",
    "end": "1778600"
  },
  {
    "text": "putting that in cash because you know you're going to probably put a TTL on that and it's going to go away and me you pay the extra price of you know",
    "start": "1778600",
    "end": "1784720"
  },
  {
    "text": "warming of the cash and that'll never be used so if you have infrequently used data set it's probably better off going to your data store um so some of the",
    "start": "1784720",
    "end": "1791559"
  },
  {
    "text": "best practices um and um you know the top best practice is actually use T TLS",
    "start": "1791559",
    "end": "1797919"
  },
  {
    "start": "1794000",
    "end": "1794000"
  },
  {
    "text": "I mean the shorter ttls are better um and then um you know",
    "start": "1797919",
    "end": "1804000"
  },
  {
    "text": "if and and it's it's amazing how many cases we see people don't use ctls and complain about the data being stale",
    "start": "1804000",
    "end": "1810480"
  },
  {
    "text": "right it's because you know you're hitting a cache and then you get you're getting SC tail data um it's always a",
    "start": "1810480",
    "end": "1815840"
  },
  {
    "text": "good practice to you know pass on the memcache uh the you know the objects that you retrieved in your application",
    "start": "1815840",
    "end": "1821880"
  },
  {
    "text": "you know if you have multiple classes you can pass that object along rather than each class going and getting this getting your m cach D cluster to get",
    "start": "1821880",
    "end": "1828440"
  },
  {
    "text": "back you know your data uh those are some of the top best practices and then in addition to the cach nodes actually",
    "start": "1828440",
    "end": "1835880"
  },
  {
    "text": "uh using the memory for your objects there's also a little bit of a connection overhead in Cache nodes often times we feel you know if there's a",
    "start": "1835880",
    "end": "1841960"
  },
  {
    "text": "large number of connections if you have very few cache nodes um then the memory comes out of the same you know pool of",
    "start": "1841960",
    "end": "1847399"
  },
  {
    "text": "memory therefore you'll see a lot of swap so whenever you see a swap chances are you know you you have a large number",
    "start": "1847399",
    "end": "1852960"
  },
  {
    "text": "of connections you know to a specific node uh you may want to increase the connection memory that you give um as",
    "start": "1852960",
    "end": "1859840"
  },
  {
    "text": "well as uh potentially try to increase the size of the size of the node in your cache cluster so those are some of the",
    "start": "1859840",
    "end": "1865639"
  },
  {
    "text": "top practices obviously we have cloudwatch metrics and alarms that you can set on you know that may that may",
    "start": "1865639",
    "end": "1871159"
  },
  {
    "text": "page you or actually call another system to do the adjustments automatically uh so those are some of the top uh",
    "start": "1871159",
    "end": "1876639"
  },
  {
    "start": "1876000",
    "end": "1876000"
  },
  {
    "text": "practices here moving on to Cloud search uh when I when I move on to Cloud search what really comes to my mind is the",
    "start": "1876639",
    "end": "1882440"
  },
  {
    "text": "amazon.com you know landing page whenever I go to amazon.com and I try to buy a product",
    "start": "1882440",
    "end": "1887799"
  },
  {
    "text": "um you know I tried to type in the you know I was looking for a clicker I was not sure they would give me a clicker",
    "start": "1887799",
    "end": "1892919"
  },
  {
    "text": "here so if you type in a clicker it shows you oh these are the top hits uh on the left side it also shows you oh by",
    "start": "1892919",
    "end": "1899960"
  },
  {
    "text": "the way the price range between you know um let's say $10 or $20 or 30 to 40 uh",
    "start": "1899960",
    "end": "1906519"
  },
  {
    "text": "this many products have been found we call that fating uh in the case of cloud surch um so if you want fating or",
    "start": "1906519",
    "end": "1913679"
  },
  {
    "text": "ranking uh it is much easier to stick your data into into uh Cloud search and",
    "start": "1913679",
    "end": "1919320"
  },
  {
    "text": "have it do this for you you know simply you send you send the search strings and it gives you a result setback you know",
    "start": "1919320",
    "end": "1925559"
  },
  {
    "text": "in in a fashion that includes the fating and and the ranking as well uh so um",
    "start": "1925559",
    "end": "1930840"
  },
  {
    "text": "again uh there's no search expertise required as uh math was pointing out if you have metadata pertaining to a video",
    "start": "1930840",
    "end": "1937679"
  },
  {
    "text": "or a photo you literally convert that into a Json or an XML you know you put an object ID or or or or a Metadate ID",
    "start": "1937679",
    "end": "1945480"
  },
  {
    "text": "there and and actually uh you know stick that entire payload into elastic um you know sorry Cloud",
    "start": "1945480",
    "end": "1951440"
  },
  {
    "text": "search uh and then it automatically builds the index for you when I think about Cloud search I'm thinking about an",
    "start": "1951440",
    "end": "1957799"
  },
  {
    "text": "index you know for the data that I have you know I'm not thinking of this as being a persistent data store again you",
    "start": "1957799",
    "end": "1964840"
  },
  {
    "text": "know don't put your persistent data in Cloud search uh you need need to have a",
    "start": "1964840",
    "end": "1970159"
  },
  {
    "text": "database actually keeping the persistent data you know just think of that as an efficient index for doing full taex",
    "start": "1970159",
    "end": "1976600"
  },
  {
    "text": "searches um so uh the other thing is um you know data must be fully denormalized if",
    "start": "1976600",
    "end": "1982679"
  },
  {
    "text": "you're if you're dealing with the relational data with a one to many relationships so in order to convert that into an XML or Json document you'll",
    "start": "1982679",
    "end": "1989440"
  },
  {
    "text": "have to basically you know do a denormalization and then have an object ID uh which would be the parent ID and",
    "start": "1989440",
    "end": "1996679"
  },
  {
    "text": "then uh you know put the payload as multiple multiple items uh in your Json",
    "start": "1996679",
    "end": "2001799"
  },
  {
    "text": "payload or or XML payload um in terms of the top best practices you know you should batch your documents uh we allow",
    "start": "2001799",
    "end": "2008880"
  },
  {
    "start": "2008000",
    "end": "2008000"
  },
  {
    "text": "batch sizes of 5 megabytes uh so typically it'll be best to you know send",
    "start": "2008880",
    "end": "2014840"
  },
  {
    "text": "batched updates to the service um and then the other piece is you know don't",
    "start": "2014840",
    "end": "2019919"
  },
  {
    "text": "stick all your uh complete metadata for your object for example amazon.com has thousands of attributes pertaining to a",
    "start": "2019919",
    "end": "2027279"
  },
  {
    "text": "product right what they stick in their you know cache is is a subset of them",
    "start": "2027279",
    "end": "2032399"
  },
  {
    "text": "that are very relevant for people when you're searching their those you know very relevant for the search search you",
    "start": "2032399",
    "end": "2037559"
  },
  {
    "text": "know in order to get the complete data you would actually go back into your relational or nor SQL uh database to get",
    "start": "2037559",
    "end": "2043039"
  },
  {
    "text": "back the to get back the results done um includ and then also in many cases people are actually Computing you know",
    "start": "2043039",
    "end": "2049520"
  },
  {
    "text": "the in the keynote actually the the the founder of Netflix mentioned how important it is in their landing page to",
    "start": "2049520",
    "end": "2055560"
  },
  {
    "text": "show videos that are relevant for you you know what they're also probably doing is you know Computing a relevant",
    "start": "2055560",
    "end": "2060638"
  },
  {
    "text": "score for you um and then they are sticking that relevance to score you know into each one of those videos right",
    "start": "2060639",
    "end": "2067000"
  },
  {
    "text": "right so so I think uh so in other words if you want to so you you you should probably also send a relevant score uh",
    "start": "2067000",
    "end": "2073520"
  },
  {
    "text": "pertaining to the data set uh as part of the data set that you sent to Cloud search so actually you could actually",
    "start": "2073520",
    "end": "2079960"
  },
  {
    "text": "tell it to Rack just not on text relevance but also factor in your own computed relevance I think it's a best",
    "start": "2079960",
    "end": "2086320"
  },
  {
    "text": "practice to go ahead and compute that relevance and stick that as part of your indexable data in Cloud search um also",
    "start": "2086320",
    "end": "2093000"
  },
  {
    "text": "stop wordss depending upon your domain you know some words may be very common for your domain there's no point in the",
    "start": "2093000",
    "end": "2098839"
  },
  {
    "text": "indexer indexing that and the search trying to you know find text relevance based on that so we have the concept of",
    "start": "2098839",
    "end": "2106000"
  },
  {
    "text": "stop words uh which essentially tell the indexer not to search those words and also not to care about those words when",
    "start": "2106000",
    "end": "2112560"
  },
  {
    "text": "somebody are typing in to ignore those words you know make sure you you give us the right set of right set of you know",
    "start": "2112560",
    "end": "2118640"
  },
  {
    "text": "stop wordss um the other piece is also increasing your query times are proportional to amount of computations",
    "start": "2118640",
    "end": "2125480"
  },
  {
    "text": "uh that the cloud search does I mean it's an inmemory index it does literally thousands of intersections per second",
    "start": "2125480",
    "end": "2130720"
  },
  {
    "text": "very efficiently and very fast in milliseconds uh but yet you know uh sometimes when I when I when I'm",
    "start": "2130720",
    "end": "2137000"
  },
  {
    "text": "searching let's say if you have a movie database I'm indexing all the all the details in the IMDb movie database I'm",
    "start": "2137000",
    "end": "2143440"
  },
  {
    "text": "searching Gone With the Wind if if the user tells me hey I'm searching the title Gone With the Wind and if you give",
    "start": "2143440",
    "end": "2149839"
  },
  {
    "text": "them an option to search in the title gone with the wi the search is much easier to find for the for the for the",
    "start": "2149839",
    "end": "2155920"
  },
  {
    "text": "cloud search to find this data than actually trolling through a whole bunch of other irrelevant uh you know description Fields so wherever it's",
    "start": "2155920",
    "end": "2162280"
  },
  {
    "text": "possible it is best for you to hint us to search in a relevant uh in a relevant area so those are some of the best",
    "start": "2162280",
    "end": "2168520"
  },
  {
    "text": "practices uh there and then you know switching on to RDS um RDS is a managed",
    "start": "2168520",
    "end": "2173599"
  },
  {
    "start": "2171000",
    "end": "2171000"
  },
  {
    "text": "relational database service U we support three engines my SQL Oracle and SQL Server um and then when to use RDS again",
    "start": "2173599",
    "end": "2181119"
  },
  {
    "text": "this a two-part question you know when to use a relational database versus not a relational database and when to use RDS versus building your own um you know",
    "start": "2181119",
    "end": "2189800"
  },
  {
    "text": "database relational database on top of ec2 and EBS um so typically went to use",
    "start": "2189800",
    "end": "2195319"
  },
  {
    "text": "a relational database when you have a large number of transactions when you have complex queries um you know",
    "start": "2195319",
    "end": "2200760"
  },
  {
    "text": "obviously you know relational database even though you know it's an awesome Swiss army knife to solve that problem",
    "start": "2200760",
    "end": "2206160"
  },
  {
    "text": "uh so I love Swiss Army knives so I always try to carry one before all these rules came on in the airplanes not to carry tools um nevertheless I think",
    "start": "2206160",
    "end": "2213760"
  },
  {
    "text": "going back uh from RDS when to use RDS again um RDS is fantastic you know it handles",
    "start": "2213760",
    "end": "2220520"
  },
  {
    "text": "um backups it handles high availability it handles patching uh it takes away the",
    "start": "2220520",
    "end": "2226760"
  },
  {
    "text": "entire mark from a dbas in from the DBA World um you know the that the backups",
    "start": "2226760",
    "end": "2232079"
  },
  {
    "text": "are very reliy stored in S3 which has 11 9's durability uh Etc um so I think if",
    "start": "2232079",
    "end": "2238200"
  },
  {
    "text": "you want to offload all of this and focus on your application development and semantics um and AR tuning your",
    "start": "2238200",
    "end": "2243400"
  },
  {
    "text": "queries Etc you know it's clearly an awesome platform to use use uh now there are some limits there um you know it",
    "start": "2243400",
    "end": "2249599"
  },
  {
    "text": "supports a 1 tbte uh database is the maximum that you can you can use there um and then so if you you know have a",
    "start": "2249599",
    "end": "2256359"
  },
  {
    "text": "two or three terabyte database that you need obviously you cannot use RDS RDS for that uh in many cases you know",
    "start": "2256359",
    "end": "2262119"
  },
  {
    "text": "customers these days come back to us routinely and say I want to build a system that supports uh you know",
    "start": "2262119",
    "end": "2267400"
  },
  {
    "text": "hundreds of thousands of requests per second right um and then in some cases what happens is a single node right uh",
    "start": "2267400",
    "end": "2274520"
  },
  {
    "text": "most of the you know the MySQL Oracle andq serway support here as part of RDS or a single node they're not a scaleout",
    "start": "2274520",
    "end": "2280319"
  },
  {
    "text": "solution uh so you can increase the size of the node uh by increasing uh by just",
    "start": "2280319",
    "end": "2285520"
  },
  {
    "text": "pushing a few buttons in the in the AWS console just you know uh modify database instance change it from M1 small to M2",
    "start": "2285520",
    "end": "2292680"
  },
  {
    "text": "four excels right all of a sudden rather than 1.3 GB of memory um in a few minutes you are actually you know",
    "start": "2292680",
    "end": "2299240"
  },
  {
    "text": "scaling your instance to have a 60 GB of memory or 67 GB of memory to be precise so even though we allow that but the",
    "start": "2299240",
    "end": "2305520"
  },
  {
    "text": "maximum amount of memory there is you know is is 67 GB of memory in an M24 XL",
    "start": "2305520",
    "end": "2311119"
  },
  {
    "text": "so if your workload is going beyond that of a single box right then obviously",
    "start": "2311119",
    "end": "2316280"
  },
  {
    "text": "this is not a good fit in which case most most likely a nosql solution would fit in fairly well um and um and if",
    "start": "2316280",
    "end": "2324400"
  },
  {
    "text": "you're doing a very uh simple access pattern you know as I drill down as I'm talking to more and more customers I",
    "start": "2324400",
    "end": "2330200"
  },
  {
    "text": "drill down to the scenarios what constitutes the bigger portion of the load it typically turns out that one or",
    "start": "2330200",
    "end": "2335839"
  },
  {
    "text": "two tables get nailed with that kind of a request rate among the entire schema in many time in many cases it it makes a",
    "start": "2335839",
    "end": "2343680"
  },
  {
    "text": "lot of sense to actually move those two or three tables and explore the possibility of moving that to like a",
    "start": "2343680",
    "end": "2349000"
  },
  {
    "text": "nosql sour such as Dynamo um so I highly recommend you know you not put those tables in um in in in a relational",
    "start": "2349000",
    "end": "2356280"
  },
  {
    "text": "database uh for example so some best practices around that sometime ago we launched uh you know RDS provision doops",
    "start": "2356280",
    "end": "2363400"
  },
  {
    "text": "uh which under the cover uses uh EBS provision doops um if you're running a production database there is in most",
    "start": "2363400",
    "end": "2370760"
  },
  {
    "text": "cases uh EBS provision iops is the best fit it gives you know precisely you know",
    "start": "2370760",
    "end": "2376920"
  },
  {
    "text": "what you don't want to do with the database is play games with for example the problem with EBS standard iops is uh",
    "start": "2376920",
    "end": "2383119"
  },
  {
    "text": "typically we tend to you tend to get about 100 iops per volume you know you can burst in some cases to 400 iops but",
    "start": "2383119",
    "end": "2389839"
  },
  {
    "text": "you may not be able to you know get even 100 iops let's say if there is a you know a lot of users it's a multitenant",
    "start": "2389839",
    "end": "2395760"
  },
  {
    "text": "system behind the the covers uh and then we don't actually you know hard allocate you know um the amount of resources the",
    "start": "2395760",
    "end": "2402359"
  },
  {
    "text": "EVS volume gets so if you want to have a a predictable performance and guaranteed",
    "start": "2402359",
    "end": "2408000"
  },
  {
    "text": "performance uh for the most part uh you should be using provisioned iops there is no reason for a database workload in",
    "start": "2408000",
    "end": "2414200"
  },
  {
    "text": "many cases not to use provision iops unless you're on a test phase or a you know um R you really you know don't care",
    "start": "2414200",
    "end": "2422119"
  },
  {
    "text": "for it you know um so also we support this uh EBS optimized instances uh e EBS",
    "start": "2422119",
    "end": "2428319"
  },
  {
    "text": "optimized instances such as you know M1 large M1 extra large M24 XLS are are the",
    "start": "2428319",
    "end": "2433720"
  },
  {
    "text": "best uh instance types to use um in which case what what happens there is we hard allocate uh for in the case of M1",
    "start": "2433720",
    "end": "2440880"
  },
  {
    "text": "large we we hard allocate you know 500 megabits per second dedicated bandwidth uh on the instance to talk to EBS and",
    "start": "2440880",
    "end": "2448520"
  },
  {
    "text": "it's uh it's a th000 megabits per second in the case of M1 extra large and M2 4xls and um um if it's a production",
    "start": "2448520",
    "end": "2456520"
  },
  {
    "text": "system you should be using multi-az for high availability which does um synchronous replication to instances",
    "start": "2456520",
    "end": "2463839"
  },
  {
    "text": "running in multiple data centers right when you do a right to the database the Right comes back after it is persisted",
    "start": "2463839",
    "end": "2469560"
  },
  {
    "text": "to do two data centers uh in all this happens in about 2 milliseconds when you look at the dis statistics right so it's",
    "start": "2469560",
    "end": "2475880"
  },
  {
    "text": "a little bit of a higher latency but it's well worth the price uh if a node goes down we automatically fail the end",
    "start": "2475880",
    "end": "2481560"
  },
  {
    "text": "point over to the new instance so if you're thinking High availability you should be thinking RDS multi a uh read",
    "start": "2481560",
    "end": "2487800"
  },
  {
    "text": "replicas again if you have a workload where you have you know predominantly large um reads and a lower amount of um",
    "start": "2487800",
    "end": "2495839"
  },
  {
    "text": "rights I think by all means you can fan out the reads by using read replicas um so moving on to Dynamo DB uh",
    "start": "2495839",
    "end": "2503440"
  },
  {
    "start": "2500000",
    "end": "2500000"
  },
  {
    "text": "obviously I wrote the p uh the spec for this I'm passionate about this product uh what we we had in mind when we were",
    "start": "2503440",
    "end": "2508960"
  },
  {
    "text": "designing this product was massive scale predictable performance and a simple query pattern if you're doing gets and",
    "start": "2508960",
    "end": "2515359"
  },
  {
    "text": "puts and if you're pay payload is anywhere in the region of let's say uh you know uh less than 64 uh kilobytes um",
    "start": "2515359",
    "end": "2522920"
  },
  {
    "text": "you know this is the store for it um most of the 1 kilobyte payloads um the",
    "start": "2522920",
    "end": "2529040"
  },
  {
    "text": "the put and the get latencies are in the order of about 3 to four milliseconds uh in the case of a put within the 3",
    "start": "2529040",
    "end": "2534839"
  },
  {
    "text": "milliseconds we've durably written to at least two data centers uh the put comes back by the time the put came back your",
    "start": "2534839",
    "end": "2540839"
  },
  {
    "text": "data is persisted in two dat it's extremely you know durable um and then you can can also control per table the",
    "start": "2540839",
    "end": "2548240"
  },
  {
    "text": "number of read and ride iops that you need um you can dial up the read uh dial down the RS Etc right so these are",
    "start": "2548240",
    "end": "2554880"
  },
  {
    "text": "independent knobs right these are not related so you can you know most of the developers you know um create a table",
    "start": "2554880",
    "end": "2561800"
  },
  {
    "text": "provision let's say 100 iops or 10 iops and then when they go to production they simply call an API say here's the table",
    "start": "2561800",
    "end": "2567880"
  },
  {
    "text": "name increase the read iops to 10,000 increase the right iops to 20,000 let's say if they their application becomes",
    "start": "2567880",
    "end": "2574359"
  },
  {
    "text": "popular they turn that up to1 ,000 and 200,000 right simply an API call wait",
    "start": "2574359",
    "end": "2579920"
  },
  {
    "text": "for a few minutes uh your read and write workloads are still going on at the old level while this is while this is",
    "start": "2579920",
    "end": "2585359"
  },
  {
    "text": "happening yet you know magically with no change in the application code you have your you know database scaling up for",
    "start": "2585359",
    "end": "2592520"
  },
  {
    "text": "you right um so where not to use this if you have complex joints complex transactions it's not the best place to",
    "start": "2592520",
    "end": "2598640"
  },
  {
    "text": "use this uh I see I have six minutes I'm going to zip through this uh as many as I can um so I think uh if you have a in",
    "start": "2598640",
    "end": "2605319"
  },
  {
    "text": "a massive um you know reads and writes it's there's two types of tables you can",
    "start": "2605319",
    "end": "2610520"
  },
  {
    "text": "create one a table with a hash key and a hash range key you know typically it's best to keep with the table with the hash key if you have massive uh",
    "start": "2610520",
    "end": "2617119"
  },
  {
    "text": "throughput that you need uh if you're using time serious data it's best to use a table per day you know let's say if",
    "start": "2617119",
    "end": "2622680"
  },
  {
    "text": "you're recording instruments um you know you have a weather recording instrument that sends time serus data or a stock",
    "start": "2622680",
    "end": "2628200"
  },
  {
    "text": "ticker that comes along you know usually have a a table per week what you can do is as you move forward you can dial down",
    "start": "2628200",
    "end": "2635240"
  },
  {
    "text": "the the right on the older tables you're not writing to them anymore you're writing to the current table and then you can dial down the reads as well you",
    "start": "2635240",
    "end": "2641520"
  },
  {
    "text": "can keep the current current Table hot with the with the am of w Ops so therefore you reduce the cost um as well",
    "start": "2641520",
    "end": "2647400"
  },
  {
    "text": "doing that um so it has conditional updates um and then it all also allows",
    "start": "2647400",
    "end": "2652440"
  },
  {
    "text": "you to model one to one to in relationship just watch out for heart keys and heart partitions we have a section on this in the docks go ahead",
    "start": "2652440",
    "end": "2658359"
  },
  {
    "text": "and look at that one uh map ruce obviously for map ruce you know I'm thinking when I'm thinking map ruce I'm",
    "start": "2658359",
    "end": "2664319"
  },
  {
    "start": "2659000",
    "end": "2659000"
  },
  {
    "text": "thinking large bat jobs large large amounts of data in the gigabytes or terabytes or pedabytes um and then uh",
    "start": "2664319",
    "end": "2671880"
  },
  {
    "text": "you know parallel scans right if you're using a hive Hive is a language it a SQL like which can you know run a query that",
    "start": "2671880",
    "end": "2678079"
  },
  {
    "text": "can scan your massive data set and do computations so any time you're thinking batch analytics you know this is",
    "start": "2678079",
    "end": "2684319"
  },
  {
    "text": "something that you should absolutely consider uh when not to use it right when you when you when you need answers",
    "start": "2684319",
    "end": "2690000"
  },
  {
    "text": "in seconds or seconds uh this is not the best place to use it when you have you know thousands of concurrent users you",
    "start": "2690000",
    "end": "2695440"
  },
  {
    "text": "may want to make materialize the data here and put it in a relational store but this is not the place to send you know thousands of concurrent users for",
    "start": "2695440",
    "end": "2702240"
  },
  {
    "text": "example um now uh some best practices there um elastic map produces seamlessly",
    "start": "2702240",
    "end": "2707720"
  },
  {
    "text": "integrated with S3 so you should use S3 for storing your intermediate uh data and high computations you know",
    "start": "2707720",
    "end": "2714640"
  },
  {
    "text": "intermediate computations um and um and also use spot instances um to to reduce",
    "start": "2714640",
    "end": "2721359"
  },
  {
    "text": "your cost especially uh in your transient in your transient clusters where you spend up a cluster to do a",
    "start": "2721359",
    "end": "2726920"
  },
  {
    "text": "specific computation and shut it down um and uh in many cases it's best to tune",
    "start": "2726920",
    "end": "2732240"
  },
  {
    "text": "the instance size rather than mucking around with your code to get the job done um red shift uh we launched um this",
    "start": "2732240",
    "end": "2739680"
  },
  {
    "text": "product today uh you know it can take anywhere from um store hundreds of",
    "start": "2739680",
    "end": "2745079"
  },
  {
    "text": "gigabytes to to pedabytes of data um U and then there's two two instance types",
    "start": "2745079",
    "end": "2751079"
  },
  {
    "text": "there you know an Excel and an 8xl and then Excel XL can keep about 2",
    "start": "2751079",
    "end": "2757359"
  },
  {
    "text": "terabyt of compressed data on disk and an 8 XL instance can actually keep about",
    "start": "2757359",
    "end": "2763000"
  },
  {
    "text": "16 terabytes of data um on disk so um the classic scenario here is if you have",
    "start": "2763000",
    "end": "2768839"
  },
  {
    "text": "complex queries for summarizing historical data right that's the that's the classic use case here um obviously",
    "start": "2768839",
    "end": "2774960"
  },
  {
    "text": "the updates are batched updates um and it supports compression uh so the",
    "start": "2774960",
    "end": "2780240"
  },
  {
    "text": "price-wise it's about 10 times cheaper compression wise it can do about you know uh we get about one to what 10",
    "start": "2780240",
    "end": "2786119"
  },
  {
    "text": "times um compression on disk uh so it's a massive place to put you know park lots of data that you're doing some sort",
    "start": "2786119",
    "end": "2793119"
  },
  {
    "text": "of summarizations uh what not to do with this if if you're thinking tens tens of thousands of requests this is not the",
    "start": "2793119",
    "end": "2798960"
  },
  {
    "text": "place to do it we typically T tend to think of it you know tens of requests you know churning or doing a lot of",
    "start": "2798960",
    "end": "2805960"
  },
  {
    "text": "computations um rather than you know pointing hundreds of requests if you have hundreds of requests that you want",
    "start": "2805960",
    "end": "2811200"
  },
  {
    "text": "to send you want to do the computation here and keep it in a cache or keep it in another for example micro strategy",
    "start": "2811200",
    "end": "2816880"
  },
  {
    "text": "you know builds caches on top of this right they may they may be able to serve a lot more than tens of requests there",
    "start": "2816880",
    "end": "2822400"
  },
  {
    "text": "so you were thinking really about some kind of a mid tier that keeps the cache and the computations being done in rad",
    "start": "2822400",
    "end": "2827960"
  },
  {
    "text": "shift um and um obviously uh in terms of the best practices um you know start out",
    "start": "2827960",
    "end": "2834559"
  },
  {
    "text": "the injection pipeline it has connectors to Dynamo DB um as well as connectors to",
    "start": "2834559",
    "end": "2840040"
  },
  {
    "text": "S3 what that really means is you log on using your you know squirrle SQL or one of the command line tools uh into into",
    "start": "2840040",
    "end": "2847480"
  },
  {
    "text": "this into the service and then simply say copy you know from S3 bucket with",
    "start": "2847480",
    "end": "2853440"
  },
  {
    "text": "the file with this prefix into my table here is my user you know AWS user credentials right the secret access key",
    "start": "2853440",
    "end": "2860599"
  },
  {
    "text": "and the and the on the on the on the AWS key access key and bingo you know you have multiple streams of parallel loads",
    "start": "2860599",
    "end": "2867240"
  },
  {
    "text": "happening from both S3 as well as Dynamo DB you know that's what we I start out the injection Pipeline and then the",
    "start": "2867240",
    "end": "2873440"
  },
  {
    "text": "second thing is provision the right cluster size as I told you the there are two types of clusters there um and then",
    "start": "2873440",
    "end": "2878720"
  },
  {
    "text": "I think you can use you know one of them I think I'm going to skip not really much else to tune there's no point",
    "start": "2878720",
    "end": "2883760"
  },
  {
    "text": "there's no adding indexes you know we take care of that for you uh it's columnar index it's automatically",
    "start": "2883760",
    "end": "2889000"
  },
  {
    "text": "compressed on this there's really nothing much else to do uh there um obviously S3 um the top thing that comes",
    "start": "2889000",
    "end": "2896000"
  },
  {
    "text": "to mind here is high durability the 119 durability so typically for example",
    "start": "2896000",
    "end": "2902040"
  },
  {
    "text": "amazon.com um uses Oracle and then we put the all Oracle backups using rman",
    "start": "2902040",
    "end": "2907800"
  },
  {
    "text": "into into into S3 classic use case right there um in the case of a database world",
    "start": "2907800",
    "end": "2913559"
  },
  {
    "text": "you know you want to stick I think of this as a blob store right you know put your metadata in a relational or nor SQL",
    "start": "2913559",
    "end": "2918839"
  },
  {
    "text": "store put your blob data into into S3 so um and uh you know typically when I",
    "start": "2918839",
    "end": "2924920"
  },
  {
    "text": "think of the latencies there I think of you know like hundreds of milliseconds right uh if you need anything less than",
    "start": "2924920",
    "end": "2931640"
  },
  {
    "text": "a 10 millisecond I would not stick that into S3 so I would stick that into Dynamo DV for example typically these",
    "start": "2931640",
    "end": "2937000"
  },
  {
    "text": "payloads are in the region of let's say less than 64 kilobytes if it's more than 64 kilobytes of typically you can stand",
    "start": "2937000",
    "end": "2943079"
  },
  {
    "text": "about 100 millisecond latency or more you know try putting that in S3 you may be surprised what you can get by and",
    "start": "2943079",
    "end": "2949880"
  },
  {
    "text": "also the cost Factor right you know today we announced it's about 9 cents per gigabyte per month right Dynamo is",
    "start": "2949880",
    "end": "2955079"
  },
  {
    "text": "about a dollar per gigabyte per month you know that's something that you want to keep in mind when you're thinking about this uh you know data store",
    "start": "2955079",
    "end": "2960599"
  },
  {
    "text": "choices uh with that I'm going to wrap up I have 30 seconds so I'm going to give the slides back we're going to it",
    "start": "2960599",
    "end": "2966119"
  },
  {
    "text": "has some S3 best practices and Glacier Glacier the top point there is you know it's a place to Archive your data it's a",
    "start": "2966119",
    "end": "2972319"
  },
  {
    "text": "penny per gigabyte right uh I'm thinking about my photo backups completely differently what used to cost 10 bucks a",
    "start": "2972319",
    "end": "2979160"
  },
  {
    "text": "month is going to cost a cent per month for me right the pay the price you pay here is really for accessing it it's",
    "start": "2979160",
    "end": "2985359"
  },
  {
    "text": "going to take you like three and a half to four hours to get your data back right if you you cannot wait for three and a half hours to put get your data",
    "start": "2985359",
    "end": "2991000"
  },
  {
    "text": "back don't put that in glacia right it is frozen so uh with that I'm going to",
    "start": "2991000",
    "end": "2996280"
  },
  {
    "text": "skip the best practices and in my session there um so to summarize use the",
    "start": "2996280",
    "end": "3001880"
  },
  {
    "text": "right tool for the right job you know hot data should go in caches uh in Dynamo DB RDS Etc colder data should go",
    "start": "3001880",
    "end": "3009240"
  },
  {
    "text": "to the right side um and um and uh thank you very much and then by the",
    "start": "3009240",
    "end": "3016440"
  },
  {
    "text": "way if you really want a giant Swiss army knife a few",
    "start": "3016440",
    "end": "3022240"
  },
  {
    "text": "months a month ago or so I could I you know I I you can buy this on amazon.com",
    "start": "3022240",
    "end": "3028240"
  },
  {
    "text": "you know thank you [Applause]",
    "start": "3028240",
    "end": "3035809"
  },
  {
    "text": "again",
    "start": "3035920",
    "end": "3038920"
  }
]