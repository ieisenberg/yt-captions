[
  {
    "start": "0",
    "end": "186000"
  },
  {
    "text": "welcome to Episode one build with dynamo TV my name is Eddie zubich and I'm",
    "start": "89",
    "end": "5580"
  },
  {
    "text": "Solutions Architect with AWS folks here are no sequel and specifically on dynamodb good morning my name is Siva",
    "start": "5580",
    "end": "13500"
  },
  {
    "text": "raghupathy I'm also a Solutions Architect focusing on building Dunwoody be analytical applications and AWS we're",
    "start": "13500",
    "end": "19560"
  },
  {
    "text": "delighted to begin the show yes we also have couple of our teammates for",
    "start": "19560",
    "end": "24779"
  },
  {
    "text": "moderators and can't wait to have your questions in the live chat so we wanted",
    "start": "24779",
    "end": "31019"
  },
  {
    "text": "to start a show where you'll be able to join us and learn about DynamoDB new",
    "start": "31019",
    "end": "36719"
  },
  {
    "text": "features data modeling you know sequel and DynamoDB and Building Solutions you DynamoDB and most of all actually where",
    "start": "36719",
    "end": "43890"
  },
  {
    "text": "you could come and ask questions about DynamoDB we'll be doing this show weekly",
    "start": "43890",
    "end": "50250"
  },
  {
    "text": "so you know I think we we expect to have a series of sessions where we can really",
    "start": "50250",
    "end": "55710"
  },
  {
    "text": "dive deep into your questions and answer them and bring the experiences that we we have were going through with solving",
    "start": "55710",
    "end": "62609"
  },
  {
    "text": "customer problems and for today we wanted to start with an introduction to",
    "start": "62609",
    "end": "67610"
  },
  {
    "text": "dynamodb and if you look at the name",
    "start": "67610",
    "end": "72680"
  },
  {
    "text": "what's in a name look ma no servers for me it goes back when I first started to",
    "start": "72680",
    "end": "80340"
  },
  {
    "text": "use dynamodb having spent quite a bit of time years prior to that working with no",
    "start": "80340",
    "end": "86130"
  },
  {
    "text": "sequel databases and having to configure tune servers and clusters one of the big",
    "start": "86130",
    "end": "92880"
  },
  {
    "text": "breaks for me was being able to actually use a service that gives me what I need",
    "start": "92880",
    "end": "98240"
  },
  {
    "text": "it's a database service where I don't have to worry about configuring any",
    "start": "98240",
    "end": "103470"
  },
  {
    "text": "servers and not only that it's cloud native but it's also server less right so if you if you log in to DynamoDB",
    "start": "103470",
    "end": "112740"
  },
  {
    "text": "console you will see that there's no server configuration to to worry about",
    "start": "112740",
    "end": "120240"
  },
  {
    "text": "them to do you just start creating tables and not only that but when we",
    "start": "120240",
    "end": "125909"
  },
  {
    "text": "talk to people who are new to dynamodb one of the questions that often zap is what do I go to configure my",
    "start": "125909",
    "end": "132450"
  },
  {
    "text": "servers and you know the answer is you don't there's no service to configure",
    "start": "132450",
    "end": "139530"
  },
  {
    "text": "you start using dynamodb by creating",
    "start": "139530",
    "end": "144780"
  },
  {
    "text": "tables and basically storing data in the database and you never have to worry",
    "start": "144780",
    "end": "150240"
  },
  {
    "text": "about managing any of the servers or clusters cool now what are we going to",
    "start": "150240",
    "end": "157260"
  },
  {
    "text": "the some of the fundamentals of DynamoDB but before then do you want to actually go through some of the new features that",
    "start": "157260",
    "end": "162570"
  },
  {
    "text": "we're all excited about with DynamoDB or do you think we should just get into yeah fundamental let's let's do that",
    "start": "162570",
    "end": "169830"
  },
  {
    "text": "let's talk about some of the new features we do want this to be a show for everybody those who are new to",
    "start": "169830",
    "end": "175110"
  },
  {
    "text": "DynamoDB as well as those who are existing users and so a quick overview",
    "start": "175110",
    "end": "185070"
  },
  {
    "text": "of some of the new features starting with raiment in fact I think some some",
    "start": "185070",
    "end": "190500"
  },
  {
    "start": "186000",
    "end": "407000"
  },
  {
    "text": "of the really interesting features key features that were released that as a",
    "start": "190500",
    "end": "196890"
  },
  {
    "text": "Raymond transaction support for multi item transactions a DynamoDB in fact",
    "start": "196890",
    "end": "202200"
  },
  {
    "text": "these transactions can can span multiple tables as well so we will actually",
    "start": "202200",
    "end": "208650"
  },
  {
    "text": "dedicate I think one of the future shows specifically to diving deep on transactions so we'll talk about",
    "start": "208650",
    "end": "214920"
  },
  {
    "text": "transaction in depth at that time another really interesting features on demand capacity mode that allows you to",
    "start": "214920",
    "end": "222270"
  },
  {
    "text": "create a table without having to worry about provisioning any capacity you can you can let dynamodb just take take care",
    "start": "222270",
    "end": "229560"
  },
  {
    "text": "of that for you yeah I wasn't worrying about servers and but provision capacity you can provision read and write",
    "start": "229560",
    "end": "235110"
  },
  {
    "text": "capacity that's what on-demand you don't even have to do that right exactly yes and in fact dynamodb has made some",
    "start": "235110",
    "end": "244800"
  },
  {
    "text": "significant improvements in capacity management in general right you all probably know by now if you're if you're",
    "start": "244800",
    "end": "251160"
  },
  {
    "text": "dynamodb user about auto scaling for example also we've talked about adaptive",
    "start": "251160",
    "end": "258570"
  },
  {
    "text": "capacity the ability to manage capacity dynamically based on your",
    "start": "258570",
    "end": "263640"
  },
  {
    "text": "traffic pattern ISM in real-time and on-demand is one of those features that's that's along those lines that",
    "start": "263640",
    "end": "270900"
  },
  {
    "text": "that really adds a whole new level",
    "start": "270900",
    "end": "275910"
  },
  {
    "text": "I think of capacity management in DynamoDB and one of the really most",
    "start": "275910",
    "end": "283530"
  },
  {
    "text": "interesting thing about it is it really puts dynamodb in the symbolist database",
    "start": "283530",
    "end": "289470"
  },
  {
    "text": "category because with on-demand capacity mode you're paying for consumed capacity",
    "start": "289470",
    "end": "296820"
  },
  {
    "text": "per request yeah I would point that out again I think we'll we'll talk about this feature as well in one of the",
    "start": "296820",
    "end": "303390"
  },
  {
    "text": "future shows I'm also demonstrate in the console how easy it is to request on tomorrow on demand capacity for our",
    "start": "303390",
    "end": "309810"
  },
  {
    "text": "table exactly cool so another feature that's worth pointing out is encryption at rest in fact when it comes to",
    "start": "309810",
    "end": "316860"
  },
  {
    "text": "encryption in general with DynamoDB with encryption and crest now youyou really have a full circle when you interact",
    "start": "316860",
    "end": "325140"
  },
  {
    "text": "with DynamoDB your requests are always done over a secure connection so there",
    "start": "325140",
    "end": "330720"
  },
  {
    "text": "is by default you your using encryption in transit and now by default you get",
    "start": "330720",
    "end": "337050"
  },
  {
    "text": "encryption at rest as well so we're posting some of these links in the live",
    "start": "337050",
    "end": "343590"
  },
  {
    "text": "chat channel as well so that you can take a closer look I'd also like to point out that limit on the number of GS",
    "start": "343590",
    "end": "351510"
  },
  {
    "text": "is per table has been raised 20 and also that that's a that's a soft limit so you",
    "start": "351510",
    "end": "357630"
  },
  {
    "text": "actually can get even more GS eyes GSI stands for global secondary indexes will",
    "start": "357630",
    "end": "363930"
  },
  {
    "text": "we'll go through that in more detail as to what those means if you're not familiar with that and right darlin and just as of a couple months ago now",
    "start": "363930",
    "end": "375050"
  },
  {
    "text": "there is Dax support for transactions as well and you can find a little bit more",
    "start": "375050",
    "end": "381390"
  },
  {
    "text": "about that with the link that that we will give you yeah done would be",
    "start": "381390",
    "end": "386870"
  },
  {
    "text": "taxes that done only be accelerator you know think of that as a massive cash in front of Dunwoody be but you can use the",
    "start": "386870",
    "end": "392870"
  },
  {
    "text": "same API and your request can be you know can go even faster what what",
    "start": "392870",
    "end": "398030"
  },
  {
    "text": "terribly be accelerator cool yeah so shall we start yeah we start with some",
    "start": "398030",
    "end": "404780"
  },
  {
    "text": "basis right yeah for folks that are new to DynamoDB I would like to basically introduce the various obstructions like",
    "start": "404780",
    "end": "411050"
  },
  {
    "start": "407000",
    "end": "651000"
  },
  {
    "text": "in any other database you know dynamodb is a fast flexible non-relational database service it can handle any",
    "start": "411050",
    "end": "418550"
  },
  {
    "text": "amount of workload in transit requests per second or our size or the number of",
    "start": "418550",
    "end": "423800"
  },
  {
    "text": "records that you put in there's no limits to do what dynamo can handle as",
    "start": "423800",
    "end": "428900"
  },
  {
    "text": "Edmund was pointing out there is no service to manage like we take care of all the you know distributor database",
    "start": "428900",
    "end": "435260"
  },
  {
    "text": "management behind the covers we take care of you know partitioning automatically you know the database are",
    "start": "435260",
    "end": "441770"
  },
  {
    "text": "the tables if you will you know we take care of throughput or capacity management do we take care of patching",
    "start": "441770",
    "end": "448150"
  },
  {
    "text": "you know we take care of cluster scaling as well right so you're simply your",
    "start": "448150",
    "end": "453230"
  },
  {
    "text": "abstraction is that of a table as the slide shows basically when you have when",
    "start": "453230",
    "end": "458390"
  },
  {
    "text": "you create an AWS account you can go to the dynamodb service and simply go ahead and create a table we'll walk through",
    "start": "458390",
    "end": "463700"
  },
  {
    "text": "those steps as well just you know table is the highest level of abstraction of",
    "start": "463700",
    "end": "468890"
  },
  {
    "text": "you will table and dynamodb comprises of items it is synonymous to a row in a",
    "start": "468890",
    "end": "474620"
  },
  {
    "text": "relational database and then we call the columns attributes because yeah there's",
    "start": "474620",
    "end": "480200"
  },
  {
    "text": "no num fix the number of columns in dynamodb you know each item or row can have any number of attributes if you",
    "start": "480200",
    "end": "487160"
  },
  {
    "text": "will you know and then the only required attribute in in a table is is a is a",
    "start": "487160",
    "end": "494000"
  },
  {
    "text": "primary key we call this the partition key so if you can create a when you clear the table you simply specify what",
    "start": "494000",
    "end": "501290"
  },
  {
    "text": "is the partition key as the name indicates the partition key allows us to automatically partition the table into",
    "start": "501290",
    "end": "508400"
  },
  {
    "text": "multiple partitions under the covers you know without you needing to manually",
    "start": "508400",
    "end": "513830"
  },
  {
    "text": "partition that you know the semantics of that we will one way I think about that is I call",
    "start": "513830",
    "end": "520070"
  },
  {
    "text": "that dimension of scale yeah so it really allows you to to scale the data",
    "start": "520070",
    "end": "526190"
  },
  {
    "text": "volume yeah yeah well at some point you know more will more deeply go into the",
    "start": "526190",
    "end": "531980"
  },
  {
    "text": "semantics of how having a large number of partition keys allows DynamoDB to kind of infinitely scale etc and the",
    "start": "531980",
    "end": "539780"
  },
  {
    "text": "second key an optional key would be what we call as a sort key you know think of",
    "start": "539780",
    "end": "547460"
  },
  {
    "text": "let's assume you're gonna store pictures that you're taking with the camera on the camera has an ID camera ID might be",
    "start": "547460",
    "end": "554030"
  },
  {
    "text": "the partition key at the time where which you shot the picture might be the sort key so you can do queries such as",
    "start": "554030",
    "end": "559850"
  },
  {
    "text": "you know for a given camera give me all the pictures I took last month or give me all the pictures that started with a",
    "start": "559850",
    "end": "566120"
  },
  {
    "text": "specific month and ended with another month etc so in some sense that within",
    "start": "566120",
    "end": "571790"
  },
  {
    "text": "the partition key it allows you to specify a sort order that's what sort key is and then obviously these",
    "start": "571790",
    "end": "578680"
  },
  {
    "text": "attributes can be of many data types we have simple data types such as number you know string etcetera that will go",
    "start": "578680",
    "end": "586670"
  },
  {
    "text": "into more detail as we get into the details of details you know a little bit later today and also you know the the",
    "start": "586670",
    "end": "595190"
  },
  {
    "text": "sort key allows you to model one to many relationships not at the example that I walked through if you take a picture",
    "start": "595190",
    "end": "601880"
  },
  {
    "text": "with the camera and then all the pictures that a camera took is maybe from a modeling perspective might be",
    "start": "601880",
    "end": "609020"
  },
  {
    "text": "kind of a one-to-many relationship in other words one camera has multiple pictures of one device has multiple",
    "start": "609020",
    "end": "614900"
  },
  {
    "text": "events so the short key allows you to model that so on the right side you also",
    "start": "614900",
    "end": "621620"
  },
  {
    "text": "see what kind of various semantics you can apply to the short key for example equal to give for a given camera give me",
    "start": "621620",
    "end": "628640"
  },
  {
    "text": "all the called records where the time stamp equals a specific value less than",
    "start": "628640",
    "end": "633980"
  },
  {
    "text": "greater than between etc and you can sort this you know both ascending as well as descending by the sort key and",
    "start": "633980",
    "end": "640370"
  },
  {
    "text": "you can also ask for the top n number of values right well shall we see what it looks",
    "start": "640370",
    "end": "645589"
  },
  {
    "text": "like in the console absolutely let's just switch to the console and then see how it plays out so if I go to the AWS",
    "start": "645589",
    "end": "652370"
  },
  {
    "start": "651000",
    "end": "823000"
  },
  {
    "text": "console and login if I'm in the region where I don't have any dynamodb tables",
    "start": "652370",
    "end": "658700"
  },
  {
    "text": "created this is the screen that I get and of course I'll go ahead and and",
    "start": "658700",
    "end": "664370"
  },
  {
    "text": "create a table and as you can see I have to give my table a name it's just called",
    "start": "664370",
    "end": "671060"
  },
  {
    "text": "Table one primary key I'll say ID I had",
    "start": "671060",
    "end": "676100"
  },
  {
    "text": "the option of adding a short key but wouldn't keep it simple for this first example I have three options for my type",
    "start": "676100",
    "end": "681410"
  },
  {
    "text": "it could be strength binary or number let's just keep it as a string type and",
    "start": "681410",
    "end": "687890"
  },
  {
    "text": "we're going to use all the default settings and create a dynamic TV table so of course this request is received by",
    "start": "687890",
    "end": "698300"
  },
  {
    "text": "the service and the service is now creating the table the table is here and",
    "start": "698300",
    "end": "706930"
  },
  {
    "text": "we can basically take a look at it the overview of the table shows some details",
    "start": "706930",
    "end": "712279"
  },
  {
    "text": "about it and one of them is strain details so you can think of a stream as transaction log of all your changes to",
    "start": "712279",
    "end": "720890"
  },
  {
    "text": "your data in the table and in fact the stream allows you to reliably deliver",
    "start": "720890",
    "end": "727370"
  },
  {
    "text": "these changes and and do something with them what if one of the things that you",
    "start": "727370",
    "end": "735050"
  },
  {
    "text": "can do is integrate with lambda so that lambda service can consume stream",
    "start": "735050",
    "end": "740959"
  },
  {
    "text": "updates so all the changes that are taking place on a table and do something",
    "start": "740959",
    "end": "748670"
  },
  {
    "text": "with those changes yeah it can for example stream them to another service",
    "start": "748670",
    "end": "754070"
  },
  {
    "text": "for example if you need to stream data to elastic search for search it could do an aggregation of some kind or something",
    "start": "754070",
    "end": "762380"
  },
  {
    "text": "else so these are some of the common patterns and I think as we go on with our show we will dive deep into into",
    "start": "762380",
    "end": "769640"
  },
  {
    "text": "some of these use cases cool I want to take one question as it came along Ramon Casey asked in the forum anything",
    "start": "769640",
    "end": "779379"
  },
  {
    "text": "to keep in mind when building for high availability redundancy that's a great question I think when you when you",
    "start": "779379",
    "end": "786040"
  },
  {
    "text": "provision a DynamoDB table in terms of file ability we automatically when you",
    "start": "786040",
    "end": "791259"
  },
  {
    "text": "create a table the table is automatically clear we keep three copies of the data in three different availability zones our facilities so",
    "start": "791259",
    "end": "799749"
  },
  {
    "text": "your data is automatically highly available and we keep multiple copies of this even if one copy",
    "start": "799749",
    "end": "805899"
  },
  {
    "text": "you know dies out of the machine goes down we automatically you know create another other copy of this while the",
    "start": "805899",
    "end": "812709"
  },
  {
    "text": "table is in use so you don't you don't see the downtime flavor table great",
    "start": "812709",
    "end": "818799"
  },
  {
    "text": "slide for that yeah yeah great slide cool um I think we can't just skip fast",
    "start": "818799",
    "end": "824649"
  },
  {
    "start": "823000",
    "end": "992000"
  },
  {
    "text": "forward playing the availability and durability characteristics of the yeah",
    "start": "824649",
    "end": "830410"
  },
  {
    "text": "so if we're using dynamodb we're creating tables and storing data yeah here's an example we're restoring an",
    "start": "830410",
    "end": "837189"
  },
  {
    "text": "order but we see a partition keys order ID we have a sort key and some other values yeah so if we put this item into",
    "start": "837189",
    "end": "847179"
  },
  {
    "text": "our table customer orders table under the hood this is what DynamoDB might",
    "start": "847179",
    "end": "852999"
  },
  {
    "text": "look like right there are three essentially internal availability zone",
    "start": "852999",
    "end": "858369"
  },
  {
    "text": "maintained by the service itself and the data is partitioned across potentially",
    "start": "858369",
    "end": "863410"
  },
  {
    "text": "many partitions depending on the amount of data that you have and also the the",
    "start": "863410",
    "end": "868420"
  },
  {
    "text": "throughput right that you might have configured for the table so the service will hash your key this is all happening",
    "start": "868420",
    "end": "875230"
  },
  {
    "text": "under the hood and find which partition that that particular item goes to based",
    "start": "875230",
    "end": "882429"
  },
  {
    "text": "on that value and it'll essentially make three copies of data so one in each",
    "start": "882429",
    "end": "889029"
  },
  {
    "text": "availability zone and so this is how we get both high availability because the",
    "start": "889029",
    "end": "895089"
  },
  {
    "text": "service runs in three availability zone and their ability because data is stored",
    "start": "895089",
    "end": "901869"
  },
  {
    "text": "in three availability zones right and should something happen the-the-the failover if",
    "start": "901869",
    "end": "913180"
  },
  {
    "text": "you will essentially the service is highly available in theory even if a",
    "start": "913180",
    "end": "919570"
  },
  {
    "text": "whole availability zone goes down you might not even notice anything right the",
    "start": "919570",
    "end": "926260"
  },
  {
    "text": "service just continues to function and it's still highly available Manor because it's running in the two remaining availability on the other",
    "start": "926260",
    "end": "933970"
  },
  {
    "text": "question whenever thinking availability you know this is the database size availability site availability right but",
    "start": "933970",
    "end": "940810"
  },
  {
    "text": "in terms of the building and into an application since DynamoDB is available in multiple availability zones when you",
    "start": "940810",
    "end": "946720"
  },
  {
    "text": "architect a highly available application you so also think of actually scaling the application across multiple",
    "start": "946720",
    "end": "952060"
  },
  {
    "text": "available it's our availability zones this way for an end-user the availability comes from not only done",
    "start": "952060",
    "end": "957070"
  },
  {
    "text": "would it be availability but your application availability as well right in terms of precise numbers you know",
    "start": "957070",
    "end": "962410"
  },
  {
    "text": "DynamoDB is 99 for nine available we have an SLA for four nights and if you",
    "start": "962410",
    "end": "972160"
  },
  {
    "text": "have global tables it becomes five nines right you know four nines roughly is 52 minutes downtime per year and five nines",
    "start": "972160",
    "end": "978310"
  },
  {
    "text": "is about five minutes you know per year right so that's kind of the you know how it practically practically looks like so",
    "start": "978310",
    "end": "984790"
  },
  {
    "text": "dynamodb is built in for high availability and durability you know that's the short answer so cool so do you want to flip back to",
    "start": "984790",
    "end": "992760"
  },
  {
    "start": "992000",
    "end": "1498000"
  },
  {
    "text": "creating the tables and mowing for yeah yeah and as you mentioned global tables yeah in another example in in a couple",
    "start": "992760",
    "end": "1000720"
  },
  {
    "text": "of minutes maybe maybe we'll show what that looks like yeah so table details",
    "start": "1000720",
    "end": "1006570"
  },
  {
    "text": "right we see our table name partition key we don't have a sword key here just",
    "start": "1006570",
    "end": "1012510"
  },
  {
    "text": "a quick sort of rundown to explain what we have what we're looking at here point in time recovery is disabled by default",
    "start": "1012510",
    "end": "1019230"
  },
  {
    "text": "but if you have production data in dynamodb you should absolutely enable point in time recovery which allows you",
    "start": "1019230",
    "end": "1026760"
  },
  {
    "text": "to recover to any point in time for the past 35 days and and what that means is",
    "start": "1026760",
    "end": "1033120"
  },
  {
    "text": "that if I roll out the feature in my application that introduces some kind of",
    "start": "1033120",
    "end": "1038890"
  },
  {
    "text": "that starts corrupting my data I can restore my table from any point in time",
    "start": "1038890",
    "end": "1045459"
  },
  {
    "text": "that I know is when my day that was still good and then my data will be",
    "start": "1045459",
    "end": "1051340"
  },
  {
    "text": "restored to a new table restored table and I can get the data from the table",
    "start": "1051340",
    "end": "1057940"
  },
  {
    "text": "and apply it to my production table so that's that's one feature that's fairly new but it's been around for a while so",
    "start": "1057940",
    "end": "1064809"
  },
  {
    "text": "if you're not using point and time recovery for your production data we",
    "start": "1064809",
    "end": "1070090"
  },
  {
    "text": "would encourage you encourage you to start using implement and and turn it on",
    "start": "1070090",
    "end": "1075750"
  },
  {
    "text": "encryption by default your data is encrypted there are a couple of options there and and I think at some point",
    "start": "1075750",
    "end": "1082870"
  },
  {
    "text": "we'll talk a little bit more about encryption in in dynamodb time-to-live",
    "start": "1082870",
    "end": "1088600"
  },
  {
    "text": "is is a feature that allows you to manage your data in DynamoDB and have",
    "start": "1088600",
    "end": "1094150"
  },
  {
    "text": "the service expired the data for you when you don't need it anymore yeah so what that means is that you can set an",
    "start": "1094150",
    "end": "1099790"
  },
  {
    "text": "attribute that tells that Emily B went to expire your your item and when that happens that would it be deletes it for",
    "start": "1099790",
    "end": "1106360"
  },
  {
    "text": "you without consuming your your right capacity cool otherwise when you delete data you you actually consume the right",
    "start": "1106360",
    "end": "1113200"
  },
  {
    "text": "capacity so and you were talking about streams so when your turn streams on you",
    "start": "1113200",
    "end": "1118299"
  },
  {
    "text": "could potentially if you want to log all those deletes in s3 or something like that so you can write a little lambda",
    "start": "1118299",
    "end": "1124000"
  },
  {
    "text": "function that would automatically right pick up that changes from the stream and",
    "start": "1124000",
    "end": "1129010"
  },
  {
    "text": "then log this you know for your own logging purposes if you Willis so that way it's a it's a fairly open feature it",
    "start": "1129010",
    "end": "1136600"
  },
  {
    "text": "goes through the normal protocol when you delete Riley denied oh yeah and it allows you to to store your hot data and",
    "start": "1136600",
    "end": "1144610"
  },
  {
    "text": "dynamodb while not using losing your data when it's not in dynamo DB anymore",
    "start": "1144610",
    "end": "1150669"
  },
  {
    "text": "it allows you to to archive your data in s3 for example and provision read",
    "start": "1150669",
    "end": "1158440"
  },
  {
    "text": "capacity and right capacity unit units so for this example we just went with",
    "start": "1158440",
    "end": "1163450"
  },
  {
    "text": "default and what the service did it allocated five read and write capacity",
    "start": "1163450",
    "end": "1169330"
  },
  {
    "text": "units so what are those read and write capatch the units so this is one key difference",
    "start": "1169330",
    "end": "1175240"
  },
  {
    "text": "I think with with DynamoDB right from the databases that I was used to before",
    "start": "1175240",
    "end": "1181840"
  },
  {
    "text": "starting to use DynamoDB when when I dealt with clusters that I had to manage",
    "start": "1181840",
    "end": "1187300"
  },
  {
    "text": "on my own with dynamodb you you think about capacity in terms of read and",
    "start": "1187300",
    "end": "1194350"
  },
  {
    "text": "write requests basically right capacity unit is one kilobyte in size so if",
    "start": "1194350",
    "end": "1200320"
  },
  {
    "text": "you're writing items that are one kilobyte in size and and or less each",
    "start": "1200320",
    "end": "1205360"
  },
  {
    "text": "write for such an item will consume one right capacity unit rate capacity units",
    "start": "1205360",
    "end": "1211600"
  },
  {
    "text": "are four kilobytes in size and so reading items of that size will will",
    "start": "1211600",
    "end": "1217480"
  },
  {
    "text": "consume one read capacity units if an item is 16 or 15 kilobytes in size",
    "start": "1217480",
    "end": "1224170"
  },
  {
    "text": "reading that item will consume four read capacity units I will also talk about",
    "start": "1224170",
    "end": "1231090"
  },
  {
    "text": "stride and eventual consistency at some point yeah but let's just keep going so",
    "start": "1231090",
    "end": "1238870"
  },
  {
    "text": "we have this table and one of the tabs",
    "start": "1238870",
    "end": "1244510"
  },
  {
    "text": "shows us items we don't have any items so it looks great and I'm in a console go let's just give it a simple value and",
    "start": "1244510",
    "end": "1255330"
  },
  {
    "text": "here we can add another attribute to this item and if we if we look at this",
    "start": "1255330",
    "end": "1261300"
  },
  {
    "text": "we see several we see all the types that are available string binary number and",
    "start": "1261300",
    "end": "1267670"
  },
  {
    "text": "so on one thing you'll notice is that there's no data type and for dates you",
    "start": "1267670",
    "end": "1274390"
  },
  {
    "text": "can use a number or or a string yep and if you if you do want to use the TTL",
    "start": "1274390",
    "end": "1281590"
  },
  {
    "text": "feature then it has to be a number and it has to be UNIX epoch value that",
    "start": "1281590",
    "end": "1288250"
  },
  {
    "text": "represents a time and date in the future when you want that item to expire string",
    "start": "1288250",
    "end": "1294070"
  },
  {
    "text": "is also valid option for date values except for TTL but if it's if it's just",
    "start": "1294070",
    "end": "1302950"
  },
  {
    "text": "a day that's not a TTL field you can use a string and still take advantage of the ability",
    "start": "1302950",
    "end": "1308710"
  },
  {
    "text": "to sort if you decide that you need to have that value as a sort key either in",
    "start": "1308710",
    "end": "1314950"
  },
  {
    "text": "the table or in a GSI so if you're using I so what is eight zero six one I think",
    "start": "1314950",
    "end": "1323820"
  },
  {
    "text": "standard to encode those strings in dates and in strings then you can take",
    "start": "1323820",
    "end": "1331030"
  },
  {
    "text": "advantage of the ability of the short key to sort those for you and that's it",
    "start": "1331030",
    "end": "1336580"
  },
  {
    "text": "that's a fairly common yeah so if you basically arrange your data as you know year month date etc so you could say you",
    "start": "1336580",
    "end": "1344260"
  },
  {
    "text": "know give me all the records starting with a certain month if it is part of the sort key for example right so we",
    "start": "1344260",
    "end": "1351610"
  },
  {
    "text": "just created an item and I can create another item by maybe duplicating this",
    "start": "1351610",
    "end": "1358090"
  },
  {
    "text": "one so that we can have a couple of items and let's say number two the",
    "start": "1358090",
    "end": "1370000"
  },
  {
    "text": "console API is is pretty straightforward and simple it allows us to do a couple of operations we can scan the table",
    "start": "1370000",
    "end": "1376960"
  },
  {
    "text": "which is what's what's going on right now with our data the console is using",
    "start": "1376960",
    "end": "1383260"
  },
  {
    "text": "the scan to show us the data in the table you can also query you'll notice",
    "start": "1383260",
    "end": "1388330"
  },
  {
    "text": "that with the query API I always have to specify the partition key in DynamoDB",
    "start": "1388330",
    "end": "1395020"
  },
  {
    "text": "and and that's by design with DynamoDB",
    "start": "1395020",
    "end": "1400360"
  },
  {
    "text": "your access is most of the time I was going to say always based on petition",
    "start": "1400360",
    "end": "1405880"
  },
  {
    "text": "key but we do have a scan operation but but if you if you really need to focus",
    "start": "1405880",
    "end": "1411760"
  },
  {
    "text": "on item operations partition key is always required whenever it's a put item",
    "start": "1411760",
    "end": "1418110"
  },
  {
    "text": "get item or query operation so in this case I'm simply going to query for the",
    "start": "1418110",
    "end": "1424840"
  },
  {
    "text": "record that has the partition key which in this case is also primary key - and here we go now we get the value",
    "start": "1424840",
    "end": "1434090"
  },
  {
    "text": "that record so some of the other things that you can get in console metrics yeah",
    "start": "1434090",
    "end": "1439990"
  },
  {
    "text": "most common metrics you can see right here where you can see read capacity",
    "start": "1439990",
    "end": "1445970"
  },
  {
    "text": "right capacity throttled requests for both reads and writes yeah you should",
    "start": "1445970",
    "end": "1453380"
  },
  {
    "text": "quickly mention what what throttling is sure if you provision capacity and as we",
    "start": "1453380",
    "end": "1459860"
  },
  {
    "text": "saw in our case what we have is five read and write capacity and it's",
    "start": "1459860",
    "end": "1466790"
  },
  {
    "text": "provision if by any chance I exceed that capacity my requests are going to be",
    "start": "1466790",
    "end": "1473780"
  },
  {
    "text": "thrown right that's really the the simple reason and and the idea behind",
    "start": "1473780",
    "end": "1479300"
  },
  {
    "text": "throttling in DynamoDB you you read and write data and if you're provisioning",
    "start": "1479300",
    "end": "1486460"
  },
  {
    "text": "your your capacity you might get throttled if you're doing auto scaling",
    "start": "1486460",
    "end": "1491840"
  },
  {
    "text": "sort of scaling will factor that in so right can we go to the auto scaling tap",
    "start": "1491840",
    "end": "1497690"
  },
  {
    "text": "there yes and then as you can just see if you can specify auto scaling in a way",
    "start": "1497690",
    "end": "1502880"
  },
  {
    "start": "1498000",
    "end": "1543000"
  },
  {
    "text": "that it would automatically you know scale the provisioned food capacity so",
    "start": "1502880",
    "end": "1507920"
  },
  {
    "text": "you don't get throttled anymore so this way turning on auto scaling is the best practice and auto scaling lets",
    "start": "1507920",
    "end": "1514160"
  },
  {
    "text": "you define sort of guards lower and upper bounds of how how far up or down",
    "start": "1514160",
    "end": "1522590"
  },
  {
    "text": "low you can go with with provision capacity you know the other thing is if you don't want to worry about",
    "start": "1522590",
    "end": "1528170"
  },
  {
    "text": "provisioning capacity you can simply switch to own demand right and in fact you can go back and forth between the",
    "start": "1528170",
    "end": "1535280"
  },
  {
    "text": "two provision modes yeah once a day go ahead basically yeah so back to the",
    "start": "1535280",
    "end": "1543620"
  },
  {
    "start": "1543000",
    "end": "1578000"
  },
  {
    "text": "metrics we also have some latency metrics that you can see we'll also see",
    "start": "1543620",
    "end": "1549310"
  },
  {
    "text": "a number of metrics and in fact you can always go to plod watch where all these",
    "start": "1549310",
    "end": "1557300"
  },
  {
    "text": "metrics are also available yeah for for dynamodb maybe I can switch to maybe a getting",
    "start": "1557300",
    "end": "1568110"
  },
  {
    "text": "started example great so to help you get going with DynamoDB we do have some",
    "start": "1568110",
    "end": "1573510"
  },
  {
    "text": "resources available some are in the documentation if you navigate to",
    "start": "1573510",
    "end": "1578880"
  },
  {
    "text": "dynamodb documentation one of the sections is getting started with DynamoDB the section will have several",
    "start": "1578880",
    "end": "1586520"
  },
  {
    "text": "examples tutorials in in different SDKs for different languages so that ModDB",
    "start": "1586520",
    "end": "1592399"
  },
  {
    "text": "much much as the rest of AWS has as the case in all the popular languages but",
    "start": "1592399",
    "end": "1598350"
  },
  {
    "text": "today we decided to just go with with Python SDK and an editorial so we're",
    "start": "1598350",
    "end": "1603840"
  },
  {
    "text": "gonna step through that a little bit and show you how how you can get going",
    "start": "1603840",
    "end": "1609899"
  },
  {
    "text": "another place where you can get some getting started examples is if you go to",
    "start": "1609899",
    "end": "1615200"
  },
  {
    "text": "dedicated DynamoDB getting started page where you can find some other tutorials",
    "start": "1615200",
    "end": "1620880"
  },
  {
    "text": "that you can take a look and we encourage you to do that the best way to learn something to learn the new service",
    "start": "1620880",
    "end": "1627899"
  },
  {
    "text": "or technology is to start using it and I think getting started tutorials are a",
    "start": "1627899",
    "end": "1635070"
  },
  {
    "text": "good place to start yeah we'll go back to the getting started for Python and DynamoDB and you",
    "start": "1635070",
    "end": "1644520"
  },
  {
    "start": "1638000",
    "end": "1698000"
  },
  {
    "text": "can follow along and you will see that there's a couple of prerequisites obviously you have to have AWS already",
    "start": "1644520",
    "end": "1651750"
  },
  {
    "text": "configured if you don't have Python configured you can you can set that up",
    "start": "1651750",
    "end": "1657539"
  },
  {
    "text": "easily and one other thing that that really can help with dynamodb especially",
    "start": "1657539",
    "end": "1667860"
  },
  {
    "text": "with development right on your on your laptop on your computer is dynamodb local so it's a it's a downloadable a",
    "start": "1667860",
    "end": "1675590"
  },
  {
    "text": "local version of dynamodb that can that you can run on your computer and setting",
    "start": "1675590",
    "end": "1682770"
  },
  {
    "text": "that up is as easy as downloading the the bundle of dynamodb local which is",
    "start": "1682770",
    "end": "1687929"
  },
  {
    "text": "available in a couple of different ways via apache maven or darker image or as a Powerball that you",
    "start": "1687929",
    "end": "1696919"
  },
  {
    "text": "can download so I've already done that I have downloaded and installed my",
    "start": "1696919",
    "end": "1703809"
  },
  {
    "start": "1698000",
    "end": "1803000"
  },
  {
    "text": "dynamodb local and if I look at the readme file I can I can actually see",
    "start": "1703809",
    "end": "1711429"
  },
  {
    "text": "some change logs right I would like to point out that in fact DynamoDB local",
    "start": "1711429",
    "end": "1719110"
  },
  {
    "text": "has added support for on-demand implementation as well as 420 GSIS and",
    "start": "1719110",
    "end": "1726559"
  },
  {
    "text": "transaction api support so it's it's pretty much up to par with the service",
    "start": "1726559",
    "end": "1733429"
  },
  {
    "text": "on those features the documentation for that MIDI be local will point out some",
    "start": "1733429",
    "end": "1738740"
  },
  {
    "text": "differences between it and and the service itself and its what they can",
    "start": "1738740",
    "end": "1744230"
  },
  {
    "text": "look at those as well the readme also has the instructions how to start you're",
    "start": "1744230",
    "end": "1751039"
  },
  {
    "text": "really looking Java with the specific jar here and and what I've done I've just created a simple bash script to",
    "start": "1751039",
    "end": "1759350"
  },
  {
    "text": "start it for me by default it will start to port 80 and you can change that it can run help as",
    "start": "1759350",
    "end": "1767320"
  },
  {
    "text": "an option on on it and and see what other options you can use with it but",
    "start": "1767320",
    "end": "1773509"
  },
  {
    "text": "it's a really good way to to close the loop and quick iterative development",
    "start": "1773509",
    "end": "1779360"
  },
  {
    "text": "that you can do on your local machine as opposed to having to go to the service",
    "start": "1779360",
    "end": "1784970"
  },
  {
    "text": "for all the calls I would as a rule of thumb I would recommend using dynamic to be local for unit testing anything",
    "start": "1784970",
    "end": "1793970"
  },
  {
    "text": "beyond that if you're doing acceptance tests I would I would recommend using",
    "start": "1793970",
    "end": "1799100"
  },
  {
    "text": "the real real service for that yeah so let me go back to to the getting started",
    "start": "1799100",
    "end": "1806119"
  },
  {
    "start": "1803000",
    "end": "1893000"
  },
  {
    "text": "one other thing I want to point out also in addition to dynamodb local which you can use on your laptop you don't have to",
    "start": "1806119",
    "end": "1812570"
  },
  {
    "text": "provision enable use account etc you can simply now if you're on a plane actually playing with dynamodb you can basically",
    "start": "1812570",
    "end": "1818119"
  },
  {
    "text": "do it on your laptop if you don't have a wife connection on your plane etcetera people use it for unit testing as well with",
    "start": "1818119",
    "end": "1824950"
  },
  {
    "text": "dynamo another thing is done woody B also has a free tier right so if you search on Amazon DynamoDB free tier",
    "start": "1824950",
    "end": "1831489"
  },
  {
    "text": "you'll see that you can put about twenty five gigabytes of data provision twenty five right and twenty five read capacity",
    "start": "1831489",
    "end": "1837549"
  },
  {
    "text": "units then then play with this as well so don't be shy actually playing with dynamo DB I think you know the more you",
    "start": "1837549",
    "end": "1844629"
  },
  {
    "text": "hands-on you get the better feel for how to build your app you'll have so by default when you create a table you will",
    "start": "1844629",
    "end": "1851979"
  },
  {
    "text": "see that it sets that capacity to five read yeah right right so that's well",
    "start": "1851979",
    "end": "1857200"
  },
  {
    "text": "under the free tier yes and and in fact within the free tier you can do over two",
    "start": "1857200",
    "end": "1862509"
  },
  {
    "text": "million reads and two million writes a day yeah so that's not insignificant",
    "start": "1862509",
    "end": "1867820"
  },
  {
    "text": "yeah I mean so you can comfortably model your scenario obviously within the scope of the free tier and then get a feel for",
    "start": "1867820",
    "end": "1874509"
  },
  {
    "text": "dynamo DB as well so feel free to take it for a spin okay so we covered a little bit about",
    "start": "1874509",
    "end": "1884979"
  },
  {
    "text": "the dynamo DB local so if we if we get into the example itself the idea here is",
    "start": "1884979",
    "end": "1890889"
  },
  {
    "text": "that you go through these steps one the first step is creating a table and you",
    "start": "1890889",
    "end": "1896829"
  },
  {
    "start": "1893000",
    "end": "2118000"
  },
  {
    "text": "can copy and paste the code if you don't like it in the light background you can",
    "start": "1896829",
    "end": "1903669"
  },
  {
    "text": "get a dark background and go back to the shell or your favorite editor I",
    "start": "1903669",
    "end": "1912519"
  },
  {
    "text": "sometimes use atom and in fact I copied",
    "start": "1912519",
    "end": "1918219"
  },
  {
    "text": "and pasted that code in into this file I actually did make some modifications to",
    "start": "1918219",
    "end": "1925059"
  },
  {
    "text": "it so this is this is one of them you",
    "start": "1925059",
    "end": "1930820"
  },
  {
    "text": "will see that the original version has the endpoint for dynamo DB local and and",
    "start": "1930820",
    "end": "1937029"
  },
  {
    "text": "that's fine I decided to one change the region and in fact remove that and will",
    "start": "1937029",
    "end": "1943599"
  },
  {
    "text": "be be local so that when I created this table it will actually created not locally but but in the service itself",
    "start": "1943599",
    "end": "1951200"
  },
  {
    "text": "if you look at the API first thing we need to do is create a client for dynamo",
    "start": "1951200",
    "end": "1956660"
  },
  {
    "text": "DB both of three is the name of the SDK current version that is SDK for for",
    "start": "1956660",
    "end": "1962660"
  },
  {
    "text": "Python and there's a couple of ways that you can create a dynamo DB client one of",
    "start": "1962660",
    "end": "1969470"
  },
  {
    "text": "them is presented here it uses it creates dynamo DB as a resource for",
    "start": "1969470",
    "end": "1976040"
  },
  {
    "text": "first service much like you would create a resource for any other service and then next we're looking at the statement",
    "start": "1976040",
    "end": "1983030"
  },
  {
    "text": "to create a table where we specify the table name movies' and then key schema you know in this case if we if we look",
    "start": "1983030",
    "end": "1989900"
  },
  {
    "text": "at this key key schema we have year as the hash key which is just another name",
    "start": "1989900",
    "end": "1997850"
  },
  {
    "text": "for the petition key and and we have titled movie title as the range key for",
    "start": "1997850",
    "end": "2004960"
  },
  {
    "text": "our table so couple of maybe just things",
    "start": "2004960",
    "end": "2010480"
  },
  {
    "text": "about that clearly this stable given the partition key of year and sword key of",
    "start": "2010480",
    "end": "2019000"
  },
  {
    "text": "title is meant to be accessed using the the year and then movie title that's the",
    "start": "2019000",
    "end": "2026710"
  },
  {
    "text": "access pattern that we can simply do that from looking at this schema right because we know that we need to have the",
    "start": "2026710",
    "end": "2033040"
  },
  {
    "text": "year and if we want to in fact zero in on a particular movie",
    "start": "2033040",
    "end": "2038440"
  },
  {
    "text": "we have to have both the year and the title yeah so that's the access pattern that was chosen for this example the",
    "start": "2038440",
    "end": "2046300"
  },
  {
    "text": "next salmon there's a fundamental assumption that combination of both will make a record unique exactly under and",
    "start": "2046300",
    "end": "2053740"
  },
  {
    "text": "the table as well right those those still make up the primary key for for the table right and and of course in the",
    "start": "2053740",
    "end": "2060190"
  },
  {
    "text": "real world that might not work right for whatever reason and and you may have to have a different schema and that's",
    "start": "2060190",
    "end": "2066700"
  },
  {
    "text": "perfectly fine the number one rule of data modeling in no sequel is your",
    "start": "2066700",
    "end": "2072669"
  },
  {
    "text": "schema is based on your access patterns yeah so next I want to point out the",
    "start": "2072669",
    "end": "2079780"
  },
  {
    "text": "billing mode here the original had throughput and I commented that section",
    "start": "2079780",
    "end": "2086669"
  },
  {
    "text": "out and I changed the billing mode to paper requests so in other words this",
    "start": "2086670",
    "end": "2092250"
  },
  {
    "text": "table will use on demand capacity mode so the option for that is billing mode",
    "start": "2092250",
    "end": "2098370"
  },
  {
    "text": "paper requests know and in fact this Python script will will allow us to to",
    "start": "2098370",
    "end": "2109410"
  },
  {
    "text": "create this table and let's run it and see what happens",
    "start": "2109410",
    "end": "2115290"
  },
  {
    "text": "so what DynamoDB does is sets the table status to creating as it creates the",
    "start": "2115290",
    "end": "2121320"
  },
  {
    "start": "2118000",
    "end": "2178000"
  },
  {
    "text": "table and if you switch back to console we should be able to see a new table",
    "start": "2121320",
    "end": "2128400"
  },
  {
    "text": "here pretty quickly",
    "start": "2128400",
    "end": "2132440"
  },
  {
    "text": "and here it is so we can see quickly here that we have status active the",
    "start": "2141960",
    "end": "2148230"
  },
  {
    "text": "table is ready to be used and we see our petition and sort keys and we see that",
    "start": "2148230",
    "end": "2155130"
  },
  {
    "text": "the rate capacity shown here is is on demand you asked for pay-per-view and",
    "start": "2155130",
    "end": "2160680"
  },
  {
    "text": "then that translates to on demand that's right that's right so next how",
    "start": "2160680",
    "end": "2166470"
  },
  {
    "text": "about we create you mentioned global tables earlier no and let's see what",
    "start": "2166470",
    "end": "2172650"
  },
  {
    "text": "that looks like yeah you want to convert this to a global table I'm just thinking I would just create a new why don't you",
    "start": "2172650",
    "end": "2178650"
  },
  {
    "start": "2178000",
    "end": "2263000"
  },
  {
    "text": "table cool yeah let's create a new table",
    "start": "2178650",
    "end": "2183690"
  },
  {
    "text": "it's called table 2 and we're gonna keep",
    "start": "2183690",
    "end": "2188880"
  },
  {
    "text": "it simple again we're not gonna mess with I mean actually if we if we don't",
    "start": "2188880",
    "end": "2196440"
  },
  {
    "text": "want to use default settings yeah we can uncheck that option and this is what happens yeah yeah we we have the ability",
    "start": "2196440",
    "end": "2203460"
  },
  {
    "text": "to set our read and write capacity nodes independently if you'd like to for",
    "start": "2203460",
    "end": "2209060"
  },
  {
    "text": "configure it for auto scaling independently as well or we could just say let's let's create this table on",
    "start": "2209060",
    "end": "2215940"
  },
  {
    "text": "demand you also have a couple of options here for encryption at rest I think we",
    "start": "2215940",
    "end": "2221730"
  },
  {
    "text": "can just keep that the default option oh yeah and so this table again is being",
    "start": "2221730",
    "end": "2229800"
  },
  {
    "text": "created and once this table is created we'll go on to add replicas and specify",
    "start": "2229800",
    "end": "2239490"
  },
  {
    "text": "additional regions where we would like to have this table so that in fact with",
    "start": "2239490",
    "end": "2246660"
  },
  {
    "text": "global tables we we simply have the ability to see data replicate you know",
    "start": "2246660",
    "end": "2254760"
  },
  {
    "text": "from all these regions to do to one another yep yep and here we go",
    "start": "2254760",
    "end": "2263180"
  },
  {
    "start": "2263000",
    "end": "2338000"
  },
  {
    "text": "there's a global tables tab it tells us right up front",
    "start": "2263180",
    "end": "2269230"
  },
  {
    "text": "this table has to be empty and DynamoDB streams have to be enabled so we're just going to enable streams and now we can",
    "start": "2269230",
    "end": "2278410"
  },
  {
    "text": "add a region so we see the list of",
    "start": "2278410",
    "end": "2283809"
  },
  {
    "text": "regions that are available so I think currently global tables are supported in eleven regions when the service came out",
    "start": "2283809",
    "end": "2292030"
  },
  {
    "text": "that was only five regions court when the global table serves I should say a feature came out yeah it supported five",
    "start": "2292030",
    "end": "2299230"
  },
  {
    "text": "regions initially now that's up to eleven oh so you can see the trend and",
    "start": "2299230",
    "end": "2306599"
  },
  {
    "text": "let's pick u Frankfort region yep and",
    "start": "2306599",
    "end": "2313980"
  },
  {
    "text": "Dunwoody B is creating replica table of this table in the Frankfort region and",
    "start": "2314910",
    "end": "2322440"
  },
  {
    "text": "we can click on go to table in a console and it'll open another console window in",
    "start": "2322440",
    "end": "2332440"
  },
  {
    "text": "the Frankfort region where we can see this table I happen to have another table in the Frankfort region already",
    "start": "2332440",
    "end": "2339819"
  },
  {
    "start": "2338000",
    "end": "2488000"
  },
  {
    "text": "and I see my table too is is there cool",
    "start": "2339819",
    "end": "2344950"
  },
  {
    "text": "so if I add an item to it in the Frankfort region so this is let's see",
    "start": "2344950",
    "end": "2353319"
  },
  {
    "text": "this is multi master as well yes so there is no difference between these",
    "start": "2353319",
    "end": "2361690"
  },
  {
    "text": "regions at all you know right creating",
    "start": "2361690",
    "end": "2366880"
  },
  {
    "text": "an item in any of the regions that are part of the global table will basically",
    "start": "2366880",
    "end": "2372910"
  },
  {
    "text": "make that item go to all the other replicas for that table I don't believe",
    "start": "2372910",
    "end": "2379109"
  },
  {
    "text": "you don't have to believe me you can also say you're joking let's go see let's go see what happened another",
    "start": "2379109",
    "end": "2385450"
  },
  {
    "text": "region let's see so one thing that you'll notice is okay we're gonna close",
    "start": "2385450",
    "end": "2393910"
  },
  {
    "text": "this and see if there are any items and here we go so well while we were talking",
    "start": "2393910",
    "end": "2399010"
  },
  {
    "text": "DynamoDB has already replicated so this is the nine in California you're basically looking at the table right",
    "start": "2399010",
    "end": "2406480"
  },
  {
    "text": "this is my yes original region where I have my movies table in table 1 and then",
    "start": "2406480",
    "end": "2412400"
  },
  {
    "text": "Frankfort region now has also you will notice one thing that global tables",
    "start": "2412400",
    "end": "2419420"
  },
  {
    "text": "replication mechanism does add some additional fields that are then used for the replication to work correctly yeah",
    "start": "2419420",
    "end": "2425990"
  },
  {
    "text": "one of them is a time stamp that's used for conflict resolution yeah so if there are two updates taking place",
    "start": "2425990",
    "end": "2432170"
  },
  {
    "text": "simultaneously Dan ODB will resolve them by honoring the the most recent update",
    "start": "2432170",
    "end": "2438830"
  },
  {
    "text": "to to win yeah and so that the data is consistent across all them all the",
    "start": "2438830",
    "end": "2444530"
  },
  {
    "text": "replicas yeah and that's gonna say something else about you also have like",
    "start": "2444530",
    "end": "2450320"
  },
  {
    "text": "streams in each region so you could potentially write a lambda you know application then hook up to the stream",
    "start": "2450320",
    "end": "2457340"
  },
  {
    "text": "and a specific region and do whatever is the region specific you know think you mean you may want to do right yeah and",
    "start": "2457340",
    "end": "2465940"
  },
  {
    "text": "cool that is can you add another region as well to this absolutely so not now",
    "start": "2465940",
    "end": "2474320"
  },
  {
    "text": "right yeah we added data to it but but if we actually get rid of the data in the table which we can do we will be",
    "start": "2474320",
    "end": "2483200"
  },
  {
    "text": "able to add another range okay the table has to be empty the table has to be empty and and then if we if we",
    "start": "2483200",
    "end": "2490160"
  },
  {
    "text": "go back to global tables now we can see that we do have a couple of regions and",
    "start": "2490160",
    "end": "2495980"
  },
  {
    "text": "by the way I do want to point out metrics the metrics that are related to the global tables are application there",
    "start": "2495980",
    "end": "2501980"
  },
  {
    "text": "are two of them one is replication latency and the other one is pending application count yeah you can use those",
    "start": "2501980",
    "end": "2509260"
  },
  {
    "text": "to see what the latency of replication is by design that should be typically",
    "start": "2509260",
    "end": "2516890"
  },
  {
    "text": "under two two seconds anywhere between any regions and pending replication",
    "start": "2516890",
    "end": "2523550"
  },
  {
    "text": "count I'm never really worried about what that count is I really just care",
    "start": "2523550",
    "end": "2529580"
  },
  {
    "text": "about what that line looks like over time yeah but you don't want that line to be continuously growing",
    "start": "2529580",
    "end": "2535660"
  },
  {
    "text": "meaning the replication might be falling behind but DynamoDB automatically handles this for you there's nothing you",
    "start": "2535660",
    "end": "2542289"
  },
  {
    "text": "can write you have to do about this yes so so one of the changes that that have",
    "start": "2542289",
    "end": "2547869"
  },
  {
    "text": "been made is making sure that by default these tables are configured the same way",
    "start": "2547869",
    "end": "2555670"
  },
  {
    "text": "so that you have sufficient capacity you had a sufficient capacity right because",
    "start": "2555670",
    "end": "2562450"
  },
  {
    "text": "it's important to provision the capacity are Turner Tony's manage this on your",
    "start": "2562450",
    "end": "2567549"
  },
  {
    "text": "behalf you do have the ability to change that capacity right and changing that to",
    "start": "2567549",
    "end": "2573789"
  },
  {
    "text": "to a value that's too low for a region might cause replication to start lagging",
    "start": "2573789",
    "end": "2580450"
  },
  {
    "text": "behind yeah so we said we wanted to add a new region any particular region that",
    "start": "2580450",
    "end": "2589690"
  },
  {
    "start": "2583000",
    "end": "2653000"
  },
  {
    "text": "you'd like me to to add let's see we",
    "start": "2589690",
    "end": "2594760"
  },
  {
    "text": "have let's go with them Singapore so we",
    "start": "2594760",
    "end": "2601690"
  },
  {
    "text": "have a region in Europe and now also in Singapore yeah cool you know for some of",
    "start": "2601690",
    "end": "2612579"
  },
  {
    "text": "the some of the large financial institutions large and small are working with having a cross region global table",
    "start": "2612579",
    "end": "2622119"
  },
  {
    "text": "is is is a requirement yes right for banks etc so so this facility so",
    "start": "2622119",
    "end": "2629589"
  },
  {
    "text": "customers have been asking us for this feature for a while and in many of those cases it's a dr site and then they need",
    "start": "2629589",
    "end": "2637000"
  },
  {
    "text": "to prove that they would be able to actually run their application in a different different region all together even though dynamodb has three easy",
    "start": "2637000",
    "end": "2643900"
  },
  {
    "text": "availability you know it's a it's an obligation from just a contractual",
    "start": "2643900",
    "end": "2649539"
  },
  {
    "text": "perspective and as you mentioned earlier the single region SLA availability",
    "start": "2649539",
    "end": "2655210"
  },
  {
    "start": "2653000",
    "end": "2768000"
  },
  {
    "text": "isolate for dynamo DB is four nights yeah if you do require five nines global",
    "start": "2655210",
    "end": "2660760"
  },
  {
    "text": "tables will give you that yeah right the amazing thing with global tables is how easy it is to just replicate your",
    "start": "2660760",
    "end": "2668740"
  },
  {
    "text": "yeah became multiple regions so you don't have to deal with setting replication you don't have to deal with",
    "start": "2668740",
    "end": "2674080"
  },
  {
    "text": "setting quorum across across your regions and engineering you're right really happened over there and then",
    "start": "2674080",
    "end": "2680500"
  },
  {
    "text": "getting network bandwidth between data centers all of this is automatically how I handled by by dynamodb and and and you",
    "start": "2680500",
    "end": "2688420"
  },
  {
    "text": "know when I dealt with these use cases we used to call banner application back in the day and in fact financial",
    "start": "2688420",
    "end": "2694600"
  },
  {
    "text": "institutions were really the the customers the users right of that feature",
    "start": "2694600",
    "end": "2699850"
  },
  {
    "text": "you always have to really custom tailor didn't plan for capacity for each",
    "start": "2699850",
    "end": "2707500"
  },
  {
    "text": "application yeah based on traffic how how much capacity do I need for my",
    "start": "2707500",
    "end": "2713710"
  },
  {
    "text": "replication queue right right and how do I deliver data and and and all that stuff",
    "start": "2713710",
    "end": "2719790"
  },
  {
    "text": "it's not easy all right and and with dynamodb can you can really simplify the",
    "start": "2719790",
    "end": "2728230"
  },
  {
    "text": "whole process of replicating your data whether it's for they are or simply",
    "start": "2728230",
    "end": "2734920"
  },
  {
    "text": "active/active yeah and then latency based routing is another phenomenon you know many cases when you are building",
    "start": "2734920",
    "end": "2740440"
  },
  {
    "text": "add bidding systems how quickly you answer the bid is gonna be super",
    "start": "2740440",
    "end": "2745900"
  },
  {
    "text": "important for latency sensitive applications so the westcoast can go after the westcoast Dunwoody be table",
    "start": "2745900",
    "end": "2751119"
  },
  {
    "text": "east coast could go after these goes down I'm only the replica few will our global table that way it makes you",
    "start": "2751119",
    "end": "2758109"
  },
  {
    "text": "building so per latency sensitive for mission-critical applications they're easy with global tables right you know",
    "start": "2758109",
    "end": "2765580"
  },
  {
    "text": "one thing that I just realized is what we were talking about this I realized that we we never really talked about the",
    "start": "2765580",
    "end": "2773830"
  },
  {
    "start": "2768000",
    "end": "2903000"
  },
  {
    "text": "some of the basic key aspects of the global secondary switch do that anyway",
    "start": "2773830",
    "end": "2779560"
  },
  {
    "text": "but we got all carried away with global tables at slightly so because it's a great feature so why don't we go back to",
    "start": "2779560",
    "end": "2785920"
  },
  {
    "text": "the fundamentals a little bit before we get there there was a question that Ramon Ramon he he asked apparently the",
    "start": "2785920",
    "end": "2796420"
  },
  {
    "text": "situation would be doing transactions across multiple data stores would be like Dino bird",
    "start": "2796420",
    "end": "2801860"
  },
  {
    "text": "B and s3 the question is say I do this in a commonly I have to deal with somewhat of a garbage collection etc",
    "start": "2801860",
    "end": "2808700"
  },
  {
    "text": "will Dunwoody B transactions is there any plans for supporting cross cross",
    "start": "2808700",
    "end": "2813860"
  },
  {
    "text": "service transactions you know we take customer feedback seriously so we will",
    "start": "2813860",
    "end": "2819380"
  },
  {
    "text": "pass this on to the service team but you know so we're you know right now there",
    "start": "2819380",
    "end": "2824600"
  },
  {
    "text": "is it's not you cannot do cross cross service transactions in a way one of the",
    "start": "2824600",
    "end": "2830450"
  },
  {
    "text": "design patterns could be you first right - you know s3 and then once your item is",
    "start": "2830450",
    "end": "2836630"
  },
  {
    "text": "there then you can once you have that handle you can ensure that you write a transaction to DynamoDB and ensure that",
    "start": "2836630",
    "end": "2842390"
  },
  {
    "text": "that at least that transaction succeeds or fails one approach is maybe to have",
    "start": "2842390",
    "end": "2848480"
  },
  {
    "text": "if that's the flow the right of event of processing data to have s3 trigger a",
    "start": "2848480",
    "end": "2857120"
  },
  {
    "text": "lambda yeah that could then do write to - DynamoDB right right so yeah so I",
    "start": "2857120",
    "end": "2865460"
  },
  {
    "text": "think but but to understand the question so the question really is can you transact across you know multiple",
    "start": "2865460",
    "end": "2873970"
  },
  {
    "text": "services thanks for the feedback so we'll pass this along you want to",
    "start": "2874180",
    "end": "2881150"
  },
  {
    "text": "continue so let's let's also take a look at some of the other fundamental primitive and dynamodb which is a",
    "start": "2881150",
    "end": "2886940"
  },
  {
    "text": "secondary index global secondary index is what we will be talking about in the case of a dynamodb when you create a",
    "start": "2886940",
    "end": "2893510"
  },
  {
    "text": "table you can also create a global secondary index while you create a table or you can actually create the global",
    "start": "2893510",
    "end": "2899840"
  },
  {
    "text": "safe secondary index after the fact so for example if in the in the camera",
    "start": "2899840",
    "end": "2904910"
  },
  {
    "start": "2903000",
    "end": "3206000"
  },
  {
    "text": "example that I gave if you have a picture you know if you're storing metadata about pictures you know",
    "start": "2904910",
    "end": "2910940"
  },
  {
    "text": "dynamodb main table were the primary key is potentially a device ID and a",
    "start": "2910940",
    "end": "2917360"
  },
  {
    "text": "timestamp is really the short key and then now you want to look up pictures by",
    "start": "2917360",
    "end": "2925250"
  },
  {
    "text": "various other attributes you know for example you may look up you may want to",
    "start": "2925250",
    "end": "2930740"
  },
  {
    "text": "look up what all the pictures you may flag them as you know pictures or whatnot right and then you",
    "start": "2930740",
    "end": "2937909"
  },
  {
    "text": "may want to actually create an index you know give me all the family pictures in which case you may you could specify",
    "start": "2937909",
    "end": "2944499"
  },
  {
    "text": "that type of picture or the genre of the picture as your as your partition key in",
    "start": "2944499",
    "end": "2953089"
  },
  {
    "text": "a global secondary index and then when you do that you can also when you create a global secondary index you can also",
    "start": "2953089",
    "end": "2958729"
  },
  {
    "text": "specify whether you just want to include just the keys or all the attributes of your primary table projected into the",
    "start": "2958729",
    "end": "2966469"
  },
  {
    "text": "into the global secondary index or specific attributes right you know for",
    "start": "2966469",
    "end": "2971749"
  },
  {
    "text": "example if you only were the projected if you didn't specify if you said keys only the primary key in which case it's",
    "start": "2971749",
    "end": "2980419"
  },
  {
    "text": "the is the photo ID and the sort key which is the time stamp would be projected along with your secondary",
    "start": "2980419",
    "end": "2987789"
  },
  {
    "text": "global secondary index then you'd have to do a lookup into dynamodb so so be",
    "start": "2987789",
    "end": "2995209"
  },
  {
    "text": "aware that based on your access patterns you can you can actually specify multiple global secondary indexes right",
    "start": "2995209",
    "end": "3002649"
  },
  {
    "text": "to do to access your data really fast yeah as a best practice if we do create",
    "start": "3002649",
    "end": "3009699"
  },
  {
    "text": "a global secondary index trail as an alternative materialized view yeah we",
    "start": "3009699",
    "end": "3016029"
  },
  {
    "text": "recommend using that GSI for for that",
    "start": "3016029",
    "end": "3022479"
  },
  {
    "text": "material view without having to go back to the table itself yeah right so try to",
    "start": "3022479",
    "end": "3028119"
  },
  {
    "text": "try to get get your answer in a in a single request yeah if it's the the",
    "start": "3028119",
    "end": "3035079"
  },
  {
    "text": "table itself or if it's the GSI you know we want to essentially minimize the the",
    "start": "3035079",
    "end": "3041349"
  },
  {
    "text": "number of round trips that we do as a just rule of thumb yeah so what what it",
    "start": "3041349",
    "end": "3048429"
  },
  {
    "text": "means project those attributes that you need in your in your query and then get",
    "start": "3048429",
    "end": "3054549"
  },
  {
    "text": "your answers satisfied from the GSI for that type of query yeah when you're going through the GSIS your data is",
    "start": "3054549",
    "end": "3060969"
  },
  {
    "text": "eventually consistent as well right when you write to the primary table Dunwoody be on your behalf you know replicates",
    "start": "3060969",
    "end": "3067839"
  },
  {
    "text": "that in a global secondary index so that's something that you have to be aware of",
    "start": "3067839",
    "end": "3072940"
  },
  {
    "text": "and so you know generally you know that's a you know that's that's that's",
    "start": "3072940",
    "end": "3079099"
  },
  {
    "text": "one of the things you need to factor into your design as well we have another index called the local secondary index",
    "start": "3079099",
    "end": "3085609"
  },
  {
    "text": "which which is consistent by definition you know that but there is a limit of 10",
    "start": "3085609",
    "end": "3090890"
  },
  {
    "text": "gigabytes of the maximum data that you want to put on the local secondary I saw a recommendation would be for all",
    "start": "3090890",
    "end": "3096770"
  },
  {
    "text": "practical purposes global secondary indexes would be the right design choice whenever pass oh yeah yeah and cool so",
    "start": "3096770",
    "end": "3104690"
  },
  {
    "text": "that is a you know that is the fundamental of the global secondary index so we'll get into this in more detail in the next session where we're",
    "start": "3104690",
    "end": "3110570"
  },
  {
    "text": "gonna be modeling you know going through the modeling with DynamoDB you know how do you model yeah GSI so for some just",
    "start": "3110570",
    "end": "3119599"
  },
  {
    "text": "final maybe closing thoughts yeah we really wanted to start off the series",
    "start": "3119599",
    "end": "3125990"
  },
  {
    "text": "yep by covering some of the fundamental concepts in DynamoDB and giving you some",
    "start": "3125990",
    "end": "3132470"
  },
  {
    "text": "resources on how to get started so we shared few resources and that I should",
    "start": "3132470",
    "end": "3140420"
  },
  {
    "text": "like to call out another show that's that's starting next you have about databases on purpose-built databases on",
    "start": "3140420",
    "end": "3147589"
  },
  {
    "text": "AWS and in fact danwoah DB will be featured at some point on that show as",
    "start": "3147589",
    "end": "3152990"
  },
  {
    "text": "well yeah but will be here every almost every every Tuesday I'm on the same time",
    "start": "3152990",
    "end": "3159290"
  },
  {
    "text": "loving a.m. Pacific time but for you know the studio is closed or something along those lines for a specific week we",
    "start": "3159290",
    "end": "3165260"
  },
  {
    "text": "may skip but we hope to have the show on a weekly basis going forward so please bring your design questions or whatever",
    "start": "3165260",
    "end": "3172520"
  },
  {
    "text": "you want us to get answered so we're all practitioners so we're gonna give you our best perspective in terms of how",
    "start": "3172520",
    "end": "3178790"
  },
  {
    "text": "what are the best practices with dynamodb and potentially how customers are leveraging the power of that I'm",
    "start": "3178790",
    "end": "3185359"
  },
  {
    "text": "gonna be in building their applications right and give us your feedback - yeah tell us what you want to hear what you",
    "start": "3185359",
    "end": "3192170"
  },
  {
    "text": "want to learn yeah and cool thank you so much thank you so much we weird we had a",
    "start": "3192170",
    "end": "3198980"
  },
  {
    "text": "great time for sending as well",
    "start": "3198980",
    "end": "3202900"
  }
]