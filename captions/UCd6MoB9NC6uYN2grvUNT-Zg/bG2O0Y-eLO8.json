[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "[Music]",
    "start": "410",
    "end": "11999"
  },
  {
    "text": "hello",
    "start": "12880",
    "end": "13840"
  },
  {
    "text": "i'm muhammad faheen a cloud support",
    "start": "13840",
    "end": "16320"
  },
  {
    "text": "engineer",
    "start": "16320",
    "end": "17279"
  },
  {
    "text": "here at the aws office in bangalore",
    "start": "17279",
    "end": "20720"
  },
  {
    "text": "today i am going to show you how to",
    "start": "20720",
    "end": "23039"
  },
  {
    "text": "handle null values",
    "start": "23039",
    "end": "24320"
  },
  {
    "text": "that are present in source csv data",
    "start": "24320",
    "end": "28640"
  },
  {
    "text": "an issue that can occur when i query csv",
    "start": "28640",
    "end": "31679"
  },
  {
    "text": "data",
    "start": "31679",
    "end": "32160"
  },
  {
    "text": "in amazon athena using opencsv survey",
    "start": "32160",
    "end": "36000"
  },
  {
    "text": "let's get started after logging into the",
    "start": "36000",
    "end": "39360"
  },
  {
    "start": "38000",
    "end": "104000"
  },
  {
    "text": "aws management console",
    "start": "39360",
    "end": "41600"
  },
  {
    "text": "navigate to the athena console",
    "start": "41600",
    "end": "44800"
  },
  {
    "text": "copy and paste the example data ddl",
    "start": "44800",
    "end": "47760"
  },
  {
    "text": "queries",
    "start": "47760",
    "end": "48719"
  },
  {
    "text": "and dml queries that are required during",
    "start": "48719",
    "end": "51360"
  },
  {
    "text": "demo from your text editor",
    "start": "51360",
    "end": "53600"
  },
  {
    "text": "such as notepad to the athena editor",
    "start": "53600",
    "end": "57280"
  },
  {
    "text": "this is the example data authentic dl",
    "start": "57280",
    "end": "60079"
  },
  {
    "text": "queries",
    "start": "60079",
    "end": "60800"
  },
  {
    "text": "and dml queries that will be used during",
    "start": "60800",
    "end": "63760"
  },
  {
    "text": "the testing",
    "start": "63760",
    "end": "65280"
  },
  {
    "text": "note that null values in the example",
    "start": "65280",
    "end": "68000"
  },
  {
    "text": "data",
    "start": "68000",
    "end": "68560"
  },
  {
    "text": "for column call 1 that will be defined",
    "start": "68560",
    "end": "71600"
  },
  {
    "text": "as the end data type",
    "start": "71600",
    "end": "74720"
  },
  {
    "text": "i have uploaded the example csv file to",
    "start": "74720",
    "end": "77680"
  },
  {
    "text": "my amazon",
    "start": "77680",
    "end": "78640"
  },
  {
    "text": "simple storage service bucket",
    "start": "78640",
    "end": "81920"
  },
  {
    "text": "let's create the example table with call",
    "start": "81920",
    "end": "84560"
  },
  {
    "text": "1",
    "start": "84560",
    "end": "85200"
  },
  {
    "text": "as the inked data type and then query it",
    "start": "85200",
    "end": "89920"
  },
  {
    "text": "the query fails with the error hybrid",
    "start": "90560",
    "end": "92799"
  },
  {
    "text": "data",
    "start": "92799",
    "end": "94880"
  },
  {
    "text": "the error is generated while handling a",
    "start": "94880",
    "end": "97119"
  },
  {
    "text": "null value",
    "start": "97119",
    "end": "97920"
  },
  {
    "text": "by open csv survey when it is defined as",
    "start": "97920",
    "end": "100799"
  },
  {
    "text": "a data type",
    "start": "100799",
    "end": "101600"
  },
  {
    "text": "other than string opencsv survey",
    "start": "101600",
    "end": "104960"
  },
  {
    "text": "recognizes",
    "start": "104960",
    "end": "106079"
  },
  {
    "text": "boolean bigint int",
    "start": "106079",
    "end": "109200"
  },
  {
    "text": "and double data types and passes them",
    "start": "109200",
    "end": "111680"
  },
  {
    "text": "without changes",
    "start": "111680",
    "end": "113439"
  },
  {
    "text": "the parser does not recognize empty or",
    "start": "113439",
    "end": "116159"
  },
  {
    "text": "null values",
    "start": "116159",
    "end": "117119"
  },
  {
    "text": "in columns that are defined as a numeric",
    "start": "117119",
    "end": "120000"
  },
  {
    "text": "data type",
    "start": "120000",
    "end": "121119"
  },
  {
    "text": "leaving them as the default data type of",
    "start": "121119",
    "end": "123119"
  },
  {
    "text": "string",
    "start": "123119",
    "end": "124799"
  },
  {
    "text": "the workaround is to declare the column",
    "start": "124799",
    "end": "126880"
  },
  {
    "start": "125000",
    "end": "245000"
  },
  {
    "text": "as a string",
    "start": "126880",
    "end": "128080"
  },
  {
    "text": "and then cast it in a select query or",
    "start": "128080",
    "end": "130959"
  },
  {
    "text": "view",
    "start": "130959",
    "end": "132560"
  },
  {
    "text": "to fix the issue let's redefine the",
    "start": "132560",
    "end": "134959"
  },
  {
    "text": "column call 1",
    "start": "134959",
    "end": "136400"
  },
  {
    "text": "in the table as string",
    "start": "136400",
    "end": "139840"
  },
  {
    "text": "here is the new ddl which define call 1",
    "start": "139840",
    "end": "142480"
  },
  {
    "text": "as string",
    "start": "142480",
    "end": "143360"
  },
  {
    "text": "and dml let's create the example table",
    "start": "143360",
    "end": "147120"
  },
  {
    "text": "with call 1 as a string data type and",
    "start": "147120",
    "end": "150239"
  },
  {
    "text": "then query it",
    "start": "150239",
    "end": "152480"
  },
  {
    "text": "as shown in within a result window we",
    "start": "152480",
    "end": "154560"
  },
  {
    "text": "can query the data successfully",
    "start": "154560",
    "end": "156640"
  },
  {
    "text": "when call 1 is defined as a string data",
    "start": "156640",
    "end": "159200"
  },
  {
    "text": "type",
    "start": "159200",
    "end": "160959"
  },
  {
    "text": "we can create a new column by trying to",
    "start": "160959",
    "end": "163040"
  },
  {
    "text": "cast the call 1",
    "start": "163040",
    "end": "164319"
  },
  {
    "text": "data values as integer data type using",
    "start": "164319",
    "end": "167440"
  },
  {
    "text": "try and cast function wherever possible",
    "start": "167440",
    "end": "170720"
  },
  {
    "text": "and if it cannot cast the null values",
    "start": "170720",
    "end": "173360"
  },
  {
    "text": "value as",
    "start": "173360",
    "end": "174160"
  },
  {
    "text": "integer it fails to solve this",
    "start": "174160",
    "end": "177840"
  },
  {
    "text": "we can use the calls function which will",
    "start": "177840",
    "end": "180640"
  },
  {
    "text": "set null values",
    "start": "180640",
    "end": "181920"
  },
  {
    "text": "to the default integer value which is 0",
    "start": "181920",
    "end": "184560"
  },
  {
    "text": "in this case",
    "start": "184560",
    "end": "186879"
  },
  {
    "text": "let's run the sample query with cast try",
    "start": "186879",
    "end": "190480"
  },
  {
    "text": "and call as functions to validate the",
    "start": "190480",
    "end": "192560"
  },
  {
    "text": "behavior",
    "start": "192560",
    "end": "194480"
  },
  {
    "text": "as shown in the athana result window we",
    "start": "194480",
    "end": "196480"
  },
  {
    "text": "can handle the null values",
    "start": "196480",
    "end": "198080"
  },
  {
    "text": "in the source data and cache the column",
    "start": "198080",
    "end": "200239"
  },
  {
    "text": "call 1 as the integer data type",
    "start": "200239",
    "end": "203280"
  },
  {
    "text": "then we can create a new column casted",
    "start": "203280",
    "end": "206319"
  },
  {
    "text": "column",
    "start": "206319",
    "end": "206879"
  },
  {
    "text": "successfully with the integer data type",
    "start": "206879",
    "end": "210319"
  },
  {
    "text": "we can check the data type of casted",
    "start": "210319",
    "end": "212239"
  },
  {
    "text": "column using",
    "start": "212239",
    "end": "214239"
  },
  {
    "text": "type of function as shown in the select",
    "start": "214239",
    "end": "216959"
  },
  {
    "text": "query",
    "start": "216959",
    "end": "218879"
  },
  {
    "text": "let's run the sample query with type of",
    "start": "218879",
    "end": "221120"
  },
  {
    "text": "function to check the column",
    "start": "221120",
    "end": "222959"
  },
  {
    "text": "casted column data type as shown in the",
    "start": "222959",
    "end": "226480"
  },
  {
    "text": "athena result window",
    "start": "226480",
    "end": "228000"
  },
  {
    "text": "we can view that the new column casted",
    "start": "228000",
    "end": "230480"
  },
  {
    "text": "column",
    "start": "230480",
    "end": "231360"
  },
  {
    "text": "is the integer data type thanks for",
    "start": "231360",
    "end": "234560"
  },
  {
    "text": "watching and happy cloud computing",
    "start": "234560",
    "end": "236640"
  },
  {
    "text": "from all of us here at aws",
    "start": "236640",
    "end": "241840"
  },
  {
    "text": "[Music]",
    "start": "242640",
    "end": "245770"
  }
]