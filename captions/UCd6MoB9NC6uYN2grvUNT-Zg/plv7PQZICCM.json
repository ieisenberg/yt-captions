[
  {
    "start": "0",
    "end": "96000"
  },
  {
    "text": "okay let's get started I understand this is the last session in this room today",
    "start": "30",
    "end": "5540"
  },
  {
    "text": "I'm sure many of you are exhausted after day 1 of reinforced thanks for coming to",
    "start": "5540",
    "end": "11910"
  },
  {
    "text": "learn about a very simple and easy to understand topic which is how do you get",
    "start": "11910",
    "end": "18029"
  },
  {
    "text": "assurances that unauthorized users don't access your data in the cloud so for",
    "start": "18029",
    "end": "26340"
  },
  {
    "text": "those of you who have seen some other encryption related presentations today this will try to focus a little bit more",
    "start": "26340",
    "end": "33270"
  },
  {
    "text": "on how you prove things to yourself how we prove things to ourself how you can",
    "start": "33270",
    "end": "39210"
  },
  {
    "text": "get some evidence that allows you to prove things to others inside your company whether they be regulators",
    "start": "39210",
    "end": "44969"
  },
  {
    "text": "auditors or people inside your IT security group so we'll start at a high",
    "start": "44969",
    "end": "50219"
  },
  {
    "text": "level why encrypt in the first place and these are common reasons we hear from our",
    "start": "50219",
    "end": "55410"
  },
  {
    "text": "customers we think that it boils down to minimizing unauthorized access to data",
    "start": "55410",
    "end": "62840"
  },
  {
    "text": "now I'm separating physical access from logical access because physical access",
    "start": "62840",
    "end": "68580"
  },
  {
    "text": "is easy for people to understand right I can hug my server I can stick a USB",
    "start": "68580",
    "end": "73920"
  },
  {
    "text": "token or a serial cable inside a device or pour it inside my server and somehow",
    "start": "73920",
    "end": "80130"
  },
  {
    "text": "get data directly off of it but of course physical security is not something you even get to worry about",
    "start": "80130",
    "end": "85549"
  },
  {
    "text": "when you go to the cloud and so logical security tends to be the thing that's",
    "start": "85549",
    "end": "91049"
  },
  {
    "text": "more relevant but it's also a little more abstract so let's talk about the",
    "start": "91049",
    "end": "97290"
  },
  {
    "start": "96000",
    "end": "96000"
  },
  {
    "text": "ways that you might minimize unauthorized physical access to data in the cloud so if you are transporting",
    "start": "97290",
    "end": "105270"
  },
  {
    "text": "your data to the cloud over the public Internet maybe it's a dedicated direct",
    "start": "105270",
    "end": "110790"
  },
  {
    "text": "connect you still are thinking about what are the possibilities for",
    "start": "110790",
    "end": "116899"
  },
  {
    "text": "man-in-the-middle attacks any type of sniffers that might be in between you",
    "start": "116899",
    "end": "122310"
  },
  {
    "text": "and the connection there and that's one of the reasons why a lot of people tend to use Direct Connect or look at",
    "start": "122310",
    "end": "129000"
  },
  {
    "text": "encryption mechanisms for transporting data on the wire of course if you're moving very large",
    "start": "129000",
    "end": "135060"
  },
  {
    "text": "amounts of data via snowmobile or even individual snowball devices now you have",
    "start": "135060",
    "end": "141420"
  },
  {
    "text": "to ensure that what happens with compromise of that data as it moves from point A to point B now data at rest in",
    "start": "141420",
    "end": "149730"
  },
  {
    "text": "this case you have to you want to be thinking about who are all the people to",
    "start": "149730",
    "end": "156930"
  },
  {
    "text": "get inside AWS data centers right what do they have access to what's to stop an",
    "start": "156930",
    "end": "163560"
  },
  {
    "text": "eighth of this employee from pulling a disk and going home with it again these",
    "start": "163560",
    "end": "169320"
  },
  {
    "text": "are things that you can't easily reason about because we don't let you into our data centers right we let our auditors",
    "start": "169320",
    "end": "175470"
  },
  {
    "text": "into our data centers but you don't get to do this and data in use so if you",
    "start": "175470",
    "end": "181440"
  },
  {
    "text": "assume that your data is actively being worked on by some compute process it's",
    "start": "181440",
    "end": "188460"
  },
  {
    "text": "inside memory inside a physical host then how would you know whether or not",
    "start": "188460",
    "end": "193950"
  },
  {
    "text": "people have the ability to take a device that is actually processing data in",
    "start": "193950",
    "end": "199140"
  },
  {
    "text": "memory and do something to it to be able to retrieve that data so with logical",
    "start": "199140",
    "end": "206670"
  },
  {
    "start": "204000",
    "end": "204000"
  },
  {
    "text": "access some of the steam controls come into play when you're talking about data",
    "start": "206670",
    "end": "213090"
  },
  {
    "text": "and transport or data in transit right network access controls become very critical we don't give you the",
    "start": "213090",
    "end": "220410"
  },
  {
    "text": "opportunity to think much about layers 1 2 & 3 but layer 4 access controls and",
    "start": "220410",
    "end": "228240"
  },
  {
    "text": "then application layer access controls or something we do give you some controls over so data at rest and this",
    "start": "228240",
    "end": "236940"
  },
  {
    "text": "is a big part of putting your data inside a cloud service because you get a",
    "start": "236940",
    "end": "242010"
  },
  {
    "text": "at least in the case of AWS a thing called an Amazon resource name and arm this represents your EBS snapshot or",
    "start": "242010",
    "end": "251240"
  },
  {
    "text": "your redshift cluster ID and now you have to build logical controls to ensure",
    "start": "251240",
    "end": "257430"
  },
  {
    "text": "who has the ability to cause that data to be transported into memory on a live",
    "start": "257430",
    "end": "263490"
  },
  {
    "text": "instance and therefore accessible to anybody who has access to the instance encryption is",
    "start": "263490",
    "end": "269910"
  },
  {
    "text": "a good mechanism as a belt-and-suspenders approach to say while this data is it at rest until I",
    "start": "269910",
    "end": "277139"
  },
  {
    "text": "declare that I want it to be active and accessible I want it to be scrambled so",
    "start": "277139",
    "end": "282720"
  },
  {
    "text": "that if anybody does have the ability to pull a disk and take it away that they",
    "start": "282720",
    "end": "289560"
  },
  {
    "text": "won't be able to decrypt it data in use so this is where we think about an ec2",
    "start": "289560",
    "end": "298710"
  },
  {
    "text": "instance where the compute resource and the memory resource belongs to you now",
    "start": "298710",
    "end": "304440"
  },
  {
    "text": "do you have controls to ensure that unauthorized users are not able to get into that instance perhaps sudo into",
    "start": "304440",
    "end": "311849"
  },
  {
    "text": "your Linux shell or power users that are getting into your Windows environment that's a control that you are",
    "start": "311849",
    "end": "319680"
  },
  {
    "text": "responsible for but you also want to think about again what are the ways in which humans working inside data centers",
    "start": "319680",
    "end": "326970"
  },
  {
    "text": "might be able to get access to your data that's running inside ec2 or your data",
    "start": "326970",
    "end": "332550"
  },
  {
    "text": "that's being pushed to a managed service so when you transfer data to s3 it goes",
    "start": "332550",
    "end": "338310"
  },
  {
    "text": "through a web server that receives your put request what do we know about the",
    "start": "338310",
    "end": "344130"
  },
  {
    "text": "security controls on those servers to be able to prevent humans from accessing",
    "start": "344130",
    "end": "349320"
  },
  {
    "text": "that data so let's talk a little bit about the persona involved here so I'll",
    "start": "349320",
    "end": "355919"
  },
  {
    "start": "351000",
    "end": "351000"
  },
  {
    "text": "show three here the software developer who is eager to go build great things and they've been given thousands of",
    "start": "355919",
    "end": "362849"
  },
  {
    "text": "api's from AWS to go stand up resources and transfer data from your business to",
    "start": "362849",
    "end": "370319"
  },
  {
    "text": "go build cool applications so the keys that are being used and there's",
    "start": "370319",
    "end": "375599"
  },
  {
    "text": "typically two types of keys authentication or access keys and then encryption keys and this developer wants",
    "start": "375599",
    "end": "382440"
  },
  {
    "text": "to do the right thing and of course they want to be able to do the right thing",
    "start": "382440",
    "end": "387840"
  },
  {
    "text": "easily and they want to do it at scale then there's the IT security group that",
    "start": "387840",
    "end": "395110"
  },
  {
    "text": "is perhaps fundamentally responsible for the confidentiality and integrity of",
    "start": "395110",
    "end": "401050"
  },
  {
    "text": "this data they have policies and processes that they've been using for on-premises systems for years and they",
    "start": "401050",
    "end": "407530"
  },
  {
    "text": "want to map those to the developer who's trying to move the workload to the cloud so how does this person think about",
    "start": "407530",
    "end": "415020"
  },
  {
    "text": "minimizing physical and logical access to data and then finally there's a role",
    "start": "415020",
    "end": "422260"
  },
  {
    "text": "of somebody in compliance whether its internal or external and they're effectively looking for evidence that",
    "start": "422260",
    "end": "429340"
  },
  {
    "text": "the developer did the right thing when the data was moved from point A to point",
    "start": "429340",
    "end": "434620"
  },
  {
    "text": "B and IT security is doing the right thing to monitor all the developers and",
    "start": "434620",
    "end": "439930"
  },
  {
    "text": "there's evidence that the proper security and the proper controls have",
    "start": "439930",
    "end": "445180"
  },
  {
    "text": "been put in place to minimize unauthorized access so we'll talk about",
    "start": "445180",
    "end": "451300"
  },
  {
    "text": "various features as well as documents and ideas that we have to share about",
    "start": "451300",
    "end": "457750"
  },
  {
    "text": "AWS security in the context of these three people so in the context of",
    "start": "457750",
    "end": "464350"
  },
  {
    "start": "461000",
    "end": "461000"
  },
  {
    "text": "encryption for years I've gotten the fundamental requirement that says well we'll move to the cloud but only if we",
    "start": "464350",
    "end": "471280"
  },
  {
    "text": "control all the keys now the question is will mr. customer what do you mean by",
    "start": "471280",
    "end": "476800"
  },
  {
    "text": "control all the keys so from taking the word control we think that you actually",
    "start": "476800",
    "end": "486160"
  },
  {
    "text": "do need to put very stringent controls on the access keys that you use because",
    "start": "486160",
    "end": "492729"
  },
  {
    "text": "the access keys whether it's in the form of API signing keys or a password that",
    "start": "492729",
    "end": "497740"
  },
  {
    "text": "you used to log into the console this is what uniquely identifies you as the",
    "start": "497740",
    "end": "504940"
  },
  {
    "text": "individual developer or as a role a group of people that are attempting to",
    "start": "504940",
    "end": "510070"
  },
  {
    "text": "cause an AWS API to do something for you right and if you do not keep the secret",
    "start": "510070",
    "end": "516339"
  },
  {
    "text": "access keys or the console passwords private then anybody can impersonate you",
    "start": "516339",
    "end": "522280"
  },
  {
    "text": "so this part of physical security of credentials is actually your",
    "start": "522280",
    "end": "527320"
  },
  {
    "text": "responsibility which is why we recommend that for highly privileged accounts or",
    "start": "527320",
    "end": "532480"
  },
  {
    "text": "users within those accounts that you MFA protect those credentials and you take",
    "start": "532480",
    "end": "538240"
  },
  {
    "text": "the MFA device and you put it in a safe somewhere or you get some type of separation of control to ensure that",
    "start": "538240",
    "end": "545230"
  },
  {
    "text": "it's hard for an attacker to impersonate you and cause things to be happening inside AWS and of course the ability to",
    "start": "545230",
    "end": "553390"
  },
  {
    "text": "modify any policies or permissions that apply to those identities is a",
    "start": "553390",
    "end": "558760"
  },
  {
    "text": "critically important role and those users and their credentials need extra",
    "start": "558760",
    "end": "565300"
  },
  {
    "text": "security now the compliance person is going to be interested in knowing well what changes were made right Alice was a privileged",
    "start": "565300",
    "end": "573400"
  },
  {
    "text": "administrator with I am star dot star permissions and Bob all the sudden got",
    "start": "573400",
    "end": "579520"
  },
  {
    "text": "those same permissions was that an authorized escalation of privilege for Bob right when did it happen",
    "start": "579520",
    "end": "586410"
  },
  {
    "text": "against which resources or which accounts does Bob now have I am start I",
    "start": "586410",
    "end": "591970"
  },
  {
    "text": "store permissions so completing the cycle from defining your access policies",
    "start": "591970",
    "end": "599670"
  },
  {
    "text": "you can lose defining the mental model as well as writing them down and acting",
    "start": "599670",
    "end": "604900"
  },
  {
    "text": "them using policies inside AWS whether it's the console or programmatically via",
    "start": "604900",
    "end": "610150"
  },
  {
    "text": "JSON files and then looking at things like cloud trail to say okay this API",
    "start": "610150",
    "end": "615760"
  },
  {
    "text": "action was called put policy was called it made a change for a particular user",
    "start": "615760",
    "end": "621760"
  },
  {
    "text": "that closes the gap for the compliance team now the nice thing about access",
    "start": "621760",
    "end": "628390"
  },
  {
    "text": "Keys is that they can be rotated at any point and you can forget old keys all",
    "start": "628390",
    "end": "634210"
  },
  {
    "text": "right and that's a best practice in fact we strongly recommend that you take advantage of temporary security",
    "start": "634210",
    "end": "640900"
  },
  {
    "text": "credentials and access keys wherever you can via the roles for ec2 feature where",
    "start": "640900",
    "end": "647320"
  },
  {
    "text": "we rotate new creds every hour and push them to the instance metadata service on",
    "start": "647320",
    "end": "652450"
  },
  {
    "text": "ec2 however with encryption keys while you can't rotate them you can't get rid of",
    "start": "652450",
    "end": "658200"
  },
  {
    "text": "old ones anything that's been encrypted under a given key if that key is leaked",
    "start": "658200",
    "end": "664590"
  },
  {
    "text": "to the wrong folks they could potentially decrypt that piece of data so here we're actually concerned about",
    "start": "664590",
    "end": "671220"
  },
  {
    "text": "durability of keys and those keys have to be very close to the data that they",
    "start": "671220",
    "end": "676920"
  },
  {
    "text": "are encrypting and we recommend that you allow your cloud provider to store keys",
    "start": "676920",
    "end": "684480"
  },
  {
    "text": "as close as possible to your workloads so that they can be used and minimize latency on any reads and writes that you",
    "start": "684480",
    "end": "691770"
  },
  {
    "text": "need to do so now you have to worry about well as my cloud provider going to keep these keys durable or do I need to",
    "start": "691770",
    "end": "698310"
  },
  {
    "text": "worry about them losing a key that might be ultimately responsible in a hierarchy",
    "start": "698310",
    "end": "703710"
  },
  {
    "text": "to protect billions of s3 objects again",
    "start": "703710",
    "end": "708720"
  },
  {
    "text": "like permissions on users and roles you want to be able to define permissions on",
    "start": "708720",
    "end": "714510"
  },
  {
    "text": "keys and those need to be independent permissions from the access to the",
    "start": "714510",
    "end": "720720"
  },
  {
    "text": "resource itself so an s3 bucket policy that says Bob and Alice have get",
    "start": "720720",
    "end": "728610"
  },
  {
    "text": "permissions to pull objects from that s3 bucket but there's certain data inside",
    "start": "728610",
    "end": "735810"
  },
  {
    "text": "that bucket that's encrypted and only Alice has permission so she only gets",
    "start": "735810",
    "end": "740820"
  },
  {
    "text": "permission to call decrypt against the master key required to encrypt that",
    "start": "740820",
    "end": "746100"
  },
  {
    "text": "object in the s3 bucket which means Bob while he can quote get the object from",
    "start": "746100",
    "end": "752790"
  },
  {
    "text": "an s3 standpoint doesn't get any data returned because it can't be decrypted",
    "start": "752790",
    "end": "757940"
  },
  {
    "text": "right so managing those different policies and having an audit every time a change was made to the key policy to",
    "start": "757940",
    "end": "766440"
  },
  {
    "text": "access encryption keys it's just as important as being able to have those types of controls on your ion policies",
    "start": "766440",
    "end": "773630"
  },
  {
    "start": "773000",
    "end": "773000"
  },
  {
    "text": "so Steve Schmidt showed this slide this morning trying to give you a sense of",
    "start": "773630",
    "end": "780480"
  },
  {
    "text": "the OSI maybe not all seven layers but many of them to explain where",
    "start": "780480",
    "end": "786030"
  },
  {
    "text": "cryptography is being so what I want to focus on here is that",
    "start": "786030",
    "end": "792509"
  },
  {
    "text": "as you least in this diagram go down but actually go up in terms of layers more",
    "start": "792509",
    "end": "798540"
  },
  {
    "text": "towards layer four layer seven we're starting to give our customers more control over whether or not things are",
    "start": "798540",
    "end": "807000"
  },
  {
    "text": "encrypted and the keys that are used to encrypt those channels whether it's data",
    "start": "807000",
    "end": "813420"
  },
  {
    "text": "in transit or at the application layer to also include data at rest now the",
    "start": "813420",
    "end": "818550"
  },
  {
    "text": "lower level for physical layer data link those are can if you imagine default",
    "start": "818550",
    "end": "826800"
  },
  {
    "text": "encryption right and we're actually using different technologies than we provide at the higher levels and that's",
    "start": "826800",
    "end": "833550"
  },
  {
    "text": "the best practice because you don't necessarily want the exact same algorithms used to encrypt packets of",
    "start": "833550",
    "end": "840089"
  },
  {
    "text": "data going across the network if those packets are going to be encrypted at rest use a slightly",
    "start": "840089",
    "end": "845970"
  },
  {
    "text": "different algorithm okay this again provides multiple levels of protection so if there is a if there were to be a",
    "start": "845970",
    "end": "853709"
  },
  {
    "text": "breakdown in any one of those levels or if you made a policy mistake in giving",
    "start": "853709",
    "end": "860779"
  },
  {
    "text": "somebody access to decryption keys that shouldn't have that access you get some",
    "start": "860779",
    "end": "866190"
  },
  {
    "text": "protection at the other layer so let's start with talking about data and",
    "start": "866190",
    "end": "871410"
  },
  {
    "text": "transit security so what's available today so VPC encryption that will",
    "start": "871410",
    "end": "877730"
  },
  {
    "start": "873000",
    "end": "873000"
  },
  {
    "text": "transparently encrypt connections between ec2 instances across a V PC this",
    "start": "877730",
    "end": "883680"
  },
  {
    "text": "is available in the newer instance types that take advantage of the nitro hardware then there's three different",
    "start": "883680",
    "end": "890250"
  },
  {
    "text": "flavors of VPN so from your data center to the AWS cloud you can make encrypted",
    "start": "890250",
    "end": "897959"
  },
  {
    "text": "connections using some of our managed services whether you're using Direct Connect or not and then of course you",
    "start": "897959",
    "end": "904470"
  },
  {
    "text": "can always install your own VPN Terminator inside an ec2 instance and use that along with IPSec to encrypt",
    "start": "904470",
    "end": "913199"
  },
  {
    "text": "data that's going into the cloud so we're not done innovating in this space",
    "start": "913199",
    "end": "919089"
  },
  {
    "text": "because we think that there are valid reasons for you to have encryption on",
    "start": "919089",
    "end": "924639"
  },
  {
    "text": "every single connection anywhere where there's point-to-point data going",
    "start": "924639",
    "end": "930879"
  },
  {
    "text": "between logical instances or physical devices on your data center between AZ's",
    "start": "930879",
    "end": "937719"
  },
  {
    "text": "between regions we want to make sure that there is at least a strong insane",
    "start": "937719",
    "end": "943509"
  },
  {
    "text": "level of default encryption and over time we're looking at ways in which we can give you control over routes a trust",
    "start": "943509",
    "end": "950109"
  },
  {
    "text": "for that Transport Security okay if we go up a little higher above where IPSec",
    "start": "950109",
    "end": "956349"
  },
  {
    "text": "plays into later seven so TLS over HTTP right if you are terminating a",
    "start": "956349",
    "end": "963449"
  },
  {
    "text": "connection from one of your customers one of your internal users you have",
    "start": "963449",
    "end": "969099"
  },
  {
    "text": "options there you can have that termination handled inside your own web",
    "start": "969099",
    "end": "974319"
  },
  {
    "text": "server instance running on ec2 inside ELB including the network load balancer",
    "start": "974319",
    "end": "980169"
  },
  {
    "text": "and application load balancer you might be using the content delivery network cloud front to be able to terminate",
    "start": "980169",
    "end": "987489"
  },
  {
    "text": "stuff that you're trying to make available for your web sites and finally api gateway so in each of these cases",
    "start": "987489",
    "end": "995499"
  },
  {
    "text": "you're able to bring your own digital certificates your own digital cryptographic identity if you get your",
    "start": "995499",
    "end": "1002159"
  },
  {
    "text": "certificates from an existing CA then you can insert them into these endpoints",
    "start": "1002159",
    "end": "1008039"
  },
  {
    "text": "and use them to terminate TLS ok but",
    "start": "1008039",
    "end": "1013829"
  },
  {
    "text": "what if you don't want to be managing certificates if you don't want to acquire them whether they're either too",
    "start": "1013829",
    "end": "1019199"
  },
  {
    "start": "1015000",
    "end": "1015000"
  },
  {
    "text": "expensive or it's too painful to acquire them transport them securely and then",
    "start": "1019199",
    "end": "1025470"
  },
  {
    "text": "deploy them to the right endpoint so we introduced Amazon certificate manager a",
    "start": "1025470",
    "end": "1031048"
  },
  {
    "text": "couple years ago and in the context of public certificates so these are certificates where the route of trust is",
    "start": "1031049",
    "end": "1038269"
  },
  {
    "text": "likely to be inside the common trust doors available in browsers as well as",
    "start": "1038269",
    "end": "1043470"
  },
  {
    "text": "SDKs so again in this model we generate the public and private key pair we",
    "start": "1043470",
    "end": "1051000"
  },
  {
    "text": "create the certificate using the distinguished name information that you give us that you want for your",
    "start": "1051000",
    "end": "1056610"
  },
  {
    "text": "domain and we can automatically provision this down to your TLS termination endpoints ACM handles the",
    "start": "1056610",
    "end": "1067380"
  },
  {
    "text": "painful parts of managing a PK I write strong entropy sources to generate key",
    "start": "1067380",
    "end": "1073800"
  },
  {
    "text": "pairs this certificate signing request taking the private keys and making sure",
    "start": "1073800",
    "end": "1080490"
  },
  {
    "text": "that they themselves are protected in storage so you get durability of your certificate and private key but it's",
    "start": "1080490",
    "end": "1087690"
  },
  {
    "text": "encrypted at rest and finally the big one which is the managed renewal and",
    "start": "1087690",
    "end": "1093300"
  },
  {
    "text": "deployment so we can push the certificate down to the endpoint where it belongs and ACM will know when it's",
    "start": "1093300",
    "end": "1101130"
  },
  {
    "text": "time to renew in a year and automatically run through the process again to generate new key pairs or",
    "start": "1101130",
    "end": "1108420"
  },
  {
    "text": "extend the life of existing keys and renewed certificates okay and because",
    "start": "1108420",
    "end": "1114870"
  },
  {
    "text": "it's a public CA here we need to verify that you actually own the domain it's",
    "start": "1114870",
    "end": "1120900"
  },
  {
    "text": "going to be inside the DN and we can do this through both DNS validation and email private certificates or private CA",
    "start": "1120900",
    "end": "1129780"
  },
  {
    "text": "is a slightly different spin here where the root of trust is actually something",
    "start": "1129780",
    "end": "1135450"
  },
  {
    "text": "you define because the trust or on the client side that's trying to evaluate that rooted trust again you control so",
    "start": "1135450",
    "end": "1143220"
  },
  {
    "text": "this is more internal components where you want encryption from point A to point B but you don't necessarily care",
    "start": "1143220",
    "end": "1150929"
  },
  {
    "text": "about the root of trust inside the certificate on the server side so one of the nice things that we",
    "start": "1150929",
    "end": "1159540"
  },
  {
    "text": "announced last week is the ability to have privacy generate certificates and",
    "start": "1159540",
    "end": "1165420"
  },
  {
    "text": "then export them an encrypted form and you can take them and move them around to different systems so just like you",
    "start": "1165420",
    "end": "1172559"
  },
  {
    "text": "could bring your own certificate to ec2 and install that inside a web server you can now have private CA certs generated",
    "start": "1172559",
    "end": "1180230"
  },
  {
    "text": "and exported and use them inside ec2 now the nice feature that we introduced",
    "start": "1180230",
    "end": "1186909"
  },
  {
    "text": "was this idea of creating your own route so it used to be you had to have an existing CA and you would give us an",
    "start": "1186909",
    "end": "1193869"
  },
  {
    "text": "intermediate cert and declare that to be an issuing intermediate cert now you can",
    "start": "1193869",
    "end": "1200200"
  },
  {
    "text": "ask a cm to say just create me a route here's the fully qualified domain name and now I'm gonna generate certs",
    "start": "1200200",
    "end": "1208210"
  },
  {
    "text": "underneath that so it gets even easier okay and all of the good stuff that we",
    "start": "1208210",
    "end": "1214539"
  },
  {
    "text": "can deal with public certificates we get to do this with private certificates now",
    "start": "1214539",
    "end": "1220239"
  },
  {
    "text": "if you are exporting certs and now taking that material and putting it in some endpoint that we don't necessarily",
    "start": "1220239",
    "end": "1226210"
  },
  {
    "text": "control whether it's an ec2 instance or some server outside of AWS we still can",
    "start": "1226210",
    "end": "1234369"
  },
  {
    "text": "do manage notifications and we will automatically generate a new search and have it available so if you have a",
    "start": "1234369",
    "end": "1240309"
  },
  {
    "text": "client that's frequently pulling the service to say hey is there a new cert available for me to talk to this",
    "start": "1240309",
    "end": "1247239"
  },
  {
    "text": "endpoint that will be available for you so let's take a little bit deeper about",
    "start": "1247239",
    "end": "1253679"
  },
  {
    "start": "1251000",
    "end": "1251000"
  },
  {
    "text": "how do we ensure that unauthorized users don't go in and somehow hijack certs and",
    "start": "1253679",
    "end": "1260049"
  },
  {
    "text": "pretend to be your domain or your identity so how does this process work",
    "start": "1260049",
    "end": "1266129"
  },
  {
    "text": "I'll use the example here for public certificates so the certificate manager",
    "start": "1266129",
    "end": "1272229"
  },
  {
    "text": "gets a request it says I if I login I say I want a public search for dub dub",
    "start": "1272229",
    "end": "1278859"
  },
  {
    "text": "dub can be com alright it'll go through DNS validation to make sure actually own",
    "start": "1278859",
    "end": "1284559"
  },
  {
    "text": "the domain then it will generate the RSA key pair and create the certificate in",
    "start": "1284559",
    "end": "1291009"
  },
  {
    "text": "memory on one of its systems now it has to be able to store that somewhere for",
    "start": "1291009",
    "end": "1296799"
  },
  {
    "text": "durability because the existence of the certificate is nice but at some point in the future you're going to want that",
    "start": "1296799",
    "end": "1302769"
  },
  {
    "text": "deployed out to end devices so before this certificate and the key material is",
    "start": "1302769",
    "end": "1309159"
  },
  {
    "text": "actually written to disk ACM calls out to the key management service and says I need a data key",
    "start": "1309159",
    "end": "1317070"
  },
  {
    "text": "this is gonna be a 256-bit data key and it is going to use that data key to encrypt the package of certificate plus",
    "start": "1317070",
    "end": "1326150"
  },
  {
    "text": "private RSA key so now the ciphertext blob sits in storage and ACM at some",
    "start": "1326150",
    "end": "1334320"
  },
  {
    "text": "point you're gonna say alright I'm ready to spin up another elastic load balancer if you happen to use that service",
    "start": "1334320",
    "end": "1341809"
  },
  {
    "text": "elastic load balancer has a config that says hey I want to use this particular certificate that is available in a cm so",
    "start": "1342200",
    "end": "1349050"
  },
  {
    "text": "ELB will then call to ACM and say give me that ciphertext blob that represents",
    "start": "1349050",
    "end": "1354090"
  },
  {
    "text": "the certificate so again we're passing ciphertext between two systems the ACM",
    "start": "1354090",
    "end": "1359670"
  },
  {
    "text": "service and the host that has your lb on it now lb can't use that encrypted blob",
    "start": "1359670",
    "end": "1367950"
  },
  {
    "start": "1365000",
    "end": "1365000"
  },
  {
    "text": "for anything because it's encrypted so what does it do well it actually uses your identity when you spun up the ELB",
    "start": "1367950",
    "end": "1375840"
  },
  {
    "text": "you asked lb to create an instance and it passes the encrypted data key that",
    "start": "1375840",
    "end": "1383790"
  },
  {
    "text": "ACM previously got passes its kms under your identity and says please return the",
    "start": "1383790",
    "end": "1390570"
  },
  {
    "text": "decrypted data key so again here the actual RSA private key in your",
    "start": "1390570",
    "end": "1396300"
  },
  {
    "text": "certificate have not left the e lb memory on that host right just the data",
    "start": "1396300",
    "end": "1402960"
  },
  {
    "text": "key needed to decrypt it and once it gets a data key it then decrypts that",
    "start": "1402960",
    "end": "1408210"
  },
  {
    "text": "blob and provisions your private key and the certificate into memory so it can now terminate TLS and your clients trust",
    "start": "1408210",
    "end": "1415560"
  },
  {
    "text": "it when that e lb goes down either presence excuse me it's our fault or you",
    "start": "1415560",
    "end": "1422670"
  },
  {
    "text": "say nope I want the CL B to stop or to terminate then all the key material including the private key disappear and",
    "start": "1422670",
    "end": "1430260"
  },
  {
    "text": "we go through this dance for every single lb or every single cloud front end point or every single a lb or n lb",
    "start": "1430260",
    "end": "1436040"
  },
  {
    "text": "it goes through this dance to get the necessary decryption keys from kms again",
    "start": "1436040",
    "end": "1442410"
  },
  {
    "text": "using your users identity and that user has to have permissions to call kms",
    "start": "1442410",
    "end": "1448860"
  },
  {
    "text": "decrypt for that process to work okay so the",
    "start": "1448860",
    "end": "1455710"
  },
  {
    "text": "next question should be well that's great Ken but I can't see any of that happening so how do we know that you",
    "start": "1455710",
    "end": "1462820"
  },
  {
    "start": "1461000",
    "end": "1461000"
  },
  {
    "text": "guys are doing it correctly right and this is where we invest heavily in to",
    "start": "1462820",
    "end": "1468279"
  },
  {
    "text": "third-party compliance schemes and getting audits of our own services and our own technology so that you can trust",
    "start": "1468279",
    "end": "1475690"
  },
  {
    "text": "that things like for example when we issue the certificate and we create",
    "start": "1475690",
    "end": "1480940"
  },
  {
    "text": "those keys are we adhering to best practices that are expected by all public CAS on the planet well yes we do",
    "start": "1480940",
    "end": "1489129"
  },
  {
    "text": "because we get our web trust audit done every year we're members of the cab form",
    "start": "1489129",
    "end": "1494250"
  },
  {
    "text": "for anybody out here and in Europe you know that Etsy has a standard that's very similar to web trust and that's",
    "start": "1494250",
    "end": "1502000"
  },
  {
    "text": "just for the certificate generation and storage the entire service and all the security controls around software change",
    "start": "1502000",
    "end": "1508960"
  },
  {
    "text": "control and privileged access by administrators all fall under our standard compliance schemes like the",
    "start": "1508960",
    "end": "1515320"
  },
  {
    "text": "sock or ISO 27000 in gov cloud we",
    "start": "1515320",
    "end": "1520690"
  },
  {
    "text": "operate ACM and therefore it's ITAR compliant right so the items on the left",
    "start": "1520690",
    "end": "1527049"
  },
  {
    "text": "there are pretty standard across most services and you'll see the security",
    "start": "1527049",
    "end": "1532090"
  },
  {
    "text": "focused services have a whole raft of these compliance schemes and that's",
    "start": "1532090",
    "end": "1538120"
  },
  {
    "text": "because we know that we've hidden a lot of the secret sauce around the",
    "start": "1538120",
    "end": "1543519"
  },
  {
    "text": "generation and handling of sensitive materials but we want you to make sure you can connect the dots either with",
    "start": "1543519",
    "end": "1550480"
  },
  {
    "text": "your own IT security team or with an external regulator okay something else",
    "start": "1550480",
    "end": "1558340"
  },
  {
    "text": "that we let you do is where we're using open source either for say key",
    "start": "1558340",
    "end": "1565600"
  },
  {
    "text": "generation encryption processes in this case with s to n this is the TLS",
    "start": "1565600",
    "end": "1570820"
  },
  {
    "text": "protocol that we use in our own services we give you the ability to download the",
    "start": "1570820",
    "end": "1577509"
  },
  {
    "text": "open source and s2 n actually has you'll see the fourth bullet point there an automated formal verification process",
    "start": "1577509",
    "end": "1585369"
  },
  {
    "text": "that ensures that the outputs of cryptographic operations as a part of a",
    "start": "1585369",
    "end": "1591249"
  },
  {
    "text": "TLS session negotiation are correct for all potential inputs it's kind of like",
    "start": "1591249",
    "end": "1596379"
  },
  {
    "text": "an integration test that we do ourselves with the open source that we publish to",
    "start": "1596379",
    "end": "1602919"
  },
  {
    "text": "github and we do these same tests every time we publish this code package to our own services API endpoints okay so",
    "start": "1602919",
    "end": "1612460"
  },
  {
    "text": "here's another opportunity for you to say well sure at that point in time Ken",
    "start": "1612460",
    "end": "1617859"
  },
  {
    "text": "told me this stuff was secure or the sock audit that happens twice a year yeah and those two points in time during",
    "start": "1617859",
    "end": "1624820"
  },
  {
    "text": "the year maybe things looks good but how do I know it's always running and always giving me the security properties that I",
    "start": "1624820",
    "end": "1630369"
  },
  {
    "text": "want well we think that giving you access to the code that we use and",
    "start": "1630369",
    "end": "1636309"
  },
  {
    "text": "having you run your own tests on it is one way to help raise the bar there okay",
    "start": "1636309",
    "end": "1642909"
  },
  {
    "text": "so let me change gears and talk about data at rest security so I'll go through",
    "start": "1642909",
    "end": "1649299"
  },
  {
    "start": "1646000",
    "end": "1646000"
  },
  {
    "text": "this next slide quickly because I've done it almost every year and hopefully people are aware of envelope encryption",
    "start": "1649299",
    "end": "1655809"
  },
  {
    "text": "but we use symmetric key encryption for block data encryption why because it's",
    "start": "1655809",
    "end": "1662070"
  },
  {
    "text": "incredibly fast and it's the most efficient way to do things when you",
    "start": "1662070",
    "end": "1668139"
  },
  {
    "text": "create a ciphertext with a symmetric key you get to put that ciphertext wherever you want if you believe in the security",
    "start": "1668139",
    "end": "1675429"
  },
  {
    "text": "properties of something that has been encrypted correctly with AES especially using 256-bit keys however the plaintext",
    "start": "1675429",
    "end": "1685330"
  },
  {
    "text": "symmetric key is now at risk you can't lose it but you can't store it on disk",
    "start": "1685330",
    "end": "1691629"
  },
  {
    "text": "in plaintext right you can go put it on a USB stick and carry it around in your",
    "start": "1691629",
    "end": "1697509"
  },
  {
    "text": "pocket but you still have some durability concerns not to mention some",
    "start": "1697509",
    "end": "1703539"
  },
  {
    "text": "confidentiality concerns if anybody finds something in your back pocket so what do we do well we take this",
    "start": "1703539",
    "end": "1709059"
  },
  {
    "text": "particular data key and we encrypt it under a key encryption key we use the term master key in this case so",
    "start": "1709059",
    "end": "1716230"
  },
  {
    "text": "now the encrypted symmetric key and the data can live side by side and this actually has some nice durability",
    "start": "1716230",
    "end": "1722350"
  },
  {
    "text": "properties because it's unlikely that you're gonna lose the ciphertext that",
    "start": "1722350",
    "end": "1727450"
  },
  {
    "text": "represents the keys but still have the cipher text of your thing right if they",
    "start": "1727450",
    "end": "1734350"
  },
  {
    "text": "one of them gets lost they're likely both going to get lost",
    "start": "1734350",
    "end": "1739649"
  },
  {
    "text": "however I've used a key to encrypt a data key which was that red key now it",
    "start": "1740460",
    "end": "1747550"
  },
  {
    "text": "becomes its own problem right and so we can keep encrypting all the way up the hierarchy ad infinitum at some point",
    "start": "1747550",
    "end": "1755500"
  },
  {
    "text": "there has to be a plaintext symmetric key that's available to use to then",
    "start": "1755500",
    "end": "1760600"
  },
  {
    "text": "unwind all the way down the key hierarchy all right and the trick is",
    "start": "1760600",
    "end": "1765810"
  },
  {
    "text": "where do you keep those plaintext keys all right and that's one of the reasons",
    "start": "1765810",
    "end": "1771580"
  },
  {
    "text": "we invented the key management service as a place to keep the plaintext keys at",
    "start": "1771580",
    "end": "1777220"
  },
  {
    "text": "the top of the hierarchy and ensure that only authorized users would be allowed",
    "start": "1777220",
    "end": "1782830"
  },
  {
    "text": "to make use of those keys to then decrypt key hierarchies and all the keys down the chain so that's what key",
    "start": "1782830",
    "end": "1791350"
  },
  {
    "text": "management is about that's why it's a particularly challenging problem at scale when you need copies of the",
    "start": "1791350",
    "end": "1798040"
  },
  {
    "text": "plaintext keys to be in lots of different locations so you minimize latency and from your applications so in",
    "start": "1798040",
    "end": "1805180"
  },
  {
    "start": "1803000",
    "end": "1803000"
  },
  {
    "text": "AWS would give you two different options for encrypting your data client-side encryption so your process that",
    "start": "1805180",
    "end": "1813850"
  },
  {
    "text": "generates your data let's say it's an ec2 instance is going to do encryption and then send it off of the instance to",
    "start": "1813850",
    "end": "1821110"
  },
  {
    "text": "some storage service so in this model we",
    "start": "1821110",
    "end": "1826870"
  },
  {
    "text": "supply some helper applications which could make the process of encryption and",
    "start": "1826870",
    "end": "1832240"
  },
  {
    "text": "decryption easier for you note that those helper applications themselves don't give us any particular access to",
    "start": "1832240",
    "end": "1839980"
  },
  {
    "text": "your plaintext keys they're just SDKs you actually have to choose your key provider you may very well have one",
    "start": "1839980",
    "end": "1847300"
  },
  {
    "text": "you like that you've been using that works inside your applications if you don't we give you access to one where",
    "start": "1847300",
    "end": "1854500"
  },
  {
    "text": "you can take advantage of kms you configure a master key provider inside these SDKs and the interface for the",
    "start": "1854500",
    "end": "1863560"
  },
  {
    "text": "developer that's using this is pretty clean the other option is server side",
    "start": "1863560",
    "end": "1869950"
  },
  {
    "text": "encryption this is where you ask the service that receives your data hey please encrypt this before you actually",
    "start": "1869950",
    "end": "1875320"
  },
  {
    "text": "write it to disk and here we are integrating key management service with",
    "start": "1875320",
    "end": "1884100"
  },
  {
    "text": "54 storage services today so all of the primary storage services that you're",
    "start": "1884100",
    "end": "1889210"
  },
  {
    "text": "familiar with all support kms and any new services that get developed that",
    "start": "1889210",
    "end": "1895720"
  },
  {
    "text": "might take your input are going to encrypt that data in fact you heard",
    "start": "1895720",
    "end": "1901090"
  },
  {
    "text": "Steve talk about this earlier this morning 117 Services will do some form",
    "start": "1901090",
    "end": "1906550"
  },
  {
    "text": "of encryption sometimes it's transparent where you don't get to see anything about the keys and sometimes it gives",
    "start": "1906550",
    "end": "1912850"
  },
  {
    "text": "you full control over the keys via kms ok so let me dig a little bit into how",
    "start": "1912850",
    "end": "1921370"
  },
  {
    "start": "1918000",
    "end": "1918000"
  },
  {
    "text": "client-side encryption works or what the options are so if you start with data",
    "start": "1921370",
    "end": "1927340"
  },
  {
    "text": "that's inside your data center and the goal is I want to get it to one of the",
    "start": "1927340",
    "end": "1932620"
  },
  {
    "text": "storage services in AWS now if I want to",
    "start": "1932620",
    "end": "1938290"
  },
  {
    "text": "encrypt it I have to have some type of client application that's going to do encryption and I have to have a source",
    "start": "1938290",
    "end": "1943420"
  },
  {
    "text": "of keys you may already have this on Brennus my customers have been doing",
    "start": "1943420",
    "end": "1948820"
  },
  {
    "text": "this ever since AWS began ever since s3 open for business people have been encrypting somehow some",
    "start": "1948820",
    "end": "1955570"
  },
  {
    "text": "way and then sending s3 ciphertext the other option is you might actually have your encryption technology in your key",
    "start": "1955570",
    "end": "1962290"
  },
  {
    "text": "management systems running in ec2 could be using a third party solution a",
    "start": "1962290",
    "end": "1967600"
  },
  {
    "text": "partner solution from companies like for metric which is now tallest security or",
    "start": "1967600",
    "end": "1973650"
  },
  {
    "text": "DeMarko SafeNet there's lots of partners out there with encryption and key management",
    "start": "1973650",
    "end": "1979940"
  },
  {
    "text": "solutions many of which might be similar to what you've been using on-premise ok",
    "start": "1979940",
    "end": "1985430"
  },
  {
    "text": "so at the end of this you get your ciphertext and you give it to the AWS service to store and that service",
    "start": "1985430",
    "end": "1991700"
  },
  {
    "text": "doesn't know anything about how to decrypt it it has to come back through your client application for it to be",
    "start": "1991700",
    "end": "1998210"
  },
  {
    "text": "decrypted so the alternative is that your client application gets keys from",
    "start": "1998210",
    "end": "2005080"
  },
  {
    "text": "an AWS service either through kms using things like our encryption SDK or you",
    "start": "2005080",
    "end": "2012190"
  },
  {
    "text": "can connect to our Cloud HSM service which supports a lot of the classic",
    "start": "2012190",
    "end": "2017200"
  },
  {
    "text": "cryptographic protocols pkcs 11 jce cng",
    "start": "2017200",
    "end": "2023010"
  },
  {
    "text": "the end result is the same the storage service is going to get ciphertext it",
    "start": "2023010",
    "end": "2028060"
  },
  {
    "text": "knows nothing about okay so the SDK the",
    "start": "2028060",
    "end": "2034270"
  },
  {
    "start": "2030000",
    "end": "2030000"
  },
  {
    "text": "goal here is that as a developer I just have to keep track of where my plaintext",
    "start": "2034270",
    "end": "2040330"
  },
  {
    "text": "is and what is the master key provider in many cases what we see customers doing is they will take the SDK they",
    "start": "2040330",
    "end": "2047020"
  },
  {
    "text": "will configure it with a master key provider that either works with their internal kia kms or something like AWS",
    "start": "2047020",
    "end": "2055330"
  },
  {
    "text": "kms or cloudy HSM and say here developers here is the package you should be using and there is exactly one",
    "start": "2055330",
    "end": "2061570"
  },
  {
    "text": "method it's called encrypt and outcomes ciphertext developers don't have to",
    "start": "2061570",
    "end": "2067628"
  },
  {
    "text": "think about which mode of AES what length of key what how long does the IV",
    "start": "2067629",
    "end": "2073480"
  },
  {
    "text": "need to be again oh yeah and where's my entropy sort like those are questions that if you force a developer to try and",
    "start": "2073480",
    "end": "2079210"
  },
  {
    "text": "answer more likely than not they're going to make the wrong choice simply out of ignorance so easy to use some",
    "start": "2079210",
    "end": "2090100"
  },
  {
    "text": "interesting use cases in fact we've had some presentations earlier today for my team about how to be able to use this",
    "start": "2090100",
    "end": "2097840"
  },
  {
    "text": "SDK to in data at the time of right using keys",
    "start": "2097840",
    "end": "2103450"
  },
  {
    "text": "from different regions so if you have a dr story where you want to replicate encrypted data between regions and make",
    "start": "2103450",
    "end": "2110200"
  },
  {
    "text": "sure it's always readable in the destination region you can do that with",
    "start": "2110200",
    "end": "2116590"
  },
  {
    "text": "the encryption SDK at time of right to make sure that something is encrypted with multiple keys from multiple regions",
    "start": "2116590",
    "end": "2122640"
  },
  {
    "text": "another nice feature of the SDK is that we give you some mechanisms to cache or",
    "start": "2122640",
    "end": "2127900"
  },
  {
    "text": "reuse data keys so if you're doing some type of streaming or very high",
    "start": "2127900",
    "end": "2133840"
  },
  {
    "text": "throughput high request rate applications where each individual file",
    "start": "2133840",
    "end": "2141780"
  },
  {
    "text": "in the classic sense you might say well I want every single object to have its",
    "start": "2141780",
    "end": "2147099"
  },
  {
    "text": "own 256 bit key therefore I'm gonna minimize blast radius in case one of those data Keys happens to go walking",
    "start": "2147099",
    "end": "2154320"
  },
  {
    "text": "well if all of the data that you're encrypting is a part of a single data classification maybe westcoast customers",
    "start": "2154320",
    "end": "2162280"
  },
  {
    "text": "or PII or whatever the data classification is from a security",
    "start": "2162280",
    "end": "2167500"
  },
  {
    "text": "standpoint it's actually okay to reuse a data key several times in fact AES in",
    "start": "2167500",
    "end": "2173820"
  },
  {
    "text": "Galois counter mode can be used up to two to the 32 times before you end up in",
    "start": "2173820",
    "end": "2181089"
  },
  {
    "text": "a state where you have a probability risk of collisions in terms of IVs",
    "start": "2181089",
    "end": "2187180"
  },
  {
    "text": "and/or cipher texts so how do you do that how do you manage the reuse of keys well I've got to make some decisions",
    "start": "2187180",
    "end": "2193960"
  },
  {
    "text": "based on time based on the number of operations based on the number of bytes that you encrypt and the encryption SDK",
    "start": "2193960",
    "end": "2200740"
  },
  {
    "text": "gives you those choices encryption has 2k available in C Java Python and of",
    "start": "2200740",
    "end": "2207940"
  },
  {
    "text": "course the AWS CLI so we recommend that you take a look at this so that if you",
    "start": "2207940",
    "end": "2214839"
  },
  {
    "text": "have to build secure applications and you are trying to help your development team they should be pretty excited about",
    "start": "2214839",
    "end": "2222820"
  },
  {
    "text": "this feedback over the past couple years has been hey this is interesting and can",
    "start": "2222820",
    "end": "2228910"
  },
  {
    "text": "be used whether or not you're using an 8 yes cryptographic service okay now let's",
    "start": "2228910",
    "end": "2235740"
  },
  {
    "start": "2233000",
    "end": "2233000"
  },
  {
    "text": "talk about server-side encryption so the model here is classic envelope encryption if you look at the bottom",
    "start": "2235740",
    "end": "2242010"
  },
  {
    "text": "there on the right a given service like an s3 or an RDS or an EBS is going to",
    "start": "2242010",
    "end": "2247950"
  },
  {
    "text": "get a unique data key for a given object or a given resource that data key isn't",
    "start": "2247950",
    "end": "2253260"
  },
  {
    "text": "encrypted under a customer master key or a cmk inside kms when you instruct EBS",
    "start": "2253260",
    "end": "2260220"
  },
  {
    "text": "to create an encrypted volume you pass in the kms cmk ID inside the create",
    "start": "2260220",
    "end": "2268410"
  },
  {
    "text": "volume API call okay and we do this envelope encryption because we think",
    "start": "2268410",
    "end": "2274740"
  },
  {
    "text": "that it's easier for you to manage a relatively small number of CM KS that map to various data classifications as",
    "start": "2274740",
    "end": "2281520"
  },
  {
    "text": "opposed to getting a referrer ID for every single one of the data keys that",
    "start": "2281520",
    "end": "2287579"
  },
  {
    "text": "might be used for billions of objects inside s3 buckets right are tens of thousands of ec2 instances so now on the",
    "start": "2287579",
    "end": "2298380"
  },
  {
    "start": "2296000",
    "end": "2296000"
  },
  {
    "text": "KMS side let me dig in a little bit here because if you're thinking about well how do I prevent unauthorized access to",
    "start": "2298380",
    "end": "2305010"
  },
  {
    "text": "my data if that's cmk that master key is actually protecting again billions of",
    "start": "2305010",
    "end": "2312000"
  },
  {
    "text": "data keys for s3 then maybe I'm better off attacking kms as opposed to going to",
    "start": "2312000",
    "end": "2318750"
  },
  {
    "text": "dig around inside s3 just to find different data keys for every single object so let's talk about how the",
    "start": "2318750",
    "end": "2328279"
  },
  {
    "text": "protocol if you will works when services or your own clients call kms so if we",
    "start": "2328279",
    "end": "2334859"
  },
  {
    "text": "start with data that needs to be encrypted you've got some client application whether you're using our",
    "start": "2334859",
    "end": "2340859"
  },
  {
    "text": "encryption SDK or not or an AWS service that's acting as a client to call kms so",
    "start": "2340859",
    "end": "2347039"
  },
  {
    "text": "we have an API endpoint it's like every other service connect over HTTP as it",
    "start": "2347039",
    "end": "2354180"
  },
  {
    "text": "turns out the TLS cipher suites that we support we mandate that you use ones",
    "start": "2354180",
    "end": "2360270"
  },
  {
    "text": "that support forward secrecy so things like elliptic curve diffie-hellman ephemeral because this is",
    "start": "2360270",
    "end": "2368140"
  },
  {
    "text": "a best practice we don't want people capturing your sessions to a kms API",
    "start": "2368140",
    "end": "2374680"
  },
  {
    "text": "endpoint storing them and then coming back down the road when they somehow",
    "start": "2374680",
    "end": "2380020"
  },
  {
    "text": "have an ability to crack keys and being able to replay those sessions so the API",
    "start": "2380020",
    "end": "2386530"
  },
  {
    "text": "endpoint terminates TLS also does the authentication and authorization says is",
    "start": "2386530",
    "end": "2391990"
  },
  {
    "text": "this principle that's inside the API signature allowed to do the thing inside",
    "start": "2391990",
    "end": "2398710"
  },
  {
    "text": "kms whether it's getting a new data key decrypting modifying the state on an",
    "start": "2398710",
    "end": "2405070"
  },
  {
    "text": "existing cmk any of the 44 or 45 kms API is always get authenticated and",
    "start": "2405070",
    "end": "2411760"
  },
  {
    "text": "authorized and then of course if it's a whether it's an access denied or an",
    "start": "2411760",
    "end": "2417820"
  },
  {
    "text": "actual successful API call there's going to be a log that's written the cloud trail and this is true for every single",
    "start": "2417820",
    "end": "2423040"
  },
  {
    "text": "API call so if you are authorized and",
    "start": "2423040",
    "end": "2428130"
  },
  {
    "text": "you need some cryptographic operation done let's say it's a decrypt then your",
    "start": "2428130",
    "end": "2434410"
  },
  {
    "text": "payload which at this point is a piece of ciphertext it's passed back to the",
    "start": "2434410",
    "end": "2440550"
  },
  {
    "text": "kms HSMs so this is a fleet of stateless HSMs",
    "start": "2440550",
    "end": "2445720"
  },
  {
    "text": "and their job is to simply take a bunch of cipher texts that we give it and use",
    "start": "2445720",
    "end": "2452530"
  },
  {
    "text": "the keys the plaintext keys that it has in memory to start unwrapping things",
    "start": "2452530",
    "end": "2458220"
  },
  {
    "text": "down through the hierarchy until it gets to the thing that you want decrypted and",
    "start": "2458220",
    "end": "2464190"
  },
  {
    "text": "then it connects back to our API endpoint which then returns a decrypted",
    "start": "2464190",
    "end": "2471250"
  },
  {
    "text": "thing to you that decrypted thing could be a data key as it turns out if you're",
    "start": "2471250",
    "end": "2476380"
  },
  {
    "text": "doing your client-side encryption or it could be an actual small piece of data anything up to 4k okay so all the",
    "start": "2476380",
    "end": "2484390"
  },
  {
    "text": "cryptography happens inside these HSMs now we can generate those master keys",
    "start": "2484390",
    "end": "2491980"
  },
  {
    "text": "for you or you can import those keys from your existing on-premises systems right one",
    "start": "2491980",
    "end": "2499550"
  },
  {
    "text": "of the things about when we generate the key we make sure that we keep tons and tons of copies of that key in encrypted",
    "start": "2499550",
    "end": "2506030"
  },
  {
    "text": "form in multiple locations independent storage services those keys are the most",
    "start": "2506030",
    "end": "2512960"
  },
  {
    "text": "durable objects that AWS manages for customers but you might say mm that's",
    "start": "2512960",
    "end": "2519380"
  },
  {
    "text": "nice but losing a master key is pretty catastrophic so I want a copy well if you generate your own key you can",
    "start": "2519380",
    "end": "2525829"
  },
  {
    "text": "actually import it into kms and you're gonna transport it by encrypting it you're not going to rely solely on TLS",
    "start": "2525829",
    "end": "2533300"
  },
  {
    "text": "and once that key is inside the service it can now be used just like any other cmk even if we generated ourselves last",
    "start": "2533300",
    "end": "2542119"
  },
  {
    "text": "year at reinvent we introduced a feature called custom key store where the",
    "start": "2542119",
    "end": "2548260"
  },
  {
    "text": "cryptographic operations actually happen in cloud HSMs so if you have a cloudy HSM cluster then",
    "start": "2548260",
    "end": "2557420"
  },
  {
    "text": "all of the key generation encrypt and decrypt operations will happen inside those devices so if your regulations or",
    "start": "2557420",
    "end": "2566270"
  },
  {
    "text": "your IT security team says we want hsn's we have more direct control over we want",
    "start": "2566270",
    "end": "2571760"
  },
  {
    "text": "to be able to act as the crypto officer we want to be able to create a session",
    "start": "2571760",
    "end": "2577819"
  },
  {
    "text": "directly with these devices and do some type of signature verification on the",
    "start": "2577819",
    "end": "2583250"
  },
  {
    "text": "identity of these devices all right a lot more operational requirements for Cloud HSM but may very well fit your",
    "start": "2583250",
    "end": "2591410"
  },
  {
    "text": "needs we invite you to do that but still use the kms API set as the front door",
    "start": "2591410",
    "end": "2597579"
  },
  {
    "text": "all right as well as the ability for kms to integrate with those 54 services so",
    "start": "2597579",
    "end": "2603710"
  },
  {
    "text": "yeah the crypto is happening inside your custom key store but the interface to it",
    "start": "2603710",
    "end": "2610220"
  },
  {
    "text": "is very AWS like okay so now let's drill",
    "start": "2610220",
    "end": "2617839"
  },
  {
    "start": "2614000",
    "end": "2614000"
  },
  {
    "text": "a little deeper in the case where we are generating the master keys for you even",
    "start": "2617839",
    "end": "2624140"
  },
  {
    "text": "the data Keys the key hierarchy basically looks like this data keys",
    "start": "2624140",
    "end": "2629420"
  },
  {
    "text": "you can call the generate data key API we will return to you 256 bit data key",
    "start": "2629420",
    "end": "2634460"
  },
  {
    "text": "as well as an encrypted copy that's encrypted under the master key that you designate then there's a cm K and the",
    "start": "2634460",
    "end": "2643220"
  },
  {
    "text": "customer managed key excuse me the customer master key it's the master key",
    "start": "2643220",
    "end": "2649400"
  },
  {
    "text": "that encrypts data keys that key is always 256 bits any operations performed",
    "start": "2649400",
    "end": "2655190"
  },
  {
    "text": "under that key are always AES GCM and any time the key material is in",
    "start": "2655190",
    "end": "2661940"
  },
  {
    "text": "plaintext it's only in the memory of one of our HSMs it's only place it can exist",
    "start": "2661940",
    "end": "2667370"
  },
  {
    "text": "how do we ensure that because CM k's are encrypted by keys higher and higher are",
    "start": "2667370",
    "end": "2675140"
  },
  {
    "text": "key and those keys are actually generated inside the hsn's at time of provision and only ever exist in memory",
    "start": "2675140",
    "end": "2682990"
  },
  {
    "text": "so you can see we can give you durability on c MKS and services that",
    "start": "2682990",
    "end": "2689780"
  },
  {
    "text": "use data keys to protect your data will give you durability on data keys but the keys at the very top of the hierarchy",
    "start": "2689780",
    "end": "2695600"
  },
  {
    "text": "it's one per HSM and if that HSM dies that key is gone which is why we have",
    "start": "2695600",
    "end": "2702200"
  },
  {
    "text": "lots and lots and lots of them so we actually don't care which HSM the",
    "start": "2702200",
    "end": "2709430"
  },
  {
    "text": "operation gets sent to because we know we can decrypt it by working down the hierarchy now you might scratch your",
    "start": "2709430",
    "end": "2716570"
  },
  {
    "text": "head and say well wait a second how does that work when you've got thousands of HSMs I invite you to look at the crypto",
    "start": "2716570",
    "end": "2722540"
  },
  {
    "text": "graphic details white paper that we publish to learn a little bit more about this concept of don't HSM domain and how",
    "start": "2722540",
    "end": "2730010"
  },
  {
    "text": "we build a domain trust inside a given AWS region so the cmk is and the keys",
    "start": "2730010",
    "end": "2738650"
  },
  {
    "text": "above them are all stored by kms ok so",
    "start": "2738650",
    "end": "2745220"
  },
  {
    "text": "the access control mechanisms we have on our HSMs and the claims that we make",
    "start": "2745220",
    "end": "2751100"
  },
  {
    "text": "about that that's where you start to convince your crypto team your PKI team",
    "start": "2751100",
    "end": "2756950"
  },
  {
    "text": "your HSM team your regulators that the way we've built kms is sufficient to meet requirements",
    "start": "2756950",
    "end": "2766090"
  },
  {
    "text": "for how you manage master keys okay how can that be true well some useful things",
    "start": "2766090",
    "end": "2776350"
  },
  {
    "start": "2768000",
    "end": "2768000"
  },
  {
    "text": "to know about how we operate the service when we provision an HSM we actually",
    "start": "2776350",
    "end": "2782290"
  },
  {
    "text": "turn off all the interfaces so all this left is an API and then there is no API that says get me a customer's master key",
    "start": "2782290",
    "end": "2789550"
  },
  {
    "text": "or get me one of those root keys that's in plain text in memory there's also no",
    "start": "2789550",
    "end": "2794860"
  },
  {
    "text": "way to push software to the device once it's provisioned so we have an understanding of the state of the",
    "start": "2794860",
    "end": "2801940"
  },
  {
    "text": "software and the firmware and one of the things that we've done with our Phipps validation is that we actually have",
    "start": "2801940",
    "end": "2807280"
  },
  {
    "text": "version numbers for these hsn's and you can look at the security policy on the NIST website and know that version 1.4",
    "start": "2807280",
    "end": "2814570"
  },
  {
    "text": "dot 3 or 1 dot 4 dot 4 is running in a given region and it doesn't change",
    "start": "2814570",
    "end": "2820710"
  },
  {
    "text": "because when they're operational they can't be changed ok well what if we want",
    "start": "2820710",
    "end": "2828940"
  },
  {
    "text": "to upgrade the firmware right or if there's some kind of emergent bug that we need to fix on your behalf first we",
    "start": "2828940",
    "end": "2836530"
  },
  {
    "text": "have to shut down the device we wipe all the memory so there are no keys left on it and then a different API opens up and",
    "start": "2836530",
    "end": "2845050"
  },
  {
    "text": "we're able to push new firmware or software to the device however the life cycle of that code is",
    "start": "2845050",
    "end": "2851980"
  },
  {
    "text": "such that it has to be reviewed by multiple employees on the team not the person who wrote the code it has to pass",
    "start": "2851980",
    "end": "2859360"
  },
  {
    "text": "integration tests that ensure that the state change from plaintext keys to",
    "start": "2859360",
    "end": "2866100"
  },
  {
    "text": "encrypted keys is still consistent with the previous version all right so this",
    "start": "2866100",
    "end": "2872440"
  },
  {
    "text": "is part of the formal verification that we've done as a part of the automated reasoning group at AWS and we've put",
    "start": "2872440",
    "end": "2880330"
  },
  {
    "text": "that into our build cycle so that if our developers are trying to innovate quickly in a particular area of code",
    "start": "2880330",
    "end": "2886420"
  },
  {
    "text": "they can't change the fundamental security properties of system the bill just fails right and",
    "start": "2886420",
    "end": "2893990"
  },
  {
    "text": "then they get to go back to the drawing board to figure out how am I gonna do this innovation but still pass this",
    "start": "2893990",
    "end": "2899780"
  },
  {
    "text": "particular integration test and finally once we have a an image that we believe",
    "start": "2899780",
    "end": "2905090"
  },
  {
    "text": "has whatever new functionality we want or bug fixes and maintains the security properties those images can only be",
    "start": "2905090",
    "end": "2912730"
  },
  {
    "text": "deployed in two prod if two authorized",
    "start": "2912730",
    "end": "2918410"
  },
  {
    "text": "engineers perform a digital signature and push it through to prod okay so what",
    "start": "2918410",
    "end": "2924470"
  },
  {
    "text": "we're trying to do is minimize the risk that one engineer who has access either",
    "start": "2924470",
    "end": "2929660"
  },
  {
    "text": "to a source code the deployment pipeline to the prod network can one engineer do",
    "start": "2929660",
    "end": "2935330"
  },
  {
    "text": "something to change the security properties of the service we assert that the answer is no it would take multiple",
    "start": "2935330",
    "end": "2942320"
  },
  {
    "text": "failures multiple coordinated failures across multiple people to change the",
    "start": "2942320",
    "end": "2947690"
  },
  {
    "text": "security properties of the service okay that's why we put a control inside our",
    "start": "2947690",
    "end": "2953000"
  },
  {
    "text": "soccer port that says that no single employee can gain access to the key",
    "start": "2953000",
    "end": "2959300"
  },
  {
    "text": "material now there's a lot of tests that happen as a part of our sock audit",
    "start": "2959300",
    "end": "2965200"
  },
  {
    "text": "they're looking at four or five different ways in which people might access the build system the prod network",
    "start": "2965200",
    "end": "2972500"
  },
  {
    "text": "so on and so forth but this is the language of our sock control and I want you guys to be thinking about the sock",
    "start": "2972500",
    "end": "2979460"
  },
  {
    "text": "as a way for you to get some of the verification and attestation and the",
    "start": "2979460",
    "end": "2986390"
  },
  {
    "text": "language that you need to convince your customers regulator so on and so forth that AWS is doing what it claims to be",
    "start": "2986390",
    "end": "2993020"
  },
  {
    "text": "doing all the time we get to invent claims in the sock and then have",
    "start": "2993020",
    "end": "2999380"
  },
  {
    "text": "third-party auditors hold us accountable we'd love to hear some more claims that",
    "start": "2999380",
    "end": "3005800"
  },
  {
    "text": "would help you trust AWS or some of your more sensitive workloads okay so now",
    "start": "3005800",
    "end": "3013119"
  },
  {
    "start": "3010000",
    "end": "3010000"
  },
  {
    "text": "let's pop out again into the gory details let's talk about what you get to control with regards to the use of",
    "start": "3013119",
    "end": "3019060"
  },
  {
    "text": "encryption keys well you get to control a thing called a key",
    "start": "3019060",
    "end": "3024340"
  },
  {
    "text": "policy which in a general term is a resource policy kind of like an s3 bucket policy or a sqs new policy right",
    "start": "3024340",
    "end": "3033100"
  },
  {
    "text": "these policies are written in JSON the same way that all policies and permissions and AWS are written and that",
    "start": "3033100",
    "end": "3039910"
  },
  {
    "text": "key policy is the first thing that we look at as a service to determine",
    "start": "3039910",
    "end": "3045520"
  },
  {
    "text": "whether the principle that's trying to make the API request it is allowed to do",
    "start": "3045520",
    "end": "3051250"
  },
  {
    "text": "the thing they want to do okay so these are examples of controlling different",
    "start": "3051250",
    "end": "3056740"
  },
  {
    "text": "API actions encrypt and decrypt are the interesting ones but also things like",
    "start": "3056740",
    "end": "3062110"
  },
  {
    "text": "creating keys disabling keys keys for deletion very powerful api's that you",
    "start": "3062110",
    "end": "3067960"
  },
  {
    "text": "want to make sure you've got only the right sets of people able to perform those actions and all of this is fully",
    "start": "3067960",
    "end": "3074590"
  },
  {
    "text": "integrated with the IAM policy language and systems that you're used to using across the rest of AWS so let me talk a",
    "start": "3074590",
    "end": "3084280"
  },
  {
    "start": "3082000",
    "end": "3082000"
  },
  {
    "text": "little bit about how a target service would then use data keys so we explained",
    "start": "3084280",
    "end": "3090610"
  },
  {
    "text": "how envelope encryption works and hopefully you understand that the master keys are strongly protected and you have",
    "start": "3090610",
    "end": "3098440"
  },
  {
    "text": "some sense of yeah there's not going to be an authorized access to plaintext master keys because of the way it's",
    "start": "3098440",
    "end": "3103840"
  },
  {
    "text": "built and the song controls that it has a FIPS validations so on and so forth",
    "start": "3103840",
    "end": "3109420"
  },
  {
    "text": "but when a data key goes to let's say the ec2 server to encrypt all of your",
    "start": "3109420",
    "end": "3114970"
  },
  {
    "text": "traffic from your instance down to your EBS volume what about that system right what do I know about that and the",
    "start": "3114970",
    "end": "3122440"
  },
  {
    "text": "security of those keys so there's two general models for how AWS services use",
    "start": "3122440",
    "end": "3127960"
  },
  {
    "text": "data keys the first one we've just called the ec2 EBS model because it was",
    "start": "3127960",
    "end": "3134140"
  },
  {
    "text": "the first one there's probably a better name for it but the idea here is that every resource",
    "start": "3134140",
    "end": "3139300"
  },
  {
    "text": "that is created gets its own data key but that data key has to be provisioned in memory for the life of that resource",
    "start": "3139300",
    "end": "3146820"
  },
  {
    "text": "so if you think about ec2 instances or RDS databases or redshift clusters",
    "start": "3146820",
    "end": "3154880"
  },
  {
    "text": "there's a lifecycle where you say create this thing make it available to me and",
    "start": "3154880",
    "end": "3159920"
  },
  {
    "text": "at some point you're then gonna say okay stop this thing or terminate this thing so those verbs should be familiar to you",
    "start": "3159920",
    "end": "3166670"
  },
  {
    "text": "if you use ec2 api's so as long as an ec2 instances up and available it has to",
    "start": "3166670",
    "end": "3173330"
  },
  {
    "text": "be able to accept any IO that you give it and write that data to disk and if",
    "start": "3173330",
    "end": "3180290"
  },
  {
    "text": "you're using a system that expects five six ten thousand provisioned AI ops you",
    "start": "3180290",
    "end": "3186470"
  },
  {
    "text": "know that you're not gonna make a network call back and forth to kms for every single one of those reads and writes so a data key has got to persist",
    "start": "3186470",
    "end": "3194150"
  },
  {
    "text": "somewhere in the chain from your instance down to the EBS volume the",
    "start": "3194150",
    "end": "3200360"
  },
  {
    "text": "other model we've called the s3 model which is okay we need a data key but",
    "start": "3200360",
    "end": "3206840"
  },
  {
    "text": "only for a short period of time we just need to encrypt something and then that thing is going to get moved on to another system",
    "start": "3206840",
    "end": "3212630"
  },
  {
    "text": "so think about s3 when you make a put request via the API it is going to",
    "start": "3212630",
    "end": "3218960"
  },
  {
    "text": "encrypt your data inside the web server and then it's gonna send it back into",
    "start": "3218960",
    "end": "3224840"
  },
  {
    "text": "its own storage node and shard it up into at least three different parts and do all the wonderful things s3 does to",
    "start": "3224840",
    "end": "3231860"
  },
  {
    "text": "give you 11 nines of durability so there your data key only exists in memory for",
    "start": "3231860",
    "end": "3237740"
  },
  {
    "text": "very small periods of time okay so let's dig a little bit deeper on EBS",
    "start": "3237740",
    "end": "3243890"
  },
  {
    "start": "3241000",
    "end": "3241000"
  },
  {
    "text": "encryption and understand all right how do we know these data keys are safe and how do we know that unauthorized",
    "start": "3243890",
    "end": "3249890"
  },
  {
    "text": "users aren't gonna steal data keys that they could use then decrypt my RDS",
    "start": "3249890",
    "end": "3255640"
  },
  {
    "text": "databases or my sensitive a mis so Alice",
    "start": "3255640",
    "end": "3260900"
  },
  {
    "text": "wants to create an EBS volume in which she's going to put data or maybe this is a part of an ami that she's creating",
    "start": "3260900",
    "end": "3268150"
  },
  {
    "text": "first thing that happens during that create volume calls she passes the ID of",
    "start": "3268150",
    "end": "3274250"
  },
  {
    "text": "a kms cmk EBS will call kms and say hi",
    "start": "3274250",
    "end": "3279560"
  },
  {
    "text": "I'm calling on behalf of Alice and I actually am making this rather long API",
    "start": "3279560",
    "end": "3285020"
  },
  {
    "text": "call generate data key without plain text can explain why it's without plain text in a",
    "start": "3285020",
    "end": "3291960"
  },
  {
    "text": "second so what happens is kms says okay is Alice allowed to make this call we're",
    "start": "3291960",
    "end": "3298950"
  },
  {
    "text": "gonna check the key policy of the key that she wants to use the the master key and we're gonna go to the IM system and",
    "start": "3298950",
    "end": "3305400"
  },
  {
    "text": "find out if there's any other policies and determine whether alice is authorized to make this call if so we're",
    "start": "3305400",
    "end": "3311280"
  },
  {
    "text": "gonna deliver an encrypted data key so it's a unique data key and it will be assigned to that EBS volume but the data",
    "start": "3311280",
    "end": "3318060"
  },
  {
    "text": "key is not in plain text there's no data written on the volume things are in",
    "start": "3318060",
    "end": "3323369"
  },
  {
    "text": "waiting at some point in the future it could be seconds but it also could be",
    "start": "3323369",
    "end": "3328619"
  },
  {
    "text": "months Alice will say okay I want to attach this volume to an instance and start writing data to it so at this",
    "start": "3328619",
    "end": "3336630"
  },
  {
    "start": "3331000",
    "end": "3331000"
  },
  {
    "text": "point there has to be some plain text key that's provisioned so that all",
    "start": "3336630",
    "end": "3342630"
  },
  {
    "text": "rights can be encrypted to the volume and all reen's can be decrypted so what happens here now ec2 will make a call to",
    "start": "3342630",
    "end": "3352140"
  },
  {
    "text": "kms and say hi it's Alice again I have this encrypted data key and I need to be",
    "start": "3352140",
    "end": "3359520"
  },
  {
    "text": "able to decrypt it so does Alice have permission to call the decrypt API for",
    "start": "3359520",
    "end": "3365820"
  },
  {
    "text": "kms because I need to get that plain text data key out of the cipher text that you created for her some period of",
    "start": "3365820",
    "end": "3373619"
  },
  {
    "text": "time ago if so one of the things that happens in the new instances so the kind",
    "start": "3373619",
    "end": "3381510"
  },
  {
    "text": "of the c-5 family and above that uses the Nitro architecture kms actually",
    "start": "3381510",
    "end": "3387180"
  },
  {
    "text": "doesn't decrypt this data key and send back plaintext instead it actually lis",
    "start": "3387180",
    "end": "3393600"
  },
  {
    "text": "encrypt that data key under a public key that the ec2 instance provides to kms",
    "start": "3393600",
    "end": "3402980"
  },
  {
    "text": "okay and this is a little complex but the idea here is that it says okay kms",
    "start": "3402980",
    "end": "3408510"
  },
  {
    "text": "inside there HSMs decrypt the data key so you get a plain text data key but",
    "start": "3408510",
    "end": "3414240"
  },
  {
    "text": "Rhian crypt it with this public RSA key that I've given you so that again",
    "start": "3414240",
    "end": "3420020"
  },
  {
    "text": "ciphertext is being pushed from the kms service all the way down to the ec2 instance you're not relying on TLS for",
    "start": "3420020",
    "end": "3427470"
  },
  {
    "text": "all of your confidentiality and integrity and you don't have to worry about all of the hops and all the",
    "start": "3427470",
    "end": "3433080"
  },
  {
    "text": "switches that might be between the kms service and the ec2 system so now the",
    "start": "3433080",
    "end": "3438510"
  },
  {
    "text": "question is well how does easy to decrypt this thing well they've got the matching private key because these are",
    "start": "3438510",
    "end": "3444180"
  },
  {
    "text": "uniquely generated as a part of you spinning up every instance so now it",
    "start": "3444180",
    "end": "3449400"
  },
  {
    "text": "provisions the plain text data key inside the Nitro card and uses that to",
    "start": "3449400",
    "end": "3454980"
  },
  {
    "text": "encrypt and decrypt all i/o okay so where does it store that key and where",
    "start": "3454980",
    "end": "3461430"
  },
  {
    "start": "3457000",
    "end": "3457000"
  },
  {
    "text": "was that private key that we talked about well that's inside the Nitro security",
    "start": "3461430",
    "end": "3466830"
  },
  {
    "text": "chip so if you haven't heard a detailed description of the nitro architecture",
    "start": "3466830",
    "end": "3473160"
  },
  {
    "text": "and how we've built it so that there is no way for humans to access data inside",
    "start": "3473160",
    "end": "3478830"
  },
  {
    "text": "the nitro infrastructure I recommend you chase that down it's very interesting",
    "start": "3478830",
    "end": "3484130"
  },
  {
    "text": "the idea again these nitro cards are kind of like little mini key generation",
    "start": "3484130",
    "end": "3491400"
  },
  {
    "text": "systems they will generate private and public key pairs for themselves that are",
    "start": "3491400",
    "end": "3496590"
  },
  {
    "text": "unique to the identity of an instance and we'll use those to be able to encrypt and decrypt data as a way to",
    "start": "3496590",
    "end": "3502410"
  },
  {
    "text": "pass it back and forth and that's how they get the kms data key so we've gone",
    "start": "3502410",
    "end": "3511260"
  },
  {
    "start": "3508000",
    "end": "3508000"
  },
  {
    "text": "deep we've come up again we haven't talked much about the compliance officer how do we make that person happy well",
    "start": "3511260",
    "end": "3517890"
  },
  {
    "text": "every single call to kms whether it was a part of that EBS encryption dance or a part of s3 or your own client doing",
    "start": "3517890",
    "end": "3525210"
  },
  {
    "text": "things it's going to show up inside cloud trail so here's an example of what might appear as a part of Alice trying",
    "start": "3525210",
    "end": "3532230"
  },
  {
    "text": "to get that ec2 instance launched and an EBS volume attached to it evidence of a",
    "start": "3532230",
    "end": "3537690"
  },
  {
    "text": "decrypt at a particular time under the unique ID for the customer master key",
    "start": "3537690",
    "end": "3544100"
  },
  {
    "text": "and you'll notice this encryption context which is the idea the volume",
    "start": "3544100",
    "end": "3551099"
  },
  {
    "text": "that she created in the first step every villain gets its own unique ID that information is passed into the kms calls",
    "start": "3551099",
    "end": "3559140"
  },
  {
    "text": "so that when you look at the kms logs and cloud trail you can say oh yeah that's right at that time we did ask",
    "start": "3559140",
    "end": "3566279"
  },
  {
    "text": "that a volume get created and get attached right the call came from",
    "start": "3566279",
    "end": "3571529"
  },
  {
    "text": "particular IP address and here's the identity in this case user 1 2 3 would",
    "start": "3571529",
    "end": "3577469"
  },
  {
    "text": "map to Alice so you can complete the circle and we have customers that will do analysis on cloud trail events and",
    "start": "3577469",
    "end": "3585599"
  },
  {
    "text": "look for anomalous decrypt calls or if it's a decrypt call let me look at the",
    "start": "3585599",
    "end": "3590729"
  },
  {
    "text": "encryption context is this a resource I own as as a resource in my account did I actually want this resource decrypted at",
    "start": "3590729",
    "end": "3597329"
  },
  {
    "text": "this time ok so again there's a lot of",
    "start": "3597329",
    "end": "3604819"
  },
  {
    "text": "maybe slightly more than hand-waving but you got to believe some of the things that I told you about how things",
    "start": "3604819",
    "end": "3610589"
  },
  {
    "text": "work because you can't see it for yourself so we look for third-party compliance",
    "start": "3610589",
    "end": "3617940"
  },
  {
    "text": "schemes like FIPS 140-2 to prove that the cryptographic modules inside our HSMs are operating correctly and we",
    "start": "3617940",
    "end": "3625949"
  },
  {
    "text": "don't have ways for keys to go walking off of these boxes we also rely on the",
    "start": "3625949",
    "end": "3631940"
  },
  {
    "text": "sock 1 2 & 3 as a summary report where",
    "start": "3631940",
    "end": "3637140"
  },
  {
    "text": "we invent our own controls to try and give you insight into how we operate some of our secure services and the",
    "start": "3637140",
    "end": "3644759"
  },
  {
    "text": "security controls are always in place and then of course loads of other",
    "start": "3644759",
    "end": "3649859"
  },
  {
    "text": "compliance schemes many of which are unique to different geographic regions that speak to the general operation of a",
    "start": "3649859",
    "end": "3656999"
  },
  {
    "text": "service just like any other AWS service so for those of you who have to deal",
    "start": "3656999",
    "end": "3663660"
  },
  {
    "text": "with compliance auditors you know it can be painful sometimes you have to change your application design and change",
    "start": "3663660",
    "end": "3669630"
  },
  {
    "text": "evidence when we built the kms team and some of the other security services we",
    "start": "3669630",
    "end": "3675809"
  },
  {
    "text": "said if there's a compliance scheme out there that talks about data privacy we want in so we have a dedicated team that",
    "start": "3675809",
    "end": "3682229"
  },
  {
    "text": "focuses on evidence and we have our own checks and balances to ensure that we're always",
    "start": "3682229",
    "end": "3688550"
  },
  {
    "text": "meeting all the requirements as a part of these things because we know that since you're never gonna touch the",
    "start": "3688550",
    "end": "3694910"
  },
  {
    "text": "hardware of the software you have to rely on some type of third-party testimonial okay so for those of you who",
    "start": "3694910",
    "end": "3702560"
  },
  {
    "text": "have QR readers you can do this now or when this gets posted to YouTube there's",
    "start": "3702560",
    "end": "3707720"
  },
  {
    "text": "some other resources that I think are useful I mentioned the crypto graphic details white paper so this is",
    "start": "3707720",
    "end": "3713540"
  },
  {
    "text": "approximately if what's it up to about 40 50 pages that goes into detail about how we built these stateless HSMs how we",
    "start": "3713540",
    "end": "3720860"
  },
  {
    "text": "can get to a thousand HSMs inside a single region and still ensure that the",
    "start": "3720860",
    "end": "3727400"
  },
  {
    "text": "confidentiality and integrity of your keys is intact we have a best practices",
    "start": "3727400",
    "end": "3733250"
  },
  {
    "text": "white paper that focuses more on how do you think about in which accounts to",
    "start": "3733250",
    "end": "3738260"
  },
  {
    "text": "create your keys how do you delegate access across account given that these",
    "start": "3738260",
    "end": "3743930"
  },
  {
    "text": "master encryption keys are pretty sensitive pieces of information we think it's useful to centralize the creation",
    "start": "3743930",
    "end": "3751040"
  },
  {
    "text": "in a single account and then delegate out to other accounts so that the",
    "start": "3751040",
    "end": "3756860"
  },
  {
    "text": "privilege administrators they're the ones that can do things like deletion and disablement and changing policies",
    "start": "3756860",
    "end": "3763750"
  },
  {
    "text": "but all the other users and the other accounts all they can do is make use of those keys with encrypt and decrypt and",
    "start": "3763750",
    "end": "3772130"
  },
  {
    "text": "then of course if you want to get digging deeper on all those compliance reports and understand how kms is in",
    "start": "3772130",
    "end": "3779510"
  },
  {
    "text": "scope read more about the controls we have inside the sock you can go to AWS",
    "start": "3779510",
    "end": "3784550"
  },
  {
    "text": "artifact which is available to every AWS account holder and actually download those reports and I'm super pleased to",
    "start": "3784550",
    "end": "3793670"
  },
  {
    "text": "say that this is actually not an exhaustive list there are more crypto related talks here at reinforce many of",
    "start": "3793670",
    "end": "3801050"
  },
  {
    "text": "which will go in to quite a bit of depth about how you use kms I use Cloud HSM we",
    "start": "3801050",
    "end": "3811250"
  },
  {
    "text": "had a talk from one of our senior principal engineers earlier about network security and what we're doing in",
    "start": "3811250",
    "end": "3816290"
  },
  {
    "text": "the area in crypto across the AWS Network the one at the bottom there which is SCP 304 you can",
    "start": "3816290",
    "end": "3823880"
  },
  {
    "text": "hear about our chief cryptographer talking about what AWS is doing in the area of quantum safe cryptography so",
    "start": "3823880",
    "end": "3831590"
  },
  {
    "text": "preparing for the emergence of quantum computing and the risk that that poses to public key cryptography so whether",
    "start": "3831590",
    "end": "3840380"
  },
  {
    "text": "you have a chance to see those sessions tomorrow or you go back in the youtube",
    "start": "3840380",
    "end": "3845540"
  },
  {
    "text": "catalogue after the show it's worth watching ok that's it for my presentation I will be outside the door",
    "start": "3845540",
    "end": "3852500"
  },
  {
    "text": "there if anybody has any follow-up questions thanks a lot for your attention have a good show [Applause]",
    "start": "3852500",
    "end": "3861479"
  }
]