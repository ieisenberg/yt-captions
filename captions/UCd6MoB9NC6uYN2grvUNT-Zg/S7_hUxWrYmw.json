[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "Ever wonder what's inside the encrypted traffic \nleaving your Virtual Private Cloud? What if you  ",
    "start": "4040",
    "end": "9719"
  },
  {
    "text": "could check without risking Security. Today we're \nexploring TLS inspection with AWS Network Firewall  ",
    "start": "9720",
    "end": "16520"
  },
  {
    "text": "to see what's really in that encrypted traffic. \nStay with us to see how it works. Egress traffic  ",
    "start": "16520",
    "end": "24000"
  },
  {
    "text": "from your Virtual Private Cloud can hold sensitive \ncustomer data. To safeguard this information,  ",
    "start": "24000",
    "end": "29680"
  },
  {
    "text": "many organizations want to inspect outbound \nencrypted traffic for malware, data exfiltration,  ",
    "start": "29680",
    "end": "35640"
  },
  {
    "text": "or compliance violations before it leaves the \nsecure perimeter. With AWS Network Firewall  ",
    "start": "35640",
    "end": "42160"
  },
  {
    "start": "40000",
    "end": "78000"
  },
  {
    "text": "you can now decrypt, inspect, and re-encrypt \nTLS egress traffic exiting your VPCs to the  ",
    "start": "42160",
    "end": "48880"
  },
  {
    "text": "internet. As a managed service, Network Firewall, \nhandles the cryptographic overhead so you can  ",
    "start": "48880",
    "end": "55280"
  },
  {
    "text": "focus on defining inspection policies rather than \nmanaging keys the simplest architecture for egress  ",
    "start": "55280",
    "end": "63199"
  },
  {
    "text": "inspection can be found in the AWS Network \nfirewall developer guide and it's called a  ",
    "start": "63200",
    "end": "68760"
  },
  {
    "text": "simple single zone architecture with an Internet \nGateway. You'll find a link to this architecture  ",
    "start": "68760",
    "end": "75360"
  },
  {
    "text": "down below. Let's have a look at the architecture. \nAs you can see we have a single region with a VPC,  ",
    "start": "75360",
    "end": "83880"
  },
  {
    "start": "78000",
    "end": "175000"
  },
  {
    "text": "one availability zone, and two subnets. A customer \nsubnet, with some EC2 instances in it, and the  ",
    "start": "83880",
    "end": "90119"
  },
  {
    "text": "firewall subnet, with the firewall endpoint in it. \nOkay now this is important to understand. We're  ",
    "start": "90120",
    "end": "96320"
  },
  {
    "text": "going to configure our routing so that when the \nEC2 instances make connections to servers on the  ",
    "start": "96320",
    "end": "102560"
  },
  {
    "text": "internet that traffic will go through the firewall \nendpoint. This is how we get our TLS inspection to  ",
    "start": "102560",
    "end": "108840"
  },
  {
    "text": "happen, we'll get to that in just a bit. Well, \nnext we would add a CA certificate that can sign  ",
    "start": "108840",
    "end": "116320"
  },
  {
    "text": "certificate requests, then create a TLS inspection \nconfiguration to define which TLS traffic to  ",
    "start": "116320",
    "end": "122800"
  },
  {
    "text": "decrypt. Apply this config to a stateful rule \ngroup that authorizes the firewall to intercept  ",
    "start": "122800",
    "end": "129520"
  },
  {
    "text": "TLS handshakes, dynamically generate session \nkeys, and proxy the encrypted connections. Network  ",
    "start": "129520",
    "end": "136720"
  },
  {
    "text": "firewall will establish a connection to the \ndestination server as if it were the client. Then  ",
    "start": "136720",
    "end": "143240"
  },
  {
    "text": "it proxies the connection from the EC2 instances, \nin this case to the internet server now with the  ",
    "start": "143240",
    "end": "150760"
  },
  {
    "text": "ability to examine those outbound packets. You can \nnow configure TLS actions to block non-compliant  ",
    "start": "150760",
    "end": "158120"
  },
  {
    "text": "egress traffic instead of allowing it. Define \ncustom domain lists to limit outbound connections  ",
    "start": "158120",
    "end": "163799"
  },
  {
    "text": "to only approved sites or use pattern sets to \ndetect and filter uploads containing sensitive  ",
    "start": "163800",
    "end": "169680"
  },
  {
    "text": "Financial, Health Care, or proprietary data types. \nThis stuff is cool. With AWS Network Firewall  ",
    "start": "169680",
    "end": "176959"
  },
  {
    "start": "175000",
    "end": "198000"
  },
  {
    "text": "easing the complexity of TLS inspection you can \nnow achieve deep visibility into all encrypted  ",
    "start": "176960",
    "end": "183240"
  },
  {
    "text": "egress traffic without compromising the privacy \nof your customers and partners. This allows you  ",
    "start": "183240",
    "end": "189560"
  },
  {
    "text": "to confidently enable direct internet access from \nworkloads while still maintaining governance and  ",
    "start": "189560",
    "end": "194920"
  },
  {
    "text": "security controls over what leaves your virtual \nperimeter. Oh and Network Firewall integrates with  ",
    "start": "194920",
    "end": "200240"
  },
  {
    "start": "198000",
    "end": "215000"
  },
  {
    "text": "other AWS services like GuardDuty to identify \nsuspicious outbound flows based on thread  ",
    "start": "200240",
    "end": "205400"
  },
  {
    "text": "intelligence. You can also pair egress inspection \nwith AWS Web Application Firewall to scan HTTP  ",
    "start": "205400",
    "end": "213280"
  },
  {
    "text": "body content for vulnerabilities. By combining \nthe scalability and automation of Network  ",
    "start": "213280",
    "end": "218680"
  },
  {
    "start": "215000",
    "end": "240000"
  },
  {
    "text": "Firewall with multiple layers of analytics and \nmalware protection, you can achieve comprehensive  ",
    "start": "218680",
    "end": "224680"
  },
  {
    "text": "secure egress filtering without undermining \nproductivity or agility. This allows your  ",
    "start": "224680",
    "end": "230239"
  },
  {
    "text": "organization to embrace cloud first strategies \nknowing that your encrypted data in transit  ",
    "start": "230240",
    "end": "235080"
  },
  {
    "text": "remains visible and protected at all times. Now \nthat you have a sense for how TLS inspection can  ",
    "start": "235080",
    "end": "242640"
  },
  {
    "start": "240000",
    "end": "248000"
  },
  {
    "text": "benefit your organization. Let's have a look at \nthe feature in action. Let's jump into the lab.  ",
    "start": "242640",
    "end": "248560"
  },
  {
    "start": "248000",
    "end": "369000"
  },
  {
    "text": "First we need to get a certificate generated that \nwe will use with Network Firewall to present to  ",
    "start": "248560",
    "end": "255280"
  },
  {
    "text": "our internal clients when they make TLS requests. \nIn the folder here, I'm going to run the create  ",
    "start": "255280",
    "end": "262720"
  },
  {
    "text": "search script. Now let's switch over to AWS \nCertificate Manager. We'll import a certificate,  ",
    "start": "262720",
    "end": "271600"
  },
  {
    "text": "this is the one we just created. Let's start \nwith the certificate body. From CLI here we  ",
    "start": "271600",
    "end": "278520"
  },
  {
    "text": "can copy that information to the clipboard using \nPB copy, and let's pass that in. Next we need the  ",
    "start": "278520",
    "end": "288199"
  },
  {
    "text": "certificate private key. We can do the same thing. \nWe'll copy that and again paste it in. And finally  ",
    "start": "288200",
    "end": "296680"
  },
  {
    "text": "the certificate chain. Let's copy it and now \npaste it. Click on next. We can add some tags,  ",
    "start": "296680",
    "end": "305680"
  },
  {
    "text": "and finally we review and import. A quick refresh \nand we see that the certificate is imported. Click  ",
    "start": "305680",
    "end": "314800"
  },
  {
    "text": "on the certificate ID to see the details. Now \nlet's jump over to S3. Here I've created a  ",
    "start": "314800",
    "end": "323720"
  },
  {
    "text": "bucket and I have uploaded the CA certificate to \nthis bucket. I'll need to get this certificate on  ",
    "start": "323720",
    "end": "330560"
  },
  {
    "text": "the clients so they will trust the certificate \nthat Network Firewall presents them. Let's SSH  ",
    "start": "330560",
    "end": "337040"
  },
  {
    "text": "into our client. We're going to update our CA \ntrust and then let's import the certificate from  ",
    "start": "337040",
    "end": "344200"
  },
  {
    "text": "S3. Let's do that again with the Sudo command. \nAnd finally let's cat out the file and see that  ",
    "start": "344200",
    "end": "352680"
  },
  {
    "text": "it's been imported. We could do this again, and \npipe to more and there's the certificate right  ",
    "start": "352680",
    "end": "359800"
  },
  {
    "text": "there at the top of the list. Now that I have the \ncertificate my client will trust that certificate  ",
    "start": "359800",
    "end": "366759"
  },
  {
    "text": "when it's presented by Network Firewall. Okay \nour next step is to configure Network Firewall.  ",
    "start": "366760",
    "end": "373760"
  },
  {
    "start": "369000",
    "end": "833000"
  },
  {
    "text": "So let's open our VPC page and scroll down to our \nNetwork Firewall rule groups. Let's have a look at  ",
    "start": "373760",
    "end": "381840"
  },
  {
    "text": "our stateless rule group. This is set to forward \nall traffic. So nothing to see here really, all  ",
    "start": "381840",
    "end": "390560"
  },
  {
    "text": "traffic will just get forwarded to the stateful \nrule group. Over here in the stateful rule group,  ",
    "start": "390560",
    "end": "397000"
  },
  {
    "text": "we can see that we're allowing HTTP traffic. \nWe're going to create our own new stateful  ",
    "start": "397000",
    "end": "402920"
  },
  {
    "text": "rule group that we'll use in our TLS inspection \nconfiguration. So let's click create rule group.  ",
    "start": "402920",
    "end": "409960"
  },
  {
    "text": "Now our format is going to be Suricata compatible \nrule string. We'll leave everything else to the  ",
    "start": "409960",
    "end": "416199"
  },
  {
    "text": "defaults. In the next page we give it a name, and \nwe add in a description. Enter a rule capacity,  ",
    "start": "416200",
    "end": "427200"
  },
  {
    "text": "I don't expect to have a lot of rules in this demo \nso let's just say 10, and click next. Now on this  ",
    "start": "427200",
    "end": "434480"
  },
  {
    "text": "page we can set up rule variables which we're \nnot going to do. We're going to skip past that  ",
    "start": "434480",
    "end": "439880"
  },
  {
    "text": "to the Suricata compatible rule string and we're \ngoing to enter a few rules here. Don't give too  ",
    "start": "439880",
    "end": "445360"
  },
  {
    "text": "much attention to the rules. The general idea for \nthis demo is that I'm going to pass everything of  ",
    "start": "445360",
    "end": "451360"
  },
  {
    "text": "course your rules will vary depending on the needs \nof your organization. All right we click next,  ",
    "start": "451360",
    "end": "458759"
  },
  {
    "text": "and next again. Let's give the configuration \na tag. Click next to review our configuration.  ",
    "start": "458760",
    "end": "470560"
  },
  {
    "text": "Scroll down and click create rule group. All right \nnext let's go to TLS inspection configuration, and  ",
    "start": "470560",
    "end": "481000"
  },
  {
    "text": "we'll click create TLS inspection configuration. \nAnd on this page we can add server certificates  ",
    "start": "481000",
    "end": "488040"
  },
  {
    "text": "for inbound, but we aren't doing that at this \ntime. Instead we need to select a CA certificate  ",
    "start": "488040",
    "end": "496360"
  },
  {
    "text": "from the dropdown, under the heading CA \ncertificate for outbound SSL/TLS inspection dash  ",
    "start": "496360",
    "end": "503319"
  },
  {
    "text": "new. This is the certificate that we imported to \nCertificate Manager earlier in this video. On the  ",
    "start": "503320",
    "end": "510440"
  },
  {
    "text": "next page we give our configuration a name. Let's \ncopy that and make it our description as well.  ",
    "start": "510440",
    "end": "519840"
  },
  {
    "text": "And on the next page we will define the scope. \nThis is defining the traffic that AWS Network  ",
    "start": "519840",
    "end": "527800"
  },
  {
    "text": "Firewall will be inspecting. For this I only want \nmy configuration to inspect traffic on Port 443.  ",
    "start": "527800",
    "end": "535399"
  },
  {
    "text": "Your configuration may vary here, if you want \nto inspect TLS on other ports. Once I enter the  ",
    "start": "535400",
    "end": "541600"
  },
  {
    "text": "custom destination Port, it's important that you \nclick on Add scope configuration. Once we do that  ",
    "start": "541600",
    "end": "548920"
  },
  {
    "text": "we'll see the configuration listed below and it's \nsafe to click next. Now on the advanced settings  ",
    "start": "548920",
    "end": "555639"
  },
  {
    "text": "page we now have an option to check certificate \nrevocation. When you click enable here you can  ",
    "start": "555640",
    "end": "562760"
  },
  {
    "text": "now define actions to take when a certificate has \nbeen revoked, and when the status of a certificate  ",
    "start": "562760",
    "end": "568120"
  },
  {
    "text": "is unknown. Notice the options here are to pass, \ndrop, or reject. Pass is self-explanatory, drop  ",
    "start": "568120",
    "end": "576760"
  },
  {
    "text": "means the connection will be dropped silently, \nwhereas reject sends a TCP reject message or a  ",
    "start": "576760",
    "end": "583760"
  },
  {
    "text": "reset message. Here I set the action to drop \nthe connection if the certificate's revoked,  ",
    "start": "583760",
    "end": "591040"
  },
  {
    "text": "and if the status is unknown let's just pass \nit for now. We can click next, and on the next  ",
    "start": "591040",
    "end": "597759"
  },
  {
    "text": "page we add tags. We click next, review what \nwe've done, and click create TLS inspection  ",
    "start": "597760",
    "end": "607280"
  },
  {
    "text": "configuration. Now we need to create a new policy \nto apply our TLS configuration to. Let's navigate  ",
    "start": "607280",
    "end": "616120"
  },
  {
    "text": "to Firewall policies, and click create Firewall \npolicy. Let's give it a name and a description.  ",
    "start": "616120",
    "end": "624640"
  },
  {
    "text": "We can leave the stream exception policy at the \ndefault value, and and click next. We need to add  ",
    "start": "624640",
    "end": "632440"
  },
  {
    "text": "a stateless rule group we can add the one that we \nalready had created. And remember this is just the  ",
    "start": "632440",
    "end": "640080"
  },
  {
    "text": "one that allows traffic and just forwards it to \nthe stateful rule engine. We can see this is the  ",
    "start": "640080",
    "end": "645360"
  },
  {
    "text": "default action. And now add our stateful rule \ngroup, select the TLS inspection rule group we  ",
    "start": "645360",
    "end": "654519"
  },
  {
    "text": "created together, and click next. On the advanced \nsettings page we click next again. And now we need  ",
    "start": "654520",
    "end": "663080"
  },
  {
    "text": "to add the TLS inspection configuration. We can \nselect it from the drop down. Click next, and add  ",
    "start": "663080",
    "end": "670640"
  },
  {
    "text": "some tags. Now we review and click create firewall \npolicy. Now to bring this all together and apply  ",
    "start": "670640",
    "end": "679280"
  },
  {
    "text": "it, we need to navigate to firewalls. We're going \nto click on our Firewall. We'll scroll down to the  ",
    "start": "679280",
    "end": "685920"
  },
  {
    "text": "Firewall policy and change this demo policy to the \nnew one we created with TLS inspection. Before we  ",
    "start": "685920",
    "end": "694399"
  },
  {
    "text": "make the change, let's go to our test machine and \nopen a browser. I'll navigate to ssl.com and have  ",
    "start": "694400",
    "end": "701760"
  },
  {
    "text": "a look at the certificate. Note the issuer of \nthe certificate is ssl.com. Now let's go back,  ",
    "start": "701760",
    "end": "709960"
  },
  {
    "text": "and change the policy. Click edit, select \nthe new policy from the drop down, and save  ",
    "start": "709960",
    "end": "717880"
  },
  {
    "text": "changes. Let's go back to our test machine. Looks \nlike our browser's closed. Let's open it back up  ",
    "start": "717880",
    "end": "726000"
  },
  {
    "text": "and navigate to ssl.com. Again let's look at the \ncertificate we see it's valid and we also see it's  ",
    "start": "726000",
    "end": "735680"
  },
  {
    "text": "been issued by our custom intermediate CA. This \ntells us that Network Firewall is now inspecting  ",
    "start": "735680",
    "end": "741920"
  },
  {
    "text": "our TLS requests on Port 443 as expected. Now \nwe can also open a terminal. Let's make it a  ",
    "start": "741920",
    "end": "751600"
  },
  {
    "text": "little bigger and use the cURL command to get \nssl.com again. Notice I'm using the switch dash  ",
    "start": "751600",
    "end": "759880"
  },
  {
    "text": "ikv. The \"i\" option instructs the cURL command to \ninclude the HTTP response headers and the output.  ",
    "start": "759880",
    "end": "769200"
  },
  {
    "text": "The \"k\" flag tells it to ignore SSL certificate \nverification, and the \"v\" enables verbose mode.  ",
    "start": "769200",
    "end": "778320"
  },
  {
    "text": "And again again find the issuer and this is the \nsame as what we saw in the browser. Now let's uh  ",
    "start": "778320",
    "end": "787200"
  },
  {
    "text": "cURL a URL that has a revoked certificate. \nNotice that the connection is closed,  ",
    "start": "787200",
    "end": "796320"
  },
  {
    "text": "and this is because we have the action set to \ndrop. And remember this is a silent drop. Let's go  ",
    "start": "796320",
    "end": "802840"
  },
  {
    "text": "back and change the configuration to reject. For \nthis we go to our TLS inspection configuration,  ",
    "start": "802840",
    "end": "811520"
  },
  {
    "text": "go to certificate revocation status and click \nedit, and change the dropped action to reset.  ",
    "start": "811520",
    "end": "820960"
  },
  {
    "text": "Let's save this and go back to our test \nmachine. Right, let's run the command again,  ",
    "start": "820960",
    "end": "829160"
  },
  {
    "text": "and notice the message we now see is that the \nconnection was reset by peer. Pretty cool,  ",
    "start": "829160",
    "end": "835720"
  },
  {
    "start": "833000",
    "end": "886000"
  },
  {
    "text": "right. Well that's a wrap. I hope you enjoyed this \naction-packed demo showing off the incredible TLS  ",
    "start": "835720",
    "end": "843360"
  },
  {
    "text": "inspection powers of AWS Network Firewall. With \njust a few clicks you can gain x-ray vision into  ",
    "start": "843360",
    "end": "850200"
  },
  {
    "text": "your encrypted ESS traffic. How cool is that. \nNow if you want to try this for yourself, be  ",
    "start": "850200",
    "end": "856680"
  },
  {
    "text": "sure to check out the links below for step-by-step \nguides and architecture diagrams. Experiment with  ",
    "start": "856680",
    "end": "863200"
  },
  {
    "text": "different inspection rules and traffic filtering \nscenarios. There are many possibilities to fit the  ",
    "start": "863200",
    "end": "869120"
  },
  {
    "text": "needs of your organization. Make sure to like and \nsubscribe so you don't miss out on more exciting  ",
    "start": "869120",
    "end": "875400"
  },
  {
    "text": "security content, and until next time stay curious \nand keep honing your cloud security skills.",
    "start": "875400",
    "end": "886960"
  }
]