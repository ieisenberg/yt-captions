[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "and again I'd like to welcome you to our AWS webcast today high-availability",
    "start": "1620",
    "end": "7299"
  },
  {
    "text": "was for out 53 DNS failover our presenters today are Sean McLean the product manager with Amazon route 53 and",
    "start": "7299",
    "end": "14680"
  },
  {
    "text": "also Paul Cooney who's the chief Software Architect at InfoSpace Sean I will hand it off to you",
    "start": "14680",
    "end": "20529"
  },
  {
    "text": "Thank You Aurora again this is Sean Ecklie product manager for Amazon's route 53 so today we'll be talking just",
    "start": "20529",
    "end": "27939"
  },
  {
    "start": "24000",
    "end": "24000"
  },
  {
    "text": "very briefly about what route 53 is for those that are new to the service then",
    "start": "27939",
    "end": "33400"
  },
  {
    "text": "we'll walk through what is DNS failover what does it do and a bit about how it",
    "start": "33400",
    "end": "39219"
  },
  {
    "text": "functions then we'll talk about some of the high availability architectures that are enabled by DNS failover we'll talk",
    "start": "39219",
    "end": "47620"
  },
  {
    "text": "about the different types of endpoints first of all what endpoints are and then how you can actually perform DNS",
    "start": "47620",
    "end": "55269"
  },
  {
    "text": "failover for the different types of endpoints of your application we'll talk",
    "start": "55269",
    "end": "60730"
  },
  {
    "text": "about how you can view the health status of your endpoints and then I'll hand it over to Paul journey from InfoSpace",
    "start": "60730",
    "end": "66880"
  },
  {
    "text": "who will walk through an example of how he and his team use DNS failover to",
    "start": "66880",
    "end": "72070"
  },
  {
    "text": "enable multi region application on AWS including DNS failover and then at the",
    "start": "72070",
    "end": "79000"
  },
  {
    "text": "end we'll have some time for questions and answers so first what is route 53",
    "start": "79000",
    "end": "86890"
  },
  {
    "text": "for those new to the service route 53 is AWS as DNS service we consider DNS a",
    "start": "86890",
    "end": "94270"
  },
  {
    "start": "90000",
    "end": "90000"
  },
  {
    "text": "tier 0 service DNS needs to be up and running in order for your application or",
    "start": "94270",
    "end": "100930"
  },
  {
    "text": "your website to be reachable by your end-users so we take availability extremely seriously",
    "start": "100930",
    "end": "106720"
  },
  {
    "text": "we do offer 100% SLA for example for route 53 service is built to be highly",
    "start": "106720",
    "end": "112780"
  },
  {
    "text": "available and scaleable to respond to increases in traffic to your site and we do offer tools enabling you the customer",
    "start": "112780",
    "end": "119980"
  },
  {
    "text": "to provide high performance and highly available architectures on AWS and so",
    "start": "119980",
    "end": "126370"
  },
  {
    "text": "DNS failover as a new feature is one more tool in the bag that allows you to",
    "start": "126370",
    "end": "132849"
  },
  {
    "text": "architect your application be that much more reliable briefly how",
    "start": "132849",
    "end": "140260"
  },
  {
    "text": "DNS works and what it does is it translates domain names into IP addresses which then enable your users",
    "start": "140260",
    "end": "146980"
  },
  {
    "start": "141000",
    "end": "141000"
  },
  {
    "text": "via their web browsers or other clients to access your website or your web",
    "start": "146980",
    "end": "152290"
  },
  {
    "text": "application route 53 returns the authoritative responses to these DNS",
    "start": "152290",
    "end": "158560"
  },
  {
    "text": "queries and by dynamically incorporating",
    "start": "158560",
    "end": "163870"
  },
  {
    "text": "logic to return different IP address answers ruff 53 enables various",
    "start": "163870",
    "end": "169300"
  },
  {
    "text": "architectures which allow you to for example run in multiple locations around the world for higher performance for",
    "start": "169300",
    "end": "175510"
  },
  {
    "text": "your end-users to also have redundant locations and then dynamically respond",
    "start": "175510",
    "end": "182410"
  },
  {
    "text": "to failure events in your application by eventing different IP addresses in response thereby routing your end-users",
    "start": "182410",
    "end": "190830"
  },
  {
    "text": "intelligently to locations where your application is up and running so what",
    "start": "190830",
    "end": "198280"
  },
  {
    "text": "does DNS failover but what does this new feature do well Vienna Phil over really",
    "start": "198280",
    "end": "204280"
  },
  {
    "text": "consists of two components the first is health checks which is route 53",
    "start": "204280",
    "end": "211030"
  },
  {
    "start": "205000",
    "end": "205000"
  },
  {
    "text": "checking your application on a constant basis to verify that each location where",
    "start": "211030",
    "end": "217900"
  },
  {
    "text": "your your application is running is healthy and reachable from the outside",
    "start": "217900",
    "end": "223540"
  },
  {
    "text": "Internet and then failover takes the results of those health checks whether each location of your your website is",
    "start": "223540",
    "end": "231730"
  },
  {
    "text": "healthy or not and intelligently only returning the answers the IP addresses",
    "start": "231730",
    "end": "236739"
  },
  {
    "text": "corresponding to healthy locations of your website thereby rerouting users",
    "start": "236739",
    "end": "242590"
  },
  {
    "text": "away from any location of urine of your website that if either failed or unreachable from the outside Internet so",
    "start": "242590",
    "end": "253510"
  },
  {
    "text": "why are our customers interested in DNS failover well two things one is it",
    "start": "253510",
    "end": "258609"
  },
  {
    "start": "254000",
    "end": "254000"
  },
  {
    "text": "provides a variety of tools that allow you to build more redundant applica",
    "start": "258609",
    "end": "265810"
  },
  {
    "text": "patience and more reliable applications on AWS so that you can configure a variety of backup scenarios from ranging",
    "start": "265810",
    "end": "273790"
  },
  {
    "text": "from very simple very simple backup static page all the way to a fully redundant application stacks from",
    "start": "273790",
    "end": "280360"
  },
  {
    "text": "multiple regions and secondly it enables you to run in multiple regions of AWS in",
    "start": "280360",
    "end": "287230"
  },
  {
    "text": "a way that responds intelligently to a failure of your application in any one",
    "start": "287230",
    "end": "293110"
  },
  {
    "text": "of those regions thereby taking that region out of service for your application and rerouting users to",
    "start": "293110",
    "end": "299430"
  },
  {
    "text": "regions where your application is healthy so throughout this webinar we'll",
    "start": "299430",
    "end": "308740"
  },
  {
    "start": "308000",
    "end": "308000"
  },
  {
    "text": "be using a couple of terms that I think it will be helpful to define upfront so first an endpoint is an internet",
    "start": "308740",
    "end": "316840"
  },
  {
    "text": "location belonging to you basically which you can define one of two ways either by giving us an IP address and",
    "start": "316840",
    "end": "324100"
  },
  {
    "text": "URL which we then make Internet requests to repeatedly two to check that there's",
    "start": "324100",
    "end": "330490"
  },
  {
    "text": "a response to a successful response coming from that location or by giving us the name of an elastic load balancer",
    "start": "330490",
    "end": "337000"
  },
  {
    "text": "which we then are checking through a variety of means to make sure that the",
    "start": "337000",
    "end": "342130"
  },
  {
    "text": "load balancer is healthy and that your application is healthy behind that load balancer so we're constantly checking",
    "start": "342130",
    "end": "347440"
  },
  {
    "text": "the health of that end point from the point from the time that you define that end point in the route 53 interface",
    "start": "347440",
    "end": "354210"
  },
  {
    "text": "second term is the health check that's the thing that you're actually creating within route 53 which tells us to check",
    "start": "354210",
    "end": "361930"
  },
  {
    "text": "that end point that health check persists for as long as you're using it",
    "start": "361930",
    "end": "367270"
  },
  {
    "text": "on your dns configuration and that health check didn't has a status of either healthy or unhealthy at a",
    "start": "367270",
    "end": "375130"
  },
  {
    "text": "particular point in time based on the results of our pinging that endpoint and",
    "start": "375130",
    "end": "381280"
  },
  {
    "text": "determining whether it's returning a valid response or not once you've created your health check then you can",
    "start": "381280",
    "end": "387729"
  },
  {
    "text": "use that health check in your DNS configuration you can associate one or more DNS records to basically depend on",
    "start": "387729",
    "end": "395080"
  },
  {
    "text": "that health check either being healthy or being unhealthy and that's the way that you configure",
    "start": "395080",
    "end": "401980"
  },
  {
    "text": "the DNS failover behavior that you want",
    "start": "401980",
    "end": "406170"
  },
  {
    "text": "so how does it work over every endpoint that you define for every health check",
    "start": "408000",
    "end": "413770"
  },
  {
    "start": "410000",
    "end": "410000"
  },
  {
    "text": "that you create brou 53 will begin probing that endpoint from within every",
    "start": "413770",
    "end": "419500"
  },
  {
    "text": "AWS region so currently that eight regions around the world and we are",
    "start": "419500",
    "end": "425620"
  },
  {
    "text": "checking every endpoint from every single region just to ensure that we're checking in from as many different",
    "start": "425620",
    "end": "431520"
  },
  {
    "text": "points across the internet if possible thereby capturing also any connectivity",
    "start": "431520",
    "end": "437080"
  },
  {
    "text": "issues between one region of the world and another as well as determining with the the health of the actual endpoint so",
    "start": "437080",
    "end": "444940"
  },
  {
    "text": "to perform the health check our our health checking system is making the Internet requests to your specified",
    "start": "444940",
    "end": "451360"
  },
  {
    "text": "endpoint and if we get a successful response so for example a an HTTP 200 or",
    "start": "451360",
    "end": "458280"
  },
  {
    "text": "300 code then the health check passes if we get no response or if we get a cheap",
    "start": "458280",
    "end": "466000"
  },
  {
    "text": "HTTP error code for example 400 or above then the health check fails when the",
    "start": "466000",
    "end": "473410"
  },
  {
    "text": "health check fails then that drives our DNS routing behavior so any DNS records",
    "start": "473410",
    "end": "479320"
  },
  {
    "text": "that you had configured to depend on the health check passing become inactive and any DNS records that you've configured",
    "start": "479320",
    "end": "486730"
  },
  {
    "text": "as backups or depending on the health check failing then become active and",
    "start": "486730",
    "end": "492669"
  },
  {
    "text": "that is the mechanism by which your traffic is rerouted to your backup",
    "start": "492669",
    "end": "497680"
  },
  {
    "text": "location now previous to DNS failover being available customers had had to",
    "start": "497680",
    "end": "506890"
  },
  {
    "text": "make these DNS changes manually in response to failure so for example let's",
    "start": "506890",
    "end": "512530"
  },
  {
    "text": "say that you have a primary web site and then a backup site typically you would have to have alarming on your primary",
    "start": "512530",
    "end": "518740"
  },
  {
    "text": "site and then that would trigger someone getting paged and your organization they would then have to go and make some dns",
    "start": "518740",
    "end": "525040"
  },
  {
    "text": "configuration changes to reroute traffic in response to that failure that could take easily many many",
    "start": "525040",
    "end": "531010"
  },
  {
    "text": "minutes or even hours to complete DNS failover once you've configured it",
    "start": "531010",
    "end": "536500"
  },
  {
    "text": "upfront the actual failover is completely automatic from us detecting the failure to us rerouting traffic to",
    "start": "536500",
    "end": "543610"
  },
  {
    "text": "your backup location and that all happens from the time that the endpoint fails to traffic flowing to the backup",
    "start": "543610",
    "end": "550150"
  },
  {
    "text": "site within about three minutes that includes a time for us to detect the failure and then also the time for the",
    "start": "550150",
    "end": "555460"
  },
  {
    "text": "DNS changes to propagate across the internet so that's that's definitely a huge improvement over what customers",
    "start": "555460",
    "end": "562750"
  },
  {
    "text": "have been managing themselves what wouldn't fail over with more of a manual process so DNS failover enables two",
    "start": "562750",
    "end": "575100"
  },
  {
    "text": "basic scenarios and then there's a variety of variations within those but",
    "start": "575100",
    "end": "581410"
  },
  {
    "start": "578000",
    "end": "578000"
  },
  {
    "text": "we really think of it in terms of two basic scenarios the first is what we call simple failover or active standby",
    "start": "581410",
    "end": "589120"
  },
  {
    "text": "you can think of this as having your primary website or application and then a simple static backup site so for",
    "start": "589120",
    "end": "595990"
  },
  {
    "text": "example a fail whale type of page is an example of a very static page that",
    "start": "595990",
    "end": "604840"
  },
  {
    "text": "simply acknowledges to customers that you're experiencing difficulty maybe providing an alternate way to contact",
    "start": "604840",
    "end": "610360"
  },
  {
    "text": "you so keeping some web presence even if your primary site goes down so in this",
    "start": "610360",
    "end": "617440"
  },
  {
    "text": "configuration ordinarily when you're your primary website is healthy all traffic is flowing to that primary site",
    "start": "617440",
    "end": "623500"
  },
  {
    "text": "and no traffic is flowing to your backup site in the event that your primary site goes down route 53 will detect that and",
    "start": "623500",
    "end": "630820"
  },
  {
    "text": "reroute all traffic to your backup site now that backup site could be hosted on Amazon ec2 it could also be hosted on",
    "start": "630820",
    "end": "638110"
  },
  {
    "text": "Amazon s3 using s3's website hosting functionality that actually provides a",
    "start": "638110",
    "end": "643270"
  },
  {
    "text": "very cost-effective and very reliable way to host a simple static backup site",
    "start": "643270",
    "end": "649000"
  },
  {
    "text": "so we do see a large number of customers starting to adopt that feature the other",
    "start": "649000",
    "end": "655330"
  },
  {
    "text": "main scenario is what we call active active and this is for when you want to run your primary application in",
    "start": "655330",
    "end": "662320"
  },
  {
    "text": "multiple locations simultaneously now you can do that using a couple of route",
    "start": "662320",
    "end": "668050"
  },
  {
    "text": "53 features one is latency based routing and that allows you to run in multiple",
    "start": "668050",
    "end": "673150"
  },
  {
    "text": "AWS regions and route end-users to the closest region to them in terms of",
    "start": "673150",
    "end": "678730"
  },
  {
    "text": "Internet latency that allows you to really reduce latency experienced by your end-users if there's spread around",
    "start": "678730",
    "end": "685630"
  },
  {
    "text": "the world and that feature has been around for a little over a year DNS failover adds a",
    "start": "685630",
    "end": "692440"
  },
  {
    "text": "new capability to that which is that if any of those regions become unreachable to your end-users either your",
    "start": "692440",
    "end": "698500"
  },
  {
    "text": "application happens to go down on that region or there's some kind of tivity issue or some region wide issue route 53",
    "start": "698500",
    "end": "705850"
  },
  {
    "text": "will detect that in respond to that by removing that region from consideration and in that way the end users that had",
    "start": "705850",
    "end": "713770"
  },
  {
    "text": "been going to that region would be intelligently rerouted to the next closest region to them so basically it's",
    "start": "713770",
    "end": "720970"
  },
  {
    "text": "as if that region no longer existed in your configuration all traffic would then flow to the other healthy regions",
    "start": "720970",
    "end": "729750"
  },
  {
    "text": "so the simple failover use case and diagram form you can see here that you",
    "start": "732780",
    "end": "738640"
  },
  {
    "start": "734000",
    "end": "734000"
  },
  {
    "text": "have an application stack running and an AWS region that's over on the left side",
    "start": "738640",
    "end": "743740"
  },
  {
    "text": "of the slide and Emmas on route 53 is routing traffic to that region that's",
    "start": "743740",
    "end": "750220"
  },
  {
    "text": "your primary record that you've configured in your DNS configuration and",
    "start": "750220",
    "end": "755470"
  },
  {
    "text": "then you've also set up a health check in route 53 verifying that that application is healthy then you can see",
    "start": "755470",
    "end": "764020"
  },
  {
    "text": "that there's also a secondary site which is your gone fishing page in this example hosted on Amazon s3 then is",
    "start": "764020",
    "end": "771730"
  },
  {
    "text": "inactive at this time because your primary site is healthy and the health",
    "start": "771730",
    "end": "776740"
  },
  {
    "text": "check is is returning a healthy response now if your primary application goes",
    "start": "776740",
    "end": "783190"
  },
  {
    "text": "down you can see that the health check becomes unhealthy route 53 will respond",
    "start": "783190",
    "end": "788680"
  },
  {
    "text": "to that by no longer routing traffic to your primary endpoint and instead routing all traffic to your second two",
    "start": "788680",
    "end": "794770"
  },
  {
    "text": "in point or you're gone fishing pitch a",
    "start": "794770",
    "end": "798839"
  },
  {
    "text": "multi-region example you can see here that there is two or more identical application stacks running in multiple",
    "start": "801240",
    "end": "809380"
  },
  {
    "start": "803000",
    "end": "803000"
  },
  {
    "text": "AWS regions and so for each region there is going to be a DNS record here we're",
    "start": "809380",
    "end": "815380"
  },
  {
    "text": "using latency based routing to distribute traffic among your regions based on where your end-users are",
    "start": "815380",
    "end": "821770"
  },
  {
    "text": "located routing your end-users to the closest location to them in terms of",
    "start": "821770",
    "end": "827350"
  },
  {
    "text": "internet latency and then for each application stack there is a health check and so in this example you can see",
    "start": "827350",
    "end": "834970"
  },
  {
    "text": "that both health checks are currently healthy and so both regions are going to",
    "start": "834970",
    "end": "840250"
  },
  {
    "text": "be active both regions will have traffic flowing to them in the event that one",
    "start": "840250",
    "end": "848339"
  },
  {
    "text": "region becomes unavailable again this could be due to your own application",
    "start": "848339",
    "end": "854380"
  },
  {
    "text": "going down at P we do to some regional issue route 53 would detect that via the",
    "start": "854380",
    "end": "860140"
  },
  {
    "text": "health check in this case the health check becomes unhealthy route 53 stops",
    "start": "860140",
    "end": "865660"
  },
  {
    "text": "routing traffic to that region and all of the traffic that had been going to",
    "start": "865660",
    "end": "870880"
  },
  {
    "text": "that region would be rerouted so then each end user would be routed to the next closest region to that user in",
    "start": "870880",
    "end": "878560"
  },
  {
    "text": "terms of Internet latency",
    "start": "878560",
    "end": "881970"
  },
  {
    "text": "so you can health check and configure DNS failover for a variety of in the",
    "start": "886040",
    "end": "892790"
  },
  {
    "text": "points those end points can be for example an ec2 instance it could be an elastic load balancer or it could",
    "start": "892790",
    "end": "899180"
  },
  {
    "text": "actually be an application running in your own data center off of AWS for example we do have a number of customers",
    "start": "899180",
    "end": "906100"
  },
  {
    "text": "building backup or disaster recovery scenarios for applications that for",
    "start": "906100",
    "end": "911600"
  },
  {
    "text": "whatever reason are still running in their own data center but they do create a backup instance in AWS and you can use",
    "start": "911600",
    "end": "920180"
  },
  {
    "text": "DNS failover to fail from one to the other so first let's look at elastic",
    "start": "920180",
    "end": "928670"
  },
  {
    "text": "load balancers so Deena failover is actually simplest for elastic load",
    "start": "928670",
    "end": "934640"
  },
  {
    "start": "929000",
    "end": "929000"
  },
  {
    "text": "balancers in that you don't actually even have to create your own health check route 53 manages the health",
    "start": "934640",
    "end": "940520"
  },
  {
    "text": "checking for you completely behind the scenes all you do in this case is check a box in the route 53 console to enable",
    "start": "940520",
    "end": "948530"
  },
  {
    "text": "DNS failover and you're essentially done so let's look at that in the console in",
    "start": "948530",
    "end": "955820"
  },
  {
    "text": "the route 53 console you would start in your hosted zones tab and go to the",
    "start": "955820",
    "end": "961670"
  },
  {
    "start": "957000",
    "end": "957000"
  },
  {
    "text": "records record set page here you can see",
    "start": "961670",
    "end": "967490"
  },
  {
    "text": "that we're creating a DNS record pointing to an elastic load balancer we're using the alias record type to",
    "start": "967490",
    "end": "975740"
  },
  {
    "text": "point to that load balancer and then in the expanded right hand section of the",
    "start": "975740",
    "end": "981410"
  },
  {
    "text": "page here in this expanded pane you can see that there's a checkbox for evaluate target health and you simply check yes",
    "start": "981410",
    "end": "989660"
  },
  {
    "text": "and that tell route 53 to start using the the results of the health checks",
    "start": "989660",
    "end": "996080"
  },
  {
    "text": "health checking that route 53 already maintains for every elastic load balancer so you don't actually have to",
    "start": "996080",
    "end": "1002290"
  },
  {
    "text": "create a health check you simply check the box and that enables route 53 to",
    "start": "1002290",
    "end": "1007450"
  },
  {
    "text": "start evaluating whether that load balancer is healthy as well as whether the ec2 instance is behind that load",
    "start": "1007450",
    "end": "1013660"
  },
  {
    "text": "balancer or healthy once you've selected evaluate target health then",
    "start": "1013660",
    "end": "1019170"
  },
  {
    "text": "you use one of the routing policy options to determine whether that end",
    "start": "1019170",
    "end": "1025230"
  },
  {
    "text": "point is going to be your primary or your backup or whether you're going to use it alongside other end points and an",
    "start": "1025230",
    "end": "1032490"
  },
  {
    "text": "active-active scenario for 82 instances",
    "start": "1032490",
    "end": "1040168"
  },
  {
    "start": "1039000",
    "end": "1039000"
  },
  {
    "text": "there is one more step which is that you do create your own health check within route 53 of that ec2 instance so the",
    "start": "1040169",
    "end": "1048600"
  },
  {
    "text": "two-step process is first you create the health check and then second you associate that health check with one or",
    "start": "1048600",
    "end": "1055110"
  },
  {
    "text": "more DNS records or resource records set",
    "start": "1055110",
    "end": "1060110"
  },
  {
    "text": "the process is very similar for an endpoint that resides outside of AWS for",
    "start": "1061100",
    "end": "1067740"
  },
  {
    "start": "1063000",
    "end": "1063000"
  },
  {
    "text": "these endpoints there is a requirement that there at the endpoint have a fixed",
    "start": "1067740",
    "end": "1073169"
  },
  {
    "text": "IP address and if you were once you know the IP address of that endpoint you",
    "start": "1073169",
    "end": "1078240"
  },
  {
    "text": "would create a health check just like you would for an ec2 instance and then you would associate one or more DNS",
    "start": "1078240",
    "end": "1084809"
  },
  {
    "text": "records with that health check so step",
    "start": "1084809",
    "end": "1091679"
  },
  {
    "text": "one is you create the health check in the route 53 console so you go to the health checks tab in the rep 53 console",
    "start": "1091679",
    "end": "1101360"
  },
  {
    "start": "1092000",
    "end": "1092000"
  },
  {
    "text": "click create health check and now you're",
    "start": "1101360",
    "end": "1107130"
  },
  {
    "text": "prompted for several values which define the endpoint that we will be checking",
    "start": "1107130",
    "end": "1112230"
  },
  {
    "text": "for you so first you can choose one of two protocols either HTTP or TCP then",
    "start": "1112230",
    "end": "1120299"
  },
  {
    "text": "you specify the IP address again the endpoint must have a fixed IP address",
    "start": "1120299",
    "end": "1125549"
  },
  {
    "text": "for us to be able to health check it then you specify the port and then for",
    "start": "1125549",
    "end": "1130919"
  },
  {
    "text": "HTTP health checks you provide the hostname which is basically your domain",
    "start": "1130919",
    "end": "1136530"
  },
  {
    "text": "name and then the path to the actual page or file that you want us to",
    "start": "1136530",
    "end": "1141660"
  },
  {
    "text": "retrieve so some customers have us simply check the home page or your index",
    "start": "1141660",
    "end": "1146940"
  },
  {
    "text": "dot HTML page other customers have a dedicated web page as",
    "start": "1146940",
    "end": "1152820"
  },
  {
    "text": "target of that health check so you can specify that page here once you've",
    "start": "1152820",
    "end": "1161159"
  },
  {
    "text": "created the health check it shows up in the health checks tab from here then you",
    "start": "1161159",
    "end": "1170100"
  },
  {
    "text": "use this health check that you've just created and you associate this health check with one or more resource record",
    "start": "1170100",
    "end": "1176279"
  },
  {
    "text": "sets so you go to the record sets tab in the console and then in the expanded",
    "start": "1176279",
    "end": "1187379"
  },
  {
    "text": "right hand pane here you can see at the bottom there is the option to associate",
    "start": "1187379",
    "end": "1193559"
  },
  {
    "text": "record set with health check that's at the bottom right of the slide here you",
    "start": "1193559",
    "end": "1199019"
  },
  {
    "text": "select yes and then there's a drop-down list where you can select the health",
    "start": "1199019",
    "end": "1204149"
  },
  {
    "text": "check that you've just created and so by checking yes and then selecting the health check you have now made this DNS",
    "start": "1204149",
    "end": "1210960"
  },
  {
    "text": "record depend on that health check and from here then you can again select the",
    "start": "1210960",
    "end": "1216809"
  },
  {
    "text": "routing policy that you want either failover for that simple backup scenario",
    "start": "1216809",
    "end": "1222480"
  },
  {
    "text": "or latency based routing or weighted round robin either of those two will",
    "start": "1222480",
    "end": "1227909"
  },
  {
    "text": "then enable you to run that active active scenario every health check has a",
    "start": "1227909",
    "end": "1238169"
  },
  {
    "text": "status at any given point in time of healthy or unhealthy based on the results of our observing or making",
    "start": "1238169",
    "end": "1244679"
  },
  {
    "text": "requests to your endpoint and you can see the status of that health check and",
    "start": "1244679",
    "end": "1250320"
  },
  {
    "text": "you can actually also then trigger notifications and automated actions based on the health status so how you",
    "start": "1250320",
    "end": "1257759"
  },
  {
    "text": "see status of your health checks is that",
    "start": "1257759",
    "end": "1264029"
  },
  {
    "start": "1264000",
    "end": "1264000"
  },
  {
    "text": "each health Jett publishes its results to Amazon CloudWatch has a cloud watch",
    "start": "1264029",
    "end": "1269190"
  },
  {
    "text": "metric and so like any metric that exists in cloud watch you can view a",
    "start": "1269190",
    "end": "1276090"
  },
  {
    "text": "graph of the the health check status over time in the AWS management console",
    "start": "1276090",
    "end": "1281279"
  },
  {
    "text": "and then you can also configure alarm and notification based on that metric changing a value so",
    "start": "1281279",
    "end": "1288890"
  },
  {
    "text": "for example you can set an alarm if the health check goes from healthy to unhealthy or vice versa so to view the",
    "start": "1288890",
    "end": "1296630"
  },
  {
    "text": "status of any health check you can start within the route 53 console you go to",
    "start": "1296630",
    "end": "1302630"
  },
  {
    "text": "the health checks tab and all the way on the right hand side of the list of",
    "start": "1302630",
    "end": "1309049"
  },
  {
    "text": "health checks you will see a link for view graph if you click that link for",
    "start": "1309049",
    "end": "1315410"
  },
  {
    "text": "your desired health check that you want to see the status up that will take you",
    "start": "1315410",
    "end": "1321470"
  },
  {
    "text": "to the cloud watch console and in the cloud watch console then you will see a graph of the health check status over",
    "start": "1321470",
    "end": "1329450"
  },
  {
    "text": "time and like any cloud watch metric you can configure the graph have multiple",
    "start": "1329450",
    "end": "1335660"
  },
  {
    "text": "parameters that you can adjust you can adjust the time frame that you want to graph over there's a number of different",
    "start": "1335660",
    "end": "1341600"
  },
  {
    "text": "statistics that you can look at the maximum or average or minimum typically",
    "start": "1341600",
    "end": "1347360"
  },
  {
    "text": "customers will want to use the maximum statistic and this returns a value of",
    "start": "1347360",
    "end": "1353540"
  },
  {
    "text": "between 1 and 0 1 corresponds to your",
    "start": "1353540",
    "end": "1359000"
  },
  {
    "text": "health your endpoint being healthy and 0 corresponds to your endpoint being",
    "start": "1359000",
    "end": "1364220"
  },
  {
    "text": "unhealthy now depending on the statistic that you use whether it's maximum or average it's possible to see",
    "start": "1364220",
    "end": "1371450"
  },
  {
    "text": "intermediate values between 1 and 0 those correspond to some of our health",
    "start": "1371450",
    "end": "1377870"
  },
  {
    "text": "checkers in the different AWS regions seeing your endpoint is healthy and others seeing it as unhealthy typically",
    "start": "1377870",
    "end": "1386480"
  },
  {
    "text": "most customers aren't going to be terribly concerned about those intermediate values anything less than a",
    "start": "1386480",
    "end": "1391850"
  },
  {
    "text": "1 can be considered a failing end point but for customers that are interested in",
    "start": "1391850",
    "end": "1398049"
  },
  {
    "text": "seeing whether there's regional connectivity issues between one region",
    "start": "1398049",
    "end": "1403070"
  },
  {
    "text": "and another or potentially that your endpoint is browning outs or returning intermittent failures you can see some",
    "start": "1403070",
    "end": "1412250"
  },
  {
    "text": "of that via these intermediate values between 1 & 0",
    "start": "1412250",
    "end": "1416679"
  },
  {
    "text": "so like any other cloud wash metric you can then create alarm based on the",
    "start": "1419179",
    "end": "1424590"
  },
  {
    "text": "metric and from those alarms then you can you can use the simple notification service or SNS to trigger emails or",
    "start": "1424590",
    "end": "1432480"
  },
  {
    "text": "other types of notifications to you when your endpoint becomes unhealthy",
    "start": "1432480",
    "end": "1437700"
  },
  {
    "text": "or if it's status flips from from one status to another so for example here we",
    "start": "1437700",
    "end": "1444330"
  },
  {
    "text": "see the cloud watch figuration wizard - to set up an alarm typically if you want",
    "start": "1444330",
    "end": "1451620"
  },
  {
    "text": "to alarm on the health check going from healthy to unhealthy you would configure the metric or configure the alarm to",
    "start": "1451620",
    "end": "1458460"
  },
  {
    "text": "trigger whenever the health check status has a value less than one that would",
    "start": "1458460",
    "end": "1464490"
  },
  {
    "text": "indicate that one or more reps t3 health checkers are seeing that in point as unhealthy from this point then you can",
    "start": "1464490",
    "end": "1472679"
  },
  {
    "text": "configure email notifications or any other type of notification that FNS supports so now we'll hand it over to",
    "start": "1472679",
    "end": "1482370"
  },
  {
    "text": "Paul Kearney from InfoSpace who will talk about how he and his team are using vena failover to run in",
    "start": "1482370",
    "end": "1489090"
  },
  {
    "text": "multiple AWS regions thanks Sean so",
    "start": "1489090",
    "end": "1496250"
  },
  {
    "text": "InfoSpace has we've just finished a project of migrating our search",
    "start": "1496250",
    "end": "1502679"
  },
  {
    "text": "application out of our two data centers and into multiple AWS regions so I'll",
    "start": "1502679",
    "end": "1510029"
  },
  {
    "text": "share a little bit about the story of how route 53 plays a key component in that migration effort and how we operate",
    "start": "1510029",
    "end": "1517260"
  },
  {
    "text": "our services in AWS today InfoSpace has",
    "start": "1517260",
    "end": "1525029"
  },
  {
    "text": "a lot several different products one of our products is a search product that's",
    "start": "1525029",
    "end": "1530639"
  },
  {
    "start": "1527000",
    "end": "1527000"
  },
  {
    "text": "been our course since 1996 when the company was founded and our mission is to make it fast and easy for users to",
    "start": "1530639",
    "end": "1537990"
  },
  {
    "text": "find what they need online my name is Paul I oversee the architecture here at",
    "start": "1537990",
    "end": "1543659"
  },
  {
    "text": "InfoSpace and you can read more about our technology that drives InfoSpace",
    "start": "1543659",
    "end": "1548909"
  },
  {
    "text": "at tech info space.com so info space search",
    "start": "1548909",
    "end": "1555030"
  },
  {
    "text": "our search product is it's a windows",
    "start": "1555030",
    "end": "1562169"
  },
  {
    "start": "1560000",
    "end": "1560000"
  },
  {
    "text": "stack having trouble with there we go",
    "start": "1562169",
    "end": "1568289"
  },
  {
    "text": "our search product is entirely based on Windows it's an asp.net application we",
    "start": "1568289",
    "end": "1575340"
  },
  {
    "text": "have two primary search products the first one are the search sites that we",
    "start": "1575340",
    "end": "1580380"
  },
  {
    "text": "own and operate so these sites include things like dogpile com meta crawler web",
    "start": "1580380",
    "end": "1586470"
  },
  {
    "text": "fetch and web crawler and either end user facing sites where people can go and search the Internet",
    "start": "1586470",
    "end": "1593130"
  },
  {
    "text": "like you might do that Google the other product that we have is a Search API",
    "start": "1593130",
    "end": "1598850"
  },
  {
    "text": "that we white label and expose to our distribution partners so our",
    "start": "1598850",
    "end": "1605789"
  },
  {
    "text": "distribution partners have sites that they own and operate and if they want to include search results on their site and",
    "start": "1605789",
    "end": "1613169"
  },
  {
    "text": "be able to monetize those results we provide an API for which they can do that through so different types of users",
    "start": "1613169",
    "end": "1621809"
  },
  {
    "text": "that we have we have search site users so these are like visitors that might come - dogpile com these users run about",
    "start": "1621809",
    "end": "1630090"
  },
  {
    "start": "1622000",
    "end": "1622000"
  },
  {
    "text": "400 million queries per month and because they're hitting our our website",
    "start": "1630090",
    "end": "1636240"
  },
  {
    "text": "they are you know distributed all over the world we see you see search site",
    "start": "1636240",
    "end": "1642059"
  },
  {
    "text": "users come from every country our search api partners are more clustered they",
    "start": "1642059",
    "end": "1648690"
  },
  {
    "text": "there's about 150 partners that we have and these tend to you know operate either out of cloud providers or out of",
    "start": "1648690",
    "end": "1656250"
  },
  {
    "text": "data centers so they tend to come from large cities their primary clustered in",
    "start": "1656250",
    "end": "1663000"
  },
  {
    "text": "the US and the EU and these guys give us about two billion queries per month and",
    "start": "1663000",
    "end": "1670289"
  },
  {
    "text": "then the third type of user kind of spans both search site users as well as search api users and we call these the",
    "start": "1670289",
    "end": "1676409"
  },
  {
    "text": "click users so if you come to a search site or you go to one of our partners",
    "start": "1676409",
    "end": "1681659"
  },
  {
    "text": "sites you will get results and when you click on one of those results we do some logging so that",
    "start": "1681659",
    "end": "1687279"
  },
  {
    "text": "we can analyze that data and that is that action we call the click action so",
    "start": "1687279",
    "end": "1694210"
  },
  {
    "text": "you can imagine that these even if you get search results from our search API which tend to be in clustered in",
    "start": "1694210",
    "end": "1701740"
  },
  {
    "text": "geographical areas the click user that comes from the partner site could still",
    "start": "1701740",
    "end": "1707200"
  },
  {
    "text": "be dispersed across the world this is about six and a half billion clicks per",
    "start": "1707200",
    "end": "1712389"
  },
  {
    "text": "month that we see on our click servers so our distribution of traffic looks",
    "start": "1712389",
    "end": "1720309"
  },
  {
    "start": "1719000",
    "end": "1719000"
  },
  {
    "text": "like this we operate today out of three AWS regions in the US west to in US East",
    "start": "1720309",
    "end": "1728110"
  },
  {
    "text": "one and in EU West one we we operate out",
    "start": "1728110",
    "end": "1735159"
  },
  {
    "text": "of multiple availability zones within each AWS region the partners who call",
    "start": "1735159",
    "end": "1741070"
  },
  {
    "text": "our search ap is using latency based routing our routed to the AWS region",
    "start": "1741070",
    "end": "1747999"
  },
  {
    "text": "that is closest from where they are accessing us we operate thus and referring back to Shawn's different",
    "start": "1747999",
    "end": "1755289"
  },
  {
    "text": "types of DNS failover architectures we operate in an active active mode so any",
    "start": "1755289",
    "end": "1762190"
  },
  {
    "text": "of our AWS regions are able to serve a request at any time our search site",
    "start": "1762190",
    "end": "1770230"
  },
  {
    "text": "users are routed to the region that is least latent from wherever they're accessing our point from and then",
    "start": "1770230",
    "end": "1777100"
  },
  {
    "text": "finally click servers who may be in different geographical locations than those other two whether they're coming",
    "start": "1777100",
    "end": "1784600"
  },
  {
    "text": "from an API partner site or from one of our hosted search sites they are also routed to the region that is least",
    "start": "1784600",
    "end": "1790570"
  },
  {
    "text": "latent from their location and the cool thing that we have found with route 53",
    "start": "1790570",
    "end": "1797529"
  },
  {
    "text": "and and being a multi region is that we can then analyze our traffic and find",
    "start": "1797529",
    "end": "1803440"
  },
  {
    "text": "additional AWS regions that might provide a better service to our end",
    "start": "1803440",
    "end": "1808899"
  },
  {
    "text": "users and use route 53 to automatically route that traffic that to again to the",
    "start": "1808899",
    "end": "1815350"
  },
  {
    "text": "least latent we have we used route 53 DNS failover to",
    "start": "1815350",
    "end": "1821830"
  },
  {
    "text": "provide high availability between these regions so if one of these regions were to go offline or experience a problem",
    "start": "1821830",
    "end": "1827770"
  },
  {
    "text": "the traffic that was routed originally to that region will then be rerouted to",
    "start": "1827770",
    "end": "1833409"
  },
  {
    "text": "the other regions we used to do this in our data center by it we operated two",
    "start": "1833409",
    "end": "1840070"
  },
  {
    "text": "data centers we would we implemented this by using some expensive network",
    "start": "1840070",
    "end": "1845620"
  },
  {
    "text": "gear that would automatically handle the rerouting between the data centers if one was providing a problem once we",
    "start": "1845620",
    "end": "1852100"
  },
  {
    "text": "moved into AWS before these health checks were available for route 53 we",
    "start": "1852100",
    "end": "1859750"
  },
  {
    "text": "did this manually so we would get an alarm we would change some DNS records and point point traffic to the healthy",
    "start": "1859750",
    "end": "1867549"
  },
  {
    "text": "regions now with the automatic health checks we see that there's no manual",
    "start": "1867549",
    "end": "1874299"
  },
  {
    "text": "intervention it's all automatic and it is handled for us so the way that we set",
    "start": "1874299",
    "end": "1880960"
  },
  {
    "text": "this up we actually created the DNS health checks prior to it being exposed",
    "start": "1880960",
    "end": "1888490"
  },
  {
    "start": "1882000",
    "end": "1882000"
  },
  {
    "text": "in the AWS console so it was only available through the API when we did",
    "start": "1888490",
    "end": "1893620"
  },
  {
    "text": "this so we crafted a XML request that",
    "start": "1893620",
    "end": "1898659"
  },
  {
    "text": "setup this was our first test to just see how this service would work for us",
    "start": "1898659",
    "end": "1903820"
  },
  {
    "text": "we created a a new record set that pointed to two different regions so here",
    "start": "1903820",
    "end": "1911529"
  },
  {
    "text": "we have an XML request that creates a record pointing to an lb in US West one",
    "start": "1911529",
    "end": "1917890"
  },
  {
    "text": "and an lb in u.s. West two we then used DNS curl to upload this file to the",
    "start": "1917890",
    "end": "1927690"
  },
  {
    "text": "route 53 API which then created the records for us we were then able to",
    "start": "1927690",
    "end": "1933580"
  },
  {
    "text": "confirm in the management console that the records were created it's just that the UI had not been exposed to actually",
    "start": "1933580",
    "end": "1939159"
  },
  {
    "text": "edit the records yet so then we ran a",
    "start": "1939159",
    "end": "1944169"
  },
  {
    "text": "simple bash script and what this script does did was in each of those two regions we one instance behind each ELB and those",
    "start": "1944169",
    "end": "1952700"
  },
  {
    "start": "1945000",
    "end": "1945000"
  },
  {
    "text": "instances just simply returned a string that was the region that that instance",
    "start": "1952700",
    "end": "1961849"
  },
  {
    "text": "was running in so we returned back us West 1 or us West 2 depending on which region it was running him then we ran",
    "start": "1961849",
    "end": "1968720"
  },
  {
    "text": "this batch script and what this script did was it looked it from where we were",
    "start": "1968720",
    "end": "1974720"
  },
  {
    "text": "running the test it was looking for the region that it saw so that was the one",
    "start": "1974720",
    "end": "1981019"
  },
  {
    "text": "that it was least least latent at the beginning of the test and we then",
    "start": "1981019",
    "end": "1987769"
  },
  {
    "text": "manually removed an instance from that region so there was only one instance",
    "start": "1987769",
    "end": "1993229"
  },
  {
    "text": "where we removed that instance we watched the script and as soon as it detected that the new region was being",
    "start": "1993229",
    "end": "1999649"
  },
  {
    "text": "returned as a string it out put the date so for the time stamp so we were then",
    "start": "1999649",
    "end": "2005169"
  },
  {
    "text": "able to determine first of all that the failover worked correctly as we had",
    "start": "2005169",
    "end": "2010929"
  },
  {
    "text": "expected and we were also able to get an idea of the time that it took for route",
    "start": "2010929",
    "end": "2017200"
  },
  {
    "text": "53 to detect that the one region was no longer available and to start routing traffic to the next region so this was a",
    "start": "2017200",
    "end": "2024909"
  },
  {
    "text": "simple test that we ran we realized you know that everything worked as we had expected then we moved into a little",
    "start": "2024909",
    "end": "2031599"
  },
  {
    "text": "more complicated script to see how this would perform under under some load and",
    "start": "2031599",
    "end": "2037619"
  },
  {
    "text": "the way that we did that was using a testing system that we have that we call",
    "start": "2037619",
    "end": "2043059"
  },
  {
    "start": "2041000",
    "end": "2041000"
  },
  {
    "text": "fire-and-forget so the way that fire-and-forget works is we have two systems we have a production",
    "start": "2043059",
    "end": "2048490"
  },
  {
    "text": "system and then a system under test when a user makes a request to the production",
    "start": "2048490",
    "end": "2053858"
  },
  {
    "text": "system we make an asynchronous request to the system under test and that",
    "start": "2053859",
    "end": "2059799"
  },
  {
    "text": "request is identical to the request that was received by the user that",
    "start": "2059799",
    "end": "2065260"
  },
  {
    "text": "asynchronous request is sent with a very short timeout so the production system doesn't wait for a response within both",
    "start": "2065260",
    "end": "2071500"
  },
  {
    "text": "systems both the production and the system under test both process that request and only the production system",
    "start": "2071500",
    "end": "2078520"
  },
  {
    "text": "sends the response back to the user so this allows us to",
    "start": "2078520",
    "end": "2083540"
  },
  {
    "text": "to emulate production traffic traffic patterns and traffic loads against a",
    "start": "2083540",
    "end": "2090050"
  },
  {
    "text": "separate system outside of our production system so we did this with fire-and-forget and testing route 53 DNS",
    "start": "2090050",
    "end": "2098000"
  },
  {
    "text": "failover was we had two data centers one was on the west coast one was on the East Coast and we set up our search",
    "start": "2098000",
    "end": "2104810"
  },
  {
    "text": "application in two AWS regions also West in the East Coast we use latency based",
    "start": "2104810",
    "end": "2111140"
  },
  {
    "text": "routing to set up fire-and-forget so our West Coast data center was firing its",
    "start": "2111140",
    "end": "2117260"
  },
  {
    "text": "traffic off to the west coast AWS region and our East Coast data",
    "start": "2117260",
    "end": "2122420"
  },
  {
    "text": "center was firing its traffic to the east coast AWS region we then we then removed all",
    "start": "2122420",
    "end": "2134060"
  },
  {
    "text": "the instances that were behind the ELB in the West Coast region so we",
    "start": "2134060",
    "end": "2139460"
  },
  {
    "text": "effectively took that region offline and this is under load so this is under our production load and what we noticed was",
    "start": "2139460",
    "end": "2148270"
  },
  {
    "text": "the West Coast data center traffic started to fire and forget to the East",
    "start": "2148270",
    "end": "2153380"
  },
  {
    "text": "Coast region within about two and a half minutes and we we could verify that to",
    "start": "2153380",
    "end": "2159170"
  },
  {
    "text": "our monitoring systems when we added the instances back in the West Coast about",
    "start": "2159170",
    "end": "2166280"
  },
  {
    "text": "two and a half minutes later we noticed that the traffic then went back to where it was previously where it was firing to",
    "start": "2166280",
    "end": "2174410"
  },
  {
    "text": "both AWS regions as we had expected so this proof shows that even under load that this performed exactly as we had",
    "start": "2174410",
    "end": "2181220"
  },
  {
    "text": "anticipated we use eeob endpoints for",
    "start": "2181220",
    "end": "2188150"
  },
  {
    "text": "our DNS health checks and one thing that we did notice is that we have to rethink",
    "start": "2188150",
    "end": "2194990"
  },
  {
    "text": "the way that our health checks work a little bit in that are the EO bees have",
    "start": "2194990",
    "end": "2201380"
  },
  {
    "text": "a health check that checks the instances and can remove them in or out of the out",
    "start": "2201380",
    "end": "2207260"
  },
  {
    "text": "of the eeob based on the application health because rel 53 checks the EOB if only one of",
    "start": "2207260",
    "end": "2215450"
  },
  {
    "text": "those as healthy route 53 will continue to send traffic to that region and we may",
    "start": "2215450",
    "end": "2221599"
  },
  {
    "text": "not one instance behind that yield may not be sufficient to handle the load that would be delivered to that region",
    "start": "2221599",
    "end": "2227569"
  },
  {
    "text": "so we rethought the way that we handle those health checks and there's a little bit more intelligence in there that",
    "start": "2227569",
    "end": "2232640"
  },
  {
    "text": "after a kind of a critical mass after we go below this critical level of",
    "start": "2232640",
    "end": "2238400"
  },
  {
    "text": "instances behind 1lb those instances will start to return that they are",
    "start": "2238400",
    "end": "2244549"
  },
  {
    "text": "unhealthy even though they might be healthy and this helped us to make sure that we weren't going to flood a region",
    "start": "2244549",
    "end": "2251809"
  },
  {
    "text": "that was having trouble with a whole bunch of traffic so the results that we",
    "start": "2251809",
    "end": "2261079"
  },
  {
    "text": "found was that we got consistently in about a hundred and fifty seconds regional failover we have actually",
    "start": "2261079",
    "end": "2268249"
  },
  {
    "start": "2262000",
    "end": "2262000"
  },
  {
    "text": "observed this once in production where we it was at the middle of the night and there was an issue in a region and the",
    "start": "2268249",
    "end": "2275630"
  },
  {
    "text": "dns swung the traffic to a new region and within about five minutes that issue",
    "start": "2275630",
    "end": "2280999"
  },
  {
    "text": "had been corrected and the traffic swung back automatically we've also noticed",
    "start": "2280999",
    "end": "2287719"
  },
  {
    "text": "because of latency based routing that we can deliver our search results to our API partners and to our search site",
    "start": "2287719",
    "end": "2293390"
  },
  {
    "text": "end-users with about 25 percent less latency this is largely because we now",
    "start": "2293390",
    "end": "2300289"
  },
  {
    "text": "have an international presence but also because route 53 is constantly evaluating that latency for us in",
    "start": "2300289",
    "end": "2307430"
  },
  {
    "text": "delivering delivering user requests to the region that is the least latent for",
    "start": "2307430",
    "end": "2312440"
  },
  {
    "text": "them oh sorry the slide jumped on me",
    "start": "2312440",
    "end": "2319670"
  },
  {
    "text": "there and then the last one was that we were able to replace all of this expensive network here this was a a",
    "start": "2319670",
    "end": "2325369"
  },
  {
    "text": "hardware refresh year for us and so we were able to actually replace that gear that was in the data center that",
    "start": "2325369",
    "end": "2330650"
  },
  {
    "text": "performed this function for us with route 53 and it gave us for our use",
    "start": "2330650",
    "end": "2337059"
  },
  {
    "text": "service that was on par with what that expensive gear had done for us and that",
    "start": "2337059",
    "end": "2343670"
  },
  {
    "text": "concludes my portion thank you Paul so now we'll move to the",
    "start": "2343670",
    "end": "2350630"
  },
  {
    "text": "QA we have some great questions from the audience and so Jared Guthrie from our",
    "start": "2350630",
    "end": "2357810"
  },
  {
    "text": "team will read off some of the questions Thank You Sean we have a question from",
    "start": "2357810",
    "end": "2363960"
  },
  {
    "text": "Jason who asked how does DNS caching affect route 53 okay well I believe then",
    "start": "2363960",
    "end": "2370410"
  },
  {
    "text": "development manager for us 53 take that one sure so rapid reason authoritative",
    "start": "2370410",
    "end": "2375990"
  },
  {
    "text": "DNS server so reps decree doesn't itself caching answers but obviously resolvers",
    "start": "2375990",
    "end": "2381540"
  },
  {
    "text": "on the internet will cache answers that route 53 provides that's configurable by",
    "start": "2381540",
    "end": "2387120"
  },
  {
    "text": "the customer obviously by you with the TTL and so the lifetime of your records is going to be configured by the DPO but",
    "start": "2387120",
    "end": "2392880"
  },
  {
    "text": "Revit to be itself won't won't catch anything on your behalf or on on end-users behalf thank you all this",
    "start": "2392880",
    "end": "2399510"
  },
  {
    "text": "question is for you you mentioned a URL entry where people could go to learn",
    "start": "2399510",
    "end": "2405180"
  },
  {
    "text": "more about information technology someone asked the location of that URL",
    "start": "2405180",
    "end": "2411110"
  },
  {
    "text": "sure it's a blog that we just launched recently and we are starting to",
    "start": "2411110",
    "end": "2416670"
  },
  {
    "text": "chronicle our migration experience from the data center to AWS and the URL is Tec Tec H InfoSpace com thank you",
    "start": "2416670",
    "end": "2429050"
  },
  {
    "text": "this question is from Carlos is it possible to create failover between",
    "start": "2429050",
    "end": "2434850"
  },
  {
    "text": "availability zones instead of region yes the answer is yes you can specify one",
    "start": "2434850",
    "end": "2442950"
  },
  {
    "text": "endpoint in one availability zone and another endpoint in another availability zone generally you would be using ec2",
    "start": "2442950",
    "end": "2451860"
  },
  {
    "text": "instances as the endpoint in each case and then you wouldn't use latency based",
    "start": "2451860",
    "end": "2458400"
  },
  {
    "text": "routing because those instances would be in the same region but you can use",
    "start": "2458400",
    "end": "2464400"
  },
  {
    "text": "weighted round robin which is another routing feature of rough t3 that allows",
    "start": "2464400",
    "end": "2470640"
  },
  {
    "text": "you to split traffic in any proportion that you want across multiple endpoints",
    "start": "2470640",
    "end": "2476430"
  },
  {
    "text": "so you could for example not just use two availability zones you do three or more and use weighted round",
    "start": "2476430",
    "end": "2483119"
  },
  {
    "text": "robin to distribute traffic among those typically we see customers using elastic",
    "start": "2483119",
    "end": "2489150"
  },
  {
    "text": "load balancing which does the same thing but there are some customers with specific technical requirements that are",
    "start": "2489150",
    "end": "2495990"
  },
  {
    "text": "not using elastic load balancing and in that case you can use route 53 with",
    "start": "2495990",
    "end": "2502290"
  },
  {
    "text": "weighted round robin to split traffic among different availability zones in",
    "start": "2502290",
    "end": "2507839"
  },
  {
    "text": "the same region that that will work this question is from Brian does route 53",
    "start": "2507839",
    "end": "2513210"
  },
  {
    "text": "support HTTP health checks the answer is",
    "start": "2513210",
    "end": "2518609"
  },
  {
    "text": "no we do not support health checks over HTTPS our customers tend to use one of",
    "start": "2518609",
    "end": "2526530"
  },
  {
    "text": "two possible workarounds for web sites that are available only over HTTP",
    "start": "2526530",
    "end": "2533010"
  },
  {
    "text": "the first workaround is to health check over a TCP on port 443 and the other",
    "start": "2533010",
    "end": "2541260"
  },
  {
    "text": "option is to expose a dedicated web page as the target of the health check which",
    "start": "2541260",
    "end": "2547320"
  },
  {
    "text": "is available over HTTP so in that case you would not be health checking your homepage or a particular page on your",
    "start": "2547320",
    "end": "2554520"
  },
  {
    "text": "site over HTTP but you would expose a dedicated health check target page over",
    "start": "2554520",
    "end": "2561150"
  },
  {
    "text": "HTTP question is from John what is the",
    "start": "2561150",
    "end": "2566730"
  },
  {
    "text": "cost of Arafah t3 health check per month our fiscal house our price right so",
    "start": "2566730",
    "end": "2572849"
  },
  {
    "text": "excuse me the pricing for health check depends on whether that the what we're",
    "start": "2572849",
    "end": "2578369"
  },
  {
    "text": "checking is within AWS or not so a health check of an end point within AWS",
    "start": "2578369",
    "end": "2584460"
  },
  {
    "text": "is 50 cents per month and it's actually",
    "start": "2584460",
    "end": "2589470"
  },
  {
    "text": "we have a the first 50 health checks of in points and AWS are free per month or",
    "start": "2589470",
    "end": "2597359"
  },
  {
    "text": "free and then any beyond that if you have more than 50 ec2 instances for",
    "start": "2597359",
    "end": "2602550"
  },
  {
    "text": "example you would be charged 50 cents per month for each additional endpoint",
    "start": "2602550",
    "end": "2608910"
  },
  {
    "text": "that we're checking or for each additional health check now health checks of endpoints side of AWS are priced at 75 cents per",
    "start": "2608910",
    "end": "2617319"
  },
  {
    "text": "month thank you shine see this is from Jacob",
    "start": "2617319",
    "end": "2624670"
  },
  {
    "text": "is it possible to include a server not hosted in AWS in the fellow the answer",
    "start": "2624670",
    "end": "2632170"
  },
  {
    "text": "is yes we do have customers doing this and as long as you have a known IP",
    "start": "2632170",
    "end": "2639339"
  },
  {
    "text": "address for us to check then you can create the health check of that IP",
    "start": "2639339",
    "end": "2644410"
  },
  {
    "text": "address and then you can use that health check just like any other health check in your DNS configuration so you have",
    "start": "2644410",
    "end": "2650410"
  },
  {
    "text": "customers with their primary site outside of AWS and the backup site in",
    "start": "2650410",
    "end": "2655660"
  },
  {
    "text": "AWS or or you can do vice-versa in any configuration that you desire as long as",
    "start": "2655660",
    "end": "2661240"
  },
  {
    "text": "you have a fixed IP address that we can check okay this is spender much what can",
    "start": "2661240",
    "end": "2670390"
  },
  {
    "text": "be done to minimize the time taken for Danish profit propagation that has a higher TTL or can we use the same IP",
    "start": "2670390",
    "end": "2678490"
  },
  {
    "text": "address for backup site so in order to minimize the time that it takes for",
    "start": "2678490",
    "end": "2685119"
  },
  {
    "text": "traffic to start flowing to your backup or alternate location that is going to",
    "start": "2685119",
    "end": "2690430"
  },
  {
    "text": "depend directly on the TTL that you set so we do recommend a TTL of 60 seconds",
    "start": "2690430",
    "end": "2697180"
  },
  {
    "text": "or less on records that you're using for DNS failover so if you keep the TTL is",
    "start": "2697180",
    "end": "2703539"
  },
  {
    "text": "low that will directly affect and directly minimize the time taken for",
    "start": "2703539",
    "end": "2708849"
  },
  {
    "text": "failover to to occur or gopher traffic to start flowing based on that fell over",
    "start": "2708849",
    "end": "2713920"
  },
  {
    "text": "having occurred alias records which point to elastic load balancers or can",
    "start": "2713920",
    "end": "2720759"
  },
  {
    "text": "also point to s3 websites or to cloud front distributions have a non",
    "start": "2720759",
    "end": "2726009"
  },
  {
    "text": "adjustable TTL which is 50 seconds so in those cases you don't have to worry about that for other records a records",
    "start": "2726009",
    "end": "2734619"
  },
  {
    "text": "or fumes you do configure the TTL yourself and we do again recommend that",
    "start": "2734619",
    "end": "2739809"
  },
  {
    "text": "that be 60 seconds or less so regarding for for errors if what",
    "start": "2739809",
    "end": "2750959"
  },
  {
    "text": "point once the full work was how long will it take to add back if the instance",
    "start": "2750959",
    "end": "2758969"
  },
  {
    "text": "comes back healthy in a few minutes sure so fail the question is about once an",
    "start": "2758969",
    "end": "2766079"
  },
  {
    "text": "end point becomes healthy again do we fail back automatically and how",
    "start": "2766079",
    "end": "2771269"
  },
  {
    "text": "long does that take and the answer is yes we do fail back automatically so failover is not sticky in the sense that",
    "start": "2771269",
    "end": "2777599"
  },
  {
    "text": "we will reverse that fell over if your primary end point becomes healthy again",
    "start": "2777599",
    "end": "2783209"
  },
  {
    "text": "it takes the same amount of time to reverse ever does to failover so it",
    "start": "2783209",
    "end": "2788519"
  },
  {
    "text": "requires three consecutive health check observations determining that the health check is healthy just like it would take",
    "start": "2788519",
    "end": "2795239"
  },
  {
    "text": "three failed health check observations for us to determine that is unhealthy so that takes a minute and a half given",
    "start": "2795239",
    "end": "2801690"
  },
  {
    "text": "that the health check innovations are thirty seconds apart and then it takes roughly another minute based on that",
    "start": "2801690",
    "end": "2807719"
  },
  {
    "text": "60-second TTL on your DNS records so between two and a half and three minutes for the fail back to occur just like it",
    "start": "2807719",
    "end": "2814829"
  },
  {
    "text": "takes two and two and a half to three minutes for the failover to occur actually this is from John can the IP",
    "start": "2814829",
    "end": "2821489"
  },
  {
    "text": "address and create health check the internal or external VPC or only",
    "start": "2821489",
    "end": "2827249"
  },
  {
    "text": "internet addresses right so our health checks are conducted from all AWS regions and they go across the public",
    "start": "2827249",
    "end": "2833940"
  },
  {
    "text": "internet so the IP addresses that we check do need to be reachable from the external world and also one other note",
    "start": "2833940",
    "end": "2841890"
  },
  {
    "text": "on that is that depending on the security group configuration that you",
    "start": "2841890",
    "end": "2847349"
  },
  {
    "text": "have you may need to whitelist or allow incoming traffic from our health checkers and so we do publish the IP",
    "start": "2847349",
    "end": "2854789"
  },
  {
    "text": "ranges of our health checkers in the route 53 forum it's a sticky forum posts",
    "start": "2854789",
    "end": "2862259"
  },
  {
    "text": "that we will we can keep updated in the rough history form so if you do notice",
    "start": "2862259",
    "end": "2867449"
  },
  {
    "text": "that your health checking requests aren't getting through you may want to double check your security group",
    "start": "2867449",
    "end": "2873119"
  },
  {
    "text": "configuration ok these questions for Dave and you you might have already answered this beware that I hope that interval so we",
    "start": "2873119",
    "end": "2880560"
  },
  {
    "text": "check every 30 seconds from every location that we check from and actually",
    "start": "2880560",
    "end": "2887160"
  },
  {
    "text": "we check from 8 AWS regions and we also check from two different availability zones in each region so that's actually",
    "start": "2887160",
    "end": "2894000"
  },
  {
    "text": "a total of 16 different machines or health checkers checking every endpoint",
    "start": "2894000",
    "end": "2899880"
  },
  {
    "text": "and each one is doing that on an interval of 30 seconds so you will see",
    "start": "2899880",
    "end": "2905250"
  },
  {
    "text": "requests coming in to your target of your health check on average about one every two seconds given that you have 16",
    "start": "2905250",
    "end": "2911490"
  },
  {
    "text": "checkers each checking at 30-second intervals and this question is from",
    "start": "2911490",
    "end": "2917490"
  },
  {
    "text": "Christopher does the primary website have to be hosted with Amazon does the",
    "start": "2917490",
    "end": "2922800"
  },
  {
    "text": "backup the answer is that in neither the primary nor the backup needs to be on it",
    "start": "2922800",
    "end": "2930420"
  },
  {
    "text": "on Amazon Web Services you can help check at a location outside of AWS as",
    "start": "2930420",
    "end": "2937140"
  },
  {
    "text": "long as it has an known fixed IP address and you can then make any DNS record",
    "start": "2937140",
    "end": "2945360"
  },
  {
    "text": "dependent on that health check so your primary or your backup so those can point to resources outside of AWS just",
    "start": "2945360",
    "end": "2951900"
  },
  {
    "text": "as easily as with an AWS okay thank you",
    "start": "2951900",
    "end": "2957060"
  },
  {
    "text": "a lot of good questions say in a simple failover scenario after a fell over does",
    "start": "2957060",
    "end": "2963570"
  },
  {
    "text": "a successful health check on the primary primary initiate an automatic fall back they'll fall that fail back sorry to the",
    "start": "2963570",
    "end": "2971370"
  },
  {
    "text": "primary load yes so we will fail back revert to the primary configuration that",
    "start": "2971370",
    "end": "2978750"
  },
  {
    "text": "your primary endpoint becomes healthy we do have some customers that have created",
    "start": "2978750",
    "end": "2985290"
  },
  {
    "text": "sort of a sticky failover on their own through the notifications that that you",
    "start": "2985290",
    "end": "2991710"
  },
  {
    "text": "can get from your health check you can use that to then trigger a script on your end to for example",
    "start": "2991710",
    "end": "2997650"
  },
  {
    "text": "remove that primary record if you do want that failover to be permanent or",
    "start": "2997650",
    "end": "3002960"
  },
  {
    "text": "more or less permanent so that traffic does not revert back to the primary but that is something that that you",
    "start": "3002960",
    "end": "3008430"
  },
  {
    "text": "two scripts on your your own end is",
    "start": "3008430",
    "end": "3013770"
  },
  {
    "text": "there a way to set in a DNS record and use an RDS endpoint so I assume this",
    "start": "3013770",
    "end": "3020310"
  },
  {
    "text": "question is related to associating a health check with an RDS endpoint given",
    "start": "3020310",
    "end": "3026280"
  },
  {
    "text": "that you could find out the IP address of an RDS endpoint I guess that's potentially possible you could look at",
    "start": "3026280",
    "end": "3033180"
  },
  {
    "text": "the IP address for your RDS if you assuming you have a single a single AC",
    "start": "3033180",
    "end": "3038850"
  },
  {
    "text": "RDS instance so not not multi where it is a fixed IP you could help check that",
    "start": "3038850",
    "end": "3044280"
  },
  {
    "text": "IP over TCP or something like that and associate that with a health check typically what we actually have heard",
    "start": "3044280",
    "end": "3049980"
  },
  {
    "text": "from customers who want to do something like this is they'll exposed an HTTP health check where that HTTP page does",
    "start": "3049980",
    "end": "3057900"
  },
  {
    "text": "do something against the database instance on the backend and it returns a code indicating whether the database is",
    "start": "3057900",
    "end": "3064140"
  },
  {
    "text": "healthy or not so the typical way we see customers do this is they have a page that goes and checks the RDS endpoint",
    "start": "3064140",
    "end": "3070530"
  },
  {
    "text": "that way they can still use in a multi ez RDS setup and not have to rely on a",
    "start": "3070530",
    "end": "3075570"
  },
  {
    "text": "fixed IP actually a gray asks is it possible to reduce the 150 second region",
    "start": "3075570",
    "end": "3083250"
  },
  {
    "text": "fail over time the paul mentioned assuming customers are using the LD is",
    "start": "3083250",
    "end": "3088260"
  },
  {
    "text": "what helps you with culture at this time the answer is no it takes three",
    "start": "3088260",
    "end": "3094890"
  },
  {
    "text": "consecutive health checks which are spaced 30 seconds apart for us to determine that an endpoint is truly",
    "start": "3094890",
    "end": "3101400"
  },
  {
    "text": "failed and then there is the DNS propagation time based on that that TTL",
    "start": "3101400",
    "end": "3107060"
  },
  {
    "text": "which also gets we take into account so so that does leave you in the vicinity",
    "start": "3107060",
    "end": "3112410"
  },
  {
    "text": "of 150 seconds we're definitely interested in customers hearing from",
    "start": "3112410",
    "end": "3117510"
  },
  {
    "text": "customers with use cases requiring faster failover to understand you know is there a way to",
    "start": "3117510",
    "end": "3124080"
  },
  {
    "text": "trade off some of that health checking behavior or adjust some of the the configurations on the health checks so",
    "start": "3124080",
    "end": "3130860"
  },
  {
    "text": "we definitely been trusted in hearing more specifically so so we'll follow up on that okay since you're routing to",
    "start": "3130860",
    "end": "3137640"
  },
  {
    "text": "different regions how do you synchronize all the data the review so I'll answer that in",
    "start": "3137640",
    "end": "3144950"
  },
  {
    "text": "general terms and maybe I'll hand them over to Paul for his specific application but a customer is running in",
    "start": "3144950",
    "end": "3151039"
  },
  {
    "text": "multiple regions do you need to manage synchronization of data and so we've",
    "start": "3151039",
    "end": "3157700"
  },
  {
    "text": "definitely seen stateless applications being some of the the first of the easiest to run the multiple regions but",
    "start": "3157700",
    "end": "3165019"
  },
  {
    "text": "the more stateful applications they're there does need to be some sinker and synchronization that you as the customer",
    "start": "3165019",
    "end": "3171880"
  },
  {
    "text": "manage to make sure that each region is is serving the same data so Paul is there anything that you can share to the",
    "start": "3171880",
    "end": "3178220"
  },
  {
    "text": "senior ok yeah I would just say that our search application is for processing a",
    "start": "3178220",
    "end": "3184700"
  },
  {
    "text": "search request is stateless so we don't have the and we architected it",
    "start": "3184700",
    "end": "3191210"
  },
  {
    "text": "specifically that way such that data refresh is happen in the background they become eventually consistent but they're",
    "start": "3191210",
    "end": "3197960"
  },
  {
    "text": "not required to be to serve a search a search request it's not required to be",
    "start": "3197960",
    "end": "3205490"
  },
  {
    "text": "all synchronized we just don't have data",
    "start": "3205490",
    "end": "3210920"
  },
  {
    "text": "that we need to synchronize across multiple regions in order to serve a search request right thanks Paul",
    "start": "3210920",
    "end": "3219039"
  },
  {
    "text": "here's a question from Ivan is it possible to permanently keep an active",
    "start": "3219160",
    "end": "3224180"
  },
  {
    "text": "location gone and healthy down instead of automatically adding it back up once",
    "start": "3224180",
    "end": "3230150"
  },
  {
    "text": "it's healthy again so I've talked to some customers who have created this behavior on their own",
    "start": "3230150",
    "end": "3236690"
  },
  {
    "text": "end through some simple scripts that they've written they basically look at",
    "start": "3236690",
    "end": "3242390"
  },
  {
    "text": "the result of the health check or look at the actual DNS record that's being returned by roughly 3 to detect when",
    "start": "3242390",
    "end": "3249529"
  },
  {
    "text": "that pill over occurs and then that triggers on their own and a Ralph's p3 API call to remove the previous active",
    "start": "3249529",
    "end": "3258170"
  },
  {
    "text": "record but that is something that that you would need to script on your own end",
    "start": "3258170",
    "end": "3264079"
  },
  {
    "text": "the the out-of-the-box behavior of route 53 is to return to the active",
    "start": "3264079",
    "end": "3270470"
  },
  {
    "text": "configuration if that primary endpoint is hell again okay this is from Patrick does the",
    "start": "3270470",
    "end": "3277280"
  },
  {
    "text": "effective failover time on the user side depend on DNS record TTL answered yes",
    "start": "3277280",
    "end": "3283400"
  },
  {
    "text": "and that is why we do recommend that customer set TTL of 60 seconds or less",
    "start": "3283400",
    "end": "3289359"
  },
  {
    "text": "alias records pointing at elastic load balancers or s3 websites or cloud front",
    "start": "3289359",
    "end": "3295280"
  },
  {
    "text": "distributions already have a 60 second TTL that is fixed if not configurable by",
    "start": "3295280",
    "end": "3300859"
  },
  {
    "text": "the customer but other records do have configurable TTL and again we do recommend that you keep that low 60",
    "start": "3300859",
    "end": "3307970"
  },
  {
    "text": "seconds or lower in order to minimize because that does directly affect the amount of time that that users take to",
    "start": "3307970",
    "end": "3315230"
  },
  {
    "text": "start being routed to your backup location thanks Shawn I think that wraps up today's sessions what you want to",
    "start": "3315230",
    "end": "3321109"
  },
  {
    "text": "close out great all right well thank you thanks everyone for attending and huge",
    "start": "3321109",
    "end": "3326809"
  },
  {
    "text": "thanks to Paul for sharing InfoSpace with UK and I'd just like to close about",
    "start": "3326809",
    "end": "3332359"
  },
  {
    "text": "by thanking Shaun and Paul today for presenting and just a reminder to please fill out that survey let us know what",
    "start": "3332359",
    "end": "3338480"
  },
  {
    "text": "you thought of today's event and what that will go ahead and close it out have a great day everyone",
    "start": "3338480",
    "end": "3344740"
  }
]