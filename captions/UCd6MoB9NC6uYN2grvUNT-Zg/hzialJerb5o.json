[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "hi good morning everybody welcome to Friday at reinvent my name is Saji matthew along with austin financiers",
    "start": "0",
    "end": "7259"
  },
  {
    "text": "from Spokeo going to be doing how Spokeo improved web application response times",
    "start": "7259",
    "end": "13500"
  },
  {
    "text": "with Amazon Elastic file system so we have a packed session for you Awesome's",
    "start": "13500",
    "end": "19920"
  },
  {
    "text": "going to dive in to the details of the Spokeo use case but I know there's",
    "start": "19920",
    "end": "25439"
  },
  {
    "text": "probably a number of you in the room who may not be familiar with EFS so I'm going to give a brief and gentle",
    "start": "25439",
    "end": "32189"
  },
  {
    "text": "overview to the service so to understand EFS it's important to understand how",
    "start": "32189",
    "end": "38309"
  },
  {
    "start": "34000",
    "end": "34000"
  },
  {
    "text": "storage fits into the Amazon platform coming into this week Amazon had a wide",
    "start": "38309",
    "end": "45110"
  },
  {
    "text": "array of services the the most depth and breadth of any cloud platform out there",
    "start": "45110",
    "end": "50700"
  },
  {
    "text": "and as you saw the last couple of days we even added even more services to that",
    "start": "50700",
    "end": "55739"
  },
  {
    "text": "so storage on AWS can be categorized into a number of different areas so we",
    "start": "55739",
    "end": "62910"
  },
  {
    "text": "have file which is represented by EFS we have object storage which is represented",
    "start": "62910",
    "end": "69060"
  },
  {
    "text": "by s3 and glacier s3 is one of our older services the scale the performance is",
    "start": "69060",
    "end": "76590"
  },
  {
    "text": "something that is unparalleled and generally a SV can be used for any type",
    "start": "76590",
    "end": "82350"
  },
  {
    "text": "of use case where web object storage is is appropriate glacier",
    "start": "82350",
    "end": "87780"
  },
  {
    "text": "can be used for things like long-term archiving for objects that are infrequently accessed",
    "start": "87780",
    "end": "94380"
  },
  {
    "text": "we have block storage which is used by Amazon ec2 and block storage is",
    "start": "94380",
    "end": "100200"
  },
  {
    "text": "represented by EBS as well as ec2 instance storage PBS provides persistent",
    "start": "100200",
    "end": "106110"
  },
  {
    "text": "block storage ec2 instance storage provides temporary or ephemeral storage",
    "start": "106110",
    "end": "111200"
  },
  {
    "text": "in addition to that we have a variety of ways to import data into the AWS cloud",
    "start": "111200",
    "end": "118670"
  },
  {
    "text": "prior to this week snowball enable you to import petabytes of data but as you saw on Wednesday with",
    "start": "118670",
    "end": "125399"
  },
  {
    "text": "snowmobile you can now import exabytes of data in addition to that services",
    "start": "125399",
    "end": "131099"
  },
  {
    "text": "such as Storage Gateway enable you to stick data between your premise as well as AWS",
    "start": "131099",
    "end": "137750"
  },
  {
    "text": "direct-connect gives you a bandwidth low-latency network connectivity from",
    "start": "137750",
    "end": "142980"
  },
  {
    "text": "your network to the Avis clause that you can transfer data through the network in",
    "start": "142980",
    "end": "148440"
  },
  {
    "text": "additions that we have Kinesis firehose which enables the transferring of or",
    "start": "148440",
    "end": "153720"
  },
  {
    "text": "streaming of massive amounts of real-time data to various AWS targets so",
    "start": "153720",
    "end": "160160"
  },
  {
    "text": "as you because we go through the presentation keep in mind how EFS fits",
    "start": "160160",
    "end": "166019"
  },
  {
    "text": "into the big picture of all of us you have a lot of different storage options and EFS is the storage option when you",
    "start": "166019",
    "end": "171930"
  },
  {
    "start": "167000",
    "end": "167000"
  },
  {
    "text": "need a shared file system that can be leveraged by many different or thousands",
    "start": "171930",
    "end": "177120"
  },
  {
    "text": "or hundreds of thousands of different ec2 instances so why did Amazon create",
    "start": "177120",
    "end": "184010"
  },
  {
    "text": "EFS well primarily it's the same reason we develop any new service and that's",
    "start": "184010",
    "end": "189120"
  },
  {
    "text": "because we want to alleviate the burden of managing infrastructure from you the",
    "start": "189120",
    "end": "194430"
  },
  {
    "text": "customer so depending on your role you may be familiar with some of these issues so for example if you're an IT",
    "start": "194430",
    "end": "200130"
  },
  {
    "text": "administrator one of the problems that you often encounter when you want to set up a new piece of functionality is that",
    "start": "200130",
    "end": "211290"
  },
  {
    "text": "you have to procure Hardware set it up maintain it make sure there's enough space heating and cooling it's all the",
    "start": "211290",
    "end": "217950"
  },
  {
    "text": "stuff that you have to deal with when you have to deal with infrastructure on premise you also could think about how",
    "start": "217950",
    "end": "223410"
  },
  {
    "text": "much demand there really is for this particular functionality within the",
    "start": "223410",
    "end": "229380"
  },
  {
    "text": "organization and forecasting demand could be very very tricky often it's guesswork if you're an application owner",
    "start": "229380",
    "end": "235590"
  },
  {
    "text": "or developer you may be constrained by lack of storage space and so things that",
    "start": "235590",
    "end": "241410"
  },
  {
    "text": "you may want to get done may have to wait until IT provides that service to you if you are a business manager you",
    "start": "241410",
    "end": "249120"
  },
  {
    "text": "are constantly in the cycle of refreshing the hardware and upgrading it",
    "start": "249120",
    "end": "254639"
  },
  {
    "text": "the other big problem is that with typical hardware well there's a lot of",
    "start": "254639",
    "end": "260190"
  },
  {
    "text": "capex that you have to expand upfront so what if we could eliminate all of those",
    "start": "260190",
    "end": "265229"
  },
  {
    "start": "263000",
    "end": "263000"
  },
  {
    "text": "issues and make easy to consume a shared file system so what Amazon's done is basically",
    "start": "265229",
    "end": "272310"
  },
  {
    "text": "eliminate any sort of management and maintenance related to a shared file system and it's a shared file system as",
    "start": "272310",
    "end": "279270"
  },
  {
    "text": "we'll see that can scale into the petabytes if you're an application owner or developer EFS will simply work with",
    "start": "279270",
    "end": "286949"
  },
  {
    "text": "your existing applications and more importantly you never have to wait for IT to provide the storage that you need",
    "start": "286949",
    "end": "293720"
  },
  {
    "text": "if you're a business manager you can trade a capex for operational expense and pay-as-you-go so you simply pay for",
    "start": "293720",
    "end": "301050"
  },
  {
    "text": "the stores that you use on EFS you know you don't pay for any provision storage we'll talk a little bit about that later",
    "start": "301050",
    "end": "306660"
  },
  {
    "text": "on as well overall for everybody involved it means less time and effort managing a file",
    "start": "306660",
    "end": "314460"
  },
  {
    "text": "system infrastructure so what is Amazon Elastic file system it is a fully",
    "start": "314460",
    "end": "320520"
  },
  {
    "start": "316000",
    "end": "316000"
  },
  {
    "text": "managed file system for ec2 so when we say fully managed that means there's",
    "start": "320520",
    "end": "326639"
  },
  {
    "text": "really no work on your part to actually create or maintain the file system it's",
    "start": "326639",
    "end": "333300"
  },
  {
    "text": "all done for you all the complexity the durability the reliability the scalability is all taken care of for you",
    "start": "333300",
    "end": "338699"
  },
  {
    "text": "it's done on the back end you the customer simply create the file system which takes about a minute and then from",
    "start": "338699",
    "end": "344430"
  },
  {
    "text": "then on you can start using EFS as you would any shared file system your",
    "start": "344430",
    "end": "350880"
  },
  {
    "text": "applications that call into the file system will simply work EFS today is based on NFS so any application that you",
    "start": "350880",
    "end": "358470"
  },
  {
    "text": "can talk with the NFS api's or fall system api's can simply work without any sort of compatibility issues the FS can",
    "start": "358470",
    "end": "366090"
  },
  {
    "text": "be shared amongst thousands of instances so it can really scale so if you have a",
    "start": "366090",
    "end": "371460"
  },
  {
    "text": "small workload that eventually may grow into a much larger workload EFS can grow with you there's never any reason to",
    "start": "371460",
    "end": "379199"
  },
  {
    "text": "provision storage on EFS you simply create a file system and as you'll see",
    "start": "379199",
    "end": "384630"
  },
  {
    "text": "you'll have a lot of space available to you and you simply start adding and removing files and EFS will grow and",
    "start": "384630",
    "end": "391020"
  },
  {
    "text": "shrink with you it's highly available in durable this is one of the most important features of the service making",
    "start": "391020",
    "end": "398190"
  },
  {
    "text": "a service durable and scalable and reliable is really complex and difficult and the EFS",
    "start": "398190",
    "end": "405540"
  },
  {
    "text": "service abstracts that away from you the customer you simply start using it and we'll see how the availability is",
    "start": "405540",
    "end": "411449"
  },
  {
    "text": "implemented in just a few slides EFS also provides strong consistency that",
    "start": "411449",
    "end": "416729"
  },
  {
    "text": "means consistency in terms of performance as well as file semantic consistency so there's four main areas",
    "start": "416729",
    "end": "424410"
  },
  {
    "text": "or advantages to EFS first and foremost EFS is designed to be simple as you'll",
    "start": "424410",
    "end": "430080"
  },
  {
    "text": "see in a couple of slides you can create a file system in seconds and then once",
    "start": "430080",
    "end": "435510"
  },
  {
    "text": "you mount it which takes another few seconds you're ready to go that's all there is to it there's really no management on your part at all it",
    "start": "435510",
    "end": "443700"
  },
  {
    "text": "seamlessly integrates with NFS or any application that's using NFS or yelping system that Linux operating system that",
    "start": "443700",
    "end": "450540"
  },
  {
    "text": "can understand NFS and the price thing is very very straightforward it's",
    "start": "450540",
    "end": "455729"
  },
  {
    "text": "basically the amount of storage that you use per month there's no request charges or i/o charges or anything like that",
    "start": "455729",
    "end": "463970"
  },
  {
    "text": "EFS is designed to be elastic what this means is that the file system can grow",
    "start": "463970",
    "end": "469500"
  },
  {
    "text": "and shrink as you add and remove files there's no pre provisioning necessary",
    "start": "469500",
    "end": "475970"
  },
  {
    "text": "and there's no provisioning of either storage capacity or performance it simply just grows in terms of capacity",
    "start": "475970",
    "end": "483150"
  },
  {
    "text": "and you get more throughput as you add more files as we'll see just a couple of seconds EFS is designed to be scalable",
    "start": "483150",
    "end": "490860"
  },
  {
    "start": "488000",
    "end": "488000"
  },
  {
    "text": "which means that again without pre provisioning you can start in the",
    "start": "490860",
    "end": "495870"
  },
  {
    "text": "gigabytes go into the terabytes and as your needs grow it can get into the",
    "start": "495870",
    "end": "501270"
  },
  {
    "text": "petabytes as well and performance increases as the size used on EFS on",
    "start": "501270",
    "end": "507960"
  },
  {
    "text": "your EFS file system increases as well and it can support thousands of concurrent NFS connections across a wide",
    "start": "507960",
    "end": "516089"
  },
  {
    "text": "variety of ec2 instances as I mentioned earlier the durability and availability",
    "start": "516089",
    "end": "522360"
  },
  {
    "text": "is built into the product and what this means is that EFS basically replicates",
    "start": "522360",
    "end": "528750"
  },
  {
    "text": "your data across multiple availability zones with a given region and so what this means is",
    "start": "528750",
    "end": "534250"
  },
  {
    "text": "that in terms of durability it is much superior to what most customers can create on premise or you know do it",
    "start": "534250",
    "end": "541150"
  },
  {
    "text": "yourself on ec2 and is designed to be a tier zero service so that you can create",
    "start": "541150",
    "end": "547270"
  },
  {
    "text": "mission-critical applications on EFS and expect the performance durability and",
    "start": "547270",
    "end": "552700"
  },
  {
    "text": "reliability that mission-critical applications require so this is just an",
    "start": "552700",
    "end": "558130"
  },
  {
    "text": "example of how EFS durability and availability work whenever you write a",
    "start": "558130",
    "end": "565840"
  },
  {
    "text": "file to EFS the data in that file is basically redundant ly stored across",
    "start": "565840",
    "end": "572380"
  },
  {
    "text": "multiple availability zones so what this means is that if there is a service interruption in one availability zone",
    "start": "572380",
    "end": "578350"
  },
  {
    "text": "your applications will continue to work because EFS will be available from other availability zones so what this means is",
    "start": "578350",
    "end": "586870"
  },
  {
    "start": "585000",
    "end": "585000"
  },
  {
    "text": "that there's a wide array of different applications that can work with EFS so",
    "start": "586870",
    "end": "593680"
  },
  {
    "text": "workloads such as big data analytics web application surveying home directories",
    "start": "593680",
    "end": "598780"
  },
  {
    "text": "content management are perfect for use with EFS now EFS is a managed service",
    "start": "598780",
    "end": "607090"
  },
  {
    "text": "and so what that means is that there's really not much work that you need to do the things that you need to do with DFS",
    "start": "607090",
    "end": "612730"
  },
  {
    "text": "are for example creating a file system deleting a file system listing the file",
    "start": "612730",
    "end": "618550"
  },
  {
    "text": "systems that you've created tagging a file system and creating mam targets we'll talk about Mon targets in just a",
    "start": "618550",
    "end": "625000"
  },
  {
    "text": "second and so you can do that via the web console you can do that via the",
    "start": "625000",
    "end": "630640"
  },
  {
    "text": "command line interface and you can do that with the plethora of software development kits that we have for our",
    "start": "630640",
    "end": "636040"
  },
  {
    "text": "api's so how do you create a AFS file system you simply go to the web console",
    "start": "636040",
    "end": "642610"
  },
  {
    "text": "or the other options I mentioned and within a couple of seconds you have a fully available file system at your",
    "start": "642610",
    "end": "649570"
  },
  {
    "text": "disposal once the file system is created by the service you go to your Linux",
    "start": "649570",
    "end": "655180"
  },
  {
    "text": "instance if NFS is not installed you install NFS and then you simply mount",
    "start": "655180",
    "end": "660490"
  },
  {
    "text": "the filesystem that's it so in under a minute you can have a fully working for",
    "start": "660490",
    "end": "665740"
  },
  {
    "text": "system connected to your Linux instance it's that simple there's really nothing else that you have to do so when you",
    "start": "665740",
    "end": "673600"
  },
  {
    "start": "672000",
    "end": "672000"
  },
  {
    "text": "create a file system you'll see that it creates what are known I'll just sort of known as mount targets mount targets are",
    "start": "673600",
    "end": "679540"
  },
  {
    "text": "a way our endpoints within each subnet across different availability zones",
    "start": "679540",
    "end": "686140"
  },
  {
    "text": "within your VP see what mount targets enable you to do or your ec2 instances to do is connect to them talk to I'm",
    "start": "686140",
    "end": "694060"
  },
  {
    "text": "sorry the EFS file system VL local IP address and IP address that's local to",
    "start": "694060",
    "end": "699070"
  },
  {
    "text": "that subnet you can connect via IP address you can also connect via a DNS",
    "start": "699070",
    "end": "704740"
  },
  {
    "text": "and point as well now this is just a small example of how you mount a file",
    "start": "704740",
    "end": "712150"
  },
  {
    "text": "system hopefully you can see that in the back but the first line is I'm simply issuing a Linux mount command and",
    "start": "712150",
    "end": "718690"
  },
  {
    "text": "telling it to mount the filesystem and the directory called EFS that takes a",
    "start": "718690",
    "end": "725470"
  },
  {
    "text": "second or two and then I simply run the disk free command and it shows me that I",
    "start": "725470",
    "end": "730540"
  },
  {
    "text": "have 9.3 exabytes of data keep in mind that you're only charged for the data",
    "start": "730540",
    "end": "737050"
  },
  {
    "text": "that you use not for the D that's available to you and that's all there is to it ok now let's talk a little bit",
    "start": "737050",
    "end": "745360"
  },
  {
    "text": "about EFS performance EFS has two performance modes one is a general-purpose mode which is the",
    "start": "745360",
    "end": "751780"
  },
  {
    "text": "default and which is what we recommend to most customers it is optimized for latency sensitive applications and it's",
    "start": "751780",
    "end": "759100"
  },
  {
    "text": "really the best option for most workloads now if you want to get the",
    "start": "759100",
    "end": "765040"
  },
  {
    "text": "most aggregate throughput out of your file system there's another option called max IO mode which can scale to",
    "start": "765040",
    "end": "772240"
  },
  {
    "text": "higher levels of throughput with a little bit higher latency so for most",
    "start": "772240",
    "end": "777340"
  },
  {
    "text": "customers we recommend is going with general-purpose there is a cloud watch metric called percentile limit and you",
    "start": "777340",
    "end": "784420"
  },
  {
    "text": "can monitor that metric to see whether it's getting close to 100% if it is you can switch to the the max auto mode so",
    "start": "784420",
    "end": "793270"
  },
  {
    "text": "how does EFS performance work well EFS performance is based on two concepts the",
    "start": "793270",
    "end": "798730"
  },
  {
    "text": "first is that as a filesystem gets larger generally it requires more throughput the other is",
    "start": "798730",
    "end": "806020"
  },
  {
    "text": "the observation that most file workloads are spiky they tend to Hubble long and a",
    "start": "806020",
    "end": "811810"
  },
  {
    "text": "certain baseline rate and then during certain periods they tend to spike up in terms of iOS so what EFS provides is a",
    "start": "811810",
    "end": "820090"
  },
  {
    "text": "scalable bursting model that's designed to make performance available to your application when they need it and so it",
    "start": "820090",
    "end": "828400"
  },
  {
    "text": "is represented by this particular graph what this graph shows is basically the",
    "start": "828400",
    "end": "834040"
  },
  {
    "text": "baseline rate that a given file system of a certain size has and then the burst rate the baseline rate is in blue the",
    "start": "834040",
    "end": "840790"
  },
  {
    "text": "burst rate is in orange and what it shows is that generally you get about",
    "start": "840790",
    "end": "847510"
  },
  {
    "text": "five kilobytes per second of performance per gigabyte and so as your file system",
    "start": "847510",
    "end": "854890"
  },
  {
    "text": "grows the actual baseline rate grows along with it literally now the burst",
    "start": "854890",
    "end": "861220"
  },
  {
    "text": "rate from one gigabyte to one terabyte is constant at a hundred megabytes per",
    "start": "861220",
    "end": "867430"
  },
  {
    "text": "second but then after one terabyte it starts to draw along with the size of the file system so essentially what this",
    "start": "867430",
    "end": "875350"
  },
  {
    "text": "means is that you know as you start adding more files to your file system the performance proportionately grows as",
    "start": "875350",
    "end": "883240"
  },
  {
    "text": "well okay now every bucket comes with 2.1 terabytes of verse credits and so",
    "start": "883240",
    "end": "889570"
  },
  {
    "text": "you have plenty of room to do workloads even if your file system size is in the",
    "start": "889570",
    "end": "897280"
  },
  {
    "text": "gigabytes so some bursting model examples so if you have a hundred gigabyte file system that means you",
    "start": "897280",
    "end": "904600"
  },
  {
    "start": "899000",
    "end": "899000"
  },
  {
    "text": "could drive up to five megabytes per second continuously or burst up to a",
    "start": "904600",
    "end": "910720"
  },
  {
    "text": "hundred megabytes per second for 72 minutes each day if you have a one",
    "start": "910720",
    "end": "915880"
  },
  {
    "text": "terabyte file if you use one terabyte of storage on EFS you can drive up to 50",
    "start": "915880",
    "end": "921520"
  },
  {
    "text": "megabytes per second continuously or bursts up to a hundred megabytes per second for 12 hours a day if you go up",
    "start": "921520",
    "end": "928780"
  },
  {
    "text": "to 10 terabytes you can see that the performance number is increased by a factor of 10 from the one terabyte",
    "start": "928780",
    "end": "935929"
  },
  {
    "text": "numbers that we talked about so basically with 10 terabytes you could drive up to 500 megabytes per second",
    "start": "935929",
    "end": "941029"
  },
  {
    "text": "continuously or bursts up to one gigabyte per second for up to 12 hours a",
    "start": "941029",
    "end": "946429"
  },
  {
    "text": "day ok so where can you use EFS today EFS is available in Northern Virginia",
    "start": "946429",
    "end": "953839"
  },
  {
    "text": "which u.s. East one Ohio which is our new u.s. East 2 region our Northwest",
    "start": "953839",
    "end": "960649"
  },
  {
    "text": "region in Oregon us West 2 and then our Dublin Ireland region us West one and we",
    "start": "960649",
    "end": "965839"
  },
  {
    "text": "have more regions coming in the near future and so in addition to durability",
    "start": "965839",
    "end": "972559"
  },
  {
    "text": "performance availability pricing is also one of the main attractions with EFS but",
    "start": "972559",
    "end": "979669"
  },
  {
    "text": "the FS the pricing is very straightforward you pay per amount of storage use per month so in Northern",
    "start": "979669",
    "end": "987230"
  },
  {
    "text": "Virginia and Ohio an Oregon it's basically 30 cents per gigabyte per month and in Dublin it is 33 cents per",
    "start": "987230",
    "end": "994669"
  },
  {
    "text": "get per gigabyte per month and if you're new to EFS and you want to try it out we have a free tier which gives you five",
    "start": "994669",
    "end": "1000730"
  },
  {
    "text": "gigabytes per month for the first 12 months for free ok so with that and",
    "start": "1000730",
    "end": "1006549"
  },
  {
    "text": "without further ado I'd like to call up Austin and he's going to dive in to what Spokeo has been doing with EFS",
    "start": "1006549",
    "end": "1016048"
  },
  {
    "text": "Thank You Saachi um for those who don't know I am I'm Austan fancier I'm the",
    "start": "1019229",
    "end": "1025089"
  },
  {
    "text": "lead software architecture of Spokeo and blows my contact information in case you want to send me hate mail for those who",
    "start": "1025089",
    "end": "1032350"
  },
  {
    "text": "don't know who spoke EO what Spokeo is we are people search engine were based out in Pasadena California think Rose",
    "start": "1032350",
    "end": "1038740"
  },
  {
    "text": "Bowl Rose Parade that's where we're at currently we're hovering just over two hundred plus employees and to give you",
    "start": "1038740",
    "end": "1046899"
  },
  {
    "text": "context over why we use CFS the numbers are really important so we get around eighteen million unique visitors a month",
    "start": "1046899",
    "end": "1052289"
  },
  {
    "text": "we have over eight point five billion people records in our data storage and",
    "start": "1052289",
    "end": "1058169"
  },
  {
    "text": "when it comes to Google crawling we get around thirty million baht requests per 24-hour period so spoke of the product",
    "start": "1058169",
    "end": "1065799"
  },
  {
    "text": "is it's a people search engine as I was saying you can search for people by any intersection of data whether it be first",
    "start": "1065799",
    "end": "1071529"
  },
  {
    "text": "last name email phone etc so to get to your person record as quickly as",
    "start": "1071529",
    "end": "1077500"
  },
  {
    "text": "possible also on top of that we've got products designed to for people to be",
    "start": "1077500",
    "end": "1082870"
  },
  {
    "text": "able to search by email or username or by an address so again to get to your",
    "start": "1082870",
    "end": "1088210"
  },
  {
    "text": "person record as quickly as possible so this is what our tech stack looks like today so users come in through the ELB",
    "start": "1088210",
    "end": "1096580"
  },
  {
    "text": "they hit a Ruby on Rails cluster and it looks like a usual text stack where you got memcache instances you've got RDS",
    "start": "1096580",
    "end": "1104200"
  },
  {
    "text": "and then below that is a service we call it a data service server so the data service server is a JSON API that pulls",
    "start": "1104200",
    "end": "1110889"
  },
  {
    "text": "from below that elasticsearch some really big elastic search indexes and",
    "start": "1110889",
    "end": "1117460"
  },
  {
    "text": "then below that a really big dynamo DB cluster to house all our people data and",
    "start": "1117460",
    "end": "1122769"
  },
  {
    "text": "on top of that you know dad's service will hit third-party Services API looking for data to supplement so we",
    "start": "1122769",
    "end": "1131230"
  },
  {
    "text": "have better data on our website so if you pull up just a little bit you know",
    "start": "1131230",
    "end": "1137009"
  },
  {
    "text": "Spokeo just doesn't talk to one service it talks to multiple services so when",
    "start": "1137009",
    "end": "1143860"
  },
  {
    "text": "you have a request for certain pages the request isn't as simple as we make it",
    "start": "1143860",
    "end": "1150039"
  },
  {
    "text": "out to seen so this will be more pair as we go through the slides on top of that we are an Amazon customer so we",
    "start": "1150039",
    "end": "1155860"
  },
  {
    "text": "have lambda Kinesis etc throughout our tech stack littered everywhere so this",
    "start": "1155860",
    "end": "1161620"
  },
  {
    "text": "is why I'm here these these pages are SEO pages for this example it's dan smith we've got around three billion of",
    "start": "1161620",
    "end": "1168940"
  },
  {
    "text": "these SEO pages so that's around thirty seven point four terabytes of HTML and",
    "start": "1168940",
    "end": "1174160"
  },
  {
    "text": "then as I was saying before that's 30 million bot requests a day so how do we",
    "start": "1174160",
    "end": "1182530"
  },
  {
    "text": "serve these pages up as quickly as possible and that's the answer that's the question I'm gonna answer today so",
    "start": "1182530",
    "end": "1189430"
  },
  {
    "text": "these SEO pages were designed for crawlers to be able to parse our full",
    "start": "1189430",
    "end": "1196270"
  },
  {
    "text": "breadth and depth of data and also for the users to be able to filter down to their exact record that's looking for as",
    "start": "1196270",
    "end": "1203170"
  },
  {
    "text": "quickly as possible so why the importance of Page Speed for for these pages There is obviously a page speed",
    "start": "1203170",
    "end": "1213130"
  },
  {
    "text": "abandonment rate so if we take a little bit longer to serve a page people are going to go to our competitors looking",
    "start": "1213130",
    "end": "1218890"
  },
  {
    "text": "for that same data Google also utilizes Page Speed in their search rankings so",
    "start": "1218890",
    "end": "1224830"
  },
  {
    "text": "it's part of their metrics so this is quicker we serve up a page the better we are in our search rankings and then",
    "start": "1224830",
    "end": "1231940"
  },
  {
    "text": "studies show a direct correlation between page speed and conversion rate so if we serve up a page quicker the",
    "start": "1231940",
    "end": "1238990"
  },
  {
    "text": "better conversions we're going to get so back to the original question how are we",
    "start": "1238990",
    "end": "1244510"
  },
  {
    "text": "going to get faster at serving these pages one answer is we can tweak the",
    "start": "1244510",
    "end": "1250870"
  },
  {
    "text": "Ruby on Rails stack to serve up these pages quicker the problem with that is I've been with Spokeo for nearly 6 years",
    "start": "1250870",
    "end": "1256120"
  },
  {
    "text": "and I feel like I've tweaked the page to as fast as they're going to get and so that last 10% of performance gain is",
    "start": "1256120",
    "end": "1263980"
  },
  {
    "text": "really at the last 90% of effort and so it's just something that you know we didn't want to go down that route to",
    "start": "1263980",
    "end": "1269770"
  },
  {
    "text": "really scrape the bottom of the barrel another option we came up with is like hey why don't we switch away from Ruby",
    "start": "1269770",
    "end": "1277060"
  },
  {
    "text": "on Rails why don't we go with something a little more modern the issue with that is that really is it's a ton of effort",
    "start": "1277060",
    "end": "1284110"
  },
  {
    "text": "to really just dump your web framer can go something new because of that it's a ton of time for engineers",
    "start": "1284110",
    "end": "1289120"
  },
  {
    "text": "to learn the new web stack a ton of time to rewrite everything time equals money and then the more important part is its",
    "start": "1289120",
    "end": "1296409"
  },
  {
    "text": "unmeasurable unmeasurable performance gains so what I mean by that is that if we're switching away from Ruby on Rails",
    "start": "1296409",
    "end": "1302559"
  },
  {
    "text": "we would have to go down this rabbit hole pretty far to measure that",
    "start": "1302559",
    "end": "1307659"
  },
  {
    "text": "performance gains what we'd be getting and to sink a couple months into that project so we looked over to a reverse",
    "start": "1307659",
    "end": "1315070"
  },
  {
    "text": "proxy so for those who don't know what a reverse proxy is it's basically thin layer that's just on top of your web",
    "start": "1315070",
    "end": "1320110"
  },
  {
    "text": "stack that will cache and pull data on behalf of the end user and that seemed",
    "start": "1320110",
    "end": "1327370"
  },
  {
    "text": "most appealing for us because it was really a low amount of effort some code and header tweaks and immediately we can",
    "start": "1327370",
    "end": "1333580"
  },
  {
    "text": "tell you how much faster data was pulling out of the reverse proxy versus",
    "start": "1333580",
    "end": "1338770"
  },
  {
    "text": "our origin so we looked at the over-the-counter reverse proxies like",
    "start": "1338770",
    "end": "1344370"
  },
  {
    "text": "fastly Akamai etc they're all really fast they're all really easy some DNS",
    "start": "1344370",
    "end": "1350950"
  },
  {
    "text": "changes header changes and boom it's up there and on top of that they had a global delivery system so they had edge",
    "start": "1350950",
    "end": "1357940"
  },
  {
    "text": "nose where we wouldn't necessarily have our edge nodes the one big problem we",
    "start": "1357940",
    "end": "1363820"
  },
  {
    "text": "found with over-the-counter reverse proxies is the least recently used policy so for this example I have a",
    "start": "1363820",
    "end": "1370570"
  },
  {
    "text": "through G in my reverse proxy and below is my Spokeo web stack as I spoke about before and let's say for example I get a",
    "start": "1370570",
    "end": "1377740"
  },
  {
    "text": "ton of requests for object a object a is really warm in that cache C through G",
    "start": "1377740",
    "end": "1382780"
  },
  {
    "text": "mmm it's alright and then B it's cold because there's no request for B after a low amount of time B gets dropped off",
    "start": "1382780",
    "end": "1389650"
  },
  {
    "text": "the cache and let's say I get a request for H H isn't in that reverse proxy and",
    "start": "1389650",
    "end": "1395710"
  },
  {
    "text": "therefore we incur the penalty of going down to the origin for element H and the",
    "start": "1395710",
    "end": "1402820"
  },
  {
    "text": "problem with this LRU is that we lose the predictability we lose that predictability of knowing at what point",
    "start": "1402820",
    "end": "1409570"
  },
  {
    "text": "the 30 billion records how fast each record is going to return so we went",
    "start": "1409570",
    "end": "1416020"
  },
  {
    "text": "back to the drawing board and my CTO walks in through the door and says hey why don't we just serve Google a fast as possible page and it",
    "start": "1416020",
    "end": "1423540"
  },
  {
    "text": "leaves the room as CTOs do and Google really is our toughest critic so by",
    "start": "1423540",
    "end": "1429660"
  },
  {
    "text": "serving and pleasing Google first and foremost really gonna be pleasing our customers in the end so we went back to",
    "start": "1429660",
    "end": "1435960"
  },
  {
    "text": "the drawing board we said okay what do we want out of this cache we want it to be as fast as reasonably possible as we",
    "start": "1435960",
    "end": "1443100"
  },
  {
    "text": "always want our caches to be we want to be costly efficient I don't want to spend money up the wazoo for this I want",
    "start": "1443100",
    "end": "1449400"
  },
  {
    "text": "it to be scalable fault tolerant and I want it to be available like 99.99% of",
    "start": "1449400",
    "end": "1456360"
  },
  {
    "text": "the time so one quick you know answer we came up with hey why don't we store it",
    "start": "1456360",
    "end": "1461700"
  },
  {
    "text": "in in our web stack cache but the issue is that there's an inherent penalty of",
    "start": "1461700",
    "end": "1467070"
  },
  {
    "text": "going through that web stack to begin with and we Herald back to our CTO and said like hey we are really not serving",
    "start": "1467070",
    "end": "1472920"
  },
  {
    "text": "Google fast as possible possible page and so we threw it out the window so we came up with a two-part project",
    "start": "1472920",
    "end": "1480600"
  },
  {
    "text": "and I want to go over the reverse proxy first and I want to go over the backend where are we storing this thirty seven",
    "start": "1480600",
    "end": "1486690"
  },
  {
    "text": "point four terabytes how are we serving it as fast as possible so this is our proposed topology so end-users will come",
    "start": "1486690",
    "end": "1493350"
  },
  {
    "text": "in they will initially hit the reverse proxy first first proxy will talk to some sort of back-end that we jumped",
    "start": "1493350",
    "end": "1499800"
  },
  {
    "text": "about and then also if the data doesn't exist the reverse proxy will hit our",
    "start": "1499800",
    "end": "1505260"
  },
  {
    "text": "origin or app servers so when we were looking for reverse proxies we looked at",
    "start": "1505260",
    "end": "1511740"
  },
  {
    "text": "the open source reverse proxies out there the heavy hitters and do next apache traffic server varnish so all of",
    "start": "1511740",
    "end": "1519150"
  },
  {
    "text": "them have a problem of having in memory mapping of keys and values when we looked at them so if you're trying to",
    "start": "1519150",
    "end": "1525059"
  },
  {
    "text": "store for our instances 30 billion records in memory we're carrying around 30 billion keys and values around in",
    "start": "1525059",
    "end": "1531540"
  },
  {
    "text": "memory and that you know wasn't scalable for us nginx and varnish were also at",
    "start": "1531540",
    "end": "1537510"
  },
  {
    "text": "the enterprise level really expensive and Apache traffic server doesn't notify",
    "start": "1537510",
    "end": "1542670"
  },
  {
    "text": "other nodes of Rights at least at the time we were looking at it so for example if I have to Apache traffic server nodes and all the traffic is",
    "start": "1542670",
    "end": "1549720"
  },
  {
    "text": "routing through node a and all this data is coming to the back end node B has no idea all that data is",
    "start": "1549720",
    "end": "1557430"
  },
  {
    "text": "there and so we would have to figure out some sort of way of cloning Apache traffic servers around it just seem like",
    "start": "1557430",
    "end": "1563040"
  },
  {
    "text": "a big mess and all the code bases are huge because obviously these reverse",
    "start": "1563040",
    "end": "1568410"
  },
  {
    "text": "proxies serve other purposes other than being a reverse proxy so all of them",
    "start": "1568410",
    "end": "1574980"
  },
  {
    "start": "1571000",
    "end": "1571000"
  },
  {
    "text": "have bloated lines of code most of them are really expensive and the worst part",
    "start": "1574980",
    "end": "1580230"
  },
  {
    "text": "was that in-memory key mapping values of of all that keys and values so as US",
    "start": "1580230",
    "end": "1590640"
  },
  {
    "text": "engineers do we decide to write our own we called it mask cache so mask cache and I'll quickly glance over this now we",
    "start": "1590640",
    "end": "1596550"
  },
  {
    "text": "have in-house expert knowledge of exactly what the first proxy is doing rather than bringing in an engine X",
    "start": "1596550",
    "end": "1601860"
  },
  {
    "text": "expert or Apache traffic server expert etc and it's in the end it's a very simple use case which I'll talk about in",
    "start": "1601860",
    "end": "1608730"
  },
  {
    "text": "a second and it's inexpensive to run it's as thin nodejs application and best",
    "start": "1608730",
    "end": "1614430"
  },
  {
    "text": "of all there's no in memory key mapping values so this is what mask cache looks",
    "start": "1614430",
    "end": "1619890"
  },
  {
    "text": "like in its barest form you request for a page do we have the cached data if so",
    "start": "1619890",
    "end": "1625140"
  },
  {
    "text": "return it if not fetch the content from origin and at the same time return the",
    "start": "1625140",
    "end": "1630630"
  },
  {
    "text": "data from origin hash that request query so let's go back to our example of Dan Smith we hashed it we come up with a key",
    "start": "1630630",
    "end": "1637380"
  },
  {
    "text": "and then we store that HTML in our storage engine under that key so when",
    "start": "1637380",
    "end": "1644070"
  },
  {
    "text": "every time we have a request for Dan Smith we know exactly where that HTML is going to be so we solved that problem",
    "start": "1644070",
    "end": "1650730"
  },
  {
    "text": "and we turned our eyes to where the back end we still have that problem I'm storing 37.4 terabytes of HTML and we",
    "start": "1650730",
    "end": "1657990"
  },
  {
    "text": "wanted to be served as quickly as possible how are we going to do that we looked at a bunch of backends so first we looked",
    "start": "1657990",
    "end": "1665400"
  },
  {
    "text": "at s3 cloud front and because we're scraping for milliseconds we saw a",
    "start": "1665400",
    "end": "1670980"
  },
  {
    "text": "discrepancy in time meaning if cloud front where it was in the edge node and if it was warm in the",
    "start": "1670980",
    "end": "1677280"
  },
  {
    "text": "edge node or not we'd saw really fast or not so fast then we looked at DynamoDB",
    "start": "1677280",
    "end": "1683400"
  },
  {
    "text": "dinamo was actually in our budget and it was really quick it's just we question whether or not we want to be",
    "start": "1683400",
    "end": "1690159"
  },
  {
    "text": "moving around a database of that size to a bunch of you know mask cache nodes",
    "start": "1690159",
    "end": "1695700"
  },
  {
    "text": "then we looked at ElastiCache ElastiCache obviously that size is really expensive but really fast and for",
    "start": "1695700",
    "end": "1703029"
  },
  {
    "text": "us wasn't data persistence so if one of our ElastiCache nodes went down we were not exactly super confident we could get",
    "start": "1703029",
    "end": "1709299"
  },
  {
    "text": "our data back up then we looked at EDS the problem with EBS is that there's you",
    "start": "1709299",
    "end": "1715450"
  },
  {
    "text": "can only mount one EBS volume to ec2 instance so if we have 20 mass cache",
    "start": "1715450",
    "end": "1721479"
  },
  {
    "text": "instances we'd have to find some sort of way of cloning around EBS volumes and mounting them to each ec2 instance and",
    "start": "1721479",
    "end": "1728279"
  },
  {
    "text": "then Amazon approached us and asked us like hey we have this preview coming out",
    "start": "1728279",
    "end": "1733299"
  },
  {
    "text": "for this new product called EFS and it may fit your bill we looked at the cost and the cost was very appealing the",
    "start": "1733299",
    "end": "1740320"
  },
  {
    "text": "performance was spot-on and let's talk about that so performance and these are",
    "start": "1740320",
    "end": "1747729"
  },
  {
    "text": "effective performance numbers 17:4 reads 34 writes and these are max i/o in the",
    "start": "1747729",
    "end": "1754359"
  },
  {
    "text": "middle of the preview mode like end of July sometime and writes their effective",
    "start": "1754359",
    "end": "1760149"
  },
  {
    "text": "writes so for us there were no js' opens writes closes reads their file descripting etc so I've been assured by",
    "start": "1760149",
    "end": "1768609"
  },
  {
    "text": "Amazon that the actual performance of EFS is a lot better than this but this is the numbers that my project managers",
    "start": "1768609",
    "end": "1775029"
  },
  {
    "text": "were more interested in and srg was mentioning before there's built-in data",
    "start": "1775029",
    "end": "1780519"
  },
  {
    "text": "redundancy there's nothing we had to do to make sure that our 37.4 terabytes were redundant everywhere it just",
    "start": "1780519",
    "end": "1787989"
  },
  {
    "text": "handled that for us and it was built and scalable there's I didn't have to worry about I ops I didn't have to worry about",
    "start": "1787989",
    "end": "1793599"
  },
  {
    "text": "provisioning Amazon literally handled everything for me and I thought she was",
    "start": "1793599",
    "end": "1799629"
  },
  {
    "text": "mentioned before costs are based off of the amount of storage your story and EFS if I got 10 20 40 X amount of traffic",
    "start": "1799629",
    "end": "1807639"
  },
  {
    "text": "tomorrow my EFS costs are static and that value proposition for us was",
    "start": "1807639",
    "end": "1813279"
  },
  {
    "text": "extremely appealing so this is what our tech stack looks like today people come in through an ELB",
    "start": "1813279",
    "end": "1820539"
  },
  {
    "text": "ELB they hit a mass cache cluster mass cache closer talks to EFS as our storage",
    "start": "1820539",
    "end": "1826029"
  },
  {
    "text": "engine and if we don't have that data we trickle down to our app servers to generate that HTML and I get to ask this",
    "start": "1826029",
    "end": "1834970"
  },
  {
    "text": "all the time how do we populate that 37.4 terabytes answer we actively did it we tried to",
    "start": "1834970",
    "end": "1840429"
  },
  {
    "text": "actually populate as fast as possible and asaji was mentioning before EFS really doesn't shy away from bursts so",
    "start": "1840429",
    "end": "1846639"
  },
  {
    "text": "we were bursting 250,000 requests per second let that sink in that's really",
    "start": "1846639",
    "end": "1851860"
  },
  {
    "text": "fast so by that nature we were able to populate 3 billion records in about one",
    "start": "1851860",
    "end": "1859720"
  },
  {
    "text": "week and updating that cache is really simple for us we sent in a simple header",
    "start": "1859720",
    "end": "1864970"
  },
  {
    "text": "and then updated one lesson we learned by going through this process was if",
    "start": "1864970",
    "end": "1872409"
  },
  {
    "text": "you're throwing 250,000 requests at your own web stack you're basically ddossing your own web stack and so we learned the",
    "start": "1872409",
    "end": "1880240"
  },
  {
    "text": "important lesson of dynamic throttling so our dynamic throttling was based off",
    "start": "1880240",
    "end": "1886120"
  },
  {
    "text": "of key metrics in our web stack whether that be apt decks performing scores",
    "start": "1886120",
    "end": "1891149"
  },
  {
    "text": "response times coming out of certain services or database load times so",
    "start": "1891149",
    "end": "1897519"
  },
  {
    "text": "that's very important lesson to learn so what are the benefits of living with this infrastructure for about a year",
    "start": "1897519",
    "end": "1903929"
  },
  {
    "text": "cost a server cache page is significantly significantly less that",
    "start": "1903929",
    "end": "1909399"
  },
  {
    "text": "cost of serving a page from origin because our EFS costs are standard mask",
    "start": "1909399",
    "end": "1917529"
  },
  {
    "text": "cache is simply a simple nodejs that spins up on the t2 micro and it's",
    "start": "1917529",
    "end": "1922899"
  },
  {
    "text": "horizontally scalable horizontally scale well let's go over these numbers again I've been saying them over and over each",
    "start": "1922899",
    "end": "1928600"
  },
  {
    "text": "more all the time but thirty seven point four terabytes three billion files and then around thirty million requests per",
    "start": "1928600",
    "end": "1934809"
  },
  {
    "text": "day that's the definition of hopefully horizontally scalable and now actively warming actively populating EFS really",
    "start": "1934809",
    "end": "1941590"
  },
  {
    "text": "taught us about the bottlenecks in our web stack if you're throwing 250,000 requests at your web stack you're gonna",
    "start": "1941590",
    "end": "1947139"
  },
  {
    "text": "learn about the bottlenecks in URI to be able to correct them as you go around EFS",
    "start": "1947139",
    "end": "1953409"
  },
  {
    "text": "gave us something that I didn't think we would ever get but offered us a lot of",
    "start": "1953409",
    "end": "1959889"
  },
  {
    "text": "site redundancy and DDoS protection from outside my job is to hound google",
    "start": "1959889",
    "end": "1968830"
  },
  {
    "text": "webmaster tools to figure out why is are we serving Google slower pages why are",
    "start": "1968830",
    "end": "1975429"
  },
  {
    "text": "we serving Google faster pages I'm hounding the engineers 4 + 10 - 10",
    "start": "1975429",
    "end": "1981580"
  },
  {
    "text": "milliseconds but now with this the predictability of how we serve Google",
    "start": "1981580",
    "end": "1986649"
  },
  {
    "text": "it's there and so Google Webmaster Tools is flat as far as as returning average",
    "start": "1986649",
    "end": "1992350"
  },
  {
    "text": "response time goes so you guys remember years ago when the cloud was the thing",
    "start": "1992350",
    "end": "1999159"
  },
  {
    "text": "and we were promised like infinite servers in the cloud this feels like the",
    "start": "1999159",
    "end": "2005429"
  },
  {
    "text": "cloud for us and after hearing a lot of talks about serverless architecture this",
    "start": "2005429",
    "end": "2011759"
  },
  {
    "text": "feels like that already so EFS to us feels like an infinitely scalable resources I don't have to do anything to",
    "start": "2011759",
    "end": "2019590"
  },
  {
    "text": "get it to scale it just scales for me it's fast and what I mean by fast I mean",
    "start": "2019590",
    "end": "2025139"
  },
  {
    "text": "my CTO is happy which means it's fast it's easy I asaji you sauce ology before you just",
    "start": "2025139",
    "end": "2032759"
  },
  {
    "text": "mount the EFS drive and then that's it it's inexpensive you only paying for the",
    "start": "2032759",
    "end": "2040259"
  },
  {
    "text": "storage you use you're not paying for all this traffic for getting its data redundant I'm not worrying about where",
    "start": "2040259",
    "end": "2047370"
  },
  {
    "text": "that data is or how it's stored I don't lose sleep over it it really was for our",
    "start": "2047370",
    "end": "2054240"
  },
  {
    "text": "problem set the Goldilocks solution for us so here are a little some minor",
    "start": "2054240",
    "end": "2061560"
  },
  {
    "text": "lessons we've learned over the year rights they're slightly slower than",
    "start": "2061560",
    "end": "2067290"
  },
  {
    "text": "reads so if you're trying to calculate to the second coin you're gonna be done",
    "start": "2067290",
    "end": "2073200"
  },
  {
    "text": "warming the three billion pages that's really important to learn writing a file is slightly slower than updating a file",
    "start": "2073200",
    "end": "2079500"
  },
  {
    "text": "so we were wondering when we were repopulating EFS why was it taking a little bit longer we found out or",
    "start": "2079500",
    "end": "2086970"
  },
  {
    "text": "writing to a new EFS cluster why was it taking a little bit longer now we know",
    "start": "2086970",
    "end": "2093030"
  },
  {
    "text": "improvements have been made since the preview instance such as NFS 4.1 which",
    "start": "2093030",
    "end": "2098290"
  },
  {
    "text": "is really important for doing these things at scale and I have all the",
    "start": "2098290",
    "end": "2104020"
  },
  {
    "text": "reason to believe that Amazon will keep updating and improving on EFS any access",
    "start": "2104020",
    "end": "2110860"
  },
  {
    "text": "to EFS call looks like a file call but in essence is a network call and I think that's a really important lesson to",
    "start": "2110860",
    "end": "2116110"
  },
  {
    "text": "learn so the prime example was we had an instance where we were trying to read a",
    "start": "2116110",
    "end": "2122020"
  },
  {
    "text": "file and serve it to our customer as fast as possible but we were statting",
    "start": "2122020",
    "end": "2127330"
  },
  {
    "text": "the file just describing the file opening it reading it one of our",
    "start": "2127330",
    "end": "2133150"
  },
  {
    "text": "engineers looked at that code and said like hey why are we doing all that and cut out all the cruft and when that code went out we were 2x",
    "start": "2133150",
    "end": "2141100"
  },
  {
    "text": "faster at serving up these files so if you're like me and we scrape for milliseconds of performance that's",
    "start": "2141100",
    "end": "2147400"
  },
  {
    "text": "really important listen to learn asaji was mentioning before but general",
    "start": "2147400",
    "end": "2152650"
  },
  {
    "text": "purpose isn't Mac's i/o and it's a very important distinction to learn and so if you're looking for EFS and your stack",
    "start": "2152650",
    "end": "2160450"
  },
  {
    "text": "really look at the documentation look at those metrics that cloud watch offers and determine which is for you",
    "start": "2160450",
    "end": "2170940"
  },
  {
    "text": "EFS offers us availability that instability like I haven't seen before",
    "start": "2172740",
    "end": "2178440"
  },
  {
    "text": "so there have been instances where key",
    "start": "2178440",
    "end": "2183770"
  },
  {
    "text": "services would go down on a web stack but we were still serving up these pages because EFS was always there and mask",
    "start": "2183770",
    "end": "2190859"
  },
  {
    "text": "caches a thin nodejs application does really it was really nice to have so one",
    "start": "2190859",
    "end": "2203339"
  },
  {
    "start": "2199000",
    "end": "2199000"
  },
  {
    "text": "last important lesson we learned was way back when this is very indicative of",
    "start": "2203339",
    "end": "2209670"
  },
  {
    "text": "Google crawling patterns for us they'd go from zero to millions of requests in",
    "start": "2209670",
    "end": "2214880"
  },
  {
    "text": "no notice at all and so our web stack before would crumble underneath that",
    "start": "2214880",
    "end": "2222510"
  },
  {
    "text": "that traffic of Google so we would meet the next morning we decided okay let's",
    "start": "2222510",
    "end": "2227640"
  },
  {
    "text": "2x provision our service to meet Google's need and every time we think we'd hit peak Google Google would just",
    "start": "2227640",
    "end": "2234390"
  },
  {
    "text": "keep throwing more traffic at us and so we had over provision over provision over provision and the problem with that is we're paying for all these servers",
    "start": "2234390",
    "end": "2240990"
  },
  {
    "text": "that were not using 99.9 percent of the time but now with mass cache and EFS",
    "start": "2240990",
    "end": "2249300"
  },
  {
    "text": "we're able to serve Google up these pages because EFS just sort of scales for us and we don't have to worry about",
    "start": "2249300",
    "end": "2255300"
  },
  {
    "text": "that and scaling out a node.js application that's really simple we've all done it",
    "start": "2255300",
    "end": "2262820"
  },
  {
    "start": "2262000",
    "end": "2262000"
  },
  {
    "text": "these are the related sessions and I've attended most of them already and they're all really good and so what I've",
    "start": "2263240",
    "end": "2270359"
  },
  {
    "text": "noticed that they most of these sessions offer a different perspective on EFS so",
    "start": "2270359",
    "end": "2275580"
  },
  {
    "text": "they have unique problems that they solved with EFS and they'll offer up another perspective on it and it's",
    "start": "2275580",
    "end": "2282450"
  },
  {
    "text": "they're all really really good and I promise my CT I say this but we are",
    "start": "2282450",
    "end": "2287820"
  },
  {
    "text": "hiring so there you go there you go Mike [Music]",
    "start": "2287820",
    "end": "2293810"
  },
  {
    "text": "and yeah evaluations any questions",
    "start": "2293810",
    "end": "2299720"
  }
]