[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "hello everyone welcome to dev 327 beyond",
    "start": "60",
    "end": "5190"
  },
  {
    "text": "basics advanced infrastructure as code programming on AWS this is Lewis :",
    "start": "5190",
    "end": "11759"
  },
  {
    "text": "he is one of the senior dev advocates for AWS CloudFormation and I'm Chuck Meyer I'm the other dead advocate senior",
    "start": "11759",
    "end": "18600"
  },
  {
    "text": "demo code for a Tobias CloudFormation welcome I think we might be the last thing standing between you and the",
    "start": "18600",
    "end": "25220"
  },
  {
    "text": "replay party tonight um so we'll try and keep back in other people hang in there",
    "start": "25220",
    "end": "30330"
  },
  {
    "text": "yeah yeah so well will we will you know we're gonna take the whole time please",
    "start": "30330",
    "end": "36300"
  },
  {
    "text": "make sure you eat something too right stay hydrated all that good stuff we're almost done with the week but we're not",
    "start": "36300",
    "end": "42540"
  },
  {
    "start": "37000",
    "end": "115000"
  },
  {
    "text": "quite so what are we talking about today today we're going to be talking about",
    "start": "42540",
    "end": "48180"
  },
  {
    "text": "ways to extend CloudFormation ways to sort of inject additional programmatic",
    "start": "48180",
    "end": "54629"
  },
  {
    "text": "aspects into it we're going to be talking a lot about sort of comparing",
    "start": "54629",
    "end": "60949"
  },
  {
    "text": "mechanisms that extend the intrinsic declarative nature of cloud formation and ways that extend by layering on",
    "start": "60949",
    "end": "68700"
  },
  {
    "text": "imperative on top so we're gonna be talking a lot about sort of the differences between declarative an imperative coding styles but within the",
    "start": "68700",
    "end": "76860"
  },
  {
    "text": "context of infrastructure code and specifically within the context of cloud formation okay once we've gone through",
    "start": "76860",
    "end": "84150"
  },
  {
    "text": "that kind of level set everybody I'm gonna start drilling into a few examples of a relatively new cloud formation",
    "start": "84150",
    "end": "91380"
  },
  {
    "text": "feature called macros and we're going to look at some specific examples of that and using that as a mechanism to sort of",
    "start": "91380",
    "end": "98130"
  },
  {
    "text": "extend beyond basic Yambol and json and then i'm gonna hand off to Lewis and Lewis is going to start talking a little",
    "start": "98130",
    "end": "104700"
  },
  {
    "text": "bit more about layering imperative on top of cloud formation and some sort of cool things that you can do they're",
    "start": "104700",
    "end": "109950"
  },
  {
    "text": "using some old familiar tools and some newer stuff that's coming out as well okay so that's sort of the basic agenda",
    "start": "109950",
    "end": "117390"
  },
  {
    "start": "115000",
    "end": "159000"
  },
  {
    "text": "for this this talk I'm gonna start here with the basics though and just a heads",
    "start": "117390",
    "end": "124110"
  },
  {
    "text": "up I guess so who here is a cloud formation user we'll start there right",
    "start": "124110",
    "end": "129950"
  },
  {
    "text": "existing Confirmation users who's here to learn more about infrastructures collision okay",
    "start": "129950",
    "end": "134999"
  },
  {
    "text": "fair enough for those that use CloudFormation who are the the folks",
    "start": "134999",
    "end": "140700"
  },
  {
    "text": "that are just writing JSON yeah Mille okay and who are blaring other tools on",
    "start": "140700",
    "end": "147659"
  },
  {
    "text": "top of that at this point already okay so some there's some folks here that are already sort of down that journey well",
    "start": "147659",
    "end": "153450"
  },
  {
    "text": "we're going to be doing some comparing and contrasting along the way and there might be some new ideas here there's definitely some new tools okay but just",
    "start": "153450",
    "end": "160109"
  },
  {
    "start": "159000",
    "end": "211000"
  },
  {
    "text": "a level set for everyone because we do have kind of every range just a little bit about the difference between",
    "start": "160109",
    "end": "165480"
  },
  {
    "text": "declarative and imperative so declarative programming is describing the end state that you want these are",
    "start": "165480",
    "end": "173099"
  },
  {
    "text": "the things I want and then sort of letting the tool or the code figure out how to get there right so I want this",
    "start": "173099",
    "end": "181230"
  },
  {
    "text": "thing I need these particular properties of that thing and I need to make sure",
    "start": "181230",
    "end": "186870"
  },
  {
    "text": "that it happens in sort of a nice item potent way all of that stuff you don't really worry about it you kind of let",
    "start": "186870",
    "end": "192030"
  },
  {
    "text": "the tools do it for you and this is sort of a mode that comes from the bold tradition of configuration management",
    "start": "192030",
    "end": "198389"
  },
  {
    "text": "tools right this is something that you often see with things like a chef recipe",
    "start": "198389",
    "end": "203639"
  },
  {
    "text": "or an ansible play and it's also something that we will talk about a lot",
    "start": "203639",
    "end": "209579"
  },
  {
    "text": "with cloud formation as well now the kind of the opposition to a declarative",
    "start": "209579",
    "end": "214799"
  },
  {
    "start": "211000",
    "end": "321000"
  },
  {
    "text": "model would be more of an imperative model where you're sort of more focused on the verbs the actions these are the",
    "start": "214799",
    "end": "220049"
  },
  {
    "text": "things that I want to do right and this is more familiar for folks that program in your touring complete languages",
    "start": "220049",
    "end": "226560"
  },
  {
    "text": "you're sort of higher-level languages writing applications things like that so why would you want one mode of or",
    "start": "226560",
    "end": "233699"
  },
  {
    "text": "another all declarative because you're describing what you want and you don't really have to think as much about how",
    "start": "233699",
    "end": "239310"
  },
  {
    "text": "to get there it tends to be a little bit easier to sort of jump in too often you",
    "start": "239310",
    "end": "244409"
  },
  {
    "text": "don't really have to understand those idiosyncrasies a lot of sort of the error checking and stuff you're hoping",
    "start": "244409",
    "end": "249719"
  },
  {
    "text": "that the tool will take care of on your behalf but you lose some of the things",
    "start": "249719",
    "end": "254729"
  },
  {
    "text": "that you think of when you think about code declarative doesn't tend to loop it tends to be specific in what you are",
    "start": "254729",
    "end": "263190"
  },
  {
    "text": "describing so in a lot of cases you wouldn't necessarily be saying you know I this",
    "start": "263190",
    "end": "270569"
  },
  {
    "text": "thing X number of times or whatever but the flip side of that means that you're wearing out your control senior control",
    "start": "270569",
    "end": "277169"
  },
  {
    "text": "V on your keyboard as you kind of dump the same thing in over and over again now imperative is really comfortable for",
    "start": "277169",
    "end": "283919"
  },
  {
    "text": "folks that have been doing it for a long time if you're a developer you know this is kind of where you live but if you're",
    "start": "283919",
    "end": "291180"
  },
  {
    "text": "not it can be a little daunting to kind of come into and learn all of the idiosyncrasies and nuances of sort of",
    "start": "291180",
    "end": "297419"
  },
  {
    "text": "doing imperative programming so there's an expectation that you are comfortable in that language and by getting that you",
    "start": "297419",
    "end": "304889"
  },
  {
    "text": "get all the flexibility of that language right whether it's inheritance and are object-oriented or you know global",
    "start": "304889",
    "end": "312300"
  },
  {
    "text": "variables or libraries you know complex and logical operators all of that stuff",
    "start": "312300",
    "end": "318539"
  },
  {
    "text": "comes out of an imperative model okay so what is cloud formation right cloud",
    "start": "318539",
    "end": "325229"
  },
  {
    "start": "321000",
    "end": "396000"
  },
  {
    "text": "formation is in its roots and its bones tied to a declarative model 7 plus years",
    "start": "325229",
    "end": "332490"
  },
  {
    "text": "ago when it was first designed the intention was you describe your infrastructure in a flat file in JSON at",
    "start": "332490",
    "end": "340919"
  },
  {
    "text": "the time and now more more commonly in yamo you describe exactly what you want",
    "start": "340919",
    "end": "347639"
  },
  {
    "text": "and we're not really telling confirmation how to get there we're not even necessarily telling",
    "start": "347639",
    "end": "353370"
  },
  {
    "text": "confirmation the exact order of things we're kind of going to allow CloudFormation to handle that for us to",
    "start": "353370",
    "end": "359069"
  },
  {
    "text": "understand when their interdependencies between resources we layer that and if we need to but for the most part",
    "start": "359069",
    "end": "364949"
  },
  {
    "text": "CloudFormation sort of understands that and takes care of it for us which is pretty cool right so we've got a little",
    "start": "364949",
    "end": "370860"
  },
  {
    "text": "template here talking about our auto scaling group and we tell it that our desired capacity for sauce scaling group",
    "start": "370860",
    "end": "377250"
  },
  {
    "text": "is 4 and CloudFormation knows what it needs to do to go and call the appropriate guys to provision that on a",
    "start": "377250",
    "end": "382380"
  },
  {
    "text": "scaling group and we tell cloud formation up actually I changed my mind I want that to be 6 and CloudFormation",
    "start": "382380",
    "end": "387419"
  },
  {
    "text": "can go and it can evaluate sort of the space it's in and sort of do the right thing from an API perspective there to",
    "start": "387419",
    "end": "393000"
  },
  {
    "text": "get you where you need to be there is a little bit of sort of",
    "start": "393000",
    "end": "398610"
  },
  {
    "start": "396000",
    "end": "457000"
  },
  {
    "text": "imperative capability that's been layered into cloud formation through the year sort of the oldest example of this",
    "start": "398610",
    "end": "404250"
  },
  {
    "text": "is user data right so ec2 instances allow you to inject in imperative code",
    "start": "404250",
    "end": "410520"
  },
  {
    "text": "to run on those instances and cloud formation supports this a cloud formation you can actually write scripts",
    "start": "410520",
    "end": "416970"
  },
  {
    "text": "you can write sort of imperative shell scripts or you know Python or what have you and that will execute within the",
    "start": "416970",
    "end": "423360"
  },
  {
    "text": "context of the ec2 instance and we also have Laird in these things called intrinsic functions which allow you to",
    "start": "423360",
    "end": "429510"
  },
  {
    "text": "sort of do some specialized coding type things within your template itself and this includes some logic operators so",
    "start": "429510",
    "end": "436500"
  },
  {
    "text": "there's a concept of conditionals and you can do boolean s-- using RF and if",
    "start": "436500",
    "end": "442400"
  },
  {
    "text": "inherent function so you can kind of learn a little bit of this but it's definitely not by any stretch of the",
    "start": "442400",
    "end": "448530"
  },
  {
    "text": "imagination complete language or something that you would you know write an executable program in it's kind of",
    "start": "448530",
    "end": "454950"
  },
  {
    "text": "just enough to get by so there's opportunities here to sort of take",
    "start": "454950",
    "end": "460200"
  },
  {
    "start": "457000",
    "end": "768000"
  },
  {
    "text": "CloudFormation and expand on top of what's inherently natively available in your json and yellow files by layering",
    "start": "460200",
    "end": "467310"
  },
  {
    "text": "in sort of these additional tools some of them are ours some of them are coming from third parties and they kind of fall",
    "start": "467310",
    "end": "474120"
  },
  {
    "text": "into two categories categories where the functional code component is still",
    "start": "474120",
    "end": "480300"
  },
  {
    "text": "hidden behind the declarative nature of CloudFormation and then tools where",
    "start": "480300",
    "end": "485550"
  },
  {
    "text": "you're sort of wrapping that declarative code in something a larger sort of imperative language maybe you're even",
    "start": "485550",
    "end": "492150"
  },
  {
    "text": "generating that code from that imperative language and so we're gonna kind of talk about both sides of the equation here I'm so declarative",
    "start": "492150",
    "end": "499500"
  },
  {
    "text": "obviously what falls in that category is that basic JSON and yamo that we've been talking about and another feature that's",
    "start": "499500",
    "end": "505920"
  },
  {
    "text": "sort of newer to CloudFormation is this concept of a transform right so transform is an opportunity for clock",
    "start": "505920",
    "end": "512789"
  },
  {
    "text": "formation to execute some code behind the scenes in a lambda function that",
    "start": "512790",
    "end": "518219"
  },
  {
    "text": "manipulates that flat file JSON or animal that you're submitting in some sort of way and when we first",
    "start": "518220",
    "end": "527050"
  },
  {
    "text": "launched that capability we didn't really give you access to it we sort of wrote our own and we released - to start",
    "start": "527050",
    "end": "533470"
  },
  {
    "text": "with the include transform which allows you to kind of pull in another piece of JSON or ML inject it into your template",
    "start": "533470",
    "end": "539440"
  },
  {
    "text": "and the Sam service application model which is a nice abstraction for folks",
    "start": "539440",
    "end": "544720"
  },
  {
    "text": "that are doing service development rather than kind of writing a lot of the the connective tissue code that you need",
    "start": "544720",
    "end": "550840"
  },
  {
    "text": "to sort of associate a bunch of things together Sam can kind of take care of that and abstract it for you now more",
    "start": "550840",
    "end": "556120"
  },
  {
    "text": "recently we've allowed you to sort of write your own transforms we call that macros it's the exact same piece of",
    "start": "556120",
    "end": "563470"
  },
  {
    "text": "technology under the covers as Sam or includes and macros allow you to do the",
    "start": "563470",
    "end": "568690"
  },
  {
    "text": "same thing some of these sort of more functional programming mechanisms with iteration and conditionals and all of",
    "start": "568690",
    "end": "575680"
  },
  {
    "text": "that stuff you can actually kind of run under the covers and a lambda function to manipulate your template generate a",
    "start": "575680",
    "end": "582040"
  },
  {
    "text": "new one generate a change set that you can then submit instead of that initial template and",
    "start": "582040",
    "end": "588490"
  },
  {
    "text": "there are lots of kind of reasons to do this we're going to look at several examples and kind of maybe get some",
    "start": "588490",
    "end": "594670"
  },
  {
    "text": "ideas about things that you might want to either steal from these examples or you know go and write your own kind of",
    "start": "594670",
    "end": "600430"
  },
  {
    "text": "based on them now all when I get to the macros part all those examples they're going to be available and they will they",
    "start": "600430",
    "end": "605590"
  },
  {
    "text": "are available in github and we'll make sure that you have access to them again if you want to steal or if you want to",
    "start": "605590",
    "end": "610900"
  },
  {
    "text": "just look at and kind of think about and then sort of the granddaddy of all of this stuff is taking a cloud formation",
    "start": "610900",
    "end": "617620"
  },
  {
    "text": "template and then layering another template anguish on top of it templating your template this was often done with",
    "start": "617620",
    "end": "623860"
  },
  {
    "text": "mustache in the past I have done it with Jinja to basically passing it to something like danceable that can then",
    "start": "623860",
    "end": "630630"
  },
  {
    "text": "extract out the that templating component do whatever it needs to do and",
    "start": "630630",
    "end": "636100"
  },
  {
    "text": "then leave you with a flat confirmation template that then can be passed to the service now on the imperative side",
    "start": "636100",
    "end": "643560"
  },
  {
    "text": "there's a lot of stuff that's been around for a while any troposphere users here okay we've",
    "start": "643560",
    "end": "650500"
  },
  {
    "text": "got a few troposphere users troposphere is a DSL for pi right it's a language binding that",
    "start": "650500",
    "end": "657690"
  },
  {
    "text": "essentially allows you to write sort of pythonic code that is one-for-one mapped",
    "start": "657690",
    "end": "663090"
  },
  {
    "text": "to sort of the resource model of Confirmation so that you're just writing Python and then at the end of the day",
    "start": "663090",
    "end": "668790"
  },
  {
    "text": "you execute that and it generates the CloudFormation template under the covers for you similar things are available in",
    "start": "668790",
    "end": "674730"
  },
  {
    "text": "other languages sparkle formation is a popular one for Ruby to have any sparkle formation users here okay and then some",
    "start": "674730",
    "end": "682920"
  },
  {
    "text": "AWS team members actually wrote language binding for go line called go formation",
    "start": "682920",
    "end": "687930"
  },
  {
    "text": "and it goes on and on these things have kind of been around for a while the things about like things like troposphere and sparkle formation that",
    "start": "687930",
    "end": "694200"
  },
  {
    "text": "impressed me is the length of time that they've been around they've got really strong communities behind them and very",
    "start": "694200",
    "end": "700920"
  },
  {
    "text": "dedicated people sort of at the tops they're both open source but at the tops of those repos that make them sort of",
    "start": "700920",
    "end": "706980"
  },
  {
    "text": "ready for enterprise use in a way that maybe some of the newer ones you know you might want to give them a little bit",
    "start": "706980",
    "end": "712200"
  },
  {
    "text": "more time to settle down the newest player in this space is very different this is the cloud development kit and",
    "start": "712200",
    "end": "719040"
  },
  {
    "text": "this was actually written by our colleagues and the SDK team so they're the folks that bring you the CLI and a",
    "start": "719040",
    "end": "725820"
  },
  {
    "text": "lot of the API is an SDK is like Votto and all of that stuff this is a tool that they've written that is kind of",
    "start": "725820",
    "end": "733280"
  },
  {
    "text": "much larger than just a straight-up DSL it has a lot more ambition as far as what it can do to accelerate programmers",
    "start": "733280",
    "end": "740430"
  },
  {
    "text": "ability to write imperative code that generates cloud formation behind the scenes at least is going to talk about",
    "start": "740430",
    "end": "745470"
  },
  {
    "text": "that quite a bit more and here's part of this talk but the important thing about it is regardless of which side of this",
    "start": "745470",
    "end": "752130"
  },
  {
    "text": "equation you're sort of working on all of these tools at the end of the day are generating that flat JSON or EML file",
    "start": "752130",
    "end": "759000"
  },
  {
    "text": "that is what is the kind of the fundamental thing the CloudFormation needs to be able to do its job okay so",
    "start": "759000",
    "end": "770400"
  },
  {
    "start": "768000",
    "end": "912000"
  },
  {
    "text": "I'm gonna get in a little further on macros at this point and we're gonna show some examples here but first just a",
    "start": "770400",
    "end": "777510"
  },
  {
    "text": "little bit about what macros are I kind of talked about this earlier but macros are an opportunity to sort of write",
    "start": "777510",
    "end": "783650"
  },
  {
    "text": "short functional programs that live in Lam that can be triggered by your",
    "start": "783650",
    "end": "789700"
  },
  {
    "text": "CloudFormation code so the way they work well what they do for you is they sort",
    "start": "789700",
    "end": "796390"
  },
  {
    "text": "of allow you to layer an imperatives behind the scenes so you can do things like do that iteration or counts that so",
    "start": "796390",
    "end": "804700"
  },
  {
    "text": "many people are clamoring for like I understand it's a you know it really decreases the amount of of confirmation",
    "start": "804700",
    "end": "811630"
  },
  {
    "text": "that you have to write of JSON and Yemen that you have to write but there other things you can do here too right you can",
    "start": "811630",
    "end": "817480"
  },
  {
    "text": "do introspection you can look at those files and make decisions about whether or not you're comfortable with the way",
    "start": "817480",
    "end": "823060"
  },
  {
    "text": "that the author has written them things like encryption right things like that governance best practices things like",
    "start": "823060",
    "end": "830470"
  },
  {
    "text": "that you can actually bake that in before anything is even provisioned within CloudFormation and they're easy",
    "start": "830470",
    "end": "837910"
  },
  {
    "text": "to share and reuse so as we'll see when we start getting into the examples macros are in fact resources within AWS",
    "start": "837910",
    "end": "846330"
  },
  {
    "text": "when you provision a macro it receives an Arn and you can leverage that macro",
    "start": "846330",
    "end": "852450"
  },
  {
    "text": "within any template within that account within that region I believe so it's",
    "start": "852450",
    "end": "859930"
  },
  {
    "text": "something that once you've written this code your end users can consume it without having to know about it or think",
    "start": "859930",
    "end": "865390"
  },
  {
    "text": "about it right as long as it's well documented and they're aware that it's exists within that account so that's",
    "start": "865390",
    "end": "872770"
  },
  {
    "text": "kind of cool right that's that's sort of that one of these interesting features of it when we're thinking about that",
    "start": "872770",
    "end": "877930"
  },
  {
    "text": "sort of ease of use of declarative versus imperative code if your end users are not you know Dyne the whole",
    "start": "877930",
    "end": "884320"
  },
  {
    "text": "developers this gives them the ability to to to use those types of",
    "start": "884320",
    "end": "890170"
  },
  {
    "text": "functionality without having to sort of go and pick up the code and sort of learn how to do all of that themselves and the other cool thing about macros is",
    "start": "890170",
    "end": "900190"
  },
  {
    "text": "that they are consuming AWS primitives they're lambda functions so we're not doing anything new and clever here this",
    "start": "900190",
    "end": "905980"
  },
  {
    "text": "is really just taking the building blocks that we have and stitching them together in a way that's sort of a",
    "start": "905980",
    "end": "911170"
  },
  {
    "text": "sensible okay so drilling into some examples here we've kind of selected",
    "start": "911170",
    "end": "917860"
  },
  {
    "start": "912000",
    "end": "956000"
  },
  {
    "text": "these ones again these are all sort of examples that exist in our eight abyss CloudFormation templates repository",
    "start": "917860",
    "end": "924920"
  },
  {
    "text": "which lives in the AWS labs organization we're gonna have some links at the end but but bottom line is these are all",
    "start": "924920",
    "end": "931730"
  },
  {
    "text": "examples that you can kind of go and pull down and play with right now we're gonna start with the iterator one",
    "start": "931730",
    "end": "937370"
  },
  {
    "text": "because it's the one we always hear and then we're gonna look at some that execute code we're gonna look at some",
    "start": "937370",
    "end": "943100"
  },
  {
    "text": "sort of building up of intrinsic functions and we're gonna get into some kind of cool interesting stuff around extending the functionality of cloud",
    "start": "943100",
    "end": "950449"
  },
  {
    "text": "formation by leveraging macros kind of running during this pre-processing phase",
    "start": "950449",
    "end": "956259"
  },
  {
    "start": "956000",
    "end": "1035000"
  },
  {
    "text": "the first time we're gonna talk about is the iterator example and I apologize I know this codes a little small but the",
    "start": "956259",
    "end": "963410"
  },
  {
    "text": "reason I put it the hair the way it is is this is it this is all the code so",
    "start": "963410",
    "end": "968420"
  },
  {
    "text": "there's not a lot of it we're not talking about writing long complex programs we're talking about writing small helper functions that can be",
    "start": "968420",
    "end": "975290"
  },
  {
    "text": "layered on top of each other you're not limited to a single macro for a template you can use multiple macros so there's",
    "start": "975290",
    "end": "981290"
  },
  {
    "text": "no reason to write one macro to rule them all you can actually kind of snip it and build your snippets based on",
    "start": "981290",
    "end": "987500"
  },
  {
    "text": "their function this one it kind of has three main parts to it way down at the bottom you can see there's the sort of",
    "start": "987500",
    "end": "994040"
  },
  {
    "text": "the boilerplate what you would expect from a lambda with your handler at the top you can see us sort of processing",
    "start": "994040",
    "end": "1002199"
  },
  {
    "text": "the template so what happens when you trigger a macro well if you trigger sort",
    "start": "1002199",
    "end": "1007509"
  },
  {
    "text": "of at the top of your your template then what happens is when we get to the macro the macro receives",
    "start": "1007509",
    "end": "1012610"
  },
  {
    "text": "the entire template as an object when in you know your language of choice so my",
    "start": "1012610",
    "end": "1017860"
  },
  {
    "text": "only budget choice tends to be Python so I get a dict and I can kind of iterate through that I can pick out the pieces",
    "start": "1017860",
    "end": "1023050"
  },
  {
    "text": "that I need I can make informed decisions and then that's that middle part there right that's actually where the logic is where we're actually saying",
    "start": "1023050",
    "end": "1029199"
  },
  {
    "text": "oh I found something that I need to act upon and now let me go ahead and execute against it",
    "start": "1029199",
    "end": "1036000"
  },
  {
    "start": "1035000",
    "end": "1086000"
  },
  {
    "text": "this is deploying a macro like I said a macro is a resource it can be",
    "start": "1036000",
    "end": "1042548"
  },
  {
    "text": "provisioned into your account it can be consumed by multiple users and this is just simply a way of sort of taking that",
    "start": "1042549",
    "end": "1049809"
  },
  {
    "text": "lambda function and sort of mapping it to whatever abstracted name that you want to leverage for your",
    "start": "1049809",
    "end": "1055730"
  },
  {
    "text": "particular function so in this case you know we're saying we have a service we",
    "start": "1055730",
    "end": "1061070"
  },
  {
    "text": "have a macro called count right for our iterator we're going to pass in as a",
    "start": "1061070",
    "end": "1066800"
  },
  {
    "text": "parameter get added parameter the lambda function that we've defined and then we're going to leverage the service",
    "start": "1066800",
    "end": "1072920"
  },
  {
    "text": "application model which is of course a macro right so we're using a macro to build a macro here to actually define",
    "start": "1072920",
    "end": "1078230"
  },
  {
    "text": "the lambda in an abstract way so again super simple not a lot of code here this gets it up into your account",
    "start": "1078230",
    "end": "1085190"
  },
  {
    "text": "and ready to use now this is what it looks like to the end-user so they're writing code first the first thing they",
    "start": "1085190",
    "end": "1091880"
  },
  {
    "start": "1086000",
    "end": "1146000"
  },
  {
    "text": "do is they do need to add sort of this additional component which is saying hey I've got a transform and it's this count transform and we know what count means",
    "start": "1091880",
    "end": "1098240"
  },
  {
    "text": "because we've already registered it as a macro within the account and now we just define our resources like we always do",
    "start": "1098240",
    "end": "1104750"
  },
  {
    "text": "but we have the ability to put in this sort of arbitrary new attribute of our",
    "start": "1104750",
    "end": "1110090"
  },
  {
    "text": "resource called counts so here we've added it to an s3 bucket and we're",
    "start": "1110090",
    "end": "1115220"
  },
  {
    "text": "saying that we actually want three of those and we're adding it to our auto scaling or I'm sorry - RS qsq here and",
    "start": "1115220",
    "end": "1121250"
  },
  {
    "text": "we're saying we want two of those now what happens is when we go into when CloudFormation goes in to process that",
    "start": "1121250",
    "end": "1128600"
  },
  {
    "text": "template it will see that count it recognizes that that's registered to that particular macro and then we'll go",
    "start": "1128600",
    "end": "1134720"
  },
  {
    "text": "execute that code generate the larger version with the three or the the two resources and then build a change set",
    "start": "1134720",
    "end": "1142220"
  },
  {
    "text": "around that with that expanded version okay",
    "start": "1142220",
    "end": "1147800"
  },
  {
    "text": "so sort of moving into a more complex example this one's kind of clever and I have a security background so clever but",
    "start": "1147800",
    "end": "1154370"
  },
  {
    "text": "also a little bit horrifying to be perfectly honest this is a macro that execute arbitrary Python behind the",
    "start": "1154370",
    "end": "1161360"
  },
  {
    "text": "scenes for your CloudFormation template okay so what you can see is here on the Left we've got a template that actually",
    "start": "1161360",
    "end": "1167720"
  },
  {
    "text": "has the macro already embedded into it and we've written an orange there",
    "start": "1167720",
    "end": "1173150"
  },
  {
    "text": "there's a little bit of Python and what this is doing is it's it's a trying to",
    "start": "1173150",
    "end": "1178550"
  },
  {
    "text": "access essentially expand out a parameter into multiple key value pairs right so this is",
    "start": "1178550",
    "end": "1184850"
  },
  {
    "text": "probably written by someone I'm gonna guess using nested stacks who maybe came up against the parameter limit and is",
    "start": "1184850",
    "end": "1190970"
  },
  {
    "text": "trying to look for ways to sort of consolidate their parameters and so what they've done is they've said okay I'm",
    "start": "1190970",
    "end": "1196340"
  },
  {
    "text": "gonna just take all my tags and even one parameter for that and then use a macro to expand that out and now my macro can",
    "start": "1196340",
    "end": "1202100"
  },
  {
    "text": "go and put the appropriate tags on all of my resources without me having to burn through a bunch of parameters to",
    "start": "1202100",
    "end": "1207530"
  },
  {
    "text": "get all that information into CloudFormation okay again not a lot of code on the back side for this the one",
    "start": "1207530",
    "end": "1214790"
  },
  {
    "text": "thing that I think is particularly interesting is this the one now this isn't the one we'll talk about the",
    "start": "1214790",
    "end": "1220670"
  },
  {
    "text": "what's particularly interesting in a minute but what we will talk about on this one is what's particularly horrifying right is the fact that I've",
    "start": "1220670",
    "end": "1227840"
  },
  {
    "text": "got a lambda running in the backside that's just running arbitrary Python code which is a little terrifying but",
    "start": "1227840",
    "end": "1233660"
  },
  {
    "text": "keep in mind what are we feeding into this thing well the only information it's getting is is my CloudFormation template itself but still if you're",
    "start": "1233660",
    "end": "1241910"
  },
  {
    "text": "gonna do something like this I'd probably put some guardrails on it unless you're very very comfortable they",
    "start": "1241910",
    "end": "1247010"
  },
  {
    "text": "say good sorry oh sorry I thought I heard something so anyway I would be",
    "start": "1247010",
    "end": "1252590"
  },
  {
    "text": "unless you're very very comfortable with the users of this thing so talking in",
    "start": "1252590",
    "end": "1258380"
  },
  {
    "text": "terms of guardrails kind of moving into sort of the next function here this is another big ass right conformation",
    "start": "1258380",
    "end": "1266360"
  },
  {
    "text": "because it's not a turing-complete language we don't have string manipulation we don't have the ability to do upper case and lower case we don't",
    "start": "1266360",
    "end": "1272540"
  },
  {
    "text": "have math functions alright these are opportunities that you could potentially in bed that stuff in a macro behind the",
    "start": "1272540",
    "end": "1277880"
  },
  {
    "text": "scenes and allow your users to have access to that functionality now there's",
    "start": "1277880",
    "end": "1283070"
  },
  {
    "text": "a couple of things I like about this from a guardrail perspective one of them comes from the way we're calling the",
    "start": "1283070",
    "end": "1288680"
  },
  {
    "text": "macro so the earlier macros what you were seeing is we were describing a transform at the top and we're handing",
    "start": "1288680",
    "end": "1294980"
  },
  {
    "text": "the entire template to our lambda function what you can see here is we're actually calling an intrinsic function",
    "start": "1294980",
    "end": "1301250"
  },
  {
    "text": "called FN transform and we're telling the we're telling CloudFormation exactly",
    "start": "1301250",
    "end": "1307580"
  },
  {
    "text": "where we want this macro to kick in which means that what I receive on the back end and my lambda function is not",
    "start": "1307580",
    "end": "1313310"
  },
  {
    "text": "the whole template it is just this little snippet right so we're not exposing other pieces we're not exposing maybe complex user",
    "start": "1313310",
    "end": "1320340"
  },
  {
    "text": "data or other things we're just giving it what it needs to get the job done so that's kind of a cool guardrail that you",
    "start": "1320340",
    "end": "1326880"
  },
  {
    "text": "can put on the front side the interesting thing on this is what it looks like on you know this is just basically we're telling this macro that",
    "start": "1326880",
    "end": "1333750"
  },
  {
    "text": "we've got this string and we want to perform an operation of upper case on it right and this is all stuff that I as",
    "start": "1333750",
    "end": "1340770"
  },
  {
    "text": "the macro designer or this person as a macro designer has sort of selected so they've decided that they're gonna have this operation field and this is what it",
    "start": "1340770",
    "end": "1347400"
  },
  {
    "text": "means to my macro okay and so what that allows you to do on the Mac side is put",
    "start": "1347400",
    "end": "1353370"
  },
  {
    "start": "1352000",
    "end": "1395000"
  },
  {
    "text": "guard rails around the execution code as well so I'm not accepting arbitrary code at this point I've decided exactly what",
    "start": "1353370",
    "end": "1360450"
  },
  {
    "text": "I want to expose and what I want to expose are these particular pythonic string manipulation functions upper case",
    "start": "1360450",
    "end": "1366900"
  },
  {
    "text": "lower case you know title caps whatever whatever it is and then my code simply",
    "start": "1366900",
    "end": "1372780"
  },
  {
    "text": "execute within the context of those guardrails this is a little bit more abstract and I've taken some of the code out but you can see on the inside it's",
    "start": "1372780",
    "end": "1379260"
  },
  {
    "text": "really just a very basic conditional statement right but this is B this is this is something that is just not",
    "start": "1379260",
    "end": "1385350"
  },
  {
    "text": "inherent to CloudFormation at all but with this macro now every single template that I execute I have access to",
    "start": "1385350",
    "end": "1391260"
  },
  {
    "text": "these particular functions okay moving",
    "start": "1391260",
    "end": "1397170"
  },
  {
    "start": "1395000",
    "end": "1499000"
  },
  {
    "text": "on to a more complex example this is something I'm still kind of chewing on but something that I hear customers say",
    "start": "1397170",
    "end": "1404400"
  },
  {
    "text": "is locking from confirmation is a concept of sort of a global variable variable space right so CloudFormation",
    "start": "1404400",
    "end": "1410160"
  },
  {
    "text": "doesn't really have this space where you could just store a bunch of values and request them arbitrarily we have",
    "start": "1410160",
    "end": "1415560"
  },
  {
    "text": "parameters so you can actually receive inputs and we have mechanisms for retrieving values from a resource that's",
    "start": "1415560",
    "end": "1421200"
  },
  {
    "text": "been created throughout and get at but this is sort of something that developers seem to miss a lot when",
    "start": "1421200",
    "end": "1427890"
  },
  {
    "text": "they're writing formation so someone has written a macro to sort of provide this so essentially you can sort of build a",
    "start": "1427890",
    "end": "1434630"
  },
  {
    "text": "global namespace at the top of your template and you can define strings there you can define more complex",
    "start": "1434630",
    "end": "1441260"
  },
  {
    "text": "objects we've got some key value pairs here and then we can take those and we can leverage those throughout the rest of",
    "start": "1441260",
    "end": "1448280"
  },
  {
    "text": "our template they've used the very clever prophets of at sign right which is interestingly enough kind of showing",
    "start": "1448280",
    "end": "1455990"
  },
  {
    "text": "how non imperative CloudFormation is is not overloading right we just don't use that sign so that's an opportunity to",
    "start": "1455990",
    "end": "1464210"
  },
  {
    "text": "sort of construct this additional namespace here and you can kind of see what happens on the back side this macro",
    "start": "1464210",
    "end": "1470870"
  },
  {
    "text": "is aware when it's getting handed a strain when it's getting handed a more complex object and it's able to inject those as appropriate based on needs",
    "start": "1470870",
    "end": "1478299"
  },
  {
    "text": "where this might come in particularly useful I know there are situations where you might need to pass to a resource",
    "start": "1478299",
    "end": "1485510"
  },
  {
    "text": "like a JSON object right and CloudFormation parameters only handle",
    "start": "1485510",
    "end": "1490700"
  },
  {
    "text": "strings so this gives you that opportunity to sort of take that string and change it into whatever is actually",
    "start": "1490700",
    "end": "1496730"
  },
  {
    "text": "needed for the underlying resource so that's kind of another cool use case here's the code for that again this has",
    "start": "1496730",
    "end": "1504080"
  },
  {
    "start": "1499000",
    "end": "1567000"
  },
  {
    "text": "been abstracted a little bit but you can kind of see one of the important things about this particular one right is",
    "start": "1504080",
    "end": "1509900"
  },
  {
    "text": "remember that what we're receiving at the start up at the top is going to be just this dictionary sort of this this",
    "start": "1509900",
    "end": "1516350"
  },
  {
    "text": "large object with all of our template or whatever snippet it is so you're gonna",
    "start": "1516350",
    "end": "1521690"
  },
  {
    "text": "have to think when you write a macro about you know what exactly am I looking at you're gonna have to sort of do the",
    "start": "1521690",
    "end": "1528350"
  },
  {
    "text": "appropriate identification is this a string is this a dict is this a list and",
    "start": "1528350",
    "end": "1533390"
  },
  {
    "text": "then be contextual about it now what I suspect is gonna happen and what I hope is going to happen is our fine friends",
    "start": "1533390",
    "end": "1539929"
  },
  {
    "text": "in the community will hopefully take this run with it and we'll start to see",
    "start": "1539929",
    "end": "1545270"
  },
  {
    "text": "some sort of pre baked libraries that are going to be useful for this type of thing I am already getting ideas for",
    "start": "1545270",
    "end": "1551690"
  },
  {
    "text": "doing that we do a lot of the same thing if anyone's using the linter obviously we have to do a lot of parsing of",
    "start": "1551690",
    "end": "1557390"
  },
  {
    "text": "Confirmation and Kevin de John who is kind of the lead developer on that has written some really good helper functions that I",
    "start": "1557390",
    "end": "1562889"
  },
  {
    "text": "think would be good for macros too so stay tuned for that",
    "start": "1562889",
    "end": "1568789"
  },
  {
    "start": "1567000",
    "end": "1674000"
  },
  {
    "text": "another one here is generating additional resources so the concept here",
    "start": "1570320",
    "end": "1575759"
  },
  {
    "text": "is we love our downstream users but we don't always trust our downstream users particularly in the enterprise to always",
    "start": "1575759",
    "end": "1583409"
  },
  {
    "text": "do the right thing and so this was a macro that was written for an enterprise",
    "start": "1583409",
    "end": "1589199"
  },
  {
    "text": "customer that essentially allows you to sort of make sure that you the customer",
    "start": "1589199",
    "end": "1595169"
  },
  {
    "text": "gets what they want but they also sort of get what they should have done in the first place so what this is doing is",
    "start": "1595169",
    "end": "1600659"
  },
  {
    "text": "this macro has identified that there is an s3 bucket to find within this template and it's going to be injecting",
    "start": "1600659",
    "end": "1608309"
  },
  {
    "text": "in some additional properties for that bucket to make sure that there's an appropriate policy on that private right",
    "start": "1608309",
    "end": "1614369"
  },
  {
    "text": "as buckets should be and then goes ahead and sort of expands out and adds a",
    "start": "1614369",
    "end": "1619619"
  },
  {
    "text": "full-on bucket policy to that as well that's been predefined now what I think is clever about this particular",
    "start": "1619619",
    "end": "1624989"
  },
  {
    "text": "implementation and again this will be in the github repo is that it you did they",
    "start": "1624989",
    "end": "1631829"
  },
  {
    "text": "did not code all of that sort of there's additional properties and stuffs into the the macro itself it actually reads",
    "start": "1631829",
    "end": "1638429"
  },
  {
    "text": "that out of a file and sort of does emerge right so that's kind of another interesting use case here is take what",
    "start": "1638429",
    "end": "1644609"
  },
  {
    "text": "the end-user said and then sort of overlay best practices on top of that",
    "start": "1644609",
    "end": "1649969"
  },
  {
    "text": "this one in particular has the ability to override which is very developer friendly right so I can say okay this is",
    "start": "1649969",
    "end": "1656369"
  },
  {
    "text": "this is typically what I want but actually in this case I don't want it so don't do it if you were writing this",
    "start": "1656369",
    "end": "1661559"
  },
  {
    "text": "from a governance perspective you might not want that capability right it might be nope this is actually how it has to",
    "start": "1661559",
    "end": "1666779"
  },
  {
    "text": "be because we have a fiduciary responsibility to our downstream customers or something like that okay so",
    "start": "1666779",
    "end": "1677190"
  },
  {
    "text": "I think that's kind of it from the macro side of the fence I'm gonna hand off to Lewis and Lewis is gonna talk a little",
    "start": "1677190",
    "end": "1684209"
  },
  {
    "text": "bit more about the imperative side of the fence thank you Doug mm-hmm well there's really no grateful way to",
    "start": "1684209",
    "end": "1690039"
  },
  {
    "text": "get off of that chair good afternoon if you've heard me talk",
    "start": "1690039",
    "end": "1697210"
  },
  {
    "text": "before this is not my natural speaking voice I lost my voice yesterday but I'll",
    "start": "1697210",
    "end": "1703239"
  },
  {
    "text": "find it so all right so a couple of",
    "start": "1703239",
    "end": "1710200"
  },
  {
    "text": "comments on macros that I want to add some of these examples perhaps are not",
    "start": "1710200",
    "end": "1715599"
  },
  {
    "text": "realistic in a production environment like executing Python arbitrarily but I'll say two things number one you can",
    "start": "1715599",
    "end": "1723279"
  },
  {
    "text": "always change your Python macro code to restrict people and do things like clean",
    "start": "1723279",
    "end": "1729519"
  },
  {
    "text": "up the code and check it but the idea here is to give you a sense of a balance",
    "start": "1729519",
    "end": "1735099"
  },
  {
    "text": "of how powerful this macros can be while making the example simple and also that you can see oh this is why I applied to",
    "start": "1735099",
    "end": "1741669"
  },
  {
    "text": "something I want to do it can do transformations they can create levels of abstraction so that one of the",
    "start": "1741669",
    "end": "1748899"
  },
  {
    "text": "important parts about this is that notice that they the templates that you use the transformations don't have to be",
    "start": "1748899",
    "end": "1757929"
  },
  {
    "text": "any more complicated other than calling the macro so you can strike a balance between adding more functionality to the",
    "start": "1757929",
    "end": "1765039"
  },
  {
    "text": "language while your template users not necessarily the coders can gain that",
    "start": "1765039",
    "end": "1770799"
  },
  {
    "text": "benefit without knowing and a higher-level language speaking of that let's talk about imperative programming",
    "start": "1770799",
    "end": "1777609"
  },
  {
    "text": "and Confirmation so Chuck mentioned before that cdk with the simce and with",
    "start": "1777609",
    "end": "1786609"
  },
  {
    "text": "other programming languages not only can you if you're used to not only",
    "start": "1786609",
    "end": "1791799"
  },
  {
    "text": "programming in typescript JavaScript node and if you're used to creating",
    "start": "1791799",
    "end": "1797139"
  },
  {
    "text": "really good unit tests for that you have the opportunity to program infrastructure for confirmation while",
    "start": "1797139",
    "end": "1803739"
  },
  {
    "text": "also adding traditional unit testing for those things but it goes beyond that because you can use object-oriented",
    "start": "1803739",
    "end": "1811450"
  },
  {
    "text": "principles to say I'm gonna create component and inside of these components we're gonna have multiple resources and those",
    "start": "1811450",
    "end": "1817460"
  },
  {
    "text": "components and I'll show you a sample of that what that does at the end of the day it's improved the productivity of",
    "start": "1817460",
    "end": "1823520"
  },
  {
    "text": "the developer and those components can be easily reused by other cdk users as",
    "start": "1823520",
    "end": "1830270"
  },
  {
    "text": "he also mentioned for python users I happen to be a big fan of Python in troposphere it's a very mature project",
    "start": "1830270",
    "end": "1837220"
  },
  {
    "text": "generates both Yammer and JSON they leverage our resource allocation which",
    "start": "1837220",
    "end": "1842930"
  },
  {
    "text": "means that every time that we add support for a new attribute or for a new resource that automatically gets",
    "start": "1842930",
    "end": "1850250"
  },
  {
    "text": "inherited by troposphere so if you have troposphere code you'll be able to use",
    "start": "1850250",
    "end": "1856270"
  },
  {
    "text": "recently some release support as soon as it gets released and that can be very powerful",
    "start": "1856270",
    "end": "1862540"
  },
  {
    "text": "Ruby users can leverage Sparkle formation and also for macros Ruby users",
    "start": "1862540",
    "end": "1868520"
  },
  {
    "text": "can now use lambda because earlier to the earlier this week we announced that now Ruby users can create lambda",
    "start": "1868520",
    "end": "1875060"
  },
  {
    "text": "functions as well Sparkle formation is used by a lot of people as well and see",
    "start": "1875060",
    "end": "1880100"
  },
  {
    "text": "this is one of the benefits with working with CloudFormation we have so many users of so many backgrounds that both",
    "start": "1880100",
    "end": "1888310"
  },
  {
    "text": "operational skype programmers create features and and they open source them",
    "start": "1888310",
    "end": "1894680"
  },
  {
    "text": "and add to a very rich ecosystem at the same time we have very expert users that",
    "start": "1894680",
    "end": "1900710"
  },
  {
    "text": "also do the same and contribute to open source as well all the tools that I mentioned here are still generating",
    "start": "1900710",
    "end": "1907190"
  },
  {
    "text": "llamó and JSON code so that you can take advantage of cloud formations ability to do roll backs to manage state and to in",
    "start": "1907190",
    "end": "1915680"
  },
  {
    "text": "many cases automatically check dependencies for you the diagram here",
    "start": "1915680",
    "end": "1921800"
  },
  {
    "text": "just illustrates that in cdk in particular you can start with resources group those resources into components",
    "start": "1921800",
    "end": "1929000"
  },
  {
    "text": "and then use program components inside of a stack that stack can be combined with other stacks and you can use",
    "start": "1929000",
    "end": "1935540"
  },
  {
    "text": "packaged an entire an environment in one cdk package and then you can package",
    "start": "1935540",
    "end": "1940730"
  },
  {
    "text": "applications that way out of cdk work you download it you get a bunch of",
    "start": "1940730",
    "end": "1947060"
  },
  {
    "text": "utilities and you get a bunch of models already pre-made for you not only for",
    "start": "1947060",
    "end": "1952460"
  },
  {
    "text": "typical use cases but modules that for example when you're doing serverless much like the server let's transform",
    "start": "1952460",
    "end": "1958910"
  },
  {
    "text": "will do in cloud formation where it kind of like create stuff for you the same thing applies to cdk so it sets of your",
    "start": "1958910",
    "end": "1970130"
  },
  {
    "text": "project you get a whole bunch of models already baked in you add to those models you compile it that generates",
    "start": "1970130",
    "end": "1977450"
  },
  {
    "text": "confirmation templates and it goes even further than that it manages your stacks behind the scenes manages your deploys",
    "start": "1977450",
    "end": "1983920"
  },
  {
    "text": "so confirmation becomes the processor about a model before I go any further",
    "start": "1983920",
    "end": "1989510"
  },
  {
    "text": "what we're talking about cdk and macros both of these were released a couple of months ago from my curiosity have any of",
    "start": "1989510",
    "end": "1997250"
  },
  {
    "text": "you already tried to kick the tires of macarons yet one person okay two people",
    "start": "1997250",
    "end": "2004450"
  },
  {
    "text": "you haven't written you were kind of like thinking about it no idea I use them okay how many people have seen cdk",
    "start": "2004450",
    "end": "2010120"
  },
  {
    "text": "before okay many oh there's one there's what - okay so - one - perfect so let me show you",
    "start": "2010120",
    "end": "2018280"
  },
  {
    "text": "what happens when you install and kind of like run through a basic cdk example and one thing does it start yeah",
    "start": "2018280",
    "end": "2026320"
  },
  {
    "text": "you install it from NPM and then once install cells very quickly you initiate an app",
    "start": "2026320",
    "end": "2031750"
  },
  {
    "text": "it's designed to eventually support many languages as well once they happen its",
    "start": "2031750",
    "end": "2037480"
  },
  {
    "text": "initialize you build it and it builds the stats and everything it deploys it and as you see the events coming back",
    "start": "2037480",
    "end": "2044470"
  },
  {
    "text": "they're gonna look very familiar they look like CloudFormation events it deploys very quickly and completes then",
    "start": "2044470",
    "end": "2054730"
  },
  {
    "text": "let's go and change one line of code here because this will give you the power of the components I have a new SNS",
    "start": "2054730",
    "end": "2061929"
  },
  {
    "text": "topic I'm gonna go out there and add a",
    "start": "2061930",
    "end": "2067990"
  },
  {
    "text": "queue and that's all I need to write there that generates actually two",
    "start": "2067990",
    "end": "2073210"
  },
  {
    "text": "CloudFormation resources behind the scenes how do we know that we build it again and then we do a DIF from that person",
    "start": "2073210",
    "end": "2079289"
  },
  {
    "text": "that we've deployed to this version so that line of code added acute policy and an SNS subscription so again it's about",
    "start": "2079289",
    "end": "2086339"
  },
  {
    "text": "programmer efficiency programmer productivity do a lot of things with the least amount of work you deploy the update stack gets",
    "start": "2086339",
    "end": "2094470"
  },
  {
    "text": "updated if everything looks good so see DK is pretty powerful now I do",
    "start": "2094470",
    "end": "2100920"
  },
  {
    "text": "understand that for many confirmation customers the reason why they use something like Yammer or JSON and",
    "start": "2100920",
    "end": "2107280"
  },
  {
    "text": "everything is because they're not necessarily SDK programmers so that",
    "start": "2107280",
    "end": "2113099"
  },
  {
    "text": "should not be a detriment to the fact that coding in diamo and troubleshooting",
    "start": "2113099",
    "end": "2118710"
  },
  {
    "text": "coding llamó in many cases can be a lot faster because there's a lot less code to maintain so saying that one is better",
    "start": "2118710",
    "end": "2126869"
  },
  {
    "text": "than the other I like people to more think about there's use cases for both and remember in many cases your",
    "start": "2126869",
    "end": "2133740"
  },
  {
    "text": "confirmation users are not necessarily want to know the details of your template and everything you might be",
    "start": "2133740",
    "end": "2139740"
  },
  {
    "text": "using confirmation behind-the-scenes you're using Beanstalk or Service Catalog or another NWS product in fact",
    "start": "2139740",
    "end": "2146760"
  },
  {
    "text": "many third-party products as well just confirmation behind the scenes so you should be open to doing declarative do",
    "start": "2146760",
    "end": "2154799"
  },
  {
    "text": "it imperative and do it perhaps a mix of both the one sort of other point I wanted to make about the cdk before we",
    "start": "2154799",
    "end": "2161279"
  },
  {
    "start": "2158000",
    "end": "2312000"
  },
  {
    "text": "move forward is it isn't Developer Preview right now and so it is it is",
    "start": "2161279",
    "end": "2167400"
  },
  {
    "text": "sort of in its early days but the team is very very very receptive to to your",
    "start": "2167400",
    "end": "2173640"
  },
  {
    "text": "thoughts about it and where it would be useful for you for them to go next so",
    "start": "2173640",
    "end": "2179579"
  },
  {
    "text": "this is a great opportunity to kind of dig in at an early stage and sort of help us understand what that should look",
    "start": "2179579",
    "end": "2186329"
  },
  {
    "text": "like going forward absolutely that's an excellent point one of the things that I concentrated or not",
    "start": "2186329",
    "end": "2191670"
  },
  {
    "text": "a lot on when I joined CloudFormation two years ago is that we can do so much",
    "start": "2191670",
    "end": "2196770"
  },
  {
    "text": "more to improve improve developer productivity and these are just a few examples but all you got cdk you got the",
    "start": "2196770",
    "end": "2205319"
  },
  {
    "text": "linter that my colleague here chuck maintains and you'll see us putting even more projects in open source not only because",
    "start": "2205319",
    "end": "2212180"
  },
  {
    "text": "it's a good idea to actually help back the community but because it engages more users and it really truly makes the",
    "start": "2212180",
    "end": "2219140"
  },
  {
    "text": "product better for everybody else so you'll see a lot of that now the reason why I bring this slide on SDK here is",
    "start": "2219140",
    "end": "2225980"
  },
  {
    "text": "that we're talking about cdk and everything and if you're a typical CloudFormation user you don't have to",
    "start": "2225980",
    "end": "2232069"
  },
  {
    "text": "worry about the SDK that's behind the scenes but basically if you're an SDK",
    "start": "2232069",
    "end": "2237950"
  },
  {
    "text": "user you'll put yourself in a really good position to also learn cdk most of",
    "start": "2237950",
    "end": "2243560"
  },
  {
    "text": "you know there's three primary ways to operate AWS using the browser-based",
    "start": "2243560",
    "end": "2248690"
  },
  {
    "text": "consoles which are still a very valid way to do your operations doing CLI",
    "start": "2248690",
    "end": "2255440"
  },
  {
    "text": "commands or operating the API s-- and that's where you use sdk for python for",
    "start": "2255440",
    "end": "2261079"
  },
  {
    "text": "example our Python SDK is boto the latest version is Bordeaux 3 and boto is",
    "start": "2261079",
    "end": "2269420"
  },
  {
    "text": "used by troposphere as Chuck mentioned before troposphere is you program in",
    "start": "2269420",
    "end": "2274940"
  },
  {
    "text": "Python you can do testing in Python generate JSON or llamó and then execute",
    "start": "2274940",
    "end": "2280220"
  },
  {
    "text": "CloudFormation troposphere code can be very simplistic or it can be very complex and in a way",
    "start": "2280220",
    "end": "2287900"
  },
  {
    "text": "just like I showed with CKD you can create modules in troposphere where one",
    "start": "2287900",
    "end": "2292910"
  },
  {
    "text": "module may generate three or four other resources as well but rather than talk about it let's take our life into our",
    "start": "2292910",
    "end": "2301670"
  },
  {
    "text": "own hands and try to do a demo all right ok take my life in my own hands you guys",
    "start": "2301670",
    "end": "2308359"
  },
  {
    "text": "aren't gonna be safe this is this is not this is not gonna hurt you a bit how",
    "start": "2308359",
    "end": "2314030"
  },
  {
    "start": "2312000",
    "end": "2382000"
  },
  {
    "text": "many of you have seen cloud 9 before okay so this is not gonna look strange",
    "start": "2314030",
    "end": "2319190"
  },
  {
    "text": "at all excellent so one of the benefits are using cloud 9 especially for Python",
    "start": "2319190",
    "end": "2324650"
  },
  {
    "text": "developers but also applying to no developers is that a lot of the things that we require are big t and for you",
    "start": "2324650",
    "end": "2331280"
  },
  {
    "text": "cloud 9 once in an ec2 environment and it comes pre-installed with the AWS CLI",
    "start": "2331280",
    "end": "2340520"
  },
  {
    "text": "and with SDK and board components so what I'm doing here to show you how",
    "start": "2340520",
    "end": "2345530"
  },
  {
    "text": "tapas fear works is I have a call 9 machine with the standard software that",
    "start": "2345530",
    "end": "2351740"
  },
  {
    "text": "you would get you can get this as literally going and working in about two minutes I'm gonna show you how to",
    "start": "2351740",
    "end": "2358780"
  },
  {
    "text": "execute a sample Python program here in spite because obviously troposphere",
    "start": "2358780",
    "end": "2364430"
  },
  {
    "text": "requires boto which in turns in turn requires python so we're not gonna win",
    "start": "2364430",
    "end": "2369890"
  },
  {
    "text": "any design awards with this program but we're still deny run it there you go so",
    "start": "2369890",
    "end": "2381890"
  },
  {
    "text": "HelloWorld program works we can move on to something more clever",
    "start": "2381890",
    "end": "2386930"
  },
  {
    "start": "2382000",
    "end": "2505000"
  },
  {
    "text": "this is using Bordeaux 3 which is the Python SDK for AWS and in this simple",
    "start": "2386930",
    "end": "2392540"
  },
  {
    "text": "program as you can see and you'll see this in most SDK programs where you essentially create a client for the",
    "start": "2392540",
    "end": "2399020"
  },
  {
    "text": "particular resource of you using and in this program I'm gonna run it and it's gonna list my existing s3 buckets",
    "start": "2399020",
    "end": "2405050"
  },
  {
    "text": "don't judge me because I really do create a lot of s3 buckets I do a lot of demos he's gonna list my pockets then",
    "start": "2405050",
    "end": "2413750"
  },
  {
    "text": "I'm gonna create a new bucket and run the list again to demonstrate that my bucket is there and then it's gonna",
    "start": "2413750",
    "end": "2419630"
  },
  {
    "text": "delete my bucket and show the list again alright so let's see",
    "start": "2419630",
    "end": "2428800"
  },
  {
    "text": "and let's come up with a neat bucket name",
    "start": "2434170",
    "end": "2438808"
  },
  {
    "text": "that sounds like a good bucket name and we're gonna pick a region to use all",
    "start": "2450089",
    "end": "2460329"
  },
  {
    "text": "right and it's done running we're gonna try to maximize this to show you the result there we go so my old buckets now",
    "start": "2460329",
    "end": "2473920"
  },
  {
    "text": "are all those try not to read too much into that garbage I created a new bucket",
    "start": "2473920",
    "end": "2481359"
  },
  {
    "text": "name I can't believe I lost my voice and my buckets now are we're looking for one",
    "start": "2481359",
    "end": "2489400"
  },
  {
    "text": "that starts with an i there it is I can't believe I lost my voice then we're",
    "start": "2489400",
    "end": "2496089"
  },
  {
    "text": "gonna go ahead and delete it and my bucket I lost my bucket all right so now",
    "start": "2496089",
    "end": "2505750"
  },
  {
    "start": "2505000",
    "end": "2639000"
  },
  {
    "text": "they show you how troubles fear works so in this particular troposphere code what",
    "start": "2505750",
    "end": "2510849"
  },
  {
    "text": "I'm going to try to do is use troposphere to implement a iterator so I",
    "start": "2510849",
    "end": "2517720"
  },
  {
    "text": "can generate three different ec2 instances so I'm gonna import template",
    "start": "2517720",
    "end": "2523839"
  },
  {
    "text": "and I'm gonna import only the sub library ec2 because that's what I'm gonna use and here I'm gonna have a",
    "start": "2523839",
    "end": "2532089"
  },
  {
    "text": "couple of environments we're gonna have dev tests and let's create a new environment for this like acceptance or",
    "start": "2532089",
    "end": "2539339"
  },
  {
    "text": "accept yes and then we're gonna go with through that array and we're you're just",
    "start": "2539339",
    "end": "2545500"
  },
  {
    "text": "gonna create new names for the instances and then we're gonna go ahead and open a",
    "start": "2545500",
    "end": "2551770"
  },
  {
    "text": "template file that has a heading and everything and just generate it yeah well so I'll go ahead and say you this",
    "start": "2551770",
    "end": "2559260"
  },
  {
    "text": "all changes saved",
    "start": "2559260",
    "end": "2562770"
  },
  {
    "text": "should be done so let's open it up and as you can see there one the brand-new",
    "start": "2572420",
    "end": "2579630"
  },
  {
    "text": "one is here there's one resource there's my other resource there's my other",
    "start": "2579630",
    "end": "2584640"
  },
  {
    "text": "resource and they're all generated just by this program turn around take the stamp lid uploaded",
    "start": "2584640",
    "end": "2590819"
  },
  {
    "text": "or use the CLI and it becomes a new cloud formation stack so in there in",
    "start": "2590819",
    "end": "2597299"
  },
  {
    "text": "these very bobby basic cases super powerful super easy to use but what I",
    "start": "2597299",
    "end": "2602700"
  },
  {
    "text": "would like to make you think about is that you can create a lot of really clever very complex cases you can use",
    "start": "2602700",
    "end": "2609269"
  },
  {
    "text": "abstraction and also because you're not dealing in the language that's very well",
    "start": "2609269",
    "end": "2614309"
  },
  {
    "text": "supported in IDE s you can use its facilities to do things like automated",
    "start": "2614309",
    "end": "2620130"
  },
  {
    "text": "unit tests for example",
    "start": "2620130",
    "end": "2622880"
  },
  {
    "text": "so that's cloud nine and troposphere",
    "start": "2627559",
    "end": "2634849"
  },
  {
    "text": "so let's wrap up I stopped into it a couple times already you can use",
    "start": "2638499",
    "end": "2644089"
  },
  {
    "start": "2639000",
    "end": "2789000"
  },
  {
    "text": "declarative programming you can use imperative programming you can use both macros in a way are a good way to",
    "start": "2644089",
    "end": "2651170"
  },
  {
    "text": "continue to use declarative programming but expand enough of the functionality of cloud formation with transforms with",
    "start": "2651170",
    "end": "2658969"
  },
  {
    "text": "ways to have more logic to your templates and still allow most of the",
    "start": "2658969",
    "end": "2664160"
  },
  {
    "text": "remaining of the Confirmation users I mean on that may not know anything about Python or lambda to still get the",
    "start": "2664160",
    "end": "2669829"
  },
  {
    "text": "benefits of those things without having to jump into the clarity of coding",
    "start": "2669829",
    "end": "2675429"
  },
  {
    "text": "there are many macro possibilities we designed these so that you get a sense",
    "start": "2676359",
    "end": "2681650"
  },
  {
    "text": "of its power and also simple enough so that you can kind of like understand what it's trying to do when I can tell",
    "start": "2681650",
    "end": "2687229"
  },
  {
    "text": "you for example when we release this I want to say it was like maybe four months ago we announced it like in the",
    "start": "2687229",
    "end": "2694489"
  },
  {
    "text": "middle of the afternoon and within a couple of hours there was already an AWS",
    "start": "2694489",
    "end": "2699499"
  },
  {
    "text": "independent github repository with people contributing macros already so it's become very popular I myself have",
    "start": "2699499",
    "end": "2706759"
  },
  {
    "text": "seen now a little bit over 50 CloudFormation macros and they can do",
    "start": "2706759",
    "end": "2711859"
  },
  {
    "text": "some really powerful things like cloning resources setting up with only a few",
    "start": "2711859",
    "end": "2716869"
  },
  {
    "text": "lines global dynamodb tables generating pipelines from from a macro so I",
    "start": "2716869",
    "end": "2724359"
  },
  {
    "text": "strongly encourage you to aim nothing else look at the examples of I think that",
    "start": "2724359",
    "end": "2730729"
  },
  {
    "text": "you'll find that either for your pipelines or for your security groups they'll find some really good uses for",
    "start": "2730729",
    "end": "2737539"
  },
  {
    "text": "these things but if you are a full stack developer or are not afraid to learn a",
    "start": "2737539",
    "end": "2744529"
  },
  {
    "text": "language like Python or Ruby or JavaScript you should consider using",
    "start": "2744529",
    "end": "2749660"
  },
  {
    "text": "some imperative programming to create confirmation stuff and again because",
    "start": "2749660",
    "end": "2756229"
  },
  {
    "text": "there's so many uses of Confirmation we have so many options now we're adding cdk as an option which we mentioned",
    "start": "2756229",
    "end": "2761989"
  },
  {
    "text": "before troposphere is an existing option that is very mature there's many additional languages and",
    "start": "2761989",
    "end": "2768830"
  },
  {
    "text": "specific language options as we discussed and you still leverage the confirmation benefits because you still",
    "start": "2768830",
    "end": "2775520"
  },
  {
    "text": "generate llamo and JSON code and we that",
    "start": "2775520",
    "end": "2783160"
  },
  {
    "text": "we'd like to thank you and we hope that you continue to use polymers",
    "start": "2783160",
    "end": "2788380"
  },
  {
    "text": "[Applause]",
    "start": "2788380",
    "end": "2790929"
  }
]