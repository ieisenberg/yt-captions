[
  {
    "start": "0",
    "end": "91000"
  },
  {
    "text": "[Music]",
    "start": "310",
    "end": "4338"
  },
  {
    "text": "hello i'm rob pagarita and i'm a principal technical account manager at aws and i'm based out of austin texas",
    "start": "5839",
    "end": "12480"
  },
  {
    "text": "welcome to aws supports you where we share best practices and troubleshooting tips from aws support and joining me",
    "start": "12480",
    "end": "18800"
  },
  {
    "text": "today is akashan iden from aws support can you give us a quick introduction akash and then ayden",
    "start": "18800",
    "end": "25439"
  },
  {
    "text": "sure rob hello everyone my name is akash and i work as a solutions architect and i help",
    "start": "25439",
    "end": "30560"
  },
  {
    "text": "customers in implementing serverless architectures on aws and today i am excited to share my",
    "start": "30560",
    "end": "36239"
  },
  {
    "text": "experiences because i think this is a wonderful technology that is making builders more productive",
    "start": "36239",
    "end": "42160"
  },
  {
    "text": "over to you adam thanks akash good morning my name is aidan i'm an enterprise support lead based in san",
    "start": "42160",
    "end": "48480"
  },
  {
    "text": "jose california and i'm also glad to share my experience on serverless architecting and to help",
    "start": "48480",
    "end": "54879"
  },
  {
    "text": "you get started today and looking forward to this this talk today",
    "start": "54879",
    "end": "60640"
  },
  {
    "text": "great thanks for the introductions uh as they mentioned today we're going to be talking about aws serverless architectures and specifically focusing",
    "start": "60640",
    "end": "66960"
  },
  {
    "text": "on those best practices on architecture for serverless and moving away from the classic three tier architecture on",
    "start": "66960",
    "end": "72560"
  },
  {
    "text": "servers but before we get into the details a quick note to the attendees online please feel free to use the chat",
    "start": "72560",
    "end": "78159"
  },
  {
    "text": "window on the right hand side of your screen to share your thoughts and ask your questions throughout the episode today we really look forward to hearing",
    "start": "78159",
    "end": "83920"
  },
  {
    "text": "from you and getting some questions from you uh for our experts this morning so ayden can you go ahead and uh get us",
    "start": "83920",
    "end": "89439"
  },
  {
    "text": "started on what we're gonna be talking about today yes so we'll cover the basics of of serverless really um how to",
    "start": "89439",
    "end": "96320"
  },
  {
    "start": "91000",
    "end": "151000"
  },
  {
    "text": "get from like a classic three-tier architecture as you mentioned to more say serverless patterns like event",
    "start": "96320",
    "end": "102000"
  },
  {
    "text": "driven architectures etc and we'll dive deep into three major services to help you",
    "start": "102000",
    "end": "108240"
  },
  {
    "text": "accomplish this this is aws lambda amazon api gateway and amazon dynamodb",
    "start": "108240",
    "end": "114960"
  },
  {
    "text": "and we'll cap it off with how to really get started in serverless how to start developing how to start implementing",
    "start": "114960",
    "end": "121520"
  },
  {
    "text": "these serverless architectures followed by q a so akash over to you to kick us off",
    "start": "121520",
    "end": "129920"
  },
  {
    "text": "sure thanks adam okay so let me start with a very standard three-tier architecture and it",
    "start": "129920",
    "end": "136080"
  },
  {
    "text": "has been a cornerstone architecture pattern for decades and remains a popular pattern for user",
    "start": "136080",
    "end": "141520"
  },
  {
    "text": "phasing applications so you have a presentation layer it can be a mobile or a web application",
    "start": "141520",
    "end": "147680"
  },
  {
    "text": "and then you have a logic tier where you will write your business logic and then you have the data here where",
    "start": "147680",
    "end": "152800"
  },
  {
    "start": "151000",
    "end": "203000"
  },
  {
    "text": "your databases will run very standard three-tier architecture but when it goes to production this is",
    "start": "152800",
    "end": "159360"
  },
  {
    "text": "how it looks like so your web web layer becomes have many servers right and they are in",
    "start": "159360",
    "end": "166720"
  },
  {
    "text": "auto scaling group and then you need a load balancer to balance the load for web servers and",
    "start": "166720",
    "end": "172720"
  },
  {
    "text": "similarly you would need servers for application servers managing application and then you will",
    "start": "172720",
    "end": "178560"
  },
  {
    "text": "have a lot balancer for again balancing load for those business logic and then you will have database under primary and",
    "start": "178560",
    "end": "184879"
  },
  {
    "text": "secondary setup and then you know you would have cloud front for",
    "start": "184879",
    "end": "190080"
  },
  {
    "text": "caching requirements at the edge and you will have static information in s3 and then you",
    "start": "190080",
    "end": "196239"
  },
  {
    "text": "will use definitely 53 for your dns resolution so a standard three-tier architecture",
    "start": "196239",
    "end": "202720"
  },
  {
    "text": "become a complex deployment involving multiple components right and if you",
    "start": "202720",
    "end": "208959"
  },
  {
    "start": "203000",
    "end": "295000"
  },
  {
    "text": "if you see this architecture there is one thing which is common across multiple layers",
    "start": "208959",
    "end": "214640"
  },
  {
    "text": "and it is servers and servers are really powerful",
    "start": "214640",
    "end": "220400"
  },
  {
    "text": "and with great power comes get responsibility and and what are those responsibilities let's look at that",
    "start": "220400",
    "end": "226879"
  },
  {
    "text": "so from a developer perspective uh if if i have a server i would want to know what is the operating system of the",
    "start": "226879",
    "end": "232879"
  },
  {
    "text": "server where it has been whether it has the applications server i intended to use is there and whether is",
    "start": "232879",
    "end": "240959"
  },
  {
    "text": "or jboss is installed in that machine from an operations perspective i would want to know how many servers i need for",
    "start": "240959",
    "end": "247760"
  },
  {
    "text": "production for average and peak load and what is the right side size of the server and how to patch them regularly",
    "start": "247760",
    "end": "254239"
  },
  {
    "text": "when to scale out from a security point of view i would want to know who has access to the",
    "start": "254239",
    "end": "259440"
  },
  {
    "text": "servers is antivirus installed how to control access so you can you can start imagining right from a developer",
    "start": "259440",
    "end": "265840"
  },
  {
    "text": "operation security and from a cost perspective you want to right side the server there are so many questions you have to answer when there is a server",
    "start": "265840",
    "end": "272560"
  },
  {
    "text": "and according to a survey cio says that 80 percent of developers time is spent",
    "start": "272560",
    "end": "277919"
  },
  {
    "text": "on operations and maintenance of application and only 20 of time is actually spent on innovation",
    "start": "277919",
    "end": "283840"
  },
  {
    "text": "now with this imagine how much effort goes into undifferentiated heavy lifting",
    "start": "283840",
    "end": "289280"
  },
  {
    "text": "so what should we do now uh and the solution is serverless right let's understand",
    "start": "289280",
    "end": "295280"
  },
  {
    "start": "295000",
    "end": "353000"
  },
  {
    "text": "what is serverless so a service is called serverless when there is no infrastructure provisioning",
    "start": "295280",
    "end": "301600"
  },
  {
    "text": "and management required so these are the four dimensions right one is you don't require in any infrastructure provisioning no",
    "start": "301600",
    "end": "308080"
  },
  {
    "text": "management it should scale automatically based on the volume uh coming from coming to the",
    "start": "308080",
    "end": "314080"
  },
  {
    "text": "service so you don't kind of provision on the infrastructure for scaling it it scales automatically",
    "start": "314080",
    "end": "322320"
  },
  {
    "text": "third it is highly available by default so your service is spends across multi-ac",
    "start": "322320",
    "end": "328639"
  },
  {
    "text": "and you don't kind of uh do it manually or by throwing process this",
    "start": "328639",
    "end": "334160"
  },
  {
    "text": "service has inherent capability to scale across az and you pay for value",
    "start": "334160",
    "end": "340479"
  },
  {
    "text": "so you pay only for what you use so the other four dimensions you look at when you when you say service is a serverless",
    "start": "340479",
    "end": "346560"
  },
  {
    "text": "service and we will dive deep into a few of the services",
    "start": "346560",
    "end": "352600"
  },
  {
    "start": "353000",
    "end": "424000"
  },
  {
    "text": "coming to the aws operational responsibility models and if you see here",
    "start": "354160",
    "end": "360160"
  },
  {
    "text": "you you have the freedom of using virtual machine when you have full control to using something like amazon ec2 uh",
    "start": "360560",
    "end": "367919"
  },
  {
    "text": "where you spin up virtual machines within seconds and then to lambda which",
    "start": "367919",
    "end": "372960"
  },
  {
    "text": "is completely serverless and with with this capability your operational responsibility decreases when you go",
    "start": "372960",
    "end": "378000"
  },
  {
    "text": "from left to right and and the choice whether to use ec2 versus lambda or rds versus dynamodb",
    "start": "378000",
    "end": "385680"
  },
  {
    "text": "would depend on what kind of workload you are building and what kind of management you",
    "start": "385680",
    "end": "390720"
  },
  {
    "text": "want for that workload so there is nothing right or wrong it is all about choosing the right tool for the right job and and you can see how",
    "start": "390720",
    "end": "398000"
  },
  {
    "text": "your kind of management overhead uh comes into picture when you use this kind of services and what kind of control you need",
    "start": "398000",
    "end": "404400"
  },
  {
    "text": "so i will quickly uh kind of stop for a question uh are there any questions at all",
    "start": "404400",
    "end": "411280"
  },
  {
    "text": "hey josh thanks uh so no questions right now from the audience uh so i'll go ahead and let you continue on but i just",
    "start": "411360",
    "end": "417680"
  },
  {
    "text": "make sure to post your questions here um for a caution item thank you sure thank you",
    "start": "417680",
    "end": "423759"
  },
  {
    "text": "moving on uh most of the most of the time uh i've seen uh people feel that serverless is",
    "start": "423759",
    "end": "430560"
  },
  {
    "start": "424000",
    "end": "507000"
  },
  {
    "text": "only about compute but it's not about that so so lambda is one service which",
    "start": "430560",
    "end": "435599"
  },
  {
    "text": "i'm going to cover is a fml compute and but then we have services as part of",
    "start": "435599",
    "end": "441120"
  },
  {
    "text": "storage so for example amazon s3 uh for if you use amazon s3 you go and",
    "start": "441120",
    "end": "447440"
  },
  {
    "text": "store a file and you don't worry about how that file is stored and what is the storage layer behind it how that is",
    "start": "447440",
    "end": "454000"
  },
  {
    "text": "managed it's completely abstracted from you so you focus mainly on uploading the file",
    "start": "454000",
    "end": "459039"
  },
  {
    "text": "and the rest things are taken care by amazon s3 so great example of a serverless service similarly amazon api",
    "start": "459039",
    "end": "466479"
  },
  {
    "text": "gateway right you when you use amazon api gateway uh uh you kind of uh",
    "start": "466479",
    "end": "471919"
  },
  {
    "text": "upload the swagger file and put the api specifications on api gateway and don't worry about the",
    "start": "471919",
    "end": "477840"
  },
  {
    "text": "scalability of api gateway it is taken care automatically and iodine will cover more",
    "start": "477840",
    "end": "483039"
  },
  {
    "text": "that in detail so we have services from compute to storage to integrations",
    "start": "483039",
    "end": "488479"
  },
  {
    "text": "covering serverless spectrum moving on let me talk about",
    "start": "488479",
    "end": "494240"
  },
  {
    "text": "lambda first so aws lambda is our serverless compute service where you focus on writing code",
    "start": "494240",
    "end": "501280"
  },
  {
    "text": "and don't worry about how it is getting deployed in a runtime environment right so let's see how it works",
    "start": "501280",
    "end": "508800"
  },
  {
    "start": "507000",
    "end": "802000"
  },
  {
    "text": "so when you write a function you choose a language whether it's node python java c",
    "start": "508800",
    "end": "514640"
  },
  {
    "text": "sharp we support most of the popular languages and if the language support is not there you",
    "start": "514640",
    "end": "520000"
  },
  {
    "text": "can bring your own runtime as well and we also support container images",
    "start": "520000",
    "end": "525360"
  },
  {
    "text": "with lambda now so a lot of flexibility in terms of how you want to write code using lambda",
    "start": "525360",
    "end": "531600"
  },
  {
    "text": "and then there are two ways you can call a function either asynchronously or synchronously right so you can directly",
    "start": "531600",
    "end": "536880"
  },
  {
    "text": "call a lambda api synchronously and run the function or function can be",
    "start": "536880",
    "end": "544240"
  },
  {
    "text": "i mean attached to an event so you so you could say when i upload a file onto s3 i want to process that file so when a",
    "start": "544240",
    "end": "550480"
  },
  {
    "text": "file is uploaded you can map function to the event and that function will process the file for you",
    "start": "550480",
    "end": "557279"
  },
  {
    "text": "so both ways are possible and then you have in the function you can",
    "start": "557279",
    "end": "562720"
  },
  {
    "text": "you can kind of write into another database or you can call another service so the way you write your normal",
    "start": "562720",
    "end": "568480"
  },
  {
    "text": "programming you can do with lambda function",
    "start": "568480",
    "end": "573120"
  },
  {
    "text": "so so now with the basic definition of lambda function uh let's see what are the unique",
    "start": "575600",
    "end": "580800"
  },
  {
    "text": "characteristics of a lambda function so it supports up to 10 gb of",
    "start": "580800",
    "end": "586240"
  },
  {
    "text": "ram uh and what does that mean with 10 gb you get 6 vcpus",
    "start": "586240",
    "end": "591440"
  },
  {
    "text": "so whatever ram you choose you get proportional vcpu for your function runtime environment",
    "start": "591440",
    "end": "598080"
  },
  {
    "text": "and you can the function can execute for 15 minute duration a maximum and and you can",
    "start": "598080",
    "end": "604480"
  },
  {
    "text": "upload artifacts up till 10 gb uh of size for images and then you have 512",
    "start": "604480",
    "end": "611040"
  },
  {
    "text": "mb of temporary storage available with the function itself and from a",
    "start": "611040",
    "end": "616959"
  },
  {
    "text": "security perspective we can define who can call this function and what this function can do um so you can say i want",
    "start": "616959",
    "end": "623680"
  },
  {
    "text": "to just call or i'm going to just write to dynamodb so you can give very restrictive access to",
    "start": "623680",
    "end": "629600"
  },
  {
    "text": "functions so that it doesn't go and write to other databases and then",
    "start": "629600",
    "end": "635279"
  },
  {
    "text": "this function have a female worker environment what does it mean is if there is no request coming in",
    "start": "635279",
    "end": "641040"
  },
  {
    "text": "we take away the runtime environment so you don't pay any charges uh if there are no requests",
    "start": "641040",
    "end": "646480"
  },
  {
    "text": "coming and with that uh the application which should run on with these functions should be statless",
    "start": "646480",
    "end": "653440"
  },
  {
    "text": "uh and that's how we scale faster because we don't have to manage state and we kind of spin up multiple lambda",
    "start": "653440",
    "end": "658720"
  },
  {
    "text": "runtime environments but if you need to have a session state we recommend you kind of use",
    "start": "658720",
    "end": "664800"
  },
  {
    "text": "uh out of the proc uh session state either using dynamodb or any other mechanism",
    "start": "664800",
    "end": "672000"
  },
  {
    "text": "which is not part of the your runtime environment lambda function also supports elastic",
    "start": "672000",
    "end": "678399"
  },
  {
    "text": "file system very useful feature when you want to process large files or you want to have",
    "start": "678399",
    "end": "683680"
  },
  {
    "text": "larger libraries which you want to embed into the function you can mount the file system and use those libraries",
    "start": "683680",
    "end": "690640"
  },
  {
    "text": "or you can use it for processing large files as well across multiple functions",
    "start": "690640",
    "end": "696959"
  },
  {
    "text": "and finally you pay per invocation and for runtime duration so you don't pay for idle time",
    "start": "696959",
    "end": "704000"
  },
  {
    "text": "any questions so far hey gosh thanks we do have one question",
    "start": "704000",
    "end": "710399"
  },
  {
    "text": "here that came in from the audience from spagnotoni i did a question on what's the difference between lambda and",
    "start": "710399",
    "end": "716480"
  },
  {
    "text": "fargate in the context of serverless so so lambda gives you um",
    "start": "716480",
    "end": "723519"
  },
  {
    "text": "i mean from fargo perspective again is more towards making containers serverless so you so",
    "start": "723519",
    "end": "730320"
  },
  {
    "text": "when you spin up containers you have to worry about managing containers in ec2",
    "start": "730320",
    "end": "735519"
  },
  {
    "text": "instances and managing the worker environment with farget you don't worry about that and you you you kind of",
    "start": "735519",
    "end": "741680"
  },
  {
    "text": "configure the the number of vcpus needed for that container and then",
    "start": "741680",
    "end": "746880"
  },
  {
    "text": "target takes care of spinning those containers when i mean and lambda and forget both",
    "start": "746880",
    "end": "751920"
  },
  {
    "text": "servers technology when to use what lambda have a limitation of 15 minute duration",
    "start": "751920",
    "end": "757680"
  },
  {
    "text": "farget uh doesn't have because forget uh is more about orchestrating uh containers in a serverless",
    "start": "757680",
    "end": "763519"
  },
  {
    "text": "manner so you can execute any code beyond 15 minute duration so if",
    "start": "763519",
    "end": "768959"
  },
  {
    "text": "you have a long last if you have a process which is running more than 15 minutes of duration you could use",
    "start": "768959",
    "end": "774639"
  },
  {
    "text": "containers using forget in a serverless manner and if you uh if you have a process",
    "start": "774639",
    "end": "780160"
  },
  {
    "text": "which is which is which requires real-time interaction and complete within 15 minutes then",
    "start": "780160",
    "end": "786959"
  },
  {
    "text": "lambda can be used as a serverless technology",
    "start": "786959",
    "end": "792959"
  },
  {
    "text": "great thanks josh appreciate the uh info about the two uh back over to you",
    "start": "792959",
    "end": "799480"
  },
  {
    "text": "now the first question customers ask is how do i size my runtime environment because your",
    "start": "800399",
    "end": "806880"
  },
  {
    "start": "802000",
    "end": "875000"
  },
  {
    "text": "function is depending on the the memory allocated to the function so how do you define what what is the right",
    "start": "806880",
    "end": "813120"
  },
  {
    "text": "size memory for the function and if you see this graph so 3.5 seconds",
    "start": "813120",
    "end": "820160"
  },
  {
    "text": "were taken for a function with 128 mb of ram but when i increase the ram to 1.5 gb uh",
    "start": "820160",
    "end": "828639"
  },
  {
    "text": "response time becomes to becomes 250 milliseconds so",
    "start": "828639",
    "end": "834079"
  },
  {
    "text": "it's drastically reduced when i increase the ram and if you see the cost it is it's slightly reduced i mean it is",
    "start": "834079",
    "end": "839600"
  },
  {
    "text": "not increased when you increase the memory size it was few pennies and then it is further reduced by 10 15",
    "start": "839600",
    "end": "846480"
  },
  {
    "text": "so uh it is not like that if you use a function with higher memory it will it will be more expensive than a lower",
    "start": "846480",
    "end": "853600"
  },
  {
    "text": "memory you need to find a sweet spot between memory and your function execution time",
    "start": "853600",
    "end": "859519"
  },
  {
    "text": "and we have tools like lambda power tuning tools there's a link available",
    "start": "859519",
    "end": "865680"
  },
  {
    "text": "and you can use that to find out what is the sweet spot for your function and that can save you",
    "start": "865680",
    "end": "871199"
  },
  {
    "text": "cost in terms of finding out what is the right configuration for your function",
    "start": "871199",
    "end": "876480"
  },
  {
    "start": "875000",
    "end": "1027000"
  },
  {
    "text": "finally coming to tracing and monitoring so from addressing perspective most of the",
    "start": "876639",
    "end": "883040"
  },
  {
    "text": "time you would be using lambda along with aws otherwise services and you would like to understand the",
    "start": "883040",
    "end": "889120"
  },
  {
    "text": "entire path of the call coming from api gateway to lambda to other services and",
    "start": "889120",
    "end": "894320"
  },
  {
    "text": "you would like to find out are there any bottlenecks in the path and that's where extra comes in",
    "start": "894320",
    "end": "900399"
  },
  {
    "text": "so x-ray has a background process that runs within lambda function and keeps sending segment information",
    "start": "900399",
    "end": "906399"
  },
  {
    "text": "about the lambda function to access service where a service map is created and which can uh which which covers the",
    "start": "906399",
    "end": "913920"
  },
  {
    "text": "requests come from api gateway to lambda to another service so that you can see the com complete traceability of the",
    "start": "913920",
    "end": "919279"
  },
  {
    "text": "request and that's where extra can be very helpful uh to implement observability uh kind of",
    "start": "919279",
    "end": "925680"
  },
  {
    "text": "objectives and a function should also have a structured logging",
    "start": "925680",
    "end": "931199"
  },
  {
    "text": "it helps in easier searching and aggregating and that's where",
    "start": "931199",
    "end": "937279"
  },
  {
    "text": "you can use again there are lambda power tools available from aws labs how to kind of structure",
    "start": "937279",
    "end": "943680"
  },
  {
    "text": "your logs so that they are easily searchable again i mean we can share the links with you so that you do structured",
    "start": "943680",
    "end": "948800"
  },
  {
    "text": "logging as part of your function as part of best practices and uh and then you have the uh",
    "start": "948800",
    "end": "956320"
  },
  {
    "text": "uh you have the custom metrics also using cloud watch logs so what cloud cloudwatch embedded metric",
    "start": "956320",
    "end": "963279"
  },
  {
    "text": "form at emf uh does it you can send a high cardinality uh",
    "start": "963279",
    "end": "969199"
  },
  {
    "text": "matrixes as part of emf to cloud watch logs and there also you can create alerts",
    "start": "969199",
    "end": "975600"
  },
  {
    "text": "on those metrics and finally we also support open telemetry using",
    "start": "975600",
    "end": "982000"
  },
  {
    "text": "lambda layers so you can kind of bring bring in",
    "start": "982000",
    "end": "987680"
  },
  {
    "text": "those kind of i mean lambda layers and then integrate with the open elementary specifications and we also",
    "start": "987680",
    "end": "992800"
  },
  {
    "text": "support third party uh sub control support as well as part of the logging and monitoring",
    "start": "992800",
    "end": "999920"
  },
  {
    "text": "so with that let me move to a demo",
    "start": "1000079",
    "end": "1005720"
  },
  {
    "text": "okay uh can you see my screen",
    "start": "1020560",
    "end": "1025480"
  },
  {
    "start": "1027000",
    "end": "1637000"
  },
  {
    "text": "okay so this is the uh aws management console those of those of you who are seeing for the first time um and we have",
    "start": "1027839",
    "end": "1034880"
  },
  {
    "text": "200 plus services we have services under compute under machine learning",
    "start": "1034880",
    "end": "1040959"
  },
  {
    "text": "and then i mean there are others as well from analytics perspective but lambda comes under compute so let me go to the",
    "start": "1040959",
    "end": "1047360"
  },
  {
    "text": "service and this is the lambda dashboard where you see how many functions i have what",
    "start": "1047360",
    "end": "1054080"
  },
  {
    "text": "storage they are using and what is the concurrency limit upper region that is thousand for me",
    "start": "1054080",
    "end": "1059280"
  },
  {
    "text": "so now let me create the function so when i create the function um there",
    "start": "1059280",
    "end": "1066160"
  },
  {
    "text": "are four options uh when you create a lambda function one is author from scratch",
    "start": "1066160",
    "end": "1071200"
  },
  {
    "text": "you can use a blueprint where there are predefined functions for example getting an object using python language you can",
    "start": "1071200",
    "end": "1076720"
  },
  {
    "text": "choose that and export that function and use it you can also use container image by giving the ecr elastic content",
    "start": "1076720",
    "end": "1083919"
  },
  {
    "text": "registry uh uri and then saying what are criteria supports um and finally you can use our",
    "start": "1083919",
    "end": "1090320"
  },
  {
    "text": "serverless app repository where we have thousands of examples of from third-party developers which you can",
    "start": "1090320",
    "end": "1096160"
  },
  {
    "text": "leverage for example here there's alexa skill kit on factor scale and there are 100k deployments so you can reuse that",
    "start": "1096160",
    "end": "1103440"
  },
  {
    "text": "and build on top of it as well so yeah so let me start with author from",
    "start": "1103440",
    "end": "1108720"
  },
  {
    "text": "scratch i will give function name here and then i'll choose the runtime",
    "start": "1108720",
    "end": "1115120"
  },
  {
    "text": "available uh and it can be net core go java and then you can use your custom runtime",
    "start": "1115120",
    "end": "1123280"
  },
  {
    "text": "as well and then you have to choose whether it is x86 or or rr architecture and then",
    "start": "1123280",
    "end": "1130880"
  },
  {
    "text": "and then you have to choose what permissions you want to give to lambda and it starts with very basic",
    "start": "1130880",
    "end": "1136640"
  },
  {
    "text": "permissions to cloudwatch logs but then you can change the role to whatever you whatever you are looking for you can do",
    "start": "1136640",
    "end": "1142320"
  },
  {
    "text": "that and finally under advanced settings you can do code signing or or you can",
    "start": "1142320",
    "end": "1148320"
  },
  {
    "text": "enable the network to run lambda functions under a vpc so i've i've already created this",
    "start": "1148320",
    "end": "1154880"
  },
  {
    "text": "function so i will not create it and i will go back and show you how how it looks like",
    "start": "1154880",
    "end": "1161760"
  },
  {
    "text": "so this is a function where you can see there are eight lines of code",
    "start": "1162480",
    "end": "1168000"
  },
  {
    "text": "and you can you can upload a new function using a zip file",
    "start": "1168000",
    "end": "1173120"
  },
  {
    "text": "or using a s3 location so both are possible",
    "start": "1173120",
    "end": "1178880"
  },
  {
    "text": "so now let let me go and change this code and show you how i can test this function using the console",
    "start": "1178880",
    "end": "1186720"
  },
  {
    "text": "so i will change the text here save it",
    "start": "1186720",
    "end": "1192960"
  },
  {
    "text": "and then deploy it and i will create a new test event",
    "start": "1192960",
    "end": "1198880"
  },
  {
    "text": "i will keep it empty so i will just give a name and then i will keep it empty right now and",
    "start": "1198880",
    "end": "1204080"
  },
  {
    "text": "then create the test event and i will test it",
    "start": "1204080",
    "end": "1209200"
  },
  {
    "text": "so you can see it has it has printed the new text and",
    "start": "1211039",
    "end": "1216559"
  },
  {
    "text": "below if you see there are logs from the function where it says how much time it took 3.3",
    "start": "1216559",
    "end": "1222480"
  },
  {
    "text": "milliseconds and what is the billing duration so lambda is built per millisecond",
    "start": "1222480",
    "end": "1228080"
  },
  {
    "text": "so yeah it's for four millisecond it is built and if you see the size was 128 mb",
    "start": "1228080",
    "end": "1233120"
  },
  {
    "text": "and the you the memory usage is 53 mb so it gives all those kind of details",
    "start": "1233120",
    "end": "1240000"
  },
  {
    "text": "so let's let's show you some other things as well and under configuration you can change",
    "start": "1241120",
    "end": "1246799"
  },
  {
    "text": "the memory size till 10 gb and uh",
    "start": "1246799",
    "end": "1252240"
  },
  {
    "text": "you can also uh change yeah here and you can change the timeout",
    "start": "1252240",
    "end": "1258080"
  },
  {
    "text": "as well and you can change the role",
    "start": "1258080",
    "end": "1263000"
  },
  {
    "text": "and yeah very important triggers so when you add trigger you can say from which event function should be called so you",
    "start": "1263440",
    "end": "1268720"
  },
  {
    "text": "can choose let's say api gateway so when a call comes to api gateway you want to invoke a lambda function you can do that",
    "start": "1268720",
    "end": "1275600"
  },
  {
    "text": "um so api gateway event is available and you can see there are multiple services available so let me show you s3",
    "start": "1275600",
    "end": "1284080"
  },
  {
    "text": "so under s3 you could you could choose what events i mean you can choose on the",
    "start": "1284080",
    "end": "1290880"
  },
  {
    "text": "port post or even types and then kind of attach your function mapping and",
    "start": "1290880",
    "end": "1296240"
  },
  {
    "text": "it will call that under permissions this is more about",
    "start": "1296240",
    "end": "1302880"
  },
  {
    "text": "what function can do so right now you can see it has a very basic permission only to cloud watch logs but you can",
    "start": "1302880",
    "end": "1308320"
  },
  {
    "text": "change the role and then it will have more more permissions as well and as part of destination uh what this",
    "start": "1308320",
    "end": "1314159"
  },
  {
    "text": "does is whenever when your function is called uh i've either asynchronous",
    "start": "1314159",
    "end": "1319760"
  },
  {
    "text": "if there is a failure or success you can say the function can kind of put details",
    "start": "1319760",
    "end": "1325039"
  },
  {
    "text": "into the sns topic or sksq without you writing a single line of code so automatically",
    "start": "1325039",
    "end": "1330640"
  },
  {
    "text": "and the details will go to this topic or queue on failure of the function or on success",
    "start": "1330640",
    "end": "1335840"
  },
  {
    "text": "so this is a new feature um just launched and uh you don't i mean very beneficial if you have uh",
    "start": "1335840",
    "end": "1341679"
  },
  {
    "text": "you want to kind of automate those failures in success you can have environment variables um",
    "start": "1341679",
    "end": "1347280"
  },
  {
    "text": "kind of edit you can be leveraged as part of the function code and you need to tag it you can attach a vpc i mean",
    "start": "1347280",
    "end": "1353600"
  },
  {
    "text": "where lambda can run under a vpc and finally",
    "start": "1353600",
    "end": "1359200"
  },
  {
    "text": "let's talk about monitoring and operations so under monitoring from observability",
    "start": "1359200",
    "end": "1364640"
  },
  {
    "text": "perspective metrics logs and traces right so under metrics you could see",
    "start": "1364640",
    "end": "1370559"
  },
  {
    "text": "how many invocations of the functions have happened what is the duration of the function how much time it is",
    "start": "1370880",
    "end": "1377120"
  },
  {
    "text": "taking error count throttles right concurrent execution of the function it gives all those kind of matrices which",
    "start": "1377120",
    "end": "1382960"
  },
  {
    "text": "is helpful in terms of understanding how your function is behaving and then the logs it will just tell you",
    "start": "1382960",
    "end": "1388559"
  },
  {
    "text": "the log streams of how that function is executed and then if you put any logs it will show those",
    "start": "1388559",
    "end": "1393919"
  },
  {
    "text": "logs here and traces is more around x-ray which we haven't enabled here but then yeah you can see the entire service map",
    "start": "1393919",
    "end": "1401200"
  },
  {
    "text": "so this was on console let me move to the ide so i'm using visual studio code you can install aws um plugin for visual",
    "start": "1401200",
    "end": "1408720"
  },
  {
    "text": "studio code uh and when you install plugin and configure it you can see the regions",
    "start": "1408720",
    "end": "1413760"
  },
  {
    "text": "available as part of your access key and secret key so i have to",
    "start": "1413760",
    "end": "1418960"
  },
  {
    "text": "if i go under lambda and refresh it i will have the new function here and from here itself i can",
    "start": "1418960",
    "end": "1424559"
  },
  {
    "text": "upload the function so as a developer you can do that and",
    "start": "1424559",
    "end": "1430159"
  },
  {
    "text": "there is another way using uh sam which is a serverless application model it's an open source framework for building",
    "start": "1430159",
    "end": "1436159"
  },
  {
    "text": "serverless applications and uh i mean you you what it gives is you to",
    "start": "1436159",
    "end": "1442159"
  },
  {
    "text": "install the same client and then what it gives you is a kind of a environment where you can test your",
    "start": "1442159",
    "end": "1447919"
  },
  {
    "text": "function locally without going to aws so you can debug test your function locally",
    "start": "1447919",
    "end": "1453200"
  },
  {
    "text": "using sam local and once you are ready then you can go ahead and deploy it on aws so you can",
    "start": "1453200",
    "end": "1459360"
  },
  {
    "text": "save so much of time in your local development environment and then kind of deploy it on nws",
    "start": "1459360",
    "end": "1465279"
  },
  {
    "text": "so that was a quick demo of how you can do it on console and on through your",
    "start": "1465279",
    "end": "1471120"
  },
  {
    "text": "ide so i mean are there any questions for me",
    "start": "1471120",
    "end": "1478158"
  },
  {
    "text": "hey kosh thanks that information um so do you have a question for the audience and i have a question myself too um does",
    "start": "1478320",
    "end": "1483440"
  },
  {
    "text": "aws lambda support the and processes and environment variables is kind of what you were going through there",
    "start": "1483440",
    "end": "1489200"
  },
  {
    "text": "yes very good question so lambda allows you to use normal language and operating system features such as creating",
    "start": "1489200",
    "end": "1495360"
  },
  {
    "text": "additional threads and processes and you can launch processes using any language supported by amazon linux so yeah that's",
    "start": "1495360",
    "end": "1501679"
  },
  {
    "text": "possible okay great uh and then i do have a question from the audience from mr builder 10. uh mr builder 10 is",
    "start": "1501679",
    "end": "1508880"
  },
  {
    "text": "wondering can you automate serverless deployments in lambda and fargate",
    "start": "1508880",
    "end": "1514559"
  },
  {
    "text": "sorry can you come again what is the question can you automate serverless deployments in lambda for fargate",
    "start": "1514559",
    "end": "1522080"
  },
  {
    "text": "so how do okay so question is how do i automate serverless deployments that is",
    "start": "1523520",
    "end": "1529039"
  },
  {
    "text": "possible that is possible through serverless application model uh so you can write construct uh using serverless",
    "start": "1529039",
    "end": "1535039"
  },
  {
    "text": "application model in terms of okay i have an event i want to map my function all this can be written under a",
    "start": "1535039",
    "end": "1540960"
  },
  {
    "text": "serverless application model and through that when and what it server application model does it it kind of the",
    "start": "1540960",
    "end": "1547840"
  },
  {
    "text": "same templates convert your uh code into cloudformation template behind the scene and run it on aws so",
    "start": "1547840",
    "end": "1553039"
  },
  {
    "text": "you can completely automate your deployment of serverless infrastructure using sam and there are other uh",
    "start": "1553039",
    "end": "1559600"
  },
  {
    "text": "kind of frameworks also available like serverless for lambda",
    "start": "1559600",
    "end": "1564720"
  },
  {
    "text": "thanks cash i'll post a link into the chat about the aws serverless access model for that backup",
    "start": "1564720",
    "end": "1571919"
  },
  {
    "text": "let me share my screen",
    "start": "1571919",
    "end": "1574960"
  },
  {
    "text": "so akash while we're we're grabbing that screen uh there was something in your demo that piqued my interest um i",
    "start": "1583039",
    "end": "1589120"
  },
  {
    "text": "noticed you had a in your runtime configuration uh a setting for architecture and that's actually a quite",
    "start": "1589120",
    "end": "1595919"
  },
  {
    "text": "a new feature to choose from either x86 or arm architecture and brand new feature so",
    "start": "1595919",
    "end": "1603279"
  },
  {
    "text": "you know we we've talked about graviton 2 in the past similarly on lambda you can run your",
    "start": "1603279",
    "end": "1610159"
  },
  {
    "text": "code in with arm and that gives you up to 34 percent better price performance",
    "start": "1610159",
    "end": "1615520"
  },
  {
    "text": "so new feature wanted to call that out uh last last few weeks here and um that",
    "start": "1615520",
    "end": "1621520"
  },
  {
    "text": "should just be very straightforward if with you have the packages that are supported there and you can even run",
    "start": "1621520",
    "end": "1626880"
  },
  {
    "text": "that that change from your docker files so yeah",
    "start": "1626880",
    "end": "1632159"
  },
  {
    "text": "good stuff thanks akash let me jump into the rest of the architecture here so",
    "start": "1632159",
    "end": "1638000"
  },
  {
    "start": "1637000",
    "end": "1834000"
  },
  {
    "text": "let's talk amazon api gateway right um you know api gateway acts as the front",
    "start": "1638000",
    "end": "1643520"
  },
  {
    "text": "door for your applications taxes data business logic functionality from your",
    "start": "1643520",
    "end": "1648559"
  },
  {
    "text": "backend services right you know such as workloads running on the you know the code running on your",
    "start": "1648559",
    "end": "1654559"
  },
  {
    "text": "aws lambda function right or any web application or any real-time communication apps",
    "start": "1654559",
    "end": "1660960"
  },
  {
    "text": "so this is the front door right and when i say you know apis are the the front door",
    "start": "1660960",
    "end": "1666559"
  },
  {
    "text": "of microservices like why microservices i really mean they're they're an architectural and organizational approach to software",
    "start": "1666559",
    "end": "1673120"
  },
  {
    "text": "development where software is composed of small independent services that communicate over really well-defined apis",
    "start": "1673120",
    "end": "1681039"
  },
  {
    "text": "and we'll dive into this here so the real benefits really of api gateway",
    "start": "1681039",
    "end": "1687360"
  },
  {
    "text": "um there's six you know we could talk about here and and some of these are more familiar to to folks than others",
    "start": "1687360",
    "end": "1693679"
  },
  {
    "text": "right being fully managed to have automatic scaling just to pay for each request you know we've seen",
    "start": "1693679",
    "end": "1699600"
  },
  {
    "text": "this these are very similar benefits to what what lambda gives you like resiliency for example api gateway gives",
    "start": "1699600",
    "end": "1705120"
  },
  {
    "text": "you the resiliency across routing over multiple availability zones",
    "start": "1705120",
    "end": "1710480"
  },
  {
    "text": "you don't need to worry about that for for api gateway that's fully managed and you know you",
    "start": "1710480",
    "end": "1715600"
  },
  {
    "text": "really pay for only what you use there and you know there's tiered pricing as well the more you do use it the lower",
    "start": "1715600",
    "end": "1722159"
  },
  {
    "text": "your pricing gets etc so this is really friendly in an event driven event driven and api driven architecture",
    "start": "1722159",
    "end": "1730399"
  },
  {
    "text": "you pay for exactly what you use two it supports really popular protocols",
    "start": "1730399",
    "end": "1735600"
  },
  {
    "text": "such as you know http um you know rest and websocket",
    "start": "1735600",
    "end": "1740960"
  },
  {
    "text": "and i'll cover that in the next slide you know what are the major differences there uh three you know native",
    "start": "1740960",
    "end": "1746159"
  },
  {
    "text": "connectivity to really key aws services like lambda is a",
    "start": "1746159",
    "end": "1751679"
  },
  {
    "text": "great great integration uh waff web application firewall x-ray for for tracing and observability",
    "start": "1751679",
    "end": "1759120"
  },
  {
    "text": "which you covered in your demo a little bit and four you know api gateway can be",
    "start": "1759120",
    "end": "1765440"
  },
  {
    "text": "entirely private it doesn't need to be over public public access this can be for your own vpcs your virtual private",
    "start": "1765440",
    "end": "1771200"
  },
  {
    "text": "clouds and you know for example internal apis if you have compliance needs you don't need to expose your endpoints externally",
    "start": "1771200",
    "end": "1778960"
  },
  {
    "text": "five this is is customizable api game is customizable so for example if you have",
    "start": "1778960",
    "end": "1784559"
  },
  {
    "text": "your own authorization and authentication needs you can do your own custom",
    "start": "1784559",
    "end": "1789760"
  },
  {
    "text": "custom authors authorization for yourself and that that's great it's not just a you",
    "start": "1789760",
    "end": "1796159"
  },
  {
    "text": "know a set and forget you can actually customize and have lambda authorizers",
    "start": "1796159",
    "end": "1801440"
  },
  {
    "text": "etc and six you mentioned this before swagger support so you know you can use",
    "start": "1801440",
    "end": "1807120"
  },
  {
    "text": "your own swagger api definitions um you know if you want to import your swagger api definitions uh we have an open",
    "start": "1807120",
    "end": "1814080"
  },
  {
    "text": "source tool for this as well um so this it's very easy to to keep your your",
    "start": "1814080",
    "end": "1819520"
  },
  {
    "text": "really well-defined apis and actually modify and update them through api gateway",
    "start": "1819520",
    "end": "1826480"
  },
  {
    "text": "so let's dive into that that number two there you know really types of apis",
    "start": "1826480",
    "end": "1831760"
  },
  {
    "text": "right like supported protocols here there's three major protocols supported",
    "start": "1831760",
    "end": "1837760"
  },
  {
    "start": "1834000",
    "end": "2028000"
  },
  {
    "text": "there's http apis rest apis and on the right websocket apis",
    "start": "1837760",
    "end": "1843279"
  },
  {
    "text": "and under the umbrella of restful is the http and rest apis",
    "start": "1843279",
    "end": "1850000"
  },
  {
    "text": "on the left i mean both http and rest apis are meant for short-lived communications this is like you know",
    "start": "1850000",
    "end": "1855840"
  },
  {
    "text": "your request response pairs such as standard http methods like get post put delete etc",
    "start": "1855840",
    "end": "1863120"
  },
  {
    "text": "these are stateless meaning your client is sending a request to a service and the service is responding synchronously",
    "start": "1863120",
    "end": "1869120"
  },
  {
    "text": "back to the client so this is a great use case for you know like web applications like a message board",
    "start": "1869120",
    "end": "1875200"
  },
  {
    "text": "um or you want to do a bank transfer you know these these are also highly cashable requests and quite you know",
    "start": "1875200",
    "end": "1882640"
  },
  {
    "text": "resilient to network errors you know being being stateless um on the right you know",
    "start": "1882640",
    "end": "1889039"
  },
  {
    "text": "and i will cover a little bit more how to choose between http and rest but on the right really quickly here",
    "start": "1889039",
    "end": "1894960"
  },
  {
    "text": "websocket apis open the door to richer bi-directional communication where clients can push data simultaneously",
    "start": "1894960",
    "end": "1902880"
  },
  {
    "text": "and keeping the connection open allows you to avoid overhead or re-establishing that",
    "start": "1902880",
    "end": "1908159"
  },
  {
    "text": "connection right if you want to build say a really high frequency traffic service with small payloads",
    "start": "1908159",
    "end": "1914799"
  },
  {
    "text": "that's a great use case for you know like chat apps or multiplayer games right or a trading platform for",
    "start": "1914799",
    "end": "1921519"
  },
  {
    "text": "example so just back to compare to help you choose",
    "start": "1921519",
    "end": "1926880"
  },
  {
    "text": "between one slide back for a moment here just to help you choose between http and rest",
    "start": "1926880",
    "end": "1932240"
  },
  {
    "text": "apis the real difference here is http apis are very lightweight and lower cost",
    "start": "1932240",
    "end": "1940240"
  },
  {
    "text": "you know but the trade-off here like rest apis are very feature-rich with a lot of aws",
    "start": "1940240",
    "end": "1945840"
  },
  {
    "text": "integrations so if you if you need to integrate to say you know aws waff you know you",
    "start": "1945840",
    "end": "1952960"
  },
  {
    "text": "you'll be choosing the rest option right um so future rich versus like very very lightweight and low latency with http",
    "start": "1952960",
    "end": "1960640"
  },
  {
    "text": "and um we can paste a comparison of both of these here",
    "start": "1960640",
    "end": "1965919"
  },
  {
    "text": "so um wondering any questions from um the chat rob at this point",
    "start": "1965919",
    "end": "1974080"
  },
  {
    "text": "hey thanks i uh no question from the audience so audience please make sure to post your questions here but i do have a",
    "start": "1974080",
    "end": "1979360"
  },
  {
    "text": "question so you talked about uh http and api and websockets um but what if we",
    "start": "1979360",
    "end": "1986159"
  },
  {
    "text": "want to use graphql apis does aws have a recommendation on serverless usage with graphql",
    "start": "1986159",
    "end": "1992720"
  },
  {
    "text": "yeah rob so we have a service specifically built around to service this this is um adabus",
    "start": "1992720",
    "end": "2000080"
  },
  {
    "text": "appsync and that's that's a great use case like a lot of mobile use cases uh graphql to do",
    "start": "2000080",
    "end": "2007440"
  },
  {
    "text": "multiple requests at once to query multiple sources it's very uh optimized for that so",
    "start": "2007440",
    "end": "2012880"
  },
  {
    "text": "um i would definitely recommend looking at appsync for graphql great thanks um i'll go ahead and post a",
    "start": "2012880",
    "end": "2019360"
  },
  {
    "text": "link then to appsync in our chat as well but back over to you thanks so let's let's actually talk",
    "start": "2019360",
    "end": "2026159"
  },
  {
    "text": "architecture for like what does an architecture diagram look like with with api gateway with lambda here and",
    "start": "2026159",
    "end": "2032799"
  },
  {
    "start": "2028000",
    "end": "2317000"
  },
  {
    "text": "first and foremost write you know let's break this arc let's break this diagram down here all the way from the client",
    "start": "2032799",
    "end": "2038880"
  },
  {
    "text": "all the way to the the back end server and you know first of all there's three",
    "start": "2038880",
    "end": "2044559"
  },
  {
    "text": "api endpoint types with api gateway there's edge optimized on the top here there's regional",
    "start": "2044559",
    "end": "2051679"
  },
  {
    "text": "and then there's private at the bottom and you'll choose the the type based on where the majority of your api traffic",
    "start": "2051679",
    "end": "2058320"
  },
  {
    "text": "originates from and you know on the top we have the most diverse option here really",
    "start": "2058320",
    "end": "2065200"
  },
  {
    "text": "if an edge optimized api endpoint is the default option for api gateway um for",
    "start": "2065200",
    "end": "2071760"
  },
  {
    "text": "for rest apis and it's it's the best for really distributed you know especially geographically",
    "start": "2071760",
    "end": "2078079"
  },
  {
    "text": "and uh api requests are routed to the nearest cloud front point of point of",
    "start": "2078079",
    "end": "2083280"
  },
  {
    "text": "presence that's a pop you know in our docs and um this automatically gives you a",
    "start": "2083280",
    "end": "2089599"
  },
  {
    "text": "fully managed cloudfront distribution so um over 100 plus point of presence you",
    "start": "2089599",
    "end": "2094960"
  },
  {
    "text": "could you could use there globally um the the next major one is if you are you",
    "start": "2094960",
    "end": "2101200"
  },
  {
    "text": "know intending to service clients from the same region and this is the regional api endpoint so",
    "start": "2101200",
    "end": "2107359"
  },
  {
    "text": "for example you have a client running a lambda function that calls an api in the same region",
    "start": "2107359",
    "end": "2113760"
  },
  {
    "text": "or an api is intended to serve a very like a smaller number of clients with really high demands um you know a",
    "start": "2113760",
    "end": "2120800"
  },
  {
    "text": "regional api reduces that connection overhead right and this is in through your own customer",
    "start": "2120800",
    "end": "2127920"
  },
  {
    "text": "customer managed cloudfront distribution right and you know lastly at the bottom here",
    "start": "2127920",
    "end": "2134560"
  },
  {
    "text": "applications and services you know running say in a vpc you're a vpc that say you know you own for",
    "start": "2134560",
    "end": "2141040"
  },
  {
    "text": "example your own backend services and you know this is basically where you can",
    "start": "2141040",
    "end": "2147680"
  },
  {
    "text": "have a then interface a vpc endpoint which is created in your vpc and that can be a",
    "start": "2147680",
    "end": "2155040"
  },
  {
    "text": "private communication channel just for your own api this is really it's best if you have like you know",
    "start": "2155040",
    "end": "2161440"
  },
  {
    "text": "internal apis or compliance needs for that",
    "start": "2161440",
    "end": "2166079"
  },
  {
    "text": "next you know once your request gets into to api gateway to be processed",
    "start": "2166640",
    "end": "2172400"
  },
  {
    "text": "here's where um here's where here's what we're dealing with we have",
    "start": "2172400",
    "end": "2178480"
  },
  {
    "text": "first and foremost at the top we're dealing you can actually have that immediate caching from the",
    "start": "2178480",
    "end": "2184000"
  },
  {
    "text": "platform distribution i mentioned and if you're using a a rest",
    "start": "2184000",
    "end": "2190560"
  },
  {
    "text": "a rest option this allows you to actually cache and improve your your endpoints response",
    "start": "2190560",
    "end": "2196560"
  },
  {
    "text": "time so with you know you could basically reduce the number of calls made to your um rate made to your endpoint and then",
    "start": "2196560",
    "end": "2203520"
  },
  {
    "text": "improve your latency and reduce the traffic to your backend services as well if you're able to just give you know the",
    "start": "2203520",
    "end": "2210400"
  },
  {
    "text": "common answers for for your um your requests and at the bottom you know we're seeing",
    "start": "2210400",
    "end": "2215520"
  },
  {
    "text": "cloud watch monitoring what is that really giving us so that is giving us all your your important metrics of say",
    "start": "2215520",
    "end": "2222079"
  },
  {
    "text": "you know how many 5xx how many errors or four xx errors how much data did i transfer you know",
    "start": "2222079",
    "end": "2228880"
  },
  {
    "text": "the most important things about your traffic that you really care about here am i having errors in my back end what's",
    "start": "2228880",
    "end": "2234320"
  },
  {
    "text": "my success ratios and what's my latency are our customers getting um you know great great response times",
    "start": "2234320",
    "end": "2242079"
  },
  {
    "text": "from from my total end to end um requests here so",
    "start": "2242079",
    "end": "2247119"
  },
  {
    "text": "lastly um once we're talking with the back end here you",
    "start": "2247119",
    "end": "2253119"
  },
  {
    "text": "you know first and foremost perfect use case for api gateways with lambda functions",
    "start": "2253119",
    "end": "2259040"
  },
  {
    "text": "we can integrate seamlessly with lambda and have our responses there",
    "start": "2259040",
    "end": "2264320"
  },
  {
    "text": "you can have public endpoints off of ec2 instances as well or any other aws service really responding",
    "start": "2264320",
    "end": "2271680"
  },
  {
    "text": "even you can reach out to other publicly accessible endpoints if you do need to you know enrich data from other other",
    "start": "2271680",
    "end": "2278000"
  },
  {
    "text": "sources and in the green bottom right in the green box here we can actually have endpoints in vpcs",
    "start": "2278000",
    "end": "2285520"
  },
  {
    "text": "or even it using aws direct connect like a private line to say",
    "start": "2285520",
    "end": "2291280"
  },
  {
    "text": "an on-premises data center and that's totally a very very proper",
    "start": "2291280",
    "end": "2296800"
  },
  {
    "text": "response pattern you can have with api gateways so um",
    "start": "2296800",
    "end": "2303280"
  },
  {
    "text": "yeah good stuff so rob do we have any questions from from the chat here",
    "start": "2303280",
    "end": "2310078"
  },
  {
    "text": "uh thanks ed i don't have any questions right now from the audience so i'll let you continue on um appreciate it",
    "start": "2310320",
    "end": "2316640"
  },
  {
    "text": "for sure so let's talk authorization authentication just for a moment here so",
    "start": "2316640",
    "end": "2321680"
  },
  {
    "start": "2317000",
    "end": "2437000"
  },
  {
    "text": "there's four major types um you know of authorization here and and this is even",
    "start": "2321680",
    "end": "2326880"
  },
  {
    "text": "more heavy undifferentiated heavy lifting that api gateway can take care of and",
    "start": "2326880",
    "end": "2333200"
  },
  {
    "text": "first and foremost you know when you know",
    "start": "2333200",
    "end": "2338720"
  },
  {
    "text": "you can have a totally open authentic authentication here so if you",
    "start": "2338720",
    "end": "2343760"
  },
  {
    "text": "if you don't want to you know if it's a very public service anyways that makes total sense to not need",
    "start": "2343760",
    "end": "2349440"
  },
  {
    "text": "further authentication you can have iem identity access management permissions",
    "start": "2349440",
    "end": "2355280"
  },
  {
    "text": "like you know if you have four for there's two parts to that having your your developers um and and your",
    "start": "2355280",
    "end": "2362320"
  },
  {
    "text": "administrators be authenticated properly to edit um you know your api definitions",
    "start": "2362320",
    "end": "2369359"
  },
  {
    "text": "as well to have say iem roles to grant access to uh your",
    "start": "2369359",
    "end": "2375599"
  },
  {
    "text": "you know to access your apis right so that you can have humans and you can have machines i'm authenticated there",
    "start": "2375599",
    "end": "2383040"
  },
  {
    "text": "the third point amazon cognito it's this is a fully this is a separate service which is fully managed and has",
    "start": "2383040",
    "end": "2389280"
  },
  {
    "text": "great integrations to api gateway this you can have you know uh user pools with with",
    "start": "2389280",
    "end": "2397119"
  },
  {
    "text": "thousands or millions of users properly authenticated um and scoped for api gateway",
    "start": "2397119",
    "end": "2403760"
  },
  {
    "text": "and and lastly if you want uh custom use cases here like for land authentication",
    "start": "2403760",
    "end": "2410640"
  },
  {
    "text": "land authorizers you can use lambda like write a lambda function to to have",
    "start": "2410640",
    "end": "2415760"
  },
  {
    "text": "third-party authentication and you know this this is for your own",
    "start": "2415760",
    "end": "2421200"
  },
  {
    "text": "separate access here so custom custom usage is definitely an option as",
    "start": "2421200",
    "end": "2426720"
  },
  {
    "text": "well through lambda functions and",
    "start": "2426720",
    "end": "2431920"
  },
  {
    "text": "perfect so here we go dynamodb let's talk the data tier for a moment",
    "start": "2431920",
    "end": "2438560"
  },
  {
    "start": "2437000",
    "end": "2644000"
  },
  {
    "text": "here um dynamodb is our you know",
    "start": "2438560",
    "end": "2444800"
  },
  {
    "text": "for any scale fast and flexible nosql database service and you know it's designed to handle",
    "start": "2444800",
    "end": "2451520"
  },
  {
    "text": "performance at scale you know millions of requests per second is possible um you know you do not have to",
    "start": "2451520",
    "end": "2457760"
  },
  {
    "text": "worry about uh you know partitioning separately uh handling your own distributed data",
    "start": "2457760",
    "end": "2463760"
  },
  {
    "text": "store you don't need to worry about the servers the underlying servers here",
    "start": "2463760",
    "end": "2469920"
  },
  {
    "text": "patching you know what i mean scaling them separately so really really straightforward capacity management",
    "start": "2469920",
    "end": "2476720"
  },
  {
    "text": "through dynamodb this lends itself to be a really great fit for serverless architecture",
    "start": "2476720",
    "end": "2482880"
  },
  {
    "text": "and you know most you know and when you're ready to take it to",
    "start": "2482880",
    "end": "2488240"
  },
  {
    "text": "enter to production and enterprise use cases um it's giving you your your keys",
    "start": "2488240",
    "end": "2493839"
  },
  {
    "text": "really here like encryption at rest point in time backups um you know very easy to use work workbench exporting",
    "start": "2493839",
    "end": "2501520"
  },
  {
    "text": "data to s3 as well so this is a great use case for you know a",
    "start": "2501520",
    "end": "2508240"
  },
  {
    "text": "super fast no sql key value database at any scale here um",
    "start": "2508240",
    "end": "2514640"
  },
  {
    "text": "let's let me pause here for a second uh do we have any questions from um",
    "start": "2514640",
    "end": "2521760"
  },
  {
    "text": "from the audience here rob hi we do have a couple questions that came in here um so one that came in from",
    "start": "2521760",
    "end": "2528000"
  },
  {
    "text": "ray underscore db222 welcome back ray uh can i build a serverless app on flask",
    "start": "2528000",
    "end": "2533599"
  },
  {
    "text": "with lambda yes uh flask so this is the python um",
    "start": "2533599",
    "end": "2540960"
  },
  {
    "text": "back end i believe right um so akash did you want to handle this one",
    "start": "2540960",
    "end": "2546079"
  },
  {
    "text": "as the lambda expert so if if customers are building microservices using plus then definitely",
    "start": "2546079",
    "end": "2553680"
  },
  {
    "text": "lambda can be used for flask uh i'm running classic application so i just want to give that uh i mean add",
    "start": "2553680",
    "end": "2560880"
  },
  {
    "text": "more points to that question great thanks akash appreciate that i just have one other question to you that came in from cloud crawler uh will you",
    "start": "2560880",
    "end": "2567760"
  },
  {
    "text": "all be explaining cores as well in api gateway um coors i wasn't planning on explaining",
    "start": "2567760",
    "end": "2575680"
  },
  {
    "text": "um cores specifically but uh we can cover that really briefly here so um cores is cross-origin resource",
    "start": "2575680",
    "end": "2583680"
  },
  {
    "text": "sharing and uh this this is a very common feature to",
    "start": "2583680",
    "end": "2588880"
  },
  {
    "text": "in you know enrich your your apis here basically cores core setup do i have a",
    "start": "2588880",
    "end": "2596720"
  },
  {
    "text": "quick answer for cores setup um",
    "start": "2596720",
    "end": "2601040"
  },
  {
    "text": "i need to double check if cores is which i believe it is a supported feature",
    "start": "2601760",
    "end": "2607680"
  },
  {
    "text": "course is supported it is it is supported uh so if the question is whether course is supported",
    "start": "2607680",
    "end": "2613119"
  },
  {
    "text": "yes it is supported you when you create a api you could you can say course enable and then it would start accepting",
    "start": "2613119",
    "end": "2619920"
  },
  {
    "text": "cross origin request as well so yes i mean it is supported with api gateway",
    "start": "2619920",
    "end": "2625839"
  },
  {
    "text": "great thanks and i'll post a link into the chat as well for a little bit more information on how to get started with coors and api gateway so back over to",
    "start": "2625839",
    "end": "2633839"
  },
  {
    "text": "all right thanks rob so let's put all these pieces together we've given you a bunch of different",
    "start": "2633839",
    "end": "2639440"
  },
  {
    "text": "pieces and um we want to explain you know what what this really can look like together",
    "start": "2639440",
    "end": "2645359"
  },
  {
    "start": "2644000",
    "end": "2768000"
  },
  {
    "text": "and end to end right and i want to go full circle back to where we started with the",
    "start": "2645359",
    "end": "2651599"
  },
  {
    "text": "three-tier architecture right um the first thing i want to call out here in in a very simplistic",
    "start": "2651599",
    "end": "2658079"
  },
  {
    "text": "architecture here like you know there are no load balancers there's no auto scaling groups there's",
    "start": "2658079",
    "end": "2663119"
  },
  {
    "text": "no database replicas you know or agents or servers it's you know for aws services and your",
    "start": "2663119",
    "end": "2669440"
  },
  {
    "text": "application code here right um you know let's say we have an angularjs you know web app where the ui",
    "start": "2669440",
    "end": "2676640"
  },
  {
    "text": "you know is is in s3 along with the other html css static contents right",
    "start": "2676640",
    "end": "2683359"
  },
  {
    "text": "when your users download and render this their requests will hit the api gateway which will be writed which will be",
    "start": "2683359",
    "end": "2689119"
  },
  {
    "text": "routed to the to the right lambda functions and run the business logic like your standard crud create read",
    "start": "2689119",
    "end": "2696000"
  },
  {
    "text": "update delete you know operations that make the that make most app apps tick",
    "start": "2696000",
    "end": "2701119"
  },
  {
    "text": "right and lastly you can store and retrieve all of your you know say your your user data session data etc app settings um",
    "start": "2701119",
    "end": "2708880"
  },
  {
    "text": "from you know very resilient scaled uh dynamodb tables right",
    "start": "2708880",
    "end": "2715680"
  },
  {
    "text": "and the big here big key here to me is you know you don't have to worry about",
    "start": "2715680",
    "end": "2721200"
  },
  {
    "text": "any of the other load balancing and and auto scaling groups or replicas you just",
    "start": "2721200",
    "end": "2726480"
  },
  {
    "text": "worry about the key parts of of your app like what differentiates your app really from from every other app out there",
    "start": "2726480",
    "end": "2733920"
  },
  {
    "text": "and so this this is really crisp and clean to me and um illustrates the the major differences",
    "start": "2733920",
    "end": "2741119"
  },
  {
    "text": "that akash was talking about from three-tier architectures uh when we got started in this chat",
    "start": "2741119",
    "end": "2748400"
  },
  {
    "text": "so you know how do you get started really like what are what are the options here",
    "start": "2748560",
    "end": "2754560"
  },
  {
    "text": "to really get started this is the essential toolkit really first and foremost you need an aws",
    "start": "2754560",
    "end": "2760800"
  },
  {
    "text": "account in the middle here and uh you know the the lambda console for example is very",
    "start": "2760800",
    "end": "2768640"
  },
  {
    "start": "2768000",
    "end": "2914000"
  },
  {
    "text": "is very user friendly it has um you know built-in development there you can test your code as well you can",
    "start": "2768640",
    "end": "2774960"
  },
  {
    "text": "look at your your error logging you can look at your debugging you know with x-ray integration as well so a ton of",
    "start": "2774960",
    "end": "2781920"
  },
  {
    "text": "tooling right in the aws console right from your aws accounts on the left we have our command line",
    "start": "2781920",
    "end": "2788480"
  },
  {
    "text": "interface options here like your aws clis um you know your cloud development kit that's the cdk",
    "start": "2788480",
    "end": "2795200"
  },
  {
    "text": "your your sam your server service application models and even you know community tooling such as like docker",
    "start": "2795200",
    "end": "2801680"
  },
  {
    "text": "containers you'd if you if you are more aligned to",
    "start": "2801680",
    "end": "2806960"
  },
  {
    "text": "containers and dockers you can just work with with your docker containers and upload that to run and lambda",
    "start": "2806960",
    "end": "2813359"
  },
  {
    "text": "and you know we've got a ton of helper tools akash showed off the visual studio code",
    "start": "2813359",
    "end": "2820000"
  },
  {
    "text": "there's a tool kit for aws there there's the cfn lint the cloudformation linting tools available",
    "start": "2820000",
    "end": "2826640"
  },
  {
    "text": "as well we we shared a bunch of lambda power tooling to find those sweet spots mentioned like for for vcpu to",
    "start": "2826640",
    "end": "2834000"
  },
  {
    "text": "memory use cases and uh in fact even um we're seeing more",
    "start": "2834000",
    "end": "2839599"
  },
  {
    "text": "and more work benches right like a nosql workbench for for dynamodb",
    "start": "2839599",
    "end": "2844880"
  },
  {
    "text": "to help you write and query um you know",
    "start": "2844880",
    "end": "2850240"
  },
  {
    "text": "optimize your your queries and get the most performance out of dynamodb",
    "start": "2850240",
    "end": "2855280"
  },
  {
    "text": "so that's that's the lay of the land here for getting started with serverless and",
    "start": "2855280",
    "end": "2860960"
  },
  {
    "text": "um at this point you know happy to take any questions from the audience",
    "start": "2860960",
    "end": "2866960"
  },
  {
    "text": "hey i didn't think for that last bit of information there and akash as well is there anything else",
    "start": "2867839",
    "end": "2873040"
  },
  {
    "text": "specifically that you just wanted to share before we go today",
    "start": "2873040",
    "end": "2877359"
  },
  {
    "text": "kind of covered it already with all the different toolkits and everything right all right so everyone today we looked at",
    "start": "2879119",
    "end": "2885280"
  },
  {
    "text": "how you can move from your classic three-tier architecture using aws serverless technologies and also went through some of our most commonly used",
    "start": "2885280",
    "end": "2891440"
  },
  {
    "text": "aws serverless services if there are any questions that were not answered today you can post your questions to forums.aws.amazon.com",
    "start": "2891440",
    "end": "2899440"
  },
  {
    "text": "please email us any feedback to aws supports you at amazon.com we want to hear from you all tell us what else you",
    "start": "2899440",
    "end": "2905839"
  },
  {
    "text": "would like to see on the show thank you for joining us at aws supports you and happy cloud computing",
    "start": "2905839",
    "end": "2912720"
  },
  {
    "text": "thank you",
    "start": "2913520",
    "end": "2915760"
  }
]