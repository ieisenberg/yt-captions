[
  {
    "text": "and then it's independent it's a",
    "start": "7830",
    "end": "10950"
  },
  {
    "text": "separate companies one to another which",
    "start": "10950",
    "end": "13620"
  },
  {
    "text": "do you one thing well and then it's",
    "start": "13620",
    "end": "17460"
  },
  {
    "text": "increased availability and resilience",
    "start": "17460",
    "end": "20070"
  },
  {
    "text": "and because it's polyglot it's easy to",
    "start": "20070",
    "end": "23820"
  },
  {
    "text": "change the technology stack you can",
    "start": "23820",
    "end": "26640"
  },
  {
    "text": "write with Java Python cool language or",
    "start": "26640",
    "end": "31200"
  },
  {
    "text": "any programming language that suits your",
    "start": "31200",
    "end": "34620"
  },
  {
    "text": "flavor and then you can reuse the",
    "start": "34620",
    "end": "39510"
  },
  {
    "text": "surfaces as well and easy to deploy the",
    "start": "39510",
    "end": "43680"
  },
  {
    "text": "benefits of having micro surface",
    "start": "43680",
    "end": "46350"
  },
  {
    "text": "architecture is the agility that you can",
    "start": "46350",
    "end": "50510"
  },
  {
    "text": "create new features of your applications",
    "start": "50510",
    "end": "54180"
  },
  {
    "text": "and it's flexible scaling because with",
    "start": "54180",
    "end": "57960"
  },
  {
    "text": "one micro surface you can only scale",
    "start": "57960",
    "end": "60180"
  },
  {
    "text": "that particular micro surfaces we",
    "start": "60180",
    "end": "62550"
  },
  {
    "text": "thought having to scale all the large",
    "start": "62550",
    "end": "64768"
  },
  {
    "text": "block applications okay and then it's",
    "start": "64769",
    "end": "68070"
  },
  {
    "text": "easy to deploy because it's independent",
    "start": "68070",
    "end": "70520"
  },
  {
    "text": "right and I love this one",
    "start": "70520",
    "end": "74600"
  },
  {
    "text": "technology freedom it allows me you",
    "start": "74600",
    "end": "80060"
  },
  {
    "text": "developers out there to build things",
    "start": "80060",
    "end": "83159"
  },
  {
    "text": "based on they meets and we can reuse the",
    "start": "83159",
    "end": "87539"
  },
  {
    "text": "code again and this resilience so to",
    "start": "87539",
    "end": "92159"
  },
  {
    "text": "think about it",
    "start": "92159",
    "end": "94100"
  },
  {
    "text": "containers as actually a perfect fit of",
    "start": "94100",
    "end": "97469"
  },
  {
    "text": "micro surfaces because it makes surface",
    "start": "97469",
    "end": "101429"
  },
  {
    "text": "simple to model the application and it's",
    "start": "101429",
    "end": "104520"
  },
  {
    "text": "dependencies are packaged into one image",
    "start": "104520",
    "end": "106969"
  },
  {
    "text": "if you use docker you can use docker",
    "start": "106969",
    "end": "110039"
  },
  {
    "text": "file and it supports any app any",
    "start": "110039",
    "end": "113929"
  },
  {
    "text": "language and and this is the best thing",
    "start": "113929",
    "end": "118279"
  },
  {
    "text": "with the traditional approach without",
    "start": "118279",
    "end": "120630"
  },
  {
    "text": "containers we have a tendency to be",
    "start": "120630",
    "end": "124349"
  },
  {
    "text": "dependent in the source code but when we",
    "start": "124349",
    "end": "127409"
  },
  {
    "text": "using containers for micro surfaces that",
    "start": "127409",
    "end": "130530"
  },
  {
    "text": "we move all the source code and we built",
    "start": "130530",
    "end": "132989"
  },
  {
    "text": "one image aalverson artifact that you",
    "start": "132989",
    "end": "136770"
  },
  {
    "text": "can be stored in a repository just like",
    "start": "136770",
    "end": "139470"
  },
  {
    "text": "your source code",
    "start": "139470",
    "end": "141100"
  },
  {
    "text": "and this image you can test and deploy",
    "start": "141100",
    "end": "145050"
  },
  {
    "text": "in several environments let's say that",
    "start": "145050",
    "end": "149020"
  },
  {
    "text": "you have a staging environment you 80 or",
    "start": "149020",
    "end": "152320"
  },
  {
    "text": "even production",
    "start": "152320",
    "end": "153460"
  },
  {
    "text": "you only need one single image container",
    "start": "153460",
    "end": "156490"
  },
  {
    "text": "file and you can run it to its",
    "start": "156490",
    "end": "159750"
  },
  {
    "text": "environments and containers also",
    "start": "159750",
    "end": "164650"
  },
  {
    "text": "simplify the development Staedtler",
    "start": "164650",
    "end": "167410"
  },
  {
    "text": "surface are natural with docker and each",
    "start": "167410",
    "end": "169780"
  },
  {
    "text": "deployment is a new set of containers",
    "start": "169780",
    "end": "173430"
  },
  {
    "text": "and it's making easy to decompose",
    "start": "173430",
    "end": "176230"
  },
  {
    "text": "applications because every micro surface",
    "start": "176230",
    "end": "179470"
  },
  {
    "text": "is self-contained so and also decrease",
    "start": "179470",
    "end": "183850"
  },
  {
    "text": "chanceries if something bad happened you",
    "start": "183850",
    "end": "187240"
  },
  {
    "text": "just simply roll back to one that",
    "start": "187240",
    "end": "189250"
  },
  {
    "text": "particular micro surface only that only",
    "start": "189250",
    "end": "191920"
  },
  {
    "text": "that micro surface so now we've already",
    "start": "191920",
    "end": "198570"
  },
  {
    "text": "talked about micro surface and",
    "start": "198570",
    "end": "200560"
  },
  {
    "text": "containers I'm going to share but",
    "start": "200560",
    "end": "202990"
  },
  {
    "text": "containers on e SS so how many of you",
    "start": "202990",
    "end": "206860"
  },
  {
    "text": "here are using docker okay nice I can",
    "start": "206860",
    "end": "211990"
  },
  {
    "text": "see the guide using docker t-shirt how",
    "start": "211990",
    "end": "214630"
  },
  {
    "text": "are you okay if you are really familiar",
    "start": "214630",
    "end": "220990"
  },
  {
    "text": "with docker you can use Amazon ECS which",
    "start": "220990",
    "end": "226090"
  },
  {
    "text": "is a highly scalable high-performance",
    "start": "226090",
    "end": "228850"
  },
  {
    "text": "container management surface their",
    "start": "228850",
    "end": "230620"
  },
  {
    "text": "supports docker containers and it",
    "start": "230620",
    "end": "232840"
  },
  {
    "text": "enables you to easily run applications",
    "start": "232840",
    "end": "235660"
  },
  {
    "text": "on a managed clusters of Amazon ec2",
    "start": "235660",
    "end": "238180"
  },
  {
    "text": "instance fleet so to ensure that we can",
    "start": "238180",
    "end": "244450"
  },
  {
    "text": "support every workload we've provided",
    "start": "244450",
    "end": "247000"
  },
  {
    "text": "containers running on Amazon ECS a deep",
    "start": "247000",
    "end": "250030"
  },
  {
    "text": "integration with the breadth of a SS",
    "start": "250030",
    "end": "252190"
  },
  {
    "text": "platform features and capabilities like",
    "start": "252190",
    "end": "255210"
  },
  {
    "text": "its integrate well with watch auto",
    "start": "255210",
    "end": "259959"
  },
  {
    "text": "scaling for cluster and tasks",
    "start": "259960",
    "end": "261940"
  },
  {
    "text": "support load balancer using ELB ELB or e",
    "start": "261940",
    "end": "266920"
  },
  {
    "text": "NL be integrated also it I am roles a",
    "start": "266920",
    "end": "270790"
  },
  {
    "text": "security group fourth us",
    "start": "270790",
    "end": "274030"
  },
  {
    "text": "with easiest Amazon easiest and",
    "start": "274030",
    "end": "277810"
  },
  {
    "text": "auto-scaling customers can run",
    "start": "277810",
    "end": "280240"
  },
  {
    "text": "applications that can grow to support",
    "start": "280240",
    "end": "282040"
  },
  {
    "text": "cloud scale applications so this is a",
    "start": "282040",
    "end": "289470"
  },
  {
    "text": "diagram of what",
    "start": "289470",
    "end": "291100"
  },
  {
    "text": "ECS is so easy s is actually built on a",
    "start": "291100",
    "end": "295780"
  },
  {
    "text": "fleet of ec2 instance this is cluster",
    "start": "295780",
    "end": "298690"
  },
  {
    "text": "that you want you define by yourself",
    "start": "298690",
    "end": "300480"
  },
  {
    "text": "and within the cluster you build a fleet",
    "start": "300480",
    "end": "303970"
  },
  {
    "text": "of ec2 instance in which you won your",
    "start": "303970",
    "end": "307390"
  },
  {
    "text": "containers run so these containers with",
    "start": "307390",
    "end": "312520"
  },
  {
    "text": "what we call as tasks and service in",
    "start": "312520",
    "end": "314650"
  },
  {
    "text": "Amazon ECS and in each ec2 instance that",
    "start": "314650",
    "end": "320290"
  },
  {
    "text": "runs your own container applications it",
    "start": "320290",
    "end": "323320"
  },
  {
    "text": "has ECS agents that helps you to manage",
    "start": "323320",
    "end": "328270"
  },
  {
    "text": "the engine and then it can have the key",
    "start": "328270",
    "end": "330910"
  },
  {
    "text": "fairly store as well so and I also have",
    "start": "330910",
    "end": "334420"
  },
  {
    "text": "the integration with the load balancer",
    "start": "334420",
    "end": "336910"
  },
  {
    "text": "so when it comes to Amazon SES if you",
    "start": "336910",
    "end": "342280"
  },
  {
    "text": "use ECS you can find that actually it's",
    "start": "342280",
    "end": "346030"
  },
  {
    "text": "a bill in all you need to scale",
    "start": "346030",
    "end": "349060"
  },
  {
    "text": "applications using containerize with",
    "start": "349060",
    "end": "351790"
  },
  {
    "text": "docker but how about kubernetes I know a",
    "start": "351790",
    "end": "359710"
  },
  {
    "text": "lot of customers also running kubernetes",
    "start": "359710",
    "end": "363040"
  },
  {
    "text": "and this is really interesting I took",
    "start": "363040",
    "end": "366880"
  },
  {
    "text": "this survey from CN CF 2017 survey that",
    "start": "366880",
    "end": "371410"
  },
  {
    "text": "shows that 63% of kubernetes workload",
    "start": "371410",
    "end": "376120"
  },
  {
    "text": "run on AWS ok so this is a really",
    "start": "376120",
    "end": "382360"
  },
  {
    "text": "fascinating FAQ and in fact we listen",
    "start": "382360",
    "end": "386200"
  },
  {
    "text": "and that's why last year during rain in",
    "start": "386200",
    "end": "390360"
  },
  {
    "text": "2017 we've built elastic container",
    "start": "390360",
    "end": "393610"
  },
  {
    "text": "surface for kubernetes or in short",
    "start": "393610",
    "end": "396190"
  },
  {
    "text": "Amazon ETS",
    "start": "396190",
    "end": "399570"
  },
  {
    "text": "so as you can see here it's with I guess",
    "start": "399740",
    "end": "405120"
  },
  {
    "text": "the complexity of standing up your own",
    "start": "405120",
    "end": "407310"
  },
  {
    "text": "communities control plane is really",
    "start": "407310",
    "end": "409260"
  },
  {
    "text": "simplified let's say you want to deploy",
    "start": "409260",
    "end": "411300"
  },
  {
    "text": "containers in different availability",
    "start": "411300",
    "end": "413460"
  },
  {
    "text": "zones you want to deploy in everybody's",
    "start": "413460",
    "end": "416790"
  },
  {
    "text": "on one everybody's on - and everybody's",
    "start": "416790",
    "end": "422310"
  },
  {
    "text": "on tree all you need to do to manage it",
    "start": "422310",
    "end": "426360"
  },
  {
    "text": "is only she connect to my cluster dot",
    "start": "426360",
    "end": "430080"
  },
  {
    "text": "eks dot Amazon AWS comm so it makes",
    "start": "430080",
    "end": "434130"
  },
  {
    "text": "really easy that your Walker nodes can",
    "start": "434130",
    "end": "436380"
  },
  {
    "text": "check into a cluster and you can instill",
    "start": "436380",
    "end": "438960"
  },
  {
    "text": "interact with your company's kubernetes",
    "start": "438960",
    "end": "441180"
  },
  {
    "text": "cluster through the tooling you already",
    "start": "441180",
    "end": "443520"
  },
  {
    "text": "know and familiarize with ok so but",
    "start": "443520",
    "end": "450560"
  },
  {
    "text": "there's also a lot of feedback from our",
    "start": "450560",
    "end": "453780"
  },
  {
    "text": "customers because they already been",
    "start": "453780",
    "end": "457050"
  },
  {
    "text": "using containers a lot and they want to",
    "start": "457050",
    "end": "462200"
  },
  {
    "text": "use only this container so they can",
    "start": "462200",
    "end": "465660"
  },
  {
    "text": "enable our focus on applications so we",
    "start": "465660",
    "end": "469770"
  },
  {
    "text": "took this feedback and we have Walker of",
    "start": "469770",
    "end": "473550"
  },
  {
    "text": "the past year to build a technology that",
    "start": "473550",
    "end": "476910"
  },
  {
    "text": "works with Amazon SES which allows",
    "start": "476910",
    "end": "479669"
  },
  {
    "text": "customers to focus entirely on your",
    "start": "479669",
    "end": "482160"
  },
  {
    "text": "applications and walk with their",
    "start": "482160",
    "end": "484530"
  },
  {
    "text": "applications directly at the container",
    "start": "484530",
    "end": "486780"
  },
  {
    "text": "or task level ok so last year also",
    "start": "486780",
    "end": "492060"
  },
  {
    "text": "during - we announced AWS forget ok",
    "start": "492060",
    "end": "496820"
  },
  {
    "text": "forgets is surface that you can run",
    "start": "496820",
    "end": "500669"
  },
  {
    "text": "containers without managing servers or",
    "start": "500669",
    "end": "502830"
  },
  {
    "text": "clusters I'm going to show you the",
    "start": "502830",
    "end": "505500"
  },
  {
    "text": "difference between the easy to launch",
    "start": "505500",
    "end": "507419"
  },
  {
    "text": "type and forget the benefits of using",
    "start": "507419",
    "end": "511020"
  },
  {
    "text": "area based forget is there's no instance",
    "start": "511020",
    "end": "514620"
  },
  {
    "text": "to manage and it's built on test native",
    "start": "514620",
    "end": "518370"
  },
  {
    "text": "API with a resource based pricing so",
    "start": "518370",
    "end": "523070"
  },
  {
    "text": "imagine that you have",
    "start": "523070",
    "end": "526600"
  },
  {
    "text": "a container image and then you want to",
    "start": "526600",
    "end": "531519"
  },
  {
    "text": "deploy it on your own forget you only",
    "start": "531519",
    "end": "534910"
  },
  {
    "text": "need to deploy your containers and",
    "start": "534910",
    "end": "537480"
  },
  {
    "text": "because it's a fully managed surface of",
    "start": "537480",
    "end": "540100"
  },
  {
    "text": "a doctor of Amazon SES you don't need to",
    "start": "540100",
    "end": "545410"
  },
  {
    "text": "manage all the clusters you don't need",
    "start": "545410",
    "end": "547060"
  },
  {
    "text": "to manage all infrastructures it's been",
    "start": "547060",
    "end": "549639"
  },
  {
    "text": "already managed bifurcate so as you can",
    "start": "549639",
    "end": "554529"
  },
  {
    "text": "see here in this diagram if you want to",
    "start": "554529",
    "end": "559360"
  },
  {
    "text": "have a docker architecture you need to",
    "start": "559360",
    "end": "564550"
  },
  {
    "text": "build few ec2 instance right",
    "start": "564550",
    "end": "568329"
  },
  {
    "text": "this is using Amazon ECS and then you",
    "start": "568329",
    "end": "571300"
  },
  {
    "text": "need to manage your each of this cluster",
    "start": "571300",
    "end": "573790"
  },
  {
    "text": "and easy to fleets so with Amazon is yes",
    "start": "573790",
    "end": "580269"
  },
  {
    "text": "it can helps you to schedule an",
    "start": "580269",
    "end": "581920"
  },
  {
    "text": "orchestrated with the cluster manager",
    "start": "581920",
    "end": "584230"
  },
  {
    "text": "and placement engine but with forget you",
    "start": "584230",
    "end": "589180"
  },
  {
    "text": "don't need to worry anymore about those",
    "start": "589180",
    "end": "592990"
  },
  {
    "text": "cluster of ec2 instance fleet see it's",
    "start": "592990",
    "end": "597790"
  },
  {
    "text": "just a simple that you push your image",
    "start": "597790",
    "end": "600970"
  },
  {
    "text": "containers to the to ECR repositories",
    "start": "600970",
    "end": "606819"
  },
  {
    "text": "and then you ask forget to update the",
    "start": "606819",
    "end": "609459"
  },
  {
    "text": "surface and done so this is a how if I",
    "start": "609459",
    "end": "617380"
  },
  {
    "text": "know there's been a lot of confusion",
    "start": "617380",
    "end": "619120"
  },
  {
    "text": "between forget and ECS and eks so I hope",
    "start": "619120",
    "end": "623980"
  },
  {
    "text": "this diagram will help you understand",
    "start": "623980",
    "end": "626290"
  },
  {
    "text": "better so if you are using docker and",
    "start": "626290",
    "end": "630759"
  },
  {
    "text": "you want to use docker you can use",
    "start": "630759",
    "end": "633040"
  },
  {
    "text": "Amazon SES if you want to use kubernetes",
    "start": "633040",
    "end": "638079"
  },
  {
    "text": "you can use Amazon eks ok so these are",
    "start": "638079",
    "end": "642160"
  },
  {
    "text": "two the difference and when you already",
    "start": "642160",
    "end": "644829"
  },
  {
    "text": "chose your orchestration tool now you",
    "start": "644829",
    "end": "648160"
  },
  {
    "text": "need to define your launch type there",
    "start": "648160",
    "end": "651430"
  },
  {
    "text": "are two launch type the first one is the",
    "start": "651430",
    "end": "653829"
  },
  {
    "text": "easy to launch type and the second is a",
    "start": "653829",
    "end": "657550"
  },
  {
    "text": "SS forget",
    "start": "657550",
    "end": "659439"
  },
  {
    "text": "with the ec2 lunchtime it gives you a",
    "start": "659439",
    "end": "663669"
  },
  {
    "text": "granular control of your service so you",
    "start": "663669",
    "end": "666429"
  },
  {
    "text": "can customize your applications of all",
    "start": "666429",
    "end": "669609"
  },
  {
    "text": "your systems according any kind of your",
    "start": "669609",
    "end": "672129"
  },
  {
    "text": "needs probably like compliance or",
    "start": "672129",
    "end": "674609"
  },
  {
    "text": "additional security but if you don't",
    "start": "674609",
    "end": "679059"
  },
  {
    "text": "need to have a granular control on your",
    "start": "679059",
    "end": "681429"
  },
  {
    "text": "ec2 instance you can use forget so we",
    "start": "681429",
    "end": "688359"
  },
  {
    "text": "have a lot of our customers they have",
    "start": "688359",
    "end": "691509"
  },
  {
    "text": "been adopting Amazon is yes you can see",
    "start": "691509",
    "end": "695769"
  },
  {
    "text": "from a troll a dhobi mihrab calm and",
    "start": "695769",
    "end": "700209"
  },
  {
    "text": "also pass fit so bass would have been",
    "start": "700209",
    "end": "706179"
  },
  {
    "text": "building a platform on Amazon ECS for",
    "start": "706179",
    "end": "708069"
  },
  {
    "text": "years they have currently 400 surface",
    "start": "708069",
    "end": "711220"
  },
  {
    "text": "currently deployed with 50000",
    "start": "711220",
    "end": "714729"
  },
  {
    "text": "deployments 80 container instances six",
    "start": "714729",
    "end": "719289"
  },
  {
    "text": "clusters we span across two regions okay",
    "start": "719289",
    "end": "723929"
  },
  {
    "text": "so we will already see the benefits of",
    "start": "723929",
    "end": "729759"
  },
  {
    "text": "using Amazon is yes he cares and forget",
    "start": "729759",
    "end": "733799"
  },
  {
    "text": "going back to micro services when you're",
    "start": "733799",
    "end": "737679"
  },
  {
    "text": "dealing at scale",
    "start": "737679",
    "end": "738970"
  },
  {
    "text": "like what buzz with a return sometimes",
    "start": "738970",
    "end": "742869"
  },
  {
    "text": "it's really really painful okay so how",
    "start": "742869",
    "end": "748029"
  },
  {
    "text": "many of you have been successfully",
    "start": "748029",
    "end": "751619"
  },
  {
    "text": "deploying your micro surfaces only in",
    "start": "751619",
    "end": "755649"
  },
  {
    "text": "one single operations see so the problem",
    "start": "755649",
    "end": "762189"
  },
  {
    "text": "with micro surfaces which is really good",
    "start": "762189",
    "end": "764339"
  },
  {
    "text": "but when we're doing a skill sometimes",
    "start": "764339",
    "end": "768399"
  },
  {
    "text": "gets hard how did you how to do auto",
    "start": "768399",
    "end": "771459"
  },
  {
    "text": "skill and then how to do the surface",
    "start": "771459",
    "end": "775149"
  },
  {
    "text": "discovery so there's a lot of things and",
    "start": "775149",
    "end": "778659"
  },
  {
    "text": "also how to coordinate micro services so",
    "start": "778659",
    "end": "782499"
  },
  {
    "text": "and then this comes to my mind I know",
    "start": "782499",
    "end": "786069"
  },
  {
    "text": "the micro services really good but when",
    "start": "786069",
    "end": "789669"
  },
  {
    "text": "I want to do it using containers does it",
    "start": "789669",
    "end": "792519"
  },
  {
    "text": "mean",
    "start": "792519",
    "end": "793269"
  },
  {
    "text": "it needs to have more containers and",
    "start": "793269",
    "end": "795490"
  },
  {
    "text": "more operations I don't want that I want",
    "start": "795490",
    "end": "799689"
  },
  {
    "text": "peace of mind so that's why in this",
    "start": "799689",
    "end": "802869"
  },
  {
    "text": "session I want to share about how you",
    "start": "802869",
    "end": "807129"
  },
  {
    "text": "can have more containers where are less",
    "start": "807129",
    "end": "810339"
  },
  {
    "text": "operations okay so the first one is I'm",
    "start": "810339",
    "end": "816100"
  },
  {
    "text": "going to share a few advanced patterns I",
    "start": "816100",
    "end": "818619"
  },
  {
    "text": "hope it's going to be useful for you",
    "start": "818619",
    "end": "821459"
  },
  {
    "text": "the first one is continuous deployment",
    "start": "821459",
    "end": "824850"
  },
  {
    "text": "with micro services you can use a set of",
    "start": "824850",
    "end": "832509"
  },
  {
    "text": "our offerings starting from a debase Cod",
    "start": "832509",
    "end": "835600"
  },
  {
    "text": "commit and then you can commit your cut",
    "start": "835600",
    "end": "838360"
  },
  {
    "text": "over there which will trigger the",
    "start": "838360",
    "end": "840519"
  },
  {
    "text": "pipelines on AWS code pipeline and then",
    "start": "840519",
    "end": "844959"
  },
  {
    "text": "the best thing is with AWS code pipeline",
    "start": "844959",
    "end": "847480"
  },
  {
    "text": "you can have a parallel processing it",
    "start": "847480",
    "end": "851350"
  },
  {
    "text": "can it will trigger the task on AWS code",
    "start": "851350",
    "end": "855369"
  },
  {
    "text": "build to push the image to Amazon easier",
    "start": "855369",
    "end": "859660"
  },
  {
    "text": "and then at the same time it can tell",
    "start": "859660",
    "end": "864309"
  },
  {
    "text": "the ADA blood clot formation to update",
    "start": "864309",
    "end": "867759"
  },
  {
    "text": "the surface to Amazon is yes and then",
    "start": "867759",
    "end": "871990"
  },
  {
    "text": "the Amazon ECS will get the latest",
    "start": "871990",
    "end": "874990"
  },
  {
    "text": "repository on Amazon easier getting the",
    "start": "874990",
    "end": "878439"
  },
  {
    "text": "image or the latest version and take it",
    "start": "878439",
    "end": "881350"
  },
  {
    "text": "back and update the surface ok so this",
    "start": "881350",
    "end": "885309"
  },
  {
    "text": "is one pattern of of using micro service",
    "start": "885309",
    "end": "889629"
  },
  {
    "text": "on Amazon the second pattern is",
    "start": "889629",
    "end": "893610"
  },
  {
    "text": "automatic surface Kelly so I know",
    "start": "893610",
    "end": "897610"
  },
  {
    "text": "sometimes it's hard to scale your",
    "start": "897610",
    "end": "900040"
  },
  {
    "text": "containers but with Amazon ECS you can",
    "start": "900040",
    "end": "904720"
  },
  {
    "text": "easily scale your containers let's say",
    "start": "904720",
    "end": "907990"
  },
  {
    "text": "that you have pass a taste test be in",
    "start": "907990",
    "end": "913209"
  },
  {
    "text": "one availability zone and you have",
    "start": "913209",
    "end": "915730"
  },
  {
    "text": "another task to see in everybody's on B",
    "start": "915730",
    "end": "919619"
  },
  {
    "text": "with Amazon is yes you can actually",
    "start": "919619",
    "end": "923769"
  },
  {
    "text": "trigger clot watch",
    "start": "923769",
    "end": "926180"
  },
  {
    "text": "to scale your to scale your your",
    "start": "926180",
    "end": "931130"
  },
  {
    "text": "containers also if you want to have your",
    "start": "931130",
    "end": "934010"
  },
  {
    "text": "own policy you can do it as well let's",
    "start": "934010",
    "end": "936740"
  },
  {
    "text": "say you want to have automatic scaling",
    "start": "936740",
    "end": "940180"
  },
  {
    "text": "when one of your TAS instance reached",
    "start": "940180",
    "end": "944020"
  },
  {
    "text": "70% of CPU threshold and then when the",
    "start": "944020",
    "end": "950390"
  },
  {
    "text": "request comes in and your tasks",
    "start": "950390",
    "end": "953500"
  },
  {
    "text": "contingencies is have handling all this",
    "start": "953500",
    "end": "956120"
  },
  {
    "text": "requests and it reached 70% of CPU",
    "start": "956120",
    "end": "959450"
  },
  {
    "text": "threshold",
    "start": "959450",
    "end": "961810"
  }
]