[
  {
    "text": "Hello, I am Leonardo Ciccone,",
    "start": "5800",
    "end": "8200"
  },
  {
    "text": "I am a Database specialist here at AWS.",
    "start": "8200",
    "end": "10966"
  },
  {
    "text": "Part of my job is",
    "start": "12000",
    "end": "12900"
  },
  {
    "text": "to optimize my customer’s environments,\nor optimize customer’s data-models",
    "start": "12900",
    "end": "16666"
  },
  {
    "text": "but also help customers to choose\nthe best functionality for each (AWS) service ",
    "start": "17200",
    "end": "20700"
  },
  {
    "text": "that gets closer to their needs.",
    "start": "21200",
    "end": "23766"
  },
  {
    "text": "Today, in this short video,",
    "start": "24566",
    "end": "26766"
  },
  {
    "text": "we are going to talk about DynamoDB Streams",
    "start": "27266",
    "end": "30000"
  },
  {
    "text": "Which are the two Streams functionalities \nthat we have available with DynamoDB",
    "start": "30566",
    "end": "33933"
  },
  {
    "text": "and when you should choose one \nor when you should choose the other",
    "start": "34266",
    "end": "36833"
  },
  {
    "text": "Let’s see! To understand which\nfunctionality",
    "start": "37433",
    "end": "41899"
  },
  {
    "text": "customers should choose, \nlet’ take a step back",
    "start": "41900",
    "end": "44200"
  },
  {
    "text": "and we will understand what information\nis available inside a DynamoDB Stream event",
    "start": "44600",
    "end": "49032"
  },
  {
    "text": "one stream event is nothing more \nthan a JSON document",
    "start": "49033",
    "end": "51366"
  },
  {
    "text": "that presents some important \ninformation,",
    "start": "51366",
    "end": "53133"
  },
  {
    "text": "like the information you can see here in this slide, \nsome of the information,",
    "start": "53133",
    "end": "56933"
  },
  {
    "text": "for example: \nthe region where the solution is working",
    "start": "56933",
    "end": "59600"
  },
  {
    "text": "what is the event source, \nthe source ARN, ",
    "start": "59966",
    "end": "63933"
  },
  {
    "text": "or the Name of the AWS resource.\nAll that information,",
    "start": "63933",
    "end": "68100"
  },
  {
    "text": "is encapsulated inside",
    "start": "68100",
    "end": "70433"
  },
  {
    "text": "what people calls an item inside an stream",
    "start": "70433",
    "end": "73200"
  },
  {
    "text": "and a very important information",
    "start": "73200",
    "end": "75433"
  },
  {
    "text": "that we have inside the stream\nare the images",
    "start": "75433",
    "end": "78700"
  },
  {
    "text": "So, when people usually talks \nabout DynamoDB Streams",
    "start": "78700",
    "end": "80399"
  },
  {
    "text": "They are really talking about images",
    "start": "80400",
    "end": "83466"
  },
  {
    "text": "In this case we will have 4 possible values for",
    "start": "84100",
    "end": "87299"
  },
  {
    "text": "image types\n(StreamViewType)",
    "start": "87300",
    "end": "88833"
  },
  {
    "text": "We can see the previous value, \nIt is called OLD in the configuration",
    "start": "88833",
    "end": "91733"
  },
  {
    "text": "We can also have the new values,\nit is called NEW in the configuration",
    "start": "92133",
    "end": "94733"
  },
  {
    "text": "We can also have the old and new values, \nit is called NEW and OLD Images",
    "start": "95233",
    "end": "98966"
  },
  {
    "text": "and we can also have the KEYS Only",
    "start": "99266",
    "end": "100600"
  },
  {
    "text": "That means \nonly get the keys of the item that was modified",
    "start": "100600",
    "end": "104166"
  },
  {
    "text": "Let’s talk a little bit\nabout the first option",
    "start": "105433",
    "end": "107533"
  },
  {
    "text": "which is DynamoDB Streams",
    "start": "107566",
    "end": "109566"
  },
  {
    "text": "What is the principal characteristic \nabout DynamoDB Streams",
    "start": "110733",
    "end": "113300"
  },
  {
    "text": "All table data manipulation, \nthey generate...",
    "start": "113933",
    "end": "117632"
  },
  {
    "text": "They are captured inside the string\nand all the data mannipulations you make",
    "start": "117633",
    "end": "121733"
  },
  {
    "text": "For example, \nupdate an item’s attribute",
    "start": "121733",
    "end": "124966"
  },
  {
    "text": "DynamoDB capture that\ninformationin the Stream",
    "start": "125366",
    "end": "128366"
  },
  {
    "text": "You can use AWS Lambda, that it will poll \n4 time sper second from the Stream",
    "start": "128366",
    "end": "132633"
  },
  {
    "text": "and it will evaluate first",
    "start": "132633",
    "end": "136099"
  },
  {
    "text": "If the configured event filter\nin the lambda function",
    "start": "136800",
    "end": "139500"
  },
  {
    "text": "so you will configure the event \nfilter in the lambda function",
    "start": "140100",
    "end": "142800"
  },
  {
    "text": "And you will query that stream \nfour times per second",
    "start": "142800",
    "end": "146366"
  },
  {
    "text": "When the event filter of the lambda function",
    "start": "146966",
    "end": "149400"
  },
  {
    "text": "matches the rule with the event filter",
    "start": "149733",
    "end": "153866"
  },
  {
    "text": "and the lambda function, \nthen the function will trigger",
    "start": "153866",
    "end": "157466"
  },
  {
    "text": "up to two subscribers",
    "start": "158533",
    "end": "160800"
  },
  {
    "text": "In our case here, two lambda functions",
    "start": "160800",
    "end": "163566"
  },
  {
    "text": "This the anatomy of the DynamoDB Streams",
    "start": "164233",
    "end": "167900"
  },
  {
    "text": "this is the first option\nthat I wanted to show you",
    "start": "167900",
    "end": "170465"
  },
  {
    "text": "As I explained, you can have up to \ntwo lambda functions ",
    "start": "171933",
    "end": "175066"
  },
  {
    "text": "subscribed to the same stream.\nLet’s talk about Kinesis Data Streams",
    "start": "175066",
    "end": "179866"
  },
  {
    "text": "Which is the second option\nthat I have for you",
    "start": "180000",
    "end": "184133"
  },
  {
    "text": "It is a little different because, it acts \nas a data replication",
    "start": "184300",
    "end": "189033"
  },
  {
    "text": "So, all the time the solution is validating",
    "start": "189600",
    "end": "192033"
  },
  {
    "text": "What are the registers that get to the stream",
    "start": "192033",
    "end": "194466"
  },
  {
    "text": "We also have the",
    "start": "195500",
    "end": "196066"
  },
  {
    "text": "Lambda service that is subscribed to \nthe data stream",
    "start": "196066",
    "end": "199566"
  },
  {
    "text": "And one important characteristic is that \nit queries the data once per second",
    "start": "199933",
    "end": "203500"
  },
  {
    "text": "and again, when the data in the stream matches\nthe data configured",
    "start": "204233",
    "end": "207766"
  },
  {
    "text": "in the lambda filter event",
    "start": "207766",
    "end": "211500"
  },
  {
    "text": "I can execute up to 5 lambda functions",
    "start": "211833",
    "end": "215433"
  },
  {
    "text": "One very important point",
    "start": "215933",
    "end": "217166"
  },
  {
    "text": "One of their subscribers",
    "start": "218200",
    "end": "218633"
  },
  {
    "text": "They can be lambda functions as we see here",
    "start": "218633",
    "end": "221333"
  },
  {
    "text": "But they can also be Kinesis Data Analytics or Kinesis Firehose",
    "start": "221700",
    "end": "225466"
  },
  {
    "text": "This also counts to the 5 subscriber limit",
    "start": "225466",
    "end": "228433"
  },
  {
    "text": "One of the most important characteristics",
    "start": "230100",
    "end": "232800"
  },
  {
    "text": "When people talks about Kinesis Data Streams \nwith DynamoDB",
    "start": "232800",
    "end": "235533"
  },
  {
    "text": "Presents a very important information\nso you can choose ",
    "start": "236166",
    "end": "238866"
  },
  {
    "text": "between DynamoDB Streams and Kinesis Data Streams",
    "start": "238866",
    "end": "242133"
  },
  {
    "text": "When you use Kinesis Data Streams \nyou loose order,",
    "start": "242733",
    "end": "246633"
  },
  {
    "text": "This means, when the API PutRecords\nis used you loose the order of the data.",
    "start": "247266",
    "end": "249766"
  },
  {
    "text": "Kinesis Data streams don’t guarantees the \norder of the events.",
    "start": "249766",
    "end": "253866"
  },
  {
    "text": "but, to re-order this information you can \nuse the attribute ApproximateCreationDateTime",
    "start": "253866",
    "end": "258799"
  },
  {
    "text": "to order the information inside the Shard in the Kinesis Data Streams",
    "start": "258933",
    "end": "262500"
  },
  {
    "text": "It also means there is no strong ordere garanteed ",
    "start": "263000",
    "end": "266300"
  },
  {
    "text": "When you use DynamoDB Streams, Yes!",
    "start": "266300",
    "end": "269599"
  },
  {
    "text": "The information order is garanteed",
    "start": "270133",
    "end": "271966"
  },
  {
    "text": "Here we will discuss a more in detail",
    "start": "273033",
    "end": "275500"
  },
  {
    "text": "When you talk about ordering",
    "start": "275500",
    "end": "278000"
  },
  {
    "text": "to the left you have DynamoDB Streams \nshowing that ",
    "start": "278000",
    "end": "281433"
  },
  {
    "text": "for example, when you have a new orden \nin this JSON",
    "start": "282000",
    "end": "285933"
  },
  {
    "text": "I have an item at t0 with status new",
    "start": "285933",
    "end": "289800"
  },
  {
    "text": "and then when we update this status",
    "start": "289800",
    "end": "294932"
  },
  {
    "text": "For example in a software that validates\n for example stock for a company ",
    "start": "295100",
    "end": "299833"
  },
  {
    "text": "Or when you create an order\nfor an ecommerce website",
    "start": "299833",
    "end": "302333"
  },
  {
    "text": "When I create this order \nI will have a new register",
    "start": "302333",
    "end": "304800"
  },
  {
    "text": "and then, when I update",
    "start": "305266",
    "end": "305932"
  },
  {
    "text": "this register to a \n“picking” status for example,",
    "start": "305933",
    "end": "309100"
  },
  {
    "text": "at time T1 , we update that register",
    "start": "309100",
    "end": "312166"
  },
  {
    "text": "It is important to mention, \nwhen you use DynamoDB streams",
    "start": "312600",
    "end": "315066"
  },
  {
    "text": "You mantain that strong order",
    "start": "315066",
    "end": "317533"
  },
  {
    "text": "When you use Kinesis Data Streams, \nin this case at the right side",
    "start": "318066",
    "end": "321000"
  },
  {
    "text": "Kinesis Data Streams doesn’t \nkeep the order",
    "start": "321000",
    "end": "325200"
  },
  {
    "text": "which means that",
    "start": "325666",
    "end": "327199"
  },
  {
    "text": "the picking status",
    "start": "327200",
    "end": "328233"
  },
  {
    "text": "can appear before than the new status",
    "start": "328233",
    "end": "332366"
  },
  {
    "text": "The suggested way to order the items is using the\nAttribute AproximateCreationDateTime",
    "start": "332366",
    "end": "337200"
  },
  {
    "text": "This is an strategy",
    "start": "337200",
    "end": "339300"
  },
  {
    "text": "to re-order you data in the stream",
    "start": "339300",
    "end": "342866"
  },
  {
    "text": "the registres that you are seeing\n in Kinesis Data Streams",
    "start": "343200",
    "end": "346700"
  },
  {
    "text": "Now,",
    "start": "348066",
    "end": "348600"
  },
  {
    "text": "How is everyone comparing  both solutions?",
    "start": "348600",
    "end": "351600"
  },
  {
    "text": "To fully understand we need to compare\n side to side all the features",
    "start": "351600",
    "end": "353900"
  },
  {
    "text": "So, let’s compare the principal \ncharacteristics from one and the other.",
    "start": "353933",
    "end": "356933"
  },
  {
    "text": "to have more clarity",
    "start": "356933",
    "end": "358233"
  },
  {
    "text": "and you can understand when to use\none vs the other",
    "start": "358233",
    "end": "360966"
  },
  {
    "text": "Let’s start with Data retention",
    "start": "360966",
    "end": "362533"
  },
  {
    "text": "This is an important characteristics",
    "start": "362533",
    "end": "363366"
  },
  {
    "text": "and it’s very different between both solutions",
    "start": "363366",
    "end": "366432"
  },
  {
    "text": "When you talk about data retention in Kinesis Data Streams",
    "start": "366866",
    "end": "369600"
  },
  {
    "text": "You can keep that record for up to 1 year",
    "start": "369600",
    "end": "372300"
  },
  {
    "text": "with DynamoDB streams you can keep it for 24 hours",
    "start": "373333",
    "end": "376733"
  },
  {
    "text": "Number of Consumers? As I explained ealier ",
    "start": "377700",
    "end": "380766"
  },
  {
    "text": "it is also different",
    "start": "380766",
    "end": "382432"
  },
  {
    "text": "You can have 5 consumers for Kinesis Data Streams",
    "start": "382433",
    "end": "385733"
  },
  {
    "text": "and if you use the Fan-Out \nfunctionality",
    "start": "386100",
    "end": "388800"
  },
  {
    "text": "you can have up to 20 external consumers",
    "start": "389100",
    "end": "392533"
  },
  {
    "text": "and with DynamoDB Streams",
    "start": "393000",
    "end": "394200"
  },
  {
    "text": "You can only have two consumers. \nIn regards of Throughput",
    "start": "394200",
    "end": "399266"
  },
  {
    "text": "You can have an umlimited quota, \nthere is no spefici quota",
    "start": "399266",
    "end": "403199"
  },
  {
    "text": "when you use Kinesis Data Streams",
    "start": "403500",
    "end": "405466"
  },
  {
    "text": "with DynamoDB streams the quota is \nrelated to the DynamoDB table",
    "start": "405466",
    "end": "408900"
  },
  {
    "text": "and to specific quotas to the region\nyou are working on",
    "start": "408900",
    "end": "412866"
  },
  {
    "text": "One common characteristic is",
    "start": "414133",
    "end": "416932"
  },
  {
    "text": "Both services uses Availability Zones",
    "start": "417333",
    "end": "419966"
  },
  {
    "text": "for any automatic failover, and have \nresilient services",
    "start": "419966",
    "end": "422700"
  },
  {
    "text": "In case of any network issue between availability ones",
    "start": "423200",
    "end": "426633"
  },
  {
    "text": "this process is completed automatically\nwithout any service interruption",
    "start": "426633",
    "end": "430333"
  },
  {
    "text": "in the data stream.",
    "start": "430766",
    "end": "432733"
  },
  {
    "text": "Some characteristics on the delivery method",
    "start": "432733",
    "end": "434800"
  },
  {
    "text": "Both deliver in a pull method using HTTP",
    "start": "434800",
    "end": "438666"
  },
  {
    "text": "using the GET records method",
    "start": "438666",
    "end": "442599"
  },
  {
    "text": "Kinesis Data Streams can use Subscribe to shard using HTTP 2",
    "start": "442666",
    "end": "446900"
  },
  {
    "text": "If you require to use HTTP2",
    "start": "446900",
    "end": "449766"
  },
  {
    "text": "you can use the subscribe\n to shard functionality",
    "start": "449800",
    "end": "454033"
  },
  {
    "text": "Another interesting functionality to validate",
    "start": "454166",
    "end": "456800"
  },
  {
    "text": "is the Kinesis Client Library (KCL) that you can use",
    "start": "457200",
    "end": "461200"
  },
  {
    "text": "with Kinesis Data Streams you can use",
    "start": "461833",
    "end": "465600"
  },
  {
    "text": "Kinesis Client Library versions",
    "start": "465600",
    "end": "466566"
  },
  {
    "text": "one and two. With DynamoDB Streams \nyou can only use version one (KCL v1)",
    "start": "466566",
    "end": "470933"
  },
  {
    "text": "Here, there are two very important points",
    "start": "471900",
    "end": "474833"
  },
  {
    "text": "related with data duplication and order.",
    "start": "474833",
    "end": "479866"
  },
  {
    "text": "with Kinesis Data Streams you eventually \nmight have duplicated events.",
    "start": "479866",
    "end": "483766"
  },
  {
    "text": "with DynamoDB Streams there is \nno duplicated records",
    "start": "484766",
    "end": "488065"
  },
  {
    "text": "Talking about ordering, as I already \nexplained with Kinesis Data Streams",
    "start": "488733",
    "end": "491766"
  },
  {
    "text": "doesn’t have an strong \nrecord ordering",
    "start": "492200",
    "end": "494333"
  },
  {
    "text": "but I can re-order the records\nby using the attribute",
    "start": "494766",
    "end": "498166"
  },
  {
    "text": "ApproximateCreationDateTime, but\nwith DynamoDB Streams no",
    "start": "498433",
    "end": "501433"
  },
  {
    "text": "since the records are sorted",
    "start": "501966",
    "end": "504633"
  },
  {
    "text": "And to consume the streams of data",
    "start": "504633",
    "end": "506400"
  },
  {
    "text": "I can consume and process the streams ",
    "start": "506400",
    "end": "509333"
  },
  {
    "text": "using lambda or Kinesis Data Analytics",
    "start": "509766",
    "end": "512000"
  },
  {
    "text": "Kinesis Data Firehose or Glue Streaming ETL",
    "start": "512400",
    "end": "516666"
  },
  {
    "text": "In the case of Kinesis Data Streams, \nin the case of DynamoDB Streams you can use lambda",
    "start": "517166",
    "end": "521166"
  },
  {
    "text": "or DynamoDB Streams with the \nKinesis Client Library (KCL)",
    "start": "521200",
    "end": "524633"
  },
  {
    "text": "Good! Now",
    "start": "524633",
    "end": "528300"
  },
  {
    "text": "Now that we have clear all the options and the differences",
    "start": "528300",
    "end": "531100"
  },
  {
    "text": "When you should use Kinesis Data Streams and\nwhen you should use DynamoDB Streams",
    "start": "531500",
    "end": "535800"
  },
  {
    "text": "Let’s go now to understand",
    "start": "535800",
    "end": "536365"
  },
  {
    "text": "Event based architectures in practice",
    "start": "536366",
    "end": "540000"
  },
  {
    "text": "One way to use DynamoDB Streams\nis to integrate with the",
    "start": "540733",
    "end": "545100"
  },
  {
    "text": "time to live events",
    "start": "545100",
    "end": "546233"
  },
  {
    "text": "in a DynamoDB Table",
    "start": "546233",
    "end": "550332"
  },
  {
    "text": "The Time to live functionality\nindicates, that as soon as the ",
    "start": "550333",
    "end": "554200"
  },
  {
    "text": "item of the table is scanned by a spefcific filter",
    "start": "554200",
    "end": "558733"
  },
  {
    "text": "that you configure as your table data, \nI define which item ",
    "start": "558733",
    "end": "561832"
  },
  {
    "text": "will be deleted by a background process,",
    "start": "561833",
    "end": "566866"
  },
  {
    "text": "tipically between 24 and 48 hours",
    "start": "567233",
    "end": "571399"
  },
  {
    "text": "There is no SLA on this operation",
    "start": "571766",
    "end": "575466"
  },
  {
    "text": "since is made in best effort in background.",
    "start": "576200",
    "end": "580300"
  },
  {
    "text": "It is very intersant, when you delete \nthe item using Time to Live ",
    "start": "580300",
    "end": "584200"
  },
  {
    "text": "You don’t pay for that data manipulation. \nIt is worth to consider ",
    "start": "584233",
    "end": "588733"
  },
  {
    "text": "this characteristic",
    "start": "588733",
    "end": "589800"
  },
  {
    "text": "When you need to purge data from \nyour transactional environment",
    "start": "589800",
    "end": "593166"
  },
  {
    "text": "You can also integrate,  and archive",
    "start": "593833",
    "end": "598833"
  },
  {
    "text": "when the Time to live job,\ndeletes the item",
    "start": "599266",
    "end": "603066"
  },
  {
    "text": "you can capture that event\nand replicate this data",
    "start": "603400",
    "end": "606700"
  },
  {
    "text": "for long term archival\nlike s3 for example, kinesis ",
    "start": "607100",
    "end": "611165"
  },
  {
    "text": "Or to put that information in\nanother persistency layer",
    "start": "611166",
    "end": "614866"
  },
  {
    "text": "in our case could be \nElastic Search  ",
    "start": "614866",
    "end": "617033"
  },
  {
    "text": "So, when ",
    "start": "617700",
    "end": "618200"
  },
  {
    "text": "you have DynamoDB Streams enabled",
    "start": "618200",
    "end": "622466"
  },
  {
    "text": "I can stream this data to another\npersistency layer",
    "start": "622466",
    "end": "625566"
  },
  {
    "text": "for example I can \narchive that data",
    "start": "625566",
    "end": "628266"
  },
  {
    "text": "I don’t want that data in my transactional\nenvironment, in my transactional table,",
    "start": "628733",
    "end": "632100"
  },
  {
    "text": "but I would like to have that \ndata in my archival solution",
    "start": "632466",
    "end": "636333"
  },
  {
    "text": "So, using this integration with\nAmazon DynamoDB Streams ",
    "start": "636866",
    "end": "639666"
  },
  {
    "text": "it is very interesting",
    "start": "639666",
    "end": "642466"
  },
  {
    "text": "Another functionality",
    "start": "643366",
    "end": "645266"
  },
  {
    "text": "Is when you have event based architectures",
    "start": "645266",
    "end": "648000"
  },
  {
    "text": "you will have DynamoDB Streams events\nthat will be consumed by a lambda",
    "start": "648366",
    "end": "651733"
  },
  {
    "text": "you can read the events  \nand for example create",
    "start": "652133",
    "end": "655500"
  },
  {
    "text": "real time aggregations",
    "start": "655500",
    "end": "657466"
  },
  {
    "text": "So , some functionalities that DynamoDB\ndon’t provide by default",
    "start": "657466",
    "end": "661300"
  },
  {
    "text": "like for example aggregations, \nlike total savings, total credits, etc.",
    "start": "661300",
    "end": "665266"
  },
  {
    "text": "I can use DynamoDB Streams \nto create those",
    "start": "665600",
    "end": "668399"
  },
  {
    "text": "real time aggregations",
    "start": "668400",
    "end": "669633"
  },
  {
    "text": "I can also use the same",
    "start": "669633",
    "end": "673100"
  },
  {
    "text": "DynamoDB Streams functionality",
    "start": "673100",
    "end": "674300"
  },
  {
    "text": "To integrate with another services",
    "start": "674300",
    "end": "675066"
  },
  {
    "text": "like for example Elastic Search",
    "start": "675066",
    "end": "679032"
  },
  {
    "text": "And you could have a product\nDynamoDB Table",
    "start": "679033",
    "end": "681733"
  },
  {
    "text": "and I can feed another table in your\nElasticSearch infrastructure",
    "start": "682200",
    "end": "686800"
  },
  {
    "text": "So you can make specific queries \nfor example by the product name",
    "start": "686800",
    "end": "690566"
  },
  {
    "text": "And for example if you need to lookup for :\nNotebook i9 64 GB RAM",
    "start": "690900",
    "end": "695200"
  },
  {
    "text": "I will query a full text search and \nI can use Elastic Search for that, or Open Search",
    "start": "696000",
    "end": "699300"
  },
  {
    "text": "You can also use the same lambda to \nsend the information to Kinesis",
    "start": "699300",
    "end": "703433"
  },
  {
    "text": "That you can store the data in S3",
    "start": "703433",
    "end": "705399"
  },
  {
    "text": "where the data can be explored\nusing Athena",
    "start": "705400",
    "end": "709600"
  },
  {
    "text": "And you can also use queries using\nSQL format, using Athena",
    "start": "710266",
    "end": "713700"
  },
  {
    "text": "that is a serverless service",
    "start": "713700",
    "end": "715133"
  },
  {
    "text": "to create an exploratory data Analysis\nof all my data that was stored in DynamoDB",
    "start": "715133",
    "end": "719000"
  },
  {
    "text": "And finally",
    "start": "720500",
    "end": "722066"
  },
  {
    "text": "I can also use this lambda to send \nchange notifications",
    "start": "722066",
    "end": "724766"
  },
  {
    "text": "for example if you are working on \na very secure table",
    "start": "725166",
    "end": "727700"
  },
  {
    "text": "that is audited, then you can use the \nDynamoDB Streams ",
    "start": "728133",
    "end": "730833"
  },
  {
    "text": "To generate table modifications notifications \nso you can for example trigger another ",
    "start": "730833",
    "end": "734700"
  },
  {
    "text": "service. , and finally\nPut the data in the streams of events",
    "start": "734700",
    "end": "737766"
  },
  {
    "text": "I would like to thank your time",
    "start": "739000",
    "end": "740933"
  },
  {
    "text": "I hope you had fun as well as I did ",
    "start": "740933",
    "end": "742933"
  },
  {
    "text": "and we will see you in the next \nDynamoDB Nuggets",
    "start": "742933",
    "end": "745165"
  },
  {
    "text": "Thank you very much!",
    "start": "745233",
    "end": "746032"
  }
]