[
  {
    "start": "0",
    "end": "35000"
  },
  {
    "text": "okay so I have been given very strict instructions about making sure we start everything on time today which is",
    "start": "0",
    "end": "5250"
  },
  {
    "text": "uncharacteristic so we're going to get rolling if you're still filing in either there's a couple seats in the middle or",
    "start": "5250",
    "end": "11309"
  },
  {
    "text": "you can just kind of hang out on the sides so I'm going to rock on really quickly here because I have a very",
    "start": "11309",
    "end": "16650"
  },
  {
    "text": "special guest speaker with me today so I am sharing the spotlight and if you don't know this is the deep dive on",
    "start": "16650",
    "end": "22470"
  },
  {
    "text": "micro services and UCS if you didn't mean to be here I'm really sorry but I",
    "start": "22470",
    "end": "28170"
  },
  {
    "text": "don't know how you'll get out so now you're stuck with me cool so whenever I learn how to use a",
    "start": "28170",
    "end": "34829"
  },
  {
    "text": "clicker agenda as always as promised so we're going to cover a couple of things so what are micro services we're going",
    "start": "34829",
    "end": "41370"
  },
  {
    "start": "35000",
    "end": "69000"
  },
  {
    "text": "to do a lightning ECS overview we're going to get feature specific we're",
    "start": "41370",
    "end": "46500"
  },
  {
    "text": "going to talk about flexible container orchestration and ECS we'll talk about container life cycles with the UCS CLI",
    "start": "46500",
    "end": "52739"
  },
  {
    "text": "and then we will talk about our customer use case with our special guest star from cloud lock we have really limited",
    "start": "52739",
    "end": "58920"
  },
  {
    "text": "time by the way so if you have questions if you can please save them for the end and I will hang out afterwards and talk",
    "start": "58920",
    "end": "65850"
  },
  {
    "text": "with you guys as as long as you want so what are micro services so this is our",
    "start": "65850",
    "end": "71790"
  },
  {
    "start": "69000",
    "end": "116000"
  },
  {
    "text": "favorite definition it comes from Adrian who gave the keynote this morning and we used to call him the best evangelist",
    "start": "71790",
    "end": "77460"
  },
  {
    "text": "that doesn't work for AWS but now he works for AWS so the joke isn't as funny",
    "start": "77460",
    "end": "82470"
  },
  {
    "text": "but so our definition here a service-oriented architecture composed of loosely coupled elements that have",
    "start": "82470",
    "end": "88920"
  },
  {
    "text": "bounded context and that's a really fancy way of saying here that when we're making our micro services everything",
    "start": "88920",
    "end": "95009"
  },
  {
    "text": "should have a specific piece it should have a very separate and specific context and it should communicate with",
    "start": "95009",
    "end": "101130"
  },
  {
    "text": "the other services only over the network so you write your service it has a specific purpose in mind and when it",
    "start": "101130",
    "end": "107579"
  },
  {
    "text": "speaks to another service it only goes over the network they're not kind of interconnected so they should be atomic pieces so why is this important so we've",
    "start": "107579",
    "end": "116700"
  },
  {
    "start": "116000",
    "end": "152000"
  },
  {
    "text": "seen this def insist I grab a lot in various kinds of iterations and when you're moving from your big monolith to",
    "start": "116700",
    "end": "122280"
  },
  {
    "text": "your little micro services how do you do this and kind of a monolith way of looking at things is I have one big",
    "start": "122280",
    "end": "127740"
  },
  {
    "text": "piece everything is together and it might have lots of different functions but they are all one service",
    "start": "127740",
    "end": "133770"
  },
  {
    "text": "when you break that out you have to figure out okay so what goes from this model list to my microservices so all",
    "start": "133770",
    "end": "139080"
  },
  {
    "text": "those different functions all those different jobs that make up your mind list get separated out into those small",
    "start": "139080",
    "end": "144180"
  },
  {
    "text": "microservices and those should have a very specific purpose and they should communicate with each other over the",
    "start": "144180",
    "end": "149550"
  },
  {
    "text": "network so a public API there are some characteristics of this model of this",
    "start": "149550",
    "end": "154680"
  },
  {
    "start": "152000",
    "end": "220000"
  },
  {
    "text": "micro service architecture once you've decomposed your monolith so it's decentralized give me whatever language",
    "start": "154680",
    "end": "159900"
  },
  {
    "text": "you want and you should use the tool that fits you know the job that you want",
    "start": "159900",
    "end": "164910"
  },
  {
    "text": "so just because you have one service it's in nodejs shouldn't mean that you can't have another service and Ruby I",
    "start": "164910",
    "end": "170370"
  },
  {
    "text": "just have one purpose so if you find your micro service has many purposes perhaps you need many micro services and",
    "start": "170370",
    "end": "176730"
  },
  {
    "text": "you build it you run it so we used to talk about when you had DevOps so we had we've had a cook this is the DevOps and",
    "start": "176730",
    "end": "182700"
  },
  {
    "text": "automation track we used to talk kind of about DevOps you'd throw your stuff over the wall so if I was a developer I'd",
    "start": "182700",
    "end": "188460"
  },
  {
    "text": "write my service I might write tests if I was a kind and generous developer but it was someone else's problem when it",
    "start": "188460",
    "end": "194460"
  },
  {
    "text": "came to deploying it and in kind of getting on our production and with micro services for a lot of people that's",
    "start": "194460",
    "end": "199950"
  },
  {
    "text": "really different now so I built it I run it so I'm responsible both for writing the service for deploying it for writing",
    "start": "199950",
    "end": "206400"
  },
  {
    "text": "those tests independent black box same things as we just talked about with Adrian's definition make sure it has a",
    "start": "206400",
    "end": "213390"
  },
  {
    "text": "job make sure that it's decoupled from all my other services and make sure that it's only doing its one job and so how",
    "start": "213390",
    "end": "221220"
  },
  {
    "start": "220000",
    "end": "232000"
  },
  {
    "text": "do we do this how do we work with these micro services effectively on AWS and for a lot of people that's where that's",
    "start": "221220",
    "end": "228030"
  },
  {
    "text": "what UCS comes in so SES Amazon's ec2 container service so highly scalable",
    "start": "228030",
    "end": "233970"
  },
  {
    "start": "232000",
    "end": "251000"
  },
  {
    "text": "high-performance container management system so if I'm writing these micro services I'm writing them in containers",
    "start": "233970",
    "end": "240330"
  },
  {
    "text": "so each service is own container and ec2 eliminates the need to install operate",
    "start": "240330",
    "end": "246180"
  },
  {
    "text": "and scale kind of my own container infrastructure so what does that mean and more kind of plain words so a couple",
    "start": "246180",
    "end": "253470"
  },
  {
    "start": "251000",
    "end": "261000"
  },
  {
    "text": "of things we have three characteristics we have deep AWS integration we get container orchestration and we have",
    "start": "253470",
    "end": "259620"
  },
  {
    "text": "cluster management so rather than having to write a bunch of tooling to manage all these containers ourselves because",
    "start": "259620",
    "end": "265950"
  },
  {
    "start": "261000",
    "end": "327000"
  },
  {
    "text": "you get a lot of overhead right so if you go for managing just your single monolith to running 30",
    "start": "265950",
    "end": "271800"
  },
  {
    "text": "microservices there's a lot more work that goes into kind of orchestrating scaling deploying those services and",
    "start": "271800",
    "end": "277530"
  },
  {
    "text": "that's where UCS comes in so I added the slide really recently because I started getting a lot of questions that sounded",
    "start": "277530",
    "end": "282870"
  },
  {
    "text": "very similar to each other and that was okay but how does ECS kind of tie back",
    "start": "282870",
    "end": "288389"
  },
  {
    "text": "to things that I'm familiar with so I need this diagram I made it in Word like all my diagrams it is not very",
    "start": "288389",
    "end": "293789"
  },
  {
    "text": "pretty but it gets the point across so an instance that is a standard ec2 box once you've registered it to your ECS",
    "start": "293789",
    "end": "300419"
  },
  {
    "text": "cluster your tasks run here a service is a layer that manages and places tasks on",
    "start": "300419",
    "end": "306210"
  },
  {
    "text": "those instances and a task is a container wrapper and configuration around processes that are running on",
    "start": "306210",
    "end": "312419"
  },
  {
    "text": "that instance so that's it it's not really it's not kind of as vague as it sounds right so all the pieces that make",
    "start": "312419",
    "end": "319319"
  },
  {
    "text": "up ECS map back to very traditional ec2 concepts you're just doing it at the container level now rather than just the",
    "start": "319319",
    "end": "325710"
  },
  {
    "text": "server level so who is using UCS this is my son shout out board I can't fit any",
    "start": "325710",
    "end": "330930"
  },
  {
    "start": "327000",
    "end": "349000"
  },
  {
    "text": "more logos on here but there are many more that air that purple air time logo with me also so I was one of the first",
    "start": "330930",
    "end": "337650"
  },
  {
    "text": "beta testers of ECS which is why I'm always talking about it lots of people using it lots of people",
    "start": "337650",
    "end": "343409"
  },
  {
    "text": "doing really cool really cool things building tooling around it so check some of those out why are these people using",
    "start": "343409",
    "end": "350789"
  },
  {
    "start": "349000",
    "end": "403000"
  },
  {
    "text": "UCS in the first place so why is this a solution that people are kind of using to manage their containers and the big",
    "start": "350789",
    "end": "357659"
  },
  {
    "text": "thing for most people is fully managed so it's already tied to AWS it's really",
    "start": "357659",
    "end": "362939"
  },
  {
    "text": "easy and that was why I went with it in the first place also is so I had a big project I had a monolith and I wanted a",
    "start": "362939",
    "end": "369240"
  },
  {
    "text": "bunch of microservices and the easiest way for me to kind of make that transition was by using something that",
    "start": "369240",
    "end": "375539"
  },
  {
    "text": "felt really close to what I was already using lots of cool scheduling stuff and",
    "start": "375539",
    "end": "381479"
  },
  {
    "text": "then there's a bunch of different tracks going on today there's a bunch of different sessions and a lot of them are talking about other AWS tools so I know",
    "start": "381479",
    "end": "388650"
  },
  {
    "text": "that Kara spoke two sessions ago about some quote star things these are all",
    "start": "388650",
    "end": "394080"
  },
  {
    "text": "tied with UCS also so if you're using UCS it's really easy to integrate that with other with other AWS",
    "start": "394080",
    "end": "401190"
  },
  {
    "text": "services we talked about some scheduling goodness and one of the cool things",
    "start": "401190",
    "end": "407400"
  },
  {
    "start": "403000",
    "end": "462000"
  },
  {
    "text": "about containers is that you can use them for a bunch of different purposes so I can run a task just once I can",
    "start": "407400",
    "end": "415380"
  },
  {
    "text": "schedule my tasks to run like a cron job and run it in that same cluster infrastructure I can use start tasks I",
    "start": "415380",
    "end": "422580"
  },
  {
    "text": "can scale them up and down I can have my normal kind of long-running jobs you can",
    "start": "422580",
    "end": "428010"
  },
  {
    "text": "use kind of that same infrastructure on the same container format in a bunch of different ways to do a bunch of",
    "start": "428010",
    "end": "433290"
  },
  {
    "text": "different types of jobs so you can schedule them your own way you can write your own schedule or you can schedule a",
    "start": "433290",
    "end": "438480"
  },
  {
    "text": "batch jobs you can schedule the long-running ones but you can use that same infrastructure to do a bunch of",
    "start": "438480",
    "end": "444480"
  },
  {
    "text": "different kinds of tasks which i think is really helpful right so previously if you are kind of running your one big app",
    "start": "444480",
    "end": "449670"
  },
  {
    "text": "and it took up you ran it on one post and then you couldn't really do much with the rest of that infrastructure and",
    "start": "449670",
    "end": "456360"
  },
  {
    "text": "now you can kind of use the leftover pieces of that infrastructure to run others tasks fun as well so let's get",
    "start": "456360",
    "end": "463170"
  },
  {
    "text": "speed your specific and there's a bunch of different features we're just going to cover a couple of them really quickly",
    "start": "463170",
    "end": "468960"
  },
  {
    "text": "and then we'll do something cooler and so task placement so I promise that you",
    "start": "468960",
    "end": "474780"
  },
  {
    "start": "473000",
    "end": "497000"
  },
  {
    "text": "could use your resources efficiently so how do I actually make that happen so you get been able you're able to",
    "start": "474780",
    "end": "480990"
  },
  {
    "text": "customize this now so a task placement strategy is what lets you select the instance that you want to place your",
    "start": "480990",
    "end": "486570"
  },
  {
    "text": "tasks on and you can use constraints on top of that to kind of determine at a",
    "start": "486570",
    "end": "491640"
  },
  {
    "text": "more granular level where that task goes so you use those together and you can determine where you place your tasks so",
    "start": "491640",
    "end": "497490"
  },
  {
    "start": "497000",
    "end": "517000"
  },
  {
    "text": "how does this work here's a couple of characteristics so you could do them from a my or availability zone or your",
    "start": "497490",
    "end": "504060"
  },
  {
    "text": "instance types or you could do custom so if you had one cluster and you wanted to deploy some things to you called staging",
    "start": "504060",
    "end": "511650"
  },
  {
    "text": "instances and some things to prod instances you could do that with a constraint and multiple strategies I'll",
    "start": "511650",
    "end": "518969"
  },
  {
    "start": "517000",
    "end": "557000"
  },
  {
    "text": "explain these so bin packing is basically use your resources as efficiently as possible so if I have two",
    "start": "518969",
    "end": "524940"
  },
  {
    "text": "hosts and one of them has four tasks running and has just a little bit of CPU a memory left and I have one host that",
    "start": "524940",
    "end": "532110"
  },
  {
    "text": "has like all nothing on it I'm going to if I've been back I'll use up all the resources on",
    "start": "532110",
    "end": "539249"
  },
  {
    "text": "that first box before I go to the second one so I can have the least number of hosts running as possible random is just",
    "start": "539249",
    "end": "545310"
  },
  {
    "text": "what it sounds like it's random and and spread means that you can distribute them evenly throughout groups of",
    "start": "545310",
    "end": "552749"
  },
  {
    "text": "instances so for example by availability zone and so how does this actually work",
    "start": "552749",
    "end": "558089"
  },
  {
    "text": "and it's basically it's an order of operations just like middle school math class",
    "start": "558089",
    "end": "563670"
  },
  {
    "text": "so turns out I'm a bad Amazon citizen",
    "start": "563670",
    "end": "571920"
  },
  {
    "text": "and don't install my updates and boo",
    "start": "571920",
    "end": "577100"
  },
  {
    "text": "exactly I did don't tell anyone that I",
    "start": "577100",
    "end": "586050"
  },
  {
    "text": "did that we'll go back ready ready oh shoot no it's okay all as well okay so",
    "start": "586050",
    "end": "601649"
  },
  {
    "start": "601000",
    "end": "635000"
  },
  {
    "text": "we're back on my middle school math class flow chart so we can do our order of operations here so we start off and",
    "start": "601649",
    "end": "606809"
  },
  {
    "text": "say okay here are my basic requirements so in order to place a task I have to have the resources to support it so I",
    "start": "606809",
    "end": "612660"
  },
  {
    "text": "need to have my CPU I need to have my memory and we need to have the port open on top of that I can do my custom",
    "start": "612660",
    "end": "618600"
  },
  {
    "text": "constraints so for example is this the instance type that I want on top of that I can do my my strategies so am i using",
    "start": "618600",
    "end": "625949"
  },
  {
    "text": "my resources as efficiently as possible or am i trying to spread them out and then finally apply all these filters and",
    "start": "625949",
    "end": "632189"
  },
  {
    "text": "select the instance that I want to place my tasks on second one and there's a theme to all of these and if you can",
    "start": "632189",
    "end": "639329"
  },
  {
    "start": "635000",
    "end": "700000"
  },
  {
    "text": "guess it you win a prize it's a sticker if you but I'll tell you anyway and so",
    "start": "639329",
    "end": "645980"
  },
  {
    "text": "second future event stream for cloud watch so I was talking to someone about this in the hallway but it UCS admits",
    "start": "645980",
    "end": "654269"
  },
  {
    "text": "events and previously you kind of had those events and you could use them within UCS or if you knew the right API",
    "start": "654269",
    "end": "661019"
  },
  {
    "text": "call and now there's you can omit them and you can consume them with cloud watch so on top of and it sounds like",
    "start": "661019",
    "end": "667439"
  },
  {
    "text": "okay well so I start tasks and whatever and that's cool but I already knew that I started it but what's cool is that on top of",
    "start": "667439",
    "end": "674310"
  },
  {
    "text": "that you can build things with those events that consume those events so you could build a custom scheduler or you",
    "start": "674310",
    "end": "680670"
  },
  {
    "text": "could monitor something like cluster state and then you could use them with other services so everyone's favorite",
    "start": "680670",
    "end": "686970"
  },
  {
    "text": "which is Linda so you can use those events to do other things that you want so customize extend change things the",
    "start": "686970",
    "end": "694350"
  },
  {
    "text": "way that you want to but you can commit you can omit your own cluster events and consume those with other services and so",
    "start": "694350",
    "end": "702230"
  },
  {
    "start": "700000",
    "end": "755000"
  },
  {
    "text": "flexible orchestration is in any CS so I promise a theme and the theme here I",
    "start": "702230",
    "end": "707880"
  },
  {
    "text": "think is really flexibility so what I'm looking for when I pick an orchestration platform is that my platform should have",
    "start": "707880",
    "end": "714510"
  },
  {
    "text": "both sensible defaults and the expel the ability to extend and customize so what",
    "start": "714510",
    "end": "720510"
  },
  {
    "text": "does that mean so it means that when I start off I should be able to use the defaults that a service has",
    "start": "720510",
    "end": "726510"
  },
  {
    "text": "out-of-the-box so I should expect that ECS will not steer me wildly in the wrong direction for how much memory a",
    "start": "726510",
    "end": "732810"
  },
  {
    "text": "service should use but that I should also be able to extend and customize on top of that so I should be able to",
    "start": "732810",
    "end": "738899"
  },
  {
    "text": "change things I should be able to build my own logic I should be able to consume events and I should be able to pick and",
    "start": "738899",
    "end": "744690"
  },
  {
    "text": "choose a combination of one or both of those so first off with UCS we have",
    "start": "744690",
    "end": "749880"
  },
  {
    "text": "options so if I don't touch anything this is fine it'll help me start it'll",
    "start": "749880",
    "end": "756450"
  },
  {
    "text": "help me start my task it will give me some fairly sensible CPU and memory defaults I don't have to do anything if",
    "start": "756450",
    "end": "763560"
  },
  {
    "text": "I want to do something I can but it will help me kind of get started as seamlessly as possible we're going to do",
    "start": "763560",
    "end": "769649"
  },
  {
    "text": "a little fake demo and the fake demo is because I don't have internet and so I made it up so we're doing a fake demo",
    "start": "769649",
    "end": "776339"
  },
  {
    "text": "but spoiler alert I'm possibly the only person that likes the console but why so",
    "start": "776339",
    "end": "782029"
  },
  {
    "text": "we'll look at my reasons reason number one is JSON have you tried making a V PC",
    "start": "782029",
    "end": "787950"
  },
  {
    "text": "with JSON from CLI if you've tried to do it I don't don't never again so first",
    "start": "787950",
    "end": "794310"
  },
  {
    "text": "reason JSON so it's quicker to test it's quicker to get started I get visual feedback so if I do something with my",
    "start": "794310",
    "end": "800370"
  },
  {
    "text": "cluster and the console I can see the result it comes right back at me and I can see what's happening my",
    "start": "800370",
    "end": "806470"
  },
  {
    "text": "fourth reason is also JSON if I were to make a list of ten reasons nine of them would be JSON mathematically wrong",
    "start": "806470",
    "end": "814600"
  },
  {
    "text": "yeah well all JSON you can William JSON but the console is not for everyone so",
    "start": "814600",
    "end": "820120"
  },
  {
    "text": "if you're automating if you're customizing the CLI is probably a better choice so there's some tools out there",
    "start": "820120",
    "end": "826000"
  },
  {
    "text": "for ECS to use with the CLI there's actually two this is one that I prefer",
    "start": "826000",
    "end": "832510"
  },
  {
    "text": "to use but basically you can manage your container lifestyles from start to finish without using the console so",
    "start": "832510",
    "end": "839380"
  },
  {
    "start": "839000",
    "end": "854000"
  },
  {
    "text": "let's look at my fake demo so what does this look like so we're going to walk through a really really easy version of",
    "start": "839380",
    "end": "845890"
  },
  {
    "text": "what it looks like to kind of work with the UCS CLI so I create my cluster it's called summit it turns me some status",
    "start": "845890",
    "end": "853089"
  },
  {
    "text": "info then I have to create a task so I can do this by using a JSON string or I",
    "start": "853089",
    "end": "858760"
  },
  {
    "start": "854000",
    "end": "874000"
  },
  {
    "text": "can pass it a file that I wrote in my text editor and used and use a linter on so either way I can pass it the",
    "start": "858760",
    "end": "866260"
  },
  {
    "text": "parameters and how I want to start up to my task definition and I'm going to need my task definition a little bit later",
    "start": "866260",
    "end": "871750"
  },
  {
    "text": "when I start my service so I'm using it right now here's where we use the things like the placement strategies that we",
    "start": "871750",
    "end": "877690"
  },
  {
    "text": "looked at before I create my service I say how many copies I want running and I can add my parameters and I can register",
    "start": "877690",
    "end": "884800"
  },
  {
    "text": "my service as an lb or a lb so what happens if I want to scale my service up",
    "start": "884800",
    "end": "890860"
  },
  {
    "start": "888000",
    "end": "911000"
  },
  {
    "text": "so we probably can't just have a static service I can change my desired count I can use",
    "start": "890860",
    "end": "896500"
  },
  {
    "text": "the reverse of this to steal my service back down which we'll look at but this is also effectively a deployment so if I",
    "start": "896500",
    "end": "903790"
  },
  {
    "text": "change that the task definition that I'm sending that's a deployment so if you",
    "start": "903790",
    "end": "910149"
  },
  {
    "text": "think about it you might be automating that a little bit later but by changing that task definition by changing that",
    "start": "910149",
    "end": "916300"
  },
  {
    "start": "911000",
    "end": "961000"
  },
  {
    "text": "revision I'm saying a new copy which means that I have a couple of things so I have version control of my task",
    "start": "916300",
    "end": "922540"
  },
  {
    "text": "definitions and then I also have version version control if I've done that through a CIS CD system I can tie that",
    "start": "922540",
    "end": "929829"
  },
  {
    "text": "back to a build I can tie that back to the commit that trigger the build in my continuous integration system so I'm",
    "start": "929829",
    "end": "936610"
  },
  {
    "text": "going from the commit that I made locally that I push to a branch the trigger to build that past a new task",
    "start": "936610",
    "end": "942550"
  },
  {
    "text": "revision to ECS that was deployed so I can look at those pieces all the way back and I can see okay well here's the",
    "start": "942550",
    "end": "949540"
  },
  {
    "text": "commit that I went that went to that service that did that thing so if my service breaks right after it it's",
    "start": "949540",
    "end": "956650"
  },
  {
    "text": "really easy to debug right because I I know the exact commit that set that off",
    "start": "956650",
    "end": "961710"
  },
  {
    "start": "961000",
    "end": "976000"
  },
  {
    "text": "you can do some other cool stuff here so we can query state and you could use these messages you could use these",
    "start": "961710",
    "end": "967540"
  },
  {
    "text": "events you could consume those other services and you could do cool stuff with it for the purposes of this demo I",
    "start": "967540",
    "end": "973930"
  },
  {
    "text": "have done nothing cool my service is flawless by Tel Aviv so I'm closing down",
    "start": "973930",
    "end": "979839"
  },
  {
    "start": "976000",
    "end": "1038000"
  },
  {
    "text": "my cluster afterwards we talked a little bit about the scaling but the important",
    "start": "979839",
    "end": "985540"
  },
  {
    "text": "thing to look at here that I've gotten a couple of times is that if I scale something up I got a scale back down again so I'm",
    "start": "985540",
    "end": "991900"
  },
  {
    "text": "cheap and I don't like to pay for extra infrastructure that I'm not using so if you have a scaling event which you can",
    "start": "991900",
    "end": "997570"
  },
  {
    "text": "do kind of automatically threes yes if I if I write a scaling event to scale my messaging serve as my son at service in",
    "start": "997570",
    "end": "1003810"
  },
  {
    "text": "response to like an alarm I want to make sure that I scale back down also otherwise you've scaled up to have a",
    "start": "1003810",
    "end": "1010260"
  },
  {
    "text": "bunch of extra capacity that you don't need once you don't have the traffic for it and without further ado I have a very",
    "start": "1010260",
    "end": "1017100"
  },
  {
    "text": "special guest please welcome to read from cloud walk block this is yours you cook that Thank",
    "start": "1017100",
    "end": "1024209"
  },
  {
    "text": "You Abby yeah Thank You Abby everyone I'm Davies Mohammed and one sec",
    "start": "1024209",
    "end": "1033630"
  },
  {
    "text": "trying to find the red button okay hi",
    "start": "1033630",
    "end": "1039209"
  },
  {
    "start": "1038000",
    "end": "1076000"
  },
  {
    "text": "everyone I'm glad to be here and I'm here to actually share with you our",
    "start": "1039209",
    "end": "1045000"
  },
  {
    "text": "experience regarding running micro services in ACS and docker but before I",
    "start": "1045000",
    "end": "1051780"
  },
  {
    "text": "start I would like to share a bit a few words about my background I have a PhD",
    "start": "1051780",
    "end": "1056850"
  },
  {
    "text": "in bioinformatics I'm a tech leader in the cyber intelligence team in Cisco kalaloch a cyber security company that",
    "start": "1056850",
    "end": "1063000"
  },
  {
    "text": "was acquired a couple of months ago by Cisco and I'm fascinated with technology",
    "start": "1063000",
    "end": "1069280"
  },
  {
    "text": "in particular everything that touches containers and serverless",
    "start": "1069280",
    "end": "1074639"
  },
  {
    "start": "1076000",
    "end": "1122000"
  },
  {
    "text": "german-speaking the emergence of the cloud has brought various challenges to the I keyword while traditional",
    "start": "1077130",
    "end": "1083440"
  },
  {
    "text": "companies are still running on premise our customers are running either 100% in the cloud or a mix of both living - he",
    "start": "1083440",
    "end": "1091300"
  },
  {
    "text": "bridge environments and tackle the situation cisco came up with the idea of the cloud center which is an application",
    "start": "1091300",
    "end": "1097870"
  },
  {
    "text": "centric cloud platform management system that is designed to handle those complex",
    "start": "1097870",
    "end": "1105370"
  },
  {
    "text": "applications across various infrastructures like data centers private or public clouds and in addition",
    "start": "1105370",
    "end": "1112930"
  },
  {
    "text": "it also gives you a single pane of glass visibility and control across all the IT",
    "start": "1112930",
    "end": "1119200"
  },
  {
    "text": "services but let's focus more on the cloud by 2018 gartner predicts that an",
    "start": "1119200",
    "end": "1127840"
  },
  {
    "start": "1122000",
    "end": "1254000"
  },
  {
    "text": "average company will have 25% of its traffic by passing Network which means",
    "start": "1127840",
    "end": "1132910"
  },
  {
    "text": "that if you only rely on the perimeter security then you will be only protected",
    "start": "1132910",
    "end": "1138190"
  },
  {
    "text": "at 75% at best and that's where Cisco",
    "start": "1138190",
    "end": "1144100"
  },
  {
    "text": "koala comes into play Cisco cloud lock is a hundred percent cloud native running on top of a double yes no agents",
    "start": "1144100",
    "end": "1152500"
  },
  {
    "text": "not proxy needed we only work with api's both internally and as a way to connect",
    "start": "1152500",
    "end": "1157780"
  },
  {
    "text": "to our customers qualifications in our platform we have two main areas where",
    "start": "1157780",
    "end": "1162940"
  },
  {
    "text": "first of all cat work as before says where we protect business apps in the",
    "start": "1162940",
    "end": "1168130"
  },
  {
    "text": "cloud but we're also unique in the industry by extending our security controls for applications that are",
    "start": "1168130",
    "end": "1173860"
  },
  {
    "text": "running on top of us and pass so for example if I'm deploying an application",
    "start": "1173860",
    "end": "1179100"
  },
  {
    "text": "that is running on Amazon and I want to enforce HIPAA compliance because I'm working in the healthcare market then I",
    "start": "1179100",
    "end": "1186610"
  },
  {
    "text": "can use koala log Cisco cloud lock with the with their DLP micro service that",
    "start": "1186610",
    "end": "1192010"
  },
  {
    "text": "has the ability to scan and detect sensitive content in s3 buckets",
    "start": "1192010",
    "end": "1198000"
  },
  {
    "text": "marginally we're here to ensure three main uses first of all users where we continuously",
    "start": "1198120",
    "end": "1204970"
  },
  {
    "text": "monitoring for compromised accounts and inside the threat for example here you can see that there are two logins that",
    "start": "1204970",
    "end": "1211750"
  },
  {
    "text": "are separated by one hour and time but invest $1,000 elementors in distance which may clearly indicate a threat data",
    "start": "1211750",
    "end": "1220960"
  },
  {
    "text": "is the second use case and beyond just monitoring for compliance violations",
    "start": "1220960",
    "end": "1226200"
  },
  {
    "text": "we're also giving ways of remediation as well as protecting the critical assets",
    "start": "1226200",
    "end": "1233170"
  },
  {
    "text": "and making sure that they are not over shared and finally apps where we give visibility and control visibility into",
    "start": "1233170",
    "end": "1239950"
  },
  {
    "text": "all apps is as critical as understanding the the access codes that were granted",
    "start": "1239950",
    "end": "1245770"
  },
  {
    "text": "to the applications in the first place in order to detect malicious behavior and be able to revoke those applications",
    "start": "1245770",
    "end": "1254490"
  },
  {
    "text": "in terminologies infrastructure where we have different type of units first of",
    "start": "1254490",
    "end": "1260500"
  },
  {
    "text": "all micro services they're running on top of ETS early as for databases alb",
    "start": "1260500",
    "end": "1266320"
  },
  {
    "text": "and ELB and route 53 to route and in the balancer traffic we also have workers",
    "start": "1266320",
    "end": "1272860"
  },
  {
    "text": "that are leveraging Casca to stream the customer events as well as a bunch of ec2 instances in order to possess them",
    "start": "1272860",
    "end": "1278890"
  },
  {
    "text": "and finally we're investing a lot in data analytics in order to be able to detect malicious behavior and we're",
    "start": "1278890",
    "end": "1286060"
  },
  {
    "text": "using the combination of s3 lambda EMR spark and elastic search for",
    "start": "1286060",
    "end": "1291460"
  },
  {
    "text": "analytics in terms of scale we're running dozens of micro services in",
    "start": "1291460",
    "end": "1296950"
  },
  {
    "text": "multiple environments and regions also we also are scanning millions of",
    "start": "1296950",
    "end": "1304390"
  },
  {
    "text": "customer documents and we're processing billions of events from such providers",
    "start": "1304390",
    "end": "1309780"
  },
  {
    "text": "also a Python shop will of my tongue is flexible its ecosystem is really great",
    "start": "1309780",
    "end": "1315460"
  },
  {
    "text": "and we recently moved to user forum to manager stack now let me give you an",
    "start": "1315460",
    "end": "1323110"
  },
  {
    "text": "example of a great integration of various services that we with reliable",
    "start": "1323110",
    "end": "1328210"
  },
  {
    "text": "leverage to build a full workflow for our analysts so here you can see that we",
    "start": "1328210",
    "end": "1334310"
  },
  {
    "text": "they're running the use case is actually to create assessment reports for our",
    "start": "1334310",
    "end": "1340820"
  },
  {
    "text": "customers they would be able to deliver so here you can see that they're using slack command to send a request to the",
    "start": "1340820",
    "end": "1349040"
  },
  {
    "text": "API get away with which is forwarding that to a lambda who is creating an EMR",
    "start": "1349040",
    "end": "1355370"
  },
  {
    "text": "spark instance running a bunch of EMR steps which is for this producing the",
    "start": "1355370",
    "end": "1360830"
  },
  {
    "text": "report which where L is finally posted back to a private slack channel and I",
    "start": "1360830",
    "end": "1368600"
  },
  {
    "start": "1367000",
    "end": "1373000"
  },
  {
    "text": "want to give you ten advantages of running micro services on production with ETS the first one is the support",
    "start": "1368600",
    "end": "1375890"
  },
  {
    "start": "1373000",
    "end": "1402000"
  },
  {
    "text": "for our private dock repository this allows us to integrate ECR into our CI",
    "start": "1375890",
    "end": "1382850"
  },
  {
    "text": "pipeline very smoothly and as you can see here upon a get commits or a patient",
    "start": "1382850",
    "end": "1389330"
  },
  {
    "text": "ID button where trigger Jenkins job that is building a docker image pushing it to",
    "start": "1389330",
    "end": "1395390"
  },
  {
    "text": "ECR and then it's used by a bunch of ICS SS containers the second use case in the",
    "start": "1395390",
    "end": "1404150"
  },
  {
    "start": "1402000",
    "end": "1441000"
  },
  {
    "text": "second advantage is using koala watch integration of kawatche first of all it's a great way to centralize all the",
    "start": "1404150",
    "end": "1411380"
  },
  {
    "text": "logs with a simple configuration in tap definition so you just need to put your",
    "start": "1411380",
    "end": "1416410"
  },
  {
    "text": "your log driver as AWS logs and then every every log is pushed to the cloud",
    "start": "1416410",
    "end": "1423020"
  },
  {
    "text": "watch logs alarms are a great great way to monitor your system and if you create",
    "start": "1423020",
    "end": "1429140"
  },
  {
    "text": "an alarm for unhealthy services you can trigger an SNS occation and then trigger",
    "start": "1429140",
    "end": "1435170"
  },
  {
    "text": "a lambda that will run your custom code in order to remediate with the situation",
    "start": "1435170",
    "end": "1440860"
  },
  {
    "text": "the third advantage is the ability to run long-running recurring tasks so",
    "start": "1440860",
    "end": "1446740"
  },
  {
    "start": "1441000",
    "end": "1501000"
  },
  {
    "text": "sometimes you have small tasks that are less than five minutes for example deleting a bunch of old",
    "start": "1446740",
    "end": "1454820"
  },
  {
    "text": "indices in elasticsearch and sometimes you have longer tasks for example restoring database dump so for the first",
    "start": "1454820",
    "end": "1461900"
  },
  {
    "text": "one you have a great great system called lambda and very easily you can write some code",
    "start": "1461900",
    "end": "1467450"
  },
  {
    "text": "relating this connect that to qui watch event and and and you're good but if",
    "start": "1467450",
    "end": "1474050"
  },
  {
    "text": "you're or have a longer task then you cannot do that so the community way we were we actually leverage here is the",
    "start": "1474050",
    "end": "1481520"
  },
  {
    "text": "combination of a cloud watch rule in order to trigger the task daily cloud",
    "start": "1481520",
    "end": "1486680"
  },
  {
    "text": "watch is triggering a lambda and the lambda is spinning up and easier if yes",
    "start": "1486680",
    "end": "1492200"
  },
  {
    "text": "one time container using run task in order to restore database and the container is killed automatically at the",
    "start": "1492200",
    "end": "1498380"
  },
  {
    "text": "end of the task force running update or",
    "start": "1498380",
    "end": "1503900"
  },
  {
    "start": "1501000",
    "end": "1555000"
  },
  {
    "text": "blue blur deployment who doesn't like zero downtime deployment so here you have two choices you can either use the",
    "start": "1503900",
    "end": "1511190"
  },
  {
    "text": "system that is built in ECS if your service which is called running update and you need only to define the number",
    "start": "1511190",
    "end": "1518120"
  },
  {
    "text": "of tasks that you want to keep alive when you're deploying a new version and",
    "start": "1518120",
    "end": "1523940"
  },
  {
    "text": "ECS will take care of the rest replacing progressively all the all the",
    "start": "1523940",
    "end": "1528950"
  },
  {
    "text": "old version by the new version or you can decide to be to be to play safe and",
    "start": "1528950",
    "end": "1534680"
  },
  {
    "text": "you decide that you want to to decide by yourself how much princess the",
    "start": "1534680",
    "end": "1539720"
  },
  {
    "text": "percentage of traffic you want to route to the new service and then you can leverage the routed the weighted rules",
    "start": "1539720",
    "end": "1546530"
  },
  {
    "text": "of route 53 in order to decide what traffic you want to route to the new",
    "start": "1546530",
    "end": "1553670"
  },
  {
    "text": "service five routing and scaling is me lb application labonza is quite new but",
    "start": "1553670",
    "end": "1561020"
  },
  {
    "start": "1555000",
    "end": "1612000"
  },
  {
    "text": "here's a couple of advantage over the traditional elastic load balancer the",
    "start": "1561020",
    "end": "1566210"
  },
  {
    "text": "first one is the ability to have only one load balancer and being able to route your your requests to the correct",
    "start": "1566210",
    "end": "1574070"
  },
  {
    "text": "service based on the on the request path so here for example you can see that their service one that my dummy comm",
    "start": "1574070",
    "end": "1580970"
  },
  {
    "text": "which which is served by a certain couple of tasks of task 1 and you have",
    "start": "1580970",
    "end": "1586400"
  },
  {
    "text": "server 2 that my own domain comm that is routed to another group of tasks the",
    "start": "1586400",
    "end": "1591920"
  },
  {
    "text": "second advantage of using lb is the fact that when you want to scale out you can",
    "start": "1591920",
    "end": "1598740"
  },
  {
    "text": "spin up a couple of instances of the same task on the same instance which something that wasn't possible with ELB",
    "start": "1598740",
    "end": "1605730"
  },
  {
    "text": "because you were you're stuck with only one instance because of the poor that was already taken six is the integration",
    "start": "1605730",
    "end": "1614580"
  },
  {
    "start": "1612000",
    "end": "1648000"
  },
  {
    "text": "with am roles in terms of security there is some flexibility here so you had at",
    "start": "1614580",
    "end": "1620130"
  },
  {
    "text": "first the ability to define an ec2 instance role in order to control the",
    "start": "1620130",
    "end": "1626160"
  },
  {
    "text": "access to different Amazon services but now there is another way another level",
    "start": "1626160",
    "end": "1631800"
  },
  {
    "text": "of I'm role and it's at the level of the task itself that means that you can",
    "start": "1631800",
    "end": "1637890"
  },
  {
    "text": "decide that the task one has access to a three and not worthy s and the SKU has access to RDS not a three which is",
    "start": "1637890",
    "end": "1645000"
  },
  {
    "text": "actually better in terms of security seven management of secrets management",
    "start": "1645000",
    "end": "1652230"
  },
  {
    "start": "1648000",
    "end": "1722000"
  },
  {
    "text": "secret management is it's quite hard and usually overlooked the the common use case is to inject your circuits using",
    "start": "1652230",
    "end": "1661050"
  },
  {
    "text": "environment Bibles that are stored into task definition it's already better than baking them into the docker image but",
    "start": "1661050",
    "end": "1668520"
  },
  {
    "text": "it's still not very secure and the reason for that is that everyone that has access to the ec2 instance or the of",
    "start": "1668520",
    "end": "1675510"
  },
  {
    "text": "the Amazon console can have access to the to those secrets a better way to",
    "start": "1675510",
    "end": "1681240"
  },
  {
    "text": "manage those secrets was actually suggested by a recent blog that from Amazon that I read a couple of weeks ago",
    "start": "1681240",
    "end": "1687990"
  },
  {
    "text": "and it's leveraging the ec2 parameter store which is a key value store that is",
    "start": "1687990",
    "end": "1694429"
  },
  {
    "text": "dedicated to manage secrets the way it works is that first of all it's",
    "start": "1694429",
    "end": "1699720"
  },
  {
    "text": "encrypting all the secrets using kms with your own key and it's only allowing",
    "start": "1699720",
    "end": "1705540"
  },
  {
    "text": "to retrieve the secrets from the resources that has that are associated with the proper am role which is really",
    "start": "1705540",
    "end": "1713040"
  },
  {
    "text": "convenient because you can then associate with your ECS tasks you can you can associate the role to decrypt",
    "start": "1713040",
    "end": "1719070"
  },
  {
    "text": "the secret that you need in your configuration 8 when you're using",
    "start": "1719070",
    "end": "1724580"
  },
  {
    "start": "1722000",
    "end": "1755000"
  },
  {
    "text": "several micro service that are talking one to the other you need service",
    "start": "1724580",
    "end": "1730710"
  },
  {
    "text": "discovery at some point you don't want to hard-code the URL of all the services so one way to achieve",
    "start": "1730710",
    "end": "1736220"
  },
  {
    "text": "that very simply is by using route 53 you just create a private zone for example here started cyber and then",
    "start": "1736220",
    "end": "1743679"
  },
  {
    "text": "services can talk one which is with each other by just using route 83 as a DNS",
    "start": "1743679",
    "end": "1750200"
  },
  {
    "text": "resolver for all the internal services",
    "start": "1750200",
    "end": "1754960"
  },
  {
    "start": "1755000",
    "end": "1781000"
  },
  {
    "text": "nine auto-scaling when you're when you when you have more",
    "start": "1755980",
    "end": "1761960"
  },
  {
    "text": "and more load in production you need auto scaling now here you have the flexibility to have auto scaling at the",
    "start": "1761960",
    "end": "1767510"
  },
  {
    "text": "level of the ECS cluster itself or at the level of the tasks themselves which is really good because because you can",
    "start": "1767510",
    "end": "1774559"
  },
  {
    "text": "define which which one are the most required in terms of scaling and finally",
    "start": "1774559",
    "end": "1782480"
  },
  {
    "start": "1781000",
    "end": "1848000"
  },
  {
    "text": "ten run 53 latency base rule so when you have multiple services you want and they",
    "start": "1782480",
    "end": "1789740"
  },
  {
    "text": "talk one which is other you want the ability to have delayed the lowest",
    "start": "1789740",
    "end": "1795380"
  },
  {
    "text": "latency now the problem is that sometimes those services are located in different regions so one way we found to",
    "start": "1795380",
    "end": "1803360"
  },
  {
    "text": "overcome this this issue is to actually duplicate a service from region to",
    "start": "1803360",
    "end": "1809419"
  },
  {
    "text": "region to and then use route 53 to have only a one single external URL to the",
    "start": "1809419",
    "end": "1815659"
  },
  {
    "text": "service but we're using latency base rule so that requests or routed to the",
    "start": "1815659",
    "end": "1821600"
  },
  {
    "text": "nearest end point in conclusion we've been able to use ECS very successfully",
    "start": "1821600",
    "end": "1828380"
  },
  {
    "text": "and and you can try to use it if you are running a lot of containers at scale I",
    "start": "1828380",
    "end": "1835820"
  },
  {
    "text": "think that I hope that this soak has give you let's say an overview of the",
    "start": "1835820",
    "end": "1841580"
  },
  {
    "text": "main advantage that you can leverage in the a little system that we also decided",
    "start": "1841580",
    "end": "1847250"
  },
  {
    "text": "to choose and finally as any successful companies we're looking to hire ok all",
    "start": "1847250",
    "end": "1855049"
  },
  {
    "start": "1848000",
    "end": "2015000"
  },
  {
    "text": "the senior DevOps engineers in the room are welcome to to join us if you like",
    "start": "1855049",
    "end": "1860570"
  },
  {
    "text": "challenges of scale in architecture promise you won't be",
    "start": "1860570",
    "end": "1865790"
  },
  {
    "text": "you wanna be bored joining us and that's it for me thank you very much",
    "start": "1865790",
    "end": "1871510"
  },
  {
    "text": "[Applause]",
    "start": "1871510",
    "end": "1875750"
  },
  {
    "text": "sorry well we'll just use this now so I think it's already I think it's way more",
    "start": "1897380",
    "end": "1902420"
  },
  {
    "text": "compelling to hear from people that are that are actually using this like I work everyday so rather than just hear from",
    "start": "1902420",
    "end": "1909140"
  },
  {
    "text": "oh it's like it's fine okay well fine",
    "start": "1909140",
    "end": "1918100"
  },
  {
    "text": "everyone can feel free to come up and say that they told me so after after this in any case and thank you very much",
    "start": "1918100",
    "end": "1926270"
  },
  {
    "text": "for to view for joining us I think it's way more compelling to hear from people like disease that use it at work every",
    "start": "1926270",
    "end": "1932600"
  },
  {
    "text": "day that have chosen it to build their architecture around it rather than just here here and we talk about it all the",
    "start": "1932600",
    "end": "1938240"
  },
  {
    "text": "time I think he really hit on on a lot of the content of the compelling reasons",
    "start": "1938240",
    "end": "1943340"
  },
  {
    "text": "why people are using like orchestration tools is that there's there's a lot of",
    "start": "1943340",
    "end": "1948470"
  },
  {
    "text": "there's a lot of benefits right from kind of decomposing this your your old monolith style architecture to all these",
    "start": "1948470",
    "end": "1955280"
  },
  {
    "text": "micro services but with the micro-services comes a lot of trade-offs so there's way more pieces to coordinate",
    "start": "1955280",
    "end": "1961220"
  },
  {
    "text": "there's way more deployments to coordinate the pace of development can be much faster and those are all really",
    "start": "1961220",
    "end": "1968630"
  },
  {
    "text": "good things but there's a lot more overhead that goes into working with something like that to and what you",
    "start": "1968630",
    "end": "1973940"
  },
  {
    "text": "should be looking for from your orchestration platform is the ability to kind of get these deployments out really",
    "start": "1973940",
    "end": "1979790"
  },
  {
    "text": "fast but also to kind of manage all the pieces so if you have if you have 30",
    "start": "1979790",
    "end": "1986300"
  },
  {
    "text": "services you have 40 services you need something that's going to help you kind of manage all those help you scale them",
    "start": "1986300",
    "end": "1991580"
  },
  {
    "text": "help you deploy them and you should be able to customize that as much as you want but also some things should just",
    "start": "1991580",
    "end": "1996620"
  },
  {
    "text": "work out of the box that is it I will get you guys out on time if you have any",
    "start": "1996620",
    "end": "2002380"
  },
  {
    "text": "questions we will both hang out up here for for a little bit thank you very much",
    "start": "2002380",
    "end": "2009840"
  }
]