[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "my name is Mitch Beaumont I'm the solutions architect and I work for Amazon Web Services in Sydney Australia and I'm joined today by Calvin Zhu who's",
    "start": "30",
    "end": "6930"
  },
  {
    "text": "a Productivity team lead developer from octo let's get started I love this quote",
    "start": "6930",
    "end": "14340"
  },
  {
    "text": "it's by a guy called Mario Andretti's anyone know who Mario Andretti's hands up if you do excellent great so if you",
    "start": "14340",
    "end": "19529"
  },
  {
    "text": "don't know he's a very successful American racecar driver and the quotes I love the quoting it implies that you",
    "start": "19529",
    "end": "25970"
  },
  {
    "text": "can't always be in control when you're going fast enough so if your teams if you're not going fast enough then if you",
    "start": "25970",
    "end": "33989"
  },
  {
    "text": "and your team aren't going fast enough you can often run into issues what happened to Mario unfortunately he lost",
    "start": "33989",
    "end": "39239"
  },
  {
    "start": "37000",
    "end": "37000"
  },
  {
    "text": "control of his car he was going extremely fast one day accelerated and his speed outweighed his control and",
    "start": "39239",
    "end": "46110"
  },
  {
    "text": "unfortunately off the back of that he smashed into warp now Mario was fine no major issues damaged a few toes but it",
    "start": "46110",
    "end": "54300"
  },
  {
    "text": "kind of resonated with me this quote because I think a lot of people decide to use containers because of the speed benefits that come along with containers",
    "start": "54300",
    "end": "60600"
  },
  {
    "text": "so the acceleration and agility that come along in terms of packaging building and deploying our software but",
    "start": "60600",
    "end": "67439"
  },
  {
    "text": "just because we have these new superpowers and we can package and build and deploy our software a lot more quickly now doesn't necessarily mean we",
    "start": "67439",
    "end": "73560"
  },
  {
    "text": "need to overlook the security and the controls that we should be thinking about when we're deploying our software",
    "start": "73560",
    "end": "78680"
  },
  {
    "text": "so over the next 30 minutes or so I'm going to talk you through what I think",
    "start": "78680",
    "end": "84600"
  },
  {
    "start": "79000",
    "end": "79000"
  },
  {
    "text": "of some of the really important aspects of container security then I'm going to hand over to Calvin who's going to talk",
    "start": "84600",
    "end": "89970"
  },
  {
    "text": "to you about how akhter have implemented some of these controls across his deployment pipeline for some of their",
    "start": "89970",
    "end": "95040"
  },
  {
    "text": "solutions and software now just as a bit of a disclaimer this is by no means an extensive list the things that I've",
    "start": "95040",
    "end": "100170"
  },
  {
    "text": "listed out here should form part of a multi-layered strategy or an approach for securing any type of container related infrastructure",
    "start": "100170",
    "end": "106290"
  },
  {
    "text": "that you might be managing and for that matter any type of application infrastructure that you might be managing as well so I'm going to talk",
    "start": "106290",
    "end": "111810"
  },
  {
    "text": "about kernel security and host security first and foremost this is where we're running our containers then I go to zero",
    "start": "111810",
    "end": "117210"
  },
  {
    "text": "in on denial of service and in the context of containers that's typically relating to resource availability and",
    "start": "117210",
    "end": "123450"
  },
  {
    "text": "we're going to talk about container breakouts what that means for a container and what we can do to mitigate the damage that can potentially be",
    "start": "123450",
    "end": "128729"
  },
  {
    "text": "caused by that then I'm going to look at container images themselves what can we do with those container image to make sure that we have the right",
    "start": "128729",
    "end": "134730"
  },
  {
    "text": "software in them we don't have vulnerabilities in them that can be compromised then we're going to talk about credentials and secrets management",
    "start": "134730",
    "end": "141060"
  },
  {
    "text": "which is a much bigger problem when we start to think about containers because we typically run a lot more containers than we have done with with virtual",
    "start": "141060",
    "end": "147209"
  },
  {
    "text": "machines and then we're going to take a quick look at run time security what happens when we run these containers at scale in the environment in production",
    "start": "147209",
    "end": "153989"
  },
  {
    "text": "how do we make sure that those containers continually have the latest vulnerability patches and security patches applied to them so without any",
    "start": "153989",
    "end": "161640"
  },
  {
    "text": "further ado I'm going to take you on this journey now we're going to start by talking about kernel and host security",
    "start": "161640",
    "end": "167180"
  },
  {
    "text": "lay the land a little bit let's start by just setting the scene it's obviously some very different fundamental security",
    "start": "167180",
    "end": "173160"
  },
  {
    "text": "differences between virtual machines and containers as you can see on the left hand side there we've got a bunch of virtual machines running on a hypervisor",
    "start": "173160",
    "end": "179370"
  },
  {
    "text": "the applications within those virtual machines are isolated from one another at the kernel level each guest operating",
    "start": "179370",
    "end": "184440"
  },
  {
    "text": "system has its own kernel on the other side then we've got the container instances themselves we've got a container running on a shared kernel so",
    "start": "184440",
    "end": "191489"
  },
  {
    "text": "that's the the isolation that's used to to wrap around the container is is these",
    "start": "191489",
    "end": "196650"
  },
  {
    "text": "through implemented using Linux namespaces and there's a range of Linux namespaces that are used to specifically",
    "start": "196650",
    "end": "202019"
  },
  {
    "text": "isolate the processes and capabilities of those applications we need to think",
    "start": "202019",
    "end": "208200"
  },
  {
    "text": "about the security of those containers slightly differently because the implementation of that isolation is a little bit different to what we were",
    "start": "208200",
    "end": "213359"
  },
  {
    "text": "used to when we think about virtual machines those containers share a single kernel they also access the set of",
    "start": "213359",
    "end": "219630"
  },
  {
    "text": "common shared files sockets memory errors and devices on their hosts operating systems as well so as I said",
    "start": "219630",
    "end": "225750"
  },
  {
    "text": "the the the posture is slightly different to that of a virtual machine and with that we need to think about how we handle security slightly differently",
    "start": "225750",
    "end": "233299"
  },
  {
    "start": "233000",
    "end": "233000"
  },
  {
    "text": "when we think about running containers on AWS we typically run them on top of",
    "start": "233299",
    "end": "239130"
  },
  {
    "text": "ec2 instances and those ec2 instances are created from Amazon Amazon machine machine images excuse me or",
    "start": "239130",
    "end": "245940"
  },
  {
    "text": "armies as we tend to call them so let's have a look at what we can do when we're building these armies to make sure that they are nice and secure and we don't",
    "start": "245940",
    "end": "252750"
  },
  {
    "text": "run the risk of necessarily getting compromised we look at and initially we take a base optimized image from the",
    "start": "252750",
    "end": "259829"
  },
  {
    "text": "public repository or the public catalog in this instance I've decided to take the ECS optimized army that optimized",
    "start": "259829",
    "end": "265919"
  },
  {
    "text": "army has a number of Cape weeks and standard pieces of software that we embed in there for our customers to use next we'll take that and we build",
    "start": "265919",
    "end": "273540"
  },
  {
    "text": "a foundational ami or army that foundational army includes very specific",
    "start": "273540",
    "end": "278729"
  },
  {
    "text": "domain-specific in fact configurations that we may desire within our environment that can be specific",
    "start": "278729",
    "end": "284130"
  },
  {
    "text": "security controls can be provisioners can be log management tools another config related items as well",
    "start": "284130",
    "end": "289500"
  },
  {
    "text": "then finally we create our final full stack army and that includes all of the rest of the dependencies that we need to",
    "start": "289500",
    "end": "295080"
  },
  {
    "text": "have our army operational and running to be able to execute and and host our our containers themselves it's really",
    "start": "295080",
    "end": "300780"
  },
  {
    "text": "important that we build the our Army's this way rather than relying solely on the base public images that are",
    "start": "300780",
    "end": "307169"
  },
  {
    "text": "available in the catalog because as many of you probably know Amazon from time to time D registers or depreciates some of",
    "start": "307169",
    "end": "313350"
  },
  {
    "text": "those armies and if we don't do that that can potentially lead to an availability issue in terms of those armies in the future another really",
    "start": "313350",
    "end": "320190"
  },
  {
    "text": "important part of this process is that the steps that we go through to configure those armies it's important that we codify those or codify those",
    "start": "320190",
    "end": "326699"
  },
  {
    "text": "depending on where you're coming from what I mean by that is that the steps that we go through the configuration changes that we implement the security",
    "start": "326699",
    "end": "332490"
  },
  {
    "text": "best practices we capture them in code and we store them in a central location and the reason we capture them in code",
    "start": "332490",
    "end": "338669"
  },
  {
    "text": "is so that we can replay those in an automated way so we can continually build rebuild new versions of our armies",
    "start": "338669",
    "end": "345360"
  },
  {
    "text": "as as updated versions of those armies get released by AWS once we have that",
    "start": "345360",
    "end": "350510"
  },
  {
    "text": "codified version of our configuration we're able to pass that into a deployment pipeline and we can use that",
    "start": "350510",
    "end": "355889"
  },
  {
    "start": "355000",
    "end": "355000"
  },
  {
    "text": "then to continually publish or create armies for us to use on an ongoing basis it's extremely important as I said given",
    "start": "355889",
    "end": "362610"
  },
  {
    "text": "the the shared nature of much of the operating system for our containers that we have an automated way of building these armies so that we can provision",
    "start": "362610",
    "end": "368699"
  },
  {
    "text": "and publish and an update our fleet of instances on a fairly regular basis so",
    "start": "368699",
    "end": "373770"
  },
  {
    "text": "here you can see I've got my devops persona he's pushing his configuration into a code repository that's then",
    "start": "373770",
    "end": "380099"
  },
  {
    "text": "triggering a pipeline job the pipeline job then is dipping into our public repository and it's pulling out and a",
    "start": "380099",
    "end": "385680"
  },
  {
    "text": "base image so let's say it's the ECS optimized image in this instance it's pulling out that base image it's then",
    "start": "385680",
    "end": "390840"
  },
  {
    "text": "layering down the specific configuration items that we have in our codified configuration document the output of",
    "start": "390840",
    "end": "396510"
  },
  {
    "text": "that is then a domain-specific or a customer army which we then inject back into the pipeline and then that can be",
    "start": "396510",
    "end": "402410"
  },
  {
    "text": "passed on to the next step in pipeline in the process which in this case is cloud formation but that could be any of the process it might be that we're using",
    "start": "402410",
    "end": "408730"
  },
  {
    "text": "terraform or any other tool to orchestrate the deployment in the provisioning of new instances with this new army sorry forgot that so let's talk",
    "start": "408730",
    "end": "419630"
  },
  {
    "text": "about denial of service now what's denial of service in the context of the container well as I said the containers",
    "start": "419630",
    "end": "424760"
  },
  {
    "text": "share lots of resources specifically we think about things like CPU and memory there are other resources as well that",
    "start": "424760",
    "end": "432500"
  },
  {
    "text": "get shared so things like user IDs and get shared within the containers on the instances themselves what is contained a",
    "start": "432500",
    "end": "438530"
  },
  {
    "start": "438000",
    "end": "438000"
  },
  {
    "text": "breakout well it contained a breakout occurs sorry my apologies proved a bit too far though what happens then what is a denial of service a deny of service",
    "start": "438530",
    "end": "444800"
  },
  {
    "text": "occurs when one of those containers decides that it wants to consume more resources than it should be consuming so",
    "start": "444800",
    "end": "451400"
  },
  {
    "text": "in the example I've got here two containers I've got a cats container in a dog's container my cats container",
    "start": "451400",
    "end": "456860"
  },
  {
    "text": "decides that it wants to consume all of the memory that sits on that that ec2 instance what eventually happens is we",
    "start": "456860",
    "end": "462860"
  },
  {
    "text": "push out that dog's container which means the docks container can no longer service requests and we end up with a denial of service what can we do to",
    "start": "462860",
    "end": "470360"
  },
  {
    "text": "mitigate a limit the impacts or the probability of a denial of service attack happening in this type of",
    "start": "470360",
    "end": "476090"
  },
  {
    "text": "scenario well first and foremost it's really important that we understand the resource requirements of our application",
    "start": "476090",
    "end": "481100"
  },
  {
    "text": "because using tools like ECS and we can declare and define upfront the resource",
    "start": "481100",
    "end": "486110"
  },
  {
    "text": "requirements for our containers and we can make sure that our containers only have access to those specific resources",
    "start": "486110",
    "end": "492200"
  },
  {
    "text": "in the event that they try and take more than they've been allocated we can actually invoke a termination of that particular container which saves us a",
    "start": "492200",
    "end": "498830"
  },
  {
    "text": "whole world of pain in the future but it's also not just memory and CPU those are the main ones that we typically look",
    "start": "498830",
    "end": "504200"
  },
  {
    "text": "at memory probably being one of the most important ones but as applications have a tendency to steal lots of memory but",
    "start": "504200",
    "end": "511280"
  },
  {
    "text": "also we've got things like user IDs that exists there as well so it's worth understanding what what resources we can",
    "start": "511280",
    "end": "518539"
  },
  {
    "text": "reserve and limit next point is to monitor always so make sure that we're monitoring the usage of these resources",
    "start": "518540",
    "end": "524720"
  },
  {
    "text": "continually so that we understand the patterns what is the expected behavior of the container application and when we",
    "start": "524720",
    "end": "530600"
  },
  {
    "text": "start to see anomalies across that were able to take action and Ramin eight great tools are out there by some",
    "start": "530600",
    "end": "535690"
  },
  {
    "text": "of our partners including people like data Dobbs that give you very granular visibility into the type of resources",
    "start": "535690",
    "end": "540700"
  },
  {
    "text": "that are being consumed and are able to give you notification and advise you when things are looking a bit a bit erroneous and leveraging auto-scaling",
    "start": "540700",
    "end": "547360"
  },
  {
    "text": "I've put there as all this is a nice capability of ECS obviously ECS is very integrated with AWS so to combat these",
    "start": "547360",
    "end": "554770"
  },
  {
    "text": "resource constraints that may occur because of a container a rogue container we're able to scale our fleet of ec2",
    "start": "554770",
    "end": "561610"
  },
  {
    "text": "instances under the covers which means we've got additional capacity available to soak up that load but we can also scale the containers themselves right",
    "start": "561610",
    "end": "570400"
  },
  {
    "text": "containing breakouts which is where I got to earlier on my apologies for that what does it contain a breakout in the context of container security well a",
    "start": "570400",
    "end": "577780"
  },
  {
    "text": "container breakout occurs when a process or application is elevating privileges",
    "start": "577780",
    "end": "583210"
  },
  {
    "text": "unable to break outside of the container constructor the isolated environment that's there for it so what I mean by",
    "start": "583210",
    "end": "588550"
  },
  {
    "text": "that is my apologies yep sorry not all",
    "start": "588550",
    "end": "593680"
  },
  {
    "text": "processes get namespace within the container specifically user IDs don't get namespace by default which means",
    "start": "593680",
    "end": "599560"
  },
  {
    "text": "that those like processes that run under certain privileged user IDs can potentially break out of those containers and compromise the underlying",
    "start": "599560",
    "end": "606190"
  },
  {
    "text": "operating system what's the best way to tackle that type of problem well first and foremost I would strongly recommend",
    "start": "606190",
    "end": "611980"
  },
  {
    "text": "that we don't run any processes in our containers as elevated users most of you that configured docker files before will",
    "start": "611980",
    "end": "617920"
  },
  {
    "text": "notice there's an argument that we can typically set in there that is the user it's often overlooked and it's often",
    "start": "617920",
    "end": "622960"
  },
  {
    "text": "left to to the default which is to run as the root user changing that helps a lot and mitigates the the likelihood of",
    "start": "622960",
    "end": "629740"
  },
  {
    "text": "an elevated privileged repertory privilege escalation what else can we do",
    "start": "629740",
    "end": "635230"
  },
  {
    "text": "to combat that well segmentation is a good approach what I mean segmentation is by taking",
    "start": "635230",
    "end": "641080"
  },
  {
    "text": "those containers that perhaps are slightly more critical or sensitive or",
    "start": "641080",
    "end": "646120"
  },
  {
    "text": "have a slightly higher risk profile and separating them from one another to make sure that in the event that a container breakout does occur other workloads are",
    "start": "646120",
    "end": "653500"
  },
  {
    "text": "not impacted by it the segmentation process or criteria may be as I said the",
    "start": "653500",
    "end": "658600"
  },
  {
    "text": "risk profile the level of exposure the sensitivity of the data that's going to be traversing through that particular container how can we go about doing that",
    "start": "658600",
    "end": "665860"
  },
  {
    "text": "how can we make sure that containers there are over specific sensitivity or classification operate on distinct",
    "start": "665860",
    "end": "671670"
  },
  {
    "text": "container instances within the environment ECS has a really nice solution to this problem I'm a short",
    "start": "671670",
    "end": "677740"
  },
  {
    "start": "675000",
    "end": "675000"
  },
  {
    "text": "although other container orchestrators do as well but in the example you've got here what we've got is with placing and",
    "start": "677740",
    "end": "683079"
  },
  {
    "text": "attribute or a custom attribute on one of the container instances that we're running that custom attributes is basically saying this container instance",
    "start": "683079",
    "end": "690010"
  },
  {
    "text": "as a card data environment and it has a value of true then when we create our",
    "start": "690010",
    "end": "697360"
  },
  {
    "text": "task definition and we deploy our task the schedulers will observe an honor",
    "start": "697360",
    "end": "702880"
  },
  {
    "text": "that's attribute that we've set on the task there and it will only place the tasks of this particular task Nate type",
    "start": "702880",
    "end": "708490"
  },
  {
    "text": "on to the instances that have that CD a value equals true that way we're able to",
    "start": "708490",
    "end": "713950"
  },
  {
    "text": "segregate all of our containers from one another so as you can see now what we've got is we've got two distinct sets of container instances we've got a CD set",
    "start": "713950",
    "end": "720940"
  },
  {
    "text": "of container instances that have been separated and then we've got the non CD set of container instances there so our dogs and our cats are running separately",
    "start": "720940",
    "end": "727480"
  },
  {
    "text": "from one another typical docker networking by default allows what we",
    "start": "727480",
    "end": "735459"
  },
  {
    "text": "call entertain in two container communication well that means is even though we've isolated our containers now",
    "start": "735459",
    "end": "741519"
  },
  {
    "text": "by by risk or exposure profile those two containers the cats containers here and the dogs containers on the other side",
    "start": "741519",
    "end": "747550"
  },
  {
    "text": "can still potentially talk to one another if certain steps aren't taken to mitigate that one of the things that we",
    "start": "747550",
    "end": "753190"
  },
  {
    "text": "can do is we can change the docket configuration to inter container communication equals false and that will essentially stop those containers",
    "start": "753190",
    "end": "758920"
  },
  {
    "text": "talking to one another through the docker bridge to which most containers get connected through a default mode of networking but with the introduction of",
    "start": "758920",
    "end": "766000"
  },
  {
    "text": "some additional capabilities in the EECS space recently there's a few more things that we can do to potentially combat that now and keep things nicely packet",
    "start": "766000",
    "end": "772720"
  },
  {
    "text": "it packaged up and isolated away from one another one of the capabilities that we announced recently is something called",
    "start": "772720",
    "end": "778990"
  },
  {
    "text": "task Ani or tasks networking tasks e and IR tasks networking is a capability by which we're able to associate an en I or",
    "start": "778990",
    "end": "786010"
  },
  {
    "text": "an elastic network interface with a specific task within a nice es cluster well that means is traditionally all",
    "start": "786010",
    "end": "792880"
  },
  {
    "text": "containers on a given e CS instance would communicate via the docker o bridge which is a network that gets",
    "start": "792880",
    "end": "798670"
  },
  {
    "text": "created on all docker hosts they would then communicate through that dr. o bridge out via the primary ether o",
    "start": "798670",
    "end": "805030"
  },
  {
    "text": "interface which is on each of the container instances that's can be very",
    "start": "805030",
    "end": "810730"
  },
  {
    "text": "difficult to stomach if you're doing network analysis and you're trying to diagnose traffic the sorry capture traffic that's coming up because",
    "start": "810730",
    "end": "816430"
  },
  {
    "text": "everything appears to be coming from the same location it also means that unfortunately because we only have a single Ethernet interface attached to",
    "start": "816430",
    "end": "823210"
  },
  {
    "text": "the container instance we're only really able to apply a single security group to that set of containers they all have to",
    "start": "823210",
    "end": "828460"
  },
  {
    "text": "have the same security group rules apply to them so with introduction of tasks networking now that we can assign a Ani to a",
    "start": "828460",
    "end": "834460"
  },
  {
    "text": "specific task we can go a little bit more granular in terms of the isolation between those containers and the egress",
    "start": "834460",
    "end": "839650"
  },
  {
    "text": "and ingress of the traffic between them so this is the typical approach this is how it worked before the dr. o bridge is",
    "start": "839650",
    "end": "845350"
  },
  {
    "text": "there we've got this global namespace we've got the e0 as you can see and we've got the round table within there",
    "start": "845350",
    "end": "850710"
  },
  {
    "text": "with that's networking the way it works is when we spin up a new container assuming or a task my apologists",
    "start": "850710",
    "end": "856450"
  },
  {
    "text": "assuming that the task definition includes the networking mode of AWS VP C",
    "start": "856450",
    "end": "861540"
  },
  {
    "text": "what will happen is under the covers ECS will provision as a new elastic network interface so here you can see that we've",
    "start": "861540",
    "end": "867910"
  },
  {
    "text": "created eath 1 the next step in that process is for the ECS agent which is a",
    "start": "867910",
    "end": "873220"
  },
  {
    "text": "container that runs on top of the inside of this global namespace it that will invoked a series of plugins which have",
    "start": "873220",
    "end": "879250"
  },
  {
    "text": "been written to the cni or container network interface standard those series",
    "start": "879250",
    "end": "884680"
  },
  {
    "text": "of plugins will take that new eni that either one eni and move it into the new networking namespace that's been",
    "start": "884680",
    "end": "890260"
  },
  {
    "text": "constructed for the container that we've just started now the container that we've just started in this network no",
    "start": "890260",
    "end": "895690"
  },
  {
    "text": "space or traffic that's egress or ingress will traverse that eath one because it's an Ani it means we can now",
    "start": "895690",
    "end": "901720"
  },
  {
    "text": "attach as I said a security group to that but it also means that we can do a little bit more so if we're trying to use network diagnostic tools and",
    "start": "901720",
    "end": "907600"
  },
  {
    "text": "troubleshooting tools and even network analysis tools we can be a lot more specific and targeted when we're doing our investigations which is a really",
    "start": "907600",
    "end": "913780"
  },
  {
    "text": "powerful tool capability what are the things that we can we do to limit the damage that can potentially be caused by",
    "start": "913780",
    "end": "919930"
  },
  {
    "text": "a container breakout incident well we've got things like capabilities Linux capabilities and these are kernel level",
    "start": "919930",
    "end": "925570"
  },
  {
    "text": "system calls that we can restrict on a container by container basis here you can see we've got an example we've",
    "start": "925570",
    "end": "931660"
  },
  {
    "text": "got a cats in a dog's container up until very recently it was very difficult to write these capabilities",
    "start": "931660",
    "end": "937389"
  },
  {
    "text": "out and using task definitions now we've introduced that capability into ETS so",
    "start": "937389",
    "end": "943779"
  },
  {
    "text": "we can use those capabilities to block those privilege levels calls out to the underlying kernel as you can see we've",
    "start": "943779",
    "end": "949899"
  },
  {
    "text": "we've disabled the CH own capability for the dogs container and the net bind service capability there has been",
    "start": "949899",
    "end": "955149"
  },
  {
    "text": "enabled for the for the cats container adding those capabilities and dropping those capabilities fairly easily done",
    "start": "955149",
    "end": "961269"
  },
  {
    "start": "958000",
    "end": "958000"
  },
  {
    "text": "that's how you would typically do it using the docker run command and then underneath that there you can see an example of the JSON that we would use",
    "start": "961269",
    "end": "968139"
  },
  {
    "text": "within a task definition to achieve the same thing image security all of our",
    "start": "968139",
    "end": "977259"
  },
  {
    "text": "containers are made from images that's basically the price of admission when it comes to using containers question I'd",
    "start": "977259",
    "end": "983499"
  },
  {
    "text": "probably ask everyone here is does everyone know what's inside of that containers I'm assuming most people pull their containers from public",
    "start": "983499",
    "end": "988899"
  },
  {
    "text": "repositories hopefully a lot of you use private repositories as well but do you really know what's inside of all your containers and generally speaking unless",
    "start": "988899",
    "end": "995110"
  },
  {
    "text": "you've built those containers from scratch you literally scratch you probably don't know what's inside of",
    "start": "995110",
    "end": "1001049"
  },
  {
    "text": "those containers and if you do that's great but do you maintain what's inside of those containers lots of things going on on there there's lots of software",
    "start": "1001049",
    "end": "1006990"
  },
  {
    "text": "that's continuing to add it to those containers over the lifecycle of those containers and many of those pieces of software potentially could develop",
    "start": "1006990",
    "end": "1013350"
  },
  {
    "text": "vulnerabilities and they need to be patched and addressed another problem",
    "start": "1013350",
    "end": "1018389"
  },
  {
    "text": "that can occur within our images is privileged binaries that exist within",
    "start": "1018389",
    "end": "1023670"
  },
  {
    "text": "there so here we've got some binaries from a typical image these binaries that are set with the set you add flag this",
    "start": "1023670",
    "end": "1028890"
  },
  {
    "text": "means that they essentially execute as the owner of those binaries which typically is route so if you execute any",
    "start": "1028890",
    "end": "1035399"
  },
  {
    "text": "of these commands within a container they would be executing as root and obviously once you can execute as root",
    "start": "1035399",
    "end": "1040529"
  },
  {
    "text": "there's a whole lot more you can do how can we address that problem well first and foremost we can go through our images and we can make sure that either",
    "start": "1040529",
    "end": "1046110"
  },
  {
    "text": "a we don't have some of these these these privileged executables or binaries within our images or we can go through a",
    "start": "1046110",
    "end": "1052110"
  },
  {
    "text": "process called defanging which is to go through and actually remove this set you at IDF like from from many of these",
    "start": "1052110",
    "end": "1058049"
  },
  {
    "text": "binaries be interesting to see when you go back perhaps check some of your images see what's in there and have a",
    "start": "1058049",
    "end": "1063210"
  },
  {
    "text": "guess whether or not your applications rely on these things I'm sure many of you would find that probably not so much here's an example",
    "start": "1063210",
    "end": "1070350"
  },
  {
    "text": "of an image history I pulled recently I was just looking at HTTP image just to give you an example of the types of layers that go into a single image",
    "start": "1070350",
    "end": "1076560"
  },
  {
    "text": "there's lots of activity there and much of the activity that wasn't actually driven by you as there as the consumer",
    "start": "1076560",
    "end": "1083400"
  },
  {
    "text": "and user of that image every single piece of software would change that's been injected and there needs to be factored in when you're thinking about",
    "start": "1083400",
    "end": "1088920"
  },
  {
    "text": "security of these images what are some of the best practices then when we're creating images how do we create secure",
    "start": "1088920",
    "end": "1095190"
  },
  {
    "start": "1093000",
    "end": "1093000"
  },
  {
    "text": "images what should we be doing well we should be thinking about using signed container images making sure that we're come in pulling containers images",
    "start": "1095190",
    "end": "1101280"
  },
  {
    "text": "pulling container images from trusted sources making sure the images we are pulling our images that we expect to be",
    "start": "1101280",
    "end": "1107400"
  },
  {
    "text": "pulling from trusted owners other things that we can do is set file systems to read-only this means that those",
    "start": "1107400",
    "end": "1113370"
  },
  {
    "text": "containers themselves won't be modified and potentially stops any bad actors",
    "start": "1113370",
    "end": "1119400"
  },
  {
    "text": "from getting there and making changes which could be used to compromise the container as I've already talked about we can remove set UID and set gear",
    "start": "1119400",
    "end": "1126240"
  },
  {
    "text": "binaries from the images themselves or go through that process of defanging which is to remove that flag from those",
    "start": "1126240",
    "end": "1131940"
  },
  {
    "text": "binaries I already talked about not running contained sorry not yeah not bringing your containers as route so",
    "start": "1131940",
    "end": "1137670"
  },
  {
    "text": "making sure that when you're defining your doctor files you include that user argument in there and specifying a",
    "start": "1137670",
    "end": "1142830"
  },
  {
    "text": "specific user that is non-root and then finally I've put there consider running static binaries you've got a static",
    "start": "1142830",
    "end": "1149100"
  },
  {
    "text": "binary there's no other dependencies that you need to worry about everything is packaged within that binary itself the only downside or drawback of that is",
    "start": "1149100",
    "end": "1155340"
  },
  {
    "text": "they can be a bit difficult to try and troubleshoot and diagnose and debug these containers if you've just got static binaries in there general image",
    "start": "1155340",
    "end": "1162450"
  },
  {
    "start": "1161000",
    "end": "1161000"
  },
  {
    "text": "security tips and best practices make sure we're using trusted images make sure we're pulling these from trusted locations private repositories I deal",
    "start": "1162450",
    "end": "1169710"
  },
  {
    "text": "with would be great make sure we're using minimal based operating system images that doesn't just necessarily",
    "start": "1169710",
    "end": "1174930"
  },
  {
    "text": "relate to the containers themselves but also the host operating systems make sure we're using things like Alpine if",
    "start": "1174930",
    "end": "1180300"
  },
  {
    "text": "we can build an image from scratch even better scratch again quite literally scratch an image signing as well to make",
    "start": "1180300",
    "end": "1186480"
  },
  {
    "text": "sure that the images that we're pulling down are those images that we should be pulling down they haven't been tampered with they haven't been manipulated",
    "start": "1186480",
    "end": "1191790"
  },
  {
    "text": "beyond what we expect them to be and then look at using some container vulnerability scanning tools there's",
    "start": "1191790",
    "end": "1197460"
  },
  {
    "text": "lots of them out there we've got lots of great partners that integrate with ECS and here I've listed a few there so",
    "start": "1197460",
    "end": "1202600"
  },
  {
    "text": "twistlock know vector aqua sake you name it and all of those tools are really good tools at helping you scan",
    "start": "1202600",
    "end": "1209410"
  },
  {
    "text": "continually the containers that you store everything you're sorry the images that you store within your registries and notifying you if there are known",
    "start": "1209410",
    "end": "1216220"
  },
  {
    "text": "from abilities and helping you take actions to remediate that here's a",
    "start": "1216220",
    "end": "1221860"
  },
  {
    "text": "typical kind of workflow that we might incorporate when we're building these images that we might build with our second ops engineers so I developers on",
    "start": "1221860",
    "end": "1229120"
  },
  {
    "text": "our security engineers have a vested interest in what we're deploying and what we're writing so here we've got a docker file we've got a task definition",
    "start": "1229120",
    "end": "1234490"
  },
  {
    "text": "we're feeding that into our code repository over here our engineers are obviously contributing also our operations guys within building",
    "start": "1234490",
    "end": "1241360"
  },
  {
    "text": "a docker image based off of that performing some checks before we build",
    "start": "1241360",
    "end": "1246460"
  },
  {
    "text": "that docker image though so we're making sure we're doing a lint here of a docker file and we're making sure that within that docker file itself",
    "start": "1246460",
    "end": "1251920"
  },
  {
    "text": "there's nothing in there that we consider to be bad practice so here you can see we're looking for making sure",
    "start": "1251920",
    "end": "1257200"
  },
  {
    "text": "that the user instruction is there if the user street construction isn't there this build process is going to fail also",
    "start": "1257200",
    "end": "1262360"
  },
  {
    "text": "making sure that we don't have SSH installed as part of the process again this will help us fail that build and stop the image getting pushed out into",
    "start": "1262360",
    "end": "1268360"
  },
  {
    "text": "production at the same time we can run vulnerability scans against the image using some of the tools that I already",
    "start": "1268360",
    "end": "1274810"
  },
  {
    "text": "mention there and finally once we've been through those checks and we realized that our image is in a good state we can then push it into an image",
    "start": "1274810",
    "end": "1280780"
  },
  {
    "text": "repository for future consumption",
    "start": "1280780",
    "end": "1284550"
  },
  {
    "text": "secrets what a secrets well these are the things that we need to push into our environment I already mentioned earlier",
    "start": "1286020",
    "end": "1292690"
  },
  {
    "start": "1288000",
    "end": "1288000"
  },
  {
    "text": "on that this becomes a much larger problem when we think about containers because there are a lot more containers than there are virtual machines it was a",
    "start": "1292690",
    "end": "1299290"
  },
  {
    "text": "best practice sometime back to put your own containers sorry put your secrets into your containers and your",
    "start": "1299290",
    "end": "1304870"
  },
  {
    "text": "applications using environment variables for those of you that ever tried to do that and have ever run a docker inspect",
    "start": "1304870",
    "end": "1310750"
  },
  {
    "text": "it's fairly easy to extract that information from a container if it's not encrypted so generally speaking we don't",
    "start": "1310750",
    "end": "1316570"
  },
  {
    "text": "recommend putting them in environment variables if it's extremely sensitive information like passwords and user name it there's a couple of examples there of",
    "start": "1316570",
    "end": "1324220"
  },
  {
    "text": "white can be easily extracted we can take them from ECS API calls docker inspect and link containers not so much",
    "start": "1324220",
    "end": "1331600"
  },
  {
    "text": "anymore but but it has been an issue in past so what can we do as opposed to putting them into environment variables",
    "start": "1331600",
    "end": "1338060"
  },
  {
    "start": "1334000",
    "end": "1334000"
  },
  {
    "text": "within our application containers themselves well we can store them in other places and we can store them in s3 buckets we can store them in things like",
    "start": "1338060",
    "end": "1345110"
  },
  {
    "text": "Systems Manager parameter store and I'll talk a bit more about that in a moment but one of the things that's really empowered us to do this in an effective",
    "start": "1345110",
    "end": "1351260"
  },
  {
    "text": "way recently is the use of IEM roles for tasks so every task that we now create we can associate a set of i.m privileges",
    "start": "1351260",
    "end": "1358160"
  },
  {
    "text": "with that task which limit and control what resources those tasks can create a sari can can can access the role itself",
    "start": "1358160",
    "end": "1366500"
  },
  {
    "text": "is similar to most i.m roles the policy structure is no different but instead of assigning it to an ec2 instance we assign it to a task as an example I am",
    "start": "1366500",
    "end": "1374930"
  },
  {
    "start": "1373000",
    "end": "1373000"
  },
  {
    "text": "roles for ec2 so you can see at the top layer what I've got is an I am role associated with the ec2 instance at the",
    "start": "1374930",
    "end": "1380150"
  },
  {
    "text": "top level what that means unfortunately is that both of the containers that are running within the environment they're inherit those same privileges as the",
    "start": "1380150",
    "end": "1387950"
  },
  {
    "text": "container instance itself which means that we've got a cats container here that has some undesired privileges and permissions he's accessing the dogs",
    "start": "1387950",
    "end": "1394400"
  },
  {
    "text": "bucket and if the dogs book it contains sensitive secrets that he shouldn't be accessing we've got a problem there so",
    "start": "1394400",
    "end": "1400220"
  },
  {
    "start": "1400000",
    "end": "1400000"
  },
  {
    "text": "with the introduction of container level or task level roles what we've got now is we've got a very specific sub set of",
    "start": "1400220",
    "end": "1406040"
  },
  {
    "text": "permissions that only allow the cats container to access the cats bucket and the dogs container to access the dogs",
    "start": "1406040",
    "end": "1411200"
  },
  {
    "text": "bucket as I mentioned and my apologies",
    "start": "1411200",
    "end": "1416930"
  },
  {
    "start": "1413000",
    "end": "1413000"
  },
  {
    "text": "the name is slightly off course we've just a rename chase our naming change this week but Amazon ec2 Systems Manager",
    "start": "1416930",
    "end": "1422780"
  },
  {
    "text": "or Adel US Systems Manager now parameter store is another approach that we can take for storing those secrets in a",
    "start": "1422780",
    "end": "1428390"
  },
  {
    "text": "central location so parameter stores are fully managed fully encrypted highly available secrets management parameter",
    "start": "1428390",
    "end": "1433700"
  },
  {
    "text": "store secrets are stored in there they can be encrypted as secret strings or plain text strings but the real benefit",
    "start": "1433700",
    "end": "1440510"
  },
  {
    "text": "and the real power of that is it's highly integrated with the IAM which means that we can restrict access down",
    "start": "1440510",
    "end": "1445700"
  },
  {
    "text": "to the parameters within an environment down to specific tasks we're using iam roles for tasks and parameter store we",
    "start": "1445700",
    "end": "1451460"
  },
  {
    "text": "can restrict down very granular lis which parameters those containers can actually access we can also encrypt",
    "start": "1451460",
    "end": "1457040"
  },
  {
    "text": "using kms so we can provide almost a second layer of authentication or validation by by granting the container",
    "start": "1457040",
    "end": "1463220"
  },
  {
    "text": "itself access to decrypt those secrets using a very specific kms key here's an example so I've got a",
    "start": "1463220",
    "end": "1471320"
  },
  {
    "start": "1470000",
    "end": "1470000"
  },
  {
    "text": "contact cats container you can probably tell I like cats and dogs we've got a cats container reaching out to parameter",
    "start": "1471320",
    "end": "1476570"
  },
  {
    "text": "store there it wants to decrypt the secret so it's calling on kms it's getting the key its decrypting the secret and the secrets",
    "start": "1476570",
    "end": "1482149"
  },
  {
    "text": "then being passed back to the counter container for use within its with its runtime and that was a good segue into",
    "start": "1482149",
    "end": "1489229"
  },
  {
    "text": "runtime so I already mentioned about the introduction of task networking for free",
    "start": "1489229",
    "end": "1496759"
  },
  {
    "text": "CS one of the benefits that that brings with it as I as I briefly mentioned is that we can now get much better",
    "start": "1496759",
    "end": "1501950"
  },
  {
    "text": "visibility much more granular visibility into the behavior of the containers that are that are running on our container",
    "start": "1501950",
    "end": "1507139"
  },
  {
    "text": "instances rather than just having to consume all of the information that's coming out of that primary zero interface we can kind of Reason now",
    "start": "1507139",
    "end": "1513679"
  },
  {
    "text": "about what those containers should be doing the source of traffic we would have be expecting to see coming out of those containers so here we've got a",
    "start": "1513679",
    "end": "1519139"
  },
  {
    "text": "cats container again he's making a call there of a port 22 now my cats container is a simple HTTP application there's no",
    "start": "1519139",
    "end": "1525229"
  },
  {
    "text": "reason why it should be making a call out 5 for 22 especially not to another container because we're using en is for",
    "start": "1525229",
    "end": "1532909"
  },
  {
    "text": "each of these containers what I'm able to do is I'm gonna are able to enable something like V PC flow logs or I can",
    "start": "1532909",
    "end": "1538099"
  },
  {
    "text": "attach another tool and assess that particular interface using a different mechanism but by looking through the V PC flow logs I'm able to identify the",
    "start": "1538099",
    "end": "1544549"
  },
  {
    "text": "rejects here in there I can see that I've got a reject I've got a connection to port 22 being made and off the back of that then I'm able to take some",
    "start": "1544549",
    "end": "1550190"
  },
  {
    "text": "remediation steps or some actions to try and address that particular problem now whether that is go ahead and stop the container or take some other action like",
    "start": "1550190",
    "end": "1557539"
  },
  {
    "text": "go and inspect the containers to try and find out exactly what's changed on that container how it's been compromised",
    "start": "1557539",
    "end": "1563619"
  },
  {
    "text": "there are lots of really great tools out there that can help manage containers at runtime one of the ones I particularly",
    "start": "1563619",
    "end": "1568849"
  },
  {
    "text": "like is twist lock there's a lot of capabilities in there it does not only image scanning but it",
    "start": "1568849",
    "end": "1574369"
  },
  {
    "text": "also does wearability management at runtime when time defense compliance native firewalling if there's a lot of",
    "start": "1574369",
    "end": "1580580"
  },
  {
    "text": "intelligence assessment over the applications themselves so it will model each of the images that you have and it will indicate when things look erroneous",
    "start": "1580580",
    "end": "1588109"
  },
  {
    "text": "in terms of the application flows between the various containers that are in your infrastructure so I highly recommend if you're looking for a tool",
    "start": "1588109",
    "end": "1593599"
  },
  {
    "text": "to help you with your runtime can maintain a management take a look at twist lock but as I said there's plenty of other partner",
    "start": "1593599",
    "end": "1598789"
  },
  {
    "text": "solutions out there that can just as well with that what I'm going to do now is hand over to Kelvin to talk to",
    "start": "1598789",
    "end": "1605020"
  },
  {
    "text": "you about how octo has solved many of their problems from a container security perspective is it on so yep as mentioned",
    "start": "1605020",
    "end": "1625090"
  },
  {
    "text": "I'm working I am at octa I'm a part ideally team lead developer basically",
    "start": "1625090",
    "end": "1631630"
  },
  {
    "text": "what that means is that I work on the developer tools that all of our developers use in order to get their",
    "start": "1631630",
    "end": "1637090"
  },
  {
    "text": "code in to master such as our containers integration system and also help out with some of the release tools and",
    "start": "1637090",
    "end": "1645270"
  },
  {
    "text": "overall I'll be going over kind of how we utilize containers in our system and",
    "start": "1645270",
    "end": "1651160"
  },
  {
    "text": "how we secure them so overall in terms",
    "start": "1651160",
    "end": "1662410"
  },
  {
    "text": "of how I'll go through this is first I'll go into a little bit of detail about how we use containers in the first",
    "start": "1662410",
    "end": "1668140"
  },
  {
    "text": "place and then I'll go into the details about how we secure them so in terms of",
    "start": "1668140",
    "end": "1675060"
  },
  {
    "text": "what security is to us it's very important to us that we keep a keep our",
    "start": "1675060",
    "end": "1682300"
  },
  {
    "text": "system reliable in terms of all the different sign things that can happen such as security breaches or improper",
    "start": "1682300",
    "end": "1688210"
  },
  {
    "text": "use of Secrets there are if any of those kind of things happen it's very damaging and also one very important part of it",
    "start": "1688210",
    "end": "1695140"
  },
  {
    "text": "is it's very very costly basically if our system goes down our developers can't use the system so you want to make",
    "start": "1695140",
    "end": "1703540"
  },
  {
    "text": "sure that it's good that our developers can don't have any issues and likewise",
    "start": "1703540",
    "end": "1709440"
  },
  {
    "text": "by having a heavy automation inside of our security system it isn't difficult for us to make sure that we actually",
    "start": "1709440",
    "end": "1715900"
  },
  {
    "text": "have all these security processes in place so I'll go through some of the",
    "start": "1715900",
    "end": "1721510"
  },
  {
    "text": "examples in terms of how we actually use containers I'll go into first a little",
    "start": "1721510",
    "end": "1728440"
  },
  {
    "start": "1727000",
    "end": "1727000"
  },
  {
    "text": "bit of a high-level overview of kind of how our system works also a developer they writes another kind",
    "start": "1728440",
    "end": "1734240"
  },
  {
    "text": "it's pushing into github what that results in is a push committed committing application from github over",
    "start": "1734240",
    "end": "1740420"
  },
  {
    "text": "to our system to which we call bacon and in there the user can see what commits",
    "start": "1740420",
    "end": "1747350"
  },
  {
    "text": "are available to them and then if they say hey I want to run tests on this system on this commit then it results in",
    "start": "1747350",
    "end": "1754100"
  },
  {
    "text": "us sending jobs over to a job queue which in this case is an sqs queue and",
    "start": "1754100",
    "end": "1759470"
  },
  {
    "text": "then from there it goes over to our worker pool which is this is where our containers are their doctor testing",
    "start": "1759470",
    "end": "1765679"
  },
  {
    "text": "agents what are these doctor testing agents they run the jobs on fire off whatever",
    "start": "1765679",
    "end": "1771290"
  },
  {
    "text": "tests they are do any kind of processing and then once they're done they send the results back over to our bacon web",
    "start": "1771290",
    "end": "1776720"
  },
  {
    "text": "application where the user users can actually go ahead and see hey did it was accessible failure or not and then if",
    "start": "1776720",
    "end": "1783620"
  },
  {
    "text": "they're good with it and they can merge the results but this is just what I was just talking about so digging a little",
    "start": "1783620",
    "end": "1791150"
  },
  {
    "start": "1790000",
    "end": "1790000"
  },
  {
    "text": "deeper into the containers basically in terms of the doctor and the doctor runs",
    "start": "1791150",
    "end": "1798790"
  },
  {
    "text": "they do various the end of things in them they might be test runs and make the builds but overall in the end some",
    "start": "1798790",
    "end": "1805820"
  },
  {
    "text": "of the booze builds actually create artifacts now these artifacts could be things like Java jars and PM packages but they also",
    "start": "1805820",
    "end": "1812960"
  },
  {
    "text": "some of them are docker images these go in all of these go into our repository",
    "start": "1812960",
    "end": "1817990"
  },
  {
    "text": "for artifacts and then from there we consume them some of these actually even",
    "start": "1817990",
    "end": "1824809"
  },
  {
    "text": "go right back into our CI system on the docker images they get run as part of our ECS tasks in order to actually be",
    "start": "1824809",
    "end": "1832280"
  },
  {
    "text": "these docker testing agents and then others which are actually web",
    "start": "1832280",
    "end": "1837650"
  },
  {
    "text": "applications get run on the ECS onto acs services in fact actually our baking web",
    "start": "1837650",
    "end": "1844190"
  },
  {
    "text": "application itself is one of these services that we run so yeah again what",
    "start": "1844190",
    "end": "1851750"
  },
  {
    "text": "I was just talking about in terms of those two different types we have different scale that we have to handle",
    "start": "1851750",
    "end": "1857210"
  },
  {
    "start": "1852000",
    "end": "1852000"
  },
  {
    "text": "for each of those for instance for the CI system it has to scale up a thousands",
    "start": "1857210",
    "end": "1863090"
  },
  {
    "text": "of instances at times because we our developers have hundreds of that they have to run um and likewise",
    "start": "1863090",
    "end": "1869320"
  },
  {
    "text": "these containers are also only they only have to run once and they generally are done within an hour but likewise you",
    "start": "1869320",
    "end": "1876880"
  },
  {
    "text": "also need to scale down the system heavily because like overnight and during the weekends there's kind of no",
    "start": "1876880",
    "end": "1882730"
  },
  {
    "text": "need to actually run so many containers if the developers aren't actually working on the other hand the ECS",
    "start": "1882730",
    "end": "1889630"
  },
  {
    "text": "service side with the web applications those ones have to scale up and down according to web traffic and likewise",
    "start": "1889630",
    "end": "1895059"
  },
  {
    "text": "these containers are much more longer-lived so now going into the actual security",
    "start": "1895059",
    "end": "1900460"
  },
  {
    "text": "side of things so in terms of us handling the host side of security we",
    "start": "1900460",
    "end": "1908020"
  },
  {
    "start": "1902000",
    "end": "1902000"
  },
  {
    "text": "have kind of two men three major parts the ami accessibility and ease of change",
    "start": "1908020",
    "end": "1914130"
  },
  {
    "start": "1914000",
    "end": "1914000"
  },
  {
    "text": "so in terms of the ami mitch already talked a bit about the hardening there",
    "start": "1914130",
    "end": "1921669"
  },
  {
    "text": "ami but likewise we also have much of the same issues that we have to deal with in terms of that every single",
    "start": "1921669",
    "end": "1927039"
  },
  {
    "text": "package that's installed is a potential threat so we also work on creating our own",
    "start": "1927039",
    "end": "1932620"
  },
  {
    "text": "hardened ami because every single installed package even if it's unused like if we use the EECS optimized ami if",
    "start": "1932620",
    "end": "1939039"
  },
  {
    "text": "even if whatever they have in there if even it's unused and might have a vulnerability that we have to patch even",
    "start": "1939039",
    "end": "1945429"
  },
  {
    "text": "though we're not using it so in order to minimize the result possibility of that",
    "start": "1945429",
    "end": "1951429"
  },
  {
    "text": "problem we make sure that we have an ami with only the minimum necessary to run the application um and in order to make",
    "start": "1951429",
    "end": "1957130"
  },
  {
    "text": "sure that it's security compliant we also make sure that it complies with all of the concentred internet security",
    "start": "1957130",
    "end": "1962380"
  },
  {
    "text": "check lists make sure that everything is secure so what this looks like is we",
    "start": "1962380",
    "end": "1970120"
  },
  {
    "text": "have the Packer build repo which is essentially just a repository with all the definition of how to build our ami",
    "start": "1970120",
    "end": "1976470"
  },
  {
    "text": "and then it is we have bacon to process",
    "start": "1976470",
    "end": "1982000"
  },
  {
    "text": "out what are all the things that need to be run in order to actually build this image and then once somebody says hey I",
    "start": "1982000",
    "end": "1990669"
  },
  {
    "text": "have a commit and I want to actually make get this turned into an ami then they would run off the jobs on bacon",
    "start": "1990669",
    "end": "1996940"
  },
  {
    "text": "that results in on our docker containers running the am i job all once that's done building",
    "start": "1996940",
    "end": "2003960"
  },
  {
    "text": "then we run off some server spec tests on it to make sure that it's functional that there aren't any issues there are",
    "start": "2003960",
    "end": "2009540"
  },
  {
    "text": "any issues and of course it goes back to the developer and they have to make fixes to it then once it's actually done",
    "start": "2009540",
    "end": "2015810"
  },
  {
    "text": "creating the ami we also we then have it run through a couple additional tests to",
    "start": "2015810",
    "end": "2021480"
  },
  {
    "text": "actually make sure that it's compliant um this is where we run off basically",
    "start": "2021480",
    "end": "2027210"
  },
  {
    "text": "the CIS to a checklist once it's done running through those tests and if everything is ok that's",
    "start": "2027210",
    "end": "2033330"
  },
  {
    "text": "when we actually create a runoff additional jobs to actually send it off to all our different AWS accounts now in",
    "start": "2033330",
    "end": "2043410"
  },
  {
    "start": "2041000",
    "end": "2041000"
  },
  {
    "text": "terms of our CI system all of it is behind the V PC so that's one way that",
    "start": "2043410",
    "end": "2049290"
  },
  {
    "text": "we prevent unauthorized access to it is making sure that everything is behind the VPN likewise we also make sure that",
    "start": "2049290",
    "end": "2057690"
  },
  {
    "text": "we have all of our security groups so that all of our individual easy two instances that have our am i running on",
    "start": "2057690",
    "end": "2063720"
  },
  {
    "text": "it aren't able to connect me indicate with each other this and we do allow the",
    "start": "2063720",
    "end": "2069780"
  },
  {
    "text": "security groups to actually allow them to connect to some external services if they need it because our developers sometimes need that kind of access for",
    "start": "2069780",
    "end": "2076409"
  },
  {
    "text": "their jobs but these instances shouldn't be able to talk to each other because they're running individual",
    "start": "2076410",
    "end": "2082139"
  },
  {
    "text": "self-contained jobs likewise in terms of SSH keys to",
    "start": "2082140",
    "end": "2088560"
  },
  {
    "text": "actually get onto these instances oh we also only give them to a very trusted set of users and make sure that we",
    "start": "2088560",
    "end": "2094290"
  },
  {
    "text": "rotate them regularly to make sure that nothing gets leaked now in terms of",
    "start": "2094290",
    "end": "2101130"
  },
  {
    "start": "2099000",
    "end": "2099000"
  },
  {
    "text": "making sure that we can change things and patch things very regularly just in",
    "start": "2101130",
    "end": "2106140"
  },
  {
    "text": "case like say there's a zero day or something like that we all we make sure",
    "start": "2106140",
    "end": "2111960"
  },
  {
    "text": "that it's very easy to make to create our ami at all times because it's very",
    "start": "2111960",
    "end": "2117390"
  },
  {
    "text": "important for us to make sure that it's very fast also because if there's a zero day we need to make sure that we get it",
    "start": "2117390",
    "end": "2122520"
  },
  {
    "text": "fixed hopefully within a day if not less all so for instance like the end this is",
    "start": "2122520",
    "end": "2129690"
  },
  {
    "text": "just a little bit of a snippet of some of the commands that we run if using the 8 OS CLI in order to create",
    "start": "2129690",
    "end": "2135000"
  },
  {
    "text": "in ami and so what this looks like is",
    "start": "2135000",
    "end": "2141690"
  },
  {
    "text": "say that basically we have a CloudFormation template which is governs",
    "start": "2141690",
    "end": "2149280"
  },
  {
    "text": "basically how we have our ec2 cluster or ECS cluster sorry and it is that ECS",
    "start": "2149280",
    "end": "2156660"
  },
  {
    "text": "cluster is backed by an auto scaling group which brings up more or less easy to instances as necessary now say that a",
    "start": "2156660",
    "end": "2164580"
  },
  {
    "text": "malicious user comes in and they hack one of our ec2 instances now that that",
    "start": "2164580",
    "end": "2170820"
  },
  {
    "text": "instance is hacked it's actually very easy for us to just plain fix this problem we just terminate the instance",
    "start": "2170820",
    "end": "2177290"
  },
  {
    "text": "because everything is behind a scaling group we don't want this instance it's",
    "start": "2177290",
    "end": "2183240"
  },
  {
    "text": "gone then our auto scheming group will just bring a new one right back up and since we have plenty of other you see",
    "start": "2183240",
    "end": "2188820"
  },
  {
    "text": "two instances our users don't really notice any difference in terms of that now in terms of zero-day it gets a",
    "start": "2188820",
    "end": "2195660"
  },
  {
    "text": "little bit more complicated because now all of the ec2 instances are are compromised so in this case we generate",
    "start": "2195660",
    "end": "2203490"
  },
  {
    "text": "the new am I using that process that I showed earlier and we feed it into our CloudFormation template as a new",
    "start": "2203490",
    "end": "2209790"
  },
  {
    "text": "parameter and in this in this confirmation template we have a certain",
    "start": "2209790",
    "end": "2214800"
  },
  {
    "text": "update policy which is an auto scaling rolling update and what this allows it",
    "start": "2214800",
    "end": "2221280"
  },
  {
    "text": "serve this is going to do is it will just take down a couple instances at a time and then bring up new ones to",
    "start": "2221280",
    "end": "2227730"
  },
  {
    "text": "replace them oh this allows us to make sure that we don't actually have downtime in order to replace all of",
    "start": "2227730",
    "end": "2232920"
  },
  {
    "text": "these ec2 instances so then once it's",
    "start": "2232920",
    "end": "2238200"
  },
  {
    "text": "done doing its work of getting all of these instances replaced then we are now back in a good state and we're not and",
    "start": "2238200",
    "end": "2245000"
  },
  {
    "text": "this year days dealt with one more thing",
    "start": "2245000",
    "end": "2251430"
  },
  {
    "text": "in terms of all of our hosts and killing them making sure that we are able to",
    "start": "2251430",
    "end": "2257880"
  },
  {
    "text": "terminate them at any time is that we also even make it so that we terminate them on a daily basis actually they all",
    "start": "2257880",
    "end": "2265260"
  },
  {
    "text": "of them we pretty much have a process them that kills those instances within",
    "start": "2265260",
    "end": "2271830"
  },
  {
    "text": "24 hours what this allows us is it makes sure for one that nobody goes in actually makes them any kind of enemy",
    "start": "2271830",
    "end": "2277589"
  },
  {
    "text": "Manning patch instead we make sure that it's all within our optimal automation because if there's any manual patch and",
    "start": "2277589",
    "end": "2283560"
  },
  {
    "text": "then we suddenly lose an instance then that's usually a sign of a problem likewise it makes it it makes it very",
    "start": "2283560",
    "end": "2293400"
  },
  {
    "text": "easy for us to have that very quick turnaround now going into some details",
    "start": "2293400",
    "end": "2300300"
  },
  {
    "text": "about container security which I already talked a bit about how credentials should be handled on containers and as",
    "start": "2300300",
    "end": "2309240"
  },
  {
    "start": "2302000",
    "end": "2302000"
  },
  {
    "text": "mentioned having the credentials on s3 and then pulled into the container so",
    "start": "2309240",
    "end": "2314730"
  },
  {
    "text": "now he mentioned that it's better to have it in memory because it though in",
    "start": "2314730",
    "end": "2320700"
  },
  {
    "text": "terms there's also the option of having it on file but that's usually not that great because if somebody actually gets access to a container they can just grab",
    "start": "2320700",
    "end": "2327599"
  },
  {
    "text": "it in terms of pulling down the creds",
    "start": "2327599",
    "end": "2333330"
  },
  {
    "text": "though we do also utilize pulling them down for s3 but there is still a bit of",
    "start": "2333330",
    "end": "2339210"
  },
  {
    "text": "a problem in that since we allow our users to actually run their code on our containers if they have if they know how",
    "start": "2339210",
    "end": "2347220"
  },
  {
    "text": "our system works they could just potentially like print out the credentials or something like that so that's quite a bit of a problem for",
    "start": "2347220",
    "end": "2354750"
  },
  {
    "text": "our system it's very easy for any of our developers to get the creds if if we actually left it at this so moving onto",
    "start": "2354750",
    "end": "2363150"
  },
  {
    "start": "2362000",
    "end": "2362000"
  },
  {
    "text": "the next step what we had to do is that we had to actually for one of course",
    "start": "2363150",
    "end": "2368580"
  },
  {
    "text": "making sure that the developers came and get the containers in the first place but likewise also we made sure that for",
    "start": "2368580",
    "end": "2374849"
  },
  {
    "text": "access to get those creds off of s3 we hid them behind a standard parameterised",
    "start": "2374849",
    "end": "2381960"
  },
  {
    "text": "code that would actually oh yeah that they can specify hey I need this secret",
    "start": "2381960",
    "end": "2387839"
  },
  {
    "text": "and then this is how I need to use it but likewise we only allow them to use those methods to actually access those",
    "start": "2387839",
    "end": "2394619"
  },
  {
    "text": "containers if they try to do anything in other way there is such as like directly accessing them then we are we just plain",
    "start": "2394619",
    "end": "2401609"
  },
  {
    "text": "one could run their script likewise just in case somebody figures",
    "start": "2401609",
    "end": "2408480"
  },
  {
    "text": "out some other way to get around this system we also make sure that all the logs and output files are sanitized for any of those retrieve secrets so that",
    "start": "2408480",
    "end": "2416849"
  },
  {
    "text": "also is another way that we prevent any kind of leakage now also in terms of our",
    "start": "2416849",
    "end": "2422730"
  },
  {
    "text": "containers it's very important of course that our developers they're running all",
    "start": "2422730",
    "end": "2427980"
  },
  {
    "text": "these different kinds of jobs that they are able to access all the different kinds of services that I might need definitely of course the credentials",
    "start": "2427980",
    "end": "2434400"
  },
  {
    "text": "that they might need any kind of databases or maybe some messaging services there are plenty of different",
    "start": "2434400",
    "end": "2439589"
  },
  {
    "text": "kind of things that they might want to be of the access home and in fact some of them are even larger than that such",
    "start": "2439589",
    "end": "2444930"
  },
  {
    "text": "as big ability to create an ami or something like that that's also a special permission that they might need",
    "start": "2444930",
    "end": "2451339"
  },
  {
    "start": "2451000",
    "end": "2451000"
  },
  {
    "text": "but likewise we also want to make sure that it's very minimal um utilizing individual tasks I am roles as",
    "start": "2451339",
    "end": "2458609"
  },
  {
    "text": "Mitch mentioned is one way to keep that down but likewise having a lot of as",
    "start": "2458609",
    "end": "2464190"
  },
  {
    "text": "stars is something that plagues a lot of people in terms of their I am role",
    "start": "2464190",
    "end": "2469200"
  },
  {
    "text": "policies so in terms of us how we actually manage to make sure that they are as minimal as possible is we utilize",
    "start": "2469200",
    "end": "2476520"
  },
  {
    "text": "two things that ApS gives us one is access advisor which gives you kind of",
    "start": "2476520",
    "end": "2481710"
  },
  {
    "text": "an overarching view of like whether or not this I this role that is running is",
    "start": "2481710",
    "end": "2488130"
  },
  {
    "text": "actually even accessing certain services like it might tell you oh this role it's never even accessed SES even though",
    "start": "2488130",
    "end": "2495180"
  },
  {
    "text": "you've given it that permission in that case that's a potential for you to just plain to take out that whole section of",
    "start": "2495180",
    "end": "2500700"
  },
  {
    "text": "that I am role of access to SES but likewise since X's advisor only gives you information about overall services",
    "start": "2500700",
    "end": "2508369"
  },
  {
    "text": "it doesn't help you get rid of those stars as much instead for that we look",
    "start": "2508369",
    "end": "2514650"
  },
  {
    "text": "at cloud trail logs because then you know that actually gives you the individual API calls that and it that I",
    "start": "2514650",
    "end": "2521550"
  },
  {
    "text": "am role Mike is actually running and by using values and that we can actually",
    "start": "2521550",
    "end": "2526950"
  },
  {
    "text": "see oh it's only accessing say this bucket in s3 or this topic in SNS or",
    "start": "2526950",
    "end": "2531960"
  },
  {
    "text": "something like that and then we can trim things down according to that instead of having to do this whole guessing check process so",
    "start": "2531960",
    "end": "2541569"
  },
  {
    "text": "now going on to image security so",
    "start": "2541569",
    "end": "2547770"
  },
  {
    "text": "looking back at this from before basically as mentioned we actually",
    "start": "2547770",
    "end": "2553539"
  },
  {
    "text": "generate the artifacts and then we utilize them in our CI system now how we actually do that though with the ECS",
    "start": "2553539",
    "end": "2559900"
  },
  {
    "text": "tasks is that we actually allowed running docker within docker so we basically mount docker from the",
    "start": "2559900",
    "end": "2567309"
  },
  {
    "start": "2561000",
    "end": "2561000"
  },
  {
    "text": "host onto the container and this allows us to run docker and docker compose within these containers what this so",
    "start": "2567309",
    "end": "2577329"
  },
  {
    "text": "this is used pretty darn heavily by our developers because it allows them to actually test the docker images the",
    "start": "2577329",
    "end": "2583270"
  },
  {
    "text": "exact same way that they are deployed they basically can build them in one job when one job I'll plate them up with a color to our artifact repository and",
    "start": "2583270",
    "end": "2590049"
  },
  {
    "text": "then they can download them over an another job run off tests and make sure that everything is okay and likewise in",
    "start": "2590049",
    "end": "2598450"
  },
  {
    "text": "terms of just playing the building of those images it's also very repeatable because the other they're running within",
    "start": "2598450",
    "end": "2603730"
  },
  {
    "text": "the same containers every single time also in terms of the creation of our",
    "start": "2603730",
    "end": "2611140"
  },
  {
    "start": "2607000",
    "end": "2607000"
  },
  {
    "text": "images and usage of them we also try to make sure that they are as minimal as we can um we don't put any of our",
    "start": "2611140",
    "end": "2617890"
  },
  {
    "text": "credentials with our code or packages on them instead when one of these doctored",
    "start": "2617890",
    "end": "2624309"
  },
  {
    "text": "testing agents comes to it comes up it has to go and get the credentials for to be able to get everything else off of s3",
    "start": "2624309",
    "end": "2631349"
  },
  {
    "text": "so then once one of these doctored techni or dr. teenagers gets it off of",
    "start": "2631349",
    "end": "2636579"
  },
  {
    "text": "s3 then um it's able to actually go in access github pull down whatever code it needs to work on and likewise also and",
    "start": "2636579",
    "end": "2643569"
  },
  {
    "text": "pull down whatever artifacts that it might need to actually process whatever its job it means now how this helps in",
    "start": "2643569",
    "end": "2650740"
  },
  {
    "text": "terms of security is what if a malicious user actually gets one of our images off of our repository um since they don't",
    "start": "2650740",
    "end": "2657640"
  },
  {
    "text": "actually have the I am role to access the s3 bucket to get the credentials for everything then now they basically have",
    "start": "2657640",
    "end": "2664450"
  },
  {
    "text": "a very minimal image that can't really do anything for them they can't get the code they can't get the artifacts um so",
    "start": "2664450",
    "end": "2671470"
  },
  {
    "text": "this is one more layer of security on on earth system and then in terms of kind",
    "start": "2671470",
    "end": "2682150"
  },
  {
    "start": "2679000",
    "end": "2679000"
  },
  {
    "text": "of the packages and registries we are in terms of our images likewise we also",
    "start": "2682150",
    "end": "2688510"
  },
  {
    "text": "make sure that they are built off of an internal base image that is configured to only pull from the internal package",
    "start": "2688510",
    "end": "2695260"
  },
  {
    "text": "repository these packages these packages that are inside of our internal",
    "start": "2695260",
    "end": "2700480"
  },
  {
    "text": "repository this thus can be actually vetted by our security team and make sure that there are any issues that we",
    "start": "2700480",
    "end": "2706600"
  },
  {
    "text": "don't if you pull out any pull down any external dependencies that we aren't sure that we actually want likewise also",
    "start": "2706600",
    "end": "2712930"
  },
  {
    "text": "we make sure that to heavily pin our packages just so that we don't again pull down something that we weren't",
    "start": "2712930",
    "end": "2718480"
  },
  {
    "text": "expecting and then likewise in terms of the repositories that we use we use",
    "start": "2718480",
    "end": "2725050"
  },
  {
    "text": "artifactory for storage of our main storage of our images and artifacts but",
    "start": "2725050",
    "end": "2731140"
  },
  {
    "text": "likewise ECR actually gives us slightly better performance in terms of pulling down images on in order to run",
    "start": "2731140",
    "end": "2737740"
  },
  {
    "text": "especially for our CI system because those come up very very regularly with thousands per day so we actually make",
    "start": "2737740",
    "end": "2744670"
  },
  {
    "text": "sure that we put any images that we actually need and I've already been security approved on to the ECR so that",
    "start": "2744670",
    "end": "2751000"
  },
  {
    "text": "they can be used so finally I'll give",
    "start": "2751000",
    "end": "2756010"
  },
  {
    "text": "some key takeaways from what I mentioned so definitely make sure that you protect",
    "start": "2756010",
    "end": "2762580"
  },
  {
    "start": "2759000",
    "end": "2759000"
  },
  {
    "text": "from unauthorized access VPC and security groups are they're very useful tools for making sure that you limit",
    "start": "2762580",
    "end": "2768610"
  },
  {
    "text": "that all the unnecessary of network traffic and I am roles to make sure that",
    "start": "2768610",
    "end": "2775480"
  },
  {
    "text": "you're you've locked down all of the access to the creds and services that you need make sure that there's minimal",
    "start": "2775480",
    "end": "2780730"
  },
  {
    "text": "as you can for a problem making sure that the there's a minimal surface area for problems making sure that you don't",
    "start": "2780730",
    "end": "2787210"
  },
  {
    "text": "install more packages than you need and likewise make sure to create very heavy",
    "start": "2787210",
    "end": "2793150"
  },
  {
    "text": "automation the more automation that you have behind this the easier it is to actually fix any problems and",
    "start": "2793150",
    "end": "2798410"
  },
  {
    "text": "any patches because the security ecosystem is always changing that's",
    "start": "2798410",
    "end": "2804650"
  },
  {
    "text": "pretty much it thanks and make sure to",
    "start": "2804650",
    "end": "2813589"
  },
  {
    "text": "complete your evaluations [Applause]",
    "start": "2813589",
    "end": "2819289"
  }
]