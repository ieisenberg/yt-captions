[
  {
    "start": "0",
    "end": "78000"
  },
  {
    "text": "okay hello everybody packed crowd so",
    "start": "260",
    "end": "5490"
  },
  {
    "text": "this is exciting my name is Katie Kohler I'm a customer solutions manager with AWS on our federal civilian practice I",
    "start": "5490",
    "end": "12570"
  },
  {
    "text": "support NASA and Department of Energy today we're going to talk about the IDC",
    "start": "12570",
    "end": "18060"
  },
  {
    "text": "four containers a way to develop your DevOps pipeline and if we need it emergency",
    "start": "18060",
    "end": "25680"
  },
  {
    "text": "exit is right behind us back here restrooms are out in the hall as",
    "start": "25680",
    "end": "31380"
  },
  {
    "text": "hopefully all of you know and please please fill out the session survey after this we only get better by",
    "start": "31380",
    "end": "38070"
  },
  {
    "text": "your feedback so we really really need that with no further ado I'll introduce Justin Troy and Lynn who are going to",
    "start": "38070",
    "end": "45629"
  },
  {
    "text": "talk to you today thank you [Applause]",
    "start": "45629",
    "end": "54379"
  },
  {
    "text": "hi everyone can everyone hear me okay awesome awesome awesome",
    "start": "54379",
    "end": "59550"
  },
  {
    "text": "my name is Len Henry and with me today are Justin a list and Troy's and",
    "start": "59550",
    "end": "64978"
  },
  {
    "text": "we're here to talk to you about how to do a CI CD for service and containerized applications so I'm a Solutions",
    "start": "64979",
    "end": "71760"
  },
  {
    "text": "Architect with the public sector I work in the education team so I work with a lot of educational technology companies",
    "start": "71760",
    "end": "77990"
  },
  {
    "text": "so first I'm going to talk a little bit about CI CD for modern applications talk",
    "start": "77990",
    "end": "83640"
  },
  {
    "start": "78000",
    "end": "125000"
  },
  {
    "text": "about a little bit about continuous integration continuous deployment infrastructure is code which are some of the pillars that you need for CI CD for",
    "start": "83640",
    "end": "90420"
  },
  {
    "text": "modern applications I'm also going to talk a little bit about what exactly a modern application is and then just an",
    "start": "90420",
    "end": "96479"
  },
  {
    "text": "intro you're gonna get really detailed about how they've leveraged a SS to be able to do their CI CD pipeline for a",
    "start": "96479",
    "end": "101579"
  },
  {
    "text": "really exciting use case on deep learning so really looking forward to having you guys here to talk about this",
    "start": "101579",
    "end": "106979"
  },
  {
    "text": "and we're trying to try to answer as many questions as we can stored the end and then we'll be available actually",
    "start": "106979",
    "end": "113549"
  },
  {
    "text": "this is my last session for the day so I'll even be able to out there after the after the talk and Troy and Justin will be able to answer some questions after",
    "start": "113549",
    "end": "119729"
  },
  {
    "text": "the talk as well so what's the modern application what does that even mean",
    "start": "119729",
    "end": "125780"
  },
  {
    "start": "125000",
    "end": "192000"
  },
  {
    "text": "these are kind of like goals aspirational things so we want to simplify environment management",
    "start": "125780",
    "end": "132280"
  },
  {
    "text": "so you everyone is going to have multiple environments it's a best practice so when we say a modern application we want to have you simplify",
    "start": "132280",
    "end": "138340"
  },
  {
    "text": "that we want to also reduce the impact of code changes you don't want to have a code change it actually breaks things in",
    "start": "138340",
    "end": "144069"
  },
  {
    "text": "your in your actual application when it's running out there in production you want to automate your operations you don't want your automation your",
    "start": "144069",
    "end": "150580"
  },
  {
    "text": "operations to have to be a manual process for you to have to actually stop and do things by hand you want to",
    "start": "150580",
    "end": "156069"
  },
  {
    "text": "accelerate the delivery of services because the goal for this is you want to reduce the time between idea to actually idea being implemented you want to gains",
    "start": "156069",
    "end": "163540"
  },
  {
    "text": "insight across your resources because everyone has very failed nowadays but a modern application is fairly complicated",
    "start": "163540",
    "end": "169870"
  },
  {
    "text": "there's lots of different components that are stretched across lots of services potentially even globally",
    "start": "169870",
    "end": "175000"
  },
  {
    "text": "deployed so you want to be able to look at those that monitor those resources and then you want to protect your",
    "start": "175000",
    "end": "180069"
  },
  {
    "text": "customers in your business these systems have our no functionality if they violate the security if folks are if",
    "start": "180069",
    "end": "186040"
  },
  {
    "text": "something is broken into it's no longer a functioning application and one of the first orders of business will be actually to shutting it down so in terms",
    "start": "186040",
    "end": "193989"
  },
  {
    "start": "192000",
    "end": "284000"
  },
  {
    "text": "of how you can meet some of these goals serverless technologies are a way to simplify your environment and",
    "start": "193989",
    "end": "199480"
  },
  {
    "text": "application because essentially all you're responsible for is at a high level your code you don't have to worry about as much of your infrastructure you",
    "start": "199480",
    "end": "206079"
  },
  {
    "text": "want to reduce the impact of code changes you basically want to decompose and decompose and micro services is a",
    "start": "206079",
    "end": "211510"
  },
  {
    "text": "very popular pattern for decomposing your application code you want to operate your op or automate your",
    "start": "211510",
    "end": "216519"
  },
  {
    "text": "operations and a great way of doing that is modeling your infrastructure as code because it gets a way it gets you into",
    "start": "216519",
    "end": "222310"
  },
  {
    "text": "way of automating your operation you only look at your application as the infrastructure is code you can be teardown and brought up very quickly and",
    "start": "222310",
    "end": "228850"
  },
  {
    "text": "with reduced risk to accelerate the delivery of services see ICD is a pattern and it's actually accelerating",
    "start": "228850",
    "end": "235930"
  },
  {
    "text": "in terms of how you actually do code changes and how they actually get out into a production environment and actually the whole point is to be able",
    "start": "235930",
    "end": "242650"
  },
  {
    "text": "to at some point have automatic deployments where idea shows up and eventually ends up in a production",
    "start": "242650",
    "end": "247780"
  },
  {
    "text": "environment and then to be able to gain insight into how your resources are being are doing out there as they're",
    "start": "247780",
    "end": "254320"
  },
  {
    "text": "serving their customer needs you want to have some sort of observer ability so you need a capability to be absurd observe what's happening to your",
    "start": "254320",
    "end": "260470"
  },
  {
    "text": "application when you're developing as well as when it's actually being hosted to protect your customers you need to",
    "start": "260470",
    "end": "266199"
  },
  {
    "text": "have end-to-end security and compliance security is not just one single thing it's actually a bunch of different",
    "start": "266199",
    "end": "272470"
  },
  {
    "text": "things you need to do and especially for government agencies or also serving public customers you need to be able to",
    "start": "272470",
    "end": "277900"
  },
  {
    "text": "have some way implementing your compliance regimen so let's talk about service and micro service architectures",
    "start": "277900",
    "end": "283960"
  },
  {
    "text": "for a beginning so when we talk about service these are some of the compute services that are particularly relevant",
    "start": "283960",
    "end": "289210"
  },
  {
    "start": "284000",
    "end": "381000"
  },
  {
    "text": "for a service discussion we have lambda which is our service functions and a key to that is that it's event-driven sports",
    "start": "289210",
    "end": "295780"
  },
  {
    "text": "a bunch of different language runtimes it actually has a way for you to do a custom language runtime now so but pretty much any language you can think",
    "start": "295780",
    "end": "301569"
  },
  {
    "text": "of you can make it run as lambda you it has data source integrations with many of the a SS data services like RDS and",
    "start": "301569",
    "end": "307750"
  },
  {
    "text": "dynamo DB and there's no server management essentially all you do with lambda is write your function code give",
    "start": "307750",
    "end": "313659"
  },
  {
    "text": "us some options for how much CPU and memory you want to be able to use and then that's it that's all you're",
    "start": "313659",
    "end": "318789"
  },
  {
    "text": "responsible for so however much in vacations of your cell functions there are however many users are leveraging",
    "start": "318789",
    "end": "323830"
  },
  {
    "text": "your web servers based on those functions the system will scale up and scale down based on you need server list",
    "start": "323830",
    "end": "329409"
  },
  {
    "text": "containers is a SS Fargate which is our which is our newest container service and basically if you have something that",
    "start": "329409",
    "end": "335469"
  },
  {
    "text": "requires a long-running execution because you know lambda has an invocation timeout essentially for how",
    "start": "335469",
    "end": "340960"
  },
  {
    "text": "long can run you you can have long-running processes running on something like Fargate it abstracts away",
    "start": "340960",
    "end": "346840"
  },
  {
    "text": "the OS you're not responsible for OS patching you're not responsible for anything from managing the OS infrastructure it's a fully managed",
    "start": "346840",
    "end": "353259"
  },
  {
    "text": "orchestration similar to lambda all you do for Fargate is write your task definition include your container image",
    "start": "353259",
    "end": "358930"
  },
  {
    "text": "and then we'll take care of things like scaling we'll take care of your cluster management we'll take care of making",
    "start": "358930",
    "end": "364389"
  },
  {
    "text": "sure that protecting your endpoints for the for the physical Hardware and then it's like I said it's fully managed",
    "start": "364389",
    "end": "370690"
  },
  {
    "text": "cluster scaling so however much resources you need to serve up your your container image will take care of that",
    "start": "370690",
    "end": "376590"
  },
  {
    "text": "so to accelerate the delivery of services you want to do CIC D so what",
    "start": "376590",
    "end": "383289"
  },
  {
    "start": "381000",
    "end": "405000"
  },
  {
    "text": "that really refers to is that continuous integration merging code from multiple developers and doing some sort of a",
    "start": "383289",
    "end": "388330"
  },
  {
    "text": "build process which a bill process can include things like compilation as well as things like code quality analysis",
    "start": "388330",
    "end": "394030"
  },
  {
    "text": "static analysis continuous deployment refers to the fact that something comes from ideation all the way out to",
    "start": "394030",
    "end": "399340"
  },
  {
    "text": "implementation in a hosting environment such as such as hosting into containers or first serverless lambda some of the",
    "start": "399340",
    "end": "406810"
  },
  {
    "text": "typical processes that you will have in each one of these stages in source you'll have check-in checkout and",
    "start": "406810",
    "end": "412140"
  },
  {
    "text": "compilation build you'll have compilation unit testing creating container images for example our code",
    "start": "412140",
    "end": "417910"
  },
  {
    "text": "bill service is able to do a check-in into ECR forming a post or container image testing is it's where you do",
    "start": "417910",
    "end": "424390"
  },
  {
    "text": "things like integration testing load testing security testing UI testing our",
    "start": "424390",
    "end": "429480"
  },
  {
    "text": "code bill service has a way of being able to leverage testing you can also do that in code deploy as well and there's",
    "start": "429480",
    "end": "435310"
  },
  {
    "text": "integrations with stuff like selenium blaze meter etc and then in production is where you just host stuff in",
    "start": "435310",
    "end": "440740"
  },
  {
    "text": "production but not just host things but also set up monitoring of things because we want folks to realize that this is a",
    "start": "440740",
    "end": "446560"
  },
  {
    "text": "this is a circle because one stuff is out in production you're gonna get feedback on it which may then go back",
    "start": "446560",
    "end": "452140"
  },
  {
    "text": "into informing decisions that are made in actual source this is some of the",
    "start": "452140",
    "end": "458200"
  },
  {
    "start": "456000",
    "end": "520000"
  },
  {
    "text": "impacts that you would expect to see after our custody after you've implemented CI CD your deployment",
    "start": "458200",
    "end": "463660"
  },
  {
    "text": "frequency increases folks go from weekly to monthly to hourly to daily daily to",
    "start": "463660",
    "end": "472510"
  },
  {
    "text": "hourly bills and that's just something that you regularly see in fact there are some organizations that it's down to the second they have bills every second the",
    "start": "472510",
    "end": "480400"
  },
  {
    "text": "change lead time which is basically refers to the movement of stuff from when you have an idea to actually have",
    "start": "480400",
    "end": "487180"
  },
  {
    "text": "it push out to actually implement it reduces as well and then the other thing that gets reduces is what's known as a",
    "start": "487180",
    "end": "492490"
  },
  {
    "text": "change failure rate change failure rate refers to how many of your changes actually result in a break in some in",
    "start": "492490",
    "end": "498610"
  },
  {
    "text": "terms of functionality or maybe a security violation or something like that and you'll see reductions of 46 to",
    "start": "498610",
    "end": "504040"
  },
  {
    "text": "60% to something like 15% that change failure rate is actually something that's recognized and maybe less than",
    "start": "504040",
    "end": "510190"
  },
  {
    "text": "half of organizations whereas the ICD so it's important to realize that this is a continuum and a journey and that you",
    "start": "510190",
    "end": "515979"
  },
  {
    "text": "have to expand a certain amount of effort to be able to get to be able to see these rewards some of the things to",
    "start": "515980",
    "end": "522250"
  },
  {
    "start": "520000",
    "end": "535000"
  },
  {
    "text": "realize about the pillars of what we call pillars of modern applications we have continuous integration which we talked",
    "start": "522250",
    "end": "528590"
  },
  {
    "text": "about continuous deployment and then infrastructure is code so the goals of",
    "start": "528590",
    "end": "534080"
  },
  {
    "text": "continuous integration is to be able to I have a bill process kick off whenever",
    "start": "534080",
    "end": "539750"
  },
  {
    "start": "535000",
    "end": "577000"
  },
  {
    "text": "a check-in occurs so that's one of the goals that's one of the things you should look for in order to tell you that your continuous integration process",
    "start": "539750",
    "end": "546260"
  },
  {
    "text": "is working you also want to be able to build and test in a continuous in a consistent and repeatable environment so",
    "start": "546260",
    "end": "553310"
  },
  {
    "text": "that's another way in which you can tell that your continuous integration process is successful and you always want to",
    "start": "553310",
    "end": "558320"
  },
  {
    "text": "have an artifact ready for deployment this is really important this question I get asked this question a lot of times which is do I always have to have an",
    "start": "558320",
    "end": "564470"
  },
  {
    "text": "artifact ready for deployment absolutely because if not then something's broken and you need to go back to the fix-it and you want to have a feedback loop and",
    "start": "564470",
    "end": "571490"
  },
  {
    "text": "that's what why you do always have an artifact available because you have a feedback loop to inform whether or not something needs to change code pipeline",
    "start": "571490",
    "end": "579110"
  },
  {
    "start": "577000",
    "end": "595000"
  },
  {
    "text": "is is our service for managing the orchestration of your DevOps process it's a continuous delivery service for",
    "start": "579110",
    "end": "584779"
  },
  {
    "text": "fast and reliable application updates essentially you can do things like monitor sources trigger a bill process",
    "start": "584779",
    "end": "591470"
  },
  {
    "text": "and then orchestrate all the way out to deployment in production some of the",
    "start": "591470",
    "end": "596870"
  },
  {
    "start": "595000",
    "end": "614000"
  },
  {
    "text": "supported services for sources for code pipeline you can do picking a branch on",
    "start": "596870",
    "end": "602360"
  },
  {
    "text": "either code commit or something like github you can use this s3 folder or an",
    "start": "602360",
    "end": "608060"
  },
  {
    "text": "object to be able to trigger a build you can use a docker tag if you're using something like ECR code build is our",
    "start": "608060",
    "end": "616070"
  },
  {
    "start": "614000",
    "end": "659000"
  },
  {
    "text": "managed build service and that's exactly that like that how that sounds you can use it for for compiling source code",
    "start": "616070",
    "end": "622070"
  },
  {
    "text": "running unit tests and producing software packages like I mentioned previously how you can do things like",
    "start": "622070",
    "end": "627380"
  },
  {
    "text": "use code bill to be able to commit a change that you see are you can scale continuously and you can also process",
    "start": "627380",
    "end": "633860"
  },
  {
    "text": "multiple bills concurrently now I've had a DevOps background so I used to remember the pain that would actually",
    "start": "633860",
    "end": "639980"
  },
  {
    "text": "come when multiple folks would actually trigger a build and you've had that whole thing about Oh someone's triggered a bill I have to wait till that's done",
    "start": "639980",
    "end": "646160"
  },
  {
    "text": "well that's not something that you see in the world of code bill you can they have multiple bills running you pay by the minute and only for the compute",
    "start": "646160",
    "end": "652619"
  },
  {
    "text": "resources you use with code built and you can monitor it through cloud watch to be able to tell how things are going",
    "start": "652619",
    "end": "657629"
  },
  {
    "text": "for your DevOps process so a couple things to highlight about code build each bill runs in a new docker container",
    "start": "657629",
    "end": "664379"
  },
  {
    "start": "659000",
    "end": "688000"
  },
  {
    "text": "you can actually customize the image you use for this docker container so for example if you're going to use deep learning libraries you can actually do a",
    "start": "664379",
    "end": "670559"
  },
  {
    "text": "custom ami for the code build environment docker and the catalyst command CLI are available in the code",
    "start": "670559",
    "end": "677160"
  },
  {
    "text": "building image and like I said before you can customize the ami to be able to do custom libraries or whatever you need",
    "start": "677160",
    "end": "683399"
  },
  {
    "text": "to be able to have your your build process execute so continuous deployment is about all about moving from ideas to",
    "start": "683399",
    "end": "690629"
  },
  {
    "start": "688000",
    "end": "748000"
  },
  {
    "text": "actual out there you want to be able to automatically deploy changes that's really the goal the primary goal of",
    "start": "690629",
    "end": "696240"
  },
  {
    "text": "continuous deployment you want to deploy to production without impacting customers negatively you want to deliver",
    "start": "696240",
    "end": "702480"
  },
  {
    "text": "to customers faster and you want to increase your deployment frequency and reduce the late change lead time and",
    "start": "702480",
    "end": "708209"
  },
  {
    "text": "change failure rate those are the goals that you would expect to see if it continues deployment sometimes folks ask us to have to do continuous deployment",
    "start": "708209",
    "end": "714269"
  },
  {
    "text": "to production yes that's the goal plenty of folks when they start out they do continuous deployment just to their",
    "start": "714269",
    "end": "720029"
  },
  {
    "text": "staging or testing environments that's wonderful but eventually you want to get to the point of to having this to production and that doesn't necessarily",
    "start": "720029",
    "end": "726600"
  },
  {
    "text": "mean it's completely automated by the way you could have something that's that's set up to be automated but then",
    "start": "726600",
    "end": "732870"
  },
  {
    "text": "have a manual trigger for it so it doesn't mean that's you your customer should be able to expect to have a negative experience just because of",
    "start": "732870",
    "end": "739110"
  },
  {
    "text": "something that was triggered automatically you can put in manual gates but to have this operationalize is",
    "start": "739110",
    "end": "744360"
  },
  {
    "text": "that it could happen automatically will have a tremendous impact on your productivity so code deploy you can",
    "start": "744360",
    "end": "751290"
  },
  {
    "start": "748000",
    "end": "768000"
  },
  {
    "text": "deploy to instances a SS lambda and on Prem it handles a lot of the complexity of deploying an application so so and",
    "start": "751290",
    "end": "758549"
  },
  {
    "text": "you can avoid downtime during application deployment and do rollbacks which is actually one of the key features of why you should consider",
    "start": "758549",
    "end": "764610"
  },
  {
    "text": "something like code deploy it deploys to ec2 lambda and on-premise servers one of",
    "start": "764610",
    "end": "770100"
  },
  {
    "start": "768000",
    "end": "823000"
  },
  {
    "text": "the things about the code deployed deployments is now the ability to shift traffic so you can have multiple versions of your lambda",
    "start": "770100",
    "end": "775360"
  },
  {
    "text": "function and essentially shift over traffic based off of your requirements once your rolling something out",
    "start": "775360",
    "end": "780730"
  },
  {
    "text": "so you can set up what's known as a validation hook for doing a lambda deployment so a question we get asked",
    "start": "780730",
    "end": "786190"
  },
  {
    "text": "frequently is how do I do CI cd4 lambda well this is how you can do it with code deploy so you can set up something like",
    "start": "786190",
    "end": "791649"
  },
  {
    "text": "a canary or a linear basically determine how traffic shifts over two different versions of a lambda function as a part",
    "start": "791649",
    "end": "798220"
  },
  {
    "text": "of a rollout and then you can you fast roll back in the case you write that validation hook lambda so",
    "start": "798220",
    "end": "804040"
  },
  {
    "text": "if you detect when calling for example a simple one would just be invoking the functions checking the results if you",
    "start": "804040",
    "end": "809740"
  },
  {
    "text": "detect that there's a problem we can do fast roll back in seconds based off of that and then you can monitor your",
    "start": "809740",
    "end": "814899"
  },
  {
    "text": "deployment status at use in via console API SMS you can have stuff sent to SMS",
    "start": "814899",
    "end": "820240"
  },
  {
    "text": "and using cloud watch events so another",
    "start": "820240",
    "end": "825550"
  },
  {
    "start": "823000",
    "end": "846000"
  },
  {
    "text": "thing that happened recently Quebec I think was back in reinvent was that we launched code deploy blue green for",
    "start": "825550",
    "end": "830980"
  },
  {
    "text": "Fargate and NEC s so what that a frequent request the customers had and we did have a way of doing this before",
    "start": "830980",
    "end": "837279"
  },
  {
    "text": "but it required you to do some stuff in terms of how your pipeline jobs were set up well you can now automate doing",
    "start": "837279",
    "end": "842769"
  },
  {
    "text": "Bluegreen deployments for Fargate and ECS some of the things we want to talk",
    "start": "842769",
    "end": "848649"
  },
  {
    "start": "846000",
    "end": "880000"
  },
  {
    "text": "about when especially when working in container workflows and this is some of the recommendations that we have dr.",
    "start": "848649",
    "end": "855399"
  },
  {
    "text": "turrets are dissolved or resolved when containers start so therefore you probably don't want to use something like a referential tag like latest or",
    "start": "855399",
    "end": "861910"
  },
  {
    "text": "prod because depending on what's going on - usually when your container registry that may actually refer to something different than you think it is",
    "start": "861910",
    "end": "868029"
  },
  {
    "text": "so you want to use unique immutable tags for deployments especially when scale-out occurs because like I said",
    "start": "868029",
    "end": "873519"
  },
  {
    "text": "when the images actually starts running and that's when it's going to resolve that you wanted another thing you want",
    "start": "873519",
    "end": "878800"
  },
  {
    "text": "to think about this infrastructure is code and what infrastructure is code refers to is that because you're now in",
    "start": "878800",
    "end": "884019"
  },
  {
    "start": "880000",
    "end": "898000"
  },
  {
    "text": "a server list containerized environment it's no longer situation where you want to be manually configuring servers anymore",
    "start": "884019",
    "end": "889029"
  },
  {
    "text": "so we recommendation is that there are lots of tools that you're going to need to be able to deploy your server a",
    "start": "889029",
    "end": "894100"
  },
  {
    "text": "solution you want the deployment of that to be represented as code the goals that",
    "start": "894100",
    "end": "900399"
  },
  {
    "start": "898000",
    "end": "954000"
  },
  {
    "text": "you want out of this is that you want to make your infrastructure changes repeatable and predictable you're deploying the same Landers you're",
    "start": "900399",
    "end": "906110"
  },
  {
    "text": "deploying the same s3 buckets you're setting up the same time policy permissions you want to really have this release infrastructure changes using the",
    "start": "906110",
    "end": "912980"
  },
  {
    "text": "same tools as code changes so if you want to trigger off something using a or constriction using code pipeline it",
    "start": "912980",
    "end": "919340"
  },
  {
    "text": "would be nice if your infrastructure was deployed as a part of that pipeline as well and then you also it makes it easy",
    "start": "919340",
    "end": "924890"
  },
  {
    "text": "to replicate your production environment in a testing or staging environment and then our thing that I didn't mention",
    "start": "924890",
    "end": "930530"
  },
  {
    "text": "here is that you also it makes it easier to set up templates because you if you have for example if you're using cdk",
    "start": "930530",
    "end": "936320"
  },
  {
    "text": "which we had a talk on this earlier today the cloud development kit you could represent your infrastructure you VPC",
    "start": "936320",
    "end": "941570"
  },
  {
    "text": "your Fargate service your lambda api functions as a template and then that's what you communicate out to developers",
    "start": "941570",
    "end": "947570"
  },
  {
    "text": "when they start doing their work so their infrastructures are as a part of their setup for the rest of your application code so some of the things",
    "start": "947570",
    "end": "956510"
  },
  {
    "start": "954000",
    "end": "1020000"
  },
  {
    "text": "that which in which you can do when you have infrastructure as code is you can if you have your infrastructures code",
    "start": "956510",
    "end": "962090"
  },
  {
    "text": "you can unit test it now so if you're using something like like a cloud development kit it's it's a it's a type",
    "start": "962090",
    "end": "968300"
  },
  {
    "text": "scripted language you can actually run static analysis on it to be able to validate that the things that are being done in your infrastructure is code",
    "start": "968300",
    "end": "974089"
  },
  {
    "text": "match your standards and also will work you can also mock your dependencies because now you can check to check at",
    "start": "974089",
    "end": "980089"
  },
  {
    "text": "the market if you need to be able to communicate with a particular lambda endpoint for example you can actually mock that to be able to run to write out",
    "start": "980089",
    "end": "986570"
  },
  {
    "text": "the rest of your code and then you can also do vulnerability image scans on it now because now you're testing for say",
    "start": "986570",
    "end": "992750"
  },
  {
    "text": "for example your infrastructures code represents all the way up to a baseline image you can actually do testing on",
    "start": "992750",
    "end": "997880"
  },
  {
    "text": "that now and be able to do a dynamic analysis on it not just static analysis and then once you push this out to some",
    "start": "997880",
    "end": "1004360"
  },
  {
    "text": "sort of an environment that is hosted against you can actually run integration tests against real dependencies and real",
    "start": "1004360",
    "end": "1009790"
  },
  {
    "text": "environments penetration to nesting monitoring to test impacts of deployments on the specific environments",
    "start": "1009790",
    "end": "1015010"
  },
  {
    "text": "there's a lot of things that are possible now that you can spin up and tear down your infrastructure",
    "start": "1015010",
    "end": "1021149"
  },
  {
    "text": "won't think too much about that because I think you guys folks are really clear on that another service that may be helpful for",
    "start": "1022380",
    "end": "1028230"
  },
  {
    "text": "you oh and cdks service application model it's an open source framework for billing service applications on a SS and",
    "start": "1028230",
    "end": "1034589"
  },
  {
    "text": "essentially what it does is it gives you a shorthand syntax it's kind of an extension or confirmation that allows",
    "start": "1034590",
    "end": "1040020"
  },
  {
    "text": "you to take what's written in and Sam and expanded in a cloud formation for doing deployments so it supports all",
    "start": "1040020",
    "end": "1045300"
  },
  {
    "text": "daedalus CloudFormation resource types it has things like functions api's DynamoDB tables and if you notice a lot",
    "start": "1045300",
    "end": "1052380"
  },
  {
    "text": "of our tutorials and demos or lamda are actually written in Sam so they give you an idea for how you can do the",
    "start": "1052380",
    "end": "1057510"
  },
  {
    "text": "development of that for yourself and that becomes and then like I mentioned cdk already which is a similar similar",
    "start": "1057510",
    "end": "1063660"
  },
  {
    "start": "1059000",
    "end": "1067000"
  },
  {
    "text": "thing but cdk gives you in a type scripted language so this is an example",
    "start": "1063660",
    "end": "1069210"
  },
  {
    "start": "1067000",
    "end": "1097000"
  },
  {
    "text": "of a cdk template and you see here this is what we're talking about infrastructure is code it's setting up a",
    "start": "1069210",
    "end": "1074610"
  },
  {
    "text": "V PC and then actually setting up a cluster and then a far gate service running on the V PC so you can imagine",
    "start": "1074610",
    "end": "1080490"
  },
  {
    "text": "what power you give to your developers if you as a security administrator or operational administrator provides this",
    "start": "1080490",
    "end": "1087030"
  },
  {
    "text": "as a template and then all your developer has to worry about is the image that they're using to deploy in this Fargate service that gives a",
    "start": "1087030",
    "end": "1093210"
  },
  {
    "text": "tremendous amount of power and it gives you a lot of repeatability and the thing",
    "start": "1093210",
    "end": "1098850"
  },
  {
    "start": "1097000",
    "end": "1111000"
  },
  {
    "text": "about this is this is 22 lines of typescript code and it generates 400 lines of file formation so that's",
    "start": "1098850",
    "end": "1104700"
  },
  {
    "text": "another thing to keep in mind is that this makes it very simple for you to communicate with among different developers about what's actually",
    "start": "1104700",
    "end": "1109770"
  },
  {
    "text": "happening and the other thing about this too is that you can leverage these as",
    "start": "1109770",
    "end": "1116130"
  },
  {
    "start": "1111000",
    "end": "1145000"
  },
  {
    "text": "templates and bring clang out to multiple developers and so essentially you can think of your infrastructure",
    "start": "1116130",
    "end": "1121260"
  },
  {
    "text": "folks as a part of your development team now because now they're just writing out templates for being able to deploy stuff",
    "start": "1121260",
    "end": "1126300"
  },
  {
    "text": "you're using cdk and then other developers can leverage the similar templates to be able to run their code so it makes it easy for you to",
    "start": "1126300",
    "end": "1133350"
  },
  {
    "text": "standardize makes it easier for you to communicate and it makes your developers more productive because they don't have to there's no like turn around or cycle",
    "start": "1133350",
    "end": "1140070"
  },
  {
    "text": "time between standing up infrastructure because it's actually a part of their code",
    "start": "1140070",
    "end": "1145039"
  },
  {
    "start": "1145000",
    "end": "1161000"
  },
  {
    "text": "so I'll turn it over to Justin and Troy to talk about their platform all right great",
    "start": "1146610",
    "end": "1152250"
  },
  {
    "text": "thanks Ellen okay so yeah we're going to talk about a real-world use case that we",
    "start": "1152250",
    "end": "1157320"
  },
  {
    "text": "hopefully applied quite a few of these these policies and procedures so I'm",
    "start": "1157320",
    "end": "1163290"
  },
  {
    "start": "1161000",
    "end": "1172000"
  },
  {
    "text": "Justin Almquist I am from pnnl I'm Troy I'm a software engineer at piano and",
    "start": "1163290",
    "end": "1169770"
  },
  {
    "text": "cloud architect in the same division as Justin thanks so for the one or two people in the room that don't know we're",
    "start": "1169770",
    "end": "1175500"
  },
  {
    "start": "1172000",
    "end": "1191000"
  },
  {
    "text": "Pacific Northwest National Laboratory as we're at an eastern Washington state and",
    "start": "1175500",
    "end": "1180990"
  },
  {
    "text": "we are National Lab so we heard our focuses we think we're very diversified but our focus is on Earth Sciences",
    "start": "1180990",
    "end": "1187320"
  },
  {
    "text": "chemistry and then data analytics which is what we're we're here for just quick",
    "start": "1187320",
    "end": "1192840"
  },
  {
    "start": "1191000",
    "end": "1212000"
  },
  {
    "text": "overview some of the things about pnnl at a glance but let's get to our problem here so we'll talk about our pipeline and and where it came from why we",
    "start": "1192840",
    "end": "1199620"
  },
  {
    "text": "developed it we'll talk about how we we deployed model using dr. had a lot of success with that infrastructures code",
    "start": "1199620",
    "end": "1205440"
  },
  {
    "text": "we'll go into even greater detail into how we did it and then we'll go over a multi-account C ICD process so let's",
    "start": "1205440",
    "end": "1213299"
  },
  {
    "start": "1212000",
    "end": "1306000"
  },
  {
    "text": "talk about our problem so our fancy title title is the streaming deep learning image analysis pipeline and",
    "start": "1213299",
    "end": "1218760"
  },
  {
    "text": "it's in where it came from our goal is we work on an open source data analytics projects very generic term for saying",
    "start": "1218760",
    "end": "1225360"
  },
  {
    "text": "we'd like to do cool things with open datasets and social media is a big one for that and so we have a lot of social",
    "start": "1225360",
    "end": "1230910"
  },
  {
    "text": "media data in that data there's lots of images and so we want to help our users get to the images that they find they",
    "start": "1230910",
    "end": "1237000"
  },
  {
    "text": "find relevant and so the way we're gonna do that is we're gonna use deep learning so we're gonna take advantage of deep",
    "start": "1237000",
    "end": "1242280"
  },
  {
    "text": "learning models that can do image classification so a common service that you might have heard of obviously is a",
    "start": "1242280",
    "end": "1247620"
  },
  {
    "text": "Tobias recognition that's a great general-purpose solution we wanted a little bit we wanted to go after more focused custom models to to solve our",
    "start": "1247620",
    "end": "1254760"
  },
  {
    "text": "problems and so we wanted to create these pipelines that would allow us to chain these models together run the models in parallel and then have",
    "start": "1254760",
    "end": "1261120"
  },
  {
    "text": "conditional logic so that we could we could avoid unnecessary processing so a good example of that as a right right",
    "start": "1261120",
    "end": "1267150"
  },
  {
    "text": "away let's have a not-safe-for-work model and let's get rid of the junk that we don't want to look at another example",
    "start": "1267150",
    "end": "1272280"
  },
  {
    "text": "there's at the bottom is the geo in for its so geolocation and what that is is given you know given an image this model",
    "start": "1272280",
    "end": "1279090"
  },
  {
    "text": "will predict we'll take a stab at predicting where in the world this image is it has it is and",
    "start": "1279090",
    "end": "1284140"
  },
  {
    "text": "so it turns out that doesn't work so great for indoor images so we throw an indoor/outdoor model in front of that",
    "start": "1284140",
    "end": "1289480"
  },
  {
    "text": "and get rid of those images and then as far as performance requirements we",
    "start": "1289480",
    "end": "1294550"
  },
  {
    "text": "wanted to be on the scale of 100 images a second which is about 8 million images a day and then we wanted to be near",
    "start": "1294550",
    "end": "1301030"
  },
  {
    "text": "real-time where image comes in labels come out in less than 60 seconds so how",
    "start": "1301030",
    "end": "1307210"
  },
  {
    "start": "1306000",
    "end": "1507000"
  },
  {
    "text": "do we do this we ended up with a reactive message driven architecture and really what that means is what a",
    "start": "1307210",
    "end": "1313150"
  },
  {
    "text": "reactive architecture is is like I said it's very message driven very event-driven but it ends up being very",
    "start": "1313150",
    "end": "1318160"
  },
  {
    "text": "robust very reliable handle handles failures these models these models are not super reliable so they can't fail at",
    "start": "1318160",
    "end": "1324220"
  },
  {
    "text": "times and then it handles scale really well scales up like I said to that hundred a second but then it'll scale",
    "start": "1324220",
    "end": "1329440"
  },
  {
    "text": "down to zero you know if we don't have anything turned on so in the way that really accomplishes that is with this",
    "start": "1329440",
    "end": "1335050"
  },
  {
    "text": "message driven architecture so if you notice in the picture there which is our which is that same logical picture you",
    "start": "1335050",
    "end": "1340660"
  },
  {
    "text": "saw before just reimagined in this reactive architecture all those pink boxes in between those are message keys so what there's no direct peer-to-peer",
    "start": "1340660",
    "end": "1348490"
  },
  {
    "text": "communication essentially so all components talk through a message queue thus you can imagine if the component",
    "start": "1348490",
    "end": "1353800"
  },
  {
    "text": "does go down those message queues fill up and it's not a big deal and we can drain them later and so we rely on the",
    "start": "1353800",
    "end": "1359230"
  },
  {
    "text": "simple queue service sqs for that and we found it to be super reliable super scalable it pretty much was rock-solid",
    "start": "1359230",
    "end": "1365200"
  },
  {
    "text": "so never had any problems with that it was a really good choice for us so then",
    "start": "1365200",
    "end": "1370300"
  },
  {
    "text": "the heart the other heart of the decision of this of this pipeline is is the use of lambda so as Lynn mentioned",
    "start": "1370300",
    "end": "1375850"
  },
  {
    "text": "lambdas really really powerful and we want to take advantage of that especially for scalability sweep what we",
    "start": "1375850",
    "end": "1381250"
  },
  {
    "text": "do is we put all that orchestration logic into the pipeline lambda such that it based on the message contents as they",
    "start": "1381250",
    "end": "1386620"
  },
  {
    "text": "come in it can decide what to do next so the way it works is images come into an s3 bucket notification gets in a cube I'm",
    "start": "1386620",
    "end": "1392830"
  },
  {
    "text": "sorry the message gets put on the queue and then the pipeline landed grabs it and says okay where are we in the process well it's the first time I've",
    "start": "1392830",
    "end": "1398560"
  },
  {
    "text": "seen this image let's go ahead and send it to not-safe-for-work well it'll then go down through the model and which will go into quite a bit",
    "start": "1398560",
    "end": "1404470"
  },
  {
    "text": "more detail and labels will come back and so then same thing based on the concept of the message the lambda says",
    "start": "1404470",
    "end": "1409750"
  },
  {
    "text": "oh it was safe for work let's continue process it was not safe for work let's throw it away the other key idea here that we",
    "start": "1409750",
    "end": "1417440"
  },
  {
    "text": "leveraged as far as aw services as dynamodb so that's where we save all of our state that's where the labels all go",
    "start": "1417440",
    "end": "1422870"
  },
  {
    "text": "and it really pairs well with lambda it scales up scales down you only pay for what you use okay so let's dive into",
    "start": "1422870",
    "end": "1430460"
  },
  {
    "text": "some details a little bit more so the way we deploy our deep learning models is with docker what you see here in this",
    "start": "1430460",
    "end": "1436280"
  },
  {
    "text": "picture is kind of the way the layers work together and I'll go to some kind of subtle differences between normal",
    "start": "1436280",
    "end": "1442130"
  },
  {
    "text": "docker and then dr. that relies on GPUs so what our primary goal for for",
    "start": "1442130",
    "end": "1447940"
  },
  {
    "text": "deploying these models is that we want it to be reproducible we want to be able to deploy it today tomorrow and far into",
    "start": "1447940",
    "end": "1455210"
  },
  {
    "text": "the future and that can be pretty tricky sometimes with all these dependencies so what it turns out is we wanted to rely",
    "start": "1455210",
    "end": "1461840"
  },
  {
    "text": "on docker so we can capture all our dependencies and then luckily there's an Nvidia docker container that we could that we could rely on as well and that",
    "start": "1461840",
    "end": "1467780"
  },
  {
    "text": "gets you about 99% of the way of where you want to be there are some subtleties there though because the way Nvidia dr.",
    "start": "1467780",
    "end": "1474080"
  },
  {
    "text": "works is there's a little bit of leakage into the host itself and so you end up",
    "start": "1474080",
    "end": "1479120"
  },
  {
    "text": "having to use the the AWS deep learning AMI and you have to really make sure you",
    "start": "1479120",
    "end": "1484400"
  },
  {
    "text": "capture those dependencies because the cuda driver that actually talks to the GPU is highly dependent or is highly",
    "start": "1484400",
    "end": "1491900"
  },
  {
    "text": "dependent on the host and the docker container and the cuda driver have to be compliant with each other so that's the kind of the ultimate takeaway from this",
    "start": "1491900",
    "end": "1497900"
  },
  {
    "text": "slide really is just really capture your dependencies your Python package your system packages which exact which ami",
    "start": "1497900",
    "end": "1503480"
  },
  {
    "text": "are using and in that CUDA driver version one of the takeaways that kind",
    "start": "1503480",
    "end": "1509630"
  },
  {
    "start": "1507000",
    "end": "1646000"
  },
  {
    "text": "of a lesson learned that if I would be interesting to share was just the deployment model we ended up with so",
    "start": "1509630",
    "end": "1514900"
  },
  {
    "text": "when it comes to these models themselves we actually played with part a few different deployment models lambda as we",
    "start": "1514900",
    "end": "1521390"
  },
  {
    "text": "mentioned we're a big fan of lambdas we wanted to find a way if we could make that work and we found a lot of success so as far as the lambda success what we",
    "start": "1521390",
    "end": "1527930"
  },
  {
    "text": "found is in batch mode so think you have a bucket with all of your images already in there and what you can do then is you",
    "start": "1527930",
    "end": "1534440"
  },
  {
    "text": "can throw that massively parallel solution of lambda at it and even though it's not using GPU it can because it's",
    "start": "1534440",
    "end": "1540260"
  },
  {
    "text": "so parallelized it can crunch and it can crank out pretty quick we found for more",
    "start": "1540260",
    "end": "1545660"
  },
  {
    "text": "more streaming environment GPUs a more cost effective over time they're faster and they're just more cost effective and",
    "start": "1545660",
    "end": "1551240"
  },
  {
    "text": "so lambdas were a great solution for batch we kind of leave it at that as far as our streaming environment though we",
    "start": "1551240",
    "end": "1556580"
  },
  {
    "text": "wanted to keep looking so we went to say to make there which is a great platform for developing these models ultimately",
    "start": "1556580",
    "end": "1562310"
  },
  {
    "text": "though it was limited for us in our reactive architecture because of its dependency on rest so like I said we",
    "start": "1562310",
    "end": "1567530"
  },
  {
    "text": "wanted to use messaging everywhere so we have we have our models the wrapper code pulled directly from SQS so that we",
    "start": "1567530",
    "end": "1574160"
  },
  {
    "text": "found rest to be a pretty brittle as far as a communication platform or a protocol",
    "start": "1574160",
    "end": "1579500"
  },
  {
    "text": "so again sage maker didn't quite work out for us Fargate would be ideal I'm looking at Len because I want a solution",
    "start": "1579500",
    "end": "1585200"
  },
  {
    "text": "here so yeah so far gateway the idea we have we have containerized images let's",
    "start": "1585200",
    "end": "1590690"
  },
  {
    "text": "throw it in there and let Fargate figure it out but doesn't support GPU yet so",
    "start": "1590690",
    "end": "1596360"
  },
  {
    "text": "the next one was ECS so a little bit and they're putting some responsibility on AWS but a little bit more control we",
    "start": "1596360",
    "end": "1602150"
  },
  {
    "text": "have to admit we manage the clusters what happened though is there's two level we ended up with a two level auto scaling problem in that we had to auto",
    "start": "1602150",
    "end": "1609560"
  },
  {
    "text": "scale ECS and then you still have to auto scale UDC two and end up taking about 20 minutes in order to to scale up",
    "start": "1609560",
    "end": "1615890"
  },
  {
    "text": "as the stream got larger so we ended up just kind of plain ol ec2 which there's",
    "start": "1615890",
    "end": "1621500"
  },
  {
    "text": "a lot of power there because you get all the control if simpler faster auto scaling it's just one thing to worry",
    "start": "1621500",
    "end": "1626990"
  },
  {
    "text": "about and we kind of got that all this getting down to about five minutes and then the auto scaling just is kind of a",
    "start": "1626990",
    "end": "1633080"
  },
  {
    "text": "take away we ended up using the queue length to know when to go up let's add more instances as if the queue is too big and then what we do is we would look",
    "start": "1633080",
    "end": "1639800"
  },
  {
    "text": "at the workers utilization and if they're not doing anything that tells us all we can we can reduce our workers so",
    "start": "1639800",
    "end": "1646910"
  },
  {
    "start": "1646000",
    "end": "1723000"
  },
  {
    "text": "that was that was the very high level the how the why and syllable now we'll at Troy talk about more details on CI CD",
    "start": "1646910",
    "end": "1652670"
  },
  {
    "text": "thanks Joseph so let's dive into the CI CD of our deep learning pipeline start",
    "start": "1652670",
    "end": "1658190"
  },
  {
    "text": "at the the motivate the basis of it really the lenez talked about is infrastructure as code and so with our",
    "start": "1658190",
    "end": "1664520"
  },
  {
    "text": "server lists and reactive architecture we're actually able to move some of our code out of our application into the architecture what the sense of giving us",
    "start": "1664520",
    "end": "1671810"
  },
  {
    "text": "is a bunch of micro services which is the way of the future I believe and but instead of just one giant monolithic",
    "start": "1671810",
    "end": "1677900"
  },
  {
    "text": "serve or a couple monolithic services but with that you end up with a ton of more components than you normally would and",
    "start": "1677900",
    "end": "1683590"
  },
  {
    "text": "so the only way to really make sure you to wire things up is to use infrastructure as code and in particular",
    "start": "1683590",
    "end": "1689410"
  },
  {
    "text": "for us we leverage cloud formation for this obviously we're sorry so there's over",
    "start": "1689410",
    "end": "1696790"
  },
  {
    "text": "180 of us resources actually in our pipeline and so you can imagine we can't do that manually and that's where the",
    "start": "1696790",
    "end": "1703030"
  },
  {
    "text": "cloud formation came in by using cloud formation we're able to reduce our sorry reduce our errors have more",
    "start": "1703030",
    "end": "1710530"
  },
  {
    "text": "reproducibility and it takes less time to actually manage spin up and develop",
    "start": "1710530",
    "end": "1715600"
  },
  {
    "text": "and deploy and so this is actually is the is the key that enables that continuous deployments so really what",
    "start": "1715600",
    "end": "1725980"
  },
  {
    "start": "1723000",
    "end": "1901000"
  },
  {
    "text": "the cloud formation was the learning process for us especially with this new kind of pipeline the biggest takeaway",
    "start": "1725980",
    "end": "1732220"
  },
  {
    "text": "for us was that you actually need to capture everything required to deploy application and so obviously you're thinking of course your pilot's not",
    "start": "1732220",
    "end": "1738010"
  },
  {
    "text": "gonna work if you don't do that but I mean in the sense that if you someone gave you a brand new AWS account can you stand up your pipeline with your current",
    "start": "1738010",
    "end": "1744400"
  },
  {
    "text": "infrastructure as code or your cloud formation scripts and most people actually can't say yes to that and so we",
    "start": "1744400",
    "end": "1750820"
  },
  {
    "text": "we required everything so be pcs I am rolled all the way up to our custom models to be deployed and so the way we",
    "start": "1750820",
    "end": "1758230"
  },
  {
    "text": "did that is we leveraged the conditions in conformation and by doing that we were able to spin up our whole pipeline",
    "start": "1758230",
    "end": "1763270"
  },
  {
    "text": "in a new Avis account without actually modifying our infrastructure as code the",
    "start": "1763270",
    "end": "1768550"
  },
  {
    "text": "other thing that's allowed us to do is ale so we had multiple developers working on this pipeline as you can imagine over the course of six months",
    "start": "1768550",
    "end": "1774430"
  },
  {
    "text": "and so we were able to give every developer their own cloud formation",
    "start": "1774430",
    "end": "1779950"
  },
  {
    "text": "stack or their own pipeline that way one person could be working on models the other person could be working on the orchestration piece",
    "start": "1779950",
    "end": "1785860"
  },
  {
    "text": "they've got identified by our employee IDs to keep for uniqueness this ended up",
    "start": "1785860",
    "end": "1792130"
  },
  {
    "text": "obviously saving time because you can have multiple people working in different areas another big helper for us is that we we",
    "start": "1792130",
    "end": "1798490"
  },
  {
    "text": "found the Python library CFN winter and it's able to detect syntax errors in",
    "start": "1798490",
    "end": "1804400"
  },
  {
    "text": "json or gamble we ended up going with the animal with CloudFormation because it was easier to write",
    "start": "1804400",
    "end": "1809860"
  },
  {
    "text": "scripts in our ec2 startup code and then obviously as Len already talked about we",
    "start": "1809860",
    "end": "1816010"
  },
  {
    "text": "leveraged the the Sam for our service list resource sources particularly the lambdas another thing we were able to do",
    "start": "1816010",
    "end": "1822370"
  },
  {
    "text": "is we leveraged the the nested stacks for CloudFormation this gave us a sense of modularity in",
    "start": "1822370",
    "end": "1828490"
  },
  {
    "text": "cloud formation which it doesn't happen like have very much right now but obviously with the cdk that just was released we would look forward to using",
    "start": "1828490",
    "end": "1834910"
  },
  {
    "text": "that because that would actually give us the form modularity maybe and less less",
    "start": "1834910",
    "end": "1840370"
  },
  {
    "text": "script to manage but this did reduce our copy and paste within our current scripts the last takeaway which is also",
    "start": "1840370",
    "end": "1847690"
  },
  {
    "text": "pretty important is that and it may seem obvious but we wrote a bash script to",
    "start": "1847690",
    "end": "1852970"
  },
  {
    "text": "basically have our one line of a code that would deploy our cloud formation scripts and what that means is so I'm",
    "start": "1852970",
    "end": "1858669"
  },
  {
    "text": "served most of you're familiar with a device CLI so that's the AWS CloudFormation deploy this script and",
    "start": "1858669",
    "end": "1864070"
  },
  {
    "text": "then we're able and then you're passing all your parameters into that to that call well we had over 20 parameters I",
    "start": "1864070",
    "end": "1871090"
  },
  {
    "text": "think close to 30 parameters in our cloud formation script and so writing those variables out every time would be",
    "start": "1871090",
    "end": "1876790"
  },
  {
    "text": "troublesome and so we actually made the script take a comfort configuration file that where we'd set all our environment",
    "start": "1876790",
    "end": "1883210"
  },
  {
    "text": "variables depending on the environment we were going to test stage test and staging development or production and so",
    "start": "1883210",
    "end": "1890380"
  },
  {
    "text": "that having that simple command one from the beginning automated the deployment",
    "start": "1890380",
    "end": "1896890"
  },
  {
    "text": "but then we were able to put that put that into our build process which we'll get to now so I'm going to spend too",
    "start": "1896890",
    "end": "1902710"
  },
  {
    "start": "1901000",
    "end": "1934000"
  },
  {
    "text": "much time on this many of you are familiar with the get flow the gate workflow for developers you're making a feature branch you make a pull request",
    "start": "1902710",
    "end": "1909220"
  },
  {
    "text": "for code review some if you're if you're at the point in the process you'll have your back-end build your your unit test",
    "start": "1909220",
    "end": "1917830"
  },
  {
    "text": "for you give you some automated feedback if all those units has passed and you got there and you were able to succeed",
    "start": "1917830",
    "end": "1923740"
  },
  {
    "text": "with the other developers checking off on it you could merge it into a test and develop and then that would get deployed",
    "start": "1923740",
    "end": "1929260"
  },
  {
    "text": "as well well for a pipeline like ours it's a little more complicated so you",
    "start": "1929260",
    "end": "1935320"
  },
  {
    "start": "1934000",
    "end": "2089000"
  },
  {
    "text": "have multi developers and your multi accounts continuous integration in particular scale and pipelines",
    "start": "1935320",
    "end": "1940840"
  },
  {
    "text": "right and so you have multiple developers working on different parts of the of the pipeline and so what I already discussed",
    "start": "1940840",
    "end": "1946870"
  },
  {
    "text": "they each have their own pipeline and so how this actually works is let's say Bob",
    "start": "1946870",
    "end": "1952150"
  },
  {
    "text": "will make a feature request in into bitbucket and or sorry he'll make a pull",
    "start": "1952150",
    "end": "1958030"
  },
  {
    "text": "request into bitbucket off his feature branch bamboo was our was our build service that we elected to use it",
    "start": "1958030",
    "end": "1963370"
  },
  {
    "text": "because it was on premises for us and bamboo will actually take his code it",
    "start": "1963370",
    "end": "1969130"
  },
  {
    "text": "will run the unit test on it and then it will either create his confirmations",
    "start": "1969130",
    "end": "1974200"
  },
  {
    "text": "back for him or it will update the current one that he has and so let's say",
    "start": "1974200",
    "end": "1979720"
  },
  {
    "text": "Alice is also working and she pushes a new docker image to the to her feature",
    "start": "1979720",
    "end": "1986020"
  },
  {
    "text": "for feature branch and makes a pull request our bamboo will build that build",
    "start": "1986020",
    "end": "1991090"
  },
  {
    "text": "the docker image so the developers aren't building the docker containers on their local machines and push that docker image to the ECR repo which I'll",
    "start": "1991090",
    "end": "1998560"
  },
  {
    "text": "get to in a second but then bamboo will will that will trigger our second build",
    "start": "1998560",
    "end": "2004020"
  },
  {
    "text": "in our process which comes up in an in the next slide and that will tag the",
    "start": "2004020",
    "end": "2009330"
  },
  {
    "text": "image and deploy it to the updated confirmation stack so Alice doesn't have to worry about pushing out new updates to her container so the CICE part of it",
    "start": "2009330",
    "end": "2019590"
  },
  {
    "text": "in particular looked like this so we had two different repos we had a model repo and the lambda repo and so within our",
    "start": "2019590",
    "end": "2026160"
  },
  {
    "text": "model repo we had our deep learning model so the weights file and then we had the inference code wrapped around it",
    "start": "2026160",
    "end": "2031920"
  },
  {
    "text": "and that and then on the lambda repo we had the orchestration and our",
    "start": "2031920",
    "end": "2037380"
  },
  {
    "text": "confirmation code and so how did the build process actually look our model build will produce the docker images and",
    "start": "2037380",
    "end": "2042930"
  },
  {
    "text": "for each of the models as we saw we had five of them and then inventory all those image tags lambda would then build",
    "start": "2042930",
    "end": "2049800"
  },
  {
    "text": "the lambda would then run the lambda build would then run and the they would run the linter on the cloud information",
    "start": "2049800",
    "end": "2056070"
  },
  {
    "text": "to make sure there's no syntax errors run the unit test and produce a software package for deploys and this is where Sam was involved the model build",
    "start": "2056070",
    "end": "2063510"
  },
  {
    "text": "triggers the lambda build and then the lambda lambda build triggers the deploy so where does that take us and it's not",
    "start": "2063510",
    "end": "2069480"
  },
  {
    "text": "the D placed up so the deployer will create or update the a dovish cloud formation stack that's what bamboo is",
    "start": "2069480",
    "end": "2074940"
  },
  {
    "text": "doing and then it will pull or push andreat at our site it'll pulled and push and retag",
    "start": "2074940",
    "end": "2080200"
  },
  {
    "text": "the the docker images with a with a specific bill number and environment and then it will deploy the new images based",
    "start": "2080200",
    "end": "2086829"
  },
  {
    "text": "off the newest containers and so more deeply into that docker ice model the",
    "start": "2086829",
    "end": "2092980"
  },
  {
    "text": "mic I said the models in low-end though and the inference code is in that repo the images are all stored in the elastic",
    "start": "2092980",
    "end": "2099250"
  },
  {
    "text": "container repo and then the image tagging that was actually more complicated than we expected so the",
    "start": "2099250",
    "end": "2104410"
  },
  {
    "text": "images were tagged with their specific build number and their environment and this was very important because of our",
    "start": "2104410",
    "end": "2109720"
  },
  {
    "text": "we have we were deploying multiple accounts and so we had to actually allow our we didn't want to build and deploy",
    "start": "2109720",
    "end": "2115900"
  },
  {
    "text": "our docker models to each account and so we allowed our Amazon ECR permissions to",
    "start": "2115900",
    "end": "2122289"
  },
  {
    "text": "these other two accounts to pull these docker images from our development account as they were as they were marked",
    "start": "2122289",
    "end": "2127660"
  },
  {
    "text": "accordingly staging testing or production and then we also enforce the ECR policies to delete an old and unused",
    "start": "2127660",
    "end": "2133390"
  },
  {
    "text": "images that we don't have leftovers just lying around and so we kept and I think for development we kept five of the last",
    "start": "2133390",
    "end": "2139599"
  },
  {
    "text": "builds and for the same thing we're testing and say if I think further production and then obviously we deleted",
    "start": "2139599",
    "end": "2145839"
  },
  {
    "text": "to untag images and so the big three takeaways we really want you to take it",
    "start": "2145839",
    "end": "2152140"
  },
  {
    "start": "2148000",
    "end": "2254000"
  },
  {
    "text": "from the CI CD pipeline that we built is that we need to capture all of our dependencies and that may seem obvious",
    "start": "2152140",
    "end": "2157960"
  },
  {
    "text": "but for for when you have models like this your requirements file is particular to your Python code for doing",
    "start": "2157960",
    "end": "2164440"
  },
  {
    "text": "inference on image classification your docker file I would recommend being consistent with all of those using the",
    "start": "2164440",
    "end": "2170589"
  },
  {
    "text": "same base image having all the same threat ideally having the same using the same frameworks but I again there's",
    "start": "2170589",
    "end": "2176230"
  },
  {
    "text": "multiple data scientists that use different ones so sometimes that's not possible your CloudFormation templates need to",
    "start": "2176230",
    "end": "2182049"
  },
  {
    "text": "have all your resources if you were to stand up a brand new account and then those scripting config files will really",
    "start": "2182049",
    "end": "2187150"
  },
  {
    "text": "make your life easier and make it fully automated from your bamboo script there sorry from your bamboo builder and so",
    "start": "2187150",
    "end": "2194349"
  },
  {
    "text": "that brings us to automating everything as lenta as Len said building testing and deploying and building everything in",
    "start": "2194349",
    "end": "2202240"
  },
  {
    "text": "complete automation reduces mistakes we can iterate faster and we improve reducibility your development time will go down",
    "start": "2202240",
    "end": "2208369"
  },
  {
    "text": "and you'll be able to maintain your application better and so both of those",
    "start": "2208369",
    "end": "2214009"
  },
  {
    "text": "takeaways build are the building blocks for the continuous integration and continuous deployment it allows you to",
    "start": "2214009",
    "end": "2220130"
  },
  {
    "text": "reproduce build and deploy so if there's there's a weird air that you can't find hopefully another developer can",
    "start": "2220130",
    "end": "2226160"
  },
  {
    "text": "reproduce it with their same stack and then also it allows you to easily deploy stacks and environments it's a developer",
    "start": "2226160",
    "end": "2232369"
  },
  {
    "text": "test stage and prod it the only thing that we didn't automate was the odd the",
    "start": "2232369",
    "end": "2238339"
  },
  {
    "text": "complete automation of going to a production environment that required one click of a button in the bamboo and that",
    "start": "2238339",
    "end": "2243799"
  },
  {
    "text": "pushed out the the new code to production and that's that's by choice we feel like that's where we're at and",
    "start": "2243799",
    "end": "2251119"
  },
  {
    "text": "at least with our applications so folks",
    "start": "2251119",
    "end": "2256309"
  },
  {
    "start": "2254000",
    "end": "2269000"
  },
  {
    "text": "we got like almost 13 minutes for questions and and we'll be outside again and once you run out of time for more",
    "start": "2256309",
    "end": "2262549"
  },
  {
    "text": "questions but are there any questions about any of these and thank you guys just enjoy for that thank you for coming",
    "start": "2262549",
    "end": "2270519"
  }
]