[
  {
    "start": "0",
    "end": "14000"
  },
  {
    "text": "In this video, you’ll get an introduction to\nAmazon CloudWatch Contributor Insights.",
    "start": "0",
    "end": "5140"
  },
  {
    "text": "With this feature, you can analyze log \ndata and display contributor data so you",
    "start": "5500",
    "end": "9844"
  },
  {
    "text": "can monitor contributor impact \non your application’s performance.",
    "start": "9845",
    "end": "13480"
  },
  {
    "start": "14000",
    "end": "55000"
  },
  {
    "text": "Before we begin our demonstration, let’s \nquickly review the CloudWatch basics",
    "start": "14350",
    "end": "18322"
  },
  {
    "text": "and see where Contributor Insights fits in.",
    "start": "18322",
    "end": "20837"
  },
  {
    "text": "CloudWatch provides complete visibility \ninto your cloud resources and applications.",
    "start": "21288",
    "end": "25720"
  },
  {
    "text": "It collects metrics and logs from all \nyour AWS resources, applications, and",
    "start": "26000",
    "end": "30285"
  },
  {
    "text": "services that run on AWS \nand on-premises servers.",
    "start": "30285",
    "end": "33821"
  },
  {
    "text": "You can monitor these metrics \nfrom default or custom dashboards,",
    "start": "34232",
    "end": "37768"
  },
  {
    "text": "and set alarms to watch specific metrics.",
    "start": "37769",
    "end": "40186"
  },
  {
    "text": "You can also take action by automating \nresponses to operational changes",
    "start": "40467",
    "end": "44475"
  },
  {
    "text": "and perform real-time analysis on the data.",
    "start": "44475",
    "end": "47035"
  },
  {
    "text": "With CloudWatch you get system-wide \nvisibility into resource utilization,",
    "start": "47506",
    "end": "51719"
  },
  {
    "text": "application performance, and operational health.",
    "start": "51719",
    "end": "54523"
  },
  {
    "start": "55000",
    "end": "83000"
  },
  {
    "text": "Contributor Insights extends these capabilities.",
    "start": "55345",
    "end": "58103"
  },
  {
    "text": "You can use Contributor Insights to analyze \nlog data and create time series reports.",
    "start": "58484",
    "end": "63440"
  },
  {
    "text": "You can see real-time metrics \nabout the top-N contributors,",
    "start": "63771",
    "end": "67148"
  },
  {
    "text": "the total number of unique \ncontributors, and their usage.",
    "start": "67148",
    "end": "70394"
  },
  {
    "text": "This helps you find top talkers and understand\nwho or what is impacting system performance.",
    "start": "70885",
    "end": "75840"
  },
  {
    "text": "You can build your own rules to define contributors, \nor use sample rules that AWS has created.",
    "start": "76241",
    "end": "81712"
  },
  {
    "start": "83000",
    "end": "96000"
  },
  {
    "text": "Now let’s begin our demo.",
    "start": "83496",
    "end": "84944"
  },
  {
    "text": "We’re going to use Contributor Insights \nto understand top contributor metrics",
    "start": "85315",
    "end": "89170"
  },
  {
    "text": "based on the log data ingested from this pet \nadoption website into CloudWatch log groups.",
    "start": "89170",
    "end": "94478"
  },
  {
    "start": "96000",
    "end": "105000"
  },
  {
    "text": "To get started, let’s open the CloudWatch \nconsole and navigate to Contributor Insights.",
    "start": "96352",
    "end": "101141"
  },
  {
    "start": "105000",
    "end": "173000"
  },
  {
    "text": "We’ll create a new rule to analyze our log data.",
    "start": "105309",
    "end": "107914"
  },
  {
    "text": "We can use the wizard or the\n syntax format to define rules.",
    "start": "108675",
    "end": "111802"
  },
  {
    "text": "In the syntax editor, you can \nmodify your rules manually.",
    "start": "112553",
    "end": "115563"
  },
  {
    "text": "For this example, we'll use the wizard.",
    "start": "115734",
    "end": "117577"
  },
  {
    "text": "First, we’ll select the log \ngroup we want to evaluate.",
    "start": "119501",
    "end": "122698"
  },
  {
    "text": "We'll select the API Gateway Execution \nLog that was generated from our website.",
    "start": "123469",
    "end": "128000"
  },
  {
    "text": "Next, we’ll choose the rule type.",
    "start": "128701",
    "end": "130342"
  },
  {
    "text": "We can choose from a number built-in \nsample rules or create one from scratch.",
    "start": "130663",
    "end": "134872"
  },
  {
    "text": "We'll select the custom rule type.",
    "start": "135563",
    "end": "137324"
  },
  {
    "text": "We'll leave the log format set to JSON.",
    "start": "140120",
    "end": "142375"
  },
  {
    "text": "In the Contribution section, we can add\n up to four log field keys that we want to",
    "start": "144000",
    "end": "148455"
  },
  {
    "text": "report on from the log group we selected.",
    "start": "148455",
    "end": "150860"
  },
  {
    "text": "The report will display the top-N \nvalues for this contribution type.",
    "start": "151291",
    "end": "155140"
  },
  {
    "text": "We can add filters to narrow the scope \nof the results using conditional statements.",
    "start": "156072",
    "end": "160197"
  },
  {
    "text": "For this example, we’ll leave this section blank.",
    "start": "160408",
    "end": "162956"
  },
  {
    "text": "We’ll aggregate our top contributors \nby the number of occurrences.",
    "start": "163687",
    "end": "167056"
  },
  {
    "text": "We’ll name the rule and continue.",
    "start": "168510",
    "end": "170179"
  },
  {
    "text": "Now we’ll review the rule and create it.",
    "start": "173506",
    "end": "175496"
  },
  {
    "text": "We have a graph that displays the results\n of the rule over the last three hours.",
    "start": "178552",
    "end": "182675"
  },
  {
    "text": "The table under the graph \nshows the top contributors.",
    "start": "183306",
    "end": "185952"
  },
  {
    "text": "As you can see puppy was \nthe most popular choice.",
    "start": "186613",
    "end": "189210"
  },
  {
    "text": "We can view specific contributors \nby selecting them in the legend.",
    "start": "189851",
    "end": "193155"
  },
  {
    "text": "We can change the graph display \nusing the dropdown lists at the top,",
    "start": "195751",
    "end": "199229"
  },
  {
    "text": "or by adjusting the time range.",
    "start": "199229",
    "end": "201096"
  },
  {
    "text": "We can even select a custom time \nrange to view more historical data.",
    "start": "203825",
    "end": "207314"
  },
  {
    "text": "We can change the time period we rank the \ncontributors on using the period dropdown.",
    "start": "208065",
    "end": "212590"
  },
  {
    "text": "We can also change the widget type.",
    "start": "213382",
    "end": "215013"
  },
  {
    "text": "We can export the metrics to a CSV file.",
    "start": "218300",
    "end": "220772"
  },
  {
    "text": "Here’s the file in Excel.",
    "start": "224509",
    "end": "225884"
  },
  {
    "text": "We can also add the graph \nto a CloudWatch dashboard.",
    "start": "228209",
    "end": "230917"
  },
  {
    "text": "We’ll select an existing dashboard.",
    "start": "232581",
    "end": "234411"
  },
  {
    "text": "We can now monitor our top \ncontributors from this dashboard.",
    "start": "238809",
    "end": "241706"
  },
  {
    "start": "243000",
    "end": "292000"
  },
  {
    "text": "We can also view our Contributor \nInsight graph in CloudWatch Metrics,",
    "start": "243880",
    "end": "247437"
  },
  {
    "text": "where we can create an alarm.",
    "start": "247437",
    "end": "249120"
  },
  {
    "text": "Let’s see how to configure an alarm.",
    "start": "249892",
    "end": "251537"
  },
  {
    "text": "First, we’ll select the period\n for the alarm threshold.",
    "start": "252279",
    "end": "254976"
  },
  {
    "text": "Next, we’ll define the conditions to trigger \nthe alarm if the metric reaches or exceeds",
    "start": "258643",
    "end": "263195"
  },
  {
    "text": "the static value within the 15 minute time period.",
    "start": "263195",
    "end": "266587"
  },
  {
    "text": "We’ll create an SNS topic to notify us \nby email when the alarm is breached.",
    "start": "268350",
    "end": "272519"
  },
  {
    "text": "Let’s leave the rest as their defaults.",
    "start": "278687",
    "end": "280581"
  },
  {
    "text": "We’ll name the alarm and continue.",
    "start": "283246",
    "end": "284834"
  },
  {
    "text": "We’ll review the alarm and create it.",
    "start": "288361",
    "end": "290181"
  },
  {
    "start": "292000",
    "end": "331000"
  },
  {
    "text": "The alarm will now send a message \nevery instance the threshold is breached.",
    "start": "292977",
    "end": "296675"
  },
  {
    "text": "You can also create rules \nfrom the log group itself.",
    "start": "297396",
    "end": "300000"
  },
  {
    "text": "We simply select the log group and then use the \nActions menu to create a Contributor Insights rule.",
    "start": "302000",
    "end": "307227"
  },
  {
    "text": "Alternatively, we can click into the log group, navigate \nto Contributor Insights, and create a rule from there.",
    "start": "307928",
    "end": "313418"
  },
  {
    "text": "This is the same wizard we saw earlier.",
    "start": "314190",
    "end": "316000"
  },
  {
    "text": "You’ve just seen an introduction to \nCloudWatch Contributor Insights.",
    "start": "319337",
    "end": "322627"
  },
  {
    "text": "You can learn more about this topic in \nthe description and links for this video.",
    "start": "323550",
    "end": "327147"
  },
  {
    "text": "Thanks for watching. Now it’s your turn to try.",
    "start": "327549",
    "end": "330218"
  }
]