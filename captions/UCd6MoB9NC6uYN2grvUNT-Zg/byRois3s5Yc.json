[
  {
    "start": "0",
    "end": "35000"
  },
  {
    "text": "all right good morning everyone and welcome to dev 205 this is developing",
    "start": "860",
    "end": "7980"
  },
  {
    "text": "applications in AWS on the JVM we're gonna focus most of today's session on the AWS SDK for Java my name is Kyle",
    "start": "7980",
    "end": "17160"
  },
  {
    "text": "Thompson I'm a senior engineer on the AWS SDK and tools team and I spend most",
    "start": "17160",
    "end": "22740"
  },
  {
    "text": "of my time on the Java SDK so before we start can I get a show of hands for",
    "start": "22740",
    "end": "28410"
  },
  {
    "text": "people who've used version one of the AWS SDK for Java ok so we've got a few",
    "start": "28410",
    "end": "35370"
  },
  {
    "start": "35000",
    "end": "70000"
  },
  {
    "text": "people out there ok great so as I say we're going to spend most of the time talking about the SDK but not version 1",
    "start": "35370",
    "end": "41879"
  },
  {
    "text": "we're going to do a little recap of version 1 take a look at where we are now and some of the high-level libraries",
    "start": "41879",
    "end": "48390"
  },
  {
    "text": "that version 1 exposes and then we're going to jump into version 2 which is",
    "start": "48390",
    "end": "54329"
  },
  {
    "text": "currently in Developer Preview so this is kind of our upcoming next version of",
    "start": "54329",
    "end": "59370"
  },
  {
    "text": "the Java SDK so again can I get a show of hands for anyone who's looked at version 2 of the SDK a couple of hats",
    "start": "59370",
    "end": "67950"
  },
  {
    "text": "ok good good I think it's gonna be good then so let's let's start off with a",
    "start": "67950",
    "end": "73290"
  },
  {
    "start": "70000",
    "end": "85000"
  },
  {
    "text": "recap of the current version of the SDK so this is the version that's in",
    "start": "73290",
    "end": "78750"
  },
  {
    "text": "production today it's it's open source it's available on github and by way of a",
    "start": "78750",
    "end": "86640"
  },
  {
    "start": "85000",
    "end": "144000"
  },
  {
    "text": "little bit of history we released the first version of the iOS SDK for Java",
    "start": "86640",
    "end": "92280"
  },
  {
    "text": "back in march 2010 at that time it was a single maven module we supported 9",
    "start": "92280",
    "end": "99479"
  },
  {
    "text": "services so we exposed the api's of 9 services in Java bindings and then over",
    "start": "99479",
    "end": "105720"
  },
  {
    "text": "the years we've kind of developed it added new services of course in 2014 we",
    "start": "105720",
    "end": "111750"
  },
  {
    "text": "separated out the single monolithic project in two separate maven modules so",
    "start": "111750",
    "end": "117090"
  },
  {
    "text": "we now have one maven module per service API all the way through to the present day where now we support over a hundred",
    "start": "117090",
    "end": "125280"
  },
  {
    "text": "service api's so that's not necessarily a hundred services some services exposed",
    "start": "125280",
    "end": "130319"
  },
  {
    "text": "more than one API for different parts of their their surface area and we support all of those and we've",
    "start": "130319",
    "end": "136550"
  },
  {
    "text": "added a number of high-level libraries that sit on top of those low-level SDKs",
    "start": "136550",
    "end": "141590"
  },
  {
    "text": "over the years so so let's take a look at some of those so in the middle here we've got the ADA SSD K for Java which",
    "start": "141590",
    "end": "149120"
  },
  {
    "start": "144000",
    "end": "153000"
  },
  {
    "text": "is my product the thing that we've been doubt on on github and then associated",
    "start": "149120",
    "end": "154940"
  },
  {
    "start": "153000",
    "end": "200000"
  },
  {
    "text": "with it are a number of other high-level libraries so these are the green boxes",
    "start": "154940",
    "end": "160250"
  },
  {
    "text": "they sit they sit on top of those high level libraries and give you kind of",
    "start": "160250",
    "end": "165560"
  },
  {
    "text": "Java specific enhancements to the low-level service api's so some",
    "start": "165560",
    "end": "171230"
  },
  {
    "text": "interesting ones here the dynamodb mapper for example we're going to go into some of these in a little bit more",
    "start": "171230",
    "end": "177140"
  },
  {
    "text": "detail we've got some dsls for kind of building I am policies and step functions these are things that ship",
    "start": "177140",
    "end": "183800"
  },
  {
    "text": "with the SDK so when you pull in for example the s3 module you'll get the s3",
    "start": "183800",
    "end": "190610"
  },
  {
    "text": "encryption client and the transfer manager client along with it so these are available in our in a public github",
    "start": "190610",
    "end": "197810"
  },
  {
    "text": "repository and they ship with the SDK but outside of that there's also a",
    "start": "197810",
    "end": "203269"
  },
  {
    "start": "200000",
    "end": "312000"
  },
  {
    "text": "number of other AWS owned but Java focused libraries that we've end out so",
    "start": "203269",
    "end": "210110"
  },
  {
    "text": "these are also most of them are available on github some of them in our aw oblivious labs organization some in",
    "start": "210110",
    "end": "217430"
  },
  {
    "text": "the core AWS organization these are things like the on the left hand side here the Kinesis producer and consumer",
    "start": "217430",
    "end": "224120"
  },
  {
    "text": "libraries allowing you to put high throughput into Kinesis they sit on top of the Java SDK another interesting one",
    "start": "224120",
    "end": "232010"
  },
  {
    "text": "is the AWS scholar SDK I don't know if people have seen this one before but this is kind of a code generation",
    "start": "232010",
    "end": "237769"
  },
  {
    "text": "plug-in for your maven project that will generate Scala ish bindings on top of",
    "start": "237769",
    "end": "244430"
  },
  {
    "text": "the Java SDK but they sit on top of and call down to the core Java SDK so these",
    "start": "244430",
    "end": "250820"
  },
  {
    "text": "are AWS owned AWS managed open-source products then the next kind of I guess",
    "start": "250820",
    "end": "257539"
  },
  {
    "text": "suite of libraries are third-party ones so these are open source these are not AWS management of URIs owned but there",
    "start": "257539",
    "end": "265130"
  },
  {
    "text": "are libraries that third these have built again on top of and using the AWS SDK for Java so I guess",
    "start": "265130",
    "end": "273120"
  },
  {
    "text": "the point I wanted to get across here is there is the core AWS SDK for Java which mirrors the service API s and then you",
    "start": "273120",
    "end": "280950"
  },
  {
    "text": "have this broader ecosystem of other client-side libraries now everything in",
    "start": "280950",
    "end": "287250"
  },
  {
    "text": "the north of this diagram is client-side so these are built into your application",
    "start": "287250",
    "end": "293400"
  },
  {
    "text": "you'll either pull down a dependency or it's going to kind of help you during development time in the case of the eclipse toolkit for example but they're",
    "start": "293400",
    "end": "300690"
  },
  {
    "text": "something that you would use as part of your application development but then there's there's kind of another side to",
    "start": "300690",
    "end": "306660"
  },
  {
    "text": "this and that's how do you get your java applications actually running in AWS and",
    "start": "306660",
    "end": "312350"
  },
  {
    "start": "312000",
    "end": "349000"
  },
  {
    "text": "we have a number of services in this domain as well so on the left-hand side",
    "start": "312350",
    "end": "318210"
  },
  {
    "text": "in that execution environments box these are a number of ways that you can run a java application within AWS and many of",
    "start": "318210",
    "end": "326790"
  },
  {
    "text": "them have Java specific abilities so for example elastic Beanstalk has got Java",
    "start": "326790",
    "end": "332070"
  },
  {
    "text": "specific bindings a debrief slander of course has Java Java Runtime and we're",
    "start": "332070",
    "end": "339150"
  },
  {
    "text": "gonna look at elastic Beanstalk in the in the demo a little later on but this is kind of a high-level view of the Java",
    "start": "339150",
    "end": "346830"
  },
  {
    "text": "ecosystem within AWS so I mentioned that I wanted to kind of do a little review",
    "start": "346830",
    "end": "352470"
  },
  {
    "start": "349000",
    "end": "367000"
  },
  {
    "text": "of some of the high-level abstractions that we have produced in v1 so these",
    "start": "352470",
    "end": "357630"
  },
  {
    "text": "were the green boxes on the previous on the previous slide these are things that ship with the SDK",
    "start": "357630",
    "end": "363570"
  },
  {
    "text": "that are available to you when you pull down the maven dependency so the first one is AWS transfer manager can I get a",
    "start": "363570",
    "end": "371700"
  },
  {
    "start": "367000",
    "end": "456000"
  },
  {
    "text": "show hands again who has seen or used to transfer manager before okay a few few",
    "start": "371700",
    "end": "377190"
  },
  {
    "text": "hands and half-a-dozen hands so transfer manager is our kind of file and",
    "start": "377190",
    "end": "382320"
  },
  {
    "text": "directory based library that sits on top of Amazon s3 and it allows you to a",
    "start": "382320",
    "end": "388230"
  },
  {
    "text": "synchronously copy objects into and out of Amazon s3 using the file system",
    "start": "388230",
    "end": "395540"
  },
  {
    "text": "because we have a knowledge of the file system and it's this stateful thing it allows us to do more sophisticated",
    "start": "395540",
    "end": "402140"
  },
  {
    "text": "exception and error handling that you wouldn't necessarily do from a be able to do from a raw server-side API so we",
    "start": "402140",
    "end": "408780"
  },
  {
    "text": "can do things like better retries and exception handling it also has support for multi-part uploads so you don't need",
    "start": "408780",
    "end": "415530"
  },
  {
    "text": "to worry about splitting your large objects to be able to take advantage of that the transfer manager can take care of that for you and of course there's",
    "start": "415530",
    "end": "422190"
  },
  {
    "text": "hooks for progress reporting because this is a asynchronous API you don't necessarily block when you",
    "start": "422190",
    "end": "429240"
  },
  {
    "text": "call it you need a way to kind of understand what's going on and you'll see the second last line in that code",
    "start": "429240",
    "end": "434730"
  },
  {
    "text": "snippet there has an ad progress listener to our download objects so this is the way you kind of hook in approach",
    "start": "434730",
    "end": "441690"
  },
  {
    "text": "a progress listener to an to an ongoing download so that's AWS transfer manager",
    "start": "441690",
    "end": "448200"
  },
  {
    "text": "really all you need to do is give it an s3 client so that's the low level service API client and you can start",
    "start": "448200",
    "end": "454740"
  },
  {
    "text": "using it next up is the dynamo DB mapper so again a show of hands for people",
    "start": "454740",
    "end": "460860"
  },
  {
    "start": "456000",
    "end": "515000"
  },
  {
    "text": "who've used or heard of the dynamo DB mapper before ok few more people so this",
    "start": "460860",
    "end": "465960"
  },
  {
    "text": "is how effectively ORM it's an annotation based object mapper",
    "start": "465960",
    "end": "472530"
  },
  {
    "text": "from a Java hojo into a dynamo DB document so you simply annotate the",
    "start": "472530",
    "end": "479190"
  },
  {
    "text": "class that you want to serialize and in this case we're going to call the table people so you give it a table name this",
    "start": "479190",
    "end": "485430"
  },
  {
    "text": "is the destination where your objects are going to go to then you need to tell it what property of your object is the",
    "start": "485430",
    "end": "491550"
  },
  {
    "text": "key and the rest it can infer through reflection so it will automatically pull out the fact that there's a get age property and set the appropriate dynamo",
    "start": "491550",
    "end": "498990"
  },
  {
    "text": "DB data type and then loading and saving is as simple as those those three lines",
    "start": "498990",
    "end": "504240"
  },
  {
    "text": "at the bottom I can give it an annotated class and a key and it will be able to load the the object from the dynamo DB",
    "start": "504240",
    "end": "511260"
  },
  {
    "text": "table and then similarly I can mutate that thing and save it back that's DynamoDB mapper so the final one I want",
    "start": "511260",
    "end": "518340"
  },
  {
    "start": "515000",
    "end": "610000"
  },
  {
    "text": "to look at is the dynamo DB document API who's used this one Wow",
    "start": "518340",
    "end": "523979"
  },
  {
    "text": "maybe three people ok excellent well hopefully you learned something today umm so the doc the document API is kind",
    "start": "523979",
    "end": "531900"
  },
  {
    "text": "of a Java friendly ap that sits on top of the dynamodb low-level client and it means that you",
    "start": "531900",
    "end": "537680"
  },
  {
    "text": "can work more natively with Java types and there's a few kind of interesting properties about it the first is that",
    "start": "537680",
    "end": "544100"
  },
  {
    "text": "it's what I call a resource based API so rather than making operations on the",
    "start": "544100",
    "end": "550220"
  },
  {
    "text": "top-level dinamo client like put item where you have to specify a table and a key in the item and all that sort of",
    "start": "550220",
    "end": "555410"
  },
  {
    "text": "stuff you can call get table which is the kind of middle line here so DynamoDB",
    "start": "555410",
    "end": "560510"
  },
  {
    "text": "document api don't get table and give it the people table and that's going to give me a table object so that object",
    "start": "560510",
    "end": "567080"
  },
  {
    "text": "represents the DynamoDB table and hold holds a link to the underlying DynamoDB",
    "start": "567080",
    "end": "573110"
  },
  {
    "text": "client and so I can just perform operations directly on that thing now so I can do scans I can do put item",
    "start": "573110",
    "end": "579260"
  },
  {
    "text": "requests I can get items and it's kind of you don't need to worry about plugging in the table name anymore",
    "start": "579260",
    "end": "584690"
  },
  {
    "text": "that's all encapsulated within that object the second interesting property about it is that it handles pagination",
    "start": "584690",
    "end": "590930"
  },
  {
    "text": "for you so the very last line in this code snippet is a scan and it's going to",
    "start": "590930",
    "end": "596540"
  },
  {
    "text": "give me back an iterable and it's going to take care of paging those items in the background so there's no need for you to kind of figure out what the last",
    "start": "596540",
    "end": "602810"
  },
  {
    "text": "evaluator key was and plug that into a subsequent request the mappers going to do that or the the document API is going",
    "start": "602810",
    "end": "608810"
  },
  {
    "text": "to do that for you so they're kind of the high-level api's of version one that",
    "start": "608810",
    "end": "613820"
  },
  {
    "start": "610000",
    "end": "670000"
  },
  {
    "text": "I wanted to talk about and now we're going to dive into v2 so version two of",
    "start": "613820",
    "end": "620600"
  },
  {
    "text": "the sdk is in Developer Preview and what I mean by that is we don't recommend it",
    "start": "620600",
    "end": "625730"
  },
  {
    "text": "for production use at the moment AWS has a fairly strong stance when it comes to",
    "start": "625730",
    "end": "631610"
  },
  {
    "text": "backwards compatibility we don't like breaking customers and so we but at the",
    "start": "631610",
    "end": "636920"
  },
  {
    "text": "same time with the Developer Preview we want the freedom to be able to change the API from feedback that we get",
    "start": "636920",
    "end": "642830"
  },
  {
    "text": "through the Developer Preview process and that's kind of where you guys come in what I what we really really need is",
    "start": "642830",
    "end": "648650"
  },
  {
    "text": "as much feedback as possible on the Developer Preview in this forming stage in this stage",
    "start": "648650",
    "end": "653779"
  },
  {
    "text": "where we're free to or relatively free to to change the API is in a potentially",
    "start": "653779",
    "end": "659180"
  },
  {
    "text": "backwards incompatible way because once we release out the GA of the of the v2",
    "start": "659180",
    "end": "664940"
  },
  {
    "text": "we're going to have locked into those api's for those reasons that backwards-compatibility",
    "start": "664940",
    "end": "670019"
  },
  {
    "start": "670000",
    "end": "730000"
  },
  {
    "text": "so why now why v2 now why does it make sense to do it at this point well I",
    "start": "670019",
    "end": "676240"
  },
  {
    "text": "mentioned at the start that the first version of the SDK was released in 2010",
    "start": "676240",
    "end": "682180"
  },
  {
    "text": "so a lots happened in the Java ecosystem since then our first version actually baseline on Java 9 and in September this",
    "start": "682180",
    "end": "690100"
  },
  {
    "text": "year in our first version baseline on Java 5 and in September this year Java 9 was released so there's kind of a big",
    "start": "690100",
    "end": "697149"
  },
  {
    "text": "evolution that's happened in the Java ecosystem and we've had feedback from customers that they won't be able to",
    "start": "697149",
    "end": "703240"
  },
  {
    "text": "take advantage from that we've also had a bunch of other feedback from customers over the years about other ways to",
    "start": "703240",
    "end": "710170"
  },
  {
    "text": "change the API or behaviors that perhaps the v1 version of the SDK doesn't make",
    "start": "710170",
    "end": "715779"
  },
  {
    "text": "sense but we have to keep them for backwards compatibility reasons because other customers may be relying on those",
    "start": "715779",
    "end": "721540"
  },
  {
    "text": "behaviors and we've kind of hit this tipping point now where we've got enough feedback and there's been enough evolution that it makes sense for us to",
    "start": "721540",
    "end": "727690"
  },
  {
    "text": "do a new version so in June this year we released a Developer Preview",
    "start": "727690",
    "end": "734770"
  },
  {
    "start": "730000",
    "end": "851000"
  },
  {
    "text": "of v2 and we did so kind of under a set of core principles that we wanted to",
    "start": "734770",
    "end": "740920"
  },
  {
    "text": "adopt and develop the product under the first one was we want this to be a community product this is this is your",
    "start": "740920",
    "end": "748270"
  },
  {
    "text": "SDK we want you to use it and we want you to help us drive its evolution and so with that we want it to be very very",
    "start": "748270",
    "end": "754720"
  },
  {
    "text": "open and as soon as we had a kind of minimally Viable Product we open sourced it on github and we've been accepting",
    "start": "754720",
    "end": "761350"
  },
  {
    "text": "kind of pull requests and feedback and conversations about the way the API",
    "start": "761350",
    "end": "766420"
  },
  {
    "text": "looks ever since and we really want that feedback the second is we understood",
    "start": "766420",
    "end": "771550"
  },
  {
    "text": "that it wouldn't necessarily be feasible for customers who had a large investment",
    "start": "771550",
    "end": "776949"
  },
  {
    "text": "in existing applications using v1 of the SDK to get after my great big bang you",
    "start": "776949",
    "end": "782410"
  },
  {
    "text": "know that's it that's a big ask and so we wanted customers to be able to run both versions side by side and we've",
    "start": "782410",
    "end": "788920"
  },
  {
    "text": "done that by separating them into different maven package groups and their different java packages as well and",
    "start": "788920",
    "end": "795790"
  },
  {
    "text": "actually the the demo that I'm going to be going over in a little bit is a project that contains both versions of the SDK running",
    "start": "795790",
    "end": "802990"
  },
  {
    "text": "side-by-side so the next principle was making simple things simple and complex",
    "start": "802990",
    "end": "809920"
  },
  {
    "text": "things possible so what I mean by this is we wanted the kind of the cut the",
    "start": "809920",
    "end": "815200"
  },
  {
    "text": "coalface the entry point to the SDK to be those use cases that you're going to do most often you shouldn't have to kind of dig into",
    "start": "815200",
    "end": "821920"
  },
  {
    "text": "the depths of the SDK to to do something that's really common but at the same time you want to be able to have the",
    "start": "821920",
    "end": "830740"
  },
  {
    "text": "flexibility to do complex things if you have different use cases so that's where this tenant of simple things simple and",
    "start": "830740",
    "end": "837700"
  },
  {
    "text": "complex things possible comes in we use that to drive our design decisions and then finally like like everything in AWS",
    "start": "837700",
    "end": "844360"
  },
  {
    "text": "we're constantly trying to improve the performance we've got a kind of a different take on that that I'm going to take you over as well so first up let's",
    "start": "844360",
    "end": "852790"
  },
  {
    "start": "851000",
    "end": "1057000"
  },
  {
    "text": "start looking at some of the changes so I mentioned that we customers would need",
    "start": "852790",
    "end": "858940"
  },
  {
    "text": "time to migrate and that's because there have been a number of changes to the programming API that will affect how you",
    "start": "858940",
    "end": "864610"
  },
  {
    "text": "use the SDK so first up immutability in a concurrent multi-threaded world",
    "start": "864610",
    "end": "871570"
  },
  {
    "text": "immutability is king it helps us with the ability to reason about our code if",
    "start": "871570",
    "end": "877150"
  },
  {
    "text": "things aren't constantly changing underneath you and envy one of the SDK all of the clients so the things that",
    "start": "877150",
    "end": "883300"
  },
  {
    "text": "expose the service operations and the models the things that you make your requests with are fully mutable objects",
    "start": "883300",
    "end": "889870"
  },
  {
    "text": "and so for v2 we wanted to move away from that in some of the new functional",
    "start": "889870",
    "end": "895270"
  },
  {
    "text": "patterns that have come out in Java eight immutability is kind of assumed and so we really want to take full",
    "start": "895270",
    "end": "900910"
  },
  {
    "text": "advantage of that and so clients and models in v2 are immutable and that's come with it some interesting properties",
    "start": "900910",
    "end": "908010"
  },
  {
    "text": "that we're going to go into the next three enhanced pagination smart",
    "start": "908010",
    "end": "913360"
  },
  {
    "text": "configuration merging and forward compatible enums these are things that along with the tenant of making simple",
    "start": "913360",
    "end": "919810"
  },
  {
    "text": "things simple so the AWS services give",
    "start": "919810",
    "end": "924940"
  },
  {
    "text": "give us models that we use to generate these SDKs and along with those models are metadata that we can tell when a service",
    "start": "924940",
    "end": "931940"
  },
  {
    "text": "operation is paged including you know what the tokens are and where they belong in subsequent requests it makes",
    "start": "931940",
    "end": "938270"
  },
  {
    "text": "sense for the SDK to expose that it doesn't make sense for us to pass that payment to customers so that's enhanced",
    "start": "938270",
    "end": "943340"
  },
  {
    "text": "pagination I'm smart configuration merging so for those of you who've used v1 of the SDK you'll know that there is",
    "start": "943340",
    "end": "949430"
  },
  {
    "text": "a kind of monolithic configuration object with hundreds of different options on it we wanted that to be",
    "start": "949430",
    "end": "954650"
  },
  {
    "text": "simpler we've grouped like configuration options we've stripped out a bunch that don't really make sense and we've made",
    "start": "954650",
    "end": "960560"
  },
  {
    "text": "it such that you can configure just pieces of the application and then still pull in the defaults that we recommend",
    "start": "960560",
    "end": "966410"
  },
  {
    "text": "and just override the things that you want and the third is forward compatible enums so again this is making simple",
    "start": "966410",
    "end": "972800"
  },
  {
    "text": "things simple if a service API exposes a property like a status that has an",
    "start": "972800",
    "end": "978140"
  },
  {
    "text": "enumeration it makes sense for you to be able to access that thing first-class but in the current version of the SDK",
    "start": "978140",
    "end": "984080"
  },
  {
    "text": "you need to know that a property is an enumeration and then go find the appropriate enumeration for it and do",
    "start": "984080",
    "end": "990350"
  },
  {
    "text": "the parsing yourself one of the reasons for that is because we didn't have a way",
    "start": "990350",
    "end": "995480"
  },
  {
    "text": "to expose those in arms without locking service teams into that set and service",
    "start": "995480",
    "end": "1000970"
  },
  {
    "text": "teams need to be able to add statuses over time so forward compatible in arm solves that problem",
    "start": "1000970",
    "end": "1006460"
  },
  {
    "text": "and then finally our stream operations so streaming operations within AWS are",
    "start": "1006460",
    "end": "1012430"
  },
  {
    "text": "slightly different to your regular request response operations so what I mean by a streaming operation is for",
    "start": "1012430",
    "end": "1019450"
  },
  {
    "text": "example get object from s3 where you get a response back and then you get an input stream that has a stream of bytes",
    "start": "1019450",
    "end": "1026800"
  },
  {
    "text": "that are coming down the wire when the client returns you that response s3 might still be sending data and you need",
    "start": "1026800",
    "end": "1033339"
  },
  {
    "text": "to be able to consume that in your client application if you don't then the connections going to get caught in a",
    "start": "1033339",
    "end": "1038620"
  },
  {
    "text": "funny state that's going to cause contention in your connection pool and a host of problems and at the moment in v2",
    "start": "1038620",
    "end": "1044230"
  },
  {
    "text": "streaming operations and non streaming operations look the same so there's really no indicator that these things",
    "start": "1044230",
    "end": "1049270"
  },
  {
    "text": "are special and require special handling so that's where the streaming operations come into place and we're going to have",
    "start": "1049270",
    "end": "1055210"
  },
  {
    "text": "a look at some examples of those so let's dive in and have a look at immutability and what that means",
    "start": "1055210",
    "end": "1060950"
  },
  {
    "start": "1057000",
    "end": "1108000"
  },
  {
    "text": "to to the SDK so this is a snippet of code from v1 this is how you would",
    "start": "1060950",
    "end": "1066260"
  },
  {
    "text": "create a service client so I'm going to new it up it's for the simple email service I'm going to tell it where I",
    "start": "1066260",
    "end": "1071480"
  },
  {
    "text": "want to find my credentials and then I want to operate in US West too so I immediately call set region on it and",
    "start": "1071480",
    "end": "1078380"
  },
  {
    "text": "this is like a really really common pattern for creating a service client but there's a problem with it",
    "start": "1078380",
    "end": "1084140"
  },
  {
    "text": "as soon as I call set region whatever done I've mutated it so in a mutable world we can't do that last year we",
    "start": "1084140",
    "end": "1092540"
  },
  {
    "text": "introduced with v1 of the SDK the Builder pattern so you could create clients that that were kind of runtime",
    "start": "1092540",
    "end": "1100220"
  },
  {
    "text": "immutable using a builder pattern and in v2 we've kind of gone all-in on that pan",
    "start": "1100220",
    "end": "1105470"
  },
  {
    "text": "but it's not just runtime immutable it's also compile time immutable so this is the same code to create an SES client in",
    "start": "1105470",
    "end": "1113360"
  },
  {
    "text": "version 2 of the SDK because Java 8 allows us to have static methods on",
    "start": "1113360",
    "end": "1118700"
  },
  {
    "text": "interfaces we don't even need to worry about the underlying implementation class anymore all you need to worry",
    "start": "1118700",
    "end": "1123890"
  },
  {
    "text": "about is the SES client is what I want I do SES client dog builder I apply my",
    "start": "1123890",
    "end": "1129050"
  },
  {
    "text": "configurations and then I hit build and I get an immutable instance of an SES client",
    "start": "1129050",
    "end": "1134570"
  },
  {
    "text": "so that's immutable clients immutable models again this is this is an example",
    "start": "1134570",
    "end": "1140660"
  },
  {
    "start": "1135000",
    "end": "1179000"
  },
  {
    "text": "of how you would call the send email operation on SES and you can see it's",
    "start": "1140660",
    "end": "1145880"
  },
  {
    "text": "this large nested structure you know I need to set up a destination I need to set up a body and each set of reply to",
    "start": "1145880",
    "end": "1151430"
  },
  {
    "text": "addresses you know there's this this hierarchical structure that we're creating here and we're using the with",
    "start": "1151430",
    "end": "1157880"
  },
  {
    "text": "pattern so I'm going to do a new send email request and then I'm going to do with destination with reply to address",
    "start": "1157880",
    "end": "1163040"
  },
  {
    "text": "with message kind of a fluid style there and every one of those withers is mutating the original object so of",
    "start": "1163040",
    "end": "1169790"
  },
  {
    "text": "course in in immutable and we can't do this so how do we do that in v2 well we",
    "start": "1169790",
    "end": "1176870"
  },
  {
    "text": "use builders of course but this is looking pretty big and pretty verbose so",
    "start": "1176870",
    "end": "1183320"
  },
  {
    "start": "1179000",
    "end": "1264000"
  },
  {
    "text": "you'll see here we've created the same pattern so you know the object that I'm",
    "start": "1183320",
    "end": "1188450"
  },
  {
    "text": "after dot builder and then I apply my mutations and then I call build and I get the immutable representation of it but",
    "start": "1188450",
    "end": "1195360"
  },
  {
    "text": "it's kind of getting a little bit verbose I've got this string of billed statements at the end to build up this",
    "start": "1195360",
    "end": "1200640"
  },
  {
    "text": "thing and we thought you know there must be a better way this this is one way and we've exposed this way and you can",
    "start": "1200640",
    "end": "1206190"
  },
  {
    "text": "absolutely use this if you prefer this pabo style but there's also another option we've added for each one of these",
    "start": "1206190",
    "end": "1214049"
  },
  {
    "text": "operations where you're setting a complex type that requires a builder there'll be a method that looks",
    "start": "1214049",
    "end": "1219570"
  },
  {
    "text": "something like this which is a little bit confusing at first it's a consumer of an Etsy over send email request",
    "start": "1219570",
    "end": "1226169"
  },
  {
    "text": "builder effectively what we're doing or what the sdk is doing is creating the builder on your behalf and then you",
    "start": "1226169",
    "end": "1233190"
  },
  {
    "text": "apply mutations to it and then we'll build it for you and what that means is you can do the same code above in in",
    "start": "1233190",
    "end": "1240419"
  },
  {
    "text": "these five lines so here I've and I'm using Java eight Landers of course so I can do our - our",
    "start": "1240419",
    "end": "1247140"
  },
  {
    "text": "destination and then I can set addresses this is the sack this is going to produce the same object is that big",
    "start": "1247140",
    "end": "1252659"
  },
  {
    "text": "hierarchical structure and people who are perhaps from a scholar background might understand this a little because",
    "start": "1252659",
    "end": "1258779"
  },
  {
    "text": "it's a little bit similar to name parameters it's kind of the best we can do within the Java ecosystem so that's",
    "start": "1258779",
    "end": "1265830"
  },
  {
    "start": "1264000",
    "end": "1287000"
  },
  {
    "text": "how we create immutable models but let's say we've already got a request object and the only thing we want to do is",
    "start": "1265830",
    "end": "1271230"
  },
  {
    "text": "change where it's going to we you know we want to change where the emails going to we need to set a new destination in",
    "start": "1271230",
    "end": "1276390"
  },
  {
    "text": "v2 this is how we do that we would just call with destination on the original object and mutate it and then pass it",
    "start": "1276390",
    "end": "1283740"
  },
  {
    "text": "back into the client to make a subsequent request of course you know the patterns getting old by now that's a",
    "start": "1283740",
    "end": "1289230"
  },
  {
    "start": "1287000",
    "end": "1344000"
  },
  {
    "text": "that's not immutable so we can't do that in v2 what you would do is something like this every immutable object within",
    "start": "1289230",
    "end": "1296460"
  },
  {
    "text": "v2 of the SDK has a to build a method on it and that gets you back to a mutable",
    "start": "1296460",
    "end": "1302490"
  },
  {
    "text": "representation of that thing using the state of the immutable instance and then you apply whatever mutations you need",
    "start": "1302490",
    "end": "1308429"
  },
  {
    "text": "and hit build so hopefully pretty straightforward but again we wanted to",
    "start": "1308429",
    "end": "1313830"
  },
  {
    "text": "make this less verbose so this is this is certainly one option that's available to you but there's also a copy method on",
    "start": "1313830",
    "end": "1320610"
  },
  {
    "text": "our immutable objects which again takes that consumer builder pattern so using a",
    "start": "1320610",
    "end": "1325799"
  },
  {
    "text": "lander you and apply whatever mutations you want under the hood the copy will then call build for you and it will give you back",
    "start": "1325799",
    "end": "1332040"
  },
  {
    "text": "a new send email request so I should point out that of course this is a new",
    "start": "1332040",
    "end": "1337710"
  },
  {
    "text": "instance we haven't mutated the original request the original request has remained the same",
    "start": "1337710",
    "end": "1343610"
  },
  {
    "text": "so that's immutability and how it's affected our API s next up is enhanced pagination so who's used a paging",
    "start": "1343610",
    "end": "1351090"
  },
  {
    "start": "1344000",
    "end": "1385000"
  },
  {
    "text": "operation within V one of the SDK before okay so you can't have a little bit familiar with this pattern where you you",
    "start": "1351090",
    "end": "1357330"
  },
  {
    "text": "make a request you get the result you do what you needed with it so in this case I'm getting the table names and printing",
    "start": "1357330",
    "end": "1362640"
  },
  {
    "text": "them out to standard out and then I need to check if there's if this was the last page and if it wasn't I need to make a",
    "start": "1362640",
    "end": "1369660"
  },
  {
    "text": "subsequent request and I need to keep doing this in a loop until that that you know next about or that last evaluative",
    "start": "1369660",
    "end": "1375450"
  },
  {
    "text": "page name is null and I get no and no other objects back so as I said we have",
    "start": "1375450",
    "end": "1381630"
  },
  {
    "text": "some metadata about Page API so it makes sense for us to expose something nicer and in v2 we've exposed this iterable",
    "start": "1381630",
    "end": "1390330"
  },
  {
    "start": "1385000",
    "end": "1495000"
  },
  {
    "text": "concept so I should point out that iterable is kind of in like we went back and forth in our team what to call this",
    "start": "1390330",
    "end": "1396240"
  },
  {
    "text": "thing so if you've got any great ideas about what to call it then I'm all ears but at the moment it's called an",
    "start": "1396240",
    "end": "1401400"
  },
  {
    "text": "iterable and we it mirrors the the operation name so in this case a list tables iterable and what this gives you",
    "start": "1401400",
    "end": "1407700"
  },
  {
    "text": "back is an object of type SDK iterable which extends and a regular interval",
    "start": "1407700",
    "end": "1413160"
  },
  {
    "text": "seeking an iterator from it and put it into a regular form for loop or a for each and it also exposes a stream method",
    "start": "1413160",
    "end": "1422040"
  },
  {
    "text": "that gives you a Java 8 style stream but what are you iterative over what are you streaming over in this case you're",
    "start": "1422040",
    "end": "1428340"
  },
  {
    "text": "streaming over the responses themselves so you're streaming over the pages so in this case I'm going to flatmap each page",
    "start": "1428340",
    "end": "1435150"
  },
  {
    "text": "to pull out the table names convert them to a stream and print them out to standard out so this is in one line what",
    "start": "1435150",
    "end": "1441420"
  },
  {
    "text": "I've done in four or five lines in v1 above but again we have about some paged",
    "start": "1441420",
    "end": "1447690"
  },
  {
    "text": "api's we're not only do we know the token and that it's page and where the tokens belong we know what it is that's",
    "start": "1447690",
    "end": "1453360"
  },
  {
    "text": "being paged so what property of the response is the thing that's a list and in that case we also expose",
    "start": "1453360",
    "end": "1459690"
  },
  {
    "text": "that on the response to that list tables iterable a method that mirrors the thing",
    "start": "1459690",
    "end": "1465000"
  },
  {
    "text": "that's being iterated so in this case table names so here what what we're",
    "start": "1465000",
    "end": "1470100"
  },
  {
    "text": "going to get is an sdk iterable of table names which in the case of dynamodb is a string and so i can just directly print",
    "start": "1470100",
    "end": "1477149"
  },
  {
    "text": "them to stand it out and we also get so that was the iterative portion we also",
    "start": "1477149",
    "end": "1483750"
  },
  {
    "text": "get a stream on that thing as well we'll get the ability to a stream so i can do complex things using the java a",
    "start": "1483750",
    "end": "1489059"
  },
  {
    "text": "streaming API so filtering and all that sort of good stuff so that's enhanced pagination in v2 next up is the",
    "start": "1489059",
    "end": "1496799"
  },
  {
    "start": "1495000",
    "end": "1540000"
  },
  {
    "text": "streaming API so I wanted to talk a little bit about them because it's it's kind of a different pattern than v1 so",
    "start": "1496799",
    "end": "1503370"
  },
  {
    "text": "this is a block of v1 code this is the Amazon poly service and the synthesized",
    "start": "1503370",
    "end": "1509039"
  },
  {
    "text": "speech operation so since synthesized speech takes a string of text and it gives you back a audio representation of",
    "start": "1509039",
    "end": "1516600"
  },
  {
    "text": "that in the form of a string a stream of bytes so the result object that you get here somewhere in it has an input stream",
    "start": "1516600",
    "end": "1524250"
  },
  {
    "text": "that you need to read from and if you know that you've read the service API then great if you haven't and you just",
    "start": "1524250",
    "end": "1529740"
  },
  {
    "text": "assume that the result is like a regular a normal response that's already been marshaled and all the stuffs been read",
    "start": "1529740",
    "end": "1535649"
  },
  {
    "text": "from the wire then you might forget to read that input stream and so then your connections getting it caught in a funny",
    "start": "1535649",
    "end": "1541080"
  },
  {
    "start": "1540000",
    "end": "1551000"
  },
  {
    "text": "state in v2 we wanted to expose this differently so it's much much more obvious that streaming API is require",
    "start": "1541080",
    "end": "1547259"
  },
  {
    "text": "special handling and we've done that with three overloads so the first is",
    "start": "1547259",
    "end": "1552360"
  },
  {
    "start": "1551000",
    "end": "1637000"
  },
  {
    "text": "looks very very similar to the the v1 one you call the operation with a",
    "start": "1552360",
    "end": "1557429"
  },
  {
    "text": "request you get a response object but it's actually a wrapper object so the response itself is an input stream and",
    "start": "1557429",
    "end": "1563519"
  },
  {
    "text": "it's denoted by this response input stream object and then within ER is the actual type the marshaled portion of the",
    "start": "1563519",
    "end": "1570120"
  },
  {
    "text": "response so you can pass this straight into a try with resources block and do what you need to do with it the second",
    "start": "1570120",
    "end": "1577409"
  },
  {
    "text": "option is with a callback so you pass along with your request to the operation",
    "start": "1577409",
    "end": "1582659"
  },
  {
    "text": "you pass a streaming response Handler and this is just a functional interface so I can shorten this using lambdas to",
    "start": "1582659",
    "end": "1588960"
  },
  {
    "text": "this but the point is here I get a response and I get an input stream and it's very very obvious to me that I",
    "start": "1588960",
    "end": "1594630"
  },
  {
    "text": "need to do something with that input stream so in this case I'm copying it to a file so you might have noticed a pattern",
    "start": "1594630",
    "end": "1601770"
  },
  {
    "text": "where all three of these examples take that input stream and just write it to a file and we found ourselves doing this a",
    "start": "1601770",
    "end": "1607559"
  },
  {
    "text": "lot during development as well so we thought it doesn't doesn't it just make sense for streaming operations that are",
    "start": "1607559",
    "end": "1612570"
  },
  {
    "text": "dealing with bytes of live data coming over the wire for us to just expose a file overload as well so there's the",
    "start": "1612570",
    "end": "1619919"
  },
  {
    "text": "third overload where I pass a request I pass a destination file which is an Java",
    "start": "1619919",
    "end": "1624960"
  },
  {
    "text": "dot niño dot path and that we will take care of actually serializing it to disk",
    "start": "1624960",
    "end": "1631230"
  },
  {
    "text": "on your behalf and making sure that the connection gets cleaned up so there the streaming API is next up is pluggable",
    "start": "1631230",
    "end": "1639899"
  },
  {
    "start": "1637000",
    "end": "1693000"
  },
  {
    "text": "HTTP so this is the the complex things possible portion of our simple things",
    "start": "1639899",
    "end": "1645120"
  },
  {
    "text": "simple complex things possible tenant and we had a lot of requests from",
    "start": "1645120",
    "end": "1650760"
  },
  {
    "text": "customers over the years to tweak the HTTP configuration in specific ways for their use cases and because we were",
    "start": "1650760",
    "end": "1657210"
  },
  {
    "text": "tightly coupled in v1 were tightly coupled to the Apache client we weren't able to do that so with v2 we've split",
    "start": "1657210",
    "end": "1663630"
  },
  {
    "text": "these things out and now you can swap the HTTP configurator the HTTP client at",
    "start": "1663630",
    "end": "1669240"
  },
  {
    "text": "runtime and the other important aspect here which is going to come into play in a couple of slides is the fact that we",
    "start": "1669240",
    "end": "1676080"
  },
  {
    "text": "have first-class support for synchronous and asynchronous clients all the way down the stack they are different beasts",
    "start": "1676080",
    "end": "1681750"
  },
  {
    "text": "they look different and have different implementations we're going to ship the SDK with a number of default",
    "start": "1681750",
    "end": "1687779"
  },
  {
    "text": "implementations that are available to you to use and each of them kind of has its own advantages",
    "start": "1687779",
    "end": "1693110"
  },
  {
    "start": "1693000",
    "end": "1732000"
  },
  {
    "text": "so that's pluggable HTTP that's going to come in to play in just a little bit so",
    "start": "1693110",
    "end": "1698520"
  },
  {
    "text": "performance one of our biggest requests for v1 of the SDK was to have a",
    "start": "1698520",
    "end": "1704190"
  },
  {
    "text": "non-blocking implementation of the HTTP layer as it was so as it is today v1",
    "start": "1704190",
    "end": "1710010"
  },
  {
    "text": "uses the Apache Commons HTTP client which is a blocking HTTP client it takes",
    "start": "1710010",
    "end": "1716490"
  },
  {
    "text": "up a thread per request we're gonna look a little bit what a little bit why it does that but with v2 we've got a net",
    "start": "1716490",
    "end": "1724110"
  },
  {
    "text": "'back non blah I owe implementation who here understands is the kind of ins and outs",
    "start": "1724110",
    "end": "1730549"
  },
  {
    "text": "and I'm walking on air okay there's a few so for those who don't I want to do a little bit of a dive into what I mean",
    "start": "1730549",
    "end": "1736879"
  },
  {
    "start": "1732000",
    "end": "1749000"
  },
  {
    "text": "by non-blocking i/o and let's have a look at what happens when you make a request to AWS using one of the",
    "start": "1736879",
    "end": "1742850"
  },
  {
    "text": "synchronous clients so I'm gonna I'm the caller I've got an instance of an SDK client I'm going to send in my request",
    "start": "1742850",
    "end": "1748850"
  },
  {
    "text": "pojo then the SDK is going to serialize that to the wire format so JSON or XML or whatever the service is expecting",
    "start": "1748850",
    "end": "1755480"
  },
  {
    "text": "we're gonna make an HTTP request we're gonna stream bytes to the wire we're gonna then wait for a response and",
    "start": "1755480",
    "end": "1761480"
  },
  {
    "text": "stream bytes back again we're gonna deserialize them to the Java representation that you're looking for",
    "start": "1761480",
    "end": "1767509"
  },
  {
    "text": "for the response and give that back to you and in synchronous land all of this happens in the callers thread so the",
    "start": "1767509",
    "end": "1774860"
  },
  {
    "text": "caller can't do anything while this is going on the one of the SDK includes an",
    "start": "1774860",
    "end": "1781610"
  },
  {
    "start": "1778000",
    "end": "1816000"
  },
  {
    "text": "asynchronous set of clients that you can use and let's look at how that works",
    "start": "1781610",
    "end": "1786619"
  },
  {
    "text": "so again you call it you give it your PO Joe and we instead of waiting for that",
    "start": "1786619",
    "end": "1792409"
  },
  {
    "text": "request to happen we'll give you back a future immediately and this is kind of a bucket a promise to say we're gonna put",
    "start": "1792409",
    "end": "1798110"
  },
  {
    "text": "the result in here when we're done but behind the scenes what's happening is effectively the same thing so bytes are",
    "start": "1798110",
    "end": "1804529"
  },
  {
    "text": "being streamed out bytes are being streamed in the serialization is happening and then the future completes it's still all that stuff is still",
    "start": "1804529",
    "end": "1811009"
  },
  {
    "text": "happening in one thread it's just happening in a thread pool that the SDK manages on your behalf so let's look at",
    "start": "1811009",
    "end": "1817999"
  },
  {
    "start": "1816000",
    "end": "1895000"
  },
  {
    "text": "what happens in the HTTP layer that means this is this is kind of necessary so again this is for our synchronous",
    "start": "1817999",
    "end": "1825019"
  },
  {
    "text": "clients the our Apache implementation might look something like this we've got a connection pool we're gonna ask for a",
    "start": "1825019",
    "end": "1830330"
  },
  {
    "text": "connection to an endpoint dynamodb for example it's going to if it doesn't have a connection it's going to go out onto",
    "start": "1830330",
    "end": "1836419"
  },
  {
    "text": "the onto the network and try and open a socket for that that's an i/o operation right so that's",
    "start": "1836419",
    "end": "1841970"
  },
  {
    "text": "that could be unbounded in terms of time when that socket is has been created and",
    "start": "1841970",
    "end": "1847340"
  },
  {
    "text": "TLS negotiation has been done and all that good stuff we get the socket and we synchronously return the connect",
    "start": "1847340",
    "end": "1853430"
  },
  {
    "text": "to the HTTP later so that initial request connection call was a blocking call and then once it's got that",
    "start": "1853430",
    "end": "1859430"
  },
  {
    "text": "connection it can stream bytes to it and again it's going to do this in a blocking way it's going to put until",
    "start": "1859430",
    "end": "1865370"
  },
  {
    "text": "it's kind of told that it can put some more and keep doing that in the thread and then similarly when the response",
    "start": "1865370",
    "end": "1873320"
  },
  {
    "text": "comes back it's going to ask the Sakho to ask the connection do you have bytes for me wait and tell and tell me when",
    "start": "1873320",
    "end": "1878330"
  },
  {
    "text": "you've got bytes available and I'm just gonna I'm just gonna wait here so all of this happens in a single",
    "start": "1878330",
    "end": "1885800"
  },
  {
    "text": "thread still even though in the v1 asynchronous implementations the SDK is",
    "start": "1885800",
    "end": "1891140"
  },
  {
    "text": "managing a thread pool for you that's still happening in a single thread so",
    "start": "1891140",
    "end": "1896660"
  },
  {
    "start": "1895000",
    "end": "1916000"
  },
  {
    "text": "what's wrong with that each request then requires a thread a thread is a piece of",
    "start": "1896660",
    "end": "1903620"
  },
  {
    "text": "system resources it uses resources like CPU and those resources could be used",
    "start": "1903620",
    "end": "1909500"
  },
  {
    "text": "for other things and instead that you're sitting there kind of waiting for the network to respond that stuff that the operating system can deal with so that's",
    "start": "1909500",
    "end": "1916940"
  },
  {
    "start": "1916000",
    "end": "2049000"
  },
  {
    "text": "where non-blocking i/o comes in so it introduces this concept of an event loop and an event based way of communicating",
    "start": "1916940",
    "end": "1924350"
  },
  {
    "text": "between layers so the event loop is just a thread there's nothing really special about it it's just about how it",
    "start": "1924350",
    "end": "1930530"
  },
  {
    "text": "interacts with the other pieces that make it different so when the HTTP later calls request connection it passes along",
    "start": "1930530",
    "end": "1937040"
  },
  {
    "text": "with it a callback to say let me know here when that connection is available and then it goes off and does something",
    "start": "1937040",
    "end": "1942410"
  },
  {
    "text": "else the event loop will take that request and asynchronously ask the operating system to open a socket and",
    "start": "1942410",
    "end": "1948380"
  },
  {
    "text": "once that sockets open it's going to notify the caller that hey your sockets",
    "start": "1948380",
    "end": "1953510"
  },
  {
    "text": "ready you can put some data in it now and so the HTTP layer again is going to in a non-blocking fashion call send",
    "start": "1953510",
    "end": "1960290"
  },
  {
    "text": "bytes and tell me here when you're done the event loop is similarly going to tell the socket it's going to basically",
    "start": "1960290",
    "end": "1966500"
  },
  {
    "text": "wait on the socket to be ready for write but the difference here between this and say the synchronous Apache",
    "start": "1966500",
    "end": "1972920"
  },
  {
    "text": "implementation is that it's going to ask the socket to tell it immediately if it's ready for ripe or not and if the",
    "start": "1972920",
    "end": "1978530"
  },
  {
    "text": "socket is not it will move on and do something else the event loop that is so we're gonna do this a few times until",
    "start": "1978530",
    "end": "1983810"
  },
  {
    "text": "we've sent our request and then again the event loop is gonna when we're reading on the way back the",
    "start": "1983810",
    "end": "1989800"
  },
  {
    "text": "event loop is gonna ask the socket hey do you have any data for me and the sockets are they're gonna say no which case the event loop is going to go away",
    "start": "1989800",
    "end": "1995230"
  },
  {
    "text": "and do something else or it's going to say yes here they are it's not waiting for those bytes to be available so again",
    "start": "1995230",
    "end": "2001050"
  },
  {
    "text": "those events are getting it streamed back to the client so in terms of how these callbacks work on the left side of",
    "start": "2001050",
    "end": "2008580"
  },
  {
    "text": "the event loop these are just application level callbacks so completable futures or in the case of better natty implementation Nettie has",
    "start": "2008580",
    "end": "2016170"
  },
  {
    "text": "their own implementation of a future and on the right hand side it's it's kind of OS level polling in a non-blocking",
    "start": "2016170",
    "end": "2022560"
  },
  {
    "text": "fashion so the interesting property about this is because the event loop is",
    "start": "2022560",
    "end": "2028620"
  },
  {
    "text": "not blocking when it's asking the socket for information it actually has the ability to with a single thread manage",
    "start": "2028620",
    "end": "2035730"
  },
  {
    "text": "multiple sockets at once and that's really where the benefit of non-blocking i/o comes in you can with a single",
    "start": "2035730",
    "end": "2041940"
  },
  {
    "text": "application thread manage multiple incoming sockets or incoming outgoing",
    "start": "2041940",
    "end": "2047730"
  },
  {
    "text": "sockets so before we kind of go on I wanted to just do a quick aside on how",
    "start": "2047730",
    "end": "2053970"
  },
  {
    "start": "2049000",
    "end": "2106000"
  },
  {
    "text": "this has affected our threading model so in vv1 of the sdk in both synchronous and asynchronous clients our our thread",
    "start": "2053970",
    "end": "2061800"
  },
  {
    "text": "model looks like this so the callers thread in in a synchronous line just kind of throws a POJO",
    "start": "2061800",
    "end": "2067169"
  },
  {
    "text": "over the wire and then it's done until that request completes in Neddie land or in non-blocking land we've we've modeled",
    "start": "2067169",
    "end": "2074669"
  },
  {
    "text": "this slightly differently so it might be a little hard to see the boxes up there but the serialization to the wire format",
    "start": "2074669",
    "end": "2080639"
  },
  {
    "text": "happens in the callers thread in the case of a non-blocking i/o implementation and that's our reasoning",
    "start": "2080640",
    "end": "2085679"
  },
  {
    "text": "for that is because you get the benefit of non-blocking i/o when you start to go to the wire everything else is just CPU",
    "start": "2085679",
    "end": "2090720"
  },
  {
    "text": "that's going to be used anyway but this is our current thinking as I mentioned a",
    "start": "2090720",
    "end": "2096030"
  },
  {
    "text": "couple of times we're in Developer Preview this is open to change so please please if you feel strongly about this give us your feedback really really want",
    "start": "2096030",
    "end": "2103800"
  },
  {
    "text": "to hear from you but this is this is kind of our current thinking okay so now we're gonna drop in and see if we can",
    "start": "2103800",
    "end": "2110850"
  },
  {
    "start": "2106000",
    "end": "2138000"
  },
  {
    "text": "actually look at the the SDK in action",
    "start": "2110850",
    "end": "2116060"
  },
  {
    "text": "and hopefully my demo plays well it's been working all week so we'll see we'll see how we go so I've got a quote",
    "start": "2116060",
    "end": "2122940"
  },
  {
    "text": "application it's a it's an application that's just deployed to elastic Beanstalk it's backed by dynamo DB",
    "start": "2122940",
    "end": "2128850"
  },
  {
    "text": "that's got a set of kind of famous quotes in it and it's just it's just a web application for web application and",
    "start": "2128850",
    "end": "2137600"
  },
  {
    "text": "it is built in a spring boot application and the the crux of how we talk to",
    "start": "2137600",
    "end": "2143610"
  },
  {
    "start": "2138000",
    "end": "2158000"
  },
  {
    "text": "DynamoDB is this interface here so our quote provider interface which given a",
    "start": "2143610",
    "end": "2149190"
  },
  {
    "text": "ID will return a completable future for quote so a promise that our quotes are",
    "start": "2149190",
    "end": "2155190"
  },
  {
    "text": "going to get put here once we get once we hear back from DynamoDB at the moment we've only got one implementation of it",
    "start": "2155190",
    "end": "2160980"
  },
  {
    "start": "2158000",
    "end": "2202000"
  },
  {
    "text": "which is the v1 implementation so this uses version one of the SDK is a",
    "start": "2160980",
    "end": "2168030"
  },
  {
    "text": "synchronous client so you can see here we've created the client we're making a",
    "start": "2168030",
    "end": "2173370"
  },
  {
    "text": "get quotes request because v1 of the SDK",
    "start": "2173370",
    "end": "2179280"
  },
  {
    "text": "returns our future rather than a completable future we need to do somewhere to kind of come convert that thing to a completable future and we do",
    "start": "2179280",
    "end": "2186270"
  },
  {
    "text": "that using a future of the Futurity library but what we want to do is we",
    "start": "2186270",
    "end": "2191610"
  },
  {
    "text": "want to create a new version we want to create a version that uses v2 is a non-blocking layer so let's create that",
    "start": "2191610",
    "end": "2197190"
  },
  {
    "text": "we're gonna create it in the same package and we'll call it sdk v2",
    "start": "2197190",
    "end": "2202790"
  },
  {
    "start": "2202000",
    "end": "2207000"
  },
  {
    "text": "and we're gonna implement that interface",
    "start": "2202790",
    "end": "2206840"
  },
  {
    "text": "okay so first up we're going to need a constructor because we need to create the dynamo DB client and what do i need",
    "start": "2207890",
    "end": "2217620"
  },
  {
    "text": "so let's go back and have a look at v1 so v1 what do we do we've got this configuration object it's got it's got",
    "start": "2217620",
    "end": "2224730"
  },
  {
    "text": "max connections on it it's got a no retry policy it's got a region okay so",
    "start": "2224730",
    "end": "2230850"
  },
  {
    "text": "these are things that we need to we need to do in our implementation let's do the region first so we can set",
    "start": "2230850",
    "end": "2236880"
  },
  {
    "start": "2231000",
    "end": "2252000"
  },
  {
    "text": "this as a first class property region in our configuration it's just a string so we need to pass it and we're going to",
    "start": "2236880",
    "end": "2244200"
  },
  {
    "text": "need our configuration object so let's get that into our constructor cool so",
    "start": "2244200",
    "end": "2253950"
  },
  {
    "start": "2252000",
    "end": "2353000"
  },
  {
    "text": "what else we had max connections now this is where things start to get a little bit interesting in pluggable HTTP land that max connections is a",
    "start": "2253950",
    "end": "2261329"
  },
  {
    "text": "configured property of the HTTP client and in pluggable and we don't",
    "start": "2261329",
    "end": "2266490"
  },
  {
    "text": "necessarily know what options a an HTTP implementation is going to offer and so",
    "start": "2266490",
    "end": "2271589"
  },
  {
    "text": "by default you need to that as soon as you want to kind of drop into configuring your HTTP client you need to",
    "start": "2271589",
    "end": "2278359"
  },
  {
    "text": "provide a configuration specific to it so again I'm using this consumer builder",
    "start": "2278359",
    "end": "2284910"
  },
  {
    "text": "pattern here in a lambda I'm going to provide it with a HTTP client factory",
    "start": "2284910",
    "end": "2291230"
  },
  {
    "text": "which we're going to create so we're going to use the Neddie version so this",
    "start": "2291230",
    "end": "2297150"
  },
  {
    "text": "is the the Neddie sdk HTTP client factory and again we're back to this",
    "start": "2297150",
    "end": "2302309"
  },
  {
    "text": "builder patent so we can do things on this so this is how we configure the nettie specific options of our HTTP",
    "start": "2302309",
    "end": "2309359"
  },
  {
    "text": "layer including e-max connections per endpoint so we can use our configuration max connections okay so there we go",
    "start": "2309359",
    "end": "2317400"
  },
  {
    "text": "what else did we need ah retries so because we're going to do a little bit",
    "start": "2317400",
    "end": "2322499"
  },
  {
    "text": "of a performance test later on we don't want retries to come into play here so i'm going to turn those off and i'm",
    "start": "2322499",
    "end": "2329369"
  },
  {
    "text": "gonna do that providing override configuration so again I'm using this builder pattern and I can I can supply a",
    "start": "2329369",
    "end": "2336029"
  },
  {
    "text": "retry policy in this case don't retry retry and none okay so we want to make",
    "start": "2336029",
    "end": "2342960"
  },
  {
    "text": "sure that we we don't have the the client is not a field at the moment so",
    "start": "2342960",
    "end": "2350519"
  },
  {
    "text": "we need to do that all right so now just",
    "start": "2350519",
    "end": "2356609"
  },
  {
    "start": "2353000",
    "end": "2427000"
  },
  {
    "text": "a couple of pieces of housekeeping here we want to make sure that we clean up after ourselves and clean up any resources that are in use so we're gonna",
    "start": "2356609",
    "end": "2364109"
  },
  {
    "text": "close that client and here's the kind of the crux of it how do we actually get these objects from dynamo so I've got my",
    "start": "2364109",
    "end": "2370920"
  },
  {
    "text": "client and I'm gonna call get item kind of make sense right and I'm gonna use again this consumer builder patent to",
    "start": "2370920",
    "end": "2377460"
  },
  {
    "text": "construct my request so this our object here is a a get item request builder and on that I",
    "start": "2377460",
    "end": "2387609"
  },
  {
    "text": "have a number of properties that I need to set obviously only to set the table name I need to set the key that I'm",
    "start": "2387609",
    "end": "2394030"
  },
  {
    "text": "getting which in our case is a ID and",
    "start": "2394030",
    "end": "2400180"
  },
  {
    "text": "it's the ID that's passed in to the method now this item builder thing here is a way to easily create a map of",
    "start": "2400180",
    "end": "2407470"
  },
  {
    "text": "string to attribute value in v2 we haven't done we haven't implemented any",
    "start": "2407470",
    "end": "2412690"
  },
  {
    "text": "of the high level API is that v1 exposes and so this isn't a fully fledged DynamoDB document API it's just a little",
    "start": "2412690",
    "end": "2420430"
  },
  {
    "text": "helper that means that you can create a map without having to kind of declare a mutable object and add things to it and",
    "start": "2420430",
    "end": "2427740"
  },
  {
    "start": "2427000",
    "end": "2510000"
  },
  {
    "text": "consists of read I want to turn consistent read off because my quotes are just kind of static so I don't need",
    "start": "2427740",
    "end": "2433390"
  },
  {
    "text": "to worry too much about read consistency okay I was gonna return that we know get item on our asynchronous interfaces",
    "start": "2433390",
    "end": "2438670"
  },
  {
    "text": "returns a completable future but the ID is complaining so why is it complaining okay it's the wrong type so what get",
    "start": "2438670",
    "end": "2446080"
  },
  {
    "text": "item gives us back as a get item response what we wanted to get is a quote so we need to kind of like map",
    "start": "2446080",
    "end": "2452619"
  },
  {
    "text": "that thing and thankfully completable future gives us this option so we have then apply which is effectively a map",
    "start": "2452619",
    "end": "2459010"
  },
  {
    "text": "method and we're going to get this response and this is only going to get invoked when the response has come back",
    "start": "2459010",
    "end": "2464619"
  },
  {
    "text": "from the client if it will come back from the service and I want to create a quote here and I've created a little",
    "start": "2464619",
    "end": "2472260"
  },
  {
    "text": "static method to create one okay so it's happy there's one final thing we need to",
    "start": "2472260",
    "end": "2478690"
  },
  {
    "text": "do and that is we need to tell our spring application how to find this thing so I'm going to do that by",
    "start": "2478690",
    "end": "2485560"
  },
  {
    "text": "annotating it and giving it a name our v1 implementation we called v1 so I",
    "start": "2485560",
    "end": "2491950"
  },
  {
    "text": "think it probably makes sense for us to call the v2 implementation v2 okay so let's run this thing so we're going to",
    "start": "2491950",
    "end": "2500410"
  },
  {
    "text": "run the application as I say it's a spring boot application we're just running this locally for the moment and",
    "start": "2500410",
    "end": "2506290"
  },
  {
    "text": "we're gonna see if we can actually get make use of that so we're gonna get a",
    "start": "2506290",
    "end": "2513820"
  },
  {
    "start": "2510000",
    "end": "2547000"
  },
  {
    "text": "local host first and I'm gonna give it provider look at the v1 one first so this should hit the",
    "start": "2513820",
    "end": "2520420"
  },
  {
    "text": "v1 provider and we'll check about v2",
    "start": "2520420",
    "end": "2526690"
  },
  {
    "text": "providers working okay v2 is working great now that's not much good to us because it's on my local",
    "start": "2526690",
    "end": "2532750"
  },
  {
    "text": "machine you know my customers who are out there hungry for quotes about software are not going to be able to",
    "start": "2532750",
    "end": "2539290"
  },
  {
    "text": "take advantage of this so we want to we want to deploy it to our elastic",
    "start": "2539290",
    "end": "2544720"
  },
  {
    "text": "Beanstalk instance let me check if it's there no no bean named v2 so I don't have that",
    "start": "2544720",
    "end": "2550930"
  },
  {
    "start": "2547000",
    "end": "2590000"
  },
  {
    "text": "I haven't deployed that being yet so but I haven't deployed that change yet so let's deploy it and what I've done here",
    "start": "2550930",
    "end": "2557080"
  },
  {
    "text": "is this project is it's a maven project and I'm using the third-party Beanstalk",
    "start": "2557080",
    "end": "2562630"
  },
  {
    "text": "maven plugin which is a let which allows you to deploy applications to Beanstalk",
    "start": "2562630",
    "end": "2567660"
  },
  {
    "text": "so all I need to do here is I want to do a maven clean deploy and what that's",
    "start": "2567660",
    "end": "2574270"
  },
  {
    "text": "going to do is it's gonna package up using spring boots kind of packaging framework then it's going to zip that",
    "start": "2574270",
    "end": "2580510"
  },
  {
    "text": "thing up into into a collection of all the classes and it's going to upload",
    "start": "2580510",
    "end": "2585610"
  },
  {
    "text": "that to s3 and then it's gonna tell Beanstalk where to find it so I'm gonna",
    "start": "2585610",
    "end": "2591010"
  },
  {
    "start": "2590000",
    "end": "2609000"
  },
  {
    "text": "kind of SSH into the the instance this was the thread dump from I can't find v2",
    "start": "2591010",
    "end": "2598600"
  },
  {
    "text": "provider and this is Beanstalk and I picked up the fact there's a new version of the software so it's rebooting the",
    "start": "2598600",
    "end": "2605290"
  },
  {
    "text": "application now and hopefully that shouldn't take too long okay great so now what we should be able",
    "start": "2605290",
    "end": "2611560"
  },
  {
    "start": "2609000",
    "end": "2629000"
  },
  {
    "text": "to do is hit this with v2 and there we go so we've got an implementation of the",
    "start": "2611560",
    "end": "2617680"
  },
  {
    "text": "non-blocking dynamodb client deployed in beans in elastic Beanstalk using using",
    "start": "2617680",
    "end": "2625420"
  },
  {
    "text": "the maven plugin so that's kind of how we do the deployment but what we want to",
    "start": "2625420",
    "end": "2631450"
  },
  {
    "start": "2629000",
    "end": "2677000"
  },
  {
    "text": "understand a little bit about is kind of the performance characteristics of these two implementations so version one uses",
    "start": "2631450",
    "end": "2640390"
  },
  {
    "text": "a blocking HTTP client we use a single thread per request and so let's have a",
    "start": "2640390",
    "end": "2647170"
  },
  {
    "text": "look at kind of a little perfrom for that so the application that I built also as well as",
    "start": "2647170",
    "end": "2654440"
  },
  {
    "text": "the the web app portion - it includes this perf this perf tool with it which",
    "start": "2654440",
    "end": "2661940"
  },
  {
    "text": "is a very very simple tool that will just hit the the provider implementation",
    "start": "2661940",
    "end": "2667940"
  },
  {
    "text": "that we give it with as many requests as it can handle and we're going to see how many transactions per second we can get",
    "start": "2667940",
    "end": "2674359"
  },
  {
    "text": "through in in 30 seconds so this is the SDK v1 provider this is the original",
    "start": "2674359",
    "end": "2681170"
  },
  {
    "start": "2677000",
    "end": "2722000"
  },
  {
    "text": "version one using asynchronous using the",
    "start": "2681170",
    "end": "2686510"
  },
  {
    "text": "asynchronous blocking implementation so we're gonna let this run for 30 seconds and we're going to hope that doing a",
    "start": "2686510",
    "end": "2693170"
  },
  {
    "text": "live demo here that this is gonna give me the information that I'm hoping to give to you guys but we'll see how we go",
    "start": "2693170",
    "end": "2698960"
  },
  {
    "text": "so we got through ninety nine thousand requests our peak TPS was 5100 and the",
    "start": "2698960",
    "end": "2705230"
  },
  {
    "text": "interesting thing here or maybe it's not interesting maybe it's obvious we use the hundred and nine threads so we had a",
    "start": "2705230",
    "end": "2711470"
  },
  {
    "text": "hundred max connections and as we know every connection every request uses a thread so it kind of makes sense that",
    "start": "2711470",
    "end": "2717049"
  },
  {
    "text": "we're gonna have one hundred and nine connections but let's switch to our v2 provider so again max connections 100",
    "start": "2717049",
    "end": "2724790"
  },
  {
    "start": "2722000",
    "end": "2805000"
  },
  {
    "text": "we're going to try and have a hundred sockets open at once and let's see how this how this thing performs so at the",
    "start": "2724790",
    "end": "2733099"
  },
  {
    "text": "moment we've got we've got 13 threads active in that JVM so almost 10 percent",
    "start": "2733099",
    "end": "2738980"
  },
  {
    "text": "fewer threads let's see how this goes we've gotta wait with bated breath and",
    "start": "2738980",
    "end": "2745250"
  },
  {
    "text": "hopefully hopefully it's going to perform similarly to the async",
    "start": "2745250",
    "end": "2750470"
  },
  {
    "text": "implementation and the blocking implementation you know we're using fewer threads so it may not but let's let's see how it goes",
    "start": "2750470",
    "end": "2757630"
  },
  {
    "text": "ok so what did we get in version 1 we got 99 thousand total requests so that's",
    "start": "2757630",
    "end": "2764299"
  },
  {
    "text": "this number here and a peak TPS of 50 100 with a non-blocking implementation",
    "start": "2764299",
    "end": "2769400"
  },
  {
    "text": "in the same amount of time we got 125,000 requests with a peak of 5,200 so",
    "start": "2769400",
    "end": "2775609"
  },
  {
    "text": "not that much bigger in terms of the TPS but we got three more requests but we use fewer threads we",
    "start": "2775609",
    "end": "2781380"
  },
  {
    "text": "10% as many threads so that's kind of the power of non-blocking implementations and you can depending on",
    "start": "2781380",
    "end": "2788760"
  },
  {
    "text": "the application type you know it may it may make sense to use a blocking or or a non blocking implementation it really",
    "start": "2788760",
    "end": "2796290"
  },
  {
    "text": "depends on the use case and what what are the constraints that the resource constraints on your application so",
    "start": "2796290",
    "end": "2807660"
  },
  {
    "start": "2805000",
    "end": "2828000"
  },
  {
    "text": "that's kind of a whirlwind tour of the Ada Rios SDK for Java and some of the",
    "start": "2807660",
    "end": "2813330"
  },
  {
    "text": "broader ecosystem including how to deploy your code and how to get it running of both v1 so hopefully you'll",
    "start": "2813330",
    "end": "2821910"
  },
  {
    "text": "learn something about the high level libraries that we exposed and v2 and the stuff that's that's coming down the pipe and then we're looking to release next",
    "start": "2821910",
    "end": "2828090"
  },
  {
    "start": "2828000",
    "end": "2891000"
  },
  {
    "text": "year so this is where this is where you comes you come in we need you we need",
    "start": "2828090",
    "end": "2833160"
  },
  {
    "text": "your feedback we need we need to know if we're going down the right track because",
    "start": "2833160",
    "end": "2838350"
  },
  {
    "text": "we really want v2 of the SDK to be your SDK to be the SDK that that you want to",
    "start": "2838350",
    "end": "2843450"
  },
  {
    "text": "use and so we have a number of mechanisms for you to give us feedback as I say we're in this awesome period",
    "start": "2843450",
    "end": "2850260"
  },
  {
    "text": "right now where we can change things if we get feedback once we go GA next year we're gonna it's gonna be a lot harder",
    "start": "2850260",
    "end": "2856530"
  },
  {
    "text": "for us to to change in terms of adapting to feedback and adapting to to new feature requests if that involves",
    "start": "2856530",
    "end": "2862830"
  },
  {
    "text": "backwards and compatible changes through our API so here's a number of ways you can get in contact with us you can",
    "start": "2862830",
    "end": "2868950"
  },
  {
    "text": "prioritize the open features that we have on github for v2 and kind of tell us what features you really after a",
    "start": "2868950",
    "end": "2874680"
  },
  {
    "text": "follow our blog you can email us directly we're usually pretty good at getting back where active on git er and",
    "start": "2874680",
    "end": "2881040"
  },
  {
    "text": "of course you can reach out to the wider community on Stack Overflow so thank you",
    "start": "2881040",
    "end": "2887070"
  },
  {
    "text": "very much",
    "start": "2887070",
    "end": "2889370"
  }
]