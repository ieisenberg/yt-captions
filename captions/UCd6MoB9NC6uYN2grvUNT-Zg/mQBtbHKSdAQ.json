[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "hello everyone what's going on hi all right nice crowd today good to see you",
    "start": "30",
    "end": "6600"
  },
  {
    "text": "guys thank you for coming this is a late afternoon session and it's great to see so many people are interested in",
    "start": "6600",
    "end": "12330"
  },
  {
    "text": "building mobile apps with graph QL and we'll talk about react native and we'll talk about lots of cool stuff you guys",
    "start": "12330",
    "end": "19590"
  },
  {
    "text": "heard about app sync we announced it this morning so it's a fairly new service right now it's available in",
    "start": "19590",
    "end": "25470"
  },
  {
    "text": "preview there's a you go to there's a URL at the end you go there you can sign up for apps think and we'll give you",
    "start": "25470",
    "end": "31859"
  },
  {
    "text": "access in a few days anyway my name is Rohan Deshpande I'm a senior engineer with the team and the lead for this",
    "start": "31859",
    "end": "37530"
  },
  {
    "text": "product being in Amazon for about six years just so worked on quite a few services and you know this is pretty",
    "start": "37530",
    "end": "43920"
  },
  {
    "text": "exciting yet not many people I get to launch a new service and you know super exciting and fulfilling and with me is",
    "start": "43920",
    "end": "51600"
  },
  {
    "text": "my colleague Michael Parris he'll take over a little bit through the presentation and will tell you guys some",
    "start": "51600",
    "end": "57690"
  },
  {
    "text": "really cool things about building apps with appsync so you know it's almost",
    "start": "57690",
    "end": "63690"
  },
  {
    "text": "2018 right and if you want to build a mobile app just want to build a mobile app there's a whole bunch of things you",
    "start": "63690",
    "end": "69540"
  },
  {
    "text": "have to do right there's four four core things you really have to do there's identity you have to manage because you",
    "start": "69540",
    "end": "75119"
  },
  {
    "text": "need to authenticate and authorize your users and the AWS ecosystem we have your recommend user I am and Cognito those",
    "start": "75119",
    "end": "81330"
  },
  {
    "text": "are the standard solutions at the same time the problem have is you know now there are so many devices so many",
    "start": "81330",
    "end": "87570"
  },
  {
    "text": "different form factors so many variations and platforms like even Android versions are not the same",
    "start": "87570",
    "end": "93420"
  },
  {
    "text": "everywhere so you have to make sure that your app runs on all these different devices on platforms because you want to",
    "start": "93420",
    "end": "99509"
  },
  {
    "text": "go where your customers are right you can't tell your customers you must use a certain type of device they will use",
    "start": "99509",
    "end": "104579"
  },
  {
    "text": "what they want you want to run business logic in the cloud right like it's very important to plan for success when you",
    "start": "104579",
    "end": "110880"
  },
  {
    "text": "build an app so in this case you need to make sure you're running against a scalable highly available back in and so",
    "start": "110880",
    "end": "118409"
  },
  {
    "text": "that's where services like lamda and API gateway and the entire server list stack comes into play because you can run at",
    "start": "118409",
    "end": "124530"
  },
  {
    "text": "scale you can run you can scale up a scale down as traffic increases and you don't have to worry about the infrastructure in that case you really",
    "start": "124530",
    "end": "130890"
  },
  {
    "text": "just focus on your application and you know that the infrastructure will grow or scale on as you need to and",
    "start": "130890",
    "end": "137980"
  },
  {
    "text": "then I think the biggest problem really comes down to data right data even now is very complex to manage and mobile app",
    "start": "137980",
    "end": "145770"
  },
  {
    "text": "you need to deal with things like synchronization so you know if you're building like a game app we have a",
    "start": "145770",
    "end": "151210"
  },
  {
    "text": "leaderboard you need to synchronize the scores across different instances of applications where you may have a lot of",
    "start": "151210",
    "end": "156610"
  },
  {
    "text": "people interested in the same scoreboard at the same time you have the one to one use case where you know you have your",
    "start": "156610",
    "end": "163900"
  },
  {
    "text": "mobile app maybe it's an iPhone but then you also want to synchronize the data on an iPad so you want to make sure that",
    "start": "163900",
    "end": "169030"
  },
  {
    "text": "this state the users stay the applications it synchronizes across all these devices and then you have the",
    "start": "169030",
    "end": "176170"
  },
  {
    "text": "problem of offline data yet your app should really work when whenever you go offline or you have a poor network",
    "start": "176170",
    "end": "181840"
  },
  {
    "text": "connection reason for that is you expect users actually expect your apps to be",
    "start": "181840",
    "end": "187390"
  },
  {
    "text": "functional even if you don't have great network connectivity so the canonical",
    "start": "187390",
    "end": "193150"
  },
  {
    "text": "example is you have your in an airplane in your an airplane mode or you don't have Wi-Fi access right some parts of",
    "start": "193150",
    "end": "199030"
  },
  {
    "text": "apps app should still work if you're on a poor network connection let's say you're driving and you're going through like ears where there is poor network",
    "start": "199030",
    "end": "205630"
  },
  {
    "text": "connectivity you have to still continue working without noticeable impact here users because it's there's been a bunch",
    "start": "205630",
    "end": "212020"
  },
  {
    "text": "of studies and a bunch of data that proves that as you're if your app doesn't behave normally no matter what",
    "start": "212020",
    "end": "217870"
  },
  {
    "text": "the connection no matter what the network state is users really will have no problem uninstalling your app and",
    "start": "217870",
    "end": "223420"
  },
  {
    "text": "will just go somewhere else will never come back so you have that once once you",
    "start": "223420",
    "end": "228550"
  },
  {
    "text": "have to tackle offline data then the next problem you need to deal with is conflict detection and resolution right",
    "start": "228550",
    "end": "233980"
  },
  {
    "text": "let's say you allow people to make updates while they're offline what happens when two people make conflicting",
    "start": "233980",
    "end": "240100"
  },
  {
    "text": "updates when the apps go online and how do they resolve on the backend classical wave people have done it we deal with",
    "start": "240100",
    "end": "246280"
  },
  {
    "text": "conflicts on the client right with something on the back says hey there's a conflict and then you deal with them on the client and the way you regionally",
    "start": "246280",
    "end": "251980"
  },
  {
    "text": "handle it the easy way to handle it is to throw a model to the user and say here's here's",
    "start": "251980",
    "end": "257500"
  },
  {
    "text": "a problem you pick you tell me what to do that doesn't always work because users don't always know what to do when",
    "start": "257500",
    "end": "264520"
  },
  {
    "text": "they encounter a conflict so it's important that you also be able to handle conflicts detect them and resolve",
    "start": "264520",
    "end": "270640"
  },
  {
    "text": "them on the backend on the server-side itself and then you have different storage systems you have no sequel",
    "start": "270640",
    "end": "276040"
  },
  {
    "text": "stores you have relational stores you have api's that have unknown stores behind them you have to get data from",
    "start": "276040",
    "end": "282130"
  },
  {
    "text": "all these different sources and you still want to be able to aggregate them display them in your mobile app",
    "start": "282130",
    "end": "288420"
  },
  {
    "text": "hopefully without introducing complexity in the mobile app right example let's",
    "start": "288420",
    "end": "293590"
  },
  {
    "text": "say you're calling from an SP database you don't want to have direct connectivity to the AP database from your mobile app you want to have some",
    "start": "293590",
    "end": "299890"
  },
  {
    "text": "layer in between that does the transformation and the aggregation for you I know newer use case which is come",
    "start": "299890",
    "end": "305950"
  },
  {
    "text": "about in the last couple of years is the ability to get data real-time so whenever changes happen on the server",
    "start": "305950",
    "end": "311020"
  },
  {
    "text": "you want them to be distributed and sent down to like any interested client which",
    "start": "311020",
    "end": "316150"
  },
  {
    "text": "could be millions of clients as well right take take a very popular chat client for example you could have",
    "start": "316150",
    "end": "322870"
  },
  {
    "text": "millions of millions of people subscribe to the same room so whenever someone posts an update I post a message in the",
    "start": "322870",
    "end": "327880"
  },
  {
    "text": "room you want to send it to all those connected clients in the short amount of time now building a scalable real-time",
    "start": "327880",
    "end": "332950"
  },
  {
    "text": "just real-time system is not a trivial task if anyone's tried it I think you",
    "start": "332950",
    "end": "338410"
  },
  {
    "text": "know what I'm talking about so classic way how do we solve these",
    "start": "338410",
    "end": "343690"
  },
  {
    "text": "problems right now we use API is like REST API so we use soap api's right so",
    "start": "343690",
    "end": "349150"
  },
  {
    "text": "if you have if you have a REST API let's say we were building this dashboard let's say we wanted to build like a",
    "start": "349150",
    "end": "354970"
  },
  {
    "text": "real-time dashboard that shows us where every purchase is happening across your",
    "start": "354970",
    "end": "360700"
  },
  {
    "text": "retail enterprise across the globe the way you would do it with the rest would be you would have a bunch of endpoints you would set up so to build this kind",
    "start": "360700",
    "end": "367660"
  },
  {
    "text": "of a dashboard you want something like hey when a purchase happens go record it somewhere that would be your put or your",
    "start": "367660",
    "end": "373150"
  },
  {
    "text": "post call you want to be able to search by some geo range or you know some some",
    "start": "373150",
    "end": "379479"
  },
  {
    "text": "criteria because you want to be able to show you a dashboard based on some criteria you usually have filters on it",
    "start": "379479",
    "end": "386020"
  },
  {
    "text": "if you're building it for the mobile client though you don't always have the same search interface available right",
    "start": "386020",
    "end": "391570"
  },
  {
    "text": "like more commonly people set up a separate API or set of API is for just the mobile news cases because the reason",
    "start": "391570",
    "end": "398169"
  },
  {
    "text": "is you don't want all that data coming back you probably don't need it on the mobile device you're trying to optimize for bandwidth and usage in that case so rest",
    "start": "398169",
    "end": "406900"
  },
  {
    "text": "is great because it's really trivial to set up we all know how it works we've used it for a while it's just standard",
    "start": "406900",
    "end": "412240"
  },
  {
    "text": "HTTP and resources and you know there's a bunch of clients out there everything just works great but from a mobile",
    "start": "412240",
    "end": "418840"
  },
  {
    "text": "client perspective there are quite a few problems with it it's not easy to express relationships behind a REST API",
    "start": "418840",
    "end": "425889"
  },
  {
    "text": "so let's say you have data that's sitting in a Dynamo table and in elasticsearch cluster yes you can do the",
    "start": "425889",
    "end": "433509"
  },
  {
    "text": "you know you can simulate joins in the REST API but it's not the same as actually establishing and maintaining",
    "start": "433509",
    "end": "439150"
  },
  {
    "text": "relationships between the data data especially across different ad stores take a nap where you're building a",
    "start": "439150",
    "end": "445840"
  },
  {
    "text": "master-detail view right on the master view you usually want to list with just a subset of the information and then",
    "start": "445840",
    "end": "452500"
  },
  {
    "text": "when you go into the detail view you want to drill down and get additional fields and have them show up in you know that detail view it's not easy to do",
    "start": "452500",
    "end": "459250"
  },
  {
    "text": "that with rest either because you probably would set up separate endpoints or you would have to come up with some query language or some structure so you",
    "start": "459250",
    "end": "465610"
  },
  {
    "text": "can pass in fields and then filter the data onto what you need query support in",
    "start": "465610",
    "end": "471009"
  },
  {
    "text": "general typically the way this is done if you implement a Search API as you would come up with your own representation and your own DSL and use",
    "start": "471009",
    "end": "477490"
  },
  {
    "text": "that to actually execute the search on the back end and then with search obviously with queries obviously comes",
    "start": "477490",
    "end": "482860"
  },
  {
    "text": "the how do you order the data that's coming back how do you page through multiple pages of the data that's coming",
    "start": "482860",
    "end": "488259"
  },
  {
    "text": "back and then there's notifications if data changes tell all connected clients",
    "start": "488259",
    "end": "493659"
  },
  {
    "text": "that are interested in that change that's something change and let them do something with it this is not just tell",
    "start": "493659",
    "end": "499719"
  },
  {
    "text": "me something change this is also maybe give me a view of the data that changed and you know that becomes complex",
    "start": "499719",
    "end": "505419"
  },
  {
    "text": "because not every client may actually have access or should be permitted to see the data that changed right so it",
    "start": "505419",
    "end": "512469"
  },
  {
    "text": "becomes a fairly hard problem to solve so you know like I said it's almost 2018",
    "start": "512469",
    "end": "518849"
  },
  {
    "start": "515000",
    "end": "762000"
  },
  {
    "text": "there are tons and tons of complexities and it's it's really really really still",
    "start": "518849",
    "end": "525730"
  },
  {
    "text": "painful to build a mobile app so you know really wondering is there a better way to do this",
    "start": "525730",
    "end": "532589"
  },
  {
    "text": "hey everyone I'm Michael thanks for having me so yeah there is a better way and we're",
    "start": "535180",
    "end": "541010"
  },
  {
    "text": "going to talk about it so we chose the better way to be graph QL so a quick",
    "start": "541010",
    "end": "547160"
  },
  {
    "text": "little 0 to graph QL in 60 seconds what does graph QL it's a query language",
    "start": "547160",
    "end": "552590"
  },
  {
    "text": "for api's so what does that mean it's not a database it's not a graph database it's a protocol that you can use or that",
    "start": "552590",
    "end": "560210"
  },
  {
    "text": "clients can use to extract information from a server and it's really good at it it's also a runtime for fulfilling",
    "start": "560210",
    "end": "566930"
  },
  {
    "text": "queries with existing data this is actually a bigger point than it sounds because it's an it means that it can be",
    "start": "566930",
    "end": "572060"
  },
  {
    "text": "iterative if I already have a huge infrastructure with a lot of data everywhere I can add graph QL on top of",
    "start": "572060",
    "end": "577640"
  },
  {
    "text": "it and start building modern applications on top of legacy systems and lastly it's a strongly typed",
    "start": "577640",
    "end": "583250"
  },
  {
    "text": "contract between the client and the server and this is also a huge deal because as we just mentioned we have all",
    "start": "583250",
    "end": "588260"
  },
  {
    "text": "of these devices and all of these clients across all these different form factors and you want to have a consistent language for speaking with",
    "start": "588260",
    "end": "594470"
  },
  {
    "text": "them so in short it's a great way of client applications to interact with data here are a couple examples so in",
    "start": "594470",
    "end": "604100"
  },
  {
    "text": "graph QL there's three base operation types there are queries that read data mutations that write data and",
    "start": "604100",
    "end": "609860"
  },
  {
    "text": "subscriptions that are pushed data in real time you can see that the language that's used between all three of these",
    "start": "609860",
    "end": "615680"
  },
  {
    "text": "things looks well almost exactly the same except for that first word this is",
    "start": "615680",
    "end": "621260"
  },
  {
    "text": "different than what you would see is like a in a API yesterday with with if you have HTTP for your your posts and",
    "start": "621260",
    "end": "628070"
  },
  {
    "text": "your puts and your get so then you have to figure out WebSockets and have a messaging protocol there this gives you",
    "start": "628070",
    "end": "633680"
  },
  {
    "text": "a standard structure that you can use across all parts of your application stack so how does graph 2 a work the",
    "start": "633680",
    "end": "641960"
  },
  {
    "text": "first step in any graph QL system or building a graphical API is always to",
    "start": "641960",
    "end": "647600"
  },
  {
    "text": "define your data model so here you can see an example of what we call the graph QL schema definition language or SDL for",
    "start": "647600",
    "end": "653810"
  },
  {
    "text": "short it's not a complete schema but it can give you it gives you the basic pieces so you can see at the top there's",
    "start": "653810",
    "end": "659120"
  },
  {
    "text": "a type query that type query is gonna be our root query type which means that it's basically the entry point for all",
    "start": "659120",
    "end": "664970"
  },
  {
    "text": "read that are going to occur in our applications graph you can also see type",
    "start": "664970",
    "end": "670010"
  },
  {
    "text": "to do type to do contain some pretty basic information an ID a name description priority and due date and",
    "start": "670010",
    "end": "677350"
  },
  {
    "text": "then we will see as in a second that we can selectively choose that data so what's next after you define your schema",
    "start": "677350",
    "end": "685070"
  },
  {
    "text": "you can start writing queries something about graph to us that it's strongly typed as I mentioned before which means",
    "start": "685070",
    "end": "690770"
  },
  {
    "text": "that all of your queries are type checked and actually don't execute unless they satisfy the type constraints this is great for debugging it prevents",
    "start": "690770",
    "end": "698450"
  },
  {
    "text": "app it prevents you from shipping applications with bugs and it just also makes it really easy to understand what",
    "start": "698450",
    "end": "703670"
  },
  {
    "text": "operations I have access to and what data I can get and push so here's a",
    "start": "703670",
    "end": "708800"
  },
  {
    "text": "simple example of a query it says query get to Do's I guess you can guess what that does you'll notice that in this",
    "start": "708800",
    "end": "715160"
  },
  {
    "text": "selection set or what the the little brackets right after get to do only",
    "start": "715160",
    "end": "720680"
  },
  {
    "text": "include the ID the name and the priority that's different than what we see on the",
    "start": "720680",
    "end": "725780"
  },
  {
    "text": "left so the to-do item actually includes more information than we're asking for and this is an important point because",
    "start": "725780",
    "end": "732350"
  },
  {
    "text": "in graph QL whatever you request is exactly what you get so if I included a",
    "start": "732350",
    "end": "738320"
  },
  {
    "text": "different field in there that's what my response would look like and I can always have confidence that what I'm requesting for is what I'm gonna get so",
    "start": "738320",
    "end": "746840"
  },
  {
    "text": "this is great graph QL is really awesome it solves a lot of problems that you",
    "start": "746840",
    "end": "751940"
  },
  {
    "text": "confront when you're building web and mobile applications but there's still a complexity to it because there's still",
    "start": "751940",
    "end": "757910"
  },
  {
    "text": "infrastructure and you're still managing large-scale systems so what we did is we",
    "start": "757910",
    "end": "763400"
  },
  {
    "start": "762000",
    "end": "1140000"
  },
  {
    "text": "wanted to find a way to allow you to focus on apps and not infrastructure and so we built this new service called AWS",
    "start": "763400",
    "end": "769430"
  },
  {
    "text": "app sync so what is app sync EPS Inc is a managed in service graph QL service we",
    "start": "769430",
    "end": "777080"
  },
  {
    "text": "allow you to connect to resources that live in your AWS account already or we will actually help you provision those",
    "start": "777080",
    "end": "782660"
  },
  {
    "text": "resources using the graph QL schema as a template if you so choose and that's important because you own your data",
    "start": "782660",
    "end": "788240"
  },
  {
    "text": "always and get to benefit from the same security primitives that you've grown to trust with AWS you can also use services",
    "start": "788240",
    "end": "795770"
  },
  {
    "text": "like it for example with dynamo DB you could use DynamoDB streams and have all of the same interactions",
    "start": "795770",
    "end": "801680"
  },
  {
    "text": "that you're used to having we'll just lay a layer on top it has built-in",
    "start": "801680",
    "end": "806780"
  },
  {
    "text": "offline support with our client toolset so we've built a bunch of client tools that make it really easy to get started",
    "start": "806780",
    "end": "812990"
  },
  {
    "text": "with app sync and we've built it on top of existing open source tools that people are already using and love and",
    "start": "812990",
    "end": "818330"
  },
  {
    "text": "we've added offline and data synchronization on top we also built",
    "start": "818330",
    "end": "823580"
  },
  {
    "text": "conflict resolution in the cloud so as Rohan mentioned there's a couple different methods here you can choose",
    "start": "823580",
    "end": "829460"
  },
  {
    "text": "either to let the client always win basically just whatever was pushed last I want you that to be the correct item",
    "start": "829460",
    "end": "835190"
  },
  {
    "text": "you can choose that the server always wins so basically if I've identified an item and somebody else pushed the same",
    "start": "835190",
    "end": "841640"
  },
  {
    "text": "thing before I did we'd say hey no that's not okay we're gonna we're gonna reject your request because the server",
    "start": "841640",
    "end": "847430"
  },
  {
    "text": "is a source of truth you can also choose to have custom resolution strategies by",
    "start": "847430",
    "end": "853190"
  },
  {
    "text": "using the lambda account all right lambda function that we'll call out - so basically we will handle the conflict",
    "start": "853190",
    "end": "858590"
  },
  {
    "text": "detection for you and then automatically route to your lambda so you can choose to operate on the data how you wish you",
    "start": "858590",
    "end": "864080"
  },
  {
    "text": "can merge the objects you can choose one of the other one over the other depending on your own business rules",
    "start": "864080",
    "end": "869770"
  },
  {
    "text": "it's got enterprise level security features this is something that I hope you've come to expect with AWS it's one",
    "start": "869770",
    "end": "875750"
  },
  {
    "text": "of our top priorities always and it includes we have a couple different authentication mechanisms there are API",
    "start": "875750",
    "end": "882440"
  },
  {
    "text": "key is the simplest and the fastest to get started with you don't have to do much extra through to get started with",
    "start": "882440",
    "end": "888350"
  },
  {
    "text": "that we also support built-in Amazon I am with as well as that use a cig before",
    "start": "888350",
    "end": "894740"
  },
  {
    "text": "signing to basically authenticate requests so we always know who's making calls and we also support Cognito user",
    "start": "894740",
    "end": "901550"
  },
  {
    "text": "pools that can allow you to do more fine-grained access control with things like groups and some other cool other",
    "start": "901550",
    "end": "907130"
  },
  {
    "text": "cool primitives there and then lastly but not least simple and scalable real-time synchronization this is nice",
    "start": "907130",
    "end": "914420"
  },
  {
    "text": "because you don't have to deploy servers or websites or anything to scale your subscriptions in your real time data",
    "start": "914420",
    "end": "920360"
  },
  {
    "text": "will do it for you and we will allow you mechanisms to hook into it so how does",
    "start": "920360",
    "end": "925640"
  },
  {
    "text": "app sync work as I said the first step is always creating and defining your",
    "start": "925640",
    "end": "932240"
  },
  {
    "text": "schema schema defines your data model the schema defines the operations that you have access to your queries new",
    "start": "932240",
    "end": "937430"
  },
  {
    "text": "mutations your subscriptions and that's always what you're gonna do first next you're going to be able to connect data",
    "start": "937430",
    "end": "943040"
  },
  {
    "text": "sources so these might be data sources that are already in your account we as I said before we can help you provision",
    "start": "943040",
    "end": "949399"
  },
  {
    "text": "these data sources at launch we support dynamo DB lamda and elastic search and",
    "start": "949399",
    "end": "954890"
  },
  {
    "text": "have a lot of capabilities around those three and then lastly you're going to use our client tooling or basically any",
    "start": "954890",
    "end": "961519"
  },
  {
    "text": "open source graphical tooling to connect to our service and start implementing it in your application you can build on iOS",
    "start": "961519",
    "end": "967820"
  },
  {
    "text": "on Android react react native IOT we have an Alexa skill there's a bunch of",
    "start": "967820",
    "end": "973100"
  },
  {
    "text": "stuff that you can do so I want to pitch",
    "start": "973100",
    "end": "978890"
  },
  {
    "text": "an app we're gonna build an app that simulates if you or me or anyone in the",
    "start": "978890",
    "end": "986630"
  },
  {
    "text": "room owned a brick-and-mortar retail store and you wanted to have a real-time dashboard that showed you where",
    "start": "986630",
    "end": "994040"
  },
  {
    "text": "purchases are happening in a geographic location at any given time so step one",
    "start": "994040",
    "end": "1000100"
  },
  {
    "text": "we need a robust scalable storage engine for this we're gonna use dynamo DB scales really well it's reliable and low",
    "start": "1000100",
    "end": "1007420"
  },
  {
    "text": "latency we also need geospatial search so I'm gonna need to be able to say I",
    "start": "1007420",
    "end": "1013570"
  },
  {
    "text": "want all of the purchases that happened in within a hundred miles of this location within the last 60 minutes we",
    "start": "1013570",
    "end": "1022060"
  },
  {
    "text": "need real-time updates for both web and mobile this is where graphic you all subscriptions come in and the last piece",
    "start": "1022060",
    "end": "1027730"
  },
  {
    "text": "is we need mobile and web clients and more but for now mobile and web these",
    "start": "1027730",
    "end": "1033400"
  },
  {
    "text": "will be react and react native they will use an extremely similar programming model and actually we've seen that we",
    "start": "1033400",
    "end": "1038740"
  },
  {
    "text": "can share a lot of the code between these applications and make it really robust so before we show you how we did",
    "start": "1038740",
    "end": "1046750"
  },
  {
    "text": "it we're just gonna kind of lay out the diagram for what might what it might look like without a service like app",
    "start": "1046750",
    "end": "1052929"
  },
  {
    "text": "sync you know you might have your web servers I'm sorry you've got you know you've got your data the data is living",
    "start": "1052929",
    "end": "1058210"
  },
  {
    "text": "somewhere you've got your lambda that's doing your business logic your DynamoDB instance that's storing your you know",
    "start": "1058210",
    "end": "1063920"
  },
  {
    "text": "the store of truth it's where you're keeping your records for the long term you've got elasticsearch it's your query",
    "start": "1063920",
    "end": "1069290"
  },
  {
    "text": "index you can do geospatial indexes there you can do all kinds of analytical queries there make it really powerful",
    "start": "1069290",
    "end": "1076300"
  },
  {
    "text": "just a show on the right that's a symbol for a dynamodb stream streaming information into elasticsearch so every",
    "start": "1076300",
    "end": "1083210"
  },
  {
    "text": "time the data operation happens on dynamo it automatically streams into elasticsearch you've only got a fleet of",
    "start": "1083210",
    "end": "1088430"
  },
  {
    "text": "web servers so this might run on ec2 it might be lambda it might be a p8 way might be ECS any number of these of",
    "start": "1088430",
    "end": "1094340"
  },
  {
    "text": "these compute you know hubs and then you're building a rest endpoint or a rest api on top of those so that's",
    "start": "1094340",
    "end": "1100970"
  },
  {
    "text": "that's listening to http it's taking post put some posts and gets in converting it into any number of",
    "start": "1100970",
    "end": "1107150"
  },
  {
    "text": "different data stores behind the scenes they're also gonna have to talk to some pub sub Q or pub sub engine like Redis",
    "start": "1107150",
    "end": "1113600"
  },
  {
    "text": "perhaps in the web servers gonna have to orchestrate that work as well and then",
    "start": "1113600",
    "end": "1118910"
  },
  {
    "text": "you're gonna have another fleet of WebSocket servers that are sitting listening to that pub sub engine and pushing data over channels down to",
    "start": "1118910",
    "end": "1125990"
  },
  {
    "text": "connected clients which is a real scaling problem and is a difficult problem to solve and then you've got",
    "start": "1125990",
    "end": "1132110"
  },
  {
    "text": "your multiple clients that are talking to all of these different endpoints all the time in trying to make it work so",
    "start": "1132110",
    "end": "1140800"
  },
  {
    "start": "1140000",
    "end": "1250000"
  },
  {
    "text": "now we're gonna show demo so we're gonna go off the rails a little bit so hopefully this works yep okay so here is",
    "start": "1140800",
    "end": "1151520"
  },
  {
    "text": "our mapped app demo let me just refresh it real quick move this guy around so",
    "start": "1151520",
    "end": "1157570"
  },
  {
    "text": "what we're seeing here is a map if that was unclear and you can see that we've",
    "start": "1157570",
    "end": "1164180"
  },
  {
    "text": "had a couple purchases happening in Vegas or around the Vegas area in the last 60 minutes now what happens if I",
    "start": "1164180",
    "end": "1171710"
  },
  {
    "text": "want to do a query say ok a hundred miles is great but I wanted to be a thousand miles what happens then so here",
    "start": "1171710",
    "end": "1179510"
  },
  {
    "text": "it's a different query so now you can see ok some some people are buying some stuff back we're from in Seattle and in",
    "start": "1179510",
    "end": "1185690"
  },
  {
    "text": "Portland you can see what what's happened in the last five minutes what's",
    "start": "1185690",
    "end": "1191420"
  },
  {
    "text": "happened in the last you know maybe 24 hours oh that's a big one",
    "start": "1191420",
    "end": "1197020"
  },
  {
    "text": "this will take a second there's a lot of info so there's a couple hundred objects that are about to come down to us they",
    "start": "1197510",
    "end": "1204200"
  },
  {
    "text": "doesn't look that many but i zoom in I promise there's a bunch oh wait okay but that's the point so",
    "start": "1204200",
    "end": "1212930"
  },
  {
    "text": "here's our G here's our app this is real time too so when I click I'm simulating a I'm",
    "start": "1212930",
    "end": "1218690"
  },
  {
    "text": "simulating a purchase so when every time I clicking that's firing a graph QL mutation through app sync that goes to",
    "start": "1218690",
    "end": "1225350"
  },
  {
    "text": "DynamoDB streamed into elasticsearch and then i can immediately start querying it again so I can see what's going on over",
    "start": "1225350",
    "end": "1230810"
  },
  {
    "text": "here it'll change in a second let's see there we go",
    "start": "1230810",
    "end": "1236090"
  },
  {
    "text": "see there's a bunch of information in here let's make this little shorter okay so that's our application so now we want",
    "start": "1236090",
    "end": "1242660"
  },
  {
    "text": "to talk about how why how do we do this so I'm gonna take you in to the app sync",
    "start": "1242660",
    "end": "1251360"
  },
  {
    "start": "1250000",
    "end": "1369000"
  },
  {
    "text": "portal look this is our console it's the quickest way to get started with app sync and I'm just gonna walk you through",
    "start": "1251360",
    "end": "1257450"
  },
  {
    "text": "a couple of the the the things that you need to do in order to build this app yourself so first I've got a couple apps",
    "start": "1257450",
    "end": "1263270"
  },
  {
    "text": "in here some are marked with do not delete I've got this map tap one though so it's your API home page like I said",
    "start": "1263270",
    "end": "1270620"
  },
  {
    "text": "with graph QL there's actually only ever one endpoint that you need with a single slash craftool endpoint you gain access",
    "start": "1270620",
    "end": "1277250"
  },
  {
    "text": "to your entire schema and have access to provide you know you can start issuing graphic UL requests using the graphical",
    "start": "1277250",
    "end": "1283130"
  },
  {
    "text": "scheme our query language and then that will be resolved by the apps ting servers I've currently got API key",
    "start": "1283130",
    "end": "1289910"
  },
  {
    "text": "enabled so there's as I said the simplest authentication mechanism and authorization mechanism that we that we",
    "start": "1289910",
    "end": "1295970"
  },
  {
    "text": "offer basically you can just take this token put it in the header and then you'll be authorized and then we've got",
    "start": "1295970",
    "end": "1302420"
  },
  {
    "text": "some getting started steps but more interesting we're gonna go to the schema page so here's your schema page and this",
    "start": "1302420",
    "end": "1309830"
  },
  {
    "text": "is where a lot of your work will be done you've got your types actually before I",
    "start": "1309830",
    "end": "1315500"
  },
  {
    "text": "get to this let's go check out the data sources so on the data sources page this is this is another super important thing",
    "start": "1315500",
    "end": "1321290"
  },
  {
    "text": "so you can see I've got four data sources hooked up I've got a WS lambda that's called the batch process lambda",
    "start": "1321290",
    "end": "1327560"
  },
  {
    "text": "we'll talk about why that's relevant we have a lambda function that is just our process lambda that's",
    "start": "1327560",
    "end": "1333020"
  },
  {
    "text": "like the one above it except it only operates not batched we've got our Amazon Elastic search cluster that we",
    "start": "1333020",
    "end": "1339200"
  },
  {
    "text": "called tap es you can see that I basically have given it a simple kind of a name that we can use within apps app",
    "start": "1339200",
    "end": "1346190"
  },
  {
    "text": "sync but then we've got access to the to the actual cluster itself and then we",
    "start": "1346190",
    "end": "1351200"
  },
  {
    "text": "have a dynamo DB table for our taps so these are our Fork data sources you can add more click new kind of go through",
    "start": "1351200",
    "end": "1357620"
  },
  {
    "text": "some des and then here you can you got access to the your types and then we'll actually fill this information in for",
    "start": "1357620",
    "end": "1363860"
  },
  {
    "text": "you I'm not gonna add one right now but here you can see we've got a lot of dynamo tables in here we could keep adding those let's first go back to the",
    "start": "1363860",
    "end": "1370550"
  },
  {
    "start": "1369000",
    "end": "1618000"
  },
  {
    "text": "schema page so let's take a look at our schema so starting from the root there's",
    "start": "1370550",
    "end": "1376520"
  },
  {
    "text": "always gonna be this root schema declaration here this is where we define",
    "start": "1376520",
    "end": "1382430"
  },
  {
    "text": "the entry points into our API so I said there's only three operation types there's query mutations subscription and",
    "start": "1382430",
    "end": "1388370"
  },
  {
    "text": "here's where we define them so we're saying the entry point to our queries is the type query the entry",
    "start": "1388370",
    "end": "1394640"
  },
  {
    "text": "point to our mutations is the type mutation and likewise for subscription so here on query it's down here you can",
    "start": "1394640",
    "end": "1404660"
  },
  {
    "text": "see what we have access to so we're saying we're gonna allow two major operations here we have taps near which",
    "start": "1404660",
    "end": "1411710"
  },
  {
    "text": "takes a couple arguments a location input that says where do we want to look for taps or purchases we have a distance",
    "start": "1411710",
    "end": "1418850"
  },
  {
    "text": "which is just a float so we're saying I want a hundred miles or 100 point five miles or whatever it is a distance unit",
    "start": "1418850",
    "end": "1424550"
  },
  {
    "text": "which we can see here so this is a graph qln um that i've defined to coordinate",
    "start": "1424550",
    "end": "1430670"
  },
  {
    "text": "two elastic searches understanding of distance units so this is straight from the elastic search Doc's just added my",
    "start": "1430670",
    "end": "1438080"
  },
  {
    "text": "own and then we have in a go that's how long ago do we want to look and a time",
    "start": "1438080",
    "end": "1444650"
  },
  {
    "text": "unit which is itself also an enum which is just MHRD for a minutes hours and days so that's great that's our queries",
    "start": "1444650",
    "end": "1453400"
  },
  {
    "text": "we can do the same for mutations just to finish it up so for mutations you can see here's our type mutation we have a",
    "start": "1453400",
    "end": "1459500"
  },
  {
    "text": "single mutation it's called tap it takes a location and a timestamp and a tap that tap goes the dynamodb is",
    "start": "1459500",
    "end": "1466730"
  },
  {
    "text": "streamed into elasticsearch and you'll notice that I actually don't even give an ID in here so that's another cool",
    "start": "1466730",
    "end": "1471740"
  },
  {
    "text": "feature that will show off in a second and then we have subscriptions which is the same thing except for you know",
    "start": "1471740",
    "end": "1478910"
  },
  {
    "text": "real-time data so we have a subscription called on tap that returns a tap every time a tap happens this is called a",
    "start": "1478910",
    "end": "1487370"
  },
  {
    "text": "directive a directive is basically any annotation that you want to provide to either the schema or to even queries you",
    "start": "1487370",
    "end": "1494660"
  },
  {
    "text": "can put directives on this is one that we provide out of the box and that's managed by us and it's the mechanism",
    "start": "1494660",
    "end": "1499940"
  },
  {
    "text": "that we use to allow you to subscribe to certain mutations so the way that",
    "start": "1499940",
    "end": "1504980"
  },
  {
    "text": "subscriptions work currently is that a subscription you can think of as a reaction to a mutation made elsewhere so",
    "start": "1504980",
    "end": "1512090"
  },
  {
    "text": "I can subscribe to graph QL interactions I'm saying every time you call the tap",
    "start": "1512090",
    "end": "1517580"
  },
  {
    "text": "mutation I want you to push data to all connected clients that are listening to the on tap subscription and that's how",
    "start": "1517580",
    "end": "1525080"
  },
  {
    "text": "easy it is all you have to do is this and then you've got real-time so keep",
    "start": "1525080",
    "end": "1530990"
  },
  {
    "text": "going through this a couple other things just to note for completeness we have an input input is a type in graph Y that",
    "start": "1530990",
    "end": "1536540"
  },
  {
    "text": "you need for it if you ever want to pass an argument in it has to either be a scalar or an input so we're defining inputs for our types we also have a type",
    "start": "1536540",
    "end": "1543320"
  },
  {
    "text": "location that just holds latin lawn or at longitude latitude and a couple other",
    "start": "1543320",
    "end": "1548450"
  },
  {
    "text": "things like a tap connection this is something that you'll actually find is pretty common in graph QL api's there's",
    "start": "1548450",
    "end": "1556790"
  },
  {
    "text": "often ways of talking about standard ways to paginate through things and the kind of agreed-upon nomenclature thus",
    "start": "1556790",
    "end": "1562370"
  },
  {
    "text": "far has been connection to refer to that and then that's that's pretty much most",
    "start": "1562370",
    "end": "1567890"
  },
  {
    "text": "of it so with this is our schema and now we can kind of see okay so we've got our schema that's our types it's defining",
    "start": "1567890",
    "end": "1573679"
  },
  {
    "text": "the structure of our API as well as the operations that we have access to and then we have our data sources which",
    "start": "1573679",
    "end": "1578780"
  },
  {
    "text": "defines where is our data what what are our compute resources where are we keep keeping our records but there's not yet",
    "start": "1578780",
    "end": "1585230"
  },
  {
    "text": "a line between the two so that's the last thing the third concept that's super important in app sync right now is",
    "start": "1585230",
    "end": "1591200"
  },
  {
    "text": "that there's a concept of a resolver so a resolver you can think about as a function that",
    "start": "1591200",
    "end": "1597380"
  },
  {
    "text": "is attached to a field and that gets data it it goes and gets data to return",
    "start": "1597380",
    "end": "1604700"
  },
  {
    "text": "for that field in the graphic you'll execution so to see that that's what",
    "start": "1604700",
    "end": "1609830"
  },
  {
    "text": "this right pane is for so let's go look at the first let's look at the mutation tap so here I can just type in mutation",
    "start": "1609830",
    "end": "1617020"
  },
  {
    "text": "so we've got this tap field I don't click on this resolver that we've already defined so with your resolver I",
    "start": "1617020",
    "end": "1623750"
  },
  {
    "text": "said we're attaching it to a field so resolver for a mutation tap I'm gonna",
    "start": "1623750",
    "end": "1629720"
  },
  {
    "text": "choose a data source because resolvers depend upon where the data lives this particular instance it's the tap table",
    "start": "1629720",
    "end": "1636200"
  },
  {
    "text": "so that's a dynamo DB table that we had already designated is you know in our data sources that I showed earlier and",
    "start": "1636200",
    "end": "1642010"
  },
  {
    "text": "then here's the fun part so we have the come the concept of a mapping template",
    "start": "1642010",
    "end": "1647810"
  },
  {
    "text": "you can a mapping template there's two of them per resolver one translates from graph QL into the domain knowledge of",
    "start": "1647810",
    "end": "1654860"
  },
  {
    "text": "that data source and then the other after that that function executes and we've gotten our data back from the data",
    "start": "1654860",
    "end": "1661190"
  },
  {
    "text": "source there was the response template takes that result and returns it into the shape that graph QL is expecting so",
    "start": "1661190",
    "end": "1668690"
  },
  {
    "text": "let me jump back real quick so here we saw that we have the mutation",
    "start": "1668690",
    "end": "1673810"
  },
  {
    "text": "tap-tap takes two arguments a location input and a timestamp and it returns an",
    "start": "1673810",
    "end": "1680660"
  },
  {
    "text": "object of type tap so that means after our response template is done we want it",
    "start": "1680660",
    "end": "1685760"
  },
  {
    "text": "to look like a tap so I'll go back to that so here we go so here you can see",
    "start": "1685760",
    "end": "1694700"
  },
  {
    "text": "ok so we've chosen our tap table we're giving this response R this request mapping template the mapping template",
    "start": "1694700",
    "end": "1700850"
  },
  {
    "text": "itself we use a templating language called Apache velocity or VTL for short it is you can think of it as just a",
    "start": "1700850",
    "end": "1707510"
  },
  {
    "text": "another one of those templating languages you are able to embed logic in it and we actually give you a fair",
    "start": "1707510",
    "end": "1714170"
  },
  {
    "text": "amount of helper functions that will call to our service and do certain things for you for example if there's a",
    "start": "1714170",
    "end": "1720260"
  },
  {
    "text": "super common use case of serializing some object to JSON like that's a helper function Ombuds apply you can also see",
    "start": "1720260",
    "end": "1726530"
  },
  {
    "text": "an example of utility Auto ID that's another helper that we provide that allows you to auto-generate you you IDs on the server",
    "start": "1726530",
    "end": "1732629"
  },
  {
    "text": "so that your clients don't have to generate IDs themselves and it's super helpful use case so let's step through",
    "start": "1732629",
    "end": "1738869"
  },
  {
    "text": "this so the first thing you see is this version tag that's for us that's so that we know how to parse this particular",
    "start": "1738869",
    "end": "1745440"
  },
  {
    "text": "instance because it might change in the future but for now it's just the version is set second thing you see is the",
    "start": "1745440",
    "end": "1751019"
  },
  {
    "text": "operation so operations are specific to data sources this one is a DynamoDB put",
    "start": "1751019",
    "end": "1758249"
  },
  {
    "text": "item call I'm trying to create an item and put it into a dynamo DB table that's called put item so that's our operation",
    "start": "1758249",
    "end": "1764509"
  },
  {
    "text": "depending on the operation the rest of the data can vary so for DynamoDB it",
    "start": "1764509",
    "end": "1769529"
  },
  {
    "text": "expects you to give it a key so we have a dynamo DB hit table where the hash key is named ID so then we're gonna say that",
    "start": "1769529",
    "end": "1777210"
  },
  {
    "text": "same thing and say the key is named ID and I want the server to automatically",
    "start": "1777210",
    "end": "1782249"
  },
  {
    "text": "inject a UUID every time I call this mutation so I don't have to worry about IDs ever again the next thing is you're",
    "start": "1782249",
    "end": "1789389"
  },
  {
    "text": "seeing the attribute values so here I'm using my context so there's context as",
    "start": "1789389",
    "end": "1795659"
  },
  {
    "text": "an object that we feed in to every time every time that we evaluate a velocity template we feed in this context object",
    "start": "1795659",
    "end": "1802049"
  },
  {
    "text": "and it has some helpful things I can pull it up from the docs on the right so here you can see some of the things that",
    "start": "1802049",
    "end": "1807419"
  },
  {
    "text": "we provide just some basic Doc's there's a quick reference that will continue to grow but at the top level you see",
    "start": "1807419",
    "end": "1812609"
  },
  {
    "text": "context up arguments that refers it's a map that refers to all of the arguments that were passed into that field in",
    "start": "1812609",
    "end": "1820259"
  },
  {
    "text": "graph QL so remember I said our tap mutation takes a location and a timestamp that's what our arguments is",
    "start": "1820259",
    "end": "1826769"
  },
  {
    "text": "which is why I'm able to call context of arguments timestamp and fill that value in my dynamodb call there's one for",
    "start": "1826769",
    "end": "1833700"
  },
  {
    "text": "identity that is when we're logged in as a user via you know sig before with with",
    "start": "1833700",
    "end": "1838830"
  },
  {
    "text": "I am or Cognito that identity object will be filled with user credentials or",
    "start": "1838830",
    "end": "1843899"
  },
  {
    "text": "you know user information that you can use you can get the user name you can get the kind of neat OID things like",
    "start": "1843899",
    "end": "1849059"
  },
  {
    "text": "that context that result is what you get in the response template after you've",
    "start": "1849059",
    "end": "1854940"
  },
  {
    "text": "evaluated the the request template made the request to the data source and it",
    "start": "1854940",
    "end": "1859950"
  },
  {
    "text": "come it comes back that will be filled in context that result you can then manipulate that to turn it into the shape that your",
    "start": "1859950",
    "end": "1866159"
  },
  {
    "text": "graphed ul api's expecting and then there's other utilities like to JSON auto ID and much more to come that's",
    "start": "1866159",
    "end": "1873960"
  },
  {
    "text": "just a quick little note so here let's just finish this up so we've got our attribute values you can see the timestamp you'll notice these S's in",
    "start": "1873960",
    "end": "1880710"
  },
  {
    "text": "these ends and these ends if you're familiar with dynamo DB those will look familiar it's a domain-specific language for",
    "start": "1880710",
    "end": "1886499"
  },
  {
    "text": "dynamo DB and it's you set it up once in this mapping template and then your",
    "start": "1886499",
    "end": "1891840"
  },
  {
    "text": "client developers never have to worry about it again once we set it up it's good to go and from your application",
    "start": "1891840",
    "end": "1897090"
  },
  {
    "text": "standpoint you're seeing tap you're not seeing put item into dynamo DB with a",
    "start": "1897090",
    "end": "1902190"
  },
  {
    "text": "hash table or with a hash key and then the simple configure the response mapping template this is a simple one",
    "start": "1902190",
    "end": "1908190"
  },
  {
    "text": "we're just taking the result and plugging it in and pushing it back out using this to JSON result it's going to",
    "start": "1908190",
    "end": "1914249"
  },
  {
    "text": "serialize it and allow it to go back down to our client you'll also notice there's a couple helpers here I'm not going to change it",
    "start": "1914249",
    "end": "1919830"
  },
  {
    "text": "now but there's a couple helpers that you can use to basically get you started I know this might look like a lot but I promise it's not that complicated once",
    "start": "1919830",
    "end": "1926039"
  },
  {
    "text": "you get used to it so we've provided a bunch of helpers here to get you started with really common use cases like pagination queries from indexes scans",
    "start": "1926039",
    "end": "1933239"
  },
  {
    "text": "delete items get items by ID all those kinds of things and the same thing for for response templates so that's great",
    "start": "1933239",
    "end": "1941759"
  },
  {
    "text": "that was how we configured adding a tap to dynamo DB so here I can just go and",
    "start": "1941759",
    "end": "1948570"
  },
  {
    "text": "I'll just say mutation tap tap location",
    "start": "1948570",
    "end": "1956299"
  },
  {
    "text": "what let's just put it at some ridiculous location that's not real and then for a timestamp let's just say what",
    "start": "1956299",
    "end": "1967830"
  },
  {
    "text": "is today 20",
    "start": "1967830",
    "end": "1971028"
  },
  {
    "text": "and then I can we could run you can see I got back my ID so that worked that's",
    "start": "1973620",
    "end": "1980010"
  },
  {
    "text": "just showing how that whole thing this ID I never passed an ID that auto ID was generating it for me so now let's look",
    "start": "1980010",
    "end": "1986940"
  },
  {
    "text": "at something a little bit more fun so we have tap that allows us to put information into DynamoDB we have taps",
    "start": "1986940",
    "end": "1992760"
  },
  {
    "text": "deposits to get information out of DynamoDB we also have taps near so taps",
    "start": "1992760",
    "end": "1998669"
  },
  {
    "text": "near is interesting because look at all the arguments it's taking this is our geo this is our geospatial query so if I",
    "start": "1998669",
    "end": "2004880"
  },
  {
    "start": "1999000",
    "end": "2490000"
  },
  {
    "text": "go down and look at taps near I can click on our taps resolver and this is",
    "start": "2004880",
    "end": "2010610"
  },
  {
    "text": "going to look like a lot but that's because elastics it's full elasticsearch you have the full power of elasticsearch",
    "start": "2010610",
    "end": "2016460"
  },
  {
    "text": "at your fingertips so here again I chose my elastic search domain as my as my data source that was registered in the",
    "start": "2016460",
    "end": "2022520"
  },
  {
    "text": "data sources tab and then here same thing you see the version that's that's",
    "start": "2022520",
    "end": "2027590"
  },
  {
    "text": "us you see the operation because elastic search exposes a restful api the",
    "start": "2027590",
    "end": "2033020"
  },
  {
    "text": "operation is get we're gonna make a get request to this endpoint the endpoint is a path of map tap slash tap slash search",
    "start": "2033020",
    "end": "2040090"
  },
  {
    "text": "that is an index that I created so map tap is the index that we created in the",
    "start": "2040090",
    "end": "2045409"
  },
  {
    "text": "cluster tap is the type the map type in elastic searches index in an underscore",
    "start": "2045409",
    "end": "2052099"
  },
  {
    "text": "search is the search URL for that particular type and then of the params you get the full power of elastic search",
    "start": "2052099",
    "end": "2058820"
  },
  {
    "text": "here so anything you find in the elastic search Doc's that you want to use you can use you can parameterize it using",
    "start": "2058820",
    "end": "2065540"
  },
  {
    "text": "velocity and take arguments out of our graph out of the graph QL layer and pass it on to onto elastic search you can",
    "start": "2065540",
    "end": "2071300"
  },
  {
    "text": "hard code values in here you can do whatever you want and it'll come back exactly like elastic search expects it",
    "start": "2071300",
    "end": "2076520"
  },
  {
    "text": "to so here you can see I've got a query I'm sitting a sighs I didn't pop agitation on this endpoint so I'm just",
    "start": "2076520",
    "end": "2082520"
  },
  {
    "text": "saying I went up to 500 objects we have a query clause where I'm saying boolean",
    "start": "2082520",
    "end": "2088070"
  },
  {
    "text": "so true or false must so both of this like this has to be true and then range",
    "start": "2088070",
    "end": "2094280"
  },
  {
    "text": "is a way of doing a time a time query so I'm looking for a range of times and I'm",
    "start": "2094280",
    "end": "2100609"
  },
  {
    "text": "looking at the timestamp field in my index so you saw in my tap type in my",
    "start": "2100609",
    "end": "2105980"
  },
  {
    "text": "schema we had the timestamp feel that's what we're looking up and then here I'm defining greater than or equal",
    "start": "2105980",
    "end": "2111440"
  },
  {
    "text": "to a certain timestamp that I'm gonna give them so what you'll see here is now",
    "start": "2111440",
    "end": "2116450"
  },
  {
    "text": "is an elastic search concept that takes the server time at the time that a last search receives the query and then here",
    "start": "2116450",
    "end": "2123410"
  },
  {
    "text": "you can see where the parameterization is happening so remember I passed in that a go query or that a go argument",
    "start": "2123410",
    "end": "2129500"
  },
  {
    "text": "this is a number like a hundred this time unit is the enum this is either M",
    "start": "2129500",
    "end": "2136400"
  },
  {
    "text": "or H or D which means minutes or days or hours so I'm saying now - a hundred",
    "start": "2136400",
    "end": "2142880"
  },
  {
    "text": "minutes divided by which means bucketed so bucket to the unit so just saying I",
    "start": "2142880",
    "end": "2148760"
  },
  {
    "text": "want now - 100 minutes bucket into the minute so if you have you kind of fall in that weird middle ground of that",
    "start": "2148760",
    "end": "2154910"
  },
  {
    "text": "minute I want you basically to round down and include that in and then the filter Clause is where we're doing our",
    "start": "2154910",
    "end": "2161059"
  },
  {
    "text": "geo query so here we've got a Geo distance query we're looking at our location so the distance is again very",
    "start": "2161059",
    "end": "2168890"
  },
  {
    "text": "similar to what we saw in the time stamp query it's I want you know this sent or",
    "start": "2168890",
    "end": "2174259"
  },
  {
    "text": "from the center point a number so this is the arguments that distance is a number like a hundred the context of",
    "start": "2174259",
    "end": "2180740"
  },
  {
    "text": "arguments that disk unit is in a number for meters mi for miles km for",
    "start": "2180740",
    "end": "2186740"
  },
  {
    "text": "kilometers and then a location which takes the latitude and longitude coordinates that you want to be the center of that circle that we're",
    "start": "2186740",
    "end": "2194420"
  },
  {
    "text": "searching of course you can change this you can do geohashes you can do you know poly a strong polygon searches and all",
    "start": "2194420",
    "end": "2202940"
  },
  {
    "text": "kinds of things everything that elasto search has the power to do you can do through graphic you out with absent and",
    "start": "2202940",
    "end": "2208789"
  },
  {
    "text": "that's great so again just samples these are specific to the data source this detects that it's an elastic search data",
    "start": "2208789",
    "end": "2214940"
  },
  {
    "text": "source so we show you elastic search relevant mapping templates to help you get started and then we'll look at the",
    "start": "2214940",
    "end": "2221390"
  },
  {
    "text": "response so here's our first taste of velocity it's a I'll show you why this is the",
    "start": "2221390",
    "end": "2227779"
  },
  {
    "text": "case so I don't want to jump too many times back and forth but this is an",
    "start": "2227779",
    "end": "2233000"
  },
  {
    "text": "example of what elastic search would return for that given query it's an",
    "start": "2233000",
    "end": "2238430"
  },
  {
    "text": "object it has some some measure it's like how long it took but if it timed out or not how many shards did we",
    "start": "2238430",
    "end": "2245510"
  },
  {
    "text": "hit what were they you know what were the hits and then they asked the total number of hits and then you get a",
    "start": "2245510",
    "end": "2251120"
  },
  {
    "text": "paginating set within that set of hits so this is all elasticsearch just showing you why we do it the way we do it so it has this hits so it's the",
    "start": "2251120",
    "end": "2258050"
  },
  {
    "text": "object the result so this whole object will be context that result and then we have to get context dot hits and then",
    "start": "2258050",
    "end": "2265610"
  },
  {
    "text": "one more dot hits and then the information that we actually want is this source object that's included in",
    "start": "2265610",
    "end": "2273320"
  },
  {
    "text": "each element in that car the result dot hits dot hits array right but the",
    "start": "2273320",
    "end": "2279680"
  },
  {
    "text": "problem is we don't want to have to call out to lambda to do this we don't want to have to go deploy lambda function and then pay for lambda every time that this",
    "start": "2279680",
    "end": "2286220"
  },
  {
    "text": "invokes and then have added late insists in our resolvers so we wanted to provide",
    "start": "2286220",
    "end": "2291890"
  },
  {
    "text": "a way that allows you to do this on the server in flight so it's fast in speeding the latency stays low and it's",
    "start": "2291890",
    "end": "2298580"
  },
  {
    "text": "it's less costly so here's an example that's the example so then let's go back to here so what we're doing is if we go",
    "start": "2298580",
    "end": "2306110"
  },
  {
    "text": "back to the schema just for a quick second our query taps near expects an",
    "start": "2306110",
    "end": "2313660"
  },
  {
    "text": "array of taps or a list of taps so we need the result after we've gone through",
    "start": "2313660",
    "end": "2319730"
  },
  {
    "text": "our response mapping template to look like a JSON serialized array of taps so",
    "start": "2319730",
    "end": "2325760"
  },
  {
    "text": "we go back then what we're doing here oops sorry go to the bottom we're laying",
    "start": "2325760",
    "end": "2336290"
  },
  {
    "text": "out the outer brackets of our array we're then iterating this is velocity",
    "start": "2336290",
    "end": "2341540"
  },
  {
    "text": "this is the allowing us to put logic in our templates we're iterating through each entry in context dot result dot",
    "start": "2341540",
    "end": "2349910"
  },
  {
    "text": "hits dot hits we're then using this velocity helper if velocity count",
    "start": "2349910",
    "end": "2355310"
  },
  {
    "text": "greater than 1 put a comma because we have to have a comma delimited list in JSON and then",
    "start": "2355310",
    "end": "2362240"
  },
  {
    "text": "we're simply just spitting out the source of that entry which is what I showed you in in the code editor and",
    "start": "2362240",
    "end": "2368870"
  },
  {
    "text": "then we're ending it and then that's all good to go so after we make the elasticsearch Scott",
    "start": "2368870",
    "end": "2374580"
  },
  {
    "text": "request we get back that large object we iterate through it turn it into a form that graphed well understands and then",
    "start": "2374580",
    "end": "2380310"
  },
  {
    "text": "it's good to go so I can go back here to queries and show nearest taps near you",
    "start": "2380310",
    "end": "2392190"
  },
  {
    "text": "can see that the autocomplete here so I'm gonna go back to our lat 1 lon 1 and then we'll do one second you",
    "start": "2392190",
    "end": "2403560"
  },
  {
    "text": "can see this is graph q LS as part of the benefit if I'm as I'm learning what graph QL is I might not understand fully",
    "start": "2403560",
    "end": "2410070"
  },
  {
    "text": "what's going on but because it's a typed language and all queries are validated against that type system it gives me",
    "start": "2410070",
    "end": "2415680"
  },
  {
    "text": "super helpful you you know helper methods or helper messages just as if you were using a typed language in your",
    "start": "2415680",
    "end": "2421860"
  },
  {
    "text": "favorite IDE and I'll keep going so I'll say location and I'll say a go I'll say",
    "start": "2421860",
    "end": "2428220"
  },
  {
    "text": "a hundred I'll say time unit minute it even new because it's an enum a dist",
    "start": "2428220",
    "end": "2435420"
  },
  {
    "text": "unit our distance and say 100 let's make this miles time units then a dist unit",
    "start": "2435420",
    "end": "2442770"
  },
  {
    "text": "of miles and then here location yep I'm",
    "start": "2442770",
    "end": "2452580"
  },
  {
    "text": "gonna go ahead run that oh no okay well I don't know what some of that but",
    "start": "2452580",
    "end": "2458820"
  },
  {
    "text": "anyway that's it should work let me see if I can do that's the same thing here",
    "start": "2458820",
    "end": "2463890"
  },
  {
    "text": "so this is that's the same query that is running here and if I open up the dev tools you can see that it would it would",
    "start": "2463890",
    "end": "2469800"
  },
  {
    "text": "have that okay and so that's that's most",
    "start": "2469800",
    "end": "2477330"
  },
  {
    "text": "of the concepts that we've covered I would want to do one more thing okay so we haven't touched lambda yet so we've",
    "start": "2477330",
    "end": "2482820"
  },
  {
    "text": "done the tap table we've done the elastic search cluster but we have yet to show how lambda hooks up so this is",
    "start": "2482820",
    "end": "2490710"
  },
  {
    "start": "2490000",
    "end": "2757000"
  },
  {
    "text": "an interesting one so this processed lambda it's we're simulating as if a tap or a purchase we",
    "start": "2490710",
    "end": "2499470"
  },
  {
    "text": "wanted to call out per tap decide and call out to a third party saying was this purchase completed successfully",
    "start": "2499470",
    "end": "2505530"
  },
  {
    "text": "maybe we're calling out to a bank we're calling out credit agency or whatever it is something that we don't own we just want",
    "start": "2505530",
    "end": "2511300"
  },
  {
    "text": "to have arbitrary logic that goes and checks that thing and says is it good or is it not so you can see on our schema",
    "start": "2511300",
    "end": "2517180"
  },
  {
    "text": "our tap type has a field processed that",
    "start": "2517180",
    "end": "2522730"
  },
  {
    "text": "processed field so no longer is this just on the root query or the mutation of the subscription we're drawing",
    "start": "2522730",
    "end": "2528010"
  },
  {
    "text": "we're correlating this tap actually with the lambda this tap has this process",
    "start": "2528010",
    "end": "2533320"
  },
  {
    "text": "boolean and then we've attached a lambda to it this lambda is in our account we basically are just this is a same kind",
    "start": "2533320",
    "end": "2539920"
  },
  {
    "text": "of request mapping template the operation is called invoke it probably does what you expect and the payload is",
    "start": "2539920",
    "end": "2545710"
  },
  {
    "text": "you can pass whatever information you want into lambda of your own choosing and of your own shape and then the",
    "start": "2545710",
    "end": "2550930"
  },
  {
    "text": "response is the lambda returns true or false so then we're just returning the response to JSON as a helper so that's",
    "start": "2550930",
    "end": "2558880"
  },
  {
    "text": "cool we have a that allows us to do find processing flags on taps but the problem",
    "start": "2558880",
    "end": "2566560"
  },
  {
    "text": "with it is that if I have a lot of taps and I query all of those taps and I ask",
    "start": "2566560",
    "end": "2572710"
  },
  {
    "text": "for all of those taps what is the processed state then the way that graphic you'll execute requests is it'll",
    "start": "2572710",
    "end": "2579400"
  },
  {
    "text": "first call that list all taps resolver get back a list of maybe a hundred taps from elasticsearch and then for each of",
    "start": "2579400",
    "end": "2585700"
  },
  {
    "text": "those taps it's going to go in and call the processed lambda per tap so that's",
    "start": "2585700",
    "end": "2590740"
  },
  {
    "text": "called the n plus 1 problem because I made one request to get taps I got back a hundred items and I made a hundred",
    "start": "2590740",
    "end": "2596320"
  },
  {
    "text": "lambda requests to go get a value per tap and that's no good that's that's",
    "start": "2596320",
    "end": "2604270"
  },
  {
    "text": "something that we want to solve for so in graph QL there's this concept or this this way of doing almost per request",
    "start": "2604270",
    "end": "2610690"
  },
  {
    "text": "caching that they call the data loader pattern now data loader basically solves this request or this problem in that",
    "start": "2610690",
    "end": "2616840"
  },
  {
    "text": "instead of me saying immediately go resolve that tap and go fetch that value",
    "start": "2616840",
    "end": "2622450"
  },
  {
    "text": "from lambda we say ok graph QL runtime be aware that I want to make this lambda",
    "start": "2622450",
    "end": "2629350"
  },
  {
    "text": "request but don't make this lambda request right away basically cache it R or store it for a",
    "start": "2629350",
    "end": "2635170"
  },
  {
    "text": "second and then once you've finished executing the current depth of that query go make one request to",
    "start": "2635170",
    "end": "2642220"
  },
  {
    "text": "that batches all of them together so that's what our batch processing does the batched resolver let me show you",
    "start": "2642220",
    "end": "2648940"
  },
  {
    "text": "that so here if I just go back to our tap here it is you can see I've got the",
    "start": "2648940",
    "end": "2656410"
  },
  {
    "text": "processed I've also got processed batch process is the n plus 1 problem process batch fixes it and I'll show you the",
    "start": "2656410",
    "end": "2662920"
  },
  {
    "text": "difference so here we've got back just this is the old one it's all it's just invoke arguments and then result and",
    "start": "2662920",
    "end": "2670990"
  },
  {
    "text": "I'll show you the other one the batch one is that hasn't there we go can you",
    "start": "2670990",
    "end": "2679599"
  },
  {
    "text": "spot the difference we changed the operation from invoke to batch invoke",
    "start": "2679599",
    "end": "2684700"
  },
  {
    "text": "and then the system itself understands how to batch those requests the",
    "start": "2684700",
    "end": "2689890"
  },
  {
    "text": "difference is the lambda function that you that you write has to be aware of this and we will send you instead of",
    "start": "2689890",
    "end": "2696339"
  },
  {
    "text": "just one item one payload we'll send you a list of payloads and tell you that the contract is with this list of payloads",
    "start": "2696339",
    "end": "2702250"
  },
  {
    "text": "we want you to return the response in the same order for all of those payloads and then we'll pass that back instead of",
    "start": "2702250",
    "end": "2708250"
  },
  {
    "text": "having to call individually for each one but the request in the responds mapping templates work exactly the same way as",
    "start": "2708250",
    "end": "2714190"
  },
  {
    "text": "if you were operating on a single item which is really nice so you can move you can move between these things if you find that there's an N plus one problem",
    "start": "2714190",
    "end": "2720160"
  },
  {
    "text": "in your application and you need to fix it it's as simple as changing that lambda function top right on the list instead of a single item and then change",
    "start": "2720160",
    "end": "2726820"
  },
  {
    "text": "that invoke to batch invoke and you're good to go so that's it that's a that's",
    "start": "2726820",
    "end": "2732099"
  },
  {
    "text": "a lot of map tap and now what I want to do is invite Rohan back to the stage because as we have this react",
    "start": "2732099",
    "end": "2738730"
  },
  {
    "text": "application we actually have a couple applications we have react and react native and Rohan is going to show you",
    "start": "2738730",
    "end": "2745030"
  },
  {
    "text": "the awesome work that's gone into making this multi platform thanks",
    "start": "2745030",
    "end": "2751440"
  },
  {
    "text": "all right thanks Mike so for sure the react native application",
    "start": "2756450",
    "end": "2762220"
  },
  {
    "start": "2757000",
    "end": "2817000"
  },
  {
    "text": "let's really quickly take a look at the code that we have at the react app so",
    "start": "2762220",
    "end": "2767619"
  },
  {
    "text": "standard react JIS app it's really just one file it's AB dodge is that's all you",
    "start": "2767619",
    "end": "2773109"
  },
  {
    "text": "have your graphical queries defined here you know standard best practice I guess",
    "start": "2773109",
    "end": "2778630"
  },
  {
    "text": "is you put them in j s files any important time and use them we really",
    "start": "2778630",
    "end": "2784000"
  },
  {
    "text": "have just yes what you need to do is you instantiate your app sync client sync",
    "start": "2784000",
    "end": "2791609"
  },
  {
    "text": "where is it o index there you go so",
    "start": "2791609",
    "end": "2801010"
  },
  {
    "text": "you've setup your client over here this is using so the app sync line is is built on top of the open source of pono",
    "start": "2801010",
    "end": "2807760"
  },
  {
    "text": "client so it uses hoc s and down here and all you're really doing is you're you know you're composing your graph",
    "start": "2807760",
    "end": "2814059"
  },
  {
    "text": "killer running queries you set up subscriptions this is how your trigger mutations so it's pretty standard so",
    "start": "2814059",
    "end": "2821230"
  },
  {
    "start": "2817000",
    "end": "2877000"
  },
  {
    "text": "let's take this app and let's convert it to you know react native app because",
    "start": "2821230",
    "end": "2826380"
  },
  {
    "text": "mobile is cool and we want to see maybe a view every time someone purchases",
    "start": "2826380",
    "end": "2831430"
  },
  {
    "text": "something you want to be able to see it on a device so let's go here let's run",
    "start": "2831430",
    "end": "2838869"
  },
  {
    "text": "it cool ok so how we react native app",
    "start": "2838869",
    "end": "2843910"
  },
  {
    "text": "here pretty easy on tap here what happens is this is you know right to",
    "start": "2843910",
    "end": "2849960"
  },
  {
    "text": "just say using the same tap mutation and you can see the events as they are triggering and it comes back with if",
    "start": "2849960",
    "end": "2856299"
  },
  {
    "text": "it's green it means that the lambda function said that yes this transaction was processed red means it wasn't",
    "start": "2856299",
    "end": "2862089"
  },
  {
    "text": "processed successfully if we go back to the map app let's refresh it so lets tap",
    "start": "2862089",
    "end": "2874599"
  },
  {
    "text": "at a random location here you'll see this is hooked up with real-time subscriptions right so now anytime I tap",
    "start": "2874599",
    "end": "2879940"
  },
  {
    "start": "2877000",
    "end": "2937000"
  },
  {
    "text": "on the map app let's let's pick a city that's like Boise for example and it's",
    "start": "2879940",
    "end": "2885819"
  },
  {
    "text": "sending a real-time notification the app is interested and it gets the update and goes and navigates to that",
    "start": "2885819",
    "end": "2890980"
  },
  {
    "text": "location so this is pretty cool because really the way you set up subscription is like Mike showed you was you add a",
    "start": "2890980",
    "end": "2896170"
  },
  {
    "text": "single directive in your schema and you get all this functionality just out-of-the-box classic way you do is you",
    "start": "2896170",
    "end": "2903550"
  },
  {
    "text": "set up a pub sub service here that website because there's a whole bunch of things to manage you don't have to do that anymore it's it's actually one",
    "start": "2903550",
    "end": "2908830"
  },
  {
    "text": "graph Gale directive and it gives you this power in this flexibility so looking at the code for this app again",
    "start": "2908830",
    "end": "2917010"
  },
  {
    "text": "single file right so this would be the this would be just the react native code where you've written the code you've got",
    "start": "2917010",
    "end": "2924010"
  },
  {
    "text": "you know handling a tap event you're setting state and then this is your view definition right this is quick and easy",
    "start": "2924010",
    "end": "2931300"
  },
  {
    "text": "and so if you want to add app sync into it again it's the same thing you would Senshi the absent client you define your",
    "start": "2931300",
    "end": "2939040"
  },
  {
    "start": "2937000",
    "end": "2997000"
  },
  {
    "text": "mutation in your query right this is exactly the same as you would see in as",
    "start": "2939040",
    "end": "2946090"
  },
  {
    "text": "you saw in the react app radio here okay and then you hook up your mutation so",
    "start": "2946090",
    "end": "2952480"
  },
  {
    "text": "this is when I tap on the map in my in my native app I'm triggering a client mutation with parameters so when I tap",
    "start": "2952480",
    "end": "2958420"
  },
  {
    "text": "on a map it takes this native event gives me the coordinates and I can send that to the server with the timestamp and I updated my local state",
    "start": "2958420",
    "end": "2964900"
  },
  {
    "text": "optimistically because I want to show the tap to the user because if I was offline I don't want them to feel like",
    "start": "2964900",
    "end": "2970930"
  },
  {
    "text": "they tap and nothing happened I want to give them an optimistic update if I was offline it would whether what the absent",
    "start": "2970930",
    "end": "2976780"
  },
  {
    "text": "client that we provide actually does is it will cache you're right it'll catch the actual update when you come back online it will send it to the server and",
    "start": "2976780",
    "end": "2983260"
  },
  {
    "text": "then depending on how you setup conflict resolution it may or may not actually end up committing and get distributed every client that's connected to it and",
    "start": "2983260",
    "end": "2990580"
  },
  {
    "text": "then for subscriptions again we just",
    "start": "2990580",
    "end": "2995650"
  },
  {
    "text": "hook it up in component or mount it's really this couple of lines of code here you're hooking up to utopium to hydrate",
    "start": "2995650",
    "end": "3002400"
  },
  {
    "start": "2997000",
    "end": "3057000"
  },
  {
    "text": "your client to subscriptions and then you're saying any time I get data you know set my state and then go and",
    "start": "3002400",
    "end": "3008700"
  },
  {
    "text": "navigate my map to some other location so you know you can share a lot of this code in fact commonly what you would do",
    "start": "3008700",
    "end": "3014700"
  },
  {
    "text": "is you would take a lot of this graph girl code share it as a common J's function or library and you",
    "start": "3014700",
    "end": "3020110"
  },
  {
    "text": "react AB react native AB wherever else you want to use it so it's pretty easy to get started get get like all the",
    "start": "3020110",
    "end": "3025690"
  },
  {
    "text": "functionality of AWS or the power of AWS and the scalability and the availability that you need with a couple of lines of",
    "start": "3025690",
    "end": "3032350"
  },
  {
    "text": "code a couple of directives and you know app can basically scale as why did you want it to scale so this is cool let's",
    "start": "3032350",
    "end": "3042640"
  },
  {
    "text": "say you know we want to simulate a process let's say we want to do this for a lambda function you know let's emulate",
    "start": "3042640",
    "end": "3047950"
  },
  {
    "text": "a process where we're saying hey I have a bunch of stores and they're sending a bunch of events because people are purchasing so let's emulate that and",
    "start": "3047950",
    "end": "3054730"
  },
  {
    "text": "maybe write it as a lambda function so again what I want to show you the lambda function is you know we're doing the",
    "start": "3054730",
    "end": "3060190"
  },
  {
    "start": "3057000",
    "end": "3117000"
  },
  {
    "text": "exact same thing we're hitting the same app sync API back-end that we have we're using a different library in this case",
    "start": "3060190",
    "end": "3065410"
  },
  {
    "text": "we're not using the absent library and this you can use any open source graphical library because guess what app",
    "start": "3065410",
    "end": "3072070"
  },
  {
    "text": "sayings endpoint is completely graphical compliant so use anything you want we're",
    "start": "3072070",
    "end": "3077680"
  },
  {
    "text": "using this graph killed request library in this case passing in the API key as a header because that's my identity using",
    "start": "3077680",
    "end": "3083380"
  },
  {
    "text": "the same exact mutation here I have a little function which gives me a random coordinates for latitude and longitude",
    "start": "3083380",
    "end": "3089920"
  },
  {
    "text": "and then all I'm doing is I'm passing it in as a request object and saying go do things so if I run this so the way I'm",
    "start": "3089920",
    "end": "3102400"
  },
  {
    "text": "running it is it'll pause every two seconds but it's invoking the lambda and you know it's not very smart it'll just",
    "start": "3102400",
    "end": "3107560"
  },
  {
    "text": "make random coordinates come up but every two seconds it'll go and post try to the lambda which then goes through",
    "start": "3107560",
    "end": "3113110"
  },
  {
    "text": "app saying and it'll see the the app is actually navigating to that location so",
    "start": "3113110",
    "end": "3118420"
  },
  {
    "text": "so far it's picked ocean because I guess we have a lot of people purchasing from the middle of the ocean but I think that's cool okay so we've got lambda you",
    "start": "3118420",
    "end": "3127570"
  },
  {
    "text": "know we've got react we've got react yes we've got react native so we've got cross-platform across browsers and",
    "start": "3127570",
    "end": "3134140"
  },
  {
    "text": "mobile devices and then we can do this from lambda as well so as a back-end process what's really cool is you know",
    "start": "3134140",
    "end": "3140140"
  },
  {
    "text": "your apps and endpoint is not just for clients right you can actually use it for server to server communication and",
    "start": "3140140",
    "end": "3145780"
  },
  {
    "text": "data aggregation so a common use case is hey you have data sitting in dynamo dB but you also want to run rich",
    "start": "3145780",
    "end": "3151840"
  },
  {
    "text": "elastic search it doesn't always have to be a rich client or a client a distributor your customers this could be",
    "start": "3151840",
    "end": "3158140"
  },
  {
    "text": "a service calling another service which is then actually abstracting away or back in stores so let's kill this you",
    "start": "3158140",
    "end": "3167140"
  },
  {
    "text": "know the new hotness is voice controlled interfaces right so Alexa and Lex and",
    "start": "3167140",
    "end": "3173440"
  },
  {
    "text": "that like of things can we hook up draft you all to you know maybe trigger",
    "start": "3173440",
    "end": "3179140"
  },
  {
    "start": "3177000",
    "end": "3237000"
  },
  {
    "text": "through an Alexa so an Alexa skill well let's check it out we've got the same",
    "start": "3179140",
    "end": "3184510"
  },
  {
    "text": "exact interface and see",
    "start": "3184510",
    "end": "3193980"
  },
  {
    "text": "all right there you go okay so this is micro-sim is a it's a skill testing tool",
    "start": "3206670",
    "end": "3212340"
  },
  {
    "text": "so if you don't have an Alexa if you're trying with different accounts you can use this guy to make sure that your",
    "start": "3212340",
    "end": "3219270"
  },
  {
    "text": "skills are working let's see so what if God is a skill that's triggered by the keyword app sink and I've never tried",
    "start": "3219270",
    "end": "3226530"
  },
  {
    "text": "this on stage so we'll see how this goes Alexa tell app sink to purchase okay",
    "start": "3226530",
    "end": "3238680"
  },
  {
    "text": "doing its thing doing its thing look there you go so what happened was this",
    "start": "3238680",
    "end": "3244920"
  },
  {
    "text": "actually invoked the same lambda that was running through my my command line generating a random event random",
    "start": "3244920",
    "end": "3252180"
  },
  {
    "text": "latitude longitude and it then you know sends it to connected subscribers which in this case is my mobile app but if I",
    "start": "3252180",
    "end": "3261030"
  },
  {
    "text": "had zoomed out here I have no idea where to put it but somewhere here it's",
    "start": "3261030",
    "end": "3267000"
  },
  {
    "text": "somewhere on the planet it definitely said somewhere on the planet so cool so what we've done is we've got you know",
    "start": "3267000",
    "end": "3273150"
  },
  {
    "text": "we've built a cross-platform back-end that's leveraging a bunch of data stores",
    "start": "3273150",
    "end": "3278550"
  },
  {
    "text": "and functionality through lambda and it works through basically you know any interface any client you can think of",
    "start": "3278550",
    "end": "3285240"
  },
  {
    "text": "using graph QL so let's go back alright",
    "start": "3285240",
    "end": "3292800"
  },
  {
    "text": "so this is what the architecture looks like now right remember the previous",
    "start": "3292800",
    "end": "3298530"
  },
  {
    "start": "3297000",
    "end": "3357000"
  },
  {
    "text": "slide we had a bunch of infrastructure we were running replaced a pub/sub fleed",
    "start": "3298530",
    "end": "3304440"
  },
  {
    "text": "replaced our web sockets li replaced the api fleet would app sync in there you get scalable secure services highly",
    "start": "3304440",
    "end": "3311820"
  },
  {
    "text": "available services just by using app stink as your as your as your service that you use to go talk to your data",
    "start": "3311820",
    "end": "3317820"
  },
  {
    "text": "sources so the way the flow works in this case we have an Alexis scale or a browser or mobile device doesn't matter",
    "start": "3317820",
    "end": "3323150"
  },
  {
    "text": "they all talk to the same graphical endpoint what app sync does is actually",
    "start": "3323150",
    "end": "3328620"
  },
  {
    "text": "takes the graphical request converts it to whatever the downstream data sources that you're trying to query or write to",
    "start": "3328620",
    "end": "3334860"
  },
  {
    "text": "in this case we were writing to dynamo we had dynamo streams going for lamda putting stuff in there last",
    "start": "3334860",
    "end": "3340170"
  },
  {
    "text": "Church and so you could run rich queries against the last six search and then we had lamda emulating a third-party",
    "start": "3340170",
    "end": "3345660"
  },
  {
    "text": "service which was you know basically saying whether a transaction was processed or not so you know simplifies",
    "start": "3345660",
    "end": "3351359"
  },
  {
    "text": "your stack you get a managed service you don't have to worry about infrastructure don't have to worry about scaling which",
    "start": "3351359",
    "end": "3356579"
  },
  {
    "text": "i think is pretty important because your app could take off very quickly at the same time you know you don't want to",
    "start": "3356579",
    "end": "3363119"
  },
  {
    "start": "3357000",
    "end": "3417000"
  },
  {
    "text": "provision a bunch of infrastructure planning for that level of success either right it's expensive so so",
    "start": "3363119",
    "end": "3369720"
  },
  {
    "text": "reiterating the benefits appsync uses graph QL so your clients can request",
    "start": "3369720",
    "end": "3375150"
  },
  {
    "text": "just the data they want you get nothing more nothing less this is pretty cool because you know you actually control the bandwidth usage you",
    "start": "3375150",
    "end": "3383490"
  },
  {
    "text": "can get data from many resources with a single request again this is super important because you may have different",
    "start": "3383490",
    "end": "3388589"
  },
  {
    "text": "data sources different tables disparate data sources and so single query we're using the right resolvers or using you",
    "start": "3388589",
    "end": "3395849"
  },
  {
    "text": "know batch resolvers to solve n plus one you can get data in a single request without actually having letting your",
    "start": "3395849",
    "end": "3401490"
  },
  {
    "text": "application be aware of all these different data sources right so you get a very simple common interface you your",
    "start": "3401490",
    "end": "3407579"
  },
  {
    "text": "front-end developers control the actual interaction with service and then you don't have to worry about the backends",
    "start": "3407579",
    "end": "3413430"
  },
  {
    "text": "themselves documenting API is is pretty cool the graphical as well because you",
    "start": "3413430",
    "end": "3418859"
  },
  {
    "start": "3417000",
    "end": "3477000"
  },
  {
    "text": "know most developers me included don't really like write writing documentation or graph field does is it actually lets",
    "start": "3418859",
    "end": "3425490"
  },
  {
    "text": "you write inline documentation which shows up automatically in the tool using introspection so this is pretty cool",
    "start": "3425490",
    "end": "3432359"
  },
  {
    "text": "because you can actually very quickly document api's and make sure that you know the next person that's coming along and using API has you know great",
    "start": "3432359",
    "end": "3439710"
  },
  {
    "text": "documentation they can use to continue has a strong type system which again",
    "start": "3439710",
    "end": "3444930"
  },
  {
    "text": "lets you validate requests as they come in to your graphical endpoint so you know that you're not going to be servicing arbitrary requests you don't",
    "start": "3444930",
    "end": "3451950"
  },
  {
    "text": "have to worry about things like sequel injection this is also great because from a client perspective whenever",
    "start": "3451950",
    "end": "3458040"
  },
  {
    "text": "you're developing you there's actually tools that can understand the schema they can validate the kotya writing at",
    "start": "3458040",
    "end": "3464460"
  },
  {
    "text": "compile time which improves type safety improves your code reduces bugs and you",
    "start": "3464460",
    "end": "3471089"
  },
  {
    "text": "can you can have you know you can actually operate against the abstinent point against the",
    "start": "3471089",
    "end": "3476270"
  },
  {
    "text": "graphical endpoint using a strong type system and finally it helps us simply API evolution backwards compatibility",
    "start": "3476270",
    "end": "3483680"
  },
  {
    "start": "3477000",
    "end": "3544000"
  },
  {
    "text": "really isn't that much of a problem anymore because you have a single API but you just your API basically works on",
    "start": "3483680",
    "end": "3490700"
  },
  {
    "text": "types not on separate endpoints like breast endpoints what you would do is if you wanted a version that you would",
    "start": "3490700",
    "end": "3496070"
  },
  {
    "text": "stand up yet another version with a different version header or something however some way to identify it but the",
    "start": "3496070",
    "end": "3501440"
  },
  {
    "text": "graph girl you just keep evolving the types based on the fields you need and then your clients actually own the",
    "start": "3501440",
    "end": "3506780"
  },
  {
    "text": "response structure the selection said that's coming back which help so you can",
    "start": "3506780",
    "end": "3511850"
  },
  {
    "text": "on the server you can actually use that to determine if some fields are being used so you can deprecated them get rid of them you know you have a lot of",
    "start": "3511850",
    "end": "3518090"
  },
  {
    "text": "flexibility on the server side so it's all we have it's a new service we would love for you",
    "start": "3518090",
    "end": "3524690"
  },
  {
    "text": "guys to use it give us feedback you can sign up at AWS Amazon TOCOM slash app sync it's a preview service so you",
    "start": "3524690",
    "end": "3532100"
  },
  {
    "text": "know submit a request tell us what you use cases we're looking at these very frequently and we'll get back to you",
    "start": "3532100",
    "end": "3538520"
  },
  {
    "text": "with access as soon as we can and that's all we have thank you guys you've been great",
    "start": "3538520",
    "end": "3544720"
  }
]