[
  {
    "text": "test test all right time is four o'clock so let's get started and first of all I",
    "start": "1370",
    "end": "7379"
  },
  {
    "text": "guess good laughter never won and they're welcome to this talk on how to apply the principles of chaos",
    "start": "7379",
    "end": "12570"
  },
  {
    "text": "engineering to servers we can spend a few minutes to talk about what is chaos",
    "start": "12570",
    "end": "17850"
  },
  {
    "text": "engineering and what it is not and some of the new challenges that the service paradigm has presented to the current",
    "start": "17850",
    "end": "24720"
  },
  {
    "text": "set of tools and practices that we have for doing chaos engineering and how maybe to treat some of these current",
    "start": "24720",
    "end": "30420"
  },
  {
    "text": "practices to make them work for service",
    "start": "30420",
    "end": "34669"
  },
  {
    "text": "technology so after the talk or the slides going to be available on",
    "start": "37640",
    "end": "42690"
  },
  {
    "text": "SlideShare and the recording will be pushed published on the YouTube within 48 hours and you can find links to both",
    "start": "42690",
    "end": "48539"
  },
  {
    "text": "on my blog as well ok check this out so",
    "start": "48539",
    "end": "54770"
  },
  {
    "text": "let's start with what is chaos engineering if we go to principles of",
    "start": "54770",
    "end": "60030"
  },
  {
    "text": "chaos org you find this nice definition that says chaos engineering is the",
    "start": "60030",
    "end": "65400"
  },
  {
    "text": "discipline of experimenting on a distributed system in order to build confidence in the systems that",
    "start": "65400",
    "end": "72210"
  },
  {
    "text": "capability to withstand turbulent conditions in production now that sounds great and it talks about these to be",
    "start": "72210",
    "end": "78540"
  },
  {
    "text": "these systems and talks about building confidence but personally I still find it to be quite vague in terms of what do",
    "start": "78540",
    "end": "85020"
  },
  {
    "text": "we actually do in practice personally I like to use analogies and I think the",
    "start": "85020",
    "end": "90390"
  },
  {
    "text": "perfect analogy for chaos engineering is vaccination and you can't talk about vaccination without going all the way",
    "start": "90390",
    "end": "96990"
  },
  {
    "text": "back to smallpox which was easily one of the most deadly diseases that we have ever encountered as a species it was",
    "start": "96990",
    "end": "104159"
  },
  {
    "text": "killing people in the hundreds of thousands every year in Europe alone until about 1798 when at the journal",
    "start": "104159",
    "end": "111960"
  },
  {
    "text": "create the first vaccination and less than 200 years later we were able to",
    "start": "111960",
    "end": "117420"
  },
  {
    "text": "eradicate smallpox at a global scale today we have over 25 different",
    "start": "117420",
    "end": "123079"
  },
  {
    "text": "vaccinations for different infectious diseases in the UK by the time you're 14",
    "start": "123079",
    "end": "128729"
  },
  {
    "text": "you will have had at least 20 vaccinations already and vaccinations has become",
    "start": "128729",
    "end": "133800"
  },
  {
    "text": "most effective defense against infectious diseases and it works by injecting ourselves with a very small",
    "start": "133800",
    "end": "139740"
  },
  {
    "text": "dose of the disease not enough to make us sick or anything but enough to trigger our body's autoimmune system to",
    "start": "139740",
    "end": "146490"
  },
  {
    "text": "start identifying this foreign agent as danger and to start building defense against it before we actually come into",
    "start": "146490",
    "end": "152310"
  },
  {
    "text": "full contact with the disease I think that's where we can do a lot of",
    "start": "152310",
    "end": "157380"
  },
  {
    "text": "parallels with chaos engineering whereby we are using controlled experiments in",
    "start": "157380",
    "end": "162810"
  },
  {
    "text": "order to inject failures into the system deliberately so that we can learn about how the system fails under those failure",
    "start": "162810",
    "end": "169920"
  },
  {
    "text": "conditions before they actually happens in production in an uncontrolled fashion",
    "start": "169920",
    "end": "175170"
  },
  {
    "text": "so now we share a time to understand how the system behaves and then to go back",
    "start": "175170",
    "end": "180570"
  },
  {
    "text": "and build our systems to be more resilient to harden our application against those failures and in time as we",
    "start": "180570",
    "end": "188190"
  },
  {
    "text": "repeat this process and iteratively harden application against different forms of failures we can also start to",
    "start": "188190",
    "end": "195030"
  },
  {
    "text": "build confidence that our system will actually be fine in production regardless what turbulent conditions",
    "start": "195030",
    "end": "200760"
  },
  {
    "text": "going to face so I think it's fair to say that chaos engineering is the vaccines for frailties in modern",
    "start": "200760",
    "end": "207840"
  },
  {
    "text": "software which tend to be a disputed and B runs in the cloud so my name is yen",
    "start": "207840",
    "end": "215100"
  },
  {
    "text": "tre I'm a principal engineer at the zone and as of July this year I'm also one of",
    "start": "215100",
    "end": "220140"
  },
  {
    "text": "the a diverse community heroes that focuses on the server space I'm also the",
    "start": "220140",
    "end": "225270"
  },
  {
    "text": "author for the production-ready servlets video caused by Manning where I share a lot of the lessons that I have learned",
    "start": "225270",
    "end": "231239"
  },
  {
    "text": "by running and operating lambda and service architectures in production and",
    "start": "231239",
    "end": "236700"
  },
  {
    "text": "in my spare time also a very active blogger and I go to many conferences and user groups to talk about many other",
    "start": "236700",
    "end": "243120"
  },
  {
    "text": "things that I've learned about servers so the zone is sports streaming platform",
    "start": "243120",
    "end": "248550"
  },
  {
    "text": "we have a monthly subscription fee like Netflix except of except ye or no",
    "start": "248550",
    "end": "254400"
  },
  {
    "text": "streaming movies your streaming live sporting events instead and of which we have over 40 different sports and over",
    "start": "254400",
    "end": "260700"
  },
  {
    "text": "200 different leagues all around the world and we have recently launched in the US and we are streaming boxing",
    "start": "260700",
    "end": "266910"
  },
  {
    "text": "matches now in total we are available in seven different countries and over 30",
    "start": "266910",
    "end": "272160"
  },
  {
    "text": "different devices and at peak we have around a million concurrent viewers for any given sporting event that we are",
    "start": "272160",
    "end": "278580"
  },
  {
    "text": "streaming and because everything we stream our life and that we can't just",
    "start": "278580",
    "end": "283740"
  },
  {
    "text": "turn around to our customer and say sorry guys we are down please come back in half an hour",
    "start": "283740",
    "end": "289140"
  },
  {
    "text": "when your event has finished so that clearly is not going to fly of anybody which is why we Cillian see is very high",
    "start": "289140",
    "end": "296250"
  },
  {
    "text": "up on the lesser priorities for us and given that our vacation runs in both containers and lambda functions and",
    "start": "296250",
    "end": "302580"
  },
  {
    "text": "given my personal interest in the servlet space I spend a lot of time thinking about how can I take some",
    "start": "302580",
    "end": "308880"
  },
  {
    "text": "discouraged aces that we have with chaos engineering that doesn't quite work with servlets just yet and make them work and",
    "start": "308880",
    "end": "315270"
  },
  {
    "text": "how I use them to help me make my service application more resilient so",
    "start": "315270",
    "end": "320780"
  },
  {
    "text": "before we go into that I also want to share with you some of my observations about this space of chaos engineering",
    "start": "320780",
    "end": "327720"
  },
  {
    "text": "whereby often when I try to read about what other people are doing I'm seeing blog posts with titles like breaking",
    "start": "327720",
    "end": "334770"
  },
  {
    "text": "face on purpose the joy of destruction which worries me a lot because it just",
    "start": "334770",
    "end": "340530"
  },
  {
    "text": "put so much emphasis on breaking something and nothing about why we're doing it our goal is not actually end up",
    "start": "340530",
    "end": "347820"
  },
  {
    "text": "with a broken system in production it's the opposite we want systems running in production that are resilient they can",
    "start": "347820",
    "end": "353670"
  },
  {
    "text": "stay up even when bad things happen and we put so much emphasis on the action of",
    "start": "353670",
    "end": "359700"
  },
  {
    "text": "injective failures is easy to conflate them with the outcome that you're hoping to achieve the point is to learn how",
    "start": "359700",
    "end": "368190"
  },
  {
    "text": "your system fails before they actually happen in production to the knowledge they have a chance to make your system",
    "start": "368190",
    "end": "373800"
  },
  {
    "text": "better to put in the engineering effort to hard on your system against those failures and in time you buy it by doing",
    "start": "373800",
    "end": "381180"
  },
  {
    "text": "this you can repeatedly doing this and you can start to build confidence that your system will actually been fine and",
    "start": "381180",
    "end": "386490"
  },
  {
    "text": "even if we are intentionally breaking things in order to learn how our systems first breaking things itself is not the",
    "start": "386490",
    "end": "393420"
  },
  {
    "text": "goal again if we go back to the principles of chaos org which is",
    "start": "393420",
    "end": "399270"
  },
  {
    "text": "generally one of the best places you can go to learn about chaos engineering your outlines four simple steps that anyone",
    "start": "399270",
    "end": "405150"
  },
  {
    "text": "any one of us can follow to start doing care of experiments ourselves step one",
    "start": "405150",
    "end": "411060"
  },
  {
    "text": "we need to know what normal actually looks like for our system what does normal working condition looks like but",
    "start": "411060",
    "end": "419789"
  },
  {
    "text": "if everything is on fire all the time and you're constantly firefighting and everything you come in the different",
    "start": "419789",
    "end": "425699"
  },
  {
    "text": "kind of problem is breaking things then I'm afraid we don't have a steady-state and you're not ready to start doing",
    "start": "425699",
    "end": "431879"
  },
  {
    "text": "chaos and chaos experiments for the same reason that you wouldn't fascinate someone if you know their immune system",
    "start": "431879",
    "end": "438780"
  },
  {
    "text": "is really broken and vaccination is just going to do them more harm than good but",
    "start": "438780",
    "end": "444479"
  },
  {
    "text": "if you want the lucky ones and you do have a working system and you have you know where your steady-state looks like",
    "start": "444479",
    "end": "449879"
  },
  {
    "text": "then now you can start to design scenarios and hypothesize given some failure happens in the system somewhere",
    "start": "449879",
    "end": "456180"
  },
  {
    "text": "how is my system going to behave and here you want to explore all kind of",
    "start": "456180",
    "end": "461699"
  },
  {
    "text": "different scenarios including scenarios where you just have no idea what has",
    "start": "461699",
    "end": "467580"
  },
  {
    "text": "going to happen how a system is going to behave and those containers are great for learning and finding weaknesses in",
    "start": "467580",
    "end": "473819"
  },
  {
    "text": "your system very very quickly but given that you don't actually know what's going to happen maybe you didn't want to",
    "start": "473819",
    "end": "479400"
  },
  {
    "text": "go straight to production with those kind of experiments for good reason right and experiments that actually",
    "start": "479400",
    "end": "486330"
  },
  {
    "text": "graduate all the way to production they need to be carefully considered planned and carefully executed and by the time",
    "start": "486330",
    "end": "493110"
  },
  {
    "text": "we hit production you should have a very good confidence that your system is actually going to be fine",
    "start": "493110",
    "end": "498120"
  },
  {
    "text": "it's going to be the handle the failure properly and you only get there based on our knowledge are you able to gain the",
    "start": "498120",
    "end": "504449"
  },
  {
    "text": "understanding about a system that able to gain by running those experiments in the environment outside of production",
    "start": "504449",
    "end": "510210"
  },
  {
    "text": "where the stakes are not so high so run your experiments in dev environment in staging run experiments they've been",
    "start": "510210",
    "end": "516990"
  },
  {
    "text": "staging where you can try our all the scenarios that are potentially risky that you don't want to do them in",
    "start": "516990",
    "end": "522300"
  },
  {
    "text": "production right away where you can learn so much about how a system behaves just as the goal of resonation is not",
    "start": "522300",
    "end": "530399"
  },
  {
    "text": "actually catch disease the goal of doing care of an experiments not actually hurt your",
    "start": "530399",
    "end": "536730"
  },
  {
    "text": "production environment either and if you know your system is going to break and you do any production anyway then that's",
    "start": "536730",
    "end": "543600"
  },
  {
    "text": "not what we call a chaos experiment at all for one you haven't learned anything",
    "start": "543600",
    "end": "548670"
  },
  {
    "text": "didn't know before doing that you knew it's going to break and you broke congratulations you learned nothing well hopefully you",
    "start": "548670",
    "end": "555450"
  },
  {
    "text": "learn not to do again all you have done in that case we have just anchored your",
    "start": "555450",
    "end": "560520"
  },
  {
    "text": "users and damage your reputation and your brand so please do not make that very silly mistake and the next step",
    "start": "560520",
    "end": "568740"
  },
  {
    "text": "would be to actually then go ahead inject some failures into your system and this is where Netflix is simian army",
    "start": "568740",
    "end": "575430"
  },
  {
    "text": "is a great tool for doing that especially if your application runs on VMs or runs on containers perhaps and",
    "start": "575430",
    "end": "581640"
  },
  {
    "text": "the engineers uh Netflix also publish a free ebook that you can download from O'Reilly using this link where it talks",
    "start": "581640",
    "end": "588750"
  },
  {
    "text": "about how the engineers and Netflix how they've run game day is where everyone gathers together to brainstorm how the",
    "start": "588750",
    "end": "595050"
  },
  {
    "text": "system might fail under the difference failure conditions and how what kind of experiments they can design and it also",
    "start": "595050",
    "end": "601589"
  },
  {
    "text": "talks about the process by which they communicate with each other in terms of why experiments are going to happen what",
    "start": "601589",
    "end": "607410"
  },
  {
    "text": "are you gonna test and then how they go about planning and executing those experiments as well so whilst running",
    "start": "607410",
    "end": "614820"
  },
  {
    "text": "your experiment you're keeping an eye on a dashboard to make sure that at a top level at least there's nothing really",
    "start": "614820",
    "end": "620040"
  },
  {
    "text": "bad happening and if there is then stop the experiment right away and afterwards you go through your metrics in more",
    "start": "620040",
    "end": "626490"
  },
  {
    "text": "detail and try to look for evidence whether or not your steady state was impacted by the failure that you",
    "start": "626490",
    "end": "632970"
  },
  {
    "text": "injected and if you are able to find a weakness great something felt they",
    "start": "632970",
    "end": "639029"
  },
  {
    "text": "didn't expect now's the time to go ahead and fix it before we actually happens for real and since the experiments",
    "start": "639029",
    "end": "648959"
  },
  {
    "text": "sister-sister go is not actually her production we to make sure the experiments that we are running are",
    "start": "648959",
    "end": "654240"
  },
  {
    "text": "actually done in a controlled manner and which is why containment and blast radius should be front and center of",
    "start": "654240",
    "end": "660270"
  },
  {
    "text": "your thinking at all times especially we want if you want to move your experiments into the production",
    "start": "660270",
    "end": "665610"
  },
  {
    "text": "environment the point again is not actually her production so how do we actually keep those experiments under",
    "start": "665610",
    "end": "672150"
  },
  {
    "text": "control I've been one the most important thing to do is make sure that everybody",
    "start": "672150",
    "end": "677880"
  },
  {
    "text": "involved is communicated so that if your experiment can potentially impact the systems owned by a different team make",
    "start": "677880",
    "end": "684750"
  },
  {
    "text": "sure that they are aware of what you're doing and that they're okay and they're ready for it it should never be surprised to somebody",
    "start": "684750",
    "end": "691230"
  },
  {
    "text": "else that where your experiments end up hurting their systems so I shouldn't have the committee office one day look",
    "start": "691230",
    "end": "698250"
  },
  {
    "text": "in my dashboard and everything is red and paratime I spent hours investigating what the hell's going on it turns out",
    "start": "698250",
    "end": "704190"
  },
  {
    "text": "wait a minute you guys are in some experiment and that's why all my systems are broken oh it's great now that we've",
    "start": "704190",
    "end": "710280"
  },
  {
    "text": "identified some cascade failures we can go back and fix it but maybe you should have told me in the first place so",
    "start": "710280",
    "end": "715350"
  },
  {
    "text": "they'll know what to look careful I supposed to waste all this time trying to dig around and see what's going on",
    "start": "715350",
    "end": "721220"
  },
  {
    "text": "and you also want to make sure that you run your experiments during office hours when people are in there you find our",
    "start": "721220",
    "end": "727620"
  },
  {
    "text": "laptops and they're ready to deal with any unexpected fallout and if you have",
    "start": "727620",
    "end": "734040"
  },
  {
    "text": "important long studies coming up for example leave your Netflix and you're launching the new narcos mexico's TV",
    "start": "734040",
    "end": "741210"
  },
  {
    "text": "show which is great by the way thank you if you haven't already I've done my share already spent so much time",
    "start": "741210",
    "end": "747420"
  },
  {
    "text": "watching a last week is amazing or in the case of the zone if a boxing match is probably happened then avoid those",
    "start": "747420",
    "end": "753990"
  },
  {
    "text": "important days important times at all cost you don't want to go to production and take unnecessary risk and taking",
    "start": "753990",
    "end": "760500"
  },
  {
    "text": "down system when there's something really important is happening there's a time for taking risk for the sake of",
    "start": "760500",
    "end": "765570"
  },
  {
    "text": "learning but then there's also time for good old common sense and not take any unnecessary risk that you don't have to",
    "start": "765570",
    "end": "773480"
  },
  {
    "text": "you also want to make sure that you make the smallest change possible they're still allowed to detect and decide and",
    "start": "773480",
    "end": "780150"
  },
  {
    "text": "so improve your hypothesis but not risk entirely taking down the entire system",
    "start": "780150",
    "end": "786150"
  },
  {
    "text": "so this could be killing one serve at a time or running experiments against one",
    "start": "786150",
    "end": "791430"
  },
  {
    "text": "function at the time or making chicken jerky failures into only a small percentage of requests and doing only",
    "start": "791430",
    "end": "798150"
  },
  {
    "text": "and doing them only one I'm sorry in only one region and the timers",
    "start": "798150",
    "end": "803209"
  },
  {
    "text": "and she also wrote back plan ready just in case things to go bad and you want to",
    "start": "803209",
    "end": "808800"
  },
  {
    "text": "restore experiment right away and then brought back whatever changes that's been done already and last but probably",
    "start": "808800",
    "end": "815310"
  },
  {
    "text": "the most important thing is don't go stone star in production there's just so much you can learn about running",
    "start": "815310",
    "end": "820589"
  },
  {
    "text": "experiments in a staging environment and give yourself the time and and the space we get used to the process of designing",
    "start": "820589",
    "end": "827970"
  },
  {
    "text": "experiments or planning executing them and even the big boys do Netflix and Hulu and Amazon of this world who are",
    "start": "827970",
    "end": "834600"
  },
  {
    "text": "constantly running in chaos experiments in production they didn't start the experiments in production on day one",
    "start": "834600",
    "end": "839850"
  },
  {
    "text": "either and you shouldn't and rust Mouse also talks about how chaos engineering",
    "start": "839850",
    "end": "846630"
  },
  {
    "text": "is not just about just testing your infrastructure it can be applied to your entire stack that covers the people and",
    "start": "846630",
    "end": "853380"
  },
  {
    "text": "processes that you have your application the platform and infrastructure that your platform runs on top of if anything",
    "start": "853380",
    "end": "860670"
  },
  {
    "text": "the people and process that you have are oftentimes the first thing that goes judging by the number of postmodern",
    "start": "860670",
    "end": "866910"
  },
  {
    "text": "instant reports I've read they start with operator did X and then bad things",
    "start": "866910",
    "end": "872279"
  },
  {
    "text": "happened in fact one of the most important lessons I learned from verse is that when you're talking to the",
    "start": "872279",
    "end": "880560"
  },
  {
    "text": "business don't even use the word chaos again it it just puts the emphasis on",
    "start": "880560",
    "end": "889829"
  },
  {
    "text": "the wrong things and just as we just talked about we want to make sure that our experiments are",
    "start": "889829",
    "end": "895470"
  },
  {
    "text": "done in a controlled manner and that is the exact opposite of chaos right so when you're talking to the business",
    "start": "895470",
    "end": "901470"
  },
  {
    "text": "about what UTC is trying to do call it what it actually is don't call it chaos engineering call it continuous",
    "start": "901470",
    "end": "908040"
  },
  {
    "text": "resilience testing and when you frame what you're trying to",
    "start": "908040",
    "end": "914089"
  },
  {
    "text": "achieve in those words it makes it easier for a business to get behind you because I'm sure they share the common",
    "start": "914089",
    "end": "919729"
  },
  {
    "text": "goal of warning the wanting the system to be more resilient when you don't mention that what you mentioned in world",
    "start": "919729",
    "end": "925879"
  },
  {
    "text": "chaos it just freaks people out they just think oh you just want to go ahead and pray production and that's not what",
    "start": "925879",
    "end": "931129"
  },
  {
    "text": "we actually want in terms of the service paradigm and the similar tools that we",
    "start": "931129",
    "end": "937159"
  },
  {
    "text": "can really have the snub of interesting challenges that arise with the service paradigm",
    "start": "937159",
    "end": "942349"
  },
  {
    "text": "so I mentioned FX is simian army to earlier within that suite of tools you",
    "start": "942349",
    "end": "948529"
  },
  {
    "text": "have the latency monkey that can inject latency to simulate slow response from",
    "start": "948529",
    "end": "953839"
  },
  {
    "text": "API call and you also have chaos monkey that can kill each two instances randomly you have also chaos gorilla",
    "start": "953839",
    "end": "961009"
  },
  {
    "text": "that can kill an entire available availability zone and finally chaos Kong can just kill a whole region in AWS and",
    "start": "961009",
    "end": "968949"
  },
  {
    "text": "I also seen several attempts are wrapping the logic of chaos monkey into a lambda function so that you don't have",
    "start": "968949",
    "end": "975439"
  },
  {
    "text": "to run and pay for server 24/7 just today you can occasionally use it to kill other servers but that's not what",
    "start": "975439",
    "end": "982699"
  },
  {
    "text": "I'm interested in I'm interested in how can I take the practices of chaos engineering and apply them to a paradigm",
    "start": "982699",
    "end": "989959"
  },
  {
    "text": "where I don't have access to the servers that runs my code and therefore there's nothing there's no server that I can",
    "start": "989959",
    "end": "995899"
  },
  {
    "text": "actually kill but then chaos engineer is never about killing server to begin with",
    "start": "995899",
    "end": "1002339"
  },
  {
    "text": "so is what we do oftentimes to just test the infrastructure when application runs",
    "start": "1002339",
    "end": "1007899"
  },
  {
    "text": "on servers that we have to manage and we gain access but chaos engine is about",
    "start": "1007899",
    "end": "1013119"
  },
  {
    "text": "identifying witnesses before they manifest in system-wide aberrant behaviors and we shouldn't confuse the",
    "start": "1013119",
    "end": "1019539"
  },
  {
    "text": "principle or why we do something with the action that we do in order to apply those principles in our current in our",
    "start": "1019539",
    "end": "1025899"
  },
  {
    "text": "context so having worked on several non-trivial service applications in the",
    "start": "1025899",
    "end": "1032110"
  },
  {
    "text": "past including migrating a social network to run pretty much entirely on servers one of the key lessons I've",
    "start": "1032110",
    "end": "1038949"
  },
  {
    "text": "learned that process is that there are just way more inherent chaos and complexity inside a service application you have",
    "start": "1038949",
    "end": "1048129"
  },
  {
    "text": "smaller units of deployment which is great for many many reasons that we don't we're not gonna go into in this",
    "start": "1048129",
    "end": "1053649"
  },
  {
    "text": "session but at the same time you also end up with a lot more of them and that means there are now more boundaries that",
    "start": "1053649",
    "end": "1060100"
  },
  {
    "text": "need to harden around instead of hardening your application around the application itself or with the",
    "start": "1060100",
    "end": "1065350"
  },
  {
    "text": "containers it runs on or the VM now you have the heart and the boundary for every single function that computer put",
    "start": "1065350",
    "end": "1071769"
  },
  {
    "text": "that together makes up your application and every function need to be correctly",
    "start": "1071769",
    "end": "1077259"
  },
  {
    "text": "configured and given the right iëm permissions which is both an opportunity because now we have refined more",
    "start": "1077259",
    "end": "1084100"
  },
  {
    "text": "fine-grained control over every aspect of application especially from the security point of view but it's also a",
    "start": "1084100",
    "end": "1090309"
  },
  {
    "text": "risk because now there are more things that we need to configure and therefore more opportunities from this",
    "start": "1090309",
    "end": "1095350"
  },
  {
    "text": "configuration incorrect timeout settings for functions or incorrect IEM permissions and so on and people such as",
    "start": "1095350",
    "end": "1102970"
  },
  {
    "text": "myself who has been building things reserve list we also just want to move away from Hampton managing one service",
    "start": "1102970",
    "end": "1108549"
  },
  {
    "text": "at all so you tend to find that we are using a lot of managed services with lambda and every single one of those",
    "start": "1108549",
    "end": "1115929"
  },
  {
    "text": "services have got his own set of failure modes some of which are documented but many of which are not because of tied to",
    "start": "1115929",
    "end": "1122499"
  },
  {
    "text": "implementation details and even those documented behaviors that's probably not good way for us would really verify them",
    "start": "1122499",
    "end": "1129279"
  },
  {
    "text": "the behavior until something bad actually happens and then there's everything the platform does for you in",
    "start": "1129279",
    "end": "1136090"
  },
  {
    "text": "terms of scheduling containers scaling polling Kinesis and then calling your function of the events or retrying Fairy",
    "start": "1136090",
    "end": "1142869"
  },
  {
    "text": "invocations all of those features and capabilities have their own set of failure modes as well and again some of",
    "start": "1142869",
    "end": "1149230"
  },
  {
    "text": "which may be documented that many of which are not and that they are prone to change without notice anyway because",
    "start": "1149230",
    "end": "1154840"
  },
  {
    "text": "they're all platform level implementation details and oftentimes when something does go wrong we don't",
    "start": "1154840",
    "end": "1161559"
  },
  {
    "text": "really have a meaningful alternative than to just wait for a table to fix the problem which to their credit they do a",
    "start": "1161559",
    "end": "1167259"
  },
  {
    "text": "very good job compared to all the on premises solution I've seen the past they tend to recover for many issues a",
    "start": "1167259",
    "end": "1173230"
  },
  {
    "text": "lot faster that's it there are still plenty of",
    "start": "1173230",
    "end": "1178610"
  },
  {
    "text": "witnesses in my own code and how my code dudes with his dependencies where I can",
    "start": "1178610",
    "end": "1184460"
  },
  {
    "text": "use experiments of quickly identify weaknesses in those for example maybe",
    "start": "1184460",
    "end": "1190310"
  },
  {
    "text": "I'm not handling timeouts when I'm talking to the party services properly so that a slow response from a third",
    "start": "1190310",
    "end": "1197060"
  },
  {
    "text": "party system can actually cause my function to get timed out and but by lambda by lambda service and in turn",
    "start": "1197060",
    "end": "1203780"
  },
  {
    "text": "create a returns a 502 my caller and start the quarter start early and create a cascade failure in the whole coaching",
    "start": "1203780",
    "end": "1210280"
  },
  {
    "text": "or maybe I'm missing some error handling in my code when I'm talking to third-party systems in cases where if a",
    "start": "1210280",
    "end": "1218510"
  },
  {
    "text": "thirty first dependency is now available I could have returned me if a cache response or maybe a static default value",
    "start": "1218510",
    "end": "1224360"
  },
  {
    "text": "and maybe I'm missing some of those missing those d44 pacts in case it's way",
    "start": "1224360",
    "end": "1229430"
  },
  {
    "text": "if a motive region set up perhaps you're also missing a trick band or having regional fair over as well but by far",
    "start": "1229430",
    "end": "1236870"
  },
  {
    "text": "the most common issue of running through in production tends to be performance and latency related and they can be",
    "start": "1236870",
    "end": "1242630"
  },
  {
    "text": "symptomatic of a whole range of other underlying issues it could be a doubles having a networking problem it could be",
    "start": "1242630",
    "end": "1249650"
  },
  {
    "text": "you're talking to a server that is just overloaded or having very long GC garbage collection pause and you tend to",
    "start": "1249650",
    "end": "1256940"
  },
  {
    "text": "find a lot of the code there are a lot of coders sorry you tend to find there are a lot of implicit assumptions about",
    "start": "1256940",
    "end": "1263000"
  },
  {
    "text": "response time based on what we have experienced in the past and we're not very good at thinking about those",
    "start": "1263000",
    "end": "1269150"
  },
  {
    "text": "exceptional cases when said response times start to deviate from what from the norm that we have seen with those",
    "start": "1269150",
    "end": "1275300"
  },
  {
    "text": "services and we can use latency injection to help us identify those weaknesses to find those implicit",
    "start": "1275300",
    "end": "1281330"
  },
  {
    "text": "assumptions that we have in our code using experiments and again following",
    "start": "1281330",
    "end": "1286760"
  },
  {
    "text": "the simple four steps step one we know what normal locks are for our system and what metrics we use to define that the",
    "start": "1286760",
    "end": "1293900"
  },
  {
    "text": "Manatee depends entirely on what type of system you're building some common candidates including your 95 or 99% are",
    "start": "1293900",
    "end": "1301790"
  },
  {
    "text": "latencies or error counts and if you're building a messaging based system maybe the backlog size is a good indicator",
    "start": "1301790",
    "end": "1307970"
  },
  {
    "text": "that maybe you're falling behind you might also use instead of using",
    "start": "1307970",
    "end": "1313240"
  },
  {
    "text": "absolute County might also use youth which can be defined as the percentage of requests that you were able to",
    "start": "1313240",
    "end": "1319510"
  },
  {
    "text": "respond to with a related code that's not 500 so once you've defined what normal looks",
    "start": "1319510",
    "end": "1325780"
  },
  {
    "text": "are for your system you can now to start to design scenarios on how the system might fail giving this some in failures",
    "start": "1325780",
    "end": "1333010"
  },
  {
    "text": "that you can inject in this case there's some specific consideration we need to make for a service application for",
    "start": "1333010",
    "end": "1339820"
  },
  {
    "text": "example even your function can you're from your lambda functions can now run for 15 minutes now but API Gabri has got",
    "start": "1339820",
    "end": "1346510"
  },
  {
    "text": "a hard time out of 29 seconds so after 29 seconds API Gary is going to timeout",
    "start": "1346510",
    "end": "1351550"
  },
  {
    "text": "the request even if your functions still running in the pit in the background so your caller is going to get back a 500 response and",
    "start": "1351550",
    "end": "1358920"
  },
  {
    "text": "then there's the effective KO starts if you have one function talking to another of our api gateway even if you know the",
    "start": "1358920",
    "end": "1366220"
  },
  {
    "text": "time are setting for the other function by the time you consider the coaster time and whatever latency overhead api",
    "start": "1366220",
    "end": "1373660"
  },
  {
    "text": "layer layer actually introduces then the actual response time you can experience from the calling function can be a lot",
    "start": "1373660",
    "end": "1379840"
  },
  {
    "text": "longer than a timer on the other function so you can't make hard assumptions about the maximum response",
    "start": "1379840",
    "end": "1385120"
  },
  {
    "text": "time you can expect based on your knowledge about the timer setting for the other function behind the API",
    "start": "1385120",
    "end": "1390190"
  },
  {
    "text": "gateway and the rule of thumb in microservices is the user short timeout",
    "start": "1390190",
    "end": "1396220"
  },
  {
    "text": "and that your time our strategy to give your requests the best chance to succeed",
    "start": "1396220",
    "end": "1401850"
  },
  {
    "text": "but not at the cost of waiting for so long that your function is served gets",
    "start": "1401850",
    "end": "1407470"
  },
  {
    "text": "timed out before we hear spec from the other service you're talking to you in which case you can end up creating a",
    "start": "1407470",
    "end": "1412720"
  },
  {
    "text": "cascade failures you know in your core chain and this is where I find trying to pick the right timeout value",
    "start": "1412720",
    "end": "1418870"
  },
  {
    "text": "it's very tricky when they are too short you're not giving the request the best chances to see so suppose that we've got",
    "start": "1418870",
    "end": "1425410"
  },
  {
    "text": "a function with five seconds left and I set my timer for order to clear out bound requests to three seconds then",
    "start": "1425410",
    "end": "1431440"
  },
  {
    "text": "even though I've got five seconds I'm only making use of those three seconds although they can be too long and if so",
    "start": "1431440",
    "end": "1438880"
  },
  {
    "text": "in the same example my functions got five seconds left Asian but my time out for the request is",
    "start": "1438880",
    "end": "1444610"
  },
  {
    "text": "six seconds so before so if there are service I'm talking to having a really slow day then my function is gonna get",
    "start": "1444610",
    "end": "1451090"
  },
  {
    "text": "timed out by lamda before here back and again that turns into a 502 my caller",
    "start": "1451090",
    "end": "1456720"
  },
  {
    "text": "and this case even worse when you consider consider that many of our",
    "start": "1456720",
    "end": "1462010"
  },
  {
    "text": "functions do multiple API calls in one invocation a simple example could be I make a call to dynamo DB get some beta",
    "start": "1462010",
    "end": "1469030"
  },
  {
    "text": "pack loot a tea somehow and then make a put against an I'm a DB to save the changes and then I'm gonna publish an",
    "start": "1469030",
    "end": "1475570"
  },
  {
    "text": "event into a keynesian to say hey guys some interesting event just happened maybe you're interested in that and I",
    "start": "1475570",
    "end": "1482200"
  },
  {
    "text": "see two common strategies on how to combat this situation one is such that I've got a function with six second",
    "start": "1482200",
    "end": "1488560"
  },
  {
    "text": "timeout and I'm making three different API calls so I'm gonna divide my six seconds equally so the every request",
    "start": "1488560",
    "end": "1494680"
  },
  {
    "text": "gets two seconds in this case I can see that overall we've got enough time to make all three requests but because one",
    "start": "1494680",
    "end": "1502570"
  },
  {
    "text": "of the requests was talk longer than two seconds it gets timed out so we're not giving our requests the best chance to",
    "start": "1502570",
    "end": "1508390"
  },
  {
    "text": "succeed here in an approach I see is I've got a function with six seconds I'm",
    "start": "1508390",
    "end": "1513760"
  },
  {
    "text": "gonna be much more optimistic here and I'm gonna allow every request five seconds to complete so even though",
    "start": "1513760",
    "end": "1520060"
  },
  {
    "text": "individually none of them talk longer than five seconds but collectively they took too long and more than six seconds",
    "start": "1520060",
    "end": "1526630"
  },
  {
    "text": "having a function in this case my function gets timed out before I have a chance to do any recovery from those",
    "start": "1526630",
    "end": "1532900"
  },
  {
    "text": "steps myself so instead my proposal here is to sell your request timer for those",
    "start": "1532900",
    "end": "1539650"
  },
  {
    "text": "outbound communication dynamically based on the actual Maya invocation time you",
    "start": "1539650",
    "end": "1544870"
  },
  {
    "text": "have left in the current invocation which conveniently you can find from the context of gel that your function is",
    "start": "1544870",
    "end": "1551350"
  },
  {
    "text": "involved with so in this case I'm I say that for every invocation I'm going to",
    "start": "1551350",
    "end": "1556930"
  },
  {
    "text": "reserve some block of time at the end for recovery if things go bad but before that every request is given as much time",
    "start": "1556930",
    "end": "1564370"
  },
  {
    "text": "as it's left with the entire invocation - observe time for recovery and if",
    "start": "1564370",
    "end": "1571030"
  },
  {
    "text": "collectively all the requests still took too long and I had to timeout that last request now I still have some time left at the",
    "start": "1571030",
    "end": "1577630"
  },
  {
    "text": "end so that I can do some recovery steps including logging the time our incident",
    "start": "1577630",
    "end": "1582700"
  },
  {
    "text": "with as much context as possible including what was the API that was trying to call was the timeout value any",
    "start": "1582700",
    "end": "1589690"
  },
  {
    "text": "correlation IDs I've collected so far as well as the request object it may be something else as well and I also want",
    "start": "1589690",
    "end": "1596380"
  },
  {
    "text": "to recall a custom metric for say service X dot timeout in cases where I",
    "start": "1596380",
    "end": "1603430"
  },
  {
    "text": "can't get the most up-to-date Valder response data from state tournament TP maybe I can return some cash value",
    "start": "1603430",
    "end": "1610300"
  },
  {
    "text": "instead and failing that maybe I can return a static value it has been pegged into my application so that's actually a",
    "start": "1610300",
    "end": "1617230"
  },
  {
    "text": "pattern that's baked right into the history X library their Netflix published paraspinal Netflix whereby",
    "start": "1617230",
    "end": "1622960"
  },
  {
    "text": "you're writing your cam your handlers into commands and every command has got a 4/4 back command if an error happens",
    "start": "1622960",
    "end": "1629860"
  },
  {
    "text": "and every and the fallback command himself can also have four packs and so on and so forth so say you're doing a",
    "start": "1629860",
    "end": "1636220"
  },
  {
    "text": "read from DynamoDB and that errors or timeout then you can check do i have local cache and stale value for this",
    "start": "1636220",
    "end": "1642910"
  },
  {
    "text": "request you find if I if I have then great I can return that and failing that I can return some default and this",
    "start": "1642910",
    "end": "1649510"
  },
  {
    "text": "exactly what happens when you go to Netflix the home page where they try to load your recommended movies and if",
    "start": "1649510",
    "end": "1655720"
  },
  {
    "text": "that's API call fails then they try to return a cache recommendation for you",
    "start": "1655720",
    "end": "1660730"
  },
  {
    "text": "and failing that they also returned your so static recommendation which i think is movies from 1950s and 60s where",
    "start": "1660730",
    "end": "1668200"
  },
  {
    "text": "there's no copyright constraint that's the important detail to consider so here",
    "start": "1668200",
    "end": "1677200"
  },
  {
    "text": "you're trading precision for availability which is a good trade-off for many many cases but maybe you don't",
    "start": "1677200",
    "end": "1683380"
  },
  {
    "text": "want to do that you say someone's checking their bank balance maybe you don't want to return a default value of",
    "start": "1683380",
    "end": "1688540"
  },
  {
    "text": "zero which of course is just going to freak them out and they're gonna call your customer support and scream at them",
    "start": "1688540",
    "end": "1694360"
  },
  {
    "text": "whatever you guys tell me about money so even though this trade-off between precision for availability is great you",
    "start": "1694360",
    "end": "1701320"
  },
  {
    "text": "have to keep in mind that your user experience is the most important thing to keep in mind here so next let's talk",
    "start": "1701320",
    "end": "1707980"
  },
  {
    "text": "about how can we then inject failures into our system and specifically or starting with where do we do it suppose",
    "start": "1707980",
    "end": "1714700"
  },
  {
    "text": "you've got a very simple setup here where you have a client application talking to two public facing API so of",
    "start": "1714700",
    "end": "1721030"
  },
  {
    "text": "API gateway and lambda both of which are talking to some internal API which are also implemented with API gateway and",
    "start": "1721030",
    "end": "1728290"
  },
  {
    "text": "lambda and your hypothesis is such that one of those functions are talking to",
    "start": "1728290",
    "end": "1734350"
  },
  {
    "text": "the internal API is going to be fine when the internal API is having a some time some issues and response time",
    "start": "1734350",
    "end": "1741010"
  },
  {
    "text": "starts to spike so in this case you can you can simulate that by injecting latency in delay into the HTTP client",
    "start": "1741010",
    "end": "1750190"
  },
  {
    "text": "your function uses to talk to the internal API this allows you to review any witnesses you have in terms of how",
    "start": "1750190",
    "end": "1756400"
  },
  {
    "text": "you hand those slow responses from API so it depends on and you also do the",
    "start": "1756400",
    "end": "1762250"
  },
  {
    "text": "same thing when you're talking to other third-party services including those Adriel services that we use all the time",
    "start": "1762250",
    "end": "1768250"
  },
  {
    "text": "like DynamoDB or even other and other non-edible services as well like 2000 or",
    "start": "1768250",
    "end": "1774370"
  },
  {
    "text": "of zero and so on and we can apply the same technique for as it was decayed by",
    "start": "1774370",
    "end": "1781480"
  },
  {
    "text": "injecting some latency into the ATK clients and we see example of how you can do that later and since we talked",
    "start": "1781480",
    "end": "1789130"
  },
  {
    "text": "about how we need to worry about containment and blast radius so for this particular experiment the blast radius",
    "start": "1789130",
    "end": "1795880"
  },
  {
    "text": "fairly self-contained is just between the client and that particular lambda functions serving the endpoint that",
    "start": "1795880",
    "end": "1801400"
  },
  {
    "text": "particular client is using at that moment in time so you're not going to create cascade failures throughout the",
    "start": "1801400",
    "end": "1806560"
  },
  {
    "text": "whole system but what if you want to expand your hypothesis and say that okay the",
    "start": "1806560",
    "end": "1813760"
  },
  {
    "text": "hypothesis that when the internet' API is slow is not going to cause any problem in any of the public facing API",
    "start": "1813760",
    "end": "1820210"
  },
  {
    "text": "that depends on it in which case you can also just inject latency into the",
    "start": "1820210",
    "end": "1826120"
  },
  {
    "text": "invocation of a function directly rather please do some middleware engine you use for no J's function lambda functions",
    "start": "1826120",
    "end": "1833440"
  },
  {
    "text": "there's a MIDI meter middleware engine there I found very useful and you can use that in general agency into",
    "start": "1833440",
    "end": "1838660"
  },
  {
    "text": "invocation this has got same impact as if you just inject latency into the HTTP",
    "start": "1838660",
    "end": "1844390"
  },
  {
    "text": "client used by order H fate or the puppy facing API functions but your blast",
    "start": "1844390",
    "end": "1850210"
  },
  {
    "text": "radius can be quite big now because by injecting latency into this internal API",
    "start": "1850210",
    "end": "1855730"
  },
  {
    "text": "function you can impact so many over the functions that's on the public facing side of things and remember the point is",
    "start": "1855730",
    "end": "1865150"
  },
  {
    "text": "not actually her production so if we want to run this kind of experiments definitely definitely start in an",
    "start": "1865150",
    "end": "1870670"
  },
  {
    "text": "environment away from production and maybe you don't want to run these kind of experiments in production at all",
    "start": "1870670",
    "end": "1875710"
  },
  {
    "text": "because of the risk involved but the same time it's also very effective at",
    "start": "1875710",
    "end": "1880930"
  },
  {
    "text": "finding and reading our witnesses very very quickly and I think you can actually use it for different purpose as",
    "start": "1880930",
    "end": "1886870"
  },
  {
    "text": "well one of the common traps is software development I find is that we are not",
    "start": "1886870",
    "end": "1892570"
  },
  {
    "text": "used to priming our developers to think about failures early on this is especially true if you're working on a",
    "start": "1892570",
    "end": "1898570"
  },
  {
    "text": "greenfield project whereby you're developing against a dev environment for moms that may be sometimes years at a",
    "start": "1898570",
    "end": "1904600"
  },
  {
    "text": "time and in that time environment you've got minimum load you almost never see slow server response or errors at the",
    "start": "1904600",
    "end": "1911380"
  },
  {
    "text": "moment you release your code into production that's a completely different ballgame altogether and since we haven't",
    "start": "1911380",
    "end": "1917230"
  },
  {
    "text": "been thinking about failures early during the development cycle where our system is not going to have a chance in",
    "start": "1917230",
    "end": "1922600"
  },
  {
    "text": "production once it sees all kind of different phases that can happen in production and in psychology we have got",
    "start": "1922600",
    "end": "1928630"
  },
  {
    "text": "this technique or priming whereby we can subtly influence or manipulate the way that some of things that behaves by",
    "start": "1928630",
    "end": "1935460"
  },
  {
    "text": "repeatedly projecting them with the same stimulus and face Watauga vantage of",
    "start": "1935460",
    "end": "1940600"
  },
  {
    "text": "this technique when they were moving into the Asian market where the network bandwidth is",
    "start": "1940600",
    "end": "1945850"
  },
  {
    "text": "not very good so they had this initiative called 2g Tuesdays whereby on",
    "start": "1945850",
    "end": "1951010"
  },
  {
    "text": "every Tuesday they turn the office Wi-Fi to smear a 2g bandwidth so that as a",
    "start": "1951010",
    "end": "1956620"
  },
  {
    "text": "developer working on Facebook I have a weekly reminder of what it's like to use",
    "start": "1956620",
    "end": "1961630"
  },
  {
    "text": "Facebook on a 2g connection so naturally I start to optimize my code so that even a 2g connection I keep my",
    "start": "1961630",
    "end": "1969309"
  },
  {
    "text": "users a decent experience so I think we can actually use failure injection to",
    "start": "1969309",
    "end": "1975370"
  },
  {
    "text": "actually program our developers our colleagues to think about failures for a way earlier by making our dev",
    "start": "1975370",
    "end": "1982899"
  },
  {
    "text": "environments resemble the kind of turbulent condition that we should realistically expect our system to",
    "start": "1982899",
    "end": "1988570"
  },
  {
    "text": "survive in in production but potentially making a small percentage of all requests have a slow response time or",
    "start": "1988570",
    "end": "1995470"
  },
  {
    "text": "made them error and of course the client",
    "start": "1995470",
    "end": "2000809"
  },
  {
    "text": "just is just as important part of the whole system in fact is your last chance so it's the",
    "start": "2000809",
    "end": "2005940"
  },
  {
    "text": "last line of defense before any cascade failures gets all the way to your users and we should include our clients in our",
    "start": "2005940",
    "end": "2013200"
  },
  {
    "text": "experiments as well in this case if I want to verify I want to check them as clients are handling slow responses from",
    "start": "2013200",
    "end": "2019470"
  },
  {
    "text": "the server properly and there are no implicit response time species assumptions about our server response",
    "start": "2019470",
    "end": "2025080"
  },
  {
    "text": "time then I can also inject latency into those the public API function directly in case of the plot in terms of the",
    "start": "2025080",
    "end": "2032640"
  },
  {
    "text": "blast radius again they are fairly self-contained it's just between those individual functions and the client is",
    "start": "2032640",
    "end": "2038309"
  },
  {
    "text": "using them at that moment time so years ago when I first started doing chaos",
    "start": "2038309",
    "end": "2043980"
  },
  {
    "text": "engineering and I was working on a MMORPG game and we got this a constant",
    "start": "2043980",
    "end": "2049378"
  },
  {
    "text": "stream like couple couple of complaints a day from user that says oh your your",
    "start": "2049379",
    "end": "2054419"
  },
  {
    "text": "app is crap he just hangs when you try to stop and does nothing and we couldn't",
    "start": "2054419",
    "end": "2059550"
  },
  {
    "text": "for the life of me I couldn't reproduce the problem and we added all these tests on a client on a server and still no",
    "start": "2059550",
    "end": "2066240"
  },
  {
    "text": "luck until one day I decided to take some of these things I've been learning about chaos engineering and started put",
    "start": "2066240",
    "end": "2071580"
  },
  {
    "text": "into practice and and we found that the theory stopped the",
    "start": "2071580",
    "end": "2077388"
  },
  {
    "text": "client makes the multiple concurrent tracks concurrent setup for requests and if there's once that's one specific API",
    "start": "2077389",
    "end": "2083780"
  },
  {
    "text": "calls the server that you've added errors or it takes more than two seconds then the requests are being made on",
    "start": "2083780",
    "end": "2090830"
  },
  {
    "text": "parallel is going to fail with no reference point their pointer exception and the whole thing just silently crashes and that's why we had all these",
    "start": "2090830",
    "end": "2097580"
  },
  {
    "text": "report from the client but it was such a complicated there's a very specific step and stopping that for you to happen that",
    "start": "2097580",
    "end": "2103580"
  },
  {
    "text": "we just couldn't replicate it in any of our tests and any of our attempts to reproduce a bug but by making our dev",
    "start": "2103580",
    "end": "2110690"
  },
  {
    "text": "environment we know we produce resemble some of these can some of these conditions that we might see in",
    "start": "2110690",
    "end": "2115730"
  },
  {
    "text": "production we were able to start seeing those exact those things happen those errors happen in the dev dev environment",
    "start": "2115730",
    "end": "2121550"
  },
  {
    "text": "and like before we can also inject latency into the acp client that are",
    "start": "2121550",
    "end": "2127910"
  },
  {
    "text": "mobile or web client uses instead of injection latency into the function themselves and once you run the",
    "start": "2127910",
    "end": "2134630"
  },
  {
    "text": "experiment you're keeping your eye on the Haleiwa dash board to make sure that nothing really bad happens and afterwards you go through your metrics",
    "start": "2134630",
    "end": "2140990"
  },
  {
    "text": "and trying to find evidence that support your original hypotheses in terms of how",
    "start": "2140990",
    "end": "2146990"
  },
  {
    "text": "do we then go ahead and jet latency into our code if you're talking about study languages like C sharp or Java then you",
    "start": "2146990",
    "end": "2154100"
  },
  {
    "text": "can potentially use Weaver such as push our foot on net or we've aspectj for jvm",
    "start": "2154100",
    "end": "2159830"
  },
  {
    "text": "languages and it's something that i used in the past and i wrote a blog post about that a few years ago and for",
    "start": "2159830",
    "end": "2166580"
  },
  {
    "text": "nodejs or python other dynamic languages you can potentially write wrapper libraries for your clients and as a",
    "start": "2166580",
    "end": "2172970"
  },
  {
    "text": "proof of concept i've got a very simple HTTP client that allows me to passing a config object that lets me control",
    "start": "2172970",
    "end": "2179720"
  },
  {
    "text": "toggle on and off those experiments but also control how often we inject latency and how much latency to inject in this",
    "start": "2179720",
    "end": "2187609"
  },
  {
    "text": "case I'm just using blooper to bloopers delay function to then add some aperture delay to a repeal request so from the",
    "start": "2187609",
    "end": "2196820"
  },
  {
    "text": "for HTTP clone itself is essentially just one big function that takes in an options object the part allows me to",
    "start": "2196820",
    "end": "2204020"
  },
  {
    "text": "pass in that concrete that we saw earlier which ultimately comes in from SSM parameter store I've",
    "start": "2204020",
    "end": "2209779"
  },
  {
    "text": "got configuration as an EM primary store which in this particular experiment I set the probability to 50% of the",
    "start": "2209779",
    "end": "2217130"
  },
  {
    "text": "latency between hundred milliseconds and five seconds being added to HP request my function and since all my functions",
    "start": "2217130",
    "end": "2224299"
  },
  {
    "text": "are hooked up to x-ray and instrument it so in one experiment I can see that there's no edit there's no latency being",
    "start": "2224299",
    "end": "2231799"
  },
  {
    "text": "added so the whole request finished under 60 milliseconds but on a different",
    "start": "2231799",
    "end": "2237609"
  },
  {
    "text": "invocation 3.4 seconds was added to this HP request so that's all well and good",
    "start": "2237609",
    "end": "2246529"
  },
  {
    "text": "for essentially a client library with just one method on one function but that's not possible with the eight with",
    "start": "2246529",
    "end": "2253969"
  },
  {
    "text": "dk for example is not feasible for you to manually create client libraries for everything or a diversity case client",
    "start": "2253969",
    "end": "2260630"
  },
  {
    "text": "that you want to use so in this case you can apply the same technique it's the same factory function as say bloopers",
    "start": "2260630",
    "end": "2267469"
  },
  {
    "text": "promised by all in this case I've got a simple module called the injectable very",
    "start": "2267469",
    "end": "2272479"
  },
  {
    "text": "bad name but bear with me whereby I can take a bazooka client and overwrite they",
    "start": "2272479",
    "end": "2278719"
  },
  {
    "text": "get acing functions we forgot to take it to talk to monkey patch the async function to take in another parameter",
    "start": "2278719",
    "end": "2285140"
  },
  {
    "text": "which includes the conflict rally the contrary so earlier in this case I can",
    "start": "2285140",
    "end": "2291049"
  },
  {
    "text": "see that the one imitation one experiment one point four seconds was added to a request to a dynamodb get so",
    "start": "2291049",
    "end": "2300440"
  },
  {
    "text": "all that proof of concert is available on github so feel free to go play around with that and see what you can use if",
    "start": "2300440",
    "end": "2305749"
  },
  {
    "text": "it's something that you can use but we don't have to stop there we don't have a stub it just added latency and doing",
    "start": "2305749",
    "end": "2312079"
  },
  {
    "text": "latency ingestion we can also inject other forms of errors as well for",
    "start": "2312079",
    "end": "2317660"
  },
  {
    "text": "example we can inject 500 responses to HTP requests but for specific address",
    "start": "2317660",
    "end": "2323150"
  },
  {
    "text": "services we can also inject those as service specific exceptions dynamically bees through provision super exceed",
    "start": "2323150",
    "end": "2329930"
  },
  {
    "text": "exception for example it catches me all the time because again is not something that I see often during development but",
    "start": "2329930",
    "end": "2336650"
  },
  {
    "text": "in production this kind of thing can happen all the time forever easily and we're not we're just not very good",
    "start": "2336650",
    "end": "2342270"
  },
  {
    "text": "thinking about those failure most early on and in this specific case of lambda",
    "start": "2342270",
    "end": "2347730"
  },
  {
    "text": "you may also want to explore the scenarios whereby what happens say if a business critical function gets",
    "start": "2347730",
    "end": "2353670"
  },
  {
    "text": "throttled because your overall concurrency at concurrency fusions has gone past a regional limit what happens",
    "start": "2353670",
    "end": "2360390"
  },
  {
    "text": "to the rest of a system say for example if something does processing events from Kinesis and then synchronize them to",
    "start": "2360390",
    "end": "2366240"
  },
  {
    "text": "other systems when that function keeps getting a throttle because the overall concurrent executions has gone to high",
    "start": "2366240",
    "end": "2372380"
  },
  {
    "text": "as it's simple hypothesis you might say okay my functions are handling those HP",
    "start": "2372380",
    "end": "2379590"
  },
  {
    "text": "errors properly and we can simulate those failures we can simulate those failures by again injecting errors into",
    "start": "2379590",
    "end": "2386790"
  },
  {
    "text": "an HTTP client and as we mentioned earlier for specific address services we can also again monkey patch to a",
    "start": "2386790",
    "end": "2393450"
  },
  {
    "text": "domesticates you then also inject specific server specific errors as well",
    "start": "2393450",
    "end": "2398810"
  },
  {
    "text": "and if you want to simulate what happens if lambda functions are being throttled during an experiment you can also then",
    "start": "2398810",
    "end": "2406140"
  },
  {
    "text": "go to either programmatically or doing a console by changing and taking the reserved concurrency for function which",
    "start": "2406140",
    "end": "2413220"
  },
  {
    "text": "given the name actually means the opposite when you set the reserve concurrency of function you're setting",
    "start": "2413220",
    "end": "2418860"
  },
  {
    "text": "the maximum number of concurrent solutions that particular function can have so if your function is running as a",
    "start": "2418860",
    "end": "2424470"
  },
  {
    "text": "10 concurrent execution steadily you may want to see ok what happens if I set the concurrency the reserve concurrency to",
    "start": "2424470",
    "end": "2431070"
  },
  {
    "text": "eight or nine so that analysis ROC is throttling happening against that function to see how the impacts the rest",
    "start": "2431070",
    "end": "2438210"
  },
  {
    "text": "of your system maybe that's where you can start to block here okay the bank locks I started to PI up and that has",
    "start": "2438210",
    "end": "2443820"
  },
  {
    "text": "got knock-on effects on other plasma system and the eventual consistency doesn't happen everywhere because we",
    "start": "2443820",
    "end": "2449490"
  },
  {
    "text": "hadn't thought about what happens when the different system that need to sync up together and the thing that's doing the synchronization is not being",
    "start": "2449490",
    "end": "2455940"
  },
  {
    "text": "throttled so as a quick recap failures",
    "start": "2455940",
    "end": "2462450"
  },
  {
    "text": "are inevitable regardless whether your code is running inside a easy to VM or inside a container or inside a lambda",
    "start": "2462450",
    "end": "2469710"
  },
  {
    "text": "function and the only way for Shirley know that our system is receive things different forms of failures is",
    "start": "2469710",
    "end": "2475710"
  },
  {
    "text": "actually tested to you through the use of controlled experiments and over time",
    "start": "2475710",
    "end": "2481829"
  },
  {
    "text": "as we do this we can we can start actually real confidence that our system",
    "start": "2481829",
    "end": "2488040"
  },
  {
    "text": "we actually would be fine and the goal of doing Karis engineering is not actually break the production",
    "start": "2488040",
    "end": "2494670"
  },
  {
    "text": "environment which is why containment and blast radius should be at all times from",
    "start": "2494670",
    "end": "2499770"
  },
  {
    "text": "the center of your thinking if you do jump the gun and go straight to production with a risky for the",
    "start": "2499770",
    "end": "2504990"
  },
  {
    "text": "experiment end up breaking the production environment then you can be sure then you can be sure that no",
    "start": "2504990",
    "end": "2513540"
  },
  {
    "text": "business is going to let you go back to production with your fancy cast experiments ever again and to execute",
    "start": "2513540",
    "end": "2520829"
  },
  {
    "text": "and to execute the chaos experiments ourselves we can follow four simple steps to define what steady-state locks",
    "start": "2520829",
    "end": "2527490"
  },
  {
    "text": "are for our system high profile hypothesize different scenarios and different failures and how our system",
    "start": "2527490",
    "end": "2533010"
  },
  {
    "text": "should behave call ahead inject those failures into the system and then keep",
    "start": "2533010",
    "end": "2538170"
  },
  {
    "text": "an eye on the metrics and try to find evidence that supports our original hypothesis or to disprove it and with",
    "start": "2538170",
    "end": "2546420"
  },
  {
    "text": "service technologies are a dose lambda there are a lot more inherent complexity and chaos in this hole in the",
    "start": "2546420",
    "end": "2552569"
  },
  {
    "text": "architecture and if anything there's even more need for us to use curls and",
    "start": "2552569",
    "end": "2557970"
  },
  {
    "text": "doing practices to identify those weaknesses early so that we can then go ahead and harden our vacations and make",
    "start": "2557970",
    "end": "2564569"
  },
  {
    "text": "them more resilient and even with our servers you can still inject controlled",
    "start": "2564569",
    "end": "2569579"
  },
  {
    "text": "failures into a system at the application level by potentially",
    "start": "2569579",
    "end": "2575430"
  },
  {
    "text": "injecting errors and latency into httpclient or into the 80s decay out functions use or into the function",
    "start": "2575430",
    "end": "2583589"
  },
  {
    "text": "themselves directly and the client is also an important part of the whole",
    "start": "2583589",
    "end": "2588750"
  },
  {
    "text": "system and we should include them in our experiments as well so is that that's",
    "start": "2588750",
    "end": "2594690"
  },
  {
    "text": "everything I have I thank you very much for your time and",
    "start": "2594690",
    "end": "2599568"
  },
  {
    "text": "and if you want to learn more about chaos engineering or general practice on how to make your service vacation more",
    "start": "2605890",
    "end": "2611960"
  },
  {
    "text": "resilient there's a couple more sessions tomorrow and the day after as well so feel free to check those guys out and",
    "start": "2611960",
    "end": "2618069"
  },
  {
    "text": "please fill out the session survey in the mobile lab afterwards as well thank",
    "start": "2618069",
    "end": "2623720"
  },
  {
    "text": "you if you've got any questions I'm going to hang around here so you can come and ask me anything you want again figure guys very much for your",
    "start": "2623720",
    "end": "2629150"
  },
  {
    "text": "time",
    "start": "2629150",
    "end": "2631328"
  }
]