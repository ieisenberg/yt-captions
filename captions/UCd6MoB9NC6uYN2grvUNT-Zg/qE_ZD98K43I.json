[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "okay so we're here for the last session of the day so thank you holes of just as",
    "start": "10370",
    "end": "18840"
  },
  {
    "text": "a small effort on our side since you've been so patient to stay with us the old day I would like to tell you that",
    "start": "18840",
    "end": "23850"
  },
  {
    "text": "there's an epi our reception just after this session so from 4:45 to 6 so I hope",
    "start": "23850",
    "end": "30269"
  },
  {
    "text": "you can join so you can have like a relaxing drink after this old day of",
    "start": "30269",
    "end": "35430"
  },
  {
    "text": "learning so this is the the last session in the similar struck so just as a recap",
    "start": "35430",
    "end": "42719"
  },
  {
    "start": "40000",
    "end": "91000"
  },
  {
    "text": "we started with so how you can develop and use the technology and grow your",
    "start": "42719",
    "end": "48960"
  },
  {
    "text": "development team we then so how to apply architectural patterns to what you want",
    "start": "48960",
    "end": "54629"
  },
  {
    "text": "to build with several s technologies such as a SS lambda we also saw more",
    "start": "54629",
    "end": "60059"
  },
  {
    "text": "recently how we can we can use global deployments with features like dynamo DB",
    "start": "60059",
    "end": "66420"
  },
  {
    "text": "so building global multi-region architecture something that in the past would be really complex to and also very",
    "start": "66420",
    "end": "72570"
  },
  {
    "text": "costly to do the summer session is the next step so when you start to build",
    "start": "72570",
    "end": "79229"
  },
  {
    "text": "large applications with lambda you start to have lots of functions so let's see",
    "start": "79229",
    "end": "84960"
  },
  {
    "text": "what we introduced over the years to help customers build this kind of complex service architecture so normally",
    "start": "84960",
    "end": "92880"
  },
  {
    "start": "91000",
    "end": "187000"
  },
  {
    "text": "with a service app you start with your first function you are very happy you",
    "start": "92880",
    "end": "98460"
  },
  {
    "text": "link it through your events and then you start to grow and you have more functions that are coordinated in some",
    "start": "98460",
    "end": "104430"
  },
  {
    "text": "way maybe this function triggers another function through a street-level DB or",
    "start": "104430",
    "end": "110100"
  },
  {
    "text": "even directly and the number of functions grows you can use Sam but still the rest maybe some functions that",
    "start": "110100",
    "end": "117810"
  },
  {
    "text": "read and write from a database or some persistent storage maybe some function",
    "start": "117810",
    "end": "123000"
  },
  {
    "text": "they receive information send information to a to a queue where you can serialize your request sometimes you",
    "start": "123000",
    "end": "130020"
  },
  {
    "text": "need to integrate your father your environment with legacy systems that are connected using",
    "start": "130020",
    "end": "136390"
  },
  {
    "text": "Direct Connect maybe and they are completely different architectures from the traditional architecture that you",
    "start": "136390",
    "end": "143050"
  },
  {
    "text": "use when you build sever less technology so there's lots of a coordination here",
    "start": "143050",
    "end": "148960"
  },
  {
    "text": "that is something that you need to put into your codes if function calls that one I need to wait for the result what",
    "start": "148960",
    "end": "156460"
  },
  {
    "text": "should I do if the result doesn't come in time and normally we saw lots of",
    "start": "156460",
    "end": "161530"
  },
  {
    "text": "customers spending lots of time in this blue code instead of the business logic and one thing that we said very clearly",
    "start": "161530",
    "end": "168640"
  },
  {
    "text": "this year in the keynote with Werner Vogel's in rain event was that our purpose is really to give you the tools",
    "start": "168640",
    "end": "174550"
  },
  {
    "text": "so that you need only to focus on the business logic maybe only write the business logic and we think can take",
    "start": "174550",
    "end": "180370"
  },
  {
    "text": "care of everything else that is around that is the boilerplate code that it's",
    "start": "180370",
    "end": "185800"
  },
  {
    "text": "not giving you something different so let's say that I want to build this kind",
    "start": "185800",
    "end": "191050"
  },
  {
    "text": "of complex service architecture what happens is that probably you can say one",
    "start": "191050",
    "end": "196870"
  },
  {
    "text": "of these things like I want to sequence my functions so that functions are executed in a sequence and you can do",
    "start": "196870",
    "end": "203650"
  },
  {
    "text": "that but you need like every function must invoke the other function so it's code that is running other code is not",
    "start": "203650",
    "end": "210970"
  },
  {
    "text": "really clean you may want to maybe you want to run some functions in parallel because they can get you the result",
    "start": "210970",
    "end": "217990"
  },
  {
    "text": "faster maybe sometimes depending on the data you have you want to select a different function and you don't want to",
    "start": "217990",
    "end": "224050"
  },
  {
    "text": "write a function to do that sometimes you want to retry functions I explain how we handle errors so we basically",
    "start": "224050",
    "end": "231310"
  },
  {
    "text": "have for a synchronous invocation on two invocations and then and then you you",
    "start": "231310",
    "end": "236800"
  },
  {
    "text": "can write the dlq the letter Q for synchronous error we just give you back",
    "start": "236800",
    "end": "242200"
  },
  {
    "text": "the error and you should manage that but maybe you have a functional it is calling an external system like a",
    "start": "242200",
    "end": "248980"
  },
  {
    "text": "payment service that is outside of your control what should you do if there is an error or should you handle that maybe",
    "start": "248980",
    "end": "256030"
  },
  {
    "text": "at function level you just want to do something that in programming language is very common you want to do a try",
    "start": "256030",
    "end": "261070"
  },
  {
    "text": "catch finally so I try to run this function if there is an error I want to - the error finally I clean my",
    "start": "261070",
    "end": "267440"
  },
  {
    "text": "environment from everything that was created and sometimes you want to read",
    "start": "267440",
    "end": "272720"
  },
  {
    "text": "code not just for five minutes smart for hours and you can do that because one",
    "start": "272720",
    "end": "278210"
  },
  {
    "text": "function can trigger another function there's in sequence or in parallel you can do that but still it's lots of",
    "start": "278210",
    "end": "284000"
  },
  {
    "text": "boilerplate code so if we want as AWS help you we can introduce a coordination",
    "start": "284000",
    "end": "291139"
  },
  {
    "start": "285000",
    "end": "355000"
  },
  {
    "text": "layer and this coordination layer needs to scale out because of course we are",
    "start": "291139",
    "end": "297530"
  },
  {
    "text": "creating an architecture that can automatically scale so we don't want to introduce a bottleneck he needs to keep",
    "start": "297530",
    "end": "303919"
  },
  {
    "text": "some sort of state this is something that functions don't do function they start with an event and then they can",
    "start": "303919",
    "end": "310099"
  },
  {
    "text": "return some value but by themselves if you don't store anything you don't they",
    "start": "310099",
    "end": "316250"
  },
  {
    "text": "are stateless if we create a coordination layer maybe this player can manage the state for the function you",
    "start": "316250",
    "end": "323930"
  },
  {
    "text": "can deal as I said with errors and retrials especially if you call something that is outside of something",
    "start": "323930",
    "end": "330110"
  },
  {
    "text": "that you manage like a public API or if you integrate your function with a legacy IT system that probably can't",
    "start": "330110",
    "end": "336949"
  },
  {
    "text": "scale as well as functions or sometimes it can be the bottleneck and of course this should be easy otherwise you can",
    "start": "336949",
    "end": "343340"
  },
  {
    "text": "already use functions and auditable so it means that in any point in time this coordination layer should let you know",
    "start": "343340",
    "end": "350330"
  },
  {
    "text": "what is happening why it took this decision what it started this task and so on so that's why we introduced step",
    "start": "350330",
    "end": "358190"
  },
  {
    "text": "functions they will introduce more than one year ago at reinvent and then we saw",
    "start": "358190",
    "end": "363440"
  },
  {
    "text": "our customer used them in ways that were completely different from what we were planning to so we added more features",
    "start": "363440",
    "end": "369650"
  },
  {
    "text": "and the idea of this presentation is to introduce you how they work and then we will review together after a demo some",
    "start": "369650",
    "end": "376789"
  },
  {
    "text": "use cases that they were presented by customers to show how they were using step functions in productions so the",
    "start": "376789",
    "end": "383930"
  },
  {
    "start": "382000",
    "end": "432000"
  },
  {
    "text": "idea with step function is that you can define a workflow what we call a state",
    "start": "383930",
    "end": "389150"
  },
  {
    "text": "machine and if you studied computer science this is exactly the state machine that you studied in computer",
    "start": "389150",
    "end": "394909"
  },
  {
    "text": "science so you define this state machine this workflow that described the task that you need to do what should",
    "start": "394909",
    "end": "401240"
  },
  {
    "text": "happen if something is passed through the different states and you can use a",
    "start": "401240",
    "end": "406849"
  },
  {
    "text": "JSON language to do that and it's just some language is automatically visualized in the console as so that you",
    "start": "406849",
    "end": "415639"
  },
  {
    "text": "can really visually understand what you're mapping and then if you execute a",
    "start": "415639",
    "end": "420800"
  },
  {
    "text": "state machine you can send some data and then you can visually model the execution and every step from the",
    "start": "420800",
    "end": "427430"
  },
  {
    "text": "console so you can really understand in the back what's happening in a state machine so this is the prototype hello",
    "start": "427430",
    "end": "435409"
  },
  {
    "text": "world for a state machine language you can have a comment so as I said it's",
    "start": "435409",
    "end": "442039"
  },
  {
    "text": "JSON then you can have a comment then you have a list of states and you have to specify which is the starting state",
    "start": "442039",
    "end": "447560"
  },
  {
    "text": "here you have only a state is hello world so we start at hello world then the l-word state is a task that is using",
    "start": "447560",
    "end": "456199"
  },
  {
    "text": "a resource and there you can put the amazon resource name or our lambda",
    "start": "456199",
    "end": "462770"
  },
  {
    "text": "function so i'm not sure if you're familiar with our but across AWS we have",
    "start": "462770",
    "end": "468469"
  },
  {
    "text": "this amazon resource name syntax Arn that is a way to specify any any",
    "start": "468469",
    "end": "474590"
  },
  {
    "text": "resource inside the breast apple is your role and also any lambda function they",
    "start": "474590",
    "end": "481190"
  },
  {
    "text": "have a unique way of being identified by this arm syntax and then in this case we",
    "start": "481190",
    "end": "486680"
  },
  {
    "text": "have end true that means that this state is the only state it starts and then it ends the state machine so this hello",
    "start": "486680",
    "end": "494120"
  },
  {
    "text": "world will use a task so we will trigger a lambda function that will do something",
    "start": "494120",
    "end": "499190"
  },
  {
    "text": "and then it will finish so not very useful but is the simple example it's",
    "start": "499190",
    "end": "505940"
  },
  {
    "start": "504000",
    "end": "535000"
  },
  {
    "text": "important to see that when you use state machine you can execute multiple state",
    "start": "505940",
    "end": "511490"
  },
  {
    "text": "machines at at once so every state machine you can run it once or up to 1",
    "start": "511490",
    "end": "517698"
  },
  {
    "text": "million of times in parallel so scalability is very high of course if you using lambda function inside then",
    "start": "517699",
    "end": "524029"
  },
  {
    "text": "you have the concurrency limited of lambda that you need to change but from the state machine perspective there's",
    "start": "524029",
    "end": "530060"
  },
  {
    "text": "the default limit is 1 million of execution for every state machine the",
    "start": "530060",
    "end": "535850"
  },
  {
    "start": "535000",
    "end": "578000"
  },
  {
    "text": "maximum actual execution time of a state machine moves from five minutes with lambda to one year so a state machine",
    "start": "535850",
    "end": "542510"
  },
  {
    "text": "can run up to one year and it you can also have waiting times of course you don't need to run code from one year but",
    "start": "542510",
    "end": "548899"
  },
  {
    "text": "you can create a workflow that came up a business process that takes for example days think an example of state machine",
    "start": "548899",
    "end": "556279"
  },
  {
    "text": "that I like is the delivery that completely random since I'm from Amazon the delivery process of if you buy",
    "start": "556279",
    "end": "563120"
  },
  {
    "text": "something online you create the order you have to coordinate the delivery then the person leaves there's lots of",
    "start": "563120",
    "end": "569660"
  },
  {
    "text": "waiting times errors that can happen and it should be recovered so this is an example of a workflow that can run a few",
    "start": "569660",
    "end": "575839"
  },
  {
    "text": "days off fully less than one year monitor execution from the console this",
    "start": "575839",
    "end": "582380"
  },
  {
    "start": "578000",
    "end": "607000"
  },
  {
    "text": "is an example of a from the console you can run a state machine so you will see and we will see a demo where we will",
    "start": "582380",
    "end": "589370"
  },
  {
    "text": "really use the color to tell you in which step of the state machine we are and if there is a branch or something",
    "start": "589370",
    "end": "594830"
  },
  {
    "text": "you will see where in the in the workflow we are going with this execution and then at each step level",
    "start": "594830",
    "end": "601010"
  },
  {
    "text": "you can see the input and the output and the time of this single task so each",
    "start": "601010",
    "end": "609220"
  },
  {
    "start": "607000",
    "end": "766000"
  },
  {
    "text": "state of the state machine can be of these different types so the task state",
    "start": "609220",
    "end": "616370"
  },
  {
    "text": "is a unit of work that can be alarmed a function or we will see later with",
    "start": "616370",
    "end": "621860"
  },
  {
    "text": "activities it can be anything running outside of lambda can be something",
    "start": "621860",
    "end": "627260"
  },
  {
    "text": "running on ec2 something running in a container something running outside of AWS on premise it can be even be just a",
    "start": "627260",
    "end": "634760"
  },
  {
    "text": "human activity that needs to provide a feedback so a task is really a flexible",
    "start": "634760",
    "end": "640100"
  },
  {
    "text": "concept you should think as a unit of work and most of the times it will be a",
    "start": "640100",
    "end": "645440"
  },
  {
    "text": "lambda function but it can be also something different a state can be a choice where you want to add logic",
    "start": "645440",
    "end": "651860"
  },
  {
    "text": "branching in your workflow so if depending on the state information that I receive I can take a decision so for",
    "start": "651860",
    "end": "659209"
  },
  {
    "text": "example the first task can be the payment in for is calling the payment service for your order and",
    "start": "659209",
    "end": "666019"
  },
  {
    "text": "in return that the payment was correctly received or not because maybe the credit",
    "start": "666019",
    "end": "671239"
  },
  {
    "text": "card didn't work and then the choice state can be the next one and depending on the state lady receives you can take",
    "start": "671239",
    "end": "677389"
  },
  {
    "text": "an action like okay I start the delivery or I will signal that the payment didn't work and you need to probably try",
    "start": "677389",
    "end": "683749"
  },
  {
    "text": "another payment mechanism if you want to run multiple things in parallel you can",
    "start": "683749",
    "end": "689119"
  },
  {
    "text": "use the parallel state it will create two branch that are executed in parallel so choice is you choose one branch or",
    "start": "689119",
    "end": "696439"
  },
  {
    "text": "the other parallel will execute multiple states in parallel and then you can reconcile these parallel States and if",
    "start": "696439",
    "end": "704269"
  },
  {
    "text": "one of the parallel branch will finish before of the other we will automatically wait until all the branch",
    "start": "704269",
    "end": "709670"
  },
  {
    "text": "will finish correctly and then pass all the states as a list to the next step a",
    "start": "709670",
    "end": "717160"
  },
  {
    "text": "weight is used to wait for us an amount of time or a specific date so for",
    "start": "717160",
    "end": "723170"
  },
  {
    "text": "example you can have a weight state that tells okay you did some processing now I wait 30 seconds 30 hours or I wait a",
    "start": "723170",
    "end": "730730"
  },
  {
    "text": "specific moment in time that came not so dynamically computed because maybe you know that something must happen before",
    "start": "730730",
    "end": "736759"
  },
  {
    "text": "moving forward fail and succeed are two states that you can use to finish with",
    "start": "736759",
    "end": "742819"
  },
  {
    "text": "an error or with a success at the execution of a state machine and pass is a state that normally does nothing so it",
    "start": "742819",
    "end": "750199"
  },
  {
    "text": "takes an input and gives out the same output but since there's some manipulation of the state that you can",
    "start": "750199",
    "end": "756110"
  },
  {
    "text": "do with the JSON syntax you can use it to manipulate input and output in in",
    "start": "756110",
    "end": "763160"
  },
  {
    "text": "interesting ways we will see a use case where this is done so let's talk a",
    "start": "763160",
    "end": "768769"
  },
  {
    "start": "766000",
    "end": "872000"
  },
  {
    "text": "little bit better of the tasks so the test is the unit of work and can be a synchronous task and the synchronous",
    "start": "768769",
    "end": "775040"
  },
  {
    "text": "task is a lambda function so this is an example of a task that I call extract image metadata it's type task and then I",
    "start": "775040",
    "end": "782839"
  },
  {
    "text": "give the resource of a lambda function in the in the flow of the state you have an input state that is a JSON document",
    "start": "782839",
    "end": "789169"
  },
  {
    "text": "and then each state is passing their output as input of the next step that",
    "start": "789169",
    "end": "794299"
  },
  {
    "text": "means that this lambda function will get in input the state so the event of this lambda function will be the",
    "start": "794299",
    "end": "801129"
  },
  {
    "text": "input of this state probably the input of the initial input of the input of the step just before this one you can also",
    "start": "801129",
    "end": "809290"
  },
  {
    "text": "have a synchronous task and that's what we call activities and activities work",
    "start": "809290",
    "end": "814569"
  },
  {
    "text": "in a slightly different way so they used as a bridge with traditional IT or for a",
    "start": "814569",
    "end": "820600"
  },
  {
    "text": "human validation so normally what happens is that you could create activity and then when this activity",
    "start": "820600",
    "end": "827889"
  },
  {
    "text": "receives something to do there is a sort of a queue where all these things to do go and then there should be a group of",
    "start": "827889",
    "end": "834370"
  },
  {
    "text": "polar's that can be easy to Easton's container or servers in on premise in",
    "start": "834370",
    "end": "839800"
  },
  {
    "text": "another architecture that paul for something to do so they will ask is there something to do for this activity",
    "start": "839800",
    "end": "845769"
  },
  {
    "text": "when something goes into the queue they will receive the input state they can do their processing can be even human",
    "start": "845769",
    "end": "852250"
  },
  {
    "text": "validation and then they can say that this activity terminated correctly or with an error and then the state machine",
    "start": "852250",
    "end": "858610"
  },
  {
    "text": "can move forward so in this way you can integrate with anything outside there's a very few api's to integrate an",
    "start": "858610",
    "end": "864639"
  },
  {
    "text": "external software with as an activity and I will show how that work in the",
    "start": "864639",
    "end": "871300"
  },
  {
    "text": "demo so there those are the main IP is for activities so you can create and",
    "start": "871300",
    "end": "877809"
  },
  {
    "start": "872000",
    "end": "955000"
  },
  {
    "text": "register a new activity tasks and then the the nodes that are doing this",
    "start": "877809",
    "end": "883899"
  },
  {
    "text": "activity that as I said can be anything of even outside of AWS they can pull for",
    "start": "883899",
    "end": "889000"
  },
  {
    "text": "something to do they can report the success or their failure and if the",
    "start": "889000",
    "end": "894009"
  },
  {
    "text": "activity is very long in time like maybe takes hours you can optionally configure",
    "start": "894009",
    "end": "899800"
  },
  {
    "text": "a heartbeat so to tell that you are still working on this activity so that if the state machine will not receive",
    "start": "899800",
    "end": "906579"
  },
  {
    "text": "the heartbeat in time like you say every 30 minutes you should report an heartbeat or every 20 second if you",
    "start": "906579",
    "end": "913839"
  },
  {
    "text": "don't receive the heartbeat the state machine will assume that this activity failed so it will reschedule the same",
    "start": "913839",
    "end": "919509"
  },
  {
    "text": "input State with a new worker a new polar node we receive the same state so",
    "start": "919509",
    "end": "925360"
  },
  {
    "text": "it's very robust are reliable because you need to report success of failure or a heartbeat and otherwise the same work",
    "start": "925360",
    "end": "932529"
  },
  {
    "text": "be done by something else think like I want to process 1 million of images I give this 1 million of images you can",
    "start": "932529",
    "end": "939550"
  },
  {
    "text": "have like a group of instances that pour for things to do they will receive this",
    "start": "939550",
    "end": "944589"
  },
  {
    "text": "image they process they give the result if they don't give the result in time the same image will be sent to another",
    "start": "944589",
    "end": "949749"
  },
  {
    "text": "node because we assume that the first time it failed in some way that we don't know the language the json language we",
    "start": "949749",
    "end": "958300"
  },
  {
    "text": "use is called the amazon state language and we publish under this link and it's",
    "start": "958300",
    "end": "964360"
  },
  {
    "text": "an open source language that we created so everybody in the community if they want to we want to avoid to reinvent the",
    "start": "964360",
    "end": "970959"
  },
  {
    "text": "wheel so it's it's an Apache 2 license so it's pretty open for anything anyone who needs state machine or workflow",
    "start": "970959",
    "end": "978459"
  },
  {
    "text": "language can reuse it it's state machine are integrated natively with other AWS",
    "start": "978459",
    "end": "985689"
  },
  {
    "start": "981000",
    "end": "1099000"
  },
  {
    "text": "services so for example you can create dynamically state machine and activities",
    "start": "985689",
    "end": "990850"
  },
  {
    "text": "from transformation templates you can invoke a step function so execute a",
    "start": "990850",
    "end": "996819"
  },
  {
    "text": "state machine from the API gateway but this is an a synchronous invocation so they Pia gateway can start a workflow so",
    "start": "996819",
    "end": "1004500"
  },
  {
    "text": "a state machine execution but then it can't wait for the result because it can take up to one year so I don't think you",
    "start": "1004500",
    "end": "1010889"
  },
  {
    "text": "want to build an API this law but even if it's very fast it's just the sign that you can just start the process get",
    "start": "1010889",
    "end": "1017160"
  },
  {
    "text": "the ok if the process started and then you should have some other way to close the circuit you can also use cloud watch",
    "start": "1017160",
    "end": "1026250"
  },
  {
    "text": "events to trigger state machines and this is interesting because all those IT",
    "start": "1026250",
    "end": "1032579"
  },
  {
    "text": "use cases that we saw where I was suggesting maybe we can use a function instead of of a script to run every hour",
    "start": "1032579",
    "end": "1041220"
  },
  {
    "text": "and clean my snapshots and do my backup if you want more robustness you can",
    "start": "1041220",
    "end": "1047130"
  },
  {
    "text": "replace those with a state machine that can eventually run one or more lambda function so the different monitory",
    "start": "1047130",
    "end": "1052590"
  },
  {
    "text": "trials and everything it's integrated with our watch so you have all the matrix and it's integrated also with",
    "start": "1052590",
    "end": "1059190"
  },
  {
    "text": "clouds right so you have full auditing on the state machine execution and most of the time",
    "start": "1059190",
    "end": "1066679"
  },
  {
    "text": "you use also you can use also lambda to trigger along the state machine so for",
    "start": "1066679",
    "end": "1073220"
  },
  {
    "text": "example you can have the API gateway trigger a state machine execution but",
    "start": "1073220",
    "end": "1078980"
  },
  {
    "text": "you have no way to manage the return status so this return status will be our API return status if you want to",
    "start": "1078980",
    "end": "1085039"
  },
  {
    "text": "customize that is better to have the API gateway call a lambda function that can trigger the execution of a state machine",
    "start": "1085039",
    "end": "1092840"
  },
  {
    "text": "and then can return back any any return status that you want with the syntax that you prefer there is really two",
    "start": "1092840",
    "end": "1101620"
  },
  {
    "start": "1099000",
    "end": "1219000"
  },
  {
    "text": "design visually so you use you use JSON but then you can immediately see how the",
    "start": "1101620",
    "end": "1107000"
  },
  {
    "text": "work sort works and so this is an example of a state machine that starts",
    "start": "1107000",
    "end": "1112340"
  },
  {
    "text": "so when it starts you give an input state a JSON document for example here",
    "start": "1112340",
    "end": "1117830"
  },
  {
    "text": "it can be the link to an image that must be processed then you have extract image",
    "start": "1117830",
    "end": "1122899"
  },
  {
    "text": "metadata it's a task that is a lambda function the lambda function will look",
    "start": "1122899",
    "end": "1128299"
  },
  {
    "text": "for the image type so this is a JPEG this is a PNG or maybe this is just",
    "start": "1128299",
    "end": "1134210"
  },
  {
    "text": "binary I don't think this is an image and then you can give back the image type as a return state this will go to a",
    "start": "1134210",
    "end": "1140539"
  },
  {
    "text": "choice state that depending on what is reported by the lambda function can this",
    "start": "1140539",
    "end": "1145909"
  },
  {
    "text": "say this is not a supported image type and fail so a failed state or it can store the image metadata on dynamodb and",
    "start": "1145909",
    "end": "1153980"
  },
  {
    "text": "then run in parallel two branches one is using recognition to look for what's",
    "start": "1153980",
    "end": "1159890"
  },
  {
    "text": "inside the picture and extracting the tags the other one is building the thumbnail of the picture and maybe the",
    "start": "1159890",
    "end": "1166070"
  },
  {
    "text": "output is the link to the s3 bucket where you store the thumbnail that you",
    "start": "1166070",
    "end": "1171140"
  },
  {
    "text": "generated for the picture since these two branches are executed in parallel when they both finish correctly you will",
    "start": "1171140",
    "end": "1177559"
  },
  {
    "text": "get a list state so as the state will be a list with all the return state of the",
    "start": "1177559",
    "end": "1182750"
  },
  {
    "text": "parallel branches at once so the first the list will contain the output tags",
    "start": "1182750",
    "end": "1187970"
  },
  {
    "text": "and probably the link to thumbnail as a second value of the list and at this",
    "start": "1187970",
    "end": "1193429"
  },
  {
    "text": "point you can finish correctly or maybe report to the scene for as output of the execution of the state",
    "start": "1193429",
    "end": "1199879"
  },
  {
    "text": "machine so it's you can do everything in a single lambda function but it's much",
    "start": "1199879",
    "end": "1205369"
  },
  {
    "text": "more difficult to monitor it's much more complex to manage errors if for example you have been throttle by recognition or",
    "start": "1205369",
    "end": "1212960"
  },
  {
    "text": "DynamoDB and it's also more complex to add new features if you want to add it because you need to know the code this",
    "start": "1212960",
    "end": "1220309"
  },
  {
    "start": "1219000",
    "end": "1287000"
  },
  {
    "text": "is an example how you can build a server less human approval tasks so the idea",
    "start": "1220309",
    "end": "1226369"
  },
  {
    "text": "here is that we use the activities but we don't need to run code we just need a human to say yes or no to an activity so",
    "start": "1226369",
    "end": "1233869"
  },
  {
    "text": "in this case we have a cloud watch events that may be once per day is",
    "start": "1233869",
    "end": "1238999"
  },
  {
    "text": "sending some is triggering a lambda function the lambda function create an",
    "start": "1238999",
    "end": "1244789"
  },
  {
    "text": "activity task and then sends an email using Amazon says and this email is",
    "start": "1244789",
    "end": "1251269"
  },
  {
    "text": "received by a client and can contain two links that is like I approve I don't",
    "start": "1251269",
    "end": "1256429"
  },
  {
    "text": "approve and these links they go both to the API gateway and they are mapped to",
    "start": "1256429",
    "end": "1261590"
  },
  {
    "text": "the same task success or same task failure for the activity and this goes",
    "start": "1261590",
    "end": "1267259"
  },
  {
    "text": "back to the stop function and clicking on the link of the email will go to the",
    "start": "1267259",
    "end": "1272629"
  },
  {
    "text": "API gateway that we get we will send the success or the failure so you have built a human approval task with basically",
    "start": "1272629",
    "end": "1281419"
  },
  {
    "text": "without lines of code is not for sending the email to the to the to the user this",
    "start": "1281419",
    "end": "1288259"
  },
  {
    "start": "1287000",
    "end": "1335000"
  },
  {
    "text": "is the same example that we already saw in this way in the previous presentation",
    "start": "1288259",
    "end": "1293690"
  },
  {
    "text": "and on the Left I just described the state machine so how to do image recognition and processing the idea here",
    "start": "1293690",
    "end": "1301249"
  },
  {
    "text": "is that if we watch we have to complete different approach in how you can represent an architecture on the right",
    "start": "1301249",
    "end": "1307340"
  },
  {
    "text": "we have the architecture with the flow of the components on the Left we have the state machine so the workflow of how",
    "start": "1307340",
    "end": "1313909"
  },
  {
    "text": "the data and the decisions and the branch that I need to run so even if I",
    "start": "1313909",
    "end": "1319879"
  },
  {
    "text": "like very much architecture I think that the the state machine is much clearer to me if I need to build it I know exactly",
    "start": "1319879",
    "end": "1327349"
  },
  {
    "text": "what's the logic behind what are the component so it's I think it's adds information to",
    "start": "1327349",
    "end": "1333170"
  },
  {
    "text": "to what you're doing this is another example it's also available here and",
    "start": "1333170",
    "end": "1338720"
  },
  {
    "start": "1335000",
    "end": "1422000"
  },
  {
    "text": "it's using cloud watch events to trigger some a BBS snapshot management so EBS is",
    "start": "1338720",
    "end": "1345590"
  },
  {
    "text": "our block storage it's our block storage normally customer they have their own process to create",
    "start": "1345590",
    "end": "1351050"
  },
  {
    "text": "snapshots when you create a snapshot of an IPS volume usually it takes a few minutes and then CloudWatch events will",
    "start": "1351050",
    "end": "1358130"
  },
  {
    "text": "fire an event that is the snapshot is completed so normally nobody listen to this event but you can connect a state",
    "start": "1358130",
    "end": "1365810"
  },
  {
    "text": "machine that will get information every time the snapshot is finished and the",
    "start": "1365810",
    "end": "1371270"
  },
  {
    "text": "state machine can do this so you can add a tag to the snapshot so saying okay",
    "start": "1371270",
    "end": "1376940"
  },
  {
    "text": "this has been done it can count the snapshot for every volume and delete if",
    "start": "1376940",
    "end": "1382310"
  },
  {
    "text": "there is more than an snapshot for a volume so then you only take the last and snapshot of a storage device and",
    "start": "1382310",
    "end": "1389210"
  },
  {
    "text": "then it can finish and you can also start to copy this snapshot in in",
    "start": "1389210",
    "end": "1395630"
  },
  {
    "text": "another region so if you have a disaster recovery policy you can say automatically every time a snapshot completes the stuff mash the state",
    "start": "1395630",
    "end": "1402260"
  },
  {
    "text": "machine starts it will tag delete the old snapshot and start copying the snapshot in another region and in the",
    "start": "1402260",
    "end": "1408200"
  },
  {
    "text": "other region you can have something similar that will delete the oldest snapshot so if you're interested in this",
    "start": "1408200",
    "end": "1413480"
  },
  {
    "text": "kind of architecture that's the link and state machine are really interesting to build this kind of robust IT automation",
    "start": "1413480",
    "end": "1421400"
  },
  {
    "text": "tasks so let's see a demo so maybe things are also clearer so this is what",
    "start": "1421400",
    "end": "1432320"
  },
  {
    "start": "1422000",
    "end": "1474000"
  },
  {
    "text": "I want to build so if you were here and my first presentation I already was playing with greetings and names so",
    "start": "1432320",
    "end": "1438830"
  },
  {
    "text": "let's move it a little bit more further so I want to build a state machine where you give a name this name was me",
    "start": "1438830",
    "end": "1445010"
  },
  {
    "text": "validated so it must be a correct name the only correct name in the world is Danilo every other name fails if the",
    "start": "1445010",
    "end": "1452600"
  },
  {
    "text": "name is correct then I say greeting with your name otherwise I go to manage the",
    "start": "1452600",
    "end": "1458270"
  },
  {
    "text": "invalid name and then I can finish my my state machine with the result so",
    "start": "1458270",
    "end": "1465429"
  },
  {
    "text": "let's so these three points here validate invalid grid name are three",
    "start": "1465429",
    "end": "1471309"
  },
  {
    "text": "tasks that I'm mapping to lambda functions so let's go we don't need to",
    "start": "1471309",
    "end": "1478390"
  },
  {
    "start": "1474000",
    "end": "1596000"
  },
  {
    "text": "close this let's go here this is the management console let's start with",
    "start": "1478390",
    "end": "1483520"
  },
  {
    "text": "lambda so if I write here name you see",
    "start": "1483520",
    "end": "1489610"
  },
  {
    "text": "that I already have validate name process invalid name and grid name these are three lambda functions so the valid",
    "start": "1489610",
    "end": "1496960"
  },
  {
    "text": "data name is as you can imagine is just looking if that is if there is no name",
    "start": "1496960",
    "end": "1505090"
  },
  {
    "text": "in the input event then this is an error so there is syntax that we suggest for",
    "start": "1505090",
    "end": "1510790"
  },
  {
    "text": "every language this is the syntax we use in JavaScript there is I think at least a dot some way to manage errors in",
    "start": "1510790",
    "end": "1516850"
  },
  {
    "text": "JavaScript so this is the one we suggest you to use so if there is no name I",
    "start": "1516850",
    "end": "1522280"
  },
  {
    "text": "create a name error with a message that is no name if the error if the name is",
    "start": "1522280",
    "end": "1527890"
  },
  {
    "text": "not in this validated list of names then I have a name error with a wrong name",
    "start": "1527890",
    "end": "1533400"
  },
  {
    "text": "otherwise I just reported mr. ends correctly and I just pass the input",
    "start": "1533400",
    "end": "1540580"
  },
  {
    "text": "event as output so I don't do anything so I either raise one of these two",
    "start": "1540580",
    "end": "1545980"
  },
  {
    "text": "errors or I just pass through my input event the process invalid name function",
    "start": "1545980",
    "end": "1555910"
  },
  {
    "text": "is doing something very very easy so if I get the error at the error as a cause",
    "start": "1555910",
    "end": "1563890"
  },
  {
    "text": "and then I look for there're messages if from its long name I say I don't know how to greet this name if it's no name",
    "start": "1563890",
    "end": "1570460"
  },
  {
    "text": "please give me a name to greet otherwise it's an unknown error and then I report this message and the final function that",
    "start": "1570460",
    "end": "1578920"
  },
  {
    "text": "is basically almost the same as the first one that we did this morning but without any any check if there is a name",
    "start": "1578920",
    "end": "1586720"
  },
  {
    "text": "as a hello name if there is no name but this should not happen I say hey",
    "start": "1586720",
    "end": "1592950"
  },
  {
    "text": "and it's reporting this greeting so we have these three building blocks let's",
    "start": "1592950",
    "end": "1598800"
  },
  {
    "start": "1596000",
    "end": "1738000"
  },
  {
    "text": "build a state machine out of this so let's go on the step function console so",
    "start": "1598800",
    "end": "1609120"
  },
  {
    "text": "here you have some templates projects that you can use to learn the templates",
    "start": "1609120",
    "end": "1614520"
  },
  {
    "text": "are really interesting because show you lots of examples so there is the hello world and plate is the same template",
    "start": "1614520",
    "end": "1621180"
  },
  {
    "text": "that we saw before so ello it's interesting the wait state I think it's interesting because it shows you how you",
    "start": "1621180",
    "end": "1627510"
  },
  {
    "text": "can wait with step functions so here you have like I start at first state this is",
    "start": "1627510",
    "end": "1636060"
  },
  {
    "text": "the first state is a task is running some lambda function and then the next state is weight using seconds went using",
    "start": "1636060",
    "end": "1644400"
  },
  {
    "text": "seconds so this this is just a name that I use is of type wait it waits for 10",
    "start": "1644400",
    "end": "1651090"
  },
  {
    "text": "seconds and then it goes to wait using time-stamped weight using timestamp is",
    "start": "1651090",
    "end": "1656490"
  },
  {
    "text": "of type weight and as a timestamp this is an absolute time this next step is",
    "start": "1656490",
    "end": "1662430"
  },
  {
    "text": "nice weight using time-stamped part it's showing how we can start to use dynamic",
    "start": "1662430",
    "end": "1669090"
  },
  {
    "text": "values in in the state machines so this is of type weight it's timestamp part and this syntax here",
    "start": "1669090",
    "end": "1676380"
  },
  {
    "text": "is JSON part so JSON part is a syntax that allows you to navigate a JSON",
    "start": "1676380",
    "end": "1681390"
  },
  {
    "text": "document and extract information or eventually change information in a JSON document so here I'm saying dollar is",
    "start": "1681390",
    "end": "1688050"
  },
  {
    "text": "the root of the JSON document so starting from the root there should be a property this expiry date use the value",
    "start": "1688050",
    "end": "1695250"
  },
  {
    "text": "of this property in the state as a timestamp that I need to wait so that means that if I have a lambda function",
    "start": "1695250",
    "end": "1701370"
  },
  {
    "text": "that is doing some processing and you need that then you wait for a specific",
    "start": "1701370",
    "end": "1706470"
  },
  {
    "text": "event to happen you can pass this as output of the lambda function and the state machine will then wait at this",
    "start": "1706470",
    "end": "1713190"
  },
  {
    "text": "time before going further so you can map any business process that is not very",
    "start": "1713190",
    "end": "1719370"
  },
  {
    "text": "fast that as some may be waiting for logistics waiting for other actors to do something in this way they sell this",
    "start": "1719370",
    "end": "1726030"
  },
  {
    "text": "other exam second spot so it's like the previous one but instead of a Venus tan a date you have a some amount of time in",
    "start": "1726030",
    "end": "1733590"
  },
  {
    "text": "seconds to wait and then you have a final state that is running another lambda function so this is telling you",
    "start": "1733590",
    "end": "1739590"
  },
  {
    "start": "1738000",
    "end": "1979000"
  },
  {
    "text": "how the wait state works rate rate rate failure is the way you can retry a task",
    "start": "1739590",
    "end": "1744710"
  },
  {
    "text": "so this is the same Aylward task as before where I call some lambda function",
    "start": "1744710",
    "end": "1751110"
  },
  {
    "text": "but then I can add a retry property to the state and this retry property can",
    "start": "1751110",
    "end": "1756360"
  },
  {
    "text": "have a list of different kind two ways to retry this function so first you say",
    "start": "1756360",
    "end": "1762210"
  },
  {
    "text": "you can catch the error so if the error is custom error then retry with an",
    "start": "1762210",
    "end": "1768780"
  },
  {
    "text": "interval of one second we try for two times and apply this exponential",
    "start": "1768780",
    "end": "1774419"
  },
  {
    "text": "back-off rate so the exponential back-off rate is every time you retire you multiply the interval by this value",
    "start": "1774419",
    "end": "1781559"
  },
  {
    "text": "and is something that in Amazon we use a lot also AWS does that so if it means",
    "start": "1781559",
    "end": "1787230"
  },
  {
    "text": "that if you receive a peak of request and probably that can be a problem where the lambda function fails maybe an",
    "start": "1787230",
    "end": "1792840"
  },
  {
    "text": "external provider was not capable of having this throughput the first time",
    "start": "1792840",
    "end": "1797909"
  },
  {
    "text": "you try after one second and after two second four second eight second you can really spread a peak of requests into a",
    "start": "1797909",
    "end": "1804600"
  },
  {
    "text": "large amount of time the second one is caching or error so you have different",
    "start": "1804600",
    "end": "1810480"
  },
  {
    "text": "intervals max often to rate and back off rate so you can really have different",
    "start": "1810480",
    "end": "1816000"
  },
  {
    "text": "catch different error and depending on the error of different strategies so for example if you have an external API that",
    "start": "1816000",
    "end": "1822270"
  },
  {
    "text": "fails maybe you want to retry with a exponential back off until the API works",
    "start": "1822270",
    "end": "1827570"
  },
  {
    "text": "for a lots of times if you have an internal error or that you know you can solve it's better maybe to fail",
    "start": "1827570",
    "end": "1833220"
  },
  {
    "text": "immediately and report the error in some way so that someone can manage the error so depending on their error you can",
    "start": "1833220",
    "end": "1839100"
  },
  {
    "text": "catch it this states error here is error from the state machine so like the test fail it",
    "start": "1839100",
    "end": "1844980"
  },
  {
    "text": "or any error from the state machine this custom error our error there are raised by the code like I did for the name",
    "start": "1844980",
    "end": "1851789"
  },
  {
    "text": "error in in the validate name function parallel",
    "start": "1851789",
    "end": "1857920"
  },
  {
    "text": "as the name says is the you have a task of type parallel and basically you give",
    "start": "1857920",
    "end": "1864100"
  },
  {
    "text": "this is the next state when all the parallel branch end is the final state and then you have a list with multiple",
    "start": "1864100",
    "end": "1870250"
  },
  {
    "text": "branches branch is a list of states and this will be executed in parallel they must all complete correctly if when all",
    "start": "1870250",
    "end": "1877870"
  },
  {
    "text": "they are complete correctly so you we wait here that everything completes the",
    "start": "1877870",
    "end": "1883330"
  },
  {
    "text": "final state we receive an input a list with all the returning value of the single",
    "start": "1883330",
    "end": "1888760"
  },
  {
    "text": "parallel branch here the catch failure",
    "start": "1888760",
    "end": "1894970"
  },
  {
    "text": "is similar to the retire but instead of returning the same function you can start a different branch and here you",
    "start": "1894970",
    "end": "1903220"
  },
  {
    "text": "basically run a task this is again a lambda function then you catch the error and depending on the error you can have",
    "start": "1903220",
    "end": "1909550"
  },
  {
    "text": "a different next state so if there are this custom you go to custom error fallback if the task failed go to the",
    "start": "1909550",
    "end": "1916780"
  },
  {
    "text": "server type fallback State and so on so you can apply different logic depending",
    "start": "1916780",
    "end": "1922750"
  },
  {
    "text": "on there or you get so it's really a catch try catch and the choice state is",
    "start": "1922750",
    "end": "1929040"
  },
  {
    "text": "similar to the catch but you don't choose depending on an error but you choose depending on the return value of",
    "start": "1929040",
    "end": "1935200"
  },
  {
    "text": "the previous state so here you have the first state is a task a lambda function",
    "start": "1935200",
    "end": "1940630"
  },
  {
    "text": "the return value of this lambda function there should be JSON you create a choice and the choice will look again using",
    "start": "1940630",
    "end": "1948190"
  },
  {
    "text": "gems JSON part so if this JSON document as a full property and the numeric value",
    "start": "1948190",
    "end": "1955810"
  },
  {
    "text": "of this full property is one go to first match state if the numeric value is to",
    "start": "1955810",
    "end": "1961480"
  },
  {
    "text": "go to 2nd match state otherwise the default state is where you have to go and so on so you can really put your",
    "start": "1961480",
    "end": "1969790"
  },
  {
    "text": "business logic here depending a map it to different branch and choices",
    "start": "1969790",
    "end": "1975760"
  },
  {
    "text": "depending on the return value for the different tasks so now I want to create",
    "start": "1975760",
    "end": "1980800"
  },
  {
    "start": "1979000",
    "end": "2060000"
  },
  {
    "text": "this from scratch and I want to create the the",
    "start": "1980800",
    "end": "1985880"
  },
  {
    "text": "the the the state machine that I was showing before so this one should work",
    "start": "1985880",
    "end": "1994490"
  },
  {
    "text": "so this is the the raw state machine if i refresh here you see that it's the we",
    "start": "1996049",
    "end": "2003080"
  },
  {
    "text": "start at validate a name then we catch a name error if there is a name error",
    "start": "2003080",
    "end": "2008539"
  },
  {
    "text": "I go to invalid name otherwise I go to grid name and then there is invalid name and grid name that they both end the",
    "start": "2008539",
    "end": "2016220"
  },
  {
    "text": "state machine so this works but you see there is no resource here so if I click",
    "start": "2016220",
    "end": "2023120"
  },
  {
    "text": "here I automatically have the list of the functions that I can use so this is validate name so this is this is the arm",
    "start": "2023120",
    "end": "2031240"
  },
  {
    "text": "then here I have invalid name so this the function is called process invalid",
    "start": "2031240",
    "end": "2037220"
  },
  {
    "text": "name and greet name here I should do it name function ok now this state machine",
    "start": "2037220",
    "end": "2045230"
  },
  {
    "text": "is mapped to the write functions and I",
    "start": "2045230",
    "end": "2051618"
  },
  {
    "text": "can give it a name so let's call it build day and I can create the state",
    "start": "2051619",
    "end": "2059690"
  },
  {
    "text": "machine so now that it's created I can run executions of the state machine so",
    "start": "2059690",
    "end": "2065000"
  },
  {
    "start": "2060000",
    "end": "2286000"
  },
  {
    "text": "that's how we call it so normally invocation is for lambda function execution is for state machine so I can create a new execution and when",
    "start": "2065000",
    "end": "2072710"
  },
  {
    "text": "I create a new execution you have to give an input state so let's give it a",
    "start": "2072710",
    "end": "2077990"
  },
  {
    "text": "name you know that the only valid name is vanilla so I can start the execution",
    "start": "2077990",
    "end": "2084290"
  },
  {
    "text": "you see that this started we are now in the valid name validate name the console",
    "start": "2084290",
    "end": "2090500"
  },
  {
    "text": "is slower so actually we'll probably already pass this state but it gives you it takes some time to update so the",
    "start": "2090500",
    "end": "2097670"
  },
  {
    "text": "validate name worked well we went to grid name and then it finished",
    "start": "2097670",
    "end": "2102680"
  },
  {
    "text": "so here I have the information I can see the input it was named vanilla and if I",
    "start": "2102680",
    "end": "2109339"
  },
  {
    "text": "go to output I get the output is hello Danilo from the grid name if I click",
    "start": "2109339",
    "end": "2114830"
  },
  {
    "text": "here in any state I get the input and the output of every state so validate name in this case didn't",
    "start": "2114830",
    "end": "2121800"
  },
  {
    "text": "nothing because the name was valid and here I give also the list of all the",
    "start": "2121800",
    "end": "2126840"
  },
  {
    "text": "tasks where I entered where I started a lambda function I can click on to get the link to the lambda console or to the",
    "start": "2126840",
    "end": "2134220"
  },
  {
    "text": "cloud watch logs of the lambda function to see each step what happened and I am the clear time stem of what happened so",
    "start": "2134220",
    "end": "2141120"
  },
  {
    "text": "this is really important because it gives you the audit ability that you need for a business process that can be",
    "start": "2141120",
    "end": "2146910"
  },
  {
    "text": "mapped here so let's try to run a new execution so let's try with our own name",
    "start": "2146910",
    "end": "2153540"
  },
  {
    "text": "so done hello with an H so we are in the",
    "start": "2153540",
    "end": "2158760"
  },
  {
    "text": "validate name I can see that the input",
    "start": "2158760",
    "end": "2164340"
  },
  {
    "text": "is this one the output we still don't have the input probably the function or later me needed but the console is a little bit slower to catch up and then",
    "start": "2164340",
    "end": "2171390"
  },
  {
    "text": "this time there the output was an error we went to invalid name and the output",
    "start": "2171390",
    "end": "2177390"
  },
  {
    "text": "is I don't know how to greet the name and even if I see the all execution step",
    "start": "2177390",
    "end": "2182430"
  },
  {
    "text": "I see this is the input to the state machine execution and the output is I don't know how to greet this name",
    "start": "2182430",
    "end": "2189200"
  },
  {
    "text": "finally just for fun let's give an empty state with no name and we go to valid",
    "start": "2189200",
    "end": "2199140"
  },
  {
    "text": "name again and now the console is catching up and in a matter of seconds",
    "start": "2199140",
    "end": "2206010"
  },
  {
    "text": "we should see please give me a name to greet and this is the all the three",
    "start": "2206010",
    "end": "2212250"
  },
  {
    "text": "possible use cases of this very basic state machine but I think this can give",
    "start": "2212250",
    "end": "2217410"
  },
  {
    "text": "you an idea of how you can map a business process and also how this state",
    "start": "2217410",
    "end": "2222570"
  },
  {
    "text": "machine works so what this service provides is storing the state up to one year and each step is giving you the",
    "start": "2222570",
    "end": "2230490"
  },
  {
    "text": "output of a step is the input of the next step and is stored reliable across multiple availability zone so you can",
    "start": "2230490",
    "end": "2237060"
  },
  {
    "text": "have up to 1 million of this execution in parallel and each one has their own state that is propagated with state",
    "start": "2237060",
    "end": "2243750"
  },
  {
    "text": "machine you pay by the state transition so it's the cost is very low but you pay for every state transition so it's not",
    "start": "2243750",
    "end": "2250830"
  },
  {
    "text": "the invocation but it's many state-transition UF normally if you have a very complex process is more",
    "start": "2250830",
    "end": "2257860"
  },
  {
    "text": "expensive the lambda but normally you use this not for everything in your website but for very important business",
    "start": "2257860",
    "end": "2263740"
  },
  {
    "text": "process so for example you have maybe a website where you are an e-commerce company but when when someone is buying",
    "start": "2263740",
    "end": "2269770"
  },
  {
    "text": "something then you need to start a business process that it's checking payment checking the availability of the",
    "start": "2269770",
    "end": "2275230"
  },
  {
    "text": "product in the warehouses starting the delivery check keeping the customer updated with the delivery so this kind",
    "start": "2275230",
    "end": "2281320"
  },
  {
    "text": "of things is what you would map here not like a single invocation to a web server",
    "start": "2281320",
    "end": "2286530"
  },
  {
    "start": "2286000",
    "end": "2714000"
  },
  {
    "text": "so let's dive a little bit deeper into the activities to see how that works so",
    "start": "2286530",
    "end": "2292020"
  },
  {
    "text": "this is let's make it a little bit",
    "start": "2292020",
    "end": "2297760"
  },
  {
    "text": "bigger so I'm using the AWS CLI it runs",
    "start": "2297760",
    "end": "2304840"
  },
  {
    "text": "everywhere it's written in Python you can use it Windows Mac Linux and AWS step functions you have access to all",
    "start": "2304840",
    "end": "2311680"
  },
  {
    "text": "the primitives that I get here and here I get create activity so I can create this external tasks that you can use",
    "start": "2311680",
    "end": "2319840"
  },
  {
    "text": "instead of lambda function and then here I can send that this task failed the",
    "start": "2319840",
    "end": "2325450"
  },
  {
    "text": "heartbeat or this task succeeded so let's since it's my last session",
    "start": "2325450",
    "end": "2330790"
  },
  {
    "text": "let's copy and paste because I don't want to toward the possible so let's see if there are activities now currently",
    "start": "2330790",
    "end": "2337720"
  },
  {
    "text": "there are no activities I think so let's see list activities there are no activities created in in this region so",
    "start": "2337720",
    "end": "2346720"
  },
  {
    "text": "let's create an activity and this activity let's think this is an external validation maybe in your workflow at",
    "start": "2346720",
    "end": "2352570"
  },
  {
    "text": "some point you need to connect and call a legacy system that is on-premise and needs to do something to validate your",
    "start": "2352570",
    "end": "2358840"
  },
  {
    "text": "business process so you can run on AWS because you have something that is there from from from for ages so I create this",
    "start": "2358840",
    "end": "2366370"
  },
  {
    "text": "external validation and you see I get an activity arm now this a unique way to",
    "start": "2366370",
    "end": "2371830"
  },
  {
    "text": "identify this external validation activity and now I can see if there's",
    "start": "2371830",
    "end": "2377650"
  },
  {
    "text": "something to do for me so let's see so basically I do AWS step functions",
    "start": "2377650",
    "end": "2385260"
  },
  {
    "text": "as I said it's late so step function get activity tasks so this is what the polar",
    "start": "2389980",
    "end": "2397250"
  },
  {
    "text": "so who needs to run this activity outside of the step function should call",
    "start": "2397250",
    "end": "2402410"
  },
  {
    "text": "to say it has something to do for me and you have to pass the the activity art",
    "start": "2402410",
    "end": "2408370"
  },
  {
    "text": "and the activity arm is this one which was reported so now this could be for",
    "start": "2408370",
    "end": "2414920"
  },
  {
    "text": "example a group of servers running on-premise an auto scaling group on AWS",
    "start": "2414920",
    "end": "2419960"
  },
  {
    "text": "or it can be even some software running on premise on a legacy software now",
    "start": "2419960",
    "end": "2427310"
  },
  {
    "text": "there's nothing to do because this is a new activity nobody asked to run this activity there's nothing to do so let's",
    "start": "2427310",
    "end": "2432920"
  },
  {
    "text": "see if we can use this so you see this is using long polling so now I'm pending waiting for something to do how can we",
    "start": "2432920",
    "end": "2439580"
  },
  {
    "text": "have something to do you can go here and create a new state machine and we can",
    "start": "2439580",
    "end": "2446330"
  },
  {
    "text": "call it activity demo and this state machine let's see if we here",
    "start": "2446330",
    "end": "2457600"
  },
  {
    "text": "so for simplicity I just create a state machine that as a single state but again",
    "start": "2462020",
    "end": "2467869"
  },
  {
    "text": "you can create anything complex so I have an external validation state",
    "start": "2467869",
    "end": "2473599"
  },
  {
    "text": "disease of type task here now work as a resource instead of passing a lambda",
    "start": "2473599",
    "end": "2478730"
  },
  {
    "text": "function I passed the arm of the activity so this is the way that the state machine knows",
    "start": "2478730",
    "end": "2485240"
  },
  {
    "text": "this is not a lambda function but is an activity and then this will finish this",
    "start": "2485240",
    "end": "2490550"
  },
  {
    "text": "is similarly to the hello world but I have this external validation I can now",
    "start": "2490550",
    "end": "2495730"
  },
  {
    "text": "create the state machine and still if I go here I'm still pending nothing to do",
    "start": "2495730",
    "end": "2502490"
  },
  {
    "text": "now I can trigger an execution of a state machine I can send a comment like",
    "start": "2502490",
    "end": "2510010"
  },
  {
    "text": "the day is almost over stay for the AP",
    "start": "2510010",
    "end": "2516800"
  },
  {
    "text": "power so this is the input to my execution now if I go here I see that",
    "start": "2516800",
    "end": "2525740"
  },
  {
    "text": "something happened actually this activity received received something to",
    "start": "2525740",
    "end": "2531740"
  },
  {
    "text": "do this is the the part basically I get the input to my state and is the",
    "start": "2531740",
    "end": "2537830"
  },
  {
    "text": "serialized version of the input document so the document and then I get this task talk and in this text token is a unique",
    "start": "2537830",
    "end": "2545150"
  },
  {
    "text": "string that I can use when I reply to say I this activity completed or failed or",
    "start": "2545150",
    "end": "2551060"
  },
  {
    "text": "there is a heartbeat I use this tasks token to connect back so what I can do for example if we look here we see that",
    "start": "2551060",
    "end": "2558140"
  },
  {
    "text": "this activity is still this state machine execution is still going on I am",
    "start": "2558140",
    "end": "2563270"
  },
  {
    "text": "up to one year to reply so now we can wait a few days now let's let's do it",
    "start": "2563270",
    "end": "2568820"
  },
  {
    "text": "quickly so let's go so if I go back here just to avoid reinventing the wheel so",
    "start": "2568820",
    "end": "2577010"
  },
  {
    "text": "basically I can send a heartbeat with this syntax it's not required because I",
    "start": "2577010",
    "end": "2583460"
  },
  {
    "text": "didn't set enforce that but in my state machine I can say run this activity and ask for an heartbeat every 10 seconds or",
    "start": "2583460",
    "end": "2591380"
  },
  {
    "text": "30 minutes and then if you don't receive that the state machine will this activity failed and I will make it",
    "start": "2591380",
    "end": "2597620"
  },
  {
    "text": "available for another polar to start working on this and here you need to",
    "start": "2597620",
    "end": "2603410"
  },
  {
    "text": "give the old task token so now I'm reporting the heartbeat nothing actually will change but and if you go here we",
    "start": "2603410",
    "end": "2611270"
  },
  {
    "text": "see that it is still running now I can report maybe a success and I should use",
    "start": "2611270",
    "end": "2619600"
  },
  {
    "text": "the usually make mistakes here with the syntax so send a task success or failure",
    "start": "2619600",
    "end": "2625520"
  },
  {
    "text": "orbit this is the task output is a string that contains inside a JSON so you need to escape all the characters",
    "start": "2625520",
    "end": "2632810"
  },
  {
    "text": "and here I can give back again my token okay and let's go here and we should see",
    "start": "2632810",
    "end": "2641300"
  },
  {
    "text": "the state machine yeah so the state machine execution terminated and if I go",
    "start": "2641300",
    "end": "2648410"
  },
  {
    "text": "in output I see the result okay is what I passed here so in this way you can",
    "start": "2648410",
    "end": "2654110"
  },
  {
    "text": "integrate with any legacy software it's really a few lines of code or a few lines of script because you can use the",
    "start": "2654110",
    "end": "2661220"
  },
  {
    "text": "AWS SDK instead of the CLI or you can use this for a man without validation",
    "start": "2661220",
    "end": "2666440"
  },
  {
    "text": "it's it's really the way to extend beyond simple simple simple lambda",
    "start": "2666440",
    "end": "2671450"
  },
  {
    "text": "functions and it's for example if you have I mean integration with an external",
    "start": "2671450",
    "end": "2677300"
  },
  {
    "text": "system that is sending you messages you can very easily wrap this into this kind of command so that you can get",
    "start": "2677300",
    "end": "2683360"
  },
  {
    "text": "validation that moves your business process forward from external notification from a payment service from",
    "start": "2683360",
    "end": "2689300"
  },
  {
    "text": "a delivery service so if you have your deliver your e-commerce business process maybe if the delivery service you're",
    "start": "2689300",
    "end": "2696830"
  },
  {
    "text": "using is sending you messages through some any web or non web architecture you",
    "start": "2696830",
    "end": "2702710"
  },
  {
    "text": "can take this message and then drop this into this syntax so that your state machine will say ok that the parcel has",
    "start": "2702710",
    "end": "2708620"
  },
  {
    "text": "been delivered to the customer ok so",
    "start": "2708620",
    "end": "2715220"
  },
  {
    "start": "2714000",
    "end": "2770000"
  },
  {
    "text": "this was the more technical part so now let's see some case studies because maybe now we understand understand how",
    "start": "2715220",
    "end": "2722210"
  },
  {
    "text": "they work but lots of people can say why should I use this so this is a few",
    "start": "2722210",
    "end": "2727580"
  },
  {
    "text": "customers the shoulders tourists at reinvent last year at in December so this is coca-cola",
    "start": "2727580",
    "end": "2733990"
  },
  {
    "text": "so coca-cola I think only in the US I'm not sure if they have it this overseas they have like an application where you",
    "start": "2733990",
    "end": "2741010"
  },
  {
    "text": "can get credits when you buy drinks and then when you have credits you can get a free drink so this is amazing marketing",
    "start": "2741010",
    "end": "2748000"
  },
  {
    "text": "people is very the problem is that sometimes they get like I know if I get another coke then I get a free one",
    "start": "2748000",
    "end": "2754660"
  },
  {
    "text": "because I reach my limit but then they go and then the application then they pass the bar code of the application is",
    "start": "2754660",
    "end": "2760150"
  },
  {
    "text": "not sorry you don't still don't have credits so they have this the number of credits was getting out of sync and this",
    "start": "2760150",
    "end": "2766330"
  },
  {
    "text": "was giving up very bad customer experience as you can imagine so they",
    "start": "2766330",
    "end": "2771490"
  },
  {
    "start": "2770000",
    "end": "2834000"
  },
  {
    "text": "discovered that the problem was that they use a payment processor that was talking with a legacy consumer database",
    "start": "2771490",
    "end": "2777370"
  },
  {
    "text": "and the legacy consumer database was much lower than the lambda functions they were using so what happened is that",
    "start": "2777370",
    "end": "2783970"
  },
  {
    "text": "the consumer database was saying ok I paid so they were sending a refresh of",
    "start": "2783970",
    "end": "2791980"
  },
  {
    "text": "the state but when they were reading back the information a little super database even if the payment was",
    "start": "2791980",
    "end": "2797350"
  },
  {
    "text": "correctly gone it was still not updated because this is legacy application was lower so they just added a state machine",
    "start": "2797350",
    "end": "2804190"
  },
  {
    "text": "that is waiting for I think 90 seconds before reading the updated value so",
    "start": "2804190",
    "end": "2809500"
  },
  {
    "text": "before when you were going out of sync there was no way to sync back because",
    "start": "2809500",
    "end": "2814540"
  },
  {
    "text": "you need another payment to resynchronize this process so the customer was getting a wrong credit value now they wait for 90 second and",
    "start": "2814540",
    "end": "2821830"
  },
  {
    "text": "then they update the credit value and they know that the consumer database is updated by by them so it takes one",
    "start": "2821830",
    "end": "2828010"
  },
  {
    "text": "minute and a half but now they have it and even if it's very simple for them it was much easier to do that than to add",
    "start": "2828010",
    "end": "2833980"
  },
  {
    "text": "any other loop and stuff this is Thomson Reuters so Thomson Reuters if you know them they",
    "start": "2833980",
    "end": "2840910"
  },
  {
    "start": "2834000",
    "end": "2884000"
  },
  {
    "text": "basically sell information and the speed of the they can provide you information especially for the financial market is",
    "start": "2840910",
    "end": "2847600"
  },
  {
    "text": "important and part of this is videos so they needed to transcode videos and to",
    "start": "2847600",
    "end": "2854950"
  },
  {
    "text": "transform 350 videos clips per day into each of those was to be transformed into",
    "start": "2854950",
    "end": "2861280"
  },
  {
    "text": "14 different form so it takes some time to do that they were using ffmpeg it's an open-source",
    "start": "2861280",
    "end": "2867340"
  },
  {
    "text": "tool to do that I normally ffmpeg it takes the same time to do the recording as the length of the",
    "start": "2867340",
    "end": "2873250"
  },
  {
    "text": "video so that means that they were quite slow in providing the videos from during",
    "start": "2873250",
    "end": "2878260"
  },
  {
    "text": "the receive the video and they have all the 14 formats for 350 Clips available it was not the best experience so",
    "start": "2878260",
    "end": "2885820"
  },
  {
    "start": "2884000",
    "end": "2947000"
  },
  {
    "text": "basically they found out that with ffmpeg you can find the key frames inside the video the key frames are the",
    "start": "2885820",
    "end": "2892630"
  },
  {
    "text": "full frames that are part of a video encoding normally most video encoding they put keyframes and then for some",
    "start": "2892630",
    "end": "2899050"
  },
  {
    "text": "time they put the delta d the difference and then when the difference is too much they put another keyframe and that's how",
    "start": "2899050",
    "end": "2905530"
  },
  {
    "text": "impaired and most video encoding works so it's very fast with a fair peg to",
    "start": "2905530",
    "end": "2911040"
  },
  {
    "text": "process the old video and extract only the key frames so they use this to split there's the video into much smaller part",
    "start": "2911040",
    "end": "2918190"
  },
  {
    "text": "and then they process all these smaller parts that usually are something like 1",
    "start": "2918190",
    "end": "2923530"
  },
  {
    "text": "second or alpha second in parallel to do the encoding and then they join the",
    "start": "2923530",
    "end": "2928600"
  },
  {
    "text": "video back so in this way they could move the encoding or video from 20 minutes to 2 minutes running all the",
    "start": "2928600",
    "end": "2935140"
  },
  {
    "text": "lambda functions in parallel and since you pay mostly by the duration the cost",
    "start": "2935140",
    "end": "2940450"
  },
  {
    "text": "is the same because instead of running a lots of lambda function for in sequence you just run them in parallel and this",
    "start": "2940450",
    "end": "2947680"
  },
  {
    "text": "is how they work so basically they have all these prepare sleeps pre-prepared",
    "start": "2947680",
    "end": "2953110"
  },
  {
    "text": "performs lips need perform at prepare Paul wait for results and then they give",
    "start": "2953110",
    "end": "2958360"
  },
  {
    "text": "the comments back so it looks a little strange by the way this is a nice trick",
    "start": "2958360",
    "end": "2964210"
  },
  {
    "text": "they use so inside the lambda function you have very little storage you have a",
    "start": "2964210",
    "end": "2969430"
  },
  {
    "text": "/tmp that is 512 megabyte and it doesn't grow it's there it's reused if you",
    "start": "2969430",
    "end": "2977680"
  },
  {
    "text": "reside we recycle the container but it's not we can delete it in in any time so",
    "start": "2977680",
    "end": "2984400"
  },
  {
    "text": "basically to process they use ffmpeg to process the videos and then they send",
    "start": "2984400",
    "end": "2989590"
  },
  {
    "text": "the output straight to the common light interface and the address s3",
    "start": "2989590",
    "end": "2994900"
  },
  {
    "text": "command-line interface can take standard input in UNIX and send it straight to history so basically they",
    "start": "2994900",
    "end": "3000750"
  },
  {
    "text": "don't store the video on disk but they use our traditional binary and they take the output send it to s3 using the CLI",
    "start": "3000750",
    "end": "3008160"
  },
  {
    "text": "as a stream and it's then written into this file so this is a nice trick if you need to write an intermediate file",
    "start": "3008160",
    "end": "3015530"
  },
  {
    "text": "because then you need to upload it to s3 you can just use this streaming architecture and this works also in",
    "start": "3015530",
    "end": "3021720"
  },
  {
    "text": "input so this is the standard UNIX syntax the dash means standard input or standard output so this is copy standard",
    "start": "3021720",
    "end": "3028950"
  },
  {
    "text": "input to this file if you switch the dash here it would mean copy this file",
    "start": "3028950",
    "end": "3034170"
  },
  {
    "text": "to standard output and then you can add a pipe and process information so this is a nice trick to to use memory instead",
    "start": "3034170",
    "end": "3041340"
  },
  {
    "text": "of storage but still you need the memory towards the file and then they decided",
    "start": "3041340",
    "end": "3047490"
  },
  {
    "start": "3044000",
    "end": "3095000"
  },
  {
    "text": "when we have to run like 100 or 1000 lambda function in parallel we don't",
    "start": "3047490",
    "end": "3053580"
  },
  {
    "text": "want to do that inside the state machine because it would be complex so basically they run everyday use s3 as a trigger so",
    "start": "3053580",
    "end": "3061530"
  },
  {
    "text": "the state machine will write 100 segments each an object each file will",
    "start": "3061530",
    "end": "3067980"
  },
  {
    "text": "trigger a lambda function that will process this small portion of the video file and then they have another lambda",
    "start": "3067980",
    "end": "3074610"
  },
  {
    "text": "function that will wait for all these lambda function to complete when everything is complete that will join back the file so this is a nice trick",
    "start": "3074610",
    "end": "3082110"
  },
  {
    "text": "because otherwise with the the Jason syntax you don't have a dynamic way of",
    "start": "3082110",
    "end": "3087420"
  },
  {
    "text": "launching multiple branches you need to are coded a number of parallel branches in this way they put this outside of the",
    "start": "3087420",
    "end": "3093840"
  },
  {
    "text": "of the state machine and this is the syntax just to give you an idea they use",
    "start": "3093840",
    "end": "3099030"
  },
  {
    "start": "3095000",
    "end": "3272000"
  },
  {
    "text": "they manipulate the state in an interesting way so they start with they start with an init here it's of type",
    "start": "3099030",
    "end": "3107490"
  },
  {
    "text": "pass and pass means that you don't do nothing but they manipulate the input",
    "start": "3107490",
    "end": "3112770"
  },
  {
    "text": "State and they take their is the result path here and the result basically saying take the JSON object that is the",
    "start": "3112770",
    "end": "3123120"
  },
  {
    "text": "the dollar dollars this is Jason pot so dollar means the root in the root take",
    "start": "3123120",
    "end": "3129780"
  },
  {
    "text": "the operation that can be there and put preparers split so prepare split will be",
    "start": "3129780",
    "end": "3136860"
  },
  {
    "text": "the value of the operation in the state and pass to the prover split state and",
    "start": "3136860",
    "end": "3141960"
  },
  {
    "text": "if you look here the lambda function is always the same they're always using a",
    "start": "3141960",
    "end": "3147450"
  },
  {
    "text": "single lambda function because this lambda function will look in input for the operation and depending on the",
    "start": "3147450",
    "end": "3153210"
  },
  {
    "text": "operation lady receives it will do a different things so if the operation is prepare split it will prepare the split",
    "start": "3153210",
    "end": "3159570"
  },
  {
    "text": "of the file so look for the key frames then it will when the split is prepared",
    "start": "3159570",
    "end": "3164580"
  },
  {
    "text": "they will change the operation to perform split and then they call the",
    "start": "3164580",
    "end": "3170100"
  },
  {
    "text": "same lambda function but the operation now is performing the split so they will do it will do the split em right to s3",
    "start": "3170100",
    "end": "3177350"
  },
  {
    "text": "this will go to split perform at and then it will wait for four results and",
    "start": "3177350",
    "end": "3182850"
  },
  {
    "text": "it will enter in in a loop don't enter into all the details because it's quite tricky but the idea is that they have a",
    "start": "3182850",
    "end": "3190620"
  },
  {
    "text": "multiple state well they arrive and they look for Apple status and they have a",
    "start": "3190620",
    "end": "3196020"
  },
  {
    "text": "choice so if they arrive here and the post status will be just submitted and",
    "start": "3196020",
    "end": "3202170"
  },
  {
    "text": "then they go to loop waiting using seconds loop weight using seconds will wait three seconds and then call a",
    "start": "3202170",
    "end": "3208560"
  },
  {
    "text": "lambda function the lambda function will look at if all the encoding of this 100",
    "start": "3208560",
    "end": "3215130"
  },
  {
    "text": "function as completed if it has completed it will move will change the state to complete otherwise we will",
    "start": "3215130",
    "end": "3224450"
  },
  {
    "text": "change the state to progress progressing so it goes back here and we'll see it's",
    "start": "3224450",
    "end": "3230070"
  },
  {
    "text": "complete now it's progressing go again here with three seconds called the lambda function",
    "start": "3230070",
    "end": "3235140"
  },
  {
    "text": "and then at some point the state will be returned by the lambda function complete",
    "start": "3235140",
    "end": "3240330"
  },
  {
    "text": "and then it will go to serve at complete state and here it will change the operation to come cut to concatenate all",
    "start": "3240330",
    "end": "3247350"
  },
  {
    "text": "these small videos and then it will go to the complete state where the final",
    "start": "3247350",
    "end": "3252840"
  },
  {
    "text": "lambda function will take this video and we send it to the video shipping service that will",
    "start": "3252840",
    "end": "3259470"
  },
  {
    "text": "send it to the customer so it looks a little bit strange but it's how you can build a loop and wait for something",
    "start": "3259470",
    "end": "3265530"
  },
  {
    "text": "extended they chose three seconds because they really wanted to minimize the time when everything finished so",
    "start": "3265530",
    "end": "3274590"
  },
  {
    "start": "3272000",
    "end": "3303000"
  },
  {
    "text": "they did quite interesting things I think the most important is that they could easily scale to 1,000 concurrent",
    "start": "3274590",
    "end": "3282570"
  },
  {
    "text": "lambdas if they need it just for a few seconds and then they shut down doing",
    "start": "3282570",
    "end": "3288240"
  },
  {
    "text": "the same with 1000 ec2 instances it would not be as fast it will be much more cost less costly and complex to",
    "start": "3288240",
    "end": "3294630"
  },
  {
    "text": "manage so they can really scale as much as they want and shut down in a matter of seconds and they only pay for effort",
    "start": "3294630",
    "end": "3300510"
  },
  {
    "text": "the hundreds of milliseconds that they use this is another customer is frame",
    "start": "3300510",
    "end": "3307560"
  },
  {
    "text": "dot IO so frame dot IO is again doing videos and they are in the business of",
    "start": "3307560",
    "end": "3314760"
  },
  {
    "text": "review and collaboration of videos and they they say I want to use lambda but",
    "start": "3314760",
    "end": "3320370"
  },
  {
    "text": "sometimes my video are long I don't want to do the splitting so they simply simply want to choose if the video is",
    "start": "3320370",
    "end": "3325680"
  },
  {
    "text": "long I use containers with ECS that's the other track if if they if they want",
    "start": "3325680",
    "end": "3332520"
  },
  {
    "text": "if the video is short I can use the five minutes of lambda I can do the encoding so they have like this workflow we have",
    "start": "3332520",
    "end": "3339300"
  },
  {
    "start": "3336000",
    "end": "3351000"
  },
  {
    "text": "the encoder decider that will choose if they want to run ECS or the lambda encoder and then at the end they have",
    "start": "3339300",
    "end": "3345900"
  },
  {
    "text": "two successive failed state that are shared by the two different parallel process and they just use in the for",
    "start": "3345900",
    "end": "3353820"
  },
  {
    "text": "when they get in input the state as an asset property that asked sides and direction and depending on the sides in",
    "start": "3353820",
    "end": "3360090"
  },
  {
    "text": "the duration of the video they run the lambda encoder or the ACS encoder as the",
    "start": "3360090",
    "end": "3365610"
  },
  {
    "text": "next state and then if we look at the",
    "start": "3365610",
    "end": "3372510"
  },
  {
    "text": "code there is like they have disk in case they run a container we found that",
    "start": "3372510",
    "end": "3379920"
  },
  {
    "text": "they retry for 720 times every five seconds that's an hour I think and we",
    "start": "3379920",
    "end": "3388320"
  },
  {
    "text": "so that basically what happens is that when they submit jobs to their container cluster using ECS sometimes the cluster",
    "start": "3388320",
    "end": "3394860"
  },
  {
    "text": "is out of resources there's no available resources the cluster will out of scale but usually it takes some minutes so",
    "start": "3394860",
    "end": "3401370"
  },
  {
    "text": "basically they use this simple loop to say okay if there are no available resource in my container cluster I will",
    "start": "3401370",
    "end": "3406590"
  },
  {
    "text": "wait for auto-scaling or resources to get freed so I just retry every five seconds and then when there is the",
    "start": "3406590",
    "end": "3412290"
  },
  {
    "text": "results that the container with the encoding will trigger and then they have",
    "start": "3412290",
    "end": "3419910"
  },
  {
    "text": "like the final parts I think here when they finish they use again cloud watch",
    "start": "3419910",
    "end": "3427500"
  },
  {
    "text": "events so twelve events normally is used by is triggered by events inside the WS",
    "start": "3427500",
    "end": "3432600"
  },
  {
    "text": "but you can use it as a message bus if you want or an event bus so they use this to communicate and their other",
    "start": "3432600",
    "end": "3438660"
  },
  {
    "text": "business process that we listen for this cloud watch events custom events that they create to continue and do and use",
    "start": "3438660",
    "end": "3445290"
  },
  {
    "text": "the video so this is the other use case so if really can't stop liking state",
    "start": "3445290",
    "end": "3453690"
  },
  {
    "text": "machine this is the link where you should go this is where we have a few tutorials that you can follow along with",
    "start": "3453690",
    "end": "3460200"
  },
  {
    "text": "the console so the image recognition example that we did multiple times over",
    "start": "3460200",
    "end": "3465210"
  },
  {
    "text": "the day there's a nice tutorial that tells you how to build it so if you want to get practice it's nice also the EBS",
    "start": "3465210",
    "end": "3471120"
  },
  {
    "text": "snapshot management they brought at this link and finally since we discover",
    "start": "3471120",
    "end": "3476820"
  },
  {
    "text": "customer using state machine in completely different way that we expected this is the hashtag so if you",
    "start": "3476820",
    "end": "3484110"
  },
  {
    "text": "use state machine just tell us what you do on this hashtag the service team is really following this Ash attack and",
    "start": "3484110",
    "end": "3491370"
  },
  {
    "text": "they're looking for what customer are doing and ways to improve the service based on your feedback and with this I",
    "start": "3491370",
    "end": "3499440"
  },
  {
    "text": "think this very long day of server less technology is coming to an end we",
    "start": "3499440",
    "end": "3505560"
  },
  {
    "text": "starting the the happy hour in a minute in the other room where the lunch was served I hope you can stay but even more",
    "start": "3505560",
    "end": "3513480"
  },
  {
    "text": "I hope you enjoyed the day I hope it was interesting and happy to get your feedback thank you",
    "start": "3513480",
    "end": "3518670"
  },
  {
    "text": "[Applause]",
    "start": "3518670",
    "end": "3525209"
  }
]