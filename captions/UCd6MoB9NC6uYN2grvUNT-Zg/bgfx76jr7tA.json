[
  {
    "start": "0",
    "end": "325000"
  },
  {
    "text": "[Music] hi everyone welcome back to aws supports",
    "start": "350",
    "end": "7040"
  },
  {
    "text": "you where aws support experts provide tips to optimize performance in the cloud lower costs and provide you with",
    "start": "7040",
    "end": "13840"
  },
  {
    "text": "best practice and design considerations i'm your host today my name is clint wyckoff and i'm an enterprise support",
    "start": "13840",
    "end": "19279"
  },
  {
    "text": "manager based out of pittsburgh pennsylvania again thanks for taking a few minutes to join us today on the",
    "start": "19279",
    "end": "25519"
  },
  {
    "text": "twitch stream joining me today from aws enterprise support our team colleagues",
    "start": "25519",
    "end": "31039"
  },
  {
    "text": "of mine kieran and martian so uh here and let's start with you why don't you give us a quick introduction and welcome",
    "start": "31039",
    "end": "36880"
  },
  {
    "text": "to the show hello everyone i am hirin purabiya i am a technical account manager based out of the new york office",
    "start": "36880",
    "end": "42879"
  },
  {
    "text": "of amazon my pronouns are he and him nice to meet you all hi everyone my name is marianto",
    "start": "42879",
    "end": "49520"
  },
  {
    "text": "haributro and i'm a senior technical account manager at aws based out of new york city",
    "start": "49520",
    "end": "55760"
  },
  {
    "text": "fantastic and welcome to the show here in martial until like i said thanks for taking a few minutes to join us today",
    "start": "55760",
    "end": "61280"
  },
  {
    "text": "the topic for today's conversation is going to be infrastructure as code uh",
    "start": "61280",
    "end": "66880"
  },
  {
    "text": "with aws cloud formation excuse me getting started with infrastructure is code in aws cloud formation we're going",
    "start": "66880",
    "end": "73920"
  },
  {
    "text": "to specifically focus on how to get started writing some uh simple cloud formation templates and",
    "start": "73920",
    "end": "80159"
  },
  {
    "text": "then we'll go ahead and deploy those for you here on the ship uh before we get to the topic and conversation at hand just",
    "start": "80159",
    "end": "86960"
  },
  {
    "text": "a quick note to the attendees online please please feel free to utilize the chat there on the right hand side of the",
    "start": "86960",
    "end": "93680"
  },
  {
    "text": "twitch screen we're in first we're interested in a where you're joining us from today but",
    "start": "93680",
    "end": "98960"
  },
  {
    "text": "then we also want to hear are you utilizing infrastructure as code are you leveraging cloud information",
    "start": "98960",
    "end": "104560"
  },
  {
    "text": "maybe today inside of your environment what pipeline is it a part of what applications are you deploying what use",
    "start": "104560",
    "end": "110479"
  },
  {
    "text": "cases are you looking after um and then if you have any questions along the way throw those in the chat as well uh we're",
    "start": "110479",
    "end": "116960"
  },
  {
    "text": "interested in your feedback so we'll drop a link in the chat here in a second to a survey that we have online so",
    "start": "116960",
    "end": "123520"
  },
  {
    "text": "that'll give you the opportunity to give us feedback about the show aws supports you what you like",
    "start": "123520",
    "end": "128560"
  },
  {
    "text": "what you don't like maybe what you want to see in a future episode um but yeah so with all that out of the",
    "start": "128560",
    "end": "135360"
  },
  {
    "text": "way i'm going to throw it over to martian first and he's going to give us a quick rundown of today's episode",
    "start": "135360",
    "end": "143760"
  },
  {
    "text": "okay thank you clint so before we begin i'll just start with the ew support you",
    "start": "143760",
    "end": "149840"
  },
  {
    "text": "so at aws customer obsession is our number one leadership principles we start from the customer and we work",
    "start": "149840",
    "end": "156319"
  },
  {
    "text": "backwards and as a technical account manager at aws i am the customer's advocate i listen to my customers need",
    "start": "156319",
    "end": "163200"
  },
  {
    "text": "and help them in various capacities so for example i provided workshops to my customers so that they can have hands-on",
    "start": "163200",
    "end": "170160"
  },
  {
    "text": "experience with adobe services ranging from basic intermediate and advanced level i also provide best practice",
    "start": "170160",
    "end": "176879"
  },
  {
    "text": "guidance on aw services throughout our regular meetings and i also manage my customer support",
    "start": "176879",
    "end": "182560"
  },
  {
    "text": "cases and escalate them to the right service team if necessary and also constantly keep my customer up to date",
    "start": "182560",
    "end": "189519"
  },
  {
    "text": "with the latest product features and upcoming launches of aws services and if there are any specific aw services",
    "start": "189519",
    "end": "196560"
  },
  {
    "text": "then my customer would like to know deeper i work also with aws subject matter experts to help the customer deep",
    "start": "196560",
    "end": "203120"
  },
  {
    "text": "dive into the service and whenever there are any features that my customer would like to see it being",
    "start": "203120",
    "end": "208640"
  },
  {
    "text": "implemented in any of the services or for example cloud formation in this case i i will submit the product feature",
    "start": "208640",
    "end": "215280"
  },
  {
    "text": "requests on their behalf to the product team and these are just a few examples of the many enterprise support",
    "start": "215280",
    "end": "220959"
  },
  {
    "text": "entitlements that time provides and my colleague here here will provide more specific cases to add up this cloud",
    "start": "220959",
    "end": "226879"
  },
  {
    "text": "formation all right thank you madhyantha",
    "start": "226879",
    "end": "233519"
  },
  {
    "text": "so yeah as a technical account manager i remember how i helped one of my customers with aws cloud formation",
    "start": "233519",
    "end": "240560"
  },
  {
    "text": "so my customer approached the enterprise support team with an interest of deploying infrastructure in aws",
    "start": "240560",
    "end": "246799"
  },
  {
    "text": "across multiple accounts and regions so i recommended them to use aws cloud formation and take the infrastructure as",
    "start": "246799",
    "end": "254159"
  },
  {
    "text": "code path they restricted access of their developers to build infrastructure in",
    "start": "254159",
    "end": "259199"
  },
  {
    "text": "the aws through management console and only allowed them to deploy infrastructure through their ci cd",
    "start": "259199",
    "end": "265759"
  },
  {
    "text": "pipelines and this helped them quickly scale their infrastructure in aws while also",
    "start": "265759",
    "end": "271040"
  },
  {
    "text": "building the infrastructure in a more secure and reliable manner so that was one of the ways that",
    "start": "271040",
    "end": "277120"
  },
  {
    "text": "technical account managers help our customers in deploying cloud formation",
    "start": "277120",
    "end": "282880"
  },
  {
    "text": "so now let's go to the next slide and let's see at today's agenda",
    "start": "282880",
    "end": "288800"
  },
  {
    "text": "so today we will cover the fundamentals of infrastructure as code we will introduce the aws cloud formation",
    "start": "288800",
    "end": "294800"
  },
  {
    "text": "service and then we'll look into some of the fundamental level features of cloud formation along with a demo on how to",
    "start": "294800",
    "end": "302000"
  },
  {
    "text": "configure and deploy a cloudformation template throughout the session we will answer your questions that come up in the chat",
    "start": "302000",
    "end": "309199"
  },
  {
    "text": "in this session we are only focusing on the fundamental features of cloudformation so we won't be covering",
    "start": "309199",
    "end": "314720"
  },
  {
    "text": "any advanced features but we will look at them at a higher level so with that said let's first dive into",
    "start": "314720",
    "end": "321600"
  },
  {
    "text": "what is infrastructure as code all right so infrastructure is code",
    "start": "321600",
    "end": "327840"
  },
  {
    "start": "325000",
    "end": "878000"
  },
  {
    "text": "means that instead of building and deploying the infrastructure manually we write a code and we give instructions",
    "start": "327840",
    "end": "334880"
  },
  {
    "text": "and details on the infrastructure that you want to create so we are codifying the infrastructure",
    "start": "334880",
    "end": "340800"
  },
  {
    "text": "now you may use various code editors to achieve this once the code is written we check it",
    "start": "340800",
    "end": "346479"
  },
  {
    "text": "into a version control system and then review the code files with our team members and once it is ready we",
    "start": "346479",
    "end": "353199"
  },
  {
    "text": "deploy it into our various environments by doing so we get several benefits over",
    "start": "353199",
    "end": "358880"
  },
  {
    "text": "manually deploying infrastructure so let's look at those benefits",
    "start": "358880",
    "end": "364160"
  },
  {
    "text": "so this code acts as a single source of truth to deploy the whole stack if anyone wants to go back and see what",
    "start": "364160",
    "end": "371120"
  },
  {
    "text": "infrastructure configuration got deployed they can check out this single source of truth",
    "start": "371120",
    "end": "376560"
  },
  {
    "text": "it allows us to replicate redeploy and repurpose the infrastructure so what",
    "start": "376560",
    "end": "381840"
  },
  {
    "text": "does this mean this means that we can replicate the same infrastructure configuration across",
    "start": "381840",
    "end": "387840"
  },
  {
    "text": "multiple accounts and regions we can also make minor changes and repurpose the infrastructure code as",
    "start": "387840",
    "end": "394960"
  },
  {
    "text": "needed before deploying it in another environment this allows us in quick deployment of",
    "start": "394960",
    "end": "401280"
  },
  {
    "text": "infrastructure across multiple regions and accounts thus saving a lot of time of the development teams and they can",
    "start": "401280",
    "end": "408000"
  },
  {
    "text": "use the time for other higher priority objectives since you are deploying your",
    "start": "408000",
    "end": "413280"
  },
  {
    "text": "infrastructure as code you can save the infrastructure code along with application code in a version controlled",
    "start": "413280",
    "end": "419520"
  },
  {
    "text": "manner and anytime you want to go back to previously deployed infrastructure you may do that quickly",
    "start": "419520",
    "end": "426560"
  },
  {
    "text": "another important benefit of infrastructure and s code is that it is transactional in nature",
    "start": "426560",
    "end": "432880"
  },
  {
    "text": "so what this means is while deploying the infrastructure if there are any issues it rolls back",
    "start": "432880",
    "end": "439120"
  },
  {
    "text": "the deployment to the last good state now since we have codified our",
    "start": "439120",
    "end": "444160"
  },
  {
    "text": "infrastructure we can now deploy it through our ci cd pipeline and automate",
    "start": "444160",
    "end": "449280"
  },
  {
    "text": "this deployment along with the deployment of our application code",
    "start": "449280",
    "end": "454400"
  },
  {
    "text": "so now let's look at two infrastructures code solutions offered by aws at a higher level and then we will dive",
    "start": "454400",
    "end": "460960"
  },
  {
    "text": "deeper into aws cloud formation all right",
    "start": "460960",
    "end": "466800"
  },
  {
    "text": "so aws has two infrastructure as code solutions available aws cloud formation",
    "start": "466800",
    "end": "472479"
  },
  {
    "text": "and aws cloud development kit also known as cdk so let's look at some of the features of each one of them",
    "start": "472479",
    "end": "480639"
  },
  {
    "text": "so using cloud formation one can model provision and manage aws and third-party",
    "start": "480639",
    "end": "486400"
  },
  {
    "text": "resources by codifying the infrastructure so cloud formation enables management of",
    "start": "486400",
    "end": "492479"
  },
  {
    "text": "third party resources by using the aws cloudformation registry and aws cloudformation custom resources",
    "start": "492479",
    "end": "500639"
  },
  {
    "text": "now these features are advanced so we won't be covering it in today's session but we will share links to those",
    "start": "500639",
    "end": "506639"
  },
  {
    "text": "features if someone wants to learn more about them now one can create update or delete",
    "start": "506639",
    "end": "512959"
  },
  {
    "text": "cloud formation stacks across multiple accounts and regions using something known as stack sets this",
    "start": "512959",
    "end": "520320"
  },
  {
    "text": "is also an advanced feature so we won't dive deeper into it but we'll share documentation for it in the chat if",
    "start": "520320",
    "end": "526640"
  },
  {
    "text": "anyone wants to look into it further now aws cloudformation has a gui option",
    "start": "526640",
    "end": "533200"
  },
  {
    "text": "available without any additional cost and cloud formation manages the state of",
    "start": "533200",
    "end": "538720"
  },
  {
    "text": "the code files for the end user so the end user can focus on the code deployment",
    "start": "538720",
    "end": "544399"
  },
  {
    "text": "while cloud formation takes care of the management of the code files and cloudformation uses two",
    "start": "544399",
    "end": "550320"
  },
  {
    "text": "configuration languages one is json and one is yaml",
    "start": "550320",
    "end": "555360"
  },
  {
    "text": "now let's look at aws cloud development kit or cdk this is an open source software",
    "start": "555360",
    "end": "561600"
  },
  {
    "text": "development framework there is a github available for it and you can view various contributors there",
    "start": "561600",
    "end": "568480"
  },
  {
    "text": "cdk provides various benefits so let's look at them firstly it makes it easier to onboard to",
    "start": "568480",
    "end": "575040"
  },
  {
    "text": "cloud your team can leverage the existing skills and tools to code the",
    "start": "575040",
    "end": "580080"
  },
  {
    "text": "infrastructure in cloud also there are several high-level components available which pre-configure",
    "start": "580080",
    "end": "586640"
  },
  {
    "text": "cloud resources which you can leverage and thus help in accelerating your onboarding to aws cloud",
    "start": "586640",
    "end": "594399"
  },
  {
    "text": "it is customizable and shareable so you can design and build your own reusable",
    "start": "594399",
    "end": "600080"
  },
  {
    "text": "components which meet your organization's security compliance and government requirements",
    "start": "600080",
    "end": "606320"
  },
  {
    "text": "and you can share it and reuse it across different business units within your organization thus reducing your time to",
    "start": "606320",
    "end": "612240"
  },
  {
    "text": "production it aids in faster development process",
    "start": "612240",
    "end": "617360"
  },
  {
    "text": "so you can use familiar programming languages and features such as objects loops and conditions",
    "start": "617360",
    "end": "623440"
  },
  {
    "text": "and using them you can build your cloud infrastructure from your own ide environment",
    "start": "623440",
    "end": "628480"
  },
  {
    "text": "and leverage your existing testing frameworks now since you you are building your",
    "start": "628480",
    "end": "633839"
  },
  {
    "text": "cloud infrastructure from your own existing ide there is no context switching",
    "start": "633839",
    "end": "639440"
  },
  {
    "text": "so you can use the same programming languages to write both the cloud infrastructure",
    "start": "639440",
    "end": "644800"
  },
  {
    "text": "code and also the application runtime code and you can visualize the cdk application stacks and resources with",
    "start": "644800",
    "end": "652320"
  },
  {
    "text": "something known as aws toolkit for vs code so which programming languages can you",
    "start": "652320",
    "end": "659200"
  },
  {
    "text": "use in aws cdk well currently the generally available languages are",
    "start": "659200",
    "end": "664399"
  },
  {
    "text": "javascript typescript python java and c-sharp and go language is available in",
    "start": "664399",
    "end": "670720"
  },
  {
    "text": "developer preview now we will not dive deeper into aws cdk",
    "start": "670720",
    "end": "676160"
  },
  {
    "text": "but we will share documentation around it for you to explore further so these are the two infrastructures",
    "start": "676160",
    "end": "683120"
  },
  {
    "text": "code solutions offered by aws before we dive deeper into aws cloud formation let's see if we have any",
    "start": "683120",
    "end": "689360"
  },
  {
    "text": "questions in the chat that we can answer okay thanks here uh so there wasn't",
    "start": "689360",
    "end": "696000"
  },
  {
    "text": "necessarily a direct question there was a call out that came out a few minutes ago",
    "start": "696000",
    "end": "701120"
  },
  {
    "text": "um [Applause] what was their name uh dare felix",
    "start": "701120",
    "end": "707040"
  },
  {
    "text": "underscore ffm calling out you know the difference between cloud formation and cdk the cdk under the covers actually",
    "start": "707040",
    "end": "714639"
  },
  {
    "text": "creates cloud formation templates and then they just called out that they really like it and they said that cdk is",
    "start": "714639",
    "end": "720720"
  },
  {
    "text": "uh quote unquote really amazing uh thanks for the feedback there um and",
    "start": "720720",
    "end": "726160"
  },
  {
    "text": "then they also asked questions specific to like terraform and really the the focus of today's conversation is around",
    "start": "726160",
    "end": "733680"
  },
  {
    "text": "cloud formation and uh the cdk and infrastructure is code native platforms within aws terraform is definitely an",
    "start": "733680",
    "end": "741519"
  },
  {
    "text": "option uh whenever i was a team i supported many customers to utilize terraform um so really it's up to you",
    "start": "741519",
    "end": "748720"
  },
  {
    "text": "from an application team or an organization to pick to sort of pick",
    "start": "748720",
    "end": "753839"
  },
  {
    "text": "which platform best fits your your use case um so sort of just the focus of today is going",
    "start": "753839",
    "end": "760399"
  },
  {
    "text": "to be around cdk and cloud formation and see here if we",
    "start": "760399",
    "end": "766160"
  },
  {
    "text": "they say they recommend using the cdk with typescript and javascript um so that's good feedback there we'll",
    "start": "766160",
    "end": "773360"
  },
  {
    "text": "i'll throw a link here in a second to the in the chat that points you to any cdk specific documentation getting",
    "start": "773360",
    "end": "780560"
  },
  {
    "text": "started that type of stuff um here in morning onto any call outs or anything there that you wanted to make before we",
    "start": "780560",
    "end": "787519"
  },
  {
    "text": "continue along yeah just all right yeah go ahead",
    "start": "787519",
    "end": "793760"
  },
  {
    "text": "yeah i was just saying um thank you for sharing the feedback that you are liking ebk and",
    "start": "794079",
    "end": "801120"
  },
  {
    "text": "good call out of which which is uh uh convenient so that's a great feedback",
    "start": "801120",
    "end": "806399"
  },
  {
    "text": "and we'll keep that in mind thank you just to add a little bit so i think we have good comments like cdk is mostly",
    "start": "806399",
    "end": "813440"
  },
  {
    "text": "it'd be good if you're a software developer since you are familiar with programming languages but so for some",
    "start": "813440",
    "end": "818560"
  },
  {
    "text": "people who are not familiar with like programming languages cloud formation is still i think the first step as well",
    "start": "818560",
    "end": "824720"
  },
  {
    "text": "like when you get started it's still a good way to do and again cdk is also using actually clock permission to",
    "start": "824720",
    "end": "830800"
  },
  {
    "text": "deploy the adobe's infrastructures i think the the important takeaway for",
    "start": "830800",
    "end": "836240"
  },
  {
    "text": "folks at least the customers that i've worked with that have implemented any infrastructures code is understanding",
    "start": "836240",
    "end": "842800"
  },
  {
    "text": "that it's it's stateful so you can detect drift so if somebody goes in and changes an instance size or an",
    "start": "842800",
    "end": "848320"
  },
  {
    "text": "environment gets delayed it can be easily redeployed i've seen customers also utilize infrastructure as code as a",
    "start": "848320",
    "end": "854959"
  },
  {
    "text": "variation of a dr plan so maybe you want to redeploy an application in another aws region um that's another really good",
    "start": "854959",
    "end": "862480"
  },
  {
    "text": "use case for infrastructure as code and cloudformation is just one variation of",
    "start": "862480",
    "end": "868320"
  },
  {
    "text": "that um so with that i think uh herein why don't you continue to uh",
    "start": "868320",
    "end": "874560"
  },
  {
    "text": "present to us today yeah thank you clint all right so let's dive deeper into what",
    "start": "874560",
    "end": "881279"
  },
  {
    "start": "878000",
    "end": "1261000"
  },
  {
    "text": "is aws cloud formation so as we saw in the previous slide aws cloud formation is one of the",
    "start": "881279",
    "end": "887920"
  },
  {
    "text": "infrastructures code solution offered by aws it can be easily integrated with other",
    "start": "887920",
    "end": "893440"
  },
  {
    "text": "aws services and when aws releases new services aws cloud formation has quick integration",
    "start": "893440",
    "end": "900720"
  },
  {
    "text": "for those new services as well now cloud formation is a simplified way of creating and managing collection of",
    "start": "900720",
    "end": "907920"
  },
  {
    "text": "aws resources by codifying the instructions and details in a text file and you can use",
    "start": "907920",
    "end": "913760"
  },
  {
    "text": "json or yaml language and then this template becomes the single source of truth for your",
    "start": "913760",
    "end": "919040"
  },
  {
    "text": "infrastructure so by doing so it helps you standardize your infrastructure components used",
    "start": "919040",
    "end": "925199"
  },
  {
    "text": "across your organization thus enabling configuration compliance and faster troubleshooting so what does this mean",
    "start": "925199",
    "end": "932639"
  },
  {
    "text": "what this means is that if any of the infrastructure configuration is changed or deleted which may then violate",
    "start": "932639",
    "end": "939600"
  },
  {
    "text": "compliance of the infrastructure then in that scenario by using aws cloud formation we can either disable the",
    "start": "939600",
    "end": "946800"
  },
  {
    "text": "changing of the configuration or we can revert back to the original configuration",
    "start": "946800",
    "end": "952560"
  },
  {
    "text": "now it enables orderly and predictable provisioning and updating of resources",
    "start": "952560",
    "end": "958160"
  },
  {
    "text": "so while deploying the resources sometimes it may happen that some resources have a dependency on other",
    "start": "958160",
    "end": "964160"
  },
  {
    "text": "resources aws cloud formation helps provision the resources in an orderly and safe manner",
    "start": "964160",
    "end": "971040"
  },
  {
    "text": "and if there are any issues or errors while deploying the infrastructure it will roll back to the previous good",
    "start": "971040",
    "end": "976720"
  },
  {
    "text": "version and this rolling back to previous good version is possible because we can",
    "start": "976720",
    "end": "982399"
  },
  {
    "text": "enable version control on our aws infrastructure now cloudformation has strong",
    "start": "982399",
    "end": "988880"
  },
  {
    "text": "integration with aws iem service so this allows for management of",
    "start": "988880",
    "end": "994839"
  },
  {
    "text": "crudl permissions for resources which are create read update delete and list",
    "start": "994839",
    "end": "1000959"
  },
  {
    "text": "permissions now cloudformation has a feature called hooks which can help enable",
    "start": "1000959",
    "end": "1007040"
  },
  {
    "text": "scanning of your cloud formation templates for security and compliance issues",
    "start": "1007040",
    "end": "1012079"
  },
  {
    "text": "also cloudformation guard rules can be used as policy as code rules that you",
    "start": "1012079",
    "end": "1017519"
  },
  {
    "text": "can validate your json or yaml formatted data now these are also some of the advanced",
    "start": "1017519",
    "end": "1023600"
  },
  {
    "text": "features of cloudformation so we will not discuss them in today but we will share documentation around",
    "start": "1023600",
    "end": "1029438"
  },
  {
    "text": "it for those who are interested in them now you may deploy and update the",
    "start": "1029439",
    "end": "1034480"
  },
  {
    "text": "cloudformation stack either through aws management console or through command line or through aws apis",
    "start": "1034480",
    "end": "1042160"
  },
  {
    "text": "and cloudformation service does not charge the customer you only pay for the resources that you create by using aws",
    "start": "1042160",
    "end": "1049200"
  },
  {
    "text": "cloud formation so at a high level let's look at the steps needed to build and create a cloud",
    "start": "1049200",
    "end": "1055679"
  },
  {
    "text": "formation template all right so firstly the deployment team",
    "start": "1055679",
    "end": "1061440"
  },
  {
    "text": "writes the code which has the instructions and details about the infrastructure that they want to build",
    "start": "1061440",
    "end": "1067520"
  },
  {
    "text": "and then they save these code files either locally or on a s3 bucket",
    "start": "1067520",
    "end": "1072559"
  },
  {
    "text": "then they can use the cloudformation service and they can either upload the locally stored code files or they can",
    "start": "1072559",
    "end": "1078960"
  },
  {
    "text": "provide the url of the s3 bucket where they store the code files at this point aws cloudformation",
    "start": "1078960",
    "end": "1085840"
  },
  {
    "text": "essentially works as an api wrapper so aws cloudformation calls the apis",
    "start": "1085840",
    "end": "1091600"
  },
  {
    "text": "that you defined in your cloudformation template and it passes them as api calls to those",
    "start": "1091600",
    "end": "1098000"
  },
  {
    "text": "services and these apis are called in parallel and cloudformation manages any",
    "start": "1098000",
    "end": "1103840"
  },
  {
    "text": "dependencies or relationships between the different resources that are being created",
    "start": "1103840",
    "end": "1108880"
  },
  {
    "text": "and once again you only pay for the resources you use also cloud formation has good",
    "start": "1108880",
    "end": "1114960"
  },
  {
    "text": "integration with other open source tools like ansible puppet chef so if you are using those tools already",
    "start": "1114960",
    "end": "1121520"
  },
  {
    "text": "you may integrate cloud formation with that let's see if we have any additional questions that have come up in the chat",
    "start": "1121520",
    "end": "1128480"
  },
  {
    "text": "before i hand it over to my bianca no there hasn't been any additional questions from the audience but i do",
    "start": "1128480",
    "end": "1135039"
  },
  {
    "text": "have a question for you here and are you a json or yaml type of person",
    "start": "1135039",
    "end": "1141039"
  },
  {
    "text": "i personally prefer uh jason but i don't have a strong preference i'm good with yaml as well but if i have",
    "start": "1141039",
    "end": "1147600"
  },
  {
    "text": "a choice to pick i'll pick jason okay and then the the second question i'll",
    "start": "1147600",
    "end": "1152720"
  },
  {
    "text": "ask you there here and maybe a tip for the folks online which editor which ide is your ide of choice",
    "start": "1152720",
    "end": "1160160"
  },
  {
    "text": "yeah so personally i use the visual studio code but i will use other ids as well like",
    "start": "1160160",
    "end": "1166480"
  },
  {
    "text": "there is atom also available yeah no again no preference such as whichever one works well for me",
    "start": "1166480",
    "end": "1173440"
  },
  {
    "text": "sure how about you martian uh for json yaml i prefer yamo because",
    "start": "1173440",
    "end": "1178880"
  },
  {
    "text": "uh yamo i can put comments under that although right now the newest json they",
    "start": "1178880",
    "end": "1184240"
  },
  {
    "text": "can put kind of they have to work around to put comments i still prefer yaml for for configuration i think that's the way",
    "start": "1184240",
    "end": "1189760"
  },
  {
    "text": "to go and for text editor i i just use a sublime in my mac book",
    "start": "1189760",
    "end": "1197440"
  },
  {
    "text": "yeah i'll make it keep it simple gotcha is there uh while we're having",
    "start": "1197440",
    "end": "1202720"
  },
  {
    "text": "conversation there one question did come in here what cloud formation tools can you recommend for popular ides like",
    "start": "1202720",
    "end": "1209520"
  },
  {
    "text": "intellij or vs code anything to uh offer there",
    "start": "1209520",
    "end": "1215600"
  },
  {
    "text": "yeah one one thing i've seen is uh for i think bs code there is a lint option",
    "start": "1216720",
    "end": "1222000"
  },
  {
    "text": "available which can help you uh review the code and show if there are any errors",
    "start": "1222000",
    "end": "1228559"
  },
  {
    "text": "but yeah um feel free to add anything",
    "start": "1228559",
    "end": "1233480"
  },
  {
    "text": "yeah uh i believe there's a tool i don't really use the visual studio code that much but i believe there's a tool that",
    "start": "1234880",
    "end": "1241039"
  },
  {
    "text": "we can share with you to make your you know do the auto complete in a visual studio code",
    "start": "1241039",
    "end": "1246640"
  },
  {
    "text": "for cloud permission template yeah i will grab the the link to that",
    "start": "1246640",
    "end": "1252320"
  },
  {
    "text": "and i will i'll throw it in the chat but that's all for now feel free to take it away",
    "start": "1252320",
    "end": "1258159"
  },
  {
    "text": "thank you okay thank you kieran so in the previous",
    "start": "1258159",
    "end": "1263840"
  },
  {
    "start": "1261000",
    "end": "1549000"
  },
  {
    "text": "section we have learned the benefits of infrastructure as a code in general and aws native ise solutions which comprise",
    "start": "1263840",
    "end": "1271039"
  },
  {
    "text": "of two uh two services adobe's cloud formation and cloud development kit or cdk and also the core concept of cloud",
    "start": "1271039",
    "end": "1277840"
  },
  {
    "text": "formation so in this section now we will learn the structure of a cloud formation template how to use intrinsic functions",
    "start": "1277840",
    "end": "1284080"
  },
  {
    "text": "other parts of template and along with the presentation i will demonstrate writing an initial clock permission",
    "start": "1284080",
    "end": "1289679"
  },
  {
    "text": "template from a blank document that we will improve in each demo and the idea here is just to show you how easy it is",
    "start": "1289679",
    "end": "1296159"
  },
  {
    "text": "to start codifying your infrastructure with aws cloud permission so let's begin by looking a",
    "start": "1296159",
    "end": "1302000"
  },
  {
    "text": "high level of cloud formation template anatomy or what makes a template",
    "start": "1302000",
    "end": "1307600"
  },
  {
    "text": "so what is shown here is the yaml for method template fragments and only the major level or top level sections are",
    "start": "1307760",
    "end": "1314000"
  },
  {
    "text": "shown here for sure and i will explain some of this for example the most commonly used is the",
    "start": "1314000",
    "end": "1320400"
  },
  {
    "text": "parameters so the parameters enable your user to input custom values to your template",
    "start": "1320400",
    "end": "1326080"
  },
  {
    "text": "each time they create or update the stack during the runtime and although we have this many",
    "start": "1326080",
    "end": "1332799"
  },
  {
    "text": "major sections the only required section is the resources so this is where you actually declare",
    "start": "1332799",
    "end": "1338880"
  },
  {
    "text": "the aws resources that you want to include in the stack for example amazon ec2 instance or amazon s3 bucket now",
    "start": "1338880",
    "end": "1346159"
  },
  {
    "text": "let's go quickly to our demo",
    "start": "1346159",
    "end": "1349840"
  },
  {
    "text": "right so in this demo first i will save the file this blank document",
    "start": "1353360",
    "end": "1359520"
  },
  {
    "text": "cfn demo and we'll put the extension at yaml",
    "start": "1359520",
    "end": "1367200"
  },
  {
    "text": "so in this demo we will deploy a single ec2 instance using cloudformation and i will deploy it via aws console",
    "start": "1367200",
    "end": "1375840"
  },
  {
    "text": "so i will add the template format version which right now only has one valid value which is the 2010 september 9",
    "start": "1376559",
    "end": "1384720"
  },
  {
    "text": "and also i will add description here and again these two",
    "start": "1384720",
    "end": "1390240"
  },
  {
    "text": "sections are optional so you can just skip them but just for a practice i like to",
    "start": "1390240",
    "end": "1396960"
  },
  {
    "text": "include this too and the only thing that is required here is the resources so here i will add one a single issue to",
    "start": "1396960",
    "end": "1403919"
  },
  {
    "text": "instance the logical id for that instance called web server instance so this logical id has a",
    "start": "1403919",
    "end": "1410799"
  },
  {
    "text": "must be an alphanumeric it can be capital lowercase and zero to nine and it has a limit of 255 characters",
    "start": "1410799",
    "end": "1419679"
  },
  {
    "text": "so the type of this i need to define the type of my resource so this will be an ec2 instance and with the properties",
    "start": "1419679",
    "end": "1425760"
  },
  {
    "text": "there are two main properties the first is the instance type and also the image id or the mmi id which is the amazon",
    "start": "1425760",
    "end": "1433520"
  },
  {
    "text": "machine image so for this example i will take it i will grab the mi id from our ect console",
    "start": "1433520",
    "end": "1441279"
  },
  {
    "text": "so first we will click the launch instance here and then i can get quickly the ami id",
    "start": "1441279",
    "end": "1450080"
  },
  {
    "text": "here i will copy paste this and my id here",
    "start": "1450640",
    "end": "1455960"
  },
  {
    "text": "all right and if your company or your developer",
    "start": "1458480",
    "end": "1463520"
  },
  {
    "text": "has its own custom amazon machine image this is also where you can put it your own",
    "start": "1463520",
    "end": "1469120"
  },
  {
    "text": "so now i've saved that and let's go to cloud permission console",
    "start": "1469120",
    "end": "1474639"
  },
  {
    "text": "so here i will create a new stack resources and there are two ways as here",
    "start": "1476080",
    "end": "1481760"
  },
  {
    "text": "mentioned either in astr url or you can upload it so here i will upload it from",
    "start": "1481760",
    "end": "1486799"
  },
  {
    "text": "my local file so we click next here i need to give the stack name let's just",
    "start": "1486799",
    "end": "1492880"
  },
  {
    "text": "put it the cloudformation demo or 7demo for short and these are some of the advanced options",
    "start": "1492880",
    "end": "1498559"
  },
  {
    "text": "that is not covered today so we can skip this and this is the summary page that also",
    "start": "1498559",
    "end": "1504480"
  },
  {
    "text": "we have nothing much here so we just create the stack here and this is the page where you will go to after you",
    "start": "1504480",
    "end": "1509679"
  },
  {
    "text": "deploy so here we can see the right the left hand side here shows the overall status",
    "start": "1509679",
    "end": "1514960"
  },
  {
    "text": "of the stack while this part here to show the more granular events detail of",
    "start": "1514960",
    "end": "1520080"
  },
  {
    "text": "your clock formation template deployment so now we see the stack is complete we",
    "start": "1520080",
    "end": "1525279"
  },
  {
    "text": "have seen the ec2 instance being deployed and i can click that on that link",
    "start": "1525279",
    "end": "1530400"
  },
  {
    "text": "and it will go to this easy to instance that is still initializing rent for now",
    "start": "1530400",
    "end": "1537200"
  },
  {
    "text": "so that's it for our demo okay",
    "start": "1537200",
    "end": "1543600"
  },
  {
    "text": "so let me go quickly for the metadata first before i break for question",
    "start": "1543600",
    "end": "1549840"
  },
  {
    "start": "1549000",
    "end": "2077000"
  },
  {
    "text": "so first uh the metadata section it contains arbitrary json or yml data",
    "start": "1549840",
    "end": "1556480"
  },
  {
    "text": "depending on the language of the template and you can specify the objects that provide additional information",
    "start": "1556480",
    "end": "1562880"
  },
  {
    "text": "about the template for example description for your instance and shown here is a json formatted",
    "start": "1562880",
    "end": "1568320"
  },
  {
    "text": "example of metadata and if you're using the cloud formation ui designer in aws",
    "start": "1568320",
    "end": "1573360"
  },
  {
    "text": "console to write your template the layout position and relationship of each resources is captured in the metadata in",
    "start": "1573360",
    "end": "1580080"
  },
  {
    "text": "the data section now the parameter section",
    "start": "1580080",
    "end": "1585919"
  },
  {
    "text": "so this is an optional section also and this is one of the most commonly used in a cloud formation template and",
    "start": "1585919",
    "end": "1592559"
  },
  {
    "text": "it enables you that the user can pass a value to your template at runtime that",
    "start": "1592559",
    "end": "1598159"
  },
  {
    "text": "is when you create or update stack and you must declare parameters as one of the following string numbers you know",
    "start": "1598159",
    "end": "1604240"
  },
  {
    "text": "the specific types and we use the ref intrinsic function that i will cover later to reference or",
    "start": "1604240",
    "end": "1610480"
  },
  {
    "text": "to get the values of the parameter and shown here on the right hand side is this example of the json formatted",
    "start": "1610480",
    "end": "1618080"
  },
  {
    "text": "template using parameter section that is asking the user to provide the s3 bucket",
    "start": "1618080",
    "end": "1623120"
  },
  {
    "text": "name during stack deployment now let's see to our demo",
    "start": "1623120",
    "end": "1628880"
  },
  {
    "text": "okay so continue from our previous template now we will enhance it we will",
    "start": "1632080",
    "end": "1637760"
  },
  {
    "text": "add a metadata and parameter section here so first i will add the metadata section",
    "start": "1637760",
    "end": "1643840"
  },
  {
    "text": "so when deploying cloudformation template via the lws console we can improve the experience of the",
    "start": "1643840",
    "end": "1649440"
  },
  {
    "text": "user deploying the template by specifying how to order label or group the parameters and this can be done with",
    "start": "1649440",
    "end": "1655760"
  },
  {
    "text": "this metadata specifically with this key called the aws cloud formation interface key",
    "start": "1655760",
    "end": "1663200"
  },
  {
    "text": "which is i'm doing here so i'm adding the label here the default is",
    "start": "1663200",
    "end": "1668799"
  },
  {
    "text": "so in this example right now that i'm trying to provide the user an option to choose the",
    "start": "1668799",
    "end": "1674240"
  },
  {
    "text": "ec2 instance type and this is i'm just providing the labeling and the grouping",
    "start": "1674240",
    "end": "1679600"
  },
  {
    "text": "for the parameters so the parameter will be instant side",
    "start": "1679600",
    "end": "1685600"
  },
  {
    "text": "and i will provide the parameter labels",
    "start": "1686880",
    "end": "1692120"
  },
  {
    "text": "and i will provide the default value for that type of ec2 instance",
    "start": "1696000",
    "end": "1703440"
  },
  {
    "text": "now i will add the parameter section so in here i will add a single parameter",
    "start": "1704720",
    "end": "1710159"
  },
  {
    "text": "with the logical id of instance type and this type is just a string type and",
    "start": "1710159",
    "end": "1715679"
  },
  {
    "text": "i will provide the default value in case user does not want to choose and it has a default value in this case i would",
    "start": "1715679",
    "end": "1722240"
  },
  {
    "text": "choose a t2 micro instance type and i will allow user to choose from a",
    "start": "1722240",
    "end": "1727760"
  },
  {
    "text": "list of values and here i will provide two values to user t2 micro and t2 nano and i will provide",
    "start": "1727760",
    "end": "1734799"
  },
  {
    "text": "a description to the user to choose one of these two instance type and i will specify what is the default",
    "start": "1734799",
    "end": "1741120"
  },
  {
    "text": "value",
    "start": "1741120",
    "end": "1743520"
  },
  {
    "text": "and also on the resources part since we are not we don't want to hardcode the value anymore so i will use the ref",
    "start": "1748000",
    "end": "1754799"
  },
  {
    "text": "intrinsic function here to actually get the value that is chosen by the user during the stack runtime so",
    "start": "1754799",
    "end": "1762320"
  },
  {
    "text": "the value it will be the parameter will be instant time now let's save this and",
    "start": "1762320",
    "end": "1767600"
  },
  {
    "text": "we'll deploy to our cloud formation",
    "start": "1767600",
    "end": "1773279"
  },
  {
    "text": "so let me save this file and shown here i'm using the sublime",
    "start": "1773279",
    "end": "1778559"
  },
  {
    "text": "text editor just for simplicity now we go back to our previous cloud",
    "start": "1778559",
    "end": "1783679"
  },
  {
    "text": "formation and click i click update here and then i choose",
    "start": "1783679",
    "end": "1789840"
  },
  {
    "text": "replace the current template and again i will choose the update from a local file here so i'm using the same file",
    "start": "1789840",
    "end": "1797840"
  },
  {
    "text": "we don't need to rename it since we have already we're just updating a stack and we can see here this is the effect of",
    "start": "1802240",
    "end": "1807679"
  },
  {
    "text": "the metadata section how i order and i group the parameters and the naming as well and we can see here there are two",
    "start": "1807679",
    "end": "1814000"
  },
  {
    "text": "values which i provided earlier the t2 micro nano so i will provide the t2 nano",
    "start": "1814000",
    "end": "1819360"
  },
  {
    "text": "here so we see the parameter will be listed",
    "start": "1819360",
    "end": "1824559"
  },
  {
    "text": "here in the summary page with the value which i choose and i can click update stack",
    "start": "1824559",
    "end": "1832919"
  },
  {
    "text": "so again the left hand side shows the overall progress of the stack while the right hand side show more granule",
    "start": "1840240",
    "end": "1846640"
  },
  {
    "text": "details and for example this is the description of the my stack which i put",
    "start": "1846640",
    "end": "1852000"
  },
  {
    "text": "there in the template now let's see there and there's the refresh button that i can check",
    "start": "1852000",
    "end": "1861000"
  },
  {
    "text": "you can see this so since i chose a different instance type here so the previous",
    "start": "1864320",
    "end": "1870399"
  },
  {
    "text": "instance will be terminated and then cloud permission will actually initiate a new instance so this is",
    "start": "1870399",
    "end": "1877360"
  },
  {
    "text": "something that the user needs to take consideration especially if you have some certain updates",
    "start": "1877360",
    "end": "1882720"
  },
  {
    "text": "to your ec2 instance then you need to take that into consideration when you're deploying or updating your cloud",
    "start": "1882720",
    "end": "1888480"
  },
  {
    "text": "formation because cloudformation will terminate your previous my term your previous ec2 instance",
    "start": "1888480",
    "end": "1894559"
  },
  {
    "text": "especially if there are some changes on the instance type",
    "start": "1894559",
    "end": "1898799"
  },
  {
    "text": "so we can see here now the chain has been deployed so now my instant type is 2 to nano",
    "start": "1900240",
    "end": "1907480"
  },
  {
    "text": "all right so i will pause here for a while to check for any questions from",
    "start": "1908960",
    "end": "1914480"
  },
  {
    "text": "the audience yeah hey martian thanks for the demo there there",
    "start": "1914480",
    "end": "1921440"
  },
  {
    "text": "was a a question from der fl der felix underscore ffm are there plans to change",
    "start": "1921440",
    "end": "1927200"
  },
  {
    "text": "the resource limits in cloud formation uh the number of resources per stack slash nested stack is still quite",
    "start": "1927200",
    "end": "1934240"
  },
  {
    "text": "limited and i let them know i'm personally not sure the answer to that one so what i would recommend",
    "start": "1934240",
    "end": "1940640"
  },
  {
    "text": "is to go over to the repost.aws basically the aws online forums and ask",
    "start": "1940640",
    "end": "1946240"
  },
  {
    "text": "your question there and um you might be able to get a an answer of what the team has has planned coming up",
    "start": "1946240",
    "end": "1952559"
  },
  {
    "text": "in the future specific to a number of resources within a cloud formation template i also",
    "start": "1952559",
    "end": "1960080"
  },
  {
    "text": "well while martial was uh presenting there i threw a link out to all of the",
    "start": "1960080",
    "end": "1966240"
  },
  {
    "text": "different properties that are possible for ec2 for example so let's say",
    "start": "1966240",
    "end": "1971919"
  },
  {
    "text": "um you're going through and you're building you know an application or you're looking to implement infrastructure as code and you're",
    "start": "1971919",
    "end": "1978000"
  },
  {
    "text": "writing it like and you're not sure of all the properties that might be uh available for a specific resource type",
    "start": "1978000",
    "end": "1984559"
  },
  {
    "text": "within aws that's a good link to keep handy that way you can see you know and compare it to what you've",
    "start": "1984559",
    "end": "1991279"
  },
  {
    "text": "deployed inside of your maybe your dev environment where you were going through the ui and building out your application",
    "start": "1991279",
    "end": "1997760"
  },
  {
    "text": "and as you're trying to promote it to production you need to codify that application deployment so",
    "start": "1997760",
    "end": "2003519"
  },
  {
    "text": "that's a good link to uh to keep handy there yeah",
    "start": "2003519",
    "end": "2010320"
  },
  {
    "text": "okay so yeah so that's also the values for for example right now it's limited to",
    "start": "2010320",
    "end": "2015760"
  },
  {
    "text": "200 for example in a single template you can deploy 200 resources",
    "start": "2015760",
    "end": "2021039"
  },
  {
    "text": "and again if uh yes at the time period it at aws if you would like to see that",
    "start": "2021039",
    "end": "2026240"
  },
  {
    "text": "implementing i i can actually submit a product feature request to increase that number for example given uh good reasons",
    "start": "2026240",
    "end": "2034000"
  },
  {
    "text": "right and i can advocate that to the product team so that's a very good input yeah yep",
    "start": "2034000",
    "end": "2040559"
  },
  {
    "text": "definitely that is one of the the benefits of having a tam that works with you um here at aws yes we get to",
    "start": "2040559",
    "end": "2048320"
  },
  {
    "text": "ask for feature requests for the product team on your behalf um another question",
    "start": "2048320",
    "end": "2053599"
  },
  {
    "text": "that just came in there is there a cloud formation blueprint repository",
    "start": "2053599",
    "end": "2059040"
  },
  {
    "text": "oh yes there is uh we can definitely share that with you through the chat",
    "start": "2059040",
    "end": "2065440"
  },
  {
    "text": "perfect i will get the link to that and i will drop it there for you i",
    "start": "2065440",
    "end": "2070800"
  },
  {
    "text": "don't see any other questions so feel free to uh to continue along thank you",
    "start": "2070800",
    "end": "2078158"
  },
  {
    "start": "2077000",
    "end": "2295000"
  },
  {
    "text": "all right so let's continue with intrinsic functions so in the last demo we have actually used one intrinsic",
    "start": "2078240",
    "end": "2084240"
  },
  {
    "text": "function which is the right function which is to get easy to instance type selected by the user during stack update",
    "start": "2084240",
    "end": "2090240"
  },
  {
    "text": "so there are multiple intrinsic functions that can be used to enhance the flexibility of a cloud formation",
    "start": "2090240",
    "end": "2095440"
  },
  {
    "text": "template as we can see here on the slide here and we will also share to our chat links",
    "start": "2095440",
    "end": "2101839"
  },
  {
    "text": "and in the upcoming demos we will use the join function to join a string for naming our ec2 instance through tagging",
    "start": "2101839",
    "end": "2108480"
  },
  {
    "text": "and finding map to reference a map in the mapping section that i will copy later and also get attribute to get a",
    "start": "2108480",
    "end": "2114800"
  },
  {
    "text": "resource attribute now let's go quickly to our demo",
    "start": "2114800",
    "end": "2120000"
  },
  {
    "text": "so continuing from our previous latest template here we see we have used onerev",
    "start": "2123119",
    "end": "2128839"
  },
  {
    "text": "function and i will try to modify here that i will",
    "start": "2128839",
    "end": "2133920"
  },
  {
    "text": "add one more in my id so i do not want to hard code the amazon mission image so i will",
    "start": "2133920",
    "end": "2140640"
  },
  {
    "text": "provide the user an option to actually uh input their their own mi id here so the",
    "start": "2140640",
    "end": "2147680"
  },
  {
    "text": "type will be amazon ec2 image id and the description this will be the",
    "start": "2147680",
    "end": "2153359"
  },
  {
    "text": "amazon machine image",
    "start": "2153359",
    "end": "2157319"
  },
  {
    "text": "right and i will put the default in here i will just copy and paste the recorded value in",
    "start": "2160640",
    "end": "2165680"
  },
  {
    "text": "case user does not preference to use any particular amazon machine image and here",
    "start": "2165680",
    "end": "2171200"
  },
  {
    "text": "i will use the wrap function to actually get the mi id input by the user",
    "start": "2171200",
    "end": "2176960"
  },
  {
    "text": "and i will add a tagging so i will name this ec2 instance through tagging",
    "start": "2176960",
    "end": "2182000"
  },
  {
    "text": "the key is the name and here i will demo we use a we will see join function",
    "start": "2182000",
    "end": "2188800"
  },
  {
    "text": "to to concatenate two strings together in this case i will concatenate using a dash",
    "start": "2188800",
    "end": "2195599"
  },
  {
    "text": "and i will concatenate basically the type of the ec2 instance chosen by",
    "start": "2195760",
    "end": "2201280"
  },
  {
    "text": "the user with a string called web server so for example if user chooses the t2",
    "start": "2201280",
    "end": "2207359"
  },
  {
    "text": "nano it will be t2.nano dash web server now let me save this",
    "start": "2207359",
    "end": "2215440"
  },
  {
    "text": "file and let's update our stack",
    "start": "2215440",
    "end": "2219599"
  },
  {
    "text": "let's click update replace current template and upload again from local file",
    "start": "2223920",
    "end": "2229520"
  },
  {
    "text": "so this will be rather fairly quickly deployment because i do not want to change anything",
    "start": "2229520",
    "end": "2235040"
  },
  {
    "text": "here so i will just keep the instance at t to nano i will just keep the mi id as is",
    "start": "2235040",
    "end": "2242960"
  },
  {
    "text": "so when i click next it will be fairly quickly because what it will do right now it will just try to add attack into",
    "start": "2242960",
    "end": "2249359"
  },
  {
    "text": "this easy2 instance to give the name of where this for this ec2 instance now when i click next on the summary we",
    "start": "2249359",
    "end": "2256000"
  },
  {
    "text": "will see there are two parameters now there are the mi id and its value which i added",
    "start": "2256000",
    "end": "2261839"
  },
  {
    "text": "earlier so i click update stack here",
    "start": "2261839",
    "end": "2267280"
  },
  {
    "text": "so this will be fairly quick so when i click refresh it should be very quick to complete",
    "start": "2267280",
    "end": "2272560"
  },
  {
    "text": "now when i go to resource again you know i'll click here on the easy to instance id",
    "start": "2272560",
    "end": "2279040"
  },
  {
    "text": "you can see now that this is the same instance and we have a name now for this",
    "start": "2279040",
    "end": "2284079"
  },
  {
    "text": "ec2 instance",
    "start": "2284079",
    "end": "2286960"
  },
  {
    "text": "right so that's it for the intrinsic function demo",
    "start": "2290079",
    "end": "2294960"
  },
  {
    "start": "2295000",
    "end": "2824000"
  },
  {
    "text": "now we go to mappings so mapping section is another optional top-level section of a cloud formation",
    "start": "2295760",
    "end": "2301599"
  },
  {
    "text": "template it is used to define maps they're keys and values this can then be referenced in your template and shown",
    "start": "2301599",
    "end": "2307599"
  },
  {
    "text": "here on the right hand side is a yama format example of a mapping session and",
    "start": "2307599",
    "end": "2313040"
  },
  {
    "text": "one useful purpose that we will see through our upcoming demo is to give a meaningful option to the template",
    "start": "2313040",
    "end": "2319599"
  },
  {
    "text": "user so let's just go to our demo now",
    "start": "2319599",
    "end": "2325480"
  },
  {
    "text": "so continuing again from the previous demo here we have metadata we have added metadata and parameters",
    "start": "2326800",
    "end": "2332880"
  },
  {
    "text": "however the previously we still provide user to choose between t2 micro t2 nano",
    "start": "2332880",
    "end": "2338480"
  },
  {
    "text": "some user might not know the difference between those two type of instances so in here i first will remove the metadata",
    "start": "2338480",
    "end": "2345520"
  },
  {
    "text": "as we no longer need it and i will add mappings section is that so this is the logical naming",
    "start": "2345520",
    "end": "2352720"
  },
  {
    "text": "from my map and again this must be alphanumeric and limited to to 255",
    "start": "2352720",
    "end": "2358079"
  },
  {
    "text": "characters so i will name my mapping environment to instantiate so now i will",
    "start": "2358079",
    "end": "2363680"
  },
  {
    "text": "try to provide user with a more with a more meaningful name for example tests or prod so either you",
    "start": "2363680",
    "end": "2369839"
  },
  {
    "text": "choose you want to deploy a test easy to instance or you want to deploy a",
    "start": "2369839",
    "end": "2374960"
  },
  {
    "text": "production easy to instance so in here i will have now a second level key which is the instance type itself",
    "start": "2374960",
    "end": "2381359"
  },
  {
    "text": "so when user choose the test environment then it will map to t2 micro",
    "start": "2381359",
    "end": "2388079"
  },
  {
    "text": "and now my second key which is we prod which has the value of t2 dot small",
    "start": "2388079",
    "end": "2396920"
  },
  {
    "text": "and now since i have this so i will change this so instead of asking the instance type parameter i will actually",
    "start": "2397520",
    "end": "2404720"
  },
  {
    "text": "ask environment type so let me now type in a new parameter",
    "start": "2404720",
    "end": "2410319"
  },
  {
    "text": "which is environment type",
    "start": "2410319",
    "end": "2413520"
  },
  {
    "text": "so this is basically not the instance type anymore but specify the environment",
    "start": "2418560",
    "end": "2425000"
  },
  {
    "text": "and i will provide the type it will be string as well and the default value for example i will",
    "start": "2430480",
    "end": "2437599"
  },
  {
    "text": "specify test and allot values",
    "start": "2437599",
    "end": "2442800"
  },
  {
    "text": "so instead of providing the instance type directly i will the values now will be test or prod",
    "start": "2442800",
    "end": "2449839"
  },
  {
    "text": "which then will be mapped in the mapping area and this is the constraint description",
    "start": "2449839",
    "end": "2457200"
  },
  {
    "text": "so constraint description is a special uh property here which it will only show up when the user did not actually choose",
    "start": "2457359",
    "end": "2463440"
  },
  {
    "text": "one of them or usually try to put an empty",
    "start": "2463440",
    "end": "2468240"
  },
  {
    "text": "now since i have changed this that means in the my resource section i need to remove the instance type here in this",
    "start": "2471200",
    "end": "2476400"
  },
  {
    "text": "line because we no longer have this parameter so we cannot just reference directly",
    "start": "2476400",
    "end": "2482000"
  },
  {
    "text": "because that's a mapping so in here i will use one intrinsic function called find in map",
    "start": "2482000",
    "end": "2487119"
  },
  {
    "text": "which is to find the value within the mapping",
    "start": "2487119",
    "end": "2492078"
  },
  {
    "text": "so first i need to specify what is the map name which is environment to instant side",
    "start": "2492319",
    "end": "2499119"
  },
  {
    "text": "and then the first key so this where i will wrap the value selected by the user",
    "start": "2499119",
    "end": "2504400"
  },
  {
    "text": "so this will be environment type so either user choose test or prod",
    "start": "2504400",
    "end": "2510640"
  },
  {
    "text": "and then the second level key which is the instance type here as defined in my mapping",
    "start": "2512400",
    "end": "2519519"
  },
  {
    "text": "and also one more place i need to change will be the naming in the tagging",
    "start": "2521040",
    "end": "2527440"
  },
  {
    "text": "in the last line there i still have the instance type so i need to replace this",
    "start": "2527440",
    "end": "2534680"
  },
  {
    "text": "now i will change just to environment type so this is a title",
    "start": "2536480",
    "end": "2543040"
  },
  {
    "text": "let me correct this this will be environment type so now our ec2 instance will have a name either",
    "start": "2543040",
    "end": "2549520"
  },
  {
    "text": "task dash web server or prod web server this will be more meaningful name to the",
    "start": "2549520",
    "end": "2555920"
  },
  {
    "text": "user so now let's update that our latest stack",
    "start": "2555920",
    "end": "2563799"
  },
  {
    "text": "so same procedure here to demo here now",
    "start": "2573760",
    "end": "2579839"
  },
  {
    "text": "let me see we have two now different value tests for production",
    "start": "2579839",
    "end": "2584720"
  },
  {
    "text": "i will choose production here so now again when i choose a production previously we have a different like",
    "start": "2586079",
    "end": "2592400"
  },
  {
    "text": "instance type now we will choose to uh t2 small so again here we see the review in the",
    "start": "2592400",
    "end": "2598640"
  },
  {
    "text": "summary page when i update the stack this will actually create a new ec2 instance",
    "start": "2598640",
    "end": "2605640"
  },
  {
    "text": "and this page here it shows all the details here in case you want to debug it if there's",
    "start": "2608720",
    "end": "2614240"
  },
  {
    "text": "any failure in your cloud formation template deployment this is also where you will see the granule details of the",
    "start": "2614240",
    "end": "2620319"
  },
  {
    "text": "event click here now we can see that the name has been",
    "start": "2620319",
    "end": "2627040"
  },
  {
    "text": "changed to production dot dash web server and this is type is t2.small",
    "start": "2627040",
    "end": "2632560"
  },
  {
    "text": "and again you can see the status check is initializing which means that is a new ec2 instance",
    "start": "2632560",
    "end": "2638000"
  },
  {
    "text": "so i will pause here for a second and see if there's any question from the audience",
    "start": "2638000",
    "end": "2643599"
  },
  {
    "text": "hey martian so there was a question that we're going to talk about in a second however i want",
    "start": "2644640",
    "end": "2649920"
  },
  {
    "text": "to call out to the first portion of the demo you created a new ec2 instance obviously whenever you create a new",
    "start": "2649920",
    "end": "2655599"
  },
  {
    "text": "anything it's going to build it from scratch the second portion of the demo you talked about updating existing",
    "start": "2655599",
    "end": "2661520"
  },
  {
    "text": "resources so within cloud formation or any infrastructure is code for that matter there's different",
    "start": "2661520",
    "end": "2667680"
  },
  {
    "text": "ways that resources are handled whether or not it's completely like deleted and redeployed and there's interruption",
    "start": "2667680",
    "end": "2673680"
  },
  {
    "text": "that's involved with it highly recommend reading the documentation to understand what sort of behavior you should expect",
    "start": "2673680",
    "end": "2680880"
  },
  {
    "text": "to see with the different resources and things because there may be interruptions there may be partial interruption or the resource could be",
    "start": "2680880",
    "end": "2687359"
  },
  {
    "text": "completely deleted and decommissioned and then deployed as as new there so definitely",
    "start": "2687359",
    "end": "2693040"
  },
  {
    "text": "want to read the documentation for each of the resources to fully understand what the implications are",
    "start": "2693040",
    "end": "2699680"
  },
  {
    "text": "um there was another question there that came in from",
    "start": "2699680",
    "end": "2704880"
  },
  {
    "text": "dare felix and they want to know are there any plans to improve debugging in cloud formation error messages are still",
    "start": "2704880",
    "end": "2712560"
  },
  {
    "text": "often vague and not helpful yeah",
    "start": "2712560",
    "end": "2719119"
  },
  {
    "text": "i think that's also a good input so thank you for that i i do see some kind of uh",
    "start": "2719119",
    "end": "2724880"
  },
  {
    "text": "some also the same things for my customer so that's something that i don't know the answer right now but i can check",
    "start": "2724880",
    "end": "2730880"
  },
  {
    "text": "with the confirmation uh productive and also you can put that",
    "start": "2730880",
    "end": "2735920"
  },
  {
    "text": "actually in your adobe sleep post and we'll get back to you there yeah go ahead here",
    "start": "2735920",
    "end": "2742400"
  },
  {
    "text": "sorry and quickly uh thank you for the feedback i will also share it with the team uh but currently there are two ways",
    "start": "2742400",
    "end": "2749599"
  },
  {
    "text": "we can do it so quickly wanted to share that one is that you you can validate your templates by",
    "start": "2749599",
    "end": "2755760"
  },
  {
    "text": "something called aws cloud formation validate template or also validate template operation",
    "start": "2755760",
    "end": "2762720"
  },
  {
    "text": "it will first check if there are any errors in your json or yaml code",
    "start": "2762720",
    "end": "2767920"
  },
  {
    "text": "and if the checks fail then it will be a validation error and something you can do as well is you can create a change",
    "start": "2767920",
    "end": "2775440"
  },
  {
    "text": "set before updating the stacks so that way you will see the proposed changes of what a stack might look like",
    "start": "2775440",
    "end": "2782960"
  },
  {
    "text": "before you implement that so those are few ways where you can validate and verify before",
    "start": "2782960",
    "end": "2790800"
  },
  {
    "text": "right and also i can add to that we have a tool called taskcat as well to test your cloud formation template deployment",
    "start": "2790960",
    "end": "2798319"
  },
  {
    "text": "and that will actually deploy the cloud formation stack but they will you will see all the for example if you",
    "start": "2798319",
    "end": "2805200"
  },
  {
    "text": "have multiple deployments you can use that quickly to just use one template and deploy in different multi regions",
    "start": "2805200",
    "end": "2813440"
  },
  {
    "text": "great thanks for the questions keep them going they've got a few minutes left um so why",
    "start": "2813839",
    "end": "2819839"
  },
  {
    "text": "don't you uh wrap it up for us thank you so the last one uh last but not least is",
    "start": "2819839",
    "end": "2826560"
  },
  {
    "start": "2824000",
    "end": "3059000"
  },
  {
    "text": "the oppo section so dog post enables you to get access to information about resource within stack",
    "start": "2826560",
    "end": "2832000"
  },
  {
    "text": "uh for example you can upload the s3 bucket name for your stack to make the bucket easier to find and furthermore",
    "start": "2832000",
    "end": "2837680"
  },
  {
    "text": "out values can be imported to other stacks and these are known as crosstalk references which is not a more advanced topic not covered today and the maximum",
    "start": "2837680",
    "end": "2844960"
  },
  {
    "text": "number of outputs in a single template is 200 and shown here is just the ammo from that template output section now let's",
    "start": "2844960",
    "end": "2851680"
  },
  {
    "text": "go quickly to our demo",
    "start": "2851680",
    "end": "2855640"
  },
  {
    "text": "so previously in our demo we see in the outputs of this ui console of co-information there's no output at all",
    "start": "2858000",
    "end": "2864079"
  },
  {
    "text": "so we will continue from our latest deployment here from our list template we add one more",
    "start": "2864079",
    "end": "2871119"
  },
  {
    "text": "output section so the idea here i will try to output",
    "start": "2871119",
    "end": "2876800"
  },
  {
    "text": "the public dns name from for the ec2 instance that i deploy",
    "start": "2876800",
    "end": "2881839"
  },
  {
    "text": "and this is just the logical id naming from the for the output the same this is alphanumeric and maximum of 255",
    "start": "2881839",
    "end": "2888640"
  },
  {
    "text": "characters and the description this is the public dns of the ec2",
    "start": "2888640",
    "end": "2897078"
  },
  {
    "text": "and in here as well i will demonstrate we will use uh one intrinsic function which is the gap attribute",
    "start": "2901440",
    "end": "2907599"
  },
  {
    "text": "to get the the attribute of this public dns from the ec2 instance",
    "start": "2907599",
    "end": "2914599"
  },
  {
    "text": "all right so i will save this and we will redeploy and it will be rather fairly quickly",
    "start": "2917599",
    "end": "2922640"
  },
  {
    "text": "because we do not i will not change any of the configuration here",
    "start": "2922640",
    "end": "2927680"
  },
  {
    "text": "and it will just print out in the output section of the cloud formation ui console",
    "start": "2927680",
    "end": "2934960"
  },
  {
    "text": "click next here and i'll click next so no changes down here",
    "start": "2938559",
    "end": "2944079"
  },
  {
    "text": "but right now after we update this deck we will see the public dns of our web",
    "start": "2944079",
    "end": "2949520"
  },
  {
    "text": "server instance will be in the output sections of the cloud formation console",
    "start": "2949520",
    "end": "2955200"
  },
  {
    "text": "there you have it",
    "start": "2955200",
    "end": "2957838"
  },
  {
    "text": "all right so that's the final of our demo and so",
    "start": "2961440",
    "end": "2966800"
  },
  {
    "text": "the final the key takeaways so infrastructure as a code",
    "start": "2966800",
    "end": "2972559"
  },
  {
    "text": "actually you know just to recap the benefit of aic is rapid deployment there's an",
    "start": "2972559",
    "end": "2977680"
  },
  {
    "text": "infrastructure that you can replicate redeploy and repurpose and you can version control your infrastructure",
    "start": "2977680",
    "end": "2983359"
  },
  {
    "text": "since you treat it as a code then you can check it in the version control system and you can actually review them",
    "start": "2983359",
    "end": "2988880"
  },
  {
    "text": "before actually deploying them and also which brings us to the ci cd pipeline integration you can integrate and",
    "start": "2988880",
    "end": "2994880"
  },
  {
    "text": "automate infrastructure deployment with the cicd pipeline and specific to aws cloud formation the",
    "start": "2994880",
    "end": "3000640"
  },
  {
    "text": "deployment automatically rolls back to the list to the latest working states if any values happen",
    "start": "3000640",
    "end": "3006640"
  },
  {
    "text": "and as we have seen through our demo today it is fairly quickly simple to start with aws cloud permission to build",
    "start": "3006640",
    "end": "3012720"
  },
  {
    "text": "your infrastructure as code solution and one last thing we have more resources here and",
    "start": "3012720",
    "end": "3018880"
  },
  {
    "text": "on top of the links that we have center in chat and there's a tool to link also the cloud formation template and also i mentioned",
    "start": "3018880",
    "end": "3025680"
  },
  {
    "text": "the task cap here and so here are just some uh useful links to get started with cloud",
    "start": "3025680",
    "end": "3031119"
  },
  {
    "text": "permissions and again if you have any questions feel free to put to post in the repost question where i can get to",
    "start": "3031119",
    "end": "3037680"
  },
  {
    "text": "that and also adopt adobe subject matter expert can help you also with your questions",
    "start": "3037680",
    "end": "3042960"
  },
  {
    "text": "so that concludes our my demo today",
    "start": "3042960",
    "end": "3047599"
  },
  {
    "text": "fantastic sorry i had got lost in the browser tabs there for a second my apologies um so we have come up on the",
    "start": "3053200",
    "end": "3061280"
  },
  {
    "start": "3059000",
    "end": "3206000"
  },
  {
    "text": "the end of today's show so we were joined by martian and hearing both our aws enterprise support technical account",
    "start": "3061280",
    "end": "3068640"
  },
  {
    "text": "managers and the focus of today's discussion was getting started with infrastructure as",
    "start": "3068640",
    "end": "3074240"
  },
  {
    "text": "code and two of aws's native infrastructure as code tools which is",
    "start": "3074240",
    "end": "3079520"
  },
  {
    "text": "cloud formation and then earlier in today's uh twitch episode we talked about the cdk for a few minutes as well",
    "start": "3079520",
    "end": "3086880"
  },
  {
    "text": "and really the premise of this was getting started and how to start codifying infrastructure so that you can",
    "start": "3086880",
    "end": "3093440"
  },
  {
    "text": "start deploying your own cloud formation templates within your environment if you do think of any questions after",
    "start": "3093440",
    "end": "3100240"
  },
  {
    "text": "the fact please feel free to head over to repost.aws ask your questions there one of our",
    "start": "3100240",
    "end": "3106800"
  },
  {
    "text": "experts will be happy to help you and that's leads me into the next portion is um aws",
    "start": "3106800",
    "end": "3114960"
  },
  {
    "text": "support you airs every monday at 11 a.m pacific 2 p.m eastern standard time and",
    "start": "3114960",
    "end": "3121359"
  },
  {
    "text": "we're always looking for new and exciting topics to present and have experts like martian to come on and talk",
    "start": "3121359",
    "end": "3127680"
  },
  {
    "text": "about um so oftentimes we'll pull questions that are you know popular topics over on repo so who knows maybe",
    "start": "3127680",
    "end": "3134720"
  },
  {
    "text": "one of the questions that you ask over there will wind up being a future episode of aws support you",
    "start": "3134720",
    "end": "3142160"
  },
  {
    "text": "we are also interested in your feedback earlier i posted a link to a survey you can also send us an email at aws",
    "start": "3142160",
    "end": "3149680"
  },
  {
    "text": "supports you at amazon.com let us know what you think of the show um that's your opportunity to to have a",
    "start": "3149680",
    "end": "3156319"
  },
  {
    "text": "voice and like i said every monday 11 a.m pacific 2 p.m eastern standard time",
    "start": "3156319",
    "end": "3162160"
  },
  {
    "text": "next week's episode will be around introducing the enterprise support operations review uh with one of our",
    "start": "3162160",
    "end": "3169119"
  },
  {
    "text": "senior specialist tams chris pates so martian",
    "start": "3169119",
    "end": "3174880"
  },
  {
    "text": "kieran thanks so much for joining us today it was a pleasure having you here",
    "start": "3174880",
    "end": "3181280"
  },
  {
    "text": "thank you thank you everyone fantastic everyone thanks for joining us on aws supports you and uh",
    "start": "3181280",
    "end": "3187520"
  },
  {
    "text": "happy cloud computing [Music]",
    "start": "3187520",
    "end": "3202459"
  },
  {
    "text": "you",
    "start": "3205520",
    "end": "3207599"
  }
]