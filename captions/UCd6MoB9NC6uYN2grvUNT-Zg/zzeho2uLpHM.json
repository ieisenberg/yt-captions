[
  {
    "text": "so welcome to today's session I know it's the last session of the day so",
    "start": "30",
    "end": "6060"
  },
  {
    "text": "we'll try to finish early if you can thanks so much for coming this is on secure media streaming and delivery my",
    "start": "6060",
    "end": "12780"
  },
  {
    "text": "name is Neha be honey I'm a product manager at Amazon Web Services and I also have a man Shaquille here he's a",
    "start": "12780",
    "end": "20100"
  },
  {
    "text": "Solutions Architect with Amazon Web Services so you know it's it's really it",
    "start": "20100",
    "end": "27090"
  },
  {
    "text": "always fascinates me how many different types of use cases that customers use",
    "start": "27090",
    "end": "33510"
  },
  {
    "text": "AWS for you know both osman and i we talk to a lot of different customers and",
    "start": "33510",
    "end": "39469"
  },
  {
    "text": "you know variety of different industry verticals variety of different types of use cases but focusing on today's topic",
    "start": "39469",
    "end": "46260"
  },
  {
    "text": "secure media streaming and delivery when you think about that you know those types of use cases even there we have",
    "start": "46260",
    "end": "54180"
  },
  {
    "text": "folks across the spectrum like you know we have use cases where for example my mom she has a video that she wants to",
    "start": "54180",
    "end": "60719"
  },
  {
    "text": "upload into AWS and then she had it with me my sister the rest of the family too",
    "start": "60719",
    "end": "66390"
  },
  {
    "text": "you know we have companies like Netflix that are storing and delivering premium",
    "start": "66390",
    "end": "73170"
  },
  {
    "text": "content to to all of you and we have studios that have pre-release content",
    "start": "73170",
    "end": "80159"
  },
  {
    "text": "that they just have to make sure that it's completely secure no one has access to it before a specific date and time",
    "start": "80159",
    "end": "86850"
  },
  {
    "text": "when it's supposed to be released this is Hollywood content so all of those use",
    "start": "86850",
    "end": "91860"
  },
  {
    "text": "cases can be supported by the different AWS services and features within those",
    "start": "91860",
    "end": "97770"
  },
  {
    "text": "services that we make available to everyone so with that let's look at the",
    "start": "97770",
    "end": "102960"
  },
  {
    "text": "agenda there is no agenda",
    "start": "102960",
    "end": "108770"
  },
  {
    "text": "well I'll just walk through the agenda so the basically from an agenda perspective the way we'll talk about",
    "start": "108770",
    "end": "117079"
  },
  {
    "text": "actually this is just a second I don't think this is the right deck here so can",
    "start": "117079",
    "end": "123810"
  },
  {
    "text": "we switch over to the deck of back there",
    "start": "123810",
    "end": "128030"
  },
  {
    "text": "yeah for whatever reason this is not the right and then we'll leave the clicker",
    "start": "133430",
    "end": "139849"
  },
  {
    "text": "as well please",
    "start": "139849",
    "end": "142450"
  },
  {
    "text": "yeah sure way",
    "start": "152890",
    "end": "156060"
  },
  {
    "text": "thank you sorry about that guys okay there isn't a gender here now",
    "start": "165470",
    "end": "171560"
  },
  {
    "text": "so from an agenda perspective the way we have structured the talk is will first quickly talk about just an overview of",
    "start": "171560",
    "end": "179030"
  },
  {
    "text": "secure media streaming and when Osmond and I were talking to different customers what are the different",
    "start": "179030",
    "end": "184220"
  },
  {
    "text": "security components and controls that we hear them using for different types of use cases then we'll talk about AWS",
    "start": "184220",
    "end": "192080"
  },
  {
    "text": "services and what features AWS services provide if you wanted to you put some of",
    "start": "192080",
    "end": "197840"
  },
  {
    "text": "those security controls in place for your specific use case for delivering your video content and then we'll do two",
    "start": "197840",
    "end": "203420"
  },
  {
    "text": "demos the first is a video on-demand demo and the second is a live demo and",
    "start": "203420",
    "end": "209360"
  },
  {
    "text": "in both cases will present the architecture the different AWS services that we are using to build up the stack",
    "start": "209360",
    "end": "216800"
  },
  {
    "text": "to secure and deliver that on-demand or live content and we'll go through some",
    "start": "216800",
    "end": "221990"
  },
  {
    "text": "of the best practices as well so let's talk about the secure media streaming overview so if you look at this chart",
    "start": "221990",
    "end": "229340"
  },
  {
    "text": "the the key takeaway from this chart that I'd like you to have is that there",
    "start": "229340",
    "end": "236750"
  },
  {
    "text": "are there's a whole spectrum of use cases and what level of security and",
    "start": "236750",
    "end": "242840"
  },
  {
    "text": "controls you put in place really depends on your specific use case and you know",
    "start": "242840",
    "end": "249950"
  },
  {
    "text": "like how valuable that content is or the you know how your monetizing that",
    "start": "249950",
    "end": "255020"
  },
  {
    "text": "content or how much security you need for that content so for example if you look at the the free or publicly",
    "start": "255020",
    "end": "261709"
  },
  {
    "text": "available you know user-generated content use cases they're oftentimes media",
    "start": "261709",
    "end": "266990"
  },
  {
    "text": "publishers or customers they'll just keep that content completely open anyone can access it come and view it download",
    "start": "266990",
    "end": "272960"
  },
  {
    "text": "it but as you go further down the list of use cases you'll see premium content",
    "start": "272960",
    "end": "278030"
  },
  {
    "text": "or pre released content where there are media publishers like Amazon Instant Video or Netflix or studios that have",
    "start": "278030",
    "end": "285260"
  },
  {
    "text": "this pre-release content that they use things like AES encryption to encrypt",
    "start": "285260",
    "end": "291440"
  },
  {
    "text": "the content signed URLs digital rights management watermarking all of these",
    "start": "291440",
    "end": "297110"
  },
  {
    "text": "different control in place to make sure that the content is protected to the extent possible so",
    "start": "297110",
    "end": "305460"
  },
  {
    "text": "as we go deeper into the presentation I just wanted to present this slide and",
    "start": "305460",
    "end": "310680"
  },
  {
    "text": "sort of the level set in terms of what are some of these controls that are available to you and that we hear",
    "start": "310680",
    "end": "318029"
  },
  {
    "text": "customers use so the first one token or signed URLs here the pulse there's a",
    "start": "318029",
    "end": "325020"
  },
  {
    "text": "policy statement that you include as a part of the URL or as a part of a cookie that you write on your users device",
    "start": "325020",
    "end": "331169"
  },
  {
    "text": "which allows you to restrict or allow access to different users based on who",
    "start": "331169",
    "end": "336569"
  },
  {
    "text": "has the designed URL available to them so for example this is you know a tool",
    "start": "336569",
    "end": "343620"
  },
  {
    "text": "that someone like my mom could use when she is uploading and Deliver sharing the",
    "start": "343620",
    "end": "349139"
  },
  {
    "text": "video with the family so that no one else can have access to that AES",
    "start": "349139",
    "end": "354270"
  },
  {
    "text": "encryption that's essentially encrypting the bits so that even if somebody does get access to your media files they",
    "start": "354270",
    "end": "360900"
  },
  {
    "text": "cannot decrypt it they cannot view it so it's essentially useless to them DRM or",
    "start": "360900",
    "end": "366449"
  },
  {
    "text": "digital rights management that's similar to alias encryption in but it adds a layer of business logic to that where",
    "start": "366449",
    "end": "373259"
  },
  {
    "text": "not only are you encrypting the content but you're also providing you know",
    "start": "373259",
    "end": "379439"
  },
  {
    "text": "things like you can only have access to this file for a certain period of time so there's some business logic logic",
    "start": "379439",
    "end": "385139"
  },
  {
    "text": "applied to that and then geo blocking allows you to restrict access to content",
    "start": "385139",
    "end": "390689"
  },
  {
    "text": "based on where the viewers are located geographically so if you have licensing rights only to distribute your content",
    "start": "390689",
    "end": "396990"
  },
  {
    "text": "in the United States for example then you can use geo blocking as a mechanism to block access for viewers that are",
    "start": "396990",
    "end": "404729"
  },
  {
    "text": "outside the United States so encryption DRM geo blocking you typically see these",
    "start": "404729",
    "end": "410250"
  },
  {
    "text": "tools used by media distributors you",
    "start": "410250",
    "end": "416039"
  },
  {
    "text": "know for instance someone like Netflix or Amazon Instant Video where for example the geo blocking if you've",
    "start": "416039",
    "end": "422069"
  },
  {
    "text": "traveled internationally and try to access Netflix from outside the United States you cannot so that's geo blocking",
    "start": "422069",
    "end": "428399"
  },
  {
    "text": "in place there and then finally watermarking is tool that you'll often see Studios use",
    "start": "428399",
    "end": "433980"
  },
  {
    "text": "because here you can actually put a unique watermark or a fingerprint on the video file itself before distributing it",
    "start": "433980",
    "end": "441390"
  },
  {
    "text": "to your different partners for example so that you if there is ever a Content",
    "start": "441390",
    "end": "446910"
  },
  {
    "text": "leak someone unauthorized has access to that content you know based on the watermark what that source of leak was",
    "start": "446910",
    "end": "453240"
  },
  {
    "text": "and then you can go and fix that so",
    "start": "453240",
    "end": "459420"
  },
  {
    "text": "let's talk about AWS services and you know some of these security components",
    "start": "459420",
    "end": "466140"
  },
  {
    "text": "that we talked about talked about and how that applies to the AWS cloud and",
    "start": "466140",
    "end": "472050"
  },
  {
    "text": "the different services we provide the important thing to remember here is that AWS is not just for delivering your",
    "start": "472050",
    "end": "479040"
  },
  {
    "text": "video or your media content to your users but you can use different AWS services for all the different",
    "start": "479040",
    "end": "487680"
  },
  {
    "text": "components in your media workflow so all the way from ingesting the content to",
    "start": "487680",
    "end": "492930"
  },
  {
    "text": "storing it to processing it or encrypting it or transcoding it and then",
    "start": "492930",
    "end": "499800"
  },
  {
    "text": "finally delivering it to your end-users and and depending on your use case you can use different types of services to",
    "start": "499800",
    "end": "505740"
  },
  {
    "text": "build the exact workflow with the exact features and the security requirements that you have with with different",
    "start": "505740",
    "end": "511950"
  },
  {
    "text": "database services specifically in this talk we'll dive deeper into Amazon CloudFront for delivery we'll talk about",
    "start": "511950",
    "end": "518940"
  },
  {
    "text": "Amazon elastic transcoder and Amazon ec2 for processing and encoding your media",
    "start": "518940",
    "end": "523950"
  },
  {
    "text": "files talk about Amazon s3 for storage and Amazon ec2 from an ingest",
    "start": "523950",
    "end": "530940"
  },
  {
    "text": "perspective particularly for a live streaming use case where you're running a media server on ec2 and that media",
    "start": "530940",
    "end": "537840"
  },
  {
    "text": "servers acts as a ninja's point and that's ingesting the live feed transporting it and then delivering it",
    "start": "537840",
    "end": "546650"
  },
  {
    "text": "so the ablest services that we just talked about and some of the security",
    "start": "547580",
    "end": "554850"
  },
  {
    "text": "controls we listed earlier what I wanted to do is highlight specific features and",
    "start": "554850",
    "end": "560130"
  },
  {
    "text": "services where you can put those controls in place he using different aww services and the features",
    "start": "560130",
    "end": "566340"
  },
  {
    "text": "that are available so for example with token or signed URLs you can use Amazon CloudFront private content feature and",
    "start": "566340",
    "end": "573170"
  },
  {
    "text": "enable this functionality so that only users that you authorize that have a valid signed URL or a valid signed",
    "start": "573170",
    "end": "579630"
  },
  {
    "text": "cookie can have access to your files for AES encryption you have Amazon elastic",
    "start": "579630",
    "end": "584850"
  },
  {
    "text": "transcoder that provides AES encryption for HLS and smooth outputs so your the",
    "start": "584850",
    "end": "591660"
  },
  {
    "text": "output chunks or the fragments will be encrypted for and also the AWS key",
    "start": "591660",
    "end": "597840"
  },
  {
    "text": "management service it integrates really well with the Amazon classic transcoder",
    "start": "597840",
    "end": "603120"
  },
  {
    "text": "service with ec2 and s3 to manage the encryption and decryption of your keys",
    "start": "603120",
    "end": "609680"
  },
  {
    "text": "for DRM you can use Amazon classic transporter again a transporter recently launched support for PlayReady DRM",
    "start": "609680",
    "end": "615930"
  },
  {
    "text": "packaging so that's now available to you for geo blocking CloudFront natively provides the capability for you to",
    "start": "615930",
    "end": "622740"
  },
  {
    "text": "whitelist or blacklist countries where you want to or don't want to serve your content and then watermarking again",
    "start": "622740",
    "end": "630270"
  },
  {
    "text": "elastic transcoder has provides you the capability to include water box as your",
    "start": "630270",
    "end": "635730"
  },
  {
    "text": "transcoding your content so you know all of these features are available again I",
    "start": "635730",
    "end": "640770"
  },
  {
    "text": "keep going back to it really depends on your specific use case and which of these security controls you need to put",
    "start": "640770",
    "end": "647580"
  },
  {
    "text": "in place based on you know what type of content you have who you're delivering it to so let's look at a simple",
    "start": "647580",
    "end": "656250"
  },
  {
    "text": "architecture diagram for both on-demand in life we'll start with the on-demand so at the very right you see the media",
    "start": "656250",
    "end": "662910"
  },
  {
    "text": "file that you can upload to Amazon s3 store it in an s3 bucket that s3 bucket",
    "start": "662910",
    "end": "668250"
  },
  {
    "text": "then becomes the the point of origin for the Amazon elastic transcoder service the transcoder service will pull the",
    "start": "668250",
    "end": "674820"
  },
  {
    "text": "file from s3 transport the files based on your requirements and then put the",
    "start": "674820",
    "end": "680400"
  },
  {
    "text": "output of that job back into another s3 bucket or the same s3 bucket and then",
    "start": "680400",
    "end": "685590"
  },
  {
    "text": "the second s3 bucket becomes the point of origin for Amazon CloudFront where a cloud friend can then pull the files",
    "start": "685590",
    "end": "692430"
  },
  {
    "text": "from abs honest and deliver it to your viewers who are using different devices to access that content between Amazon s3 and Amazon",
    "start": "692430",
    "end": "700769"
  },
  {
    "text": "CloudFront you can restrict access to that s3 bucket such that only CloudFront has access and only CloudFront can go",
    "start": "700769",
    "end": "707009"
  },
  {
    "text": "and get that those files you can also enable HTTPS so that the files are",
    "start": "707009",
    "end": "712049"
  },
  {
    "text": "encrypted in transit between Amazon CloudFront and your viewers you can",
    "start": "712049",
    "end": "717299"
  },
  {
    "text": "again enforce HTTPS so that these files are always are encrypted and go over HTTPS connections and you can deliver it",
    "start": "717299",
    "end": "724559"
  },
  {
    "text": "do that for HTTP for HLS smooth rtmp it's on different formats that are supported for live we look at the bottom",
    "start": "724559",
    "end": "732600"
  },
  {
    "text": "again if you start on the right you have a device that's capturing the live video and then that live video is being",
    "start": "732600",
    "end": "739019"
  },
  {
    "text": "uploaded to an Amazon ec2 instance and a media server that's running on an ec2",
    "start": "739019",
    "end": "744209"
  },
  {
    "text": "instance you have a wide variety of media servers that you can run there it could be allows the media server and",
    "start": "744209",
    "end": "749369"
  },
  {
    "text": "Dolby media server it could be nginx will use nginx in our demo later and",
    "start": "749369",
    "end": "754619"
  },
  {
    "text": "then that media server will do the transcoding of that raw input that is",
    "start": "754619",
    "end": "760230"
  },
  {
    "text": "receiving of the live stream in real time and CloudFront can again go to this",
    "start": "760230",
    "end": "766110"
  },
  {
    "text": "media server on ec2 and use that as the origin point pull the live chunks and",
    "start": "766110",
    "end": "771209"
  },
  {
    "text": "the live manifest files that are being generated and then deliver it to your viewers again you can at the connection",
    "start": "771209",
    "end": "777600"
  },
  {
    "text": "between the media server and CloudFront could be over HTTP and HTTPS again",
    "start": "777600",
    "end": "782639"
  },
  {
    "text": "between cloud 4 and your viewers and you can from a format perspective we can do HD s HLS smooth all HTTP based formats",
    "start": "782639",
    "end": "789839"
  },
  {
    "text": "for doing live streaming so let's dive",
    "start": "789839",
    "end": "795269"
  },
  {
    "text": "deeper into the services that we talked about we'll start with Amazon s3 so Amazon s3",
    "start": "795269",
    "end": "800850"
  },
  {
    "text": "is our simple storage service this is essentially this service is essentially where your video files will live for",
    "start": "800850",
    "end": "808499"
  },
  {
    "text": "your media delivery use case and when you're using Amazon s3 some of the",
    "start": "808499",
    "end": "814610"
  },
  {
    "text": "security controls that s3 offers these are access controls that are there in s3",
    "start": "814610",
    "end": "820739"
  },
  {
    "text": "by default for all different use cases so you know by default you get bucket level and object",
    "start": "820739",
    "end": "826950"
  },
  {
    "text": "access control with s3 so when you first create an s3 bucket and upload a file",
    "start": "826950",
    "end": "832320"
  },
  {
    "text": "into s3 only you the owner of that bucket has access to that file that's by",
    "start": "832320",
    "end": "838440"
  },
  {
    "text": "default now you can open up access and give others access whether that's other people or other alw services but you",
    "start": "838440",
    "end": "845459"
  },
  {
    "text": "have to explicitly do that so a couple of ways you can do that you can use signed URLs or query string parameters",
    "start": "845459",
    "end": "852170"
  },
  {
    "text": "to restrict access to a particular user so only user that has that valid URL can",
    "start": "852170",
    "end": "859079"
  },
  {
    "text": "access the the file you can also use iam policies I am is aliases identity and",
    "start": "859079",
    "end": "865410"
  },
  {
    "text": "access management service and you can use that to define different groups or roles or users that have access to that",
    "start": "865410",
    "end": "872850"
  },
  {
    "text": "entire bucket or individual objects in that bucket and then you know in",
    "start": "872850",
    "end": "880380"
  },
  {
    "text": "addition to that you can also use versioning for content that you really",
    "start": "880380",
    "end": "885449"
  },
  {
    "text": "want to make sure that never gets deleted or you have full control over who deletes it",
    "start": "885449",
    "end": "890579"
  },
  {
    "text": "so versioning allows you to or prevents you from accidental deletion where even if the content is delete it you can go",
    "start": "890579",
    "end": "897029"
  },
  {
    "text": "back to the previous version and you can also enforce MFA delete where you require the user to have an MFA token",
    "start": "897029",
    "end": "903810"
  },
  {
    "text": "before they can actually delete a file this way that that adds just another step another layer of security before",
    "start": "903810",
    "end": "910019"
  },
  {
    "text": "somebody can delete the file and even for users that have access you can",
    "start": "910019",
    "end": "915690"
  },
  {
    "text": "enable s3 access locks so you know who's downloading the content and accessing your content so all of these different",
    "start": "915690",
    "end": "921209"
  },
  {
    "text": "security controls and access controls are available to you and you know aside",
    "start": "921209",
    "end": "927300"
  },
  {
    "text": "from access controls let's talk about encryption and how you can enable encryption on the file whether it's in",
    "start": "927300",
    "end": "933779"
  },
  {
    "text": "transit or when it's stored in s3 so from a transit perspective we can look",
    "start": "933779",
    "end": "940769"
  },
  {
    "text": "at f3 client-side encryption so here the",
    "start": "940769",
    "end": "945779"
  },
  {
    "text": "file is currently in you know in your data center or in your premise and you can use the AWS SDKs under a variety of",
    "start": "945779",
    "end": "952980"
  },
  {
    "text": "different AWS SDKs that are available to do client-side encryption the way that works is you have an envelope",
    "start": "952980",
    "end": "959910"
  },
  {
    "text": "I'm gonna key that's generated by the SDK you use that envelope key to encrypt your content your media files first you",
    "start": "959910",
    "end": "967380"
  },
  {
    "text": "also then use master key to encrypt the envelope key itself and then both the",
    "start": "967380",
    "end": "973380"
  },
  {
    "text": "encrypted media file as well as the encrypted envelope key can then be sent",
    "start": "973380",
    "end": "978990"
  },
  {
    "text": "to s3 maybe even over an HTTP connection so that's another layer of security and",
    "start": "978990",
    "end": "984300"
  },
  {
    "text": "then stored in an encrypted State in s3 both the media file as well as the",
    "start": "984300",
    "end": "990030"
  },
  {
    "text": "analog key all when you want to access or download these the file as the same",
    "start": "990030",
    "end": "996360"
  },
  {
    "text": "thing applies the download will be in an encrypted form so both the file as well",
    "start": "996360",
    "end": "1001460"
  },
  {
    "text": "as the key will come encrypted back to you and then you can use the master key",
    "start": "1001460",
    "end": "1006590"
  },
  {
    "text": "to decrypt the envelope key and then you can use that to decrypt the media file you can also you know instead of using",
    "start": "1006590",
    "end": "1014270"
  },
  {
    "text": "or managing the master key yourself you can use AWS key management service and that will manage your master key or",
    "start": "1014270",
    "end": "1021860"
  },
  {
    "text": "generate a master key for you and take care of the encryption and decryption of the key Amazon s3 also has server-side",
    "start": "1021860",
    "end": "1029270"
  },
  {
    "text": "encryption capability and this is as simple as checking a box you go to the management console and check the box and",
    "start": "1029270",
    "end": "1035630"
  },
  {
    "text": "then server-side encryption is enabled the way that works is s3 has a feature",
    "start": "1035630",
    "end": "1042110"
  },
  {
    "text": "for encrypting your media files at rest when the file is inside of s3 and there",
    "start": "1042110",
    "end": "1049130"
  },
  {
    "text": "is an envelope key that s3 uses to encrypt your file and then s3 has a master key of its own that it uses to",
    "start": "1049130",
    "end": "1056540"
  },
  {
    "text": "encrypt the unlock key and then stores the encrypted media file and the encrypted envelope key separately inside",
    "start": "1056540",
    "end": "1062510"
  },
  {
    "text": "of s3 again you can use the key management service and if you don't want to use the s3 master key you can use",
    "start": "1062510",
    "end": "1068660"
  },
  {
    "text": "your own master key and have that be managed via the key management service",
    "start": "1068660",
    "end": "1073850"
  },
  {
    "text": "as well so variety of different options available with s3 whether that's access control to your bucket or to your object",
    "start": "1073850",
    "end": "1080840"
  },
  {
    "text": "whether that's encrypting the object in-flight by doing client-side encryption or at rest by doing",
    "start": "1080840",
    "end": "1086900"
  },
  {
    "text": "server-side encryption stop briefly about Amazon CloudFront so Amazon",
    "start": "1086900",
    "end": "1093230"
  },
  {
    "text": "CloudFront is it´ll uses content delivery service we have 53 edge locations currently there",
    "start": "1093230",
    "end": "1104960"
  },
  {
    "text": "is also on-demand and live streaming that platform support so you can do both on-demand as well as live streaming",
    "start": "1104960",
    "end": "1111220"
  },
  {
    "text": "supports both HTTP and rtmp streaming RT mp4 video on-demand and then HTTP for",
    "start": "1111220",
    "end": "1116870"
  },
  {
    "text": "both on-demand and life and there's also native support for smooth streaming capability so you can just upload your",
    "start": "1116870",
    "end": "1123320"
  },
  {
    "text": "media file into Amazon s3 and you don't need to run any media servers CloudFront will be able to deliver it in the smooth",
    "start": "1123320",
    "end": "1130279"
  },
  {
    "text": "streaming format to your to your clients or to your devices you can set custom TTL",
    "start": "1130279",
    "end": "1136429"
  },
  {
    "text": "you know any TTL value on your file whether that's the manifest file or the fragments and we'll show this in the",
    "start": "1136429",
    "end": "1143269"
  },
  {
    "text": "demo as well how you can set those TTLs and what the right values or what the appropriate values should be there's",
    "start": "1143269",
    "end": "1148760"
  },
  {
    "text": "also tcp optimizations between CloudFront and the origin server that origin server could be the Amazon s3",
    "start": "1148760",
    "end": "1154880"
  },
  {
    "text": "bucket or an Amazon ec2 instance which might be running a media server and TCP",
    "start": "1154880",
    "end": "1159980"
  },
  {
    "text": "optimizations such as persistent connections or scaling the window size and just optimizing the network path so",
    "start": "1159980",
    "end": "1166220"
  },
  {
    "text": "that the delivery the the download of that file from the origin to at well for",
    "start": "1166220",
    "end": "1171230"
  },
  {
    "text": "an edge location can be on you know in the best possible like with high light",
    "start": "1171230",
    "end": "1177440"
  },
  {
    "text": "or low latency and high throughput this is specially important for a live streaming use case where you want to",
    "start": "1177440",
    "end": "1182840"
  },
  {
    "text": "avoid any sort of buffering or slowness so that's where some of these TCP optimizations help and then you can also",
    "start": "1182840",
    "end": "1190370"
  },
  {
    "text": "customize the content that you're delivering from CloudFront based on the devices that viewers are coming on or",
    "start": "1190370",
    "end": "1197169"
  },
  {
    "text": "the geolocation or the language we can use some of those headers that are coming into the inn as part of the",
    "start": "1197169",
    "end": "1203990"
  },
  {
    "text": "request and use that to customize the delivery and the caching of content at the edge from a security perspective",
    "start": "1203990",
    "end": "1211340"
  },
  {
    "text": "there's a variety of different features again that CloudFront provides for securing your delivery from CloudFront",
    "start": "1211340",
    "end": "1216799"
  },
  {
    "text": "at the edge of the CDN network to your viewers so you can use custom SSL Certificates and you can use your own",
    "start": "1216799",
    "end": "1222740"
  },
  {
    "text": "domain name when delivering your content to end users you can enforce HTTP delivery so you can",
    "start": "1222740",
    "end": "1232639"
  },
  {
    "text": "redirect HTTP to HTTPS and always make sure that every viewer that's downloading content or your media files",
    "start": "1232639",
    "end": "1239869"
  },
  {
    "text": "from CloudFront is only over HTTP again",
    "start": "1239869",
    "end": "1244970"
  },
  {
    "text": "you can use signed urls or cookies so with amazon s3 as the origin server here",
    "start": "1244970",
    "end": "1250879"
  },
  {
    "text": "you can use a cloud for its private content feature and make sure that only",
    "start": "1250879",
    "end": "1256129"
  },
  {
    "text": "cloud for education have access to those files and you see a big X there the user cannot directly access the file from",
    "start": "1256129",
    "end": "1262789"
  },
  {
    "text": "Amazon s3 and then you can also use our coffin also has you know even with the",
    "start": "1262789",
    "end": "1270440"
  },
  {
    "text": "ec2 instances when you're running a media server for either on-demand or live streaming you can use ec2 security",
    "start": "1270440",
    "end": "1277639"
  },
  {
    "text": "groups to restrict access only to clarinets locations again so there's features both from an access control",
    "start": "1277639",
    "end": "1283999"
  },
  {
    "text": "perspective as well as delivering encrypted files and then finally",
    "start": "1283999",
    "end": "1291080"
  },
  {
    "text": "CloudFront has support for access login so you CloudFront will you know you can",
    "start": "1291080",
    "end": "1296840"
  },
  {
    "text": "check a box in the cloud front console and what that'll do is enable cloud 4 and access logs which will be stored in",
    "start": "1296840",
    "end": "1302299"
  },
  {
    "text": "Amazon s3 so you have visibility into who's accessing your content who's downloading your content platform also",
    "start": "1302299",
    "end": "1307940"
  },
  {
    "text": "has a reporting suite where you can look at different kinds of reports on usage",
    "start": "1307940",
    "end": "1313159"
  },
  {
    "text": "and and trends on your own your viewers and what they are downloading and watching talk about Amazon elastic",
    "start": "1313159",
    "end": "1321559"
  },
  {
    "text": "transcoder so this is a service for transcoding your media files from the",
    "start": "1321559",
    "end": "1327649"
  },
  {
    "text": "RAW format to a format that the different devices that your viewers use can consume and elastic transcoder is a",
    "start": "1327649",
    "end": "1335299"
  },
  {
    "text": "highly scalable it's an easy to use and it's a cost-effective service you know",
    "start": "1335299",
    "end": "1341600"
  },
  {
    "text": "you don't have to worry about the cost of all the different codecs or the licensing cost those are all baked into",
    "start": "1341600",
    "end": "1347690"
  },
  {
    "text": "the elastic transcoder service so you can simply pay one price to elastic transcoder and then transcode your",
    "start": "1347690",
    "end": "1353720"
  },
  {
    "text": "videos in two different formats it's also integrated with other aw services",
    "start": "1353720",
    "end": "1359240"
  },
  {
    "text": "so we saw how elastic transcoder can go to an s3 bucket get your raw files transported",
    "start": "1359240",
    "end": "1364370"
  },
  {
    "text": "and then put back into an s3 bucket or can talk to the it'll use key management service to assume an IM role and go ask",
    "start": "1364370",
    "end": "1374149"
  },
  {
    "text": "for a key you know use that key to decrypt your content then transfer it",
    "start": "1374149",
    "end": "1379940"
  },
  {
    "text": "again encrypt your content so it's it ties closely with all of these other AWS services so you don't have to worry",
    "start": "1379940",
    "end": "1385549"
  },
  {
    "text": "about those things the transporter service will as human I am roll and go talk to s3 or key management service for",
    "start": "1385549",
    "end": "1392480"
  },
  {
    "text": "you from a output perspective you know",
    "start": "1392480",
    "end": "1398330"
  },
  {
    "text": "all the popular output formats are supported such as mp4 with h.264 and AAC",
    "start": "1398330",
    "end": "1404630"
  },
  {
    "text": "when we talk to customers those are the output formats that we hear about as being sort of the industry standards it",
    "start": "1404630",
    "end": "1411049"
  },
  {
    "text": "also supports a WebM with vp8 and purpose and then adaptive bitrate transcoding is also supported where the",
    "start": "1411049",
    "end": "1418039"
  },
  {
    "text": "service will generate different bit rates for you and the different manifest files audio only processing is something",
    "start": "1418039",
    "end": "1425029"
  },
  {
    "text": "you can also do with the elastic transcoder so it's not just for video content you can also use this for you",
    "start": "1425029",
    "end": "1432049"
  },
  {
    "text": "know if you're doing you know just only audio or you're streaming you can both",
    "start": "1432049",
    "end": "1438320"
  },
  {
    "text": "for input as well as output you can use the elastic transcoder for that as well and then it's a pretty feature-rich",
    "start": "1438320",
    "end": "1444110"
  },
  {
    "text": "service in that you know different customers and different use cases have different requirements so you know some",
    "start": "1444110",
    "end": "1451100"
  },
  {
    "text": "some customers need captions or visual watermarks you know clipping your videos and all of those features are available",
    "start": "1451100",
    "end": "1458480"
  },
  {
    "text": "and you can just configure them as you're setting up a transcoding job from",
    "start": "1458480",
    "end": "1463820"
  },
  {
    "text": "a security perspective again there are several features available with the Amazon elastic transcoder service so you",
    "start": "1463820",
    "end": "1469850"
  },
  {
    "text": "can do encryption at rest with Amazon elastic transcoder that's supported so",
    "start": "1469850",
    "end": "1475580"
  },
  {
    "text": "getting files from Amazon s3 that are already encrypted or storing encrypted files back into s3 again the key",
    "start": "1475580",
    "end": "1483350"
  },
  {
    "text": "management service we talked about that encryption for HLS streams so when the",
    "start": "1483350",
    "end": "1488630"
  },
  {
    "text": "elastic transcoder service is actually generating HLS fragments it'll encrypt those fragments and",
    "start": "1488630",
    "end": "1493840"
  },
  {
    "text": "or that into Amazon s3 DRM with the PlayReady DRM packaging so that's",
    "start": "1493840",
    "end": "1499270"
  },
  {
    "text": "something that's that's new and now it's relatively easy to just configure that you know by providing an encryption key",
    "start": "1499270",
    "end": "1506440"
  },
  {
    "text": "as well as the license server URL and then the transporter service will manage",
    "start": "1506440",
    "end": "1511870"
  },
  {
    "text": "all of that for you and also integration with AWS cloud trail where you know what",
    "start": "1511870",
    "end": "1518260"
  },
  {
    "text": "API actions or management call actions are being performed will be recorded in",
    "start": "1518260",
    "end": "1523659"
  },
  {
    "text": "the cloud for service and those logs will be saved to s3 a quick note on the",
    "start": "1523659",
    "end": "1531669"
  },
  {
    "text": "media servers and the options available in the AWS marketplace so you have you",
    "start": "1531669",
    "end": "1537070"
  },
  {
    "text": "know wow the media server Adobe media server and a variety of other ISPs that have their offerings available on the it",
    "start": "1537070",
    "end": "1543340"
  },
  {
    "text": "videos marketplace you also have we also have partners that have a digital rights",
    "start": "1543340",
    "end": "1548740"
  },
  {
    "text": "management or DRM offerings that are available such as bi DRM or easy DRM those options are available in the",
    "start": "1548740",
    "end": "1555370"
  },
  {
    "text": "marketplace and one thing to sort of keep in mind when you're using the marketplace software is that the",
    "start": "1555370",
    "end": "1562870"
  },
  {
    "text": "marketplace software runs on Amazon ec2 and from a security perspective all of the ec2 security functionality whether",
    "start": "1562870",
    "end": "1570130"
  },
  {
    "text": "that's integration with I am whether that's integration with the key management service or security groups",
    "start": "1570130",
    "end": "1575710"
  },
  {
    "text": "all of those are inherited to the software that you're running from our",
    "start": "1575710",
    "end": "1581289"
  },
  {
    "text": "marketplace so that's something to keep in mind as well so you know in addition",
    "start": "1581289",
    "end": "1589419"
  },
  {
    "text": "to these security features that are available with all of these AWS services",
    "start": "1589419",
    "end": "1597010"
  },
  {
    "text": "that we talked about AWS also has you",
    "start": "1597010",
    "end": "1602559"
  },
  {
    "text": "know rigorous audits that we go through for the infrastructure itself I mean all",
    "start": "1602559",
    "end": "1610929"
  },
  {
    "text": "of these services are actually running on physical infrastructure so all the way from facilities and the physical",
    "start": "1610929",
    "end": "1616870"
  },
  {
    "text": "infrastructure all the way up to the virtualization infrastructure all of that is audited on a regular basis and",
    "start": "1616870",
    "end": "1624830"
  },
  {
    "text": "you know by different industry compliance standards and you can see a",
    "start": "1624830",
    "end": "1630019"
  },
  {
    "text": "list of those on the right in addition the MPAA best practices the eight bluest infrastructure also has alignment with",
    "start": "1630019",
    "end": "1636950"
  },
  {
    "text": "the MPAA best practices so that's something more applicable to a streaming or media",
    "start": "1636950",
    "end": "1642620"
  },
  {
    "text": "streaming delivery use case and a variety of different services are covered and content all the way up to",
    "start": "1642620",
    "end": "1648320"
  },
  {
    "text": "pre-release content is covered under that audit with the MPAA so Identity and",
    "start": "1648320",
    "end": "1660559"
  },
  {
    "text": "Access Management so we talked about a lot of a lot of the AWS services and the security features we talked about the",
    "start": "1660559",
    "end": "1667159"
  },
  {
    "text": "compliance standards but something to also keep in mind is who you allow to",
    "start": "1667159",
    "end": "1673279"
  },
  {
    "text": "have access to your AWS resources because if unauthorized users have access to your AWS resources then you",
    "start": "1673279",
    "end": "1681559"
  },
  {
    "text": "know that could be a problem as well because then they can go and access your media files so when it comes to securing",
    "start": "1681559",
    "end": "1687049"
  },
  {
    "text": "your content and securing the delivery of that content you want to make sure that you know you're also taking",
    "start": "1687049",
    "end": "1693649"
  },
  {
    "text": "advantage of the Identity and Access Management Service and the integration that other services have with iam to",
    "start": "1693649",
    "end": "1702760"
  },
  {
    "text": "granularly defining roles and groups the way you want and what access different",
    "start": "1702760",
    "end": "1708679"
  },
  {
    "text": "roles and groups have to different resources or features within the other services so that way you can be sure",
    "start": "1708679",
    "end": "1715610"
  },
  {
    "text": "that you're controlling access even to your AWS resources in a very granular way and finally you know along with I am",
    "start": "1715610",
    "end": "1728299"
  },
  {
    "text": "something also to keep in mind is the AWS cloud trail service and cloud trail",
    "start": "1728299",
    "end": "1733610"
  },
  {
    "text": "provides you access logging for your management console as well as your API",
    "start": "1733610",
    "end": "1740630"
  },
  {
    "text": "calls so with cloud trail you know different services that we talked about such as s3",
    "start": "1740630",
    "end": "1746690"
  },
  {
    "text": "cloud front and elastic transcoder you can actually log who's accessing and",
    "start": "1746690",
    "end": "1753260"
  },
  {
    "text": "making API calls and then those logs are stored in Amazon s3",
    "start": "1753260",
    "end": "1758279"
  },
  {
    "text": "you can have real-time notifications via cloud watch logs you can use Kinesis or",
    "start": "1758279",
    "end": "1764940"
  },
  {
    "text": "you can configure lamda notifications so that way you can get real-time alarms if an unauthorized user does get access to",
    "start": "1764940",
    "end": "1772889"
  },
  {
    "text": "an you know innate ability resource and performs an action that's something you can be notified about in real time and",
    "start": "1772889",
    "end": "1778619"
  },
  {
    "text": "can you can then act on that so with",
    "start": "1778619",
    "end": "1784320"
  },
  {
    "text": "that we'll go into the demos and how have you saman come here and talk about the on-demand and live demo Thank You",
    "start": "1784320",
    "end": "1792330"
  },
  {
    "text": "nee hoor actually can we go back to the presentation first Thanks so thanks BR",
    "start": "1792330",
    "end": "1800009"
  },
  {
    "text": "for sharing all the cool features now on to the fun part so basically I'll be",
    "start": "1800009",
    "end": "1805349"
  },
  {
    "text": "doing a couple of demos here and those are live demos so let's pray to the demo",
    "start": "1805349",
    "end": "1810809"
  },
  {
    "text": "guard that it all works and nothing breaks so I'll start with you know just",
    "start": "1810809",
    "end": "1816539"
  },
  {
    "text": "kind of giving you an idea of what am i doing you know so and then I will just",
    "start": "1816539",
    "end": "1822089"
  },
  {
    "text": "hop on to my laptop here real quick and kind of show you or walk you through it so for the first one is actually the",
    "start": "1822089",
    "end": "1828839"
  },
  {
    "text": "on-demand streaming so in this scenario we are assuming that you know you have a file a media file that you've recorded",
    "start": "1828839",
    "end": "1835109"
  },
  {
    "text": "or some kind of a content that somebody has you upload it into s3 it lives in s3 and then we're gonna use elastic",
    "start": "1835109",
    "end": "1841830"
  },
  {
    "text": "transcoder to actually transcod a cell S transport and then segment or create HLS",
    "start": "1841830",
    "end": "1847859"
  },
  {
    "text": "segments for that video file HLS in addition to creating the HLS",
    "start": "1847859",
    "end": "1853679"
  },
  {
    "text": "segments elastic transcoder is also going to use the integration with key management service to manage the keys",
    "start": "1853679",
    "end": "1859619"
  },
  {
    "text": "and actually use those keys to encrypt the individual segments that are going",
    "start": "1859619",
    "end": "1865529"
  },
  {
    "text": "to be then stored in s3 and then all these segments the HLS segments are going to be delivered via cloud 4 we're",
    "start": "1865529",
    "end": "1872549"
  },
  {
    "text": "gonna use JW player for delivery and really if you look at it the benefits here are you know the manageability",
    "start": "1872549",
    "end": "1879179"
  },
  {
    "text": "aspect so yes these are all great features you know Nihar talked about signed URLs DRM you know cookie",
    "start": "1879179",
    "end": "1886200"
  },
  {
    "text": "management watermarking all those cool things but in reality if you were to go",
    "start": "1886200",
    "end": "1891750"
  },
  {
    "text": "and tried to do it on your own it's not that easy so that's where the the the",
    "start": "1891750",
    "end": "1898770"
  },
  {
    "text": "benefit or the utility of all these services or features that are built in these AWS services comes into play let's",
    "start": "1898770",
    "end": "1905460"
  },
  {
    "text": "say hey you want to do encryption that's fine just selected in your elastic",
    "start": "1905460",
    "end": "1910650"
  },
  {
    "text": "transcoder and while it's gonna do transcoding it's also gonna encrypt the content for you great how do I manage",
    "start": "1910650",
    "end": "1916380"
  },
  {
    "text": "the keys well kms is gonna manage the keys for you and elastic transcoder knows how to talk to it so all that",
    "start": "1916380",
    "end": "1921900"
  },
  {
    "text": "stuff you know really takes care of the management of the muck that you don't",
    "start": "1921900",
    "end": "1928380"
  },
  {
    "text": "really have to do and you are worried about just creating the content and you know do your thing also from a security",
    "start": "1928380",
    "end": "1935430"
  },
  {
    "text": "perspective you know you say well is it secure that I'm letting all these AWS",
    "start": "1935430",
    "end": "1941760"
  },
  {
    "text": "services features take care of all that in fact it is because if you look at it there is no human intervention involved",
    "start": "1941760",
    "end": "1948090"
  },
  {
    "text": "in it it's just a setup that you do right you're creating this you're putting this file in there you're",
    "start": "1948090",
    "end": "1953100"
  },
  {
    "text": "selecting go ahead encrypt this file and then when you're transcoding go ahead and crypt this file so on and so forth",
    "start": "1953100",
    "end": "1958680"
  },
  {
    "text": "so you're not managing the keys you're not transferring a key from one place to another place or content which is",
    "start": "1958680",
    "end": "1964380"
  },
  {
    "text": "unencrypted from one place to another place so even if you lose or say one you",
    "start": "1964380",
    "end": "1970020"
  },
  {
    "text": "know a few segments of your content or even the entire file for that matter it's all encrypted let's say you lost",
    "start": "1970020",
    "end": "1976170"
  },
  {
    "text": "the key as well the key is encrypted as well right and it's all managed by a managed service which is the key",
    "start": "1976170",
    "end": "1981510"
  },
  {
    "text": "management service behind the covers so basically these tools that these features that really enable you to build",
    "start": "1981510",
    "end": "1988110"
  },
  {
    "text": "a really robust and foolproof application that's dependent on the use",
    "start": "1988110",
    "end": "1993870"
  },
  {
    "text": "case whether going back to hey your mom sharing videos or a studio wanting to do",
    "start": "1993870",
    "end": "1999300"
  },
  {
    "text": "something so very quickly what are we doing here media owner sends their files",
    "start": "1999300",
    "end": "2005690"
  },
  {
    "text": "to an s3 bucket alright there goes the file then the media owner goes sends the",
    "start": "2005690",
    "end": "2013250"
  },
  {
    "text": "key that's their master key that you own to AWS key management service key management service also gives you the",
    "start": "2013250",
    "end": "2019490"
  },
  {
    "text": "capability to manage master keys on your behalf so again this is going to the level of security that you're looking",
    "start": "2019490",
    "end": "2025100"
  },
  {
    "text": "for if you want to manage your own keys by all means do that use key management service to generate the annual of keys",
    "start": "2025100",
    "end": "2032540"
  },
  {
    "text": "or encryption decryption for you or if you want AWS key management service to manage the master keys for you you can",
    "start": "2032540",
    "end": "2038930"
  },
  {
    "text": "do that as well in this case please the media owner sends the key to key",
    "start": "2038930",
    "end": "2044240"
  },
  {
    "text": "management service it actually encrypts it sends it back to the media owner media owner at that point launches an",
    "start": "2044240",
    "end": "2052340"
  },
  {
    "text": "elastic transcoder service and with the elastic transcoder service it sends it",
    "start": "2052340",
    "end": "2057378"
  },
  {
    "text": "the encrypted key so notice it is the encrypted key as well as the file the",
    "start": "2057379",
    "end": "2064040"
  },
  {
    "text": "elastic transcoder now has a roll Nihar talked about I am identity access",
    "start": "2064040",
    "end": "2069888"
  },
  {
    "text": "management that's where you define a role that elastic transcoder service can actually call key management service on",
    "start": "2069889",
    "end": "2077540"
  },
  {
    "text": "your behalf no human intervention in there it calls key management service on your",
    "start": "2077540",
    "end": "2083179"
  },
  {
    "text": "behalf says hey I have the key can you please unencrypted for me I need it to",
    "start": "2083179",
    "end": "2088820"
  },
  {
    "text": "encrypt the actual segments it gets that key encrypts the actual segments stores",
    "start": "2088820",
    "end": "2096230"
  },
  {
    "text": "it back into an s3 bucket which is the output bucket all right now at this",
    "start": "2096230",
    "end": "2103640"
  },
  {
    "text": "point your output bucket has the encrypted HLS segments ready for",
    "start": "2103640",
    "end": "2109220"
  },
  {
    "text": "delivery we use JW pair to deliver it and UE fronted with cloud front",
    "start": "2109220",
    "end": "2114520"
  },
  {
    "text": "basically at this point the encrypted segments are requested by the player through the cloud front the encrypted",
    "start": "2114520",
    "end": "2122330"
  },
  {
    "text": "segments are now in the player now the player needs to request a key to",
    "start": "2122330",
    "end": "2127490"
  },
  {
    "text": "unencrypted these segments so that the viewers can go view those how do they get that so in that case you can build a",
    "start": "2127490",
    "end": "2134690"
  },
  {
    "text": "simple application where you know it's a say a couple of ec2 instances running a",
    "start": "2134690",
    "end": "2140060"
  },
  {
    "text": "web server has a dynamo DB back-end where you're storing these keys you know",
    "start": "2140060",
    "end": "2145940"
  },
  {
    "text": "and basically just and these keys by the way are encrypted keys right so then",
    "start": "2145940",
    "end": "2152210"
  },
  {
    "text": "anytime a request comes in the servers will send in those keys to kms kms will",
    "start": "2152210",
    "end": "2158120"
  },
  {
    "text": "then unencrypted DS and send those back to the ec2 instances these keys can be",
    "start": "2158120",
    "end": "2163460"
  },
  {
    "text": "stored in memory delivered back and now here your player has the unencrypted key",
    "start": "2163460",
    "end": "2169790"
  },
  {
    "text": "can go deliver basically unencrypted segments and then deliver to the viewer well again this is the Nirvana right at",
    "start": "2169790",
    "end": "2178160"
  },
  {
    "text": "the end of the day that you know you want to control the keys how the users get access or rights etc in my demo I",
    "start": "2178160",
    "end": "2186440"
  },
  {
    "text": "simply put those keys inside of s3 so while elastic transcoder is encrypting",
    "start": "2186440",
    "end": "2192410"
  },
  {
    "text": "the content the underlying encryption key is also stored in s3 so you can the",
    "start": "2192410",
    "end": "2197570"
  },
  {
    "text": "player can request that key directly from s3 whereas instead of for the",
    "start": "2197570",
    "end": "2204530"
  },
  {
    "text": "authentication purposes the application will actually create a cloud create a",
    "start": "2204530",
    "end": "2211670"
  },
  {
    "text": "cookie on the browser on the viewers browser and CloudFront requires or",
    "start": "2211670",
    "end": "2217430"
  },
  {
    "text": "verifies that cookie before it delivers any of those segments so it makes it",
    "start": "2217430",
    "end": "2222890"
  },
  {
    "text": "even more simple it's just a matter of basically me enabling the cookie functionality on cloud run",
    "start": "2222890",
    "end": "2229280"
  },
  {
    "text": "so with that let's go ahead and take a look at it so can you please switch yeah thank you",
    "start": "2229280",
    "end": "2235940"
  },
  {
    "text": "so here what you can see here is my console this is my s3 console all right",
    "start": "2235940",
    "end": "2242420"
  },
  {
    "text": "go back my ass 3 console here this is my VOD folder this is where all my files",
    "start": "2242420",
    "end": "2249950"
  },
  {
    "text": "live I'm gonna use the Muppet Show as my input file that's been uploaded in there",
    "start": "2249950",
    "end": "2256220"
  },
  {
    "text": "I select it here as you can see there is a storage class there is a server side encryption key Hart talked about as",
    "start": "2256220",
    "end": "2263000"
  },
  {
    "text": "simple as if I want to do server side encryption at rest I could just simply select this and voila it'll encrypt the",
    "start": "2263000",
    "end": "2270020"
  },
  {
    "text": "file at rest that's all I need to do in this case I haven't selected any encryption just to keep it simple so",
    "start": "2270020",
    "end": "2277450"
  },
  {
    "text": "basically this is my file that was uploaded somehow you know into s3 then I",
    "start": "2277450",
    "end": "2283099"
  },
  {
    "text": "go into the elastic transcoder console so this is my elastic transcoder console",
    "start": "2283099",
    "end": "2288110"
  },
  {
    "text": "there are three different things here you see there is pipelines there is jobs and there is pre sex let's talk about",
    "start": "2288110",
    "end": "2294380"
  },
  {
    "text": "each one of them so first let's start with presets presets are basically configurations or settings or templates",
    "start": "2294380",
    "end": "2300410"
  },
  {
    "text": "if you are not column right say you want a specific resolution you want a specific aspect ratio etc etc you define",
    "start": "2300410",
    "end": "2308060"
  },
  {
    "text": "those in a preset elastic transcoder gives you a lot of system defined presets so a lot of devices or that we",
    "start": "2308060",
    "end": "2314840"
  },
  {
    "text": "have for example for kindle fire if you want to view the content what would be the preset for that an iphone android",
    "start": "2314840",
    "end": "2320840"
  },
  {
    "text": "etc so there are a lot of system presets define basically this is where you can go in and define a preset then comes",
    "start": "2320840",
    "end": "2327470"
  },
  {
    "text": "pipelines pipelines is basically a concept of you could think of it as a scheduler or a distributor or a",
    "start": "2327470",
    "end": "2334360"
  },
  {
    "text": "distributed job manager right or a job manager rather basically what it is is",
    "start": "2334360",
    "end": "2340250"
  },
  {
    "text": "just like any other distributed job you create multiple jobs inside a pipeline and the pipeline then define me or that",
    "start": "2340250",
    "end": "2347930"
  },
  {
    "text": "first of all your job is completed from start to finish if it errors out it's",
    "start": "2347930",
    "end": "2353540"
  },
  {
    "text": "going to restart it or retry it or send you a notification for example it's gonna make sure that it distributes",
    "start": "2353540",
    "end": "2359480"
  },
  {
    "text": "these resources properly for your job and also make sure that it it applies",
    "start": "2359480",
    "end": "2367610"
  },
  {
    "text": "the preset or the configuration that you have defined so in this case I've already created a pipeline I won't go",
    "start": "2367610",
    "end": "2374450"
  },
  {
    "text": "through the details there but basically talks about what is my input bucket what is my output location etc what is the",
    "start": "2374450",
    "end": "2380300"
  },
  {
    "text": "preset etc so I'm just gonna simply go and create a job so here I click on",
    "start": "2380300",
    "end": "2385430"
  },
  {
    "text": "create a new job I select a pipeline I select the file in this case I'm just",
    "start": "2385430",
    "end": "2395810"
  },
  {
    "text": "gonna select my file here the output key I want to store it in the same folder",
    "start": "2395810",
    "end": "2401660"
  },
  {
    "text": "under VOD slash decryption parameters so this is if your file was encrypted in s3",
    "start": "2401660",
    "end": "2408440"
  },
  {
    "text": "and you wanted to decrypt it you can actually specify the decryption methodology which where do you go to get",
    "start": "2408440",
    "end": "2415190"
  },
  {
    "text": "the key etc in our case since the file was simply you know stored on",
    "start": "2415190",
    "end": "2420740"
  },
  {
    "text": "encrypted we're just not gonna bother decrypting it in terms of the output details this is where the precepts",
    "start": "2420740",
    "end": "2426680"
  },
  {
    "text": "commonplace as you can see there is a lot of different system precepts that are predefined right so we're just gonna",
    "start": "2426680",
    "end": "2432590"
  },
  {
    "text": "simply do a system preset for HLS video for 600k segment duration I'm gonna keep",
    "start": "2432590",
    "end": "2439040"
  },
  {
    "text": "segment duration at 10 seconds output key I'm gonna call it mu P that's a",
    "start": "2439040",
    "end": "2444350"
  },
  {
    "text": "prefix to all the different TS files or the segment files that are gonna be generated I don't want to create",
    "start": "2444350",
    "end": "2449900"
  },
  {
    "text": "thumbnails I don't want to rotate and I don't want to do any clips or captions I",
    "start": "2449900",
    "end": "2455960"
  },
  {
    "text": "do want to do a playlist so the name of my master playlist here playlist format",
    "start": "2455960",
    "end": "2461450"
  },
  {
    "text": "I'm gonna use HLS v3 put it in the master playlist in terms of content",
    "start": "2461450",
    "end": "2467690"
  },
  {
    "text": "protection this is where basically it is asking me if I want it encrypted so I say yes I do want to do HLS yes",
    "start": "2467690",
    "end": "2475550"
  },
  {
    "text": "encryption or I can select PlayReady DRM so if I just simply select PlayReady DRM",
    "start": "2475550",
    "end": "2481240"
  },
  {
    "text": "it would you know give me the options for PlayReady if I don't I simply go to HLS AES in",
    "start": "2481240",
    "end": "2489440"
  },
  {
    "text": "this case I'm just gonna say store my key with the variant playlist what that means is that the key that is used to",
    "start": "2489440",
    "end": "2498050"
  },
  {
    "text": "encrypt these objects it's also gonna be stored in the same slash VOD folder the path that I had to store my segments",
    "start": "2498050",
    "end": "2505160"
  },
  {
    "text": "alright and then I simply go and I say click and create a new job and it'll start running the job it'll take a",
    "start": "2505160",
    "end": "2511760"
  },
  {
    "text": "little while because the file is big so I have pre created this stuff here so as",
    "start": "2511760",
    "end": "2517940"
  },
  {
    "text": "you can see here is my mu P key file this is my actual key file which was used to encrypt these segments m3u8 file",
    "start": "2517940",
    "end": "2525560"
  },
  {
    "text": "that's my manifest file and then all the different segments that were generated for this muppets video that I had ok",
    "start": "2525560",
    "end": "2532700"
  },
  {
    "text": "great so now I have you know the input file I have the output file the output",
    "start": "2532700",
    "end": "2538280"
  },
  {
    "text": "segments in HLS segments AES encrypted ready to go great now let's go to cloud",
    "start": "2538280",
    "end": "2544460"
  },
  {
    "text": "front-right which is my CDN which is fronting my origin server so basically",
    "start": "2544460",
    "end": "2550160"
  },
  {
    "text": "in this case I've created a distribution it web distribution as you can see I have",
    "start": "2550160",
    "end": "2557009"
  },
  {
    "text": "access to a domain called edge reinvent basically I'm using an SSL cert a",
    "start": "2557009",
    "end": "2562650"
  },
  {
    "text": "branded SSL sir new feature that CloudFront has for a jury invent",
    "start": "2562650",
    "end": "2567660"
  },
  {
    "text": "basically all my interaction whether that be getting the keys or getting the segment's or manifest file whatever have",
    "start": "2567660",
    "end": "2573900"
  },
  {
    "text": "you it's all gonna be over SSL or HTTPS and it's pointing to my domain in terms",
    "start": "2573900",
    "end": "2581220"
  },
  {
    "text": "of the origins I have my bucket slash VOD and I have my origin access identity",
    "start": "2581220",
    "end": "2587940"
  },
  {
    "text": "so this goes back to remember when me heart access management interim on s3",
    "start": "2587940",
    "end": "2593489"
  },
  {
    "text": "like so on s3 nobody has access to your your content right",
    "start": "2593489",
    "end": "2599099"
  },
  {
    "text": "how does cloud front or how does elastic transcoder get access to this content",
    "start": "2599099",
    "end": "2604559"
  },
  {
    "text": "it's all through the I am roles in the case of s3 specifically there is a thing",
    "start": "2604559",
    "end": "2609900"
  },
  {
    "text": "called Origin access identity that should be fine for cloud front and s3 gives the the access to the CloudFront",
    "start": "2609900",
    "end": "2617369"
  },
  {
    "text": "distribution with this specific identity so the idea is that if a user tries to go straight to s3 they are denied their",
    "start": "2617369",
    "end": "2624660"
  },
  {
    "text": "only way to access the content will be through cloud front and that's where origin access identity comes into play a",
    "start": "2624660",
    "end": "2630509"
  },
  {
    "text": "little bit about big fears so here there is gonna be a cross domain dot XML file",
    "start": "2630509",
    "end": "2635700"
  },
  {
    "text": "it's basically accessible over HTTP and HTTPS anything else the key files the",
    "start": "2635700",
    "end": "2641630"
  },
  {
    "text": "manifest file the chunks everything is going to be over HTTP and here the",
    "start": "2641630",
    "end": "2647549"
  },
  {
    "text": "trusted trusted signer is where I have defined the cookie behavior right that's",
    "start": "2647549",
    "end": "2654269"
  },
  {
    "text": "where the cloud form is gonna actually when a file is being requested by the player or the viewer CloudFront is gonna",
    "start": "2654269",
    "end": "2660660"
  },
  {
    "text": "make sure that the cookie exists and it matches well with the server that",
    "start": "2660660",
    "end": "2666450"
  },
  {
    "text": "actually created that cookie in there all right great so let's go this is my application",
    "start": "2666450",
    "end": "2675289"
  },
  {
    "text": "basically right here Adreno mint.com slash signed content this is like a web",
    "start": "2675289",
    "end": "2681749"
  },
  {
    "text": "page simple web page a couple of ec2 instances hosting this site what this",
    "start": "2681749",
    "end": "2688349"
  },
  {
    "text": "if I click on this link right here it can generate a signed URL for a content or if I click on this right here it will",
    "start": "2688349",
    "end": "2695220"
  },
  {
    "text": "actually create a signed cookie this is where just imagine if you have an authentication authorization application",
    "start": "2695220",
    "end": "2700980"
  },
  {
    "text": "this is where user logs in right in this case you know user can just simply click",
    "start": "2700980",
    "end": "2706140"
  },
  {
    "text": "and we assume that the user has logged in and it will generate a cookie so",
    "start": "2706140",
    "end": "2711450"
  },
  {
    "text": "looking at the resources real quick they are there any cookies the site has no",
    "start": "2711450",
    "end": "2718230"
  },
  {
    "text": "cookies all right so once we click right here the cookies will be created ok and",
    "start": "2718230",
    "end": "2726079"
  },
  {
    "text": "we're just gonna go and this guy here that's my Muppets file that was",
    "start": "2726079",
    "end": "2733079"
  },
  {
    "text": "transcoded and I'm gonna go and start playing it and as you can see here it",
    "start": "2733079",
    "end": "2739380"
  },
  {
    "text": "started playing it so what's happening let's first look at the cookies as you can see right here there are three",
    "start": "2739380",
    "end": "2745440"
  },
  {
    "text": "different cookies that are created by this app and CloudFront is checking verifying that the cookies",
    "start": "2745440",
    "end": "2752549"
  },
  {
    "text": "exist before any of the segments before any of the keys are being sent out and",
    "start": "2752549",
    "end": "2757619"
  },
  {
    "text": "if we look at the developer tab here in the network's section as you can see here it is requesting the MU P key file",
    "start": "2757619",
    "end": "2764489"
  },
  {
    "text": "that was generated it's also requesting any time it's requesting the segment's",
    "start": "2764489",
    "end": "2769499"
  },
  {
    "text": "so for every single segment it's also requesting the key file to be able to actually go and and play that or",
    "start": "2769499",
    "end": "2776880"
  },
  {
    "text": "unencrypted that object to play that that particular segment all right so",
    "start": "2776880",
    "end": "2782279"
  },
  {
    "text": "that was the demo for our on-demand streaming so as you can see here it's",
    "start": "2782279",
    "end": "2788279"
  },
  {
    "text": "our 10-second segments every 10 seconds it actually requests the key and the",
    "start": "2788279",
    "end": "2793380"
  },
  {
    "text": "segment alright so can we switch back to the presentation please",
    "start": "2793380",
    "end": "2799279"
  },
  {
    "text": "thank you all right so we talked about",
    "start": "2801150",
    "end": "2807930"
  },
  {
    "text": "this now the the secure live streaming piece right so in this case what we're",
    "start": "2807930",
    "end": "2816569"
  },
  {
    "text": "doing here is basically I'm using an ec2 instance or actually a pair of ec2 instances that are running in Gen X with",
    "start": "2816569",
    "end": "2824099"
  },
  {
    "text": "the with the rtmp module pre-installed in it and that's basically for rtmp in",
    "start": "2824099",
    "end": "2830220"
  },
  {
    "text": "just point then it uses the the ffmpeg",
    "start": "2830220",
    "end": "2835490"
  },
  {
    "text": "that's pre compiled with the rtmp module for actually transcoding into HLS",
    "start": "2835490",
    "end": "2841499"
  },
  {
    "text": "segments so you get an rtmp stream you use ffmpeg to transcode and then your",
    "start": "2841499",
    "end": "2848490"
  },
  {
    "text": "engine X is encrypting individual HLS segments okay and it's generating keys",
    "start": "2848490",
    "end": "2855509"
  },
  {
    "text": "for those segments rtmp module for engine X supports rtmp HLS MPEG - live",
    "start": "2855509",
    "end": "2863279"
  },
  {
    "text": "streaming if you need more information it's a github project as I said open source take a look at it very very",
    "start": "2863279",
    "end": "2869009"
  },
  {
    "text": "simple to deploy all I did was basically simply launch an ec2 instance with an army that has engine X and then added",
    "start": "2869009",
    "end": "2875970"
  },
  {
    "text": "the module in there okay so what's happening rtmp stream through a device",
    "start": "2875970",
    "end": "2882749"
  },
  {
    "text": "in my case I'm gonna use my Kindle HDX as you'll see and it is I'm gonna use",
    "start": "2882749",
    "end": "2889710"
  },
  {
    "text": "the camera for the Kindle HDX to actually capture the video here and it",
    "start": "2889710",
    "end": "2895049"
  },
  {
    "text": "will generate an rtmp stream which will go to my ec2 instance that's running in Gen X notice I'm using route 53 in",
    "start": "2895049",
    "end": "2902759"
  },
  {
    "text": "between to do DNS failover and the reason for that is I want to run it in a",
    "start": "2902759",
    "end": "2909299"
  },
  {
    "text": "failover mode so in case say something wrong goes on with my ec2 instance route",
    "start": "2909299",
    "end": "2914369"
  },
  {
    "text": "53 has the built-in capability for health checks and failover so in case something happens to the primary it can",
    "start": "2914369",
    "end": "2920369"
  },
  {
    "text": "automatically flip to a secondary ec2 instance in the case of a failure you",
    "start": "2920369",
    "end": "2925680"
  },
  {
    "text": "can also launch it in a say active active mode and we'll talk about it towards the end of my presentation but",
    "start": "2925680",
    "end": "2932160"
  },
  {
    "text": "in this case I'm just doing active more so in the case of an issue we'll simply failover then basically my nginx",
    "start": "2932160",
    "end": "2940310"
  },
  {
    "text": "receives the add rtmp feed uses FFF FFM back to transcode and encrypt the segments and then i'm there they're",
    "start": "2940310",
    "end": "2948079"
  },
  {
    "text": "being delivered basically to the to the JW player but before that JW player will",
    "start": "2948079",
    "end": "2955930"
  },
  {
    "text": "call the application which generates the cookie that's what we talked about and I",
    "start": "2955930",
    "end": "2961700"
  },
  {
    "text": "demoed that for my on demand piece already right and then the the segment's are being delivered through cloud 4 as",
    "start": "2961700",
    "end": "2967520"
  },
  {
    "text": "we talked about and there is your encrypted segments etc so let's switch",
    "start": "2967520",
    "end": "2973310"
  },
  {
    "text": "to the other screen and I'll give a live demo",
    "start": "2973310",
    "end": "2978490"
  },
  {
    "text": "so I'm gonna put the configuration here for",
    "start": "2990520",
    "end": "2995460"
  },
  {
    "text": "okay",
    "start": "3005890",
    "end": "3008890"
  },
  {
    "text": "all right so basically here's my ec2",
    "start": "3014480",
    "end": "3021450"
  },
  {
    "text": "console and as you can see here there is an ec2 instance and m3 medium that I'm",
    "start": "3021450",
    "end": "3027060"
  },
  {
    "text": "running I give it a actually a public IP",
    "start": "3027060",
    "end": "3033840"
  },
  {
    "text": "address or elastic IP that's how my Kindle HDX is gonna go and connect to it and basically I also opened a ports for",
    "start": "3033840",
    "end": "3045060"
  },
  {
    "text": "rtmp SSH and just so SSH and rtmp ports",
    "start": "3045060",
    "end": "3050760"
  },
  {
    "text": "and B HTTP and HTTP port because rtmp for ingest for ingress because Kindle is",
    "start": "3050760",
    "end": "3057090"
  },
  {
    "text": "gonna go connect to the ec2 instance over port 1935 so you want to make sure that you have it you know pinned down to",
    "start": "3057090",
    "end": "3063690"
  },
  {
    "text": "the specific IP address range for where the Kindle is gonna be and then for a delivery perspective if it's port 443",
    "start": "3063690",
    "end": "3070590"
  },
  {
    "text": "for the keys and the segment files that are going to be delivered then there is",
    "start": "3070590",
    "end": "3076890"
  },
  {
    "text": "the CloudFront distribution basically if I go back to the distributions here there is a live streaming distribution",
    "start": "3076890",
    "end": "3083700"
  },
  {
    "text": "right here and as you can see basically again I'm using the same domain and the",
    "start": "3083700",
    "end": "3089850"
  },
  {
    "text": "SSL cert for the origins I have live origin encrypted as you know matcom",
    "start": "3089850",
    "end": "3095280"
  },
  {
    "text": "that's pointing to the IP address of my ec2 instance through route 53 and it's a",
    "start": "3095280",
    "end": "3102480"
  },
  {
    "text": "custom origin in terms of the behaviors now every single thing the TS files the",
    "start": "3102480",
    "end": "3107850"
  },
  {
    "text": "key files anything that's in slash HLS directory is delivered via SSL and there",
    "start": "3107850",
    "end": "3114390"
  },
  {
    "text": "is the sign cookie that we talked about okay so with this I'm going to start the",
    "start": "3114390",
    "end": "3120810"
  },
  {
    "text": "live stream and I'm going to try to stream you guys right here and see if it",
    "start": "3120810",
    "end": "3127050"
  },
  {
    "text": "works so first let's log into my instance right here real quick",
    "start": "3127050",
    "end": "3133160"
  },
  {
    "text": "some ssa i'm doing an ssh into my instance alright so if I do a PS on it",
    "start": "3136339",
    "end": "3145619"
  },
  {
    "text": "and check on my nginx I see that the",
    "start": "3145619",
    "end": "3151499"
  },
  {
    "text": "engine X process is running I check ffmpeg that's my transcoder as you can",
    "start": "3151499",
    "end": "3159029"
  },
  {
    "text": "see here the first one shows that there is actually a live stream coming in and",
    "start": "3159029",
    "end": "3164519"
  },
  {
    "text": "that's through this Kindle and I go back in here and I click on live HLS",
    "start": "3164519",
    "end": "3172230"
  },
  {
    "text": "encrypted and see if it plays it hola so",
    "start": "3172230",
    "end": "3178680"
  },
  {
    "text": "as you can see here it's right now streaming the room there aren't a whole",
    "start": "3178680",
    "end": "3184619"
  },
  {
    "text": "lot of people last session so I'll just leave it right here you can rewrite it",
    "start": "3184619",
    "end": "3191910"
  },
  {
    "text": "just to make sure that it's working right and very quickly here the cookie",
    "start": "3191910",
    "end": "3198059"
  },
  {
    "text": "was already created because we created in the case of our on-demand right and then as you can see right here so pay",
    "start": "3198059",
    "end": "3206930"
  },
  {
    "text": "attention if s file that's being generated then there is the key file and",
    "start": "3206930",
    "end": "3212400"
  },
  {
    "text": "then there is the individual segment so every single segment is being encrypted",
    "start": "3212400",
    "end": "3218430"
  },
  {
    "text": "by a key and it is being served you know through the same mechanism through",
    "start": "3218430",
    "end": "3225839"
  },
  {
    "text": "CloudFront ok so I'm gonna pause this",
    "start": "3225839",
    "end": "3231180"
  },
  {
    "text": "right here if you can move back to the other screen thank you",
    "start": "3231180",
    "end": "3237390"
  },
  {
    "text": "I don't wanna break my Kindle so a few best practices here so first of all you",
    "start": "3237390",
    "end": "3244320"
  },
  {
    "text": "know you want to make sure that you're limited you're limiting access to port 1935 to only trusted resources in my",
    "start": "3244320",
    "end": "3251190"
  },
  {
    "text": "case you know I had it blocked only for my Kindle device because if you have it open I mean guess what anybody could",
    "start": "3251190",
    "end": "3257340"
  },
  {
    "text": "just go in and start sending packets on port 1935 you do not want that you want",
    "start": "3257340",
    "end": "3263460"
  },
  {
    "text": "to define property tl settings for the dot TS files and dot m3u8 files or t as",
    "start": "3263460",
    "end": "3268890"
  },
  {
    "text": "files being the segments and m3u8 files being the playlist i showed it in the cloud front console in the behavior",
    "start": "3268890",
    "end": "3275280"
  },
  {
    "text": "section that's where you define the TTL s so you don't want to define them as",
    "start": "3275280",
    "end": "3280470"
  },
  {
    "text": "zero you know anything that's low but not quite zero is something is the way to go because you know you don't want to",
    "start": "3280470",
    "end": "3287130"
  },
  {
    "text": "put unnecessary burden on your origin servers either negative TTL is an",
    "start": "3287130",
    "end": "3292440"
  },
  {
    "text": "important one so oftentimes what happens is that you know if somebody knows the",
    "start": "3292440",
    "end": "3297840"
  },
  {
    "text": "sort of say pattern of your TS files they can request a segment which is ahead of you know what it's supposed to",
    "start": "3297840",
    "end": "3305760"
  },
  {
    "text": "be and it once it's gonna get a 404 then at that point you know that's not good",
    "start": "3305760",
    "end": "3311700"
  },
  {
    "text": "because then when it actually when the stream actually gets to that point you know and if it's cached inside of",
    "start": "3311700",
    "end": "3317370"
  },
  {
    "text": "CloudFront and you have that 404 cached so that's why you want to put the negative details for that kind of a",
    "start": "3317370",
    "end": "3322620"
  },
  {
    "text": "purpose geo blocking that's another one again going back to CloudFront settings",
    "start": "3322620",
    "end": "3328410"
  },
  {
    "text": "you can very easily say which countries which specific Gio's I want to have this",
    "start": "3328410",
    "end": "3333420"
  },
  {
    "text": "stream go to you want to rotate the key files as often as often as possible and I'll talk about it in my case basically",
    "start": "3333420",
    "end": "3340260"
  },
  {
    "text": "every single segment has its own key so we are generating a key for every single",
    "start": "3340260",
    "end": "3345990"
  },
  {
    "text": "segment and you want to randomize the T the the pattern for the dot TS files",
    "start": "3345990",
    "end": "3352230"
  },
  {
    "text": "again going back to the point that I made earlier that you don't want it to be really predictive because if people",
    "start": "3352230",
    "end": "3357450"
  },
  {
    "text": "can predict these right then there is a possibility that they can capture these T as Wells but then the point being it's",
    "start": "3357450",
    "end": "3363990"
  },
  {
    "text": "all encrypted and then you have the keys that are encrypted right so it's it becomes again depending on the",
    "start": "3363990",
    "end": "3369990"
  },
  {
    "text": "underlying solution that you you can make it pretty robust so this is",
    "start": "3369990",
    "end": "3375500"
  },
  {
    "text": "the settings that you set in at the ec2 instance level very quickly this is the behavior for TS files and m3u8 files for",
    "start": "3375500",
    "end": "3382910"
  },
  {
    "text": "TTLs you can G restrict on cloud front this is the rtmp HLS configuration on the",
    "start": "3382910",
    "end": "3389990"
  },
  {
    "text": "index layer so this is where my ec2 instance had this configuration I'm gonna mention a few things here very",
    "start": "3389990",
    "end": "3395060"
  },
  {
    "text": "quickly to enable encryption you just simply say HLS keys underscore keys on",
    "start": "3395060",
    "end": "3400630"
  },
  {
    "text": "and then you define a pattern for those underlying segment files of the key",
    "start": "3400630",
    "end": "3405650"
  },
  {
    "text": "files and you know in this case I'm using the timestamp and it's rounded to 250 ml a second and then there is a",
    "start": "3405650",
    "end": "3412460"
  },
  {
    "text": "location where you store these key files and then you know basically where are",
    "start": "3412460",
    "end": "3418790"
  },
  {
    "text": "you where do you want to return the key files from or where your player is gonna go and request the key files from right",
    "start": "3418790",
    "end": "3423980"
  },
  {
    "text": "so in this case I was using an SSL so even your keys are being requested over SSL and then how many keys you how many",
    "start": "3423980",
    "end": "3433760"
  },
  {
    "text": "fragments per key you want to do in this example it's to the demo that we did we did one key per segment and then lastly",
    "start": "3433760",
    "end": "3442369"
  },
  {
    "text": "I mentioned earlier the setup that I had for nginx was really a failover active-passive model right so if my",
    "start": "3442369",
    "end": "3449330"
  },
  {
    "text": "primary fails route 53 will switch to the secondary now nginx rtmp module",
    "start": "3449330",
    "end": "3455840"
  },
  {
    "text": "gives you the capability to enable HLS fragments lot it's like line what that means is that every single time it is",
    "start": "3455840",
    "end": "3462520"
  },
  {
    "text": "creating these segments they start at a particular time step so basically both of your servers can be ingest points",
    "start": "3462520",
    "end": "3469880"
  },
  {
    "text": "about both of your engine acts instances servers could be in just points and they",
    "start": "3469880",
    "end": "3475220"
  },
  {
    "text": "can create these segments they are aligned at a particular time step what",
    "start": "3475220",
    "end": "3480320"
  },
  {
    "text": "happened",
    "start": "3480320",
    "end": "3482650"
  },
  {
    "text": "so they could basically be aligned so that in then you could be running it in",
    "start": "3488000",
    "end": "3493680"
  },
  {
    "text": "a active active mode so that you know if one fails the other one automatically takes it so last slide a quick recap",
    "start": "3493680",
    "end": "3500309"
  },
  {
    "text": "this is the architecture that Nihar talked about how do you do streaming there's a simple streaming if it's on",
    "start": "3500309",
    "end": "3505950"
  },
  {
    "text": "demand or life let's fill in some colors how do you make it secure right so key",
    "start": "3505950",
    "end": "3511500"
  },
  {
    "text": "is key management service it'll save a lot of trouble for you you can do it all yourself manage the keys and crypt all",
    "start": "3511500",
    "end": "3518700"
  },
  {
    "text": "that stuff but leverage the features that are built in for you you know that",
    "start": "3518700",
    "end": "3523859"
  },
  {
    "text": "take care of this management in this case key management service and its integration with all these different",
    "start": "3523859",
    "end": "3529140"
  },
  {
    "text": "services so very first the media owner can create a key or send in a key into",
    "start": "3529140",
    "end": "3535980"
  },
  {
    "text": "key management service and then every other service like elastic transcoder like ec2 instances all of these even s3",
    "start": "3535980",
    "end": "3545400"
  },
  {
    "text": "can use the built-in integration with key management service to call make",
    "start": "3545400",
    "end": "3552089"
  },
  {
    "text": "calls and manage these encryption keys on your behalf so that there is no human",
    "start": "3552089",
    "end": "3557880"
  },
  {
    "text": "intervention involved and it becomes very nice and manageable and then lastly you can use CloudFront Kuki feature to",
    "start": "3557880",
    "end": "3565380"
  },
  {
    "text": "make it even simpler for you I mean I remember in the absence of this feature you know customers would ask me hey how",
    "start": "3565380",
    "end": "3571859"
  },
  {
    "text": "do I deliver my key files or did I deliver my manifest files you know they then if they're not encrypted well sign",
    "start": "3571859",
    "end": "3578519"
  },
  {
    "text": "URLs but just imagine in the case of live streaming how hard it is to create",
    "start": "3578519",
    "end": "3583710"
  },
  {
    "text": "these sign URLs on the fly at the same time when the segments are being created the manifest files are being created so",
    "start": "3583710",
    "end": "3590069"
  },
  {
    "text": "it's it's not that easy to kind of you know make it in sequence right so the",
    "start": "3590069",
    "end": "3596309"
  },
  {
    "text": "sign coqui capability with CloudFront takes care of that as well and makes it gives you features that that you know",
    "start": "3596309",
    "end": "3602759"
  },
  {
    "text": "allow you to build an even more robust and secure workflow so with that thank you very much for attending for the time",
    "start": "3602759",
    "end": "3608910"
  },
  {
    "text": "I hope it was entertaining the demos part at least",
    "start": "3608910",
    "end": "3613579"
  }
]