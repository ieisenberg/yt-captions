[
  {
    "text": "in this video we are going to show you",
    "start": "40",
    "end": "1839"
  },
  {
    "text": "how you can build an AIML based card",
    "start": "1839",
    "end": "3919"
  },
  {
    "text": "fraud detection Solution on",
    "start": "3919",
    "end": "7359"
  },
  {
    "text": "AWS in this use case the card payment",
    "start": "7400",
    "end": "10240"
  },
  {
    "text": "authorization application is running on",
    "start": "10240",
    "end": "12080"
  },
  {
    "text": "zos mainframe system and using static",
    "start": "12080",
    "end": "14599"
  },
  {
    "text": "business rules to approve or decline the",
    "start": "14599",
    "end": "17080"
  },
  {
    "text": "Legacy application is enhanced to make a",
    "start": "17080",
    "end": "19080"
  },
  {
    "text": "real-time call to AWS to get a fraud",
    "start": "19080",
    "end": "21320"
  },
  {
    "text": "score generated by Amazon fraud",
    "start": "21320",
    "end": "23080"
  },
  {
    "text": "detection service or any other AIML",
    "start": "23080",
    "end": "25519"
  },
  {
    "text": "model built using sag maker the model is",
    "start": "25519",
    "end": "28480"
  },
  {
    "text": "trained with attributes such as as",
    "start": "28480",
    "end": "30199"
  },
  {
    "text": "customer purchase history for example",
    "start": "30199",
    "end": "32119"
  },
  {
    "text": "number of purchases in last 48 hours and",
    "start": "32119",
    "end": "34640"
  },
  {
    "text": "Merchant sales history for example",
    "start": "34640",
    "end": "36520"
  },
  {
    "text": "reported frauds in last 24 hours during",
    "start": "36520",
    "end": "39480"
  },
  {
    "text": "inference of the score same attributes",
    "start": "39480",
    "end": "41320"
  },
  {
    "text": "are passed to the model to generate",
    "start": "41320",
    "end": "42920"
  },
  {
    "text": "optimal",
    "start": "42920",
    "end": "44800"
  },
  {
    "text": "score let us review the solution",
    "start": "44800",
    "end": "47320"
  },
  {
    "text": "architecture when a customer swipes a",
    "start": "47320",
    "end": "49520"
  },
  {
    "text": "card at Terminal or makes an online",
    "start": "49520",
    "end": "51440"
  },
  {
    "text": "purchase the bank will receive the",
    "start": "51440",
    "end": "53079"
  },
  {
    "text": "authorization request on the mainframe",
    "start": "53079",
    "end": "54960"
  },
  {
    "text": "system the application will make a",
    "start": "54960",
    "end": "57000"
  },
  {
    "text": "real-time call to AWS the process",
    "start": "57000",
    "end": "59960"
  },
  {
    "text": "running on AWS will get the customer and",
    "start": "59960",
    "end": "62280"
  },
  {
    "text": "Merchant history details from relational",
    "start": "62280",
    "end": "64239"
  },
  {
    "text": "database and provide to the AIML scoring",
    "start": "64239",
    "end": "66840"
  },
  {
    "text": "model running on say Amazon fraud",
    "start": "66840",
    "end": "69119"
  },
  {
    "text": "Detector service the model will return a",
    "start": "69119",
    "end": "71680"
  },
  {
    "text": "score higher score will indicate",
    "start": "71680",
    "end": "73720"
  },
  {
    "text": "potential fraudulent transaction the",
    "start": "73720",
    "end": "76240"
  },
  {
    "text": "Mainframe application combining with the",
    "start": "76240",
    "end": "78360"
  },
  {
    "text": "other business rule will make a decision",
    "start": "78360",
    "end": "80159"
  },
  {
    "text": "to approve or decline the transaction",
    "start": "80159",
    "end": "83000"
  },
  {
    "text": "detail is inserted on Mainframe database",
    "start": "83000",
    "end": "85280"
  },
  {
    "text": "either vsam db2 or IMS the record will",
    "start": "85280",
    "end": "89040"
  },
  {
    "text": "be captured and rep applicated to AWS",
    "start": "89040",
    "end": "91159"
  },
  {
    "text": "near real time using precisely the",
    "start": "91159",
    "end": "93600"
  },
  {
    "text": "precisely publisher agent is running on",
    "start": "93600",
    "end": "95520"
  },
  {
    "text": "Mainframe and the apply agent is running",
    "start": "95520",
    "end": "97479"
  },
  {
    "text": "on an Amazon ec2 instance the apply",
    "start": "97479",
    "end": "100360"
  },
  {
    "text": "agent converts raw database logs",
    "start": "100360",
    "end": "102640"
  },
  {
    "text": "received from publisher agent to Json",
    "start": "102640",
    "end": "104320"
  },
  {
    "text": "format using the copy book and publishes",
    "start": "104320",
    "end": "106560"
  },
  {
    "text": "the messages to Amazon managed streaming",
    "start": "106560",
    "end": "108479"
  },
  {
    "text": "for cofco or msk several service will",
    "start": "108479",
    "end": "111479"
  },
  {
    "text": "consume the message from msk a kovka",
    "start": "111479",
    "end": "114560"
  },
  {
    "text": "connect process can pull the messages",
    "start": "114560",
    "end": "116280"
  },
  {
    "text": "from msk and right to RDS database the",
    "start": "116280",
    "end": "119240"
  },
  {
    "text": "history detail details are read from",
    "start": "119240",
    "end": "120680"
  },
  {
    "text": "same database during the scoring process",
    "start": "120680",
    "end": "123560"
  },
  {
    "text": "MSG will stream the messages to Amazon",
    "start": "123560",
    "end": "125799"
  },
  {
    "text": "S3 using no code integration with fire",
    "start": "125799",
    "end": "128080"
  },
  {
    "text": "hose the data on S3 will be used offline",
    "start": "128080",
    "end": "131000"
  },
  {
    "text": "to train the AIML models along with",
    "start": "131000",
    "end": "133200"
  },
  {
    "text": "other internal or external data sources",
    "start": "133200",
    "end": "136080"
  },
  {
    "text": "for analytics and business intelligence",
    "start": "136080",
    "end": "138160"
  },
  {
    "text": "the messages from msk can be pulled to",
    "start": "138160",
    "end": "140239"
  },
  {
    "text": "Amazon red shift business users can run",
    "start": "140239",
    "end": "142959"
  },
  {
    "text": "query against the database using natural",
    "start": "142959",
    "end": "145560"
  },
  {
    "text": "language similarly other integration may",
    "start": "145560",
    "end": "148280"
  },
  {
    "text": "be built using Amazon event Bridge pipe",
    "start": "148280",
    "end": "150400"
  },
  {
    "text": "to stream data to services like Amazon",
    "start": "150400",
    "end": "152560"
  },
  {
    "text": "SNS or pinpoint for notification and",
    "start": "152560",
    "end": "154879"
  },
  {
    "text": "alerting in this demonstration there are",
    "start": "154879",
    "end": "157360"
  },
  {
    "text": "several AWS resources created some of",
    "start": "157360",
    "end": "160400"
  },
  {
    "text": "them are pre-built using cloud formation",
    "start": "160400",
    "end": "162280"
  },
  {
    "text": "template this includes VPC subnets IAM",
    "start": "162280",
    "end": "166040"
  },
  {
    "text": "roles AWS Key Management Service",
    "start": "166040",
    "end": "170640"
  },
  {
    "text": "Etc on AWS console we can see there is a",
    "start": "171080",
    "end": "174519"
  },
  {
    "text": "VPC created with three",
    "start": "174519",
    "end": "177920"
  },
  {
    "text": "subnets PR private link end points are",
    "start": "178599",
    "end": "180920"
  },
  {
    "text": "created for access to seress services",
    "start": "180920",
    "end": "183159"
  },
  {
    "text": "such as secret manager STS event Bridge",
    "start": "183159",
    "end": "185959"
  },
  {
    "text": "pipes",
    "start": "185959",
    "end": "188480"
  },
  {
    "text": "Etc a msk cluster is defined in the VPC",
    "start": "190159",
    "end": "193920"
  },
  {
    "text": "with three Brokers and three different",
    "start": "193920",
    "end": "197400"
  },
  {
    "text": "subnets both I am and sasl a",
    "start": "198519",
    "end": "201879"
  },
  {
    "text": "password-based authentication is",
    "start": "201879",
    "end": "204480"
  },
  {
    "text": "enabled the credentials are stored in",
    "start": "204480",
    "end": "206799"
  },
  {
    "text": "secret manager the bootstrap servers",
    "start": "206799",
    "end": "209400"
  },
  {
    "text": "detail for both IM am and sasl",
    "start": "209400",
    "end": "211879"
  },
  {
    "text": "authentication types are available in",
    "start": "211879",
    "end": "213680"
  },
  {
    "text": "client",
    "start": "213680",
    "end": "216079"
  },
  {
    "text": "information RDS posters database",
    "start": "218959",
    "end": "221480"
  },
  {
    "text": "instance would DB name as card payments",
    "start": "221480",
    "end": "226840"
  },
  {
    "text": "fraud a Lambda function is created to",
    "start": "227319",
    "end": "230080"
  },
  {
    "text": "pull the messages from Ms and insert RDS",
    "start": "230080",
    "end": "232920"
  },
  {
    "text": "posters",
    "start": "232920",
    "end": "235439"
  },
  {
    "text": "database the function will be running in",
    "start": "236560",
    "end": "238720"
  },
  {
    "text": "the same VPC",
    "start": "238720",
    "end": "241400"
  },
  {
    "text": "the environment variables are set for",
    "start": "241400",
    "end": "243159"
  },
  {
    "text": "RDS database connection",
    "start": "243159",
    "end": "246640"
  },
  {
    "text": "details a SNS topic messages from msk",
    "start": "247319",
    "end": "250760"
  },
  {
    "text": "will be streamed to SNS using an event",
    "start": "250760",
    "end": "252640"
  },
  {
    "text": "Bridge pipe the SNS topic is configured",
    "start": "252640",
    "end": "255439"
  },
  {
    "text": "to send email notification first we are",
    "start": "255439",
    "end": "257840"
  },
  {
    "text": "going to obtain the Mainframe data",
    "start": "257840",
    "end": "259519"
  },
  {
    "text": "replication software from Marketplace",
    "start": "259519",
    "end": "262040"
  },
  {
    "text": "from AWS console search for",
    "start": "262040",
    "end": "265960"
  },
  {
    "text": "Marketplace click discover products",
    "start": "266759",
    "end": "271600"
  },
  {
    "text": "type AWS Mainframe migration with",
    "start": "272520",
    "end": "274840"
  },
  {
    "text": "precisely on search",
    "start": "274840",
    "end": "276880"
  },
  {
    "text": "bar click on data replication for IBM",
    "start": "276880",
    "end": "281639"
  },
  {
    "text": "zos then click continue to subscribe",
    "start": "281639",
    "end": "284199"
  },
  {
    "text": "button follow the instructions to",
    "start": "284199",
    "end": "286240"
  },
  {
    "text": "complete subscription next we are going",
    "start": "286240",
    "end": "288600"
  },
  {
    "text": "to set up the amazon ec2 instance once",
    "start": "288600",
    "end": "291720"
  },
  {
    "text": "you have completed the subscription come",
    "start": "291720",
    "end": "293600"
  },
  {
    "text": "back to AWS Marketplace console and",
    "start": "293600",
    "end": "295880"
  },
  {
    "text": "click manage subscriptions then click",
    "start": "295880",
    "end": "298440"
  },
  {
    "text": "launch new instance click continue to",
    "start": "298440",
    "end": "300919"
  },
  {
    "text": "launch through",
    "start": "300919",
    "end": "303479"
  },
  {
    "text": "ec2 provide a name for the ec2",
    "start": "304400",
    "end": "308039"
  },
  {
    "text": "instance scroll down to network settings",
    "start": "308039",
    "end": "310840"
  },
  {
    "text": "and click",
    "start": "310840",
    "end": "312039"
  },
  {
    "text": "edit select the VPC created for this",
    "start": "312039",
    "end": "314960"
  },
  {
    "text": "solution select one of the",
    "start": "314960",
    "end": "317680"
  },
  {
    "text": "subnet click on select existing Security",
    "start": "317680",
    "end": "320440"
  },
  {
    "text": "Group and from the drop down on common",
    "start": "320440",
    "end": "322400"
  },
  {
    "text": "Security Group select the security group",
    "start": "322400",
    "end": "324319"
  },
  {
    "text": "created for the",
    "start": "324319",
    "end": "326759"
  },
  {
    "text": "solution expand the advanced details and",
    "start": "326759",
    "end": "329240"
  },
  {
    "text": "click existing I am roll and select",
    "start": "329240",
    "end": "331240"
  },
  {
    "text": "instance profile created by cloud",
    "start": "331240",
    "end": "334960"
  },
  {
    "text": "formation paste the script in the user",
    "start": "336680",
    "end": "338840"
  },
  {
    "text": "data text box the script first installs",
    "start": "338840",
    "end": "341880"
  },
  {
    "text": "the required software such as Liber",
    "start": "341880",
    "end": "343840"
  },
  {
    "text": "kofka poster SQL client Etc then it",
    "start": "343840",
    "end": "347360"
  },
  {
    "text": "creates a Kafka folder downloads and",
    "start": "347360",
    "end": "349880"
  },
  {
    "text": "extracts the Java Kafka libraries inside",
    "start": "349880",
    "end": "352800"
  },
  {
    "text": "the Kafka Libs folder downloads the msk",
    "start": "352800",
    "end": "355400"
  },
  {
    "text": "am jar file it creates an I am",
    "start": "355400",
    "end": "358160"
  },
  {
    "text": "authentication client properties file",
    "start": "358160",
    "end": "360600"
  },
  {
    "text": "the jar and the properties file are used",
    "start": "360600",
    "end": "362600"
  },
  {
    "text": "by the javascripts runs the kofka topic",
    "start": "362600",
    "end": "365639"
  },
  {
    "text": "script to create the kofka topic",
    "start": "365639",
    "end": "367919"
  },
  {
    "text": "precisely publisher will publish the",
    "start": "367919",
    "end": "369560"
  },
  {
    "text": "records to this topic then runs the",
    "start": "369560",
    "end": "372120"
  },
  {
    "text": "kofka consumer group script to create a",
    "start": "372120",
    "end": "374080"
  },
  {
    "text": "consumer group to be used later by the",
    "start": "374080",
    "end": "375840"
  },
  {
    "text": "even Bridge pipe andc broker details",
    "start": "375840",
    "end": "378560"
  },
  {
    "text": "have to be passed as one of the",
    "start": "378560",
    "end": "379919"
  },
  {
    "text": "parameter for the scripts next it",
    "start": "379919",
    "end": "382479"
  },
  {
    "text": "creates a precisely folder and then the",
    "start": "382479",
    "end": "384280"
  },
  {
    "text": "sasl producer configuration file for",
    "start": "384280",
    "end": "387199"
  },
  {
    "text": "precisely sets the path variable to",
    "start": "387199",
    "end": "389599"
  },
  {
    "text": "include precisely B directory and runs",
    "start": "389599",
    "end": "391440"
  },
  {
    "text": "the school key gen command to create the",
    "start": "391440",
    "end": "393199"
  },
  {
    "text": "private and public key file for",
    "start": "393199",
    "end": "394840"
  },
  {
    "text": "precisely the content of the public key",
    "start": "394840",
    "end": "397160"
  },
  {
    "text": "file has to be copied to Mainframe and",
    "start": "397160",
    "end": "398960"
  },
  {
    "text": "added in key file for demon for",
    "start": "398960",
    "end": "401120"
  },
  {
    "text": "authentication click launch instance to",
    "start": "401120",
    "end": "403440"
  },
  {
    "text": "launch a new ec2 instance with precisely",
    "start": "403440",
    "end": "405800"
  },
  {
    "text": "software installed next click on the",
    "start": "405800",
    "end": "407880"
  },
  {
    "text": "instance ID to open the details page for",
    "start": "407880",
    "end": "410080"
  },
  {
    "text": "the ec2 created click the connect",
    "start": "410080",
    "end": "414400"
  },
  {
    "text": "button type ec2 user for",
    "start": "414400",
    "end": "417879"
  },
  {
    "text": "username then click connect",
    "start": "417879",
    "end": "421520"
  },
  {
    "text": "this will open the ec2 command line the",
    "start": "422919",
    "end": "425840"
  },
  {
    "text": "ec2 user data script created the public",
    "start": "425840",
    "end": "428240"
  },
  {
    "text": "private key files for precisely the",
    "start": "428240",
    "end": "430919"
  },
  {
    "text": "naacl directory contains the public key",
    "start": "430919",
    "end": "433400"
  },
  {
    "text": "file to be copied to",
    "start": "433400",
    "end": "436080"
  },
  {
    "text": "Mainframe the software agent folder",
    "start": "436080",
    "end": "438479"
  },
  {
    "text": "contains software components to be",
    "start": "438479",
    "end": "440120"
  },
  {
    "text": "installed on Mainframe is zip file a",
    "start": "440120",
    "end": "442599"
  },
  {
    "text": "system administrator access is required",
    "start": "442599",
    "end": "444720"
  },
  {
    "text": "to install the software log into the",
    "start": "444720",
    "end": "447120"
  },
  {
    "text": "main frame in this use case we",
    "start": "447120",
    "end": "449599"
  },
  {
    "text": "considered the card payments",
    "start": "449599",
    "end": "450800"
  },
  {
    "text": "authorization history is stored in a",
    "start": "450800",
    "end": "452520"
  },
  {
    "text": "vsam",
    "start": "452520",
    "end": "455039"
  },
  {
    "text": "database the screen shows the Cobalt",
    "start": "456160",
    "end": "458520"
  },
  {
    "text": "copy Book used to define the layout of",
    "start": "458520",
    "end": "460319"
  },
  {
    "text": "the message the precisely software is",
    "start": "460319",
    "end": "463080"
  },
  {
    "text": "already installed and UI is available",
    "start": "463080",
    "end": "465639"
  },
  {
    "text": "using the ispf panel to perform admin",
    "start": "465639",
    "end": "469759"
  },
  {
    "text": "works the demon process in the publisher",
    "start": "469759",
    "end": "472479"
  },
  {
    "text": "is already created in started as a batch",
    "start": "472479",
    "end": "475440"
  },
  {
    "text": "job in this demonstration the demon job",
    "start": "475440",
    "end": "478199"
  },
  {
    "text": "is running on Port 90 5 DD name sqd off",
    "start": "478199",
    "end": "482360"
  },
  {
    "text": "refers the keys file the content of the",
    "start": "482360",
    "end": "484919"
  },
  {
    "text": "public key file created within the ec2",
    "start": "484919",
    "end": "487120"
  },
  {
    "text": "instance is pasted in this file and will",
    "start": "487120",
    "end": "489039"
  },
  {
    "text": "be used to authenticate the apply engine",
    "start": "489039",
    "end": "491039"
  },
  {
    "text": "when connection request is",
    "start": "491039",
    "end": "493080"
  },
  {
    "text": "made here's the publisher",
    "start": "493080",
    "end": "496479"
  },
  {
    "text": "job from the ispf panel for precisely",
    "start": "496479",
    "end": "499759"
  },
  {
    "text": "select option",
    "start": "499759",
    "end": "501360"
  },
  {
    "text": "three vssm to msk is the name of the",
    "start": "501360",
    "end": "504400"
  },
  {
    "text": "publisher engine and the configuration",
    "start": "504400",
    "end": "506319"
  },
  {
    "text": "is stored in cab mentioned the screen",
    "start": "506319",
    "end": "508800"
  },
  {
    "text": "shows the stats such as records captured",
    "start": "508800",
    "end": "511479"
  },
  {
    "text": "records published The Source log stream",
    "start": "511479",
    "end": "513959"
  },
  {
    "text": "shows the log stream name configured to",
    "start": "513959",
    "end": "515959"
  },
  {
    "text": "Stage the database changes in our",
    "start": "515959",
    "end": "518240"
  },
  {
    "text": "scenario the log stream is a vsam based",
    "start": "518240",
    "end": "520800"
  },
  {
    "text": "file but in production coupling facility",
    "start": "520800",
    "end": "523080"
  },
  {
    "text": "based log stream is",
    "start": "523080",
    "end": "525200"
  },
  {
    "text": "recommended One Source object is",
    "start": "525200",
    "end": "527480"
  },
  {
    "text": "configured which is identified by vsam",
    "start": "527480",
    "end": "529720"
  },
  {
    "text": "pure C this will capture the logs from",
    "start": "529720",
    "end": "532200"
  },
  {
    "text": "the card payments authorization V Sam",
    "start": "532200",
    "end": "534720"
  },
  {
    "text": "file switch back to ec2 command prompt",
    "start": "534720",
    "end": "538279"
  },
  {
    "text": "we will create the RDS posters table",
    "start": "538279",
    "end": "541120"
  },
  {
    "text": "connect to the RDS database using the",
    "start": "541120",
    "end": "543200"
  },
  {
    "text": "psql",
    "start": "543200",
    "end": "544839"
  },
  {
    "text": "command then run the create table",
    "start": "544839",
    "end": "547000"
  },
  {
    "text": "command the table columns corresponds to",
    "start": "547000",
    "end": "549640"
  },
  {
    "text": "the fields in the vsam copy book run a",
    "start": "549640",
    "end": "552079"
  },
  {
    "text": "select query to validate the table next",
    "start": "552079",
    "end": "555160"
  },
  {
    "text": "create a cpy subfolder inside precisely",
    "start": "555160",
    "end": "557800"
  },
  {
    "text": "folder create a file named cardor",
    "start": "557800",
    "end": "560600"
  },
  {
    "text": "payments and paste the Cobalt copybook",
    "start": "560600",
    "end": "563519"
  },
  {
    "text": "layout save the copy book",
    "start": "563519",
    "end": "567079"
  },
  {
    "text": "file create the apply engine script file",
    "start": "567079",
    "end": "569880"
  },
  {
    "text": "named script.",
    "start": "569880",
    "end": "572040"
  },
  {
    "text": "sqd The Script has the job name vs Sam",
    "start": "572040",
    "end": "574880"
  },
  {
    "text": "to msk is identifier the description",
    "start": "574880",
    "end": "577959"
  },
  {
    "text": "section refers to metadata referring to",
    "start": "577959",
    "end": "580120"
  },
  {
    "text": "the Cobalt copybook location the Sam",
    "start": "580120",
    "end": "582800"
  },
  {
    "text": "perk is the name of source object",
    "start": "582800",
    "end": "584399"
  },
  {
    "text": "identifier set by publisher Source data",
    "start": "584399",
    "end": "587360"
  },
  {
    "text": "store points to Mainframe IP address and",
    "start": "587360",
    "end": "589480"
  },
  {
    "text": "port for demon on Mainframe vssm to msk",
    "start": "589480",
    "end": "592720"
  },
  {
    "text": "is the publisher name vam CDC is data",
    "start": "592720",
    "end": "595800"
  },
  {
    "text": "source",
    "start": "595800",
    "end": "597480"
  },
  {
    "text": "type Target data store points to topic",
    "start": "597480",
    "end": "600200"
  },
  {
    "text": "name of the msk messages will be",
    "start": "600200",
    "end": "602720"
  },
  {
    "text": "distributed to kofka partitions using",
    "start": "602720",
    "end": "604640"
  },
  {
    "text": "key Json is the record format both",
    "start": "604640",
    "end": "607800"
  },
  {
    "text": "source and Target data source use cardor",
    "start": "607800",
    "end": "610279"
  },
  {
    "text": "payment SRC to describe the message",
    "start": "610279",
    "end": "613200"
  },
  {
    "text": "metadata the script used the replicate",
    "start": "613200",
    "end": "615519"
  },
  {
    "text": "function to convert raw ebcc log to Json",
    "start": "615519",
    "end": "618120"
  },
  {
    "text": "format with key fields from",
    "start": "618120",
    "end": "621480"
  },
  {
    "text": "copybook next we are going to set up the",
    "start": "622120",
    "end": "624519"
  },
  {
    "text": "msk S3 delivery via fire hose and",
    "start": "624519",
    "end": "627040"
  },
  {
    "text": "integration with SNS via event Bridge",
    "start": "627040",
    "end": "629040"
  },
  {
    "text": "pipe",
    "start": "629040",
    "end": "630040"
  },
  {
    "text": "MSG provides no code integration with",
    "start": "630040",
    "end": "632399"
  },
  {
    "text": "various AWS services on the MSG S3",
    "start": "632399",
    "end": "635920"
  },
  {
    "text": "delivery tab click create fire hose",
    "start": "635920",
    "end": "638959"
  },
  {
    "text": "stream some of the details are",
    "start": "638959",
    "end": "641040"
  },
  {
    "text": "pre-populated such as Source destination",
    "start": "641040",
    "end": "643800"
  },
  {
    "text": "msk",
    "start": "643800",
    "end": "645320"
  },
  {
    "text": "cluster paste the topic",
    "start": "645320",
    "end": "647920"
  },
  {
    "text": "name enter a name for the",
    "start": "647920",
    "end": "651839"
  },
  {
    "text": "stream select the S3 bucket created by",
    "start": "651839",
    "end": "654680"
  },
  {
    "text": "cloud formation template",
    "start": "654680",
    "end": "658480"
  },
  {
    "text": "add",
    "start": "659399",
    "end": "660800"
  },
  {
    "text": "prefixes click create fire host stream",
    "start": "660800",
    "end": "663240"
  },
  {
    "text": "to",
    "start": "663240",
    "end": "664320"
  },
  {
    "text": "create once the creation is complete you",
    "start": "664320",
    "end": "666839"
  },
  {
    "text": "will see the status is",
    "start": "666839",
    "end": "669560"
  },
  {
    "text": "active next click integration Tab and",
    "start": "669560",
    "end": "672240"
  },
  {
    "text": "then click connect Amazon msk cluster to",
    "start": "672240",
    "end": "674519"
  },
  {
    "text": "pipe enter a pipe",
    "start": "674519",
    "end": "677760"
  },
  {
    "text": "name paste the topic name in the",
    "start": "677760",
    "end": "680079"
  },
  {
    "text": "consumer group created",
    "start": "680079",
    "end": "683079"
  },
  {
    "text": "earlier for demonstration we are not",
    "start": "683079",
    "end": "685519"
  },
  {
    "text": "adding any filtering or enrichment",
    "start": "685519",
    "end": "689880"
  },
  {
    "text": "on the target page click in Target",
    "start": "689920",
    "end": "691839"
  },
  {
    "text": "service dropdown you can see the",
    "start": "691839",
    "end": "694000"
  },
  {
    "text": "different Services you can integrate",
    "start": "694000",
    "end": "695680"
  },
  {
    "text": "with select SNS then the topic expand",
    "start": "695680",
    "end": "699279"
  },
  {
    "text": "Target input Transformer on the sample",
    "start": "699279",
    "end": "701839"
  },
  {
    "text": "event select msk click on the value to",
    "start": "701839",
    "end": "704600"
  },
  {
    "text": "select the field for output click create",
    "start": "704600",
    "end": "707000"
  },
  {
    "text": "pipe to create the event Bridge pipe",
    "start": "707000",
    "end": "709200"
  },
  {
    "text": "once successfully created the status",
    "start": "709200",
    "end": "711200"
  },
  {
    "text": "will show is running now let's start the",
    "start": "711200",
    "end": "714000"
  },
  {
    "text": "apply engine and insert some record in",
    "start": "714000",
    "end": "715839"
  },
  {
    "text": "the vsam database on the ec2 command",
    "start": "715839",
    "end": "719000"
  },
  {
    "text": "prompt start the apply engine using the",
    "start": "719000",
    "end": "721240"
  },
  {
    "text": "sqdg command the process displays",
    "start": "721240",
    "end": "724360"
  },
  {
    "text": "valuable information about the data",
    "start": "724360",
    "end": "725959"
  },
  {
    "text": "sources and message layouts it's",
    "start": "725959",
    "end": "728320"
  },
  {
    "text": "connected to publisher engine on",
    "start": "728320",
    "end": "729760"
  },
  {
    "text": "Mainframe and waiting for data",
    "start": "729760",
    "end": "732639"
  },
  {
    "text": "now switch to Mainframe this PS file",
    "start": "732639",
    "end": "736240"
  },
  {
    "text": "contains records that will be inserted",
    "start": "736240",
    "end": "737959"
  },
  {
    "text": "to the vsam database the records map to",
    "start": "737959",
    "end": "740839"
  },
  {
    "text": "the layout of the copy book we saw",
    "start": "740839",
    "end": "742399"
  },
  {
    "text": "earlier in this demonstration we will",
    "start": "742399",
    "end": "744839"
  },
  {
    "text": "use the precisely batched differ",
    "start": "744839",
    "end": "746480"
  },
  {
    "text": "functionality to replicate data online",
    "start": "746480",
    "end": "749320"
  },
  {
    "text": "Sam or db2 IMS follow the same capture",
    "start": "749320",
    "end": "752079"
  },
  {
    "text": "publisher architecture with some",
    "start": "752079",
    "end": "753800"
  },
  {
    "text": "differences in setup and",
    "start": "753800",
    "end": "755600"
  },
  {
    "text": "configurations we are going to use the",
    "start": "755600",
    "end": "757519"
  },
  {
    "text": "job to copy the PS file to the current V",
    "start": "757519",
    "end": "759720"
  },
  {
    "text": "Sam and then run the sqd DFC DC utility",
    "start": "759720",
    "end": "763079"
  },
  {
    "text": "the utility compares the base and",
    "start": "763079",
    "end": "764680"
  },
  {
    "text": "current files and updates the change",
    "start": "764680",
    "end": "766320"
  },
  {
    "text": "records in the log stream submit the",
    "start": "766320",
    "end": "770240"
  },
  {
    "text": "job switching to the ispf panel we see",
    "start": "770240",
    "end": "773320"
  },
  {
    "text": "the engine is connected now the capture",
    "start": "773320",
    "end": "775639"
  },
  {
    "text": "and publish record counts have gone up",
    "start": "775639",
    "end": "779519"
  },
  {
    "text": "ec2 command prompt also shows records",
    "start": "779519",
    "end": "782079"
  },
  {
    "text": "ingested let's switch to another",
    "start": "782079",
    "end": "784079"
  },
  {
    "text": "terminal and let's run the select query",
    "start": "784079",
    "end": "786000"
  },
  {
    "text": "on RDS posters again we see the records",
    "start": "786000",
    "end": "788880"
  },
  {
    "text": "in the",
    "start": "788880",
    "end": "790040"
  },
  {
    "text": "table the metrics on Lambda console",
    "start": "790040",
    "end": "792560"
  },
  {
    "text": "shows the invocations it picked up the",
    "start": "792560",
    "end": "795000"
  },
  {
    "text": "messages from msk and inserted them to",
    "start": "795000",
    "end": "797959"
  },
  {
    "text": "RDS let's look at the other data",
    "start": "797959",
    "end": "800160"
  },
  {
    "text": "pipelines created from msk on S3 console",
    "start": "800160",
    "end": "803920"
  },
  {
    "text": "let's navigate to data folder and then",
    "start": "803920",
    "end": "805880"
  },
  {
    "text": "to the subfolders select one object and",
    "start": "805880",
    "end": "808600"
  },
  {
    "text": "click query with S3 select on the page",
    "start": "808600",
    "end": "811519"
  },
  {
    "text": "select Json as input and output format",
    "start": "811519",
    "end": "814360"
  },
  {
    "text": "then run SQL query we see the Json",
    "start": "814360",
    "end": "817240"
  },
  {
    "text": "message that was published to MSG by",
    "start": "817240",
    "end": "819199"
  },
  {
    "text": "precisely apply agent the change",
    "start": "819199",
    "end": "821760"
  },
  {
    "text": "operation is an insert in this case you",
    "start": "821760",
    "end": "824199"
  },
  {
    "text": "will denote an update and D delete",
    "start": "824199",
    "end": "826040"
  },
  {
    "text": "operation after image contains the new",
    "start": "826040",
    "end": "828519"
  },
  {
    "text": "values of the key Fields corresponding",
    "start": "828519",
    "end": "830320"
  },
  {
    "text": "to copybook fields and their respective",
    "start": "830320",
    "end": "832199"
  },
  {
    "text": "values an update database operation will",
    "start": "832199",
    "end": "834920"
  },
  {
    "text": "have both before and after image the",
    "start": "834920",
    "end": "837240"
  },
  {
    "text": "object stored in S3 will be aggreg ated",
    "start": "837240",
    "end": "839360"
  },
  {
    "text": "and used offline to train and update the",
    "start": "839360",
    "end": "841360"
  },
  {
    "text": "AIML",
    "start": "841360",
    "end": "843639"
  },
  {
    "text": "models the even Bridge pipe also",
    "start": "843639",
    "end": "846000"
  },
  {
    "text": "consumed the messages and sent email",
    "start": "846000",
    "end": "848000"
  },
  {
    "text": "notification with the Json messages body",
    "start": "848000",
    "end": "850680"
  },
  {
    "text": "here's a sample",
    "start": "850680",
    "end": "852040"
  },
  {
    "text": "email now let's experiment how we can",
    "start": "852040",
    "end": "854639"
  },
  {
    "text": "use generative SQL from Red shift to",
    "start": "854639",
    "end": "856680"
  },
  {
    "text": "query using natural language on the red",
    "start": "856680",
    "end": "859519"
  },
  {
    "text": "shift console page click on query data",
    "start": "859519",
    "end": "862639"
  },
  {
    "text": "click on plus sign and select notebook",
    "start": "862639",
    "end": "865320"
  },
  {
    "text": "select the cluster run SQL to create",
    "start": "865320",
    "end": "868079"
  },
  {
    "text": "schema directly from the msk topic and",
    "start": "868079",
    "end": "871399"
  },
  {
    "text": "then a materialized view with the data",
    "start": "871399",
    "end": "873160"
  },
  {
    "text": "from the",
    "start": "873160",
    "end": "875120"
  },
  {
    "text": "topic then click on generative SQL a",
    "start": "875120",
    "end": "878480"
  },
  {
    "text": "chatbot window is opened on right hand",
    "start": "878480",
    "end": "880519"
  },
  {
    "text": "side type in plain language for example",
    "start": "880519",
    "end": "883120"
  },
  {
    "text": "show top five states by purchase Amazon",
    "start": "883120",
    "end": "885920"
  },
  {
    "text": "qbed by large language model or llm",
    "start": "885920",
    "end": "888600"
  },
  {
    "text": "generates the SQL query to be executed",
    "start": "888600",
    "end": "891519"
  },
  {
    "text": "click add to notebook and then click run",
    "start": "891519",
    "end": "893880"
  },
  {
    "text": "we see the SQL",
    "start": "893880",
    "end": "896480"
  },
  {
    "text": "results let's try something little",
    "start": "896480",
    "end": "898600"
  },
  {
    "text": "complex",
    "start": "898600",
    "end": "899680"
  },
  {
    "text": "let's ask show top five Merchants with",
    "start": "899680",
    "end": "901639"
  },
  {
    "text": "highest single purchase ask to include",
    "start": "901639",
    "end": "904040"
  },
  {
    "text": "state of purchase and output also ask to",
    "start": "904040",
    "end": "906800"
  },
  {
    "text": "show the purchase amount in currency",
    "start": "906800",
    "end": "908480"
  },
  {
    "text": "format using generative AI red shift is",
    "start": "908480",
    "end": "911680"
  },
  {
    "text": "able to understand the request written",
    "start": "911680",
    "end": "913320"
  },
  {
    "text": "in natural language search the database",
    "start": "913320",
    "end": "915480"
  },
  {
    "text": "and generate the SQL you can do lot more",
    "start": "915480",
    "end": "918320"
  },
  {
    "text": "ask complex business Insight on the data",
    "start": "918320",
    "end": "921000"
  },
  {
    "text": "here's the",
    "start": "921000",
    "end": "922600"
  },
  {
    "text": "result in case you are looking for the",
    "start": "922600",
    "end": "924759"
  },
  {
    "text": "code sample to build the fraud detection",
    "start": "924759",
    "end": "926680"
  },
  {
    "text": "section check the sample code in GitHub",
    "start": "926680",
    "end": "930920"
  },
  {
    "text": "thanks for watching",
    "start": "930920",
    "end": "934399"
  }
]