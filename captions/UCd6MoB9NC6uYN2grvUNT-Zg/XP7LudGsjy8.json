[
  {
    "text": "In this video, you’ll see how to build \nserverless applications with AWS",
    "start": "0",
    "end": "4508"
  },
  {
    "text": "Application Composer \nand Amazon CodeWhisperer.",
    "start": "4508",
    "end": "8069"
  },
  {
    "text": "With these tools, you can visually design\nserverless applications, rapidly generate",
    "start": "8581",
    "end": "13661"
  },
  {
    "text": "ready-to-deploy infrastructure as code, \nand leverage AI to accelerate development.",
    "start": "13661",
    "end": "19215"
  },
  {
    "text": "We’ll begin in Application Composer, where we’ll \nvisualize and design our serverless application.",
    "start": "21000",
    "end": "26343"
  },
  {
    "text": "Let’s create a new project.",
    "start": "26633",
    "end": "28116"
  },
  {
    "text": "Let's select a folder for our new project.",
    "start": "30317",
    "end": "32382"
  },
  {
    "text": "We’ll select this CodeWhisperer-Demo\n folder, which is currently empty.",
    "start": "33695",
    "end": "37445"
  },
  {
    "text": "Now we can begin building the application.",
    "start": "45975",
    "end": "48079"
  },
  {
    "text": "Let’s drag the Amazon API Gateway resource \ncard to the Application Composer canvas.",
    "start": "48232",
    "end": "53621"
  },
  {
    "text": "Let’s bring up the Resource properties pane.",
    "start": "54288",
    "end": "56477"
  },
  {
    "text": "For this example, we’ll configure three \nroutes within our API Gateway API resource.",
    "start": "57195",
    "end": "62394"
  },
  {
    "text": "The first route will use the \nGET method to get an item.",
    "start": "63452",
    "end": "66307"
  },
  {
    "text": "The second route will use the PUT \nmethod to put an item in a DynamoDB",
    "start": "67928",
    "end": "71397"
  },
  {
    "text": "table, which we’ll create in a moment.",
    "start": "71397",
    "end": "73377"
  },
  {
    "text": "The third route will use the DELETE \nmethod to remove the item.",
    "start": "82590",
    "end": "85700"
  },
  {
    "text": "Let's save the changes.",
    "start": "95612",
    "end": "96964"
  },
  {
    "text": "Now let's add a Lambda \nfunction for each of these routes.",
    "start": "98261",
    "end": "101150"
  },
  {
    "text": "To do this, we’ll need to bring the Lambda \nFunction resource card onto the canvas.",
    "start": "101338",
    "end": "105840"
  },
  {
    "text": "We’ll call the first function “GetItem.”",
    "start": "108758",
    "end": "110719"
  },
  {
    "text": "Let’s specify the source path as well.",
    "start": "116076",
    "end": "118181"
  },
  {
    "text": "For this example, we’ll \nchoose Python as the runtime.",
    "start": "121866",
    "end": "124917"
  },
  {
    "text": "Let’s save what we’ve done so far.",
    "start": "128397",
    "end": "130297"
  },
  {
    "text": "Now we’ll add two more functions.",
    "start": "131150",
    "end": "132788"
  },
  {
    "text": "We’ll call the second function “PutItem.”",
    "start": "142919",
    "end": "145165"
  },
  {
    "text": "Now we’ll create a third function called “DeleteItem.”",
    "start": "154173",
    "end": "156959"
  },
  {
    "text": "The next resource we’ll add is a \nDynamoDB table to host the data.",
    "start": "173833",
    "end": "177417"
  },
  {
    "text": "We’ll name the table and save the change.",
    "start": "178645",
    "end": "180690"
  },
  {
    "text": "Next, we’ll need to connect these resources.",
    "start": "185450",
    "end": "188328"
  },
  {
    "text": "Let’s connect the API Gateway GET \nroute to the Lambda function GetItem.",
    "start": "188601",
    "end": "193000"
  },
  {
    "text": "Then we’ll connect GetItem \nto the DynamoDB table.",
    "start": "195543",
    "end": "198484"
  },
  {
    "text": "We’ll repeat these steps to connect the PUT \nand DELETE routes to their corresponding",
    "start": "201000",
    "end": "204920"
  },
  {
    "text": "Lambda functions, and to connect \nthe functions to the DynamoDB table.",
    "start": "204920",
    "end": "209117"
  },
  {
    "text": "We can choose Arrange to \nalign the cards on the canvas.",
    "start": "217050",
    "end": "219981"
  },
  {
    "text": "Now that we've designed our serverless \napplication, let's look at the code that",
    "start": "220783",
    "end": "224418"
  },
  {
    "text": "Application Composer generated.",
    "start": "224418",
    "end": "226334"
  },
  {
    "text": "We can view the template in \nthe CodeWhisperer-Demo folder",
    "start": "228604",
    "end": "231437"
  },
  {
    "text": "that we selected earlier.",
    "start": "231437",
    "end": "232756"
  },
  {
    "text": "Application Composer has created the \nnecessary resources based on our selections,",
    "start": "233916",
    "end": "238263"
  },
  {
    "text": "including the paths, the rules, \nand the Lambda functions.",
    "start": "238263",
    "end": "242093"
  },
  {
    "text": "It also has created a source folder where we \ncan see the Lambda functions we created.",
    "start": "243817",
    "end": "248037"
  },
  {
    "text": "Let’s look at the GetItem function.",
    "start": "248924",
    "end": "250612"
  },
  {
    "text": "We can see that a Lambda \nhandler function was also created.",
    "start": "251004",
    "end": "253935"
  },
  {
    "text": "Let's open it.",
    "start": "254106",
    "end": "254891"
  },
  {
    "text": "Let's remove the existing code and use \nCodeWhisperer to create the logic for the function.",
    "start": "256495",
    "end": "261346"
  },
  {
    "text": "We'll write a comment to provide CodeWhisperer \nwith the components needed to generate the code.",
    "start": "262029",
    "end": "266753"
  },
  {
    "text": "CodeWhisperer is now generating \ncode based on the comment.",
    "start": "268971",
    "end": "272322"
  },
  {
    "text": "We’ll accept the code by pressing \nthe Tab key on our keyboard.",
    "start": "272612",
    "end": "276227"
  },
  {
    "text": "Now that we have created the logic for GetItem, \nlet’s repeat the process for the other two functions.",
    "start": "282727",
    "end": "288089"
  },
  {
    "text": "Now that we have created the necessary\nLambda function logic for our serverless",
    "start": "342312",
    "end": "346299"
  },
  {
    "text": "application, let's prepare it for deployment\n using the sam build command.",
    "start": "346299",
    "end": "350622"
  },
  {
    "text": "The build was successful.",
    "start": "352703",
    "end": "354084"
  },
  {
    "text": "Let's try to deploy the\napplication right from the console.",
    "start": "354493",
    "end": "357349"
  },
  {
    "text": "It can take a couple of minutes \nto deploy the application.",
    "start": "371206",
    "end": "374059"
  },
  {
    "text": "The application has deployed successfully.",
    "start": "375000",
    "end": "376975"
  },
  {
    "text": "Let's go to the API Gateway \nconsole and test the API.",
    "start": "377248",
    "end": "380844"
  },
  {
    "text": "Here is the API created from the sam-app stack.",
    "start": "382295",
    "end": "385237"
  },
  {
    "text": "Let's open it.",
    "start": "385390",
    "end": "386278"
  },
  {
    "text": "All three methods we created \nhave deployed successfully.",
    "start": "387796",
    "end": "390888"
  },
  {
    "text": "Let's test the PUT method.",
    "start": "391042",
    "end": "392663"
  },
  {
    "text": "We’ll provide a path value and a query \nstring for some of the item’s attributes.",
    "start": "395751",
    "end": "399716"
  },
  {
    "text": "Now we’ll make the test call.",
    "start": "402702",
    "end": "404244"
  },
  {
    "text": "We now see the status as 200, showing \nthat an item was added to the table.",
    "start": "411103",
    "end": "415807"
  },
  {
    "text": "Let's try to get the same item.",
    "start": "416644",
    "end": "418280"
  },
  {
    "text": "We were able to successfully retrieve the item.",
    "start": "431332",
    "end": "433876"
  },
  {
    "text": "Let's try to retrieve an item that \ndoesn’t exist, to see the response.",
    "start": "434353",
    "end": "438124"
  },
  {
    "text": "We got a 404 status because there’s no data.",
    "start": "443737",
    "end": "446514"
  },
  {
    "text": "Finally, let's test the DELETE method.",
    "start": "446889",
    "end": "448800"
  },
  {
    "text": "As expected, the item was deleted.",
    "start": "462000",
    "end": "464107"
  },
  {
    "text": "You’ve just seen how to build serverless\napplications with AWS Application",
    "start": "466991",
    "end": "470805"
  },
  {
    "text": "Composer and Amazon CodeWhisperer.",
    "start": "470805",
    "end": "473768"
  },
  {
    "text": "You can learn more about this topic in \nthe description and links for this video.",
    "start": "474263",
    "end": "477982"
  },
  {
    "text": "Thanks for watching. Now it’s your turn to try.",
    "start": "478767",
    "end": "481343"
  }
]