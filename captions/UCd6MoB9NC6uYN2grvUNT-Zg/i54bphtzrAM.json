[
  {
    "text": "welcome back to a deGrasse well architected solutions on which I'm",
    "start": "380",
    "end": "5640"
  },
  {
    "text": "Giulio part of the AWS Technical Evangelist team and we are here talking",
    "start": "5640",
    "end": "11160"
  },
  {
    "text": "about best practice solutions small little tricks and everything to help you",
    "start": "11160",
    "end": "18000"
  },
  {
    "text": "be successful with AWS services and tools so the whole point of this is talk",
    "start": "18000",
    "end": "24449"
  },
  {
    "text": "about the well architected framework and do or act a good framework covers this",
    "start": "24449",
    "end": "30630"
  },
  {
    "text": "five areas as we call pillars operational excellence security",
    "start": "30630",
    "end": "35760"
  },
  {
    "text": "reliability performance efficiency and cost optimization in each of our",
    "start": "35760",
    "end": "41250"
  },
  {
    "text": "episodes we're going to focus on one specific part of the same framework and",
    "start": "41250",
    "end": "46820"
  },
  {
    "text": "for that let's take a look at the framework white paper and where we are",
    "start": "46820",
    "end": "52350"
  },
  {
    "text": "in this quest so we're talking about the reliability pillar in the last episodes",
    "start": "52350",
    "end": "59670"
  },
  {
    "text": "and here in the end of the well-accepted framework white paper you can find some",
    "start": "59670",
    "end": "66630"
  },
  {
    "text": "very important resources the questions",
    "start": "66630",
    "end": "73260"
  },
  {
    "text": "the best practices and some sample answers and we've been working in rl3",
    "start": "73260",
    "end": "79170"
  },
  {
    "text": "this past episodes how does your system adapt to change in demand and although",
    "start": "79170",
    "end": "86130"
  },
  {
    "text": "this is a very simple question the answer may be very elaborate as we've",
    "start": "86130",
    "end": "91500"
  },
  {
    "text": "been saying and i'm gonna show you more resources about it today but most",
    "start": "91500",
    "end": "98119"
  },
  {
    "text": "crucially we've been doing these two things scaling the workload automatically",
    "start": "98119",
    "end": "103860"
  },
  {
    "text": "so for each type of workload we're saying how it can scale without you",
    "start": "103860",
    "end": "109799"
  },
  {
    "text": "having to provision and wake up at night and things like this and how to test it",
    "start": "109799",
    "end": "115740"
  },
  {
    "text": "what tools can we use to load test this app and make sure that it matches our",
    "start": "115740",
    "end": "121790"
  },
  {
    "text": "requirements and since the beginning of this series we've been talking about",
    "start": "121790",
    "end": "127710"
  },
  {
    "text": "doing everything as called and automating our operation",
    "start": "127710",
    "end": "133110"
  },
  {
    "text": "with scripts and templates and several forms of code to help you manage what",
    "start": "133110",
    "end": "139770"
  },
  {
    "text": "would be a great mess otherwise so let's see all the code is here on this repo so",
    "start": "139770",
    "end": "147060"
  },
  {
    "text": "if you're not been following along check out this firm enjoy sitting ducks is the",
    "start": "147060",
    "end": "153360"
  },
  {
    "text": "repo for our sample code today this is very very simple it's just a set of",
    "start": "153360",
    "end": "161660"
  },
  {
    "text": "Yambol templates for CloudFormation and shell scripts to execute them without",
    "start": "161660",
    "end": "168150"
  },
  {
    "text": "having to know much about AWS CLI and things like this and each of those build",
    "start": "168150",
    "end": "176730"
  },
  {
    "text": "upon each other so you can mix and match and play with the kind of component that",
    "start": "176730",
    "end": "183510"
  },
  {
    "text": "you feel that's more adequate to your architecture and let me show you the",
    "start": "183510",
    "end": "189090"
  },
  {
    "text": "basics here on my IDE I have this project already cloned and the artifacts",
    "start": "189090",
    "end": "200000"
  },
  {
    "text": "template here it's just a s3 bucket and this s3 bucket will host our called our",
    "start": "200000",
    "end": "209310"
  },
  {
    "text": "report and everything else we'd like to store is going to be here versions for",
    "start": "209310",
    "end": "215519"
  },
  {
    "text": "our app and it's just as generic bucket to create everything but most",
    "start": "215519",
    "end": "221670"
  },
  {
    "text": "importantly we see this parameter called gallery ID and this is just a naming",
    "start": "221670",
    "end": "228510"
  },
  {
    "text": "standard it could be name it anything in practice most people call this an",
    "start": "228510",
    "end": "235760"
  },
  {
    "text": "environment I'm not calling this an environment just not to clash with other things that are",
    "start": "235760",
    "end": "242760"
  },
  {
    "text": "named it environments so I created this gallery concept and I'm putting under it",
    "start": "242760",
    "end": "249209"
  },
  {
    "text": "any kind of alias so this is the way we can reference things from one template",
    "start": "249209",
    "end": "257400"
  },
  {
    "text": "to another within confirmation I'm exporting this under a name that will be",
    "start": "257400",
    "end": "264960"
  },
  {
    "text": "the gallery ID the environment I didn't I'm passing as parameter it could be any string like",
    "start": "264960",
    "end": "271379"
  },
  {
    "text": "Devon passed and the bucket name so I'm not I've created this many times in the",
    "start": "271379",
    "end": "279060"
  },
  {
    "text": "past episodes take a look at that if you'd like but when you when we create",
    "start": "279060",
    "end": "284789"
  },
  {
    "text": "one of those you're going to see here in the artifacts stack I have as a",
    "start": "284789",
    "end": "293099"
  },
  {
    "text": "parameter the name of my environment as I'm calling gallery here its dev m1 708",
    "start": "293099",
    "end": "301860"
  },
  {
    "text": "oh five and the resources that it created it created a bucket with this",
    "start": "301860",
    "end": "307800"
  },
  {
    "text": "name because it was declared in my confirmation template and in our outputs",
    "start": "307800",
    "end": "313800"
  },
  {
    "text": "I have this key output with this value the exact name of the bucket I created",
    "start": "313800",
    "end": "319919"
  },
  {
    "text": "and the actual export name and this is",
    "start": "319919",
    "end": "325800"
  },
  {
    "text": "very important because using this name this export name any other template in",
    "start": "325800",
    "end": "332550"
  },
  {
    "text": "my account can import this reference and although this is just a simple s3 bucket",
    "start": "332550",
    "end": "340169"
  },
  {
    "text": "we are doing the same thing for VP C's for any other resource that we'd like to",
    "start": "340169",
    "end": "345629"
  },
  {
    "text": "share so take a look here at the base a JDBC we have private tables subnets the",
    "start": "345629",
    "end": "354270"
  },
  {
    "text": "ID of my virtual private cloud and everything I want to expose to other",
    "start": "354270",
    "end": "359939"
  },
  {
    "text": "stacks you see that they are in the same environment and I just followed this",
    "start": "359939",
    "end": "366539"
  },
  {
    "text": "naming standard here to make it easy to find in other stacks and again this is",
    "start": "366539",
    "end": "374580"
  },
  {
    "text": "not something specific to confirmation this is just my naming standard I'm",
    "start": "374580",
    "end": "380069"
  },
  {
    "text": "calling things name of the environment common VP single ID and this is how I",
    "start": "380069",
    "end": "387139"
  },
  {
    "text": "call things and if you want to call them differently it's okay I just highly",
    "start": "387139",
    "end": "394469"
  },
  {
    "text": "recommend you have a sound naming standard makes things so much easier",
    "start": "394469",
    "end": "400320"
  },
  {
    "text": "and in the first episode we watched how to create instances within this",
    "start": "400320",
    "end": "408350"
  },
  {
    "text": "confirmation template we didn't using Beanstalk and if you'd like to check",
    "start": "408350",
    "end": "415050"
  },
  {
    "text": "that out we have the Beanstalk templates here so in the Beanstalk templates in",
    "start": "415050",
    "end": "422340"
  },
  {
    "text": "the flask template you're going to find the yellow resources for the whole app",
    "start": "422340",
    "end": "428940"
  },
  {
    "text": "and how to deploy this in elastic Beanstalk using amazon linux using your",
    "start": "428940",
    "end": "437130"
  },
  {
    "text": "preferred instance type and so on and so forth just remember to deploy the app and the",
    "start": "437130",
    "end": "444600"
  },
  {
    "text": "environment so this is what create the environments for you and here you can",
    "start": "444600",
    "end": "452070"
  },
  {
    "text": "see we have an import value it's the other side of the outputs export so this",
    "start": "452070",
    "end": "460590"
  },
  {
    "text": "import and export of values and confirmation is called cross stack references take a look it's a very",
    "start": "460590",
    "end": "467970"
  },
  {
    "text": "important resource and one that lets you divide your confirmation code like this",
    "start": "467970",
    "end": "474120"
  },
  {
    "text": "and we've done it for instances we done",
    "start": "474120",
    "end": "480180"
  },
  {
    "text": "it for server less functions and we done it for containers so if you don't care",
    "start": "480180",
    "end": "487500"
  },
  {
    "text": "about the ec2 instances and you just need to run containers you can do this",
    "start": "487500",
    "end": "493770"
  },
  {
    "text": "very easily with ECS and you can use either easy as with ec2 or is yes with",
    "start": "493770",
    "end": "500520"
  },
  {
    "text": "Fargate I highly recommend you taking a look at forget if you can because in forget you can only say the CPU and",
    "start": "500520",
    "end": "508800"
  },
  {
    "text": "memory that you like your container to execute and you don't need to manage an",
    "start": "508800",
    "end": "513860"
  },
  {
    "text": "underlying fleet of ec2 instances so that helps quite much and you can see",
    "start": "513860",
    "end": "521099"
  },
  {
    "text": "the same idea here of importing the values from the subnet and other",
    "start": "521099",
    "end": "527100"
  },
  {
    "text": "references that were exported from from the other stacks okay",
    "start": "527100",
    "end": "533370"
  },
  {
    "text": "and those are behind the load balancer and so on and so forth but we can do better and in this episode",
    "start": "533370",
    "end": "543680"
  },
  {
    "text": "we're going to talk about databases mostly and to access databases and to",
    "start": "543680",
    "end": "552420"
  },
  {
    "text": "execute our code we don't even need containers we can go totally serverless",
    "start": "552420",
    "end": "557940"
  },
  {
    "text": "and that's the goal of the serverless PMO template so we're going to go back",
    "start": "557940",
    "end": "566100"
  },
  {
    "text": "and improve the server les templates a little bit and add databases behind it",
    "start": "566100",
    "end": "573060"
  },
  {
    "text": "so we can shoot against our API wise and see how they behave when there is a",
    "start": "573060",
    "end": "579150"
  },
  {
    "text": "back-end database because up to now all we did was very simple compute we did",
    "start": "579150",
    "end": "586560"
  },
  {
    "text": "the Fibonacci sequence for a compute algorithm but that's not too realistic",
    "start": "586560",
    "end": "593370"
  },
  {
    "text": "so we're going to add a database and move one step closer to more realistic",
    "start": "593370",
    "end": "601230"
  },
  {
    "text": "app and again we are going very step by step in this series if you if you don't",
    "start": "601230",
    "end": "608840"
  },
  {
    "text": "understand please take a look the previous episodes and we've done all",
    "start": "608840",
    "end": "615120"
  },
  {
    "text": "those templates step by step and we're going to keep going like this",
    "start": "615120",
    "end": "620190"
  },
  {
    "text": "so that it is beginner friendly and everybody has a chance to grasp what's",
    "start": "620190",
    "end": "625620"
  },
  {
    "text": "going on but we're not staying shallow and each episode we add few inches",
    "start": "625620",
    "end": "633680"
  },
  {
    "text": "deeper in our tithe towards well architected apps so let's try the",
    "start": "633680",
    "end": "641700"
  },
  {
    "text": "database here first we have to choose between relational databases and no",
    "start": "641700",
    "end": "647670"
  },
  {
    "text": "relational databases so what kind of database you guys want to sing it's a",
    "start": "647670",
    "end": "653820"
  },
  {
    "text": "bit hard at this point because we don't have many requirements yet so I've just",
    "start": "653820",
    "end": "659730"
  },
  {
    "text": "decided to create one of each and let's see how it goes so let's start with",
    "start": "659730",
    "end": "664950"
  },
  {
    "text": "relay all databases on Amazon RDS our relational database system so to define",
    "start": "664950",
    "end": "672550"
  },
  {
    "text": "an RDS database I again using confirmation we have to define a few",
    "start": "672550",
    "end": "679630"
  },
  {
    "text": "things and if the goal our end game here is to reach an AWS RDS instance but as",
    "start": "679630",
    "end": "688900"
  },
  {
    "text": "no RDS instances and their configuration depends a bit on the engine and on RDS",
    "start": "688900",
    "end": "697510"
  },
  {
    "text": "you can run my sequel Oracle Postgres Maria the wave cycle server or Amazon's",
    "start": "697510",
    "end": "705100"
  },
  {
    "text": "engine Aurora and I highly recommend to take a careful look at Aurora because it",
    "start": "705100",
    "end": "711820"
  },
  {
    "text": "solves a lot of the scalability problems of my sequel so of what I mean is in",
    "start": "711820",
    "end": "718900"
  },
  {
    "text": "standard my sequel it is much harder to take care of synchronization replication",
    "start": "718900",
    "end": "726790"
  },
  {
    "text": "of data backups for example if you set up more easy you would have two",
    "start": "726790",
    "end": "733360"
  },
  {
    "text": "instances of an aura replication with of",
    "start": "733360",
    "end": "738760"
  },
  {
    "text": "my sequel or application with Aurora automatically you got three replicas per",
    "start": "738760",
    "end": "744580"
  },
  {
    "text": "region so it's to prayer is six per region trooper AZ minimum three so it would be",
    "start": "744580",
    "end": "751720"
  },
  {
    "text": "six per region and it's unbelievably fast so highly take a look at it highly",
    "start": "751720",
    "end": "759250"
  },
  {
    "text": "recommend you take a look at it I make up the map a bit wrong there sorry if I",
    "start": "759250",
    "end": "765040"
  },
  {
    "text": "did but the whole idea is we are using Aurora for this for this tests and at",
    "start": "765040",
    "end": "773520"
  },
  {
    "text": "minimum we need a cluster within the instance class and a subnet group so",
    "start": "773520",
    "end": "779050"
  },
  {
    "text": "let's take a look at those resources first the as a parameter the gallery ID",
    "start": "779050",
    "end": "785860"
  },
  {
    "text": "same concept just a name of an environment the instance class that we",
    "start": "785860",
    "end": "792130"
  },
  {
    "text": "would like I'm using our three largest by the full here but we can set this to",
    "start": "792130",
    "end": "797230"
  },
  {
    "text": "any instance class we want our security group just so we can connect from",
    "start": "797230",
    "end": "803720"
  },
  {
    "text": "anywhere I'm opening even you guys at home can connect to this instance that",
    "start": "803720",
    "end": "809420"
  },
  {
    "text": "we are using today not many surprises here the subnet group",
    "start": "809420",
    "end": "817370"
  },
  {
    "text": "is going to tell RDS in which subnets do I want to spin my database so I'm taking",
    "start": "817370",
    "end": "825200"
  },
  {
    "text": "two subnets from the from the base a",
    "start": "825200",
    "end": "830570"
  },
  {
    "text": "JDBC template and for Alaura we need cluster wide settings so our",
    "start": "830570",
    "end": "837400"
  },
  {
    "text": "username and password again you can pass this reference as references or use a SS",
    "start": "837400",
    "end": "844400"
  },
  {
    "text": "secrets manager or parameter store we're going to see some much better ways of",
    "start": "844400",
    "end": "849920"
  },
  {
    "text": "handling passwords don't do this at home but today's about capability not",
    "start": "849920",
    "end": "855380"
  },
  {
    "text": "security so we can forgive there's a little bit at least until we go back to",
    "start": "855380",
    "end": "861680"
  },
  {
    "text": "a parameter store and many better ways to use passwords and the B subnet group",
    "start": "861680",
    "end": "868820"
  },
  {
    "text": "name is going to be a reference to this the B's subnet group so that was created",
    "start": "868820",
    "end": "878600"
  },
  {
    "text": "just before and this is pretty much all we need to create this database instance",
    "start": "878600",
    "end": "885230"
  },
  {
    "text": "and to access it on our server less",
    "start": "885230",
    "end": "891100"
  },
  {
    "text": "application we have this several s function define it here it's called but",
    "start": "891100",
    "end": "899720"
  },
  {
    "text": "random on relational database function so this is the function I created to",
    "start": "899720",
    "end": "907190"
  },
  {
    "text": "insert a random number into a relational database table so it's two pretty simple",
    "start": "907190",
    "end": "913460"
  },
  {
    "text": "not many records and drawings and something to fancy let's take a look at",
    "start": "913460",
    "end": "920270"
  },
  {
    "text": "this but random our DB function so here it is at My sirs",
    "start": "920270",
    "end": "927830"
  },
  {
    "text": "target here's my my app the lamb does dot pi and this is the",
    "start": "927830",
    "end": "937399"
  },
  {
    "text": "function right it's very simple can fit on the screen here so I'm going to",
    "start": "937399",
    "end": "947810"
  },
  {
    "text": "define this API gameplay object this is just what I use to send responses and",
    "start": "947810",
    "end": "954620"
  },
  {
    "text": "this is just writing my response to the",
    "start": "954620",
    "end": "960199"
  },
  {
    "text": "response object if we take a look at the API gateway API here this is something",
    "start": "960199",
    "end": "967459"
  },
  {
    "text": "like we did in a previous episode I'm just creating this interface that I can",
    "start": "967459",
    "end": "973399"
  },
  {
    "text": "send data to either API gateway or flask depending if I'm running this code",
    "start": "973399",
    "end": "980750"
  },
  {
    "text": "behind API gateway or behind flask because I can run the same code either",
    "start": "980750",
    "end": "985970"
  },
  {
    "text": "way so there's very simply that let me",
    "start": "985970",
    "end": "993410"
  },
  {
    "text": "get back to the to the file remember and",
    "start": "993410",
    "end": "998860"
  },
  {
    "text": "create a random integer please don't judge my Python get the environment",
    "start": "998860",
    "end": "1005880"
  },
  {
    "text": "variable for the DB host and this is interesting here because if you think",
    "start": "1005880",
    "end": "1013149"
  },
  {
    "text": "about how it works in confirmation the function is created by one stack and",
    "start": "1013149",
    "end": "1019019"
  },
  {
    "text": "database is created by this other stack but no problem as we saw I'm getting the",
    "start": "1019019",
    "end": "1029668"
  },
  {
    "text": "endpoint address Etra butte of the DB primary instance",
    "start": "1029669",
    "end": "1034928"
  },
  {
    "text": "and exporting as my our DB endpoint address and on my surfer les mo template",
    "start": "1034929",
    "end": "1044288"
  },
  {
    "text": "i have this environment variable defined for our function it's going to import",
    "start": "1044289",
    "end": "1051809"
  },
  {
    "text": "exactly that reference so this is how i can create the database on one template",
    "start": "1051809",
    "end": "1059440"
  },
  {
    "text": "and import it on another and the same logic for our all the cross",
    "start": "1059440",
    "end": "1066320"
  },
  {
    "text": "stack references and this is here on so",
    "start": "1066320",
    "end": "1076490"
  },
  {
    "text": "I in our function I got the database address I hard-coded sorry the",
    "start": "1076490",
    "end": "1083110"
  },
  {
    "text": "credentials here but we could follow the same process for the credentials or even",
    "start": "1083110",
    "end": "1089090"
  },
  {
    "text": "do better with parameter stores and secret stores as we're going to see in",
    "start": "1089090",
    "end": "1094490"
  },
  {
    "text": "upcoming episodes and create a cursor from the connection create the database",
    "start": "1094490",
    "end": "1101870"
  },
  {
    "text": "if it does not exist create the table if does not exist again I know there are",
    "start": "1101870",
    "end": "1107929"
  },
  {
    "text": "some database frameworks that does this for you I'm going with the most vanilla sequel I",
    "start": "1107929",
    "end": "1114530"
  },
  {
    "text": "can think of and insert the value into the table and commit the transaction",
    "start": "1114530",
    "end": "1121520"
  },
  {
    "text": "close the cursors and that's done and this is what we have for our yes this is",
    "start": "1121520",
    "end": "1128150"
  },
  {
    "text": "what we have for a relational database access using Python and running behind",
    "start": "1128150",
    "end": "1136660"
  },
  {
    "text": "this resource name and I'm just exposing it as a gap I know I could use it the",
    "start": "1136660",
    "end": "1143720"
  },
  {
    "text": "put here I'm just putting it behind the gap and making things a bit simpler to test but do as you please with your",
    "start": "1143720",
    "end": "1151820"
  },
  {
    "text": "api's and I hope that's pretty clear by",
    "start": "1151820",
    "end": "1156890"
  },
  {
    "text": "now and if if you have any questions or anything you'd like to say please feel",
    "start": "1156890",
    "end": "1164090"
  },
  {
    "text": "free to comment on the twitch chat and I would be happy to address that yes I'm",
    "start": "1164090",
    "end": "1170960"
  },
  {
    "text": "pretty aware this is not ideal in security terms we're going to harden it",
    "start": "1170960",
    "end": "1176300"
  },
  {
    "text": "a lot in security episodes let's take a look at how the scale and most",
    "start": "1176300",
    "end": "1183110"
  },
  {
    "text": "importantly let's see how it does not scale when it's the case and well this",
    "start": "1183110",
    "end": "1189350"
  },
  {
    "text": "is how we set up our relational database let's see how the no relational database",
    "start": "1189350",
    "end": "1195680"
  },
  {
    "text": "of things yes because there is an issue here when we think about scalability",
    "start": "1195680",
    "end": "1202510"
  },
  {
    "text": "when this gets more and more load we're going to see that this property does",
    "start": "1202510",
    "end": "1211370"
  },
  {
    "text": "little bit what defines our capacity in our relational database here it's",
    "start": "1211370",
    "end": "1219100"
  },
  {
    "text": "essentially this database instance class we could do many things here we could",
    "start": "1219100",
    "end": "1227440"
  },
  {
    "text": "separate our reads and skeino always carried applicants for example",
    "start": "1227440",
    "end": "1233690"
  },
  {
    "text": "that's something that or a candle but when it comes to writes it gets a bit",
    "start": "1233690",
    "end": "1241810"
  },
  {
    "text": "more difficult we could use multi master architectures or improve the charting",
    "start": "1241810",
    "end": "1248570"
  },
  {
    "text": "and many other techniques here but it starts to get complicated so in many",
    "start": "1248570",
    "end": "1255890"
  },
  {
    "text": "cases what people do in these situations is using knows no relational database",
    "start": "1255890",
    "end": "1261620"
  },
  {
    "text": "and I'm not here to advocate that one is better or the other just showing you how",
    "start": "1261620",
    "end": "1268250"
  },
  {
    "text": "to do both things with cold and automatically with confirmation and how to test both things and help you achieve",
    "start": "1268250",
    "end": "1277390"
  },
  {
    "text": "whatever way you think it's best for you and most importantly test both ways so",
    "start": "1277390",
    "end": "1283670"
  },
  {
    "text": "you can find this out and on our dynamo DB template Here I am doing this a very",
    "start": "1283670",
    "end": "1293690"
  },
  {
    "text": "similar thing creating a database table to store random values but I can be a",
    "start": "1293690",
    "end": "1302240"
  },
  {
    "text": "bit more open with dynamo DB in terms of scalability I can reach further I'm not",
    "start": "1302240",
    "end": "1311090"
  },
  {
    "text": "seeing why that is because in our Dino DB table we have not fix it instance",
    "start": "1311090",
    "end": "1320060"
  },
  {
    "text": "class but read and write capacity units so this will tell dynamo DB how much",
    "start": "1320060",
    "end": "1327140"
  },
  {
    "text": "write first writes per second I'm able to do and how much reads per",
    "start": "1327140",
    "end": "1332960"
  },
  {
    "text": "second I mean I'm able to do and it would be fixed if it was just this but",
    "start": "1332960",
    "end": "1340430"
  },
  {
    "text": "we have a few other improvements here in this confirmation template here is just",
    "start": "1340430",
    "end": "1347270"
  },
  {
    "text": "the dynamodb VPC endpoint so we can access this vp's this Madame ODB table",
    "start": "1347270",
    "end": "1355880"
  },
  {
    "text": "from within our V PC if we want to and",
    "start": "1355880",
    "end": "1360970"
  },
  {
    "text": "now this caning part is pretty important because this is scaling we use",
    "start": "1360970",
    "end": "1369460"
  },
  {
    "text": "application or rescaling in our last episode we showed how to use application",
    "start": "1369460",
    "end": "1376520"
  },
  {
    "text": "how to scaling for containers and now we're using the same idea for databases",
    "start": "1376520",
    "end": "1383090"
  },
  {
    "text": "so for DynamoDB let's take a look at our grand table right skimming policy and",
    "start": "1383090",
    "end": "1390530"
  },
  {
    "text": "this is the policy that tells in the blue ass how much provision and capacity",
    "start": "1390530",
    "end": "1396680"
  },
  {
    "text": "for this table should be adjusted I'm going to create a policy that will track",
    "start": "1396680",
    "end": "1404470"
  },
  {
    "text": "target tracking so target tracking means that I'm not going to create the alarms",
    "start": "1404470",
    "end": "1411710"
  },
  {
    "text": "and tell in the West explicitly how to scale up and now but I'll tell a the",
    "start": "1411710",
    "end": "1418700"
  },
  {
    "text": "blue ass to move towards this target to follow this target of 70% so if my",
    "start": "1418700",
    "end": "1428590"
  },
  {
    "text": "utilization of write capacity is getting close to 70%",
    "start": "1428590",
    "end": "1434650"
  },
  {
    "text": "dynamodb is going to scale up automatically for me and it will wait",
    "start": "1434650",
    "end": "1439760"
  },
  {
    "text": "for a while before scaling back and forth so here's the school town is a bit",
    "start": "1439760",
    "end": "1446270"
  },
  {
    "text": "too long for our tests I will move this to 30 is probably a bit better and 4 we",
    "start": "1446270",
    "end": "1455030"
  },
  {
    "text": "need to actually test this it's the same",
    "start": "1455030",
    "end": "1462020"
  },
  {
    "text": "thinking we did for the ECS and containers episode if this target value is too low if you set",
    "start": "1462020",
    "end": "1470390"
  },
  {
    "text": "it to 40 or 50 percent for example you will scale more aggressively you will go",
    "start": "1470390",
    "end": "1477610"
  },
  {
    "text": "you will keep a lower target and you may incur in more costs but you have more",
    "start": "1477610",
    "end": "1485960"
  },
  {
    "text": "room to work with if your spike of demand is too high if you set this",
    "start": "1485960",
    "end": "1493100"
  },
  {
    "text": "target value too high you may not scale until it's too late",
    "start": "1493100",
    "end": "1499040"
  },
  {
    "text": "you may end up only scaling when you're for example if 90% utilization but you",
    "start": "1499040",
    "end": "1506930"
  },
  {
    "text": "may be you will be more conservative in terms of costs so this is a trade-off",
    "start": "1506930",
    "end": "1512240"
  },
  {
    "text": "that requires a lot more testing that we are able to do in this session but it is",
    "start": "1512240",
    "end": "1519680"
  },
  {
    "text": "important to think of these values and this is for right capacity just for",
    "start": "1519680",
    "end": "1526280"
  },
  {
    "text": "rights we're only doing rights today but we could do the same thing for reads on",
    "start": "1526280",
    "end": "1532130"
  },
  {
    "text": "the read side of the story it's exactly the same thing but the dimension we're",
    "start": "1532130",
    "end": "1539330"
  },
  {
    "text": "going to monitor against is read capacity and the rent grid capacity",
    "start": "1539330",
    "end": "1546550"
  },
  {
    "text": "scaleable target and just set the same things but for reads and this way you",
    "start": "1546550",
    "end": "1552830"
  },
  {
    "text": "can tell DynamoDB to adjust its own provisioning when you have more reads or",
    "start": "1552830",
    "end": "1560290"
  },
  {
    "text": "more right and that's what makes target",
    "start": "1560290",
    "end": "1565850"
  },
  {
    "text": "scaling so much simpler than having to create alarm alarm and move everything",
    "start": "1565850",
    "end": "1572180"
  },
  {
    "text": "yourself and in the same way we did for relational databases we export our",
    "start": "1572180",
    "end": "1579430"
  },
  {
    "text": "random table name the time mode the actual dynamodb table here as a DDB rent",
    "start": "1579430",
    "end": "1587360"
  },
  {
    "text": "table and in our service MO in the",
    "start": "1587360",
    "end": "1593980"
  },
  {
    "text": "environment variables for our put random on DynamoDB function we",
    "start": "1593980",
    "end": "1602210"
  },
  {
    "text": "add the environment variable with the reference to exactly that table so when",
    "start": "1602210",
    "end": "1609590"
  },
  {
    "text": "we create this and I have created it beforehand so we don't have to wait for",
    "start": "1609590",
    "end": "1616100"
  },
  {
    "text": "everything to come up every time and say it was a little bit of time and I just",
    "start": "1616100",
    "end": "1623060"
  },
  {
    "text": "did this today I did it several times with you on stream check out the the",
    "start": "1623060",
    "end": "1628520"
  },
  {
    "text": "script just run the script and it would create exactly the same stacks and here",
    "start": "1628520",
    "end": "1636140"
  },
  {
    "text": "on the server list stack let's double check the the resources that were",
    "start": "1636140",
    "end": "1644750"
  },
  {
    "text": "created something happen here let me refresh the console I think I miss",
    "start": "1644750",
    "end": "1651820"
  },
  {
    "text": "authentication okay so for example on",
    "start": "1651820",
    "end": "1658010"
  },
  {
    "text": "our then movie babe function on the lambda console we get",
    "start": "1658010",
    "end": "1666470"
  },
  {
    "text": "these hard links on the on the console we can see it's got access to that moody",
    "start": "1666470",
    "end": "1674570"
  },
  {
    "text": "b2 called watch by the by the him the role that was created there and on the",
    "start": "1674570",
    "end": "1682120"
  },
  {
    "text": "configuration right here we see the random table name method - exactly the",
    "start": "1682120",
    "end": "1690470"
  },
  {
    "text": "correct variable value that was created by confirmation and on the code let's",
    "start": "1690470",
    "end": "1698000"
  },
  {
    "text": "take a look at the the time ODB version of the of the same cold here in the",
    "start": "1698000",
    "end": "1707180"
  },
  {
    "text": "lambdas got pine so the time hold EP version it's a bit shorter because all",
    "start": "1707180",
    "end": "1715580"
  },
  {
    "text": "it needs is the RAM the table name and it will get the table name create an",
    "start": "1715580",
    "end": "1723260"
  },
  {
    "text": "item with just just this integer and put item to this table so I don't need to",
    "start": "1723260",
    "end": "1730250"
  },
  {
    "text": "create the create a ball and so on and so forth but it's pretty much the same thing right",
    "start": "1730250",
    "end": "1736519"
  },
  {
    "text": "the just the operation is a bit different and DynamoDB you don't have a",
    "start": "1736519",
    "end": "1743239"
  },
  {
    "text": "query language as you have in sequel here in sequel you can just issue a",
    "start": "1743239",
    "end": "1749029"
  },
  {
    "text": "sequel statement and in that movie be the equivalent thing would be a put item",
    "start": "1749029",
    "end": "1755299"
  },
  {
    "text": "API call to insert this into dynamo and let's see how those things behave to do",
    "start": "1755299",
    "end": "1765379"
  },
  {
    "text": "that we've been using Gatling and Gatling is a load generator we have the",
    "start": "1765379",
    "end": "1773179"
  },
  {
    "text": "load testing define and inserts test a stock's load testing dB so this is our",
    "start": "1773179",
    "end": "1781820"
  },
  {
    "text": "test case it's still quite simple we did some we add the requests for each of our",
    "start": "1781820",
    "end": "1790210"
  },
  {
    "text": "endpoints I created one for the time ODB one for the relational database and for",
    "start": "1790210",
    "end": "1797989"
  },
  {
    "text": "each of those we're going to ramp up some users and I change it a bit the",
    "start": "1797989",
    "end": "1804200"
  },
  {
    "text": "logic here from the other episodes in the other episodes we did this static",
    "start": "1804200",
    "end": "1811099"
  },
  {
    "text": "ramp up of users now we're going to be a bit more fancy and ramp up users per",
    "start": "1811099",
    "end": "1817639"
  },
  {
    "text": "second so we're going to start with one user per second and go up to any amount",
    "start": "1817639",
    "end": "1825769"
  },
  {
    "text": "of users that we pass as a parameter to our test case and again this is a great",
    "start": "1825769",
    "end": "1832609"
  },
  {
    "text": "thing of having simulations as cold because we can interact with any kind of",
    "start": "1832609",
    "end": "1841399"
  },
  {
    "text": "parameter passing that we'd like or repeats or force or it's much easier to",
    "start": "1841399",
    "end": "1847399"
  },
  {
    "text": "handle things in code than having to go for clunky wise and these other test",
    "start": "1847399",
    "end": "1853129"
  },
  {
    "text": "generators and that's why we're using",
    "start": "1853129",
    "end": "1858580"
  },
  {
    "text": "gatling for this series but in future episodes we play",
    "start": "1858580",
    "end": "1864120"
  },
  {
    "text": "one time with jmeter we are going to add others and play with focused and",
    "start": "1864120",
    "end": "1869700"
  },
  {
    "text": "anything you guys may be interested in there is B's with machine guns there is",
    "start": "1869700",
    "end": "1875510"
  },
  {
    "text": "grinder there is many other load generators we can use here let me know",
    "start": "1875510",
    "end": "1880920"
  },
  {
    "text": "what you guys would like to test if you'd like to see message queues or",
    "start": "1880920",
    "end": "1885960"
  },
  {
    "text": "other types of databases caches elasticsearch it's our pleasure we're",
    "start": "1885960",
    "end": "1891660"
  },
  {
    "text": "bringing here everything you guys are interested well I'd love to hear your",
    "start": "1891660",
    "end": "1899280"
  },
  {
    "text": "opinions but for today we're shooting against relational database and",
    "start": "1899280",
    "end": "1905360"
  },
  {
    "text": "non-relational database and seeing what happens so to not do this from my own",
    "start": "1905360",
    "end": "1912660"
  },
  {
    "text": "remote machine I have a separate machine setup and we can do this from SSH",
    "start": "1912660",
    "end": "1920850"
  },
  {
    "text": "because here I have quiet more capable machine I'm going I have provisioned a",
    "start": "1920850",
    "end": "1928980"
  },
  {
    "text": "c5 instance and we can see with I like",
    "start": "1928980",
    "end": "1936360"
  },
  {
    "text": "this glances so not finding it on the history guidances is this monitor just",
    "start": "1936360",
    "end": "1944790"
  },
  {
    "text": "to make sure we don't run out of resources but we should be good with",
    "start": "1944790",
    "end": "1950040"
  },
  {
    "text": "this 72 cores 140 gigs of CPU this would",
    "start": "1950040",
    "end": "1955110"
  },
  {
    "text": "be letting us generate a lot of load and going through our application dear here",
    "start": "1955110",
    "end": "1966480"
  },
  {
    "text": "is how we pass parameters so I will copy the slide this Java opt I'm passing how",
    "start": "1966480",
    "end": "1975090"
  },
  {
    "text": "many users I want for is probably a bit too little let's do my fan and run ramp",
    "start": "1975090",
    "end": "1985260"
  },
  {
    "text": "up for 5 minutes and see what happened or 10 minutes and see what happens and",
    "start": "1985260",
    "end": "1993320"
  },
  {
    "text": "the run description is just TB and let's just double check the endpoint that we got",
    "start": "1993320",
    "end": "2000440"
  },
  {
    "text": "from confirmation here in the output of our service dB",
    "start": "2000440",
    "end": "2006500"
  },
  {
    "text": "so this is our URL UBC a and it's",
    "start": "2006500",
    "end": "2013300"
  },
  {
    "text": "exactly this so if you'd like you can shoot against the same API and this is",
    "start": "2013300",
    "end": "2021679"
  },
  {
    "text": "the best that we are going to run just now so set this variable on the remote",
    "start": "2021679",
    "end": "2028580"
  },
  {
    "text": "machine and run the test case just pass",
    "start": "2028580",
    "end": "2036230"
  },
  {
    "text": "the Gatlin test only pass the name of the test that you want and SBT the",
    "start": "2036230",
    "end": "2042320"
  },
  {
    "text": "scallop you - that's what Gatling is beautif on is going to run the code for",
    "start": "2042320",
    "end": "2047660"
  },
  {
    "text": "us not much more to worry there so tests",
    "start": "2047660",
    "end": "2053628"
  },
  {
    "text": "are running IC 200 okay is coming up so we just need to wait for this past",
    "start": "2053629",
    "end": "2060158"
  },
  {
    "text": "execution and not to make you guys wait for this 10 minutes that I set up here I",
    "start": "2060159",
    "end": "2068888"
  },
  {
    "text": "got some executions of that already and the weight I we reach it is just load",
    "start": "2068889",
    "end": "2079608"
  },
  {
    "text": "the gatlings directories so from I have",
    "start": "2079609",
    "end": "2088310"
  },
  {
    "text": "it here in the same in that machine it's running SSH tunnel so here's the output",
    "start": "2088310",
    "end": "2095960"
  },
  {
    "text": "directories for my load testing here's the the new one that it's running right",
    "start": "2095960",
    "end": "2101780"
  },
  {
    "text": "now here's the one I ran previously and if we take a look at it it's not as",
    "start": "2101780",
    "end": "2108710"
  },
  {
    "text": "exciting as you probably would expect because we don't have a lot of data and",
    "start": "2108710",
    "end": "2116510"
  },
  {
    "text": "load and this is again just our first scenario with databases but we can see",
    "start": "2116510",
    "end": "2123680"
  },
  {
    "text": "some very interesting details here the first one is that if you compare the",
    "start": "2123680",
    "end": "2130220"
  },
  {
    "text": "database random from dynamodb and from the relational database except for this",
    "start": "2130220",
    "end": "2137590"
  },
  {
    "text": "difference in network errors if we check the latencies it's not actually as",
    "start": "2137590",
    "end": "2144260"
  },
  {
    "text": "different as you would expect because well dynamodb is this super fast",
    "start": "2144260",
    "end": "2151850"
  },
  {
    "text": "database ultra-low latency and but our relational database is also very",
    "start": "2151850",
    "end": "2159700"
  },
  {
    "text": "over-provisioned we are running with our three large so we're probably not reaching the limits",
    "start": "2159700",
    "end": "2166400"
  },
  {
    "text": "of both at least in this first case we can scale up and the whole idea of load",
    "start": "2166400",
    "end": "2174500"
  },
  {
    "text": "testing is checking out how the application scales what are the",
    "start": "2174500",
    "end": "2180800"
  },
  {
    "text": "reception thresholds were the saturation limits and we are going to keep pushing",
    "start": "2180800",
    "end": "2186200"
  },
  {
    "text": "this resources until we reach that point so along the the simulation we started",
    "start": "2186200",
    "end": "2193220"
  },
  {
    "text": "with zero is users per sack and we are running up to 30 here in this case I",
    "start": "2193220",
    "end": "2201410"
  },
  {
    "text": "just added a bit more so we can see how the how our response percentiles",
    "start": "2201410",
    "end": "2210220"
  },
  {
    "text": "behave over time and when we have some side effects such as queuing of requests",
    "start": "2210220",
    "end": "2216859"
  },
  {
    "text": "we're going to certainly see this kind of spikes here so this is how we can",
    "start": "2216859",
    "end": "2223400"
  },
  {
    "text": "understand this question of how to our application behaves as the load",
    "start": "2223400",
    "end": "2230240"
  },
  {
    "text": "increases and well in our case for this",
    "start": "2230240",
    "end": "2237130"
  },
  {
    "text": "specific load we did pretty well it's very hard not to see any errors just",
    "start": "2237130",
    "end": "2243500"
  },
  {
    "text": "important to understand why they happened what are those 504's why this queued up",
    "start": "2243500",
    "end": "2249890"
  },
  {
    "text": "for so long it may be an issue for your app may be something simple and",
    "start": "2249890",
    "end": "2256990"
  },
  {
    "text": "client-side even so take a look it's very important to get to cold water",
    "start": "2256990",
    "end": "2264170"
  },
  {
    "text": "logs and see what's what's here if you don't know what I'm talking about we did",
    "start": "2264170",
    "end": "2269330"
  },
  {
    "text": "it several times in previous episodes I mean just go to monitoring and called",
    "start": "2269330",
    "end": "2276290"
  },
  {
    "text": "watch logs and you can see exactly what's going on in this dysfunction so",
    "start": "2276290",
    "end": "2283190"
  },
  {
    "text": "here I don't have any any data for for",
    "start": "2283190",
    "end": "2289310"
  },
  {
    "text": "this request you we probably should use a log analyzer or find a better tool",
    "start": "2289310",
    "end": "2296570"
  },
  {
    "text": "than just going through the further console and automated a little bit but",
    "start": "2296570",
    "end": "2301850"
  },
  {
    "text": "every log file and every request is here so here's how you can understand what's",
    "start": "2301850",
    "end": "2309770"
  },
  {
    "text": "going on how many invocations all the cult watch details everything is here not only the",
    "start": "2309770",
    "end": "2317060"
  },
  {
    "text": "not only the logs so let's that the how",
    "start": "2317060",
    "end": "2327950"
  },
  {
    "text": "we can find what's going on and the the case here is that the network latency",
    "start": "2327950",
    "end": "2335090"
  },
  {
    "text": "just getting to the server and invoking an API has got so much more work to do",
    "start": "2335090",
    "end": "2343010"
  },
  {
    "text": "them the database work that we are doing just inserting a simple integer that in",
    "start": "2343010",
    "end": "2349280"
  },
  {
    "text": "this specific case the database work is not it's dominated by the latency of",
    "start": "2349280",
    "end": "2357770"
  },
  {
    "text": "just getting the HTTP request fruit and we know that's not always the case and",
    "start": "2357770",
    "end": "2363380"
  },
  {
    "text": "this is the going the series trying to find out the the corner cases and the",
    "start": "2363380",
    "end": "2369230"
  },
  {
    "text": "situations in which we have a different scenario right let's see if there is",
    "start": "2369230",
    "end": "2376490"
  },
  {
    "text": "anything else I'd like to show you you guys let's see how ever our simulation",
    "start": "2376490",
    "end": "2384200"
  },
  {
    "text": "is still going on here please take this code give you a spin and see",
    "start": "2384200",
    "end": "2391750"
  },
  {
    "text": "if your numbers differ how far can you push this and I would be happy",
    "start": "2391750",
    "end": "2398480"
  },
  {
    "text": "to add more information and cases here what I'm doing today just showing you",
    "start": "2398480",
    "end": "2405829"
  },
  {
    "text": "guys this very important part of scaling with databases so in our dynamodb table",
    "start": "2405829",
    "end": "2416599"
  },
  {
    "text": "by now we can probably see what's going on so on that multi-beam let's go",
    "start": "2416599",
    "end": "2426170"
  },
  {
    "text": "directly to the dynamo DB console and see how that table is doing because we",
    "start": "2426170",
    "end": "2432470"
  },
  {
    "text": "can probably see the always scheming going on there by now dynamo DB on",
    "start": "2432470",
    "end": "2443289"
  },
  {
    "text": "tables this is the only table I have in this region and on metrics we can see",
    "start": "2443289",
    "end": "2452450"
  },
  {
    "text": "our write capacity has gone up right we are on 15 write capacities from our",
    "start": "2452450",
    "end": "2460700"
  },
  {
    "text": "story starting point of just 5 because it it grew according to to our capacity",
    "start": "2460700",
    "end": "2470359"
  },
  {
    "text": "requests and here if you see the capacity logic it's exactly as described",
    "start": "2470359",
    "end": "2476569"
  },
  {
    "text": "in our confirmation template so this is how you can set serverless back-end with",
    "start": "2476569",
    "end": "2487009"
  },
  {
    "text": "a server less database and that's pretty powerful because we don't need to care",
    "start": "2487009",
    "end": "2492920"
  },
  {
    "text": "about scaling the functions because the functions are going to scale automatically for you up to the",
    "start": "2492920",
    "end": "2500079"
  },
  {
    "text": "concurrency limit define it for the function what let me let me say that",
    "start": "2500079",
    "end": "2505670"
  },
  {
    "text": "again here on your each lambda function you can set the concurrency limit right",
    "start": "2505670",
    "end": "2514250"
  },
  {
    "text": "by default it's unreserved and it's up to a thousand executions so if you have",
    "start": "2514250",
    "end": "2521930"
  },
  {
    "text": "one user 10 users 100 users in parallel lambda will invoke this man",
    "start": "2521930",
    "end": "2529310"
  },
  {
    "text": "executions for you on dynamodb on the other hand if we have more and more",
    "start": "2529310",
    "end": "2535410"
  },
  {
    "text": "capacity when we heat reach about 70% it's going to scale up in capacity units",
    "start": "2535410",
    "end": "2542100"
  },
  {
    "text": "up to 100 units in my definite case so this is how we can make sure that no",
    "start": "2542100",
    "end": "2549630"
  },
  {
    "text": "matter how much pressure we put in this use this load tests our that multi-beam",
    "start": "2549630",
    "end": "2557160"
  },
  {
    "text": "table will keep up while I'm certain that at some point we didn't reach that",
    "start": "2557160",
    "end": "2562830"
  },
  {
    "text": "yet but at some point this database table that we added on RDS let's take a",
    "start": "2562830",
    "end": "2571650"
  },
  {
    "text": "look there as well the RDS console and see how this table is doing and here on",
    "start": "2571650",
    "end": "2581160"
  },
  {
    "text": "DB instances here's our or our instance and it's pretty easy and by now we don't",
    "start": "2581160",
    "end": "2589320"
  },
  {
    "text": "have many users yet the this is a are three large database so it should handle",
    "start": "2589320",
    "end": "2597240"
  },
  {
    "text": "a bit of load without too much trouble but at one point when it reaches 100",
    "start": "2597240",
    "end": "2604920"
  },
  {
    "text": "percent or 90 percent CPU utilization we're going to have a problem and again",
    "start": "2604920",
    "end": "2610310"
  },
  {
    "text": "let's take a look at how do we know it's going to be a problem well take the the",
    "start": "2610310",
    "end": "2619140"
  },
  {
    "text": "resource constraint here our DB instance class in the RDS instance template the",
    "start": "2619140",
    "end": "2628700"
  },
  {
    "text": "conformation definition for this type and in database instance class you can",
    "start": "2628700",
    "end": "2635460"
  },
  {
    "text": "see that if you change this instance class you will have some interruptions",
    "start": "2635460",
    "end": "2641370"
  },
  {
    "text": "on on your code while if you change the provisioning of a dynamo DB table it",
    "start": "2641370",
    "end": "2648570"
  },
  {
    "text": "doesn't have any impact on your running code so that's how you can scale without",
    "start": "2648570",
    "end": "2655980"
  },
  {
    "text": "being worried too",
    "start": "2655980",
    "end": "2659810"
  },
  {
    "text": "yeah yeah that's it thank you about the load testing behavior we are scaling not users but",
    "start": "2663140",
    "end": "2672089"
  },
  {
    "text": "users per second so we changed the definition here so it's no longer ramp",
    "start": "2672089",
    "end": "2679200"
  },
  {
    "text": "users but rent users per second so the amount of users per second is what's",
    "start": "2679200",
    "end": "2684869"
  },
  {
    "text": "actually increasing and that's probably what we want to test anyway because we want to see the de load going up and not",
    "start": "2684869",
    "end": "2693150"
  },
  {
    "text": "just how many users are we able to achieve and well let's see in the in our",
    "start": "2693150",
    "end": "2702200"
  },
  {
    "text": "sniper machine things are still pretty easy our testing is done our I managed",
    "start": "2702200",
    "end": "2710819"
  },
  {
    "text": "to talk with you for 10 minutes while this goes on and it's 2 8 5 on the",
    "start": "2710819",
    "end": "2717589"
  },
  {
    "text": "ending of our directory name so that's this one and here it is our results",
    "start": "2717589",
    "end": "2727380"
  },
  {
    "text": "we've got 21 K requests fired and again",
    "start": "2727380",
    "end": "2732509"
  },
  {
    "text": "if we checked our DB case do we got two",
    "start": "2732509",
    "end": "2738839"
  },
  {
    "text": "errors here probably due to queuing we gotta definitely this is it's very hard",
    "start": "2738839",
    "end": "2747269"
  },
  {
    "text": "to get to zero but very important to look out and hunt those into logs and see what's going on here and try to",
    "start": "2747269",
    "end": "2754170"
  },
  {
    "text": "prevent this errors but this error rate is perfectly used common and load",
    "start": "2754170",
    "end": "2763829"
  },
  {
    "text": "testing as at least from what I see and here you see again the latencies are",
    "start": "2763829",
    "end": "2770789"
  },
  {
    "text": "still not very different so at the 99th",
    "start": "2770789",
    "end": "2776279"
  },
  {
    "text": "percentile perhaps a bit of difference but I'm gonna keep pushing this with",
    "start": "2776279",
    "end": "2782730"
  },
  {
    "text": "more and more load until we reach the point where dynamodb and relation and",
    "start": "2782730",
    "end": "2787980"
  },
  {
    "text": "our DB starts to separate because their main difference here is relational databases",
    "start": "2787980",
    "end": "2794520"
  },
  {
    "text": "are trees bamboo DB is a hashmap as conceptual data structure so this should",
    "start": "2794520",
    "end": "2801779"
  },
  {
    "text": "be much more scalable and as we have more and more data with more and more",
    "start": "2801779",
    "end": "2807359"
  },
  {
    "text": "users that's certainly going to become more apparent but again take a look at",
    "start": "2807359",
    "end": "2814890"
  },
  {
    "text": "the sitting ducks artifacts this is the",
    "start": "2814890",
    "end": "2820980"
  },
  {
    "text": "templates that we use it today though the Beanstalk and the easiest templates",
    "start": "2820980",
    "end": "2826980"
  },
  {
    "text": "were covered in in the past today we are using the server less architecture so",
    "start": "2826980",
    "end": "2833430"
  },
  {
    "text": "the server less resources are here be sure you understand how we pass",
    "start": "2833430",
    "end": "2840569"
  },
  {
    "text": "variables and cross deck references so we are able to insert in one database or",
    "start": "2840569",
    "end": "2847529"
  },
  {
    "text": "another in inside our function the code of the functions is this lambdas dot pi",
    "start": "2847529",
    "end": "2855839"
  },
  {
    "text": "so because this is as dot dot length does not put R & R dB this is on sirs",
    "start": "2855839",
    "end": "2862980"
  },
  {
    "text": "main Python and as ducks and lambdas dot",
    "start": "2862980",
    "end": "2870059"
  },
  {
    "text": "pi and here's the code for both the dynamo DB and the my sequel version of",
    "start": "2870059",
    "end": "2876000"
  },
  {
    "text": "things and an extract is the the shell",
    "start": "2876000",
    "end": "2881369"
  },
  {
    "text": "script and everything here is very easy to create just run this shell script and",
    "start": "2881369",
    "end": "2887520"
  },
  {
    "text": "it should run the AWS CloudFormation deploy to deploy this code and you would",
    "start": "2887520",
    "end": "2892859"
  },
  {
    "text": "be able to run all those yourself and again this is just a very simple",
    "start": "2892859",
    "end": "2900390"
  },
  {
    "text": "exercise showing you how to declare databases with code how to stimulate",
    "start": "2900390",
    "end": "2905970"
  },
  {
    "text": "them with low tests and hopefully understand how your API is scale as your",
    "start": "2905970",
    "end": "2914869"
  },
  {
    "text": "users grow right let's take a look at that if there is anything else in our",
    "start": "2914869",
    "end": "2921299"
  },
  {
    "text": "getting report this is the new one so we ramped it from",
    "start": "2921299",
    "end": "2929410"
  },
  {
    "text": "zero to about 30 users per sack our response time distribution was around",
    "start": "2929410",
    "end": "2936910"
  },
  {
    "text": "the 120 milliseconds so everything quite compressed here not many outliers which",
    "start": "2936910",
    "end": "2943930"
  },
  {
    "text": "is great some queueing he probably happening here better take a look and we can see that",
    "start": "2943930",
    "end": "2954280"
  },
  {
    "text": "our application is right not pretty nicely and I hope you enjoyed today's",
    "start": "2954280",
    "end": "2961109"
  },
  {
    "text": "episode and I would be happy to take questions and if you'd like to see",
    "start": "2961109",
    "end": "2968589"
  },
  {
    "text": "anything at all on Twitter comms life farm NJ like this I am I would be very",
    "start": "2968589",
    "end": "2977890"
  },
  {
    "text": "glad to continue this conversation with you let me know what you what kind of",
    "start": "2977890",
    "end": "2983320"
  },
  {
    "text": "app you would like to test what kind of app are you building and how can we help",
    "start": "2983320",
    "end": "2989470"
  },
  {
    "text": "you be successful with that alright thank you my friend developers see you",
    "start": "2989470",
    "end": "2995740"
  },
  {
    "text": "on the next episode bye bye",
    "start": "2995740",
    "end": "2999330"
  }
]