[
  {
    "text": "- [Rashmi] Hi, I'm Rashmi",
    "start": "90",
    "end": "1590"
  },
  {
    "text": "and I am a solutions architect\nat Amazon Web Services.",
    "start": "1590",
    "end": "5518"
  },
  {
    "text": "Welcome to the second video in\nthe Policy Development series",
    "start": "5518",
    "end": "9210"
  },
  {
    "text": "for Amazon Verified Permissions.",
    "start": "9210",
    "end": "12030"
  },
  {
    "text": "If you haven't watched the previous video,",
    "start": "12030",
    "end": "14549"
  },
  {
    "text": "then it's highly recommended\nthat you watch the first video.",
    "start": "14550",
    "end": "18480"
  },
  {
    "text": "You can find the link in\nthe description below.",
    "start": "18480",
    "end": "20883"
  },
  {
    "text": "In this video, we'll understand",
    "start": "22891",
    "end": "25001"
  },
  {
    "text": "what is a schema in Amazon\nVerified Permissions,",
    "start": "25001",
    "end": "29220"
  },
  {
    "text": "why is it important to use a schema,",
    "start": "29220",
    "end": "32669"
  },
  {
    "text": "demo on how to create a schema",
    "start": "32670",
    "end": "34949"
  },
  {
    "text": "for a et application use\ncase, and next steps.",
    "start": "34950",
    "end": "38133"
  },
  {
    "text": "In the last video, we\nintroduced the vet application",
    "start": "39900",
    "end": "43620"
  },
  {
    "text": "and discussed the AWS\nrecommended framework",
    "start": "43620",
    "end": "46710"
  },
  {
    "text": "to build authorization.",
    "start": "46710",
    "end": "48273"
  },
  {
    "text": "We want to build a\nportal for a vet clinic.",
    "start": "49500",
    "end": "52353"
  },
  {
    "text": "This portal allows pet owners\nto register their pets,",
    "start": "53250",
    "end": "57171"
  },
  {
    "text": "create appointments with\nveterinarians, or vets,",
    "start": "57171",
    "end": "60990"
  },
  {
    "text": "and provides them with the ability",
    "start": "60990",
    "end": "63150"
  },
  {
    "text": "to read their pets' medical\nrecords and test results.",
    "start": "63150",
    "end": "66453"
  },
  {
    "text": "This portal is not just for pet owners.",
    "start": "68160",
    "end": "70893"
  },
  {
    "text": "Vets will also log into this portal",
    "start": "71730",
    "end": "74366"
  },
  {
    "text": "and they can read the\ndetails about the animal,",
    "start": "74366",
    "end": "78390"
  },
  {
    "text": "and it allows the vets to\nupdate the medical records",
    "start": "78390",
    "end": "82229"
  },
  {
    "text": "and any test results that were conducted.",
    "start": "82230",
    "end": "84993"
  },
  {
    "text": "As you must have realized,\nthere are multiple levels",
    "start": "87150",
    "end": "90210"
  },
  {
    "text": "of authorization needed in this case.",
    "start": "90210",
    "end": "93003"
  },
  {
    "text": "We have two different\nactors or principles,",
    "start": "94020",
    "end": "97170"
  },
  {
    "text": "that is pet owners and vets.",
    "start": "97170",
    "end": "100140"
  },
  {
    "text": "We have different set of records",
    "start": "100140",
    "end": "102210"
  },
  {
    "text": "or resources related to the pet,",
    "start": "102210",
    "end": "105330"
  },
  {
    "text": "and need to provide the\nappropriate authorization",
    "start": "105330",
    "end": "108990"
  },
  {
    "text": "for each API or action.",
    "start": "108990",
    "end": "111333"
  },
  {
    "text": "But creating authorization becomes simpler",
    "start": "113100",
    "end": "116542"
  },
  {
    "text": "when we follow a framework for designing",
    "start": "116542",
    "end": "119430"
  },
  {
    "text": "and implementing authorization\nin our application.",
    "start": "119430",
    "end": "122973"
  },
  {
    "text": "So let's take a look at the\nauthorization framework.",
    "start": "123930",
    "end": "127323"
  },
  {
    "text": "We introduced the Amazon\nVerified Permissions",
    "start": "129410",
    "end": "132870"
  },
  {
    "text": "recommended framework in the last video",
    "start": "132870",
    "end": "135750"
  },
  {
    "text": "to build authorization for a portal.",
    "start": "135750",
    "end": "138093"
  },
  {
    "text": "In this video, we'll be\ndiscussing the second step,",
    "start": "139050",
    "end": "142417"
  },
  {
    "text": "which is to define the\nschema and policies.",
    "start": "142417",
    "end": "146730"
  },
  {
    "text": "If you'd like to learn\nmore about step one,",
    "start": "146730",
    "end": "149610"
  },
  {
    "text": "which is to define permissions model,",
    "start": "149610",
    "end": "152010"
  },
  {
    "text": "then please watch the\nfirst video in the series.",
    "start": "152010",
    "end": "155340"
  },
  {
    "text": "Before we dive deep into\nunderstanding schemas",
    "start": "155340",
    "end": "158310"
  },
  {
    "text": "in Amazon Verified Permissions,",
    "start": "158310",
    "end": "160620"
  },
  {
    "text": "let's understand what is a schema?",
    "start": "160620",
    "end": "162873"
  },
  {
    "text": "A policy schema refers\nto a structured framework",
    "start": "164580",
    "end": "168360"
  },
  {
    "text": "or blueprint that\noutlines the key elements",
    "start": "168360",
    "end": "171750"
  },
  {
    "text": "and components of a policy.",
    "start": "171750",
    "end": "173733"
  },
  {
    "text": "Essentially, it's a way to make sure",
    "start": "175110",
    "end": "178110"
  },
  {
    "text": "everyone involved in building\nthe application understands",
    "start": "178110",
    "end": "181830"
  },
  {
    "text": "how things are supposed to be organized",
    "start": "181830",
    "end": "184410"
  },
  {
    "text": "and what they're supposed to be called.",
    "start": "184410",
    "end": "186573"
  },
  {
    "text": "It provides the guardrails or constraints",
    "start": "187410",
    "end": "190440"
  },
  {
    "text": "that ensures all application\npolicies are meaningful",
    "start": "190440",
    "end": "194469"
  },
  {
    "text": "and will function as expected.",
    "start": "194469",
    "end": "197043"
  },
  {
    "text": "For example, via schemas,",
    "start": "198420",
    "end": "201030"
  },
  {
    "text": "you can mandate the naming\nconvention of a pet name",
    "start": "201030",
    "end": "204750"
  },
  {
    "text": "to be in string format rather",
    "start": "204750",
    "end": "207000"
  },
  {
    "text": "than any random naming convention,",
    "start": "207000",
    "end": "209670"
  },
  {
    "text": "which can cause confusion in later stages",
    "start": "209670",
    "end": "212310"
  },
  {
    "text": "of policy evaluation.",
    "start": "212310",
    "end": "214560"
  },
  {
    "text": "But why is it important\nto define a schema?",
    "start": "214560",
    "end": "218073"
  },
  {
    "text": "Can I not create permission policies",
    "start": "220140",
    "end": "222450"
  },
  {
    "text": "without creating a schema?",
    "start": "222450",
    "end": "224073"
  },
  {
    "text": "Well, the answer is you can\nbuild policies without a schema.",
    "start": "225389",
    "end": "229577"
  },
  {
    "text": "The use of schemas in\nAmazon Verified Permissions",
    "start": "230790",
    "end": "233819"
  },
  {
    "text": "is optional, but they're\nhighly recommended",
    "start": "233820",
    "end": "236880"
  },
  {
    "text": "for production software.",
    "start": "236880",
    "end": "238443"
  },
  {
    "text": "Let's consider a scenario",
    "start": "239490",
    "end": "241380"
  },
  {
    "text": "where we don't have a defined schema.",
    "start": "241380",
    "end": "243663"
  },
  {
    "text": "Let's say as you start\nbuilding the portal,",
    "start": "246450",
    "end": "249510"
  },
  {
    "text": "a developer created the\nfollowing permissions policy.",
    "start": "249510",
    "end": "252782"
  },
  {
    "text": "This first policy\nreflects a permission rule",
    "start": "253710",
    "end": "257459"
  },
  {
    "text": "that owners can view their pets' records.",
    "start": "257460",
    "end": "260402"
  },
  {
    "text": "Now your portal becomes really popular",
    "start": "261480",
    "end": "264780"
  },
  {
    "text": "and you want to add\nmore owners and records,",
    "start": "264780",
    "end": "267988"
  },
  {
    "text": "and someone created another\npolicy for owner, Sam.",
    "start": "267988",
    "end": "272433"
  },
  {
    "text": "As you must have realized,\nthere are typo errors.",
    "start": "273990",
    "end": "276903"
  },
  {
    "text": "Amazon Verified Permissions\nuses Cedar language",
    "start": "277770",
    "end": "281250"
  },
  {
    "text": "as we learned in the previous video.",
    "start": "281250",
    "end": "283203"
  },
  {
    "text": "Cedar can't know whether the policy",
    "start": "284220",
    "end": "286800"
  },
  {
    "text": "for owner Sam is right or wrong",
    "start": "286800",
    "end": "289229"
  },
  {
    "text": "by examining it in isolation.",
    "start": "289230",
    "end": "292380"
  },
  {
    "text": "For example, Cedar doesn't know",
    "start": "292380",
    "end": "295080"
  },
  {
    "text": "if the policy author meant PetOwnr",
    "start": "295080",
    "end": "298259"
  },
  {
    "text": "or the incorrect spelling of PetOwner",
    "start": "298260",
    "end": "301170"
  },
  {
    "text": "because both are well-formed names.",
    "start": "301170",
    "end": "303903"
  },
  {
    "text": "If the policies were\nsubsequently evaluated",
    "start": "305130",
    "end": "308250"
  },
  {
    "text": "during an authorization decision,",
    "start": "308250",
    "end": "310530"
  },
  {
    "text": "it would not match at all due",
    "start": "310530",
    "end": "312360"
  },
  {
    "text": "to the mistakes in the policy scope.",
    "start": "312360",
    "end": "314612"
  },
  {
    "text": "Moreover, if we think\nabout types of actions,",
    "start": "316020",
    "end": "320280"
  },
  {
    "text": "two developers could\ndefine similar actions",
    "start": "320280",
    "end": "324000"
  },
  {
    "text": "that might mean the\nsame or different things",
    "start": "324000",
    "end": "326790"
  },
  {
    "text": "and cause conflicts.",
    "start": "326790",
    "end": "328800"
  },
  {
    "text": "For example, let's consider a situation",
    "start": "328800",
    "end": "331860"
  },
  {
    "text": "where one action is view\nand the other is read,",
    "start": "331860",
    "end": "335692"
  },
  {
    "text": "and both have been defined differently",
    "start": "335692",
    "end": "338340"
  },
  {
    "text": "by different developers.",
    "start": "338340",
    "end": "339903"
  },
  {
    "text": "We want to manage and enforce",
    "start": "341730",
    "end": "343800"
  },
  {
    "text": "consistent policies across an application.",
    "start": "343800",
    "end": "346862"
  },
  {
    "text": "If no policy grants access,",
    "start": "347940",
    "end": "350820"
  },
  {
    "text": "Cedar returns a default decision of DENY.",
    "start": "350820",
    "end": "353913"
  },
  {
    "text": "However, it can be frustrating",
    "start": "354810",
    "end": "356975"
  },
  {
    "text": "when a policy isn't behaving as expected.",
    "start": "356975",
    "end": "360303"
  },
  {
    "text": "To avoid this frustration,",
    "start": "361200",
    "end": "363150"
  },
  {
    "text": "it is better to learn\nthat a policy is invalid",
    "start": "363150",
    "end": "366449"
  },
  {
    "text": "when you're creating it so\nthat mistakes can be fixed",
    "start": "366450",
    "end": "370800"
  },
  {
    "text": "before they have an impact on\nyour applications operation.",
    "start": "370800",
    "end": "374733"
  },
  {
    "text": "So how do we handle this?",
    "start": "375720",
    "end": "377910"
  },
  {
    "text": "The answer is schemas.",
    "start": "377910",
    "end": "380130"
  },
  {
    "text": "Schemas validate the policies",
    "start": "380130",
    "end": "382350"
  },
  {
    "text": "as they are created within the system.",
    "start": "382350",
    "end": "384693"
  },
  {
    "text": "A schema provides the guardrails\nfor a policy structure.",
    "start": "385620",
    "end": "389492"
  },
  {
    "text": "Now let's see how to create schemas",
    "start": "390450",
    "end": "392670"
  },
  {
    "text": "for a use case in action via a demo.",
    "start": "392670",
    "end": "395553"
  },
  {
    "text": "We'll go to Amazon Verified\nPermissions from the console.",
    "start": "400020",
    "end": "403173"
  },
  {
    "text": "We'll start by creating\nan empty policy store.",
    "start": "404760",
    "end": "408003"
  },
  {
    "text": "We'll name a policy\nstore VeterinaryPortal.",
    "start": "413430",
    "end": "416534"
  },
  {
    "text": "(keyboard clacking)",
    "start": "416534",
    "end": "419534"
  },
  {
    "text": "Because we'll be using schemas\nto validate our policies,",
    "start": "423450",
    "end": "427620"
  },
  {
    "text": "we need to turn on the Validation mode.",
    "start": "427620",
    "end": "430680"
  },
  {
    "text": "Now, every single policy that you create",
    "start": "430680",
    "end": "433710"
  },
  {
    "text": "will be validated against the schema.",
    "start": "433710",
    "end": "436113"
  },
  {
    "text": "If you don't have the schema,",
    "start": "437190",
    "end": "439050"
  },
  {
    "text": "then the policy validations will fail.",
    "start": "439050",
    "end": "441513"
  },
  {
    "text": "Now let's create a policy store.",
    "start": "442770",
    "end": "444843"
  },
  {
    "text": "We can now start creating a schema.",
    "start": "449730",
    "end": "452520"
  },
  {
    "text": "Entity types and actions in\nAmazon Verified permissions",
    "start": "452520",
    "end": "456870"
  },
  {
    "text": "will be nested under a namespace.",
    "start": "456870",
    "end": "459990"
  },
  {
    "text": "Let's call our namespace VeterinaryPortal.",
    "start": "459990",
    "end": "462763"
  },
  {
    "text": "(keyboard clacking)",
    "start": "462764",
    "end": "465764"
  },
  {
    "text": "In Amazon Verified Permissions,",
    "start": "466950",
    "end": "468900"
  },
  {
    "text": "all principles, resources,\nare just entity types.",
    "start": "468900",
    "end": "473550"
  },
  {
    "text": "Let's start defining our entity types.",
    "start": "473550",
    "end": "476612"
  },
  {
    "text": "We'll create a first entity\ntype, called PetOwner.",
    "start": "477720",
    "end": "481173"
  },
  {
    "text": "(keyboard clacking)",
    "start": "482212",
    "end": "485760"
  },
  {
    "text": "For simple policies and policy models,",
    "start": "485760",
    "end": "489210"
  },
  {
    "text": "we need not worry about parents",
    "start": "489210",
    "end": "492120"
  },
  {
    "text": "and we recommend that you don't use them.",
    "start": "492120",
    "end": "495389"
  },
  {
    "text": "For large complex policy stores,",
    "start": "495390",
    "end": "498180"
  },
  {
    "text": "the parent context adds a\nhierarchy of relationships",
    "start": "498180",
    "end": "502410"
  },
  {
    "text": "that improves policy indexing,",
    "start": "502410",
    "end": "505530"
  },
  {
    "text": "but it also affects how you\ncall the is authorized function.",
    "start": "505530",
    "end": "510530"
  },
  {
    "text": "I can use the Attribute field if I want",
    "start": "510720",
    "end": "513450"
  },
  {
    "text": "to authorize owners based\non certain attributes.",
    "start": "513450",
    "end": "516693"
  },
  {
    "text": "In this case, I want to\nauthorize only those owners",
    "start": "517980",
    "end": "521699"
  },
  {
    "text": "whose email addresses are verified.",
    "start": "521700",
    "end": "524103"
  },
  {
    "text": "Hence, I'll create a boolean\nattribute, isemailverified,",
    "start": "525660",
    "end": "530660"
  },
  {
    "text": "(keyboard clacking)",
    "start": "531665",
    "end": "534930"
  },
  {
    "text": "because I don't want the\ncustomers to do anything",
    "start": "534930",
    "end": "538860"
  },
  {
    "text": "unless they have verified email addresses.",
    "start": "538860",
    "end": "542130"
  },
  {
    "text": "We'll also add an\nattribute called ClinicID.",
    "start": "542130",
    "end": "545313"
  },
  {
    "text": "This is in case we want to restrict access",
    "start": "547080",
    "end": "550470"
  },
  {
    "text": "to our veterinary portal",
    "start": "550470",
    "end": "552449"
  },
  {
    "text": "from certain locations in future policies.",
    "start": "552450",
    "end": "555903"
  },
  {
    "text": "We'll also add an attribute called type.",
    "start": "557040",
    "end": "560133"
  },
  {
    "text": "You'll see the use of type attribute",
    "start": "561330",
    "end": "563520"
  },
  {
    "text": "in the next video when we create policies.",
    "start": "563520",
    "end": "566340"
  },
  {
    "text": "Adding a type attribute\nwill help us avoid having",
    "start": "566340",
    "end": "570090"
  },
  {
    "text": "to create policies for each user.",
    "start": "570090",
    "end": "572850"
  },
  {
    "text": "Let's add a pet owner entity type.",
    "start": "572850",
    "end": "575759"
  },
  {
    "text": "Now that we have created a\nprinciple that is PetOwner,",
    "start": "575760",
    "end": "579840"
  },
  {
    "text": "let's now create a resource.",
    "start": "579840",
    "end": "581823"
  },
  {
    "text": "In this example, resource\nis MedicalRecords.",
    "start": "582690",
    "end": "586146"
  },
  {
    "text": "(keyboard clacking)",
    "start": "586146",
    "end": "588690"
  },
  {
    "text": "Each pet has an owner,",
    "start": "588690",
    "end": "590610"
  },
  {
    "text": "and I want to establish a\nrelation between the pet owner",
    "start": "590610",
    "end": "595019"
  },
  {
    "text": "and the medical record of the pet.",
    "start": "595020",
    "end": "597570"
  },
  {
    "text": "Because I have defined pet\nowner as the entity already,",
    "start": "597570",
    "end": "602490"
  },
  {
    "text": "I can create an attribute called owner",
    "start": "602490",
    "end": "605910"
  },
  {
    "text": "and in Attribute type,\nI can select PetOwner.",
    "start": "605910",
    "end": "609029"
  },
  {
    "text": "I'll also add the attribute, clinicID.",
    "start": "609030",
    "end": "612063"
  },
  {
    "text": "Next, we define what\nactions our principle,",
    "start": "618270",
    "end": "621459"
  },
  {
    "text": "that is PetOwner, can\ntake on the resource,",
    "start": "621459",
    "end": "625079"
  },
  {
    "text": "that is MedicalRecords.",
    "start": "625080",
    "end": "626613"
  },
  {
    "text": "As you know, pet owners should be allowed",
    "start": "627690",
    "end": "630480"
  },
  {
    "text": "to register their pets",
    "start": "630480",
    "end": "632190"
  },
  {
    "text": "and view the medical record of their pets.",
    "start": "632190",
    "end": "635133"
  },
  {
    "text": "Let's define a first action\nname as ReadMedicalRecords.",
    "start": "635970",
    "end": "640761"
  },
  {
    "text": "(keyboard clacking)",
    "start": "640762",
    "end": "643762"
  },
  {
    "text": "For this example, we won't\nbe selecting an action group.",
    "start": "646680",
    "end": "651149"
  },
  {
    "text": "But if you want to group\na set of actions together,",
    "start": "651150",
    "end": "655020"
  },
  {
    "text": "then you can make use of the action group.",
    "start": "655020",
    "end": "657990"
  },
  {
    "text": "For example, you can group\nall read-based actions,",
    "start": "657990",
    "end": "661950"
  },
  {
    "text": "such as view and list, into\nan action group called Read.",
    "start": "661950",
    "end": "666950"
  },
  {
    "text": "Similarly, you can add\nall write-based actions,",
    "start": "667020",
    "end": "670853"
  },
  {
    "text": "such as create, update, delete,",
    "start": "670853",
    "end": "673888"
  },
  {
    "text": "into an action group called Write.",
    "start": "673888",
    "end": "676530"
  },
  {
    "text": "Next, we'll select our\nprinciple and the resource type.",
    "start": "676530",
    "end": "680103"
  },
  {
    "text": "In this case, the principle is PetOwner",
    "start": "681270",
    "end": "684280"
  },
  {
    "text": "and the resource is MedicalRecords.",
    "start": "686790",
    "end": "689212"
  },
  {
    "text": "The Applies to section is really important",
    "start": "691050",
    "end": "694170"
  },
  {
    "text": "as it binds the principles\nto particular resource types.",
    "start": "694170",
    "end": "697893"
  },
  {
    "text": "Context is additional set of attributes",
    "start": "699390",
    "end": "702300"
  },
  {
    "text": "that you might want to use",
    "start": "702300",
    "end": "703800"
  },
  {
    "text": "when making authorization decisions.",
    "start": "703800",
    "end": "706263"
  },
  {
    "text": "In our case, let's define",
    "start": "707370",
    "end": "709800"
  },
  {
    "text": "the context attribute, isMFAauthenticated,",
    "start": "709800",
    "end": "713371"
  },
  {
    "text": "(keyboard clacking)",
    "start": "713371",
    "end": "716371"
  },
  {
    "text": "and define it as type boolean.",
    "start": "718320",
    "end": "720753"
  },
  {
    "text": "We'll now add our action.",
    "start": "723330",
    "end": "724830"
  },
  {
    "text": "We have defined one principle,",
    "start": "724830",
    "end": "727620"
  },
  {
    "text": "one resource type, and one action.",
    "start": "727620",
    "end": "729963"
  },
  {
    "text": "Let's define our other entity type, pet.",
    "start": "731130",
    "end": "734493"
  },
  {
    "text": "I now want to establish a relation",
    "start": "738518",
    "end": "741120"
  },
  {
    "text": "between the pet owner and the pet.",
    "start": "741120",
    "end": "743733"
  },
  {
    "text": "Because I have defined\nPetOwner as the entity already,",
    "start": "744690",
    "end": "749670"
  },
  {
    "text": "I can select PetOwner\nfrom the attribute type,",
    "start": "749670",
    "end": "753720"
  },
  {
    "text": "and I can add an attribute called owner.",
    "start": "753720",
    "end": "756990"
  },
  {
    "text": "I'll again add the attribute, ClinicID.",
    "start": "756990",
    "end": "760203"
  },
  {
    "text": "We will now define another action,",
    "start": "763740",
    "end": "765948"
  },
  {
    "text": "RegisterPet, for the PetOwner.",
    "start": "765948",
    "end": "768423"
  },
  {
    "text": "(keyboard clacking)",
    "start": "769798",
    "end": "772798"
  },
  {
    "text": "We'll select our principle,",
    "start": "773880",
    "end": "776460"
  },
  {
    "text": "which in this case is the PetOwner,",
    "start": "776460",
    "end": "778653"
  },
  {
    "text": "and our resource, which in\nthis case is the pet itself,",
    "start": "780300",
    "end": "785266"
  },
  {
    "text": "and we'll add our action.",
    "start": "787860",
    "end": "790047"
  },
  {
    "text": "Next, we'll add Vet as under entity.",
    "start": "790047",
    "end": "793600"
  },
  {
    "text": "(keyboard clacking)",
    "start": "793600",
    "end": "796829"
  },
  {
    "text": "We'll again add clinicID as the attribute.",
    "start": "796830",
    "end": "799889"
  },
  {
    "text": "(keyboard clacking)",
    "start": "799889",
    "end": "803430"
  },
  {
    "text": "We'll now define the actions for the Vet.",
    "start": "803430",
    "end": "806220"
  },
  {
    "text": "Vets should be able to view",
    "start": "806220",
    "end": "808560"
  },
  {
    "text": "and update the pet medical records.",
    "start": "808560",
    "end": "811290"
  },
  {
    "text": "We'll create the action,\nUpdateMedicalRecords.",
    "start": "811290",
    "end": "814532"
  },
  {
    "text": "(keyboard clacking)",
    "start": "814532",
    "end": "817532"
  },
  {
    "text": "We'll select our principle, that is Vet,",
    "start": "818880",
    "end": "821703"
  },
  {
    "text": "and the resource, which in\nthis case is the MedicalRecord.",
    "start": "823602",
    "end": "827880"
  },
  {
    "text": "As you know, vets also need to be able",
    "start": "829734",
    "end": "832320"
  },
  {
    "text": "to view the medical records.",
    "start": "832320",
    "end": "834183"
  },
  {
    "text": "But because we have\nalready created an action,",
    "start": "835050",
    "end": "839130"
  },
  {
    "text": "ReadMedicalRecords, for pet owners,",
    "start": "839130",
    "end": "842100"
  },
  {
    "text": "we need not create a\nseparate one for vets.",
    "start": "842100",
    "end": "845130"
  },
  {
    "text": "We'll simply edit the existing action,",
    "start": "845130",
    "end": "848250"
  },
  {
    "text": "ReadMedicalRecords,",
    "start": "848250",
    "end": "849173"
  },
  {
    "text": "and add Vet as the principle.",
    "start": "851520",
    "end": "854163"
  },
  {
    "text": "We'll now save the changes\nmade to our schema.",
    "start": "856500",
    "end": "859203"
  },
  {
    "text": "Once we have created our schema,",
    "start": "860790",
    "end": "862860"
  },
  {
    "text": "we can visualize it on this page to see",
    "start": "862860",
    "end": "865620"
  },
  {
    "text": "if it adheres to our permissions model.",
    "start": "865620",
    "end": "867993"
  },
  {
    "text": "As you can see, based on our schema,",
    "start": "869160",
    "end": "872040"
  },
  {
    "text": "vets should be able to view\nand update the medical records.",
    "start": "872040",
    "end": "877040"
  },
  {
    "text": "Pet owners should be able\nto register their pets",
    "start": "877050",
    "end": "880740"
  },
  {
    "text": "and view the medical records.",
    "start": "880740",
    "end": "882843"
  },
  {
    "text": "Note that schema file is not a policy.",
    "start": "884310",
    "end": "887520"
  },
  {
    "text": "It does not grant or deny\naccess to any resources.",
    "start": "887520",
    "end": "892026"
  },
  {
    "text": "It merely defines the\nstructure of the system.",
    "start": "892026",
    "end": "895533"
  },
  {
    "text": "It is like a contract between\nthe policy author and Cedar.",
    "start": "896400",
    "end": "900873"
  },
  {
    "text": "The policy author agrees to write policies",
    "start": "902100",
    "end": "905430"
  },
  {
    "text": "that conform to the schema,",
    "start": "905430",
    "end": "907440"
  },
  {
    "text": "and Cedar agrees to validate\npolicies against the schema.",
    "start": "907440",
    "end": "912048"
  },
  {
    "text": "Now, let's relate the schema\nthat we created in this demo",
    "start": "912048",
    "end": "916350"
  },
  {
    "text": "to our original veterinary\nportal application.",
    "start": "916350",
    "end": "919323"
  },
  {
    "text": "In this demo, we have created\ntwo different principles,",
    "start": "920160",
    "end": "924569"
  },
  {
    "text": "that is pet owners and veterinarians.",
    "start": "924570",
    "end": "928113"
  },
  {
    "text": "We have created our resources,",
    "start": "929130",
    "end": "931423"
  },
  {
    "text": "that is pet and medical records.",
    "start": "931423",
    "end": "935373"
  },
  {
    "text": "And finally, we have\ncreated appropriate level",
    "start": "936330",
    "end": "939960"
  },
  {
    "text": "of authorization for each of the APIs.",
    "start": "939960",
    "end": "943023"
  },
  {
    "text": "Congratulations, you have now translated",
    "start": "945000",
    "end": "947760"
  },
  {
    "text": "a logical application permissions\nmodel into a Cedar schema.",
    "start": "947760",
    "end": "951753"
  },
  {
    "text": "In this video, you learned\nwhy is it important",
    "start": "953597",
    "end": "957269"
  },
  {
    "text": "to create a schema for your use case,",
    "start": "957270",
    "end": "960690"
  },
  {
    "text": "basic structure of a schema, and finally,",
    "start": "960690",
    "end": "964260"
  },
  {
    "text": "you saw a demo on how to create a schema",
    "start": "964260",
    "end": "966960"
  },
  {
    "text": "for a veterinary portal use case.",
    "start": "966960",
    "end": "969513"
  },
  {
    "text": "In the next video, we will take\nthis policy model and schema",
    "start": "970560",
    "end": "974580"
  },
  {
    "text": "and start writing policies",
    "start": "974580",
    "end": "976410"
  },
  {
    "text": "to log down access to our application.",
    "start": "976410",
    "end": "979173"
  },
  {
    "text": "To learn more about Amazon\nVerified Permissions and schema,",
    "start": "981450",
    "end": "985560"
  },
  {
    "text": "please scan the QR codes on the screen.",
    "start": "985560",
    "end": "988083"
  },
  {
    "text": "Thank you.",
    "start": "990870",
    "end": "991703"
  }
]