[
  {
    "start": "0",
    "end": "80000"
  },
  {
    "text": "am I live I am all right well uh good morning thanks for everybody for coming out today to",
    "start": "1520",
    "end": "7560"
  },
  {
    "text": "reinvent and to this talk today uh this is data persistence to Amazon Dynamo DB for mobile applications my name is Bob",
    "start": "7560",
    "end": "14320"
  },
  {
    "text": "Kenny I'm a develop a software developer with the AWS developer resources team I",
    "start": "14320",
    "end": "19560"
  },
  {
    "text": "work on the mobile sdks which is the uh AWS SDK for iOS and the AWS SDK for",
    "start": "19560",
    "end": "25920"
  },
  {
    "text": "Android um talk today is about two open source Frameworks that been working on for the last couple of months that we're",
    "start": "25920",
    "end": "31599"
  },
  {
    "text": "going to get we're looking to get some feedback on uh and these two Frameworks uh allow you to build applications",
    "start": "31599",
    "end": "38280"
  },
  {
    "text": "mobile applications using uh object modeling without having to worry about managing a",
    "start": "38280",
    "end": "45038"
  },
  {
    "text": "backend so uh rough agenda we'll kind of just uh briefly touch on Dynamo DB if",
    "start": "47239",
    "end": "53199"
  },
  {
    "text": "you're not at all familiar then we'll drive right into the uh two Frameworks that we have which is the uh Dynamo DB",
    "start": "53199",
    "end": "59719"
  },
  {
    "text": "map for Android and the AWS persistance framework for core data and then we'll talk a little bit about how you can give",
    "start": "59719",
    "end": "65000"
  },
  {
    "text": "us feedback and where we're going to go from",
    "start": "65000",
    "end": "68600"
  },
  {
    "text": "here uh so Amazon Dynamo DB is one of our newer Services it launched earlier this year it's a nosql database which",
    "start": "70200",
    "end": "77479"
  },
  {
    "text": "basically just means it's a key value store and our indexed keys are either a",
    "start": "77479",
    "end": "82600"
  },
  {
    "text": "hash key or a hash key range key pair and then our values are just arbitrary data that we would like to store up to",
    "start": "82600",
    "end": "88680"
  },
  {
    "text": "uh a limit supported by the Sur Service uh the benefits are that it's scalable and uh highly available like all the",
    "start": "88680",
    "end": "95640"
  },
  {
    "text": "other AWS Services H and you pay for your throughput and storage so you can",
    "start": "95640",
    "end": "100880"
  },
  {
    "text": "get predictable performance uh and low",
    "start": "100880",
    "end": "105078"
  },
  {
    "start": "107000",
    "end": "160000"
  },
  {
    "text": "latencies so object mapping for Dynamo DB what does that what does that mean at the most basic level what we're talking",
    "start": "107159",
    "end": "113119"
  },
  {
    "text": "about doing is mapping a individual item inside of a Dynamo DB table to an",
    "start": "113119",
    "end": "118680"
  },
  {
    "text": "instance of a class either in our application either in an iOS application or an Android application why would uh",
    "start": "118680",
    "end": "125640"
  },
  {
    "text": "why would somebody want to do this um so for the end user they get an",
    "start": "125640",
    "end": "130800"
  },
  {
    "text": "application that is cloudbed so that they can take their data wherever they want to go as long as the application",
    "start": "130800",
    "end": "135879"
  },
  {
    "text": "supports the cloud backend uh and they get the uh fast reliable low latency",
    "start": "135879",
    "end": "142200"
  },
  {
    "text": "connection to Dynamo DB uh and for the developers what we've tried to do is use uh tool sets inside",
    "start": "142200",
    "end": "149280"
  },
  {
    "text": "of the individual ecosystems both for IOS and Android so that the developer doesn't have to learn a whole new tool set in order to offer",
    "start": "149280",
    "end": "156120"
  },
  {
    "text": "this feature for their end users so what you see up on the screen",
    "start": "156120",
    "end": "162920"
  },
  {
    "text": "right now is a is a snapshot of the Dynamo DB mapper for for Android um the Dynamo DB mapper for Java",
    "start": "162920",
    "end": "170599"
  },
  {
    "text": "has been available since we launched uh Dynamo DB earlier this year we recently ported it to",
    "start": "170599",
    "end": "176080"
  },
  {
    "text": "Android um what you're seeing up on the screen is just a small portion of a class uh with a few annotations the",
    "start": "176080",
    "end": "183640"
  },
  {
    "text": "Dynamo DB table the Dynamo DB hash key and the Dynamo DB attribute um we'll go",
    "start": "183640",
    "end": "189080"
  },
  {
    "text": "into detail about all the different annotations but basically this is the the sort of minimum uh uh amount of",
    "start": "189080",
    "end": "196040"
  },
  {
    "text": "information you need to actually get started using the Dynamo DB",
    "start": "196040",
    "end": "201239"
  },
  {
    "start": "201000",
    "end": "255000"
  },
  {
    "text": "mapper so now what I'd like to do is break out into a demo",
    "start": "201239",
    "end": "207200"
  },
  {
    "text": "and uh what I'm going to do is I'm actually going to run our demo application which is available with the download of the AWS SDK for Android and",
    "start": "216760",
    "end": "224120"
  },
  {
    "text": "it's a user preferences sample so I'll go ahead and start up our application in our",
    "start": "224120",
    "end": "229840"
  },
  {
    "text": "emulator and this is a very simple application it's only got four buttons",
    "start": "234079",
    "end": "239120"
  },
  {
    "text": "um because there is a little bit of a rampup time for provisioning tables inside of Dynamo DB I've gone ahead and",
    "start": "239120",
    "end": "244599"
  },
  {
    "text": "pre-populated this table so I'm just going to go ahead and click on this third button to show the list of",
    "start": "244599",
    "end": "250879"
  },
  {
    "text": "users come on so now I've got a list of users and I",
    "start": "251560",
    "end": "257519"
  },
  {
    "text": "can select an individual user and I can see the individual preferences for that user when I select an option and change",
    "start": "257519",
    "end": "265800"
  },
  {
    "text": "it the application is changing that and persisting the data to Dynamo DB on the back end and if I change to my AWS",
    "start": "265800",
    "end": "274720"
  },
  {
    "text": "console go to the test preferences yes user preferences table explore I can now",
    "start": "274720",
    "end": "280800"
  },
  {
    "text": "see that the user Maddie Glenn has the color theme green now if I switch back",
    "start": "280800",
    "end": "286680"
  },
  {
    "text": "to this application I can change other options and as each as each option is changed that data is immediately",
    "start": "286680",
    "end": "292919"
  },
  {
    "text": "persisted to dynamodb I can go back I can press and",
    "start": "292919",
    "end": "298160"
  },
  {
    "text": "hold this out and delete users once again if I go back to my table and",
    "start": "298160",
    "end": "305400"
  },
  {
    "text": "refresh I can see that the other data that I set on that user is is updated and I have one less",
    "start": "305400",
    "end": "312880"
  },
  {
    "text": "user so if we take a look at our uh Eclipse",
    "start": "312880",
    "end": "319199"
  },
  {
    "text": "project uh one thing that I would like to highlight is uh the our our Libs so if you've already used the AWS s for",
    "start": "319280",
    "end": "326479"
  },
  {
    "text": "Android uh this jar here should already be familiar to you this is our our bundled uh service jar this is the jar",
    "start": "326479",
    "end": "332360"
  },
  {
    "text": "that you would use to use all of the low-level clients for all of our services and so then all it's necessary",
    "start": "332360",
    "end": "338240"
  },
  {
    "text": "is to add this additional ddb mapper jar to your project and now you can use the",
    "start": "338240",
    "end": "343680"
  },
  {
    "text": "Dynamo DB mapper for Android so inside of our Dynamo DB",
    "start": "343680",
    "end": "348960"
  },
  {
    "text": "manager class we have an nested class called user preferences which has an",
    "start": "348960",
    "end": "355880"
  },
  {
    "text": "annotation let's make this bigger",
    "start": "355880",
    "end": "360360"
  },
  {
    "text": "and we have a list of all of our our attributes and individual annotations for those for those",
    "start": "361280",
    "end": "369479"
  },
  {
    "text": "Getters then once I have all of that information all it's necessary to actually use anything or update any of",
    "start": "369479",
    "end": "376960"
  },
  {
    "text": "the uh any of the information for that user preference simply a matter of passing an actual",
    "start": "376960",
    "end": "383639"
  },
  {
    "text": "instance of that user preferences object then I create a Dynamo DB mapper and I call Save",
    "start": "383639",
    "end": "390240"
  },
  {
    "text": "so you can see very little code to actually save an object in statam mode DB in uh have have it persist inside of",
    "start": "390240",
    "end": "398039"
  },
  {
    "text": "the table uh that can then be",
    "start": "398039",
    "end": "401759"
  },
  {
    "start": "407000",
    "end": "450000"
  },
  {
    "text": "refreshed so what you see up on the screen right now is a uh if you've already used the AWS SDK for Android uh",
    "start": "407520",
    "end": "414599"
  },
  {
    "text": "using Dynamo DB should already be familiar this is our low-level service",
    "start": "414599",
    "end": "419919"
  },
  {
    "text": "client uh so the top top line we're creating a a low-level client a ddb",
    "start": "419919",
    "end": "425479"
  },
  {
    "text": "client using credentials then we create a hashmap which Maps our attributes uh",
    "start": "425479",
    "end": "430759"
  },
  {
    "text": "into the Dynamo DB table and then we create a put item request and then call ddbp put item now this still makes a lot",
    "start": "430759",
    "end": "439280"
  },
  {
    "text": "of sense for a lot of use cases but where we have a object model that was that's well understood the Dynamo DB",
    "start": "439280",
    "end": "445479"
  },
  {
    "text": "mapper can uh help us out and remove some of this boiler plate code",
    "start": "445479",
    "end": "451000"
  },
  {
    "start": "450000",
    "end": "554000"
  },
  {
    "text": "so what you see on the screen now is the same functional code but using the Dynamo DB mapper we start again creating",
    "start": "451000",
    "end": "458120"
  },
  {
    "text": "a low-l client passing it the credentials but then we create an instance the Dynamo DB mapper and we",
    "start": "458120",
    "end": "464840"
  },
  {
    "text": "hand the mapper our low-level client and that client will be used for all operations to save delete and update",
    "start": "464840",
    "end": "472240"
  },
  {
    "text": "data inside of Dynamo DB then once we have our mapper we create an instance of our object we set",
    "start": "472240",
    "end": "478319"
  },
  {
    "text": "metadata on it and then we call mapper do saave it's an important distinction to make here is that we're passing",
    "start": "478319",
    "end": "484639"
  },
  {
    "text": "objects explicitly into the mapper to save and then explicitly uh getting",
    "start": "484639",
    "end": "490080"
  },
  {
    "text": "references back when we when we uh load on our last line here when we call mapper do load with our hash",
    "start": "490080",
    "end": "497520"
  },
  {
    "text": "key so in addition to being able to load and save uh mapper supports a number of",
    "start": "498599",
    "end": "504080"
  },
  {
    "text": "other options which you see up on the screen",
    "start": "504080",
    "end": "509960"
  },
  {
    "text": "so we can delete objects we can uh load objects we can",
    "start": "511319",
    "end": "516440"
  },
  {
    "text": "load multiple objects via the query and scan operation um it's important to note that the query operation requires that",
    "start": "516440",
    "end": "522279"
  },
  {
    "text": "you have both a uh range key and a hash key uh and our scan operation uh has",
    "start": "522279",
    "end": "528040"
  },
  {
    "text": "pagination so we'll lazily load objects but uh it will use uh more provisioned",
    "start": "528040",
    "end": "533160"
  },
  {
    "text": "read throughput finally we the mapper supports a number of batch operations including batch delete batch save and",
    "start": "533160",
    "end": "540920"
  },
  {
    "text": "batch right which is actually a combination of both right and delete and the important thing to note about our",
    "start": "540920",
    "end": "546079"
  },
  {
    "text": "batch operations is that they are not uh considered transactional so uh you can have partial success of those batch",
    "start": "546079",
    "end": "553959"
  },
  {
    "start": "554000",
    "end": "634000"
  },
  {
    "text": "operations so now I'd like to go into detail with some of the annotations available in the mapper and the first",
    "start": "554600",
    "end": "560160"
  },
  {
    "text": "and the most important one is our Dynamo DB table annotation so by default we can just",
    "start": "560160",
    "end": "567600"
  },
  {
    "text": "apply the Dynamo DB table annotation by itself with no other options and we can get a table a table we created for",
    "start": "567600",
    "end": "575320"
  },
  {
    "text": "the name of the class so in our our top example our user preferences class gets mapped to the user preferences table but",
    "start": "575320",
    "end": "582360"
  },
  {
    "text": "if we don't want to use that mapping we can override it with a table name uh override and we can and on the bottom we",
    "start": "582360",
    "end": "588920"
  },
  {
    "text": "see we map the user preferences class to the to the table",
    "start": "588920",
    "end": "594600"
  },
  {
    "text": "preps second we have our two index uh uh our two index an ations the Dynamo DB",
    "start": "595079",
    "end": "600560"
  },
  {
    "text": "hash key and the Dynamo DB range key um so these are the way that we specify",
    "start": "600560",
    "end": "605600"
  },
  {
    "text": "which of our attributes on our objects or our indexable attributes um and like the table",
    "start": "605600",
    "end": "613079"
  },
  {
    "text": "attribute uh table annotation we can uh not provide an override and it will use",
    "start": "613079",
    "end": "618800"
  },
  {
    "text": "uh the the getter ID so we're we're annotating the getter here so if we left off the attribute name our attribute",
    "start": "618800",
    "end": "626240"
  },
  {
    "text": "will be mapped to user ID but in this case we've supped SL an override so user ID will be mapped to",
    "start": "626240",
    "end": "634079"
  },
  {
    "start": "634000",
    "end": "679000"
  },
  {
    "text": "a for our non-indexed attributes we have the Dynamo DB attribute annotation and",
    "start": "634079",
    "end": "639480"
  },
  {
    "text": "strictly speaking this is not necessary if you're using standard getter names uh if you do not annotate a getter the",
    "start": "639480",
    "end": "645760"
  },
  {
    "text": "mapper will actually assume that that is a mapped attribute and we use that uh use the standard naming conventions but",
    "start": "645760",
    "end": "652000"
  },
  {
    "text": "if we want to override we must apply in The annotation and the override so here we have first name is mapped to a last",
    "start": "652000",
    "end": "658560"
  },
  {
    "text": "name is mapped or excuse me B and last name is mapped to C if we have derived data such as a full",
    "start": "658560",
    "end": "665839"
  },
  {
    "text": "name uh or some other piece of data that doesn't make sense to store inside of Dynamo DB we can we can flag that the",
    "start": "665839",
    "end": "672279"
  },
  {
    "text": "Dynamo DB ignore annotation and the mapper will simply ignore it on save and",
    "start": "672279",
    "end": "678959"
  },
  {
    "start": "679000",
    "end": "785000"
  },
  {
    "text": "load next we have the Dynamo DB autogenerated key and uh what it does is",
    "start": "679399",
    "end": "685320"
  },
  {
    "text": "is you know fairly self self-explanatory um but in our previous",
    "start": "685320",
    "end": "691560"
  },
  {
    "text": "example we were setting the user ID explicitly but if we don't have any",
    "start": "691560",
    "end": "696639"
  },
  {
    "text": "reason to actually uh have have our application set the uh the user ID um",
    "start": "696639",
    "end": "704399"
  },
  {
    "text": "programmatically we can we can have the the mapper do it for us so we simply add the Dynamo D Auto autogenerated key and",
    "start": "704399",
    "end": "710600"
  },
  {
    "text": "now we no longer need to explicitly set our user ID the mapper will do it for us next we have the Dynamo DB version",
    "start": "710600",
    "end": "718240"
  },
  {
    "text": "attribute annotation and what this does is all enables a feature called optimistic locking so by",
    "start": "718240",
    "end": "724839"
  },
  {
    "text": "default the Dynamo DB mapper will save uh any data that you you send to it",
    "start": "724839",
    "end": "730160"
  },
  {
    "text": "regardless of whether or not another client has already tried to save that data what the dynamodb version attribute",
    "start": "730160",
    "end": "736320"
  },
  {
    "text": "annotation allows us to do is flag one of our attributes as a version a version number so that we can then track whether",
    "start": "736320",
    "end": "743279"
  },
  {
    "text": "or not our data has been changed out from underneath us so in a case where we have version one on our mobile device",
    "start": "743279",
    "end": "749199"
  },
  {
    "text": "device and we try to save and version one is already stored inside of the Dynamo DB",
    "start": "749199",
    "end": "754519"
  },
  {
    "text": "table our save will succeed and our version number will be incremented to",
    "start": "754519",
    "end": "760959"
  },
  {
    "text": "two conversely if we have version one loaded on our mobile application and we",
    "start": "761680",
    "end": "767000"
  },
  {
    "text": "try to save but another user has already saved uh this data a couple of times and",
    "start": "767000",
    "end": "772320"
  },
  {
    "text": "we've revved to version three then our save will not complete an exception will",
    "start": "772320",
    "end": "777480"
  },
  {
    "text": "be raised and the application can then choed whether or not to refresh data or just simply uh throw up an",
    "start": "777480",
    "end": "784920"
  },
  {
    "start": "785000",
    "end": "837000"
  },
  {
    "text": "error finally we have the Dynamo DB marshalling annotation uh so so far we've been talking about simple string",
    "start": "785399",
    "end": "792600"
  },
  {
    "text": "and number uh attributes or or properties for our objects if we have complex types that can be represented as",
    "start": "792600",
    "end": "799440"
  },
  {
    "text": "a string then we can use the Dynamo DB marshalling annotation to flag those",
    "start": "799440",
    "end": "804959"
  },
  {
    "text": "complex types to be persisted into Dynamo into to the Dynamo DB",
    "start": "804959",
    "end": "811760"
  },
  {
    "text": "table so our marshalling annotation simply takes a class which is in an",
    "start": "811760",
    "end": "817600"
  },
  {
    "text": "implementation of the Dynamo DB marshaler interface which has two methods Marshall and unmarshall Marshall",
    "start": "817600",
    "end": "824040"
  },
  {
    "text": "which will take the string representation excuse me which will take the will generate the string representation from the complex type and",
    "start": "824040",
    "end": "831839"
  },
  {
    "text": "un Marshall which will generate the complex type from the string",
    "start": "831839",
    "end": "836920"
  },
  {
    "text": "representation so in addition to being able to control uh how how the uh mapper",
    "start": "838040",
    "end": "844000"
  },
  {
    "text": "Maps data from our Dynamo DB table to our",
    "start": "844000",
    "end": "848720"
  },
  {
    "text": "objects we also can control a number of options inside of the Dynamo DB mapper",
    "start": "849120",
    "end": "855079"
  },
  {
    "text": "via the Dynamo DB mapper config first thing we can do is change its save Behavior by",
    "start": "855079",
    "end": "861279"
  },
  {
    "text": "default the mapper uses update which will create a union of the of the on",
    "start": "861279",
    "end": "867880"
  },
  {
    "text": "device data and the in table data so in the case where we have on device a b and",
    "start": "867880",
    "end": "874519"
  },
  {
    "text": "c and we save and then in in Dynamo DB we have CD and E we will create a union",
    "start": "874519",
    "end": "880680"
  },
  {
    "text": "of those of those two things and we will end up with the five attributes of a b c d and",
    "start": "880680",
    "end": "886600"
  },
  {
    "text": "e that's the default behavior on the Dynamo DB mapper uh if that's not what you would prefer we also support clobber",
    "start": "886600",
    "end": "894000"
  },
  {
    "text": "which is again a name implies exactly what it does so if you have a b and c",
    "start": "894000",
    "end": "899199"
  },
  {
    "text": "and we have CD and inside of the Dynamo DB table we'll overwrite that data and ab andc will be persisted inside of",
    "start": "899199",
    "end": "905920"
  },
  {
    "text": "Dynamo DB so in addition to being able to",
    "start": "905920",
    "end": "912399"
  },
  {
    "start": "909000",
    "end": "990000"
  },
  {
    "text": "change the save Behavior we can also change the read Behavior the uh the default behavior is",
    "start": "912399",
    "end": "920480"
  },
  {
    "text": "eventual uh and eventual consistency is hopefully a term that you're familiar with from distributed systems uh",
    "start": "920480",
    "end": "926480"
  },
  {
    "text": "basically just means that it takes some amount of time time for data to reach rest uh at all of the systems in the",
    "start": "926480",
    "end": "932720"
  },
  {
    "text": "excuse me of all of the nodes in the system Dynamo DB is no different uh so",
    "start": "932720",
    "end": "937800"
  },
  {
    "text": "in a case where you have uh ab and c and we save and clobber an existing uh",
    "start": "937800",
    "end": "945199"
  },
  {
    "text": "existing record and then we immediately re try to read that back out there's a potential that we could either get the",
    "start": "945199",
    "end": "951480"
  },
  {
    "text": "old data or the new data as its name suggests eventually we will get always",
    "start": "951480",
    "end": "957000"
  },
  {
    "text": "get the C the saved value the reason that we choose this as the default behavior is is actually less expensive",
    "start": "957000",
    "end": "963079"
  },
  {
    "text": "for your read through put but if you uh if your application demands uh AB consistent reads we support consistent",
    "start": "963079",
    "end": "970480"
  },
  {
    "text": "reads with the Dynamo DB mapper and what this means is that when we save and overwrite and clobber that data and then",
    "start": "970480",
    "end": "977120"
  },
  {
    "text": "read it immediately back out we're guaranteed to get that data we just saved it's important to note that those",
    "start": "977120",
    "end": "982560"
  },
  {
    "text": "consistent reads cost twice as much in as our eventual reads in terms of your provision throughput",
    "start": "982560",
    "end": "990240"
  },
  {
    "start": "990000",
    "end": "1024000"
  },
  {
    "text": "finally we can also override table names uh excuse me via the Dynamo DB mapper",
    "start": "990680",
    "end": "998319"
  },
  {
    "text": "config so if we want to have the same code but have a production and development environment we can use the",
    "start": "1000639",
    "end": "1008240"
  },
  {
    "text": "excuse me the table ride table override feature of the Dynamo DB mapper now all of these conv options can",
    "start": "1008240",
    "end": "1014959"
  },
  {
    "text": "be supplied at mapper creation time but they can also be applied on a per operation",
    "start": "1014959",
    "end": "1021600"
  },
  {
    "text": "basis so just to summarize the Dynamo DB mapper for Android works with Android 2.2 and above",
    "start": "1023559",
    "end": "1030240"
  },
  {
    "start": "1024000",
    "end": "1053000"
  },
  {
    "text": "API level 8 that's the same as our base Android SDK you annotate Plano Java objects or",
    "start": "1030240",
    "end": "1037199"
  },
  {
    "text": "pojos to map properties to attributes inside of Dynamo DV objects are explicitly saved and",
    "start": "1037199",
    "end": "1043520"
  },
  {
    "text": "loaded using the mapper and it's available as an additional jar but it's included in the download for the AWS SDK",
    "start": "1043520",
    "end": "1050480"
  },
  {
    "text": "for Android so we spent you know bit of time",
    "start": "1050480",
    "end": "1056640"
  },
  {
    "start": "1053000",
    "end": "1098000"
  },
  {
    "text": "talking about Android hopefully some people in the room are also iOS developers you might be asking what",
    "start": "1056640",
    "end": "1062520"
  },
  {
    "text": "about iOS well that's where the AWS persistence framework for core data",
    "start": "1062520",
    "end": "1068039"
  },
  {
    "text": "comes in uh this this is currently in beta but we're actively working on it and adding features and enhancements as",
    "start": "1068039",
    "end": "1074200"
  },
  {
    "text": "customers uh let us know about what they would like to see uh",
    "start": "1074200",
    "end": "1080720"
  },
  {
    "text": "uh and if you're not familiar with what core data is it's a a framework inside of the Apple ecosystem which allows for",
    "start": "1080720",
    "end": "1085880"
  },
  {
    "text": "entity relationship mapping and one of the nice features is it has a graphical layout tool for mapping to for creating",
    "start": "1085880",
    "end": "1092039"
  },
  {
    "text": "your ERS your ER diagrams which is an example of what you see on the screen",
    "start": "1092039",
    "end": "1097960"
  },
  {
    "start": "1098000",
    "end": "1382000"
  },
  {
    "text": "here so now what I'd like to do is break out to another demo",
    "start": "1098679",
    "end": "1104440"
  },
  {
    "text": "assuming I can typee my",
    "start": "1110320",
    "end": "1113240"
  },
  {
    "text": "password there we",
    "start": "1121240",
    "end": "1124559"
  },
  {
    "text": "go so once again this is an this is a sample application that's included with uh the Bas SDK so if you download the",
    "start": "1127400",
    "end": "1133640"
  },
  {
    "text": "AWS SDK for iOS today this is a sample that's included it's actually based on",
    "start": "1133640",
    "end": "1138799"
  },
  {
    "text": "Apple's own uh location sample which is a reference sample for core data so I'll",
    "start": "1138799",
    "end": "1144559"
  },
  {
    "text": "go ahead and start this up so we can see what what it looks like inside of our em our simulator and I've got already got a",
    "start": "1144559",
    "end": "1151520"
  },
  {
    "text": "location in here um so uh what we can do is we can click on",
    "start": "1151520",
    "end": "1157039"
  },
  {
    "text": "this button at the top and we can click on ADD and this uses the uh devices or the simulators GPS uh location services",
    "start": "1157039",
    "end": "1165280"
  },
  {
    "text": "to get the location and we can give this location a name so so we'll call this conference",
    "start": "1165280",
    "end": "1173480"
  },
  {
    "text": "room and it creates a a uh check-in excuse me it creates a",
    "start": "1173559",
    "end": "1178720"
  },
  {
    "text": "uh a location and it creates a check-in inside of that location and then I can add additional",
    "start": "1178720",
    "end": "1185520"
  },
  {
    "text": "check-ins at this location I can change the uh if I click",
    "start": "1185520",
    "end": "1191640"
  },
  {
    "text": "on the right thing I can change the ex the comment for an existing check-in",
    "start": "1191640",
    "end": "1199400"
  },
  {
    "text": "but if I go over to my AWS console and list the tables and go to this",
    "start": "1200440",
    "end": "1206480"
  },
  {
    "text": "location what should I I should see is only the first one that was there when I first launched the application I don't",
    "start": "1206480",
    "end": "1212400"
  },
  {
    "text": "see the second one I just created and that's because I haven't",
    "start": "1212400",
    "end": "1217880"
  },
  {
    "text": "gone back to our root page clicked on that button at the top again and click save when I do so I'll get a UI alert",
    "start": "1217880",
    "end": "1225640"
  },
  {
    "text": "dialogue saying that my changes have been successfully saved and if I switch back to our console and refresh we now",
    "start": "1225640",
    "end": "1232760"
  },
  {
    "text": "have our two locations and if I go to our check-ins table now I have three",
    "start": "1232760",
    "end": "1241400"
  },
  {
    "text": "check-ins so additionally we can uh as you might expect edit our list and",
    "start": "1242679",
    "end": "1248480"
  },
  {
    "text": "remove locations or remove check-ins oops",
    "start": "1248480",
    "end": "1256960"
  },
  {
    "text": "but none of these changes will persist until we go back to the route and once again",
    "start": "1260240",
    "end": "1265799"
  },
  {
    "text": "save so let's take a look at our application just a couple things that I want to highlight in",
    "start": "1267360",
    "end": "1272400"
  },
  {
    "text": "here um if you're if you've already used our AWS SDK for iOS this this framework",
    "start": "1272400",
    "end": "1278679"
  },
  {
    "text": "here should already look familiar to you it's the AWS iOS sdk. framework which is",
    "start": "1278679",
    "end": "1283880"
  },
  {
    "text": "our low-level service clients for all the services and then we have one addition framework here the AWS",
    "start": "1283880",
    "end": "1290120"
  },
  {
    "text": "persistence framework and this is all you need to add to an existing core data application to enable uh excuse me",
    "start": "1290120",
    "end": "1297720"
  },
  {
    "text": "enable core data on uh or Dynamo DB on",
    "start": "1297720",
    "end": "1303080"
  },
  {
    "text": "core data so by default core data uses a a local backend uh data store so what",
    "start": "1303080",
    "end": "1308720"
  },
  {
    "text": "we've done is enabled you to use Dynamo DB as an alternative backend",
    "start": "1308720",
    "end": "1315760"
  },
  {
    "text": "so if you take a look at our app delegate if you've ever used core data",
    "start": "1323000",
    "end": "1329159"
  },
  {
    "text": "before a lot of this app delegate code should could look familiar um we've",
    "start": "1329159",
    "end": "1334240"
  },
  {
    "text": "tried not to uh override any existing core data patterns so once you create a",
    "start": "1334240",
    "end": "1340159"
  },
  {
    "text": "new core data application you'll get a whole bunch of Boiler blate code for setting up the backend uh persistence",
    "start": "1340159",
    "end": "1345279"
  },
  {
    "text": "store and then that's all that's really necessary to enable the AWS persistence framework is this code here for creating",
    "start": "1345279",
    "end": "1353039"
  },
  {
    "text": "our mappings and creating an options dictionary and then setting our AWS persistance framework up",
    "start": "1353039",
    "end": "1361720"
  },
  {
    "text": "[Applause] there's my room okay so as I was mentioning um when",
    "start": "1377980",
    "end": "1385840"
  },
  {
    "text": "you create a new core data application inside of xcode Apple gives you everything's",
    "start": "1385840",
    "end": "1393880"
  },
  {
    "text": "necessary to use that local persistence store so all you have to do to then",
    "start": "1393880",
    "end": "1399960"
  },
  {
    "text": "enable the persistence framework for core data is to drop in our framework and add these two lines uh",
    "start": "1399960",
    "end": "1408960"
  },
  {
    "text": "and what these two lines do is register our backend data store so that second call has that options method which is",
    "start": "1408960",
    "end": "1415400"
  },
  {
    "text": "that big options dictionary that we were were looking at inside of our code and I'll go into what each of those options",
    "start": "1415400",
    "end": "1421320"
  },
  {
    "text": "in that dictionary actually do once you've actually set up the AWS",
    "start": "1421320",
    "end": "1428200"
  },
  {
    "text": "persistence framework you'll you'll just be using regular core data operations so",
    "start": "1428200",
    "end": "1433360"
  },
  {
    "text": "if you've used core data before this should already look familiar to you this is how we create a managed object inside",
    "start": "1433360",
    "end": "1440000"
  },
  {
    "text": "of core data we don't actually create an instance of our check-in object we",
    "start": "1440000",
    "end": "1445679"
  },
  {
    "text": "create a managed object and and cast that to our check-in but once we do that",
    "start": "1445679",
    "end": "1450840"
  },
  {
    "text": "then we get a a uh a check-in object that we can then set our properties on",
    "start": "1450840",
    "end": "1456440"
  },
  {
    "text": "and then once we have our check-ins we call Managed context save it's an",
    "start": "1456440",
    "end": "1461559"
  },
  {
    "text": "important distinction to make here is is that we're we're saving everything on the entire context we're not passing",
    "start": "1461559",
    "end": "1467360"
  },
  {
    "text": "individual objects like we were with the Android",
    "start": "1467360",
    "end": "1471919"
  },
  {
    "text": "mapper loading objects via core data is just done via an NS fetch",
    "start": "1473159",
    "end": "1478240"
  },
  {
    "text": "request um and again this is just basic core data we the what you see on the",
    "start": "1478240",
    "end": "1484080"
  },
  {
    "text": "screen here will load all of the entity the particular location entities so this",
    "start": "1484080",
    "end": "1489600"
  },
  {
    "text": "will do a scan across the entire Dynam DB table um you can",
    "start": "1489600",
    "end": "1494919"
  },
  {
    "text": "restrict the NS fetch requests with an NS predicate at the current time in our beta we are only supporting uh",
    "start": "1494919",
    "end": "1501960"
  },
  {
    "text": "predicates with our hash key the hash key attributes and currently right now we don't support uh range Keys uh with",
    "start": "1501960",
    "end": "1508799"
  },
  {
    "text": "the with the persistence framework so in addition to being able to save and load cord data also offers",
    "start": "1508799",
    "end": "1516480"
  },
  {
    "text": "um delete and refresh and so these do exactly what you would expect them to do deletes an object from core dat uh from",
    "start": "1516480",
    "end": "1523159"
  },
  {
    "text": "the core data persistence store or refreshes the data from the backend store and you'll see why um refreshing",
    "start": "1523159",
    "end": "1530600"
  },
  {
    "text": "will be important because core data laily loads every object so we can run into we can run into some conflicts um",
    "start": "1530600",
    "end": "1537919"
  },
  {
    "text": "and refreshing will often times help us out with that so now I'll jump into the options",
    "start": "1537919",
    "end": "1544600"
  },
  {
    "start": "1542000",
    "end": "1630000"
  },
  {
    "text": "uh the options dictionary that we were discussing earlier when we were setting up the",
    "start": "1544600",
    "end": "1549640"
  },
  {
    "text": "mapper first one is AWS persistence Dynamo DB table mapper and this is",
    "start": "1552120",
    "end": "1558360"
  },
  {
    "text": "itself is a dictionary and it's a dictionary of table names to entity",
    "start": "1558360",
    "end": "1563799"
  },
  {
    "text": "names so this Maps our Dynamo DB table to our to our individual entities in",
    "start": "1563799",
    "end": "1569200"
  },
  {
    "text": "core data so in this case we've mapped the AWS D locations table to the location",
    "start": "1569200",
    "end": "1577120"
  },
  {
    "text": "entity next we have the Dynamo DD hash key the AWS persistence Dynamo DB hash",
    "start": "1577559",
    "end": "1583240"
  },
  {
    "text": "key and this again is a a dictionary and this is our most important option so",
    "start": "1583240",
    "end": "1589000"
  },
  {
    "text": "this is how we actually specify let me actually go back one second sorry so uh",
    "start": "1589000",
    "end": "1594080"
  },
  {
    "text": "it's important to note here that we don't actually need to supply this uh so that uh much like the Dynamo DB mapper",
    "start": "1594080",
    "end": "1599360"
  },
  {
    "text": "for Android uh if we don't Supply this The Entity names will be used by",
    "start": "1599360",
    "end": "1604679"
  },
  {
    "text": "default so this is actually the most important uh option that we need here which is our Dynamo DB hash key so this",
    "start": "1604679",
    "end": "1610640"
  },
  {
    "text": "is how we tell the map the ads persistence framework what our index keys are for our",
    "start": "1610640",
    "end": "1616919"
  },
  {
    "text": "tables so this this is just another dictionary of hash key attribute to",
    "start": "1616919",
    "end": "1624039"
  },
  {
    "text": "entity name so our location ID is our hash key for the location",
    "start": "1624039",
    "end": "1629960"
  },
  {
    "start": "1630000",
    "end": "1669000"
  },
  {
    "text": "entity next we have the AWS persistence Dynamo DB version key and this is very",
    "start": "1630360",
    "end": "1635520"
  },
  {
    "text": "similar to the Dynamo DB version attribute annotation from the mapper and this is a dictionary of version",
    "start": "1635520",
    "end": "1641880"
  },
  {
    "text": "attribute to entity and just as a reminder what this Behavior actually does is gives us a version number of our",
    "start": "1641880",
    "end": "1649120"
  },
  {
    "text": "item inside of Dynamo DB so if I have version one and I save but I someone else has",
    "start": "1649120",
    "end": "1655200"
  },
  {
    "text": "versioned that object inside of Dynamo DB to version three then our save",
    "start": "1655200",
    "end": "1660440"
  },
  {
    "text": "doesn't complete but unlike the Dynamo DB mapper we actually have uh the option to control what actually",
    "start": "1660440",
    "end": "1668760"
  },
  {
    "text": "happens and the way that's actually accomplished is via the NS merge policy and this is another core data construct",
    "start": "1668760",
    "end": "1675679"
  },
  {
    "start": "1669000",
    "end": "1714000"
  },
  {
    "text": "this is not something that we've written this is something that's provided by Apple um there are a number of different",
    "start": "1675679",
    "end": "1680799"
  },
  {
    "text": "I believe five different merge policies at the current time uh the first one is the uh error merge policy which gives us",
    "start": "1680799",
    "end": "1687200"
  },
  {
    "text": "that same behavior as the uh Dynamo DB mapper so that we just error out and don't save but we also have the ability",
    "start": "1687200",
    "end": "1693960"
  },
  {
    "text": "to prefer local prefer remote or try to do a smart merge and this link here is",
    "start": "1693960",
    "end": "1700080"
  },
  {
    "text": "just a a link to the reference documentation for the NS merge Pol merge policy from",
    "start": "1700080",
    "end": "1707120"
  },
  {
    "text": "Apple so in addition to being able to resolve conflicts on Save we can also",
    "start": "1707120",
    "end": "1712360"
  },
  {
    "text": "resolve conflicts on load so I mentioned earlier that all objects in Dynamo excuse me in core data",
    "start": "1712360",
    "end": "1719200"
  },
  {
    "start": "1714000",
    "end": "1760000"
  },
  {
    "text": "are lazily loaded so there's a chance that we might have a reference to an object that's been deleted inside a",
    "start": "1719200",
    "end": "1725120"
  },
  {
    "text": "Dynamo DB so in that case when we load we'll",
    "start": "1725120",
    "end": "1730159"
  },
  {
    "text": "we'll get an error but what we can do is we can register for a notification via the NS",
    "start": "1730159",
    "end": "1736120"
  },
  {
    "text": "notification center inside of iOS for the AWS persistence Dynamo DB deleted",
    "start": "1736120",
    "end": "1741799"
  },
  {
    "text": "notification and so when we registered for this notification we fired in this case we can uh excuse me we can then",
    "start": "1741799",
    "end": "1750159"
  },
  {
    "text": "call a selector to then refresh the data or delete the object from our local",
    "start": "1750159",
    "end": "1755399"
  },
  {
    "text": "store and avoid um avoid the error",
    "start": "1755399",
    "end": "1760039"
  },
  {
    "text": "altogether next we have the AWS persistence Dynamo DB delegate option and this is another really important",
    "start": "1761080",
    "end": "1766960"
  },
  {
    "text": "option for for function of the AWS persistence framework unlike the Dynamo",
    "start": "1766960",
    "end": "1772480"
  },
  {
    "text": "DB mapper for Android which we provided a low-level client the AWS persistence",
    "start": "1772480",
    "end": "1777919"
  },
  {
    "text": "framework creates one for us and in order to do that it needs credentials so",
    "start": "1777919",
    "end": "1783320"
  },
  {
    "text": "we create a uh a instance or a implementation of the AWS persistence",
    "start": "1783320",
    "end": "1788919"
  },
  {
    "text": "Dynamo DB incremental store delegate protocol which has a credentials",
    "start": "1788919",
    "end": "1794120"
  },
  {
    "text": "selector which then provides credentials to the Dynamo to the the AWS persistence",
    "start": "1794120",
    "end": "1799919"
  },
  {
    "text": "framework and since we're most likely using temporary credentials inside of a mobile environment we also want to be",
    "start": "1799919",
    "end": "1805679"
  },
  {
    "text": "able to handle when our credentials expire or if they are invalidated for some reason so we have also uh have a",
    "start": "1805679",
    "end": "1812399"
  },
  {
    "text": "selector for handling authentication",
    "start": "1812399",
    "end": "1817080"
  },
  {
    "start": "1818000",
    "end": "1845000"
  },
  {
    "text": "failures so because the AWS persistence framework is creating a low-level client for us there are a number of options",
    "start": "1818399",
    "end": "1825080"
  },
  {
    "text": "that we don't have direct access to set and there are the end point the maximum number of retries timeouts Etc well we",
    "start": "1825080",
    "end": "1833200"
  },
  {
    "text": "can set them via these options you see on the screen here inside of when we create our options uh dictionary for the",
    "start": "1833200",
    "end": "1840880"
  },
  {
    "text": "D the AWS persistence",
    "start": "1840880",
    "end": "1844279"
  },
  {
    "start": "1845000",
    "end": "1897000"
  },
  {
    "text": "framework so just to summarize the ads persistence Frameworks with works with iOS 5.0 and above uh",
    "start": "1846600",
    "end": "1854880"
  },
  {
    "text": "this is slightly newer than uh the Bas SD which supports 43 and",
    "start": "1854880",
    "end": "1860320"
  },
  {
    "text": "above it uses all existing core data Technologies so this we've not reinvented the wheel here we've tried to",
    "start": "1860320",
    "end": "1866320"
  },
  {
    "text": "reuse everything that Apple's given us we support basic entity types which basically means numbers and strings uh",
    "start": "1866320",
    "end": "1873840"
  },
  {
    "text": "no complex types at this time and we support basic uh relationships so one to",
    "start": "1873840",
    "end": "1879000"
  },
  {
    "text": "one and one to many relationships right now the operations are applied on an",
    "start": "1879000",
    "end": "1884440"
  },
  {
    "text": "entire context not on individual objects and it's available as a a separate",
    "start": "1884440",
    "end": "1890120"
  },
  {
    "text": "framework but included inside of the AWS SDK for iOS",
    "start": "1890120",
    "end": "1896279"
  },
  {
    "start": "1897000",
    "end": "1998000"
  },
  {
    "text": "downloads so where do we go from here well as with all Amazon and AWS products",
    "start": "1898679",
    "end": "1904279"
  },
  {
    "text": "that's really up to the customer um so we always appreciate feedback on all of",
    "start": "1904279",
    "end": "1910919"
  },
  {
    "text": "our products uh so you can either do so via our fors which uh is forms. aws.amazon.com",
    "start": "1910919",
    "end": "1918120"
  },
  {
    "text": "but you can also uh post questions about this framework and also our sdks on stack Overflow uh AWS employees are now",
    "start": "1918120",
    "end": "1924880"
  },
  {
    "text": "monitoring the aw the Amazon web services uh tag on stack Overflow so you",
    "start": "1924880",
    "end": "1930120"
  },
  {
    "text": "can get answers from AWS employees and also the community um and our slide is not",
    "start": "1930120",
    "end": "1936600"
  },
  {
    "text": "updated um so apologies uh the GitHub links are incorrect on the slide unfortunately uh so the the correct U",
    "start": "1936600",
    "end": "1943519"
  },
  {
    "text": "URL is github.com AWS AWS SDK iOS um but if you just go to",
    "start": "1943519",
    "end": "1952120"
  },
  {
    "text": "github.com AWS that'll get you to all of the hosted",
    "start": "1952120",
    "end": "1957480"
  },
  {
    "text": "sdks so finally just some additional resources um even if you don't manag to",
    "start": "1959120",
    "end": "1964320"
  },
  {
    "text": "get the slides uh for the talk today if you just remember the the link at the top of the page aws.amazon.com",
    "start": "1964320",
    "end": "1971159"
  },
  {
    "text": "Mobile that is our mobile landing page that will get you to our SDK downloads",
    "start": "1971159",
    "end": "1976320"
  },
  {
    "text": "that'll get you to our articles and samples um and then if you do get if you",
    "start": "1976320",
    "end": "1982320"
  },
  {
    "text": "do download the uh the the slides uh these two uh articles here are direct links to the two samples uh with line",
    "start": "1982320",
    "end": "1989320"
  },
  {
    "text": "sort of line by line instructions on uh um how how the uh the mapper works and how the the sample",
    "start": "1989320",
    "end": "1997320"
  },
  {
    "start": "1998000",
    "end": "2022000"
  },
  {
    "text": "operates um so that's our talk for today appreciate you uh coming out and uh",
    "start": "1998639",
    "end": "2003679"
  },
  {
    "text": "listening to me talk about our a our Dynamo DB persistence framework s um at",
    "start": "2003679",
    "end": "2009000"
  },
  {
    "text": "this time um I would encourage you to fill out a feedback form let me know how",
    "start": "2009000",
    "end": "2014480"
  },
  {
    "text": "I did let us know how we did as a company so that we can improve the process for everybody um and at this",
    "start": "2014480",
    "end": "2019919"
  },
  {
    "text": "time I'll open the floor for questions and if",
    "start": "2019919",
    "end": "2024320"
  }
]