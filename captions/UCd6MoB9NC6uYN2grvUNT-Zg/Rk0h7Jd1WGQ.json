[
  {
    "text": "oh good afternoon collision coffee everybody ready for the",
    "start": "1650",
    "end": "8280"
  },
  {
    "text": "last talk of the day whoo yeah and twitch oh look at twitch thank you for",
    "start": "8280",
    "end": "15360"
  },
  {
    "text": "being with us we have a real treat we have my friend and yours",
    "start": "15360",
    "end": "20610"
  },
  {
    "text": "Randall hunt talking about how to choose the right databases but before I pass it over to him I want to show one just",
    "start": "20610",
    "end": "27150"
  },
  {
    "text": "Choice quote from twitch skull crusher for life says if there's any way to",
    "start": "27150",
    "end": "32689"
  },
  {
    "text": "record the larger screen there's a lot of downtime somebody later says skull",
    "start": "32690",
    "end": "38550"
  },
  {
    "text": "crusher for life has good ideas I love I love online anonymous usernames don't you okay Randall alright hello everybody",
    "start": "38550",
    "end": "47519"
  },
  {
    "text": "thank you so much for coming today we have a whole bunch of content to cover so I'm just gonna jump right in so why",
    "start": "47519",
    "end": "53730"
  },
  {
    "text": "do we use databases and I'm sorry for the people who are in the front who are being blinded by this but I want you to",
    "start": "53730",
    "end": "58739"
  },
  {
    "text": "think back to the original database the human brain a bunch of organisms come to come together muscles evolve things",
    "start": "58739",
    "end": "65518"
  },
  {
    "text": "happen and we start this lossy compression algorithm for knowledge that is like our central nervous system in",
    "start": "65519",
    "end": "71580"
  },
  {
    "text": "our brain it's it's a little availability because when your eyes are closed and you're asleep if you know you can't access anything it's low fidelity",
    "start": "71580",
    "end": "78780"
  },
  {
    "text": "because you don't have you know the greatest recall like I can't remember what I had for lunch yesterday or I can",
    "start": "78780",
    "end": "85950"
  },
  {
    "text": "but like most people can't and it's it's not good like at a replicating data like",
    "start": "85950",
    "end": "92160"
  },
  {
    "text": "the only way to replicate data is a very very slow protocol right like I have to tell you I have to teach you I have to say this thing and that's how the data",
    "start": "92160",
    "end": "98550"
  },
  {
    "text": "gets replicated to other brains so then the Mesopotamians they're like hey this kind of stinks let's do something better",
    "start": "98550",
    "end": "104820"
  },
  {
    "text": "and they start riding on these clay tablets and then the Phoenicians come along and the Egyptians and the Egyptians are like clay tablets suck",
    "start": "104820",
    "end": "110580"
  },
  {
    "text": "let's use papyrus and then Gutenberg makes printing press and then they",
    "start": "110580",
    "end": "115950"
  },
  {
    "text": "spread lots of dangerous ideas all around the world and everything is terrible and then 1970 happens and you know Larry",
    "start": "115950",
    "end": "123930"
  },
  {
    "text": "Ellison is like lol let's build a database and iBM is like let's build db2 and sequel server and all these other",
    "start": "123930",
    "end": "130229"
  },
  {
    "text": "things start happening and we come up with this idea of normal",
    "start": "130229",
    "end": "135690"
  },
  {
    "text": "form has anybody ever heard that term before normal form so if you haven't heard the term normal form it's",
    "start": "135690",
    "end": "140850"
  },
  {
    "text": "completely irrelevant in 2019 and you can totally forget it no what it is is a",
    "start": "140850",
    "end": "147150"
  },
  {
    "text": "way of optimizing the storage of data so traditional databases like the one over",
    "start": "147150",
    "end": "152700"
  },
  {
    "text": "here they are optimized for storing data in rows and columns so you have",
    "start": "152700",
    "end": "158870"
  },
  {
    "text": "attributes that are your columns anybody ever worked with Excel before pretty similar to that the problem that these",
    "start": "158870",
    "end": "167460"
  },
  {
    "text": "databases were originally trying to solve was that in 1970 a one megabyte",
    "start": "167460",
    "end": "172530"
  },
  {
    "text": "hard drive was the size of the stage it had to be pulled in with the truck and it also cost like a hundred million",
    "start": "172530",
    "end": "177600"
  },
  {
    "text": "dollars I'm making those numbers up but you know that ballpark and what happens",
    "start": "177600",
    "end": "182850"
  },
  {
    "text": "is you start using normal form to optimize the storage and not anything",
    "start": "182850",
    "end": "187980"
  },
  {
    "text": "else you're not optimizing for the access patterns you're not optimizing for any particular type of like user",
    "start": "187980",
    "end": "195660"
  },
  {
    "text": "friendly goal you're just optimizing for storage and that is the same technology that we are using in 2019 and that's",
    "start": "195660",
    "end": "201450"
  },
  {
    "text": "wrong that's bad we're not gonna do that anymore so access comes along lots of people would argue that's not a real",
    "start": "201450",
    "end": "207120"
  },
  {
    "text": "database my sequel Postgres the proliferation of open source and then the recession hits and nobody's doing anything I'm just kidding lots of fun",
    "start": "207120",
    "end": "213209"
  },
  {
    "text": "research happened during that time but then in around like 2008 to later you see this explosion of new databases DB",
    "start": "213209",
    "end": "219600"
  },
  {
    "text": "engines comm tracks 319 different database engines so this is tracking all the job post all of those Stack Overflow",
    "start": "219600",
    "end": "226200"
  },
  {
    "text": "questions all the common engines that are used and deployed around the world and you see this explosion primarily",
    "start": "226200",
    "end": "232560"
  },
  {
    "text": "because of the advent of the cloud so commodity hardware is now available really really quickly whereas previously",
    "start": "232560",
    "end": "239310"
  },
  {
    "text": "you know if you wanted to requisition Hardware for a database you'd have to wait four to ten weeks and convince your",
    "start": "239310",
    "end": "245280"
  },
  {
    "text": "CFO to--like blindly swipe the credit card for these giant servers and you'll",
    "start": "245280",
    "end": "250500"
  },
  {
    "text": "need to do that anymore now if you want a server you get it in like two minutes we're gonna talk about all these",
    "start": "250500",
    "end": "255720"
  },
  {
    "text": "different databases but let's break down the categories on the far left we have",
    "start": "255720",
    "end": "261269"
  },
  {
    "text": "relational this is the traditional kind of referential integrity third normal form representation of your data there are",
    "start": "261270",
    "end": "267880"
  },
  {
    "text": "lots of cool things that can happen here you have key value stores so key value stores some people would say Redis is a",
    "start": "267880",
    "end": "273700"
  },
  {
    "text": "key value store we're gonna actually treat Redis and memcache D as in-memory stores even though they are kind of key",
    "start": "273700",
    "end": "280000"
  },
  {
    "text": "value stores the key value stores that have persistence are things like dynamo DB and then we have document stores",
    "start": "280000",
    "end": "287140"
  },
  {
    "text": "these are things like MongoDB we have graft stores these are things like Titan DB and Amazon Neptune we have search",
    "start": "287140",
    "end": "294430"
  },
  {
    "text": "that's a very common category of like online application store elastic search",
    "start": "294430",
    "end": "299560"
  },
  {
    "text": "is like the the de-facto standard there we have time series databases and I'm gonna tell you about a new technology",
    "start": "299560",
    "end": "304630"
  },
  {
    "text": "that we have for time series databases that really kind of pushes the boundaries as opposed to the more",
    "start": "304630",
    "end": "310810"
  },
  {
    "text": "traditional representations and then we have ledger databases which are crazy cool and super useful for a couple of",
    "start": "310810",
    "end": "317380"
  },
  {
    "text": "different concepts the thing that I want you to take away from this presentation is that in 2019 you can have your",
    "start": "317380",
    "end": "326080"
  },
  {
    "text": "database as a micro service for many many years databases were very expensive and we treated them as with this one monolith",
    "start": "326080",
    "end": "331990"
  },
  {
    "text": "that we would all commit to and we would all share the same schema in the same structure but now the proliferation of",
    "start": "331990",
    "end": "338530"
  },
  {
    "text": "compute and storage and the low cost compute and storage that's available to us lets us treat the database itself as a",
    "start": "338530",
    "end": "344500"
  },
  {
    "text": "micro service and when you treat it as a micro service you can have the data not",
    "start": "344500",
    "end": "350290"
  },
  {
    "text": "in this like single canonical store that everyone has to access this one source of truth you can have it spread out to a",
    "start": "350290",
    "end": "355420"
  },
  {
    "text": "bunch of different stores and you can access it in whatever pattern best fits the need that you're trying to provide",
    "start": "355420",
    "end": "360460"
  },
  {
    "text": "to your downstream users so access pattern driven development and purpose-built databases are the key",
    "start": "360460",
    "end": "366220"
  },
  {
    "text": "terms that let you build really really dope applications that's a technical",
    "start": "366220",
    "end": "371830"
  },
  {
    "text": "term dope so what are the kind of AWS real offerings for these categories over",
    "start": "371830",
    "end": "378760"
  },
  {
    "text": "on the relational side we've got Amazon RDS relational database service very well named we have Amazon DynamoDB",
    "start": "378760",
    "end": "384250"
  },
  {
    "text": "not as well named we have Amazon document DB with mommy-to-be 3.6 compatibility we have Amazon ElastiCache",
    "start": "384250",
    "end": "389950"
  },
  {
    "text": "with has Redis and memcache D managed via Amazon Neptune we have Amazon Elastic search we had",
    "start": "389950",
    "end": "395170"
  },
  {
    "text": "Amazon time stream and Amazon quantum ledger database you can tell it's an Amazon product cuz we put our name in front of it already lots of amounts of customers",
    "start": "395170",
    "end": "402250"
  },
  {
    "text": "this is an eye chart of all the different customers we're going to skip over that when I go out and talk to",
    "start": "402250",
    "end": "409330"
  },
  {
    "text": "customers I see kind of two main areas where people are migrating the databases into the cloud and migration is an",
    "start": "409330",
    "end": "414880"
  },
  {
    "text": "interesting story sometimes people are doing these lift and shift migrations right where they are doing a dns code",
    "start": "414880",
    "end": "421000"
  },
  {
    "text": "over at some point a bog-standard like same schema same everything moving straight from like Microsoft sequel",
    "start": "421000",
    "end": "427270"
  },
  {
    "text": "server to Microsoft sequel server from on-prem to cloud but a lot of times",
    "start": "427270",
    "end": "432840"
  },
  {
    "text": "you're doing new applications you're doing green field stuff so what will happen is larger customers will kind of",
    "start": "432840",
    "end": "440170"
  },
  {
    "text": "come in and do these lift and shift migrations but as they are able to split off these monolithic apps into a couple",
    "start": "440170",
    "end": "447250"
  },
  {
    "text": "of different micro services some of those micro services will migrate to new data stores that support the access",
    "start": "447250",
    "end": "452740"
  },
  {
    "text": "patterns that they need and let them scale independently which is a pretty kind of cool concept and it's a good",
    "start": "452740",
    "end": "458170"
  },
  {
    "text": "workflow for for building and training for building in the adding new features",
    "start": "458170",
    "end": "464680"
  },
  {
    "text": "to these applications so we have this thing called DMS database migration service what it'll do is it'll spin up a",
    "start": "464680",
    "end": "470830"
  },
  {
    "text": "managed compute node that gets added to your existing cluster whether it's on pram or somewhere else all you need is",
    "start": "470830",
    "end": "477220"
  },
  {
    "text": "like a JDBC connection string or a Cassandra Cassandra connection string among edu up connection URI if you pass",
    "start": "477220",
    "end": "482680"
  },
  {
    "text": "that in it spins up a node that acts as a replica for that particular database",
    "start": "482680",
    "end": "488410"
  },
  {
    "text": "instance and it will do the the cloning of the data pull it all over into the",
    "start": "488410",
    "end": "494290"
  },
  {
    "text": "AWS version and it can even do schema conversions so we have something called the SCT the schema conversion tool and",
    "start": "494290",
    "end": "500140"
  },
  {
    "text": "what that does is it will allow you to translate from like a post grass to a my sequel from a cassandra to a post grass",
    "start": "500140",
    "end": "505450"
  },
  {
    "text": "from cassandra so my sequel from Cassandra to DynamoDB from MongoDB to",
    "start": "505450",
    "end": "514659"
  },
  {
    "text": "DynamoDB from from my sequel to dynamo did you get the point right it does these conversions and it does it in an",
    "start": "514660",
    "end": "520479"
  },
  {
    "text": "automated fashion a couple things that won't support or things like stored procedures or specialized indexes you know Postgres has a couple really cool",
    "start": "520479",
    "end": "526330"
  },
  {
    "text": "things so it won't be able to do all that especially if the other database doesn't work but it allows you to do these migrations with literally zero",
    "start": "526330",
    "end": "531940"
  },
  {
    "text": "downtime because you're just adding another replica and then you're switching one replica over to the master and you're saying okay the",
    "start": "531940",
    "end": "538120"
  },
  {
    "text": "AWS node is my master now you can shut down your on-prem one and all is good in the world so why do we have all of these",
    "start": "538120",
    "end": "545620"
  },
  {
    "text": "databases in 2019 we have different applications how many people were using",
    "start": "545620",
    "end": "550870"
  },
  {
    "text": "the internet in 1975 1985 1995 2005",
    "start": "550870",
    "end": "561420"
  },
  {
    "text": "everybody 2015 yeah so we we have this",
    "start": "561420",
    "end": "566769"
  },
  {
    "text": "giant proliferation of data in 1991 humanity produced more data so excited",
    "start": "566769",
    "end": "573220"
  },
  {
    "text": "in 2001 humanity produced more data every single day then all of humanity",
    "start": "573220",
    "end": "578740"
  },
  {
    "text": "had ever produced in the cumulative history of time up until 1991 that is",
    "start": "578740",
    "end": "584260"
  },
  {
    "text": "straight crazy so we are generating today exabytes of data per day across everything it's mostly Zynga post and",
    "start": "584260",
    "end": "590290"
  },
  {
    "text": "Facebook posts but you know pictures of my cat but you get the point it's it's a ton of data that wasn't around before",
    "start": "590290",
    "end": "595389"
  },
  {
    "text": "and that's why we need purpose-built databases now we're dealing with millions of users hundreds of millions of users",
    "start": "595389",
    "end": "601360"
  },
  {
    "text": "zooming to use dual link lingo to learn a new language recently duolingo is an app they use the Amazon Pali to",
    "start": "601360",
    "end": "607870"
  },
  {
    "text": "synthesize the voice but they also use the Amazon DynamoDB they have 300 million monthly active users 300 million",
    "start": "607870",
    "end": "614589"
  },
  {
    "text": "users and scaling a traditional relational database to 300 million users as like a two-person ops team not fun",
    "start": "614589",
    "end": "622320"
  },
  {
    "text": "scaling dynamodb is like hey throw a more data at me and then it just comes",
    "start": "622320",
    "end": "627519"
  },
  {
    "text": "in and you do it we have customers like snapchat that are using dynamodb to store their stories",
    "start": "627519",
    "end": "633399"
  },
  {
    "text": "feature anybody who snapchat okay I don't really use it but my niece does and apparently there's this like crazy",
    "start": "633399",
    "end": "639819"
  },
  {
    "text": "gender swapping face filter right now that's like all the craze and it's all over Facebook but these stories what",
    "start": "639819",
    "end": "646000"
  },
  {
    "text": "they do is they're ephemeral they last for two hours or for 24 hours and then they get aged out so this is literally",
    "start": "646000",
    "end": "652630"
  },
  {
    "text": "terabytes worth of data or even exabytes of data and think about New Year's Eve or a sporting event like the World Cup",
    "start": "652630",
    "end": "659190"
  },
  {
    "text": "you're talking billions of events per second billions like way too much",
    "start": "659190",
    "end": "666880"
  },
  {
    "text": "for a traditional system to handle but for the cloud that's an API endpoint that you're hitting and you don't have",
    "start": "666880",
    "end": "672430"
  },
  {
    "text": "to care about any of that you just have to blindly swipe your credit card and now we're talking about performance",
    "start": "672430",
    "end": "678190"
  },
  {
    "text": "going from milliseconds into microseconds you know we we want our data we we did a study a couple years",
    "start": "678190",
    "end": "684220"
  },
  {
    "text": "ago for the amazon.com retail site and we found that a latency of as much as 400 milliseconds can drop your sales by",
    "start": "684220",
    "end": "690100"
  },
  {
    "text": "4% so 400 milliseconds can drop your sales by 4% so people want stuff faster",
    "start": "690100",
    "end": "696250"
  },
  {
    "text": "how many people navigate to a new tab while we're waiting for one to load yeah so the purposes of twitch that was 100%",
    "start": "696250",
    "end": "702760"
  },
  {
    "text": "of the audience everyone agrees no one has patience we all have a TD so then we have the ability of scale up we always",
    "start": "702760",
    "end": "710650"
  },
  {
    "text": "have that we can add more stuff to the server we can add more storage we can add more CPU we can add more RAM you know we have instances now that have",
    "start": "710650",
    "end": "716650"
  },
  {
    "text": "couple terabytes of RAM 12 terabytes of RAM but you you also want to be able to scale out you want to be able to add",
    "start": "716650",
    "end": "722680"
  },
  {
    "text": "more notes and then you want to be able to access your data anywhere anytime so you want data as close to your users as",
    "start": "722680",
    "end": "728500"
  },
  {
    "text": "you possibly can get it so every single region we have 21 regions with 64 availability zones you can put a",
    "start": "728500",
    "end": "733750"
  },
  {
    "text": "database and every single one of those and have global multi-master so that is Aurora that's the storage engine I'll talk",
    "start": "733750",
    "end": "738760"
  },
  {
    "text": "about later so Airbnb they use three different databases and they use more than just this but I'm going to talk",
    "start": "738760",
    "end": "744760"
  },
  {
    "text": "about the three that they use they are like born and bred in the cloud so they started on AWS and they remain on a",
    "start": "744760",
    "end": "750040"
  },
  {
    "text": "table yes today and they're their usage has grown as their company has grown and they use dynamodb to manage a lot of",
    "start": "750040",
    "end": "755920"
  },
  {
    "text": "their their lookups and their personalized searches they use ElastiCache to do some of the rendering",
    "start": "755920",
    "end": "762340"
  },
  {
    "text": "so if anybody has looked at Airbnb recently it's this kind of react app or I don't remember if it's react but it's",
    "start": "762340",
    "end": "767620"
  },
  {
    "text": "a static webpage but they have a lot of like API requests for searches and and like history that are coming in and all",
    "start": "767620",
    "end": "773650"
  },
  {
    "text": "of that is stored in ElastiCache in a read a server then you have relational data stores this is the referential",
    "start": "773650",
    "end": "779950"
  },
  {
    "text": "integrity stuff the the transactions the user you know is booking on this date",
    "start": "779950",
    "end": "785380"
  },
  {
    "text": "confirmed and they do that and RDS one of the interesting things they actually thinking about moving all of that into",
    "start": "785380",
    "end": "791050"
  },
  {
    "text": "dynamo D because DynamoDB supports transactions now duolingo as I said 300 million users they use DynamoDB they use",
    "start": "791050",
    "end": "797830"
  },
  {
    "text": "Aurora they use elastic cache lots and lots of cool things okay that's",
    "start": "797830",
    "end": "803630"
  },
  {
    "text": "the core intro now we're gonna dive deep on each one of these categories everybody excited for that it's gonna be",
    "start": "803630",
    "end": "810080"
  },
  {
    "text": "good fun alright so traditional sequel is a tcp based wire protocol use a JDBC connection string it has very very",
    "start": "810080",
    "end": "816320"
  },
  {
    "text": "simple kind of inch you know this this is it it's like insert into table one values I get like nightmarish flashbacks",
    "start": "816320",
    "end": "822860"
  },
  {
    "text": "whenever I see this sort of stuff because I haven't had to write sequel in a long time and you know you can scale up with individual instances like I said",
    "start": "822860",
    "end": "829430"
  },
  {
    "text": "you can add more RAM you can add more compute you can scale out with read replicas but you're limited in the number of read replicas that you can",
    "start": "829430",
    "end": "834770"
  },
  {
    "text": "support right because because of the consistency that my sequel is trying to guarantee you know you want your replica",
    "start": "834770",
    "end": "840170"
  },
  {
    "text": "lag to be very small so the more replicas you add the the harder that replica lag gets to manage so we support",
    "start": "840170",
    "end": "845360"
  },
  {
    "text": "scaling out to I think 15 read replicas on Aurora and that's kind of how you",
    "start": "845360",
    "end": "850400"
  },
  {
    "text": "scale your your read wear clothes but to scale your write workload your only real option with traditional sequel is to",
    "start": "850400",
    "end": "855740"
  },
  {
    "text": "like scale up and and then like people will say oh I can do application level sharding I can throw like PG bounce in",
    "start": "855740",
    "end": "862250"
  },
  {
    "text": "front of things and I can redirect things different nodes but if you've ever had to actually manage that in",
    "start": "862250",
    "end": "867440"
  },
  {
    "text": "production it sucks and you don't want to do it so when you get to the point where you have to shard and partition your data you're gonna have a bad time",
    "start": "867440",
    "end": "874640"
  },
  {
    "text": "and then you have joins which are really just a Venn diagram so this is what it",
    "start": "874640",
    "end": "880790"
  },
  {
    "text": "would look like if you were to model a hospital right you could have patients you would have doctors you would have the hospitals you",
    "start": "880790",
    "end": "886520"
  },
  {
    "text": "would have the treatments you would have the visit and then you'd have these giant kind of views of all of that data",
    "start": "886520",
    "end": "892660"
  },
  {
    "text": "summarized and constrained by these foreign key constraints so wherever you see these dots these stars those are",
    "start": "892660",
    "end": "899240"
  },
  {
    "text": "constraints that are locking that table onto another table and when you're you know making edits to these table it has",
    "start": "899240",
    "end": "905360"
  },
  {
    "text": "to acquire certain right locks or it has to check for different kind of things and this can be slow and it can be",
    "start": "905360",
    "end": "910610"
  },
  {
    "text": "cumbersome to write some of these these queries that go and touch all these different models so what people do is they build out these um you know this is",
    "start": "910610",
    "end": "919250"
  },
  {
    "text": "not this is a really straightforward query that all it's doing is like counting the number of uh I guess doctor",
    "start": "919250",
    "end": "925850"
  },
  {
    "text": "visits somebody had in this is not trivial to write so what",
    "start": "925850",
    "end": "931330"
  },
  {
    "text": "people do instead is they write ORM object relational mapper z' and we'll talk more about those later so what is",
    "start": "931330",
    "end": "937960"
  },
  {
    "text": "RDS do RDS is the easy scalable secure",
    "start": "937960",
    "end": "943260"
  },
  {
    "text": "fun great managed already managed post grass management ETA managed Oracle",
    "start": "943260",
    "end": "949600"
  },
  {
    "text": "managed Microsoft sequel managed post grass you get it a couple of cool",
    "start": "949600",
    "end": "955300"
  },
  {
    "text": "features that I want to point out you can get multiple easy availability so easy our availability zones quick",
    "start": "955300",
    "end": "961510"
  },
  {
    "text": "breakdown of our regional topology so in AWS we have regions regions are",
    "start": "961510",
    "end": "967860"
  },
  {
    "text": "geographically isolated pieces so we have 21 of those currently and we're adding more all the time and these have say a couple of",
    "start": "967860",
    "end": "976720"
  },
  {
    "text": "availability zones within them three or more so within those availability zones those actually are typically multiple",
    "start": "976720",
    "end": "983320"
  },
  {
    "text": "data centers so when we say region think availability zones which are the",
    "start": "983320",
    "end": "988450"
  },
  {
    "text": "availability model of an individual region and then when you think of an availability zone think of multiple data centers connected by a 100 gig fiber so",
    "start": "988450",
    "end": "996970"
  },
  {
    "text": "2 inch conduit fiber we actually you know innovated every level of the stack so we have you know it's like 6000 plus",
    "start": "996970",
    "end": "1004080"
  },
  {
    "text": "fiber pairs packed into this 1/2 inch conduit we can do terabits of throughput between these data centers it's really",
    "start": "1004080",
    "end": "1010200"
  },
  {
    "text": "really cool powerful stuff and that's only the beginning we're always gonna get better at that ok and then RDS",
    "start": "1010200",
    "end": "1017400"
  },
  {
    "text": "turning on that multi a-z that high availability thing where you want to have a 1 replicas in one availability",
    "start": "1017400",
    "end": "1023340"
  },
  {
    "text": "zone and one replicas in another availability zone that used to be something where you would have to go and call up two different coalos they would",
    "start": "1023340",
    "end": "1029280"
  },
  {
    "text": "have to be peered they would have to have some fiber wave between them and you'd say ok hey you two coalos I want",
    "start": "1029280",
    "end": "1034350"
  },
  {
    "text": "to spin up one replica said over here I want to spin up one replica set over here and I want to you know join between",
    "start": "1034350",
    "end": "1040020"
  },
  {
    "text": "all of these non-trivial thing to set up and if anything goes wrong you're dealing typically with a couple of",
    "start": "1040020",
    "end": "1045630"
  },
  {
    "text": "different vendors in AWS if you want to do that it's a checkbox which i think is pretty",
    "start": "1045630",
    "end": "1051000"
  },
  {
    "text": "cool and if you want to scale automatically up and down we have something called a TBS application auto scaling which is a combination of all of",
    "start": "1051000",
    "end": "1057060"
  },
  {
    "text": "the different auto scaling features that we have across ec2 and cloud watch and DynamoDB and and all this and you can measure the",
    "start": "1057060",
    "end": "1063390"
  },
  {
    "text": "incoming network throughput you can measure the incoming compute you can make a metric on basically any of the values that are coming out of RDS and",
    "start": "1063390",
    "end": "1070500"
  },
  {
    "text": "say hey when one of these values goes over this mount I want scale up and I want to add another Reid replica and we have service",
    "start": "1070500",
    "end": "1076530"
  },
  {
    "text": "discovery and all that good stuff so it will auto discover those nodes all the good things okay so traditional",
    "start": "1076530",
    "end": "1084420"
  },
  {
    "text": "databases are great but they've been around since 1970 so back in 2014 a bunch of really smart",
    "start": "1084420",
    "end": "1089880"
  },
  {
    "text": "people at Amazon got around and they were like hey let's reimagine the database for the cloud and that's kind",
    "start": "1089880",
    "end": "1095310"
  },
  {
    "text": "of how Amazon aurora was born and I if you if you just want to like explore a couple of cool techniques and tools go",
    "start": "1095310",
    "end": "1102840"
  },
  {
    "text": "check out the that was my the Canadian came out a little bit there go check out",
    "start": "1102840",
    "end": "1109130"
  },
  {
    "text": "sorry it's rubbing off on me it's a wonderful country go check out the Aurora paper it is fantastic and there",
    "start": "1109130",
    "end": "1116610"
  },
  {
    "text": "are a couple different ones now and I think there are four different Aurora papers that you can read and they talk about the underlying data technology",
    "start": "1116610",
    "end": "1122940"
  },
  {
    "text": "that we use in this Aurora storage engine so what is the Aurora storage engine it's a my sequel and PostgreSQL",
    "start": "1122940",
    "end": "1128160"
  },
  {
    "text": "compatible database engine that's built cloud native so it's reimagining these",
    "start": "1128160",
    "end": "1135780"
  },
  {
    "text": "databases as if they were always born and bred in the cloud so what we do",
    "start": "1135780",
    "end": "1141660"
  },
  {
    "text": "there is we separate the compute layer from the storage layer so we because we",
    "start": "1141660",
    "end": "1147090"
  },
  {
    "text": "control all the underlying hardware and we control all of the the the networks and the partitioning and all that we are",
    "start": "1147090",
    "end": "1152880"
  },
  {
    "text": "able to put this giant shared storage layer that all these safe and compute nodes can talk to you this lets us do a",
    "start": "1152880",
    "end": "1158400"
  },
  {
    "text": "lot of really fun things so how many people have been working on relational database and you needed a copy of production data that ever happened for",
    "start": "1158400",
    "end": "1164520"
  },
  {
    "text": "twitch this is like 100% of the audience everyone's always done this it's great what will happen is let's say you have",
    "start": "1164520",
    "end": "1171270"
  },
  {
    "text": "you know 60 gigs that's your production data and you want to like download all that and then you",
    "start": "1171270",
    "end": "1176520"
  },
  {
    "text": "got to spin it up you got a test you got a test the migration you know maybe your people write migrations for Ruby on",
    "start": "1176520",
    "end": "1182040"
  },
  {
    "text": "Rails apps where they do it in Django they use South and they use all of these kind of migration scripts to like alter",
    "start": "1182040",
    "end": "1187110"
  },
  {
    "text": "a column or add a new foreign key constraint and you know you are ensuring you index doing that in Aurora first of",
    "start": "1187110",
    "end": "1194910"
  },
  {
    "text": "all we support something fast DDL so if you wanted to alter a column in a traditional relational store",
    "start": "1194910",
    "end": "1200039"
  },
  {
    "text": "like postcards for my sequel and you call like alter column you know change this from an integer into a you know a",
    "start": "1200039",
    "end": "1206309"
  },
  {
    "text": "big int or change this from an integer to a decimal that can take 17 hours on like a terabyte of data to do that in",
    "start": "1206309",
    "end": "1213360"
  },
  {
    "text": "royal would be like 14 seconds so it's a it's several orders of magnitude faster because what we do is we're able to push",
    "start": "1213360",
    "end": "1219659"
  },
  {
    "text": "most of those queries down to the underlying storage layer on top of that if you needed to get that dev snapshot",
    "start": "1219659",
    "end": "1224850"
  },
  {
    "text": "all we're doing is we're moving a pointer that points at that you know that all that data that's stored in your",
    "start": "1224850",
    "end": "1230789"
  },
  {
    "text": "production we just create a pointer to that shared storage layer and we say hey fork off from here and this is now the",
    "start": "1230789",
    "end": "1236400"
  },
  {
    "text": "dev and we don't have to the cloning we can clone a database in minutes whereas",
    "start": "1236400",
    "end": "1241650"
  },
  {
    "text": "otherwise you know copying 60 terabytes or whatever would take forever so arora",
    "start": "1241650",
    "end": "1246710"
  },
  {
    "text": "extremely extremely scalable way more than the the typical performance of Postgres or my sequel very available",
    "start": "1246710",
    "end": "1253620"
  },
  {
    "text": "very durable and in fact one of the things I want to talk about is that shared storage layer and the durability that comes with it because we split the",
    "start": "1253620",
    "end": "1260820"
  },
  {
    "text": "data into six different copies and small partitions we send it all out to these",
    "start": "1260820",
    "end": "1266220"
  },
  {
    "text": "different availability zones so each availability zone has at least two copies of your data and that protects",
    "start": "1266220",
    "end": "1273090"
  },
  {
    "text": "you against these n plus 1 failures so let's say we had a hole availability zone go down we would actually be able to recover your data even if like there",
    "start": "1273090",
    "end": "1280320"
  },
  {
    "text": "was one other underlying failure right like let's say one of one hole availability zone goes down and then one",
    "start": "1280320",
    "end": "1285330"
  },
  {
    "text": "rack dies because the data is copied in two different places you know you get a lot of really good kind of performance",
    "start": "1285330",
    "end": "1291450"
  },
  {
    "text": "guarantees it's one of the fastest growing services that we have at AWS we have people like the United Nations",
    "start": "1291450",
    "end": "1297510"
  },
  {
    "text": "BMC Amazon Verizon Wireless uses it I don't know if anybody here is a Verizon Wireless customer cuz we're in Canada",
    "start": "1297510",
    "end": "1304169"
  },
  {
    "text": "but Verizon got better in my house recently so I'm sure it's entirely due",
    "start": "1304169",
    "end": "1310289"
  },
  {
    "text": "to Aurora alright so those are relational data stories well how about",
    "start": "1310289",
    "end": "1316409"
  },
  {
    "text": "no sequel I don't like the term non-relational sometimes people will refer to no sequel databases is",
    "start": "1316409",
    "end": "1322080"
  },
  {
    "text": "non-relational databases I don't think that's right because you still have relations in the data so no sequel data",
    "start": "1322080",
    "end": "1328679"
  },
  {
    "text": "stored taking a different approach to reimagining databases in the cloud",
    "start": "1328679",
    "end": "1333719"
  },
  {
    "text": "instead of focusing on like separation of storage and compute there they're",
    "start": "1333719",
    "end": "1339089"
  },
  {
    "text": "letting go of some of the constraints that are for enforced by so I think to",
    "start": "1339089",
    "end": "1345059"
  },
  {
    "text": "my night oh they're letting go of some of the constraints that are enforced by traditional relational databases and the",
    "start": "1345059",
    "end": "1350879"
  },
  {
    "text": "reason they do that is when you let go of some of those constraints you get a lot easier to scale out because you're",
    "start": "1350879",
    "end": "1356940"
  },
  {
    "text": "not needing to you can rely on eventual consistency across the nodes so sequel optimized for storage built in the 1970s",
    "start": "1356940",
    "end": "1363539"
  },
  {
    "text": "not like the most modern of languages normalized supports ad hoc queries can",
    "start": "1363539",
    "end": "1368879"
  },
  {
    "text": "scale vertically good for lap workloads no sequel is you know these are these",
    "start": "1368879",
    "end": "1377669"
  },
  {
    "text": "are kind of outdated because a lot of no sequel stories will now support aggregation framework still support all",
    "start": "1377669",
    "end": "1383369"
  },
  {
    "text": "kinds of different queries and it's it's a little more nuanced than just you know use one or the other so when we talk",
    "start": "1383369",
    "end": "1392099"
  },
  {
    "text": "about a key-value datastore like DynamoDB what we're doing is we have simple key value pairs that are going to",
    "start": "1392099",
    "end": "1398399"
  },
  {
    "text": "be our partition keys that's gonna say we're in the storage layer does this piece of information live we're gonna",
    "start": "1398399",
    "end": "1404339"
  },
  {
    "text": "copy it to a couple different partitions and then we're gonna be able to deliver a lot of performance so long as we don't",
    "start": "1404339",
    "end": "1409829"
  },
  {
    "text": "have hot partitions right like if we have a good partition key we can go out and we can say hey I want you to spread",
    "start": "1409829",
    "end": "1416519"
  },
  {
    "text": "this across uniformly across as many nodes as you can but if we don't then",
    "start": "1416519",
    "end": "1421769"
  },
  {
    "text": "we're kind of screwed and we just have one node that's responding to everything so this is what the attributes might",
    "start": "1421769",
    "end": "1428309"
  },
  {
    "text": "look like you would have a primary key which would be a combo of like your gamertag and then the the type of",
    "start": "1428309",
    "end": "1434609"
  },
  {
    "text": "information that you wanted and there are a couple different ways of doing this you can actually make the partition key like gamertag period and then the",
    "start": "1434609",
    "end": "1443399"
  },
  {
    "text": "type and that can be one one key or you could have a primary key and a short key and you're able to do table scans you're",
    "start": "1443399",
    "end": "1451440"
  },
  {
    "text": "able to do individual gifts and you can get different attributes based on those sub queries so dynamodb really really",
    "start": "1451440",
    "end": "1458669"
  },
  {
    "text": "interesting kind of approach and i've talked about this yesterday in machine-learning api's the advantage of",
    "start": "1458669",
    "end": "1465730"
  },
  {
    "text": "an API layer to access a database is not always for you don't always realize it",
    "start": "1465730",
    "end": "1472870"
  },
  {
    "text": "right away so we've reduced the prices of dynamodb several times so we've",
    "start": "1472870",
    "end": "1478390"
  },
  {
    "text": "removed entirely the cost of global tables so global tables are our global",
    "start": "1478390",
    "end": "1483760"
  },
  {
    "text": "multi master tables that you can spin up and rather than have the change streams",
    "start": "1483760",
    "end": "1490330"
  },
  {
    "text": "for those tables be charged we just remove that charge and in terms of improving the performance you know over",
    "start": "1490330",
    "end": "1497020"
  },
  {
    "text": "the last twenty four months we've completely rewritten DynamoDB on the back end and no one's noticed because they're still accessing it through the",
    "start": "1497020",
    "end": "1503140"
  },
  {
    "text": "same API layer so we can drastically improve the performance pass those savings on to the customer without the",
    "start": "1503140",
    "end": "1509140"
  },
  {
    "text": "customer ever having to change a single line of code which is an extremely valuable experience and that's why I'm a",
    "start": "1509140",
    "end": "1514240"
  },
  {
    "text": "big fan of like having these API is kind of a proxy layer in front of the service and I think we're gonna get even better",
    "start": "1514240",
    "end": "1520540"
  },
  {
    "text": "at that as time goes on but what dynamodb does it's consistent single-digit millisecond response times at any scale with virtually unlimited",
    "start": "1520540",
    "end": "1526930"
  },
  {
    "text": "throughput like I said snapchat uses it imagine New Year's Eve you have billions of transactions happening there",
    "start": "1526930",
    "end": "1533260"
  },
  {
    "text": "companies like FINRA there are other companies that use this at massive massive scale if you've used the",
    "start": "1533260",
    "end": "1538990"
  },
  {
    "text": "internet recently you've probably touched something that is using dynamodb it's serverless which means you're not",
    "start": "1538990",
    "end": "1544030"
  },
  {
    "text": "managing any of the underlying infrastructure you are not managing the the nodes you're not managing you know",
    "start": "1544030",
    "end": "1549250"
  },
  {
    "text": "primary the replicas all this other stuff it's just you access it through an API you're not having to manage the read",
    "start": "1549250",
    "end": "1556330"
  },
  {
    "text": "capacity or the right capacity unless you want to you can scale those independently of each other so you can scale the read capacity all the way up",
    "start": "1556330",
    "end": "1562480"
  },
  {
    "text": "if you're doing lots of reads and the right capacity very low it's great for an analytics table if you want to pull stuff in if you have something called",
    "start": "1562480",
    "end": "1568750"
  },
  {
    "text": "glue and glue will go and like pull the whole dynamodb table in you can run some transform on it and you can export it",
    "start": "1568750",
    "end": "1574360"
  },
  {
    "text": "out to s3 you can do whatever you want there's also auto scaling for the for",
    "start": "1574360",
    "end": "1580480"
  },
  {
    "text": "the the database itself so you can say I want you to auto scale my read capacity am i write capacity for me and it will",
    "start": "1580480",
    "end": "1587350"
  },
  {
    "text": "just read the metrics of the incoming database and then make changes over time the other thing you can do is say",
    "start": "1587350",
    "end": "1592960"
  },
  {
    "text": "actually I don't want to have to deal with managing capacity at all and I just want to paper request",
    "start": "1592960",
    "end": "1598210"
  },
  {
    "text": "so we have a paper request model as well so what does this look like you've",
    "start": "1598210",
    "end": "1603880"
  },
  {
    "text": "probably seen tables before tables are we have items items have attributes one",
    "start": "1603880",
    "end": "1609790"
  },
  {
    "text": "of those attributes is the partition key occasionally one of those attributes is a sort key so the store key is optional you access the items by creating a query",
    "start": "1609790",
    "end": "1617440"
  },
  {
    "text": "on the partition key and the sort key if it's there and the sort key enables you to do things like begins with between",
    "start": "1617440",
    "end": "1623230"
  },
  {
    "text": "contains and sorted all that good stuff and then the attributes you'll notice are sparse so not every column needs to",
    "start": "1623230",
    "end": "1630010"
  },
  {
    "text": "be filled so I can you know have things that don't exist in some tables and you",
    "start": "1630010",
    "end": "1636340"
  },
  {
    "text": "know a lot of applications you really only need one table because you can have completely different partition keys that",
    "start": "1636340",
    "end": "1642520"
  },
  {
    "text": "are serving totally different needs so you can keep everything in the one table if you really want to you don't always",
    "start": "1642520",
    "end": "1649570"
  },
  {
    "text": "have to do that though so how does it work you connect over HTTP you have global secondary indexes you have local secondary indexes local secondary",
    "start": "1649570",
    "end": "1655240"
  },
  {
    "text": "indexes are a very powerful feature that can let you get pardon me slightly",
    "start": "1655240",
    "end": "1660730"
  },
  {
    "text": "faster queries it's actually a another view of the table so you can like have",
    "start": "1660730",
    "end": "1665890"
  },
  {
    "text": "attributes that are only populated in the secondary indexes that you can query you can add dynamodb accelerator in",
    "start": "1665890",
    "end": "1671200"
  },
  {
    "text": "front of it which takes those queries from single digit millisecond into microsecond and you have global tables",
    "start": "1671200",
    "end": "1677050"
  },
  {
    "text": "with multi region multi-master got transactions across multiple tables so you can do a transaction you just grab a contact handle and you're like hey I got",
    "start": "1677050",
    "end": "1682930"
  },
  {
    "text": "multiple tables I got multiple items I want to be able to run these transactions do you have change streams pretty rich Crean language I will say it",
    "start": "1682930",
    "end": "1689890"
  },
  {
    "text": "takes a little while to grok the query language one of the things I love about MongoDB is the query language is so dead",
    "start": "1689890",
    "end": "1696040"
  },
  {
    "text": "simple and beautiful and elegant super biased here but I just think it's like really well done because any developer",
    "start": "1696040",
    "end": "1703150"
  },
  {
    "text": "with any experience can walk into MongoDB and pick it up and use it without having to learn seek without having to learn",
    "start": "1703150",
    "end": "1708760"
  },
  {
    "text": "any complex query language so this is an example this is using the Python SDK the",
    "start": "1708760",
    "end": "1715360"
  },
  {
    "text": "Python SDK for AWS is called boto 3 it's called boto 3 because the Amazon River",
    "start": "1715360",
    "end": "1721330"
  },
  {
    "text": "Dolphin is called the boto I didn't name it we can blame Mitch Garnett for that",
    "start": "1721330",
    "end": "1727330"
  },
  {
    "text": "wonderful individual and then we're going to create a source so the resource is going to be DynamoDB we're gonna create a table on",
    "start": "1727330",
    "end": "1733280"
  },
  {
    "text": "that and I'm going to just update some votes so I built a little application that lets people vote on their favorite editor I can kind of show you that now",
    "start": "1733280",
    "end": "1739880"
  },
  {
    "text": "maybe woo is that enough information so",
    "start": "1739880",
    "end": "1748340"
  },
  {
    "text": "you can go and run this demo right now if you want oh boy I got a plug-in I'm gonna run out of battery one second",
    "start": "1748340",
    "end": "1755299"
  },
  {
    "text": "sorry",
    "start": "1755299",
    "end": "1757690"
  },
  {
    "text": "all right so we're gonna go over to this dynamodb table and if anybody wants to follow along you're welcome to call this",
    "start": "1765880",
    "end": "1771940"
  },
  {
    "text": "number or text this number or use this chat bot we close all right so you'll",
    "start": "1771940",
    "end": "1784840"
  },
  {
    "text": "notice that vim which is the best editor ever has 903 votes but that's not quite",
    "start": "1784840",
    "end": "1790510"
  },
  {
    "text": "good enough for them so what we're gonna do is we're gonna find this little votes table and I'm gonna find this little",
    "start": "1790510",
    "end": "1799510"
  },
  {
    "text": "votes table I'm gonna go in and we're going to change them to be over 9000",
    "start": "1799510",
    "end": "1806309"
  },
  {
    "text": "because memes and twitch and then you'll",
    "start": "1806309",
    "end": "1811419"
  },
  {
    "text": "notice the application small little update now vim has 9001 votes beautiful wonderful that's exactly as it should be",
    "start": "1811419",
    "end": "1817360"
  },
  {
    "text": "we'll change it back to 903 just so you can see the other editors and that's how",
    "start": "1817360",
    "end": "1823929"
  },
  {
    "text": "easy it is to use dynamo DB you can see I've got these vote users here these are hashes of the people so that if someone",
    "start": "1823929",
    "end": "1830140"
  },
  {
    "text": "calls in again and wants to use a different thing it'll change their vote and I think the whole application for",
    "start": "1830140",
    "end": "1836380"
  },
  {
    "text": "this is about 30 lines of code so with 30 lines of code you can build a giant infinitely scalable online poll fun like",
    "start": "1836380",
    "end": "1844570"
  },
  {
    "text": "I said because it's an API back service you get all these new features coming all the time and you don't have to",
    "start": "1844570",
    "end": "1850539"
  },
  {
    "text": "rewrite any code to take advantage of them you just suddenly get that performance increase so I'm a big fan of that we have companies like lyft that",
    "start": "1850539",
    "end": "1857110"
  },
  {
    "text": "are using this we have companies like Capital One snapchat and tons and tons of other companies that are using DynamoDB we use it very heavily",
    "start": "1857110",
    "end": "1863620"
  },
  {
    "text": "internally in Amazon as well but sometimes you want Richard documents",
    "start": "1863620",
    "end": "1869590"
  },
  {
    "text": "right does everybody everyone remember is like the transition from XML XML into",
    "start": "1869590",
    "end": "1875909"
  },
  {
    "text": "into the JSON right like that that's a thing that we did is an industry and it was beautiful we should have done it",
    "start": "1875909",
    "end": "1881020"
  },
  {
    "text": "sooner but like we we switched to JSON because it's more readable it's a nice",
    "start": "1881020",
    "end": "1886480"
  },
  {
    "text": "balance between compute friendly and and human friendly and as we did that it became harder and",
    "start": "1886480",
    "end": "1894760"
  },
  {
    "text": "harder as JSON kind of became the de facto interchange format to map those Ehsan things into a relational data",
    "start": "1894760",
    "end": "1901690"
  },
  {
    "text": "store so what we had to do was we had to write these weirdo rms and so Django everybody used that framework or Ruby on",
    "start": "1901690",
    "end": "1907570"
  },
  {
    "text": "Rails you have these rich rich ORM like spring you get these huge ORM that are",
    "start": "1907570",
    "end": "1913570"
  },
  {
    "text": "supposed to translate these these rich JSON documents into like 30 different tables in your relational database and",
    "start": "1913570",
    "end": "1919179"
  },
  {
    "text": "it just becomes hell to manage so document database is really kind of rose about and became important because of",
    "start": "1919179",
    "end": "1926380"
  },
  {
    "text": "the ease of use for getting the data from the web app into the database and then getting it back out the same way so",
    "start": "1926380",
    "end": "1932830"
  },
  {
    "text": "that was driven by access patterns so imagine a user profile we can add in new things we can modify the documents we",
    "start": "1932830",
    "end": "1939490"
  },
  {
    "text": "can have everything be you know rich we can create indexes on all of this we have lots of people using document",
    "start": "1939490",
    "end": "1947049"
  },
  {
    "text": "databases Cassandra among e2b all these other ones they use it for everything from like content management to your",
    "start": "1947049",
    "end": "1952750"
  },
  {
    "text": "user profiles to personalization to to all manner of things anybody use buffer app one of my",
    "start": "1952750",
    "end": "1959590"
  },
  {
    "text": "favorite things to do is to spot MongoDB object IDs in the wild so buffer app if",
    "start": "1959590",
    "end": "1964900"
  },
  {
    "text": "you've ever used it it what it allows you to do is it lets you go and talk to a couple of different social media",
    "start": "1964900",
    "end": "1970840"
  },
  {
    "text": "accounts so if you're an Instagram influencer or if you want to be influencer on LinkedIn or like I don't",
    "start": "1970840",
    "end": "1976179"
  },
  {
    "text": "know whatever other platforms people use these days you can go and you can be like hey buffer I want you to stage and schedule this post for me for instance",
    "start": "1976179",
    "end": "1982059"
  },
  {
    "text": "right before I came on stage I scheduled one to go out live so the twitch people would join so I hope the twitch people join and in the URL you can see a",
    "start": "1982059",
    "end": "1989980"
  },
  {
    "text": "MongoDB object ID which is really fun it's really fun to spot those in the wild and say like oh I can tell when",
    "start": "1989980",
    "end": "1995620"
  },
  {
    "text": "this user profile was created because mom gonna be object IDs are increasing based on time so I think MongoDB object",
    "start": "1995620",
    "end": "2000870"
  },
  {
    "text": "IDs all turn five back in like 2015 and they're gonna turn six in like two",
    "start": "2000870",
    "end": "2007799"
  },
  {
    "text": "twenty twenty one so you can see like the hash of the object ID in the wild anyway fun stuff but managing these is",
    "start": "2007799",
    "end": "2014490"
  },
  {
    "text": "is difficult it's frustrating and you know it's lots of weird stuff to like manage I I worked with a customer called",
    "start": "2014490",
    "end": "2020669"
  },
  {
    "text": "Disney back in 2013 or something and they had a I think it was 1,000",
    "start": "2020669",
    "end": "2028290"
  },
  {
    "text": "shards so 1,000 different MongoDB shards and they had a full-time staff of like",
    "start": "2028290",
    "end": "2034710"
  },
  {
    "text": "six people just to keep that running not including their data center folks and then I worked with customers like Grindr",
    "start": "2034710",
    "end": "2041550"
  },
  {
    "text": "who also had thousands and thousands of shards not thousands but like hundreds and hundreds of shards of this data",
    "start": "2041550",
    "end": "2047970"
  },
  {
    "text": "going all around and you don't want to manage all of that like you don't wanna have to char it if you don't have to so what you do is we reimagined the the",
    "start": "2047970",
    "end": "2056639"
  },
  {
    "text": "document data store in the cloud so how do you build this in 2019 as opposed to 2008 and what we do is we decouple the",
    "start": "2056640",
    "end": "2065879"
  },
  {
    "text": "compute in the storage we distribute the data into smaller partitions and we increase the replication does this sound familiar and does this sound like Aurora",
    "start": "2065880",
    "end": "2071419"
  },
  {
    "text": "good guess yeah you might this might be a common theme occurring across all the",
    "start": "2071420",
    "end": "2077010"
  },
  {
    "text": "new databases that we build because it's a good model so what happens here is you",
    "start": "2077010",
    "end": "2082710"
  },
  {
    "text": "know instead of doing this this manga to be write concern with you know a write",
    "start": "2082710",
    "end": "2087750"
  },
  {
    "text": "concern of replicating the majority of the replicas oops we can say all of the",
    "start": "2087750",
    "end": "2093750"
  },
  {
    "text": "rights are durable by default because it's going to be immediately replicated to all of these different availability zones with less than a millisecond",
    "start": "2093750",
    "end": "2100020"
  },
  {
    "text": "latency which is pretty darn cool and it supports all the traditional MongoDB drivers and clients and everything so",
    "start": "2100020",
    "end": "2105900"
  },
  {
    "text": "you don't have to rewrite any code all you need to do change a connection string and there you go you're running I will say it does not support geo indexes",
    "start": "2105900",
    "end": "2113190"
  },
  {
    "text": "yet and it does not support all of the aggregation features yet so if you're depending on certain aggregation features check the list of compatibility",
    "start": "2113190",
    "end": "2119400"
  },
  {
    "text": "don't just blindly replace this and then complain when it doesn't work I will say all of those features that are missing",
    "start": "2119400",
    "end": "2125340"
  },
  {
    "text": "are things the team is pretty diligently working on adding as fast as possible I am particularly interested in getting",
    "start": "2125340",
    "end": "2131010"
  },
  {
    "text": "geo indexes in it I built an application back in like 2010 called get shots does anybody remember this at one point we",
    "start": "2131010",
    "end": "2137370"
  },
  {
    "text": "had like 40,000 daily active users and what it did is every time you did a git commit it would take a picture of your face and then post it on the internet",
    "start": "2137370",
    "end": "2143690"
  },
  {
    "text": "and I have to take it down because I got sued but the fun thing is like as soon",
    "start": "2143690",
    "end": "2150960"
  },
  {
    "text": "as you know the statute of limitations runs out I'll just bring that back up and spin it up on document DB all right",
    "start": "2150960",
    "end": "2156600"
  },
  {
    "text": "so now we're gonna talk about a memory data stored in memory data stores are data stores that don't have a persistence layer and for people who",
    "start": "2156600",
    "end": "2162270"
  },
  {
    "text": "have used Redis I've had someone in the crowd before I say hey read Venice has a persistence layer Redis",
    "start": "2162270",
    "end": "2168220"
  },
  {
    "text": "dump is not a persistence layer like persisting by calling a command and",
    "start": "2168220",
    "end": "2173710"
  },
  {
    "text": "syncing everything to the filesystem that is not a persistence layer in-memory data stores are things like memcache D and Redis and they're",
    "start": "2173710",
    "end": "2179290"
  },
  {
    "text": "optimized for serving stuff without you having to go and talk to disk and you can build these on like I three",
    "start": "2179290",
    "end": "2185590"
  },
  {
    "text": "instances and tons and tons of RAM and you can have everything like going super super fast because it never has to it's",
    "start": "2185590",
    "end": "2190600"
  },
  {
    "text": "basically you know the request comes in and talks to the NIC the NIC talks to the RAM and the RAM goes okay cool here",
    "start": "2190600",
    "end": "2195760"
  },
  {
    "text": "have your data and you can you can do that stuff really really fast but you don't get the persistence lots of people",
    "start": "2195760",
    "end": "2202240"
  },
  {
    "text": "use this how many people have run drew poll have you thrown memcache D or Redis or anything like that in front of it so",
    "start": "2202240",
    "end": "2208600"
  },
  {
    "text": "for the purposes of Twitch everyone who runs Drupal throws memcache T in front of it anybody run like aggregation",
    "start": "2208600",
    "end": "2216460"
  },
  {
    "text": "service and they store the results of those aggregations and Redis high score table Redis like this is a really common",
    "start": "2216460",
    "end": "2223240"
  },
  {
    "text": "use case you see this in all of these three to your web apps right like so you'll have you'll have the requests you'll have the load balancer you know",
    "start": "2223240",
    "end": "2228790"
  },
  {
    "text": "the client the load balancer load balancer can like route the request to the cache or maybe the the the cache is",
    "start": "2228790",
    "end": "2233860"
  },
  {
    "text": "being spoken to by the the client itself and then if the cache misses then it'll go down it'll talk to the database and",
    "start": "2233860",
    "end": "2240280"
  },
  {
    "text": "then it'll hydrate the cache with the new information and then subsequent requests will be fulfilled by that cache really really common thing it supports",
    "start": "2240280",
    "end": "2249640"
  },
  {
    "text": "very simple API so you know stuff like this get set set an expiry lots of",
    "start": "2249640",
    "end": "2257860"
  },
  {
    "text": "different customers using this like I said it Airbnb a team internet which is domain parking business McDonald's uses",
    "start": "2257860",
    "end": "2264130"
  },
  {
    "text": "this McDonald's McDonald's is a little scary in the amount of personalization",
    "start": "2264130",
    "end": "2269920"
  },
  {
    "text": "that they do now also Domino's today does everybody know like Domino's is actually a tech company there they are not a pizza company like they spent two",
    "start": "2269920",
    "end": "2277120"
  },
  {
    "text": "and a half million dollars building the best recruiting video I have seen in my entire life it made me want to go work",
    "start": "2277120",
    "end": "2282190"
  },
  {
    "text": "there if you Google Domino's Tech recruiting video you'll be very impressed but they use ElastiCache they",
    "start": "2282190",
    "end": "2288640"
  },
  {
    "text": "use dynamodb they use aurora they use personalize there's all kinds of good services so ElastiCache is a managed",
    "start": "2288640",
    "end": "2294940"
  },
  {
    "text": "version of either memcache D or Redis so Redis read a serialization protocol over",
    "start": "2294940",
    "end": "2299980"
  },
  {
    "text": "TCP strings hashes list sets and sorted sets it's only got about 120 commands it's built by this Italian person named",
    "start": "2299980",
    "end": "2307030"
  },
  {
    "text": "anti res who has lots of opinions and he tweets about them all the time I suggest ignoring that and just focusing on the great database please",
    "start": "2307030",
    "end": "2314410"
  },
  {
    "text": "don't follow his twitter you get really angry sometimes I I do it because I like the drama but if you don't like drama",
    "start": "2314410",
    "end": "2321160"
  },
  {
    "text": "don't follow Twitter but if you do it's better than HBO so then you get the pub sub features so this is great if you're",
    "start": "2321160",
    "end": "2327370"
  },
  {
    "text": "building like WebSocket applications or chat applications all that good stuff and it supports clustering via partitions but those are blind",
    "start": "2327370",
    "end": "2333010"
  },
  {
    "text": "partitions they're not aware of each other the the client is the part that is making the call about whether or not to route the request to a particular",
    "start": "2333010",
    "end": "2338080"
  },
  {
    "text": "partition memcache D is about the same supports text and binary protocols you can tell the ID and if you want a really really",
    "start": "2338080",
    "end": "2343900"
  },
  {
    "text": "small number of commands set add replace a pin pre pin check and set get gets delete increment and decrement and again",
    "start": "2343900",
    "end": "2349570"
  },
  {
    "text": "client blind partitioning search search is really fun has anybody ever searched",
    "start": "2349570",
    "end": "2354940"
  },
  {
    "text": "for something before 100% of the audience twitch all right and what will",
    "start": "2354940",
    "end": "2360460"
  },
  {
    "text": "happen here is with you'll have these documents you'll create an inverted index and you'll find these stop words",
    "start": "2360460",
    "end": "2367240"
  },
  {
    "text": "so you have a small little language model commonly the most common version of this is like solar or leucine and",
    "start": "2367240",
    "end": "2373180"
  },
  {
    "text": "those are all powered by this other framework called Lib stemmer Lib stemmer will run it'll it'll find all the stop",
    "start": "2373180",
    "end": "2378430"
  },
  {
    "text": "words it'll do all the good stuff and I got a speed-up so this is what a search looks like you'll you'll say okay I'm",
    "start": "2378430",
    "end": "2385000"
  },
  {
    "text": "gonna do a search for you know house and then I'm gonna get back these results and these results will be ranked and I",
    "start": "2385000",
    "end": "2390700"
  },
  {
    "text": "will be able to pull in the data Adobe uses this mirror web uses this Hearst uses this manage elasticsearch is",
    "start": "2390700",
    "end": "2397540"
  },
  {
    "text": "the most wonderful thing in the world fun story at SpaceX we built a giant giant telemetry system on elasticsearch worst",
    "start": "2397540",
    "end": "2405460"
  },
  {
    "text": "decision of my life like holy crap I had to manage elasticsearch myself for like",
    "start": "2405460",
    "end": "2411760"
  },
  {
    "text": "two years and I regretted every moment of it so not managing elasticsearch",
    "start": "2411760",
    "end": "2417520"
  },
  {
    "text": "was the greatest day of my life I remember turning off Pedro Duty and deleting it from my phone so",
    "start": "2417520",
    "end": "2422730"
  },
  {
    "text": "elasticsearch is written in Java and the way that you find out what went wrong is you you take the stack trace and then",
    "start": "2422730",
    "end": "2430300"
  },
  {
    "text": "you scroll for four I got like carpal tunnel syndrome just from schooling scrolling up through these like mile-long stack traces",
    "start": "2430300",
    "end": "2438030"
  },
  {
    "text": "luckily you don't have to do that with manage elasticsearch alright graph",
    "start": "2438030",
    "end": "2443440"
  },
  {
    "text": "databases these are really fun so you can build graph databases in relational",
    "start": "2443440",
    "end": "2448840"
  },
  {
    "text": "databases but what we're focusing on with graph databases are the relationships between the nodes rather than the data on the nodes themselves",
    "start": "2448840",
    "end": "2454750"
  },
  {
    "text": "the data on the nodes is so important but we're gonna focus more on these rich relationships that we can query and get",
    "start": "2454750",
    "end": "2459910"
  },
  {
    "text": "rich information from and drive you know recommendations and a better query model than what you would have to do in some",
    "start": "2459910",
    "end": "2466180"
  },
  {
    "text": "crazy sequel query so you have vertex vertices you have edges and like I said you can build this in a relational",
    "start": "2466180",
    "end": "2472510"
  },
  {
    "text": "database people have been doing this for years but the problem is the query patterns and like bending your mind to",
    "start": "2472510",
    "end": "2481060"
  },
  {
    "text": "create one of these queries or better yet teaching another new team member to",
    "start": "2481060",
    "end": "2487270"
  },
  {
    "text": "write these queries is cumbersome slow and frustrating so the graph data model",
    "start": "2487270",
    "end": "2492280"
  },
  {
    "text": "works by taking something like gremlin or tinker pop and or Sparkle and rdf and",
    "start": "2492280",
    "end": "2498130"
  },
  {
    "text": "saying hey let's reinvasion how we could query these relationships people use it",
    "start": "2498130",
    "end": "2503290"
  },
  {
    "text": "for social networking anybody use Facebook yeah recommendations knowledge graphs fraud detection life sciences",
    "start": "2503290",
    "end": "2509830"
  },
  {
    "text": "network and IT operations we use it to recommend books I'm gonna show you an example of that in just a bit so this is",
    "start": "2509830",
    "end": "2516130"
  },
  {
    "text": "a gremlin query and what we're doing is we're gonna say grab the vertices of book one and then you know store it as a",
    "start": "2516130",
    "end": "2521560"
  },
  {
    "text": "variable a and we're gonna say find all of the people who have also purchased other books that also purchase book one",
    "start": "2521560",
    "end": "2527500"
  },
  {
    "text": "and then we're gonna remove ourselves and we're under order by the rating and we're gonna output all the names so we",
    "start": "2527500",
    "end": "2532540"
  },
  {
    "text": "have something like a mess on Neptune Amazon Neptune is a managed graph database and it's it's somewhat server",
    "start": "2532540",
    "end": "2538330"
  },
  {
    "text": "list and that you don't really need to like manage any of the infrastructure but not fully service and that you still",
    "start": "2538330",
    "end": "2543550"
  },
  {
    "text": "spin up nodes and you kind of see them but and you're still paying for idle and all that good stuff so query billions of",
    "start": "2543550",
    "end": "2549760"
  },
  {
    "text": "relationships millisecond latency again that's six replicas of your data across three AZ's kind of common theme you're",
    "start": "2549760",
    "end": "2555310"
  },
  {
    "text": "seeing really easy to write queries in both grandma and sparkles so I love Greenland I think it's a well-designed",
    "start": "2555310",
    "end": "2561670"
  },
  {
    "text": "language and I think it makes querying graph relationships quite easy no one really uses it um I don't know",
    "start": "2561670",
    "end": "2569380"
  },
  {
    "text": "why I would wish I wish I would see more gremlin and prod but the thing I see in prod is actually RTF and sparkle and",
    "start": "2569380",
    "end": "2575319"
  },
  {
    "text": "there's a reason for that so this is a gremlin query it's saying like add a",
    "start": "2575319",
    "end": "2580359"
  },
  {
    "text": "vertex vertex a dove named Randall add the property age of 27 and you know the",
    "start": "2580359",
    "end": "2586539"
  },
  {
    "text": "the the property set the the single part here is not a comment on my marital status it's it's saying I don't want to",
    "start": "2586539",
    "end": "2591729"
  },
  {
    "text": "add in additional values on this one node so instead of creating an array I'm just replacing the single value and I'm",
    "start": "2591729",
    "end": "2597789"
  },
  {
    "text": "gonna add another person my friend Marcus and then I'm going to add an edge that like knows Marcus from Randall to",
    "start": "2597789",
    "end": "2603489"
  },
  {
    "text": "Marcus and then we can query that RDF is XML he'll again and you store the data",
    "start": "2603489",
    "end": "2608920"
  },
  {
    "text": "in triples and then you write weird little sequel like queries in order to create this sort of stuff",
    "start": "2608920",
    "end": "2615099"
  },
  {
    "text": "the reason RDF is used a lot more is it allows you to draw comparisons between",
    "start": "2615099",
    "end": "2620769"
  },
  {
    "text": "the different data sets so you can have multiple different databases all talking to each other but they have a single",
    "start": "2620769",
    "end": "2626619"
  },
  {
    "text": "globally unique identifier so this is really good for like referential integrity across lots and lots of different data models there's a company",
    "start": "2626619",
    "end": "2632619"
  },
  {
    "text": "in Siemens corporate technology and they build all these like turbines and all kinds of crazy cool machinery and they",
    "start": "2632619",
    "end": "2638619"
  },
  {
    "text": "track it around the world and they use Neptune to query the status of all of",
    "start": "2638619",
    "end": "2644289"
  },
  {
    "text": "these engines at any point in time and they can find out everything they need to know about it like when was it",
    "start": "2644289",
    "end": "2649599"
  },
  {
    "text": "created when was it built when was it last serviced what was who was the engineer who worked on it and they can",
    "start": "2649599",
    "end": "2655029"
  },
  {
    "text": "get all that information from like 90 different databases but query at all in Neptune okay really really quick demo",
    "start": "2655029",
    "end": "2661739"
  },
  {
    "text": "well so I'm gonna create a retail demo",
    "start": "2661739",
    "end": "2667630"
  },
  {
    "text": "application so imagine an online e-commerce site huh and we're gonna use",
    "start": "2667630",
    "end": "2674859"
  },
  {
    "text": "a key value store to store the catalog we're gonna use a graph store to do the recommendations I'm going to create a product leaderboard with read ElastiCache and we're gonna provide",
    "start": "2674859",
    "end": "2681459"
  },
  {
    "text": "search with Amazon Elastic search now if you want to build this yourself luckily you can so Amazon we have a thing called",
    "start": "2681459",
    "end": "2687219"
  },
  {
    "text": "cloud formation and in cloud formation what will happen is you can go and launch this stack and it's in yeah Mille I hope and not in JSON yeah so yeah",
    "start": "2687219",
    "end": "2696519"
  },
  {
    "text": "Mille specifies all the different things that are happening let me scroll down and pass all this and you say bill to V PC launch a node",
    "start": "2696519",
    "end": "2703700"
  },
  {
    "text": "launch another thing launch another thing it'll do all that luckily this is already built so I just have to go and",
    "start": "2703700",
    "end": "2709310"
  },
  {
    "text": "find bookstore and I can look at the output of this and it says go here and",
    "start": "2709310",
    "end": "2715760"
  },
  {
    "text": "this is my demo and I've already got login and logout supported by Amazon Cognito and I can search something and",
    "start": "2715760",
    "end": "2722150"
  },
  {
    "text": "it won't show up because that wasn't a real what am i what am I looking for umm kitchen and we can go and look at the",
    "start": "2722150",
    "end": "2730430"
  },
  {
    "text": "resources that are provision so there should be a dynamo DB table here so i",
    "start": "2730430",
    "end": "2736580"
  },
  {
    "text": "can look at the cart so use three different tables i've got one table for the card i've got one table for the",
    "start": "2736580",
    "end": "2741830"
  },
  {
    "text": "orders so these are the order history this is the the book ID and this is the",
    "start": "2741830",
    "end": "2749510"
  },
  {
    "text": "the catalogue so i can go and change any of these titles if i want and then we",
    "start": "2749510",
    "end": "2754670"
  },
  {
    "text": "have recommendations so i can go and look at these bestsellers and this is a query that I probably should have warmed",
    "start": "2754670",
    "end": "2761780"
  },
  {
    "text": "up beforehand one of the things with lambdas and V pcs is that you occasionally get a cold start which is what's happening right now which is why",
    "start": "2761780",
    "end": "2767390"
  },
  {
    "text": "it's not rendering very quickly but in the interest of time we are going to oh there we go and now the subsequent",
    "start": "2767390",
    "end": "2773150"
  },
  {
    "text": "refreshes will be very very fast tada because it's all gonna be stored in ElastiCache okay so that's the demo",
    "start": "2773150",
    "end": "2779660"
  },
  {
    "text": "application we've got two more databases to cover in like two minutes this is gonna be great everybody excited alright",
    "start": "2779660",
    "end": "2785330"
  },
  {
    "text": "if you want to launch this go here let anybody who wants to do this check out the slides later as we scan your badge",
    "start": "2785330",
    "end": "2790880"
  },
  {
    "text": "on exit we will email you the slides alright so time series databases time series data is data that has the primary",
    "start": "2790880",
    "end": "2797690"
  },
  {
    "text": "axis of time so stock data or humidity data in like a warehouse or you know sensors things where time is like your",
    "start": "2797690",
    "end": "2804500"
  },
  {
    "text": "access pattern and like so this is an example right you'll have this humidity sensor and relational databases do not",
    "start": "2804500",
    "end": "2812360"
  },
  {
    "text": "support this very well this is this is a a format that like really is hard to",
    "start": "2812360",
    "end": "2818240"
  },
  {
    "text": "shove into a relational database without kind of crazy manipulations of the underlying data store so like people",
    "start": "2818240",
    "end": "2824090"
  },
  {
    "text": "have made modifications to the N ODB database engine in order to like make time series work it would be much better",
    "start": "2824090",
    "end": "2830540"
  },
  {
    "text": "to just create a time-series database which is what amazon timestream is so this can collect",
    "start": "2830540",
    "end": "2836480"
  },
  {
    "text": "data millions of inserts per second it can do trillions of daily events it supports windowing functions interpolations a rich query language for sequel its",
    "start": "2836480",
    "end": "2842690"
  },
  {
    "text": "server list so you don't have to managing in the servers and then we have ledger databases so Ledger's are things",
    "start": "2842690",
    "end": "2847700"
  },
  {
    "text": "like a HR Payroll manufacturers government DMV so we can take this",
    "start": "2847700",
    "end": "2854540"
  },
  {
    "text": "ability to cryptographically verify the history of any sort of transaction by chaining them together so that if you",
    "start": "2854540",
    "end": "2861080"
  },
  {
    "text": "remove any of the previous nodes the hash of that particular node is no longer valid this is really really useful because like if you ever have to",
    "start": "2861080",
    "end": "2867260"
  },
  {
    "text": "get called up in court a skill database administrator could like say oh yeah I could have gone in and edited the history with ledger databases they are",
    "start": "2867260",
    "end": "2873859"
  },
  {
    "text": "pinned only so you can't you physically cannot edit the data without changing",
    "start": "2873859",
    "end": "2879589"
  },
  {
    "text": "the hash of the currently stored version so the history of that transaction remains true and pure and in doing this",
    "start": "2879589",
    "end": "2887330"
  },
  {
    "text": "on a blockchain is another common way of doing that but the ball chains are slow so how do you do this you have an append-only journal that journal shows",
    "start": "2887330",
    "end": "2894710"
  },
  {
    "text": "you the current version and then a hash which is the the hash of all the previous versions kind of chained",
    "start": "2894710",
    "end": "2900140"
  },
  {
    "text": "together so this like let's imagine we buy a Tesla and so Tracey Russell is the",
    "start": "2900140",
    "end": "2905930"
  },
  {
    "text": "new owner of a Tesla and that gets put in and now Tracey Russell sells that to",
    "start": "2905930",
    "end": "2911000"
  },
  {
    "text": "Ronny Nash so we update that we chain the two records together create a hash and then we get the history of the cars",
    "start": "2911000",
    "end": "2917720"
  },
  {
    "text": "and we can look up the previous versions and then Ronny Nash sells it to Elmer Hubbard and now we have Elmer Hubbard",
    "start": "2917720",
    "end": "2925310"
  },
  {
    "text": "and we've got that chain so we have this preserved history that's cryptographically verifiable across all the transactions so ql DB is the",
    "start": "2925310",
    "end": "2933410"
  },
  {
    "text": "solution here and it's not called quantum because it uses quantum anything it's just called the quantum because",
    "start": "2933410",
    "end": "2938720"
  },
  {
    "text": "it's like smallest unit that you can atomically modify so if you want to know",
    "start": "2938720",
    "end": "2943849"
  },
  {
    "text": "more about building purpose-built databases and you want to hear from some customers there's a lot of really really good stuff out there the the core thing",
    "start": "2943849",
    "end": "2951589"
  },
  {
    "text": "to take away is build based on your access patterns don't think about how you're going to store the data think",
    "start": "2951589",
    "end": "2956690"
  },
  {
    "text": "about how you're going to access the data down the line what is the most relevant information that you can return in a single request from a database that",
    "start": "2956690",
    "end": "2962089"
  },
  {
    "text": "you can immediately render to the user that kind of development that kind of working bread's is really really powerful so if",
    "start": "2962089",
    "end": "2968480"
  },
  {
    "text": "you want to learn more we have a whole series on this called this is my architecture where you can learn about all the different customers that we have",
    "start": "2968480",
    "end": "2974060"
  },
  {
    "text": "that are doing good stuff if you want to learn more check that out these are all the databases more information here more",
    "start": "2974060",
    "end": "2981710"
  },
  {
    "text": "information here thank you so much for your time I hope everybody has a good rested collision do we have time for",
    "start": "2981710",
    "end": "2992450"
  },
  {
    "text": "questions from twitch ten seconds okay I have another show after this because we",
    "start": "2992450",
    "end": "2998900"
  },
  {
    "text": "don't have any more talks right yeah let's just keep going all right Joseph Ireland on twitch asks can sage maker",
    "start": "2998900",
    "end": "3005710"
  },
  {
    "text": "access any of these databases for their deep learning neural networks yes so you can talk in",
    "start": "3005710",
    "end": "3012580"
  },
  {
    "text": "sage maker to Neptune so the way you deploy an algorithm and sage maker is a docker container so who was Joseph",
    "start": "3012580",
    "end": "3019180"
  },
  {
    "text": "Ireland was the person so Joseph Ireland if you want to if you want to have a document go and talk to or a docker",
    "start": "3019180",
    "end": "3027010"
  },
  {
    "text": "container running on Sage maker go and talk to Neptune you can do that because it's gonna be provision in a V PC but",
    "start": "3027010",
    "end": "3032530"
  },
  {
    "text": "you're writing that code yourself it's not like a prebuilt thing any questions",
    "start": "3032530",
    "end": "3038500"
  },
  {
    "text": "from the audience anybody from the audience yeah okay",
    "start": "3038500",
    "end": "3044730"
  },
  {
    "text": "what's the situation - to migration on no sequel databases like Donald Evie the",
    "start": "3048240",
    "end": "3054840"
  },
  {
    "text": "most common way of doing migrations on no sequel databases yeah so you DMS supports no sequel migration",
    "start": "3054840",
    "end": "3061680"
  },
  {
    "text": "so you can do Cassandra - dynamo you can do like I don't mean like that I mean like the schema cop dated right so let's",
    "start": "3061680",
    "end": "3067619"
  },
  {
    "text": "say you have like five fields yeah and again different ways of doing a remove field so Oh doing migrations in a",
    "start": "3067619",
    "end": "3073350"
  },
  {
    "text": "document data stores I gotcha so like writing the migration script so like the easiest way is a for each loop",
    "start": "3073350",
    "end": "3080760"
  },
  {
    "text": "running on the database itself like that like you can do that you can you can do that kind of crazy stuff if you're",
    "start": "3080760",
    "end": "3086610"
  },
  {
    "text": "talking about transactional kind of migrations where you have to apply a right lock and make sure no one has access new database most document",
    "start": "3086610",
    "end": "3093240"
  },
  {
    "text": "databases don't really support that model so no I don't mean like that like you know you can migrate the data like many times right like I'm like yeah I",
    "start": "3093240",
    "end": "3100800"
  },
  {
    "text": "have like ten migrations right yeah let's say I need to roll back to number six and not number nine yeah I'd do that",
    "start": "3100800",
    "end": "3106980"
  },
  {
    "text": "so no so there's a framework called Eve built in Python and they have a model",
    "start": "3106980",
    "end": "3112050"
  },
  {
    "text": "that will that supports that kind of access pattern for MongoDB so the thing that Eve uses in the background I don't",
    "start": "3112050",
    "end": "3118470"
  },
  {
    "text": "remember what it's called but it's like core to that infrastructure and they have the ability to roll forward",
    "start": "3118470",
    "end": "3124050"
  },
  {
    "text": "migrations and roll backwards migrations in MongoDB I don't know about other databases but you lost with that already right so like let's say you know need to",
    "start": "3124050",
    "end": "3130710"
  },
  {
    "text": "get deleted a key oh if right and it want to go back you look at all the information one of the advantages of",
    "start": "3130710",
    "end": "3135869"
  },
  {
    "text": "document TB is you can roll back to any point in time okay so it typically you",
    "start": "3135869",
    "end": "3142080"
  },
  {
    "text": "only store like seven days of that data but you can actually extend that range to roll back to any point in time that",
    "start": "3142080",
    "end": "3147210"
  },
  {
    "text": "you want and you can do snapshots and restores but ya know if you're talking about rolling back in migration and",
    "start": "3147210",
    "end": "3152730"
  },
  {
    "text": "you've got like a fork and you have like one branch that's gone off and you want to roll back to the previous schema I",
    "start": "3152730",
    "end": "3158400"
  },
  {
    "text": "don't think you can do that I that violates the laws of time we have",
    "start": "3158400",
    "end": "3163740"
  },
  {
    "text": "another fun question from twitch we are a two-base is your spirit animal which",
    "start": "3163740",
    "end": "3169230"
  },
  {
    "text": "database is my spirit animal MongoDB for sure Postgres is pretty beautiful if you ever want to like learn a lot of C++",
    "start": "3169230",
    "end": "3175680"
  },
  {
    "text": "go look at the Postgres source code it's quite well-written now not always alright that it any other",
    "start": "3175680",
    "end": "3185660"
  },
  {
    "text": "question from the audience don't be shocked wonderful okay thank you all so much for your time",
    "start": "3185660",
    "end": "3191170"
  }
]