[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "大家好，谢谢大家的到来 我是来自 Airbnb 的\nXinyao",
    "start": "1300",
    "end": "6500"
  },
  {
    "text": "今天我们要谈一谈 \"Airbnb 架构的\n发展历程\" 本次介绍将由我和",
    "start": "6767",
    "end": "14500"
  },
  {
    "text": "梁先生一起完成 我们都来自 Airbnb\n的生产基础 设施团队",
    "start": "14667",
    "end": "20599"
  },
  {
    "text": "自我介绍后\n下面让我们开始正题 也许还有些人不太\n了解 Airbnb",
    "start": "23100",
    "end": "28467"
  },
  {
    "start": "24000",
    "end": "75000"
  },
  {
    "text": "Airbnb 最初是作为 房东和租客交流的平台 房东可以把闲置房间\n租给租客",
    "start": "28667",
    "end": "36232"
  },
  {
    "text": "这里展示的是五年多\n以前 网站看起来的样子",
    "start": "36767",
    "end": "41667"
  },
  {
    "text": "您可以按不同时间进行搜索 上面会显示地图\n以及列示内容 在过去几年里",
    "start": "41933",
    "end": "48467"
  },
  {
    "text": "产品已从\n单一形态\"民宿\"逐渐 演变成多元化形态",
    "start": "48600",
    "end": "53767"
  },
  {
    "text": "所以现在我们在支持民宿 体验和餐厅 还有我们所谓的\nAirbnb 超越",
    "start": "53900",
    "end": "60100"
  },
  {
    "text": "其本身就属于奢华品牌\n之一",
    "start": "60233",
    "end": "63867"
  },
  {
    "text": "在本次演讲中，我们将介绍\n过去几年中 为实现此类产品演进\n所做的基础设施工作",
    "start": "65633",
    "end": "72566"
  },
  {
    "start": "75000",
    "end": "93000"
  },
  {
    "text": "这就是今天的议程 基本上我们将回顾\n我们在不同年份 所做的工作",
    "start": "75167",
    "end": "80700"
  },
  {
    "text": "并且每年都有个\n主题 最后我们要列出",
    "start": "80900",
    "end": "85933"
  },
  {
    "text": "当前所面临的基础\n设施挑战 并且对我们为此所做\n的工作进行一些展望",
    "start": "86100",
    "end": "91833"
  },
  {
    "text": "在2015年 这一年我们的主题是\n基础设施以人为本",
    "start": "94567",
    "end": "100633"
  },
  {
    "text": "我想引用 当时在 Airbnb 发生\n的一件非常著名的事件",
    "start": "100833",
    "end": "106232"
  },
  {
    "text": "我们称之为824事件 在2015年4月某个\n随机的日子",
    "start": "106567",
    "end": "112500"
  },
  {
    "text": "网站宕机了 数据库当时并没有\n使 CPU 达到100%利用率 看起来当时也没有\n用户在请求",
    "start": "112767",
    "end": "120632"
  },
  {
    "text": "而实际上此类事件\n在每小时的第24分钟 都会发生一次",
    "start": "120867",
    "end": "125667"
  },
  {
    "text": "我们花了十天时间\n才找出根本原因 是由一个我们都不知道\n在哪的定时任务引起的，实际是",
    "start": "125933",
    "end": "133267"
  },
  {
    "text": "定时作业删除了一个\nMemchached 键 键值被数以千计的\nWeb 服务器读取",
    "start": "133433",
    "end": "139633"
  },
  {
    "text": "且所有 Web 服务器\n都要读取该键值 如果该键值不存在 那所有 Web 服务器都要\n重新计算该键值",
    "start": "139933",
    "end": "146833"
  },
  {
    "text": "这极其耗费资源\n并且还要填充该键值 此定时作业每小时\n执行24分钟",
    "start": "146967",
    "end": "154233"
  },
  {
    "text": "而实际上我们\n每小时的第24分钟 都有工程师待命",
    "start": "154567",
    "end": "159967"
  },
  {
    "text": "以确保网站没有宕机 如果网站宕机了 工程师将\n关闭所有流量",
    "start": "160133",
    "end": "165633"
  },
  {
    "text": "并等待系统恢复正常 而且在那个特定时间会有\n大量人力工作",
    "start": "165900",
    "end": "173233"
  },
  {
    "text": "对我们来说，这是\n非常糟糕的一年 所以在那一年",
    "start": "173633",
    "end": "180400"
  },
  {
    "text": "在我们介绍细节之前 我们先来了解一下\n当时的架构",
    "start": "180533",
    "end": "186900"
  },
  {
    "start": "182000",
    "end": "269000"
  },
  {
    "text": "当时我们主要运行的是\n整体架构 整个 Airbnb 基础设施\n都在 Amazon 中运行",
    "start": "187233",
    "end": "195000"
  },
  {
    "text": "我们在单个区域运行：\nus-east-1 我们运行\n一系列 EC2 实例",
    "start": "195133",
    "end": "201100"
  },
  {
    "text": "并且运行\n数据库 RDS Aurora 那个时候是用 RDS MySQL",
    "start": "201300",
    "end": "206200"
  },
  {
    "text": "而现在我们在 Aurora 上运行 且我们选择\nRuby on Rails 作为 Web 服务器",
    "start": "206467",
    "end": "213900"
  },
  {
    "text": "让我们自上而下 看一下架构",
    "start": "214700",
    "end": "219767"
  },
  {
    "text": "从最顶部开始，我们\n支持多个不同类型的客户端 在这里，我们有桌面客户端",
    "start": "219967",
    "end": "227067"
  },
  {
    "text": "和移动客户端 因此，CDN 实际会把\n前往 CDN 的流量 转发到我们基于\nNginx 构建的",
    "start": "227267",
    "end": "234367"
  },
  {
    "text": "负载均衡器 再转发到我们的 Web 服务器 Web 服务器是用 Ru by\non Rails 编写的",
    "start": "234500",
    "end": "241267"
  },
  {
    "text": "它具有很多业务逻辑 为了服务我们的页面 Web 服务器将通过\nActiveRecord 与",
    "start": "241400",
    "end": "249300"
  },
  {
    "text": "数据库通信，这是个由\nRuby on Rails 提供的组件 此外，我们在过去几年中\n还构建了许多服务",
    "start": "249433",
    "end": "255967"
  },
  {
    "text": "包括搜索\n定价信息 房源供应列示内容 并且我们的 Web 查询\n都要通过标准化",
    "start": "256133",
    "end": "263199"
  },
  {
    "text": "服务客户端与其通信",
    "start": "263333",
    "end": "265500"
  },
  {
    "start": "269000",
    "end": "379000"
  },
  {
    "text": "因此这种简单的架构 面临很多挑战 第一个挑战是业务\n逻辑非常复杂",
    "start": "270100",
    "end": "277700"
  },
  {
    "text": "在这里我举两个例子 第一个例子是数据库表\n的数量",
    "start": "278033",
    "end": "283767"
  },
  {
    "text": "这些表是我们称为 P3 的页面\n所使用的 P3 是显示房源\n详细信息的页面",
    "start": "283900",
    "end": "292067"
  },
  {
    "text": "如此简单的页面\n实际上会与我们所说的 19个核心表和70多个跨库表\n进行通信",
    "start": "292367",
    "end": "299167"
  },
  {
    "text": "这些页面实际上需要\n查找标题 列示内容描述信息\n还有评论",
    "start": "299533",
    "end": "307067"
  },
  {
    "text": "价格信息、房源供应情况信息",
    "start": "307333",
    "end": "310867"
  },
  {
    "text": "接下来跳转到被称为 P4 的页面\n的情况更糟糕 该页面是人们实际\n确认退房的页面",
    "start": "312467",
    "end": "321233"
  },
  {
    "text": "该特定页面\n实际上处理了 许多\n与付款相关的信息 因此需要与150张表\n和超过200张",
    "start": "322600",
    "end": "329800"
  },
  {
    "text": "跨库表进行通信 所以业务逻辑\n当然很复杂",
    "start": "330133",
    "end": "334866"
  },
  {
    "text": "第二个挑战是流量增长 这是从2013年到\n2015年的流量增长情况",
    "start": "336400",
    "end": "345567"
  },
  {
    "text": "您可以看到，在那段时间内\n流量实际上 每年都在以近两倍的速度增长",
    "start": "345933",
    "end": "352333"
  },
  {
    "text": "因此，流量模式通常是这样\n在2015年1月",
    "start": "352967",
    "end": "358433"
  },
  {
    "text": "月底\n实际流量超过了 2014年的峰值流量 而且之后的每一周\n对我们来说都是一个新的高峰",
    "start": "358867",
    "end": "368433"
  },
  {
    "text": "因此您可以想象\n经营流量如此增长的 网站是有多么困难",
    "start": "368700",
    "end": "377400"
  },
  {
    "start": "379000",
    "end": "447000"
  },
  {
    "text": "因此当流量增长时 我们看到的第一个挑战\n是数据库不是很稳定",
    "start": "380000",
    "end": "386433"
  },
  {
    "text": "这是一张图表，展示的是 数据库和流量走势情况",
    "start": "386900",
    "end": "393700"
  },
  {
    "text": "就像我们网站上实际访问\n情况一样 因此我们从 MySQL 这边看到它\n一直在运行，流量一直在上升",
    "start": "393833",
    "end": "400000"
  },
  {
    "text": "在那个特定的时间 我们从客户端收到的\n请求错误率大约为30％",
    "start": "400367",
    "end": "406133"
  },
  {
    "text": "即便是对于实际上\n通过了的请求 其中60%的请求",
    "start": "406367",
    "end": "411367"
  },
  {
    "text": "延迟也大大高于以前 所以从用户的角度来看\n在那段时间里",
    "start": "411600",
    "end": "416733"
  },
  {
    "text": "该网站几乎等同于宕机了 我们进行了分析\n在整个2015年中",
    "start": "416867",
    "end": "422633"
  },
  {
    "text": "我们的网站可能\n宕机了数百小时 并且每天大约都会有",
    "start": "423033",
    "end": "430833"
  },
  {
    "text": "几起事件发生 因此，我们成立了一个特别小组\n来开始解决这些",
    "start": "430967",
    "end": "438033"
  },
  {
    "text": "在2015年出现的数据库\n稳定性问题，这就是",
    "start": "438533",
    "end": "443699"
  },
  {
    "start": "447000",
    "end": "567000"
  },
  {
    "text": "我们所做的工作 我们做的第一件事\n是尝试提高 数据库 SDR 的可见性",
    "start": "447467",
    "end": "454633"
  },
  {
    "text": "我们在客户端\n和服务端都这么做了 在服务器端，我们开始\n使用 MySQL Performance Schema",
    "start": "454867",
    "end": "461633"
  },
  {
    "text": "来了解\n何时发生回归 回归来自哪个表\n是读取还是写入",
    "start": "461933",
    "end": "467800"
  },
  {
    "text": "以及具体的查询模式 除此之外 我们也开始在\n客户端记录信息",
    "start": "467933",
    "end": "474567"
  },
  {
    "text": "所以我们开始记录 SQL 当前来自哪里\n来自哪个 Web 处理程序 甚至是来自哪个代码行",
    "start": "474800",
    "end": "480833"
  },
  {
    "text": "这实际上使我们能够\n快速检测到回归 并能够判断出\n如果发生回归",
    "start": "481033",
    "end": "488500"
  },
  {
    "text": "哪些具体的变化\n导致了回归 所以这对我们捕获到",
    "start": "488867",
    "end": "495700"
  },
  {
    "text": "那些非常大的回归有很大帮助 我们开始做的第二件事是",
    "start": "496000",
    "end": "502533"
  },
  {
    "text": "我们试图测量\n数据库的顶部空间 并改善它",
    "start": "502700",
    "end": "508300"
  },
  {
    "text": "有兴趣的话可以去看看 我在2016年\nre:Invent 做的一个",
    "start": "508667",
    "end": "514333"
  },
  {
    "text": "关于这个特定主题的小型演讲 这个想法是 首先尝试开始测量\n数据库的顶部空间",
    "start": "514467",
    "end": "521232"
  },
  {
    "text": "之所以能够这样做\n是因为我们运行 主从式 RDS 拓扑",
    "start": "521433",
    "end": "526833"
  },
  {
    "text": "所以我们开始 在单个数据库上重播\n多个数据库副本流量",
    "start": "526967",
    "end": "532467"
  },
  {
    "text": "这样我们用\n100％到600％的流量 对数据库进行压力测试",
    "start": "532600",
    "end": "540200"
  },
  {
    "text": "从而能够衡量其\n拥有的顶部空间 在能够对其进行衡量之后 我们开始了一系列项目来尝试\n改善数据库的顶部空间",
    "start": "540500",
    "end": "547532"
  },
  {
    "text": "例如开始从主库中\n抽出表 来单独运行",
    "start": "547800",
    "end": "554699"
  },
  {
    "text": "我们开始进行数据库缓存 来保存真正简单的查询",
    "start": "554867",
    "end": "560100"
  },
  {
    "text": "这两个实际上都能够\n将顶部空间提高50％以上",
    "start": "560567",
    "end": "563833"
  },
  {
    "start": "567000",
    "end": "623000"
  },
  {
    "text": "我们开始遇到的第三件事是 我们遭遇数据库\n连接限制",
    "start": "568300",
    "end": "573700"
  },
  {
    "text": "我们的每台 Web 服务器 保持了与主数据库的连接池 在2015年\n交互上都是直接与主库通信",
    "start": "573933",
    "end": "581233"
  },
  {
    "text": "然后在我们添加\n越来越多的 Web 服务器之后 我们开始看到数据库\n连接数达到了最大连接数限制",
    "start": "581533",
    "end": "588633"
  },
  {
    "text": "这实际上阻止了我们\n继续添加 Web 服务器 如果您的流量不断增加\n这是不太理想的情况",
    "start": "588800",
    "end": "595767"
  },
  {
    "text": "我们开始使用 或开始入侵名为\nMaxScale 的开源项目",
    "start": "597000",
    "end": "602767"
  },
  {
    "text": "我们创建了一个分支版本 我们在其中添加了很多功能\n包括连接池",
    "start": "603567",
    "end": "609399"
  },
  {
    "text": "查询排序\n以及背压和黑名单 因此我们使用了\nMaxScale 作为",
    "start": "609700",
    "end": "615433"
  },
  {
    "text": "Web 服务器和\n数据库之间的替换品 在部署之后 我们能够线性扩展\nWeb 层",
    "start": "615567",
    "end": "623367"
  },
  {
    "text": "此图显示了我们拥有的\nWeb 服务器的数量 这表明在加入\nMaxScale 之后",
    "start": "624100",
    "end": "635333"
  },
  {
    "text": "我们能够随时间线性地添加 Web 层 EC2 主机",
    "start": "635500",
    "end": "640633"
  },
  {
    "start": "642000",
    "end": "656000"
  },
  {
    "text": "因此在完成所有这些操作之后 虽然2016年的流量\n仍然在增加",
    "start": "643567",
    "end": "650400"
  },
  {
    "text": "但是我们能够以更安全的方式 度过2016年",
    "start": "650667",
    "end": "656567"
  },
  {
    "start": "656000",
    "end": "682000"
  },
  {
    "text": "这是一些统计数据 完成所有这些操作后 数据库事件的数量",
    "start": "657000",
    "end": "663100"
  },
  {
    "text": "从15个大大减少到2个 我们的宕机时间大大减少了 宕机时间",
    "start": "663300",
    "end": "670566"
  },
  {
    "text": "从100小时减少\n到不到3小时 因此所有这些工作 实际上使我们能够开始\n构建更具前瞻性的",
    "start": "670700",
    "end": "680500"
  },
  {
    "text": "基础设施项目\n这一切都从2016年开始",
    "start": "680900",
    "end": "685767"
  },
  {
    "text": "解决了流量方面的\n扩展难题之后 我们开始看到就工程师",
    "start": "687533",
    "end": "693100"
  },
  {
    "text": "数量而言的扩展难题 我们开始遇到的第一件事 是部署\n我们的整体代码库",
    "start": "693233",
    "end": "701400"
  },
  {
    "start": "695000",
    "end": "827000"
  },
  {
    "text": "为了说明这一点 我要对我们的发布协议\n作一些解释 我们使用了\n一个非常简单的发布协议",
    "start": "703267",
    "end": "710700"
  },
  {
    "text": "当时所有的工程师都\n在一个单一存储库上工作 他们都提交代码到\n到单个分支、主分支",
    "start": "710967",
    "end": "719233"
  },
  {
    "text": "并且我们每天多次\n发布这些代码库",
    "start": "719767",
    "end": "725233"
  },
  {
    "text": "因此，假设我们有\n500名工程师 那么每天大约提交200次COMMIT",
    "start": "725567",
    "end": "730533"
  },
  {
    "text": "发送给Repository 如果我们每天发四到五次\n则有40到50个更改",
    "start": "730667",
    "end": "736967"
  },
  {
    "text": "要分批处理、要发布 并且我们意识到，即使\n错误密度非常低",
    "start": "737300",
    "end": "744033"
  },
  {
    "text": "也可以说PR的1%或2%\n要被还原 如果要批量处理其中的\n40或50个 那将会很麻烦",
    "start": "744167",
    "end": "750567"
  },
  {
    "text": "几乎每个批次\n都将被还原 因此由于我们预计\n将要",
    "start": "750700",
    "end": "758800"
  },
  {
    "text": "还原某些更改，因此 我们实际是在\n要求所有工程师和 参与者，因此在执行发布时",
    "start": "758933",
    "end": "765032"
  },
  {
    "text": "所有参与该批处理\n的提交者都处于待命状态 所以会有一些工程师\n在进行协调",
    "start": "765233",
    "end": "772000"
  },
  {
    "text": "我们意识到\n当需要还原时 会花费大量时间\n进行更改",
    "start": "772767",
    "end": "780567"
  },
  {
    "text": "这个数字显示了 大约5％的发布",
    "start": "780733",
    "end": "786000"
  },
  {
    "text": "会出现超过1.5小时的延迟 在这1.5个小时内 大约20或30名工程师\n将待命",
    "start": "786200",
    "end": "792733"
  },
  {
    "text": "以防他们的更改\n将被还原 当发生此类调试\n或执行二分法时",
    "start": "792867",
    "end": "800833"
  },
  {
    "text": "我们实际上锁定了部署 以防止更多更改\n进入我们的系统 我们进行了分析\n大约有15个小时的时间",
    "start": "801100",
    "end": "809767"
  },
  {
    "text": "且锁定了部署，因此\n无人可以提交代码到主干 所以这实际上很麻烦 每天大约有五分之二的时间",
    "start": "810133",
    "end": "818000"
  },
  {
    "text": "我们将锁定整个部署 因此工程师的工作效率\n成为一个很大的问题",
    "start": "818267",
    "end": "826733"
  },
  {
    "text": "除此之外 还伴随着其它的一些挑战 例如缺乏责任所有体系",
    "start": "828167",
    "end": "834233"
  },
  {
    "text": "我们开始探索\n面向服务的体系结构 在2016年，我们并\n不完全知道",
    "start": "835100",
    "end": "841733"
  },
  {
    "start": "838000",
    "end": "898000"
  },
  {
    "text": "构建 SOA 所需的内容 所以我们开始做\n一些基础设施的支持",
    "start": "841867",
    "end": "848667"
  },
  {
    "text": "我们开始做的第一件事是\n开始构建消息总线 以解耦不同服务之间通信的服务器",
    "start": "848967",
    "end": "857199"
  },
  {
    "text": "一个很好的例子是\n我们有两种服务 一种是类似于列示内容\n另一种是搜索",
    "start": "857633",
    "end": "863667"
  },
  {
    "text": "因此，考虑到用户更改了\n列示内容的定价或供应情况 并且此类信息需要异步传递\n到我们的搜索服务中",
    "start": "863967",
    "end": "873133"
  },
  {
    "text": "因此，当用户在搜索\n我们的页面时 他们总是会获得最新的定价",
    "start": "873267",
    "end": "880467"
  },
  {
    "text": "和可用性信息 所以我们开始构建\n消息总线",
    "start": "880600",
    "end": "885467"
  },
  {
    "text": "以使服务可以在其中\n发布标准化消息 还允许其它服务\n订阅和侦听",
    "start": "885700",
    "end": "894233"
  },
  {
    "text": "这些服务以获得\n所需的信息 我们开始构建\n的第二件事是",
    "start": "894367",
    "end": "900667"
  },
  {
    "start": "898000",
    "end": "968000"
  },
  {
    "text": "动态配置分发 在建立之前 我们意识到工程师\n正在以多种不同的方式入侵",
    "start": "900800",
    "end": "908566"
  },
  {
    "text": "来推送出他们的配置 一些工程师只是更改代码",
    "start": "908700",
    "end": "914267"
  },
  {
    "text": "以进行代码推送 一些工程师开始\n使用 Redis 一些工程师开始使用 Chef\n来修改配置更改",
    "start": "914433",
    "end": "922833"
  },
  {
    "text": "其中一些大师\n遇到了问题 例如您进行代码更改\n或 Chef 融合",
    "start": "923067",
    "end": "927833"
  },
  {
    "text": "对于具有数百台\n机器的大型服务 这通常需要数十分钟",
    "start": "928200",
    "end": "933867"
  },
  {
    "text": "20分钟才能\n推出整个机群 而这在某些方面\n是不太理想的 因此，我们开始构建动态\n配置分发系统",
    "start": "934000",
    "end": "942433"
  },
  {
    "text": "该系统使用\nZooKeeper 作为机制",
    "start": "942667",
    "end": "948233"
  },
  {
    "text": "并且客户端能够侦听这些更改 因此我们能够将传播延迟",
    "start": "948567",
    "end": "954900"
  },
  {
    "text": "从几十分钟减少到数十秒 现在这已成为非常关键的组件",
    "start": "955067",
    "end": "960032"
  },
  {
    "text": "人们开始使用它来启用和禁用 能够进行实验和推出的功能",
    "start": "960167",
    "end": "965766"
  },
  {
    "text": "诸如此类 第三是我们开始开发一个支持",
    "start": "966033",
    "end": "972533"
  },
  {
    "start": "968000",
    "end": "1047000"
  },
  {
    "text": "快速产品迭代的\n新数据存储 我可以在这里给出\n的最好的例子是 我们在2016年初\n进行了一个项目",
    "start": "972667",
    "end": "980700"
  },
  {
    "text": "在我们数据库的一个表中 我们实际上存储了\n列示内容的定价信息",
    "start": "980900",
    "end": "988100"
  },
  {
    "text": "非常不幸的是\n该房源实际上被锁定 为整数而不是数值",
    "start": "988333",
    "end": "993533"
  },
  {
    "text": "所以我们只能向人们收取\n单价为整数的费用，假如是 100.50美元，我们将无法\n向他们收取50美分的费用",
    "start": "993900",
    "end": "1000867"
  },
  {
    "text": "因此为了产品能够收取美分",
    "start": "1001267",
    "end": "1007033"
  },
  {
    "text": "我们需要在表中添加一列 但不幸的是表本身\n有数百 GB 的数据",
    "start": "1007167",
    "end": "1013866"
  },
  {
    "text": "要进行架构更改 通常需要几周才能完成",
    "start": "1014000",
    "end": "1018333"
  },
  {
    "text": "因此我们意识到 我们需要更好的数据存储支持 以支持快速的产品迭代",
    "start": "1019400",
    "end": "1026433"
  },
  {
    "text": "因此非常常见的产品要求是 我希望能够在这些\n数据库中添加列",
    "start": "1026700",
    "end": "1032732"
  },
  {
    "text": "某些数据库表\n能够做实验 有时产品团队\n甚至无法确定",
    "start": "1032867",
    "end": "1040367"
  },
  {
    "text": "这样的列从长远来看\n是否有用 他们只是想尝试\n看看是否可行",
    "start": "1040500",
    "end": "1045766"
  },
  {
    "start": "1047000",
    "end": "1110000"
  },
  {
    "text": "因此我们开始做的第四个更改\n是突变事件传播 这实际上与消息总线非常相似",
    "start": "1047700",
    "end": "1054367"
  },
  {
    "text": "在这种情况下 源服务就像数据库",
    "start": "1054667",
    "end": "1059967"
  },
  {
    "text": "我们希望将数据库突变更改 传播到下游服务",
    "start": "1060100",
    "end": "1065700"
  },
  {
    "text": "因此在此之前，我们\n实际上只是让 我们的服务直接读取 MySQL bin 日志，但\n它是非常",
    "start": "1067300",
    "end": "1074433"
  },
  {
    "text": "特定于 MySQL 的格式\n对下游客户不是很友好 所以我们做的第一个版本",
    "start": "1074567",
    "end": "1079933"
  },
  {
    "text": "实际上是暂停了\nMySQL bin 日志格式 并使用JSON 或Thrift脚本",
    "start": "1080200",
    "end": "1086867"
  },
  {
    "text": "发布了平台无关的格式 以便下游客户\n可以很容易地使用它",
    "start": "1087000",
    "end": "1091767"
  },
  {
    "text": "随着时间的推移，我们\n对这些功能进行了增强 以支持更多的数据存储\n现在",
    "start": "1092033",
    "end": "1096966"
  },
  {
    "text": "此类功能不仅\n适用于 MySQL 还适用于 DynamoDB 因此下游服务",
    "start": "1097700",
    "end": "1103467"
  },
  {
    "text": "不应该知道上游\n数据存储是 MySQL 或 DynamoDB",
    "start": "1103733",
    "end": "1109133"
  },
  {
    "start": "1110000",
    "end": "1145000"
  },
  {
    "text": "然后最后一件事就是我们开始\n启用 Java 服务开发",
    "start": "1110500",
    "end": "1115700"
  },
  {
    "text": "我们经营 Ruby 商店\n已经很多年了 有许多不同的存储库 Ruby 拥有非常丰富的库\n可以与所有下游服务",
    "start": "1116800",
    "end": "1126033"
  },
  {
    "text": "或数据存储\n或实验性框架进行通信 但是对 Java 来说，有\n许多类似功能在 Java 中",
    "start": "1126167",
    "end": "1131767"
  },
  {
    "text": "是没有的\n所以我们开始进行开发 确保 Java 和 Ruby 未来在我们公司平分秋色",
    "start": "1132033",
    "end": "1138500"
  },
  {
    "text": "无论是在库数量 还是监视数量等方面",
    "start": "1138700",
    "end": "1144300"
  },
  {
    "start": "1145000",
    "end": "1195000"
  },
  {
    "text": "最后，我们将致力于路由 从数据库到服务的查询 所以我们使用了\nActive Record",
    "start": "1145667",
    "end": "1152500"
  },
  {
    "text": "从 Ruby 与数据库进行通信 因此有些表\n例如侦听表",
    "start": "1152633",
    "end": "1160033"
  },
  {
    "text": "我们想使其成为一种服务\n侦听服务 因此要捕获",
    "start": "1160167",
    "end": "1165700"
  },
  {
    "text": "从 Ruby 层到 各服务的所有流量非常困难",
    "start": "1165833",
    "end": "1171100"
  },
  {
    "text": "所以我们开始建立\n实际记录适配器 它仍然允许工程师\n编写旧的路由查询",
    "start": "1171233",
    "end": "1177966"
  },
  {
    "text": "但是适配器非常聪明 能够将某些查询路由到服务",
    "start": "1178167",
    "end": "1183400"
  },
  {
    "text": "而不是数据库表 实际上，这使得 将一个数据库表移植到\n我们所谓的",
    "start": "1183533",
    "end": "1191600"
  },
  {
    "text": "commodo 服务\n上变得非常容易 2016年底前的\n情况就介绍完了",
    "start": "1191733",
    "end": "1197733"
  },
  {
    "start": "1195000",
    "end": "1238000"
  },
  {
    "text": "现在我将交\n给同事梁先生，让他 谈论我们在\n2017和2018年的工作",
    "start": "1197933",
    "end": "1202966"
  },
  {
    "text": "谢谢大家 谢谢",
    "start": "1203800",
    "end": "1208667"
  },
  {
    "text": "所以在2017年初 在基础设施方面",
    "start": "1210300",
    "end": "1215600"
  },
  {
    "text": "我们非常坚信 面向服务的架构",
    "start": "1215733",
    "end": "1221200"
  },
  {
    "text": "是我们真正需要 为实现快速\n的产品开发建立的",
    "start": "1221333",
    "end": "1226400"
  },
  {
    "text": "但另一方面\n产品工程师 他们对于构建服务",
    "start": "1226967",
    "end": "1233667"
  },
  {
    "text": "仍然很犹豫 实际上他们有很好的理由",
    "start": "1233800",
    "end": "1239033"
  },
  {
    "start": "1238000",
    "end": "1350000"
  },
  {
    "text": "这就像一张 不同的配置依赖关系图 工程师在构建",
    "start": "1239667",
    "end": "1247667"
  },
  {
    "text": "新服务时需要创建或维护它们 所以这很容易\n不同步，对吧？",
    "start": "1247933",
    "end": "1255233"
  },
  {
    "text": "对某些工作了很长\n时间的工程师而言 这可能不是问题",
    "start": "1255433",
    "end": "1261232"
  },
  {
    "text": "但是对于新手来说，这就\n像一个难题，对吗？ 因此",
    "start": "1261367",
    "end": "1266566"
  },
  {
    "text": "很可能有人花了两个星期 来推出一项新服务",
    "start": "1266700",
    "end": "1271933"
  },
  {
    "text": "这对于我们的产品工程师来说\n确实是痛点",
    "start": "1272333",
    "end": "1277067"
  },
  {
    "text": "所以在2017年 我们开始构建称为 OneTouch 服务\n配置管理的工具",
    "start": "1277433",
    "end": "1284933"
  },
  {
    "text": "基本上\n我们构建此框架 是让开发人员可以",
    "start": "1285167",
    "end": "1293900"
  },
  {
    "text": "在同一仓库中维护\n不同的配置及其项目源代码 配置包括秘钥",
    "start": "1294200",
    "end": "1302333"
  },
  {
    "text": "部署板应用 告警文件 所以基本上您过去",
    "start": "1302533",
    "end": "1309367"
  },
  {
    "text": "在另一个存储库中 在 Chef 中\n在部署板应用中 报警库中所做的所有事情\n现在都可以在源代码所在的",
    "start": "1309567",
    "end": "1316833"
  },
  {
    "text": "同一目录中的 同一位置处 一起执行所有这些操作 因此，您不仅可以\n使用代码更新配置",
    "start": "1316967",
    "end": "1326933"
  },
  {
    "text": "您也可以将它们一起部署 因此，我们可以实现\n这种不变的基础设施结构",
    "start": "1327067",
    "end": "1333067"
  },
  {
    "text": "我们始终可以安全地可进 可退的使用",
    "start": "1333233",
    "end": "1338867"
  },
  {
    "text": "具有相同配置和相同源代码\n的相同服务映像 这实际上在创建新服务方面",
    "start": "1339033",
    "end": "1344700"
  },
  {
    "text": "帮我们节省了大约两个星期\n的时间 同样，一旦启动了一项新服务",
    "start": "1344933",
    "end": "1350967"
  },
  {
    "start": "1350000",
    "end": "1429000"
  },
  {
    "text": "我们就需要实现业务逻辑 但是在面向服务的体系结构中",
    "start": "1351100",
    "end": "1356033"
  },
  {
    "text": "您不仅要有业务逻辑 还需要整个服务间通信",
    "start": "1356300",
    "end": "1362500"
  },
  {
    "text": "所以，看看这张图 除了基本的业务逻辑之外",
    "start": "1362767",
    "end": "1368333"
  },
  {
    "text": "您还需要构建许多其它内容 例如传输 那么其它服务如何与\n您的服务进行通信？",
    "start": "1368467",
    "end": "1374400"
  },
  {
    "text": "基本上您需要同时提供 Java 和 Ruby 客户端",
    "start": "1374733",
    "end": "1380133"
  },
  {
    "text": "在服务器端 您需要添加服务指标",
    "start": "1380400",
    "end": "1385600"
  },
  {
    "text": "以便可以妥善地进行监控 并可以使用指标\n创建自己的仪表板",
    "start": "1385933",
    "end": "1392200"
  },
  {
    "text": "然后，您还可以从那里\n创建告警文件 以便可以",
    "start": "1392367",
    "end": "1397533"
  },
  {
    "text": "在服务发生故障时得到通知 并且在客户端和服务器端 您还需要构建基本的弹性模式",
    "start": "1397667",
    "end": "1406100"
  },
  {
    "text": "重试断路 超时等事情 但问题是这都需要时间",
    "start": "1406233",
    "end": "1413300"
  },
  {
    "text": "因此，工程师们 通常习惯于将时间花在",
    "start": "1413433",
    "end": "1419100"
  },
  {
    "text": "建立核心业务逻辑上 以便可以很快投入生产",
    "start": "1419267",
    "end": "1424367"
  },
  {
    "text": "因此他们必须花费大量时间\n来完成所有这些计划工作 所以现在我们发现了这样如何\n对吧？",
    "start": "1424567",
    "end": "1431533"
  },
  {
    "start": "1429000",
    "end": "1449000"
  },
  {
    "text": "那如果您仅能用 某种标准的服务\n接口定义语言",
    "start": "1431667",
    "end": "1437632"
  },
  {
    "text": "例如一个框架\n来定义服务 API 那么基本上对于您的数据模式",
    "start": "1437767",
    "end": "1442733"
  },
  {
    "text": "和服务接口方法 根据其 IDL 文件 我们可以为您生成代码",
    "start": "1442933",
    "end": "1448500"
  },
  {
    "text": "所以基本上您只需创建\n您的服务 IDL 文件 然后从框架里\n我们可以给您提供所有这些",
    "start": "1448700",
    "end": "1455100"
  },
  {
    "start": "1449000",
    "end": "1541000"
  },
  {
    "text": "所以基本上是从 IDL 文件中 生成的服务和代码 它们提供标准化的\n服务器指标",
    "start": "1455233",
    "end": "1463467"
  },
  {
    "text": "我们为您提供了请求\n和响应模式的验证 我们提供了一种\n基于 Thrift",
    "start": "1463700",
    "end": "1472767"
  },
  {
    "text": "而非基于JSON 的\n标准化传输方式 因为过去的一切都是\n基于 HTTP 而非 JSON 但是现在，我们实际上已经\n支持基于",
    "start": "1472900",
    "end": "1479867"
  },
  {
    "text": "Thrift 而非 IDGP 客户端方面，我们提供了\nJava 和 Ruby 客户端",
    "start": "1480000",
    "end": "1484867"
  },
  {
    "text": "它们在指标和 客户端的弹性功能上",
    "start": "1485067",
    "end": "1490966"
  },
  {
    "text": "都遵循相同的最佳实践 也进行相同的序列化\n和反序列化处理",
    "start": "1491133",
    "end": "1499033"
  },
  {
    "text": "所以一切不但清楚\n而且还是免费的，对吗？ 因此，我们看到",
    "start": "1499233",
    "end": "1505033"
  },
  {
    "text": "一个团队实际上可以\n推出一项新服务 大概在三周之内",
    "start": "1507267",
    "end": "1512900"
  },
  {
    "text": "所以这是与以前相比 一个重大的进步",
    "start": "1513133",
    "end": "1518067"
  },
  {
    "text": "所以我们非常保守地估计",
    "start": "1518200",
    "end": "1523267"
  },
  {
    "text": "这项工作实际上\n可以节省两到三个星期的 开发时间",
    "start": "1523400",
    "end": "1529167"
  },
  {
    "text": "我认为今天在 Airbnb 中",
    "start": "1529467",
    "end": "1534367"
  },
  {
    "text": "每天创建新服务 和发布新产品的数量非常明显",
    "start": "1535067",
    "end": "1539867"
  },
  {
    "start": "1541000",
    "end": "1594000"
  },
  {
    "text": "同样对于分布式服务\n体系结构中的所有服务 调试成为一个问题",
    "start": "1541900",
    "end": "1549633"
  },
  {
    "text": "所以这比以前 一切都在 monorail 时\n要困难得多",
    "start": "1549767",
    "end": "1555900"
  },
  {
    "text": "并且理解 所有服务从请求到",
    "start": "1556133",
    "end": "1563067"
  },
  {
    "text": "返回响应的整个\n生命周期也很重要 因此我们的监控团队",
    "start": "1563300",
    "end": "1571200"
  },
  {
    "text": "开始着手实现分布式跟踪 该跟踪基本上无缝地集成到了\nJava 和",
    "start": "1571433",
    "end": "1579033"
  },
  {
    "text": "Ruby 的服务框架中 所有这些都是免费的",
    "start": "1579167",
    "end": "1584100"
  },
  {
    "text": "您无需执行任何其它操作 这在 调试问题",
    "start": "1584233",
    "end": "1591900"
  },
  {
    "text": "和理解性能瓶颈时\n变得非常方便 除了服务框架",
    "start": "1592133",
    "end": "1597800"
  },
  {
    "start": "1594000",
    "end": "1667000"
  },
  {
    "text": "还有很多其它\n类似的中间件服务 我们称它们为",
    "start": "1597967",
    "end": "1603500"
  },
  {
    "text": "支持 monorail 以外\n请求的整个生命周期 在 monorail 中，什么都有",
    "start": "1604033",
    "end": "1609700"
  },
  {
    "text": "这就是为什么生产工程师 想要在 monorail 中\n进行开发的原因",
    "start": "1609833",
    "end": "1615167"
  },
  {
    "text": "因为他们不必担心会话 用户身份验证等事情 但是当他们在 monorail 之外",
    "start": "1615300",
    "end": "1621467"
  },
  {
    "text": "进行服务时\n他们必须考虑所有这些 但是当然从您的过程来看",
    "start": "1622033",
    "end": "1627267"
  },
  {
    "text": "我们只需要以开箱即用\n的方式提供所有这些 因此，基础设施组织\n的所有不同团队",
    "start": "1627433",
    "end": "1635200"
  },
  {
    "text": "都开始研究所有\n这些全局中间件服务 从用户身份验证",
    "start": "1635400",
    "end": "1641000"
  },
  {
    "text": "到会话数据\n用户会话数据管理 转换",
    "start": "1641233",
    "end": "1646200"
  },
  {
    "text": "安全和风险检查 权限控制以及媒体支持",
    "start": "1646567",
    "end": "1653767"
  },
  {
    "text": "还有后来产生的响应数据 内容审核\n清理等这类事情",
    "start": "1653933",
    "end": "1659100"
  },
  {
    "text": "所以基本上整个\n请求生命周期 可以在 monorail 之外 通过所有这些全局\n中间件服务得到支持",
    "start": "1659300",
    "end": "1666633"
  },
  {
    "start": "1667000",
    "end": "1725000"
  },
  {
    "text": "到2017年底 我们很高兴地看到",
    "start": "1667000",
    "end": "1674033"
  },
  {
    "text": "已经投入生产的服务数量 因此从2018年初开始",
    "start": "1674333",
    "end": "1679667"
  },
  {
    "text": "我们已经有两个\n主要的 API 服务 投入生产",
    "start": "1679800",
    "end": "1684900"
  },
  {
    "text": "并实际处理了\n生产流量的一小部分 其中一个就是民宿 PDP",
    "start": "1685033",
    "end": "1692067"
  },
  {
    "text": "PDP 代表产品详细信息页面 基本上是您所说的有关列示\n内容详细信息的页面",
    "start": "1692200",
    "end": "1697900"
  },
  {
    "text": "因此，该服务已经 基本在此服务框架\n的基础上启动",
    "start": "1698167",
    "end": "1703900"
  },
  {
    "text": "另一个是 P2 Explore 服务 因此，两者可能都是当时",
    "start": "1704167",
    "end": "1713133"
  },
  {
    "text": "Airbnb 吞吐量最高的\n两个 API 服务 但是当时由于某些实际原因",
    "start": "1713267",
    "end": "1720333"
  },
  {
    "text": "流量仍通过 monorail\n进行路由 因此我们接下来要构建的",
    "start": "1720500",
    "end": "1727667"
  },
  {
    "start": "1725000",
    "end": "1852000"
  },
  {
    "text": "就是 API 服务框架 原因仅仅是\n为了能够服务于",
    "start": "1727967",
    "end": "1733733"
  },
  {
    "text": "monorail 以外的请求 所以您需要做\n很多其它的事情 例如安全策略强度",
    "start": "1733967",
    "end": "1740500"
  },
  {
    "text": "验证用户是否被允许提出访问请求 访问和查看列示内容数据",
    "start": "1740800",
    "end": "1748632"
  },
  {
    "text": "因此您需要进行\n一系列策略检查 为了返回响应\n需要进行刷新",
    "start": "1748767",
    "end": "1753967"
  },
  {
    "text": "需要删除所有\n敏感的API数据 所有这些事情都要做",
    "start": "1754100",
    "end": "1760200"
  },
  {
    "text": "但在 monorail 中，一切\n已经集成了 所以您不必担心\n但是在 API 服务中",
    "start": "1760500",
    "end": "1766633"
  },
  {
    "text": "您必须这样做，但仍然 我们需要审计所有这些 正在执行所有策略检查的服务",
    "start": "1766867",
    "end": "1773667"
  },
  {
    "text": "如果我们没有一个\n框架来支持它 那就不容易了",
    "start": "1773967",
    "end": "1778867"
  },
  {
    "text": "所以从2018年开始 我们开始研究\n此 API 服务框架",
    "start": "1779133",
    "end": "1784299"
  },
  {
    "text": "它基本上仍然建立\n在 IDL 服务的基础上 因此基本上对于每一个重要事项",
    "start": "1784433",
    "end": "1791433"
  },
  {
    "text": "您都可以标明\n您要如何执行策略检查 如何进行响应刷新",
    "start": "1791700",
    "end": "1797100"
  },
  {
    "text": "您只需告诉框架 要放置什么代码即可\n我们来生成代码 以真正调用这些刷新服务",
    "start": "1797267",
    "end": "1804732"
  },
  {
    "text": "代表您的服务调用那些\n策略检查服务 并且安全团队也很\n容易进行审计",
    "start": "1804867",
    "end": "1811567"
  },
  {
    "text": "每个面向公众的 API 端点 都在执行所有这些必要的检查",
    "start": "1811700",
    "end": "1816533"
  },
  {
    "text": "因此，这确实加快了 面向公众的服务的启动速度",
    "start": "1817933",
    "end": "1825867"
  },
  {
    "text": "包括民宿 PDP 结账、发布信息\n管理信息",
    "start": "1826433",
    "end": "1832367"
  },
  {
    "text": "以及探索 今天我们的生产流量\n中可能已经有20",
    "start": "1832633",
    "end": "1838567"
  },
  {
    "text": "或30个 公共 API 服务",
    "start": "1838833",
    "end": "1844200"
  },
  {
    "text": "因此我们从基础设施\n方面构建的框架 确实有很大帮助",
    "start": "1844633",
    "end": "1851500"
  },
  {
    "start": "1852000",
    "end": "1920000"
  },
  {
    "text": "而另一件事是路由流量，对吗？ 早在2017年，我们仍然",
    "start": "1852267",
    "end": "1858067"
  },
  {
    "text": "非常依赖 monorail\n作为 API 层 因此其它 API 请求\n仍需通过 monorail",
    "start": "1858200",
    "end": "1864600"
  },
  {
    "text": "路由后才进入\n其中一个 API 服务 所以我们从2017年开始\n了这项工作",
    "start": "1864833",
    "end": "1871833"
  },
  {
    "text": "它基本上是一个\n基于 Java 的 API 网关 不仅提供路由",
    "start": "1872033",
    "end": "1879433"
  },
  {
    "text": "还与所有这些全局\n中间件服务进行通信",
    "start": "1879567",
    "end": "1884433"
  },
  {
    "text": "以收集会话数据 执行用户身份验证 在必要时进行转换",
    "start": "1884600",
    "end": "1892700"
  },
  {
    "text": "生成所有这些请求 以及与请求一起 传播到所有下游服务",
    "start": "1892900",
    "end": "1901100"
  },
  {
    "text": "所需的上下文数据 因此，今天我们已经为",
    "start": "1901233",
    "end": "1906900"
  },
  {
    "text": "大约10到12个 API 服务\n启动了API 网关 已经为大约20％的生产流量\n提供服务",
    "start": "1907067",
    "end": "1915600"
  },
  {
    "text": "并且我们每天也都在\n推出新服务 这就是当前架构的样子",
    "start": "1915967",
    "end": "1925267"
  },
  {
    "start": "1920000",
    "end": "1994000"
  },
  {
    "text": "这就是民宿 PDP\n也就是我们的 PSOA 服务 因此，请求仍然通过\nCharon 负载均衡器进入",
    "start": "1925933",
    "end": "1933333"
  },
  {
    "text": "之后您可以看到称为\nHyperloop 的东西 这是一个执行",
    "start": "1933667",
    "end": "1939833"
  },
  {
    "text": "服务端渲染的\nNode.js 集群 从那之后请求\n将进入 API 网关",
    "start": "1940167",
    "end": "1948100"
  },
  {
    "text": "API 网关将为您执行\n所有必要的检查 为您收集所有必要的数据",
    "start": "1948233",
    "end": "1953732"
  },
  {
    "text": "然后传递给正确的 API 服务 因此对于当前案例，就是\n民宿 P3 服务",
    "start": "1953867",
    "end": "1960200"
  },
  {
    "text": "所以从 P3 服务开始 它就是在 API 服务框架上运行 所以，安全策略检查将\n代表该服务执行",
    "start": "1960533",
    "end": "1968900"
  },
  {
    "text": "您无需执行任何操作 然后从那里\n该请求将被散布到 数据服务或派生数据服务",
    "start": "1969133",
    "end": "1976467"
  },
  {
    "text": "然后数据服务将与数据库或其它\n派生数据存储进行通信",
    "start": "1976633",
    "end": "1981667"
  },
  {
    "text": "如果您还记得 Xinyao\n先前展示的内容",
    "start": "1982300",
    "end": "1988033"
  },
  {
    "text": "从整体架构上，与三年前相比 这是非常不同的",
    "start": "1988167",
    "end": "1993500"
  },
  {
    "text": "所以现在的问题是\nSOA 真的有帮助吗？ 在性能方面",
    "start": "1993633",
    "end": "1999667"
  },
  {
    "start": "1994000",
    "end": "2115000"
  },
  {
    "text": "当我们启动 P3 服务时 即民宿 PDP 时 基本上我们看到了\n延迟",
    "start": "1999967",
    "end": "2008133"
  },
  {
    "text": "减少为原来的十分之一\n从1200毫秒降低",
    "start": "2008467",
    "end": "2013500"
  },
  {
    "text": "到只有220毫秒 而探索服务\n性能提升2.5倍",
    "start": "2013633",
    "end": "2022033"
  },
  {
    "text": "并且定价服务的\n性能提高了3倍 可用性也有所改善\n单页服务",
    "start": "2022300",
    "end": "2030267"
  },
  {
    "text": "基本上具有很好的隔离性 因此不再依赖 monorail",
    "start": "2030567",
    "end": "2036466"
  },
  {
    "text": "所以可用性得到改善，您知道 您可以提高可用性",
    "start": "2036667",
    "end": "2042633"
  },
  {
    "text": "因为您不再依赖与\nmonorail 通信 还有一致性",
    "start": "2042833",
    "end": "2048133"
  },
  {
    "text": "例如我们的定价服务 现在有了集中的定价逻辑",
    "start": "2048433",
    "end": "2053600"
  },
  {
    "text": "所以过去的定价\n信息分散 在不同的页面上\n因此在发起预订请求时",
    "start": "2053800",
    "end": "2060433"
  },
  {
    "text": "和预定房源时，您可以看到 同一列示内容的不同价格 因此，有了集中式服务",
    "start": "2060600",
    "end": "2067800"
  },
  {
    "text": "我们在不同的事上\n都具有很好的一致性 因此，服务体系架构",
    "start": "2068033",
    "end": "2076033"
  },
  {
    "text": "确实对快速产品迭代有帮助 所以现在我们有了不同的业务",
    "start": "2076233",
    "end": "2083900"
  },
  {
    "text": "我们有了民宿\n有了体验，有了中国 业务部门，有了精选",
    "start": "2084067",
    "end": "2089833"
  },
  {
    "text": "还有餐厅 而且我们看到所有不同",
    "start": "2090100",
    "end": "2096899"
  },
  {
    "text": "业务部门的产品开发\n和发布速度非常快 我们正在共同构建的第三个服务平台",
    "start": "2097133",
    "end": "2104033"
  },
  {
    "text": "确实有助于启用\nAirbnb 平台 该平台不仅是房屋租赁市场",
    "start": "2104200",
    "end": "2111667"
  },
  {
    "text": "它实际上是一个端到端的\n旅行平台 当然，随着变化的发生",
    "start": "2111900",
    "end": "2119467"
  },
  {
    "text": "从整体架构向\n微服务架构的转变 我们开始看到新的\n或不同的基础设施挑战",
    "start": "2119600",
    "end": "2129133"
  },
  {
    "text": "因此随着 SOA 的发展 随着服务数量的增加 很多事情都改变了",
    "start": "2129533",
    "end": "2136432"
  },
  {
    "text": "因此流量模式发生了变化 数据加载模式发生了变化 并且您在\nZooKeeper 上投放的",
    "start": "2136633",
    "end": "2145733"
  },
  {
    "text": "服务数量也大量增加 因此我们开始通过\n我们的技术堆栈",
    "start": "2145867",
    "end": "2152599"
  },
  {
    "text": "看到很多不同的\n可扩展性和可靠性问题 例如服务发现",
    "start": "2152967",
    "end": "2158467"
  },
  {
    "start": "2157000",
    "end": "2228000"
  },
  {
    "text": "在 Airbnb，我们拥有一个\n称为智能堆栈 的元素，它是我们内部构建的\n服务发现堆栈",
    "start": "2158700",
    "end": "2165467"
  },
  {
    "text": "因此 ZooKeeper\n是我们服务发现堆栈的核心",
    "start": "2165900",
    "end": "2170667"
  },
  {
    "text": "随着 monorail 里\n服务依赖关系的增加",
    "start": "2172033",
    "end": "2177400"
  },
  {
    "text": "我们开始看到很多\nZooKeeper 存在的问题 这仅仅是因为我们仍然\n在 SOA 迁移中",
    "start": "2177567",
    "end": "2185432"
  },
  {
    "text": "这意味着我们正在将 所有200多个 API 端点",
    "start": "2185700",
    "end": "2190533"
  },
  {
    "text": "从 monorail\n迁移到服务 但是今天仍然需要\n将所有这种依赖项",
    "start": "2190733",
    "end": "2196067"
  },
  {
    "text": "添加到 monorail 这个数字每天都在增加 因此在 monorail 方面\n您将看到与ZooKeeper",
    "start": "2196300",
    "end": "2205900"
  },
  {
    "text": "通信的不同问题 因此从基本上说\n监控数量增加了 连接也增加了",
    "start": "2206067",
    "end": "2213333"
  },
  {
    "text": "另外，运行 ZooKeeper\n永远是很痛苦的事情",
    "start": "2213600",
    "end": "2218967"
  },
  {
    "text": "通常 ZooKeeper 的\n稳定性问题",
    "start": "2219567",
    "end": "2224667"
  },
  {
    "text": "会导致服务宕机甚至站点宕机 我们的服务发现中的另一个组件",
    "start": "2224833",
    "end": "2231333"
  },
  {
    "start": "2228000",
    "end": "2307000"
  },
  {
    "text": "是 HAProxy HAProxy 具有名为\n\"正常配置重启\"的功能",
    "start": "2232233",
    "end": "2238967"
  },
  {
    "text": "这意味着您需要在\n进行配置更改时 重新启动新的\nHAProxy 实例",
    "start": "2239333",
    "end": "2246167"
  },
  {
    "text": "而在过去，当服务拓扑\n结构简单时 操作上没问题",
    "start": "2246533",
    "end": "2253132"
  },
  {
    "text": "但是现在当在 monorail\n中有200多个依赖项时 这可能只是一场噩梦",
    "start": "2253800",
    "end": "2260567"
  },
  {
    "text": "该屏幕截图\n来自今年初 当时我们的服务发现\n堆栈出现问题",
    "start": "2260867",
    "end": "2268900"
  },
  {
    "text": "您可以看到 HAProxy 实例\n的数量 一下子增加到30左右",
    "start": "2269067",
    "end": "2275033"
  },
  {
    "text": "这是因为不断有服务备份 到 monorail 时\n出现 flapping 的情况",
    "start": "2275333",
    "end": "2282333"
  },
  {
    "text": "这给我们带来了很多\n可扩展性问题 因此，我们在今年早些时候\n进行了救火工作",
    "start": "2282567",
    "end": "2290400"
  },
  {
    "text": "现在我们是在服务发现堆栈\n中启动 Envoy 来替代 HAProxy",
    "start": "2290600",
    "end": "2297467"
  },
  {
    "text": "与 HAProxy 相比\nEnvoy 是更现代的技术 并且它还具有许多不错的功能",
    "start": "2297633",
    "end": "2304600"
  },
  {
    "text": "可供我们的服务网格利用 另外，我们正在处理的\nEC2 实例的数量",
    "start": "2304867",
    "end": "2311867"
  },
  {
    "start": "2307000",
    "end": "2362000"
  },
  {
    "text": "今天正在运行和维护的数量 已经增加了很多 这给我们带来了很多运行\n负载问题",
    "start": "2312067",
    "end": "2322133"
  },
  {
    "text": "因为例如每次 AWS 要求我们运行\n我们的操作系统时",
    "start": "2322567",
    "end": "2328000"
  },
  {
    "text": "我们基本上都需要重新启动 整个堆栈中的所有服务",
    "start": "2328133",
    "end": "2333067"
  },
  {
    "text": "这对我们来说是一个\n痛苦的操作 还有另一件事",
    "start": "2333633",
    "end": "2339167"
  },
  {
    "text": "我们正面临数量\n惊人的 EC2 实例",
    "start": "2339333",
    "end": "2345767"
  },
  {
    "text": "那我们该怎么办？ 如果我们将所有时间都花在进行\n这种基础设施操作上",
    "start": "2345900",
    "end": "2351299"
  },
  {
    "text": "那我们就没有时间构建 新 SOA 必需和必要的其它\n基础设施技术",
    "start": "2351433",
    "end": "2358766"
  },
  {
    "text": "因此，今天作为替代方案 我们正在考虑通过整个",
    "start": "2359000",
    "end": "2364167"
  },
  {
    "start": "2362000",
    "end": "2385000"
  },
  {
    "text": "堆栈构建\nKubernetes 消息总线也是如此 这非常有趣，对吧？\n您可以在基于 Kafka",
    "start": "2364533",
    "end": "2372367"
  },
  {
    "text": "的消息总线中 看到消息提取数量猛增",
    "start": "2372600",
    "end": "2378967"
  },
  {
    "text": "从我们在2017年夏季\n提供服务的时间开始 这个数量已经跃升了",
    "start": "2379333",
    "end": "2385733"
  },
  {
    "text": "分区的数量、主题的数量 都大大增加了",
    "start": "2385967",
    "end": "2390700"
  },
  {
    "text": "诸如此类 我们的 Kafka 团队非常小",
    "start": "2391100",
    "end": "2398133"
  },
  {
    "text": "只有两名工程师 因此，处理方面，我们并不占优势 对于这一部分，我们正在\n积极地将 Kinesis",
    "start": "2398433",
    "end": "2408700"
  },
  {
    "text": "作为替代产品 基本上，这就是我们在过去",
    "start": "2408833",
    "end": "2413733"
  },
  {
    "start": "2410000",
    "end": "2456000"
  },
  {
    "text": "四年中所做的事情： 基本上在2015年 我们一直在为确保站点稳定\n而进行救火工作",
    "start": "2413867",
    "end": "2421033"
  },
  {
    "text": "2016年，我们花了一些时间 思考应该建立什么样\n的基础性设施",
    "start": "2421500",
    "end": "2428867"
  },
  {
    "text": "2017年我们知道 SOA 对我们有意义\n因此我们开始构建",
    "start": "2429300",
    "end": "2436033"
  },
  {
    "text": "服务框架、服务平台 使人们能够以最佳的方式",
    "start": "2436200",
    "end": "2441367"
  },
  {
    "text": "快速建立服务 2018年基本上是公司政策",
    "start": "2441600",
    "end": "2447800"
  },
  {
    "text": "作为公司优先事项 我们知道我们需要\n加倍提高 SOA 所以今天有很多工作要做",
    "start": "2447933",
    "end": "2454466"
  },
  {
    "text": "这就是我们经历的旅程 对于架构的演变",
    "start": "2455033",
    "end": "2460633"
  },
  {
    "start": "2456000",
    "end": "2508000"
  },
  {
    "text": "说到教训的话 我们认为 SOA",
    "start": "2461133",
    "end": "2465900"
  },
  {
    "text": "是一种扩展流量增长 和组织成长的方法",
    "start": "2467133",
    "end": "2472067"
  },
  {
    "text": "首先，就组织增长的话 与公司政策基本是保持一致的",
    "start": "2472333",
    "end": "2477800"
  },
  {
    "text": "其次\n很多基础设施问题",
    "start": "2478133",
    "end": "2483233"
  },
  {
    "text": "我们发现得有点晚了 所以当我们开始提供\n所有服务时",
    "start": "2483633",
    "end": "2488700"
  },
  {
    "text": "要是能提早预见到\n这个问题就好了 以便我们可以事先构建",
    "start": "2489000",
    "end": "2494067"
  },
  {
    "text": "当然现在我们已经开始这样做了 就像现代化我们的服务网格\n现代化我们的数据存储库",
    "start": "2494300",
    "end": "2500033"
  },
  {
    "text": "都是为了以面向服务的体系结构 更好地适应未来的增长类型",
    "start": "2500233",
    "end": "2507700"
  },
  {
    "start": "2508000",
    "end": "2530000"
  },
  {
    "text": "就是这样 现在我们是不是可以\n进入开放问答环节？",
    "start": "2508200",
    "end": "2515100"
  },
  {
    "text": "是的，我想我们\n稍后可以开始问答环节 如果您对此有任何疑问",
    "start": "2517533",
    "end": "2524567"
  },
  {
    "text": "请提出来，我们\n很乐意讨论 谢谢大家参加 谢谢",
    "start": "2524700",
    "end": "2528700"
  }
]