[
  {
    "text": "hi guys thanks for making the Friday morning 9 a.m. session I know after the",
    "start": "0",
    "end": "6330"
  },
  {
    "text": "party last night must be rough so really appreciate you guys being here my name is Abhishek",
    "start": "6330",
    "end": "12450"
  },
  {
    "text": "Singh I'm the senior product manager on the elastic beanstalk team and I've got Colin here who's one of our partners and",
    "start": "12450",
    "end": "18960"
  },
  {
    "text": "he's gonna be talking about our customer story let's quickly go ahead and look at what we'll be learning in the session",
    "start": "18960",
    "end": "25590"
  },
  {
    "text": "today or the agenda we're going to be talking about elastic Beanstalk versus doing it yourself if you will we'll look",
    "start": "25590",
    "end": "33570"
  },
  {
    "text": "at developer workflows on deploying sample applications on elastic Beanstalk",
    "start": "33570",
    "end": "38840"
  },
  {
    "text": "so as I was saying we're gonna look at developer workflows a demo of what we'll",
    "start": "38840",
    "end": "45450"
  },
  {
    "text": "be doing with the sample application we'll go over some best practices and then walk you guys through the console",
    "start": "45450",
    "end": "51449"
  },
  {
    "text": "on how you would go use some of those best practices and then we'll talk about a customer story Colin's going to talk",
    "start": "51449",
    "end": "57809"
  },
  {
    "text": "about Royal Caribbean that's implemented their Royal Caribbean comm web app on",
    "start": "57809",
    "end": "63480"
  },
  {
    "text": "elastic Beanstalk so let's get started so after this session you guys should be",
    "start": "63480",
    "end": "69659"
  },
  {
    "text": "able to understand the benefits of using elastic Beanstalk versus doing it yourself will deploy a sample",
    "start": "69659",
    "end": "75420"
  },
  {
    "text": "application to elastic Beanstalk will also make the code available on github so that you guys can go and use that",
    "start": "75420",
    "end": "81930"
  },
  {
    "text": "code later we'll talk about modifying the application both the infrastructure",
    "start": "81930",
    "end": "86970"
  },
  {
    "text": "stock and the application stack we'll also talk about how to extend your application so that you can use",
    "start": "86970",
    "end": "93000"
  },
  {
    "text": "additional resources by simply defining configuration files in your source bundle will talk about debugging load",
    "start": "93000",
    "end": "101220"
  },
  {
    "text": "testing and scaling your applications to handle millions of web requests and we'll also talk about deployment options",
    "start": "101220",
    "end": "107549"
  },
  {
    "text": "available in the elastic Beanstalk so that you know which ones to choose or which ones are appropriate for your deployments finally we'll talk about",
    "start": "107549",
    "end": "115369"
  },
  {
    "text": "operational monitoring if you will so setting up alarms and notifications and",
    "start": "115369",
    "end": "120649"
  },
  {
    "text": "finally we will talk about using tags and the best practices around tags for cost management so let's get started",
    "start": "120649",
    "end": "128700"
  },
  {
    "text": "with what does elastic Beanstalk provide versus doing it yourself as you can see on the instance or the",
    "start": "128700",
    "end": "135660"
  },
  {
    "text": "application stock if you're a developer you no longer have to go provision PHP",
    "start": "135660",
    "end": "141900"
  },
  {
    "text": "or your lamp stock for example or install node and nginx if you're using a",
    "start": "141900",
    "end": "148200"
  },
  {
    "text": "node.js application Bienstock provides all of that for you all you need to do is simply bring your code let's talk",
    "start": "148200",
    "end": "157410"
  },
  {
    "text": "about what beatstock provides in terms of the infrastructure as you can see Bienstock provides two separate",
    "start": "157410",
    "end": "163290"
  },
  {
    "text": "infrastructure stacks we have a single instance stack which is really for low",
    "start": "163290",
    "end": "168390"
  },
  {
    "text": "cost development and we also have a load balanced auto scaling stack which is pre setup for production workloads and as",
    "start": "168390",
    "end": "175650"
  },
  {
    "text": "you will see today I'm using a load balancing auto scaled stock to run a simple application that's serving about",
    "start": "175650",
    "end": "182190"
  },
  {
    "text": "10,000 requests per second we'll also talk about web and worker tiers so these",
    "start": "182190",
    "end": "188370"
  },
  {
    "text": "are two tiers that Bienstock supports today a web tier is used for front-end applications or API backends if you will",
    "start": "188370",
    "end": "194730"
  },
  {
    "text": "and worker tiers are used for performing asynchronous work for example if you had",
    "start": "194730",
    "end": "200130"
  },
  {
    "text": "a front-end that collected email addresses the worker tier can then be used to send emails out or for image",
    "start": "200130",
    "end": "206670"
  },
  {
    "text": "processing if you have an application that collects a lot of images does processing and then store them in s3 you",
    "start": "206670",
    "end": "213420"
  },
  {
    "text": "can use the workers here to do that Beanstalk also provides you with a",
    "start": "213420",
    "end": "218700"
  },
  {
    "text": "unique domain name for all your applications so you don't have to actually go buy a custom domain if you don't want to we also do support custom",
    "start": "218700",
    "end": "226230"
  },
  {
    "text": "domains as you'll see in my demo which you can use in concert with about 53 so",
    "start": "226230",
    "end": "233820"
  },
  {
    "text": "let's quickly look at the pieces of information that you need to deploy your code in an elastic Beanstalk and this is",
    "start": "233820",
    "end": "239970"
  },
  {
    "text": "for any application on one of our supported platforms so Beanstalk supports eight different platforms today",
    "start": "239970",
    "end": "247220"
  },
  {
    "text": "we support Java both in a tomcat variant and also a generic Java variant on our",
    "start": "247220",
    "end": "254400"
  },
  {
    "text": "generic Java container you can run any JVM based application or any JVM based",
    "start": "254400",
    "end": "259470"
  },
  {
    "text": "language applications for example Scala or closure we support node PHP docker",
    "start": "259470",
    "end": "266940"
  },
  {
    "text": "dotnet Python Ruby and recently we added support for go again as the graphic",
    "start": "266940",
    "end": "275580"
  },
  {
    "text": "shows all you need is your code you need to know the region that you're deploying your code to this could be any one of",
    "start": "275580",
    "end": "282000"
  },
  {
    "text": "the nine regions where Beanstalk is supported you need to know your stack or container type which is one of the eight",
    "start": "282000",
    "end": "288330"
  },
  {
    "text": "platforms I mentioned the third choice you need to make is whether you're doing development work or production so you",
    "start": "288330",
    "end": "294930"
  },
  {
    "text": "choose between the single instance or the load balance with auto scaling and finally optionally you can choose to",
    "start": "294930",
    "end": "301830"
  },
  {
    "text": "create an RDS database I would point out that if you create an RDS database as part of your beanstalk environment the",
    "start": "301830",
    "end": "308490"
  },
  {
    "text": "lifecycle of the database is tied to the lifecycle of your environment so this is really good for development cases but",
    "start": "308490",
    "end": "314490"
  },
  {
    "text": "it's not something you want to use for production workloads because in production the lifecycle of your data is",
    "start": "314490",
    "end": "320340"
  },
  {
    "text": "generally different from the lifecycle of your application so that's a point to keep in mind so how can you deploy",
    "start": "320340",
    "end": "328680"
  },
  {
    "text": "applications to elastic Beanstalk we have three different ways that are supported today you can use the AWS",
    "start": "328680",
    "end": "335040"
  },
  {
    "text": "management console you can use one of our toolkits we have a toolkit for Eclipse and also plugin for visual",
    "start": "335040",
    "end": "341610"
  },
  {
    "text": "studio or you can use our elastic beanstalk CLI which is what I'll be demoing today so what's the workflow",
    "start": "341610",
    "end": "351120"
  },
  {
    "text": "that one needs to go through when you need to deploy an application to elastic Beanstalk in this case I'm using an ode",
    "start": "351120",
    "end": "357090"
  },
  {
    "text": "sample the URL for github is on the screen so you get started by installing",
    "start": "357090",
    "end": "362490"
  },
  {
    "text": "the elastic Beanstalk CLI which is a simple hip install then you can download",
    "start": "362490",
    "end": "368220"
  },
  {
    "text": "your code in this case I'm get cloning a sample application but this could be your code that you already have in a",
    "start": "368220",
    "end": "374100"
  },
  {
    "text": "folder or your code that you have in github that you can get clone the third step is to initialize the folder by",
    "start": "374100",
    "end": "380520"
  },
  {
    "text": "calling even it what this does is essentially tie your folder to an",
    "start": "380520",
    "end": "385590"
  },
  {
    "text": "application in elastic Beanstalk or in the cloud the fourth step is to follow",
    "start": "385590",
    "end": "391110"
  },
  {
    "text": "the prompts to configure your environment and I'll show you guys these steps in a demo a little later and",
    "start": "391110",
    "end": "396440"
  },
  {
    "text": "finally once you've configured your environment and your folder you go ahead and issue an EB create what",
    "start": "396440",
    "end": "402720"
  },
  {
    "text": "this does is now takes the configuration that's stored locally and creates an environment in elastic Beanstalk that",
    "start": "402720",
    "end": "408900"
  },
  {
    "text": "runs that application along with the configuration so obviously now that you",
    "start": "408900",
    "end": "414810"
  },
  {
    "text": "have your application deployed you want to go ahead and update and make changes and you want to keep on committing new",
    "start": "414810",
    "end": "420480"
  },
  {
    "text": "changes to the application so how does that workflow look like the step the",
    "start": "420480",
    "end": "425520"
  },
  {
    "text": "first step is obviously updating your code then you go ahead and add that code to your git repository git is not",
    "start": "425520",
    "end": "432450"
  },
  {
    "text": "required for the elastic Beanstalk CLI is just something that a lot of people use so I have it there if you don't have",
    "start": "432450",
    "end": "438510"
  },
  {
    "text": "git beanstalks just going to zip up the folder and upload it so that's the other option that you do have and finally once",
    "start": "438510",
    "end": "446100"
  },
  {
    "text": "you've done the commit and the deploy you can just issue a EB open to open the application in the browser so let's",
    "start": "446100",
    "end": "455370"
  },
  {
    "text": "quickly look at the application the sample application details that will be going out or looking at today I want to",
    "start": "455370",
    "end": "462300"
  },
  {
    "text": "quickly bring up my browser here so I can show you what the application looks like so we have a really simple",
    "start": "462300",
    "end": "468780"
  },
  {
    "text": "application that's running on Beanstalk it's essentially a pre-launch application so if you want to launch",
    "start": "468780",
    "end": "474720"
  },
  {
    "text": "something you're collecting email addresses what this application does you",
    "start": "474720",
    "end": "480690"
  },
  {
    "text": "can go sign up it asks for your name",
    "start": "480690",
    "end": "485540"
  },
  {
    "text": "and then I can just go in here and say sign up and that record has now been stored in dynamo dB so that I have a",
    "start": "490610",
    "end": "497389"
  },
  {
    "text": "record for it and I also have configured in the application as an s topic so that every time somebody signs up the",
    "start": "497389",
    "end": "503599"
  },
  {
    "text": "administrator of the website gets an email that someone signed up for your application so that's the application",
    "start": "503599",
    "end": "510349"
  },
  {
    "text": "let's quickly go ahead and look at the details of what's required to run that application in the elastic Beanstalk so",
    "start": "510349",
    "end": "518899"
  },
  {
    "text": "the first thing we need to do for any application is define dependencies that",
    "start": "518899",
    "end": "523940"
  },
  {
    "text": "the application uses an elastic Beanstalk we use standard dependency",
    "start": "523940",
    "end": "529250"
  },
  {
    "text": "managers for the languages or frameworks that you're using so for example this is a node application so I'm using a",
    "start": "529250",
    "end": "535430"
  },
  {
    "text": "package.json which is used by NPM or the node package manager as you can see",
    "start": "535430",
    "end": "541190"
  },
  {
    "text": "there I've defined the application name aversion and then a list of dependencies that my application uses one of the",
    "start": "541190",
    "end": "547519"
  },
  {
    "text": "things I want to point out for dependencies is it's a really bad idea to have latest as I have in there",
    "start": "547519",
    "end": "554740"
  },
  {
    "text": "because what's gonna happen is every time you do a deployment if any of the dependencies have changed versions NPM",
    "start": "554740",
    "end": "562279"
  },
  {
    "text": "is gonna pull in the new versions and then you've got a moving target for example every time you do a deployment",
    "start": "562279",
    "end": "567370"
  },
  {
    "text": "what's a better idea is to actually put in two specific versions that you are",
    "start": "567370",
    "end": "573170"
  },
  {
    "text": "using for your applications if you're in the node world you can actually go a step further and use shrink wrap which",
    "start": "573170",
    "end": "580339"
  },
  {
    "text": "is an NPM command to actually tie in the entire chain or lock down the entire",
    "start": "580339",
    "end": "585560"
  },
  {
    "text": "chain of dependencies so that every time you deploy the app it's the same exact versions of dependencies that are being",
    "start": "585560",
    "end": "592010"
  },
  {
    "text": "pulled in and deployed so as I mentioned",
    "start": "592010",
    "end": "597579"
  },
  {
    "text": "all you need to do for deploying an application to Beanstalk is provided application with the appropriate",
    "start": "597579",
    "end": "604490"
  },
  {
    "text": "dependency manager file so for example in node it's a package.json in ruby it's",
    "start": "604490",
    "end": "610070"
  },
  {
    "text": "a gem file in composer in PHP it's a composer file if you will so on and so",
    "start": "610070",
    "end": "615290"
  },
  {
    "text": "forth one of the other pieces that I have in the application here or the",
    "start": "615290",
    "end": "620480"
  },
  {
    "text": "sample code that you will see is I'm using something called EB engines Bienstock provides very high",
    "start": "620480",
    "end": "627449"
  },
  {
    "text": "extensibility in terms of what you can do with both your application stack and the infrastructure stack and EB",
    "start": "627449",
    "end": "633600"
  },
  {
    "text": "extensions is the mechanism that you use to modify either the application or the infrastructure stack that your",
    "start": "633600",
    "end": "639089"
  },
  {
    "text": "applications is going to use in this case let's look at the details of how do",
    "start": "639089",
    "end": "644790"
  },
  {
    "text": "I modify the application stack so in here I have a set of option settings if",
    "start": "644790",
    "end": "651420"
  },
  {
    "text": "you will as you can see I'm defining a custom option which is the email address where somebody's gonna get emailed or",
    "start": "651420",
    "end": "658949"
  },
  {
    "text": "the administrator of the website every time somebody signs up I've got some environment variables that are defined I",
    "start": "658949",
    "end": "665249"
  },
  {
    "text": "have a theme and then as you can see when I have the AWS region I'm using a",
    "start": "665249",
    "end": "670829"
  },
  {
    "text": "concept of a reference in this case I'm referencing the AWS region so that I",
    "start": "670829",
    "end": "676589"
  },
  {
    "text": "don't have to hard code this in my application that ensures that this application bundle can be deployed to",
    "start": "676589",
    "end": "682319"
  },
  {
    "text": "any of the regions supported by Beanstalk so you're not hard-coding it to be US East 1 or US west 2 for that",
    "start": "682319",
    "end": "689069"
  },
  {
    "text": "example we also have two other resources there which is a startup signup table",
    "start": "689069",
    "end": "695100"
  },
  {
    "text": "this is the dynamo DB table and then we have a sign-up topic which is the SNS topic both of these resources are",
    "start": "695100",
    "end": "702419"
  },
  {
    "text": "created by another set of VB extensions that we're gonna look at very quickly so",
    "start": "702419",
    "end": "709350"
  },
  {
    "text": "in this case again as I'm creating resources I want to use references and not hard code values in there because",
    "start": "709350",
    "end": "717029"
  },
  {
    "text": "these references will change every time I create a new application from the source bundle and finally I'm",
    "start": "717029",
    "end": "723149"
  },
  {
    "text": "configuring the proxy server on the container which I'm using nginx for here and I'm configuring some static file",
    "start": "723149",
    "end": "729569"
  },
  {
    "text": "folders where I'm going to serve my static assets so that the node process is not serving those static assets now",
    "start": "729569",
    "end": "738239"
  },
  {
    "text": "let's look at the eb extensions that actually add additional AWS resources to this application for example as i",
    "start": "738239",
    "end": "745230"
  },
  {
    "text": "mentioned in this case we're going to be using dynamo DB the simple notification service and the simple queuing service",
    "start": "745230",
    "end": "752329"
  },
  {
    "text": "so in my eb extension i start with a resources section and as i mentioned i'm",
    "start": "752329",
    "end": "757980"
  },
  {
    "text": "used references so you'll see that I have a start-up synapse table defined here as a resource and then I have a new sign up",
    "start": "757980",
    "end": "764770"
  },
  {
    "text": "topic defined here as a resource and that is what I was referencing in my previous EB extension to ensure that I",
    "start": "764770",
    "end": "770290"
  },
  {
    "text": "don't have to hard code these values in again in this resources tab this is",
    "start": "770290",
    "end": "776350"
  },
  {
    "text": "really a CloudFormation syntax or snippet if you will I'm defining three",
    "start": "776350",
    "end": "782560"
  },
  {
    "text": "resources here ones of type dynamodb table and it's got some schema elements",
    "start": "782560",
    "end": "787840"
  },
  {
    "text": "that i've defined i've got a sign up queue this is essentially where the addresses end up",
    "start": "787840",
    "end": "794050"
  },
  {
    "text": "every time they're submitted on the application and then I have a sign up",
    "start": "794050",
    "end": "799870"
  },
  {
    "text": "topic which is SNS topic this is used for notification so that every time somebody signs up the developer of the",
    "start": "799870",
    "end": "806920"
  },
  {
    "text": "application gets a notification and then finally I have a policy in there which",
    "start": "806920",
    "end": "812170"
  },
  {
    "text": "allows sqs to communicate with SNS some of the things I want to do point out",
    "start": "812170",
    "end": "817270"
  },
  {
    "text": "here is this is a good example of an Eevee extension that uses some of our built-in functions for example I'm using",
    "start": "817270",
    "end": "824260"
  },
  {
    "text": "a function get attribute or F and get app if you will which is down here and",
    "start": "824260",
    "end": "831820"
  },
  {
    "text": "this is actually getting an attribute of the queue that I've defined above I'm also using what we've seen earlier is",
    "start": "831820",
    "end": "837910"
  },
  {
    "text": "references so any time you're writing eb extensions make sure to use references and get attributes as necessary instead",
    "start": "837910",
    "end": "845680"
  },
  {
    "text": "of hard-coding values into the eb extensions so let's go ahead and look at",
    "start": "845680",
    "end": "851500"
  },
  {
    "text": "the demo of what it looks like to do everything that I just described in real life all right",
    "start": "851500",
    "end": "863120"
  },
  {
    "text": "so let me go ahead and copy the github URL let's make this a little bigger is",
    "start": "863120",
    "end": "874800"
  },
  {
    "text": "that big enough for everybody in the back can you guys see the text perfect all right so let's go ahead and do a git",
    "start": "874800",
    "end": "881760"
  },
  {
    "text": "clone and I'm gonna pull down my application now let's go into the folder",
    "start": "881760",
    "end": "890750"
  },
  {
    "text": "so as you can see I've set up my command line if you will just show the the",
    "start": "890750",
    "end": "898020"
  },
  {
    "text": "branch that I'm using in this in this case it's the master branch so now I have my application as I mentioned some",
    "start": "898020",
    "end": "905190"
  },
  {
    "text": "of the files in here simply my app dot J's file which is the application I have the package.json file which I mentioned",
    "start": "905190",
    "end": "912030"
  },
  {
    "text": "earlier is the dependencies and then I have the shrink-wrap JSON which essentially defines the entire tree",
    "start": "912030",
    "end": "918690"
  },
  {
    "text": "structure of the dependencies so as we talked about in the workflows let's go",
    "start": "918690",
    "end": "923850"
  },
  {
    "text": "ahead and initialize this folder to be deployed to elastic Beanstalk and I'm gonna do that with the eb net let's go",
    "start": "923850",
    "end": "931890"
  },
  {
    "text": "ahead and choose a region I'm gonna choose the default which is US west to or Oregon so when I did even it",
    "start": "931890",
    "end": "945150"
  },
  {
    "text": "Beanstalk or the CLI is already showing me the applications that I have running not obviously when you do demos in the",
    "start": "945150",
    "end": "951780"
  },
  {
    "text": "interest of time you want to have as they say a pre-baked set of cookies in the oven which I'm going to pull out",
    "start": "951780",
    "end": "957210"
  },
  {
    "text": "later so we've got two applications that are already running there I have a load generation application that's actually",
    "start": "957210",
    "end": "962940"
  },
  {
    "text": "generating the load and then I have my demo applications so I'm going to choose the demo application and then it's",
    "start": "962940",
    "end": "969780"
  },
  {
    "text": "showing me that I have two environments that are already in the demo application so I have a dev environment and a prod",
    "start": "969780",
    "end": "976110"
  },
  {
    "text": "environment so let's go ahead and create in fact in this step I'm just gonna pick the dev environment if you will and then",
    "start": "976110",
    "end": "983160"
  },
  {
    "text": "we'll later go ahead and create a staging environment in here so now my",
    "start": "983160",
    "end": "989160"
  },
  {
    "text": "CLI is initialized for elastic Beanstalk as you can see on my command line github",
    "start": "989160",
    "end": "995160"
  },
  {
    "text": "or get things that I have new in there so let's quickly look at those files Bienstock creates elastic",
    "start": "995160",
    "end": "1002490"
  },
  {
    "text": "Beanstalk folder that has a configuration file this file essentially tells the command-line interface which",
    "start": "1002490",
    "end": "1009779"
  },
  {
    "text": "environment your application is tied to so we'll go back and then follow the",
    "start": "1009779",
    "end": "1016110"
  },
  {
    "text": "steps of EB create if you will and in this case EB create can be issued either",
    "start": "1016110",
    "end": "1022680"
  },
  {
    "text": "without any parameters or there's a whole host of parameters that you can specify in my case I want to create a",
    "start": "1022680",
    "end": "1029270"
  },
  {
    "text": "signup staging environment with the specific C name so I'm gonna do EB create and I want to use an instance",
    "start": "1029270",
    "end": "1036990"
  },
  {
    "text": "type of C 3 large so I'm gonna type that in actually let me start with the name",
    "start": "1036990",
    "end": "1043860"
  },
  {
    "text": "first so I'm gonna do sign up - staging and I said instance type of C 3 large",
    "start": "1043860",
    "end": "1049320"
  },
  {
    "text": "and then I want to use a cname let's go back and quickly take a look at the",
    "start": "1049320",
    "end": "1054990"
  },
  {
    "text": "Beanstalk environment so that I can be consistent across the board so in here",
    "start": "1054990",
    "end": "1065190"
  },
  {
    "text": "the naming scheme I'm using is sign up the name or the stage if you will and then launch so let's go ahead and do",
    "start": "1065190",
    "end": "1071250"
  },
  {
    "text": "that and let's go ahead and get that",
    "start": "1071250",
    "end": "1081330"
  },
  {
    "text": "process started so as you can see what elastic Beanstalk CLI is doing there is it's already uploaded the version of the",
    "start": "1081330",
    "end": "1087929"
  },
  {
    "text": "application that you have in the folder to s3 and then we're starting to create the application and it's showing you",
    "start": "1087929",
    "end": "1093720"
  },
  {
    "text": "some of the details there as I mentioned I have an environment that's pre baked so let's go ahead and let this process",
    "start": "1093720",
    "end": "1100830"
  },
  {
    "text": "go on in the background and go to the pre baked environment so here I have the",
    "start": "1100830",
    "end": "1109140"
  },
  {
    "text": "pre baked environment let's look at some of the operations we can do here so one",
    "start": "1109140",
    "end": "1115110"
  },
  {
    "text": "of the first things obviously is you want to do an update to this application so let's go ahead and make a change",
    "start": "1115110",
    "end": "1122240"
  },
  {
    "text": "so as you guys can see in the application that it says the next big",
    "start": "1124790",
    "end": "1131040"
  },
  {
    "text": "thing is here let's go ahead and change that to the next week thing is coming for example because you know it's a",
    "start": "1131040",
    "end": "1137460"
  },
  {
    "text": "pre-launch site we want to make sure that that's what we're doing so I go to my views and that's where I define the",
    "start": "1137460",
    "end": "1147150"
  },
  {
    "text": "next big thing and it's right there so let's change that to coming save that",
    "start": "1147150",
    "end": "1155040"
  },
  {
    "text": "file and I go back to my command line here and all of a sudden get says hey",
    "start": "1155040",
    "end": "1161669"
  },
  {
    "text": "you have changes and this is one of the things that a lot of people miss when two-point-two Beanstalk and sometimes get frustrated is that you don't commit",
    "start": "1161669",
    "end": "1168809"
  },
  {
    "text": "your changes to get and you try to do a deploy in that case it's not gonna work because beanstalks using the last commit",
    "start": "1168809",
    "end": "1174960"
  },
  {
    "text": "if this folder wasn't a git folder we would just take the changes as is and deploy them but since we're using git we",
    "start": "1174960",
    "end": "1182160"
  },
  {
    "text": "got to make sure that we are committing this so let's go ahead and do that so",
    "start": "1182160",
    "end": "1187530"
  },
  {
    "text": "I'm gonna set that up and say ok so",
    "start": "1187530",
    "end": "1196890"
  },
  {
    "text": "we've added our folder and now I need to do is issue a Eby deploy",
    "start": "1196890",
    "end": "1202639"
  },
  {
    "text": "and so now the deployments in progress the CLI is telling me hey we've starting",
    "start": "1206460",
    "end": "1211619"
  },
  {
    "text": "the update the versions being deployed to the instances as you can see and very",
    "start": "1211619",
    "end": "1216869"
  },
  {
    "text": "quickly it's gonna come and tell me everything is done and then I'll call a EB open from here and pull up the app",
    "start": "1216869",
    "end": "1222960"
  },
  {
    "text": "and you should be able to see there that it says the next big thing is coming instead of the next thing is here",
    "start": "1222960",
    "end": "1230570"
  },
  {
    "text": "beanstalk does not do get out because we don't know what files you need to add the reason for doing get add is really",
    "start": "1234980",
    "end": "1241259"
  },
  {
    "text": "to add your changes to the git repository that's just a good workflow I'm gonna hold questions till the end if",
    "start": "1241259",
    "end": "1247379"
  },
  {
    "text": "you don't mind because we started a little late so I wanna make sure we get through everything so beanstalks now",
    "start": "1247379",
    "end": "1252869"
  },
  {
    "text": "deployed everything successfully let's go ahead and do it EB open and as you",
    "start": "1252869",
    "end": "1258659"
  },
  {
    "text": "can see it's gone from the next week thing is here to the next big thing is coming so it's really very simple to get",
    "start": "1258659",
    "end": "1266340"
  },
  {
    "text": "started very easy to deploy your applications make changes and updates",
    "start": "1266340",
    "end": "1272840"
  },
  {
    "text": "now let's quickly go back to the slides",
    "start": "1273320",
    "end": "1279169"
  },
  {
    "text": "so let's talk about some of the best practices around what you should be doing when you are deploying",
    "start": "1282600",
    "end": "1288419"
  },
  {
    "text": "applications on elastic Beanstalk to ensure that your applications can scale and handle millions of web requests so",
    "start": "1288419",
    "end": "1296909"
  },
  {
    "text": "the first and the most obvious thing is to do you know obviously test and tune",
    "start": "1296909",
    "end": "1302070"
  },
  {
    "text": "your application I have some best practices in here that I'll go through these are some of the things that we've",
    "start": "1302070",
    "end": "1308100"
  },
  {
    "text": "learned over the years both from our customers and our own experience running things the first thing that you want to",
    "start": "1308100",
    "end": "1314250"
  },
  {
    "text": "do whenever you launch an application or a web app is you want to pick a performance metric that's important to",
    "start": "1314250",
    "end": "1320850"
  },
  {
    "text": "you so for example if you're a web application that's an API latency is",
    "start": "1320850",
    "end": "1326759"
  },
  {
    "text": "probably the most important aspect of that request if you will if you're",
    "start": "1326759",
    "end": "1332490"
  },
  {
    "text": "serving a website where a lot of users are coming in attending the website you probably want to optimize for the number",
    "start": "1332490",
    "end": "1338610"
  },
  {
    "text": "of concurrent connections and if it's something where you're only worried",
    "start": "1338610",
    "end": "1343679"
  },
  {
    "text": "about throughput you want to optimize for the number of web requests now for folks who are who've done this in the",
    "start": "1343679",
    "end": "1350429"
  },
  {
    "text": "past you know there's an equation essentially that connects all three of these values so when you're optimizing",
    "start": "1350429",
    "end": "1356549"
  },
  {
    "text": "for one you're trading off the other you can't really optimize for all three because that would just give you a",
    "start": "1356549",
    "end": "1363269"
  },
  {
    "text": "suboptimal performance across the board and then the other thing that you should",
    "start": "1363269",
    "end": "1369480"
  },
  {
    "text": "do is load test your application because without testing your application you don't know how it's gonna perform when",
    "start": "1369480",
    "end": "1375899"
  },
  {
    "text": "that spike of traffic comes for your startup for example or your large website and one of the pieces of advice",
    "start": "1375899",
    "end": "1383309"
  },
  {
    "text": "I give to customers when I talk to them is start without auto scaling minimum and maximum of one what this allows you",
    "start": "1383309",
    "end": "1391139"
  },
  {
    "text": "to do is essentially test how your application is going to perform in over load conditions that is very important",
    "start": "1391139",
    "end": "1397950"
  },
  {
    "text": "because even though you have auto scaling turned on and you expect auto scaling to go and add instances if you",
    "start": "1397950",
    "end": "1404789"
  },
  {
    "text": "have a big spike you're going to be in an overload condition for some period of time and you want to make sure you",
    "start": "1404789",
    "end": "1410070"
  },
  {
    "text": "understand how your application behaves under that condition you also want to look at the available",
    "start": "1410070",
    "end": "1416180"
  },
  {
    "text": "metrics and I'll show you guys all the metrics we have available in an elastic Beanstalk and make sure you understand",
    "start": "1416180",
    "end": "1421850"
  },
  {
    "text": "how they correlate with the different ways your application operates finally",
    "start": "1421850",
    "end": "1428150"
  },
  {
    "text": "you want to make sure you tune the auto-scaling configuration by default Beanstalk uses a network in which is a",
    "start": "1428150",
    "end": "1434090"
  },
  {
    "text": "good proxy for the number of requests your application is receiving but depending on your application you may",
    "start": "1434090",
    "end": "1440120"
  },
  {
    "text": "want to choose a different metric for example CPU and also set the appropriate reach duration because this allows you",
    "start": "1440120",
    "end": "1447260"
  },
  {
    "text": "to tune how quickly auto-scaling is going to react when you have traffic",
    "start": "1447260",
    "end": "1452840"
  },
  {
    "text": "coming or loads of traffic come in and finally always make sure not just to",
    "start": "1452840",
    "end": "1458900"
  },
  {
    "text": "test your application but to understand how your back-end behaves I've seen plenty of times where customers have",
    "start": "1458900",
    "end": "1465230"
  },
  {
    "text": "gone in an settable application on an elastic Beanstalk and said you know I'm gonna scale from 1 to 100 instances",
    "start": "1465230",
    "end": "1471340"
  },
  {
    "text": "everything works perfectly but then they have an RDS database in the backend or a",
    "start": "1471340",
    "end": "1476720"
  },
  {
    "text": "dynamo DB table in the backend that they have not optimized the throughput on and if you don't do that what you're gonna",
    "start": "1476720",
    "end": "1483290"
  },
  {
    "text": "essentially end up getting is a lot of people will come into your application the application is gonna send a lot of",
    "start": "1483290",
    "end": "1488390"
  },
  {
    "text": "requests to the back end and the back end is not going to be able to handle it because you've not tuned it or optimized",
    "start": "1488390",
    "end": "1493850"
  },
  {
    "text": "it so always ensure that you understand the flow of requests through your entire system end to end and you've tuned the",
    "start": "1493850",
    "end": "1500870"
  },
  {
    "text": "entire system end-to-end to take traffic at the highest load that you're anticipating or maybe even go you know",
    "start": "1500870",
    "end": "1507740"
  },
  {
    "text": "one and a half times or twice that much when you're testing let's quickly talk",
    "start": "1507740",
    "end": "1514220"
  },
  {
    "text": "about deployment options this is again very important because when you have a",
    "start": "1514220",
    "end": "1519470"
  },
  {
    "text": "website that's running you've got you know a hundred thousand people that are on that website and you have to go make",
    "start": "1519470",
    "end": "1526490"
  },
  {
    "text": "changes because you want to roll out a new version you want to make sure you understand the deployment options we",
    "start": "1526490",
    "end": "1531500"
  },
  {
    "text": "have available because this essentially can save your bacon in either having a downtime in that deployment or not",
    "start": "1531500",
    "end": "1537740"
  },
  {
    "text": "having a downtime Beanstalk has two different options that we support we",
    "start": "1537740",
    "end": "1542900"
  },
  {
    "text": "have a rolling deployment which is an in-place deployment so what this does is essentially update the versions in place",
    "start": "1542900",
    "end": "1549130"
  },
  {
    "text": "or on the existing instances if you will some of the pros of this are obviously",
    "start": "1549130",
    "end": "1554530"
  },
  {
    "text": "it's fast because we're not bringing up additional infrastructure the cons of",
    "start": "1554530",
    "end": "1559690"
  },
  {
    "text": "this approach is the rollback is slower because you have to redeploy the previous application version through all",
    "start": "1559690",
    "end": "1565240"
  },
  {
    "text": "back if you had any bugs in the new version the other con is possibility of",
    "start": "1565240",
    "end": "1571330"
  },
  {
    "text": "state buildup so when you're building applications an elastic beanstalk we're expecting that you're following the 12",
    "start": "1571330",
    "end": "1578110"
  },
  {
    "text": "factor app methodology your apps are stateless they're not saving State on the machines or on disk if you will",
    "start": "1578110",
    "end": "1583870"
  },
  {
    "text": "they're using a database or a cache to do that so when you do do deployments",
    "start": "1583870",
    "end": "1589360"
  },
  {
    "text": "you have the possibility of building up State on this if you will if your environments have been running or the",
    "start": "1589360",
    "end": "1594490"
  },
  {
    "text": "instances have been running for a very long time and they've had multiple versions of deployments the next",
    "start": "1594490",
    "end": "1601540"
  },
  {
    "text": "approach that we support which is what we recommend for zero downtime deployments is a Bluegreen approach if you will the",
    "start": "1601540",
    "end": "1608320"
  },
  {
    "text": "pros are it's really fast to rollback because you already have the old version running you never tear it down or until",
    "start": "1608320",
    "end": "1615820"
  },
  {
    "text": "you prove that your new versions working ok so you can simply just move the pointer back to the old version and it",
    "start": "1615820",
    "end": "1622000"
  },
  {
    "text": "just starts using the old version it also ensures that you're not building up",
    "start": "1622000",
    "end": "1627040"
  },
  {
    "text": "State on your environments because you're bringing in a new set of infrastructure every time you do a deployment the cons of this approach our",
    "start": "1627040",
    "end": "1635490"
  },
  {
    "text": "deployments take longer so as you saw in my demo there when I did an update it took about 30 seconds or so to do the",
    "start": "1635490",
    "end": "1641950"
  },
  {
    "text": "deployment if I did a Bluegreen approach it would take about 2 to 3 minutes to do the deployment so it's a trade-off on do",
    "start": "1641950",
    "end": "1650320"
  },
  {
    "text": "you want guaranteed zero downtime or do you want to just roll out the version as quickly as possible one of the other",
    "start": "1650320",
    "end": "1657400"
  },
  {
    "text": "downsides to blue wean in elastic Beanstalk is we use cname swap so we're",
    "start": "1657400",
    "end": "1663190"
  },
  {
    "text": "swapping DNS if you will and there's a lot of clients out there that don't",
    "start": "1663190",
    "end": "1668500"
  },
  {
    "text": "necessarily respect the DNS TTL that we sat on our cname record being stalked by",
    "start": "1668500",
    "end": "1674560"
  },
  {
    "text": "default sets a 60 second TTL however their clients and specifically mobile",
    "start": "1674560",
    "end": "1679690"
  },
  {
    "text": "devices are really bad this they will cache DNS addresses for up to 24 hours so you may run into a",
    "start": "1679690",
    "end": "1685870"
  },
  {
    "text": "problem where customers are unable to access your application once you've done a cname swap for some period of time so",
    "start": "1685870",
    "end": "1692860"
  },
  {
    "text": "one of the pieces of recommendation that we give to customers when they do blue-ringed is to ensure that they",
    "start": "1692860",
    "end": "1699070"
  },
  {
    "text": "understand how long their clients or their customers are essentially going to take to tail off of from one environment",
    "start": "1699070",
    "end": "1704980"
  },
  {
    "text": "and go to the next and keep the other environment at a much lesser scale around so that you don't have customers",
    "start": "1704980",
    "end": "1710920"
  },
  {
    "text": "with a bad experience once you're out of that window it could be an hour for some",
    "start": "1710920",
    "end": "1716380"
  },
  {
    "text": "customers its days for other customers depending on what they're doing you can then terminate that environment",
    "start": "1716380",
    "end": "1722920"
  },
  {
    "text": "because it's no longer necessary but this is again a trade-off of you know do you want guaranteed downtime guaranteed",
    "start": "1722920",
    "end": "1729910"
  },
  {
    "text": "zero downtime sorry that guarantees your customers are having a good experience or you want to quickly roll out a",
    "start": "1729910",
    "end": "1735790"
  },
  {
    "text": "version so let's talk about the operational side you have a website or",
    "start": "1735790",
    "end": "1742900"
  },
  {
    "text": "an application in the elastic Beanstalk you've deployed at elastic Beanstalk everything works great you get a you",
    "start": "1742900",
    "end": "1749650"
  },
  {
    "text": "know post in hacker news all of a sudden you've got a lot of people come in on your website you obviously don't want to",
    "start": "1749650",
    "end": "1756400"
  },
  {
    "text": "be sitting and monitoring that every single day because today it's hacker news tomorrow it could be CNN day after",
    "start": "1756400",
    "end": "1761950"
  },
  {
    "text": "it could be somebody else so that takes a lot of time away from when you could be developing or coding in elastic",
    "start": "1761950",
    "end": "1768850"
  },
  {
    "text": "Beanstalk we make it super simple to set up alarms to setup log rotation so that you",
    "start": "1768850",
    "end": "1775630"
  },
  {
    "text": "always have your logs so you can go back and look at any time frame when you see errors in your system what may have",
    "start": "1775630",
    "end": "1782380"
  },
  {
    "text": "happened we make it very easy to set up metrics and monitoring if you will and",
    "start": "1782380",
    "end": "1788950"
  },
  {
    "text": "I'll show you guys the dashboard and finally the last piece of advice I'd have around operational behavior is use",
    "start": "1788950",
    "end": "1797710"
  },
  {
    "text": "route 53 health checks route 53 health checks allow you to essentially paying",
    "start": "1797710",
    "end": "1803170"
  },
  {
    "text": "your environment from 8 different regions across the world it costs about",
    "start": "1803170",
    "end": "1808390"
  },
  {
    "text": "a dollar and a half the first 50 health checks are free on aw",
    "start": "1808390",
    "end": "1813789"
  },
  {
    "text": "and points after that it's a dollar and a half per month so it's very cheap but",
    "start": "1813789",
    "end": "1819309"
  },
  {
    "text": "it's a good sense of how your application is being perceived across the world if you will",
    "start": "1819309",
    "end": "1825999"
  },
  {
    "text": "and it tells you if for example you've deployed an application in San Francisco but it can't be accessed from Frankfurt",
    "start": "1825999",
    "end": "1833049"
  },
  {
    "text": "or from Dublin because route 53 is gonna do the health checks from those regions and it's actually checking the",
    "start": "1833049",
    "end": "1839619"
  },
  {
    "text": "connectivity outside of the AWS Network so it's really a great thing to have turn on and use and finally as I",
    "start": "1839619",
    "end": "1848409"
  },
  {
    "text": "mentioned in the agenda we're gonna talk about tagging tagging is very important",
    "start": "1848409",
    "end": "1854049"
  },
  {
    "text": "if you're doing any sort of structured application deployments on Bienstock one",
    "start": "1854049",
    "end": "1859629"
  },
  {
    "text": "because it makes it super simple for you to find the resources that are created as part of your application or",
    "start": "1859629",
    "end": "1865599"
  },
  {
    "text": "environment two it can be used to monitor costs so you can go in to our",
    "start": "1865599",
    "end": "1872379"
  },
  {
    "text": "cost Explorer and say show me all resources are all costs associated with a certain tag and I'll show you guys how",
    "start": "1872379",
    "end": "1879340"
  },
  {
    "text": "that works very quickly here the third piece is Beanstalk automatically adds",
    "start": "1879340",
    "end": "1884529"
  },
  {
    "text": "two tags to all your environments we have an environment name and an environment ID so even if you're not",
    "start": "1884529",
    "end": "1890470"
  },
  {
    "text": "actually tagging with cost center owners for example you still have those two pieces of information that you can use",
    "start": "1890470",
    "end": "1898019"
  },
  {
    "text": "all right so let's quickly walk through some of the pieces that I've shown you",
    "start": "1898019",
    "end": "1903249"
  },
  {
    "text": "there so let's make this a little bigger",
    "start": "1903249",
    "end": "1910859"
  },
  {
    "text": "all right so here as you can see I should have a staging environment here",
    "start": "1914640",
    "end": "1920380"
  },
  {
    "text": "if i refresh that's the one we were creating earlier it got created my",
    "start": "1920380",
    "end": "1925600"
  },
  {
    "text": "applications here it's got the cname I chose I can go click on it and it's",
    "start": "1925600",
    "end": "1931510"
  },
  {
    "text": "everything's working so going back here I have two environments a dev and a",
    "start": "1931510",
    "end": "1937960"
  },
  {
    "text": "staging environment or a prod environment I'm gonna look at the production environment because I've set",
    "start": "1937960",
    "end": "1943000"
  },
  {
    "text": "it up explicitly to generate some errors and what I'm gonna show you guys as I walk through here is our new health",
    "start": "1943000",
    "end": "1950020"
  },
  {
    "text": "monitoring system that essentially allows you to very easily understand and tune your applications if you will so as",
    "start": "1950020",
    "end": "1958840"
  },
  {
    "text": "you can see here this applications health is in warning state when I click on this I get a very simple in English",
    "start": "1958840",
    "end": "1967240"
  },
  {
    "text": "message that's telling me that my health state of the environment is in warning because one and a half percent of my",
    "start": "1967240",
    "end": "1973870"
  },
  {
    "text": "requests coming into the application are failing with a HTTP 500 code this is",
    "start": "1973870",
    "end": "1980260"
  },
  {
    "text": "just one of the things we monitor as part of the new health monitoring system that we have we look at about 40 or so",
    "start": "1980260",
    "end": "1986440"
  },
  {
    "text": "different metrics so we're tracking in near-real-time your CPU usage on the box",
    "start": "1986440",
    "end": "1992290"
  },
  {
    "text": "what are the response codes for the requests that you're getting what are",
    "start": "1992290",
    "end": "1997330"
  },
  {
    "text": "the Layton sees what are the disk drive States or root filesystem state are you",
    "start": "1997330",
    "end": "2002520"
  },
  {
    "text": "running out of disk space we're tracking memory usage so are you running out of memory on any of the instances and we're",
    "start": "2002520",
    "end": "2011070"
  },
  {
    "text": "essentially taking a snapshot every 10 seconds and then applying a set of business rules to it and then",
    "start": "2011070",
    "end": "2016710"
  },
  {
    "text": "determining if your application is in OK state warning state degraded state or",
    "start": "2016710",
    "end": "2021750"
  },
  {
    "text": "severe state and each one of those states implies a sense of urgency if you",
    "start": "2021750",
    "end": "2026760"
  },
  {
    "text": "will so if your application is in severe state your customers are having a really bad experience and we've essentially",
    "start": "2026760",
    "end": "2033900"
  },
  {
    "text": "taken all our experience in operating Web Services and put that into the set of rules that we have there for example",
    "start": "2033900",
    "end": "2040670"
  },
  {
    "text": "in this case because it's only 1% of my traffic that's coming back with a 500",
    "start": "2040670",
    "end": "2046640"
  },
  {
    "text": "I go to a warning state if this was about 20% I would be in a degraded State",
    "start": "2046640",
    "end": "2051648"
  },
  {
    "text": "any more than that I would be in severe so it's really a sense of you know",
    "start": "2051649",
    "end": "2057980"
  },
  {
    "text": "trying to give our customers or our developers a sense of what's going on with their environment just not looking",
    "start": "2057980",
    "end": "2065090"
  },
  {
    "text": "at the infrastructure but also looking at your application and how its behaving and then as I mentioned with the",
    "start": "2065090",
    "end": "2072379"
  },
  {
    "text": "monitoring pieces I will show you guys what we have on the console so you can",
    "start": "2072380",
    "end": "2077510"
  },
  {
    "text": "go in here and as you can see I have 8 hosts that are running as part of this environment on average I have about 70%",
    "start": "2077510",
    "end": "2084590"
  },
  {
    "text": "CPU utilization and in the last five minutes because these are all five minute averages I've served about 3.1",
    "start": "2084590",
    "end": "2091610"
  },
  {
    "text": "million requests out of this environment and this is the one that I've been essentially showing you guys so it's you",
    "start": "2091610",
    "end": "2100520"
  },
  {
    "text": "know right here very easy to monitor see what's going on so I can see",
    "start": "2100520",
    "end": "2105760"
  },
  {
    "text": "historically what my environments been in since I'm explicitly written the",
    "start": "2105760",
    "end": "2111260"
  },
  {
    "text": "application here to generate errors it's in warning state I can see my latency here I can see the number of requests",
    "start": "2111260",
    "end": "2118910"
  },
  {
    "text": "CPU network in network out one of the cool features I want to point out is you",
    "start": "2118910",
    "end": "2124490"
  },
  {
    "text": "can actually click on this edit button and you get to pick from all of the",
    "start": "2124490",
    "end": "2130040"
  },
  {
    "text": "resources that are part of the environment and each one of these have additional metrics that are available for you so remember when I was talking",
    "start": "2130040",
    "end": "2137150"
  },
  {
    "text": "about your application and tuning I said understand all the metrics that are available to you so I would highly recommend if you're running a Bienstock",
    "start": "2137150",
    "end": "2143420"
  },
  {
    "text": "application or if you're just getting familiar with the elastic Beanstalk go through each one of these options and",
    "start": "2143420",
    "end": "2148520"
  },
  {
    "text": "look at the metrics that are available to you understand what they mean and how they impact your application you know",
    "start": "2148520",
    "end": "2154280"
  },
  {
    "text": "that's something that you should really spend the time upfront because it will help you when there is a situation when",
    "start": "2154280",
    "end": "2160220"
  },
  {
    "text": "you have to come back and diagnose issues and then let's quickly look at",
    "start": "2160220",
    "end": "2167900"
  },
  {
    "text": "the alarms so on any of the metrics that are available on this page you can also set up alarms in this case I've set up",
    "start": "2167900",
    "end": "2175070"
  },
  {
    "text": "an alarm that says any time my latency goes up above 5 milliseconds I want to alarm and what this will do is",
    "start": "2175070",
    "end": "2181750"
  },
  {
    "text": "essentially send somebody an email you can integrate this with Pedro duty or other tools slack for example all of",
    "start": "2181750",
    "end": "2189850"
  },
  {
    "text": "that can be done because we're essentially sending a SMS a notification and then you can use that to connect",
    "start": "2189850",
    "end": "2195130"
  },
  {
    "text": "with any system that supports SMS and then I talked about tags so in this case",
    "start": "2195130",
    "end": "2201250"
  },
  {
    "text": "I've tagged my environment to have besides the Beanstalk pre-populated tags",
    "start": "2201250",
    "end": "2207370"
  },
  {
    "text": "a cost center a campaign and an owner and if we go quickly to support here",
    "start": "2207370",
    "end": "2216900"
  },
  {
    "text": "actually it's under my account so go to billing and cost management you can",
    "start": "2216900",
    "end": "2226090"
  },
  {
    "text": "actually go to cost Explorer and wide steam that and in here I can actually",
    "start": "2226090",
    "end": "2235270"
  },
  {
    "text": "filter this by tags if you will and then I can apply a cost center tie and say",
    "start": "2235270",
    "end": "2241930"
  },
  {
    "text": "marketing so now it's showing me all the costs of all the essentially AWS",
    "start": "2241930",
    "end": "2248530"
  },
  {
    "text": "resources that were tagged with that cost and our tag of marketing so very easy to track your costs there let's go",
    "start": "2248530",
    "end": "2258430"
  },
  {
    "text": "back here it's elastic Beanstalk and then I will show you guys our health",
    "start": "2258430",
    "end": "2263830"
  },
  {
    "text": "monitoring system very quickly so one of",
    "start": "2263830",
    "end": "2269230"
  },
  {
    "text": "the pieces I mentioned the causes is part of the new health monitoring system so if you have enabled enhance health",
    "start": "2269230",
    "end": "2276430"
  },
  {
    "text": "monitoring which you can do by going to configuration and then helped and then choosing enhance on the drop-down you",
    "start": "2276430",
    "end": "2282670"
  },
  {
    "text": "will get all of these new metrics and the new features we also have a CLI version that works similar to H top for",
    "start": "2282670",
    "end": "2290230"
  },
  {
    "text": "those of you who are familiar with the Linux world so you can just type in EB healt",
    "start": "2290230",
    "end": "2296760"
  },
  {
    "text": "- - refresh and this will provide you with a continuously refreshing dashboard of what's going on with your environment",
    "start": "2296760",
    "end": "2303460"
  },
  {
    "text": "so as you can see this is my dev environment I'm serving about a thousand",
    "start": "2303460",
    "end": "2308800"
  },
  {
    "text": "requests per second everything looks just fine here so let's go ahead and actually switch to",
    "start": "2308800",
    "end": "2314710"
  },
  {
    "text": "my master branch that will connect me with my prod environment",
    "start": "2314710",
    "end": "2322440"
  },
  {
    "text": "and now you can see I get all the information that I was getting on the console but I also have a lot of",
    "start": "2328830",
    "end": "2333960"
  },
  {
    "text": "additional data on a per instance or a per resource basis so here we've got",
    "start": "2333960",
    "end": "2340280"
  },
  {
    "text": "essentially an environment that's serving as you can see about 10,000 requests per second which is the data",
    "start": "2340280",
    "end": "2346260"
  },
  {
    "text": "here on that line if on the first line there it's telling me that I have 98.5",
    "start": "2346260",
    "end": "2353310"
  },
  {
    "text": "percent of my requests coming back as 200 or in the 200 range I have about 1.4",
    "start": "2353310",
    "end": "2359610"
  },
  {
    "text": "percent that are in the 500 range and then I have a set of latencies here so I",
    "start": "2359610",
    "end": "2365220"
  },
  {
    "text": "have my p99 which is a latency in percentile and this is one of the unique features about the Beanstalk health",
    "start": "2365220",
    "end": "2371310"
  },
  {
    "text": "system it's the first system in AWS to supply application metrics or latency",
    "start": "2371310",
    "end": "2376890"
  },
  {
    "text": "metrics in percentiles and here we've got you know you can look at this and say 99 percent of my",
    "start": "2376890",
    "end": "2382560"
  },
  {
    "text": "customers requests are being served in 11 milliseconds and so it's easy to know",
    "start": "2382560",
    "end": "2388140"
  },
  {
    "text": "how your applications performing from an operational standpoint if you will and that the third tab or the section if you",
    "start": "2388140",
    "end": "2395760"
  },
  {
    "text": "will has your tuning metrics I'm gonna quickly go ahead and just look at that",
    "start": "2395760",
    "end": "2400860"
  },
  {
    "text": "one tab by itself and in this tab I can see I have a few metrics here I have",
    "start": "2400860",
    "end": "2406920"
  },
  {
    "text": "load averages which essentially tells you how many threads are backed up on",
    "start": "2406920",
    "end": "2411930"
  },
  {
    "text": "your CPU so if you have a dual core system you ideally want this number to be about two because that tells you at",
    "start": "2411930",
    "end": "2418290"
  },
  {
    "text": "any given time you have one thread that's being processed and one thread that's backed up per core we've got CPU",
    "start": "2418290",
    "end": "2426420"
  },
  {
    "text": "metrics here so as you can see roughly across the fleet I have about 30 percent idle rest of it's being used by user",
    "start": "2426420",
    "end": "2433560"
  },
  {
    "text": "processes and then I've got some IO way time again this is really beneficial in",
    "start": "2433560",
    "end": "2439890"
  },
  {
    "text": "letting you pick your scaling metric because you can go in here and say hey am i constrained on CPU or I might",
    "start": "2439890",
    "end": "2446190"
  },
  {
    "text": "constraint on Io and that really lets you choose the instance type that you want to run your application on but also",
    "start": "2446190",
    "end": "2451290"
  },
  {
    "text": "set your scaling metrics and then finally as I said the set of rules or",
    "start": "2451290",
    "end": "2458150"
  },
  {
    "text": "business rules that are applied bring you to the causes if you will where as a",
    "start": "2458150",
    "end": "2464970"
  },
  {
    "text": "developer you don't even have to look at all the metrics to understand what's going on we're actually doing that work",
    "start": "2464970",
    "end": "2470160"
  },
  {
    "text": "for you and we're gonna explain it to you in very simple English in this case it's saying 1.5 percent of my requests",
    "start": "2470160",
    "end": "2476280"
  },
  {
    "text": "are failing this also will say things like you have more than 90% of your root",
    "start": "2476280",
    "end": "2482550"
  },
  {
    "text": "filesystem that's full or you're using more than X percentage of your memory in your application if you will so you know",
    "start": "2482550",
    "end": "2490290"
  },
  {
    "text": "a lot of different things that can go wrong if they do go wrong we will tell",
    "start": "2490290",
    "end": "2495540"
  },
  {
    "text": "you exactly in very simple words what's going on and then you can dive deep looking at the metrics and the",
    "start": "2495540",
    "end": "2501540"
  },
  {
    "text": "monitoring for capably that Beanstalk does provide to you so let me go back to",
    "start": "2501540",
    "end": "2508290"
  },
  {
    "text": "the slides and let me bring on Colin so that he can talk about our Royal",
    "start": "2508290",
    "end": "2513450"
  },
  {
    "text": "Caribbean cruise limited partners and how they've done their implementation great Thank You Abhishek perfect thank",
    "start": "2513450",
    "end": "2520200"
  },
  {
    "text": "you",
    "start": "2520200",
    "end": "2522260"
  },
  {
    "text": "good morning everyone how many of you went to the party last night oh god okay",
    "start": "2525470",
    "end": "2531109"
  },
  {
    "text": "hopefully you're awake and conscious this will be quick so my name is Colin angel I'm a",
    "start": "2531109",
    "end": "2538430"
  },
  {
    "text": "technical director at isobar we're a full service digital agency and we were engaged to build and deploy out",
    "start": "2538430",
    "end": "2545660"
  },
  {
    "text": "Caribbean comms a new website major redesign of their e-commerce platform a",
    "start": "2545660",
    "end": "2551980"
  },
  {
    "text": "little bit Royal Caribbean there are a large cruise ship company and they have",
    "start": "2551980",
    "end": "2557210"
  },
  {
    "text": "destinations all around the world there their website is equally massive in",
    "start": "2557210",
    "end": "2562700"
  },
  {
    "text": "scope we launched the Royal Caribbean comm website in March of this year on Beanstalk to great success and that's",
    "start": "2562700",
    "end": "2569810"
  },
  {
    "text": "what I want to tell you about it's a high volume website and what's more",
    "start": "2569810",
    "end": "2574819"
  },
  {
    "text": "interesting about that is that during their peak season they actually see such",
    "start": "2574819",
    "end": "2580040"
  },
  {
    "text": "a huge surge in traffic that it nearly doubles their average baseline so that could pose some interesting scaling",
    "start": "2580040",
    "end": "2585200"
  },
  {
    "text": "challenges if you're not prepared for that so first I want to talk about historical challenges both Caribbean",
    "start": "2585200",
    "end": "2592160"
  },
  {
    "text": "calm used to live in Royals data center so it was on-premise they managed all of",
    "start": "2592160",
    "end": "2597800"
  },
  {
    "text": "the infrastructure scaling etc in addition their dev and test environments",
    "start": "2597800",
    "end": "2603560"
  },
  {
    "text": "also it lived in those in that data center and there was a high demand for those for those environments for for",
    "start": "2603560",
    "end": "2609140"
  },
  {
    "text": "various projects now there is there's always difficulties dealing with physical hardware there's hardware",
    "start": "2609140",
    "end": "2615349"
  },
  {
    "text": "procurement there's hardware failure there's upgrading there's repurposing hardware from one project to another",
    "start": "2615349",
    "end": "2621230"
  },
  {
    "text": "this all takes time resources money physical goods in addition in production",
    "start": "2621230",
    "end": "2627200"
  },
  {
    "text": "the static nature of a physical infrastructure meant that royal had to",
    "start": "2627200",
    "end": "2633470"
  },
  {
    "text": "over provision their infrastructure for prod just to meet the peak demand of that high season and the remainder of",
    "start": "2633470",
    "end": "2641660"
  },
  {
    "text": "the year they had more capacity than they were using so obviously there's some operational inefficiencies there and some extra costs so royal one of",
    "start": "2641660",
    "end": "2649880"
  },
  {
    "text": "Royals other businesses actually deployed on on Amazon using it as infrastructure as a service",
    "start": "2649880",
    "end": "2655880"
  },
  {
    "text": "so mostly ec2 servers and they managed all the other plumbing themselves within the cloud now it's",
    "start": "2655880",
    "end": "2662820"
  },
  {
    "text": "important to note that when you deploy a website there's more to it than just a bunch of servers there's a lot of other plumbing and that requires expertise and",
    "start": "2662820",
    "end": "2670860"
  },
  {
    "text": "requires people and requires time and that cost money so what I'd like to talk",
    "start": "2670860",
    "end": "2676140"
  },
  {
    "text": "about is why we chose Beanstalk so when we were hired to build the Royal Caribbean comm website and handle the",
    "start": "2676140",
    "end": "2683760"
  },
  {
    "text": "cloud deployment we made a case for elastic beanstalk our argument was that using a platform",
    "start": "2683760",
    "end": "2690450"
  },
  {
    "text": "as a service would provide operational efficiencies but not only that it would",
    "start": "2690450",
    "end": "2695700"
  },
  {
    "text": "improve time to market by allowing them to build quicker and build more often so",
    "start": "2695700",
    "end": "2700910"
  },
  {
    "text": "Beanstalk lowers your IT burden right it does a lot of the heavy lifting for you so that's gonna save you time and money",
    "start": "2700910",
    "end": "2707910"
  },
  {
    "text": "it's also gonna make things more reliable because things are automated they're also battle-tested by other customers it's a it's an established",
    "start": "2707910",
    "end": "2713700"
  },
  {
    "text": "tool it's a very stable environment and it's very easy to use but it goes beyond",
    "start": "2713700",
    "end": "2721140"
  },
  {
    "text": "just the benefits of IT it's about it's about empowerment right so empowering the marketing team providing better",
    "start": "2721140",
    "end": "2727620"
  },
  {
    "text": "visibility into their environments in fact giving them control over their dev and test environments so that they can",
    "start": "2727620",
    "end": "2734510"
  },
  {
    "text": "they can build up as many environments as they need to meet the demands of the various projects that they've got on the",
    "start": "2734510",
    "end": "2740190"
  },
  {
    "text": "go so it's trivial to fire up",
    "start": "2740190",
    "end": "2745310"
  },
  {
    "text": "environments on on demand using Beanstalk as abhishek showed i mean it literally takes minutes the system that",
    "start": "2745310",
    "end": "2752790"
  },
  {
    "text": "we used was a combination of cloud formation and api's and it literally takes editing a couple templates running",
    "start": "2752790",
    "end": "2759840"
  },
  {
    "text": "a command and you've built up a whole stack and as a result we were able to build out stacks for various projects",
    "start": "2759840",
    "end": "2766890"
  },
  {
    "text": "different releases different test tracks etc in in matters of minutes and try and",
    "start": "2766890",
    "end": "2771900"
  },
  {
    "text": "do that in a traditional data center so what does it look like this is somewhat",
    "start": "2771900",
    "end": "2778500"
  },
  {
    "text": "simplified for the sake of clarity but it's a it's a hybrid architecture so we",
    "start": "2778500",
    "end": "2784080"
  },
  {
    "text": "have a web application living on Beanstalk in the cloud and it calls out to enterprise services and those",
    "start": "2784080",
    "end": "2790320"
  },
  {
    "text": "services reside in the royal data center right so actually making real-time service calls to the data center in a",
    "start": "2790320",
    "end": "2799230"
  },
  {
    "text": "production application with high volume how do we do that we use Direct Connect which is Amazon's high-speed dedicated connection so we have high speed",
    "start": "2799230",
    "end": "2806070"
  },
  {
    "text": "networking and low latency the architecture is is pretty standard it's",
    "start": "2806070",
    "end": "2811620"
  },
  {
    "text": "a standard V PC we have public subnets for the load balancers we have private subnets for the ec2 servers where we",
    "start": "2811620",
    "end": "2818190"
  },
  {
    "text": "have Tomcat and Apache living we have an extra layer of security in there that is not normal or not not standard part of",
    "start": "2818190",
    "end": "2825210"
  },
  {
    "text": "the Beanstalk but we've introduced that for various reasons and then we also have some other third-party vendors in",
    "start": "2825210",
    "end": "2831690"
  },
  {
    "text": "there to provide some features that we needed in addition to Beanstalk so how",
    "start": "2831690",
    "end": "2838830"
  },
  {
    "text": "did we build it it's a combination of cloud formation api's Jenkins and",
    "start": "2838830",
    "end": "2845400"
  },
  {
    "text": "Beanstalk so cloud formation we use cloud formation to define the template",
    "start": "2845400",
    "end": "2850650"
  },
  {
    "text": "now this is different from what Abhishek showed you earlier when we built this the the features that Abhishek showed",
    "start": "2850650",
    "end": "2858300"
  },
  {
    "text": "you we're not there yet they were not available yet so we chose a different path we're still using api's but we're actually using the the AWS CLI as",
    "start": "2858300",
    "end": "2867060"
  },
  {
    "text": "opposed to the Hado via AWS EB CLI so there's a difference there but",
    "start": "2867060",
    "end": "2872070"
  },
  {
    "text": "effectively it comes to the same thing and so the cloud formation templates define what the environment looks like",
    "start": "2872070",
    "end": "2877440"
  },
  {
    "text": "you know what kind of instance size you need JVM params things like that we use",
    "start": "2877440",
    "end": "2882510"
  },
  {
    "text": "the API is to execute the creation and the updates to these environments so they execute the cloud formation",
    "start": "2882510",
    "end": "2887640"
  },
  {
    "text": "templates for us these jackets for continuous builds so we build our code but we also use it to build and deploy",
    "start": "2887640",
    "end": "2893520"
  },
  {
    "text": "all the way to Beanstalk so we have hands-off build and deploy so it's an",
    "start": "2893520",
    "end": "2898680"
  },
  {
    "text": "automated workflow we use get for code but we also use it for configuration all right it's important to to think of",
    "start": "2898680",
    "end": "2904860"
  },
  {
    "text": "infrastructure as code all right so our scripts and our configuration are all maintained and yet so you know our",
    "start": "2904860",
    "end": "2911250"
  },
  {
    "text": "primary goal here was to automate everything really automate as much as we possibly could I highly recommend this",
    "start": "2911250",
    "end": "2916350"
  },
  {
    "text": "approach it allows you to define a standardized configuration across the board you can have tweaks for various",
    "start": "2916350",
    "end": "2922650"
  },
  {
    "text": "environments but as a whole you're going to enforce standards that have been tried and true",
    "start": "2922650",
    "end": "2927720"
  },
  {
    "text": "and tested which means better reliability lower room for human error and in addition when you've got",
    "start": "2927720",
    "end": "2935340"
  },
  {
    "text": "automation in place you've got some nice benefits like easy roll backs alright so with the Beanstalk framework it's",
    "start": "2935340",
    "end": "2940650"
  },
  {
    "text": "trivial to roll back to a previous version and in fact using CloudFormation",
    "start": "2940650",
    "end": "2946170"
  },
  {
    "text": "it's easy to roll back your infrastructure to a prior set of configuration auditing is also made",
    "start": "2946170",
    "end": "2953040"
  },
  {
    "text": "easier by um by automation so all in all our goal is to make it quick and simple and and that's the that's the end result",
    "start": "2953040",
    "end": "2959520"
  },
  {
    "text": "so I want to point out that it's possible with these tools or the tools",
    "start": "2959520",
    "end": "2965130"
  },
  {
    "text": "that abhishek showed you to build a continuous delivery pipeline right and it's actually very easy to do this so if",
    "start": "2965130",
    "end": "2970950"
  },
  {
    "text": "you've been interested in going down this route I highly recommend looking into it because it's quite simple to do",
    "start": "2970950",
    "end": "2976230"
  },
  {
    "text": "a combination of in our case get Jenkins Beanstalk and cloud formation allowed us",
    "start": "2976230",
    "end": "2982110"
  },
  {
    "text": "to automate the entire process from build tests security scans provisioning Hardware deploying the application",
    "start": "2982110",
    "end": "2988880"
  },
  {
    "text": "rolling updates and then all the production sort of operational concerns",
    "start": "2988880",
    "end": "2994110"
  },
  {
    "text": "around scaling and fault tolerance so",
    "start": "2994110",
    "end": "2999380"
  },
  {
    "text": "what were the results at the end of the day we had dramatically reduced",
    "start": "2999380",
    "end": "3005090"
  },
  {
    "text": "deployment time now I I saying here it took it takes 30 minutes for our deployments and Abhishek was talking about seconds or minutes and in reality",
    "start": "3005090",
    "end": "3012530"
  },
  {
    "text": "it takes us eight minutes to deploy to all of our instances in production I pad",
    "start": "3012530",
    "end": "3018050"
  },
  {
    "text": "that 30 minutes just in case you know someone does something wrong or you know whatever we have a we have an",
    "start": "3018050",
    "end": "3023090"
  },
  {
    "text": "unpredicted issue but it's it's significantly reduced our outages on Beanstalk since since our go live in",
    "start": "3023090",
    "end": "3030290"
  },
  {
    "text": "March have been zero and our operations for the web app in the cloud have have",
    "start": "3030290",
    "end": "3036620"
  },
  {
    "text": "reduced significantly as well it's a highly stable environment it also scales extremely well and remember it it Auto",
    "start": "3036620",
    "end": "3043670"
  },
  {
    "text": "scales for you right you could know you could set this up yourself you could set up your own auto scaling groups and configure those and manage those",
    "start": "3043670",
    "end": "3049490"
  },
  {
    "text": "but what Beanstalk does for you is it encapsulates all of that business logic all of all those different component",
    "start": "3049490",
    "end": "3056180"
  },
  {
    "text": "parts and handles it for you you have to tune in but once it's set out it's basically set it and forget it and",
    "start": "3056180",
    "end": "3064720"
  },
  {
    "text": "overall the system now is so simple that it takes less than one part-time",
    "start": "3064720",
    "end": "3069830"
  },
  {
    "text": "resource to manage all of the environments everywhere from tests to production so based on our success with",
    "start": "3069830",
    "end": "3076070"
  },
  {
    "text": "Beanstalk we we just recently launched actually last week in additional markets",
    "start": "3076070",
    "end": "3081500"
  },
  {
    "text": "on Beanstalk and we're gonna be launching mobile booking as well on Beanstalk as well so just to summarize",
    "start": "3081500",
    "end": "3088490"
  },
  {
    "text": "they'd like to say that you might think that Beanstalk is is simplistic it's not",
    "start": "3088490",
    "end": "3095420"
  },
  {
    "text": "it's simple but it's not simplistic it's actually quite powerful and it removes a lot of complexity and moving parts that",
    "start": "3095420",
    "end": "3102170"
  },
  {
    "text": "you would otherwise have to manage yourself so our experience at Royal Caribbean has been has been great with",
    "start": "3102170",
    "end": "3108170"
  },
  {
    "text": "Beanstalk and highly encourage you to take a look at it thank you",
    "start": "3108170",
    "end": "3113230"
  }
]