[
  {
    "start": "0",
    "end": "16000"
  },
  {
    "text": "[Music]",
    "start": "610",
    "end": "6170"
  },
  {
    "text": "hello my name is norm a software",
    "start": "6170",
    "end": "8970"
  },
  {
    "text": "engineer on the dotnet team here at Atos",
    "start": "8970",
    "end": "10980"
  },
  {
    "text": "in this video we're gonna talk about",
    "start": "10980",
    "end": "13259"
  },
  {
    "text": "building service applications with",
    "start": "13259",
    "end": "15240"
  },
  {
    "text": "dotnet core at the heart of an ad based",
    "start": "15240",
    "end": "18240"
  },
  {
    "start": "16000",
    "end": "146000"
  },
  {
    "text": "service application is the ADA slam to",
    "start": "18240",
    "end": "20400"
  },
  {
    "text": "service it allows you to run your code",
    "start": "20400",
    "end": "22740"
  },
  {
    "text": "without managing any compute resources",
    "start": "22740",
    "end": "24600"
  },
  {
    "text": "like ec2 instances it also scales",
    "start": "24600",
    "end": "28680"
  },
  {
    "text": "on-demand providing the compute",
    "start": "28680",
    "end": "30630"
  },
  {
    "text": "resources needed to run your code for",
    "start": "30630",
    "end": "33180"
  },
  {
    "text": "the current demand and remove the",
    "start": "33180",
    "end": "35160"
  },
  {
    "text": "compute resources when the demand goes",
    "start": "35160",
    "end": "36930"
  },
  {
    "text": "down you only pay for the time it takes",
    "start": "36930",
    "end": "40079"
  },
  {
    "text": "to run your code that also means when",
    "start": "40079",
    "end": "42960"
  },
  {
    "text": "your code isn't being called then you",
    "start": "42960",
    "end": "44670"
  },
  {
    "text": "aren't charged for anything",
    "start": "44670",
    "end": "46940"
  },
  {
    "text": "Avis lambda is an event-driven system",
    "start": "46940",
    "end": "50010"
  },
  {
    "text": "which is how lambda knows how much",
    "start": "50010",
    "end": "52320"
  },
  {
    "text": "compute resources to provide based on",
    "start": "52320",
    "end": "54780"
  },
  {
    "text": "the number of ents being received events",
    "start": "54780",
    "end": "58289"
  },
  {
    "text": "can come from a table services like s3",
    "start": "58289",
    "end": "60539"
  },
  {
    "text": "or Dinah to be or HTTP requests coming",
    "start": "60539",
    "end": "63270"
  },
  {
    "text": "via Amazon API gateway which allows you",
    "start": "63270",
    "end": "65850"
  },
  {
    "text": "to expose your lambda functions as a",
    "start": "65850",
    "end": "67560"
  },
  {
    "text": "REST API you can also create event",
    "start": "67560",
    "end": "71010"
  },
  {
    "text": "custom events and invoke lambda",
    "start": "71010",
    "end": "72990"
  },
  {
    "text": "functions with any of the 80 bus SDKs",
    "start": "72990",
    "end": "76280"
  },
  {
    "text": "what allows done and developers to take",
    "start": "76280",
    "end": "78869"
  },
  {
    "text": "advantage of a diverse lambda is the",
    "start": "78869",
    "end": "80640"
  },
  {
    "text": "dotnet Core 2.0 lambda runtime to get",
    "start": "80640",
    "end": "83759"
  },
  {
    "text": "started with a tip slender here are some",
    "start": "83759",
    "end": "85380"
  },
  {
    "text": "of the tools we recommend using first is",
    "start": "85380",
    "end": "88229"
  },
  {
    "text": "Visual Studio 2017 make sure when you",
    "start": "88229",
    "end": "91170"
  },
  {
    "text": "install Visual Studio 2017 you include",
    "start": "91170",
    "end": "93630"
  },
  {
    "text": "the dotnet core workload option",
    "start": "93630",
    "end": "96049"
  },
  {
    "text": "second is the ADA mistook it for visual",
    "start": "96049",
    "end": "98759"
  },
  {
    "text": "studio which you can get from the visual",
    "start": "98759",
    "end": "100650"
  },
  {
    "text": "studio marketplace this provides",
    "start": "100650",
    "end": "102630"
  },
  {
    "text": "features for creating lambda projects",
    "start": "102630",
    "end": "104369"
  },
  {
    "text": "and deploying them to the aid of his",
    "start": "104369",
    "end": "106170"
  },
  {
    "text": "club if you preferred not to use Visual",
    "start": "106170",
    "end": "109740"
  },
  {
    "text": "Studio especially for loot developers",
    "start": "109740",
    "end": "111540"
  },
  {
    "text": "developing on a Mac we have extensions",
    "start": "111540",
    "end": "113610"
  },
  {
    "text": "to the dotnet CLI that help you create",
    "start": "113610",
    "end": "115890"
  },
  {
    "text": "and deploy lambda projects before we get",
    "start": "115890",
    "end": "118979"
  },
  {
    "text": "into the demos I want to point out that",
    "start": "118979",
    "end": "121020"
  },
  {
    "text": "our slammed apply burs and CLI tools are",
    "start": "121020",
    "end": "124110"
  },
  {
    "text": "all open source on github this is an",
    "start": "124110",
    "end": "126570"
  },
  {
    "text": "excellent place for getting help with",
    "start": "126570",
    "end": "128399"
  },
  {
    "text": "Donna on lambda feel free to open up a",
    "start": "128399",
    "end": "131250"
  },
  {
    "text": "github issue for questions feature",
    "start": "131250",
    "end": "133170"
  },
  {
    "text": "request",
    "start": "133170",
    "end": "133830"
  },
  {
    "text": "issues there is also a gator channel as",
    "start": "133830",
    "end": "135990"
  },
  {
    "text": "well linked from the repository to chat",
    "start": "135990",
    "end": "138390"
  },
  {
    "text": "with the community or some of the idiots",
    "start": "138390",
    "end": "140100"
  },
  {
    "text": "developers like myself now let's go into",
    "start": "140100",
    "end": "142710"
  },
  {
    "text": "visual studio and see how we can deploy",
    "start": "142710",
    "end": "144210"
  },
  {
    "text": "service applications now here we are in",
    "start": "144210",
    "end": "147240"
  },
  {
    "start": "146000",
    "end": "231000"
  },
  {
    "text": "Visual Studio 2017 and you can see over",
    "start": "147240",
    "end": "149370"
  },
  {
    "text": "here I have the 8 abyss Explorer to the",
    "start": "149370",
    "end": "150960"
  },
  {
    "text": "left and we're going to do now is create",
    "start": "150960",
    "end": "153510"
  },
  {
    "text": "a new project to do that we go to file",
    "start": "153510",
    "end": "156180"
  },
  {
    "text": "new project and under visual c-sharp we",
    "start": "156180",
    "end": "160560"
  },
  {
    "text": "have the ADA base lambda note in here we",
    "start": "160560",
    "end": "163020"
  },
  {
    "text": "really have two different project types",
    "start": "163020",
    "end": "164670"
  },
  {
    "text": "first is the ADA based lambda project",
    "start": "164670",
    "end": "167370"
  },
  {
    "text": "this allows you to create a lambda",
    "start": "167370",
    "end": "169470"
  },
  {
    "text": "project which defines one function that",
    "start": "169470",
    "end": "172110"
  },
  {
    "text": "you can employ directly to a WS once you",
    "start": "172110",
    "end": "174930"
  },
  {
    "text": "deploy it you can then go and set up",
    "start": "174930",
    "end": "177630"
  },
  {
    "text": "your event sources for your lambda",
    "start": "177630",
    "end": "179160"
  },
  {
    "text": "function the second type is a service",
    "start": "179160",
    "end": "182340"
  },
  {
    "text": "application which lets you write one or",
    "start": "182340",
    "end": "184560"
  },
  {
    "text": "more lambda functions and deploy them",
    "start": "184560",
    "end": "186570"
  },
  {
    "text": "all together as a CloudFormation",
    "start": "186570",
    "end": "188370"
  },
  {
    "text": "template it also allows you to deploy",
    "start": "188370",
    "end": "190620"
  },
  {
    "text": "any other additional database resources",
    "start": "190620",
    "end": "193020"
  },
  {
    "text": "you need with your service application",
    "start": "193020",
    "end": "194730"
  },
  {
    "text": "and this first demo we're just going to",
    "start": "194730",
    "end": "197100"
  },
  {
    "text": "create a lambda project I'm gonna name",
    "start": "197100",
    "end": "199680"
  },
  {
    "text": "this demo one next we have a dialog box",
    "start": "199680",
    "end": "206250"
  },
  {
    "text": "that allows us to provide some initial",
    "start": "206250",
    "end": "208530"
  },
  {
    "text": "content for our lambda function you can",
    "start": "208530",
    "end": "211140"
  },
  {
    "text": "also choose the empty function blueprint",
    "start": "211140",
    "end": "213120"
  },
  {
    "text": "to get started from scratch or use one",
    "start": "213120",
    "end": "215760"
  },
  {
    "text": "of the simple service blueprints that",
    "start": "215760",
    "end": "217440"
  },
  {
    "text": "add the initial boilerplate code for",
    "start": "217440",
    "end": "219420"
  },
  {
    "text": "responding to service events and finally",
    "start": "219420",
    "end": "222239"
  },
  {
    "text": "we have some example use case blue",
    "start": "222239",
    "end": "224040"
  },
  {
    "text": "prints like this detect image labels",
    "start": "224040",
    "end": "225900"
  },
  {
    "text": "blue print let's choose this one and see",
    "start": "225900",
    "end": "228150"
  },
  {
    "text": "how it works now what this blue print is",
    "start": "228150",
    "end": "233370"
  },
  {
    "text": "going to do is it's going to listen to",
    "start": "233370",
    "end": "235770"
  },
  {
    "text": "events coming from s3 and seeing if it",
    "start": "235770",
    "end": "238440"
  },
  {
    "text": "is an image and if so use our image",
    "start": "238440",
    "end": "241020"
  },
  {
    "text": "recognition service to see what are the",
    "start": "241020",
    "end": "242880"
  },
  {
    "text": "labels on that image and save those",
    "start": "242880",
    "end": "245700"
  },
  {
    "text": "labels as tags on our s3 object in the",
    "start": "245700",
    "end": "249600"
  },
  {
    "text": "solution Explorer we have a readme file",
    "start": "249600",
    "end": "251130"
  },
  {
    "text": "which explains what the blueprint does",
    "start": "251130",
    "end": "252690"
  },
  {
    "text": "and as far as some steps on how you can",
    "start": "252690",
    "end": "254970"
  },
  {
    "text": "deploy it we also have this a twist",
    "start": "254970",
    "end": "257640"
  },
  {
    "text": "lambda tools default JSON file which",
    "start": "257640",
    "end": "260190"
  },
  {
    "text": "provides a lot of the initial default",
    "start": "260190",
    "end": "261660"
  },
  {
    "text": "values that the deployment wizard will",
    "start": "261660",
    "end": "263550"
  },
  {
    "text": "use when deploying your lambda function",
    "start": "263550",
    "end": "266500"
  },
  {
    "text": "it defined what is the function handler",
    "start": "266500",
    "end": "268530"
  },
  {
    "text": "this is what identifies tool and at what",
    "start": "268530",
    "end": "271420"
  },
  {
    "text": "dotnet method to call in year dotnet",
    "start": "271420",
    "end": "273760"
  },
  {
    "text": "lambda package bundle the first token",
    "start": "273760",
    "end": "276460"
  },
  {
    "text": "here is the name of the assembly that",
    "start": "276460",
    "end": "279160"
  },
  {
    "text": "contains the function the second is the",
    "start": "279160",
    "end": "281920"
  },
  {
    "text": "name of the class including its",
    "start": "281920",
    "end": "283360"
  },
  {
    "text": "namespace and the third part is the",
    "start": "283360",
    "end": "286450"
  },
  {
    "text": "actual function name within that class",
    "start": "286450",
    "end": "289350"
  },
  {
    "text": "now let's take a look at the code inside",
    "start": "289350",
    "end": "291550"
  },
  {
    "text": "our lambda function and our lambda",
    "start": "291550",
    "end": "296920"
  },
  {
    "text": "function we have a few service clients",
    "start": "296920",
    "end": "298930"
  },
  {
    "text": "that we're going to use we also have",
    "start": "298930",
    "end": "301900"
  },
  {
    "text": "this minimum confidence confidence",
    "start": "301900",
    "end": "303250"
  },
  {
    "text": "property which is what we're gonna pass",
    "start": "303250",
    "end": "305740"
  },
  {
    "text": "to the image recognition service to only",
    "start": "305740",
    "end": "309460"
  },
  {
    "text": "return back the labels that have that",
    "start": "309460",
    "end": "311050"
  },
  {
    "text": "level of confidence we have our hash of",
    "start": "311050",
    "end": "313960"
  },
  {
    "text": "the valid extensions of images that we",
    "start": "313960",
    "end": "315610"
  },
  {
    "text": "support next is we have our constructor",
    "start": "315610",
    "end": "319510"
  },
  {
    "text": "that lambda is gonna call when it first",
    "start": "319510",
    "end": "321460"
  },
  {
    "text": "invokes our lambda function within a new",
    "start": "321460",
    "end": "323290"
  },
  {
    "text": "lambda compute environment and all this",
    "start": "323290",
    "end": "325450"
  },
  {
    "text": "state that's created in this constructor",
    "start": "325450",
    "end": "327640"
  },
  {
    "text": "will persist for all of the subsequent",
    "start": "327640",
    "end": "329470"
  },
  {
    "text": "lambda function votes this is a really",
    "start": "329470",
    "end": "331900"
  },
  {
    "text": "good place to run any code that you only",
    "start": "331900",
    "end": "334570"
  },
  {
    "text": "need to run once and be able to reuse",
    "start": "334570",
    "end": "336760"
  },
  {
    "text": "those same objects like creating our",
    "start": "336760",
    "end": "339370"
  },
  {
    "text": "service clients here now we don't have",
    "start": "339370",
    "end": "341500"
  },
  {
    "text": "to create those service clients for",
    "start": "341500",
    "end": "342669"
  },
  {
    "text": "every request we just reuse those same",
    "start": "342669",
    "end": "344229"
  },
  {
    "text": "ones and we'll make our lambda functions",
    "start": "344229",
    "end": "345970"
  },
  {
    "text": "run faster we can also check our",
    "start": "345970",
    "end": "348669"
  },
  {
    "text": "environment variables you saw I took in",
    "start": "348669",
    "end": "350740"
  },
  {
    "text": "a minimum confidence value and it has a",
    "start": "350740",
    "end": "353050"
  },
  {
    "text": "default value of 70% when we deploy a",
    "start": "353050",
    "end": "355690"
  },
  {
    "text": "lambda function we can actually set an",
    "start": "355690",
    "end": "357400"
  },
  {
    "text": "environment variable to override that",
    "start": "357400",
    "end": "358870"
  },
  {
    "text": "value the blueprint also contains an",
    "start": "358870",
    "end": "363729"
  },
  {
    "text": "additional constructor that you can use",
    "start": "363729",
    "end": "365440"
  },
  {
    "text": "for at your tests if you want to pass in",
    "start": "365440",
    "end": "367150"
  },
  {
    "text": "your own service clients in minimum",
    "start": "367150",
    "end": "368800"
  },
  {
    "text": "confidence low now the function handler",
    "start": "368800",
    "end": "373540"
  },
  {
    "text": "method this is the one that LEM is going",
    "start": "373540",
    "end": "375220"
  },
  {
    "text": "to call for every one of your lambda",
    "start": "375220",
    "end": "376630"
  },
  {
    "text": "implications this method is an",
    "start": "376630",
    "end": "379600"
  },
  {
    "text": "asynchronous method so it returns back a",
    "start": "379600",
    "end": "381460"
  },
  {
    "text": "task and what lambda is going to do is",
    "start": "381460",
    "end": "383650"
  },
  {
    "text": "it's going to find out it returned back",
    "start": "383650",
    "end": "385479"
  },
  {
    "text": "a task and wait for that test to",
    "start": "385479",
    "end": "387250"
  },
  {
    "text": "complete before reporting that the",
    "start": "387250",
    "end": "388810"
  },
  {
    "text": "lambda function is complete and it takes",
    "start": "388810",
    "end": "392410"
  },
  {
    "text": "in an s3 event object which is a typed",
    "start": "392410",
    "end": "394930"
  },
  {
    "text": "class and it can do that because at the",
    "start": "394930",
    "end": "397630"
  },
  {
    "text": "top of our class here we",
    "start": "397630",
    "end": "400090"
  },
  {
    "text": "registered lambda serializer by default",
    "start": "400090",
    "end": "404380"
  },
  {
    "text": "lambda supports passing in a stream of",
    "start": "404380",
    "end": "406449"
  },
  {
    "text": "data your input requests but with that",
    "start": "406449",
    "end": "409000"
  },
  {
    "text": "serializer lambda knows how to convert",
    "start": "409000",
    "end": "410979"
  },
  {
    "text": "that string into our s3 event class now",
    "start": "410979",
    "end": "416800"
  },
  {
    "text": "if we look at that code it's going to",
    "start": "416800",
    "end": "418210"
  },
  {
    "text": "loop through all the records in our s3",
    "start": "418210",
    "end": "419949"
  },
  {
    "text": "event see if the object uploaded was one",
    "start": "419949",
    "end": "423790"
  },
  {
    "text": "of our supported images we're then gonna",
    "start": "423790",
    "end": "426820"
  },
  {
    "text": "call the image recognition service to go",
    "start": "426820",
    "end": "428949"
  },
  {
    "text": "detect any labels on that and that's",
    "start": "428949",
    "end": "433240"
  },
  {
    "text": "going to give us back some labels and",
    "start": "433240",
    "end": "434830"
  },
  {
    "text": "we're going to set up a tag collection",
    "start": "434830",
    "end": "436540"
  },
  {
    "text": "with the first 10 tags or labels that",
    "start": "436540",
    "end": "439300"
  },
  {
    "text": "that returns and then using our s3",
    "start": "439300",
    "end": "442360"
  },
  {
    "text": "service object we're gonna go put those",
    "start": "442360",
    "end": "443770"
  },
  {
    "text": "tags on our object so that's our code",
    "start": "443770",
    "end": "447400"
  },
  {
    "text": "now let's go look at how we can deploy",
    "start": "447400",
    "end": "449200"
  },
  {
    "text": "that I can right click on our project",
    "start": "449200",
    "end": "452289"
  },
  {
    "text": "and say publish to AWS and this brings",
    "start": "452289",
    "end": "456940"
  },
  {
    "start": "455000",
    "end": "746000"
  },
  {
    "text": "up our deployment wizard and notice a",
    "start": "456940",
    "end": "458740"
  },
  {
    "text": "lot of these fields are already set up",
    "start": "458740",
    "end": "460030"
  },
  {
    "text": "for us and that was set up in that",
    "start": "460030",
    "end": "461949"
  },
  {
    "text": "defaults file for us so we just need to",
    "start": "461949",
    "end": "464110"
  },
  {
    "text": "specify a name here I'll call this demo",
    "start": "464110",
    "end": "466180"
  },
  {
    "text": "1 and we're going to leave that checkbox",
    "start": "466180",
    "end": "469360"
  },
  {
    "text": "set below so that all the settings we",
    "start": "469360",
    "end": "471520"
  },
  {
    "text": "set in the wizard will be persisted back",
    "start": "471520",
    "end": "473139"
  },
  {
    "text": "into that defaults file so the next time",
    "start": "473139",
    "end": "475150"
  },
  {
    "text": "we come to the wizard we don't have to",
    "start": "475150",
    "end": "476380"
  },
  {
    "text": "reach out those bikes on the next screen",
    "start": "476380",
    "end": "482320"
  },
  {
    "text": "we need to specify what is the I am role",
    "start": "482320",
    "end": "484419"
  },
  {
    "text": "we want to set for our lambda function",
    "start": "484419",
    "end": "485979"
  },
  {
    "text": "this role is what's going to provide our",
    "start": "485979",
    "end": "488050"
  },
  {
    "text": "lambda function access to a to this s3",
    "start": "488050",
    "end": "490660"
  },
  {
    "text": "and image recognition service we can",
    "start": "490660",
    "end": "493360"
  },
  {
    "text": "select one of our existing roles or",
    "start": "493360",
    "end": "494830"
  },
  {
    "text": "create a brand new role based on some of",
    "start": "494830",
    "end": "496300"
  },
  {
    "text": "the lambda managed policies or if we",
    "start": "496300",
    "end": "498310"
  },
  {
    "text": "have any custom policies that we set up",
    "start": "498310",
    "end": "499960"
  },
  {
    "text": "in our accounts like those for today",
    "start": "499960",
    "end": "501940"
  },
  {
    "text": "we're going to use my existing role that",
    "start": "501940",
    "end": "503889"
  },
  {
    "text": "I've already set up I could adjust the",
    "start": "503889",
    "end": "506680"
  },
  {
    "text": "memory settings as well which also in",
    "start": "506680",
    "end": "508870"
  },
  {
    "text": "just how much CPU power lambda provides",
    "start": "508870",
    "end": "511690"
  },
  {
    "text": "to your lambda function if your lambda",
    "start": "511690",
    "end": "514839"
  },
  {
    "text": "function is going to be using any",
    "start": "514839",
    "end": "516700"
  },
  {
    "text": "resources inside your V PC you can",
    "start": "516700",
    "end": "519430"
  },
  {
    "text": "select a V PC subnet and security group",
    "start": "519430",
    "end": "522760"
  },
  {
    "text": "to attach your lambda function into it",
    "start": "522760",
    "end": "524529"
  },
  {
    "text": "and then I'll have access to those V PC",
    "start": "524529",
    "end": "526480"
  },
  {
    "text": "resources we could also enable x-ray to",
    "start": "526480",
    "end": "530020"
  },
  {
    "text": "do tracing to get Diagnostics of your",
    "start": "530020",
    "end": "531970"
  },
  {
    "text": "application",
    "start": "531970",
    "end": "532649"
  },
  {
    "text": "and here's where I could specify any",
    "start": "532649",
    "end": "534749"
  },
  {
    "text": "environment variables like in this case",
    "start": "534749",
    "end": "536639"
  },
  {
    "text": "I could override the confidence level",
    "start": "536639",
    "end": "538680"
  },
  {
    "text": "for image recognizes recognition service",
    "start": "538680",
    "end": "541699"
  },
  {
    "text": "we're gonna lease leave out the default",
    "start": "541699",
    "end": "543569"
  },
  {
    "text": "and push upload that's kind of build our",
    "start": "543569",
    "end": "547350"
  },
  {
    "text": "lambda function package it up and send",
    "start": "547350",
    "end": "549420"
  },
  {
    "text": "it to lambda to create our lambda",
    "start": "549420",
    "end": "551459"
  },
  {
    "text": "function and here it is it's all",
    "start": "551459",
    "end": "553769"
  },
  {
    "text": "complete it's deployed and we could",
    "start": "553769",
    "end": "555449"
  },
  {
    "text": "start invoking this method right now",
    "start": "555449",
    "end": "557119"
  },
  {
    "text": "this is our lambda function screen",
    "start": "557119",
    "end": "560189"
  },
  {
    "text": "coming from the Explorer right here and",
    "start": "560189",
    "end": "563300"
  },
  {
    "text": "the first tab here is how we could do a",
    "start": "563300",
    "end": "565800"
  },
  {
    "text": "test invocation we could write the input",
    "start": "565800",
    "end": "568559"
  },
  {
    "text": "request and call invoke and there are",
    "start": "568559",
    "end": "570779"
  },
  {
    "text": "sample requests like here's what an s3",
    "start": "570779",
    "end": "572369"
  },
  {
    "text": "pot looks like I could go and adjust",
    "start": "572369",
    "end": "574740"
  },
  {
    "text": "this - there are actual buckets and",
    "start": "574740",
    "end": "577439"
  },
  {
    "text": "object keys that I know exist and run it",
    "start": "577439",
    "end": "579300"
  },
  {
    "text": "I can also adjust all those",
    "start": "579300",
    "end": "582569"
  },
  {
    "text": "configuration settings that I did in the",
    "start": "582569",
    "end": "583949"
  },
  {
    "text": "wizard I can also go into my event",
    "start": "583949",
    "end": "587339"
  },
  {
    "text": "sources and set up how I want this to be",
    "start": "587339",
    "end": "589709"
  },
  {
    "text": "called there are other event sources",
    "start": "589709",
    "end": "592350"
  },
  {
    "text": "that are not set up in this dialog box",
    "start": "592350",
    "end": "594029"
  },
  {
    "text": "and for those you need to go into the",
    "start": "594029",
    "end": "595529"
  },
  {
    "text": "services consoles to do that but for s3",
    "start": "595529",
    "end": "598679"
  },
  {
    "text": "we can do that right here we can click",
    "start": "598679",
    "end": "600179"
  },
  {
    "text": "Add and the s3 bucket select the bucket",
    "start": "600179",
    "end": "605879"
  },
  {
    "text": "we want to use I'm pushed ok and now our",
    "start": "605879",
    "end": "610649"
  },
  {
    "text": "three bucket is configured to send all",
    "start": "610649",
    "end": "612809"
  },
  {
    "text": "of its events to our lambda function",
    "start": "612809",
    "end": "614550"
  },
  {
    "text": "I've landed function we invoked as",
    "start": "614550",
    "end": "616019"
  },
  {
    "text": "objects are uploaded to it and we can",
    "start": "616019",
    "end": "618839"
  },
  {
    "text": "test that out here is our s3 bucket",
    "start": "618839",
    "end": "621389"
  },
  {
    "text": "let's open up an explorer I already have",
    "start": "621389",
    "end": "625050"
  },
  {
    "text": "one image but we'll go ahead just copy",
    "start": "625050",
    "end": "626220"
  },
  {
    "text": "it over again copy this image over this",
    "start": "626220",
    "end": "631230"
  },
  {
    "text": "is uploading to our bucket and by doing",
    "start": "631230",
    "end": "636299"
  },
  {
    "text": "that that has triggered our lambda",
    "start": "636299",
    "end": "637889"
  },
  {
    "text": "function to be invoked now if we look at",
    "start": "637889",
    "end": "640049"
  },
  {
    "text": "this function this picture this is a",
    "start": "640049",
    "end": "642089"
  },
  {
    "text": "picture of my daughter jumping around on",
    "start": "642089",
    "end": "643679"
  },
  {
    "text": "the beach now let's see what image",
    "start": "643679",
    "end": "645420"
  },
  {
    "text": "recognition has found in that picture if",
    "start": "645420",
    "end": "650639"
  },
  {
    "text": "I go back to our function view we can",
    "start": "650639",
    "end": "653309"
  },
  {
    "text": "look at logs and here is our log",
    "start": "653309",
    "end": "657589"
  },
  {
    "text": "download and these are the labels that",
    "start": "657589",
    "end": "661649"
  },
  {
    "text": "it found for that we can also go back to",
    "start": "661649",
    "end": "664980"
  },
  {
    "text": "our bucket",
    "start": "664980",
    "end": "667190"
  },
  {
    "text": "right click and say properties and see",
    "start": "667190",
    "end": "672899"
  },
  {
    "text": "here all those labels that were added as",
    "start": "672899",
    "end": "674220"
  },
  {
    "text": "tags to it so we can see that my",
    "start": "674220",
    "end": "675690"
  },
  {
    "text": "daughter really - human she's playing in",
    "start": "675690",
    "end": "677760"
  },
  {
    "text": "nature on the water and I'm Beach so",
    "start": "677760",
    "end": "681810"
  },
  {
    "text": "that's how we can create a lambda",
    "start": "681810",
    "end": "682889"
  },
  {
    "text": "function and deployed strictly to lambda",
    "start": "682889",
    "end": "685320"
  },
  {
    "text": "service now let's take a look at how we",
    "start": "685320",
    "end": "687449"
  },
  {
    "text": "could deploy a service application so",
    "start": "687449",
    "end": "690540"
  },
  {
    "text": "this is how we can use a lambda project",
    "start": "690540",
    "end": "692160"
  },
  {
    "text": "to deploy a lambda function directly to",
    "start": "692160",
    "end": "694019"
  },
  {
    "text": "the service and then configure its event",
    "start": "694019",
    "end": "695760"
  },
  {
    "text": "sources now let's take a look at how we",
    "start": "695760",
    "end": "698130"
  },
  {
    "text": "can deploy a service application to do",
    "start": "698130",
    "end": "700829"
  },
  {
    "text": "that let's go create a brand-new project",
    "start": "700829",
    "end": "702660"
  },
  {
    "text": "so go to file new project and this time",
    "start": "702660",
    "end": "706860"
  },
  {
    "text": "we're going to select the service",
    "start": "706860",
    "end": "708149"
  },
  {
    "text": "application project imma call this demo",
    "start": "708149",
    "end": "710730"
  },
  {
    "text": "- again we can choose our blueprints we",
    "start": "710730",
    "end": "716790"
  },
  {
    "text": "can do a service application an empty",
    "start": "716790",
    "end": "719040"
  },
  {
    "text": "service application if we want to start",
    "start": "719040",
    "end": "720360"
  },
  {
    "text": "from scratch we have a couple and ones",
    "start": "720360",
    "end": "722490"
  },
  {
    "text": "where you can actually run an a spinet",
    "start": "722490",
    "end": "724139"
  },
  {
    "text": "core web application on lambda the one I",
    "start": "724139",
    "end": "727680"
  },
  {
    "text": "want to look at today though is our blog",
    "start": "727680",
    "end": "729149"
  },
  {
    "text": "API using data V because this is a good",
    "start": "729149",
    "end": "731160"
  },
  {
    "text": "example of how you can deploy multiple",
    "start": "731160",
    "end": "732810"
  },
  {
    "text": "lambda functions together as a cloud",
    "start": "732810",
    "end": "735600"
  },
  {
    "text": "formation template along with add I know",
    "start": "735600",
    "end": "737519"
  },
  {
    "text": "to be table so let's click finish close",
    "start": "737519",
    "end": "743250"
  },
  {
    "text": "this down I have very similar files I",
    "start": "743250",
    "end": "748620"
  },
  {
    "text": "have a default file my function CS where",
    "start": "748620",
    "end": "751019"
  },
  {
    "text": "all my code is my blog is a class that",
    "start": "751019",
    "end": "755010"
  },
  {
    "text": "going to represent what a blog looks",
    "start": "755010",
    "end": "756329"
  },
  {
    "text": "like and I have this new file called",
    "start": "756329",
    "end": "759089"
  },
  {
    "text": "service template this is a",
    "start": "759089",
    "end": "762420"
  },
  {
    "text": "CloudFormation template which defines",
    "start": "762420",
    "end": "764670"
  },
  {
    "text": "all for my lambda functions as well as a",
    "start": "764670",
    "end": "768600"
  },
  {
    "text": "down on Ruby table that's going to be",
    "start": "768600",
    "end": "770639"
  },
  {
    "text": "used to store my blogs and we also have",
    "start": "770639",
    "end": "774019"
  },
  {
    "text": "parameters coming in that just specify",
    "start": "774019",
    "end": "776850"
  },
  {
    "text": "what is the name of the table and what",
    "start": "776850",
    "end": "778740"
  },
  {
    "text": "are the read and write capacities before",
    "start": "778740",
    "end": "780149"
  },
  {
    "text": "my identity table now if we expand out",
    "start": "780149",
    "end": "783240"
  },
  {
    "text": "one of these lambda functions here you",
    "start": "783240",
    "end": "785760"
  },
  {
    "text": "can see this is where we declare the",
    "start": "785760",
    "end": "788699"
  },
  {
    "text": "dotnet method that we want to call for",
    "start": "788699",
    "end": "790260"
  },
  {
    "text": "this lambda function we're also passing",
    "start": "790260",
    "end": "793079"
  },
  {
    "text": "in the environment variables the name of",
    "start": "793079",
    "end": "794910"
  },
  {
    "text": "the dynamic table that we're creating as",
    "start": "794910",
    "end": "796500"
  },
  {
    "text": "part of our CloudFormation template",
    "start": "796500",
    "end": "799920"
  },
  {
    "text": "we are also setting up the event",
    "start": "799920",
    "end": "801179"
  },
  {
    "text": "sourcing in this example we are using",
    "start": "801179",
    "end": "803549"
  },
  {
    "text": "API gateway to expose our lambda",
    "start": "803549",
    "end": "805739"
  },
  {
    "text": "functions so it's going to expose our",
    "start": "805739",
    "end": "807149"
  },
  {
    "text": "lambda function at a resting point where",
    "start": "807149",
    "end": "809339"
  },
  {
    "text": "the default route is gonna call up to",
    "start": "809339",
    "end": "811290"
  },
  {
    "text": "get all blocks for the HT method get' if",
    "start": "811290",
    "end": "816359"
  },
  {
    "text": "we look at the one lambda function we're",
    "start": "816359",
    "end": "818399"
  },
  {
    "text": "getting a individual blog post it looks",
    "start": "818399",
    "end": "821069"
  },
  {
    "text": "the same except we're going to call a",
    "start": "821069",
    "end": "821970"
  },
  {
    "text": "different lambda function our neck",
    "start": "821970",
    "end": "824669"
  },
  {
    "text": "method which is gonna get a singular",
    "start": "824669",
    "end": "827189"
  },
  {
    "text": "blog and then the HTTP pass is going to",
    "start": "827189",
    "end": "831269"
  },
  {
    "text": "pass in the ID and that's how we'll know",
    "start": "831269",
    "end": "833339"
  },
  {
    "text": "which blog to go fetch in the add and",
    "start": "833339",
    "end": "836309"
  },
  {
    "text": "remove blogs work the same ice case to",
    "start": "836309",
    "end": "839939"
  },
  {
    "text": "look at the code for our for land",
    "start": "839939",
    "end": "841529"
  },
  {
    "text": "functions so there's our serializer",
    "start": "841529",
    "end": "844290"
  },
  {
    "text": "again and in our constructor we're gonna",
    "start": "844290",
    "end": "847529"
  },
  {
    "text": "go and pull that environment variable to",
    "start": "847529",
    "end": "849839"
  },
  {
    "text": "let us know which done would be table to",
    "start": "849839",
    "end": "851399"
  },
  {
    "text": "use we're going to set up our done and",
    "start": "851399",
    "end": "854160"
  },
  {
    "text": "be context object because we don't need",
    "start": "854160",
    "end": "856350"
  },
  {
    "text": "to create that for every one of our",
    "start": "856350",
    "end": "857730"
  },
  {
    "text": "requests and if we look at our actual",
    "start": "857730",
    "end": "861929"
  },
  {
    "text": "methods here we have get blogs that's",
    "start": "861929",
    "end": "864720"
  },
  {
    "text": "gonna return back all of our blogs and",
    "start": "864720",
    "end": "866339"
  },
  {
    "text": "it's going to return back an api gateway",
    "start": "866339",
    "end": "868769"
  },
  {
    "text": "proxy response which says the status",
    "start": "868769",
    "end": "871559"
  },
  {
    "text": "code is okay and it's going to give a",
    "start": "871559",
    "end": "873389"
  },
  {
    "text": "JSON version of all of our blogs if you",
    "start": "873389",
    "end": "878279"
  },
  {
    "text": "look at the blog to give you a single",
    "start": "878279",
    "end": "879809"
  },
  {
    "text": "one we're gonna go and find the blog ID",
    "start": "879809",
    "end": "881610"
  },
  {
    "text": "from our parameters so if we didn't get",
    "start": "881610",
    "end": "884100"
  },
  {
    "text": "a blog ID we're gonna return back a bad",
    "start": "884100",
    "end": "886259"
  },
  {
    "text": "HP status code then we're gonna go use",
    "start": "886259",
    "end": "890489"
  },
  {
    "text": "our dynamic context object to load our",
    "start": "890489",
    "end": "892169"
  },
  {
    "text": "blog and if that returned back null",
    "start": "892169",
    "end": "894089"
  },
  {
    "text": "we're gonna return back not found they",
    "start": "894089",
    "end": "896999"
  },
  {
    "text": "should be satisfied and if we found it",
    "start": "896999",
    "end": "899549"
  },
  {
    "text": "we're gonna go incredibly our API",
    "start": "899549",
    "end": "901589"
  },
  {
    "text": "gateway proxy response object passing in",
    "start": "901589",
    "end": "904199"
  },
  {
    "text": "our blog and return back ace status okay",
    "start": "904199",
    "end": "907369"
  },
  {
    "text": "HP status code and the add your removes",
    "start": "907369",
    "end": "911369"
  },
  {
    "text": "work very similar but let's take a look",
    "start": "911369",
    "end": "913529"
  },
  {
    "text": "now how we can deploy this service",
    "start": "913529",
    "end": "915239"
  },
  {
    "text": "application again we do that by clicking",
    "start": "915239",
    "end": "917850"
  },
  {
    "text": "a demo - and we select publish to Avis",
    "start": "917850",
    "end": "920639"
  },
  {
    "text": "lambda now in this case we're not",
    "start": "920639",
    "end": "924509"
  },
  {
    "text": "deploying a single lambda function we're",
    "start": "924509",
    "end": "926369"
  },
  {
    "text": "deploying four lambda functions so we're",
    "start": "926369",
    "end": "928559"
  },
  {
    "text": "going to do that as a cloud formation",
    "start": "928559",
    "end": "929999"
  },
  {
    "text": "stack so we got to give our stack a name",
    "start": "929999",
    "end": "932600"
  },
  {
    "text": "call this demo 2 and we need to give it",
    "start": "932600",
    "end": "935329"
  },
  {
    "text": "an s3 bucket to use to store our lambda",
    "start": "935329",
    "end": "938810"
  },
  {
    "text": "functions package bundle we have that",
    "start": "938810",
    "end": "942699"
  },
  {
    "text": "push next now because our CloudFormation",
    "start": "942699",
    "end": "945920"
  },
  {
    "text": "template was parameterised there's",
    "start": "945920",
    "end": "948319"
  },
  {
    "text": "another page added to the wizard which",
    "start": "948319",
    "end": "951199"
  },
  {
    "text": "allows us to set those parameters in",
    "start": "951199",
    "end": "952759"
  },
  {
    "text": "this case we're going to set the table",
    "start": "952759",
    "end": "955040"
  },
  {
    "text": "name I'm gonna call that demo 2 and I'm",
    "start": "955040",
    "end": "957860"
  },
  {
    "text": "going to leave the rest of them at the",
    "start": "957860",
    "end": "959180"
  },
  {
    "text": "default values and push publish this is",
    "start": "959180",
    "end": "964550"
  },
  {
    "text": "going to do that same it's going to",
    "start": "964550",
    "end": "965660"
  },
  {
    "text": "compile our application we dip it all up",
    "start": "965660",
    "end": "968240"
  },
  {
    "text": "send it up to lambda and start creating",
    "start": "968240",
    "end": "971540"
  },
  {
    "text": "our CloudFormation stack so this is",
    "start": "971540",
    "end": "976940"
  },
  {
    "start": "975000",
    "end": "1220000"
  },
  {
    "text": "loaded up our cloud formation view from",
    "start": "976940",
    "end": "978860"
  },
  {
    "text": "the nativist Explorer which is going to",
    "start": "978860",
    "end": "980660"
  },
  {
    "text": "start showing the events of those Avis",
    "start": "980660",
    "end": "982130"
  },
  {
    "text": "resources coming out now this will take",
    "start": "982130",
    "end": "984889"
  },
  {
    "text": "about a minute to be all finished so",
    "start": "984889",
    "end": "987019"
  },
  {
    "text": "we're going to fast forward the video",
    "start": "987019",
    "end": "987980"
  },
  {
    "text": "for that total for that to be finished",
    "start": "987980",
    "end": "992560"
  },
  {
    "text": "now a cloud formation stack is complete",
    "start": "1002180",
    "end": "1004220"
  },
  {
    "text": "all of our resources have been created",
    "start": "1004220",
    "end": "1005570"
  },
  {
    "text": "and we're given a URL to where our AP",
    "start": "1005570",
    "end": "1008570"
  },
  {
    "text": "our lambda functions are exposed I'm",
    "start": "1008570",
    "end": "1010850"
  },
  {
    "text": "gonna copy this URL and use a tool",
    "start": "1010850",
    "end": "1013010"
  },
  {
    "text": "called postman to be able to test my",
    "start": "1013010",
    "end": "1015290"
  },
  {
    "text": "rest endpoint so if I paste that in here",
    "start": "1015290",
    "end": "1018410"
  },
  {
    "text": "and we're gonna do a get operation and",
    "start": "1018410",
    "end": "1021020"
  },
  {
    "text": "we send that request this is gonna go",
    "start": "1021020",
    "end": "1023930"
  },
  {
    "text": "and call our lambda function to go",
    "start": "1023930",
    "end": "1025699"
  },
  {
    "text": "return all the blog posts and of course",
    "start": "1025700",
    "end": "1027410"
  },
  {
    "text": "I haven't created any blogs yet so it",
    "start": "1027410",
    "end": "1029089"
  },
  {
    "text": "returns back an empty JSON array so",
    "start": "1029089",
    "end": "1031790"
  },
  {
    "text": "let's go ahead and post one we're gonna",
    "start": "1031790",
    "end": "1034939"
  },
  {
    "text": "go and do a put we're going to pass a",
    "start": "1034940",
    "end": "1039380"
  },
  {
    "text": "body for that now if we look back at our",
    "start": "1039380",
    "end": "1044089"
  },
  {
    "text": "blog we can see it takes in a name and a",
    "start": "1044089",
    "end": "1047089"
  },
  {
    "text": "Content ID and created time step are",
    "start": "1047089",
    "end": "1050240"
  },
  {
    "text": "going to be auto-generated for us when",
    "start": "1050240",
    "end": "1051590"
  },
  {
    "text": "we post this so we just need to pass in",
    "start": "1051590",
    "end": "1053840"
  },
  {
    "text": "a JSON document that contains a name and",
    "start": "1053840",
    "end": "1055640"
  },
  {
    "text": "content so we'll set the content type to",
    "start": "1055640",
    "end": "1060850"
  },
  {
    "text": "JSON service content is awesome blog",
    "start": "1060850",
    "end": "1075380"
  },
  {
    "text": "post okay so here's our body let's go",
    "start": "1075380",
    "end": "1079250"
  },
  {
    "text": "ahead and send that and this is now",
    "start": "1079250",
    "end": "1081290"
  },
  {
    "text": "going to call that lambda function which",
    "start": "1081290",
    "end": "1083000"
  },
  {
    "text": "will save our request into our dynami",
    "start": "1083000",
    "end": "1084890"
  },
  {
    "text": "table and it has returned back the ID of",
    "start": "1084890",
    "end": "1088490"
  },
  {
    "text": "this new blog post and we can go and see",
    "start": "1088490",
    "end": "1093160"
  },
  {
    "text": "enter down to the table that the record",
    "start": "1093160",
    "end": "1096800"
  },
  {
    "text": "was stored there and now if we go back",
    "start": "1096800",
    "end": "1100490"
  },
  {
    "text": "to postman and we do a get we can see",
    "start": "1100490",
    "end": "1102710"
  },
  {
    "text": "that we're going to get now our blog",
    "start": "1102710",
    "end": "1104000"
  },
  {
    "text": "posts coming from our REST API so you",
    "start": "1104000",
    "end": "1107870"
  },
  {
    "text": "can see as deploying a service",
    "start": "1107870",
    "end": "1109100"
  },
  {
    "text": "application it's a really easy way to",
    "start": "1109100",
    "end": "1110990"
  },
  {
    "text": "deploy a whole collection of functions",
    "start": "1110990",
    "end": "1112820"
  },
  {
    "text": "and your ADA base resources all together",
    "start": "1112820",
    "end": "1114680"
  },
  {
    "text": "as a unit and another nice thing about",
    "start": "1114680",
    "end": "1116690"
  },
  {
    "text": "it is when you are done testing it is",
    "start": "1116690",
    "end": "1118460"
  },
  {
    "text": "really easy to tear it down because all",
    "start": "1118460",
    "end": "1120620"
  },
  {
    "text": "you have to do is go back to your cloud",
    "start": "1120620",
    "end": "1122990"
  },
  {
    "text": "formation stack and delete it and then",
    "start": "1122990",
    "end": "1125110"
  },
  {
    "text": "all of those resources that you've spun",
    "start": "1125110",
    "end": "1127850"
  },
  {
    "text": "up to test your lambda function will all",
    "start": "1127850",
    "end": "1130220"
  },
  {
    "text": "be cleaned up for you one more thing I",
    "start": "1130220",
    "end": "1132560"
  },
  {
    "text": "want to show you before we end today is",
    "start": "1132560",
    "end": "1134180"
  },
  {
    "text": "we talked about how we have this deep",
    "start": "1134180",
    "end": "1136090"
  },
  {
    "text": "file which save all the settings that we",
    "start": "1136090",
    "end": "1138520"
  },
  {
    "text": "did in our wizard and we can also reuse",
    "start": "1138520",
    "end": "1141100"
  },
  {
    "text": "that with our command lines deployments",
    "start": "1141100",
    "end": "1143440"
  },
  {
    "text": "with all of our blueprints we have",
    "start": "1143440",
    "end": "1145659"
  },
  {
    "text": "configured the command line deployments",
    "start": "1145659",
    "end": "1149679"
  },
  {
    "text": "with it so when you create a lambda",
    "start": "1149679",
    "end": "1151179"
  },
  {
    "text": "blueprint you'll be able to do all that",
    "start": "1151179",
    "end": "1153460"
  },
  {
    "text": "same deployment from the command line",
    "start": "1153460",
    "end": "1155789"
  },
  {
    "text": "and we can do that by opening a command",
    "start": "1155789",
    "end": "1158320"
  },
  {
    "text": "window so here we are in the directory",
    "start": "1158320",
    "end": "1163390"
  },
  {
    "text": "of our lambda project and now I can say",
    "start": "1163390",
    "end": "1165880"
  },
  {
    "text": "dotnet galanba help and you can see here",
    "start": "1165880",
    "end": "1170080"
  },
  {
    "text": "are all those same deployment commands",
    "start": "1170080",
    "end": "1171669"
  },
  {
    "text": "that we had in Visual Studio and so I",
    "start": "1171669",
    "end": "1173500"
  },
  {
    "text": "can deploy this same function that I",
    "start": "1173500",
    "end": "1175690"
  },
  {
    "text": "just did by saying dotnet dotnet lambda",
    "start": "1175690",
    "end": "1181860"
  },
  {
    "text": "deploy service and I could pass in all",
    "start": "1181860",
    "end": "1185200"
  },
  {
    "text": "of the parameters to do that but because",
    "start": "1185200",
    "end": "1186880"
  },
  {
    "text": "everything was set up in the defaults",
    "start": "1186880",
    "end": "1188440"
  },
  {
    "text": "file I don't actually have to do",
    "start": "1188440",
    "end": "1189789"
  },
  {
    "text": "anything I can just do that and then",
    "start": "1189789",
    "end": "1191710"
  },
  {
    "text": "that will deploy the same function I did",
    "start": "1191710",
    "end": "1193720"
  },
  {
    "text": "in Visual Studio so you can see this is",
    "start": "1193720",
    "end": "1195580"
  },
  {
    "text": "an easy way to go from visual studio to",
    "start": "1195580",
    "end": "1197919"
  },
  {
    "text": "then start automating your deployments",
    "start": "1197919",
    "end": "1199799"
  },
  {
    "text": "hopefully C with a tuba slander there",
    "start": "1199799",
    "end": "1202539"
  },
  {
    "text": "are a lot of options with developing",
    "start": "1202539",
    "end": "1203980"
  },
  {
    "text": "service applications with dotnet whether",
    "start": "1203980",
    "end": "1206350"
  },
  {
    "text": "using lambda or service application",
    "start": "1206350",
    "end": "1208659"
  },
  {
    "text": "projects thank you for watching",
    "start": "1208659",
    "end": "1212669"
  },
  {
    "text": "[Music]",
    "start": "1212690",
    "end": "1222159"
  }
]