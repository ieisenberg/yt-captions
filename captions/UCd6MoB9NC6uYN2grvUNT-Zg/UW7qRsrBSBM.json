[
  {
    "text": "hi everyone welcome to today's webinar your first step to running applications with containers my name is Daniel I'm a",
    "start": "8990",
    "end": "16379"
  },
  {
    "text": "Solutions Architect based in Melbourne I'm also going to be running a live Q&A throughout the session so if you have",
    "start": "16379",
    "end": "21810"
  },
  {
    "text": "any questions please enter them into the chat window and we have solution architects standing by who are going to",
    "start": "21810",
    "end": "27840"
  },
  {
    "text": "answer those privately throughout the session if we have time at the end we'll cover off any of the common questions",
    "start": "27840",
    "end": "33270"
  },
  {
    "text": "that have been asked and any questions that we can't answer today I will send out in a fact sheet after the",
    "start": "33270",
    "end": "39090"
  },
  {
    "text": "presentation so getting started today",
    "start": "39090",
    "end": "47030"
  },
  {
    "text": "we're gonna cover it's a 100 level introductory session aimed at helping getting started and understanding using",
    "start": "47149",
    "end": "54120"
  },
  {
    "text": "ECS and containers it's about being able to take your first steps and at the end we hope you're going around a stand some",
    "start": "54120",
    "end": "61379"
  },
  {
    "text": "of the docker features how to use SES and how to be able to deploy container so acs so first we're gonna dive",
    "start": "61379",
    "end": "67950"
  },
  {
    "text": "technically into what containers are and then we'll cover off some of the benefits and why containers are such a hot item at the moment then we'll touch",
    "start": "67950",
    "end": "75240"
  },
  {
    "text": "on Cermak design considerations when using containers particularly around micro services then we'll look at the",
    "start": "75240",
    "end": "82830"
  },
  {
    "text": "ec2 container service at the ec2 container registry and then we'll wire",
    "start": "82830",
    "end": "89100"
  },
  {
    "text": "it all together with a demonstration and show you how it all works but first what are containers so",
    "start": "89100",
    "end": "99210"
  },
  {
    "text": "containers or a method of virtualizing your application its dependencies and",
    "start": "99210",
    "end": "104220"
  },
  {
    "text": "running them all in a single resource isolated process so as this picture shows the containers are all sharing one",
    "start": "104220",
    "end": "109799"
  },
  {
    "text": "at guest operating system so backing allow you to easily package up your",
    "start": "109799",
    "end": "115130"
  },
  {
    "text": "application code the configuration and all of its dependencies into one",
    "start": "115130",
    "end": "120420"
  },
  {
    "text": "building block for fast deployment and we called that building block a container image and it can run on any",
    "start": "120420",
    "end": "126960"
  },
  {
    "text": "machine running the docker engine and today we're only talking about docker there are other container versions",
    "start": "126960",
    "end": "133560"
  },
  {
    "text": "around as well so people often ask well what's the difference between a virtual",
    "start": "133560",
    "end": "138989"
  },
  {
    "text": "machine and a container so the differences are highlighted by these diagrams and on the Left we have an",
    "start": "138989",
    "end": "144780"
  },
  {
    "text": "example of a virtual machine and you can see we have the server the host operating system in the hypervisor and",
    "start": "144780",
    "end": "151739"
  },
  {
    "text": "then we're running a whole lot of guest operating systems on top of them before we get into our application layer on the",
    "start": "151739",
    "end": "157380"
  },
  {
    "text": "right we have our server and then we've got our host operating system and then our docker layer and all we have to run",
    "start": "157380",
    "end": "163620"
  },
  {
    "text": "on top of that are the applications and libraries that are required to run your application so if we look at a",
    "start": "163620",
    "end": "171120"
  },
  {
    "text": "virtualized environment and we wanted to run a different version of the software or a dependency we're going to have to",
    "start": "171120",
    "end": "176910"
  },
  {
    "text": "try and share that on one virtual machine or we're gonna have to run an entire new virtual machine including the",
    "start": "176910",
    "end": "182549"
  },
  {
    "text": "operating system whereas by using containers we don't need that one single operating system and the applications on",
    "start": "182549",
    "end": "189420"
  },
  {
    "text": "top that are required are called distributed in container we can also",
    "start": "189420",
    "end": "196799"
  },
  {
    "text": "compare that an entire operating system is generally going to be key you get bits in size and take minutes to",
    "start": "196799",
    "end": "203130"
  },
  {
    "text": "launch whereas containers normally in the megabytes and can be deployed very",
    "start": "203130",
    "end": "208170"
  },
  {
    "text": "quickly so containers have been around",
    "start": "208170",
    "end": "213720"
  },
  {
    "text": "for a while and been evolving into what they are today so in 1979 chroot",
    "start": "213720",
    "end": "219709"
  },
  {
    "text": "contained a process and all its children to one area of the filesystem and then that's been iterated and improved on",
    "start": "219709",
    "end": "226069"
  },
  {
    "text": "open virtuoso in 2005 for example added CPU constraints to containers and then",
    "start": "226069",
    "end": "234420"
  },
  {
    "text": "we get to 2013 when docker was released and that made it easier to move these docker images around with a tooling that",
    "start": "234420",
    "end": "241950"
  },
  {
    "text": "they provided and it continues to grow we've had over 450 million downloads since 2006 and in 2015",
    "start": "241950",
    "end": "249989"
  },
  {
    "text": "AWS introduced the ec2 container service to manage containers at stale so why do",
    "start": "249989",
    "end": "259650"
  },
  {
    "text": "we see people using containers because using the container you can run and",
    "start": "259650",
    "end": "264870"
  },
  {
    "text": "build exactly the same container on the developer desktop that's going to end up running in your production environment so this solves",
    "start": "264870",
    "end": "270699"
  },
  {
    "text": "that problem of the small all differences that we would see between development and production environments",
    "start": "270699",
    "end": "277020"
  },
  {
    "text": "small differences that usually ended up with the conversation well working dev I'm not sure why it's not working in",
    "start": "277020",
    "end": "282400"
  },
  {
    "text": "production or removed also using containers each of the components of an",
    "start": "282400",
    "end": "288610"
  },
  {
    "text": "application they can all be run in a separate container so that it improves the developer efficiency so previously",
    "start": "288610",
    "end": "294729"
  },
  {
    "text": "if your component required a newer library or version all the components that we're using that library would need",
    "start": "294729",
    "end": "300550"
  },
  {
    "text": "to be tested before we could deploy them and without containers developers had very limited ways of tracking the",
    "start": "300550",
    "end": "307360"
  },
  {
    "text": "versions of everything outside their application tools like puppet and chef can be complicated doc it has a manifest",
    "start": "307360",
    "end": "315520"
  },
  {
    "text": "docker file that's easy to maintain and track the versions of view container so",
    "start": "315520",
    "end": "321370"
  },
  {
    "text": "you can expect the differences and roll forwards and backwards to previous versions if you need to dr. images are",
    "start": "321370",
    "end": "326620"
  },
  {
    "text": "also built in layers so that means that existing components that don't change don't need to be rebuilt now so this",
    "start": "326620",
    "end": "332169"
  },
  {
    "text": "makes the builds faster starting container is just the same as starting a process so they scale very fast and some",
    "start": "332169",
    "end": "341259"
  },
  {
    "text": "processes when you're running they don't need all the instance capacity all the time so with a container you've got",
    "start": "341259",
    "end": "346840"
  },
  {
    "text": "flexibility to use that unused capacity with a batch job for example running in",
    "start": "346840",
    "end": "353229"
  },
  {
    "text": "its own isolated process on the same instance so all this adds up to",
    "start": "353229",
    "end": "358889"
  },
  {
    "text": "consistent environment increased developer productivity better version control and improved operational",
    "start": "358889",
    "end": "364569"
  },
  {
    "text": "efficiency across our compute resources we understand and know what containers",
    "start": "364569",
    "end": "372039"
  },
  {
    "text": "are now and we can easily ship small units of application around we need to",
    "start": "372039",
    "end": "377500"
  },
  {
    "text": "consider how our applications designed to take full advantage of that orchestration and control that is now available to us so a look at some of the",
    "start": "377500",
    "end": "384789"
  },
  {
    "text": "different application design patterns we see monolithic is probably the most",
    "start": "384789",
    "end": "389800"
  },
  {
    "text": "clear-cut where your application is tightly coupled and if you change the functionality in one part of your application you're going to have to test",
    "start": "389800",
    "end": "396849"
  },
  {
    "text": "the functionality of the entire application all components are likely to depend on same back-end or data store or memory",
    "start": "396849",
    "end": "403930"
  },
  {
    "text": "for example as well I've got service-oriented architecture where we break them on anything to do different",
    "start": "403930",
    "end": "409630"
  },
  {
    "text": "application domains but the business logic might still span several domains and it's common in this pattern to see a",
    "start": "409630",
    "end": "416800"
  },
  {
    "text": "form of middleware that's still tightly coupling some of the different components are changing one part of our",
    "start": "416800",
    "end": "422020"
  },
  {
    "text": "application is still going to cause testing of several different components and finally have the micro services",
    "start": "422020",
    "end": "427500"
  },
  {
    "text": "which have very many small components and each component expo this is a",
    "start": "427500",
    "end": "435040"
  },
  {
    "text": "service that's going to abstract whatever language or data store is sitting behind it so the business logic",
    "start": "435040",
    "end": "441040"
  },
  {
    "text": "is living inside a single domain and you can make changes so long as you don't break the functionality of your service",
    "start": "441040",
    "end": "447720"
  },
  {
    "text": "so let's translate this to a business case and use an e-commerce application",
    "start": "447720",
    "end": "452890"
  },
  {
    "text": "as an example so let's say a new software package is released and it's going to save our business five hundred",
    "start": "452890",
    "end": "460150"
  },
  {
    "text": "thousand dollars a month because it's going to drastically increase our shipping efficiency in a Mollett situation we find that the software",
    "start": "460150",
    "end": "466180"
  },
  {
    "text": "version to include our application is using the library older than we're already using so we have options that we",
    "start": "466180",
    "end": "472480"
  },
  {
    "text": "can either run it in an untested environment we can wait for everybody's compatibility to a line or go back to",
    "start": "472480",
    "end": "478360"
  },
  {
    "text": "the vendor and try and get them to help us align it so we could be looking at months before we see that application",
    "start": "478360",
    "end": "484600"
  },
  {
    "text": "and realize the business benefit in production whereas if we're using micro services we could create a container",
    "start": "484600",
    "end": "489880"
  },
  {
    "text": "with the environment that's required and supported and so long as that service passes all its test cases then we can",
    "start": "489880",
    "end": "495940"
  },
  {
    "text": "quickly release that into production and realize that cost saving much far faster we can also start to see that we can",
    "start": "495940",
    "end": "503110"
  },
  {
    "text": "have many developers working safely on different parts of our application and deploying at different times so apart",
    "start": "503110",
    "end": "512800"
  },
  {
    "text": "from the deployment complications monolithic applications also have difficulty breaking out any of the any",
    "start": "512800",
    "end": "519370"
  },
  {
    "text": "of the components to scale individually so here we have an e-commerce application we've got like be the order",
    "start": "519370",
    "end": "526090"
  },
  {
    "text": "UI the shipping service and if we need to scale any of those we have to scale the entire application so let's say the",
    "start": "526090",
    "end": "532960"
  },
  {
    "text": "shipping service needs some extra CPU we've got the options that we can scale up and that's maybe put more CPU or",
    "start": "532960",
    "end": "539690"
  },
  {
    "text": "memory in the machine that we've got we can scale out and that will involve adding an entirely new machine to our to",
    "start": "539690",
    "end": "548090"
  },
  {
    "text": "scale onto whereas if we look at that in a micro-services example so here we've",
    "start": "548090",
    "end": "555470"
  },
  {
    "text": "broken out they no want a tightly coupled we've got our audio user interface user service and shipping service running in totally separate",
    "start": "555470",
    "end": "563240"
  },
  {
    "text": "containers and then we need to go and scale that we can see we can start to scale applications or parts of the",
    "start": "563240",
    "end": "569960"
  },
  {
    "text": "application independently and we also notice now that we're starting to get",
    "start": "569960",
    "end": "575990"
  },
  {
    "text": "some more containers to manage and as that continues to grow and our application continues to grow and we get",
    "start": "575990",
    "end": "582140"
  },
  {
    "text": "more users and services it gets harder to manager so let's say we've got a",
    "start": "582140",
    "end": "587510"
  },
  {
    "text": "deploy 50 containers of X and 10 containers of Y and this is where Amazon",
    "start": "587510",
    "end": "593920"
  },
  {
    "text": "ECS comes into play and helps with that management of large clusters and",
    "start": "593920",
    "end": "600860"
  },
  {
    "text": "instances and putting those containers across those instances so I've got easy",
    "start": "600860",
    "end": "606410"
  },
  {
    "text": "cluster management flexible bull share julene it's integrated and extensible secure and designed for performance at",
    "start": "606410",
    "end": "613580"
  },
  {
    "text": "scale now we'll dive into each of those individually so ECS looks after the",
    "start": "613580",
    "end": "620780"
  },
  {
    "text": "cluster management eliminates a need for you to have to run and manage your own cluster you don't have to install or",
    "start": "620780",
    "end": "627890"
  },
  {
    "text": "manage any cluster software it manages the cluster state for example scaling and adding in removing instances it",
    "start": "627890",
    "end": "635000"
  },
  {
    "text": "manages the containers and the distribution of those containers across your instance there's provides control",
    "start": "635000",
    "end": "641390"
  },
  {
    "text": "and monitoring of what's going on within your cluster and allows you to scale from one to ten zuv thousands of",
    "start": "641390",
    "end": "647210"
  },
  {
    "text": "containers it offers flexible scheduling no more when it comes to scheduling",
    "start": "647210",
    "end": "653930"
  },
  {
    "text": "there's there's some confusion there's sometimes some confusion because it's not about running containers at certain",
    "start": "653930",
    "end": "659510"
  },
  {
    "text": "times of the day like 9 a.m. for example for 4 hours containing the scheduling is referring to where the resources will be allocated",
    "start": "659510",
    "end": "665990"
  },
  {
    "text": "to complete the work that's required so to use an analogy if if we were packing a moving truck and we wanted to",
    "start": "665990",
    "end": "672680"
  },
  {
    "text": "maximize it to fit the most items per trip will have a packing schedule to achieve that and that might be okay we",
    "start": "672680",
    "end": "679040"
  },
  {
    "text": "can put big boxes in and then the little ones around it if we wanted to instead",
    "start": "679040",
    "end": "684440"
  },
  {
    "text": "on our move spread our valuable items between multiple trucks to minimize the risk then we'll have a different packing",
    "start": "684440",
    "end": "691340"
  },
  {
    "text": "schedule because we have different requirements for our move so easiest provides different scheduling",
    "start": "691340",
    "end": "698300"
  },
  {
    "text": "options and you can choose one of our ones to one of the provider ones for your application for example we have",
    "start": "698300",
    "end": "705200"
  },
  {
    "text": "availability zone and spread where you can spread your containers across different availability zones to ensure",
    "start": "705200",
    "end": "711920"
  },
  {
    "text": "high availability so you can decide",
    "start": "711920",
    "end": "716960"
  },
  {
    "text": "which ceiling option is best for your application or you can use an integrated third party jeweler if you have your own",
    "start": "716960",
    "end": "723980"
  },
  {
    "text": "specific business or application requirement you might also want to consider looking at blocks which is our",
    "start": "723980",
    "end": "729500"
  },
  {
    "text": "open tooling released by AWS for building custom schedulers one of the",
    "start": "729500",
    "end": "735980"
  },
  {
    "text": "benefits with ECAs is that it's integrated across the AWS platform so I",
    "start": "735980",
    "end": "741050"
  },
  {
    "text": "am security elastic load balancers cloud watch cloud trail you're gonna get all",
    "start": "741050",
    "end": "748700"
  },
  {
    "text": "the benefits of working within AWS and communicating with the other AWS services it's also extensible through",
    "start": "748700",
    "end": "756980"
  },
  {
    "text": "API so you can use your own scheduler for example but you can also connect it",
    "start": "756980",
    "end": "763370"
  },
  {
    "text": "with existing software for your software delivery process so you might already be using tools that integrate with ACS our",
    "start": "763370",
    "end": "769700"
  },
  {
    "text": "circle CI cloudBees twist up data dog for example so it may be worth checking",
    "start": "769700",
    "end": "776690"
  },
  {
    "text": "those from a security perspective it's",
    "start": "776690",
    "end": "783680"
  },
  {
    "text": "important to realize that the instances that are running with ACS are just your ec2 instances running in your VP C just",
    "start": "783680",
    "end": "790910"
  },
  {
    "text": "like any other instance you would launch on the AWS platform so this means you get the same VP's be security with",
    "start": "790910",
    "end": "799760"
  },
  {
    "text": "security groups networks network access control lists I am rolls you can also put them into",
    "start": "799760",
    "end": "806540"
  },
  {
    "text": "public or private subnets and communicate with them over an IPSec VPN",
    "start": "806540",
    "end": "812090"
  },
  {
    "text": "or direct connect or you could even take advantage of dedicated instances if you",
    "start": "812090",
    "end": "817820"
  },
  {
    "text": "wanted to be notable yes it's been designed for scale built on technology",
    "start": "817820",
    "end": "824750"
  },
  {
    "text": "are developed for many years you can launch clusters with thousands of",
    "start": "824750",
    "end": "830750"
  },
  {
    "text": "instances and schedule tens of thousands of containers in seconds the common use",
    "start": "830750",
    "end": "837620"
  },
  {
    "text": "cases we see people using ECS as we discussed already micro-services and",
    "start": "837620",
    "end": "843800"
  },
  {
    "text": "distributed applications lend themselves to containers very nicely because it",
    "start": "843800",
    "end": "848840"
  },
  {
    "text": "allows you to create distribute applications and break them apart into independent tasks and process because",
    "start": "848840",
    "end": "855730"
  },
  {
    "text": "for example you could have a separate container for your webserver your application server your message queue",
    "start": "855730",
    "end": "861320"
  },
  {
    "text": "and back-end workers and they can all coexist on the one instance for example",
    "start": "861320",
    "end": "867280"
  },
  {
    "text": "you've got that isolation to be able to run those components side by side so",
    "start": "867280",
    "end": "872740"
  },
  {
    "text": "virtual ETL jobs the benefits there are one you can use the unused capacity to be running a batch job well up the",
    "start": "872740",
    "end": "880100"
  },
  {
    "text": "containers are running but because the processes are isolated you can run different batch jobs on the same",
    "start": "880100",
    "end": "886370"
  },
  {
    "text": "instance and from a CI CD perspective as we discussed before because you've just",
    "start": "886370",
    "end": "892190"
  },
  {
    "text": "got that one at docker image building block that you're moving around you can push that Torah posit Ori for example",
    "start": "892190",
    "end": "898670"
  },
  {
    "text": "have the test cases picked up and run that same container and then employ exactly that same container onto your",
    "start": "898670",
    "end": "905240"
  },
  {
    "text": "production servers so you avoid having an application that works in development that n fails when it goes into",
    "start": "905240",
    "end": "911630"
  },
  {
    "text": "production because you always got exactly that same image the components",
    "start": "911630",
    "end": "921260"
  },
  {
    "text": "that make our PCs so we're gonna go into these in a little more detail but it will just point out and talk over them",
    "start": "921260",
    "end": "926510"
  },
  {
    "text": "quickly because we have clusters which is a collection of the container instances and sort of nested within those clusters we have our container",
    "start": "926510",
    "end": "932990"
  },
  {
    "text": "instances within the container instances we're going to have our containers we",
    "start": "932990",
    "end": "938450"
  },
  {
    "text": "have a service which is maintaining a number of tasks running across our",
    "start": "938450",
    "end": "944210"
  },
  {
    "text": "container instances we have the task definition which is going to say how",
    "start": "944210",
    "end": "949250"
  },
  {
    "text": "each of these containers should have run one or more container should run and then we have the doctor daemon which is",
    "start": "949250",
    "end": "955130"
  },
  {
    "text": "running on our instances it's executing the containers as we asked it to so",
    "start": "955130",
    "end": "962540"
  },
  {
    "text": "first let's look at the cluster which is the collection of our ec2 instances generally which are and run them across",
    "start": "962540",
    "end": "968180"
  },
  {
    "text": "mod all of our abilities those for high availability they can be made up of",
    "start": "968180",
    "end": "974270"
  },
  {
    "text": "different instance types that they are region specific and a container in",
    "start": "974270",
    "end": "979280"
  },
  {
    "text": "students can only belong to one cluster",
    "start": "979280",
    "end": "983590"
  },
  {
    "text": "so an instance is just an ec2 instance owned by you like we said before running in your V PC you can even SSH to it if",
    "start": "984370",
    "end": "993470"
  },
  {
    "text": "you want to the dr. demian is running on your ec2 instance listening on my local socket and then we have the ACS agent",
    "start": "993470",
    "end": "1000160"
  },
  {
    "text": "which is doing the communication between ACS and the dr. demian and that's open",
    "start": "1000160",
    "end": "1005950"
  },
  {
    "text": "and publicly available on github if you wanted to have a look but you can also use that to build your own custom",
    "start": "1005950",
    "end": "1011250"
  },
  {
    "text": "machine images or a.m. eyes if you want to to integrate with ECS the task",
    "start": "1011250",
    "end": "1019030"
  },
  {
    "text": "definition is where they were going to specify what's going around so we can",
    "start": "1019030",
    "end": "1024220"
  },
  {
    "text": "have one or more containers run specify the amount of CPU or memory that's going to be available to that container we can",
    "start": "1024220",
    "end": "1033339"
  },
  {
    "text": "use links which is going to provide network channels between containers and we can add volumes to persist data",
    "start": "1033340",
    "end": "1039939"
  },
  {
    "text": "between the containers and task definitions are checked by name and",
    "start": "1039940",
    "end": "1046569"
  },
  {
    "text": "revision so we can go to those and forwards across different versions of that and we have the task which is",
    "start": "1046570",
    "end": "1052900"
  },
  {
    "text": "essentially just in a Stan she ation of that task definition it runs on the",
    "start": "1052900",
    "end": "1060090"
  },
  {
    "text": "instances within the cluster and we can have one or more containers like we might have tightly linked containers",
    "start": "1060090",
    "end": "1065830"
  },
  {
    "text": "which is like a sidecar model where you could have your primary container be nowhere server for example and you might have a",
    "start": "1065830",
    "end": "1072490"
  },
  {
    "text": "loading container that launches at the same time within a task when we have a",
    "start": "1072490",
    "end": "1079509"
  },
  {
    "text": "service the service allows you to run or",
    "start": "1079509",
    "end": "1084549"
  },
  {
    "text": "maintain a number of different tasks definitions within a class so if any of",
    "start": "1084549",
    "end": "1089769"
  },
  {
    "text": "those tasks stop or fail the scheduler will attempt to relaunch another instance of your task definition to",
    "start": "1089769",
    "end": "1095320"
  },
  {
    "text": "replace it and it's always trying to maintain that desired count like an auto scaling group the service can run behind",
    "start": "1095320",
    "end": "1102580"
  },
  {
    "text": "a low balance so and that's going to distribute traffic to the tasks that are associated with it we'll have a look at",
    "start": "1102580",
    "end": "1107740"
  },
  {
    "text": "that in the demo we've got tasks placement that's where we talk about where we're going to put each of these",
    "start": "1107740",
    "end": "1114009"
  },
  {
    "text": "containers to run and for an example where we've got the AZ balance spread we're going to run our tasks across",
    "start": "1114009",
    "end": "1120549"
  },
  {
    "text": "multiple availability zones so what it would do in that situation is determine",
    "start": "1120549",
    "end": "1126070"
  },
  {
    "text": "which container instances can support our task definition make sure they've got enough CPU and memory for example",
    "start": "1126070",
    "end": "1131830"
  },
  {
    "text": "we're going to sort those available instances by the fewest number of tasks that are running in each availability",
    "start": "1131830",
    "end": "1137559"
  },
  {
    "text": "zone and I'm going to place a new service on a the new service tasks on a",
    "start": "1137559",
    "end": "1142809"
  },
  {
    "text": "valid container with the optimal availability zone favoring instance with the least tasks and the same is true",
    "start": "1142809",
    "end": "1149409"
  },
  {
    "text": "when removing tasks it's going to try and maintain that availability zone distribution for us and now we need",
    "start": "1149409",
    "end": "1159039"
  },
  {
    "text": "somewhere to store our images so ECS needs to load them from somewhere",
    "start": "1159039",
    "end": "1164169"
  },
  {
    "text": "dr. hub is supported for image launching however ECR is tightly integrated secure",
    "start": "1164169",
    "end": "1169659"
  },
  {
    "text": "location that you can sister your images your docker images it's fully managed so",
    "start": "1169659",
    "end": "1174669"
  },
  {
    "text": "you don't have to operate any of your own infrastructure for your container registry it's no software to install or",
    "start": "1174669",
    "end": "1181269"
  },
  {
    "text": "manage your scale you just push your docker images in into a mature Amazon ECR and then you can just pull them when",
    "start": "1181269",
    "end": "1187750"
  },
  {
    "text": "you need to do a deployment using your standard tools secure images are loaded",
    "start": "1187750",
    "end": "1193929"
  },
  {
    "text": "over HTTPS automatically encrypted rest and then you can use I am policies to",
    "start": "1193929",
    "end": "1201700"
  },
  {
    "text": "control security and access around those images it's highly available redundant durable",
    "start": "1201700",
    "end": "1207610"
  },
  {
    "text": "architecture backed by us three so they stored across multiple facilities but",
    "start": "1207610",
    "end": "1213340"
  },
  {
    "text": "the most important I think most important is the simplified workflow and ECR being integrated tightly with ACS so",
    "start": "1213340",
    "end": "1221860"
  },
  {
    "text": "we know that images are there can be pulled and launched quickly when they need to be into our production environment so just have a look at the",
    "start": "1221860",
    "end": "1232600"
  },
  {
    "text": "workflow of a user here's a developer he wants to deploy his Dockery me which",
    "start": "1232600",
    "end": "1238600"
  },
  {
    "text": "that he's gone and built into a cluster he's had it running locally with no problems and he's ready to deploy it so",
    "start": "1238600",
    "end": "1246639"
  },
  {
    "text": "first he's going to create a repository on a CR and then he's going to push his image into that repository then you can",
    "start": "1246639",
    "end": "1255759"
  },
  {
    "text": "create a task definition as we said we're going to say which container we're going to run can be one or more we're",
    "start": "1255759",
    "end": "1261429"
  },
  {
    "text": "going to set the CPU and memory requirements that are required to run",
    "start": "1261429",
    "end": "1266860"
  },
  {
    "text": "this task then I'm going to launch some launch some instances into the cluster",
    "start": "1266860",
    "end": "1274120"
  },
  {
    "text": "where we're going to run this task and as I said there can be different instance types all running within the",
    "start": "1274120",
    "end": "1279370"
  },
  {
    "text": "one cluster and then he's going to run the task or create the service as we see",
    "start": "1279370",
    "end": "1287169"
  },
  {
    "text": "the so task he's going to run once and not be not ACS is not going to attempt",
    "start": "1287169",
    "end": "1292269"
  },
  {
    "text": "to maintain State on it whereas if we create a service will maintain that desired count and try and keep those",
    "start": "1292269",
    "end": "1297299"
  },
  {
    "text": "services run I mean and so now we're going to step through a demo and take a",
    "start": "1297299",
    "end": "1304149"
  },
  {
    "text": "look at how it all works so what we'll do first is we'll have a look at docker",
    "start": "1304149",
    "end": "1309850"
  },
  {
    "text": "hub we'll build a docker file for nginx will open ECR create a repository push",
    "start": "1309850",
    "end": "1318309"
  },
  {
    "text": "an image to that repository then we'll jump over to ACS create a cluster create",
    "start": "1318309",
    "end": "1324190"
  },
  {
    "text": "a task definition launch a task will create a service and then we'll stop",
    "start": "1324190",
    "end": "1330940"
  },
  {
    "text": "some tasks to check the resiliency and create a load balancer",
    "start": "1330940",
    "end": "1335909"
  },
  {
    "text": "so just me moment and I'll bring that up",
    "start": "1336130",
    "end": "1340440"
  },
  {
    "text": "so here we are we are just gonna be working within the console today you can",
    "start": "1346200",
    "end": "1351370"
  },
  {
    "text": "do this with the CLR commands as well or via our API calls",
    "start": "1351370",
    "end": "1356560"
  },
  {
    "text": "so first we'll have a look at docker hub so here is here are about base images",
    "start": "1356560",
    "end": "1362320"
  },
  {
    "text": "official repositories from docker today we're gonna be deploying the engine X and if we jump into that we can see we",
    "start": "1362320",
    "end": "1371590"
  },
  {
    "text": "get some instructions on how to set up our docker file and this is the example we're going to use so we're going to say",
    "start": "1371590",
    "end": "1376960"
  },
  {
    "text": "from engine annex which you're saying ok let's use the official nginx repository and then we're going to copy our HTML",
    "start": "1376960",
    "end": "1383740"
  },
  {
    "text": "from static HTML directory to the home directory essentially on nginx so we'll",
    "start": "1383740",
    "end": "1390250"
  },
  {
    "text": "jump over to the our service and have a look at them so there we have our docker",
    "start": "1390250",
    "end": "1403810"
  },
  {
    "text": "file as you can see it's very similar to what we saw or in docker hub now I've already got the docker tools installed",
    "start": "1403810",
    "end": "1410920"
  },
  {
    "text": "on the system so if you need them you can install them for your system on the docker home page so just go back and",
    "start": "1410920",
    "end": "1421240"
  },
  {
    "text": "look at some of the others so there are a lot of images available we've got even like the full WordPress you can run",
    "start": "1421240",
    "end": "1427020"
  },
  {
    "text": "rabbitmq all easily available and use the same method to build and distribute",
    "start": "1427020",
    "end": "1434470"
  },
  {
    "text": "those so what we're going to do is push",
    "start": "1434470",
    "end": "1439870"
  },
  {
    "text": "this up to our repository so we'll go into CCS and create a repository I'll",
    "start": "1439870",
    "end": "1450550"
  },
  {
    "text": "get started here we could step through a step by step to get everything running",
    "start": "1450550",
    "end": "1455920"
  },
  {
    "text": "at once so it's a quick start to set up our environment but today we'll step",
    "start": "1455920",
    "end": "1461110"
  },
  {
    "text": "through manually so we can see exactly what the step so first we're going to set up our",
    "start": "1461110",
    "end": "1466960"
  },
  {
    "text": "repository and we'll call it the zip webinar repository and that's all we",
    "start": "1466960",
    "end": "1476500"
  },
  {
    "text": "needed to do to create a repository number but it's very specific CLI",
    "start": "1476500",
    "end": "1482500"
  },
  {
    "text": "commands that we're going to use to push our a docker image into our repository",
    "start": "1482500",
    "end": "1487780"
  },
  {
    "text": "so first thing we're going to do is log in and we can just cut and paste these",
    "start": "1487780",
    "end": "1492930"
  },
  {
    "text": "directly over into our terminal window so first of all indoor login and that's",
    "start": "1492930",
    "end": "1498820"
  },
  {
    "text": "going to generate a secure login for us and then I can cut and paste that login",
    "start": "1498820",
    "end": "1504060"
  },
  {
    "text": "to connect and we can see that our login",
    "start": "1504060",
    "end": "1516310"
  },
  {
    "text": "has succeeded so then we'll grab our next command which is to do the build so",
    "start": "1516310",
    "end": "1526630"
  },
  {
    "text": "that all have done fairly quickly it had been run before so as we said doc will only rebuild the changed components it",
    "start": "1526630",
    "end": "1533860"
  },
  {
    "text": "doesn't have to rebuild the entire thing because it's building in different layers and now we're going to tag the",
    "start": "1533860",
    "end": "1538870"
  },
  {
    "text": "instance which is effectively a way of version controlling that into our repository and we'll just tag that as",
    "start": "1538870",
    "end": "1545920"
  },
  {
    "text": "being the latest image and now we'll do the push which will push it into the",
    "start": "1545920",
    "end": "1552040"
  },
  {
    "text": "repository and then we'll take a moment",
    "start": "1552040",
    "end": "1558130"
  },
  {
    "text": "to upload so we'll go back over to our repository again close that now if we",
    "start": "1558130",
    "end": "1565390"
  },
  {
    "text": "ever need to come back and see those commands again they're easily available here and we can just go in and do",
    "start": "1565390",
    "end": "1571360"
  },
  {
    "text": "another push for example so let's close that and hopefully we now have our image",
    "start": "1571360",
    "end": "1578940"
  },
  {
    "text": "in our repository so now we're gonna create our cluster and this is where",
    "start": "1578940",
    "end": "1585430"
  },
  {
    "text": "we're going to start to deploy our image to so create a cluster we'll give it a",
    "start": "1585430",
    "end": "1591460"
  },
  {
    "text": "name of answered webinar cluster and we can choose our instance types or",
    "start": "1591460",
    "end": "1597540"
  },
  {
    "text": "we can create an empty cluster so we've had an empty cluster then we can start pushing out different image types as we",
    "start": "1597540",
    "end": "1603330"
  },
  {
    "text": "want to enter the cluster but because as a demo we'll run - let's say m4 lodges",
    "start": "1603330",
    "end": "1609680"
  },
  {
    "text": "we can allocate our beer storage that we require and here we have the key pair",
    "start": "1609680",
    "end": "1616280"
  },
  {
    "text": "that we can associate with those instances like as we said before you can",
    "start": "1616280",
    "end": "1621330"
  },
  {
    "text": "SSH to these because they are your own instances then we have the networking",
    "start": "1621330",
    "end": "1629790"
  },
  {
    "text": "component as well saying it just runs within your own VPC I've already created a V PC for this I will add our two",
    "start": "1629790",
    "end": "1637110"
  },
  {
    "text": "subnets across to availability zones a security group again I've already",
    "start": "1637110",
    "end": "1642150"
  },
  {
    "text": "created so we'll attach that security to it and create and so essentially that's",
    "start": "1642150",
    "end": "1649110"
  },
  {
    "text": "all we need to do to create our cluster and they'll take a moment for those",
    "start": "1649110",
    "end": "1656120"
  },
  {
    "text": "instances to launch so we'll just go and create the task definition now and so",
    "start": "1656120",
    "end": "1663000"
  },
  {
    "text": "the task definition is going to define how our containers going to run within the cluster on those instances that we",
    "start": "1663000",
    "end": "1670050"
  },
  {
    "text": "just created so create a new task definition here we can assign a role and",
    "start": "1670050",
    "end": "1680250"
  },
  {
    "text": "this is where we say it's tightly integrated with AWS so you could have a role that's going to allow this container access to s3 for example we",
    "start": "1680250",
    "end": "1689190"
  },
  {
    "text": "choose our network mode this host and bridge won't go into those right now what I'm going to choose bridge which is",
    "start": "1689190",
    "end": "1694860"
  },
  {
    "text": "the docker bridge and here we add our container that we're going to launch and",
    "start": "1694860",
    "end": "1700950"
  },
  {
    "text": "we're going to set the requirements the sort of CPU memory around that as well so we'll call that the webinar container",
    "start": "1700950",
    "end": "1708920"
  },
  {
    "text": "and we need that image URL and I didn't copy them before so I'll just go back",
    "start": "1708920",
    "end": "1716340"
  },
  {
    "text": "and grab typically and that includes the tag",
    "start": "1716340",
    "end": "1720740"
  },
  {
    "text": "so there we've got our repository and the image tag now we can set the memory",
    "start": "1722960",
    "end": "1730890"
  },
  {
    "text": "limits for and we can sit hard or soft limits huddle soft limits for this container if we're to the soft limit",
    "start": "1730890",
    "end": "1736920"
  },
  {
    "text": "it's going to be allocated that amount of memory but it's going to be allowed to continue to consume memory up to",
    "start": "1736920",
    "end": "1741960"
  },
  {
    "text": "what's available on that instance so if we set a soft limit of 200 can use 200",
    "start": "1741960",
    "end": "1747750"
  },
  {
    "text": "Meg but it can then continue to consume until the instance turns out of memory unless we set a hard limit and so let's",
    "start": "1747750",
    "end": "1754320"
  },
  {
    "text": "set our other middle of say 400 and then we have our poor map Inza because this",
    "start": "1754320",
    "end": "1760350"
  },
  {
    "text": "is a web server we're going to run it on port 80 we're going to dive into dynamic",
    "start": "1760350",
    "end": "1765360"
  },
  {
    "text": "ports in a minute because we're going restrict we can only have one process running on Porter maybe on each instance",
    "start": "1765360",
    "end": "1772309"
  },
  {
    "text": "so that's where our load balancer comes in and helps distribute across dynamic port so we'll have a look at that in a",
    "start": "1772309",
    "end": "1777750"
  },
  {
    "text": "moment then we have a whole lot of environmental network settings very fine",
    "start": "1777750",
    "end": "1783780"
  },
  {
    "text": "you could troll around what we can do with how this containers going to run I can just leave those as the default",
    "start": "1783780",
    "end": "1789780"
  },
  {
    "text": "values and now we have our container",
    "start": "1789780",
    "end": "1795059"
  },
  {
    "text": "oh sorry our task definition all set up and ready to go we can hit create on that and that's now created and",
    "start": "1795059",
    "end": "1803490"
  },
  {
    "text": "essentially I can go and deploy that task on two instances running within the cluster so I go back to our cluster now",
    "start": "1803490",
    "end": "1809850"
  },
  {
    "text": "we can see we have our two container instances running now dive in we've got",
    "start": "1809850",
    "end": "1816090"
  },
  {
    "text": "no services running we can create one there no tasks are running and we can",
    "start": "1816090",
    "end": "1821580"
  },
  {
    "text": "see our two CCS instances they're running just go and start one of those",
    "start": "1821580",
    "end": "1827970"
  },
  {
    "text": "as a task so we pick our task definition the cluster where you want to run it on",
    "start": "1827970",
    "end": "1833040"
  },
  {
    "text": "and the number of tasks that we want to run we also have this task group that we",
    "start": "1833040",
    "end": "1838169"
  },
  {
    "text": "can use which will be used for our placement templates so if we have all the web servers in one task group and",
    "start": "1838169",
    "end": "1844740"
  },
  {
    "text": "we're running a balanced spread availability zone placement template on that then it's going to try and spread",
    "start": "1844740",
    "end": "1849809"
  },
  {
    "text": "all those web servers across availability zones so you can group your",
    "start": "1849809",
    "end": "1855929"
  },
  {
    "text": "you toss together so I'll just run one for now I'll leave that blank and run",
    "start": "1855929",
    "end": "1861539"
  },
  {
    "text": "the task guys were saying we would expect this to come up very quickly within seconds generally and so we can",
    "start": "1861539",
    "end": "1871049"
  },
  {
    "text": "see that that task is now running on our instance and if we go into that and have",
    "start": "1871049",
    "end": "1878340"
  },
  {
    "text": "a look at how it's running we get our external link and if we go there we should see our container is running it's",
    "start": "1878340",
    "end": "1886919"
  },
  {
    "text": "and it's version 1 so we'll go back and run another one and I'll show you what",
    "start": "1886919",
    "end": "1893460"
  },
  {
    "text": "we mean by by those port limitations I'll run a new task remember we're running two instances at",
    "start": "1893460",
    "end": "1899159"
  },
  {
    "text": "the moment so that second task I run",
    "start": "1899159",
    "end": "1904129"
  },
  {
    "text": "will launch on the other instance that we have so now each instances both got a",
    "start": "1904460",
    "end": "1913889"
  },
  {
    "text": "task bound to port 80 so that's the other instance so both separate instance",
    "start": "1913889",
    "end": "1919019"
  },
  {
    "text": "both with port 80 and remember they're just ec2 instances running in Alfie this",
    "start": "1919019",
    "end": "1924149"
  },
  {
    "text": "thing so if I were to go and run a task again we don't have an instance available that we can put port 80 on so",
    "start": "1924149",
    "end": "1931519"
  },
  {
    "text": "it's going to throw an error because we're out of ports so now we have to go back and change use that to be dynamic",
    "start": "1931519",
    "end": "1939659"
  },
  {
    "text": "ports and I'll show you what we mean by that so let's just stop those tasks for",
    "start": "1939659",
    "end": "1945149"
  },
  {
    "text": "now we'll go back to our task definition",
    "start": "1945149",
    "end": "1950389"
  },
  {
    "text": "create a new revision of our tasks and again we can change anything here but",
    "start": "1951499",
    "end": "1960299"
  },
  {
    "text": "what we want to do is change this dynamic port mapping and I can set that zero or leave a blank and that way it's",
    "start": "1960299",
    "end": "1966809"
  },
  {
    "text": "going to choose a dynamic port to map to so update that and create it now",
    "start": "1966809",
    "end": "1976150"
  },
  {
    "text": "go back to our cluster and I can launch more than two tasks because they're",
    "start": "1976150",
    "end": "1981430"
  },
  {
    "text": "going to get dynamic ports so run tasks let's run ten this time and we should",
    "start": "1981430",
    "end": "1988900"
  },
  {
    "text": "see we'll go and pick the right time us definition this time so I can go run new",
    "start": "1988900",
    "end": "1995830"
  },
  {
    "text": "tasks we pick our new task definition and let's run ten this time one task and",
    "start": "1995830",
    "end": "2004590"
  },
  {
    "text": "we have ten tasks running across our two instances and you can see again they",
    "start": "2004590",
    "end": "2010170"
  },
  {
    "text": "come up very fast but this time if we dive in we'll see that they're bound to different ports so this is where we can",
    "start": "2010170",
    "end": "2021690"
  },
  {
    "text": "now and don't create a service and the service is going to maintain in that",
    "start": "2021690",
    "end": "2028500"
  },
  {
    "text": "desired count of tasks running for us because if I were to stop half of them let's stop a few of these now they're",
    "start": "2028500",
    "end": "2043320"
  },
  {
    "text": "just going to remain stopped there's no attempt to bring those back so I'll stop all of them and they'll go and create a",
    "start": "2043320",
    "end": "2051419"
  },
  {
    "text": "service so pick our task definition become the new one that created victor",
    "start": "2051419",
    "end": "2058379"
  },
  {
    "text": "cluster where we're going to deploy these task definitions I'll give our service a name and the",
    "start": "2058380",
    "end": "2067830"
  },
  {
    "text": "number of tasks that we want this service to attempt to maintain we have a",
    "start": "2067830",
    "end": "2073020"
  },
  {
    "text": "minimum healthy percentage and a maximum healthy percentage and what this is for is for deployment so we're saying let's",
    "start": "2073020",
    "end": "2079350"
  },
  {
    "text": "maintain a minimum healthy percentage so if we do a deployment things aren't working it'll always try and attempt to",
    "start": "2079350",
    "end": "2085620"
  },
  {
    "text": "maintain 50 percent of our desired number of tasks so five in this case and",
    "start": "2085620",
    "end": "2091169"
  },
  {
    "text": "the maximum percentage is two hundred so we can deploy up to 20 tasks during a deployment to to complete that I won't",
    "start": "2091169",
    "end": "2099810"
  },
  {
    "text": "put any I'll be on it for now now but a game will pick the azt balance bread and create that service so now if I have a",
    "start": "2099810",
    "end": "2109050"
  },
  {
    "text": "look at this service we can see we have our",
    "start": "2109050",
    "end": "2117030"
  },
  {
    "text": "10 tasks running and if I were to go and stop those or any one of those so let's",
    "start": "2117030",
    "end": "2128130"
  },
  {
    "text": "stop a few it this time again stop those ones so now they're not",
    "start": "2128130",
    "end": "2135690"
  },
  {
    "text": "running so because we've set that up as a service we would expect the service to attempt to get back to that desired",
    "start": "2135690",
    "end": "2141540"
  },
  {
    "text": "count of 10 and hopefully that'll happen fairly quickly any minute now and there",
    "start": "2141540",
    "end": "2156150"
  },
  {
    "text": "we go so it's it's gone back to 10 of those tasks it's running and they should",
    "start": "2156150",
    "end": "2162390"
  },
  {
    "text": "start within seconds again so that's good so if ever look at the tasks we've",
    "start": "2162390",
    "end": "2168510"
  },
  {
    "text": "had a look at services and the difference between those now let's go",
    "start": "2168510",
    "end": "2173610"
  },
  {
    "text": "and add a load balancer in front of that for those timing ports and I'll try and show you what we mean by that Oh with",
    "start": "2173610",
    "end": "2180720"
  },
  {
    "text": "this slide so we have Internet requests",
    "start": "2180720",
    "end": "2188880"
  },
  {
    "text": "coming over HTTP port 80 and then we're going to hit a load balancer and that load balancer is going to distribute",
    "start": "2188880",
    "end": "2195960"
  },
  {
    "text": "those requests to the dynamic port it's that will be running on each of the",
    "start": "2195960",
    "end": "2201390"
  },
  {
    "text": "containers and again that's important because we can't have everything down to",
    "start": "2201390",
    "end": "2207750"
  },
  {
    "text": "port 80 within one instance so let's go back to the console on that will stop",
    "start": "2207750",
    "end": "2215190"
  },
  {
    "text": "this service now won't let us just stop the service while tasks are running so",
    "start": "2215190",
    "end": "2222180"
  },
  {
    "text": "we need to set that aside can and to be zero before it allows us to do that I'll",
    "start": "2222180",
    "end": "2229470"
  },
  {
    "text": "update the service and now it will allow",
    "start": "2229470",
    "end": "2235140"
  },
  {
    "text": "us to delete it so we can delete that service so let's create a new service and this",
    "start": "2235140",
    "end": "2240380"
  },
  {
    "text": "time we're going to add it to a load belt on sir how close these other two",
    "start": "2240380",
    "end": "2245780"
  },
  {
    "text": "direct ones off we pick out task definition again the one with the dynamic ports is what we're going to",
    "start": "2245780",
    "end": "2251440"
  },
  {
    "text": "pick service with a load balancer number",
    "start": "2251440",
    "end": "2258710"
  },
  {
    "text": "of tasks now we'll just do 10 tasks again a balance spread but this time",
    "start": "2258710",
    "end": "2263750"
  },
  {
    "text": "we're going to configure a load balancer to put it behind I already had one set",
    "start": "2263750",
    "end": "2268760"
  },
  {
    "text": "up because it's already provisioned and ready to go so let's add our containers",
    "start": "2268760",
    "end": "2276470"
  },
  {
    "text": "to the load balancer to create a listener port so we want our load balancer to listen on port 80 with HTTP",
    "start": "2276470",
    "end": "2282700"
  },
  {
    "text": "target group so all our tasks that are running are going to be grouped into a target group which the load balancer is",
    "start": "2282700",
    "end": "2288920"
  },
  {
    "text": "going to point to now we have a path pattern we're just kind of pointing it at the root path and a health check",
    "start": "2288920",
    "end": "2295340"
  },
  {
    "text": "pattern because our load balancer is going to check for a 200 response code to make sure it's running okay before",
    "start": "2295340",
    "end": "2302660"
  },
  {
    "text": "it's going to send any traffic to that so now let's create the service again so",
    "start": "2302660",
    "end": "2308960"
  },
  {
    "text": "we do exactly the same as before but this time we've got a load balancer in front distributing traffic across the",
    "start": "2308960",
    "end": "2314930"
  },
  {
    "text": "dynamic ports to the containers so",
    "start": "2314930",
    "end": "2322040"
  },
  {
    "text": "that's completed and I did have it in I've got a shortcut here for it it",
    "start": "2322040",
    "end": "2329180"
  },
  {
    "text": "probably won't be available yet because we need to find some healthy insert it",
    "start": "2329180",
    "end": "2334790"
  },
  {
    "text": "needs the healthy instances first so it's got to pass to health checks before they're going to become available so",
    "start": "2334790",
    "end": "2340940"
  },
  {
    "text": "we'll just wait for that to occur if we don't have a look at the load balancer",
    "start": "2340940",
    "end": "2346040"
  },
  {
    "text": "again we can go over to ec2 while we're",
    "start": "2346040",
    "end": "2353390"
  },
  {
    "text": "here we can see the two running instances so this is all that containers are running on we can go and have all",
    "start": "2353390",
    "end": "2362060"
  },
  {
    "text": "hello dancer listener listening on port",
    "start": "2362060",
    "end": "2368000"
  },
  {
    "text": "80 going to our easiest group in here we can see the",
    "start": "2368000",
    "end": "2378200"
  },
  {
    "text": "targets which are those running containers and we can see now that they're all healthy and running and we can see they're also mapping to the",
    "start": "2378200",
    "end": "2385910"
  },
  {
    "text": "dynamic ports running within ECS so no",
    "start": "2385910",
    "end": "2391850"
  },
  {
    "text": "do freshmen we can now see that we have a load balancer distributing incoming",
    "start": "2391850",
    "end": "2397940"
  },
  {
    "text": "requests out of multiple containers so let's go back to ECS and let's push out",
    "start": "2397940",
    "end": "2407990"
  },
  {
    "text": "a deployment across this so we're going to go and change our code and do a",
    "start": "2407990",
    "end": "2413030"
  },
  {
    "text": "deployment into acs onto our cluster while it's all still running so the way",
    "start": "2413030",
    "end": "2420980"
  },
  {
    "text": "we do that is we need to if we update our task definition here it will trigger",
    "start": "2420980",
    "end": "2427580"
  },
  {
    "text": "a deployment which we should see in here so we'll go back to repository and get",
    "start": "2427580",
    "end": "2434660"
  },
  {
    "text": "those commands again back to our",
    "start": "2434660",
    "end": "2440660"
  },
  {
    "text": "terminal and what we're going to do",
    "start": "2440660",
    "end": "2447490"
  },
  {
    "text": "terminal we're gonna update our HTML file and change this to version 2",
    "start": "2447490",
    "end": "2455720"
  },
  {
    "text": "version 2 you see they see us with no",
    "start": "2455720",
    "end": "2460940"
  },
  {
    "text": "demo to like so that all right so",
    "start": "2460940",
    "end": "2468200"
  },
  {
    "text": "exactly the same all we've done is change our index.html to be version 2 and now we're going to build that and push it into our cluster so we don't",
    "start": "2468200",
    "end": "2478310"
  },
  {
    "text": "have to we shouldn't get the login again so we'll do a docker build",
    "start": "2478310",
    "end": "2484839"
  },
  {
    "text": "so again very fast now we're going to",
    "start": "2489200",
    "end": "2494400"
  },
  {
    "text": "take it again there's our latest image",
    "start": "2494400",
    "end": "2498230"
  },
  {
    "text": "and push that up to our repository and",
    "start": "2499850",
    "end": "2507210"
  },
  {
    "text": "we might wait for it to finish this time to make sure it's completed so that's",
    "start": "2507210",
    "end": "2516480"
  },
  {
    "text": "done we should have a newer image yeah that's been tagged as the latest image",
    "start": "2516480",
    "end": "2522810"
  },
  {
    "text": "and so now if we go and create another task definition revision of our existing",
    "start": "2522810",
    "end": "2529470"
  },
  {
    "text": "one we we don't have to change anything because all we're really doing is",
    "start": "2529470",
    "end": "2535440"
  },
  {
    "text": "getting it to push the deployment again so I'll create that task definition and so now we have a number three and if I",
    "start": "2535440",
    "end": "2541800"
  },
  {
    "text": "go back to my cluster into our service and then if we change our task",
    "start": "2541800",
    "end": "2550950"
  },
  {
    "text": "definition it should trigger a deployment of the container that we've just uploaded so let's change that to",
    "start": "2550950",
    "end": "2558810"
  },
  {
    "text": "webinar task 3 update service and so now",
    "start": "2558810",
    "end": "2565620"
  },
  {
    "text": "we can see that it has triggered a deployment we've got what's given what's",
    "start": "2565620",
    "end": "2571740"
  },
  {
    "text": "primary so active at the moment is the one that we are going to drain the connections from and move over to the",
    "start": "2571740",
    "end": "2577860"
  },
  {
    "text": "primary it should start having it fairly quick but as I said we do have to drain",
    "start": "2577860",
    "end": "2584490"
  },
  {
    "text": "the connections from the load balancer onto the new containers for that to",
    "start": "2584490",
    "end": "2592260"
  },
  {
    "text": "occur",
    "start": "2592260",
    "end": "2594920"
  },
  {
    "text": "and then when it's completed we should see this change to version two so I'll just go back to this right and check",
    "start": "2601050",
    "end": "2609550"
  },
  {
    "text": "that again we can see now that we're running like we said we could scale up",
    "start": "2609550",
    "end": "2616569"
  },
  {
    "text": "to 200% so now we're running twice as many services while we're draining connections from one to the other across",
    "start": "2616569",
    "end": "2623650"
  },
  {
    "text": "the load balancer and we should see this change to version two very short just",
    "start": "2623650",
    "end": "2632619"
  },
  {
    "text": "refresh it one more time have a look at our deployment to see how it's going so",
    "start": "2632619",
    "end": "2638680"
  },
  {
    "text": "we now have the the 10 running but we also still have the 10 active running",
    "start": "2638680",
    "end": "2645270"
  },
  {
    "text": "and we can see version 2 has now hit production for me but it could have",
    "start": "2645809",
    "end": "2650920"
  },
  {
    "text": "happened to other people as well because the load balancer is distributing those connections into ECS so that's it so",
    "start": "2650920",
    "end": "2662020"
  },
  {
    "text": "hopefully that's been enough information for you to dive in and take a look we'll",
    "start": "2662020",
    "end": "2667359"
  },
  {
    "text": "just go through have a look at there what we're doing again so we had a look",
    "start": "2667359",
    "end": "2675160"
  },
  {
    "text": "at docker hub looked at the docker files and and built an engine X service and",
    "start": "2675160",
    "end": "2680549"
  },
  {
    "text": "updated the HTML we do the deployment as well with that went to ECR we created",
    "start": "2680549",
    "end": "2686500"
  },
  {
    "text": "our repository pushed an image to that repository then we use DCs we created a",
    "start": "2686500",
    "end": "2692020"
  },
  {
    "text": "cluster created our task definition launched a task created a couple of",
    "start": "2692020",
    "end": "2697900"
  },
  {
    "text": "services one with and without a load balancer we stopped some tasks to check",
    "start": "2697900",
    "end": "2703599"
  },
  {
    "text": "the raziel resilience team and that worked as expected so hope there's",
    "start": "2703599",
    "end": "2710079"
  },
  {
    "text": "enough to to get things started for you on your ECS journey I'll see if we have",
    "start": "2710079",
    "end": "2716530"
  },
  {
    "text": "any questions that have been asked throughout the session that we may be able to answer in these last few minutes",
    "start": "2716530",
    "end": "2725130"
  },
  {
    "text": "you",
    "start": "2728820",
    "end": "2730880"
  }
]