[
  {
    "text": "hello everyone today I'm excited to",
    "start": "120",
    "end": "2820"
  },
  {
    "text": "introduce AWS payment cryptography a new",
    "start": "2820",
    "end": "5759"
  },
  {
    "text": "service that simplifies your",
    "start": "5759",
    "end": "7020"
  },
  {
    "text": "implementation of cryptographic",
    "start": "7020",
    "end": "8340"
  },
  {
    "text": "operations used to secure data in",
    "start": "8340",
    "end": "10559"
  },
  {
    "text": "payment processing applications in",
    "start": "10559",
    "end": "12420"
  },
  {
    "text": "accordance with various PCI standards",
    "start": "12420",
    "end": "14340"
  },
  {
    "text": "and Financial Security regulations",
    "start": "14340",
    "end": "16859"
  },
  {
    "text": "financial service providers and",
    "start": "16859",
    "end": "18720"
  },
  {
    "text": "processors can replace their on-premise",
    "start": "18720",
    "end": "20580"
  },
  {
    "text": "payment Hardware security modules or",
    "start": "20580",
    "end": "22320"
  },
  {
    "text": "hsms with this elastic service and move",
    "start": "22320",
    "end": "24720"
  },
  {
    "text": "their payment specific cryptography and",
    "start": "24720",
    "end": "26519"
  },
  {
    "text": "Key Management functions to the cloud",
    "start": "26519",
    "end": "29460"
  },
  {
    "text": "AWS payment cryptography also",
    "start": "29460",
    "end": "31679"
  },
  {
    "text": "streamlines payment Key Management by",
    "start": "31679",
    "end": "33300"
  },
  {
    "text": "generating Keys importing and exporting",
    "start": "33300",
    "end": "35640"
  },
  {
    "text": "Keys via electronic means and automating",
    "start": "35640",
    "end": "37980"
  },
  {
    "text": "Key Management",
    "start": "37980",
    "end": "39360"
  },
  {
    "text": "AWS payment cryptography helps meet your",
    "start": "39360",
    "end": "41579"
  },
  {
    "text": "compliance needs by managing the",
    "start": "41579",
    "end": "43140"
  },
  {
    "text": "underlying physical HSM infrastructure",
    "start": "43140",
    "end": "44879"
  },
  {
    "text": "and key management requirements as well",
    "start": "44879",
    "end": "47040"
  },
  {
    "text": "as integrating with AWS services for",
    "start": "47040",
    "end": "48899"
  },
  {
    "text": "authorization using AWS identity and",
    "start": "48899",
    "end": "51360"
  },
  {
    "text": "access management and auditing using AWS",
    "start": "51360",
    "end": "53640"
  },
  {
    "text": "cloudtrail",
    "start": "53640",
    "end": "55500"
  },
  {
    "text": "use AWS payment cryptography to remove",
    "start": "55500",
    "end": "57840"
  },
  {
    "text": "dependencies on physical payment hsms in",
    "start": "57840",
    "end": "60360"
  },
  {
    "text": "your data center enabling migration of",
    "start": "60360",
    "end": "62280"
  },
  {
    "text": "payment workloads into AWS",
    "start": "62280",
    "end": "65220"
  },
  {
    "text": "reduce your operational overhead by",
    "start": "65220",
    "end": "67020"
  },
  {
    "text": "using an elastic service for a low",
    "start": "67020",
    "end": "68700"
  },
  {
    "text": "latency cryptographic payment operations",
    "start": "68700",
    "end": "70500"
  },
  {
    "text": "and since AWS payment cryptography is a",
    "start": "70500",
    "end": "73200"
  },
  {
    "text": "fully managed service you don't have to",
    "start": "73200",
    "end": "74760"
  },
  {
    "text": "provision any hardware",
    "start": "74760",
    "end": "76979"
  },
  {
    "text": "before we jump into the demo I'd like to",
    "start": "76979",
    "end": "79439"
  },
  {
    "text": "Define some terminology",
    "start": "79439",
    "end": "82280"
  },
  {
    "text": "point-to-point encryption or p2pe",
    "start": "82380",
    "end": "84979"
  },
  {
    "text": "secures data throughout the payment",
    "start": "84979",
    "end": "86700"
  },
  {
    "text": "workflow",
    "start": "86700",
    "end": "88140"
  },
  {
    "text": "derive unique key Pro transaction or",
    "start": "88140",
    "end": "90780"
  },
  {
    "text": "duck put encrypts each transaction with",
    "start": "90780",
    "end": "93299"
  },
  {
    "text": "a unique key that is derived from a base",
    "start": "93299",
    "end": "95520"
  },
  {
    "text": "key",
    "start": "95520",
    "end": "97758"
  },
  {
    "text": "asymmetric key management and a payments",
    "start": "98100",
    "end": "100380"
  },
  {
    "text": "context is used to share partial keys to",
    "start": "100380",
    "end": "102900"
  },
  {
    "text": "identify the relevant parties and",
    "start": "102900",
    "end": "104640"
  },
  {
    "text": "encrypt data",
    "start": "104640",
    "end": "106799"
  },
  {
    "text": "lastly because each transaction is",
    "start": "106799",
    "end": "108960"
  },
  {
    "text": "protected by individual keys and each",
    "start": "108960",
    "end": "111180"
  },
  {
    "text": "transaction needs to be encrypted or",
    "start": "111180",
    "end": "112920"
  },
  {
    "text": "decrypted within the HSM these devices",
    "start": "112920",
    "end": "115500"
  },
  {
    "text": "must enable very high throughput and low",
    "start": "115500",
    "end": "117659"
  },
  {
    "text": "latency cryptographic operations",
    "start": "117659",
    "end": "120659"
  },
  {
    "text": "now let's look at an example of the",
    "start": "120659",
    "end": "122280"
  },
  {
    "text": "various parties that are involved in a",
    "start": "122280",
    "end": "123780"
  },
  {
    "text": "typical card transaction",
    "start": "123780",
    "end": "125820"
  },
  {
    "text": "in this example dataflow a customer is",
    "start": "125820",
    "end": "127799"
  },
  {
    "text": "purchasing something with a credit or",
    "start": "127799",
    "end": "129360"
  },
  {
    "text": "debit card",
    "start": "129360",
    "end": "130619"
  },
  {
    "text": "the merchant at the point of sale sends",
    "start": "130619",
    "end": "132420"
  },
  {
    "text": "the card details to a payment Gateway",
    "start": "132420",
    "end": "133980"
  },
  {
    "text": "which transfers payment information to",
    "start": "133980",
    "end": "136140"
  },
  {
    "text": "the acquirer",
    "start": "136140",
    "end": "137400"
  },
  {
    "text": "then the acquirer sends the card details",
    "start": "137400",
    "end": "139440"
  },
  {
    "text": "to a card Network which requests",
    "start": "139440",
    "end": "141420"
  },
  {
    "text": "authorization from the bank that issued",
    "start": "141420",
    "end": "143220"
  },
  {
    "text": "the card then the issuer approves the",
    "start": "143220",
    "end": "145680"
  },
  {
    "text": "transaction",
    "start": "145680",
    "end": "147120"
  },
  {
    "text": "cryptographic operations do encrypt and",
    "start": "147120",
    "end": "149280"
  },
  {
    "text": "decrypt sensitive data happen at each",
    "start": "149280",
    "end": "151020"
  },
  {
    "text": "step in the process and all this happens",
    "start": "151020",
    "end": "153000"
  },
  {
    "text": "as the customer stands in the checkout",
    "start": "153000",
    "end": "154379"
  },
  {
    "text": "line so it should happen quickly to",
    "start": "154379",
    "end": "156060"
  },
  {
    "text": "ensure a great customer experience",
    "start": "156060",
    "end": "159000"
  },
  {
    "text": "at release AWS payment cryptography will",
    "start": "159000",
    "end": "161519"
  },
  {
    "text": "primarily facilitate use cases for",
    "start": "161519",
    "end": "163260"
  },
  {
    "text": "payment gateways and acquirers with",
    "start": "163260",
    "end": "165660"
  },
  {
    "text": "support for use cases like encrypting",
    "start": "165660",
    "end": "167400"
  },
  {
    "text": "and decrypting sensitive data with",
    "start": "167400",
    "end": "168780"
  },
  {
    "text": "triple Des AES and using duck put",
    "start": "168780",
    "end": "172200"
  },
  {
    "text": "you can also generate and verify message",
    "start": "172200",
    "end": "174420"
  },
  {
    "text": "authentication codes or Macs decrypt",
    "start": "174420",
    "end": "177060"
  },
  {
    "text": "data with p2be and translate pin blocks",
    "start": "177060",
    "end": "179819"
  },
  {
    "text": "using PCI pin",
    "start": "179819",
    "end": "182099"
  },
  {
    "text": "now let's take a look at how this works",
    "start": "182099",
    "end": "183780"
  },
  {
    "text": "in practice by performing a pin block",
    "start": "183780",
    "end": "185340"
  },
  {
    "text": "translation",
    "start": "185340",
    "end": "186720"
  },
  {
    "text": "this example will demonstrate pin",
    "start": "186720",
    "end": "188580"
  },
  {
    "text": "translation using AWS payment",
    "start": "188580",
    "end": "190260"
  },
  {
    "text": "cryptography I will show the full life",
    "start": "190260",
    "end": "192360"
  },
  {
    "text": "cycle including generating a pin at the",
    "start": "192360",
    "end": "194340"
  },
  {
    "text": "issuer side converting it to duck foot",
    "start": "194340",
    "end": "196379"
  },
  {
    "text": "or simulating what a terminal would do",
    "start": "196379",
    "end": "198120"
  },
  {
    "text": "and translating it to working Keys as it",
    "start": "198120",
    "end": "200580"
  },
  {
    "text": "moves between parties such as from a",
    "start": "200580",
    "end": "202500"
  },
  {
    "text": "payment gateway to an acquirer",
    "start": "202500",
    "end": "204540"
  },
  {
    "text": "finally I will validate the pin acting",
    "start": "204540",
    "end": "206760"
  },
  {
    "text": "as the issuer",
    "start": "206760",
    "end": "208440"
  },
  {
    "text": "keep in mind that many of these steps",
    "start": "208440",
    "end": "210120"
  },
  {
    "text": "would be performed by different parties",
    "start": "210120",
    "end": "211560"
  },
  {
    "text": "in a real life scenario but I will be",
    "start": "211560",
    "end": "213540"
  },
  {
    "text": "playing the part of multiple personas in",
    "start": "213540",
    "end": "215580"
  },
  {
    "text": "this demo",
    "start": "215580",
    "end": "216780"
  },
  {
    "text": "in this demo we'll be using the AWS CLI",
    "start": "216780",
    "end": "221400"
  },
  {
    "text": "this command generates a key that will",
    "start": "221400",
    "end": "223379"
  },
  {
    "text": "be used to generate a random PIN as well",
    "start": "223379",
    "end": "225360"
  },
  {
    "text": "as to generate the pvv",
    "start": "225360",
    "end": "228739"
  },
  {
    "text": "now I'll create an alias to",
    "start": "229019",
    "end": "230700"
  },
  {
    "text": "differentiate this key from the others I",
    "start": "230700",
    "end": "232560"
  },
  {
    "text": "will create in the demo",
    "start": "232560",
    "end": "235580"
  },
  {
    "text": "this command generates a key that will",
    "start": "236040",
    "end": "237780"
  },
  {
    "text": "be used to encrypt pins since pins",
    "start": "237780",
    "end": "239700"
  },
  {
    "text": "cannot be handled in the clear per PCI",
    "start": "239700",
    "end": "241920"
  },
  {
    "text": "pin standards",
    "start": "241920",
    "end": "244819"
  },
  {
    "text": "I'll create an alias for this key as",
    "start": "245940",
    "end": "247799"
  },
  {
    "text": "well",
    "start": "247799",
    "end": "249780"
  },
  {
    "text": "now I will create a base derivation key",
    "start": "249780",
    "end": "252299"
  },
  {
    "text": "or BDK bdks are used to derive further",
    "start": "252299",
    "end": "255599"
  },
  {
    "text": "Keys such as the per transaction keys in",
    "start": "255599",
    "end": "257820"
  },
  {
    "text": "the duck put algorithm",
    "start": "257820",
    "end": "260820"
  },
  {
    "text": "now I'll create an alias to easily",
    "start": "260820",
    "end": "262860"
  },
  {
    "text": "differentiate this key from the others",
    "start": "262860",
    "end": "266599"
  },
  {
    "text": "typically an issuer would receive the",
    "start": "266820",
    "end": "268620"
  },
  {
    "text": "pin encrypted using an issue or working",
    "start": "268620",
    "end": "270419"
  },
  {
    "text": "key or iwk we will create this key now",
    "start": "270419",
    "end": "275400"
  },
  {
    "text": "now I'll create an alias for this key as",
    "start": "275400",
    "end": "277680"
  },
  {
    "text": "well to identify it",
    "start": "277680",
    "end": "280820"
  },
  {
    "text": "usually an acquirer would receive the",
    "start": "280919",
    "end": "282900"
  },
  {
    "text": "pan encrypted using duck put and then",
    "start": "282900",
    "end": "284880"
  },
  {
    "text": "translate it to an awk or acquire a",
    "start": "284880",
    "end": "287400"
  },
  {
    "text": "working key for transportation to the",
    "start": "287400",
    "end": "289500"
  },
  {
    "text": "network",
    "start": "289500",
    "end": "290460"
  },
  {
    "text": "this step would be the same from payment",
    "start": "290460",
    "end": "292320"
  },
  {
    "text": "gateway to acquirer as well",
    "start": "292320",
    "end": "295860"
  },
  {
    "text": "so let's create this acquirer working",
    "start": "295860",
    "end": "297780"
  },
  {
    "text": "key",
    "start": "297780",
    "end": "300139"
  },
  {
    "text": "now I'll create an alias to easily",
    "start": "300780",
    "end": "302699"
  },
  {
    "text": "differentiate this key from the others",
    "start": "302699",
    "end": "305520"
  },
  {
    "text": "as you can see I've created a number of",
    "start": "305520",
    "end": "307500"
  },
  {
    "text": "keys to be used in our demo all",
    "start": "307500",
    "end": "309300"
  },
  {
    "text": "associated with one of the parties in",
    "start": "309300",
    "end": "310919"
  },
  {
    "text": "the payment workflow I explained earlier",
    "start": "310919",
    "end": "312600"
  },
  {
    "text": "in the video",
    "start": "312600",
    "end": "313800"
  },
  {
    "text": "next I will generate a pin and perform a",
    "start": "313800",
    "end": "316080"
  },
  {
    "text": "pin translation by encrypting and",
    "start": "316080",
    "end": "317699"
  },
  {
    "text": "decrypting the pin with the appropriate",
    "start": "317699",
    "end": "319199"
  },
  {
    "text": "Keys as it moves from Merchant to",
    "start": "319199",
    "end": "320940"
  },
  {
    "text": "payment processor then to acquire and so",
    "start": "320940",
    "end": "323400"
  },
  {
    "text": "on",
    "start": "323400",
    "end": "325080"
  },
  {
    "text": "this command generates a random PIN and",
    "start": "325080",
    "end": "327360"
  },
  {
    "text": "returns back a pvv value it also returns",
    "start": "327360",
    "end": "330720"
  },
  {
    "text": "back the encrypted pin",
    "start": "330720",
    "end": "332460"
  },
  {
    "text": "pins are always stored in pin blocks",
    "start": "332460",
    "end": "336479"
  },
  {
    "text": "in a likely real life scenario a pin",
    "start": "336479",
    "end": "338699"
  },
  {
    "text": "would be entered on a terminal or a",
    "start": "338699",
    "end": "340380"
  },
  {
    "text": "terminal like device and then",
    "start": "340380",
    "end": "341880"
  },
  {
    "text": "immediately encrypted with duck put",
    "start": "341880",
    "end": "344160"
  },
  {
    "text": "since we don't have a terminal here we",
    "start": "344160",
    "end": "345900"
  },
  {
    "text": "will convert the pin that we created",
    "start": "345900",
    "end": "347340"
  },
  {
    "text": "earlier into a duck put encrypted pin",
    "start": "347340",
    "end": "350520"
  },
  {
    "text": "this represents what the terminal would",
    "start": "350520",
    "end": "352199"
  },
  {
    "text": "typically send to the payment Gateway or",
    "start": "352199",
    "end": "353880"
  },
  {
    "text": "acquire",
    "start": "353880",
    "end": "355139"
  },
  {
    "text": "so our inputs here are the encrypted pin",
    "start": "355139",
    "end": "357120"
  },
  {
    "text": "from the previous step",
    "start": "357120",
    "end": "358620"
  },
  {
    "text": "the key that it was encrypted with and",
    "start": "358620",
    "end": "360600"
  },
  {
    "text": "then we are specifying to convert it to",
    "start": "360600",
    "end": "362220"
  },
  {
    "text": "duck put",
    "start": "362220",
    "end": "364500"
  },
  {
    "text": "now we need to convert from Duck put to",
    "start": "364500",
    "end": "366840"
  },
  {
    "text": "pin encryption key encrypted this is a",
    "start": "366840",
    "end": "369300"
  },
  {
    "text": "step that typically a payment Gateway or",
    "start": "369300",
    "end": "370979"
  },
  {
    "text": "acquirer would do before passing on to a",
    "start": "370979",
    "end": "373020"
  },
  {
    "text": "network",
    "start": "373020",
    "end": "374580"
  },
  {
    "text": "now I will convert from the acquire",
    "start": "374580",
    "end": "376320"
  },
  {
    "text": "working key to the issuer working key",
    "start": "376320",
    "end": "378419"
  },
  {
    "text": "this would typically be a step performed",
    "start": "378419",
    "end": "380340"
  },
  {
    "text": "by a network converting to the issuer",
    "start": "380340",
    "end": "382199"
  },
  {
    "text": "key prior to sending it to the issuer or",
    "start": "382199",
    "end": "384360"
  },
  {
    "text": "issuer processor",
    "start": "384360",
    "end": "387379"
  },
  {
    "text": "lastly I'm going to validate the pin",
    "start": "387660",
    "end": "389580"
  },
  {
    "text": "against the pvv labeled here as",
    "start": "389580",
    "end": "391740"
  },
  {
    "text": "verification value that was generated",
    "start": "391740",
    "end": "393960"
  },
  {
    "text": "earlier",
    "start": "393960",
    "end": "395639"
  },
  {
    "text": "great the pin validated correctly",
    "start": "395639",
    "end": "399479"
  },
  {
    "text": "and that's it today we introduced AWS",
    "start": "399479",
    "end": "402180"
  },
  {
    "text": "payment cryptography and I showed you an",
    "start": "402180",
    "end": "403919"
  },
  {
    "text": "example workflow where we translated a",
    "start": "403919",
    "end": "405720"
  },
  {
    "text": "pin block using the AWS payment",
    "start": "405720",
    "end": "407220"
  },
  {
    "text": "cryptography CLI",
    "start": "407220",
    "end": "409199"
  },
  {
    "text": "AWS payment cryptography is available",
    "start": "409199",
    "end": "411000"
  },
  {
    "text": "today in the following AWS regions",
    "start": "411000",
    "end": "413400"
  },
  {
    "text": "USC's North Virginia and in U.S West",
    "start": "413400",
    "end": "416280"
  },
  {
    "text": "Oregon",
    "start": "416280",
    "end": "417840"
  },
  {
    "text": "for detailed information see the AWS",
    "start": "417840",
    "end": "419639"
  },
  {
    "text": "payment cryptography developer guide and",
    "start": "419639",
    "end": "421319"
  },
  {
    "text": "read the AWS payment cryptography",
    "start": "421319",
    "end": "422940"
  },
  {
    "text": "announcement in the AWS news blog",
    "start": "422940",
    "end": "426680"
  }
]