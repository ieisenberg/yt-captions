[
  {
    "text": "Hi, I'm Gonzalo Ron, welcome to 'Back to Basics'.",
    "start": "5579",
    "end": "8838"
  },
  {
    "text": "Today we're going to talk about how to \nmanage your web application's sessions.",
    "start": "9207",
    "end": "12688"
  },
  {
    "text": "Imagine you are buying your \nChristmas presents at Amazon.com.",
    "start": "13701",
    "end": "17034"
  },
  {
    "text": "You get one item, put it into\n your shopping cart, and then",
    "start": "17739",
    "end": "21714"
  },
  {
    "text": "continue clicking around, to get more presents.",
    "start": "21714",
    "end": "24340"
  },
  {
    "text": "With millions of users using\n Amazon.com at the same time,",
    "start": "25477",
    "end": "29220"
  },
  {
    "text": "how can the website remember those are your items?",
    "start": "29220",
    "end": "32126"
  },
  {
    "text": "This is because of web sessions.",
    "start": "32790",
    "end": "34592"
  },
  {
    "text": "Web sessions are great, as a way to have \nsome kind of short-term memory for your website.",
    "start": "34592",
    "end": "40312"
  },
  {
    "text": "Let's talk about the most common \npatterns for your web sessions.",
    "start": "40911",
    "end": "43934"
  },
  {
    "text": "This is probably the most \nbasic architecture for a website.",
    "start": "44469",
    "end": "47694"
  },
  {
    "text": "You have an EC2 Instance, serving \nyour HTTP request for your customers.",
    "start": "47694",
    "end": "52464"
  },
  {
    "text": "This instance keeps the session data, \nthat the product you added to your shopping cart",
    "start": "53209",
    "end": "57344"
  },
  {
    "text": "in its local memory.",
    "start": "57344",
    "end": "59068"
  },
  {
    "text": "So, think for a second, maybe having \none instance is not a good idea, right?",
    "start": "59068",
    "end": "63714"
  },
  {
    "text": "If this instance is going down, \nthat's going to impact your customers.",
    "start": "63714",
    "end": "66838"
  },
  {
    "text": "When you add more instances to your architecture, \nyou also need an elastic load balancer",
    "start": "67640",
    "end": "71940"
  },
  {
    "text": "to balance the load.",
    "start": "71940",
    "end": "73091"
  },
  {
    "text": "I know what you're thinking now.",
    "start": "73091",
    "end": "74799"
  },
  {
    "text": "In the Amazon.com example, if a customer \nadds a book into the shopping cart ",
    "start": "74799",
    "end": "79185"
  },
  {
    "text": "and then adds a video game, this customer could \nbe hitting different EC2 instances in each interaction.",
    "start": "79185",
    "end": "85231"
  },
  {
    "text": "So, what EC2 instance is keeping\n the session for this customer?",
    "start": "85716",
    "end": "89861"
  },
  {
    "text": "Should you replicate the sessions \nbetween all your EC2 instances?",
    "start": "90364",
    "end": "94960"
  },
  {
    "text": "Every time there is a change in the session, \nwe sync all the other EC2 instances.",
    "start": "95578",
    "end": "100854"
  },
  {
    "text": "That's an idea.",
    "start": "101421",
    "end": "102665"
  },
  {
    "text": "This would work for a small number of instances, \nbut when this number starts growing,",
    "start": "102665",
    "end": "107040"
  },
  {
    "text": "this synchronization can slow down your application.",
    "start": "107040",
    "end": "109566"
  },
  {
    "text": "A simple way to solve this problem \nis ensuring that the elastic load balancer",
    "start": "110288",
    "end": "114283"
  },
  {
    "text": "is always hitting the same EC2\n instance for a particular session.",
    "start": "114283",
    "end": "118480"
  },
  {
    "text": "This approach is called 'Sticky Sessions'.",
    "start": "118481",
    "end": "121247"
  },
  {
    "text": "In that way, the web application \nremembers what is the EC2 instance",
    "start": "121671",
    "end": "126531"
  },
  {
    "text": "that is serving a particular customer at a time.",
    "start": "126531",
    "end": "129229"
  },
  {
    "text": "The advantage of this approach is simplicity.",
    "start": "130041",
    "end": "132371"
  },
  {
    "text": "You can set up sticky sessions just going \ninto the AWS console and clicking a checkbox.",
    "start": "132949",
    "end": "138317"
  },
  {
    "text": "What are the disadvantages of this approach?",
    "start": "138831",
    "end": "141124"
  },
  {
    "text": "It's always a good practice to anticipate failure.",
    "start": "141619",
    "end": "144705"
  },
  {
    "text": "What's happening if a server is going down?",
    "start": "144705",
    "end": "147360"
  },
  {
    "text": "All the sessions living in that server are going to be lost.",
    "start": "148229",
    "end": "151680"
  },
  {
    "text": "And let's think a little bit more.",
    "start": "151680",
    "end": "153825"
  },
  {
    "text": "If you want to deploy a new version of \nyour product, how are you going to do it?",
    "start": "153826",
    "end": "158876"
  },
  {
    "text": "Blue/Green deployment, Canary deployment?",
    "start": "159486",
    "end": "162284"
  },
  {
    "text": "Remember: if the server is going down, your sessions \nare going to be lost, impacting some of your customers.",
    "start": "162284",
    "end": "168913"
  },
  {
    "text": "So you saw that having your session \ndata in your EC2 instances is super simple.",
    "start": "169515",
    "end": "174527"
  },
  {
    "text": "But it has some disadvantages.",
    "start": "174947",
    "end": "176577"
  },
  {
    "text": "Is there any way to make your services stateless,",
    "start": "177208",
    "end": "179900"
  },
  {
    "text": "so you decouple your session\n data from your EC2 instances?",
    "start": "179901",
    "end": "184526"
  },
  {
    "text": "What about having a distributed \ncache out of your EC2 instances, ",
    "start": "185322",
    "end": "189709"
  },
  {
    "text": "keeping the session data?",
    "start": "189709",
    "end": "190953"
  },
  {
    "text": "As you can see in this architecture, \nyou can leverage a in-memory key/value store,",
    "start": "191535",
    "end": "196253"
  },
  {
    "text": "such as Redis or Memcached.",
    "start": "196253",
    "end": "198688"
  },
  {
    "text": "This approach adds some \ncomplexity to the solution, ",
    "start": "199321",
    "end": "201829"
  },
  {
    "text": "but it's abstracting the sessions\n from the web service itself.",
    "start": "201829",
    "end": "205819"
  },
  {
    "text": "Key-value data stores are extremely \nfast and provide sub-millisecond latency.",
    "start": "206362",
    "end": "211024"
  },
  {
    "text": "Whenever a server wants to modify the session, \nthe server will not keep the change in its local memory.",
    "start": "211906",
    "end": "218331"
  },
  {
    "text": "It will meld the change in ElastiCache.",
    "start": "218331",
    "end": "220749"
  },
  {
    "text": "That makes your services stateless, \nwhich is considered a best practice.",
    "start": "221863",
    "end": "226002"
  },
  {
    "text": "Even better, if a server is going down, \nor you need to perform a new release of your code,",
    "start": "226861",
    "end": "232043"
  },
  {
    "text": "your customers are not going to be impacted.",
    "start": "232043",
    "end": "234508"
  },
  {
    "text": "There are some particular cases where \nyou want to use sticky sessions.",
    "start": "235736",
    "end": "239493"
  },
  {
    "text": "For example, if you have an existing application that \nis relying on your sessions being in the servers.",
    "start": "240121",
    "end": "246266"
  },
  {
    "text": "However, in most of the cases, I prefer to \nhave my web sessions in a distributed cache.",
    "start": "246990",
    "end": "252848"
  },
  {
    "text": "In that way, your application becomes more reliable, \nand your deployments become simpler.",
    "start": "253214",
    "end": "258611"
  },
  {
    "text": "Check the links below for more details.",
    "start": "259182",
    "end": "261314"
  },
  {
    "text": "Thank you for watching 'Back to Basics'.",
    "start": "261863",
    "end": "263680"
  },
  {
    "text": "See you next time.",
    "start": "263680",
    "end": "265142"
  }
]