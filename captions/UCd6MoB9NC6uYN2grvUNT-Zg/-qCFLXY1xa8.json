[
  {
    "start": "0",
    "end": "62000"
  },
  {
    "text": "good afternoon uh my name is Andy Katz I'm a senior product manager at AWS uh I'm",
    "start": "719",
    "end": "6240"
  },
  {
    "text": "here today to talk to you about a new service that we launched this morning uh that you may have heard of I'm assuming you did because you're here uh it's",
    "start": "6240",
    "end": "12960"
  },
  {
    "text": "called AWS step functions and I'm going to talk to you about today um about its use cases and uh higher level",
    "start": "12960",
    "end": "19680"
  },
  {
    "text": "introduction I don't know if some of you saw the serverless talk earlier this afternoon this is going to be at a little different level and we're going to talk about different uh different",
    "start": "19680",
    "end": "25840"
  },
  {
    "text": "usage patterns uh so the talk going to cover four topics uh one is you know what is",
    "start": "25840",
    "end": "33320"
  },
  {
    "text": "aw step functions I'm guessing a lot of you have an idea um but we'll talk about it for those who didn't catch the announcement this morning the three of",
    "start": "33320",
    "end": "39879"
  },
  {
    "text": "you um talk about how does it work how do you use it actually what does it look like in use then we'll address the",
    "start": "39879",
    "end": "46039"
  },
  {
    "text": "question why use it uh what are the kind of uh situations where it might come in handy and and what can you do with it",
    "start": "46039",
    "end": "52359"
  },
  {
    "text": "now what's available today so first question what is AWS step",
    "start": "52359",
    "end": "58879"
  },
  {
    "text": "functions it's a curious name so we'll begin with this notion of",
    "start": "58879",
    "end": "64158"
  },
  {
    "start": "62000",
    "end": "62000"
  },
  {
    "text": "um moving from monoliths to microservices to functions and and this is a journey that many of you are already underway maybe you're thinking",
    "start": "64159",
    "end": "70600"
  },
  {
    "text": "about starting today um but the idea is that applications are starting to get built on what I consider more human",
    "start": "70600",
    "end": "75880"
  },
  {
    "text": "scale uh the idea is you know the firm's like this big monolith but within the monolith there are departments there's",
    "start": "75880",
    "end": "81360"
  },
  {
    "text": "Finance there's manufacturing there's HR and whatnot um and within those departments there are people and then",
    "start": "81360",
    "end": "87119"
  },
  {
    "text": "people in their day do tasks and so sense to have software mirror that to some degree and and you can think about",
    "start": "87119",
    "end": "93560"
  },
  {
    "text": "that pattern of going from an Erp package to breaking it up into individual functions for finance for",
    "start": "93560",
    "end": "98720"
  },
  {
    "text": "inventory for manufacturing but then break it down even further and make it a series of even smaller services or even",
    "start": "98720",
    "end": "104799"
  },
  {
    "text": "functions that do something like help handle the sales team but it also makes technical sense because breaking up",
    "start": "104799",
    "end": "110360"
  },
  {
    "text": "applications this way gives you greater flexibility for change makes your application is more resilient they more durable under failure they scale more",
    "start": "110360",
    "end": "117079"
  },
  {
    "text": "easily you can move the parts and pieces independently from each other um but this introduces a",
    "start": "117079",
    "end": "122640"
  },
  {
    "text": "challenge uh and that challenge is how do you keep track of the movement of information between all these microservices and functions um it's",
    "start": "122640",
    "end": "129640"
  },
  {
    "start": "123000",
    "end": "123000"
  },
  {
    "text": "called keeping track of State what is the state of the process that is being executed by the system and so that's where step functions comes into play is",
    "start": "129640",
    "end": "135800"
  },
  {
    "text": "it's intended to make it easy to coordinate the different components of distributed applications and do it in a",
    "start": "135800",
    "end": "140920"
  },
  {
    "text": "visual manner with visual workflows I we'll tell you what that",
    "start": "140920",
    "end": "145640"
  },
  {
    "text": "means so I'll take a moment because I want to souvenir so give me a",
    "start": "147000",
    "end": "152920"
  },
  {
    "text": "second I'm going to ask everybody to say",
    "start": "152920",
    "end": "158680"
  },
  {
    "text": "cheese thank you that looks good I'm going to send them back to the",
    "start": "162239",
    "end": "168560"
  },
  {
    "text": "team now why did I take a picture well one I did want a souvenir um to remember",
    "start": "168560",
    "end": "174920"
  },
  {
    "text": "today uh so I can share that with our team but also to talk about the kinds of things we might do with this photo that",
    "start": "174920",
    "end": "180599"
  },
  {
    "text": "I just took okay suppose we were building a photo sharing site uh what might we do with the picture well one",
    "start": "180599",
    "end": "186040"
  },
  {
    "text": "thing is we'd upload it to the site and then once we get to the site we want to do things like transform it we might convert the file type so suppose my",
    "start": "186040",
    "end": "192879"
  },
  {
    "text": "photograph is a raw file it's huge and I want to make it smaller so I want to convert it to something like a JPEG or",
    "start": "192879",
    "end": "198360"
  },
  {
    "text": "PNG or I want to transform to a tiff for other other reasons so I might have a process where I say select which image",
    "start": "198360",
    "end": "205319"
  },
  {
    "text": "converter do I want to use send the file to that image converter not the others convert it and then put it in the",
    "start": "205319",
    "end": "211239"
  },
  {
    "text": "database and if I selected the wrong image type like I said make this a PDF and it says I don't know how to do that it needs a graceful way to say can't be",
    "start": "211239",
    "end": "217760"
  },
  {
    "text": "done sorry try again uh and so the workflow looks like something on on uh on the",
    "start": "217760",
    "end": "223599"
  },
  {
    "text": "left or I might take this picture and I want to do things like extract the metadata where was this picture taken um",
    "start": "223599",
    "end": "230879"
  },
  {
    "text": "what was the date maybe what was the weather what was it recorded by the camera might want to resize into a thumbnail so I have different different",
    "start": "230879",
    "end": "236840"
  },
  {
    "text": "formats and I might want to pick out the faces so I can tag them later but I don't need to do these things sequentially I could do these things in",
    "start": "236840",
    "end": "243280"
  },
  {
    "text": "parallel uh and so what I really would like to do is take that image divide it across different paths and do them all",
    "start": "243280",
    "end": "249319"
  },
  {
    "text": "in parallel and bring it back together and then put it in the database so parallel image processing so these are common patterns that uh that people want",
    "start": "249319",
    "end": "255840"
  },
  {
    "text": "to do and these things what they have in common is I might do this not just for",
    "start": "255840",
    "end": "261280"
  },
  {
    "text": "one photo but for hundreds or thousands of photos we all take lots of pictures uh especially on vacation and so when",
    "start": "261280",
    "end": "266520"
  },
  {
    "text": "you think about frequently repeated processes things like gener reports or fulfilling orders or",
    "start": "266520",
    "end": "273720"
  },
  {
    "text": "processing data or automating our infrastructure uh these are things that we do over and over again patterns and",
    "start": "273720",
    "end": "279120"
  },
  {
    "text": "small bits of work but many many times and so then the question is how do I do it so I ask are these things you ask I",
    "start": "279120",
    "end": "285320"
  },
  {
    "text": "want to do my services in a particular sequence the same way every time reliably or I want to run things in",
    "start": "285320",
    "end": "290639"
  },
  {
    "text": "parallel or do you want to pick paths based on previous results so if a then B but if B then C and choose the branch",
    "start": "290639",
    "end": "297840"
  },
  {
    "text": "you go down if there's a failure do you want to be able to retry automatically so you don't just die on the die on the",
    "start": "297840",
    "end": "303800"
  },
  {
    "text": "vine or sometimes you have code that just runs for hours and you want to know when it's done you want to make sure it gets done but you want to know when and",
    "start": "303800",
    "end": "309800"
  },
  {
    "text": "you don't want have to babysit it these are the kinds of tasks you're looking for then step functions um may meet your",
    "start": "309800",
    "end": "317120"
  },
  {
    "start": "317000",
    "end": "317000"
  },
  {
    "text": "needs so it's a new tool for your tool kit and the intent is that it's actually simple enough to use in in Li of scripts",
    "start": "317120",
    "end": "325000"
  },
  {
    "text": "so a lot of us have built a script that's designed to last for a week and ends up lasting for for year and then",
    "start": "325000",
    "end": "330360"
  },
  {
    "text": "beyond because somehow it moves from being a script to solve a problem of this week to becomes the application step function is a way to",
    "start": "330360",
    "end": "337160"
  },
  {
    "text": "actually do that in setad of scripts then that can actually grow into the application if it needs to um and it's",
    "start": "337160",
    "end": "342360"
  },
  {
    "text": "just as easy but on the other hand it's also robust enough to build an operate at scale at its core is a technology",
    "start": "342360",
    "end": "348600"
  },
  {
    "text": "that has in common with another Amazon service called Simple workflow which is durable at handling billions of workflows at scale every week and so you",
    "start": "348600",
    "end": "356039"
  },
  {
    "text": "can trust it for the simplest things to the most complex project projects um in in both in both small and",
    "start": "356039",
    "end": "364638"
  },
  {
    "start": "365000",
    "end": "365000"
  },
  {
    "text": "large so the benefits we hope you get from it are three-fold one we want to make you more productive we want to make",
    "start": "365319",
    "end": "370360"
  },
  {
    "text": "it easy to connect and coordinate these applications and we'll show how to do that so you can create apps quickly and",
    "start": "370360",
    "end": "375440"
  },
  {
    "text": "focus on what makes your app different not worrying about the plumbing underneath it we want to make your apps",
    "start": "375440",
    "end": "380599"
  },
  {
    "text": "more agile we want to make you uh able to diagnose and debug problems faster in these apps by giving you transparency",
    "start": "380599",
    "end": "385840"
  },
  {
    "text": "into what's going on in your distributed environment uh but also make your apps adaptable to change be able to change individual microservices or individual",
    "start": "385840",
    "end": "392039"
  },
  {
    "text": "functions so your app can grow and evolve over time with your business needs and finally we want these things to be resilient it um so that you can",
    "start": "392039",
    "end": "399280"
  },
  {
    "text": "handle at scale uh without having to worry about underlying managing the underlying infrastructure whether you",
    "start": "399280",
    "end": "404479"
  },
  {
    "text": "know you need to scale it or fix it or patch it whatever you don't worry about that we do um and also you want to fail",
    "start": "404479",
    "end": "410280"
  },
  {
    "text": "gracefully so when tasks don't work when things like network connections in the outside world get severed you want a way",
    "start": "410280",
    "end": "416400"
  },
  {
    "text": "to handle that gracefully recover and keep going",
    "start": "416400",
    "end": "421400"
  },
  {
    "text": "so with that premise let's talk about how does step functions actually",
    "start": "422240",
    "end": "428479"
  },
  {
    "text": "work so the application life cycle uh has three basic steps first we use State",
    "start": "428840",
    "end": "434160"
  },
  {
    "start": "429000",
    "end": "429000"
  },
  {
    "text": "machines so the metaphor is a state machine to Define how you want things to execute we Define them in Jason why",
    "start": "434160",
    "end": "441840"
  },
  {
    "text": "because Jason's you know common common common uh definition and it's declarative Jason so it's almost human",
    "start": "441840",
    "end": "448840"
  },
  {
    "text": "readable you can follow through the code but of course not everybody is a coder and sometimes you want to talk to people",
    "start": "448840",
    "end": "454759"
  },
  {
    "text": "uh in your company who doesn't read code but they are visual thinker and they understand logic so you can show them um",
    "start": "454759",
    "end": "462039"
  },
  {
    "text": "what the diagram the center the flowchart or the graph of the state machine and the graph is generated",
    "start": "462039",
    "end": "467240"
  },
  {
    "text": "automatically by step functions so you present it with the Json code it generates what you see in the",
    "start": "467240",
    "end": "472960"
  },
  {
    "text": "console that information is used not just for talking about what does a state machine look like but you can actually use that to monitor your executions so",
    "start": "472960",
    "end": "479560"
  },
  {
    "text": "we'll talk about that in more depth but the idea is that when you're running State machines and you can run many of them at a time you can look at each one",
    "start": "479560",
    "end": "485680"
  },
  {
    "text": "and ask what's happening inside the state machine we use that as visual feedback of what's going on in your execution I will'll look at each of",
    "start": "485680",
    "end": "491560"
  },
  {
    "text": "these uh a little more closely in a moment so step one Define your state",
    "start": "491560",
    "end": "497720"
  },
  {
    "text": "machine in Json and visualizing the console so what you're seeing on the left um is the Json code Almost Human",
    "start": "497720",
    "end": "503560"
  },
  {
    "text": "readable um this generates a classic hello world pattern that you see on the right so what's on the left generates on",
    "start": "503560",
    "end": "508960"
  },
  {
    "text": "the right we basically specify what state do we start in we Define the state",
    "start": "508960",
    "end": "514640"
  },
  {
    "text": "and we say where do we go next either's the last state we call the end or we say what's the next state and name it and go",
    "start": "514640",
    "end": "520680"
  },
  {
    "text": "to it and that's when we build State machines and we have um a several types",
    "start": "520680",
    "end": "526279"
  },
  {
    "text": "of states to build more complex State machines than just a hello world that does one state and calls it a",
    "start": "526279",
    "end": "533000"
  },
  {
    "text": "day now I'm going to be talking a lot about individual State machines um and single executions of these machines but",
    "start": "533000",
    "end": "538320"
  },
  {
    "text": "what I want to clarify ify is that the power of Step functions is you define a state machine once declared as a type",
    "start": "538320",
    "end": "544279"
  },
  {
    "text": "and then you can run thousands and thousands of concurrent executions uh so this allows you to break big tasks down",
    "start": "544279",
    "end": "549399"
  },
  {
    "text": "into a series of smaller tasks and just launch a flight of them uh to break down problems",
    "start": "549399",
    "end": "555720"
  },
  {
    "text": "quickly so an individual execution being monitored from the console looks something like this and this console",
    "start": "556959",
    "end": "562279"
  },
  {
    "start": "557000",
    "end": "557000"
  },
  {
    "text": "provides all kinds of information what I want to say is anything you see in the console with the exception of the graph",
    "start": "562279",
    "end": "568560"
  },
  {
    "text": "is ible from the API so I'm showing you things in a visual console but you can rest assure that in a programmatic environment you can call things and I'll",
    "start": "568560",
    "end": "574880"
  },
  {
    "text": "talk about that a little bit as well so let's look the elements of this console so first if you look uh in the in the",
    "start": "574880",
    "end": "581839"
  },
  {
    "text": "upper left you see the graph you see a tab graph and code so you can toggle back and forth between that graph and",
    "start": "581839",
    "end": "588200"
  },
  {
    "text": "the Json code that you wrote to Define that graph so you can look and say what is that state doing in more detail um during execution it's",
    "start": "588200",
    "end": "595600"
  },
  {
    "text": "colorcoded so States turn blue when they work in progress they turn turn green when they're successful they turn red",
    "start": "595600",
    "end": "600720"
  },
  {
    "text": "when they fail if there's a retry they'll turn yellow so you can actually visually see what path your execution is",
    "start": "600720",
    "end": "606200"
  },
  {
    "text": "taking and took during during an execution um in the Box on the upper",
    "start": "606200",
    "end": "612079"
  },
  {
    "text": "right you see execution details you get a general overview of the state machine you get its name they get assigned an",
    "start": "612079",
    "end": "617320"
  },
  {
    "text": "Arn uh an Amazon Resource number is an identifier each execution also gets assigned an Arn this Amazon Resource",
    "start": "617320",
    "end": "622880"
  },
  {
    "text": "number so you can identify them by by type and by instance um when they started when they closed or execution",
    "start": "622880",
    "end": "628839"
  },
  {
    "text": "and that's important because executions can persist up to a year per per state machine there's two other tabs input and",
    "start": "628839",
    "end": "635480"
  },
  {
    "text": "output so you give input to your state machine again in the form of adjacent document uh key value pairs they can be",
    "start": "635480",
    "end": "641040"
  },
  {
    "text": "nested uh so the full adjacent syntax goes in that information is passed to each state in your state machine and",
    "start": "641040",
    "end": "646320"
  },
  {
    "text": "used to process and it passes back a result that either modifies the key value pairs or adds key value pairs to",
    "start": "646320",
    "end": "651680"
  },
  {
    "text": "the Json document and at the end of the execution that becomes your output and you can look at that in the tab as",
    "start": "651680",
    "end": "656920"
  },
  {
    "text": "well that's the input and the output of the the whole state machine if you look at the tab below that says step details",
    "start": "656920",
    "end": "662120"
  },
  {
    "text": "you can also step through individual states and in the same way see the input that went to that state and the output",
    "start": "662120",
    "end": "667279"
  },
  {
    "text": "that came out from that stage so if you have an unexpected Behavior you have a way of tracing through and saying where did something change that I didn't",
    "start": "667279",
    "end": "673720"
  },
  {
    "text": "expect and debug faster finally the bottom what you see",
    "start": "673720",
    "end": "678959"
  },
  {
    "text": "uh is a complete history of the execution step by step um with",
    "start": "678959",
    "end": "684079"
  },
  {
    "text": "timestamps so you've got a full history this is useful for debugging in detail it's also useful for keeping logs when",
    "start": "684079",
    "end": "689200"
  },
  {
    "text": "you're in a compliance situation uh and you need to keep records for say a regulated environment and again all these things can be um gathered through",
    "start": "689200",
    "end": "695959"
  },
  {
    "text": "the through the API as well you can also monitor your execution",
    "start": "695959",
    "end": "702160"
  },
  {
    "start": "700000",
    "end": "700000"
  },
  {
    "text": "through Amazon cloudwatch so we emit information to cloudwatch you can make graphs this is an example of a different state machine uh the blue graph is the",
    "start": "702160",
    "end": "710000"
  },
  {
    "text": "actual Lambda functions getting getting launched they're about 70 per minute getting getting set out and then uh each",
    "start": "710000",
    "end": "715839"
  },
  {
    "text": "Lambda function is executing in about 2 to 300 milliseconds so you can monitor your executions um in this",
    "start": "715839",
    "end": "721680"
  },
  {
    "text": "way similarly you can also send information to cloud",
    "start": "721680",
    "end": "726360"
  },
  {
    "start": "730000",
    "end": "730000"
  },
  {
    "text": "trail Now itep function supports seven State types today task Choice parallel",
    "start": "730360",
    "end": "739279"
  },
  {
    "text": "wait fail succeed and pass tasks do your work they're the",
    "start": "739279",
    "end": "746199"
  },
  {
    "text": "Workhorse they call on your application components your microservices um and there are two kinds of task States today we'll talk about one is",
    "start": "746199",
    "end": "752000"
  },
  {
    "text": "push one is pull um and they and they um they work both with AWS resources and",
    "start": "752000",
    "end": "757519"
  },
  {
    "text": "your own Computer Resources Choice states allow you to add branching logic parallel states are how you for conjoin",
    "start": "757519",
    "end": "764040"
  },
  {
    "text": "information across different paths weight States let you put in timers uh fail and success end executions with",
    "start": "764040",
    "end": "770920"
  },
  {
    "text": "information so if they fail you can have richer information about what went wrong in the execution and Past St is really a",
    "start": "770920",
    "end": "776120"
  },
  {
    "text": "development tool it passes input to the output so it's used as often as a placeholder before you hook in your resources in your state machine so it's",
    "start": "776120",
    "end": "782680"
  },
  {
    "text": "an easy way to build something quickly mock it out and see it looks the way you want it to look so we'll look at each of these in a",
    "start": "782680",
    "end": "788399"
  },
  {
    "text": "little more detail so task States again are your are your Workhorse and they pull or they",
    "start": "788399",
    "end": "794880"
  },
  {
    "start": "790000",
    "end": "790000"
  },
  {
    "text": "push so if you push push synchronously calls a Lambda function passes the you",
    "start": "794880",
    "end": "800839"
  },
  {
    "text": "know the input that the state has to that Lambda function it processes the work it Returns the result back and the",
    "start": "800839",
    "end": "805959"
  },
  {
    "text": "Lambda function goes away and the state machine then passes that output to the next state as its input okay so that's",
    "start": "805959",
    "end": "811480"
  },
  {
    "text": "the simplest pattern and that's when we talk about serverless applications Lambda is kind of the Workhorse but one",
    "start": "811480",
    "end": "817000"
  },
  {
    "text": "thing I want to be clear is serverless application development step functions is one way to use step functions but there are others the other is anything",
    "start": "817000",
    "end": "824040"
  },
  {
    "text": "that computes uh in this Paradigm we use uh what's called a long poll and so it",
    "start": "824040",
    "end": "830000"
  },
  {
    "text": "could be an AWS uh ec2 instance it can be a container um it can be an on-prem",
    "start": "830000",
    "end": "835399"
  },
  {
    "text": "server it can even be a mobile phone basically any computer device that's on the internet that can can make an API call to step functions can request work",
    "start": "835399",
    "end": "842120"
  },
  {
    "text": "receive it perform it and return a result and so the basic long poll pattern is um when you're defining your",
    "start": "842120",
    "end": "848720"
  },
  {
    "text": "your task State you register an activity type that states recognizes when you write a program on that compute resource",
    "start": "848720",
    "end": "856040"
  },
  {
    "text": "you you tell it to present that ID as this is the kind of work I know how to do and essentially your your Computing",
    "start": "856040",
    "end": "862320"
  },
  {
    "text": "instances call in to step function and say do you have work for me do you have work for me do you have work for me and they basically hold the poll open you",
    "start": "862320",
    "end": "868279"
  },
  {
    "text": "know for at a time and if the state machine enters a state where that work is needed it gets dispatched that",
    "start": "868279",
    "end": "874079"
  },
  {
    "text": "machine performs the work completes it sends it back and then forgets about what it did because the whole idea is that all your your uh compute resources",
    "start": "874079",
    "end": "881839"
  },
  {
    "text": "remain stateless step functions keeps track of state so what does a task State look",
    "start": "881839",
    "end": "888199"
  },
  {
    "start": "887000",
    "end": "887000"
  },
  {
    "text": "like this is our hello world example again if we look inside a little more deeply um every state has a type this is",
    "start": "888199",
    "end": "893399"
  },
  {
    "text": "a type we declare task now it knows it's a task State task states require a resource",
    "start": "893399",
    "end": "899519"
  },
  {
    "text": "um and so in this case we give it the Arn of a Lambda function and so when step functions hits this state it's",
    "start": "899519",
    "end": "905160"
  },
  {
    "text": "going to call that Lambda function um that you've that you've written described elsewhere and while you're doing this in the console it'll actually",
    "start": "905160",
    "end": "910839"
  },
  {
    "text": "give you a drop- down list of the Lambda functions that are available in the region you're working within as a convenience um alternatively if you're",
    "start": "910839",
    "end": "918399"
  },
  {
    "text": "going to Long pole into this into this task State then that RN would be replaced by what's called a registered",
    "start": "918399",
    "end": "923800"
  },
  {
    "text": "activity you'll go to the console or you can do it through the API you say I want to register an activity you give it to name it gives back an Arn you put that",
    "start": "923800",
    "end": "931040"
  },
  {
    "text": "Arn in the resource and now when when step functions reaches this state it waits for one of your activity workers",
    "start": "931040",
    "end": "937360"
  },
  {
    "text": "one of your computers and one of your programs to call in and say I'm looking for this kind of work do you have it and when there's a match it gets dispatched",
    "start": "937360",
    "end": "943759"
  },
  {
    "text": "to the to the compute resourc processed and sent",
    "start": "943759",
    "end": "949600"
  },
  {
    "text": "back now some other nice features about about task States one of which is they will retry when there's a",
    "start": "950560",
    "end": "957000"
  },
  {
    "start": "951000",
    "end": "951000"
  },
  {
    "text": "failure um and so here here's a snippet of the code you essentially indicate the kind of error you want to handle so if",
    "start": "957000",
    "end": "962839"
  },
  {
    "text": "an error comes back at you um you can say for this handled error handle it this way and so you can say try again",
    "start": "962839",
    "end": "969079"
  },
  {
    "text": "how many times in this case two more attempts so three strikes you're out in this in this state how long you want to",
    "start": "969079",
    "end": "974880"
  },
  {
    "text": "wait so this says wait a second but maybe you want to wait longer and longer intervals you want to have an exponential back off um if you have a",
    "start": "974880",
    "end": "981440"
  },
  {
    "text": "resource that's that's being ladened so you can specify a back off rate and you'll increase how long you wait each",
    "start": "981440",
    "end": "986480"
  },
  {
    "text": "successive try uh until you get success so that's a that's a um that's a",
    "start": "986480",
    "end": "993160"
  },
  {
    "start": "993000",
    "end": "993000"
  },
  {
    "text": "retry the other scenario is you get error codes and you can catch failure of task States and so here's the same",
    "start": "993160",
    "end": "999279"
  },
  {
    "text": "notion so now we introduce the the phrase catch under the task State we make an array with different kinds of",
    "start": "999279",
    "end": "1004399"
  },
  {
    "text": "error messages there are two kinds there's a custom error which you see is the first error and the second is a",
    "start": "1004399",
    "end": "1010360"
  },
  {
    "text": "reserved error there are four reserved errors they begin with the word States so there's a task failed or a task",
    "start": "1010360",
    "end": "1016560"
  },
  {
    "text": "timeout um and so you have a combination of of uh reserves error types and custom",
    "start": "1016560",
    "end": "1021880"
  },
  {
    "text": "error types and based on those error types you can choose what state to go to next which means that if you're trying",
    "start": "1021880",
    "end": "1027000"
  },
  {
    "text": "to say uh look up something in a database and the database isn't available you can go to a state that handles that problem uh and we'll show",
    "start": "1027000",
    "end": "1033199"
  },
  {
    "text": "you some examples of that in in a bit so this lets you implement a well-known",
    "start": "1033199",
    "end": "1038480"
  },
  {
    "text": "pattern that that is used a lot of programming language you know called try catch finally and that's just built into",
    "start": "1038480",
    "end": "1044760"
  },
  {
    "text": "the service so when you have a catch failure you're State machine looks like this so",
    "start": "1044760",
    "end": "1049799"
  },
  {
    "start": "1046000",
    "end": "1046000"
  },
  {
    "text": "within that hello world example where we don't if we have a retry we don't see it but if we do have catch States the",
    "start": "1049799",
    "end": "1055160"
  },
  {
    "text": "states that we go to show up in your state machine because you have to have a destination for each of those catch",
    "start": "1055160",
    "end": "1061000"
  },
  {
    "text": "States Choice States give you branching logic so Choice State you specify type",
    "start": "1062760",
    "end": "1068520"
  },
  {
    "start": "1063000",
    "end": "1063000"
  },
  {
    "text": "Choice um and then you have comparators and so the comparators Can Be Strings numerics booleans or time stamps you",
    "start": "1068520",
    "end": "1075640"
  },
  {
    "text": "have the full range of greater than less than equal to less Le than or equal to greater than or equal to um and what you",
    "start": "1075640",
    "end": "1080840"
  },
  {
    "text": "do is the variable calls the path of your Json input so that's the key of a key value pair in this case the key is",
    "start": "1080840",
    "end": "1086520"
  },
  {
    "text": "Fu um and the and each comparison says is this comparison true if so go to that state and if not go to the next",
    "start": "1086520",
    "end": "1092799"
  },
  {
    "text": "comparison so this first comparator is saying does the does the numeric of Fu equal one if yes go to the first match",
    "start": "1092799",
    "end": "1099039"
  },
  {
    "text": "state if no go to the next comparator and keep working your way through till you've exhausted all the comparisons you",
    "start": "1099039",
    "end": "1105120"
  },
  {
    "text": "set up and if all those fail you can specify a default state which says if none of them match go to this state",
    "start": "1105120",
    "end": "1110320"
  },
  {
    "text": "because there's a problem in in the execution and that's what you see in the state machine on the on the right which",
    "start": "1110320",
    "end": "1116039"
  },
  {
    "text": "is that choice State goes to first match a second match or a default and so that's how you can handle",
    "start": "1116039",
    "end": "1121679"
  },
  {
    "text": "um branching logic in in Step functions parallel State uh similar",
    "start": "1121679",
    "end": "1126760"
  },
  {
    "start": "1125000",
    "end": "1125000"
  },
  {
    "text": "construction but it lets you four conjoined processes so you specify the state type parallel you can see it's it's stated there in this case you'll",
    "start": "1126760",
    "end": "1132960"
  },
  {
    "text": "tell it what's the next state at the end of all the parallel execution so where does it all get joined it gets joined in the final state",
    "start": "1132960",
    "end": "1139080"
  },
  {
    "text": "and then the branches of the parallel execution get defined so you say where does each branch start what state does this does does a branch start at so the",
    "start": "1139080",
    "end": "1145360"
  },
  {
    "text": "first Branch starts at wait 20 seconds and it's a weight State um the second Branch says it's a pass State and it",
    "start": "1145360",
    "end": "1152159"
  },
  {
    "text": "would and and so as you define each of these branches you get a state machine that look like this we put the uh",
    "start": "1152159",
    "end": "1158039"
  },
  {
    "text": "parallel branches in a box so you can see that it's a parallel set and the idea is that that input gets copied",
    "start": "1158039",
    "end": "1163760"
  },
  {
    "text": "across all the branches goes down through the branches and then the results are brought back together array and put in that given that final State",
    "start": "1163760",
    "end": "1170200"
  },
  {
    "text": "as its input and so I want to make a distinction when we talk parallel we're",
    "start": "1170200",
    "end": "1175840"
  },
  {
    "text": "talking about executions inside the state machine we're talking about many state machines running we talk about concurrent",
    "start": "1175840",
    "end": "1181440"
  },
  {
    "text": "executions um and there's and that's important because there's issues about how uh names are handled in a state",
    "start": "1181440",
    "end": "1188039"
  },
  {
    "text": "machine execution versus inside a state machine execution weight states are pretty straightforward they're timers uh so you",
    "start": "1188039",
    "end": "1195440"
  },
  {
    "text": "can have a time in seconds or you can have a Time based on a time stamp and so you can make your state machines",
    "start": "1195440",
    "end": "1203200"
  },
  {
    "start": "1204000",
    "end": "1204000"
  },
  {
    "text": "wait everything I've shown you now is in the console in the blueprints so you want to see the code in detail you want",
    "start": "1204159",
    "end": "1209799"
  },
  {
    "text": "to modify the code and play with it um these are the six that we have today we'll have more in the future but we have the basics the hello world the",
    "start": "1209799",
    "end": "1216000"
  },
  {
    "text": "retry and catch parallel States the choice States and weight States and so you can experiment and learn uh as you",
    "start": "1216000",
    "end": "1224200"
  },
  {
    "start": "1226000",
    "end": "1226000"
  },
  {
    "text": "go as I me you can also use this through the API and the API is really simple there's basically five basic huls one is",
    "start": "1226799",
    "end": "1233640"
  },
  {
    "text": "create things so create a state machine you upload your Jason and give it a name and you've registered a state machine type you can also register activity",
    "start": "1233640",
    "end": "1239840"
  },
  {
    "text": "workers the same way say I have an activity worker and I want to give it this name and it says okay you have a name and here's your RN now you put that",
    "start": "1239840",
    "end": "1245480"
  },
  {
    "text": "in your state machine uh so you can imagine a world where you register activities and can build State machines programmatically as well as by hand",
    "start": "1245480",
    "end": "1252880"
  },
  {
    "text": "start executions tell it which state machine you want to run and it returns an execution ID you can specify it yourself or it will assign one for you",
    "start": "1252880",
    "end": "1259919"
  },
  {
    "text": "that's um a random number that's item potent you can also stop an execution at",
    "start": "1259919",
    "end": "1265799"
  },
  {
    "text": "any time so if it doesn't get to the Finish Line you can just kill it uh you have list so you can list all state",
    "start": "1265799",
    "end": "1271120"
  },
  {
    "text": "machines all executions and all activities that are in the system in any given time you can also ask it to describe individual State machines",
    "start": "1271120",
    "end": "1277760"
  },
  {
    "text": "individual executions uh and individual activities that's basically it for the API it's very",
    "start": "1277760",
    "end": "1284400"
  },
  {
    "text": "straightforward so now the question is well okay this is how it works well why should you use it where should you use",
    "start": "1284679",
    "end": "1290480"
  },
  {
    "text": "it so we'll talk about a customer couple of customer examples so we talked about insuring tasks execute in sequence so",
    "start": "1290480",
    "end": "1297880"
  },
  {
    "start": "1291000",
    "end": "1291000"
  },
  {
    "text": "what if you were want to reliably process orders so an example of this is a company called food Panda uh food",
    "start": "1297880",
    "end": "1304799"
  },
  {
    "text": "Panda has a food delivery service uh that works globally and basically connects restaurants with customers that",
    "start": "1304799",
    "end": "1310000"
  },
  {
    "text": "order food by managing a delivery Network and and what they need to do is when orders come in they need to they",
    "start": "1310000",
    "end": "1315720"
  },
  {
    "text": "need to group these orders by drivers by region and make sure that they get food to the customers in the shortest time",
    "start": "1315720",
    "end": "1321039"
  },
  {
    "text": "possible in the most efficient manner they're solving the traveling traveling salesman problem over and over and over",
    "start": "1321039",
    "end": "1327640"
  },
  {
    "text": "again and so this naturally lends itself to a state machine so food Panda build a state machine to handle the pairing of",
    "start": "1327640",
    "end": "1334000"
  },
  {
    "start": "1331000",
    "end": "1331000"
  },
  {
    "text": "drivers with orders so it starts with telling what vehicles are available now",
    "start": "1334000",
    "end": "1339039"
  },
  {
    "text": "that are not doing delivery that are in in the zone that I'm interested in delivering food to based on the",
    "start": "1339039",
    "end": "1344320"
  },
  {
    "text": "available Vehicles they run an assignment algorithm uh that that says these orders in this car those orders in that truck",
    "start": "1344320",
    "end": "1351320"
  },
  {
    "text": "and these orders in that van and then they dispatch the vehicles for delivery and of course something may",
    "start": "1351320",
    "end": "1356919"
  },
  {
    "text": "go wrong so they want to know if they get a hold of the vehicle great tell the customer the food's on the way if the",
    "start": "1356919",
    "end": "1362480"
  },
  {
    "text": "vehicle is not available they have a faure mode that says I can't get a hold of the vehicle so I have to put it back in the process and reassign it again",
    "start": "1362480",
    "end": "1368159"
  },
  {
    "text": "later um and in some cases all the vehicles are out so they have no vehicles found in the very first step so",
    "start": "1368159",
    "end": "1373840"
  },
  {
    "text": "this is a way of having the pattern of of making sure there's there's vehicles that there's matches is that there's availability and that customers get",
    "start": "1373840",
    "end": "1379760"
  },
  {
    "text": "informed and all these things have to happen in a predefined sequence you don't tell a customer food's on the way if you don't know that it's sitting in",
    "start": "1379760",
    "end": "1385320"
  },
  {
    "text": "the vehicle and so this is an example of of ensuring tasks execute in",
    "start": "1385320",
    "end": "1391240"
  },
  {
    "text": "order uh another example is the take so suppose you want to choose logical paths Based on",
    "start": "1391279",
    "end": "1397120"
  },
  {
    "start": "1392000",
    "end": "1392000"
  },
  {
    "text": "data um example is reliably curating a database so the take is an interesting company the take lets you discover",
    "start": "1397120",
    "end": "1403880"
  },
  {
    "text": "products in TV shows and movies that you're watching so if you see the actor wearing an interesting watch you know a",
    "start": "1403880",
    "end": "1408919"
  },
  {
    "text": "certain pair of shoes or a dress and you say I want to know where I get that the take lets you find out um but to do so",
    "start": "1408919",
    "end": "1415000"
  },
  {
    "text": "they have to have a database of all the items they've tagged and they need to keep it up to date for when things um",
    "start": "1415000",
    "end": "1421760"
  },
  {
    "text": "are out of fashion and no longer available for when prices change for when inventory changes and so they have",
    "start": "1421760",
    "end": "1427440"
  },
  {
    "text": "a database they want to keep fresh on a regular basis they used to do this manually and it was very painful they",
    "start": "1427440",
    "end": "1432760"
  },
  {
    "text": "have hundreds and hundreds of products to keeping track of so instead they built a state machine",
    "start": "1432760",
    "end": "1438919"
  },
  {
    "text": "and the thing is their state machine is an example of a choice State because they work with a variety of vendors and",
    "start": "1438919",
    "end": "1444279"
  },
  {
    "text": "so the first question they ask in the database is where did this item come from which vendor a b or c and then based on knowing which vendor provided",
    "start": "1444279",
    "end": "1451080"
  },
  {
    "text": "that item they'll launch a Lambda function that then goes and communicates with that vendor's database and says is this stuff available so it makes a smart",
    "start": "1451080",
    "end": "1457960"
  },
  {
    "text": "decision about how to communicate with which database and if it turns out that the information is not available they they have a problem communicating with",
    "start": "1457960",
    "end": "1463880"
  },
  {
    "text": "the database they can reflex to a screen scrape capture the information that way and update their product uh their",
    "start": "1463880",
    "end": "1469880"
  },
  {
    "text": "product catalog and that's an example of using branching logic in a in a state",
    "start": "1469880",
    "end": "1476080"
  },
  {
    "text": "machine now these are a couple good examples of how customer is using step functions I could go in depth uh on",
    "start": "1478520",
    "end": "1484760"
  },
  {
    "text": "these but I'd actually like to go in depth on one more example but rather than have you hear it from me I'd like you to hear it directly from a customer",
    "start": "1484760",
    "end": "1491360"
  },
  {
    "text": "so I have with me today Manuel P from out systems and Manuel is the team leader of the cloud automation group uh",
    "start": "1491360",
    "end": "1497440"
  },
  {
    "text": "and he got a really good story about how they addressed what I think is going to be a common challenge for a lot of people in",
    "start": "1497440",
    "end": "1503640"
  },
  {
    "text": "coordinating microservices I'll let you and what I'm going to do is let Manuel tell you more about out systems and",
    "start": "1503640",
    "end": "1509159"
  },
  {
    "text": "about their experiences with step functions Manuel floor is yours thank you Andy thank you so don't leave right",
    "start": "1509159",
    "end": "1514720"
  },
  {
    "text": "now I think I also want the S oh more pictures sorry yeah",
    "start": "1514720",
    "end": "1521279"
  },
  {
    "text": "sorry you'll indulge us good all right thank",
    "start": "1521279",
    "end": "1529360"
  },
  {
    "text": "you so hello everyone my name is Manuel P I work at out systems for those of you",
    "start": "1529360",
    "end": "1536120"
  },
  {
    "text": "who don't know uh out systems let me do you a brief introduction well out",
    "start": "1536120",
    "end": "1541200"
  },
  {
    "text": "systems is the number one loow code development platform on the market this uh loow code uh term was was",
    "start": "1541200",
    "end": "1550760"
  },
  {
    "text": "coined by by Forester to designate our our space so what does it actually means",
    "start": "1550760",
    "end": "1556399"
  },
  {
    "text": "well it means that instead of writing code we use use visual models to create",
    "start": "1556399",
    "end": "1561799"
  },
  {
    "text": "web and mobile applications you might also have heard of terms like rapid application",
    "start": "1561799",
    "end": "1568120"
  },
  {
    "text": "development uh well that's that's our space um when we talk about these loc",
    "start": "1568120",
    "end": "1574399"
  },
  {
    "text": "Cod platforms people usually think about toy applications no we are actually delivering Mission critical Enterprise",
    "start": "1574399",
    "end": "1580960"
  },
  {
    "text": "grade applications to our customers we are enabling them to easily go to to",
    "start": "1580960",
    "end": "1586080"
  },
  {
    "text": "Market with their their applications",
    "start": "1586080",
    "end": "1590559"
  },
  {
    "text": "so sorry so out systems um delivers a",
    "start": "1591279",
    "end": "1596880"
  },
  {
    "text": "full stack visual development uh full life Cy life cycle management and also",
    "start": "1596880",
    "end": "1603000"
  },
  {
    "text": "uh the ability to deliver your application to almost any device but enough about out systems uh",
    "start": "1603000",
    "end": "1611320"
  },
  {
    "text": "let me tell you a story in late 2014 uh we shifted from a",
    "start": "1611320",
    "end": "1619760"
  },
  {
    "start": "1615000",
    "end": "1615000"
  },
  {
    "text": "product only company to to an hybrid product and hosted services provider so",
    "start": "1619760",
    "end": "1626559"
  },
  {
    "text": "we started to deliver our platform on the cloud on the AWS uh Cloud this",
    "start": "1626559",
    "end": "1632760"
  },
  {
    "text": "enabled our customers to not worry about installing software to have uh running",
    "start": "1632760",
    "end": "1638440"
  },
  {
    "text": "uh their own infrastructure and that kind of of stuff en them just to write their applications just to develop their",
    "start": "1638440",
    "end": "1645200"
  },
  {
    "text": "applications using out systems and not to having to worry anything at all and",
    "start": "1645200",
    "end": "1650880"
  },
  {
    "text": "this helped us to move a bit faster so we could deliver U more value to our customers in last",
    "start": "1650880",
    "end": "1657520"
  },
  {
    "text": "time besides that it also opened a new door at our company this this door we",
    "start": "1657520",
    "end": "1663559"
  },
  {
    "text": "call it microservices we started to explore microservices earlier this year and uh",
    "start": "1663559",
    "end": "1671200"
  },
  {
    "text": "our first service our first micros service was a mobile application Builder I don't know those of you are aware Ware",
    "start": "1671200",
    "end": "1677720"
  },
  {
    "text": "of developing mobile applications not the of installing uh the development environments having different Hardware",
    "start": "1677720",
    "end": "1684080"
  },
  {
    "text": "to compile for a specific uh vendor and well that's a lot of trouble and we want",
    "start": "1684080",
    "end": "1690240"
  },
  {
    "text": "to deliver value to our customers we don't want to give them another problem to to solve so we created this mobile uh",
    "start": "1690240",
    "end": "1696840"
  },
  {
    "text": "application Builder well this was a very interesting",
    "start": "1696840",
    "end": "1703039"
  },
  {
    "text": "move for for us but we knew that we'll get into some problems in the in the future we had",
    "start": "1703039",
    "end": "1709760"
  },
  {
    "text": "some some problem a big one it was about consolidation when you go into to",
    "start": "1709760",
    "end": "1715440"
  },
  {
    "text": "microservices you start having team developing their their own services and their their own logic and uh well you",
    "start": "1715440",
    "end": "1723159"
  },
  {
    "text": "have to monitor those systems right otherwise your customers will call you and say well this is not working and why",
    "start": "1723159",
    "end": "1729840"
  },
  {
    "text": "it's not working our support and operations teams have no idea why this not working so monitoring was a",
    "start": "1729840",
    "end": "1735600"
  },
  {
    "text": "challenge because you had we had to consult solidate all this information from multiple event sources like",
    "start": "1735600",
    "end": "1741200"
  },
  {
    "text": "cloudwatch like zix like our own applications and well we had no no way",
    "start": "1741200",
    "end": "1748159"
  },
  {
    "text": "to do it out of the box with the commercially available Solutions we also wanted to integrate something that's",
    "start": "1748159",
    "end": "1754240"
  },
  {
    "text": "very important for us that's our business logic it's not just that the service is down but the service is down",
    "start": "1754240",
    "end": "1761120"
  },
  {
    "text": "and what is it affecting and uh is anything related to the service that uh is also down should be Tre an alarm",
    "start": "1761120",
    "end": "1768080"
  },
  {
    "text": "shouldn't we well we were aware of um AWS step functions better and uh we saw",
    "start": "1768080",
    "end": "1775519"
  },
  {
    "text": "that as the missing piece for for our puzzle and well and West step functions uh as a",
    "start": "1775519",
    "end": "1784679"
  },
  {
    "text": "very simple language but at the same time it's very very powerful you know",
    "start": "1784679",
    "end": "1789720"
  },
  {
    "text": "because you can build very complex logic with this uh with this simple language",
    "start": "1789720",
    "end": "1795399"
  },
  {
    "text": "let me go over the the requirements well our new monitoring system it had to be",
    "start": "1795399",
    "end": "1801919"
  },
  {
    "start": "1798000",
    "end": "1798000"
  },
  {
    "text": "reliable so we had to to to be able to count on it it we didn't want the the",
    "start": "1801919",
    "end": "1807320"
  },
  {
    "text": "boy CED wolf story anymore it's it's very important to rely on your monitoring system so it had to be always",
    "start": "1807320",
    "end": "1814480"
  },
  {
    "text": "available and we had to be able to trust it also it had to be scalable it had to",
    "start": "1814480",
    "end": "1819600"
  },
  {
    "text": "grow it us as we have more and more customers with in our P offer uh we need",
    "start": "1819600",
    "end": "1825960"
  },
  {
    "text": "a system that scales with us we don't want to worry about provisioning ec2 instances or going uh uh to work on",
    "start": "1825960",
    "end": "1832760"
  },
  {
    "text": "Autos scaling groups we want to do it uh without thinking much about it also it",
    "start": "1832760",
    "end": "1838840"
  },
  {
    "text": "had to be highly available it's our monitoring system it's our eyes on the the infrastructure we need to to see all",
    "start": "1838840",
    "end": "1845600"
  },
  {
    "text": "the time it's not something that we can afford to do an operating system upgrade it goes wrong and we have no monitoring",
    "start": "1845600",
    "end": "1851360"
  },
  {
    "text": "system or that uh an availability Zone becomes unavailable and our instances",
    "start": "1851360",
    "end": "1856399"
  },
  {
    "text": "are down so it had to be always on and this is the most important uh thing uh that I want",
    "start": "1856399",
    "end": "1863760"
  },
  {
    "text": "to to talk to you about it had to be easily easy to extend that's crucial",
    "start": "1863760",
    "end": "1868919"
  },
  {
    "text": "because when you go to to microservices and you have different people developing different Services it's very important",
    "start": "1868919",
    "end": "1875840"
  },
  {
    "text": "to get people on board that people collaborate with you in your monitoring system and step functions allowed us to",
    "start": "1875840",
    "end": "1882399"
  },
  {
    "text": "do that and it allowed us to do that in a very simple manner",
    "start": "1882399",
    "end": "1887799"
  },
  {
    "text": "autism understands what Simplicity looks like and how hard it is to to achieve",
    "start": "1887799",
    "end": "1894639"
  },
  {
    "text": "and we recognize that right away on AWS step functions awep functions allow",
    "start": "1894639",
    "end": "1901240"
  },
  {
    "text": "people to view just the logic to understand the logic people don't need to know how to codes they they can but",
    "start": "1901240",
    "end": "1907919"
  },
  {
    "text": "they don't need but everyone understands logic not everyone understands",
    "start": "1907919",
    "end": "1913840"
  },
  {
    "text": "code so enough talk let me go through a an a state machine that we created for",
    "start": "1913960",
    "end": "1920000"
  },
  {
    "text": "our monitoring system for those of you in the the back row that can see it very well well I'll walk you through through",
    "start": "1920000",
    "end": "1926440"
  },
  {
    "text": "it it's very simple it starts with a couple of tasks those are the ones in the states in in black in black boxes",
    "start": "1926440",
    "end": "1934000"
  },
  {
    "text": "this task reive some information using Lambda functions and then we get into a choice State this Choice state will",
    "start": "1934000",
    "end": "1940799"
  },
  {
    "text": "verify where our event came from and what it is about and we'll pick a different path regarding uh the vent",
    "start": "1940799",
    "end": "1948080"
  },
  {
    "text": "source as you can see we have multiple choice States on this uh State machine",
    "start": "1948080",
    "end": "1953279"
  },
  {
    "text": "and we also have something that Andy talked before we have this TR catch",
    "start": "1953279",
    "end": "1959440"
  },
  {
    "text": "finally pattern on all our uh Lambda tasks so this is very simple and it's",
    "start": "1959440",
    "end": "1965559"
  },
  {
    "text": "quite simple to to go to a support team or to an operational team show them this logic and then explain them why",
    "start": "1965559",
    "end": "1971760"
  },
  {
    "text": "something failed or why why something is not working so it's very easy to explain",
    "start": "1971760",
    "end": "1976799"
  },
  {
    "text": "and then that's very important for us in our system well how does this look like well",
    "start": "1976799",
    "end": "1983880"
  },
  {
    "start": "1982000",
    "end": "1982000"
  },
  {
    "text": "it's just this it's just a very simple Json document that if you don't want to type it you can also have a tool to",
    "start": "1983880",
    "end": "1990159"
  },
  {
    "text": "generate it for you or I think it's something that will come in the the near future people will start building tools",
    "start": "1990159",
    "end": "1996159"
  },
  {
    "text": "to to generate these uh State machines but it's very simple so it's our choice state it evaluates a variable using",
    "start": "1996159",
    "end": "2003399"
  },
  {
    "text": "Jason path it's string equals zix and if it equals it's an event of type alarm so",
    "start": "2003399",
    "end": "2010880"
  },
  {
    "text": "that's really really simple that's what we wanted to achieve with step function",
    "start": "2010880",
    "end": "2016919"
  },
  {
    "text": "Simplicity now what were our results and achievements with this with this",
    "start": "2016919",
    "end": "2022519"
  },
  {
    "start": "2018000",
    "end": "2018000"
  },
  {
    "text": "experience first of all we were able to earn trust trust is something very difficult",
    "start": "2022519",
    "end": "2028840"
  },
  {
    "text": "to to earn it's a something that we value very very much and with microservices you have like 10 or 20",
    "start": "2028840",
    "end": "2036279"
  },
  {
    "text": "teams developing on different stuff and it's all fine it's very interesting you can innovate in a very quickly a very",
    "start": "2036279",
    "end": "2043639"
  },
  {
    "text": "fast way but when it comes to your operations and and support team it gets",
    "start": "2043639",
    "end": "2050200"
  },
  {
    "text": "messy so if these teams they they understand how how the team implemented the the monitoring well they can trust",
    "start": "2050200",
    "end": "2056760"
  },
  {
    "text": "the team they can trust the monitoring then it this will build a better relationship between the the operations",
    "start": "2056760",
    "end": "2063118"
  },
  {
    "text": "and the the development also this this this enabled",
    "start": "2063119",
    "end": "2069720"
  },
  {
    "text": "us to to grow faster also and uh we feel safer in this growth because well we",
    "start": "2069720",
    "end": "2077720"
  },
  {
    "text": "know what's happening we know that AEP functions uh is highly available service",
    "start": "2077720",
    "end": "2084240"
  },
  {
    "text": "it's uh it's very interesting and it's also scales in without having to to",
    "start": "2084240",
    "end": "2091240"
  },
  {
    "text": "worry about it so we can can grow it's very very quick to to extend to expan to",
    "start": "2091240",
    "end": "2097118"
  },
  {
    "text": "another team well this is how you write a a state machine so Implement your logic we can integrate it very fast",
    "start": "2097119",
    "end": "2104640"
  },
  {
    "text": "because we don't have to go truly to to the through the code we just can look at",
    "start": "2104640",
    "end": "2110280"
  },
  {
    "text": "the logic and see if it makes sense everyone understands logic and that's something that we Valu very",
    "start": "2110280",
    "end": "2117839"
  },
  {
    "text": "high so thank you thank you everyone",
    "start": "2117839",
    "end": "2123880"
  },
  {
    "text": "Andy thank you also a special thanks to",
    "start": "2125800",
    "end": "2130920"
  },
  {
    "text": "to Andy who was of great help through this this journey on L of functions about the program you're",
    "start": "2130920",
    "end": "2137960"
  },
  {
    "text": "welcome so thank you Manuel for telling us your story um I think",
    "start": "2137960",
    "end": "2143920"
  },
  {
    "text": "um for us it's very interesting because out system really is the expert on making people productive agile and",
    "start": "2143920",
    "end": "2151920"
  },
  {
    "text": "resilient in a low code setting they know what Simplicity looks like and so it's actually quite quite thrilling for",
    "start": "2151920",
    "end": "2157480"
  },
  {
    "text": "us that they looked at ad a step functions and felt that they found something that could work for them in their development environment that was",
    "start": "2157480",
    "end": "2163040"
  },
  {
    "text": "as simple and direct as we hoped so let's talk a little bit uh to",
    "start": "2163040",
    "end": "2168560"
  },
  {
    "text": "wrap it up well what can I do today most of the stuff we talked about um so we talk about the features",
    "start": "2168560",
    "end": "2175359"
  },
  {
    "start": "2173000",
    "end": "2173000"
  },
  {
    "text": "of AEP functions we want to make you more productive and so we think the J the declarative Jason lets you be more",
    "start": "2175359",
    "end": "2180800"
  },
  {
    "text": "productive it's a more intuitive way to define a workflow in the form of a state machine uh we want it to make it easy to",
    "start": "2180800",
    "end": "2187599"
  },
  {
    "text": "work with whatever compute resources you have whether it's a Lambda function a container an ec2 instance you're on Prem",
    "start": "2187599",
    "end": "2193760"
  },
  {
    "text": "server you know even to the extent that your mobile phone has an SDK your mobile phone um we give you branching Logic for",
    "start": "2193760",
    "end": "2200359"
  },
  {
    "text": "choices we give you fork and joins for parallel processes we also want to make",
    "start": "2200359",
    "end": "2205400"
  },
  {
    "text": "you agile um so we give you the visual console so you can step through your state machine executions and learn what's going on we give you the history",
    "start": "2205400",
    "end": "2211599"
  },
  {
    "text": "of each execution in detail so you can keep keep records as well as find find where the greml tide um integration",
    "start": "2211599",
    "end": "2218319"
  },
  {
    "text": "again with Amazon cloudwatch and AWS cloud trail so not just the console um",
    "start": "2218319",
    "end": "2224079"
  },
  {
    "text": "and we want to make sure that your apps are resilient so we take care of scaling automatically from a single execution a day to tens of thousands per day we have",
    "start": "2224079",
    "end": "2232000"
  },
  {
    "text": "that TR catch finally pattern which is make sure that every task actually executes when you want it to and gets to",
    "start": "2232000",
    "end": "2237440"
  },
  {
    "text": "completion um you can timeout tasks so if you have a long running execution uh",
    "start": "2237440",
    "end": "2242480"
  },
  {
    "text": "and and a particular task is supposed to take 10 days um you can wait 10 days and the 11th day",
    "start": "2242480",
    "end": "2248640"
  },
  {
    "text": "you can say it's done but 10 days is a long time to wait to find out something can work so we also have a feature in there called heartbeats so heartbeats",
    "start": "2248640",
    "end": "2254720"
  },
  {
    "text": "are where um that compute instance that's calculating for a long period of time can call back in every minute every",
    "start": "2254720",
    "end": "2260400"
  },
  {
    "text": "5 minutes every 10 minutes when that heartbeat disappears you know something went wrong in that compute instance you can fail faster so if you have a 10-day",
    "start": "2260400",
    "end": "2267000"
  },
  {
    "text": "compute and there are companies customers of ours that have had 10-day compute in their in their workflows um",
    "start": "2267000",
    "end": "2272800"
  },
  {
    "text": "you can find out if it failed on day two or day nine and start it again if you you have",
    "start": "2272800",
    "end": "2278760"
  },
  {
    "text": "to so how much is it cost uh it's 2 and half cents per thousand State transitions so we measure State",
    "start": "2278760",
    "end": "2284720"
  },
  {
    "start": "2279000",
    "end": "2279000"
  },
  {
    "text": "transition by looking at those arcs on the graph so start into the first state trace your path through till you get to",
    "start": "2284720",
    "end": "2289760"
  },
  {
    "text": "the end you count those up you get uh you get the number of State transitions your execution completed and it's the",
    "start": "2289760",
    "end": "2295440"
  },
  {
    "text": "path your execution follows not the number of paths you create in your state machine so a lot of times like when you saw a menel state machine uh it had you",
    "start": "2295440",
    "end": "2302960"
  },
  {
    "text": "know on the order of 2025 different states but the path that would take through to complete an execution you",
    "start": "2302960",
    "end": "2308240"
  },
  {
    "text": "know might be uh five or six we also have a free tier associated with it so 4,000 State transitions per",
    "start": "2308240",
    "end": "2314680"
  },
  {
    "text": "month are free so you can experiment freely without fear of having a bill for the service of any",
    "start": "2314680",
    "end": "2321560"
  },
  {
    "text": "kind so where can you get it so we launch today in five regions uh the common ones uh so Us East in North",
    "start": "2321560",
    "end": "2328359"
  },
  {
    "text": "Virginia also Ohio uh Us West in Oregon we have EU Dublin and we have Asia",
    "start": "2328359",
    "end": "2335440"
  },
  {
    "text": "Pacific Tokyo uh all those are available today uh so if you go to your console you can just drop down to whichever",
    "start": "2335440",
    "end": "2340800"
  },
  {
    "text": "region you prefer to work in and find step functions",
    "start": "2340800",
    "end": "2345359"
  },
  {
    "text": "there so how to get started so you can get started the classical way and so the classical way is well read the",
    "start": "2346880",
    "end": "2352920"
  },
  {
    "start": "2347000",
    "end": "2347000"
  },
  {
    "text": "documentation uh there's a developer guide we have an API reference there's also two other documents one of which is",
    "start": "2352920",
    "end": "2358480"
  },
  {
    "text": "a specification of the state's language if you just want to see the nuts and bolts of of that language uh each of the",
    "start": "2358480",
    "end": "2363640"
  },
  {
    "text": "each of the state types um but we also have a static code evaluator called State lint that's on GitHub so when you",
    "start": "2363640",
    "end": "2369960"
  },
  {
    "text": "write your code you can check that it's syntactically correct before you upload it into the service so all those are available or you can simply go to the",
    "start": "2369960",
    "end": "2377560"
  },
  {
    "text": "console uh and so if you go to uh adab amazon.com step functions you can come to the console and you can look at those",
    "start": "2377560",
    "end": "2383920"
  },
  {
    "text": "templates and start building State machines um by just poking your way through the service and and our belief is that you'll be able to put together a",
    "start": "2383920",
    "end": "2390160"
  },
  {
    "text": "simple hello world in a couple of minutes uh either with a p state or if you have a Lambda function available you",
    "start": "2390160",
    "end": "2395960"
  },
  {
    "text": "just set up sem IM permissions we help that uh make that automatically and press go and you're running a state",
    "start": "2395960",
    "end": "2402680"
  },
  {
    "text": "machine so with that I will say thank you I appreciate your time today um",
    "start": "2403960",
    "end": "2409359"
  },
  {
    "text": "please complete evaluations I will take questions out in the hallway in a in a moment um and",
    "start": "2409359",
    "end": "2415119"
  },
  {
    "start": "2414000",
    "end": "2414000"
  },
  {
    "text": "related session if you have a time machine you can go back and see it but this happened earli this afternoon um focused on serval apps uh with step",
    "start": "2415119",
    "end": "2421680"
  },
  {
    "text": "functions but these will be online so um you may want to look for this one in the future again thank you very much",
    "start": "2421680",
    "end": "2427520"
  },
  {
    "text": "much",
    "start": "2427520",
    "end": "2430520"
  }
]