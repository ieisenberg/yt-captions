[
  {
    "text": "hey everyone today I'll be showcasing a",
    "start": "60",
    "end": "3360"
  },
  {
    "text": "new feature in AWS WAFF Json parsing and",
    "start": "3360",
    "end": "6899"
  },
  {
    "text": "inspection",
    "start": "6899",
    "end": "8519"
  },
  {
    "text": "AWS Waf can now parse Json in the body",
    "start": "8519",
    "end": "11880"
  },
  {
    "text": "of your requests allowing you to inspect",
    "start": "11880",
    "end": "14099"
  },
  {
    "text": "specific keys or values of the Json",
    "start": "14099",
    "end": "16859"
  },
  {
    "text": "using AWS Waf rules",
    "start": "16859",
    "end": "19800"
  },
  {
    "text": "this capability helps you protect your",
    "start": "19800",
    "end": "22740"
  },
  {
    "text": "apis by checking for valid Json",
    "start": "22740",
    "end": "25260"
  },
  {
    "text": "structure and content",
    "start": "25260",
    "end": "27420"
  },
  {
    "text": "so let's take a brief look at how this",
    "start": "27420",
    "end": "29699"
  },
  {
    "text": "works",
    "start": "29699",
    "end": "30720"
  },
  {
    "text": "here's a diagram of the initial",
    "start": "30720",
    "end": "33000"
  },
  {
    "text": "architecture of my API",
    "start": "33000",
    "end": "35520"
  },
  {
    "text": "their users sending requests over the",
    "start": "35520",
    "end": "37920"
  },
  {
    "text": "internet that are picked up by an",
    "start": "37920",
    "end": "39840"
  },
  {
    "text": "application load balancer which forwards",
    "start": "39840",
    "end": "42420"
  },
  {
    "text": "requests to a Lambda function",
    "start": "42420",
    "end": "45300"
  },
  {
    "text": "now this Lambda function has python code",
    "start": "45300",
    "end": "47760"
  },
  {
    "text": "that inspects the Json looking for a",
    "start": "47760",
    "end": "50460"
  },
  {
    "text": "well-formed structure and the presence",
    "start": "50460",
    "end": "52500"
  },
  {
    "text": "of a secret value",
    "start": "52500",
    "end": "55620"
  },
  {
    "text": "how can AWS be used to more easily",
    "start": "55620",
    "end": "58199"
  },
  {
    "text": "handle this requirement and avoid",
    "start": "58199",
    "end": "60300"
  },
  {
    "text": "excessive Lambda medications",
    "start": "60300",
    "end": "63739"
  },
  {
    "text": "AWS Waf can now parse transform and",
    "start": "64199",
    "end": "67560"
  },
  {
    "text": "inspect Json in the body of each request",
    "start": "67560",
    "end": "71220"
  },
  {
    "text": "now before we introduce the laugh rule",
    "start": "71220",
    "end": "73560"
  },
  {
    "text": "for this let's switch over to the",
    "start": "73560",
    "end": "75479"
  },
  {
    "text": "command line and interact with the API",
    "start": "75479",
    "end": "77640"
  },
  {
    "text": "to see how it works",
    "start": "77640",
    "end": "80600"
  },
  {
    "text": "let's use Curl to interact with this API",
    "start": "81240",
    "end": "85320"
  },
  {
    "text": "this command sends a valid Json body in",
    "start": "85320",
    "end": "89340"
  },
  {
    "text": "the request to the API",
    "start": "89340",
    "end": "92040"
  },
  {
    "text": "this Json is inspected by the Lambda",
    "start": "92040",
    "end": "94860"
  },
  {
    "text": "code and there's a True Value that's",
    "start": "94860",
    "end": "97140"
  },
  {
    "text": "returned because it has a valid Secret",
    "start": "97140",
    "end": "101700"
  },
  {
    "text": "now let's alter the request",
    "start": "101700",
    "end": "104400"
  },
  {
    "text": "by modifying the secret value and you",
    "start": "104400",
    "end": "106740"
  },
  {
    "text": "can see the Lambda function returned",
    "start": "106740",
    "end": "108360"
  },
  {
    "text": "invalid encoding because it was unable",
    "start": "108360",
    "end": "110579"
  },
  {
    "text": "to decode that secret value",
    "start": "110579",
    "end": "114180"
  },
  {
    "text": "here's another example where we send",
    "start": "114180",
    "end": "115860"
  },
  {
    "text": "invalid Json",
    "start": "115860",
    "end": "117780"
  },
  {
    "text": "again the Lambda function has to handle",
    "start": "117780",
    "end": "119759"
  },
  {
    "text": "this scenario as well where it's unable",
    "start": "119759",
    "end": "121860"
  },
  {
    "text": "to parse the Json",
    "start": "121860",
    "end": "124740"
  },
  {
    "text": "another example is where the key is",
    "start": "124740",
    "end": "127439"
  },
  {
    "text": "missing so here the Lambda function was",
    "start": "127439",
    "end": "129599"
  },
  {
    "text": "unable to find the secret key",
    "start": "129599",
    "end": "133140"
  },
  {
    "text": "it would be great to shelter my API from",
    "start": "133140",
    "end": "135840"
  },
  {
    "text": "these invalid requests by handling this",
    "start": "135840",
    "end": "138000"
  },
  {
    "text": "validation at the edge",
    "start": "138000",
    "end": "140040"
  },
  {
    "text": "so let's define a weft rule that does",
    "start": "140040",
    "end": "142680"
  },
  {
    "text": "that and we'll return to the command",
    "start": "142680",
    "end": "144599"
  },
  {
    "text": "line later and see what happens",
    "start": "144599",
    "end": "147660"
  },
  {
    "text": "okay so here we have an empty web ACL",
    "start": "147660",
    "end": "153060"
  },
  {
    "text": "and I'll add my own rule I'll use the",
    "start": "153060",
    "end": "156540"
  },
  {
    "text": "rule builder for this",
    "start": "156540",
    "end": "159560"
  },
  {
    "text": "rule name will be Json inspection demo",
    "start": "159780",
    "end": "162480"
  },
  {
    "text": "and it will be a regular rule instead of",
    "start": "162480",
    "end": "164700"
  },
  {
    "text": "a rate based rule",
    "start": "164700",
    "end": "166739"
  },
  {
    "text": "and the idea here is that we'll Define a",
    "start": "166739",
    "end": "168840"
  },
  {
    "text": "statement that matches the Json we",
    "start": "168840",
    "end": "171420"
  },
  {
    "text": "expect to see in each request",
    "start": "171420",
    "end": "174599"
  },
  {
    "text": "and so I'll use not here as a condition",
    "start": "174599",
    "end": "177180"
  },
  {
    "text": "so if it doesn't match what we expect",
    "start": "177180",
    "end": "178940"
  },
  {
    "text": "then we'll actually block the request",
    "start": "178940",
    "end": "182280"
  },
  {
    "text": "and for demonstration purposes I will",
    "start": "182280",
    "end": "185099"
  },
  {
    "text": "enable a custom response we'll return an",
    "start": "185099",
    "end": "187920"
  },
  {
    "text": "HTTP 200 code",
    "start": "187920",
    "end": "191300"
  },
  {
    "text": "and we'll use a custom response that",
    "start": "193560",
    "end": "195360"
  },
  {
    "text": "looks like this just to let the client",
    "start": "195360",
    "end": "197099"
  },
  {
    "text": "know that if it is blocked here's the",
    "start": "197099",
    "end": "199260"
  },
  {
    "text": "reason why",
    "start": "199260",
    "end": "201739"
  },
  {
    "text": "back up to our statement",
    "start": "202080",
    "end": "205340"
  },
  {
    "text": "we will inspect the request body",
    "start": "206040",
    "end": "209580"
  },
  {
    "text": "and here we'll choose Json so the AWS",
    "start": "209580",
    "end": "212640"
  },
  {
    "text": "Waf is actually going to parse the Json",
    "start": "212640",
    "end": "214680"
  },
  {
    "text": "content",
    "start": "214680",
    "end": "216180"
  },
  {
    "text": "and in our case",
    "start": "216180",
    "end": "218099"
  },
  {
    "text": "we're just looking to match values of",
    "start": "218099",
    "end": "221340"
  },
  {
    "text": "elements in the Json",
    "start": "221340",
    "end": "224159"
  },
  {
    "text": "and if it turns out that Json can't be",
    "start": "224159",
    "end": "226500"
  },
  {
    "text": "parsed due to some syntax issue then",
    "start": "226500",
    "end": "228900"
  },
  {
    "text": "we'll say it's not a match so we'll",
    "start": "228900",
    "end": "230760"
  },
  {
    "text": "Block in that case",
    "start": "230760",
    "end": "232920"
  },
  {
    "text": "and instead of inspecting",
    "start": "232920",
    "end": "235500"
  },
  {
    "text": "the entire Json body we're only going to",
    "start": "235500",
    "end": "238140"
  },
  {
    "text": "inspect a particular element",
    "start": "238140",
    "end": "241680"
  },
  {
    "text": "in our case that element is",
    "start": "241680",
    "end": "245959"
  },
  {
    "text": "envelope",
    "start": "246780",
    "end": "248519"
  },
  {
    "text": "Secret",
    "start": "248519",
    "end": "251060"
  },
  {
    "text": "and the match type would be it exactly",
    "start": "254819",
    "end": "257400"
  },
  {
    "text": "matches a string that has this value",
    "start": "257400",
    "end": "260400"
  },
  {
    "text": "here so",
    "start": "260400",
    "end": "262919"
  },
  {
    "text": "the idea is that AWS Waf will look for",
    "start": "262919",
    "end": "266280"
  },
  {
    "text": "an element with this name",
    "start": "266280",
    "end": "269220"
  },
  {
    "text": "in this path in the Json body",
    "start": "269220",
    "end": "272040"
  },
  {
    "text": "and this key needs to have this value",
    "start": "272040",
    "end": "275699"
  },
  {
    "text": "and also in our case we're actually",
    "start": "275699",
    "end": "277500"
  },
  {
    "text": "base64 encoding that value before it's",
    "start": "277500",
    "end": "280560"
  },
  {
    "text": "passed in so we'll tell AWS we have to",
    "start": "280560",
    "end": "283500"
  },
  {
    "text": "decode the value of that key before",
    "start": "283500",
    "end": "287300"
  },
  {
    "text": "performing a string match",
    "start": "287300",
    "end": "290960"
  },
  {
    "text": "and then if it turns out the size of the",
    "start": "292259",
    "end": "294300"
  },
  {
    "text": "Json body is larger than AWS WAFF can",
    "start": "294300",
    "end": "297120"
  },
  {
    "text": "have can process then we'll call that",
    "start": "297120",
    "end": "300419"
  },
  {
    "text": "not a match and block it in that case",
    "start": "300419",
    "end": "303720"
  },
  {
    "text": "so we're finished there so I'll go down",
    "start": "303720",
    "end": "305699"
  },
  {
    "text": "and add the rule",
    "start": "305699",
    "end": "308220"
  },
  {
    "text": "click save",
    "start": "308220",
    "end": "309900"
  },
  {
    "text": "and here we can see the rules now added",
    "start": "309900",
    "end": "312419"
  },
  {
    "text": "to the ACL",
    "start": "312419",
    "end": "313740"
  },
  {
    "text": "the last step is to hop over to",
    "start": "313740",
    "end": "315960"
  },
  {
    "text": "Associated AWS resources",
    "start": "315960",
    "end": "319340"
  },
  {
    "text": "and Associate this web ACL to the load",
    "start": "319340",
    "end": "323880"
  },
  {
    "text": "balancer",
    "start": "323880",
    "end": "326300"
  },
  {
    "text": "let's see how our API behaves now that",
    "start": "329220",
    "end": "332039"
  },
  {
    "text": "we have the waffle in place",
    "start": "332039",
    "end": "334800"
  },
  {
    "text": "so here we have a normal request with",
    "start": "334800",
    "end": "336840"
  },
  {
    "text": "the correct key and value in the Json",
    "start": "336840",
    "end": "340620"
  },
  {
    "text": "the WAFF did not block this the request",
    "start": "340620",
    "end": "343139"
  },
  {
    "text": "was sent to the Lambda function which",
    "start": "343139",
    "end": "345360"
  },
  {
    "text": "parsed the Json and confirmed the",
    "start": "345360",
    "end": "348360"
  },
  {
    "text": "presence of the right value",
    "start": "348360",
    "end": "350580"
  },
  {
    "text": "now let's modify this input Json",
    "start": "350580",
    "end": "354000"
  },
  {
    "text": "to pass in an incorrect value",
    "start": "354000",
    "end": "357300"
  },
  {
    "text": "you can see the Waf blocked that request",
    "start": "357300",
    "end": "360539"
  },
  {
    "text": "based on the rule that we provided",
    "start": "360539",
    "end": "363240"
  },
  {
    "text": "here let's try another situation where",
    "start": "363240",
    "end": "365400"
  },
  {
    "text": "we modify the name of the key but it has",
    "start": "365400",
    "end": "367860"
  },
  {
    "text": "the right secret value but it's the",
    "start": "367860",
    "end": "369419"
  },
  {
    "text": "wrong key here AWS Waf blocked that as",
    "start": "369419",
    "end": "372900"
  },
  {
    "text": "well",
    "start": "372900",
    "end": "374699"
  },
  {
    "text": "and the last idea we'll check is to",
    "start": "374699",
    "end": "377880"
  },
  {
    "text": "modify this Json so that it's using",
    "start": "377880",
    "end": "379979"
  },
  {
    "text": "incorrect syntax",
    "start": "379979",
    "end": "381720"
  },
  {
    "text": "and again you can see the WAFF is",
    "start": "381720",
    "end": "383940"
  },
  {
    "text": "blocking that situation as well",
    "start": "383940",
    "end": "387380"
  }
]