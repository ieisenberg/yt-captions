[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "[Music]",
    "start": "50",
    "end": "1010"
  },
  {
    "text": "[Applause]",
    "start": "1010",
    "end": "4088"
  },
  {
    "text": "[Music]",
    "start": "4960",
    "end": "11689"
  },
  {
    "text": "hello i'm dan a class support engineer",
    "start": "12000",
    "end": "14400"
  },
  {
    "text": "here at the aws office in dallas today",
    "start": "14400",
    "end": "17359"
  },
  {
    "text": "i'm going to show you how you can",
    "start": "17359",
    "end": "18560"
  },
  {
    "text": "troubleshoot timeout errors from aws",
    "start": "18560",
    "end": "21039"
  },
  {
    "text": "lambda when trying to access an amazon",
    "start": "21039",
    "end": "23039"
  },
  {
    "text": "relational database service database",
    "start": "23039",
    "end": "25119"
  },
  {
    "text": "instance let's get started",
    "start": "25119",
    "end": "28240"
  },
  {
    "start": "27000",
    "end": "68000"
  },
  {
    "text": "first in most cases timeout errors that",
    "start": "28240",
    "end": "30640"
  },
  {
    "text": "you see in lambda functions are the",
    "start": "30640",
    "end": "32238"
  },
  {
    "text": "result of networking issues where",
    "start": "32239",
    "end": "34079"
  },
  {
    "text": "requests are unable to route to an",
    "start": "34079",
    "end": "35760"
  },
  {
    "text": "endpoint",
    "start": "35760",
    "end": "37440"
  },
  {
    "text": "however in some cases the timeout error",
    "start": "37440",
    "end": "40239"
  },
  {
    "text": "might be a result of lambda function",
    "start": "40239",
    "end": "42000"
  },
  {
    "text": "code that's running for a longer period",
    "start": "42000",
    "end": "44320"
  },
  {
    "text": "than is set on the function's timeout",
    "start": "44320",
    "end": "46160"
  },
  {
    "text": "limit for example if your function",
    "start": "46160",
    "end": "48480"
  },
  {
    "text": "duration is 10 seconds but your timeout",
    "start": "48480",
    "end": "50719"
  },
  {
    "text": "limit is set to 5 seconds then you",
    "start": "50719",
    "end": "52960"
  },
  {
    "text": "experience a timeout error if this",
    "start": "52960",
    "end": "55360"
  },
  {
    "text": "happens it's a best practice to modify",
    "start": "55360",
    "end": "57760"
  },
  {
    "text": "your function code so that it can",
    "start": "57760",
    "end": "59440"
  },
  {
    "text": "complete within the timeout period note",
    "start": "59440",
    "end": "62160"
  },
  {
    "text": "that you can increase the function",
    "start": "62160",
    "end": "63680"
  },
  {
    "text": "timeout limit temporarily if your use",
    "start": "63680",
    "end": "66159"
  },
  {
    "text": "case allows for it",
    "start": "66159",
    "end": "68640"
  },
  {
    "start": "68000",
    "end": "134000"
  },
  {
    "text": "to change a function's timeout limit",
    "start": "68640",
    "end": "71600"
  },
  {
    "text": "open the functions page of the lambda",
    "start": "71600",
    "end": "73520"
  },
  {
    "text": "console",
    "start": "73520",
    "end": "75439"
  },
  {
    "text": "choose a function",
    "start": "75439",
    "end": "77920"
  },
  {
    "text": "choose configuration",
    "start": "77920",
    "end": "81119"
  },
  {
    "text": "choose general configuration",
    "start": "81119",
    "end": "83280"
  },
  {
    "text": "the function's general configuration",
    "start": "83280",
    "end": "84960"
  },
  {
    "text": "will appear",
    "start": "84960",
    "end": "86560"
  },
  {
    "text": "choose edit",
    "start": "86560",
    "end": "89280"
  },
  {
    "text": "in the timeout field enter the desired",
    "start": "90000",
    "end": "92320"
  },
  {
    "text": "value",
    "start": "92320",
    "end": "93920"
  },
  {
    "text": "then save to deploy changes",
    "start": "93920",
    "end": "97280"
  },
  {
    "text": "one thing that you can do to",
    "start": "97280",
    "end": "98560"
  },
  {
    "text": "troubleshoot issues with the lambda",
    "start": "98560",
    "end": "100159"
  },
  {
    "text": "function is to look at the function",
    "start": "100159",
    "end": "101759"
  },
  {
    "text": "execution logs to determine if there are",
    "start": "101759",
    "end": "104000"
  },
  {
    "text": "any specific errors",
    "start": "104000",
    "end": "106079"
  },
  {
    "text": "based on the logs you might determine",
    "start": "106079",
    "end": "107920"
  },
  {
    "text": "that you are facing the issue either",
    "start": "107920",
    "end": "109759"
  },
  {
    "text": "intermittently or consistently",
    "start": "109759",
    "end": "113360"
  },
  {
    "text": "note that when lambda function",
    "start": "113360",
    "end": "114799"
  },
  {
    "text": "invocation times out a task timed out",
    "start": "114799",
    "end": "117439"
  },
  {
    "text": "error message appears in the fail",
    "start": "117439",
    "end": "119439"
  },
  {
    "text": "invocations amazon cloudwatch logs and",
    "start": "119439",
    "end": "121840"
  },
  {
    "text": "not an error message if you search your",
    "start": "121840",
    "end": "124399"
  },
  {
    "text": "functions cloudwatch logs for error",
    "start": "124399",
    "end": "126000"
  },
  {
    "text": "messages only then the search returns",
    "start": "126000",
    "end": "128319"
  },
  {
    "text": "only code related runtime errors and not",
    "start": "128319",
    "end": "130879"
  },
  {
    "text": "invocation timeout errors",
    "start": "130879",
    "end": "133840"
  },
  {
    "text": "open the functions page of the lambda",
    "start": "133840",
    "end": "135680"
  },
  {
    "start": "134000",
    "end": "183000"
  },
  {
    "text": "console",
    "start": "135680",
    "end": "137360"
  },
  {
    "text": "choose a function",
    "start": "137360",
    "end": "139840"
  },
  {
    "text": "choose",
    "start": "139840",
    "end": "140840"
  },
  {
    "text": "monitor",
    "start": "140840",
    "end": "142480"
  },
  {
    "text": "choose view logs in cloudwatch the",
    "start": "142480",
    "end": "144800"
  },
  {
    "text": "functions log group details page opens",
    "start": "144800",
    "end": "146800"
  },
  {
    "text": "in the cloudwatch console",
    "start": "146800",
    "end": "149360"
  },
  {
    "text": "choose view in logs and sites",
    "start": "149360",
    "end": "152959"
  },
  {
    "text": "in the logs inside security text box",
    "start": "152959",
    "end": "155440"
  },
  {
    "text": "enter the following query and choose run",
    "start": "155440",
    "end": "159360"
  },
  {
    "text": "if you are seeing intermittent timeout",
    "start": "159360",
    "end": "161120"
  },
  {
    "text": "errors then note that sometimes",
    "start": "161120",
    "end": "163040"
  },
  {
    "text": "transient network errors happen and you",
    "start": "163040",
    "end": "165040"
  },
  {
    "text": "might need to catch and retry your",
    "start": "165040",
    "end": "166720"
  },
  {
    "text": "requests within your code as part of",
    "start": "166720",
    "end": "168720"
  },
  {
    "text": "your error handling process",
    "start": "168720",
    "end": "170800"
  },
  {
    "text": "additionally if you see dns errors",
    "start": "170800",
    "end": "173440"
  },
  {
    "text": "verify that you can resolve endpoints",
    "start": "173440",
    "end": "175280"
  },
  {
    "text": "before retrying",
    "start": "175280",
    "end": "177760"
  },
  {
    "text": "for consistent timeout errors where all",
    "start": "177760",
    "end": "179599"
  },
  {
    "text": "requests fail you can check for a few",
    "start": "179599",
    "end": "181599"
  },
  {
    "text": "things in your vpc network first go to",
    "start": "181599",
    "end": "184319"
  },
  {
    "start": "183000",
    "end": "278000"
  },
  {
    "text": "the amazon virtual private cloud console",
    "start": "184319",
    "end": "186319"
  },
  {
    "text": "and find your vpc after you locate your",
    "start": "186319",
    "end": "188720"
  },
  {
    "text": "vpc there are several steps you can take",
    "start": "188720",
    "end": "191120"
  },
  {
    "text": "depending on whether you have a private",
    "start": "191120",
    "end": "192720"
  },
  {
    "text": "database or a public database",
    "start": "192720",
    "end": "196239"
  },
  {
    "text": "for private database where your lambda",
    "start": "196239",
    "end": "198080"
  },
  {
    "text": "function is in another vpc you must",
    "start": "198080",
    "end": "200400"
  },
  {
    "text": "confirm the connectivity between the two",
    "start": "200400",
    "end": "202480"
  },
  {
    "text": "vpcs",
    "start": "202480",
    "end": "203920"
  },
  {
    "text": "because it's a best practice to use vpc",
    "start": "203920",
    "end": "206239"
  },
  {
    "text": "pairing verify that vpc pairing is set",
    "start": "206239",
    "end": "209120"
  },
  {
    "text": "up correctly",
    "start": "209120",
    "end": "211200"
  },
  {
    "text": "you can also place the lambda function",
    "start": "211200",
    "end": "213200"
  },
  {
    "text": "in the same vpc for testing purposes",
    "start": "213200",
    "end": "217280"
  },
  {
    "text": "for a public database where your lambda",
    "start": "217280",
    "end": "219120"
  },
  {
    "text": "function is in a vpc you must verify",
    "start": "219120",
    "end": "221840"
  },
  {
    "text": "that your lambda function can send",
    "start": "221840",
    "end": "223360"
  },
  {
    "text": "requests to the public internet",
    "start": "223360",
    "end": "225680"
  },
  {
    "text": "you can do this by confirming that the",
    "start": "225680",
    "end": "227440"
  },
  {
    "text": "lambda subnet has a default route to a",
    "start": "227440",
    "end": "229440"
  },
  {
    "text": "nat gateway in a public subnet",
    "start": "229440",
    "end": "232959"
  },
  {
    "text": "for testing purposes we can also remove",
    "start": "232959",
    "end": "235120"
  },
  {
    "text": "the lambda function from the custom vpc",
    "start": "235120",
    "end": "237519"
  },
  {
    "text": "if possible",
    "start": "237519",
    "end": "239040"
  },
  {
    "text": "if everything looks good so far then we",
    "start": "239040",
    "end": "241360"
  },
  {
    "text": "can take a look at the security groups",
    "start": "241360",
    "end": "243599"
  },
  {
    "text": "for a private database verify that you",
    "start": "243599",
    "end": "245760"
  },
  {
    "text": "have an inbound rule allowing traffic",
    "start": "245760",
    "end": "247760"
  },
  {
    "text": "from the subnet your lambda function is",
    "start": "247760",
    "end": "249680"
  },
  {
    "text": "configured in",
    "start": "249680",
    "end": "251519"
  },
  {
    "text": "note that this also applies where your",
    "start": "251519",
    "end": "253439"
  },
  {
    "text": "lambda and database are in the same vpc",
    "start": "253439",
    "end": "257440"
  },
  {
    "text": "for public database where lambda is in a",
    "start": "257440",
    "end": "259359"
  },
  {
    "text": "vpc verify you have an inbound rule that",
    "start": "259359",
    "end": "261919"
  },
  {
    "text": "allows traffic from the nat gateway of",
    "start": "261919",
    "end": "264000"
  },
  {
    "text": "your lambda's vpc",
    "start": "264000",
    "end": "266800"
  },
  {
    "text": "finally some additional recommendations",
    "start": "266800",
    "end": "268880"
  },
  {
    "text": "are",
    "start": "268880",
    "end": "269840"
  },
  {
    "text": "set up the database connection outside",
    "start": "269840",
    "end": "271759"
  },
  {
    "text": "the lambda handler",
    "start": "271759",
    "end": "273280"
  },
  {
    "text": "by doing this you can reuse connections",
    "start": "273280",
    "end": "275520"
  },
  {
    "text": "if the same container is reused on",
    "start": "275520",
    "end": "277840"
  },
  {
    "text": "subsequent executions",
    "start": "277840",
    "end": "279840"
  },
  {
    "start": "278000",
    "end": "314000"
  },
  {
    "text": "again it's a best practice that you",
    "start": "279840",
    "end": "282000"
  },
  {
    "text": "confirm that there is a valid connection",
    "start": "282000",
    "end": "284000"
  },
  {
    "text": "before attempting to send requests",
    "start": "284000",
    "end": "286720"
  },
  {
    "text": "note that this example code is for",
    "start": "286720",
    "end": "288479"
  },
  {
    "text": "demonstrating the concept of connection",
    "start": "288479",
    "end": "290720"
  },
  {
    "text": "reuse",
    "start": "290720",
    "end": "292320"
  },
  {
    "text": "it is not code that can be used in",
    "start": "292320",
    "end": "294320"
  },
  {
    "text": "testing development or production",
    "start": "294320",
    "end": "296639"
  },
  {
    "text": "environments",
    "start": "296639",
    "end": "298720"
  },
  {
    "text": "you can also use the amazon rds proxy",
    "start": "298720",
    "end": "301360"
  },
  {
    "text": "service to handle the connections to",
    "start": "301360",
    "end": "303120"
  },
  {
    "text": "your database for you",
    "start": "303120",
    "end": "306080"
  },
  {
    "text": "and now you know how to troubleshoot",
    "start": "306080",
    "end": "307759"
  },
  {
    "text": "timeout errors from aws lambda when",
    "start": "307759",
    "end": "310080"
  },
  {
    "text": "trying to access an amazon rds database",
    "start": "310080",
    "end": "312320"
  },
  {
    "text": "instance",
    "start": "312320",
    "end": "314160"
  },
  {
    "start": "314000",
    "end": "328000"
  },
  {
    "text": "thanks for watching and happy cloud",
    "start": "314160",
    "end": "315600"
  },
  {
    "text": "computing from all of us here at aws",
    "start": "315600",
    "end": "318910"
  },
  {
    "text": "[Applause]",
    "start": "318910",
    "end": "320670"
  },
  {
    "text": "[Music]",
    "start": "320670",
    "end": "323829"
  },
  {
    "text": "[Music]",
    "start": "325870",
    "end": "327199"
  },
  {
    "text": "you",
    "start": "327199",
    "end": "329280"
  }
]