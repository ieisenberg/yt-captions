[
  {
    "text": "hello welcome to a few milliseconds in the life of an HTTP request I'm Georgie",
    "start": "30",
    "end": "7589"
  },
  {
    "text": "Vasquez an engineer if Amazon CloudFront here is my friend Tina Tran senior",
    "start": "7589",
    "end": "13460"
  },
  {
    "text": "software solution Erica taught with edge services you'll be joining us in a few",
    "start": "13460",
    "end": "19980"
  },
  {
    "text": "moments to talk the end of the session thanks for staying with us until 5 p.m.",
    "start": "19980",
    "end": "25769"
  },
  {
    "text": "today and skip in the happy hour we do our best to make it worth your time ok",
    "start": "25769",
    "end": "35070"
  },
  {
    "text": "this is what we have for today first we'll go through an overview of",
    "start": "35070",
    "end": "42030"
  },
  {
    "text": "the CloudFront edge network then we'll talk about the first step in the",
    "start": "42030",
    "end": "48450"
  },
  {
    "text": "lifecycle of an HTTP request which is actually a DNS request in a CDN like",
    "start": "48450",
    "end": "56160"
  },
  {
    "text": "Amazon CloudFront there is much more to a DNS request in a simple hosted zone lookup we're going to go into details",
    "start": "56160",
    "end": "63300"
  },
  {
    "text": "about it next we'll look into TCP and TLS these protocols form the base the",
    "start": "63300",
    "end": "71430"
  },
  {
    "text": "roadway over which your by its flow between CloudFront and your users after",
    "start": "71430",
    "end": "78990"
  },
  {
    "text": "that will pop up the hood inside a cloud front edge location and look at every",
    "start": "78990",
    "end": "85020"
  },
  {
    "text": "single component there is in there and how they affect your requests next Tino",
    "start": "85020",
    "end": "91799"
  },
  {
    "text": "is going to come up and he's going to talk about all the clouds from layers and what functionalities they provide in",
    "start": "91799",
    "end": "97920"
  },
  {
    "text": "order to make sure you deliver your content your viewers the way you intended to so this is the cloud front",
    "start": "97920",
    "end": "106890"
  },
  {
    "text": "Network today we have a hundred and eighty seven locations worldwide a week",
    "start": "106890",
    "end": "113399"
  },
  {
    "text": "ago when we first submitted this slides to people who approved them before we can show them to you we had 180 so today",
    "start": "113399",
    "end": "120270"
  },
  {
    "text": "in the morning I had to go back and make a last-minute edit to add seven more yeah last November when I gave a talk at",
    "start": "120270",
    "end": "128280"
  },
  {
    "text": "reinvent in Las Vegas we had 150 one year before that",
    "start": "128280",
    "end": "133480"
  },
  {
    "text": "seven so in one and a half years we've added 100 more pops it is a lot out of",
    "start": "133480",
    "end": "141280"
  },
  {
    "text": "this 187 we have 176 points of presence",
    "start": "141280",
    "end": "146650"
  },
  {
    "text": "by the way you saw me saying pop already this is a CDN lingo it stands for a",
    "start": "146650",
    "end": "152980"
  },
  {
    "text": "point of presence I promise this is the only acronym I will try to say here so",
    "start": "152980",
    "end": "160349"
  },
  {
    "text": "176 pops in 69 cities in 30 countries and 11 regional edge caches just makes",
    "start": "160349",
    "end": "168760"
  },
  {
    "text": "up the edge network these locations they're all connected via the Amazon",
    "start": "168760",
    "end": "174010"
  },
  {
    "text": "backbone this is very important because unlike the public Internet we manage our",
    "start": "174010",
    "end": "180099"
  },
  {
    "text": "backbone in a way that it's not congested during peak hours for example",
    "start": "180099",
    "end": "185380"
  },
  {
    "text": "the international links the one that goes undersea between us is in Europe",
    "start": "185380",
    "end": "191790"
  },
  {
    "text": "get congested every single day when it's big time in Europe between 9 and 11 p.m.",
    "start": "191790",
    "end": "198100"
  },
  {
    "text": "when kids are in bed and mom and dad are watching Netflix they always get congested so ours does not and by using",
    "start": "198100",
    "end": "205690"
  },
  {
    "text": "cloud phones you get advantage you got to use our backbone so imagine you have",
    "start": "205690",
    "end": "212350"
  },
  {
    "text": "this application which is about delivering beautiful pictures to your users this one I'm proud of I took it",
    "start": "212350",
    "end": "219069"
  },
  {
    "text": "myself in Lake Crescent Washington near Seattle using my phone and I'm",
    "start": "219069",
    "end": "224410"
  },
  {
    "text": "delivering that to my users what happens from the moment the URL is entered on the browser until the moment the browser",
    "start": "224410",
    "end": "230889"
  },
  {
    "text": "has all the bytes it needs to render the image on the screen so as I told you before it all starts with a DNS request",
    "start": "230889",
    "end": "239370"
  },
  {
    "text": "the request goes from the browser to the DNS server inside the ISP the company",
    "start": "239370",
    "end": "246099"
  },
  {
    "text": "that you buy internet from AT&T Comcast Verizon right this is P resolver it's",
    "start": "246099",
    "end": "251919"
  },
  {
    "text": "called the recursive resolver because it goes from right to left resolving every",
    "start": "251919",
    "end": "257919"
  },
  {
    "text": "single component of that name so first it tries to find what is the name server for comm then it tries to find what is",
    "start": "257919",
    "end": "265479"
  },
  {
    "text": "the name server for a few milliseconds that one will be Amazon route 53 of course but Roz will t treat cannot",
    "start": "265479",
    "end": "272650"
  },
  {
    "text": "resolve that by itself because as I told you before our DNS is dynamic its life so it sends this request to CloudFront",
    "start": "272650",
    "end": "281830"
  },
  {
    "text": "this time it translated that beautiful name into the actual distribution this",
    "start": "281830",
    "end": "287010"
  },
  {
    "text": "unpronounceable name that which is our cloud from DNS system which will find",
    "start": "287010",
    "end": "292990"
  },
  {
    "text": "out what is the best point of presence the best pop and give out an IP address of that pop back to rot 53 which would",
    "start": "292990",
    "end": "302080"
  },
  {
    "text": "then just replay that information to the ESP DNS was over which should then relay",
    "start": "302080",
    "end": "307180"
  },
  {
    "text": "it back to the user the ISP DNS was over is also caching was over in case of",
    "start": "307180",
    "end": "313000"
  },
  {
    "text": "cloud front responses it gets to cache that response for up to a minute that",
    "start": "313000",
    "end": "318340"
  },
  {
    "text": "improves performance because now every single request has to go back to our infrastructure the is peer is over can",
    "start": "318340",
    "end": "325150"
  },
  {
    "text": "respond the same one up to a minute by the way the reason we only allow these things to be cached for a minute is",
    "start": "325150",
    "end": "332020"
  },
  {
    "text": "because we reserve the right to change these IP addresses so we can take pops in and out of service we can manage",
    "start": "332020",
    "end": "337510"
  },
  {
    "text": "traffic and we can always be available for your customers okay the browser has the IP address now is",
    "start": "337510",
    "end": "344800"
  },
  {
    "text": "the thing we all know how it works TCP connection TLS session optionally",
    "start": "344800",
    "end": "349979"
  },
  {
    "text": "HTTP request cloud font reads the image sends it back to the browser so what's",
    "start": "349979",
    "end": "357580"
  },
  {
    "text": "in DNS why is it so complicated I gave a whole session about that at reinvent",
    "start": "357580",
    "end": "362740"
  },
  {
    "text": "2017 you can look for look it up on YouTube it's there in which I explain",
    "start": "362740",
    "end": "368710"
  },
  {
    "text": "how this work it's called measuring the Internet in real time why do I save that measuring",
    "start": "368710",
    "end": "374830"
  },
  {
    "text": "the internet in real time it seems like a simple job for every resolver on the Internet if you go out the best pop",
    "start": "374830",
    "end": "380890"
  },
  {
    "text": "right we have geolocation services these days right figure out the closest one and be done there is more than that we",
    "start": "380890",
    "end": "388210"
  },
  {
    "text": "take all these factors into consideration first performance we don't",
    "start": "388210",
    "end": "393280"
  },
  {
    "text": "just do geolocation because it turns out your location is not so good for the",
    "start": "393280",
    "end": "398800"
  },
  {
    "text": "worse 20% of you aproximately that's how we started a cloud front 11 years ago but we quickly",
    "start": "398800",
    "end": "405130"
  },
  {
    "text": "switched a different system in which we actually measure the performance from every network to every single one of our",
    "start": "405130",
    "end": "412270"
  },
  {
    "text": "pops we also take into consideration up health server capacity I come with CPU",
    "start": "412270",
    "end": "419050"
  },
  {
    "text": "is free on that server IO capacity and then network capacity right we don't want to send traffic to a congested pipe",
    "start": "419050",
    "end": "425650"
  },
  {
    "text": "so we have to take all that into consideration and we do that in real time so that if conditions change",
    "start": "425650",
    "end": "431950"
  },
  {
    "text": "we also steer traffic one way or another to always keep your users having the",
    "start": "431950",
    "end": "437650"
  },
  {
    "text": "best possible experience so this is interesting how is it that we measure the latency from every network in the",
    "start": "437650",
    "end": "444880"
  },
  {
    "text": "world to every single one of our pops when I say every network in the world I",
    "start": "444880",
    "end": "450190"
  },
  {
    "text": "mean every single ipv4 network that is approximately 12 million networks and we",
    "start": "450190",
    "end": "455680"
  },
  {
    "text": "get more than a billion of these requests every day to for measurement only more than a billion synthetic",
    "start": "455680",
    "end": "461919"
  },
  {
    "text": "requests so we get these requests and when a TCP connection is established we just measure the TCP handshake",
    "start": "461919",
    "end": "468750"
  },
  {
    "text": "remember the TCP handshake from school the same one the 3-way handshake syn syn",
    "start": "468750",
    "end": "474520"
  },
  {
    "text": "ack ack between the moment we send the syn syn ack and the moment we get the",
    "start": "474520",
    "end": "480640"
  },
  {
    "text": "ACK this is the handshake time we have one data point there and have more than",
    "start": "480640",
    "end": "486250"
  },
  {
    "text": "a billion of those every day this is important because this allows us to route around congestion regardless of",
    "start": "486250",
    "end": "493120"
  },
  {
    "text": "where this congestion is sometimes these congestions this congestion is between",
    "start": "493120",
    "end": "498490"
  },
  {
    "text": "us and another network sometimes it's deep inside another network so by measuring latency when it goes up",
    "start": "498490",
    "end": "504540"
  },
  {
    "text": "immediately we route around it to a best a better path if there is such a thing as a bad better path think of it as ways",
    "start": "504540",
    "end": "512320"
  },
  {
    "text": "for the Internet that's pretty much what we do okay next the roadway of the",
    "start": "512320",
    "end": "520390"
  },
  {
    "text": "Internet so this is a big connection right as I",
    "start": "520390",
    "end": "529110"
  },
  {
    "text": "said before TCP is this boring protocol",
    "start": "529110",
    "end": "537270"
  },
  {
    "text": "we learned about in school and take for granted ever since right so what's",
    "start": "537270",
    "end": "543900"
  },
  {
    "text": "special about it so what's special about it is that it adds this extra round-trip",
    "start": "543900",
    "end": "548970"
  },
  {
    "text": "at the beginning of every single connection you have the first round trip to establish a TCP connection and the",
    "start": "548970",
    "end": "555510"
  },
  {
    "text": "next one is the one you can never avoid which is send the request get the response that one is unavoidable but we",
    "start": "555510",
    "end": "561180"
  },
  {
    "text": "have this extra one that is not adding value to the user other than the security characteristic",
    "start": "561180",
    "end": "567630"
  },
  {
    "text": "it it has which is the fact that it prevents a type of attack called",
    "start": "567630",
    "end": "573270"
  },
  {
    "text": "reflection attack a reflection attack is the type of attack we saw last year for",
    "start": "573270",
    "end": "579030"
  },
  {
    "text": "example with memcache D in which someone sent a new DP packet to an open memcache",
    "start": "579030",
    "end": "584460"
  },
  {
    "text": "D on the Internet and that memcache the server would spew megabytes of data to whatever was the source IP address on",
    "start": "584460",
    "end": "591780"
  },
  {
    "text": "that IP packet the problem is the source IP address is suitable so I set the",
    "start": "591780",
    "end": "598350"
  },
  {
    "text": "source IP address to the victim send it to the memcache T and the victim gets",
    "start": "598350",
    "end": "603780"
  },
  {
    "text": "attacked without me using any resources that's why it's called a reflection attack you don't want a CDN to be doing",
    "start": "603780",
    "end": "611100"
  },
  {
    "text": "that because the CDN has very fat pipes connecting to every single other network so it would be a very potent vector for",
    "start": "611100",
    "end": "619860"
  },
  {
    "text": "a reflection attack so TCP rescues us for that but it penalizes us by adding",
    "start": "619860",
    "end": "625830"
  },
  {
    "text": "one extra round-trip so what can we do about it turns out CloudFront supports a",
    "start": "625830",
    "end": "630960"
  },
  {
    "text": "protocol called TCP fast open which allows the client to send the data",
    "start": "630960",
    "end": "636600"
  },
  {
    "text": "together with the same packet send the request to gather at the same packet there by shaving off this first request",
    "start": "636600",
    "end": "643530"
  },
  {
    "text": "how can we do that and still be secure TCP fast open works like this on the first time client",
    "start": "643530",
    "end": "651660"
  },
  {
    "text": "connects to a server it sends an information saying I want to do TCP",
    "start": "651660",
    "end": "657320"
  },
  {
    "text": "to open on the next connection the server then we encrypt the IP address of",
    "start": "657320",
    "end": "662930"
  },
  {
    "text": "the client as it says with key only known to that server and send it back to",
    "start": "662930",
    "end": "669020"
  },
  {
    "text": "the client it's called a cookie from the clients point of view this is just a random number it has to hold on to next",
    "start": "669020",
    "end": "676370"
  },
  {
    "text": "time the client comes it sends the syn the cookie and the data the server then",
    "start": "676370",
    "end": "682850"
  },
  {
    "text": "decrypt that cookie it matches the IP address it's good it's a client I have been talking to before",
    "start": "682850",
    "end": "688460"
  },
  {
    "text": "so it's not a random guy spoofing an IP address on internet so I can accept it",
    "start": "688460",
    "end": "694430"
  },
  {
    "text": "request and send the data back so that saves one full round-trip around 20",
    "start": "694430",
    "end": "700220"
  },
  {
    "text": "milliseconds out of every single request except the first one this is available today you can modify your applications",
    "start": "700220",
    "end": "707210"
  },
  {
    "text": "to support that and you get it on cloud front next is TLS transport layer",
    "start": "707210",
    "end": "714530"
  },
  {
    "text": "security the security part is about",
    "start": "714530",
    "end": "723350"
  },
  {
    "text": "three important things first one is the one we all think about first when we say",
    "start": "723350",
    "end": "729350"
  },
  {
    "text": "security which is secrecy so in the scenario where you are using public",
    "start": "729350",
    "end": "734690"
  },
  {
    "text": "Wi-Fi on a coffee shop you don't want the person on the next table to see your",
    "start": "734690",
    "end": "740240"
  },
  {
    "text": "credit card information when you're buying something from Amazon you don't want that the other one is identity you",
    "start": "740240",
    "end": "748130"
  },
  {
    "text": "want to be sure that you're giving your credit card information to Amazon and not to the guy in the next table that is",
    "start": "748130",
    "end": "755000"
  },
  {
    "text": "then forwarding to Amazon being a man in the middle attack you don't want that and finally the one will think about",
    "start": "755000",
    "end": "761510"
  },
  {
    "text": "laughs but it's also super important even though it has a lousy name is NaN replayability no repay ability is you",
    "start": "761510",
    "end": "769250"
  },
  {
    "text": "don't want to prime now purchase something get home and find two packages",
    "start": "769250",
    "end": "774380"
  },
  {
    "text": "you just just want one right so that's no replayability it's making it impossible for someone to copy that",
    "start": "774380",
    "end": "781250"
  },
  {
    "text": "request and send it again it simply does not work so what can cloud front do",
    "start": "781250",
    "end": "787370"
  },
  {
    "text": "about that first we are always on top of security features we",
    "start": "787370",
    "end": "792860"
  },
  {
    "text": "are lucky enough to get advance notification of most vulnerabilities so",
    "start": "792860",
    "end": "797930"
  },
  {
    "text": "when they get announced to the public usually close front is already patched so the so-called zero day attacks they",
    "start": "797930",
    "end": "805790"
  },
  {
    "text": "are protected from day zero we also make it easy to follow best practices so if",
    "start": "805790",
    "end": "811730"
  },
  {
    "text": "you want your website to have a triple-a rating green green green when you are evaluating your TLS implementation it's",
    "start": "811730",
    "end": "819470"
  },
  {
    "text": "fairly easy to do with cloud rogue just select the appropriate option on the drop-down finally if you work on an",
    "start": "819470",
    "end": "826910"
  },
  {
    "text": "industry which has compliance requirements like financial industries if you accept credit cards for example",
    "start": "826910",
    "end": "833660"
  },
  {
    "text": "you have to be PCI compliant you can just select the appropriate option in",
    "start": "833660",
    "end": "839270"
  },
  {
    "text": "the cloud phone console and boom CloudFront is PCI compliant for you you don't have to think about it any more",
    "start": "839270",
    "end": "844820"
  },
  {
    "text": "you just have to secure the rest of your application which is already a lot of work so let me talk about TLS",
    "start": "844820",
    "end": "852470"
  },
  {
    "text": "performance before I do that let me talk",
    "start": "852470",
    "end": "857540"
  },
  {
    "text": "about security in general security engineers have a very tough job the best",
    "start": "857540",
    "end": "863360"
  },
  {
    "text": "thing they can aspire to is to be invisible this is what I mean by it good",
    "start": "863360",
    "end": "869600"
  },
  {
    "text": "security is like one of these modern cars in which you have the key fob in your pocket touch the handle it unlocks",
    "start": "869600",
    "end": "877160"
  },
  {
    "text": "before you even pull the handle open and open the door it's fairly invisible",
    "start": "877160",
    "end": "882230"
  },
  {
    "text": "right if there was no locks if this door was always unlocked we just pull it same motion everything is the same except the",
    "start": "882230",
    "end": "889940"
  },
  {
    "text": "car was fully locked and fully secured before that great security bad security",
    "start": "889940",
    "end": "895430"
  },
  {
    "text": "is what I had to do when I flew in from Seattle to New York and went through airport security right that dropped by",
    "start": "895430",
    "end": "903920"
  },
  {
    "text": "an agent the nothing visible about that not at all right so how does that",
    "start": "903920",
    "end": "910370"
  },
  {
    "text": "translate to the CDN world how can security be visible in the CDN world well it turns out TLS adds latency to",
    "start": "910370",
    "end": "918830"
  },
  {
    "text": "every single session traditional TLS adds to Round three the first one is for the client in the",
    "start": "918830",
    "end": "926690"
  },
  {
    "text": "server to negotiate a protocol cryptographic algorithm an",
    "start": "926690",
    "end": "931940"
  },
  {
    "text": "authentication algorithm so all this negotiation takes one round trip the second one is the cryptographic exchange",
    "start": "931940",
    "end": "938810"
  },
  {
    "text": "itself that allows both parties to exchange keys securely and provide features like perfect forward secrecy so",
    "start": "938810",
    "end": "947350"
  },
  {
    "text": "again how can telephone make it better than that well there is a feature in TLS",
    "start": "947350",
    "end": "952550"
  },
  {
    "text": "called session resumption so just like TCP fest open when a client first",
    "start": "952550",
    "end": "958370"
  },
  {
    "text": "connects to a server it can ask the server for what is called a session ticket which is a bunch of key material",
    "start": "958370",
    "end": "965930"
  },
  {
    "text": "cryptographic key material encrypted in a way that only the server can decrypt again the client holds on to that data",
    "start": "965930",
    "end": "973000"
  },
  {
    "text": "saves it somewhere and when it connects again you can perform an abbreviated",
    "start": "973000",
    "end": "978440"
  },
  {
    "text": "handshake with the same security characteristics as the first one so if",
    "start": "978440",
    "end": "983630"
  },
  {
    "text": "you do it right you can shave out of the four round trips you had before you can",
    "start": "983630",
    "end": "989060"
  },
  {
    "text": "save one for TCP first open and one for TLS session resumption so out of the",
    "start": "989060",
    "end": "995300"
  },
  {
    "text": "three extra you can shave two and end up with a single one extra roundtrip that's a huge improvement in latency",
    "start": "995300",
    "end": "1002980"
  },
  {
    "text": "especially for customers that are on lousy networks like mobile networks okay",
    "start": "1002980",
    "end": "1010209"
  },
  {
    "text": "now let's look inside CloudFront like many good things in life cloud phone has layers and I'm sorry to",
    "start": "1010209",
    "end": "1017500"
  },
  {
    "text": "show you a cake this time you haven't already I don't know about you so this",
    "start": "1017500",
    "end": "1023740"
  },
  {
    "text": "is what's inside a pop the first pink circle there if the arrows is a router",
    "start": "1023740",
    "end": "1030000"
  },
  {
    "text": "every connection flows through that router and this router is important for us because we use a protocol called ecmp",
    "start": "1030000",
    "end": "1037300"
  },
  {
    "text": "which stands for equal cost multi path to spread TCP connections across all",
    "start": "1037300",
    "end": "1043270"
  },
  {
    "text": "these servers in yellow the layer 1 servers these servers are all with",
    "start": "1043270",
    "end": "1048520"
  },
  {
    "text": "Vivint their role is to terminate the TCP connection to establish a TLS",
    "start": "1048520",
    "end": "1053679"
  },
  {
    "text": "session and then if the content is very hot is a very popular content it has a small amount of",
    "start": "1053679",
    "end": "1061140"
  },
  {
    "text": "cash in the server and you can serve the content directly from this server audio server servers they end up having the",
    "start": "1061140",
    "end": "1068100"
  },
  {
    "text": "same content on their caches only the most popular content we keep it there so",
    "start": "1068100",
    "end": "1073140"
  },
  {
    "text": "it's faster for everybody if that one object is not super popular we go to the",
    "start": "1073140",
    "end": "1079200"
  },
  {
    "text": "layer 2 server you can see this arrow is pointing upward this is because this",
    "start": "1079200",
    "end": "1085760"
  },
  {
    "text": "content is in a single l2 server we use a method called consistent hashing to",
    "start": "1085760",
    "end": "1091170"
  },
  {
    "text": "select the outer server and that means that every single l1 will go to the same l2 server for the same object this is",
    "start": "1091170",
    "end": "1098790"
  },
  {
    "text": "important for CloudFront because this allows us to have more storage space for",
    "start": "1098790",
    "end": "1104790"
  },
  {
    "text": "your objects because every single server has different content if CloudFront has",
    "start": "1104790",
    "end": "1111150"
  },
  {
    "text": "never seen this object before it will select an ultra server based on the IP",
    "start": "1111150",
    "end": "1117630"
  },
  {
    "text": "address of your origin of the server where your data is the reason we do that",
    "start": "1117630",
    "end": "1123140"
  },
  {
    "text": "again if consistent hashing is to make sure we reuse these connections as much",
    "start": "1123140",
    "end": "1129360"
  },
  {
    "text": "as possible this is important because if you have a live connection back to your origin we",
    "start": "1129360",
    "end": "1135660"
  },
  {
    "text": "don't have to go through any of those round trips before sending the request and again and more importantly in this",
    "start": "1135660",
    "end": "1144200"
  },
  {
    "text": "leg of the request this lag might be very long you might very well have an",
    "start": "1144200",
    "end": "1150120"
  },
  {
    "text": "origin just in the US and have users all around the world your users will be connecting to pops very close to them",
    "start": "1150120",
    "end": "1156690"
  },
  {
    "text": "but this pops are going to be far away from your origin right so you want to",
    "start": "1156690",
    "end": "1161700"
  },
  {
    "text": "reuse these connections as much as possible ok",
    "start": "1161700",
    "end": "1167550"
  },
  {
    "text": "this little guy which looks very innocent is my son in January when he",
    "start": "1167550",
    "end": "1172620"
  },
  {
    "text": "turned 5 he looks innocent right but he's not here's what he's done he has",
    "start": "1172620",
    "end": "1180270"
  },
  {
    "text": "escaped layers right yeah it turns out I cannot be mad at him",
    "start": "1180270",
    "end": "1191070"
  },
  {
    "text": "because I always I also skip layers at work that's what I do for a living all",
    "start": "1191070",
    "end": "1196200"
  },
  {
    "text": "right so this is how a cloud phone is again and I expanded the layer 1 cache",
    "start": "1196200",
    "end": "1201990"
  },
  {
    "text": "servers in this two components the one that terminates the connection and the one that actually has the small cache I",
    "start": "1201990",
    "end": "1208350"
  },
  {
    "text": "mentioned before so for very popular content we go from the connection",
    "start": "1208350",
    "end": "1214080"
  },
  {
    "text": "termination part to the small cache server inside that that's right and we",
    "start": "1214080",
    "end": "1222149"
  },
  {
    "text": "serve directly back and that's it for content which is not popular we skip the",
    "start": "1222149",
    "end": "1227639"
  },
  {
    "text": "layer 1 cache we don't want this layer 1 cache to be used by non popular content",
    "start": "1227639",
    "end": "1233820"
  },
  {
    "text": "because that would mean we'd have to evict the popular content so we want to make sure only the very hard objects are",
    "start": "1233820",
    "end": "1240720"
  },
  {
    "text": "there because that makes this cache more efficient if the request that is being",
    "start": "1240720",
    "end": "1247169"
  },
  {
    "text": "served right now is a dynamic content dynamic request for example post request",
    "start": "1247169",
    "end": "1254460"
  },
  {
    "text": "or a request for which you have configured cloud for not to cache we don't even bother going to the cache",
    "start": "1254460",
    "end": "1261510"
  },
  {
    "text": "layers instead we go directly to this connection layer the layer 3 and finally",
    "start": "1261510",
    "end": "1268080"
  },
  {
    "text": "for very very hard content which is dynamic we skip all the other layers and",
    "start": "1268080",
    "end": "1274110"
  },
  {
    "text": "go directly to the origin we can do that because for very hard objects very hot content we can make sure that every",
    "start": "1274110",
    "end": "1281340"
  },
  {
    "text": "single one will have a persistent connection back to the origin so a very popular API for example would have all",
    "start": "1281340",
    "end": "1288240"
  },
  {
    "text": "through this path finally I'm going to",
    "start": "1288240",
    "end": "1293429"
  },
  {
    "text": "talk about the regional edge caches which change these architecture a little bit around two years ago we introduced a",
    "start": "1293429",
    "end": "1300389"
  },
  {
    "text": "new type of caches in our network called the regional edge caches at this point",
    "start": "1300389",
    "end": "1305549"
  },
  {
    "text": "we had approximately 80 pups so for every single object you start on the CDN",
    "start": "1305549",
    "end": "1312510"
  },
  {
    "text": "your origin could get around 80 requests one for every pop now",
    "start": "1312510",
    "end": "1319529"
  },
  {
    "text": "we have 180 87 as I told you 176 of th pops so is this starting to become a lot",
    "start": "1319529",
    "end": "1327240"
  },
  {
    "text": "of requests back to your origin especially if it's live content and you have all these different resolutions for",
    "start": "1327240",
    "end": "1334259"
  },
  {
    "text": "example you end up having gigabytes worth of load if you take all these pops",
    "start": "1334259",
    "end": "1339450"
  },
  {
    "text": "at the same time to your origin and that becomes expensive so to avoid that we",
    "start": "1339450",
    "end": "1345210"
  },
  {
    "text": "built a CDN for the CDN this is what the regional which gases are so the auto",
    "start": "1345210",
    "end": "1353100"
  },
  {
    "text": "cash instead of going through the l3 and then to the origin now goes to the",
    "start": "1353100",
    "end": "1359549"
  },
  {
    "text": "nearest edge cache imagine the situation where you have two users in Europe one",
    "start": "1359549",
    "end": "1366210"
  },
  {
    "text": "in Berlin makes a request it's a cache miss get your content from the US caches",
    "start": "1366210",
    "end": "1372600"
  },
  {
    "text": "it back now you have a user in Munich also in Germany makes a request you",
    "start": "1372600",
    "end": "1377909"
  },
  {
    "text": "don't want this user to have to wait for another request to the US you won't have to because this request will have flown",
    "start": "1377909",
    "end": "1384509"
  },
  {
    "text": "to the regional edge cash in Frankfurt just like the first one where it will see a cache hit",
    "start": "1384509",
    "end": "1390509"
  },
  {
    "text": "so that improves their heat head read hit rate and that reduces the load of",
    "start": "1390509",
    "end": "1397200"
  },
  {
    "text": "your origin in CloudFront we don't charge you for that that's part of every single distribution the regional edge",
    "start": "1397200",
    "end": "1402990"
  },
  {
    "text": "caches and with that I pass the ball to Tino",
    "start": "1402990",
    "end": "1410240"
  },
  {
    "text": "can we get some audio oh there we go awesome all right thanks Georgie so now that",
    "start": "1414350",
    "end": "1421950"
  },
  {
    "text": "we've shown you how CloudFront optimizes for latency with our tcp optimizations",
    "start": "1421950",
    "end": "1427140"
  },
  {
    "text": "and our dns based routing let's take a deeper look into the request flow to see",
    "start": "1427140",
    "end": "1432270"
  },
  {
    "text": "what happens when that request lands on it claude front edge location right to pick up where we left off",
    "start": "1432270",
    "end": "1438510"
  },
  {
    "text": "we'll start with layer one right so layer one is our tcp and SSL termination layer we also do popular object but",
    "start": "1438510",
    "end": "1446580"
  },
  {
    "text": "ultimately it's actually a lot more important than that because it's the front door to the AWS network when",
    "start": "1446580",
    "end": "1451710"
  },
  {
    "text": "you're using Amazon Cloud front-right this is where we determine what distribution is served based off of the",
    "start": "1451710",
    "end": "1457590"
  },
  {
    "text": "host header that comes in on the request we also decide how to act on that request based off of the configurations",
    "start": "1457590",
    "end": "1463380"
  },
  {
    "text": "that you would use when you configure CloudFront right it's also where we implement most of our security features",
    "start": "1463380",
    "end": "1468840"
  },
  {
    "text": "which is critical to making sure that we serve your content to their correct users so Cloud Print actually has a",
    "start": "1468840",
    "end": "1479429"
  },
  {
    "text": "large number of security features built in but in this session we're going to talk about four of the more involved ones that we see our customers implement",
    "start": "1479429",
    "end": "1486899"
  },
  {
    "text": "commonly the first one I'm going to talk about is signed URLs and I'm gonna go through this and the order for which we",
    "start": "1486899",
    "end": "1493289"
  },
  {
    "text": "process the request as it lands in our l1 on our edge location right so inside",
    "start": "1493289",
    "end": "1502950"
  },
  {
    "text": "of Amazon we have this monthly ritual where you get an email you click on a",
    "start": "1502950",
    "end": "1509039"
  },
  {
    "text": "link and it says hey you're out of compliance we need you to complete this training course you need to learn about",
    "start": "1509039",
    "end": "1515190"
  },
  {
    "text": "how to properly handle security internally you need to watch training videos you need to take a pop quiz and",
    "start": "1515190",
    "end": "1522570"
  },
  {
    "text": "it's something that every Amazon employee is just so excited to do every month right I'm sure you guys can relate",
    "start": "1522570",
    "end": "1528559"
  },
  {
    "text": "so one of the caveats of that is when you're delivering these videos you have to ensure that only Amazon video or",
    "start": "1528559",
    "end": "1534750"
  },
  {
    "text": "Amazon employers can access the content right we have employees distributed",
    "start": "1534750",
    "end": "1540090"
  },
  {
    "text": "across the whole globe in that you know these these videos are not sort",
    "start": "1540090",
    "end": "1545639"
  },
  {
    "text": "the outside of our user base so one way of accomplishing this is with side URLs",
    "start": "1545639",
    "end": "1552349"
  },
  {
    "text": "right in this model CloudFront will give you a private key that you can actually sign to requests with to ensure that you",
    "start": "1552349",
    "end": "1560820"
  },
  {
    "text": "know you're handing out valid urls to users who are intended to be served this object this content right we give you",
    "start": "1560820",
    "end": "1568859"
  },
  {
    "text": "the key we hold on the public the private key we hold on the public key and we validate that at the edge so once",
    "start": "1568859",
    "end": "1575190"
  },
  {
    "text": "your users have authenticated to your authentication server you may have metadata serve that hands back a URL to",
    "start": "1575190",
    "end": "1582450"
  },
  {
    "text": "the content that has a signature on it Clawd front will validate the signature at the edge location if it's a valid",
    "start": "1582450",
    "end": "1588989"
  },
  {
    "text": "signature we'll go ahead and return the content if it's not then we'll 4:03 the",
    "start": "1588989",
    "end": "1593999"
  },
  {
    "text": "user and send them away you know forbidden don't access this when you create a signed URL you",
    "start": "1593999",
    "end": "1600479"
  },
  {
    "text": "actually specify a policy to declare where the user can access the content",
    "start": "1600479",
    "end": "1606329"
  },
  {
    "text": "from how long the URL is valid for in this case we have a condition that says",
    "start": "1606329",
    "end": "1612509"
  },
  {
    "text": "hey for this IP range and between these times this URL can be used right when",
    "start": "1612509",
    "end": "1618749"
  },
  {
    "text": "you actually implement that this is what the signature looks like you get all of the standard attributes of the your your",
    "start": "1618749",
    "end": "1625950"
  },
  {
    "text": "request Allah you know your eye path domain query string parameters but then",
    "start": "1625950",
    "end": "1631649"
  },
  {
    "text": "you also have an appended three additional parameters to specify the policy the signature as well as the key",
    "start": "1631649",
    "end": "1639450"
  },
  {
    "text": "pair ID right with signed URLs we use asymmetric encryption so as I mentioned",
    "start": "1639450",
    "end": "1644969"
  },
  {
    "text": "before it's public private key pairs so next after sign URLs this process right",
    "start": "1644969",
    "end": "1652019"
  },
  {
    "text": "so the first thing that happens when it lands on l1 is we terminate TCP terminated SSL we check to see if we can",
    "start": "1652019",
    "end": "1659429"
  },
  {
    "text": "hand serve the content to the specific user the next feature that will process",
    "start": "1659429",
    "end": "1664499"
  },
  {
    "text": "if you have it configured is called field level encryption right and it the",
    "start": "1664499",
    "end": "1669959"
  },
  {
    "text": "interesting thing about field level encryption is it's a it's a future that allows you to handle sensitive data with",
    "start": "1669959",
    "end": "1675209"
  },
  {
    "text": "care as we see more organizations move towards this microservices mall where",
    "start": "1675209",
    "end": "1681330"
  },
  {
    "text": "you have lots of teams managing their independent services upstream requests get passed from service to service",
    "start": "1681330",
    "end": "1687000"
  },
  {
    "text": "upstream and along the way maybe only one or two or the very last service and",
    "start": "1687000",
    "end": "1692460"
  },
  {
    "text": "that chain of requests are of services really actually needs to handle the data or view the data right when you're",
    "start": "1692460",
    "end": "1699960"
  },
  {
    "text": "dealing with sensitive data this becomes even more critical right imagine a case where you know what happens when one of",
    "start": "1699960",
    "end": "1706799"
  },
  {
    "text": "these micro services actually has an issue and the developer needs to debug",
    "start": "1706799",
    "end": "1711929"
  },
  {
    "text": "what's the first thing that you usually do turn on trace logging right if that",
    "start": "1711929",
    "end": "1717149"
  },
  {
    "text": "request contains credit card information guess what now you know in Amazon we",
    "start": "1717149",
    "end": "1723149"
  },
  {
    "text": "have pagers your pager goes off and you go you take your team through a whole log scrubbing exercise just to make sure",
    "start": "1723149",
    "end": "1730919"
  },
  {
    "text": "that you can stay compliant right and this brings the level of scrutiny that each of one of these micro services has",
    "start": "1730919",
    "end": "1736110"
  },
  {
    "text": "to you know the level that is required to achieve certain compliances such as PCI compliance with field level",
    "start": "1736110",
    "end": "1743070"
  },
  {
    "text": "encryption you can actually tell cloud front to encrypt this parameter in this example we use a credit card in number",
    "start": "1743070",
    "end": "1749730"
  },
  {
    "text": "right at the edge before it's passed upstream to these micro services down the shame only the very last service in",
    "start": "1749730",
    "end": "1757860"
  },
  {
    "text": "this in the upstream that actually needs to read the credit-card information such as a payment server would have the",
    "start": "1757860",
    "end": "1765000"
  },
  {
    "text": "decryption key that's used to decrypt the value and continue on processing so",
    "start": "1765000",
    "end": "1772379"
  },
  {
    "text": "here's an example of a forum post right you have your typical HTTP headers and then you have a couple parameters a user",
    "start": "1772379",
    "end": "1779129"
  },
  {
    "text": "ID and a credit card number if you configure field level encryption what we'll actually do is parse the request",
    "start": "1779129",
    "end": "1786240"
  },
  {
    "text": "body for the credit card number of parameter that you would specify and then we would replace the value with the",
    "start": "1786240",
    "end": "1792000"
  },
  {
    "text": "encrypted string thus desensitizing the data the next",
    "start": "1792000",
    "end": "1798870"
  },
  {
    "text": "feature that we we hand the request off to and processing is actually a service all on its own it's called aw swath",
    "start": "1798870",
    "end": "1806000"
  },
  {
    "text": "laughs stands for Web Application Firewall and it's actually deployed across all of our cloud front posts",
    "start": "1806000",
    "end": "1812230"
  },
  {
    "text": "around the world right when you use WAC what you can actually do is configure a",
    "start": "1812230",
    "end": "1818289"
  },
  {
    "text": "number of rules to protect against application-layer attacks such as HTTP floods sequel injection cross-site",
    "start": "1818289",
    "end": "1825309"
  },
  {
    "text": "scripting but what really makes it stand out as a service is the ability to innovate your security mitigations right",
    "start": "1825309",
    "end": "1832809"
  },
  {
    "text": "I'm gonna go over some of the examples of some of the mitigations we've seen our customers implement with laughs and",
    "start": "1832809",
    "end": "1838809"
  },
  {
    "text": "cloud front the first one is your traditional IP reputation list you may",
    "start": "1838809",
    "end": "1844149"
  },
  {
    "text": "be subscribed to your manage your own or subscribe one from a third party and you need to keep this updated within the web",
    "start": "1844149",
    "end": "1850149"
  },
  {
    "text": "application firewall so in this example we use a lambda function along with a cloud watch event to to regularly check",
    "start": "1850149",
    "end": "1856240"
  },
  {
    "text": "for updates and refresh the the access control list because Wafaa scan is",
    "start": "1856240",
    "end": "1863130"
  },
  {
    "text": "configurable via API and all of these changes take place within a minute across all of our education around the",
    "start": "1863130",
    "end": "1869889"
  },
  {
    "text": "world it allows you to build these feedback loops and act upon against bad",
    "start": "1869889",
    "end": "1875139"
  },
  {
    "text": "actors very quickly right the next mitigation is a honeypot URL so when you",
    "start": "1875139",
    "end": "1882909"
  },
  {
    "text": "create a honeypot URL in this example we're using an API gateway endpoint that you could embed as a hidden link inside",
    "start": "1882909",
    "end": "1889419"
  },
  {
    "text": "your web application right in your robots.txt file you'll actually specify that hey this link is not intended for",
    "start": "1889419",
    "end": "1896860"
  },
  {
    "text": "you no good crawlers good BOTS please do not try to scrape this and if if a bad",
    "start": "1896860",
    "end": "1904630"
  },
  {
    "text": "actor comes along scrapes through your page and hits this honeypot URL the lambda function identifies the IP",
    "start": "1904630",
    "end": "1909909"
  },
  {
    "text": "address from where that clients come comes from and updates the web access",
    "start": "1909909",
    "end": "1915070"
  },
  {
    "text": "control lists to block that IP address and then in the last example I'm gonna",
    "start": "1915070",
    "end": "1920169"
  },
  {
    "text": "go over is how you can do analytics with cloud fronts and AWS web logs both both",
    "start": "1920169",
    "end": "1927700"
  },
  {
    "text": "AWS laugh and Amazon CloudFront provides logs with AWS wife you have real-time blog stream - Kinesis firehose from",
    "start": "1927700",
    "end": "1935440"
  },
  {
    "text": "there you can actually build your own analytics using Amazon Athena to detect anomalies if you identify any of these",
    "start": "1935440",
    "end": "1941710"
  },
  {
    "text": "anomalies you can actually again update your access control lists on the fly to act against these bad actors ok so last",
    "start": "1941710",
    "end": "1952159"
  },
  {
    "text": "but not least for our layer one layer is lamda edge lamda edge is an extension of",
    "start": "1952159",
    "end": "1958400"
  },
  {
    "text": "lamda that allows cloud front to invoke lamda at different invocation points along the request response path from our",
    "start": "1958400",
    "end": "1966669"
  },
  {
    "text": "Regional Education around the world you can actually use lamda to do a number of manipulations on the request or generate",
    "start": "1966669",
    "end": "1973370"
  },
  {
    "text": "responses so kind of really bring that compute logic closer to your end users right for security this is an example",
    "start": "1973370",
    "end": "1981770"
  },
  {
    "text": "that we've seen some customers implement when they're trying to do custom authorizations since you can get invoke",
    "start": "1981770",
    "end": "1987980"
  },
  {
    "text": "lamda before cloud front actually takes any actions on the request aside from side URLs TCP termination and and laughs",
    "start": "1987980",
    "end": "1998529"
  },
  {
    "text": "what you can do here in this example is you can create your own custom",
    "start": "1998529",
    "end": "2003730"
  },
  {
    "text": "authentication and authorization in a lambda function it may be JWT token auth for example and then decide if you want",
    "start": "2003730",
    "end": "2011080"
  },
  {
    "text": "to let the request continue upstream or reject it right there at the edge to",
    "start": "2011080",
    "end": "2017529"
  },
  {
    "text": "speak a little bit more about lamda as I mentioned there's four invocation points there's two on the request path and two",
    "start": "2017529",
    "end": "2022960"
  },
  {
    "text": "on the response path and then if I look at it vertically there's two on the",
    "start": "2022960",
    "end": "2028029"
  },
  {
    "text": "origin facing side and two on the viewer facing side on the viewer facing side those invocations happen before",
    "start": "2028029",
    "end": "2034990"
  },
  {
    "text": "CloudFront has checked its local cache and or after it's checked its local",
    "start": "2034990",
    "end": "2040659"
  },
  {
    "text": "cache on the way out the door to the clients on the origin facing side that's before we make the call to the origin or",
    "start": "2040659",
    "end": "2048450"
  },
  {
    "text": "as soon as we receive the response back so there's a number of use cases that you can implement there that I'll talk",
    "start": "2048450",
    "end": "2054429"
  },
  {
    "text": "about in a little bit ok so now let's talk about our cache layers the ultimate",
    "start": "2054429",
    "end": "2063339"
  },
  {
    "text": "goal of our cache layers is to serve as much content from the edge as possible right so we use a number of techniques",
    "start": "2063339",
    "end": "2068589"
  },
  {
    "text": "to do this because it allows you to serve give your users a faster viewing experience as well as reduced load on",
    "start": "2068589",
    "end": "2074679"
  },
  {
    "text": "your origins in a case it might you know reduce your costs at the origin you won't have to run as many servers for",
    "start": "2074679",
    "end": "2081429"
  },
  {
    "text": "instance all right so one of the techniques that Georgie described was consistent hashing when you looked at a",
    "start": "2081429",
    "end": "2087368"
  },
  {
    "text": "cloud for an edge of the location or a cloud print as a whole we have tens of thousands of servers around the world",
    "start": "2087369",
    "end": "2092858"
  },
  {
    "text": "but within each of these edge locations we actually are limited tens of servers",
    "start": "2092859",
    "end": "2098410"
  },
  {
    "text": "actually because we're operating in data centers and co-located facilities around the world that we don't necessarily own",
    "start": "2098410",
    "end": "2103839"
  },
  {
    "text": "so real estate is limited right so to really make good use of that space we",
    "start": "2103839",
    "end": "2108940"
  },
  {
    "text": "have to ensure that we optimize for the capacity of storage that we have available within those racks by using",
    "start": "2108940",
    "end": "2115690"
  },
  {
    "text": "consistent hashing we can actually spread this shard those objects that would be cache across all of those",
    "start": "2115690",
    "end": "2122230"
  },
  {
    "text": "servers to expand our cache width also",
    "start": "2122230",
    "end": "2127390"
  },
  {
    "text": "part of our cache layers is the regional edge cache regional edge cash is like a",
    "start": "2127390",
    "end": "2132460"
  },
  {
    "text": "super pop right it sits between our cloud front pops our edge locations and",
    "start": "2132460",
    "end": "2138970"
  },
  {
    "text": "your organ servers but they sit in regions closer to the edge locations than your origin servers so imagine a",
    "start": "2138970",
    "end": "2146440"
  },
  {
    "text": "case where you have a data center that storing content in u.s. East Virginia right and but you have globally",
    "start": "2146440",
    "end": "2153280"
  },
  {
    "text": "distributed viewers around the world maybe a good handful of your viewers are actually in Australia if in in the",
    "start": "2153280",
    "end": "2161500"
  },
  {
    "text": "previous model if we didn't have a regional edge cache if there was a cache miss for an object at that edge location",
    "start": "2161500",
    "end": "2168849"
  },
  {
    "text": "in Australia we'd have to traverse that request across the world to that data center in u.s. East and before returning",
    "start": "2168849",
    "end": "2175000"
  },
  {
    "text": "the content back right because cache space is limited at these smaller edge locations with the regional edge caches",
    "start": "2175000",
    "end": "2181660"
  },
  {
    "text": "we now didn't store more data closer to your viewers in the Australia regional edge cache for which all of the edge",
    "start": "2181660",
    "end": "2188260"
  },
  {
    "text": "locations there could collapse to to check to see if the content exists so bringing the content closer to your",
    "start": "2188260",
    "end": "2193569"
  },
  {
    "text": "viewers reducing the latency providing a better experience the next feature that",
    "start": "2193569",
    "end": "2200500"
  },
  {
    "text": "we implement in our caching layers is byte streaming so when we think about caching we don't just think about you",
    "start": "2200500",
    "end": "2206440"
  },
  {
    "text": "know if we have to get content stored within our edge locations we also have to make sure that when there is a cache miss viewers are still",
    "start": "2206440",
    "end": "2213950"
  },
  {
    "text": "getting a good experience right we don't we don't just wait for content to be written to cache and then serve it back",
    "start": "2213950",
    "end": "2219619"
  },
  {
    "text": "if in the event of a cache miss the request will actually forward upstream to the origin server we'll get a",
    "start": "2219619",
    "end": "2226609"
  },
  {
    "text": "response back and as soon as we start getting bytes will begin to writing them to the socket back to the viewer so you can get them right away so you're not",
    "start": "2226609",
    "end": "2232759"
  },
  {
    "text": "incurring a penalty on a cache miss and",
    "start": "2232759",
    "end": "2237130"
  },
  {
    "text": "then the last feature I'm going to talk about is request collapsing request collapsing is actually really important",
    "start": "2237910",
    "end": "2244279"
  },
  {
    "text": "for a lot of live video streaming use cases it allows us to reduce load on the origin by collapsing requests before we",
    "start": "2244279",
    "end": "2251660"
  },
  {
    "text": "make a request back to the origin server at our edge locations and I'm gonna talk more about that next so Thursday Night",
    "start": "2251660",
    "end": "2259819"
  },
  {
    "text": "Football it's an event that we stream live on prime video and typically with",
    "start": "2259819",
    "end": "2265730"
  },
  {
    "text": "these big live events what you have is a bunch of viewers distributed across different geographies maybe the US maybe",
    "start": "2265730",
    "end": "2272329"
  },
  {
    "text": "Europe even more and because it's a live broadcast all of these viewers are",
    "start": "2272329",
    "end": "2277910"
  },
  {
    "text": "fetching the same objects near simultaneously right so maybe in Seattle",
    "start": "2277910",
    "end": "2283400"
  },
  {
    "text": "you might have several viewers hitting the same edge location for the same object at almost the same time what",
    "start": "2283400",
    "end": "2290299"
  },
  {
    "text": "cloud does is in that case is will identify that the first request came in and will collapse those requests so that",
    "start": "2290299",
    "end": "2296450"
  },
  {
    "text": "you know we're not sending X number requests to multiply by the number of years you have to the origin every time",
    "start": "2296450",
    "end": "2301849"
  },
  {
    "text": "right we also do this again at the regional edge cache so that requests coming from our pop locations are also",
    "start": "2301849",
    "end": "2308239"
  },
  {
    "text": "not pounding on your origin servers here's here's a good-looking detail of",
    "start": "2308239",
    "end": "2315470"
  },
  {
    "text": "like what's actually happening here let's say user 1 makes a request to a cloud front pop we we continue that",
    "start": "2315470",
    "end": "2323480"
  },
  {
    "text": "request upstream because it's live streaming content it may not be there yet while that's happening another",
    "start": "2323480",
    "end": "2330170"
  },
  {
    "text": "another user submits a request to the edge the same edge location will",
    "start": "2330170",
    "end": "2335480"
  },
  {
    "text": "actually recognize that hey we're already processing the same identical request for this the same object let's",
    "start": "2335480",
    "end": "2340819"
  },
  {
    "text": "not force another request upstream let's actually wait until we get a response back before we're serving that",
    "start": "2340819",
    "end": "2347540"
  },
  {
    "text": "content in which case we'll simultaneously right back those bytes to the socket so I talked a lot about a lot",
    "start": "2347540",
    "end": "2357619"
  },
  {
    "text": "about you know different strategies we use to optimize for cache efficiency within cloud front but actually for this",
    "start": "2357619",
    "end": "2364190"
  },
  {
    "text": "all to really work we need help from our users to really optimize their cache",
    "start": "2364190",
    "end": "2370070"
  },
  {
    "text": "efficiency right you have to have a good caching strategy when you deploy your applications and you configure the CDN",
    "start": "2370070",
    "end": "2375140"
  },
  {
    "text": "for example with Amazon com there's",
    "start": "2375140",
    "end": "2380530"
  },
  {
    "text": "different types of content that's being delivered right not all content is treated equal for instance you have your",
    "start": "2380530",
    "end": "2386599"
  },
  {
    "text": "home page which might be used across multiple users right so you'd think it's cacheable and it is right but that home",
    "start": "2386599",
    "end": "2394130"
  },
  {
    "text": "page might get updated pretty frequently so you want your users to have a consistent or an updated viewing",
    "start": "2394130",
    "end": "2399890"
  },
  {
    "text": "experience in this case what you might want to consider is using your cache control directives which is part of the",
    "start": "2399890",
    "end": "2406460"
  },
  {
    "text": "HTTP standard to tell the browser not to cache using a notion no cache directive you'll also want to include an e-tag",
    "start": "2406460",
    "end": "2413869"
  },
  {
    "text": "which allows subsequent requests to check to see if there's been an update to that object so that you're not",
    "start": "2413869",
    "end": "2419300"
  },
  {
    "text": "actually writing all those bytes to the socket every time if an update hasn't occurred and then you might also want to set your",
    "start": "2419300",
    "end": "2426050"
  },
  {
    "text": "minty tail on the cloud front distribution which tells cloud front hey cash this for at least this amount of",
    "start": "2426050",
    "end": "2432080"
  },
  {
    "text": "time regardless of what the cache control header does it says right the",
    "start": "2432080",
    "end": "2437780"
  },
  {
    "text": "next the next thing you might want to look at is your dynamic content so in",
    "start": "2437780",
    "end": "2443630"
  },
  {
    "text": "this case we have a shopping cart right that gets updated but this data while it might seem cashable it's very specific",
    "start": "2443630",
    "end": "2450530"
  },
  {
    "text": "to your user right so like some users might not have anything in their shopping cart others might have a number",
    "start": "2450530",
    "end": "2456500"
  },
  {
    "text": "of things this is very dynamic because it depends on the user it could persist for a while but it's still not something",
    "start": "2456500",
    "end": "2462800"
  },
  {
    "text": "that you would share our cross users in this case we'd actually recommend that you would set a no store directive which",
    "start": "2462800",
    "end": "2469609"
  },
  {
    "text": "tells cloud front and the browser not to cash and then disable caching altogether in cloud fronts",
    "start": "2469609",
    "end": "2475220"
  },
  {
    "text": "we skip the caching layers by configuring what we call whitelist all headers basically we're saying there's",
    "start": "2475220",
    "end": "2480619"
  },
  {
    "text": "so much variation in the request don't even bother caching it skip layer to go straight to the go straight to the",
    "start": "2480619",
    "end": "2486619"
  },
  {
    "text": "origin and then the last type of content that you you might have is your static long-lived content such as an image for",
    "start": "2486619",
    "end": "2494300"
  },
  {
    "text": "this book in example however you know in this case you'll probably want to set a",
    "start": "2494300",
    "end": "2499940"
  },
  {
    "text": "cache control value that's set very high so that you know it's it lives in cache",
    "start": "2499940",
    "end": "2505190"
  },
  {
    "text": "for a long time you may also want to create an e-tag because we never want to fetch content",
    "start": "2505190",
    "end": "2511369"
  },
  {
    "text": "that hasn't really changed unnecessarily right and then the last thing you can also consider doing is using URL",
    "start": "2511369",
    "end": "2518119"
  },
  {
    "text": "versioning just in case that image does get updated you can always reference the",
    "start": "2518119",
    "end": "2523250"
  },
  {
    "text": "new version of the image from your root HTML file right so when we think about caching it's kind of like a partnership",
    "start": "2523250",
    "end": "2529490"
  },
  {
    "text": "we're gonna do everything within our edge locations to optimize our caches but we also need our customers to",
    "start": "2529490",
    "end": "2535579"
  },
  {
    "text": "optimize their configuration for their applications so I spoke a lot about like",
    "start": "2535579",
    "end": "2542810"
  },
  {
    "text": "the performance benefits of caching but one of the things that you know is the",
    "start": "2542810",
    "end": "2549050"
  },
  {
    "text": "biggest value of using cloud for intz cache is the availability benefits I'm sure some of you might have had a",
    "start": "2549050",
    "end": "2555589"
  },
  {
    "text": "product manager or somebody tell you hey we need a hundred percent SLA complete uptime make it happen right well we all",
    "start": "2555589",
    "end": "2564500"
  },
  {
    "text": "know that accidents happen and application servers go down web servers go down you might get 503 because",
    "start": "2564500",
    "end": "2571160"
  },
  {
    "text": "somebody deployed some bad code and in those cases what you really want to do is leverage cloud front to serve content",
    "start": "2571160",
    "end": "2578030"
  },
  {
    "text": "regardless of what's happening at the the audit server so the in the event of the organ server being down what cloud",
    "start": "2578030",
    "end": "2584329"
  },
  {
    "text": "front will actually do is if we have the content in cache and we go to the origin the origin returns a 500 level error",
    "start": "2584329",
    "end": "2590740"
  },
  {
    "text": "we'll go ahead and serve the stale content so that your viewers continue to have a good viewing experience right",
    "start": "2590740",
    "end": "2596060"
  },
  {
    "text": "unless you tell us not to do so hopefully you guys have never seen this",
    "start": "2596060",
    "end": "2602540"
  },
  {
    "text": "page I'm guessing we all shot money on his own but you know another feature of",
    "start": "2602540",
    "end": "2609609"
  },
  {
    "text": "CloudFront is you have the ability to configure custom error pages so when you're we don't have the content in cash",
    "start": "2609609",
    "end": "2616030"
  },
  {
    "text": "and and your origin server does return an error you can serve up a pretty page",
    "start": "2616030",
    "end": "2622119"
  },
  {
    "text": "rather than returning the nasty you know 400 or 500 level HTTP status code to the",
    "start": "2622119",
    "end": "2628210"
  },
  {
    "text": "browser all right so the last availability feature that I'm talking",
    "start": "2628210",
    "end": "2634270"
  },
  {
    "text": "about is called origin failover and what origin failover actually allows you to do is configure multiple origins on a",
    "start": "2634270",
    "end": "2642790"
  },
  {
    "text": "cloud front cache behavior what that allows you to do is if the primary origin is having issues for certain HTTP",
    "start": "2642790",
    "end": "2649240"
  },
  {
    "text": "status codes it'll tell cloud form to go ahead and retry against another origin right so in this case the first origin",
    "start": "2649240",
    "end": "2655210"
  },
  {
    "text": "returns a 500 503 maybe you did a bad deployment to your blue stack right and then your green stack is still up and",
    "start": "2655210",
    "end": "2661180"
  },
  {
    "text": "running retry against that in a case of blue green deployments so now I'm gonna",
    "start": "2661180",
    "end": "2668500"
  },
  {
    "text": "go talk about the last layer of of CloudFront last layer is called layer 3",
    "start": "2668500",
    "end": "2675220"
  },
  {
    "text": "we call it internally l3 this is ultimately our dynamic layer where we handle all origin facing optimizations",
    "start": "2675220",
    "end": "2682450"
  },
  {
    "text": "so anything that has to go to the origin we basically handle it here right we",
    "start": "2682450",
    "end": "2690280"
  },
  {
    "text": "offer a number of features in l3 but I'm going to talk about the key ones that will be beneficial to you when you're using cloud front so compression right",
    "start": "2690280",
    "end": "2698140"
  },
  {
    "text": "if you enable compression it on your quadrant configuration what will actually do is compress the objects if",
    "start": "2698140",
    "end": "2705100"
  },
  {
    "text": "the content type is compressible that is returned from the origin in many cases",
    "start": "2705100",
    "end": "2711280"
  },
  {
    "text": "what we find is you can actually reduce the footprint of the payload by 80% which ultimately means better relate and",
    "start": "2711280",
    "end": "2717310"
  },
  {
    "text": "see and performance for your viewers because now you're only writing you know way less bytes to the socket that has to",
    "start": "2717310",
    "end": "2724119"
  },
  {
    "text": "traverse over the wire to your clients right and let them deal with the compute of on compressing it again we talked",
    "start": "2724119",
    "end": "2734590"
  },
  {
    "text": "about lambda edge so we mentioned earlier that you can actually implement lambda",
    "start": "2734590",
    "end": "2739720"
  },
  {
    "text": "invocations on the origin facing side of the request behind the cache this is common for use cases such as a be",
    "start": "2739720",
    "end": "2746680"
  },
  {
    "text": "testing or dynamic content routing in which you can actually invoke of a lambda function after we check the cache",
    "start": "2746680",
    "end": "2752380"
  },
  {
    "text": "if on it on the case of a cache miss to determine hey maybe I want to route the request to a different origin server",
    "start": "2752380",
    "end": "2758170"
  },
  {
    "text": "based off of these attributes right in some cases you might even want to generate web content right there at the",
    "start": "2758170",
    "end": "2763960"
  },
  {
    "text": "edge and lambda edge so it's a really powerful mechanism built-in as a feature",
    "start": "2763960",
    "end": "2769150"
  },
  {
    "text": "of Cockrum and then last but not least this is actually the most important",
    "start": "2769150",
    "end": "2774400"
  },
  {
    "text": "feature and l3 is the persistent connections we do a lot of connection",
    "start": "2774400",
    "end": "2779710"
  },
  {
    "text": "pooling in in layer 3 ultimately what this does is it allows us to reuse connections not have to deal with all",
    "start": "2779710",
    "end": "2786460"
  },
  {
    "text": "those round-trip time round trips again of establishing a connection to the origin if we already have one right for",
    "start": "2786460",
    "end": "2792550"
  },
  {
    "text": "dynamic content acceleration this is huge because typically you're dealing with traversing long distances from your",
    "start": "2792550",
    "end": "2798820"
  },
  {
    "text": "viewers to to the location the data center where your origin server might be",
    "start": "2798820",
    "end": "2803920"
  },
  {
    "text": "running by maintaining these these persistent connections it allows us to scale up the TCP congestion window which",
    "start": "2803920",
    "end": "2810820"
  },
  {
    "text": "means we can write more bytes to the socket and further accelerate the delivery of the content when this",
    "start": "2810820",
    "end": "2816160"
  },
  {
    "text": "happens whenever a request goes through the the stack and it lands on l3 what we'll do is we'll resolve the domain of",
    "start": "2816160",
    "end": "2822460"
  },
  {
    "text": "the origin at each request and then we'll check our our connection cache",
    "start": "2822460",
    "end": "2828280"
  },
  {
    "text": "pool to see if that particular IP address has already been established the",
    "start": "2828280",
    "end": "2833830"
  },
  {
    "text": "reason we resolve every time is so that we don't pin on one of your origin servers within the persisting",
    "start": "2833830",
    "end": "2842140"
  },
  {
    "text": "connections one thing worth noting is you know to really optimize for this you really want to take into consideration",
    "start": "2842140",
    "end": "2847230"
  },
  {
    "text": "your read timeout settings your keepalive timeout settings we also manage our connection",
    "start": "2847230",
    "end": "2854230"
  },
  {
    "text": "TLS policies and protocol selections here awesome",
    "start": "2854230",
    "end": "2860440"
  },
  {
    "text": "so we've made it through the HT lifecycle of an HTTP request from client",
    "start": "2860440",
    "end": "2866590"
  },
  {
    "text": "to origin and back you've made it through the AWS New York summit because it's the end of the day",
    "start": "2866590",
    "end": "2872630"
  },
  {
    "text": "now but all of this has happening in you know we're talking milliseconds here",
    "start": "2872630",
    "end": "2878390"
  },
  {
    "text": "right but that's kind of the dynamic aspect of front there's still more",
    "start": "2878390",
    "end": "2883430"
  },
  {
    "text": "work to be done in a cloud front after we receive the crest we have monitoring and reports monitoring metrics and",
    "start": "2883430",
    "end": "2890690"
  },
  {
    "text": "reports that are made available within within the service itself that you can",
    "start": "2890690",
    "end": "2896390"
  },
  {
    "text": "use to be evaluate and analyze your traffic all right here's something",
    "start": "2896390",
    "end": "2902660"
  },
  {
    "text": "before I let you guys take off for happy hour here are some resources that you can take a look at to go dive into",
    "start": "2902660",
    "end": "2908450"
  },
  {
    "text": "detail on some of the resources that some of the features that I mentioned so",
    "start": "2908450",
    "end": "2914870"
  },
  {
    "text": "please take a picture if you will and",
    "start": "2914870",
    "end": "2920470"
  },
  {
    "text": "lastly thank you for attending please remember to complete the survey at the end if you give us five stars",
    "start": "2920470",
    "end": "2926840"
  },
  {
    "text": "they'll let us come back and do this presentation again so thank you for your time",
    "start": "2926840",
    "end": "2932230"
  },
  {
    "text": "[Applause]",
    "start": "2932230",
    "end": "2938760"
  }
]