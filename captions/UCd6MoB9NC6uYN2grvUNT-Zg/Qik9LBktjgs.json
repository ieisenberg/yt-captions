[
  {
    "start": "0",
    "end": "26000"
  },
  {
    "text": "hello everybody thank you guys for coming I hope you guys are having a great time at the conference",
    "start": "230",
    "end": "6359"
  },
  {
    "text": "my name is a trash reader I'm an engineer at Amazon Elastic container service team and I'm joined today with",
    "start": "6359",
    "end": "13080"
  },
  {
    "text": "our customers when Jeeva and Alena from McDonald's and together we're going to",
    "start": "13080",
    "end": "18270"
  },
  {
    "text": "talk about how to build your applications using docker containers and how do you deploy them on elastic",
    "start": "18270",
    "end": "24330"
  },
  {
    "text": "container service so let's get started here is the gender of my talk we're",
    "start": "24330",
    "end": "30390"
  },
  {
    "start": "26000",
    "end": "76000"
  },
  {
    "text": "going to start by reviewing a software development lifecycle and then we're going to see how containers are actually",
    "start": "30390",
    "end": "36570"
  },
  {
    "text": "useful and then we're going to look at the container ecosystem for each step of the software development lifecycle by",
    "start": "36570",
    "end": "44280"
  },
  {
    "text": "doing that we'll see how to leverage elastic container registry to store our",
    "start": "44280",
    "end": "49620"
  },
  {
    "text": "images and elastic container service to deploy our containers we'll learn ways",
    "start": "49620",
    "end": "56190"
  },
  {
    "text": "to automate monitoring and scaling and setting up CI CD pipelines for failsafe",
    "start": "56190",
    "end": "61820"
  },
  {
    "text": "deployments and then the team from mcdonnell's will give us a dive deep",
    "start": "61820",
    "end": "66869"
  },
  {
    "text": "into how they built their home delivery system using docker and ECS within four",
    "start": "66869",
    "end": "72090"
  },
  {
    "text": "months to serve thousands of customers cool so throughout the rest of my talk",
    "start": "72090",
    "end": "79200"
  },
  {
    "start": "76000",
    "end": "165000"
  },
  {
    "text": "I'm going to think about our application and build that on containers so of",
    "start": "79200",
    "end": "85229"
  },
  {
    "text": "course I come up with HelloWorld application because once you're learning something new everybody loves to see the words hello world because you know then",
    "start": "85229",
    "end": "92040"
  },
  {
    "text": "it's working right so typically in a software development lifecycle we start",
    "start": "92040",
    "end": "99090"
  },
  {
    "text": "with a developer writing some code in their local desktop and then they push",
    "start": "99090",
    "end": "104280"
  },
  {
    "text": "their code into a version control repository and then from then on our",
    "start": "104280",
    "end": "109460"
  },
  {
    "text": "build is saw triggers and artifacts are are constructed and these artifacts are",
    "start": "109460",
    "end": "116640"
  },
  {
    "text": "then pushed into a repository and then they're staged into a testing",
    "start": "116640",
    "end": "121890"
  },
  {
    "text": "environment where some tests are run against the new artifact that's been built and once we know that all the",
    "start": "121890",
    "end": "128970"
  },
  {
    "text": "tests succeed this artifact is now ready to be deploy to our production",
    "start": "128970",
    "end": "134330"
  },
  {
    "text": "so we also want to automate our way to actually go from a local desktop all the",
    "start": "134330",
    "end": "141900"
  },
  {
    "text": "way to production without explicit approvals along the way and this mechanism is called continuous delivery",
    "start": "141900",
    "end": "149270"
  },
  {
    "text": "now continuous delivery enables us to reduce risk and deliver value faster by",
    "start": "149270",
    "end": "157170"
  },
  {
    "text": "providing us some reliable software and short iterations and this is where containers fit in right well let me back",
    "start": "157170",
    "end": "165300"
  },
  {
    "start": "165000",
    "end": "220000"
  },
  {
    "text": "up a little bit I believe most of you here already know what containers are",
    "start": "165300",
    "end": "170730"
  },
  {
    "text": "and the benefits that container bring to you but I'm going to give a quick recap",
    "start": "170730",
    "end": "176280"
  },
  {
    "text": "to sort of level set the rest of the discussion so containers are similar to hardware virtualization but instead of",
    "start": "176280",
    "end": "183420"
  },
  {
    "text": "partitioning on the machine they actually isolate the processes running on a single operating system great so",
    "start": "183420",
    "end": "191340"
  },
  {
    "text": "why are containers useful because they provide us with our reproducible and consistent environment throughout the",
    "start": "191340",
    "end": "198990"
  },
  {
    "text": "software lifecycle so there's very few chances for introducing errors along the",
    "start": "198990",
    "end": "204750"
  },
  {
    "text": "way and they're super lightweight that helps us to be increase our speed and",
    "start": "204750",
    "end": "211980"
  },
  {
    "text": "agility in our delivery process great we're all souls we want to use containers but how do you get started",
    "start": "211980",
    "end": "218220"
  },
  {
    "text": "right let's go back to our software developer lifecycle our first step is",
    "start": "218220",
    "end": "223560"
  },
  {
    "text": "source code so we want to containerize your source code and we start by doing",
    "start": "223560",
    "end": "228720"
  },
  {
    "text": "that using docker files the darker files are a simple text file with a syntax",
    "start": "228720",
    "end": "236490"
  },
  {
    "start": "231000",
    "end": "285000"
  },
  {
    "text": "that allows you to define the environment your application is going to",
    "start": "236490",
    "end": "241830"
  },
  {
    "text": "run at and all the dependencies that it comes with so in this example we're",
    "start": "241830",
    "end": "247800"
  },
  {
    "text": "building a hello world application we start with a simple base image which is",
    "start": "247800",
    "end": "252840"
  },
  {
    "text": "a bun to twelve out of four then we use the run instruction to actually update",
    "start": "252840",
    "end": "258690"
  },
  {
    "text": "your package cache and then we use the run instruction again to install Apache",
    "start": "258690",
    "end": "265010"
  },
  {
    "text": "after that we're just going to hello world into the documents route and",
    "start": "265010",
    "end": "270919"
  },
  {
    "text": "then we use the expose instruction to expose port 80 and then the command",
    "start": "270919",
    "end": "278040"
  },
  {
    "text": "instruction to actually run your application so you sort of get a picture of how to construct a docker file",
    "start": "278040",
    "end": "285860"
  },
  {
    "start": "285000",
    "end": "326000"
  },
  {
    "text": "alright here are some best practices and some caveats you need to think about when you are constructing a docker file",
    "start": "285860",
    "end": "293600"
  },
  {
    "text": "you need to analyze all the dependencies that you bring in and just bring in what",
    "start": "293600",
    "end": "301680"
  },
  {
    "text": "you need like reduce everything else that you don't want and make sure that",
    "start": "301680",
    "end": "307650"
  },
  {
    "text": "you avoid using latest or stable tags for images because the purpose of",
    "start": "307650",
    "end": "314760"
  },
  {
    "text": "containers is for it to be consistent and reproducible so we want to use specific versions so that it helps us",
    "start": "314760",
    "end": "321419"
  },
  {
    "text": "roll out the software and roll back whenever needed great we made some",
    "start": "321419",
    "end": "328650"
  },
  {
    "text": "changes to our source code we've pushed this to our version control what's our next step it's to build so when you",
    "start": "328650",
    "end": "335280"
  },
  {
    "text": "build an application with a docker file in it it results in something called a docker image so a docker image is the",
    "start": "335280",
    "end": "344310"
  },
  {
    "start": "337000",
    "end": "383000"
  },
  {
    "text": "lightweight executable package that includes everything that you need to run your application it includes your source",
    "start": "344310",
    "end": "350940"
  },
  {
    "text": "code it includes your dependencies it includes your environment variables and config files whatever you need to",
    "start": "350940",
    "end": "357570"
  },
  {
    "text": "actually run your application and that makes it very self-contained so that you",
    "start": "357570",
    "end": "362669"
  },
  {
    "text": "you can make your deployments and scaling much easier great another",
    "start": "362669",
    "end": "368010"
  },
  {
    "text": "advantage is its consistent and it's immutable so no matter when you run it or where you run it it behaves the same",
    "start": "368010",
    "end": "375200"
  },
  {
    "text": "ok this also helps us with our application portability needs perfect so",
    "start": "375200",
    "end": "381419"
  },
  {
    "text": "how do you get to the docker image again you just simply run docker bills locally or you could use the Jenkins plugin",
    "start": "381419",
    "end": "389430"
  },
  {
    "start": "383000",
    "end": "422000"
  },
  {
    "text": "called cloud beads built and publish plug-in that lets you sort of specify",
    "start": "389430",
    "end": "394830"
  },
  {
    "text": "the image that you want tag it in this case we're tagging it with a bill number then you",
    "start": "394830",
    "end": "400800"
  },
  {
    "text": "by the registry where you want to actually push your image so that it goes and gets stored there in this case we're",
    "start": "400800",
    "end": "407069"
  },
  {
    "text": "using the AWS container registry okay what is that Hamazon elastic container",
    "start": "407069",
    "end": "413789"
  },
  {
    "text": "registry is a docker containers registry that is fully managed and it stores and",
    "start": "413789",
    "end": "419879"
  },
  {
    "text": "manages docker containers cool it is also it hosts your images in the",
    "start": "419879",
    "end": "427710"
  },
  {
    "start": "422000",
    "end": "467000"
  },
  {
    "text": "highly available and scalable manner it uses s3 under the hood and then it has",
    "start": "427710",
    "end": "433110"
  },
  {
    "text": "tighter integration with Amazon I am so you can do some resource level",
    "start": "433110",
    "end": "439349"
  },
  {
    "text": "permissions like give push permissions to some accounts where as full permissions are open to everybody it's",
    "start": "439349",
    "end": "444780"
  },
  {
    "text": "up to you how you want to configure it great so basically ECR Amazon Elastic",
    "start": "444780",
    "end": "451530"
  },
  {
    "text": "container registry eliminates the need for you to manage your infrastructure hosting these darker registries and it",
    "start": "451530",
    "end": "459960"
  },
  {
    "text": "has tried integration with Amazon a container service and we're going to use that to actually deploy our containers",
    "start": "459960",
    "end": "467360"
  },
  {
    "start": "467000",
    "end": "510000"
  },
  {
    "text": "cool and this is how you would set up you start with AWS CLI or api's for ECR",
    "start": "467360",
    "end": "476340"
  },
  {
    "text": "and then you would create a repository once you have a repository you'll get a registration you will use that after you",
    "start": "476340",
    "end": "485219"
  },
  {
    "text": "build your docker image you go tag that with the URI cool and then you do a",
    "start": "485219",
    "end": "491219"
  },
  {
    "text": "darker login and to authenticate yourself and then you're able to just",
    "start": "491219",
    "end": "496680"
  },
  {
    "text": "run docker push and push your image and remember this is of the under the hood",
    "start": "496680",
    "end": "503190"
  },
  {
    "text": "what happens you can do this manually or you can just use the Jenkins plug-in and you don't have to worry about any of",
    "start": "503190",
    "end": "509219"
  },
  {
    "text": "this ok moving on we have our bill that's complete we have our image that's",
    "start": "509219",
    "end": "515940"
  },
  {
    "text": "pushed to a registry our next step is to actually run tests you can run some",
    "start": "515940",
    "end": "522870"
  },
  {
    "start": "521000",
    "end": "538000"
  },
  {
    "text": "tests inside of a container you can run them against the container outside you can run unit tests integration tests",
    "start": "522870",
    "end": "529290"
  },
  {
    "text": "blackbox tests whatever makes you actually validate and confirm that both image is actually now ready to go",
    "start": "529290",
    "end": "535860"
  },
  {
    "text": "to production okay so we're ready and how do we deploy now",
    "start": "535860",
    "end": "542459"
  },
  {
    "text": "so this is where Amazon Elastic container service comes into picture",
    "start": "542459",
    "end": "548269"
  },
  {
    "start": "546000",
    "end": "663000"
  },
  {
    "text": "Amazon Elastic container service is a highly scalable container management and",
    "start": "548269",
    "end": "553950"
  },
  {
    "text": "orchestration service it scales seamlessly for any class cluster of any",
    "start": "553950",
    "end": "559410"
  },
  {
    "text": "size so whether it be tens of containers or thousands of containers it's gonna give you the same consistent performance",
    "start": "559410",
    "end": "566779"
  },
  {
    "text": "okay it also has a set of API set of",
    "start": "566779",
    "end": "571920"
  },
  {
    "text": "schedulers that are offers that performs different placement strategies and helps",
    "start": "571920",
    "end": "578220"
  },
  {
    "text": "you place your containers on the instances so some examples include spread so you can spread your containers",
    "start": "578220",
    "end": "586620"
  },
  {
    "text": "across different availability zones that probably caters to your availability",
    "start": "586620",
    "end": "591959"
  },
  {
    "text": "needs or you could like package all of these together in one instance and then",
    "start": "591959",
    "end": "597630"
  },
  {
    "text": "pack them together that caters to your cost efficiency so you can have multiple placement strategies to place your",
    "start": "597630",
    "end": "604170"
  },
  {
    "text": "containers and McDonald's has leveraged that placement strategies that we'll learn later to build their system cool",
    "start": "604170",
    "end": "612620"
  },
  {
    "text": "Amazon ECS is deeply integrated with a lot of AWS services this includes cloud",
    "start": "612620",
    "end": "619709"
  },
  {
    "text": "watch for logging and monitoring we'll see that in a while and then it also is integrated with application load",
    "start": "619709",
    "end": "626100"
  },
  {
    "text": "balancing for you to run to your service with a load balancer and route traffic to it you can also and it's also",
    "start": "626100",
    "end": "633720"
  },
  {
    "text": "integrated with application auto scaling so in case of peak load you can actually",
    "start": "633720",
    "end": "638850"
  },
  {
    "text": "scale up and down your service another advantage that's listed up here",
    "start": "638850",
    "end": "644640"
  },
  {
    "text": "is extensibility the reason we say that as we offer a set of api's that exposes",
    "start": "644640",
    "end": "652199"
  },
  {
    "text": "the state of the cluster like the number of resources that's behind the scenes so customers can consume that and actually",
    "start": "652199",
    "end": "659100"
  },
  {
    "text": "build their own custom schedulers on top of us cool",
    "start": "659100",
    "end": "665220"
  },
  {
    "start": "663000",
    "end": "722000"
  },
  {
    "text": "so let's do a quick recap of all the core concepts that ECS offers so there",
    "start": "665220",
    "end": "672720"
  },
  {
    "text": "is a concept of cluster a cluster is basically a logical grouping of all the",
    "start": "672720",
    "end": "678180"
  },
  {
    "text": "resources that you have next is container instances container instances",
    "start": "678180",
    "end": "683880"
  },
  {
    "text": "are ec2 instances with our ECS agent installed on them and ECS agent is a",
    "start": "683880",
    "end": "689580"
  },
  {
    "text": "piece of software that's open sourced that sort of looks at the state of the world on on the instance and sort of",
    "start": "689580",
    "end": "697320"
  },
  {
    "text": "reports back to our back-end service then we have something called at a Stefan ition which is actually how you",
    "start": "697320",
    "end": "704160"
  },
  {
    "text": "define your application a task is actually an instance sation of that task",
    "start": "704160",
    "end": "710640"
  },
  {
    "text": "definition and lastly a service runs and maintains a desired number of copies of",
    "start": "710640",
    "end": "718860"
  },
  {
    "text": "the tasks above cool so let's get back",
    "start": "718860",
    "end": "723900"
  },
  {
    "start": "722000",
    "end": "781000"
  },
  {
    "text": "to our hello world applications so far traditional docker file would push that image to ECR our next step is to create",
    "start": "723900",
    "end": "730110"
  },
  {
    "text": "a task definition and over here we start with a hello world task definition we're using the image that that is the ECR",
    "start": "730110",
    "end": "738390"
  },
  {
    "text": "image then we specify the CPU and memory that's needed for that the port mappings",
    "start": "738390",
    "end": "744030"
  },
  {
    "text": "because we have exposed port 80 and pretty much that's it and then you",
    "start": "744030",
    "end": "750780"
  },
  {
    "text": "you're ready to go to actually start a service from there but to take advantage of other things that task definition",
    "start": "750780",
    "end": "756720"
  },
  {
    "text": "offers you can group multiple containers together in a task definition you can",
    "start": "756720",
    "end": "761790"
  },
  {
    "text": "attach and mount volumes to the task definition and you can also connect the",
    "start": "761790",
    "end": "769200"
  },
  {
    "text": "two containers together and establish a network for them to talk to each other so there's a bunch of capabilities that",
    "start": "769200",
    "end": "774390"
  },
  {
    "text": "you can leverage by defining what you need in the task definition ok we have a",
    "start": "774390",
    "end": "783180"
  },
  {
    "start": "781000",
    "end": "840000"
  },
  {
    "text": "task definition all we need to do is now actually run it so what we do is we",
    "start": "783180",
    "end": "788310"
  },
  {
    "text": "create a service because it's a web app we want it to be running continuously and I've just put up saying that I need",
    "start": "788310",
    "end": "795360"
  },
  {
    "text": "ten copies of that okay now when these ten copies come up you",
    "start": "795360",
    "end": "800569"
  },
  {
    "text": "want them to be able to be discovered easily so for that what we do is front it with the load balancer whoops go back",
    "start": "800569",
    "end": "808040"
  },
  {
    "text": "run it with the load balancer what that does is as soon as container comes up in",
    "start": "808040",
    "end": "814459"
  },
  {
    "text": "the background our ECS scheduler is going to just register these containers to the load",
    "start": "814459",
    "end": "820609"
  },
  {
    "text": "bouncer that makes the discoverability easy the other thing that it does is if",
    "start": "820609",
    "end": "826910"
  },
  {
    "text": "a container were to die accidentally then our ECS scheduler will be able to",
    "start": "826910",
    "end": "833209"
  },
  {
    "text": "recover those containers so Easter service is super useful for such long-running applications all right",
    "start": "833209",
    "end": "841609"
  },
  {
    "start": "840000",
    "end": "854000"
  },
  {
    "text": "there are some other things that you need to think about when you're actually running a service introduction some of",
    "start": "841609",
    "end": "847279"
  },
  {
    "text": "the key things are like deployment logging monitoring and scaling so let's",
    "start": "847279",
    "end": "853069"
  },
  {
    "text": "start with deployment ECS provides you some knobs to actually deploy specify",
    "start": "853069",
    "end": "862009"
  },
  {
    "start": "854000",
    "end": "892000"
  },
  {
    "text": "the deployment bat size so you can specify that with two parameters one is by specifying the minimum healthy",
    "start": "862009",
    "end": "868730"
  },
  {
    "text": "percentage which defines the number of minimum defines the minimum number of",
    "start": "868730",
    "end": "874279"
  },
  {
    "text": "containers that you always want and up and running in your service during the deployment the other parameter that you",
    "start": "874279",
    "end": "881449"
  },
  {
    "text": "specifies the maximum percentage which is the maximum amount of containers that you have to run during a deployment so",
    "start": "881449",
    "end": "889369"
  },
  {
    "text": "let's elaborate a little bit on this so let's look at an example so you have a",
    "start": "889369",
    "end": "895189"
  },
  {
    "text": "service with all green images running four copies on five instances so you",
    "start": "895189",
    "end": "900980"
  },
  {
    "text": "have four tasks up there they're all green and now you have deployed a new purple image that you want to roll out",
    "start": "900980",
    "end": "907220"
  },
  {
    "text": "to your service so what you do here are you have specified the minimum healthy person there's just 50 and by doing that",
    "start": "907220",
    "end": "915559"
  },
  {
    "text": "what the service scheduler the native service scheduler that ECS has it will",
    "start": "915559",
    "end": "921699"
  },
  {
    "text": "take down 50% of your green tasks and replace with new purple tasks so that's",
    "start": "921699",
    "end": "930139"
  },
  {
    "text": "what you see in step two so 50% of that is taken down and replaced and now purple tasks are up and healthy",
    "start": "930139",
    "end": "936440"
  },
  {
    "text": "and in step 3 it will take down the other green months and replace with the purple ones another example is to look",
    "start": "936440",
    "end": "944180"
  },
  {
    "text": "at when the minimum healthy percentage was 100% what happens at that point all",
    "start": "944180",
    "end": "949339"
  },
  {
    "text": "the green ones are kept as it is and new purple ones or ones are launched that's",
    "start": "949339",
    "end": "954350"
  },
  {
    "text": "what you see in step 2 and when the green ones are complete I mean the",
    "start": "954350",
    "end": "960170"
  },
  {
    "text": "purple ones come up the green ones are like a turn down and then your service",
    "start": "960170",
    "end": "965450"
  },
  {
    "text": "is stable again but if you observe the difference between last light on this one oh let me go back and this one",
    "start": "965450",
    "end": "973850"
  },
  {
    "text": "you'll see that because we have specified minimum healthiest 100% we needed new instance two instances to",
    "start": "973850",
    "end": "980480"
  },
  {
    "text": "satisfy the need for our purple tasks so this required required a scale up scale",
    "start": "980480",
    "end": "986390"
  },
  {
    "text": "up of the instances in your cluster as well cool we have deployed our service",
    "start": "986390",
    "end": "993410"
  },
  {
    "text": "now our next thing is to get some logs so AWS has a service called Amazon",
    "start": "993410",
    "end": "1001839"
  },
  {
    "start": "997000",
    "end": "1049000"
  },
  {
    "text": "CloudWatch which is a logging monitoring dashboarding and alarming system so ECS",
    "start": "1001839",
    "end": "1008440"
  },
  {
    "text": "has native integration with cloud watch we also have like other log drivers like",
    "start": "1008440",
    "end": "1013510"
  },
  {
    "text": "syslog and journal deep that we use and with respect to cloud watch you can",
    "start": "1013510",
    "end": "1020110"
  },
  {
    "text": "specify different parameters like the blog group and the log stream prefix that lets you sort of discover these",
    "start": "1020110",
    "end": "1026860"
  },
  {
    "text": "logs easily for your containers so this is how you would specify that in a task",
    "start": "1026860",
    "end": "1032890"
  },
  {
    "text": "definition again you go back you edit the task definition to include a log configuration and then you set the log",
    "start": "1032890",
    "end": "1039339"
  },
  {
    "text": "driver as AWS logs and you can take the options as the log group the region that",
    "start": "1039339",
    "end": "1045188"
  },
  {
    "text": "you want it to be published to and a stream prefix whoa okay we're ready to",
    "start": "1045189",
    "end": "1052480"
  },
  {
    "start": "1049000",
    "end": "1060000"
  },
  {
    "text": "troubleshoot if something goes wrong we have logs but wait a minute how do we know when something goes wrong we need",
    "start": "1052480",
    "end": "1058450"
  },
  {
    "text": "to be able to monitor it and easiest provides some default metrics like CPU",
    "start": "1058450",
    "end": "1065410"
  },
  {
    "text": "and reutilization and reservation for you to measure how your applications are doing",
    "start": "1065410",
    "end": "1071650"
  },
  {
    "text": "so these are some default metrics that ECS provides but additionally you could",
    "start": "1071650",
    "end": "1076750"
  },
  {
    "text": "also look at your error metrics in your logs you can look at your search queue",
    "start": "1076750",
    "end": "1082030"
  },
  {
    "text": "length metrics on your load balancers you you can look at whatever metrics that you want to monitor the health of",
    "start": "1082030",
    "end": "1089290"
  },
  {
    "text": "your application let me show you how it looks at the ECS console this is an",
    "start": "1089290",
    "end": "1095320"
  },
  {
    "start": "1091000",
    "end": "1117000"
  },
  {
    "text": "illustration of how we show the memories utilization and CPU utilization to",
    "start": "1095320",
    "end": "1102250"
  },
  {
    "text": "circle back memory utilization is actually the percentage of resources",
    "start": "1102250",
    "end": "1107470"
  },
  {
    "text": "that are currently being used and memory reservation is a metric that tells you",
    "start": "1107470",
    "end": "1112540"
  },
  {
    "text": "how much is currently allocated in your cluster pool so you have metrics",
    "start": "1112540",
    "end": "1119740"
  },
  {
    "text": "publishing now our next step is to automate actions if these metrics",
    "start": "1119740",
    "end": "1124780"
  },
  {
    "text": "breaches thresholds because you don't want to do this manually right and ECS",
    "start": "1124780",
    "end": "1130120"
  },
  {
    "start": "1128000",
    "end": "1173000"
  },
  {
    "text": "has deep integration with application auto scaling that lets you scale up your ICS resources this could include your",
    "start": "1130120",
    "end": "1137860"
  },
  {
    "text": "easiest services and the containers running in it and additionally it could",
    "start": "1137860",
    "end": "1142870"
  },
  {
    "text": "include the ec2 instances that you need to get your applications running so the",
    "start": "1142870",
    "end": "1149470"
  },
  {
    "text": "way you do that is by looking at by creating an alarm for your service and",
    "start": "1149470",
    "end": "1154480"
  },
  {
    "text": "you specify the thresholds that you want beyond which you want to configure some",
    "start": "1154480",
    "end": "1159910"
  },
  {
    "text": "auto scaling policies and say that you want to increase your desired count for",
    "start": "1159910",
    "end": "1165280"
  },
  {
    "text": "a service by 10% if it breaches your threshold by 50% and you can configure",
    "start": "1165280",
    "end": "1170470"
  },
  {
    "text": "such rules so this is for easier service and this is for ACS cluster so very",
    "start": "1170470",
    "end": "1176500"
  },
  {
    "start": "1173000",
    "end": "1209000"
  },
  {
    "text": "similar configuration other best practices and metrics that people look",
    "start": "1176500",
    "end": "1181750"
  },
  {
    "text": "at or if you're running a service behind a load balancer you want to look at search queue metrics that tell you how",
    "start": "1181750",
    "end": "1189250"
  },
  {
    "text": "how much load do you have and if there's a peak then you probably want to scale up your resources to handle that load",
    "start": "1189250",
    "end": "1194730"
  },
  {
    "text": "and if you were running a batch type workload so if you have an sqs integration then you can",
    "start": "1194730",
    "end": "1201610"
  },
  {
    "text": "also look at approximate number of messages visible and sort of scale up your cluster accordingly alright so",
    "start": "1201610",
    "end": "1210610"
  },
  {
    "start": "1209000",
    "end": "1242000"
  },
  {
    "text": "we've looked at different pieces and like those deep into like what else what",
    "start": "1210610",
    "end": "1216700"
  },
  {
    "text": "we have to think about at each of these steps our last step now is to tie everything together and try to automate",
    "start": "1216700",
    "end": "1223180"
  },
  {
    "text": "as much as possible so we did do that with creating CI CD pipelines there are",
    "start": "1223180",
    "end": "1228310"
  },
  {
    "text": "multiple ways for us to do this you could use AWS code pipelines with lambdas to achieve that or you could use",
    "start": "1228310",
    "end": "1236590"
  },
  {
    "text": "some of the solutions that our partners provide using Jenkins and shippable one such example is using Jenkins so you",
    "start": "1236590",
    "end": "1244150"
  },
  {
    "start": "1242000",
    "end": "1277000"
  },
  {
    "text": "start with your version control it could be a 8 up Louis code commit or it could",
    "start": "1244150",
    "end": "1250240"
  },
  {
    "text": "be github wherever you want to start then you push your code there and that push triggers the Jenkins build and it",
    "start": "1250240",
    "end": "1257740"
  },
  {
    "text": "uses the Jenkins plug-in to build the image and push that image into the ECR",
    "start": "1257740",
    "end": "1263320"
  },
  {
    "text": "repository and then once that's done it goes in update service on ECS and what",
    "start": "1263320",
    "end": "1271150"
  },
  {
    "text": "ECS does is goes and pulls the latest image and then rolls out that to the service awesome so this is our summary",
    "start": "1271150",
    "end": "1279580"
  },
  {
    "start": "1277000",
    "end": "1306000"
  },
  {
    "text": "of like haha the individual steps and different options that you guys have to",
    "start": "1279580",
    "end": "1285550"
  },
  {
    "text": "actually leverage and try to move your containers and move your application to containers and how you would leverage",
    "start": "1285550",
    "end": "1291700"
  },
  {
    "text": "ECS to actually deploy them I'm gonna now hand it over to mcdonalds to learn about how they build their system so",
    "start": "1291700",
    "end": "1299160"
  },
  {
    "text": "here you go - Lena perfect yeah all right Thank You ruff for that great",
    "start": "1299160",
    "end": "1309130"
  },
  {
    "start": "1306000",
    "end": "1330000"
  },
  {
    "text": "session on developing with ecs as well as taking ECS were close to production right good afternoon everybody hope you",
    "start": "1309130",
    "end": "1316120"
  },
  {
    "text": "guys are enjoying reinvent my name is Tilly nirguna Singh ha uh I got from a dance corporation so we are here to talk",
    "start": "1316120",
    "end": "1323470"
  },
  {
    "text": "about a weird mcdonald's use easy s to massively scale a home delivery platform",
    "start": "1323470",
    "end": "1328660"
  },
  {
    "text": "right let's get right to it so we'll talk a bit about and a home delivery solution but most of",
    "start": "1328660",
    "end": "1335760"
  },
  {
    "text": "the time today will be spent on really how we achieved these things like scalability or speed to market security",
    "start": "1335760",
    "end": "1342600"
  },
  {
    "text": "DevOps and monitoring so here's some interesting facts about McDonald's some",
    "start": "1342600",
    "end": "1349740"
  },
  {
    "start": "1346000",
    "end": "1376000"
  },
  {
    "text": "we have 37 thousand restaurants spread across 120 countries globally and we",
    "start": "1349740",
    "end": "1356820"
  },
  {
    "text": "proudly serve about 64 million customers every day right as you know scalability is a difficult",
    "start": "1356820",
    "end": "1363990"
  },
  {
    "text": "problem but scalability with a distributed network like this as well as this level of volumes in terms of scale",
    "start": "1363990",
    "end": "1371580"
  },
  {
    "text": "is even a tougher problem for us to solve right we'll talk a bit about that as we go on here's some of the velocity",
    "start": "1371580",
    "end": "1378450"
  },
  {
    "text": "accelerators that v8 models use number one being our digital transformation the",
    "start": "1378450",
    "end": "1383670"
  },
  {
    "text": "whole premise of our digital transformation is to make it more convenient as well as personalized for",
    "start": "1383670",
    "end": "1390330"
  },
  {
    "text": "our customers to make the whole experience personalized the second pillar is delivery again drawing on that",
    "start": "1390330",
    "end": "1396270"
  },
  {
    "text": "convenience team how would we deliver our food to you when you want to have our food and then the third aspect is",
    "start": "1396270",
    "end": "1403740"
  },
  {
    "text": "the experience of the future this is to actually elevate the restaurant experience and modernize the restaurant",
    "start": "1403740",
    "end": "1409740"
  },
  {
    "text": "experience for our customers right so let's get to the home delivery solution this is where we use DCs to really scale",
    "start": "1409740",
    "end": "1417710"
  },
  {
    "start": "1412000",
    "end": "1490000"
  },
  {
    "text": "we think of this as you as a customer going to something like uber eats and",
    "start": "1417710",
    "end": "1423420"
  },
  {
    "text": "ordering McDonald's food for delivery right so that's kind of the business problem and use case as we work with",
    "start": "1423420",
    "end": "1431190"
  },
  {
    "text": "multiple delivery partners in the world here in the States we use uber uber eats",
    "start": "1431190",
    "end": "1437640"
  },
  {
    "text": "and in European countries we have other partners Asia countries we have further more partners right we've used a generic",
    "start": "1437640",
    "end": "1444570"
  },
  {
    "text": "experience flow for you to walk through the user experience it starts by",
    "start": "1444570",
    "end": "1449670"
  },
  {
    "text": "basically you were picking up a restaurant of to order from then you",
    "start": "1449670",
    "end": "1455010"
  },
  {
    "text": "obviously browse through the menu right and I've used our signature crafted sandwiches here to illustrate and then",
    "start": "1455010",
    "end": "1461940"
  },
  {
    "text": "you basically complete your order build your order basket and complete your right at this point and the order is",
    "start": "1461940",
    "end": "1469590"
  },
  {
    "text": "compete and then the when the delivery rider or driver is close to one of our",
    "start": "1469590",
    "end": "1475409"
  },
  {
    "text": "restaurants the order gets released to the restaurant which we believe in making our food fresh as much as",
    "start": "1475409",
    "end": "1482610"
  },
  {
    "text": "possible as well as giving it to them to the driver to be delivered to you so that's kind of the whole business",
    "start": "1482610",
    "end": "1488669"
  },
  {
    "text": "problem that we're going to talk about so what were some of the critical business requirements for this right so",
    "start": "1488669",
    "end": "1494309"
  },
  {
    "start": "1490000",
    "end": "1561000"
  },
  {
    "text": "um author I mentioned about speed to market right so this was actually a four",
    "start": "1494309",
    "end": "1499830"
  },
  {
    "text": "month duration for us and that's from going from a idea to a concept to development to massive scale right and",
    "start": "1499830",
    "end": "1506909"
  },
  {
    "text": "that's kind of the new norm that we see every day right scalability and reliability of 250",
    "start": "1506909",
    "end": "1513299"
  },
  {
    "text": "to 500 thousand transactions and the notion of peak uber for us happens three",
    "start": "1513299",
    "end": "1518309"
  },
  {
    "text": "times a day every day right because you got to eat with this breakfast lunch and dinner right and to put this in",
    "start": "1518309",
    "end": "1525059"
  },
  {
    "text": "perspective this 250 to 500 thousand transactions per hour translates to",
    "start": "1525059",
    "end": "1530070"
  },
  {
    "text": "about 20,000 transactions per second right so that's kind of the scale that we're talking about here multiple",
    "start": "1530070",
    "end": "1536610"
  },
  {
    "text": "countries support um as I said there's different countries have different business requirements business rules and then also different delivery partners",
    "start": "1536610",
    "end": "1543570"
  },
  {
    "text": "such as uber each right to work with the platform had to do that and then finally the cost sensitivity right so again we",
    "start": "1543570",
    "end": "1550649"
  },
  {
    "text": "are not talking about selling big screen TVs here you're talking about an average check size of about three to five",
    "start": "1550649",
    "end": "1556350"
  },
  {
    "text": "dollars as low as that right so cost sensitivity it's a pretty big thing for us as well so we're gonna spend a bit of",
    "start": "1556350",
    "end": "1563100"
  },
  {
    "start": "1561000",
    "end": "1715000"
  },
  {
    "text": "time on our architecture so this is a under the covers look of our architecture let me see here so the",
    "start": "1563100",
    "end": "1569309"
  },
  {
    "text": "experience that we went through starts here which is the third party delivery platform right so think of this like",
    "start": "1569309",
    "end": "1576749"
  },
  {
    "text": "uber eats right then all our API is are hosted through what's called a API",
    "start": "1576749",
    "end": "1582659"
  },
  {
    "text": "middleware 8 this is consistently using the API gateway pattern right these are",
    "start": "1582659",
    "end": "1588899"
  },
  {
    "text": "all REST API so that's then wired through lbs to easiest right and as you",
    "start": "1588899",
    "end": "1595289"
  },
  {
    "text": "can see ECS is the heart of the solution within acs we have multiple",
    "start": "1595289",
    "end": "1600870"
  },
  {
    "text": "micro-services for illustration purposes we've used to write but it's important",
    "start": "1600870",
    "end": "1606120"
  },
  {
    "text": "to understand that these micro-services also have different scale and runtime profiles right so for example some",
    "start": "1606120",
    "end": "1612510"
  },
  {
    "text": "services that are customer facing will have tremendous scale tremendous",
    "start": "1612510",
    "end": "1618060"
  },
  {
    "text": "reliability tremendous performance requirements right because it's front facing you're hitting that 20,000 TPS",
    "start": "1618060",
    "end": "1624990"
  },
  {
    "text": "all day long right some services could be more like about complex event",
    "start": "1624990",
    "end": "1632130"
  },
  {
    "text": "processing type scenarios where workload optimization is what's important as the",
    "start": "1632130",
    "end": "1637200"
  },
  {
    "text": "author I mentioned you could use different scale profiles using the auto scale policies and cloud watch alarms to",
    "start": "1637200",
    "end": "1644070"
  },
  {
    "text": "trigger the auto scale policy as well as you could use things like task placement strategy to further optimize right and",
    "start": "1644070",
    "end": "1650550"
  },
  {
    "text": "we will go into a bit more detail about how we did that to achieve that scale obviously the order goes to the",
    "start": "1650550",
    "end": "1656550"
  },
  {
    "text": "restaurant right and then behind the scenes are four eventing we use sqs right so think of this as one service",
    "start": "1656550",
    "end": "1663210"
  },
  {
    "text": "wanting to talk to the next service rate through a synchronous pattern we use eventing exclusively for that right and",
    "start": "1663210",
    "end": "1670050"
  },
  {
    "text": "it's not just about scale it's also to be highly responsive and performant",
    "start": "1670050",
    "end": "1675210"
  },
  {
    "text": "right to do that you need to have a lot of things in memory right so we use registers are distributed the caching",
    "start": "1675210",
    "end": "1682560"
  },
  {
    "text": "platform right and it's actually hosted through ElastiCache right so that's how",
    "start": "1682560",
    "end": "1689010"
  },
  {
    "text": "we really hit those transaction volumes at about 100 milliseconds or lower right",
    "start": "1689010",
    "end": "1694800"
  },
  {
    "text": "for each call and then obviously it cannot only be on memory so you have RDS",
    "start": "1694800",
    "end": "1700430"
  },
  {
    "text": "backing readies up as well as s3 for some of the most unstructured data all",
    "start": "1700430",
    "end": "1706740"
  },
  {
    "text": "right so that hopefully gives you an idea about our architecture and how we achieved some of these big volumes such",
    "start": "1706740",
    "end": "1712920"
  },
  {
    "text": "as 20,000 TPS so what were some of the principles that we use right um again",
    "start": "1712920",
    "end": "1719460"
  },
  {
    "start": "1715000",
    "end": "1814000"
  },
  {
    "text": "microservices some is this is not going to be a talk about micro services but here's some principles that we use right",
    "start": "1719460",
    "end": "1726270"
  },
  {
    "text": "having your clean api's right was number one then have a good service model behind that API or",
    "start": "1726270",
    "end": "1733370"
  },
  {
    "text": "was number two right and then then it depends on what level of isolation you",
    "start": "1733370",
    "end": "1739610"
  },
  {
    "text": "require right so you date a model to be isolated as well as your deployments to",
    "start": "1739610",
    "end": "1745010"
  },
  {
    "text": "be isolated so that each micro service can be deployed independently right so getting your micro service strategy is",
    "start": "1745010",
    "end": "1750950"
  },
  {
    "text": "critical for containerization right and then once you get the containerization",
    "start": "1750950",
    "end": "1756710"
  },
  {
    "text": "right orchestration of that containerization is very important to",
    "start": "1756710",
    "end": "1761750"
  },
  {
    "text": "massively scale right and this is where a platform like easiest shines because",
    "start": "1761750",
    "end": "1767780"
  },
  {
    "text": "you get most of them out of the box we also made a conscious decision to use",
    "start": "1767780",
    "end": "1774560"
  },
  {
    "text": "most of our platform services from AWS this is rather than you maintaining your",
    "start": "1774560",
    "end": "1779930"
  },
  {
    "text": "own database cluster or you maintaining your own caching cluster right use these services because they're scalable",
    "start": "1779930",
    "end": "1786020"
  },
  {
    "text": "out-of-the-box right so that was a conscious decision that we made and finally for the developers and software",
    "start": "1786020",
    "end": "1791030"
  },
  {
    "text": "engineers in the room right on your programming model right if you are again having a highly critical customer facing",
    "start": "1791030",
    "end": "1798010"
  },
  {
    "text": "micro service use a synchronous programming model right if you are having a complex event processing type",
    "start": "1798010",
    "end": "1804710"
  },
  {
    "text": "scenario use an async programming model use that programming model to build your micro service and then containerize",
    "start": "1804710",
    "end": "1810710"
  },
  {
    "text": "right that will save you a lot of time all right so let's go under the covers",
    "start": "1810710",
    "end": "1817640"
  },
  {
    "start": "1814000",
    "end": "1852000"
  },
  {
    "text": "and really hit some of these things right so we're talking we're going to talk about speed to market right how we achieve that scalability and reliability",
    "start": "1817640",
    "end": "1824170"
  },
  {
    "text": "what type of task placement strategies or auto scaling policies will be used right I'm going to get into the meat of",
    "start": "1824170",
    "end": "1829940"
  },
  {
    "text": "that security is all about you know reducing your blast radius and attack",
    "start": "1829940",
    "end": "1835850"
  },
  {
    "text": "vectors right so how did we do that at the container level as well as at the service level right finally we'll talk",
    "start": "1835850",
    "end": "1841430"
  },
  {
    "text": "about DevOps how did we integrate our DevOps pipeline I would just based out",
    "start": "1841430",
    "end": "1846440"
  },
  {
    "text": "of Jenkins and then also monitoring once you take it to production how do you monitor significantly so let's get right",
    "start": "1846440",
    "end": "1854390"
  },
  {
    "start": "1852000",
    "end": "2197000"
  },
  {
    "text": "to speed to market right we talked about the four month it's not just about the four months though right it's about also",
    "start": "1854390",
    "end": "1860780"
  },
  {
    "text": "showing progress took back to your business right in this case how do we continuously and show progress and we",
    "start": "1860780",
    "end": "1867250"
  },
  {
    "text": "had like two week dev iterations for this rate what we're easiest and",
    "start": "1867250",
    "end": "1872320"
  },
  {
    "text": "containers really help is you could really have your dev containers then go to staging show progress harm to your",
    "start": "1872320",
    "end": "1878440"
  },
  {
    "text": "business uses very rapidly right so that was one of the big premises of this right then the second thing is the poly",
    "start": "1878440",
    "end": "1885640"
  },
  {
    "text": "got tech stack right so you're bound to have poured that's written in different languages right so in our case we have",
    "start": "1885640",
    "end": "1891910"
  },
  {
    "text": "some code in dotted and some code in Java right some of this might be legacy code that you need to port over right",
    "start": "1891910",
    "end": "1898299"
  },
  {
    "text": "some of this might be like Java is better than dotnet for certain things right but if the good ol days you have",
    "start": "1898299",
    "end": "1905559"
  },
  {
    "text": "to like do native integration from dotnet to Java right but the beauty of",
    "start": "1905559",
    "end": "1911580"
  },
  {
    "text": "something like containerization as well as ECS is now you could host it in two",
    "start": "1911580",
    "end": "1917260"
  },
  {
    "text": "different containers right and make the two containers talk to each other through an API right so that was also",
    "start": "1917260",
    "end": "1922360"
  },
  {
    "text": "pretty big benefit to achieve speed the simplified easiest deployment model or",
    "start": "1922360",
    "end": "1927549"
  },
  {
    "text": "throbbin through that in detail so I'll skip that point here's another important thing right so typically you as good",
    "start": "1927549",
    "end": "1934210"
  },
  {
    "text": "developers we all write code right and then we basically do a level of testing",
    "start": "1934210",
    "end": "1940150"
  },
  {
    "text": "do a level of performance testing right and then take this massive cycle of",
    "start": "1940150",
    "end": "1946260"
  },
  {
    "text": "integration and scaling right so to hit these volumes normally it takes a long",
    "start": "1946260",
    "end": "1951730"
  },
  {
    "text": "time right but the good news is if you containerize this right and use ECS and the correct auto scaling and task placement",
    "start": "1951730",
    "end": "1958870"
  },
  {
    "text": "strategies we almost got this out of the box right so it was a pretty significant point for us and then finally the devops",
    "start": "1958870",
    "end": "1965950"
  },
  {
    "text": "integration is yes integrating with our DevOps tool chain very easily really",
    "start": "1965950",
    "end": "1971500"
  },
  {
    "text": "helped us right so that's Peter market next we'll talk about scalability and reliability so I'm",
    "start": "1971500",
    "end": "1977470"
  },
  {
    "text": "gonna introduce one of my solutions architect man Jeeva Silva he's going to talk about not only scalability and",
    "start": "1977470",
    "end": "1984549"
  },
  {
    "text": "reliability but also security and also DevOps as well as he'll end with some",
    "start": "1984549",
    "end": "1990220"
  },
  {
    "text": "real-world container problems that we had to face and overcome right to scale to this level and you",
    "start": "1990220",
    "end": "1997159"
  },
  {
    "text": "oh come on Joe Silva so let me for the",
    "start": "1997159",
    "end": "2003460"
  },
  {
    "text": "next few slides what I will do is I'm going to run through how we use EEZs as",
    "start": "2003460",
    "end": "2008979"
  },
  {
    "text": "well as other AWS features to achieve the non-functional requirements right so",
    "start": "2008979",
    "end": "2014619"
  },
  {
    "text": "let's start with the scalability and reliability so as still dimension we got the we got the scale targets to achieve",
    "start": "2014619",
    "end": "2021239"
  },
  {
    "text": "250 to 500 thousand orders per hour with about 100 millisecond response time so",
    "start": "2021239",
    "end": "2027489"
  },
  {
    "text": "how we achieve this by using auto scaling with which ECS provides",
    "start": "2027489",
    "end": "2032889"
  },
  {
    "text": "out-of-the-box right as ultra mentioned right you just have to configure the the policies for the auto scaling and it",
    "start": "2032889",
    "end": "2039879"
  },
  {
    "text": "will work so SES auto scaling will provide two levels of auto scale one is",
    "start": "2039879",
    "end": "2045190"
  },
  {
    "text": "for the ECS the ec2 layer which will scale your EC tools and that second",
    "start": "2045190",
    "end": "2051760"
  },
  {
    "text": "layer is to scale your tasks so how we approach this was we initially did some",
    "start": "2051760",
    "end": "2058480"
  },
  {
    "text": "performance tests to run some load to mimic cover production to I identify",
    "start": "2058480",
    "end": "2064628"
  },
  {
    "text": "what is our production load is going to look like because this is really important you need to know how is your",
    "start": "2064629",
    "end": "2070720"
  },
  {
    "text": "load is going to look like in the production so with that we were able to",
    "start": "2070720",
    "end": "2075760"
  },
  {
    "text": "derive the attributes or the thresholds for those or auto scaling policies so",
    "start": "2075760",
    "end": "2082179"
  },
  {
    "text": "then we configure the ec2 auto scaling policies as well as the container auto scaling policies and also it's very",
    "start": "2082179",
    "end": "2089319"
  },
  {
    "text": "critical to get this values corrected because otherwise you will have some",
    "start": "2089319",
    "end": "2094569"
  },
  {
    "text": "issues when you are scaling out as well and scaling it so it's pretty important to get that corrected at the first time",
    "start": "2094569",
    "end": "2101250"
  },
  {
    "text": "so once we done read that you know we were able to achieve the targets right to 250 to find a thousand orders per",
    "start": "2101250",
    "end": "2109660"
  },
  {
    "text": "hour and the next task was to kind of fine-tune this more right so we got two",
    "start": "2109660",
    "end": "2116170"
  },
  {
    "text": "more requirements as Tilda mentioned before the two requirements that we got was to make sure some of the containers",
    "start": "2116170",
    "end": "2122920"
  },
  {
    "text": "should run in isolation all right so we have some requirements say that for instance you know certain country",
    "start": "2122920",
    "end": "2130040"
  },
  {
    "text": "we need to run those antennas in isolation from the others right so that was a one-off érik comas the second",
    "start": "2130040",
    "end": "2135680"
  },
  {
    "text": "requirement swastikas cost sensitivity which that you need to optimize your cost right so those two requirements we",
    "start": "2135680",
    "end": "2142880"
  },
  {
    "text": "were able to achieve by using the task placement strategies and the constraints",
    "start": "2142880",
    "end": "2147950"
  },
  {
    "text": "so you just want to show how we use the task placement strategies and the constraints I have given like three",
    "start": "2147950",
    "end": "2155210"
  },
  {
    "text": "examples here by three services and these three services will have different",
    "start": "2155210",
    "end": "2160840"
  },
  {
    "text": "requirements in terms of scalability and are reliable right so let's take the",
    "start": "2160840",
    "end": "2166430"
  },
  {
    "text": "first service so the first service will require a high availability and also reliability and the second service we",
    "start": "2166430",
    "end": "2175100"
  },
  {
    "text": "would like to it suggests a batch mode match processing mode but that requires",
    "start": "2175100",
    "end": "2181790"
  },
  {
    "text": "two we need to optimize the load on the cluster so that's the requirements for",
    "start": "2181790",
    "end": "2186890"
  },
  {
    "text": "the second service the third service which I was talking earlier which",
    "start": "2186890",
    "end": "2191930"
  },
  {
    "text": "requires some kind of isolation from the other containers so let's go back and",
    "start": "2191930",
    "end": "2198200"
  },
  {
    "text": "see how we use this placement strategies and constraints to achieve this right so",
    "start": "2198200",
    "end": "2204440"
  },
  {
    "text": "I just want to be to this diagram so the diagram shows you right on the top you can see the tasks or the containers get",
    "start": "2204440",
    "end": "2211520"
  },
  {
    "text": "auto scale using the policies that you have configured right and the bottom you can see the easy tools are getting auto",
    "start": "2211520",
    "end": "2218570"
  },
  {
    "text": "scale again using the auto scaling policies that you have and in the middle you can see the task placement",
    "start": "2218570",
    "end": "2225500"
  },
  {
    "text": "strategies and the constraints are applied so that the the easiest can",
    "start": "2225500",
    "end": "2231380"
  },
  {
    "text": "decide exactly where the tasks has to be placed into the which AC - here's to be",
    "start": "2231380",
    "end": "2237830"
  },
  {
    "text": "placed right okay let's go back to the those example three examples that I had",
    "start": "2237830",
    "end": "2243280"
  },
  {
    "text": "first service one service one no if you can remember it requires high",
    "start": "2243280",
    "end": "2248810"
  },
  {
    "text": "availability which means that we need to have that tasks across all our",
    "start": "2248810",
    "end": "2253940"
  },
  {
    "text": "availability zones so for that we use the spaceman strategy call spread and",
    "start": "2253940",
    "end": "2259670"
  },
  {
    "text": "the attribute here we have specified as well Emily stone which means that when",
    "start": "2259670",
    "end": "2265359"
  },
  {
    "text": "the easiest place in those tasks it will make sure that it will place all the",
    "start": "2265359",
    "end": "2270609"
  },
  {
    "text": "tasks across all the availability zones that we have in our cluster right but as",
    "start": "2270609",
    "end": "2276490"
  },
  {
    "text": "dimension you can have different attributes like you can have instance type or in certain IDs depends on your",
    "start": "2276490",
    "end": "2281920"
  },
  {
    "text": "use case but for us it's the abilities so ok let's go to the service to service",
    "start": "2281920",
    "end": "2287710"
  },
  {
    "text": "to was a batch processing service so we",
    "start": "2287710",
    "end": "2293410"
  },
  {
    "text": "want to make sure that process runs in a more efficient way right so that will kind of goes to our cost optimization so",
    "start": "2293410",
    "end": "2301390"
  },
  {
    "text": "for that what we selected was to beam back on the memory so with that ECS",
    "start": "2301390",
    "end": "2307930"
  },
  {
    "text": "we'll make sure that all this wins a place in the new containers or the new tasks it will make sure that it'll",
    "start": "2307930",
    "end": "2313750"
  },
  {
    "text": "optimize the memory on the cluster right and then we get a cosmetic way out of it",
    "start": "2313750",
    "end": "2319440"
  },
  {
    "text": "the tasks free so tasks required some kind of isolation so for that we we what we do is we",
    "start": "2319440",
    "end": "2327880"
  },
  {
    "text": "create a task group right and then we when your place in the this containers",
    "start": "2327880",
    "end": "2333430"
  },
  {
    "text": "we say that ok place these containers with this trash group so also when we",
    "start": "2333430",
    "end": "2339369"
  },
  {
    "text": "are when we configure the other routes we can say not to place these other",
    "start": "2339369",
    "end": "2344800"
  },
  {
    "text": "containers if there's a container that is tagged with this particular task group it's ok so let's move to security",
    "start": "2344800",
    "end": "2355119"
  },
  {
    "start": "2352000",
    "end": "2494000"
  },
  {
    "text": "so this again a big thing on the these days right security especially when",
    "start": "2355119",
    "end": "2360369"
  },
  {
    "text": "you're running containers on a cluster so just want to touch up two things one is the container security and other one",
    "start": "2360369",
    "end": "2366850"
  },
  {
    "text": "is the ECS instance security this yes instance is basically the easy to see the whole security right that's a term",
    "start": "2366850",
    "end": "2373660"
  },
  {
    "text": "that AWS has so let's go to the container security this container security wiII not be controlled by using",
    "start": "2373660",
    "end": "2380740"
  },
  {
    "text": "IM policies will make sure that we have we give only the permission that is required for the others for that",
    "start": "2380740",
    "end": "2387940"
  },
  {
    "text": "container so you can control all your AWS resource access through the IM",
    "start": "2387940",
    "end": "2394240"
  },
  {
    "text": "policies so you don't want to give like for instance if the content is does not require any elastic cache access you don't want to",
    "start": "2394240",
    "end": "2400900"
  },
  {
    "text": "specify that right in your policy just specify what is just the minimum security of any access you need or to",
    "start": "2400900",
    "end": "2408580"
  },
  {
    "text": "the container the second point is kind of inherited from our architecture as",
    "start": "2408580",
    "end": "2414640"
  },
  {
    "text": "Tina mentioned we were lot of the inter-service communication is happening through the eventing patent because of",
    "start": "2414640",
    "end": "2422260"
  },
  {
    "text": "that we don't have lot of API exposed to between the services that we reduce our",
    "start": "2422260",
    "end": "2427480"
  },
  {
    "text": "attack footprint the second point is ACS instance security so this is important",
    "start": "2427480",
    "end": "2434620"
  },
  {
    "text": "because all these containers will run on these DCC tools right you have to make sure the CC tools are patched and",
    "start": "2434620",
    "end": "2441160"
  },
  {
    "text": "hardened so that there's no anyone abilities on the custom so for this we",
    "start": "2441160",
    "end": "2448150"
  },
  {
    "text": "use our we have automated process we that we get the latest AWS easiest",
    "start": "2448150",
    "end": "2455950"
  },
  {
    "text": "optimized ami and then we apply our own hardening and we install our own security clients on that and they need",
    "start": "2455950",
    "end": "2462760"
  },
  {
    "text": "to spit out the application specific AMI so we call this process s our ami",
    "start": "2462760",
    "end": "2468820"
  },
  {
    "text": "Factory is automated and also aw says a",
    "start": "2468820",
    "end": "2474010"
  },
  {
    "text": "SNS topic even they were they publish a new AMI they will publish a notification",
    "start": "2474010",
    "end": "2480040"
  },
  {
    "text": "to their tetanus pop topic so we we kind of subscribe to the topic automatically",
    "start": "2480040",
    "end": "2485800"
  },
  {
    "text": "the pipeline will run that and we'll get the latest airline and let's get hooked",
    "start": "2485800",
    "end": "2490840"
  },
  {
    "text": "into our DevOps pipeline so that's what I'm going to talk about next so DevOps and CI CD so this is was",
    "start": "2490840",
    "end": "2499150"
  },
  {
    "start": "2494000",
    "end": "2600000"
  },
  {
    "text": "really critical for us since you know we have to deliver this within a very short time right so we need to get this from",
    "start": "2499150",
    "end": "2507010"
  },
  {
    "text": "the day one we know it cannot do Dave ups at the end of the development right",
    "start": "2507010",
    "end": "2512290"
  },
  {
    "text": "so it has to start with the development when we start this so the the base of",
    "start": "2512290",
    "end": "2517690"
  },
  {
    "text": "the Abydos pipe and is having two components main components one is a Jenkins the one is a terraform so",
    "start": "2517690",
    "end": "2524680"
  },
  {
    "text": "Jenkins basically does the orchestration of the pipeline right getting everything compiled and down",
    "start": "2524680",
    "end": "2531410"
  },
  {
    "text": "and terraform will taking take care of the deployment of the containers to the",
    "start": "2531410",
    "end": "2536630"
  },
  {
    "text": "cluster as well as the other ADA bliss resources so just want to walk you",
    "start": "2536630",
    "end": "2541759"
  },
  {
    "text": "through with the the pipeline very high over so you start with as you dimension",
    "start": "2541759",
    "end": "2547339"
  },
  {
    "text": "right you compile the image and we have some validation script which will",
    "start": "2547339",
    "end": "2554000"
  },
  {
    "text": "validate the integrity of these images to whether they are using the correct",
    "start": "2554000",
    "end": "2560509"
  },
  {
    "text": "base a doctoral image and all our configuration is correct and once that's",
    "start": "2560509",
    "end": "2565730"
  },
  {
    "text": "done it gets uploaded into s3 bucket and then from there the Jenkins pipeline",
    "start": "2565730",
    "end": "2571309"
  },
  {
    "text": "will get triggered and the Jenkins will get the docker images again it will run",
    "start": "2571309",
    "end": "2576650"
  },
  {
    "text": "some integrations test to make sure all the integration tests are passed and that is good it gets uploaded to the",
    "start": "2576650",
    "end": "2584329"
  },
  {
    "text": "easier which is the repository for the images and from there onwards it will",
    "start": "2584329",
    "end": "2590779"
  },
  {
    "text": "the terraform will take over download those images and then it gets deployed",
    "start": "2590779",
    "end": "2595819"
  },
  {
    "text": "into the cluster right okay so next is a monitoring so we use two",
    "start": "2595819",
    "end": "2605930"
  },
  {
    "start": "2600000",
    "end": "2681000"
  },
  {
    "text": "components for monitoring of the platform the first one is nearly the",
    "start": "2605930",
    "end": "2612349"
  },
  {
    "text": "second is the elf stack right so new relic we use to get all the telemetry data of the ec2 instances containers as",
    "start": "2612349",
    "end": "2619910"
  },
  {
    "text": "well as the aw pass components slice SQS ElastiCache and all that so we get all",
    "start": "2619910",
    "end": "2626779"
  },
  {
    "text": "that telemetry data into a dashboards so we can see you know in one dashboard",
    "start": "2626779",
    "end": "2632089"
  },
  {
    "text": "everything about the ec tools of the containers as well as some of the AWS",
    "start": "2632089",
    "end": "2638029"
  },
  {
    "text": "path components so for the application login we use elf stack right that's a",
    "start": "2638029",
    "end": "2644599"
  },
  {
    "text": "typical there's implementation but for the log driver which ultra mention right",
    "start": "2644599",
    "end": "2650650"
  },
  {
    "text": "ECS supports many of the log drivers we here we are using syslog which it will",
    "start": "2650650",
    "end": "2657740"
  },
  {
    "text": "stream all the logs of the containers to log stash and the dog stash will forward that to the elastics",
    "start": "2657740",
    "end": "2664460"
  },
  {
    "text": "and the Cabana we used for the visualization since we are not in our",
    "start": "2664460",
    "end": "2670040"
  },
  {
    "text": "containers we don't store there's no persistent layer right so we don't persist anything on the containers or",
    "start": "2670040",
    "end": "2675230"
  },
  {
    "text": "the ICI tools so everything gets still three mouths two logs - okay so finally",
    "start": "2675230",
    "end": "2683000"
  },
  {
    "start": "2681000",
    "end": "2904000"
  },
  {
    "text": "I just want to touch up two points that these are the challenges that few of the challenges we had right during our this",
    "start": "2683000",
    "end": "2690890"
  },
  {
    "text": "four-month the development the first one was it was due to a we are get we were",
    "start": "2690890",
    "end": "2697490"
  },
  {
    "text": "getting out of memory errors of the containers so this was a known issue",
    "start": "2697490",
    "end": "2703010"
  },
  {
    "text": "between even the doctor and the Linux community the issue here is the",
    "start": "2703010",
    "end": "2709040"
  },
  {
    "text": "application run time which runs inside the container it's not seeing is the container memory limits so it will see",
    "start": "2709040",
    "end": "2716360"
  },
  {
    "text": "the host memory limits because you know because of that the gee garbage collection is not triggering properly",
    "start": "2716360",
    "end": "2722690"
  },
  {
    "text": "and the certeza out of memory exception the the root cause for this is the C",
    "start": "2722690",
    "end": "2729080"
  },
  {
    "text": "groups are not I would say contain a friendly or containerized because of",
    "start": "2729080",
    "end": "2734210"
  },
  {
    "text": "that the application runtime will not see those memory limits right there are",
    "start": "2734210",
    "end": "2739550"
  },
  {
    "text": "few workarounds to go work for this the one is that if it is Java Runtime you",
    "start": "2739550",
    "end": "2745850"
  },
  {
    "text": "can set the heap size to so a certain limit unfortunately at this time we were",
    "start": "2745850",
    "end": "2751940"
  },
  {
    "text": "running at dotnet 4 with that version did not have that feature but I think",
    "start": "2751940",
    "end": "2758300"
  },
  {
    "text": "the latest dotnet Co version have the same free gist Java heap size but at",
    "start": "2758300",
    "end": "2764150"
  },
  {
    "text": "that time we decided to use this LS CFS filesystem which will kind of virtualize",
    "start": "2764150",
    "end": "2770450"
  },
  {
    "text": "all the C groups into the runtime so the runtime can now see the memory limits",
    "start": "2770450",
    "end": "2775760"
  },
  {
    "text": "which the container has the second is related to a network so by default",
    "start": "2775760",
    "end": "2785080"
  },
  {
    "text": "ECS provide different to actually now is 3 but initially it was to network modes",
    "start": "2785080",
    "end": "2791780"
  },
  {
    "text": "one is the bridge another one is the direct into he did a network connection so as a",
    "start": "2791780",
    "end": "2801050"
  },
  {
    "text": "default we are using the bridge network which means that all the containers are",
    "start": "2801050",
    "end": "2806480"
  },
  {
    "text": "placed behind a docker bridge so the docker bridge gets connected to the host",
    "start": "2806480",
    "end": "2812110"
  },
  {
    "text": "elastic interface a network interface but we had a different requirement from",
    "start": "2812110",
    "end": "2819440"
  },
  {
    "text": "our security group to have to route all our container traffic through a different elastic like a secondary",
    "start": "2819440",
    "end": "2827420"
  },
  {
    "text": "interface that we have in our hosts but the the issue here was the docker bridge",
    "start": "2827420",
    "end": "2834230"
  },
  {
    "text": "was not honoring that routing rule was always hardwired to the primary",
    "start": "2834230",
    "end": "2839900"
  },
  {
    "text": "interface of the the ec2 so because of that we were not able to give that makes",
    "start": "2839900",
    "end": "2848810"
  },
  {
    "text": "use of that feature so what we did was we have to do some custom implementation",
    "start": "2848810",
    "end": "2853970"
  },
  {
    "text": "on the docker bridge to make sure that all the traffic that gets routed to the",
    "start": "2853970",
    "end": "2859210"
  },
  {
    "text": "the secondary interface so that was a custom information that we did at that",
    "start": "2859210",
    "end": "2864860"
  },
  {
    "text": "time but I think now a few weeks ago ECS team have released exactly the solution",
    "start": "2864860",
    "end": "2871580"
  },
  {
    "text": "that we wanted right it's called the AWS VPC which will allow you to directly",
    "start": "2871580",
    "end": "2877400"
  },
  {
    "text": "bind your elastic interface to a docker container or a cask so now you can have",
    "start": "2877400",
    "end": "2884210"
  },
  {
    "text": "one-to-one IP mapping of all your tasks to your network interface which will",
    "start": "2884210",
    "end": "2890600"
  },
  {
    "text": "give you a lot of capability of you know granular capability of controlling your",
    "start": "2890600",
    "end": "2896000"
  },
  {
    "text": "network as well as implementing security on top of that okay just to wrap up I will hand over to Selina just to yeah",
    "start": "2896000",
    "end": "2905570"
  },
  {
    "start": "2904000",
    "end": "3008000"
  },
  {
    "text": "thanks man Jeeva so some final takeaways and thoughts for you guys right number",
    "start": "2905570",
    "end": "2912500"
  },
  {
    "text": "one is you need good micro services to continue right right so I think that's probably stating the obvious at this",
    "start": "2912500",
    "end": "2918500"
  },
  {
    "text": "point but having a good micro service strategy will enable scalability reliability and good containerization",
    "start": "2918500",
    "end": "2925070"
  },
  {
    "text": "once you have a good container containerization and a microservice",
    "start": "2925070",
    "end": "2930200"
  },
  {
    "text": "strategy massive scale is really achievable through easy s right so a big kudos to the easiest team for making",
    "start": "2930200",
    "end": "2936950"
  },
  {
    "text": "this available out of the box right so the auto-scaling policies that man shiva mentioned as well as the task placement",
    "start": "2936950",
    "end": "2943640"
  },
  {
    "text": "strategies really helped us go achieve this 20,000 TPS within a hundred milliseconds for each call right and",
    "start": "2943640",
    "end": "2950630"
  },
  {
    "text": "we've tried to break this as well it didn't break so was awesome to see moving to",
    "start": "2950630",
    "end": "2957920"
  },
  {
    "text": "containers if you haven't done it do it there to simplify your life so much right if all the way from development to",
    "start": "2957920",
    "end": "2966320"
  },
  {
    "text": "go to production right that's been awesome right and then easy is out-of-the-box capabilities such as alb",
    "start": "2966320",
    "end": "2973280"
  },
  {
    "text": "integration from dev on right to ECS really helped us right again cutting down your development time and maybe",
    "start": "2973280",
    "end": "2979910"
  },
  {
    "text": "also simplifying things and reducing complexity right so these were some of the big learnings for us big kudos to",
    "start": "2979910",
    "end": "2987920"
  },
  {
    "text": "our development teams and partners as well the main development team was based out of Hungary right so big kudos for",
    "start": "2987920",
    "end": "2993650"
  },
  {
    "text": "them and hope you guys enjoyed our learnings and the talk in general we'll",
    "start": "2993650",
    "end": "2999290"
  },
  {
    "text": "be around for another 15 minutes or so thank you very much [Applause]",
    "start": "2999290",
    "end": "3010159"
  }
]