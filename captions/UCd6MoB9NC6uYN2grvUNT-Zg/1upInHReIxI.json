[
  {
    "start": "0",
    "end": "99000"
  },
  {
    "text": "hello everyone my name is Deepak Dharma I'm a product manager here in the Amazon",
    "start": "50",
    "end": "5150"
  },
  {
    "text": "container services team we will be talking about deeper dive into container",
    "start": "5150",
    "end": "11160"
  },
  {
    "text": "networking with me I have Shakeel Satya he is VP of engineering at",
    "start": "11160",
    "end": "16800"
  },
  {
    "text": "Fox digital consumer group he will be sharing his experience working with ECS",
    "start": "16800",
    "end": "23400"
  },
  {
    "text": "and scaling for networking for micro services architecture and some of the",
    "start": "23400",
    "end": "28980"
  },
  {
    "text": "lessons they've learned and and some of the best practices as well so I'll just kick off this is a 400 level session we",
    "start": "28980",
    "end": "38730"
  },
  {
    "text": "will cover container networking with Amazon ECS the first mode that we will",
    "start": "38730",
    "end": "45030"
  },
  {
    "text": "talk about is the bridge mode which if you're familiar with container networking as surf the most popular mode",
    "start": "45030",
    "end": "52949"
  },
  {
    "text": "that you have been using the TCS sort of the D factor and recently introduced",
    "start": "52949",
    "end": "57989"
  },
  {
    "text": "just two weeks ago tasks networking mode or as we call syntactically being",
    "start": "57989",
    "end": "63030"
  },
  {
    "text": "correct AWS PPC mode and then shaquille will go over the story at Fox with respect to",
    "start": "63030",
    "end": "70530"
  },
  {
    "text": "networking for micro services so this is a 400 level course 400 level sessions so",
    "start": "70530",
    "end": "78390"
  },
  {
    "text": "it assumes familiarity at some level with respect to either V PC or containers or networking one of you know",
    "start": "78390",
    "end": "85710"
  },
  {
    "text": "one of the three and I can quickly bring up to speed with respect to some terminology that I will use in this in",
    "start": "85710",
    "end": "92790"
  },
  {
    "text": "the rest of the session so if you're not familiar with ECS but you're familiar with containers and networking this",
    "start": "92790",
    "end": "98130"
  },
  {
    "text": "should just resonate with you so first is elastic network interface if",
    "start": "98130",
    "end": "104670"
  },
  {
    "start": "99000",
    "end": "99000"
  },
  {
    "text": "you're running and ec2 instance in Amazon V PC today you're using an",
    "start": "104670",
    "end": "110490"
  },
  {
    "text": "elastic network interface it enables your routing to the rest of the world",
    "start": "110490",
    "end": "116670"
  },
  {
    "text": "and within the V PC and within the AWS cloud itself each a and I gets its own",
    "start": "116670",
    "end": "123500"
  },
  {
    "text": "private ipv4 address and optionally you can also get a public address or over",
    "start": "123500",
    "end": "131520"
  },
  {
    "text": "ipv6 address also INRI addresses and you can configure your security groups on a per ani level",
    "start": "131520",
    "end": "139950"
  },
  {
    "text": "for the application that you are running so you can configure the inbound or outbound access that you should be",
    "start": "139950",
    "end": "146650"
  },
  {
    "text": "having so let's talk about some of the",
    "start": "146650",
    "end": "151780"
  },
  {
    "start": "149000",
    "end": "149000"
  },
  {
    "text": "ACS constructs we will discuss the first is a task definition a task definition",
    "start": "151780",
    "end": "157329"
  },
  {
    "text": "is essentially a defines an unit of an application that you want to run using",
    "start": "157329",
    "end": "165310"
  },
  {
    "text": "containers usually you want to run containers together whether they support",
    "start": "165310",
    "end": "170410"
  },
  {
    "text": "each other or for logging purposes or any other utility purposes or they just built that way so the task definition",
    "start": "170410",
    "end": "177909"
  },
  {
    "text": "enables you to define that application how those containers network and which",
    "start": "177909",
    "end": "185739"
  },
  {
    "text": "images they use and you define the CPU and memory requirements at the container",
    "start": "185739",
    "end": "191260"
  },
  {
    "text": "level here's the Amazon ECS cluster a",
    "start": "191260",
    "end": "197470"
  },
  {
    "text": "cluster is a logical isolation for every",
    "start": "197470",
    "end": "203549"
  },
  {
    "text": "task that you are running in your ECS so in an ECS cluster you can register ec2",
    "start": "203549",
    "end": "211329"
  },
  {
    "text": "instances that you're running so I will also refer to them as ETS instances and",
    "start": "211329",
    "end": "217750"
  },
  {
    "text": "once they are registered you have set up your auto scaling group you can start running tasks on them until yesterday",
    "start": "217750",
    "end": "225760"
  },
  {
    "text": "that was the only way you could run containers on ECS we launched Amazon AWS",
    "start": "225760",
    "end": "231459"
  },
  {
    "text": "Fargate yesterday and with that you while you don't have to register ec2",
    "start": "231459",
    "end": "238269"
  },
  {
    "text": "instances anymore it remained the cluster remains a this administrative",
    "start": "238269",
    "end": "243549"
  },
  {
    "text": "boundary within which you can run your applications so you can still control",
    "start": "243549",
    "end": "248799"
  },
  {
    "text": "who can view or run tasks within this cluster with the Fargate launch type so",
    "start": "248799",
    "end": "258400"
  },
  {
    "text": "a task is a instantiation of your task definition that you just define you can",
    "start": "258400",
    "end": "264760"
  },
  {
    "text": "take a same task definition for the same application run within different clusters for different",
    "start": "264760",
    "end": "271040"
  },
  {
    "text": "environments if you're running dev rod and so on and then we have a notion of a",
    "start": "271040",
    "end": "277310"
  },
  {
    "text": "service in ETS where a service is essentially a manage task you can define",
    "start": "277310",
    "end": "282590"
  },
  {
    "text": "the state the desired state of your application with CSS service service",
    "start": "282590",
    "end": "289480"
  },
  {
    "text": "scheduler so you can say I want to run n number of these tasks as a minimum",
    "start": "289480",
    "end": "295190"
  },
  {
    "text": "across three different availability zones for resiliency and ECS maintains",
    "start": "295190",
    "end": "300470"
  },
  {
    "text": "that state for you may text on the tasks health if a tasks dies it spawns a new",
    "start": "300470",
    "end": "305990"
  },
  {
    "text": "one to maintain your desired count in that sense and if you are sea observing",
    "start": "305990",
    "end": "312050"
  },
  {
    "text": "a lot of load on your existing tassets also you will able to launch more tasks",
    "start": "312050",
    "end": "317090"
  },
  {
    "text": "based on those metrics so here's an",
    "start": "317090",
    "end": "323360"
  },
  {
    "start": "322000",
    "end": "322000"
  },
  {
    "text": "example of the task definition here we have defined the name of the name of the",
    "start": "323360",
    "end": "330950"
  },
  {
    "text": "containers the CPU and memory requirements and the port mappings that I want to use port 80 exposed from this",
    "start": "330950",
    "end": "338810"
  },
  {
    "text": "container with the protocol DCP will quickly come to how that translates into",
    "start": "338810",
    "end": "345380"
  },
  {
    "text": "the task level port mappings but each container defines its own container port",
    "start": "345380",
    "end": "351230"
  },
  {
    "text": "mappings so let's talk about the container networking modes with ECS as I",
    "start": "351230",
    "end": "358400"
  },
  {
    "text": "mentioned earlier there there's a bridge and a task networking mode there are two more modes that that are there one is a",
    "start": "358400",
    "end": "365690"
  },
  {
    "start": "359000",
    "end": "359000"
  },
  {
    "text": "host mode where essentially containers use the hosts network stack and all",
    "start": "365690",
    "end": "371270"
  },
  {
    "text": "interfaces from the host will be available to the Container obviously",
    "start": "371270",
    "end": "376640"
  },
  {
    "text": "from a network isolation standpoint that has not been a very popular choice and",
    "start": "376640",
    "end": "382820"
  },
  {
    "text": "then the other mode that I have not spoken about yet is the nun where you don't really need any networking you're",
    "start": "382820",
    "end": "388700"
  },
  {
    "text": "writing something locally and that's really the purpose of life of that container that you're running and that",
    "start": "388700",
    "end": "395030"
  },
  {
    "text": "works for that specific you know small set of use cases so with that in mind",
    "start": "395030",
    "end": "400600"
  },
  {
    "text": "I will only focus on the bridge mode and the tacit working mode as we see these",
    "start": "400600",
    "end": "406840"
  },
  {
    "text": "two as the dominant ways of deploying your containers and networking them so",
    "start": "406840",
    "end": "415930"
  },
  {
    "text": "let's do a quick primer of the bridge mode a bridge mode is in a bridge mode",
    "start": "415930",
    "end": "424750"
  },
  {
    "text": "container share the same network interface as the instance you may have",
    "start": "424750",
    "end": "429970"
  },
  {
    "text": "not only multiple containers here in this case you have two different tasks",
    "start": "429970",
    "end": "436570"
  },
  {
    "text": "and they can share the same a and I that is allocated to your ec2 instance and",
    "start": "436570",
    "end": "446520"
  },
  {
    "text": "it's the same single network namespace for that purposes so let's do a quick",
    "start": "446760",
    "end": "455050"
  },
  {
    "start": "454000",
    "end": "454000"
  },
  {
    "text": "packet walkthrough of how the bridge networking mode works each container",
    "start": "455050",
    "end": "460480"
  },
  {
    "text": "gets its own network namespace containers are connected to each other",
    "start": "460480",
    "end": "465970"
  },
  {
    "text": "and the global default namespace wire the docker zero bridge here and each can",
    "start": "465970",
    "end": "471100"
  },
  {
    "text": "and each container it's its scope IP has a scope ipv4 address now that ipv4",
    "start": "471100",
    "end": "477430"
  },
  {
    "text": "address is not a routable address its own its significance is only local to",
    "start": "477430",
    "end": "482680"
  },
  {
    "text": "the task and be able to talk to containers within the task for example you need to go through dr0 bridge for",
    "start": "482680",
    "end": "489790"
  },
  {
    "text": "any any external communication so let's look at here we have a packet that we",
    "start": "489790",
    "end": "497950"
  },
  {
    "text": "want to send from 1000 - 7 - 10 0 0 to 6 and know that the packets destination",
    "start": "497950",
    "end": "505450"
  },
  {
    "text": "cannot be the ipv4 address of the container here and that's because as I",
    "start": "505450",
    "end": "511600"
  },
  {
    "text": "mentioned earlier there's no significance of that address outside so here we have the first the first hop for",
    "start": "511600",
    "end": "519640"
  },
  {
    "text": "the packet is going to the dr. 0 bridge the docket for forwarding rules on the",
    "start": "519640",
    "end": "524740"
  },
  {
    "text": "bridge forward this packet out to the 8th 0 interface which is seen in the",
    "start": "524740",
    "end": "529810"
  },
  {
    "text": "next diagram here VPC because this is e and i and it ni is",
    "start": "529810",
    "end": "536630"
  },
  {
    "text": "a VPC construct which you use for ec2 instances as well now V PC does it's magic of routing using your routing",
    "start": "536630",
    "end": "543350"
  },
  {
    "text": "table rules that you have set up whether if this is in this case is within the same subnet so it should be local and",
    "start": "543350",
    "end": "549490"
  },
  {
    "text": "it's sent to the 8th 0 destination of the other the other task or in this case",
    "start": "549490",
    "end": "557390"
  },
  {
    "text": "here ec2 instance the forwarding rules on the target instance forward this",
    "start": "557390",
    "end": "563330"
  },
  {
    "text": "packet to the docker 0 bridge now just like it was on the the egress on the",
    "start": "563330",
    "end": "568610"
  },
  {
    "text": "other side of the task and similarly the docker 0 bridge has the has a rules to",
    "start": "568610",
    "end": "575180"
  },
  {
    "text": "be able to send routed to the destination container so this is a quick",
    "start": "575180",
    "end": "580250"
  },
  {
    "text": "packet walkthrough let's look at how this works with load balances as well I",
    "start": "580250",
    "end": "586910"
  },
  {
    "start": "581000",
    "end": "581000"
  },
  {
    "text": "talked about service ECS service earlier you can register and",
    "start": "586910",
    "end": "593080"
  },
  {
    "text": "ECS service with an load balancer where",
    "start": "593080",
    "end": "598520"
  },
  {
    "text": "the easiest scheduler is aware of of this of this fronting of the loop from",
    "start": "598520",
    "end": "605600"
  },
  {
    "text": "the load balancer and is able to register tasks of the service as they come up as the back ends of the of the",
    "start": "605600",
    "end": "612500"
  },
  {
    "text": "load balancer so in this case you have here two tasks and each task has a port",
    "start": "612500",
    "end": "620870"
  },
  {
    "text": "8080 and a port 80 and they are exposing that those tasks asses to the to the",
    "start": "620870",
    "end": "629600"
  },
  {
    "text": "load balancer in this case I could just be using the port 80 for the private en",
    "start": "629600",
    "end": "635029"
  },
  {
    "text": "I IP for task 1 and pass 2 because they are distinct there are security groups",
    "start": "635029",
    "end": "642589"
  },
  {
    "text": "that I will configure on each of these instances would be to allow both port 80",
    "start": "642589",
    "end": "647660"
  },
  {
    "text": "and port 8080 because it has to be include all the containers that are",
    "start": "647660",
    "end": "653510"
  },
  {
    "text": "running on the instance so if I have more tasks running on these instances it should be ensure that all of those ports",
    "start": "653510",
    "end": "661100"
  },
  {
    "text": "are opened up but what if I have multiple web applications",
    "start": "661100",
    "end": "668140"
  },
  {
    "text": "you may have applications and because containers enable you to have a smaller",
    "start": "668140",
    "end": "674000"
  },
  {
    "text": "footprint it is likely that you may have applications trying to expose the same port so the solution there is to for",
    "start": "674000",
    "end": "682700"
  },
  {
    "text": "maximum flexibility to assign a port to each container automatically when docker",
    "start": "682700",
    "end": "690350"
  },
  {
    "text": "assigns and docker assigns at random port to a container so you accomplish",
    "start": "690350",
    "end": "696020"
  },
  {
    "text": "this in the ECS task definition here on the right by specifying the host port to",
    "start": "696020",
    "end": "703880"
  },
  {
    "text": "leaving the host port to be 0 so let's",
    "start": "703880",
    "end": "711770"
  },
  {
    "text": "look at what happens if I have to have these two applications exposing the same",
    "start": "711770",
    "end": "717530"
  },
  {
    "text": "ports but they are you know sharing the same container instance in this case so",
    "start": "717530",
    "end": "725510"
  },
  {
    "text": "this is the manifestation of of your previous configuration you specified host port 0 and the doctor science this",
    "start": "725510",
    "end": "733400"
  },
  {
    "text": "mapping of what the external IP port 2 interval instance internal container",
    "start": "733400",
    "end": "739580"
  },
  {
    "text": "port should be the easiest scheduler at the time of scheduling these tasks is",
    "start": "739580",
    "end": "746450"
  },
  {
    "text": "aware of these port requirements so to avoid conflict so you may have a large",
    "start": "746450",
    "end": "752540"
  },
  {
    "text": "number of instances and you want to load a lot of tasks on it so it's aware of the ports as a resource of the instance",
    "start": "752540",
    "end": "761810"
  },
  {
    "text": "before placing the task so this works",
    "start": "761810",
    "end": "767870"
  },
  {
    "text": "well and there are however challenges here as you saw earlier every packet has",
    "start": "767870",
    "end": "775100"
  },
  {
    "text": "to go through the dr. 0 bridge so there are there's an additional hop on each",
    "start": "775100",
    "end": "780980"
  },
  {
    "text": "side that is being added for that lookup for the routing for the routing rules",
    "start": "780980",
    "end": "787000"
  },
  {
    "text": "there's also as I mentioned earlier you may have multiple applications and you",
    "start": "787000",
    "end": "793310"
  },
  {
    "text": "need to be aware of what those applications are running on your ec2",
    "start": "793310",
    "end": "798740"
  },
  {
    "text": "instance and the security group should be configured in a way to allow all of those so you have lack of this finer",
    "start": "798740",
    "end": "806920"
  },
  {
    "text": "grain access control policy when it comes to configuring your security group",
    "start": "806920",
    "end": "811940"
  },
  {
    "text": "and especially if you look at a dynamic port mapping you now have to be aware of",
    "start": "811940",
    "end": "818270"
  },
  {
    "text": "what that permissiveness should be which makes you comfortable so that's something to keep in mind and lastly",
    "start": "818270",
    "end": "825130"
  },
  {
    "text": "these are not routable addresses for your tasks they are essentially logically speaking on the same same",
    "start": "825130",
    "end": "833000"
  },
  {
    "text": "network and and and you don't get that if your requirement is to have network",
    "start": "833000",
    "end": "839060"
  },
  {
    "text": "level isolation that may not meet your requirements so let's talk about the AWS",
    "start": "839060",
    "end": "845480"
  },
  {
    "text": "VPC mode we launched this on 14th of November we are very excited about this",
    "start": "845480",
    "end": "852740"
  },
  {
    "start": "852000",
    "end": "852000"
  },
  {
    "text": "it is based on so this is nice ASCII art here this is a proposal on",
    "start": "852740",
    "end": "859930"
  },
  {
    "text": "github that we proposed some time ago the ECS agent is an open source software",
    "start": "859930",
    "end": "866750"
  },
  {
    "text": "that runs on all ec2 instances that are registered with the ECS clustered and",
    "start": "866750",
    "end": "872680"
  },
  {
    "text": "this is part of the ECS agent proposal that we put out there recently in the",
    "start": "872680",
    "end": "880880"
  },
  {
    "text": "cloud native computing foundation they adopted a for a specification for",
    "start": "880880",
    "end": "886790"
  },
  {
    "text": "container networking it's called container networking interface so that's the logo to the top right and it",
    "start": "886790",
    "end": "893630"
  },
  {
    "text": "specifies how you should implement your container networking to be see and I",
    "start": "893630",
    "end": "899600"
  },
  {
    "text": "complied see and I to me the CIC and I spec so we adopted that but we asked",
    "start": "899600",
    "end": "907910"
  },
  {
    "text": "ourselves how do we make this better how at least we can do to relieve the pain",
    "start": "907910",
    "end": "915050"
  },
  {
    "text": "points and we came up with exactly that there's already a very good solution",
    "start": "915050",
    "end": "922220"
  },
  {
    "text": "built to help customers with networking that is VP sees you don't need to think",
    "start": "922220",
    "end": "929870"
  },
  {
    "text": "much today when it comes to routing between instances within the VPC and",
    "start": "929870",
    "end": "935360"
  },
  {
    "text": "communication between them in the same subnet so our goal was to provide easy",
    "start": "935360",
    "end": "941540"
  },
  {
    "text": "to like container capabilities to the",
    "start": "941540",
    "end": "946580"
  },
  {
    "text": "task we have seen features like tasks",
    "start": "946580",
    "end": "951740"
  },
  {
    "text": "I am role similar to ec2 instance role being added at the container level to",
    "start": "951740",
    "end": "957650"
  },
  {
    "text": "really make the task a first level primitive when it comes to compute",
    "start": "957650",
    "end": "962900"
  },
  {
    "text": "capabilities within the head of this cloud and this is exactly an eval evolution of that so we so the solution",
    "start": "962900",
    "end": "973130"
  },
  {
    "start": "972000",
    "end": "972000"
  },
  {
    "text": "here is that we will allocate an en I interface to each task we launch a SS",
    "start": "973130",
    "end": "980330"
  },
  {
    "text": "per gate yesterday and the AWS V PC mode as we call it is the only mode that that",
    "start": "980330",
    "end": "989930"
  },
  {
    "text": "works with ADA base per game it is because in Fargate you have essentially",
    "start": "989930",
    "end": "995839"
  },
  {
    "text": "you you run your ECS containers just the way you do today just that you don't have to manage ECS ec2 instances anymore",
    "start": "995839",
    "end": "1002320"
  },
  {
    "text": "so what this means is but you still want to have complete network isolation to be",
    "start": "1002320",
    "end": "1009250"
  },
  {
    "text": "able to control the policies for your tasks so that's why a VW VPC more just",
    "start": "1009250",
    "end": "1016120"
  },
  {
    "text": "make sense for Fargate that's only mode here so here's a configuration of the",
    "start": "1016120",
    "end": "1022750"
  },
  {
    "start": "1019000",
    "end": "1019000"
  },
  {
    "text": "AWS VPC mode here you specify the network mode and as part of the VPC",
    "start": "1022750",
    "end": "1030040"
  },
  {
    "text": "configuration configuration you specify a subnets and security groups that you",
    "start": "1030040",
    "end": "1035079"
  },
  {
    "text": "want attached to the e ni",
    "start": "1035079",
    "end": "1039419"
  },
  {
    "start": "1042000",
    "end": "1042000"
  },
  {
    "text": "so here's the task definition that is created you will notice that in the task",
    "start": "1043890",
    "end": "1049330"
  },
  {
    "text": "definition we have specified the mode but we have not specified the subnet or",
    "start": "1049330",
    "end": "1055410"
  },
  {
    "text": "VPC it's because the subnet is really a",
    "start": "1055410",
    "end": "1061020"
  },
  {
    "text": "placement time or runtime decision that you can make so you can define your applications in a uniform way and choose",
    "start": "1061020",
    "end": "1068410"
  },
  {
    "text": "to run them wherever you need to in terms of network boundary within your own V pcs so a capability is added here",
    "start": "1068410",
    "end": "1077559"
  },
  {
    "text": "to your to your task which is a task en I here is the run task if you want to",
    "start": "1077559",
    "end": "1088450"
  },
  {
    "start": "1084000",
    "end": "1084000"
  },
  {
    "text": "run a standalone task this is the command you will use you will also specify a launch type if you want to run",
    "start": "1088450",
    "end": "1095770"
  },
  {
    "text": "it as Fargate and you have specified the subnets here that you want us to place",
    "start": "1095770",
    "end": "1101590"
  },
  {
    "text": "the task in the ECS scheduler is aware",
    "start": "1101590",
    "end": "1107260"
  },
  {
    "text": "of the instances running in those subnets if you're running easy to launch",
    "start": "1107260",
    "end": "1112300"
  },
  {
    "text": "time when when placing this task so here",
    "start": "1112300",
    "end": "1118450"
  },
  {
    "text": "is right after you create the task this is the status that is there so ECS has",
    "start": "1118450",
    "end": "1124630"
  },
  {
    "text": "pre created that the task networking interface for you and it has allocated",
    "start": "1124630",
    "end": "1129730"
  },
  {
    "text": "the subnet ID and and the task ID to it",
    "start": "1129730",
    "end": "1136380"
  },
  {
    "text": "so looking under the hood what exactly happens to my network interface when it",
    "start": "1136800",
    "end": "1142960"
  },
  {
    "start": "1137000",
    "end": "1137000"
  },
  {
    "text": "is allocated the primary eni which comes",
    "start": "1142960",
    "end": "1148690"
  },
  {
    "text": "with the instance is in the default namespace the e for network name space and the new en I that is created for",
    "start": "1148690",
    "end": "1155170"
  },
  {
    "text": "this task is added and it starts off in",
    "start": "1155170",
    "end": "1160780"
  },
  {
    "text": "the default namespace we have built the e CS agent so that it uses the it uses",
    "start": "1160780",
    "end": "1169990"
  },
  {
    "start": "1163000",
    "end": "1163000"
  },
  {
    "text": "lynyrd it actually uploads the networking setup to the C and I plug-in that we have built",
    "start": "1169990",
    "end": "1175720"
  },
  {
    "text": "the Siena plug-in is a set of executables whose sole purpose is to configure networking",
    "start": "1175720",
    "end": "1182169"
  },
  {
    "text": "for containers and then it goes away so the cni plug-in has now provisioned your",
    "start": "1182169",
    "end": "1188320"
  },
  {
    "text": "new eni in a new network namespace and then it's done so what this really means",
    "start": "1188320",
    "end": "1194470"
  },
  {
    "text": "is while having tasks for your networking interface those capabilities are really powerful you don't have to",
    "start": "1194470",
    "end": "1202659"
  },
  {
    "text": "manage these attachments yourself the ECS control pain does all the heavy",
    "start": "1202659",
    "end": "1208659"
  },
  {
    "text": "lifting of the life cycle of a and I as part of your task creation likewise the",
    "start": "1208659",
    "end": "1220240"
  },
  {
    "text": "life cycle of to clean up these resources once your task has terminated is taken care of so now that our task is",
    "start": "1220240",
    "end": "1229870"
  },
  {
    "start": "1229000",
    "end": "1229000"
  },
  {
    "text": "attached let's look at the details you will see that the in addition to the",
    "start": "1229870",
    "end": "1234970"
  },
  {
    "text": "subnet ID we have now allocated the network interface ID it's like any other net a and I that you use you can go and",
    "start": "1234970",
    "end": "1241990"
  },
  {
    "text": "look it up in your a and I a describe a and I call and you get a private IP",
    "start": "1241990",
    "end": "1247750"
  },
  {
    "text": "address and a MAC address so let's look at the packet path now with task e and",
    "start": "1247750",
    "end": "1255220"
  },
  {
    "start": "1251000",
    "end": "1251000"
  },
  {
    "text": "ice in the same VPC we now want to route from 1000 to 7 to 1000 to 9 so there is",
    "start": "1255220",
    "end": "1268389"
  },
  {
    "text": "no bridge hop so as soon as then interest the packet reaches each one VPC",
    "start": "1268389",
    "end": "1275169"
  },
  {
    "text": "does its thing and it's routed to the to",
    "start": "1275169",
    "end": "1280899"
  },
  {
    "text": "the e ni of the other task the container immediately sees it and processes it and",
    "start": "1280899",
    "end": "1287490"
  },
  {
    "text": "that's it furthermore if your security groups don't allow it the packet never",
    "start": "1287490",
    "end": "1292990"
  },
  {
    "text": "reaches 1000 to 9 so your security groups can be specific to your task",
    "start": "1292990",
    "end": "1298600"
  },
  {
    "text": "definition in this case and you don't have to worry about other port conflicts and such there is no overlay",
    "start": "1298600",
    "end": "1305799"
  },
  {
    "text": "no port translation to be done in addition no proxy so this is incredibly powerful",
    "start": "1305799",
    "end": "1314008"
  },
  {
    "text": "especially when you tie this into how you communicate with other AWS services",
    "start": "1314220",
    "end": "1320909"
  },
  {
    "text": "or when you use for example the network load balancer where the security group",
    "start": "1320909",
    "end": "1327129"
  },
  {
    "text": "of the task is also the security group of the load balancer and how you",
    "start": "1327129",
    "end": "1332200"
  },
  {
    "text": "communicate with resources that are provisioned within your VPC for instance your task this becomes this first class",
    "start": "1332200",
    "end": "1339700"
  },
  {
    "text": "object to be able to talk to those resources as well so let's do a quick",
    "start": "1339700",
    "end": "1346629"
  },
  {
    "text": "demo of tasks networking I will use Fargate in this case",
    "start": "1346629",
    "end": "1353278"
  },
  {
    "text": "okay",
    "start": "1366040",
    "end": "1369040"
  },
  {
    "text": "I don't think it switched over did sound switched over yet",
    "start": "1371230",
    "end": "1376950"
  },
  {
    "text": "there we go",
    "start": "1377909",
    "end": "1381090"
  },
  {
    "text": "it's lunch time it is",
    "start": "1385040",
    "end": "1391700"
  },
  {
    "text": "let me just set it up",
    "start": "1397480",
    "end": "1400620"
  },
  {
    "text": "okay",
    "start": "1406440",
    "end": "1409070"
  },
  {
    "text": "okay",
    "start": "1416320",
    "end": "1418860"
  },
  {
    "text": "research okay yeah thanks so here I have I'm",
    "start": "1426140",
    "end": "1433200"
  },
  {
    "text": "using ETS CLI ECS CLI is we launched version 1.1 of that yesterday along with",
    "start": "1433200",
    "end": "1439950"
  },
  {
    "text": "Fargate and what ECS CLI does is it's takes care of lot of the setting up of",
    "start": "1439950",
    "end": "1446460"
  },
  {
    "text": "your clusters v pcs using cloud formation and that way your interaction",
    "start": "1446460",
    "end": "1452280"
  },
  {
    "text": "with setting up your tasks or services in ECS is really simplified so I'm just",
    "start": "1452280",
    "end": "1458940"
  },
  {
    "text": "showing here compose file to define my application here it started working not",
    "start": "1458940",
    "end": "1464250"
  },
  {
    "text": "forget I'll just call it demo and I have specified the image that I want to pull and the ports I I'm just using 8480 here",
    "start": "1464250",
    "end": "1473040"
  },
  {
    "text": "and so let's just set up all I have to",
    "start": "1473040",
    "end": "1480690"
  },
  {
    "text": "do is ECS CLI compose up it brings up a new task for me in this case I've set it",
    "start": "1480690",
    "end": "1489210"
  },
  {
    "text": "up as a far gate task I initially before this presentation I set it up as as a",
    "start": "1489210",
    "end": "1495960"
  },
  {
    "text": "default type of Fargate so whenever I launch a task I don't have to specify that and while this comes up let's look",
    "start": "1495960",
    "end": "1502590"
  },
  {
    "text": "at what the networking configuration behind this application definition and compose file looks like so this is this",
    "start": "1502590",
    "end": "1509100"
  },
  {
    "text": "is the ECS parameters specific to to the ECS that we have defined here the",
    "start": "1509100",
    "end": "1516840"
  },
  {
    "text": "networking mode is a SS V PC mode and we have defined the subnets and the",
    "start": "1516840",
    "end": "1521910"
  },
  {
    "text": "security groups I want now in case of if you're running a far gate task you also have public IPs that you can",
    "start": "1521910",
    "end": "1529680"
  },
  {
    "text": "request we will be also looking at supporting public IPS for ECS easy to",
    "start": "1529680",
    "end": "1536940"
  },
  {
    "text": "launch type tasks so if you go to the",
    "start": "1536940",
    "end": "1541950"
  },
  {
    "text": "cluster here the cluster is",
    "start": "1541950",
    "end": "1546470"
  },
  {
    "text": "is heterogeneous so you have Fargate services running in it and also easy to",
    "start": "1547670",
    "end": "1553270"
  },
  {
    "text": "easy to launch type services running here if I go over here I can see all the",
    "start": "1553270",
    "end": "1561620"
  },
  {
    "text": "tasks if services that I have defined and the standalone tasks let's look at the status of our tasks and where it's",
    "start": "1561620",
    "end": "1570470"
  },
  {
    "text": "coming up as you see you can define your ec2 instances I don't have any I'm just running forget tasks so I don't",
    "start": "1570470",
    "end": "1577880"
  },
  {
    "text": "need to register any ec2 instances in this case and the only way you can run",
    "start": "1577880",
    "end": "1584990"
  },
  {
    "text": "Fargate tasks is by defining your own VPC and your own subnet so while you",
    "start": "1584990",
    "end": "1591200"
  },
  {
    "text": "don't have visibility or you while you don't have to manage the underlying infrastructure you will always run",
    "start": "1591200",
    "end": "1600380"
  },
  {
    "text": "within your own defined network boundaries let's go back to the tasks",
    "start": "1600380",
    "end": "1608080"
  },
  {
    "text": "and here we have the Fargate tasks running let's look at the idea were here",
    "start": "1608080",
    "end": "1614350"
  },
  {
    "text": "so this is the task ID that was created so 9fe and if I do",
    "start": "1614350",
    "end": "1620770"
  },
  {
    "text": "ECS CLI yes",
    "start": "1620770",
    "end": "1626740"
  },
  {
    "text": "it shows me the new demo task that was created it has a public IP I can go to",
    "start": "1627860",
    "end": "1635030"
  },
  {
    "text": "the public IP and it has my tasks up and running now from a task definition point",
    "start": "1635030",
    "end": "1642559"
  },
  {
    "text": "of view it's as simple as that you only define your subnets and we be seen and task just runs in that boundary",
    "start": "1642559",
    "end": "1650170"
  },
  {
    "text": "so so that's it for the demo let's switch back to the presentation",
    "start": "1650170",
    "end": "1656799"
  },
  {
    "text": "so now that we looked at the capabilities we have with tasks",
    "start": "1662400",
    "end": "1667770"
  },
  {
    "start": "1663000",
    "end": "1663000"
  },
  {
    "text": "networking and AWS V PC mode which one should I choose you should consider",
    "start": "1667770",
    "end": "1673260"
  },
  {
    "text": "using the AWC PC mode for services that are attached to the application load",
    "start": "1673260",
    "end": "1679260"
  },
  {
    "text": "balancer network load balancer and you don't want to worry about managing the",
    "start": "1679260",
    "end": "1685250"
  },
  {
    "text": "eni attachment or the other port port mappings we will also be working on",
    "start": "1685250",
    "end": "1692190"
  },
  {
    "text": "enabling migration from an existing bridge mode to a task networking mode so",
    "start": "1692190",
    "end": "1698130"
  },
  {
    "text": "that you can use the same services backed by the same load balancers and be able to do that update but there's a",
    "start": "1698130",
    "end": "1706170"
  },
  {
    "text": "consideration here and caveat that you should be aware of is these are running on ec2 instances so if you're running in",
    "start": "1706170",
    "end": "1712740"
  },
  {
    "text": "ec2 launched type you need to be aware of which ec2 instances you are running what is the en I limit which is specific",
    "start": "1712740",
    "end": "1719460"
  },
  {
    "text": "to that instance and how many tasks you plan to plan to bin back into that",
    "start": "1719460",
    "end": "1725670"
  },
  {
    "text": "instance so if your TAS outnumber TAS networking may not be able to place",
    "start": "1725670",
    "end": "1731730"
  },
  {
    "text": "tasks because there won't be an en I resource so easier scheduler is aware of that",
    "start": "1731730",
    "end": "1737670"
  },
  {
    "text": "an alternative is to just run because we take care of that for you so",
    "start": "1737670",
    "end": "1742710"
  },
  {
    "text": "you don't have to worry about these specific limits for the ec2 instances so",
    "start": "1742710",
    "end": "1748800"
  },
  {
    "text": "with that I will turn it over to Shaquille we can share a little bit about his story cool thanks deepak hi my name is Shakeel",
    "start": "1748800",
    "end": "1758010"
  },
  {
    "text": "raffia with Fox before I get started I will say that yes I do have my friends",
    "start": "1758010",
    "end": "1765690"
  },
  {
    "text": "who call me Shaq and I have no relationship to Shaquille O'Neal although we do probably have the same",
    "start": "1765690",
    "end": "1772130"
  },
  {
    "text": "free-throw percentage so it's about that so anyways I'm with 21st Century Fox and",
    "start": "1772130",
    "end": "1779929"
  },
  {
    "text": "about 21st Century Fox if you guys don't know we're kind of a small company",
    "start": "1779929",
    "end": "1785870"
  },
  {
    "text": "global portfolio of cable and broadcasting networks I just pulled that",
    "start": "1785870",
    "end": "1791100"
  },
  {
    "text": "blurb from our Investor page so you can read that if you want but the the highlights here is that you know we",
    "start": "1791100",
    "end": "1797790"
  },
  {
    "text": "have channels across the world some very popular ones especially domestically Fox",
    "start": "1797790",
    "end": "1803970"
  },
  {
    "text": "Sports effects National Geographic things like that so that's 21st century",
    "start": "1803970",
    "end": "1811020"
  },
  {
    "start": "1807000",
    "end": "1807000"
  },
  {
    "text": "as a whole and then the specific organization inside Fox that I represent",
    "start": "1811020",
    "end": "1819870"
  },
  {
    "text": "is the digital consumer group DCG and we're an organization that's",
    "start": "1819870",
    "end": "1826080"
  },
  {
    "text": "really just tasked with the digital delivery of of our content to consumers",
    "start": "1826080",
    "end": "1834030"
  },
  {
    "text": "so on the right there you can see a couple of images of what we're",
    "start": "1834030",
    "end": "1840450"
  },
  {
    "text": "delivering so what that is is the Fox",
    "start": "1840450",
    "end": "1845550"
  },
  {
    "text": "now application that you can download on your iPhone",
    "start": "1845550",
    "end": "1851820"
  },
  {
    "text": "Roku whatever or just go to it on the web and you can watch Fox content with",
    "start": "1851820",
    "end": "1859380"
  },
  {
    "text": "your cable provider so if you have Comcast DIRECTV what have you you can",
    "start": "1859380",
    "end": "1865020"
  },
  {
    "text": "login with your provider and watch the content and there's also free content there so this is the application that we",
    "start": "1865020",
    "end": "1870120"
  },
  {
    "text": "are actually delivering to our end-users so there's really two components of it",
    "start": "1870120",
    "end": "1876090"
  },
  {
    "text": "what you're seeing here is obviously the front-end and because we have a number of front ends whether it be web mobile",
    "start": "1876090",
    "end": "1883200"
  },
  {
    "text": "connected device what-have-you we deliver everything through a common API layer so what I'm really going to talk",
    "start": "1883200",
    "end": "1889980"
  },
  {
    "text": "to you guys about is the common API layer and how we deliver that now there's a lot more services that we end",
    "start": "1889980",
    "end": "1898620"
  },
  {
    "start": "1892000",
    "end": "1892000"
  },
  {
    "text": "up utilizing however I just wanted to kind of show what we're kind of how",
    "start": "1898620",
    "end": "1904530"
  },
  {
    "text": "we're delivering it as it relates to to this presentation and to ECS in general",
    "start": "1904530",
    "end": "1910530"
  },
  {
    "text": "so first of all everything that we are doing all of our experiences are running out of AWS we're utilizing API gateway",
    "start": "1910530",
    "end": "1919590"
  },
  {
    "text": "to actually deliver all of our API s we are a microcircuits",
    "start": "1919590",
    "end": "1926460"
  },
  {
    "text": "architecture with our services that are written in no js' and go and we have different",
    "start": "1926460",
    "end": "1934049"
  },
  {
    "text": "teams that deploy things differently we have some teams that mostly we're",
    "start": "1934049",
    "end": "1939749"
  },
  {
    "text": "utilizing terraform but we do utilize cloud formation for certain things some",
    "start": "1939749",
    "end": "1945359"
  },
  {
    "text": "teams deliver multiple services at once other teams deliver single services and this is going to be important because",
    "start": "1945359",
    "end": "1950489"
  },
  {
    "text": "we'll run through some of the the challenges here and then everything is delivered through ECS so we're fully",
    "start": "1950489",
    "end": "1957389"
  },
  {
    "text": "Dockers and we're delivering everything through ECS so some of the challenges",
    "start": "1957389",
    "end": "1963629"
  },
  {
    "text": "that we've run into and and I think Vernors kind of you know spoke about a little bit this morning to that as you",
    "start": "1963629",
    "end": "1968779"
  },
  {
    "start": "1964000",
    "end": "1964000"
  },
  {
    "text": "move forward you kind of have to evolve your architecture right so every time you kind of step through you evolve so",
    "start": "1968779",
    "end": "1975059"
  },
  {
    "text": "our architecture was probably initially developed about a year ago year and a half ago and so as we've kind of grown",
    "start": "1975059",
    "end": "1983450"
  },
  {
    "text": "more people coming to our applications you know we'd have to also evolve and so a lot of the challenges that we faced",
    "start": "1983450",
    "end": "1990479"
  },
  {
    "text": "has been things like well we do have a micro services architecture lots of services and we're utilizing bridge mode",
    "start": "1990479",
    "end": "1997849"
  },
  {
    "text": "and we've got hundreds of instances right so that that's a scale issue there",
    "start": "1997849",
    "end": "2004779"
  },
  {
    "text": "some of the other challenges are where that teams needed to be able to determine how to write or write route",
    "start": "2004779",
    "end": "2010849"
  },
  {
    "text": "and they need to write services too but route an individual service between a blue green purple orange red",
    "start": "2010849",
    "end": "2018909"
  },
  {
    "text": "what-have-you deployment we also needed to be able to route a single request anywhere through",
    "start": "2018909",
    "end": "2028159"
  },
  {
    "text": "the stack to a specific service maybe for testing it might be for some type of",
    "start": "2028159",
    "end": "2035539"
  },
  {
    "text": "a feature imagine if you if you're deploying a feature to 2% of your users",
    "start": "2035539",
    "end": "2041149"
  },
  {
    "text": "and that feature is potentially you know a micro service that's three layers deep",
    "start": "2041149",
    "end": "2046970"
  },
  {
    "text": "how do you make sure that you know you've selected that feature up front but now you've routed it to the right area so those would be challenges to we",
    "start": "2046970",
    "end": "2055220"
  },
  {
    "text": "have to maintain multiple versions of the same service because as many people",
    "start": "2055220",
    "end": "2061730"
  },
  {
    "text": "know you run your apps everybody updates at the same time so we have to mean we have to you know",
    "start": "2061730",
    "end": "2067200"
  },
  {
    "text": "maintain different versions of our API s we're very ephemeral we want to be able",
    "start": "2067200",
    "end": "2073050"
  },
  {
    "text": "to deal with failure you know pretty much at any level you know services containers anything can go and you know",
    "start": "2073050",
    "end": "2080250"
  },
  {
    "text": "we have to be able to to manage that so what did we look at in order to kind of",
    "start": "2080250",
    "end": "2087120"
  },
  {
    "text": "deliver some of these things so again want one very common ways put some al",
    "start": "2087120",
    "end": "2093419"
  },
  {
    "start": "2088000",
    "end": "2088000"
  },
  {
    "text": "B's in front of the microcircuits but you run into certain limitations you know one of limitations is that target",
    "start": "2093420",
    "end": "2099720"
  },
  {
    "text": "groups will have a limit of a thousand targets you can change that we have but you know that's that's something you",
    "start": "2099720",
    "end": "2105480"
  },
  {
    "text": "have to be cautious up about this does end up leading to hundreds of Al B's and",
    "start": "2105480",
    "end": "2112140"
  },
  {
    "text": "you know if you're if you've worked with API gateway then there's a lot of",
    "start": "2112140",
    "end": "2117180"
  },
  {
    "text": "complexity in the integrations and then you've got development stage load production all these different",
    "start": "2117180",
    "end": "2123330"
  },
  {
    "text": "environments that you might be going to so you've got tons of variables there so it just you know I think you could",
    "start": "2123330",
    "end": "2129330"
  },
  {
    "text": "definitely deal with it in terms of the automation but it does start to get",
    "start": "2129330",
    "end": "2134910"
  },
  {
    "text": "fairly complicated another thing that we looked at was saying okay well let's just get rid of that and let's talk",
    "start": "2134910",
    "end": "2140790"
  },
  {
    "text": "directly from one micro service to another micro service utilizing DNS another another way that you can do that",
    "start": "2140790",
    "end": "2146670"
  },
  {
    "text": "it does I'm sure there are some systems engineers in here and as any systems",
    "start": "2146670",
    "end": "2152760"
  },
  {
    "text": "engineer is known we run into many many debates around naming schemas and what",
    "start": "2152760",
    "end": "2160590"
  },
  {
    "text": "metadata you want to put into the DNS structure and at some point you forgot to put this one metadata and now how do",
    "start": "2160590",
    "end": "2167250"
  },
  {
    "text": "you do that you change the whole structure for everybody so those were going to get very complicated to try to think those",
    "start": "2167250",
    "end": "2172620"
  },
  {
    "text": "things out so another way was to say well let's let's take something in",
    "start": "2172620",
    "end": "2177690"
  },
  {
    "text": "between here and utilize software to create a service mesh and this is actually what we ended up doing so what",
    "start": "2177690",
    "end": "2188040"
  },
  {
    "text": "is a service mesh it's a dedicated infrastructure layer for making services service",
    "start": "2188040",
    "end": "2194430"
  },
  {
    "text": "communications that safe fast and reliable so what that means is you",
    "start": "2194430",
    "end": "2202410"
  },
  {
    "text": "are you are going through some layer of software that can find your services",
    "start": "2202410",
    "end": "2208230"
  },
  {
    "text": "right so utilizing some form of service discovery allows the service master software to route request to a healthy",
    "start": "2208230",
    "end": "2214020"
  },
  {
    "text": "instance of a specific service so if you've got service a trying to talk to service B we would go through the",
    "start": "2214020",
    "end": "2220080"
  },
  {
    "text": "service mesh layer it would find out where service B is again and you have to do some type of service I should mention",
    "start": "2220080",
    "end": "2225599"
  },
  {
    "text": "one one thing really quickly is that most people will you know you talk about a micro services architecture and we",
    "start": "2225599",
    "end": "2231750"
  },
  {
    "text": "always talk about it at the application level that we're delivering our application through Michael services but it you can actually take that a step",
    "start": "2231750",
    "end": "2239390"
  },
  {
    "text": "deeper into the stack and almost think of your infrastructure as micro services which is what we that invest the reason",
    "start": "2239390",
    "end": "2245820"
  },
  {
    "text": "I'm really only talking about the service mesh because that's that layer you know your service discovery is a",
    "start": "2245820",
    "end": "2250920"
  },
  {
    "text": "different micro service if you will your registration into service discovery is a different micro service so you can really kind of just plug in different",
    "start": "2250920",
    "end": "2257700"
  },
  {
    "text": "pieces that may make sense and that's why we're kind of use like did it like",
    "start": "2257700",
    "end": "2262859"
  },
  {
    "text": "this and and the software that we elected to utilize is linker D there are other bits there are others you know",
    "start": "2262859",
    "end": "2269849"
  },
  {
    "text": "it's a software that are out there two that come to mind is ice IIST IO I",
    "start": "2269849",
    "end": "2277050"
  },
  {
    "text": "pronounce that it's time this teo envoy so there's a lot of other things that",
    "start": "2277050",
    "end": "2284790"
  },
  {
    "text": "are out there we chose linker d it it fit a lot with what we're doing it fit with our micro",
    "start": "2284790",
    "end": "2293010"
  },
  {
    "text": "services infrastructure layer but you know by all means it's it's just a it's",
    "start": "2293010",
    "end": "2298290"
  },
  {
    "text": "just a concept there so let me show you at a very high level and the next couple",
    "start": "2298290",
    "end": "2303990"
  },
  {
    "text": "of slides are going to be more around the actual diagrams and I was kind of debating like do you show high level and",
    "start": "2303990",
    "end": "2309690"
  },
  {
    "text": "then detailed or do you go detailed and then high level neither one really seemed right I flipped the coin and landed on heads heads is high level so",
    "start": "2309690",
    "end": "2317339"
  },
  {
    "text": "there we go so this is what kind of our",
    "start": "2317339",
    "end": "2322700"
  },
  {
    "start": "2320000",
    "end": "2320000"
  },
  {
    "text": "from the top down looks like so we'll have the Internet or applications that",
    "start": "2322700",
    "end": "2328710"
  },
  {
    "text": "are attached to the internet if you will they will go to Amazon gate or",
    "start": "2328710",
    "end": "2334440"
  },
  {
    "text": "Amazon API gateway to hit a specific API endpoint from there now everything goes",
    "start": "2334440",
    "end": "2342150"
  },
  {
    "text": "through a single load balancer API gateway has to talk to a load balancer so it goes through a single load",
    "start": "2342150",
    "end": "2348600"
  },
  {
    "text": "balancer and one comment I want to make here is is that I don't know if you guys have used Network load balancers at all",
    "start": "2348600",
    "end": "2355920"
  },
  {
    "text": "but if you are doing classic al B's and trying to do TCP so you can get directly",
    "start": "2355920",
    "end": "2361650"
  },
  {
    "text": "to your instances I would highly recommend NL B's they're a little bit",
    "start": "2361650",
    "end": "2367440"
  },
  {
    "text": "lighter faster and they're pretty cool so we have switched that over to an NLB",
    "start": "2367440",
    "end": "2373410"
  },
  {
    "text": "now which basically load balances across a layer of engine X servers and that's",
    "start": "2373410",
    "end": "2382230"
  },
  {
    "text": "all running ECS the communication if you look at it if you are familiar with it",
    "start": "2382230",
    "end": "2388800"
  },
  {
    "text": "NL right now and I'm sure that the the folks that Amazon will eventually fix",
    "start": "2388800",
    "end": "2394980"
  },
  {
    "text": "this but currently API gateway can only talk to a publicly exposed internet",
    "start": "2394980",
    "end": "2400440"
  },
  {
    "text": "facing NLB and so or internet facing load balancer not yet a VPC endpoint so",
    "start": "2400440",
    "end": "2408530"
  },
  {
    "text": "the way to secure your communications is through a client certificate again a OBS",
    "start": "2408530",
    "end": "2415470"
  },
  {
    "text": "actually can't process client certificates so if you're actually in this mode you're either utilizing classic ec2 or lbs or you'd want to go",
    "start": "2415470",
    "end": "2422940"
  },
  {
    "text": "NLB and have to terminate SSL on your instances so that's what we're doing nginx effectively terminates SSL there",
    "start": "2422940",
    "end": "2432240"
  },
  {
    "text": "and the network load balancer lives in the public subnet everything there and I",
    "start": "2432240",
    "end": "2440010"
  },
  {
    "text": "kind of noted there that while they look different here they could be the same set of physical servers it doesn't really matter you can choose you know",
    "start": "2440010",
    "end": "2447780"
  },
  {
    "text": "that there's there's definitely reasons why we would make those different in the",
    "start": "2447780",
    "end": "2452790"
  },
  {
    "text": "sense that you may have different networking needs you know you can use different congestion algorithms on",
    "start": "2452790",
    "end": "2458940"
  },
  {
    "text": "different ICS servers if you need to to you know reduce reduce time to delivery and things like that",
    "start": "2458940",
    "end": "2464880"
  },
  {
    "text": "and then below we have all of our Fox DCG micro services so to go into the",
    "start": "2464880",
    "end": "2472340"
  },
  {
    "text": "what we'll note that this all lives in a single 8 V PC and we have multiple",
    "start": "2472340",
    "end": "2478260"
  },
  {
    "text": "subnets all the EECS servers live in a private subnet and the only thing that lives in the public",
    "start": "2478260",
    "end": "2485010"
  },
  {
    "text": "subnet is the load balancer so now the detail of this is how the services",
    "start": "2485010",
    "end": "2492690"
  },
  {
    "start": "2491000",
    "end": "2491000"
  },
  {
    "text": "communicate so I pulled again there's a lot in here there's a lot of other things that actually live there so I",
    "start": "2492690",
    "end": "2499380"
  },
  {
    "text": "pulled all of that out to kind of just show the pieces here that actually we're",
    "start": "2499380",
    "end": "2504540"
  },
  {
    "text": "utilizing for this so the way that it works is that again I mentioned all the",
    "start": "2504540",
    "end": "2511170"
  },
  {
    "text": "ECS nodes live inside of a private subnet it could be multiple AZ's it",
    "start": "2511170",
    "end": "2516420"
  },
  {
    "text": "could be a single AZ what-have-you so when service a wants to talk to service B what we've done is we've",
    "start": "2516420",
    "end": "2524250"
  },
  {
    "text": "loaded link or D on to every ecef instance so there's one link or D per",
    "start": "2524250",
    "end": "2529860"
  },
  {
    "text": "instance so every container we don't run it as a sidecar we run it as a you know",
    "start": "2529860",
    "end": "2535290"
  },
  {
    "text": "on an instance basis so every container talks to the local link or D one of the reasons why is once you start going you",
    "start": "2535290",
    "end": "2541110"
  },
  {
    "text": "know hitting a lot of scales or hitting a lot of containers you just you know you'd have a ton of sidecars potentially",
    "start": "2541110",
    "end": "2547710"
  },
  {
    "text": "so right now we just run a single one that could change again not a bit not a not a hard and fast rule for us it talks",
    "start": "2547710",
    "end": "2556980"
  },
  {
    "text": "to linker D through the through the docker bridge so that's how it knows",
    "start": "2556980",
    "end": "2562740"
  },
  {
    "text": "every instance finds its docker bridge in order to talk to linker D it talks to",
    "start": "2562740",
    "end": "2568650"
  },
  {
    "text": "it on its doctor bridge and off it goes linker D will say ok you want to talk to",
    "start": "2568650",
    "end": "2576680"
  },
  {
    "text": "service B right and what it'll do is it'll it'll find a healthy answer but",
    "start": "2576680",
    "end": "2584160"
  },
  {
    "text": "it'll go basically query our service discovery back-end it will find a healthy instance and then it'll proxy",
    "start": "2584160",
    "end": "2591210"
  },
  {
    "text": "the request over to that instance that that task will then do whatever it needs",
    "start": "2591210",
    "end": "2599470"
  },
  {
    "text": "to do return back to link or D linker D will come back to the service and the",
    "start": "2599470",
    "end": "2606220"
  },
  {
    "text": "service is not none the wiser that it actually went through anything it just understands that you made a a request",
    "start": "2606220",
    "end": "2612370"
  },
  {
    "text": "and it got serviced now so that's kind of the really the the",
    "start": "2612370",
    "end": "2618880"
  },
  {
    "text": "implementation details on that this next slide here is basically saying everything that I just talked about so I",
    "start": "2618880",
    "end": "2628900"
  },
  {
    "start": "2623000",
    "end": "2623000"
  },
  {
    "text": "tend to do this because if somebody watches it on some YouTube at least it's there and you don't have to hear the audio I know my voice gets annoying to",
    "start": "2628900",
    "end": "2636700"
  },
  {
    "text": "me too so ETS synthesis resided in private subnet surfs containers are deployed through ECS container instances utilize the ECS",
    "start": "2636700",
    "end": "2645100"
  },
  {
    "text": "optimized ami and then we add linker D through our user data so it's actually",
    "start": "2645100",
    "end": "2652780"
  },
  {
    "text": "also deployed as a docker container on the instance server send all servers the",
    "start": "2652780",
    "end": "2657940"
  },
  {
    "text": "service requests to their local linker D instance all services have a name that",
    "start": "2657940",
    "end": "2663070"
  },
  {
    "text": "other services can talk to it and then it uses that name to find the services",
    "start": "2663070",
    "end": "2669010"
  },
  {
    "text": "routing and Estela Gatien so if you look at that delegation and well it's in",
    "start": "2669010",
    "end": "2674680"
  },
  {
    "text": "yellow orange I don't know what color it is you'll see that the way that it works",
    "start": "2674680",
    "end": "2680230"
  },
  {
    "text": "is that we have service a underscore version one right so we could have version 2 version 3 that's the name of",
    "start": "2680230",
    "end": "2686350"
  },
  {
    "text": "the service now the way that we can achieve blue and green deployments again would be by saying setting it to saying",
    "start": "2686350",
    "end": "2694950"
  },
  {
    "text": "95% of the requests to this service service a underscore v1 should go to the",
    "start": "2694950",
    "end": "2700450"
  },
  {
    "text": "bleep blue version of service a and 5% should go to the green version a service",
    "start": "2700450",
    "end": "2707440"
  },
  {
    "text": "a so the team's the individual teams can actually control this and you can set blue green orange purple whatever and",
    "start": "2707440",
    "end": "2716110"
  },
  {
    "text": "they can control the percentages up to a hundred percent of course so some of",
    "start": "2716110",
    "end": "2721630"
  },
  {
    "text": "these things that you know some of the reasons this could be utilized is that you're rolling out a new version you",
    "start": "2721630",
    "end": "2727240"
  },
  {
    "text": "want to check it out verify that your blue your green version is is working right you look at your logs make sure there's",
    "start": "2727240",
    "end": "2732640"
  },
  {
    "text": "no additional errors things like that another thing that you could do is to do",
    "start": "2732640",
    "end": "2738160"
  },
  {
    "text": "run experiments you know I think the during the talk today",
    "start": "2738160",
    "end": "2743590"
  },
  {
    "text": "Netflix talked about they run chaos experiments right so that could be something that says you have a 2% of",
    "start": "2743590",
    "end": "2749800"
  },
  {
    "text": "your requests are going to this service which is actually creating different problems maybe and you want to see how your upstream services react so so it",
    "start": "2749800",
    "end": "2756640"
  },
  {
    "text": "gives you a lot of flexibility there the the nice thing also about that is that",
    "start": "2756640",
    "end": "2762310"
  },
  {
    "text": "is not a hard and in link or D that's not a hard and fast rule that that's the",
    "start": "2762310",
    "end": "2768640"
  },
  {
    "text": "only delegation tab that'll utilize so what you can actually do is on a per request basis you can actually send a",
    "start": "2768640",
    "end": "2776200"
  },
  {
    "text": "new thing so for example let's just say I wanted to route this one request for",
    "start": "2776200",
    "end": "2782140"
  },
  {
    "text": "service a to service AV to because I want to test this in production I have",
    "start": "2782140",
    "end": "2787690"
  },
  {
    "text": "maybe some feature flagging I've done something there I can actually add a header to the request",
    "start": "2787690",
    "end": "2793540"
  },
  {
    "text": "that's way at the start and that header will propagate through the entire system so it doesn't matter what service ends",
    "start": "2793540",
    "end": "2800619"
  },
  {
    "text": "up using that service it'll make sure that it goes to the new service so there's features like that that we were",
    "start": "2800619",
    "end": "2805869"
  },
  {
    "text": "able to get out of this the other thing is that the way that we've architected",
    "start": "2805869",
    "end": "2812650"
  },
  {
    "text": "it is that the EECS instances are entirely horizontally scalable and use easy to",
    "start": "2812650",
    "end": "2818440"
  },
  {
    "text": "auto scaling groups to scale out when you need more memory more CPU or",
    "start": "2818440",
    "end": "2823630"
  },
  {
    "text": "anything like that so it completely it scales out horizontally because everything is contained in a single ECS",
    "start": "2823630",
    "end": "2831099"
  },
  {
    "text": "container instance it it pretty much scales for you know pretty horizontally",
    "start": "2831099",
    "end": "2837250"
  },
  {
    "text": "so what we got through this was that we gave the teams the ability to instantly change routing for a micro service by",
    "start": "2837250",
    "end": "2843760"
  },
  {
    "text": "modifying that by modifying that delegation tab for service a team can decide where the traffic should go",
    "start": "2843760",
    "end": "2848940"
  },
  {
    "text": "another feature that we got is linker D has some resiliency functions built in so it can retry if you tell it to you",
    "start": "2848940",
    "end": "2856089"
  },
  {
    "text": "can retry idempotent requests so in our world that's basically any request that's not a post",
    "start": "2856089",
    "end": "2862230"
  },
  {
    "text": "it's considered an idempotent request so well that's how we design our services",
    "start": "2862230",
    "end": "2867690"
  },
  {
    "text": "and if if one service returned of one instance returned to 500 maybe it's just",
    "start": "2867690",
    "end": "2873420"
  },
  {
    "text": "in the process of failing or anything like that linker D will retry that individual request against another",
    "start": "2873420",
    "end": "2878910"
  },
  {
    "text": "instance so you're calling service actually never cease issues so it's got certain features like that built into it",
    "start": "2878910",
    "end": "2885779"
  },
  {
    "text": "can tie in with the service discovery back end so it'll immediately find healthy containers depending on your",
    "start": "2885779",
    "end": "2892410"
  },
  {
    "text": "back end it could be any back end it could be DNS we utilize console but it can be pretty much anything round 53 it",
    "start": "2892410",
    "end": "2898200"
  },
  {
    "text": "can be anything that you needed to another nice feature of linker d is that it's able to determine slower instances",
    "start": "2898200",
    "end": "2904470"
  },
  {
    "text": "and route fewer requests to these instances so if you've worked in EC EC 2",
    "start": "2904470",
    "end": "2909900"
  },
  {
    "text": "if you've worked in a container world you will unbearably run into a noisy",
    "start": "2909900",
    "end": "2916319"
  },
  {
    "text": "neighbor problem so being able to look at the latency of the requests coming in from a particular task is nice to be",
    "start": "2916319",
    "end": "2924420"
  },
  {
    "text": "able to say hey I'm just going to give this one fewer requests so that I'm not doing I'm not making that instance even worse so this is all nice it's never a",
    "start": "2924420",
    "end": "2934440"
  },
  {
    "text": "great world because there are always challenges to be solved so what does the future hold for us in terms of",
    "start": "2934440",
    "end": "2939900"
  },
  {
    "start": "2936000",
    "end": "2936000"
  },
  {
    "text": "challenges if we plan to tackle one issue is obviously security Security's",
    "start": "2939900",
    "end": "2946019"
  },
  {
    "text": "still a challenge in this environment tasks I am roles are great but they're they're only they only take you so far",
    "start": "2946019",
    "end": "2952589"
  },
  {
    "text": "right they can they can talk you can limit your exposure to your data sources",
    "start": "2952589",
    "end": "2958349"
  },
  {
    "text": "potentially like dynamodb or something like that but not necessarily to other services right so as kind of deepak",
    "start": "2958349",
    "end": "2965309"
  },
  {
    "text": "talked about task ii and eyes that's a big win potentially for PCI or PII data especially if you're under compliance",
    "start": "2965309",
    "end": "2972359"
  },
  {
    "text": "regular you know regulations because the half the time most people know it's a check the box are you doing this do you",
    "start": "2972359",
    "end": "2979289"
  },
  {
    "text": "have an ACL no well then that you know doesn't you know so being able to have",
    "start": "2979289",
    "end": "2985529"
  },
  {
    "text": "that definitely helps another another thing that right now linker D doesn't really natively understand how to find",
    "start": "2985529",
    "end": "2991109"
  },
  {
    "text": "the closest container so it does do some of this through the",
    "start": "2991109",
    "end": "2996230"
  },
  {
    "text": "latency round routing because it'll try to pick containers that are lower latency but it doesn't really understand",
    "start": "2996230",
    "end": "3002200"
  },
  {
    "text": "that hey I wanted to talk to a container that's maybe on the same instance or in the same availability zone and then in",
    "start": "3002200",
    "end": "3008500"
  },
  {
    "text": "the same VPC right although there are some tricks that we can do with the with the you know service discovery back in",
    "start": "3008500",
    "end": "3014380"
  },
  {
    "text": "and again because we think of it as a kind of a micro service type architecture you know we can we can do that so that is pretty much what",
    "start": "3014380",
    "end": "3024329"
  },
  {
    "text": "concludes my portion of this I think thank you would be an order it would",
    "start": "3024329",
    "end": "3030490"
  },
  {
    "text": "have been really awkward if none of you guys showed up and we were speaking to an empty room so definitely thanks for coming and",
    "start": "3030490",
    "end": "3035980"
  },
  {
    "text": "we're around for those questions [Applause]",
    "start": "3035980",
    "end": "3040960"
  }
]