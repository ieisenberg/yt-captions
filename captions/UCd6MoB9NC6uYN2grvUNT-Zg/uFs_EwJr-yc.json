[
  {
    "start": "0",
    "end": "41000"
  },
  {
    "text": "good evening thank you for joining us for net two or three my name is Peter",
    "start": "0",
    "end": "6359"
  },
  {
    "text": "Dale bundchen I'm a solutions architect who work for Amazon Web Services and here with me I have Jeff and kit you",
    "start": "6359",
    "end": "13620"
  },
  {
    "text": "guys wanna introduce yourself capital one where we do a lot of our VPC and",
    "start": "13620",
    "end": "20160"
  },
  {
    "text": "low-level automation as well as containerisation work hi I'm Katie bank I'm a software engineer on Jeff's team",
    "start": "20160",
    "end": "27439"
  },
  {
    "text": "alright cool so we'll be covering from AC to DC to to ecs how capital one uses",
    "start": "27439",
    "end": "34829"
  },
  {
    "text": "application load balancer features to serve traffic at scale so here's what to",
    "start": "34829",
    "end": "42870"
  },
  {
    "start": "41000",
    "end": "41000"
  },
  {
    "text": "expect from the session we will cover a high level will cover classic load balancer as well as application load",
    "start": "42870",
    "end": "49379"
  },
  {
    "text": "balancer features and then we'll talk about how capital one uses load balancers to serve their applications",
    "start": "49379",
    "end": "55199"
  },
  {
    "text": "and lastly we will cover their container journey I will talk about how",
    "start": "55199",
    "end": "61010"
  },
  {
    "text": "application load balance of features improve their container journey so",
    "start": "61010",
    "end": "70320"
  },
  {
    "text": "before we talk about the the features I just want to spend a minute or so to",
    "start": "70320",
    "end": "76049"
  },
  {
    "text": "talk about what the EOB services so if you're new to AWS elb is a managed",
    "start": "76049",
    "end": "82860"
  },
  {
    "text": "service and what it does is it offers you a software load balancer to",
    "start": "82860",
    "end": "88110"
  },
  {
    "text": "automatically distribute your incoming application traffic for for your your",
    "start": "88110",
    "end": "94890"
  },
  {
    "text": "ec2 instances so before I think we announced this service around 2009 and",
    "start": "94890",
    "end": "102840"
  },
  {
    "start": "98000",
    "end": "98000"
  },
  {
    "text": "before we had the service customers use like a third party load balancer or they",
    "start": "102840",
    "end": "109740"
  },
  {
    "text": "just directly sent the you know the install the application on ec2 and then",
    "start": "109740",
    "end": "115200"
  },
  {
    "text": "had the users go directly to to these applications on ec2 now it doesn't take",
    "start": "115200",
    "end": "121409"
  },
  {
    "text": "much to realize that this kind of an architecture doesn't really work well in production from availability point of",
    "start": "121409",
    "end": "128940"
  },
  {
    "text": "view you're pretty much limited to the uptime of that instance if that ec2",
    "start": "128940",
    "end": "136470"
  },
  {
    "text": "instance dies then your application has a downtime and from scalability point of",
    "start": "136470",
    "end": "142080"
  },
  {
    "text": "view you're pretty much limited to what that ec2 instance is capable of doing how much resources you you have done",
    "start": "142080",
    "end": "148710"
  },
  {
    "text": "that ec2 so classic load balancer is is",
    "start": "148710",
    "end": "155310"
  },
  {
    "start": "151000",
    "end": "151000"
  },
  {
    "text": "a key component of eld service so at a high level you have elb as a managed",
    "start": "155310",
    "end": "160950"
  },
  {
    "text": "service and then you have classic load balancer and the second component that we announced I think around 2009 during",
    "start": "160950",
    "end": "168870"
  },
  {
    "text": "the New York summit was the application load balancer and classic load balancer",
    "start": "168870",
    "end": "175620"
  },
  {
    "text": "is one of the component right so classic load balancer gives you that simple load",
    "start": "175620",
    "end": "181020"
  },
  {
    "text": "balancing of application traffic across multiple ec2 instances you can choose to",
    "start": "181020",
    "end": "186960"
  },
  {
    "text": "configure your listeners to be either layer 4 or layer 7 and when I talk about",
    "start": "186960",
    "end": "192540"
  },
  {
    "text": "layers I'm talking about the OSI model so you can configure at layer 7 which is",
    "start": "192540",
    "end": "199380"
  },
  {
    "text": "the application traffic you can do it at HTTP or HTTPS and if you choose to do",
    "start": "199380",
    "end": "205640"
  },
  {
    "text": "layer 4 then you're probably doing PCP or SSL that's the listener configuration",
    "start": "205640",
    "end": "211470"
  },
  {
    "text": "so a couple of call outs here if you're using TCP then each connections that",
    "start": "211470",
    "end": "220470"
  },
  {
    "text": "your client makes is bound to the socket connection of the backend ec2 instance",
    "start": "220470",
    "end": "226970"
  },
  {
    "text": "whereas if you use HTTP then we use connection pooling at the EOB layer in",
    "start": "226970",
    "end": "234120"
  },
  {
    "text": "order to serve those connections another call out is if you use TCP then we use",
    "start": "234120",
    "end": "241320"
  },
  {
    "text": "round-robin algorithm in order to distribute the traffic to your back-end instance whereas if you use HTTP then we",
    "start": "241320",
    "end": "248040"
  },
  {
    "text": "use least outstanding requests another thing to note is because yielding works",
    "start": "248040",
    "end": "255120"
  },
  {
    "text": "as as a proxy for all of your incoming requests your application will probably",
    "start": "255120",
    "end": "261959"
  },
  {
    "text": "see the IPS that the eops making to those to your application but if you have a use case",
    "start": "261960",
    "end": "268990"
  },
  {
    "text": "where you want to determine your your client IPS or the real IDs that the that",
    "start": "268990",
    "end": "274690"
  },
  {
    "text": "our users are using maybe to target certain piece of content to specific set",
    "start": "274690",
    "end": "280060"
  },
  {
    "text": "of users in a geography or in the case of do s you want to limit the number of",
    "start": "280060",
    "end": "285880"
  },
  {
    "text": "connections that the users are making then you can turn on a feature called x-forwarded-for in terms of HTTP or else",
    "start": "285880",
    "end": "295570"
  },
  {
    "text": "you can turn on proxy protocol in TCP mode so that's something that you want",
    "start": "295570",
    "end": "301060"
  },
  {
    "text": "to keep an eye on and turn on if you want to determine the real IPS so",
    "start": "301060",
    "end": "309870"
  },
  {
    "start": "308000",
    "end": "308000"
  },
  {
    "text": "application load balancer that's the that's the feature that we announced during the New York summit and what it",
    "start": "309870",
    "end": "317800"
  },
  {
    "text": "does is it works at layer 7 right so it sits at the application traffic of the",
    "start": "317800",
    "end": "322990"
  },
  {
    "text": "OSI model and then it supports content",
    "start": "322990",
    "end": "328450"
  },
  {
    "text": "based routing so let's say if you have application one running on a couple of",
    "start": "328450",
    "end": "334419"
  },
  {
    "text": "ec2 instances and application to running on the other side of instances and if you wanted to serve your application",
    "start": "334419",
    "end": "340750"
  },
  {
    "text": "example.com / app 12 certain set versus app to to the other set then you can do",
    "start": "340750",
    "end": "347770"
  },
  {
    "text": "that using a single elb right you can go and configure target groups and then",
    "start": "347770",
    "end": "354600"
  },
  {
    "text": "send the right level of traffic to specific set of applications running on easy to the other features that I want",
    "start": "354600",
    "end": "363970"
  },
  {
    "text": "to call out is you can also it also supports web sockets and HTTP too so if",
    "start": "363970",
    "end": "370510"
  },
  {
    "text": "you have applications that needs web sockets or HTTP to support you can take advantage of application load balancer",
    "start": "370510",
    "end": "377700"
  },
  {
    "text": "also if you are building microservices and if you're leveraging the ec2",
    "start": "377700",
    "end": "384520"
  },
  {
    "text": "container service in order to deploy your docker containers one feature that",
    "start": "384520",
    "end": "390039"
  },
  {
    "text": "you get from application load balancer is the dynamic host port mapping so before in the world of ALB these you",
    "start": "390039",
    "end": "397280"
  },
  {
    "text": "have to go and define your host for your container port and you are pretty much",
    "start": "397280",
    "end": "403759"
  },
  {
    "text": "limited to running single service on on a single host on a cluster but the",
    "start": "403759",
    "end": "410810"
  },
  {
    "text": "capability of you know Dockers dynamic port mapping it integrates directly with application load balancer and you can",
    "start": "410810",
    "end": "417590"
  },
  {
    "text": "specify which container port you using and it works very well it's all integrated it's a managed service so",
    "start": "417590",
    "end": "423849"
  },
  {
    "text": "certainly take advantage of it we will go into a pretty good depth later in the",
    "start": "423849",
    "end": "428949"
  },
  {
    "text": "in the slides when we talk about the container journey so here are few",
    "start": "428949",
    "end": "435830"
  },
  {
    "text": "features at a glance what I'll do is I'll cover the first half the you know",
    "start": "435830",
    "end": "442639"
  },
  {
    "text": "i'll cover the health checks i'll timeouts and cross zone i already talked about path based routing and I let kit",
    "start": "442639",
    "end": "449930"
  },
  {
    "text": "and Jeff talk about the other feature sets as they as we move along so let's",
    "start": "449930",
    "end": "455810"
  },
  {
    "text": "take a look at what health check is so he'll check is is a pretty important",
    "start": "455810",
    "end": "461120"
  },
  {
    "start": "456000",
    "end": "456000"
  },
  {
    "text": "feature right if you want to let your users access your application you want",
    "start": "461120",
    "end": "467029"
  },
  {
    "text": "to make sure that that application is live and elb supports TCP and HTTP a",
    "start": "467029",
    "end": "475460"
  },
  {
    "text": "health checks you can customize the frequency and failure thresholds you can",
    "start": "475460",
    "end": "481610"
  },
  {
    "text": "say you know how frequent you want to do those health checks and also in it's the",
    "start": "481610",
    "end": "489050"
  },
  {
    "text": "health checks fails you can say and I want to help text Raiders to go from green to red or unavailable when it",
    "start": "489050",
    "end": "497509"
  },
  {
    "text": "crosses a certain threshold another thing to note here is this feature works very well with auto scaling group so if",
    "start": "497509",
    "end": "505159"
  },
  {
    "text": "you have your applications that are using auto scaling and that if they are",
    "start": "505159",
    "end": "510589"
  },
  {
    "text": "scaling based on demand if they're an addition of an instance due to a scale-out event then you can configure",
    "start": "510589",
    "end": "519169"
  },
  {
    "text": "your elb service in order to check those health checks so when that instant comes",
    "start": "519169",
    "end": "525199"
  },
  {
    "text": "up it bootstrap the application and how to extra minds that it's it's the application is live then the EOB",
    "start": "525199",
    "end": "533330"
  },
  {
    "text": "service can start sending the traffic so it works very well with he'll check another feature that you'll be you'll be",
    "start": "533330",
    "end": "541370"
  },
  {
    "text": "configuring is the connection draining so if there is a scale in event so we just spoke about the scale out of n so",
    "start": "541370",
    "end": "547040"
  },
  {
    "text": "if there's a scaling event where the instance is getting removed off the auto scaling pool then the EOB will go and",
    "start": "547040",
    "end": "554030"
  },
  {
    "text": "drain all the connections make sure that there's no connection on that instance and then that instance can be taken away",
    "start": "554030",
    "end": "559370"
  },
  {
    "text": "from the auto scaling group so all of this works automatic it's just an APR",
    "start": "559370",
    "end": "564440"
  },
  {
    "text": "just go and configure it and it works well oh so idle timeout is the length of",
    "start": "564440",
    "end": "572890"
  },
  {
    "start": "568000",
    "end": "568000"
  },
  {
    "text": "the time idle connection should be kept open so the default here is 60 seconds",
    "start": "572890",
    "end": "580160"
  },
  {
    "text": "but you can configure it to go up to 16 minutes and the best practice here is to",
    "start": "580160",
    "end": "587180"
  },
  {
    "text": "use is to have idle timeouts decrease as you go down the stack so if you're",
    "start": "587180",
    "end": "595160"
  },
  {
    "text": "looking at this architecture what we have is the idle timeout configure",
    "start": "595160",
    "end": "600260"
  },
  {
    "text": "between client and the EOB as 15 seconds and then EOB to ec2 then you'll see a",
    "start": "600260",
    "end": "605450"
  },
  {
    "text": "smaller amount of idle time odds as you go down the stack now this is to prevent good resources that are in the back end",
    "start": "605450",
    "end": "612740"
  },
  {
    "text": "right so you don't want to overwhelm them with too many connections keeping idol so understanding your idle time",
    "start": "612740",
    "end": "621920"
  },
  {
    "text": "outs your client timeouts is therefore pretty important now cross on load",
    "start": "621920",
    "end": "629270"
  },
  {
    "start": "627000",
    "end": "627000"
  },
  {
    "text": "balancing is another key feature of elb what it does is it distributes incoming",
    "start": "629270",
    "end": "636920"
  },
  {
    "text": "requests evenly across multiple availability zones so one of the best practice in native Lewis is to make sure",
    "start": "636920",
    "end": "644090"
  },
  {
    "text": "that your applications are running in multiple availability zones so if you go",
    "start": "644090",
    "end": "650600"
  },
  {
    "text": "and enable this feature for whatever reason if your instances are not properly sized or you have too many",
    "start": "650600",
    "end": "658370"
  },
  {
    "text": "instances in one AZ the other than the other maybe to take advantage of our eyes if you go and",
    "start": "658370",
    "end": "664490"
  },
  {
    "text": "enable cross saw load-balancing what this feature will do is it will eliminate imbalances in back-end",
    "start": "664490",
    "end": "671090"
  },
  {
    "text": "instance utilization another thing to note here is there is no additional",
    "start": "671090",
    "end": "677240"
  },
  {
    "text": "charge for crossing traffic so those",
    "start": "677240",
    "end": "684530"
  },
  {
    "text": "were the features I wanted to cover and like I said I already covered the pathways robbing what I'll do is I'll",
    "start": "684530",
    "end": "690500"
  },
  {
    "text": "invite hit you bank who will come over and talk about how they use load",
    "start": "690500",
    "end": "695750"
  },
  {
    "text": "balancing in capital one and then we'll cover their container journey later on",
    "start": "695750",
    "end": "701950"
  },
  {
    "text": "thank you Peter so Kevin one we love",
    "start": "701950",
    "end": "707960"
  },
  {
    "text": "load balancers we are running hundreds and hundreds of the load balancers why because load balancing is a critical",
    "start": "707960",
    "end": "714740"
  },
  {
    "text": "component of any scalable distributed modern system done well load balancing",
    "start": "714740",
    "end": "720230"
  },
  {
    "text": "is going to reduce latency and increase resilience by dynamically distributing load across a number of backends",
    "start": "720230",
    "end": "728680"
  },
  {
    "text": "traditional monolithic apps this logic would have been in the app itself you'd have to code it yourself with custom",
    "start": "728680",
    "end": "735350"
  },
  {
    "text": "logic or you'd pull in a third-party library as the applications architectures progressed to a modern",
    "start": "735350",
    "end": "741980"
  },
  {
    "text": "microservices model moving this logic out of each app and into the underlying infrastructure becomes increasingly",
    "start": "741980",
    "end": "748310"
  },
  {
    "text": "important each app should not be managing its own load balancing logic a",
    "start": "748310",
    "end": "753400"
  },
  {
    "text": "couple one design all our new systems as API first really their API only so for",
    "start": "753400",
    "end": "759710"
  },
  {
    "text": "example our new servicing website is a single page anger app tool the new API is implemented in the cloud well our",
    "start": "759710",
    "end": "766490"
  },
  {
    "text": "mobile apps and native apps talking to API is implemented in the cloud so we",
    "start": "766490",
    "end": "771560"
  },
  {
    "text": "have hundreds of AP is using HTTP and rest everywhere these napi",
    "start": "771560",
    "end": "777320"
  },
  {
    "text": "implementations of technology agnostic each team can choose its own tax pack so",
    "start": "777320",
    "end": "783440"
  },
  {
    "text": "in all communication between the apps and api's is via is irate the eyes so",
    "start": "783440",
    "end": "789260"
  },
  {
    "text": "this requires us to use load balancing as a service so that load balancing becomes a deployment concern not the application",
    "start": "789260",
    "end": "795440"
  },
  {
    "text": "developers concern and using lb so this gives us great integration with other",
    "start": "795440",
    "end": "801650"
  },
  {
    "text": "AWS services such as auto scaling groups and easy s services effectively for free",
    "start": "801650",
    "end": "808420"
  },
  {
    "text": "so right now we're using low balances everywhere in a number of different",
    "start": "808420",
    "end": "813920"
  },
  {
    "text": "architectures our traditional monolithic apps we're invented using classic load balancers in front of auto scaling",
    "start": "813920",
    "end": "819980"
  },
  {
    "text": "groups and easy to instances and we're going to moving some of those two microservices ecs and as you're going to",
    "start": "819980",
    "end": "828290"
  },
  {
    "text": "find out the rest of the presentation we're moving to using al bees everywhere",
    "start": "828290",
    "end": "834279"
  },
  {
    "text": "so let's walk through how al be greatly simplify deployment of a standard pattern we use we have a single API",
    "start": "834400",
    "end": "841550"
  },
  {
    "text": "endpoint which fronts a number of different services and something in the URL path usually the first segment is",
    "start": "841550",
    "end": "848960"
  },
  {
    "text": "going to distinguish between different services that are offered by that API so",
    "start": "848960",
    "end": "854330"
  },
  {
    "text": "traditionally we've implemented this with two levels of classic load balancers the first load balancer",
    "start": "854330",
    "end": "860030"
  },
  {
    "text": "balances to a pool of ec2 instances and an auto scaling group running software",
    "start": "860030",
    "end": "866260"
  },
  {
    "text": "HTTP proxy something like apache with mod proxy and that proxy software",
    "start": "866260",
    "end": "872870"
  },
  {
    "text": "balances or directs loads to a second tier of load balancers that front the",
    "start": "872870",
    "end": "881480"
  },
  {
    "text": "micro services themselves the advantage here is that we can scale each of those auto scaling groups or the micro",
    "start": "881480",
    "end": "887300"
  },
  {
    "text": "services independently but what do we have to manage for this setup well we've",
    "start": "887300",
    "end": "895130"
  },
  {
    "start": "891000",
    "end": "891000"
  },
  {
    "text": "got to manage two sets of classic load balancers for the software proxy we have to manage the auto scaling group and the",
    "start": "895130",
    "end": "902480"
  },
  {
    "text": "associated ec2 instances we have to provision as ec2 instances with an LS we",
    "start": "902480",
    "end": "908420"
  },
  {
    "text": "have to set up logging we have to set up monitoring we have to secure those ec2 instances and of course you have to patch them throughout their lifecycle",
    "start": "908420",
    "end": "915080"
  },
  {
    "text": "and then we have the actual software running on there's easy two instances we have to set up and install the Apache",
    "start": "915080",
    "end": "921140"
  },
  {
    "text": "proxy we have to worry about patch patching that proxy and of course they're all the various configurations",
    "start": "921140",
    "end": "927290"
  },
  {
    "text": "and rules for the protein that we have to manage as well and of course all of this has a cost there's an operational",
    "start": "927290",
    "end": "934610"
  },
  {
    "text": "cost of course there AWS costs and they're going to be performance costs but we can replace the whole of this",
    "start": "934610",
    "end": "940790"
  },
  {
    "text": "with an ALB so as Peter mentioned an ALB",
    "start": "940790",
    "end": "946780"
  },
  {
    "text": "actor layer 7 and can route based on a TV features for example the URL so we",
    "start": "946780",
    "end": "954830"
  },
  {
    "text": "get to replace the whole of the classic load balancer and software proxy with a",
    "start": "954830",
    "end": "960170"
  },
  {
    "text": "single ALB and it will route to the back-end service based on the URL path",
    "start": "960170",
    "end": "967660"
  },
  {
    "text": "or do we have to manage here really nothing the only thing we have to worry about is technological 2lb target group",
    "start": "968290",
    "end": "975290"
  },
  {
    "text": "and that's all done with API calls",
    "start": "975290",
    "end": "979269"
  },
  {
    "text": "cute so what is the target group the details are in the name it's a group of",
    "start": "996560",
    "end": "1001720"
  },
  {
    "start": "997000",
    "end": "997000"
  },
  {
    "text": "targets okay so what's a target so targets anything that's going to receive communication traffic for example an",
    "start": "1001720",
    "end": "1007810"
  },
  {
    "text": "instance or an auto scaling group or an ecs service the important thing is that",
    "start": "1007810",
    "end": "1012970"
  },
  {
    "text": "the targets dynamically register with the target group so that you the application developer don't have to do",
    "start": "1012970",
    "end": "1018370"
  },
  {
    "text": "anything the order scaling group or the ecs service automatically takes care of registering with the target group and",
    "start": "1018370",
    "end": "1024430"
  },
  {
    "text": "said there are different routes for each target group and the target groups are monitored independently so let's go",
    "start": "1024430",
    "end": "1034030"
  },
  {
    "start": "1032000",
    "end": "1032000"
  },
  {
    "text": "through an example traffic comes into a load balancer and then based on the port",
    "start": "1034030",
    "end": "1040900"
  },
  {
    "text": "and proxy port and the protocol it's routed to a listener example put a th us",
    "start": "1040900",
    "end": "1047140"
  },
  {
    "text": "here is going to route to the left-hand listen up there a set of rules associated with the listener and these",
    "start": "1047140",
    "end": "1053230"
  },
  {
    "text": "rules are responsible for routing traffic to the various target groups containing the target instances so the",
    "start": "1053230",
    "end": "1059860"
  },
  {
    "text": "rules use past base matching with regular expressions the patterns determine which target group to route",
    "start": "1059860",
    "end": "1066490"
  },
  {
    "text": "traffic to in case of multiple patterns matching the path the rules have",
    "start": "1066490",
    "end": "1073300"
  },
  {
    "text": "priority and the lower priority rules evaluated and match first and if no",
    "start": "1073300",
    "end": "1079150"
  },
  {
    "text": "rules match you always have to have a default rule so that Todd the traffic is going to end up somewhere so for example",
    "start": "1079150",
    "end": "1085300"
  },
  {
    "text": "here first request is headed for / credit card and it gets routed to the",
    "start": "1085300",
    "end": "1090520"
  },
  {
    "text": "left-hand target group second request / mortgage gets routed to the righthand",
    "start": "1090520",
    "end": "1096820"
  },
  {
    "text": "target group and a third request HP and",
    "start": "1096820",
    "end": "1103240"
  },
  {
    "text": "port 8080 goes to the right-hand listener no rules are set up and we use",
    "start": "1103240",
    "end": "1110230"
  },
  {
    "text": "the default rule so that's just one example of using target groups they've",
    "start": "1110230",
    "end": "1115540"
  },
  {
    "text": "come a lot more powerful when we use them in conjunction with ecs services talk about Capital One's container",
    "start": "1115540",
    "end": "1121420"
  },
  {
    "text": "journey and add over to my colleague Jeff story so by a quick show of hands here who is",
    "start": "1121420",
    "end": "1127290"
  },
  {
    "text": "actually using containers in production is anybody already using the ALB",
    "start": "1127290",
    "end": "1132570"
  },
  {
    "text": "features okay so there's a lot of different reasons why people go to containers and I want to talk a little",
    "start": "1132570",
    "end": "1139740"
  },
  {
    "text": "bit about why we went to containers first and then we'll dive into the technology of how it actually works and our journey from going to the classic",
    "start": "1139740",
    "end": "1146430"
  },
  {
    "text": "load balancers to the new application of bouncers so a couple years ago we",
    "start": "1146430",
    "end": "1151650"
  },
  {
    "text": "started moving into AWS but before that we were not what I would call a developer friendly culture so if you",
    "start": "1151650",
    "end": "1157440"
  },
  {
    "text": "needed to request a server you have to fill out a work order submitted to some team would provision it maybe two weeks",
    "start": "1157440",
    "end": "1162720"
  },
  {
    "text": "later you would get that server then you need a tomcat installed on there and you really didn't have many other choices",
    "start": "1162720",
    "end": "1167940"
  },
  {
    "text": "other than Java weblogic tomcat applications and this whole process would take a couple of weeks and then if",
    "start": "1167940",
    "end": "1173730"
  },
  {
    "text": "you wanted another server same process over and over again as we move to cloud that really got a lot simpler and",
    "start": "1173730",
    "end": "1179490"
  },
  {
    "text": "containers made that even much simpler so a lot of us talk about the cost savings we get with containers in terms",
    "start": "1179490",
    "end": "1186780"
  },
  {
    "text": "of we reduce the footprints of our hosts so it means we're running way fewer hosts and but where I think the real",
    "start": "1186780",
    "end": "1192900"
  },
  {
    "text": "cost savings come in are in your developer savings developer time savings we can deploy things in seconds not",
    "start": "1192900",
    "end": "1200070"
  },
  {
    "text": "minutes we can explore a lot of different languages so while we are primarily still Java heavy edge capital",
    "start": "1200070",
    "end": "1206220"
  },
  {
    "text": "one we have a variety of languages that have popped up across our enterprise on different teams breathing using Python",
    "start": "1206220",
    "end": "1211740"
  },
  {
    "text": "go Scala on just a variety of technologies it is containers have made this much easier because we can just",
    "start": "1211740",
    "end": "1217920"
  },
  {
    "text": "experiment launch containers and tear them down very quickly so as a whole our",
    "start": "1217920",
    "end": "1223440"
  },
  {
    "text": "movement to cloud and containers have really helped capital one become a much more developer centric culture so it's",
    "start": "1223440",
    "end": "1229140"
  },
  {
    "text": "more on the cultural and process side but now I want to talk about the technology of how we actually get containers to work so while containers",
    "start": "1229140",
    "end": "1236670"
  },
  {
    "start": "1236000",
    "end": "1236000"
  },
  {
    "text": "are nice for development you run it you create a docker file you launch it on",
    "start": "1236670",
    "end": "1241800"
  },
  {
    "text": "your localhost you may be in vagrant a virtual box hit the local host it's really easy but then how does that get",
    "start": "1241800",
    "end": "1248190"
  },
  {
    "text": "from your laptop into a production center so the basic strap problem we're",
    "start": "1248190",
    "end": "1254100"
  },
  {
    "text": "trying to solve the orchestration problem is traffic comes into a balancer step 2 is something magic",
    "start": "1254100",
    "end": "1259360"
  },
  {
    "text": "happens and step three traffic magically gets distributed to the containers and",
    "start": "1259360",
    "end": "1265210"
  },
  {
    "text": "we gloss over this a lot but this is as if he can be putted a lot of hand waving and bombast there's really a lot of work",
    "start": "1265210",
    "end": "1270790"
  },
  {
    "text": "that needs to be done here and there's a lot of frameworks there's Cooper Nettie's meso swarm nomad rancher ecs",
    "start": "1270790",
    "end": "1277660"
  },
  {
    "text": "and a whole lot of other frameworks and each have their own trade-offs the fact that there's so many of these orchestration frameworks means that this",
    "start": "1277660",
    "end": "1284320"
  },
  {
    "text": "is a hard problem to solve so we were in this interesting situation that I'm sure many of you have been in we wanted to",
    "start": "1284320",
    "end": "1290020"
  },
  {
    "text": "get into the container space and ecs had come out fairly recently a OBS were not out yet we figured that at some point",
    "start": "1290020",
    "end": "1296500"
  },
  {
    "text": "we'd come to reinvent and Amazon would launch some services that made everything we were doing obsolete but we",
    "start": "1296500",
    "end": "1303130"
  },
  {
    "text": "had to do something and develop something in the meantime so I won't talk about what we did and where we ended up so the first thing we did was",
    "start": "1303130",
    "end": "1312130"
  },
  {
    "text": "look at classic load balancers so classic load balancers worked very well for us when we were using traditional",
    "start": "1312130",
    "end": "1318580"
  },
  {
    "text": "ec2 instances and auto scaling groups there with health check integration instances would dynamically come up and",
    "start": "1318580",
    "end": "1325360"
  },
  {
    "text": "down you really don't have to worry about that deployment doing Bluegreen deployments canary deployments it was a pretty easy thing to do with ec2 plastic",
    "start": "1325360",
    "end": "1332920"
  },
  {
    "text": "and or easy two instances and the classic load balancers cloud watch integration everything worked well so",
    "start": "1332920",
    "end": "1338140"
  },
  {
    "text": "that's where we started for containers but if you've used lbs and ecs together",
    "start": "1338140",
    "end": "1343660"
  },
  {
    "text": "they just don't really work this was this was our first crack at it and Peter mentioned this before basically you",
    "start": "1343660",
    "end": "1349810"
  },
  {
    "start": "1346000",
    "end": "1346000"
  },
  {
    "text": "can't take advantage of any docker features of port mapping and ephemeral mapping because load balancers don't",
    "start": "1349810",
    "end": "1355930"
  },
  {
    "text": "dynamically map two forts on the back end so what you end up having to do is you select the port for the host and",
    "start": "1355930",
    "end": "1362590"
  },
  {
    "text": "select report for the container and you have to manage that mapping by yourself then you create a separate load balancer",
    "start": "1362590",
    "end": "1367780"
  },
  {
    "text": "for each service you specify which of the witch of the ports that maps to and I could see some head shaking here so I",
    "start": "1367780",
    "end": "1372880"
  },
  {
    "text": "feel like some people have probably gone through this pain a bit before so the bottom line for us was this was an easy",
    "start": "1372880",
    "end": "1378700"
  },
  {
    "text": "way to get started we learned how ecs work but we learned this didn't work with lbs so this is what didn't work",
    "start": "1378700",
    "end": "1384830"
  },
  {
    "text": "but let's talk about what did work so back to this problem of traffic coming in to the container to the host and",
    "start": "1384830",
    "end": "1392240"
  },
  {
    "text": "having get routed to the container somehow so we did some research and the ideas we came up with were to put a",
    "start": "1392240",
    "end": "1397940"
  },
  {
    "text": "local proxy on each machine so the local proxy here would be an engine X you can substitute in your favorite proxy here",
    "start": "1397940",
    "end": "1403580"
  },
  {
    "text": "whether it's H a proxy or something else the idea is that would understand how to route traffic to each of the containers",
    "start": "1403580",
    "end": "1409070"
  },
  {
    "text": "but that's just step one we need to now tell I'm jennex how to actually get to traffic to the containers so that's",
    "start": "1409070",
    "end": "1414740"
  },
  {
    "text": "where regístrate o comes in and if you've not used regístrate ER before it's a docker tool that will sit on your",
    "start": "1414740",
    "end": "1420830"
  },
  {
    "text": "hosts and listen to various container events so containers coming off container going down it'll understand",
    "start": "1420830",
    "end": "1426620"
  },
  {
    "text": "metadata health check information so you can effectively build a registry of what containers are running where and but",
    "start": "1426620",
    "end": "1432980"
  },
  {
    "text": "that information still has to get back to in genetics so the next piece of this console so console is a key distributed",
    "start": "1432980",
    "end": "1440899"
  },
  {
    "text": "key value storage engine even though it's drawn is a single node up here I wrote console cluster this is",
    "start": "1440899",
    "end": "1447080"
  },
  {
    "text": "non-trivial to manage its multiple nodes trying to main some maintain some sort of eventually consistent database of",
    "start": "1447080",
    "end": "1453049"
  },
  {
    "text": "information that we then have to manage and still get this information back into",
    "start": "1453049",
    "end": "1458299"
  },
  {
    "text": "engine X so this is where the last piece comes in there's a tool called console",
    "start": "1458299",
    "end": "1463309"
  },
  {
    "text": "template and console template will listen to a venting console to changes",
    "start": "1463309",
    "end": "1468740"
  },
  {
    "text": "when containers come in come down and it can dynamically update some of the configuration files in engine X so we're",
    "start": "1468740",
    "end": "1475669"
  },
  {
    "text": "basically dynamically generating templates every time a new container comes up and down so this is really",
    "start": "1475669",
    "end": "1481340"
  },
  {
    "text": "non-trivial so if you want to build a small cluster these are all the components you need you need to bootstrap and genetics you need to",
    "start": "1481340",
    "end": "1487669"
  },
  {
    "text": "bootstrap regístrate ER you also have two methods of health checking you have console that's actually doing the health",
    "start": "1487669",
    "end": "1492950"
  },
  {
    "text": "checking of the containers you have n gops doing the health checking of the hosts you also have to manage your own",
    "start": "1492950",
    "end": "1498679"
  },
  {
    "text": "connection draining but we use this for a lot of our solutions before a lbs came out this is what we were doing and this",
    "start": "1498679",
    "end": "1505220"
  },
  {
    "text": "is this is what worked for us so this is what we went with so we tried to think",
    "start": "1505220",
    "end": "1510350"
  },
  {
    "text": "about what are the hardest parts of this is again still before I lbs and wanted to figure out how can we get away from at least managing the stateful part",
    "start": "1510350",
    "end": "1516870"
  },
  {
    "text": "of this so console is a lot of work for us a team to manage so this is where we",
    "start": "1516870",
    "end": "1521880"
  },
  {
    "text": "tried a new approach where we replaced console with dynamo so the architecture is generally similar here we replaced",
    "start": "1521880",
    "end": "1528420"
  },
  {
    "text": "console template with a tool called cough D which is something very similar it reads from a back-end and generates",
    "start": "1528420",
    "end": "1533640"
  },
  {
    "text": "dynamic configuration files which we use to populate engine X but we've run into a different set of problems here so",
    "start": "1533640",
    "end": "1540090"
  },
  {
    "text": "dynamo has no ttls for their keys so if containers didn't get cleared out for some reason they would just sit there",
    "start": "1540090",
    "end": "1546390"
  },
  {
    "text": "and engine X wouldn't know that they've been removed so that's where we then wrote a custom lambda function that has",
    "start": "1546390",
    "end": "1551430"
  },
  {
    "text": "to manage the dynamo database and periodically clean up stale entries now",
    "start": "1551430",
    "end": "1557010"
  },
  {
    "text": "we have to introduce monitoring for our lambda functions so in the end I don't think we really simplified things all",
    "start": "1557010",
    "end": "1562140"
  },
  {
    "text": "that much we just traded one set of problems for another unfortunately it was about this time where application",
    "start": "1562140",
    "end": "1568740"
  },
  {
    "text": "load balancers came out so look at this picture here and what does it look like with application load balancers much",
    "start": "1568740",
    "end": "1574500"
  },
  {
    "start": "1572000",
    "end": "1572000"
  },
  {
    "text": "simpler so we're all that glue code go well our friends at AWS are managing it for us so all those things are still",
    "start": "1574500",
    "end": "1580980"
  },
  {
    "text": "happening somewhere in the background but it's less complexity for us at Capital One as developers to manage we",
    "start": "1580980",
    "end": "1586800"
  },
  {
    "text": "get to focus on the application logic that we're good at and we let AWS focus on the infrastructure where they're good",
    "start": "1586800",
    "end": "1592260"
  },
  {
    "text": "at so what happens is each application is now deployed as a target group so kit",
    "start": "1592260",
    "end": "1597540"
  },
  {
    "text": "discuss how target groups work before but these integrate very tightly with ecs services so each ecs service can be",
    "start": "1597540",
    "end": "1604410"
  },
  {
    "text": "deployed as a separate target group so I deploy application one it's one service group deploy application to it's another",
    "start": "1604410",
    "end": "1609750"
  },
  {
    "text": "service group and then I simply tell the load balancer which target groups are where they dynamically register",
    "start": "1609750",
    "end": "1615800"
  },
  {
    "text": "instances can come up and down and and the EO bees or the ALB is an acs take",
    "start": "1615800",
    "end": "1621300"
  },
  {
    "text": "care of all this logic for us it also handles connection draining so now as",
    "start": "1621300",
    "end": "1626340"
  },
  {
    "text": "certain containers are coming up and down connections are properly drained so this this makes our life a whole lot",
    "start": "1626340",
    "end": "1632610"
  },
  {
    "text": "easier we still have some internal deployment tools that we use to manage the deployments of the actual cluster",
    "start": "1632610",
    "end": "1638490"
  },
  {
    "text": "hosts as well as the ecs services and the lbs but as far as all the glue code go",
    "start": "1638490",
    "end": "1643910"
  },
  {
    "text": "we no longer have to write that ourselves so Peter touched on some of",
    "start": "1643910",
    "end": "1649010"
  },
  {
    "start": "1647000",
    "end": "1647000"
  },
  {
    "text": "these features before but I want to go back to auto scaling here so when we talked about auto scaling we've all used",
    "start": "1649010",
    "end": "1654830"
  },
  {
    "text": "auto scaling with ec2 instances in the past and we can auto scale our container hosts the same way we use cloud watch",
    "start": "1654830",
    "end": "1660740"
  },
  {
    "text": "alarms when we need more capacity we scale out the container hosts but where the ecs scaling comes in is cloud watch",
    "start": "1660740",
    "end": "1667100"
  },
  {
    "text": "can also trigger scaling events independently on ecs services so if you have one service that has to scale up",
    "start": "1667100",
    "end": "1673970"
  },
  {
    "text": "because it needs more capacity you can scale up that service independently other than independently of other",
    "start": "1673970",
    "end": "1679220"
  },
  {
    "text": "services so with this you get a fully featured orchestration and traffic",
    "start": "1679220",
    "end": "1684230"
  },
  {
    "text": "routing system that got rid of a lot of the code that we have to write there's also a much better health checking so",
    "start": "1684230",
    "end": "1690260"
  },
  {
    "start": "1688000",
    "end": "1688000"
  },
  {
    "text": "health checking although they are they do only work at layer seven because the ALB is at layer seven so if you're currently using a tcp endpoint you may",
    "start": "1690260",
    "end": "1697280"
  },
  {
    "text": "need to change to just an hdb but that's fairly fairly simple to do and you can also customize your health check codes",
    "start": "1697280",
    "end": "1703010"
  },
  {
    "text": "so for some reason your application doesn't return to 200 maybe it means returns a 20 for something where I",
    "start": "1703010",
    "end": "1708620"
  },
  {
    "text": "Obie's just fell on that a little bit a lbs can be customized so now we've solved the problem of how we route",
    "start": "1708620",
    "end": "1715310"
  },
  {
    "text": "traffic but we still really haven't talked about how we deploy code and that's us we're going to spend a little time talking here repeat repeatable",
    "start": "1715310",
    "end": "1724100"
  },
  {
    "text": "deployments in cloud is really important to being successful we're deploying many times a day and this has to be a",
    "start": "1724100",
    "end": "1730160"
  },
  {
    "text": "reliable process that's automated really no manual steps so before we go into the details of how we do deployments with",
    "start": "1730160",
    "end": "1736550"
  },
  {
    "text": "ecs and a lbs in particular I want to spend a little bit of time talking about what deployment at Capital One look like",
    "start": "1736550",
    "end": "1742640"
  },
  {
    "text": "in general so as a bank with customer-facing applications we rely on very high availability and for our most",
    "start": "1742640",
    "end": "1749540"
  },
  {
    "start": "1744000",
    "end": "1744000"
  },
  {
    "text": "critical applications we go to multi region deployments we do use standard blue green deployment patterns where go",
    "start": "1749540",
    "end": "1755750"
  },
  {
    "text": "through that's quickly here is the blue stack will refer to as our current stack and so when we're ready to deploy a new",
    "start": "1755750",
    "end": "1761780"
  },
  {
    "text": "application what we typically roll it out is in one region will deploy the grain stack and will route some",
    "start": "1761780",
    "end": "1767780"
  },
  {
    "text": "percentage of traffic there for a canary meal typically a small percentage we'll watch we'll watch we'll monitor we've",
    "start": "1767780",
    "end": "1773060"
  },
  {
    "text": "all smoke tests that are happening and once we're happy that this is running successfully and none of the alarms and",
    "start": "1773060",
    "end": "1779210"
  },
  {
    "text": "whistles are going off will do the same thing in the other region and then saved a monitor and the ones we're happy with",
    "start": "1779210",
    "end": "1785450"
  },
  {
    "text": "that will start taking down the BlueStacks first blue stack comes down second blue stack comes down and now our",
    "start": "1785450",
    "end": "1790670"
  },
  {
    "text": "green stack has become our new application so this was not too difficult to do with ec2 some companies",
    "start": "1790670",
    "end": "1798650"
  },
  {
    "text": "have pioneered how to do this and made many tools available but this isn't really that trivial yet with a lbs and",
    "start": "1798650",
    "end": "1804500"
  },
  {
    "text": "ecs so talk through how that works so easy has target groups work using a",
    "start": "1804500",
    "end": "1811070"
  },
  {
    "start": "1807000",
    "end": "1807000"
  },
  {
    "text": "rolling deployment strategy so if when you define an acs service you define a test definition and when you update a",
    "start": "1811070",
    "end": "1817970"
  },
  {
    "text": "test definition it automatically triggers a new deployment of that particular service and the way the",
    "start": "1817970",
    "end": "1823100"
  },
  {
    "text": "deployment works is in a rolling fashion kurla make one break one so we create a new version of that service and delete",
    "start": "1823100",
    "end": "1829520"
  },
  {
    "text": "the old one new version of the service of the guild one and continue until the entire cluster is delete updated now",
    "start": "1829520",
    "end": "1836780"
  },
  {
    "text": "this is really fine for a lot of simple services but for large critical applications this doesn't provide",
    "start": "1836780",
    "end": "1842570"
  },
  {
    "text": "necessarily enough flexibility for what you need there's no manual gating there's no canary testing there's not a",
    "start": "1842570",
    "end": "1848810"
  },
  {
    "text": "really simple way to roll back so i'll be showing a fairly trivial example of three nodes here imagine hundreds of",
    "start": "1848810",
    "end": "1854150"
  },
  {
    "text": "nodes and this rolling and you realize you've pushed out a bad piece of code now you're propagating this across so we",
    "start": "1854150",
    "end": "1859970"
  },
  {
    "text": "still have found ways to work with acs and do deployments and that's where i'm going to talk through that here so this",
    "start": "1859970",
    "end": "1866060"
  },
  {
    "text": "is what we want to do is we have one target group and we create a second target group here so second target group",
    "start": "1866060",
    "end": "1871790"
  },
  {
    "text": "will call / beta / canary whatever whatever you want to call a name it whatever you want but the idea is that there is a second target group running a",
    "start": "1871790",
    "end": "1878660"
  },
  {
    "text": "second copy of the application that has your newer version of it and then we have our own internal tools that will",
    "start": "1878660",
    "end": "1885350"
  },
  {
    "text": "actually route traffic to either the new one or the old one depending on various criteria whether it's geolocation a",
    "start": "1885350",
    "end": "1891770"
  },
  {
    "text": "certain subset of customers just a percentage but this is how we do our canary builds and then once we're",
    "start": "1891770",
    "end": "1897080"
  },
  {
    "text": "satisfied that the canary is successful we then get rid of the canary and that becomes the new application itself we",
    "start": "1897080",
    "end": "1903440"
  },
  {
    "text": "get rid of the old target group I know all the traffic is routed / happened so that's all controlled by some of our internal deployment tools",
    "start": "1903440",
    "end": "1909799"
  },
  {
    "text": "and we hope in the future some of those features will be in integrated into a lbs and ecs directly so now at this",
    "start": "1909799",
    "end": "1917720"
  },
  {
    "text": "point we have covered traffic routing and deployments but there's a lot of",
    "start": "1917720",
    "end": "1922880"
  },
  {
    "text": "things that go from your testing in your dev environment to really going to a production scale all the non functional",
    "start": "1922880",
    "end": "1928549"
  },
  {
    "text": "requirements things like logging monitoring costs analytics and all the things you need to run this at a really",
    "start": "1928549",
    "end": "1933740"
  },
  {
    "text": "large scale so kids going to come back and talk here about how we operate what the ALB to scale and how we manage some",
    "start": "1933740",
    "end": "1939770"
  },
  {
    "text": "of those different aspects Jeff so Jeff",
    "start": "1939770",
    "end": "1946789"
  },
  {
    "text": "mentioned this is all great if is working as a proof of concept or in your dev your test environments but it's",
    "start": "1946789",
    "end": "1954200"
  },
  {
    "text": "really only useful little holes up in production a couple of one we're running critical applications in the cloud and",
    "start": "1954200",
    "end": "1960190"
  },
  {
    "text": "we have to worry about a lot of non functional requirements for example",
    "start": "1960190",
    "end": "1966380"
  },
  {
    "text": "security logging monitoring and cost so",
    "start": "1966380",
    "end": "1972470"
  },
  {
    "start": "1971000",
    "end": "1971000"
  },
  {
    "text": "as a bank security is non-negotiable all our data has to be encrypted at rest and",
    "start": "1972470",
    "end": "1978049"
  },
  {
    "text": "traffic has to be encrypted between AP is else B's work at layer 7 so the",
    "start": "1978049",
    "end": "1984950"
  },
  {
    "text": "Transport Security is going to be provided by HTTPS which is HTTP over TLS",
    "start": "1984950",
    "end": "1990340"
  },
  {
    "text": "to achieve that we can figure the listener protocol as HTTPS this means",
    "start": "1990340",
    "end": "1996440"
  },
  {
    "text": "that TLS you're going to terminate at the application load balancer so you must serve the x.509 certificate from",
    "start": "1996440",
    "end": "2002830"
  },
  {
    "text": "the load balancer do you that you can use either the AWS certificate manager ACM where everything is managed for you",
    "start": "2002830",
    "end": "2010649"
  },
  {
    "text": "what can use the IM service where you have to create this certificate yourself",
    "start": "2010649",
    "end": "2017260"
  },
  {
    "text": "and upload it to i am a patent we're often using for internal api's your",
    "start": "2017260",
    "end": "2023140"
  },
  {
    "text": "staff a single wild-card certificate for all our internal api's and manage it inside ACM if you need security",
    "start": "2023140",
    "end": "2033750"
  },
  {
    "text": "transport level security over to the backend instances then you have to start",
    "start": "2033750",
    "end": "2038830"
  },
  {
    "text": "another TLS session and to do that you set the target protocol in the target",
    "start": "2038830",
    "end": "2044440"
  },
  {
    "text": "group to HTTPS and then it's going to be your responsibility to ensure there's an",
    "start": "2044440",
    "end": "2049570"
  },
  {
    "text": "s Adele ssl certificate TLS certificate on each of the instances or containers",
    "start": "2049570",
    "end": "2054608"
  },
  {
    "text": "you have to configure that in the server software so once ever everything secured",
    "start": "2054609",
    "end": "2062320"
  },
  {
    "text": "we want to log our bees provide access logs very similar to the classic lbs so",
    "start": "2062320",
    "end": "2069849"
  },
  {
    "text": "the way that works is that you configure our an API call will do the console and",
    "start": "2069849",
    "end": "2074950"
  },
  {
    "text": "s3 bucket and the service itself writes the access logs to that bucket every",
    "start": "2074950",
    "end": "2080020"
  },
  {
    "text": "five minutes format of the log is completely published and each log line",
    "start": "2080020",
    "end": "2086770"
  },
  {
    "text": "is going to contain details of a single request made through the load balancer",
    "start": "2086770",
    "end": "2091888"
  },
  {
    "text": "both of successful ones and actually kind of most interesting the unsuccessful ones so those are ones that",
    "start": "2091889",
    "end": "2098170"
  },
  {
    "text": "don't make it all the way back to a target for example the request is malformed somehow or there are no live",
    "start": "2098170",
    "end": "2104740"
  },
  {
    "text": "target instances so the type field there is going to indicate which protocol the",
    "start": "2104740",
    "end": "2110740"
  },
  {
    "text": "request is for and we've been talking about about HTTP and HTTPS but Peter also mentioned application load",
    "start": "2110740",
    "end": "2117460"
  },
  {
    "text": "balancers support web sockets or the new HTTP to protocol the target irn a our",
    "start": "2117460",
    "end": "2123790"
  },
  {
    "text": "group a RN then is going to indicate which target group the request is for so",
    "start": "2123790",
    "end": "2130720"
  },
  {
    "text": "looking at the load balancer provides us a great way to monitor our services without actually modifying the code of",
    "start": "2130720",
    "end": "2137830"
  },
  {
    "text": "the service implementations themselves so it's a non-intrusive logging and",
    "start": "2137830",
    "end": "2143500"
  },
  {
    "text": "monitoring point and using a lambda you can imagine parsing the s3 using lambda",
    "start": "2143500",
    "end": "2151900"
  },
  {
    "text": "that's been set up on the s3 bucket you can imagine writing a lambda it's going to pass that access log and do something",
    "start": "2151900",
    "end": "2158020"
  },
  {
    "text": "with the information in there so what you see there is something that we we've",
    "start": "2158020",
    "end": "2163089"
  },
  {
    "text": "created a service monitoring framework where we pause those access logs and push the data to signal effects which is",
    "start": "2163089",
    "end": "2170920"
  },
  {
    "text": "a third-party SAS monitoring and alerting tool and is great so you've got it in secured with",
    "start": "2170920",
    "end": "2180589"
  },
  {
    "start": "2179000",
    "end": "2179000"
  },
  {
    "text": "logging now we're running we need to monitor so the service inside a dress",
    "start": "2180589",
    "end": "2185930"
  },
  {
    "text": "that provides monitoring its course cloud watch using lower level metrics we use cloud or metrics so one of the big",
    "start": "2185930",
    "end": "2193430"
  },
  {
    "text": "differences between application load balancers classic load balancers is that the metrics for application load",
    "start": "2193430",
    "end": "2200089"
  },
  {
    "text": "balancers are provided the target group so can really now see statistics for",
    "start": "2200089",
    "end": "2206930"
  },
  {
    "text": "each of the target groups previously they were provided for the load balancers at all as a whole and you",
    "start": "2206930",
    "end": "2212569"
  },
  {
    "text": "couldn't read distinguish how each of your individual services was performing so there are some metrics there they've",
    "start": "2212569",
    "end": "2220970"
  },
  {
    "text": "listed most of the metrics share between classic load balancers and application load balancers but three of the node",
    "start": "2220970",
    "end": "2227660"
  },
  {
    "text": "bullion metrics are listed there and the reason that they're notable is because they feed into the cost model so the",
    "start": "2227660",
    "end": "2235700"
  },
  {
    "text": "quad muscles differ slightly between classic load balancers and application load balancers they both consisted of",
    "start": "2235700",
    "end": "2242089"
  },
  {
    "text": "fixed parts in a variable part for classic load balancers as a base price that's the fixed parts you pay per load",
    "start": "2242089",
    "end": "2250099"
  },
  {
    "text": "balance so you have set up and then you pay a variable part based on the amount of data are transferring through the",
    "start": "2250099",
    "end": "2256160"
  },
  {
    "text": "load balancer application load balancers follow the same structure as a fixed",
    "start": "2256160",
    "end": "2262549"
  },
  {
    "text": "part a base price per instance of the application load balancer you have running and a variable part as well but",
    "start": "2262549",
    "end": "2270140"
  },
  {
    "text": "the variable part is based on a new concept called the load balancer capacity unit or LC you so this is where",
    "start": "2270140",
    "end": "2278299"
  },
  {
    "text": "the three metrics I mentioned on the previous slide feed in so the LCU is",
    "start": "2278299",
    "end": "2285200"
  },
  {
    "text": "based on those three met dimensions a number of new connections made to the load balancer per second the number of",
    "start": "2285200",
    "end": "2291799"
  },
  {
    "text": "active connections you have through the load balancer per minute and then the bandwidth that's data that's being",
    "start": "2291799",
    "end": "2298430"
  },
  {
    "text": "pumped through the load balancer so where the cost model works is metrics are made on each of those three",
    "start": "2298430",
    "end": "2303950"
  },
  {
    "text": "dimensions they can bet against the published by line and then whichever one exceeds the",
    "start": "2303950",
    "end": "2309230"
  },
  {
    "text": "baseline by the larger amount there's a an amount there that feeds into the cost",
    "start": "2309230",
    "end": "2314900"
  },
  {
    "text": "model and affects the amount that you're paying for the variable part according",
    "start": "2314900",
    "end": "2321020"
  },
  {
    "text": "is that Amazon you're generally going to be charged lower for the same configuration of al B's you would have",
    "start": "2321020",
    "end": "2329330"
  },
  {
    "text": "for a classic load balancer but of course due to this new lcu your your",
    "start": "2329330",
    "end": "2335330"
  },
  {
    "text": "mileage may vary and really as we talked about both in the path based routing and",
    "start": "2335330",
    "end": "2341650"
  },
  {
    "text": "in the in container part it's really developer productivity and and fewer",
    "start": "2341650",
    "end": "2347180"
  },
  {
    "text": "moving parts that really are going to feed much more into the cost over the long term so like any great service we",
    "start": "2347180",
    "end": "2359599"
  },
  {
    "text": "love load balancers but it's not one hundred percent perfect yet there'd be",
    "start": "2359599",
    "end": "2366619"
  },
  {
    "text": "some great announcements around lbs that reinvents but there's a few things that",
    "start": "2366619",
    "end": "2371900"
  },
  {
    "text": "we find a slight pain points at the moment so we like to do canary",
    "start": "2371900",
    "end": "2380030"
  },
  {
    "start": "2377000",
    "end": "2377000"
  },
  {
    "text": "deployments Jeff mention that and we're doing that by our weighted routing at the route 53 level if you think about",
    "start": "2380030",
    "end": "2386300"
  },
  {
    "text": "that that's kind of a load balancing in another AWS component so if we had a way",
    "start": "2386300",
    "end": "2391730"
  },
  {
    "text": "of doing some weighted load balancing inside application load balancers we could remove yet another moving part",
    "start": "2391730",
    "end": "2397970"
  },
  {
    "text": "simplify our deployments be great some",
    "start": "2397970",
    "end": "2404630"
  },
  {
    "text": "of our API is instead of using a path to distinguish between the services offered",
    "start": "2404630",
    "end": "2410150"
  },
  {
    "text": "use a different host name and that host information is is in the HTTP header",
    "start": "2410150",
    "end": "2417200"
  },
  {
    "text": "it's in in the host part of the HTTP header but right now application load balancers don't look at that so we have",
    "start": "2417200",
    "end": "2423619"
  },
  {
    "text": "to set up to a lbs for those different hosts and finally",
    "start": "2423619",
    "end": "2432450"
  },
  {
    "text": "one of our summer ap is actually using X 59 client certificates for",
    "start": "2432450",
    "end": "2438340"
  },
  {
    "text": "authentication where the applicator client of the API passes a server assert",
    "start": "2438340",
    "end": "2444730"
  },
  {
    "text": "all the way through to the back-end service the way I described right now is",
    "start": "2444730",
    "end": "2450670"
  },
  {
    "text": "that TLS is actually terminated at the ALB and then you start another TLS session by setting the target protocols",
    "start": "2450670",
    "end": "2457540"
  },
  {
    "text": "of HTTPS that means that that clients are difficulty isn't going to go all the way through to the back end target the",
    "start": "2457540",
    "end": "2464950"
  },
  {
    "text": "way we get ran at the moment is to drop back to the classic load balancers and drop back to layer 4 so the transport",
    "start": "2464950",
    "end": "2471580"
  },
  {
    "text": "level and just set everything is TCP then your packets flow all the way through the classic load balancer and",
    "start": "2471580",
    "end": "2477130"
  },
  {
    "text": "the certificate ends up out there at the instance that's offering the service so",
    "start": "2477130",
    "end": "2483550"
  },
  {
    "text": "that means we can't use application load balancers when we're using client certificates so some some functionality",
    "start": "2483550",
    "end": "2490930"
  },
  {
    "text": "around that will be great so in",
    "start": "2490930",
    "end": "2498430"
  },
  {
    "start": "2496000",
    "end": "2496000"
  },
  {
    "text": "conclusion we love load balancers then you might be getting that message by now um because of our API first developer",
    "start": "2498430",
    "end": "2506980"
  },
  {
    "text": "cat culture we require low balancing as a service and we continue to move to a",
    "start": "2506980",
    "end": "2513610"
  },
  {
    "text": "lbs for new services for all the reasons we discuss not least of which the great",
    "start": "2513610",
    "end": "2519790"
  },
  {
    "text": "container service integration and like all eight of their services we aren't",
    "start": "2519790",
    "end": "2524890"
  },
  {
    "text": "expected to get better as it matures say we've had a number of great announcements around a biet reinvent and",
    "start": "2524890",
    "end": "2531150"
  },
  {
    "text": "hopefully we will see more in the future thank you very much",
    "start": "2531150",
    "end": "2537060"
  }
]