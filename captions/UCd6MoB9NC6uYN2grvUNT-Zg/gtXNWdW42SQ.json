[
  {
    "start": "0",
    "end": "193000"
  },
  {
    "text": "again so I'm Jeremy I'm a database engineer at AWS working with Postgres",
    "start": "60",
    "end": "5160"
  },
  {
    "text": "engines now we just finished a presentation with Vinnie that he gave a",
    "start": "5160",
    "end": "10320"
  },
  {
    "text": "very good he actually went a lot deeper to that there was a lot of depth in that",
    "start": "10320",
    "end": "16198"
  },
  {
    "text": "I mean we ensure we have already introduced the general block structure we've already introduced the general",
    "start": "16199",
    "end": "22800"
  },
  {
    "text": "concept of MVCC this is a relational database relational databases you know",
    "start": "22800",
    "end": "29939"
  },
  {
    "text": "what does that mean that means a lot of things but a couple of things that that means is for one like transactions",
    "start": "29939",
    "end": "36230"
  },
  {
    "text": "transactions another thing is is consistency meaning I can define",
    "start": "36230",
    "end": "41450"
  },
  {
    "text": "constraint or I can I can sort of define invariants things that must be true",
    "start": "41450",
    "end": "46920"
  },
  {
    "text": "about my database for example I could say that I have these two tables and this record over in this table must",
    "start": "46920",
    "end": "53100"
  },
  {
    "text": "always have a corresponding record in that table we call that a foreign key I could say that in this table over here",
    "start": "53100",
    "end": "59969"
  },
  {
    "text": "this thing is unique meaning there's never two records that have identical values and the the database just takes",
    "start": "59969",
    "end": "67350"
  },
  {
    "text": "care of that for you then you don't have to write error handling code in your application now to deal with all kinds",
    "start": "67350",
    "end": "72990"
  },
  {
    "text": "of like data anomalies this is the strength of a relational database is",
    "start": "72990",
    "end": "79650"
  },
  {
    "text": "that it can make it a lot easier to write code right you can make a good",
    "start": "79650",
    "end": "85229"
  },
  {
    "text": "application with less effort because you don't necessarily need to do to handle a",
    "start": "85229",
    "end": "90900"
  },
  {
    "text": "lot of situations when you can rely on transactions you can rely on the fact that I can do a whole bunch of different",
    "start": "90900",
    "end": "96630"
  },
  {
    "text": "things and they either all go in as a single atomic operation or they fail and",
    "start": "96630",
    "end": "101840"
  },
  {
    "text": "you can rely on the fact that when you have a connection you're never going to",
    "start": "101840",
    "end": "107070"
  },
  {
    "text": "see partial data you're never gonna see an inconsistent state you will always see it consistent you know I'm not gonna",
    "start": "107070",
    "end": "112920"
  },
  {
    "text": "see like somebody else was modifying data and there were 50% through and now I might actually see data that's 50% of",
    "start": "112920",
    "end": "119729"
  },
  {
    "text": "the way updated but not a hundred percent so these are some of the strengths of of working in a relational",
    "start": "119729",
    "end": "124799"
  },
  {
    "text": "system and what we've been doing is kind of rolling back the covers a little bit and talking about how that done now what I'm going to do now is I",
    "start": "124799",
    "end": "134240"
  },
  {
    "text": "want to kind of go go real deep and show you in kind of some practical ways some",
    "start": "134240",
    "end": "140120"
  },
  {
    "text": "of I guess some of the implications of the Postgres design and the vehicle I'm",
    "start": "140120",
    "end": "146270"
  },
  {
    "text": "going to use to do that is this content now this is a deck that Grant McAllister put together he's a senior principal and",
    "start": "146270",
    "end": "151940"
  },
  {
    "text": "RDS it's his talk and if you ever have a chance to hear him give it and go go",
    "start": "151940",
    "end": "157820"
  },
  {
    "text": "listen to him but it's also I'm reusing it here because I think it's there's the content of these slides is a great",
    "start": "157820",
    "end": "164780"
  },
  {
    "text": "vehicle to go very deep on a couple of key concepts so this this presentation",
    "start": "164780",
    "end": "171709"
  },
  {
    "text": "is about something called hot hot stands for heap only tuples and what this is is",
    "start": "171709",
    "end": "176840"
  },
  {
    "text": "this is an optimization inside of Postgres that was introduced it actually turns out it's a very important",
    "start": "176840",
    "end": "183670"
  },
  {
    "text": "optimization and Postgres especially from the perspective of performance of",
    "start": "183670",
    "end": "189260"
  },
  {
    "text": "having an application that performs well so I'm going to kind of a we had a",
    "start": "189260",
    "end": "195260"
  },
  {
    "start": "193000",
    "end": "477000"
  },
  {
    "text": "description here but let's just kind of walk forward and I'll kind of explain what hot is and I think in the process",
    "start": "195260",
    "end": "201680"
  },
  {
    "text": "of explaining this I'm hoping that this really connects a lot of dots as far as",
    "start": "201680",
    "end": "207170"
  },
  {
    "text": "like how things are working so all of those concepts that we introduced I think that this will kind of help help",
    "start": "207170",
    "end": "212540"
  },
  {
    "text": "you to help you to really kind of see how it works kind of in practice and in motion so starting out this is how most",
    "start": "212540",
    "end": "223640"
  },
  {
    "text": "people think a database looks right you've got indexes and your indexes",
    "start": "223640",
    "end": "229100"
  },
  {
    "text": "point down to a tuple or a row inside of a block this is kind of how you think of",
    "start": "229100",
    "end": "234380"
  },
  {
    "text": "a database working and if you've come from other databases if you've worked in other databases you might that might kind of reinforce this idea but this is",
    "start": "234380",
    "end": "241549"
  },
  {
    "text": "great if you as we actually just just talked about Postgres is a little bit different this isn't actually how",
    "start": "241549",
    "end": "247130"
  },
  {
    "text": "Postgres looks because in Postgres we have what Vinnie introduced at the top",
    "start": "247130",
    "end": "253910"
  },
  {
    "text": "of our blocks we have what we call those line pointers remember so in Postgres",
    "start": "253910",
    "end": "258970"
  },
  {
    "text": "and an Aurora Postgres this is the same in both what what actually happens is your",
    "start": "258970",
    "end": "264220"
  },
  {
    "text": "indexes point down so we'll say we've got a a tuple down here or a row same",
    "start": "264220",
    "end": "270280"
  },
  {
    "text": "thing and we'll say we have line pointer number one all right we'll be all three of these indexes now are pointing down",
    "start": "270280",
    "end": "276760"
  },
  {
    "text": "at lime pointer number one at the top of the block and now that line pointer is going to point down to the tuple now",
    "start": "276760",
    "end": "284380"
  },
  {
    "text": "what happens if I want to update this record now if you're coming from a",
    "start": "284380",
    "end": "291520"
  },
  {
    "text": "background of looking to other databases what would happen is it would just update that record right it would just kind of edit this row and then somewhere",
    "start": "291520",
    "end": "298360"
  },
  {
    "text": "else it would make a record of that change so that it could go back and undo that if it had to kind of roll the",
    "start": "298360",
    "end": "304660"
  },
  {
    "text": "change back but that's not how it works in Postgres and and we just went over this as well and Postgres what we",
    "start": "304660",
    "end": "310570"
  },
  {
    "text": "actually do is if I'm just updating you know now this is a whole tuple this has",
    "start": "310570",
    "end": "315850"
  },
  {
    "text": "got maybe like ten attributes on it or fifty or a hundred but it's a single row with a bunch of columns and maybe I'm",
    "start": "315850",
    "end": "323410"
  },
  {
    "text": "only updating a single column you know maybe I'm just flipping a bit from zero",
    "start": "323410",
    "end": "329440"
  },
  {
    "text": "to one but what Postgres has to do just to flip that bit is actually copy the",
    "start": "329440",
    "end": "336670"
  },
  {
    "text": "entire tuple to a new version so really",
    "start": "336670",
    "end": "341680"
  },
  {
    "text": "tuples are kind of immutable in a sense here you can think of them that way they didn't Postgres once a tuple goes down",
    "start": "341680",
    "end": "347170"
  },
  {
    "text": "we don't go in and change those bits on the disk at least not now they're sort of once",
    "start": "347170",
    "end": "354550"
  },
  {
    "text": "you get into the internals there are ways and we'll get into that but just think about it from a high level that",
    "start": "354550",
    "end": "359860"
  },
  {
    "text": "like whenever you update a tuple what Postgres the way it works in Postgres and the way it's this database is",
    "start": "359860",
    "end": "365080"
  },
  {
    "text": "implemented and aurora posters is that we're going to make a new version of the tuple up here we're gonna allocate a",
    "start": "365080",
    "end": "370330"
  },
  {
    "text": "whole new line pointer number to all of the indexes are now going to point to that line pointer and that line pointer",
    "start": "370330",
    "end": "376360"
  },
  {
    "text": "is now going to point to here and I want to point something out real quick that so index a could be a unique index and",
    "start": "376360",
    "end": "384510"
  },
  {
    "text": "maybe the the column that we updated maybe was not that column but what's now",
    "start": "384510",
    "end": "390640"
  },
  {
    "text": "happened is that inside of this index we now have two entries pointing",
    "start": "390640",
    "end": "396220"
  },
  {
    "text": "to the same two entries for the same record right so just think about that",
    "start": "396220",
    "end": "403660"
  },
  {
    "text": "for a moment even in a unique index of Postgres you're gonna have multiple entries and then what will happen is",
    "start": "403660",
    "end": "409000"
  },
  {
    "text": "Postgres will sort it all out so when I go if I want to look up that one individual record then what's going to",
    "start": "409000",
    "end": "415900"
  },
  {
    "text": "happen is Postgres is going to realize oh there's there's multiple different versions of this and it will look at",
    "start": "415900",
    "end": "423460"
  },
  {
    "text": "look at those versions and Postgres will figure out which version is the one that",
    "start": "423460",
    "end": "428470"
  },
  {
    "text": "I need to see because maybe this is a report that started running two hours",
    "start": "428470",
    "end": "434080"
  },
  {
    "text": "ago and this report needs to see version one of the tuple because it needs we",
    "start": "434080",
    "end": "439390"
  },
  {
    "text": "need to maintain that consistent view of the database we don't want to see an uncommitted update on the other hand",
    "start": "439390",
    "end": "446880"
  },
  {
    "text": "maybe I just updated the data and my that same transaction is now doing a",
    "start": "446880",
    "end": "453010"
  },
  {
    "text": "select on the same row that he updated it might not even be committed yet but because I'm within the same transaction",
    "start": "453010",
    "end": "458470"
  },
  {
    "text": "I should see the results right I should see my own updates so in that case Postgres is smart enough",
    "start": "458470",
    "end": "464560"
  },
  {
    "text": "to know oh now I need to see this uncommitted row right here because it's my own row it's it's my own transaction",
    "start": "464560",
    "end": "473040"
  },
  {
    "text": "so then he also introduced page inspect this is this is a nice graphical",
    "start": "473040",
    "end": "479290"
  },
  {
    "start": "477000",
    "end": "679000"
  },
  {
    "text": "representation but one of the really cool things about Postgres at AWS is that even as a customer we have this",
    "start": "479290",
    "end": "486760"
  },
  {
    "text": "really cool thing called page inspect and even as a customer any customer in the whole world who has an RDS Postgres",
    "start": "486760",
    "end": "493870"
  },
  {
    "text": "instance you can actually see the bits inside of your blocks and you can",
    "start": "493870",
    "end": "499660"
  },
  {
    "text": "observe watch this happen yourself and there's two different page suspect has sort of two different useful things that",
    "start": "499660",
    "end": "505990"
  },
  {
    "text": "can do this get raw page function you can call directly and you can literally just pull a a binary copy of your 8k",
    "start": "505990",
    "end": "514750"
  },
  {
    "text": "block right down and look at that you could look at that in a hex editor of your tables you can actually that's",
    "start": "514750",
    "end": "519820"
  },
  {
    "text": "doing and then secondly there's a sequel interface when we wrap that in a function it looks like this so in sequel",
    "start": "519820",
    "end": "525310"
  },
  {
    "text": "I can actually decode all those little headers that that we talked about in the block structure all",
    "start": "525310",
    "end": "531730"
  },
  {
    "text": "the tuple headers so what we're looking at here we're using page inspect to look at the block header first of all and we",
    "start": "531730",
    "end": "537820"
  },
  {
    "text": "see a checksum for the block we see some other things the size of the page and",
    "start": "537820",
    "end": "543510"
  },
  {
    "text": "then here we're now looking at a record so this is now looking at the tuple and",
    "start": "543510",
    "end": "548890"
  },
  {
    "text": "we see some of the things that some of the columns if you were paying attention earlier the attributes of the tuple we",
    "start": "548890",
    "end": "554710"
  },
  {
    "text": "talked about like the x-men and the xmax the lengths and things like that",
    "start": "554710",
    "end": "559920"
  },
  {
    "text": "and then of course here's looking at the index now let's do the update just - I'm",
    "start": "559920",
    "end": "568089"
  },
  {
    "text": "gonna real quickly show and then the index you also can see the this thing",
    "start": "568089",
    "end": "573640"
  },
  {
    "text": "called the seated is is what identifies the line pointer and so when we when we",
    "start": "573640",
    "end": "580990"
  },
  {
    "text": "go back to here we talked about the index point of the line pointer the line",
    "start": "580990",
    "end": "587110"
  },
  {
    "text": "point are going to the tuple now coming back to page inspect we see we can actually observe the same thing in our",
    "start": "587110",
    "end": "593650"
  },
  {
    "text": "very own database we see that there's the index entry which says block zero",
    "start": "593650",
    "end": "598839"
  },
  {
    "text": "line pointer number one and when we looked at our our records indeed we saw",
    "start": "598839",
    "end": "605620"
  },
  {
    "text": "line pointer number one and here's the tuple that that line pointer is pointing to so what happens when we do the update",
    "start": "605620",
    "end": "612730"
  },
  {
    "text": "let's update our table will update and set we'll just set this column last",
    "start": "612730",
    "end": "618790"
  },
  {
    "text": "updated notice the first thing right off the bat is that you can see in the page",
    "start": "618790",
    "end": "625180"
  },
  {
    "text": "header this tells the lower and the upper parts of where the free space is and that's",
    "start": "625180",
    "end": "631810"
  },
  {
    "text": "changed just take my word for it from the last slide more importantly we now see our two tuples just like in the",
    "start": "631810",
    "end": "637660"
  },
  {
    "text": "graphical picture that I had a moment ago and we see the two records in the index and we can see that this index",
    "start": "637660",
    "end": "644170"
  },
  {
    "text": "entry our first index entry block zero tuple one is pointing to the first line pointer and we see that we have a second",
    "start": "644170",
    "end": "650800"
  },
  {
    "text": "entry in the index remember there's only one row in the table if you select count",
    "start": "650800",
    "end": "657220"
  },
  {
    "text": "star you're going to get one row but there are two entries in the index - two",
    "start": "657220",
    "end": "663400"
  },
  {
    "text": "pulls in the block or in on the page so",
    "start": "663400",
    "end": "668740"
  },
  {
    "text": "this is sort of starting I hope to to give you kind of a visual on exactly",
    "start": "668740",
    "end": "674740"
  },
  {
    "text": "what Postgres is doing under the covers now I'm going to talk a little about",
    "start": "674740",
    "end": "680470"
  },
  {
    "start": "679000",
    "end": "1025000"
  },
  {
    "text": "what a hot update is but first I want to just talk about how we get a hot update",
    "start": "680470",
    "end": "685529"
  },
  {
    "text": "so because take my word for it it's an optimization it's something good at",
    "start": "685529",
    "end": "692020"
  },
  {
    "text": "something you want right but it does your workload matters a little bit so",
    "start": "692020",
    "end": "698230"
  },
  {
    "text": "let's say that we have our two pool that we're about to update but in the meantime you were inserting a whole",
    "start": "698230",
    "end": "704080"
  },
  {
    "text": "bunch of data into this table okay so in the meantime we've gone and we've filled up our block now we go to update our",
    "start": "704080",
    "end": "711010"
  },
  {
    "text": "record but now what do we do the blocks full right well what we have to do now",
    "start": "711010",
    "end": "717250"
  },
  {
    "text": "is we still are able to do that we can just put the the V to the updated versus the tuple at a different block however",
    "start": "717250",
    "end": "724800"
  },
  {
    "text": "unfortunately this means we can't do a hot update too so that's sad rule number",
    "start": "724800",
    "end": "730870"
  },
  {
    "text": "one for hot updates is that it has to be able to put the updated version of the two pond the same block okay so let's",
    "start": "730870",
    "end": "737740"
  },
  {
    "text": "say that we we we make sure to reserve some space in the block and we don't run out but we're gonna update a column we",
    "start": "737740",
    "end": "746470"
  },
  {
    "text": "happen to update the column that index a is indexing okay so now we have to add",
    "start": "746470",
    "end": "751630"
  },
  {
    "text": "we're changing the value and we're adding a new entry in the index with a different value well that actually",
    "start": "751630",
    "end": "757990"
  },
  {
    "text": "disqualifies you from doing a hot update as well in Postgres so the two rules for",
    "start": "757990",
    "end": "763089"
  },
  {
    "text": "getting hot updates are that you need to be able to put if if you can put the",
    "start": "763089",
    "end": "769900"
  },
  {
    "text": "tuple in the same block and if you're not updating any columns which are",
    "start": "769900",
    "end": "775839"
  },
  {
    "text": "indexed then you can get a hot update so what's a hot update a heap only tuple",
    "start": "775839",
    "end": "782860"
  },
  {
    "text": "update just looks like this just like before I put my IV two of the two pool",
    "start": "782860",
    "end": "789040"
  },
  {
    "text": "in the same block all right and just like before I allocate a new line",
    "start": "789040",
    "end": "794620"
  },
  {
    "text": "pointer line pointer number two and that line pointer points to my tuple this structure makes a complete tuple",
    "start": "794620",
    "end": "802560"
  },
  {
    "text": "but now is where I do something different remember last time what we did is we",
    "start": "802560",
    "end": "808510"
  },
  {
    "text": "wouldn't we added the new index entries and they appointed a lion pointer too well what the Postgres community came up",
    "start": "808510",
    "end": "814510"
  },
  {
    "text": "with as a really cool optimization was well instead of having to update all the",
    "start": "814510",
    "end": "820270"
  },
  {
    "text": "indexes how about if we just chained the rows so what we can actually do is we",
    "start": "820270",
    "end": "825459"
  },
  {
    "text": "can make put an entry down inside of this tuple that links back to line",
    "start": "825459",
    "end": "831339"
  },
  {
    "text": "pointer number two which now points at the second tuple all right and let's say",
    "start": "831339",
    "end": "837520"
  },
  {
    "text": "we update it again now we've updated the same row so again we're still one record in the table but we've we've updated it",
    "start": "837520",
    "end": "844029"
  },
  {
    "text": "twice so now we have three tuples in the block and we can do the same thing again line point of three and then tuple two",
    "start": "844029",
    "end": "851560"
  },
  {
    "text": "points to line pointer three all right now what happens if we need to if we run",
    "start": "851560",
    "end": "858670"
  },
  {
    "text": "a query that we want to look at this row well what's going to happen is so we're using our query let's say goes through",
    "start": "858670",
    "end": "865839"
  },
  {
    "text": "index B all right so we want to look up the row and I'm saying where City equals Dublin so we go to the city index which",
    "start": "865839",
    "end": "874029"
  },
  {
    "text": "is I guess I should have used C for that but it's B and we're gonna find the",
    "start": "874029",
    "end": "879220"
  },
  {
    "text": "entry for Dublin which is the yellow one right there and what we're gonna do is we're going to follow that reference and that takes",
    "start": "879220",
    "end": "884649"
  },
  {
    "text": "us to line pointer one and now what Postgres then is able to do is just",
    "start": "884649",
    "end": "890200"
  },
  {
    "text": "start following it can just follow the chain so it follows from v1 to line pointer too and it just keeps reading",
    "start": "890200",
    "end": "895329"
  },
  {
    "text": "the following the chain and reading the tuples inside of the same block until it finds the record that it needs and and",
    "start": "895329",
    "end": "901720"
  },
  {
    "text": "it's able to figure out using the same rules the same visibility rules that it did before which one of these should",
    "start": "901720",
    "end": "908399"
  },
  {
    "text": "this particular session see which version of the row is the correct version for me to get you know maintain",
    "start": "908399",
    "end": "915700"
  },
  {
    "text": "my consistent view of the database all of the rules that we need now we can",
    "start": "915700",
    "end": "922660"
  },
  {
    "text": "also see this with page inspect but I'm going to given the time I want to kind",
    "start": "922660",
    "end": "929350"
  },
  {
    "text": "of move quickly I'm going gonna kind of skip over some of this but but you can you know just real quickly",
    "start": "929350",
    "end": "935530"
  },
  {
    "text": "you'll see we have a single entry in the index that entry points there and that guy puts down at the bottom",
    "start": "935530",
    "end": "941680"
  },
  {
    "text": "I'm not going to kind of dig super deep here's with the second update again single entry in the index we have a",
    "start": "941680",
    "end": "948820"
  },
  {
    "text": "little bit of extra information here in something called the info mask field which is actually it's it's it's a but",
    "start": "948820",
    "end": "956200"
  },
  {
    "text": "it's a bunch of bits and the bits can be set but in this view it's actually telling you the names of the bits which",
    "start": "956200",
    "end": "962530"
  },
  {
    "text": "is really convenient so you don't have to look at a hexadecimal number and try to figure out which bits are set and what they mean and the same thing the",
    "start": "962530",
    "end": "970090"
  },
  {
    "text": "index points there and then the real points in the real points and this is like you could literally create a table",
    "start": "970090",
    "end": "975180"
  },
  {
    "text": "insert one record update the record twice run this sequel and you would see this on your own database you can",
    "start": "975180",
    "end": "981370"
  },
  {
    "text": "actually look at the block level and see it just like this it's fantastic it's one of the things I love about Postgres",
    "start": "981370",
    "end": "987220"
  },
  {
    "text": "and RDS is that we live we give this level of visibility to you about your",
    "start": "987220",
    "end": "992740"
  },
  {
    "text": "own databases now we mentioned a little bit about the with hot updates there's",
    "start": "992740",
    "end": "1001650"
  },
  {
    "text": "kind of an obvious benefit that you're not having to have this extra index entries right but that's not the only benefit there's",
    "start": "1001650",
    "end": "1008130"
  },
  {
    "text": "actually a lot there are a lot of reasons these hot updates are important and the more we kind of walk through",
    "start": "1008130",
    "end": "1014640"
  },
  {
    "text": "these I think this is great this will reinforce some of the the concepts about how the the internal structures work and",
    "start": "1014640",
    "end": "1021840"
  },
  {
    "text": "also at the same time you're learning about hot updates and why they're important so a second case and the second reason hot updates are important",
    "start": "1021840",
    "end": "1028319"
  },
  {
    "start": "1025000",
    "end": "1295000"
  },
  {
    "text": "is for pruning or cleaning up now we talked earlier about vacuum and how vacuum is really important so the basic",
    "start": "1028320",
    "end": "1036270"
  },
  {
    "text": "concept here is that we at a certain point in time we know that like our",
    "start": "1036270",
    "end": "1041550"
  },
  {
    "text": "oldest record nobody is ever going to look at that anymore because that thing",
    "start": "1041550",
    "end": "1048810"
  },
  {
    "text": "you know at a certain at some point in time all the transactions who might see this old version are gone it's it's this",
    "start": "1048810",
    "end": "1057060"
  },
  {
    "text": "record has been deleted they you know it's it's obsolete at that point in time",
    "start": "1057060",
    "end": "1062130"
  },
  {
    "text": "we can clean it it's safe to clean up right so that's what vacuum normally does",
    "start": "1062130",
    "end": "1069260"
  },
  {
    "text": "vacuum is the process of kind of cleaning up it's it's kind of the normal process of cleaning up but with hot",
    "start": "1069260",
    "end": "1075530"
  },
  {
    "text": "updates we can actually do something a little bit more efficient we don't even need to wait for vacuum to happen we can",
    "start": "1075530",
    "end": "1080990"
  },
  {
    "text": "do start doing some on-the-fly cleanup that we call pruning and this is pretty cool so we've determined that you know",
    "start": "1080990",
    "end": "1088340"
  },
  {
    "text": "tuple this tuple here is obsolete meaning nobody is ever going to need to see that tuple again we know the oldest",
    "start": "1088340",
    "end": "1095299"
  },
  {
    "text": "transaction that's currently alive in our system we know he's newer than version one so let's just delete that",
    "start": "1095299",
    "end": "1100730"
  },
  {
    "text": "right do a little bit of pruning delete that record out but now we might have a",
    "start": "1100730",
    "end": "1107720"
  },
  {
    "text": "problem right because now our indexes are pointing at line pointer one which",
    "start": "1107720",
    "end": "1114020"
  },
  {
    "text": "we've lost our link but that's actually a pretty simple thing to do and the",
    "start": "1114020",
    "end": "1119510"
  },
  {
    "text": "simple fix for that is that not only can the tuples so I mentioned that a tuple",
    "start": "1119510",
    "end": "1125630"
  },
  {
    "text": "can be chained and point back to a line pointer well in order to support this ability to do on-the-fly pruning the",
    "start": "1125630",
    "end": "1133160"
  },
  {
    "text": "next really cool capability that Postgres has is that these line pointers themselves can also chain so what we can",
    "start": "1133160",
    "end": "1140660"
  },
  {
    "text": "do is we can just when we remove the row we just make this line pointer point directly to line pointer number two this",
    "start": "1140660",
    "end": "1147980"
  },
  {
    "text": "enables us to remove the old tuple without having to go you know without",
    "start": "1147980",
    "end": "1153200"
  },
  {
    "text": "changing anything outside of the block we can just start to do these on-the-fly cleanups of blocks this is this is not",
    "start": "1153200",
    "end": "1159620"
  },
  {
    "text": "vacuum doing this this is a pruning that just happens in the system before vacuum ever gets around to running and we can",
    "start": "1159620",
    "end": "1166549"
  },
  {
    "text": "just do this on the fly this is one of it this is like an additional reason hot updates are so important let's say that",
    "start": "1166549",
    "end": "1173450"
  },
  {
    "text": "now the clock keeps moving forward and now we've determined that this tuple V 2",
    "start": "1173450",
    "end": "1179150"
  },
  {
    "text": "is now can be cleaned up it can be pruned out so we remove that guy we don't even have to link number two we",
    "start": "1179150",
    "end": "1185330"
  },
  {
    "text": "can just update we can update the reference in line pointer number one and",
    "start": "1185330",
    "end": "1191030"
  },
  {
    "text": "just make that guy point two three and now we've actually freed up a slot well freed up we've yeah potentially",
    "start": "1191030",
    "end": "1197570"
  },
  {
    "text": "freed up one of the 9 pointers we can also see this we pay them again with page inspect so you",
    "start": "1197570",
    "end": "1203930"
  },
  {
    "text": "could reproduce this yourself and inspect what it would look like and what you're gonna see is you look at these line pointer flags you'll see flags",
    "start": "1203930",
    "end": "1212000"
  },
  {
    "text": "saying normal and then the info mask you'll see the hot updated one right and",
    "start": "1212000",
    "end": "1217310"
  },
  {
    "text": "what's going to happen is after that now in this example here wave does we've we have a single record and we've updated",
    "start": "1217310",
    "end": "1222860"
  },
  {
    "text": "at about thirty to thirty thirty five times so you've got all these like these thirty four different versions of this",
    "start": "1222860",
    "end": "1229820"
  },
  {
    "text": "tuple that are sitting in this table with no vacuum with only just the",
    "start": "1229820",
    "end": "1235700"
  },
  {
    "text": "on-demand pruning that happens what happens after the Perrine runs is it",
    "start": "1235700",
    "end": "1241220"
  },
  {
    "text": "looks like this now you see the flag say line pointer unused meaning that all",
    "start": "1241220",
    "end": "1246260"
  },
  {
    "text": "these entries have been freed up and then what we see is that there were there was this last entry which is still",
    "start": "1246260",
    "end": "1252710"
  },
  {
    "text": "here and we have two so the top one points down to here and then we have this guy pointing there and he's put in",
    "start": "1252710",
    "end": "1259520"
  },
  {
    "text": "so there's three versions of the row that are currently left in this block this is the first one in the chain the",
    "start": "1259520",
    "end": "1266600"
  },
  {
    "text": "second one in the chain and the third one in the chain the second and third are at the top of the slide so that's a",
    "start": "1266600",
    "end": "1274610"
  },
  {
    "text": "little bit about the line pointers but stepping back for a minute one of the things that I said you need to have for",
    "start": "1274610",
    "end": "1280220"
  },
  {
    "text": "hot updates to work is you need to have space in your blocks and I remember I showed a picture a little bit earlier but how if you fill up your block all",
    "start": "1280220",
    "end": "1287150"
  },
  {
    "text": "the way then you can't get this great optimization so what determines how much",
    "start": "1287150",
    "end": "1293600"
  },
  {
    "text": "space we get into the block well that's actually something we can configure and",
    "start": "1293600",
    "end": "1298960"
  },
  {
    "start": "1295000",
    "end": "1513000"
  },
  {
    "text": "the default setting as it turns out is it's a percentage and the default setting in Postgres is 100% meaning what",
    "start": "1298960",
    "end": "1307490"
  },
  {
    "text": "that this is called the fill factor and the fill factor is something you can configure at an object level and you can",
    "start": "1307490",
    "end": "1312980"
  },
  {
    "text": "say for this object I want you to when you're inserting new records put them in the same block until it is a hundred",
    "start": "1312980",
    "end": "1318980"
  },
  {
    "text": "percent full which is the default value and so let's take a look at this so we",
    "start": "1318980",
    "end": "1325010"
  },
  {
    "text": "set up a test to try to illustrate this and in our test what we did is we had these inserts running on a continual",
    "start": "1325010",
    "end": "1331040"
  },
  {
    "text": "basis and while those inserts were running we took a single record and we updated that record 100",
    "start": "1331040",
    "end": "1336830"
  },
  {
    "text": "times okay well what happens is the inserts go and they fill the block up",
    "start": "1336830",
    "end": "1343010"
  },
  {
    "text": "and then when we update that tuple it's going to go to another block now in the meantime these inserts keep running and",
    "start": "1343010",
    "end": "1349640"
  },
  {
    "text": "they fill up the second block so the next time we update the record we now have this tuple going over in the third",
    "start": "1349640",
    "end": "1356060"
  },
  {
    "text": "block now what this means is that when I want to do a single key lookup I go",
    "start": "1356060",
    "end": "1363200"
  },
  {
    "text": "through my index I traverse my b-tree right to get down to my leaf node my leaf node points me to the first block",
    "start": "1363200",
    "end": "1371140"
  },
  {
    "text": "well actually I'm sorry going back I go to my index I go to my B tree I look in my beater of my index and I actually",
    "start": "1371140",
    "end": "1377180"
  },
  {
    "text": "have three entries for the same record I'm doing a single key lookup maybe this",
    "start": "1377180",
    "end": "1382610"
  },
  {
    "text": "is on the primary key of the table meaning guaranteed unique but there's still three entries in my index pointing",
    "start": "1382610",
    "end": "1388610"
  },
  {
    "text": "to three different blocks because there's three versions of that row now I'm guaranteed only one of these is",
    "start": "1388610",
    "end": "1394850"
  },
  {
    "text": "going to come back in my query but I just don't yet know which one it is until I look at all three because the",
    "start": "1394850",
    "end": "1400430"
  },
  {
    "text": "visibility information is actually in the tuple itself not in the index which",
    "start": "1400430",
    "end": "1405980"
  },
  {
    "text": "is also by the way another important side note that in Postgres indexes don't",
    "start": "1405980",
    "end": "1411350"
  },
  {
    "text": "contain any visibility information about the tuples so you will almost always",
    "start": "1411350",
    "end": "1418660"
  },
  {
    "text": "there is one exception to this but but much of the time you well you can never",
    "start": "1418660",
    "end": "1424910"
  },
  {
    "text": "look in the index and know if a tuple is visible you generally have to go look at",
    "start": "1424910",
    "end": "1430280"
  },
  {
    "text": "the tuple itself there is one other mechanism or Postgres can use some hints and sometimes avoid checking the tuple",
    "start": "1430280",
    "end": "1436760"
  },
  {
    "text": "because it can already know but generally it has to look at the tuple",
    "start": "1436760",
    "end": "1442960"
  },
  {
    "text": "all right so let's say we set that fill factor to 90 instead of a hundred because I want I want to be able to keep",
    "start": "1442960",
    "end": "1449060"
  },
  {
    "text": "so my updates well with the fill factor of ninety now when it gets to ninety percent",
    "start": "1449060",
    "end": "1454900"
  },
  {
    "text": "Postgres leaves 10 percent of the block empty and it starts moving the answers",
    "start": "1454900",
    "end": "1460790"
  },
  {
    "text": "to the next block so what this means is is what I update my record this time it's able to put the version 2 of the",
    "start": "1460790",
    "end": "1467870"
  },
  {
    "text": "tuple in the same block my workload keeps running this guy gets to 90% the",
    "start": "1467870",
    "end": "1475550"
  },
  {
    "text": "next time I do an update though I'm still back to moving to a second block so we're still in this situation where",
    "start": "1475550",
    "end": "1480860"
  },
  {
    "text": "we go into the index and we still have multiple blocks that we need to visit multiple versions of the tuple so well",
    "start": "1480860",
    "end": "1486770"
  },
  {
    "text": "I'm not happy with that you know what let's just set the fill factor to 10 right I'm gonna make sure that I always",
    "start": "1486770",
    "end": "1493010"
  },
  {
    "text": "get my updates in the same block well this will work all of my updates are you",
    "start": "1493010",
    "end": "1500060"
  },
  {
    "text": "going the same block but the side effect of this is that suddenly my table is",
    "start": "1500060",
    "end": "1507500"
  },
  {
    "text": "going to need a lot more blocks for the same amount of data exactly right so now",
    "start": "1507500",
    "end": "1513110"
  },
  {
    "start": "1513000",
    "end": "1751000"
  },
  {
    "text": "the table gets a lot bigger so what does that look like in practice a real simple way to look at that is",
    "start": "1513110",
    "end": "1519170"
  },
  {
    "text": "that we set up a test where we just had inserts running at about 2000 inserts",
    "start": "1519170",
    "end": "1524690"
  },
  {
    "text": "per second and then we updated the row a hundred times and then we just measure the number of blocks that we had to",
    "start": "1524690",
    "end": "1530030"
  },
  {
    "text": "access to fetch a single record with a key going through an index and then we looked at how long to do a table skin",
    "start": "1530030",
    "end": "1536240"
  },
  {
    "text": "you might need to do a table scan if you're looking at a column that doesn't have an index or if you're doing an",
    "start": "1536240",
    "end": "1542630"
  },
  {
    "text": "operation that just needs to look at all the rows like if you're aggregating data for example to get like a sum or a",
    "start": "1542630",
    "end": "1548570"
  },
  {
    "text": "running total something like that so there's a lot of reasons you might need to do at a what you might want to do a table scan well with a fill factor of a",
    "start": "1548570",
    "end": "1556130"
  },
  {
    "text": "hundred percent not surprisingly as we saw to get that one row we have to look",
    "start": "1556130",
    "end": "1563120"
  },
  {
    "text": "at 101 blocks in the table all right so we have every single version of the rows",
    "start": "1563120",
    "end": "1568520"
  },
  {
    "text": "going in a different block but the table scan ran with about five and a half thousand blocks we could fetch the",
    "start": "1568520",
    "end": "1574220"
  },
  {
    "text": "entire table when we set the fill factor 90 made a dramatic difference it dropped",
    "start": "1574220",
    "end": "1579980"
  },
  {
    "text": "us from a hundred blocks down to eighteen blocks that we had to access for this test how much bigger does our",
    "start": "1579980",
    "end": "1585380"
  },
  {
    "text": "table get only up to 6k it's not terrible how about 50 percent set the fill factor",
    "start": "1585380",
    "end": "1591440"
  },
  {
    "text": "to 55 blocks for that single key fetch the tables now about double of what it",
    "start": "1591440",
    "end": "1597530"
  },
  {
    "text": "was originally and looking at our 10% fill factor sure",
    "start": "1597530",
    "end": "1603290"
  },
  {
    "text": "only three blocks we had to access to fetch that key but now we're looking at a table size that's more than ten times",
    "start": "1603290",
    "end": "1610010"
  },
  {
    "text": "the original size of the table now a term that you'll hear a lot when when",
    "start": "1610010",
    "end": "1617330"
  },
  {
    "text": "you start talking about Postgres is you'll hear people talk about something called bloat and I think a great point",
    "start": "1617330",
    "end": "1626060"
  },
  {
    "text": "in this slide is that bloat can look like a lot of different things usually when people talk about bloat they're",
    "start": "1626060",
    "end": "1632480"
  },
  {
    "text": "thinking about like vacuum is not doing its job and it's not removing rows fast",
    "start": "1632480",
    "end": "1637520"
  },
  {
    "text": "enough but or but but this is an example where it's it's really bloat but it's",
    "start": "1637520",
    "end": "1643730"
  },
  {
    "text": "just by configuration like you've just literally configured your table with a 10% fill factor and you've made your",
    "start": "1643730",
    "end": "1650150"
  },
  {
    "text": "table ginormous and very inefficient from a perspective of space users now there might be some situations where you",
    "start": "1650150",
    "end": "1657260"
  },
  {
    "text": "want this by design but it's just kind of a good thing to point out there's one other really important thing in this",
    "start": "1657260",
    "end": "1663290"
  },
  {
    "text": "slide which is that in order to generate this test I didn't highlight this at the beginning",
    "start": "1663290",
    "end": "1669950"
  },
  {
    "text": "but if you look at the top it says we had a long-running transaction now why did we have a long-running transaction",
    "start": "1669950",
    "end": "1675850"
  },
  {
    "text": "the reason we need a long-running transaction is because you remember I",
    "start": "1675850",
    "end": "1681650"
  },
  {
    "text": "talked earlier about how Postgres can do that on the fly cleanup well if without",
    "start": "1681650",
    "end": "1688460"
  },
  {
    "text": "what the long-running transaction does is the long-running transaction guarantees that somebody needs to see",
    "start": "1688460",
    "end": "1694340"
  },
  {
    "text": "the old version so it's blocking that cleanup process and keeping all these row versions around so what happens if",
    "start": "1694340",
    "end": "1699950"
  },
  {
    "text": "we don't have a long-running transaction without the long-running transaction our",
    "start": "1699950",
    "end": "1707660"
  },
  {
    "text": "single our single key so our table sizes are going to be the same that's not going to change but what happens to our",
    "start": "1707660",
    "end": "1714080"
  },
  {
    "text": "single key fetch time so with a fill factor of 100 instead of having to visit 101 blocks to the on the fly cleanup was",
    "start": "1714080",
    "end": "1726230"
  },
  {
    "text": "literally was able to clean up everything except for two blocks and then with a",
    "start": "1726230",
    "end": "1732290"
  },
  {
    "text": "factor with all of the remaining fill factors the on-the-fly cleanup was able",
    "start": "1732290",
    "end": "1737360"
  },
  {
    "text": "to clean it up all the way down to one block so the on-the-fly cleanup makes a really big difference another thing is",
    "start": "1737360",
    "end": "1742720"
  },
  {
    "text": "you need to pay attention to long-running transactions and Postgres your longest-running transaction is is a",
    "start": "1742720",
    "end": "1750140"
  },
  {
    "text": "really important thing to keep track of so another way to illustrate this is we set up another test where we just have",
    "start": "1750140",
    "end": "1755690"
  },
  {
    "text": "that that update statement running okay and we let that update save and run for",
    "start": "1755690",
    "end": "1761540"
  },
  {
    "text": "about 60 minutes and we let a week wait and we do that long transaction just kick off the transaction and let it hang",
    "start": "1761540",
    "end": "1767990"
  },
  {
    "text": "open so we block the on-the-fly cleanup and then we just watch the size of the table plus one index for 60 minutes and",
    "start": "1767990",
    "end": "1775400"
  },
  {
    "text": "we graph it out and just doing a steady stream of updates for 60 minutes this is",
    "start": "1775400",
    "end": "1781310"
  },
  {
    "text": "what the table size does while you have the longer his action this is what you would expect right you're every time you",
    "start": "1781310",
    "end": "1786410"
  },
  {
    "text": "do an update you're adding a new version of the row and we can't do any cleanup because somebody's running a report and",
    "start": "1786410",
    "end": "1792770"
  },
  {
    "text": "they need that really old version so as long as that reports running we need to hold off on the cleanup so what that's",
    "start": "1792770",
    "end": "1798710"
  },
  {
    "text": "going to mean is a table is going to grow for 60 minutes let that sink in - this is again why it's important the",
    "start": "1798710",
    "end": "1805970"
  },
  {
    "text": "more you understand about kind of the Postgres architectural you'll start to pick up on ways you can design in ways",
    "start": "1805970",
    "end": "1811910"
  },
  {
    "text": "you can manage your systems to really get the most out of it so it grows just",
    "start": "1811910",
    "end": "1818090"
  },
  {
    "text": "kind of like what you'd expect now what happens if we're getting we're actually getting through this about hot updates what if we're getting hot updates",
    "start": "1818090",
    "end": "1823730"
  },
  {
    "text": "instead of regular updates but we still have that long transaction well the line looks like this the difference here is",
    "start": "1823730",
    "end": "1829280"
  },
  {
    "text": "mainly in the index size because with the hot updates we don't need to have extra entries in the index but we still",
    "start": "1829280",
    "end": "1835760"
  },
  {
    "text": "have to have all those versions in the table so the table is still growing at the same rate can't do any cleanup but",
    "start": "1835760",
    "end": "1841250"
  },
  {
    "text": "what if instead of having that one really long transaction we just have one minute transactions well we're running",
    "start": "1841250",
    "end": "1849230"
  },
  {
    "text": "the test for 60 minutes we're just holding transactions for a minute let's see what happens there well that",
    "start": "1849230",
    "end": "1857000"
  },
  {
    "text": "on-the-fly cleanup is able to make a little bit of an impact but not a huge impact so you see that with that one",
    "start": "1857000",
    "end": "1864140"
  },
  {
    "text": "minute transaction regular it's actually it's a little bit lower of a curve but at the table still growing",
    "start": "1864140",
    "end": "1870200"
  },
  {
    "text": "quite a bit we're gonna need a vacuum process to come through and clean up a lot of that space later and the hot",
    "start": "1870200",
    "end": "1876230"
  },
  {
    "text": "updates there's also a slight improvement but not huge but what happens if we don't have any open",
    "start": "1876230",
    "end": "1882080"
  },
  {
    "text": "transaction at all with no open transaction at all the same test this is",
    "start": "1882080",
    "end": "1889430"
  },
  {
    "text": "what we get that's that's our table growth curve with no open transactions",
    "start": "1889430",
    "end": "1895820"
  },
  {
    "text": "and what if we're getting hot updates with hot updates the line looks like that with hot updates happening and no",
    "start": "1895820",
    "end": "1903440"
  },
  {
    "text": "open transactions the table growth is completely contained with a steady stream of updates if we just zoom in on",
    "start": "1903440",
    "end": "1909170"
  },
  {
    "text": "the index itself this was the index growth with the long transaction now this was like I said a written before",
    "start": "1909170",
    "end": "1915860"
  },
  {
    "text": "with the hot updates the index doesn't grow very much so you see even with the long transaction hot updates kind of",
    "start": "1915860",
    "end": "1922820"
  },
  {
    "text": "contains our index growth pretty well with the 1-minute transactions here's how much better the index growth is but",
    "start": "1922820",
    "end": "1930910"
  },
  {
    "text": "literally all the rest of our test cases that we ran the index doesn't grow at all so when you get rid of that",
    "start": "1930910",
    "end": "1936770"
  },
  {
    "text": "long-running transaction when you are using hot updates again it really helps",
    "start": "1936770",
    "end": "1942410"
  },
  {
    "text": "contain this is this is another form of what we call bloat but it helps contain this sort of like growth of your objects",
    "start": "1942410",
    "end": "1948230"
  },
  {
    "text": "and growth of your data so I am going to",
    "start": "1948230",
    "end": "1955040"
  },
  {
    "text": "skip over a couple of slides here because I want to make sure to get to kind of one more important section at",
    "start": "1955040",
    "end": "1960950"
  },
  {
    "text": "the end before we run out of time so",
    "start": "1960950",
    "end": "1965919"
  },
  {
    "text": "jumping forward",
    "start": "1968830",
    "end": "1972730"
  },
  {
    "text": "something that people wonder a lot of times is the impact of indexes what kind",
    "start": "1980480",
    "end": "1985860"
  },
  {
    "text": "of an impact indexes having looking and thinking about indexes and what we're going to do what I'm going to do real",
    "start": "1985860",
    "end": "1991260"
  },
  {
    "text": "quickly to kind of wrap this up is I'm going to take and look at the I'm going",
    "start": "1991260",
    "end": "1999030"
  },
  {
    "text": "to look at sort of a simple some simple benchmarks where I add more and more indexes to a table and see what the",
    "start": "1999030",
    "end": "2005480"
  },
  {
    "text": "impact is and I'm going to look at that in combination with hott updates but before I get into that and in order to",
    "start": "2005480",
    "end": "2012080"
  },
  {
    "text": "kind of understand where we're gonna go next I need to sort of dive into one more kind of important concept and this",
    "start": "2012080",
    "end": "2017390"
  },
  {
    "start": "2017000",
    "end": "2523000"
  },
  {
    "text": "is called full page rights so Postgres has a thing called full page rights and",
    "start": "2017390",
    "end": "2024200"
  },
  {
    "text": "this is great because now now we're going to kind of back up a little bit and back to our sort of foundational",
    "start": "2024200",
    "end": "2030050"
  },
  {
    "text": "concept we've talked a lot about block structures now I'm going to step back and talk about the right ahead log now",
    "start": "2030050",
    "end": "2037040"
  },
  {
    "text": "no Vinnie introduced City he made the comparison to a file system Journal which is a good comparison and the basic",
    "start": "2037040",
    "end": "2042680"
  },
  {
    "text": "idea it's also or a redo log is it's something that's called in other databases the basic idea is that whenever you change something first you",
    "start": "2042680",
    "end": "2050000"
  },
  {
    "text": "put it in the log and then you make the change is kind of the basic ideas that's the idea of right ahead and also well so",
    "start": "2050000",
    "end": "2058700"
  },
  {
    "text": "we'll start there secondly you can make changes in memory well here let's just walk through what it looks like so let's",
    "start": "2058700",
    "end": "2064908"
  },
  {
    "text": "say we update a record when we update a record the first thing we do is we up well we have to add a record we update a",
    "start": "2064909",
    "end": "2071240"
  },
  {
    "text": "block in memory but what do we have to do when we update that block well what we have to do is we have to take our update and we also have to write that",
    "start": "2071240",
    "end": "2077360"
  },
  {
    "text": "update into the wall stream so we call this a stream because as we were saying earlier it's append only it's just",
    "start": "2077360",
    "end": "2083179"
  },
  {
    "text": "you're always appending to the end of it and it's always just being written down to the disk so what we're going to do is",
    "start": "2083179",
    "end": "2088429"
  },
  {
    "text": "we're going to put that block that change excuse me into the stream but there's one more thing we're going to do",
    "start": "2088429",
    "end": "2093830"
  },
  {
    "text": "is that the first time that we touch this block in memory we're also going to",
    "start": "2093830",
    "end": "2101030"
  },
  {
    "text": "put a copy of the entire 8k block into the wall stream that's a lot of by",
    "start": "2101030",
    "end": "2108870"
  },
  {
    "text": "that we're putting into the wall stream if you think about it but why do we do that now if we update the same record a",
    "start": "2108870",
    "end": "2115050"
  },
  {
    "text": "second time okay we still put our change into the wall stream but we don't need",
    "start": "2115050",
    "end": "2120420"
  },
  {
    "text": "to put the full block into the wall stream again all right now why do we",
    "start": "2120420",
    "end": "2126690"
  },
  {
    "text": "need to do this the reason that we need to do this kind of comes back to the second process that we talked about",
    "start": "2126690",
    "end": "2132030"
  },
  {
    "text": "which was this this idea of checkpoint and really what this comes down to is that we have sort of these two parallel",
    "start": "2132030",
    "end": "2137940"
  },
  {
    "text": "data structures that we're managing one is the wall stream or the right ahead log and this is kind of just a log of",
    "start": "2137940",
    "end": "2144120"
  },
  {
    "text": "all of our changes but secondly we have the actual files themselves our data files like this is the file that has my",
    "start": "2144120",
    "end": "2151710"
  },
  {
    "text": "table and it has my heaps and it has my tuples and this thing this is actually like the source of truth this is my real",
    "start": "2151710",
    "end": "2158460"
  },
  {
    "text": "data but the thing is that in Postgres well you don't want to be doing is every",
    "start": "2158460",
    "end": "2164400"
  },
  {
    "text": "single time you change a page in memory you don't want to have to flush that block out to the disk you just you want",
    "start": "2164400",
    "end": "2171480"
  },
  {
    "text": "to be able to batch it up make a whole bunch of updates to the block and then at some point in time push that image",
    "start": "2171480",
    "end": "2177240"
  },
  {
    "text": "down to the disk and then make a whole bunch more updates to the same block and then eventually make put a fresh copy on",
    "start": "2177240",
    "end": "2184650"
  },
  {
    "text": "the disk but you don't want every single time you're touching the block to write the entire block out to the disk that would be very inefficient it's far more",
    "start": "2184650",
    "end": "2190950"
  },
  {
    "text": "efficient to use it like a cache that's called checkpoint that's what",
    "start": "2190950",
    "end": "2196740"
  },
  {
    "text": "that process the checkpoint process is the process where we kind of slowly work our way through memory we take those we",
    "start": "2196740",
    "end": "2202440"
  },
  {
    "text": "take that block and we've made a whole bunch of updates and we finally flush all of those updates down to the disk so",
    "start": "2202440",
    "end": "2209690"
  },
  {
    "text": "what the wall stream is for is now let's suppose we've updated this block about 30 times and then we crash the system",
    "start": "2209690",
    "end": "2217320"
  },
  {
    "text": "but we haven't written the block out to the disk now what just happened did I just lose data well I didn't and the",
    "start": "2217320",
    "end": "2225510"
  },
  {
    "text": "reason that I didn't is because the block never got written to the disk but the wall stream did so what will happen",
    "start": "2225510",
    "end": "2232140"
  },
  {
    "text": "is Postgres does crash recovery and what crash recovery is it'll is it'll read the block back from the disk and it says",
    "start": "2232140",
    "end": "2239460"
  },
  {
    "text": "oh this block was updated at three o'clock so I'm going to replay all of the",
    "start": "2239460",
    "end": "2245099"
  },
  {
    "text": "changes that happened after three o'clock and I'll just update the block again and now with by reading the wall",
    "start": "2245099",
    "end": "2251099"
  },
  {
    "text": "stream starting at three o'clock because that's when the check point was so the check point tells me what time did this",
    "start": "2251099",
    "end": "2257940"
  },
  {
    "text": "block hit the disk last it tells me this block is current as of three o'clock",
    "start": "2257940",
    "end": "2263130"
  },
  {
    "text": "that's my check point was at three o'clock so I know when I do recovery when I do crash recovery",
    "start": "2263130",
    "end": "2269160"
  },
  {
    "text": "I start my replaying my wall stream at 3 o'clock that's when my last check point was and then I just replay all the",
    "start": "2269160",
    "end": "2277200"
  },
  {
    "text": "changes that I made and now I can reconstruct the exact state of that",
    "start": "2277200",
    "end": "2282210"
  },
  {
    "text": "block as it was in memory at the time of the crash and I haven't lost any data so",
    "start": "2282210",
    "end": "2288210"
  },
  {
    "text": "this is what allows us sort of the efficient process of making a whole bunch of changes in memory without",
    "start": "2288210",
    "end": "2294150"
  },
  {
    "text": "needing to flush the block to disk every single time all right and then there's",
    "start": "2294150",
    "end": "2299609"
  },
  {
    "text": "kind of one other piece in here too which is that that Walled data we also want to keep that around for like long",
    "start": "2299609",
    "end": "2305910"
  },
  {
    "text": "term as well so we do archive that data off but there's kind of one little nuance to this and the nuance is that in",
    "start": "2305910",
    "end": "2314730"
  },
  {
    "text": "Postgres our blocks are 8 kilobytes now that's configurable but in an RDS",
    "start": "2314730",
    "end": "2320160"
  },
  {
    "text": "land it's always a K and actually in many databases that's kind of a default",
    "start": "2320160",
    "end": "2325249"
  },
  {
    "text": "but operating systems do not operate in terms of 8 kilobytes so when the",
    "start": "2325249",
    "end": "2331619"
  },
  {
    "text": "checkpoint process wants to write 8 kilobytes of data down to the disk",
    "start": "2331619",
    "end": "2336960"
  },
  {
    "text": "it doesn't do an atomic 8k right in fact most operating systems certainly Linux",
    "start": "2336960",
    "end": "2343430"
  },
  {
    "text": "generally operate with a 4 kilobyte page size so the operating system when I say",
    "start": "2343430",
    "end": "2350130"
  },
  {
    "text": "flush that block down to disk the operating system translates that into 2 IO operations that are 4 K each and what",
    "start": "2350130",
    "end": "2359549"
  },
  {
    "text": "if I'm doing my checkpoints and one of those iOS gets to disk and then right at",
    "start": "2359549",
    "end": "2366329"
  },
  {
    "text": "that moment the system crashes now I have a new problem I have a problem",
    "start": "2366329",
    "end": "2371789"
  },
  {
    "text": "where you know previously at least I knew I could start it at 3 and I could replay my changes right but",
    "start": "2371789",
    "end": "2381090"
  },
  {
    "text": "now I have a new problem I have a block that's this is we've call it a torn right basically I have an inconsistent",
    "start": "2381090",
    "end": "2387240"
  },
  {
    "text": "or a corrupted block because half of it's the new version half of its the old version I can't start at three o'clock",
    "start": "2387240",
    "end": "2393480"
  },
  {
    "text": "and start replaying data on top of that well this is the reason that Postgres",
    "start": "2393480",
    "end": "2398970"
  },
  {
    "text": "does the full blocks under the wall stream the first time what basically",
    "start": "2398970",
    "end": "2403980"
  },
  {
    "text": "what Postgres does is that the in the",
    "start": "2403980",
    "end": "2409410"
  },
  {
    "text": "case that the check point was not complete it goes back to the previous",
    "start": "2409410",
    "end": "2416010"
  },
  {
    "text": "check point it starts replaying data now it doesn't have a block image from the previous check point this is the only block that we've got but luckily when we",
    "start": "2416010",
    "end": "2423690"
  },
  {
    "text": "start replaying the wall stream the first time which touched this block we stuck a copy in the wall stream so what",
    "start": "2423690",
    "end": "2431100"
  },
  {
    "text": "we have is that like so at 3 o'clock there was a failed check point but at 1 o'clock was our previous check point so",
    "start": "2431100",
    "end": "2438540"
  },
  {
    "text": "it at 1 o'clock I have I start replaying my wall stream at 1 o'clock in at 2",
    "start": "2438540",
    "end": "2443580"
  },
  {
    "text": "o'clock I have this full block in the wall stream so I can now take that full block and copy the entire block down to",
    "start": "2443580",
    "end": "2450120"
  },
  {
    "text": "the check point there back to the data file and then continue replaying replaying my data so the full page",
    "start": "2450120",
    "end": "2457260"
  },
  {
    "text": "rights are a very important mechanism and Postgres to to prevent a torn right",
    "start": "2457260",
    "end": "2468500"
  },
  {
    "text": "meaning like kind of a half completed right by the operating system from corrupting data in our database and this",
    "start": "2468500",
    "end": "2475170"
  },
  {
    "text": "isn't unique to Postgres actually you know for example Oracle does exactly the same strategy when you put it if if you",
    "start": "2475170",
    "end": "2481530"
  },
  {
    "text": "ever did sort of the old style hot backups where you used an OS utility to",
    "start": "2481530",
    "end": "2487080"
  },
  {
    "text": "backup your files by just copying the files you'd put your Oracle database into a hot backup mode and Oracle",
    "start": "2487080",
    "end": "2492630"
  },
  {
    "text": "started putting full block images into the log stream exactly the same strategy this isn't unique to Postgres as a",
    "start": "2492630",
    "end": "2499500"
  },
  {
    "text": "general strategy but there are some important implications of this in Postgres first of all this is always",
    "start": "2499500",
    "end": "2506280"
  },
  {
    "text": "happening in RDS Postgres is something that's always turned on happening and what it means is that the",
    "start": "2506280",
    "end": "2513109"
  },
  {
    "text": "first time you touch a block after a checkpoint there is a significant extra expense in terms of i/o so let's just",
    "start": "2513109",
    "end": "2522289"
  },
  {
    "text": "kind of in the context of an index look at what this might mean if we have a right-leaning index like a sequence",
    "start": "2522289",
    "end": "2529399"
  },
  {
    "start": "2523000",
    "end": "2642000"
  },
  {
    "text": "number or a last updated time something like that then what's going to happen is",
    "start": "2529399",
    "end": "2534619"
  },
  {
    "text": "we we're going to up we're going to insert a new record into the table say we insert record with a value of 201 we",
    "start": "2534619",
    "end": "2540769"
  },
  {
    "text": "hit the root tree and we follow that all the way down and we've touched about four blocks now we do the next record",
    "start": "2540769",
    "end": "2547609"
  },
  {
    "text": "the value of 202 well this time it hits",
    "start": "2547609",
    "end": "2553009"
  },
  {
    "text": "the same four blocks right so we don't add any new blocks with the right-leaning index like this what you",
    "start": "2553009",
    "end": "2560149"
  },
  {
    "text": "can see is you'll probably get maybe like one full page right on this leaf node but that's about it but now what if",
    "start": "2560149",
    "end": "2565849"
  },
  {
    "text": "we have a different index what if we have like a gooood or something like that where it's completely randomized all right let's look at what that might",
    "start": "2565849",
    "end": "2572569"
  },
  {
    "text": "look like well the first time we answer number 124 and we hit those four blocks",
    "start": "2572569",
    "end": "2579139"
  },
  {
    "text": "now our next set service the number 99 in order to insert this record we go down the other side of the be tree and",
    "start": "2579139",
    "end": "2585849"
  },
  {
    "text": "we have three more blocks and we've now added and then we our next record is 160",
    "start": "2585849",
    "end": "2592159"
  },
  {
    "text": "and one which adds another two blocks and every time you're touching more blocks inside of the index you're",
    "start": "2592159",
    "end": "2597619"
  },
  {
    "text": "increasing your odds that you're going to be doing full-page writes so what you end up with is is the more blocks you",
    "start": "2597619",
    "end": "2606229"
  },
  {
    "text": "have to touch in the index the more i/o that you have to do as you're updating your system now I want to bring this",
    "start": "2606229",
    "end": "2611689"
  },
  {
    "text": "full circle and remember hot updates one of the benefits of hot updates was that",
    "start": "2611689",
    "end": "2617149"
  },
  {
    "text": "when you did the heap only tuple you didn't update any of the indexes right because we just we just made the change",
    "start": "2617149",
    "end": "2624769"
  },
  {
    "text": "in the native block but the but there was no updates in the indexes so what that means is that this sort of write",
    "start": "2624769",
    "end": "2630349"
  },
  {
    "text": "amplification effect is directly observable on the live in terms of i/o",
    "start": "2630349",
    "end": "2637509"
  },
  {
    "text": "amplification in the wall stream without a bit hot updates as well so",
    "start": "2637509",
    "end": "2643099"
  },
  {
    "text": "when we do a hot update and then I dump the wall stream of what just happened what I see is I see a single full page",
    "start": "2643099",
    "end": "2649459"
  },
  {
    "text": "right and that's for the table that I just updated but if I don't get a hot",
    "start": "2649459",
    "end": "2654589"
  },
  {
    "text": "update meaning that I now have to update indexes for the exact same update this",
    "start": "2654589",
    "end": "2661339"
  },
  {
    "text": "is what a dump of our wall stream looks like now I have my same data page update",
    "start": "2661339",
    "end": "2668869"
  },
  {
    "text": "from the table but in addition I had four full page rights going out to the index so this is kind of one of the the",
    "start": "2668869",
    "end": "2675799"
  },
  {
    "text": "reasons that hot ups are important it's not just about that one little record in the index it's about that's triggering",
    "start": "2675799",
    "end": "2684430"
  },
  {
    "text": "entire blocks being written out to your wall stream so what that turns into is three kilobytes with the hot updates of",
    "start": "2684430",
    "end": "2692539"
  },
  {
    "text": "Io that I had to do 16 kilobytes four times as much i/o when I didn't get hot",
    "start": "2692539",
    "end": "2698239"
  },
  {
    "text": "updates another way to kind of visualize this same thing is looking at like kind of run taking a hundred clients and",
    "start": "2698239",
    "end": "2704569"
  },
  {
    "start": "2701000",
    "end": "2752000"
  },
  {
    "text": "spinning them up and running a benchmark like this you'll see that that right io",
    "start": "2704569",
    "end": "2710959"
  },
  {
    "text": "difference translates directly into the TPS I'm able to drive on this kind of simple benchmark we're starting off if",
    "start": "2710959",
    "end": "2717349"
  },
  {
    "text": "there's just two indexes okay it's it's not hugely different but you know you",
    "start": "2717349",
    "end": "2722719"
  },
  {
    "text": "see the hot updates are are able to drive some more transactions through but as you go down the line it it gets worse",
    "start": "2722719",
    "end": "2732199"
  },
  {
    "text": "and worse and worse to the point where we have once we have 64 indexes on this table there's a 35 X difference between",
    "start": "2732199",
    "end": "2740180"
  },
  {
    "text": "how many TPS I can drive with hot updates versus without the hot updates",
    "start": "2740180",
    "end": "2746289"
  },
  {
    "text": "and it's not just updates one last thing to look at I think is vacuuming as well",
    "start": "2746289",
    "end": "2754910"
  },
  {
    "start": "2752000",
    "end": "2817000"
  },
  {
    "text": "we talked a bit about vacuuming earlier in the vacuum the vacuuming still has to run it has to clean up some of the data",
    "start": "2754910",
    "end": "2762650"
  },
  {
    "text": "and the blocks vacuum is a serial process and one of the important things that vacuuming has to do is in order to",
    "start": "2762650",
    "end": "2768949"
  },
  {
    "text": "clean up the data block the first thing it has to do is make sure that there's no indexes referencing that line pointer",
    "start": "2768949",
    "end": "2775670"
  },
  {
    "text": "before it can get rid of line pointer all right so what vacuum will do is first it gets a list of line",
    "start": "2775670",
    "end": "2782269"
  },
  {
    "text": "pointers which are candidates for removal and then it has to go scan all",
    "start": "2782269",
    "end": "2787339"
  },
  {
    "text": "the indexes and there's no reverse pointer that goes from the line pointer back into the index so the only way to",
    "start": "2787339",
    "end": "2793609"
  },
  {
    "text": "make sure that my line pointer is clear and is Ken it's safe to remove that guy",
    "start": "2793609",
    "end": "2799640"
  },
  {
    "text": "is I have to just literally full scan like read the entire index beginning to",
    "start": "2799640",
    "end": "2805039"
  },
  {
    "text": "end and make sure there's no references to that line pointer and it's a serial operation so the bigger your index is",
    "start": "2805039",
    "end": "2810559"
  },
  {
    "text": "get the more expensive that becomes so",
    "start": "2810559",
    "end": "2816109"
  },
  {
    "text": "what does that look like if I'm doing hot updates same kind of test where I sort of slowly ramp up the number of",
    "start": "2816109",
    "end": "2822589"
  },
  {
    "start": "2817000",
    "end": "2890000"
  },
  {
    "text": "indexes well I did so I did 1 million updates of a table and I made sure they",
    "start": "2822589",
    "end": "2828019"
  },
  {
    "text": "were all hot updates how long did it take me to vacuum that table after a million updates well with only two",
    "start": "2828019",
    "end": "2833599"
  },
  {
    "text": "indexes the vacuum you see it took less than a second we get up to 64 indexes",
    "start": "2833599",
    "end": "2839119"
  },
  {
    "text": "and and it takes a bit longer but you still see we're still like a 6 seconds we're still well under 10 seconds with",
    "start": "2839119",
    "end": "2844309"
  },
  {
    "text": "64 indexes what does that look like if I if I don't have hot updates now without",
    "start": "2844309",
    "end": "2850249"
  },
  {
    "text": "hot updates remember I have to add all the extra entries into the index right",
    "start": "2850249",
    "end": "2855789"
  },
  {
    "text": "here's what it looks like when we add in the not hubs now I've left the red on the chart if you can still see it",
    "start": "2855789",
    "end": "2861849"
  },
  {
    "text": "because once now we're talking about them literally a 100x difference between",
    "start": "2861849",
    "end": "2869269"
  },
  {
    "text": "the hot updates and the not hood updates and how long it takes me to vacuum my index in the case with 64 64 indexes out",
    "start": "2869269",
    "end": "2878089"
  },
  {
    "text": "there just to kind of bring this home",
    "start": "2878089",
    "end": "2883400"
  },
  {
    "text": "I'll kind of walk through one real quick practical example then we'll then we'll wrap this up this is sort of a case",
    "start": "2883400",
    "end": "2892910"
  },
  {
    "start": "2890000",
    "end": "3137000"
  },
  {
    "text": "that's really common in the cases like what if I want I have a table but if I",
    "start": "2892910",
    "end": "2898609"
  },
  {
    "text": "want to keep track of the changes to my table because I want I have like an external system that I want to keep in sync so one strategy that people use to",
    "start": "2898609",
    "end": "2905989"
  },
  {
    "text": "do this sometimes is they take their table and they add a column called last update right and whenever you update a record",
    "start": "2905989",
    "end": "2912710"
  },
  {
    "text": "you update the last updated time so when I when I want to go synchronize my",
    "start": "2912710",
    "end": "2918770"
  },
  {
    "text": "outside system so let's say I'm gonna build an outside system and call it a well that's not so this was a mistake it",
    "start": "2918770",
    "end": "2925040"
  },
  {
    "text": "says data warehouse but nobody calls them that anymore right we call them what data lakes now so we'll fix that",
    "start": "2925040",
    "end": "2930460"
  },
  {
    "text": "and anytime that we what we do is",
    "start": "2930460",
    "end": "2935510"
  },
  {
    "text": "whenever we want to update our data Lake we just we know well the last time I updated the data Lake was yesterday at 3",
    "start": "2935510",
    "end": "2942230"
  },
  {
    "text": "o'clock so I'm just going to search for all the records we're last updated as after 3 o'clock yesterday and I'll copy",
    "start": "2942230",
    "end": "2949070"
  },
  {
    "text": "those records to my data Lake right so that's a simple strategy but over time the table starts to grow and this is",
    "start": "2949070",
    "end": "2956810"
  },
  {
    "text": "doing a full table scan on that last updated column right so people start to complain it's taken too long to run this",
    "start": "2956810",
    "end": "2962420"
  },
  {
    "text": "update job so what does somebody do oh and that I should point out the red columns are the columns with indexes all",
    "start": "2962420",
    "end": "2969950"
  },
  {
    "text": "right so what somebody does is well they add an index on the last updated column",
    "start": "2969950",
    "end": "2975580"
  },
  {
    "text": "so we'll change that to red so now now great everything goes fast again right",
    "start": "2975580",
    "end": "2980900"
  },
  {
    "text": "so now I can get my updates to my data like my update job starts going really",
    "start": "2980900",
    "end": "2986960"
  },
  {
    "text": "fast because now I'm getting a horse an index can instead of having to do a full table scan to get my changes my change",
    "start": "2986960",
    "end": "2994820"
  },
  {
    "text": "data and to synchronize my data Lake ok so that's all sounds great but there's a",
    "start": "2994820",
    "end": "3001690"
  },
  {
    "text": "big catch we've been talking for almost an hour now about hot updates and all of",
    "start": "3001690",
    "end": "3009400"
  },
  {
    "text": "the impacts and how important it is to get Hobbit is hot updates in your database well before we made this change",
    "start": "3009400",
    "end": "3017710"
  },
  {
    "text": "before somebody went in and just added this little index anytime that we made updates to columns 1 3 & 5 or the last",
    "start": "3017710",
    "end": "3025240"
  },
  {
    "text": "updated column we were getting hot updates right because as long as you can",
    "start": "3025240",
    "end": "3030730"
  },
  {
    "text": "fit it in the same row and as long as you're not updating one of your index columns you can get a hot update and you",
    "start": "3030730",
    "end": "3036670"
  },
  {
    "text": "get all the benefits that come along with that but think about what we just did we added the last updated column",
    "start": "3036670",
    "end": "3044260"
  },
  {
    "text": "there's a trigger on this table right every time you touch anything in the table you have to update last updated so",
    "start": "3044260",
    "end": "3051280"
  },
  {
    "text": "every update updates last updated we put an index on last updated now",
    "start": "3051280",
    "end": "3058350"
  },
  {
    "text": "no hot updates we're done it's it's it's it's out so every time we update",
    "start": "3058350",
    "end": "3063970"
  },
  {
    "text": "anything in this table it has to be a regular update because we're always updating an indexed column this is sad",
    "start": "3063970",
    "end": "3072880"
  },
  {
    "text": "so it's actually a little scary too and just one of those things to sort of look out for you realize that like even a",
    "start": "3072880",
    "end": "3079359"
  },
  {
    "text": "little thing like adding an index can have sort of these secondary effects that you might not anticipate if you're",
    "start": "3079359",
    "end": "3085119"
  },
  {
    "text": "not paying attention there is actually a much better way to do this by the way because you know you might be wondering",
    "start": "3085119",
    "end": "3090160"
  },
  {
    "text": "well then what am I supposed to do to keep my day Tulelake up-to-date well in Postgres remember we have that right",
    "start": "3090160",
    "end": "3095290"
  },
  {
    "text": "ahead log and Postgres for the record it does have like fantastic capabilities where you can essentially get direct",
    "start": "3095290",
    "end": "3101350"
  },
  {
    "text": "access to that change stream where Postgres can set up an auxilary process",
    "start": "3101350",
    "end": "3107320"
  },
  {
    "text": "that just reads the right ahead log decodes the data there into a chain",
    "start": "3107320",
    "end": "3112330"
  },
  {
    "text": "stream that you can plug directly into DMS or you can plug directly into a number of third-party external services",
    "start": "3112330",
    "end": "3118840"
  },
  {
    "text": "and this is called logical decoding or a logical replication these are these are built off of the wall stream which this",
    "start": "3118840",
    "end": "3126070"
  },
  {
    "text": "is the way this is the happy path this is the way that you want to be doing this sort of a use case where you're",
    "start": "3126070",
    "end": "3133330"
  },
  {
    "text": "trying to keep an external system in sync so that's a fantastic deck and I",
    "start": "3133330",
    "end": "3141730"
  },
  {
    "text": "hope that the hot update stuff is interesting but I think the best thing about this deck is that it's a way to",
    "start": "3141730",
    "end": "3147160"
  },
  {
    "text": "really illustrate the stuff that we talked about in the first half when we kind of gave some now this only went",
    "start": "3147160",
    "end": "3152830"
  },
  {
    "text": "deep I'm kind of the block structure in the wall stream there's about a hundred more things that we want to go into I'm",
    "start": "3152830",
    "end": "3160630"
  },
  {
    "text": "just going to real quickly as I kind of wrap up point out sort of a wone sort of",
    "start": "3160630",
    "end": "3168190"
  },
  {
    "text": "final thing which is that this is the",
    "start": "3168190",
    "end": "3175119"
  },
  {
    "start": "3173000",
    "end": "3346000"
  },
  {
    "text": "wiki page we're updating this oops we're updating this wiki page it's",
    "start": "3175119",
    "end": "3180999"
  },
  {
    "text": "been updated a lot since we first put the pages so I would encourage you guys to go back here and take a look at this wiki page in particular so the would we",
    "start": "3180999",
    "end": "3190389"
  },
  {
    "text": "come back at three o'clock as you're sitting down today work on under sysm if",
    "start": "3190389",
    "end": "3195399"
  },
  {
    "text": "you see a ticket if you just you're working on writing some code and a question comes to mind you can either throw it in the chyme",
    "start": "3195399",
    "end": "3201639"
  },
  {
    "text": "room or you can jot down a piece of paper bring it back a three o'clock at three o'clock Dublin time I believe that's four",
    "start": "3201639",
    "end": "3208649"
  },
  {
    "text": "o'clock UTC right I think that's an hour later - all right",
    "start": "3208649",
    "end": "3214539"
  },
  {
    "text": "thank you two o'clock UTC we'll have more of kind of a discussion oriented",
    "start": "3214539",
    "end": "3219699"
  },
  {
    "text": "thing to be able to kind of go wherever you guys want to go and then I'll also have a set of hands-on labs I really think getting your hands on a",
    "start": "3219699",
    "end": "3226509"
  },
  {
    "text": "Postgres is a fantastic way to really kind of solidify this stuff in your",
    "start": "3226509",
    "end": "3233319"
  },
  {
    "text": "memory right I'll introduce our contest that we're doing for the week and one",
    "start": "3233319",
    "end": "3239349"
  },
  {
    "text": "last thing on this week page is a whole section at the bottom called useful links and this has sort of the cream of",
    "start": "3239349",
    "end": "3245799"
  },
  {
    "text": "the crop a handful of I think some of the most important that there's a lot of like other links we could put here but I've",
    "start": "3245799",
    "end": "3252039"
  },
  {
    "text": "tried to just keep this to kind of like the critical sources of information that you find so to learn more and to keep",
    "start": "3252039",
    "end": "3259869"
  },
  {
    "text": "going like we've just scratched the tip of the iceberg here but there's a lot of really good resources sort of in",
    "start": "3259869",
    "end": "3265599"
  },
  {
    "text": "particular I would point out like today we talked a bit about architecture in theory I have a whole section here",
    "start": "3265599",
    "end": "3271629"
  },
  {
    "text": "so Andy pavlo from Carnegie Mellon his entire advanced database systems class",
    "start": "3271629",
    "end": "3277179"
  },
  {
    "text": "he posts all of his lectures this spring are recorded and posted on YouTube all of his class materials as PDFs the",
    "start": "3277179",
    "end": "3283809"
  },
  {
    "text": "homework assignments everything like that's a great study on your own resource there's a couple other places",
    "start": "3283809",
    "end": "3288939"
  },
  {
    "text": "as well here notice uzuki who in fact works here I believe right yes he does",
    "start": "3288939",
    "end": "3295509"
  },
  {
    "text": "his online book is I it's I I think it's very good it's it's kind of like concise",
    "start": "3295509",
    "end": "3302319"
  },
  {
    "text": "it's it's not as long as some of these other things but he he has some great illustrations and it's just sort of a",
    "start": "3302319",
    "end": "3309189"
  },
  {
    "text": "great I feel like introduction architecture just it makes the the illustrations in particular things like transaction ID",
    "start": "3309189",
    "end": "3315500"
  },
  {
    "text": "wraparound and how the transaction clock works and some logical replication stuff it's just a great a great on-ramp to",
    "start": "3315500",
    "end": "3323060"
  },
  {
    "text": "getting getting a hold of the architecture well so yeah I would particularly say to follow up and to get",
    "start": "3323060",
    "end": "3330230"
  },
  {
    "text": "more architecture stuff these are some these four links are some good some good resources that you can do so what we'll",
    "start": "3330230",
    "end": "3336650"
  },
  {
    "text": "probably touch on some of that stuff more during the week and that's a wrap for today",
    "start": "3336650",
    "end": "3343540"
  }
]