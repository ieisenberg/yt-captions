[
  {
    "start": "0",
    "end": "29000"
  },
  {
    "text": "good morning everyone how you guys doing good so welcome welcome also in our five",
    "start": "890",
    "end": "9990"
  },
  {
    "text": "overflow rooms that are also watching this session live it's a popular session so we'll make sure we make it worth your while",
    "start": "9990",
    "end": "15650"
  },
  {
    "text": "my name is Andre before I run the AWS stuff functions team and we also have",
    "start": "15650",
    "end": "20699"
  },
  {
    "text": "with us today NIC Whelan who's a principal software engineer at Novartis and he'll be presenting a use case that",
    "start": "20699",
    "end": "26340"
  },
  {
    "text": "I hope you'll find interesting I want to kick us off today with a statement that's hopefully not too controversial",
    "start": "26340",
    "end": "33090"
  },
  {
    "start": "29000",
    "end": "110000"
  },
  {
    "text": "for most of us modern application development enables rapid innovation now",
    "start": "33090",
    "end": "40230"
  },
  {
    "text": "if you guys have been going to reinvent for a little bit or even this time round and taking in the content you may have",
    "start": "40230",
    "end": "45660"
  },
  {
    "text": "noticed that modern application development or mod pervades a lot of the content in the sessions this year",
    "start": "45660",
    "end": "52309"
  },
  {
    "text": "now mat is not something that AWS came up with on our own it's actually based on feedback that you our customers have",
    "start": "52309",
    "end": "58949"
  },
  {
    "text": "given us around how you out innovate your competitors how you innovate better",
    "start": "58949",
    "end": "64559"
  },
  {
    "text": "in the cloud than you could with traditional on-premise server based technologies and so we're gonna cover",
    "start": "64559",
    "end": "70290"
  },
  {
    "text": "that in today's session there are a number of different pillars associated with modern application development",
    "start": "70290",
    "end": "75600"
  },
  {
    "text": "we're gonna go into a bit of depth in three of them elasticity micro services",
    "start": "75600",
    "end": "81780"
  },
  {
    "text": "and modular ization and interoperability and of course we're gonna spend a good",
    "start": "81780",
    "end": "87090"
  },
  {
    "text": "amount of time grappling with the issue of how do we manage state in a micro services based distributed application",
    "start": "87090",
    "end": "95180"
  },
  {
    "text": "now you may have noticed on the door as you made your way in this is a 300 level session so and it's an advanced session",
    "start": "95180",
    "end": "101970"
  },
  {
    "text": "and as my colleague Tim Bray likes to say there will be code so I'm not gonna",
    "start": "101970",
    "end": "111360"
  },
  {
    "start": "110000",
    "end": "272000"
  },
  {
    "text": "give you a micro services 101 course here but I thought it would be useful to have a common vocabulary a common",
    "start": "111360",
    "end": "116640"
  },
  {
    "text": "framework so that we're all on the same page one definition of micro services that I really like is that a micro",
    "start": "116640",
    "end": "123329"
  },
  {
    "text": "service should encapsulate completely a single business function of your application another aspect of micro",
    "start": "123329",
    "end": "130830"
  },
  {
    "text": "services that is important is they should be in two ly deployable from the rest of your application and will see that this makes",
    "start": "130830",
    "end": "138020"
  },
  {
    "text": "fault isolation and correction and ultimately innovation velocity easier so",
    "start": "138020",
    "end": "144680"
  },
  {
    "text": "imagine different types of business functions that could be part of your application processing user input acting",
    "start": "144680",
    "end": "150920"
  },
  {
    "text": "as a data persistence layer or even interfacing with an IOT device that forms a part of your application imagine",
    "start": "150920",
    "end": "159140"
  },
  {
    "text": "now that you have a problem receiving telemetry from your IOT device well in contrast to a monolithic application",
    "start": "159140",
    "end": "166100"
  },
  {
    "text": "where potentially you could be looking for that problem throughout your entire code base with a micro services based",
    "start": "166100",
    "end": "171350"
  },
  {
    "text": "architecture if you properly factored things you know where to begin your search it's going to be in the micro service associated with that IOT device",
    "start": "171350",
    "end": "178430"
  },
  {
    "text": "you can perform the fix test fit in isolation and most importantly deploy it",
    "start": "178430",
    "end": "183860"
  },
  {
    "text": "independently from the rest of your app this makes it much faster than if you're contemplating a sort of deploy the whole",
    "start": "183860",
    "end": "189980"
  },
  {
    "text": "world type of type of scenario innovation makes its way to your customers much more quickly now in micro",
    "start": "189980",
    "end": "197720"
  },
  {
    "text": "services we tend to communicate in a synchronous fashion we're passing messages we're using queues we're using",
    "start": "197720",
    "end": "204859"
  },
  {
    "text": "an event-driven architecture we tend to not rely so much on shared data stores",
    "start": "204859",
    "end": "210530"
  },
  {
    "text": "because these will introduce lock contention and synchronous types of dependencies which have failure modes",
    "start": "210530",
    "end": "216470"
  },
  {
    "text": "that we would prefer not to enter into so it's all fine and well to be nicely factored and everything's decoupled and",
    "start": "216470",
    "end": "223220"
  },
  {
    "text": "I have micro services that don't really know a lot about each other but how do I deal with problems when they arise what",
    "start": "223220",
    "end": "229670"
  },
  {
    "text": "happens if the micro service over here goes down and comes back up comes into service in some unpredictable fashion",
    "start": "229670",
    "end": "235940"
  },
  {
    "text": "right it may have its own personal perception of the world which may differ",
    "start": "235940",
    "end": "241850"
  },
  {
    "text": "from micro service be over here micro service see may react in some unexpected way to the failure that happened over",
    "start": "241850",
    "end": "248329"
  },
  {
    "text": "here and very quickly if you're not careful you can find yourself in a bit of a split brain scenario not knowing",
    "start": "248329",
    "end": "255380"
  },
  {
    "text": "what state your application is in so how do we deal with state management in a distributed type of micro service",
    "start": "255380",
    "end": "261709"
  },
  {
    "text": "scenario like this well the answer is in the question we need something that looks like a",
    "start": "261709",
    "end": "268139"
  },
  {
    "text": "state machine and one way that we can do this is by using a service that offers",
    "start": "268139",
    "end": "274500"
  },
  {
    "start": "272000",
    "end": "403000"
  },
  {
    "text": "state machines as a managed offering and of course that's AWS stop functions now",
    "start": "274500",
    "end": "279690"
  },
  {
    "text": "again it's an advanced session I'm not gonna give you a full primer on stop functions I assume that you know a thing",
    "start": "279690",
    "end": "284820"
  },
  {
    "text": "or two about the service if not this is your one slide to catch up so we'll",
    "start": "284820",
    "end": "291720"
  },
  {
    "text": "spend a bit of time here so with stop functions the the way it works is you you define your state machines business",
    "start": "291720",
    "end": "297570"
  },
  {
    "text": "logic using Amazon States language which is basically Jason so with this you'll specify the structure of your state",
    "start": "297570",
    "end": "304050"
  },
  {
    "text": "machine which is rendered for you visually you can see that in the central graph here in the form of a flowchart or",
    "start": "304050",
    "end": "310740"
  },
  {
    "text": "a state machine and there are different types of states that can be employed in the state machine some of them are",
    "start": "310740",
    "end": "316500"
  },
  {
    "text": "action states right we may be doing something like invoking a lambda to do work for us or we could be interfacing",
    "start": "316500",
    "end": "322710"
  },
  {
    "text": "with an ec2 or ECS or eks or even on-premises based worker to do work",
    "start": "322710",
    "end": "329330"
  },
  {
    "text": "there were also choice States which will send you down one branch or the other of the state machine based on the output of",
    "start": "329330",
    "end": "335760"
  },
  {
    "text": "previous States and then equally we have states that enable processing in",
    "start": "335760",
    "end": "341220"
  },
  {
    "text": "parallel for example for for big data type workloads or even medium data now",
    "start": "341220",
    "end": "347280"
  },
  {
    "text": "one of the cool things about stop functions is its traceability and debug ability features so if you can see on",
    "start": "347280",
    "end": "353640"
  },
  {
    "text": "the on the far because this would be right hand side for you you you have the",
    "start": "353640",
    "end": "358860"
  },
  {
    "text": "opportunity to look at what path was traversed in the state machine for a given execution the nodes that are",
    "start": "358860",
    "end": "364950"
  },
  {
    "text": "highlighted in green is where this execution actually went and if you were to click on any one of those nodes and",
    "start": "364950",
    "end": "370979"
  },
  {
    "text": "what we'll see this in a subsequent slide you can actually see the inputs that were provided to that state any",
    "start": "370979",
    "end": "376320"
  },
  {
    "text": "errors or exceptions that were thrown and the outputs that were generated so it makes it really easy to troubleshoot",
    "start": "376320",
    "end": "382650"
  },
  {
    "text": "as you're developing your state machine and your overall application and it also works very nicely when you're operating",
    "start": "382650",
    "end": "388229"
  },
  {
    "text": "at scale also your your data is persisted for up to a year so you have a",
    "start": "388229",
    "end": "395280"
  },
  {
    "text": "nice audible execution history and all of the scales elastically for you so you don't have to worried about provisioning or managing",
    "start": "395280",
    "end": "401370"
  },
  {
    "text": "anything so the way we're gonna structure our discussion today is by",
    "start": "401370",
    "end": "406800"
  },
  {
    "start": "403000",
    "end": "641000"
  },
  {
    "text": "using customer use cases so these are folks like yourselves who have come to us and said hey we have a couple of",
    "start": "406800",
    "end": "412949"
  },
  {
    "text": "patterns that we think would be of use to the serverless and modern application development and stuff functions",
    "start": "412949",
    "end": "418830"
  },
  {
    "text": "communities and we'd like you to highlight them so that's what we're gonna do I'm gonna talk through three customer use cases and I'll do my best",
    "start": "418830",
    "end": "425490"
  },
  {
    "text": "to surface the patterns that I think might be of interest and reusable for you and then Nick will take the stage",
    "start": "425490",
    "end": "431970"
  },
  {
    "text": "and he'll talk in a bit more detail about how Novartis has used stuff functions to manage State in distributed",
    "start": "431970",
    "end": "438060"
  },
  {
    "text": "applications and we'll do a bit of a deeper dive on on their use case so the",
    "start": "438060",
    "end": "444419"
  },
  {
    "text": "first one we're going to talk about today is xylem xylem is a large company involved in water technology the",
    "start": "444419",
    "end": "451440"
  },
  {
    "text": "transportation distribution and efficient usage of water and they had a big problem their data Lake team was",
    "start": "451440",
    "end": "459630"
  },
  {
    "text": "interested in making the data from tens of millions of endpoints available to all their stakeholders persisting it",
    "start": "459630",
    "end": "466110"
  },
  {
    "text": "forever and they needed to do this with a team of only four people that's four",
    "start": "466110",
    "end": "472410"
  },
  {
    "text": "people for building it for people for maintaining it now in a little more",
    "start": "472410",
    "end": "480300"
  },
  {
    "text": "precise terms their their specific application consumes an arbitrary number of binary files transforms them and",
    "start": "480300",
    "end": "486930"
  },
  {
    "text": "loads them into the data Lake in a parquet floor mat and this is a pattern of interest the very first that I'd like",
    "start": "486930",
    "end": "493380"
  },
  {
    "text": "to call to your attention you know some people take a look at stuff functions and they say okay I got it it's a state machine I probably need you know a",
    "start": "493380",
    "end": "500400"
  },
  {
    "text": "hundred state state machine to really get the utility out of this and they very quickly dismissed these small",
    "start": "500400",
    "end": "506750"
  },
  {
    "text": "useful workflows many customers have found some value actually in using stop",
    "start": "506750",
    "end": "511770"
  },
  {
    "text": "functions for three or four state state machines but do a really simple data transformation operation like xylem does",
    "start": "511770",
    "end": "518099"
  },
  {
    "text": "right many times you find yourself taking data out of redshift transforming it putting it into a three taking data",
    "start": "518099",
    "end": "525959"
  },
  {
    "text": "out of an on-premises resource applying a transform loading it into dynamo three",
    "start": "525959",
    "end": "531390"
  },
  {
    "text": "states easy a little bit of error handling wrapped around it and you're off to the races so",
    "start": "531390",
    "end": "536670"
  },
  {
    "text": "don't dismiss small state machines as is useful pattern and this is what xylem has taught us now another aspect of",
    "start": "536670",
    "end": "544839"
  },
  {
    "text": "their application is they needed it to be elastic see they were coming from an on-premises world where their approach",
    "start": "544839",
    "end": "552130"
  },
  {
    "text": "was anything but elastic they had a data center they had servers and every now and then they had to ingest new large",
    "start": "552130",
    "end": "558639"
  },
  {
    "text": "customers into their system and this obviously consumed a lot of resources and they had to provision for those",
    "start": "558639",
    "end": "565360"
  },
  {
    "text": "Peaks but in actual fact the average utilization of their infrastructure was",
    "start": "565360",
    "end": "571420"
  },
  {
    "text": "quite low so a large peak to average difference and so the reason they needed",
    "start": "571420",
    "end": "577509"
  },
  {
    "text": "something that was elastic is they don't always want to be paying for something that's provisioned for peak when in",
    "start": "577509",
    "end": "583029"
  },
  {
    "text": "reality it's it's lightly used and so this is the second pattern of interest",
    "start": "583029",
    "end": "589029"
  },
  {
    "text": "but I'd like to call to your attention when you have something that does have this large peak to average variation it",
    "start": "589029",
    "end": "595029"
  },
  {
    "text": "may behoove you to consider a service technology as part of modern application development because with serverless",
    "start": "595029",
    "end": "600540"
  },
  {
    "text": "including stop functions lambda api gateway etc you're only paying when your",
    "start": "600540",
    "end": "606100"
  },
  {
    "text": "code is actually running as opposed to paying by the hour when you provision something so this is what xylem did and",
    "start": "606100",
    "end": "612610"
  },
  {
    "text": "the other thing I told you they they had to do this with only four people four people to build and four to maintain",
    "start": "612610",
    "end": "618060"
  },
  {
    "text": "well so the list tends to attract quite a bit less operational investment in",
    "start": "618060",
    "end": "623529"
  },
  {
    "text": "terms of people and hours than provisioning servers because with servers you're forever having to patch",
    "start": "623529",
    "end": "629199"
  },
  {
    "text": "them and deal with them even if they're virtual machines in the cloud you can realize some economies in terms of your",
    "start": "629199",
    "end": "635380"
  },
  {
    "text": "operations if you move to a service approach so that's what xylem had to say about that so let's have a look at their",
    "start": "635380",
    "end": "642730"
  },
  {
    "start": "641000",
    "end": "806000"
  },
  {
    "text": "solution architecture how did they actually do this so you can see that",
    "start": "642730",
    "end": "647920"
  },
  {
    "text": "it's a combination of stuff functions batch and Aurora serverless and stuff functions in batch pair pretty",
    "start": "647920",
    "end": "653949"
  },
  {
    "text": "nicely we'll see it actually a couple times in this presentation batch of course provides the containerization",
    "start": "653949",
    "end": "660339"
  },
  {
    "text": "framework and on your behalf will provision resources necessary to execute a batch job",
    "start": "660339",
    "end": "665980"
  },
  {
    "text": "and the role of stop functions in this is to actually launch the botched jobs orchestrate their execution and if any",
    "start": "665980",
    "end": "673030"
  },
  {
    "text": "error conditions arise it deals with retries and and any sort of error handling logic an Aurora server listen",
    "start": "673030",
    "end": "681190"
  },
  {
    "text": "in this instance acts as basically an index of files that are going to be in the data lake so there's a single",
    "start": "681190",
    "end": "688450"
  },
  {
    "text": "solitary ec2 instance in this it's an edge node responsible for gathering a list of input files as xylem is",
    "start": "688450",
    "end": "694870"
  },
  {
    "text": "ingesting new customers it passes these two stuff functions which validates that",
    "start": "694870",
    "end": "700510"
  },
  {
    "text": "the list is is valid it's correct it then determines which types of transformations need to be applied to",
    "start": "700510",
    "end": "706870"
  },
  {
    "text": "these binary files in order for them to make their way into the data Lake in some cases there will be one in some",
    "start": "706870",
    "end": "712600"
  },
  {
    "text": "cases there will be multiple and stuff functions by a lambda launches batch jobs for each of these types of",
    "start": "712600",
    "end": "718630"
  },
  {
    "text": "transforms in parallel monitors their execution keeps the tables in Aurora",
    "start": "718630",
    "end": "723730"
  },
  {
    "text": "server list updated as to the status of those executions and when everything is done it notifies Aurora server list to",
    "start": "723730",
    "end": "731830"
  },
  {
    "text": "to indicate that these files are now available in the s3 data lake now one",
    "start": "731830",
    "end": "737710"
  },
  {
    "text": "example that xylem gave us just to showcase how convenient this approaches for them is if they had to ingest six",
    "start": "737710",
    "end": "744400"
  },
  {
    "text": "months worth of data for 500 new customers which is a very realistic process prospect for them it's about",
    "start": "744400",
    "end": "751240"
  },
  {
    "text": "9000 files to be processed and if they were doing this with their on-premises",
    "start": "751240",
    "end": "756640"
  },
  {
    "text": "installation it would take about 20 hours of processing now 20 hours is precariously close to 24 hours or a day",
    "start": "756640",
    "end": "764050"
  },
  {
    "text": "and if they found themselves spilling over that that 24 hour boundary and into",
    "start": "764050",
    "end": "769390"
  },
  {
    "text": "the next day next day how about lost the mic here you guys",
    "start": "769390",
    "end": "774460"
  },
  {
    "text": "hear me okay that's better yeah if they found themselves spilling into the next day they would then begin",
    "start": "774460",
    "end": "780220"
  },
  {
    "text": "to accumulate a backlog as the next day's processing kicked into action but",
    "start": "780220",
    "end": "785830"
  },
  {
    "text": "with this approach actually stuff function stuff functions can launch in parallel the 9000 batch jobs associated",
    "start": "785830",
    "end": "792550"
  },
  {
    "text": "with the transforms it takes about an hour one to two hours and it cost 20 bucks right so contra",
    "start": "792550",
    "end": "799440"
  },
  {
    "text": "not with entire data center $20 one hour so this is a really nice approach that",
    "start": "799440",
    "end": "804750"
  },
  {
    "text": "you may wish to consider the next use case that we're going to consider is coin base so everyone knows coin base as",
    "start": "804750",
    "end": "812190"
  },
  {
    "start": "806000",
    "end": "853000"
  },
  {
    "text": "the digital or cryptocurrency exchange and coinbase wanted to move even further",
    "start": "812190",
    "end": "817230"
  },
  {
    "text": "into modern application development practices specifically what they wanted to do is iterate more frequently",
    "start": "817230",
    "end": "823770"
  },
  {
    "text": "innovate faster and this amounted to deploying more frequently so that the innovation that they create from their",
    "start": "823770",
    "end": "830280"
  },
  {
    "text": "engineers could make its way to customers sooner and they achieved some pretty impressive results they reduced",
    "start": "830280",
    "end": "837300"
  },
  {
    "text": "new account deployment time they increased the reliability of their deployments and as relates to their",
    "start": "837300",
    "end": "843720"
  },
  {
    "text": "mission-critical services they were able to deploy them 7% more frequently right so 7% faster innovation making its",
    "start": "843720",
    "end": "851460"
  },
  {
    "text": "way through the pipeline how did they do this well they basically built a",
    "start": "851460",
    "end": "857550"
  },
  {
    "start": "853000",
    "end": "1012000"
  },
  {
    "text": "deployment system and there are two components here that that are probably worth diving into the first one is code",
    "start": "857550",
    "end": "863910"
  },
  {
    "text": "flow which is their configuration management system so it contains information about what needs to be",
    "start": "863910",
    "end": "869970"
  },
  {
    "text": "running right defines the application we're talking about docker compose files user data that sort of thing and in",
    "start": "869970",
    "end": "877020"
  },
  {
    "text": "addition to that code flow contains information about the infrastructure on which to run it",
    "start": "877020",
    "end": "882290"
  },
  {
    "text": "what elastic load balancers are involved what auto scaling groups do we need to create what are the rules associated",
    "start": "882290",
    "end": "888330"
  },
  {
    "text": "with those and the permissions and the second component is something coinbase",
    "start": "888330",
    "end": "893430"
  },
  {
    "text": "has called odin and this is the stuff functions based application that's that's sitting there on the diagram",
    "start": "893430",
    "end": "899520"
  },
  {
    "text": "right next to code flow and Odin is responsible for actually orchestrating",
    "start": "899520",
    "end": "904620"
  },
  {
    "text": "the deployment provisioning resources and so forth now it's worth calling out at this point",
    "start": "904620",
    "end": "910110"
  },
  {
    "text": "that there are managed AWS services that can do many of these things for you but",
    "start": "910110",
    "end": "915420"
  },
  {
    "text": "in coins Beit coin bases case they had some more specific requirements and they wanted more flexibility and so they",
    "start": "915420",
    "end": "921540"
  },
  {
    "text": "chose to use stop functions to fill that gap and I just like to say that's a perfectly acceptable pattern right if",
    "start": "921540",
    "end": "928470"
  },
  {
    "text": "the managed AWS offerings aren't doing it for you you're perfectly welcome to use a service like stop functions to innovate around that we",
    "start": "928470",
    "end": "935519"
  },
  {
    "text": "want you to do this will support you so how does this work well a deployment",
    "start": "935519",
    "end": "941489"
  },
  {
    "text": "request makes its way into Odin Odin validates that the the user data is is",
    "start": "941489",
    "end": "948600"
  },
  {
    "text": "present and that the Des Moines Mint request is correct and then it begins to execute the deployment specifically it",
    "start": "948600",
    "end": "954149"
  },
  {
    "text": "provisions a new auto scaling group waits for that auto scaling groups resources to come into service execute",
    "start": "954149",
    "end": "960420"
  },
  {
    "text": "the software deployment waits for that to become healthy and then deep revisions the old resources associated",
    "start": "960420",
    "end": "966959"
  },
  {
    "text": "with the initial deployment because we're doing immutable deployments here right yeah so you can imagine that if",
    "start": "966959",
    "end": "974160"
  },
  {
    "text": "anything went wrong in an unpredictable way at any point during this process it could be pretty bad right you could find",
    "start": "974160",
    "end": "980189"
  },
  {
    "text": "yourself with instances behind a load balancer serving production traffic that",
    "start": "980189",
    "end": "985889"
  },
  {
    "text": "are unhealthy or they were not known to be healthy and so this is what xylem particular zalem we're talking about",
    "start": "985889",
    "end": "992670"
  },
  {
    "text": "coinbase at this point what coinbase particularly liked about this approach was that stop functions kind of forces",
    "start": "992670",
    "end": "998759"
  },
  {
    "text": "you to always know what state your application is in even if it's going into a failure mode it's made rather",
    "start": "998759",
    "end": "1004610"
  },
  {
    "text": "explicit what state you're in and so there's there's very little chance of this unpredictable type of error stuff",
    "start": "1004610",
    "end": "1011259"
  },
  {
    "text": "emerging let's have a look at their state machine here so at the very first",
    "start": "1011259",
    "end": "1017660"
  },
  {
    "start": "1012000",
    "end": "1099000"
  },
  {
    "text": "stage we validate that the deployment is correct lock resources that we're going to be using validate that the resources",
    "start": "1017660",
    "end": "1025130"
  },
  {
    "text": "are indeed locked and execute the deployment wait for the deployment to be complete and then wait for it to become",
    "start": "1025130",
    "end": "1032389"
  },
  {
    "text": "healthy right this is sort of the happy path but as you can see there's a bunch of branches and in this diagram going",
    "start": "1032389",
    "end": "1038659"
  },
  {
    "text": "off to the right these are all the error handling conditions right coinbase did a",
    "start": "1038659",
    "end": "1043788"
  },
  {
    "text": "really good job of of making sure that they're catching errors and dealing with them appropriately attempting remediation if they can or at",
    "start": "1043789",
    "end": "1051710"
  },
  {
    "text": "a minimum tidying up and cleaning up the failed deployment explicitly and if",
    "start": "1051710",
    "end": "1057649"
  },
  {
    "text": "everything goes wrong they wind up in this failure dirty state that's at the very very bottom there in red",
    "start": "1057649",
    "end": "1064570"
  },
  {
    "text": "where they have the opportunity to automatically page in resources humans that are gonna help tidy this up so the",
    "start": "1064570",
    "end": "1072279"
  },
  {
    "text": "pattern of interest that I would encourage you to take away from this is explicitly failing to a known state",
    "start": "1072279",
    "end": "1078370"
  },
  {
    "text": "because there's nothing worse when you're you're on a call and you're trying to figure out what's going on going on with with your system and",
    "start": "1078370",
    "end": "1085269"
  },
  {
    "text": "customers are impacted then not knowing what state you're in right you don't want to spend a bunch of time figuring",
    "start": "1085269",
    "end": "1091240"
  },
  {
    "text": "out what state you're in before you can start working on remediation and using something like stuff functions in this",
    "start": "1091240",
    "end": "1096610"
  },
  {
    "text": "way it is really helpful so the final",
    "start": "1096610",
    "end": "1102370"
  },
  {
    "start": "1099000",
    "end": "1218000"
  },
  {
    "text": "use case that I'll talk to before I hand you over to Nick comes to us from granular who is a farming technology",
    "start": "1102370",
    "end": "1108309"
  },
  {
    "text": "company and granulars business basically is making data from agricultural",
    "start": "1108309",
    "end": "1114220"
  },
  {
    "text": "equipment available to stakeholders so that they can take action on it and granular had legacy infrastructure I",
    "start": "1114220",
    "end": "1121899"
  },
  {
    "text": "know shock horror how many of you have no",
    "start": "1121899",
    "end": "1127330"
  },
  {
    "text": "legacy that you have to worry about at all you're you're perfectly free to frolic in modern application development",
    "start": "1127330",
    "end": "1133139"
  },
  {
    "text": "to entirely serve or less no legacy at all okay a couple of you the lucky ones",
    "start": "1133139",
    "end": "1142019"
  },
  {
    "text": "most of you have some legacy that you need to deal with and legacy isn't necessarily a bad thing right it's doing",
    "start": "1142019",
    "end": "1149259"
  },
  {
    "text": "something useful for you but it may not be an application that continues to evolve that much or there's not a return",
    "start": "1149259",
    "end": "1155620"
  },
  {
    "text": "on porting it to different types of technology stocks and that was the case for granular they had a piece of",
    "start": "1155620",
    "end": "1160929"
  },
  {
    "text": "software that was doing useful data transformation they don't really want to mess with it too much but they do want",
    "start": "1160929",
    "end": "1166690"
  },
  {
    "text": "to wrap it with some more modern application development technologies container based applications using",
    "start": "1166690",
    "end": "1173139"
  },
  {
    "text": "lambda where it's appropriate and so they wanted to draw this all together and this is the pattern of interest here",
    "start": "1173139",
    "end": "1179649"
  },
  {
    "text": "using stop functions for state management in a case where you have they had a row genius technology stock right",
    "start": "1179649",
    "end": "1186159"
  },
  {
    "text": "they're using Python in some cases they're using c-sharp and others Windows",
    "start": "1186159",
    "end": "1191440"
  },
  {
    "text": "servers kubernetes containers and they wanted to draw all of this into a single type of application",
    "start": "1191440",
    "end": "1197770"
  },
  {
    "text": "they did consider of course developing a homegrown solution to work history this workflow but quickly realized hey we're",
    "start": "1197770",
    "end": "1204740"
  },
  {
    "text": "a farming technology company were not necessarily in the business of developing workflow engines if we don't",
    "start": "1204740",
    "end": "1209900"
  },
  {
    "text": "have to and with step functions they were actually able to get a prototype running within a week and I'll show you",
    "start": "1209900",
    "end": "1217309"
  },
  {
    "text": "what that prototype looks like here so you can see the color coding here",
    "start": "1217309",
    "end": "1222640"
  },
  {
    "text": "indicates the different types of technologies that are present in this application",
    "start": "1222640",
    "end": "1227900"
  },
  {
    "text": "you've got Python container is running on ec2 instances you have lambda functions also written in Python and you",
    "start": "1227900",
    "end": "1234190"
  },
  {
    "text": "have some code written in C sharp and dotnet that's running on Windows servers in an auto scaling group so a pretty",
    "start": "1234190",
    "end": "1242150"
  },
  {
    "text": "pretty motley assembly of different things but it actually all presents as a single application in this one state",
    "start": "1242150",
    "end": "1248059"
  },
  {
    "text": "machine so what are they doing the very first state here is a container running",
    "start": "1248059",
    "end": "1253910"
  },
  {
    "text": "on ec2 as I said and all that one does is accepts a URL for a resource for a",
    "start": "1253910",
    "end": "1259040"
  },
  {
    "text": "file it's located in an on-premises data center and this state brings that file",
    "start": "1259040",
    "end": "1265549"
  },
  {
    "text": "into the cloud puts it into a3 the pre translate sniffer is a really simple",
    "start": "1265549",
    "end": "1270669"
  },
  {
    "text": "lambda function written in Python that determines whether a certain type of pre-processing is going to be required",
    "start": "1270669",
    "end": "1276440"
  },
  {
    "text": "and if indeed that pre-processing is required we find ourselves going down the slingshot preprocessor branch of the",
    "start": "1276440",
    "end": "1283580"
  },
  {
    "text": "state machine now slingshot is a tool that applies a certain type of transformation to the data that one",
    "start": "1283580",
    "end": "1290059"
  },
  {
    "text": "happens to be a Python container again which then hands off its output to the",
    "start": "1290059",
    "end": "1295309"
  },
  {
    "text": "translation state and this is the one that that was kind of their legacy",
    "start": "1295309",
    "end": "1300830"
  },
  {
    "text": "infrastructure it's a c-sharp application runs on Windows servers in an auto scaling group but by the way I'm",
    "start": "1300830",
    "end": "1307190"
  },
  {
    "text": "not implying that Windows that is necessarily legacy or that C shark is legacy it just happens to be the case in",
    "start": "1307190",
    "end": "1313250"
  },
  {
    "text": "this application just so we don't get into any controversy here now so so that",
    "start": "1313250",
    "end": "1320870"
  },
  {
    "text": "one does its thing and then passes its output to the transformation state which is again a container written in Python",
    "start": "1320870",
    "end": "1327250"
  },
  {
    "text": "and the really cool thing is that this all just works together right and you have a unified way to",
    "start": "1327250",
    "end": "1333370"
  },
  {
    "text": "actually troubleshoot to to debug and to reason over this application in a single",
    "start": "1333370",
    "end": "1339549"
  },
  {
    "text": "state machine now before I hand you over",
    "start": "1339549",
    "end": "1344590"
  },
  {
    "start": "1342000",
    "end": "1433000"
  },
  {
    "text": "to Nick let me just T up some of the issues and challenges that that he and his team are facing so they're at",
    "start": "1344590",
    "end": "1350919"
  },
  {
    "text": "Novartis and his job is to basically provide data to scientists and give them",
    "start": "1350919",
    "end": "1356110"
  },
  {
    "text": "a tool to run image analysis at super high scale and they were able to achieve",
    "start": "1356110",
    "end": "1361600"
  },
  {
    "text": "some pretty impressive results right they reduced cluster processing times they improved operational efficiencies",
    "start": "1361600",
    "end": "1368789"
  },
  {
    "text": "they managed to deliver a tool that delivers reliable reproducible results",
    "start": "1368789",
    "end": "1373899"
  },
  {
    "text": "to their scientists and they're able to do this do this with a really small team",
    "start": "1373899",
    "end": "1378960"
  },
  {
    "text": "so it's my pleasure to introduce you to Nick Whalen",
    "start": "1378960",
    "end": "1384029"
  },
  {
    "text": "[Applause] hi everyone I'm Nick Whalen as Andre",
    "start": "1386320",
    "end": "1394979"
  },
  {
    "text": "mentioned I work for Novartis I'll just quickly talk about who we are before I",
    "start": "1394979",
    "end": "1400049"
  },
  {
    "text": "delve into how we use step functions to solve some of these challenges so I work",
    "start": "1400049",
    "end": "1406710"
  },
  {
    "text": "for Novartis Institutes for biomedical research for purposes of brevity I'm just gonna call it Novartis essentially",
    "start": "1406710",
    "end": "1414419"
  },
  {
    "text": "where the innovation engine of Novartis so we focus on technologies that promise",
    "start": "1414419",
    "end": "1419549"
  },
  {
    "text": "to produce therapeutic breakthroughs for our customers who are the patient's consume the drugs worldwide six research",
    "start": "1419549",
    "end": "1426929"
  },
  {
    "text": "campuses 200 projects and the clinical pipeline and many more clinical trials",
    "start": "1426929",
    "end": "1432119"
  },
  {
    "text": "in progress before I jump in to the architecture and",
    "start": "1432119",
    "end": "1437429"
  },
  {
    "start": "1433000",
    "end": "1476000"
  },
  {
    "text": "step functions in general I want to talk a little bit about what we set out to do",
    "start": "1437429",
    "end": "1442979"
  },
  {
    "text": "with this application so we needed to empower the scientists to directly run",
    "start": "1442979",
    "end": "1448499"
  },
  {
    "text": "image analysis without having to depend on cluster experts we had cases where",
    "start": "1448499",
    "end": "1455179"
  },
  {
    "text": "there were five or six different scripts that almost did the same thing but they were very customized not extendable and",
    "start": "1455179",
    "end": "1462029"
  },
  {
    "text": "finally we hope that by providing this than the simplified tool it would speed up their assay development and enable",
    "start": "1462029",
    "end": "1469529"
  },
  {
    "text": "them to focus more on the science which is what their job is and not on technology or software so high content",
    "start": "1469529",
    "end": "1479070"
  },
  {
    "start": "1476000",
    "end": "1576000"
  },
  {
    "text": "screening image analysis has been around for a while but I'll just talk about the",
    "start": "1479070",
    "end": "1484409"
  },
  {
    "text": "the workflow just to give you some context so essentially if we start from",
    "start": "1484409",
    "end": "1489749"
  },
  {
    "text": "left to right we have biological and our chemical material that's placed into wells and side plates",
    "start": "1489749",
    "end": "1495590"
  },
  {
    "text": "you could have anywhere from a couple plates to a thousand and essentially for",
    "start": "1495590",
    "end": "1501899"
  },
  {
    "text": "an imaging assay each well gets imaged which produces hundreds of thousands",
    "start": "1501899",
    "end": "1508109"
  },
  {
    "text": "even millions of images across channels and wells within these wells if you're",
    "start": "1508109",
    "end": "1515039"
  },
  {
    "text": "talking about cellular data we could have anywhere from a thousand to five thousand in each whoa so the classic",
    "start": "1515039",
    "end": "1522239"
  },
  {
    "text": "feature engineer engineer approach is we detect the objects in the image and then we extract features with",
    "start": "1522239",
    "end": "1528960"
  },
  {
    "text": "from them so you could think of what is the pixel width of a nuclei or a cytoplasm these features can be anywhere",
    "start": "1528960",
    "end": "1536340"
  },
  {
    "text": "from 200 up to 5,000 so you could think of the features as the columns in the",
    "start": "1536340",
    "end": "1543360"
  },
  {
    "text": "CSV and the individual cells unique cells as the rows so it produces up to",
    "start": "1543360",
    "end": "1549060"
  },
  {
    "text": "several terabytes of tabular result data I'll get into this a little bit later",
    "start": "1549060",
    "end": "1554460"
  },
  {
    "text": "but we have a fancy cluster running AWS batch things scale up nicely",
    "start": "1554460",
    "end": "1561750"
  },
  {
    "text": "but it really doesn't matter if you can't merge these results together and provide a useable package for the",
    "start": "1561750",
    "end": "1570840"
  },
  {
    "text": "science to make decisions on and that's what we used step functions for in this case all right so the application itself",
    "start": "1570840",
    "end": "1580080"
  },
  {
    "start": "1576000",
    "end": "1614000"
  },
  {
    "text": "is pretty simple it supports two entities so you have a run which is",
    "start": "1580080",
    "end": "1587520"
  },
  {
    "text": "basically a pointer to an array of jobs and then you have your run details so in",
    "start": "1587520",
    "end": "1593970"
  },
  {
    "text": "the run details page we enable the scientists a page where they can upload",
    "start": "1593970",
    "end": "1600390"
  },
  {
    "text": "all the inputs and select their image input and submit the cluster analysis",
    "start": "1600390",
    "end": "1606150"
  },
  {
    "text": "and then they monitor the state of execution and download the results from",
    "start": "1606150",
    "end": "1611730"
  },
  {
    "text": "the UI when it's done so the architecture if we go from left to right",
    "start": "1611730",
    "end": "1619490"
  },
  {
    "start": "1614000",
    "end": "1714000"
  },
  {
    "text": "client makes a request over HTTP which it's a load balancer in a V PC I think",
    "start": "1619490",
    "end": "1626430"
  },
  {
    "text": "Andre mentioned with xylem that has a controller app we have something very similar so it's essentially a java web",
    "start": "1626430",
    "end": "1632700"
  },
  {
    "text": "service sitting on a ec2 instance and it contains the business logic to process",
    "start": "1632700",
    "end": "1639120"
  },
  {
    "text": "the request from the science and send the request to AWS batch for scaling so",
    "start": "1639120",
    "end": "1645540"
  },
  {
    "text": "in this case AWS batch will scale up load the images from s3 perform image",
    "start": "1645540",
    "end": "1652200"
  },
  {
    "text": "analysis and produce hundreds thousands hundreds of thousands of individual small CSV files we send",
    "start": "1652200",
    "end": "1661600"
  },
  {
    "text": "math messages to monitor the state of each job each worker in sqs and we",
    "start": "1661600",
    "end": "1669100"
  },
  {
    "text": "persist the state in Amazon or Ora eventually a vent will be emitted which",
    "start": "1669100",
    "end": "1676570"
  },
  {
    "text": "will be the input for our merge and post",
    "start": "1676570",
    "end": "1682030"
  },
  {
    "text": "process state machine I'll get into this a little bit but we're not just to be",
    "start": "1682030",
    "end": "1687730"
  },
  {
    "text": "clear we're not sending like a list of like a hundred thousand s3 object keys were actually sending one object key",
    "start": "1687730",
    "end": "1694000"
  },
  {
    "text": "that's a JSON that contains all the references to those individual paths on s3 as input for the merchant and post",
    "start": "1694000",
    "end": "1702040"
  },
  {
    "text": "process state machine and then finally the finalized results after they're merged and/or post processed are written",
    "start": "1702040",
    "end": "1709270"
  },
  {
    "text": "back to s3 and available for the scientists to download via the UI",
    "start": "1709270",
    "end": "1714960"
  },
  {
    "start": "1714000",
    "end": "1817000"
  },
  {
    "text": "okay so merging and post-processing state machine if we talk about this from",
    "start": "1714960",
    "end": "1721870"
  },
  {
    "text": "from top to bottom essentially we're using Python lambda and AWS patch here",
    "start": "1721870",
    "end": "1730240"
  },
  {
    "text": "so we're using lambda to make requests",
    "start": "1730240",
    "end": "1735280"
  },
  {
    "text": "to AWS bash and then we're polling for State so the first step is to actually",
    "start": "1735280",
    "end": "1740470"
  },
  {
    "text": "calculate the optimal compute requirements for each plate cart pleat plate bulk road that needs to be merged",
    "start": "1740470",
    "end": "1746890"
  },
  {
    "text": "together so you think of it as is grabbing a whole bunch of individual CSV",
    "start": "1746890",
    "end": "1752410"
  },
  {
    "text": "files and then determining what the optimal memory is needed in batch to do the work it passes those lists of",
    "start": "1752410",
    "end": "1759700"
  },
  {
    "text": "basically memory requirements compute requirements to an execution block that submits the jobs to AWS batch with the",
    "start": "1759700",
    "end": "1766870"
  },
  {
    "text": "recommended compute resources we pull over the state until all the jobs have",
    "start": "1766870",
    "end": "1773830"
  },
  {
    "text": "reached an end state and that can be either error or complete in our case we",
    "start": "1773830",
    "end": "1779800"
  },
  {
    "text": "sub we support this notion of an if-else so you'll notice the merge job array",
    "start": "1779800",
    "end": "1785650"
  },
  {
    "text": "complete and post process run so this choice state if true we'll also submit to batch and poll but",
    "start": "1785650",
    "end": "1793570"
  },
  {
    "text": "the notable differences instead of submitting to a container in AWS batch that has business logic to merge it",
    "start": "1793570",
    "end": "1799809"
  },
  {
    "text": "actually has business logic to do more statistical calculations on it as",
    "start": "1799809",
    "end": "1806110"
  },
  {
    "text": "specified by the science finally we make sure that all the jobs have reached an",
    "start": "1806110",
    "end": "1811629"
  },
  {
    "text": "end state and we validate that the paths to the result files are correct for download in the UI so here's just our",
    "start": "1811629",
    "end": "1819100"
  },
  {
    "start": "1817000",
    "end": "1829000"
  },
  {
    "text": "if-else on the Left we have we have our merging only and on the right if the scientists so chooses",
    "start": "1819100",
    "end": "1825940"
  },
  {
    "text": "we've also do some aggregation all right",
    "start": "1825940",
    "end": "1831190"
  },
  {
    "start": "1829000",
    "end": "1908000"
  },
  {
    "text": "so you're going to notice kind of a theme here with with all these sort of",
    "start": "1831190",
    "end": "1836499"
  },
  {
    "text": "sort of repeats itself but I'll call out some things here so in this first black calculate compute requirements we have a",
    "start": "1836499",
    "end": "1844299"
  },
  {
    "text": "result path that's going to a good and this is going to pass basically an array of compute requirements to the next",
    "start": "1844299",
    "end": "1850779"
  },
  {
    "text": "caller which is submit merge job array all the states here have a retry block",
    "start": "1850779",
    "end": "1858759"
  },
  {
    "text": "and because we're using lambda we're always catching the exceptions in",
    "start": "1858759",
    "end": "1863919"
  },
  {
    "text": "this case either a service exception or an S decline exception I think it's important if you're if you're new to",
    "start": "1863919",
    "end": "1869350"
  },
  {
    "text": "step functions to understand the different layers of abstraction because you're using lambda in this case to do",
    "start": "1869350",
    "end": "1875200"
  },
  {
    "text": "work to request work from another service on your behalf so there's a lot",
    "start": "1875200",
    "end": "1880299"
  },
  {
    "text": "of areas where things could go wrong in that chain both in lambda and batch the",
    "start": "1880299",
    "end": "1886210"
  },
  {
    "text": "other thing I want to call out is always use exponential back-off and retry you'll notice in the last three lines",
    "start": "1886210",
    "end": "1892690"
  },
  {
    "text": "there's an interval in seconds a max attempts and a back-off rate that's all",
    "start": "1892690",
    "end": "1898119"
  },
  {
    "text": "it took to implement exponential back-off and retry it makes it quite simple and I've seen it in action",
    "start": "1898119",
    "end": "1904049"
  },
  {
    "text": "definitely useful I definitely recommend using it so now that we've passed the",
    "start": "1904049",
    "end": "1911070"
  },
  {
    "start": "1908000",
    "end": "1943000"
  },
  {
    "text": "list of recommendations for optimal compute requirements we're actually going to submit the jobs to batch",
    "start": "1911070",
    "end": "1916990"
  },
  {
    "text": "there's nothing really different from structurally between this step and the",
    "start": "1916990",
    "end": "1922419"
  },
  {
    "text": "previous one although the next step will be a wait state because we're gonna pull so in",
    "start": "1922419",
    "end": "1928680"
  },
  {
    "text": "this case we're passing the AWS batch job IDs that get returned from the",
    "start": "1928680",
    "end": "1933870"
  },
  {
    "text": "submit job API and we're going to call AWS batch and ask for the state over and",
    "start": "1933870",
    "end": "1939510"
  },
  {
    "text": "over again until we know that they've reached end state right so the only",
    "start": "1939510",
    "end": "1945990"
  },
  {
    "start": "1943000",
    "end": "1997000"
  },
  {
    "text": "thing I want to call out here is that as we're iterating and I'll talk about it a little bit more later on in the",
    "start": "1945990",
    "end": "1953310"
  },
  {
    "text": "presentation there's a variable on the second line called wait time we found",
    "start": "1953310",
    "end": "1958410"
  },
  {
    "text": "out the hard way that if you have a long-running process there are certain limits in step functions that will kill",
    "start": "1958410",
    "end": "1966030"
  },
  {
    "text": "the execution in the middle to mitigate that we introduced this variable which",
    "start": "1966030",
    "end": "1971520"
  },
  {
    "text": "essentially spaces out the time that you iterate right so if you know that you",
    "start": "1971520",
    "end": "1977790"
  },
  {
    "text": "have a large set of files and it's going to take potentially hours you may hit",
    "start": "1977790",
    "end": "1984030"
  },
  {
    "text": "that maximum of event time of 25,000 events so you'll want to do the work",
    "start": "1984030",
    "end": "1989430"
  },
  {
    "text": "upfront to take out variables like that so you have a fine level of control when",
    "start": "1989430",
    "end": "1995190"
  },
  {
    "text": "you execute all right so that's all fine",
    "start": "1995190",
    "end": "2000560"
  },
  {
    "start": "1997000",
    "end": "2006000"
  },
  {
    "text": "and good but that's not the only place that we use stem stem functions in our workflow so by show of hands anyone",
    "start": "2000560",
    "end": "2009110"
  },
  {
    "start": "2006000",
    "end": "2167000"
  },
  {
    "text": "that's used AWS how many people have had to move data from their on-premise corporate data center into AWS somebody",
    "start": "2009110",
    "end": "2017180"
  },
  {
    "text": "at least yeah a couple of people aren't so we were faced with this with this well it was a challenge in the beginning",
    "start": "2017180",
    "end": "2023510"
  },
  {
    "text": "because there was no good way and we're using serverless technologies we're not",
    "start": "2023510",
    "end": "2028970"
  },
  {
    "text": "using traditional mount points on servers and things like that so we had to figure out a way to get large amounts",
    "start": "2028970",
    "end": "2034760"
  },
  {
    "text": "that I'm talking about terabytes and even petabytes of image data into s3 so",
    "start": "2034760",
    "end": "2040820"
  },
  {
    "text": "we built a simple state machine and if we look at this from top to bottom the",
    "start": "2040820",
    "end": "2046190"
  },
  {
    "text": "first block send plates to sqs simply sends a message actually to an sqs queue",
    "start": "2046190",
    "end": "2052280"
  },
  {
    "text": "that has a trigger and it's basically comparing the count of files that we know to exist in our",
    "start": "2052280",
    "end": "2059159"
  },
  {
    "text": "corporate data center and the count of files in s3 for us in this case a",
    "start": "2059160",
    "end": "2064379"
  },
  {
    "text": "specific plate with thousands of image in them we iterate until essentially the",
    "start": "2064380",
    "end": "2071370"
  },
  {
    "text": "count of our on-premise matches s3 and we're doing this by with a lambda that's",
    "start": "2071370",
    "end": "2079860"
  },
  {
    "text": "that's connected to the sqs Cube pulling the images and groups of let's say 50",
    "start": "2079860",
    "end": "2085110"
  },
  {
    "text": "via HTTP so it turned out to be a pretty good pattern as long as you have a network that can handle that kind of",
    "start": "2085110",
    "end": "2092190"
  },
  {
    "text": "load so that was useful another one even",
    "start": "2092190",
    "end": "2097650"
  },
  {
    "text": "simpler is we wanted to enable our scientists to subscribe to cluster run",
    "start": "2097650",
    "end": "2104160"
  },
  {
    "text": "state changes so you could think of a case where they submit something really",
    "start": "2104160",
    "end": "2109200"
  },
  {
    "text": "large and they don't want to sit there and just push refresh on their browser over and over again and watch the little",
    "start": "2109200",
    "end": "2114450"
  },
  {
    "text": "bars go to 100% these could take all day so we have",
    "start": "2114450",
    "end": "2119870"
  },
  {
    "text": "these two state machines one on the Left which creates a notification topic if",
    "start": "2119870",
    "end": "2125130"
  },
  {
    "text": "the science decides to subscribe which creates a custom SNS topic for that run",
    "start": "2125130",
    "end": "2133500"
  },
  {
    "text": "you can think of it as like HGS 100 topic or something and as the as the",
    "start": "2133500",
    "end": "2139740"
  },
  {
    "text": "array of jobs on batch are processing and we're persisting the state we're sending notifications to this state",
    "start": "2139740",
    "end": "2145620"
  },
  {
    "text": "machine if the state machine detects a notification that we've defined as an end state we will send a message to the",
    "start": "2145620",
    "end": "2153450"
  },
  {
    "text": "topic and finally return the other thing I want to call out is this step function",
    "start": "2153450",
    "end": "2158520"
  },
  {
    "text": "the state machine in particular cleans up after itself because it deletes the topic that we were created on the left so that was also kind of nifty alright",
    "start": "2158520",
    "end": "2168060"
  },
  {
    "start": "2167000",
    "end": "2255000"
  },
  {
    "text": "so some some general points I think when",
    "start": "2168060",
    "end": "2173610"
  },
  {
    "text": "I I can I can speak from personal experience when I started using step functions I thought that I could create",
    "start": "2173610",
    "end": "2181170"
  },
  {
    "text": "this massive step function that did everything in my workflow in one state machine and I'm",
    "start": "2181170",
    "end": "2187010"
  },
  {
    "text": "I'm gonna say from experience it was actually much more beneficial to decompose and have a series of smaller",
    "start": "2187010",
    "end": "2194750"
  },
  {
    "text": "state machines that did discrete tasks with far fewer steps there was a lot",
    "start": "2194750",
    "end": "2201680"
  },
  {
    "text": "easier to maintain we also have a small team that supports this there's only three people so it can become",
    "start": "2201680",
    "end": "2208460"
  },
  {
    "text": "challenging if you had this monolithic thing and it's also hard to communicate if you hand it off to somebody else as",
    "start": "2208460",
    "end": "2213950"
  },
  {
    "text": "like a thousand States another thing I recommend using s32 persistent iterate",
    "start": "2213950",
    "end": "2222200"
  },
  {
    "text": "over the large data sets so pass the object keys instead of filling up the",
    "start": "2222200",
    "end": "2227990"
  },
  {
    "text": "input to AWS step functions I believe there's a limit there Andre can baby yeah he's in the affirmative there is",
    "start": "2227990",
    "end": "2234560"
  },
  {
    "text": "some limit we avoid that by actually writing a JSON file with the references to the object keys in s3 so I definitely",
    "start": "2234560",
    "end": "2241910"
  },
  {
    "text": "recommend that and then finally kind of said this before but extract certain business",
    "start": "2241910",
    "end": "2247370"
  },
  {
    "text": "functionality by state machines so that you can easily isolate and find out what went wrong in a specific part of the",
    "start": "2247370",
    "end": "2254000"
  },
  {
    "text": "workflow so error handling it goes without saying that if you're building",
    "start": "2254000",
    "end": "2260150"
  },
  {
    "start": "2255000",
    "end": "2302000"
  },
  {
    "text": "stuff you need to understand the possible exceptions that can happen in each step but with step functions you",
    "start": "2260150",
    "end": "2265970"
  },
  {
    "text": "need to determine if you need to stop the execution altogether or if you can",
    "start": "2265970",
    "end": "2271550"
  },
  {
    "text": "recover from it it's it's dependent on the use case an example in our use cases the scientists",
    "start": "2271550",
    "end": "2278570"
  },
  {
    "text": "would rather to have rather have partial results instead of no results at all so in our case we define that even if",
    "start": "2278570",
    "end": "2285860"
  },
  {
    "text": "there's an error on one of the merging jobs we continue processing and note that error so that it gets persisted",
    "start": "2285860",
    "end": "2292600"
  },
  {
    "text": "always use exponential back-off and retry it's basically free it's three lines of code I don't know why you",
    "start": "2292600",
    "end": "2298190"
  },
  {
    "text": "wouldn't do it and always catch exceptions and do something with it and then finally know the limits don't be",
    "start": "2298190",
    "end": "2305870"
  },
  {
    "text": "like us and find out after you start building step functions use a for loop",
    "start": "2305870",
    "end": "2313250"
  },
  {
    "text": "or an iterator to iterate over large datasets and avoid hitting the maximum number of 25",
    "start": "2313250",
    "end": "2319320"
  },
  {
    "text": "thousand history events and an execution actually posted this is a screenshot from her CLI just to prove that we we",
    "start": "2319320",
    "end": "2326430"
  },
  {
    "text": "hit that on long-running executions so it's been a pleasure speaking with you I",
    "start": "2326430",
    "end": "2332310"
  },
  {
    "text": "think we'll be outside after for Q&A I'm gonna hand you back over to Andre so thank you good job thanks Nick that was",
    "start": "2332310",
    "end": "2345210"
  },
  {
    "text": "really interesting so let me ask the audience here how many of you manage or",
    "start": "2345210",
    "end": "2351180"
  },
  {
    "start": "2347000",
    "end": "2369000"
  },
  {
    "text": "lead a team take quite a few actually how many of you",
    "start": "2351180",
    "end": "2357300"
  },
  {
    "text": "super enjoy it when your boss goes directly to your team to give them direction and bypasses you anyone okay",
    "start": "2357300",
    "end": "2366510"
  },
  {
    "text": "no one I don't either thankfully I have a great boss who",
    "start": "2366510",
    "end": "2371970"
  },
  {
    "start": "2369000",
    "end": "2404000"
  },
  {
    "text": "almost never does this but there's still some part of me that wants to know when he's entering my team area potentially",
    "start": "2371970",
    "end": "2378510"
  },
  {
    "text": "to give them direction and I also want to know what sort of mood he's in and this led me to build a stuff functions",
    "start": "2378510",
    "end": "2385710"
  },
  {
    "text": "based application called the boss detector so here's the problem statement",
    "start": "2385710",
    "end": "2391770"
  },
  {
    "text": "let's know when my my boss enters the area and I'd like to know whether he's happy sad hungry tired which version of",
    "start": "2391770",
    "end": "2398610"
  },
  {
    "text": "Jessie am i dealing with and you can see the different shades of this gentleman",
    "start": "2398610",
    "end": "2404450"
  },
  {
    "start": "2404000",
    "end": "2521000"
  },
  {
    "text": "so how does this actually work well it starts off with AWS deep lens which if",
    "start": "2404450",
    "end": "2410370"
  },
  {
    "text": "you don't know is Amazon's machine learning enabled camera was launched at reinvent I believe two years ago and so",
    "start": "2410370",
    "end": "2417270"
  },
  {
    "text": "I loaded a software image into deep lens which when it detects movement at some",
    "start": "2417270",
    "end": "2423090"
  },
  {
    "text": "regular interval it will upload snapshots of the scene into s3 also",
    "start": "2423090",
    "end": "2429270"
  },
  {
    "text": "present in s3 there's a reference image of Jesse you can see his face there and and that's going to be used in a",
    "start": "2429270",
    "end": "2435480"
  },
  {
    "text": "subsequent stop now every time the new snapshot is uploaded from deep lines",
    "start": "2435480",
    "end": "2440790"
  },
  {
    "text": "into s3 this trigger is a lambda function which launches the state machine that you see here and we're",
    "start": "2440790",
    "end": "2447060"
  },
  {
    "text": "going to run through it the first state is called check notification time and this is just a way to",
    "start": "2447060",
    "end": "2453040"
  },
  {
    "text": "avoid repetitious notifications if he goes into the team area he's probably not gonna be there for just one second",
    "start": "2453040",
    "end": "2458650"
  },
  {
    "text": "so I don't want to get a notification every second I insist that 30 minutes of time passed between each notification of",
    "start": "2458650",
    "end": "2465490"
  },
  {
    "text": "Jesse's presence in the team area so if a suitable amount of time is passed then",
    "start": "2465490",
    "end": "2471160"
  },
  {
    "text": "we will move on to the detect Jesse state and in this case we upload or we",
    "start": "2471160",
    "end": "2477600"
  },
  {
    "text": "make a call into amazon recognition using two images the scene that was uploaded from deep lens and the",
    "start": "2477600",
    "end": "2484180"
  },
  {
    "text": "reference image of the person we're looking for and recognition will tell us",
    "start": "2484180",
    "end": "2489490"
  },
  {
    "text": "whether or not jesse was present in the scene and if he actually was we passed",
    "start": "2489490",
    "end": "2495460"
  },
  {
    "text": "through the choice stay it and move on to the analyse Jesse state which will analyze his facial expressions based on",
    "start": "2495460",
    "end": "2501970"
  },
  {
    "text": "the snapshot and give me an array of emotions that I may be dealing with this",
    "start": "2501970",
    "end": "2508600"
  },
  {
    "text": "is then assembled and passed on into the notify team state which makes use of Amazon SNS to send me a text message",
    "start": "2508600",
    "end": "2515650"
  },
  {
    "text": "with all the information I need to deal with this situation so here's a little",
    "start": "2515650",
    "end": "2522730"
  },
  {
    "start": "2521000",
    "end": "2559000"
  },
  {
    "text": "bit of code this is just a simple Python based lambda function that shows the detection of emotions the first couple",
    "start": "2522730",
    "end": "2530080"
  },
  {
    "text": "of lines are just setting up some variables then I make a call into amazon recognition which will return an array",
    "start": "2530080",
    "end": "2536440"
  },
  {
    "text": "of faces and emotions and I've sniffed out some of the code here but all it",
    "start": "2536440",
    "end": "2541630"
  },
  {
    "text": "actually does is it irate through this array and assemble a string of emotions",
    "start": "2541630",
    "end": "2547510"
  },
  {
    "text": "that are present with high confidence right and so this is returned ultimately",
    "start": "2547510",
    "end": "2552880"
  },
  {
    "text": "in the final statement here in the variable jadi emotion into the main state machine and we can see this in",
    "start": "2552880",
    "end": "2560590"
  },
  {
    "start": "2559000",
    "end": "2624000"
  },
  {
    "text": "action here this is the execution history I've truncated the top we start at stop 17 here and and this is how you",
    "start": "2560590",
    "end": "2568330"
  },
  {
    "text": "can actually use this to troubleshoot and debug your state machines so if you look at step 19 it's been expanded for",
    "start": "2568330",
    "end": "2574480"
  },
  {
    "text": "you and this is the output of the analyzed Jesse state and you can see a",
    "start": "2574480",
    "end": "2580270"
  },
  {
    "text": "variable called JT emotion has been returned to us and it contains the string he looks happy",
    "start": "2580270",
    "end": "2586080"
  },
  {
    "text": "which is good and then if you look a couple steps lower what we're looking at",
    "start": "2586080",
    "end": "2591900"
  },
  {
    "text": "is the task state entered execution history event for the notify team state",
    "start": "2591900",
    "end": "2599220"
  },
  {
    "text": "and you can see that the input there contains that same variable JT emotion and the string he looks happy so imagine",
    "start": "2599220",
    "end": "2606330"
  },
  {
    "text": "how easy it would be to troubleshoot something using an approach like this right you can make your way through the state machine was the input at what I",
    "start": "2606330",
    "end": "2612480"
  },
  {
    "text": "expected was the output what I expected did it get corrupted somewhere you can easily detect where you need to look for",
    "start": "2612480",
    "end": "2618720"
  },
  {
    "text": "problems it's a nice modular approach like five so let's have a look at this",
    "start": "2618720",
    "end": "2626280"
  },
  {
    "start": "2624000",
    "end": "2640000"
  },
  {
    "text": "in action this is the the culprit he has entered the team area this is a",
    "start": "2626280",
    "end": "2632900"
  },
  {
    "text": "dramatization of an upload from deep lens into s3 and if we click through",
    "start": "2632900",
    "end": "2641520"
  },
  {
    "start": "2640000",
    "end": "2653000"
  },
  {
    "text": "here and look at the output of the detection stop the part in red here shows us that yes indeed Jesse is",
    "start": "2641520",
    "end": "2647940"
  },
  {
    "text": "present in the team area the images match with ninety nine point eighty nine percent confidence and here's some of",
    "start": "2647940",
    "end": "2656040"
  },
  {
    "start": "2653000",
    "end": "2676000"
  },
  {
    "text": "the information that was returned to us when we perform the facial analysis so we won't discuss the age range but you",
    "start": "2656040",
    "end": "2662340"
  },
  {
    "text": "can see that apparently jesse is happy we have about seventy eight percent confidence in that statement there was",
    "start": "2662340",
    "end": "2669210"
  },
  {
    "text": "also an indication that he might be calm but that's low confidence so that didn't make its way into the string that was",
    "start": "2669210",
    "end": "2675300"
  },
  {
    "text": "ultimately assembled and then finally this all gets packaged up hits amazon",
    "start": "2675300",
    "end": "2680970"
  },
  {
    "start": "2676000",
    "end": "2710000"
  },
  {
    "text": "SNS and i get a text message warning jesse was in the team area but he looks",
    "start": "2680970",
    "end": "2686970"
  },
  {
    "text": "happy so we're probably good so there's there's a pretty high probability that",
    "start": "2686970",
    "end": "2692010"
  },
  {
    "text": "jesse is in one of the overflow rooms watching this so I'd appreciate it if",
    "start": "2692010",
    "end": "2697860"
  },
  {
    "text": "you give them a hand for being a good sport and submitting to this experiment",
    "start": "2697860",
    "end": "2702920"
  },
  {
    "text": "thank you and thank you Jesse now why",
    "start": "2707130",
    "end": "2712780"
  },
  {
    "text": "have I shown you this potentially career limiting example well obviously I had a",
    "start": "2712780",
    "end": "2719260"
  },
  {
    "text": "point to make see it's kind of a silly little application that didn't need an auditable execution history it probably",
    "start": "2719260",
    "end": "2727119"
  },
  {
    "text": "didn't need a whole ton of modularity or elasticity or any of the goodness that comes with stop functions and my first",
    "start": "2727119",
    "end": "2733450"
  },
  {
    "text": "instinct and maybe for most of you this would be the case as well would be to just hock something together and maybe a",
    "start": "2733450",
    "end": "2739390"
  },
  {
    "text": "single monolithic lambda function or maybe have a script running on any c2 instance somewhere and of course you",
    "start": "2739390",
    "end": "2745089"
  },
  {
    "text": "could do that but then I asked myself well what penalty do I actually pay for",
    "start": "2745089",
    "end": "2750160"
  },
  {
    "text": "doing this in a quick and clean way using stop functions rather than quick and dirty well not much it turns out I",
    "start": "2750160",
    "end": "2757930"
  },
  {
    "text": "only had to write 49 lines of Amazon State's language code most of those just",
    "start": "2757930",
    "end": "2763780"
  },
  {
    "text": "contain curly braces and other Jason artefacts I hardly edited anything except the",
    "start": "2763780",
    "end": "2769030"
  },
  {
    "text": "actual structure of the state machine and a couple of the arms that point to the lambda functions that I was using so",
    "start": "2769030",
    "end": "2775810"
  },
  {
    "text": "not a whole lot of extra typing there's a nominal cost here that you pay for the",
    "start": "2775810",
    "end": "2781000"
  },
  {
    "text": "use of stop functions it's basically to cover the expense of persisting the data you couldn't really do it much cheaper",
    "start": "2781000",
    "end": "2787270"
  },
  {
    "text": "yourself and in exchange for this I actually have an application which will now grow with me should my office",
    "start": "2787270",
    "end": "2795609"
  },
  {
    "text": "surveillance needs increase and I've got a modular architecture it's elastic it's",
    "start": "2795609",
    "end": "2801280"
  },
  {
    "text": "secure as befits a modern application I also have a traceable auditable",
    "start": "2801280",
    "end": "2807430"
  },
  {
    "text": "execution history so as my needs move from experimentation and kind of fooling",
    "start": "2807430",
    "end": "2812560"
  },
  {
    "text": "around with a little application to something that scales into production that's already there for me I've built",
    "start": "2812560",
    "end": "2818319"
  },
  {
    "text": "in error handling and Nick showed us that with just three lines of code you can leverage the retries and catch exceptions and I have a visual",
    "start": "2818319",
    "end": "2825640"
  },
  {
    "text": "representation of the overall workflow enabling me to troubleshoot it very easily",
    "start": "2825640",
    "end": "2832710"
  },
  {
    "start": "2833000",
    "end": "2870000"
  },
  {
    "text": "so I think that'll about do it for us today it's been a privilege being here with you from Nick and myself thank you",
    "start": "2833420",
    "end": "2839750"
  },
  {
    "text": "for joining us now there are a couple of step functions folks in the back of the",
    "start": "2839750",
    "end": "2845000"
  },
  {
    "text": "room they're standing around and maybe they'll give us a wave they're gonna help us take some questions Nick and I will also kind of",
    "start": "2845000",
    "end": "2851840"
  },
  {
    "text": "hang out in the room and probably in the hallway if you'd like to approach us if you want to get in touch here is how once again it's been a",
    "start": "2851840",
    "end": "2858980"
  },
  {
    "text": "privilege being with you if you have an opportunity to fill out an evaluation which are appreciate it and with that",
    "start": "2858980",
    "end": "2864110"
  },
  {
    "text": "I'll wish you an awesome reinvent [Applause]",
    "start": "2864110",
    "end": "2871949"
  }
]