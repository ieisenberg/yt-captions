[
  {
    "text": "hello everyone my name is Nathan Peck I'm a developer advocate for Amazon Web",
    "start": "2480",
    "end": "7710"
  },
  {
    "text": "Services and the container services division and today I'm going to present on architectures and strategies for",
    "start": "7710",
    "end": "14009"
  },
  {
    "text": "building modern applications on AWS so let's start with some level setting what",
    "start": "14009",
    "end": "20279"
  },
  {
    "text": "is a modern application so let's consider some characteristics of a",
    "start": "20279",
    "end": "26279"
  },
  {
    "text": "modern application the first is that it's container based and the reason why",
    "start": "26279",
    "end": "32369"
  },
  {
    "text": "this is important is well we'll discuss this in more detail but containers offer you a way to have reproducibility",
    "start": "32369",
    "end": "39590"
  },
  {
    "text": "transparency and resource isolation in your architecture and we'll go into how",
    "start": "39590",
    "end": "44879"
  },
  {
    "text": "to actually deploy this in a modern application stack second key primitive",
    "start": "44879",
    "end": "51030"
  },
  {
    "text": "of a modern application is this dynamically managed so in the old days a lot of times when you ran an application",
    "start": "51030",
    "end": "57059"
  },
  {
    "text": "you would put it on a box that was in a server server room somewhere or in a closet somewhere and it was sit there",
    "start": "57059",
    "end": "63660"
  },
  {
    "text": "24/7 for maybe even years the new modern application stack though is much more",
    "start": "63660",
    "end": "69930"
  },
  {
    "text": "dynamic we actually have applications that scale up and down they run for a few hours and",
    "start": "69930",
    "end": "75810"
  },
  {
    "text": "they shut down as something else runs on the server stack that used to be running the application and then the third one",
    "start": "75810",
    "end": "83729"
  },
  {
    "text": "the third primitive of a modern application is this micro service-oriented and we'll talk about",
    "start": "83729",
    "end": "89520"
  },
  {
    "text": "some of the benefits of micro services and the reason why this is a core aspect of building a modern application but",
    "start": "89520",
    "end": "95640"
  },
  {
    "text": "just to summarize micro services they give you the ability to limit the blast",
    "start": "95640",
    "end": "100950"
  },
  {
    "text": "radius of any bugs they allow your organization to develop code faster and more reliably and get features out the",
    "start": "100950",
    "end": "107009"
  },
  {
    "text": "door more quickly than if you were not using micro services so summarizing",
    "start": "107009",
    "end": "114360"
  },
  {
    "text": "these three different characteristics of the modern application I want to actually change that term modern to",
    "start": "114360",
    "end": "120149"
  },
  {
    "text": "cloud native many of you are probably familiar with the cloud native computing foundation these three primitives are",
    "start": "120149",
    "end": "126750"
  },
  {
    "text": "actually core prunus of the cloud native computing foundation as description of a modern application stack as well",
    "start": "126750",
    "end": "133100"
  },
  {
    "text": "so a modern application is primarily first a cloud native application",
    "start": "133100",
    "end": "139750"
  },
  {
    "text": "building cloud native has a lot of very significant benefits for your application I want to go over three in",
    "start": "140350",
    "end": "146960"
  },
  {
    "text": "particular though the first is speed so when I'm developing a new application stack or a new feature what is the time",
    "start": "146960",
    "end": "154010"
  },
  {
    "text": "to value the time from here's my idea to here's my idea actually running and",
    "start": "154010",
    "end": "159650"
  },
  {
    "text": "giving value to me into my customers and the people who are keeping my business",
    "start": "159650",
    "end": "164830"
  },
  {
    "text": "supporting additionally how fast can the team innovate when circumstance has",
    "start": "164830",
    "end": "170690"
  },
  {
    "text": "changed so let's say your organization needs to pivot or customers are asking for a new feature to be added to the",
    "start": "170690",
    "end": "176780"
  },
  {
    "text": "application how fast can you actually answer those demands of the market when",
    "start": "176780",
    "end": "181880"
  },
  {
    "text": "you need to and a cloud native application should have the ability to scale so once again this is a request",
    "start": "181880",
    "end": "191870"
  },
  {
    "text": "from the market a demand from the market that the application that started out maybe just running on a few servers",
    "start": "191870",
    "end": "197650"
  },
  {
    "text": "maybe now it has tens of thousands of users that are using it constantly and concurrently and we need to be able to",
    "start": "197650",
    "end": "203630"
  },
  {
    "text": "scale to handle any load at any time and then third the cloud native application",
    "start": "203630",
    "end": "209510"
  },
  {
    "text": "is resilient so it's capable of responding to all sorts of different disaster scenarios they may pop up all",
    "start": "209510",
    "end": "215810"
  },
  {
    "text": "sorts of cases where maybe someone is trying to attack the application with a denial of service attack or someone",
    "start": "215810",
    "end": "222100"
  },
  {
    "text": "pushed a bad code to the application and the part of the application stack is at",
    "start": "222100",
    "end": "227540"
  },
  {
    "text": "risk of crashing maybe as a memory leak a cloud native application is capable of being resilient",
    "start": "227540",
    "end": "232790"
  },
  {
    "text": "even under these less than positive circumstances so let's look at the",
    "start": "232790",
    "end": "238340"
  },
  {
    "text": "building blocks that bring about that speed that scale and that resiliency key",
    "start": "238340",
    "end": "243890"
  },
  {
    "text": "building box for success in the cloud native environment all starts with containers and functions so the old sort",
    "start": "243890",
    "end": "253040"
  },
  {
    "text": "of model of thinking about application was thinking about it the application as code but in the modern stack we",
    "start": "253040",
    "end": "258200"
  },
  {
    "text": "recognized that an application may start with code but does not compose solely of code for example let's say you're",
    "start": "258200",
    "end": "265430"
  },
  {
    "text": "running a PI application you're going to need to have your Python interpreter an OGS",
    "start": "265430",
    "end": "270449"
  },
  {
    "text": "application the same thing many modern applications have a full stack that has dependencies a runtime engine in",
    "start": "270449",
    "end": "278729"
  },
  {
    "text": "addition to the code and all these components fit together and they need to be the right versions they need to",
    "start": "278729",
    "end": "284820"
  },
  {
    "text": "interact with each other correctly and so when it comes to building this application you can't just stop at the",
    "start": "284820",
    "end": "290250"
  },
  {
    "text": "code you have to consider not only the code but the environment that's necessary for that code to run and you need a way to package that code up in a",
    "start": "290250",
    "end": "297930"
  },
  {
    "text": "way that will produce consistent results when you go to execute it and so this is what a container and a function",
    "start": "297930",
    "end": "303780"
  },
  {
    "text": "serverless function for example and lambda offers so we're going to go into how containers and functions can benefit",
    "start": "303780",
    "end": "311010"
  },
  {
    "text": "your organization and different tools for running them on AWS the second key",
    "start": "311010",
    "end": "316380"
  },
  {
    "text": "building block for cloud native modern application is the cloud itself so we're going to talk about some of the benefits",
    "start": "316380",
    "end": "321840"
  },
  {
    "text": "of the cloud relative to traditional data center deployments and we're going",
    "start": "321840",
    "end": "327419"
  },
  {
    "text": "to talk about how it's important to actually use the cloud to its fullest capability you can't just lift and shift",
    "start": "327419",
    "end": "332910"
  },
  {
    "text": "and then not actually take advantage of the capabilities of the cloud if you want to have that successful modern",
    "start": "332910",
    "end": "338729"
  },
  {
    "text": "application stack and then third is there's the actual people aspect so it's",
    "start": "338729",
    "end": "344490"
  },
  {
    "text": "one thing to have the containers and function is running in the cloud but you have to have the people who are capable of running these containers and",
    "start": "344490",
    "end": "351330"
  },
  {
    "text": "functions making sure that they are high quality and really feeling a sense of responsibility for the entire stack so",
    "start": "351330",
    "end": "357660"
  },
  {
    "text": "we're going to go into each of these three areas but first let's start with those containers and functions so a lot",
    "start": "357660",
    "end": "367080"
  },
  {
    "text": "of you have probably heard of the ten times developer the 10x the 10x R if you will and this is kind of the legend",
    "start": "367080",
    "end": "373710"
  },
  {
    "text": "perhaps maybe it's based partly on fact maybe it's maybe it's just an exaggeration but the idea that there can",
    "start": "373710",
    "end": "379440"
  },
  {
    "text": "be an engineer who is so much more effective than his or her peers that they can produce as much value as 10 of",
    "start": "379440",
    "end": "385050"
  },
  {
    "text": "their peers but what if I told you that there was a 440 exer so in a recent",
    "start": "385050",
    "end": "393320"
  },
  {
    "text": "puppet state of the DevOps report they found that vast companies",
    "start": "393320",
    "end": "398650"
  },
  {
    "text": "our 440 times faster than the slowest companies and this massive gap and",
    "start": "398650",
    "end": "407410"
  },
  {
    "text": "capability and speed goes across a number of different stats so in terms of",
    "start": "407410",
    "end": "413680"
  },
  {
    "text": "code deployments we see fast companies have 46 times more frequent code deployments that 440 times number it",
    "start": "413680",
    "end": "421150"
  },
  {
    "text": "comes from the lead time from commit to deploy so a programmer writes code and can miss it into the codebase the fast",
    "start": "421150",
    "end": "428290"
  },
  {
    "text": "companies get that code out to customers 440 times faster than the slowest companies fast companies when they have",
    "start": "428290",
    "end": "436780"
  },
  {
    "text": "downtime when something has gone wrong with their system there are 96 times faster to bring that system back up and",
    "start": "436780",
    "end": "442780"
  },
  {
    "text": "back on line for their customers and then this is also a very important trait they have five times lower change",
    "start": "442780",
    "end": "449169"
  },
  {
    "text": "failure rate so whenever they make a change to the system to add a new feature to add revise the feature update",
    "start": "449169",
    "end": "455229"
  },
  {
    "text": "something their changes are 1/5 as likely to fail and bring things down for their customers so when you see this",
    "start": "455229",
    "end": "462520"
  },
  {
    "text": "test you can see that there's this wide range of capabilities and that's because there's such a wide range of different technology and use and different tools",
    "start": "462520",
    "end": "469539"
  },
  {
    "text": "for deploying that technology and building those technology stacks and this really puts things in perspective especially in the Silicon Valley area it",
    "start": "469539",
    "end": "476650"
  },
  {
    "text": "helps you understand how in some cases these small startups that are using a stack that allows them to be 440 times",
    "start": "476650",
    "end": "483310"
  },
  {
    "text": "faster or able to compete against large established companies that maybe don't have the same efficient modern",
    "start": "483310",
    "end": "490180"
  },
  {
    "text": "application architecture the core to",
    "start": "490180",
    "end": "495760"
  },
  {
    "text": "success at being that 440 times faster company is that of shipping features and",
    "start": "495760",
    "end": "501250"
  },
  {
    "text": "not just code and there's a lot of different ways that this applies to how you go about the development cycle but",
    "start": "501250",
    "end": "508300"
  },
  {
    "text": "we highlighted how containers and lambda functions are a key portion of that very",
    "start": "508300",
    "end": "517110"
  },
  {
    "text": "beginning of the Marne application architecture stack because it's more than just the code it is the entire",
    "start": "517110",
    "end": "522729"
  },
  {
    "text": "application stack as a component that you can deploy and because the container",
    "start": "522729",
    "end": "529480"
  },
  {
    "text": "contains more than just the code it has everything that you need for a particular feature and what we find with",
    "start": "529480",
    "end": "535329"
  },
  {
    "text": "organizations that deploy containers and lambdas is that they have this ability to have a reproducible stack have the",
    "start": "535329",
    "end": "541420"
  },
  {
    "text": "ability to rollback and they have the ability to know that the code that works",
    "start": "541420",
    "end": "547060"
  },
  {
    "text": "locally on their local machine is going to work in the staging environment it's going to work on the production environment and the feature actually",
    "start": "547060",
    "end": "552250"
  },
  {
    "text": "makes it through the pipeline not just a specific code commit the feature encompasses the entire stack including",
    "start": "552250",
    "end": "558339"
  },
  {
    "text": "the runtime and the the dependencies so let's look at a graph about how",
    "start": "558339",
    "end": "565180"
  },
  {
    "text": "containers enable fast deployments you'll see this graph is very interesting from 2014 2015 then through",
    "start": "565180",
    "end": "573339"
  },
  {
    "text": "2016 and 17 you see a tremendous gap develops between the high performers and",
    "start": "573339",
    "end": "580360"
  },
  {
    "text": "how many deployments that they do per year and the low performers and how many deployments they do per year so back in",
    "start": "580360",
    "end": "587380"
  },
  {
    "text": "2015 high performers only really had about four times as many deployments per year as the the high performers only had",
    "start": "587380",
    "end": "595449"
  },
  {
    "text": "about four times as many as the low performers that you've seen in 2016 that gap widens significantly and so why that",
    "start": "595449",
    "end": "602350"
  },
  {
    "text": "happened well we started to see in 2016 2017 wide adoption of containers across",
    "start": "602350",
    "end": "608889"
  },
  {
    "text": "many different organizations and so containers enable fast appointments because it gives you this reliability",
    "start": "608889",
    "end": "614649"
  },
  {
    "text": "this ability to know that I've built my container and I'm able to push out across all these different environments",
    "start": "614649",
    "end": "619959"
  },
  {
    "text": "very quickly and very reliably that also goes to how changes can be immutable and",
    "start": "619959",
    "end": "626110"
  },
  {
    "text": "rolled back so for example look at this graph on the left that's the mean time to recover if you were to push a comb",
    "start": "626110",
    "end": "633790"
  },
  {
    "text": "code in a container to your environment and that code was buggy and was causing",
    "start": "633790",
    "end": "639519"
  },
  {
    "text": "crashes how fast can you recover from a failure and you'll see that this massive",
    "start": "639519",
    "end": "644980"
  },
  {
    "text": "gap developed in 2017 between high performers and low performers now does it does this mean the engineers somehow",
    "start": "644980",
    "end": "651610"
  },
  {
    "text": "got worse in 2017 at the low performing companies it actually means that more",
    "start": "651610",
    "end": "659079"
  },
  {
    "text": "and more companies began adopting these modern practices that allow them to become hype former's and so now that gap that gap",
    "start": "659079",
    "end": "666290"
  },
  {
    "text": "has widened in the long tail of extremely low performers has become even more evident in 2017 than it was in 2016",
    "start": "666290",
    "end": "675190"
  },
  {
    "text": "companies are migrants and containers in order to get that mean time to recover down and or to benefit from the",
    "start": "675190",
    "end": "682220"
  },
  {
    "text": "advantages of that modern sack once again you see the same thing with change failure rate the company is that our",
    "start": "682220",
    "end": "688610"
  },
  {
    "text": "high performers have much lower failure when they do an update to their system",
    "start": "688610",
    "end": "693640"
  },
  {
    "text": "so this leads into the cloud native principle number one which is that a cloud native application enables a high",
    "start": "693640",
    "end": "701240"
  },
  {
    "text": "functioning organization to build and ship features faster and the reason why they're able to build and ship features",
    "start": "701240",
    "end": "707240"
  },
  {
    "text": "faster is because they're using modern tools such as containers and lambdas that give them reliability that give",
    "start": "707240",
    "end": "712670"
  },
  {
    "text": "them the confidence that they need to actually build things and get them deployed to their production environment",
    "start": "712670",
    "end": "718850"
  },
  {
    "text": "without worrying about it breaking everything so now moving on to the",
    "start": "718850",
    "end": "725330"
  },
  {
    "text": "second key building block for success in a modern application of stack that is",
    "start": "725330",
    "end": "730640"
  },
  {
    "text": "the cloud and when the cloud and cloud",
    "start": "730640",
    "end": "736130"
  },
  {
    "text": "adoption was first beginning a lot of companies felt that they could just take whatever they were running their local",
    "start": "736130",
    "end": "741470"
  },
  {
    "text": "data center and just move it directly into the Amazon Cloud into VMs and just",
    "start": "741470",
    "end": "747320"
  },
  {
    "text": "do one for one copy of how the architecture worked in their local data center but they quickly found that they",
    "start": "747320",
    "end": "754100"
  },
  {
    "text": "didn't have all the same benefits that they expected compared to organizations",
    "start": "754100",
    "end": "759440"
  },
  {
    "text": "that built from the ground up in Orcs they could take advantage of the features of the cloud and there's a",
    "start": "759440",
    "end": "764450"
  },
  {
    "text": "number of those features that I want to highlight the first is pay-as-you-go the",
    "start": "764450",
    "end": "770029"
  },
  {
    "text": "cloud allows you to only pay for the resources that you use the second is self-service the cloud allows you to",
    "start": "770029",
    "end": "777890"
  },
  {
    "text": "spin things up without needing to be responsible for waiting on someone else",
    "start": "777890",
    "end": "783170"
  },
  {
    "text": "you don't have to wait on someone else to answer your requests you talk to an API and you get what you need and then",
    "start": "783170",
    "end": "789470"
  },
  {
    "text": "it's elastic you can use what you need and then you can shut down what you don't need so let's look at the story",
    "start": "789470",
    "end": "795890"
  },
  {
    "text": "going back the dark ages of the data center native architecture it used to require that you",
    "start": "795890",
    "end": "802140"
  },
  {
    "text": "would have a facility either you build it or you rent it and you would have to purchase these servers and actually move",
    "start": "802140",
    "end": "809640"
  },
  {
    "text": "them into the datacenter and once they were in there you would need to maintain them they would need power and cooling",
    "start": "809640",
    "end": "816029"
  },
  {
    "text": "and and cleaning even you don't want those cobwebs or cobwebs on your servers",
    "start": "816029",
    "end": "821660"
  },
  {
    "text": "and they lived for years it was very hard to innovate when you were tied to",
    "start": "821660",
    "end": "828450"
  },
  {
    "text": "an expensive server that you purchase and that you now need to use for the next three years so this led to the",
    "start": "828450",
    "end": "835140"
  },
  {
    "text": "cloud migration where people began moving their things out of the data center into the cloud and one of the",
    "start": "835140",
    "end": "841589"
  },
  {
    "text": "core reasons why they did that was because the old data centers you had to",
    "start": "841589",
    "end": "846810"
  },
  {
    "text": "pay up front and you would depreciate that value of the next three years in the cloud you pay a month later for the",
    "start": "846810",
    "end": "853620"
  },
  {
    "text": "number of seconds that you actually used in that last month and so what this allows you to do leads into the cloud",
    "start": "853620",
    "end": "861000"
  },
  {
    "text": "native principle number two which is this modern application stack if it's a modern application you only pay for what",
    "start": "861000",
    "end": "867900"
  },
  {
    "text": "you use last month not what you guess that you're going to need in the next year what this allows you to do is allows you to make decisions faster you",
    "start": "867900",
    "end": "875250"
  },
  {
    "text": "don't have to sit down and plan out where you think the business will be in the next year you can rather plan out",
    "start": "875250",
    "end": "882990"
  },
  {
    "text": "where you want the business to be in the next week and you can provision the resources that you need for that week and you can shut them down when you",
    "start": "882990",
    "end": "889530"
  },
  {
    "text": "don't need to and you don't have to worry about well we bought a lot of expensive servers and then turned out we didn't need them all of this allows your",
    "start": "889530",
    "end": "898830"
  },
  {
    "text": "teams to experiment and fail fast without significant investment you don't",
    "start": "898830",
    "end": "903930"
  },
  {
    "text": "have any sunk cost you don't have any regrets if you run a new stack for a month as a test and it doesn't work out",
    "start": "903930",
    "end": "910920"
  },
  {
    "text": "you just move back to the old stack again or you try something else and you only pay for what you used in that one",
    "start": "910920",
    "end": "918000"
  },
  {
    "text": "month now another aspect of the old system before the cloud was when you",
    "start": "918000",
    "end": "925709"
  },
  {
    "text": "wanted architecture you wanted services you wanted machines to use for building",
    "start": "925709",
    "end": "930839"
  },
  {
    "text": "your application you had to file tickets and wait for every step after all if you can actually order a physical Hardware server you're",
    "start": "930839",
    "end": "938590"
  },
  {
    "text": "gonna have to order it's going to take time to ship it's going to take time to install it's gonna time take time to",
    "start": "938590",
    "end": "943600"
  },
  {
    "text": "make sure that it's actually working and getting cooled properly in electricity network in many cases this would take",
    "start": "943600",
    "end": "950500"
  },
  {
    "text": "days or even weeks in the cloud native architecture everything is self-service",
    "start": "950500",
    "end": "957550"
  },
  {
    "text": "and on-demand people can interact with an API and get what they need when they need it within minutes so the reason why this is",
    "start": "957550",
    "end": "964450"
  },
  {
    "text": "important is not just because it's more convenient and to be able to get things fast but it's important to make sure the",
    "start": "964450",
    "end": "971500"
  },
  {
    "text": "organization is actually taking advantage of this to its fullest",
    "start": "971500",
    "end": "976510"
  },
  {
    "text": "some organizations they're too used to this kind of slow process of dealing with filing tickets and so they end up",
    "start": "976510",
    "end": "983110"
  },
  {
    "text": "adopting that same type of mentality when it comes to the cloud and setting up for example someone who's whose",
    "start": "983110",
    "end": "989410"
  },
  {
    "text": "operations who's in charge of setting up the architecture and you need to file a ticket with them in order to set up",
    "start": "989410",
    "end": "995710"
  },
  {
    "text": "something on your a to base account and they end up introducing this negative aspect of the old on-premise",
    "start": "995710",
    "end": "1002510"
  },
  {
    "text": "architecture into the cloud and actually holding the developers back so cloud",
    "start": "1002510",
    "end": "1008400"
  },
  {
    "text": "native principle number three is that a modern application architecture that's",
    "start": "1008400",
    "end": "1013770"
  },
  {
    "text": "cloud native is going to enable all their developers to do things via api's and automation",
    "start": "1013770",
    "end": "1019550"
  },
  {
    "text": "you shouldn't have request tickets in order to get something accomplished you should have everything you need at your",
    "start": "1019550",
    "end": "1025319"
  },
  {
    "text": "fingertips and the permissions you need to create what you need and the tools",
    "start": "1025320",
    "end": "1030449"
  },
  {
    "text": "empower your teams to work without being blocked another major characteristic of",
    "start": "1030449",
    "end": "1039780"
  },
  {
    "text": "a modern application is its use of elasticity in the cloud so old-school",
    "start": "1039780",
    "end": "1045780"
  },
  {
    "text": "datacenters it was hard to get over 10% utilization on those data centers because occasionally there would be a",
    "start": "1045780",
    "end": "1052530"
  },
  {
    "text": "huge peak and when that happened you needed to have lots of spare capacity to absorb it but the rest of the time you",
    "start": "1052530",
    "end": "1058680"
  },
  {
    "text": "didn't eat that capacity and so you ended up running at maybe 10% utilization now compare that with the cloud where",
    "start": "1058680",
    "end": "1065600"
  },
  {
    "text": "most organizations are able to get up to 40% utilization in some cases I've",
    "start": "1065600",
    "end": "1071450"
  },
  {
    "text": "talked to customers that say they get 80% utilization on their instances the reason why they're able to do this is",
    "start": "1071450",
    "end": "1076760"
  },
  {
    "text": "because they're confident whenever they need another instance to run their application on they can just add it to",
    "start": "1076760",
    "end": "1082250"
  },
  {
    "text": "the pool of available resources and when they don't need it they can remove it and they can play much closer to that",
    "start": "1082250",
    "end": "1089330"
  },
  {
    "text": "margin when they want to and this has some significant benefits it's a reason",
    "start": "1089330",
    "end": "1095840"
  },
  {
    "text": "why it's cloud native principle number four a modern application is able to turn off when it's idle it's able to",
    "start": "1095840",
    "end": "1102679"
  },
  {
    "text": "scale to workloads of any size you're able to get much higher utilization out of the resources that you do provision",
    "start": "1102679",
    "end": "1109730"
  },
  {
    "text": "for that application and all this adds up to be a huge cost savings you don't",
    "start": "1109730",
    "end": "1116270"
  },
  {
    "text": "spend nearly as much money when you have fewer resources and higher utilized resources a cloud native application",
    "start": "1116270",
    "end": "1125539"
  },
  {
    "text": "should also be resilient and there's a few aspects to overselling application",
    "start": "1125539",
    "end": "1132620"
  },
  {
    "text": "one of them is the blast radius when something bad does happen how do I stop it from cascading and taking other",
    "start": "1132620",
    "end": "1138559"
  },
  {
    "text": "things down well the answer that is loose coupling and geographic",
    "start": "1138559",
    "end": "1143720"
  },
  {
    "text": "distribution so we'll talk about what these aspects mean in the cloud native architecture so blast radius is",
    "start": "1143720",
    "end": "1151159"
  },
  {
    "text": "something that is really enabled by micro services with the micro service you're able to take one of your business",
    "start": "1151159",
    "end": "1158030"
  },
  {
    "text": "components one of your business features and it becomes its own specific service",
    "start": "1158030",
    "end": "1163460"
  },
  {
    "text": "which is independent of other services and when it does need to communicate with other services it does so through",
    "start": "1163460",
    "end": "1168740"
  },
  {
    "text": "loose cook loose coupling rather than having a hard dependency it should be capable of disconnecting from the other",
    "start": "1168740",
    "end": "1174919"
  },
  {
    "text": "services when needed and continue to operate to the best of its ability even when conditions are not ideal now what",
    "start": "1174919",
    "end": "1182360"
  },
  {
    "text": "this allows you to do is allows your teams to move quickly and independently when they're deploying code so ideally",
    "start": "1182360",
    "end": "1188600"
  },
  {
    "text": "in a loosely coupled micro service environment a service team is responsible for delivering a feature",
    "start": "1188600",
    "end": "1194570"
  },
  {
    "text": "could actually deliver that microservice prior to its other",
    "start": "1194570",
    "end": "1200050"
  },
  {
    "text": "dependencies coming online because of loose coupling so perhaps the service comes online and only one or two of its",
    "start": "1200050",
    "end": "1206620"
  },
  {
    "text": "appendices are available it will continue to talk to those two dependencies and gracefully fail out",
    "start": "1206620",
    "end": "1214630"
  },
  {
    "text": "things that it's not yet available and so this ends up with a very interesting architecture where a team is able to",
    "start": "1214630",
    "end": "1221350"
  },
  {
    "text": "deploy as soon as their pieces ready and then as the other pieces come online the",
    "start": "1221350",
    "end": "1226990"
  },
  {
    "text": "connections between them are established and the feature is actually able to reach its full maturity once all",
    "start": "1226990",
    "end": "1233050"
  },
  {
    "text": "dependencies are available additionally this micro service architecture ties",
    "start": "1233050",
    "end": "1239350"
  },
  {
    "text": "into blast radius because if a bad code commit is pushed to one of those services and it does start to fail it",
    "start": "1239350",
    "end": "1246430"
  },
  {
    "text": "goes down the other services continue to work because they're isolating because they have that loose coupling and",
    "start": "1246430",
    "end": "1253950"
  },
  {
    "text": "microservices tie in very nicely with geographic distribution so Edom is",
    "start": "1253950",
    "end": "1259420"
  },
  {
    "text": "currently has 18 regions 53 availability zones there's this capability to deploy",
    "start": "1259420",
    "end": "1265000"
  },
  {
    "text": "micro services in different places where they're as close as possible to the end",
    "start": "1265000",
    "end": "1270520"
  },
  {
    "text": "user and one of the interesting powers we're seeing is some things are very hard to geographically distribute other",
    "start": "1270520",
    "end": "1276250"
  },
  {
    "text": "things aren't but micro services allow you to distribute the things that are easy to distribute to the different",
    "start": "1276250",
    "end": "1283390"
  },
  {
    "text": "regions and then keep the things that are hard to do regretfully distribute perhaps in a central region which is the",
    "start": "1283390",
    "end": "1290320"
  },
  {
    "text": "brains of the entire worldwide operation but because you're using micro services you don't have to worry about",
    "start": "1290320",
    "end": "1295570"
  },
  {
    "text": "distributing everything to every region but you can distribute maybe something that's this client facing like maybe",
    "start": "1295570",
    "end": "1301480"
  },
  {
    "text": "there's a lightweight messaging system that's responsible for having a WebSocket connection to get RPC messages",
    "start": "1301480",
    "end": "1308830"
  },
  {
    "text": "from a client to another client quickly that part could be distributed worldwide",
    "start": "1308830",
    "end": "1314190"
  },
  {
    "text": "while your core API which maybe handles user accounts is in one region micro",
    "start": "1314190",
    "end": "1320230"
  },
  {
    "text": "services allow you to take full advantage of these regions rather than worrying about every single piece being",
    "start": "1320230",
    "end": "1327100"
  },
  {
    "text": "geographically distributed you can distribute the things that you do want to should be when you want to distribute them so cloud native",
    "start": "1327100",
    "end": "1334090"
  },
  {
    "text": "principle number five use microservices basically they reduce the blast rate",
    "start": "1334090",
    "end": "1339190"
  },
  {
    "text": "radius they improve your mean time to recovery when there is an issue and they",
    "start": "1339190",
    "end": "1345820"
  },
  {
    "text": "help you to establish a globally distributed deployment model by making",
    "start": "1345820",
    "end": "1351220"
  },
  {
    "text": "it easier to distribute only one piece of your application when you need to",
    "start": "1351220",
    "end": "1356550"
  },
  {
    "text": "moving on to the third key building block for success in a modern application architecture that's the",
    "start": "1359340",
    "end": "1364870"
  },
  {
    "text": "people it's the culture of the organization the container and functions",
    "start": "1364870",
    "end": "1370480"
  },
  {
    "text": "the cloud they're all great but you need great people who will actually be able",
    "start": "1370480",
    "end": "1376120"
  },
  {
    "text": "to make use of these things to their fullest and 1% a few different ideas",
    "start": "1376120",
    "end": "1381490"
  },
  {
    "text": "about how this can work the first is comes from Adrian Adrian",
    "start": "1381490",
    "end": "1386800"
  },
  {
    "text": "Cockroft he's currently working as the VP of cloud architecture strategy at APs and he said you don't add innovation to",
    "start": "1386800",
    "end": "1393430"
  },
  {
    "text": "a culture you get out of its way and so the idea behind this is that you can't",
    "start": "1393430",
    "end": "1399310"
  },
  {
    "text": "force a culture you can't force an organization to be innovative but you can look for what is stopping innovation",
    "start": "1399310",
    "end": "1405520"
  },
  {
    "text": "what's holding people back from innovating because at the core most organizations do want to innovate they",
    "start": "1405520",
    "end": "1411250"
  },
  {
    "text": "do want to update and use new things but something is holding them back let's",
    "start": "1411250",
    "end": "1417100"
  },
  {
    "text": "look at a couple more ideas this is one thing that may be holding people back it's the idea of Conway's law that a",
    "start": "1417100",
    "end": "1423700"
  },
  {
    "text": "team will build software that matches their organizational structure so if",
    "start": "1423700",
    "end": "1429190"
  },
  {
    "text": "your organization is very top down it's very tiered there's a lot of layers of business communication they go into any",
    "start": "1429190",
    "end": "1436450"
  },
  {
    "text": "decision it's likely that what ends up being built is a very heavily tiered",
    "start": "1436450",
    "end": "1441550"
  },
  {
    "text": "application that has a lot of layers has a lot of communication back up and down those layers on the flipside if your",
    "start": "1441550",
    "end": "1449710"
  },
  {
    "text": "business organization can put is composed of small agile teams that are able to build independently you're going",
    "start": "1449710",
    "end": "1455860"
  },
  {
    "text": "to end up with a team that is very successful at building micro services so what Conway's law means is that",
    "start": "1455860",
    "end": "1463040"
  },
  {
    "text": "when you go to look at how you want to build your architecture you have to also consider how the team structure works",
    "start": "1463040",
    "end": "1468470"
  },
  {
    "text": "and make sure that those two match each other because the large monolithic organizational strategy will have a hard",
    "start": "1468470",
    "end": "1474830"
  },
  {
    "text": "time building micro-services and conversely small agile teams will have a hard time building a successful model if",
    "start": "1474830",
    "end": "1480650"
  },
  {
    "text": "you need to make sure that the organizational pattern matches the software pattern they're trying to develop the next idea for culture comes",
    "start": "1480650",
    "end": "1489740"
  },
  {
    "text": "from Werner Vogel's who you probably saw at the keynote this morning you build it you run it so this came about early on",
    "start": "1489740",
    "end": "1497900"
  },
  {
    "text": "in Amazon and Amazon Web Services with the idea that any team that is building",
    "start": "1497900",
    "end": "1504980"
  },
  {
    "text": "something should also be responsible for the operational details of how that thing gets run and the reason for that",
    "start": "1504980",
    "end": "1511760"
  },
  {
    "text": "is that engineers like to produce good code but sometimes if they're not in",
    "start": "1511760",
    "end": "1519200"
  },
  {
    "text": "charge of operations as well they won't have visibility into what's really going on with their application you end up",
    "start": "1519200",
    "end": "1524960"
  },
  {
    "text": "with a disconnect if you have engineers who are working on software and then you have an operation of seeing this",
    "start": "1524960",
    "end": "1530179"
  },
  {
    "text": "responsible for deploying it and managing it in production then the operations team could be seeing",
    "start": "1530179",
    "end": "1535340"
  },
  {
    "text": "significant performance issues and crashes and issues that are stopping that application from being successful",
    "start": "1535340",
    "end": "1542630"
  },
  {
    "text": "to customers but the engineering team isn't necessarily in the loop about that or if they are there's a delay it could",
    "start": "1542630",
    "end": "1549320"
  },
  {
    "text": "take days before the engineer team is able to fix an issue with the you bill that you run it a style of software",
    "start": "1549320",
    "end": "1558140"
  },
  {
    "text": "organizational strategy the engineers are actually put on the pager they're actually on rotation whenever something",
    "start": "1558140",
    "end": "1565040"
  },
  {
    "text": "goes wrong with this software component they're notified right away so this is something we'd evolved and we used",
    "start": "1565040",
    "end": "1571490"
  },
  {
    "text": "extensively at Amazon even managers are on the pager and they get paged whenever",
    "start": "1571490",
    "end": "1576530"
  },
  {
    "text": "there's an issue with availability or crashes with a service at Amazon Web",
    "start": "1576530",
    "end": "1583640"
  },
  {
    "text": "Services works very fantastically to make sure that engineers will deliver",
    "start": "1583640",
    "end": "1589850"
  },
  {
    "text": "high quality code and make sure that they are able to fix issues as quickly as possible",
    "start": "1589850",
    "end": "1595250"
  },
  {
    "text": "the next idea I want to present is comes from Ward Jones if you've never had the",
    "start": "1595250",
    "end": "1601169"
  },
  {
    "text": "pleasure of hearing her speak about chaos engineering I highly recommend it she speaks quite often at different events but she's the senior chaos",
    "start": "1601169",
    "end": "1608970"
  },
  {
    "text": "engineer at Netflix and she talks about a method of thinking about software",
    "start": "1608970",
    "end": "1616650"
  },
  {
    "text": "where you don't plan for if something is going to happen you plan for when it it happens and basically the idea is don't",
    "start": "1616650",
    "end": "1623700"
  },
  {
    "text": "try to don't necessarily count on prevention from stopping an application",
    "start": "1623700",
    "end": "1629549"
  },
  {
    "text": "from crashing plan for that application component to crash and actually force it",
    "start": "1629549",
    "end": "1634679"
  },
  {
    "text": "to crash to see what happens and so this led this style of thinking about",
    "start": "1634679",
    "end": "1640010"
  },
  {
    "text": "application availability led to chaos monkey which is a net flux net flix framework for actually deliberately",
    "start": "1640010",
    "end": "1647330"
  },
  {
    "text": "crashing and shutting things down on your Amazon account to see if your architecture is resilient can it restore",
    "start": "1647330",
    "end": "1654929"
  },
  {
    "text": "itself when is when it breaks will customers seen impact if this one random",
    "start": "1654929",
    "end": "1660299"
  },
  {
    "text": "machine gets terminated ideally the answer is no they should not and so this",
    "start": "1660299",
    "end": "1666120"
  },
  {
    "text": "this book also is very fantastic about chaos engineering it talks about how to really develop that mindset and how to",
    "start": "1666120",
    "end": "1672330"
  },
  {
    "text": "engineer things for chaos to happen so that it can restore itself very quickly",
    "start": "1672330",
    "end": "1679040"
  },
  {
    "text": "so reviewing these principles of the modern cloud native application and it",
    "start": "1679040",
    "end": "1684660"
  },
  {
    "text": "starts with containers and functions this is an ideal modern architecture",
    "start": "1684660",
    "end": "1690030"
  },
  {
    "text": "pattern for packaging your application up and running it it continues to the",
    "start": "1690030",
    "end": "1695160"
  },
  {
    "text": "cloud the cloud provides the place in order to run all these containers and functions and then equally important is",
    "start": "1695160",
    "end": "1702809"
  },
  {
    "text": "the culture the people who will actually be operating those containers and functions in the club so the modern",
    "start": "1702809",
    "end": "1710940"
  },
  {
    "text": "application architecture includes how you run it interact with it how it integrates with other services and how",
    "start": "1710940",
    "end": "1716820"
  },
  {
    "text": "you monitor it the how you were going to interact with it that kind of covers the code the containers and the functions",
    "start": "1716820",
    "end": "1724110"
  },
  {
    "text": "the code where the code is actually running how it integrates covers the cloud because the cloud",
    "start": "1724110",
    "end": "1730400"
  },
  {
    "text": "provides the integrations to your containers and to your lambdas so that they can connect to other cloud services",
    "start": "1730400",
    "end": "1735940"
  },
  {
    "text": "and other components that are running in your cloud and then how you moderate it is how you provide your people with a",
    "start": "1735940",
    "end": "1744710"
  },
  {
    "text": "culture of observability into what's going on in the organization and in the",
    "start": "1744710",
    "end": "1750710"
  },
  {
    "text": "software that's running in their cloud so starting from the left-hand side from",
    "start": "1750710",
    "end": "1756020"
  },
  {
    "text": "that run interact let's talk about the first way that you can run to interact something in your 80s cloud as any west",
    "start": "1756020",
    "end": "1763250"
  },
  {
    "text": "lambda so animus lamda provides an event-driven serverless system for",
    "start": "1763250",
    "end": "1769730"
  },
  {
    "text": "running a function it could be no js' Java Python C sharp or go and you can",
    "start": "1769730",
    "end": "1775730"
  },
  {
    "text": "even bring your own libraries including native ones a lot of people don't actually realize that you can take a",
    "start": "1775730",
    "end": "1780740"
  },
  {
    "text": "binary in arbitrary binary and put it into your lambda function and execute it",
    "start": "1780740",
    "end": "1785920"
  },
  {
    "text": "there's a lot of power there you could literally run anything that you want to run inside that lambda and lambda is",
    "start": "1785920",
    "end": "1794030"
  },
  {
    "text": "extremely flexible it's designed for both synchronous and asynchronous use and it integrates with other ad bus",
    "start": "1794030",
    "end": "1800000"
  },
  {
    "text": "services including API gateway which provides essentially an HTP interface that will forward any web requests they",
    "start": "1800000",
    "end": "1807620"
  },
  {
    "text": "hit it to one of the lambdas that's hooked up to a route on that API gateway in terms of the cost and resource that",
    "start": "1807620",
    "end": "1815270"
  },
  {
    "text": "we talked about earlier as being a fundamental part of cloud native architecture lambda has an extremely simple resource",
    "start": "1815270",
    "end": "1820700"
  },
  {
    "text": "model so you select a power rating it's based on the number of megabytes of memory they're available from 128",
    "start": "1820700",
    "end": "1827270"
  },
  {
    "text": "megabytes up to 3 gigabytes and based on how much memory you select for that",
    "start": "1827270",
    "end": "1833540"
  },
  {
    "text": "function you're going to get an amount of CPU and network capacity additionally",
    "start": "1833540",
    "end": "1839720"
  },
  {
    "text": "we provide flexible authorization so easy ways to give that lambda and the code running in it permission to talk to",
    "start": "1839720",
    "end": "1846410"
  },
  {
    "text": "other resources on your account such as dynamodb table Aurora or similar lambda",
    "start": "1846410",
    "end": "1854510"
  },
  {
    "text": "is designed for people to be able to use it easily we offer a number of different",
    "start": "1854510",
    "end": "1861170"
  },
  {
    "text": "a number of different ways to edit the code including cloud9 which is the WYSIWYG editor or you can use your own",
    "start": "1861170",
    "end": "1868940"
  },
  {
    "text": "custom tool and you can upload a package to lamda and we provide plug-ins for",
    "start": "1868940",
    "end": "1874010"
  },
  {
    "text": "Eclipse and visual studio to also do this automatically the programming model is very similar to where you're used to",
    "start": "1874010",
    "end": "1880430"
  },
  {
    "text": "using on a regular computer you have processes available like I mentioned you can put an arbitrary binary into that",
    "start": "1880430",
    "end": "1886730"
  },
  {
    "text": "lamda in it and execute it you can use threads you can use slash ten you can use WebSockets when you need them and",
    "start": "1886730",
    "end": "1894470"
  },
  {
    "text": "you can use the same eight abyss SDK that works on your local development machine or on PM's or containers lamda",
    "start": "1894470",
    "end": "1901400"
  },
  {
    "text": "also provides a lot of visibility into monitoring logging not only metrics for the request but metrics for failures and",
    "start": "1901400",
    "end": "1908720"
  },
  {
    "text": "all the logs everything that happens inside that lambda that you log will go into cloud watch logs it's also really",
    "start": "1908720",
    "end": "1916160"
  },
  {
    "text": "designed for a stateless architecture so this is another aspect of the modern application architecture is the idea of",
    "start": "1916160",
    "end": "1922220"
  },
  {
    "text": "statelessness rather than counting on something being written to disk and then reading it back from disk you persist it",
    "start": "1922220",
    "end": "1929570"
  },
  {
    "text": "into an external storage engine that's designed for persistence and with the",
    "start": "1929570",
    "end": "1934910"
  },
  {
    "text": "stateless architecture you actually have no access to the underlying infrastructure as a feature",
    "start": "1934910",
    "end": "1940640"
  },
  {
    "text": "you can't SSH into any local box and modify things because there are no boxes",
    "start": "1940640",
    "end": "1946370"
  },
  {
    "text": "essentially you just have running code so let's look at one of the customers that's been successful using a dubious",
    "start": "1946370",
    "end": "1952640"
  },
  {
    "text": "lambda which is FINRA they're the Financial Industry Regulatory Authority",
    "start": "1952640",
    "end": "1957830"
  },
  {
    "text": "and they process a daily influx of 37",
    "start": "1957830",
    "end": "1963290"
  },
  {
    "text": "billion records having to do with financial trades and they check for things that don't follow the established",
    "start": "1963290",
    "end": "1971660"
  },
  {
    "text": "regulations for the financial industry the the quote here is is pretty amazing",
    "start": "1971660",
    "end": "1977420"
  },
  {
    "text": "they said using a dubious lambda we've increased cost efficiency by a factor of two and just to give you an idea about",
    "start": "1977420",
    "end": "1983510"
  },
  {
    "text": "how much that means FINRA performs five hundred billion validation as a day",
    "start": "1983510",
    "end": "1989090"
  },
  {
    "text": "using a dubious lambda so obviously if they're increasing a cost efficiency by",
    "start": "1989090",
    "end": "1994430"
  },
  {
    "text": "- there's a lot of savings to be had there so here's the architecture that they chose to deploy they have incoming",
    "start": "1994430",
    "end": "2001480"
  },
  {
    "text": "files to be audited they upload those files to an analyst on s3 bucket and then the Amazon s3 bucket triggers an",
    "start": "2001480",
    "end": "2008590"
  },
  {
    "text": "event which causes lambis to be executed to pull those files out process the",
    "start": "2008590",
    "end": "2015580"
  },
  {
    "text": "trades and financial transactions that are going that are described in those files and then write the results back",
    "start": "2015580",
    "end": "2022050"
  },
  {
    "text": "via an sqs queue that's being listened to by and to listen to by an ec2",
    "start": "2022050",
    "end": "2028630"
  },
  {
    "text": "instance the ec2 rights summary information - an RDS deployment and then",
    "start": "2028630",
    "end": "2035890"
  },
  {
    "text": "consumers are able to interact with the controller and pull that data out when they need it so this system as I",
    "start": "2035890",
    "end": "2042880"
  },
  {
    "text": "mentioned is highly scalable handle a 500 billion validations a day and",
    "start": "2042880",
    "end": "2047909"
  },
  {
    "text": "they're very happy with the cost as well let's look at another tool we provide",
    "start": "2047909",
    "end": "2053530"
  },
  {
    "text": "and what's on the last set container service so this is designed to make it easy for you to run a container on the",
    "start": "2053530",
    "end": "2060280"
  },
  {
    "text": "ad FS cloud it offers features such as container level networking we have",
    "start": "2060280",
    "end": "2065860"
  },
  {
    "text": "service discovery now as well that allows each of your container tasks to have its own IP address and to be",
    "start": "2065860",
    "end": "2073120"
  },
  {
    "text": "registered in a service discovery mechanism where containers can talk to each other using host names UCS offers",
    "start": "2073120",
    "end": "2080200"
  },
  {
    "text": "deep integration with the rest of the ATS platform so it makes it easy to give different containers are running on the",
    "start": "2080200",
    "end": "2086080"
  },
  {
    "text": "same ec2 host access to different resources this is huge for security",
    "start": "2086080",
    "end": "2092408"
  },
  {
    "text": "because it allows you to have one service that maybe is communicating with an s3 bucket to store user uploaded",
    "start": "2092409",
    "end": "2098860"
  },
  {
    "text": "images and another service is communicating with a sensitive data base that has credit card information and",
    "start": "2098860",
    "end": "2105100"
  },
  {
    "text": "they may be running on the same machine but they have access to different resources you don't have to grant global",
    "start": "2105100",
    "end": "2110290"
  },
  {
    "text": "access to everything running on that machine additionally ECS allows you to deploy",
    "start": "2110290",
    "end": "2115540"
  },
  {
    "text": "things globally we have a little footprint in many regions around the world auto scaling CloudWatch metrics",
    "start": "2115540",
    "end": "2121870"
  },
  {
    "text": "and integration with different load balancers one successful ECS customer is",
    "start": "2121870",
    "end": "2127780"
  },
  {
    "text": "McDonald's and I probably don't need to introduce what McDonald's is but let me",
    "start": "2127780",
    "end": "2133030"
  },
  {
    "text": "share some stats they have 37 thousand restaurants 1.9 million employees in 120",
    "start": "2133030",
    "end": "2139240"
  },
  {
    "text": "countries and they serve 64 million customers a day so they decided that",
    "start": "2139240",
    "end": "2144730"
  },
  {
    "text": "they wanted to build a global platform to connect customers and delivery",
    "start": "2144730",
    "end": "2150580"
  },
  {
    "text": "services with their restaurants and they want this to be deeply integrated integrated worldwide with whatever the",
    "start": "2150580",
    "end": "2157510"
  },
  {
    "text": "best delivery food delivery partner was in that particular area so if you have if you ever use uber eats to order",
    "start": "2157510",
    "end": "2164520"
  },
  {
    "text": "McDonald's you've use this system in building this they had a few critical",
    "start": "2164520",
    "end": "2171790"
  },
  {
    "text": "business requirements the first was speed to market they wanted to be able to build this system quickly the second",
    "start": "2171790",
    "end": "2178420"
  },
  {
    "text": "was scalability and reliability McDonald's serves a lot of customers and he wanted to be able to handle up to 500",
    "start": "2178420",
    "end": "2184810"
  },
  {
    "text": "thousand orders an hour with this system they wanted multi-country support so",
    "start": "2184810",
    "end": "2190150"
  },
  {
    "text": "they wanted this to be able to be deployed worldwide and they wanted to easily be able to integrate it with different food delivery partners around",
    "start": "2190150",
    "end": "2197110"
  },
  {
    "text": "the world and then the last was cost sensitivity obviously one of the nice things about McDonald's is it's very",
    "start": "2197110",
    "end": "2203470"
  },
  {
    "text": "affordable but that means that any system they McDonald's uses needs to be",
    "start": "2203470",
    "end": "2209020"
  },
  {
    "text": "very cost effective because the margins are low so in tackling these challenges",
    "start": "2209020",
    "end": "2216010"
  },
  {
    "text": "they chose a few key architectural principles the first was they were going to use microservices this will allow",
    "start": "2216010",
    "end": "2222160"
  },
  {
    "text": "them to build many different integrations with different partners it will allow them to easily distribute those integrations worldwide to",
    "start": "2222160",
    "end": "2228430"
  },
  {
    "text": "different regions where perhaps the United States the integration talks to it we REITs maybe in another country it",
    "start": "2228430",
    "end": "2233740"
  },
  {
    "text": "uses a different food delivery service they would use containers and orchestration with ECS to actually run",
    "start": "2233740",
    "end": "2241120"
  },
  {
    "text": "these different micro services worldwide in different regions they wanted to use platform as a service offerings whenever",
    "start": "2241120",
    "end": "2247120"
  },
  {
    "text": "possible what this meant was they wanted to use key a TBS platform components like ECS sqs RDS and elastic cache",
    "start": "2247120",
    "end": "2255700"
  },
  {
    "text": "rather than trying to run their own services because this would allow them to build quickly and efficiently and",
    "start": "2255700",
    "end": "2262740"
  },
  {
    "text": "they wanted to build both synchronous and event based models to push orders as",
    "start": "2262740",
    "end": "2268320"
  },
  {
    "text": "well as provide api's that were provide synchronous responses so here's what",
    "start": "2268320",
    "end": "2273960"
  },
  {
    "text": "they ended up building once again you can see and what's on UCS is there at the heart of the system powering each of",
    "start": "2273960",
    "end": "2280650"
  },
  {
    "text": "the micro services and you can see how they've tied in different different",
    "start": "2280650",
    "end": "2286440"
  },
  {
    "text": "database services into the heart of their system to connect to the menu and restaurant systems to connect to the",
    "start": "2286440",
    "end": "2294240"
  },
  {
    "text": "third-party delivery platforms and to connect to their Macdonald API middleware so there were the results of",
    "start": "2294240",
    "end": "2301320"
  },
  {
    "text": "this architecture was they were able to build the entire system in months once again we're looking at an organization",
    "start": "2301320",
    "end": "2307080"
  },
  {
    "text": "that has a 440 times speed efficiency here they were able to build this worldwide system in months the reason",
    "start": "2307080",
    "end": "2314940"
  },
  {
    "text": "why is because ECS offered a simplified DevOps platform that took them from",
    "start": "2314940",
    "end": "2320490"
  },
  {
    "text": "nothing to successful ability to deploy content quickly and they're able to now",
    "start": "2320490",
    "end": "2326700"
  },
  {
    "text": "integrate with all these restaurants and global delivery partners handling 20,000 transactions per second with sub one",
    "start": "2326700",
    "end": "2334530"
  },
  {
    "text": "higher millisecond latency and most importantly it's also very cost effective so though they can run this",
    "start": "2334530",
    "end": "2340770"
  },
  {
    "text": "system and offer delivery to people without worrying about it costing a lot of money now in working with customers",
    "start": "2340770",
    "end": "2350040"
  },
  {
    "text": "like McDonald's who wanted to employ an SES we've realized that a lot of",
    "start": "2350040",
    "end": "2355650"
  },
  {
    "text": "customers were more focused on running the application than the platform after",
    "start": "2355650",
    "end": "2361590"
  },
  {
    "text": "all the platform may be interesting at first just to learn about how to deploy",
    "start": "2361590",
    "end": "2367140"
  },
  {
    "text": "containers but fundamentally the most important thing especially if you're trying to be one of those 440 times",
    "start": "2367140",
    "end": "2372450"
  },
  {
    "text": "faster organizations is that application they are delivering to your customers and so we want to enable a closer focus",
    "start": "2372450",
    "end": "2379980"
  },
  {
    "text": "on the application and less of a focus on the messy details of how the platform actually gets deployed across the cloud",
    "start": "2379980",
    "end": "2387410"
  },
  {
    "text": "so that's why we introduced a two-base far gate so far gate offers the ability to run an application",
    "start": "2387410",
    "end": "2393859"
  },
  {
    "text": "in a container by specifying how much CPU and memory you want available to that container and then you just forget",
    "start": "2393859",
    "end": "2401569"
  },
  {
    "text": "about it you don't have to provision an ec2 instance you don't have to worry about what you see to instance the container",
    "start": "2401569",
    "end": "2407780"
  },
  {
    "text": "got placed on you don't have to worry about if it crashes or if an ec2 instance gets taken out of service",
    "start": "2407780",
    "end": "2413660"
  },
  {
    "text": "because that container is always running and if it stops or crashes it will come",
    "start": "2413660",
    "end": "2418819"
  },
  {
    "text": "back up again automatically so you can scale from just one running container to",
    "start": "2418819",
    "end": "2425930"
  },
  {
    "text": "thousands of containers without provisioning a single ec2 instance on your account so the the core a goal here",
    "start": "2425930",
    "end": "2435349"
  },
  {
    "text": "was to provide this easy to use powerful consumption model to offer resources for",
    "start": "2435349",
    "end": "2441349"
  },
  {
    "text": "containers without any instances to manage with a container native API that",
    "start": "2441349",
    "end": "2446630"
  },
  {
    "text": "was really designed from the ground up for containers to be able to connect to the other eight abyss resources without",
    "start": "2446630",
    "end": "2452720"
  },
  {
    "text": "any changes to your docker container and finally for the pricing to be resource based rather than based on ec2 instances",
    "start": "2452720",
    "end": "2462400"
  },
  {
    "text": "approaching the problem obviously running a container locally is easy you can just spin it up with docker run",
    "start": "2462400",
    "end": "2468589"
  },
  {
    "text": "command you can stop it with a docker stop command when you go to run containers across ec2 instances though",
    "start": "2468589",
    "end": "2474260"
  },
  {
    "text": "then you start to get a more of a challenge you have to actually communicate with these ec2 instances to run these tasks and so in the old model",
    "start": "2474260",
    "end": "2481750"
  },
  {
    "text": "it looks similar to this with with ECS you would run an ec2 instance and there",
    "start": "2481750",
    "end": "2488089"
  },
  {
    "text": "were a number of things on that ec2 instance that you were responsible for managing such as the Amazon machine",
    "start": "2488089",
    "end": "2494000"
  },
  {
    "text": "image version for the ec2 instance because that contained the docker engine",
    "start": "2494000",
    "end": "2499130"
  },
  {
    "text": "and that contained the ECS agent that communicated with ECS and while this was",
    "start": "2499130",
    "end": "2504770"
  },
  {
    "text": "certainly simpler than manually logging into a box and spinning up or down and",
    "start": "2504770",
    "end": "2510170"
  },
  {
    "text": "docker images manually on that instance there was still a lot of things need to be maintained and upgraded let's say",
    "start": "2510170",
    "end": "2516230"
  },
  {
    "text": "that new version of dr. came out they had a security fix you would need to patch that instance across your cluster",
    "start": "2516230",
    "end": "2522849"
  },
  {
    "text": "so the ECS system offering these different availability zones and offering the",
    "start": "2522849",
    "end": "2529710"
  },
  {
    "text": "scheduling orchestration across them was our starting point we took those",
    "start": "2529710",
    "end": "2535950"
  },
  {
    "text": "instances and we decided to actually replace them with Fargate and so with",
    "start": "2535950",
    "end": "2543060"
  },
  {
    "text": "this with this operational model we were able to talk to the UCS scheduling API and just ask",
    "start": "2543060",
    "end": "2548880"
  },
  {
    "text": "ECS to run a container and ECS will run the container in Fargate without needing",
    "start": "2548880",
    "end": "2554550"
  },
  {
    "text": "to add an ec2 instance to your account it's very easy to get started you can",
    "start": "2554550",
    "end": "2559680"
  },
  {
    "text": "actually use the the launch wizard first launch wizard to launch an engine Xbox",
    "start": "2559680",
    "end": "2564839"
  },
  {
    "text": "or launch an example of PHP application and see it working and use that as a starting point for your application so I",
    "start": "2564839",
    "end": "2571470"
  },
  {
    "text": "encourage you if you haven't tried this out to just log into the console and and",
    "start": "2571470",
    "end": "2576750"
  },
  {
    "text": "try launching a Fargate container once again as we talked about granular pricing you're able to shut this container down at any time when you're",
    "start": "2576750",
    "end": "2583560"
  },
  {
    "text": "done with it so you don't have to worry about it costing a lot of money you can play it around with this new service and just",
    "start": "2583560",
    "end": "2589140"
  },
  {
    "text": "test and see how it works so I'm not sure one customer who's been very successful at using Avis Fargate that's",
    "start": "2589140",
    "end": "2595589"
  },
  {
    "text": "producthunt once again a lot of you for probably familiar with producthunt but they are one of the premier websites for curating",
    "start": "2595589",
    "end": "2602130"
  },
  {
    "text": "different products and startups that launch they provide a way for the",
    "start": "2602130",
    "end": "2608310"
  },
  {
    "text": "community to vote on different products and vote them up to the top and provide",
    "start": "2608310",
    "end": "2613680"
  },
  {
    "text": "feedback and really discover interesting new products that have launched so product on their entire website runs",
    "start": "2613680",
    "end": "2621510"
  },
  {
    "text": "those micro services they use Ruby on Rails and graph QL behind a node.js",
    "start": "2621510",
    "end": "2627329"
  },
  {
    "text": "front-end and they wanted to take these micro services and migrate them into a B",
    "start": "2627329",
    "end": "2632880"
  },
  {
    "text": "into a device Fargate because they wanted to be able to scale quickly without worrying about ec2 they want to",
    "start": "2632880",
    "end": "2639690"
  },
  {
    "text": "be able to schedule multi container workloads or different containers communicate with each other and they",
    "start": "2639690",
    "end": "2645960"
  },
  {
    "text": "wanted to have robust controls but between which containers can talk to",
    "start": "2645960",
    "end": "2651420"
  },
  {
    "text": "other containers so they just had to go all in on a DBS and a device for gate",
    "start": "2651420",
    "end": "2657480"
  },
  {
    "text": "and January 2018 and they were able to move this application stack over very quickly",
    "start": "2657480",
    "end": "2662569"
  },
  {
    "text": "because abs Fargate offers the simplified resource model that doesn't",
    "start": "2662569",
    "end": "2667740"
  },
  {
    "text": "require a lot of learning and Fargate for them has helped them deal with",
    "start": "2667740",
    "end": "2673259"
  },
  {
    "text": "traffic spikes they were worse they started out running baseline of 25 tasks but as traffic blows up let's say one of",
    "start": "2673259",
    "end": "2679980"
  },
  {
    "text": "the products becomes very popular they able to scale it up very quickly here's",
    "start": "2679980",
    "end": "2685529"
  },
  {
    "text": "what their application architecture stack looks like we have the end consumer whose can communicate with a",
    "start": "2685529",
    "end": "2692039"
  },
  {
    "text": "CDN and that CBN is hooked up to an externally facing ALP application load",
    "start": "2692039",
    "end": "2699480"
  },
  {
    "text": "balancer which forged the incoming traffic to one of various different",
    "start": "2699480",
    "end": "2704670"
  },
  {
    "text": "micro services that are responsible for generating web pages and serving different tasks that are part of the",
    "start": "2704670",
    "end": "2710609"
  },
  {
    "text": "website you see the each of these different services such as the back back-end web external or the front-end",
    "start": "2710609",
    "end": "2716460"
  },
  {
    "text": "web external is a polyglot application",
    "start": "2716460",
    "end": "2722249"
  },
  {
    "text": "so for example one of them could be running Ruby on Rails one of them right there you can see is running no Jess and",
    "start": "2722249",
    "end": "2727829"
  },
  {
    "text": "you can also see this as a multi-tier application so these different Fargate containers that are running different",
    "start": "2727829",
    "end": "2733049"
  },
  {
    "text": "application stacks they communicate across two tiers there's the externally faced link alb",
    "start": "2733049",
    "end": "2738480"
  },
  {
    "text": "that handles external facing web site and then there's an internal alb with a",
    "start": "2738480",
    "end": "2744210"
  },
  {
    "text": "background task that's internal and handles internal API things you can also",
    "start": "2744210",
    "end": "2749670"
  },
  {
    "text": "see that there is interestingly a job queue so some of the tasks that they have are for example scraping web sites",
    "start": "2749670",
    "end": "2756779"
  },
  {
    "text": "are generating cards for website they want to do that a synchronously behind the scenes and so they use Ruby on Rails",
    "start": "2756779",
    "end": "2763380"
  },
  {
    "text": "sidekick queue and they use background workers that also run as a base for gate",
    "start": "2763380",
    "end": "2769019"
  },
  {
    "text": "tasks and they can scale each of these different things independently so if they have a large queue of background",
    "start": "2769019",
    "end": "2776130"
  },
  {
    "text": "websites to scrape they can fire up as many background workers as they need and Fargate and if they have a large influx",
    "start": "2776130",
    "end": "2782339"
  },
  {
    "text": "of consumer traffic they can scale up one of these front end facing Fargate",
    "start": "2782339",
    "end": "2788910"
  },
  {
    "text": "tasks and once again all backed by Redis and Postgres cycle so quote from Fargate",
    "start": "2788910",
    "end": "2795900"
  },
  {
    "text": "quote from producthunt we moved to far gate because we need the ability to scale quickly up from",
    "start": "2795900",
    "end": "2801790"
  },
  {
    "text": "baseline run multi container workloads and get fine-grained network control without having to manage our own",
    "start": "2801790",
    "end": "2807310"
  },
  {
    "text": "infrastructure so this is what 80s party has delivered to them the ability to use all these things like Avis security",
    "start": "2807310",
    "end": "2813099"
  },
  {
    "text": "groups and application load balancers and V pcs alongside their containers now",
    "start": "2813099",
    "end": "2820480"
  },
  {
    "text": "the next tool I want to talk about in terms of deploying your code in a modern",
    "start": "2820480",
    "end": "2826089"
  },
  {
    "text": "application stack is elastic container service for kubernetes eks so we announced this a tree event as a managed",
    "start": "2826089",
    "end": "2833290"
  },
  {
    "text": "kubernetes control plane basically a lot of our customers we're running Cooper Nettie's running into challenges with",
    "start": "2833290",
    "end": "2839410"
  },
  {
    "text": "scaling kubernetes running into challenges with for example managing the etsy D data store behind communities and",
    "start": "2839410",
    "end": "2845920"
  },
  {
    "text": "they asked us to start running that commemorates control plane for them so",
    "start": "2845920",
    "end": "2852150"
  },
  {
    "text": "we've we've developed EPS as a way to provide this premiere experience for",
    "start": "2852150",
    "end": "2858400"
  },
  {
    "text": "kubernetes on AWS with native Intuos integrations to all the ATS services they are familiar with we're doing this",
    "start": "2858400",
    "end": "2865990"
  },
  {
    "text": "all open to the community so everything that we will build for kubernetes you'll see open source we joined the CN CF as a",
    "start": "2865990",
    "end": "2874240"
  },
  {
    "text": "way to join the Camaro's project and make sure that we're not just forking kubernetes we're actually writing code",
    "start": "2874240",
    "end": "2879970"
  },
  {
    "text": "that can be contributed back to anybody who wants to run cooper neighs whether it's in AWS or in an on-premise data",
    "start": "2879970",
    "end": "2887319"
  },
  {
    "text": "center or in a different cloud entirely we're offering an automated upgrades for",
    "start": "2887319",
    "end": "2892839"
  },
  {
    "text": "your kubernetes clusters so this used to be a challenging problem how do I upgrade my kubernetes cluster well now des will do that and handle it",
    "start": "2892839",
    "end": "2899619"
  },
  {
    "text": "for you automatically and one of the most important things is it's highly available by default so running it",
    "start": "2899619",
    "end": "2905710"
  },
  {
    "text": "highly available the kubernetes across different available these things owns used to be a bit of a challenge",
    "start": "2905710",
    "end": "2910839"
  },
  {
    "text": "especially when it came to SED ets basically handles that and so just an",
    "start": "2910839",
    "end": "2917079"
  },
  {
    "text": "idea of how ets works you provision a cluster I'm using the console and it",
    "start": "2917079",
    "end": "2924040"
  },
  {
    "text": "gives you back a cluster endpoint and that cluster endpoint can be associated with your cube control so",
    "start": "2924040",
    "end": "2930640"
  },
  {
    "text": "that way you can communicate with the cluster masters to request that task we launched or shut down or upgraded and",
    "start": "2930640",
    "end": "2937000"
  },
  {
    "text": "then you can also spawn any number of worker nodes that register themselves in",
    "start": "2937000",
    "end": "2943180"
  },
  {
    "text": "those masters as a pool of resources to be available to run your containers across so by communicating to that cube",
    "start": "2943180",
    "end": "2950950"
  },
  {
    "text": "control to the cluster master the closer master will then tell one of your ETS",
    "start": "2950950",
    "end": "2956080"
  },
  {
    "text": "worker knows to run the task and you can",
    "start": "2956080",
    "end": "2961870"
  },
  {
    "text": "continue to run to run more of them the one of the important things about this",
    "start": "2961870",
    "end": "2968410"
  },
  {
    "text": "is that we're also announcing the ability to launch a task using kubernetes onto Fargate so this is",
    "start": "2968410",
    "end": "2975280"
  },
  {
    "text": "something we've announced for for 2018 but the ability to actually use Cubans for cube control to talk to your",
    "start": "2975280",
    "end": "2981040"
  },
  {
    "text": "kubernetes master and your kubernetes master will actually have the ability to ask Fargate to run the container instead",
    "start": "2981040",
    "end": "2987460"
  },
  {
    "text": "of needing to talk to a worker node that you manage as well so once again recapping the the features of this eks",
    "start": "2987460",
    "end": "2996520"
  },
  {
    "text": "platform we're offering everything that's needed to have conformance as well this is another important one many of",
    "start": "2996520",
    "end": "3003090"
  },
  {
    "text": "our customers need PCI or HIPAA compliance and EPS comes with that",
    "start": "3003090",
    "end": "3009080"
  },
  {
    "text": "application orchestration can be a challenge sometimes we announced a be a",
    "start": "3009710",
    "end": "3015210"
  },
  {
    "text": "bit of step functions as a way to help a modern application stack become",
    "start": "3015210",
    "end": "3020520"
  },
  {
    "text": "automated and really able to react to changing situations a lot of times when",
    "start": "3020520",
    "end": "3026760"
  },
  {
    "text": "there is an availability scenario or something that has changed by your application architecture it may require",
    "start": "3026760",
    "end": "3033390"
  },
  {
    "text": "the intervention of a human to make a decision but whenever that's the case you could also consider is it possible",
    "start": "3033390",
    "end": "3040170"
  },
  {
    "text": "for me to build automation that could make the decision about what to do here and so we we have a data step functions",
    "start": "3040170",
    "end": "3045480"
  },
  {
    "text": "as a way to help you with these workflows where you have a challenging situation is such as running out of",
    "start": "3045480",
    "end": "3050970"
  },
  {
    "text": "capacity and let's say your EPS cluster or perhaps your your ECS on ec2 cluster",
    "start": "3050970",
    "end": "3058800"
  },
  {
    "text": "runs out so you need to be able to scale that up step functions provides a tool for building out these workflows for",
    "start": "3058800",
    "end": "3064619"
  },
  {
    "text": "resolving scenarios automatically and in terms of giving your engineers",
    "start": "3064619",
    "end": "3070140"
  },
  {
    "text": "visibility into what's going on we also provide Amazon Cloud watch the ability",
    "start": "3070140",
    "end": "3075419"
  },
  {
    "text": "to capture metrics on all of your different resources act on those metrics if the metrics go over a certain",
    "start": "3075419",
    "end": "3081630"
  },
  {
    "text": "threshold maybe trigger an SMS or a pager duty alert analyze them by looking",
    "start": "3081630",
    "end": "3087269"
  },
  {
    "text": "at dashboards or summaries of the stats over a certain time period and another",
    "start": "3087269",
    "end": "3093059"
  },
  {
    "text": "thing we announce that we're very proud of is a base x-ray so this tool provides",
    "start": "3093059",
    "end": "3098699"
  },
  {
    "text": "the ability to analyze and debug your performance by visualizing all of your",
    "start": "3098699",
    "end": "3104969"
  },
  {
    "text": "interconnected pieces of your application and seeing how the network communication flows between them and",
    "start": "3104969",
    "end": "3111059"
  },
  {
    "text": "what type of latency or air-conditioners there are so this is very powerful when",
    "start": "3111059",
    "end": "3116459"
  },
  {
    "text": "you combine it with for example lambda functions and containers in a hybrid",
    "start": "3116459",
    "end": "3122099"
  },
  {
    "text": "architecture because you're able to see those network connections you can see this lambda talked to this container and the container maybe kicked off another",
    "start": "3122099",
    "end": "3128369"
  },
  {
    "text": "lambda invoke and here's my latency between each of these different components and the long tail of perhaps",
    "start": "3128369",
    "end": "3135239"
  },
  {
    "text": "you see that 50% of the requests are fast but then another 50% are extremely slow and you're able to see that in",
    "start": "3135239",
    "end": "3141599"
  },
  {
    "text": "diagnose it so after reviewing all these different components I just wanna review",
    "start": "3141599",
    "end": "3146759"
  },
  {
    "text": "one more time the key building blocks for success in a modern cloud native application it starts with the",
    "start": "3146759",
    "end": "3152939"
  },
  {
    "text": "containers and functions because these are the tools that you use to package that code up and make sure that it's",
    "start": "3152939",
    "end": "3158849"
  },
  {
    "text": "going to run effectively in the cloud it continues with how you utilize the features of the cloud to provide auto",
    "start": "3158849",
    "end": "3165419"
  },
  {
    "text": "scaling to provide integrations with other services and capture metrics for",
    "start": "3165419",
    "end": "3170429"
  },
  {
    "text": "example and it also includes the culture it includes how you have the people who",
    "start": "3170429",
    "end": "3175859"
  },
  {
    "text": "are maintaining that code and the tools and processes they make available to",
    "start": "3175859",
    "end": "3181589"
  },
  {
    "text": "them the goal of all this is to provides you with the ability to build whatever",
    "start": "3181589",
    "end": "3186989"
  },
  {
    "text": "you want and to build it fast so thank you very much for your attention",
    "start": "3186989",
    "end": "3192310"
  },
  {
    "text": "and if you get a chance please complete the session survey in the summit mobile app I'll leave the instructions up here",
    "start": "3192310",
    "end": "3198810"
  },
  {
    "text": "for how to actually provide feedback on the session thanks a lot [Applause]",
    "start": "3198810",
    "end": "3207510"
  },
  {
    "text": "[Music]",
    "start": "3208120",
    "end": "3214480"
  }
]