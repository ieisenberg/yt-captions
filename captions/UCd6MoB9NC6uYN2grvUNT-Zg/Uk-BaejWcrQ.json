[
  {
    "start": "0",
    "end": "259000"
  },
  {
    "text": "[Music]",
    "start": "2120",
    "end": "5259"
  },
  {
    "text": "[Music]",
    "start": "8380",
    "end": "23029"
  },
  {
    "text": "good morning everyone thank you very much for selecting and choosing to be here today this morning if your being",
    "start": "28640",
    "end": "35520"
  },
  {
    "text": "here in the last couple of days we spoke about relational databases how you can run and manage relational databases on",
    "start": "35520",
    "end": "41550"
  },
  {
    "text": "AWS you know spinning up Linux instances on AWS today we're going to talk about",
    "start": "41550",
    "end": "47039"
  },
  {
    "text": "matching databases to your workload a brief you know story about myself I",
    "start": "47039",
    "end": "54480"
  },
  {
    "text": "joined AWS three years ago in 2016 and prior to that I was at Yahoo managing a",
    "start": "54480",
    "end": "61469"
  },
  {
    "text": "lot of engineering and operations was a DBA there for about 10 15 years that's what my previous life has been managed a",
    "start": "61469",
    "end": "68640"
  },
  {
    "text": "number of Oracle and my sequel databases so have been in the relational database world for a very long time and when I",
    "start": "68640",
    "end": "75150"
  },
  {
    "text": "started looking at how the database world has evolved that is fascinating right how things have evolved from",
    "start": "75150",
    "end": "81210"
  },
  {
    "text": "relational database to where it is today where you have a number of choices based on what your workload is and we're going",
    "start": "81210",
    "end": "88409"
  },
  {
    "text": "to talk about that in this session here so the question is what are we going to",
    "start": "88409",
    "end": "95070"
  },
  {
    "text": "talk today we don't talk about what is the database workload classification what are the traditional approaches that",
    "start": "95070",
    "end": "100979"
  },
  {
    "text": "we have adopted like in my personal experience having used relational database for every single problem that",
    "start": "100979",
    "end": "106560"
  },
  {
    "text": "comes your way because that's the only tool we used to have and how do we scale relational databases",
    "start": "106560",
    "end": "112220"
  },
  {
    "text": "how does no sequel database is compared to this and different flavors of no",
    "start": "112220",
    "end": "117600"
  },
  {
    "text": "sequel databases there's available in EWS so we can go through a few options that you have based on what's the",
    "start": "117600",
    "end": "123329"
  },
  {
    "text": "workload and what's the problem you're trying to solve and what database to choose when",
    "start": "123329",
    "end": "130099"
  },
  {
    "text": "so when you're gone you know I've worked with the Lord of developers in my past life and today I work with a lot of",
    "start": "131730",
    "end": "137560"
  },
  {
    "text": "customers the vertical that I work in is education so we work with a lot of",
    "start": "137560",
    "end": "142780"
  },
  {
    "text": "higher education customers K through 12 schools and EDX it takes our education",
    "start": "142780",
    "end": "148120"
  },
  {
    "text": "technology companies that focus on education and we work with them very closely in the problem of scale that",
    "start": "148120",
    "end": "154209"
  },
  {
    "text": "they're solving so if any of you own an EdTech if you're in the startup that is focusing on education please come and",
    "start": "154209",
    "end": "160660"
  },
  {
    "text": "talk to us we like to help you there are a number of programs that we like to fund to get you up and running on AWS so",
    "start": "160660",
    "end": "168610"
  },
  {
    "text": "that's on the side self marketing for our group but when we go and talk to",
    "start": "168610",
    "end": "175930"
  },
  {
    "text": "developers why did you choose a particular database for your workload",
    "start": "175930",
    "end": "181150"
  },
  {
    "text": "the normal answers that you get is we heard some X is the best thing or the",
    "start": "181150",
    "end": "187030"
  },
  {
    "text": "newest thing available in the market right it could be MongoDB it could be dynamo it could be a a flavor of",
    "start": "187030",
    "end": "192489"
  },
  {
    "text": "Postgres or my sequel or we have a site-wide license any education we hear",
    "start": "192489",
    "end": "198670"
  },
  {
    "text": "that a lot we have a site-wide license for oracle or microsoft sequel and that's why for",
    "start": "198670",
    "end": "203859"
  },
  {
    "text": "every single problem will create an oracle database and solve the problem using their database or you know our",
    "start": "203859",
    "end": "210670"
  },
  {
    "text": "teams no teams know how to use the database variable that's a very valid use case you know",
    "start": "210670",
    "end": "216190"
  },
  {
    "text": "you you have the muscle you build that muscle to support that particular software or database and you want to",
    "start": "216190",
    "end": "222459"
  },
  {
    "text": "leverage that but these are typical reasons that we've heard so why do you",
    "start": "222459",
    "end": "229450"
  },
  {
    "text": "why did you choose a database this database has to be personal a purpose",
    "start": "229450",
    "end": "235030"
  },
  {
    "text": "built to support the application that's designed to do right so we will dig a little bit more into that on how do you",
    "start": "235030",
    "end": "242440"
  },
  {
    "text": "go about choosing a particular database for your workload so what are the different types of database workloads",
    "start": "242440",
    "end": "249160"
  },
  {
    "text": "today that you have run that we run into constantly one is OLTP that's online",
    "start": "249160",
    "end": "254260"
  },
  {
    "text": "transactional processing this could be your ERP systems that you're running financial HR systems where it is highly",
    "start": "254260",
    "end": "262360"
  },
  {
    "start": "259000",
    "end": "259000"
  },
  {
    "text": "transactional imagine an ERP system we're a team is constantly putting in",
    "start": "262360",
    "end": "267780"
  },
  {
    "text": "invoices for their customers that's all they're doing it's you exactly know what the workload is you have a software that's sitting in and putting the",
    "start": "267780",
    "end": "274110"
  },
  {
    "text": "invoices another team is paying off those invoices to whatever goods were delivered right these are traditionally",
    "start": "274110",
    "end": "280610"
  },
  {
    "text": "online transactional processing then you have analytical processing you want to",
    "start": "280610",
    "end": "286020"
  },
  {
    "text": "do some kind of operational reporting for example how many customers have paid",
    "start": "286020",
    "end": "291120"
  },
  {
    "text": "or overdue B or 90 days this these are standard fascicle reports that you run",
    "start": "291120",
    "end": "296600"
  },
  {
    "text": "in an ERP system in a data warehouse that's tied to an ERP system and then",
    "start": "296600",
    "end": "302580"
  },
  {
    "text": "you have the decision support system this is more you're trying to solve the problem for the business the long-term",
    "start": "302580",
    "end": "309060"
  },
  {
    "text": "problem so you're you're going across multiple different types data sources it",
    "start": "309060",
    "end": "314430"
  },
  {
    "text": "could be structured semi-structured data sources that you're running across reports it these reports can take longer",
    "start": "314430",
    "end": "321360"
  },
  {
    "text": "to run it might take a few seconds to come back but you're not too focused on latency at that point if you look at",
    "start": "321360",
    "end": "327930"
  },
  {
    "text": "transactional processing you want to have the fastest time to enter an invoice or make a payment right so that",
    "start": "327930",
    "end": "334830"
  },
  {
    "text": "is traditionally how old TP is built but decision support systems can take a few seconds but then you want to run that",
    "start": "334830",
    "end": "342360"
  },
  {
    "text": "analytical report that solves the problem for your business this is typically how different types of",
    "start": "342360",
    "end": "347639"
  },
  {
    "text": "workloads that we have seen so sizing the workload so you know on a on an on",
    "start": "347639",
    "end": "358260"
  },
  {
    "start": "349000",
    "end": "349000"
  },
  {
    "text": "cloud on an on-prem system when you're sizing a workload you make some assumptions on what your system is going",
    "start": "358260",
    "end": "364470"
  },
  {
    "text": "to be sized at in a year two years three years from now and then that's what you size you buy the biggest box that's",
    "start": "364470",
    "end": "370349"
  },
  {
    "text": "available at their time and then you go through this step function of sizing up your database so I mean I think most of",
    "start": "370349",
    "end": "381180"
  },
  {
    "text": "you have seen this sizing on a non-prime systems where you go through the step",
    "start": "381180",
    "end": "387210"
  },
  {
    "text": "function of adding new servers every time you hit a bottleneck so at any given point you either have excess",
    "start": "387210",
    "end": "392940"
  },
  {
    "start": "388000",
    "end": "388000"
  },
  {
    "text": "capacity or you have customers who are not satisfied right because you are always in the place where you have",
    "start": "392940",
    "end": "400740"
  },
  {
    "text": "capacity that you're procuring it takes six to eight weeks for you to get a server act and for your database to",
    "start": "400740",
    "end": "407250"
  },
  {
    "text": "start using that capacity so that's where the dissatisfied part of the curve is and initially when you're sighs",
    "start": "407250",
    "end": "412920"
  },
  {
    "text": "you've made some assumptions and sized it for the next three four years and you have a lot of excess capacity in fact",
    "start": "412920",
    "end": "420120"
  },
  {
    "text": "this grab there's only one point there or a couple of points there where your",
    "start": "420120",
    "end": "425340"
  },
  {
    "text": "capacity and the user expectation is matched up right that's though where those lines intersect that's the only",
    "start": "425340",
    "end": "431520"
  },
  {
    "text": "point where you have the exact capacity for your workload every time L so you either have an excess capacity or you",
    "start": "431520",
    "end": "437430"
  },
  {
    "text": "have customers performance issues where the customers are dissatisfied",
    "start": "437430",
    "end": "443600"
  },
  {
    "start": "443000",
    "end": "443000"
  },
  {
    "text": "so traditionally this is how we sized databases we bought a box and that once",
    "start": "443600",
    "end": "449940"
  },
  {
    "text": "the database outgrew that box we bought a bigger box and then once the dad outgrew that bigger box we bought an",
    "start": "449940",
    "end": "455130"
  },
  {
    "text": "even bigger box and finally we ran out of bigger boxes to host these databases and then once",
    "start": "455130",
    "end": "462780"
  },
  {
    "text": "your database becomes really really large you go to strategies where you shard the database so you split up data",
    "start": "462780",
    "end": "469560"
  },
  {
    "text": "into logical pieces and each of the piece goes to its own database and we",
    "start": "469560",
    "end": "475350"
  },
  {
    "text": "did that at Yahoo and we landed up with like a 50 node Fuster of databases now how do you manage that cluster all right",
    "start": "475350",
    "end": "481320"
  },
  {
    "text": "you need a team that manages a cluster and eventually you lose that battle as well so that's how relational databases",
    "start": "481320",
    "end": "488820"
  },
  {
    "start": "488000",
    "end": "488000"
  },
  {
    "text": "have traditionally been sized and managed now in no sequel database we go",
    "start": "488820",
    "end": "495360"
  },
  {
    "text": "into the design patterns of no sequel database in a couple of slides but traditionally no sequel databases have",
    "start": "495360",
    "end": "502160"
  },
  {
    "text": "you know highly denormalized data where if you talk about relational databases",
    "start": "502160",
    "end": "507930"
  },
  {
    "text": "we generally talk about normalized data where you have a lot of reference key so the referential integrity is foreign",
    "start": "507930",
    "end": "514140"
  },
  {
    "text": "keys referencing other tables in a no sequel architecture the database the",
    "start": "514140",
    "end": "520500"
  },
  {
    "text": "data model is highly denormalized which means that all the data that you need",
    "start": "520500",
    "end": "525690"
  },
  {
    "text": "for a particular transaction all sits in the same row right and we'll go into why this design has evolved and become more",
    "start": "525690",
    "end": "532860"
  },
  {
    "text": "popular in a couple of slides but in in such a model now because it is highly",
    "start": "532860",
    "end": "538170"
  },
  {
    "text": "denormalized and you don't have this the differential Integrity's between tables you can shard",
    "start": "538170",
    "end": "543240"
  },
  {
    "text": "their data or in terms of partition keys you choose a partition key where you can",
    "start": "543240",
    "end": "549480"
  },
  {
    "text": "split the data equally across in different pieces so once your data grows",
    "start": "549480",
    "end": "554880"
  },
  {
    "text": "you just get a new partition key and split it off separately and if your data",
    "start": "554880",
    "end": "560339"
  },
  {
    "text": "base becomes even more bigger then you choose a more finer control partition key so you have bigger partitions and will go there are some compromises in",
    "start": "560339",
    "end": "567570"
  },
  {
    "text": "design patterns that you make in this design and we'll go through that in a minute",
    "start": "567570",
    "end": "572660"
  },
  {
    "text": "so this is exactly what I was trying to explain where you have this partition keys and each partition goes to its own",
    "start": "572660",
    "end": "578940"
  },
  {
    "text": "server and now you can have a former servers that will deal with that bucket",
    "start": "578940",
    "end": "584010"
  },
  {
    "text": "of data that belongs to that partition",
    "start": "584010",
    "end": "588560"
  },
  {
    "text": "so when you're choosing a database there are let me go through all the pieces",
    "start": "590899",
    "end": "597149"
  },
  {
    "text": "that comes in this slide ok so when you're going through selecting a particular database for your workload",
    "start": "597149",
    "end": "604800"
  },
  {
    "text": "there are three key fundamental concepts and you want to keep in mind any given",
    "start": "604800",
    "end": "610860"
  },
  {
    "text": "database will have a capacity concurrency where when you enter data or",
    "start": "610860",
    "end": "616350"
  },
  {
    "text": "commit a data into the database any subsequent reads should see or get the value of the latest committed data that",
    "start": "616350",
    "end": "623880"
  },
  {
    "text": "is concurrency or consistency all data",
    "start": "623880",
    "end": "629190"
  },
  {
    "text": "reads are stored and any subsequent reads access the data availability is if",
    "start": "629190",
    "end": "635910"
  },
  {
    "text": "you have a multi node cluster if the instance goes down is is your database available for both read and write",
    "start": "635910",
    "end": "642420"
  },
  {
    "text": "operations it should be both read and write you could have only read-only operation which means that for that",
    "start": "642420",
    "end": "648420"
  },
  {
    "text": "point of time nobody can write data into the database so when you're talking about consistency sorry availability you",
    "start": "648420",
    "end": "656790"
  },
  {
    "text": "are talking about both read and write availability and then partition tolerance in your database architecture",
    "start": "656790",
    "end": "662730"
  },
  {
    "text": "in the physical architecture if any one of your component goes down how does your database handle that",
    "start": "662730",
    "end": "668519"
  },
  {
    "text": "failure is it available for your customers to continue their business",
    "start": "668519",
    "end": "673680"
  },
  {
    "text": "process ignoring what that failure happened now databases have to choose",
    "start": "673680",
    "end": "679560"
  },
  {
    "text": "between these three key elements they have to choose or two of them and they",
    "start": "679560",
    "end": "684720"
  },
  {
    "text": "have to sacrifice they have to make a decision on what they're going to sacrifice in these three pillars so",
    "start": "684720",
    "end": "691200"
  },
  {
    "text": "relational databases which run on a single server have an availability sorted out because if the server is",
    "start": "691200",
    "end": "697560"
  },
  {
    "text": "known the entire database is now and if the server is up it's available for read and write so availability and",
    "start": "697560",
    "end": "702930"
  },
  {
    "text": "consistency are the two pillars that relational database is traditionally pick so consistency is if you have an",
    "start": "702930",
    "end": "709500"
  },
  {
    "text": "Oracle database or a my sequel or Posterous you enter a data you enter a",
    "start": "709500",
    "end": "714510"
  },
  {
    "text": "record or an invoice it goes comments into the database any subsequent reads will go and read their data that's",
    "start": "714510",
    "end": "720209"
  },
  {
    "text": "committed and they have algorithms of you know Oracle has this redo logs where",
    "start": "720209",
    "end": "725790"
  },
  {
    "text": "it will see what's the data in the table what's the data in the buffer cache and make sure which is the latest timestamp",
    "start": "725790",
    "end": "732089"
  },
  {
    "text": "to pick up the latest record that's currently committed in the database so",
    "start": "732089",
    "end": "737430"
  },
  {
    "text": "that's how relational databases have this mechanism of doing consistency now",
    "start": "737430",
    "end": "742920"
  },
  {
    "text": "partition tolerance is something you know or we have multi node clusters in",
    "start": "742920",
    "end": "749279"
  },
  {
    "text": "my sequel in Postgres in Oracle that are different the same clustering technology",
    "start": "749279",
    "end": "754470"
  },
  {
    "text": "is implemented with slightly different variations but all of these technologies",
    "start": "754470",
    "end": "761310"
  },
  {
    "text": "have a bottleneck where any one of these component goes down the entire database goes down it is not tolerant to having",
    "start": "761310",
    "end": "768000"
  },
  {
    "text": "failures within that database architecture now if you took if you like take a look at no sequel databases they",
    "start": "768000",
    "end": "776130"
  },
  {
    "text": "have given a the pillar that they compromised on is consistency there is a",
    "start": "776130",
    "end": "784290"
  },
  {
    "text": "concept in no sequel databases called eventual consistency so when a user goes",
    "start": "784290",
    "end": "791430"
  },
  {
    "text": "and commits data into the database it might take a few milliseconds for that data to propagate to all the nodes as",
    "start": "791430",
    "end": "798300"
  },
  {
    "text": "which are part of their database now during in that millisecond delay if",
    "start": "798300",
    "end": "803570"
  },
  {
    "text": "another person comes and reads the data there is a chance that the data can be stale so that is where the consistency",
    "start": "803570",
    "end": "810290"
  },
  {
    "text": "compromises this type of consistency model is called eventual consistency where data will eventually be propagated",
    "start": "810290",
    "end": "818330"
  },
  {
    "text": "to all the nodes which are part of the database but there might be a few milliseconds of delay you don't get that delay in relational databases no sequel",
    "start": "818330",
    "end": "825530"
  },
  {
    "text": "that's why they made the compromise and now if you take out the c-pillar of the",
    "start": "825530",
    "end": "830810"
  },
  {
    "text": "three pillars there you talk about a and P partition tolerance where you have no",
    "start": "830810",
    "end": "836330"
  },
  {
    "text": "sequel databases that are spread across hundreds of servers if one of the server's goes down that's perfectly fine",
    "start": "836330",
    "end": "842540"
  },
  {
    "text": "there will be other nodes that are available for the database to be up and we'll talk about how dynamodb handles",
    "start": "842540",
    "end": "850940"
  },
  {
    "text": "partition tolerance when we go deeper into then woody B so I've got some of",
    "start": "850940",
    "end": "857510"
  },
  {
    "text": "the tables or databases here which you know popular databases that's available today and which particular category they",
    "start": "857510",
    "end": "865460"
  },
  {
    "text": "fall into if you see there the ca where there's consistency and availability you",
    "start": "865460",
    "end": "872120"
  },
  {
    "text": "have a lot of the relational databases your Microsoft sequel Oracle db2",
    "start": "872120",
    "end": "877270"
  },
  {
    "text": "Postgres and other relational databases in the consistency versus partition tolerance we have dynamodb Couchbase",
    "start": "877270",
    "end": "885590"
  },
  {
    "text": "memcache Redis and other key value pair databases and in the availability and",
    "start": "885590",
    "end": "892880"
  },
  {
    "text": "partition tolerance we have Cassandra dynamodb has a couple of modes we talked",
    "start": "892880",
    "end": "900200"
  },
  {
    "text": "about that they have eventual consistency and strong consistency available when you choose when you create a table you can choose so",
    "start": "900200",
    "end": "906800"
  },
  {
    "text": "DynamoDB is the only database that falls into both these categories where it you can either choose availability and",
    "start": "906800",
    "end": "913130"
  },
  {
    "text": "partition tolerance or you could choose consistency in partition tolerance",
    "start": "913130",
    "end": "918730"
  },
  {
    "text": "yeah so the question is as a user do you",
    "start": "928580",
    "end": "937470"
  },
  {
    "text": "have to pick any of these two of the three pillars in the when you pick DynamoDB that is right so when you go",
    "start": "937470",
    "end": "945840"
  },
  {
    "text": "and configure a dynamodb table on the console you get to choose whether you want strong consistency or eventual",
    "start": "945840",
    "end": "952020"
  },
  {
    "text": "consistency so that is when you're making the choice of which two of the pillars are critical for you so this is",
    "start": "952020",
    "end": "962580"
  },
  {
    "text": "a technology adoption and hype curve so anytime there is a new technology there",
    "start": "962580",
    "end": "968190"
  },
  {
    "start": "964000",
    "end": "964000"
  },
  {
    "text": "is early adopters and then there is early adopters go and implement the new",
    "start": "968190",
    "end": "974730"
  },
  {
    "text": "technology using the same old concept that they have learned this is very true",
    "start": "974730",
    "end": "980100"
  },
  {
    "text": "with databases you know for the last 3040 years we are so used to relational database models and having a normalized",
    "start": "980100",
    "end": "988830"
  },
  {
    "text": "architecture for our application and normally developers go use a no sequel database and try to implement the same",
    "start": "988830",
    "end": "996300"
  },
  {
    "text": "normalized architecture in an no sequel database so what are you doing then then when you're doing those joins and",
    "start": "996300",
    "end": "1002420"
  },
  {
    "text": "handling all the concurrence the joins add the application layer so going to the database doing a select star and in",
    "start": "1002420",
    "end": "1009560"
  },
  {
    "text": "the application layer you're trying to do all the business logic of joins and then you run into performance issues so",
    "start": "1009560",
    "end": "1015110"
  },
  {
    "text": "that's that's where early adopters get into some kind of disappointment in",
    "start": "1015110",
    "end": "1020240"
  },
  {
    "text": "terms of why the technology is not working so you need to build a new muzzle think through in a different",
    "start": "1020240",
    "end": "1026990"
  },
  {
    "text": "angle when you starting to use the new technology then you have the majority early majority adopters and in the last",
    "start": "1026990",
    "end": "1033770"
  },
  {
    "text": "ten years I think no sequel is slightly getting into the early majority concept I was doing some research in preparing",
    "start": "1033770",
    "end": "1041180"
  },
  {
    "text": "for this session I think 2007 was when Amazon released",
    "start": "1041180",
    "end": "1046490"
  },
  {
    "text": "the dynamodb white paper and a lot of the new sequel databases have eventually come out of that white paper that was",
    "start": "1046490",
    "end": "1053300"
  },
  {
    "text": "released I think around 2007-2008 timeframe that's why paper is publicly available",
    "start": "1053300",
    "end": "1059970"
  },
  {
    "text": "if you want to read about why a no sequel database was created in Amazon what was the problems we're trying to",
    "start": "1059970",
    "end": "1066120"
  },
  {
    "text": "solve that's a very interesting and very dense white paper if you if you want",
    "start": "1066120",
    "end": "1071130"
  },
  {
    "text": "some you know you have a afternoon free and you want to read through that that might be a good good pick and then you",
    "start": "1071130",
    "end": "1077580"
  },
  {
    "text": "have late majority and laggards we have seen we have gone through you know big",
    "start": "1077580",
    "end": "1083880"
  },
  {
    "text": "large enterprises I go through a lot of higher educational institutions that are using ERP systems that are probably 20",
    "start": "1083880",
    "end": "1090840"
  },
  {
    "text": "30 years old I went to an institute like about three months ago they were still using Solaris alright solaris has been",
    "start": "1090840",
    "end": "1098220"
  },
  {
    "text": "dead for many many years now so it takes time for depending on what your",
    "start": "1098220",
    "end": "1103470"
  },
  {
    "text": "organization is very very you are in your growth phase it might take time to adopt technology so what is when you log",
    "start": "1103470",
    "end": "1114960"
  },
  {
    "text": "when you are on the AWS platform what are the different database flavors that",
    "start": "1114960",
    "end": "1120179"
  },
  {
    "text": "you have access to so I have summarized here there are a few of these that we went through in the last couple of days",
    "start": "1120179",
    "end": "1127100"
  },
  {
    "text": "especially RDS relational database how to run relational databases Aurora is a",
    "start": "1127100",
    "end": "1133380"
  },
  {
    "text": "Postgres compatible database that is managed by Amazon for you so it can",
    "start": "1133380",
    "end": "1139590"
  },
  {
    "text": "scale the scaling managing backups recovery everything is handled by AWS",
    "start": "1139590",
    "end": "1146220"
  },
  {
    "text": "and you as a consumer just need to start putting data in and it scales automatically and I think there was a",
    "start": "1146220",
    "end": "1153179"
  },
  {
    "text": "session in the last couple of days if you can go to the git repo and play with that particular workshop that's the",
    "start": "1153179",
    "end": "1159870"
  },
  {
    "text": "relational database world in the no sequel we have dynamodb which we are going to dive a little deeper day in",
    "start": "1159870",
    "end": "1166290"
  },
  {
    "text": "today's workshop is also built on dynamodb so you'll get some hands-on experience creating a table and",
    "start": "1166290",
    "end": "1172940"
  },
  {
    "text": "manipulating data of within DynamoDB Neptune is a graph database we announced",
    "start": "1172940",
    "end": "1178350"
  },
  {
    "text": "that in reinvent this year this is a popular design pattern for social media",
    "start": "1178350",
    "end": "1185370"
  },
  {
    "text": "companies like Facebook or LinkedIn where you want to have linked friends of friends of friends and",
    "start": "1185370",
    "end": "1190710"
  },
  {
    "text": "you know what their interests are if you try to implement that we'll go that will go into that in a couple of slides",
    "start": "1190710",
    "end": "1197180"
  },
  {
    "text": "ElastiCache is a caching mechanism where it's typically Redis and memcache D or",
    "start": "1197180",
    "end": "1204480"
  },
  {
    "text": "the open-source databases for cash so if you have a relational database where you're your application server is",
    "start": "1204480",
    "end": "1210960"
  },
  {
    "text": "hitting the database for every single select you know you're going to have a performance degradation there because",
    "start": "1210960",
    "end": "1215970"
  },
  {
    "text": "relational databases are traditionally slow so one strategy would be to if the",
    "start": "1215970",
    "end": "1221430"
  },
  {
    "text": "query is hit multiple times you cash it in a very fast in memory database like there it is on memcache and then your",
    "start": "1221430",
    "end": "1228510"
  },
  {
    "text": "query no longer hits the database it gets the data from the in-memory cache and it makes it much more faster qld B",
    "start": "1228510",
    "end": "1236460"
  },
  {
    "text": "is a ledger database quantum ledger database that we announced in reinvent",
    "start": "1236460",
    "end": "1243060"
  },
  {
    "text": "last year I think it is still in preview but it is a it is based on you know open",
    "start": "1243060",
    "end": "1249930"
  },
  {
    "text": "source concepts of blockchain I think it helium and some of those are ledger de",
    "start": "1249930",
    "end": "1256380"
  },
  {
    "text": "or concepts were on which the ledger database is built so that it is a zero trust system if you have a financial",
    "start": "1256380",
    "end": "1263100"
  },
  {
    "text": "system or a supply chain you don't want to trust a person or a system so you have a mechanism where multiple systems",
    "start": "1263100",
    "end": "1269550"
  },
  {
    "text": "are keeping each other in checks and balance similar concept is blockchain and that's what the QL DB server",
    "start": "1269550",
    "end": "1275700"
  },
  {
    "text": "databases we have timestream there are a number of use cases where you have time",
    "start": "1275700",
    "end": "1282030"
  },
  {
    "text": "series data it could be the log data in your application server or it could be",
    "start": "1282030",
    "end": "1287370"
  },
  {
    "text": "IOT systems there are constantly streaming data into your 404 into your system and it's immutable you don't go",
    "start": "1287370",
    "end": "1296070"
  },
  {
    "text": "and edit or modify this data it is a you know data that is sent by your device as",
    "start": "1296070",
    "end": "1301410"
  },
  {
    "text": "a source of truth you are accumulating the data and running analytics and reports on that data so that time stream",
    "start": "1301410",
    "end": "1308250"
  },
  {
    "text": "makes it much much faster compared to any other database solution you have today on the analytics side we spoke",
    "start": "1308250",
    "end": "1316380"
  },
  {
    "text": "about decision support systems we have Amazon redshift which is a columnar",
    "start": "1316380",
    "end": "1322350"
  },
  {
    "text": "database we'll talk about that later on what is the columnar database it is Postgres",
    "start": "1322350",
    "end": "1328230"
  },
  {
    "text": "it's built on post Chris it's not billboards compatible but that some Fork of phosphorus was taken and redshifts",
    "start": "1328230",
    "end": "1334740"
  },
  {
    "text": "was built on that it is a relational database so you can't run relational sequel type queries on redshift elastic",
    "start": "1334740",
    "end": "1343470"
  },
  {
    "text": "MapReduce EMR basically this is the Hadoop ecosystem that you can run",
    "start": "1343470",
    "end": "1348540"
  },
  {
    "text": "managed by AWS Athena Athena is a data Lake concept where you can run sequel",
    "start": "1348540",
    "end": "1355590"
  },
  {
    "text": "like queries on structured semi-structured data without going through the process of doing an ETL",
    "start": "1355590",
    "end": "1361860"
  },
  {
    "text": "right traditional data warehouses if you if you run it in your system you have a source of truth which is your OLTP",
    "start": "1361860",
    "end": "1368280"
  },
  {
    "text": "system which is highly normalized and you can't run large queries against that",
    "start": "1368280",
    "end": "1374280"
  },
  {
    "text": "because it's going to bring that system down so you transport the data in it's called an ETL in traditional world you",
    "start": "1374280",
    "end": "1381030"
  },
  {
    "text": "extract data or transform it and load it back into another database so that it is a semi denormalized traditional",
    "start": "1381030",
    "end": "1389250"
  },
  {
    "text": "strategies are like a star schema where you have a huge fact table and you have dimensions around that and you could run",
    "start": "1389250",
    "end": "1395640"
  },
  {
    "text": "large queries against these systems that you don't have to go through that ETL process you can run that query in at the",
    "start": "1395640",
    "end": "1403200"
  },
  {
    "text": "source when you have engines like Athena",
    "start": "1403200",
    "end": "1408260"
  },
  {
    "text": "elasticsearch this is a search engine that you can type your data into that gives you much faster access search is",
    "start": "1408260",
    "end": "1415860"
  },
  {
    "text": "designed slightly differently than databases you know you have this inverted indexes that",
    "start": "1415860",
    "end": "1422340"
  },
  {
    "text": "are built on all the documents and content that you send so that your search words or index so that it gets to",
    "start": "1422340",
    "end": "1429180"
  },
  {
    "text": "the content much faster when you're doing the search Kinesis Kinesis is a de",
    "start": "1429180",
    "end": "1434280"
  },
  {
    "text": "e is a connector that you can leverage",
    "start": "1434280",
    "end": "1439560"
  },
  {
    "text": "to stream data into your data warehouse so you have a iot system where you have",
    "start": "1439560",
    "end": "1445260"
  },
  {
    "text": "millions of devices streaming data then you want to accumulate in a database you could stream that data into the database",
    "start": "1445260",
    "end": "1452520"
  },
  {
    "text": "in real time and Kinesis has a few flavors like Kinesis stream fire hose these are some of the we had a",
    "start": "1452520",
    "end": "1460260"
  },
  {
    "text": "problem of billions of events happening simultaneously and those all need to be accumulated and inserted into a database",
    "start": "1460260",
    "end": "1467490"
  },
  {
    "text": "now if you try to do if each of the devices try to insert data into the database your database is going to be",
    "start": "1467490",
    "end": "1473730"
  },
  {
    "text": "the biggest bottleneck so Kinesis allows you to stream it into a pipe which",
    "start": "1473730",
    "end": "1479220"
  },
  {
    "text": "decouples your i/o devices in the edge and your database so devices put it into",
    "start": "1479220",
    "end": "1484740"
  },
  {
    "text": "a stream and they forget about it and the stream eventually takes it and loads it into the database we talk about data",
    "start": "1484740",
    "end": "1493470"
  },
  {
    "text": "Lake in one of the earlier latest slides how you can build this data lake and",
    "start": "1493470",
    "end": "1499230"
  },
  {
    "text": "what is the why this is becoming the new normal in terms of data analytics Rd is",
    "start": "1499230",
    "end": "1506549"
  },
  {
    "text": "I don't want to spend too much time on this slide we spoke about it last couple of days you can run any of these flavors",
    "start": "1506549",
    "end": "1511649"
  },
  {
    "start": "1509000",
    "end": "1509000"
  },
  {
    "text": "of database on AWS aw you don't have to take that overhead of managing the",
    "start": "1511649",
    "end": "1518639"
  },
  {
    "text": "server's managing backups patching these are some of the activities what we call",
    "start": "1518639",
    "end": "1524490"
  },
  {
    "text": "as undifferentiated activity for a business right you know if you're running a business of a social media software your strength is not managing",
    "start": "1524490",
    "end": "1533309"
  },
  {
    "text": "databases or servers in the backend so you want to offload that to a platform that does it for you and you can",
    "start": "1533309",
    "end": "1540419"
  },
  {
    "text": "leverage all your resources on building your application or what's the main funk",
    "start": "1540419",
    "end": "1547490"
  },
  {
    "text": "all your resources for your main application so dynamodb now diving deep",
    "start": "1548029",
    "end": "1557070"
  },
  {
    "text": "slightly deeper and focusing on DynamoDB it's a highly scalable petabyte sized",
    "start": "1557070",
    "end": "1564179"
  },
  {
    "text": "database it's fast consistent performance the disks under dynamodb the",
    "start": "1564179",
    "end": "1569730"
  },
  {
    "text": "way it is designed in the back it uses SSD disks and if you're familiar with",
    "start": "1569730",
    "end": "1575039"
  },
  {
    "text": "AWS infrastructure we have a concept called regions and availability zones so",
    "start": "1575039",
    "end": "1580500"
  },
  {
    "text": "you have a region which is a geographic location which could be us east one u.s. west which is in oregon or in california",
    "start": "1580500",
    "end": "1587820"
  },
  {
    "text": "there are about five regions in the United States and within each region we have availability zones which are a",
    "start": "1587820",
    "end": "1594510"
  },
  {
    "text": "minimum distance apart and each availability zone is a cluster of data centers so we want to build that",
    "start": "1594510",
    "end": "1600750"
  },
  {
    "text": "redundancy and scalability in the backend for your applications so when",
    "start": "1600750",
    "end": "1605820"
  },
  {
    "text": "you are launched an application and you have two web servers for that application you can choose each of those",
    "start": "1605820",
    "end": "1612330"
  },
  {
    "text": "web servers to be in two different availability zones so if an availability zone goes down because of a natural",
    "start": "1612330",
    "end": "1619380"
  },
  {
    "text": "disaster or because of a power outage or an internet problem your second availability zone has a",
    "start": "1619380",
    "end": "1625320"
  },
  {
    "text": "completely different set of providers so we don't have anything common between the availability since there is no",
    "start": "1625320",
    "end": "1631440"
  },
  {
    "text": "dependency or a common factor so if an availability zone goes down the secondary zone is up and running for you",
    "start": "1631440",
    "end": "1637380"
  },
  {
    "text": "so your application will continue to work because you have a web server in the second easy so I gave that",
    "start": "1637380",
    "end": "1643440"
  },
  {
    "text": "background because the way we have designed dynamodb is it's a three",
    "start": "1643440",
    "end": "1649650"
  },
  {
    "text": "availability zone architecture so anytime you insert a data into DynamoDB it makes multiple copies of that across",
    "start": "1649650",
    "end": "1657240"
  },
  {
    "text": "three availability zones so it's a highly available database and highly",
    "start": "1657240",
    "end": "1662910"
  },
  {
    "text": "scalable in the backend you know we build dynam dynamodb is one of the most",
    "start": "1662910",
    "end": "1669300"
  },
  {
    "text": "critical services when we launched a new region in AWS it's like it's called a Tier one service so in a region cannot",
    "start": "1669300",
    "end": "1677940"
  },
  {
    "text": "be launched without dynamodb functioning in that region so it's a very critical",
    "start": "1677940",
    "end": "1683390"
  },
  {
    "text": "service both for Amazon it for for all of our customers you know if you take",
    "start": "1683390",
    "end": "1688500"
  },
  {
    "text": "your smart phone and go through your app list you know most of those apps are",
    "start": "1688500",
    "end": "1693600"
  },
  {
    "text": "using dynamodb in the backend so it is a very privileged no sequel database today and that's why it's built",
    "start": "1693600",
    "end": "1700850"
  },
  {
    "text": "in that architecture it's fully managed which means as a as a user of dynamodb",
    "start": "1700850",
    "end": "1708270"
  },
  {
    "text": "the only thing you're worried about is the API so there's a REST API you know",
    "start": "1708270",
    "end": "1714270"
  },
  {
    "text": "even though we have multiple database flavors you don't have to go through learning each of those architectures all",
    "start": "1714270",
    "end": "1720690"
  },
  {
    "text": "of them have a REST API as the front so as a developer you just call an SD API to get put post the standard REST",
    "start": "1720690",
    "end": "1728520"
  },
  {
    "text": "API calls and it's fully managed in the backend in terms of backups we'll go",
    "start": "1728520",
    "end": "1735690"
  },
  {
    "text": "through that you know we have dynamodb as streams we'll talk about that in a",
    "start": "1735690",
    "end": "1740760"
  },
  {
    "text": "couple of slides so the activity of managing patching backing up the",
    "start": "1740760",
    "end": "1747600"
  },
  {
    "text": "database is done by Amazon for you and especially with the architectures that I",
    "start": "1747600",
    "end": "1752820"
  },
  {
    "text": "just spoke about the three easy architecture gives that flexibility and",
    "start": "1752820",
    "end": "1758220"
  },
  {
    "text": "business-critical reliability we spoke about multi AC architectures so when you",
    "start": "1758220",
    "end": "1765780"
  },
  {
    "text": "start using DynamoDB how does that organize data as you start inserting",
    "start": "1765780",
    "end": "1772860"
  },
  {
    "start": "1766000",
    "end": "1766000"
  },
  {
    "text": "records so if we spoke about no sequel databases having highly denormalized",
    "start": "1772860",
    "end": "1780290"
  },
  {
    "text": "architecture so every single row here every single row here is called an item",
    "start": "1780290",
    "end": "1787080"
  },
  {
    "text": "an item is equivalent to a row in a relational database and attribute is equal to a column in a",
    "start": "1787080",
    "end": "1794490"
  },
  {
    "text": "relational database but a relational database is very strict in terms of the number of columns you need to decide",
    "start": "1794490",
    "end": "1800910"
  },
  {
    "text": "that ahead of time and then every record that you put in has most of the column values and in dynamodb you don't need to",
    "start": "1800910",
    "end": "1809700"
  },
  {
    "text": "have all attributes for every column that you put sub sorry you are creating a database for the users of your app on",
    "start": "1809700",
    "end": "1818130"
  },
  {
    "text": "your mobile phone so some users share a lot of that interest so you could have those as attributes like what is the",
    "start": "1818130",
    "end": "1824700"
  },
  {
    "text": "favorite sport or the favorite movie you know whatever interests are there for that user but some of them might decide",
    "start": "1824700",
    "end": "1831150"
  },
  {
    "text": "not to share that information with you right so they might not have or might not provide all the attributes so you",
    "start": "1831150",
    "end": "1838140"
  },
  {
    "text": "can have a highly flexible structure for your items and in a dynamo DB for the",
    "start": "1838140",
    "end": "1847020"
  },
  {
    "text": "schema what is critical is called is the partition key so every item in the database should have a partition key and",
    "start": "1847020",
    "end": "1853530"
  },
  {
    "text": "I will go into that shortly and you can optionally have a short key so a",
    "start": "1853530",
    "end": "1859320"
  },
  {
    "text": "partition key we spoke about how no sequel databases are organized you have",
    "start": "1859320",
    "end": "1864390"
  },
  {
    "text": "the shards based on partition key they go to a specific bucket and and that's where those records reside so when you",
    "start": "1864390",
    "end": "1872790"
  },
  {
    "text": "decide what a partition key is your you what DynamoDB does is does a hash of that partition key and then decides",
    "start": "1872790",
    "end": "1879780"
  },
  {
    "text": "which partition does this data go and sit in all right that's the that's why",
    "start": "1879780",
    "end": "1885060"
  },
  {
    "text": "partition key is critical for every item that you insert into DynamoDB now you",
    "start": "1885060",
    "end": "1892740"
  },
  {
    "text": "want to run obviously one run queries on these items that you inserted into DynamoDB and that's where the sort key",
    "start": "1892740",
    "end": "1899580"
  },
  {
    "text": "comes into picture is sorts based on date or time and you can have a complex",
    "start": "1899580",
    "end": "1904620"
  },
  {
    "text": "sort key so that you could use that in your where clause you could you can say select star from this particular table",
    "start": "1904620",
    "end": "1911910"
  },
  {
    "text": "where all orders are less than 30 days and the sort key index will be used by",
    "start": "1911910",
    "end": "1918480"
  },
  {
    "text": "your query to give that faster now dynamodb gives you a little bit more",
    "start": "1918480",
    "end": "1923580"
  },
  {
    "text": "flexibility in terms of what's called global secondary indexes and local secondary indexes so let's go let me see",
    "start": "1923580",
    "end": "1931230"
  },
  {
    "text": "if that's this is you know the side by",
    "start": "1931230",
    "end": "1938100"
  },
  {
    "text": "side pattern on the architecture of no sequel versus sequel databases if you see what's on my right there is a highly",
    "start": "1938100",
    "end": "1946290"
  },
  {
    "start": "1939000",
    "end": "1939000"
  },
  {
    "text": "normalized architecture for a relational database right you have about three three six seven tables for that product",
    "start": "1946290",
    "end": "1954500"
  },
  {
    "text": "feature and every time you run a query on the product you need to go and do the joints with six other tables to get all",
    "start": "1954500",
    "end": "1961650"
  },
  {
    "text": "that information about that particular product you know who are the actors and",
    "start": "1961650",
    "end": "1967110"
  },
  {
    "text": "this is about movies what are the album's books everything for that particular product now in a no sequel",
    "start": "1967110",
    "end": "1973200"
  },
  {
    "text": "database it would be a single table like that which has all those attributes in a",
    "start": "1973200",
    "end": "1978510"
  },
  {
    "text": "single table so you do just you the query that you run on a no sequel database is just select star from the",
    "start": "1978510",
    "end": "1984570"
  },
  {
    "text": "table and you don't have to worry about any joints now if you think why relational databases would",
    "start": "1984570",
    "end": "1991020"
  },
  {
    "text": "designed like that you know 30 40 years ago storage was very expensive right and",
    "start": "1991020",
    "end": "1997410"
  },
  {
    "text": "you had to design optimize your architecture to minimize the use of",
    "start": "1997410",
    "end": "2003080"
  },
  {
    "text": "storage and that's why the repetition of data in a normalized architecture what",
    "start": "2003080",
    "end": "2009830"
  },
  {
    "text": "you're achieving is reducing the repetition of the value you're using an ID instead of the whole value so you're",
    "start": "2009830",
    "end": "2016100"
  },
  {
    "text": "reducing the amount of space that particular value will take by referencing it has an ID and the value",
    "start": "2016100",
    "end": "2022100"
  },
  {
    "text": "of that ID is stored in just say let's say it's a state ID you're storing all the 50 states and you have a state ID",
    "start": "2022100",
    "end": "2029150"
  },
  {
    "text": "and name of the full state so any other table that requires that state",
    "start": "2029150",
    "end": "2034250"
  },
  {
    "text": "information will not don't have to will not have to store the name of the full state it just have to store the ID and",
    "start": "2034250",
    "end": "2040820"
  },
  {
    "text": "you're saving that much space but you roll forward 30 40 years today storage",
    "start": "2040820",
    "end": "2047150"
  },
  {
    "text": "is not expensive all right what is expensive is compute so you allowed the CPU to do all those joints and bring the",
    "start": "2047150",
    "end": "2055490"
  },
  {
    "text": "data out in the past today you you you don't care about duplicating the data",
    "start": "2055490",
    "end": "2060530"
  },
  {
    "text": "right if you look at the attribute the tie price description title for every",
    "start": "2060530",
    "end": "2065629"
  },
  {
    "text": "product is going to be stored for every single record but storage is not expensive what is expensive is computer",
    "start": "2065630",
    "end": "2071000"
  },
  {
    "text": "and you want that results to come out really fast and that's where the design compromises are why relational database",
    "start": "2071000",
    "end": "2077750"
  },
  {
    "text": "was designed the way it was designed in the 70s and the 80s and why no sequel why it didn't solve today's problems so",
    "start": "2077750",
    "end": "2089960"
  },
  {
    "text": "that let me see if I miss something so we spoke about the difference between no",
    "start": "2089960",
    "end": "2096590"
  },
  {
    "text": "sequel and relational databases I briefly mentioned about local indexes and global indexes let me spend a couple",
    "start": "2096590",
    "end": "2102680"
  },
  {
    "text": "of minutes on that so when you decide when you design a table you design",
    "start": "2102680",
    "end": "2108080"
  },
  {
    "text": "what's the primary key and what's the sort key and let's say three months from now or later on you dis your",
    "start": "2108080",
    "end": "2115730"
  },
  {
    "text": "requirements changed your query patterns changed now you want a different partition key and a different way to",
    "start": "2115730",
    "end": "2121280"
  },
  {
    "text": "query the index you could dynamo gives you the option of creating what's",
    "start": "2121280",
    "end": "2127010"
  },
  {
    "text": "called the global secondary index this is a way where you can reorganize the",
    "start": "2127010",
    "end": "2132050"
  },
  {
    "text": "table for handling specific type of queries now the fundamental difference",
    "start": "2132050",
    "end": "2137150"
  },
  {
    "text": "is when in no sequel databases when you design the table you want to know",
    "start": "2137150",
    "end": "2142760"
  },
  {
    "text": "exactly what the query patterns are it's very hard to change the design once you",
    "start": "2142760",
    "end": "2149510"
  },
  {
    "text": "put this architecture in place if your query pattern changes in a relational database you know you can go build an",
    "start": "2149510",
    "end": "2156350"
  },
  {
    "text": "index and if a query pattern changes you can look at the explained plan and see",
    "start": "2156350",
    "end": "2161810"
  },
  {
    "text": "how the optimizer decided to run that query and start manipulating the indexes no sequel databases none of the rotor",
    "start": "2161810",
    "end": "2169130"
  },
  {
    "text": "sequel database gives you that flexibility so you want to know how to handle what are the incoming query",
    "start": "2169130",
    "end": "2175310"
  },
  {
    "text": "patterns and design the table based on the query patterns dynamodb gives you a",
    "start": "2175310",
    "end": "2181850"
  },
  {
    "text": "little bit more flexibility there you can build what's called global secondary indexes and change the partition key and",
    "start": "2181850",
    "end": "2187490"
  },
  {
    "text": "sort key in the local indexes the index is within a partition the global indexes",
    "start": "2187490",
    "end": "2194000"
  },
  {
    "text": "can go across all partitions and you can change the primary partition key in",
    "start": "2194000",
    "end": "2199250"
  },
  {
    "text": "short key a local indexes operate within a single partition if you remember the",
    "start": "2199250",
    "end": "2204590"
  },
  {
    "text": "architecture we had for no sequel databases where you have partition of data based on the partition key so you",
    "start": "2204590",
    "end": "2211460"
  },
  {
    "text": "can create about 25 local indexes and about 5 global indexes so there are some",
    "start": "2211460",
    "end": "2217220"
  },
  {
    "text": "limit limitations that you need to consider when you start designing the tables we'll go through that I think the",
    "start": "2217220",
    "end": "2224240"
  },
  {
    "text": "workshop handles a little bit of that but you you'll see that when once you create the table DynamoDB table amazon",
    "start": "2224240",
    "end": "2234230"
  },
  {
    "text": "neptune is the graph database that we launched in a dream and the session",
    "start": "2234230",
    "end": "2240380"
  },
  {
    "start": "2238000",
    "end": "2238000"
  },
  {
    "text": "after this afternoon is about graph databases in neptune so I will go",
    "start": "2240380",
    "end": "2245720"
  },
  {
    "text": "through this faster because we will have a deeper dive this afternoon so",
    "start": "2245720",
    "end": "2250960"
  },
  {
    "text": "yeah so the question is DynamoDB handles up their inserts and read operations in",
    "start": "2267460",
    "end": "2275140"
  },
  {
    "text": "a highly scalable way how does DynamoDB handle updates right",
    "start": "2275140",
    "end": "2281400"
  },
  {
    "text": "so when two processors are trying to update the same record how does it handle concurrency that's a very good",
    "start": "2284880",
    "end": "2290410"
  },
  {
    "text": "question time stamp is by default at the",
    "start": "2290410",
    "end": "2295690"
  },
  {
    "text": "lowermost level we look at what's the timestamp when the insert happened and take the insert that came in at the",
    "start": "2295690",
    "end": "2301240"
  },
  {
    "text": "latest timestamp that is how concurrency is if you look at dynamodb we launched a",
    "start": "2301240",
    "end": "2307480"
  },
  {
    "text": "new feature in rain event this year called global tables today you can have a dynamodb table that can span across",
    "start": "2307480",
    "end": "2314740"
  },
  {
    "text": "multiple regions across the world right before that feature you're dynamodb",
    "start": "2314740",
    "end": "2321339"
  },
  {
    "text": "table would be in a single region across multiple availability zones the global table gives you the possibility to have",
    "start": "2321339",
    "end": "2327790"
  },
  {
    "text": "multiple DynamoDB table across multiple regions where it gives you this scenario",
    "start": "2327790",
    "end": "2334180"
  },
  {
    "text": "of having multi masters right where you have inserts from multiple masters and timestamp is the way where we decide",
    "start": "2334180",
    "end": "2340839"
  },
  {
    "text": "what is the latest update that came in and then based on the concurrency model",
    "start": "2340839",
    "end": "2346960"
  },
  {
    "text": "that you choose whether it is strong consistency or eventual consistency we decide what the next read operation will",
    "start": "2346960",
    "end": "2353589"
  },
  {
    "text": "get right does that answer your question",
    "start": "2353589",
    "end": "2358650"
  },
  {
    "text": "correctly",
    "start": "2366920",
    "end": "2369920"
  },
  {
    "text": "correct correct",
    "start": "2377300",
    "end": "2383840"
  },
  {
    "text": "so your question is if you use a no sequel database for an OLTP like",
    "start": "2383840",
    "end": "2389100"
  },
  {
    "text": "application right which it might be the the fundamental topic of today is choosing the right database for your",
    "start": "2389100",
    "end": "2394920"
  },
  {
    "text": "workload for something like that I would choose a relational database if you or you have to be strongly consistent but",
    "start": "2394920",
    "end": "2402330"
  },
  {
    "text": "DynamoDB introduced these features where you have now transactional concurrency right we offer transactional concurrency",
    "start": "2402330",
    "end": "2409860"
  },
  {
    "text": "which gets very close to you get the scale and the scalability of dynamodb",
    "start": "2409860",
    "end": "2415380"
  },
  {
    "text": "with the country with the concurrency that you need for a transaction and the way dynamodb decides with multiple",
    "start": "2415380",
    "end": "2422220"
  },
  {
    "text": "masters is based on types of the last right is what finally gets committed in",
    "start": "2422220",
    "end": "2430980"
  },
  {
    "text": "a global currency yeah correct yeah",
    "start": "2430980",
    "end": "2444050"
  },
  {
    "text": "so the question is fundamentally is DynamoDB like an edge space so if you",
    "start": "2449720",
    "end": "2456000"
  },
  {
    "text": "look at no sequel databases there are about three different architectures that are predominantly in the market one is",
    "start": "2456000",
    "end": "2462660"
  },
  {
    "text": "the key value pair and key value pair is like radius or a memcache where you have a key and the value is a blob and you",
    "start": "2462660",
    "end": "2468870"
  },
  {
    "text": "can manipulate anything within the value so the way database queries use Redis or",
    "start": "2468870",
    "end": "2474300"
  },
  {
    "text": "memcache which is key value pair is if you run a query which say select star from employee tables where employee name",
    "start": "2474300",
    "end": "2481710"
  },
  {
    "text": "is John it will have a query ID attached to it and once that query is served it",
    "start": "2481710",
    "end": "2487320"
  },
  {
    "text": "caches that result in memcache with a value that says the query ID so next",
    "start": "2487320",
    "end": "2492570"
  },
  {
    "text": "time exact same query comes with the same query ID it will fetch the data from the memory instead of going to the",
    "start": "2492570",
    "end": "2498780"
  },
  {
    "text": "database now that's why in relational database we always tell the developments developers to use variables and not hard",
    "start": "2498780",
    "end": "2506490"
  },
  {
    "text": "code values in your where clauses so that each you know select star from employee where employee name is John can",
    "start": "2506490",
    "end": "2512190"
  },
  {
    "text": "be a different query ad to where employee name is Cindy right but if you",
    "start": "2512190",
    "end": "2517620"
  },
  {
    "text": "use a variable then it will use the reuse the optimizer will reuse the same compiled query the second one what",
    "start": "2517620",
    "end": "2524580"
  },
  {
    "text": "DynamoDB is to answer your question is called a white column write a white column no sequel databases is extends",
    "start": "2524580",
    "end": "2532320"
  },
  {
    "text": "the concept of key value pair in a key value like it said the column the value",
    "start": "2532320",
    "end": "2538320"
  },
  {
    "text": "is a blob there is no manipulation that you can do in terms of where clause in the value itself write in a white column",
    "start": "2538320",
    "end": "2546690"
  },
  {
    "text": "it further splits that key value into for the key value pairs so you can now",
    "start": "2546690",
    "end": "2551700"
  },
  {
    "text": "do where clauses on the value itself not just on the key so it can't be just a",
    "start": "2551700",
    "end": "2557400"
  },
  {
    "text": "select star from the table where the key is a key a key value in in dynamodb it",
    "start": "2557400",
    "end": "2566850"
  },
  {
    "text": "extends that concept and makes it a white column where it further divides that value into further key value pairs",
    "start": "2566850",
    "end": "2572310"
  },
  {
    "text": "third type of no sequel is a document database write a MongoDB is a document database it stores the value in",
    "start": "2572310",
    "end": "2578730"
  },
  {
    "text": "JSON format and you can list or retrieve the whole document from that database so",
    "start": "2578730",
    "end": "2586190"
  },
  {
    "text": "dynamodb is more like Cassandra I think they are on the same concept designs in",
    "start": "2586190",
    "end": "2592500"
  },
  {
    "text": "terms of how the no cycle patterns are designed Amazon Neptune we spoke about",
    "start": "2592500",
    "end": "2600990"
  },
  {
    "text": "graph now what is the problem that graph database is trying to solve it is this relation right if I if if there's a",
    "start": "2600990",
    "end": "2608730"
  },
  {
    "start": "2603000",
    "end": "2603000"
  },
  {
    "text": "person bill is visiting Paris he wants to visit a fill tower and he also wants",
    "start": "2608730",
    "end": "2615390"
  },
  {
    "text": "to see what his friends have seen in Paris what are the things that they have done now you if you put this model in a",
    "start": "2615390",
    "end": "2622109"
  },
  {
    "start": "2622000",
    "end": "2622000"
  },
  {
    "text": "relational database it'll be something like this where you have like eight different tables with names relationship",
    "start": "2622109",
    "end": "2627720"
  },
  {
    "text": "places things dates and you're going to run you know at least five different",
    "start": "2627720",
    "end": "2632820"
  },
  {
    "text": "joints to get that information if you implement this in a denormalized it",
    "start": "2632820",
    "end": "2640160"
  },
  {
    "start": "2636000",
    "end": "2636000"
  },
  {
    "text": "denormalized architecture you'd still be more complex but it might be easier we have Bob all his relationship and Bob in",
    "start": "2640160",
    "end": "2648900"
  },
  {
    "text": "graph database is called a node a node is the key entity there so in this case",
    "start": "2648900",
    "end": "2654599"
  },
  {
    "text": "and notice names of all the people here and the main entities like what can be done what are the visiting places that",
    "start": "2654599",
    "end": "2662970"
  },
  {
    "text": "you can visit in Paris and what is Bob's relationship to each of these nodes right Bob is a person he was born on",
    "start": "2662970",
    "end": "2669780"
  },
  {
    "text": "this day his friend of Alice has the interest is moralism so those relationships are all stored in",
    "start": "2669780",
    "end": "2675510"
  },
  {
    "text": "a single record so that you don't have to go to multiple tables to join but it still makes it more complex if you want",
    "start": "2675510",
    "end": "2681780"
  },
  {
    "text": "to tell Bob everything that he can do when he visits in Paris and relational",
    "start": "2681780",
    "end": "2687300"
  },
  {
    "text": "database graph database solves this problem and we'll go deeper into Neptune",
    "start": "2687300",
    "end": "2692910"
  },
  {
    "start": "2688000",
    "end": "2688000"
  },
  {
    "text": "in the in the next section on how this solves this kind of traversing across multiple nodes",
    "start": "2692910",
    "end": "2700430"
  },
  {
    "start": "2703000",
    "end": "2703000"
  },
  {
    "text": "redshift we spoke about redshift a couple of minutes ago it is a highly",
    "start": "2703289",
    "end": "2709299"
  },
  {
    "text": "scalable data warehouse application data warehouse that so the way redshift is",
    "start": "2709299",
    "end": "2719260"
  },
  {
    "text": "organized it spoke about columnar databases redshift is a fork of Postgres and it's a columnar database in in a",
    "start": "2719260",
    "end": "2728230"
  },
  {
    "text": "transactional database if you insert a record and the record has four columns to it it goes and inserts that record",
    "start": "2728230",
    "end": "2734680"
  },
  {
    "text": "into a data block right and every time you do is select it reads that whole",
    "start": "2734680",
    "end": "2739960"
  },
  {
    "text": "data block and sometimes your your queries are just creating one or two columns in in a record that has like 50",
    "start": "2739960",
    "end": "2746980"
  },
  {
    "text": "columns",
    "start": "2746980",
    "end": "2749369"
  },
  {
    "text": "so redshift is a column in a traditional database the whole row gets inserted",
    "start": "2771070",
    "end": "2776900"
  },
  {
    "text": "into a record and if you are selecting just one or two columns for your query the way the optimizer is going to work",
    "start": "2776900",
    "end": "2784369"
  },
  {
    "text": "is go and read that whole block into the memory which means 80% of the columns that you read into the memory is not",
    "start": "2784369",
    "end": "2790280"
  },
  {
    "text": "going to be used by your query the way column in our database stores is it",
    "start": "2790280",
    "end": "2795680"
  },
  {
    "text": "takes internally it takes all the records of a single column which typically are similar type of data it",
    "start": "2795680",
    "end": "2801470"
  },
  {
    "text": "could be names of people or state that they belong to or you know date of words",
    "start": "2801470",
    "end": "2806930"
  },
  {
    "text": "so it is similar looking data that all our club in store together on a single",
    "start": "2806930",
    "end": "2812359"
  },
  {
    "text": "blog so internally what redshift does is every time you insert a record it stores",
    "start": "2812359",
    "end": "2817460"
  },
  {
    "text": "it by selecting all the columns into a single block instead of rows the",
    "start": "2817460",
    "end": "2822859"
  },
  {
    "text": "advantage with this is it can achieve a very high level of compression so when",
    "start": "2822859",
    "end": "2828230"
  },
  {
    "text": "when you're reading recorded into the memory you you can do just a single i/o to get hundreds or thousands of records",
    "start": "2828230",
    "end": "2835040"
  },
  {
    "text": "into the memory and secondly the block size is another key differentiator for",
    "start": "2835040",
    "end": "2841160"
  },
  {
    "text": "the redshift in terms of performance traditional databases used like an 8k or 32 K block size redshift uses one mag in",
    "start": "2841160",
    "end": "2848810"
  },
  {
    "text": "block size so every single i/o redshift is reading one Meg of data from the disk",
    "start": "2848810",
    "end": "2854119"
  },
  {
    "text": "into the memory right so it gives you a very high level of performance and",
    "start": "2854119",
    "end": "2860720"
  },
  {
    "text": "reading data from the cache instead of doing multiple I use to get that data it's highly scalable in real time you",
    "start": "2860720",
    "end": "2868550"
  },
  {
    "text": "can go and add nodes as to the redshift cluster where it can the way redshift",
    "start": "2868550",
    "end": "2874490"
  },
  {
    "text": "stores is you choose a map you choose how many nodes you want in the database and a master node and a slave nodes get",
    "start": "2874490",
    "end": "2881060"
  },
  {
    "text": "allocated the architecture is there's a master node that has the optimizer on the compiler and the slave nodes is",
    "start": "2881060",
    "end": "2887690"
  },
  {
    "text": "where all the data sets so if you run a query like select star from an employee table the optimizer decides what is the",
    "start": "2887690",
    "end": "2895190"
  },
  {
    "text": "query execution plan that it needs to go and extract data and it creates that",
    "start": "2895190",
    "end": "2901760"
  },
  {
    "text": "plan and send that plant down to each of the nodes so now the nodes don't have to spend their",
    "start": "2901760",
    "end": "2907020"
  },
  {
    "text": "time in the optimizer deciding how the query needs to be executed all that node to do is execute whatever query they get",
    "start": "2907020",
    "end": "2913680"
  },
  {
    "text": "from the master node and send the data back to the master node and the master node compiled sets the data and and",
    "start": "2913680",
    "end": "2920549"
  },
  {
    "text": "pushes it to the user which our UI tool that you use it could be a sequel developer tool or any of its a JDBC",
    "start": "2920549",
    "end": "2927890"
  },
  {
    "text": "front-end for red shift so you could use any tool that supports your EBC and it",
    "start": "2927890",
    "end": "2933359"
  },
  {
    "text": "will present you in the presentation layer so that is the scalable you can",
    "start": "2933359",
    "end": "2939589"
  },
  {
    "text": "you know it's it's inexpensive you can choose what's the type of hard disk you want you could choose a",
    "start": "2939589",
    "end": "2945660"
  },
  {
    "text": "magnetic disk you could choose SSDs and if you choose based on your workload",
    "start": "2945660",
    "end": "2951900"
  },
  {
    "text": "based on the performance that you're expecting you can decide what is the amount you want to spend so it could be as less as a thousand dollars per",
    "start": "2951900",
    "end": "2958589"
  },
  {
    "text": "terabyte of data per year that's the you",
    "start": "2958589",
    "end": "2964380"
  },
  {
    "text": "could score you could create your data warehouse on based on what what your requirement is it's highly secure",
    "start": "2964380",
    "end": "2972140"
  },
  {
    "text": "security is you know key for Amazon AWS it is almost jobs zero for us so if we",
    "start": "2972140",
    "end": "2980789"
  },
  {
    "text": "see any security challenges we drop everything else to focus on security data encryption at rest and transit you",
    "start": "2980789",
    "end": "2988920"
  },
  {
    "text": "know you use HTTPS and data encryption at rest to encrypt all data you can",
    "start": "2988920",
    "end": "2994380"
  },
  {
    "text": "create your redshift in a V PC for folks who are not familiar with or new to AWS",
    "start": "2994380",
    "end": "3002599"
  },
  {
    "text": "V PC stands for virtual private flout so the first thing you do when you launch your workload in am in AWS is create",
    "start": "3002599",
    "end": "3010250"
  },
  {
    "text": "your own virtual space on the cloud and then you own that space you decide who",
    "start": "3010250",
    "end": "3015589"
  },
  {
    "text": "gets in who gets out what kind of traffic gets in and gets out so that makes it very secure so that you can",
    "start": "3015589",
    "end": "3021140"
  },
  {
    "text": "launch a redshift database inside your virtual cloud and we spoke about data",
    "start": "3021140",
    "end": "3027319"
  },
  {
    "text": "encryption at rest you could you could bring your own encryption key right say you don't trust",
    "start": "3027319",
    "end": "3032539"
  },
  {
    "text": "anyone and it's a highly sensitive data and you don't want anyone to access",
    "start": "3032539",
    "end": "3037820"
  },
  {
    "text": "so you can bring your own encryption key and encrypt your data using your own encryption key which means even if",
    "start": "3037820",
    "end": "3044510"
  },
  {
    "text": "somebody gets access to the data it's just a blob right unless you have that key to decrypt it Amazon Athena",
    "start": "3044510",
    "end": "3054040"
  },
  {
    "text": "so Athena is based on presto presto is an open-source sequel like query that",
    "start": "3054040",
    "end": "3060710"
  },
  {
    "start": "3056000",
    "end": "3056000"
  },
  {
    "text": "you can run on structured non structured semi-structured data so and the reason",
    "start": "3060710",
    "end": "3067430"
  },
  {
    "text": "why we call it server less is you could store all your data let's say you have incoming log files or IOT devices",
    "start": "3067430",
    "end": "3073250"
  },
  {
    "text": "streaming data and you store that on s3 you know s3 is a very cheap storage it's",
    "start": "3073250",
    "end": "3079790"
  },
  {
    "text": "about less than two cents a gig per month it's highly durable it has 11",
    "start": "3079790",
    "end": "3085760"
  },
  {
    "text": "nines of durability the reason why we can promise 11 lines of durability is it's a 3 a 0 e texture like it's all",
    "start": "3085760",
    "end": "3093260"
  },
  {
    "text": "about DynamoDB every time you copy data into s3 it makes multiple copies of it across multiple availability zones so we",
    "start": "3093260",
    "end": "3100640"
  },
  {
    "text": "give we we have the 11 lines of durability and you have 99.99%",
    "start": "3100640",
    "end": "3106300"
  },
  {
    "text": "availability right so that's why s3 is highly durable and extremely cheap to",
    "start": "3106300",
    "end": "3112520"
  },
  {
    "text": "store data now you don't want to move the data into a database just because you want creating the data right you",
    "start": "3112520",
    "end": "3118880"
  },
  {
    "text": "want to run queries against the data when it is sitting on s3 so attina gives you that flexibility to run sequel",
    "start": "3118880",
    "end": "3125960"
  },
  {
    "text": "queries on the data that is sitting without any transformation let's say you're getting a CSV file or a JSON file",
    "start": "3125960",
    "end": "3133250"
  },
  {
    "text": "from one of from your devices or application files typical use cases I",
    "start": "3133250",
    "end": "3139130"
  },
  {
    "text": "have seen as event logs right you have an application each time a user clicks on some part of your app you want to",
    "start": "3139130",
    "end": "3145580"
  },
  {
    "text": "track what was the user behavior there right why did the user click or how many users clicked on a specific part of your",
    "start": "3145580",
    "end": "3151580"
  },
  {
    "text": "application these are event logs and you want to stream those events into s3 and store it",
    "start": "3151580",
    "end": "3157730"
  },
  {
    "text": "there forever but you can run now sequel queries on that event to say how many people what was the user behavior and",
    "start": "3157730",
    "end": "3164480"
  },
  {
    "text": "make changes to your applications based on user behavior right that's the use case where I have seen",
    "start": "3164480",
    "end": "3170700"
  },
  {
    "text": "Athena being very very popular in adoption sorry what's your question",
    "start": "3170700",
    "end": "3181100"
  },
  {
    "text": "correct so the question was can you query the content of the document that is stored in s s3 that's right",
    "start": "3181100",
    "end": "3188280"
  },
  {
    "text": "Athena supports certain data formats you can have data that's coming in CSV files it's coming in JSON files or park' there",
    "start": "3188280",
    "end": "3196140"
  },
  {
    "text": "are a lot of different standard formats so as long as your data is in that format you can query the data in s3",
    "start": "3196140",
    "end": "3205250"
  },
  {
    "text": "question so Hadoop the question is is it",
    "start": "3206360",
    "end": "3212220"
  },
  {
    "text": "similar to Hadoop hive right the Hadoop paradigm is slightly different from",
    "start": "3212220",
    "end": "3217650"
  },
  {
    "text": "Athena Hadoop is the is very well suited for data processing right if you have",
    "start": "3217650",
    "end": "3225600"
  },
  {
    "text": "very large amount of data that you need to be processed to a different format or stored in a different way Hadoop is",
    "start": "3225600",
    "end": "3231450"
  },
  {
    "text": "really good solution for that it doesn't give you real-time queries right Athena",
    "start": "3231450",
    "end": "3237960"
  },
  {
    "text": "is more for real-time query without going through the transformation you want to look at query data in real time",
    "start": "3237960",
    "end": "3243740"
  },
  {
    "text": "as soon as it lands in s3 simple use cases right where you have we have a lot",
    "start": "3243740",
    "end": "3250470"
  },
  {
    "text": "of customers they get bank statements or documents from banks or their partners other SAS applications they're using",
    "start": "3250470",
    "end": "3256500"
  },
  {
    "text": "they all typically send it by FTP and it lands on an s3 bucket what do you do",
    "start": "3256500",
    "end": "3262350"
  },
  {
    "text": "with our data right now you can run queries directly against the data without doing any transformation you",
    "start": "3262350",
    "end": "3269130"
  },
  {
    "text": "don't have to pick traditionally it lands in an STP FTP server you there's a",
    "start": "3269130",
    "end": "3274380"
  },
  {
    "text": "cron job that goes at night picks up that file loads into a database and now you're running queries you avoid all",
    "start": "3274380",
    "end": "3280410"
  },
  {
    "text": "that overhead sorry so it is server less",
    "start": "3280410",
    "end": "3290460"
  },
  {
    "text": "it sits on s3 you don't have to manage the storage for s3 it's it's infinitely expandable you can store billions and",
    "start": "3290460",
    "end": "3298740"
  },
  {
    "text": "billions of transactions there you don't have to worry about the overhead of managing s3 that's why it's server less",
    "start": "3298740",
    "end": "3304290"
  },
  {
    "text": "there is no infrastructure in unity worried about the only thing you are worried about is the JDBC connection or",
    "start": "3304290",
    "end": "3309720"
  },
  {
    "text": "the API took query these",
    "start": "3309720",
    "end": "3313700"
  },
  {
    "text": "so the question was do you have the index or give me just query text yeah",
    "start": "3324510",
    "end": "3330420"
  },
  {
    "text": "you can query text as long as your document is stored in one of those standard formats you know all banks all",
    "start": "3330420",
    "end": "3337100"
  },
  {
    "text": "intercompany transactions happen in the standard format either they send it to you in a CSV file which comes out of an",
    "start": "3337100",
    "end": "3343200"
  },
  {
    "text": "Excel or it is provided in a JSON format as long as it is in that format you can",
    "start": "3343200",
    "end": "3348270"
  },
  {
    "text": "query their text directly",
    "start": "3348270",
    "end": "3351440"
  },
  {
    "text": "so you let me answer it this way the question was is Athena an engine that converts database converts data in s3",
    "start": "3362590",
    "end": "3370390"
  },
  {
    "text": "into a relational database it doesn't do any conversion it is an engine which is like an optimizer that allows you that",
    "start": "3370390",
    "end": "3377830"
  },
  {
    "text": "gives you a sequel like interface to directly hit the data there is no conversion storing data in intermediate so I got alert that I have five more",
    "start": "3377830",
    "end": "3386260"
  },
  {
    "text": "minutes I want to complete this rest of the deck here ql DB ledger database we",
    "start": "3386260",
    "end": "3391330"
  },
  {
    "text": "spoke about that it is zero trust database that we can it's in preview and",
    "start": "3391330",
    "end": "3396610"
  },
  {
    "text": "I think you can go and sign up for that and play with it it is highly useful in financial supply",
    "start": "3396610",
    "end": "3404080"
  },
  {
    "text": "chain kind of systems where you want all the systems working together to validate",
    "start": "3404080",
    "end": "3410380"
  },
  {
    "text": "and build a trust between the system's zero trust is you don't you don't you",
    "start": "3410380",
    "end": "3418570"
  },
  {
    "text": "don't depend on an entity to do the trust you want a system to be self-sufficient for example let us say you have a database especially in North",
    "start": "3418570",
    "end": "3426900"
  },
  {
    "text": "in in QLD B if there's a record inside the database and somebody in",
    "start": "3426900",
    "end": "3432070"
  },
  {
    "text": "traditionally you have a relational database in an application application is pretty strong it can go and validate",
    "start": "3432070",
    "end": "3437980"
  },
  {
    "text": "every change that happened to the record now suppose a developer went to the database directly and updated the data",
    "start": "3437980",
    "end": "3443920"
  },
  {
    "text": "or deleted the reader after that delete is done you have no track record or no",
    "start": "3443920",
    "end": "3449740"
  },
  {
    "text": "trail of who changed it what was changed in the zero trust you have a signature",
    "start": "3449740",
    "end": "3455230"
  },
  {
    "text": "attached to the change right suppose I every time you make a change the data the signature gets updated now if",
    "start": "3455230",
    "end": "3462430"
  },
  {
    "text": "somebody goes some a row player or a bad actor goes and manipulates the data the signature cannot be manipulated so now",
    "start": "3462430",
    "end": "3469180"
  },
  {
    "text": "you know there's a mismatch between the signature and the data that's sitting in the table so that's where the zero trust",
    "start": "3469180",
    "end": "3474460"
  },
  {
    "text": "comes you know you're not trusting any single entity the system by itself make sure that the data is immutable and",
    "start": "3474460",
    "end": "3480730"
  },
  {
    "text": "trackable it will be prevented yeah",
    "start": "3480730",
    "end": "3486130"
  },
  {
    "text": "so in cure in the query ledger database it it prevents you from manipulating or",
    "start": "3486130",
    "end": "3491290"
  },
  {
    "text": "it's immutable data once you insert the record it's not change time-series we spoke about this you know",
    "start": "3491290",
    "end": "3499900"
  },
  {
    "text": "timestream is a database that allows you to a queue put time series data from IOT",
    "start": "3499900",
    "end": "3506080"
  },
  {
    "text": "devices or application log files and we see a lot of those use cases so",
    "start": "3506080",
    "end": "3513310"
  },
  {
    "start": "3510000",
    "end": "3510000"
  },
  {
    "text": "different categories of databases your sequel no sequel and graph database we spoke about sequel this is pretty",
    "start": "3513310",
    "end": "3519220"
  },
  {
    "text": "standard we've been using it for last 3040 years in a no sequel the big",
    "start": "3519220",
    "end": "3524250"
  },
  {
    "text": "different shaders are it scalable horizontally it's built for OLTP or DSS",
    "start": "3524250",
    "end": "3530650"
  },
  {
    "text": "at scale it's a highly denormalized architecture whereas sequel is normalized you know we",
    "start": "3530650",
    "end": "3537400"
  },
  {
    "text": "spoke about what is wide column and what is key value pair in databases there are these are the three no sequel that's",
    "start": "3537400",
    "end": "3543370"
  },
  {
    "text": "popular and so this is a you know you",
    "start": "3543370",
    "end": "3551170"
  },
  {
    "start": "3548000",
    "end": "3548000"
  },
  {
    "text": "when you choose a database there are three things that two of the three things that you need to choose",
    "start": "3551170",
    "end": "3557040"
  },
  {
    "text": "scalability efficiency and pattern flexibility right these are the three",
    "start": "3557040",
    "end": "3562960"
  },
  {
    "text": "pillars like we spoke about three pillars in terms of sequel versus no sequel when you choose a database choose",
    "start": "3562960",
    "end": "3568600"
  },
  {
    "text": "which other two that's critical for you if you want pattern flexibility that you you don't know what's the queries that's",
    "start": "3568600",
    "end": "3574120"
  },
  {
    "text": "going to hit the database and you want to be flexible there then a relational database can be your an amazon RDS or an",
    "start": "3574120",
    "end": "3581710"
  },
  {
    "text": "Aurora serverless database might be your right choice if you want efficiency you",
    "start": "3581710",
    "end": "3586780"
  },
  {
    "text": "know database will deliver required query latency for the workload at all times all you want in finite scale if",
    "start": "3586780",
    "end": "3592990"
  },
  {
    "text": "you choose between these two Amazon DynamoDB might be your right choice right it gives you eventual consistency",
    "start": "3592990",
    "end": "3598110"
  },
  {
    "text": "and it allows you for infinite scale if you want pattern flexibility and infinite scale which is the sweet spot",
    "start": "3598110",
    "end": "3605620"
  },
  {
    "text": "of a relational database versus in finer scale then redshift and attina might be your right choice so based on what do",
    "start": "3605620",
    "end": "3612100"
  },
  {
    "text": "you want what are the two of the three things you need you can choose what is the right AWS service for your workload",
    "start": "3612100",
    "end": "3617650"
  },
  {
    "text": "you can bring your own database and run",
    "start": "3617650",
    "end": "3622810"
  },
  {
    "text": "it on a c2 instance but you're taking the undifferentiated heavy lifting like backing or patching",
    "start": "3622810",
    "end": "3628239"
  },
  {
    "text": "security vulnerabilities what we are providing here is how do you manage that",
    "start": "3628239",
    "end": "3633489"
  },
  {
    "text": "workload without that undifferentiated heavy lifting that you have to do so",
    "start": "3633489",
    "end": "3638859"
  },
  {
    "text": "thousands of customers are using dynamodb today you know we spoke about almost all the most of the apps on your",
    "start": "3638859",
    "end": "3644529"
  },
  {
    "text": "mobile phone today Israel is using DynamoDB in the backend and many more",
    "start": "3644529",
    "end": "3651369"
  },
  {
    "text": "are using RDS relational databases have been here for 30 40 years they're going to be here for a long time and so we",
    "start": "3651369",
    "end": "3657519"
  },
  {
    "text": "support all the relational database flavors and there are thousands of customers that are using it so",
    "start": "3657519",
    "end": "3667019"
  },
  {
    "text": "purpose-built databases choose what your infrastructure requirement is and what software what is the managing that you",
    "start": "3667019",
    "end": "3675639"
  },
  {
    "text": "need to do for the database right in terms of infrastructure capacity planning provisioning monitoring",
    "start": "3675639",
    "end": "3681219"
  },
  {
    "text": "operating system patching hardware upgrades and profit these are the things that I AWS takes care for you and you",
    "start": "3681219",
    "end": "3688179"
  },
  {
    "text": "need to worry about the application in terms of software database upgrades security patches scaling monitoring",
    "start": "3688179",
    "end": "3694989"
  },
  {
    "text": "performance tuning these are the tools that we provide for each of these database engines that you can very",
    "start": "3694989",
    "end": "3700509"
  },
  {
    "text": "easily look at that information through services and act on that rather than trying to build these services in your",
    "start": "3700509",
    "end": "3706599"
  },
  {
    "text": "applications so finally thank you thank",
    "start": "3706599",
    "end": "3711789"
  },
  {
    "text": "you for coming today [Applause]",
    "start": "3711789",
    "end": "3717429"
  }
]