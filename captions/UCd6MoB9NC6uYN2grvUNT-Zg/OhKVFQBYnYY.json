[
  {
    "start": "0",
    "end": "48000"
  },
  {
    "text": "hello we're here today to talk about",
    "start": "5220",
    "end": "7200"
  },
  {
    "text": "dynamodb scaling partitions hotkeys and",
    "start": "7200",
    "end": "9960"
  },
  {
    "text": "throttling my name is John and I'm a",
    "start": "9960",
    "end": "12300"
  },
  {
    "text": "Senior Solutions architect who's a",
    "start": "12300",
    "end": "13740"
  },
  {
    "text": "specialist in dynamodb as a specialist",
    "start": "13740",
    "end": "16198"
  },
  {
    "text": "Solutions architect I get to talk with",
    "start": "16199",
    "end": "18240"
  },
  {
    "text": "customers in all sorts of Industries and",
    "start": "18240",
    "end": "20220"
  },
  {
    "text": "help them design Solutions on dynamodb",
    "start": "20220",
    "end": "22199"
  },
  {
    "text": "and work through any challenges they",
    "start": "22199",
    "end": "23760"
  },
  {
    "text": "encounter throttle link tends to be a",
    "start": "23760",
    "end": "25740"
  },
  {
    "text": "common conversation with some of those",
    "start": "25740",
    "end": "27060"
  },
  {
    "text": "customers",
    "start": "27060",
    "end": "28080"
  },
  {
    "text": "throttling is what happens when you make",
    "start": "28080",
    "end": "29880"
  },
  {
    "text": "a request to dynamodb but Dynamo doesn't",
    "start": "29880",
    "end": "32040"
  },
  {
    "text": "have the capacity to fulfill that",
    "start": "32040",
    "end": "33600"
  },
  {
    "text": "request at the time",
    "start": "33600",
    "end": "35160"
  },
  {
    "text": "reasons for throttling are often poorly",
    "start": "35160",
    "end": "37200"
  },
  {
    "text": "understood why would a service like Dyno",
    "start": "37200",
    "end": "39420"
  },
  {
    "text": "that's capable of basically infinite",
    "start": "39420",
    "end": "41280"
  },
  {
    "text": "scale throttle I think to understand",
    "start": "41280",
    "end": "43379"
  },
  {
    "text": "thralling it's first helpful to",
    "start": "43379",
    "end": "45239"
  },
  {
    "text": "understand how dynamodb scales let's",
    "start": "45239",
    "end": "47640"
  },
  {
    "text": "talk about that first",
    "start": "47640",
    "end": "49079"
  },
  {
    "start": "48000",
    "end": "112000"
  },
  {
    "text": "if you imagine scaling a traditional",
    "start": "49079",
    "end": "50879"
  },
  {
    "text": "relational database you'd add additional",
    "start": "50879",
    "end": "52860"
  },
  {
    "text": "resources CPU memory disk to that",
    "start": "52860",
    "end": "55559"
  },
  {
    "text": "database as your needs increase",
    "start": "55559",
    "end": "57020"
  },
  {
    "text": "eventually you hit a wall though you",
    "start": "57020",
    "end": "59520"
  },
  {
    "text": "can't add any more resources at that",
    "start": "59520",
    "end": "61680"
  },
  {
    "text": "point you have to start thinking about",
    "start": "61680",
    "end": "63059"
  },
  {
    "text": "sharding or partitioning that database",
    "start": "63059",
    "end": "64978"
  },
  {
    "text": "into multiple databases move a portion",
    "start": "64979",
    "end": "67740"
  },
  {
    "text": "of your data to one a portion of your",
    "start": "67740",
    "end": "69420"
  },
  {
    "text": "data to the other",
    "start": "69420",
    "end": "70820"
  },
  {
    "text": "dynamodb takes that idea and runs with",
    "start": "70820",
    "end": "73260"
  },
  {
    "text": "it we take the idea of partitioning and",
    "start": "73260",
    "end": "75659"
  },
  {
    "text": "build it into the database and into the",
    "start": "75659",
    "end": "77400"
  },
  {
    "text": "data model every item that you write to",
    "start": "77400",
    "end": "79740"
  },
  {
    "text": "dynamodb requires a partition key and",
    "start": "79740",
    "end": "82140"
  },
  {
    "text": "that's the key that we use to decide",
    "start": "82140",
    "end": "83700"
  },
  {
    "text": "where data gets split into the different",
    "start": "83700",
    "end": "85380"
  },
  {
    "text": "partitions in the background",
    "start": "85380",
    "end": "87240"
  },
  {
    "text": "dynamodb does a great job of balancing",
    "start": "87240",
    "end": "89280"
  },
  {
    "text": "load between those partitions and most",
    "start": "89280",
    "end": "91200"
  },
  {
    "text": "of the time you don't really need to be",
    "start": "91200",
    "end": "92640"
  },
  {
    "text": "concerned about how many partitions are",
    "start": "92640",
    "end": "94380"
  },
  {
    "text": "in your cable or how data is distributed",
    "start": "94380",
    "end": "96360"
  },
  {
    "text": "each of those partitions provides a",
    "start": "96360",
    "end": "98579"
  },
  {
    "text": "finite amount of capacity and dynamodb",
    "start": "98579",
    "end": "100860"
  },
  {
    "text": "handles adding partitions and moving",
    "start": "100860",
    "end": "102659"
  },
  {
    "text": "data where necessary to distribute load",
    "start": "102659",
    "end": "104880"
  },
  {
    "text": "and to scale your table",
    "start": "104880",
    "end": "106500"
  },
  {
    "text": "so with that little bit of background",
    "start": "106500",
    "end": "108000"
  },
  {
    "text": "let's talk about the two places that you",
    "start": "108000",
    "end": "109979"
  },
  {
    "text": "could get throttled when you make a",
    "start": "109979",
    "end": "111119"
  },
  {
    "text": "request to dynamodb",
    "start": "111119",
    "end": "113159"
  },
  {
    "start": "112000",
    "end": "233000"
  },
  {
    "text": "as you make a request it comes in to a",
    "start": "113159",
    "end": "115500"
  },
  {
    "text": "request router that's the front end",
    "start": "115500",
    "end": "116880"
  },
  {
    "text": "Fleet that does things like git table",
    "start": "116880",
    "end": "118439"
  },
  {
    "text": "metadata and authentication and",
    "start": "118439",
    "end": "120299"
  },
  {
    "text": "authorization and pass requests on to",
    "start": "120299",
    "end": "122640"
  },
  {
    "text": "storage nodes for persistence",
    "start": "122640",
    "end": "124619"
  },
  {
    "text": "before they route your request to the",
    "start": "124619",
    "end": "126299"
  },
  {
    "text": "storage nodes you'll check the capacity",
    "start": "126299",
    "end": "128039"
  },
  {
    "text": "that's available for your whole table",
    "start": "128039",
    "end": "129479"
  },
  {
    "text": "this is the number of read and write",
    "start": "129479",
    "end": "131400"
  },
  {
    "text": "capacity units that your table was",
    "start": "131400",
    "end": "132840"
  },
  {
    "text": "provisioned with assuming you're running",
    "start": "132840",
    "end": "134459"
  },
  {
    "text": "in provision mode",
    "start": "134459",
    "end": "136260"
  },
  {
    "text": "if the table has enough capacity that",
    "start": "136260",
    "end": "138540"
  },
  {
    "text": "request is going to move along the path",
    "start": "138540",
    "end": "140040"
  },
  {
    "text": "if it doesn't we'll check the burst",
    "start": "140040",
    "end": "142200"
  },
  {
    "text": "bucket we store the unused capacity from",
    "start": "142200",
    "end": "144660"
  },
  {
    "text": "the previous five minutes which can be",
    "start": "144660",
    "end": "146940"
  },
  {
    "text": "used to temporarily go above the",
    "start": "146940",
    "end": "148620"
  },
  {
    "text": "capacity your table is provisioned for",
    "start": "148620",
    "end": "150780"
  },
  {
    "text": "and if there's credits there great we'll",
    "start": "150780",
    "end": "152760"
  },
  {
    "text": "move on but if both are empty that's",
    "start": "152760",
    "end": "155040"
  },
  {
    "text": "where you'd get throttle to the table",
    "start": "155040",
    "end": "156300"
  },
  {
    "text": "level if you're throttled at the table",
    "start": "156300",
    "end": "158160"
  },
  {
    "text": "level it means that your table level",
    "start": "158160",
    "end": "159959"
  },
  {
    "text": "capacity planning wasn't quite right",
    "start": "159959",
    "end": "161819"
  },
  {
    "text": "your auto scaling configuration for",
    "start": "161819",
    "end": "164220"
  },
  {
    "text": "provision capacity isn't set how it",
    "start": "164220",
    "end": "166080"
  },
  {
    "text": "should be you may need to have a higher",
    "start": "166080",
    "end": "168480"
  },
  {
    "text": "minimum or a lower Target utilization so",
    "start": "168480",
    "end": "170760"
  },
  {
    "text": "that you can scale faster to handle",
    "start": "170760",
    "end": "172379"
  },
  {
    "text": "changing requirements it also May mean",
    "start": "172379",
    "end": "174900"
  },
  {
    "text": "that your workload is spiky enough that",
    "start": "174900",
    "end": "176580"
  },
  {
    "text": "on demand might be a better fit",
    "start": "176580",
    "end": "178080"
  },
  {
    "text": "on-demand mode helps solve table level",
    "start": "178080",
    "end": "180300"
  },
  {
    "text": "throttling in most cases because it",
    "start": "180300",
    "end": "182220"
  },
  {
    "text": "removes the need to scale up and down",
    "start": "182220",
    "end": "183660"
  },
  {
    "text": "with auto scaling it handles capacity",
    "start": "183660",
    "end": "185640"
  },
  {
    "text": "changes very quickly",
    "start": "185640",
    "end": "187379"
  },
  {
    "text": "let's assume though that everything",
    "start": "187379",
    "end": "188819"
  },
  {
    "text": "works out at the table level and we move",
    "start": "188819",
    "end": "190800"
  },
  {
    "text": "on to storing data at the partition this",
    "start": "190800",
    "end": "193200"
  },
  {
    "text": "is the other place where you could",
    "start": "193200",
    "end": "194340"
  },
  {
    "text": "potentially be throttled every partition",
    "start": "194340",
    "end": "196500"
  },
  {
    "text": "in dynamodb can handle a thousand wcus",
    "start": "196500",
    "end": "199019"
  },
  {
    "text": "and 3000 rcus of capacity so if that",
    "start": "199019",
    "end": "202440"
  },
  {
    "text": "partition is receiving more than that",
    "start": "202440",
    "end": "204000"
  },
  {
    "text": "level of traffic it could also be",
    "start": "204000",
    "end": "205620"
  },
  {
    "text": "throttled at the partition level",
    "start": "205620",
    "end": "207540"
  },
  {
    "text": "the solution for these two different",
    "start": "207540",
    "end": "208980"
  },
  {
    "text": "types of throttling is quite different",
    "start": "208980",
    "end": "211680"
  },
  {
    "text": "this is an area that I see customers",
    "start": "211680",
    "end": "213420"
  },
  {
    "text": "struggle with fairly regularly if they",
    "start": "213420",
    "end": "215220"
  },
  {
    "text": "experience throttling they switched on",
    "start": "215220",
    "end": "217019"
  },
  {
    "text": "demand their cable capacity seals up and",
    "start": "217019",
    "end": "220200"
  },
  {
    "text": "it doesn't seem to fix the issue",
    "start": "220200",
    "end": "222360"
  },
  {
    "text": "partition level throttling is a data",
    "start": "222360",
    "end": "224580"
  },
  {
    "text": "modeling issue if too much throughput is",
    "start": "224580",
    "end": "226860"
  },
  {
    "text": "going to a single partition it can get",
    "start": "226860",
    "end": "228540"
  },
  {
    "text": "throttled and adding capacity to your",
    "start": "228540",
    "end": "230280"
  },
  {
    "text": "cable or switching to on-demand mode",
    "start": "230280",
    "end": "231959"
  },
  {
    "text": "isn't going to help partition level",
    "start": "231959",
    "end": "234299"
  },
  {
    "start": "233000",
    "end": "313000"
  },
  {
    "text": "throttling happens because of low",
    "start": "234299",
    "end": "235980"
  },
  {
    "text": "cardinality in your partition key",
    "start": "235980",
    "end": "237959"
  },
  {
    "text": "if all your data is going to a small",
    "start": "237959",
    "end": "239700"
  },
  {
    "text": "number of keys dynamodb isn't able to",
    "start": "239700",
    "end": "242099"
  },
  {
    "text": "distribute it across partitions if",
    "start": "242099",
    "end": "244080"
  },
  {
    "text": "thrallings on reads adding caching",
    "start": "244080",
    "end": "246239"
  },
  {
    "text": "through docs might be a good solution if",
    "start": "246239",
    "end": "248519"
  },
  {
    "text": "thrilling is on rights one solution",
    "start": "248519",
    "end": "250319"
  },
  {
    "text": "could be changing your data model and",
    "start": "250319",
    "end": "252120"
  },
  {
    "text": "choosing a different partition key",
    "start": "252120",
    "end": "253439"
  },
  {
    "text": "that's not always possible though so",
    "start": "253439",
    "end": "255599"
  },
  {
    "text": "other approaches might be necessary are",
    "start": "255599",
    "end": "257639"
  },
  {
    "text": "your rights spiky introducing a cue to",
    "start": "257639",
    "end": "259859"
  },
  {
    "text": "smooth them out might help do you need",
    "start": "259859",
    "end": "261720"
  },
  {
    "text": "consistently high throughput consider",
    "start": "261720",
    "end": "263699"
  },
  {
    "text": "right charting your data and adding",
    "start": "263699",
    "end": "265320"
  },
  {
    "text": "random integers to your partition keys",
    "start": "265320",
    "end": "267060"
  },
  {
    "text": "right charting is a bigger topic that",
    "start": "267060",
    "end": "268919"
  },
  {
    "text": "probably deserves its own video now",
    "start": "268919",
    "end": "271380"
  },
  {
    "text": "which kind of throttling are you",
    "start": "271380",
    "end": "273120"
  },
  {
    "text": "experiencing how can you figure that out",
    "start": "273120",
    "end": "275040"
  },
  {
    "text": "check cloudwatch metrics if your",
    "start": "275040",
    "end": "277199"
  },
  {
    "text": "consumed capacity regularly goes over",
    "start": "277199",
    "end": "279240"
  },
  {
    "text": "your provision capacity it's likely",
    "start": "279240",
    "end": "281160"
  },
  {
    "text": "causing you table level throttling",
    "start": "281160",
    "end": "282600"
  },
  {
    "text": "enable cloudwatch contributor insights",
    "start": "282600",
    "end": "285000"
  },
  {
    "text": "for dynamodb that will allow you to see",
    "start": "285000",
    "end": "287160"
  },
  {
    "text": "how your traffic is distributed across",
    "start": "287160",
    "end": "289020"
  },
  {
    "text": "your keys and where you might be",
    "start": "289020",
    "end": "290460"
  },
  {
    "text": "experiencing hotkeys that trigger",
    "start": "290460",
    "end": "291900"
  },
  {
    "text": "partition level throttling with better",
    "start": "291900",
    "end": "294060"
  },
  {
    "text": "understanding of the types of throttling",
    "start": "294060",
    "end": "295620"
  },
  {
    "text": "you might encounter with dynamodb you'll",
    "start": "295620",
    "end": "297540"
  },
  {
    "text": "know the right strategies to resolve",
    "start": "297540",
    "end": "299220"
  },
  {
    "text": "them",
    "start": "299220",
    "end": "299880"
  },
  {
    "text": "my name is John trahoon and I'm a Senior",
    "start": "299880",
    "end": "301979"
  },
  {
    "text": "Solutions architect specialist for",
    "start": "301979",
    "end": "304080"
  },
  {
    "text": "dynamodb thanks for watching and see you",
    "start": "304080",
    "end": "306479"
  },
  {
    "text": "next time",
    "start": "306479",
    "end": "308780"
  }
]