[
  {
    "start": "0",
    "end": "17000"
  },
  {
    "text": "In this video, you'll see how you can run an \nexperiment with Amazon CloudWatch Evidently.",
    "start": "512",
    "end": "4436"
  },
  {
    "text": "With this capability, you can conduct controlled A/B \nexperiments on new features before rolling them out for",
    "start": "4991",
    "end": "9300"
  },
  {
    "text": "general use, capture user metrics to evaluate feature \nperformance, and interpret results with confidence.",
    "start": "9300",
    "end": "15179"
  },
  {
    "start": "17000",
    "end": "31000"
  },
  {
    "text": "In this demonstration, we'll be testing two\npromotions for our e-commerce bookstore website",
    "start": "17403",
    "end": "21330"
  },
  {
    "text": "to see which would result in a higher revenue.",
    "start": "21330",
    "end": "23195"
  },
  {
    "text": "The first offer is for 20% off any book purchase.",
    "start": "23671",
    "end": "26286"
  },
  {
    "text": "The second is to get 25% off \nthe purchase of a second book.",
    "start": "26950",
    "end": "29915"
  },
  {
    "start": "31000",
    "end": "192000"
  },
  {
    "text": "To get started, let's navigate to \nAmazon CloudWatch Evidently.",
    "start": "31739",
    "end": "34726"
  },
  {
    "text": "We'll be working with a project, called \n“Bookstore,” that we've already created.",
    "start": "36758",
    "end": "39896"
  },
  {
    "text": "From here, we can create an experiment that we \ncan conduct on a feature or application behavior.",
    "start": "40600",
    "end": "44672"
  },
  {
    "text": "Let’s give it a name.",
    "start": "46332",
    "end": "47245"
  },
  {
    "text": "Next, we'll define the feature we want to experiment on.",
    "start": "50377",
    "end": "52853"
  },
  {
    "text": "Let's add a new feature and name it.",
    "start": "53824",
    "end": "55456"
  },
  {
    "text": "Now we're ready to specify the variations we'll experiment.",
    "start": "59560",
    "end": "62221"
  },
  {
    "text": "We'll choose the String type for presenting the \npromotional offers as a banner on our website.",
    "start": "62568",
    "end": "66406"
  },
  {
    "text": "Let's name our first variation \"twentyOff.\"",
    "start": "67446",
    "end": "69530"
  },
  {
    "text": "For the value, we'll copy the \nURL link to the promotion image.",
    "start": "70541",
    "end": "73426"
  },
  {
    "text": "This value will be used in our application code to \nshow to customers who land with this variation.",
    "start": "73931",
    "end": "78139"
  },
  {
    "text": "We'll name the second variation \"BuyOneGetOne25.\"",
    "start": "79231",
    "end": "82000"
  },
  {
    "text": "Again, we'll copy the URL for the \ncorresponding promotion image.",
    "start": "82981",
    "end": "86073"
  },
  {
    "text": "CloudWatch Evidently prepares sample code\nthat we can use in our application to render",
    "start": "93250",
    "end": "96880"
  },
  {
    "text": "the corresponding application \nbehavior for the respective variations.",
    "start": "96880",
    "end": "100141"
  },
  {
    "text": "Next, we'll choose what percentage of our\naudience we want to test the variations on.",
    "start": "103759",
    "end": "107289"
  },
  {
    "text": "By default, Amazon CloudWatch Evidently \nequally distributes traffic across the variations,",
    "start": "108191",
    "end": "112941"
  },
  {
    "text": "which is a best practice for running experiments.",
    "start": "112941",
    "end": "115012"
  },
  {
    "text": "We'll retain this distribution.",
    "start": "115191",
    "end": "116617"
  },
  {
    "text": "Now we'll define the metrics that Evidently will \nuse to evaluate the performance of our variations.",
    "start": "119601",
    "end": "124000"
  },
  {
    "text": "We can define our own metrics that we will\nemit from our application or use standard",
    "start": "124761",
    "end": "128250"
  },
  {
    "text": "Real-User Monitoring (RUM) metrics if our\napplication uses the CloudWatch RUM feature.",
    "start": "128250",
    "end": "132944"
  },
  {
    "text": "Our goal will be to have the revenue increase.",
    "start": "133885",
    "end": "136124"
  },
  {
    "text": "Next, we’ll tell Evidently where to extract the metric.",
    "start": "138503",
    "end": "141151"
  },
  {
    "text": "We’ll specify the entity ID, which is a unique\n identifier associated with the end user,",
    "start": "141528",
    "end": "146248"
  },
  {
    "text": "as well as the value key and units \nfor the metric we’re monitoring.",
    "start": "146248",
    "end": "149115"
  },
  {
    "text": "In this case, we’re tracking revenue in dollars.",
    "start": "149591",
    "end": "151700"
  },
  {
    "text": "We can copy the resulting code \nsnippet to use in our application.",
    "start": "152245",
    "end": "155013"
  },
  {
    "text": "We can optionally implement a CloudWatch alarm\nthat notifies us if the metrics meet specific conditions.",
    "start": "156000",
    "end": "160655"
  },
  {
    "text": "Let's create an alarm that measures whether\nour revenue is less than or equal to $10 over",
    "start": "161566",
    "end": "165640"
  },
  {
    "text": "a one-hour period, as this condition would indicate \nthat something has gone wrong with our experiment.",
    "start": "165640",
    "end": "170093"
  },
  {
    "text": "We can use an existing Amazon Simple Notification\nService (Amazon SNS) topic to receive alarm",
    "start": "180922",
    "end": "185870"
  },
  {
    "text": "notifications or create a new one.",
    "start": "185870",
    "end": "187720"
  },
  {
    "text": "Now we're ready to create the experiment.",
    "start": "188691",
    "end": "190394"
  },
  {
    "start": "192000",
    "end": "231000"
  },
  {
    "text": "Now that the experiment has been created, let's review \nhow we've incorporated it in our application's code.",
    "start": "193279",
    "end": "197890"
  },
  {
    "text": "In the Hero component of our website, we've called \nfor the project that defines the feature we're evaluating.",
    "start": "200238",
    "end": "204823"
  },
  {
    "text": "Then we use the Evidently client to call the Evaluate \nFeature operation, which will return the reason",
    "start": "205631",
    "end": "210586"
  },
  {
    "text": "behind the evaluation, the variation that the user \nwas assigned, and the value assigned to that variation.",
    "start": "210587",
    "end": "215639"
  },
  {
    "text": "Then, when the Hero component is rendered,\nit will check whether the feature we called",
    "start": "218539",
    "end": "222020"
  },
  {
    "text": "for is being used as part of a feature launch or experiment.",
    "start": "222020",
    "end": "224845"
  },
  {
    "text": "If it is, the feature will be applied so that users \nwill see one of the two promotional banners.",
    "start": "225331",
    "end": "229385"
  },
  {
    "text": "Before we can start the experiment, our application will\nneed to be deployed with the implemented Evidently code.",
    "start": "232442",
    "end": "236942"
  },
  {
    "text": "Now let’s start the experiment.",
    "start": "238641",
    "end": "240000"
  },
  {
    "text": "We'll use the default schedule, which is \nto run our experiment for seven days.",
    "start": "241202",
    "end": "244614"
  },
  {
    "text": "The experiment now has a \"LIVE\" status.",
    "start": "245576",
    "end": "247645"
  },
  {
    "text": "Let's visit our e-commerce bookstore \nwebsite to see the experiment in action.",
    "start": "248041",
    "end": "251270"
  },
  {
    "start": "252000",
    "end": "324000"
  },
  {
    "text": "We’ll refresh the page to simulate \na new user coming to the site.",
    "start": "253024",
    "end": "255830"
  },
  {
    "text": "We can see that we have been \nassigned the \"buyOneGetOne25\" variation.",
    "start": "258061",
    "end": "261536"
  },
  {
    "text": "Since users have a 50% chance of seeing either, let's \nrefresh again to see if we can view the \"twentyOff\" variation.",
    "start": "262170",
    "end": "267706"
  },
  {
    "text": "Let's return to the CloudWatch Management Console \nto review what results Evidently has captured so far.",
    "start": "270140",
    "end": "274760"
  },
  {
    "text": "Here are our results after running \nthe experiment for several days.",
    "start": "276610",
    "end": "279413"
  },
  {
    "text": "The graph charts how many events have been recorded \nfor the custom metric we set up to measure revenue.",
    "start": "279959",
    "end": "284000"
  },
  {
    "text": "In the chart below, we can see how many times\neach variation has been shown to users and",
    "start": "284809",
    "end": "288650"
  },
  {
    "text": "the total value and average of \nrevenue accumulated by each variation.",
    "start": "288650",
    "end": "292113"
  },
  {
    "text": "The chart indicates that the “Buy One Get\nOne 25” promotion is the better performer,",
    "start": "293273",
    "end": "297122"
  },
  {
    "text": "with an average checkout value that’s $5 greater \nthan the value for the default “Twenty Off” variation.",
    "start": "297122",
    "end": "301885"
  },
  {
    "text": "This is a confidence interval improvement\nof nearly 34%, with a statistical significance",
    "start": "302647",
    "end": "307129"
  },
  {
    "text": "of 99.9%, so we have a clear winner \nand know which promotion to pursue.",
    "start": "307129",
    "end": "311456"
  },
  {
    "text": "You've just seen how you can run an experiment\nwith Amazon CloudWatch Evidently.",
    "start": "314202",
    "end": "317574"
  },
  {
    "text": "You can learn more about this topic in \nthe description and links for this video.",
    "start": "318000",
    "end": "321060"
  },
  {
    "text": "Thanks for watching. Now it's your turn to try.",
    "start": "321060",
    "end": "323052"
  }
]