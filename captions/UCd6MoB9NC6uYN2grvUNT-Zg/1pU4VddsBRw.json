[
  {
    "text": "In this video, you’ll see how to improve\ncode efficiency using Amazon CodeGuru Profiler.",
    "start": "620",
    "end": "5220"
  },
  {
    "text": "With this service, you can analyze your application\nperformance, visualize profiling data,",
    "start": "5720",
    "end": "10219"
  },
  {
    "text": "and receive automated recommendations for resolving\ninefficiencies.",
    "start": "10220",
    "end": "13380"
  },
  {
    "text": "Amazon CodeGuru Profiler is a service that uses machine learning to collect runtime performance data",
    "start": "14380",
    "end": "19700"
  },
  {
    "text": "from your live applications and then show you the methods that take the most time",
    "start": "19700",
    "end": "23140"
  },
  {
    "text": "and CPU capacity to execute.",
    "start": "23140",
    "end": "24880"
  },
  {
    "text": "To get started, navigate from the AWS Management\nConsole to Amazon CodeGuru.",
    "start": "25640",
    "end": "30520"
  },
  {
    "text": "Here, you have the option to choose between\nthe CodeGuru Reviewer and Profiler services.",
    "start": "33220",
    "end": "37360"
  },
  {
    "text": "Next, select the CodeGuru Profiler service from the drop-down list and click the button to proceed.",
    "start": "37860",
    "end": "42680"
  },
  {
    "text": "To begin using CodeGuru Profiler, you must\nfirst create a profiling group,",
    "start": "44700",
    "end": "48680"
  },
  {
    "text": "which is a set of applications that are profiled together\nas a unit.",
    "start": "48680",
    "end": "51780"
  },
  {
    "text": "Specify a name for the profiling group and create it.",
    "start": "52440",
    "end": "55079"
  },
  {
    "text": "Next, you must choose the users and roles that can submit profiling data to this profiling group",
    "start": "56620",
    "end": "61120"
  },
  {
    "text": "with the CodeGuru Profiler agent.",
    "start": "61120",
    "end": "63020"
  },
  {
    "text": "The Profiler agent is a program that runs alongside or within a user’s code in order to analyze it.",
    "start": "63360",
    "end": "68240"
  },
  {
    "text": "In this case, let’s select the EC2InstanceProfileForCodeGuru role.",
    "start": "69040",
    "end": "73120"
  },
  {
    "text": "Next, you’ll download and configure the \nCodeGuru Profiler agent",
    "start": "78280",
    "end": "81520"
  },
  {
    "text": "to run the CodeGuru Profiler agent alongside the code to be analyzed.",
    "start": "81520",
    "end": "85100"
  },
  {
    "text": "Let’s do that now.",
    "start": "85440",
    "end": "86400"
  },
  {
    "text": "Note that you have two choices here.",
    "start": "89240",
    "end": "90759"
  },
  {
    "text": "To quickly start profiling, you can download\nthe executable JAR file on this page",
    "start": "91020",
    "end": "95619"
  },
  {
    "text": "and passit as a command line argument when starting your application.",
    "start": "95620",
    "end": "98440"
  },
  {
    "text": "To have more control over when to start profiling,",
    "start": "98960",
    "end": "101220"
  },
  {
    "text": "you can add the Code Guru profile agent into your application code.",
    "start": "101220",
    "end": "104340"
  },
  {
    "text": "For our purposes, let’s use the simpler\nmethod and download the JAR file.",
    "start": "104940",
    "end": "108800"
  },
  {
    "text": "Now that the profiler agent has been downloaded,",
    "start": "111780",
    "end": "114100"
  },
  {
    "text": "flip the toggle switch to indicate that you have completed the step.",
    "start": "114100",
    "end": "116820"
  },
  {
    "text": "Let’s take a look at the code we’ll run\nalongside the profiling agent.",
    "start": "119780",
    "end": "122780"
  },
  {
    "text": "The application used for the demo can be downloaded\nat the URL shown on-screen.",
    "start": "123160",
    "end": "126880"
  },
  {
    "text": "The code in this sample .java file is used\nfor benchmarking.",
    "start": "131260",
    "end": "134280"
  },
  {
    "text": "It continuously loops while performing various\ncomputational tasks,",
    "start": "134740",
    "end": "137960"
  },
  {
    "text": "and then submits a message with a random number to an AWS Simple Queue Service (SQS) queue.",
    "start": "137960",
    "end": "142740"
  },
  {
    "text": "Let’s take a brief look at the methods involved.",
    "start": "143400",
    "end": "145360"
  },
  {
    "text": "The first method creates an SQS client in our region, generates a random number between 0 and 1,",
    "start": "147740",
    "end": "152880"
  },
  {
    "text": "and then waits a second before sending\na message with the random number.",
    "start": "152880",
    "end": "155620"
  },
  {
    "text": "Note that it constructs the SQS client every\ntime the putOnQueue method is called.",
    "start": "156200",
    "end": "160360"
  },
  {
    "text": "These are the methods that are called by the load methods.",
    "start": "164300",
    "end": "166500"
  },
  {
    "text": "For the purposes of this example, the code\nhas already been compiled and an executable",
    "start": "167140",
    "end": "170680"
  },
  {
    "text": "JAR file is ready to be run alongside the\nprofiler, so let's return to CodeGuru.",
    "start": "170680",
    "end": "175040"
  },
  {
    "text": "Next, let’s set up the CodeGuru agent associated\nwith the profiling group to analyze the code.",
    "start": "177460",
    "end": "182020"
  },
  {
    "text": "First, open a terminal.",
    "start": "182540",
    "end": "183739"
  },
  {
    "text": "We’ll use the example command provided on\nthe Profiling group setup page",
    "start": "186820",
    "end": "190080"
  },
  {
    "text": "to run the agent alongside the application code.",
    "start": "190080",
    "end": "192220"
  },
  {
    "text": "The profiler has run successfully alongside the application,",
    "start": "193380",
    "end": "196300"
  },
  {
    "text": "and the first profiling data point will be sampled soon.",
    "start": "196300",
    "end": "198760"
  },
  {
    "text": "Let’s return to CodeGuru and make sure that\nit is able to receive the profiling stream.",
    "start": "199500",
    "end": "203420"
  },
  {
    "text": "Refresh the view.",
    "start": "204620",
    "end": "205500"
  },
  {
    "text": "Under Status, we can see that CodeGuru has\nreceived an initial message from the agent,",
    "start": "208460",
    "end": "212400"
  },
  {
    "text": "indicating that profiling reports can be sent\nto CodeGuru.",
    "start": "212400",
    "end": "215159"
  },
  {
    "text": "Refresh the view again.",
    "start": "216380",
    "end": "217540"
  },
  {
    "text": "Now the status shows that CodeGuru has received\nthe first profile of the application.",
    "start": "220580",
    "end": "224740"
  },
  {
    "text": "Let’s fast forward a few hours when we have\nenough samples from the CodeGuru Profiler",
    "start": "225460",
    "end": "229440"
  },
  {
    "text": "to accurately trace the performance of the\napplication.",
    "start": "229440",
    "end": "231940"
  },
  {
    "text": "This Overview visualization provides a bottom-up\nview of your profiling data in a “flame graph”",
    "start": "234080",
    "end": "238760"
  },
  {
    "text": "that charts the computational cost of methods within a program as well as their hierarchal relationships.",
    "start": "238760",
    "end": "243659"
  },
  {
    "text": "The scale of each method along the x-axis represents the CPU time spent within that method.",
    "start": "244680",
    "end": "249519"
  },
  {
    "text": "Each bar is called a “stack frame.”",
    "start": "249940",
    "end": "251620"
  },
  {
    "text": "Let’s take a look at some of the information\nthat can be gleaned from the Overview.",
    "start": "251980",
    "end": "255060"
  },
  {
    "text": "To explore the data, you can pause over the visualization.",
    "start": "256100",
    "end": "258700"
  },
  {
    "text": "For instance, when you pause over a frame,\nall frames with the same method name are highlighted.",
    "start": "259040",
    "end": "263240"
  },
  {
    "text": "This makes it easy to see where and how often\nthe method is called.",
    "start": "263880",
    "end": "266820"
  },
  {
    "text": "You can also see details about the method.",
    "start": "267260",
    "end": "269180"
  },
  {
    "text": "For example, here you can see a breakdown\nof the time spent performing various types of actions",
    "start": "270300",
    "end": "274419"
  },
  {
    "text": "over the one-hour timespan we have chosen.",
    "start": "274420",
    "end": "276520"
  },
  {
    "text": "The load methods to the left are considered “shallow”",
    "start": "277560",
    "end": "279940"
  },
  {
    "text": "since they do not call or invoke any other methods beyond the ones directly above them.",
    "start": "279940",
    "end": "283820"
  },
  {
    "text": "However, the putOnQueue method, which constructs\nan SQS client and sends a message to an SQS queue",
    "start": "284600",
    "end": "290120"
  },
  {
    "text": "in the account as noted in the application code earlier, invokes several sub-methods within the AWS SDK.",
    "start": "290120",
    "end": "295900"
  },
  {
    "text": "Let’s zoom into putOnQueue to get a better look.",
    "start": "296520",
    "end": "298800"
  },
  {
    "text": "Here you can see that the majority of the time spent within putOnQueue is taken up by the method",
    "start": "299940",
    "end": "304580"
  },
  {
    "text": "AmazonSQSClient.getQueueUrl.",
    "start": "304580",
    "end": "307599"
  },
  {
    "text": "You can zoom in further to learn about a method’s parent and child methods",
    "start": "308620",
    "end": "311880"
  },
  {
    "text": "by right-clicking and selecting Inspect.",
    "start": "311880",
    "end": "314020"
  },
  {
    "text": "The Inspect view zooms into a selected frame,\nprovides the fully qualified method signature,",
    "start": "316220",
    "end": "320920"
  },
  {
    "text": "and explicitly denotes its parent and child methods.",
    "start": "320920",
    "end": "323560"
  },
  {
    "text": "This can be particularly useful when a method\nappears multiple times in a visualization.",
    "start": "324300",
    "end": "328240"
  },
  {
    "text": "Let’s work our way up the stack frames to\nsee the full trail of AWS methods invoked.",
    "start": "328860",
    "end": "333099"
  },
  {
    "text": "Let’s look at a different visualization.",
    "start": "337620",
    "end": "339199"
  },
  {
    "text": "The Hotspots visualization provides a “top-down” view of the same method hierarchy shown in the Overview,",
    "start": "343800",
    "end": "348759"
  },
  {
    "text": "which provided a bottom-up view.",
    "start": "348760",
    "end": "350360"
  },
  {
    "text": "Here, we’re looking at CPU usage.",
    "start": "351060",
    "end": "352760"
  },
  {
    "text": "The methods consuming the most application\ntime are at the top.",
    "start": "353020",
    "end": "355780"
  },
  {
    "text": "Let's take a look at latency.",
    "start": "356280",
    "end": "357639"
  },
  {
    "text": "Sections colored purple or green are time\nspent waiting in methods.",
    "start": "360900",
    "end": "364360"
  },
  {
    "text": "You can view a bottom-up view of the same\ndata by switching back to the overview.",
    "start": "364840",
    "end": "368600"
  },
  {
    "text": "Notice that the main method takes up about\n99.7% of the overall CPU running time.",
    "start": "372160",
    "end": "377140"
  },
  {
    "text": "However, in the latency view, it is responsible for\njust about half of the combined time.",
    "start": "377560",
    "end": "381980"
  },
  {
    "text": "Let’s inspect the putOnQueue method in the latency view.",
    "start": "382900",
    "end": "385600"
  },
  {
    "text": "As you can see, the stack profile is very different when viewing latency as opposed to CPU time.",
    "start": "387780",
    "end": "392600"
  },
  {
    "text": "The latency view provides more detailed information\non network behavior and performance,",
    "start": "393220",
    "end": "397360"
  },
  {
    "text": "and on how they are impacted by methods within a program.",
    "start": "397360",
    "end": "400039"
  },
  {
    "text": "If you let the profiler run for several hours, CodeGuru also provides recommendations for code changes",
    "start": "401060",
    "end": "406400"
  },
  {
    "text": "that may increase execution efficiency.",
    "start": "406400",
    "end": "408360"
  },
  {
    "text": "Each recommendation report includes information about why the recommendation was made,",
    "start": "411420",
    "end": "415220"
  },
  {
    "text": "a description, suggested resolution steps, and the stack locations affected by the recommendation.",
    "start": "415220",
    "end": "420280"
  },
  {
    "text": "The initial profiling has produced two recommendations.",
    "start": "421520",
    "end": "424000"
  },
  {
    "text": "The first suggests using newer, faster cryptographic libraries",
    "start": "424380",
    "end": "427880"
  },
  {
    "text": "than the ones currently implemented in the application.",
    "start": "427880",
    "end": "430140"
  },
  {
    "text": "It also provides a link to a suggested cryptographic\nlibrary.",
    "start": "430620",
    "end": "433460"
  },
  {
    "text": "In addition, it gives the actual percentage\nof time the profile spent on these frames",
    "start": "434220",
    "end": "438200"
  },
  {
    "text": "compared to the percentage expected.",
    "start": "438200",
    "end": "439700"
  },
  {
    "text": "The second recommendation points out the redundant\nconstruction of the AmazonSQSClient,",
    "start": "447700",
    "end": "452400"
  },
  {
    "text": "which is re-created every time the main loop restarts.",
    "start": "452400",
    "end": "454979"
  },
  {
    "text": "CodeGuru says that the profile spends 1.04% of its runnable and blocked time re-creating AWS SDK clients,",
    "start": "455720",
    "end": "462920"
  },
  {
    "text": "when in performant apps, it typically spends less\nthan 1%.",
    "start": "462920",
    "end": "465740"
  },
  {
    "text": "It then identifies the method call which appears\nto be most matched to this issue.",
    "start": "466300",
    "end": "470080"
  },
  {
    "text": "Let’s look at the frame that appears to be responsible.",
    "start": "471020",
    "end": "473259"
  },
  {
    "text": "This is a zoomed in view of the AmazonWebServiceClient initialization method",
    "start": "476480",
    "end": "480280"
  },
  {
    "text": "within the profile.",
    "start": "480280",
    "end": "481280"
  },
  {
    "text": "Looking at the parent methods, you can see\nthat this method is directly linked to the",
    "start": "481960",
    "end": "485300"
  },
  {
    "text": "AmazonSQSClientBuilder object constructed\nin the putOnQueue method.",
    "start": "485300",
    "end": "489319"
  },
  {
    "text": "Let’s modify the code to take care of this issue.",
    "start": "494640",
    "end": "496820"
  },
  {
    "text": "Currently, the AmazonSQS constructor is in the putOnQueue method,",
    "start": "504860",
    "end": "508580"
  },
  {
    "text": "which runs repeatedly over the course of the application's lifetime.",
    "start": "508580",
    "end": "511479"
  },
  {
    "text": "Let’s put it above the main method as a\nclass variable so that it is constructed only once",
    "start": "512340",
    "end": "516680"
  },
  {
    "text": "during the class initialization.",
    "start": "516680",
    "end": "518060"
  },
  {
    "text": "Save the changes.",
    "start": "520740",
    "end": "521760"
  },
  {
    "text": "Now let’s run the profiler again and check back in a few hours to see how the profile changes.",
    "start": "525060",
    "end": "529360"
  },
  {
    "text": "As you can see, the section of the stack profile\nassociated with the putOnQueue CPU time",
    "start": "531600",
    "end": "536100"
  },
  {
    "text": "is much smaller.",
    "start": "536100",
    "end": "537040"
  },
  {
    "text": "Now that a full profile has been generated,\nlet’s search for the putOnQueue method",
    "start": "537780",
    "end": "541460"
  },
  {
    "text": "to see how its relative running time and stack\ncomposition has changed.",
    "start": "541460",
    "end": "544560"
  },
  {
    "text": "Notice that the putOnQueue method is now responsible\nfor 4.39% of the overall CPU time,",
    "start": "545140",
    "end": "550420"
  },
  {
    "text": "as opposed to the 32.19% it had been responsible for previously.",
    "start": "550420",
    "end": "554600"
  },
  {
    "text": "Let’s zoom in to look at the overall profile.",
    "start": "555200",
    "end": "557220"
  },
  {
    "text": "As you can see, the section that had been\npreviously associated with AmazonSQSClientBuilder",
    "start": "561760",
    "end": "566440"
  },
  {
    "text": "is no longer present within the putOnQueue profile.",
    "start": "566440",
    "end": "568960"
  },
  {
    "text": "You’ve just seen how to improve code efficiency\nusing Amazon CodeGuru Profiler.",
    "start": "570220",
    "end": "574220"
  },
  {
    "text": "Thanks for watching.",
    "start": "575100",
    "end": "576000"
  },
  {
    "text": "Now it’s your turn to try.",
    "start": "576000",
    "end": "576980"
  }
]