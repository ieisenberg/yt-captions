[
  {
    "text": "hello my name is Simon Goldberg and I'm",
    "start": "0",
    "end": "3120"
  },
  {
    "text": "a blockchain specialist Solutions",
    "start": "3120",
    "end": "4799"
  },
  {
    "text": "architect at AWS in this video I am",
    "start": "4799",
    "end": "8340"
  },
  {
    "text": "going to explore how you can analyze",
    "start": "8340",
    "end": "10080"
  },
  {
    "text": "web3 data by utilizing the graph",
    "start": "10080",
    "end": "12300"
  },
  {
    "text": "protocol I will additionally discuss the",
    "start": "12300",
    "end": "15179"
  },
  {
    "text": "concept of subgraphs in various use",
    "start": "15179",
    "end": "17580"
  },
  {
    "text": "cases of the graph I will then show you",
    "start": "17580",
    "end": "20279"
  },
  {
    "text": "how to deploy your own graph node on AWS",
    "start": "20279",
    "end": "22680"
  },
  {
    "text": "and executed query let's get started",
    "start": "22680",
    "end": "25640"
  },
  {
    "text": "analyzing data originating on a",
    "start": "25640",
    "end": "28199"
  },
  {
    "text": "blockchain can be a challenging and",
    "start": "28199",
    "end": "30420"
  },
  {
    "text": "time-consuming process due to the",
    "start": "30420",
    "end": "32578"
  },
  {
    "text": "complexity and variety of smart contract",
    "start": "32579",
    "end": "35280"
  },
  {
    "text": "structures this primary obstacle",
    "start": "35280",
    "end": "37980"
  },
  {
    "text": "requires an in-depth understanding of",
    "start": "37980",
    "end": "40620"
  },
  {
    "text": "the various platforms you wish to",
    "start": "40620",
    "end": "42480"
  },
  {
    "text": "analyze in the web3 space each protocol",
    "start": "42480",
    "end": "46079"
  },
  {
    "text": "has their own way of storing and calling",
    "start": "46079",
    "end": "48239"
  },
  {
    "text": "methods making implementation a",
    "start": "48239",
    "end": "51059"
  },
  {
    "text": "challenging and burdensome process the",
    "start": "51059",
    "end": "53760"
  },
  {
    "text": "graph helps address this issue of",
    "start": "53760",
    "end": "55980"
  },
  {
    "text": "providing a standardized open source",
    "start": "55980",
    "end": "58079"
  },
  {
    "text": "platform that allows you to query data",
    "start": "58079",
    "end": "60600"
  },
  {
    "text": "from evm compatible blockchains in a",
    "start": "60600",
    "end": "63480"
  },
  {
    "text": "fast and efficient way the primary",
    "start": "63480",
    "end": "66299"
  },
  {
    "text": "purpose of the graph is to index process",
    "start": "66299",
    "end": "69299"
  },
  {
    "text": "and store event data from a blockchain",
    "start": "69299",
    "end": "72180"
  },
  {
    "text": "it converts have been submitted from a",
    "start": "72180",
    "end": "74580"
  },
  {
    "text": "smart contract into entities that are",
    "start": "74580",
    "end": "76680"
  },
  {
    "text": "consumable by a front end or any API",
    "start": "76680",
    "end": "79320"
  },
  {
    "text": "utilizing logic after data is indexed",
    "start": "79320",
    "end": "82799"
  },
  {
    "text": "from a blockchain it is organized into a",
    "start": "82799",
    "end": "85500"
  },
  {
    "text": "predefined schema before being persisted",
    "start": "85500",
    "end": "88259"
  },
  {
    "text": "into a postgres SQL database the data",
    "start": "88259",
    "end": "91740"
  },
  {
    "text": "can then be queried through graphql",
    "start": "91740",
    "end": "93540"
  },
  {
    "text": "endpoints on the graph node the mappings",
    "start": "93540",
    "end": "96119"
  },
  {
    "text": "and smart contract definitions are",
    "start": "96119",
    "end": "98100"
  },
  {
    "text": "defined as a subgraph use cases of the",
    "start": "98100",
    "end": "100860"
  },
  {
    "text": "graph protocols spend multiple",
    "start": "100860",
    "end": "102900"
  },
  {
    "text": "Industries uni swap a protocol in the D5",
    "start": "102900",
    "end": "106200"
  },
  {
    "text": "space uses a subgraph Perfection trading",
    "start": "106200",
    "end": "109140"
  },
  {
    "text": "paired data in real time this allows",
    "start": "109140",
    "end": "112079"
  },
  {
    "text": "users to get the latest prices and",
    "start": "112079",
    "end": "114180"
  },
  {
    "text": "liquidity information for different",
    "start": "114180",
    "end": "116040"
  },
  {
    "text": "cryptocurrency pairs",
    "start": "116040",
    "end": "118140"
  },
  {
    "text": "and the nft ecosystem a subgraph can be",
    "start": "118140",
    "end": "121619"
  },
  {
    "text": "created to track marketplaces such as",
    "start": "121619",
    "end": "124200"
  },
  {
    "text": "open C this allows developers the",
    "start": "124200",
    "end": "127079"
  },
  {
    "text": "ability to track ownership and",
    "start": "127079",
    "end": "129239"
  },
  {
    "text": "transaction history of digital assets",
    "start": "129239",
    "end": "132020"
  },
  {
    "text": "governance platform suctions Aragon uses",
    "start": "132020",
    "end": "135480"
  },
  {
    "text": "a subgraph in order to keep track of",
    "start": "135480",
    "end": "137520"
  },
  {
    "text": "voting activities and decisions made",
    "start": "137520",
    "end": "140099"
  },
  {
    "text": "within their dials this enables a",
    "start": "140099",
    "end": "142379"
  },
  {
    "text": "transparent and Democratic process which",
    "start": "142379",
    "end": "145260"
  },
  {
    "text": "is crucial for maintaining trust within",
    "start": "145260",
    "end": "148020"
  },
  {
    "text": "a community",
    "start": "148020",
    "end": "149160"
  },
  {
    "text": "blockchain games such as Avi gakshi use",
    "start": "149160",
    "end": "152580"
  },
  {
    "text": "a subgraph in order to index in-game",
    "start": "152580",
    "end": "154800"
  },
  {
    "text": "events",
    "start": "154800",
    "end": "156120"
  },
  {
    "text": "the current state of the game can then",
    "start": "156120",
    "end": "158220"
  },
  {
    "text": "be displayed on the front end",
    "start": "158220",
    "end": "160080"
  },
  {
    "text": "apart from blockchain data directly the",
    "start": "160080",
    "end": "162660"
  },
  {
    "text": "graph can additionally query to",
    "start": "162660",
    "end": "164160"
  },
  {
    "text": "interplanetary file system otherwise",
    "start": "164160",
    "end": "166920"
  },
  {
    "text": "known as ipfs which is a decentralized",
    "start": "166920",
    "end": "170040"
  },
  {
    "text": "network designed for storing and sharing",
    "start": "170040",
    "end": "172440"
  },
  {
    "text": "data these are just a few examples of",
    "start": "172440",
    "end": "175080"
  },
  {
    "text": "how to grasp the centralized data",
    "start": "175080",
    "end": "176879"
  },
  {
    "text": "indexing can be utilized as Innovation",
    "start": "176879",
    "end": "179519"
  },
  {
    "text": "continues within the web 3 ecosystem the",
    "start": "179519",
    "end": "182580"
  },
  {
    "text": "possibilities for utilizing the graph",
    "start": "182580",
    "end": "184560"
  },
  {
    "text": "will only continue to expand",
    "start": "184560",
    "end": "187080"
  },
  {
    "text": "sub graphs can be thought of as an API",
    "start": "187080",
    "end": "189540"
  },
  {
    "text": "endpoint that allows developers the",
    "start": "189540",
    "end": "192000"
  },
  {
    "text": "ability to retrieve and display data in",
    "start": "192000",
    "end": "194760"
  },
  {
    "text": "a way that makes sense for their",
    "start": "194760",
    "end": "196140"
  },
  {
    "text": "application",
    "start": "196140",
    "end": "197580"
  },
  {
    "text": "subgraph definitions specify what smart",
    "start": "197580",
    "end": "200519"
  },
  {
    "text": "contract to index as well as the",
    "start": "200519",
    "end": "203280"
  },
  {
    "text": "specific events to track",
    "start": "203280",
    "end": "205319"
  },
  {
    "text": "the mapping is used to persist the data",
    "start": "205319",
    "end": "207840"
  },
  {
    "text": "into the database",
    "start": "207840",
    "end": "209220"
  },
  {
    "text": "to fully Define a subgraph you specify",
    "start": "209220",
    "end": "211920"
  },
  {
    "text": "three parts",
    "start": "211920",
    "end": "213420"
  },
  {
    "text": "the graphql schema defines the target",
    "start": "213420",
    "end": "216480"
  },
  {
    "text": "schema for storage it also defines how",
    "start": "216480",
    "end": "219599"
  },
  {
    "text": "you can query for data later on",
    "start": "219599",
    "end": "222120"
  },
  {
    "text": "the mapping translate smart contract",
    "start": "222120",
    "end": "225060"
  },
  {
    "text": "event data into entities this component",
    "start": "225060",
    "end": "228000"
  },
  {
    "text": "defines the transformation logic",
    "start": "228000",
    "end": "231060"
  },
  {
    "text": "the subgraph configuration specifies the",
    "start": "231060",
    "end": "234060"
  },
  {
    "text": "smart contract to index the starting",
    "start": "234060",
    "end": "236459"
  },
  {
    "text": "block and similar configuration data",
    "start": "236459",
    "end": "240000"
  },
  {
    "text": "after a subgraph has been defined it",
    "start": "240000",
    "end": "242940"
  },
  {
    "text": "needs to be deployed to a graph node",
    "start": "242940",
    "end": "245400"
  },
  {
    "text": "with a deployment the node is aware of",
    "start": "245400",
    "end": "248099"
  },
  {
    "text": "the subgraph and will start indexing the",
    "start": "248099",
    "end": "250319"
  },
  {
    "text": "smart contract it starts with the",
    "start": "250319",
    "end": "252720"
  },
  {
    "text": "defined starting block and backfills the",
    "start": "252720",
    "end": "255239"
  },
  {
    "text": "database up to the current blockhead",
    "start": "255239",
    "end": "257760"
  },
  {
    "text": "when the graph node is in sync with the",
    "start": "257760",
    "end": "260040"
  },
  {
    "text": "current Blockhead it subscribes to",
    "start": "260040",
    "end": "262260"
  },
  {
    "text": "future events and updates to database as",
    "start": "262260",
    "end": "264720"
  },
  {
    "text": "they come in this diagram you can see",
    "start": "264720",
    "end": "267960"
  },
  {
    "text": "how data flows through the graph for",
    "start": "267960",
    "end": "270960"
  },
  {
    "text": "starters a transaction on a smart",
    "start": "270960",
    "end": "273000"
  },
  {
    "text": "contract will add data to the blockchain",
    "start": "273000",
    "end": "275280"
  },
  {
    "text": "during the transaction process the smart",
    "start": "275280",
    "end": "278580"
  },
  {
    "text": "contract will trigger one or more events",
    "start": "278580",
    "end": "282120"
  },
  {
    "text": "the graph node consistently scans the",
    "start": "282120",
    "end": "284460"
  },
  {
    "text": "blockchain for new blocks and the data",
    "start": "284460",
    "end": "286740"
  },
  {
    "text": "that your subgraph may contain",
    "start": "286740",
    "end": "288960"
  },
  {
    "text": "it will identify events related to your",
    "start": "288960",
    "end": "291419"
  },
  {
    "text": "subgraph Within These blocks and",
    "start": "291419",
    "end": "293280"
  },
  {
    "text": "implement the mapping handlers that you",
    "start": "293280",
    "end": "295139"
  },
  {
    "text": "have set up this mapping a Watson module",
    "start": "295139",
    "end": "298440"
  },
  {
    "text": "generates or modifies data entities that",
    "start": "298440",
    "end": "301680"
  },
  {
    "text": "the graph node stores in response to the",
    "start": "301680",
    "end": "303780"
  },
  {
    "text": "specified blockchain events the adapt",
    "start": "303780",
    "end": "306240"
  },
  {
    "text": "queries dotted from the graph node via",
    "start": "306240",
    "end": "308520"
  },
  {
    "text": "the node's graphql endpoint the graph",
    "start": "308520",
    "end": "311040"
  },
  {
    "text": "node then converts to graphql request in",
    "start": "311040",
    "end": "313800"
  },
  {
    "text": "the queries for its fundamental data",
    "start": "313800",
    "end": "315780"
  },
  {
    "text": "store to retrieve the required data the",
    "start": "315780",
    "end": "318540"
  },
  {
    "text": "data can then be showcased to an end",
    "start": "318540",
    "end": "320520"
  },
  {
    "text": "user in a user interface",
    "start": "320520",
    "end": "322800"
  },
  {
    "text": "the graph index is smart contract event",
    "start": "322800",
    "end": "325380"
  },
  {
    "text": "data which is sourced from a blockchain",
    "start": "325380",
    "end": "327780"
  },
  {
    "text": "node a graph node retrieves all new data",
    "start": "327780",
    "end": "331020"
  },
  {
    "text": "for a newly created block from the",
    "start": "331020",
    "end": "332820"
  },
  {
    "text": "blockchain node and then Maps the data",
    "start": "332820",
    "end": "335100"
  },
  {
    "text": "to the database schema as the input",
    "start": "335100",
    "end": "337680"
  },
  {
    "text": "source a graph node can connect to",
    "start": "337680",
    "end": "339900"
  },
  {
    "text": "either a full or archive blockchain node",
    "start": "339900",
    "end": "343560"
  },
  {
    "text": "there are several differences between a",
    "start": "343560",
    "end": "345720"
  },
  {
    "text": "full node and an archive node that are",
    "start": "345720",
    "end": "348060"
  },
  {
    "text": "crucial to understand when deciding",
    "start": "348060",
    "end": "349740"
  },
  {
    "text": "which smart contracts you wish to index",
    "start": "349740",
    "end": "352440"
  },
  {
    "text": "a full node stores the entire",
    "start": "352440",
    "end": "354419"
  },
  {
    "text": "blockchain's history of transactions but",
    "start": "354419",
    "end": "357060"
  },
  {
    "text": "only the most recent state of each smart",
    "start": "357060",
    "end": "358919"
  },
  {
    "text": "contract the latest 128 blocks making it",
    "start": "358919",
    "end": "363479"
  },
  {
    "text": "less storage intensive",
    "start": "363479",
    "end": "365400"
  },
  {
    "text": "an archive node retains all historical",
    "start": "365400",
    "end": "368220"
  },
  {
    "text": "States providing a complete historical",
    "start": "368220",
    "end": "370680"
  },
  {
    "text": "context but requires substantially more",
    "start": "370680",
    "end": "373860"
  },
  {
    "text": "storage",
    "start": "373860",
    "end": "374880"
  },
  {
    "text": "this variation determines the data",
    "start": "374880",
    "end": "377100"
  },
  {
    "text": "grafner can use while constructing a",
    "start": "377100",
    "end": "379259"
  },
  {
    "text": "status set",
    "start": "379259",
    "end": "380580"
  },
  {
    "text": "in this video I will be using Amazon",
    "start": "380580",
    "end": "382919"
  },
  {
    "text": "manage blockchain to run an ethereum",
    "start": "382919",
    "end": "385259"
  },
  {
    "text": "full nerdust a data source let's deploy",
    "start": "385259",
    "end": "387960"
  },
  {
    "text": "a self-hosted graph node on AWS before",
    "start": "387960",
    "end": "391139"
  },
  {
    "text": "we dive into the implementation let's",
    "start": "391139",
    "end": "393660"
  },
  {
    "text": "briefly discuss the architecture",
    "start": "393660",
    "end": "396060"
  },
  {
    "text": "from the local development machine you",
    "start": "396060",
    "end": "398400"
  },
  {
    "text": "can directly access the Amazon elastic",
    "start": "398400",
    "end": "400680"
  },
  {
    "text": "compute Cloud instance that host the",
    "start": "400680",
    "end": "402660"
  },
  {
    "text": "containers this path is used to deploy a",
    "start": "402660",
    "end": "405479"
  },
  {
    "text": "subgraph and maintain the graph node the",
    "start": "405479",
    "end": "408360"
  },
  {
    "text": "graph node stores the index on an Amazon",
    "start": "408360",
    "end": "410639"
  },
  {
    "text": "Aurora postgresql compatible Edition",
    "start": "410639",
    "end": "413460"
  },
  {
    "text": "database",
    "start": "413460",
    "end": "415020"
  },
  {
    "text": "the ipfs node is backed by an Amazon",
    "start": "415020",
    "end": "417600"
  },
  {
    "text": "elastic file system in order to store",
    "start": "417600",
    "end": "420600"
  },
  {
    "text": "the subgauss metadata the graph node",
    "start": "420600",
    "end": "423660"
  },
  {
    "text": "indexes the blockchain in this case an",
    "start": "423660",
    "end": "426660"
  },
  {
    "text": "ethereum full node provided by Amazon",
    "start": "426660",
    "end": "428819"
  },
  {
    "text": "manage blockchain for queries access to",
    "start": "428819",
    "end": "432300"
  },
  {
    "text": "the graphql endpoints is routed through",
    "start": "432300",
    "end": "434220"
  },
  {
    "text": "API Gateway and an application load",
    "start": "434220",
    "end": "436979"
  },
  {
    "text": "balance sheet in order to establish",
    "start": "436979",
    "end": "439259"
  },
  {
    "text": "stable endpoints I will now show you how",
    "start": "439259",
    "end": "442139"
  },
  {
    "text": "to deploy your own self-hosted graph",
    "start": "442139",
    "end": "444120"
  },
  {
    "text": "node on the AWS let's get started with",
    "start": "444120",
    "end": "447000"
  },
  {
    "text": "the pre-rested quiz steps if you do not",
    "start": "447000",
    "end": "449520"
  },
  {
    "text": "have the AWS Cloud development kit",
    "start": "449520",
    "end": "452039"
  },
  {
    "text": "installed you can install it with the",
    "start": "452039",
    "end": "453960"
  },
  {
    "text": "following command also make sure that",
    "start": "453960",
    "end": "456479"
  },
  {
    "text": "you have Docker installed on your",
    "start": "456479",
    "end": "458220"
  },
  {
    "text": "machine you can clone a repository from",
    "start": "458220",
    "end": "460919"
  },
  {
    "text": "GitHub which is linked in the",
    "start": "460919",
    "end": "462479"
  },
  {
    "text": "description at the top level directory",
    "start": "462479",
    "end": "464940"
  },
  {
    "text": "of the project run npm install to",
    "start": "464940",
    "end": "467520"
  },
  {
    "text": "install all the required dependencies in",
    "start": "467520",
    "end": "470160"
  },
  {
    "text": "order to create and deploy subgraphs you",
    "start": "470160",
    "end": "472560"
  },
  {
    "text": "must additionally install the graph",
    "start": "472560",
    "end": "474419"
  },
  {
    "text": "command line interface in the graph",
    "start": "474419",
    "end": "476340"
  },
  {
    "text": "typescript Library you can install these",
    "start": "476340",
    "end": "478680"
  },
  {
    "text": "on your machine with the following",
    "start": "478680",
    "end": "480180"
  },
  {
    "text": "commands before deploying your graph",
    "start": "480180",
    "end": "482340"
  },
  {
    "text": "node to AWS you first need to modify the",
    "start": "482340",
    "end": "485360"
  },
  {
    "text": "cdk.json file the client URL specifies",
    "start": "485360",
    "end": "489120"
  },
  {
    "text": "to RPC URL for your blockchain node when",
    "start": "489120",
    "end": "492360"
  },
  {
    "text": "using manage blockchain as your ethereum",
    "start": "492360",
    "end": "494340"
  },
  {
    "text": "node make sure you're using token based",
    "start": "494340",
    "end": "496680"
  },
  {
    "text": "access this is due to the default graph",
    "start": "496680",
    "end": "499139"
  },
  {
    "text": "node being unable to generate AWS",
    "start": "499139",
    "end": "501419"
  },
  {
    "text": "signature V4 request",
    "start": "501419",
    "end": "504060"
  },
  {
    "text": "the chain ID parameter specifies to",
    "start": "504060",
    "end": "506699"
  },
  {
    "text": "chain ID of the network that we wish to",
    "start": "506699",
    "end": "508680"
  },
  {
    "text": "index in this case I am indexing",
    "start": "508680",
    "end": "511020"
  },
  {
    "text": "ethereum in that so I've set this equal",
    "start": "511020",
    "end": "513060"
  },
  {
    "text": "to the value of 1.",
    "start": "513060",
    "end": "515219"
  },
  {
    "text": "in order to access the graph node from",
    "start": "515219",
    "end": "517320"
  },
  {
    "text": "your local machine you need to open the",
    "start": "517320",
    "end": "519060"
  },
  {
    "text": "graphene Security Group to the external",
    "start": "519060",
    "end": "521219"
  },
  {
    "text": "IP address therefore you need to look up",
    "start": "521219",
    "end": "523680"
  },
  {
    "text": "your IP and modify the allowed IP",
    "start": "523680",
    "end": "526020"
  },
  {
    "text": "variable so it gets exported to the AWS",
    "start": "526020",
    "end": "528540"
  },
  {
    "text": "cdk as a contact variable if you're",
    "start": "528540",
    "end": "531899"
  },
  {
    "text": "developing from an AWS based instance",
    "start": "531899",
    "end": "534300"
  },
  {
    "text": "such as Cloud9 you need to open the",
    "start": "534300",
    "end": "536820"
  },
  {
    "text": "graph Security Group to allow traffic",
    "start": "536820",
    "end": "538560"
  },
  {
    "text": "from the instances Security Group if",
    "start": "538560",
    "end": "541380"
  },
  {
    "text": "you're developing from an ec2 instance",
    "start": "541380",
    "end": "543120"
  },
  {
    "text": "note the security group's ID and add it",
    "start": "543120",
    "end": "545399"
  },
  {
    "text": "to the allowed SG parameter if you're",
    "start": "545399",
    "end": "547980"
  },
  {
    "text": "developing locally you can set this",
    "start": "547980",
    "end": "549899"
  },
  {
    "text": "value to an empty string the API key",
    "start": "549899",
    "end": "552839"
  },
  {
    "text": "parameter sets a value that will be",
    "start": "552839",
    "end": "555000"
  },
  {
    "text": "needed to access the API Gateway for",
    "start": "555000",
    "end": "557399"
  },
  {
    "text": "queries this can be any string the value",
    "start": "557399",
    "end": "560459"
  },
  {
    "text": "of this parameter needs to be included",
    "start": "560459",
    "end": "562440"
  },
  {
    "text": "as a header when making a request to the",
    "start": "562440",
    "end": "564720"
  },
  {
    "text": "graph node now that you have completed",
    "start": "564720",
    "end": "567120"
  },
  {
    "text": "all of the prereza quiz you can list the",
    "start": "567120",
    "end": "569220"
  },
  {
    "text": "available AWS GDK Stacks by running the",
    "start": "569220",
    "end": "572220"
  },
  {
    "text": "following command",
    "start": "572220",
    "end": "575000"
  },
  {
    "text": "you can now deploy the graph service",
    "start": "575640",
    "end": "577980"
  },
  {
    "text": "stack by running cdk deploy the graph",
    "start": "577980",
    "end": "580980"
  },
  {
    "text": "service stack this will create a cloud",
    "start": "580980",
    "end": "583080"
  },
  {
    "text": "formation template that contains all of",
    "start": "583080",
    "end": "585240"
  },
  {
    "text": "the resources when it asks you if you",
    "start": "585240",
    "end": "587820"
  },
  {
    "text": "wish to deploy these changes please",
    "start": "587820",
    "end": "589500"
  },
  {
    "text": "enter yes",
    "start": "589500",
    "end": "591000"
  },
  {
    "text": "the deployment of your graph node will",
    "start": "591000",
    "end": "593040"
  },
  {
    "text": "take approximately 30 minutes please",
    "start": "593040",
    "end": "595380"
  },
  {
    "text": "feel free to pause the video in return",
    "start": "595380",
    "end": "597120"
  },
  {
    "text": "when your deployment is ready you will",
    "start": "597120",
    "end": "599040"
  },
  {
    "text": "know it is ready when you see the",
    "start": "599040",
    "end": "600360"
  },
  {
    "text": "following screen",
    "start": "600360",
    "end": "602220"
  },
  {
    "text": "now that your graph node is deployed you",
    "start": "602220",
    "end": "604560"
  },
  {
    "text": "can create a sub graph there are two",
    "start": "604560",
    "end": "606540"
  },
  {
    "text": "ways to do so with this cdk application",
    "start": "606540",
    "end": "608940"
  },
  {
    "text": "you can start from scratch and have the",
    "start": "608940",
    "end": "611160"
  },
  {
    "text": "graphs GLI scaffold a folder for you by",
    "start": "611160",
    "end": "613740"
  },
  {
    "text": "running the graph and Nick command you",
    "start": "613740",
    "end": "616019"
  },
  {
    "text": "can also use an included sub graph as a",
    "start": "616019",
    "end": "618180"
  },
  {
    "text": "starting point for the sake of this",
    "start": "618180",
    "end": "620220"
  },
  {
    "text": "video I will be using the board ape",
    "start": "620220",
    "end": "622140"
  },
  {
    "text": "simple example found in the subgraph",
    "start": "622140",
    "end": "624060"
  },
  {
    "text": "folder of the Repository",
    "start": "624060",
    "end": "626220"
  },
  {
    "text": "after creating this definition the",
    "start": "626220",
    "end": "628800"
  },
  {
    "text": "subgraph needs to be deployed to the",
    "start": "628800",
    "end": "630540"
  },
  {
    "text": "node this consists of three steps",
    "start": "630540",
    "end": "632940"
  },
  {
    "text": "building creating and deploying the",
    "start": "632940",
    "end": "635700"
  },
  {
    "text": "First Command graphql gen will build the",
    "start": "635700",
    "end": "638220"
  },
  {
    "text": "subgraph this will create a generated",
    "start": "638220",
    "end": "640260"
  },
  {
    "text": "folder which has all the files which are",
    "start": "640260",
    "end": "642480"
  },
  {
    "text": "necessary for deployment the second",
    "start": "642480",
    "end": "644760"
  },
  {
    "text": "command will create the subgraph on the",
    "start": "644760",
    "end": "647040"
  },
  {
    "text": "graph node and the third command will",
    "start": "647040",
    "end": "649680"
  },
  {
    "text": "deploy the subgraph to the node after",
    "start": "649680",
    "end": "652320"
  },
  {
    "text": "the last command is finished the",
    "start": "652320",
    "end": "653940"
  },
  {
    "text": "subgraph has been deployed and the graph",
    "start": "653940",
    "end": "655860"
  },
  {
    "text": "node will begin indexing from the",
    "start": "655860",
    "end": "657660"
  },
  {
    "text": "predefined starting block",
    "start": "657660",
    "end": "659459"
  },
  {
    "text": "I will now run the three commands to",
    "start": "659459",
    "end": "661980"
  },
  {
    "text": "build create and deploy the subgraph to",
    "start": "661980",
    "end": "664440"
  },
  {
    "text": "the graph node",
    "start": "664440",
    "end": "666120"
  },
  {
    "text": "once the build is complete we can now",
    "start": "666120",
    "end": "668640"
  },
  {
    "text": "create the subgraph on the Node as you",
    "start": "668640",
    "end": "671700"
  },
  {
    "text": "can see a sub graph has been created",
    "start": "671700",
    "end": "673740"
  },
  {
    "text": "called bayc example I can now deploy the",
    "start": "673740",
    "end": "677519"
  },
  {
    "text": "subgraph to the graph node I first have",
    "start": "677519",
    "end": "680519"
  },
  {
    "text": "to specify a version label to use",
    "start": "680519",
    "end": "683160"
  },
  {
    "text": "this is necessary if we update our",
    "start": "683160",
    "end": "685200"
  },
  {
    "text": "subgraph and want to provide a new",
    "start": "685200",
    "end": "686940"
  },
  {
    "text": "version",
    "start": "686940",
    "end": "687839"
  },
  {
    "text": "the subgraph will then be compiled and",
    "start": "687839",
    "end": "690060"
  },
  {
    "text": "the metadata will be stored in ipfs if",
    "start": "690060",
    "end": "693240"
  },
  {
    "text": "everything worked correctly it should",
    "start": "693240",
    "end": "694860"
  },
  {
    "text": "say that the build was completed",
    "start": "694860",
    "end": "697680"
  },
  {
    "text": "after the subgraph has been deployed it",
    "start": "697680",
    "end": "700200"
  },
  {
    "text": "can be queried via graphql there are two",
    "start": "700200",
    "end": "702839"
  },
  {
    "text": "ways for accessing the graph node in",
    "start": "702839",
    "end": "704880"
  },
  {
    "text": "this cdk application from the local",
    "start": "704880",
    "end": "707279"
  },
  {
    "text": "development machine you can use the",
    "start": "707279",
    "end": "709320"
  },
  {
    "text": "first endpoint this endpoint also hosts",
    "start": "709320",
    "end": "711899"
  },
  {
    "text": "the graphql Explorer for General queries",
    "start": "711899",
    "end": "714839"
  },
  {
    "text": "from the front end or other applications",
    "start": "714839",
    "end": "716880"
  },
  {
    "text": "you can query the subgraph through API",
    "start": "716880",
    "end": "719279"
  },
  {
    "text": "Gateway there are two routes defined the",
    "start": "719279",
    "end": "722399"
  },
  {
    "text": "first route accepts valid subgraph names",
    "start": "722399",
    "end": "724740"
  },
  {
    "text": "as a path element it is used for queries",
    "start": "724740",
    "end": "727500"
  },
  {
    "text": "on the specified subgraph the second",
    "start": "727500",
    "end": "729899"
  },
  {
    "text": "route is for status queries about the",
    "start": "729899",
    "end": "731940"
  },
  {
    "text": "syncing status of your graph node I will",
    "start": "731940",
    "end": "734459"
  },
  {
    "text": "now go over a code example written in",
    "start": "734459",
    "end": "736740"
  },
  {
    "text": "Python that programmatically queries the",
    "start": "736740",
    "end": "739320"
  },
  {
    "text": "status route of the API Gateway I pass",
    "start": "739320",
    "end": "742380"
  },
  {
    "text": "in the following query and print out the",
    "start": "742380",
    "end": "744839"
  },
  {
    "text": "results",
    "start": "744839",
    "end": "745800"
  },
  {
    "text": "when I run this code you can see that",
    "start": "745800",
    "end": "748260"
  },
  {
    "text": "the synced status is true and the latest",
    "start": "748260",
    "end": "751140"
  },
  {
    "text": "block number is equal to The Exchange",
    "start": "751140",
    "end": "753240"
  },
  {
    "text": "block head",
    "start": "753240",
    "end": "754680"
  },
  {
    "text": "this lets us know that our subgraph is",
    "start": "754680",
    "end": "756959"
  },
  {
    "text": "fully in sync with ethereum mainnet you",
    "start": "756959",
    "end": "759839"
  },
  {
    "text": "can access the graphql playground",
    "start": "759839",
    "end": "761820"
  },
  {
    "text": "through the IP address of the ec2",
    "start": "761820",
    "end": "763980"
  },
  {
    "text": "instance by using the endpoint that I",
    "start": "763980",
    "end": "766019"
  },
  {
    "text": "was referring to previously",
    "start": "766019",
    "end": "768180"
  },
  {
    "text": "I've prepared to fall and query that",
    "start": "768180",
    "end": "770459"
  },
  {
    "text": "returns various information about the",
    "start": "770459",
    "end": "772440"
  },
  {
    "text": "board ape Yacht Club nft collection when",
    "start": "772440",
    "end": "775079"
  },
  {
    "text": "I run this code a request will be sent",
    "start": "775079",
    "end": "777240"
  },
  {
    "text": "to the graph node and it will get back",
    "start": "777240",
    "end": "778980"
  },
  {
    "text": "to us with a response as you can see",
    "start": "778980",
    "end": "781500"
  },
  {
    "text": "various information about this",
    "start": "781500",
    "end": "783300"
  },
  {
    "text": "collection has been returned you can",
    "start": "783300",
    "end": "785700"
  },
  {
    "text": "also experiment with the schema under",
    "start": "785700",
    "end": "787740"
  },
  {
    "text": "the Explorer tab to help you write new",
    "start": "787740",
    "end": "789959"
  },
  {
    "text": "queries when you are ready to remove the",
    "start": "789959",
    "end": "792180"
  },
  {
    "text": "AWS resources that you have created you",
    "start": "792180",
    "end": "794880"
  },
  {
    "text": "can run the following command this",
    "start": "794880",
    "end": "797279"
  },
  {
    "text": "command may take a few minutes to",
    "start": "797279",
    "end": "798959"
  },
  {
    "text": "complete in conclusion the graph",
    "start": "798959",
    "end": "801540"
  },
  {
    "text": "protocol enables developers the ability",
    "start": "801540",
    "end": "803940"
  },
  {
    "text": "to easily access onshine data and",
    "start": "803940",
    "end": "806579"
  },
  {
    "text": "subgraphs provide an efficient way to",
    "start": "806579",
    "end": "808560"
  },
  {
    "text": "index and query that data",
    "start": "808560",
    "end": "810600"
  },
  {
    "text": "the graph can significantly enhance the",
    "start": "810600",
    "end": "813000"
  },
  {
    "text": "efficiency and performance of dapps",
    "start": "813000",
    "end": "814860"
  },
  {
    "text": "leading to a better user experience that",
    "start": "814860",
    "end": "817800"
  },
  {
    "text": "is all for today's tutorial thank you",
    "start": "817800",
    "end": "820320"
  },
  {
    "text": "very much for joining me in this",
    "start": "820320",
    "end": "821940"
  },
  {
    "text": "expiration of the graph protocol and how",
    "start": "821940",
    "end": "824459"
  },
  {
    "text": "you can deploy your own self-hosted",
    "start": "824459",
    "end": "826320"
  },
  {
    "text": "graph node on the AWS happy development",
    "start": "826320",
    "end": "831320"
  }
]