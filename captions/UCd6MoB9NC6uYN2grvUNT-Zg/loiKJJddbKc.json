[
  {
    "start": "0",
    "end": "126000"
  },
  {
    "text": "hey good morning everyone my name is Adnan and I'm one of your room hosts just some important housekeeping",
    "start": "3230",
    "end": "9450"
  },
  {
    "text": "information to share emergency exits are located at the back to your left restrooms are located on the back to",
    "start": "9450",
    "end": "15900"
  },
  {
    "text": "your right just remember to silence all your devices during the session and please Ramona to provide feedback after",
    "start": "15900",
    "end": "22020"
  },
  {
    "text": "the session as well for this session running containers in a hybrid environment please welcome to the stage",
    "start": "22020",
    "end": "28080"
  },
  {
    "text": "Harsanyi bonnie and Lawton a garage all",
    "start": "28080",
    "end": "44129"
  },
  {
    "text": "right good morning everyone all right",
    "start": "44129",
    "end": "52860"
  },
  {
    "text": "welcome to this session this is running containers in a hybrid environment the goal of this session is this is by the",
    "start": "52860",
    "end": "60030"
  },
  {
    "text": "way a 300 level session I'm assuming you have a background on containers and how",
    "start": "60030",
    "end": "65369"
  },
  {
    "text": "to write darker files and docker images so we're not gonna go deep dive deep into that aspect we're gonna be looking",
    "start": "65369",
    "end": "71490"
  },
  {
    "text": "at patterns so on how do you deploy containers using AWS services so here's",
    "start": "71490",
    "end": "78299"
  },
  {
    "text": "the agenda I'd like to focus on CCS and",
    "start": "78299",
    "end": "84479"
  },
  {
    "text": "far gate implementation that is a method of orchestrating containers on AWS and",
    "start": "84479",
    "end": "89759"
  },
  {
    "text": "also we're gonna touch a little bit about the what are docker images why",
    "start": "89759",
    "end": "94799"
  },
  {
    "text": "docker images and then the use case of Fargate and maybe touch a little bit on",
    "start": "94799",
    "end": "100040"
  },
  {
    "text": "eks as well for folks who are using kubernetes and finally in the final",
    "start": "100040",
    "end": "105390"
  },
  {
    "text": "segment Lata who is senior principal architect application architect with",
    "start": "105390",
    "end": "112290"
  },
  {
    "text": "FINRA she's gonna walk us through the journey that FINRA has taken in terms of adopting native services for cloud",
    "start": "112290",
    "end": "120570"
  },
  {
    "text": "orchestration right containers and darker one of the fundamental issues we",
    "start": "120570",
    "end": "128729"
  },
  {
    "start": "126000",
    "end": "126000"
  },
  {
    "text": "have heard from customers is we have again monolithic applications monolithic",
    "start": "128729",
    "end": "134620"
  },
  {
    "text": "applications the problem with those is when you are trying to do a CI CD implementation - essentially for faster",
    "start": "134620",
    "end": "142450"
  },
  {
    "text": "time-to-market and things like that the main problem is because those are tightly coupled components in a",
    "start": "142450",
    "end": "148270"
  },
  {
    "text": "monolithic application the time to market and time to deploy is sometimes months or more right to break down that",
    "start": "148270",
    "end": "157840"
  },
  {
    "text": "cycle to faster to do help implement faster iterative development the primary",
    "start": "157840",
    "end": "164260"
  },
  {
    "text": "driver here is faster time-to-market agility and speed right speed of",
    "start": "164260",
    "end": "170950"
  },
  {
    "text": "deployments in a CI CD cycle that's how the trend has been for the last few years and containers is not new we have",
    "start": "170950",
    "end": "178900"
  },
  {
    "text": "in the past we have seen bsd jails we have seen solaris containers and then the next evolution has been with the",
    "start": "178900",
    "end": "185980"
  },
  {
    "text": "docker containers the whole idea is the problem the doctor containers is trying",
    "start": "185980",
    "end": "191890"
  },
  {
    "text": "to solve is you have all these different and what operating environments meaning a developer it builds a code tests it",
    "start": "191890",
    "end": "198850"
  },
  {
    "text": "you know on a laptop and then goes to say or or your integrated development environment and then moves into",
    "start": "198850",
    "end": "205240"
  },
  {
    "text": "development cycle there you if there are environmental mismatch meaning",
    "start": "205240",
    "end": "211360"
  },
  {
    "text": "configuration drift in terms of libraries or dependencies and things like that the code he or she has",
    "start": "211360",
    "end": "217000"
  },
  {
    "text": "developed may not work consistently across the environments that's the biggest problem with the CI CD pipeline",
    "start": "217000",
    "end": "223240"
  },
  {
    "text": "of leveraging monolithic applications that is where docker comes into play but",
    "start": "223240",
    "end": "230890"
  },
  {
    "text": "also just to highlight with some of the issues you have in with respect to different environment is when you are",
    "start": "230890",
    "end": "238210"
  },
  {
    "text": "developing code it is also important that it be portable right and also",
    "start": "238210",
    "end": "245290"
  },
  {
    "text": "consistent in terms of performance metrics and so in terms of operations and things like that that is the whole",
    "start": "245290",
    "end": "252370"
  },
  {
    "text": "idea of moving towards micro services and darker it has been a champion in that space right darker gives you the",
    "start": "252370",
    "end": "260950"
  },
  {
    "text": "ability to the developers to to deliver code if using containers where all the",
    "start": "260950",
    "end": "268069"
  },
  {
    "text": "dependencies all the like when I say dependencies it is something like operating environment for example",
    "start": "268069",
    "end": "274460"
  },
  {
    "text": "runtime environment for a for your application code and any libraries that",
    "start": "274460",
    "end": "279949"
  },
  {
    "text": "that are required to compile the code and things like that are packaged in a unit of delivery and that's what",
    "start": "279949",
    "end": "286160"
  },
  {
    "text": "containers are all about its lightweight unlike virtual machine based",
    "start": "286160",
    "end": "291310"
  },
  {
    "text": "applications where you have to have an instantiation of your operating system and all the device drivers and things",
    "start": "291310",
    "end": "297530"
  },
  {
    "text": "like that you don't necessarily have to have all those the the VM based",
    "start": "297530",
    "end": "303169"
  },
  {
    "text": "deployments with docker so to give you again another perspective",
    "start": "303169",
    "end": "310669"
  },
  {
    "start": "307000",
    "end": "307000"
  },
  {
    "text": "is when I say self-contained you are essentially defining the kernel you are defining the base image that goes into",
    "start": "310669",
    "end": "317180"
  },
  {
    "text": "it and then all the dependencies say for example here in the stack we're highlighting you have the nodejs image",
    "start": "317180",
    "end": "324530"
  },
  {
    "text": "and then an engine X image those do are packaged and then you have a container",
    "start": "324530",
    "end": "332409"
  },
  {
    "text": "space to write container D code right so",
    "start": "332409",
    "end": "337669"
  },
  {
    "text": "you're packaging all this into a docker file and you deploy the docker file into",
    "start": "337669",
    "end": "343190"
  },
  {
    "start": "340000",
    "end": "340000"
  },
  {
    "text": "containers so that becomes your core image and that's immutable when I say mutable again once you create your",
    "start": "343190",
    "end": "349969"
  },
  {
    "text": "docker image and you publish the docker image you don't have to worry about the operating environment being changed",
    "start": "349969",
    "end": "356330"
  },
  {
    "text": "right so why were chewing machines versus containers let's take a step back again like I told you",
    "start": "356330",
    "end": "362599"
  },
  {
    "text": "with the vm based the deployment the biggest issue is for folks who have managed we're either remember or maybe",
    "start": "362599",
    "end": "369979"
  },
  {
    "text": "go go past 10 years 15 years ago there used to be solaris containers the issue",
    "start": "369979",
    "end": "376190"
  },
  {
    "text": "with that is every single application you're essentially taking a bare-metal",
    "start": "376190",
    "end": "381650"
  },
  {
    "text": "server you have a hypervisor layer on top of that and on top of that is your instance of the operating system in",
    "start": "381650",
    "end": "387889"
  },
  {
    "text": "which you're running an app so there is a OS instance for every single app so",
    "start": "387889",
    "end": "393050"
  },
  {
    "text": "there is no partitioning and the process logic layer it is partitioning at the hardware layer",
    "start": "393050",
    "end": "398100"
  },
  {
    "text": "that's the main difference but containers gives to you again as you can see here for the VMS there is a guest OS",
    "start": "398100",
    "end": "406410"
  },
  {
    "text": "element so you have to maintain the operating system patch packages and things like that whereas on the",
    "start": "406410",
    "end": "412530"
  },
  {
    "text": "container model it's very lightweight you're just maintaining one a host OS on",
    "start": "412530",
    "end": "417780"
  },
  {
    "text": "top of that is your your doctor operating environment so lightweight very portable easy to manage and that's",
    "start": "417780",
    "end": "425220"
  },
  {
    "text": "the whole goal of micro services deployment using containers so again",
    "start": "425220",
    "end": "431310"
  },
  {
    "text": "packaging application code so you know the dependencies has a developer you would know what what dependencies are",
    "start": "431310",
    "end": "436320"
  },
  {
    "text": "there in terms of your your code and your it's easy to reproduce that code and also it's immutable like I said once",
    "start": "436320",
    "end": "443880"
  },
  {
    "text": "you package it all with all the dependencies in the docker file that you you know that it'll consistently run",
    "start": "443880",
    "end": "450000"
  },
  {
    "text": "across the environments and it's portable so how can a WS help in this",
    "start": "450000",
    "end": "456800"
  },
  {
    "start": "453000",
    "end": "453000"
  },
  {
    "text": "domain of containers if you are a large enterprise customer or even never before",
    "start": "456800",
    "end": "464460"
  },
  {
    "text": "for that matter a startup the the challenge that you're gonna face is as",
    "start": "464460",
    "end": "470010"
  },
  {
    "text": "you start developing multiple applications in micro services a scheme",
    "start": "470010",
    "end": "475260"
  },
  {
    "text": "of things they're short burst cycles in terms of deployment and also faster",
    "start": "475260",
    "end": "483090"
  },
  {
    "text": "development cycles you may have multiple micro services managed by what we call",
    "start": "483090",
    "end": "489510"
  },
  {
    "text": "two pizza teams lately short small dev teams managing a small component just",
    "start": "489510",
    "end": "495840"
  },
  {
    "text": "manage one component and do it right and and scale according to the demands of the workflow or the business the",
    "start": "495840",
    "end": "503250"
  },
  {
    "text": "challenge becomes if you look at the enterprise wide applications you could potentially end up with thousands of",
    "start": "503250",
    "end": "509880"
  },
  {
    "text": "containers and then orchestrating and managing those could be a problem that is where AWS helps you with the",
    "start": "509880",
    "end": "517320"
  },
  {
    "text": "orchestration so you can continue to operate darker containers on AWS as you would on on-prem where where the the",
    "start": "517320",
    "end": "527070"
  },
  {
    "text": "value added or the value prop comes into play is how do you manage the how do you orchestrate these that's",
    "start": "527070",
    "end": "532880"
  },
  {
    "text": "where we are talking about these different services so let's start thinking about a CIC decycle so you",
    "start": "532880",
    "end": "539330"
  },
  {
    "text": "build the dockerfile you have to push the docker file into a repository write a manage the repository",
    "start": "539330",
    "end": "546290"
  },
  {
    "text": "that's where the ECR comes into play ECR is the container registry it's a mere",
    "start": "546290",
    "end": "552860"
  },
  {
    "text": "fully managed docker registry by AWS so you don't have to worry about scaling high availability and things like that",
    "start": "552860",
    "end": "559190"
  },
  {
    "text": "and also durability those are the things that that are out of the box so you push",
    "start": "559190",
    "end": "565760"
  },
  {
    "text": "that code into the registry now you have to spin your containers on top of that right using those images so that is",
    "start": "565760",
    "end": "573529"
  },
  {
    "text": "where the hosting piece comes into play there are two variations in terms of hosting either you can provision your",
    "start": "573529",
    "end": "580130"
  },
  {
    "text": "ec2 instances as you would normally do with VMs and subscribe those into the",
    "start": "580130",
    "end": "586010"
  },
  {
    "text": "container services for orchestration and/or there is a far gate option where",
    "start": "586010",
    "end": "591579"
  },
  {
    "text": "automatic provisioning of these ec2 instances are taken care by AWS and then",
    "start": "591579",
    "end": "597529"
  },
  {
    "text": "finally the orchestration layer itself you have ECS elastic container service",
    "start": "597529",
    "end": "603200"
  },
  {
    "text": "that is the managed service to manage your dr containers then the operating environment of the clusters and things",
    "start": "603200",
    "end": "609290"
  },
  {
    "text": "like that and for folks who are familiar with kubernetes kubernetes is another",
    "start": "609290",
    "end": "614360"
  },
  {
    "text": "orchestration layer this was developed by google if you're familiar with kubernetes and you want to use that",
    "start": "614360",
    "end": "620440"
  },
  {
    "text": "instead of ecs you can use eks which",
    "start": "620440",
    "end": "625880"
  },
  {
    "text": "will help you essentially manage kubernetes deployments all right let's",
    "start": "625880",
    "end": "633170"
  },
  {
    "text": "touch a little bit on ECRI again going back to my CI CD discussion so you you",
    "start": "633170",
    "end": "638630"
  },
  {
    "text": "create your docker file so you register those and essentially push those into ECR why do you need to do that that's",
    "start": "638630",
    "end": "644930"
  },
  {
    "text": "that becomes your central repo for in terms of your code deployments right the",
    "start": "644930",
    "end": "650660"
  },
  {
    "text": "the pipeline orchestration itself you can do it either AWS code services like code commit and",
    "start": "650660",
    "end": "657769"
  },
  {
    "text": "code deploy but or or third-party services like Jenkins in terms of",
    "start": "657769",
    "end": "662870"
  },
  {
    "text": "pipeline management but essentially this we this is your central place where you register your",
    "start": "662870",
    "end": "668779"
  },
  {
    "text": "darker images why is it important for you to consider this because again it",
    "start": "668779",
    "end": "675620"
  },
  {
    "text": "has native integration with darker so all your darker toolset the commands that you're used to again it's fully",
    "start": "675620",
    "end": "682370"
  },
  {
    "text": "compatible with TCR and highly scalable and highly available so underneath the",
    "start": "682370",
    "end": "687860"
  },
  {
    "text": "cover of CCR uses s3 to save your images in an encrypted fashion so first of all a you have encryption of all your darker",
    "start": "687860",
    "end": "696080"
  },
  {
    "text": "images next security again from a enterprise customer standpoint from an InfoSec standpoint how do you manage",
    "start": "696080",
    "end": "702589"
  },
  {
    "text": "these registries how do you manage ma I want only my dev team a have access to their you know images you can do that",
    "start": "702589",
    "end": "710270"
  },
  {
    "text": "with permission control using iam and from a resiliency perspective your images are all stored on s3 and for the",
    "start": "710270",
    "end": "717500"
  },
  {
    "text": "folks who know s3 it has 11 ninths of durability and whenever you do a put",
    "start": "717500",
    "end": "722630"
  },
  {
    "text": "operation against s3 it is stored in three different availability zones so if",
    "start": "722630",
    "end": "728000"
  },
  {
    "text": "if you have an easy problem in one within a region it is still durable with",
    "start": "728000",
    "end": "733520"
  },
  {
    "text": "two other images and then I did mention in terms of security it's all your",
    "start": "733520",
    "end": "742010"
  },
  {
    "text": "images are encrypted but also important to take away is from a auditability perspective I'd a lot of times customers",
    "start": "742010",
    "end": "748730"
  },
  {
    "text": "run into this audit compliance requirements me whatever it beat FISMA or nist or PCI DSS those can be",
    "start": "748730",
    "end": "756589"
  },
  {
    "text": "satisfied by making sure all these api actions are logged in cloud trail all",
    "start": "756589",
    "end": "763130"
  },
  {
    "text": "right evolution of compute when I say evolution of compute on AWS I mean in the context of running containers so",
    "start": "763130",
    "end": "771050"
  },
  {
    "text": "Allah before the launch of ecs we heard customers running docker containers",
    "start": "771050",
    "end": "777110"
  },
  {
    "text": "directly on ec2 that caused a lot of issues for customer set scale because",
    "start": "777110",
    "end": "783920"
  },
  {
    "text": "now as I told you running containers that scale is is a challenge in terms of",
    "start": "783920",
    "end": "789290"
  },
  {
    "text": "manageability so we launched the ECS service and the whole idea is to give",
    "start": "789290",
    "end": "795170"
  },
  {
    "text": "you a debt orchestration layer so with ease es you to launch types as I mentioned earlier one is easy to launch type is yes with",
    "start": "795170",
    "end": "802699"
  },
  {
    "text": "ec2 meaning your provisioning ec2 instances and registering that with those with ECS the other one is AWS for",
    "start": "802699",
    "end": "812000"
  },
  {
    "text": "gate which is essentially again container orchestration but you don't have to provision the ec2 instances we",
    "start": "812000",
    "end": "818180"
  },
  {
    "text": "do it for you based on your definitions so just to give you a few constructs",
    "start": "818180",
    "end": "825170"
  },
  {
    "text": "about how this all works so you essentially provide resources through ec2 or Fargate and then you run tasks on",
    "start": "825170",
    "end": "833870"
  },
  {
    "text": "top of those and tasks are business basically a logical grouping of containers for a specific workload or a",
    "start": "833870",
    "end": "840829"
  },
  {
    "text": "specific micro service let's go one step deeper just to draw your attention what",
    "start": "840829",
    "end": "847579"
  },
  {
    "start": "842000",
    "end": "842000"
  },
  {
    "text": "goes into this is you have these ec2 instances right these are easy to clusters you provision those clusters",
    "start": "847579",
    "end": "854690"
  },
  {
    "text": "and register with the ECS the way these clusters interact with dcs is through an",
    "start": "854690",
    "end": "860509"
  },
  {
    "text": "easiest agent similar to how you have a doctor daemon running on top of ec2",
    "start": "860509",
    "end": "866779"
  },
  {
    "text": "instance these easiest agents the core functionality of easiest agents is to interact with the control plane api's of",
    "start": "866779",
    "end": "874790"
  },
  {
    "text": "the easiest service itself so the control plane interactions with your ec2 instances is what ECS does why is that",
    "start": "874790",
    "end": "882319"
  },
  {
    "text": "important because any API action like creating cluster managing cluster or deployment of tasks on top of a",
    "start": "882319",
    "end": "888440"
  },
  {
    "text": "container how do you know whether the container is healthy or not how do you and there may be situations where you",
    "start": "888440",
    "end": "894500"
  },
  {
    "text": "want to auto scale your tasks all these API interactions are handled through that that API function which essentially",
    "start": "894500",
    "end": "902480"
  },
  {
    "text": "talks to your easiest agent and then you have the construct of the task itself as",
    "start": "902480",
    "end": "908029"
  },
  {
    "text": "you can see there so tasks I told you is a logical grouping of your containers for specific workload in our case you",
    "start": "908029",
    "end": "915620"
  },
  {
    "text": "would be talking about maybe we chop and chop down your monolithic into micro services that one micro service",
    "start": "915620",
    "end": "920899"
  },
  {
    "text": "component can consist of a task with multiple containers in it cluster",
    "start": "920899",
    "end": "927680"
  },
  {
    "text": "management again a placement service there may be mechanisms for example all all micro-services are not made equal if",
    "start": "927680",
    "end": "934860"
  },
  {
    "text": "you think about your UI or logically or things like that when you're processing a webform maybe for that the logic layer",
    "start": "934860",
    "end": "942569"
  },
  {
    "text": "needs more compute power than the webform right so containers may have",
    "start": "942569",
    "end": "948420"
  },
  {
    "text": "different operating requirements so to make sure those task placements are done",
    "start": "948420",
    "end": "954449"
  },
  {
    "text": "with the right kind of instances and right kind of CPUs and also maybe give you more resiliency like multi a-z and",
    "start": "954449",
    "end": "961079"
  },
  {
    "text": "things like that that task placement is also extremely important for resiliency and for performance reasons so for that",
    "start": "961079",
    "end": "968459"
  },
  {
    "text": "cluster management engine is essentially your your go-to component and then of course there are two mechanisms one is",
    "start": "968459",
    "end": "975060"
  },
  {
    "text": "run container by itself like a batch operation you're crunching data you you're doing some financial transactions",
    "start": "975060",
    "end": "981779"
  },
  {
    "text": "like maybe Monte Carlo simulations on a large scale of data set that's coming from s3 or there could be a service that",
    "start": "981779",
    "end": "990000"
  },
  {
    "text": "is always running and you want to expose this service into an external facing web app right so for situations for like",
    "start": "990000",
    "end": "997319"
  },
  {
    "text": "those you may have a load balancer component where you register your service and in Judah from your load",
    "start": "997319",
    "end": "1006050"
  },
  {
    "text": "balancer and by the way that doesn't have to be exposed to internet you can also have internal facing load balancers",
    "start": "1006050",
    "end": "1012470"
  },
  {
    "text": "to in like private once the constructs of ECS just to highlight some of the",
    "start": "1012470",
    "end": "1019759"
  },
  {
    "text": "most important ones here test definitions where you register your your requirements to run all your application",
    "start": "1019759",
    "end": "1026538"
  },
  {
    "text": "data right like the image what's the CPU memory requirements and things like that",
    "start": "1026539",
    "end": "1031610"
  },
  {
    "text": "and then once you create so first is you you do that task definition you push the",
    "start": "1031610",
    "end": "1037188"
  },
  {
    "text": "task definition to your registry that we spoke about an ECR and then you are going to create a cluster cluster is",
    "start": "1037189",
    "end": "1044329"
  },
  {
    "text": "again a combination of your ec2 instances and you have two choices one is if you want to do a one-time",
    "start": "1044329",
    "end": "1051380"
  },
  {
    "text": "execution of a job like a batch job processing workloads you would do a run",
    "start": "1051380",
    "end": "1057260"
  },
  {
    "text": "task right and that run task is nothing but an instantiation of the task definition that you have divided affined",
    "start": "1057260",
    "end": "1064760"
  },
  {
    "text": "or in scenarios where it's not one-time job I have a continuously running",
    "start": "1064760",
    "end": "1070280"
  },
  {
    "text": "application like a web app in a situation like that you would want to create a service registered that service",
    "start": "1070280",
    "end": "1076340"
  },
  {
    "text": "with the load balancer and ingest traffic to the service itself all right",
    "start": "1076340",
    "end": "1082100"
  },
  {
    "text": "so we discussed containers we discussed the tasks now what's the problem is as",
    "start": "1082100",
    "end": "1088309"
  },
  {
    "text": "you as you have heard from a lot of AWS folks and even in our blog post we talked about you need to be multi a-z",
    "start": "1088309",
    "end": "1094580"
  },
  {
    "text": "deployed and you know you need to do scaling using auto scaling groups and things like that so as you scale out as",
    "start": "1094580",
    "end": "1101630"
  },
  {
    "text": "you start these multi easy deployment it gets incredibly difficult to manage all these tasks right I'm routing tasks",
    "start": "1101630",
    "end": "1108710"
  },
  {
    "text": "routing traffic to specific tasks and things like that so that is where the",
    "start": "1108710",
    "end": "1113750"
  },
  {
    "text": "key takeaway from an orchestration and scheduling perspective that's where the ECS service gives you so key takeaway",
    "start": "1113750",
    "end": "1121340"
  },
  {
    "text": "for you guys would be this is first of all a you can run your tests in VPC mode",
    "start": "1121340",
    "end": "1127850"
  },
  {
    "text": "meaning it's all your if you choose to do so you can run this in your RFC 1918",
    "start": "1127850",
    "end": "1133580"
  },
  {
    "text": "space that is private subnets these are non-routable IP ranges so it's only available",
    "start": "1133580",
    "end": "1139190"
  },
  {
    "text": "internally but if you choose to expose that into a public subnet that's that's okay to write advanced tasks placement I",
    "start": "1139190",
    "end": "1145940"
  },
  {
    "text": "told you about that there are some dive deep topics on that I'm not going to cover that here but there are tons of",
    "start": "1145940",
    "end": "1151549"
  },
  {
    "text": "live documentation on that strategies for enterprise customers how to orchestrate the task placement deep",
    "start": "1151549",
    "end": "1159980"
  },
  {
    "text": "integration with the AWS services I just spoke about ECR and load balancer and s3 and maybe your your containers want to",
    "start": "1159980",
    "end": "1167809"
  },
  {
    "text": "talk to databases or talk to DynamoDB or auto repose quests and things like that so that's all you have native",
    "start": "1167809",
    "end": "1173960"
  },
  {
    "text": "integrations right there powerful scheduling engines again that's where these scheduling algorithms you",
    "start": "1173960",
    "end": "1180440"
  },
  {
    "text": "can take full advantage of that and finally of course the monitoring piece itself with similar to so we discussed",
    "start": "1180440",
    "end": "1189679"
  },
  {
    "text": "about the orchestration needs here says the only problem with that approach is you have to somebody has to manage",
    "start": "1189679",
    "end": "1197200"
  },
  {
    "text": "the resource allocation if you're running out of say for example you you are expecting X traffic and you got 10x",
    "start": "1197200",
    "end": "1204820"
  },
  {
    "text": "traffic or 100x traffic now your auto-scaling based on your auto scaling configuration but then there has to be",
    "start": "1204820",
    "end": "1212140"
  },
  {
    "text": "underlying compute to support that auto scaling needs and if you don't have it or you did not provision it and register",
    "start": "1212140",
    "end": "1217990"
  },
  {
    "text": "with DCs you are going to have performance degradation because you don't have compute to scale so to solve",
    "start": "1217990",
    "end": "1224530"
  },
  {
    "text": "that problem and also in addition to that man there is also patching packages and the package updates and things like",
    "start": "1224530",
    "end": "1230980"
  },
  {
    "text": "that that your regulatory requirements forces you to do and you have to constantly update your base ami and",
    "start": "1230980",
    "end": "1238060"
  },
  {
    "text": "customize it to your corporate needs and then spin up ec2 instances to avoid that",
    "start": "1238060",
    "end": "1243700"
  },
  {
    "text": "problem we have launched AWS for gate where you as the customer can just focus",
    "start": "1243700",
    "end": "1249670"
  },
  {
    "text": "on your micro services deployment and not worry about easiest clusters meaning provisioning of clusters we will take",
    "start": "1249670",
    "end": "1256570"
  },
  {
    "text": "care of that based on the task definitions that you have defined the only caveat is if you are doing any",
    "start": "1256570",
    "end": "1263200"
  },
  {
    "text": "machine learning modeling using containers I've seen customers doing that Fargate as doesn't support GPU",
    "start": "1263200",
    "end": "1271060"
  },
  {
    "text": "based instances yet so that's on the roadmap that's something that we'll be looking into so if you have a machine",
    "start": "1271060",
    "end": "1277360"
  },
  {
    "text": "learning requirement that has to use GPU instances Fargate may not be suitable at",
    "start": "1277360",
    "end": "1283180"
  },
  {
    "text": "the at the moment that's something on the roadmap no clusters to manage",
    "start": "1283180",
    "end": "1288240"
  },
  {
    "text": "underlying infrastructure is automatically taken care of meaning if there is a hypervisor failure and the VM",
    "start": "1288240",
    "end": "1295630"
  },
  {
    "text": "dies AWS automatically provision say another instance for you the constructs",
    "start": "1295630",
    "end": "1303460"
  },
  {
    "text": "of Fargate is not different from EC SCC to model it is the exact same thing you would register your task definition push",
    "start": "1303460",
    "end": "1310420"
  },
  {
    "text": "it to ECR and then use during the launch of the cluster you would say instead of saying EC EC s EC to launch type you",
    "start": "1310420",
    "end": "1317440"
  },
  {
    "text": "would say EC us with forget launch type so that's the only difference between the two all right a little bit about",
    "start": "1317440",
    "end": "1325270"
  },
  {
    "start": "1323000",
    "end": "1323000"
  },
  {
    "text": "networking this is also extremely important for you to understand from a performance reasons",
    "start": "1325270",
    "end": "1330430"
  },
  {
    "text": "first of all there is three different models the host networking mode which nobody uses anymore but bridge",
    "start": "1330430",
    "end": "1337900"
  },
  {
    "text": "networking mode is important this construct itself is important so for example if your container c1 is running",
    "start": "1337900",
    "end": "1345370"
  },
  {
    "text": "inside this AWS instance as I told you on top of these AWS instance is your",
    "start": "1345370",
    "end": "1351310"
  },
  {
    "text": "docker container inside the docker container is actually your application code running right when you want to",
    "start": "1351310",
    "end": "1356740"
  },
  {
    "text": "egress or ingress out of that container right receiving traffic sending traffic and things like that what happens is all",
    "start": "1356740",
    "end": "1363940"
  },
  {
    "text": "your hyper calls hyper calls are the device driver calls to your network interface card right",
    "start": "1363940",
    "end": "1369610"
  },
  {
    "text": "all those hyper calls go through something called a dock of 0 bridge right and the dr0 bridge leverages hosts",
    "start": "1369610",
    "end": "1377110"
  },
  {
    "text": "eat 0 interface so the host itself has a networking interface and Dockers 0",
    "start": "1377110",
    "end": "1383170"
  },
  {
    "text": "bridge is the conduit between your container and the network interface card",
    "start": "1383170",
    "end": "1389110"
  },
  {
    "text": "so all the routing takes place through that interface you don't as a container",
    "start": "1389110",
    "end": "1394630"
  },
  {
    "text": "you don't have direct access to your network interface it's we are the darker",
    "start": "1394630",
    "end": "1399700"
  },
  {
    "text": "0 bridge and then you have the second container say you have another container running in Dhaka in the same cluster and",
    "start": "1399700",
    "end": "1408280"
  },
  {
    "text": "if you have to talk to container one needs to talk to container 2 there is no",
    "start": "1408280",
    "end": "1413320"
  },
  {
    "text": "direct you know interface connection between the two it has to traverse",
    "start": "1413320",
    "end": "1418480"
  },
  {
    "text": "through the docker 0 bridge so that's how bridge networking mode works it is essentially relying on the constructs of",
    "start": "1418480",
    "end": "1425590"
  },
  {
    "text": "the docker demon itself using docker 0 bridge so why is that a problem for some",
    "start": "1425590",
    "end": "1432610"
  },
  {
    "text": "customers will again local traffic is muster transit through 0 and why is that",
    "start": "1432610",
    "end": "1439180"
  },
  {
    "text": "a problem if you if you take a look at that what happens if the hypervisor fails so essentially you are you eat 0",
    "start": "1439180",
    "end": "1446980"
  },
  {
    "text": "interface could be an issue right or if you knowif though if there is a",
    "start": "1446980",
    "end": "1452230"
  },
  {
    "text": "performance problem then it's gonna affect there multiple containers and traffic between containers with the same",
    "start": "1452230",
    "end": "1458110"
  },
  {
    "text": "task within the same task workspace has to transit through the",
    "start": "1458110",
    "end": "1463519"
  },
  {
    "text": "darker 0 bridge right there is no one to one mapping on there so to solve some of",
    "start": "1463519",
    "end": "1468979"
  },
  {
    "text": "those issues some of the the feedback that we received from the customer says well if we have continued if you are",
    "start": "1468979",
    "end": "1476629"
  },
  {
    "text": "using the eat 0 the problem is now if container one needs to talk to s3 and",
    "start": "1476629",
    "end": "1482659"
  },
  {
    "text": "container 2 needs to date and talk to database I have to give knackles and security group permissions to both right",
    "start": "1482659",
    "end": "1489619"
  },
  {
    "text": "so that's that's the problem with that approach so what we did is we we",
    "start": "1489619",
    "end": "1496669"
  },
  {
    "text": "launched a WSB PC networking mode as a new method of networking within the",
    "start": "1496669",
    "end": "1502099"
  },
  {
    "text": "container namespace here what your what we are doing now is instead of going",
    "start": "1502099",
    "end": "1507320"
  },
  {
    "text": "through the e0 in our face of the host itself we are leveraging the we're",
    "start": "1507320",
    "end": "1516049"
  },
  {
    "start": "1513000",
    "end": "1513000"
  },
  {
    "text": "essentially leveraging VPC integration through the e and I and we are spinning",
    "start": "1516049",
    "end": "1521239"
  },
  {
    "text": "an E and I we will be using your private subnets as part of the provisioning",
    "start": "1521239",
    "end": "1526279"
  },
  {
    "text": "process so that you can actually see ori and i being consumed and we will use dot",
    "start": "1526279",
    "end": "1531440"
  },
  {
    "text": "e and i2 to have task level networking the advantage of this one this approach",
    "start": "1531440",
    "end": "1537710"
  },
  {
    "text": "is you can do that isolation at the at the task level not at the host level right so that that's the key takeaway",
    "start": "1537710",
    "end": "1545809"
  },
  {
    "text": "for you all right with that let's and also some more enhancements before tasks",
    "start": "1545809",
    "end": "1553570"
  },
  {
    "start": "1549000",
    "end": "1549000"
  },
  {
    "text": "task roles were introduced one of the challenges that we saw with customers use cases is task one needs to talk to",
    "start": "1553570",
    "end": "1561049"
  },
  {
    "text": "dynamodb task 2 needs to talk to s3 but then they all are relying on the ec2",
    "start": "1561049",
    "end": "1567710"
  },
  {
    "text": "instance role so you have to give more permissions to instance role what is that why is that a problem because now",
    "start": "1567710",
    "end": "1575830"
  },
  {
    "text": "task 1 also has access to s3 why because you now said s3 allow at the ec2",
    "start": "1575830",
    "end": "1583190"
  },
  {
    "text": "instance role level so it's a security loophole if you think about it so to",
    "start": "1583190",
    "end": "1588259"
  },
  {
    "text": "address that problem meaning task one should not get access to test into s3",
    "start": "1588259",
    "end": "1594800"
  },
  {
    "text": "what we have introduced is task rolls so now you can isolate I give granular I am",
    "start": "1594800",
    "end": "1600470"
  },
  {
    "text": "permissions to tasks for the processing that it needs to do",
    "start": "1600470",
    "end": "1605500"
  },
  {
    "text": "all right reference architecture I'm going to I wouldn't take too much time here just to give you a overview here",
    "start": "1605500",
    "end": "1612260"
  },
  {
    "start": "1606000",
    "end": "1606000"
  },
  {
    "text": "you have private subnet your tasks are running in the private subnet if it has to aggress out a common pattern we have",
    "start": "1612260",
    "end": "1619400"
  },
  {
    "text": "seen is using a your nat gateway so that you're not exposing it directly to the",
    "start": "1619400",
    "end": "1624650"
  },
  {
    "text": "internet because it's all private subnet range and you can see with the quad 0 on",
    "start": "1624650",
    "end": "1629900"
  },
  {
    "text": "the route table all your quad 0 traffic goes through traverses through not gateway and as you know it is a managed",
    "start": "1629900",
    "end": "1636020"
  },
  {
    "text": "AWS service so you don't have to worry about that one in in a scenario where",
    "start": "1636020",
    "end": "1642050"
  },
  {
    "text": "you're exposing like a poor DD or something like that to internet you can do that through through load balancer",
    "start": "1642050",
    "end": "1649550"
  },
  {
    "text": "essentially your ingressing from internet into the public IP range through load balancer you can do poor",
    "start": "1649550",
    "end": "1655100"
  },
  {
    "text": "translation from that to that and your forget tasks will respond to the traffic so that's another the",
    "start": "1655100",
    "end": "1664420"
  },
  {
    "text": "reference architecture for so just to call out some of this is essentially a",
    "start": "1664420",
    "end": "1669800"
  },
  {
    "text": "task definition there's a bunch of documentation online to see how to spin up these resources and this is a",
    "start": "1669800",
    "end": "1676400"
  },
  {
    "text": "reference architecture on how this works a lot of visibility tools and a lot of integration so just to give you a recap",
    "start": "1676400",
    "end": "1684260"
  },
  {
    "text": "we just talked about AWS ccs for gate and ECR and there are",
    "start": "1684260",
    "end": "1689780"
  },
  {
    "text": "tons of other integration with other areas services so how does how our",
    "start": "1689780",
    "end": "1697310"
  },
  {
    "text": "customers using easy as or container services on AWS to walk us through that",
    "start": "1697310",
    "end": "1702980"
  },
  {
    "text": "next segment i'd welcome on stage lot on average from FINRA",
    "start": "1702980",
    "end": "1708940"
  },
  {
    "text": "Thank You Herschel welcome again to this session my name is Lata I'm architect at FINRA",
    "start": "1711870",
    "end": "1717760"
  },
  {
    "text": "primarily focusing on DevOps products I'm very excited to be back again this",
    "start": "1717760",
    "end": "1724510"
  },
  {
    "text": "year and to share with you some of the experiences and the lessons that we learned in our container migration",
    "start": "1724510",
    "end": "1730180"
  },
  {
    "text": "journey a little bit of introduction of who we are most of you who are in the financial domain would have already",
    "start": "1730180",
    "end": "1735670"
  },
  {
    "start": "1732000",
    "end": "1732000"
  },
  {
    "text": "heard of us Fitness stands for Financial Industry Regulatory Authority we",
    "start": "1735670",
    "end": "1740680"
  },
  {
    "text": "primarily regulate broker dealers and market exchanges in short we regulate the stock market and our mission is to",
    "start": "1740680",
    "end": "1747580"
  },
  {
    "text": "protect investors and to promote market integrity a little bit of statistics on",
    "start": "1747580",
    "end": "1753520"
  },
  {
    "text": "the volume that we deal with we currently regulate about 12 market exchanges oversee more than 3,800 forms",
    "start": "1753520",
    "end": "1761650"
  },
  {
    "text": "and monitor about six hundred and thirty four thousand broker dealers currently",
    "start": "1761650",
    "end": "1766780"
  },
  {
    "text": "working in the US so we are essentially a big data processing company and on an",
    "start": "1766780",
    "end": "1772990"
  },
  {
    "start": "1769000",
    "end": "1769000"
  },
  {
    "text": "average in a day we have about 135 billion events that get ingested into",
    "start": "1772990",
    "end": "1778270"
  },
  {
    "text": "our system to be processed for surveillance when we reconstruct and replay this events to analyze we land up",
    "start": "1778270",
    "end": "1785110"
  },
  {
    "text": "with more than trillions of nodes and edges that kind of gives you an idea of the complexity of data that we are dealing with and we also store a large",
    "start": "1785110",
    "end": "1792430"
  },
  {
    "text": "amount of data which is about 30 bit abides currently and to replay and",
    "start": "1792430",
    "end": "1798580"
  },
  {
    "text": "analyze this market data we use about 50,000 compute nodes on an average in a",
    "start": "1798580",
    "end": "1804640"
  },
  {
    "text": "per day and currently on AWS we have about 150 applications running and",
    "start": "1804640",
    "end": "1811330"
  },
  {
    "text": "helping us achieve our mission all right so before we started our container",
    "start": "1811330",
    "end": "1816850"
  },
  {
    "text": "migration journey we had to deal with two category of apps based on their infrastructure need one the on-premise",
    "start": "1816850",
    "end": "1823510"
  },
  {
    "text": "data center legacy applications and the other set of apps which we already moved to AWS cloud but they were using the",
    "start": "1823510",
    "end": "1830350"
  },
  {
    "text": "traditional ec2 ELB model and each category of these applications have their own set of problems like on",
    "start": "1830350",
    "end": "1836590"
  },
  {
    "text": "on-premise we were constantly battling with infrastructure cause and we did not have the",
    "start": "1836590",
    "end": "1842050"
  },
  {
    "text": "dynamic scalability of our infrastructure based on our application load and we had long release cycles",
    "start": "1842050",
    "end": "1848200"
  },
  {
    "text": "spanning across months which prevented us from going to the market faster and this entire process we did not have the",
    "start": "1848200",
    "end": "1855460"
  },
  {
    "text": "speed and agility that we wanted and dependency management was also quite complex where if you had needed certain",
    "start": "1855460",
    "end": "1861910"
  },
  {
    "text": "application packages to be installed it was either done through semi automated scripts or manually sometimes and we",
    "start": "1861910",
    "end": "1868810"
  },
  {
    "text": "also lacked environment parity so most of the times were spent in analyzing issues which did not surface on a lower",
    "start": "1868810",
    "end": "1875290"
  },
  {
    "text": "environment but you landed up having that on prod and this was mainly because of not having environment parity on AWS",
    "start": "1875290",
    "end": "1883840"
  },
  {
    "text": "the costs did reduce but we still saw that it started increasing as we",
    "start": "1883840",
    "end": "1889270"
  },
  {
    "text": "deployed more and more micro services onto the cloud because each micro service now needed its own auto scaling",
    "start": "1889270",
    "end": "1895660"
  },
  {
    "text": "group and load balancer and with the volume that we were looking at it was it was not going to scale and we also had",
    "start": "1895660",
    "end": "1902500"
  },
  {
    "text": "to deal with slow build and deploy time so for example if you have to deploy your application your ec2 instance",
    "start": "1902500",
    "end": "1908530"
  },
  {
    "text": "probably has to be configured with certain packages that your application depends on and you could probably",
    "start": "1908530",
    "end": "1914470"
  },
  {
    "text": "automate it using automation tools like puppet but still we saw that the deployment time in some cases span from",
    "start": "1914470",
    "end": "1920350"
  },
  {
    "text": "30 minutes to 45 minutes which is pretty high and lastly we still had to address",
    "start": "1920350",
    "end": "1925510"
  },
  {
    "text": "the parity issue which we had even on the on premised applications so what we",
    "start": "1925510",
    "end": "1931780"
  },
  {
    "start": "1931000",
    "end": "1931000"
  },
  {
    "text": "saw was we could address all these problems by using containers and we we",
    "start": "1931780",
    "end": "1936790"
  },
  {
    "text": "had down we saw the day it mainly had five benefits the first one was it was",
    "start": "1936790",
    "end": "1942370"
  },
  {
    "text": "easily portable now my application was packaged as a container and it was it",
    "start": "1942370",
    "end": "1947560"
  },
  {
    "text": "was more or less a sandbox runtime environment and I could easily drop this",
    "start": "1947560",
    "end": "1952780"
  },
  {
    "text": "container on any host and have it running so it was very easily portable second it was very cost efficient now",
    "start": "1952780",
    "end": "1959380"
  },
  {
    "text": "instead of having one auto scaling group and a year before every micro service I could fit in multiple of these containers onto same host thus I could",
    "start": "1959380",
    "end": "1966820"
  },
  {
    "text": "use my compute to its maximum efficiency and all this was very faster so I did",
    "start": "1966820",
    "end": "1973690"
  },
  {
    "text": "not have to deal with any more of deployed times that we had in the ec2 LP world the building and deploying this",
    "start": "1973690",
    "end": "1980590"
  },
  {
    "text": "containers was very fast it was probably brought down to like a couple of minutes now this was mainly because we used a",
    "start": "1980590",
    "end": "1987130"
  },
  {
    "text": "darker layer caching and we had certain base images which packaged all the common dependencies that applications",
    "start": "1987130",
    "end": "1994030"
  },
  {
    "text": "needed and my application image could just extend one of these base images and only focus on packaging what was",
    "start": "1994030",
    "end": "1999520"
  },
  {
    "text": "required for my app which is mostly my application code and the productivity",
    "start": "1999520",
    "end": "2005220"
  },
  {
    "text": "was also increased we this was mainly because we had environment parity now once the docker image was built and",
    "start": "2005220",
    "end": "2013110"
  },
  {
    "text": "tagged it was pretty imbue table and the same packed image could be used and deployed on different environments so we",
    "start": "2013110",
    "end": "2019140"
  },
  {
    "text": "did not have to battle with any more of environment parity issues and lastly we",
    "start": "2019140",
    "end": "2024870"
  },
  {
    "text": "achieved all this having a simple and lightweight solution so my application",
    "start": "2024870",
    "end": "2030450"
  },
  {
    "text": "would now just have to deal with the docker file which defined the dependencies that it needed or configured and a docker compose file",
    "start": "2030450",
    "end": "2037679"
  },
  {
    "text": "which defined the containers that made up my application and the relationship that they had with each other so it was",
    "start": "2037679",
    "end": "2043679"
  },
  {
    "text": "very simple and lightweight so once we identified containers as a solution the",
    "start": "2043679",
    "end": "2049440"
  },
  {
    "start": "2046000",
    "end": "2046000"
  },
  {
    "text": "next logical question was how do we manage these containers we did not want to have our own container management",
    "start": "2049440",
    "end": "2054750"
  },
  {
    "text": "solution and that's when we looked at what AWS has to offer and when we",
    "start": "2054750",
    "end": "2059940"
  },
  {
    "text": "started our journey it was pretty much easiest with easy to launch type that was available later on eks and Fargate",
    "start": "2059940",
    "end": "2066148"
  },
  {
    "text": "came along so in the subsequent slides we'll see how each of these service compares to one another so let's start",
    "start": "2066149",
    "end": "2072450"
  },
  {
    "text": "with easiest when I say easy as I'm referring to the ec2 launch type so the pros are it is very simple and easy to",
    "start": "2072450",
    "end": "2079710"
  },
  {
    "text": "get started so the learning curve for ec2 launched type is very simple at very low and it also integrates very well",
    "start": "2079710",
    "end": "2087840"
  },
  {
    "text": "with your other AWS services like your I am your load balancers and so on the",
    "start": "2087840",
    "end": "2094080"
  },
  {
    "text": "cons that simplicity comes the lack of flexibility of having more fine-grained",
    "start": "2094080",
    "end": "2099240"
  },
  {
    "text": "placement strategies we feel compared to like services like eks and also you have to deal with the cluster scaling",
    "start": "2099240",
    "end": "2105420"
  },
  {
    "text": "overheads so it is completely your responsibility now as to how you define is even's to expand and shrink based on",
    "start": "2105420",
    "end": "2112440"
  },
  {
    "text": "your application note and you also have to periodically update your am ice on your ec2 instances to make sure that you",
    "start": "2112440",
    "end": "2118920"
  },
  {
    "text": "are up to date with your security patches so these are all the overheads that you have to deal with with the easy to launch type so the use cases it fits",
    "start": "2118920",
    "end": "2127530"
  },
  {
    "text": "very well when you want to learn run any kind of bad jobs standalone tasks or web",
    "start": "2127530",
    "end": "2132810"
  },
  {
    "text": "applications which could be your UI api's and micro services now let's see",
    "start": "2132810",
    "end": "2138360"
  },
  {
    "text": "how far it plays out so farther it is a service option and as compared to ec2",
    "start": "2138360",
    "end": "2146820"
  },
  {
    "text": "launched type you don't have to deal with any more of your cluster scaling overheads takes care for takes",
    "start": "2146820",
    "end": "2152400"
  },
  {
    "text": "care of it for you and no longer you have to do any kind of ami updates to be in sync so all those overheads are",
    "start": "2152400",
    "end": "2158670"
  },
  {
    "text": "eliminated with the target the cons it's currently lacking the encrypted storage",
    "start": "2158670",
    "end": "2165300"
  },
  {
    "text": "support which is a big deal for us at FINRA being a regulatory forum and also",
    "start": "2165300",
    "end": "2170760"
  },
  {
    "text": "it does not offer if EFS integration which is the elastic file system",
    "start": "2170760",
    "end": "2176070"
  },
  {
    "text": "integration so if any of your applications have necessity to share certain content on EFS then might",
    "start": "2176070",
    "end": "2183870"
  },
  {
    "text": "not be an option and since uses the AWS VPC mode",
    "start": "2183870",
    "end": "2189690"
  },
  {
    "text": "for its networking it assigns the a ni per task which means you have to be",
    "start": "2189690",
    "end": "2194820"
  },
  {
    "text": "cognizant of account level account region level e ni limits use cases it's",
    "start": "2194820",
    "end": "2201720"
  },
  {
    "text": "pretty much very similar to EC s it works very well for Web Apps standalone",
    "start": "2201720",
    "end": "2207030"
  },
  {
    "text": "tasks and bad jobs or any stateless application which can manage it states externally using s 3 RDS or dynamo now",
    "start": "2207030",
    "end": "2216270"
  },
  {
    "text": "let's look how eks plays so eks which is the kubernetes service for provided by",
    "start": "2216270",
    "end": "2224880"
  },
  {
    "text": "AWS it provides you more flexibility in terms of your container placement strategies as compared to ec s and it",
    "start": "2224880",
    "end": "2232260"
  },
  {
    "text": "also has a very large open system open source ecosystem so things move faster over there the cons are the learning",
    "start": "2232260",
    "end": "2240750"
  },
  {
    "text": "curve is very high and cluster management is also pretty complex when it comes to eks so you will",
    "start": "2240750",
    "end": "2247829"
  },
  {
    "text": "spend quite a lot of engineering effort to maintain these clusters as compared",
    "start": "2247829",
    "end": "2253619"
  },
  {
    "text": "to the other services use cases in cases like it's it's very good for",
    "start": "2253619",
    "end": "2259529"
  },
  {
    "text": "applications especially if you want to run it in a hybrid mode or you do not want to be tied to a specific cloud",
    "start": "2259529",
    "end": "2265349"
  },
  {
    "text": "provider or you have a combination where you want to run an app both on-premise and on the cloud so it plays out very",
    "start": "2265349",
    "end": "2271799"
  },
  {
    "text": "well for these kind of use cases and we have also seen that eks is a very good",
    "start": "2271799",
    "end": "2276990"
  },
  {
    "text": "candidate for big data processing especially with frameworks like spark coming up with support for kubernetes by",
    "start": "2276990",
    "end": "2284150"
  },
  {
    "text": "intrinsically so it's it's a good fit for a big data processing as well and",
    "start": "2284150",
    "end": "2289289"
  },
  {
    "text": "many of platform applications mainly cause apps now come with a default",
    "start": "2289289",
    "end": "2294630"
  },
  {
    "text": "support for kubernetes so you case is lucrative even for those kind of applications all right so when we",
    "start": "2294630",
    "end": "2301650"
  },
  {
    "text": "compared all these three services we chose to go with the easiest with ec2",
    "start": "2301650",
    "end": "2306809"
  },
  {
    "text": "launch type primarily because it was simple and easy to use and it was a good fit for majority of our use cases and it",
    "start": "2306809",
    "end": "2314520"
  },
  {
    "text": "was easy for us to migrate from our ec2 ELB model to ECS alb model and we went",
    "start": "2314520",
    "end": "2320190"
  },
  {
    "text": "for the approach of having cluster per business domains so that we could avoid cert to certain extent cluster",
    "start": "2320190",
    "end": "2325920"
  },
  {
    "text": "management overheads we definitely want to be on target in the future but the",
    "start": "2325920",
    "end": "2331770"
  },
  {
    "text": "lack of encrypted storage is what's preventing us from going too far gate so easy to launch type is our solution for",
    "start": "2331770",
    "end": "2338279"
  },
  {
    "text": "now all right so once we had the",
    "start": "2338279",
    "end": "2343619"
  },
  {
    "start": "2340000",
    "end": "2340000"
  },
  {
    "text": "container and container management service identified then it was how do we really do the migration and we had to",
    "start": "2343619",
    "end": "2348930"
  },
  {
    "text": "deal with six major challenges the first most important one is the volume of enterprise apps that we had to move and",
    "start": "2348930",
    "end": "2356480"
  },
  {
    "text": "the security and compliance aspect that we wanted to integrate into our",
    "start": "2356480",
    "end": "2361650"
  },
  {
    "text": "continuous delivery pipeline seamlessly rather than you know having it as an afterthought during a release process so",
    "start": "2361650",
    "end": "2368010"
  },
  {
    "text": "all this needed the right automation and tooling to be put in place which would have best practices embedded within it",
    "start": "2368010",
    "end": "2374990"
  },
  {
    "text": "and also have the desired architecture incorporated in it so that apps could",
    "start": "2374990",
    "end": "2380030"
  },
  {
    "text": "easily move into the container world and lastly the rollout strategy basically",
    "start": "2380030",
    "end": "2385910"
  },
  {
    "text": "training our developers and getting them up to speed to have them move to containers so we will see how we",
    "start": "2385910",
    "end": "2390980"
  },
  {
    "text": "addressed each of these challenges in the subsequent slides let's start with the desired architecture so we wanted",
    "start": "2390980",
    "end": "2397550"
  },
  {
    "start": "2394000",
    "end": "2394000"
  },
  {
    "text": "our clients to hit the different endpoints basically your UI APs and so on through a load balancer we chose to",
    "start": "2397550",
    "end": "2404810"
  },
  {
    "text": "go with application load balancer because it's a layer 7 load balancer which provides you more advanced routing",
    "start": "2404810",
    "end": "2410660"
  },
  {
    "text": "capabilities like you could do host based routing or path based routing or a combination of both and it also gives",
    "start": "2410660",
    "end": "2417140"
  },
  {
    "text": "you flexibility to route your traffic to specific target groups which internally maps to your group of containers forming",
    "start": "2417140",
    "end": "2423560"
  },
  {
    "text": "your ECS service so l befriend faces your ECS cluster which is underneath an",
    "start": "2423560",
    "end": "2429200"
  },
  {
    "text": "auto scaling group of multiple ec2 instances and our images were stored on",
    "start": "2429200",
    "end": "2434690"
  },
  {
    "text": "ECR the application docket images as well as the base images now once you",
    "start": "2434690",
    "end": "2440540"
  },
  {
    "text": "have your auto scaling group set up you would you can deploy different kinds of applications different flavors of",
    "start": "2440540",
    "end": "2445970"
  },
  {
    "text": "applications all going on to the same cluster so you could have a springboard microservice your angular app or your",
    "start": "2445970",
    "end": "2452390"
  },
  {
    "text": "monolithic app all sitting on the same cluster so if you see there is a pattern",
    "start": "2452390",
    "end": "2457640"
  },
  {
    "text": "to each of these applications it is underneath easiest service which is running end copies of your tasks and",
    "start": "2457640",
    "end": "2465080"
  },
  {
    "text": "each task is a group of containers that is making up your app you see that all",
    "start": "2465080",
    "end": "2470240"
  },
  {
    "text": "of them have an identity gateway which is a container that takes care of authentication and authorization for",
    "start": "2470240",
    "end": "2475369"
  },
  {
    "text": "your application and it acts as the reverse proxy and routes your traffic only if you are authenticated to your",
    "start": "2475369",
    "end": "2481160"
  },
  {
    "text": "application container and we also went with the approach of having a site card for our logging needs a basically a",
    "start": "2481160",
    "end": "2487250"
  },
  {
    "text": "Splunk sidecar this this was a solution chosen because this would work both for",
    "start": "2487250",
    "end": "2492440"
  },
  {
    "text": "ec2 launch type as well as our target launch type in the future and as we",
    "start": "2492440",
    "end": "2500930"
  },
  {
    "text": "discussed alb would now take care of routing traffic to each of these ICS services based on different paths and",
    "start": "2500930",
    "end": "2508049"
  },
  {
    "text": "name routing options and on the ec2 host we we have collect D which is an open",
    "start": "2508049",
    "end": "2514859"
  },
  {
    "text": "source utility that helps us gather different metrics like CPU memory displays and so on and this helps with",
    "start": "2514859",
    "end": "2522390"
  },
  {
    "text": "the teams to identify to profile their applications and to determine how the scaling policies should be and lastly we",
    "start": "2522390",
    "end": "2531089"
  },
  {
    "text": "ensured that all the ec2 instances that were launched were evenly distributed across different availability zones to",
    "start": "2531089",
    "end": "2536969"
  },
  {
    "text": "be highly resilient and to have better throughput okay so now let's look at ami",
    "start": "2536969",
    "end": "2544019"
  },
  {
    "text": "so the ec2 instances that run the ami they use the FINRA EC as optimized ami",
    "start": "2544019",
    "end": "2549449"
  },
  {
    "text": "which is basically an extension of Amazon's ECS optimized ami but on top of",
    "start": "2549449",
    "end": "2555599"
  },
  {
    "text": "that we added certain security of implementations like we have CIA's security specification for docker",
    "start": "2555599",
    "end": "2562199"
  },
  {
    "text": "implemented and we also have security scanning for containers using cloud passage hello agent so let's now look at",
    "start": "2562199",
    "end": "2570660"
  },
  {
    "start": "2570000",
    "end": "2570000"
  },
  {
    "text": "the docker images so we went with the approach of having certain base images",
    "start": "2570660",
    "end": "2576059"
  },
  {
    "text": "for different flavors of our apps so these base images were now reusable and",
    "start": "2576059",
    "end": "2581459"
  },
  {
    "text": "compliant and app images would extend from any of these base images based on",
    "start": "2581459",
    "end": "2586979"
  },
  {
    "text": "what kind of app it is and they would only focus on packaging their code and configuration so this was very easy for",
    "start": "2586979",
    "end": "2593609"
  },
  {
    "text": "us to scale because as an application developer I would not require to be",
    "start": "2593609",
    "end": "2598650"
  },
  {
    "text": "cognizant of any of the security or compliance related issues and I can just focus on having my application code and",
    "start": "2598650",
    "end": "2605489"
  },
  {
    "text": "there okay all right so now let's move on to infrastructure automation so we",
    "start": "2605489",
    "end": "2612929"
  },
  {
    "start": "2608000",
    "end": "2608000"
  },
  {
    "text": "have a tool by name provision which is basically a wrapper around cloud",
    "start": "2612929",
    "end": "2618359"
  },
  {
    "text": "formation and AWS SDK API is and ECS CLI if you want to create your easiest task",
    "start": "2618359",
    "end": "2624869"
  },
  {
    "text": "definitions from docker compose and it also comes with the best practices integrated into it so when I say best",
    "start": "2624869",
    "end": "2630989"
  },
  {
    "text": "practices for example it comes with certain default so you don't have to like configure every possible property",
    "start": "2630989",
    "end": "2637410"
  },
  {
    "text": "for your infrastructure but you could go over the defaults and just have your specific configuration on top of it it",
    "start": "2637410",
    "end": "2643850"
  },
  {
    "text": "also comes with security and compliance inbuilt so for example it will ensure that your ear elby's always have secure",
    "start": "2643850",
    "end": "2649940"
  },
  {
    "text": "listeners and it has the right ACM supplied on it and so on or if you are creating an RDS instance it makes sure",
    "start": "2649940",
    "end": "2656180"
  },
  {
    "text": "that your encryption is always turned on by default and so on it also wraps around other finra specific tools and",
    "start": "2656180",
    "end": "2663230"
  },
  {
    "text": "libraries like we use fidelia's which is an open source utility that helps with",
    "start": "2663230",
    "end": "2668810"
  },
  {
    "text": "secrets management and it wraps around dns api's which is our way of handling",
    "start": "2668810",
    "end": "2674240"
  },
  {
    "text": "dns names internally so using this tool you can now create multiple stacks like",
    "start": "2674240",
    "end": "2680390"
  },
  {
    "text": "you can create your easier stack which underneath is auto scaling group you could create your alb stack where it",
    "start": "2680390",
    "end": "2686480"
  },
  {
    "text": "would create your secure listeners and set up a default target group for you create your repos for different",
    "start": "2686480",
    "end": "2693380"
  },
  {
    "text": "applications and a service stack which would have your task definition target",
    "start": "2693380",
    "end": "2698900"
  },
  {
    "text": "groups and routing rules accordingly so let's look at the delivery pipeline",
    "start": "2698900",
    "end": "2704420"
  },
  {
    "start": "2703000",
    "end": "2703000"
  },
  {
    "text": "so we have a specific delivery pipeline for your easiest cluster which takes",
    "start": "2704420",
    "end": "2710930"
  },
  {
    "text": "care of creating the cluster updating your cluster you would use it for any ami updates or changing your logic",
    "start": "2710930",
    "end": "2716960"
  },
  {
    "text": "launch configuration for your auto scaling group and so on so as you can see infrastructure is defined as code",
    "start": "2716960",
    "end": "2723260"
  },
  {
    "text": "and pushed built and pushed once to your s3 and from there on it's the same infrastructure code that is used to",
    "start": "2723260",
    "end": "2730460"
  },
  {
    "text": "create your resources on each of the AWS accounts across your SDLC we have",
    "start": "2730460",
    "end": "2739130"
  },
  {
    "text": "another pipeline for alb so we we would typically have one alb per se as cluster",
    "start": "2739130",
    "end": "2744680"
  },
  {
    "text": "and the pipeline is very similar to what we saw for ICS and you would use this",
    "start": "2744680",
    "end": "2750140"
  },
  {
    "text": "pipeline for updating anything on your lb including assigning additional dns",
    "start": "2750140",
    "end": "2755750"
  },
  {
    "text": "names to your load balancer lastly you could have multiple or a poor service",
    "start": "2755750",
    "end": "2762080"
  },
  {
    "text": "pipelines which would for each of your ECA service or component that you are deploying so methodology is still the",
    "start": "2762080",
    "end": "2768650"
  },
  {
    "text": "same you build your app code and your infrastructure code once and you here you additionally also package it",
    "start": "2768650",
    "end": "2775419"
  },
  {
    "text": "into a docker image zip which gets pushed on to s3 and that zip is what",
    "start": "2775419",
    "end": "2780549"
  },
  {
    "text": "gets promoted across your different AWS accounts and you use provision tool to",
    "start": "2780549",
    "end": "2787109"
  },
  {
    "text": "pull the image from s3 and then push it on to ECR and then provision your",
    "start": "2787109",
    "end": "2792459"
  },
  {
    "text": "easiest service so we build and tag the docker containers once and we push and",
    "start": "2792459",
    "end": "2798880"
  },
  {
    "text": "deploy the same container to any account multiple times so a little bit on the",
    "start": "2798880",
    "end": "2804159"
  },
  {
    "start": "2803000",
    "end": "2803000"
  },
  {
    "text": "production metrics here we have about 100 plus clusters currently with more than 200 plus ec2 instances and we have",
    "start": "2804159",
    "end": "2810849"
  },
  {
    "text": "about 300 plus easiest services mapping to around 500 plus active tasks",
    "start": "2810849",
    "end": "2816189"
  },
  {
    "text": "currently running on production okay so some deployment strategies so we",
    "start": "2816189",
    "end": "2822189"
  },
  {
    "start": "2819000",
    "end": "2819000"
  },
  {
    "text": "different apps have used different deployment strategies some applications have gone for Bluegreen deployment where",
    "start": "2822189",
    "end": "2827769"
  },
  {
    "text": "you have your current version which is your blue stack and then you bring up another parallel stack which is your green version and once you're satisfied",
    "start": "2827769",
    "end": "2833949"
  },
  {
    "text": "with the newer version what you do is you switch the tool so you could switch that by using alb dns switch or you",
    "start": "2833949",
    "end": "2841209"
  },
  {
    "text": "could do that with the target groups switch so Bluegreen deployment is very less risky as compared to others because",
    "start": "2841209",
    "end": "2848349"
  },
  {
    "text": "you have two parallel environments but may not be suitable for applications where the database wouldn't support two",
    "start": "2848349",
    "end": "2854079"
  },
  {
    "text": "different versions running at the same time so it might not work well for those kind of applications the other",
    "start": "2854079",
    "end": "2859239"
  },
  {
    "text": "deployment strategy is the zero downtime deployment which is basically a rolling update so here your easiest service",
    "start": "2859239",
    "end": "2866289"
  },
  {
    "text": "takes care of pulling down the older container versions and registering newer",
    "start": "2866289",
    "end": "2872439"
  },
  {
    "text": "versions by rolling them based on your minimum and maximum healthy instances",
    "start": "2872439",
    "end": "2877749"
  },
  {
    "text": "that you define so some of the best practices it is very important your that",
    "start": "2877749",
    "end": "2884589"
  },
  {
    "start": "2880000",
    "end": "2880000"
  },
  {
    "text": "your cluster is right-sized so you profile your application and gather the metrics and learn how you want it to",
    "start": "2884589",
    "end": "2891279"
  },
  {
    "text": "scale based upon the peak load that your application have to deal so you need to do that both for your cluster as well as",
    "start": "2891279",
    "end": "2897099"
  },
  {
    "text": "your easiest service and also it is very important to spread your tasks both",
    "start": "2897099",
    "end": "2902229"
  },
  {
    "text": "across availability zone for high availability and across different instances by using placement",
    "start": "2902229",
    "end": "2908680"
  },
  {
    "text": "constraints and lastly logging and monitoring is very important you do not want to be blinded if there is any issue",
    "start": "2908680",
    "end": "2915460"
  },
  {
    "text": "on your app you definitely need logging so that you can analyze the issue better and monitoring to be alerted if there is",
    "start": "2915460",
    "end": "2921789"
  },
  {
    "text": "anything going down so the future the future is very exciting we want to catch",
    "start": "2921789",
    "end": "2928599"
  },
  {
    "text": "up with the service wave and Fargate is definitely one of the major candidates",
    "start": "2928599",
    "end": "2933940"
  },
  {
    "text": "over there that we are looking at and we want to use eks for many big data",
    "start": "2933940",
    "end": "2939160"
  },
  {
    "text": "processing applications so EK is that option is in the pipeline and we want to open source the provision tool by end of",
    "start": "2939160",
    "end": "2945039"
  },
  {
    "text": "this year so that other organizations can also use this tool and plug in their own security and compliance needs and",
    "start": "2945039",
    "end": "2950500"
  },
  {
    "text": "get their infrastructure set up more easily alright so we have lot of other",
    "start": "2950500",
    "end": "2959470"
  },
  {
    "start": "2957000",
    "end": "2957000"
  },
  {
    "text": "open source tools tools so if you go to technology dot findit dot or you will see what's currently available to start",
    "start": "2959470",
    "end": "2965529"
  },
  {
    "text": "with we have gatekeeper so this tool is very handy if you have a burning production issue and you have to get on",
    "start": "2965529",
    "end": "2971170"
  },
  {
    "text": "to your ec2 instance or log into your RDS instance to analyze they show better then gatekeeper helps you with temporary",
    "start": "2971170",
    "end": "2978150"
  },
  {
    "text": "access to these instances with of course an audit trail of who requested it and when was the access granted and so on",
    "start": "2978150",
    "end": "2984910"
  },
  {
    "text": "and we have the yum nginx api which helps you manage your RPMs on yum and a",
    "start": "2984910",
    "end": "2992170"
  },
  {
    "text": "failure on which is a dashboard application which helps you visualize your AWS service limits and alerts you",
    "start": "2992170",
    "end": "2999039"
  },
  {
    "text": "if you are reaching any of those limits so that you can take care of it beforehand and recently we open-source",
    "start": "2999039",
    "end": "3005430"
  },
  {
    "text": "fidelia's which is a secrets management tool it comes with a web app a pretty UI",
    "start": "3005430",
    "end": "3012059"
  },
  {
    "text": "which will help developers to manage their credentials on their lower environment and ops to manage",
    "start": "3012059",
    "end": "3017609"
  },
  {
    "text": "credentials on the higher environment and it also offers SDK API is for automation needs for if your application",
    "start": "3017609",
    "end": "3024359"
  },
  {
    "text": "needs to pull in secrets at runtime so coming soon we already spoke about provision tools so that's my end of the",
    "start": "3024359",
    "end": "3030750"
  },
  {
    "text": "year and we also have another tool called cloud pass which issues temporary tokens using the STS service so that's",
    "start": "3030750",
    "end": "3038130"
  },
  {
    "text": "also in the pipeline and we have Porter's which helps you with managing your security groups based on",
    "start": "3038130",
    "end": "3046200"
  },
  {
    "text": "certain security policies put in place so I highly encourage all of you to take a look at our open-source tools and see",
    "start": "3046200",
    "end": "3052230"
  },
  {
    "text": "if it would be useful for any of your needs and also be welcome contributions but that I think we come to the end of",
    "start": "3052230",
    "end": "3059160"
  },
  {
    "text": "this session we are running out of time so we will be out there me and her sure",
    "start": "3059160",
    "end": "3064230"
  },
  {
    "text": "to answer any of your questions that you might have thank you so much thank you [Applause]",
    "start": "3064230",
    "end": "3070889"
  }
]